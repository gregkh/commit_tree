#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright 2018-2020 Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
# Given a git commit id, find the release(s) it was found in


REAL_SCRIPT=$(realpath -e "${BASH_SOURCE[0]}")
SCRIPT_TOP="${SCRIPT_TOP:-$(dirname "${REAL_SCRIPT}")}"

source "${SCRIPT_TOP}"/lib/common

# Location of all of the patches that have ever been added to the stable trees
# git repo is at git.kernel.org:/pub/scm/linux/kernel/git/stable/stable-queue.git
STABLE_QUEUE="/home/gregkh/linux/stable/stable-queue"

# Location of the "latest" git tree for when patches are not found in the
# stable tree at the moment.  This is the "fall-back" that we can use the
# slower 'git decribe --contains' on.
LATEST_TREE="/home/gregkh/linux/work/torvalds"

# Our local cache of ids, format is one file per release, listing all ids in
# that release
IDS_LOCATION="${SCRIPT_TOP}/ids/"

# Location of the stable logs, one file per release
STABLE_RELEASES="${SCRIPT_TOP}/releases"

GREP="git grep"
#GREP="rg"

id=$1

if [ "${id}" == "" ] ; then
        echo "$0 ID_TO_FIND"
        exit 1
fi

# Array of places we find
output=()


# Look in the kernel log text files first
cd "${IDS_LOCATION}" || exit
releases=$(${GREP} -l -i "${id}")
#echo ""
#echo "pwd=$(pwd)"
#echo "rg -l -i -r ${id} = '$(rg -l -i --debug --trace "${id}")'"
#echo "git grep -l -i ${id} = '$(git grep -l -i "${id}")'"
#echo "releases='${releases}'"
# We do not want to catch the places where this commit has been "fixed" by other commits, so filter out those files
#releases=`git grep ${id} | grep -v -i "Fixes:" | cut -f 1 -d ':'`
for release in ${releases}; do
	output+=("${release}")
#	echo -n "${release} "
done

# Then look in the stable release changelogs
cd "${STABLE_RELEASES}" || exit
releases=$(${GREP} -l -i "${id}")
for release in ${releases}; do
	release=${release#releases\/}	# delete "releases/" off of the front of any match
	release=${release%\/*}		# only keep the front kernel release directory of a match, not the patch itself
	output+=("${release}")
#	echo -n "${release} "
done

# it's nice to search the current stable queues to get an idea if the patch is already there or not as well
cd ${STABLE_QUEUE=} || exit
releases=$(${GREP} -l -i "${id}" queue-*)
for release in ${releases}; do
	release=${release%\/*}		# only keep the front queue release directory of a match, not the patch itself
	output+=("${release}")
done

# if we have found nothing, let's try the fallback and do the old and
# slow 'git describe --contains' to try to find at least some hint of
# where this commit might be at.
if [ "${output[0]}" == "" ] ; then
	cd "${LATEST_TREE}" || exit
	output+=("$(git describe --contains "${id}")")
fi

# sort the list of releases and put them in a new array called "sorted"
readarray -t sorted < <(for release in "${output[@]}"; do echo "${release}"; done | sort -V | uniq)

# print them out all on one line, with ' ' inbetween them
(IFS=' ' ; printf '%s\n' "${sorted[*]}")



