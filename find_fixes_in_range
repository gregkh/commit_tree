#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright 2020 Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
#

STABLE_TREE="/home/gregkh/linux/stable/linux-stable"

REAL_SCRIPT=$(realpath -e "${BASH_SOURCE[0]}")
SCRIPT_TOP="${SCRIPT_TOP:-$(dirname "${REAL_SCRIPT}")}"

source "${SCRIPT_TOP}"/lib/common

TMPDIR="/home/gregkh/tmp"
PREFIX="$(basename "${REAL_SCRIPT}")_"
TMP_PREFIX="${TMPDIR}/${PREFIX}"

GEN_CID="${SCRIPT_TOP}/generate_cid.sh"
ID_FIXED_IN="${SCRIPT_TOP}/id_fixed_in"

RELEASE_IDS="${SCRIPT_TOP}/releases/"

usage()
{
        echo "error, git range not found"
        echo "usage:"
        echo "  $0 GIT_RANGE"
        exit 2
}

save_commit()
{
	local commit version mbox
	commit=$1
	version=$2
	mbox=$3

	#log "${txtylw}in ${version} release, SAVING!${txtrst}"
	git show --pretty=email "${commit}" | sed -e "s/\[PATCH\]/\[PATCH ${version}\]/" >> "${mbox}"
}

check_commit()
{
	commit=$1
#	sha1=$(echo "${commit}" |  cut -f 1 -d ' ' | cut -f 2 -d '-')	# yeah, I could do better with a regex
	if [ "${commit}" == "upstream" ] ; then
		return
	fi
	logn "${txtcyn}looking at ${txtgrn}${commit}${txtrst}	"
	result=$(${ID_FIXED_IN} "${commit}")
	retval=$?
	if [ $retval -ne 0 ] ; then
		log "${txtpur}no fixes${txtrst}"
		return
	fi
	for line in ${result}; do
		line_array=(${line//:/ })
		sha1=${line_array[0]}
		kernel_version=${line_array[1]}
		commit_id=${line_array[2]}

		# see if the id is already in a release
		pushd "${RELEASE_IDS}" > /dev/null
		in_release=$(git grep "${commit_id}")
		popd > /dev/null
		if [ "${in_release}" == "" ] ; then
			logn "${txtred}fix found in ${txtylw}${kernel_version} "
			save_commit "${commit_id}" "${kernel_version}" "${MBOX}"
		else
			x=$(echo "${in_release}" | cut -f 1 -d ':')
			logn "${txtylw}already in release ${x}"
		fi
	done
	log ""

}

git_range=$1

if [ "${git_range}" == "" ] ; then
        usage
fi

pwd=$(pwd)

cd ${STABLE_TREE}

MBOX=$(mktemp ${TMP_PREFIX}mbox.XXXXXX) || exit 1

threads=$(nproc)

log "using ${txtpur}${threads}${txtrst} threads"

for id in $(${GEN_CID} ${git_range} | cut -f 1 -d ' ' | cut -f 2 -d '-'); do
	while :
	do
		if [ $(jobs -p | wc -l) -lt ${threads} ]; then
			check_commit ${id} &
			break;
		else
			sleep 1
		fi
	done
done
wait

echo "# commits are in ${MBOX}"
echo "mutt -f ${MBOX}"
