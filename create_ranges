#!/bin/bash
#

REAL_SCRIPT=$(realpath -e ${BASH_SOURCE[0]})
SCRIPT_TOP="${SCRIPT_TOP:-$(dirname ${REAL_SCRIPT})}"

KERNEL_TREE="/home/gregkh/linux/stable/linux-stable"

cd ${KERNEL_TREE} || exit 1


create_range()
{
	kernel_1=$1
	kernel_2=$2

	cd ${SCRIPT_TOP} || exit 1
	#echo "./create_kernel_files ${kernel_1} ${kernel_2}"
	./create_kernel_files "${kernel_1}" "${kernel_2}"
}

# returns 0 if release is a valid one, otherwise usually something like 128 or another error
is_valid_release()
{
	release=$1
	cd ${KERNEL_TREE} || exit 1
	return $(git show v"${release}" &> /dev/null)
}

loop_through_y()
{
	major=$1
	minor=$2

	for y in {1..400}; do
		# If this is the first time through the loop, do it from the
		# major to the first minor release
		if [ "${y}" == "1" ] ; then
			create_range "${major}.${minor}" "${major}.${minor}.${y}"
			continue
		fi

		is_valid_release "${major}.${minor}.${y}"
		if [ $? -ne 0 ] ; then
			continue
		fi

		create_range "${major}.${minor}.$(($y - 1))" "${major}.${minor}.${y}"
	done
}

loop_through_x()
{
	major=$1

	for minor in {0..30}; do
		is_valid_release "${major}.${minor}"
		if [ $? -ne 0 ] ; then
			continue
		fi
		# create the range from the last one to this one
		if [ "${minor}" != "0" ] ; then
			create_range "${major}.$(($minor - 1))" "${major}.${minor}"
		fi

		loop_through_y "${major}" "${minor}"
	done

}


loop_through_x 3
loop_through_x 4
loop_through_x 5

exit
