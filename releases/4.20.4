commit 3d4332cd825848da1a40c7116eb777b3269df0ea
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jan 22 21:10:01 2019 +0100

    Linux 4.20.4

commit b00af935ce03c6631cabbc5ef74dcd865c051eae
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jan 14 09:48:09 2019 +0100

    nbd: Use set_blocksize() to set device blocksize
    
    commit c8a83a6b54d0ca078de036aafb3f6af58c1dc5eb upstream.
    
    NBD can update block device block size implicitely through
    bd_set_size(). Make it explicitely set blocksize with set_blocksize() as
    this behavior of bd_set_size() is going away.
    
    CC: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit deb89c6ef9d38f13dc2c1ca4261ea169ea9b30d9
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Fri Nov 23 07:05:58 2018 -0500

    media: vb2: be sure to unlock mutex on errors
    
    commit c06ef2e9acef4cda1feee2ce055b8086e33d251a upstream.
    
    As reported by smatch:
    drivers/media/common/videobuf2/videobuf2-core.c: drivers/media/common/videobuf2/videobuf2-core.c:2159 vb2_mmap() warn: inconsistent returns 'mutex:&q->mmap_lock'.
      Locked on:   line 2148
      Unlocked on: line 2100
                   line 2108
                   line 2113
                   line 2118
                   line 2156
                   line 2159
    
    There is one error condition that doesn't unlock a mutex.
    
    Fixes: cd26d1c4d1bc ("media: vb2: vb2_mmap: move lock up")
    Reviewed-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ebc192f90918fa1fc19f21710b47a5d0898c336
Author: Ivan Mironov <mironov.ivan@gmail.com>
Date:   Tue Jan 8 12:23:53 2019 +0500

    drm/fb-helper: Ignore the value of fb_var_screeninfo.pixclock
    
    commit 66a8d5bfb518f9f12d47e1d2dce1732279f9451e upstream.
    
    Strict requirement of pixclock to be zero breaks support of SDL 1.2
    which contains hardcoded table of supported video modes with non-zero
    pixclock values[1].
    
    To better understand which pixclock values are considered valid and how
    driver should handle these values, I briefly examined few existing fbdev
    drivers and documentation in Documentation/fb/. And it looks like there
    are no strict rules on that and actual behaviour varies:
    
            * some drivers treat (pixclock == 0) as "use defaults" (uvesafb.c);
            * some treat (pixclock == 0) as invalid value which leads to
              -EINVAL (clps711x-fb.c);
            * some pass converted pixclock value to hardware (uvesafb.c);
            * some are trying to find nearest value from predefined table
              (vga16fb.c, video_gx.c).
    
    Given this, I believe that it should be safe to just ignore this value if
    changing is not supported. It seems that any portable fbdev application
    which was not written only for one specific device working under one
    specific kernel version should not rely on any particular behaviour of
    pixclock anyway.
    
    However, while enabling SDL1 applications to work out of the box when
    there is no /etc/fb.modes with valid settings, this change affects the
    video mode choosing logic in SDL. Depending on current screen
    resolution, contents of /etc/fb.modes and resolution requested by
    application, this may lead to user-visible difference (not always):
    image will be displayed in a right way, but it will be aligned to the
    left instead of center. There is no "right behaviour" here as well, as
    emulated fbdev, opposing to old fbdev drivers, simply ignores any
    requsts of video mode changes with resolutions smaller than current.
    
    The easiest way to reproduce this problem is to install sdl-sopwith[2],
    remove /etc/fb.modes file if it exists, and then try to run sopwith
    from console without X. At least in Fedora 29, sopwith may be simply
    installed from standard repositories.
    
    [1] SDL 1.2.15 source code, src/video/fbcon/SDL_fbvideo.c, vesa_timings
    [2] http://sdl-sopwith.sourceforge.net/
    
    Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
    Cc: stable@vger.kernel.org
    Fixes: 79e539453b34e ("DRM: i915: add mode setting support")
    Fixes: 771fe6b912fca ("drm/radeon: introduce kernel modesetting for radeon hardware")
    Fixes: 785b93ef8c309 ("drm/kms: move driver specific fb common code to helper functions (v2)")
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190108072353.28078-3-mironov.ivan@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbc329a075dbd969746f05c050a236a8d74a6116
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Wed Jan 9 19:17:14 2019 -0800

    loop: drop caches if offset or block_size are changed
    
    commit 5db470e229e22b7eda6e23b5566e532c96fb5bc3 upstream.
    
    If we don't drop caches used in old offset or block_size, we can get old data
    from new offset/block_size, which gives unexpected data to user.
    
    For example, Martijn found a loopback bug in the below scenario.
    1) LOOP_SET_FD loads first two pages on loop file
    2) LOOP_SET_STATUS64 changes the offset on the loop file
    3) mount is failed due to the cached pages having wrong superblock
    
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: linux-block@vger.kernel.org
    Reported-by: Martijn Coenen <maco@google.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7569e702a5032d3020a6e7672f1467e7b62081d
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Nov 12 08:42:14 2018 -0700

    loop: Fix double mutex_unlock(&loop_ctl_mutex) in loop_control_ioctl()
    
    commit 628bd85947091830a8c4872adfd5ed1d515a9cf2 upstream.
    
    Commit 0a42e99b58a20883 ("loop: Get rid of loop_index_mutex") forgot to
    remove mutex_unlock(&loop_ctl_mutex) from loop_control_ioctl() when
    replacing loop_index_mutex with loop_ctl_mutex.
    
    Fixes: 0a42e99b58a20883 ("loop: Get rid of loop_index_mutex")
    Reported-by: syzbot <syzbot+c0138741c2290fc5e63f@syzkaller.appspotmail.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6022f2518cb59dadb6a9fe8f027e22abfc1f82dc
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:16 2018 +0100

    loop: Get rid of 'nested' acquisition of loop_ctl_mutex
    
    commit c28445fa06a3a54e06938559b9514c5a7f01c90f upstream.
    
    The nested acquisition of loop_ctl_mutex (->lo_ctl_mutex back then) has
    been introduced by commit f028f3b2f987e "loop: fix circular locking in
    loop_clr_fd()" to fix lockdep complains about bd_mutex being acquired
    after lo_ctl_mutex during partition rereading. Now that these are
    properly fixed, let's stop fooling lockdep.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 273618e24ef9027730bf7d6196da035f97963b19
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:15 2018 +0100

    loop: Avoid circular locking dependency between loop_ctl_mutex and bd_mutex
    
    commit 1dded9acf6dc9a34cd27fcf8815507e4e65b3c4f upstream.
    
    Code in loop_change_fd() drops reference to the old file (and also the
    new file in a failure case) under loop_ctl_mutex. Similarly to a
    situation in loop_set_fd() this can create a circular locking dependency
    if this was the last reference holding the file open. Delay dropping of
    the file reference until we have released loop_ctl_mutex.
    
    Reported-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92affbf845f39527c5541e26db7b35318e531aef
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:14 2018 +0100

    loop: Fix deadlock when calling blkdev_reread_part()
    
    commit 0da03cab87e6323ff2e05b14bc7d5c6fcc531efd upstream.
    
    Calling blkdev_reread_part() under loop_ctl_mutex causes lockdep to
    complain about circular lock dependency between bdev->bd_mutex and
    lo->lo_ctl_mutex. The problem is that on loop device open or close
    lo_open() and lo_release() get called with bdev->bd_mutex held and they
    need to acquire loop_ctl_mutex. OTOH when loop_reread_partitions() is
    called with loop_ctl_mutex held, it will call blkdev_reread_part() which
    acquires bdev->bd_mutex. See syzbot report for details [1].
    
    Move call to blkdev_reread_part() in __loop_clr_fd() from under
    loop_ctl_mutex to finish fixing of the lockdep warning and the possible
    deadlock.
    
    [1] https://syzkaller.appspot.com/bug?id=bf154052f0eea4bc7712499e4569505907d1588
    
    Reported-by: syzbot <syzbot+4684a000d5abdade83fac55b1e7d1f935ef1936e@syzkaller.appspotmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f26d605afa5b26069998b0c5214e27cc25016c6
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:13 2018 +0100

    loop: Move loop_reread_partitions() out of loop_ctl_mutex
    
    commit 85b0a54a82e4fbceeb1aebb7cb6909edd1a24668 upstream.
    
    Calling loop_reread_partitions() under loop_ctl_mutex causes lockdep to
    complain about circular lock dependency between bdev->bd_mutex and
    lo->lo_ctl_mutex. The problem is that on loop device open or close
    lo_open() and lo_release() get called with bdev->bd_mutex held and they
    need to acquire loop_ctl_mutex. OTOH when loop_reread_partitions() is
    called with loop_ctl_mutex held, it will call blkdev_reread_part() which
    acquires bdev->bd_mutex. See syzbot report for details [1].
    
    Move all calls of loop_rescan_partitions() out of loop_ctl_mutex to
    avoid lockdep warning and fix deadlock possibility.
    
    [1] https://syzkaller.appspot.com/bug?id=bf154052f0eea4bc7712499e4569505907d1588
    
    Reported-by: syzbot <syzbot+4684a000d5abdade83fac55b1e7d1f935ef1936e@syzkaller.appspotmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e04b3348a6b696031048fd177b0cfb53f98bfd92
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:12 2018 +0100

    loop: Move special partition reread handling in loop_clr_fd()
    
    commit d57f3374ba4817f7c8d26fae8a13d20ac8d31b92 upstream.
    
    The call of __blkdev_reread_part() from loop_reread_partition() happens
    only when we need to invalidate partitions from loop_release(). Thus
    move a detection for this into loop_clr_fd() and simplify
    loop_reread_partition().
    
    This makes loop_reread_partition() safe to use without loop_ctl_mutex
    because we use only lo->lo_number and lo->lo_file_name in case of error
    for reporting purposes (thus possibly reporting outdate information is
    not a big deal) and we are safe from 'lo' going away under us by
    elevated lo->lo_refcnt.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af2dfddd003209adf70a62d9308316faff398b51
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:11 2018 +0100

    loop: Push loop_ctl_mutex down to loop_change_fd()
    
    commit c371077000f4138ee3c15fbed50101ff24bdc91d upstream.
    
    Push loop_ctl_mutex down to loop_change_fd(). We will need this to be
    able to call loop_reread_partitions() without loop_ctl_mutex.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44e30aca0708541208a0f4441d7cd2e23b2c6af6
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:10 2018 +0100

    loop: Push loop_ctl_mutex down to loop_set_fd()
    
    commit 757ecf40b7e029529768eb5f9562d5eeb3002106 upstream.
    
    Push lo_ctl_mutex down to loop_set_fd(). We will need this to be able to
    call loop_reread_partitions() without lo_ctl_mutex.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a22475190f7371204c534e73dcc0756386fade01
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:09 2018 +0100

    loop: Push loop_ctl_mutex down to loop_set_status()
    
    commit 550df5fdacff94229cde0ed9b8085155654c1696 upstream.
    
    Push loop_ctl_mutex down to loop_set_status(). We will need this to be
    able to call loop_reread_partitions() without loop_ctl_mutex.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d9cdb0e8f900620203ae6abef6100f73ae210dd
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:08 2018 +0100

    loop: Push loop_ctl_mutex down to loop_get_status()
    
    commit 4a5ce9ba5877e4640200d84a735361306ad1a1b8 upstream.
    
    Push loop_ctl_mutex down to loop_get_status() to avoid the unusual
    convention that the function gets called with loop_ctl_mutex held and
    releases it.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d73158884d8813bc517c4fa5760341620e61a94
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:07 2018 +0100

    loop: Push loop_ctl_mutex down into loop_clr_fd()
    
    commit 7ccd0791d98531df7cd59e92d55e4f063d48a070 upstream.
    
    loop_clr_fd() has a weird locking convention that is expects
    loop_ctl_mutex held, releases it on success and keeps it on failure.
    Untangle the mess by moving locking of loop_ctl_mutex into
    loop_clr_fd().
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e22f199bd3993859c75d0cdb4cd91898fd918f5
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:06 2018 +0100

    loop: Split setting of lo_state from loop_clr_fd
    
    commit a2505b799a496b7b84d9a4a14ec870ff9e42e11b upstream.
    
    Move setting of lo_state to Lo_rundown out into the callers. That will
    allow us to unlock loop_ctl_mutex while the loop device is protected
    from other changes by its special state.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56b897daad18bd5e2c5ed3c44849ef5496c6bd94
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:05 2018 +0100

    loop: Push lo_ctl_mutex down into individual ioctls
    
    commit a13165441d58b216adbd50252a9cc829d78a6bce upstream.
    
    Push acquisition of lo_ctl_mutex down into individual ioctl handling
    branches. This is a preparatory step for pushing the lock down into
    individual ioctl handling functions so that they can release the lock as
    they need it. We also factor out some simple ioctl handlers that will
    not need any special handling to reduce unnecessary code duplication.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc04196fae8881ed94d6658de60528bc966c6fa4
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:04 2018 +0100

    loop: Get rid of loop_index_mutex
    
    commit 0a42e99b58a208839626465af194cfe640ef9493 upstream.
    
    Now that loop_ctl_mutex is global, just get rid of loop_index_mutex as
    there is no good reason to keep these two separate and it just
    complicates the locking.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1de686d15b2f3fe7fbf647174b22260b401b62f9
Author: Jan Kara <jack@suse.cz>
Date:   Thu Nov 8 14:01:03 2018 +0100

    loop: Fold __loop_release into loop_release
    
    commit 967d1dc144b50ad005e5eecdfadfbcfb399ffff6 upstream.
    
    __loop_release() has a single call site. Fold it there. This is
    currently not a huge win but it will make following replacement of
    loop_index_mutex more obvious.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 264a6e74867ab2ab2962cacd1b95848864aaa8d3
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu Nov 8 14:01:02 2018 +0100

    block/loop: Use global lock for ioctl() operation.
    
    commit 310ca162d779efee8a2dc3731439680f3e9c1e86 upstream.
    
    syzbot is reporting NULL pointer dereference [1] which is caused by
    race condition between ioctl(loop_fd, LOOP_CLR_FD, 0) versus
    ioctl(other_loop_fd, LOOP_SET_FD, loop_fd) due to traversing other
    loop devices at loop_validate_file() without holding corresponding
    lo->lo_ctl_mutex locks.
    
    Since ioctl() request on loop devices is not frequent operation, we don't
    need fine grained locking. Let's use global lock in order to allow safe
    traversal at loop_validate_file().
    
    Note that syzbot is also reporting circular locking dependency between
    bdev->bd_mutex and lo->lo_ctl_mutex [2] which is caused by calling
    blkdev_reread_part() with lock held. This patch does not address it.
    
    [1] https://syzkaller.appspot.com/bug?id=f3cfe26e785d85f9ee259f385515291d21bd80a3
    [2] https://syzkaller.appspot.com/bug?id=bf154052f0eea4bc7712499e4569505907d15889
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+bf89c128e05dd6c62523@syzkaller.appspotmail.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e86b34ad87f3981cdaaca573b6b6720d20717772
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu Nov 8 14:01:01 2018 +0100

    block/loop: Don't grab "struct file" for vfs_getattr() operation.
    
    commit b1ab5fa309e6c49e4e06270ec67dd7b3e9971d04 upstream.
    
    vfs_getattr() needs "struct path" rather than "struct file".
    Let's use path_get()/path_put() rather than get_file()/fput().
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5fe02be40a8681905efb94ebdc7d05af1d9b3f4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:29 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_doit
    
    commit 2753ca5d9009c180dbfd4c802c80983b4b6108d1 upstream.
    
    BUG: KMSAN: uninit-value in tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
    CPU: 0 PID: 4514 Comm: syz-executor485 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
     tipc_nl_compat_recv+0x164b/0x2700 net/tipc/netlink_compat.c:1153
     genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
     genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
     netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fda9
    RSP: 002b:00007ffd0c184ba8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fda9
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 00000000004016d0
    R13: 0000000000401760 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    In tipc_nl_compat_recv(), when the len variable returned by
    nlmsg_attrlen() is 0, the message is still treated as a valid one,
    which is obviously unresonable. When len is zero, it means the
    message not only doesn't contain any valid TLV payload, but also
    TLV header is not included. Under this stituation, tlv_type field
    in TLV header is still accessed in tipc_nl_compat_dumpit() or
    tipc_nl_compat_doit(), but the field space is obviously illegal.
    Of course, it is not initialized.
    
    Reported-by: syzbot+bca0dc46634781f08b38@syzkaller.appspotmail.com
    Reported-by: syzbot+6bdb590321a7ae40c1a6@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5486e8d46560ca2b4d86cbd7d3a66d9913b2ac65
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:28 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_name_table_dump
    
    commit 974cb0e3e7c963ced06c4e32c5b2884173fa5e01 upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
    CPU: 0 PID: 6290 Comm: syz-executor848 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
     __tipc_nl_compat_dumpit+0x59e/0xdb0 net/tipc/netlink_compat.c:205
     tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:270
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1151 [inline]
     tipc_nl_compat_recv+0x1402/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffecec49318 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    We cannot take for granted the thing that the length of data contained
    in TLV is longer than the size of struct tipc_name_table_query in
    tipc_nl_compat_name_table_dump().
    
    Reported-by: syzbot+06e771a754829716a327@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9d3883792bf57479d13160cd6e3e0a999d5e269
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:27 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_set
    
    commit edf5ff04a45750ac8ce2435974f001dc9cfbf055 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 9306 Comm: syz-executor172 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x173/0x1d0 lib/dump_stack.c:113
      kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
      __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
      strlen+0x3b/0xa0 lib/string.c:486
      nla_put_string include/net/netlink.h:1154 [inline]
      __tipc_nl_compat_link_set net/tipc/netlink_compat.c:708 [inline]
      tipc_nl_compat_link_set+0x929/0x1220 net/tipc/netlink_compat.c:744
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
      tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
      __sys_sendmsg net/socket.c:2154 [inline]
      __do_sys_sendmsg net/socket.c:2163 [inline]
      __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
      do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in
        nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)
    
    This is because lc->name string is not validated before it's used.
    
    Reported-by: syzbot+d78b8a29241a195aefb8@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86a25533a1bab939597d0df4e9c1ea84e93494c3
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:26 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_bearer_enable
    
    commit 0762216c0ad2a2fccd63890648eca491f2c83d9a upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:484
    CPU: 1 PID: 6371 Comm: syz-executor652 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     strlen+0x3b/0xa0 lib/string.c:484
     nla_put_string include/net/netlink.h:1011 [inline]
     tipc_nl_compat_bearer_enable+0x238/0x7b0 net/tipc/netlink_compat.c:389
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x39f/0xae0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_recv+0x147c/0x2760 net/tipc/netlink_compat.c:1107
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffef7beee8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The root cause is that we don't validate whether bear name is a valid
    string in tipc_nl_compat_bearer_enable().
    
    Meanwhile, we also fix the same issue in the following functions:
    tipc_nl_compat_bearer_disable()
    tipc_nl_compat_link_stat_dump()
    tipc_nl_compat_media_set()
    tipc_nl_compat_bearer_set()
    
    Reported-by: syzbot+b33d5cae0efd35dbfe77@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d32cdd25dba44ecba47e923cdd7bef64b938d72
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:25 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_reset_stats
    
    commit 8b66fee7f8ee18f9c51260e7a43ab37db5177a05 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 11057 Comm: syz-executor0 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:295
     strlen+0x3b/0xa0 lib/string.c:486
     nla_put_string include/net/netlink.h:1154 [inline]
     tipc_nl_compat_link_reset_stats+0x1f0/0x360 net/tipc/netlink_compat.c:760
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
     tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2557338c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f25573396d4
    R13: 00000000004cb478 R14: 00000000004d86c8 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in tipc_nl_compat_link_reset_stats:
        nla_put_string(skb, TIPC_NLA_LINK_NAME, name)
    
    This is because name string is not validated before it's used.
    
    Reported-by: syzbot+e01d94b5a4c266be6e4c@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4ce0e2d2d74194741e8ca523a51942275758a9c
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:24 2019 +0800

    tipc: fix uninit-value in in tipc_conn_rcv_sub
    
    commit a88289f4ddee4165d5f796bd99e09eec3133c16b upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
    CPU: 0 PID: 66 Comm: kworker/u4:4 Not tainted 4.17.0-rc3+ #88
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: tipc_rcv tipc_conn_recv_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
     tipc_conn_rcv_from_sock net/tipc/topsrv.c:409 [inline]
     tipc_conn_recv_work+0x3cd/0x560 net/tipc/topsrv.c:424
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
     worker_thread+0x113c/0x24f0 kernel/workqueue.c:2279
     kthread+0x539/0x720 kernel/kthread.c:239
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:412
    
    Local variable description: ----s.i@tipc_conn_recv_work
    Variable was created at:
     tipc_conn_recv_work+0x65/0x560 net/tipc/topsrv.c:419
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
    
    In tipc_conn_rcv_from_sock(), it always supposes the length of message
    received from sock_recvmsg() is not smaller than the size of struct
    tipc_subscr. However, this assumption is false. Especially when the
    length of received message is shorter than struct tipc_subscr size,
    we will end up touching uninitialized fields in tipc_conn_rcv_sub().
    
    Reported-by: syzbot+8951a3065ee7fd6d6e23@syzkaller.appspotmail.com
    Reported-by: syzbot+75e6e042c5bbf691fc82@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90f63396903122c55bd3046aa67c9f93ecccf330
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jan 14 18:34:02 2019 +0800

    sctp: allocate sctp_sockaddr_entry with kzalloc
    
    commit 400b8b9a2a17918f8ce00786f596f530e7f30d50 upstream.
    
    The similar issue as fixed in Commit 4a2eb0c37b47 ("sctp: initialize
    sin6_flowinfo for ipv6 addrs in sctp_inet6addr_event") also exists
    in sctp_inetaddr_event, as Alexander noticed.
    
    To fix it, allocate sctp_sockaddr_entry with kzalloc for both sctp
    ipv4 and ipv6 addresses, as does in sctp_v4/6_copy_addrlist().
    
    Reported-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reported-by: syzbot+ae0c70c0c2d40c51bb92@syzkaller.appspotmail.com
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00199a49afcd65d5ecc60b7976b2063ba6f168fb
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jan 14 09:48:10 2019 +0100

    blockdev: Fix livelocks on loop device
    
    commit 04906b2f542c23626b0ef6219b808406f8dddbe9 upstream.
    
    bd_set_size() updates also block device's block size. This is somewhat
    unexpected from its name and at this point, only blkdev_open() uses this
    functionality. Furthermore, this can result in changing block size under
    a filesystem mounted on a loop device which leads to livelocks inside
    __getblk_gfp() like:
    
    Sending NMI from CPU 0 to CPUs 1:
    NMI backtrace for cpu 1
    CPU: 1 PID: 10863 Comm: syz-executor0 Not tainted 4.18.0-rc5+ #151
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google
    01/01/2011
    RIP: 0010:__sanitizer_cov_trace_pc+0x3f/0x50 kernel/kcov.c:106
    ...
    Call Trace:
     init_page_buffers+0x3e2/0x530 fs/buffer.c:904
     grow_dev_page fs/buffer.c:947 [inline]
     grow_buffers fs/buffer.c:1009 [inline]
     __getblk_slow fs/buffer.c:1036 [inline]
     __getblk_gfp+0x906/0xb10 fs/buffer.c:1313
     __bread_gfp+0x2d/0x310 fs/buffer.c:1347
     sb_bread include/linux/buffer_head.h:307 [inline]
     fat12_ent_bread+0x14e/0x3d0 fs/fat/fatent.c:75
     fat_ent_read_block fs/fat/fatent.c:441 [inline]
     fat_alloc_clusters+0x8ce/0x16e0 fs/fat/fatent.c:489
     fat_add_cluster+0x7a/0x150 fs/fat/inode.c:101
     __fat_get_block fs/fat/inode.c:148 [inline]
    ...
    
    Trivial reproducer for the problem looks like:
    
    truncate -s 1G /tmp/image
    losetup /dev/loop0 /tmp/image
    mkfs.ext4 -b 1024 /dev/loop0
    mount -t ext4 /dev/loop0 /mnt
    losetup -c /dev/loop0
    l /mnt
    
    Fix the problem by moving initialization of a block device block size
    into a separate function and call it when needed.
    
    Thanks to Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp> for help with
    debugging the problem.
    
    Reported-by: syzbot+9933e4476f365f5d5a1b@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 081aee5c7e30f7f75ec8b16f58eac806258f14c9
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Wed Jan 9 10:55:10 2019 -0500

    selinux: fix GPF on invalid policy
    
    commit 5b0e7310a2a33c06edc7eb81ffc521af9b2c5610 upstream.
    
    levdatum->level can be NULL if we encounter an error while loading
    the policy during sens_read prior to initializing it.  Make sure
    sens_destroy handles that case correctly.
    
    Reported-by: syzbot+6664500f0f18f07a5c0e@syzkaller.appspotmail.com
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb298c065482fc51bbf47f396fc457dd052e1d5f
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu Jan 10 19:19:31 2019 +0900

    gpu/drm: Fix lock held when returning to user space.
    
    commit 4089e272ac61603931beb024d4d640de2cb390e0 upstream.
    
    We need to call drm_modeset_acquire_fini() when drm_atomic_state_alloc()
    failed or call drm_modeset_acquire_init() after drm_atomic_state_alloc()
    succeeded.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+6ea337c427f5083ebdf2@syzkaller.appspotmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/1547115571-21219-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94b2aec76d682dd8c0cb2356169cb399eaafdc9e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Nov 28 11:10:33 2018 +0100

    drm/vkms: Fix plane duplicate_state
    
    commit 7cdf33ab02e01300e7e6289acbac9cd8759f8712 upstream.
    
    We need to handle allocation failures and bail out. While at it, tune
    the allocation failures down to debug level.
    
    syzbot injected an allocation failure and then hit this WARN_ON.
    
    Reported-by: syzbot+eb6e5365f23c02517dda@syzkaller.appspotmail.com
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Haneen Mohammed <hamohammed.sa@gmail.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Rodrigo Siqueira <rodrigosiqueiramelo@gmail.com>
    Cc: Gustavo Padovan <gustavo.padovan@collabora.com>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181128101033.4840-1-daniel.vetter@ffwll.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3631a8b2fcb27648453dce4bec25123160095fa
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Wed Nov 28 16:42:01 2018 +0800

    block: use rcu_work instead of call_rcu to avoid sleep in softirq
    
    commit 94a2c3a32b62e868dc1e3d854326745a7f1b8c7a upstream.
    
    We recently got a stack by syzkaller like this:
    
    BUG: sleeping function called from invalid context at mm/slab.h:361
    in_atomic(): 1, irqs_disabled(): 0, pid: 6644, name: blkid
    INFO: lockdep is turned off.
    CPU: 1 PID: 6644 Comm: blkid Not tainted 4.4.163-514.55.6.9.x86_64+ #76
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
     0000000000000000 5ba6a6b879e50c00 ffff8801f6b07b10 ffffffff81cb2194
     0000000041b58ab3 ffffffff833c7745 ffffffff81cb2080 5ba6a6b879e50c00
     0000000000000000 0000000000000001 0000000000000004 0000000000000000
    Call Trace:
     <IRQ>  [<ffffffff81cb2194>] __dump_stack lib/dump_stack.c:15 [inline]
     <IRQ>  [<ffffffff81cb2194>] dump_stack+0x114/0x1a0 lib/dump_stack.c:51
     [<ffffffff8129a981>] ___might_sleep+0x291/0x490 kernel/sched/core.c:7675
     [<ffffffff8129ac33>] __might_sleep+0xb3/0x270 kernel/sched/core.c:7637
     [<ffffffff81794c13>] slab_pre_alloc_hook mm/slab.h:361 [inline]
     [<ffffffff81794c13>] slab_alloc_node mm/slub.c:2610 [inline]
     [<ffffffff81794c13>] slab_alloc mm/slub.c:2692 [inline]
     [<ffffffff81794c13>] kmem_cache_alloc_trace+0x2c3/0x5c0 mm/slub.c:2709
     [<ffffffff81cbe9a7>] kmalloc include/linux/slab.h:479 [inline]
     [<ffffffff81cbe9a7>] kzalloc include/linux/slab.h:623 [inline]
     [<ffffffff81cbe9a7>] kobject_uevent_env+0x2c7/0x1150 lib/kobject_uevent.c:227
     [<ffffffff81cbf84f>] kobject_uevent+0x1f/0x30 lib/kobject_uevent.c:374
     [<ffffffff81cbb5b9>] kobject_cleanup lib/kobject.c:633 [inline]
     [<ffffffff81cbb5b9>] kobject_release+0x229/0x440 lib/kobject.c:675
     [<ffffffff81cbb0a2>] kref_sub include/linux/kref.h:73 [inline]
     [<ffffffff81cbb0a2>] kref_put include/linux/kref.h:98 [inline]
     [<ffffffff81cbb0a2>] kobject_put+0x72/0xd0 lib/kobject.c:692
     [<ffffffff8216f095>] put_device+0x25/0x30 drivers/base/core.c:1237
     [<ffffffff81c4cc34>] delete_partition_rcu_cb+0x1d4/0x2f0 block/partition-generic.c:232
     [<ffffffff813c08bc>] __rcu_reclaim kernel/rcu/rcu.h:118 [inline]
     [<ffffffff813c08bc>] rcu_do_batch kernel/rcu/tree.c:2705 [inline]
     [<ffffffff813c08bc>] invoke_rcu_callbacks kernel/rcu/tree.c:2973 [inline]
     [<ffffffff813c08bc>] __rcu_process_callbacks kernel/rcu/tree.c:2940 [inline]
     [<ffffffff813c08bc>] rcu_process_callbacks+0x59c/0x1c70 kernel/rcu/tree.c:2957
     [<ffffffff8120f509>] __do_softirq+0x299/0xe20 kernel/softirq.c:273
     [<ffffffff81210496>] invoke_softirq kernel/softirq.c:350 [inline]
     [<ffffffff81210496>] irq_exit+0x216/0x2c0 kernel/softirq.c:391
     [<ffffffff82c2cd7b>] exiting_irq arch/x86/include/asm/apic.h:652 [inline]
     [<ffffffff82c2cd7b>] smp_apic_timer_interrupt+0x8b/0xc0 arch/x86/kernel/apic/apic.c:926
     [<ffffffff82c2bc25>] apic_timer_interrupt+0xa5/0xb0 arch/x86/entry/entry_64.S:746
     <EOI>  [<ffffffff814cbf40>] ? audit_kill_trees+0x180/0x180
     [<ffffffff8187d2f7>] fd_install+0x57/0x80 fs/file.c:626
     [<ffffffff8180989e>] do_sys_open+0x45e/0x550 fs/open.c:1043
     [<ffffffff818099c2>] SYSC_open fs/open.c:1055 [inline]
     [<ffffffff818099c2>] SyS_open+0x32/0x40 fs/open.c:1050
     [<ffffffff82c299e1>] entry_SYSCALL_64_fastpath+0x1e/0x9a
    
    In softirq context, we call rcu callback function delete_partition_rcu_cb(),
    which may allocate memory by kzalloc with GFP_KERNEL flag. If the
    allocation cannot be satisfied, it may sleep. However, That is not allowed
    in softirq contex.
    
    Although we found this problem on linux 4.4, the latest kernel version
    seems to have this problem as well. And it is very similar to the
    previous one:
            https://lkml.org/lkml/2018/7/9/391
    
    Fix it by using RCU workqueue, which allows sleep.
    
    Reviewed-by: Paul E. McKenney <paulmck@linux.ibm.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21e69f878b0a417703f9dd34ce402172168b4f9b
Author: Shakeel Butt <shakeelb@google.com>
Date:   Wed Jan 2 19:14:31 2019 -0800

    netfilter: ebtables: account ebt_table_info to kmemcg
    
    commit e2c8d550a973bb34fc28bc8d0ec996f84562fb8a upstream.
    
    The [ip,ip6,arp]_tables use x_tables_info internally and the underlying
    memory is already accounted to kmemcg. Do the same for ebtables. The
    syzbot, by using setsockopt(EBT_SO_SET_ENTRIES), was able to OOM the
    whole system from a restricted memcg, a potential DoS.
    
    By accounting the ebt_table_info, the memory used for ebt_table_info can
    be contained within the memcg of the allocating process. However the
    lifetime of ebt_table_info is independent of the allocating process and
    is tied to the network namespace. So, the oom-killer will not be able to
    relieve the memory pressure due to ebt_table_info memory. The memory for
    ebt_table_info is allocated through vmalloc. Currently vmalloc does not
    handle the oom-killed allocating process correctly and one large
    allocation can bypass memcg limit enforcement. So, with this patch,
    at least the small allocations will be contained. For large allocations,
    we need to fix vmalloc.
    
    Reported-by: syzbot+7713f3aa67be76b1552c@syzkaller.appspotmail.com
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b640cc5153302502a7e2c319d902347817afb6e
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Dec 20 10:35:11 2018 -0500

    sunrpc: handle ENOMEM in rpcb_getport_async
    
    commit 81c88b18de1f11f70c97f28ced8d642c00bb3955 upstream.
    
    If we ignore the error we'll hit a null dereference a little later.
    
    Reported-by: syzbot+4b98281f2401ab849f4b@syzkaller.appspotmail.com
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1014f1acf797e910d4b9f60a592c18a2aa9609d
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Tue Nov 13 09:06:46 2018 -0500

    media: vb2: vb2_mmap: move lock up
    
    commit cd26d1c4d1bc947b56ae404998ae2276df7b39b7 upstream.
    
    If a filehandle is dup()ped, then it is possible to close it from one fd
    and call mmap from the other. This creates a race condition in vb2_mmap
    where it is using queue data that __vb2_queue_free (called from close())
    is in the process of releasing.
    
    By moving up the mutex_lock(mmap_lock) in vb2_mmap this race is avoided
    since __vb2_queue_free is called with the same mutex locked. So vb2_mmap
    now reads consistent buffer data.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Reported-by: syzbot+be93025dd45dccd8923c@syzkaller.appspotmail.com
    Signed-off-by: Hans Verkuil <hansverk@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06959caf70bc8ac27743381c5cf159ba1a23ca4d
Author: James Morris <james.morris@microsoft.com>
Date:   Wed Jan 16 15:41:11 2019 -0800

    LSM: Check for NULL cred-security on free
    
    commit a5795fd38ee8194451ba3f281f075301a3696ce2 upstream.
    
    From: Casey Schaufler <casey@schaufler-ca.com>
    
    Check that the cred security blob has been set before trying
    to clean it up. There is a case during credential initialization
    that could result in this.
    
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Acked-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Reported-by: syzbot+69ca07954461f189e808@syzkaller.appspotmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4917a54c025a317a21f3ed9b3f767d98e2ad00a9
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 4 11:00:00 2019 -0800

    ipv6: make icmp6_send() robust against null skb->dev
    
    commit 8d933670452107e41165bea70a30dffbd281bef1 upstream.
    
    syzbot was able to crash one host with the following stack trace :
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 8625 Comm: syz-executor4 Not tainted 4.20.0+ #8
    RIP: 0010:dev_net include/linux/netdevice.h:2169 [inline]
    RIP: 0010:icmp6_send+0x116/0x2d30 net/ipv6/icmp.c:426
     icmpv6_send
     smack_socket_sock_rcv_skb
     security_sock_rcv_skb
     sk_filter_trim_cap
     __sk_receive_skb
     dccp_v6_do_rcv
     release_sock
    
    This is because a RX packet found socket owned by user and
    was stored into socket backlog. Before leaving RCU protected section,
    skb->dev was cleared in __sk_receive_skb(). When socket backlog
    was finally handled at release_sock() time, skb was fed to
    smack_socket_sock_rcv_skb() then icmp6_send()
    
    We could fix the bug in smack_socket_sock_rcv_skb(), or simply
    make icmp6_send() more robust against such possibility.
    
    In the future we might provide to icmp6_send() the net pointer
    instead of infering it.
    
    Fixes: d66a8acbda92 ("Smack: Inform peer that IPv6 traffic has been blocked")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Piotr Sawicki <p.sawicki2@partner.samsung.com>
    Cc: Casey Schaufler <casey@schaufler-ca.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8981cf21934372212bef398c23c877b652324fed
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Jan 15 20:19:22 2019 -0500

    bpf: in __bpf_redirect_no_mac pull mac only if present
    
    commit e7c87bd6cc4ec7b0ac1ed0a88a58f8206c577488 upstream.
    
    Syzkaller was able to construct a packet of negative length by
    redirecting from bpf_prog_test_run_skb with BPF_PROG_TYPE_LWT_XMIT:
    
        BUG: KASAN: slab-out-of-bounds in memcpy include/linux/string.h:345 [inline]
        BUG: KASAN: slab-out-of-bounds in skb_copy_from_linear_data include/linux/skbuff.h:3421 [inline]
        BUG: KASAN: slab-out-of-bounds in __pskb_copy_fclone+0x2dd/0xeb0 net/core/skbuff.c:1395
        Read of size 4294967282 at addr ffff8801d798009c by task syz-executor2/12942
    
        kasan_report.cold.9+0x242/0x309 mm/kasan/report.c:412
        check_memory_region_inline mm/kasan/kasan.c:260 [inline]
        check_memory_region+0x13e/0x1b0 mm/kasan/kasan.c:267
        memcpy+0x23/0x50 mm/kasan/kasan.c:302
        memcpy include/linux/string.h:345 [inline]
        skb_copy_from_linear_data include/linux/skbuff.h:3421 [inline]
        __pskb_copy_fclone+0x2dd/0xeb0 net/core/skbuff.c:1395
        __pskb_copy include/linux/skbuff.h:1053 [inline]
        pskb_copy include/linux/skbuff.h:2904 [inline]
        skb_realloc_headroom+0xe7/0x120 net/core/skbuff.c:1539
        ipip6_tunnel_xmit net/ipv6/sit.c:965 [inline]
        sit_tunnel_xmit+0xe1b/0x30d0 net/ipv6/sit.c:1029
        __netdev_start_xmit include/linux/netdevice.h:4325 [inline]
        netdev_start_xmit include/linux/netdevice.h:4334 [inline]
        xmit_one net/core/dev.c:3219 [inline]
        dev_hard_start_xmit+0x295/0xc90 net/core/dev.c:3235
        __dev_queue_xmit+0x2f0d/0x3950 net/core/dev.c:3805
        dev_queue_xmit+0x17/0x20 net/core/dev.c:3838
        __bpf_tx_skb net/core/filter.c:2016 [inline]
        __bpf_redirect_common net/core/filter.c:2054 [inline]
        __bpf_redirect+0x5cf/0xb20 net/core/filter.c:2061
        ____bpf_clone_redirect net/core/filter.c:2094 [inline]
        bpf_clone_redirect+0x2f6/0x490 net/core/filter.c:2066
        bpf_prog_41f2bcae09cd4ac3+0xb25/0x1000
    
    The generated test constructs a packet with mac header, network
    header, skb->data pointing to network header and skb->len 0.
    
    Redirecting to a sit0 through __bpf_redirect_no_mac pulls the
    mac length, even though skb->data already is at skb->network_header.
    bpf_prog_test_run_skb has already pulled it as LWT_XMIT !is_l2.
    
    Update the offset calculation to pull only if skb->data differs
    from skb->network_header, which is not true in this case.
    
    The test itself can be run only from commit 1cf1cae963c2 ("bpf:
    introduce BPF_PROG_TEST_RUN command"), but the same type of packets
    with skb at network header could already be built from lwt xmit hooks,
    so this fix is more relevant to that commit.
    
    Also set the mac header on redirect from LWT_XMIT, as even after this
    change to __bpf_redirect_no_mac that field is expected to be set, but
    is not yet in ip_finish_output2.
    
    Fixes: 3a0af8fd61f9 ("bpf: BPF for lightweight tunnel infrastructure")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 387ebb1e837883f51fc830aba8cb8b3efd0f9246
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Oct 29 13:32:38 2018 -0400

    media: vivid: set min width/height to a value > 0
    
    commit 9729d6d282a6d7ce88e64c9119cecdf79edf4e88 upstream.
    
    The capture DV timings capabilities allowed for a minimum width and
    height of 0. So passing a timings struct with 0 values is allowed
    and will later cause a division by zero.
    
    Ensure that the width and height must be >= 16 to avoid this.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+57c3d83d71187054d56f@syzkaller.appspotmail.com
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78e7067a0a357c4be48d07d0a8e7fb34380cfddf
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Mon Oct 29 06:15:31 2018 -0400

    media: vivid: fix error handling of kthread_run
    
    commit 701f49bc028edb19ffccd101997dd84f0d71e279 upstream.
    
    kthread_run returns an error pointer, but elsewhere in the code
    dev->kthread_vid_cap/out is checked against NULL.
    
    If kthread_run returns an error, then set the pointer to NULL.
    
    I chose this method over changing all kthread_vid_cap/out tests
    elsewhere since this is more robust.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: syzbot+53d5b2df0d9744411e2e@syzkaller.appspotmail.com
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f134f703dd8a1a93b8f59e7610062dfab90a771c
Author: Vlad Tsyrklevich <vlad@tsyrklevich.net>
Date:   Fri Jan 11 14:34:38 2019 +0100

    omap2fb: Fix stack memory disclosure
    
    commit a01421e4484327fe44f8e126793ed5a48a221e24 upstream.
    
    Using [1] for static analysis I found that the OMAPFB_QUERY_PLANE,
    OMAPFB_GET_COLOR_KEY, OMAPFB_GET_DISPLAY_INFO, and OMAPFB_GET_VRAM_INFO
    cases could all leak uninitialized stack memory--either due to
    uninitialized padding or 'reserved' fields.
    
    Fix them by clearing the shared union used to store copied out data.
    
    [1] https://github.com/vlad902/kernel-uninitialized-memory-checker
    
    Signed-off-by: Vlad Tsyrklevich <vlad@tsyrklevich.net>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Fixes: b39a982ddecf ("OMAP: DSS2: omapfb driver")
    Cc: security@kernel.org
    [b.zolnierkie: prefix patch subject with "omap2fb: "]
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43805c8fde671c7190b7735c8325cf8cde6df54d
Author: Florian La Roche <florian.laroche@googlemail.com>
Date:   Sat Jan 19 16:14:50 2019 +0100

    fix int_sqrt64() for very large numbers
    
    commit fbfaf851902cd9293f392f3a1735e0543016d530 upstream.
    
    If an input number x for int_sqrt64() has the highest bit set, then
    fls64(x) is 64.  (1UL << 64) is an overflow and breaks the algorithm.
    
    Subtracting 1 is a better guess for the initial value of m anyway and
    that's what also done in int_sqrt() implicitly [*].
    
    [*] Note how int_sqrt() uses __fls() with two underscores, which already
        returns the proper raw bit number.
    
        In contrast, int_sqrt64() used fls64(), and that returns bit numbers
        illogically starting at 1, because of error handling for the "no
        bits set" case. Will points out that he bug probably is due to a
        copy-and-paste error from the regular int_sqrt() case.
    
    Signed-off-by: Florian La Roche <Florian.LaRoche@googlemail.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d7c3186604f67760d7cfe90ed4487b7b104e603
Author: YunQiang Su <ysu@wavecomp.com>
Date:   Tue Jan 8 13:45:10 2019 +0800

    Disable MSI also when pcie-octeon.pcie_disable on
    
    commit a214720cbf50cd8c3f76bbb9c3f5c283910e9d33 upstream.
    
    Octeon has an boot-time option to disable pcie.
    
    Since MSI depends on PCI-E, we should also disable MSI also with
    this option is on in order to avoid inadvertently accessing PCIe
    registers.
    
    Signed-off-by: YunQiang Su <ysu@wavecomp.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: pburton@wavecomp.com
    Cc: linux-mips@vger.kernel.org
    Cc: aaro.koskinen@iki.fi
    Cc: stable@vger.kernel.org # v3.3+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a0ed519f32c4ec3e4c1e10906af59f4b637cd19
Author: Rob Herring <robh@kernel.org>
Date:   Fri Jan 11 14:34:39 2019 +0100

    fbdev: offb: Fix OF node name handling
    
    commit 00257e0cc550c4a8df5f99c0a4fc74fec0656144 upstream.
    
    Commit 5c63e407aaab ("fbdev: Convert to using %pOFn instead of
    device_node.name") changed how the OF FB driver handles the OF node
    name. This missed the case where the node name is passed to
    offb_init_palette_hacks(). This results in a NULL ptr dereference
    in strncmp and breaks any system except ones using bootx with no display
    node.
    
    Fix this by making offb_init_palette_hacks() use the OF node pointer and
    use of_node_name_prefix() helper function instead for node name
    comparisons. This helps in moving all OF node name accesses to helper
    functions in preparation to remove struct device_node.name pointer.
    
    Fixes: 5c63e407aaab ("fbdev: Convert to using %pOFn instead of device_node.name")
    Reported-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Cc: stable@vger.kernel.org # v4.19+
    Cc: Elimar Riesebieter <riesebie@lxtec.de>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf59d388b8bac1347aa5363522bdc41a15c8c7ff
Author: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date:   Fri Dec 21 17:45:03 2018 +0100

    arm64: dts: marvell: armada-ap806: reserve PSCI area
    
    commit 132ac39cffbcfed80ada38ef0fc6d34d95da7be6 upstream.
    
    The memory area [0x4000000-0x4200000[ is occupied by the PSCI firmware. Any
    attempt to access it from Linux leads to an immediate crash.
    
    So let's make the same memory reservation as the vendor kernel.
    
    [gregory: added as comment that this region matches the mainline U-boot]
    Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c60a14ba43a1d2134e7682553646d565a17cea54
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jan 15 20:47:07 2019 +0100

    arm64: kaslr: ensure randomized quantities are clean to the PoC
    
    commit 1598ecda7b239e9232dda032bfddeed9d89fab6c upstream.
    
    kaslr_early_init() is called with the kernel mapped at its
    link time offset, and if it returns with a non-zero offset,
    the kernel is unmapped and remapped again at the randomized
    offset.
    
    During its execution, kaslr_early_init() also randomizes the
    base of the module region and of the linear mapping of DRAM,
    and sets two variables accordingly. However, since these
    variables are assigned with the caches on, they may get lost
    during the cache maintenance that occurs when unmapping and
    remapping the kernel, so ensure that these values are cleaned
    to the PoC.
    
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Fixes: f80fb3a3d508 ("arm64: add support for kernel ASLR")
    Cc: <stable@vger.kernel.org> # v4.6+
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83dcbd8f7dba6da30d557279353ea769e7069235
Author: Breno Leitao <leitao@debian.org>
Date:   Wed Jan 9 11:16:45 2019 -0200

    powerpc/tm: Limit TM code inside PPC_TRANSACTIONAL_MEM
    
    commit 897bc3df8c5aebb54c32d831f917592e873d0559 upstream.
    
    Commit e1c3743e1a20 ("powerpc/tm: Set MSR[TS] just prior to recheckpoint")
    moved a code block around and this block uses a 'msr' variable outside of
    the CONFIG_PPC_TRANSACTIONAL_MEM, however the 'msr' variable is declared
    inside a CONFIG_PPC_TRANSACTIONAL_MEM block, causing a possible error when
    CONFIG_PPC_TRANSACTION_MEM is not defined.
    
            error: 'msr' undeclared (first use in this function)
    
    This is not causing a compilation error in the mainline kernel, because
    'msr' is being used as an argument of MSR_TM_ACTIVE(), which is defined as
    the following when CONFIG_PPC_TRANSACTIONAL_MEM is *not* set:
    
            #define MSR_TM_ACTIVE(x) 0
    
    This patch just fixes this issue avoiding the 'msr' variable usage outside
    the CONFIG_PPC_TRANSACTIONAL_MEM block, avoiding trusting in the
    MSR_TM_ACTIVE() definition.
    
    Cc: stable@vger.kernel.org
    Reported-by: Christoph Biedl <linux-kernel.bfrz@manchmal.in-ulm.de>
    Fixes: e1c3743e1a20 ("powerpc/tm: Set MSR[TS] just prior to recheckpoint")
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdc0577ff335f74dc08037c3a0295ceea29850c6
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Thu Jan 3 09:04:45 2019 -0500

    SUNRPC: Fix TCP receive code on archs with flush_dcache_page()
    
    commit 6a829eb8619fbdde6d7d627ad582fe119805f39d upstream.
    
    After receiving data into the page cache, we need to call flush_dcache_page()
    for the architectures that define it.
    
    Fixes: 277e4ab7d530b ("SUNRPC: Simplify TCP receive code by switching...")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org # v4.20
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6a37229d72a52c0f025f2aff179c884eacf81ad
Author: Kees Cook <keescook@chromium.org>
Date:   Sun Jan 20 14:33:34 2019 -0800

    pstore/ram: Avoid allocation and leak of platform data
    
    commit 5631e8576a3caf606cdc375f97425a67983b420c upstream.
    
    Yue Hu noticed that when parsing device tree the allocated platform data
    was never freed. Since it's not used beyond the function scope, this
    switches to using a stack variable instead.
    
    Reported-by: Yue Hu <huyue2@yulong.com>
    Fixes: 35da60941e44 ("pstore/ram: add Device Tree bindings")
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36bb9a63e5d49f059cd8f0ed7bc7121aaad6d176
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jan 16 11:27:08 2019 +0100

    net: dsa: realtek-smi: fix OF child-node lookup
    
    commit 3f1bb6abdf19cfa89860b3bc9e7f31b44b6a0ba1 upstream.
    
    Use the new of_get_compatible_child() helper to look up child nodes to
    avoid ever matching non-child nodes elsewhere in the tree.
    
    Also fix up the related struct device_node leaks.
    
    Fixes: d8652956cf37 ("net: dsa: realtek-smi: Add Realtek SMI driver")
    Cc: stable <stable@vger.kernel.org>     # 4.19: 36156f9241cb0
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35875c6ca66ced337853801d14555aaaec45e724
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Jan 15 16:19:00 2019 +0900

    kbuild: mark prepare0 as PHONY to fix external module build
    
    commit e00d8880481497474792d28c14479a9fb6752046 upstream.
    
    Commit c3ff2a5193fa ("powerpc/32: add stack protector support")
    caused kernel panic on PowerPC when an external module is used with
    CONFIG_STACKPROTECTOR because the 'prepare' target was not executed
    for the external module build.
    
    Commit e07db28eea38 ("kbuild: fix single target build for external
    module") turned it into a build error because the 'prepare' target is
    now executed but the 'prepare0' target is missing for the external
    module build.
    
    External module on arm/arm64 with CONFIG_STACKPROTECTOR_PER_TASK is
    also broken in the same way.
    
    Move 'PHONY += prepare0' to the common place. GNU Make is fine with
    missing rule for phony targets. I also removed the comment which is
    wrong irrespective of this commit.
    
    I minimize the change so it can be easily backported to 4.20.x
    
    To fix v4.20, please backport e07db28eea38 ("kbuild: fix single target
    build for external module"), and then this commit.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=201891
    Fixes: e07db28eea38 ("kbuild: fix single target build for external module")
    Fixes: c3ff2a5193fa ("powerpc/32: add stack protector support")
    Fixes: 189af4657186 ("ARM: smp: add support for per-task stack canaries")
    Fixes: 0a1213fa7432 ("arm64: enable per-task stack canaries")
    Cc: linux-stable <stable@vger.kernel.org> # v4.20
    Reported-by: Samuel Holland <samuel@sholland.org>
    Reported-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1749c7f2897244904db206dbcea96aae677adcda
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Nov 22 08:11:54 2018 +0900

    kbuild: fix single target build for external module
    
    commit e07db28eea38ed4e332b3a89f3995c86b713cb5b upstream.
    
    Building a single target in an external module fails due to missing
    .tmp_versions directory.
    
    For example,
    
      $ make -C /lib/modules/$(uname -r)/build M=$PWD foo.o
    
    will fail in the following way:
    
      CC [M]  /home/masahiro/foo/foo.o
    /bin/sh: 1: cannot create /home/masahiro/foo/.tmp_versions/foo.mod: Directory nonexistent
    
    This is because $(cmd_crmodverdir) is executed only before building
    /, %/, %.ko single targets of external modules. Create .tmp_versions
    in the 'prepare' target.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f20e6ccb184572c257674ac8e3680f1eb95075eb
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Jan 11 19:06:44 2019 +0000

    kbuild: Disable LD_DEAD_CODE_DATA_ELIMINATION with ftrace & GCC <= 4.7
    
    commit 16fd20aa98080c2fa666dc384036ec08c80af710 upstream.
    
    When building using GCC 4.7 or older, -ffunction-sections & the -pg flag
    used by ftrace are incompatible. This causes warnings or build failures
    (where -Werror applies) such as the following:
    
      arch/mips/generic/init.c:
        error: -ffunction-sections disabled; it makes profiling impossible
    
    This used to be taken into account by the ordering of calls to cc-option
    from within the top-level Makefile, which was introduced by commit
    90ad4052e85c ("kbuild: avoid conflict between -ffunction-sections and
    -pg on gcc-4.7"). Unfortunately this was broken when the
    CONFIG_LD_DEAD_CODE_DATA_ELIMINATION cc-option check was moved to
    Kconfig in commit e85d1d65cd8a ("kbuild: test dead code/data elimination
    support in Kconfig"), because the flags used by this check no longer
    include -pg.
    
    Fix this by not allowing CONFIG_LD_DEAD_CODE_DATA_ELIMINATION to be
    enabled at the same time as ftrace/CONFIG_FUNCTION_TRACER when building
    using GCC 4.7 or older.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: e85d1d65cd8a ("kbuild: test dead code/data elimination support in Kconfig")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c6f0b13f77d99f0bd936c9afb2d2866ca028447
Author: Adit Ranadive <aditr@vmware.com>
Date:   Wed Jan 9 23:08:49 2019 +0000

    RDMA/vmw_pvrdma: Return the correct opcode when creating WR
    
    commit 6325e01b6cdf4636b721cf7259c1616e3cf28ce2 upstream.
    
    Since the IB_WR_REG_MR opcode value changed, let's set the PVRDMA device
    opcodes explicitly.
    
    Reported-by: Ruishuang Wang <ruishuangw@vmware.com>
    Fixes: 9a59739bd01f ("IB/rxe: Revise the ib_wr_opcode enum")
    Cc: stable@vger.kernel.org
    Reviewed-by: Bryan Tan <bryantan@vmware.com>
    Reviewed-by: Ruishuang Wang <ruishuangw@vmware.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Signed-off-by: Adit Ranadive <aditr@vmware.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47a3f9dd77317d88fd64866abc02c83351daafe7
Author: Leon Romanovsky <leon@kernel.org>
Date:   Mon Dec 24 11:05:16 2018 +0200

    RDMA/nldev: Don't expose unsafe global rkey to regular user
    
    commit a9666c1cae8dbcd1a9aacd08a778bf2a28eea300 upstream.
    
    Unsafe global rkey is considered dangerous because it exposes memory
    registered for all memory in the system. Only users with a QP on the same
    PD can use the rkey, and generally those QPs will already know the
    value. However, out of caution, do not expose the value to unprivleged
    users on the local system. Require CAP_NET_ADMIN instead.
    
    Cc: <stable@vger.kernel.org> # 4.16
    Fixes: 29cf1351d450 ("RDMA/nldev: provide detailed PD information")
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4e68f59a7a0995305fd231ddac13165d345b77d
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Fri Jan 11 07:07:25 2019 -0500

    media: vim2m: only cancel work if it is for right context
    
    commit 240809ef6630a4ce57c273c2d79ffb657cd361eb upstream.
    
    cancel_delayed_work_sync() was called for any queue, but it should only
    be called for the queue that is associated with the currently running job.
    
    Otherwise, if two filehandles are streaming at the same time, then closing the
    first will cancel the work which might still be running for a job from the
    second filehandle. As a result the second filehandle will never be able to
    finish the job and an attempt to stop streaming on that second filehandle will
    stall.
    
    Fixes: 52117be68b82 ("media: vim2m: use cancel_delayed_work_sync instead of flush_schedule_work")
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: <stable@vger.kernel.org>      # for v4.20 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab7cc2702350a6e71cc8680bdb32052d3a725649
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Thu Jan 10 09:24:26 2019 -0500

    media: v4l: ioctl: Validate num_planes for debug messages
    
    commit 7fe9f01c04c2673bd6662c35b664f0f91888b96f upstream.
    
    The num_planes field in struct v4l2_pix_format_mplane is used in a loop
    before validating it. As the use is printing a debug message in this case,
    just cap the value to the maximum allowed.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: <stable@vger.kernel.org>      # for v4.12 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2c7b2452876f40491e950f99f00c7ff6a9f83a1
Author: Jonathan Hunter <jonathanh@nvidia.com>
Date:   Tue Nov 13 08:56:31 2018 +0000

    mfd: tps6586x: Handle interrupts on suspend
    
    commit ac4ca4b9f4623ba5e1ea7a582f286567c611e027 upstream.
    
    The tps6586x driver creates an irqchip that is used by its various child
    devices for managing interrupts. The tps6586x-rtc device is one of its
    children that uses the tps6586x irqchip. When using the tps6586x-rtc as
    a wake-up device from suspend, the following is seen:
    
     PM: Syncing filesystems ... done.
     Freezing user space processes ... (elapsed 0.001 seconds) done.
     OOM killer disabled.
     Freezing remaining freezable tasks ... (elapsed 0.000 seconds) done.
     Disabling non-boot CPUs ...
     Entering suspend state LP1
     Enabling non-boot CPUs ...
     CPU1 is up
     tps6586x 3-0034: failed to read interrupt status
     tps6586x 3-0034: failed to read interrupt status
    
    The reason why the tps6586x interrupt status cannot be read is because
    the tps6586x interrupt is not masked during suspend and when the
    tps6586x-rtc interrupt occurs, to wake-up the device, the interrupt is
    seen before the i2c controller has been resumed in order to read the
    tps6586x interrupt status.
    
    The tps6586x-rtc driver sets it's interrupt as a wake-up source during
    suspend, which gets propagated to the parent tps6586x interrupt.
    However, the tps6586x-rtc driver cannot disable it's interrupt during
    suspend otherwise we would never be woken up and so the tps6586x must
    disable it's interrupt instead.
    
    Prevent the tps6586x interrupt handler from executing on exiting suspend
    before the i2c controller has been resumed by disabling the tps6586x
    interrupt on entering suspend and re-enabling it on resuming from
    suspend.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3deeef642b3afdec5cdcf995657395075297fbfe
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Sun Jan 13 10:44:50 2019 +0100

    OF: properties: add missing of_node_put
    
    commit 28b170e88bc0c7509e6724717c15cb4b5686026e upstream.
    
    Add an of_node_put when the result of of_graph_get_remote_port_parent is
    not available.
    
    The semantic match that finds this problem is as follows
    (http://coccinelle.lip6.fr):
    
    // <smpl>
    @r exists@
    local idexpression e;
    expression x;
    @@
    e = of_graph_get_remote_port_parent(...);
    ... when != x = e
        when != true e == NULL
        when != of_node_put(e)
        when != of_fwnode_handle(e)
    (
    return e;
    |
    *return ...;
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9b4560b41bf883100806c6d37440d28750461b9
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Sun Jan 13 09:47:43 2019 +0100

    drm/rockchip: add missing of_node_put
    
    commit a17ce9960b3628b9f546c454741a1cad551d5695 upstream.
    
    The device node iterators perform an of_node_get on each iteration, so a
    jump out of the loop requires an of_node_put.
    
    The semantic patch that fixes this problem is as follows
    (http://coccinelle.lip6.fr):
    
    // <smpl>
    @@
    expression root,e;
    local idexpression child;
    iterator name for_each_child_of_node;
    @@
    
     for_each_child_of_node(root, child) {
       ... when != of_node_put(child)
           when != e = child
    +  of_node_put(child);
    ?  break;
       ...
    }
    ... when != child
    // </smpl>
    
    Fixes: 1f0f01515172 ("drm/rockchip: Add support for Rockchip Soc RGB output interface")
    Cc: stable@vger.kernel.org
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    [added fixes and cc-stable]
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/1547369264-24831-4-git-send-email-Julia.Lawall@lip6.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99d64199514b28097a1e4a0170197864d421ea37
Author: Zhenyu Wang <zhenyuw@linux.intel.com>
Date:   Fri Jan 11 13:58:53 2019 +0800

    drm/i915/gvt: Fix mmap range check
    
    commit 51b00d8509dc69c98740da2ad07308b630d3eb7d upstream.
    
    This is to fix missed mmap range check on vGPU bar2 region
    and only allow to map vGPU allocated GMADDR range, which means
    user space should support sparse mmap to get proper offset for
    mmap vGPU aperture. And this takes care of actual pgoff in mmap
    request as original code always does from beginning of vGPU
    aperture.
    
    Fixes: 659643f7d814 ("drm/i915/gvt/kvmgt: add vfio/mdev support to KVMGT")
    Cc: "Monroy, Rodrigo Axel" <rodrigo.axel.monroy@intel.com>
    Cc: "Orrala Contreras, Alfredo" <alfredo.orrala.contreras@intel.com>
    Cc: stable@vger.kernel.org # v4.10+
    Reviewed-by: Hang Yuan <hang.yuan@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcbbfa23eb998f84e1850fcda5fec5bdc05e0a6d
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Sat Jan 12 20:37:28 2019 +0100

    MIPS: OCTEON: fix kexec support
    
    commit 8a644c64a9f1aefb99fdc4413e6b7fee17809e38 upstream.
    
    Commit 62cac480f33f ("MIPS: kexec: Make a framework for both jumping and
    halting on nonboot CPUs") broke the build of the OCTEON platform as
    the relocated_kexec_smp_wait() is now static and not longer exported in
    kexec.h.
    
    Replace it by kexec_reboot() like it has been done in other places.
    
    Fixes: 62cac480f33f ("MIPS: kexec: Make a framework for both jumping and halting on nonboot CPUs")
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Cc: Dengcheng Zhu <dzhu@wavecomp.com>
    Cc: ralf@linux-mips.org
    Cc: stable@vger.kernel.org # 4.20+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6071e4c6c3a1c4264f38a7e196ac3a97427d69c3
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Sun Jan 6 19:44:11 2019 +0100

    MIPS: lantiq: Fix IPI interrupt handling
    
    commit 2b4dba55b04b212a7fd1f0395b41d79ee3a9801b upstream.
    
    This makes SMP on the vrx200 work again, by removing all the MIPS CPU
    interrupt specific code and making it fully use the generic MIPS CPU
    interrupt controller.
    
    The mti,cpu-interrupt-controller from irq-mips-cpu.c now handles the CPU
    interrupts and also the IPI interrupts which are used to communication
    between the CPUs in a SMP system. The generic interrupt code was
    already used before but the interrupt vectors were overwritten again
    when we called set_vi_handler() in the lantiq interrupt driver and we
    also provided our own plat_irq_dispatch() function which overwrote the
    weak generic implementation. Now the code uses the generic handler for
    the MIPS CPU interrupts including the IPI interrupts and registers a
    handler for the CPU interrupts which are handled by the lantiq ICU with
    irq_set_chained_handler() which was already called before.
    
    Calling the set_c0_status() function is also not needed any more because
    the generic MIPS CPU interrupt already activates the needed bits.
    
    Fixes: 1eed40043579 ("MIPS: smp-mt: Use CPU interrupt controller IPI IRQ domain support")
    Cc: stable@kernel.org # v4.12
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: jhogan@kernel.org
    Cc: ralf@linux-mips.org
    Cc: john@phrozen.org
    Cc: linux-mips@linux-mips.org
    Cc: linux-mips@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23b14e747ee0029e755623bff00c4f892af687cc
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Thu Jan 3 08:34:17 2019 +0100

    MIPS: BCM47XX: Setup struct device for the SoC
    
    commit 321c46b91550adc03054125fa7a1639390608e1a upstream.
    
    So far we never had any device registered for the SoC. This resulted in
    some small issues that we kept ignoring like:
    1) Not working GPIOLIB_IRQCHIP (gpiochip_irqchip_add_key() failing)
    2) Lack of proper tree in the /sys/devices/
    3) mips_dma_alloc_coherent() silently handling empty coherent_dma_mask
    
    Kernel 4.19 came with a lot of DMA changes and caused a regression on
    bcm47xx. Starting with the commit f8c55dc6e828 ("MIPS: use generic dma
    noncoherent ops for simple noncoherent platforms") DMA coherent
    allocations just fail. Example:
    [    1.114914] bgmac_bcma bcma0:2: Allocation of TX ring 0x200 failed
    [    1.121215] bgmac_bcma bcma0:2: Unable to alloc memory for DMA
    [    1.127626] bgmac_bcma: probe of bcma0:2 failed with error -12
    [    1.133838] bgmac_bcma: Broadcom 47xx GBit MAC driver loaded
    
    The bgmac driver also triggers a WARNING:
    [    0.959486] ------------[ cut here ]------------
    [    0.964387] WARNING: CPU: 0 PID: 1 at ./include/linux/dma-mapping.h:516 bgmac_enet_probe+0x1b4/0x5c4
    [    0.973751] Modules linked in:
    [    0.976913] CPU: 0 PID: 1 Comm: swapper Not tainted 4.19.9 #0
    [    0.982750] Stack : 804a0000 804597c4 00000000 00000000 80458fd8 8381bc2c 838282d4 80481a47
    [    0.991367]         8042e3ec 00000001 804d38f0 00000204 83980000 00000065 8381bbe0 6f55b24f
    [    0.999975]         00000000 00000000 80520000 00002018 00000000 00000075 00000007 00000000
    [    1.008583]         00000000 80480000 000ee811 00000000 00000000 00000000 80432c00 80248db8
    [    1.017196]         00000009 00000204 83980000 803ad7b0 00000000 801feeec 00000000 804d0000
    [    1.025804]         ...
    [    1.028325] Call Trace:
    [    1.030875] [<8000aef8>] show_stack+0x58/0x100
    [    1.035513] [<8001f8b4>] __warn+0xe4/0x118
    [    1.039708] [<8001f9a4>] warn_slowpath_null+0x48/0x64
    [    1.044935] [<80248db8>] bgmac_enet_probe+0x1b4/0x5c4
    [    1.050101] [<802498e0>] bgmac_probe+0x558/0x590
    [    1.054906] [<80252fd0>] bcma_device_probe+0x38/0x70
    [    1.060017] [<8020e1e8>] really_probe+0x170/0x2e8
    [    1.064891] [<8020e714>] __driver_attach+0xa4/0xec
    [    1.069784] [<8020c1e0>] bus_for_each_dev+0x58/0xb0
    [    1.074833] [<8020d590>] bus_add_driver+0xf8/0x218
    [    1.079731] [<8020ef24>] driver_register+0xcc/0x11c
    [    1.084804] [<804b54cc>] bgmac_init+0x1c/0x44
    [    1.089258] [<8000121c>] do_one_initcall+0x7c/0x1a0
    [    1.094343] [<804a1d34>] kernel_init_freeable+0x150/0x218
    [    1.099886] [<803a082c>] kernel_init+0x10/0x104
    [    1.104583] [<80005878>] ret_from_kernel_thread+0x14/0x1c
    [    1.110107] ---[ end trace f441c0d873d1fb5b ]---
    
    This patch setups a "struct device" (and passes it to the bcma) which
    allows fixing all the mentioned problems. It'll also require a tiny bcma
    patch which will follow through the wireless tree & its maintainer.
    
    Fixes: f8c55dc6e828 ("MIPS: use generic dma noncoherent ops for simple noncoherent platforms")
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Acked-by: Hauke Mehrtens <hauke@hauke-m.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: linux-wireless@vger.kernel.org
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dc84a4b44e7e5117a8a2fe43bd5a76b802cbee7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jan 10 17:24:31 2019 +0100

    mips: fix n32 compat_ipc_parse_version
    
    commit 5a9372f751b5350e0ce3d2ee91832f1feae2c2e5 upstream.
    
    While reading through the sysvipc implementation, I noticed that the n32
    semctl/shmctl/msgctl system calls behave differently based on whether
    o32 support is enabled or not: Without o32, the IPC_64 flag passed by
    user space is rejected but calls without that flag get IPC_64 behavior.
    
    As far as I can tell, this was inadvertently changed by a cleanup patch
    but never noticed by anyone, possibly nobody has tried using sysvipc
    on n32 after linux-3.19.
    
    Change it back to the old behavior now.
    
    Fixes: 78aaf956ba3a ("MIPS: Compat: Fix build error if CONFIG_MIPS32_COMPAT but no compat ABI.")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Cc: stable@vger.kernel.org # 3.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de970bee0d1540eeedada97007cafef5e6ab196f
Author: Wei Wang <wei.w.wang@intel.com>
Date:   Mon Jan 7 15:01:04 2019 +0800

    virtio-balloon: tweak config_changed implementation
    
    commit bf4dc0b2beebfd9338df7c0bcf473b356f67cf66 upstream.
    
    virtio-ccw has deadlock issues with reading the config space inside the
    interrupt context, so we tweak the virtballoon_changed implementation
    by moving the config read operations into the related workqueue contexts.
    The config_read_bitmap is used as a flag to the workqueue callbacks
    about the related config fields that need to be read.
    
    The cmd_id_received is also renamed to cmd_id_received_cache, and
    the value should be obtained via virtio_balloon_cmd_id_received.
    
    Reported-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Wei Wang <wei.w.wang@intel.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 86a559787e6f ("virtio-balloon: VIRTIO_BALLOON_F_FREE_PAGE_HINT")
    Tested-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1210dfc9dceee4c764f89167389da7a7b2c291de
Author: Wei Wang <wei.w.wang@intel.com>
Date:   Fri Dec 28 10:26:26 2018 +0800

    virtio: don't allocate vqs when names[i] = NULL
    
    commit a229989d975eb926076307c1f2f5e4c6111768e7 upstream.
    
    Some vqs may not need to be allocated when their related feature bits
    are disabled. So callers may pass in such vqs with "names = NULL".
    Then we skip such vq allocations.
    
    Signed-off-by: Wei Wang <wei.w.wang@intel.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Wei Wang <wei.w.wang@intel.com>
    Signed-off-by: Wei Wang <wei.w.wang@intel.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 86a559787e6f ("virtio-balloon: VIRTIO_BALLOON_F_FREE_PAGE_HINT")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 871858ab00355ddc02dd930804d02b2927f43288
Author: Ivan Mironov <mironov.ivan@gmail.com>
Date:   Sun Dec 23 12:41:58 2018 +0500

    scsi: sd: Fix cache_type_store()
    
    commit 44759979a49bfd2d20d789add7fa81a21eb1a4ab upstream.
    
    Changing of caching mode via /sys/devices/.../scsi_disk/.../cache_type may
    fail if device responds to MODE SENSE command with DPOFUA flag set, and
    then checks this flag to be not set on MODE SELECT command.
    
    In this scenario, when trying to change cache_type, write always fails:
    
            # echo "none" >cache_type
            bash: echo: write error: Invalid argument
    
    And following appears in dmesg:
    
            [13007.865745] sd 1:0:1:0: [sda] Sense Key : Illegal Request [current]
            [13007.865753] sd 1:0:1:0: [sda] Add. Sense: Invalid field in parameter list
    
    From SBC-4 r15, 6.5.1 "Mode pages overview", description of DEVICE-SPECIFIC
    PARAMETER field in the mode parameter header:
            ...
            The write protect (WP) bit for mode data sent with a MODE SELECT
            command shall be ignored by the device server.
            ...
            The DPOFUA bit is reserved for mode data sent with a MODE SELECT
            command.
            ...
    
    The remaining bits in the DEVICE-SPECIFIC PARAMETER byte are also reserved
    and shall be set to zero.
    
    [mkp: shuffled commentary to commit description]
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee16d72948516c08087ea12a151e150ea4324edb
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Jan 3 22:08:05 2019 +0800

    scsi: core: Synchronize request queue PM status only on successful resume
    
    commit 3f7e62bba0003f9c68f599f5997c4647ef5b4f4e upstream.
    
    The commit 356fd2663cff ("scsi: Set request queue runtime PM status back to
    active on resume") fixed up the inconsistent RPM status between request
    queue and device. However changing request queue RPM status shall be done
    only on successful resume, otherwise status may be still inconsistent as
    below,
    
    Request queue: RPM_ACTIVE
    Device: RPM_SUSPENDED
    
    This ends up soft lockup because requests can be submitted to underlying
    devices but those devices and their required resource are not resumed.
    
    For example,
    
    After above inconsistent status happens, IO request can be submitted to UFS
    device driver but required resource (like clock) is not resumed yet thus
    lead to warning as below call stack,
    
    WARN_ON(hba->clk_gating.state != CLKS_ON);
    ufshcd_queuecommand
    scsi_dispatch_cmd
    scsi_request_fn
    __blk_run_queue
    cfq_insert_request
    __elv_add_request
    blk_flush_plug_list
    blk_finish_plug
    jbd2_journal_commit_transaction
    kjournald2
    
    We may see all behind IO requests hang because of no response from storage
    host or device and then soft lockup happens in system. In the end, system
    may crash in many ways.
    
    Fixes: 356fd2663cff (scsi: Set request queue runtime PM status back to active on resume)
    Cc: stable@vger.kernel.org
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a49be9dcb1ec051d86158e2823a3ddef49992d24
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Jan 16 10:31:09 2019 -0800

    Yama: Check for pid death before checking ancestry
    
    commit 9474f4e7cd71a633fa1ef93b7daefd44bbdfd482 upstream.
    
    It's possible that a pid has died before we take the rcu lock, in which
    case we can't walk the ancestry list as it may be detached. Instead, check
    for death first before doing the walk.
    
    Reported-by: syzbot+a9ac39bf55329e206219@syzkaller.appspotmail.com
    Fixes: 2d514487faf1 ("security: Yama LSM")
    Cc: stable@vger.kernel.org
    Suggested-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51f39f27a15c6dba78f094fbcaf258a826e7750d
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Nov 21 14:05:45 2018 -0500

    btrfs: wait on ordered extents on abort cleanup
    
    commit 74d5d229b1bf60f93bff244b2dfc0eb21ec32a07 upstream.
    
    If we flip read-only before we initiate writeback on all dirty pages for
    ordered extents we've created then we'll have ordered extents left over
    on umount, which results in all sorts of bad things happening.  Fix this
    by making sure we wait on ordered extents if we have to do the aborted
    transaction cleanup stuff.
    
    generic/475 can produce this warning:
    
     [ 8531.177332] WARNING: CPU: 2 PID: 11997 at fs/btrfs/disk-io.c:3856 btrfs_free_fs_root+0x95/0xa0 [btrfs]
     [ 8531.183282] CPU: 2 PID: 11997 Comm: umount Tainted: G        W 5.0.0-rc1-default+ #394
     [ 8531.185164] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),BIOS rel-1.11.2-0-gf9626cc-prebuilt.qemu-project.org 04/01/2014
     [ 8531.187851] RIP: 0010:btrfs_free_fs_root+0x95/0xa0 [btrfs]
     [ 8531.193082] RSP: 0018:ffffb1ab86163d98 EFLAGS: 00010286
     [ 8531.194198] RAX: ffff9f3449494d18 RBX: ffff9f34a2695000 RCX:0000000000000000
     [ 8531.195629] RDX: 0000000000000002 RSI: 0000000000000001 RDI:0000000000000000
     [ 8531.197315] RBP: ffff9f344e930000 R08: 0000000000000001 R09:0000000000000000
     [ 8531.199095] R10: 0000000000000000 R11: ffff9f34494d4ff8 R12:ffffb1ab86163dc0
     [ 8531.200870] R13: ffff9f344e9300b0 R14: ffffb1ab86163db8 R15:0000000000000000
     [ 8531.202707] FS:  00007fc68e949fc0(0000) GS:ffff9f34bd800000(0000)knlGS:0000000000000000
     [ 8531.204851] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [ 8531.205942] CR2: 00007ffde8114dd8 CR3: 000000002dfbd000 CR4:00000000000006e0
     [ 8531.207516] Call Trace:
     [ 8531.208175]  btrfs_free_fs_roots+0xdb/0x170 [btrfs]
     [ 8531.210209]  ? wait_for_completion+0x5b/0x190
     [ 8531.211303]  close_ctree+0x157/0x350 [btrfs]
     [ 8531.212412]  generic_shutdown_super+0x64/0x100
     [ 8531.213485]  kill_anon_super+0x14/0x30
     [ 8531.214430]  btrfs_kill_super+0x12/0xa0 [btrfs]
     [ 8531.215539]  deactivate_locked_super+0x29/0x60
     [ 8531.216633]  cleanup_mnt+0x3b/0x70
     [ 8531.217497]  task_work_run+0x98/0xc0
     [ 8531.218397]  exit_to_usermode_loop+0x83/0x90
     [ 8531.219324]  do_syscall_64+0x15b/0x180
     [ 8531.220192]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
     [ 8531.221286] RIP: 0033:0x7fc68e5e4d07
     [ 8531.225621] RSP: 002b:00007ffde8116608 EFLAGS: 00000246 ORIG_RAX:00000000000000a6
     [ 8531.227512] RAX: 0000000000000000 RBX: 00005580c2175970 RCX:00007fc68e5e4d07
     [ 8531.229098] RDX: 0000000000000001 RSI: 0000000000000000 RDI:00005580c2175b80
     [ 8531.230730] RBP: 0000000000000000 R08: 00005580c2175ba0 R09:00007ffde8114e80
     [ 8531.232269] R10: 0000000000000000 R11: 0000000000000246 R12:00005580c2175b80
     [ 8531.233839] R13: 00007fc68eac61c4 R14: 00005580c2175a68 R15:0000000000000000
    
    Leaving a tree in the rb-tree:
    
    3853 void btrfs_free_fs_root(struct btrfs_root *root)
    3854 {
    3855         iput(root->ino_cache_inode);
    3856         WARN_ON(!RB_EMPTY_ROOT(&root->inode_tree));
    
    CC: stable@vger.kernel.org
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    [ add stacktrace ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 480c6fb23eb80e88eba7e4603304710ee7a9416f
Author: David Sterba <dsterba@suse.com>
Date:   Wed Jan 9 15:02:23 2019 +0100

    Revert "btrfs: balance dirty metadata pages in btrfs_finish_ordered_io"
    
    commit 77b7aad195099e7c6da11e94b7fa6ef5e6fb0025 upstream.
    
    This reverts commit e73e81b6d0114d4a303205a952ab2e87c44bd279.
    
    This patch causes a few problems:
    
    - adds latency to btrfs_finish_ordered_io
    - as btrfs_finish_ordered_io is used for free space cache, generating
      more work from btrfs_btree_balance_dirty_nodelay could end up in the
      same workque, effectively deadlocking
    
    12260 kworker/u96:16+btrfs-freespace-write D
    [<0>] balance_dirty_pages+0x6e6/0x7ad
    [<0>] balance_dirty_pages_ratelimited+0x6bb/0xa90
    [<0>] btrfs_finish_ordered_io+0x3da/0x770
    [<0>] normal_work_helper+0x1c5/0x5a0
    [<0>] process_one_work+0x1ee/0x5a0
    [<0>] worker_thread+0x46/0x3d0
    [<0>] kthread+0xf5/0x130
    [<0>] ret_from_fork+0x24/0x30
    [<0>] 0xffffffffffffffff
    
    Transaction commit will wait on the freespace cache:
    
    838 btrfs-transacti D
    [<0>] btrfs_start_ordered_extent+0x154/0x1e0
    [<0>] btrfs_wait_ordered_range+0xbd/0x110
    [<0>] __btrfs_wait_cache_io+0x49/0x1a0
    [<0>] btrfs_write_dirty_block_groups+0x10b/0x3b0
    [<0>] commit_cowonly_roots+0x215/0x2b0
    [<0>] btrfs_commit_transaction+0x37e/0x910
    [<0>] transaction_kthread+0x14d/0x180
    [<0>] kthread+0xf5/0x130
    [<0>] ret_from_fork+0x24/0x30
    [<0>] 0xffffffffffffffff
    
    And then writepages ends up waiting on transaction commit:
    
    9520 kworker/u96:13+flush-btrfs-1 D
    [<0>] wait_current_trans+0xac/0xe0
    [<0>] start_transaction+0x21b/0x4b0
    [<0>] cow_file_range_inline+0x10b/0x6b0
    [<0>] cow_file_range.isra.69+0x329/0x4a0
    [<0>] run_delalloc_range+0x105/0x3c0
    [<0>] writepage_delalloc+0x119/0x180
    [<0>] __extent_writepage+0x10c/0x390
    [<0>] extent_write_cache_pages+0x26f/0x3d0
    [<0>] extent_writepages+0x4f/0x80
    [<0>] do_writepages+0x17/0x60
    [<0>] __writeback_single_inode+0x59/0x690
    [<0>] writeback_sb_inodes+0x291/0x4e0
    [<0>] __writeback_inodes_wb+0x87/0xb0
    [<0>] wb_writeback+0x3bb/0x500
    [<0>] wb_workfn+0x40d/0x610
    [<0>] process_one_work+0x1ee/0x5a0
    [<0>] worker_thread+0x1e0/0x3d0
    [<0>] kthread+0xf5/0x130
    [<0>] ret_from_fork+0x24/0x30
    [<0>] 0xffffffffffffffff
    
    Eventually, we have every process in the system waiting on
    balance_dirty_pages(), and nobody is able to make progress on page
    writeback.
    
    The original patch tried to fix an OOM condition, that happened on 4.4 but no
    success reproducing that on later kernels (4.19 and 4.20). This is more likely
    a problem in OOM itself.
    
    Link: https://lore.kernel.org/linux-btrfs/20180528054821.9092-1-ethanlien@synology.com/
    Reported-by: Chris Mason <clm@fb.com>
    CC: stable@vger.kernel.org # 4.18+
    CC: ethanlien <ethanlien@synology.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d14816d532913ddaaadb6541ebd45f614635fe68
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Jan 14 13:44:13 2019 +0100

    xen: Fix x86 sched_clock() interface for xen
    
    commit 867cefb4cb1012f42cada1c7d1f35ac8dd276071 upstream.
    
    Commit f94c8d11699759 ("sched/clock, x86/tsc: Rework the x86 'unstable'
    sched_clock() interface") broke Xen guest time handling across
    migration:
    
    [  187.249951] Freezing user space processes ... (elapsed 0.001 seconds) done.
    [  187.251137] OOM killer disabled.
    [  187.251137] Freezing remaining freezable tasks ... (elapsed 0.001 seconds) done.
    [  187.252299] suspending xenstore...
    [  187.266987] xen:grant_table: Grant tables using version 1 layout
    [18446743811.706476] OOM killer enabled.
    [18446743811.706478] Restarting tasks ... done.
    [18446743811.720505] Setting capacity to 16777216
    
    Fix that by setting xen_sched_clock_offset at resume time to ensure a
    monotonic clock value.
    
    [boris: replaced pr_info() with pr_info_once() in xen_callback_vector()
     to avoid printing with incorrect timestamp during resume (as we
     haven't re-adjusted the clock yet)]
    
    Fixes: f94c8d11699759 ("sched/clock, x86/tsc: Rework the x86 'unstable' sched_clock() interface")
    Cc: <stable@vger.kernel.org> # 4.11
    Reported-by: Hans van Kranenburg <hans.van.kranenburg@mendix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Hans van Kranenburg <hans.van.kranenburg@mendix.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7984d46174373ad00613a79de9f871b0e3c5256
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Jan 8 06:56:48 2019 +0000

    crypto: talitos - fix ablkcipher for CONFIG_VMAP_STACK
    
    commit 1bea445b0a022ee126ca328b3705cd4df18ebc14 upstream.
    
    [    2.364486] WARNING: CPU: 0 PID: 60 at ./arch/powerpc/include/asm/io.h:837 dma_nommu_map_page+0x44/0xd4
    [    2.373579] CPU: 0 PID: 60 Comm: cryptomgr_test Tainted: G        W         4.20.0-rc5-00560-g6bfb52e23a00-dirty #531
    [    2.384740] NIP:  c000c540 LR: c000c584 CTR: 00000000
    [    2.389743] REGS: c95abab0 TRAP: 0700   Tainted: G        W          (4.20.0-rc5-00560-g6bfb52e23a00-dirty)
    [    2.400042] MSR:  00029032 <EE,ME,IR,DR,RI>  CR: 24042204  XER: 00000000
    [    2.406669]
    [    2.406669] GPR00: c02f2244 c95abb60 c6262990 c95abd80 0000256a 00000001 00000001 00000001
    [    2.406669] GPR08: 00000000 00002000 00000010 00000010 24042202 00000000 00000100 c95abd88
    [    2.406669] GPR16: 00000000 c05569d4 00000001 00000010 c95abc88 c0615664 00000004 00000000
    [    2.406669] GPR24: 00000010 c95abc88 c95abc88 00000000 c61ae210 c7ff6d40 c61ae210 00003d68
    [    2.441559] NIP [c000c540] dma_nommu_map_page+0x44/0xd4
    [    2.446720] LR [c000c584] dma_nommu_map_page+0x88/0xd4
    [    2.451762] Call Trace:
    [    2.454195] [c95abb60] [82000808] 0x82000808 (unreliable)
    [    2.459572] [c95abb80] [c02f2244] talitos_edesc_alloc+0xbc/0x3c8
    [    2.465493] [c95abbb0] [c02f2600] ablkcipher_edesc_alloc+0x4c/0x5c
    [    2.471606] [c95abbd0] [c02f4ed0] ablkcipher_encrypt+0x20/0x64
    [    2.477389] [c95abbe0] [c02023b0] __test_skcipher+0x4bc/0xa08
    [    2.483049] [c95abe00] [c0204b60] test_skcipher+0x2c/0xcc
    [    2.488385] [c95abe20] [c0204c48] alg_test_skcipher+0x48/0xbc
    [    2.494064] [c95abe40] [c0205cec] alg_test+0x164/0x2e8
    [    2.499142] [c95abf00] [c0200dec] cryptomgr_test+0x48/0x50
    [    2.504558] [c95abf10] [c0039ff4] kthread+0xe4/0x110
    [    2.509471] [c95abf40] [c000e1d0] ret_from_kernel_thread+0x14/0x1c
    [    2.515532] Instruction dump:
    [    2.518468] 7c7e1b78 7c9d2378 7cbf2b78 41820054 3d20c076 8089c200 3d20c076 7c84e850
    [    2.526127] 8129c204 7c842e70 7f844840 419c0008 <0fe00000> 2f9e0000 54847022 7c84fa14
    [    2.533960] ---[ end trace bf78d94af73fe3b8 ]---
    [    2.539123] talitos ff020000.crypto: master data transfer error
    [    2.544775] talitos ff020000.crypto: TEA error: ISR 0x20000000_00000040
    [    2.551625] alg: skcipher: encryption failed on test 1 for ecb-aes-talitos: ret=22
    
    IV cannot be on stack when CONFIG_VMAP_STACK is selected because the stack
    cannot be DMA mapped anymore.
    
    This patch copies the IV into the extended descriptor.
    
    Fixes: 4de9d0b547b9 ("crypto: talitos - Add ablkcipher algorithms")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Reviewed-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cef4dddc508dbb74cc12d217a00441e0cd68cda
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue Jan 8 06:56:46 2019 +0000

    crypto: talitos - reorder code in talitos_edesc_alloc()
    
    commit c56c2e173773097a248fd3bace91ac8f6fc5386d upstream.
    
    This patch moves the mapping of IV after the kmalloc(). This
    avoids having to unmap in case kmalloc() fails.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Reviewed-by: Horia Geantă <horia.geanta@nxp.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80733239c7ae1f9d941f18577c223d96d33c8336
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Dec 16 23:23:22 2018 -0800

    crypto: authenc - fix parsing key with misaligned rta_len
    
    commit 8f9c469348487844328e162db57112f7d347c49f upstream.
    
    Keys for "authenc" AEADs are formatted as an rtattr containing a 4-byte
    'enckeylen', followed by an authentication key and an encryption key.
    crypto_authenc_extractkeys() parses the key to find the inner keys.
    
    However, it fails to consider the case where the rtattr's payload is
    longer than 4 bytes but not 4-byte aligned, and where the key ends
    before the next 4-byte aligned boundary.  In this case, 'keylen -=
    RTA_ALIGN(rta->rta_len);' underflows to a value near UINT_MAX.  This
    causes a buffer overread and crash during crypto_ahash_setkey().
    
    Fix it by restricting the rtattr payload to the expected size.
    
    Reproducer using AF_ALG:
    
            #include <linux/if_alg.h>
            #include <linux/rtnetlink.h>
            #include <sys/socket.h>
    
            int main()
            {
                    int fd;
                    struct sockaddr_alg addr = {
                            .salg_type = "aead",
                            .salg_name = "authenc(hmac(sha256),cbc(aes))",
                    };
                    struct {
                            struct rtattr attr;
                            __be32 enckeylen;
                            char keys[1];
                    } __attribute__((packed)) key = {
                            .attr.rta_len = sizeof(key),
                            .attr.rta_type = 1 /* CRYPTO_AUTHENC_KEYA_PARAM */,
                    };
    
                    fd = socket(AF_ALG, SOCK_SEQPACKET, 0);
                    bind(fd, (void *)&addr, sizeof(addr));
                    setsockopt(fd, SOL_ALG, ALG_SET_KEY, &key, sizeof(key));
            }
    
    It caused:
    
            BUG: unable to handle kernel paging request at ffff88007ffdc000
            PGD 2e01067 P4D 2e01067 PUD 2e04067 PMD 2e05067 PTE 0
            Oops: 0000 [#1] SMP
            CPU: 0 PID: 883 Comm: authenc Not tainted 4.20.0-rc1-00108-g00c9fe37a7f27 #13
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-20181126_142135-anatol 04/01/2014
            RIP: 0010:sha256_ni_transform+0xb3/0x330 arch/x86/crypto/sha256_ni_asm.S:155
            [...]
            Call Trace:
             sha256_ni_finup+0x10/0x20 arch/x86/crypto/sha256_ssse3_glue.c:321
             crypto_shash_finup+0x1a/0x30 crypto/shash.c:178
             shash_digest_unaligned+0x45/0x60 crypto/shash.c:186
             crypto_shash_digest+0x24/0x40 crypto/shash.c:202
             hmac_setkey+0x135/0x1e0 crypto/hmac.c:66
             crypto_shash_setkey+0x2b/0xb0 crypto/shash.c:66
             shash_async_setkey+0x10/0x20 crypto/shash.c:223
             crypto_ahash_setkey+0x2d/0xa0 crypto/ahash.c:202
             crypto_authenc_setkey+0x68/0x100 crypto/authenc.c:96
             crypto_aead_setkey+0x2a/0xc0 crypto/aead.c:62
             aead_setkey+0xc/0x10 crypto/algif_aead.c:526
             alg_setkey crypto/af_alg.c:223 [inline]
             alg_setsockopt+0xfe/0x130 crypto/af_alg.c:256
             __sys_setsockopt+0x6d/0xd0 net/socket.c:1902
             __do_sys_setsockopt net/socket.c:1913 [inline]
             __se_sys_setsockopt net/socket.c:1910 [inline]
             __x64_sys_setsockopt+0x1f/0x30 net/socket.c:1910
             do_syscall_64+0x4a/0x180 arch/x86/entry/common.c:290
             entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: e236d4a89a2f ("[CRYPTO] authenc: Move enckeylen into key itself")
    Cc: <stable@vger.kernel.org> # v2.6.25+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87e721e6061e301f839516cf8be6449a60320227
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Dec 16 23:23:23 2018 -0800

    crypto: bcm - convert to use crypto_authenc_extractkeys()
    
    commit ab57b33525c3221afaebd391458fa0cbcd56903d upstream.
    
    Convert the bcm crypto driver to use crypto_authenc_extractkeys() so
    that it picks up the fix for broken validation of rtattr::rta_len.
    
    This also fixes the DES weak key check to actually be done on the right
    key. (It was checking the authentication key, not the encryption key...)
    
    Fixes: 9d12ba86f818 ("crypto: brcm - Add Broadcom SPU driver")
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 478aefeccba3e908d79bf0d23aad81bbfcde340a
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Dec 16 23:23:24 2018 -0800

    crypto: ccree - convert to use crypto_authenc_extractkeys()
    
    commit dc95b5350a8f07d73d6bde3a79ef87289698451d upstream.
    
    Convert the ccree crypto driver to use crypto_authenc_extractkeys() so
    that it picks up the fix for broken validation of rtattr::rta_len.
    
    Fixes: ff27e85a85bb ("crypto: ccree - add AEAD support")
    Cc: <stable@vger.kernel.org> # v4.17+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac8d9ed2f7ebecb27b9475f384c23690ed7c64a5
Author: Harsh Jain <harsh@chelsio.com>
Date:   Thu Jan 3 14:21:05 2019 +0530

    crypto: authencesn - Avoid twice completion call in decrypt path
    
    commit a7773363624b034ab198c738661253d20a8055c2 upstream.
    
    Authencesn template in decrypt path unconditionally calls aead_request_complete
    after ahash_verify which leads to following kernel panic in after decryption.
    
    [  338.539800] BUG: unable to handle kernel NULL pointer dereference at 0000000000000004
    [  338.548372] PGD 0 P4D 0
    [  338.551157] Oops: 0000 [#1] SMP PTI
    [  338.554919] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Tainted: G        W I       4.19.7+ #13
    [  338.564431] Hardware name: Supermicro X8ST3/X8ST3, BIOS 2.0        07/29/10
    [  338.572212] RIP: 0010:esp_input_done2+0x350/0x410 [esp4]
    [  338.578030] Code: ff 0f b6 68 10 48 8b 83 c8 00 00 00 e9 8e fe ff ff 8b 04 25 04 00 00 00 83 e8 01 48 98 48 8b 3c c5 10 00 00 00 e9 f7 fd ff ff <8b> 04 25 04 00 00 00 83 e8 01 48 98 4c 8b 24 c5 10 00 00 00 e9 3b
    [  338.598547] RSP: 0018:ffff911c97803c00 EFLAGS: 00010246
    [  338.604268] RAX: 0000000000000002 RBX: ffff911c4469ee00 RCX: 0000000000000000
    [  338.612090] RDX: 0000000000000000 RSI: 0000000000000130 RDI: ffff911b87c20400
    [  338.619874] RBP: 0000000000000000 R08: ffff911b87c20498 R09: 000000000000000a
    [  338.627610] R10: 0000000000000001 R11: 0000000000000004 R12: 0000000000000000
    [  338.635402] R13: ffff911c89590000 R14: ffff911c91730000 R15: 0000000000000000
    [  338.643234] FS:  0000000000000000(0000) GS:ffff911c97800000(0000) knlGS:0000000000000000
    [  338.652047] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  338.658299] CR2: 0000000000000004 CR3: 00000001ec20a000 CR4: 00000000000006f0
    [  338.666382] Call Trace:
    [  338.669051]  <IRQ>
    [  338.671254]  esp_input_done+0x12/0x20 [esp4]
    [  338.675922]  chcr_handle_resp+0x3b5/0x790 [chcr]
    [  338.680949]  cpl_fw6_pld_handler+0x37/0x60 [chcr]
    [  338.686080]  chcr_uld_rx_handler+0x22/0x50 [chcr]
    [  338.691233]  uldrx_handler+0x8c/0xc0 [cxgb4]
    [  338.695923]  process_responses+0x2f0/0x5d0 [cxgb4]
    [  338.701177]  ? bitmap_find_next_zero_area_off+0x3a/0x90
    [  338.706882]  ? matrix_alloc_area.constprop.7+0x60/0x90
    [  338.712517]  ? apic_update_irq_cfg+0x82/0xf0
    [  338.717177]  napi_rx_handler+0x14/0xe0 [cxgb4]
    [  338.722015]  net_rx_action+0x2aa/0x3e0
    [  338.726136]  __do_softirq+0xcb/0x280
    [  338.730054]  irq_exit+0xde/0xf0
    [  338.733504]  do_IRQ+0x54/0xd0
    [  338.736745]  common_interrupt+0xf/0xf
    
    Fixes: 104880a6b470 ("crypto: authencesn - Convert to new AEAD...")
    Signed-off-by: Harsh Jain <harsh@chelsio.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f79bd5b2fb9285d349ca9443ae23b8763b266ef
Author: Aymen Sghaier <aymen.sghaier@nxp.com>
Date:   Wed Dec 19 16:36:44 2018 +0200

    crypto: caam - fix zero-length buffer DMA mapping
    
    commit 04e6d25c5bb244c1a37eb9fe0b604cc11a04e8c5 upstream.
    
    Recent changes - probably DMA API related (generic and/or arm64-specific) -
    exposed a case where driver maps a zero-length buffer:
    ahash_init()->ahash_update()->ahash_final() with a zero-length string to
    hash
    
    kernel BUG at kernel/dma/swiotlb.c:475!
    Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 2 PID: 1823 Comm: cryptomgr_test Not tainted 4.20.0-rc1-00108-g00c9fe37a7f2 #1
    Hardware name: LS1046A RDB Board (DT)
    pstate: 80000005 (Nzcv daif -PAN -UAO)
    pc : swiotlb_tbl_map_single+0x170/0x2b8
    lr : swiotlb_map_page+0x134/0x1f8
    sp : ffff00000f79b8f0
    x29: ffff00000f79b8f0 x28: 0000000000000000
    x27: ffff0000093d0000 x26: 0000000000000000
    x25: 00000000001f3ffe x24: 0000000000200000
    x23: 0000000000000000 x22: 00000009f2c538c0
    x21: ffff800970aeb410 x20: 0000000000000001
    x19: ffff800970aeb410 x18: 0000000000000007
    x17: 000000000000000e x16: 0000000000000001
    x15: 0000000000000019 x14: c32cb8218a167fe8
    x13: ffffffff00000000 x12: ffff80097fdae348
    x11: 0000800976bca000 x10: 0000000000000010
    x9 : 0000000000000000 x8 : ffff0000091fd6c8
    x7 : 0000000000000000 x6 : 00000009f2c538bf
    x5 : 0000000000000000 x4 : 0000000000000001
    x3 : 0000000000000000 x2 : 00000009f2c538c0
    x1 : 00000000f9fff000 x0 : 0000000000000000
    Process cryptomgr_test (pid: 1823, stack limit = 0x(____ptrval____))
    Call trace:
     swiotlb_tbl_map_single+0x170/0x2b8
     swiotlb_map_page+0x134/0x1f8
     ahash_final_no_ctx+0xc4/0x6cc
     ahash_final+0x10/0x18
     crypto_ahash_op+0x30/0x84
     crypto_ahash_final+0x14/0x1c
     __test_hash+0x574/0xe0c
     test_hash+0x28/0x80
     __alg_test_hash+0x84/0xd0
     alg_test_hash+0x78/0x144
     alg_test.part.30+0x12c/0x2b4
     alg_test+0x3c/0x68
     cryptomgr_test+0x44/0x4c
     kthread+0xfc/0x128
     ret_from_fork+0x10/0x18
    Code: d34bfc18 2a1a03f7 1a9f8694 35fff89a (d4210000)
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Aymen Sghaier <aymen.sghaier@nxp.com>
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2661032cca5c6a130aa6773fe10be0b10de30164
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Jan 8 22:12:41 2019 -0800

    crypto: sm3 - fix undefined shift by >= width of value
    
    commit d45a90cb5d061fa7d411b974b950fe0b8bc5f265 upstream.
    
    sm3_compress() calls rol32() with shift >= 32, which causes undefined
    behavior.  This is easily detected by enabling CONFIG_UBSAN.
    
    Explicitly AND with 31 to make the behavior well defined.
    
    Fixes: 4f0fc1600edb ("crypto: sm3 - add OSCCA SM3 secure hash")
    Cc: <stable@vger.kernel.org> # v4.15+
    Cc: Gilad Ben-Yossef <gilad@benyossef.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fa151046fdb214e933e49d20ddd8ec3db914871
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Jan 5 23:45:26 2019 -0800

    smc: move unhash as early as possible in smc_release()
    
    [ Upstream commit 26d92e951fe0a44ee4aec157cabb65a818cc8151 ]
    
    In smc_release() we release smc->clcsock before unhash the smc
    sock, but a parallel smc_diag_dump() may be still reading
    smc->clcsock, therefore this could cause a use-after-free as
    reported by syzbot.
    
    Reported-and-tested-by: syzbot+fbd1e5476e4c94c7b34e@syzkaller.appspotmail.com
    Fixes: 51f1de79ad8e ("net/smc: replace sock_put worker by socket refcounting")
    Cc: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reported-by: syzbot+0bf2e01269f1274b4b03@syzkaller.appspotmail.com
    Reported-by: syzbot+e3132895630f957306bc@syzkaller.appspotmail.com
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b585b0b02b61c93848b70eaf1d084804e0d404c
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sun Jan 6 20:44:00 2019 +0100

    r8169: don't try to read counters if chip is in a PCI power-save state
    
    [ Upstream commit 10262b0b53666cbc506989b17a3ead1e9c3b43b4 ]
    
    Avoid log spam caused by trying to read counters from the chip whilst
    it is in a PCI power-save state.
    
    Reference: https://bugzilla.kernel.org/show_bug.cgi?id=107421
    
    Fixes: 1ef7286e7f36 ("r8169: Dereference MMIO address immediately before use")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89b97ed038671fa9b4c244f8041eb1f7dd96d74f
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Jan 7 16:47:33 2019 -0500

    ip: on queued skb use skb_header_pointer instead of pskb_may_pull
    
    [ Upstream commit 4a06fa67c4da20148803525151845276cdb995c1 ]
    
    Commit 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call
    pskb_may_pull") avoided a read beyond the end of the skb linear
    segment by calling pskb_may_pull.
    
    That function can trigger a BUG_ON in pskb_expand_head if the skb is
    shared, which it is when when peeking. It can also return ENOMEM.
    
    Avoid both by switching to safer skb_header_pointer.
    
    Fixes: 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call pskb_may_pull")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfabcd6b3988731818a87a47b27d779118fd7442
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Jan 8 12:32:42 2019 -0500

    bonding: update nest level on unlink
    
    [ Upstream commit 001e465f09a18857443489a57e74314a3368c805 ]
    
    A network device stack with multiple layers of bonding devices can
    trigger a false positive lockdep warning. Adding lockdep nest levels
    fixes this. Update the level on both enslave and unlink, to avoid the
    following series of events ..
    
        ip netns add test
        ip netns exec test bash
        ip link set dev lo addr 00:11:22:33:44:55
        ip link set dev lo down
    
        ip link add dev bond1 type bond
        ip link add dev bond2 type bond
    
        ip link set dev lo master bond1
        ip link set dev bond1 master bond2
    
        ip link set dev bond1 nomaster
        ip link set dev bond2 master bond1
    
    .. from still generating a splat:
    
        [  193.652127] ======================================================
        [  193.658231] WARNING: possible circular locking dependency detected
        [  193.664350] 4.20.0 #8 Not tainted
        [  193.668310] ------------------------------------------------------
        [  193.674417] ip/15577 is trying to acquire lock:
        [  193.678897] 00000000a40e3b69 (&(&bond->stats_lock)->rlock#3/3){+.+.}, at: bond_get_stats+0x58/0x290
        [  193.687851]
                   but task is already holding lock:
        [  193.693625] 00000000807b9d9f (&(&bond->stats_lock)->rlock#2/2){+.+.}, at: bond_get_stats+0x58/0x290
    
        [..]
    
        [  193.851092]        lock_acquire+0xa7/0x190
        [  193.855138]        _raw_spin_lock_nested+0x2d/0x40
        [  193.859878]        bond_get_stats+0x58/0x290
        [  193.864093]        dev_get_stats+0x5a/0xc0
        [  193.868140]        bond_get_stats+0x105/0x290
        [  193.872444]        dev_get_stats+0x5a/0xc0
        [  193.876493]        rtnl_fill_stats+0x40/0x130
        [  193.880797]        rtnl_fill_ifinfo+0x6c5/0xdc0
        [  193.885271]        rtmsg_ifinfo_build_skb+0x86/0xe0
        [  193.890091]        rtnetlink_event+0x5b/0xa0
        [  193.894320]        raw_notifier_call_chain+0x43/0x60
        [  193.899225]        netdev_change_features+0x50/0xa0
        [  193.904044]        bond_compute_features.isra.46+0x1ab/0x270
        [  193.909640]        bond_enslave+0x141d/0x15b0
        [  193.913946]        do_set_master+0x89/0xa0
        [  193.918016]        do_setlink+0x37c/0xda0
        [  193.921980]        __rtnl_newlink+0x499/0x890
        [  193.926281]        rtnl_newlink+0x48/0x70
        [  193.930238]        rtnetlink_rcv_msg+0x171/0x4b0
        [  193.934801]        netlink_rcv_skb+0xd1/0x110
        [  193.939103]        rtnetlink_rcv+0x15/0x20
        [  193.943151]        netlink_unicast+0x3b5/0x520
        [  193.947544]        netlink_sendmsg+0x2fd/0x3f0
        [  193.951942]        sock_sendmsg+0x38/0x50
        [  193.955899]        ___sys_sendmsg+0x2ba/0x2d0
        [  193.960205]        __x64_sys_sendmsg+0xad/0x100
        [  193.964687]        do_syscall_64+0x5a/0x460
        [  193.968823]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 7e2556e40026 ("bonding: avoid lockdep confusion in bond_get_stats()")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5247215eef0e90a9a051583c9672cc613779f6e2
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Mon Jan 7 21:49:09 2019 +0100

    r8169: load Realtek PHY driver module before r8169
    
    [ Upstream commit 11287b693d03830010356339e4ceddf47dee34fa ]
    
    This soft dependency works around an issue where sometimes the genphy
    driver is used instead of the dedicated PHY driver. The root cause of
    the issue isn't clear yet. People reported the unloading/re-loading
    module r8169 helps, and also configuring this soft dependency in
    the modprobe config files. Important just seems to be that the
    realtek module is loaded before r8169.
    
    Once this has been applied preliminary fix 38af4b903210 ("net: phy:
    add workaround for issue where PHY driver doesn't bind to the device")
    will be removed.
    
    Fixes: f1e911d5d0df ("r8169: add basic phylib support")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6ab2ac98635b15936c32ed5a4fc98757b0d1f97
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jan 10 21:24:13 2019 +0100

    IN_BADCLASS: fix macro to actually work
    
    [ Upstream commit f275ee0fa3a06eb87edc229749cf1eb18f0663fa ]
    
    Commit 65cab850f0ee ("net: Allow class-e address assignment via ifconfig
    ioctl") modified the IN_BADCLASS macro a bit, but unfortunatly one too
    many '(' characters were added to the line, making any code that used
    it, not build properly.
    
    Also, the macro now compares an unsigned with a signed value, which
    isn't ok, so fix that up by making both types match properly.
    
    Reported-by: Christopher Ferris <cferris@google.com>
    Fixes: 65cab850f0ee ("net: Allow class-e address assignment via ifconfig ioctl")
    Cc: Dave Taht <dave.taht@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee894171fbcb3950d732c334dff69d18cc15d74d
Author: Bryan Whitehead <Bryan.Whitehead@microchip.com>
Date:   Mon Jan 7 14:00:09 2019 -0500

    lan743x: Remove phy_read from link status change function
    
    [ Upstream commit a0071840d2040ea1b27e5a008182b09b88defc15 ]
    
    It has been noticed that some phys do not have the registers
    required by the previous implementation.
    
    To fix this, instead of using phy_read, the required information
    is extracted from the phy_device structure.
    
    fixes: 23f0703c125b ("lan743x: Add main source files for new lan743x driver")
    Signed-off-by: Bryan Whitehead <Bryan.Whitehead@microchip.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f70f94d92ec935b6e1ee4af6b65a30b00a9305e
Author: Timotej Lazar <timotej.lazar@araneo.si>
Date:   Sun Jan 13 01:22:55 2019 +0100

    net: phy: meson-gxl: Use the genphy_soft_reset callback
    
    [ Upstream commit f2f98c1d7fa81e25a5cf910edc9db4d3c6f36c1b ]
    
    Since the referenced commit, Ethernet fails to come up at boot on the
    board meson-gxl-s905x-libretech-cc. Fix this by re-enabling the
    genphy_soft_reset callback for the Amlogic Meson GXL PHY driver.
    
    Fixes: 6e2d85ec0559 ("net: phy: Stop with excessive soft reset")
    Signed-off-by: Timotej Lazar <timotej.lazar@araneo.si>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 702ee83110b5038f55473fbe61c6faafdcce7548
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Tue Jan 15 16:55:30 2019 +0100

    net: phy: Add missing features to PHY drivers
    
    [ Upstream commit 9e857a40dc4eba15a739b4194d7db873d82c28a0 ]
    
    The bcm87xx and micrel driver has PHYs which are missing the .features
    value. Add them. The bcm87xx is a 10G FEC only PHY. Add the needed
    features definition of this PHY.
    
    Fixes: 719655a14971 ("net: phy: Replace phy driver features u32 with link_mode bitmap")
    Reported-by: Scott Wood <oss@buserror.net>
    Reported-by: Camelia Groza <camelia.groza@nxp.com>
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dd1780040298d7a201002a908dc5561a7e0fd2f
Author: Camelia Groza <camelia.groza@nxp.com>
Date:   Thu Jan 17 14:33:33 2019 +0200

    net: phy: add missing phy driver features
    
    [ Upstream commit 40f89ebfbd73fc9439ae8d4950f60226ad176690 ]
    
    The phy drivers for CS4340 and TN2020 are missing their
    features attributes. Add them.
    
    Fixes: 719655a14971 ("net: phy: Replace phy driver features u32 with link_mode bitmap")
    Reported-by: Scott Wood <oss@buserror.net>
    Signed-off-by: Camelia Groza <camelia.groza@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ff0436e2c3575ffe64d359fb3b67aee237dc519
Author: Stanislav Fomichev <sdf@google.com>
Date:   Mon Jan 7 13:38:38 2019 -0800

    tun: publish tfile after it's fully initialized
    
    [ Upstream commit 0b7959b6257322f7693b08a459c505d4938646f2 ]
    
    BUG: unable to handle kernel NULL pointer dereference at 00000000000000d1
    Call Trace:
     ? napi_gro_frags+0xa7/0x2c0
     tun_get_user+0xb50/0xf20
     tun_chr_write_iter+0x53/0x70
     new_sync_write+0xff/0x160
     vfs_write+0x191/0x1e0
     __x64_sys_write+0x5e/0xd0
     do_syscall_64+0x47/0xf0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    I think there is a subtle race between sending a packet via tap and
    attaching it:
    
    CPU0:                    CPU1:
    tun_chr_ioctl(TUNSETIFF)
      tun_set_iff
        tun_attach
          rcu_assign_pointer(tfile->tun, tun);
                             tun_fops->write_iter()
                               tun_chr_write_iter
                                 tun_napi_alloc_frags
                                   napi_get_frags
                                     napi->skb = napi_alloc_skb
          tun_napi_init
            netif_napi_add
              napi->skb = NULL
                                  napi->skb is NULL here
                                  napi_gro_frags
                                    napi_frags_skb
                                      skb = napi->skb
                                      skb_reset_mac_header(skb)
                                      panic()
    
    Move rcu_assign_pointer(tfile->tun) and rcu_assign_pointer(tun->tfiles) to
    be the last thing we do in tun_attach(); this should guarantee that when we
    call tun_get() we always get an initialized object.
    
    v2 changes:
    * remove extra napi_mutex locks/unlocks for napi operations
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Fixes: 90e33d459407 ("tun: enable napi_gro_frags() for TUN/TAP driver")
    
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ff03ea6617c47c4041988e045b2a6bfd0406f50
Author: Yuchung Cheng <ycheng@google.com>
Date:   Tue Jan 8 18:14:28 2019 -0800

    tcp: change txhash on SYN-data timeout
    
    [ Upstream commit c5715b8fabfca0ef85903f8bad2189940ed41cc8 ]
    
    Previously upon SYN timeouts the sender recomputes the txhash to
    try a different path. However this does not apply on the initial
    timeout of SYN-data (active Fast Open). Therefore an active IPv6
    Fast Open connection may incur one second RTO penalty to take on
    a new path after the second SYN retransmission uses a new flow label.
    
    This patch removes this undesirable behavior so Fast Open changes
    the flow label just like the regular connections. This also helps
    avoid falsely disabling Fast Open on the sender which triggers
    after two consecutive SYN timeouts on Fast Open.
    
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Reviewed-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58f453e31924ddab0a26ed1b1a0cb9d2815db38d
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Jan 8 23:27:06 2019 +0000

    packet: Do not leak dev refcounts on error exit
    
    [ Upstream commit d972f3dce8d161e2142da0ab1ef25df00e2f21a9 ]
    
    'dev' is non NULL when the addr_len check triggers so it must goto a label
    that does the dev_put otherwise dev will have a leaked refcount.
    
    This bug causes the ib_ipoib module to become unloadable when using
    systemd-network as it triggers this check on InfiniBand links.
    
    Fixes: 99137b7888f4 ("packet: validate address length")
    Reported-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50265bcad4dc327964c970df1860d0507f756db8
Author: JianJhen Chen <kchen@synology.com>
Date:   Sun Jan 6 11:28:13 2019 +0800

    net: bridge: fix a bug on using a neighbour cache entry without checking its state
    
    [ Upstream commit 4c84edc11b76590859b1e45dd676074c59602dc4 ]
    
    When handling DNAT'ed packets on a bridge device, the neighbour cache entry
    from lookup was used without checking its state. It means that a cache entry
    in the NUD_STALE state will be used directly instead of entering the NUD_DELAY
    state to confirm the reachability of the neighbor.
    
    This problem becomes worse after commit 2724680bceee ("neigh: Keep neighbour
    cache entries if number of them is small enough."), since all neighbour cache
    entries in the NUD_STALE state will be kept in the neighbour table as long as
    the number of cache entries does not exceed the value specified in gc_thresh1.
    
    This commit validates the state of a neighbour cache entry before using
    the entry.
    
    Signed-off-by: JianJhen Chen <kchen@synology.com>
    Reviewed-by: JinLin Chen <jlchen@synology.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac6a4d97a7f4d950dfe6ec2d5c5505be497e9f69
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 8 04:06:14 2019 -0800

    ipv6: fix kernel-infoleak in ipv6_local_error()
    
    [ Upstream commit 7d033c9f6a7fd3821af75620a0257db87c2b552a ]
    
    This patch makes sure the flow label in the IPv6 header
    forged in ipv6_local_error() is initialized.
    
    BUG: KMSAN: kernel-infoleak in _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
    CPU: 1 PID: 24675 Comm: syz-executor1 Not tainted 4.20.0-rc7+ #4
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     kmsan_internal_check_memory+0x455/0xb00 mm/kmsan/kmsan.c:675
     kmsan_copy_to_user+0xab/0xc0 mm/kmsan/kmsan_hooks.c:601
     _copy_to_user+0x16b/0x1f0 lib/usercopy.c:32
     copy_to_user include/linux/uaccess.h:177 [inline]
     move_addr_to_user+0x2e9/0x4f0 net/socket.c:227
     ___sys_recvmsg+0x5d7/0x1140 net/socket.c:2284
     __sys_recvmsg net/socket.c:2327 [inline]
     __do_sys_recvmsg net/socket.c:2337 [inline]
     __se_sys_recvmsg+0x2fa/0x450 net/socket.c:2334
     __x64_sys_recvmsg+0x4a/0x70 net/socket.c:2334
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f8750c06c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002f
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000002000 RSI: 0000000020000400 RDI: 0000000000000005
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f8750c076d4
    R13: 00000000004c4a60 R14: 00000000004d8140 R15: 00000000ffffffff
    
    Uninit was stored to memory at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_save_stack mm/kmsan/kmsan.c:219 [inline]
     kmsan_internal_chain_origin+0x134/0x230 mm/kmsan/kmsan.c:439
     __msan_chain_origin+0x70/0xe0 mm/kmsan/kmsan_instr.c:200
     ipv6_recv_error+0x1e3f/0x1eb0 net/ipv6/datagram.c:475
     udpv6_recvmsg+0x398/0x2ab0 net/ipv6/udp.c:335
     inet_recvmsg+0x4fb/0x600 net/ipv4/af_inet.c:830
     sock_recvmsg_nosec net/socket.c:794 [inline]
     sock_recvmsg+0x1d1/0x230 net/socket.c:801
     ___sys_recvmsg+0x4d5/0x1140 net/socket.c:2278
     __sys_recvmsg net/socket.c:2327 [inline]
     __do_sys_recvmsg net/socket.c:2337 [inline]
     __se_sys_recvmsg+0x2fa/0x450 net/socket.c:2334
     __x64_sys_recvmsg+0x4a/0x70 net/socket.c:2334
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     ipv6_local_error+0x1a7/0x9e0 net/ipv6/datagram.c:334
     __ip6_append_data+0x129f/0x4fd0 net/ipv6/ip6_output.c:1311
     ip6_make_skb+0x6cc/0xcf0 net/ipv6/ip6_output.c:1775
     udpv6_sendmsg+0x3f8e/0x45d0 net/ipv6/udp.c:1384
     inet_sendmsg+0x54a/0x720 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     __sys_sendto+0x8c4/0xac0 net/socket.c:1788
     __do_sys_sendto net/socket.c:1800 [inline]
     __se_sys_sendto+0x107/0x130 net/socket.c:1796
     __x64_sys_sendto+0x6e/0x90 net/socket.c:1796
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    Bytes 4-7 of 28 are uninitialized
    Memory access of size 28 starts at ffff8881937bfce0
    Data copied to user address 0000000020000000
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6da7da96cf349d9d26da49cd0028399aaaa4f400
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Dec 7 18:39:23 2018 +0000

    arm64: Don't trap host pointer auth use to EL2
    
    [ Upstream commit b3669b1e1c09890d61109a1a8ece2c5b66804714 ]
    
    To allow EL0 (and/or EL1) to use pointer authentication functionality,
    we must ensure that pointer authentication instructions and accesses to
    pointer authentication keys are not trapped to EL2.
    
    This patch ensures that HCR_EL2 is configured appropriately when the
    kernel is booted at EL2. For non-VHE kernels we set HCR_EL2.{API,APK},
    ensuring that EL1 can access keys and permit EL0 use of instructions.
    For VHE kernels host EL0 (TGE && E2H) is unaffected by these settings,
    and it doesn't matter how we configure HCR_EL2.{API,APK}, so we don't
    bother setting them.
    
    This does not enable support for KVM guests, since KVM manages HCR_EL2
    itself when running VMs.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Kristina Martsenko <kristina.martsenko@arm.com>
    Acked-by: Christoffer Dall <christoffer.dall@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: kvmarm@lists.cs.columbia.edu
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e47647c715e266b6a81012a87d28a38b2d209c6f
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Dec 7 18:39:21 2018 +0000

    arm64/kvm: consistently handle host HCR_EL2 flags
    
    [ Upstream commit 4eaed6aa2c628101246bcabc91b203bfac1193f8 ]
    
    In KVM we define the configuration of HCR_EL2 for a VHE HOST in
    HCR_HOST_VHE_FLAGS, but we don't have a similar definition for the
    non-VHE host flags, and open-code HCR_RW. Further, in head.S we
    open-code the flags for VHE and non-VHE configurations.
    
    In future, we're going to want to configure more flags for the host, so
    lets add a HCR_HOST_NVHE_FLAGS defintion, and consistently use both
    HCR_HOST_VHE_FLAGS and HCR_HOST_NVHE_FLAGS in the kvm code and head.S.
    
    We now use mov_q to generate the HCR_EL2 value, as we use when
    configuring other registers in head.S.
    
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Kristina Martsenko <kristina.martsenko@arm.com>
    Reviewed-by: Christoffer Dall <christoffer.dall@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: kvmarm@lists.cs.columbia.edu
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41bed3ab57c843c9a29d57574c5f291792674e97
Author: Loic Poulain <loic.poulain@linaro.org>
Date:   Tue Dec 4 13:25:32 2018 +0100

    mmc: sdhci-msm: Disable CDR function on TX
    
    commit a89e7bcb18081c611eb6cf50edd440fa4983a71a upstream.
    
    The Clock Data Recovery (CDR) circuit allows to automatically adjust
    the RX sampling-point/phase for high frequency cards (SDR104, HS200...).
    CDR is automatically enabled during DLL configuration.
    However, according to the APQ8016 reference manual, this function
    must be disabled during TX and tuning phase in order to prevent any
    interferences during tuning challenges and unexpected phase alteration
    during TX transfers.
    
    This patch enables/disables CDR according to the current transfer mode.
    
    This fixes sporadic write transfer issues observed with some SDR104 and
    HS200 cards.
    
    Inspired by sdhci-msm downstream patch:
    https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/432516/
    
    Reported-by: Leonid Segal <leonid.s@variscite.com>
    Reported-by: Manabu Igusa <migusa@arrowjapan.com>
    Signed-off-by: Loic Poulain <loic.poulain@linaro.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Georgi Djakov <georgi.djakov@linaro.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    [georgi: backport to v4.19+]
    Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0b9b2cf441b25a8ad9fea69e539722d37460779
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Dec 28 01:24:49 2018 +0100

    netfilter: nf_conncount: fix argument order to find_next_bit
    
    commit a007232066f6839d6f256bab21e825d968f1a163 upstream.
    
    Size and 'next bit' were swapped, this bug could cause worker to
    reschedule itself even if system was idle.
    
    Fixes: 5c789e131cbb9 ("netfilter: nf_conncount: Add list lock and gc worker, and RCU for init tree search")
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 385c1e4b7788a88bed1f7d1315f851ada1260643
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Dec 28 01:24:48 2018 +0100

    netfilter: nf_conncount: speculative garbage collection on empty lists
    
    commit c80f10bc973af2ace6b1414724eeff61eaa71837 upstream.
    
    Instead of removing a empty list node that might be reintroduced soon
    thereafter, tentatively place the empty list node on the list passed to
    tree_nodes_free(), then re-check if the list is empty again before erasing
    it from the tree.
    
    [ Florian: rebase on top of pending nf_conncount fixes ]
    
    Fixes: 5c789e131cbb9 ("netfilter: nf_conncount: Add list lock and gc worker, and RCU for init tree search")
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c58a49f2a07d797ea74b09dcaacb9fe593862aa
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Dec 28 01:24:47 2018 +0100

    netfilter: nf_conncount: move all list iterations under spinlock
    
    commit 2f971a8f425545da52ca0e6bee81f5b1ea0ccc5f upstream.
    
    Two CPUs may race to remove a connection from the list, the existing
    conn->dead will result in a use-after-free. Use the per-list spinlock to
    protect list iterations.
    
    As all accesses to the list now happen while holding the per-list lock,
    we no longer need to delay free operations with rcu.
    
    Joint work with Florian.
    
    Fixes: 5c789e131cbb9 ("netfilter: nf_conncount: Add list lock and gc worker, and RCU for init tree search")
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3409dd1ddb38211e461de1a34951e635fc6bcbfa
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Dec 28 01:24:46 2018 +0100

    netfilter: nf_conncount: merge lookup and add functions
    
    commit df4a902509766897f7371fdfa4c3bf8bc321b55d upstream.
    
    'lookup' is always followed by 'add'.
    Merge both and make the list-walk part of nf_conncount_add().
    
    This also avoids one unneeded unlock/re-lock pair.
    
    Extra care needs to be taken in count_tree, as we only hold rcu
    read lock, i.e. we can only insert to an existing tree node after
    acquiring its lock and making sure it has a nonzero count.
    
    As a zero count should be rare, just fall back to insert_tree()
    (which acquires tree lock).
    
    This issue and its solution were pointed out by Shawn Bohrer
    during patch review.
    
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43a3c2e4a648dc9f3a66019cff03ce5e8a6dd3f5
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Dec 28 01:24:45 2018 +0100

    netfilter: nf_conncount: restart search when nodes have been erased
    
    commit e8cfb372b38a1b8979aa7f7631fb5e7b11c3793c upstream.
    
    Shawn Bohrer reported a following crash:
     |RIP: 0010:rb_erase+0xae/0x360
     [..]
     Call Trace:
      nf_conncount_destroy+0x59/0xc0 [nf_conncount]
      cleanup_match+0x45/0x70 [ip_tables]
      ...
    
    Shawn tracked this down to bogus 'parent' pointer:
    Problem is that when we insert a new node, then there is a chance that
    the 'parent' that we found was also passed to tree_nodes_free() (because
    that node was empty) for erase+free.
    
    Instead of trying to be clever and detect when this happens, restart
    the search if we have evicted one or more nodes.  To prevent frequent
    restarts, do not perform gc on the second round.
    
    Also, unconditionally schedule the gc worker.
    The condition
    
      gc_count > ARRAY_SIZE(gc_nodes))
    
    cannot be true unless tree grows very large, as the height of the tree
    will be low even with hundreds of nodes present.
    
    Fixes: 5c789e131cbb9 ("netfilter: nf_conncount: Add list lock and gc worker, and RCU for init tree search")
    Reported-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc273e584dd355a74675c3b7fe5e01977222c7ed
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Dec 28 01:24:44 2018 +0100

    netfilter: nf_conncount: split gc in two phases
    
    commit f7fcc98dfc2d136722007fec0debbed761679b94 upstream.
    
    The lockless workqueue garbage collector can race with packet path
    garbage collector to delete list nodes, as it calls tree_nodes_free()
    with the addresses of nodes that might have been free'd already from
    another cpu.
    
    To fix this, split gc into two phases.
    
    One phase to perform gc on the connections: From a locking perspective,
    this is the same as count_tree(): we hold rcu lock, but we do not
    change the tree, we only change the nodes' contents.
    
    The second phase acquires the tree lock and reaps empty nodes.
    This avoids a race condition of the garbage collection vs.  packet path:
    If a node has been free'd already, the second phase won't find it anymore.
    
    This second phase is, from locking perspective, same as insert_tree().
    
    The former only modifies nodes (list content, count), latter modifies
    the tree itself (rb_erase or rb_insert).
    
    Fixes: 5c789e131cbb9 ("netfilter: nf_conncount: Add list lock and gc worker, and RCU for init tree search")
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d87c0fc76fc04c1f1ad03454150c6935ca363831
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Dec 28 01:24:43 2018 +0100

    netfilter: nf_conncount: don't skip eviction when age is negative
    
    commit 4cd273bb91b3001f623f516ec726c49754571b1a upstream.
    
    age is signed integer, so result can be negative when the timestamps
    have a large delta.  In this case we want to discard the entry.
    
    Instead of using age >= 2 || age < 0, just make it unsigned.
    
    Fixes: b36e4523d4d56 ("netfilter: nf_conncount: fix garbage collection confirm race")
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d771106c7896752dc5496bcefbd3a39fe9654422
Author: Shawn Bohrer <sbohrer@cloudflare.com>
Date:   Fri Dec 28 01:24:42 2018 +0100

    netfilter: nf_conncount: replace CONNCOUNT_LOCK_SLOTS with CONNCOUNT_SLOTS
    
    commit c78e7818f16f687389174c4569243abbec8dc68f upstream.
    
    Most of the time these were the same value anyway, but when
    CONFIG_LOCKDEP was enabled we would use a smaller number of locks to
    reduce overhead.  Unfortunately having two values is confusing and not
    worth the complexity.
    
    This fixes a bug where tree_gc_worker() would only GC up to
    CONNCOUNT_LOCK_SLOTS trees which meant when CONFIG_LOCKDEP was enabled
    not all trees would be GCed by tree_gc_worker().
    
    Fixes: 5c789e131cbb9 ("netfilter: nf_conncount: Add list lock and gc worker, and RCU for init tree search")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4aba230bb0c702fee6acd6d812828766ed14ef1
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Fri Jan 4 15:55:26 2019 +0100

    can: gw: ensure DLC boundaries after CAN frame modification
    
    commit 0aaa81377c5a01f686bcdb8c7a6929a7bf330c68 upstream.
    
    Muyu Yu provided a POC where user root with CAP_NET_ADMIN can create a CAN
    frame modification rule that makes the data length code a higher value than
    the available CAN frame data size. In combination with a configured checksum
    calculation where the result is stored relatively to the end of the data
    (e.g. cgw_csum_xor_rel) the tail of the skb (e.g. frag_list pointer in
    skb_shared_info) can be rewritten which finally can cause a system crash.
    
    Michael Kubecek suggested to drop frames that have a DLC exceeding the
    available space after the modification process and provided a patch that can
    handle CAN FD frames too. Within this patch we also limit the length for the
    checksum calculations to the maximum of Classic CAN data length (8).
    
    CAN frames that are dropped by these additional checks are counted with the
    CGW_DELETED counter which indicates misconfigurations in can-gw rules.
    
    This fixes CVE-2019-3701.
    
    Reported-by: Muyu Yu <ieatmuttonchuan@gmail.com>
    Reported-by: Marcus Meissner <meissner@suse.de>
    Suggested-by: Michal Kubecek <mkubecek@suse.cz>
    Tested-by: Muyu Yu <ieatmuttonchuan@gmail.com>
    Tested-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: linux-stable <stable@vger.kernel.org> # >= v3.2
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 844fc57064d7f58dd9650ff85bd898c32ec43275
Author: Dmitry Safonov <0x7f454c46@gmail.com>
Date:   Wed Jan 9 01:17:40 2019 +0000

    tty: Don't hold ldisc lock in tty_reopen() if ldisc present
    
    commit d3736d82e8169768218ee0ef68718875918091a0 upstream.
    
    Try to get reference for ldisc during tty_reopen().
    If ldisc present, we don't need to do tty_ldisc_reinit() and lock the
    write side for line discipline semaphore.
    Effectively, it optimizes fast-path for tty_reopen(), but more
    importantly it won't interrupt ongoing IO on the tty as no ldisc change
    is needed.
    Fixes user-visible issue when tty_reopen() interrupted login process for
    user with a long password, observed and reported by Lukas.
    
    Fixes: c96cf923a98d ("tty: Don't block on IO when ldisc change is pending")
    Fixes: 83d817f41070 ("tty: Hold tty_ldisc_lock() during tty_reopen()")
    Cc: Jiri Slaby <jslaby@suse.com>
    Reported-by: Lukas F. Hartmann <lukas@mntmn.com>
    Tested-by: Lukas F. Hartmann <lukas@mntmn.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Dmitry Safonov <dima@arista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cdfe41c94cde590dd1eb48662861be2f03d745e
Author: Dmitry Safonov <0x7f454c46@gmail.com>
Date:   Thu Nov 1 00:24:49 2018 +0000

    tty: Simplify tty->count math in tty_reopen()
    
    commit cf62a1a13749db0d32b5cdd800ea91a4087319de upstream.
    
    As notted by Jiri, tty_ldisc_reinit() shouldn't rely on tty counter.
    Simplify math by increasing the counter after reinit success.
    
    Cc: Jiri Slaby <jslaby@suse.com>
    Link: lkml.kernel.org/r/<20180829022353.23568-2-dima@arista.com>
    Suggested-by: Jiri Slaby <jslaby@suse.com>
    Reviewed-by: Jiri Slaby <jslaby@suse.cz>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Dmitry Safonov <dima@arista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91fa6599b0339442f81f8ef77b1045cac6db7c42
Author: Dmitry Safonov <0x7f454c46@gmail.com>
Date:   Thu Nov 1 00:24:47 2018 +0000

    tty: Hold tty_ldisc_lock() during tty_reopen()
    
    commit 83d817f41070c48bc3eb7ec18e43000a548fca5c upstream.
    
    tty_ldisc_reinit() doesn't race with neither tty_ldisc_hangup()
    nor set_ldisc() nor tty_ldisc_release() as they use tty lock.
    But it races with anyone who expects line discipline to be the same
    after hoding read semaphore in tty_ldisc_ref().
    
    We've seen the following crash on v4.9.108 stable:
    
    BUG: unable to handle kernel paging request at 0000000000002260
    IP: [..] n_tty_receive_buf_common+0x5f/0x86d
    Workqueue: events_unbound flush_to_ldisc
    Call Trace:
     [..] n_tty_receive_buf2
     [..] tty_ldisc_receive_buf
     [..] flush_to_ldisc
     [..] process_one_work
     [..] worker_thread
     [..] kthread
     [..] ret_from_fork
    
    tty_ldisc_reinit() should be called with ldisc_sem hold for writing,
    which will protect any reader against line discipline changes.
    
    Cc: Jiri Slaby <jslaby@suse.com>
    Cc: stable@vger.kernel.org # b027e2298bd5 ("tty: fix data race between tty_init_dev and flush of buf")
    Reviewed-by: Jiri Slaby <jslaby@suse.cz>
    Reported-by: syzbot+3aa9784721dfb90e984d@syzkaller.appspotmail.com
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Signed-off-by: Dmitry Safonov <dima@arista.com>
    Tested-by: Tycho Andersen <tycho@tycho.ws>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fdb088f4d3b6316ccb92990f2bfe4b3dd90778b
Author: Dmitry Safonov <0x7f454c46@gmail.com>
Date:   Thu Nov 1 00:24:46 2018 +0000

    tty/ldsem: Wake up readers after timed out down_write()
    
    commit 231f8fd0cca078bd4396dd7e380db813ac5736e2 upstream.
    
    ldsem_down_read() will sleep if there is pending writer in the queue.
    If the writer times out, readers in the queue should be woken up,
    otherwise they may miss a chance to acquire the semaphore until the last
    active reader will do ldsem_up_read().
    
    There was a couple of reports where there was one active reader and
    other readers soft locked up:
      Showing all locks held in the system:
      2 locks held by khungtaskd/17:
       #0:  (rcu_read_lock){......}, at: watchdog+0x124/0x6d1
       #1:  (tasklist_lock){.+.+..}, at: debug_show_all_locks+0x72/0x2d3
      2 locks held by askfirst/123:
       #0:  (&tty->ldisc_sem){.+.+.+}, at: ldsem_down_read+0x46/0x58
       #1:  (&ldata->atomic_read_lock){+.+...}, at: n_tty_read+0x115/0xbe4
    
    Prevent readers wait for active readers to release ldisc semaphore.
    
    Link: lkml.kernel.org/r/20171121132855.ajdv4k6swzhvktl6@wfg-t540p.sh.intel.com
    Link: lkml.kernel.org/r/20180907045041.GF1110@shao2-debian
    Cc: Jiri Slaby <jslaby@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Reported-by: kernel test robot <rong.a.chen@intel.com>
    Signed-off-by: Dmitry Safonov <dima@arista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
