commit 6d0c334a400db31751c787c411e7187ab59a3f1d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Jan 12 12:12:09 2020 +0100

    Linux 4.14.164

commit 9df7257626785ede4905f8813adc78ba740d3f72
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 7 01:42:24 2020 -0800

    vlan: fix memory leak in vlan_dev_set_egress_priority
    
    [ Upstream commit 9bbd917e0bec9aebdbd0c8dbc966caec15eb33e9 ]
    
    There are few cases where the ndo_uninit() handler might be not
    called if an error happens while device is initialized.
    
    Since vlan_newlink() calls vlan_changelink() before
    trying to register the netdevice, we need to make sure
    vlan_dev_uninit() has been called at least once,
    or we might leak allocated memory.
    
    BUG: memory leak
    unreferenced object 0xffff888122a206c0 (size 32):
      comm "syz-executor511", pid 7124, jiffies 4294950399 (age 32.240s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 61 73 00 00 00 00 00 00 00 00  ......as........
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<000000000eb3bb85>] kmemleak_alloc_recursive include/linux/kmemleak.h:43 [inline]
        [<000000000eb3bb85>] slab_post_alloc_hook mm/slab.h:586 [inline]
        [<000000000eb3bb85>] slab_alloc mm/slab.c:3320 [inline]
        [<000000000eb3bb85>] kmem_cache_alloc_trace+0x145/0x2c0 mm/slab.c:3549
        [<000000007b99f620>] kmalloc include/linux/slab.h:556 [inline]
        [<000000007b99f620>] vlan_dev_set_egress_priority+0xcc/0x150 net/8021q/vlan_dev.c:194
        [<000000007b0cb745>] vlan_changelink+0xd6/0x140 net/8021q/vlan_netlink.c:126
        [<0000000065aba83a>] vlan_newlink+0x135/0x200 net/8021q/vlan_netlink.c:181
        [<00000000fb5dd7a2>] __rtnl_newlink+0x89a/0xb80 net/core/rtnetlink.c:3305
        [<00000000ae4273a1>] rtnl_newlink+0x4e/0x80 net/core/rtnetlink.c:3363
        [<00000000decab39f>] rtnetlink_rcv_msg+0x178/0x4b0 net/core/rtnetlink.c:5424
        [<00000000accba4ee>] netlink_rcv_skb+0x61/0x170 net/netlink/af_netlink.c:2477
        [<00000000319fe20f>] rtnetlink_rcv+0x1d/0x30 net/core/rtnetlink.c:5442
        [<00000000d51938dc>] netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
        [<00000000d51938dc>] netlink_unicast+0x223/0x310 net/netlink/af_netlink.c:1328
        [<00000000e539ac79>] netlink_sendmsg+0x2c0/0x570 net/netlink/af_netlink.c:1917
        [<000000006250c27e>] sock_sendmsg_nosec net/socket.c:639 [inline]
        [<000000006250c27e>] sock_sendmsg+0x54/0x70 net/socket.c:659
        [<00000000e2a156d1>] ____sys_sendmsg+0x2d0/0x300 net/socket.c:2330
        [<000000008c87466e>] ___sys_sendmsg+0x8a/0xd0 net/socket.c:2384
        [<00000000110e3054>] __sys_sendmsg+0x80/0xf0 net/socket.c:2417
        [<00000000d71077c8>] __do_sys_sendmsg net/socket.c:2426 [inline]
        [<00000000d71077c8>] __se_sys_sendmsg net/socket.c:2424 [inline]
        [<00000000d71077c8>] __x64_sys_sendmsg+0x23/0x30 net/socket.c:2424
    
    Fixe: 07b5b17e157b ("[VLAN]: Use rtnl_link API")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a56f6034450677945452a72800dc84354959026e
Author: Petr Machata <petrm@mellanox.com>
Date:   Mon Jan 6 18:01:56 2020 +0000

    net: sch_prio: When ungrafting, replace with FIFO
    
    [ Upstream commit 240ce7f6428ff5188b9eedc066e1e4d645b8635f ]
    
    When a child Qdisc is removed from one of the PRIO Qdisc's bands, it is
    replaced unconditionally by a NOOP qdisc. As a result, any traffic hitting
    that band gets dropped. That is incorrect--no Qdisc was explicitly added
    when PRIO was created, and after removal, none should have to be added
    either.
    
    Fix PRIO by first attempting to create a default Qdisc and only falling
    back to noop when that fails. This pattern of attempting to create an
    invisible FIFO, using NOOP only as a fallback, is also seen in other
    Qdiscs.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 841d685ca1154db46d409883a48d15409819a838
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 7 01:42:25 2020 -0800

    vlan: vlan_changelink() should propagate errors
    
    [ Upstream commit eb8ef2a3c50092bb018077c047b8dba1ce0e78e3 ]
    
    Both vlan_dev_change_flags() and vlan_dev_set_egress_priority()
    can return an error. vlan_changelink() should not ignore them.
    
    Fixes: 07b5b17e157b ("[VLAN]: Use rtnl_link API")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36821b48f5203d5490349e514c2774ff9784bebc
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Jan 2 17:23:45 2020 +0800

    vxlan: fix tos value before xmit
    
    [ Upstream commit 71130f29979c7c7956b040673e6b9d5643003176 ]
    
    Before ip_tunnel_ecn_encap() and udp_tunnel_xmit_skb() we should filter
    tos value by RT_TOS() instead of using config tos directly.
    
    vxlan_get_route() would filter the tos to fl4.flowi4_tos but we didn't
    return it back, as geneve_get_v4_rt() did. So we have to use RT_TOS()
    directly in function ip_tunnel_ecn_encap().
    
    Fixes: 206aaafcd279 ("VXLAN: Use IP Tunnels tunnel ENC encap API")
    Fixes: 1400615d64cf ("vxlan: allow setting ipv6 traffic class")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab31605bdb67483047f3cc48f49b0ad63ec20465
Author: Pengcheng Yang <yangpc@wangsu.com>
Date:   Mon Dec 30 17:54:41 2019 +0800

    tcp: fix "old stuff" D-SACK causing SACK to be treated as D-SACK
    
    [ Upstream commit c9655008e7845bcfdaac10a1ed8554ec167aea88 ]
    
    When we receive a D-SACK, where the sequence number satisfies:
            undo_marker <= start_seq < end_seq <= prior_snd_una
    we consider this is a valid D-SACK and tcp_is_sackblock_valid()
    returns true, then this D-SACK is discarded as "old stuff",
    but the variable first_sack_index is not marked as negative
    in tcp_sacktag_write_queue().
    
    If this D-SACK also carries a SACK that needs to be processed
    (for example, the previous SACK segment was lost), this SACK
    will be treated as a D-SACK in the following processing of
    tcp_sacktag_write_queue(), which will eventually lead to
    incorrect updates of undo_retrans and reordering.
    
    Fixes: fd6dad616d4f ("[TCP]: Earlier SACK block verification & simplify access to them")
    Signed-off-by: Pengcheng Yang <yangpc@wangsu.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e2d29bacd3f70b13a3abfc7b7033aacdb4c2aee
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Jan 4 14:15:02 2020 +0800

    sctp: free cmd->obj.chunk for the unprocessed SCTP_CMD_REPLY
    
    [ Upstream commit be7a7729207797476b6666f046d765bdf9630407 ]
    
    This patch is to fix a memleak caused by no place to free cmd->obj.chunk
    for the unprocessed SCTP_CMD_REPLY. This issue occurs when failing to
    process a cmd while there're still SCTP_CMD_REPLY cmds on the cmd seq
    with an allocated chunk in cmd->obj.chunk.
    
    So fix it by freeing cmd->obj.chunk for each SCTP_CMD_REPLY cmd left on
    the cmd seq when any cmd returns error. While at it, also remove 'nomem'
    label.
    
    Reported-by: syzbot+107c4aff5f392bf1517f@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7eff1139e85c78b0c96afe587792cabf19d0fb2a
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Dec 13 14:56:15 2019 +0100

    USB: serial: option: add Telit ME910G1 0x110a composition
    
    commit 0d3010fa442429f8780976758719af05592ff19f upstream.
    
    This patch adds the following Telit ME910G1 composition:
    
    0x110a: tty, tty, tty, rmnet
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb275c92aaa05ba8fdf6919950cede0c03f62253
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Dec 19 17:10:16 2019 +0100

    USB: core: fix check for duplicate endpoints
    
    commit 3e4f8e21c4f27bcf30a48486b9dcc269512b79ff upstream.
    
    Amend the endpoint-descriptor sanity checks to detect all duplicate
    endpoint addresses in a configuration.
    
    Commit 0a8fd1346254 ("USB: fix problems with duplicate endpoint
    addresses") added a check for duplicate endpoint addresses within a
    single alternate setting, but did not look for duplicate addresses in
    other interfaces.
    
    The current check would also not detect all duplicate addresses when one
    endpoint is as a (bi-directional) control endpoint.
    
    This specifically avoids overwriting the endpoint entries in struct
    usb_device when enabling a duplicate endpoint, something which could
    potentially lead to crashes or leaks, for example, when endpoints are
    later disabled.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20191219161016.6695-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73a6f18d8390abc233212085ba4f06088f9fb075
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 6 06:10:39 2020 -0800

    pkt_sched: fq: do not accept silly TCA_FQ_QUANTUM
    
    [ Upstream commit d9e15a2733067c9328fb56d98fe8e574fa19ec31 ]
    
    As diagnosed by Florian :
    
    If TCA_FQ_QUANTUM is set to 0x80000000, fq_deueue()
    can loop forever in :
    
    if (f->credit <= 0) {
      f->credit += q->quantum;
      goto begin;
    }
    
    ... because f->credit is either 0 or -2147483648.
    
    Let's limit TCA_FQ_QUANTUM to no more than 1 << 20 :
    This max value should limit risks of breaking user setups
    while fixing this bug.
    
    Fixes: afe4fd062416 ("pkt_sched: fq: Fair Queue packet scheduler")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Diagnosed-by: Florian Westphal <fw@strlen.de>
    Reported-by: syzbot+dc9071cc5a85950bdfce@syzkaller.appspotmail.com
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a45335027cece5e979c1bb1a603604b2f34f32f8
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 7 10:57:01 2020 -0800

    net: usb: lan78xx: fix possible skb leak
    
    [ Upstream commit 47240ba0cd09bb6fe6db9889582048324999dfa4 ]
    
    If skb_linearize() fails, we need to free the skb.
    
    TSO makes skb bigger, and this bug might be the reason
    Raspberry Pi 3B+ users had to disable TSO.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: RENARD Pierre-Francois <pfrenard@gmail.com>
    Cc: Stefan Wahren <stefan.wahren@i2se.com>
    Cc: Woojung Huh <woojung.huh@microchip.com>
    Cc: Microchip Linux Driver Support <UNGLinuxDriver@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8835b0eff11a61f5c5df0b3c4737cfdde28b1a41
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Mon Jan 6 11:09:22 2020 +0800

    net: stmmac: dwmac-sunxi: Allow all RGMII modes
    
    [ Upstream commit 52cc73e5404c7ba0cbfc50cb4c265108c84b3d5a ]
    
    Allow all the RGMII modes to be used. This would allow us to represent
    the hardware better in the device tree with RGMII_ID where in most
    cases the PHY's internal delay for both RX and TX are used.
    
    Fixes: af0bd4e9ba80 ("net: stmmac: sunxi platform extensions for GMAC in Allwinner A20 SoC's")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fee038c31896073d7b0b7c1b1183f02579f44a4e
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Mon Jan 6 11:09:45 2020 +0800

    net: stmmac: dwmac-sun8i: Allow all RGMII modes
    
    [ Upstream commit f1239d8aa84dad8fe4b6cc1356f40fc8e842db47 ]
    
    Allow all the RGMII modes to be used. This would allow us to represent
    the hardware better in the device tree with RGMII_ID where in most
    cases the PHY's internal delay for both RX and TX are used.
    
    Fixes: 9f93ac8d4085 ("net-next: stmmac: Add dwmac-sun8i")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19716758430e63e0cf6097cdde2a72b6ac28dc75
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sat Jan 4 23:14:51 2020 +0100

    net: dsa: mv88e6xxx: Preserve priority when setting CPU port.
    
    [ Upstream commit d8dc2c9676e614ef62f54a155b50076888c8a29a ]
    
    The 6390 family uses an extended register to set the port connected to
    the CPU. The lower 5 bits indicate the port, the upper three bits are
    the priority of the frames as they pass through the switch, what
    egress queue they should use, etc. Since frames being set to the CPU
    are typically management frames, BPDU, IGMP, ARP, etc set the priority
    to 7, the reset default, and the highest.
    
    Fixes: 33641994a676 ("net: dsa: mv88e6xxx: Monitor and Management tables")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Tested-by: Chris Healy <cphealy@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a953272f2d2db63bba97137b64b3f1770634e00
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 6 12:30:48 2020 -0800

    macvlan: do not assume mac_header is set in macvlan_broadcast()
    
    [ Upstream commit 96cc4b69581db68efc9749ef32e9cf8e0160c509 ]
    
    Use of eth_hdr() in tx path is error prone.
    
    Many drivers call skb_reset_mac_header() before using it,
    but others do not.
    
    Commit 6d1ccff62780 ("net: reset mac header in dev_start_xmit()")
    attempted to fix this generically, but commit d346a3fae3ff
    ("packet: introduce PACKET_QDISC_BYPASS socket option") brought
    back the macvlan bug.
    
    Lets add a new helper, so that tx paths no longer have
    to call skb_reset_mac_header() only to get a pointer
    to skb->data.
    
    Hopefully we will be able to revert 6d1ccff62780
    ("net: reset mac header in dev_start_xmit()") and save few cycles
    in transmit fast path.
    
    BUG: KASAN: use-after-free in __get_unaligned_cpu32 include/linux/unaligned/packed_struct.h:19 [inline]
    BUG: KASAN: use-after-free in mc_hash drivers/net/macvlan.c:251 [inline]
    BUG: KASAN: use-after-free in macvlan_broadcast+0x547/0x620 drivers/net/macvlan.c:277
    Read of size 4 at addr ffff8880a4932401 by task syz-executor947/9579
    
    CPU: 0 PID: 9579 Comm: syz-executor947 Not tainted 5.5.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x197/0x210 lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xd4/0x30b mm/kasan/report.c:374
     __kasan_report.cold+0x1b/0x41 mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:639
     __asan_report_load_n_noabort+0xf/0x20 mm/kasan/generic_report.c:145
     __get_unaligned_cpu32 include/linux/unaligned/packed_struct.h:19 [inline]
     mc_hash drivers/net/macvlan.c:251 [inline]
     macvlan_broadcast+0x547/0x620 drivers/net/macvlan.c:277
     macvlan_queue_xmit drivers/net/macvlan.c:520 [inline]
     macvlan_start_xmit+0x402/0x77f drivers/net/macvlan.c:559
     __netdev_start_xmit include/linux/netdevice.h:4447 [inline]
     netdev_start_xmit include/linux/netdevice.h:4461 [inline]
     dev_direct_xmit+0x419/0x630 net/core/dev.c:4079
     packet_direct_xmit+0x1a9/0x250 net/packet/af_packet.c:240
     packet_snd net/packet/af_packet.c:2966 [inline]
     packet_sendmsg+0x260d/0x6220 net/packet/af_packet.c:2991
     sock_sendmsg_nosec net/socket.c:639 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:659
     __sys_sendto+0x262/0x380 net/socket.c:1985
     __do_sys_sendto net/socket.c:1997 [inline]
     __se_sys_sendto net/socket.c:1993 [inline]
     __x64_sys_sendto+0xe1/0x1a0 net/socket.c:1993
     do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x442639
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 5b 10 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffc13549e08 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000442639
    RDX: 000000000000000e RSI: 0000000020000080 RDI: 0000000000000003
    RBP: 0000000000000004 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 0000000000403bb0 R14: 0000000000000000 R15: 0000000000000000
    
    Allocated by task 9389:
     save_stack+0x23/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     __kasan_kmalloc mm/kasan/common.c:513 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:486
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:527
     __do_kmalloc mm/slab.c:3656 [inline]
     __kmalloc+0x163/0x770 mm/slab.c:3665
     kmalloc include/linux/slab.h:561 [inline]
     tomoyo_realpath_from_path+0xc5/0x660 security/tomoyo/realpath.c:252
     tomoyo_get_realpath security/tomoyo/file.c:151 [inline]
     tomoyo_path_perm+0x230/0x430 security/tomoyo/file.c:822
     tomoyo_inode_getattr+0x1d/0x30 security/tomoyo/tomoyo.c:129
     security_inode_getattr+0xf2/0x150 security/security.c:1222
     vfs_getattr+0x25/0x70 fs/stat.c:115
     vfs_statx_fd+0x71/0xc0 fs/stat.c:145
     vfs_fstat include/linux/fs.h:3265 [inline]
     __do_sys_newfstat+0x9b/0x120 fs/stat.c:378
     __se_sys_newfstat fs/stat.c:375 [inline]
     __x64_sys_newfstat+0x54/0x80 fs/stat.c:375
     do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 9389:
     save_stack+0x23/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     kasan_set_free_info mm/kasan/common.c:335 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:474
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:483
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x2c0 mm/slab.c:3757
     tomoyo_realpath_from_path+0x1a7/0x660 security/tomoyo/realpath.c:289
     tomoyo_get_realpath security/tomoyo/file.c:151 [inline]
     tomoyo_path_perm+0x230/0x430 security/tomoyo/file.c:822
     tomoyo_inode_getattr+0x1d/0x30 security/tomoyo/tomoyo.c:129
     security_inode_getattr+0xf2/0x150 security/security.c:1222
     vfs_getattr+0x25/0x70 fs/stat.c:115
     vfs_statx_fd+0x71/0xc0 fs/stat.c:145
     vfs_fstat include/linux/fs.h:3265 [inline]
     __do_sys_newfstat+0x9b/0x120 fs/stat.c:378
     __se_sys_newfstat fs/stat.c:375 [inline]
     __x64_sys_newfstat+0x54/0x80 fs/stat.c:375
     do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8880a4932000
     which belongs to the cache kmalloc-4k of size 4096
    The buggy address is located 1025 bytes inside of
     4096-byte region [ffff8880a4932000, ffff8880a4933000)
    The buggy address belongs to the page:
    page:ffffea0002924c80 refcount:1 mapcount:0 mapping:ffff8880aa402000 index:0x0 compound_mapcount: 0
    raw: 00fffe0000010200 ffffea0002846208 ffffea00028f3888 ffff8880aa402000
    raw: 0000000000000000 ffff8880a4932000 0000000100000001 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8880a4932300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880a4932380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8880a4932400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                       ^
     ffff8880a4932480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880a4932500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: b863ceb7ddce ("[NET]: Add macvlan driver")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 887b0296a905f8d5cc090ca08d309918fc24bf24
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 6 06:45:37 2020 -0800

    gtp: fix bad unlock balance in gtp_encap_enable_socket
    
    [ Upstream commit 90d72256addff9e5f8ad645e8f632750dd1f8935 ]
    
    WARNING: bad unlock balance detected!
    5.5.0-rc5-syzkaller #0 Not tainted
    -------------------------------------
    syz-executor921/9688 is trying to release lock (sk_lock-AF_INET6) at:
    [<ffffffff84bf8506>] gtp_encap_enable_socket+0x146/0x400 drivers/net/gtp.c:830
    but there are no more locks to release!
    
    other info that might help us debug this:
    2 locks held by syz-executor921/9688:
     #0: ffffffff8a4d8840 (rtnl_mutex){+.+.}, at: rtnl_lock net/core/rtnetlink.c:72 [inline]
     #0: ffffffff8a4d8840 (rtnl_mutex){+.+.}, at: rtnetlink_rcv_msg+0x405/0xaf0 net/core/rtnetlink.c:5421
     #1: ffff88809304b560 (slock-AF_INET6){+...}, at: spin_lock_bh include/linux/spinlock.h:343 [inline]
     #1: ffff88809304b560 (slock-AF_INET6){+...}, at: release_sock+0x20/0x1c0 net/core/sock.c:2951
    
    stack backtrace:
    CPU: 0 PID: 9688 Comm: syz-executor921 Not tainted 5.5.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x197/0x210 lib/dump_stack.c:118
     print_unlock_imbalance_bug kernel/locking/lockdep.c:4008 [inline]
     print_unlock_imbalance_bug.cold+0x114/0x123 kernel/locking/lockdep.c:3984
     __lock_release kernel/locking/lockdep.c:4242 [inline]
     lock_release+0x5f2/0x960 kernel/locking/lockdep.c:4503
     sock_release_ownership include/net/sock.h:1496 [inline]
     release_sock+0x17c/0x1c0 net/core/sock.c:2961
     gtp_encap_enable_socket+0x146/0x400 drivers/net/gtp.c:830
     gtp_encap_enable drivers/net/gtp.c:852 [inline]
     gtp_newlink+0x9fc/0xc60 drivers/net/gtp.c:666
     __rtnl_newlink+0x109e/0x1790 net/core/rtnetlink.c:3305
     rtnl_newlink+0x69/0xa0 net/core/rtnetlink.c:3363
     rtnetlink_rcv_msg+0x45e/0xaf0 net/core/rtnetlink.c:5424
     netlink_rcv_skb+0x177/0x450 net/netlink/af_netlink.c:2477
     rtnetlink_rcv+0x1d/0x30 net/core/rtnetlink.c:5442
     netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
     netlink_unicast+0x58c/0x7d0 net/netlink/af_netlink.c:1328
     netlink_sendmsg+0x91c/0xea0 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:639 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:659
     ____sys_sendmsg+0x753/0x880 net/socket.c:2330
     ___sys_sendmsg+0x100/0x170 net/socket.c:2384
     __sys_sendmsg+0x105/0x1d0 net/socket.c:2417
     __do_sys_sendmsg net/socket.c:2426 [inline]
     __se_sys_sendmsg net/socket.c:2424 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2424
     do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x445d49
    Code: e8 bc b7 02 00 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 2b 12 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f8019074db8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000006dac38 RCX: 0000000000445d49
    RDX: 0000000000000000 RSI: 0000000020000180 RDI: 0000000000000003
    RBP: 00000000006dac30 R08: 0000000000000004 R09: 0000000000000000
    R10: 0000000000000008 R11: 0000000000000246 R12: 00000000006dac3c
    R13: 00007ffea687f6bf R14: 00007f80190759c0 R15: 20c49ba5e353f7cf
    
    Fixes: e198987e7dd7 ("gtp: fix suspicious RCU usage")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f65291617d4117379ba702130040d2db283c2fb
Author: Mathieu Malaterre <malat@debian.org>
Date:   Wed May 16 21:20:20 2018 +0200

    mmc: block: propagate correct returned value in mmc_rpmb_ioctl
    
    commit b25b750df99bcba29317d3f9d9f93c4ec58890e6 upstream.
    
    In commit 97548575bef3 ("mmc: block: Convert RPMB to a character device") a
    new function `mmc_rpmb_ioctl` was added. The final return is simply
    returning a value of `0` instead of propagating the correct return code.
    
    Discovered during a compilation with W=1, silence the following gcc warning
    
    drivers/mmc/core/block.c:2470:6: warning: variable ‘ret’ set but not used
    [-Wunused-but-set-variable]
    
    Signed-off-by: Mathieu Malaterre <malat@debian.org>
    Reviewed-by: Shawn Lin <shawn.lin@rock-chips.com>
    Fixes: 97548575bef3 ("mmc: block: Convert RPMB to a character device")
    Cc: stable@vger.kernel.org # v4.15+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a52f6b2f57b6695fa46d1b3cb37c54e16efabf53
Author: Alexander Kappner <agk@godking.net>
Date:   Wed Mar 28 15:18:31 2018 -0700

    mmc: core: Prevent bus reference leak in mmc_blk_init()
    
    commit d0a0852b9f81cf5f793bf2eae7336ed40a1a1815 upstream.
    
    Upon module load, mmc_block allocates a bus with bus_registeri() in
    mmc_blk_init(). This reference never gets freed during module unload, which
    leads to subsequent re-insertions of the module fails and a WARN() splat is
    triggered.
    
    Fix the bug by dropping the reference for the bus in mmc_blk_exit().
    
    Signed-off-by: Alexander Kappner <agk@godking.net>
    Fixes: 97548575bef3 ("mmc: block: Convert RPMB to a character device")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3879a509ac7f02e0ba899d22cad53d366b656f67
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Oct 4 11:10:07 2017 +0200

    mmc: block: Fix bug when removing RPMB chardev
    
    commit 1c87f73578497a6c3cc77bcbfd2e5bf15fe753c7 upstream.
    
    I forgot to account for the fact that the device core holds a
    reference to a device added with device_initialize() that need
    to be released with a corresponding put_device() to reach a 0
    refcount at the end of the lifecycle.
    
    This led to a NULL pointer reference when freeing the device
    when e.g. unbidning the host device in sysfs.
    
    Fix this and use the device .release() callback to free the
    IDA and free:ing the memory used by the RPMB device.
    
    Before this patch:
    
    /sys/bus/amba/drivers/mmci-pl18x$ echo 80114000.sdi4_per2 > unbind
    [   29.797332] mmc3: card 0001 removed
    [   29.810791] Unable to handle kernel NULL pointer dereference at
                   virtual address 00000050
    [   29.818878] pgd = de70c000
    [   29.821624] [00000050] *pgd=1e70a831, *pte=00000000, *ppte=00000000
    [   29.827911] Internal error: Oops: 17 [#1] PREEMPT SMP ARM
    [   29.833282] Modules linked in:
    [   29.836334] CPU: 1 PID: 154 Comm: sh Not tainted
                   4.14.0-rc3-00039-g83318e309566-dirty #736
    [   29.844604] Hardware name: ST-Ericsson Ux5x0 platform (Device Tree Support)
    [   29.851562] task: de572700 task.stack: de742000
    [   29.856079] PC is at kernfs_find_ns+0x8/0x100
    [   29.860443] LR is at kernfs_find_and_get_ns+0x30/0x48
    
    After this patch:
    
    /sys/bus/amba/drivers/mmci-pl18x$ echo 80005000.sdi4_per2 > unbind
    [   20.623382] mmc3: card 0001 removed
    
    Fixes: 97548575bef3 ("mmc: block: Convert RPMB to a character device")
    Reported-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae4e8ce0d86159bbba7cfaa44f6276d38b1f2200
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Sep 20 10:02:01 2017 +0200

    mmc: block: Delete mmc_access_rpmb()
    
    commit 14f4ca7e4d2825f9f71e22905ae177b899959f1d upstream.
    
    This function is used by the block layer queue to bail out of
    requests if the current request is towards an RPMB
    "block device".
    
    This was done to avoid boot time scanning of this "block
    device" which was never really a block device, thus duct-taping
    over the fact that it was badly engineered.
    
    This problem is now gone as we removed the offending RPMB block
    device in another patch and replaced it with a character
    device.
    
    Cc: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37d58689dfdd068c2f15f90d573f8e93fe28cf86
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Sep 20 10:02:00 2017 +0200

    mmc: block: Convert RPMB to a character device
    
    commit 97548575bef38abd06690a5a6f6816200c7e77f7 upstream.
    
    The RPMB partition on the eMMC devices is a special area used
    for storing cryptographically safe information signed by a
    special secret key. To write and read records from this special
    area, authentication is needed.
    
    The RPMB area is *only* and *exclusively* accessed using
    ioctl():s from userspace. It is not really a block device,
    as blocks cannot be read or written from the device, also
    the signed chunks that can be stored on the RPMB are actually
    256 bytes, not 512 making a block device a real bad fit.
    
    Currently the RPMB partition spawns a separate block device
    named /dev/mmcblkNrpmb for each device with an RPMB partition,
    including the creation of a block queue with its own kernel
    thread and all overhead associated with this. On the Ux500
    HREFv60 platform, for example, the two eMMCs means that two
    block queues with separate threads are created for no use
    whatsoever.
    
    I have concluded that this block device design for RPMB is
    actually pretty wrong. The RPMB area should have been designed
    to be accessed from /dev/mmcblkN directly, using ioctl()s on
    the main block device. It is however way too late to change
    that, since userspace expects to open an RPMB device in
    /dev/mmcblkNrpmb and we cannot break userspace.
    
    This patch tries to amend the situation using the following
    strategy:
    
    - Stop creating a block device for the RPMB partition/area
    
    - Instead create a custom, dynamic character device with
      the same name.
    
    - Make this new character device support exactly the same
      set of ioctl()s as the old block device.
    
    - Wrap the requests back to the same ioctl() handlers, but
      issue them on the block queue of the main partition/area,
      i.e. /dev/mmcblkN
    
    We need to create a special "rpmb" bus type in order to get
    udev and/or busybox hot/coldplug to instantiate the device
    node properly.
    
    Before the patch, this appears in 'ps aux':
    
    101 root       0:00 [mmcqd/2rpmb]
    123 root       0:00 [mmcqd/3rpmb]
    
    After applying the patch these surplus block queue threads
    are gone, but RPMB is as usable as ever using the userspace
    MMC tools, such as 'mmc rpmb read-counter'.
    
    We get instead those dynamice devices in /dev:
    
    brw-rw----    1 root     root      179,   0 Jan  1  2000 mmcblk0
    brw-rw----    1 root     root      179,   1 Jan  1  2000 mmcblk0p1
    brw-rw----    1 root     root      179,   2 Jan  1  2000 mmcblk0p2
    brw-rw----    1 root     root      179,   5 Jan  1  2000 mmcblk0p5
    brw-rw----    1 root     root      179,   8 Jan  1  2000 mmcblk2
    brw-rw----    1 root     root      179,  16 Jan  1  2000 mmcblk2boot0
    brw-rw----    1 root     root      179,  24 Jan  1  2000 mmcblk2boot1
    crw-rw----    1 root     root      248,   0 Jan  1  2000 mmcblk2rpmb
    brw-rw----    1 root     root      179,  32 Jan  1  2000 mmcblk3
    brw-rw----    1 root     root      179,  40 Jan  1  2000 mmcblk3boot0
    brw-rw----    1 root     root      179,  48 Jan  1  2000 mmcblk3boot1
    brw-rw----    1 root     root      179,  33 Jan  1  2000 mmcblk3p1
    crw-rw----    1 root     root      248,   1 Jan  1  2000 mmcblk3rpmb
    
    Notice the (248,0) and (248,1) character devices for RPMB.
    
    Cc: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9eae4143c33ebe33aa2e195c2863c6e1bf3f8cd
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Tue Sep 10 13:58:33 2019 -0600

    PCI/switchtec: Read all 64 bits of part_event_bitmap
    
    commit 6acdf7e19b37cb3a9258603d0eab315079c19c5e upstream.
    
    The part_event_bitmap register is 64 bits wide, so read it with ioread64()
    instead of the 32-bit ioread32().
    
    Fixes: 52eabba5bcdb ("switchtec: Add IOCTLs to the Switchtec driver")
    Link: https://lore.kernel.org/r/20190910195833.3891-1-logang@deltatee.com
    Reported-by: Doug Meyer <dmeyer@gigaio.com>
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org      # v4.12+
    Cc: Kelvin Cao <Kelvin.Cao@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b454ac1b22af130c6fb8d34c344a98339f1cea9a
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Jan 6 22:51:57 2020 +0100

    bpf: Fix passing modified ctx to ld/abs/ind instruction
    
    commit 6d4f151acf9a4f6fab09b615f246c717ddedcf0c upstream.
    
    Anatoly has been fuzzing with kBdysch harness and reported a KASAN
    slab oob in one of the outcomes:
    
      [...]
      [   77.359642] BUG: KASAN: slab-out-of-bounds in bpf_skb_load_helper_8_no_cache+0x71/0x130
      [   77.360463] Read of size 4 at addr ffff8880679bac68 by task bpf/406
      [   77.361119]
      [   77.361289] CPU: 2 PID: 406 Comm: bpf Not tainted 5.5.0-rc2-xfstests-00157-g2187f215eba #1
      [   77.362134] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
      [   77.362984] Call Trace:
      [   77.363249]  dump_stack+0x97/0xe0
      [   77.363603]  print_address_description.constprop.0+0x1d/0x220
      [   77.364251]  ? bpf_skb_load_helper_8_no_cache+0x71/0x130
      [   77.365030]  ? bpf_skb_load_helper_8_no_cache+0x71/0x130
      [   77.365860]  __kasan_report.cold+0x37/0x7b
      [   77.366365]  ? bpf_skb_load_helper_8_no_cache+0x71/0x130
      [   77.366940]  kasan_report+0xe/0x20
      [   77.367295]  bpf_skb_load_helper_8_no_cache+0x71/0x130
      [   77.367821]  ? bpf_skb_load_helper_8+0xf0/0xf0
      [   77.368278]  ? mark_lock+0xa3/0x9b0
      [   77.368641]  ? kvm_sched_clock_read+0x14/0x30
      [   77.369096]  ? sched_clock+0x5/0x10
      [   77.369460]  ? sched_clock_cpu+0x18/0x110
      [   77.369876]  ? bpf_skb_load_helper_8+0xf0/0xf0
      [   77.370330]  ___bpf_prog_run+0x16c0/0x28f0
      [   77.370755]  __bpf_prog_run32+0x83/0xc0
      [   77.371153]  ? __bpf_prog_run64+0xc0/0xc0
      [   77.371568]  ? match_held_lock+0x1b/0x230
      [   77.371984]  ? rcu_read_lock_held+0xa1/0xb0
      [   77.372416]  ? rcu_is_watching+0x34/0x50
      [   77.372826]  sk_filter_trim_cap+0x17c/0x4d0
      [   77.373259]  ? sock_kzfree_s+0x40/0x40
      [   77.373648]  ? __get_filter+0x150/0x150
      [   77.374059]  ? skb_copy_datagram_from_iter+0x80/0x280
      [   77.374581]  ? do_raw_spin_unlock+0xa5/0x140
      [   77.375025]  unix_dgram_sendmsg+0x33a/0xa70
      [   77.375459]  ? do_raw_spin_lock+0x1d0/0x1d0
      [   77.375893]  ? unix_peer_get+0xa0/0xa0
      [   77.376287]  ? __fget_light+0xa4/0xf0
      [   77.376670]  __sys_sendto+0x265/0x280
      [   77.377056]  ? __ia32_sys_getpeername+0x50/0x50
      [   77.377523]  ? lock_downgrade+0x350/0x350
      [   77.377940]  ? __sys_setsockopt+0x2a6/0x2c0
      [   77.378374]  ? sock_read_iter+0x240/0x240
      [   77.378789]  ? __sys_socketpair+0x22a/0x300
      [   77.379221]  ? __ia32_sys_socket+0x50/0x50
      [   77.379649]  ? mark_held_locks+0x1d/0x90
      [   77.380059]  ? trace_hardirqs_on_thunk+0x1a/0x1c
      [   77.380536]  __x64_sys_sendto+0x74/0x90
      [   77.380938]  do_syscall_64+0x68/0x2a0
      [   77.381324]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [   77.381878] RIP: 0033:0x44c070
      [...]
    
    After further debugging, turns out while in case of other helper functions
    we disallow passing modified ctx, the special case of ld/abs/ind instruction
    which has similar semantics (except r6 being the ctx argument) is missing
    such check. Modified ctx is impossible here as bpf_skb_load_helper_8_no_cache()
    and others are expecting skb fields in original position, hence, add
    check_ctx_reg() to reject any modified ctx. Issue was first introduced back
    in f1174f77b50c ("bpf/verifier: rework value tracking").
    
    Fixes: f1174f77b50c ("bpf/verifier: rework value tracking")
    Reported-by: Anatoly Trosinenko <anatoly.trosinenko@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200106215157.3553-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fed98f4a1e6eb77a5d66ecfdf9345e21df6ac82
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Jun 7 17:40:03 2018 +0200

    bpf: reject passing modified ctx to helper functions
    
    commit 58990d1ff3f7896ee341030e9a7c2e4002570683 upstream.
    
    As commit 28e33f9d78ee ("bpf: disallow arithmetic operations on
    context pointer") already describes, f1174f77b50c ("bpf/verifier:
    rework value tracking") removed the specific white-listed cases
    we had previously where we would allow for pointer arithmetic in
    order to further generalize it, and allow e.g. context access via
    modified registers. While the dereferencing of modified context
    pointers had been forbidden through 28e33f9d78ee, syzkaller did
    recently manage to trigger several KASAN splats for slab out of
    bounds access and use after frees by simply passing a modified
    context pointer to a helper function which would then do the bad
    access since verifier allowed it in adjust_ptr_min_max_vals().
    
    Rejecting arithmetic on ctx pointer in adjust_ptr_min_max_vals()
    generally could break existing programs as there's a valid use
    case in tracing in combination with passing the ctx to helpers as
    bpf_probe_read(), where the register then becomes unknown at
    verification time due to adding a non-constant offset to it. An
    access sequence may look like the following:
    
      offset = args->filename;  /* field __data_loc filename */
      bpf_probe_read(&dst, len, (char *)args + offset); // args is ctx
    
    There are two options: i) we could special case the ctx and as
    soon as we add a constant or bounded offset to it (hence ctx type
    wouldn't change) we could turn the ctx into an unknown scalar, or
    ii) we generalize the sanity test for ctx member access into a
    small helper and assert it on the ctx register that was passed
    as a function argument. Fwiw, latter is more obvious and less
    complex at the same time, and one case that may potentially be
    legitimate in future for ctx member access at least would be for
    ctx to carry a const offset. Therefore, fix follows approach
    from ii) and adds test cases to BPF kselftests.
    
    Fixes: f1174f77b50c ("bpf/verifier: rework value tracking")
    Reported-by: syzbot+3d0b2441dbb71751615e@syzkaller.appspotmail.com
    Reported-by: syzbot+c8504affd4fdd0c1b626@syzkaller.appspotmail.com
    Reported-by: syzbot+e5190cb881d8660fb1a3@syzkaller.appspotmail.com
    Reported-by: syzbot+efae31b384d5badbd620@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1051a28b7255e6624d379f2bd45713352f9470cf
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Thu Dec 19 18:28:10 2019 -0800

    hv_netvsc: Fix unwanted rx_table reset
    
    [ Upstream commit b0689faa8efc5a3391402d7ae93bd373b7248e51 ]
    
    In existing code, the receive indirection table, rx_table, is in
    struct rndis_device, which will be reset when changing MTU, ringparam,
    etc. User configured receive indirection table values will be lost.
    
    To fix this, move rx_table to struct net_device_context, and check
    netif_is_rxfh_configured(), so rx_table will be set to default only
    if no user configured value.
    
    Fixes: ff4a44199012 ("netvsc: allow get/set of RSS indirection table")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a8d4b961747e79a9d28e9f7621216045403b2bb
Author: Chan Shu Tak, Alex <alexchan@task.com.hk>
Date:   Thu Dec 19 14:16:18 2019 +0800

    llc2: Fix return statement of llc_stat_ev_rx_null_dsap_xid_c (and _test_c)
    
    [ Upstream commit af1c0e4e00f3cc76cb136ebf2e2c04e8b6446285 ]
    
    When a frame with NULL DSAP is received, llc_station_rcv is called.
    In turn, llc_stat_ev_rx_null_dsap_xid_c is called to check if it is a NULL
    XID frame. The return statement of llc_stat_ev_rx_null_dsap_xid_c returns 1
    when the incoming frame is not a NULL XID frame and 0 otherwise. Hence, a
    NULL XID response is returned unexpectedly, e.g. when the incoming frame is
    a NULL TEST command.
    
    To fix the error, simply remove the conditional operator.
    
    A similar error in llc_stat_ev_rx_null_dsap_test_c is also fixed.
    
    Signed-off-by: Chan Shu Tak, Alex <alexchan@task.com.hk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d5d36505ddf5ad6d2d7b3d2486778b86f53efbc
Author: Helge Deller <deller@gmx.de>
Date:   Fri Dec 20 21:00:19 2019 +0100

    parisc: Fix compiler warnings in debug_core.c
    
    [ Upstream commit 75cf9797006a3a9f29a3a25c1febd6842a4a9eb2 ]
    
    Fix this compiler warning:
    kernel/debug/debug_core.c: In function ‘kgdb_cpu_enter’:
    arch/parisc/include/asm/cmpxchg.h:48:3: warning: value computed is not used [-Wunused-value]
       48 |  ((__typeof__(*(ptr)))__xchg((unsigned long)(x), (ptr), sizeof(*(ptr))))
    arch/parisc/include/asm/atomic.h:78:30: note: in expansion of macro ‘xchg’
       78 | #define atomic_xchg(v, new) (xchg(&((v)->counter), new))
          |                              ^~~~
    kernel/debug/debug_core.c:596:4: note: in expansion of macro ‘atomic_xchg’
      596 |    atomic_xchg(&kgdb_active, cpu);
          |    ^~~~~~~~~~~
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62dfe5f55d2ca0b350fa76333fbb8a57b31c864a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Dec 18 16:44:04 2019 +0800

    block: fix memleak when __blk_rq_map_user_iov() is failed
    
    [ Upstream commit 3b7995a98ad76da5597b488fa84aa5a56d43b608 ]
    
    When I doing fuzzy test, get the memleak report:
    
    BUG: memory leak
    unreferenced object 0xffff88837af80000 (size 4096):
      comm "memleak", pid 3557, jiffies 4294817681 (age 112.499s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        20 00 00 00 10 01 00 00 00 00 00 00 01 00 00 00   ...............
      backtrace:
        [<000000001c894df8>] bio_alloc_bioset+0x393/0x590
        [<000000008b139a3c>] bio_copy_user_iov+0x300/0xcd0
        [<00000000a998bd8c>] blk_rq_map_user_iov+0x2f1/0x5f0
        [<000000005ceb7f05>] blk_rq_map_user+0xf2/0x160
        [<000000006454da92>] sg_common_write.isra.21+0x1094/0x1870
        [<00000000064bb208>] sg_write.part.25+0x5d9/0x950
        [<000000004fc670f6>] sg_write+0x5f/0x8c
        [<00000000b0d05c7b>] __vfs_write+0x7c/0x100
        [<000000008e177714>] vfs_write+0x1c3/0x500
        [<0000000087d23f34>] ksys_write+0xf9/0x200
        [<000000002c8dbc9d>] do_syscall_64+0x9f/0x4f0
        [<00000000678d8e9a>] entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    If __blk_rq_map_user_iov() is failed in blk_rq_map_user_iov(),
    the bio(s) which is allocated before this failing will leak. The
    refcount of the bio(s) is init to 1 and increased to 2 by calling
    bio_get(), but __blk_rq_unmap_user() only decrease it to 1, so
    the bio cannot be freed. Fix it by calling blk_rq_unmap_user().
    
    Reviewed-by: Bob Liu <bob.liu@oracle.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66aa3bf42c2c009a14c3cf0214b95a32c11abc9e
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Thu Dec 19 09:43:51 2019 +0100

    s390/dasd: fix memleak in path handling error case
    
    [ Upstream commit 00b39f698a4f1ee897227cace2e3937fc4412270 ]
    
    If for whatever reason the dasd_eckd_check_characteristics() function
    exits after at least some paths have their configuration data
    allocated those data is never freed again. In the error case the
    device->private pointer is set to NULL and dasd_eckd_uncheck_device()
    will exit without freeing the path data because of this NULL pointer.
    
    Fix by calling dasd_eckd_clear_conf_data() for error cases.
    
    Also use dasd_eckd_clear_conf_data() in dasd_eckd_uncheck_device()
    to avoid code duplication.
    
    Reported-by: Qian Cai <cai@lca.pw>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29753fc2f8d0b406f2435c53f5e49c959c381ac5
Author: Jan Höppner <hoeppner@linux.ibm.com>
Date:   Thu Dec 19 09:43:50 2019 +0100

    s390/dasd/cio: Interpret ccw_device_get_mdc return value correctly
    
    [ Upstream commit dd4b3c83b9efac10d48a94c61372119fc555a077 ]
    
    The max data count (mdc) is an unsigned 16-bit integer value as per AR
    documentation and is received via ccw_device_get_mdc() for a specific
    path mask from the CIO layer. The function itself also always returns a
    positive mdc value or 0 in case mdc isn't supported or couldn't be
    determined.
    
    Though, the comment for this function describes a negative return value
    to indicate failures.
    
    As a result, the DASD device driver interprets the return value of
    ccw_device_get_mdc() incorrectly. The error case is essentially a dead
    code path.
    
    To fix this behaviour, check explicitly for a return value of 0 and
    change the comment for ccw_device_get_mdc() accordingly.
    
    This fix merely enables the error code path in the DASD functions
    get_fcx_max_data() and verify_fcx_max_data(). The actual functionality
    stays the same and is still correct.
    
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Jan Höppner <hoeppner@linux.ibm.com>
    Acked-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Reviewed-by: Stefan Haberland <sth@linux.ibm.com>
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1cf84a64527c94c24e009e73bf2c38ce2361596
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Wed Dec 18 11:17:40 2019 +0100

    net: stmmac: RX buffer size must be 16 byte aligned
    
    [ Upstream commit 8d558f0294fe92e04af192e221d0d0f6a180ee7b ]
    
    We need to align the RX buffer size to at least 16 byte so that IP
    doesn't mis-behave. This is required by HW.
    
    Changes from v2:
    - Align UP and not DOWN (David)
    
    Fixes: 7ac6653a085b ("stmmac: Move the STMicroelectronics driver")
    Signed-off-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa6bf9433ef76485243428754e723e71642f4a6d
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Wed Dec 18 11:17:37 2019 +0100

    net: stmmac: Do not accept invalid MTU values
    
    [ Upstream commit eaf4fac478077d4ed57cbca2c044c4b58a96bd98 ]
    
    The maximum MTU value is determined by the maximum size of TX FIFO so
    that a full packet can fit in the FIFO. Add a check for this in the MTU
    change callback.
    
    Also check if provided and rounded MTU does not passes the maximum limit
    of 16K.
    
    Changes from v2:
    - Align MTU before checking if its valid
    
    Fixes: 7ac6653a085b ("stmmac: Move the STMicroelectronics driver")
    Signed-off-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61855d6805ae078ae6bba561e6e76715436d776d
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Fri Dec 6 10:54:23 2019 -0600

    fs: avoid softlockups in s_inodes iterators
    
    [ Upstream commit 04646aebd30b99f2cfa0182435a2ec252fcb16d0 ]
    
    Anything that walks all inodes on sb->s_inodes list without rescheduling
    risks softlockups.
    
    Previous efforts were made in 2 functions, see:
    
    c27d82f fs/drop_caches.c: avoid softlockups in drop_pagecache_sb()
    ac05fbb inode: don't softlockup when evicting inodes
    
    but there hasn't been an audit of all walkers, so do that now.  This
    also consistently moves the cond_resched() calls to the bottom of each
    loop in cases where it already exists.
    
    One loop remains: remove_dquot_ref(), because I'm not quite sure how
    to deal with that one w/o taking the i_lock.
    
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 396bf8fe4f679d8e457867b9ff60ee5fd6d99d42
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Dec 10 12:51:01 2019 +0200

    perf/x86/intel: Fix PT PMI handling
    
    [ Upstream commit 92ca7da4bdc24d63bb0bcd241c11441ddb63b80a ]
    
    Commit:
    
      ccbebba4c6bf ("perf/x86/intel/pt: Bypass PT vs. LBR exclusivity if the core supports it")
    
    skips the PT/LBR exclusivity check on CPUs where PT and LBRs coexist, but
    also inadvertently skips the active_events bump for PT in that case, which
    is a bug. If there aren't any hardware events at the same time as PT, the
    PMI handler will ignore PT PMIs, as active_events reads zero in that case,
    resulting in the "Uhhuh" spurious NMI warning and PT data loss.
    
    Fix this by always increasing active_events for PT events.
    
    Fixes: ccbebba4c6bf ("perf/x86/intel/pt: Bypass PT vs. LBR exclusivity if the core supports it")
    Reported-by: Vitaly Slobodskoy <vitaly.slobodskoy@intel.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Alexey Budankov <alexey.budankov@linux.intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Link: https://lkml.kernel.org/r/20191210105101.77210-1-alexander.shishkin@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16b9c5c49b4131a63f1e108b23ba2399c241fd87
Author: Thomas Hebb <tommyhebb@gmail.com>
Date:   Mon Dec 9 00:19:17 2019 -0800

    kconfig: don't crash on NULL expressions in expr_eq()
    
    [ Upstream commit 272a72103012862e3a24ea06635253ead0b6e808 ]
    
    NULL expressions are taken to always be true, as implemented by the
    expr_is_yes() macro and by several other functions in expr.c. As such,
    they ought to be valid inputs to expr_eq(), which compares two
    expressions.
    
    Signed-off-by: Thomas Hebb <tommyhebb@gmail.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dfde10dda0e0939ae4f29aff02327962f9ef9f3
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Wed Dec 11 23:16:00 2019 +0100

    regulator: rn5t618: fix module aliases
    
    [ Upstream commit 62a1923cc8fe095912e6213ed5de27abbf1de77e ]
    
    platform device aliases were missing, preventing
    autoloading of module.
    
    Fixes: 811b700630ff ("regulator: rn5t618: add driver for Ricoh RN5T618 regulators")
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Link: https://lore.kernel.org/r/20191211221600.29438-1-andreas@kemnade.info
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebfcc61fb719b08d63ed463d8ddea64570fb55ce
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Wed Dec 11 19:57:22 2019 +0800

    ASoC: wm8962: fix lambda value
    
    [ Upstream commit 556672d75ff486e0b6786056da624131679e0576 ]
    
    According to user manual, it is required that FLL_LAMBDA > 0
    in all cases (Integer and Franctional modes).
    
    Fixes: 9a76f1ff6e29 ("ASoC: Add initial WM8962 CODEC driver")
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/1576065442-19763-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7a6c3d2c372a592c975cda98a479287ebd169d1
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sun Dec 15 09:34:08 2019 -0600

    rfkill: Fix incorrect check to avoid NULL pointer dereference
    
    [ Upstream commit 6fc232db9e8cd50b9b83534de9cd91ace711b2d7 ]
    
    In rfkill_register, the struct rfkill pointer is first derefernced
    and then checked for NULL. This patch removes the BUG_ON and returns
    an error to the caller in case rfkill is NULL.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Link: https://lore.kernel.org/r/20191215153409.21696-1-pakki001@umn.edu
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f5cf943699a6331949ce4cb319de3e23b787a04
Author: Cristian Birsan <cristian.birsan@microchip.com>
Date:   Fri Dec 13 18:33:11 2019 +0200

    net: usb: lan78xx: Fix error message format specifier
    
    [ Upstream commit 858ce8ca62ea1530f2779d0e3f934b0176e663c3 ]
    
    Display the return code as decimal integer.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Signed-off-by: Cristian Birsan <cristian.birsan@microchip.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c914b0d4beb0af271049453d1e05ac278ebfabc
Author: Manish Chopra <manishc@marvell.com>
Date:   Wed Dec 11 09:59:56 2019 -0800

    bnx2x: Fix logic to get total no. of PFs per engine
    
    [ Upstream commit ee699f89bdbaa19c399804504241b5c531b48888 ]
    
    Driver doesn't calculate total number of PFs configured on a
    given engine correctly which messed up resources in the PFs
    loaded on that engine, leading driver to exceed configuration
    of resources (like vlan filters etc.) beyond the limit per
    engine, which ended up with asserts from the firmware.
    
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58ee0e0b74e7e4d8dadc3597d3d721a9cd252a88
Author: Manish Chopra <manishc@marvell.com>
Date:   Wed Dec 11 09:59:55 2019 -0800

    bnx2x: Do not handle requests from VFs after parity
    
    [ Upstream commit 7113f796bbbced2470cd6d7379d50d7a7a78bf34 ]
    
    Parity error from the hardware will cause PF to lose the state
    of their VFs due to PF's internal reload and hardware reset following
    the parity error. Restrict any configuration request from the VFs after
    the parity as it could cause unexpected hardware behavior, only way
    for VFs to recover would be to trigger FLR on VFs and reload them.
    
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bea1fe7e2f8edb86e66a56e2ebb74bc9bf3c83bd
Author: Mike Rapoport <rppt@linux.ibm.com>
Date:   Wed Dec 4 14:35:24 2019 +0200

    powerpc: Ensure that swiotlb buffer is allocated from low memory
    
    [ Upstream commit 8fabc623238e68b3ac63c0dd1657bf86c1fa33af ]
    
    Some powerpc platforms (e.g. 85xx) limit DMA-able memory way below 4G.
    If a system has more physical memory than this limit, the swiotlb
    buffer is not addressable because it is allocated from memblock using
    top-down mode.
    
    Force memblock to bottom-up mode before calling swiotlb_init() to
    ensure that the swiotlb buffer is DMA-able.
    
    Reported-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Signed-off-by: Mike Rapoport <rppt@linux.ibm.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191204123524.22919-1-rppt@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0822e783ef59454cefdcd8e32468fe92386fa94
Author: Daniel T. Lee <danieltimlee@gmail.com>
Date:   Thu Dec 5 17:01:14 2019 +0900

    samples: bpf: fix syscall_tp due to unused syscall
    
    [ Upstream commit fe3300897cbfd76c6cb825776e5ac0ca50a91ca4 ]
    
    Currently, open() is called from the user program and it calls the syscall
    'sys_openat', not the 'sys_open'. This leads to an error of the program
    of user side, due to the fact that the counter maps are zero since no
    function such 'sys_open' is called.
    
    This commit adds the kernel bpf program which are attached to the
    tracepoint 'sys_enter_openat' and 'sys_enter_openat'.
    
    Fixes: 1da236b6be963 ("bpf: add a test case for syscalls/sys_{enter|exit}_* tracepoints")
    Signed-off-by: Daniel T. Lee <danieltimlee@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b50ba34bdba823b4bd26bd6c0ca940f3e43d93e9
Author: Daniel T. Lee <danieltimlee@gmail.com>
Date:   Thu Dec 5 17:01:13 2019 +0900

    samples: bpf: Replace symbol compare of trace_event
    
    [ Upstream commit bba1b2a890253528c45aa66cf856f289a215bfbc ]
    
    Previously, when this sample is added, commit 1c47910ef8013
    ("samples/bpf: add perf_event+bpf example"), a symbol 'sys_read' and
    'sys_write' has been used without no prefixes. But currently there are
    no exact symbols with these under kallsyms and this leads to failure.
    
    This commit changes exact compare to substring compare to keep compatible
    with exact symbol or prefixed symbol.
    
    Fixes: 1c47910ef8013 ("samples/bpf: add perf_event+bpf example")
    Signed-off-by: Daniel T. Lee <danieltimlee@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20191205080114.19766-2-danieltimlee@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 328133b1c1ee44e52f583482a191c152fb693fba
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Thu Nov 14 11:39:48 2019 +0200

    ARM: dts: am437x-gp/epos-evm: fix panel compatible
    
    [ Upstream commit c6b16761c6908d3dc167a0a566578b4b0b972905 ]
    
    The LCD panel on AM4 GP EVMs and ePOS boards seems to be
    osd070t1718-19ts. The current dts files say osd057T0559-34ts. Possibly
    the panel has changed since the early EVMs, or there has been a mistake
    with the panel type.
    
    Update the DT files accordingly.
    
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec41394252a9c4f8d7f0224f16de2b6a29704e54
Author: Paul Chaignon <paul.chaignon@orange.com>
Date:   Mon Dec 9 19:52:52 2019 +0100

    bpf, mips: Limit to 33 tail calls
    
    [ Upstream commit e49e6f6db04e915dccb494ae10fa14888fea6f89 ]
    
    All BPF JIT compilers except RISC-V's and MIPS' enforce a 33-tail calls
    limit at runtime.  In addition, a test was recently added, in tailcalls2,
    to check this limit.
    
    This patch updates the tail call limit in MIPS' JIT compiler to allow
    33 tail calls.
    
    Fixes: b6bd53f9c4e8 ("MIPS: Add missing file for eBPF JIT.")
    Reported-by: Mahshid Khezri <khezri.mahshid@gmail.com>
    Signed-off-by: Paul Chaignon <paul.chaignon@orange.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/b8eb2caac1c25453c539248e56ca22f74b5316af.1575916815.git.paul.chaignon@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4aea1529970f3d50217913824fb93d10b98f0e2
Author: Stefan Wahren <wahrenst@gmx.net>
Date:   Sat Nov 30 13:31:13 2019 +0100

    ARM: dts: bcm283x: Fix critical trip point
    
    [ Upstream commit 30e647a764d446723a7e0fb08d209e0104f16173 ]
    
    During definition of the CPU thermal zone of BCM283x SoC family there
    was a misunderstanding of the meaning "criticial trip point" and the
    thermal throttling range of the VideoCore firmware. The latter one takes
    effect when the core temperature is at least 85 degree celsius or higher
    
    So the current critical trip point doesn't make sense, because the
    thermal shutdown appears before the firmware has a chance to throttle
    the ARM core(s).
    
    Fix these unwanted shutdowns by increasing the critical trip point
    to a value which shouldn't be reached with working thermal throttling.
    
    Fixes: 0fe4d2181cc4 ("ARM: dts: bcm283x: Add CPU thermal zone with 1 trip point")
    Signed-off-by: Stefan Wahren <wahrenst@gmx.net>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31764a701731a018ecbc2c62f950828b377c7b48
Author: Dragos Tarcatu <dragos_tarcatu@mentor.com>
Date:   Mon Dec 9 18:39:39 2019 -0600

    ASoC: topology: Check return value for soc_tplg_pcm_create()
    
    [ Upstream commit a3039aef52d9ffeb67e9211899cd3e8a2953a01f ]
    
    The return value of soc_tplg_pcm_create() is currently not checked
    in soc_tplg_pcm_elems_load(). If an error is to occur there, the
    topology ignores it and continues loading.
    
    Fix that by checking the status and rejecting the topology on error.
    
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Signed-off-by: Dragos Tarcatu <dragos_tarcatu@mentor.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20191210003939.15752-3-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c2cabe56e1186310af9b1bb25f6ad4a429052ce
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Fri Dec 6 15:55:00 2019 +0800

    spi: spi-cavium-thunderx: Add missing pci_release_regions()
    
    [ Upstream commit a841e2853e1afecc2ee692b8cc5bff606bc84e4c ]
    
    The driver forgets to call pci_release_regions() in probe failure
    and remove.
    Add the missed calls to fix it.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Link: https://lore.kernel.org/r/20191206075500.18525-1-hslester96@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84b33e7a2364bda397e9953782e7a6de8468aa90
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Dec 6 10:19:09 2019 -0800

    ARM: dts: Cygnus: Fix MDIO node address/size cells
    
    [ Upstream commit fac2c2da3596d77c343988bb0d41a8c533b2e73c ]
    
    The MDIO node on Cygnus had an reversed #address-cells and
     #size-cells properties, correct those.
    
    Fixes: 40c26d3af60a ("ARM: dts: Cygnus: Add the ethernet switch and ethernet PHY")
    Reported-by: Simon Horman <simon.horman@netronome.com>
    Reviewed-by: Ray Jui <ray.jui@broadcom.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4798a83039ce8dd2afbe7d9395796593991d1363
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Dec 6 21:55:20 2019 +0100

    netfilter: nf_tables: validate NFT_SET_ELEM_INTERVAL_END
    
    [ Upstream commit bffc124b6fe37d0ae9b428d104efb426403bb5c9 ]
    
    Only NFTA_SET_ELEM_KEY and NFTA_SET_ELEM_FLAGS make sense for elements
    whose NFT_SET_ELEM_INTERVAL_END flag is set on.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38061de32f9c9f943e5fe1685e8473ccad2d5098
Author: Phil Sutter <phil@nwl.cc>
Date:   Thu Dec 5 13:35:11 2019 +0100

    netfilter: uapi: Avoid undefined left-shift in xt_sctp.h
    
    [ Upstream commit 164166558aacea01b99c8c8ffb710d930405ba69 ]
    
    With 'bytes(__u32)' being 32, a left-shift of 31 may happen which is
    undefined for the signed 32-bit value 1. Avoid this by declaring 1 as
    unsigned.
    
    Signed-off-by: Phil Sutter <phil@nwl.cc>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 210670f32876544b6cb7613dc4d1c7b63dec03d0
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed Nov 27 15:56:40 2019 +0000

    ARM: vexpress: Set-up shared OPP table instead of individual for each CPU
    
    [ Upstream commit 2a76352ad2cc6b78e58f737714879cc860903802 ]
    
    Currently we add individual copy of same OPP table for each CPU within
    the cluster. This is redundant and doesn't reflect the reality.
    
    We can't use core cpumask to set policy->cpus in ve_spc_cpufreq_init()
    anymore as it gets called via cpuhp_cpufreq_online()->cpufreq_online()
    ->cpufreq_driver->init() and the cpumask gets updated upon CPU hotplug
    operations. It also may cause issues when the vexpress_spc_cpufreq
    driver is built as a module.
    
    Since ve_spc_clk_init is built-in device initcall, we should be able to
    use the same topology_core_cpumask to set the opp sharing cpumask via
    dev_pm_opp_set_sharing_cpus and use the same later in the driver via
    dev_pm_opp_get_sharing_cpus.
    
    Cc: Liviu Dudau <liviu.dudau@arm.com>
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Tested-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b631b675b39d084ef4066a5642597a585357f95
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Fri Dec 6 16:55:40 2019 +0000

    efi/gop: Fix memory leak in __gop_query32/64()
    
    [ Upstream commit ff397be685e410a59c34b21ce0c55d4daa466bb7 ]
    
    efi_graphics_output_protocol::query_mode() returns info in
    callee-allocated memory which must be freed by the caller, which
    we aren't doing.
    
    We don't actually need to call query_mode() in order to obtain the
    info for the current graphics mode, which is already there in
    gop->mode->info, so just access it directly in the setup_gop32/64()
    functions.
    
    Also nothing uses the size of the info structure, so don't update the
    passed-in size (which is the size of the gop_handle table in bytes)
    unnecessarily.
    
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Bhupesh Sharma <bhsharma@redhat.com>
    Cc: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191206165542.31469-5-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49277422c995e0d960381a6f67ebda03b548492e
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Fri Dec 6 16:55:39 2019 +0000

    efi/gop: Return EFI_SUCCESS if a usable GOP was found
    
    [ Upstream commit dbd89c303b4420f6cdb689fd398349fc83b059dd ]
    
    If we've found a usable instance of the Graphics Output Protocol
    (GOP) with a framebuffer, it is possible that one of the later EFI
    calls fails while checking if any support console output. In this
    case status may be an EFI error code even though we found a usable
    GOP.
    
    Fix this by explicitly return EFI_SUCCESS if a usable GOP has been
    located.
    
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Bhupesh Sharma <bhsharma@redhat.com>
    Cc: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191206165542.31469-4-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57bf13ee5910b446d45426f8d2ac136d2c19b39d
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Fri Dec 6 16:55:38 2019 +0000

    efi/gop: Return EFI_NOT_FOUND if there are no usable GOPs
    
    [ Upstream commit 6fc3cec30dfeee7d3c5db8154016aff9d65503c5 ]
    
    If we don't find a usable instance of the Graphics Output Protocol
    (GOP) because none of them have a framebuffer (i.e. they were all
    PIXEL_BLT_ONLY), but all the EFI calls succeeded, we will return
    EFI_SUCCESS even though we didn't find a usable GOP.
    
    Fix this by explicitly returning EFI_NOT_FOUND if no usable GOPs are
    found, allowing the caller to probe for UGA instead.
    
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Bhupesh Sharma <bhsharma@redhat.com>
    Cc: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191206165542.31469-3-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2f48252f119d8363475cca0544246e566fed31d
Author: Dave Young <dyoung@redhat.com>
Date:   Wed Dec 4 15:52:33 2019 +0800

    x86/efi: Update e820 with reserved EFI boot services data to fix kexec breakage
    
    [ Upstream commit af164898482817a1d487964b68f3c21bae7a1beb ]
    
    Michael Weiser reported that he got this error during a kexec rebooting:
    
      esrt: Unsupported ESRT version 2904149718861218184.
    
    The ESRT memory stays in EFI boot services data, and it was reserved
    in kernel via efi_mem_reserve().  The initial purpose of the reservation
    is to reuse the EFI boot services data across kexec reboot. For example
    the BGRT image data and some ESRT memory like Michael reported.
    
    But although the memory is reserved it is not updated in the X86 E820 table,
    and kexec_file_load() iterates system RAM in the IO resource list to find places
    for kernel, initramfs and other stuff. In Michael's case the kexec loaded
    initramfs overwrote the ESRT memory and then the failure happened.
    
    Since kexec_file_load() depends on the E820 table being updated, just fix this
    by updating the reserved EFI boot services memory as reserved type in E820.
    
    Originally any memory descriptors with EFI_MEMORY_RUNTIME attribute are
    bypassed in the reservation code path because they are assumed as reserved.
    
    But the reservation is still needed for multiple kexec reboots,
    and it is the only possible case we come here thus just drop the code
    chunk, then everything works without side effects.
    
    On my machine the ESRT memory sits in an EFI runtime data range, it does
    not trigger the problem, but I successfully tested with BGRT instead.
    both kexec_load() and kexec_file_load() work and kdump works as well.
    
    [ mingo: Edited the changelog. ]
    
    Reported-by: Michael Weiser <michael@weiser.dinsnail.net>
    Tested-by: Michael Weiser <michael@weiser.dinsnail.net>
    Signed-off-by: Dave Young <dyoung@redhat.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kexec@lists.infradead.org
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191204075233.GA10520@dhcp-128-65.nay.redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9606b11726ecfb9724baf695cfa49704d370b2fb
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Fri Nov 15 11:36:09 2019 +0000

    libtraceevent: Fix lib installation with O=
    
    [ Upstream commit 587db8ebdac2c5eb3a8851e16b26f2e2711ab797 ]
    
    When we use 'O=' with make to build libtraceevent in a separate folder
    it fails to install libtraceevent.a and libtraceevent.so.1.1.0 with the
    error:
    
      INSTALL  /home/sudip/linux/obj-trace/libtraceevent.a
      INSTALL  /home/sudip/linux/obj-trace/libtraceevent.so.1.1.0
    
      cp: cannot stat 'libtraceevent.a': No such file or directory
      Makefile:225: recipe for target 'install_lib' failed
      make: *** [install_lib] Error 1
    
    I used the command:
    
      make O=../../../obj-trace DESTDIR=~/test prefix==/usr  install
    
    It turns out libtraceevent Makefile, even though it builds in a separate
    folder, searches for libtraceevent.a and libtraceevent.so.1.1.0 in its
    source folder.
    
    So, add the 'OUTPUT' prefix to the source path so that 'make' looks for
    the files in the correct place.
    
    Signed-off-by: Sudipm Mukherjee <sudipm.mukherjee@gmail.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: linux-trace-devel@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20191115113610.21493-1-sudipm.mukherjee@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec3bb975c6013aa2f5e8a96a0bee2c8d39618e89
Author: qize wang <wangqize888888888@gmail.com>
Date:   Fri Nov 29 18:10:54 2019 +0800

    mwifiex: Fix heap overflow in mmwifiex_process_tdls_action_frame()
    
    [ Upstream commit 1e58252e334dc3f3756f424a157d1b7484464c40 ]
    
    mwifiex_process_tdls_action_frame() without checking
    the incoming tdls infomation element's vality before use it,
    this may cause multi heap buffer overflows.
    
    Fix them by putting vality check before use it.
    
    IE is TLV struct, but ht_cap and  ht_oper aren’t TLV struct.
    the origin marvell driver code is wrong:
    
    memcpy(&sta_ptr->tdls_cap.ht_oper, pos,....
    memcpy((u8 *)&sta_ptr->tdls_cap.ht_capb, pos,...
    
    Fix the bug by changing pos(the address of IE) to
    pos+2 ( the address of IE value ).
    
    Signed-off-by: qize wang <wangqize888888888@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d74adafded9ceb57fca7012ae1e24d512dd8dcb6
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Nov 15 12:39:23 2019 +0100

    netfilter: ctnetlink: netns exit must wait for callbacks
    
    [ Upstream commit 18a110b022a5c02e7dc9f6109d0bd93e58ac6ebb ]
    
    Curtis Taylor and Jon Maxwell reported and debugged a crash on 3.10
    based kernel.
    
    Crash occurs in ctnetlink_conntrack_events because net->nfnl socket is
    NULL.  The nfnl socket was set to NULL by netns destruction running on
    another cpu.
    
    The exiting network namespace calls the relevant destructors in the
    following order:
    
    1. ctnetlink_net_exit_batch
    
    This nulls out the event callback pointer in struct netns.
    
    2. nfnetlink_net_exit_batch
    
    This nulls net->nfnl socket and frees it.
    
    3. nf_conntrack_cleanup_net_list
    
    This removes all remaining conntrack entries.
    
    This is order is correct. The only explanation for the crash so ar is:
    
    cpu1: conntrack is dying, eviction occurs:
     -> nf_ct_delete()
       -> nf_conntrack_event_report \
         -> nf_conntrack_eventmask_report
           -> notify->fcn() (== ctnetlink_conntrack_events).
    
    cpu1: a. fetches rcu protected pointer to obtain ctnetlink event callback.
          b. gets interrupted.
     cpu2: runs netns exit handlers:
         a runs ctnetlink destructor, event cb pointer set to NULL.
         b runs nfnetlink destructor, nfnl socket is closed and set to NULL.
    cpu1: c. resumes and trips over NULL net->nfnl.
    
    Problem appears to be that ctnetlink_net_exit_batch only prevents future
    callers of nf_conntrack_eventmask_report() from obtaining the callback.
    It doesn't wait of other cpus that might have already obtained the
    callbacks address.
    
    I don't see anything in upstream kernels that would prevent similar
    crash: We need to wait for all cpus to have exited the event callback.
    
    Fixes: 9592a5c01e79dbc59eb56fa ("netfilter: ctnetlink: netns support")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09226e5c38639437565af01e6009a9286a351d04
Author: Marco Elver <elver@google.com>
Date:   Wed Nov 20 16:57:15 2019 +0100

    locking/spinlock/debug: Fix various data races
    
    [ Upstream commit 1a365e822372ba24c9da0822bc583894f6f3d821 ]
    
    This fixes various data races in spinlock_debug. By testing with KCSAN,
    it is observable that the console gets spammed with data races reports,
    suggesting these are extremely frequent.
    
    Example data race report:
    
      read to 0xffff8ab24f403c48 of 4 bytes by task 221 on cpu 2:
       debug_spin_lock_before kernel/locking/spinlock_debug.c:85 [inline]
       do_raw_spin_lock+0x9b/0x210 kernel/locking/spinlock_debug.c:112
       __raw_spin_lock include/linux/spinlock_api_smp.h:143 [inline]
       _raw_spin_lock+0x39/0x40 kernel/locking/spinlock.c:151
       spin_lock include/linux/spinlock.h:338 [inline]
       get_partial_node.isra.0.part.0+0x32/0x2f0 mm/slub.c:1873
       get_partial_node mm/slub.c:1870 [inline]
      <snip>
    
      write to 0xffff8ab24f403c48 of 4 bytes by task 167 on cpu 3:
       debug_spin_unlock kernel/locking/spinlock_debug.c:103 [inline]
       do_raw_spin_unlock+0xc9/0x1a0 kernel/locking/spinlock_debug.c:138
       __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:159 [inline]
       _raw_spin_unlock_irqrestore+0x2d/0x50 kernel/locking/spinlock.c:191
       spin_unlock_irqrestore include/linux/spinlock.h:393 [inline]
       free_debug_processing+0x1b3/0x210 mm/slub.c:1214
       __slab_free+0x292/0x400 mm/slub.c:2864
      <snip>
    
    As a side-effect, with KCSAN, this eventually locks up the console, most
    likely due to deadlock, e.g. .. -> printk lock -> spinlock_debug ->
    KCSAN detects data race -> kcsan_print_report() -> printk lock ->
    deadlock.
    
    This fix will 1) avoid the data races, and 2) allow using lock debugging
    together with KCSAN.
    
    Reported-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Marco Elver <elver@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paul E. McKenney <paulmck@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Link: https://lkml.kernel.org/r/20191120155715.28089-1-elver@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0e24d683636a9193a2adcc928b78ba74bd46f1a
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Mon Oct 21 16:20:58 2019 +0200

    USB: dummy-hcd: increase max number of devices to 32
    
    commit 8442b02bf3c6770e0d7e7ea17be36c30e95987b6 upstream.
    
    When fuzzing the USB subsystem with syzkaller, we currently use 8 testing
    processes within one VM. To isolate testing processes from one another it
    is desirable to assign a dedicated USB bus to each of those, which means
    we need at least 8 Dummy UDC/HCD devices.
    
    This patch increases the maximum number of Dummy UDC/HCD devices to 32
    (more than 8 in case we need more of them in the future).
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Link: https://lore.kernel.org/r/665578f904484069bb6100fb20283b22a046ad9b.1571667489.git.andreyknvl@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65c0bbac0a29de4356e814a0fed838cb4484364c
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Mon Oct 21 16:20:59 2019 +0200

    USB: dummy-hcd: use usb_urb_dir_in instead of usb_pipein
    
    commit 6dabeb891c001c592645df2f477fed9f5d959987 upstream.
    
    Commit fea3409112a9 ("USB: add direction bit to urb->transfer_flags") has
    added a usb_urb_dir_in() helper function that can be used to determine
    the direction of the URB. With that patch USB_DIR_IN control requests with
    wLength == 0 are considered out requests by real USB HCDs. This patch
    changes dummy-hcd to use the usb_urb_dir_in() helper to match that
    behavior.
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Link: https://lore.kernel.org/r/4ae9e68ebca02f08a93ac61fe065057c9a01f0a8.1571667489.git.andreyknvl@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
