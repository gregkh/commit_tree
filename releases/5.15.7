commit 4e8c680af6d51ba9315e31bd4f7599e080561a2d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 8 09:04:57 2021 +0100

    Linux 5.15.7
    
    Link: https://lore.kernel.org/r/20211206145610.172203682@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Ronald Warsow <rwarsow@gmx.de>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ded93ae46ce883095c344ac098e95635512fdee
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Tue Nov 23 08:36:18 2021 +0000

    ipmi: msghandler: Make symbol 'remove_work_wq' static
    
    commit 5a3ba99b62d8486de0316334e72ac620d4b94fdd upstream.
    
    The sparse tool complains as follows:
    
    drivers/char/ipmi/ipmi_msghandler.c:194:25: warning:
     symbol 'remove_work_wq' was not declared. Should it be static?
    
    This symbol is not used outside of ipmi_msghandler.c, so
    marks it static.
    
    Fixes: 1d49eb91e86e ("ipmi: Move remove_work to dedicated workqueue")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Message-Id: <20211123083618.2366808-1-weiyongjun1@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 888fc81107cacd2a4f681bac7bb785cef868214f
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Nov 17 11:05:11 2021 +0100

    serial: liteuart: fix minor-number leak on probe errors
    
    commit dd5e90b16cca8a697cbe17b72e2a5f49291cabb2 upstream.
    
    Make sure to release the allocated minor number before returning on
    probe errors.
    
    Fixes: 1da81e5562fa ("drivers/tty/serial: add LiteUART driver")
    Cc: stable@vger.kernel.org      # 5.11
    Cc: Filip Kokosinski <fkokosinski@antmicro.com>
    Cc: Mateusz Holenko <mholenko@antmicro.com>
    Reviewed-by: Stafford Horne <shorne@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211117100512.5058-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 602824cf9aa9db8830ffe5cfb2cd54365cada4fe
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Nov 17 11:05:10 2021 +0100

    serial: liteuart: fix use-after-free and memleak on unbind
    
    commit 05f929b395dec8957b636ff14e66b277ed022ed9 upstream.
    
    Deregister the port when unbinding the driver to prevent it from being
    used after releasing the driver data and leaking memory allocated by
    serial core.
    
    Fixes: 1da81e5562fa ("drivers/tty/serial: add LiteUART driver")
    Cc: stable@vger.kernel.org      # 5.11
    Cc: Filip Kokosinski <fkokosinski@antmicro.com>
    Cc: Mateusz Holenko <mholenko@antmicro.com>
    Reviewed-by: Stafford Horne <shorne@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211117100512.5058-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 189c99c629bbf85916c02c153f904649cc0a9d7f
Author: Ilia Sergachev <silia@ethz.ch>
Date:   Mon Nov 15 22:49:44 2021 +0100

    serial: liteuart: Fix NULL pointer dereference in ->remove()
    
    commit 0f55f89d98c8b3e12b4f55f71c127a173e29557c upstream.
    
    drvdata has to be set in _probe() - otherwise platform_get_drvdata()
    causes null pointer dereference BUG in _remove().
    
    Fixes: 1da81e5562fa ("drivers/tty/serial: add LiteUART driver")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Ilia Sergachev <silia@ethz.ch>
    Link: https://lore.kernel.org/r/20211115224944.23f8c12b@dtkw
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54b4cfe4c99944751c614dbbd20dc86efa13ef7e
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Nov 22 16:58:24 2021 +0100

    serial: 8250: Fix RTS modem control while in rs485 mode
    
    commit f85e04503f369b3f2be28c83fc48b74e19936ebc upstream.
    
    Commit f45709df7731 ("serial: 8250: Don't touch RTS modem control while
    in rs485 mode") sought to prevent user space from interfering with rs485
    communication by ignoring a TIOCMSET ioctl() which changes RTS polarity.
    
    It did so in serial8250_do_set_mctrl(), which turns out to be too deep
    in the call stack:  When a uart_port is opened, RTS polarity is set by
    the rs485-aware function uart_port_dtr_rts().  It calls down to
    serial8250_do_set_mctrl() and that particular RTS polarity change should
    *not* be ignored.
    
    The user-visible result is that on 8250_omap ports which use rs485 with
    inverse polarity (RTS bit in MCR register is 1 to receive, 0 to send),
    a newly opened port initially sets up RTS for sending instead of
    receiving.  That's because omap_8250_startup() sets the cached value
    up->mcr to 0 and omap_8250_restore_regs() subsequently writes it to the
    MCR register.  Due to the commit, serial8250_do_set_mctrl() preserves
    that incorrect register value:
    
    do_sys_openat2
      do_filp_open
        path_openat
          vfs_open
            do_dentry_open
              chrdev_open
                tty_open
                  uart_open
                    tty_port_open
                      uart_port_activate
                        uart_startup
                          uart_port_startup
                            serial8250_startup
                              omap_8250_startup # up->mcr = 0
                            uart_change_speed
                              serial8250_set_termios
                                omap_8250_set_termios
                                  omap_8250_restore_regs
                                    serial8250_out_MCR # up->mcr written
                      tty_port_block_til_ready
                        uart_dtr_rts
                          uart_port_dtr_rts
                            serial8250_set_mctrl
                              omap8250_set_mctrl
                                serial8250_do_set_mctrl # mcr[1] = 1 ignored
    
    Fix by intercepting RTS changes from user space in uart_tiocmset()
    instead.
    
    Link: https://lore.kernel.org/linux-serial/20211027111644.1996921-1-baocheng.su@siemens.com/
    Fixes: f45709df7731 ("serial: 8250: Don't touch RTS modem control while in rs485 mode")
    Cc: Chao Zeng <chao.zeng@siemens.com>
    Cc: stable@vger.kernel.org # v5.7+
    Reported-by: Su Bao Cheng <baocheng.su@siemens.com>
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Tested-by: Su Bao Cheng <baocheng.su@siemens.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://lore.kernel.org/r/21170e622a1aaf842a50b32146008b5374b3dd1d.1637596432.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6e196d931d0d26bf42b0a8a5efe83bdf3dd14b4
Author: Jay Dolan <jay.dolan@accesio.com>
Date:   Mon Nov 22 14:06:04 2021 +0200

    serial: 8250_pci: rewrite pericom_do_set_divisor()
    
    commit bb1201d4b38ec67bd9a871cf86b0cc10f28b15b5 upstream.
    
    Have pericom_do_set_divisor() use the uartclk instead of a hard coded
    value to work with different speed crystals. Tested with 14.7456 and 24
    MHz crystals.
    
    Have pericom_do_set_divisor() always calculate the divisor rather than
    call serial8250_do_set_divisor() for rates below baud_base.
    
    Do not write registers or call serial8250_do_set_divisor() if valid
    divisors could not be found.
    
    Fixes: 6bf4e42f1d19 ("serial: 8250: Add support for higher baud rates to Pericom chips")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Jay Dolan <jay.dolan@accesio.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20211122120604.3909-3-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1718ff2e3dad0babcc83e01c4887f7c8bb984aee
Author: Jay Dolan <jay.dolan@accesio.com>
Date:   Mon Nov 22 14:06:03 2021 +0200

    serial: 8250_pci: Fix ACCES entries in pci_serial_quirks array
    
    commit c525c5d2437f93520388920baac6d9340c65d239 upstream.
    
    Fix error in table for PCI_DEVICE_ID_ACCESIO_PCIE_ICM_4S that caused it
    and PCI_DEVICE_ID_ACCESIO_PCIE_ICM232_4 to be missing their fourth port.
    
    Fixes: 78d3820b9bd3 ("serial: 8250_pci: Have ACCES cards that use the four port Pericom PI7C9X7954 chip use the pci_pericom_setup()")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Jay Dolan <jay.dolan@accesio.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20211122120604.3909-2-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64e491c1634b73d3bddc081d08620bdc92ab2c12
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Nov 8 09:54:31 2021 +0100

    serial: core: fix transmit-buffer reset and memleak
    
    commit 00de977f9e0aa9760d9a79d1e41ff780f74e3424 upstream.
    
    Commit 761ed4a94582 ("tty: serial_core: convert uart_close to use
    tty_port_close") converted serial core to use tty_port_close() but
    failed to notice that the transmit buffer still needs to be freed on
    final close.
    
    Not freeing the transmit buffer means that the buffer is no longer
    cleared on next open so that any ioctl() waiting for the buffer to drain
    might wait indefinitely (e.g. on termios changes) or that stale data can
    end up being transmitted in case tx is restarted.
    
    Furthermore, the buffer of any port that has been opened would leak on
    driver unbind.
    
    Note that the port lock is held when clearing the buffer pointer due to
    the ldisc race worked around by commit a5ba1d95e46e ("uart: fix race
    between uart_put_char() and uart_shutdown()").
    
    Also note that the tty-port shutdown() callback is not called for
    console ports so it is not strictly necessary to free the buffer page
    after releasing the lock (cf. d72402145ace ("tty/serial: do not free
    trasnmit buffer page under port lock")).
    
    Link: https://lore.kernel.org/r/319321886d97c456203d5c6a576a5480d07c3478.1635781688.git.baruch@tkos.co.il
    Fixes: 761ed4a94582 ("tty: serial_core: convert uart_close to use tty_port_close")
    Cc: stable@vger.kernel.org      # 4.9
    Cc: Rob Herring <robh@kernel.org>
    Reported-by: Baruch Siach <baruch@tkos.co.il>
    Tested-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211108085431.12637-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2341178187a73a157c596647d158c7a9ded51f0
Author: Patrik John <patrik.john@u-blox.com>
Date:   Tue Nov 23 14:27:38 2021 +0100

    serial: tegra: Change lower tolerance baud rate limit for tegra20 and tegra30
    
    commit b40de7469ef135161c80af0e8c462298cc5dac00 upstream.
    
    The current implementation uses 0 as lower limit for the baud rate
    tolerance for tegra20 and tegra30 chips which causes isses on UART
    initialization as soon as baud rate clock is lower than required even
    when within the standard UART tolerance of +/- 4%.
    
    This fix aligns the implementation with the initial commit description
    of +/- 4% tolerance for tegra chips other than tegra186 and
    tegra194.
    
    Fixes: d781ec21bae6 ("serial: tegra: report clk rate errors")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Patrik John <patrik.john@u-blox.com>
    Link: https://lore.kernel.org/r/sig.19614244f8.20211123132737.88341-1-patrik.john@u-blox.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea3628ce85ffcbdacb74170cbca6e829b7e1e0cf
Author: Pierre Gondois <Pierre.Gondois@arm.com>
Date:   Tue Nov 9 17:22:48 2021 +0000

    serial: pl011: Add ACPI SBSA UART match id
    
    commit ac442a077acf9a6bf1db4320ec0c3f303be092b3 upstream.
    
    The document 'ACPI for Arm Components 1.0' defines the following
    _HID mappings:
    -'Prime cell UART (PL011)': ARMH0011
    -'SBSA UART': ARMHB000
    
    Use the sbsa-uart driver when a device is described with
    the 'ARMHB000' _HID.
    
    Note:
    PL011 devices currently use the sbsa-uart driver instead of the
    uart-pl011 driver. Indeed, PL011 devices are not bound to a clock
    in ACPI. It is not possible to change their baudrate.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pierre Gondois <Pierre.Gondois@arm.com>
    Link: https://lore.kernel.org/r/20211109172248.19061-1-Pierre.Gondois@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87eb31a7d1e70362696ce07a2f8f3e0aca84a43c
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Nov 13 13:10:50 2021 +0100

    tty: serial: msm_serial: Deactivate RX DMA for polling support
    
    commit 7492ffc90fa126afb67d4392d56cb4134780194a upstream.
    
    The CONSOLE_POLLING mode is used for tools like k(g)db. In this kind of
    setup, it is often sharing a serial device with the normal system console.
    This is usually no problem because the polling helpers can consume input
    values directly (when in kgdb context) and the normal Linux handlers can
    only consume new input values after kgdb switched back.
    
    This is not true anymore when RX DMA is enabled for UARTDM controllers.
    Single input values can no longer be received correctly. Instead following
    seems to happen:
    
    * on 1. input, some old input is read (continuously)
    * on 2. input, two old inputs are read (continuously)
    * on 3. input, three old input values are read (continuously)
    * on 4. input, 4 previous inputs are received
    
    This repeats then for each group of 4 input values.
    
    This behavior changes slightly depending on what state the controller was
    when the first input was received. But this makes working with kgdb
    basically impossible because control messages are always corrupted when
    kgdboc tries to parse them.
    
    RX DMA should therefore be off when CONSOLE_POLLING is enabled to avoid
    these kind of problems. No such problem was noticed for TX DMA.
    
    Fixes: 99693945013a ("tty: serial: msm: Add RX DMA support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Link: https://lore.kernel.org/r/20211113121050.7266-1-sven@narfation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 498ddcffe2ff47b6e6d5d7c1b93da414ed00d721
Author: Joerg Roedel <jroedel@suse.de>
Date:   Thu Dec 2 16:32:26 2021 +0100

    x86/64/mm: Map all kernel memory into trampoline_pgd
    
    commit 51523ed1c26758de1af7e58730a656875f72f783 upstream.
    
    The trampoline_pgd only maps the 0xfffffff000000000-0xffffffffffffffff
    range of kernel memory (with 4-level paging). This range contains the
    kernel's text+data+bss mappings and the module mapping space but not the
    direct mapping and the vmalloc area.
    
    This is enough to get the application processors out of real-mode, but
    for code that switches back to real-mode the trampoline_pgd is missing
    important parts of the address space. For example, consider this code
    from arch/x86/kernel/reboot.c, function machine_real_restart() for a
    64-bit kernel:
    
      #ifdef CONFIG_X86_32
            load_cr3(initial_page_table);
      #else
            write_cr3(real_mode_header->trampoline_pgd);
    
            /* Exiting long mode will fail if CR4.PCIDE is set. */
            if (boot_cpu_has(X86_FEATURE_PCID))
                    cr4_clear_bits(X86_CR4_PCIDE);
      #endif
    
            /* Jump to the identity-mapped low memory code */
      #ifdef CONFIG_X86_32
            asm volatile("jmpl *%0" : :
                         "rm" (real_mode_header->machine_real_restart_asm),
                         "a" (type));
      #else
            asm volatile("ljmpl *%0" : :
                         "m" (real_mode_header->machine_real_restart_asm),
                         "D" (type));
      #endif
    
    The code switches to the trampoline_pgd, which unmaps the direct mapping
    and also the kernel stack. The call to cr4_clear_bits() will find no
    stack and crash the machine. The real_mode_header pointer below points
    into the direct mapping, and dereferencing it also causes a crash.
    
    The reason this does not crash always is only that kernel mappings are
    global and the CR3 switch does not flush those mappings. But if theses
    mappings are not in the TLB already, the above code will crash before it
    can jump to the real-mode stub.
    
    Extend the trampoline_pgd to contain all kernel mappings to prevent
    these crashes and to make code which runs on this page-table more
    robust.
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20211202153226.22946-5-joro@8bytes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e0dd9cceac7d79bffd8332015c559f1f909640f
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Nov 17 10:37:51 2021 +0800

    x86/tsc: Disable clocksource watchdog for TSC on qualified platorms
    
    commit b50db7095fe002fa3e16605546cba66bf1b68a3e upstream.
    
    There are cases that the TSC clocksource is wrongly judged as unstable by
    the clocksource watchdog mechanism which tries to validate the TSC against
    HPET, PM_TIMER or jiffies. While there is hardly a general reliable way to
    check the validity of a watchdog, Thomas Gleixner proposed [1]:
    
    "I'm inclined to lift that requirement when the CPU has:
    
        1) X86_FEATURE_CONSTANT_TSC
        2) X86_FEATURE_NONSTOP_TSC
        3) X86_FEATURE_NONSTOP_TSC_S3
        4) X86_FEATURE_TSC_ADJUST
        5) At max. 4 sockets
    
     After two decades of horrors we're finally at a point where TSC seems
     to be halfway reliable and less abused by BIOS tinkerers. TSC_ADJUST
     was really key as we can now detect even small modifications reliably
     and the important point is that we can cure them as well (not pretty
     but better than all other options)."
    
    As feature #3 X86_FEATURE_NONSTOP_TSC_S3 only exists on several generations
    of Atom processorz, and is always coupled with X86_FEATURE_CONSTANT_TSC
    and X86_FEATURE_NONSTOP_TSC, skip checking it, and also be more defensive
    to use maximal 2 sockets.
    
    The check is done inside tsc_init() before registering 'tsc-early' and
    'tsc' clocksources, as there were cases that both of them had been
    wrongly judged as unreliable.
    
    For more background of tsc/watchdog, there is a good summary in [2]
    
    [tglx} Update vs. jiffies:
    
      On systems where the only remaining clocksource aside of TSC is jiffies
      there is no way to make this work because that creates a circular
      dependency. Jiffies accuracy depends on not missing a periodic timer
      interrupt, which is not guaranteed. That could be detected by TSC, but as
      TSC is not trusted this cannot be compensated. The consequence is a
      circulus vitiosus which results in shutting down TSC and falling back to
      the jiffies clocksource which is even more unreliable.
    
    [1]. https://lore.kernel.org/lkml/87eekfk8bd.fsf@nanos.tec.linutronix.de/
    [2]. https://lore.kernel.org/lkml/87a6pimt1f.ffs@nanos.tec.linutronix.de/
    
    [ tglx: Refine comment and amend changelog ]
    
    Fixes: 6e3cd95234dc ("x86/hpet: Use another crystalball to evaluate HPET usability")
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211117023751.24190-2-feng.tang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53df08733bc409cd436e85b6055340a4ece937a9
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Nov 17 10:37:50 2021 +0800

    x86/tsc: Add a timer to make sure TSC_adjust is always checked
    
    commit c7719e79347803b8e3b6b50da8c6db410a3012b5 upstream.
    
    The TSC_ADJUST register is checked every time a CPU enters idle state, but
    Thomas Gleixner mentioned there is still a caveat that a system won't enter
    idle [1], either because it's too busy or configured purposely to not enter
    idle.
    
    Setup a periodic timer (every 10 minutes) to make sure the check is
    happening on a regular base.
    
    [1] https://lore.kernel.org/lkml/875z286xtk.fsf@nanos.tec.linutronix.de/
    
    Fixes: 6e3cd95234dc ("x86/hpet: Use another crystalball to evaluate HPET usability")
    Requested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211117023751.24190-1-feng.tang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d94bc8e335cb33918e52efdbe192c36707bfa24
Author: Zhou Qingyang <zhou1615@umn.edu>
Date:   Wed Dec 1 01:27:00 2021 +0800

    usb: cdnsp: Fix a NULL pointer dereference in cdnsp_endpoint_init()
    
    commit 37307f7020ab38dde0892a578249bf63d00bca64 upstream.
    
    In cdnsp_endpoint_init(), cdnsp_ring_alloc() is assigned to pep->ring
    and there is a dereference of it in cdnsp_endpoint_init(), which could
    lead to a NULL pointer dereference on failure of cdnsp_ring_alloc().
    
    Fix this bug by adding a check of pep->ring.
    
    This bug was found by a static analyzer. The analysis employs
    differential checking to identify inconsistent security operations
    (e.g., checks or kfrees) between two code paths and confirms that the
    inconsistent operations are not recovered in the current function or
    the callers, so they constitute bugs.
    
    Note that, as a bug found by static analysis, it can be a false
    positive or hard to trigger. Multiple researchers have cross-reviewed
    the bug.
    
    Builds with CONFIG_USB_CDNSP_GADGET=y show no new warnings,
    and our static analyzer no longer warns about this code.
    
    Fixes: 3d82904559f4 ("usb: cdnsp: cdns3 Add main part of Cadence USBSSP DRD Driver")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Pawel Laszczak <pawell@cadence.com>
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Signed-off-by: Zhou Qingyang <zhou1615@umn.edu>
    Link: https://lore.kernel.org/r/20211130172700.206650-1-zhou1615@umn.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4f77594cc3003e69cb80feba85e99f82cd9be2e
Author: Frank Li <Frank.Li@nxp.com>
Date:   Tue Nov 30 09:42:39 2021 -0600

    usb: cdns3: gadget: fix new urb never complete if ep cancel previous requests
    
    commit 387c2b6ba197c6df28e75359f7d892f7c8dec204 upstream.
    
    This issue was found at android12 MTP.
    1. MTP submit many out urb request.
    2. Cancel left requests (>20) when enough data get from host
    3. Send ACK by IN endpoint.
    4. MTP submit new out urb request.
    5. 4's urb never complete.
    
    TRACE LOG:
    
    MtpServer-2157    [000] d..3  1287.150391: cdns3_ep_dequeue: ep1out: req: 00000000299e6836, req buff 000000009df42287, length: 0/16384 zsi, status: -115, trb: [start:87, end:87: virt addr 0x80004000ffd50420], flags:1 SID: 0
    MtpServer-2157    [000] d..3  1287.150410: cdns3_gadget_giveback: ep1out: req: 00000000299e6836, req buff 000000009df42287, length: 0/16384 zsi, status: -104, trb: [start:87, end:87: virt addr 0x80004000ffd50420], flags:0 SID: 0
    MtpServer-2157    [000] d..3  1287.150433: cdns3_ep_dequeue: ep1out: req: 0000000080b7bde6, req buff 000000009ed5c556, length: 0/16384 zsi, status: -115, trb: [start:88, end:88: virt addr 0x80004000ffd5042c], flags:1 SID: 0
    MtpServer-2157    [000] d..3  1287.150446: cdns3_gadget_giveback: ep1out: req: 0000000080b7bde6, req buff 000000009ed5c556, length: 0/16384 zsi, status: -104, trb: [start:88, end:88: virt addr 0x80004000ffd5042c], flags:0 SID: 0
            ....
    MtpServer-2157    [000] d..1  1293.630410: cdns3_alloc_request: ep1out: req: 00000000afbccb7d, req buff 0000000000000000, length: 0/0 zsi, status: 0, trb: [start:0, end:0: virt addr (null)], flags:0 SID: 0
    MtpServer-2157    [000] d..2  1293.630421: cdns3_ep_queue: ep1out: req: 00000000afbccb7d, req buff 00000000871caf90, length: 0/512 zsi, status: -115, trb: [start:0, end:0: virt addr (null)], flags:0 SID: 0
    MtpServer-2157    [000] d..2  1293.630445: cdns3_wa1: WA1: ep1out set guard
    MtpServer-2157    [000] d..2  1293.630450: cdns3_wa1: WA1: ep1out restore cycle bit
    MtpServer-2157    [000] d..2  1293.630453: cdns3_prepare_trb: ep1out: trb 000000007317b3ee, dma buf: 0xffd5bc00, size: 512, burst: 128 ctrl: 0x00000424 (C=0, T=0, ISP, IOC, Normal) SID:0 LAST_SID:0
    MtpServer-2157    [000] d..2  1293.630460: cdns3_doorbell_epx: ep1out, ep_trbaddr ffd50414
            ....
    irq/241-5b13000-2154    [000] d..1  1293.680849: cdns3_epx_irq: IRQ for ep1out: 01000408 ISP , ep_traddr: ffd508ac ep_last_sid: 00000000 use_streams: 0
    irq/241-5b13000-2154    [000] d..1  1293.680858: cdns3_complete_trb: ep1out: trb 0000000021a11b54, dma buf: 0xffd50420, size: 16384, burst: 128 ctrl: 0x00001810 (C=0, T=0, CHAIN, LINK) SID:0 LAST_SID:0
    irq/241-5b13000-2154    [000] d..1  1293.680865: cdns3_request_handled: Req: 00000000afbccb7d not handled, DMA pos: 185, ep deq: 88, ep enq: 185, start trb: 184, end trb: 184
    
    Actually DMA pos already bigger than previous submit request afbccb7d's TRB (184-184). The reason of (not handled) is that deq position is wrong.
    
    The TRB link is below when irq happen.
    
            DEQ LINK LINK LINK LINK LINK .... TRB(afbccb7d):START  DMA(EP_TRADDR).
    
    Original code check LINK TRB, but DEQ just move one step.
    
            LINK DEQ LINK LINK LINK LINK .... TRB(afbccb7d):START  DMA(EP_TRADDR).
    
    This patch skip all LINK TRB and sync DEQ to trb's start.
    
            LINK LINK LINK LINK LINK .... DEQ = TRB(afbccb7d):START  DMA(EP_TRADDR).
    
    Acked-by: Peter Chen <peter.chen@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Signed-off-by: Jun Li <jun.li@nxp.com>
    Link: https://lore.kernel.org/r/20211130154239.8029-1-Frank.Li@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfdb7032a48809cc31a44ee7ab6b919723cccd35
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Mon Nov 29 16:18:25 2021 -0800

    usb: typec: tcpm: Wait in SNK_DEBOUNCED until disconnect
    
    commit fbcd13df1e78eb2ba83a3c160eefe2d6f574beaf upstream.
    
    Stub from the spec:
    "4.5.2.2.4.2 Exiting from AttachWait.SNK State
    A Sink shall transition to Unattached.SNK when the state of both
    the CC1 and CC2 pins is SNK.Open for at least tPDDebounce.
    A DRP shall transition to Unattached.SRC when the state of both
    the CC1 and CC2 pins is SNK.Open for at least tPDDebounce."
    
    This change makes TCPM to wait in SNK_DEBOUNCED state until
    CC1 and CC2 pins is SNK.Open for at least tPDDebounce. Previously,
    TCPM resets the port if vbus is not present in PD_T_PS_SOURCE_ON.
    This causes TCPM to loop continuously when connected to a
    faulty power source that does not present vbus. Waiting in
    SNK_DEBOUNCED also ensures that TCPM is adherant to
    "4.5.2.2.4.2 Exiting from AttachWait.SNK State" requirements.
    
    [ 6169.280751] CC1: 0 -> 0, CC2: 0 -> 5 [state TOGGLING, polarity 0, connected]
    [ 6169.280759] state change TOGGLING -> SNK_ATTACH_WAIT [rev2 NONE_AMS]
    [ 6169.280771] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @ 170 ms [rev2 NONE_AMS]
    [ 6169.282427] CC1: 0 -> 0, CC2: 5 -> 5 [state SNK_ATTACH_WAIT, polarity 0, connected]
    [ 6169.450825] state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED [delayed 170 ms]
    [ 6169.450834] pending state change SNK_DEBOUNCED -> PORT_RESET @ 480 ms [rev2 NONE_AMS]
    [ 6169.930892] state change SNK_DEBOUNCED -> PORT_RESET [delayed 480 ms]
    [ 6169.931296] disable vbus discharge ret:0
    [ 6169.931301] Setting usb_comm capable false
    [ 6169.932783] Setting voltage/current limit 0 mV 0 mA
    [ 6169.932802] polarity 0
    [ 6169.933706] Requesting mux state 0, usb-role 0, orientation 0
    [ 6169.936689] cc:=0
    [ 6169.936812] pending state change PORT_RESET -> PORT_RESET_WAIT_OFF @ 100 ms [rev2 NONE_AMS]
    [ 6169.937157] CC1: 0 -> 0, CC2: 5 -> 0 [state PORT_RESET, polarity 0, disconnected]
    [ 6170.036880] state change PORT_RESET -> PORT_RESET_WAIT_OFF [delayed 100 ms]
    [ 6170.036890] state change PORT_RESET_WAIT_OFF -> SNK_UNATTACHED [rev2 NONE_AMS]
    [ 6170.036896] Start toggling
    [ 6170.041412] CC1: 0 -> 0, CC2: 0 -> 0 [state TOGGLING, polarity 0, disconnected]
    [ 6170.042973] CC1: 0 -> 0, CC2: 0 -> 5 [state TOGGLING, polarity 0, connected]
    [ 6170.042976] state change TOGGLING -> SNK_ATTACH_WAIT [rev2 NONE_AMS]
    [ 6170.042981] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @ 170 ms [rev2 NONE_AMS]
    [ 6170.213014] state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED [delayed 170 ms]
    [ 6170.213019] pending state change SNK_DEBOUNCED -> PORT_RESET @ 480 ms [rev2 NONE_AMS]
    [ 6170.693068] state change SNK_DEBOUNCED -> PORT_RESET [delayed 480 ms]
    [ 6170.693304] disable vbus discharge ret:0
    [ 6170.693308] Setting usb_comm capable false
    [ 6170.695193] Setting voltage/current limit 0 mV 0 mA
    [ 6170.695210] polarity 0
    [ 6170.695990] Requesting mux state 0, usb-role 0, orientation 0
    [ 6170.701896] cc:=0
    [ 6170.702181] pending state change PORT_RESET -> PORT_RESET_WAIT_OFF @ 100 ms [rev2 NONE_AMS]
    [ 6170.703343] CC1: 0 -> 0, CC2: 5 -> 0 [state PORT_RESET, polarity 0, disconnected]
    
    Fixes: f0690a25a140b8 ("staging: typec: USB Type-C Port Manager (tcpm)")
    Cc: stable@vger.kernel.org
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Link: https://lore.kernel.org/r/20211130001825.3142830-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43cdf7b5645da29595c8e015dc0b535889508f7f
Author: Ole Ernst <olebowle@gmx.com>
Date:   Sat Nov 27 10:05:45 2021 +0100

    USB: NO_LPM quirk Lenovo Powered USB-C Travel Hub
    
    commit d2a004037c3c6afd36d40c384d2905f47cd51c57 upstream.
    
    This is another branded 8153 device that doesn't work well with LPM:
    r8152 2-2.1:1.0 enp0s13f0u2u1: Stop submitting intr, status -71
    
    Disable LPM to resolve the issue.
    
    Signed-off-by: Ole Ernst <olebowle@gmx.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211127090546.52072-1-olebowle@gmx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa75f593c867cde772e2d87ca36ab735c4aa4a09
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Nov 26 14:23:40 2021 +0200

    xhci: Fix commad ring abort, write all 64 bits to CRCR register.
    
    commit 09f736aa95476631227d2dc0e6b9aeee1ad7ed58 upstream.
    
    Turns out some xHC controllers require all 64 bits in the CRCR register
    to be written to execute a command abort.
    
    The lower 32 bits containing the command abort bit is written first.
    In case the command ring stops before we write the upper 32 bits then
    hardware may use these upper bits to set the commnd ring dequeue pointer.
    
    Solve this by making sure the upper 32 bits contain a valid command
    ring dequeue pointer.
    
    The original patch that only wrote the first 32 to stop the ring went
    to stable, so this fix should go there as well.
    
    Fixes: ff0e50d3564f ("xhci: Fix command ring pointer corruption while aborting a command")
    Cc: stable@vger.kernel.org
    Tested-by: Pavankumar Kondeti <quic_pkondeti@quicinc.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20211126122340.1193239-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81dbda4c70f32ac3e960385903b48f4067925909
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Tue Oct 26 00:26:22 2021 +0200

    vgacon: Propagate console boot parameters before calling `vc_resize'
    
    commit 3dfac26e2ef29ff2abc2a75aa4cd48fce25a2c4b upstream.
    
    Fix a division by zero in `vgacon_resize' with a backtrace like:
    
    vgacon_resize
    vc_do_resize
    vgacon_init
    do_bind_con_driver
    do_unbind_con_driver
    fbcon_fb_unbind
    do_unregister_framebuffer
    do_register_framebuffer
    register_framebuffer
    __drm_fb_helper_initial_config_and_unlock
    drm_helper_hpd_irq_event
    dw_hdmi_irq
    irq_thread
    kthread
    
    caused by `c->vc_cell_height' not having been initialized.  This has
    only started to trigger with commit 860dafa90259 ("vt: Fix character
    height handling with VT_RESIZEX"), however the ultimate offender is
    commit 50ec42edd978 ("[PATCH] Detaching fbcon: fix vgacon to allow
    retaking of the console").
    
    Said commit has added a call to `vc_resize' whenever `vgacon_init' is
    called with the `init' argument set to 0, which did not happen before.
    And the call is made before a key vgacon boot parameter retrieved in
    `vgacon_startup' has been propagated in `vgacon_init' for `vc_resize' to
    use to the console structure being worked on.  Previously the parameter
    was `c->vc_font.height' and now it is `c->vc_cell_height'.
    
    In this particular scenario the registration of fbcon has failed and vt
    resorts to vgacon.  Now fbcon does have initialized `c->vc_font.height'
    somehow, unlike `c->vc_cell_height', which is why this code did not
    crash before, but either way the boot parameters should have been copied
    to the console structure ahead of the call to `vc_resize' rather than
    afterwards, so that first the call has a chance to use them and second
    they do not change the console structure to something possibly different
    from what was used by `vc_resize'.
    
    Move the propagation of the vgacon boot parameters ahead of the call to
    `vc_resize' then.  Adjust the comment accordingly.
    
    Fixes: 50ec42edd978 ("[PATCH] Detaching fbcon: fix vgacon to allow retaking of the console")
    Cc: stable@vger.kernel.org # v2.6.18+
    Reported-by: Wim Osterholt <wim@djo.tudelft.nl>
    Reported-by: Pavel V. Panteleev <panteleev_p@mcst.ru>
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2110252317110.58149@angie.orcam.me.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbeb9153ded9055f7e1746576e518e7e65ae9ba2
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    commit afdb4a5b1d340e4afffc65daa21cc71890d7d589 upstream.
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98736f21f673be30ea54ce7269cfc83b20b0d61f
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:14:40 2021 +0100

    parisc: Fix "make install" on newer debian releases
    
    commit 0f9fee4cdebfbe695c297e5b603a275e2557c1cc upstream.
    
    On newer debian releases the debian-provided "installkernel" script is
    installed in /usr/sbin. Fix the kernel install.sh script to look for the
    script in this directory as well.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v3.13+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34680557cf3ac7b6a747ef1dd734aeb88784ef78
Author: Helge Deller <deller@gmx.de>
Date:   Fri Nov 26 22:35:45 2021 +0100

    parisc: Fix KBUILD_IMAGE for self-extracting kernel
    
    commit 1d7c29b77725d05faff6754d2f5e7c147aedcf93 upstream.
    
    Default KBUILD_IMAGE to $(boot)/bzImage if a self-extracting
    (CONFIG_PARISC_SELF_EXTRACT=y) kernel is to be built.
    This fixes the bindeb-pkg make target.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e044b80e6bad5eb599fd7a039d695159f301929
Author: Al Cooper <alcooperx@gmail.com>
Date:   Wed Dec 1 15:14:02 2021 -0500

    serial: 8250_bcm7271: UART errors after resuming from S2
    
    [ Upstream commit 9cabe26e65a893afd5846908aa393bd283ab6609 ]
    
    There is a small window in time during resume where the hardware
    flow control signal RTS can be asserted (which allows a sender to
    resume sending data to the UART) but the baud rate has not yet
    been restored. This will cause corrupted data and FRAMING, OVERRUN
    and BREAK errors. This is happening because the MCTRL register is
    shadowed in uart_port struct and is later used during resume to set
    the MCTRL register during both serial8250_do_startup() and
    uart_resume_port(). Unfortunately, serial8250_do_startup()
    happens before the UART baud rate is restored. The fix is to clear
    the shadowed mctrl value at the end of suspend and restore it at the
    end of resume.
    
    Fixes: 41a469482de2 ("serial: 8250: Add new 8250-core based Broadcom STB driver")
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Al Cooper <alcooperx@gmail.com>
    Link: https://lore.kernel.org/r/20211201201402.47446-1-alcooperx@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb0fb54ff6eee8b6c0db430459a6af8a1f3fb664
Author: Tariq Toukan <tariqt@nvidia.com>
Date:   Mon Sep 13 13:54:30 2021 +0300

    net/mlx5e: Sync TIR params updates against concurrent create/modify
    
    [ Upstream commit 4cce2ccf08fbc27ae34ce0e72db15166e7b5f6a7 ]
    
    Transport Interface Receive (TIR) objects perform the packet processing and
    reassembly and is also responsible for demultiplexing the packets into the
    different RQs.
    
    There are certain TIR context attributes that propagate to the pointed RQs
    and applied to them (like packet_merge offloads (LRO/SHAMPO) and
    tunneled_offload_en).  When TIRs do not agree on attributes values, a "last
    one wins" policy is applied.  Hence, if not synced properly, a race between
    TIR params update and a concurrent TIR create/modify operation might yield
    to a mismatch between the shadow parameters in SW and the actual applied
    state of the RQs in HW.
    
    tunneled_offload_en is a fixed attribute per profile, while packet merge
    offload state might be toggled and get out-of-sync. When this happens,
    packet_merge offload might be working although not requested, or the
    opposite.
    
    All updates to packet_merge state and all create/modify operations of
    regular redirection/steering TIRs are done under the same priv->state_lock,
    so they do not run in parallel, and no race is possible.
    
    However, there are other kind of TIRs (acceleration offloads TIRs, like TLS
    TIRs) which are created on demand for each new connection without holding
    the coarse priv->state_lock, hence might race.
    
    Fix this by synchronizing all packet_merge state reads and writes against
    all TIR create/modify operations. Include the modify operations of the
    regular redirection steering TIRs under the new lock, for better code
    layering and division of responsibilities.
    
    Fixes: 1182f3659357 ("net/mlx5e: kTLS, Add kTLS RX HW offload support")
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Maxim Mikityanskiy <maximmi@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a950a93be05fad054db7438a05070226b0db28a2
Author: Khalid Manaa <khalidm@nvidia.com>
Date:   Wed Jun 9 12:27:32 2021 +0300

    net/mlx5e: Rename TIR lro functions to TIR packet merge functions
    
    [ Upstream commit eaee12f046924eeb1210c7e4f3b326603ff1bd85 ]
    
    This series introduces new packet merge type, therefore rename lro
    functions to packet merge to support the new merge type:
    - Generalize + rename mlx5e_build_tir_ctx_lro to
      mlx5e_build_tir_ctx_packet_merge.
    - Rename mlx5e_modify_tirs_lro to mlx5e_modify_tirs_packet_merge.
    - Rename lro bit in mlx5_ifc_modify_tir_bitmask_bits to packet_merge.
    - Rename lro_en in mlx5e_params to packet_merge_type type and combine
      packet_merge params into one struct mlx5e_packet_merge_param.
    
    Signed-off-by: Khalid Manaa <khalidm@nvidia.com>
    Signed-off-by: Ben Ben-Ishay <benishay@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cd81837f46ff5e12644f773ee787c0e4966ee27
Author: Ben Ben-Ishay <benishay@nvidia.com>
Date:   Thu Jul 2 17:22:45 2020 +0300

    net/mlx5e: Rename lro_timeout to packet_merge_timeout
    
    [ Upstream commit 50f477fe9933193e960785f1192be801d7cd307a ]
    
    TIR stands for transport interface receive, the TIR object is
    responsible for performing all transport related operations on
    the receive side like packet processing, demultiplexing the packets
    to different RQ's, etc.
    lro_timeout is a field in the TIR that is used to set the timeout for lro
    session, this series introduces new packet merge type, therefore rename
    lro_timeout to packet_merge_timeout for all packet merge types.
    
    Signed-off-by: Ben Ben-Ishay <benishay@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66e507d96869ee81f93c2abe932eab14bbac8d12
Author: Sean Christopherson <seanjc@google.com>
Date:   Sat Nov 20 04:50:21 2021 +0000

    KVM: x86/mmu: Remove spurious TLB flushes in TDP MMU zap collapsible path
    
    [ Upstream commit 4b85c921cd393764d22c0cdab6d7d5d120aa0980 ]
    
    Drop the "flush" param and return values to/from the TDP MMU's helper for
    zapping collapsible SPTEs.  Because the helper runs with mmu_lock held
    for read, not write, it uses tdp_mmu_zap_spte_atomic(), and the atomic
    zap handles the necessary remote TLB flush.
    
    Similarly, because mmu_lock is dropped and re-acquired between zapping
    legacy MMUs and zapping TDP MMUs, kvm_mmu_zap_collapsible_sptes() must
    handle remote TLB flushes from the legacy MMU before calling into the TDP
    MMU.
    
    Fixes: e2209710ccc5d ("KVM: x86/mmu: Skip rmap operations if rmaps not allocated")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211120045046.3940942-4-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0609b252c8c69aad11b3f7c70137cf24f2c072c
Author: David Matlack <dmatlack@google.com>
Date:   Tue Oct 19 16:22:23 2021 +0000

    KVM: x86/mmu: Rename slot_handle_leaf to slot_handle_level_4k
    
    [ Upstream commit 610265ea3da117db435868bd109f1861534a5634 ]
    
    slot_handle_leaf is a misnomer because it only operates on 4K SPTEs
    whereas "leaf" is used to describe any valid terminal SPTE (4K or
    large page). Rename slot_handle_leaf to slot_handle_level_4k to
    avoid confusion.
    
    Making this change makes it more obvious there is a benign discrepency
    between the legacy MMU and the TDP MMU when it comes to dirty logging.
    The legacy MMU only iterates through 4K SPTEs when zapping for
    collapsing and when clearing D-bits. The TDP MMU, on the other hand,
    iterates through SPTEs on all levels.
    
    The TDP MMU behavior of zapping SPTEs at all levels is technically
    overkill for its current dirty logging implementation, which always
    demotes to 4k SPTES, but both the TDP MMU and legacy MMU zap if and only
    if the SPTE can be replaced by a larger page, i.e. will not spuriously
    zap 2m (or larger) SPTEs. Opportunistically add comments to explain this
    discrepency in the code.
    
    Signed-off-by: David Matlack <dmatlack@google.com>
    Message-Id: <20211019162223.3935109-1-dmatlack@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7012eb0e522064432dcabd448fe5c3147f2ad4fd
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Nov 9 22:23:49 2021 +0000

    KVM: SEV: Return appropriate error codes if SEV-ES scratch setup fails
    
    [ Upstream commit 75236f5f2299b502e4b9b267c1ce3bc14a222ceb ]
    
    Return appropriate error codes if setting up the GHCB scratch area for an
    SEV-ES guest fails.  In particular, returning -EINVAL instead of -ENOMEM
    when allocating the kernel buffer could be confusing as userspace would
    likely suspect a guest issue.
    
    Fixes: 8f423a80d299 ("KVM: SVM: Support MMIO for an SEV-ES guest")
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211109222350.2266045-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a246d92dda9fa3ca3a79bd49d8b982b7c176b042
Author: Qais Yousef <qais.yousef@arm.com>
Date:   Thu Dec 2 11:20:33 2021 +0000

    sched/uclamp: Fix rq->uclamp_max not set on first enqueue
    
    [ Upstream commit 315c4f884800c45cb6bd8c90422fad554a8b9588 ]
    
    Commit d81ae8aac85c ("sched/uclamp: Fix initialization of struct
    uclamp_rq") introduced a bug where uclamp_max of the rq is not reset to
    match the woken up task's uclamp_max when the rq is idle.
    
    The code was relying on rq->uclamp_max initialized to zero, so on first
    enqueue
    
            static inline void uclamp_rq_inc_id(struct rq *rq, struct task_struct *p,
                                                enum uclamp_id clamp_id)
            {
                    ...
    
                    if (uc_se->value > READ_ONCE(uc_rq->value))
                            WRITE_ONCE(uc_rq->value, uc_se->value);
            }
    
    was actually resetting it. But since commit d81ae8aac85c changed the
    default to 1024, this no longer works. And since rq->uclamp_flags is
    also initialized to 0, neither above code path nor uclamp_idle_reset()
    update the rq->uclamp_max on first wake up from idle.
    
    This is only visible from first wake up(s) until the first dequeue to
    idle after enabling the static key. And it only matters if the
    uclamp_max of this task is < 1024 since only then its uclamp_max will be
    effectively ignored.
    
    Fix it by properly initializing rq->uclamp_flags = UCLAMP_FLAG_IDLE to
    ensure uclamp_idle_reset() is called which then will update the rq
    uclamp_max value as expected.
    
    Fixes: d81ae8aac85c ("sched/uclamp: Fix initialization of struct uclamp_rq")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <Valentin.Schneider@arm.com>
    Tested-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Link: https://lkml.kernel.org/r/20211202112033.1705279-1-qais.yousef@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcf714776066865b2969c12793a12f92d8ded342
Author: Andrew Halaney <ahalaney@redhat.com>
Date:   Fri Dec 3 17:32:03 2021 -0600

    preempt/dynamic: Fix setup_preempt_mode() return value
    
    [ Upstream commit 9ed20bafc85806ca6c97c9128cec46c3ef80ae86 ]
    
    __setup() callbacks expect 1 for success and 0 for failure. Correct the
    usage here to reflect that.
    
    Fixes: 826bfeb37bb4 ("preempt/dynamic: Support dynamic preempt with preempt= boot option")
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Andrew Halaney <ahalaney@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20211203233203.133581-1-ahalaney@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e19a07833960e50ba6e969751291483d4e94a024
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Fri Nov 26 18:11:23 2021 +0800

    x86/xen: Add xenpv_restore_regs_and_return_to_usermode()
    
    [ Upstream commit 5c8f6a2e316efebb3ba93d8c1af258155dcf5632 ]
    
    In the native case, PER_CPU_VAR(cpu_tss_rw + TSS_sp0) is the
    trampoline stack. But XEN pv doesn't use trampoline stack, so
    PER_CPU_VAR(cpu_tss_rw + TSS_sp0) is also the kernel stack.
    
    In that case, source and destination stacks are identical, which means
    that reusing swapgs_restore_regs_and_return_to_usermode() in XEN pv
    would cause %rsp to move up to the top of the kernel stack and leave the
    IRET frame below %rsp.
    
    This is dangerous as it can be corrupted if #NMI / #MC hit as either of
    these events occurring in the middle of the stack pushing would clobber
    data on the (original) stack.
    
    And, with  XEN pv, swapgs_restore_regs_and_return_to_usermode() pushing
    the IRET frame on to the original address is useless and error-prone
    when there is any future attempt to modify the code.
    
     [ bp: Massage commit message. ]
    
    Fixes: 7f2590a110b8 ("x86/entry/64: Use a per-CPU trampoline stack for IDT entries")
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lkml.kernel.org/r/20211126101209.8613-4-jiangshanlai@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 308cc9668d7ca2e549e0331a21e8814310a14d15
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Fri Nov 26 18:11:22 2021 +0800

    x86/entry: Use the correct fence macro after swapgs in kernel CR3
    
    [ Upstream commit 1367afaa2ee90d1c956dfc224e199fcb3ff3f8cc ]
    
    The commit
    
      c75890700455 ("x86/entry/64: Remove unneeded kernel CR3 switching")
    
    removed a CR3 write in the faulting path of load_gs_index().
    
    But the path's FENCE_SWAPGS_USER_ENTRY has no fence operation if PTI is
    enabled, see spectre_v1_select_mitigation().
    
    Rather, it depended on the serializing CR3 write of SWITCH_TO_KERNEL_CR3
    and since it got removed, add a FENCE_SWAPGS_KERNEL_ENTRY call to make
    sure speculation is blocked.
    
     [ bp: Massage commit message and comment. ]
    
    Fixes: c75890700455 ("x86/entry/64: Remove unneeded kernel CR3 switching")
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20211126101209.8613-3-jiangshanlai@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efc5d7be3eb0c63884ca2d620824625e00d2a218
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Fri Nov 26 18:11:21 2021 +0800

    x86/entry: Add a fence for kernel entry SWAPGS in paranoid_entry()
    
    [ Upstream commit c07e45553da1808aa802e9f0ffa8108cfeaf7a17 ]
    
    Commit
    
      18ec54fdd6d18 ("x86/speculation: Prepare entry code for Spectre v1 swapgs mitigations")
    
    added FENCE_SWAPGS_{KERNEL|USER}_ENTRY for conditional SWAPGS. In
    paranoid_entry(), it uses only FENCE_SWAPGS_KERNEL_ENTRY for both
    branches. This is because the fence is required for both cases since the
    CR3 write is conditional even when PTI is enabled.
    
    But
    
      96b2371413e8f ("x86/entry/64: Switch CR3 before SWAPGS in paranoid entry")
    
    changed the order of SWAPGS and the CR3 write. And it missed the needed
    FENCE_SWAPGS_KERNEL_ENTRY for the user gsbase case.
    
    Add it back by changing the branches so that FENCE_SWAPGS_KERNEL_ENTRY
    can cover both branches.
    
      [ bp: Massage, fix typos, remove obsolete comment while at it. ]
    
    Fixes: 96b2371413e8f ("x86/entry/64: Switch CR3 before SWAPGS in paranoid entry")
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20211126101209.8613-2-jiangshanlai@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce364f143caa8eadc75daf01aa0e94207173770c
Author: Michael Sterritt <sterritt@google.com>
Date:   Fri Nov 19 15:27:57 2021 -0800

    x86/sev: Fix SEV-ES INS/OUTS instructions for word, dword, and qword
    
    [ Upstream commit 1d5379d0475419085d3575bd9155f2e558e96390 ]
    
    Properly type the operands being passed to __put_user()/__get_user().
    Otherwise, these routines truncate data for dependent instructions
    (e.g., INSW) and only read/write one byte.
    
    This has been tested by sending a string with REP OUTSW to a port and
    then reading it back in with REP INSW on the same port.
    
    Previous behavior was to only send and receive the first char of the
    size. For example, word operations for "abcd" would only read/write
    "ac". With change, the full string is now written and read back.
    
    Fixes: f980f9c31a923 (x86/sev-es: Compile early handler code into kernel image)
    Signed-off-by: Michael Sterritt <sterritt@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Marc Orr <marcorr@google.com>
    Reviewed-by: Peter Gonda <pgonda@google.com>
    Reviewed-by: Joerg Roedel <jroedel@suse.de>
    Link: https://lkml.kernel.org/r/20211119232757.176201-1-sterritt@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 690637ec04427b30bf8f86de422e79759a71e306
Author: Jens Axboe <axboe@kernel.dk>
Date:   Thu Dec 2 19:40:15 2021 -0700

    io-wq: don't retry task_work creation failure on fatal conditions
    
    [ Upstream commit a226abcd5d427fe9d42efc442818a4a1821e2664 ]
    
    We don't want to be retrying task_work creation failure if there's
    an actual signal pending for the parent task. If we do, then we can
    enter an infinite loop of perpetually retrying and each retry failing
    with -ERESTARTNOINTR because a signal is pending.
    
    Fixes: 3146cba99aa2 ("io-wq: make worker creation resilient against signals")
    Reported-by: Florian Fischer <florian.fl.fischer@fau.de>
    Link: https://lore.kernel.org/io-uring/20211202165606.mqryio4yzubl7ms5@pasture/
    Tested-by: Florian Fischer <florian.fl.fischer@fau.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 894b21da042f94f23f1bcbe7362b54b1657aa345
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Fri Nov 19 06:09:30 2021 -0800

    Revert "drm/i915: Implement Wa_1508744258"
    
    [ Upstream commit 72641d8d60401a5f1e1a0431ceaf928680d34418 ]
    
    This workarounds are causing hangs, because I missed the fact that it
    needs to be enabled for all cases and disabled when doing a resolve
    pass.
    
    So KMD only needs to whitelist it and UMD will be the one setting it
    on per case.
    
    This reverts commit 28ec02c9cbebf3feeaf21a59df9dfbc02bda3362.
    
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4145
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Fixes: 28ec02c9cbeb ("drm/i915: Implement Wa_1508744258")
    Reviewed-by: Matt Atwood <matthew.s.atwood@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211119140931.32791-1-jose.souza@intel.com
    (cherry picked from commit f3799ff16fcfacd44aee55db162830df461b631f)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 812ed9b71246a9dcbbee08b046157d8f8cca3d7c
Author: Matt Johnston <matt@codeconstruct.com.au>
Date:   Wed Dec 1 16:07:42 2021 +0800

    mctp: Don't let RTM_DELROUTE delete local routes
    
    [ Upstream commit 76d001603c509562181f3787a7065b8e163bc7b9 ]
    
    We need to test against the existing route type, not
    the rtm_type in the netlink request.
    
    Fixes: 83f0a0b7285b ("mctp: Specify route types, require rtm_type in RTM_*ROUTE messages")
    Signed-off-by: Matt Johnston <matt@codeconstruct.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1bcddbc7b6095b488ec892d687233095756ee28
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Nov 30 15:53:37 2021 +0300

    KVM: VMX: Set failure code in prepare_vmcs02()
    
    [ Upstream commit bfbb307c628676929c2d329da0daf9d22afa8ad2 ]
    
    The error paths in the prepare_vmcs02() function are supposed to set
    *entry_failure_code but this path does not.  It leads to using an
    uninitialized variable in the caller.
    
    Fixes: 71f7347025bf ("KVM: nVMX: Load GUEST_IA32_PERF_GLOBAL_CTRL MSR on VM-Entry")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Message-Id: <20211130125337.GB24578@kili>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5333bef073f8136b05f9536499cb9329f1c263d2
Author: Like Xu <likexu@tencent.com>
Date:   Thu Nov 18 21:03:20 2021 +0800

    KVM: x86/pmu: Fix reserved bits for AMD PerfEvtSeln register
    
    [ Upstream commit cb1d220da0faa5ca0deb93449aff953f0c2cce6d ]
    
    If we run the following perf command in an AMD Milan guest:
    
      perf stat \
      -e cpu/event=0x1d0/ \
      -e cpu/event=0x1c7/ \
      -e cpu/umask=0x1f,event=0x18e/ \
      -e cpu/umask=0x7,event=0x18e/ \
      -e cpu/umask=0x18,event=0x18e/ \
      ./workload
    
    dmesg will report a #GP warning from an unchecked MSR access
    error on MSR_F15H_PERF_CTLx.
    
    This is because according to APM (Revision: 4.03) Figure 13-7,
    the bits [35:32] of AMD PerfEvtSeln register is a part of the
    event select encoding, which extends the EVENT_SELECT field
    from 8 bits to 12 bits.
    
    Opportunistically update pmu->reserved_bits for reserved bit 19.
    
    Reported-by: Jim Mattson <jmattson@google.com>
    Fixes: ca724305a2b0 ("KVM: x86/vPMU: Implement AMD vPMU code for KVM")
    Signed-off-by: Like Xu <likexu@tencent.com>
    Message-Id: <20211118130320.95997-1-likexu@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a22778cc73b131244748a2d65aa14174c3e013b
Author: Dmytro Linkin <dlinkin@nvidia.com>
Date:   Wed Nov 17 11:47:21 2021 +0200

    net/mlx5: E-Switch, Check group pointer before reading bw_share value
    
    [ Upstream commit 5c4e8ae7aa4875041102406801ee434e6c581aef ]
    
    If log_esw_max_sched_depth is not supported group pointer of the vport
    is NULL. Hence, check the pointer before reading bw_share value.
    
    Fixes: 0fe132eac38c ("net/mlx5: E-switch, Allow to add vports to rate groups")
    Signed-off-by: Dmytro Linkin <dlinkin@nvidia.com>
    Reviewed-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4cc946fae4c509a8ad52ace4a9ada3f7fcd12f4e
Author: Mark Bloch <mbloch@nvidia.com>
Date:   Thu Oct 21 12:46:17 2021 +0000

    net/mlx5: E-Switch, fix single FDB creation on BlueField
    
    [ Upstream commit 43a0696f11567278b9412f947e43dd7906c831a8 ]
    
    Always use MLX5_FLOW_TABLE_OTHER_VPORT flag when creating egress ACL
    table for single FDB. Not doing so on BlueField will make firmware fail
    the command. On BlueField the E-Switch manager is the ECPF (vport 0xFFFE)
    which is filled in the flow table creation command but as the
    other_vport field wasn't set the firmware complains about a bad parameter.
    
    This is different from a regular HCA where the E-Switch manager vport is
    the PF (vport 0x0). Passing MLX5_FLOW_TABLE_OTHER_VPORT will make the
    firmware happy both on BlueField and on regular HCAs without special
    condition for each.
    
    This fixes the bellow firmware syndrome:
    mlx5_cmd_check:819:(pid 571): CREATE_FLOW_TABLE(0x930) op_mod(0x0) failed, status bad parameter(0x3), syndrome (0x754a4)
    
    Fixes: db202995f503 ("net/mlx5: E-Switch, add logic to enable shared FDB")
    Signed-off-by: Mark Bloch <mbloch@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 301c7519106d9398b5d33e12daaabb4172a6c2db
Author: Dmytro Linkin <dlinkin@nvidia.com>
Date:   Tue Sep 21 15:47:33 2021 +0300

    net/mlx5: E-switch, Respect BW share of the new group
    
    [ Upstream commit 1e59b32e45e47c8ea5455182286ba010bfa87813 ]
    
    To enable transmit schduler on vport FW require non-zero configuration
    for vport's TSAR. If vport added to the group which has configured BW
    share value and TX rate values of the vport are zero, then scheduler
    wouldn't be enabled on this vport.
    Fix that by calling BW normalization if BW share of the new group is
    configured.
    
    Fixes: 0fe132eac38c ("net/mlx5: E-switch, Allow to add vports to rate groups")
    Signed-off-by: Dmytro Linkin <dlinkin@nvidia.com>
    Reviewed-by: Roi Dayan <roid@nvidia.com>
    Reviewed-by: Parav Pandit <parav@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f8887350191405155d7ead4e819324f8984191d
Author: Moshe Shemesh <moshe@nvidia.com>
Date:   Fri Nov 5 15:03:20 2021 +0200

    net/mlx5: Move MODIFY_RQT command to ignore list in internal error state
    
    [ Upstream commit e45c0b34493c24eeeebf89f63a5293aac7728ed7 ]
    
    When the device is in internal error state, command interface isn't
    accessible and the driver decides which commands to fail and which
    to ignore.
    
    Move the MODIFY_RQT command to the ignore list in order to avoid
    the following redundant warning messages in internal error state:
    
    mlx5_core 0000:82:00.1: mlx5e_rss_disable:419:(pid 23754): Failed to redirect RQT 0x0 to drop RQ 0xc00848: err = -5
    mlx5_core 0000:82:00.1: mlx5e_rx_res_channels_deactivate:598:(pid 23754): Failed to redirect direct RQT 0x1 to drop RQ 0xc00848 (channel 0): err = -5
    mlx5_core 0000:82:00.1: mlx5e_rx_res_channels_deactivate:607:(pid 23754): Failed to redirect XSK RQT 0x19 to drop RQ 0xc00848 (channel 0): err = -5
    
    Fixes: 43ec0f41fa73 ("net/mlx5e: Hide all implementation details of mlx5e_rx_res")
    Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1adc4914a0dae51331411d938ae8dd41987a6512
Author: Raed Salem <raeds@nvidia.com>
Date:   Thu Jul 8 12:48:24 2021 +0300

    net/mlx5e: Fix missing IPsec statistics on uplink representor
    
    [ Upstream commit 51ebf5db67f5c6aed79c05f1aa5137bdf5ca6614 ]
    
    The cited patch added the IPsec support to uplink representor, however
    as uplink representors have his private statistics where IPsec stats
    is not part of it, that effectively makes IPsec stats hidden when uplink
    representor stats queried.
    
    Resolve by adding IPsec stats to uplink representor private statistics.
    
    Fixes: 5589b8f1a2c7 ("net/mlx5e: Add IPsec support to uplink representor")
    Signed-off-by: Raed Salem <raeds@nvidia.com>
    Reviewed-by: Alaa Hleihel <alaa@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4db545992ad89d1bf8181e2af1e37fff250433c
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 22 19:50:30 2021 -0500

    KVM: SEV: initialize regions_list of a mirror VM
    
    [ Upstream commit 2b347a387811cb4aa7bcdb96e9203c5019a6fb41 ]
    
    This was broken before the introduction of KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM,
    but technically harmless because the region list was unused for a mirror
    VM.  However, it is untidy and it now causes a NULL pointer access when
    attempting to move the encryption context of a mirror VM.
    
    Fixes: 54526d1fd593 ("KVM: x86: Support KVM VMs sharing SEV context")
    Message-Id: <20211123005036.2954379-7-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5a8918d0865d3c29a315696f0e444b5472c4273
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Wed Nov 24 20:20:43 2021 +0800

    KVM: X86: Fix when shadow_root_level=5 && guest root_level<4
    
    [ Upstream commit 12ec33a705749e18d9588b0a0e69e02821371156 ]
    
    If the is an L1 with nNPT in 32bit, the shadow walk starts with
    pae_root.
    
    Fixes: a717a780fc4e ("KVM: x86/mmu: Support shadowing NPT when 5-level paging is enabled in host)
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Message-Id: <20211124122055.64424-2-jiangshanlai@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4768935c25403ba96e7a745645df24a51a774b7e
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu Nov 11 08:23:11 2021 +0100

    iwlwifi: Fix memory leaks in error handling path
    
    [ Upstream commit a571bc28326d9f3e13f5f2d9cda2883e0631b0ce ]
    
    Should an error occur (invalid TLV len or memory allocation failure), the
    memory already allocated in 'reduce_power_data' should be freed before
    returning, otherwise it is leaking.
    
    Fixes: 9dad325f9d57 ("iwlwifi: support loading the reduced power table from UEFI")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1504cd7d842d13ddb8244e18004523128d5c9523.1636615284.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b9bed7c63f015ccbcccb27458d3558fce105550
Author: Nicolas Frattaroli <frattaroli.nicolas@gmail.com>
Date:   Sun Nov 21 16:05:20 2021 +0100

    ASoC: rk817: Add module alias for rk817-codec
    
    [ Upstream commit 428ee30a05cd1362c8aa86a4c909b0d1c6bc48a4 ]
    
    Without a module alias, autoloading the driver does not occurr
    when it is built as a module.
    
    By adding a module alias, the driver now probes fine automatically
    and therefore analog audio output works as it should.
    
    Fixes: 0d6a04da9b25 ("ASoC: Add Rockchip rk817 audio CODEC support")
    Signed-off-by: Nicolas Frattaroli <frattaroli.nicolas@gmail.com>
    Link: https://lore.kernel.org/r/20211121150521.159543-1-frattaroli.nicolas@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 805c90e0e9197512ad3e0b374177649c7d43c18a
Author: Rob Clark <robdclark@chromium.org>
Date:   Thu Nov 11 11:24:56 2021 -0800

    drm/msm: Restore error return on invalid fence
    
    [ Upstream commit 067ecab9eef620d41040715669e5fcdc2f8ff963 ]
    
    When converting to use an idr to map userspace fence seqno values back
    to a dma_fence, we lost the error return when userspace passes seqno
    that is larger than the last submitted fence.  Restore this check.
    
    Reported-by: Akhil P Oommen <akhilpo@codeaurora.org>
    Fixes: a61acbbe9cf8 ("drm/msm: Track "seqno" fences by idr")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Reviewed-by: Akhil P Oommen <akhilpo@codeaurora.org>
    Link: https://lore.kernel.org/r/20211111192457.747899-3-robdclark@gmail.com
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c3cdbf2540319ea674f1f3c54f31f14c6f39647
Author: Rob Clark <robdclark@chromium.org>
Date:   Thu Nov 11 11:24:55 2021 -0800

    drm/msm: Fix wait_fence submitqueue leak
    
    [ Upstream commit ea0006d390a28012f8187717aea61498b2b341e5 ]
    
    We weren't dropping the submitqueue reference in all paths.  In
    particular, when the fence has already been signalled. Split out
    a helper to simplify handling this in the various different return
    paths.
    
    Fixes: a61acbbe9cf8 ("drm/msm: Track "seqno" fences by idr")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Link: https://lore.kernel.org/r/20211111192457.747899-2-robdclark@gmail.com
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e2b7fe5e8a4be5e571561d9afcfbd92097288ba
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Nov 10 11:33:42 2021 -0800

    drm/msm: Fix mmap to include VM_IO and VM_DONTDUMP
    
    [ Upstream commit 3466d9e217b337bf473ee629c608e53f9f3ab786 ]
    
    In commit 510410bfc034 ("drm/msm: Implement mmap as GEM object
    function") we switched to a new/cleaner method of doing things. That's
    good, but we missed a little bit.
    
    Before that commit, we used to _first_ run through the
    drm_gem_mmap_obj() case where `obj->funcs->mmap()` was NULL. That meant
    that we ran:
    
      vma->vm_flags |= VM_IO | VM_PFNMAP | VM_DONTEXPAND | VM_DONTDUMP;
      vma->vm_page_prot = pgprot_writecombine(vm_get_page_prot(vma->vm_flags));
      vma->vm_page_prot = pgprot_decrypted(vma->vm_page_prot);
    
    ...and _then_ we modified those mappings with our own. Now that
    `obj->funcs->mmap()` is no longer NULL we don't run the default
    code. It looks like the fact that the vm_flags got VM_IO / VM_DONTDUMP
    was important because we're now getting crashes on Chromebooks that
    use ARC++ while logging out. Specifically a crash that looks like this
    (this is on a 5.10 kernel w/ relevant backports but also seen on a
    5.15 kernel):
    
      Unable to handle kernel paging request at virtual address ffffffc008000000
      Mem abort info:
        ESR = 0x96000006
        EC = 0x25: DABT (current EL), IL = 32 bits
        SET = 0, FnV = 0
        EA = 0, S1PTW = 0
      Data abort info:
        ISV = 0, ISS = 0x00000006
        CM = 0, WnR = 0
      swapper pgtable: 4k pages, 39-bit VAs, pgdp=000000008293d000
      [ffffffc008000000] pgd=00000001002b3003, p4d=00000001002b3003,
                         pud=00000001002b3003, pmd=0000000000000000
      Internal error: Oops: 96000006 [#1] PREEMPT SMP
      [...]
      CPU: 7 PID: 15734 Comm: crash_dump64 Tainted: G W 5.10.67 #1 [...]
      Hardware name: Qualcomm Technologies, Inc. sc7280 IDP SKU2 platform (DT)
      pstate: 80400009 (Nzcv daif +PAN -UAO -TCO BTYPE=--)
      pc : __arch_copy_to_user+0xc0/0x30c
      lr : copyout+0xac/0x14c
      [...]
      Call trace:
       __arch_copy_to_user+0xc0/0x30c
       copy_page_to_iter+0x1a0/0x294
       process_vm_rw_core+0x240/0x408
       process_vm_rw+0x110/0x16c
       __arm64_sys_process_vm_readv+0x30/0x3c
       el0_svc_common+0xf8/0x250
       do_el0_svc+0x30/0x80
       el0_svc+0x10/0x1c
       el0_sync_handler+0x78/0x108
       el0_sync+0x184/0x1c0
      Code: f8408423 f80008c3 910020c6 36100082 (b8404423)
    
    Let's add the two flags back in.
    
    While we're at it, the fact that we aren't running the default means
    that we _don't_ need to clear out VM_PFNMAP, so remove that and save
    an instruction.
    
    NOTE: it was confirmed that VM_IO was the important flag to fix the
    problem I was seeing, but adding back VM_DONTDUMP seems like a sane
    thing to do so I'm doing that too.
    
    Fixes: 510410bfc034 ("drm/msm: Implement mmap as GEM object function")
    Reported-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Tested-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/20211110113334.1.I1687e716adb2df746da58b508db3f25423c40b27@changeid
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4eb55901df1dce8c6944438bbdf57caf08911e2
Author: Rob Clark <robdclark@chromium.org>
Date:   Fri Nov 5 13:20:21 2021 -0700

    drm/msm/devfreq: Fix OPP refcnt leak
    
    [ Upstream commit 59ba1b2b4825342676300f66d785764be3fcb093 ]
    
    Reported-by: Douglas Anderson <dianders@chromium.org>
    Fixes: 9bc95570175a ("drm/msm: Devfreq tuning")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Tested-By: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Akhil P Oommen <akhilpo@codeaurora.org>
    Link: https://lore.kernel.org/r/20211105202021.181092-1-robdclark@gmail.com
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e256b45e0587ce078b3c7c40070789326f5af6e
Author: Hou Wenlong <houwenlong93@linux.alibaba.com>
Date:   Wed Nov 17 17:20:40 2021 +0800

    KVM: x86/mmu: Pass parameter flush as false in kvm_tdp_mmu_zap_collapsible_sptes()
    
    [ Upstream commit 8ed716ca7dc91f058be0ba644a3048667a20db13 ]
    
    Since tlb flush has been done for legacy MMU before
    kvm_tdp_mmu_zap_collapsible_sptes(), so the parameter flush
    should be false for kvm_tdp_mmu_zap_collapsible_sptes().
    
    Fixes: e2209710ccc5d ("KVM: x86/mmu: Skip rmap operations if rmaps not allocated")
    Signed-off-by: Hou Wenlong <houwenlong93@linux.alibaba.com>
    Message-Id: <21453a1d2533afb6e59fb6c729af89e771ff2e76.1637140154.git.houwenlong93@linux.alibaba.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d618539224ea104d7de8b2c4815490566589cefc
Author: Hou Wenlong <houwenlong93@linux.alibaba.com>
Date:   Wed Nov 17 17:20:39 2021 +0800

    KVM: x86/mmu: Skip tlb flush if it has been done in zap_gfn_range()
    
    [ Upstream commit c7785d85b6c6cc9f3d0f1a8cab128f4062b30abb ]
    
    If the parameter flush is set, zap_gfn_range() would flush remote tlb
    when yield, then tlb flush is not needed outside. So use the return
    value of zap_gfn_range() directly instead of OR on it in
    kvm_unmap_gfn_range() and kvm_tdp_mmu_unmap_gfn_range().
    
    Fixes: 3039bcc744980 ("KVM: Move x86's MMU notifier memslot walkers to generic code")
    Signed-off-by: Hou Wenlong <houwenlong93@linux.alibaba.com>
    Message-Id: <5e16546e228877a4d974f8c0e448a93d52c7a5a9.1637140154.git.houwenlong93@linux.alibaba.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be9163800ba7a00f003a9461b8a52fcbba6c14b6
Author: Sameer Saurabh <ssaurabh@marvell.com>
Date:   Mon Nov 29 05:28:29 2021 -0800

    atlantic: Remove warn trace message.
    
    commit 060a0fb721ec5bbe02ae322e434ec87dc25ed6e9 upstream.
    
    Remove the warn trace message - it's not a correct check here, because
    the function can still be called on the device in DOWN state
    
    Fixes: 508f2e3dce454 ("net: atlantic: split rx and tx per-queue stats")
    Signed-off-by: Sameer Saurabh <ssaurabh@marvell.com>
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35b75e2b72c52b4c730440f5c1e60b3be6e3b382
Author: Dmitry Bogdanov <dbezrukov@marvell.com>
Date:   Mon Nov 29 05:28:28 2021 -0800

    atlantic: Fix statistics logic for production hardware
    
    commit 2087ced0fc3a6d45203925750a2b1bcd5402e639 upstream.
    
    B0 is the main and widespread device revision of atlantic2 HW. In the
    current state, driver will incorrectly fetch the statistics for this
    revision.
    
    Fixes: 5cfd54d7dc186 ("net: atlantic: minimal A2 fw_ops")
    Signed-off-by: Dmitry Bogdanov <dbezrukov@marvell.com>
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 469d2288e059a76515d5f97529d091f5c2e3b958
Author: Sameer Saurabh <ssaurabh@marvell.com>
Date:   Mon Nov 29 05:28:27 2021 -0800

    Remove Half duplex mode speed capabilities.
    
    commit 03fa512189eb9b55ded5f3e81ad638315555b340 upstream.
    
    Since Half Duplex mode has been deprecated by the firmware, driver should
    not advertise Half Duplex speed in ethtool support link speed values.
    
    Fixes: 071a02046c262 ("net: atlantic: A2: half duplex support")
    Signed-off-by: Sameer Saurabh <ssaurabh@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b72830f1e30689f6fea5865c0283c599373a56c
Author: Nikita Danilov <ndanilov@aquantia.com>
Date:   Mon Nov 29 05:28:26 2021 -0800

    atlantic: Add missing DIDs and fix 115c.
    
    commit 413d5e09caa5a11da9c7d72401ba0588466a04c0 upstream.
    
    At the late production stages new dev ids were introduced. These are
    now in production, so its important for the driver to recognize these.
    And also fix the board caps for AQC115C adapter.
    
    Fixes: b3f0c79cba206 ("net: atlantic: A2 hw_ops skeleton")
    Signed-off-by: Nikita Danilov <ndanilov@aquantia.com>
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6816e0fa49f38fb1fe98e2854435e86831fb1f2b
Author: Sameer Saurabh <ssaurabh@marvell.com>
Date:   Mon Nov 29 05:28:25 2021 -0800

    atlantic: Fix to display FW bundle version instead of FW mac version.
    
    commit 2465c802232bc8d2b5bd83b55b08d05c11808704 upstream.
    
    The correct way to reflect firmware version is to use bundle version.
    Hence populating the same instead of MAC fw version.
    
    Fixes: c1be0bf092bd2 ("net: atlantic: common functions needed for basic A2 init/deinit hw_ops")
    Signed-off-by: Sameer Saurabh <ssaurabh@marvell.com>
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9df163300ae65f5961341f5bb341879091a0923
Author: Nikita Danilov <ndanilov@aquantia.com>
Date:   Mon Nov 29 05:28:24 2021 -0800

    atlatnic: enable Nbase-t speeds with base-t
    
    commit aa685acd98eae25d5351e30288d6cfb65b9c80a5 upstream.
    
    When 2.5G is advertised, N-Base should be advertised against the T-base
    caps. N5G is out of use in baseline code and driver should treat both 5G
    and N5G (and also 2.5G and N2.5G) equally from user perspective.
    
    Fixes: 5cfd54d7dc186 ("net: atlantic: minimal A2 fw_ops")
    Signed-off-by: Nikita Danilov <ndanilov@aquantia.com>
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da0027b4178d95ac77a9b48babe126277b644c21
Author: Dmitry Bogdanov <dbezrukov@marvell.com>
Date:   Mon Nov 29 05:28:23 2021 -0800

    atlantic: Increase delay for fw transactions
    
    commit aa1dcb5646fdf34a15763facf4bf5e482a2814ca upstream.
    
    The max waiting period (of 1 ms) while reading the data from FW shared
    buffer is too small for certain types of data (e.g., stats). There's a
    chance that FW could be updating buffer at the same time and driver
    would be unsuccessful in reading data. Firmware manual recommends to
    have 1 sec timeout to fix this issue.
    
    Fixes: 5cfd54d7dc186 ("net: atlantic: minimal A2 fw_ops")
    Signed-off-by: Dmitry Bogdanov <dbezrukov@marvell.com>
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e216e02befc363f258255c82a579a96e946aa9f2
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Nov 17 10:45:27 2021 +0100

    drm/vc4: kms: Fix previous HVS commit wait
    
    commit 6052a3110be208e547a4a8aeb184446199a16e8a upstream.
    
    Our current code is supposed to serialise the commits by waiting for all
    the drm_crtc_commits associated to the previous HVS state.
    
    However, assuming we have two CRTCs running and being configured and we
    configure each one alternately, we end up in a situation where we're
    not waiting at all.
    
    Indeed, starting with a state (state 0) where both CRTCs are running,
    and doing a commit (state 1) on the first CRTC (CRTC 0), we'll associate
    its commit to its assigned FIFO in vc4_hvs_state.
    
    If we get a new commit (state 2), this time affecting the second CRTC
    (CRTC 1), the DRM core will allow both commits to execute in parallel
    (assuming they don't have any share resources).
    
    Our code in vc4_atomic_commit_tail is supposed to make sure we only get
    one commit at a time and serialised by order of submission. It does so
    by using for_each_old_crtc_in_state, making sure that the CRTC has a
    FIFO assigned, is used, and has a commit pending. If it does, then we'll
    wait for the commit before going forward.
    
    During the transition from state 0 to state 1, as our old CRTC state we
    get the CRTC 0 state 0, its commit, we wait for it, everything works fine.
    
    During the transition from state 1 to state 2 though, the use of
    for_each_old_crtc_in_state is wrong. Indeed, while the code assumes it's
    returning the state of the CRTC in the old state (so CRTC 0 state 1), it
    actually returns the old state of the CRTC affected by the current
    commit, so CRTC 0 state 0 since it wasn't part of state 1.
    
    Due to this, if we alternate between the configuration of CRTC 0 and
    CRTC 1, we never actually wait for anything since we should be waiting
    on the other every time, but it never is affected by the previous
    commit.
    
    Change the logic to, at every commit, look at every FIFO in the previous
    HVS state, and if it's in use and has a commit associated to it, wait
    for that commit.
    
    Fixes: 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a commit")
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Tested-by: Jian-Hong Pan <jhp@endlessos.org>
    Link: https://lore.kernel.org/r/20211117094527.146275-7-maxime@cerno.tech
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aeadbd778d66e56cb122efa1e016b62ea1ce62b4
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Nov 17 10:45:26 2021 +0100

    drm/vc4: kms: Don't duplicate pending commit
    
    commit d354699e2292c60f25496d3c31ce4e7b1563b899 upstream.
    
    Our HVS global state, when duplicated, will also copy the pointer to the
    drm_crtc_commit (and increase the reference count) for each FIFO if the
    pointer is not NULL.
    
    However, our atomic_setup function will overwrite that pointer without
    putting the reference back leading to a memory leak.
    
    Since the commit is only relevant during the atomic commit process, it
    doesn't make sense to duplicate the reference to the commit anyway.
    Let's remove it.
    
    Fixes: 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a commit")
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Tested-by: Jian-Hong Pan <jhp@endlessos.org>
    Link: https://lore.kernel.org/r/20211117094527.146275-6-maxime@cerno.tech
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2931db9a5ed219546cf2ae0546698faf78281b89
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Nov 17 10:45:25 2021 +0100

    drm/vc4: kms: Clear the HVS FIFO commit pointer once done
    
    commit d134c5ff71c7f2320fc7997f2fbbdedf0c76889a upstream.
    
    Commit 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a
    commit") introduced a wait on the previous commit done on a given HVS
    FIFO.
    
    However, we never cleared that pointer once done. Since
    drm_crtc_commit_put can free the drm_crtc_commit structure directly if
    we were the last user, this means that it can lead to a use-after free
    if we were to duplicate the state, and that stale pointer would even be
    copied to the new state.
    
    Set the pointer to NULL once we're done with the wait so that we don't
    carry over a pointer to a free'd structure.
    
    Fixes: 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a commit")
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Tested-by: Jian-Hong Pan <jhp@endlessos.org>
    Link: https://lore.kernel.org/r/20211117094527.146275-5-maxime@cerno.tech
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53f9601e908d42481addd67cdb01a9288c611124
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Nov 17 10:45:24 2021 +0100

    drm/vc4: kms: Add missing drm_crtc_commit_put
    
    commit 049cfff8d53a30cae3349ff71a4c01b7d9981bc2 upstream.
    
    Commit 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a
    commit") introduced a global state for the HVS, with each FIFO storing
    the current CRTC commit so that we can properly synchronize commits.
    
    However, the refcounting was off and we thus ended up leaking the
    drm_crtc_commit structure every commit. Add a drm_crtc_commit_put to
    prevent the leakage.
    
    Fixes: 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a commit")
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Tested-by: Jian-Hong Pan <jhp@endlessos.org>
    Link: https://lore.kernel.org/r/20211117094527.146275-4-maxime@cerno.tech
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b044180fcb3858a35daffe1bf70cc4b7d966173d
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Nov 17 10:45:23 2021 +0100

    drm/vc4: kms: Fix return code check
    
    commit f927767978d201d4ac023fcd797adbb963a6565d upstream.
    
    The HVS global state functions return an error pointer, but in most
    cases we check if it's NULL, possibly resulting in an invalid pointer
    dereference.
    
    Fixes: 9ec03d7f1ed3 ("drm/vc4: kms: Wait on previous FIFO users before a commit")
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Tested-by: Jian-Hong Pan <jhp@endlessos.org>
    Link: https://lore.kernel.org/r/20211117094527.146275-3-maxime@cerno.tech
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd7bfba0112d4828dd6dc555629853ec30d187b3
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Wed Nov 17 10:45:22 2021 +0100

    drm/vc4: kms: Wait for the commit before increasing our clock rate
    
    commit 0c980a006d3fbee86c4d0698f66d6f5381831787 upstream.
    
    Several DRM/KMS atomic commits can run in parallel if they affect
    different CRTC. These commits share the global HVS state, so we have
    some code to make sure we run commits in sequence. This synchronization
    code is one of the first thing that runs in vc4_atomic_commit_tail().
    
    Another constraints we have is that we need to make sure the HVS clock
    gets a boost during the commit. That code relies on clk_set_min_rate and
    will remove the old minimum and set a new one. We also need another,
    temporary, minimum for the duration of the commit.
    
    The algorithm is thus to set a temporary minimum, drop the previous
    one, do the commit, and finally set the minimum for the current mode.
    
    However, the part that sets the temporary minimum and drops the older
    one runs before the commit synchronization code.
    
    Thus, under the proper conditions, we can end up mixing up the minimums
    and ending up with the wrong one for our current step.
    
    To avoid it, let's move the clock setup in the protected section.
    
    Fixes: d7d96c00e585 ("drm/vc4: hvs: Boost the core clock during modeset")
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Tested-by: Jian-Hong Pan <jhp@endlessos.org>
    Link: https://lore.kernel.org/r/20211117094527.146275-2-maxime@cerno.tech
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cae481575f5eb378a921d65d514c72988d9747a
Author: Rob Clark <robdclark@chromium.org>
Date:   Mon Nov 8 10:01:22 2021 -0800

    drm/msm: Do hw_init() before capturing GPU state
    
    commit e4840d537c2c6b1189d4de16ee0f4820e069dcea upstream.
    
    In particular, we need to ensure all the necessary blocks are switched
    to 64b mode (a5xx+) otherwise the high bits of the address of the BO to
    snapshot state into will be ignored, resulting in:
    
      *** gpu fault: ttbr0=0000000000000000 iova=0000000000012000 dir=READ type=TRANSLATION source=CP (0,0,0,0)
      platform 506a000.gmu: [drm:a6xx_gmu_set_oob] *ERROR* Timeout waiting for GMU OOB set BOOT_SLUMBER: 0x0
    
    Fixes: 4f776f4511c7 ("drm/msm/gpu: Convert the GPU show function to use the GPU state")
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Link: https://lore.kernel.org/r/20211108180122.487859-1-robdclark@gmail.com
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83e54fcf0b14ca2d869dd37abe1bb6542805f538
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Nov 3 15:31:08 2021 -0700

    drm/msm/a6xx: Allocate enough space for GMU registers
    
    commit b4d25abf9720b69a03465b09d0d62d1998ed6708 upstream.
    
    In commit 142639a52a01 ("drm/msm/a6xx: fix crashstate capture for
    A650") we changed a6xx_get_gmu_registers() to read 3 sets of
    registers. Unfortunately, we didn't change the memory allocation for
    the array. That leads to a KASAN warning (this was on the chromeos-5.4
    kernel, which has the problematic commit backported to it):
    
      BUG: KASAN: slab-out-of-bounds in _a6xx_get_gmu_registers+0x144/0x430
      Write of size 8 at addr ffffff80c89432b0 by task A618-worker/209
      CPU: 5 PID: 209 Comm: A618-worker Tainted: G        W         5.4.156-lockdep #22
      Hardware name: Google Lazor Limozeen without Touchscreen (rev5 - rev8) (DT)
      Call trace:
       dump_backtrace+0x0/0x248
       show_stack+0x20/0x2c
       dump_stack+0x128/0x1ec
       print_address_description+0x88/0x4a0
       __kasan_report+0xfc/0x120
       kasan_report+0x10/0x18
       __asan_report_store8_noabort+0x1c/0x24
       _a6xx_get_gmu_registers+0x144/0x430
       a6xx_gpu_state_get+0x330/0x25d4
       msm_gpu_crashstate_capture+0xa0/0x84c
       recover_worker+0x328/0x838
       kthread_worker_fn+0x32c/0x574
       kthread+0x2dc/0x39c
       ret_from_fork+0x10/0x18
    
      Allocated by task 209:
       __kasan_kmalloc+0xfc/0x1c4
       kasan_kmalloc+0xc/0x14
       kmem_cache_alloc_trace+0x1f0/0x2a0
       a6xx_gpu_state_get+0x164/0x25d4
       msm_gpu_crashstate_capture+0xa0/0x84c
       recover_worker+0x328/0x838
       kthread_worker_fn+0x32c/0x574
       kthread+0x2dc/0x39c
       ret_from_fork+0x10/0x18
    
    Fixes: 142639a52a01 ("drm/msm/a6xx: fix crashstate capture for A650")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20211103153049.1.Idfa574ccb529d17b69db3a1852e49b580132035c@changeid
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a3db121f999515beaa12ee99b30a58e063793bf
Author: Tony Lu <tonylu@linux.alibaba.com>
Date:   Wed Dec 1 14:42:16 2021 +0800

    net/smc: Keep smc_close_final rc during active close
    
    commit 00e158fb91dfaff3f94746f260d11f1a4853506e upstream.
    
    When smc_close_final() returns error, the return code overwrites by
    kernel_sock_shutdown() in smc_close_active(). The return code of
    smc_close_final() is more important than kernel_sock_shutdown(), and it
    will pass to userspace directly.
    
    Fix it by keeping both return codes, if smc_close_final() raises an
    error, return it or kernel_sock_shutdown()'s.
    
    Link: https://lore.kernel.org/linux-s390/1f67548e-cbf6-0dce-82b5-10288a4583bd@linux.ibm.com/
    Fixes: 606a63c9783a ("net/smc: Ensure the active closing peer first closes clcsock")
    Suggested-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Wen Gu <guwen@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b44a55ee25efb2bdad370c2bb476663a66282c66
Author: William Kucharski <william.kucharski@oracle.com>
Date:   Wed Dec 1 07:45:22 2021 -0700

    net/rds: correct socket tunable error in rds_tcp_tune()
    
    commit 19f36edf14bcdb783aef3af8217df96f76a8ce34 upstream.
    
    Correct an error where setting /proc/sys/net/rds/tcp/rds_tcp_rcvbuf would
    instead modify the socket's sk_sndbuf and would leave sk_rcvbuf untouched.
    
    Fixes: c6a58ffed536 ("RDS: TCP: Add sysctl tunables for sndbuf/rcvbuf on rds-tcp socket")
    Signed-off-by: William Kucharski <william.kucharski@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95518fe354d712dca6f431cf2a11b8f63bc9a66c
Author: Dust Li <dust.li@linux.alibaba.com>
Date:   Wed Dec 1 11:02:30 2021 +0800

    net/smc: fix wrong list_del in smc_lgr_cleanup_early
    
    commit 789b6cc2a5f9123b9c549b886fdc47c865cfe0ba upstream.
    
    smc_lgr_cleanup_early() meant to delete the link
    group from the link group list, but it deleted
    the list head by mistake.
    
    This may cause memory corruption since we didn't
    remove the real link group from the list and later
    memseted the link group structure.
    We got a list corruption panic when testing:
    
    [  231.277259] list_del corruption. prev->next should be ffff8881398a8000, but was 0000000000000000
    [  231.278222] ------------[ cut here ]------------
    [  231.278726] kernel BUG at lib/list_debug.c:53!
    [  231.279326] invalid opcode: 0000 [#1] SMP NOPTI
    [  231.279803] CPU: 0 PID: 5 Comm: kworker/0:0 Not tainted 5.10.46+ #435
    [  231.280466] Hardware name: Alibaba Cloud ECS, BIOS 8c24b4c 04/01/2014
    [  231.281248] Workqueue: events smc_link_down_work
    [  231.281732] RIP: 0010:__list_del_entry_valid+0x70/0x90
    [  231.282258] Code: 4c 60 82 e8 7d cc 6a 00 0f 0b 48 89 fe 48 c7 c7 88 4c
    60 82 e8 6c cc 6a 00 0f 0b 48 89 fe 48 c7 c7 c0 4c 60 82 e8 5b cc 6a 00 <0f>
    0b 48 89 fe 48 c7 c7 00 4d 60 82 e8 4a cc 6a 00 0f 0b cc cc cc
    [  231.284146] RSP: 0018:ffffc90000033d58 EFLAGS: 00010292
    [  231.284685] RAX: 0000000000000054 RBX: ffff8881398a8000 RCX: 0000000000000000
    [  231.285415] RDX: 0000000000000001 RSI: ffff88813bc18040 RDI: ffff88813bc18040
    [  231.286141] RBP: ffffffff8305ad40 R08: 0000000000000003 R09: 0000000000000001
    [  231.286873] R10: ffffffff82803da0 R11: ffffc90000033b90 R12: 0000000000000001
    [  231.287606] R13: 0000000000000000 R14: ffff8881398a8000 R15: 0000000000000003
    [  231.288337] FS:  0000000000000000(0000) GS:ffff88813bc00000(0000) knlGS:0000000000000000
    [  231.289160] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  231.289754] CR2: 0000000000e72058 CR3: 000000010fa96006 CR4: 00000000003706f0
    [  231.290485] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  231.291211] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  231.291940] Call Trace:
    [  231.292211]  smc_lgr_terminate_sched+0x53/0xa0
    [  231.292677]  smc_switch_conns+0x75/0x6b0
    [  231.293085]  ? update_load_avg+0x1a6/0x590
    [  231.293517]  ? ttwu_do_wakeup+0x17/0x150
    [  231.293907]  ? update_load_avg+0x1a6/0x590
    [  231.294317]  ? newidle_balance+0xca/0x3d0
    [  231.294716]  smcr_link_down+0x50/0x1a0
    [  231.295090]  ? __wake_up_common_lock+0x77/0x90
    [  231.295534]  smc_link_down_work+0x46/0x60
    [  231.295933]  process_one_work+0x18b/0x350
    
    Fixes: a0a62ee15a829 ("net/smc: separate locks for SMCD and SMCR link group lists")
    Signed-off-by: Dust Li <dust.li@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 170739c45e374bb11963e67d3e926ee0cc300322
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 1 18:26:35 2021 -0800

    ipv4: convert fib_num_tclassid_users to atomic_t
    
    commit 213f5f8f31f10aa1e83187ae20fb7fa4e626b724 upstream.
    
    Before commit faa041a40b9f ("ipv4: Create cleanup helper for fib_nh")
    changes to net->ipv4.fib_num_tclassid_users were protected by RTNL.
    
    After the change, this is no longer the case, as free_fib_info_rcu()
    runs after rcu grace period, without rtnl being held.
    
    Fixes: faa041a40b9f ("ipv4: Create cleanup helper for fib_nh")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: David Ahern <dsahern@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94782c8ffd075661501f86254f26d53a01a160f9
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Nov 30 09:01:55 2021 -0800

    net: annotate data-races on txq->xmit_lock_owner
    
    commit 7a10d8c810cfad3e79372d7d1c77899d86cd6662 upstream.
    
    syzbot found that __dev_queue_xmit() is reading txq->xmit_lock_owner
    without annotations.
    
    No serious issue there, let's document what is happening there.
    
    BUG: KCSAN: data-race in __dev_queue_xmit / __dev_queue_xmit
    
    write to 0xffff888139d09484 of 4 bytes by interrupt on cpu 0:
     __netif_tx_unlock include/linux/netdevice.h:4437 [inline]
     __dev_queue_xmit+0x948/0xf70 net/core/dev.c:4229
     dev_queue_xmit_accel+0x19/0x20 net/core/dev.c:4265
     macvlan_queue_xmit drivers/net/macvlan.c:543 [inline]
     macvlan_start_xmit+0x2b3/0x3d0 drivers/net/macvlan.c:567
     __netdev_start_xmit include/linux/netdevice.h:4987 [inline]
     netdev_start_xmit include/linux/netdevice.h:5001 [inline]
     xmit_one+0x105/0x2f0 net/core/dev.c:3590
     dev_hard_start_xmit+0x72/0x120 net/core/dev.c:3606
     sch_direct_xmit+0x1b2/0x7c0 net/sched/sch_generic.c:342
     __dev_xmit_skb+0x83d/0x1370 net/core/dev.c:3817
     __dev_queue_xmit+0x590/0xf70 net/core/dev.c:4194
     dev_queue_xmit+0x13/0x20 net/core/dev.c:4259
     neigh_hh_output include/net/neighbour.h:511 [inline]
     neigh_output include/net/neighbour.h:525 [inline]
     ip6_finish_output2+0x995/0xbb0 net/ipv6/ip6_output.c:126
     __ip6_finish_output net/ipv6/ip6_output.c:191 [inline]
     ip6_finish_output+0x444/0x4c0 net/ipv6/ip6_output.c:201
     NF_HOOK_COND include/linux/netfilter.h:296 [inline]
     ip6_output+0x10e/0x210 net/ipv6/ip6_output.c:224
     dst_output include/net/dst.h:450 [inline]
     NF_HOOK include/linux/netfilter.h:307 [inline]
     ndisc_send_skb+0x486/0x610 net/ipv6/ndisc.c:508
     ndisc_send_rs+0x3b0/0x3e0 net/ipv6/ndisc.c:702
     addrconf_rs_timer+0x370/0x540 net/ipv6/addrconf.c:3898
     call_timer_fn+0x2e/0x240 kernel/time/timer.c:1421
     expire_timers+0x116/0x240 kernel/time/timer.c:1466
     __run_timers+0x368/0x410 kernel/time/timer.c:1734
     run_timer_softirq+0x2e/0x60 kernel/time/timer.c:1747
     __do_softirq+0x158/0x2de kernel/softirq.c:558
     __irq_exit_rcu kernel/softirq.c:636 [inline]
     irq_exit_rcu+0x37/0x70 kernel/softirq.c:648
     sysvec_apic_timer_interrupt+0x3e/0xb0 arch/x86/kernel/apic/apic.c:1097
     asm_sysvec_apic_timer_interrupt+0x12/0x20
    
    read to 0xffff888139d09484 of 4 bytes by interrupt on cpu 1:
     __dev_queue_xmit+0x5e3/0xf70 net/core/dev.c:4213
     dev_queue_xmit_accel+0x19/0x20 net/core/dev.c:4265
     macvlan_queue_xmit drivers/net/macvlan.c:543 [inline]
     macvlan_start_xmit+0x2b3/0x3d0 drivers/net/macvlan.c:567
     __netdev_start_xmit include/linux/netdevice.h:4987 [inline]
     netdev_start_xmit include/linux/netdevice.h:5001 [inline]
     xmit_one+0x105/0x2f0 net/core/dev.c:3590
     dev_hard_start_xmit+0x72/0x120 net/core/dev.c:3606
     sch_direct_xmit+0x1b2/0x7c0 net/sched/sch_generic.c:342
     __dev_xmit_skb+0x83d/0x1370 net/core/dev.c:3817
     __dev_queue_xmit+0x590/0xf70 net/core/dev.c:4194
     dev_queue_xmit+0x13/0x20 net/core/dev.c:4259
     neigh_resolve_output+0x3db/0x410 net/core/neighbour.c:1523
     neigh_output include/net/neighbour.h:527 [inline]
     ip6_finish_output2+0x9be/0xbb0 net/ipv6/ip6_output.c:126
     __ip6_finish_output net/ipv6/ip6_output.c:191 [inline]
     ip6_finish_output+0x444/0x4c0 net/ipv6/ip6_output.c:201
     NF_HOOK_COND include/linux/netfilter.h:296 [inline]
     ip6_output+0x10e/0x210 net/ipv6/ip6_output.c:224
     dst_output include/net/dst.h:450 [inline]
     NF_HOOK include/linux/netfilter.h:307 [inline]
     ndisc_send_skb+0x486/0x610 net/ipv6/ndisc.c:508
     ndisc_send_rs+0x3b0/0x3e0 net/ipv6/ndisc.c:702
     addrconf_rs_timer+0x370/0x540 net/ipv6/addrconf.c:3898
     call_timer_fn+0x2e/0x240 kernel/time/timer.c:1421
     expire_timers+0x116/0x240 kernel/time/timer.c:1466
     __run_timers+0x368/0x410 kernel/time/timer.c:1734
     run_timer_softirq+0x2e/0x60 kernel/time/timer.c:1747
     __do_softirq+0x158/0x2de kernel/softirq.c:558
     __irq_exit_rcu kernel/softirq.c:636 [inline]
     irq_exit_rcu+0x37/0x70 kernel/softirq.c:648
     sysvec_apic_timer_interrupt+0x8d/0xb0 arch/x86/kernel/apic/apic.c:1097
     asm_sysvec_apic_timer_interrupt+0x12/0x20
     kcsan_setup_watchpoint+0x94/0x420 kernel/kcsan/core.c:443
     folio_test_anon include/linux/page-flags.h:581 [inline]
     PageAnon include/linux/page-flags.h:586 [inline]
     zap_pte_range+0x5ac/0x10e0 mm/memory.c:1347
     zap_pmd_range mm/memory.c:1467 [inline]
     zap_pud_range mm/memory.c:1496 [inline]
     zap_p4d_range mm/memory.c:1517 [inline]
     unmap_page_range+0x2dc/0x3d0 mm/memory.c:1538
     unmap_single_vma+0x157/0x210 mm/memory.c:1583
     unmap_vmas+0xd0/0x180 mm/memory.c:1615
     exit_mmap+0x23d/0x470 mm/mmap.c:3170
     __mmput+0x27/0x1b0 kernel/fork.c:1113
     mmput+0x3d/0x50 kernel/fork.c:1134
     exit_mm+0xdb/0x170 kernel/exit.c:507
     do_exit+0x608/0x17a0 kernel/exit.c:819
     do_group_exit+0xce/0x180 kernel/exit.c:929
     get_signal+0xfc3/0x1550 kernel/signal.c:2852
     arch_do_signal_or_restart+0x8c/0x2e0 arch/x86/kernel/signal.c:868
     handle_signal_work kernel/entry/common.c:148 [inline]
     exit_to_user_mode_loop kernel/entry/common.c:172 [inline]
     exit_to_user_mode_prepare+0x113/0x190 kernel/entry/common.c:207
     __syscall_exit_to_user_mode_work kernel/entry/common.c:289 [inline]
     syscall_exit_to_user_mode+0x20/0x40 kernel/entry/common.c:300
     do_syscall_64+0x50/0xd0 arch/x86/entry/common.c:86
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0x00000000 -> 0xffffffff
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 28712 Comm: syz-executor.0 Tainted: G        W         5.16.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20211130170155.2331929-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c0ddef45b7e3dbe3ed073695d20faa572b7056a
Author: Zhou Qingyang <zhou1615@umn.edu>
Date:   Wed Dec 1 00:50:39 2021 +0800

    octeontx2-af: Fix a memleak bug in rvu_mbox_init()
    
    commit e07a097b4986afb8f925d0bb32612e1d3e88ce15 upstream.
    
    In rvu_mbox_init(), mbox_regions is not freed or passed out
    under the switch-default region, which could lead to a memory leak.
    
    Fix this bug by changing 'return err' to 'goto free_regions'.
    
    This bug was found by a static analyzer. The analysis employs
    differential checking to identify inconsistent security operations
    (e.g., checks or kfrees) between two code paths and confirms that the
    inconsistent operations are not recovered in the current function or
    the callers, so they constitute bugs.
    
    Note that, as a bug found by static analysis, it can be a false
    positive or hard to trigger. Multiple researchers have cross-reviewed
    the bug.
    
    Builds with CONFIG_OCTEONTX2_AF=y show no new warnings,
    and our static analyzer no longer warns about this code.
    
    Fixes: 98c561116360 (“octeontx2-af: cn10k: Add mbox support for CN10K platform”)
    Signed-off-by: Zhou Qingyang <zhou1615@umn.edu>
    Link: https://lore.kernel.org/r/20211130165039.192426-1-zhou1615@umn.edu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e83fb96f915a01023c5734996b347fb7a7aba202
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Tue Nov 30 12:05:54 2021 +0800

    dpaa2-eth: destroy workqueue at the end of remove function
    
    commit f4a8adbfe4841491b60c14fe610571e1422359f9 upstream.
    
    The commit c55211892f46 ("dpaa2-eth: support PTP Sync packet one-step
    timestamping") forgets to destroy workqueue at the end of remove
    function.
    
    Fix this by adding destroy_workqueue before fsl_mc_portal_free and
    free_netdev.
    
    Fixes: c55211892f46 ("dpaa2-eth: support PTP Sync packet one-step timestamping")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 686578a1bac1251dfaf7c3db98d6d1802cc8d6cc
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Nov 29 22:53:27 2021 +0100

    net: marvell: mvpp2: Fix the computation of shared CPUs
    
    commit b83f5ac7d922e69a109261f5f940eebbd4e514c4 upstream.
    
    'bitmap_fill()' fills a bitmap one 'long' at a time.
    It is likely that an exact number of bits is expected.
    
    Use 'bitmap_set()' instead in order not to set unexpected bits.
    
    Fixes: e531f76757eb ("net: mvpp2: handle cases where more CPUs are available than s/w threads")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 231117a527131922263f109abbd3f958764b72bc
Author: Sven Schuchmann <schuchmann@schleissheimer.de>
Date:   Sat Nov 27 11:47:07 2021 +0100

    net: usb: lan78xx: lan78xx_phy_init(): use PHY_POLL instead of "0" if no IRQ is available
    
    commit 817b653160db9852d5a0498a31f047e18ce27e5b upstream.
    
    On most systems request for IRQ 0 will fail, phylib will print an error message
    and fall back to polling. To fix this set the phydev->irq to PHY_POLL if no IRQ
    is available.
    
    Fixes: cc89c323a30e ("lan78xx: Use irq_domain for phy interrupt from USB Int. EP")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Sven Schuchmann <schuchmann@schleissheimer.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 823ae758c0f3f787811b57c13e359f1b3d3877b5
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Fri Nov 26 16:51:15 2021 +0100

    net: stmmac: Avoid DMA_CHAN_CONTROL write if no Split Header support
    
    commit f8e7dfd6fdabb831846ab1970a875746559d491b upstream.
    
    The driver assumes that split headers can be enabled/disabled without
    stopping/starting the device, so it writes DMA_CHAN_CONTROL from
    stmmac_set_features().  However, on my system (IP v5.10a without Split
    Header support), simply writing DMA_CHAN_CONTROL when DMA is running
    (for example, with the commands below) leads to a TX watchdog timeout.
    
     host$ socat TCP-LISTEN:1024,fork,reuseaddr - &
     device$ ethtool -K eth0 tso off
     device$ ethtool -K eth0 tso on
     device$ dd if=/dev/zero bs=1M count=10 | socat - TCP4:host:1024
     <tx watchdog timeout>
    
    Note that since my IP is configured without Split Header support, the
    driver always just reads and writes the same value to the
    DMA_CHAN_CONTROL register.
    
    I don't have access to any platforms with Split Header support so I
    don't know if these writes to the DMA_CHAN_CONTROL while DMA is running
    actually work properly on such systems.  I could not find anything in
    the databook that says that DMA_CHAN_CONTROL should not be written when
    the DMA is running.
    
    But on systems without Split Header support, there is in any case no
    need to call enable_sph() in stmmac_set_features() at all since SPH can
    never be toggled, so we can avoid the watchdog timeout there by skipping
    this call.
    
    Fixes: 8c6fc097a2f4acf ("net: stmmac: gmac4+: Add Split Header support")
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a927f9dfd0d92b74800fe634b383851b58fa3b62
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Nov 22 17:22:54 2021 -0600

    ALSA: intel-dsp-config: add quirk for CML devices based on ES8336 codec
    
    commit ae26c08e6c8071ba8febb0c7c0829da96c75248c upstream.
    
    We've added quirks for ESS8336 but missed CML, add quirks for both LP
    and H versions.
    
    BugLink: https://github.com/thesofproject/linux/issues/3248
    Fixes: 9d36ceab9415 ("ALSA: intel-dsp-config: add quirk for APL/GLK/TGL devices based on ES8336 codec")
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20211122232254.23362-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9469273e616ca8f1b6e3773c5019f21b4c8d828c
Author: Eiichi Tsukata <eiichi.tsukata@nutanix.com>
Date:   Sun Nov 21 04:16:08 2021 +0000

    rxrpc: Fix rxrpc_local leak in rxrpc_lookup_peer()
    
    commit beacff50edbd6c9659a6f15fc7f6126909fade29 upstream.
    
    Need to call rxrpc_put_local() for peer candidate before kfree() as it
    holds a ref to rxrpc_local.
    
    [DH: v2: Changed to abstract the peer freeing code out into a function]
    
    Fixes: 9ebeddef58c4 ("rxrpc: rxrpc_peer needs to hold a ref on the rxrpc_local record")
    Signed-off-by: Eiichi Tsukata <eiichi.tsukata@nutanix.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Link: https://lore.kernel.org/all/20211121041608.133740-2-eiichi.tsukata@nutanix.com/ # v1
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc97458620e38961af9505cc060ad4cf5c9e4af7
Author: Eiichi Tsukata <eiichi.tsukata@nutanix.com>
Date:   Sun Nov 21 04:16:07 2021 +0000

    rxrpc: Fix rxrpc_peer leak in rxrpc_look_up_bundle()
    
    commit ca77fba821351190777b236ce749d7c4d353102e upstream.
    
    Need to call rxrpc_put_peer() for bundle candidate before kfree() as it
    holds a ref to rxrpc_peer.
    
    [DH: v2: Changed to abstract out the bundle freeing code into a function]
    
    Fixes: 245500d853e9 ("rxrpc: Rewrite the client connection manager")
    Signed-off-by: Eiichi Tsukata <eiichi.tsukata@nutanix.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Link: https://lore.kernel.org/r/20211121041608.133740-1-eiichi.tsukata@nutanix.com/ # v1
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f50dcc9d14f5f9e0edee70a639b00328512cc7a4
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:37:06 2021 +0530

    ASoC: tegra: Fix kcontrol put callback in AHUB
    
    commit a4e37950c9e9b126f9cbee79b8ab94a94646dcf1 upstream.
    
    The kcontrol put callback is expected to return 1 when there is change
    in HW or when the update is acknowledged by driver. This would ensure
    that change notifications are sent to subscribed applications. Update
    the AHUB driver accordingly.
    
    Fixes: 16e1bcc2caf4 ("ASoC: tegra: Add Tegra210 based AHUB driver")
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Suggested-by: Jaroslav Kysela <perex@perex.cz>
    Suggested-by: Mark Brown <broonie@kernel.org>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-12-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e13772cfb25d2dd5c1b27fb29816398248c4a5d0
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:37:05 2021 +0530

    ASoC: tegra: Fix kcontrol put callback in DSPK
    
    commit d6202a57e79d102271d38c34481fedc9d4c79694 upstream.
    
    The kcontrol put callback is expected to return 1 when there is change
    in HW or when the update is acknowledged by driver. This would ensure
    that change notifications are sent to subscribed applications. Update
    the DSPK driver accordingly.
    
    Fixes: 327ef6470266 ("ASoC: tegra: Add Tegra186 based DSPK driver")
    Suggested-by: Jaroslav Kysela <perex@perex.cz>
    Suggested-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-11-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1686d2e9edb280bdf5b7b82650ae177726c9cda3
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:37:04 2021 +0530

    ASoC: tegra: Fix kcontrol put callback in DMIC
    
    commit a347dfa10262fa0a10e2b1970ea0194e3d4a3251 upstream.
    
    The kcontrol put callback is expected to return 1 when there is change
    in HW or when the update is acknowledged by driver. This would ensure
    that change notifications are sent to subscribed applications. Update
    the DMIC driver accordingly.
    
    Fixes: 8c8ff982e9e2 ("ASoC: tegra: Add Tegra210 based DMIC driver")
    Suggested-by: Jaroslav Kysela <perex@perex.cz>
    Suggested-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-10-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6186c773572977573f0e9622d2d9be42836183b
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:37:03 2021 +0530

    ASoC: tegra: Fix kcontrol put callback in I2S
    
    commit f21a9df3f7cb0005947679d7b9237c90574e229a upstream.
    
    The kcontrol put callback is expected to return 1 when there is change
    in HW or when the update is acknowledged by driver. This would ensure
    that change notifications are sent to subscribed applications. Update
    the I2S driver accordingly.
    
    Fixes: c0bfa98349d1 ("ASoC: tegra: Add Tegra210 based I2S driver")
    Suggested-by: Jaroslav Kysela <perex@perex.cz>
    Suggested-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-9-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b77bdff45ffccdd37727446acee1a6882951be1
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:37:02 2021 +0530

    ASoC: tegra: Fix kcontrol put callback in ADMAIF
    
    commit e2b87a18a60c02d0dcd1de801d669587e516cc4d upstream.
    
    The kcontrol put callback is expected to return 1 when there is change
    in HW or when the update is acknowledged by driver. This would ensure
    that change notifications are sent to subscribed applications. Update
    the ADMAIF driver accordingly.
    
    Fixes: f74028e159bb ("ASoC: tegra: Add Tegra210 based ADMAIF driver")
    Suggested-by: Jaroslav Kysela <perex@perex.cz>
    Suggested-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-8-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0730b6051535c29c374ea126a9924f6a50ce0bc
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:36:59 2021 +0530

    ASoC: tegra: Fix wrong value type in DSPK
    
    commit 3aa0d5c8bb3f5ef622ec2764823f551a1f630711 upstream.
    
    The enum controls are expected to use enumerated value type.
    Update relevant references in control get/put callbacks.
    
    Fixes: 327ef6470266 ("ASoC: tegra: Add Tegra186 based DSPK driver")
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-5-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e83ca5d78bbcf2bb1051697cd5ead0ba7b770c1
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:36:58 2021 +0530

    ASoC: tegra: Fix wrong value type in DMIC
    
    commit 559d234569a998a4004de1bd1f12da5487fb826e upstream.
    
    The enum controls are expected to use enumerated value type.
    Update relevant references in control get/put callbacks.
    
    Fixes: 8c8ff982e9e2 ("ASoC: tegra: Add Tegra210 based DMIC driver")
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-4-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36358b208cdb2709b94c3f6d6d021c2d6ba412b7
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:36:57 2021 +0530

    ASoC: tegra: Fix wrong value type in I2S
    
    commit 8a2c2fa0c5331445c801e9241f2bb4e0e2a895a8 upstream.
    
    The enum controls are expected to use enumerated value type.
    Update relevant references in control get/put callbacks.
    
    Fixes: c0bfa98349d1 ("ASoC: tegra: Add Tegra210 based I2S driver")
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-3-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3f65b7688801cb6e5b6fe157e3a9decfc9b60f0
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Nov 18 12:36:56 2021 +0530

    ASoC: tegra: Fix wrong value type in ADMAIF
    
    commit 884c6cb3b7030f75c46e55b9e625d2372708c306 upstream.
    
    The enum controls are expected to use enumerated value type.
    Update relevant references in control get/put callbacks.
    
    Fixes: f74028e159bb ("ASoC: tegra: Add Tegra210 based ADMAIF driver")
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/1637219231-406-2-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14b03b8cebdf18ff13c39d58501b625411314de2
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Thu Nov 18 13:47:48 2021 +0100

    mt76: mt7915: fix NULL pointer dereference in mt7915_get_phy_mode
    
    commit 6e53d6d26920d5221d3f4d4f5ffdd629ea69aa5c upstream.
    
    Fix the following NULL pointer dereference in mt7915_get_phy_mode
    routine adding an ibss interface to the mt7915 driver.
    
    [  101.137097] wlan0: Trigger new scan to find an IBSS to join
    [  102.827039] wlan0: Creating new IBSS network, BSSID 26:a4:50:1a:6e:69
    [  103.064756] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
    [  103.073670] Mem abort info:
    [  103.076520]   ESR = 0x96000005
    [  103.079614]   EC = 0x25: DABT (current EL), IL = 32 bits
    [  103.084934]   SET = 0, FnV = 0
    [  103.088042]   EA = 0, S1PTW = 0
    [  103.091215] Data abort info:
    [  103.094104]   ISV = 0, ISS = 0x00000005
    [  103.098041]   CM = 0, WnR = 0
    [  103.101044] user pgtable: 4k pages, 39-bit VAs, pgdp=00000000460b1000
    [  103.107565] [0000000000000000] pgd=0000000000000000, p4d=0000000000000000, pud=0000000000000000
    [  103.116590] Internal error: Oops: 96000005 [#1] SMP
    [  103.189066] CPU: 1 PID: 333 Comm: kworker/u4:3 Not tainted 5.10.75 #0
    [  103.195498] Hardware name: MediaTek MT7622 RFB1 board (DT)
    [  103.201124] Workqueue: phy0 ieee80211_iface_work [mac80211]
    [  103.206695] pstate: 20000005 (nzCv daif -PAN -UAO -TCO BTYPE=--)
    [  103.212705] pc : mt7915_get_phy_mode+0x68/0x120 [mt7915e]
    [  103.218103] lr : mt7915_mcu_add_bss_info+0x11c/0x760 [mt7915e]
    [  103.223927] sp : ffffffc011cdb9e0
    [  103.227235] x29: ffffffc011cdb9e0 x28: ffffff8006563098
    [  103.232545] x27: ffffff8005f4da22 x26: ffffff800685ac40
    [  103.237855] x25: 0000000000000001 x24: 000000000000011f
    [  103.243165] x23: ffffff8005f4e260 x22: ffffff8006567918
    [  103.248475] x21: ffffff8005f4df80 x20: ffffff800685ac58
    [  103.253785] x19: ffffff8006744400 x18: 0000000000000000
    [  103.259094] x17: 0000000000000000 x16: 0000000000000001
    [  103.264403] x15: 000899c3a2d9d2e4 x14: 000899bdc3c3a1c8
    [  103.269713] x13: 0000000000000000 x12: 0000000000000000
    [  103.275024] x11: ffffffc010e30c20 x10: 0000000000000000
    [  103.280333] x9 : 0000000000000050 x8 : ffffff8006567d88
    [  103.285642] x7 : ffffff8006563b5c x6 : ffffff8006563b44
    [  103.290952] x5 : 0000000000000002 x4 : 0000000000000001
    [  103.296262] x3 : 0000000000000001 x2 : 0000000000000001
    [  103.301572] x1 : 0000000000000000 x0 : 0000000000000011
    [  103.306882] Call trace:
    [  103.309328]  mt7915_get_phy_mode+0x68/0x120 [mt7915e]
    [  103.314378]  mt7915_bss_info_changed+0x198/0x200 [mt7915e]
    [  103.319941]  ieee80211_bss_info_change_notify+0x128/0x290 [mac80211]
    [  103.326360]  __ieee80211_sta_join_ibss+0x308/0x6c4 [mac80211]
    [  103.332171]  ieee80211_sta_create_ibss+0x8c/0x10c [mac80211]
    [  103.337895]  ieee80211_ibss_work+0x3dc/0x614 [mac80211]
    [  103.343185]  ieee80211_iface_work+0x388/0x3f0 [mac80211]
    [  103.348495]  process_one_work+0x288/0x690
    [  103.352499]  worker_thread+0x70/0x464
    [  103.356157]  kthread+0x144/0x150
    [  103.359380]  ret_from_fork+0x10/0x18
    [  103.362952] Code: 394008c3 52800220 394000e4 7100007f (39400023)
    
    Fixes: 37f4ca907c46 ("mt76: mt7915: register per-phy HE capabilities for each interface")
    Fixes: e57b7901469f ("mt76: add mac80211 driver for MT7915 PCIe-based chipsets")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Acked-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/ddae419a740f1fb9e48afd432035e9f394f512ee.1637239456.git.lorenzo@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8aceb91a5ddb10b29b7f7f0d835081d6481d0c3
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Dec 1 20:17:20 2021 -0800

    net: dsa: b53: Add SPI ID table
    
    commit 88362ebfd7fb569c78d5cb507aa9d3c8fc203839 upstream.
    
    Currently autoloading for SPI devices does not use the DT ID table, it
    uses SPI modalises. Supporting OF modalises is going to be difficult if
    not impractical, an attempt was made but has been reverted, so ensure
    that module autoloading works for this driver by adding an id_table
    listing the SPI IDs for everything.
    
    Fixes: 96c8395e2166 ("spi: Revert modalias changes")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad7f90bb88468acc9dc0009e6b6b65e340846557
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Thu Dec 2 10:28:41 2021 +0800

    selftests: net: Correct case name
    
    commit a05431b22be819d75db72ca3d44381d18a37b092 upstream.
    
    ipv6_addr_bind/ipv4_addr_bind are function names. Previously, bind test
    would not be run by default due to the wrong case names
    
    Fixes: 34d0302ab861 ("selftests: Add ipv6 address bind tests to fcnal-test")
    Fixes: 75b2b2b3db4c ("selftests: Add ipv4 address bind tests to fcnal-test")
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75917372eef0dbfb290ae45474314d35f97aea18
Author: Zhou Qingyang <zhou1615@umn.edu>
Date:   Wed Dec 1 00:44:38 2021 +0800

    net/mlx4_en: Fix an use-after-free bug in mlx4_en_try_alloc_resources()
    
    commit addad7643142f500080417dd7272f49b7a185570 upstream.
    
    In mlx4_en_try_alloc_resources(), mlx4_en_copy_priv() is called and
    tmp->tx_cq will be freed on the error path of mlx4_en_copy_priv().
    After that mlx4_en_alloc_resources() is called and there is a dereference
    of &tmp->tx_cq[t][i] in mlx4_en_alloc_resources(), which could lead to
    a use after free problem on failure of mlx4_en_copy_priv().
    
    Fix this bug by adding a check of mlx4_en_copy_priv()
    
    This bug was found by a static analyzer. The analysis employs
    differential checking to identify inconsistent security operations
    (e.g., checks or kfrees) between two code paths and confirms that the
    inconsistent operations are not recovered in the current function or
    the callers, so they constitute bugs.
    
    Note that, as a bug found by static analysis, it can be a false
    positive or hard to trigger. Multiple researchers have cross-reviewed
    the bug.
    
    Builds with CONFIG_MLX4_EN=m show no new warnings,
    and our static analyzer no longer warns about this code.
    
    Fixes: ec25bc04ed8e ("net/mlx4_en: Add resilience in low memory systems")
    Signed-off-by: Zhou Qingyang <zhou1615@umn.edu>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20211130164438.190591-1-zhou1615@umn.edu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b762b3e28c926fe24c63fb97f48d506b31aa1cb4
Author: Raed Salem <raeds@nvidia.com>
Date:   Wed Nov 17 13:33:57 2021 +0200

    net/mlx5e: IPsec: Fix Software parser inner l3 type setting in case of encapsulation
    
    commit c65d638ab39034cbaa36773b980d28106cfc81fa upstream.
    
    Current code wrongly uses the skb->protocol field which reflects the
    outer l3 protocol to set the inner l3 type in Software Parser (SWP)
    fields settings in the ethernet segment (eseg) in flows where inner
    l3 exists like in Vxlan over ESP flow, the above method wrongly use
    the outer protocol type instead of the inner one. thus breaking cases
    where inner and outer headers have different protocols.
    
    Fix by setting the inner l3 type in SWP according to the inner l3 ip
    header version.
    
    Fixes: 2ac9cfe78223 ("net/mlx5e: IPSec, Add Innova IPSec offload TX data path")
    Signed-off-by: Raed Salem <raeds@nvidia.com>
    Reviewed-by: Maor Dickman <maord@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f837fefa59d7df5ea54653cea5a1c1bc47e63af
Author: Łukasz Bartosik <lb@semihalf.com>
Date:   Wed Nov 10 22:57:44 2021 +0100

    iwlwifi: fix warnings produced by kernel debug options
    
    commit f5cecf1d4c5ff76172928bc32e99ca56a5ca2f56 upstream.
    
    Fix warnings produced by:
    - lockdep_assert_wiphy() in function reg_process_self_managed_hint(),
    - wiphy_dereference() in function iwl_mvm_init_fw_regd().
    Both function are expected to be called in critical section.
    
    The warnings were discovered when running v5.15 kernel
    with debug options enabled:
    
    1)
    Hardware name: Google Delbin/Delbin
    RIP: 0010:reg_process_self_managed_hint+0x254/0x347 [cfg80211]
    ...
    Call Trace:
    regulatory_set_wiphy_regd_sync+0x3d/0xb0
    iwl_mvm_init_mcc+0x49d/0x5a2
    iwl_op_mode_mvm_start+0x1b58/0x2507
    ? iwl_mvm_reprobe_wk+0x94/0x94
    _iwl_op_mode_start+0x146/0x1a3
    iwl_opmode_register+0xda/0x13d
    init_module+0x28/0x1000
    
    2)
    drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c:263 suspicious rcu_dereference_protected() usage!
    ...
    Hardware name: Google Delbin/Delbin, BIOS Google_Delbin
    Call Trace:
    dump_stack_lvl+0xb1/0xe6
    iwl_mvm_init_fw_regd+0x2e7/0x379
    iwl_mvm_init_mcc+0x2c6/0x5a2
    iwl_op_mode_mvm_start+0x1b58/0x2507
    ? iwl_mvm_reprobe_wk+0x94/0x94
    _iwl_op_mode_start+0x146/0x1a3
    iwl_opmode_register+0xda/0x13d
    init_module+0x28/0x100
    
    Fixes: a05829a7222e ("cfg80211: avoid holding the RTNL when calling the driver")
    Signed-off-by: Łukasz Bartosik <lb@semihalf.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20211110215744.5487-1-lukasz.bartosik@semihalf.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9dffaf949082ac7d1256189035ed82e9ea7eeb3
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Nov 29 13:57:09 2021 +0000

    arm64: ftrace: add missing BTIs
    
    commit 35b6b28e69985eafb20b3b2c7bd6eca452b56b53 upstream.
    
    When branch target identifiers are in use, code reachable via an
    indirect branch requires a BTI landing pad at the branch target site.
    
    When building FTRACE_WITH_REGS atop patchable-function-entry, we miss
    BTIs at the start start of the `ftrace_caller` and `ftrace_regs_caller`
    trampolines, and when these are called from a module via a PLT (which
    will use a `BR X16`), we will encounter a BTI failure, e.g.
    
    | # insmod lkdtm.ko
    | lkdtm: No crash points registered, enable through debugfs
    | # echo function_graph > /sys/kernel/debug/tracing/current_tracer
    | # cat /sys/kernel/debug/provoke-crash/DIRECT
    | Unhandled 64-bit el1h sync exception on CPU0, ESR 0x34000001 -- BTI
    | CPU: 0 PID: 174 Comm: cat Not tainted 5.16.0-rc2-dirty #3
    | Hardware name: linux,dummy-virt (DT)
    | pstate: 60400405 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=jc)
    | pc : ftrace_caller+0x0/0x3c
    | lr : lkdtm_debugfs_open+0xc/0x20 [lkdtm]
    | sp : ffff800012e43b00
    | x29: ffff800012e43b00 x28: 0000000000000000 x27: ffff800012e43c88
    | x26: 0000000000000000 x25: 0000000000000000 x24: ffff0000c171f200
    | x23: ffff0000c27b1e00 x22: ffff0000c2265240 x21: ffff0000c23c8c30
    | x20: ffff8000090ba380 x19: 0000000000000000 x18: 0000000000000000
    | x17: 0000000000000000 x16: ffff80001002bb4c x15: 0000000000000000
    | x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000900ff0
    | x11: ffff0000c4166310 x10: ffff800012e43b00 x9 : ffff8000104f2384
    | x8 : 0000000000000001 x7 : 0000000000000000 x6 : 000000000000003f
    | x5 : 0000000000000040 x4 : ffff800012e43af0 x3 : 0000000000000001
    | x2 : ffff8000090b0000 x1 : ffff0000c171f200 x0 : ffff0000c23c8c30
    | Kernel panic - not syncing: Unhandled exception
    | CPU: 0 PID: 174 Comm: cat Not tainted 5.16.0-rc2-dirty #3
    | Hardware name: linux,dummy-virt (DT)
    | Call trace:
    |  dump_backtrace+0x0/0x1a4
    |  show_stack+0x24/0x30
    |  dump_stack_lvl+0x68/0x84
    |  dump_stack+0x1c/0x38
    |  panic+0x168/0x360
    |  arm64_exit_nmi.isra.0+0x0/0x80
    |  el1h_64_sync_handler+0x68/0xd4
    |  el1h_64_sync+0x78/0x7c
    |  ftrace_caller+0x0/0x3c
    |  do_dentry_open+0x134/0x3b0
    |  vfs_open+0x38/0x44
    |  path_openat+0x89c/0xe40
    |  do_filp_open+0x8c/0x13c
    |  do_sys_openat2+0xbc/0x174
    |  __arm64_sys_openat+0x6c/0xbc
    |  invoke_syscall+0x50/0x120
    |  el0_svc_common.constprop.0+0xdc/0x100
    |  do_el0_svc+0x84/0xa0
    |  el0_svc+0x28/0x80
    |  el0t_64_sync_handler+0xa8/0x130
    |  el0t_64_sync+0x1a0/0x1a4
    | SMP: stopping secondary CPUs
    | Kernel Offset: disabled
    | CPU features: 0x0,00000f42,da660c5f
    | Memory Limit: none
    | ---[ end Kernel panic - not syncing: Unhandled exception ]---
    
    Fix this by adding the required `BTI C`, as we only require these to be
    reachable via BL for direct calls or BR X16/X17 for PLTs. For now, these
    are open-coded in the function prologue, matching the style of the
    `__hwasan_tag_mismatch` trampoline.
    
    In future we may wish to consider adding a new SYM_CODE_START_*()
    variant which has an implicit BTI.
    
    When ftrace is built atop mcount, the trampolines are marked with
    SYM_FUNC_START(), and so get an implicit BTI. We may need to change
    these over to SYM_CODE_START() in future for RELIABLE_STACKTRACE, in
    case we need to apply special care aroud the return address being
    rewritten.
    
    Fixes: 97fed779f2a6 ("arm64: bti: Provide Kconfig for kernel mode BTI")
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Will Deacon <will@kernel.org>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20211129135709.2274019-1-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49d17d1a4ba58b2dadf2e4ff571a968e9962cb53
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 29 10:39:29 2021 -0500

    siphash: use _unaligned version by default
    
    commit f7e5b9bfa6c8820407b64eabc1f29c9a87e8993d upstream.
    
    On ARM v6 and later, we define CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS
    because the ordinary load/store instructions (ldr, ldrh, ldrb) can
    tolerate any misalignment of the memory address. However, load/store
    double and load/store multiple instructions (ldrd, ldm) may still only
    be used on memory addresses that are 32-bit aligned, and so we have to
    use the CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS macro with care, or we
    may end up with a severe performance hit due to alignment traps that
    require fixups by the kernel. Testing shows that this currently happens
    with clang-13 but not gcc-11. In theory, any compiler version can
    produce this bug or other problems, as we are dealing with undefined
    behavior in C99 even on architectures that support this in hardware,
    see also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100363.
    
    Fortunately, the get_unaligned() accessors do the right thing: when
    building for ARMv6 or later, the compiler will emit unaligned accesses
    using the ordinary load/store instructions (but avoid the ones that
    require 32-bit alignment). When building for older ARM, those accessors
    will emit the appropriate sequence of ldrb/mov/orr instructions. And on
    architectures that can truly tolerate any kind of misalignment, the
    get_unaligned() accessors resolve to the leXX_to_cpup accessors that
    operate on aligned addresses.
    
    Since the compiler will in fact emit ldrd or ldm instructions when
    building this code for ARM v6 or later, the solution is to use the
    unaligned accessors unconditionally on architectures where this is
    known to be fast. The _aligned version of the hash function is
    however still needed to get the best performance on architectures
    that cannot do any unaligned access in hardware.
    
    This new version avoids the undefined behavior and should produce
    the fastest hash on all architectures we support.
    
    Link: https://lore.kernel.org/linux-arm-kernel/20181008211554.5355-4-ard.biesheuvel@linaro.org/
    Link: https://lore.kernel.org/linux-crypto/CAK8P3a2KfmmGDbVHULWevB0hv71P2oi2ZCHEAqT=8dQfa0=cqQ@mail.gmail.com/
    Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Fixes: 2c956a60778c ("siphash: add cryptographically secure PRF")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 519ed0ab5f8b14eee1672959a65ef1d89db88c6e
Author: Benjamin Poirier <bpoirier@nvidia.com>
Date:   Mon Nov 29 15:15:05 2021 +0900

    net: mpls: Fix notifications when deleting a device
    
    commit 7d4741eacdefa5f0475431645b56baf00784df1f upstream.
    
    There are various problems related to netlink notifications for mpls route
    changes in response to interfaces being deleted:
    * delete interface of only nexthop
            DELROUTE notification is missing RTA_OIF attribute
    * delete interface of non-last nexthop
            NEWROUTE notification is missing entirely
    * delete interface of last nexthop
            DELROUTE notification is missing nexthop
    
    All of these problems stem from the fact that existing routes are modified
    in-place before sending a notification. Restructure mpls_ifdown() to avoid
    changing the route in the DELROUTE cases and to create a copy in the
    NEWROUTE case.
    
    Fixes: f8efb73c97e2 ("mpls: multipath route support")
    Signed-off-by: Benjamin Poirier <bpoirier@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5ef33c1489b2cd74368057fa00b5d2183bb5853
Author: Zhou Qingyang <zhou1615@umn.edu>
Date:   Tue Nov 30 19:08:48 2021 +0800

    net: qlogic: qlcnic: Fix a NULL pointer dereference in qlcnic_83xx_add_rings()
    
    commit e2dabc4f7e7b60299c20a36d6a7b24ed9bf8e572 upstream.
    
    In qlcnic_83xx_add_rings(), the indirect function of
    ahw->hw_ops->alloc_mbx_args will be called to allocate memory for
    cmd.req.arg, and there is a dereference of it in qlcnic_83xx_add_rings(),
    which could lead to a NULL pointer dereference on failure of the
    indirect function like qlcnic_83xx_alloc_mbx_args().
    
    Fix this bug by adding a check of alloc_mbx_args(), this patch
    imitates the logic of mbx_cmd()'s failure handling.
    
    This bug was found by a static analyzer. The analysis employs
    differential checking to identify inconsistent security operations
    (e.g., checks or kfrees) between two code paths and confirms that the
    inconsistent operations are not recovered in the current function or
    the callers, so they constitute bugs.
    
    Note that, as a bug found by static analysis, it can be a false
    positive or hard to trigger. Multiple researchers have cross-reviewed
    the bug.
    
    Builds with CONFIG_QLCNIC=m show no new warnings, and our
    static analyzer no longer warns about this code.
    
    Fixes: 7f9664525f9c ("qlcnic: 83xx memory map and HW access routine")
    Signed-off-by: Zhou Qingyang <zhou1615@umn.edu>
    Link: https://lore.kernel.org/r/20211130110848.109026-1-zhou1615@umn.edu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a9afcd827cafe14a95c9fcbded2c2d104f18dfc
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Fri Nov 26 19:34:21 2021 +0100

    tcp: fix page frag corruption on page fault
    
    commit dacb5d8875cc6cd3a553363b4d6f06760fcbe70c upstream.
    
    Steffen reported a TCP stream corruption for HTTP requests
    served by the apache web-server using a cifs mount-point
    and memory mapping the relevant file.
    
    The root cause is quite similar to the one addressed by
    commit 20eb4f29b602 ("net: fix sk_page_frag() recursion from
    memory reclaim"). Here the nested access to the task page frag
    is caused by a page fault on the (mmapped) user-space memory
    buffer coming from the cifs file.
    
    The page fault handler performs an smb transaction on a different
    socket, inside the same process context. Since sk->sk_allaction
    for such socket does not prevent the usage for the task_frag,
    the nested allocation modify "under the hood" the page frag
    in use by the outer sendmsg call, corrupting the stream.
    
    The overall relevant stack trace looks like the following:
    
    httpd 78268 [001] 3461630.850950:      probe:tcp_sendmsg_locked:
            ffffffff91461d91 tcp_sendmsg_locked+0x1
            ffffffff91462b57 tcp_sendmsg+0x27
            ffffffff9139814e sock_sendmsg+0x3e
            ffffffffc06dfe1d smb_send_kvec+0x28
            [...]
            ffffffffc06cfaf8 cifs_readpages+0x213
            ffffffff90e83c4b read_pages+0x6b
            ffffffff90e83f31 __do_page_cache_readahead+0x1c1
            ffffffff90e79e98 filemap_fault+0x788
            ffffffff90eb0458 __do_fault+0x38
            ffffffff90eb5280 do_fault+0x1a0
            ffffffff90eb7c84 __handle_mm_fault+0x4d4
            ffffffff90eb8093 handle_mm_fault+0xc3
            ffffffff90c74f6d __do_page_fault+0x1ed
            ffffffff90c75277 do_page_fault+0x37
            ffffffff9160111e page_fault+0x1e
            ffffffff9109e7b5 copyin+0x25
            ffffffff9109eb40 _copy_from_iter_full+0xe0
            ffffffff91462370 tcp_sendmsg_locked+0x5e0
            ffffffff91462370 tcp_sendmsg_locked+0x5e0
            ffffffff91462b57 tcp_sendmsg+0x27
            ffffffff9139815c sock_sendmsg+0x4c
            ffffffff913981f7 sock_write_iter+0x97
            ffffffff90f2cc56 do_iter_readv_writev+0x156
            ffffffff90f2dff0 do_iter_write+0x80
            ffffffff90f2e1c3 vfs_writev+0xa3
            ffffffff90f2e27c do_writev+0x5c
            ffffffff90c042bb do_syscall_64+0x5b
            ffffffff916000ad entry_SYSCALL_64_after_hwframe+0x65
    
    The cifs filesystem rightfully sets sk_allocations to GFP_NOFS,
    we can avoid the nesting using the sk page frag for allocation
    lacking the __GFP_FS flag. Do not define an additional mm-helper
    for that, as this is strictly tied to the sk page frag usage.
    
    v1 -> v2:
     - use a stricted sk_page_frag() check instead of reordering the
       code (Eric)
    
    Reported-by: Steffen Froemer <sfroemer@redhat.com>
    Fixes: 5640f7685831 ("net: use a per task frag allocator")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22a18dd4886612fb86bec664a29fc4910237bde5
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Nov 29 22:39:47 2021 -0800

    natsemi: xtensa: fix section mismatch warnings
    
    commit b0f38e15979fa8851e88e8aa371367f264e7b6e9 upstream.
    
    Fix section mismatch warnings in xtsonic. The first one appears to be
    bogus and after fixing the second one, the first one is gone.
    
    WARNING: modpost: vmlinux.o(.text+0x529adc): Section mismatch in reference from the function sonic_get_stats() to the function .init.text:set_reset_devices()
    The function sonic_get_stats() references
    the function __init set_reset_devices().
    This is often because sonic_get_stats lacks a __init
    annotation or the annotation of set_reset_devices is wrong.
    
    WARNING: modpost: vmlinux.o(.text+0x529b3b): Section mismatch in reference from the function xtsonic_probe() to the function .init.text:sonic_probe1()
    The function xtsonic_probe() references
    the function __init sonic_probe1().
    This is often because xtsonic_probe lacks a __init
    annotation or the annotation of sonic_probe1 is wrong.
    
    Fixes: 74f2a5f0ef64 ("xtensa: Add support for the Sonic Ethernet device for the XT2000 board.")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Cc: Finn Thain <fthain@telegraphics.com.au>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: linux-xtensa@linux-xtensa.org
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Acked-by: Max Filippov <jcmvbkbc@gmail.com>
    Link: https://lore.kernel.org/r/20211130063947.7529-1-rdunlap@infradead.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f744230dfbf2960f9dc3104ce804377b228bebfc
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Sat Nov 27 21:42:14 2021 +0200

    i2c: cbus-gpio: set atomic transfer callback
    
    commit b12764695c3fcade145890b67f82f8b139174cc7 upstream.
    
    CBUS transfers have always been atomic, but after commit 63b96983a5dd
    ("i2c: core: introduce callbacks for atomic transfers") we started to see
    warnings during e.g. poweroff as the atomic callback is not explicitly set.
    Fix that.
    
    Fixes the following WARNING seen during Nokia N810 power down:
    
    [  786.570617] reboot: Power down
    [  786.573913] ------------[ cut here ]------------
    [  786.578826] WARNING: CPU: 0 PID: 672 at drivers/i2c/i2c-core.h:40 i2c_smbus_xfer+0x100/0x110
    [  786.587799] No atomic I2C transfer handler for 'i2c-2'
    
    Fixes: 63b96983a5dd ("i2c: core: introduce callbacks for atomic transfers")
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2d234f96d8ba8c80ccb2e6d856865752f478c15
Author: Alain Volmat <alain.volmat@foss.st.com>
Date:   Mon Sep 20 17:21:31 2021 +0200

    i2c: stm32f7: stop dma transfer in case of NACK
    
    commit 31b90a95ccbbb4b628578ac17e3b3cc8eeacfe31 upstream.
    
    In case of receiving a NACK, the dma transfer should be stopped
    to avoid feeding data into the FIFO.
    Also ensure to properly return the proper error code and avoid
    waiting for the end of the dma completion in case of
    error happening during the transmission.
    
    Fixes: 7ecc8cfde553 ("i2c: i2c-stm32f7: Add DMA support")
    Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
    Reviewed-by: Pierre-Yves MORDRET <pierre-yves.mordret@foss.st.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dd6c5899695e536161c0866a61751b7a0772987
Author: Alain Volmat <alain.volmat@foss.st.com>
Date:   Mon Sep 20 17:21:30 2021 +0200

    i2c: stm32f7: recover the bus on access timeout
    
    commit b933d1faf8fa30d16171bcff404e39c41b2a7c84 upstream.
    
    When getting an access timeout, ensure that the bus is in a proper
    state prior to returning the error.
    
    Fixes: aeb068c57214 ("i2c: i2c-stm32f7: add driver")
    Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
    Reviewed-by: Pierre-Yves MORDRET <pierre-yves.mordret@foss.st.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a153d4253530ef2b9a258cd0ed4771f0dd5774c7
Author: Alain Volmat <alain.volmat@foss.st.com>
Date:   Mon Sep 20 17:21:29 2021 +0200

    i2c: stm32f7: flush TX FIFO upon transfer errors
    
    commit 0c21d02ca469574d2082379db52d1a27b99eed0c upstream.
    
    While handling an error during transfer (ex: NACK), it could
    happen that the driver has already written data into TXDR
    before the transfer get stopped.
    This commit add TXDR Flush after end of transfer in case of error to
    avoid sending a wrong data on any other slave upon next transfer.
    
    Fixes: aeb068c57214 ("i2c: i2c-stm32f7: add driver")
    Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
    Reviewed-by: Pierre-Yves MORDRET <pierre-yves.mordret@foss.st.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5f50794a49f1c92443eb0d7d166df98f5a8a724
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Mon Nov 29 10:39:28 2021 -0500

    wireguard: ratelimiter: use kvcalloc() instead of kvzalloc()
    
    commit 4e3fd721710553832460c179c2ee5ce67ef7f1e0 upstream.
    
    Use 2-factor argument form kvcalloc() instead of kvzalloc().
    
    Link: https://github.com/KSPP/linux/issues/162
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    [Jason: Gustavo's link above is for KSPP, but this isn't actually a
     security fix, as table_size is bounded to 8192 anyway, and gcc realizes
     this, so the codegen comes out to be about the same.]
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2745192cb798be774c2f3085644434f2a6387372
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Nov 29 10:39:27 2021 -0500

    wireguard: receive: drop handshakes if queue lock is contended
    
    commit fb32f4f606c17b869805d7cede8b03d78339b50a upstream.
    
    If we're being delivered packets from multiple CPUs so quickly that the
    ring lock is contended for CPU tries, then it's safe to assume that the
    queue is near capacity anyway, so just drop the packet rather than
    spinning. This helps deal with multicore DoS that can interfere with
    data path performance. It _still_ does not completely fix the issue, but
    it again chips away at it.
    
    Reported-by: Streun Fabio <fstreun@student.ethz.ch>
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af794a64d6cad9fbf8f65df3722e80c55b6ec198
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Nov 29 10:39:26 2021 -0500

    wireguard: receive: use ring buffer for incoming handshakes
    
    commit 886fcee939adb5e2af92741b90643a59f2b54f97 upstream.
    
    Apparently the spinlock on incoming_handshake's skb_queue is highly
    contended, and a torrent of handshake or cookie packets can bring the
    data plane to its knees, simply by virtue of enqueueing the handshake
    packets to be processed asynchronously. So, we try switching this to a
    ring buffer to hopefully have less lock contention. This alleviates the
    problem somewhat, though it still isn't perfect, so future patches will
    have to improve this further. However, it at least doesn't completely
    diminish the data plane.
    
    Reported-by: Streun Fabio <fstreun@student.ethz.ch>
    Reported-by: Joel Wanner <joel.wanner@inf.ethz.ch>
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4db0d88a90488ace1466ce8faec9865cf8ab580f
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Nov 29 10:39:25 2021 -0500

    wireguard: device: reset peer src endpoint when netns exits
    
    commit 20ae1d6aa159eb91a9bf09ff92ccaa94dbea92c2 upstream.
    
    Each peer's endpoint contains a dst_cache entry that takes a reference
    to another netdev. When the containing namespace exits, we take down the
    socket and prevent future sockets from being created (by setting
    creating_net to NULL), which removes that potential reference on the
    netns. However, it doesn't release references to the netns that a netdev
    cached in dst_cache might be taking, so the netns still might fail to
    exit. Since the socket is gimped anyway, we can simply clear all the
    dst_caches (by way of clearing the endpoint src), which will release all
    references.
    
    However, the current dst_cache_reset function only releases those
    references lazily. But it turns out that all of our usages of
    wg_socket_clear_peer_endpoint_src are called from contexts that are not
    exactly high-speed or bottle-necked. For example, when there's
    connection difficulty, or when userspace is reconfiguring the interface.
    And in particular for this patch, when the netns is exiting. So for
    those cases, it makes more sense to call dst_release immediately. For
    that, we add a small helper function to dst_cache.
    
    This patch also adds a test to netns.sh from Hangbin Liu to ensure this
    doesn't regress.
    
    Tested-by: Hangbin Liu <liuhangbin@gmail.com>
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Cc: Toke Høiland-Jørgensen <toke@redhat.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Fixes: 900575aa33a3 ("wireguard: device: avoid circular netns references")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c0d08d85139a75a42c1f0ca27403cd31bdfacf1
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Mon Nov 29 10:39:24 2021 -0500

    wireguard: selftests: rename DEBUG_PI_LIST to DEBUG_PLIST
    
    commit 7e938beb8321d34f040557b8915b228af125f73c upstream.
    
    DEBUG_PI_LIST was renamed to DEBUG_PLIST since 8e18faeac3 ("lib/plist:
    rename DEBUG_PI_LIST to DEBUG_PLIST").
    
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Fixes: 8e18faeac3e4 ("lib/plist: rename DEBUG_PI_LIST to DEBUG_PLIST")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 631a480320f1d4163d1a912d9cad7043603279c2
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Nov 29 10:39:22 2021 -0500

    wireguard: selftests: actually test for routing loops
    
    commit 782c72af567fc2ef09bd7615d0307f24de72c7e0 upstream.
    
    We previously removed the restriction on looping to self, and then added
    a test to make sure the kernel didn't blow up during a routing loop. The
    kernel didn't blow up, thankfully, but on certain architectures where
    skb fragmentation is easier, such as ppc64, the skbs weren't actually
    being discarded after a few rounds through. But the test wasn't catching
    this. So actually test explicitly for massive increases in tx to see if
    we have a routing loop. Note that the actual loop problem will need to
    be addressed in a different commit.
    
    Fixes: b673e24aad36 ("wireguard: socket: remove errant restriction on looping to self")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d33493e9654ab842a58a6d93997e752e59dfbc60
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Nov 29 10:39:20 2021 -0500

    wireguard: allowedips: add missing __rcu annotation to satisfy sparse
    
    commit ae9287811ba75571cd69505d50ab0e612ace8572 upstream.
    
    A __rcu annotation got lost during refactoring, which caused sparse to
    become enraged.
    
    Fixes: bf7b042dc62a ("wireguard: allowedips: free empty intermediate nodes when removing single node")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b050a8d576b175a63583fb67f7d7b2d65b571acf
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Nov 29 10:39:21 2021 -0500

    wireguard: selftests: increase default dmesg log size
    
    commit 03ff1b1def73f817e196bf96ab36ac259490bd7c upstream.
    
    The selftests currently parse the kernel log at the end to track
    potential memory leaks. With these tests now reading off the end of the
    buffer, due to recent optimizations, some creation messages were lost,
    making the tests think that there was a free without an alloc. Fix this
    by increasing the kernel log size.
    
    Fixes: 24b70eeeb4f4 ("wireguard: use synchronize_net rather than synchronize_rcu")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 326fb8a1c26784c254ef64e79aad8a2f3d0b00ec
Author: Marek Behún <kabel@kernel.org>
Date:   Tue Nov 30 18:01:51 2021 +0100

    net: dsa: mv88e6xxx: Link in pcs_get_state() if AN is bypassed
    
    commit ede359d8843a2779d232ed30bc36089d4b5962e4 upstream.
    
    Function mv88e6xxx_serdes_pcs_get_state() currently does not report link
    up if AN is enabled, Link bit is set, but Speed and Duplex Resolved bit
    is not set, which testing shows is the case for when auto-negotiation
    was bypassed (we have AN enabled but link partner does not).
    
    An example of such link partner is Marvell 88X3310 PHY, when put into
    the mode where host interface changes between 10gbase-r, 5gbase-r,
    2500base-x and sgmii according to copper speed. The 88X3310 does not
    enable AN in 2500base-x, and so SerDes on mv88e6xxx currently does not
    link with it.
    
    Fix this.
    
    Fixes: a5a6858b793f ("net: dsa: mv88e6xxx: extend phylink to Serdes PHYs")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19f7ad89bcb7d5edef3ad02272c993458ee8a4f4
Author: Marek Behún <kabel@kernel.org>
Date:   Tue Nov 30 18:01:50 2021 +0100

    net: dsa: mv88e6xxx: Fix inband AN for 2500base-x on 88E6393X family
    
    commit 163000dbc772c1eae9bdfe7c8fe30155db1efd74 upstream.
    
    Inband AN is broken on Amethyst in 2500base-x mode when set by standard
    mechanism (via cmode).
    
    (There probably is some weird setting done by default in the switch for
     this mode that make it cycle in some state or something, because when
     the peer is the mvneta controller, it receives link change interrupts
     every ~0.3ms, but the link is always down.)
    
    Get around this by configuring the PCS mode to 1000base-x (where inband
    AN works), and then changing the SerDes frequency while SerDes
    transmitter and receiver are disabled, before enabling SerDes PHY. After
    disabling SerDes PHY, change the PCS mode back to 2500base-x, to avoid
    confusing the device (if we leave it at 1000base-x PCS mode but with
    different frequency, and then change cmode to sgmii, the device won't
    change the frequency because it thinks it already has the correct one).
    
    The register which changes the frequency is undocumented. I discovered
    it by going through all registers in the ranges 4.f000-4.f100 and
    1e.8000-1e.8200 for all SerDes cmodes (sgmii, 1000base-x, 2500base-x,
    5gbase-r, 10gbase-r, usxgmii) and filtering out registers that didn't
    make sense (the value was the same for modes which have different
    frequency). The result of this was:
    
        reg   sgmii 1000base-x 2500base-x 5gbase-r 10gbase-r usxgmii
      04.f002  005b       0058       0059     005c      005d    005f
      04.f076  3000       0000       1000     4000      5000    7000
      04.f07c  0950       0950       1850     0550      0150    0150
      1e.8000  0059       0059       0058     0055      0051    0051
      1e.8140  0e20       0e20       0e28     0e21      0e42    0e42
    
    Register 04.f002 is the documented Port Operational Confiuration
    register, it's last 3 bits select PCS type, so changing this register
    also changes the frequency to the appropriate value.
    
    Registers 04.f076 and 04.f07c are not writable.
    
    Undocumented register 1e.8000 was the one: changing bits 3:0 from 9 to 8
    changed SerDes frequency to 3.125 GHz, while leaving the value of PCS
    mode in register 04.f002.2:0 at 1000base-x. Inband autonegotiation
    started working correctly.
    
    (I didn't try anything with register 1e.8140 since 1e.8000 solved the
     problem.)
    
    Since I don't have documentation for this register 1e.8000.3:0, I am
    using the constants without names, but my hypothesis is that this
    register selects PHY frequency. If in the future I have access to an
    oscilloscope able to handle these frequencies, I will try to test this
    hypothesis.
    
    Fixes: de776d0d316f ("net: dsa: mv88e6xxx: add support for mv88e6393x family")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f273a6496082db16b26b71422a07d1bd815cde7
Author: Marek Behún <kabel@kernel.org>
Date:   Tue Nov 30 18:01:49 2021 +0100

    net: dsa: mv88e6xxx: Add fix for erratum 5.2 of 88E6393X family
    
    commit 93fd8207bed80ce19aaf59932cbe1c03d418a37d upstream.
    
    Add fix for erratum 5.2 of the 88E6393X (Amethyst) family: for 10gbase-r
    mode, some undocumented registers need to be written some special
    values.
    
    Fixes: de776d0d316f ("net: dsa: mv88e6xxx: add support for mv88e6393x family")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2be2d4c8e8fd5ac703641f6bfc4cf016cd898fe
Author: Marek Behún <kabel@kernel.org>
Date:   Tue Nov 30 18:01:48 2021 +0100

    net: dsa: mv88e6xxx: Save power by disabling SerDes trasmitter and receiver
    
    commit 7527d66260ac0c603c6baca5146748061fcddbd6 upstream.
    
    Save power on 88E6393X by disabling SerDes receiver and transmitter
    after SerDes is SerDes is disabled.
    
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Cc: stable@vger.kernel.org # de776d0d316f ("net: dsa: mv88e6xxx: add support for mv88e6393x family")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 865185f745096e6d4e57e2e88b3c6e956b475ccf
Author: Marek Behún <kabel@kernel.org>
Date:   Tue Nov 30 18:01:47 2021 +0100

    net: dsa: mv88e6xxx: Drop unnecessary check in mv88e6393x_serdes_erratum_4_6()
    
    commit 8c3318b4874e2dee867f5ae8f6d38f78e044bf71 upstream.
    
    The check for lane is unnecessary, since the function is called only
    with allowed lane argument.
    
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0671c8f7332fce426b8187dfe6c43b925b6ba887
Author: Marek Behún <kabel@kernel.org>
Date:   Tue Nov 30 18:01:46 2021 +0100

    net: dsa: mv88e6xxx: Fix application of erratum 4.8 for 88E6393X
    
    commit 21635d9203e1cf2b73b67e9a86059a62f62a3563 upstream.
    
    According to SERDES scripts for 88E6393X, erratum 4.8 has to be applied
    every time before SerDes is powered on.
    
    Split the code for erratum 4.8 into separate function and call it in
    mv88e6393x_serdes_power().
    
    Fixes: de776d0d316f ("net: dsa: mv88e6xxx: add support for mv88e6393x family")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7b4f571d580caa47d8261e3ef999dfb401a7b72
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Nov 30 12:31:23 2021 -0500

    tracing/histograms: String compares should not care about signed values
    
    commit 450fec13d9170127678f991698ac1a5b05c02e2f upstream.
    
    When comparing two strings for the "onmatch" histogram trigger, fields
    that are strings use string comparisons, which do not care about being
    signed or not.
    
    Do not fail to match two string fields if one is unsigned char array and
    the other is a signed char array.
    
    Link: https://lore.kernel.org/all/20211129123043.5cfd687a@gandalf.local.home/
    
    Cc: stable@vgerk.kernel.org
    Cc: Tom Zanussi <zanussi@kernel.org>
    Cc: Yafang Shao <laoar.shao@gmail.com>
    Fixes: b05e89ae7cf3b ("tracing: Accept different type for synthetic event fields")
    Reviewed-by: Masami Hiramatsu <mhiramatsu@kernel.org>
    Reported-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e06bb02ad6a624319f8a3c6d22ca7ebb031a764
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 22 19:43:10 2021 -0500

    KVM: x86: check PIR even for vCPUs with disabled APICv
    
    commit 37c4dbf337c5c2cdb24365ffae6ed70ac1e74d7a upstream.
    
    The IRTE for an assigned device can trigger a POSTED_INTR_VECTOR even
    if APICv is disabled on the vCPU that receives it.  In that case, the
    interrupt will just cause a vmexit and leave the ON bit set together
    with the PIR bit corresponding to the interrupt.
    
    Right now, the interrupt would not be delivered until APICv is re-enabled.
    However, fixing this is just a matter of always doing the PIR->IRR
    synchronization, even if the vCPU has temporarily disabled APICv.
    
    This is not a problem for performance, or if anything it is an
    improvement.  First, in the common case where vcpu->arch.apicv_active is
    true, one fewer check has to be performed.  Second, static_call_cond will
    elide the function call if APICv is not present or disabled.  Finally,
    in the case for AMD hardware we can remove the sync_pir_to_irr callback:
    it is only needed for apic_has_interrupt_for_ppr, and that function
    already has a fallback for !APICv.
    
    Cc: stable@vger.kernel.org
    Co-developed-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Reviewed-by: David Matlack <dmatlack@google.com>
    Message-Id: <20211123004311.2954158-4-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2846d550f8f58091e88ada1b855b4dff69e8a94a
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Wed Nov 24 20:20:46 2021 +0800

    KVM: X86: Use vcpu->arch.walk_mmu for kvm_mmu_invlpg()
    
    commit 05b29633c7a956d5675f5fbba70db0d26aa5e73e upstream.
    
    INVLPG operates on guest virtual address, which are represented by
    vcpu->arch.walk_mmu.  In nested virtualization scenarios,
    kvm_mmu_invlpg() was using the wrong MMU structure; if L2's invlpg were
    emulated by L0 (in practice, it hardly happen) when nested two-dimensional
    paging is enabled, the call to ->tlb_flush_gva() would be skipped and
    the hardware TLB entry would not be invalidated.
    
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Message-Id: <20211124122055.64424-5-jiangshanlai@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6aebd2da8d49bf323c85a8efcd022d6cf31ee20d
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Thu Nov 25 15:20:14 2021 +0000

    KVM: arm64: Avoid setting the upper 32 bits of TCR_EL2 and CPTR_EL2 to 1
    
    commit 1f80d15020d7f130194821feb1432b67648c632d upstream.
    
    Having a signed (1 << 31) constant for TCR_EL2_RES1 and CPTR_EL2_TCPAC
    causes the upper 32-bit to be set to 1 when assigning them to a 64-bit
    variable. Bit 32 in TCR_EL2 is no longer RES0 in ARMv8.7: with FEAT_LPA2
    it changes the meaning of bits 49:48 and 9:8 in the stage 1 EL2 page
    table entries. As a result of the sign-extension, a non-VHE kernel can
    no longer boot on a model with ARMv8.7 enabled.
    
    CPTR_EL2 still has the top 32 bits RES0 but we should preempt any future
    problems
    
    Make these top bit constants unsigned as per commit df655b75c43f
    ("arm64: KVM: Avoid setting the upper 32 bits of VTCR_EL2 to 1").
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Reported-by: Chris January <Chris.January@arm.com>
    Cc: <stable@vger.kernel.org>
    Cc: Will Deacon <will@kernel.org>
    Cc: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211125152014.2806582-1-catalin.marinas@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87d9c628be264a4d2dbb9eb0e7d629aef8b66339
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 22 13:01:37 2021 -0500

    KVM: MMU: shadow nested paging does not have PKU
    
    commit 28f091bc2f8c23b7eac2402956b692621be7f9f4 upstream.
    
    Initialize the mask for PKU permissions as if CR4.PKE=0, avoiding
    incorrect interpretations of the nested hypervisor's page tables.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9325b1dbdbf9563f78e61ad2865a66eb03e7b4ff
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 22 19:43:11 2021 -0500

    KVM: x86: Use a stable condition around all VT-d PI paths
    
    commit 53b7ca1a359389276c76fbc9e1009d8626a17e40 upstream.
    
    Currently, checks for whether VT-d PI can be used refer to the current
    status of the feature in the current vCPU; or they more or less pick
    vCPU 0 in case a specific vCPU is not available.
    
    However, these checks do not attempt to synchronize with changes to
    the IRTE.  In particular, there is no path that updates the IRTE when
    APICv is re-activated on vCPU 0; and there is no path to wakeup a CPU
    that has APICv disabled, if the wakeup occurs because of an IRTE
    that points to a posted interrupt.
    
    To fix this, always go through the VT-d PI path as long as there are
    assigned devices and APICv is available on both the host and the VM side.
    Since the relevant condition was copied over three times, take the hint
    and factor it into a separate function.
    
    Suggested-by: Sean Christopherson <seanjc@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Reviewed-by: David Matlack <dmatlack@google.com>
    Message-Id: <20211123004311.2954158-5-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70a37e04c08a543051f03ba5ea2add3feac69479
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 22 19:43:09 2021 -0500

    KVM: VMX: prepare sync_pir_to_irr for running with APICv disabled
    
    commit 7e1901f6c86c896acff6609e0176f93f756d8b2a upstream.
    
    If APICv is disabled for this vCPU, assigned devices may still attempt to
    post interrupts.  In that case, we need to cancel the vmentry and deliver
    the interrupt with KVM_REQ_EVENT.  Extend the existing code that handles
    injection of L1 interrupts into L2 to cover this case as well.
    
    vmx_hwapic_irr_update is only called when APICv is active so it would be
    confusing to add a check for vcpu->arch.apicv_active in there.  Instead,
    just use vmx_set_rvi directly in vmx_sync_pir_to_irr.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Reviewed-by: David Matlack <dmatlack@google.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211123004311.2954158-3-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ed61a2a6a280a7fd9cfe7ad2b6f7d2ae15be982
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Nov 25 01:49:43 2021 +0000

    KVM: nVMX: Abide to KVM_REQ_TLB_FLUSH_GUEST request on nested vmentry/vmexit
    
    commit 40e5f9080472b614eeedcc5ba678289cd98d70df upstream.
    
    Like KVM_REQ_TLB_FLUSH_CURRENT, the GUEST variant needs to be serviced at
    nested transitions, as KVM doesn't track requests for L1 vs L2.  E.g. if
    there's a pending flush when a nested VM-Exit occurs, then the flush was
    requested in the context of L2 and needs to be handled before switching
    to L1, otherwise the flush for L2 would effectiely be lost.
    
    Opportunistically add a helper to handle CURRENT and GUEST as a pair, the
    logic for when they need to be serviced is identical as both requests are
    tied to L1 vs. L2, the only difference is the scope of the flush.
    
    Reported-by: Lai Jiangshan <jiangshanlai+lkml@gmail.com>
    Fixes: 07ffaf343e34 ("KVM: nVMX: Sync all PGDs on nested transition with shadow paging")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211125014944.536398-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 361e68805ace6c06c7f52df2d535e627a1b704e7
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Nov 25 01:49:43 2021 +0000

    KVM: nVMX: Flush current VPID (L1 vs. L2) for KVM_REQ_TLB_FLUSH_GUEST
    
    commit 2b4a5a5d56881ece3c66b9a9a8943a6f41bd7349 upstream.
    
    Flush the current VPID when handling KVM_REQ_TLB_FLUSH_GUEST instead of
    always flushing vpid01.  Any TLB flush that is triggered when L2 is
    active is scoped to L2's VPID (if it has one), e.g. if L2 toggles CR4.PGE
    and L1 doesn't intercept PGE writes, then KVM's emulation of the TLB
    flush needs to be applied to L2's VPID.
    
    Reported-by: Lai Jiangshan <jiangshanlai+lkml@gmail.com>
    Fixes: 07ffaf343e34 ("KVM: nVMX: Sync all PGDs on nested transition with shadow paging")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211125014944.536398-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85f2cf6419dd2b562d8ced2deb913ed83fdc703d
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Nov 25 01:49:44 2021 +0000

    KVM: nVMX: Emulate guest TLB flush on nested VM-Enter with new vpid12
    
    commit 712494de96f35f3e146b36b752c2afe0fdc0f0cc upstream.
    
    Fully emulate a guest TLB flush on nested VM-Enter which changes vpid12,
    i.e. L2's VPID, instead of simply doing INVVPID to flush real hardware's
    TLB entries for vpid02.  From L1's perspective, changing L2's VPID is
    effectively a TLB flush unless "hardware" has previously cached entries
    for the new vpid12.  Because KVM tracks only a single vpid12, KVM doesn't
    know if the new vpid12 has been used in the past and so must treat it as
    a brand new, never been used VPID, i.e. must assume that the new vpid12
    represents a TLB flush from L1's perspective.
    
    For example, if L1 and L2 share a CR3, the first VM-Enter to L2 (with a
    VPID) is effectively a TLB flush as hardware/KVM has never seen vpid12
    and thus can't have cached entries in the TLB for vpid12.
    
    Reported-by: Lai Jiangshan <jiangshanlai+lkml@gmail.com>
    Fixes: 5c614b3583e7 ("KVM: nVMX: nested VPID emulation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211125014944.536398-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a929e1d7e5e0e0fbdbe0dc9ee04638745965108
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Nov 17 07:35:44 2021 -0500

    KVM: x86: ignore APICv if LAPIC is not enabled
    
    commit 78311a514099932cd8434d5d2194aa94e56ab67c upstream.
    
    Synchronize the two calls to kvm_x86_sync_pir_to_irr.  The one
    in the reenter-guest fast path invoked the callback unconditionally
    even if LAPIC is present but disabled.  In this case, there are
    no interrupts to deliver, and therefore posted interrupts can
    be ignored.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbe4fcf37150a409ab1bfc59be0cb3408ab22236
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Nov 4 00:25:02 2021 +0000

    KVM: Ensure local memslot copies operate on up-to-date arch-specific data
    
    commit bda44d844758c70c8dc1478e6fc9c25efa90c5a7 upstream.
    
    When modifying memslots, snapshot the "old" memslot and copy it to the
    "new" memslot's arch data after (re)acquiring slots_arch_lock.  x86 can
    change a memslot's arch data while memslot updates are in-progress so
    long as it holds slots_arch_lock, thus snapshotting a memslot without
    holding the lock can result in the consumption of stale data.
    
    Fixes: b10a038e84d1 ("KVM: mmu: Add slots_arch_lock for memslot arch fields")
    Cc: stable@vger.kernel.org
    Cc: Ben Gardon <bgardon@google.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211104002531.1176691-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bdc79ac9a4f1447eb14c6edcd6b05787b93b221
Author: Ben Gardon <bgardon@google.com>
Date:   Mon Nov 15 13:17:04 2021 -0800

    KVM: x86/mmu: Fix TLB flush range when handling disconnected pt
    
    commit 574c3c55e969096cea770eda3375ff35ccf91702 upstream.
    
    When recursively clearing out disconnected pts, the range based TLB
    flush in handle_removed_tdp_mmu_page uses the wrong starting GFN,
    resulting in the flush mostly missing the affected range. Fix this by
    using base_gfn for the flush.
    
    In response to feedback from David Matlack on the RFC version of this
    patch, also move a few definitions into the for loop in the function to
    prevent unintended references to them in the future.
    
    Fixes: a066e61f13cf ("KVM: x86/mmu: Factor out handling of removed page tables")
    CC: stable@vger.kernel.org
    Signed-off-by: Ben Gardon <bgardon@google.com>
    Message-Id: <20211115211704.2621644-1-bgardon@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0827b8db5c7fd3ecbe00e725f5295eda8e7aa9a7
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Nov 4 00:25:03 2021 +0000

    KVM: Disallow user memslot with size that exceeds "unsigned long"
    
    commit 6b285a5587506bae084cf9a3ed5aa491d623b91b upstream.
    
    Reject userspace memslots whose size exceeds the storage capacity of an
    "unsigned long".  KVM's uAPI takes the size as u64 to support large slots
    on 64-bit hosts, but does not account for the size being truncated on
    32-bit hosts in various flows.  The access_ok() check on the userspace
    virtual address in particular casts the size to "unsigned long" and will
    check the wrong number of bytes.
    
    KVM doesn't actually support slots whose size doesn't fit in an "unsigned
    long", e.g. KVM's internal kvm_memory_slot.npages is an "unsigned long",
    not a "u64", and misc arch specific code follows that behavior.
    
    Fixes: fa3d315a4ce2 ("KVM: Validate userspace_addr of memslot when registered")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maciej S. Szmigiero <maciej.szmigiero@oracle.com>
    Message-Id: <20211104002531.1176691-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1a1693ea4e2646280a618e52e8ae33f44e64744
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Nov 30 03:46:07 2021 -0500

    KVM: fix avic_set_running for preemptable kernels
    
    commit 7cfc5c653b07782e7059527df8dc1e3143a7591e upstream.
    
    avic_set_running() passes the current CPU to avic_vcpu_load(), albeit
    via vcpu->cpu rather than smp_processor_id().  If the thread is migrated
    while avic_set_running runs, the call to avic_vcpu_load() can use a stale
    value for the processor id.  Avoid this by blocking preemption over the
    entire execution of avic_set_running().
    
    Reported-by: Sean Christopherson <seanjc@google.com>
    Fixes: 8221c1370056 ("svm: Manage vcpu load/unload when enable AVIC")
    Cc: stable@vger.kernel.org
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 245241821ecf73a80e398f835d5510a9a80f6d31
Author: Lyude Paul <lyude@redhat.com>
Date:   Tue Nov 30 16:29:09 2021 -0500

    drm/i915/dp: Perform 30ms delay after source OUI write
    
    commit a44f42ba7f1ad7d3c17bc7d91013fe814a53c5dc upstream.
    
    While working on supporting the Intel HDR backlight interface, I noticed
    that there's a couple of laptops that will very rarely manage to boot up
    without detecting Intel HDR backlight support - even though it's supported
    on the system. One example of such a laptop is the Lenovo P17 1st
    generation.
    
    Following some investigation Ville Syrjälä did through the docs they have
    available to them, they discovered that there's actually supposed to be a
    30ms wait after writing the source OUI before we begin setting up the rest
    of the backlight interface.
    
    This seems to be correct, as adding this 30ms delay seems to have
    completely fixed the probing issues I was previously seeing. So - let's
    start performing a 30ms wait after writing the OUI, which we do in a manner
    similar to how we keep track of PPS delays (e.g. record the timestamp of
    the OUI write, and then wait for however many ms are left since that
    timestamp right before we interact with the backlight) in order to avoid
    waiting any longer then we need to. As well, this also avoids us performing
    this delay on systems where we don't end up using the HDR backlight
    interface.
    
    V3:
    * Move last_oui_write into intel_dp
    V2:
    * Move panel delays into intel_pps
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Fixes: 4a8d79901d5b ("drm/i915/dp: Enable Intel's HDR backlight interface (only SDR for now)")
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.12+
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211130212912.212044-1-lyude@redhat.com
    (cherry picked from commit c7c90b0b8418a97d3aa8b39aae1992908948efad)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7418356362ce0b464d98a4abbc473ce7bf7d6240
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Nov 12 15:27:32 2021 -0500

    drm/amd/display: Allow DSC on supported MST branch devices
    
    commit 94ebc035456a4ccacfbbef60c444079a256623ad upstream.
    
    [Why]
    When trying to lightup two 4k60 non-DSC displays behind a branch device
    that supports DSC we can't lightup both at once due to bandwidth
    limitations - each requires 48 VCPI slots but we only have 63.
    
    [How]
    The workaround already exists in the code but is guarded by a CONFIG
    that cannot be set by the user and shouldn't need to be.
    
    Check for specific branch device IDs to device whether to enable
    the workaround for multiple display scenarios.
    
    Reviewed-by: Hersen Wu <hersenxs.wu@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ef8a76a340ebdb2c2eea3f6fb0ebbed09a16383
Author: msizanoen1 <msizanoen@qtmlabs.xyz>
Date:   Tue Nov 23 13:48:32 2021 +0100

    ipv6: fix memory leak in fib6_rule_suppress
    
    commit cdef485217d30382f3bf6448c54b4401648fe3f1 upstream.
    
    The kernel leaks memory when a `fib` rule is present in IPv6 nftables
    firewall rules and a suppress_prefix rule is present in the IPv6 routing
    rules (used by certain tools such as wg-quick). In such scenarios, every
    incoming packet will leak an allocation in `ip6_dst_cache` slab cache.
    
    After some hours of `bpftrace`-ing and source code reading, I tracked
    down the issue to ca7a03c41753 ("ipv6: do not free rt if
    FIB_LOOKUP_NOREF is set on suppress rule").
    
    The problem with that change is that the generic `args->flags` always have
    `FIB_LOOKUP_NOREF` set[1][2] but the IPv6-specific flag
    `RT6_LOOKUP_F_DST_NOREF` might not be, leading to `fib6_rule_suppress` not
    decreasing the refcount when needed.
    
    How to reproduce:
     - Add the following nftables rule to a prerouting chain:
         meta nfproto ipv6 fib saddr . mark . iif oif missing drop
       This can be done with:
         sudo nft create table inet test
         sudo nft create chain inet test test_chain '{ type filter hook prerouting priority filter + 10; policy accept; }'
         sudo nft add rule inet test test_chain meta nfproto ipv6 fib saddr . mark . iif oif missing drop
     - Run:
         sudo ip -6 rule add table main suppress_prefixlength 0
     - Watch `sudo slabtop -o | grep ip6_dst_cache` to see memory usage increase
       with every incoming ipv6 packet.
    
    This patch exposes the protocol-specific flags to the protocol
    specific `suppress` function, and check the protocol-specific `flags`
    argument for RT6_LOOKUP_F_DST_NOREF instead of the generic
    FIB_LOOKUP_NOREF when decreasing the refcount, like this.
    
    [1]: https://github.com/torvalds/linux/blob/ca7a03c4175366a92cee0ccc4fec0038c3266e26/net/ipv6/fib6_rules.c#L71
    [2]: https://github.com/torvalds/linux/blob/ca7a03c4175366a92cee0ccc4fec0038c3266e26/net/ipv6/fib6_rules.c#L99
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215105
    Fixes: ca7a03c41753 ("ipv6: do not free rt if FIB_LOOKUP_NOREF is set on suppress rule")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ce84ab279ef9b6b910e8ae7c39bac171794a7b5
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Nov 24 22:42:18 2021 +0200

    scsi: ufs: ufs-pci: Add support for Intel ADL
    
    commit 7dc9fb47bc9a95f1cc6c5655341860c5e50f91d4 upstream.
    
    Add PCI ID and callbacks to support Intel Alder Lake.
    
    Link: https://lore.kernel.org/r/20211124204218.1784559-1-adrian.hunter@intel.com
    Cc: stable@vger.kernel.org # v5.15+
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8392866c522a4bae63ea92313f839535f2d4be8
Author: James Smart <jsmart2021@gmail.com>
Date:   Tue Nov 23 08:56:46 2021 -0800

    scsi: lpfc: Fix non-recovery of remote ports following an unsolicited LOGO
    
    commit 0956ba63bd94355bf38cd40f7eb9104577739ab8 upstream.
    
    A commit introduced formal regstration of all Fabric nodes to the SCSI
    transport as well as REG/UNREG RPI mailbox requests. The commit introduced
    the NLP_RELEASE_RPI flag for rports set in the lpfc_cmpl_els_logo_acc()
    routine to help clean up the RPIs. This new code caused the driver to
    release the RPI value used for the remote port and marked the RPI invalid.
    When the driver later attempted to re-login, it would use the invalid RPI
    and the adapter rejected the PLOGI request.  As no login occurred, the
    devloss timer on the rport expired and connectivity was lost.
    
    This patch corrects the code by removing the snippet that requests the rpi
    to be unregistered. This change only occurs on a node that is already
    marked to be rediscovered. This puts the code back to its original
    behavior, preserving the already-assigned rpi value (registered or not)
    which can be used on the re-login attempts.
    
    Link: https://lore.kernel.org/r/20211123165646.62740-1-jsmart2021@gmail.com
    Fixes: fe83e3b9b422 ("scsi: lpfc: Fix node handling for Fabric Controller and Domain Controller")
    Cc: <stable@vger.kernel.org> # v5.14+
    Co-developed-by: Paul Ely <paul.ely@broadcom.com>
    Signed-off-by: Paul Ely <paul.ely@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd267e59a181d9d1bd21f4cefc1e8701414a5c85
Author: Baokun Li <libaokun1@huawei.com>
Date:   Fri Nov 26 10:03:07 2021 +0800

    sata_fsl: fix warning in remove_proc_entry when rmmod sata_fsl
    
    commit 6f48394cf1f3e8486591ad98c11cdadb8f1ef2ad upstream.
    
    Trying to remove the fsl-sata module in the PPC64 GNU/Linux
    leads to the following warning:
     ------------[ cut here ]------------
     remove_proc_entry: removing non-empty directory 'irq/69',
       leaking at least 'fsl-sata[ff0221000.sata]'
     WARNING: CPU: 3 PID: 1048 at fs/proc/generic.c:722
       .remove_proc_entry+0x20c/0x220
     IRQMASK: 0
     NIP [c00000000033826c] .remove_proc_entry+0x20c/0x220
     LR [c000000000338268] .remove_proc_entry+0x208/0x220
     Call Trace:
      .remove_proc_entry+0x208/0x220 (unreliable)
      .unregister_irq_proc+0x104/0x140
      .free_desc+0x44/0xb0
      .irq_free_descs+0x9c/0xf0
      .irq_dispose_mapping+0x64/0xa0
      .sata_fsl_remove+0x58/0xa0 [sata_fsl]
      .platform_drv_remove+0x40/0x90
      .device_release_driver_internal+0x160/0x2c0
      .driver_detach+0x64/0xd0
      .bus_remove_driver+0x70/0xf0
      .driver_unregister+0x38/0x80
      .platform_driver_unregister+0x14/0x30
      .fsl_sata_driver_exit+0x18/0xa20 [sata_fsl]
     ---[ end trace 0ea876d4076908f5 ]---
    
    The driver creates the mapping by calling irq_of_parse_and_map(),
    so it also has to dispose the mapping. But the easy way out is to
    simply use platform_get_irq() instead of irq_of_parse_map(). Also
    we should adapt return value checking and propagate error values.
    
    In this case the mapping is not managed by the device but by
    the of core, so the device has not to dispose the mapping.
    
    Fixes: faf0b2e5afe7 ("drivers/ata: add support to Freescale 3.0Gbps SATA Controller")
    Cc: stable@vger.kernel.org
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit adf098e2a8a1e1fc075d6a5ba2edd13cf7189082
Author: Baokun Li <libaokun1@huawei.com>
Date:   Fri Nov 26 10:03:06 2021 +0800

    sata_fsl: fix UAF in sata_fsl_port_stop when rmmod sata_fsl
    
    commit 6c8ad7e8cf29eb55836e7a0215f967746ab2b504 upstream.
    
    When the `rmmod sata_fsl.ko` command is executed in the PPC64 GNU/Linux,
    a bug is reported:
     ==================================================================
     BUG: Unable to handle kernel data access on read at 0x80000800805b502c
     Oops: Kernel access of bad area, sig: 11 [#1]
     NIP [c0000000000388a4] .ioread32+0x4/0x20
     LR [80000000000c6034] .sata_fsl_port_stop+0x44/0xe0 [sata_fsl]
     Call Trace:
      .free_irq+0x1c/0x4e0 (unreliable)
      .ata_host_stop+0x74/0xd0 [libata]
      .release_nodes+0x330/0x3f0
      .device_release_driver_internal+0x178/0x2c0
      .driver_detach+0x64/0xd0
      .bus_remove_driver+0x70/0xf0
      .driver_unregister+0x38/0x80
      .platform_driver_unregister+0x14/0x30
      .fsl_sata_driver_exit+0x18/0xa20 [sata_fsl]
      .__se_sys_delete_module+0x1ec/0x2d0
      .system_call_exception+0xfc/0x1f0
      system_call_common+0xf8/0x200
     ==================================================================
    
    The triggering of the BUG is shown in the following stack:
    
    driver_detach
      device_release_driver_internal
        __device_release_driver
          drv->remove(dev) --> platform_drv_remove/platform_remove
            drv->remove(dev) --> sata_fsl_remove
              iounmap(host_priv->hcr_base);                 <---- unmap
              kfree(host_priv);                             <---- free
          devres_release_all
            release_nodes
              dr->node.release(dev, dr->data) --> ata_host_stop
                ap->ops->port_stop(ap) --> sata_fsl_port_stop
                    ioread32(hcr_base + HCONTROL)           <---- UAF
                host->ops->host_stop(host)
    
    The iounmap(host_priv->hcr_base) and kfree(host_priv) functions should
    not be executed in drv->remove. These functions should be executed in
    host_stop after port_stop. Therefore, we move these functions to the
    new function sata_fsl_host_stop and bind the new function to host_stop.
    
    Fixes: faf0b2e5afe7 ("drivers/ata: add support to Freescale 3.0Gbps SATA Controller")
    Cc: stable@vger.kernel.org
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fe4eadd54da3040cf6f6579ae157ae1395dc0f8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 1 10:06:14 2021 -0800

    fget: check that the fd still exists after getting a ref to it
    
    commit 054aa8d439b9185d4f5eb9a90282d1ce74772969 upstream.
    
    Jann Horn points out that there is another possible race wrt Unix domain
    socket garbage collection, somewhat reminiscent of the one fixed in
    commit cbcf01128d0a ("af_unix: fix garbage collect vs MSG_PEEK").
    
    See the extended comment about the garbage collection requirements added
    to unix_peek_fds() by that commit for details.
    
    The race comes from how we can locklessly look up a file descriptor just
    as it is in the process of being closed, and with the right artificial
    timing (Jann added a few strategic 'mdelay(500)' calls to do that), the
    Unix domain socket garbage collector could see the reference count
    decrement of the close() happen before fget() took its reference to the
    file and the file was attached onto a new file descriptor.
    
    This is all (intentionally) correct on the 'struct file *' side, with
    RCU lookups and lockless reference counting very much part of the
    design.  Getting that reference count out of order isn't a problem per
    se.
    
    But the garbage collector can get confused by seeing this situation of
    having seen a file not having any remaining external references and then
    seeing it being attached to an fd.
    
    In commit cbcf01128d0a ("af_unix: fix garbage collect vs MSG_PEEK") the
    fix was to serialize the file descriptor install with the garbage
    collector by taking and releasing the unix_gc_lock.
    
    That's not really an option here, but since this all happens when we are
    in the process of looking up a file descriptor, we can instead simply
    just re-check that the file hasn't been closed in the meantime, and just
    re-do the lookup if we raced with a concurrent close() of the same file
    descriptor.
    
    Reported-and-tested-by: Jann Horn <jannh@google.com>
    Acked-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31aa63f69a3ce101de5a19f3f0bd0136c378aa3d
Author: Niklas Schnelle <schnelle@linux.ibm.com>
Date:   Thu Nov 4 15:04:10 2021 +0100

    s390/pci: move pseudo-MMIO to prevent MIO overlap
    
    commit 52d04d408185b7aa47628d2339c28ec70074e0ae upstream.
    
    When running without MIO support, with pci=nomio or for devices which
    are not MIO-capable the zPCI subsystem generates pseudo-MMIO addresses
    to allow access to PCI BARs via MMIO based Linux APIs even though the
    platform uses function handles and BAR numbers.
    
    This is done by stashing an index into our global IOMAP array which
    contains the function handle in the 16 most significant bits of the
    addresses returned by ioremap() always setting the most significant bit.
    
    On the other hand the MIO addresses assigned by the platform for use,
    while requiring special instructions, allow PCI access with virtually
    mapped physical addresses. Now the problem is that these MIO addresses
    and our own pseudo-MMIO addresses may overlap, while functionally this
    would not be a problem by itself this overlap is detected by common code
    as both address types are added as resources in the iomem_resource tree.
    This leads to the overlapping resource claim of either the MIO capable
    or non-MIO capable devices with being rejected.
    
    Since PCI is tightly coupled to the use of the iomem_resource tree, see
    for example the code for request_mem_region(), we can't reasonably get
    rid of the overlap being detected by keeping our pseudo-MMIO addresses
    out of the iomem_resource tree.
    
    Instead let's move the range used by our own pseudo-MMIO addresses by
    starting at (1UL << 62) and only using addresses below (1UL << 63) thus
    avoiding the range currently used for MIO addresses.
    
    Fixes: c7ff0e918a7c ("s390/pci: deal with devices that have no support for MIO instructions")
    Cc: stable@vger.kernel.org # 5.3+
    Reviewed-by: Pierre Morel <pmorel@linux.ibm.com>
    Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1079ff6f9a082902eef86246a28de80bb33a011
Author: Guangming <Guangming.Cao@mediatek.com>
Date:   Fri Nov 26 15:49:04 2021 +0800

    dma-buf: system_heap: Use 'for_each_sgtable_sg' in pages free flow
    
    commit 679d94cd7d900871e5bc9cf780bd5b73af35ab42 upstream.
    
    For previous version, it uses 'sg_table.nent's to traverse sg_table in pages
    free flow.
    However, 'sg_table.nents' is reassigned in 'dma_map_sg', it means the number of
    created entries in the DMA adderess space.
    So, use 'sg_table.nents' in pages free flow will case some pages can't be freed.
    
    Here we should use sg_table.orig_nents to free pages memory, but use the
    sgtable helper 'for each_sgtable_sg'(, instead of the previous rather common
    helper 'for_each_sg' which maybe cause memory leak) is much better.
    
    Fixes: d963ab0f15fb0 ("dma-buf: system_heap: Allocate higher order pages if available")
    Signed-off-by: Guangming <Guangming.Cao@mediatek.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Cc: <stable@vger.kernel.org> # 5.11.*
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211126074904.88388-1-guangming.cao@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 075d9c1497f2b5c4f0f4568fac2d1b82be866e3e
Author: Mordechay Goodstein <mordechay.goodstein@intel.com>
Date:   Wed Nov 10 15:01:59 2021 +0200

    iwlwifi: mvm: retry init flow if failed
    
    commit 5283dd677e52af9db6fe6ad11b2f12220d519d0c upstream.
    
    In some very rare cases the init flow may fail.  In many cases, this is
    recoverable, so we can retry.  Implement a loop to retry two more times
    after the first attempt failed.
    
    This can happen in two different situations, namely during probe and
    during mac80211 start.  For the first case, a simple loop is enough.
    For the second case, we need to add a flag to prevent mac80211 from
    trying to restart it as well, leaving full control with the driver.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Mordechay Goodstein <mordechay.goodstein@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20211110150132.57514296ecab.I52a0411774b700bdc7dedb124d8b59bf99456eb2@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c649d47801df4c89c43125c8cf0a2ffdf2e7bbc1
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Mon Nov 29 16:02:48 2021 +0800

    cpufreq: Fix get_cpu_device() failure in add_cpu_dev_symlink()
    
    commit 2c1b5a84669d2477d8fffe9136e86a2cff591729 upstream.
    
    When I hot added a CPU, I found 'cpufreq' directory was not created
    below /sys/devices/system/cpu/cpuX/.
    
    It is because get_cpu_device() failed in add_cpu_dev_symlink().
    
    cpufreq_add_dev() is the .add_dev callback of a CPU subsys interface.
    It will be called when the CPU device registered into the system.
    The call chain is as follows:
    
      register_cpu()
      ->device_register()
       ->device_add()
        ->bus_probe_device()
         ->cpufreq_add_dev()
    
    But only after the CPU device has been registered, we can get the
    CPU device by get_cpu_device(), otherwise it will return NULL.
    
    Since we already have the CPU device in cpufreq_add_dev(), pass
    it to add_cpu_dev_symlink().
    
    I noticed that the 'kobj' of the CPU device has been added into
    the system before cpufreq_add_dev().
    
    Fixes: 2f0ba790df51 ("cpufreq: Fix creation of symbolic links to policy directories")
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4618188b15af986c4f43bb63271edc7d07f73aa
Author: Ioanna Alifieraki <ioanna-maria.alifieraki@canonical.com>
Date:   Mon Nov 15 15:16:45 2021 +0200

    ipmi: Move remove_work to dedicated workqueue
    
    commit 1d49eb91e86e8c1c1614c72e3e958b6b7e2472a9 upstream.
    
    Currently when removing an ipmi_user the removal is deferred as a work on
    the system's workqueue. Although this guarantees the free operation will
    occur in non atomic context, it can race with the ipmi_msghandler module
    removal (see [1]) . In case a remove_user work is scheduled for removal
    and shortly after ipmi_msghandler module is removed we can end up in a
    situation where the module is removed fist and when the work is executed
    the system crashes with :
    BUG: unable to handle page fault for address: ffffffffc05c3450
    PF: supervisor instruction fetch in kernel mode
    PF: error_code(0x0010) - not-present page
    because the pages of the module are gone. In cleanup_ipmi() there is no
    easy way to detect if there are any pending works to flush them before
    removing the module. This patch creates a separate workqueue and schedules
    the remove_work works on it. When removing the module the workqueue is
    drained when destroyed to avoid the race.
    
    [1] https://bugs.launchpad.net/bugs/1950666
    
    Cc: stable@vger.kernel.org # 5.1
    Fixes: 3b9a907223d7 (ipmi: fix sleep-in-atomic in free_user at cleanup SRCU user->release_barrier)
    Signed-off-by: Ioanna Alifieraki <ioanna-maria.alifieraki@canonical.com>
    Message-Id: <20211115131645.25116-1-ioanna-maria.alifieraki@canonical.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a715e15588c777cb33a75c2cd38e6f195688f02
Author: Stanislaw Gruszka <stf_xl@wp.pl>
Date:   Thu Nov 11 15:10:03 2021 +0100

    rt2x00: do not mark device gone on EPROTO errors during start
    
    commit ed53ae75693096f1c10b4561edd31a07b631bd72 upstream.
    
    As reported by Exuvo is possible that we have lot's of EPROTO errors
    during device start i.e. firmware load. But after that device works
    correctly. Hence marking device gone by few EPROTO errors done by
    commit e383c70474db ("rt2x00: check number of EPROTO errors") caused
    regression - Exuvo device stop working after kernel update. To fix
    disable the check during device start.
    
    Link: https://lore.kernel.org/linux-wireless/bff7d309-a816-6a75-51b6-5928ef4f7a8c@exuvo.se/
    Reported-and-tested-by: Exuvo <exuvo@exuvo.se>
    Fixes: e383c70474db ("rt2x00: check number of EPROTO errors")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stanislaw Gruszka <stf_xl@wp.pl>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20211111141003.GA134627@wp.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edbdf9da8015466c6f61db0b17212e8621fa58ec
Author: Stefan Binding <sbinding@opensource.cirrus.com>
Date:   Sun Nov 28 11:55:58 2021 +0000

    ALSA: hda/cs8409: Set PMSG_ON earlier inside cs8409 driver
    
    commit 65cc4ad62a9ed47c0b4fcd7af667d97d7c29f19d upstream.
    
    For cs8409, it is required to run Jack Detect on resume.
    Jack Detect on cs8409+cs42l42 requires an interrupt from
    cs42l42 to be sent to cs8409 which is propogated to the driver
    via an unsolicited event.
    However, the hda_codec drops unsolicited events if the power_state
    is not set to PMSG_ON. Which is set at the end of the resume call.
    This means there is a race condition between setting power_state
    to PMSG_ON and receiving the interrupt.
    To solve this, we can add an API to set the power_state earlier
    and call that before we start Jack Detect.
    This does not cause issues, since we know inside our driver that
    we are already initialized, and ready to handle the unsolicited
    events.
    
    Signed-off-by: Stefan Binding <sbinding@opensource.cirrus.com>
    Signed-off-by: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
    Cc: <stable@vger.kernel.org> # v5.15+
    Link: https://lore.kernel.org/r/20211128115558.71683-1-vitalyr@opensource.cirrus.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16ccd481e3d8773065240b2b4e6e21853fe86b1d
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Dec 1 23:45:50 2021 +0900

    kprobes: Limit max data_size of the kretprobe instances
    
    commit 6bbfa44116689469267f1a6e3d233b52114139d2 upstream.
    
    The 'kprobe::data_size' is unsigned, thus it can not be negative.  But if
    user sets it enough big number (e.g. (size_t)-8), the result of 'data_size
    + sizeof(struct kretprobe_instance)' becomes smaller than sizeof(struct
    kretprobe_instance) or zero. In result, the kretprobe_instance are
    allocated without enough memory, and kretprobe accesses outside of
    allocated memory.
    
    To avoid this issue, introduce a max limitation of the
    kretprobe::data_size. 4KB per instance should be OK.
    
    Link: https://lkml.kernel.org/r/163836995040.432120.10322772773821182925.stgit@devnote2
    
    Cc: stable@vger.kernel.org
    Fixes: f47cd9b553aa ("kprobes: kretprobe user entry-handler")
    Reported-by: zhangyue <zhangyue1@kylinos.cn>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75fc0eba15df8dcb13a0a5083b975554f5958ff4
Author: Stephen Suryaputra <ssuryaextr@gmail.com>
Date:   Tue Nov 30 11:26:37 2021 -0500

    vrf: Reset IPCB/IP6CB when processing outbound pkts in vrf dev xmit
    
    commit ee201011c1e1563c114a55c86eb164b236f18e84 upstream.
    
    IPCB/IP6CB need to be initialized when processing outbound v4 or v6 pkts
    in the codepath of vrf device xmit function so that leftover garbage
    doesn't cause futher code that uses the CB to incorrectly process the
    pkt.
    
    One occasion of the issue might occur when MPLS route uses the vrf
    device as the outgoing device such as when the route is added using "ip
    -f mpls route add <label> dev <vrf>" command.
    
    The problems seems to exist since day one. Hence I put the day one
    commits on the Fixes tags.
    
    Fixes: 193125dbd8eb ("net: Introduce VRF device driver")
    Fixes: 35402e313663 ("net: Add IPv6 support to VRF device")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephen Suryaputra <ssuryaextr@gmail.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20211130162637.3249-1-ssuryaextr@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 275827a7dcafe8e02ccd3f6c489bbdcf8ec532b4
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Mon Nov 29 17:32:12 2021 +0800

    net/tls: Fix authentication failure in CCM mode
    
    commit 5961060692f8b17cd2080620a3d27b95d2ae05ca upstream.
    
    When the TLS cipher suite uses CCM mode, including AES CCM and
    SM4 CCM, the first byte of the B0 block is flags, and the real
    IV starts from the second byte. The XOR operation of the IV and
    rec_seq should be skip this byte, that is, add the iv_offset.
    
    Fixes: f295b3ae9f59 ("net/tls: Add support of AES128-CCM based ciphers")
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Cc: Vakul Garg <vakul.garg@nxp.com>
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f06c3b728ae7169865a6ca7df243d5f3e7a77a24
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Sun Oct 31 20:48:52 2021 -0500

    ACPI: Add stubs for wakeup handler functions
    
    [ Upstream commit e9380df851878cee71df5a1c7611584421527f7e ]
    
    The commit ddfd9dcf270c ("ACPI: PM: Add acpi_[un]register_wakeup_handler()")
    added new functions for drivers to use during the s2idle wakeup path, but
    didn't add stubs for when CONFIG_ACPI wasn't set.
    
    Add those stubs in for other drivers to be able to use.
    
    Fixes: ddfd9dcf270c ("ACPI: PM: Add acpi_[un]register_wakeup_handler()")
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Link: https://lore.kernel.org/r/20211101014853.6177-1-mario.limonciello@amd.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b589021871cfe509bddef45d7707fca23333eddd
Author: Wen Gu <guwen@linux.alibaba.com>
Date:   Mon Nov 22 20:32:53 2021 +0800

    net/smc: Avoid warning of possible recursive locking
    
    [ Upstream commit 7a61432dc81375be06b02f0061247d3efbdfce3a ]
    
    Possible recursive locking is detected by lockdep when SMC
    falls back to TCP. The corresponding warnings are as follows:
    
     ============================================
     WARNING: possible recursive locking detected
     5.16.0-rc1+ #18 Tainted: G            E
     --------------------------------------------
     wrk/1391 is trying to acquire lock:
     ffff975246c8e7d8 (&ei->socket.wq.wait){..-.}-{3:3}, at: smc_switch_to_fallback+0x109/0x250 [smc]
    
     but task is already holding lock:
     ffff975246c8f918 (&ei->socket.wq.wait){..-.}-{3:3}, at: smc_switch_to_fallback+0xfe/0x250 [smc]
    
     other info that might help us debug this:
      Possible unsafe locking scenario:
    
            CPU0
            ----
       lock(&ei->socket.wq.wait);
       lock(&ei->socket.wq.wait);
    
      *** DEADLOCK ***
    
      May be due to missing lock nesting notation
    
     2 locks held by wrk/1391:
      #0: ffff975246040130 (sk_lock-AF_SMC){+.+.}-{0:0}, at: smc_connect+0x43/0x150 [smc]
      #1: ffff975246c8f918 (&ei->socket.wq.wait){..-.}-{3:3}, at: smc_switch_to_fallback+0xfe/0x250 [smc]
    
     stack backtrace:
     Call Trace:
      <TASK>
      dump_stack_lvl+0x56/0x7b
      __lock_acquire+0x951/0x11f0
      lock_acquire+0x27a/0x320
      ? smc_switch_to_fallback+0x109/0x250 [smc]
      ? smc_switch_to_fallback+0xfe/0x250 [smc]
      _raw_spin_lock_irq+0x3b/0x80
      ? smc_switch_to_fallback+0x109/0x250 [smc]
      smc_switch_to_fallback+0x109/0x250 [smc]
      smc_connect_fallback+0xe/0x30 [smc]
      __smc_connect+0xcf/0x1090 [smc]
      ? mark_held_locks+0x61/0x80
      ? __local_bh_enable_ip+0x77/0xe0
      ? lockdep_hardirqs_on+0xbf/0x130
      ? smc_connect+0x12a/0x150 [smc]
      smc_connect+0x12a/0x150 [smc]
      __sys_connect+0x8a/0xc0
      ? syscall_enter_from_user_mode+0x20/0x70
      __x64_sys_connect+0x16/0x20
      do_syscall_64+0x34/0x90
      entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The nested locking in smc_switch_to_fallback() is considered to
    possibly cause a deadlock because smc_wait->lock and clc_wait->lock
    are the same type of lock. But actually it is safe so far since
    there is no other place trying to obtain smc_wait->lock when
    clc_wait->lock is held. So the patch replaces spin_lock() with
    spin_lock_nested() to avoid false report by lockdep.
    
    Link: https://lkml.org/lkml/2021/11/19/962
    Fixes: 2153bd1e3d3d ("Transfer remaining wait queue entries during fallback")
    Reported-by: syzbot+e979d3597f48262cb4ee@syzkaller.appspotmail.com
    Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
    Acked-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 859ea5a20ee718093ceb28b8a39916c908be7d64
Author: Nikita Yushchenko <nikita.yushchenko@virtuozzo.com>
Date:   Thu Nov 18 17:55:16 2021 +0300

    tracing: Don't use out-of-sync va_list in event printing
    
    [ Upstream commit 2ef75e9bd2c998f1c6f6f23a3744136105ddefd5 ]
    
    If trace_seq becomes full, trace_seq_vprintf() no longer consumes
    arguments from va_list, making va_list out of sync with format
    processing by trace_check_vprintf().
    
    This causes va_arg() in trace_check_vprintf() to return wrong
    positional argument, which results into a WARN_ON_ONCE() hit.
    
    ftrace_stress_test from LTP triggers this situation.
    
    Fix it by explicitly avoiding further use if va_list at the point
    when it's consistency can no longer be guaranteed.
    
    Link: https://lkml.kernel.org/r/20211118145516.13219-1-nikita.yushchenko@virtuozzo.com
    
    Signed-off-by: Nikita Yushchenko <nikita.yushchenko@virtuozzo.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71e284dcebecb9fd204ff11097469cc547723ad1
Author: Ian Rogers <irogers@google.com>
Date:   Wed Nov 17 23:38:04 2021 -0800

    perf report: Fix memory leaks around perf_tip()
    
    [ Upstream commit d9fc706108c15f8bc2d4ccccf8e50f74830fabd9 ]
    
    perf_tip() may allocate memory or use a literal, this means memory
    wasn't freed if allocated. Change the API so that literals aren't used.
    
    At the same time add missing frees for system_path. These issues were
    spotted using leak sanitizer.
    
    Signed-off-by: Ian Rogers <irogers@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lore.kernel.org/lkml/20211118073804.2149974-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b5c6f57a1f81499db4c8ea597898cb1b87de0b6
Author: Ian Rogers <irogers@google.com>
Date:   Wed Nov 17 23:12:47 2021 -0800

    perf hist: Fix memory leak of a perf_hpp_fmt
    
    [ Upstream commit 0ca1f534a776cc7d42f2c33da4732b74ec2790cd ]
    
    perf_hpp__column_unregister() removes an entry from a list but doesn't
    free the memory causing a memory leak spotted by leak sanitizer.
    
    Add the free while at the same time reducing the scope of the function
    to static.
    
    Signed-off-by: Ian Rogers <irogers@google.com>
    Reviewed-by: Kajol Jain <kjain@linux.ibm.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lore.kernel.org/lkml/20211118071247.2140392-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27802de133dc9801bc876e7d406a339852a22726
Author: German Gomez <german.gomez@arm.com>
Date:   Fri Nov 5 10:41:30 2021 +0000

    perf inject: Fix ARM SPE handling
    
    [ Upstream commit 9e1a8d9f683260d50e0a14176d3f7c46a93b2700 ]
    
    'perf inject' is currently not working for Arm SPE. When you try to run
    'perf inject' and 'perf report' with a perf.data file that contains SPE
    traces, the tool reports a "Bad address" error:
    
      # ./perf record -e arm_spe_0/ts_enable=1,store_filter=1,branch_filter=1,load_filter=1/ -a -- sleep 1
      # ./perf inject -i perf.data -o perf.inject.data --itrace
      # ./perf report -i perf.inject.data --stdio
    
      0x42c00 [0x8]: failed to process type: 9 [Bad address]
      Error:
      failed to process sample
    
    As far as I know, the issue was first spotted in [1], but 'perf inject'
    was not yet injecting the samples. This patch does something similar to
    what cs_etm does for injecting the samples [2], but for SPE.
    
    [1] https://patchwork.kernel.org/project/linux-arm-kernel/cover/20210412091006.468557-1-leo.yan@linaro.org/#24117339
    [2] https://git.kernel.org/pub/scm/linux/kernel/git/acme/linux.git/tree/tools/perf/util/cs-etm.c?h=perf/core&id=133fe2e617e48ca0948983329f43877064ffda3e#n1196
    
    Reviewed-by: James Clark <james.clark@arm.com>
    Signed-off-by: German Gomez <german.gomez@arm.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: John Garry <john.garry@huawei.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Will Deacon <will@kernel.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lore.kernel.org/r/20211105104130.28186-2-german.gomez@arm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf49756c3d68a5c54130c52c40c1cf51130baee6
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Fri Nov 5 15:56:17 2021 -0700

    perf sort: Fix the 'p_stage_cyc' sort key behavior
    
    [ Upstream commit db4b284029099224f387d75198e5995df1cb8aef ]
    
    andle 'p_stage_cyc' (for pipeline stage cycles) sort key with the same
    rationale as for the 'weight' and 'local_weight', see the fix in this
    series for a full explanation.
    
    Not sure it also needs the local and global variants.
    
    But I couldn't test it actually because I don't have the machine.
    
    Reviewed-by: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Tested-by: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: https://lore.kernel.org/r/20211105225617.151364-3-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 199e20f4fdfa42cca8142919899a8699d398ec02
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Fri Nov 5 15:56:16 2021 -0700

    perf sort: Fix the 'ins_lat' sort key behavior
    
    [ Upstream commit 4d03c75363eeca861c843319a0e6f4426234ed6c ]
    
    Handle 'ins_lat' (for instruction latency) and 'local_ins_lat' sort keys
    with the same rationale as for the 'weight' and 'local_weight', see the
    previous fix in this series for a full explanation.
    
    But I couldn't test it actually, so only build tested.
    
    Reviewed-by: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Tested-by: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: https://lore.kernel.org/r/20211105225617.151364-2-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57482dc5ac7d67bc4d1a6af85625016dae54e749
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Fri Nov 5 15:56:15 2021 -0700

    perf sort: Fix the 'weight' sort key behavior
    
    [ Upstream commit 784e8adda4cdb3e2510742023729851b6c08803c ]
    
    Currently, the 'weight' field in the perf sample has latency information
    for some instructions like in memory accesses.  And perf tool has 'weight'
    and 'local_weight' sort keys to display the info.
    
    But it's somewhat confusing what it shows exactly.  In my understanding,
    'local_weight' shows a weight in a single sample, and (global) 'weight'
    shows a sum of the weights in the hist_entry.
    
    For example:
    
      $ perf mem record -t load dd if=/dev/zero of=/dev/null bs=4k count=1M
    
      $ perf report --stdio -n -s +local_weight
      ...
      #
      # Overhead  Samples  Command  Shared Object     Symbol                     Local Weight
      # ........  .......  .......  ................  .........................  ............
      #
          21.23%      313  dd       [kernel.vmlinux]  [k] lockref_get_not_zero   32
          12.43%      183  dd       [kernel.vmlinux]  [k] lockref_get_not_zero   35
          11.97%      159  dd       [kernel.vmlinux]  [k] lockref_get_not_zero   36
          10.40%      141  dd       [kernel.vmlinux]  [k] lockref_put_return     32
           7.63%      113  dd       [kernel.vmlinux]  [k] lockref_get_not_zero   33
           6.37%       92  dd       [kernel.vmlinux]  [k] lockref_get_not_zero   34
           6.15%       90  dd       [kernel.vmlinux]  [k] lockref_put_return     33
      ...
    
    So let's look at the 'lockref_get_not_zero' symbols.  The top entry
    shows that 313 samples were captured with 'local_weight' 32, so the
    total weight should be 313 x 32 = 10016.  But it's not the case:
    
      $ perf report --stdio -n -s +local_weight,weight -S lockref_get_not_zero
      ...
      #
      # Overhead  Samples  Command  Shared Object     Local Weight  Weight
      # ........  .......  .......  ................  ............  ......
      #
           1.36%        4  dd       [kernel.vmlinux]  36            144
           0.47%        4  dd       [kernel.vmlinux]  37            148
           0.42%        4  dd       [kernel.vmlinux]  32            128
           0.40%        4  dd       [kernel.vmlinux]  34            136
           0.35%        4  dd       [kernel.vmlinux]  36            144
           0.34%        4  dd       [kernel.vmlinux]  35            140
           0.30%        4  dd       [kernel.vmlinux]  36            144
           0.30%        4  dd       [kernel.vmlinux]  34            136
           0.30%        4  dd       [kernel.vmlinux]  32            128
           0.30%        4  dd       [kernel.vmlinux]  32            128
      ...
    
    With the 'weight' sort key, it's divided to 4 samples even with the same
    info ('comm', 'dso', 'sym' and 'local_weight').  I don't think this is
    what we want.
    
    I found this because of the way it aggregates the 'weight' value.  Since
    it's not a period, we should not add them in the he->stat.  Otherwise,
    two 32 'weight' entries will create a 64 'weight' entry.
    
    After that, new 32 'weight' samples don't have a matching entry so it'd
    create a new entry and make it a 64 'weight' entry again and again.
    Later, they will be merged into 128 'weight' entries during the
    hists__collapse_resort() with 4 samples, multiple times like above.
    
    Let's keep the weight and display it differently.  For 'local_weight',
    it can show the weight as is, and for (global) 'weight' it can display
    the number multiplied by the number of samples.
    
    With this change, I can see the expected numbers.
    
      $ perf report --stdio -n -s +local_weight,weight -S lockref_get_not_zero
      ...
      #
      # Overhead  Samples  Command  Shared Object     Local Weight  Weight
      # ........  .......  .......  ................  ............  .....
      #
          21.23%      313  dd       [kernel.vmlinux]  32            10016
          12.43%      183  dd       [kernel.vmlinux]  35            6405
          11.97%      159  dd       [kernel.vmlinux]  36            5724
           7.63%      113  dd       [kernel.vmlinux]  33            3729
           6.37%       92  dd       [kernel.vmlinux]  34            3128
           4.17%       59  dd       [kernel.vmlinux]  37            2183
           0.08%        1  dd       [kernel.vmlinux]  269           269
           0.08%        1  dd       [kernel.vmlinux]  38            38
    
    Reviewed-by: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Tested-by: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: https://lore.kernel.org/r/20211105225617.151364-1-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40e35c77448e25de86a0a908a715142919307263
Author: Teng Qi <starmiku1207184332@gmail.com>
Date:   Thu Nov 18 15:01:18 2021 +0800

    net: ethernet: dec: tulip: de4x5: fix possible array overflows in type3_infoblock()
    
    [ Upstream commit 0fa68da72c3be09e06dd833258ee89c33374195f ]
    
    The definition of macro MOTO_SROM_BUG is:
      #define MOTO_SROM_BUG    (lp->active == 8 && (get_unaligned_le32(
      dev->dev_addr) & 0x00ffffff) == 0x3e0008)
    
    and the if statement
      if (MOTO_SROM_BUG) lp->active = 0;
    
    using this macro indicates lp->active could be 8. If lp->active is 8 and
    the second comparison of this macro is false. lp->active will remain 8 in:
      lp->phy[lp->active].gep = (*p ? p : NULL); p += (2 * (*p) + 1);
      lp->phy[lp->active].rst = (*p ? p : NULL); p += (2 * (*p) + 1);
      lp->phy[lp->active].mc  = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].ana = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].fdx = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].ttm = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].mci = *p;
    
    However, the length of array lp->phy is 8, so array overflows can occur.
    To fix these possible array overflows, we first check lp->active and then
    return -EINVAL if it is greater or equal to ARRAY_SIZE(lp->phy) (i.e. 8).
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Teng Qi <starmiku1207184332@gmail.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12f907cb11576b8cd0b1d95a16d1f10ed5bb7237
Author: zhangyue <zhangyue1@kylinos.cn>
Date:   Thu Nov 18 13:46:32 2021 +0800

    net: tulip: de4x5: fix the problem that the array 'lp->phy[8]' may be out of bound
    
    [ Upstream commit 61217be886b5f7402843677e4be7e7e83de9cb41 ]
    
    In line 5001, if all id in the array 'lp->phy[8]' is not 0, when the
    'for' end, the 'k' is 8.
    
    At this time, the array 'lp->phy[8]' may be out of bound.
    
    Signed-off-by: zhangyue <zhangyue1@kylinos.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 634ef8cf4e51841a1f7d7bd5771335b4e1960690
Author: Jordy Zomer <jordy@pwning.systems>
Date:   Wed Nov 17 20:06:48 2021 +0100

    ipv6: check return value of ipv6_skip_exthdr
    
    [ Upstream commit 5f9c55c8066bcd93ac25234a02585701fe2e31df ]
    
    The offset value is used in pointer math on skb->data.
    Since ipv6_skip_exthdr may return -1 the pointer to uh and th
    may not point to the actual udp and tcp headers and potentially
    overwrite other stuff. This is why I think this should be checked.
    
    EDIT:  added {}'s, thanks Kees
    
    Signed-off-by: Jordy Zomer <jordy@pwning.systems>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc7ffa7f10b9454a86369405d9814bf141b30627
Author: Teng Qi <starmiku1207184332@gmail.com>
Date:   Wed Nov 17 11:44:53 2021 +0800

    ethernet: hisilicon: hns: hns_dsaf_misc: fix a possible array overflow in hns_dsaf_ge_srst_by_port()
    
    [ Upstream commit a66998e0fbf213d47d02813b9679426129d0d114 ]
    
    The if statement:
      if (port >= DSAF_GE_NUM)
            return;
    
    limits the value of port less than DSAF_GE_NUM (i.e., 8).
    However, if the value of port is 6 or 7, an array overflow could occur:
      port_rst_off = dsaf_dev->mac_cb[port]->port_rst_off;
    
    because the length of dsaf_dev->mac_cb is DSAF_MAX_PORT_NUM (i.e., 6).
    
    To fix this possible array overflow, we first check port and if it is
    greater than or equal to DSAF_MAX_PORT_NUM, the function returns.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Teng Qi <starmiku1207184332@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b56c75d4d3c3c614fa45a1d4199d0d196c80efba
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Nov 12 14:15:39 2021 -0600

    ata: libahci: Adjust behavior when StorageD3Enable _DSD is set
    
    [ Upstream commit 7c5f641a5914ce0303b06bcfcd7674ee64aeebe9 ]
    
    The StorageD3Enable _DSD is used for the vendor to indicate that the disk
    should be opted into or out of a different behavior based upon the platform
    design.
    
    For AMD's Renoir and Green Sardine platforms it's important that any
    attached SATA storage has transitioned into DevSlp when s2idle is used.
    
    If the disk is left in active/partial/slumber, then the system is not able
    to resume properly.
    
    When the StorageD3Enable _DSD is detected, check the system is using s2idle
    and DevSlp is enabled and if so explicitly wait long enough for the disk to
    enter DevSlp.
    
    Cc: Nehal-bakulchandra Shah <Nehal-bakulchandra.Shah@amd.com>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=214091
    Link: https://docs.microsoft.com/en-us/windows-hardware/design/component-guidelines/power-management-for-storage-hardware-devices-intro
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab8efdbda76ca5ac01d8e37929f31aa186549c63
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Fri Nov 12 14:15:38 2021 -0600

    ata: ahci: Add Green Sardine vendor ID as board_ahci_mobile
    
    [ Upstream commit 1527f69204fe35f341cb599f1cb01bd02daf4374 ]
    
    AMD requires that the SATA controller be configured for devsleep in order
    for S0i3 entry to work properly.
    
    commit b1a9585cc396 ("ata: ahci: Enable DEVSLP by default on x86 with
    SLP_S0") sets up a kernel policy to enable devsleep on Intel mobile
    platforms that are using s0ix.  Add the PCI ID for the SATA controller in
    Green Sardine platforms to extend this policy by default for AMD based
    systems using s0i3 as well.
    
    Cc: Nehal-bakulchandra Shah <Nehal-bakulchandra.Shah@amd.com>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=214091
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75752ada77e0726327adf68018b9f50ae091baeb
Author: Bernard Zhao <bernard@vivo.com>
Date:   Sun Nov 14 18:58:50 2021 -0800

    drm/amd/amdgpu: fix potential memleak
    
    [ Upstream commit 27dfaedc0d321b4ea4e10c53e4679d6911ab17aa ]
    
    In function amdgpu_get_xgmi_hive, when kobject_init_and_add failed
    There is a potential memleak if not call kobject_put.
    
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Bernard Zhao <bernard@vivo.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06c6f8f86ec243b89e52f0c3dc7062bcb9de74df
Author: shaoyunl <shaoyun.liu@amd.com>
Date:   Sun Nov 14 12:38:18 2021 -0500

    drm/amd/amdkfd: Fix kernel panic when reset failed and been triggered again
    
    [ Upstream commit 2cf49e00d40d5132e3d067b5aa6d84791929ab15 ]
    
    In SRIOV configuration, the reset may failed to bring asic back to normal but stop cpsch
    already been called, the start_cpsch will not be called since there is no resume in this
    case.  When reset been triggered again, driver should avoid to do uninitialization again.
    
    Signed-off-by: shaoyunl <shaoyun.liu@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c786a7d5b88b94bf39d6b0458c299b271d252f76
Author: Lijo Lazar <lijo.lazar@amd.com>
Date:   Mon Nov 15 15:23:27 2021 +0800

    drm/amd/pm: Remove artificial freq level on Navi1x
    
    [ Upstream commit be83a5676767c99c2417083c29d42aa1e109a69d ]
    
    Print Navi1x fine grained clocks in a consistent manner with other SOCs.
    Don't show aritificial DPM level when the current clock equals min or max.
    
    Signed-off-by: Lijo Lazar <lijo.lazar@amd.com>
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9774ec30cf7bbcdf98a509ce179199de13439f21
Author: Aaron Ma <aaron.ma@canonical.com>
Date:   Tue Nov 16 22:19:17 2021 +0800

    net: usb: r8152: Add MAC passthrough support for more Lenovo Docks
    
    [ Upstream commit f77b83b5bbab53d2be339184838b19ed2c62c0a5 ]
    
    Like ThinkaPad Thunderbolt 4 Dock, more Lenovo docks start to use the original
    Realtek USB ethernet chip ID 0bda:8153.
    
    Lenovo Docks always use their own IDs for usb hub, even for older Docks.
    If parent hub is from Lenovo, then r8152 should try MAC passthrough.
    Verified on Lenovo TBT3 dock too.
    
    Signed-off-by: Aaron Ma <aaron.ma@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59219569202156e271c416d17e75ba1b9c552568
Author: Mike Christie <michael.christie@oracle.com>
Date:   Fri Nov 5 17:10:47 2021 -0500

    scsi: iscsi: Unblock session then wake up error handler
    
    [ Upstream commit a0c2f8b6709a9a4af175497ca65f93804f57b248 ]
    
    We can race where iscsi_session_recovery_timedout() has woken up the error
    handler thread and it's now setting the devices to offline, and
    session_recovery_timedout()'s call to scsi_target_unblock() is also trying
    to set the device's state to transport-offline. We can then get a mix of
    states.
    
    For the case where we can't relogin we want the devices to be in
    transport-offline so when we have repaired the connection
    __iscsi_unblock_session() can set the state back to running.
    
    Set the device state then call into libiscsi to wake up the error handler.
    
    Link: https://lore.kernel.org/r/20211105221048.6541-2-michael.christie@oracle.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80050db986a12ae59d8b72cb35bc4b417ba88ba0
Author: Manaf Meethalavalappu Pallikunhi <manafm@codeaurora.org>
Date:   Wed Nov 3 01:30:40 2021 +0530

    thermal: core: Reset previous low and high trip during thermal zone init
    
    [ Upstream commit 99b63316c39988039965693f5f43d8b4ccb1c86c ]
    
    During the suspend is in process, thermal_zone_device_update bails out
    thermal zone re-evaluation for any sensor trip violation without
    setting next valid trip to that sensor. It assumes during resume
    it will re-evaluate same thermal zone and update trip. But when it is
    in suspend temperature goes down and on resume path while updating
    thermal zone if temperature is less than previously violated trip,
    thermal zone set trip function evaluates the same previous high and
    previous low trip as new high and low trip. Since there is no change
    in high/low trip, it bails out from thermal zone set trip API without
    setting any trip. It leads to a case where sensor high trip or low
    trip is disabled forever even though thermal zone has a valid high
    or low trip.
    
    During thermal zone device init, reset thermal zone previous high
    and low trip. It resolves above mentioned scenario.
    
    Signed-off-by: Manaf Meethalavalappu Pallikunhi <manafm@codeaurora.org>
    Reviewed-by: Thara Gopinath <thara.gopinath@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7440613439a3004e800b241508dcc004428d39df
Author: Wang Yugui <wangyugui@e16-tech.com>
Date:   Thu Oct 28 06:32:54 2021 +0800

    btrfs: check-integrity: fix a warning on write caching disabled disk
    
    [ Upstream commit a91cf0ffbc244792e0b3ecf7d0fddb2f344b461f ]
    
    When a disk has write caching disabled, we skip submission of a bio with
    flush and sync requests before writing the superblock, since it's not
    needed. However when the integrity checker is enabled, this results in
    reports that there are metadata blocks referred by a superblock that
    were not properly flushed. So don't skip the bio submission only when
    the integrity checker is enabled for the sake of simplicity, since this
    is a debug tool and not meant for use in non-debug builds.
    
    fstests/btrfs/220 trigger a check-integrity warning like the following
    when CONFIG_BTRFS_FS_CHECK_INTEGRITY=y and the disk with WCE=0.
    
      btrfs: attempt to write superblock which references block M @5242880 (sdb2/5242880/0) which is not flushed out of disk's write cache (block flush_gen=1, dev->flush_gen=0)!
      ------------[ cut here ]------------
      WARNING: CPU: 28 PID: 843680 at fs/btrfs/check-integrity.c:2196 btrfsic_process_written_superblock+0x22a/0x2a0 [btrfs]
      CPU: 28 PID: 843680 Comm: umount Not tainted 5.15.0-0.rc5.39.el8.x86_64 #1
      Hardware name: Dell Inc. Precision T7610/0NK70N, BIOS A18 09/11/2019
      RIP: 0010:btrfsic_process_written_superblock+0x22a/0x2a0 [btrfs]
      RSP: 0018:ffffb642afb47940 EFLAGS: 00010246
      RAX: 0000000000000000 RBX: 0000000000000002 RCX: 0000000000000000
      RDX: 00000000ffffffff RSI: ffff8b722fc97d00 RDI: ffff8b722fc97d00
      RBP: ffff8b5601c00000 R08: 0000000000000000 R09: c0000000ffff7fff
      R10: 0000000000000001 R11: ffffb642afb476f8 R12: ffffffffffffffff
      R13: ffffb642afb47974 R14: ffff8b5499254c00 R15: 0000000000000003
      FS:  00007f00a06d4080(0000) GS:ffff8b722fc80000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007fff5cff5ff0 CR3: 00000001c0c2a006 CR4: 00000000001706e0
      Call Trace:
       btrfsic_process_written_block+0x2f7/0x850 [btrfs]
       __btrfsic_submit_bio.part.19+0x310/0x330 [btrfs]
       ? bio_associate_blkg_from_css+0xa4/0x2c0
       btrfsic_submit_bio+0x18/0x30 [btrfs]
       write_dev_supers+0x81/0x2a0 [btrfs]
       ? find_get_pages_range_tag+0x219/0x280
       ? pagevec_lookup_range_tag+0x24/0x30
       ? __filemap_fdatawait_range+0x6d/0xf0
       ? __raw_callee_save___native_queued_spin_unlock+0x11/0x1e
       ? find_first_extent_bit+0x9b/0x160 [btrfs]
       ? __raw_callee_save___native_queued_spin_unlock+0x11/0x1e
       write_all_supers+0x1b3/0xa70 [btrfs]
       ? __raw_callee_save___native_queued_spin_unlock+0x11/0x1e
       btrfs_commit_transaction+0x59d/0xac0 [btrfs]
       close_ctree+0x11d/0x339 [btrfs]
       generic_shutdown_super+0x71/0x110
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0xb8/0x140
       task_work_run+0x6d/0xb0
       exit_to_user_mode_prepare+0x1f0/0x200
       syscall_exit_to_user_mode+0x12/0x30
       do_syscall_64+0x46/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xae
      RIP: 0033:0x7f009f711dfb
      RSP: 002b:00007fff5cff7928 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 000055b68c6c9970 RCX: 00007f009f711dfb
      RDX: 0000000000000001 RSI: 0000000000000000 RDI: 000055b68c6c9b50
      RBP: 0000000000000000 R08: 000055b68c6ca900 R09: 00007f009f795580
      R10: 0000000000000000 R11: 0000000000000246 R12: 000055b68c6c9b50
      R13: 00007f00a04bf184 R14: 0000000000000000 R15: 00000000ffffffff
      ---[ end trace 2c4b82abcef9eec4 ]---
      S-65536(sdb2/65536/1)
       -->
      M-1064960(sdb2/1064960/1)
    
    Reviewed-by: Filipe Manana <fdmanana@gmail.com>
    Signed-off-by: Wang Yugui <wangyugui@e16-tech.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e26605497f4e028b907c19cd325c51236b766a23
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Nov 4 12:43:08 2021 +0000

    btrfs: silence lockdep when reading chunk tree during mount
    
    [ Upstream commit 4d9380e0da7be2351437cdac71673a9cd94e50fd ]
    
    Often some test cases like btrfs/161 trigger lockdep splats that complain
    about possible unsafe lock scenario due to the fact that during mount,
    when reading the chunk tree we end up calling blkdev_get_by_path() while
    holding a read lock on a leaf of the chunk tree. That produces a lockdep
    splat like the following:
    
    [ 3653.683975] ======================================================
    [ 3653.685148] WARNING: possible circular locking dependency detected
    [ 3653.686301] 5.15.0-rc7-btrfs-next-103 #1 Not tainted
    [ 3653.687239] ------------------------------------------------------
    [ 3653.688400] mount/447465 is trying to acquire lock:
    [ 3653.689320] ffff8c6b0c76e528 (&disk->open_mutex){+.+.}-{3:3}, at: blkdev_get_by_dev.part.0+0xe7/0x320
    [ 3653.691054]
                   but task is already holding lock:
    [ 3653.692155] ffff8c6b0a9f39e0 (btrfs-chunk-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x24/0x110 [btrfs]
    [ 3653.693978]
                   which lock already depends on the new lock.
    
    [ 3653.695510]
                   the existing dependency chain (in reverse order) is:
    [ 3653.696915]
                   -> #3 (btrfs-chunk-00){++++}-{3:3}:
    [ 3653.698053]        down_read_nested+0x4b/0x140
    [ 3653.698893]        __btrfs_tree_read_lock+0x24/0x110 [btrfs]
    [ 3653.699988]        btrfs_read_lock_root_node+0x31/0x40 [btrfs]
    [ 3653.701205]        btrfs_search_slot+0x537/0xc00 [btrfs]
    [ 3653.702234]        btrfs_insert_empty_items+0x32/0x70 [btrfs]
    [ 3653.703332]        btrfs_init_new_device+0x563/0x15b0 [btrfs]
    [ 3653.704439]        btrfs_ioctl+0x2110/0x3530 [btrfs]
    [ 3653.705405]        __x64_sys_ioctl+0x83/0xb0
    [ 3653.706215]        do_syscall_64+0x3b/0xc0
    [ 3653.706990]        entry_SYSCALL_64_after_hwframe+0x44/0xae
    [ 3653.708040]
                   -> #2 (sb_internal#2){.+.+}-{0:0}:
    [ 3653.708994]        lock_release+0x13d/0x4a0
    [ 3653.709533]        up_write+0x18/0x160
    [ 3653.710017]        btrfs_sync_file+0x3f3/0x5b0 [btrfs]
    [ 3653.710699]        __loop_update_dio+0xbd/0x170 [loop]
    [ 3653.711360]        lo_ioctl+0x3b1/0x8a0 [loop]
    [ 3653.711929]        block_ioctl+0x48/0x50
    [ 3653.712442]        __x64_sys_ioctl+0x83/0xb0
    [ 3653.712991]        do_syscall_64+0x3b/0xc0
    [ 3653.713519]        entry_SYSCALL_64_after_hwframe+0x44/0xae
    [ 3653.714233]
                   -> #1 (&lo->lo_mutex){+.+.}-{3:3}:
    [ 3653.715026]        __mutex_lock+0x92/0x900
    [ 3653.715648]        lo_open+0x28/0x60 [loop]
    [ 3653.716275]        blkdev_get_whole+0x28/0x90
    [ 3653.716867]        blkdev_get_by_dev.part.0+0x142/0x320
    [ 3653.717537]        blkdev_open+0x5e/0xa0
    [ 3653.718043]        do_dentry_open+0x163/0x390
    [ 3653.718604]        path_openat+0x3f0/0xa80
    [ 3653.719128]        do_filp_open+0xa9/0x150
    [ 3653.719652]        do_sys_openat2+0x97/0x160
    [ 3653.720197]        __x64_sys_openat+0x54/0x90
    [ 3653.720766]        do_syscall_64+0x3b/0xc0
    [ 3653.721285]        entry_SYSCALL_64_after_hwframe+0x44/0xae
    [ 3653.721986]
                   -> #0 (&disk->open_mutex){+.+.}-{3:3}:
    [ 3653.722775]        __lock_acquire+0x130e/0x2210
    [ 3653.723348]        lock_acquire+0xd7/0x310
    [ 3653.723867]        __mutex_lock+0x92/0x900
    [ 3653.724394]        blkdev_get_by_dev.part.0+0xe7/0x320
    [ 3653.725041]        blkdev_get_by_path+0xb8/0xd0
    [ 3653.725614]        btrfs_get_bdev_and_sb+0x1b/0xb0 [btrfs]
    [ 3653.726332]        open_fs_devices+0xd7/0x2c0 [btrfs]
    [ 3653.726999]        btrfs_read_chunk_tree+0x3ad/0x870 [btrfs]
    [ 3653.727739]        open_ctree+0xb8e/0x17bf [btrfs]
    [ 3653.728384]        btrfs_mount_root.cold+0x12/0xde [btrfs]
    [ 3653.729130]        legacy_get_tree+0x30/0x50
    [ 3653.729676]        vfs_get_tree+0x28/0xc0
    [ 3653.730192]        vfs_kern_mount.part.0+0x71/0xb0
    [ 3653.730800]        btrfs_mount+0x11d/0x3a0 [btrfs]
    [ 3653.731427]        legacy_get_tree+0x30/0x50
    [ 3653.731970]        vfs_get_tree+0x28/0xc0
    [ 3653.732486]        path_mount+0x2d4/0xbe0
    [ 3653.732997]        __x64_sys_mount+0x103/0x140
    [ 3653.733560]        do_syscall_64+0x3b/0xc0
    [ 3653.734080]        entry_SYSCALL_64_after_hwframe+0x44/0xae
    [ 3653.734782]
                   other info that might help us debug this:
    
    [ 3653.735784] Chain exists of:
                     &disk->open_mutex --> sb_internal#2 --> btrfs-chunk-00
    
    [ 3653.737123]  Possible unsafe locking scenario:
    
    [ 3653.737865]        CPU0                    CPU1
    [ 3653.738435]        ----                    ----
    [ 3653.739007]   lock(btrfs-chunk-00);
    [ 3653.739449]                                lock(sb_internal#2);
    [ 3653.740193]                                lock(btrfs-chunk-00);
    [ 3653.740955]   lock(&disk->open_mutex);
    [ 3653.741431]
                    *** DEADLOCK ***
    
    [ 3653.742176] 3 locks held by mount/447465:
    [ 3653.742739]  #0: ffff8c6acf85c0e8 (&type->s_umount_key#44/1){+.+.}-{3:3}, at: alloc_super+0xd5/0x3b0
    [ 3653.744114]  #1: ffffffffc0b28f70 (uuid_mutex){+.+.}-{3:3}, at: btrfs_read_chunk_tree+0x59/0x870 [btrfs]
    [ 3653.745563]  #2: ffff8c6b0a9f39e0 (btrfs-chunk-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x24/0x110 [btrfs]
    [ 3653.747066]
                   stack backtrace:
    [ 3653.747723] CPU: 4 PID: 447465 Comm: mount Not tainted 5.15.0-rc7-btrfs-next-103 #1
    [ 3653.748873] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
    [ 3653.750592] Call Trace:
    [ 3653.750967]  dump_stack_lvl+0x57/0x72
    [ 3653.751526]  check_noncircular+0xf3/0x110
    [ 3653.752136]  ? stack_trace_save+0x4b/0x70
    [ 3653.752748]  __lock_acquire+0x130e/0x2210
    [ 3653.753356]  lock_acquire+0xd7/0x310
    [ 3653.753898]  ? blkdev_get_by_dev.part.0+0xe7/0x320
    [ 3653.754596]  ? lock_is_held_type+0xe8/0x140
    [ 3653.755125]  ? blkdev_get_by_dev.part.0+0xe7/0x320
    [ 3653.755729]  ? blkdev_get_by_dev.part.0+0xe7/0x320
    [ 3653.756338]  __mutex_lock+0x92/0x900
    [ 3653.756794]  ? blkdev_get_by_dev.part.0+0xe7/0x320
    [ 3653.757400]  ? do_raw_spin_unlock+0x4b/0xa0
    [ 3653.757930]  ? _raw_spin_unlock+0x29/0x40
    [ 3653.758437]  ? bd_prepare_to_claim+0x129/0x150
    [ 3653.758999]  ? trace_module_get+0x2b/0xd0
    [ 3653.759508]  ? try_module_get.part.0+0x50/0x80
    [ 3653.760072]  blkdev_get_by_dev.part.0+0xe7/0x320
    [ 3653.760661]  ? devcgroup_check_permission+0xc1/0x1f0
    [ 3653.761288]  blkdev_get_by_path+0xb8/0xd0
    [ 3653.761797]  btrfs_get_bdev_and_sb+0x1b/0xb0 [btrfs]
    [ 3653.762454]  open_fs_devices+0xd7/0x2c0 [btrfs]
    [ 3653.763055]  ? clone_fs_devices+0x8f/0x170 [btrfs]
    [ 3653.763689]  btrfs_read_chunk_tree+0x3ad/0x870 [btrfs]
    [ 3653.764370]  ? kvm_sched_clock_read+0x14/0x40
    [ 3653.764922]  open_ctree+0xb8e/0x17bf [btrfs]
    [ 3653.765493]  ? super_setup_bdi_name+0x79/0xd0
    [ 3653.766043]  btrfs_mount_root.cold+0x12/0xde [btrfs]
    [ 3653.766780]  ? rcu_read_lock_sched_held+0x3f/0x80
    [ 3653.767488]  ? kfree+0x1f2/0x3c0
    [ 3653.767979]  legacy_get_tree+0x30/0x50
    [ 3653.768548]  vfs_get_tree+0x28/0xc0
    [ 3653.769076]  vfs_kern_mount.part.0+0x71/0xb0
    [ 3653.769718]  btrfs_mount+0x11d/0x3a0 [btrfs]
    [ 3653.770381]  ? rcu_read_lock_sched_held+0x3f/0x80
    [ 3653.771086]  ? kfree+0x1f2/0x3c0
    [ 3653.771574]  legacy_get_tree+0x30/0x50
    [ 3653.772136]  vfs_get_tree+0x28/0xc0
    [ 3653.772673]  path_mount+0x2d4/0xbe0
    [ 3653.773201]  __x64_sys_mount+0x103/0x140
    [ 3653.773793]  do_syscall_64+0x3b/0xc0
    [ 3653.774333]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [ 3653.775094] RIP: 0033:0x7f648bc45aaa
    
    This happens because through btrfs_read_chunk_tree(), which is called only
    during mount, ends up acquiring the mutex open_mutex of a block device
    while holding a read lock on a leaf of the chunk tree while other paths
    need to acquire other locks before locking extent buffers of the chunk
    tree.
    
    Since at mount time when we call btrfs_read_chunk_tree() we know that
    we don't have other tasks running in parallel and modifying the chunk
    tree, we can simply skip locking of chunk tree extent buffers. So do
    that and move the assertion that checks the fs is not yet mounted to the
    top block of btrfs_read_chunk_tree(), with a comment before doing it.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efc562ea9d8abcfbc3e51cac3f7a30b348469bde
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Thu Oct 14 13:38:17 2021 +0200

    s390/setup: avoid using memblock_enforce_memory_limit
    
    [ Upstream commit 5dbc4cb4667457b0c53bcd7bff11500b3c362975 ]
    
    There is a difference in how architectures treat "mem=" option. For some
    that is an amount of online memory, for s390 and x86 this is the limiting
    max address. Some memblock api like memblock_enforce_memory_limit()
    take limit argument and explicitly treat it as the size of online memory,
    and use __find_max_addr to convert it to an actual max address. Current
    s390 usage:
    
    memblock_enforce_memory_limit(memblock_end_of_DRAM());
    
    yields different results depending on presence of memory holes (offline
    memory blocks in between online memory). If there are no memory holes
    limit == max_addr in memblock_enforce_memory_limit() and it does trim
    online memory and reserved memory regions. With memory holes present it
    actually does nothing.
    
    Since we already use memblock_remove() explicitly to trim online memory
    regions to potential limit (think mem=, kdump, addressing limits, etc.)
    drop the usage of memblock_enforce_memory_limit() altogether. Trimming
    reserved regions should not be required, since we now use
    memblock_set_current_limit() to limit allocations and any explicit memory
    reservations above the limit is an actual problem we should not hide.
    
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6d5c4e3fce73b37fec9f858dd7c1f7a2125d7f1
Author: Slark Xiao <slark_xiao@163.com>
Date:   Mon Nov 8 14:06:48 2021 +0800

    platform/x86: thinkpad_acpi: Fix WWAN device disabled issue after S3 deep
    
    [ Upstream commit 39f53292181081d35174a581a98441de5da22bc9 ]
    
    When WWAN device wake from S3 deep, under thinkpad platform,
    WWAN would be disabled. This disable status could be checked
    by command 'nmcli r wwan' or 'rfkill list'.
    
    Issue analysis as below:
      When host resume from S3 deep, thinkpad_acpi driver would
    call hotkey_resume() function. Finnaly, it will use
    wan_get_status to check the current status of WWAN device.
    During this resume progress, wan_get_status would always
    return off even WWAN boot up completely.
      In patch V2, Hans said 'sw_state should be unchanged
    after a suspend/resume. It's better to drop the
    tpacpi_rfk_update_swstate call all together from the
    resume path'.
      And it's confimed by Lenovo that GWAN is no longer
     available from WHL generation because the design does not
     match with current pin control.
    
    Signed-off-by: Slark Xiao <slark_xiao@163.com>
    Link: https://lore.kernel.org/r/20211108060648.8212-1-slark_xiao@163.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d17d9e935f729c58c57e5183d706f4ca1b0ea022
Author: Jimmy Wang <jimmy221b@163.com>
Date:   Fri Nov 5 17:05:28 2021 +0800

    platform/x86: thinkpad_acpi: Add support for dual fan control
    
    [ Upstream commit 1f338954a5fbe21eb22b4223141e31f2a26366d5 ]
    
       This adds dual fan control for P1 / X1 Extreme Gen4
    
    Signed-off-by: Jimmy Wang <jimmy221b@163.com>
    Link: https://lore.kernel.org/r/20211105090528.39677-1-jimmy221b@163.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8df09ab9d374e23d5934834ea667886230984178
Author: Thomas Weißschuh <linux@weissschuh.net>
Date:   Sat Nov 13 09:05:51 2021 +0100

    platform/x86: dell-wmi-descriptor: disable by default
    
    [ Upstream commit 0f07c023dcd08ca49b6d3dd018abc7cd56301478 ]
    
    dell-wmi-descriptor only provides symbols to other drivers.
    These drivers already select dell-wmi-descriptor when needed.
    
    This fixes an issue where dell-wmi-descriptor is compiled as a module
    with localyesconfig on a non-Dell machine.
    
    Signed-off-by: Thomas Weißschuh <linux@weissschuh.net>
    Link: https://lore.kernel.org/r/20211113080551.61860-1-linux@weissschuh.net
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aca091aadef40222ce8bad6a56f7a995de417edb
Author: Julian Braha <julianbraha@gmail.com>
Date:   Thu Oct 28 20:46:10 2021 -0400

    pinctrl: qcom: fix unmet dependencies on GPIOLIB for GPIOLIB_IRQCHIP
    
    [ Upstream commit 60430d4c4eddcdf8eac2bdbec9704f84a436eedf ]
    
    When PINCTRL_QCOM_SPMI_PMIC or PINCTRL_QCOM_SSBI_PMIC
    is selected, and GPIOLIB is not selected, Kbuild
    gives the following warnings:
    
    WARNING: unmet direct dependencies detected for GPIOLIB_IRQCHIP
      Depends on [n]: GPIOLIB [=n]
      Selected by [y]:
      - PINCTRL_QCOM_SPMI_PMIC [=y] && PINCTRL [=y] && (ARCH_QCOM [=n] || COMPILE_TEST [=y]) && OF [=y] && SPMI [=y]
    
    WARNING: unmet direct dependencies detected for GPIOLIB_IRQCHIP
      Depends on [n]: GPIOLIB [=n]
      Selected by [y]:
      - PINCTRL_QCOM_SSBI_PMIC [=y] && PINCTRL [=y] && (ARCH_QCOM [=n] || COMPILE_TEST [=y]) && OF [=y]
    
    This is because these config options enable GPIOLIB_IRQCHIP
    without selecting or depending on GPIOLIB, despite
    GPIOLIB_IRQCHIP depending on GPIOLIB.
    
    These unmet dependency bugs were detected by Kismet,
    a static analysis tool for Kconfig. Please advise if this
    is not the appropriate solution.
    
    Signed-off-by: Julian Braha <julianbraha@gmail.com>
    Link: https://lore.kernel.org/r/20211029004610.35131-1-julianbraha@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00fdcc2b447417b5943665c552a742e708a067d5
Author: liuguoqiang <liuguoqiang@uniontech.com>
Date:   Mon Nov 15 16:14:48 2021 +0800

    net: return correct error code
    
    [ Upstream commit 6def480181f15f6d9ec812bca8cbc62451ba314c ]
    
    When kmemdup called failed and register_net_sysctl return NULL, should
    return ENOMEM instead of ENOBUFS
    
    Signed-off-by: liuguoqiang <liuguoqiang@uniontech.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cec49b6dfdb0b9fefd0f17c32014223f73ee2605
Author: Zekun Shen <bruceshenzk@gmail.com>
Date:   Sat Nov 13 22:24:40 2021 -0500

    atlantic: Fix OOB read and write in hw_atl_utils_fw_rpc_wait
    
    [ Upstream commit b922f622592af76b57cbc566eaeccda0b31a3496 ]
    
    This bug report shows up when running our research tools. The
    reports is SOOB read, but it seems SOOB write is also possible
    a few lines below.
    
    In details, fw.len and sw.len are inputs coming from io. A len
    over the size of self->rpc triggers SOOB. The patch fixes the
    bugs by adding sanity checks.
    
    The bugs are triggerable with compromised/malfunctioning devices.
    They are potentially exploitable given they first leak up to
    0xffff bytes and able to overwrite the region later.
    
    The patch is tested with QEMU emulater.
    This is NOT tested with a real device.
    
    Attached is the log we found by fuzzing.
    
    BUG: KASAN: slab-out-of-bounds in
            hw_atl_utils_fw_upload_dwords+0x393/0x3c0 [atlantic]
    Read of size 4 at addr ffff888016260b08 by task modprobe/213
    CPU: 0 PID: 213 Comm: modprobe Not tainted 5.6.0 #1
    Call Trace:
     dump_stack+0x76/0xa0
     print_address_description.constprop.0+0x16/0x200
     ? hw_atl_utils_fw_upload_dwords+0x393/0x3c0 [atlantic]
     ? hw_atl_utils_fw_upload_dwords+0x393/0x3c0 [atlantic]
     __kasan_report.cold+0x37/0x7c
     ? aq_hw_read_reg_bit+0x60/0x70 [atlantic]
     ? hw_atl_utils_fw_upload_dwords+0x393/0x3c0 [atlantic]
     kasan_report+0xe/0x20
     hw_atl_utils_fw_upload_dwords+0x393/0x3c0 [atlantic]
     hw_atl_utils_fw_rpc_call+0x95/0x130 [atlantic]
     hw_atl_utils_fw_rpc_wait+0x176/0x210 [atlantic]
     hw_atl_utils_mpi_create+0x229/0x2e0 [atlantic]
     ? hw_atl_utils_fw_rpc_wait+0x210/0x210 [atlantic]
     ? hw_atl_utils_initfw+0x9f/0x1c8 [atlantic]
     hw_atl_utils_initfw+0x12a/0x1c8 [atlantic]
     aq_nic_ndev_register+0x88/0x650 [atlantic]
     ? aq_nic_ndev_init+0x235/0x3c0 [atlantic]
     aq_pci_probe+0x731/0x9b0 [atlantic]
     ? aq_pci_func_init+0xc0/0xc0 [atlantic]
     local_pci_probe+0xd3/0x160
     pci_device_probe+0x23f/0x3e0
    
    Reported-by: Brendan Dolan-Gavitt <brendandg@nyu.edu>
    Signed-off-by: Zekun Shen <bruceshenzk@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb92e025baa73e99250b79ab64f4e088d2888993
Author: Wen Gu <guwen@linux.alibaba.com>
Date:   Sat Nov 13 15:33:35 2021 +0800

    net/smc: Transfer remaining wait queue entries during fallback
    
    [ Upstream commit 2153bd1e3d3dbf6a3403572084ef6ed31c53c5f0 ]
    
    The SMC fallback is incomplete currently. There may be some
    wait queue entries remaining in smc socket->wq, which should
    be removed to clcsocket->wq during the fallback.
    
    For example, in nginx/wrk benchmark, this issue causes an
    all-zeros test result:
    
    server: nginx -g 'daemon off;'
    client: smc_run wrk -c 1 -t 1 -d 5 http://11.200.15.93/index.html
    
      Running 5s test @ http://11.200.15.93/index.html
         1 threads and 1 connections
         Thread Stats   Avg      Stdev     Max   ± Stdev
            Latency     0.00us    0.00us   0.00us    -nan%
            Req/Sec     0.00      0.00     0.00      -nan%
            0 requests in 5.00s, 0.00B read
         Requests/sec:      0.00
         Transfer/sec:       0.00B
    
    The reason for this all-zeros result is that when wrk used SMC
    to replace TCP, it added an eppoll_entry into smc socket->wq
    and expected to be notified if epoll events like EPOLL_IN/
    EPOLL_OUT occurred on the smc socket.
    
    However, once a fallback occurred, wrk switches to use clcsocket.
    Now it is clcsocket->wq instead of smc socket->wq which will
    be woken up. The eppoll_entry remaining in smc socket->wq does
    not work anymore and wrk stops the test.
    
    This patch fixes this issue by removing remaining wait queue
    entries from smc socket->wq to clcsocket->wq during the fallback.
    
    Link: https://www.spinics.net/lists/netdev/msg779769.html
    Signed-off-by: Wen Gu <guwen@linux.alibaba.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc447c1e14825ccf609494b48022f0e09e94cc46
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Nov 4 18:22:39 2021 +0000

    x86/hyperv: Move required MSRs check to initial platform probing
    
    [ Upstream commit f3e613e72f66226b3bea1046c1b864f67a3000a4 ]
    
    Explicitly check for MSR_HYPERCALL and MSR_VP_INDEX support when probing
    for running as a Hyper-V guest instead of waiting until hyperv_init() to
    detect the bogus configuration.  Add messages to give the admin a heads
    up that they are likely running on a broken virtual machine setup.
    
    At best, silently disabling Hyper-V is confusing and difficult to debug,
    e.g. the kernel _says_ it's using all these fancy Hyper-V features, but
    always falls back to the native versions.  At worst, the half baked setup
    will crash/hang the kernel.
    
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Link: https://lore.kernel.org/r/20211104182239.1302956-3-seanjc@google.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60af14bf37ecc46e7a88de65e77c5798a2897264
Author: Felix Fietkau <nbd@nbd.name>
Date:   Sat Nov 13 07:34:15 2021 +0100

    mac80211: fix throughput LED trigger
    
    [ Upstream commit 30f6cf96912b638d0ddfc325204b598f94efddc2 ]
    
    The codepaths for rx with decap offload and tx with itxq were not updating
    the counters for the throughput led trigger.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20211113063415.55147-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d3eb89e6ca3b7e540b95d5dcb57c1907fce2880
Author: Xing Song <xing.song@mediatek.com>
Date:   Mon Nov 1 10:46:57 2021 +0800

    mac80211: do not access the IV when it was stripped
    
    [ Upstream commit 77dfc2bc0bb4b8376ecd7a430f27a4a8fff6a5a0 ]
    
    ieee80211_get_keyid() will return false value if IV has been stripped,
    such as return 0 for IP/ARP frames due to LLC header, and return -EINVAL
    for disassociation frames due to its length... etc. Don't try to access
    it if it's not present.
    
    Signed-off-by: Xing Song <xing.song@mediatek.com>
    Link: https://lore.kernel.org/r/20211101024657.143026-1-xing.song@mediatek.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e7c364d1c07dbd9461c7d56e4feb8a1bd92b438
Author: Julian Braha <julianbraha@gmail.com>
Date:   Mon Nov 8 22:23:51 2021 -0500

    drm/sun4i: fix unmet dependency on RESET_CONTROLLER for PHY_SUN6I_MIPI_DPHY
    
    [ Upstream commit bb162bb2b4394108c8f055d1b115735331205e28 ]
    
    When PHY_SUN6I_MIPI_DPHY is selected, and RESET_CONTROLLER
    is not selected, Kbuild gives the following warning:
    
    WARNING: unmet direct dependencies detected for PHY_SUN6I_MIPI_DPHY
      Depends on [n]: (ARCH_SUNXI [=n] || COMPILE_TEST [=y]) && HAS_IOMEM [=y] && COMMON_CLK [=y] && RESET_CONTROLLER [=n]
      Selected by [y]:
      - DRM_SUN6I_DSI [=y] && HAS_IOMEM [=y] && DRM_SUN4I [=y]
    
    This is because DRM_SUN6I_DSI selects PHY_SUN6I_MIPI_DPHY
    without selecting or depending on RESET_CONTROLLER, despite
    PHY_SUN6I_MIPI_DPHY depending on RESET_CONTROLLER.
    
    These unmet dependency bugs were detected by Kismet,
    a static analysis tool for Kconfig. Please advise if this
    is not the appropriate solution.
    
    v2:
    Fixed indentation to match the rest of the file.
    
    Signed-off-by: Julian Braha <julianbraha@gmail.com>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211109032351.43322-1-julianbraha@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05d27cd9bc70455f99afd1d2fa6ea8fbf2d12591
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Mon Nov 8 15:03:19 2021 +1100

    powerpc/pseries/ddw: Do not try direct mapping with persistent memory and one window
    
    [ Upstream commit ad3976025b311cdeb822ad3e7a7554018cb0f83f ]
    
    There is a possibility of having just one DMA window available with
    a limited capacity which the existing code does not handle that well.
    If the window is big enough for the system RAM but less than
    MAX_PHYSMEM_BITS (which we want when persistent memory is present),
    we create 1:1 window and leave persistent memory without DMA.
    
    This disables 1:1 mapping entirely if there is persistent memory and
    either:
    - the huge DMA window does not cover the entire address space;
    - the default DMA window is removed.
    
    This relies on reverted 54fc3c681ded
    ("powerpc/pseries/ddw: Extend upper limit for huge DMA window for persistent memory")
    to return the actual amount RAM in ddw_memory_hotplug_max() (posted
    separately).
    
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211108040320.3857636-4-aik@ozlabs.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b67ff10e43d3ccf676516c0b6462ce3ce71b1a79
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Mon Nov 8 15:03:17 2021 +1100

    powerpc/pseries/ddw: Revert "Extend upper limit for huge DMA window for persistent memory"
    
    [ Upstream commit 2d33f5504490a9d90924476dbccd4a5349ee1ad0 ]
    
    This reverts commit 54fc3c681ded9437e4548e2501dc1136b23cfa9a
    which does not allow 1:1 mapping even for the system RAM which
    is usually possible.
    
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211108040320.3857636-2-aik@ozlabs.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8b76df0055c445b7e4451123ce5608f930334d2
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Sat Nov 6 00:18:56 2021 +0100

    gfs2: Fix length of holes reported at end-of-file
    
    [ Upstream commit f3506eee81d1f700d9ee2d2f4a88fddb669ec032 ]
    
    Fix the length of holes reported at the end of a file: the length is
    relative to the beginning of the extent, not the seek position which is
    rounded down to the filesystem block size.
    
    This bug went unnoticed for some time, but is now caught by the
    following assertion in iomap_iter_done():
    
      WARN_ON_ONCE(iter->iomap.offset + iter->iomap.length <= iter->pos)
    
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b11e583193c694a2946f9bc9a719967cc70d062
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Thu Oct 28 11:53:10 2021 -0500

    gfs2: release iopen glock early in evict
    
    [ Upstream commit 49462e2be119d38c5eb5759d0d1b712df3a41239 ]
    
    Before this patch, evict would clear the iopen glock's gl_object after
    releasing the inode glock.  In the meantime, another process could reuse
    the same block and thus glocks for a new inode.  It would lock the inode
    glock (exclusively), and then the iopen glock (shared).  The shared
    locking mode doesn't provide any ordering against the evict, so by the
    time the iopen glock is reused, evict may not have gotten to setting
    gl_object to NULL.
    
    Fix that by releasing the iopen glock before the inode glock in
    gfs2_evict_inode.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>gl_object
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1236351c29c7ffe02c96078d30d766392e90c568
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 19 11:26:29 2021 +0100

    ALSA: usb-audio: Don't start stream for capture at prepare
    
    commit 83de8f83816e8e15227dac985163e3d433a2bf9d upstream.
    
    The recent change made mistakenly the stream for capture started at
    prepare stage.  Add the stream direction check to avoid it.
    
    Fixes: 9c9a3b9da891 ("ALSA: usb-audio: Rename early_playback_start flag with lowlatency_playback")
    Link: https://lore.kernel.org/r/20211119102629.7476-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 321cd173b8cc4a1cccf6bfefac1c9f7408dae38a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 19 11:24:59 2021 +0100

    ALSA: usb-audio: Switch back to non-latency mode at a later point
    
    commit eee5d6f1356a016105a974fb176b491288439efa upstream.
    
    The recent regression report revealed that the judgment of the
    low-latency playback mode based on the runtime->stop_threshold cannot
    work reliably at the prepare stage, as sw_params call may happen at
    any time, and PCM dmix actually sets it up after the prepare call.
    This ended up with the stall of the stream as PCM ack won't be issued
    at all.
    
    For addressing this, check the free-wheeling mode again at the PCM
    trigger right before starting the stream again, and allow switching to
    the non-LL mode at a late stage.
    
    Fixes: d5f871f89e21 ("ALSA: usb-audio: Improved lowlatency playback support")
    Reported-and-tested-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Link: https://lore.kernel.org/r/20211117161855.m45mxcqszkfcetai@box.shutemov.name
    Link: https://lore.kernel.org/r/20211119102459.7055-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cea047b74dadd802bc05e805fa9f77e8bac1d75
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 11 12:36:50 2021 +0200

    ALSA: usb-audio: Less restriction for low-latency playback mode
    
    commit 53451b6da8271905941eb1eb369db152c4bd92f2 upstream.
    
    The recent support for the improved low-latency playback mode applied
    the SNDRV_PCM_INFO_EXPLICIT_SYNC flag for the target streams, but this
    was a slight overkill.  The use of the flag above disables effectively
    both PCM status and control mmaps, while basically what we want to
    track is only about the appl_ptr update.
    
    For less restriction, use a more proper flag,
    SNDRV_PCM_INFO_SYNC_APPLPTR instead, which disables only the control
    mmap.
    
    Fixes: d5f871f89e21 ("ALSA: usb-audio: Improved lowlatency playback support")
    Link: https://lore.kernel.org/r/20211011103650.10182-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7ac29edfb6ab28d1a0de14446aa1284e08911aa
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Oct 1 12:54:25 2021 +0200

    ALSA: usb-audio: Fix packet size calculation regression
    
    commit 23939115be181bc5dbc33aa8471adcdbffa28910 upstream.
    
    The commit d215f63d49da ("ALSA: usb-audio: Check available frames for
    the next packet size") introduced the available frame size check, but
    the conversion forgot to initialize the temporary variable properly,
    and it resulted in a bogus calculation.  This patch fixes it.
    
    Fixes: d215f63d49da ("ALSA: usb-audio: Check available frames for the next packet size")
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20211001104417.14291-1-colin.king@canonical.com
    Link: https://lore.kernel.org/r/20211001105425.16191-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 458871f21e693ce64906b7481bd4aa522c6aceb6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:44 2021 +0200

    ALSA: usb-audio: Avoid killing in-flight URBs during draining
    
    commit 813a17cab9b708bbb1e0db8902e19857b57196ec upstream.
    
    While draining a stream, ALSA PCM core stops the stream by issuing
    snd_pcm_stop() after all data has been sent out.  And, at PCM trigger
    stop, currently USB-audio driver kills the in-flight URBs explicitly,
    then at sync-stop ops, sync with the finish of all remaining URBs.
    This might result in a drop of the drained samples as most of
    USB-audio devices / hosts allow relatively long in-flight samples (as
    a sort of FIFO).
    
    For avoiding the trimming, this patch changes the stream-stop behavior
    during PCM draining state.  Under that condition, the pending URBs
    won't be killed.  The leftover in-flight URBs are caught by the
    sync-stop operation that shall be performed after the trigger-stop
    operation.
    
    Link: https://lore.kernel.org/r/20210929080844.11583-10-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff39117fac654c908845f1781ffeb7128baef979
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:43 2021 +0200

    ALSA: usb-audio: Improved lowlatency playback support
    
    commit d5f871f89e21bb71827ea57bd484eedea85839a0 upstream.
    
    This is another attempt to improve further the handling of playback
    stream in the low latency mode.  The latest workaround in commit
    4267c5a8f313 ("ALSA: usb-audio: Work around for XRUN with low latency
    playback") revealed that submitting URBs forcibly in advance may
    trigger XRUN easily.  In the classical mode, this problem was avoided
    by practically delaying the submission of the actual data with the
    pre-submissions of silent data before triggering the stream start.
    But that is exactly what we want to avoid.
    
    Now, in this patch, instead of the previous workaround, we take a
    similar approach as used in the implicit feedback mode.  The URBs are
    queued at the PCM trigger start like before, but we check whether the
    buffer has been already filled enough before each submission, and
    stop queuing if the data overcomes the threshold.  The remaining URBs
    are kept in the ready list, and they will be retrieved in the URB
    complete callback of other (already queued) URBs.  In the complete
    callback, we try to fill the data and submit as much as possible
    again.  When there is no more available in-flight URBs that may handle
    the pending data, we'll check in PCM ack callback and submit and
    process URBs there in addition.  In this way, the amount of in-flight
    URBs may vary dynamically and flexibly depending on the available data
    without hitting XRUN.
    
    The following things are changed to achieve the behavior above:
    
    * The endpoint prepare callback is changed to return an error code;
      when there is no enough data available, it may return -EAGAIN.
      Currently only prepare_playback_urb() returns the error.
    
      The evaluation of the available data is a bit messy here; we can't
      check with snd_pcm_avail() at the point of prepare callback (as
      runtime->status->hwptr hasn't been updated yet), hence we manually
      estimate the appl_ptr and compare with the internal hwptr_done to
      calculate the available frames.
    
    * snd_usb_endpoint_start() doesn't submit full URBs if the prepare
      callback returns -EAGAIN, and puts the remaining URBs to the ready
      list for the later submission.
    
    * snd_complete_urb() treats the URBs in the low-latency mode similarly
      like the implicit feedback mode, and submissions are done in
      (now exported) snd_usb_queue_pending_output_urbs().
    
    * snd_usb_queue_pending_output_urbs() again checks the error value
      from the prepare callback.  If it's -EAGAIN for the normal stream
      (i.e. not implicit feedback mode), we push it back to the ready list
      again.
    
    * PCM ack callback is introduced for the playback stream, and it calls
      snd_usb_queue_pending_output_urbs() if there is no in-flight URB
      while the stream is running.  This corresponds to the case where the
      system needs the appl_ptr update for re-submitting a new URB.
    
    * snd_usb_queue_pending_output_urbs() and the prepare EP callback
      receive in_stream_lock argument, which is a bool flag indicating the
      call path from PCM ack.  It's needed for avoiding the deadlock of
      snd_pcm_period_elapsed() calls.
    
    * Set the new SNDRV_PCM_INFO_EXPLICIT_SYNC flag when the new
      low-latency mode is deployed.  This assures catching each applptr
      update even in the mmap mode.
    
    Fixes: 4267c5a8f313 ("ALSA: usb-audio: Work around for XRUN with low latency playback")
    Link: https://lore.kernel.org/r/20210929080844.11583-9-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7303160785e5c7c07c302a30142e0cf737b61b36
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:42 2021 +0200

    ALSA: usb-audio: Add spinlock to stop_urbs()
    
    commit 0ef74366bc150dda4f53c546dfa6e8f7c707e087 upstream.
    
    In theory, stop_urbs() may be called concurrently.
    Although we have the state check beforehand, it's safer to apply
    ep->lock during the critical list head manipulations.
    
    Link: https://lore.kernel.org/r/20210929080844.11583-8-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31056232ad3cc37d3a0fef928f292e57ea055a59
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:41 2021 +0200

    ALSA: usb-audio: Check available frames for the next packet size
    
    commit d215f63d49da9a8803af3e81acd6cad743686573 upstream.
    
    This is yet more preparation for the upcoming changes.
    
    Extend snd_usb_endpoint_next_packet_size() to check the available
    frames and return -EAGAIN if the next packet size is equal or exceeds
    the given size.  This will be needed for avoiding XRUN during the low
    latency operation.
    
    As of this patch, avail=0 is passed, i.e. the check is skipped and no
    behavior change.
    
    Link: https://lore.kernel.org/r/20210929080844.11583-7-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d7c6f515b1529fde3496c0753c088207b2a457b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:40 2021 +0200

    ALSA: usb-audio: Disable low-latency mode for implicit feedback sync
    
    commit bceee75387554f682638e719d1ea60125ea78cea upstream.
    
    When a playback stream runs in the implicit feedback mode, its
    operation is passive and won't start unless the capture packet is
    received.  This behavior contradicts with the low-latency playback
    mode, and we should turn off lowlatency_playback flag accordingly.
    
    In theory, we may take the low-latency mode when the playback-first
    quirk is set, but it still conflicts with the later operation with the
    fixed packet numbers, so it's disabled all together for now.
    
    Link: https://lore.kernel.org/r/20210929080844.11583-6-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ca1fa52d351256f3378593bcc53b995b855a46d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:39 2021 +0200

    ALSA: usb-audio: Disable low-latency playback for free-wheel mode
    
    commit e581f1cec4f899f788f6c9477f805b1d5fef25e2 upstream.
    
    The free-wheel stream operation like dmix may not update the appl_ptr
    appropriately, and it doesn't fit with the low-latency playback mode.
    Disable the low-latency playback operation when the stream is set up
    in such a mode.
    
    Link: https://lore.kernel.org/r/20210929080844.11583-5-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d9ea74b3751f3c736af10a360648df600d3ee7e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:38 2021 +0200

    ALSA: usb-audio: Rename early_playback_start flag with lowlatency_playback
    
    commit 9c9a3b9da891cc70405a544da6855700eddcbb71 upstream.
    
    This is a preparation patch for the upcoming low-latency improvement
    changes.
    
    Rename early_playback_start flag with lowlatency_playback as it's more
    intuitive.  The new flag is basically a reverse meaning.
    
    Along with the rename, factor out the code to set the flag to a
    function.  This makes the complex condition checks simpler.
    
    Also, the same flag is introduced to snd_usb_endpoint, too, that is
    carried from the snd_usb_substream flag.  Currently the endpoint flag
    isn't still referred, but will be used in later patches.
    
    Link: https://lore.kernel.org/r/20210929080844.11583-4-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f0a376b2eaac189e4ad72fcea05175d9c5f81b2
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Sep 29 10:08:36 2021 +0200

    ALSA: usb-audio: Restrict rates for the shared clocks
    
    commit 4e7cf1fbb34ecb472c073980458cbe413afd4d64 upstream.
    
    When a single clock source is shared among several endpoints, we have
    to keep the same rate on all active endpoints as long as the clock is
    being used.  For dealing with such a case, this patch adds one more
    check in the hw params constraint for the rate to take the shared
    clocks into account.  The current rate is evaluated from the endpoint
    list that applies the same clock source.
    
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1190418
    Link: https://lore.kernel.org/r/20210929080844.11583-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
