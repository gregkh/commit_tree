commit 7977a464dcddd95c2b27de275a5f13f503d87e32
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jul 9 09:39:40 2020 +0200

    Linux 5.7.8

commit 6b4dbbb659ac8400d424b7943b4ba24e7e25fe16
Author: Peter Jones <pjones@redhat.com>
Date:   Mon Jun 15 16:24:08 2020 -0400

    efi: Make it possible to disable efivar_ssdt entirely
    
    commit 435d1a471598752446a72ad1201b3c980526d869 upstream.
    
    In most cases, such as CONFIG_ACPI_CUSTOM_DSDT and
    CONFIG_ACPI_TABLE_UPGRADE, boot-time modifications to firmware tables
    are tied to specific Kconfig options.  Currently this is not the case
    for modifying the ACPI SSDT via the efivar_ssdt kernel command line
    option and associated EFI variable.
    
    This patch adds CONFIG_EFI_CUSTOM_SSDT_OVERLAYS, which defaults
    disabled, in order to allow enabling or disabling that feature during
    the build.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Peter Jones <pjones@redhat.com>
    Link: https://lore.kernel.org/r/20200615202408.2242614-1-pjones@redhat.com
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eae7bf13993ea919b319991d4491cffe45c4054d
Author: Hou Tao <houtao1@huawei.com>
Date:   Mon Jun 15 11:33:23 2020 +0800

    dm zoned: assign max_io_len correctly
    
    commit 7b2377486767503d47265e4d487a63c651f6b55d upstream.
    
    The unit of max_io_len is sector instead of byte (spotted through
    code review), so fix it.
    
    Fixes: 3b1a94c88b79 ("dm zoned: drive-managed zoned block device target")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84524e70b668a83869f5d914436445cf89c25c56
Author: Barry Song <song.bao.hua@hisilicon.com>
Date:   Fri Jul 3 15:15:24 2020 -0700

    mm/cma.c: use exact_nid true to fix possible per-numa cma leak
    
    commit 40366bd70bbbbf822ca224dfc227a8c8e868c44f upstream.
    
    Calling cma_declare_contiguous_nid() with false exact_nid for per-numa
    reservation can easily cause cma leak and various confusion.  For example,
    mm/hugetlb.c is trying to reserve per-numa cma for gigantic pages.  But it
    can easily leak cma and make users confused when system has memoryless
    nodes.
    
    In case the system has 4 numa nodes, and only numa node0 has memory.  if
    we set hugetlb_cma=4G in bootargs, mm/hugetlb.c will get 4 cma areas for 4
    different numa nodes.  since exact_nid=false in current code, all 4 numa
    nodes will get cma successfully from node0, but hugetlb_cma[1 to 3] will
    never be available to hugepage will only allocate memory from
    hugetlb_cma[0].
    
    In case the system has 4 numa nodes, both numa node0&2 has memory, other
    nodes have no memory.  if we set hugetlb_cma=4G in bootargs, mm/hugetlb.c
    will get 4 cma areas for 4 different numa nodes.  since exact_nid=false in
    current code, all 4 numa nodes will get cma successfully from node0 or 2,
    but hugetlb_cma[1] and [3] will never be available to hugepage as
    mm/hugetlb.c will only allocate memory from hugetlb_cma[0] and
    hugetlb_cma[2].  This causes permanent leak of the cma areas which are
    supposed to be used by memoryless node.
    
    Of cource we can workaround the issue by letting mm/hugetlb.c scan all cma
    areas in alloc_gigantic_page() even node_mask includes node0 only.  that
    means when node_mask includes node0 only, we can get page from
    hugetlb_cma[1] to hugetlb_cma[3].  But this will cause kernel crash in
    free_gigantic_page() while it wants to free page by:
    cma_release(hugetlb_cma[page_to_nid(page)], page, 1 << order)
    
    On the other hand, exact_nid=false won't consider numa distance, it might
    be not that useful to leverage cma areas on remote nodes.  I feel it is
    much simpler to make exact_nid true to make everything clear.  After that,
    memoryless nodes won't be able to reserve per-numa CMA from other nodes
    which have memory.
    
    Fixes: cf11e85fc08c ("mm: hugetlb: optionally allocate gigantic hugepages using cma")
    Signed-off-by: Barry Song <song.bao.hua@hisilicon.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: Aslan Bakirov <aslan@fb.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Andreas Schaufler <andreas.schaufler@gmx.de>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Joonsoo Kim <js1304@gmail.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200628074345.27228-1-song.bao.hua@hisilicon.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit faf8c29a190142169ca0f48ac2ed77e6530c4bee
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Fri Jul 3 15:15:18 2020 -0700

    mm/hugetlb.c: fix pages per hugetlb calculation
    
    commit 1139d336fff425f9a20374945cdd28eb44d09fa8 upstream.
    
    The routine hpage_nr_pages() was incorrectly used to calculate the number
    of base pages in a hugetlb page.  hpage_nr_pages is designed to be called
    for THP pages and will return HPAGE_PMD_NR for hugetlb pages of any size.
    
    Due to the context in which hpage_nr_pages was called, it is unlikely to
    produce a user visible error.  The routine with the incorrect call is only
    exercised in the case of hugetlb memory error or migration.  In addition,
    this would need to be on an architecture which supports huge page sizes
    less than PMD_SIZE.  And, the vma containing the huge page would also need
    to smaller than PMD_SIZE.
    
    Fixes: c0d0381ade79 ("hugetlbfs: use i_mmap_rwsem for more pmd sharing synchronization")
    Reported-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200629185003.97202-1-mike.kravetz@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 639b9de2d735841fe32a2878c93cbc2867044cb0
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Jun 21 14:43:15 2020 +0100

    irqchip/gic: Atomically update affinity
    
    commit 005c34ae4b44f085120d7f371121ec7ded677761 upstream.
    
    The GIC driver uses a RMW sequence to update the affinity, and
    relies on the gic_lock_irqsave/gic_unlock_irqrestore sequences
    to update it atomically.
    
    But these sequences only expand into anything meaningful if
    the BL_SWITCHER option is selected, which almost never happens.
    
    It also turns out that using a RMW and locks is just as silly,
    as the GIC distributor supports byte accesses for the GICD_TARGETRn
    registers, which when used make the update atomic by definition.
    
    Drop the terminally broken code and replace it by a byte write.
    
    Fixes: 04c8b0f82c7d ("irqchip/gic: Make locking a BL_SWITCHER only feature")
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b2d9ee872f71abb5340f8d4e9349b3f660dedf4
Author: Sumit Semwal <sumit.semwal@linaro.org>
Date:   Thu Jun 11 17:14:18 2020 +0530

    dma-buf: Move dma_buf_release() from fops to dentry_ops
    
    commit 4ab59c3c638c6c8952bf07739805d20eb6358a4d upstream.
    
    Charan Teja reported a 'use-after-free' in dmabuffs_dname [1], which
    happens if the dma_buf_release() is called while the userspace is
    accessing the dma_buf pseudo fs's dmabuffs_dname() in another process,
    and dma_buf_release() releases the dmabuf object when the last reference
    to the struct file goes away.
    
    I discussed with Arnd Bergmann, and he suggested that rather than tying
    the dma_buf_release() to the file_operations' release(), we can tie it to
    the dentry_operations' d_release(), which will be called when the last ref
    to the dentry is removed.
    
    The path exercised by __fput() calls f_op->release() first, and then calls
    dput, which eventually calls d_op->d_release().
    
    In the 'normal' case, when no userspace access is happening via dma_buf
    pseudo fs, there should be exactly one fd, file, dentry and inode, so
    closing the fd will kill of everything right away.
    
    In the presented case, the dentry's d_release() will be called only when
    the dentry's last ref is released.
    
    Therefore, lets move dma_buf_release() from fops->release() to
    d_ops->d_release()
    
    Many thanks to Arnd for his FS insights :)
    
    [1]: https://lore.kernel.org/patchwork/patch/1238278/
    
    Fixes: bb2bb9030425 ("dma-buf: add DMA_BUF_SET_NAME ioctls")
    Reported-by: syzbot+3643a18836bce555bff6@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org> [5.3+]
    Cc: Arnd Bergmann <arnd@arndb.de>
    Reported-by: Charan Teja Reddy <charante@codeaurora.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Tested-by: Charan Teja Reddy <charante@codeaurora.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200611114418.19852-1-sumit.semwal@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fceff9423f428a62a20bb8fb8f66e6a9f906f12c
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Jun 25 17:55:57 2020 -0400

    drm/amdgpu/atomfirmware: fix vram_info fetching for renoir
    
    commit d7a6634a4cfba073ff6a526cb4265d6e58ece234 upstream.
    
    Renoir uses integrated_system_info table v12.  The table
    has the same layout as v11 with respect to this data.  Just
    reuse the existing code for v12 for stable.
    
    Fixes incorrectly reported vram info in the driver output.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c337fc540bb99e476e33153a9196eba4749a707a
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jul 1 12:00:08 2020 -0400

    drm/amdgpu: use %u rather than %d for sclk/mclk
    
    commit beaf10efca64ac824240838ab1f054dfbefab5e6 upstream.
    
    Large clock values may overflow and show up as negative.
    
    Reported by prOMiNd on IRC.
    
    Acked-by: Nirmoy Das <nirmoy.das@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcb408a7282302bd8b8afc6ef8db42b4eece23ee
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Mon Jun 29 13:03:52 2020 -0400

    drm/amd/display: Only revalidate bandwidth on medium and fast updates
    
    commit 6eb3cf2e06d22b2b08e6b0ab48cb9c05a8e1a107 upstream.
    
    [Why]
    Changes that are fast don't require updating DLG parameters making
    this call unnecessary. Considering this is an expensive call it should
    not be done on every flip.
    
    DML touches clocks, p-state support, DLG params and a few other DC
    internal flags and these aren't expected during fast. A hang has been
    reported with this change when called on every flip which suggests that
    modifying these fields is not recommended behavior on fast updates.
    
    [How]
    Guard the validation to only happen if update type isn't FAST.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/1191
    Fixes: a24eaa5c51255b ("drm/amd/display: Revalidate bandwidth before commiting DC updates")
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Roman Li <Roman.Li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13b2fe391cac70c7746e2cb68e73d99002f1cd00
Author: Ivan Mironov <mironov.ivan@gmail.com>
Date:   Thu Jun 25 21:50:42 2020 +0500

    drm/amd/powerplay: Fix NULL dereference in lock_bus() on Vega20 w/o RAS
    
    commit 7e89e4aaa9ae83107d059c186955484b3aa6eb23 upstream.
    
    I updated my system with Radeon VII from kernel 5.6 to kernel 5.7, and
    following started to happen on each boot:
    
            ...
            BUG: kernel NULL pointer dereference, address: 0000000000000128
            ...
            CPU: 9 PID: 1940 Comm: modprobe Tainted: G            E     5.7.2-200.im0.fc32.x86_64 #1
            Hardware name: System manufacturer System Product Name/PRIME X570-P, BIOS 1407 04/02/2020
            RIP: 0010:lock_bus+0x42/0x60 [amdgpu]
            ...
            Call Trace:
             i2c_smbus_xfer+0x3d/0xf0
             i2c_default_probe+0xf3/0x130
             i2c_detect.isra.0+0xfe/0x2b0
             ? kfree+0xa3/0x200
             ? kobject_uevent_env+0x11f/0x6a0
             ? i2c_detect.isra.0+0x2b0/0x2b0
             __process_new_driver+0x1b/0x20
             bus_for_each_dev+0x64/0x90
             ? 0xffffffffc0f34000
             i2c_register_driver+0x73/0xc0
             do_one_initcall+0x46/0x200
             ? _cond_resched+0x16/0x40
             ? kmem_cache_alloc_trace+0x167/0x220
             ? do_init_module+0x23/0x260
             do_init_module+0x5c/0x260
             __do_sys_init_module+0x14f/0x170
             do_syscall_64+0x5b/0xf0
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
            ...
    
    Error appears when some i2c device driver tries to probe for devices
    using adapter registered by `smu_v11_0_i2c_eeprom_control_init()`.
    Code supporting this adapter requires `adev->psp.ras.ras` to be not
    NULL, which is true only when `amdgpu_ras_init()` detects HW support by
    calling `amdgpu_ras_check_supported()`.
    
    Before 9015d60c9ee1, adapter was registered by
    
            -> amdgpu_device_ip_init()
              -> amdgpu_ras_recovery_init()
                -> amdgpu_ras_eeprom_init()
                  -> smu_v11_0_i2c_eeprom_control_init()
    
    after verifying that `adev->psp.ras.ras` is not NULL in
    `amdgpu_ras_recovery_init()`. Currently it is registered
    unconditionally by
    
            -> amdgpu_device_ip_init()
              -> pp_sw_init()
                -> hwmgr_sw_init()
                  -> vega20_smu_init()
                    -> smu_v11_0_i2c_eeprom_control_init()
    
    Fix simply adds HW support check (ras == NULL => no support) before
    calling `smu_v11_0_i2c_eeprom_control_{init,fini}()`.
    
    Please note that there is a chance that similar fix is also required for
    CHIP_ARCTURUS. I do not know whether any actual Arcturus hardware without
    RAS exist, and whether calling `smu_i2c_eeprom_init()` makes any sense
    when there is no HW support.
    
    Cc: stable@vger.kernel.org
    Fixes: 9015d60c9ee1 ("drm/amdgpu: Move EEPROM I2C adapter to amdgpu_device")
    Signed-off-by: Ivan Mironov <mironov.ivan@gmail.com>
    Tested-by: Bjorn Nostvold <bjorn.nostvold@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95e961c6c23c35bb9f190f8d6bd13f1606de5a48
Author: Rodrigo Vivi <rodrigo.vivi@intel.com>
Date:   Wed Jun 10 13:18:07 2020 -0700

    drm/i915: Include asm sources for {ivb, hsw}_clear_kernel.c
    
    commit 55fd7e0222ea01246ef3e6aae28b5721fdfb790f upstream.
    
    Alexandre Oliva has recently removed these files from Linux Libre
    with concerns that the sources weren't available.
    
    The sources are available on IGT repository, and only open source
    tools are used to generate the {ivb,hsw}_clear_kernel.c files.
    
    However, the remaining concern from Alexandre Oliva was around
    GPL license and the source not been present when distributing
    the code.
    
    So, it looks like 2 alternatives are possible, the use of
    linux-firmware.git repository to store the blob or making sure
    that the source is also present in our tree. Since the goal
    is to limit the i915 firmware to only the micro-controller blobs
    let's make sure that we do include the asm sources here in our tree.
    
    Btw, I tried to have some diligence here and make sure that the
    asms that these commits are adding are truly the source for
    the mentioned files:
    
    igt$ ./scripts/generate_clear_kernel.sh -g ivb \
         -m ~/mesa/build/src/intel/tools/i965_asm
    Output file not specified - using default file "ivb-cb_assembled"
    
    Generating gen7 CB Kernel assembled file "ivb_clear_kernel.c"
    for i915 driver...
    
    igt$ diff ~/i915/drm-tip/drivers/gpu/drm/i915/gt/ivb_clear_kernel.c \
         ivb_clear_kernel.c
    
    <  * Generated by: IGT Gpu Tools on Fri 21 Feb 2020 05:29:32 AM UTC
    >  * Generated by: IGT Gpu Tools on Mon 08 Jun 2020 10:00:54 AM PDT
    61c61
    < };
    > };
    \ No newline at end of file
    
    igt$ ./scripts/generate_clear_kernel.sh -g hsw \
         -m ~/mesa/build/src/intel/tools/i965_asm
    Output file not specified - using default file "hsw-cb_assembled"
    
    Generating gen7.5 CB Kernel assembled file "hsw_clear_kernel.c"
    for i915 driver...
    
    igt$ diff ~/i915/drm-tip/drivers/gpu/drm/i915/gt/hsw_clear_kernel.c \
         hsw_clear_kernel.c
    5c5
    <  * Generated by: IGT Gpu Tools on Fri 21 Feb 2020 05:30:13 AM UTC
    >  * Generated by: IGT Gpu Tools on Mon 08 Jun 2020 10:01:42 AM PDT
    61c61
    < };
    > };
    \ No newline at end of file
    
    Used IGT and Mesa master repositories from Fri Jun 5 2020)
    IGT: 53e8c878a6fb ("tests/kms_chamelium: Force reprobe after replugging
         the connector")
    Mesa: 5d13c7477eb1 ("radv: set keep_statistic_info with
          RADV_DEBUG=shaderstats")
    Mesa built with: meson build -D platforms=drm,x11 -D dri-drivers=i965 \
                     -D gallium-drivers=iris -D prefix=/usr \
                     -D libdir=/usr/lib64/ -Dtools=intel \
                     -Dkulkan-drivers=intel && ninja -C build
    
    v2: Header clean-up and include build instructions in a readme (Chris)
        Modified commit message to respect check-patch
    
    Reference: http://www.fsfla.org/pipermail/linux-libre/2020-June/003374.html
    Reference: http://www.fsfla.org/pipermail/linux-libre/2020-June/003375.html
    Fixes: 47f8253d2b89 ("drm/i915/gen7: Clear all EU/L3 residual contexts")
    Cc: <stable@vger.kernel.org> # v5.7+
    Cc: Alexandre Oliva <lxoliva@fsfla.org>
    Cc: Prathap Kumar Valsan <prathap.kumar.valsan@intel.com>
    Cc: Akeem G Abodunrin <akeem.g.abodunrin@intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Reviewed-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200610201807.191440-1-rodrigo.vivi@intel.com
    (cherry picked from commit 5a7eeb8ba143d860050ecea924a8f074f02d8023)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af676f1023f9175e3acd0afb61d08891f898245b
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Fri Jul 3 00:53:34 2020 +0200

    MIPS: Add missing EHB in mtc0 -> mfc0 sequence for DSPen
    
    commit fcec538ef8cca0ad0b84432235dccd9059c8e6f8 upstream.
    
    This resolves the hazard between the mtc0 in the change_c0_status() and
    the mfc0 in configure_exception_vector(). Without resolving this hazard
    configure_exception_vector() could read an old value and would restore
    this old value again. This would revert the changes change_c0_status()
    did. I checked this by printing out the read_c0_status() at the end of
    per_cpu_trap_init() and the ST0_MX is not set without this patch.
    
    The hazard is documented in the MIPS Architecture Reference Manual Vol.
    III: MIPS32/microMIPS32 Privileged Resource Architecture (MD00088), rev
    6.03 table 8.1 which includes:
    
       Producer | Consumer | Hazard
      ----------|----------|----------------------------
       mtc0     | mfc0     | any coprocessor 0 register
    
    I saw this hazard on an Atheros AR9344 rev 2 SoC with a MIPS 74Kc CPU.
    There the change_c0_status() function would activate the DSPen by
    setting ST0_MX in the c0_status register. This was reverted and then the
    system got a DSP exception when the DSP registers were saved in
    save_dsp() in the first process switch. The crash looks like this:
    
    [    0.089999] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    [    0.097796] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    [    0.107070] Kernel panic - not syncing: Unexpected DSP exception
    [    0.113470] Rebooting in 1 seconds..
    
    We saw this problem in OpenWrt only on the MIPS 74Kc based Atheros SoCs,
    not on the 24Kc based SoCs. We only saw it with kernel 5.4 not with
    kernel 4.19, in addition we had to use GCC 8.4 or 9.X, with GCC 8.3 it
    did not happen.
    
    In the kernel I bisected this problem to commit 9012d011660e ("compiler:
    allow all arches to enable CONFIG_OPTIMIZE_INLINING"), but when this was
    reverted it also happened after commit 172dcd935c34b ("MIPS: Always
    allocate exception vector for MIPSr2+").
    
    Commit 0b24cae4d535 ("MIPS: Add missing EHB in mtc0 -> mfc0 sequence.")
    does similar changes to a different file. I am not sure if there are
    more places affected by this problem.
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3f72b832d6e45235cce3155427513eb685ca98d
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Jun 7 15:10:23 2020 +0200

    MIPS: lantiq: xway: sysctrl: fix the GPHY clock alias names
    
    commit 03e62fd67d3ab33f39573fc8787d89dc9b4d7255 upstream.
    
    The dt-bindings for the GSWIP describe that the node should be named
    "switch". Use the same name in sysctrl.c so the GSWIP driver can
    actually find the "gphy0" and "gphy1" clocks.
    
    Fixes: 14fceff4771e51 ("net: dsa: Add Lantiq / Intel DSA driver for vrx200")
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Acked-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 597cf1e7c6835ac30fe1b1db2fbe8ccce350d39b
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Jun 5 12:26:05 2020 -0700

    x86/split_lock: Don't write MSR_TEST_CTRL on CPUs that aren't whitelisted
    
    commit 009bce1df0bb5eb970b9eb98d963861f7fe353c7 upstream.
    
    Choo! Choo!  All aboard the Split Lock Express, with direct service to
    Wreckage!
    
    Skip split_lock_verify_msr() if the CPU isn't whitelisted as a possible
    SLD-enabled CPU model to avoid writing MSR_TEST_CTRL.  MSR_TEST_CTRL
    exists, and is writable, on many generations of CPUs.  Writing the MSR,
    even with '0', can result in bizarre, undocumented behavior.
    
    This fixes a crash on Haswell when resuming from suspend with a live KVM
    guest.  Because APs use the standard SMP boot flow for resume, they will
    go through split_lock_init() and the subsequent RDMSR/WRMSR sequence,
    which runs even when sld_state==sld_off to ensure SLD is disabled.  On
    Haswell (at least, my Haswell), writing MSR_TEST_CTRL with '0' will
    succeed and _may_ take the SMT _sibling_ out of VMX root mode.
    
    When KVM has an active guest, KVM performs VMXON as part of CPU onlining
    (see kvm_starting_cpu()).  Because SMP boot is serialized, the resulting
    flow is effectively:
    
      on_each_ap_cpu() {
         WRMSR(MSR_TEST_CTRL, 0)
         VMXON
      }
    
    As a result, the WRMSR can disable VMX on a different CPU that has
    already done VMXON.  This ultimately results in a #UD on VMPTRLD when
    KVM regains control and attempt run its vCPUs.
    
    The above voodoo was confirmed by reworking KVM's VMXON flow to write
    MSR_TEST_CTRL prior to VMXON, and to serialize the sequence as above.
    Further verification of the insanity was done by redoing VMXON on all
    APs after the initial WRMSR->VMXON sequence.  The additional VMXON,
    which should VM-Fail, occasionally succeeded, and also eliminated the
    unexpected #UD on VMPTRLD.
    
    The damage done by writing MSR_TEST_CTRL doesn't appear to be limited
    to VMX, e.g. after suspend with an active KVM guest, subsequent reboots
    almost always hang (even when fudging VMXON), a #UD on a random Jcc was
    observed, suspend/resume stability is qualitatively poor, and so on and
    so forth.
    
      kernel BUG at arch/x86/kvm/x86.c:386!
      CPU: 1 PID: 2592 Comm: CPU 6/KVM Tainted: G      D
      Hardware name: ASUS Q87M-E/Q87M-E, BIOS 1102 03/03/2014
      RIP: 0010:kvm_spurious_fault+0xf/0x20
      Call Trace:
       vmx_vcpu_load_vmcs+0x1fb/0x2b0
       vmx_vcpu_load+0x3e/0x160
       kvm_arch_vcpu_load+0x48/0x260
       finish_task_switch+0x140/0x260
       __schedule+0x460/0x720
       _cond_resched+0x2d/0x40
       kvm_arch_vcpu_ioctl_run+0x82e/0x1ca0
       kvm_vcpu_ioctl+0x363/0x5c0
       ksys_ioctl+0x88/0xa0
       __x64_sys_ioctl+0x16/0x20
       do_syscall_64+0x4c/0x170
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: dbaba47085b0c ("x86/split_lock: Rework the initialization flow of split lock detection")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200605192605.7439-1-sean.j.christopherson@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23804d0271f2784febeb46d41e662f1e09dbdcf2
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Jun 9 09:55:11 2020 -0400

    gfs2: fix trans slab error when withdraw occurs inside log_flush
    
    commit 58e08e8d83ab03a1ca25d53420bd0b87f2dfe458 upstream.
    
    Log flush operations (gfs2_log_flush()) can target a specific transaction.
    But if the function encounters errors (e.g. io errors) and withdraws,
    the transaction was only freed it if was queued to one of the ail lists.
    If the withdraw occurred before the transaction was queued to the ail1
    list, function ail_drain never freed it. The result was:
    
    BUG gfs2_trans: Objects remaining in gfs2_trans on __kmem_cache_shutdown()
    
    This patch makes log_flush() add the targeted transaction to the ail1
    list so that function ail_drain() will find and free it properly.
    
    Cc: stable@vger.kernel.org # v5.7+
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 654aca372517f1f60d2fe63275c41fb2a5a915f8
Author: Sumeet Pawnikar <sumeet.r.pawnikar@intel.com>
Date:   Tue Jun 30 21:11:49 2020 +0530

    ACPI: fan: Fix Tiger Lake ACPI device ID
    
    commit 0318e8374e87b32def1d5c279013ca7730a74982 upstream.
    
    Tiger Lake's new unique ACPI device ID for Fan is not valid
    because of missing 'C' in the ID.  Use correct fan device ID.
    
    Fixes: c248dfe7e0ca ("ACPI: fan: Add Tiger Lake ACPI device ID")
    Signed-off-by: Sumeet Pawnikar <sumeet.r.pawnikar@intel.com>
    Cc: 5.6+ <stable@vger.kernel.org> # 5.6+
    [ rjw: Subject and changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9006b543384ab10902819364c1205f11a1458571
Author: Finley Xiao <finley.xiao@rock-chips.com>
Date:   Fri Jun 19 17:08:25 2020 +0800

    thermal/drivers/cpufreq_cooling: Fix wrong frequency converted from power
    
    commit 371a3bc79c11b707d7a1b7a2c938dc3cc042fffb upstream.
    
    The function cpu_power_to_freq is used to find a frequency and set the
    cooling device to consume at most the power to be converted. For example,
    if the power to be converted is 80mW, and the em table is as follow.
    struct em_cap_state table[] = {
            /* KHz     mW */
            { 1008000, 36, 0 },
            { 1200000, 49, 0 },
            { 1296000, 59, 0 },
            { 1416000, 72, 0 },
            { 1512000, 86, 0 },
    };
    The target frequency should be 1416000KHz, not 1512000KHz.
    
    Fixes: 349d39dc5739 ("thermal: cpu_cooling: merge frequency and power tables")
    Cc: <stable@vger.kernel.org> # v4.13+
    Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200619090825.32747-1-finley.xiao@rock-chips.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed0021db47b06272bd79f8c6271863280a988d33
Author: Jan Kundrát <jan.kundrat@cesnet.cz>
Date:   Tue Jun 23 09:47:39 2020 +0200

    hwmon: (pmbus) Fix page vs. register when accessing fans
    
    commit b4c8af4c2a226fc9c25e1decbd26fdab1b0993ee upstream.
    
    Commit 16358542f32f ("hwmon: (pmbus) Implement multi-phase support")
    added support for multi-phase pmbus devices. However, when calling
    pmbus_add_sensor() for fans, the patch swapped the `page` and `reg`
    attributes. As a result, the fan speeds were reported as 0 RPM on my device.
    
    Signed-off-by: Jan Kundrát <jan.kundrat@cesnet.cz>
    Fixes: 16358542f32f ("hwmon: (pmbus) Implement multi-phase support")
    Cc: stable@vger.kernel.org # v5.7+
    Link: https://lore.kernel.org/r/449bc9e6c0e4305581e45905ce9d043b356a9932.1592904387.git.jan.kundrat@cesnet.cz
    [groeck: Fixed references to offending commit]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac6ae9b0e60d0b0efa7c13780752e1604d9fe16a
Author: Joseph Salisbury <joseph.salisbury@microsoft.com>
Date:   Fri Jun 26 15:28:17 2020 -0700

    Drivers: hv: Change flag to write log level in panic msg to false
    
    commit 77b48bea2fee47c15a835f6725dd8df0bc38375a upstream.
    
    When the kernel panics, one page of kmsg data may be collected and sent to
    Hyper-V to aid in diagnosing the failure.  The collected kmsg data typically
     contains 50 to 100 lines, each of which has a log level prefix that isn't
    very useful from a diagnostic standpoint.  So tell kmsg_dump_get_buffer()
    to not include the log level, enabling more information that *is* useful to
    fit in the page.
    
    Requesting in stable kernels, since many kernels running in production are
    stable releases.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Joseph Salisbury <joseph.salisbury@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1593210497-114310-1-git-send-email-joseph.salisbury@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4095f9f2e2ae19612cca142d5f4d9ddf7e837fd0
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sun Jun 28 21:06:38 2020 -0400

    cifs: Fix the target file was deleted when rename failed.
    
    commit 9ffad9263b467efd8f8dc7ae1941a0a655a2bab2 upstream.
    
    When xfstest generic/035, we found the target file was deleted
    if the rename return -EACESS.
    
    In cifs_rename2, we unlink the positive target dentry if rename
    failed with EACESS or EEXIST, even if the target dentry is positived
    before rename. Then the existing file was deleted.
    
    We should just delete the target file which created during the
    rename.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3523ca822d4585cf27c071be4fb7ff1c5c095f6d
Author: Paul Aurich <paul@darkrain42.org>
Date:   Fri Jun 26 12:58:08 2020 -0700

    SMB3: Honor 'handletimeout' flag for multiuser mounts
    
    commit 6b356f6cf941d5054d7fab072cae4a5f8658e3db upstream.
    
    Fixes: ca567eb2b3f0 ("SMB3: Allow persistent handle timeout to be configurable on mount")
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd6a3550884bd08b6c37be540d26a7b15500a69f
Author: Paul Aurich <paul@darkrain42.org>
Date:   Fri Jun 26 12:58:07 2020 -0700

    SMB3: Honor lease disabling for multiuser mounts
    
    commit ad35f169db6cd5a4c5c0a5a42fb0cad3efeccb83 upstream.
    
    Fixes: 3e7a02d47872 ("smb3: allow disabling requesting leases")
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee60be084d865c0e32d8a1bc322c6862c35698fb
Author: Paul Aurich <paul@darkrain42.org>
Date:   Fri Jun 26 12:58:06 2020 -0700

    SMB3: Honor persistent/resilient handle flags for multiuser mounts
    
    commit 00dfbc2f9c61185a2e662f27c45a0bb29b2a134f upstream.
    
    Without this:
    
    - persistent handles will only be enabled for per-user tcons if the
      server advertises the 'Continuous Availabity' capability
    - resilient handles would never be enabled for per-user tcons
    
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03c5fbffef8a41f403c87b195946efda559e6fb7
Author: Paul Aurich <paul@darkrain42.org>
Date:   Fri Jun 26 12:58:05 2020 -0700

    SMB3: Honor 'seal' flag for multiuser mounts
    
    commit cc15461c73d7d044d56c47e869a215e49bd429c8 upstream.
    
    Ensure multiuser SMB3 mounts use encryption for all users' tcons if the
    mount options are configured to require encryption. Without this, only
    the primary tcon and IPC tcons are guaranteed to be encrypted. Per-user
    tcons would only be encrypted if the server was configured to require
    encryption.
    
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9088c4ec1ac3fd3edf0913cfb91b217dc9e1ce3a
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Mon Jun 8 17:26:52 2020 -0400

    padata: upgrade smp_mb__after_atomic to smp_mb in padata_do_serial
    
    commit e04ec0de61c1eb9693179093e83ab8ca68a30d08 upstream.
    
    A 5.7 kernel hangs during a tcrypt test of padata that waits for an AEAD
    request to finish.  This is only seen on large machines running many
    concurrent requests.
    
    The issue is that padata never serializes the request.  The removal of
    the reorder_objects atomic missed that the memory barrier in
    padata_do_serial() depends on it.
    
    Upgrade the barrier from smp_mb__after_atomic to smp_mb to get correct
    ordering again.
    
    Fixes: 3facced7aeed1 ("padata: remove reorder_objects")
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: linux-kernel@vger.kernel.org
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d67dde02049e632ba58d3c44a164a74b6a737154
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 7 14:42:38 2020 +0200

    Revert "ALSA: usb-audio: Improve frames size computation"
    
    This reverts commit d288dc74f8cf95cb7ae0aaf245b7128627a49bf3 which is
    commit f0bd62b64016508938df9babe47f65c2c727d25c upstream.
    
    It causes a number of reported issues and a fix for it has not hit
    Linus's tree yet.  Revert this to resolve those problems.
    
    Cc: Alexander Tsoy <alexander@tsoy.me>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Hans de Goede <jwrdegoede@fedoraproject.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb17be570b470fd56ccb2db7c1b0beb4d0d590d7
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Tue Jun 16 16:43:18 2020 -0400

    nfsd: apply umask on fs without ACL support
    
    commit 22cf8419f1319ff87ec759d0ebdff4cbafaee832 upstream.
    
    The server is failing to apply the umask when creating new objects on
    filesystems without ACL support.
    
    To reproduce this, you need to use NFSv4.2 and a client and server
    recent enough to support umask, and you need to export a filesystem that
    lacks ACL support (for example, ext4 with the "noacl" mount option).
    
    Filesystems with ACL support are expected to take care of the umask
    themselves (usually by calling posix_acl_create).
    
    For filesystems without ACL support, this is up to the caller of
    vfs_create(), vfs_mknod(), or vfs_mkdir().
    
    Reported-by: Elliott Mitchell <ehem+debian@m5p.com>
    Reported-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Fixes: 47057abde515 ("nfsd: add support for the umask attribute")
    Cc: stable@vger.kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29a81b291af74a0ce3b5a04242449b245811dfae
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Jun 22 13:05:42 2020 +0200

    spi: spi-fsl-dspi: Fix external abort on interrupt in resume or exit paths
    
    commit 3d87b613d6a3c6f0980e877ab0895785a2dde581 upstream.
    
    If shared interrupt comes late, during probe error path or device remove
    (could be triggered with CONFIG_DEBUG_SHIRQ), the interrupt handler
    dspi_interrupt() will access registers with the clock being disabled.
    This leads to external abort on non-linefetch on Toradex Colibri VF50
    module (with Vybrid VF5xx):
    
        $ echo 4002d000.spi > /sys/devices/platform/soc/40000000.bus/4002d000.spi/driver/unbind
    
        Unhandled fault: external abort on non-linefetch (0x1008) at 0x8887f02c
        Internal error: : 1008 [#1] ARM
        Hardware name: Freescale Vybrid VF5xx/VF6xx (Device Tree)
        Backtrace:
          (regmap_mmio_read32le)
          (regmap_mmio_read)
          (_regmap_bus_reg_read)
          (_regmap_read)
          (regmap_read)
          (dspi_interrupt)
          (free_irq)
          (devm_irq_release)
          (release_nodes)
          (devres_release_all)
          (device_release_driver_internal)
    
    The resource-managed framework should not be used for shared interrupt
    handling, because the interrupt handler might be called after releasing
    other resources and disabling clocks.
    
    Similar bug could happen during suspend - the shared interrupt handler
    could be invoked after suspending the device.  Each device sharing this
    interrupt line should disable the IRQ during suspend so handler will be
    invoked only in following cases:
    1. None suspended,
    2. All devices resumed.
    
    Fixes: 349ad66c0ab0 ("spi:Add Freescale DSPI driver for Vybrid VF610 platform")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200622110543.5035-3-krzk@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5f92c3eccab823a12b1868e10feac74c7d67f5d
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sat Jul 4 08:55:50 2020 -0600

    io_uring: fix regression with always ignoring signals in io_cqring_wait()
    
    [ Upstream commit b7db41c9e03b5189bc94993bd50e4506ac9e34c1 ]
    
    When switching to TWA_SIGNAL for task_work notifications, we also made
    any signal based condition in io_cqring_wait() return -ERESTARTSYS.
    This breaks applications that rely on using signals to abort someone
    waiting for events.
    
    Check if we have a signal pending because of queued task_work, and
    repeat the signal check once we've run the task_work. This provides a
    reliable way of telling the two apart.
    
    Additionally, only use TWA_SIGNAL if we are using an eventfd. If not,
    we don't have the dependency situation described in the original commit,
    and we can get by with just using TWA_RESUME like we previously did.
    
    Fixes: ce593a6c480a ("io_uring: use signal based task_work running")
    Cc: stable@vger.kernel.org # v5.7
    Reported-by: Andres Freund <andres@anarazel.de>
    Tested-by: Andres Freund <andres@anarazel.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92e13371c255402efc96effe5e6afaebd0f0314c
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Sun Jun 28 13:52:44 2020 +0200

    i2c: mlxcpld: check correct size of maximum RECV_LEN packet
    
    [ Upstream commit 597911287fcd13c3a4b4aa3e0a52b33d431e0a8e ]
    
    I2C_SMBUS_BLOCK_MAX defines already the maximum number as defined in the
    SMBus 2.0 specs. I don't see a reason to add 1 here. Also, fix the errno
    to what is suggested for this error.
    
    Fixes: c9bfdc7c16cb ("i2c: mlxcpld: Add support for smbus block read transaction")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Michael Shych <michaelsh@mellanox.com>
    Tested-by: Michael Shych <michaelsh@mellanox.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 852132c840a7fd6ccf71539d2405d39747433c42
Author: Ricardo Ribalda <ribalda@kernel.org>
Date:   Thu Jul 2 12:33:21 2020 +0200

    i2c: designware: platdrv: Set class based on DMI
    
    [ Upstream commit db2a8b6f1df93d5311970cca03052c01178de674 ]
    
    Current AMD's zen-based APUs use this core for some of its i2c-buses.
    
    With this patch we re-enable autodetection of hwmon-alike devices, so
    lm-sensors will be able to work automatically.
    
    It does not affect the boot-time of embedded devices, as the class is
    set based on the DMI information.
    
    DMI is probed only on Qtechnology QT5222 Industrial Camera Platform.
    
    DocLink: https://qtec.com/camera-technology-camera-platforms/
    Fixes: 3eddad96c439 ("i2c: designware: reverts "i2c: designware: Add support for AMD I2C controller"")
    Signed-off-by: Ricardo Ribalda <ribalda@kernel.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5d0bf8b1327e17358654d6fbe25438898f2f5f0
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Thu Jul 2 10:39:11 2020 +1200

    i2c: algo-pca: Add 0x78 as SCL stuck low status for PCA9665
    
    [ Upstream commit cd217f2300793a106b49c7dfcbfb26e348bc7593 ]
    
    The PCA9665 datasheet says that I2CSTA = 78h indicates that SCL is stuck
    low, this differs to the PCA9564 which uses 90h for this indication.
    Treat either 0x78 or 0x90 as an indication that the SCL line is stuck.
    
    Based on looking through the PCA9564 and PCA9665 datasheets this should
    be safe for both chips. The PCA9564 should not return 0x78 for any valid
    state and the PCA9665 should not return 0x90.
    
    Fixes: eff9ec95efaa ("i2c-algo-pca: Add PCA9665 support")
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24ef9d817a527cf8036d2935b7a7a11403a43edd
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Jul 3 15:15:21 2020 -0700

    samples/vfs: avoid warning in statx override
    
    [ Upstream commit c3eeaae9fd736b7f2afbda8d3cbb1cbae06decf3 ]
    
    Something changed recently to uncover this warning:
    
      samples/vfs/test-statx.c:24:15: warning: `struct foo' declared inside parameter list will not be visible outside of this definition or declaration
         24 | #define statx foo
            |               ^~~
    
    Which is due the use of "struct statx" (here, "struct foo") in a function
    prototype argument list before it has been defined:
    
     int
     # 56 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h"
        foo
     # 56 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
              (int __dirfd, const char *__restrict __path, int __flags,
                unsigned int __mask, struct
     # 57 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h"
                                           foo
     # 57 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
                                                 *__restrict __buf)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 5)));
    
    Add explicit struct before #include to avoid warning.
    
    Fixes: f1b5618e013a ("vfs: Add a sample program for the new mount API")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Miklos Szeredi <mszeredi@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: David Howells <dhowells@redhat.com>
    Link: http://lkml.kernel.org/r/202006282213.C516EA6@keescook
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44d0642038b8c256ebd14ed16ff539ae88b7bfb5
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Fri Jun 19 13:30:40 2020 +1000

    tpm: ibmvtpm: Wait for ready buffer before probing for TPM2 attributes
    
    [ Upstream commit 72d0556dca39f45eca6c4c085e9eb0fc70aec025 ]
    
    The tpm2_get_cc_attrs_tbl() call will result in TPM commands being issued,
    which will need the use of the internal command/response buffer.  But,
    we're issuing this *before* we've waited to make sure that buffer is
    allocated.
    
    This can result in intermittent failures to probe if the hypervisor / TPM
    implementation doesn't respond quickly enough.  I find it fails almost
    every time with an 8 vcpu guest under KVM with software emulated TPM.
    
    To fix it, just move the tpm2_get_cc_attrs_tlb() call after the
    existing code to wait for initialization, which will ensure the buffer
    is allocated.
    
    Fixes: 18b3670d79ae9 ("tpm: ibmvtpm: Add support for TPM2")
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d23e385d8637aa5b93cbb4d11490f9a637c77ee
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jun 29 16:30:19 2020 +0200

    nvme: fix a crash in nvme_mpath_add_disk
    
    [ Upstream commit 72d447113bb751ded97b2e2c38f886e4a4139082 ]
    
    For private namespaces ns->head_disk is NULL, so add a NULL check
    before updating the BDI capabilities.
    
    Fixes: b2ce4d90690b ("nvme-multipath: set bdi capabilities once")
    Reported-by: Avinash M N <Avinash.M.N@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2cb0c5635ecf7d8f2bde9971edbe00a0b8b8536
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Fri Jun 26 10:46:29 2020 -0700

    nvme: fix identify error status silent ignore
    
    [ Upstream commit ea43d9709f727e728e933a8157a7a7ca1a868281 ]
    
    Commit 59c7c3caaaf8 intended to only silently ignore non retry-able
    errors (DNR bit set) such that we can still identify misbehaving
    controllers, and in the other hand propagate retry-able errors (DNR bit
    cleared) so we don't wrongly abandon a namespace just because it happens
    to be temporarily inaccessible.
    
    The goal remains the same as the original commit where this was
    introduced but unfortunately had the logic backwards.
    
    Fixes: 59c7c3caaaf8 ("nvme: fix possible hang when ns scanning fails during error recovery")
    Reported-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a17104c8f4885de5de6734f0b6ec3b95c98a501
Author: Paul Aurich <paul@darkrain42.org>
Date:   Fri Jun 26 12:58:09 2020 -0700

    SMB3: Honor 'posix' flag for multiuser mounts
    
    [ Upstream commit 5391b8e1b7b7e5cfa2dd4ffdc4b8c6b64dfd1866 ]
    
    The flag from the primary tcon needs to be copied into the volume info
    so that cifs_get_tcon will try to enable extensions on the per-user
    tcon. At that point, since posix extensions must have already been
    enabled on the superblock, don't try to needlessly adjust the mount
    flags.
    
    Fixes: ce558b0e17f8 ("smb3: Add posix create context for smb3.11 posix mounts")
    Fixes: b326614ea215 ("smb3: allow "posix" mount option to enable new SMB311 protocol extensions")
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 967ad7f15d93d48ac7c840cfee0d9c84a7353a0d
Author: Hou Tao <houtao1@huawei.com>
Date:   Mon Jun 15 12:14:59 2020 +0800

    virtio-blk: free vblk-vqs in error path of virtblk_probe()
    
    [ Upstream commit e7eea44eefbdd5f0345a0a8b80a3ca1c21030d06 ]
    
    Else there will be memory leak if alloc_disk() fails.
    
    Fixes: 6a27b656fc02 ("block: virtio-blk: support multi virt queues per virtio-blk device")
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86f7b210e58ea88fc07791552e4527744f65c858
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Mon Jun 29 14:00:32 2020 +0800

    drm: sun4i: hdmi: Remove extra HPD polling
    
    [ Upstream commit bda8eaa6dee7525f4dac950810a85a88bf6c2ba0 ]
    
    The HPD sense mechanism in Allwinner's old HDMI encoder hardware is more
    or less an input-only GPIO. Other GPIO-based HPD implementations
    directly return the current state, instead of polling for a specific
    state and returning the other if that times out.
    
    Remove the I/O polling from sun4i_hdmi_connector_detect() and directly
    return a known state based on the current reading. This also gets rid
    of excessive CPU usage by kworker as reported on Stack Exchange [1] and
    Armbian forums [2].
    
     [1] https://superuser.com/questions/1515001/debian-10-buster-on-cubietruck-with-bug-in-sun4i-drm-hdmi
     [2] https://forum.armbian.com/topic/14282-headless-systems-and-sun4i_drm_hdmi-a10a20/
    
    Fixes: 9c5681011a0c ("drm/sun4i: Add HDMI support")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200629060032.24134-1-wens@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec9c3e85f931d5a01884141ba62f6ff544e49275
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Tue Jun 23 21:01:19 2020 -0400

    nfsd: fix nfsdfs inode reference count leak
    
    [ Upstream commit bf2654017e0268cc83dc88d56f0e67ff4406631d ]
    
    I don't understand this code well, but  I'm seeing a warning about a
    still-referenced inode on unmount, and every other similar filesystem
    does a dput() here.
    
    Fixes: e8a79fb14f6b ("nfsd: add nfsd/clients directory")
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3db67b863df3d8fdb563f05338e763e2621b2e2
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Tue Jun 23 16:00:33 2020 -0400

    nfsd4: fix nfsdfs reference count loop
    
    [ Upstream commit 681370f4b00af0fcc65bbfb9f82de526ab7ceb0a ]
    
    We don't drop the reference on the nfsdfs filesystem with
    mntput(nn->nfsd_mnt) until nfsd_exit_net(), but that won't be called
    until the nfsd module's unloaded, and we can't unload the module as long
    as there's a reference on nfsdfs.  So this prevents module unloading.
    
    Fixes: 2c830dd7209b ("nfsd: persist nfsd filesystem across mounts")
    Reported-and-Tested-by:  Luo Xiaogang <lxgrxd@163.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b39002a3cd4fa18cb4d813472f7e5b67c5481b40
Author: Dien Pham <dien.pham.ry@renesas.com>
Date:   Thu Jun 25 20:38:19 2020 +0900

    thermal/drivers/rcar_gen3: Fix undefined temperature if negative
    
    [ Upstream commit 5f8f06425a0dcdad7bedbb77e67f5c65ab4dacfc ]
    
    As description for DIV_ROUND_CLOSEST in file include/linux/kernel.h.
      "Result is undefined for negative divisors if the dividend variable
       type is unsigned and for negative dividends if the divisor variable
       type is unsigned."
    
    In current code, the FIXPT_DIV uses DIV_ROUND_CLOSEST but has not
    checked sign of divisor before using. It makes undefined temperature
    value in case the value is negative.
    
    This patch fixes to satisfy DIV_ROUND_CLOSEST description
    and fix bug too. Note that the variable name "reg" is not good
    because it should be the same type as rcar_gen3_thermal_read().
    However, it's better to rename the "reg" in a further patch as
    cleanup.
    
    Signed-off-by: Van Do <van.do.xw@renesas.com>
    Signed-off-by: Dien Pham <dien.pham.ry@renesas.com>
    [shimoda: minor fixes, add Fixes tag]
    Fixes: 564e73d283af ("thermal: rcar_gen3_thermal: Add R-Car Gen3 thermal driver")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Niklas Soderlund <niklas.soderlund+renesas@ragnatech.se>
    Tested-by: Niklas Soderlund <niklas.soderlund+renesas@ragnatech.se>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1593085099-2057-1-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 012cd99d2f8ffe793fb6f9ff6630cf4df4c979e2
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Mon May 25 09:59:01 2020 +0800

    thermal/drivers/sprd: Fix return value of sprd_thm_probe()
    
    [ Upstream commit b4147917ad4ff2c755e01a7ca296b14030d2d507 ]
    
    When call function devm_platform_ioremap_resource(), we should use IS_ERR()
    to check the return value and return PTR_ERR() if failed.
    
    Fixes: 554fdbaf19b1 ("thermal: sprd: Add Spreadtrum thermal driver support")
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1590371941-25430-1-git-send-email-yangtiezhu@loongson.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fda331c68b79f162a3fa17f45f5f76fc49b3d3e9
Author: Michael Kao <michael.kao@mediatek.com>
Date:   Mon Mar 23 20:15:35 2020 +0800

    thermal/drivers/mediatek: Fix bank number settings on mt8183
    
    [ Upstream commit 14533a5a6c12e8d7de79d309d4085bf186058fe1 ]
    
    MT8183_NUM_ZONES should be set to 1
    because MT8183 doesn't have multiple banks.
    
    Fixes: a4ffe6b52d27 ("thermal: mediatek: add support for MT8183")
    Signed-off-by: Michael Kao <michael.kao@mediatek.com>
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200323121537.22697-6-michael.kao@mediatek.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0376dddf54afbd28c27765aadf0afb299d6be32e
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jun 19 17:30:41 2020 +0300

    scsi: qla2xxx: Fix a condition in qla2x00_find_all_fabric_devs()
    
    [ Upstream commit 1fc98aaf7f85fadcca57c4a86ef17e1940cad2d3 ]
    
    This code doesn't make sense unless the correct "fcport" was found.
    
    Link: https://lore.kernel.org/r/20200619143041.GD267142@mwanda
    Fixes: 9dd9686b1419 ("scsi: qla2xxx: Add changes for devloss timeout in driver")
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: Shyam Sundar <ssundar@marvell.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60a2b9ed5eed5604ff82624f1fff0e3a027b94a8
Author: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
Date:   Thu Jun 25 13:32:42 2020 +0900

    hwmon: (acpi_power_meter) Fix potential memory leak in acpi_power_meter_add()
    
    [ Upstream commit 8b97f9922211c44a739c5cbd9502ecbb9f17f6d1 ]
    
    Although it rarely happens, we should call free_capabilities()
    if error happens after read_capabilities() to free allocated strings.
    
    Fixes: de584afa5e188 ("hwmon driver for ACPI 4.0 power meters")
    Signed-off-by: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
    Link: https://lore.kernel.org/r/20200625043242.31175-1-misono.tomohiro@jp.fujitsu.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 870a1a42d3edc00384eacea48664ced73bbfee05
Author: Chu Lin <linchuyuan@google.com>
Date:   Tue Jun 23 22:13:08 2020 +0000

    hwmon: (max6697) Make sure the OVERT mask is set correctly
    
    [ Upstream commit 016983d138cbe99a5c0aaae0103ee88f5300beb3 ]
    
    Per the datasheet for max6697, OVERT mask and ALERT mask are different.
    For example, the 7th bit of OVERT is the local channel but for alert
    mask, the 6th bit is the local channel. Therefore, we can't apply the
    same mask for both registers. In addition to that, the max6697 driver
    is supposed to be compatibale with different models. I manually went over
    all the listed chips and made sure all chip types have the same layout.
    
    Testing;
        mask value of 0x9 should map to 0x44 for ALERT and 0x84 for OVERT.
        I used iotool to read the reg value back to verify. I only tested this
        change on max6581.
    
    Reference:
    https://datasheets.maximintegrated.com/en/ds/MAX6581.pdf
    https://datasheets.maximintegrated.com/en/ds/MAX6697.pdf
    https://datasheets.maximintegrated.com/en/ds/MAX6699.pdf
    
    Signed-off-by: Chu Lin <linchuyuan@google.com>
    Fixes: 5372d2d71c46e ("hwmon: Driver for Maxim MAX6697 and compatibles")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0552819824bb442879cf430418aa39123afd9196
Author: KP Singh <kpsingh@google.com>
Date:   Mon Jun 22 00:21:35 2020 +0200

    security: Fix hook iteration and default value for inode_copy_up_xattr
    
    [ Upstream commit 23e390cdbe6f85827a43d38f9288dcd3066fa376 ]
    
    inode_copy_up_xattr returns 0 to indicate the acceptance of the xattr
    and 1 to reject it. If the LSM does not know about the xattr, it's
    expected to return -EOPNOTSUPP, which is the correct default value for
    this hook. BPF LSM, currently, uses 0 as the default value and thereby
    falsely allows all overlay fs xattributes to be copied up.
    
    The iteration logic is also updated from the "bail-on-fail"
    call_int_hook to continue on the non-decisive -EOPNOTSUPP and bail out
    on other values.
    
    Fixes: 98e828a0650f ("security: Refactor declaration of LSM hooks")
    Signed-off-by: KP Singh <kpsingh@google.com>
    Signed-off-by: James Morris <jmorris@namei.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1be3cdfdb91076268fa09efaf9caa1e1a5b684de
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Jun 24 01:51:37 2020 +0530

    cxgb4: fix SGE queue dump destination buffer context
    
    [ Upstream commit 1992ded5d111997877a9a25205976d8d03c46814 ]
    
    The data in destination buffer is expected to be be parsed in big
    endian. So, use the right context.
    
    Fixes following sparse warning:
    cudbg_lib.c:2041:44: warning: incorrect type in assignment (different
    base types)
    cudbg_lib.c:2041:44:    expected unsigned long long [usertype]
    cudbg_lib.c:2041:44:    got restricted __be64 [usertype]
    
    Fixes: 736c3b94474e ("cxgb4: collect egress and ingress SGE queue contexts")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25dacd6b785e22a3f36ede2ce1eb5c0501fda061
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Jun 24 01:51:36 2020 +0530

    cxgb4: use correct type for all-mask IP address comparison
    
    [ Upstream commit f286dd8eaad5a2758750f407ab079298e0bcc8a5 ]
    
    Use correct type to check for all-mask exact match IP addresses.
    
    Fixes following sparse warnings due to big endian value checks
    against 0xffffffff in is_addr_all_mask():
    cxgb4_filter.c:977:25: warning: restricted __be32 degrades to integer
    cxgb4_filter.c:983:37: warning: restricted __be32 degrades to integer
    cxgb4_filter.c:984:37: warning: restricted __be32 degrades to integer
    cxgb4_filter.c:985:37: warning: restricted __be32 degrades to integer
    cxgb4_filter.c:986:37: warning: restricted __be32 degrades to integer
    
    Fixes: 3eb8b62d5a26 ("cxgb4: add support to create hash-filters via tc-flower offload")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17cafbec7ab4bc464835899cad759ac4aab7394b
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Jun 24 01:51:35 2020 +0530

    cxgb4: fix endian conversions for L4 ports in filters
    
    [ Upstream commit 63b53b0b99cd5f2d9754a21eda2ed8e706646cc9 ]
    
    The source and destination L4 ports in filter offload need to be
    in CPU endian. They will finally be converted to Big Endian after
    all operations are done and before giving them to hardware. The
    L4 ports for NAT are expected to be passed as a byte stream TCB.
    So, treat them as such.
    
    Fixes following sparse warnings in several places:
    cxgb4_tc_flower.c:159:33: warning: cast from restricted __be16
    cxgb4_tc_flower.c:159:33: warning: incorrect type in argument 1 (different
    base types)
    cxgb4_tc_flower.c:159:33:    expected unsigned short [usertype] val
    cxgb4_tc_flower.c:159:33:    got restricted __be16 [usertype] dst
    
    Fixes: dca4faeb812f ("cxgb4: Add LE hash collision bug fix path in LLD driver")
    Fixes: 62488e4b53ae ("cxgb4: add basic tc flower offload support")
    Fixes: 557ccbf9dfa8 ("cxgb4: add tc flower support for L3/L4 rewrite")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abd09b405239cef399474cc5c2830e5a11ea0a33
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Jun 24 01:51:34 2020 +0530

    cxgb4: parse TC-U32 key values and masks natively
    
    [ Upstream commit 27f78cb245abdb86735529c13b0a579f57829e71 ]
    
    TC-U32 passes all keys values and masks in __be32 format. The parser
    already expects this and hence pass the value and masks in __be32
    natively to the parser.
    
    Fixes following sparse warnings in several places:
    cxgb4_tc_u32.c:57:21: warning: incorrect type in assignment (different base
    types)
    cxgb4_tc_u32.c:57:21:    expected unsigned int [usertype] val
    cxgb4_tc_u32.c:57:21:    got restricted __be32 [usertype] val
    cxgb4_tc_u32_parse.h:48:24: warning: cast to restricted __be32
    
    Fixes: 2e8aad7bf203 ("cxgb4: add parser to translate u32 filters to internal spec")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1b8cec69440792d3d9c3eb36148c0a9a512cc22
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Jun 24 01:51:33 2020 +0530

    cxgb4: use unaligned conversion for fetching timestamp
    
    [ Upstream commit 589b1c9c166dce120e27b32a83a78f55464a7ef9 ]
    
    Use get_unaligned_be64() to fetch the timestamp needed for ns_to_ktime()
    conversion.
    
    Fixes following sparse warning:
    sge.c:3282:43: warning: cast to restricted __be64
    
    Fixes: a456950445a0 ("cxgb4: time stamping interface for PTP")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bc5d139bd606880d692d0fedf6ee117c2e1ccae
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sun Jun 21 13:46:25 2020 +0000

    hsr: avoid to create proc file after unregister
    
    [ Upstream commit de0083c7ed7dba036d1ed6e012157649d45313c8 ]
    
    When an interface is being deleted, "/proc/net/dev_snmp6/<interface name>"
    is deleted.
    The function for this is addrconf_ifdown() in the addrconf_notify() and
    it is called by notification, which is NETDEV_UNREGISTER.
    But, if NETDEV_CHANGEMTU is triggered after NETDEV_UNREGISTER,
    this proc file will be created again.
    This recreated proc file will be deleted by netdev_wati_allrefs().
    Before netdev_wait_allrefs() is called, creating a new HSR interface
    routine can be executed and It tries to create a proc file but it will
    find an un-deleted proc file.
    At this point, it warns about it.
    
    To avoid this situation, it can use ->dellink() instead of
    ->ndo_uninit() to release resources because ->dellink() is called
    before NETDEV_UNREGISTER.
    So, a proc file will not be recreated.
    
    Test commands
        ip link add dummy0 type dummy
        ip link add dummy1 type dummy
        ip link set dummy0 mtu 1300
    
        #SHELL1
        while :
        do
            ip link add hsr0 type hsr slave1 dummy0 slave2 dummy1
        done
    
        #SHELL2
        while :
        do
            ip link del hsr0
        done
    
    Splat looks like:
    [ 9888.980852][ T2752] proc_dir_entry 'dev_snmp6/hsr0' already registered
    [ 9888.981797][    C2] WARNING: CPU: 2 PID: 2752 at fs/proc/generic.c:372 proc_register+0x2d5/0x430
    [ 9888.981798][    C2] Modules linked in: hsr dummy veth openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv6x
    [ 9888.981814][    C2] CPU: 2 PID: 2752 Comm: ip Tainted: G        W         5.8.0-rc1+ #616
    [ 9888.981815][    C2] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [ 9888.981816][    C2] RIP: 0010:proc_register+0x2d5/0x430
    [ 9888.981818][    C2] Code: fc ff df 48 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 65 01 00 00 49 8b b5 e0 00 00 00 48 89 ea 40
    [ 9888.981819][    C2] RSP: 0018:ffff8880628dedf0 EFLAGS: 00010286
    [ 9888.981821][    C2] RAX: dffffc0000000008 RBX: ffff888028c69170 RCX: ffffffffaae09a62
    [ 9888.981822][    C2] RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffff88806c9f75ac
    [ 9888.981823][    C2] RBP: ffff888028c693f4 R08: ffffed100d9401bd R09: ffffed100d9401bd
    [ 9888.981824][    C2] R10: ffffffffaddf406f R11: 0000000000000001 R12: ffff888028c69308
    [ 9888.981825][    C2] R13: ffff8880663584c8 R14: dffffc0000000000 R15: ffffed100518d27e
    [ 9888.981827][    C2] FS:  00007f3876b3b0c0(0000) GS:ffff88806c800000(0000) knlGS:0000000000000000
    [ 9888.981828][    C2] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 9888.981829][    C2] CR2: 00007f387601a8c0 CR3: 000000004101a002 CR4: 00000000000606e0
    [ 9888.981830][    C2] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 9888.981831][    C2] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 9888.981832][    C2] Call Trace:
    [ 9888.981833][    C2]  ? snmp6_seq_show+0x180/0x180
    [ 9888.981834][    C2]  proc_create_single_data+0x7c/0xa0
    [ 9888.981835][    C2]  snmp6_register_dev+0xb0/0x130
    [ 9888.981836][    C2]  ipv6_add_dev+0x4b7/0xf60
    [ 9888.981837][    C2]  addrconf_notify+0x684/0x1ca0
    [ 9888.981838][    C2]  ? __mutex_unlock_slowpath+0xd0/0x670
    [ 9888.981839][    C2]  ? kasan_unpoison_shadow+0x30/0x40
    [ 9888.981840][    C2]  ? wait_for_completion+0x250/0x250
    [ 9888.981841][    C2]  ? inet6_ifinfo_notify+0x100/0x100
    [ 9888.981842][    C2]  ? dropmon_net_event+0x227/0x410
    [ 9888.981843][    C2]  ? notifier_call_chain+0x90/0x160
    [ 9888.981844][    C2]  ? inet6_ifinfo_notify+0x100/0x100
    [ 9888.981845][    C2]  notifier_call_chain+0x90/0x160
    [ 9888.981846][    C2]  register_netdevice+0xbe5/0x1070
    [ ... ]
    
    Reported-by: syzbot+1d51c8b74efa4c44adeb@syzkaller.appspotmail.com
    Fixes: e0a4b99773d3 ("hsr: use upper/lower device infrastructure")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2744c058cee72a3d21eedc04fa8fe902f371ab86
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Thu Apr 30 17:37:02 2020 +0000

    hsr: remove hsr interface if all slaves are removed
    
    [ Upstream commit 34a9c361dd480041d790fff3d6ea58513c8769e8 ]
    
    When all hsr slave interfaces are removed, hsr interface doesn't work.
    At that moment, it's fine to remove an unused hsr interface automatically
    for saving resources.
    That's a common behavior of virtual interfaces.
    
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b984d8616e26d3d356bbf99d963e78c306bfd503
Author: Dave Chinner <dchinner@redhat.com>
Date:   Tue Jun 16 08:57:43 2020 -0700

    xfs: fix use-after-free on CIL context on shutdown
    
    [ Upstream commit c7f87f3984cfa1e6d32806a715f35c5947ad9c09 ]
    
    xlog_wait() on the CIL context can reference a freed context if the
    waiter doesn't get scheduled before the CIL context is freed. This
    can happen when a task is on the hard throttle and the CIL push
    aborts due to a shutdown. This was detected by generic/019:
    
    thread 1                        thread 2
    
    __xfs_trans_commit
     xfs_log_commit_cil
      <CIL size over hard throttle limit>
      xlog_wait
       schedule
                                    xlog_cil_push_work
                                    wake_up_all
                                    <shutdown aborts commit>
                                    xlog_cil_committed
                                    kmem_free
    
       remove_wait_queue
        spin_lock_irqsave --> UAF
    
    Fix it by moving the wait queue to the CIL rather than keeping it in
    in the CIL context that gets freed on push completion. Because the
    wait queue is now independent of the CIL context and we might have
    multiple contexts in flight at once, only wake the waiters on the
    push throttle when the context we are pushing is over the hard
    throttle size threshold.
    
    Fixes: 0e7ab7efe7745 ("xfs: Throttle commits on delayed background CIL push")
    Reported-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f173c884c58c01b568020c138434fc04f327bbb
Author: Mark Zhang <markz@mellanox.com>
Date:   Sun Jun 21 14:00:00 2020 +0300

    RDMA/counter: Query a counter before release
    
    [ Upstream commit c1d869d64a1955817c4d6fff08ecbbe8e59d36f8 ]
    
    Query a dynamically-allocated counter before release it, to update it's
    hwcounters and log all of them into history data. Otherwise all values of
    these hwcounters will be lost.
    
    Fixes: f34a55e497e8 ("RDMA/core: Get sum value of all counters when perform a sysfs stat read")
    Link: https://lore.kernel.org/r/20200621110000.56059-1-leon@kernel.org
    Signed-off-by: Mark Zhang <markz@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36d75d6f166d0cb4d7fee41953a8752b39470890
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Fri Jun 5 13:23:45 2020 +0800

    irqchip/gic-v4.1: Use readx_poll_timeout_atomic() to fix sleep in atomic
    
    [ Upstream commit 31dbb6b1d025506b3b8b8b74e9b697df47b9f696 ]
    
    readx_poll_timeout() can sleep if @sleep_us is specified by the caller,
    and is therefore unsafe to be used inside the atomic context, which is
    this case when we use it to poll the GICR_VPENDBASER.Dirty bit in
    irq_set_vcpu_affinity() callback.
    
    Let's convert to its atomic version instead which helps to get the v4.1
    board back to life!
    
    Fixes: 96806229ca03 ("irqchip/gic-v4.1: Add support for VPENDBASER's Dirty+Valid signaling")
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200605052345.1494-1-yuzenghui@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47ea457d8f565975ca10a4298960b2d58849c6e0
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Thu Jun 18 12:16:52 2020 +0300

    enetc: Fix HW_VLAN_CTAG_TX|RX toggling
    
    [ Upstream commit 9deba33f1b7266a3870c9da31f787b605748fc0c ]
    
    VLAN tag insertion/extraction offload is correctly
    activated at probe time but deactivation of this feature
    (i.e. via ethtool) is broken.  Toggling works only for
    Tx/Rx ring 0 of a PF, and is ignored for the other rings,
    including the VF rings.
    To fix this, the existing VLAN offload toggling code
    was extended to all the rings assigned to a netdevice,
    instead of the default ring 0 (likely a leftover from the
    early validation days of this feature).  And the code was
    moved to the common set_features() function to fix toggling
    for the VF driver too.
    
    Fixes: d4fd0404c1c9 ("enetc: Introduce basic PF and VF ENETC ethernet drivers")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 769ba7c42b60afb1df8359a5107437b59aa6dbda
Author: Po Liu <Po.Liu@nxp.com>
Date:   Fri May 1 08:53:17 2020 +0800

    net: enetc: add hw tc hw offload features for PSPF capability
    
    [ Upstream commit 79e499829f3ff5b8f70c87baf1b03ebb3401a3e4 ]
    
    This patch is to let ethtool enable/disable the tc flower offload
    features. Hardware ENETC has the feature of PSFP which is for per-stream
    policing. When enable the tc hw offloading feature, driver would enable
    the IEEE 802.1Qci feature. It is only set the register enable bit for
    this feature not enable for any entry of per stream filtering and stream
    gate or stream identify but get how much capabilities for each feature.
    
    Signed-off-by: Po Liu <Po.Liu@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f551d6b720b424618352247c51794bd0c61faaf
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Jun 17 12:08:57 2020 +0200

    mptcp: drop MP_JOIN request sock on syn cookies
    
    [ Upstream commit 9e365ff576b7c1623bbc5ef31ec652c533e2f65e ]
    
    Currently any MPTCP socket using syn cookies will fallback to
    TCP at 3rd ack time. In case of MP_JOIN requests, the RFC mandate
    closing the child and sockets, but the existing error paths
    do not handle the syncookie scenario correctly.
    
    Address the issue always forcing the child shutdown in case of
    MP_JOIN fallback.
    
    Fixes: ae2dd7164943 ("mptcp: handle tcp fallback when using syn cookies")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c7b840d4a76b922dba5fee5c6f3d454128f9357
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jun 17 15:46:33 2020 +0100

    rxrpc: Fix afs large storage transmission performance drop
    
    [ Upstream commit 02c28dffb13abbaaedece1e4a6493b48ad3f913a ]
    
    Commit 2ad6691d988c, which moved the modification of the status annotation
    for a packet in the Tx buffer prior to the retransmission moved the state
    clearance, but managed to lose the bit that set it to UNACK.
    
    Consequently, if a retransmission occurs, the packet is accidentally
    changed to the ACK state (ie. 0) by masking it off, which means that the
    packet isn't counted towards the tally of newly-ACK'd packets if it gets
    hard-ACK'd.  This then prevents the congestion control algorithm from
    recovering properly.
    
    Fix by reinstating the change of state to UNACK.
    
    Spotted by the generic/460 xfstest.
    
    Fixes: 2ad6691d988c ("rxrpc: Fix race between incoming ACK parser and retransmitter")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ff4e67e6a57cedf016da52c317aac4289b82b68
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 15 18:49:39 2020 +0100

    btrfs: fix RWF_NOWAIT writes blocking on extent locks and waiting for IO
    
    [ Upstream commit 5dbb75ed6900048e146247b6325742d92c892548 ]
    
    A RWF_NOWAIT write is not supposed to wait on filesystem locks that can be
    held for a long time or for ongoing IO to complete.
    
    However when calling check_can_nocow(), if the inode has prealloc extents
    or has the NOCOW flag set, we can block on extent (file range) locks
    through the call to btrfs_lock_and_flush_ordered_range(). Such lock can
    take a significant amount of time to be available. For example, a fiemap
    task may be running, and iterating through the entire file range checking
    all extents and doing backref walking to determine if they are shared,
    or a readpage operation may be in progress.
    
    Also at btrfs_lock_and_flush_ordered_range(), called by check_can_nocow(),
    after locking the file range we wait for any existing ordered extent that
    is in progress to complete. Another operation that can take a significant
    amount of time and defeat the purpose of RWF_NOWAIT.
    
    So fix this by trying to lock the file range and if it's currently locked
    return -EAGAIN to user space. If we are able to lock the file range without
    waiting and there is an ordered extent in the range, return -EAGAIN as
    well, instead of waiting for it to complete. Finally, don't bother trying
    to lock the snapshot lock of the root when attempting a RWF_NOWAIT write,
    as that is only important for buffered writes.
    
    Fixes: edf064e7c6fec3 ("btrfs: nowait aio support")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2adf80a59ff9dcb638ab454f32abdf44a58bb3b7
Author: Chen Tao <chentao107@huawei.com>
Date:   Mon Jun 8 09:48:59 2020 +0800

    drm/msm/dpu: fix error return code in dpu_encoder_init
    
    [ Upstream commit aa472721c8dbe1713cf510f56ffbc56ae9e14247 ]
    
    Fix to return negative error code -ENOMEM with the use of
    ERR_PTR from dpu_encoder_init.
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Chen Tao <chentao107@huawei.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bb188598c21d7d4ac131bd0d82144f1a78d849d
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Jun 30 12:39:05 2020 -0600

    io_uring: use signal based task_work running
    
    [ Upstream commit ce593a6c480a22acba08795be313c0c6d49dd35d ]
    
    Since 5.7, we've been using task_work to trigger async running of
    requests in the context of the original task. This generally works
    great, but there's a case where if the task is currently blocked
    in the kernel waiting on a condition to become true, it won't process
    task_work. Even though the task is woken, it just checks whatever
    condition it's waiting on, and goes back to sleep if it's still false.
    
    This is a problem if that very condition only becomes true when that
    task_work is run. An example of that is the task registering an eventfd
    with io_uring, and it's now blocked waiting on an eventfd read. That
    read could depend on a completion event, and that completion event
    won't get trigged until task_work has been run.
    
    Use the TWA_SIGNAL notification for task_work, so that we ensure that
    the task always runs the work when queued.
    
    Cc: stable@vger.kernel.org # v5.7
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bd164efa696df4eb9b4dbac277e658f11ec6f76
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Tue Jun 30 17:32:54 2020 +0200

    task_work: teach task_work_add() to do signal_wake_up()
    
    [ Upstream commit e91b48162332480f5840902268108bb7fb7a44c7 ]
    
    So that the target task will exit the wait_event_interruptible-like
    loop and call task_work_run() asap.
    
    The patch turns "bool notify" into 0,TWA_RESUME,TWA_SIGNAL enum, the
    new TWA_SIGNAL flag implies signal_wake_up().  However, it needs to
    avoid the race with recalc_sigpending(), so the patch also adds the
    new JOBCTL_TASK_WORK bit included in JOBCTL_PENDING_MASK.
    
    TODO: once this patch is merged we need to change all current users
    of task_work_add(notify = true) to use TWA_RESUME.
    
    Cc: stable@vger.kernel.org # v5.7
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e043df8fa89456146f7cc2d5fe8e7f6c822aa5b
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Jun 8 16:48:43 2020 +1000

    crypto: af_alg - fix use-after-free in af_alg_accept() due to bh_lock_sock()
    
    commit 34c86f4c4a7be3b3e35aa48bd18299d4c756064d upstream.
    
    The locking in af_alg_release_parent is broken as the BH socket
    lock can only be taken if there is a code-path to handle the case
    where the lock is owned by process-context.  Instead of adding
    such handling, we can fix this by changing the ref counts to
    atomic_t.
    
    This patch also modifies the main refcnt to include both normal
    and nokey sockets.  This way we don't have to fudge the nokey
    ref count when a socket changes from nokey to normal.
    
    Credits go to Mauricio Faria de Oliveira who diagnosed this bug
    and sent a patch for it:
    
    https://lore.kernel.org/linux-crypto/20200605161657.535043-1-mfo@canonical.com/
    
    Reported-by: Brian Moyles <bmoyles@netflix.com>
    Reported-by: Mauricio Faria de Oliveira <mfo@canonical.com>
    Fixes: 37f96694cf73 ("crypto: af_alg - Use bh_lock_sock in...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1f35fdfb7f08963827cff05b60ecb4be81bdc43
Author: James Bottomley <James.Bottomley@HansenPartnership.com>
Date:   Thu May 28 11:10:57 2020 -0700

    tpm: Fix TIS locality timeout problems
    
    commit 7862840219058436b80029a0263fd1ef065fb1b3 upstream.
    
    It has been reported that some TIS based TPMs are giving unexpected
    errors when using the O_NONBLOCK path of the TPM device. The problem
    is that some TPMs don't like it when you get and then relinquish a
    locality (as the tpm_try_get_ops()/tpm_put_ops() pair does) without
    sending a command.  This currently happens all the time in the
    O_NONBLOCK write path. Fix this by moving the tpm_try_get_ops()
    further down the code to after the O_NONBLOCK determination is made.
    This is safe because the priv->buffer_mutex still protects the priv
    state being modified.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=206275
    Fixes: d23d12484307 ("tpm: fix invalid locking in NONBLOCKING mode")
    Reported-by: Mario Limonciello <Mario.Limonciello@dell.com>
    Tested-by: Alex Guzman <alex@guzman.io>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fc1eb90e7e0f956924a3c46e8431a54e93ac64c
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Tue Jun 23 00:20:22 2020 +0300

    selftests: tpm: Use /bin/sh instead of /bin/bash
    
    commit 377ff83083c953dd58c5a030b3c9b5b85d8cc727 upstream.
    
    It's better to use /bin/sh instead of /bin/bash in order to run the tests
    in the BusyBox shell.
    
    Fixes: 6ea3dfe1e073 ("selftests: add TPM 2.0 tests")
    Cc: stable@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Cc: linux-kselftest@vger.kernel.org
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0773c3f2e96bb7a49e020009857c900f1580757
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Tue Jun 23 00:20:20 2020 +0300

    Revert "tpm: selftest: cleanup after unseal with wrong auth/policy test"
    
    commit 5be206eaac9a68992fc3b06fb5dd5634e323de86 upstream.
    
    The reverted commit illegitly uses tpm2-tools. External dependencies are
    absolutely forbidden from these tests. There is also the problem that
    clearing is not necessarily wanted behavior if the test/target computer is
    not used only solely for testing.
    
    Fixes: a9920d3bad40 ("tpm: selftest: cleanup after unseal with wrong auth/policy test")
    Cc: Tadeusz Struk <tadeusz.struk@intel.com>
    Cc: stable@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Cc: linux-kselftest@vger.kernel.org
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 364537ca00165a84f450a2fc8dc9abd4f8ee05b9
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Jun 2 15:47:39 2020 -0700

    kgdb: Avoid suspicious RCU usage warning
    
    [ Upstream commit 440ab9e10e2e6e5fd677473ee6f9e3af0f6904d6 ]
    
    At times when I'm using kgdb I see a splat on my console about
    suspicious RCU usage.  I managed to come up with a case that could
    reproduce this that looked like this:
    
      WARNING: suspicious RCU usage
      5.7.0-rc4+ #609 Not tainted
      -----------------------------
      kernel/pid.c:395 find_task_by_pid_ns() needs rcu_read_lock() protection!
    
      other info that might help us debug this:
    
        rcu_scheduler_active = 2, debug_locks = 1
      3 locks held by swapper/0/1:
       #0: ffffff81b6b8e988 (&dev->mutex){....}-{3:3}, at: __device_attach+0x40/0x13c
       #1: ffffffd01109e9e8 (dbg_master_lock){....}-{2:2}, at: kgdb_cpu_enter+0x20c/0x7ac
       #2: ffffffd01109ea90 (dbg_slave_lock){....}-{2:2}, at: kgdb_cpu_enter+0x3ec/0x7ac
    
      stack backtrace:
      CPU: 7 PID: 1 Comm: swapper/0 Not tainted 5.7.0-rc4+ #609
      Hardware name: Google Cheza (rev3+) (DT)
      Call trace:
       dump_backtrace+0x0/0x1b8
       show_stack+0x1c/0x24
       dump_stack+0xd4/0x134
       lockdep_rcu_suspicious+0xf0/0x100
       find_task_by_pid_ns+0x5c/0x80
       getthread+0x8c/0xb0
       gdb_serial_stub+0x9d4/0xd04
       kgdb_cpu_enter+0x284/0x7ac
       kgdb_handle_exception+0x174/0x20c
       kgdb_brk_fn+0x24/0x30
       call_break_hook+0x6c/0x7c
       brk_handler+0x20/0x5c
       do_debug_exception+0x1c8/0x22c
       el1_sync_handler+0x3c/0xe4
       el1_sync+0x7c/0x100
       rpmh_rsc_probe+0x38/0x420
       platform_drv_probe+0x94/0xb4
       really_probe+0x134/0x300
       driver_probe_device+0x68/0x100
       __device_attach_driver+0x90/0xa8
       bus_for_each_drv+0x84/0xcc
       __device_attach+0xb4/0x13c
       device_initial_probe+0x18/0x20
       bus_probe_device+0x38/0x98
       device_add+0x38c/0x420
    
    If I understand properly we should just be able to blanket kgdb under
    one big RCU read lock and the problem should go away.  We'll add it to
    the beast-of-a-function known as kgdb_cpu_enter().
    
    With this I no longer get any splats and things seem to work fine.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200602154729.v2.1.I70e0d4fd46d5ed2aaf0c98a355e8e1b7a5bb7e4e@changeid
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3221449a3044cbe0d1b56076481ee046ddad21c
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Thu Jun 25 12:37:11 2020 +0300

    io_uring: fix current->mm NULL dereference on exit
    
    [ Upstream commit d60b5fbc1ce8210759b568da49d149b868e7c6d3 ]
    
    Don't reissue requests from io_iopoll_reap_events(), the task may not
    have mm, which ends up with NULL. It's better to kill everything off on
    exit anyway.
    
    [  677.734670] RIP: 0010:io_iopoll_complete+0x27e/0x630
    ...
    [  677.734679] Call Trace:
    [  677.734695]  ? __send_signal+0x1f2/0x420
    [  677.734698]  ? _raw_spin_unlock_irqrestore+0x24/0x40
    [  677.734699]  ? send_signal+0xf5/0x140
    [  677.734700]  io_iopoll_getevents+0x12f/0x1a0
    [  677.734702]  io_iopoll_reap_events.part.0+0x5e/0xa0
    [  677.734703]  io_ring_ctx_wait_and_kill+0x132/0x1c0
    [  677.734704]  io_uring_release+0x20/0x30
    [  677.734706]  __fput+0xcd/0x230
    [  677.734707]  ____fput+0xe/0x10
    [  677.734709]  task_work_run+0x67/0xa0
    [  677.734710]  do_exit+0x35d/0xb70
    [  677.734712]  do_group_exit+0x43/0xa0
    [  677.734713]  get_signal+0x140/0x900
    [  677.734715]  do_signal+0x37/0x780
    [  677.734717]  ? enqueue_hrtimer+0x41/0xb0
    [  677.734718]  ? recalibrate_cpu_khz+0x10/0x10
    [  677.734720]  ? ktime_get+0x3e/0xa0
    [  677.734721]  ? lapic_next_deadline+0x26/0x30
    [  677.734723]  ? tick_program_event+0x4d/0x90
    [  677.734724]  ? __hrtimer_get_next_event+0x4d/0x80
    [  677.734726]  __prepare_exit_to_usermode+0x126/0x1c0
    [  677.734741]  prepare_exit_to_usermode+0x9/0x40
    [  677.734742]  idtentry_exit_cond_rcu+0x4c/0x60
    [  677.734743]  sysvec_reschedule_ipi+0x92/0x160
    [  677.734744]  ? asm_sysvec_reschedule_ipi+0xa/0x20
    [  677.734745]  asm_sysvec_reschedule_ipi+0x12/0x20
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f25c0742c9f707f102d6796fb09c330ea1c56cc0
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Wed Jun 24 01:53:12 2020 -0700

    nvme-multipath: fix bogus request queue reference put
    
    [ Upstream commit c31244669f57963b6ce133a5555b118fc50aec95 ]
    
    The mpath disk node takes a reference on the request mpath
    request queue when adding live path to the mpath gendisk.
    However if we connected to an inaccessible path device_add_disk
    is not called, so if we disconnect and remove the mpath gendisk
    we endup putting an reference on the request queue that was
    never taken [1].
    
    Fix that to check if we ever added a live path (using
    NVME_NS_HEAD_HAS_DISK flag) and if not, clear the disk->queue
    reference.
    
    [1]:
    ------------[ cut here ]------------
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 1 PID: 1372 at lib/refcount.c:28 refcount_warn_saturate+0xa6/0xf0
    CPU: 1 PID: 1372 Comm: nvme Tainted: G           O      5.7.0-rc2+ #3
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-1ubuntu1 04/01/2014
    RIP: 0010:refcount_warn_saturate+0xa6/0xf0
    RSP: 0018:ffffb29e8053bdc0 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: ffff8b7a2f4fc060 RCX: 0000000000000007
    RDX: 0000000000000007 RSI: 0000000000000092 RDI: ffff8b7a3ec99980
    RBP: ffff8b7a2f4fc000 R08: 00000000000002e1 R09: 0000000000000004
    R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000000
    R13: fffffffffffffff2 R14: ffffb29e8053bf08 R15: ffff8b7a320e2da0
    FS:  00007f135d4ca800(0000) GS:ffff8b7a3ec80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00005651178c0c30 CR3: 000000003b650005 CR4: 0000000000360ee0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     disk_release+0xa2/0xc0
     device_release+0x28/0x80
     kobject_put+0xa5/0x1b0
     nvme_put_ns_head+0x26/0x70 [nvme_core]
     nvme_put_ns+0x30/0x60 [nvme_core]
     nvme_remove_namespaces+0x9b/0xe0 [nvme_core]
     nvme_do_delete_ctrl+0x43/0x5c [nvme_core]
     nvme_sysfs_delete.cold+0x8/0xd [nvme_core]
     kernfs_fop_write+0xc1/0x1a0
     vfs_write+0xb6/0x1a0
     ksys_write+0x5f/0xe0
     do_syscall_64+0x52/0x1a0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Reported-by: Anton Eidelman <anton@lightbitslabs.com>
    Tested-by: Anton Eidelman <anton@lightbitslabs.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f8501233c8a487a1175b297b6bf26191a3310a2
Author: Anton Eidelman <anton@lightbitslabs.com>
Date:   Wed Jun 24 01:53:11 2020 -0700

    nvme-multipath: fix deadlock due to head->lock
    
    [ Upstream commit d8a22f85609fadb46ba699e0136cc3ebdeebff79 ]
    
    In the following scenario scan_work and ana_work will deadlock:
    
    When scan_work calls nvme_mpath_add_disk() this holds ana_lock
    and invokes nvme_parse_ana_log(), which may issue IO
    in device_add_disk() and hang waiting for an accessible path.
    
    While nvme_mpath_set_live() only called when nvme_state_is_live(),
    a transition may cause NVME_SC_ANA_TRANSITION and requeue the IO.
    
    Since nvme_mpath_set_live() holds ns->head->lock, an ana_work on
    ANY ctrl will not be able to complete nvme_mpath_set_live()
    on the same ns->head, which is required in order to update
    the new accessible path and remove NVME_NS_ANA_PENDING..
    Therefore IO never completes: deadlock [1].
    
    Fix:
    Move device_add_disk out of the head->lock and protect it with an
    atomic test_and_set for a new NVME_NS_HEAD_HAS_DISK bit.
    
    [1]:
    kernel: INFO: task kworker/u8:2:160 blocked for more than 120 seconds.
    kernel:       Tainted: G           OE     5.3.5-050305-generic #201910071830
    kernel: "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    kernel: kworker/u8:2    D    0   160      2 0x80004000
    kernel: Workqueue: nvme-wq nvme_ana_work [nvme_core]
    kernel: Call Trace:
    kernel:  __schedule+0x2b9/0x6c0
    kernel:  schedule+0x42/0xb0
    kernel:  schedule_preempt_disabled+0xe/0x10
    kernel:  __mutex_lock.isra.0+0x182/0x4f0
    kernel:  __mutex_lock_slowpath+0x13/0x20
    kernel:  mutex_lock+0x2e/0x40
    kernel:  nvme_update_ns_ana_state+0x22/0x60 [nvme_core]
    kernel:  nvme_update_ana_state+0xca/0xe0 [nvme_core]
    kernel:  nvme_parse_ana_log+0xa1/0x180 [nvme_core]
    kernel:  nvme_read_ana_log+0x76/0x100 [nvme_core]
    kernel:  nvme_ana_work+0x15/0x20 [nvme_core]
    kernel:  process_one_work+0x1db/0x380
    kernel:  worker_thread+0x4d/0x400
    kernel:  kthread+0x104/0x140
    kernel:  ret_from_fork+0x35/0x40
    kernel: INFO: task kworker/u8:4:439 blocked for more than 120 seconds.
    kernel:       Tainted: G           OE     5.3.5-050305-generic #201910071830
    kernel: "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    kernel: kworker/u8:4    D    0   439      2 0x80004000
    kernel: Workqueue: nvme-wq nvme_scan_work [nvme_core]
    kernel: Call Trace:
    kernel:  __schedule+0x2b9/0x6c0
    kernel:  schedule+0x42/0xb0
    kernel:  io_schedule+0x16/0x40
    kernel:  do_read_cache_page+0x438/0x830
    kernel:  read_cache_page+0x12/0x20
    kernel:  read_dev_sector+0x27/0xc0
    kernel:  read_lba+0xc1/0x220
    kernel:  efi_partition+0x1e6/0x708
    kernel:  check_partition+0x154/0x244
    kernel:  rescan_partitions+0xae/0x280
    kernel:  __blkdev_get+0x40f/0x560
    kernel:  blkdev_get+0x3d/0x140
    kernel:  __device_add_disk+0x388/0x480
    kernel:  device_add_disk+0x13/0x20
    kernel:  nvme_mpath_set_live+0x119/0x140 [nvme_core]
    kernel:  nvme_update_ns_ana_state+0x5c/0x60 [nvme_core]
    kernel:  nvme_mpath_add_disk+0xbe/0x100 [nvme_core]
    kernel:  nvme_validate_ns+0x396/0x940 [nvme_core]
    kernel:  nvme_scan_work+0x256/0x390 [nvme_core]
    kernel:  process_one_work+0x1db/0x380
    kernel:  worker_thread+0x4d/0x400
    kernel:  kthread+0x104/0x140
    kernel:  ret_from_fork+0x35/0x40
    
    Fixes: 0d0b660f214d ("nvme: add ANA support")
    Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a07af8d43cbe5235b7a7e9b8f92e8875f0ec616
Author: Anton Eidelman <anton@lightbitslabs.com>
Date:   Wed Jun 24 01:53:09 2020 -0700

    nvme-multipath: fix deadlock between ana_work and scan_work
    
    [ Upstream commit 489dd102a2c7c94d783a35f9412eb085b8da1aa4 ]
    
    When scan_work calls nvme_mpath_add_disk() this holds ana_lock
    and invokes nvme_parse_ana_log(), which may issue IO
    in device_add_disk() and hang waiting for an accessible path.
    While nvme_mpath_set_live() only called when nvme_state_is_live(),
    a transition may cause NVME_SC_ANA_TRANSITION and requeue the IO.
    
    In order to recover and complete the IO ana_work on the same ctrl
    should be able to update the path state and remove NVME_NS_ANA_PENDING.
    
    The deadlock occurs because scan_work keeps holding ana_lock,
    so ana_work hangs [1].
    
    Fix:
    Now nvme_mpath_add_disk() uses nvme_parse_ana_log() to obtain a copy
    of the ANA group desc, and then calls nvme_update_ns_ana_state() without
    holding ana_lock.
    
    [1]:
    kernel: Workqueue: nvme-wq nvme_scan_work [nvme_core]
    kernel: Call Trace:
    kernel:  __schedule+0x2b9/0x6c0
    kernel:  schedule+0x42/0xb0
    kernel:  io_schedule+0x16/0x40
    kernel:  do_read_cache_page+0x438/0x830
    kernel:  read_cache_page+0x12/0x20
    kernel:  read_dev_sector+0x27/0xc0
    kernel:  read_lba+0xc1/0x220
    kernel:  efi_partition+0x1e6/0x708
    kernel:  check_partition+0x154/0x244
    kernel:  rescan_partitions+0xae/0x280
    kernel:  __blkdev_get+0x40f/0x560
    kernel:  blkdev_get+0x3d/0x140
    kernel:  __device_add_disk+0x388/0x480
    kernel:  device_add_disk+0x13/0x20
    kernel:  nvme_mpath_set_live+0x119/0x140 [nvme_core]
    kernel:  nvme_update_ns_ana_state+0x5c/0x60 [nvme_core]
    kernel:  nvme_set_ns_ana_state+0x1e/0x30 [nvme_core]
    kernel:  nvme_parse_ana_log+0xa1/0x180 [nvme_core]
    kernel:  nvme_mpath_add_disk+0x47/0x90 [nvme_core]
    kernel:  nvme_validate_ns+0x396/0x940 [nvme_core]
    kernel:  nvme_scan_work+0x24f/0x380 [nvme_core]
    kernel:  process_one_work+0x1db/0x380
    kernel:  worker_thread+0x249/0x400
    kernel:  kthread+0x104/0x140
    
    kernel: Workqueue: nvme-wq nvme_ana_work [nvme_core]
    kernel: Call Trace:
    kernel:  __schedule+0x2b9/0x6c0
    kernel:  schedule+0x42/0xb0
    kernel:  schedule_preempt_disabled+0xe/0x10
    kernel:  __mutex_lock.isra.0+0x182/0x4f0
    kernel:  ? __switch_to_asm+0x34/0x70
    kernel:  ? select_task_rq_fair+0x1aa/0x5c0
    kernel:  ? kvm_sched_clock_read+0x11/0x20
    kernel:  ? sched_clock+0x9/0x10
    kernel:  __mutex_lock_slowpath+0x13/0x20
    kernel:  mutex_lock+0x2e/0x40
    kernel:  nvme_read_ana_log+0x3a/0x100 [nvme_core]
    kernel:  nvme_ana_work+0x15/0x20 [nvme_core]
    kernel:  process_one_work+0x1db/0x380
    kernel:  worker_thread+0x4d/0x400
    kernel:  kthread+0x104/0x140
    kernel:  ? process_one_work+0x380/0x380
    kernel:  ? kthread_park+0x80/0x80
    kernel:  ret_from_fork+0x35/0x40
    
    Fixes: 0d0b660f214d ("nvme: add ANA support")
    Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efa9d39a256c622221d3efe44e07b413210f4060
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Wed Jun 24 01:53:08 2020 -0700

    nvme: fix possible deadlock when I/O is blocked
    
    [ Upstream commit 3b4b19721ec652ad2c4fe51dfbe5124212b5f581 ]
    
    Revert fab7772bfbcf ("nvme-multipath: revalidate nvme_ns_head gendisk
    in nvme_validate_ns")
    
    When adding a new namespace to the head disk (via nvme_mpath_set_live)
    we will see partition scan which triggers I/O on the mpath device node.
    This process will usually be triggered from the scan_work which holds
    the scan_lock. If I/O blocks (if we got ana change currently have only
    available paths but none are accessible) this can deadlock on the head
    disk bd_mutex as both partition scan I/O takes it, and head disk revalidation
    takes it to check for resize (also triggered from scan_work on a different
    path). See trace [1].
    
    The mpath disk revalidation was originally added to detect online disk
    size change, but this is no longer needed since commit cb224c3af4df
    ("nvme: Convert to use set_capacity_revalidate_and_notify") which already
    updates resize info without unnecessarily revalidating the disk (the
    mpath disk doesn't even implement .revalidate_disk fop).
    
    [1]:
    --
    kernel: INFO: task kworker/u65:9:494 blocked for more than 241 seconds.
    kernel:       Tainted: G           OE     5.3.5-050305-generic #201910071830
    kernel: "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    kernel: kworker/u65:9   D    0   494      2 0x80004000
    kernel: Workqueue: nvme-wq nvme_scan_work [nvme_core]
    kernel: Call Trace:
    kernel:  __schedule+0x2b9/0x6c0
    kernel:  schedule+0x42/0xb0
    kernel:  schedule_preempt_disabled+0xe/0x10
    kernel:  __mutex_lock.isra.0+0x182/0x4f0
    kernel:  __mutex_lock_slowpath+0x13/0x20
    kernel:  mutex_lock+0x2e/0x40
    kernel:  revalidate_disk+0x63/0xa0
    kernel:  __nvme_revalidate_disk+0xfe/0x110 [nvme_core]
    kernel:  nvme_revalidate_disk+0xa4/0x160 [nvme_core]
    kernel:  ? evict+0x14c/0x1b0
    kernel:  revalidate_disk+0x2b/0xa0
    kernel:  nvme_validate_ns+0x49/0x940 [nvme_core]
    kernel:  ? blk_mq_free_request+0xd2/0x100
    kernel:  ? __nvme_submit_sync_cmd+0xbe/0x1e0 [nvme_core]
    kernel:  nvme_scan_work+0x24f/0x380 [nvme_core]
    kernel:  process_one_work+0x1db/0x380
    kernel:  worker_thread+0x249/0x400
    kernel:  kthread+0x104/0x140
    kernel:  ? process_one_work+0x380/0x380
    kernel:  ? kthread_park+0x80/0x80
    kernel:  ret_from_fork+0x1f/0x40
    ...
    kernel: INFO: task kworker/u65:1:2630 blocked for more than 241 seconds.
    kernel:       Tainted: G           OE     5.3.5-050305-generic #201910071830
    kernel: "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    kernel: kworker/u65:1   D    0  2630      2 0x80004000
    kernel: Workqueue: nvme-wq nvme_scan_work [nvme_core]
    kernel: Call Trace:
    kernel:  __schedule+0x2b9/0x6c0
    kernel:  schedule+0x42/0xb0
    kernel:  io_schedule+0x16/0x40
    kernel:  do_read_cache_page+0x438/0x830
    kernel:  ? __switch_to_asm+0x34/0x70
    kernel:  ? file_fdatawait_range+0x30/0x30
    kernel:  read_cache_page+0x12/0x20
    kernel:  read_dev_sector+0x27/0xc0
    kernel:  read_lba+0xc1/0x220
    kernel:  ? kmem_cache_alloc_trace+0x19c/0x230
    kernel:  efi_partition+0x1e6/0x708
    kernel:  ? vsnprintf+0x39e/0x4e0
    kernel:  ? snprintf+0x49/0x60
    kernel:  check_partition+0x154/0x244
    kernel:  rescan_partitions+0xae/0x280
    kernel:  __blkdev_get+0x40f/0x560
    kernel:  blkdev_get+0x3d/0x140
    kernel:  __device_add_disk+0x388/0x480
    kernel:  device_add_disk+0x13/0x20
    kernel:  nvme_mpath_set_live+0x119/0x140 [nvme_core]
    kernel:  nvme_update_ns_ana_state+0x5c/0x60 [nvme_core]
    kernel:  nvme_set_ns_ana_state+0x1e/0x30 [nvme_core]
    kernel:  nvme_parse_ana_log+0xa1/0x180 [nvme_core]
    kernel:  ? nvme_update_ns_ana_state+0x60/0x60 [nvme_core]
    kernel:  nvme_mpath_add_disk+0x47/0x90 [nvme_core]
    kernel:  nvme_validate_ns+0x396/0x940 [nvme_core]
    kernel:  ? blk_mq_free_request+0xd2/0x100
    kernel:  nvme_scan_work+0x24f/0x380 [nvme_core]
    kernel:  process_one_work+0x1db/0x380
    kernel:  worker_thread+0x249/0x400
    kernel:  kthread+0x104/0x140
    kernel:  ? process_one_work+0x380/0x380
    kernel:  ? kthread_park+0x80/0x80
    kernel:  ret_from_fork+0x1f/0x40
    --
    
    Fixes: fab7772bfbcf ("nvme-multipath: revalidate nvme_ns_head gendisk
    in nvme_validate_ns")
    Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4803e5102d64fc91fca3056eea2023c16982e6d4
Author: Keith Busch <kbusch@kernel.org>
Date:   Thu Apr 9 09:09:04 2020 -0700

    nvme-multipath: set bdi capabilities once
    
    [ Upstream commit b2ce4d90690bd29ce5b554e203cd03682dd59697 ]
    
    The queues' backing device info capabilities don't change with each
    namespace revalidation. Set it only when each path's request_queue
    is initially added to a multipath queue.
    
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fa233839ad9b9df853466942d4e8d16c02e1160
Author: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
Date:   Tue Jun 23 19:34:06 2020 +0800

    io_uring: fix io_sq_thread no schedule when busy
    
    [ Upstream commit b772f07add1c0b22e02c0f1e96f647560679d3a9 ]
    
    When the user consumes and generates sqe at a fast rate,
    io_sqring_entries can always get sqe, and ret will not be equal to -EBUSY,
    so that io_sq_thread will never call cond_resched or schedule, and then
    we will get the following system error prompt:
    
    rcu: INFO: rcu_sched self-detected stall on CPU
    or
    watchdog: BUG: soft lockup-CPU#23 stuck for 112s! [io_uring-sq:1863]
    
    This patch checks whether need to call cond_resched() by checking
    the need_resched() function every cycle.
    
    Suggested-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40a6a9fa77edd17c45dc34c4f258bb1c900522bd
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Tue Mar 31 05:57:23 2020 -0400

    s390/debug: avoid kernel warning on too large number of pages
    
    [ Upstream commit 827c4913923e0b441ba07ba4cc41e01181102303 ]
    
    When specifying insanely large debug buffers a kernel warning is
    printed. The debug code does handle the error gracefully, though.
    Instead of duplicating the check let us silence the warning to
    avoid crashes when panic_on_warn is used.
    
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64e980587e49aad4d1e3fea8eb262d3b3151e063
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Mar 24 16:08:47 2020 -0400

    tools lib traceevent: Handle __attribute__((user)) in field names
    
    [ Upstream commit 74621d929d944529a5e2878a84f48bfa6fb69a66 ]
    
    Commit c61f13eaa1ee1 ("gcc-plugins: Add structleak for more stack
    initialization") added "__attribute__((user))" to the user when
    stackleak detector is enabled. This now appears in the field format of
    system call trace events for system calls that have user buffers. The
    "__attribute__((user))" breaks the parsing in libtraceevent. That needs
    to be handled.
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Jaewon Kim <jaewon31.kim@samsung.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: linux-mm@kvack.org
    Cc: linux-trace-devel@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200324200956.663647256@goodmis.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc4650c987e20e35f50dd67b0f515e159a3c563a
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Mar 24 16:08:46 2020 -0400

    tools lib traceevent: Add append() function helper for appending strings
    
    [ Upstream commit 27d4d336f2872193e90ee5450559e1699fae0f6d ]
    
    There's several locations that open code realloc and strcat() to append
    text to strings. Add an append() function that takes a delimiter and a
    string to append to another string.
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Jaewon Lim <jaewon31.kim@samsung.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: linux-mm@kvack.org
    Cc: linux-trace-devel@vger.kernel.org
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Link: http://lore.kernel.org/lkml/20200324200956.515118403@goodmis.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c424f6d0af716110dd7d78e89afce4d99f16815
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Fri Jun 12 11:52:10 2020 +0800

    usb: usbtest: fix missing kfree(dev->buf) in usbtest_disconnect
    
    [ Upstream commit 28ebeb8db77035e058a510ce9bd17c2b9a009dba ]
    
    BUG: memory leak
    unreferenced object 0xffff888055046e00 (size 256):
      comm "kworker/2:9", pid 2570, jiffies 4294942129 (age 1095.500s)
      hex dump (first 32 bytes):
        00 70 04 55 80 88 ff ff 18 bb 5a 81 ff ff ff ff  .p.U......Z.....
        f5 96 78 81 ff ff ff ff 37 de 8e 81 ff ff ff ff  ..x.....7.......
      backtrace:
        [<00000000d121dccf>] kmemleak_alloc_recursive
    include/linux/kmemleak.h:43 [inline]
        [<00000000d121dccf>] slab_post_alloc_hook mm/slab.h:586 [inline]
        [<00000000d121dccf>] slab_alloc_node mm/slub.c:2786 [inline]
        [<00000000d121dccf>] slab_alloc mm/slub.c:2794 [inline]
        [<00000000d121dccf>] kmem_cache_alloc_trace+0x15e/0x2d0 mm/slub.c:2811
        [<000000005c3c3381>] kmalloc include/linux/slab.h:555 [inline]
        [<000000005c3c3381>] usbtest_probe+0x286/0x19d0
    drivers/usb/misc/usbtest.c:2790
        [<000000001cec6910>] usb_probe_interface+0x2bd/0x870
    drivers/usb/core/driver.c:361
        [<000000007806c118>] really_probe+0x48d/0x8f0 drivers/base/dd.c:551
        [<00000000a3308c3e>] driver_probe_device+0xfc/0x2a0 drivers/base/dd.c:724
        [<000000003ef66004>] __device_attach_driver+0x1b6/0x240
    drivers/base/dd.c:831
        [<00000000eee53e97>] bus_for_each_drv+0x14e/0x1e0 drivers/base/bus.c:431
        [<00000000bb0648d0>] __device_attach+0x1f9/0x350 drivers/base/dd.c:897
        [<00000000838b324a>] device_initial_probe+0x1a/0x20 drivers/base/dd.c:944
        [<0000000030d501c1>] bus_probe_device+0x1e1/0x280 drivers/base/bus.c:491
        [<000000005bd7adef>] device_add+0x131d/0x1c40 drivers/base/core.c:2504
        [<00000000a0937814>] usb_set_configuration+0xe84/0x1ab0
    drivers/usb/core/message.c:2030
        [<00000000e3934741>] generic_probe+0x6a/0xe0 drivers/usb/core/generic.c:210
        [<0000000098ade0f1>] usb_probe_device+0x90/0xd0
    drivers/usb/core/driver.c:266
        [<000000007806c118>] really_probe+0x48d/0x8f0 drivers/base/dd.c:551
        [<00000000a3308c3e>] driver_probe_device+0xfc/0x2a0 drivers/base/dd.c:724
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Kyungtae Kim <kt0755@gmail.com>
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Link: https://lore.kernel.org/r/20200612035210.20494-1-qiang.zhang@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c1b16ab629515d4471982ac58ed31f9b57c45c9
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jun 11 21:57:00 2020 +0100

    rxrpc: Fix race between incoming ACK parser and retransmitter
    
    [ Upstream commit 2ad6691d988c0c611362ddc2aad89e0fb50e3261 ]
    
    There's a race between the retransmission code and the received ACK parser.
    The problem is that the retransmission loop has to drop the lock under
    which it is iterating through the transmission buffer in order to transmit
    a packet, but whilst the lock is dropped, the ACK parser can crank the Tx
    window round and discard the packets from the buffer.
    
    The retransmission code then updated the annotations for the wrong packet
    and a later retransmission thought it had to retransmit a packet that
    wasn't there, leading to a NULL pointer dereference.
    
    Fix this by:
    
     (1) Moving the annotation change to before we drop the lock prior to
         transmission.  This means we can't vary the annotation depending on
         the outcome of the transmission, but that's fine - we'll retransmit
         again later if it failed now.
    
     (2) Skipping the packet if the skb pointer is NULL.
    
    The following oops was seen:
    
            BUG: kernel NULL pointer dereference, address: 000000000000002d
            Workqueue: krxrpcd rxrpc_process_call
            RIP: 0010:rxrpc_get_skb+0x14/0x8a
            ...
            Call Trace:
             rxrpc_resend+0x331/0x41e
             ? get_vtime_delta+0x13/0x20
             rxrpc_process_call+0x3c0/0x4ac
             process_one_work+0x18f/0x27f
             worker_thread+0x1a3/0x247
             ? create_worker+0x17d/0x17d
             kthread+0xe6/0xeb
             ? kthread_delayed_work_timer_fn+0x83/0x83
             ret_from_fork+0x1f/0x30
    
    Fixes: 248f219cb8bc ("rxrpc: Rewrite the data and ack handling code")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97d732e7cbc05f3b48a065808ad8d8323a232705
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Jun 3 18:03:22 2020 +0300

    io_uring: fix {SQ,IO}POLL with unsupported opcodes
    
    [ Upstream commit 3232dd02af65f2d01be641120d2a710176b0c7a7 ]
    
    IORING_SETUP_IOPOLL is defined only for read/write, other opcodes should
    be disallowed, otherwise it'll get an error as below. Also refuse
    open/close with SQPOLL, as the polling thread wouldn't know which file
    table to use.
    
    RIP: 0010:io_iopoll_getevents+0x111/0x5a0
    Call Trace:
     ? _raw_spin_unlock_irqrestore+0x24/0x40
     ? do_send_sig_info+0x64/0x90
     io_iopoll_reap_events.part.0+0x5e/0xa0
     io_ring_ctx_wait_and_kill+0x132/0x1c0
     io_uring_release+0x20/0x30
     __fput+0xcd/0x230
     ____fput+0xe/0x10
     task_work_run+0x67/0xa0
     do_exit+0x353/0xb10
     ? handle_mm_fault+0xd4/0x200
     ? syscall_trace_enter+0x18c/0x2c0
     do_group_exit+0x43/0xa0
     __x64_sys_exit_group+0x18/0x20
     do_syscall_64+0x60/0x1e0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    [axboe: allow provide/remove buffers and files update]
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a76d4f62c6b8be374bda91dc490fd257384210ad
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Mon Jun 1 21:46:03 2020 -0700

    mm, dump_page(): do not crash with invalid mapping pointer
    
    [ Upstream commit 002ae7057069538aa3afd500f6f60a429cb948b2 ]
    
    We have seen a following problem on a RPi4 with 1G RAM:
    
        BUG: Bad page state in process systemd-hwdb  pfn:35601
        page:ffff7e0000d58040 refcount:15 mapcount:131221 mapping:efd8fe765bc80080 index:0x1 compound_mapcount: -32767
        Unable to handle kernel paging request at virtual address efd8fe765bc80080
        Mem abort info:
          ESR = 0x96000004
          Exception class = DABT (current EL), IL = 32 bits
          SET = 0, FnV = 0
          EA = 0, S1PTW = 0
        Data abort info:
          ISV = 0, ISS = 0x00000004
          CM = 0, WnR = 0
        [efd8fe765bc80080] address between user and kernel address ranges
        Internal error: Oops: 96000004 [#1] SMP
        Modules linked in: btrfs libcrc32c xor xor_neon zlib_deflate raid6_pq mmc_block xhci_pci xhci_hcd usbcore sdhci_iproc sdhci_pltfm sdhci mmc_core clk_raspberrypi gpio_raspberrypi_exp pcie_brcmstb bcm2835_dma gpio_regulator phy_generic fixed sg scsi_mod efivarfs
        Supported: No, Unreleased kernel
        CPU: 3 PID: 408 Comm: systemd-hwdb Not tainted 5.3.18-8-default #1 SLE15-SP2 (unreleased)
        Hardware name: raspberrypi rpi/rpi, BIOS 2020.01 02/21/2020
        pstate: 40000085 (nZcv daIf -PAN -UAO)
        pc : __dump_page+0x268/0x368
        lr : __dump_page+0xc4/0x368
        sp : ffff000012563860
        x29: ffff000012563860 x28: ffff80003ddc4300
        x27: 0000000000000010 x26: 000000000000003f
        x25: ffff7e0000d58040 x24: 000000000000000f
        x23: efd8fe765bc80080 x22: 0000000000020095
        x21: efd8fe765bc80080 x20: ffff000010ede8b0
        x19: ffff7e0000d58040 x18: ffffffffffffffff
        x17: 0000000000000001 x16: 0000000000000007
        x15: ffff000011689708 x14: 3030386362353637
        x13: 6566386466653a67 x12: 6e697070616d2031
        x11: 32323133313a746e x10: 756f6370616d2035
        x9 : ffff00001168a840 x8 : ffff00001077a670
        x7 : 000000000000013d x6 : ffff0000118a43b5
        x5 : 0000000000000001 x4 : ffff80003dd9e2c8
        x3 : ffff80003dd9e2c8 x2 : 911c8d7c2f483500
        x1 : dead000000000100 x0 : efd8fe765bc80080
        Call trace:
         __dump_page+0x268/0x368
         bad_page+0xd4/0x168
         check_new_page_bad+0x80/0xb8
         rmqueue_bulk.constprop.26+0x4d8/0x788
         get_page_from_freelist+0x4d4/0x1228
         __alloc_pages_nodemask+0x134/0xe48
         alloc_pages_vma+0x198/0x1c0
         do_anonymous_page+0x1a4/0x4d8
         __handle_mm_fault+0x4e8/0x560
         handle_mm_fault+0x104/0x1e0
         do_page_fault+0x1e8/0x4c0
         do_translation_fault+0xb0/0xc0
         do_mem_abort+0x50/0xb0
         el0_da+0x24/0x28
        Code: f9401025 8b8018a0 9a851005 17ffffca (f94002a0)
    
    Besides the underlying issue with page->mapping containing a bogus value
    for some reason, we can see that __dump_page() crashed by trying to read
    the pointer at mapping->host, turning a recoverable warning into full
    Oops.
    
    It can be expected that when page is reported as bad state for some
    reason, the pointers there should not be trusted blindly.
    
    So this patch treats all data in __dump_page() that depends on
    page->mapping as lava, using probe_kernel_read_strict().  Ideally this
    would include the dentry->d_parent recursively, but that would mean
    changing printk handler for %pd.  Chances of reaching the dentry
    printing part with an initially bogus mapping pointer should be rather
    low, though.
    
    Also prefix printing mapping->a_ops with a description of what is being
    printed.  In case the value is bogus, %ps will print raw value instead
    of the symbol name and then it's not obvious at all that it's printing
    a_ops.
    
    Reported-by: Petr Tesarik <ptesarik@suse.cz>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Link: http://lkml.kernel.org/r/20200331165454.12263-1-vbabka@suse.cz
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01a4f3754a62173bc6511f836054fa0686538878
Author: Qian Cai <cai@lca.pw>
Date:   Mon Jun 1 21:45:57 2020 -0700

    mm/slub: fix stack overruns with SLUB_STATS
    
    [ Upstream commit a68ee0573991e90af2f1785db309206408bad3e5 ]
    
    There is no need to copy SLUB_STATS items from root memcg cache to new
    memcg cache copies.  Doing so could result in stack overruns because the
    store function only accepts 0 to clear the stat and returns an error for
    everything else while the show method would print out the whole stat.
    
    Then, the mismatch of the lengths returns from show and store methods
    happens in memcg_propagate_slab_attrs():
    
            else if (root_cache->max_attr_size < ARRAY_SIZE(mbuf))
                    buf = mbuf;
    
    max_attr_size is only 2 from slab_attr_store(), then, it uses mbuf[64]
    in show_stat() later where a bounch of sprintf() would overrun the stack
    variable.  Fix it by always allocating a page of buffer to be used in
    show_stat() if SLUB_STATS=y which should only be used for debug purpose.
    
      # echo 1 > /sys/kernel/slab/fs_cache/shrink
      BUG: KASAN: stack-out-of-bounds in number+0x421/0x6e0
      Write of size 1 at addr ffffc900256cfde0 by task kworker/76:0/53251
    
      Hardware name: HPE ProLiant DL385 Gen10/ProLiant DL385 Gen10, BIOS A40 07/10/2019
      Workqueue: memcg_kmem_cache memcg_kmem_cache_create_func
      Call Trace:
        number+0x421/0x6e0
        vsnprintf+0x451/0x8e0
        sprintf+0x9e/0xd0
        show_stat+0x124/0x1d0
        alloc_slowpath_show+0x13/0x20
        __kmem_cache_create+0x47a/0x6b0
    
      addr ffffc900256cfde0 is located in stack of task kworker/76:0/53251 at offset 0 in frame:
       process_one_work+0x0/0xb90
    
      this frame has 1 object:
       [32, 72) 'lockdep_map'
    
      Memory state around the buggy address:
       ffffc900256cfc80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ffffc900256cfd00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      >ffffc900256cfd80: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
                                                             ^
       ffffc900256cfe00: 00 00 00 00 00 f2 f2 f2 00 00 00 00 00 00 00 00
       ffffc900256cfe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ==================================================================
      Kernel panic - not syncing: stack-protector: Kernel stack is corrupted in: __kmem_cache_create+0x6ac/0x6b0
      Workqueue: memcg_kmem_cache memcg_kmem_cache_create_func
      Call Trace:
        __kmem_cache_create+0x6ac/0x6b0
    
    Fixes: 107dab5c92d5 ("slub: slub-specific propagation changes")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Glauber Costa <glauber@scylladb.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Link: http://lkml.kernel.org/r/20200429222356.4322-1-cai@lca.pw
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91b602b4d59936fe339b9de0ca7b02be7c01b7cb
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Mon Jun 1 21:45:47 2020 -0700

    mm/slub.c: fix corrupted freechain in deactivate_slab()
    
    [ Upstream commit 52f23478081ae0dcdb95d1650ea1e7d52d586829 ]
    
    The slub_debug is able to fix the corrupted slab freelist/page.
    However, alloc_debug_processing() only checks the validity of current
    and next freepointer during allocation path.  As a result, once some
    objects have their freepointers corrupted, deactivate_slab() may lead to
    page fault.
    
    Below is from a test kernel module when 'slub_debug=PUF,kmalloc-128
    slub_nomerge'.  The test kernel corrupts the freepointer of one free
    object on purpose.  Unfortunately, deactivate_slab() does not detect it
    when iterating the freechain.
    
      BUG: unable to handle page fault for address: 00000000123456f8
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 0 P4D 0
      Oops: 0000 [#1] SMP PTI
      ... ...
      RIP: 0010:deactivate_slab.isra.92+0xed/0x490
      ... ...
      Call Trace:
       ___slab_alloc+0x536/0x570
       __slab_alloc+0x17/0x30
       __kmalloc+0x1d9/0x200
       ext4_htree_store_dirent+0x30/0xf0
       htree_dirblock_to_tree+0xcb/0x1c0
       ext4_htree_fill_tree+0x1bc/0x2d0
       ext4_readdir+0x54f/0x920
       iterate_dir+0x88/0x190
       __x64_sys_getdents+0xa6/0x140
       do_syscall_64+0x49/0x170
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Therefore, this patch adds extra consistency check in deactivate_slab().
    Once an object's freepointer is corrupted, all following objects
    starting at this object are isolated.
    
    [akpm@linux-foundation.org: fix build with CONFIG_SLAB_DEBUG=n]
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Joe Jin <joe.jin@oracle.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Link: http://lkml.kernel.org/r/20200331031450.12182-1-dongli.zhang@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77eb6f0e71fa1c4549cf0dd3a92b01141af34cdd
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Thu May 28 13:34:56 2020 +0530

    powerpc/book3s64/kvm: Fix secondary page table walk warning during migration
    
    [ Upstream commit bf8036a4098d1548cdccf9ed5c523ef4e83e3c68 ]
    
    This patch fixes the below warning reported during migration:
    
      find_kvm_secondary_pte called with kvm mmu_lock not held
      CPU: 23 PID: 5341 Comm: qemu-system-ppc Tainted: G        W         5.7.0-rc5-kvm-00211-g9ccf10d6d088 #432
      NIP:  c008000000fe848c LR: c008000000fe8488 CTR: 0000000000000000
      REGS: c000001e19f077e0 TRAP: 0700   Tainted: G        W          (5.7.0-rc5-kvm-00211-g9ccf10d6d088)
      MSR:  9000000000029033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 42222422  XER: 20040000
      CFAR: c00000000012f5ac IRQMASK: 0
      GPR00: c008000000fe8488 c000001e19f07a70 c008000000ffe200 0000000000000039
      GPR04: 0000000000000001 c000001ffc8b4900 0000000000018840 0000000000000007
      GPR08: 0000000000000003 0000000000000001 0000000000000007 0000000000000001
      GPR12: 0000000000002000 c000001fff6d9400 000000011f884678 00007fff70b70000
      GPR16: 00007fff7137cb90 00007fff7dcb4410 0000000000000001 0000000000000000
      GPR20: 000000000ffe0000 0000000000000000 0000000000000001 0000000000000000
      GPR24: 8000000000000000 0000000000000001 c000001e1f67e600 c000001e1fd82410
      GPR28: 0000000000001000 c000001e2e410000 0000000000000fff 0000000000000ffe
      NIP [c008000000fe848c] kvmppc_hv_get_dirty_log_radix+0x2e4/0x340 [kvm_hv]
      LR [c008000000fe8488] kvmppc_hv_get_dirty_log_radix+0x2e0/0x340 [kvm_hv]
      Call Trace:
      [c000001e19f07a70] [c008000000fe8488] kvmppc_hv_get_dirty_log_radix+0x2e0/0x340 [kvm_hv] (unreliable)
      [c000001e19f07b50] [c008000000fd42e4] kvm_vm_ioctl_get_dirty_log_hv+0x33c/0x3c0 [kvm_hv]
      [c000001e19f07be0] [c008000000eea878] kvm_vm_ioctl_get_dirty_log+0x30/0x50 [kvm]
      [c000001e19f07c00] [c008000000edc818] kvm_vm_ioctl+0x2b0/0xc00 [kvm]
      [c000001e19f07d50] [c00000000046e148] ksys_ioctl+0xf8/0x150
      [c000001e19f07da0] [c00000000046e1c8] sys_ioctl+0x28/0x80
      [c000001e19f07dc0] [c00000000003652c] system_call_exception+0x16c/0x240
      [c000001e19f07e20] [c00000000000d070] system_call_common+0xf0/0x278
      Instruction dump:
      7d3a512a 4200ffd0 7ffefb78 4bfffdc4 60000000 3c820000 e8848468 3c620000
      e86384a8 38840010 4800673d e8410018 <0fe00000> 4bfffdd4 60000000 60000000
    
    Reported-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200528080456.87797-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 106ee71633ebea20265d67a89bbd9a8f6cb890ee
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Tue May 5 12:47:16 2020 +0530

    powerpc/kvm/book3s: Add helper to walk partition scoped linux page table.
    
    [ Upstream commit 4b99412ed6972cc77c1f16009e1d00323fcef9ab ]
    
    The locking rules for walking partition scoped table is different from process
    scoped table. Hence add a helper for secondary linux page table walk and also
    add check whether we are holding the right locks.
    
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200505071729.54912-10-aneesh.kumar@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b30ff5f09f0cc68857fd732f7a050260cd08021
Author: Tero Kristo <t-kristo@ti.com>
Date:   Thu May 14 10:37:18 2020 +0300

    soc: ti: omap-prm: use atomic iopoll instead of sleeping one
    
    [ Upstream commit 98ece19f247159a51003796ede7112fef2df5d7f ]
    
    The reset handling APIs for omap-prm can be invoked PM runtime which
    runs in atomic context. For this to work properly, switch to atomic
    iopoll version instead of the current which can sleep. Otherwise,
    this throws a "BUG: scheduling while atomic" warning. Issue is seen
    rather easily when CONFIG_PREEMPT is enabled.
    
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4464672ae9e0e69d0f46af3893302cc3aa41e694
Author: Valentin Schneider <valentin.schneider@arm.com>
Date:   Wed Apr 15 22:05:05 2020 +0100

    sched/debug: Make sd->flags sysctl read-only
    
    [ Upstream commit 9818427c6270a9ce8c52c8621026fe9cebae0f92 ]
    
    Writing to the sysctl of a sched_domain->flags directly updates the value of
    the field, and goes nowhere near update_top_cache_domain(). This means that
    the cached domain pointers can end up containing stale data (e.g. the
    domain pointed to doesn't have the relevant flag set anymore).
    
    Explicit domain walks that check for flags will be affected by
    the write, but this won't be in sync with the cached pointers which will
    still point to the domains that were cached at the last sched_domain
    build.
    
    In other words, writing to this interface is playing a dangerous game. It
    could be made to trigger an update of the cached sched_domain pointers when
    written to, but this does not seem to be worth the trouble. Make it
    read-only.
    
    Signed-off-by: Valentin Schneider <valentin.schneider@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200415210512.805-3-valentin.schneider@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18b1cf2968e1baa883dbdf6adef6213626beaa0f
Author: Guchun Chen <guchun.chen@amd.com>
Date:   Thu Apr 16 23:41:07 2020 +0800

    drm/amdgpu: fix kernel page fault issue by ras recovery on sGPU
    
    [ Upstream commit 12c17b9d62663c14a5343d6742682b3e67280754 ]
    
    When running ras uncorrectable error injection and triggering GPU
    reset on sGPU, below issue is observed. It's caused by the list
    uninitialized when accessing.
    
    [   80.047227] BUG: unable to handle page fault for address: ffffffffc0f4f750
    [   80.047300] #PF: supervisor write access in kernel mode
    [   80.047351] #PF: error_code(0x0003) - permissions violation
    [   80.047404] PGD 12c20e067 P4D 12c20e067 PUD 12c210067 PMD 41c4ee067 PTE 404316061
    [   80.047477] Oops: 0003 [#1] SMP PTI
    [   80.047516] CPU: 7 PID: 377 Comm: kworker/7:2 Tainted: G           OE     5.4.0-rc7-guchchen #1
    [   80.047594] Hardware name: System manufacturer System Product Name/TUF Z370-PLUS GAMING II, BIOS 0411 09/21/2018
    [   80.047888] Workqueue: events amdgpu_ras_do_recovery [amdgpu]
    
    Signed-off-by: Guchun Chen <guchun.chen@amd.com>
    Reviewed-by: John Clements <John.Clements@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c33bf981fab14ffbde2635d6e3d7d0818bac5a8
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Mar 27 15:39:06 2020 +0800

    drm/amdgpu: fix non-pointer dereference for non-RAS supported
    
    [ Upstream commit a9d82d2f91297679cfafd7e61c4bccdca6cd550d ]
    
    Backtrace on gpu recover test on Navi10.
    
    [ 1324.516681] RIP: 0010:amdgpu_ras_set_error_query_ready+0x15/0x20 [amdgpu]
    [ 1324.523778] Code: 4c 89 f7 e8 cd a2 a0 d8 e9 99 fe ff ff 45 31 ff e9 91 fe ff ff 0f 1f 44 00 00 55 48 85 ff 48 89 e5 74 0e 48 8b 87 d8 2b 01 00 <40> 88 b0 38 01 00 00 5d c3 66 90 0f 1f 44 00 00 55 31 c0 48 85 ff
    [ 1324.543452] RSP: 0018:ffffaa1040e4bd28 EFLAGS: 00010286
    [ 1324.549025] RAX: 0000000000000000 RBX: ffff911198b20000 RCX: 0000000000000000
    [ 1324.556217] RDX: 00000000000c0a01 RSI: 0000000000000000 RDI: ffff911198b20000
    [ 1324.563514] RBP: ffffaa1040e4bd28 R08: 0000000000001000 R09: ffff91119d0028c0
    [ 1324.570804] R10: ffffffff9a606b40 R11: 0000000000000000 R12: 0000000000000000
    [ 1324.578413] R13: ffffaa1040e4bd70 R14: ffff911198b20000 R15: 0000000000000000
    [ 1324.586464] FS:  00007f4441cbf540(0000) GS:ffff91119ed80000(0000) knlGS:0000000000000000
    [ 1324.595434] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1324.601345] CR2: 0000000000000138 CR3: 00000003fcdf8004 CR4: 00000000003606e0
    [ 1324.608694] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1324.616303] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 1324.623678] Call Trace:
    [ 1324.626270]  amdgpu_device_gpu_recover+0x6e7/0xc50 [amdgpu]
    [ 1324.632018]  ? seq_printf+0x4e/0x70
    [ 1324.636652]  amdgpu_debugfs_gpu_recover+0x50/0x80 [amdgpu]
    [ 1324.643371]  seq_read+0xda/0x420
    [ 1324.647601]  full_proxy_read+0x5c/0x90
    [ 1324.652426]  __vfs_read+0x1b/0x40
    [ 1324.656734]  vfs_read+0x8e/0x130
    [ 1324.660981]  ksys_read+0xa7/0xe0
    [ 1324.665201]  __x64_sys_read+0x1a/0x20
    [ 1324.669907]  do_syscall_64+0x57/0x1c0
    [ 1324.674517]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [ 1324.680654] RIP: 0033:0x7f44417cf081
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Reviewed-by: John Clements <John.Clements@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50a8cfb0e71644f2882dbfaf93150184094245bd
Author: John Clements <john.clements@amd.com>
Date:   Wed Mar 25 16:01:14 2020 +0800

    drm/amdgpu: disable ras query and iject during gpu reset
    
    [ Upstream commit 61380faa4b4cc577df8a7ff5db5859bac6b351f7 ]
    
    added flag to ras context to indicate if ras query functionality is ready
    
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: John Clements <john.clements@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18ad3ad0b9b35370182ae4a7dbd89a77168df19e
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Mar 23 09:28:34 2020 +0000

    drm/i915/gt: Mark timeline->cacheline as destroyed after rcu grace period
    
    [ Upstream commit 8e87e0139aff59c5961347ab1ef06814f092c439 ]
    
    Since we take advantage of RCU for some i915_active objects, like the
    intel_timeline_cacheline, we need to delay the i915_active_fini until
    after the RCU grace period and we perform the kfree -- that is until
    after all RCU protected readers.
    
    <3> [108.204873] ODEBUG: assert_init not available (active state 0) object type: i915_active hint: __cacheline_active+0x0/0x80 [i915]
    <4> [108.207377] WARNING: CPU: 3 PID: 2342 at lib/debugobjects.c:488 debug_print_object+0x67/0x90
    <4> [108.207400] Modules linked in: vgem snd_hda_codec_hdmi x86_pkg_temp_thermal coretemp crct10dif_pclmul crc32_pclmul snd_hda_intel ghash_clmulni_intel snd_intel_dspcfg snd_hda_codec ax88179_178a snd_hwdep usbnet btusb snd_hda_core btrtl mii btbcm btintel snd_pcm bluetooth ecdh_generic ecc i915 i2c_hid pinctrl_sunrisepoint pinctrl_intel intel_lpss_pci prime_numbers
    <4> [108.207587] CPU: 3 PID: 2342 Comm: gem_exec_parall Tainted: G     U            5.6.0-rc6-CI-Patchwork_17047+ #1
    <4> [108.207609] Hardware name: Google Soraka/Soraka, BIOS MrChromebox-4.10 08/25/2019
    <4> [108.207639] RIP: 0010:debug_print_object+0x67/0x90
    <4> [108.207668] Code: 83 c2 01 8b 4b 14 4c 8b 45 00 89 15 87 d2 8a 02 8b 53 10 4c 89 e6 48 c7 c7 38 2b 32 82 48 8b 14 d5 80 2f 07 82 e8 49 d5 b7 ff <0f> 0b 5b 83 05 c3 f6 22 01 01 5d 41 5c c3 83 05 b8 f6 22 01 01 c3
    <4> [108.207692] RSP: 0018:ffffc90000e7f890 EFLAGS: 00010282
    <4> [108.207723] RAX: 0000000000000000 RBX: ffffc90000e7f8b0 RCX: 0000000000000001
    <4> [108.207747] RDX: 0000000080000001 RSI: ffff88817ada8cb8 RDI: 00000000ffffffff
    <4> [108.207770] RBP: ffffffffa0341cc0 R08: ffff88816b5a8948 R09: 0000000000000000
    <4> [108.207792] R10: 0000000000000000 R11: 0000000000000000 R12: ffffffff82322d54
    <4> [108.207814] R13: ffffffffa0341cc0 R14: ffffffff83df9568 R15: ffff88816064f400
    <4> [108.207839] FS:  00007f437d753700(0000) GS:ffff88817ad80000(0000) knlGS:0000000000000000
    <4> [108.207863] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    <4> [108.207887] CR2: 00007f2ad1fb5000 CR3: 00000001725d8004 CR4: 00000000003606e0
    <4> [108.207907] Call Trace:
    <4> [108.207959]  debug_object_assert_init+0x15c/0x180
    <4> [108.208475]  ? i915_active_acquire_if_busy+0x10/0x50 [i915]
    <4> [108.208513]  ? rcu_read_lock_held+0x4d/0x60
    <4> [108.208970]  i915_active_acquire_if_busy+0x10/0x50 [i915]
    <4> [108.209380]  intel_timeline_read_hwsp+0x81/0x540 [i915]
    <4> [108.210262]  __emit_semaphore_wait+0x45/0x1b0 [i915]
    <4> [108.210726]  ? i915_request_await_dma_fence+0x143/0x560 [i915]
    <4> [108.211156]  i915_request_await_dma_fence+0x28a/0x560 [i915]
    <4> [108.211633]  i915_request_await_object+0x24a/0x3f0 [i915]
    <4> [108.212102]  eb_submit.isra.47+0x58f/0x920 [i915]
    <4> [108.212622]  i915_gem_do_execbuffer+0x1706/0x2c70 [i915]
    <4> [108.213071]  ? i915_gem_execbuffer2_ioctl+0xc0/0x470 [i915]
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200323092841.22240-1-chris@chris-wilson.co.uk
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c4c314991db8b585fdd2a9f3cbf5b9a0fd226c2
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu May 28 22:34:07 2020 +0800

    tipc: Fix NULL pointer dereference in __tipc_sendstream()
    
    [ Upstream commit 4c21daae3dbc9f8536cc18e6e53627821fa2c90c ]
    
    tipc_sendstream() may send zero length packet, then tipc_msg_append()
    do not alloc skb, skb_peek_tail() will get NULL, msg_set_ack_required
    will trigger NULL pointer dereference.
    
    Reported-by: syzbot+8eac6d030e7807c21d32@syzkaller.appspotmail.com
    Fixes: 0a3e060f340d ("tipc: add test for Nagle algorithm effectiveness")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f2773c2c8ebf7a90170a9b9752eeee8193c580b
Author: Tuomas Tynkkynen <tuomas.tynkkynen@iki.fi>
Date:   Sun Jun 21 13:43:26 2020 +0300

    usbnet: smsc95xx: Fix use-after-free after removal
    
    [ Upstream commit b835a71ef64a61383c414d6bf2896d2c0161deca ]
    
    Syzbot reports an use-after-free in workqueue context:
    
    BUG: KASAN: use-after-free in mutex_unlock+0x19/0x40 kernel/locking/mutex.c:737
     mutex_unlock+0x19/0x40 kernel/locking/mutex.c:737
     __smsc95xx_mdio_read drivers/net/usb/smsc95xx.c:217 [inline]
     smsc95xx_mdio_read+0x583/0x870 drivers/net/usb/smsc95xx.c:278
     check_carrier+0xd1/0x2e0 drivers/net/usb/smsc95xx.c:644
     process_one_work+0x777/0xf90 kernel/workqueue.c:2274
     worker_thread+0xa8f/0x1430 kernel/workqueue.c:2420
     kthread+0x2df/0x300 kernel/kthread.c:255
    
    It looks like that smsc95xx_unbind() is freeing the structures that are
    still in use by the concurrently running workqueue callback. Thus switch
    to using cancel_delayed_work_sync() to ensure the work callback really
    is no longer active.
    
    Reported-by: syzbot+29dc7d4ae19b703ff947@syzkaller.appspotmail.com
    Signed-off-by: Tuomas Tynkkynen <tuomas.tynkkynen@iki.fi>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab4e655368f93c8da9d7dcf3e4361254a2095b6f
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Jun 11 17:07:35 2020 +0700

    tipc: fix kernel WARNING in tipc_msg_append()
    
    [ Upstream commit c9aa81faf19115fc2e732e7f210b37bb316987ff ]
    
    syzbot found the following issue:
    
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 check_copy_size include/linux/thread_info.h:150 [inline]
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 copy_from_iter include/linux/uio.h:144 [inline]
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 tipc_msg_append+0x49a/0x5e0 net/tipc/msg.c:242
    Kernel panic - not syncing: panic_on_warn set ...
    
    This happens after commit 5e9eeccc58f3 ("tipc: fix NULL pointer
    dereference in streaming") that tried to build at least one buffer even
    when the message data length is zero... However, it now exposes another
    bug that the 'mss' can be zero and the 'cpy' will be negative, thus the
    above kernel WARNING will appear!
    The zero value of 'mss' is never expected because it means Nagle is not
    enabled for the socket (actually the socket type was 'SOCK_SEQPACKET'),
    so the function 'tipc_msg_append()' must not be called at all. But that
    was in this particular case since the message data length was zero, and
    the 'send <= maxnagle' check became true.
    
    We resolve the issue by explicitly checking if Nagle is enabled for the
    socket, i.e. 'maxnagle != 0' before calling the 'tipc_msg_append()'. We
    also reinforce the function to against such a negative values if any.
    
    Reported-by: syzbot+75139a7d2605236b0b7f@syzkaller.appspotmail.com
    Fixes: c0bceb97db9e ("tipc: add smart nagle feature")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a54c217231f5c8339a90ac91d44b3d410b57ec1
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue May 26 16:38:38 2020 +0700

    tipc: add test for Nagle algorithm effectiveness
    
    [ Upstream commit 0a3e060f340dbe232ffa290c40f879b7f7db595b ]
    
    When streaming in Nagle mode, we try to bundle small messages from user
    as many as possible if there is one outstanding buffer, i.e. not ACK-ed
    by the receiving side, which helps boost up the overall throughput. So,
    the algorithm's effectiveness really depends on when Nagle ACK comes or
    what the specific network latency (RTT) is, compared to the user's
    message sending rate.
    
    In a bad case, the user's sending rate is low or the network latency is
    small, there will not be many bundles, so making a Nagle ACK or waiting
    for it is not meaningful.
    For example: a user sends its messages every 100ms and the RTT is 50ms,
    then for each messages, we require one Nagle ACK but then there is only
    one user message sent without any bundles.
    
    In a better case, even if we have a few bundles (e.g. the RTT = 300ms),
    but now the user sends messages in medium size, then there will not be
    any difference at all, that says 3 x 1000-byte data messages if bundled
    will still result in 3 bundles with MTU = 1500.
    
    When Nagle is ineffective, the delay in user message sending is clearly
    wasted instead of sending directly.
    
    Besides, adding Nagle ACKs will consume some processor load on both the
    sending and receiving sides.
    
    This commit adds a test on the effectiveness of the Nagle algorithm for
    an individual connection in the network on which it actually runs.
    Particularly, upon receipt of a Nagle ACK we will compare the number of
    bundles in the backlog queue to the number of user messages which would
    be sent directly without Nagle. If the ratio is good (e.g. >= 2), Nagle
    mode will be kept for further message sending. Otherwise, we will leave
    Nagle and put a 'penalty' on the connection, so it will have to spend
    more 'one-way' messages before being able to re-enter Nagle.
    
    In addition, the 'ack-required' bit is only set when really needed that
    the number of Nagle ACKs will be reduced during Nagle mode.
    
    Testing with benchmark showed that with the patch, there was not much
    difference in throughput for small messages since the tool continuously
    sends messages without a break, so Nagle would still take in effect.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c72bf22589a076a9e2653c5eeebd80f730d50e0
Author: Ahmed Abdelsalam <ahabdels@gmail.com>
Date:   Wed Jun 3 06:54:42 2020 +0000

    seg6: fix seg6_validate_srh() to avoid slab-out-of-bounds
    
    [ Upstream commit bb986a50421a11bf31a81afb15b9b8f45a4a3a11 ]
    
    The seg6_validate_srh() is used to validate SRH for three cases:
    
    case1: SRH of data-plane SRv6 packets to be processed by the Linux kernel.
    Case2: SRH of the netlink message received  from user-space (iproute2)
    Case3: SRH injected into packets through setsockopt
    
    In case1, the SRH can be encoded in the Reduced way (i.e., first SID is
    carried in DA only and not represented as SID in the SRH) and the
    seg6_validate_srh() now handles this case correctly.
    
    In case2 and case3, the SRH shouldn’t be encoded in the Reduced way
    otherwise we lose the first segment (i.e., the first hop).
    
    The current implementation of the seg6_validate_srh() allow SRH of case2
    and case3 to be encoded in the Reduced way. This leads a slab-out-of-bounds
    problem.
    
    This patch verifies SRH of case1, case2 and case3. Allowing case1 to be
    reduced while preventing SRH of case2 and case3 from being reduced .
    
    Reported-by: syzbot+e8c028b62439eac42073@syzkaller.appspotmail.com
    Reported-by: YueHaibing <yuehaibing@huawei.com>
    Fixes: 0cb7498f234e ("seg6: fix SRH processing to comply with RFC8754")
    Signed-off-by: Ahmed Abdelsalam <ahabdels@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b903524c8a60a3e9d5eede7fc87f1012332b929f
Author: Stylon Wang <stylon.wang@amd.com>
Date:   Fri Jun 12 19:04:18 2020 +0800

    drm/amd/display: Fix ineffective setting of max bpc property
    
    [ Upstream commit fa7041d9d2fc7401cece43f305eb5b87b7017fc4 ]
    
    [Why]
    Regression was introduced where setting max bpc property has no effect
    on the atomic check and final commit. It has the same effect as max bpc
    being stuck at 8.
    
    [How]
    Correctly propagate max bpc with the new connector state.
    
    Signed-off-by: Stylon Wang <stylon.wang@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60c60af1adffdc4a34f4b13acc44a02ec33169b1
Author: Stylon Wang <stylon.wang@amd.com>
Date:   Thu Apr 30 16:40:09 2020 +0800

    drm/amd/display: Fix incorrectly pruned modes with deep color
    
    [ Upstream commit cbd14ae7ea934fd9d9f95103a0601a7fea243573 ]
    
    [Why]
    When "max bpc" is set to enable deep color, some modes are removed from
    the list if they fail validation on max bpc. These modes should be kept
    if they validates fine with lower bpc.
    
    [How]
    - Retry with lower bpc in mode validation.
    - Same in atomic commit to apply working bpc, not necessarily max bpc.
    
    Signed-off-by: Stylon Wang <stylon.wang@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 972b36cc802745b3f7482084def5f50fe463ea37
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Jun 25 20:29:59 2020 -0700

    mm: fix swap cache node allocation mask
    
    [ Upstream commit 243bce09c91b0145aeaedd5afba799d81841c030 ]
    
    Chris Murphy reports that a slightly overcommitted load, testing swap
    and zram along with i915, splats and keeps on splatting, when it had
    better fail less noisily:
    
      gnome-shell: page allocation failure: order:0,
      mode:0x400d0(__GFP_IO|__GFP_FS|__GFP_COMP|__GFP_RECLAIMABLE),
      nodemask=(null),cpuset=/,mems_allowed=0
      CPU: 2 PID: 1155 Comm: gnome-shell Not tainted 5.7.0-1.fc33.x86_64 #1
      Call Trace:
        dump_stack+0x64/0x88
        warn_alloc.cold+0x75/0xd9
        __alloc_pages_slowpath.constprop.0+0xcfa/0xd30
        __alloc_pages_nodemask+0x2df/0x320
        alloc_slab_page+0x195/0x310
        allocate_slab+0x3c5/0x440
        ___slab_alloc+0x40c/0x5f0
        __slab_alloc+0x1c/0x30
        kmem_cache_alloc+0x20e/0x220
        xas_nomem+0x28/0x70
        add_to_swap_cache+0x321/0x400
        __read_swap_cache_async+0x105/0x240
        swap_cluster_readahead+0x22c/0x2e0
        shmem_swapin+0x8e/0xc0
        shmem_swapin_page+0x196/0x740
        shmem_getpage_gfp+0x3a2/0xa60
        shmem_read_mapping_page_gfp+0x32/0x60
        shmem_get_pages+0x155/0x5e0 [i915]
        __i915_gem_object_get_pages+0x68/0xa0 [i915]
        i915_vma_pin+0x3fe/0x6c0 [i915]
        eb_add_vma+0x10b/0x2c0 [i915]
        i915_gem_do_execbuffer+0x704/0x3430 [i915]
        i915_gem_execbuffer2_ioctl+0x1ea/0x3e0 [i915]
        drm_ioctl_kernel+0x86/0xd0 [drm]
        drm_ioctl+0x206/0x390 [drm]
        ksys_ioctl+0x82/0xc0
        __x64_sys_ioctl+0x16/0x20
        do_syscall_64+0x5b/0xf0
        entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Reported on 5.7, but it goes back really to 3.1: when
    shmem_read_mapping_page_gfp() was implemented for use by i915, and
    allowed for __GFP_NORETRY and __GFP_NOWARN flags in most places, but
    missed swapin's "& GFP_KERNEL" mask for page tree node allocation in
    __read_swap_cache_async() - that was to mask off HIGHUSER_MOVABLE bits
    from what page cache uses, but GFP_RECLAIM_MASK is now what's needed.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=208085
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2006151330070.11064@eggly.anvils
    Fixes: 68da9f055755 ("tmpfs: pass gfp to shmem_getpage_gfp")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reviewed-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Analyzed-by: Vlastimil Babka <vbabka@suse.cz>
    Analyzed-by: Matthew Wilcox <willy@infradead.org>
    Tested-by: Chris Murphy <lists@colorremedies.com>
    Cc: <stable@vger.kernel.org>    [3.1+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83fb7ab5944fd732795204319f719c09195deb3e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 1 19:12:19 2020 +0100

    btrfs: fix race between block group removal and block group creation
    
    [ Upstream commit ffcb9d44572afbaf8fa6dbf5115bff6dab7b299e ]
    
    There is a race between block group removal and block group creation
    when the removal is completed by a task running fitrim or scrub. When
    this happens we end up failing the block group creation with an error
    -EEXIST since we attempt to insert a duplicate block group item key
    in the extent tree. That results in a transaction abort.
    
    The race happens like this:
    
    1) Task A is doing a fitrim, and at btrfs_trim_block_group() it freezes
       block group X with btrfs_freeze_block_group() (until very recently
       that was named btrfs_get_block_group_trimming());
    
    2) Task B starts removing block group X, either because it's now unused
       or due to relocation for example. So at btrfs_remove_block_group(),
       while holding the chunk mutex and the block group's lock, it sets
       the 'removed' flag of the block group and it sets the local variable
       'remove_em' to false, because the block group is currently frozen
       (its 'frozen' counter is > 0, until very recently this counter was
       named 'trimming');
    
    3) Task B unlocks the block group and the chunk mutex;
    
    4) Task A is done trimming the block group and unfreezes the block group
       by calling btrfs_unfreeze_block_group() (until very recently this was
       named btrfs_put_block_group_trimming()). In this function we lock the
       block group and set the local variable 'cleanup' to true because we
       were able to decrement the block group's 'frozen' counter down to 0 and
       the flag 'removed' is set in the block group.
    
       Since 'cleanup' is set to true, it locks the chunk mutex and removes
       the extent mapping representing the block group from the mapping tree;
    
    5) Task C allocates a new block group Y and it picks up the logical address
       that block group X had as the logical address for Y, because X was the
       block group with the highest logical address and now the second block
       group with the highest logical address, the last in the fs mapping tree,
       ends at an offset corresponding to block group X's logical address (this
       logical address selection is done at volumes.c:find_next_chunk()).
    
       At this point the new block group Y does not have yet its item added
       to the extent tree (nor the corresponding device extent items and
       chunk item in the device and chunk trees). The new group Y is added to
       the list of pending block groups in the transaction handle;
    
    6) Before task B proceeds to removing the block group item for block
       group X from the extent tree, which has a key matching:
    
       (X logical offset, BTRFS_BLOCK_GROUP_ITEM_KEY, length)
    
       task C while ending its transaction handle calls
       btrfs_create_pending_block_groups(), which finds block group Y and
       tries to insert the block group item for Y into the exten tree, which
       fails with -EEXIST since logical offset is the same that X had and
       task B hasn't yet deleted the key from the extent tree.
       This failure results in a transaction abort, producing a stack like
       the following:
    
    ------------[ cut here ]------------
     BTRFS: Transaction aborted (error -17)
     WARNING: CPU: 2 PID: 19736 at fs/btrfs/block-group.c:2074 btrfs_create_pending_block_groups+0x1eb/0x260 [btrfs]
     Modules linked in: btrfs blake2b_generic xor raid6_pq (...)
     CPU: 2 PID: 19736 Comm: fsstress Tainted: G        W         5.6.0-rc7-btrfs-next-58 #5
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
     RIP: 0010:btrfs_create_pending_block_groups+0x1eb/0x260 [btrfs]
     Code: ff ff ff 48 8b 55 50 f0 48 (...)
     RSP: 0018:ffffa4160a1c7d58 EFLAGS: 00010286
     RAX: 0000000000000000 RBX: ffff961581909d98 RCX: 0000000000000000
     RDX: 0000000000000001 RSI: ffffffffb3d63990 RDI: 0000000000000001
     RBP: ffff9614f3356a58 R08: 0000000000000000 R09: 0000000000000001
     R10: ffff9615b65b0040 R11: 0000000000000000 R12: ffff961581909c10
     R13: ffff9615b0c32000 R14: ffff9614f3356ab0 R15: ffff9614be779000
     FS:  00007f2ce2841e80(0000) GS:ffff9615bae00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000555f18780000 CR3: 0000000131d34005 CR4: 00000000003606e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      btrfs_start_dirty_block_groups+0x398/0x4e0 [btrfs]
      btrfs_commit_transaction+0xd0/0xc50 [btrfs]
      ? btrfs_attach_transaction_barrier+0x1e/0x50 [btrfs]
      ? __ia32_sys_fdatasync+0x20/0x20
      iterate_supers+0xdb/0x180
      ksys_sync+0x60/0xb0
      __ia32_sys_sync+0xa/0x10
      do_syscall_64+0x5c/0x280
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
     RIP: 0033:0x7f2ce1d4d5b7
     Code: 83 c4 08 48 3d 01 (...)
     RSP: 002b:00007ffd8b558c58 EFLAGS: 00000202 ORIG_RAX: 00000000000000a2
     RAX: ffffffffffffffda RBX: 000000000000002c RCX: 00007f2ce1d4d5b7
     RDX: 00000000ffffffff RSI: 00000000186ba07b RDI: 000000000000002c
     RBP: 0000555f17b9e520 R08: 0000000000000012 R09: 000000000000ce00
     R10: 0000000000000078 R11: 0000000000000202 R12: 0000000000000032
     R13: 0000000051eb851f R14: 00007ffd8b558cd0 R15: 0000555f1798ec20
     irq event stamp: 0
     hardirqs last  enabled at (0): [<0000000000000000>] 0x0
     hardirqs last disabled at (0): [<ffffffffb2abdedf>] copy_process+0x74f/0x2020
     softirqs last  enabled at (0): [<ffffffffb2abdedf>] copy_process+0x74f/0x2020
     softirqs last disabled at (0): [<0000000000000000>] 0x0
     ---[ end trace bd7c03622e0b0a9c ]---
    
    Fix this simply by making btrfs_remove_block_group() remove the block
    group's item from the extent tree before it flags the block group as
    removed. Also make the free space deletion from the free space tree
    before flagging the block group as removed, to avoid a similar race
    with adding and removing free space entries for the free space tree.
    
    Fixes: 04216820fe83d5 ("Btrfs: fix race between fs trimming and block group remove/allocation")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc74ad15ea76f02eecb87cf8dae94bd268d05ea9
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue May 5 07:58:21 2020 +0800

    btrfs: block-group: refactor how we delete one block group item
    
    [ Upstream commit 7357623a7f4beb4ac76005f8fac9fc0230f9a67e ]
    
    When deleting a block group item, it's pretty straight forward, just
    delete the item pointed by the key.  However it will not be that
    straight-forward for incoming skinny block group item.
    
    So refactor the block group item deletion into a new function,
    remove_block_group_item(), also to make the already lengthy
    btrfs_remove_block_group() a little shorter.
    
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e79f8d949b5e77416dd6521558f11aa2488aa3f1
Author: Sungjong Seo <sj1557.seo@samsung.com>
Date:   Thu Jun 18 20:43:26 2020 +0900

    exfat: flush dirty metadata in fsync
    
    [ Upstream commit 5267456e953fd8c5abd8e278b1cc6a9f9027ac0a ]
    
    generic_file_fsync() exfat used could not guarantee the consistency of
    a file because it has flushed not dirty metadata but only dirty data pages
    for a file.
    
    Instead of that, use exfat_file_fsync() for files and directories so that
    it guarantees to commit both the metadata and data pages for a file.
    
    Signed-off-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89db022b74fe02b5391a5774226d3cadf3988c9d
Author: Namjae Jeon <namjae.jeon@samsung.com>
Date:   Wed Jun 17 12:17:18 2020 +0900

    exfat: move setting VOL_DIRTY over exfat_remove_entries()
    
    [ Upstream commit 3bcfb701099acf96b0e883bf5544f96af473aa1d ]
    
    Move setting VOL_DIRTY over exfat_remove_entries() to avoid unneeded
    leaving VOL_DIRTY on -ENOTEMPTY.
    
    Fixes: 5f2aa075070c ("exfat: add inode operations")
    Cc: stable@vger.kernel.org # v5.7
    Reported-by: Tetsuhiro Kohada <kohada.t2@gmail.com>
    Reviewed-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6609d5469721314472c1e8f6b95a37f476adbb59
Author: Hyunchul Lee <hyc.lee@gmail.com>
Date:   Tue Jun 16 14:34:45 2020 +0900

    exfat: call sync_filesystem for read-only remount
    
    [ Upstream commit a0271a15cf2cf907ea5b0f2ba611123f1b7935ec ]
    
    We need to commit dirty metadata and pages to disk
    before remounting exfat as read-only.
    
    This fixes a failure in xfstests generic/452
    
    generic/452 does the following:
    cp something <exfat>/
    mount -o remount,ro <exfat>
    
    the <exfat>/something is corrupted. because while
    exfat is remounted as read-only, exfat doesn't
    have a chance to commit metadata and
    vfs invalidates page caches in a block device.
    
    Signed-off-by: Hyunchul Lee <hyc.lee@gmail.com>
    Acked-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fea4a1641b252086c7d1c717bab09c6886d0c33
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 10 20:22:13 2020 +0300

    exfat: add missing brelse() calls on error paths
    
    [ Upstream commit e8dd3cda8667118b70d9fe527f61fe22623de04d ]
    
    If the second exfat_get_dentry() call fails then we need to release
    "old_bh" before returning.  There is a similar bug in exfat_move_file().
    
    Fixes: 5f2aa075070c ("exfat: add inode operations")
    Reported-by: Markus Elfring <Markus.Elfring@web.de>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4ce7251416b50f675452db04644b3676a1d3daf
Author: Hyeongseok.Kim <Hyeongseok@gmail.com>
Date:   Tue Jun 9 14:30:44 2020 +0900

    exfat: Set the unused characters of FileName field to the value 0000h
    
    [ Upstream commit 4ba6ccd695f5ed3ae851e59b443b757bbe4557fe ]
    
    Some fsck tool complain that padding part of the FileName field
    is not set to the value 0000h. So let's maintain filesystem cleaner,
    as exfat's spec. recommendation.
    
    Signed-off-by: Hyeongseok.Kim <Hyeongseok@gmail.com>
    Reviewed-by: Sungjong Seo <sj1557.seo@samsung.com>
    Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
