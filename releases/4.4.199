commit d486a86f38dc4a5059ac7c59b735ec81cb2e826a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 6 12:09:27 2019 +0100

    Linux 4.4.199

commit 125df47aea12964395e49e64fac41782948129bb
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 28 09:10:56 2019 +0100

    Revert "ALSA: hda: Flush interrupts on disabling"
    
    [ Upstream commit 1a7f60b9df614bb36d14dc0c0bc898a31b2b506f ]
    
    This reverts commit caa8422d01e983782548648e125fd617cadcec3f.
    
    It turned out that this commit caused a regression at shutdown /
    reboot, as the synchronize_irq() calls seems blocking the whole
    shutdown.  Also another part of the change about shuffling the call
    order looks suspicious; the azx_stop_chip() call disables the CORB /
    RIRB while the others may still need the CORB/RIRB update.
    
    Since the original commit itself was a cargo-fix, let's revert the
    whole patch.
    
    Fixes: caa8422d01e9 ("ALSA: hda: Flush interrupts on disabling")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205333
    BugLinK: https://bugs.freedesktop.org/show_bug.cgi?id=111174
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://lore.kernel.org/r/20191028081056.22010-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22668f45d6adb55d8632c7fa999360a7d873ca0a
Author: Vratislav Bendel <vbendel@redhat.com>
Date:   Tue Mar 6 17:07:44 2018 -0800

    xfs: Correctly invert xfs_buftarg LRU isolation logic
    
    commit 19957a181608d25c8f4136652d0ea00b3738972d upstream.
    
    Due to an inverted logic mistake in xfs_buftarg_isolate()
    the xfs_buffers with zero b_lru_ref will take another trip
    around LRU, while isolating buffers with non-zero b_lru_ref.
    
    Additionally those isolated buffers end up right back on the LRU
    once they are released, because b_lru_ref remains elevated.
    
    Fix that circuitous route by leaving them on the LRU
    as originally intended.
    
    Signed-off-by: Vratislav Bendel <vbendel@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Alex Lyakas <alex@zadara.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90edf68180bf9fa03a26d1fa59fc92915e4018e3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Jun 26 16:31:39 2019 +0800

    sctp: not bind the socket in sctp_connect
    
    commit 9b6c08878e23adb7cc84bdca94d8a944b03f099e upstream.
    
    Now when sctp_connect() is called with a wrong sa_family, it binds
    to a port but doesn't set bp->port, then sctp_get_af_specific will
    return NULL and sctp_connect() returns -EINVAL.
    
    Then if sctp_bind() is called to bind to another port, the last
    port it has bound will leak due to bp->port is NULL by then.
    
    sctp_connect() doesn't need to bind ports, as later __sctp_connect
    will do it if bp->port is NULL. So remove it from sctp_connect().
    While at it, remove the unnecessary sockaddr.sa_family len check
    as it's already done in sctp_inet_connect.
    
    Fixes: 644fbdeacf1d ("sctp: fix the issue that flags are ignored when using kernel_connect")
    Reported-by: syzbot+079bf326b38072f849d9@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 157fdfe11eeb063e30c2965ce98845e3ab1af43b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun May 20 16:39:10 2018 +0800

    sctp: fix the issue that flags are ignored when using kernel_connect
    
    commit 644fbdeacf1d3edd366e44b8ba214de9d1dd66a9 upstream.
    
    Now sctp uses inet_dgram_connect as its proto_ops .connect, and the flags
    param can't be passed into its proto .connect where this flags is really
    needed.
    
    sctp works around it by getting flags from socket file in __sctp_connect.
    It works for connecting from userspace, as inherently the user sock has
    socket file and it passes f_flags as the flags param into the proto_ops
    .connect.
    
    However, the sock created by sock_create_kern doesn't have a socket file,
    and it passes the flags (like O_NONBLOCK) by using the flags param in
    kernel_connect, which calls proto_ops .connect later.
    
    So to fix it, this patch defines a new proto_ops .connect for sctp,
    sctp_inet_connect, which calls __sctp_connect() directly with this
    flags param. After this, the sctp's proto .connect can be removed.
    
    Note that sctp_inet_connect doesn't need to do some checks that are not
    needed for sctp, which makes thing better than with inet_dgram_connect.
    
    Suggested-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09ee754c623344d6a94caf115e77ed74b4b2a702
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Sep 24 13:11:26 2019 -0700

    sch_netem: fix rcu splat in netem_enqueue()
    
    commit 159d2c7d8106177bd9a986fd005a311fe0d11285 upstream.
    
    qdisc_root() use from netem_enqueue() triggers a lockdep warning.
    
    __dev_queue_xmit() uses rcu_read_lock_bh() which is
    not equivalent to rcu_read_lock() + local_bh_disable_bh as far
    as lockdep is concerned.
    
    WARNING: suspicious RCU usage
    5.3.0-rc7+ #0 Not tainted
    -----------------------------
    include/net/sch_generic.h:492 suspicious rcu_dereference_check() usage!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    3 locks held by syz-executor427/8855:
     #0: 00000000b5525c01 (rcu_read_lock_bh){....}, at: lwtunnel_xmit_redirect include/net/lwtunnel.h:92 [inline]
     #0: 00000000b5525c01 (rcu_read_lock_bh){....}, at: ip_finish_output2+0x2dc/0x2570 net/ipv4/ip_output.c:214
     #1: 00000000b5525c01 (rcu_read_lock_bh){....}, at: __dev_queue_xmit+0x20a/0x3650 net/core/dev.c:3804
     #2: 00000000364bae92 (&(&sch->q.lock)->rlock){+.-.}, at: spin_lock include/linux/spinlock.h:338 [inline]
     #2: 00000000364bae92 (&(&sch->q.lock)->rlock){+.-.}, at: __dev_xmit_skb net/core/dev.c:3502 [inline]
     #2: 00000000364bae92 (&(&sch->q.lock)->rlock){+.-.}, at: __dev_queue_xmit+0x14b8/0x3650 net/core/dev.c:3838
    
    stack backtrace:
    CPU: 0 PID: 8855 Comm: syz-executor427 Not tainted 5.3.0-rc7+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     lockdep_rcu_suspicious+0x153/0x15d kernel/locking/lockdep.c:5357
     qdisc_root include/net/sch_generic.h:492 [inline]
     netem_enqueue+0x1cfb/0x2d80 net/sched/sch_netem.c:479
     __dev_xmit_skb net/core/dev.c:3527 [inline]
     __dev_queue_xmit+0x15d2/0x3650 net/core/dev.c:3838
     dev_queue_xmit+0x18/0x20 net/core/dev.c:3902
     neigh_hh_output include/net/neighbour.h:500 [inline]
     neigh_output include/net/neighbour.h:509 [inline]
     ip_finish_output2+0x1726/0x2570 net/ipv4/ip_output.c:228
     __ip_finish_output net/ipv4/ip_output.c:308 [inline]
     __ip_finish_output+0x5fc/0xb90 net/ipv4/ip_output.c:290
     ip_finish_output+0x38/0x1f0 net/ipv4/ip_output.c:318
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip_mc_output+0x292/0xf40 net/ipv4/ip_output.c:417
     dst_output include/net/dst.h:436 [inline]
     ip_local_out+0xbb/0x190 net/ipv4/ip_output.c:125
     ip_send_skb+0x42/0xf0 net/ipv4/ip_output.c:1555
     udp_send_skb.isra.0+0x6b2/0x1160 net/ipv4/udp.c:887
     udp_sendmsg+0x1e96/0x2820 net/ipv4/udp.c:1174
     inet_sendmsg+0x9e/0xe0 net/ipv4/af_inet.c:807
     sock_sendmsg_nosec net/socket.c:637 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:657
     ___sys_sendmsg+0x3e2/0x920 net/socket.c:2311
     __sys_sendmmsg+0x1bf/0x4d0 net/socket.c:2413
     __do_sys_sendmmsg net/socket.c:2442 [inline]
     __se_sys_sendmmsg net/socket.c:2439 [inline]
     __x64_sys_sendmmsg+0x9d/0x100 net/socket.c:2439
     do_syscall_64+0xfd/0x6a0 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06ddf07c8e613d03c070d9d2c7fab13912ad408c
Author: Valentin Vidic <vvidic@valentin-vidic.from.hr>
Date:   Tue Oct 15 22:20:20 2019 +0200

    net: usb: sr9800: fix uninitialized local variable
    
    commit 77b6d09f4ae66d42cd63b121af67780ae3d1a5e9 upstream.
    
    Make sure res does not contain random value if the call to
    sr_read_cmd fails for some reason.
    
    Reported-by: syzbot+f1842130bbcfb335bac1@syzkaller.appspotmail.com
    Signed-off-by: Valentin Vidic <vvidic@valentin-vidic.from.hr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4366f9e3e8733f220e986433255297958c704482
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 7 15:43:01 2019 -0700

    bonding: fix potential NULL deref in bond_update_slave_arr
    
    commit a7137534b597b7c303203e6bc3ed87e87a273bb8 upstream.
    
    syzbot got a NULL dereference in bond_update_slave_arr() [1],
    happening after a failure to allocate bond->slave_arr
    
    A workqueue (bond_slave_arr_handler) is supposed to retry
    the allocation later, but if the slave is removed before
    the workqueue had a chance to complete, bond->slave_arr
    can still be NULL.
    
    [1]
    
    Failed to build slave-array.
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    Modules linked in:
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:bond_update_slave_arr.cold+0xc6/0x198 drivers/net/bonding/bond_main.c:4039
    RSP: 0018:ffff88018fe33678 EFLAGS: 00010246
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffc9000290b000
    RDX: 0000000000000000 RSI: ffffffff82b63037 RDI: ffff88019745ea20
    RBP: ffff88018fe33760 R08: ffff880170754280 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: ffff88019745ea00 R14: 0000000000000000 R15: ffff88018fe338b0
    FS:  00007febd837d700(0000) GS:ffff8801dad00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000004540a0 CR3: 00000001c242e005 CR4: 00000000001626f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     [<ffffffff82b5b45e>] __bond_release_one+0x43e/0x500 drivers/net/bonding/bond_main.c:1923
     [<ffffffff82b5b966>] bond_release drivers/net/bonding/bond_main.c:2039 [inline]
     [<ffffffff82b5b966>] bond_do_ioctl+0x416/0x870 drivers/net/bonding/bond_main.c:3562
     [<ffffffff83ae25f4>] dev_ifsioc+0x6f4/0x940 net/core/dev_ioctl.c:328
     [<ffffffff83ae2e58>] dev_ioctl+0x1b8/0xc70 net/core/dev_ioctl.c:495
     [<ffffffff83995ffd>] sock_do_ioctl+0x1bd/0x300 net/socket.c:1088
     [<ffffffff83996a80>] sock_ioctl+0x300/0x5d0 net/socket.c:1196
     [<ffffffff81b124db>] vfs_ioctl fs/ioctl.c:47 [inline]
     [<ffffffff81b124db>] file_ioctl fs/ioctl.c:501 [inline]
     [<ffffffff81b124db>] do_vfs_ioctl+0xacb/0x1300 fs/ioctl.c:688
     [<ffffffff81b12dc6>] SYSC_ioctl fs/ioctl.c:705 [inline]
     [<ffffffff81b12dc6>] SyS_ioctl+0xb6/0xe0 fs/ioctl.c:696
     [<ffffffff8101ccc8>] do_syscall_64+0x528/0x770 arch/x86/entry/common.c:305
     [<ffffffff84400091>] entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    Fixes: ee6377147409 ("bonding: Simplify the xmit function for modes that use xmit_hash")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96ff6ba50ab22c4004cb485f6cbabc75281ba5df
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Oct 6 14:24:25 2019 -0700

    llc: fix sk_buff leak in llc_conn_service()
    
    commit b74555de21acd791f12c4a1aeaf653dd7ac21133 upstream.
    
    syzbot reported:
    
        BUG: memory leak
        unreferenced object 0xffff88811eb3de00 (size 224):
           comm "syz-executor559", pid 7315, jiffies 4294943019 (age 10.300s)
           hex dump (first 32 bytes):
             00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
             00 a0 38 24 81 88 ff ff 00 c0 f2 15 81 88 ff ff  ..8$............
           backtrace:
             [<000000008d1c66a1>] kmemleak_alloc_recursive  include/linux/kmemleak.h:55 [inline]
             [<000000008d1c66a1>] slab_post_alloc_hook mm/slab.h:439 [inline]
             [<000000008d1c66a1>] slab_alloc_node mm/slab.c:3269 [inline]
             [<000000008d1c66a1>] kmem_cache_alloc_node+0x153/0x2a0 mm/slab.c:3579
             [<00000000447d9496>] __alloc_skb+0x6e/0x210 net/core/skbuff.c:198
             [<000000000cdbf82f>] alloc_skb include/linux/skbuff.h:1058 [inline]
             [<000000000cdbf82f>] llc_alloc_frame+0x66/0x110 net/llc/llc_sap.c:54
             [<000000002418b52e>] llc_conn_ac_send_sabme_cmd_p_set_x+0x2f/0x140  net/llc/llc_c_ac.c:777
             [<000000001372ae17>] llc_exec_conn_trans_actions net/llc/llc_conn.c:475  [inline]
             [<000000001372ae17>] llc_conn_service net/llc/llc_conn.c:400 [inline]
             [<000000001372ae17>] llc_conn_state_process+0x1ac/0x640  net/llc/llc_conn.c:75
             [<00000000f27e53c1>] llc_establish_connection+0x110/0x170  net/llc/llc_if.c:109
             [<00000000291b2ca0>] llc_ui_connect+0x10e/0x370 net/llc/af_llc.c:477
             [<000000000f9c740b>] __sys_connect+0x11d/0x170 net/socket.c:1840
             [...]
    
    The bug is that most callers of llc_conn_send_pdu() assume it consumes a
    reference to the skb, when actually due to commit b85ab56c3f81 ("llc:
    properly handle dev_queue_xmit() return value") it doesn't.
    
    Revert most of that commit, and instead make the few places that need
    llc_conn_send_pdu() to *not* consume a reference call skb_get() before.
    
    Fixes: b85ab56c3f81 ("llc: properly handle dev_queue_xmit() return value")
    Reported-by: syzbot+6b825a6494a04cc0e3f7@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60d89113d0794c1245fef442c7d4837e6c57a3a1
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Oct 6 14:24:24 2019 -0700

    llc: fix sk_buff leak in llc_sap_state_process()
    
    commit c6ee11c39fcc1fb55130748990a8f199e76263b4 upstream.
    
    syzbot reported:
    
        BUG: memory leak
        unreferenced object 0xffff888116270800 (size 224):
           comm "syz-executor641", pid 7047, jiffies 4294947360 (age 13.860s)
           hex dump (first 32 bytes):
             00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
             00 20 e1 2a 81 88 ff ff 00 40 3d 2a 81 88 ff ff  . .*.....@=*....
           backtrace:
             [<000000004d41b4cc>] kmemleak_alloc_recursive  include/linux/kmemleak.h:55 [inline]
             [<000000004d41b4cc>] slab_post_alloc_hook mm/slab.h:439 [inline]
             [<000000004d41b4cc>] slab_alloc_node mm/slab.c:3269 [inline]
             [<000000004d41b4cc>] kmem_cache_alloc_node+0x153/0x2a0 mm/slab.c:3579
             [<00000000506a5965>] __alloc_skb+0x6e/0x210 net/core/skbuff.c:198
             [<000000001ba5a161>] alloc_skb include/linux/skbuff.h:1058 [inline]
             [<000000001ba5a161>] alloc_skb_with_frags+0x5f/0x250  net/core/skbuff.c:5327
             [<0000000047d9c78b>] sock_alloc_send_pskb+0x269/0x2a0  net/core/sock.c:2225
             [<000000003828fe54>] sock_alloc_send_skb+0x32/0x40 net/core/sock.c:2242
             [<00000000e34d94f9>] llc_ui_sendmsg+0x10a/0x540 net/llc/af_llc.c:933
             [<00000000de2de3fb>] sock_sendmsg_nosec net/socket.c:652 [inline]
             [<00000000de2de3fb>] sock_sendmsg+0x54/0x70 net/socket.c:671
             [<000000008fe16e7a>] __sys_sendto+0x148/0x1f0 net/socket.c:1964
             [...]
    
    The bug is that llc_sap_state_process() always takes an extra reference
    to the skb, but sometimes neither llc_sap_next_state() nor
    llc_sap_state_process() itself drops this reference.
    
    Fix it by changing llc_sap_next_state() to never consume a reference to
    the skb, rather than sometimes do so and sometimes not.  Then remove the
    extra skb_get() and kfree_skb() from llc_sap_state_process().
    
    Reported-by: syzbot+6bf095f9becf5efef645@syzkaller.appspotmail.com
    Reported-by: syzbot+31c16aa4202dace3812e@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3da8d0e777fa8a0934a288b115373cf12d7800f8
Author: Laura Abbott <labbott@redhat.com>
Date:   Fri Oct 18 07:43:21 2019 -0400

    rtlwifi: Fix potential overflow on P2P code
    
    commit 8c55dedb795be8ec0cf488f98c03a1c2176f7fb1 upstream.
    
    Nicolas Waisman noticed that even though noa_len is checked for
    a compatible length it's still possible to overrun the buffers
    of p2pinfo since there's no check on the upper bound of noa_num.
    Bound noa_num against P2P_MAX_NOA_NUM.
    
    Reported-by: Nicolas Waisman <nico@semmle.com>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Acked-by: Ping-Ke Shih <pkshih@realtek.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cdb53607683a4fa8625a3f3eb65e5d9f4572166
Author: Yihui ZENG <yzeng56@asu.edu>
Date:   Fri Oct 25 12:31:48 2019 +0300

    s390/cmm: fix information leak in cmm_timeout_handler()
    
    commit b8e51a6a9db94bc1fb18ae831b3dab106b5a4b5f upstream.
    
    The problem is that we were putting the NUL terminator too far:
    
            buf[sizeof(buf) - 1] = '\0';
    
    If the user input isn't NUL terminated and they haven't initialized the
    whole buffer then it leads to an info leak.  The NUL terminator should
    be:
    
            buf[len - 1] = '\0';
    
    Signed-off-by: Yihui Zeng <yzeng56@asu.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    [heiko.carstens@de.ibm.com: keep semantics of how *lenp and *ppos are handled]
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3af30fce8990fbe190831bdba55e4d2c97b7e222
Author: Markus Theil <markus.theil@tu-ilmenau.de>
Date:   Tue Oct 29 10:30:03 2019 +0100

    nl80211: fix validation of mesh path nexthop
    
    commit 1fab1b89e2e8f01204a9c05a39fd0b6411a48593 upstream.
    
    Mesh path nexthop should be a ethernet address, but current validation
    checks against 4 byte integers.
    
    Cc: stable@vger.kernel.org
    Fixes: 2ec600d672e74 ("nl80211/cfg80211: support for mesh, sta dumping")
    Signed-off-by: Markus Theil <markus.theil@tu-ilmenau.de>
    Link: https://lore.kernel.org/r/20191029093003.10355-1-markus.theil@tu-ilmenau.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b718848646846e67f181f4f95099abf4f7985cfb
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Aug 23 21:15:27 2019 +0200

    HID: fix error message in hid_open_report()
    
    commit b3a81c777dcb093020680490ab970d85e2f6f04f upstream.
    
    On HID report descriptor parsing error the code displays bogus
    pointer instead of error offset (subtracts start=NULL from end).
    Make the message more useful by displaying correct error offset
    and include total buffer size for reference.
    
    This was carried over from ancient times - "Fixed" commit just
    promoted the message from DEBUG to ERROR.
    
    Cc: stable@vger.kernel.org
    Fixes: 8c3d52fc393b ("HID: make parser more verbose about parsing errors by default")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2be873faad369e0b6b70761506995fd2d4cb0257
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Oct 3 14:53:59 2019 -0400

    HID: Fix assumption that devices have inputs
    
    commit d9d4b1e46d9543a82c23f6df03f4ad697dab361b upstream.
    
    The syzbot fuzzer found a slab-out-of-bounds write bug in the hid-gaff
    driver.  The problem is caused by the driver's assumption that the
    device must have an input report.  While this will be true for all
    normal HID input devices, a suitably malicious device can violate the
    assumption.
    
    The same assumption is present in over a dozen other HID drivers.
    This patch fixes them by checking that the list of hid_inputs for the
    hid_device is nonempty before allowing it to be used.
    
    Reported-and-tested-by: syzbot+403741a091bf41d4ae79@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31e00ffd70c1db4311835039cc18ebaeb903abc4
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 29 11:23:54 2019 +0100

    USB: serial: whiteheat: fix line-speed endianness
    
    commit 84968291d7924261c6a0624b9a72f952398e258b upstream.
    
    Add missing endianness conversion when setting the line speed so that
    this driver might work also on big-endian machines.
    
    Also use an unsigned format specifier in the corresponding debug
    message.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191029102354.2733-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ab42e29bdb03b4583645de29e83bac7306aab83
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 29 11:23:53 2019 +0100

    USB: serial: whiteheat: fix potential slab corruption
    
    commit 1251dab9e0a2c4d0d2d48370ba5baa095a5e8774 upstream.
    
    Fix a user-controlled slab buffer overflow due to a missing sanity check
    on the bulk-out transfer buffer used for control requests.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191029102354.2733-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cacf9fa26603b559d4236b5d5b5a79f1a3602520
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 22 17:31:27 2019 +0200

    USB: ldusb: fix control-message timeout
    
    commit 52403cfbc635d28195167618690595013776ebde upstream.
    
    USB control-message timeouts are specified in milliseconds, not jiffies.
    Waiting 83 minutes for a transfer to complete is a bit excessive.
    
    Fixes: 2824bd250f0b ("[PATCH] USB: add ldusb driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Reported-by: syzbot+a4fbb3bb76cda0ea4e58@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191022153127.22295-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb04ad572e76b98d3b310d7a161e4b19b22b6748
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 22 16:32:02 2019 +0200

    USB: ldusb: fix ring-buffer locking
    
    commit d98ee2a19c3334e9343df3ce254b496f1fc428eb upstream.
    
    The custom ring-buffer implementation was merged without any locking or
    explicit memory barriers, but a spinlock was later added by commit
    9d33efd9a791 ("USB: ldusb bugfix").
    
    The lock did not cover the update of the tail index once the entry had
    been processed, something which could lead to memory corruption on
    weakly ordered architectures or due to compiler optimisations.
    
    Specifically, a completion handler running on another CPU might observe
    the incremented tail index and update the entry before ld_usb_read() is
    done with it.
    
    Fixes: 2824bd250f0b ("[PATCH] USB: add ldusb driver")
    Fixes: 9d33efd9a791 ("USB: ldusb bugfix")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191022143203.5260-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85c9ece11264499890d0e9f0dee431ac1bda981c
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 28 10:54:26 2019 -0400

    USB: gadget: Reject endpoints with 0 maxpacket value
    
    commit 54f83b8c8ea9b22082a496deadf90447a326954e upstream.
    
    Endpoints with a maxpacket length of 0 are probably useless.  They
    can't transfer any data, and it's not at all unlikely that a UDC will
    crash or hang when trying to handle a non-zero-length usb_request for
    such an endpoint.  Indeed, dummy-hcd gets a divide error when trying
    to calculate the remainder of a transfer length by the maxpacket
    value, as discovered by the syzbot fuzzer.
    
    Currently the gadget core does not check for endpoints having a
    maxpacket value of 0.  This patch adds a check to usb_ep_enable(),
    preventing such endpoints from being used.
    
    As far as I know, none of the gadget drivers in the kernel tries to
    create an endpoint with maxpacket = 0, but until now there has been
    nothing to prevent userspace programs under gadgetfs or configfs from
    doing it.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: syzbot+8ab8bf161038a8768553@syzkaller.appspotmail.com
    CC: <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.1910281052370.1485-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57d1b568570e9ee6c09e3caa859558ad08055e94
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Oct 23 11:34:33 2019 -0400

    UAS: Revert commit 3ae62a42090f ("UAS: fix alignment of scatter/gather segments")
    
    commit 1186f86a71130a7635a20843e355bb880c7349b2 upstream.
    
    Commit 3ae62a42090f ("UAS: fix alignment of scatter/gather segments"),
    copying a similar commit for usb-storage, attempted to solve a problem
    involving scatter-gather I/O and USB/IP by setting the
    virt_boundary_mask for mass-storage devices.
    
    However, it now turns out that the analogous change in usb-storage
    interacted badly with commit 09324d32d2a0 ("block: force an unlimited
    segment size on queues with a virt boundary"), which was added later.
    A typical error message is:
    
            ehci-pci 0000:00:13.2: swiotlb buffer is full (sz: 327680 bytes),
            total 32768 (slots), used 97 (slots)
    
    There is no longer any reason to keep the virt_boundary_mask setting
    in the uas driver.  It was needed in the first place only for
    handling devices with a block size smaller than the maxpacket size and
    where the host controller was not capable of fully general
    scatter-gather operation (that is, able to merge two SG segments into
    a single USB packet).  But:
    
            High-speed or slower connections never use a bulk maxpacket
            value larger than 512;
    
            The SCSI layer does not handle block devices with a block size
            smaller than 512 bytes;
    
            All the host controllers capable of SuperSpeed operation can
            handle fully general SG;
    
            Since commit ea44d190764b ("usbip: Implement SG support to
            vhci-hcd and stub driver") was merged, the USB/IP driver can
            also handle SG.
    
    Therefore all supported device/controller combinations should be okay
    with no need for any special virt_boundary_mask.  So in order to head
    off potential problems similar to those affecting usb-storage, this
    patch reverts commit 3ae62a42090f.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Oliver Neukum <oneukum@suse.com>
    CC: <stable@vger.kernel.org>
    Acked-by: Christoph Hellwig <hch@lst.de>
    Fixes: 3ae62a42090f ("UAS: fix alignment of scatter/gather segments")
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.1910231132470.1878-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb1f3cec555d69ed80fca7ba249a4ca20ae5b808
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sat Oct 26 12:06:20 2019 +0900

    ALSA: bebob: Fix prototype of helper function to return negative value
    
    commit f2bbdbcb075f3977a53da3bdcb7cd460bc8ae5f2 upstream.
    
    A helper function of ALSA bebob driver returns negative value in a
    function which has a prototype to return unsigned value.
    
    This commit fixes it by changing the prototype.
    
    Fixes: eb7b3a056cd8 ("ALSA: bebob: Add commands and connections/streams management")
    Cc: <stable@vger.kernel.org> # v3.16+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20191026030620.12077-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cdc9e836cb3603634e6839602fe00c5bfc2ebf0
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Oct 23 14:26:37 2019 +0200

    fuse: truncate pending writes on O_TRUNC
    
    commit e4648309b85a78f8c787457832269a8712a8673e upstream.
    
    Make sure cached writes are not reordered around open(..., O_TRUNC), with
    the obvious wrong results.
    
    Fixes: 4d99ff8f12eb ("fuse: Turn writeback cache on")
    Cc: <stable@vger.kernel.org> # v3.15+
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb4b7a625cfe7e87343b1458329c23c53d4bde59
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Oct 23 14:26:37 2019 +0200

    fuse: flush dirty data/metadata before non-truncate setattr
    
    commit b24e7598db62386a95a3c8b9c75630c5d56fe077 upstream.
    
    If writeback cache is enabled, then writes might get reordered with
    chmod/chown/utimes.  The problem with this is that performing the write in
    the fuse daemon might itself change some of these attributes.  In such case
    the following sequence of operations will result in file ending up with the
    wrong mode, for example:
    
      int fd = open ("suid", O_WRONLY|O_CREAT|O_EXCL);
      write (fd, "1", 1);
      fchown (fd, 0, 0);
      fchmod (fd, 04755);
      close (fd);
    
    This patch fixes this by flushing pending writes before performing
    chown/chmod/utimes.
    
    Reported-by: Giuseppe Scrivano <gscrivan@redhat.com>
    Tested-by: Giuseppe Scrivano <gscrivan@redhat.com>
    Fixes: 4d99ff8f12eb ("fuse: Turn writeback cache on")
    Cc: <stable@vger.kernel.org> # v3.15+
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7619be74f341630989c7edfd21a9ed8f51ab2d1
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    [ Upstream commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5 ]
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6370781b38cf34b6f6a9bc5dce110bd89281c628
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Jul 4 08:46:07 2018 +0300

    thunderbolt: Use 32-bit writes when writing ring producer/consumer
    
    [ Upstream commit 943795219d3cb9f8ce6ce51cad3ffe1f61e95c6b ]
    
    The register access should be using 32-bit reads/writes according to the
    datasheet. With the previous generation hardware 16-bit writes have been
    working but starting with ICL this is not the case anymore so fix
    producer/consumer register update to use correct width register address.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Yehezkel Bernat <YehezkelShB@gmail.com>
    Tested-by: Mario Limonciello <mario.limonciello@dell.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5092315078485b39934ee0e512fa0e56093d1e69
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Oct 11 17:11:15 2019 +0300

    USB: legousbtower: fix a signedness bug in tower_probe()
    
    [ Upstream commit fd47a417e75e2506eb3672ae569b1c87e3774155 ]
    
    The problem is that sizeof() is unsigned long so negative error codes
    are type promoted to high positive values and the condition becomes
    false.
    
    Fixes: 1d427be4a39d ("USB: legousbtower: fix slab info leak at probe")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191011141115.GA4521@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b36612b863c8f5dce738f6e2b7ae9b8bd6116b2d
Author: Petr Mladek <pmladek@suse.com>
Date:   Fri Oct 11 16:21:34 2019 +0200

    tracing: Initialize iter->seq after zeroing in tracing_read_pipe()
    
    [ Upstream commit d303de1fcf344ff7c15ed64c3f48a991c9958775 ]
    
    A customer reported the following softlockup:
    
    [899688.160002] NMI watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [test.sh:16464]
    [899688.160002] CPU: 0 PID: 16464 Comm: test.sh Not tainted 4.12.14-6.23-azure #1 SLE12-SP4
    [899688.160002] RIP: 0010:up_write+0x1a/0x30
    [899688.160002] Kernel panic - not syncing: softlockup: hung tasks
    [899688.160002] RIP: 0010:up_write+0x1a/0x30
    [899688.160002] RSP: 0018:ffffa86784d4fde8 EFLAGS: 00000257 ORIG_RAX: ffffffffffffff12
    [899688.160002] RAX: ffffffff970fea00 RBX: 0000000000000001 RCX: 0000000000000000
    [899688.160002] RDX: ffffffff00000001 RSI: 0000000000000080 RDI: ffffffff970fea00
    [899688.160002] RBP: ffffffffffffffff R08: ffffffffffffffff R09: 0000000000000000
    [899688.160002] R10: 0000000000000000 R11: 0000000000000000 R12: ffff8b59014720d8
    [899688.160002] R13: ffff8b59014720c0 R14: ffff8b5901471090 R15: ffff8b5901470000
    [899688.160002]  tracing_read_pipe+0x336/0x3c0
    [899688.160002]  __vfs_read+0x26/0x140
    [899688.160002]  vfs_read+0x87/0x130
    [899688.160002]  SyS_read+0x42/0x90
    [899688.160002]  do_syscall_64+0x74/0x160
    
    It caught the process in the middle of trace_access_unlock(). There is
    no loop. So, it must be looping in the caller tracing_read_pipe()
    via the "waitagain" label.
    
    Crashdump analyze uncovered that iter->seq was completely zeroed
    at this point, including iter->seq.seq.size. It means that
    print_trace_line() was never able to print anything and
    there was no forward progress.
    
    The culprit seems to be in the code:
    
            /* reset all but tr, trace, and overruns */
            memset(&iter->seq, 0,
                   sizeof(struct trace_iterator) -
                   offsetof(struct trace_iterator, seq));
    
    It was added by the commit 53d0aa773053ab182877 ("ftrace:
    add logic to record overruns"). It was v2.6.27-rc1.
    It was the time when iter->seq looked like:
    
         struct trace_seq {
            unsigned char           buffer[PAGE_SIZE];
            unsigned int            len;
         };
    
    There was no "size" variable and zeroing was perfectly fine.
    
    The solution is to reinitialize the structure after or without
    zeroing.
    
    Link: http://lkml.kernel.org/r/20191011142134.11997-1-pmladek@suse.com
    
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4cec9236988058b7e9cf5a57120c1e48c2108c6
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Fri Oct 4 09:58:54 2019 -0400

    NFSv4: Fix leak of clp->cl_acceptor string
    
    [ Upstream commit 1047ec868332034d1fbcb2fae19fe6d4cb869ff2 ]
    
    Our client can issue multiple SETCLIENTID operations to the same
    server in some circumstances. Ensure that calls to
    nfs4_proc_setclientid() after the first one do not overwrite the
    previously allocated cl_acceptor string.
    
    unreferenced object 0xffff888461031800 (size 32):
      comm "mount.nfs", pid 2227, jiffies 4294822467 (age 1407.749s)
      hex dump (first 32 bytes):
        6e 66 73 40 6b 6c 69 6d 74 2e 69 62 2e 31 30 31  nfs@klimt.ib.101
        35 67 72 61 6e 67 65 72 2e 6e 65 74 00 00 00 00  5granger.net....
      backtrace:
        [<00000000ab820188>] __kmalloc+0x128/0x176
        [<00000000eeaf4ec8>] gss_stringify_acceptor+0xbd/0x1a7 [auth_rpcgss]
        [<00000000e85e3382>] nfs4_proc_setclientid+0x34e/0x46c [nfsv4]
        [<000000003d9cf1fa>] nfs40_discover_server_trunking+0x7a/0xed [nfsv4]
        [<00000000b81c3787>] nfs4_discover_server_trunking+0x81/0x244 [nfsv4]
        [<000000000801b55f>] nfs4_init_client+0x1b0/0x238 [nfsv4]
        [<00000000977daf7f>] nfs4_set_client+0xfe/0x14d [nfsv4]
        [<0000000053a68a2a>] nfs4_create_server+0x107/0x1db [nfsv4]
        [<0000000088262019>] nfs4_remote_mount+0x2c/0x59 [nfsv4]
        [<00000000e84a2fd0>] legacy_get_tree+0x2d/0x4c
        [<00000000797e947c>] vfs_get_tree+0x20/0xc7
        [<00000000ecabaaa8>] fc_mount+0xe/0x36
        [<00000000f15fafc2>] vfs_kern_mount+0x74/0x8d
        [<00000000a3ff4e26>] nfs_do_root_mount+0x8a/0xa3 [nfsv4]
        [<00000000d1c2b337>] nfs4_try_mount+0x58/0xad [nfsv4]
        [<000000004c9bddee>] nfs_fs_mount+0x820/0x869 [nfs]
    
    Fixes: f11b2a1cfbf5 ("nfs4: copy acceptor name from context ... ")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a5c21af789d6871de3f05185e221fb7eea6804b
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Wed Oct 9 17:10:56 2019 +0200

    MIPS: fw: sni: Fix out of bounds init of o32 stack
    
    [ Upstream commit efcb529694c3b707dc0471b312944337ba16e4dd ]
    
    Use ARRAY_SIZE to caluculate the top of the o32 stack.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23d94f1fec0aec5e547ae0c96c5da28d12fa652c
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sun Oct 6 17:57:57 2019 -0700

    fs: ocfs2: fix a possible null-pointer dereference in ocfs2_info_scan_inode_alloc()
    
    [ Upstream commit 2abb7d3b12d007c30193f48bebed781009bebdd2 ]
    
    In ocfs2_info_scan_inode_alloc(), there is an if statement on line 283
    to check whether inode_alloc is NULL:
    
        if (inode_alloc)
    
    When inode_alloc is NULL, it is used on line 287:
    
        ocfs2_inode_lock(inode_alloc, &bh, 0);
            ocfs2_inode_lock_full_nested(inode, ...)
                struct ocfs2_super *osb = OCFS2_SB(inode->i_sb);
    
    Thus, a possible null-pointer dereference may occur.
    
    To fix this bug, inode_alloc is checked on line 286.
    
    This bug is found by a static analysis tool STCheck written by us.
    
    Link: http://lkml.kernel.org/r/20190726033717.32359-1-baijiaju1990@gmail.com
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cbc762f5c763035c5978e449318670325673f3b
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sun Oct 6 17:57:50 2019 -0700

    fs: ocfs2: fix possible null-pointer dereferences in ocfs2_xa_prepare_entry()
    
    [ Upstream commit 56e94ea132bb5c2c1d0b60a6aeb34dcb7d71a53d ]
    
    In ocfs2_xa_prepare_entry(), there is an if statement on line 2136 to
    check whether loc->xl_entry is NULL:
    
        if (loc->xl_entry)
    
    When loc->xl_entry is NULL, it is used on line 2158:
    
        ocfs2_xa_add_entry(loc, name_hash);
            loc->xl_entry->xe_name_hash = cpu_to_le32(name_hash);
            loc->xl_entry->xe_name_offset = cpu_to_le16(loc->xl_size);
    
    and line 2164:
    
        ocfs2_xa_add_namevalue(loc, xi);
            loc->xl_entry->xe_value_size = cpu_to_le64(xi->xi_value_len);
            loc->xl_entry->xe_name_len = xi->xi_name_len;
    
    Thus, possible null-pointer dereferences may occur.
    
    To fix these bugs, if loc-xl_entry is NULL, ocfs2_xa_prepare_entry()
    abnormally returns with -EINVAL.
    
    These bugs are found by a static analysis tool STCheck written by us.
    
    [akpm@linux-foundation.org: remove now-unused ocfs2_xa_add_entry()]
    Link: http://lkml.kernel.org/r/20190726101447.9153-1-baijiaju1990@gmail.com
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20cd8a5d2224f9d56ff4f3a19746dce5f92920a4
Author: Dave Young <dyoung@redhat.com>
Date:   Wed Oct 2 18:59:04 2019 +0200

    efi/x86: Do not clean dummy variable in kexec path
    
    [ Upstream commit 2ecb7402cfc7f22764e7bbc80790e66eadb20560 ]
    
    kexec reboot fails randomly in UEFI based KVM guest.  The firmware
    just resets while calling efi_delete_dummy_variable();  Unfortunately
    I don't know how to debug the firmware, it is also possible a potential
    problem on real hardware as well although nobody reproduced it.
    
    The intention of the efi_delete_dummy_variable is to trigger garbage collection
    when entering virtual mode.  But SetVirtualAddressMap can only run once
    for each physical reboot, thus kexec_enter_virtual_mode() is not necessarily
    a good place to clean a dummy object.
    
    Drop the efi_delete_dummy_variable so that kexec reboot can work.
    
    Signed-off-by: Dave Young <dyoung@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Acked-by: Matthew Garrett <mjg59@google.com>
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: Jerry Snitselaar <jsnitsel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Octavian Purdila <octavian.purdila@intel.com>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Scott Talbert <swt@techie.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191002165904.8819-8-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 492fbc76b94e55fb4d2fa40a756e4c20218f9b32
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Oct 2 18:58:58 2019 +0200

    efi/cper: Fix endianness of PCIe class code
    
    [ Upstream commit 6fb9367a15d1a126d222d738b2702c7958594a5f ]
    
    The CPER parser assumes that the class code is big endian, but at least
    on this edk2-derived Intel Purley platform it's little endian:
    
        efi: EFI v2.50 by EDK II BIOS ID:PLYDCRB1.86B.0119.R05.1701181843
        DMI: Intel Corporation PURLEY/PURLEY, BIOS PLYDCRB1.86B.0119.R05.1701181843 01/18/2017
    
        {1}[Hardware Error]:   device_id: 0000:5d:00.0
        {1}[Hardware Error]:   slot: 0
        {1}[Hardware Error]:   secondary_bus: 0x5e
        {1}[Hardware Error]:   vendor_id: 0x8086, device_id: 0x2030
        {1}[Hardware Error]:   class_code: 000406
                                           ^^^^^^ (should be 060400)
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: Jerry Snitselaar <jsnitsel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Lyude Paul <lyude@redhat.com>
    Cc: Matthew Garrett <mjg59@google.com>
    Cc: Octavian Purdila <octavian.purdila@intel.com>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Scott Talbert <swt@techie.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Cc: linux-integrity@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191002165904.8819-2-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5290a8f6585b310cb55e393b4f6674f2347de408
Author: Adam Ford <aford173@gmail.com>
Date:   Sun Oct 6 11:33:11 2019 -0500

    serial: mctrl_gpio: Check for NULL pointer
    
    [ Upstream commit 37e3ab00e4734acc15d96b2926aab55c894f4d9c ]
    
    When using mctrl_gpio_to_gpiod, it dereferences gpios into a single
    requested GPIO.  This dereferencing can break if gpios is NULL,
    so this patch adds a NULL check before dereferencing it.  If
    gpios is NULL, this function will also return NULL.
    
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Reviewed-by: Yegor Yefremov <yegorslists@googlemail.com>
    Link: https://lore.kernel.org/r/20191006163314.23191-1-aford173@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a2437482cc00b48b66c7b8b93a1b2aae86b2206
Author: Austin Kim <austindh.kim@gmail.com>
Date:   Tue Oct 1 16:34:13 2019 +0900

    fs: cifs: mute -Wunused-const-variable message
    
    [ Upstream commit dd19c106a36690b47bb1acc68372f2b472b495b8 ]
    
    After 'Initial git repository build' commit,
    'mapping_table_ERRHRD' variable has not been used.
    
    So 'mapping_table_ERRHRD' const variable could be removed
    to mute below warning message:
    
       fs/cifs/netmisc.c:120:40: warning: unused variable 'mapping_table_ERRHRD' [-Wunused-const-variable]
       static const struct smb_to_posix_error mapping_table_ERRHRD[] = {
                                               ^
    Signed-off-by: Austin Kim <austindh.kim@gmail.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8ae287cff0733a064a331ad9a9756d163520711
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Sep 30 16:16:54 2019 -0700

    RDMA/iwcm: Fix a lock inversion issue
    
    [ Upstream commit b66f31efbdad95ec274345721d99d1d835e6de01 ]
    
    This patch fixes the lock inversion complaint:
    
    ============================================
    WARNING: possible recursive locking detected
    5.3.0-rc7-dbg+ #1 Not tainted
    --------------------------------------------
    kworker/u16:6/171 is trying to acquire lock:
    00000000035c6e6c (&id_priv->handler_mutex){+.+.}, at: rdma_destroy_id+0x78/0x4a0 [rdma_cm]
    
    but task is already holding lock:
    00000000bc7c307d (&id_priv->handler_mutex){+.+.}, at: iw_conn_req_handler+0x151/0x680 [rdma_cm]
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&id_priv->handler_mutex);
      lock(&id_priv->handler_mutex);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    3 locks held by kworker/u16:6/171:
     #0: 00000000e2eaa773 ((wq_completion)iw_cm_wq){+.+.}, at: process_one_work+0x472/0xac0
     #1: 000000001efd357b ((work_completion)(&work->work)#3){+.+.}, at: process_one_work+0x476/0xac0
     #2: 00000000bc7c307d (&id_priv->handler_mutex){+.+.}, at: iw_conn_req_handler+0x151/0x680 [rdma_cm]
    
    stack backtrace:
    CPU: 3 PID: 171 Comm: kworker/u16:6 Not tainted 5.3.0-rc7-dbg+ #1
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    Workqueue: iw_cm_wq cm_work_handler [iw_cm]
    Call Trace:
     dump_stack+0x8a/0xd6
     __lock_acquire.cold+0xe1/0x24d
     lock_acquire+0x106/0x240
     __mutex_lock+0x12e/0xcb0
     mutex_lock_nested+0x1f/0x30
     rdma_destroy_id+0x78/0x4a0 [rdma_cm]
     iw_conn_req_handler+0x5c9/0x680 [rdma_cm]
     cm_work_handler+0xe62/0x1100 [iw_cm]
     process_one_work+0x56d/0xac0
     worker_thread+0x7a/0x5d0
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    This is not a bug as there are actually two lock classes here.
    
    Link: https://lore.kernel.org/r/20190930231707.48259-3-bvanassche@acm.org
    Fixes: de910bd92137 ("RDMA/cma: Simplify locking needed for serialization of callbacks")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd7d309e52f959df89022cc5414ea0108f57c13e
Author: Steve MacLean <Steve.MacLean@microsoft.com>
Date:   Sat Sep 28 01:39:00 2019 +0000

    perf map: Fix overlapped map handling
    
    [ Upstream commit ee212d6ea20887c0ef352be8563ca13dbf965906 ]
    
    Whenever an mmap/mmap2 event occurs, the map tree must be updated to add a new
    entry. If a new map overlaps a previous map, the overlapped section of the
    previous map is effectively unmapped, but the non-overlapping sections are
    still valid.
    
    maps__fixup_overlappings() is responsible for creating any new map entries from
    the previously overlapped map. It optionally creates a before and an after map.
    
    When creating the after map the existing code failed to adjust the map.pgoff.
    This meant the new after map would incorrectly calculate the file offset
    for the ip. This results in incorrect symbol name resolution for any ip in the
    after region.
    
    Make maps__fixup_overlappings() correctly populate map.pgoff.
    
    Add an assert that new mapping matches old mapping at the beginning of
    the after map.
    
    Committer-testing:
    
    Validated correct parsing of libcoreclr.so symbols from .NET Core 3.0 preview9
    (which didn't strip symbols).
    
    Preparation:
    
      ~/dotnet3.0-preview9/dotnet new webapi -o perfSymbol
      cd perfSymbol
      ~/dotnet3.0-preview9/dotnet publish
      perf record ~/dotnet3.0-preview9/dotnet \
          bin/Debug/netcoreapp3.0/publish/perfSymbol.dll
      ^C
    
    Before:
    
      perf script --show-mmap-events 2>&1 | grep -e MMAP -e unknown |\
         grep libcoreclr.so | head -n 4
            dotnet  1907 373352.698780: PERF_RECORD_MMAP2 1907/1907: \
                [0x7fe615726000(0x768000) @ 0 08:02 5510620 765057155]: \
                r-xp .../3.0.0-preview9-19423-09/libcoreclr.so
            dotnet  1907 373352.701091: PERF_RECORD_MMAP2 1907/1907: \
                [0x7fe615974000(0x1000) @ 0x24e000 08:02 5510620 765057155]: \
                rwxp .../3.0.0-preview9-19423-09/libcoreclr.so
            dotnet  1907 373352.701241: PERF_RECORD_MMAP2 1907/1907: \
                [0x7fe615c42000(0x1000) @ 0x51c000 08:02 5510620 765057155]: \
                rwxp .../3.0.0-preview9-19423-09/libcoreclr.so
            dotnet  1907 373352.705249:     250000 cpu-clock: \
                 7fe6159a1f99 [unknown] \
                 (.../3.0.0-preview9-19423-09/libcoreclr.so)
    
    After:
    
      perf script --show-mmap-events 2>&1 | grep -e MMAP -e unknown |\
         grep libcoreclr.so | head -n 4
            dotnet  1907 373352.698780: PERF_RECORD_MMAP2 1907/1907: \
                [0x7fe615726000(0x768000) @ 0 08:02 5510620 765057155]: \
                r-xp .../3.0.0-preview9-19423-09/libcoreclr.so
            dotnet  1907 373352.701091: PERF_RECORD_MMAP2 1907/1907: \
                [0x7fe615974000(0x1000) @ 0x24e000 08:02 5510620 765057155]: \
                rwxp .../3.0.0-preview9-19423-09/libcoreclr.so
            dotnet  1907 373352.701241: PERF_RECORD_MMAP2 1907/1907: \
                [0x7fe615c42000(0x1000) @ 0x51c000 08:02 5510620 765057155]: \
                rwxp .../3.0.0-preview9-19423-09/libcoreclr.so
    
    All the [unknown] symbols were resolved.
    
    Signed-off-by: Steve MacLean <Steve.MacLean@Microsoft.com>
    Tested-by: Brian Robbins <brianrob@microsoft.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Eric Saint-Etienne <eric.saint.etienne@oracle.com>
    Cc: John Keeping <john@metanate.com>
    Cc: John Salem <josalem@microsoft.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Tom McDonald <thomas.mcdonald@microsoft.com>
    Link: http://lore.kernel.org/lkml/BN8PR21MB136270949F22A6A02335C238F7800@BN8PR21MB1362.namprd21.prod.outlook.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74ebfbc9ec0c8f94e9de75bdee36b0e1b87a6a71
Author: Pascal Bouwmann <bouwmann@tau-tec.de>
Date:   Thu Aug 29 07:29:41 2019 +0200

    iio: fix center temperature of bmc150-accel-core
    
    [ Upstream commit 6c59a962e081df6d8fe43325bbfabec57e0d4751 ]
    
    The center temperature of the supported devices stored in the constant
    BMC150_ACCEL_TEMP_CENTER_VAL is not 24 degrees but 23 degrees.
    
    It seems that some datasheets were inconsistent on this value leading
    to the error.  For most usecases will only make minor difference so
    not queued for stable.
    
    Signed-off-by: Pascal Bouwmann <bouwmann@tau-tec.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d11387f82bf19b2e200fdd2cb69cc88607b07f8
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Feb 18 16:36:48 2019 -0800

    exec: load_script: Do not exec truncated interpreter path
    
    [ Upstream commit b5372fe5dc84235dbe04998efdede3c4daa866a9 ]
    
    Commit 8099b047ecc4 ("exec: load_script: don't blindly truncate
    shebang string") was trying to protect against a confused exec of a
    truncated interpreter path. However, it was overeager and also refused
    to truncate arguments as well, which broke userspace, and it was
    reverted. This attempts the protection again, but allows arguments to
    remain truncated. In an effort to improve readability, helper functions
    and comments have been added.
    
    Co-developed-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Samuel Dionne-Riel <samuel@dionne-riel.com>
    Cc: Richard Weinberger <richard.weinberger@gmail.com>
    Cc: Graham Christensen <graham@grahamc.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcc987e8792aba817060133a1ab867574749bacb
Author: Jan-Marek Glogowski <glogow@fbihome.de>
Date:   Fri Feb 1 13:52:31 2019 +0100

    usb: handle warm-reset port requests on hub resume
    
    [ Upstream commit 4fdc1790e6a9ef22399c6bc6e63b80f4609f3b7e ]
    
    On plug-in of my USB-C device, its USB_SS_PORT_LS_SS_INACTIVE
    link state bit is set. Greping all the kernel for this bit shows
    that the port status requests a warm-reset this way.
    
    This just happens, if its the only device on the root hub, the hub
    therefore resumes and the HCDs status_urb isn't yet available.
    If a warm-reset request is detected, this sets the hubs event_bits,
    which will prevent any auto-suspend and allows the hubs workqueue
    to warm-reset the port later in port_event.
    
    Signed-off-by: Jan-Marek Glogowski <glogow@fbihome.de>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3ffb896a35600f2f67559ad61bc97faaca84b21
Author: Brian Norris <briannorris@chromium.org>
Date:   Wed Nov 14 18:11:18 2018 -0800

    scripts/setlocalversion: Improve -dirty check with git-status --no-optional-locks
    
    [ Upstream commit ff64dd4857303dd5550faed9fd598ac90f0f2238 ]
    
    git-diff-index does not refresh the index for you, so using it for a
    "-dirty" check can give misleading results. Commit 6147b1cf19651
    ("scripts/setlocalversion: git: Make -dirty check more robust") tried to
    fix this by switching to git-status, but it overlooked the fact that
    git-status also writes to the .git directory of the source tree, which
    is definitely not kosher for an out-of-tree (O=) build. That is getting
    reverted.
    
    Fortunately, git-status now supports avoiding writing to the index via
    the --no-optional-locks flag, as of git 2.14. It still calculates an
    up-to-date index, but it avoids writing it out to the .git directory.
    
    So, let's retry the solution from commit 6147b1cf19651 using this new
    flag first, and if it fails, we assume this is an older version of git
    and just use the old git-diff-index method.
    
    It's hairy to get the 'grep -vq' (inverted matching) correct by stashing
    the output of git-status (you have to be careful about the difference
    betwen "empty stdin" and "blank line on stdin"), so just pipe the output
    directly to grep and use a regex that's good enough for both the
    git-status and git-diff-index version.
    
    Cc: Christian Kujau <lists@nerdbynature.de>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Suggested-by: Alexander Kapshuk <alexander.kapshuk@gmail.com>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Tested-by: Genki Sky <sky@genki.is>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78c5c5e077aedfa75df02a5c97a14e44b1e8083c
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Fri Jan 25 11:59:01 2019 -0800

    x86/cpu: Add Atom Tremont (Jacobsville)
    
    [ Upstream commit 00ae831dfe4474ef6029558f5eb3ef0332d80043 ]
    
    Add the Atom Tremont model number to the Intel family list.
    
    [ Tony: Also update comment at head of file to say "_X" suffix is
      also used for microserver parts. ]
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Aristeu Rozanski <aris@redhat.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Cc: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Cc: Megha Dey <megha.dey@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Cc: Rajneesh Bhardwaj <rajneesh.bhardwaj@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20190125195902.17109-4-tony.luck@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 548967e6351374b363d78f20d9bbe621c5e9003e
Author: Phil Elwell <phil@raspberrypi.org>
Date:   Wed Sep 12 15:31:56 2018 +0100

    sc16is7xx: Fix for "Unexpected interrupt: 8"
    
    [ Upstream commit 30ec514d440cf2c472c8e4b0079af2c731f71a3e ]
    
    The SC16IS752 has an Enhanced Feature Register which is aliased at the
    same address as the Interrupt Identification Register; accessing it
    requires that a magic value is written to the Line Configuration
    Register. If an interrupt is raised while the EFR is mapped in then
    the ISR won't be able to access the IIR, leading to the "Unexpected
    interrupt" error messages.
    
    Avoid the problem by claiming a mutex around accesses to the EFR
    register, also claiming the mutex in the interrupt handler work
    item (this is equivalent to disabling interrupts to interlock against
    a non-threaded interrupt handler).
    
    See: https://github.com/raspberrypi/linux/issues/2529
    
    Signed-off-by: Phil Elwell <phil@raspberrypi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9b19e637bd9a1fbf318416e040073233969e582
Author: Kent Overstreet <kent.overstreet@gmail.com>
Date:   Tue Jun 5 05:26:33 2018 -0400

    dm: Use kzalloc for all structs with embedded biosets/mempools
    
    [ Upstream commit d377535405686f735b90a8ad4ba269484cd7c96e ]
    
    mempool_init()/bioset_init() require that the mempools/biosets be zeroed
    first; they probably should not _require_ this, but not allocating those
    structs with kzalloc is a fairly nonsensical thing to do (calling
    mempool_exit()/bioset_exit() on an uninitialized mempool/bioset is legal
    and safe, but only works if said memory was zeroed.)
    
    Acked-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Kent Overstreet <kent.overstreet@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40dbcbebf0e0b51eeef8ae150a62ffd03ee57c57
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Oct 2 06:15:53 2019 -0400

    dm snapshot: rework COW throttling to fix deadlock
    
    [ Upstream commit b21555786f18cd77f2311ad89074533109ae3ffa ]
    
    Commit 721b1d98fb517a ("dm snapshot: Fix excessive memory usage and
    workqueue stalls") introduced a semaphore to limit the maximum number of
    in-flight kcopyd (COW) jobs.
    
    The implementation of this throttling mechanism is prone to a deadlock:
    
    1. One or more threads write to the origin device causing COW, which is
       performed by kcopyd.
    
    2. At some point some of these threads might reach the s->cow_count
       semaphore limit and block in down(&s->cow_count), holding a read lock
       on _origins_lock.
    
    3. Someone tries to acquire a write lock on _origins_lock, e.g.,
       snapshot_ctr(), which blocks because the threads at step (2) already
       hold a read lock on it.
    
    4. A COW operation completes and kcopyd runs dm-snapshot's completion
       callback, which ends up calling pending_complete().
       pending_complete() tries to resubmit any deferred origin bios. This
       requires acquiring a read lock on _origins_lock, which blocks.
    
       This happens because the read-write semaphore implementation gives
       priority to writers, meaning that as soon as a writer tries to enter
       the critical section, no readers will be allowed in, until all
       writers have completed their work.
    
       So, pending_complete() waits for the writer at step (3) to acquire
       and release the lock. This writer waits for the readers at step (2)
       to release the read lock and those readers wait for
       pending_complete() (the kcopyd thread) to signal the s->cow_count
       semaphore: DEADLOCK.
    
    The above was thoroughly analyzed and documented by Nikos Tsironis as
    part of his initial proposal for fixing this deadlock, see:
    https://www.redhat.com/archives/dm-devel/2019-October/msg00001.html
    
    Fix this deadlock by reworking COW throttling so that it waits without
    holding any locks. Add a variable 'in_progress' that counts how many
    kcopyd jobs are running. A function wait_for_in_progress() will sleep if
    'in_progress' is over the limit. It drops _origins_lock in order to
    avoid the deadlock.
    
    Reported-by: Guruswamy Basavaiah <guru2018@gmail.com>
    Reported-by: Nikos Tsironis <ntsironis@arrikto.com>
    Reviewed-by: Nikos Tsironis <ntsironis@arrikto.com>
    Tested-by: Nikos Tsironis <ntsironis@arrikto.com>
    Fixes: 721b1d98fb51 ("dm snapshot: Fix excessive memory usage and workqueue stalls")
    Cc: stable@vger.kernel.org # v5.0+
    Depends-on: 4a3f111a73a8c ("dm snapshot: introduce account_start_copy() and account_end_copy()")
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e10ef97a2ec45b1323939f978055b08429d4b4c1
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Oct 2 06:14:17 2019 -0400

    dm snapshot: introduce account_start_copy() and account_end_copy()
    
    [ Upstream commit a2f83e8b0c82c9500421a26c49eb198b25fcdea3 ]
    
    This simple refactoring moves code for modifying the semaphore cow_count
    into separate functions to prepare for changes that will extend these
    methods to provide for a more sophisticated mechanism for COW
    throttling.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Reviewed-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eda053db0782296e4c074e9e3096630581bccdae
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Nov 23 16:15:43 2017 -0500

    dm snapshot: use mutex instead of rw_semaphore
    
    [ Upstream commit ae1093be5a0ef997833e200a0dafb9ed0b1ff4fe ]
    
    The rw_semaphore is acquired for read only in two places, neither is
    performance-critical.  So replace it with a mutex -- which is more
    efficient.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
