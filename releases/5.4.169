commit 4ca2eaf1d477ce4316989b22e765fb915652b86e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 29 12:23:38 2021 +0100

    Linux 5.4.169
    
    Link: https://lore.kernel.org/r/20211227151320.801714429@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48c76fc53582e7f13c1e0b11c916e503256c4d0b
Author: Rémi Denis-Courmont <remi@remlab.net>
Date:   Sun Dec 19 19:03:39 2021 +0200

    phonet/pep: refuse to enable an unbound pipe
    
    commit 75a2f31520095600f650597c0ac41f48b5ba0068 upstream.
    
    This ioctl() implicitly assumed that the socket was already bound to
    a valid local socket name, i.e. Phonet object. If the socket was not
    bound, two separate problems would occur:
    
    1) We'd send an pipe enablement request with an invalid source object.
    2) Later socket calls could BUG on the socket unexpectedly being
       connected yet not bound to a valid object.
    
    Reported-by: syzbot+2dc91e7fc3dea88b1e8a@syzkaller.appspotmail.com
    Signed-off-by: Rémi Denis-Courmont <remi@remlab.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5c6a13e9056d87805ba3042c208fbd4164ad22b
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Dec 17 10:13:56 2021 +0800

    hamradio: improve the incomplete fix to avoid NPD
    
    commit b2f37aead1b82a770c48b5d583f35ec22aabb61e upstream.
    
    The previous commit 3e0588c291d6 ("hamradio: defer ax25 kfree after
    unregister_netdev") reorder the kfree operations and unregister_netdev
    operation to prevent UAF.
    
    This commit improves the previous one by also deferring the nullify of
    the ax->tty pointer. Otherwise, a NULL pointer dereference bug occurs.
    Partial of the stack trace is shown below.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000538
    RIP: 0010:ax_xmit+0x1f9/0x400
    ...
    Call Trace:
     dev_hard_start_xmit+0xec/0x320
     sch_direct_xmit+0xea/0x240
     __qdisc_run+0x166/0x5c0
     __dev_queue_xmit+0x2c7/0xaf0
     ax25_std_establish_data_link+0x59/0x60
     ax25_connect+0x3a0/0x500
     ? security_socket_connect+0x2b/0x40
     __sys_connect+0x96/0xc0
     ? __hrtimer_init+0xc0/0xc0
     ? common_nsleep+0x2e/0x50
     ? switch_fpu_return+0x139/0x1a0
     __x64_sys_connect+0x11/0x20
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The crash point is shown as below
    
    static void ax_encaps(...) {
      ...
      set_bit(TTY_DO_WRITE_WAKEUP, &ax->tty->flags); // ax->tty = NULL!
      ...
    }
    
    By placing the nullify action after the unregister_netdev, the ax->tty
    pointer won't be assigned as NULL net_device framework layer is well
    synchronized.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef5f7bfa19e3fc366f4c6d1a841ceaddf7a9f5d4
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 8 18:37:21 2021 +0800

    hamradio: defer ax25 kfree after unregister_netdev
    
    commit 3e0588c291d6ce225f2b891753ca41d45ba42469 upstream.
    
    There is a possible race condition (use-after-free) like below
    
     (USE)                       |  (FREE)
    ax25_sendmsg                 |
     ax25_queue_xmit             |
      dev_queue_xmit             |
       __dev_queue_xmit          |
        __dev_xmit_skb           |
         sch_direct_xmit         | ...
          xmit_one               |
           netdev_start_xmit     | tty_ldisc_kill
            __netdev_start_xmit  |  mkiss_close
             ax_xmit             |   kfree
              ax_encaps          |
                                 |
    
    Even though there are two synchronization primitives before the kfree:
    1. wait_for_completion(&ax->dead). This can prevent the race with
    routines from mkiss_ioctl. However, it cannot stop the routine coming
    from upper layer, i.e., the ax25_sendmsg.
    
    2. netif_stop_queue(ax->dev). It seems that this line of code aims to
    halt the transmit queue but it fails to stop the routine that already
    being xmit.
    
    This patch reorder the kfree after the unregister_netdev to avoid the
    possible UAF as the unregister_netdev() is well synchronized and won't
    return if there is a running routine.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df8f79bcc2e431bb6e1f0a8202cd2b06fd429889
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Dec 17 10:29:41 2021 +0800

    ax25: NPD bug when detaching AX25 device
    
    commit 1ade48d0c27d5da1ccf4b583d8c5fc8b534a3ac8 upstream.
    
    The existing cleanup routine implementation is not well synchronized
    with the syscall routine. When a device is detaching, below race could
    occur.
    
    static int ax25_sendmsg(...) {
      ...
      lock_sock()
      ax25 = sk_to_ax25(sk);
      if (ax25->ax25_dev == NULL) // CHECK
      ...
      ax25_queue_xmit(skb, ax25->ax25_dev->dev); // USE
      ...
    }
    
    static void ax25_kill_by_device(...) {
      ...
      if (s->ax25_dev == ax25_dev) {
        s->ax25_dev = NULL;
        ...
    }
    
    Other syscall functions like ax25_getsockopt, ax25_getname,
    ax25_info_show also suffer from similar races. To fix them, this patch
    introduce lock_sock() into ax25_kill_by_device in order to guarantee
    that the nullify action in cleanup routine cannot proceed when another
    socket request is pending.
    
    Signed-off-by: Hanjie Wu <nagi@zju.edu.cn>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0333eaf38500caa05c5c81de14a13328d0544f3c
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Fri Dec 3 13:42:22 2021 -0800

    hwmon: (lm90) Do not report 'busy' status bit as alarm
    
    commit cdc5287acad9ede121924a9c9313544b80d15842 upstream.
    
    Bit 7 of the status register indicates that the chip is busy
    doing a conversion. It does not indicate an alarm status.
    Stop reporting it as alarm status bit.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf260ff4a42f38824df8b9aaac08b780e80a7432
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Fri Nov 26 22:43:39 2021 -0800

    hwmom: (lm90) Fix citical alarm status for MAX6680/MAX6681
    
    commit da7dc0568491104c7acb632e9d41ddce9aaabbb1 upstream.
    
    Tests with a real chip and a closer look into the datasheet reveals
    that the local and remote critical alarm status bits are swapped for
    MAX6680/MAX6681.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f373298e1bf0c6ea097c0bcc558dc43ad53e421f
Author: Guodong Liu <guodong.liu@mediatek.corp-partner.google.com>
Date:   Wed Nov 10 15:19:00 2021 +0800

    pinctrl: mediatek: fix global-out-of-bounds issue
    
    commit 2d5446da5acecf9c67db1c9d55ae2c3e5de01f8d upstream.
    
    When eint virtual eint number is greater than gpio number,
    it maybe produce 'desc[eint_n]' size globle-out-of-bounds issue.
    
    Signed-off-by: Guodong Liu <guodong.liu@mediatek.corp-partner.google.com>
    Signed-off-by: Zhiyong Tao <zhiyong.tao@mediatek.com>
    Reviewed-by: Chen-Yu Tsai <wenst@chromium.org>
    Link: https://lore.kernel.org/r/20211110071900.4490-2-zhiyong.tao@mediatek.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf04afb6137fb76a9d8517fb07373ffcd0f3f283
Author: Andrey Ryabinin <arbn@yandex-team.com>
Date:   Fri Dec 24 21:12:35 2021 -0800

    mm: mempolicy: fix THP allocations escaping mempolicy restrictions
    
    commit 338635340669d5b317c7e8dcf4fff4a0f3651d87 upstream.
    
    alloc_pages_vma() may try to allocate THP page on the local NUMA node
    first:
    
            page = __alloc_pages_node(hpage_node,
                    gfp | __GFP_THISNODE | __GFP_NORETRY, order);
    
    And if the allocation fails it retries allowing remote memory:
    
            if (!page && (gfp & __GFP_DIRECT_RECLAIM))
                    page = __alloc_pages_node(hpage_node,
                                            gfp, order);
    
    However, this retry allocation completely ignores memory policy nodemask
    allowing allocation to escape restrictions.
    
    The first appearance of this bug seems to be the commit ac5b2c18911f
    ("mm: thp: relax __GFP_THISNODE for MADV_HUGEPAGE mappings").
    
    The bug disappeared later in the commit 89c83fb539f9 ("mm, thp:
    consolidate THP gfp handling into alloc_hugepage_direct_gfpmask") and
    reappeared again in slightly different form in the commit 76e654cc91bb
    ("mm, page_alloc: allow hugepage fallback to remote nodes when
    madvised")
    
    Fix this by passing correct nodemask to the __alloc_pages() call.
    
    The demonstration/reproducer of the problem:
    
        $ mount -oremount,size=4G,huge=always /dev/shm/
        $ echo always > /sys/kernel/mm/transparent_hugepage/defrag
        $ cat mbind_thp.c
        #include <unistd.h>
        #include <sys/mman.h>
        #include <sys/stat.h>
        #include <fcntl.h>
        #include <assert.h>
        #include <stdlib.h>
        #include <stdio.h>
        #include <numaif.h>
    
        #define SIZE 2ULL << 30
        int main(int argc, char **argv)
        {
            int fd;
            unsigned long long i;
            char *addr;
            pid_t pid;
            char buf[100];
            unsigned long nodemask = 1;
    
            fd = open("/dev/shm/test", O_RDWR|O_CREAT);
            assert(fd > 0);
            assert(ftruncate(fd, SIZE) == 0);
    
            addr = mmap(NULL, SIZE, PROT_READ|PROT_WRITE,
                               MAP_SHARED, fd, 0);
    
            assert(mbind(addr, SIZE, MPOL_BIND, &nodemask, 2, MPOL_MF_STRICT|MPOL_MF_MOVE)==0);
            for (i = 0; i < SIZE; i+=4096) {
              addr[i] = 1;
            }
            pid = getpid();
            snprintf(buf, sizeof(buf), "grep shm /proc/%d/numa_maps", pid);
            system(buf);
            sleep(10000);
    
            return 0;
        }
        $ gcc mbind_thp.c -o mbind_thp -lnuma
        $ numactl -H
        available: 2 nodes (0-1)
        node 0 cpus: 0 2
        node 0 size: 1918 MB
        node 0 free: 1595 MB
        node 1 cpus: 1 3
        node 1 size: 2014 MB
        node 1 free: 1731 MB
        node distances:
        node   0   1
          0:  10  20
          1:  20  10
        $ rm -f /dev/shm/test; taskset -c 0 ./mbind_thp
        7fd970a00000 bind:0 file=/dev/shm/test dirty=524288 active=0 N0=396800 N1=127488 kernelpagesize_kB=4
    
    Link: https://lkml.kernel.org/r/20211208165343.22349-1-arbn@yandex-team.com
    Fixes: ac5b2c18911f ("mm: thp: relax __GFP_THISNODE for MADV_HUGEPAGE mappings")
    Signed-off-by: Andrey Ryabinin <arbn@yandex-team.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: David Rientjes <rientjes@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5db6bc934949f86fbc81eef3fe8800461bda624
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 7 19:30:05 2021 +0000

    KVM: VMX: Fix stale docs for kvm-intel.emulate_invalid_guest_state
    
    commit 0ff29701ffad9a5d5a24344d8b09f3af7b96ffda upstream.
    
    Update the documentation for kvm-intel's emulate_invalid_guest_state to
    rectify the description of KVM's default behavior, and to document that
    the behavior and thus parameter only applies to L1.
    
    Fixes: a27685c33acc ("KVM: VMX: Emulate invalid guest state by default")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211207193006.120997-4-seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06c13e039d9276645c21ad9a580f97cab2bad464
Author: Marian Postevca <posteuca@mutex.one>
Date:   Sat Dec 4 23:49:12 2021 +0200

    usb: gadget: u_ether: fix race in setting MAC address in setup phase
    
    commit 890d5b40908bfd1a79be018d2d297cf9df60f4ee upstream.
    
    When listening for notifications through netlink of a new interface being
    registered, sporadically, it is possible for the MAC to be read as zero.
    The zero MAC address lasts a short period of time and then switches to a
    valid random MAC address.
    
    This causes problems for netd in Android, which assumes that the interface
    is malfunctioning and will not use it.
    
    In the good case we get this log:
    InterfaceController::getCfg() ifName usb0
     hwAddr 92:a8:f0:73:79:5b ipv4Addr 0.0.0.0 flags 0x1002
    
    In the error case we get these logs:
    InterfaceController::getCfg() ifName usb0
     hwAddr 00:00:00:00:00:00 ipv4Addr 0.0.0.0 flags 0x1002
    
    netd : interfaceGetCfg("usb0")
    netd : interfaceSetCfg() -> ServiceSpecificException
     (99, "[Cannot assign requested address] : ioctl() failed")
    
    The reason for the issue is the order in which the interface is setup,
    it is first registered through register_netdev() and after the MAC
    address is set.
    
    Fixed by first setting the MAC address of the net_device and after that
    calling register_netdev().
    
    Fixes: bcd4a1c40bee885e ("usb: gadget: u_ether: construct with default values and add setters/getters")
    Cc: stable@vger.kernel.org
    Signed-off-by: Marian Postevca <posteuca@mutex.one>
    Link: https://lore.kernel.org/r/20211204214912.17627-1-posteuca@mutex.one
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0406b5ef4e2c4fb21d9e7d5c36a0453b4279e9b
Author: Chao Yu <chao@kernel.org>
Date:   Sun Dec 12 17:16:30 2021 +0800

    f2fs: fix to do sanity check on last xattr entry in __f2fs_setxattr()
    
    commit 5598b24efaf4892741c798b425d543e4bed357a1 upstream.
    
    As Wenqing Liu reported in bugzilla:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=215235
    
    - Overview
    page fault in f2fs_setxattr() when mount and operate on corrupted image
    
    - Reproduce
    tested on kernel 5.16-rc3, 5.15.X under root
    
    1. unzip tmp7.zip
    2. ./single.sh f2fs 7
    
    Sometimes need to run the script several times
    
    - Kernel dump
    loop0: detected capacity change from 0 to 131072
    F2FS-fs (loop0): Found nat_bits in checkpoint
    F2FS-fs (loop0): Mounted with checkpoint version = 7548c2ee
    BUG: unable to handle page fault for address: ffffe47bc7123f48
    RIP: 0010:kfree+0x66/0x320
    Call Trace:
     __f2fs_setxattr+0x2aa/0xc00 [f2fs]
     f2fs_setxattr+0xfa/0x480 [f2fs]
     __f2fs_set_acl+0x19b/0x330 [f2fs]
     __vfs_removexattr+0x52/0x70
     __vfs_removexattr_locked+0xb1/0x140
     vfs_removexattr+0x56/0x100
     removexattr+0x57/0x80
     path_removexattr+0xa3/0xc0
     __x64_sys_removexattr+0x17/0x20
     do_syscall_64+0x37/0xb0
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The root cause is in __f2fs_setxattr(), we missed to do sanity check on
    last xattr entry, result in out-of-bound memory access during updating
    inconsistent xattr data of target inode.
    
    After the fix, it can detect such xattr inconsistency as below:
    
    F2FS-fs (loop11): inode (7) has invalid last xattr entry, entry_size: 60676
    F2FS-fs (loop11): inode (8) has corrupted xattr
    F2FS-fs (loop11): inode (8) has corrupted xattr
    F2FS-fs (loop11): inode (8) has invalid last xattr entry, entry_size: 47736
    
    Cc: stable@vger.kernel.org
    Reported-by: Wenqing Liu <wenqingliu0120@gmail.com>
    Signed-off-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 806142c805cacd098e61bdc0f72c778a2389fe4a
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Thu Dec 16 11:17:25 2021 +0530

    tee: optee: Fix incorrect page free bug
    
    commit 18549bf4b21c739a9def39f27dcac53e27286ab5 upstream.
    
    Pointer to the allocated pages (struct page *page) has already
    progressed towards the end of allocation. It is incorrect to perform
    __free_pages(page, order) using this pointer as we would free any
    arbitrary pages. Fix this by stop modifying the page pointer.
    
    Fixes: ec185dd3ab25 ("optee: Fix memory leak when failing to register shm pages")
    Cc: stable@vger.kernel.org
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5478b90270a3569cf6f596959b0900c9f8ef8fe4
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Dec 15 09:31:36 2021 +0100

    ARM: 9169/1: entry: fix Thumb2 bug in iWMMXt exception handling
    
    commit 8536a5ef886005bc443c2da9b842d69fd3d7647f upstream.
    
    The Thumb2 version of the FP exception handling entry code treats the
    register holding the CP number (R8) differently, resulting in the iWMMXT
    CP number check to be incorrect.
    
    Fix this by unifying the ARM and Thumb2 code paths, and switch the
    order of the additions of the TI_USED_CP offset and the shifted CP
    index.
    
    Cc: <stable@vger.kernel.org>
    Fixes: b86040a59feb ("Thumb-2: Implementation of the unified start-up and exceptions code")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c3d4122bec632ffbd6c40ef9321b17a55ff810d
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Dec 3 15:15:54 2021 +0100

    mmc: core: Disable card detect during shutdown
    
    commit 66c915d09b942fb3b2b0cb2f56562180901fba17 upstream.
    
    It's seems prone to problems by allowing card detect and its corresponding
    mmc_rescan() work to run, during platform shutdown. For example, we may end
    up turning off the power while initializing a card, which potentially could
    damage it.
    
    To avoid this scenario, let's add ->shutdown_pre() callback for the mmc host
    class device and then turn of the card detect from there.
    
    Reported-by: Al Cooper <alcooperx@gmail.com>
    Suggested-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211203141555.105351-1-ulf.hansson@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9db8fc6c7af6cac25d0b2d51f304393817efcef
Author: Prathamesh Shete <pshete@nvidia.com>
Date:   Tue Dec 14 17:06:53 2021 +0530

    mmc: sdhci-tegra: Fix switch to HS400ES mode
    
    commit 4fc7261dbab139d3c64c3b618262504e16cfe7ee upstream.
    
    When CMD13 is sent after switching to HS400ES mode, the bus
    is operating at either MMC_HIGH_26_MAX_DTR or MMC_HIGH_52_MAX_DTR.
    To meet Tegra SDHCI requirement at HS400ES mode, force SDHCI
    interface clock to MMC_HS200_MAX_DTR (200 MHz) so that host
    controller CAR clock and the interface clock are rate matched.
    
    Signed-off-by: Prathamesh Shete <pshete@nvidia.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: dfc9700cef77 ("mmc: tegra: Implement HS400 enhanced strobe")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211214113653.4631-1-pshete@nvidia.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9031ce0b071899d282b95539c7407ddc07cf362
Author: Fabien Dessenne <fabien.dessenne@foss.st.com>
Date:   Wed Dec 15 10:58:08 2021 +0100

    pinctrl: stm32: consider the GPIO offset to expose all the GPIO lines
    
    commit b67210cc217f9ca1c576909454d846970c13dfd4 upstream.
    
    Consider the GPIO controller offset (from "gpio-ranges") to compute the
    maximum GPIO line number.
    This fixes an issue where gpio-ranges uses a non-null offset.
      e.g.: gpio-ranges = <&pinctrl 6 86 10>
            In that case the last valid GPIO line is not 9 but 15 (6 + 10 - 1)
    
    Cc: stable@vger.kernel.org
    Fixes: 67e2996f72c7 ("pinctrl: stm32: fix the reported number of GPIO lines per bank")
    Reported-by: Christoph Fritz <chf.fritz@googlemail.com>
    Signed-off-by: Fabien Dessenne <fabien.dessenne@foss.st.com>
    Link: https://lore.kernel.org/r/20211215095808.621716-1-fabien.dessenne@foss.st.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7b2e5850ba65bdd43afc17e5adf8603c9c5cfbd
Author: Andrew Cooper <andrew.cooper3@citrix.com>
Date:   Thu Dec 16 00:08:56 2021 +0000

    x86/pkey: Fix undefined behaviour with PKRU_WD_BIT
    
    commit 57690554abe135fee81d6ac33cc94d75a7e224bb upstream.
    
    Both __pkru_allows_write() and arch_set_user_pkey_access() shift
    PKRU_WD_BIT (a signed constant) by up to 30 bits, hitting the
    sign bit.
    
    Use unsigned constants instead.
    
    Clearly pkey 15 has not been used in combination with UBSAN yet.
    
    Noticed by code inspection only.  I can't actually provoke the
    compiler into generating incorrect logic as far as this shift is
    concerned.
    
    [
      dhansen: add stable@ tag, plus minor changelog massaging,
    
               For anyone doing backports, these #defines were in
               arch/x86/include/asm/pgtable.h before 784a46618f6.
    ]
    
    Fixes: 33a709b25a76 ("mm/gup, x86/mm/pkeys: Check VMAs and PTEs for protection keys")
    Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20211216000856.4480-1-andrew.cooper3@citrix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddc1d49e10a7ca03c7d83aa7afc1267f8b484ec2
Author: John David Anglin <dave.anglin@bell.net>
Date:   Tue Dec 21 13:21:22 2021 -0500

    parisc: Correct completer in lws start
    
    commit 8f66fce0f46560b9e910787ff7ad0974441c4f9c upstream.
    
    The completer in the "or,ev %r1,%r30,%r30" instruction is reversed, so we are
    not clipping the LWS number when we are called from a 32-bit process (W=0).
    We need to nulify the following depdi instruction when the least-significant
    bit of %r30 is 1.
    
    If the %r20 register is not clipped, a user process could perform a LWS call
    that would branch to an undefined location in the kernel and potentially crash
    the machine.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # 4.19+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8467c8cb94a406cc0c54d9306b61d0db86c94048
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Dec 17 12:44:10 2021 -0300

    ipmi: fix initialization when workqueue allocation fails
    
    commit 75d70d76cb7b927cace2cb34265d68ebb3306b13 upstream.
    
    If the workqueue allocation fails, the driver is marked as not initialized,
    and timer and panic_notifier will be left registered.
    
    Instead of removing those when workqueue allocation fails, do the workqueue
    initialization before doing it, and cleanup srcu_struct if it fails.
    
    Fixes: 1d49eb91e86e ("ipmi: Move remove_work to dedicated workqueue")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: Ioanna Alifieraki <ioanna-maria.alifieraki@canonical.com>
    Cc: stable@vger.kernel.org
    Message-Id: <20211217154410.1228673-2-cascardo@canonical.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8efd6a3391f7b0b19fb0c38e50add06ca30c94af
Author: Mian Yousaf Kaukab <ykaukab@suse.de>
Date:   Wed Dec 8 10:32:39 2021 +0100

    ipmi: ssif: initialize ssif_info->client early
    
    commit 34f35f8f14bc406efc06ee4ff73202c6fd245d15 upstream.
    
    During probe ssif_info->client is dereferenced in error path. However,
    it is set when some of the error checking has already been done. This
    causes following kernel crash if an error path is taken:
    
    [   30.645593][  T674] ipmi_ssif 0-000e: ipmi_ssif: Not probing, Interface already present
    [   30.657616][  T674] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000088
    ...
    [   30.657723][  T674] pc : __dev_printk+0x28/0xa0
    [   30.657732][  T674] lr : _dev_err+0x7c/0xa0
    ...
    [   30.657772][  T674] Call trace:
    [   30.657775][  T674]  __dev_printk+0x28/0xa0
    [   30.657778][  T674]  _dev_err+0x7c/0xa0
    [   30.657781][  T674]  ssif_probe+0x548/0x900 [ipmi_ssif 62ce4b08badc1458fd896206d9ef69a3c31f3d3e]
    [   30.657791][  T674]  i2c_device_probe+0x37c/0x3c0
    ...
    
    Initialize ssif_info->client before any error path can be taken. Clear
    i2c_client data in the error path to prevent the dangling pointer from
    leaking.
    
    Fixes: c4436c9149c5 ("ipmi_ssif: avoid registering duplicate ssif interface")
    Cc: stable@vger.kernel.org # 5.4.x
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mian Yousaf Kaukab <ykaukab@suse.de>
    Message-Id: <20211208093239.4432-1-ykaukab@suse.de>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd24bafefc17947532008c3667637aee7471d7a8
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Dec 17 12:44:09 2021 -0300

    ipmi: bail out if init_srcu_struct fails
    
    commit 2b5160b12091285c5aca45980f100a9294af7b04 upstream.
    
    In case, init_srcu_struct fails (because of memory allocation failure), we
    might proceed with the driver initialization despite srcu_struct not being
    entirely initialized.
    
    Fixes: 913a89f009d9 ("ipmi: Don't initialize anything in the core until something uses it")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org
    Message-Id: <20211217154410.1228673-1-cascardo@canonical.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5525d80dc9dd46ad5d2150da264165226b9c0fda
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Sun Dec 12 21:01:49 2021 -0800

    Input: atmel_mxt_ts - fix double free in mxt_read_info_block
    
    commit 12f247ab590a08856441efdbd351cf2cc8f60a2d upstream.
    
    The "id_buf" buffer is stored in "data->raw_info_block" and freed by
    "mxt_free_object_table" in case of error.
    
    Return instead of jumping to avoid a double free.
    
    Addresses-Coverity-ID: 1474582 ("Double free")
    Fixes: 068bdb67ef74 ("Input: atmel_mxt_ts - fix the firmware update")
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Link: https://lore.kernel.org/r/20211212194257.68879-1-jose.exposito89@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 737a98d91b074eb0c9c17ed16f04469f840c4c27
Author: Bradley Scott <Bradley.Scott@zebra.com>
Date:   Mon Dec 13 10:49:39 2021 -0500

    ALSA: hda/realtek: Amp init fixup for HP ZBook 15 G6
    
    commit d296a74b7b59ff9116236c17edb25f26935dbf70 upstream.
    
    HP ZBook 15 G6 (SSID 103c:860f) needs the same speaker amplifier
    initialization as used on several other HP laptops using ALC285.
    
    Signed-off-by: Bradley Scott <Bradley.Scott@zebra.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211213154938.503201-1-Bradley.Scott@zebra.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8df036befbc3c6eebd3087d2ff8205c83b48c881
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Sun Dec 12 17:20:25 2021 +0000

    ALSA: drivers: opl3: Fix incorrect use of vp->state
    
    commit 2dee54b289fbc810669a1b2b8a0887fa1c9a14d7 upstream.
    
    Static analysis with scan-build has found an assignment to vp2 that is
    never used. It seems that the check on vp->state > 0 should be actually
    on vp2->state instead. Fix this.
    
    This dates back to 2002, I found the offending commit from the git
    history git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git,
    commit 91e39521bbf6 ("[PATCH] ALSA patch for 2.5.4")
    
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211212172025.470367-1-colin.i.king@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdaf41977d7747ca914e91c85665df009b456a08
Author: Xiaoke Wang <xkernel.wang@foxmail.com>
Date:   Mon Dec 13 15:39:31 2021 +0800

    ALSA: jack: Check the return value of kstrdup()
    
    commit c01c1db1dc632edafb0dff32d40daf4f9c1a4e19 upstream.
    
    kstrdup() can return NULL, it is better to check the return value of it.
    
    Signed-off-by: Xiaoke Wang <xkernel.wang@foxmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/tencent_094816F3522E0DC704056C789352EBBF0606@qq.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44c743f63dd3e92f1bfb2b43c0374406bc60213f
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sat Nov 13 08:55:06 2021 -0800

    hwmon: (lm90) Drop critical attribute support for MAX6654
    
    [ Upstream commit 16ba51b5dcd3f6dde2e51d5ccc86313119dcf889 ]
    
    Tests with a real chip and a closer look into the datasheet show that
    MAX6654 does not support CRIT/THERM/OVERTEMP limits, so drop support
    of the respective attributes for this chip.
    
    Introduce LM90_HAVE_CRIT flag and use it to instantiate critical limit
    attributes to solve the problem.
    
    Cc: Josh Lehan <krellan@google.com>
    Fixes: 229d495d8189 ("hwmon: (lm90) Add max6654 support to lm90 driver")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4615c9740575e5a772332bb0316520dfce5bebc3
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Oct 21 01:49:50 2021 -0700

    hwmon: (lm90) Introduce flag indicating extended temperature support
    
    [ Upstream commit f347e249fcf920ad6974cbd898e2ec0b366a1c34 ]
    
    A flag indicating extended temperature support makes it easier
    to add support for additional chips with this functionality.
    
    Cc: David T. Wilson <david.wilson@nasa.gov>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2242478f28dd84585ae9c6f93b34d7bdaef80a3
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Mon Oct 18 20:03:32 2021 -0700

    hwmon: (lm90) Add basic support for TI TMP461
    
    [ Upstream commit f8344f7693a25d9025a59d164450b50c6f5aa3c0 ]
    
    TMP461 is almost identical to TMP451 and was actually detected as TMP451
    with the existing lm90 driver if its I2C address is 0x4c. Add support
    for it to the lm90 driver. At the same time, improve the chip detection
    function to at least try to distinguish between TMP451 and TMP461.
    
    As a side effect, this fixes commit 24333ac26d01 ("hwmon: (tmp401) use
    smb word operations instead of 2 smb byte operations"). TMP461 does not
    support word operations on temperature registers, which causes bad
    temperature readings with the tmp401 driver. The lm90 driver does not
    perform word operations on temperature registers and thus does not have
    this problem.
    
    Support is listed as basic because TMP461 supports a sensor resolution
    of 0.0625 degrees C, while the lm90 driver assumes a resolution of 0.125
    degrees C. Also, the TMP461 supports negative temperatures with its
    default temperature range, which is not the case for similar chips
    supported by the lm90 and the tmp401 drivers. Those limitations will be
    addressed with follow-up patches.
    
    Fixes: 24333ac26d01 ("hwmon: (tmp401) use smb word operations instead of 2 smb byte operations")
    Reported-by: David T. Wilson <david.wilson@nasa.gov>
    Cc: David T. Wilson <david.wilson@nasa.gov>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d939660eff6254671fbc914e6132b9a5c6c333c4
Author: Josh Lehan <krellan@google.com>
Date:   Wed May 13 11:42:48 2020 -0700

    hwmon: (lm90) Add max6654 support to lm90 driver
    
    [ Upstream commit 229d495d8189ae785dacee72e5633a58edc25ddf ]
    
    Add support for the Maxim MAX6654 to the lm90 driver.
    
    The MAX6654 is a temperature sensor, similar to the others,
    but with some differences regarding the configuration
    register, and the sampling rate at which extended resolution
    becomes possible.
    
    Signed-off-by: Josh Lehan <krellan@google.com>
    Link: https://lore.kernel.org/r/20200513184248.145765-1-krellan@google.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 055ca98d48ba5a127b4ab72f9e8defabf896e31c
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sat Nov 6 10:02:44 2021 -0700

    hwmon: (lm90) Fix usage of CONFIG2 register in detect function
    
    [ Upstream commit fce15c45d3fbd9fc1feaaf3210d8e3f8b33dfd3a ]
    
    The detect function had a comment "Make compiler happy" when id did not
    read the second configuration register. As it turns out, the code was
    checking the contents of this register for manufacturer ID 0xA1 (NXP
    Semiconductor/Philips), but never actually read the register. So it
    wasn't surprising that the compiler complained, and it indeed had a point.
    Fix the code to read the register contents for manufacturer ID 0xa1.
    
    At the same time, the code was reading the register for manufacturer ID
    0x41 (Analog Devices), but it was not using the results. In effect it was
    just checking if reading the register returned an error. That doesn't
    really add much if any value, so stop doing that.
    
    Fixes: f90be42fb383 ("hwmon: (lm90) Refactor reading of config2 register")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7f95328c6f0afffdc4555f16e3bbab8bbf0d9be
Author: Andrea Righi <andrea.righi@canonical.com>
Date:   Mon Nov 29 00:08:13 2021 -0800

    Input: elantech - fix stack out of bound access in elantech_change_report_id()
    
    [ Upstream commit 1d72d9f960ccf1052a0630a68c3d358791dbdaaa ]
    
    The array param[] in elantech_change_report_id() must be at least 3
    bytes, because elantech_read_reg_params() is calling ps2_command() with
    PSMOUSE_CMD_GETINFO, that is going to access 3 bytes from param[], but
    it's defined in the stack as an array of 2 bytes, therefore we have a
    potential stack out-of-bounds access here, also confirmed by KASAN:
    
    [    6.512374] BUG: KASAN: stack-out-of-bounds in __ps2_command+0x372/0x7e0
    [    6.512397] Read of size 1 at addr ffff8881024d77c2 by task kworker/2:1/118
    
    [    6.512416] CPU: 2 PID: 118 Comm: kworker/2:1 Not tainted 5.13.0-22-generic #22+arighi20211110
    [    6.512428] Hardware name: LENOVO 20T8000QGE/20T8000QGE, BIOS R1AET32W (1.08 ) 08/14/2020
    [    6.512436] Workqueue: events_long serio_handle_event
    [    6.512453] Call Trace:
    [    6.512462]  show_stack+0x52/0x58
    [    6.512474]  dump_stack+0xa1/0xd3
    [    6.512487]  print_address_description.constprop.0+0x1d/0x140
    [    6.512502]  ? __ps2_command+0x372/0x7e0
    [    6.512516]  __kasan_report.cold+0x7d/0x112
    [    6.512527]  ? _raw_write_lock_irq+0x20/0xd0
    [    6.512539]  ? __ps2_command+0x372/0x7e0
    [    6.512552]  kasan_report+0x3c/0x50
    [    6.512564]  __asan_load1+0x6a/0x70
    [    6.512575]  __ps2_command+0x372/0x7e0
    [    6.512589]  ? ps2_drain+0x240/0x240
    [    6.512601]  ? dev_printk_emit+0xa2/0xd3
    [    6.512612]  ? dev_vprintk_emit+0xc5/0xc5
    [    6.512621]  ? __kasan_check_write+0x14/0x20
    [    6.512634]  ? mutex_lock+0x8f/0xe0
    [    6.512643]  ? __mutex_lock_slowpath+0x20/0x20
    [    6.512655]  ps2_command+0x52/0x90
    [    6.512670]  elantech_ps2_command+0x4f/0xc0 [psmouse]
    [    6.512734]  elantech_change_report_id+0x1e6/0x256 [psmouse]
    [    6.512799]  ? elantech_report_trackpoint.constprop.0.cold+0xd/0xd [psmouse]
    [    6.512863]  ? ps2_command+0x7f/0x90
    [    6.512877]  elantech_query_info.cold+0x6bd/0x9ed [psmouse]
    [    6.512943]  ? elantech_setup_ps2+0x460/0x460 [psmouse]
    [    6.513005]  ? psmouse_reset+0x69/0xb0 [psmouse]
    [    6.513064]  ? psmouse_attr_set_helper+0x2a0/0x2a0 [psmouse]
    [    6.513122]  ? phys_pmd_init+0x30e/0x521
    [    6.513137]  elantech_init+0x8a/0x200 [psmouse]
    [    6.513200]  ? elantech_init_ps2+0xf0/0xf0 [psmouse]
    [    6.513249]  ? elantech_query_info+0x440/0x440 [psmouse]
    [    6.513296]  ? synaptics_send_cmd+0x60/0x60 [psmouse]
    [    6.513342]  ? elantech_query_info+0x440/0x440 [psmouse]
    [    6.513388]  ? psmouse_try_protocol+0x11e/0x170 [psmouse]
    [    6.513432]  psmouse_extensions+0x65d/0x6e0 [psmouse]
    [    6.513476]  ? psmouse_try_protocol+0x170/0x170 [psmouse]
    [    6.513519]  ? mutex_unlock+0x22/0x40
    [    6.513526]  ? ps2_command+0x7f/0x90
    [    6.513536]  ? psmouse_probe+0xa3/0xf0 [psmouse]
    [    6.513580]  psmouse_switch_protocol+0x27d/0x2e0 [psmouse]
    [    6.513624]  psmouse_connect+0x272/0x530 [psmouse]
    [    6.513669]  serio_driver_probe+0x55/0x70
    [    6.513679]  really_probe+0x190/0x720
    [    6.513689]  driver_probe_device+0x160/0x1f0
    [    6.513697]  device_driver_attach+0x119/0x130
    [    6.513705]  ? device_driver_attach+0x130/0x130
    [    6.513713]  __driver_attach+0xe7/0x1a0
    [    6.513720]  ? device_driver_attach+0x130/0x130
    [    6.513728]  bus_for_each_dev+0xfb/0x150
    [    6.513738]  ? subsys_dev_iter_exit+0x10/0x10
    [    6.513748]  ? _raw_write_unlock_bh+0x30/0x30
    [    6.513757]  driver_attach+0x2d/0x40
    [    6.513764]  serio_handle_event+0x199/0x3d0
    [    6.513775]  process_one_work+0x471/0x740
    [    6.513785]  worker_thread+0x2d2/0x790
    [    6.513794]  ? process_one_work+0x740/0x740
    [    6.513802]  kthread+0x1b4/0x1e0
    [    6.513809]  ? set_kthread_struct+0x80/0x80
    [    6.513816]  ret_from_fork+0x22/0x30
    
    [    6.513832] The buggy address belongs to the page:
    [    6.513838] page:00000000bc35e189 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1024d7
    [    6.513847] flags: 0x17ffffc0000000(node=0|zone=2|lastcpupid=0x1fffff)
    [    6.513860] raw: 0017ffffc0000000 dead000000000100 dead000000000122 0000000000000000
    [    6.513867] raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    [    6.513872] page dumped because: kasan: bad access detected
    
    [    6.513879] addr ffff8881024d77c2 is located in stack of task kworker/2:1/118 at offset 34 in frame:
    [    6.513887]  elantech_change_report_id+0x0/0x256 [psmouse]
    
    [    6.513941] this frame has 1 object:
    [    6.513947]  [32, 34) 'param'
    
    [    6.513956] Memory state around the buggy address:
    [    6.513962]  ffff8881024d7680: f2 f2 f2 f2 f2 00 00 f3 f3 00 00 00 00 00 00 00
    [    6.513969]  ffff8881024d7700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [    6.513976] >ffff8881024d7780: 00 00 00 00 f1 f1 f1 f1 02 f3 f3 f3 00 00 00 00
    [    6.513982]                                            ^
    [    6.513988]  ffff8881024d7800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [    6.513995]  ffff8881024d7880: 00 f1 f1 f1 f1 03 f2 03 f2 03 f3 f3 f3 00 00 00
    [    6.514000] ==================================================================
    
    Define param[] in elantech_change_report_id() as an array of 3 bytes to
    prevent the out-of-bounds access in the stack.
    
    Fixes: e4c9062717fe ("Input: elantech - fix protocol errors for some trackpoints in SMBus mode")
    BugLink: https://bugs.launchpad.net/bugs/1945590
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Reviewed-by: Wolfram Sang <wsa@kernel.org>
    Link: https://lore.kernel.org/r/20211116095559.24395-1-andrea.righi@canonical.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e12dcd4aa7f41845ecc6c65a57dbfb1d6a3a65c4
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Mon Dec 20 22:03:44 2021 +0800

    sfc: falcon: Check null pointer of rx_queue->page_ring
    
    [ Upstream commit 9b8bdd1eb5890aeeab7391dddcf8bd51f7b07216 ]
    
    Because of the possible failure of the kcalloc, it should be better to
    set rx_queue->page_ptr_mask to 0 when it happens in order to maintain
    the consistency.
    
    Fixes: 5a6681e22c14 ("sfc: separate out SFC4000 ("Falcon") support into new sfc-falcon driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Link: https://lore.kernel.org/r/20211220140344.978408-1-jiasheng@iscas.ac.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c11a41e26985eea38ea18df798a9cda8ade4b78e
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 22 15:41:12 2021 +0800

    drivers: net: smc911x: Check for error irq
    
    [ Upstream commit cb93b3e11d405f20a405a07482d01147ef4934a3 ]
    
    Because platform_get_irq() could fail and return error irq.
    Therefore, it might be better to check it if order to avoid the use of
    error irq.
    
    Fixes: ae150435b59e ("smsc: Move the SMC (SMSC) drivers")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d556b1437e1db6e52cda355b2c4cf40212fc72f
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 22 15:12:07 2021 +0800

    fjes: Check for error irq
    
    [ Upstream commit db6d6afe382de5a65d6ccf51253ab48b8e8336c3 ]
    
    I find that platform_get_irq() will not always succeed.
    It will return error irq in case of the failure.
    Therefore, it might be better to check it if order to avoid the use of
    error irq.
    
    Fixes: 658d439b2292 ("fjes: Introduce FUJITSU Extended Socket Network Device driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7024080db82ebaddf93c53dea5c861bcdd3aa4f
Author: Fernando Fernandez Mancera <ffmancera@riseup.net>
Date:   Tue Dec 21 12:13:45 2021 +0100

    bonding: fix ad_actor_system option setting to default
    
    [ Upstream commit 1c15b05baea71a5ff98235783e3e4ad227760876 ]
    
    When 802.3ad bond mode is configured the ad_actor_system option is set to
    "00:00:00:00:00:00". But when trying to set the all-zeroes MAC as actors'
    system address it was failing with EINVAL.
    
    An all-zeroes ethernet address is valid, only multicast addresses are not
    valid values.
    
    Fixes: 171a42c38c6e ("bonding: add netlink support for sys prio, actor sys mac, and port key")
    Signed-off-by: Fernando Fernandez Mancera <ffmancera@riseup.net>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Link: https://lore.kernel.org/r/20211221111345.2462-1-ffmancera@riseup.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 992649b8b16843d27eb39ceea5f9cf85ffb50a18
Author: Wu Bo <wubo40@huawei.com>
Date:   Tue Dec 21 15:00:34 2021 +0800

    ipmi: Fix UAF when uninstall ipmi_si and ipmi_msghandler module
    
    [ Upstream commit ffb76a86f8096a8206be03b14adda6092e18e275 ]
    
    Hi,
    
    When testing install and uninstall of ipmi_si.ko and ipmi_msghandler.ko,
    the system crashed.
    
    The log as follows:
    [  141.087026] BUG: unable to handle kernel paging request at ffffffffc09b3a5a
    [  141.087241] PGD 8fe4c0d067 P4D 8fe4c0d067 PUD 8fe4c0f067 PMD 103ad89067 PTE 0
    [  141.087464] Oops: 0010 [#1] SMP NOPTI
    [  141.087580] CPU: 67 PID: 668 Comm: kworker/67:1 Kdump: loaded Not tainted 4.18.0.x86_64 #47
    [  141.088009] Workqueue: events 0xffffffffc09b3a40
    [  141.088009] RIP: 0010:0xffffffffc09b3a5a
    [  141.088009] Code: Bad RIP value.
    [  141.088009] RSP: 0018:ffffb9094e2c3e88 EFLAGS: 00010246
    [  141.088009] RAX: 0000000000000000 RBX: ffff9abfdb1f04a0 RCX: 0000000000000000
    [  141.088009] RDX: 0000000000000000 RSI: 0000000000000246 RDI: 0000000000000246
    [  141.088009] RBP: 0000000000000000 R08: ffff9abfffee3cb8 R09: 00000000000002e1
    [  141.088009] R10: ffffb9094cb73d90 R11: 00000000000f4240 R12: ffff9abfffee8700
    [  141.088009] R13: 0000000000000000 R14: ffff9abfdb1f04a0 R15: ffff9abfdb1f04a8
    [  141.088009] FS:  0000000000000000(0000) GS:ffff9abfffec0000(0000) knlGS:0000000000000000
    [  141.088009] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  141.088009] CR2: ffffffffc09b3a30 CR3: 0000008fe4c0a001 CR4: 00000000007606e0
    [  141.088009] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  141.088009] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  141.088009] PKRU: 55555554
    [  141.088009] Call Trace:
    [  141.088009]  ? process_one_work+0x195/0x390
    [  141.088009]  ? worker_thread+0x30/0x390
    [  141.088009]  ? process_one_work+0x390/0x390
    [  141.088009]  ? kthread+0x10d/0x130
    [  141.088009]  ? kthread_flush_work_fn+0x10/0x10
    [  141.088009]  ? ret_from_fork+0x35/0x40] BUG: unable to handle kernel paging request at ffffffffc0b28a5a
    [  200.223240] PGD 97fe00d067 P4D 97fe00d067 PUD 97fe00f067 PMD a580cbf067 PTE 0
    [  200.223464] Oops: 0010 [#1] SMP NOPTI
    [  200.223579] CPU: 63 PID: 664 Comm: kworker/63:1 Kdump: loaded Not tainted 4.18.0.x86_64 #46
    [  200.224008] Workqueue: events 0xffffffffc0b28a40
    [  200.224008] RIP: 0010:0xffffffffc0b28a5a
    [  200.224008] Code: Bad RIP value.
    [  200.224008] RSP: 0018:ffffbf3c8e2a3e88 EFLAGS: 00010246
    [  200.224008] RAX: 0000000000000000 RBX: ffffa0799ad6bca0 RCX: 0000000000000000
    [  200.224008] RDX: 0000000000000000 RSI: 0000000000000246 RDI: 0000000000000246
    [  200.224008] RBP: 0000000000000000 R08: ffff9fe43fde3cb8 R09: 00000000000000d5
    [  200.224008] R10: ffffbf3c8cb53d90 R11: 00000000000f4240 R12: ffff9fe43fde8700
    [  200.224008] R13: 0000000000000000 R14: ffffa0799ad6bca0 R15: ffffa0799ad6bca8
    [  200.224008] FS:  0000000000000000(0000) GS:ffff9fe43fdc0000(0000) knlGS:0000000000000000
    [  200.224008] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  200.224008] CR2: ffffffffc0b28a30 CR3: 00000097fe00a002 CR4: 00000000007606e0
    [  200.224008] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  200.224008] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  200.224008] PKRU: 55555554
    [  200.224008] Call Trace:
    [  200.224008]  ? process_one_work+0x195/0x390
    [  200.224008]  ? worker_thread+0x30/0x390
    [  200.224008]  ? process_one_work+0x390/0x390
    [  200.224008]  ? kthread+0x10d/0x130
    [  200.224008]  ? kthread_flush_work_fn+0x10/0x10
    [  200.224008]  ? ret_from_fork+0x35/0x40
    [  200.224008] kernel fault(0x1) notification starting on CPU 63
    [  200.224008] kernel fault(0x1) notification finished on CPU 63
    [  200.224008] CR2: ffffffffc0b28a5a
    [  200.224008] ---[ end trace c82a412d93f57412 ]---
    
    The reason is as follows:
    T1: rmmod ipmi_si.
        ->ipmi_unregister_smi()
            -> ipmi_bmc_unregister()
                -> __ipmi_bmc_unregister()
                    -> kref_put(&bmc->usecount, cleanup_bmc_device);
                        -> schedule_work(&bmc->remove_work);
    
    T2: rmmod ipmi_msghandler.
        ipmi_msghander module uninstalled, and the module space
        will be freed.
    
    T3: bmc->remove_work doing cleanup the bmc resource.
        -> cleanup_bmc_work()
            -> platform_device_unregister(&bmc->pdev);
                -> platform_device_del(pdev);
                    -> device_del(&pdev->dev);
                        -> kobject_uevent(&dev->kobj, KOBJ_REMOVE);
                            -> kobject_uevent_env()
                                -> dev_uevent()
                                    -> if (dev->type && dev->type->name)
    
       'dev->type'(bmc_device_type) pointer space has freed when uninstall
        ipmi_msghander module, 'dev->type->name' cause the system crash.
    
    drivers/char/ipmi/ipmi_msghandler.c:
    2820 static const struct device_type bmc_device_type = {
    2821         .groups         = bmc_dev_attr_groups,
    2822 };
    
    Steps to reproduce:
    Add a time delay in cleanup_bmc_work() function,
    and uninstall ipmi_si and ipmi_msghandler module.
    
    2910 static void cleanup_bmc_work(struct work_struct *work)
    2911 {
    2912         struct bmc_device *bmc = container_of(work, struct bmc_device,
    2913                                               remove_work);
    2914         int id = bmc->pdev.id; /* Unregister overwrites id */
    2915
    2916         msleep(3000);   <---
    2917         platform_device_unregister(&bmc->pdev);
    2918         ida_simple_remove(&ipmi_bmc_ida, id);
    2919 }
    
    Use 'remove_work_wq' instead of 'system_wq' to solve this issues.
    
    Fixes: b2cfd8ab4add ("ipmi: Rework device id and guid handling to catch changing BMCs")
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Message-Id: <1640070034-56671-1-git-send-email-wubo40@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2460d96c19a875745ca328421308ca1f690c923e
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Dec 20 09:50:27 2021 -0500

    net: skip virtio_net_hdr_set_proto if protocol already set
    
    [ Upstream commit 1ed1d592113959f00cc552c3b9f47ca2d157768f ]
    
    virtio_net_hdr_set_proto infers skb->protocol from the virtio_net_hdr
    gso_type, to avoid packets getting dropped for lack of a proto type.
    
    Its protocol choice is a guess, especially in the case of UFO, where
    the single VIRTIO_NET_HDR_GSO_UDP label covers both UFOv4 and UFOv6.
    
    Skip this best effort if the field is already initialized. Whether
    explicitly from userspace, or implicitly based on an earlier call to
    dev_parse_header_protocol (which is more robust, but was introduced
    after this patch).
    
    Fixes: 9d2f67e43b73 ("net/packet: fix packet drop as of virtio gso")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20211220145027.2784293-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 621d5536b452c3df2a7d09cdf84793ced5c4756d
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Dec 20 09:49:01 2021 -0500

    net: accept UFOv6 packages in virtio_net_hdr_to_skb
    
    [ Upstream commit 7e5cced9ca84df52d874aca6b632f930b3dc5bc6 ]
    
    Skb with skb->protocol 0 at the time of virtio_net_hdr_to_skb may have
    a protocol inferred from virtio_net_hdr with virtio_net_hdr_set_proto.
    
    Unlike TCP, UDP does not have separate types for IPv4 and IPv6. Type
    VIRTIO_NET_HDR_GSO_UDP is guessed to be IPv4/UDP. As of the below
    commit, UFOv6 packets are dropped due to not matching the protocol as
    obtained from dev_parse_header_protocol.
    
    Invert the test to take that L2 protocol field as starting point and
    pass both UFOv4 and UFOv6 for VIRTIO_NET_HDR_GSO_UDP.
    
    Fixes: 924a9bc362a5 ("net: check if protocol extracted by virtio_net_hdr_set_proto is correct")
    Link: https://lore.kernel.org/netdev/CABcq3pG9GRCYqFDBAJ48H1vpnnX=41u+MhQnayF1ztLH4WX0Fw@mail.gmail.com/
    Reported-by: Andrew Melnichenko <andrew@daynix.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20211220144901.2784030-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b01c51c4f47f59ad7eb1ea5bac47fab14b188a5
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Fri Dec 17 17:39:11 2021 +0800

    qlcnic: potential dereference null pointer of rx_queue->page_ring
    
    [ Upstream commit 60ec7fcfe76892a1479afab51ff17a4281923156 ]
    
    The return value of kcalloc() needs to be checked.
    To avoid dereference of null pointer in case of the failure of alloc.
    Therefore, it might be better to change the return type of
    qlcnic_sriov_alloc_vlans() and return -ENOMEM when alloc fails and
    return 0 the others.
    Also, qlcnic_sriov_set_guest_vlan_mode() and __qlcnic_pci_sriov_enable()
    should deal with the return value of qlcnic_sriov_alloc_vlans().
    
    Fixes: 154d0c810c53 ("qlcnic: VLAN enhancement for 84XX adapters")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 685fc8d22489aa319465d0ddf848e6d7210ae17a
Author: Ignacy Gawędzki <ignacy.gawedzki@green-communications.fr>
Date:   Fri Dec 10 16:31:27 2021 +0100

    netfilter: fix regression in looped (broad|multi)cast's MAC handling
    
    [ Upstream commit ebb966d3bdfed581ecccbb4a7432341baf7619b4 ]
    
    In commit 5648b5e1169f ("netfilter: nfnetlink_queue: fix OOB when mac
    header was cleared"), the test for non-empty MAC header introduced in
    commit 2c38de4c1f8da7 ("netfilter: fix looped (broad|multi)cast's MAC
    handling") has been replaced with a test for a set MAC header.
    
    This breaks the case when the MAC header has been reset (using
    skb_reset_mac_header), as is the case with looped-back multicast
    packets.  As a result, the packets ending up in NFQUEUE get a bogus
    hwaddr interpreted from the first bytes of the IP header.
    
    This patch adds a test for a non-empty MAC header in addition to the
    test for a set MAC header.  The same two tests are also implemented in
    nfnetlink_log.c, where the initial code of commit 2c38de4c1f8da7
    ("netfilter: fix looped (broad|multi)cast's MAC handling") has not been
    touched, but where supposedly the same situation may happen.
    
    Fixes: 5648b5e1169f ("netfilter: nfnetlink_queue: fix OOB when mac header was cleared")
    Signed-off-by: Ignacy Gawędzki <ignacy.gawedzki@green-communications.fr>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79dcbd8176152b860028b62f81a635d987365752
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Wed Dec 8 18:52:38 2021 +0100

    IB/qib: Fix memory leak in qib_user_sdma_queue_pkts()
    
    [ Upstream commit bee90911e0138c76ee67458ac0d58b38a3190f65 ]
    
    The wrong goto label was used for the error case and missed cleanup of the
    pkt allocation.
    
    Fixes: d39bf40e55e6 ("IB/qib: Protect from buffer overflow in struct qib_user_sdma_pkt fields")
    Link: https://lore.kernel.org/r/20211208175238.29983-1-jose.exposito89@gmail.com
    Addresses-Coverity-ID: 1493352 ("Resource leak")
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Acked-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78874bca4f271d96cf66bba49a4bc796e780ce89
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Mon Dec 6 18:19:31 2021 +0800

    spi: change clk_disable_unprepare to clk_unprepare
    
    [ Upstream commit db6689b643d8653092f5853751ea2cdbc299f8d3 ]
    
    The corresponding API for clk_prepare is clk_unprepare, other than
    clk_disable_unprepare.
    
    Fix this by changing clk_disable_unprepare to clk_unprepare.
    
    Fixes: 5762ab71eb24 ("spi: Add support for Armada 3700 SPI Controller")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Link: https://lore.kernel.org/r/20211206101931.2816597-1-mudongliangabcd@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c0ac2547c873d2342f60db3a40545f6b3f6d519
Author: Robert Marko <robert.marko@sartura.hr>
Date:   Wed Nov 17 15:02:22 2021 +0100

    arm64: dts: allwinner: orangepi-zero-plus: fix PHY mode
    
    [ Upstream commit 08d2061ff9c5319a07bf9ca6bbf11fdec68f704a ]
    
    Orange Pi Zero Plus uses a Realtek RTL8211E RGMII Gigabit PHY, but its
    currently set to plain RGMII mode meaning that it doesn't introduce
    delays.
    
    With this setup, TX packets are completely lost and changing the mode to
    RGMII-ID so the PHY will add delays internally fixes the issue.
    
    Fixes: a7affb13b271 ("arm64: allwinner: H5: Add Xunlong Orange Pi Zero Plus")
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Tested-by: Ron Goossens <rgoossens@gmail.com>
    Tested-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Robert Marko <robert.marko@sartura.hr>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20211117140222.43692-1-robert.marko@sartura.hr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fa4e2992717c67c3243e88a8342b795b939e5a2
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Dec 20 10:51:20 2021 +0100

    HID: holtek: fix mouse probing
    
    commit 93a2207c254ca102ebbdae47b00f19bbfbfa7ecd upstream.
    
    An overlook from the previous commit: we don't even parse or start the
    device, meaning that the device is not presented to user space.
    
    Fixes: 93020953d0fa ("HID: check for valid USB device for many HID drivers")
    Cc: stable@vger.kernel.org
    Link: https://bugs.archlinux.org/task/73048
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215341
    Link: https://lore.kernel.org/r/e4efbf13-bd8d-0370-629b-6c80c0044b15@leemhuis.info/
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2712816c10b3c59909399f48cce2dc6d2180c7e9
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Dec 15 15:58:35 2021 +0800

    serial: 8250_fintek: Fix garbled text for console
    
    commit 6c33ff728812aa18792afffaf2c9873b898e7512 upstream.
    
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    introduced support to use high baudrate with Fintek SuperIO UARTs. It'll
    change clocksources when the UART probed.
    
    But when user add kernel parameter "console=ttyS0,115200 console=tty0" to make
    the UART as console output, the console will output garbled text after the
    following kernel message.
    
    [    3.681188] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
    
    The issue is occurs in following step:
            probe_setup_port() -> fintek_8250_goto_highspeed()
    
    It change clocksource from 115200 to 921600 with wrong time, it should change
    clocksource in set_termios() not in probed. The following 3 patches are
    implemented change clocksource in fintek_8250_set_termios().
    
    Commit 58178914ae5b ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H")
    Commit 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Commit 423d9118c624 ("serial: 8250_fintek: Add F81966 Support")
    
    Due to the high baud rate had implemented above 3 patches and the patch
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    is bugged, So this patch will remove it.
    
    Fixes: fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215075835.2072-1-hpeter+linux_kernel@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51c925a9bcccc642397ad3283c04ccc4e6b13534
Author: Greg Jesionowski <jesionowskigreg@gmail.com>
Date:   Tue Dec 14 15:10:27 2021 -0700

    net: usb: lan78xx: add Allied Telesis AT29M2-AF
    
    commit ef8a0f6eab1ca5d1a75c242c5c7b9d386735fa0a upstream.
    
    This adds the vendor and product IDs for the AT29M2-AF which is a
    lan7801-based device.
    
    Signed-off-by: Greg Jesionowski <jesionowskigreg@gmail.com>
    Link: https://lore.kernel.org/r/20211214221027.305784-1-jesionowskigreg@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
