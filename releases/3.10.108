commit e7a59c7f266809d17dcde20fd2055e23e7eb6895
Author: Willy Tarreau <w@1wt.eu>
Date:   Sat Nov 4 23:34:48 2017 +0100

    Linux 3.10.108

commit 68cbe93962196f08a1a52e81dc6d5bedaca09b06
Author: Willy Tarreau <w@1wt.eu>
Date:   Thu Nov 2 23:22:31 2017 +0100

    x86/apic: fix build breakage caused by incomplete backport to 3.10
    
    Commit 928a277 ("x86/apic: Do not init irq remapping if ioapic is
    disabled") introduced in 3.10.105 introduced an implicit dependency of
    CONFIG_X86_LOCAL_APIC to CONFIG_X86_IO_APIC which was later solved as
    part of simplifications on the config dependencies in more recent kernels.
    This dependency results in build failure when CONFIG_X86_LOCAL_APIC is
    set without CONFIG_X86_IO_APIC (this setup requires CONFIG_SMP=n). The
    reason is that skip_ioapic_setup is declared in apic.c and that the
    backported code was picked from a context where the #ifdef surrounding
    the function used to cover this condition.
    
    Let's just add the appropriate #ifdef to fix the 3.10 backport.
    
    Thanks to Christoph Biedl for reporting and diagnosing this one.
    
    Reported-by: Christoph Biedl <linux-kernel.bfrz@manchmal.in-ulm.de>
    Cc: Christoph Biedl <linux-kernel.bfrz@manchmal.in-ulm.de>
    Cc: Jan Beulich <JBeulich@suse.com>
    Cc: Wanpeng Li <wanpeng.li@hotmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 541cbdc60ac9ca34b21db8e6e57e4d58eee66bc8
Author: Stefan Mätje <Stefan.Maetje@esd.eu>
Date:   Wed Oct 18 13:25:17 2017 +0200

    can: esd_usb2: Fix can_dlc value for received RTR, frames
    
    commit 72d92e865d1560723e1957ee3f393688c49ca5bf upstream.
    
    The dlc member of the struct rx_msg contains also the ESD_RTR flag to
    mark received RTR frames. Without the fix the can_dlc value for received
    RTR frames would always be set to 8 by get_can_dlc() instead of the
    received value.
    
    Fixes: 96d8e90382dc ("can: Add driver for esd CAN-USB/2 device")
    Signed-off-by: Stefan Mätje <stefan.maetje@esd.eu>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 4de0e6b506b3ec5ce4d0517dafff4aea24c6ce73
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 21 21:46:37 2017 +0300

    scsi: scsi_dh_emc: return success in clariion_std_inquiry()
    
    commit 4d7d39a18b8b81511f0b893b7d2203790bf8a58b upstream.
    
    We accidentally return an uninitialized variable on success.
    
    Fixes: b6ff1b14cdf4 ("[SCSI] scsi_dh: Update EMC handler")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 40216270c67f9dcc5d73adbdcc65dd317cd4aa1d
Author: Andrew Gabbasov <andrew_gabbasov@mentor.com>
Date:   Sat Sep 30 08:55:55 2017 -0700

    usb: gadget: composite: Fix use-after-free in usb_composite_overwrite_options
    
    commit aec17e1e249567e82b26dafbb86de7d07fde8729 upstream.
    
    KASAN enabled configuration reports an error
    
        BUG: KASAN: use-after-free in usb_composite_overwrite_options+...
                    [libcomposite] at addr ...
        Read of size 1 by task ...
    
    when some driver is un-bound and then bound again.
    For example, this happens with FunctionFS driver when "ffs-test"
    test application is run several times in a row.
    
    If the driver has empty manufacturer ID string in initial static data,
    it is then replaced with generated string. After driver unbinding
    the generated string is freed, but the driver data still keep that
    pointer. And if the driver is then bound again, that pointer
    is re-used for string emptiness check.
    
    The fix is to clean up the driver string data upon its unbinding
    to drop the pointer to freed memory.
    
    Fixes: cc2683c318a5 ("usb: gadget: Provide a default implementation of default manufacturer string")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrew Gabbasov <andrew_gabbasov@mentor.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 49218ad1217e047e8c1cdfda7c7d40ff864c8682
Author: Haozhong Zhang <haozhong.zhang@intel.com>
Date:   Tue Oct 10 15:01:22 2017 +0800

    KVM: nVMX: fix guest CR4 loading when emulating L2 to L1 exit
    
    commit 8eb3f87d903168bdbd1222776a6b1e281f50513e upstream.
    
    When KVM emulates an exit from L2 to L1, it loads L1 CR4 into the
    guest CR4. Before this CR4 loading, the guest CR4 refers to L2
    CR4. Because these two CR4's are in different levels of guest, we
    should vmx_set_cr4() rather than kvm_set_cr4() here. The latter, which
    is used to handle guest writes to its CR4, checks the guest change to
    CR4 and may fail if the change is invalid.
    
    The failure may cause trouble. Consider we start
      a L1 guest with non-zero L1 PCID in use,
         (i.e. L1 CR4.PCIDE == 1 && L1 CR3.PCID != 0)
    and
      a L2 guest with L2 PCID disabled,
         (i.e. L2 CR4.PCIDE == 0)
    and following events may happen:
    
    1. If kvm_set_cr4() is used in load_vmcs12_host_state() to load L1 CR4
       into guest CR4 (in VMCS01) for L2 to L1 exit, it will fail because
       of PCID check. As a result, the guest CR4 recorded in L0 KVM (i.e.
       vcpu->arch.cr4) is left to the value of L2 CR4.
    
    2. Later, if L1 attempts to change its CR4, e.g., clearing VMXE bit,
       kvm_set_cr4() in L0 KVM will think L1 also wants to enable PCID,
       because the wrong L2 CR4 is used by L0 KVM as L1 CR4. As L1
       CR3.PCID != 0, L0 KVM will inject GP to L1 guest.
    
    Fixes: 4704d0befb072 ("KVM: nVMX: Exiting from L2 to L1")
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 75840f10809bea0e3eb963d5a2fdb827044577a8
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 14 13:18:45 2017 +0100

    IB/qib: fix false-postive maybe-uninitialized warning
    
    commit f6aafac184a3e46e919769dd4faa8bf0dc436534 upstream.
    
    aarch64-linux-gcc-7 complains about code it doesn't fully understand:
    
    drivers/infiniband/hw/qib/qib_iba7322.c: In function 'qib_7322_txchk_change':
    include/asm-generic/bitops/non-atomic.h:105:35: error: 'shadow' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    The code is right, and despite trying hard, I could not come up with a version
    that I liked better than just adding a fake initialization here to shut up the
    warning.
    
    Fixes: f931551bafe1 ("IB/qib: Add new qib driver for QLogic PCIe InfiniBand adapters")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f63d10b98de38d8264ed248221fb371e38b3b0b9
Author: Pan Bian <bianpan2016@163.com>
Date:   Mon Apr 24 18:29:16 2017 +0800

    team: fix memory leaks
    
    commit 72ec0bc64b9a5d8e0efcb717abfc757746b101b7 upstream.
    
    In functions team_nl_send_port_list_get() and
    team_nl_send_options_get(), pointer skb keeps the return value of
    nlmsg_new(). When the call to genlmsg_put() fails, the memory is not
    freed(). This will result in memory leak bugs.
    
    Fixes: 9b00cf2d1024 ("team: implement multipart netlink messages for options transfers")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 90326945a4f4939725d32e62b8b31d0375950958
Author: Feras Daoud <ferasda@mellanox.com>
Date:   Wed Dec 28 14:47:24 2016 +0200

    IB/ipoib: rtnl_unlock can not come after free_netdev
    
    commit 89a3987ab7a923c047c6dec008e60ad6f41fac22 upstream.
    
    The ipoib_vlan_add function calls rtnl_unlock after free_netdev,
    rtnl_unlock not only releases the lock, but also calls netdev_run_todo.
    The latter function browses the net_todo_list array and completes the
    unregistration of all its net_device instances. If we call free_netdev
    before rtnl_unlock, then netdev_run_todo call over the freed device causes
    panic.
    To fix, move rtnl_unlock call before free_netdev call.
    
    Fixes: 9baa0b036410 ("IB/ipoib: Add rtnl_link_ops support")
    Cc: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Feras Daoud <ferasda@mellanox.com>
    Signed-off-by: Erez Shitrit <erezsh@mellanox.com>
    Reviewed-by: Yuval Shaia <yuval.shaia@oracle.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 827a5cb0a0ad3a74426a4e0d12cbc59917785fa2
Author: satoru takeuchi <satoru.takeuchi@gmail.com>
Date:   Tue Sep 12 22:42:52 2017 +0900

    btrfs: prevent to set invalid default subvolid
    
    commit 6d6d282932d1a609e60dc4467677e0e863682f57 upstream.
    
    `btrfs sub set-default` succeeds to set an ID which isn't corresponding to any
    fs/file tree. If such the bad ID is set to a filesystem, we can't mount this
    filesystem without specifying `subvol` or `subvolid` mount options.
    
    Fixes: 6ef5ed0d386b ("Btrfs: add ioctl and incompat flag to set the default mount subvol")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Satoru Takeuchi <satoru.takeuchi@gmail.com>
    Reviewed-by: Qu Wenruo <quwenruo.btrfs@gmx.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7210062e8fc3e0f9519382c0ad2df3266989a96d
Author: Bo Yan <byan@nvidia.com>
Date:   Mon Sep 18 10:03:35 2017 -0700

    tracing: Erase irqsoff trace with empty write
    
    commit 8dd33bcb7050dd6f8c1432732f930932c9d3a33e upstream.
    
    One convenient way to erase trace is "echo > trace". However, this
    is currently broken if the current tracer is irqsoff tracer. This
    is because irqsoff tracer use max_buffer as the default trace
    buffer.
    
    Set the max_buffer as the one to be cleared when it's the trace
    buffer currently in use.
    
    Link: http://lkml.kernel.org/r/1505754215-29411-1-git-send-email-byan@nvidia.com
    
    Cc: <mingo@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 4acd4d00f ("tracing: give easy way to clear trace buffer")
    Signed-off-by: Bo Yan <byan@nvidia.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ec8c69ea4541f353451dffefd4fe1ef0f4640f3b
Author: Baohong Liu <baohong.liu@intel.com>
Date:   Tue Sep 5 16:57:19 2017 -0500

    tracing: Apply trace_clock changes to instance max buffer
    
    commit 170b3b1050e28d1ba0700e262f0899ffa4fccc52 upstream.
    
    Currently trace_clock timestamps are applied to both regular and max
    buffers only for global trace. For instance trace, trace_clock
    timestamps are applied only to regular buffer. But, regular and max
    buffers can be swapped, for example, following a snapshot. So, for
    instance trace, bad timestamps can be seen following a snapshot.
    Let's apply trace_clock timestamps to instance max buffer as well.
    
    Link: http://lkml.kernel.org/r/ebdb168d0be042dcdf51f81e696b17fabe3609c1.1504642143.git.tom.zanussi@linux.intel.com
    
    Cc: stable@vger.kernel.org
    Fixes: 277ba0446 ("tracing: Add interface to allow multiple trace buffers")
    Signed-off-by: Baohong Liu <baohong.liu@intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit c5378d27adda7f15e3465594694bf9688ebe970c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 30 16:30:35 2017 +0300

    scsi: qla2xxx: Fix an integer overflow in sysfs code
    
    commit e6f77540c067b48dee10f1e33678415bfcc89017 upstream.
    
    The value of "size" comes from the user.  When we add "start + size" it
    could lead to an integer overflow bug.
    
    It means we vmalloc() a lot more memory than we had intended.  I believe
    that on 64 bit systems vmalloc() can succeed even if we ask it to
    allocate huge 4GB buffers.  So we would get memory corruption and likely
    a crash when we call ha->isp_ops->write_optrom() and ->read_optrom().
    
    Only root can trigger this bug.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=194061
    
    Cc: <stable@vger.kernel.org>
    Fixes: b7cc176c9eb3 ("[SCSI] qla2xxx: Allow region-based flash-part accesses.")
    Reported-by: shqking <shqking@gmail.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 92e84b6aeccac20f9e665ec515c648a29017be68
Author: Stephan Mueller <smueller@chronox.de>
Date:   Thu Sep 21 10:16:53 2017 +0200

    crypto: AF_ALG - remove SGL terminator indicator when chaining
    
    commit 1d4ba7f963a93a2207fd103d4a36df1b5aeefea2 upstream.
    
    Fixed differently upstream as commit 2d97591ef43d ("crypto: af_alg - consolidation of duplicate code")
    
    The SGL is MAX_SGL_ENTS + 1 in size. The last SG entry is used for the
    chaining and is properly updated with the sg_chain invocation. During
    the filling-in of the initial SG entries, sg_mark_end is called for each
    SG entry. This is appropriate as long as no additional SGL is chained
    with the current SGL. However, when a new SGL is chained and the last
    SG entry is updated with sg_chain, the last but one entry still contains
    the end marker from the sg_mark_end. This end marker must be removed as
    otherwise a walk of the chained SGLs will cause a NULL pointer
    dereference at the last but one SG entry, because sg_next will return
    NULL.
    
    The patch only applies to all kernels up to and including 4.13. The
    patch 2d97591ef43d0587be22ad1b0d758d6df4999a0b added to 4.14-rc1
    introduced a complete new code base which addresses this bug in
    a different way. Yet, that patch is too invasive for stable kernels
    and was therefore not marked for stable.
    
    Fixes: 8ff590903d5fc ("crypto: algif_skcipher - User-space interface for skcipher operations")
    Signed-off-by: Stephan Mueller <smueller@chronox.de>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 6f47a87d1540a9f7c294b5e79e7dcf0827840060
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed Feb 4 15:25:09 2015 +0100

    ip6_gre: fix endianness errors in ip6gre_err
    
    commit d1e158e2d7a0a91110b206653f0e02376e809150 upstream.
    
    info is in network byte order, change it back to host byte order
    before use. In particular, the current code sets the MTU of the tunnel
    to a wrong (too big) value.
    
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 488ec7b227e442ec3f288ad9245d9a78ec3df57b
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 8 15:48:47 2017 -0700

    ipv6: fix typo in fib6_net_exit()
    
    commit 32a805baf0fb70b6dbedefcd7249ac7f580f9e3b upstream.
    
    IPv6 FIB should use FIB6_TABLE_HASHSZ, not FIB_TABLE_HASHSZ.
    
    Fixes: ba1cc08d9488 ("ipv6: fix memory leak with multiple tables during netns destruction")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 4e39d5e48bac267582da35d420bf67f985105fd7
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Sep 8 10:26:19 2017 +0200

    ipv6: fix memory leak with multiple tables during netns destruction
    
    commit ba1cc08d9488c94cb8d94f545305688b72a2a300 upstream.
    
    fib6_net_exit only frees the main and local tables. If another table was
    created with fib6_alloc_table, we leak it when the netns is destroyed.
    
    Fix this in the same way ip_fib_net_exit cleans up tables, by walking
    through the whole hashtable of fib6_table's. We can get rid of the
    special cases for local and main, since they're also part of the
    hashtable.
    
    Reproducer:
        ip netns add x
        ip -net x -6 rule add from 6003:1::/64 table 100
        ip netns del x
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Fixes: 58f09b78b730 ("[NETNS][IPV6] ip6_fib - make it per network namespace")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit dd3e5010b97a24dd08dfefce517e06dc91fb01ad
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 23 15:59:49 2017 +0200

    qlge: avoid memcpy buffer overflow
    
    commit e58f95831e7468d25eb6e41f234842ecfe6f014f upstream.
    
    gcc-8.0.0 (snapshot) points out that we copy a variable-length string
    into a fixed length field using memcpy() with the destination length,
    and that ends up copying whatever follows the string:
    
        inlined from 'ql_core_dump' at drivers/net/ethernet/qlogic/qlge/qlge_dbg.c:1106:2:
    drivers/net/ethernet/qlogic/qlge/qlge_dbg.c:708:2: error: 'memcpy' reading 15 bytes from a region of size 14 [-Werror=stringop-overflow=]
      memcpy(seg_hdr->description, desc, (sizeof(seg_hdr->description)) - 1);
    
    Changing it to use strncpy() will instead zero-pad the destination,
    which seems to be the right thing to do here.
    
    The bug is probably harmless, but it seems like a good idea to address
    it in stable kernels as well, if only for the purpose of building with
    gcc-8 without warnings.
    
    Fixes: a61f80261306 ("qlge: Add ethtool register dump function.")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 71bec91ec426598cdf2509164e713675a32e1f5b
Author: James Morse <james.morse@arm.com>
Date:   Thu Mar 16 14:30:39 2017 +0000

    ACPI / APEI: Add missing synchronize_rcu() on NOTIFY_SCI removal
    
    commit 7d64f82cceb21e6d95db312d284f5f195e120154 upstream.
    
    When removing a GHES device notified by SCI, list_del_rcu() is used,
    ghes_remove() should call synchronize_rcu() before it goes on to call
    kfree(ghes), otherwise concurrent RCU readers may still hold this list
    entry after it has been freed.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: "Huang, Ying" <ying.huang@intel.com>
    Fixes: 81e88fdc432a (ACPI, APEI, Generic Hardware Error Source POLL/IRQ/NMI notification type support)
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 136211c28496f8c7ca1f3e70e637cdbba7e491da
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Aug 22 08:15:13 2017 +0200

    ALSA: core: Fix unexpected error at replacing user TLV
    
    commit 88c54cdf61f508ebcf8da2d819f5dfc03e954d1d upstream.
    
    When user tries to replace the user-defined control TLV, the kernel
    checks the change of its content via memcmp().  The problem is that
    the kernel passes the return value from memcmp() as is.  memcmp()
    gives a non-zero negative value depending on the comparison result,
    and this shall be recognized as an error code.
    
    The patch covers that corner-case, return 1 properly for the changed
    TLV.
    
    Fixes: 8aa9b586e420 ("[ALSA] Control API - more robust TLV implementation")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit b4824101fca1c3bb111f3839c0fbc08082e9a26b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jul 14 11:31:03 2017 +0200

    staging:iio:resolver:ad2s1210 fix negative IIO_ANGL_VEL read
    
    commit 105967ad68d2eb1a041bc041f9cf96af2a653b65 upstream.
    
    gcc-7 points out an older regression:
    
    drivers/staging/iio/resolver/ad2s1210.c: In function 'ad2s1210_read_raw':
    drivers/staging/iio/resolver/ad2s1210.c:515:42: error: '<<' in boolean context, did you mean '<' ? [-Werror=int-in-bool-context]
    
    The original code had 'unsigned short' here, but incorrectly got
    converted to 'bool'. This reverts the regression and uses a normal
    type instead.
    
    Fixes: 29148543c521 ("staging:iio:resolver:ad2s1210 minimal chan spec conversion.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit fe1fd359c1dbde1c1561802f62a16ddc67c9ac07
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu Aug 10 12:41:58 2017 -0400

    packet: fix tp_reserve race in packet_set_ring
    
    commit c27927e372f0785f3303e8fad94b85945e2c97b7 upstream.
    
    Updates to tp_reserve can race with reads of the field in
    packet_set_ring. Avoid this by holding the socket lock during
    updates in setsockopt PACKET_RESERVE.
    
    This bug was discovered by syzkaller.
    
    Fixes: 8913336a7e8d ("packet: add PACKET_RESERVE sockopt")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 162f50e6914ff75f11d15e52507aa88875878fd8
Author: Tejun Heo <tj@kernel.org>
Date:   Sun Jul 23 08:36:15 2017 -0400

    workqueue: implicit ordered attribute should be overridable
    
    commit 0a94efb5acbb6980d7c9ab604372d93cd507e4d8 upstream.
    
    5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be
    ordered") automatically enabled ordered attribute for unbound
    workqueues w/ max_active == 1.  Because ordered workqueues reject
    max_active and some attribute changes, this implicit ordered mode
    broke cases where the user creates an unbound workqueue w/ max_active
    == 1 and later explicitly changes the related attributes.
    
    This patch distinguishes explicit and implicit ordered setting and
    overrides from attribute changes if implict.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: 5c0338c68706 ("workqueue: restore WQ_UNBOUND/max_active==1 to be ordered")
    Cc: Holger Hoffstätte <holger@applied-asynchrony.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ef6fa3f56c073d7d136f7a318088a030c904f4aa
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Wed Jul 19 15:41:33 2017 -0700

    ipv4: initialize fib_trie prior to register_netdev_notifier call.
    
    commit 8799a221f5944a7d74516ecf46d58c28ec1d1f75 upstream.
    
    Net stack initialization currently initializes fib-trie after the
    first call to netdevice_notifier() call. In fact fib_trie initialization
    needs to happen before first rtnl_register(). It does not cause any problem
    since there are no devices UP at this moment, but trying to bring 'lo'
    UP at initialization would make this assumption wrong and exposes the issue.
    
    Fixes following crash
    
     Call Trace:
      ? alternate_node_alloc+0x76/0xa0
      fib_table_insert+0x1b7/0x4b0
      fib_magic.isra.17+0xea/0x120
      fib_add_ifaddr+0x7b/0x190
      fib_netdev_event+0xc0/0x130
      register_netdevice_notifier+0x1c1/0x1d0
      ip_fib_init+0x72/0x85
      ip_rt_init+0x187/0x1e9
      ip_init+0xe/0x1a
      inet_init+0x171/0x26c
      ? ipv4_offload_init+0x66/0x66
      do_one_initcall+0x43/0x160
      kernel_init_freeable+0x191/0x219
      ? rest_init+0x80/0x80
      kernel_init+0xe/0x150
      ret_from_fork+0x22/0x30
     Code: f6 46 23 04 74 86 4c 89 f7 e8 ae 45 01 00 49 89 c7 4d 85 ff 0f 85 7b ff ff ff 31 db eb 08 4c 89 ff e8 16 47 01 00 48 8b 44 24 38 <45> 8b 6e 14 4d 63 76 74 48 89 04 24 0f 1f 44 00 00 48 83 c4 08
     RIP: kmem_cache_alloc+0xcf/0x1c0 RSP: ffff9b1500017c28
     CR2: 0000000000000014
    
    Fixes: 7b1a74fdbb9e ("[NETNS]: Refactor fib initialization so it can handle multiple namespaces.")
    Fixes: 7f9b80529b8a ("[IPV4]: fib hash|trie initialization")
    
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 50602d3e499b2419b7ff0eda022525625f90e53c
Author: Leon Romanovsky <leon@kernel.org>
Date:   Thu Dec 29 18:37:11 2016 +0200

    net/mlx4: Remove BUG_ON from ICM allocation routine
    
    commit c1d5f8ff80ea84768f5fae1ca9d1abfbb5e6bbaa upstream.
    
    This patch removes BUG_ON() macro from mlx4_alloc_icm_coherent()
    by checking DMA address alignment in advance and performing proper
    folding in case of error.
    
    Fixes: 5b0bf5e25efe ("mlx4_core: Support ICM tables in coherent memory")
    Reported-by: Ozgur Karatas <okaratas@member.fsf.org>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit c1327b455fda6390d2b1b199ce35b20d2bd3dea8
Author: Jin Yao <yao.jin@linux.intel.com>
Date:   Thu Jun 8 14:01:44 2017 +0800

    perf annotate: Fix broken arrow at row 0 connecting jmp instruction to its target
    
    commit 80f62589fa52f530cffc50e78c0b5a2ae572d61e upstream.
    
    When the jump instruction is displayed at the row 0 in annotate view,
    the arrow is broken. An example:
    
     16.86 │   ┌──je     82
      0.01 │      movsd  (%rsp),%xmm0
           │      movsd  0x8(%rsp),%xmm4
           │      movsd  0x8(%rsp),%xmm1
           │      movsd  (%rsp),%xmm3
           │      divsd  %xmm4,%xmm0
           │      divsd  %xmm3,%xmm1
           │      movsd  (%rsp),%xmm2
           │      addsd  %xmm1,%xmm0
           │      addsd  %xmm2,%xmm0
           │      movsd  %xmm0,(%rsp)
           │82:   sub    $0x1,%ebx
     83.03 │    ↑ jne    38
           │      add    $0x10,%rsp
           │      xor    %eax,%eax
           │      pop    %rbx
           │    ← retq
    
    The patch increments the row number before checking with 0.
    
    Signed-off-by: Yao Jin <yao.jin@linux.intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kan Liang <kan.liang@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Fixes: 944e1abed9e1 ("perf ui browser: Add method to draw up/down arrow line")
    Link: http://lkml.kernel.org/r/1496901704-30275-1-git-send-email-yao.jin@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 3a7578afc3ad93519ac925f823b541b9490433f5
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jun 13 16:20:25 2017 +0200

    udf: Fix deadlock between writeback and udf_setsize()
    
    commit f2e95355891153f66d4156bf3a142c6489cd78c6 upstream.
    
    udf_setsize() called truncate_setsize() with i_data_sem held. Thus
    truncate_pagecache() called from truncate_setsize() could lock a page
    under i_data_sem which can deadlock as page lock ranks below
    i_data_sem - e. g. writeback can hold page lock and try to acquire
    i_data_sem to map a block.
    
    Fix the problem by moving truncate_setsize() calls from under
    i_data_sem. It is safe for us to change i_size without holding
    i_data_sem as all the places that depend on i_size being stable already
    hold inode_lock.
    
    CC: stable@vger.kernel.org
    Fixes: 7e49b6f2480cb9a9e7322a91592e56a5c85361f5
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ad0871670732e6094c796e0d3062c7b7843891fd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu May 11 08:46:44 2017 -0300

    ir-core: fix gcc-7 warning on bool arithmetic
    
    commit bd7e31bbade02bc1e92aa00d5cf2cee2da66838a upstream.
    
    gcc-7 suggests that an expression using a bitwise not and a bitmask
    on a 'bool' variable is better written using boolean logic:
    
    drivers/media/rc/imon.c: In function 'imon_incoming_scancode':
    drivers/media/rc/imon.c:1725:22: error: '~' on a boolean expression [-Werror=bool-operation]
        ictx->pad_mouse = ~(ictx->pad_mouse) & 0x1;
                          ^
    drivers/media/rc/imon.c:1725:22: note: did you mean to use logical not?
    
    I agree.
    
    Fixes: 21677cfc562a ("V4L/DVB: ir-core: add imon driver")
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7fb443fa86195a13277194e5f112445d982e639e
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Fri Jul 7 16:57:06 2017 +0300

    crypto: caam - fix signals handling
    
    commit 7459e1d25ffefa2b1be799477fcc1f6c62f6cec7 upstream.
    
    Driver does not properly handle the case when signals interrupt
    wait_for_completion_interruptible():
    -it does not check for return value
    -completion structure is allocated on stack; in case a signal interrupts
    the sleep, it will go out of scope, causing the worker thread
    (caam_jr_dequeue) to fail when it accesses it
    
    wait_for_completion_interruptible() is replaced with uninterruptable
    wait_for_completion().
    We choose to block all signals while waiting for I/O (device executing
    the split key generation job descriptor) since the alternative - in
    order to have a deterministic device state - would be to flush the job
    ring (aborting *all* in-progress jobs).
    
    Cc: <stable@vger.kernel.org>
    Fixes: 045e36780f115 ("crypto: caam - ahash hmac support")
    Fixes: 4c1ec1f930154 ("crypto: caam - refactor key_gen, sg")
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit b569326cedfc6e0f2dc1c3cc237ad717e4a5b0f4
Author: Helge Deller <deller@gmx.de>
Date:   Fri Jul 14 14:49:38 2017 -0700

    mm: fix overflow check in expand_upwards()
    
    commit 37511fb5c91db93d8bd6e3f52f86e5a7ff7cfcdf upstream.
    
    Jörn Engel noticed that the expand_upwards() function might not return
    -ENOMEM in case the requested address is (unsigned long)-PAGE_SIZE and
    if the architecture didn't defined TASK_SIZE as multiple of PAGE_SIZE.
    
    Affected architectures are arm, frv, m68k, blackfin, h8300 and xtensa
    which all define TASK_SIZE as 0xffffffff, but since none of those have
    an upwards-growing stack we currently have no actual issue.
    
    Nevertheless let's fix this just in case any of the architectures with
    an upward-growing stack (currently parisc, metag and partly ia64) define
    TASK_SIZE similar.
    
    Link: http://lkml.kernel.org/r/20170702192452.GA11868@p100.box
    Fixes: bd726c90b6b8 ("Allow stack to grow up to address space limit")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: Jörn Engel <joern@purestorage.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 9efa3d527965d5d6772332841923df8d62810bfe
Author: Srinivas Dasari <dasaris@qti.qualcomm.com>
Date:   Fri Jul 7 01:43:39 2017 +0300

    cfg80211: Check if PMKID attribute is of expected size
    
    commit 9361df14d1cbf966409d5d6f48bb334384fbe138 upstream.
    
    nla policy checks for only maximum length of the attribute data
    when the attribute type is NLA_BINARY. If userspace sends less
    data than specified, the wireless drivers may access illegal
    memory. When type is NLA_UNSPEC, nla policy check ensures that
    userspace sends minimum specified length number of bytes.
    
    Remove type assignment to NLA_BINARY from nla_policy of
    NL80211_ATTR_PMKID to make this NLA_UNSPEC and to make sure minimum
    WLAN_PMKID_LEN bytes are received from userspace with
    NL80211_ATTR_PMKID.
    
    Fixes: 67fbb16be69d ("nl80211: PMKSA caching support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Srinivas Dasari <dasaris@qti.qualcomm.com>
    Signed-off-by: Jouni Malinen <jouni@qca.qualcomm.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit d47408188914e18508116fe473c7889208a59a7d
Author: Srinivas Dasari <dasaris@qti.qualcomm.com>
Date:   Fri Jul 7 01:43:42 2017 +0300

    cfg80211: Validate frequencies nested in NL80211_ATTR_SCAN_FREQUENCIES
    
    commit d7f13f7450369281a5d0ea463cc69890a15923ae upstream.
    
    validate_scan_freqs() retrieves frequencies from attributes
    nested in the attribute NL80211_ATTR_SCAN_FREQUENCIES with
    nla_get_u32(), which reads 4 bytes from each attribute
    without validating the size of data received. Attributes
    nested in NL80211_ATTR_SCAN_FREQUENCIES don't have an nla policy.
    
    Validate size of each attribute before parsing to avoid potential buffer
    overread.
    
    Fixes: 2a519311926 ("cfg80211/nl80211: scanning (and mac80211 update to use it)")
    Cc: stable@vger.kernel.org
    Signed-off-by: Srinivas Dasari <dasaris@qti.qualcomm.com>
    Signed-off-by: Jouni Malinen <jouni@qca.qualcomm.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit fa69abfe6a07ae3c009b30271966b871799077b6
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Wed Jun 21 14:34:58 2017 -0700

    ipv6: avoid unregistering inet6_dev for loopback
    
    commit 60abc0be96e00ca71bac083215ac91ad2e575096 upstream.
    
    The per netns loopback_dev->ip6_ptr is unregistered and set to
    NULL when its mtu is set to smaller than IPV6_MIN_MTU, this
    leads to that we could set rt->rt6i_idev NULL after a
    rt6_uncached_list_flush_dev() and then crash after another
    call.
    
    In this case we should just bring its inet6_dev down, rather
    than unregistering it, at least prior to commit 176c39af29bc
    ("netns: fix addrconf_ifdown kernel panic") we always
    override the case for loopback.
    
    Thanks a lot to Andrey for finding a reliable reproducer.
    
    Fixes: 176c39af29bc ("netns: fix addrconf_ifdown kernel panic")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Cc: Daniel Lezcano <dlezcano@fr.ibm.com>
    Cc: David Ahern <dsahern@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 98b9e94ba66c9907ff8f7276c6f9bb71cce1c4ae
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Feb 9 17:17:52 2017 +0000

    KEYS: Fix an error code in request_master_key()
    
    commit 57cb17e764ba0aaa169d07796acce54ccfbc6cae upstream.
    
    This function has two callers and neither are able to handle a NULL
    return.  Really, -EINVAL is the correct thing return here anyway.  This
    fixes some static checker warnings like:
    
            security/keys/encrypted-keys/encrypted.c:709 encrypted_key_decrypt()
            error: uninitialized symbol 'master_key'.
    
    Fixes: 7e70cb497850 ("keys: add new key-type encrypted")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit fe77accbd15d54708f5f4f23b585f6ca6225f9a4
Author: Radim Krčmář <rkrcmar@redhat.com>
Date:   Thu May 18 19:37:30 2017 +0200

    KVM: x86: zero base3 of unusable segments
    
    commit f0367ee1d64d27fa08be2407df5c125442e885e3 upstream.
    
    Static checker noticed that base3 could be used uninitialized if the
    segment was not present (useable).  Random stack values probably would
    not pass VMCS entry checks.
    
    Reported-by:  Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 1aa366163b8b ("KVM: x86 emulator: consolidate segment accessors")
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 40cfe451debb10d983378f72868359a17656be8a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 7 16:19:06 2017 +0300

    cpufreq: s3c2416: double free on driver init error path
    
    commit a69261e4470d680185a15f748d9cdafb37c57a33 upstream.
    
    The "goto err_armclk;" error path already does a clk_put(s3c_freq->hclk);
    so this is a double free.
    
    Fixes: 34ee55075265 ([CPUFREQ] Add S3C2416/S3C2450 cpufreq driver)
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 04d006963029d0346be966d1c5e6147995d08b8d
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 14 13:34:05 2017 +0300

    xfrm: Oops on error in pfkey_msg2xfrm_state()
    
    commit 1e3d0c2c70cd3edb5deed186c5f5c75f2b84a633 upstream.
    
    There are some missing error codes here so we accidentally return NULL
    instead of an error pointer.  It results in a NULL pointer dereference.
    
    Fixes: df71837d5024 ("[LSM-IPSec]: Security association restriction.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f478b4264a3c62b6b2d2b63a707e56c2f0cfdc6c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 14 13:35:37 2017 +0300

    xfrm: NULL dereference on allocation failure
    
    commit e747f64336fc15e1c823344942923195b800aa1e upstream.
    
    The default error code in pfkey_msg2xfrm_state() is -ENOBUFS.  We
    added a new call to security_xfrm_state_alloc() which sets "err" to zero
    so there several places where we can return ERR_PTR(0) if kmalloc()
    fails.  The caller is expecting error pointers so it leads to a NULL
    dereference.
    
    Fixes: df71837d5024 ("[LSM-IPSec]: Security association restriction.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 6ac502ceabf86463c4a35166851edf497960262f
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Dec 23 19:56:56 2016 -0800

    net: korina: Fix NAPI versus resources freeing
    
    commit e6afb1ad88feddf2347ea779cfaf4d03d3cd40b6 upstream.
    
    Commit beb0babfb77e ("korina: disable napi on close and restart")
    introduced calls to napi_disable() that were missing before,
    unfortunately this leaves a small window during which NAPI has a chance
    to run, yet we just freed resources since korina_free_ring() has been
    called:
    
    Fix this by disabling NAPI first then freeing resource, and make sure
    that we also cancel the restart task before doing the resource freeing.
    
    Fixes: beb0babfb77e ("korina: disable napi on close and restart")
    Reported-by: Alexandros C. Couloumbis <alex@ozo.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 18144201ec726dffd07cebf3df0cd2b799fc9fc0
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue May 30 16:21:51 2017 +0100

    net: phy: fix marvell phy status reading
    
    commit 898805e0cdf7fd860ec21bf661d3a0285a3defbd upstream.
    
    The Marvell driver incorrectly provides phydev->lp_advertising as the
    logical and of the link partner's advert and our advert.  This is
    incorrect - this field is supposed to store the link parter's unmodified
    advertisment.
    
    This allows ethtool to report the correct link partner auto-negotiation
    status.
    
    Fixes: be937f1f89ca ("Marvell PHY m88e1111 driver fix")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 240607692cd84b2ed16b0f346bdaa4f5a787322b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon May 8 15:55:17 2017 -0700

    drivers/misc/c2port/c2port-duramar2150.c: checking for NULL instead of IS_ERR()
    
    commit 8128a31eaadbcdfa37774bbd28f3f00bac69996a upstream.
    
    c2port_device_register() never returns NULL, it uses error pointers.
    
    Link: http://lkml.kernel.org/r/20170412083321.GC3250@mwanda
    Fixes: 65131cd52b9e ("c2port: add c2port support for Eurotech Duramar 2150")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Rodolfo Giometti <giometti@linux.it>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 779ec20b9519444ac3bd4ec6821402948119db4d
Author: Chris Brandt <chris.brandt@renesas.com>
Date:   Thu Apr 27 12:12:49 2017 -0700

    usb: r8a66597-hcd: decrease timeout
    
    commit dd14a3e9b92ac6f0918054f9e3477438760a4fa6 upstream.
    
    The timeout for BULK packets was 300ms which is a long time if other
    endpoints or devices are waiting for their turn. Changing it to 50ms
    greatly increased the overall performance for multi-endpoint devices.
    
    Fixes: 5d3043586db4 ("usb: r8a66597-hcd: host controller driver for R8A6659")
    Signed-off-by: Chris Brandt <chris.brandt@renesas.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit e1bdf20be95bdf5ca4c4c63159965e8ccbca048d
Author: Chris Brandt <chris.brandt@renesas.com>
Date:   Thu Apr 27 12:12:02 2017 -0700

    usb: r8a66597-hcd: select a different endpoint on timeout
    
    commit 1f873d857b6c2fefb4dada952674aa01bcfb92bd upstream.
    
    If multiple endpoints on a single device have pending IN URBs and one
    endpoint times out due to NAKs (perfectly legal), select a different
    endpoint URB to try.
    The existing code only checked to see another device address has pending
    URBs and ignores other IN endpoints on the current device address. This
    leads to endpoints never getting serviced if one endpoint is using NAK as
    a flow control method.
    
    Fixes: 5d3043586db4 ("usb: r8a66597-hcd: host controller driver for R8A6659")
    Signed-off-by: Chris Brandt <chris.brandt@renesas.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 655e5ff7d64930835bf42a3be85b8eec0e40ddbd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Feb 2 12:53:04 2017 -0200

    pvrusb2: reduce stack usage pvr2_eeprom_analyze()
    
    commit 6830733d53a4517588e56227b9c8538633f0c496 upstream.
    
    The driver uses a relatively large data structure on the stack, which
    showed up on my radar as we get a warning with the "latent entropy"
    GCC plugin:
    
    drivers/media/usb/pvrusb2/pvrusb2-eeprom.c:153:1: error: the frame size of 1376 bytes is larger than 1152 bytes [-Werror=frame-larger-than=]
    
    The warning is usually hidden as we raise the warning limit to 2048
    when the plugin is enabled, but I'd like to lower that again in the
    future, and making this function smaller helps to do that without
    build regressions.
    
    Further analysis shows that putting an 'i2c_client' structure on
    the stack is not really supported, as the embedded 'struct device'
    is not initialized here, and we are only saved by the fact that
    the function that is called here does not use the pointer at all.
    
    Fixes: d855497edbfb ("V4L/DVB (4228a): pvrusb2 to kernel 2.6.18")
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 1e7ae91989929cbbb3b505514df2e3410a1757f2
Author: Tony Lindgren <tony@atomide.com>
Date:   Sat Apr 15 10:05:08 2017 -0700

    mfd: omap-usb-tll: Fix inverted bit use for USB TLL mode
    
    commit 8b8a84c54aff4256d592dc18346c65ecf6811b45 upstream.
    
    Commit 16fa3dc75c22 ("mfd: omap-usb-tll: HOST TLL platform driver")
    added support for USB TLL, but uses OMAP_TLL_CHANNEL_CONF_ULPINOBITSTUFF
    bit the wrong way. The comments in the code are correct, but the inverted
    use of OMAP_TLL_CHANNEL_CONF_ULPINOBITSTUFF causes the register to be
    enabled instead of disabled unlike what the comments say.
    
    Without this change the Wrigley 3G LTE modem on droid 4 EHCI bus can
    be only pinged few times before it stops responding.
    
    Fixes: 16fa3dc75c22 ("mfd: omap-usb-tll: HOST TLL platform driver")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit e52eca82d17c9f093b6a9daa5d3e9462459404fc
Author: Laura Abbott <labbott@redhat.com>
Date:   Mon May 8 14:23:16 2017 -0700

    x86/mm/32: Set the '__vmalloc_start_set' flag in initmem_init()
    
    commit 861ce4a3244c21b0af64f880d5bfe5e6e2fb9e4a upstream.
    
    '__vmalloc_start_set' currently only gets set in initmem_init() when
    !CONFIG_NEED_MULTIPLE_NODES. This breaks detection of vmalloc address
    with virt_addr_valid() with CONFIG_NEED_MULTIPLE_NODES=y, causing
    a kernel crash:
    
      [mm/usercopy] 517e1fbeb6: kernel BUG at arch/x86/mm/physaddr.c:78!
    
    Set '__vmalloc_start_set' appropriately for that case as well.
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: dc16ecf7fd1f ("x86-32: use specific __vmalloc_start_set flag in __virt_addr_valid")
    Link: http://lkml.kernel.org/r/1494278596-30373-1-git-send-email-labbott@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 12d805b590300156e3d9381b6e7f0a549248265c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri May 12 16:35:45 2017 +0200

    serial: efm32: Fix parity management in 'efm32_uart_console_get_options()'
    
    commit be40597a1bc173bf9dadccdf5388b956f620ae8f upstream.
    
    UARTn_FRAME_PARITY_ODD is 0x0300
    UARTn_FRAME_PARITY_EVEN is 0x0200
    So if the UART is configured for EVEN parity, it would be reported as ODD.
    Fix it by correctly testing if the 2 bits are set.
    
    Fixes: 3afbd89c9639 ("serial/efm32: add new driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f6b525b94bda339cf0064e2561fc7e7747bb46a8
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Tue Feb 14 19:11:44 2017 +0200

    net: xilinx_emaclite: fix receive buffer overflow
    
    commit cd224553641848dd17800fe559e4ff5d208553e8 upstream.
    
    xilinx_emaclite looks at the received data to try to determine the
    Ethernet packet length but does not properly clamp it if
    proto_type == ETH_P_IP or 1500 < proto_type <= 1518, causing a buffer
    overflow and a panic via skb_panic() as the length exceeds the allocated
    skb size.
    
    Fix those cases.
    
    Also add an additional unconditional check with WARN_ON() at the end.
    
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Fixes: bb81b2ddfa19 ("net: add Xilinx emac lite device driver")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7e25c935ec7b43c088d21b9c8e4a6b970375d933
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Apr 27 12:12:08 2017 +0300

    drm/vmwgfx: Handle vmalloc() failure in vmw_local_fifo_reserve()
    
    commit f0c62e9878024300319ba2438adc7b06c6b9c448 upstream.
    
    If vmalloc() fails then we need to a bit of cleanup before returning.
    
    Cc: <stable@vger.kernel.org>
    Fixes: fb1d9738ca05 ("drm/vmwgfx: Add DRM driver for VMware Virtual GPU")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Sinclair Yeh <syeh@vmware.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit a72c279dfbfa5b6c5832f16960d8dce31f27645b
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Tue May 23 16:50:47 2017 +0200

    scsi: qla2xxx: don't disable a not previously enabled PCI device
    
    commit ddff7ed45edce4a4c92949d3c61cd25d229c4a14 upstream.
    
    When pci_enable_device() or pci_enable_device_mem() fail in
    qla2x00_probe_one() we bail out but do a call to
    pci_disable_device(). This causes the dev_WARN_ON() in
    pci_disable_device() to trigger, as the device wasn't enabled
    previously.
    
    So instead of taking the 'probe_out' error path we can directly return
    *iff* one of the pci_enable_device() calls fails.
    
    Additionally rename the 'probe_out' goto label's name to the more
    descriptive 'disable_device'.
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Fixes: e315cd28b9ef ("[SCSI] qla2xxx: Code changes for qla data structure refactoring")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Reviewed-by: Giridhar Malavali <giridhar.malavali@cavium.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f7eb769a8db069e8a999cea74457c24d813b7c38
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Jun 3 09:29:25 2017 -0700

    net: ping: do not abuse udp_poll()
    
    commit 77d4b1d36926a9b8387c6b53eeba42bcaaffcea3 upstream.
    
    Alexander reported various KASAN messages triggered in recent kernels
    
    The problem is that ping sockets should not use udp_poll() in the first
    place, and recent changes in UDP stack finally exposed this old bug.
    
    Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
    Fixes: 6d0bfe226116 ("net: ipv6: Add IPv6 support to the ping socket.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Sasha Levin <alexander.levin@verizon.com>
    Cc: Solar Designer <solar@openwall.com>
    Cc: Vasiliy Kulikov <segoon@openwall.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Acked-By: Lorenzo Colitti <lorenzo@google.com>
    Tested-By: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [wt: removed the parts related to ping6 as 6d0bfe226116 is not in 3.10]
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ca58e3129147cd80996c9a7cde5faee28f9981ec
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Apr 26 16:56:26 2017 +0200

    kvm: async_pf: fix rcu_irq_enter() with irqs enabled
    
    commit bbaf0e2b1c1b4f88abd6ef49576f0efb1734eae5 upstream.
    
    native_safe_halt enables interrupts, and you just shouldn't
    call rcu_irq_enter() with interrupts enabled.  Reorder the
    call with the following local_irq_disable() to respect the
    invariant.
    
    Reported-by: Ross Zwisler <ross.zwisler@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Tested-by: Wanpeng Li <wanpeng.li@hotmail.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 28968bccd81010f0ab4c198849aaed6fa20658a3
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jul 19 14:53:02 2017 +0200

    x86/io: Add "memory" clobber to insb/insw/insl/outsb/outsw/outsl
    
    commit 7206f9bf108eb9513d170c73f151367a1bdf3dbf upstream.
    
    The x86 version of insb/insw/insl uses an inline assembly that does
    not have the target buffer listed as an output. This can confuse
    the compiler, leading it to think that a subsequent access of the
    buffer is uninitialized:
    
      drivers/net/wireless/wl3501_cs.c: In function ‘wl3501_mgmt_scan_confirm’:
      drivers/net/wireless/wl3501_cs.c:665:9: error: ‘sig.status’ is used uninitialized in this function [-Werror=uninitialized]
      drivers/net/wireless/wl3501_cs.c:668:12: error: ‘sig.cap_info’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
      drivers/net/sb1000.c: In function 'sb1000_rx':
      drivers/net/sb1000.c:775:9: error: 'st[0]' is used uninitialized in this function [-Werror=uninitialized]
      drivers/net/sb1000.c:776:10: error: 'st[1]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
      drivers/net/sb1000.c:784:11: error: 'st[1]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    I tried to mark the exact input buffer as an output here, but couldn't
    figure it out. As suggested by Linus, marking all memory as clobbered
    however is good enough too. For the outs operations, I also add the
    memory clobber, to force the input to be written to local variables.
    This is probably already guaranteed by the "asm volatile", but it can't
    hurt to do this for symmetry.
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Link: http://lkml.kernel.org/r/20170719125310.2487451-5-arnd@arndb.de
    Link: https://lkml.org/lkml/2017/7/12/605
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 61eea2752a19dbf4749e6300093188401ad53fd3
Author: Gao Feng <gfree.wind@vip.163.com>
Date:   Fri Jun 16 15:00:02 2017 +0800

    net: 8021q: Fix one possible panic caused by BUG_ON in free_netdev
    
    commit 9745e362add89432d2c951272a99b0a5fe4348a9 upstream.
    
    The register_vlan_device would invoke free_netdev directly, when
    register_vlan_dev failed. It would trigger the BUG_ON in free_netdev
    if the dev was already registered. In this case, the netdev would be
    freed in netdev_run_todo later.
    
    So add one condition check now. Only when dev is not registered, then
    free it directly.
    
    The following is the part coredump when netdev_upper_dev_link failed
    in register_vlan_dev. I removed the lines which are too long.
    
    [  411.237457] ------------[ cut here ]------------
    [  411.237458] kernel BUG at net/core/dev.c:7998!
    [  411.237484] invalid opcode: 0000 [#1] SMP
    [  411.237705]  [last unloaded: 8021q]
    [  411.237718] CPU: 1 PID: 12845 Comm: vconfig Tainted: G            E   4.12.0-rc5+ #6
    [  411.237737] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/02/2015
    [  411.237764] task: ffff9cbeb6685580 task.stack: ffffa7d2807d8000
    [  411.237782] RIP: 0010:free_netdev+0x116/0x120
    [  411.237794] RSP: 0018:ffffa7d2807dbdb0 EFLAGS: 00010297
    [  411.237808] RAX: 0000000000000002 RBX: ffff9cbeb6ba8fd8 RCX: 0000000000001878
    [  411.237826] RDX: 0000000000000001 RSI: 0000000000000282 RDI: 0000000000000000
    [  411.237844] RBP: ffffa7d2807dbdc8 R08: 0002986100029841 R09: 0002982100029801
    [  411.237861] R10: 0004000100029980 R11: 0004000100029980 R12: ffff9cbeb6ba9000
    [  411.238761] R13: ffff9cbeb6ba9060 R14: ffff9cbe60f1a000 R15: ffff9cbeb6ba9000
    [  411.239518] FS:  00007fb690d81700(0000) GS:ffff9cbebb640000(0000) knlGS:0000000000000000
    [  411.239949] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  411.240454] CR2: 00007f7115624000 CR3: 0000000077cdf000 CR4: 00000000003406e0
    [  411.240936] Call Trace:
    [  411.241462]  vlan_ioctl_handler+0x3f1/0x400 [8021q]
    [  411.241910]  sock_ioctl+0x18b/0x2c0
    [  411.242394]  do_vfs_ioctl+0xa1/0x5d0
    [  411.242853]  ? sock_alloc_file+0xa6/0x130
    [  411.243465]  SyS_ioctl+0x79/0x90
    [  411.243900]  entry_SYSCALL_64_fastpath+0x1e/0xa9
    [  411.244425] RIP: 0033:0x7fb69089a357
    [  411.244863] RSP: 002b:00007ffcd04e0fc8 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
    [  411.245445] RAX: ffffffffffffffda RBX: 00007ffcd04e2884 RCX: 00007fb69089a357
    [  411.245903] RDX: 00007ffcd04e0fd0 RSI: 0000000000008983 RDI: 0000000000000003
    [  411.246527] RBP: 00007ffcd04e0fd0 R08: 0000000000000000 R09: 1999999999999999
    [  411.246976] R10: 000000000000053f R11: 0000000000000202 R12: 0000000000000004
    [  411.247414] R13: 00007ffcd04e1128 R14: 00007ffcd04e2888 R15: 0000000000000001
    [  411.249129] RIP: free_netdev+0x116/0x120 RSP: ffffa7d2807dbdb0
    
    Signed-off-by: Gao Feng <gfree.wind@vip.163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit bc3eedee113e4069762023a0e1dbed9647ffbcfa
Author: Majd Dibbiny <majd@mellanox.com>
Date:   Thu Feb 23 12:02:43 2017 +0200

    net/mlx4_core: Fix VF overwrite of module param which disables DMFS on new probed PFs
    
    commit 95f1ba9a24af9769f6e20dfe9a77c863f253f311 upstream.
    
    In the VF driver, module parameter mlx4_log_num_mgm_entry_size was
    mistakenly overwritten -- and in a manner which overrode the
    device-managed flow steering option encoded in the parameter.
    
    log_num_mgm_entry_size is a global module parameter which
    affects all ConnectX-3 PFs installed on that host.
    If a VF changes log_num_mgm_entry_size, this will affect all PFs
    which are probed subsequent to the change (by disabling DMFS for
    those PFs).
    
    Fixes: 3c439b5586e9 ("mlx4_core: Allow choosing flow steering mode")
    Signed-off-by: Majd Dibbiny <majd@mellanox.com>
    Reviewed-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 78da094deb3ba652c17f4e83b16ac9317f45c6ed
Author: Christoph Paasch <cpaasch@apple.com>
Date:   Tue Sep 26 17:38:50 2017 -0700

    net: Set sk_prot_creator when cloning sockets to the right proto
    
    commit 9d538fa60bad4f7b23193c89e843797a1cf71ef3 upstream.
    
    sk->sk_prot and sk->sk_prot_creator can differ when the app uses
    IPV6_ADDRFORM (transforming an IPv6-socket to an IPv4-one).
    Which is why sk_prot_creator is there to make sure that sk_prot_free()
    does the kmem_cache_free() on the right kmem_cache slab.
    
    Now, if such a socket gets transformed back to a listening socket (using
    connect() with AF_UNSPEC) we will allocate an IPv4 tcp_sock through
    sk_clone_lock() when a new connection comes in. But sk_prot_creator will
    still point to the IPv6 kmem_cache (as everything got copied in
    sk_clone_lock()). When freeing, we will thus put this
    memory back into the IPv6 kmem_cache although it was allocated in the
    IPv4 cache. I have seen memory corruption happening because of this.
    
    With slub-debugging and MEMCG_KMEM enabled this gives the warning
            "cache_from_obj: Wrong slab cache. TCPv6 but object is from TCP"
    
    A C-program to trigger this:
    
    void main(void)
    {
            int fd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
            int new_fd, newest_fd, client_fd;
            struct sockaddr_in6 bind_addr;
            struct sockaddr_in bind_addr4, client_addr1, client_addr2;
            struct sockaddr unsp;
            int val;
    
            memset(&bind_addr, 0, sizeof(bind_addr));
            bind_addr.sin6_family = AF_INET6;
            bind_addr.sin6_port = ntohs(42424);
    
            memset(&client_addr1, 0, sizeof(client_addr1));
            client_addr1.sin_family = AF_INET;
            client_addr1.sin_port = ntohs(42424);
            client_addr1.sin_addr.s_addr = inet_addr("127.0.0.1");
    
            memset(&client_addr2, 0, sizeof(client_addr2));
            client_addr2.sin_family = AF_INET;
            client_addr2.sin_port = ntohs(42421);
            client_addr2.sin_addr.s_addr = inet_addr("127.0.0.1");
    
            memset(&unsp, 0, sizeof(unsp));
            unsp.sa_family = AF_UNSPEC;
    
            bind(fd, (struct sockaddr *)&bind_addr, sizeof(bind_addr));
    
            listen(fd, 5);
    
            client_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            connect(client_fd, (struct sockaddr *)&client_addr1, sizeof(client_addr1));
            new_fd = accept(fd, NULL, NULL);
            close(fd);
    
            val = AF_INET;
            setsockopt(new_fd, SOL_IPV6, IPV6_ADDRFORM, &val, sizeof(val));
    
            connect(new_fd, &unsp, sizeof(unsp));
    
            memset(&bind_addr4, 0, sizeof(bind_addr4));
            bind_addr4.sin_family = AF_INET;
            bind_addr4.sin_port = ntohs(42421);
            bind(new_fd, (struct sockaddr *)&bind_addr4, sizeof(bind_addr4));
    
            listen(new_fd, 5);
    
            client_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            connect(client_fd, (struct sockaddr *)&client_addr2, sizeof(client_addr2));
    
            newest_fd = accept(new_fd, NULL, NULL);
            close(new_fd);
    
            close(client_fd);
            close(new_fd);
    }
    
    As far as I can see, this bug has been there since the beginning of the
    git-days.
    
    Signed-off-by: Christoph Paasch <cpaasch@apple.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 055ad9609c623acfc679a3e9049774f414e3a189
Author: Alexander Potapenko <glider@google.com>
Date:   Tue Apr 25 18:51:46 2017 +0200

    net/packet: check length in getsockopt() called with PACKET_HDRLEN
    
    commit fd2c83b35752f0a8236b976978ad4658df14a59f upstream.
    
    In the case getsockopt() is called with PACKET_HDRLEN and optlen < 4
    |val| remains uninitialized and the syscall may behave differently
    depending on its value, and even copy garbage to userspace on certain
    architectures. To fix this we now return -EINVAL if optlen is too small.
    
    This bug has been detected with KMSAN.
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 83fef5222fb220e232d106704d9e0abe838d8b0b
Author: Wei Wang <weiwan@google.com>
Date:   Thu May 18 11:22:33 2017 -0700

    tcp: initialize rcv_mss to TCP_MIN_MSS instead of 0
    
    commit 499350a5a6e7512d9ed369ed63a4244b6536f4f8 upstream.
    
    When tcp_disconnect() is called, inet_csk_delack_init() sets
    icsk->icsk_ack.rcv_mss to 0.
    This could potentially cause tcp_recvmsg() => tcp_cleanup_rbuf() =>
    __tcp_select_window() call path to have division by 0 issue.
    So this patch initializes rcv_mss to TCP_MIN_MSS instead of 0.
    
    Reported-by: Andrey Konovalov  <andreyknvl@google.com>
    Signed-off-by: Wei Wang <weiwan@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 81d2ec2013886082bb8bb4163c9424b138b0d267
Author: Neal Cardwell <ncardwell@google.com>
Date:   Wed Aug 16 17:53:36 2017 -0400

    tcp: when rearming RTO, if RTO time is in past then fire RTO ASAP
    
    commit cdbeb633ca71a02b7b63bfeb94994bf4e1a0b894 upstream.
    
    In some situations tcp_send_loss_probe() can realize that it's unable
    to send a loss probe (TLP), and falls back to calling tcp_rearm_rto()
    to schedule an RTO timer. In such cases, sometimes tcp_rearm_rto()
    realizes that the RTO was eligible to fire immediately or at some
    point in the past (delta_us <= 0). Previously in such cases
    tcp_rearm_rto() was scheduling such "overdue" RTOs to happen at now +
    icsk_rto, which caused needless delays of hundreds of milliseconds
    (and non-linear behavior that made reproducible testing
    difficult). This commit changes the logic to schedule "overdue" RTOs
    ASAP, rather than at now + icsk_rto.
    
    Fixes: 6ba8a3b19e76 ("tcp: Tail loss probe (TLP)")
    Suggested-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [wt: no need for usec_to_jiffies conversion in 3.10]
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 37cb36243061666f8bd44fdc51229ca6896effa3
Author: Yuchung Cheng <ycheng@google.com>
Date:   Tue Aug 1 13:22:32 2017 -0700

    tcp: avoid setting cwnd to invalid ssthresh after cwnd reduction states
    
    commit ed254971edea92c3ac5c67c6a05247a92aa6075e upstream.
    
    If the sender switches the congestion control during ECN-triggered
    cwnd-reduction state (CA_CWR), upon exiting recovery cwnd is set to
    the ssthresh value calculated by the previous congestion control. If
    the previous congestion control is BBR that always keep ssthresh
    to TCP_INIFINITE_SSTHRESH, cwnd ends up being infinite. The safe
    step is to avoid assigning invalid ssthresh value when recovery ends.
    
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 6f85a8873040becd7d779ad5f510f1b73d04f59b
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Sat Jun 24 23:50:30 2017 -0700

    tcp: reset sk_rx_dst in tcp_disconnect()
    
    commit d747a7a51b00984127a88113cdbbc26f91e9d815 upstream.
    
    We have to reset the sk->sk_rx_dst when we disconnect a TCP
    connection, because otherwise when we re-connect it this
    dst reference is simply overridden in tcp_finish_connect().
    
    This fixes a dst leak which leads to a loopback dev refcnt
    leak. It is a long-standing bug, Kevin reported a very similar
    (if not same) bug before. Thanks to Andrei for providing such
    a reliable reproducer which greatly narrows down the problem.
    
    Fixes: 41063e9dd119 ("ipv4: Early TCP socket demux.")
    Reported-by: Andrei Vagin <avagin@gmail.com>
    Reported-by: Kevin Xu <kaiwen.xu@hulu.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [wt: adjusted context]
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 72d7b83afbc4659de5948c4cc33f5d7b47f09aa4
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 3 10:55:11 2017 -0700

    netfilter: xt_TCPMSS: add more sanity tests on tcph->doff
    
    commit 2638fd0f92d4397884fd991d8f4925cb3f081901 upstream.
    
    Denys provided an awesome KASAN report pointing to an use
    after free in xt_TCPMSS
    
    I have provided three patches to fix this issue, either in xt_TCPMSS or
    in xt_tcpudp.c. It seems xt_TCPMSS patch has the smallest possible
    impact.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Denys Fedoryshchenko <nuclearcat@nuclearcat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    [wt: adjust context]
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 946272f8a5f73b249808d1fb8f30a25724864466
Author: Yuchung Cheng <ycheng@google.com>
Date:   Wed May 31 11:21:27 2017 -0700

    tcp: disallow cwnd undo when switching congestion control
    
    commit 44abafc4cc094214a99f860f778c48ecb23422fc upstream.
    
    When the sender switches its congestion control during loss
    recovery, if the recovery is spurious then it may incorrectly
    revert cwnd and ssthresh to the older values set by a previous
    congestion control. Consider a congestion control (like BBR)
    that does not use ssthresh and keeps it infinite: the connection
    may incorrectly revert cwnd to an infinite value when switching
    from BBR to another congestion control.
    
    This patch fixes it by disallowing such cwnd undo operation
    upon switching congestion control.  Note that undo_marker
    is not reset s.t. the packets that were incorrectly marked
    lost would be corrected. We only avoid undoing the cwnd in
    tcp_undo_cwnd_reduction().
    
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 08bd34b7527fe6b056928ad9cb02b4ab4c0d1011
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Sep 14 02:00:54 2017 +0300

    sctp: potential read out of bounds in sctp_ulpevent_type_enabled()
    
    commit fa5f7b51fc3080c2b195fa87c7eca7c05e56f673 upstream.
    
    This code causes a static checker warning because Smatch doesn't trust
    anything that comes from skb->data.  I've reviewed this code and I do
    think skb->data can be controlled by the user here.
    
    The sctp_event_subscribe struct has 13 __u8 fields and we want to see
    if ours is non-zero.  sn_type can be any value in the 0-USHRT_MAX range.
    We're subtracting SCTP_SN_TYPE_BASE which is 1 << 15 so we could read
    either before the start of the struct or after the end.
    
    This is a very old bug and it's surprising that it would go undetected
    for so long but my theory is that it just doesn't have a big impact so
    it would be hard to notice.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit faa132ab55776ed0d38105f50525f0388cb47d0b
Author: Alexander Potapenko <glider@google.com>
Date:   Wed Aug 16 20:16:40 2017 +0200

    sctp: fully initialize the IPv6 address in sctp_v6_to_addr()
    
    commit 15339e441ec46fbc3bf3486bb1ae4845b0f1bb8d upstream.
    
    KMSAN reported use of uninitialized sctp_addr->v4.sin_addr.s_addr and
    sctp_addr->v6.sin6_scope_id in sctp_v6_cmp_addr() (see below).
    Make sure all fields of an IPv6 address are initialized, which
    guarantees that the IPv4 fields are also initialized.
    
    ==================================================================
     BUG: KMSAN: use of uninitialized memory in sctp_v6_cmp_addr+0x8d4/0x9f0
     net/sctp/ipv6.c:517
     CPU: 2 PID: 31056 Comm: syz-executor1 Not tainted 4.11.0-rc5+ #2944
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs
     01/01/2011
     Call Trace:
      dump_stack+0x172/0x1c0 lib/dump_stack.c:42
      is_logbuf_locked mm/kmsan/kmsan.c:59 [inline]
      kmsan_report+0x12a/0x180 mm/kmsan/kmsan.c:938
      native_save_fl arch/x86/include/asm/irqflags.h:18 [inline]
      arch_local_save_flags arch/x86/include/asm/irqflags.h:72 [inline]
      arch_local_irq_save arch/x86/include/asm/irqflags.h:113 [inline]
      __msan_warning_32+0x61/0xb0 mm/kmsan/kmsan_instr.c:467
      sctp_v6_cmp_addr+0x8d4/0x9f0 net/sctp/ipv6.c:517
      sctp_v6_get_dst+0x8c7/0x1630 net/sctp/ipv6.c:290
      sctp_transport_route+0x101/0x570 net/sctp/transport.c:292
      sctp_assoc_add_peer+0x66d/0x16f0 net/sctp/associola.c:651
      sctp_sendmsg+0x35a5/0x4f90 net/sctp/socket.c:1871
      inet_sendmsg+0x498/0x670 net/ipv4/af_inet.c:762
      sock_sendmsg_nosec net/socket.c:633 [inline]
      sock_sendmsg net/socket.c:643 [inline]
      SYSC_sendto+0x608/0x710 net/socket.c:1696
      SyS_sendto+0x8a/0xb0 net/socket.c:1664
      entry_SYSCALL_64_fastpath+0x13/0x94
     RIP: 0033:0x44b479
     RSP: 002b:00007f6213f21c08 EFLAGS: 00000286 ORIG_RAX: 000000000000002c
     RAX: ffffffffffffffda RBX: 0000000020000000 RCX: 000000000044b479
     RDX: 0000000000000041 RSI: 0000000020edd000 RDI: 0000000000000006
     RBP: 00000000007080a8 R08: 0000000020b85fe4 R09: 000000000000001c
     R10: 0000000000040005 R11: 0000000000000286 R12: 00000000ffffffff
     R13: 0000000000003760 R14: 00000000006e5820 R15: 0000000000ff8000
     origin description: ----dst_saddr@sctp_v6_get_dst
     local variable created at:
      sk_fullsock include/net/sock.h:2321 [inline]
      inet6_sk include/linux/ipv6.h:309 [inline]
      sctp_v6_get_dst+0x91/0x1630 net/sctp/ipv6.c:241
      sctp_transport_route+0x101/0x570 net/sctp/transport.c:292
    ==================================================================
     BUG: KMSAN: use of uninitialized memory in sctp_v6_cmp_addr+0x8d4/0x9f0
     net/sctp/ipv6.c:517
     CPU: 2 PID: 31056 Comm: syz-executor1 Not tainted 4.11.0-rc5+ #2944
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs
     01/01/2011
     Call Trace:
      dump_stack+0x172/0x1c0 lib/dump_stack.c:42
      is_logbuf_locked mm/kmsan/kmsan.c:59 [inline]
      kmsan_report+0x12a/0x180 mm/kmsan/kmsan.c:938
      native_save_fl arch/x86/include/asm/irqflags.h:18 [inline]
      arch_local_save_flags arch/x86/include/asm/irqflags.h:72 [inline]
      arch_local_irq_save arch/x86/include/asm/irqflags.h:113 [inline]
      __msan_warning_32+0x61/0xb0 mm/kmsan/kmsan_instr.c:467
      sctp_v6_cmp_addr+0x8d4/0x9f0 net/sctp/ipv6.c:517
      sctp_v6_get_dst+0x8c7/0x1630 net/sctp/ipv6.c:290
      sctp_transport_route+0x101/0x570 net/sctp/transport.c:292
      sctp_assoc_add_peer+0x66d/0x16f0 net/sctp/associola.c:651
      sctp_sendmsg+0x35a5/0x4f90 net/sctp/socket.c:1871
      inet_sendmsg+0x498/0x670 net/ipv4/af_inet.c:762
      sock_sendmsg_nosec net/socket.c:633 [inline]
      sock_sendmsg net/socket.c:643 [inline]
      SYSC_sendto+0x608/0x710 net/socket.c:1696
      SyS_sendto+0x8a/0xb0 net/socket.c:1664
      entry_SYSCALL_64_fastpath+0x13/0x94
     RIP: 0033:0x44b479
     RSP: 002b:00007f6213f21c08 EFLAGS: 00000286 ORIG_RAX: 000000000000002c
     RAX: ffffffffffffffda RBX: 0000000020000000 RCX: 000000000044b479
     RDX: 0000000000000041 RSI: 0000000020edd000 RDI: 0000000000000006
     RBP: 00000000007080a8 R08: 0000000020b85fe4 R09: 000000000000001c
     R10: 0000000000040005 R11: 0000000000000286 R12: 00000000ffffffff
     R13: 0000000000003760 R14: 00000000006e5820 R15: 0000000000ff8000
     origin description: ----dst_saddr@sctp_v6_get_dst
     local variable created at:
      sk_fullsock include/net/sock.h:2321 [inline]
      inet6_sk include/linux/ipv6.h:309 [inline]
      sctp_v6_get_dst+0x91/0x1630 net/sctp/ipv6.c:241
      sctp_transport_route+0x101/0x570 net/sctp/transport.c:292
    ==================================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 2630e5a878f730bfd14af7ecf78189a6387d303d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Jul 26 16:24:59 2017 +0800

    sctp: fix the check for _sctp_walk_params and _sctp_walk_errors
    
    commit 6b84202c946cd3da3a8daa92c682510e9ed80321 upstream.
    
    Commit b1f5bfc27a19 ("sctp: don't dereference ptr before leaving
    _sctp_walk_{params, errors}()") tried to fix the issue that it
    may overstep the chunk end for _sctp_walk_{params, errors} with
    'chunk_end > offset(length) + sizeof(length)'.
    
    But it introduced a side effect: When processing INIT, it verifies
    the chunks with 'param.v == chunk_end' after iterating all params
    by sctp_walk_params(). With the check 'chunk_end > offset(length)
    + sizeof(length)', it would return when the last param is not yet
    accessed. Because the last param usually is fwdtsn supported param
    whose size is 4 and 'chunk_end == offset(length) + sizeof(length)'
    
    This is a badly issue even causing sctp couldn't process 4-shakes.
    Client would always get abort when connecting to server, due to
    the failure of INIT chunk verification on server.
    
    The patch is to use 'chunk_end <= offset(length) + sizeof(length)'
    instead of 'chunk_end < offset(length) + sizeof(length)' for both
    _sctp_walk_params and _sctp_walk_errors.
    
    Fixes: b1f5bfc27a19 ("sctp: don't dereference ptr before leaving _sctp_walk_{params, errors}()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 3cb637d2295a3f05c7fac17ccb9429f5b180772b
Author: Alexander Potapenko <glider@google.com>
Date:   Fri Jul 14 18:32:45 2017 +0200

    sctp: don't dereference ptr before leaving _sctp_walk_{params, errors}()
    
    commit b1f5bfc27a19f214006b9b4db7b9126df2dfdf5a upstream.
    
    If the length field of the iterator (|pos.p| or |err|) is past the end
    of the chunk, we shouldn't access it.
    
    This bug has been detected by KMSAN. For the following pair of system
    calls:
    
      socket(PF_INET6, SOCK_STREAM, 0x84 /* IPPROTO_??? */) = 3
      sendto(3, "A", 1, MSG_OOB, {sa_family=AF_INET6, sin6_port=htons(0),
             inet_pton(AF_INET6, "::1", &sin6_addr), sin6_flowinfo=0,
             sin6_scope_id=0}, 28) = 1
    
    the tool has reported a use of uninitialized memory:
    
      ==================================================================
      BUG: KMSAN: use of uninitialized memory in sctp_rcv+0x17b8/0x43b0
      CPU: 1 PID: 2940 Comm: probe Not tainted 4.11.0-rc5+ #2926
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs
      01/01/2011
      Call Trace:
       <IRQ>
       __dump_stack lib/dump_stack.c:16
       dump_stack+0x172/0x1c0 lib/dump_stack.c:52
       kmsan_report+0x12a/0x180 mm/kmsan/kmsan.c:927
       __msan_warning_32+0x61/0xb0 mm/kmsan/kmsan_instr.c:469
       __sctp_rcv_init_lookup net/sctp/input.c:1074
       __sctp_rcv_lookup_harder net/sctp/input.c:1233
       __sctp_rcv_lookup net/sctp/input.c:1255
       sctp_rcv+0x17b8/0x43b0 net/sctp/input.c:170
       sctp6_rcv+0x32/0x70 net/sctp/ipv6.c:984
       ip6_input_finish+0x82f/0x1ee0 net/ipv6/ip6_input.c:279
       NF_HOOK ./include/linux/netfilter.h:257
       ip6_input+0x239/0x290 net/ipv6/ip6_input.c:322
       dst_input ./include/net/dst.h:492
       ip6_rcv_finish net/ipv6/ip6_input.c:69
       NF_HOOK ./include/linux/netfilter.h:257
       ipv6_rcv+0x1dbd/0x22e0 net/ipv6/ip6_input.c:203
       __netif_receive_skb_core+0x2f6f/0x3a20 net/core/dev.c:4208
       __netif_receive_skb net/core/dev.c:4246
       process_backlog+0x667/0xba0 net/core/dev.c:4866
       napi_poll net/core/dev.c:5268
       net_rx_action+0xc95/0x1590 net/core/dev.c:5333
       __do_softirq+0x485/0x942 kernel/softirq.c:284
       do_softirq_own_stack+0x1c/0x30 arch/x86/entry/entry_64.S:902
       </IRQ>
       do_softirq kernel/softirq.c:328
       __local_bh_enable_ip+0x25b/0x290 kernel/softirq.c:181
       local_bh_enable+0x37/0x40 ./include/linux/bottom_half.h:31
       rcu_read_unlock_bh ./include/linux/rcupdate.h:931
       ip6_finish_output2+0x19b2/0x1cf0 net/ipv6/ip6_output.c:124
       ip6_finish_output+0x764/0x970 net/ipv6/ip6_output.c:149
       NF_HOOK_COND ./include/linux/netfilter.h:246
       ip6_output+0x456/0x520 net/ipv6/ip6_output.c:163
       dst_output ./include/net/dst.h:486
       NF_HOOK ./include/linux/netfilter.h:257
       ip6_xmit+0x1841/0x1c00 net/ipv6/ip6_output.c:261
       sctp_v6_xmit+0x3b7/0x470 net/sctp/ipv6.c:225
       sctp_packet_transmit+0x38cb/0x3a20 net/sctp/output.c:632
       sctp_outq_flush+0xeb3/0x46e0 net/sctp/outqueue.c:885
       sctp_outq_uncork+0xb2/0xd0 net/sctp/outqueue.c:750
       sctp_side_effects net/sctp/sm_sideeffect.c:1773
       sctp_do_sm+0x6962/0x6ec0 net/sctp/sm_sideeffect.c:1147
       sctp_primitive_ASSOCIATE+0x12c/0x160 net/sctp/primitive.c:88
       sctp_sendmsg+0x43e5/0x4f90 net/sctp/socket.c:1954
       inet_sendmsg+0x498/0x670 net/ipv4/af_inet.c:762
       sock_sendmsg_nosec net/socket.c:633
       sock_sendmsg net/socket.c:643
       SYSC_sendto+0x608/0x710 net/socket.c:1696
       SyS_sendto+0x8a/0xb0 net/socket.c:1664
       do_syscall_64+0xe6/0x130 arch/x86/entry/common.c:285
       entry_SYSCALL64_slow_path+0x25/0x25 arch/x86/entry/entry_64.S:246
      RIP: 0033:0x401133
      RSP: 002b:00007fff6d99cd38 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
      RAX: ffffffffffffffda RBX: 00000000004002b0 RCX: 0000000000401133
      RDX: 0000000000000001 RSI: 0000000000494088 RDI: 0000000000000003
      RBP: 00007fff6d99cd90 R08: 00007fff6d99cd50 R09: 000000000000001c
      R10: 0000000000000001 R11: 0000000000000246 R12: 0000000000000000
      R13: 00000000004063d0 R14: 0000000000406460 R15: 0000000000000000
      origin:
       save_stack_trace+0x37/0x40 arch/x86/kernel/stacktrace.c:59
       kmsan_save_stack_with_flags mm/kmsan/kmsan.c:302
       kmsan_internal_poison_shadow+0xb1/0x1a0 mm/kmsan/kmsan.c:198
       kmsan_poison_shadow+0x6d/0xc0 mm/kmsan/kmsan.c:211
       slab_alloc_node mm/slub.c:2743
       __kmalloc_node_track_caller+0x200/0x360 mm/slub.c:4351
       __kmalloc_reserve net/core/skbuff.c:138
       __alloc_skb+0x26b/0x840 net/core/skbuff.c:231
       alloc_skb ./include/linux/skbuff.h:933
       sctp_packet_transmit+0x31e/0x3a20 net/sctp/output.c:570
       sctp_outq_flush+0xeb3/0x46e0 net/sctp/outqueue.c:885
       sctp_outq_uncork+0xb2/0xd0 net/sctp/outqueue.c:750
       sctp_side_effects net/sctp/sm_sideeffect.c:1773
       sctp_do_sm+0x6962/0x6ec0 net/sctp/sm_sideeffect.c:1147
       sctp_primitive_ASSOCIATE+0x12c/0x160 net/sctp/primitive.c:88
       sctp_sendmsg+0x43e5/0x4f90 net/sctp/socket.c:1954
       inet_sendmsg+0x498/0x670 net/ipv4/af_inet.c:762
       sock_sendmsg_nosec net/socket.c:633
       sock_sendmsg net/socket.c:643
       SYSC_sendto+0x608/0x710 net/socket.c:1696
       SyS_sendto+0x8a/0xb0 net/socket.c:1664
       do_syscall_64+0xe6/0x130 arch/x86/entry/common.c:285
       return_from_SYSCALL_64+0x0/0x6a arch/x86/entry/entry_64.S:246
      ==================================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 9f75306bea1ce5be9b5278fe3cd9affba5ce0fd8
Author: Jan Kara <jack@suse.cz>
Date:   Thu Aug 11 12:38:55 2016 -0400

    ext4: avoid deadlock when expanding inode size
    
    commit 2e81a4eeedcaa66e35f58b81e0755b87057ce392 upstream.
    
    When we need to move xattrs into external xattr block, we call
    ext4_xattr_block_set() from ext4_expand_extra_isize_ea(). That may end
    up calling ext4_mark_inode_dirty() again which will recurse back into
    the inode expansion code leading to deadlocks.
    
    Protect from recursion using EXT4_STATE_NO_EXPAND inode flag and move
    its management into ext4_expand_extra_isize_ea() since its manipulation
    is safe there (due to xattr_sem) from possible races with
    ext4_xattr_set_handle() which plays with it as well.
    
    CC: stable@vger.kernel.org   # 4.4.x
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ebb33aff58b3899842e5b7d89be8bf1222a943e6
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Thu Aug 24 13:22:06 2017 -0400

    ext4: in ext4_seek_{hole,data}, return -ENXIO for negative offsets
    
    commit 1bd8d6cd3e413d64e543ec3e69ff43e75a1cf1ea upstream.
    
    In the ext4 implementations of SEEK_HOLE and SEEK_DATA, make sure we
    return -ENXIO for negative offsets instead of banging around inside
    the extent code and returning -EFSCORRUPTED.
    
    Reported-by: Mateusz S <muttdini@gmail.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@vger.kernel.org # 4.6
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 159c95bdb52696fd12c9238d9c301e9ed98b398f
Author: Liping Zhang <zlpnobody@gmail.com>
Date:   Sat Mar 25 16:35:29 2017 +0800

    netfilter: nf_ct_ext: fix possible panic after nf_ct_extend_unregister
    
    commit 9c3f3794926a997b1cab6c42480ff300efa2d162 upstream.
    
    If one cpu is doing nf_ct_extend_unregister while another cpu is doing
    __nf_ct_ext_add_length, then we may hit BUG_ON(t == NULL). Moreover,
    there's no synchronize_rcu invocation after set nf_ct_ext_types[id] to
    NULL, so it's possible that we may access invalid pointer.
    
    But actually, most of the ct extends are built-in, so the problem listed
    above will not happen. However, there are two exceptions: NF_CT_EXT_NAT
    and NF_CT_EXT_SYNPROXY.
    
    For _EXT_NAT, the panic will not happen, since adding the nat extend and
    unregistering the nat extend are located in the same file(nf_nat_core.c),
    this means that after the nat module is removed, we cannot add the nat
    extend too.
    
    For _EXT_SYNPROXY, synproxy extend may be added by init_conntrack, while
    synproxy extend unregister will be done by synproxy_core_exit. So after
    nf_synproxy_core.ko is removed, we may still try to add the synproxy
    extend, then kernel panic may happen.
    
    I know it's very hard to reproduce this issue, but I can play a tricky
    game to make it happen very easily :)
    
    Step 1. Enable SYNPROXY for tcp dport 1234 at FORWARD hook:
      # iptables -I FORWARD -p tcp --dport 1234 -j SYNPROXY
    Step 2. Queue the syn packet to the userspace at raw table OUTPUT hook.
            Also note, in the userspace we only add a 20s' delay, then
            reinject the syn packet to the kernel:
      # iptables -t raw -I OUTPUT -p tcp --syn -j NFQUEUE --queue-num 1
    Step 3. Using "nc 2.2.2.2 1234" to connect the server.
    Step 4. Now remove the nf_synproxy_core.ko quickly:
      # iptables -F FORWARD
      # rmmod ipt_SYNPROXY
      # rmmod nf_synproxy_core
    Step 5. After 20s' delay, the syn packet is reinjected to the kernel.
    
    Now you will see the panic like this:
      kernel BUG at net/netfilter/nf_conntrack_extend.c:91!
      Call Trace:
       ? __nf_ct_ext_add_length+0x53/0x3c0 [nf_conntrack]
       init_conntrack+0x12b/0x600 [nf_conntrack]
       nf_conntrack_in+0x4cc/0x580 [nf_conntrack]
       ipv4_conntrack_local+0x48/0x50 [nf_conntrack_ipv4]
       nf_reinject+0x104/0x270
       nfqnl_recv_verdict+0x3e1/0x5f9 [nfnetlink_queue]
       ? nfqnl_recv_verdict+0x5/0x5f9 [nfnetlink_queue]
       ? nla_parse+0xa0/0x100
       nfnetlink_rcv_msg+0x175/0x6a9 [nfnetlink]
       [...]
    
    One possible solution is to make NF_CT_EXT_SYNPROXY extend built-in, i.e.
    introduce nf_conntrack_synproxy.c and only do ct extend register and
    unregister in it, similar to nf_conntrack_timeout.c.
    
    But having such a obscure restriction of nf_ct_extend_unregister is not a
    good idea, so we should invoke synchronize_rcu after set nf_ct_ext_types
    to NULL, and check the NULL pointer when do __nf_ct_ext_add_length. Then
    it will be easier if we add new ct extend in the future.
    
    Last, we use kfree_rcu to free nf_ct_ext, so rcu_barrier() is unnecessary
    anymore, remove it too.
    
    Signed-off-by: Liping Zhang <zlpnobody@gmail.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 19cc6d98a6ad6899ccc70cffb39365e7e7cdca93
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 11 15:35:25 2017 +0100

    wext: handle NULL extra data in iwe_stream_add_point better
    
    commit 93be2b74279c15c2844684b1a027fdc71dd5d9bf upstream.
    
    gcc-7 complains that wl3501_cs passes NULL into a function that
    then uses the argument as the input for memcpy:
    
    drivers/net/wireless/wl3501_cs.c: In function 'wl3501_get_scan':
    include/net/iw_handler.h:559:3: error: argument 2 null where non-null expected [-Werror=nonnull]
       memcpy(stream + point_len, extra, iwe->u.data.length);
    
    This works fine here because iwe->u.data.length is guaranteed to be 0
    and the memcpy doesn't actually have an effect.
    
    Making the length check explicit avoids the warning and should have
    no other effect here.
    
    Also check the pointer itself, since otherwise we get warnings
    elsewhere in the code.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7af6952b1858bf13abb625a99f34bcdd3104b446
Author: Marcin Nowakowski <marcin.nowakowski@mips.com>
Date:   Thu Jul 6 15:35:31 2017 -0700

    kernel/extable.c: mark core_kernel_text notrace
    
    commit c0d80ddab89916273cb97114889d3f337bc370ae upstream.
    
    core_kernel_text is used by MIPS in its function graph trace processing,
    so having this method traced leads to an infinite set of recursive calls
    such as:
    
      Call Trace:
         ftrace_return_to_handler+0x50/0x128
         core_kernel_text+0x10/0x1b8
         prepare_ftrace_return+0x6c/0x114
         ftrace_graph_caller+0x20/0x44
         return_to_handler+0x10/0x30
         return_to_handler+0x0/0x30
         return_to_handler+0x0/0x30
         ftrace_ops_no_ops+0x114/0x1bc
         core_kernel_text+0x10/0x1b8
         core_kernel_text+0x10/0x1b8
         core_kernel_text+0x10/0x1b8
         ftrace_ops_no_ops+0x114/0x1bc
         core_kernel_text+0x10/0x1b8
         prepare_ftrace_return+0x6c/0x114
         ftrace_graph_caller+0x20/0x44
         (...)
    
    Mark the function notrace to avoid it being traced.
    
    Link: http://lkml.kernel.org/r/1498028607-6765-1-git-send-email-marcin.nowakowski@imgtec.com
    Signed-off-by: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Meyer <thomas@m3y3r.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 4ef41964ac05a4e3c34173f40aa6e2ecbb978a16
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 27 07:02:20 2017 -0700

    net: prevent sign extension in dev_get_stats()
    
    commit 6f64ec74515925cced6df4571638b5a099a49aae upstream.
    
    Similar to the fix provided by Dominik Heidler in commit
    9b3dc0a17d73 ("l2tp: cast l2tp traffic counter to unsigned")
    we need to take care of 32bit kernels in dev_get_stats().
    
    When using atomic_long_read(), we add a 'long' to u64 and
    might misinterpret high order bit, unless we cast to unsigned.
    
    Fixes: caf586e5f23ce ("net: add a core netdev->rx_dropped counter")
    Fixes: 015f0688f57ca ("net: net: add a core netdev->tx_dropped counter")
    Fixes: 6e7333d315a76 ("net: add rx_nohandler stat counter")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jarod Wilson <jarod@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 2f34aab1a8758d956926d623823bab8af326668e
Author: Jan Kara <jack@suse.cz>
Date:   Sun May 21 22:33:23 2017 -0400

    ext4: fix SEEK_HOLE
    
    commit 7d95eddf313c88b24f99d4ca9c2411a4b82fef33 upstream.
    
    Currently, SEEK_HOLE implementation in ext4 may both return that there's
    a hole at some offset although that offset already has data and skip
    some holes during a search for the next hole. The first problem is
    demostrated by:
    
    xfs_io -c "falloc 0 256k" -c "pwrite 0 56k" -c "seek -h 0" file
    wrote 57344/57344 bytes at offset 0
    56 KiB, 14 ops; 0.0000 sec (2.054 GiB/sec and 538461.5385 ops/sec)
    Whence  Result
    HOLE    0
    
    Where we can see that SEEK_HOLE wrongly returned offset 0 as containing
    a hole although we have written data there. The second problem can be
    demonstrated by:
    
    xfs_io -c "falloc 0 256k" -c "pwrite 0 56k" -c "pwrite 128k 8k"
           -c "seek -h 0" file
    
    wrote 57344/57344 bytes at offset 0
    56 KiB, 14 ops; 0.0000 sec (1.978 GiB/sec and 518518.5185 ops/sec)
    wrote 8192/8192 bytes at offset 131072
    8 KiB, 2 ops; 0.0000 sec (2 GiB/sec and 500000.0000 ops/sec)
    Whence  Result
    HOLE    139264
    
    Where we can see that hole at offsets 56k..128k has been ignored by the
    SEEK_HOLE call.
    
    The underlying problem is in the ext4_find_unwritten_pgoff() which is
    just buggy. In some cases it fails to update returned offset when it
    finds a hole (when no pages are found or when the first found page has
    higher index than expected), in some cases conditions for detecting hole
    are just missing (we fail to detect a situation where indices of
    returned pages are not contiguous).
    
    Fix ext4_find_unwritten_pgoff() to properly detect non-contiguous page
    indices and also handle all cases where we got less pages then expected
    in one place and handle it properly there.
    
    Fixes: c8c0df241cc2719b1262e627f999638411934f60
    CC: Zheng Liu <wenqing.lz@taobao.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 303177699c7faa2e27db63c796b8bbba4baeb6ac
Author: Ilya Matveychikov <matvejchikov@gmail.com>
Date:   Fri Jun 23 15:08:49 2017 -0700

    lib/cmdline.c: fix get_options() overflow while parsing ranges
    
    commit a91e0f680bcd9e10c253ae8b62462a38bd48f09f upstream.
    
    When using get_options() it's possible to specify a range of numbers,
    like 1-100500.  The problem is that it doesn't track array size while
    calling internally to get_range() which iterates over the range and
    fills the memory with numbers.
    
    Link: http://lkml.kernel.org/r/2613C75C-B04D-4BFF-82A6-12F97BA0F620@gmail.com
    Signed-off-by: Ilya V. Matveychikov <matvejchikov@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7719043b415b16e1d8ced517bc581375693d070b
Author: Jason Yan <yanaijie@huawei.com>
Date:   Fri Mar 10 11:27:23 2017 +0800

    md: fix super_offset endianness in super_1_rdev_size_change
    
    commit 3fb632e40d7667d8bedfabc28850ac06d5493f54 upstream.
    
    The sb->super_offset should be big-endian, but the rdev->sb_start is in
    host byte order, so fix this by adding cpu_to_le64.
    
    Signed-off-by: Jason Yan <yanaijie@huawei.com>
    Signed-off-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 634fd953630e9ea59072e0d44c614d8b6446d93c
Author: Shaohua Li <shli@fb.com>
Date:   Thu Feb 23 12:26:41 2017 -0800

    md/raid10: submit bio directly to replacement disk
    
    commit 6d399783e9d4e9bd44931501948059d24ad96ff8 upstream.
    
    Commit 57c67df(md/raid10: submit IO from originating thread instead of
    md thread) submits bio directly for normal disks but not for replacement
    disks. There is no point we shouldn't do this for replacement disks.
    
    Cc: NeilBrown <neilb@suse.com>
    Signed-off-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 09ab11ebb7c1f9a66507e382aea696338304f83a
Author: Liping Zhang <zlpnobody@gmail.com>
Date:   Sat Mar 25 08:53:12 2017 +0800

    netfilter: invoke synchronize_rcu after set the _hook_ to NULL
    
    commit 3b7dabf029478bb80507a6c4500ca94132a2bc0b upstream.
    
    Otherwise, another CPU may access the invalid pointer. For example:
        CPU0                CPU1
         -              rcu_read_lock();
         -              pfunc = _hook_;
      _hook_ = NULL;          -
      mod unload              -
         -                 pfunc(); // invalid, panic
         -             rcu_read_unlock();
    
    So we must call synchronize_rcu() to wait the rcu reader to finish.
    
    Also note, in nf_nat_snmp_basic_fini, synchronize_rcu() will be invoked
    by later nf_conntrack_helper_unregister, but I'm inclined to add a
    explicit synchronize_rcu after set the nf_nat_snmp_hook to NULL. Depend
    on such obscure assumptions is not a good idea.
    
    Last, in nfnetlink_cttimeout, we use kfree_rcu to free the time object,
    so in cttimeout_exit, invoking rcu_barrier() is not necessary at all,
    remove it too.
    
    Signed-off-by: Liping Zhang <zlpnobody@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit a77cf1b983190f7cefffb5ff5cf358d7944d04b0
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 9 12:43:20 2017 -0700

    lib/digsig: fix dereference of NULL user_key_payload
    
    commit 192cabd6a296cbc57b3d8c05c4c89d87fc102506 upstream.
    
    digsig_verify() requests a user key, then accesses its payload.
    However, a revoked key has a NULL payload, and we failed to check for
    this.  request_key() *does* skip revoked keys, but there is still a
    window where the key can be revoked before we acquire its semaphore.
    
    Fix it by checking for a NULL payload, treating it like a key which was
    already revoked at the time it was requested.
    
    Fixes: 051dbb918c7f ("crypto: digital signature verification support")
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Cc: <stable@vger.kernel.org>    [v3.3+]
    Cc: Dmitry Kasatkin <dmitry.kasatkin@intel.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 9ac5390b0288726726deab05c891c19eafda7ed3
Author: NeilBrown <neilb@suse.com>
Date:   Thu Aug 31 10:23:25 2017 +1000

    md/bitmap: disable bitmap_resize for file-backed bitmaps.
    
    commit e8a27f836f165c26f867ece7f31eb5c811692319 upstream.
    
    bitmap_resize() does not work for file-backed bitmaps.
    The buffer_heads are allocated and initialized when
    the bitmap is read from the file, but resize doesn't
    read from the file, it loads from the internal bitmap.
    When it comes time to write the new bitmap, the bh is
    non-existent and we crash.
    
    The common case when growing an array involves making the array larger,
    and that normally means making the bitmap larger.  Doing
    that inside the kernel is possible, but would need more code.
    It is probably easier to require people who use file-backed
    bitmaps to remove them and re-add after a reshape.
    
    So this patch disables the resizing of arrays which have
    file-backed bitmaps.  This is better than crashing.
    
    Reported-by: Zhilong Liu <zlliu@suse.com>
    Fixes: d60b479d177a ("md/bitmap: add bitmap_resize function to allow bitmap resizing.")
    Cc: stable@vger.kernel.org (v3.5+).
    Signed-off-by: NeilBrown <neilb@suse.com>
    Signed-off-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit a45d36761bc230da5dc37741364608bb91bdfad1
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 9 12:37:49 2017 -0700

    KEYS: encrypted: fix dereference of NULL user_key_payload
    
    commit 13923d0865ca96312197962522e88bc0aedccd74 upstream.
    
    A key of type "encrypted" references a "master key" which is used to
    encrypt and decrypt the encrypted key's payload.  However, when we
    accessed the master key's payload, we failed to handle the case where
    the master key has been revoked, which sets the payload pointer to NULL.
    Note that request_key() *does* skip revoked keys, but there is still a
    window where the key can be revoked before we acquire its semaphore.
    
    Fix it by checking for a NULL payload, treating it like a key which was
    already revoked at the time it was requested.
    
    This was an issue for master keys of type "user" only.  Master keys can
    also be of type "trusted", but those cannot be revoked.
    
    Fixes: 7e70cb497850 ("keys: add new key-type encrypted")
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Cc: <stable@vger.kernel.org>    [v2.6.38+]
    Cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Cc: David Safford <safford@us.ibm.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit e8705c4233f26a460b4d67f6bbf48e16f8261006
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Sep 18 11:37:03 2017 -0700

    KEYS: prevent creating a different user's keyrings
    
    commit 237bbd29f7a049d310d907f4b2716a7feef9abf3 upstream.
    
    It was possible for an unprivileged user to create the user and user
    session keyrings for another user.  For example:
    
        sudo -u '#3000' sh -c 'keyctl add keyring _uid.4000 "" @u
                               keyctl add keyring _uid_ses.4000 "" @u
                               sleep 15' &
        sleep 1
        sudo -u '#4000' keyctl describe @u
        sudo -u '#4000' keyctl describe @us
    
    This is problematic because these "fake" keyrings won't have the right
    permissions.  In particular, the user who created them first will own
    them and will have full access to them via the possessor permissions,
    which can be used to compromise the security of a user's keys:
    
        -4: alswrv-----v------------  3000     0 keyring: _uid.4000
        -5: alswrv-----v------------  3000     0 keyring: _uid_ses.4000
    
    Fix it by marking user and user session keyrings with a flag
    KEY_FLAG_UID_KEYRING.  Then, when searching for a user or user session
    keyring by name, skip all keyrings that don't have the flag set.
    
    Fixes: 69664cf16af4 ("keys: don't generate user and user session keyrings unless they're accessed")
    Cc: <stable@vger.kernel.org>    [v2.6.26+]
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    [wt: adjust context]
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f9e779c5387d091d0d8cbe9241914d1dc43f9bf2
Author: James Hogan <jhogan@kernel.org>
Date:   Wed May 31 16:19:47 2017 +0100

    MIPS: Fix mips_atomic_set() retry condition
    
    commit 2ec420b26f7b6ff332393f0bb5a7d245f7ad87f0 upstream.
    
    The inline asm retry check in the MIPS_ATOMIC_SET operation of the
    sysmips system call has been backwards since commit f1e39a4a616c ("MIPS:
    Rewrite sysmips(MIPS_ATOMIC_SET, ...) in C with inline assembler")
    merged in v2.6.32, resulting in the non R10000_LLSC_WAR case retrying
    until the operation was inatomic, before returning the new value that
    was probably just written multiple times instead of the old value.
    
    Invert the branch condition to fix that particular issue.
    
    Fixes: f1e39a4a616c ("MIPS: Rewrite sysmips(MIPS_ATOMIC_SET, ...) in C with inline assembler")
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/16148/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 9c66c82c5fd868ffd3b6a848ecc487f1061cdc36
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Sun May 21 22:36:23 2017 -0400

    ext4: keep existing extra fields when inode expands
    
    commit 887a9730614727c4fff7cb756711b190593fc1df upstream.
    
    ext4_expand_extra_isize() should clear only space between old and new
    size.
    
    Fixes: 6dd4ee7cab7e # v2.6.23
    Cc: stable@vger.kernel.org
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ba850927667f326ec400f3bb4e268a101639de1a
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 9 12:40:00 2017 -0700

    FS-Cache: fix dereference of NULL user_key_payload
    
    commit d124b2c53c7bee6569d2a2d0b18b4a1afde00134 upstream.
    
    When the file /proc/fs/fscache/objects (available with
    CONFIG_FSCACHE_OBJECT_LIST=y) is opened, we request a user key with
    description "fscache:objlist", then access its payload.  However, a
    revoked key has a NULL payload, and we failed to check for this.
    request_key() *does* skip revoked keys, but there is still a window
    where the key can be revoked before we access its payload.
    
    Fix it by checking for a NULL payload, treating it like a key which was
    already revoked at the time it was requested.
    
    Fixes: 4fbf4291aa15 ("FS-Cache: Allow the current state of all objects to be dumped")
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Cc: <stable@vger.kernel.org>    [v2.6.32+]
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 20d94bc94065e6fc3f82b7d39b9a2011696aa074
Author: David Howells <dhowells@redhat.com>
Date:   Thu Oct 12 16:00:41 2017 +0100

    KEYS: don't let add_key() update an uninstantiated key
    
    commit 60ff5b2f547af3828aebafd54daded44cfb0807a upstream.
    
    Currently, when passed a key that already exists, add_key() will call the
    key's ->update() method if such exists.  But this is heavily broken in the
    case where the key is uninstantiated because it doesn't call
    __key_instantiate_and_link().  Consequently, it doesn't do most of the
    things that are supposed to happen when the key is instantiated, such as
    setting the instantiation state, clearing KEY_FLAG_USER_CONSTRUCT and
    awakening tasks waiting on it, and incrementing key->user->nikeys.
    
    It also never takes key_construction_mutex, which means that
    ->instantiate() can run concurrently with ->update() on the same key.  In
    the case of the "user" and "logon" key types this causes a memory leak, at
    best.  Maybe even worse, the ->update() methods of the "encrypted" and
    "trusted" key types actually just dereference a NULL pointer when passed an
    uninstantiated key.
    
    Change key_create_or_update() to wait interruptibly for the key to finish
    construction before continuing.
    
    This patch only affects *uninstantiated* keys.  For now we still allow a
    negatively instantiated key to be updated (thereby positively
    instantiating it), although that's broken too (the next patch fixes it)
    and I'm not sure that anyone actually uses that functionality either.
    
    Here is a simple reproducer for the bug using the "encrypted" key type
    (requires CONFIG_ENCRYPTED_KEYS=y), though as noted above the bug
    pertained to more than just the "encrypted" key type:
    
        #include <stdlib.h>
        #include <unistd.h>
        #include <keyutils.h>
    
        int main(void)
        {
            int ringid = keyctl_join_session_keyring(NULL);
    
            if (fork()) {
                for (;;) {
                    const char payload[] = "update user:foo 32";
    
                    usleep(rand() % 10000);
                    add_key("encrypted", "desc", payload, sizeof(payload), ringid);
                    keyctl_clear(ringid);
                }
            } else {
                for (;;)
                    request_key("encrypted", "desc", "callout_info", ringid);
            }
        }
    
    It causes:
    
        BUG: unable to handle kernel NULL pointer dereference at 0000000000000018
        IP: encrypted_update+0xb0/0x170
        PGD 7a178067 P4D 7a178067 PUD 77269067 PMD 0
        PREEMPT SMP
        CPU: 0 PID: 340 Comm: reproduce Tainted: G      D         4.14.0-rc1-00025-g428490e38b2e #796
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
        task: ffff8a467a39a340 task.stack: ffffb15c40770000
        RIP: 0010:encrypted_update+0xb0/0x170
        RSP: 0018:ffffb15c40773de8 EFLAGS: 00010246
        RAX: 0000000000000000 RBX: ffff8a467a275b00 RCX: 0000000000000000
        RDX: 0000000000000005 RSI: ffff8a467a275b14 RDI: ffffffffb742f303
        RBP: ffffb15c40773e20 R08: 0000000000000000 R09: ffff8a467a275b17
        R10: 0000000000000020 R11: 0000000000000000 R12: 0000000000000000
        R13: 0000000000000000 R14: ffff8a4677057180 R15: ffff8a467a275b0f
        FS:  00007f5d7fb08700(0000) GS:ffff8a467f200000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 0000000000000018 CR3: 0000000077262005 CR4: 00000000001606f0
        Call Trace:
         key_create_or_update+0x2bc/0x460
         SyS_add_key+0x10c/0x1d0
         entry_SYSCALL_64_fastpath+0x1f/0xbe
        RIP: 0033:0x7f5d7f211259
        RSP: 002b:00007ffed03904c8 EFLAGS: 00000246 ORIG_RAX: 00000000000000f8
        RAX: ffffffffffffffda RBX: 000000003b2a7955 RCX: 00007f5d7f211259
        RDX: 00000000004009e4 RSI: 00000000004009ff RDI: 0000000000400a04
        RBP: 0000000068db8bad R08: 000000003b2a7955 R09: 0000000000000004
        R10: 000000000000001a R11: 0000000000000246 R12: 0000000000400868
        R13: 00007ffed03905d0 R14: 0000000000000000 R15: 0000000000000000
        Code: 77 28 e8 64 34 1f 00 45 31 c0 31 c9 48 8d 55 c8 48 89 df 48 8d 75 d0 e8 ff f9 ff ff 85 c0 41 89 c4 0f 88 84 00 00 00 4c 8b 7d c8 <49> 8b 75 18 4c 89 ff e8 24 f8 ff ff 85 c0 41 89 c4 78 6d 49 8b
        RIP: encrypted_update+0xb0/0x170 RSP: ffffb15c40773de8
        CR2: 0000000000000018
    
    Cc: <stable@vger.kernel.org> # v2.6.12+
    Reported-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit be3e7b176c28cb919f81c3fa2ff63148be7a74e5
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 4 11:01:13 2017 +0200

    USB: serial: console: fix use-after-free after failed setup
    
    commit 299d7572e46f98534033a9e65973f13ad1ce9047 upstream.
    
    Make sure to reset the USB-console port pointer when console setup fails
    in order to avoid having the struct usb_serial be prematurely freed by
    the console code when the device is later disconnected.
    
    Fixes: 73e487fdb75f ("[PATCH] USB console: fix disconnection issues")
    Cc: stable <stable@vger.kernel.org>     # 2.6.18
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit d75e8540fd8bedc8ee8d11941a7aed3a86735c47
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Mon Oct 9 11:13:18 2017 +0200

    direct-io: Prevent NULL pointer access in submit_page_section
    
    commit 899f0429c7d3eed886406cd72182bee3b96aa1f9 upstream.
    
    In the code added to function submit_page_section by commit b1058b981,
    sdio->bio can currently be NULL when calling dio_bio_submit.  This then
    leads to a NULL pointer access in dio_bio_submit, so check for a NULL
    bio in submit_page_section before trying to submit it instead.
    
    Fixes xfstest generic/250 on gfs2.
    
    Cc: stable@vger.kernel.org # v3.10+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 544d7ba2c8304b1db4a12a39225443f9f689985d
Author: Joerg Roedel <jroedel@suse.de>
Date:   Fri Oct 13 14:32:37 2017 +0200

    iommu/amd: Finish TLB flush in amd_iommu_unmap()
    
    commit ce76353f169a6471542d999baf3d29b121dce9c0 upstream.
    
    The function only sends the flush command to the IOMMU(s),
    but does not wait for its completion when it returns. Fix
    that.
    
    Fixes: 601367d76bd1 ('x86/amd-iommu: Remove iommu_flush_domain function')
    Cc: stable@vger.kernel.org # >= 2.6.33
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 5abdd6e8304150f7939bb10a27eec38d2483cd9d
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Sep 27 18:47:13 2017 +0900

    usb: renesas_usbhs: fix usbhsf_fifo_clear() for RX direction
    
    commit 0a2ce62b61f2c76d0213edf4e37aaf54a8ddf295 upstream.
    
    This patch fixes an issue that the usbhsf_fifo_clear() is possible
    to cause 10 msec delay if the pipe is RX direction and empty because
    the FRDY bit will never be set to 1 in such case.
    
    Fixes: e8d548d54968 ("usb: renesas_usbhs: fifo became independent from pipe.")
    Cc: <stable@vger.kernel.org> # v3.1+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit b974ab50791088d1d69c53715306729f01c15a4d
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Sep 27 18:47:12 2017 +0900

    usb: renesas_usbhs: fix the BCLR setting condition for non-DCP pipe
    
    commit 6124607acc88fffeaadf3aacfeb3cc1304c87387 upstream.
    
    This patch fixes an issue that the driver sets the BCLR bit of
    {C,Dn}FIFOCTR register to 1 even when it's non-DCP pipe and
    the FRDY bit of {C,Dn}FIFOCTR register is set to 1.
    
    Fixes: e8d548d54968 ("usb: renesas_usbhs: fifo became independent from pipe.")
    Cc: <stable@vger.kernel.org> # v3.1+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 4b106b91a0c954ec2aac206c485654372532cb16
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Jul 28 12:30:57 2017 +0200

    scsi: zfcp: trace HBA FSF response by default on dismiss or timedout late response
    
    commit fdb7cee3b9e3c561502e58137a837341f10cbf8b upstream.
    
    At the default trace level, we only trace unsuccessful events including
    FSF responses.
    
    zfcp_dbf_hba_fsf_response() only used protocol status and FSF status to
    decide on an unsuccessful response. However, this is only one of multiple
    possible sources determining a failed struct zfcp_fsf_req.
    
    An FSF request can also "fail" if its response runs into an ERP timeout
    or if it gets dismissed because a higher level recovery was triggered
    [trace tags "erscf_1" or "erscf_2" in zfcp_erp_strategy_check_fsfreq()].
    FSF requests with ERP timeout are:
    FSF_QTCB_EXCHANGE_CONFIG_DATA, FSF_QTCB_EXCHANGE_PORT_DATA,
    FSF_QTCB_OPEN_PORT_WITH_DID or FSF_QTCB_CLOSE_PORT or
    FSF_QTCB_CLOSE_PHYSICAL_PORT for target ports,
    FSF_QTCB_OPEN_LUN, FSF_QTCB_CLOSE_LUN.
    One example is slow queue processing which can cause follow-on errors,
    e.g. FSF_PORT_ALREADY_OPEN after FSF_QTCB_OPEN_PORT_WITH_DID timed out.
    In order to see the root cause, we need to see late responses even if the
    channel presented them successfully with FSF_PROT_GOOD and FSF_GOOD.
    Example trace records formatted with zfcpdbf from the s390-tools package:
    
    Timestamp      : ...
    Area           : REC
    Subarea        : 00
    Level          : 1
    Exception      : -
    CPU ID         : ..
    Caller         : ...
    Record ID      : 1
    Tag            : fcegpf1
    LUN            : 0xffffffffffffffff
    WWPN           : 0x<WWPN>
    D_ID           : 0x00<D_ID>
    Adapter status : 0x5400050b
    Port status    : 0x41200000
    LUN status     : 0x00000000
    Ready count    : 0x00000001
    Running count  : 0x...
    ERP want       : 0x02                           ZFCP_ERP_ACTION_REOPEN_PORT
    ERP need       : 0x02                           ZFCP_ERP_ACTION_REOPEN_PORT
    |
    Timestamp      : ...                            30 seconds later
    Area           : REC
    Subarea        : 00
    Level          : 1
    Exception      : -
    CPU ID         : ..
    Caller         : ...
    Record ID      : 2
    Tag            : erscf_2
    LUN            : 0xffffffffffffffff
    WWPN           : 0x<WWPN>
    D_ID           : 0x00<D_ID>
    Adapter status : 0x5400050b
    Port status    : 0x41200000
    LUN status     : 0x00000000
    Request ID     : 0x<request_ID>
    ERP status     : 0x10000000                     ZFCP_STATUS_ERP_TIMEDOUT
    ERP step       : 0x0800                         ZFCP_ERP_STEP_PORT_OPENING
    ERP action     : 0x02                           ZFCP_ERP_ACTION_REOPEN_PORT
    ERP count      : 0x00
    |
    Timestamp      : ...                            later than previous record
    Area           : HBA
    Subarea        : 00
    Level          : 5      > default level         => 3    <= default level
    Exception      : -
    CPU ID         : 00
    Caller         : ...
    Record ID      : 1
    Tag            : fs_qtcb                        => fs_rerr
    Request ID     : 0x<request_ID>
    Request status : 0x00001010                     ZFCP_STATUS_FSFREQ_DISMISSED
                                                    | ZFCP_STATUS_FSFREQ_CLEANUP
    FSF cmnd       : 0x00000005
    FSF sequence no: 0x...
    FSF issued     : ...                            > 30 seconds ago
    FSF stat       : 0x00000000                     FSF_GOOD
    FSF stat qual  : 00000000 00000000 00000000 00000000
    Prot stat      : 0x00000001                     FSF_PROT_GOOD
    Prot stat qual : 00000000 00000000 00000000 00000000
    Port handle    : 0x...
    LUN handle     : 0x00000000
    QTCB log length: ...
    QTCB log info  : ...
    
    In case of problems detecting that new responses are waiting on the input
    queue, we sooner or later trigger adapter recovery due to an FSF request
    timeout (trace tag "fsrth_1").
    FSF requests with FSF request timeout are:
    typically FSF_QTCB_ABORT_FCP_CMND; but theoretically also
    FSF_QTCB_EXCHANGE_CONFIG_DATA or FSF_QTCB_EXCHANGE_PORT_DATA via sysfs,
    FSF_QTCB_OPEN_PORT_WITH_DID or FSF_QTCB_CLOSE_PORT for WKA ports,
    FSF_QTCB_FCP_CMND for task management function (LUN / target reset).
    One or more pending requests can meanwhile have FSF_PROT_GOOD and FSF_GOOD
    because the channel filled in the response via DMA into the request's QTCB.
    
    In a theroretical case, inject code can create an erroneous FSF request
    on purpose. If data router is enabled, it uses deferred error reporting.
    A READ SCSI command can succeed with FSF_PROT_GOOD, FSF_GOOD, and
    SAM_STAT_GOOD. But on writing the read data to host memory via DMA,
    it can still fail, e.g. if an intentionally wrong scatter list does not
    provide enough space. Rather than getting an unsuccessful response,
    we get a QDIO activate check which in turn triggers adapter recovery.
    One or more pending requests can meanwhile have FSF_PROT_GOOD and FSF_GOOD
    because the channel filled in the response via DMA into the request's QTCB.
    Example trace records formatted with zfcpdbf from the s390-tools package:
    
    Timestamp      : ...
    Area           : HBA
    Subarea        : 00
    Level          : 6      > default level         => 3    <= default level
    Exception      : -
    CPU ID         : ..
    Caller         : ...
    Record ID      : 1
    Tag            : fs_norm                        => fs_rerr
    Request ID     : 0x<request_ID2>
    Request status : 0x00001010                     ZFCP_STATUS_FSFREQ_DISMISSED
                                                    | ZFCP_STATUS_FSFREQ_CLEANUP
    FSF cmnd       : 0x00000001
    FSF sequence no: 0x...
    FSF issued     : ...
    FSF stat       : 0x00000000                     FSF_GOOD
    FSF stat qual  : 00000000 00000000 00000000 00000000
    Prot stat      : 0x00000001                     FSF_PROT_GOOD
    Prot stat qual : ........ ........ 00000000 00000000
    Port handle    : 0x...
    LUN handle     : 0x...
    |
    Timestamp      : ...
    Area           : SCSI
    Subarea        : 00
    Level          : 3
    Exception      : -
    CPU ID         : ..
    Caller         : ...
    Record ID      : 1
    Tag            : rsl_err
    Request ID     : 0x<request_ID2>
    SCSI ID        : 0x...
    SCSI LUN       : 0x...
    SCSI result    : 0x000e0000                     DID_TRANSPORT_DISRUPTED
    SCSI retries   : 0x00
    SCSI allowed   : 0x05
    SCSI scribble  : 0x<request_ID2>
    SCSI opcode    : 28...                          Read(10)
    FCP rsp inf cod: 0x00
    FCP rsp IU     : 00000000 00000000 00000000 00000000
                                             ^^     SAM_STAT_GOOD
                     00000000 00000000
    
    Only with luck in both above cases, we could see a follow-on trace record
    of an unsuccesful event following a successful but late FSF response with
    FSF_PROT_GOOD and FSF_GOOD. Typically this was the case for I/O requests
    resulting in a SCSI trace record "rsl_err" with DID_TRANSPORT_DISRUPTED
    [On ZFCP_STATUS_FSFREQ_DISMISSED, zfcp_fsf_protstatus_eval() sets
    ZFCP_STATUS_FSFREQ_ERROR seen by the request handler functions as failure].
    However, the reason for this follow-on trace was invisible because the
    corresponding HBA trace record was missing at the default trace level
    (by default hidden records with tags "fs_norm", "fs_qtcb", or "fs_open").
    
    On adapter recovery, after we had shut down the QDIO queues, we perform
    unsuccessful pseudo completions with flag ZFCP_STATUS_FSFREQ_DISMISSED
    for each pending FSF request in zfcp_fsf_req_dismiss_all().
    In order to find the root cause, we need to see all pseudo responses even
    if the channel presented them successfully with FSF_PROT_GOOD and FSF_GOOD.
    
    Therefore, check zfcp_fsf_req.status for ZFCP_STATUS_FSFREQ_DISMISSED
    or ZFCP_STATUS_FSFREQ_ERROR and trace with a new tag "fs_rerr".
    
    It does not matter that there are numerous places which set
    ZFCP_STATUS_FSFREQ_ERROR after the location where we trace an FSF response
    early. These cases are based on protocol status != FSF_PROT_GOOD or
    == FSF_PROT_FSF_STATUS_PRESENTED and are thus already traced by default
    as trace tag "fs_perr" or "fs_ferr" respectively.
    
    NB: The trace record with tag "fssrh_1" for status read buffers on dismiss
    all remains. zfcp_fsf_req_complete() handles this and returns early.
    All other FSF request types are handled separately and as described above.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 8a36e4532ea1 ("[SCSI] zfcp: enhancement of zfcp debug features")
    Fixes: 2e261af84cdb ("[SCSI] zfcp: Only collect FSF/HBA debug data for matching trace levels")
    Cc: <stable@vger.kernel.org> #2.6.38+
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit bb5cf573ea98352ec337a537ea1199b69d001307
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Jul 28 12:30:56 2017 +0200

    scsi: zfcp: fix payload with full FCP_RSP IU in SCSI trace records
    
    commit 12c3e5754c8022a4f2fd1e9f00d19e99ee0d3cc1 upstream.
    
    If the FCP_RSP UI has optional parts (FCP_SNS_INFO or FCP_RSP_INFO) and
    thus does not fit into the fsp_rsp field built into a SCSI trace record,
    trace the full FCP_RSP UI with all optional parts as payload record
    instead of just FCP_SNS_INFO as payload and
    a 1 byte RSP_INFO_CODE part of FCP_RSP_INFO built into the SCSI record.
    
    That way we would also get the full FCP_SNS_INFO in case a
    target would ever send more than
    min(SCSI_SENSE_BUFFERSIZE==96, ZFCP_DBF_PAY_MAX_REC==256)==96.
    
    The mandatory part of FCP_RSP IU is only 24 bytes.
    PAYload costs at least one full PAY record of 256 bytes anyway.
    We cap to the hardware response size which is only FSF_FCP_RSP_SIZE==128.
    So we can just put the whole FCP_RSP IU with any optional parts into
    PAYload similarly as we do for SAN PAY since v4.9 commit aceeffbb59bb
    ("zfcp: trace full payload of all SAN records (req,resp,iels)").
    This does not cause any additional trace records wasting memory.
    
    Decoded trace records were confusing because they showed a hard-coded
    sense data length of 96 even if the FCP_RSP_IU field FCP_SNS_LEN showed
    actually less.
    
    Since the same commit, we set pl_len for SAN traces to the full length of a
    request/response even if we cap the corresponding trace.
    In contrast, here for SCSI traces we set pl_len to the pre-computed
    length of FCP_RSP IU considering SNS_LEN or RSP_LEN if valid.
    Nonetheless we trace a hardcoded payload of length FSF_FCP_RSP_SIZE==128
    if there were optional parts.
    This makes it easier for the zfcpdbf tool to format only the relevant
    part of the long FCP_RSP UI buffer. And any trailing information is still
    available in the payload trace record just in case.
    
    Rename the payload record tag from "fcp_sns" to "fcp_riu" to make the new
    content explicit to zfcpdbf which can then pick a suitable field name such
    as "FCP rsp IU all:" instead of "Sense info :"
    Also, the same zfcpdbf can still be backwards compatible with "fcp_sns".
    
    Old example trace record before this fix, formatted with the tool zfcpdbf
    from s390-tools:
    
    Timestamp      : ...
    Area           : SCSI
    Subarea        : 00
    Level          : 3
    Exception      : -
    CPU id         : ..
    Caller         : 0x...
    Record id      : 1
    Tag            : rsl_err
    Request id     : 0x<request_id>
    SCSI ID        : 0x...
    SCSI LUN       : 0x...
    SCSI result    : 0x00000002
    SCSI retries   : 0x00
    SCSI allowed   : 0x05
    SCSI scribble  : 0x<request_id>
    SCSI opcode    : 00000000 00000000 00000000 00000000
    FCP rsp inf cod: 0x00
    FCP rsp IU     : 00000000 00000000 00000202 00000000
                                           ^^==FCP_SNS_LEN_VALID
                     00000020 00000000
                     ^^^^^^^^==FCP_SNS_LEN==32
    Sense len      : 96 <==min(SCSI_SENSE_BUFFERSIZE,ZFCP_DBF_PAY_MAX_REC)
    Sense info     : 70000600 00000018 00000000 29000000
                     00000400 00000000 00000000 00000000
                     00000000 00000000 00000000 00000000<==superfluous
                     00000000 00000000 00000000 00000000<==superfluous
                     00000000 00000000 00000000 00000000<==superfluous
                     00000000 00000000 00000000 00000000<==superfluous
    
    New example trace records with this fix:
    
    Timestamp      : ...
    Area           : SCSI
    Subarea        : 00
    Level          : 3
    Exception      : -
    CPU ID         : ..
    Caller         : 0x...
    Record ID      : 1
    Tag            : rsl_err
    Request ID     : 0x<request_id>
    SCSI ID        : 0x...
    SCSI LUN       : 0x...
    SCSI result    : 0x00000002
    SCSI retries   : 0x00
    SCSI allowed   : 0x03
    SCSI scribble  : 0x<request_id>
    SCSI opcode    : a30c0112 00000000 02000000 00000000
    FCP rsp inf cod: 0x00
    FCP rsp IU     : 00000000 00000000 00000a02 00000200
                     00000020 00000000
    FCP rsp IU len : 56
    FCP rsp IU all : 00000000 00000000 00000a02 00000200
                                           ^^=FCP_RESID_UNDER|FCP_SNS_LEN_VALID
                     00000020 00000000 70000500 00000018
                     ^^^^^^^^==FCP_SNS_LEN
                                       ^^^^^^^^^^^^^^^^^
                     00000000 240000cb 00011100 00000000
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                     00000000 00000000
                     ^^^^^^^^^^^^^^^^^==FCP_SNS_INFO
    
    Timestamp      : ...
    Area           : SCSI
    Subarea        : 00
    Level          : 1
    Exception      : -
    CPU ID         : ..
    Caller         : 0x...
    Record ID      : 1
    Tag            : lr_okay
    Request ID     : 0x<request_id>
    SCSI ID        : 0x...
    SCSI LUN       : 0x...
    SCSI result    : 0x00000000
    SCSI retries   : 0x00
    SCSI allowed   : 0x05
    SCSI scribble  : 0x<request_id>
    SCSI opcode    : <CDB of unrelated SCSI command passed to eh handler>
    FCP rsp inf cod: 0x00
    FCP rsp IU     : 00000000 00000000 00000100 00000000
                     00000000 00000008
    FCP rsp IU len : 32
    FCP rsp IU all : 00000000 00000000 00000100 00000000
                                           ^^==FCP_RSP_LEN_VALID
                     00000000 00000008 00000000 00000000
                              ^^^^^^^^==FCP_RSP_LEN
                                       ^^^^^^^^^^^^^^^^^==FCP_RSP_INFO
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 250a1352b95e ("[SCSI] zfcp: Redesign of the debug tracing for SCSI records.")
    Cc: <stable@vger.kernel.org> #2.6.38+
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 2c7bfb3408afee40c339d34f6bf4284fcfd2dcac
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Jul 28 12:30:55 2017 +0200

    scsi: zfcp: fix missing trace records for early returns in TMF eh handlers
    
    commit 1a5d999ebfc7bfe28deb48931bb57faa8e4102b6 upstream.
    
    For problem determination we need to see that we were in scsi_eh
    as well as whether and why we were successful or not.
    
    The following commits introduced new early returns without adding
    a trace record:
    
    v2.6.35 commit a1dbfddd02d2
    ("[SCSI] zfcp: Pass return code from fc_block_scsi_eh to scsi eh")
    on fc_block_scsi_eh() returning != 0 which is FAST_IO_FAIL,
    
    v2.6.30 commit 63caf367e1c9
    ("[SCSI] zfcp: Improve reliability of SCSI eh handlers in zfcp")
    on not having gotten an FSF request after the maximum number of retry
    attempts and thus could not issue a TMF and has to return FAILED.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: a1dbfddd02d2 ("[SCSI] zfcp: Pass return code from fc_block_scsi_eh to scsi eh")
    Fixes: 63caf367e1c9 ("[SCSI] zfcp: Improve reliability of SCSI eh handlers in zfcp")
    Cc: <stable@vger.kernel.org> #2.6.38+
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit e7ab3bd99e221e848fd01df00629c8d4c808c5f6
Author: Benjamin Block <bblock@linux.vnet.ibm.com>
Date:   Fri Jul 28 12:30:52 2017 +0200

    scsi: zfcp: add handling for FCP_RESID_OVER to the fcp ingress path
    
    commit a099b7b1fc1f0418ab8d79ecf98153e1e134656e upstream.
    
    Up until now zfcp would just ignore the FCP_RESID_OVER flag in the FCP
    response IU. When this flag is set, it is possible, in regards to the
    FCP standard, that the storage-server processes the command normally, up
    to the point where data is missing and simply ignores those.
    
    In this case no CHECK CONDITION would be set, and because we ignored the
    FCP_RESID_OVER flag we resulted in at least a data loss or even
    -corruption as a follow-up error, depending on how the
    applications/layers on top behave. To prevent this, we now set the
    host-byte of the corresponding scsi_cmnd to DID_ERROR.
    
    Other storage-behaviors, where the same condition results in a CHECK
    CONDITION set in the answer, don't need to be changed as they are
    handled in the mid-layer already.
    
    Following is an example trace record decoded with zfcpdbf from the
    s390-tools package. We forcefully injected a fc_dl which is one byte too
    small:
    
    Timestamp      : ...
    Area           : SCSI
    Subarea        : 00
    Level          : 3
    Exception      : -
    CPU ID         : ..
    Caller         : 0x...
    Record ID      : 1
    Tag            : rsl_err
    Request ID     : 0x...
    SCSI ID        : 0x...
    SCSI LUN       : 0x...
    SCSI result    : 0x00070000
                         ^^DID_ERROR
    SCSI retries   : 0x..
    SCSI allowed   : 0x..
    SCSI scribble  : 0x...
    SCSI opcode    : 2a000000 00000000 08000000 00000000
    FCP rsp inf cod: 0x00
    FCP rsp IU     : 00000000 00000000 00000400 00000001
                                           ^^fr_flags==FCP_RESID_OVER
                                             ^^fr_status==SAM_STAT_GOOD
                                                ^^^^^^^^fr_resid
                     00000000 00000000
    
    As of now, we don't actively handle to possibility that a response IU
    has both flags - FCP_RESID_OVER and FCP_RESID_UNDER - set at once.
    
    Reported-by: Luke M. Hopkins <lmhopkin@us.ibm.com>
    Reviewed-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 553448f6c483 ("[SCSI] zfcp: Message cleanup")
    Fixes: ea127f975424 ("[PATCH] s390 (7/7): zfcp host adapter.") (tglx/history.git)
    Cc: <stable@vger.kernel.org> #2.6.33+
    Signed-off-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f609dac6507b615e43dd59b7c49760ba6ec651a9
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Jul 28 12:30:51 2017 +0200

    scsi: zfcp: fix queuecommand for scsi_eh commands when DIX enabled
    
    commit 71b8e45da51a7b64a23378221c0a5868bd79da4f upstream.
    
    Since commit db007fc5e20c ("[SCSI] Command protection operation"),
    scsi_eh_prep_cmnd() saves scmd->prot_op and temporarily resets it to
    SCSI_PROT_NORMAL.
    Other FCP LLDDs such as qla2xxx and lpfc shield their queuecommand()
    to only access any of scsi_prot_sg...() if
    (scsi_get_prot_op(cmd) != SCSI_PROT_NORMAL).
    
    Do the same thing for zfcp, which introduced DIX support with
    commit ef3eb71d8ba4 ("[SCSI] zfcp: Introduce experimental support for
    DIF/DIX").
    
    Otherwise, TUR SCSI commands as part of scsi_eh likely fail in zfcp,
    because the regular SCSI command with DIX protection data, that scsi_eh
    re-uses in scsi_send_eh_cmnd(), of course still has
    (scsi_prot_sg_count() != 0) and so zfcp sends down bogus requests to the
    FCP channel hardware.
    
    This causes scsi_eh_test_devices() to have (finish_cmds == 0)
    [not SCSI device is online or not scsi_eh_tur() failed]
    so regular SCSI commands, that caused / were affected by scsi_eh,
    are moved to work_q and scsi_eh_test_devices() itself returns false.
    In turn, it unnecessarily escalates in our case in scsi_eh_ready_devs()
    beyond host reset to finally scsi_eh_offline_sdevs()
    which sets affected SCSI devices offline with the following kernel message:
    
    "kernel: sd H:0:T:L: Device offlined - not ready after error recovery"
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: ef3eb71d8ba4 ("[SCSI] zfcp: Introduce experimental support for DIF/DIX")
    Cc: <stable@vger.kernel.org> #2.6.36+
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit c2ace3043febefbd2fec2964eb5d8a2db99039a4
Author: Mateusz Jurczyk <mjurczyk@google.com>
Date:   Wed Jun 7 12:26:49 2017 +0200

    fuse: initialize the flock flag in fuse_file on allocation
    
    commit 68227c03cba84a24faf8a7277d2b1a03c8959c2c upstream.
    
    Before the patch, the flock flag could remain uninitialized for the
    lifespan of the fuse_file allocation. Unless set to true in
    fuse_file_flock(), it would remain in an indeterminate state until read in
    an if statement in fuse_release_common(). This could consequently lead to
    taking an unexpected branch in the code.
    
    The bug was discovered by a runtime instrumentation designed to detect use
    of uninitialized memory in the kernel.
    
    Signed-off-by: Mateusz Jurczyk <mjurczyk@google.com>
    Fixes: 37fb3a30b462 ("fuse: fix flock")
    Cc: <stable@vger.kernel.org> # v3.1+
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 003bea4a702279fc339a0d2f1262e907364a2c73
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Mon Mar 27 16:12:43 2017 -0700

    target: Avoid mappedlun symlink creation during lun shutdown
    
    commit 49cb77e297dc611a1b795cfeb79452b3002bd331 upstream.
    
    This patch closes a race between se_lun deletion during configfs
    unlink in target_fabric_port_unlink() -> core_dev_del_lun()
    -> core_tpg_remove_lun(), when transport_clear_lun_ref() blocks
    waiting for percpu_ref RCU grace period to finish, but a new
    NodeACL mappedlun is added before the RCU grace period has
    completed.
    
    This can happen in target_fabric_mappedlun_link() because it
    only checks for se_lun->lun_se_dev, which is not cleared until
    after transport_clear_lun_ref() percpu_ref RCU grace period
    finishes.
    
    This bug originally manifested as NULL pointer dereference
    OOPsen in target_stat_scsi_att_intr_port_show_attr_dev() on
    v4.1.y code, because it dereferences lun->lun_se_dev without
    a explicit NULL pointer check.
    
    In post v4.1 code with target-core RCU conversion, the code
    in target_stat_scsi_att_intr_port_show_attr_dev() no longer
    uses se_lun->lun_se_dev, but the same race still exists.
    
    To address the bug, go ahead and set se_lun>lun_shutdown as
    early as possible in core_tpg_remove_lun(), and ensure new
    NodeACL mappedlun creation in target_fabric_mappedlun_link()
    fails during se_lun shutdown.
    
    Reported-by: James Shen <jcs@datera.io>
    Cc: James Shen <jcs@datera.io>
    Tested-by: James Shen <jcs@datera.io>
    Cc: stable@vger.kernel.org # 3.10+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit a6a256f6125b80f980e8add0d72153c2426adad3
Author: Prabhakar Lad <prabhakar.csengg@gmail.com>
Date:   Thu Jul 20 08:02:09 2017 -0400

    media: platform: davinci: return -EINVAL for VPFE_CMD_S_CCDC_RAW_PARAMS ioctl
    
    commit da05d52d2f0f6bd61094a0cd045fed94bf7d673a upstream.
    
    this patch makes sure VPFE_CMD_S_CCDC_RAW_PARAMS ioctl no longer works
    for vpfe_capture driver with a minimal patch suitable for backporting.
    
    - This ioctl was never in public api and was only defined in kernel header.
    - The function set_params constantly mixes up pointers and phys_addr_t
      numbers.
    - This is part of a 'VPFE_CMD_S_CCDC_RAW_PARAMS' ioctl command that is
      described as an 'experimental ioctl that will change in future kernels'.
    - The code to allocate the table never gets called after we copy_from_user
      the user input over the kernel settings, and then compare them
      for inequality.
    - We then go on to use an address provided by user space as both the
      __user pointer for input and pass it through phys_to_virt to come up
      with a kernel pointer to copy the data to. This looks like a trivially
      exploitable root hole.
    
    Due to these reasons we make sure this ioctl now returns -EINVAL and backport
    this patch as far as possible.
    
    Fixes: 5f15fbb68fd7 ("V4L/DVB (12251): v4l: dm644x ccdc module for vpfe capture driver")
    
    Signed-off-by: Lad, Prabhakar <prabhakar.csengg@gmail.com>
    Cc: <stable@vger.kernel.org>      # for v3.7 and up
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit c39dcbde3872cb39e1dbff940c610963aad96518
Author: Jerry Lee <jerrylee@qnap.com>
Date:   Sun Aug 6 01:18:31 2017 -0400

    ext4: fix overflow caused by missing cast in ext4_resize_fs()
    
    commit aec51758ce10a9c847a62a48a168f8c804c6e053 upstream.
    
    On a 32-bit platform, the value of n_blcoks_count may be wrong during
    the file system is resized to size larger than 2^32 blocks.  This may
    caused the superblock being corrupted with zero blocks count.
    
    Fixes: 1c6bd7173d66
    Signed-off-by: Jerry Lee <jerrylee@qnap.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@vger.kernel.org # 3.7+
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit bdc5fbb365b3d7baf9eb783562288946c4a72219
Author: Jan Kara <jack@suse.cz>
Date:   Sat Aug 5 17:43:24 2017 -0400

    ext4: fix SEEK_HOLE/SEEK_DATA for blocksize < pagesize
    
    commit fcf5ea10992fbac3c7473a1db33d56a139333cd1 upstream.
    
    ext4_find_unwritten_pgoff() does not properly handle a situation when
    starting index is in the middle of a page and blocksize < pagesize. The
    following command shows the bug on filesystem with 1k blocksize:
    
      xfs_io -f -c "falloc 0 4k" \
                -c "pwrite 1k 1k" \
                -c "pwrite 3k 1k" \
                -c "seek -a -r 0" foo
    
    In this example, neither lseek(fd, 1024, SEEK_HOLE) nor lseek(fd, 2048,
    SEEK_DATA) will return the correct result.
    
    Fix the problem by neglecting buffers in a page before starting offset.
    
    Reported-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Jan Kara <jack@suse.cz>
    CC: stable@vger.kernel.org # 3.8+
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ae49cb71c5f4a51dded50f66c2dcf9a764285148
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Jul 18 18:41:52 2017 -0400

    workqueue: restore WQ_UNBOUND/max_active==1 to be ordered
    
    commit 5c0338c68706be53b3dc472e4308961c36e4ece1 upstream.
    
    The combination of WQ_UNBOUND and max_active == 1 used to imply
    ordered execution.  After NUMA affinity 4c16bd327c74 ("workqueue:
    implement NUMA affinity for unbound workqueues"), this is no longer
    true due to per-node worker pools.
    
    While the right way to create an ordered workqueue is
    alloc_ordered_workqueue(), the documentation has been misleading for a
    long time and people do use WQ_UNBOUND and max_active == 1 for ordered
    workqueues which can lead to subtle bugs which are very difficult to
    trigger.
    
    It's unlikely that we'd see noticeable performance impact by enforcing
    ordering on WQ_UNBOUND / max_active == 1 workqueues.  Let's
    automatically set __WQ_ORDERED for those workqueues.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Christoph Hellwig <hch@infradead.org>
    Reported-by: Alexei Potashnik <alexei@purestorage.com>
    Fixes: 4c16bd327c74 ("workqueue: implement NUMA affinity for unbound workqueues")
    Cc: stable@vger.kernel.org # v3.10+
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7e20e7b9910eede5c21c7badcadb4d3830f8d69d
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 19 13:06:41 2017 +0300

    libata: array underflow in ata_find_dev()
    
    commit 59a5e266c3f5c1567508888dd61a45b86daed0fa upstream.
    
    My static checker complains that "devno" can be negative, meaning that
    we read before the start of the loop.  I've looked at the code, and I
    think the warning is right.  This come from /proc so it's root only or
    it would be quite a quite a serious bug.  The call tree looks like this:
    
    proc_scsi_write() <- gets id and channel from simple_strtoul()
    -> scsi_add_single_device() <- calls shost->transportt->user_scan()
       -> ata_scsi_user_scan()
          -> ata_find_dev()
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: stable@vger.kernel.org # all versions at this point
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 4748ac3f70a2b3663bd59b3dcb00e265fcde1a9f
Author: Maciej W. Rozycki <macro@mips.com>
Date:   Fri Jun 16 00:05:08 2017 +0100

    MIPS: math-emu: Prevent wrong ISA mode instruction emulation
    
    commit 13769ebad0c42738831787e27c7c7f982e7da579 upstream.
    
    Terminate FPU emulation immediately whenever an ISA mode switch has been
    observed.  This is so that we do not interpret machine code in the wrong
    mode, for example when a regular MIPS FPU instruction has been placed in
    a delay slot of a jump that switches into the MIPS16 mode, as with the
    following code (taken from a GCC test suite case):
    
    00400650 <set_fast_math>:
      400650:       3c020100        lui     v0,0x100
      400654:       03e00008        jr      ra
      400658:       44c2f800        ctc1    v0,c1_fcsr
      40065c:       00000000        nop
    
    [...]
    
    004012d0 <__libc_csu_init>:
      4012d0:       f000 6a02       li      v0,2
      4012d4:       f150 0b1c       la      v1,3f9430 <_DYNAMIC-0x6df0>
      4012d8:       f400 3240       sll     v0,16
      4012dc:       e269            addu    v0,v1
      4012de:       659a            move    gp,v0
      4012e0:       f00c 64f6       save    a0-a2,48,ra,s0-s1
      4012e4:       673c            move    s1,gp
      4012e6:       f010 9978       lw      v1,-32744(s1)
      4012ea:       d204            sw      v0,16(sp)
      4012ec:       eb40            jalr    v1
      4012ee:       653b            move    t9,v1
      4012f0:       f010 997c       lw      v1,-32740(s1)
      4012f4:       f030 9920       lw      s1,-32736(s1)
      4012f8:       e32f            subu    v1,s1
      4012fa:       326b            sra     v0,v1,2
      4012fc:       d206            sw      v0,24(sp)
      4012fe:       220c            beqz    v0,401318 <__libc_csu_init+0x48>
      401300:       6800            li      s0,0
      401302:       99e0            lw      a3,0(s1)
      401304:       4801            addiu   s0,1
      401306:       960e            lw      a2,56(sp)
      401308:       4904            addiu   s1,4
      40130a:       950d            lw      a1,52(sp)
      40130c:       940c            lw      a0,48(sp)
      40130e:       ef40            jalr    a3
      401310:       653f            move    t9,a3
      401312:       9206            lw      v0,24(sp)
      401314:       ea0a            cmp     v0,s0
      401316:       61f5            btnez   401302 <__libc_csu_init+0x32>
      401318:       6476            restore 48,ra,s0-s1
      40131a:       e8a0            jrc     ra
    
    Here `set_fast_math' is called from `40130e' (`40130f' with the ISA bit)
    and emulation triggers for the CTC1 instruction.  As it is in a jump
    delay slot emulation continues from `401312' (`401313' with the ISA
    bit).  However we have no path to handle MIPS16 FPU code emulation,
    because there are no MIPS16 FPU instructions.  So the default emulation
    path is taken, interpreting a 32-bit word fetched by `get_user' from
    `401313' as a regular MIPS instruction, which is:
    
      401313:       f5ea0a92        sdc1    $f10,2706(t7)
    
    This makes the FPU emulator proceed with the supposed SDC1 instruction
    and consequently makes the program considered here terminate with
    SIGSEGV.
    
    A similar although less severe issue exists with pure-microMIPS
    processors in the case where similarly an FPU instruction is emulated in
    a delay slot of a register jump that (incorrectly) switches into the
    regular MIPS mode.  A subsequent instruction fetch from the jump's
    target is supposed to cause an Address Error exception, however instead
    we proceed with regular MIPS FPU emulation.
    
    For simplicity then, always terminate the emulation loop whenever a mode
    change is detected, denoted by an ISA mode bit flip.  As from commit
    377cb1b6c16a ("MIPS: Disable MIPS16/microMIPS crap for platforms not
    supporting these ASEs.") the result of `get_isa16_mode' can be hardcoded
    to 0, so we need to examine the ISA mode bit by hand.
    
    This complements commit 102cedc32a6e ("MIPS: microMIPS: Floating point
    support.") which added JALX decoding to FPU emulation.
    
    Fixes: 102cedc32a6e ("MIPS: microMIPS: Floating point support.")
    Signed-off-by: Maciej W. Rozycki <macro@imgtec.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 3.9+
    Patchwork: https://patchwork.linux-mips.org/patch/16393/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 2121b630f51d64af5ce46722d9f419093de80366
Author: Maciej W. Rozycki <macro@mips.com>
Date:   Fri Jun 16 00:07:34 2017 +0100

    MIPS: Fix unaligned PC interpretation in `compute_return_epc'
    
    commit 11a3799dbeb620bf0400b1fda5cc2c6bea55f20a upstream.
    
    Fix a regression introduced with commit fb6883e5809c ("MIPS: microMIPS:
    Support handling of delay slots.") and defer to `__compute_return_epc'
    if the ISA bit is set in EPC with non-MIPS16, non-microMIPS hardware,
    which will then arrange for a SIGBUS due to an unaligned instruction
    reference.  Returning EPC here is never correct as the API defines this
    function's result to be either a negative error code on failure or one
    of 0 and BRANCH_LIKELY_TAKEN on success.
    
    Fixes: fb6883e5809c ("MIPS: microMIPS: Support handling of delay slots.")
    Signed-off-by: Maciej W. Rozycki <macro@imgtec.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 3.9+
    Patchwork: https://patchwork.linux-mips.org/patch/16395/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 6aa23d16b4dab21974ac5fcf46ac75a888006bc7
Author: Maciej W. Rozycki <macro@mips.com>
Date:   Fri Jun 16 00:06:19 2017 +0100

    MIPS: Actually decode JALX in `__compute_return_epc_for_insn'
    
    commit a9db101b735a9d49295326ae41f610f6da62b08c upstream.
    
    Complement commit fb6883e5809c ("MIPS: microMIPS: Support handling of
    delay slots.") and actually decode the regular MIPS JALX major
    instruction opcode, the handling of which has been added with the said
    commit for EPC calculation in `__compute_return_epc_for_insn'.
    
    Fixes: fb6883e5809c ("MIPS: microMIPS: Support handling of delay slots.")
    Signed-off-by: Maciej W. Rozycki <macro@imgtec.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 3.9+
    Patchwork: https://patchwork.linux-mips.org/patch/16394/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit a2555cd3e61b44f4f451989bd21299c546ff635c
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Jul 19 16:16:54 2017 +0900

    usb: renesas_usbhs: fix usbhsc_resume() for !USBHSF_RUNTIME_PWCTRL
    
    commit 59a0879a0e17b2e43ecdc5e3299da85b8410d7ce upstream.
    
    This patch fixes an issue that some registers may be not initialized
    after resume if the USBHSF_RUNTIME_PWCTRL is not set. Otherwise,
    if a cable is not connected, the driver will not enable INTENB0.VBSE
    after resume. And then, the driver cannot detect the VBUS.
    
    Fixes: ca8a282a5373 ("usb: gadget: renesas_usbhs: add suspend/resume support")
    Cc: <stable@vger.kernel.org> # v3.2+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ecac824c4d0711df071a47cd8eb374ce53ce8727
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Thu Jul 6 18:46:43 2017 +1000

    powerpc/asm: Mark cr0 as clobbered in mftb()
    
    commit 2400fd822f467cb4c886c879d8ad99feac9cf319 upstream.
    
    The workaround for the CELL timebase bug does not correctly mark cr0 as
    being clobbered. This means GCC doesn't know that the asm block changes cr0 and
    might leave the result of an unrelated comparison in cr0 across the block, which
    we then trash, leading to basically random behaviour.
    
    Fixes: 859deea949c3 ("[POWERPC] Cell timebase bug workaround")
    Cc: stable@vger.kernel.org # v2.6.19+
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    [mpe: Tweak change log and flag for stable]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 733c88d4da7984ec1ce65d6628ad0da25816b7a2
Author: Anton Blanchard <anton@samba.org>
Date:   Thu Jun 15 09:46:39 2017 +1000

    powerpc: Fix emulation of mfocrf in emulate_step()
    
    commit 64e756c55aa46fc18fd53e8f3598b73b528d8637 upstream.
    
    From POWER4 onwards, mfocrf() only places the specified CR field into
    the destination GPR, and the rest of it is set to 0. The PowerPC AS
    from version 3.0 now requires this behaviour.
    
    The emulation code currently puts the entire CR into the destination GPR.
    Fix it.
    
    Fixes: 6888199f7fe5 ("[POWERPC] Emulate more instructions in software")
    Cc: stable@vger.kernel.org # v2.6.22+
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 8e38d086b8b623ec1fad6290fcb807dc530a1b1e
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jul 11 22:10:54 2017 +1000

    powerpc/64: Fix atomic64_inc_not_zero() to return an int
    
    commit 01e6a61aceb82e13bec29502a8eb70d9574f97ad upstream.
    
    Although it's not documented anywhere, there is an expectation that
    atomic64_inc_not_zero() returns a result which fits in an int. This is
    the behaviour implemented on all arches except powerpc.
    
    This has caused at least one bug in practice, in the percpu-refcount
    code, where the long result from our atomic64_inc_not_zero() was
    truncated to an int leading to lost references and stuck systems. That
    was worked around in that code in commit 966d2b04e070 ("percpu-refcount:
    fix reference leak during percpu-atomic transition").
    
    To the best of my grepping abilities there are no other callers
    in-tree which truncate the value, but we should fix it anyway. Because
    the breakage is subtle and potentially very harmful I'm also tagging
    it for stable.
    
    Code generation is largely unaffected because in most cases the
    callers are just using the result for a test anyway. In particular the
    case of fget() that was mentioned in commit a6cf7ed5119f
    ("powerpc/atomic: Implement atomic*_inc_not_zero") generates exactly
    the same code.
    
    Fixes: a6cf7ed5119f ("powerpc/atomic: Implement atomic*_inc_not_zero")
    Cc: stable@vger.kernel.org # v3.4
    Noticed-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit c11c8fcaa2e91f3a579fabbc56ef07a11d4db2c0
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Wed Jun 28 16:56:18 2017 +0200

    PM / Domains: Fix unsafe iteration over modified list of device links
    
    commit c6e83cac3eda5f7dd32ee1453df2f7abb5c6cd46 upstream.
    
    pm_genpd_remove_subdomain() iterates over domain's master_links list and
    removes matching element thus it has to use safe version of list
    iteration.
    
    Fixes: f721889ff65a ("PM / Domains: Support for generic I/O PM domains (v8)")
    Cc: 3.1+ <stable@vger.kernel.org> # 3.1+
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f9c9c73b86b0950f670f5df311fc94910c4cd489
Author: Martin Hicks <mort@bork.org>
Date:   Tue May 2 09:38:35 2017 -0400

    crypto: talitos - Extend max key length for SHA384/512-HMAC and AEAD
    
    commit 03d2c5114c95797c0aa7d9f463348b171a274fd4 upstream.
    
    An updated patch that also handles the additional key length requirements
    for the AEAD algorithms.
    
    The max keysize is not 96.  For SHA384/512 it's 128, and for the AEAD
    algorithms it's longer still.  Extend the max keysize for the
    AEAD size for AES256 + HMAC(SHA512).
    
    Cc: <stable@vger.kernel.org> # 3.6+
    Fixes: 357fb60502ede ("crypto: talitos - add sha224, sha384 and sha512 to existing AEAD algorithms")
    Signed-off-by: Martin Hicks <mort@bork.org>
    Acked-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 1fc0b43a1df72704b4d5f6cd5a2ca6c09736d67f
Author: Adam Borowski <kilobyte@angband.pl>
Date:   Sat Jun 3 09:35:06 2017 +0200

    vt: fix unchecked __put_user() in tioclinux ioctls
    
    commit 6987dc8a70976561d22450b5858fc9767788cc1c upstream.
    
    Only read access is checked before this call.
    
    Actually, at the moment this is not an issue, as every in-tree arch does
    the same manual checks for VERIFY_READ vs VERIFY_WRITE, relying on the MMU
    to tell them apart, but this wasn't the case in the past and may happen
    again on some odd arch in the future.
    
    If anyone cares about 3.7 and earlier, this is a security hole (untested)
    on real 80386 CPUs.
    
    Signed-off-by: Adam Borowski <kilobyte@angband.pl>
    CC: stable@vger.kernel.org # v3.7-
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7136ca73ff3496758b56f60b6fe76d675e69cd21
Author: Arend van Spriel <arend.vanspriel@broadcom.com>
Date:   Fri Jul 7 21:09:06 2017 +0100

    brcmfmac: fix possible buffer overflow in brcmf_cfg80211_mgmt_tx()
    
    commit 8f44c9a41386729fea410e688959ddaa9d51be7c upstream.
    
    The lower level nl80211 code in cfg80211 ensures that "len" is between
    25 and NL80211_ATTR_FRAME (2304).  We subtract DOT11_MGMT_HDR_LEN (24) from
    "len" so thats's max of 2280.  However, the action_frame->data[] buffer is
    only BRCMF_FIL_ACTION_FRAME_SIZE (1800) bytes long so this memcpy() can
    overflow.
    
            memcpy(action_frame->data, &buf[DOT11_MGMT_HDR_LEN],
                   le16_to_cpu(action_frame->len));
    
    Cc: stable@vger.kernel.org # 3.9.x
    Fixes: 18e2f61db3b70 ("brcmfmac: P2P action frame tx.")
    Reported-by: "freenerguo(郭大兴)" <freenerguo@tencent.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [wt: s/cfg80211.c/wl_cfg80211.c in 3.10]
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit fe7e5549d05c83b2ffd4cad1eec2156f03f859d2
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jun 16 19:35:34 2017 +0100

    staging: comedi: fix clean-up of comedi_class in comedi_init()
    
    commit a9332e9ad09c2644c99058fcf6ae2f355e93ce74 upstream.
    
    There is a clean-up bug in the core comedi module initialization
    functions, `comedi_init()`.  If the `comedi_num_legacy_minors` module
    parameter is non-zero (and valid), it creates that many "legacy" devices
    and registers them in SysFS.  A failure causes the function to clean up
    and return an error.  Unfortunately, it fails to destroy the "comedi"
    class that was created earlier.  Fix it by adding a call to
    `class_destroy(comedi_class)` at the appropriate place in the clean-up
    sequence.
    
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Cc: <stable@vger.kernel.org> # 3.9+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 790d869bd9dec1d7d101bdd05026f6a5bfa21222
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Jun 1 16:18:15 2017 +0530

    powerpc/kprobes: Pause function_graph tracing during jprobes handling
    
    commit a9f8553e935f26cb5447f67e280946b0923cd2dc upstream.
    
    This fixes a crash when function_graph and jprobes are used together.
    This is essentially commit 237d28db036e ("ftrace/jprobes/x86: Fix
    conflict between jprobes and function graph tracing"), but for powerpc.
    
    Jprobes breaks function_graph tracing since the jprobe hook needs to use
    jprobe_return(), which never returns back to the hook, but instead to
    the original jprobe'd function. The solution is to momentarily pause
    function_graph tracing before invoking the jprobe hook and re-enable it
    when returning back to the original jprobe'd function.
    
    Fixes: 6794c78243bf ("powerpc64: port of the function graph tracer")
    Cc: stable@vger.kernel.org # v2.6.30+
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 69e0576f17049ea34477290c3a0a40787ccd8564
Author: Tomasz Wilczyński <twilczynski@naver.com>
Date:   Sun Jun 11 17:28:39 2017 +0900

    cpufreq: conservative: Allow down_threshold to take values from 1 to 10
    
    commit b8e11f7d2791bd9320be1c6e772a60b2aa093e45 upstream.
    
    Commit 27ed3cd2ebf4 (cpufreq: conservative: Fix the logic in frequency
    decrease checking) removed the 10 point substraction when comparing the
    load against down_threshold but did not remove the related limit for the
    down_threshold value.  As a result, down_threshold lower than 11 is not
    allowed even though values from 1 to 10 do work correctly too. The
    comment ("cannot be lower than 11 otherwise freq will not fall") also
    does not apply after removing the substraction.
    
    For this reason, allow down_threshold to take any value from 1 to 99
    and fix the related comment.
    
    Fixes: 27ed3cd2ebf4 (cpufreq: conservative: Fix the logic in frequency decrease checking)
    Signed-off-by: Tomasz Wilczyński <twilczynski@naver.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: 3.10+ <stable@vger.kernel.org> # 3.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 54fd65c07635e1fc5d263c169a970c9ceea1598d
Author: Michael Thalmeier <michael.thalmeier@hale.at>
Date:   Thu May 18 16:14:14 2017 +0200

    usb: chipidea: debug: check before accessing ci_role
    
    commit 0340ff83cd4475261e7474033a381bc125b45244 upstream.
    
    ci_role BUGs when the role is >= CI_ROLE_END.
    
    Cc: stable@vger.kernel.org  #v3.10+
    Signed-off-by: Michael Thalmeier <michael.thalmeier@hale.at>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f862c9436454a5b78d29ebaebc547aa6d1474f7a
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jun 8 14:48:40 2017 +0100

    KEYS: fix dereferencing NULL payload with nonzero length
    
    commit 5649645d725c73df4302428ee4e02c869248b4c5 upstream.
    
    sys_add_key() and the KEYCTL_UPDATE operation of sys_keyctl() allowed a
    NULL payload with nonzero length to be passed to the key type's
    ->preparse(), ->instantiate(), and/or ->update() methods.  Various key
    types including asymmetric, cifs.idmap, cifs.spnego, and pkcs7_test did
    not handle this case, allowing an unprivileged user to trivially cause a
    NULL pointer dereference (kernel oops) if one of these key types was
    present.  Fix it by doing the copy_from_user() when 'plen' is nonzero
    rather than when '_payload' is non-NULL, causing the syscall to fail
    with EFAULT as expected when an invalid buffer is specified.
    
    Cc: stable@vger.kernel.org # 2.6.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit e044ff5c05d3d24f1f0d70122b535d8390010b05
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Apr 26 12:24:21 2017 +0200

    serial: ifx6x60: fix use-after-free on module unload
    
    commit 1e948479b3d63e3ac0ecca13cbf4921c7d17c168 upstream.
    
    Make sure to deregister the SPI driver before releasing the tty driver
    to avoid use-after-free in the SPI remove callback where the tty
    devices are deregistered.
    
    Fixes: 72d4724ea54c ("serial: ifx6x60: Add modem power off function in the platform reboot process")
    Cc: stable <stable@vger.kernel.org>     # 3.8
    Cc: Jun Chen <jun.d.chen@intel.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 6c176369e70376d26e2de758401176a8342d7af5
Author: Maciej W. Rozycki <macro@mips.com>
Date:   Fri Jun 16 00:08:29 2017 +0100

    MIPS: Send SIGILL for BPOSGE32 in `__compute_return_epc_for_insn'
    
    commit 7b82c1058ac1f8f8b9f2b8786b1f710a57a870a8 upstream.
    
    Fix commit e50c0a8fa60d ("Support the MIPS32 / MIPS64 DSP ASE.") and
    send SIGILL rather than SIGBUS whenever an unimplemented BPOSGE32 DSP
    ASE instruction has been encountered in `__compute_return_epc_for_insn'
    as our Reserved Instruction exception handler would in response to an
    attempt to actually execute the instruction.  Sending SIGBUS only makes
    sense for the unaligned PC case, since moved to `__compute_return_epc'.
    Adjust function documentation accordingly, correct formatting and use
    `pr_info' rather than `printk' as the other exit path already does.
    
    Fixes: e50c0a8fa60d ("Support the MIPS32 / MIPS64 DSP ASE.")
    Signed-off-by: Maciej W. Rozycki <macro@imgtec.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 2.6.14+
    Patchwork: https://patchwork.linux-mips.org/patch/16396/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 3937c2c918c2ac71c064892d6631d0fc47c882c2
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 9 11:09:20 2017 +0200

    ALSA: seq: Fix use-after-free at creating a port
    
    commit 71105998845fb012937332fe2e806d443c09e026 upstream.
    
    There is a potential race window opened at creating and deleting a
    port via ioctl, as spotted by fuzzing.  snd_seq_create_port() creates
    a port object and returns its pointer, but it doesn't take the
    refcount, thus it can be deleted immediately by another thread.
    Meanwhile, snd_seq_ioctl_create_port() still calls the function
    snd_seq_system_client_ev_port_start() with the created port object
    that is being deleted, and this triggers use-after-free like:
    
     BUG: KASAN: use-after-free in snd_seq_ioctl_create_port+0x504/0x630 [snd_seq] at addr ffff8801f2241cb1
     =============================================================================
     BUG kmalloc-512 (Tainted: G    B          ): kasan: bad access detected
     -----------------------------------------------------------------------------
     INFO: Allocated in snd_seq_create_port+0x94/0x9b0 [snd_seq] age=1 cpu=3 pid=4511
            ___slab_alloc+0x425/0x460
            __slab_alloc+0x20/0x40
            kmem_cache_alloc_trace+0x150/0x190
            snd_seq_create_port+0x94/0x9b0 [snd_seq]
            snd_seq_ioctl_create_port+0xd1/0x630 [snd_seq]
            snd_seq_do_ioctl+0x11c/0x190 [snd_seq]
            snd_seq_ioctl+0x40/0x80 [snd_seq]
            do_vfs_ioctl+0x54b/0xda0
            SyS_ioctl+0x79/0x90
            entry_SYSCALL_64_fastpath+0x16/0x75
     INFO: Freed in port_delete+0x136/0x1a0 [snd_seq] age=1 cpu=2 pid=4717
            __slab_free+0x204/0x310
            kfree+0x15f/0x180
            port_delete+0x136/0x1a0 [snd_seq]
            snd_seq_delete_port+0x235/0x350 [snd_seq]
            snd_seq_ioctl_delete_port+0xc8/0x180 [snd_seq]
            snd_seq_do_ioctl+0x11c/0x190 [snd_seq]
            snd_seq_ioctl+0x40/0x80 [snd_seq]
            do_vfs_ioctl+0x54b/0xda0
            SyS_ioctl+0x79/0x90
            entry_SYSCALL_64_fastpath+0x16/0x75
     Call Trace:
      [<ffffffff81b03781>] dump_stack+0x63/0x82
      [<ffffffff81531b3b>] print_trailer+0xfb/0x160
      [<ffffffff81536db4>] object_err+0x34/0x40
      [<ffffffff815392d3>] kasan_report.part.2+0x223/0x520
      [<ffffffffa07aadf4>] ? snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]
      [<ffffffff815395fe>] __asan_report_load1_noabort+0x2e/0x30
      [<ffffffffa07aadf4>] snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]
      [<ffffffffa07aa8f0>] ? snd_seq_ioctl_delete_port+0x180/0x180 [snd_seq]
      [<ffffffff8136be50>] ? taskstats_exit+0xbc0/0xbc0
      [<ffffffffa07abc5c>] snd_seq_do_ioctl+0x11c/0x190 [snd_seq]
      [<ffffffffa07abd10>] snd_seq_ioctl+0x40/0x80 [snd_seq]
      [<ffffffff8136d433>] ? acct_account_cputime+0x63/0x80
      [<ffffffff815b515b>] do_vfs_ioctl+0x54b/0xda0
      .....
    
    We may fix this in a few different ways, and in this patch, it's fixed
    simply by taking the refcount properly at snd_seq_create_port() and
    letting the caller unref the object after use.  Also, there is another
    potential use-after-free by sprintf() call in snd_seq_create_port(),
    and this is moved inside the lock.
    
    This fix covers CVE-2017-15265.
    
    Reported-and-tested-by: Michael23 Yu <ycqzsy@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 44ec968933c5d5041fbdff2e93a2f769435f9607
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Wed Sep 13 00:21:21 2017 +0200

    nl80211: check for the required netlink attributes presence
    
    commit e785fa0a164aa11001cba931367c7f94ffaff888 upstream.
    
    nl80211_set_rekey_data() does not check if the required attributes
    NL80211_REKEY_DATA_{REPLAY_CTR,KEK,KCK} are present when processing
    NL80211_CMD_SET_REKEY_OFFLOAD request. This request can be issued by
    users with CAP_NET_ADMIN privilege and may result in NULL dereference
    and a system crash. Add a check for the required attributes presence.
    This patch is based on the patch by bo Zhang.
    
    This fixes CVE-2017-12153.
    
    References: https://bugzilla.redhat.com/show_bug.cgi?id=1491046
    Fixes: e5497d766ad ("cfg80211/nl80211: support GTK rekey offload")
    Cc: <stable@vger.kernel.org> # v3.1-rc1
    Reported-by: bo Zhang <zhangbo5891001@gmail.com>
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7571b7478bc9cfecb7894d909bda5cbd0f4aae04
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Wed Aug 2 19:50:14 2017 +0200

    xfrm: policy: check policy direction value
    
    commit 7bab09631c2a303f87a7eb7e3d69e888673b9b7e upstream.
    
    The 'dir' parameter in xfrm_migrate() is a user-controlled byte which is used
    as an array index. This can lead to an out-of-bound access, kernel lockup and
    DoS. Add a check for the 'dir' value.
    
    This fixes CVE-2017-11600.
    
    References: https://bugzilla.redhat.com/show_bug.cgi?id=1474928
    Fixes: 80c9abaabf42 ("[XFRM]: Extension for dynamic update of endpoint address(es)")
    Cc: <stable@vger.kernel.org> # v2.6.21-rc1
    Reported-by: "bo Zhang" <zhangbo5891001@gmail.com>
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 978e42bd2930a79556d539a488372d994206d413
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jun 15 00:12:24 2017 +0100

    rxrpc: Fix several cases where a padded len isn't checked in ticket decode
    
    commit 5f2f97656ada8d811d3c1bef503ced266fcd53a0 upstream.
    
    This fixes CVE-2017-7482.
    
    When a kerberos 5 ticket is being decoded so that it can be loaded into an
    rxrpc-type key, there are several places in which the length of a
    variable-length field is checked to make sure that it's not going to
    overrun the available data - but the data is padded to the nearest
    four-byte boundary and the code doesn't check for this extra.  This could
    lead to the size-remaining variable wrapping and the data pointer going
    over the end of the buffer.
    
    Fix this by making the various variable-length data checks use the padded
    length.
    
    Reported-by: 石磊 <shilei-c@360.cn>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.c.dionne@auristor.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 4f54b2642d4f1f908bf240fe5040925672b51b77
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Jun 23 15:08:57 2017 -0700

    fs/exec.c: account for argv/envp pointers
    
    commit 98da7d08850fb8bdeb395d6368ed15753304aa0c upstream.
    
    When limiting the argv/envp strings during exec to 1/4 of the stack limit,
    the storage of the pointers to the strings was not included.  This means
    that an exec with huge numbers of tiny strings could eat 1/4 of the stack
    limit in strings and then additional space would be later used by the
    pointers to the strings.
    
    For example, on 32-bit with a 8MB stack rlimit, an exec with 1677721
    single-byte strings would consume less than 2MB of stack, the max (8MB /
    4) amount allowed, but the pointers to the strings would consume the
    remaining additional stack space (1677721 * 4 == 6710884).
    
    The result (1677721 + 6710884 == 8388605) would exhaust stack space
    entirely.  Controlling this stack exhaustion could result in
    pathological behavior in setuid binaries (CVE-2017-1000365).
    
    [akpm@linux-foundation.org: additional commenting from Kees]
    Fixes: b6a2fea39318 ("mm: variable length argument support")
    Link: http://lkml.kernel.org/r/20170622001720.GA32173@beast
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Rik van Riel <riel@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Qualys Security Advisory <qsa@qualys.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 9a95fe3d74d2317ed94bba7aaa7285fd92df8879
Author: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Date:   Mon Oct 2 14:01:41 2017 +0900

    usb: renesas_usbhs: Fix DMAC sequence for receiving zero-length packet
    
    commit 29c7f3e68eec4ae94d85ad7b5dfdafdb8089f513 upstream.
    
    The DREQE bit of the DnFIFOSEL should be set to 1 after the DE bit of
    USB-DMAC on R-Car SoCs is set to 1 after the USB-DMAC received a
    zero-length packet. Otherwise, a transfer completion interruption
    of USB-DMAC doesn't happen. Even if the driver changes the sequence,
    normal operations (transmit/receive without zero-length packet) will
    not cause any side-effects. So, this patch fixes the sequence anyway.
    
    Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    [shimoda: revise the commit log]
    Fixes: e73a9891b3a1 ("usb: renesas_usbhs: add DMAEngine support")
    Cc: <stable@vger.kernel.org> # v3.1+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit b2453bd445b0086f1b9b3dda10dca15588fac2c9
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Thu Mar 12 15:35:19 2015 +0900

    usb: renesas_usbhs: fix the sequence in xfer_work()
    
    commit 9b53d9af7aac09cf249d72bfbf15f08e47c4f7fe upstream.
    
    This patch fixes the setup sequence in xfer_work(). Otherwise,
    sometimes a usb transaction will get stuck.
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 58e47d437d911efef76319fed7578eb6a4f00a7a
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Fri Aug 22 20:13:50 2014 +0900

    usb: renesas_usbhs: fix the behavior of some usbhs_pkt_handle
    
    commit 8355b2b3082d302091506703d2e4e239f7deed7f upstream.
    
    Some gadget drivers will call usb_ep_queue() more than once before
    the first queue doesn't finish. However, this driver didn't handle
    it correctly. So, this patch fixes the behavior of some
    usbhs_pkt_handle using the "running" flag. Otherwise, the oops below
    happens if we use g_ncm driver and when the "iperf -u -c host -b 200M"
    is running.
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000000
    pgd = c0004000
    [00000000] *pgd=00000000
    Internal error: Oops: 80000007 [#1] SMP ARM
    Modules linked in: usb_f_ncm g_ncm libcomposite u_ether
    CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W      3.17.0-rc1-00008-g8b2be8a-dirty #20
    task: c051c7e0 ti: c0512000 task.ti: c0512000
    PC is at 0x0
    LR is at usbhsf_pkt_handler+0xa8/0x114
    pc : [<00000000>]    lr : [<c0278fb4>]    psr: 60000193
    sp : c0513ce8  ip : c0513c58  fp : c0513d24
    r10: 00000001  r9 : 00000193  r8 : eebec4a0
    r7 : eebec410  r6 : eebe0c6c  r5 : 00000000  r4 : ee4a2774
    r3 : 00000000  r2 : ee251e00  r1 : c0513cf4  r0 : ee4a2774
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 75894adb0c708c9f3617f8921d98c750b821de1a
Author: Al Viro <viro@ZenIV.linux.org.uk>
Date:   Sat Sep 30 05:28:05 2017 +0100

    leak in O_DIRECT readv past the EOF
    
    In all versions from 2.5.62 to 3.15, on each iteration through the loop
    by iovec array in do_blockdev_direct_IO() we used to do this:
                    sdio.head = 0;
                    sdio.tail = 0;
    ...
                    retval = do_direct_IO(dio, &sdio, &map_bh);
    
                    if (retval) {
                            dio_cleanup(dio, &sdio);
                            break;
                    }
    
    with another dio_cleanup() done after the loop, catching the situation when
    retval had been 0.  Consider the situation when e.g. the 3rd iovec in 4-iovec
    array passed to readv() has crossed the EOF.  do_direct_IO() returns 0 and
    buggers off *without* exhausting the page array.  The loop proceeds to the
    next iovec without calling dio_cleanup() and resets sdio.head and sdio.tail.
    That reset of sdio.{head,tail} has prevented the eventual dio_cleanup() from
    seeing anything and the page reference end up leaking.
    
    Commit 7b2c99d15559 (new helper: iov_iter_get_pages()) in 3.16 had eliminated
    the loop by iovec array, along with sdio.head and sdio.tail resets.  Backporting
    that is too much work - the minimal fix is simply to make sure that the only case
    when do_direct_IO() buggers off early without returning non-zero will not skip
    dio_cleanup().
    
    The fix applies to all versions from 2.5.62 to 3.15.
    
    Reported-and-tested-by: Venki Pallipadi <venki@cohesity.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 7c11e178a64d4ec02212cdfed6762a228734b35a
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Tue Oct 25 09:51:14 2016 -0500

    mm/page_alloc: Remove kernel address exposure in free_reserved_area()
    
    commit adb1fe9ae2ee6ef6bc10f3d5a588020e7664dfa7 upstream.
    
    Linus suggested we try to remove some of the low-hanging fruit related
    to kernel address exposure in dmesg.  The only leaks I see on my local
    system are:
    
      Freeing SMP alternatives memory: 32K (ffffffff9e309000 - ffffffff9e311000)
      Freeing initrd memory: 10588K (ffffa0b736b42000 - ffffa0b737599000)
      Freeing unused kernel memory: 3592K (ffffffff9df87000 - ffffffff9e309000)
      Freeing unused kernel memory: 1352K (ffffa0b7288ae000 - ffffa0b728a00000)
      Freeing unused kernel memory: 632K (ffffa0b728d62000 - ffffa0b728e00000)
    
    Linus says:
    
      "I suspect we should just remove [the addresses in the 'Freeing'
       messages]. I'm sure they are useful in theory, but I suspect they
       were more useful back when the whole "free init memory" was
       originally done.
    
       These days, if we have a use-after-free, I suspect the init-mem
       situation is the easiest situation by far. Compared to all the dynamic
       allocations which are much more likely to show it anyway. So having
       debug output for that case is likely not all that productive."
    
    With this patch the freeing messages now look like this:
    
      Freeing SMP alternatives memory: 32K
      Freeing initrd memory: 10588K
      Freeing unused kernel memory: 3592K
      Freeing unused kernel memory: 1352K
      Freeing unused kernel memory: 632K
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mm@kvack.org
    Link: http://lkml.kernel.org/r/6836ff90c45b71d38e5d4405aec56fa9e5d1d4b2.1477405374.git.jpoimboe@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 01c577c922f9ad4ec15553d0acd0e94952ab1fed
Author: Neal Cardwell <ncardwell@google.com>
Date:   Wed Jul 26 21:43:27 2017 -0400

    tcp: fix xmit timer to only be reset if data ACKed/SACKed
    
    commit df92c8394e6ea0469e8056946ef8add740ab8046 upstream.
    
    Fix a TCP loss recovery performance bug raised recently on the netdev
    list, in two threads:
    
    (i)  July 26, 2017: netdev thread "TCP fast retransmit issues"
    (ii) July 26, 2017: netdev thread:
         "[PATCH V2 net-next] TLP: Don't reschedule PTO when there's one
         outstanding TLP retransmission"
    
    The basic problem is that incoming TCP packets that did not indicate
    forward progress could cause the xmit timer (TLP or RTO) to be rearmed
    and pushed back in time. In certain corner cases this could result in
    the following problems noted in these threads:
    
     - Repeated ACKs coming in with bogus SACKs corrupted by middleboxes
       could cause TCP to repeatedly schedule TLPs forever. We kept
       sending TLPs after every ~200ms, which elicited bogus SACKs, which
       caused more TLPs, ad infinitum; we never fired an RTO to fill in
       the holes.
    
     - Incoming data segments could, in some cases, cause us to reschedule
       our RTO or TLP timer further out in time, for no good reason. This
       could cause repeated inbound data to result in stalls in outbound
       data, in the presence of packet loss.
    
    This commit fixes these bugs by changing the TLP and RTO ACK
    processing to:
    
     (a) Only reschedule the xmit timer once per ACK.
    
     (b) Only reschedule the xmit timer if tcp_clean_rtx_queue() deems the
         ACK indicates sufficient forward progress (a packet was
         cumulatively ACKed, or we got a SACK for a packet that was sent
         before the most recent retransmit of the write queue head).
    
    This brings us back into closer compliance with the RFCs, since, as
    the comment for tcp_rearm_rto() notes, we should only restart the RTO
    timer after forward progress on the connection. Previously we were
    restarting the xmit timer even in these cases where there was no
    forward progress.
    
    As a side benefit, this commit simplifies and speeds up the TCP timer
    arming logic. We had been calling inet_csk_reset_xmit_timer() three
    times on normal ACKs that cumulatively acknowledged some data:
    
    1) Once near the top of tcp_ack() to switch from TLP timer to RTO:
            if (icsk->icsk_pending == ICSK_TIME_LOSS_PROBE)
                   tcp_rearm_rto(sk);
    
    2) Once in tcp_clean_rtx_queue(), to update the RTO:
            if (flag & FLAG_ACKED) {
                   tcp_rearm_rto(sk);
    
    3) Once in tcp_ack() after tcp_fastretrans_alert() to switch from RTO
       to TLP:
            if (icsk->icsk_pending == ICSK_TIME_RETRANS)
                   tcp_schedule_loss_probe(sk);
    
    This commit, by only rescheduling the xmit timer once per ACK,
    simplifies the code and reduces CPU overhead.
    
    This commit was tested in an A/B test with Google web server
    traffic. SNMP stats and request latency metrics were within noise
    levels, substantiating that for normal web traffic patterns this is a
    rare issue. This commit was also tested with packetdrill tests to
    verify that it fixes the timer behavior in the corner cases discussed
    in the netdev threads mentioned above.
    
    This patch is a bug fix patch intended to be queued for -stable
    relases.
    
    [This version of the commit was compiled and briefly tested
    based on top of v3.10.107.]
    
    Change-Id: If0417380fd59290b65cf04a415373aa13dd1dad7
    Fixes: 6ba8a3b19e76 ("tcp: Tail loss probe (TLP)")
    Reported-by: Klavs Klavsen <kl@vsen.dk>
    Reported-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Nandita Dukkipati <nanditad@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit aa923a7b8f795640fa307494881823f7712e96aa
Author: Neal Cardwell <ncardwell@google.com>
Date:   Thu Jul 27 10:09:30 2017 -0400

    tcp: enable xmit timer fix by having TLP use time when RTO should fire
    
    commit a2815817ffa68c7933a43eb55836d6e789bd4389 upstream.
    
    Have tcp_schedule_loss_probe() base the TLP scheduling decision based
    on when the RTO *should* fire. This is to enable the upcoming xmit
    timer fix in this series, where tcp_schedule_loss_probe() cannot
    assume that the last timer installed was an RTO timer (because we are
    no longer doing the "rearm RTO, rearm RTO, rearm TLP" dance on every
    ACK). So tcp_schedule_loss_probe() must independently figure out when
    an RTO would want to fire.
    
    In the new TLP implementation following in this series, we cannot
    assume that icsk_timeout was set based on an RTO; after processing a
    cumulative ACK the icsk_timeout we see can be from a previous TLP or
    RTO. So we need to independently recalculate the RTO time (instead of
    reading it out of icsk_timeout). Removing this dependency on the
    nature of icsk_timeout makes things a little easier to reason about
    anyway.
    
    Note that the old and new code should be equivalent, since they are
    both saying: "if the RTO is in the future, but at an earlier time than
    the normal TLP time, then set the TLP timer to fire when the RTO would
    have fired".
    
    [This version of the commit was compiled and briefly tested
    based on top of v3.10.107.]
    
    Change-Id: I597ad6446edde15bf2cea8e56d603a2c52f8221b
    Fixes: 6ba8a3b19e76 ("tcp: Tail loss probe (TLP)")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Nandita Dukkipati <nanditad@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 42a858e036bb26cb559157393b7890cabe70bfc2
Author: Neal Cardwell <ncardwell@google.com>
Date:   Thu Jul 27 10:01:20 2017 -0400

    tcp: introduce tcp_rto_delta_us() helper for xmit timer fix
    
    commit e1a10ef7fa876f8510aaec36ea5c0cf34baba410 upstream.
    
    Pure refactor. This helper will be required in the xmit timer fix
    later in the patch series. (Because the TLP logic will want to make
    this calculation.)
    
    [This version of the commit was compiled and briefly tested
    based on top of v3.10.107.]
    
    Change-Id: I1ccfba0b00465454bf5ce22e6fef5f7b5dd94d15
    Fixes: 6ba8a3b19e76 ("tcp: Tail loss probe (TLP)")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Nandita Dukkipati <nanditad@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ecce864b83040205ad7b7b1d44c73ad51f316914
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Dec 19 06:20:58 2014 +0000

    Bluetooth: cmtp: cmtp_add_connection() should verify that it's dealing with l2cap socket
    
    commit 96c26653ce65bf84f3212f8b00d4316c1efcbf4c upstream.
    
    ... rather than relying on ciptool(8) never passing it anything else.  Give
    it e.g. an AF_UNIX connected socket (from socketpair(2)) and it'll oops,
    trying to evaluate &l2cap_pi(sock->sk)->chan->dst...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit b8d57eb2f414876510ffffa88105a9d4f350f575
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Dec 19 06:20:59 2014 +0000

    Bluetooth: bnep: bnep_add_connection() should verify that it's dealing with l2cap socket
    
    commit 71bb99a02b32b4cc4265118e85f6035ca72923f0 upstream.
    
    same story as cmtp
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 69ddef7b41fdad8123a9a4a6eb2a1aa57aafc92b
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu Aug 10 12:29:19 2017 -0400

    udp: consistently apply ufo or fragmentation
    
    commit 85f1bd9a7b5a79d5baa8bf44af19658f7bf77bfa upstream.
    
    When iteratively building a UDP datagram with MSG_MORE and that
    datagram exceeds MTU, consistently choose UFO or fragmentation.
    
    Once skb_is_gso, always apply ufo. Conversely, once a datagram is
    split across multiple skbs, do not consider ufo.
    
    Sendpage already maintains the first invariant, only add the second.
    IPv6 does not have a sendpage implementation to modify.
    
    A gso skb must have a partial checksum, do not follow sk_no_check_tx
    in udp_send_skb.
    
    Found by syzkaller.
    
    [gregkh - tweaks for 3.18 for ipv6, hopefully they are correct...]
    [wt: s/skb_is_gso/skb_has_frags for 3.10]
    
    Fixes: e89e9cf539a2 ("[IPv4/IPv6]: UFO Scatter-gather approach")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit b673e043f91c569cfe55241fa0b95c9007a9459b
Author: Cheah Kok Cheong <thrust73@gmail.com>
Date:   Thu Aug 3 13:14:41 2017 +0100

    Staging: comedi: comedi_fops: Avoid orphaned proc entry
    
    commit bf279ece37d2a3eaaa9813fcd7a1d8a81eb29c20 upstream.
    
    Move comedi_proc_init to the end to avoid orphaned proc entry
    if module loading failed.
    
    Signed-off-by: Cheah Kok Cheong <thrust73@gmail.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit bf98a1be38f65c5dfd27af5e7a04f50afa2cb088
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 3 14:29:42 2017 -0800

    net: skb_needs_check() accepts CHECKSUM_NONE for tx
    
    commit 6e7bc478c9a006c701c14476ec9d389a484b4864 upstream.
    
    My recent change missed fact that UFO would perform a complete
    UDP checksum before segmenting in frags.
    
    In this case skb->ip_summed is set to CHECKSUM_NONE.
    
    We need to add this valid case to skb_needs_check()
    
    Fixes: b2504a5dbef3 ("net: reduce skb_warn_bad_offload() noise")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 1bff8a2960fc6617cf10c5ac050958275aba6e58
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 31 10:20:32 2017 -0800

    net: reduce skb_warn_bad_offload() noise
    
    commit b2504a5dbef3305ef41988ad270b0e8ec289331c upstream.
    
    Dmitry reported warnings occurring in __skb_gso_segment() [1]
    
    All SKB_GSO_DODGY producers can allow user space to feed
    packets that trigger the current check.
    
    We could prevent them from doing so, rejecting packets, but
    this might add regressions to existing programs.
    
    It turns out our SKB_GSO_DODGY handlers properly set up checksum
    information that is needed anyway when packets needs to be segmented.
    
    By checking again skb_needs_check() after skb_mac_gso_segment(),
    we should remove these pesky warnings, at a very minor cost.
    
    With help from Willem de Bruijn
    
    [1]
    WARNING: CPU: 1 PID: 6768 at net/core/dev.c:2439 skb_warn_bad_offload+0x2af/0x390 net/core/dev.c:2434
    lo: caps=(0x000000a2803b7c69, 0x0000000000000000) len=138 data_len=0 gso_size=15883 gso_type=4 ip_summed=0
    Kernel panic - not syncing: panic_on_warn set ...
    
    CPU: 1 PID: 6768 Comm: syz-executor1 Not tainted 4.9.0 #5
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
     ffff8801c063ecd8 ffffffff82346bdf ffffffff00000001 1ffff100380c7d2e
     ffffed00380c7d26 0000000041b58ab3 ffffffff84b37e38 ffffffff823468f1
     ffffffff84820740 ffffffff84f289c0 dffffc0000000000 ffff8801c063ee20
    Call Trace:
     [<ffffffff82346bdf>] __dump_stack lib/dump_stack.c:15 [inline]
     [<ffffffff82346bdf>] dump_stack+0x2ee/0x3ef lib/dump_stack.c:51
     [<ffffffff81827e34>] panic+0x1fb/0x412 kernel/panic.c:179
     [<ffffffff8141f704>] __warn+0x1c4/0x1e0 kernel/panic.c:542
     [<ffffffff8141f7e5>] warn_slowpath_fmt+0xc5/0x100 kernel/panic.c:565
     [<ffffffff8356cbaf>] skb_warn_bad_offload+0x2af/0x390 net/core/dev.c:2434
     [<ffffffff83585cd2>] __skb_gso_segment+0x482/0x780 net/core/dev.c:2706
     [<ffffffff83586f19>] skb_gso_segment include/linux/netdevice.h:3985 [inline]
     [<ffffffff83586f19>] validate_xmit_skb+0x5c9/0xc20 net/core/dev.c:2969
     [<ffffffff835892bb>] __dev_queue_xmit+0xe6b/0x1e70 net/core/dev.c:3383
     [<ffffffff8358a2d7>] dev_queue_xmit+0x17/0x20 net/core/dev.c:3424
     [<ffffffff83ad161d>] packet_snd net/packet/af_packet.c:2930 [inline]
     [<ffffffff83ad161d>] packet_sendmsg+0x32ed/0x4d30 net/packet/af_packet.c:2955
     [<ffffffff834f0aaa>] sock_sendmsg_nosec net/socket.c:621 [inline]
     [<ffffffff834f0aaa>] sock_sendmsg+0xca/0x110 net/socket.c:631
     [<ffffffff834f329a>] ___sys_sendmsg+0x8fa/0x9f0 net/socket.c:1954
     [<ffffffff834f5e58>] __sys_sendmsg+0x138/0x300 net/socket.c:1988
     [<ffffffff834f604d>] SYSC_sendmsg net/socket.c:1999 [inline]
     [<ffffffff834f604d>] SyS_sendmsg+0x2d/0x50 net/socket.c:1995
     [<ffffffff84371941>] entry_SYSCALL_64_fastpath+0x1f/0xc2
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov  <dvyukov@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f0dce905083a69988d3d6f68a45e37dc9e815c7e
Author: Julian Anastasov <ja@ssi.bg>
Date:   Mon Jul 17 09:59:52 2017 +0300

    ipvs: SNAT packet replies only for NATed connections
    
    commit 3c5ab3f395d66a9e4e937fcfdf6ebc63894f028b upstream.
    
    We do not check if packet from real server is for NAT
    connection before performing SNAT. This causes problems
    for setups that use DR/TUN and allow local clients to
    access the real server directly, for example:
    
    - local client in director creates IPVS-DR/TUN connection
    CIP->VIP and the request packets are routed to RIP.
    Talks are finished but IPVS connection is not expired yet.
    
    - second local client creates non-IPVS connection CIP->RIP
    with same reply tuple RIP->CIP and when replies are received
    on LOCAL_IN we wrongly assign them for the first client
    connection because RIP->CIP matches the reply direction.
    As result, IPVS SNATs replies for non-IPVS connections.
    
    The problem is more visible to local UDP clients but in rare
    cases it can happen also for TCP or remote clients when the
    real server sends the reply traffic via the director.
    
    So, better to be more precise for the reply traffic.
    As replies are not expected for DR/TUN connections, better
    to not touch them.
    
    Reported-by: Nick Moriarty <nick.moriarty@york.ac.uk>
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
