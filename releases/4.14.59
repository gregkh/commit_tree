commit 53208e12faa5b8c6eac4eb1d23d6e3fae450fc5a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jul 28 07:55:45 2018 +0200

    Linux 4.14.59

commit e94f784fddd58418bf5d97a23cf331d04a1bf5b1
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jul 26 10:13:22 2018 +0200

    turn off -Wattribute-alias
    
    Starting with gcc-8.1, we get a warning about all system call definitions,
    which use an alias between functions with incompatible prototypes, e.g.:
    
    In file included from ../mm/process_vm_access.c:19:
    ../include/linux/syscalls.h:211:18: warning: 'sys_process_vm_readv' alias between functions of incompatible types 'long int(pid_t,  const struct iovec *, long unsigned int,  const struct iovec *, long unsigned int,  long unsigned int)' {aka 'long int(int,  const struct iovec *, long unsigned int,  const struct iovec *, long unsigned int,  long unsigned int)'} and 'long int(long int,  long int,  long int,  long int,  long int,  long int)' [-Wattribute-alias]
      asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__)) \
                      ^~~
    ../include/linux/syscalls.h:207:2: note: in expansion of macro '__SYSCALL_DEFINEx'
      __SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
      ^~~~~~~~~~~~~~~~~
    ../include/linux/syscalls.h:201:36: note: in expansion of macro 'SYSCALL_DEFINEx'
     #define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)
                                        ^~~~~~~~~~~~~~~
    ../mm/process_vm_access.c:300:1: note: in expansion of macro 'SYSCALL_DEFINE6'
     SYSCALL_DEFINE6(process_vm_readv, pid_t, pid, const struct iovec __user *, lvec,
     ^~~~~~~~~~~~~~~
    ../include/linux/syscalls.h:215:18: note: aliased declaration here
      asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__)) \
                      ^~~
    ../include/linux/syscalls.h:207:2: note: in expansion of macro '__SYSCALL_DEFINEx'
      __SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
      ^~~~~~~~~~~~~~~~~
    ../include/linux/syscalls.h:201:36: note: in expansion of macro 'SYSCALL_DEFINEx'
     #define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)
                                        ^~~~~~~~~~~~~~~
    ../mm/process_vm_access.c:300:1: note: in expansion of macro 'SYSCALL_DEFINE6'
     SYSCALL_DEFINE6(process_vm_readv, pid_t, pid, const struct iovec __user *, lvec,
    
    This is really noisy and does not indicate a real problem. In the latest
    mainline kernel, this was addressed by commit bee20031772a ("disable
    -Wattribute-alias warning for SYSCALL_DEFINEx()"), which seems too invasive
    to backport.
    
    This takes a much simpler approach and just disables the warning across the
    kernel.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08382d3a1be25a41d9d82b8bba9a26c9b2b22cf3
Author: Roman Fietze <roman.fietze@telemotive.de>
Date:   Wed Jul 11 15:36:14 2018 +0200

    can: m_can.c: fix setup of CCCR register: clear CCCR NISO bit before checking can.ctrlmode
    
    commit 393753b217f05474e714aea36c37501546ed1202 upstream.
    
    Inside m_can_chip_config(), when setting up the new value of the CCCR,
    the CCCR_NISO bit is not cleared like the others, CCCR_TEST, CCCR_MON,
    CCCR_BRSE and CCCR_FDOE, before checking the can.ctrlmode bits for
    CAN_CTRLMODE_FD_NON_ISO.
    
    This way once the controller was configured for CAN_CTRLMODE_FD_NON_ISO,
    this mode could never be cleared again.
    
    This fix is only relevant for controllers with version 3.1.x or 3.2.x.
    Older versions do not support NISO.
    
    Signed-off-by: Roman Fietze <roman.fietze@telemotive.de>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a55d3d73d45787b091b1fadf1b1c0c23613860c1
Author: Stephane Grosjean <s.grosjean@peak-system.com>
Date:   Thu Jun 21 15:23:31 2018 +0200

    can: peak_canfd: fix firmware < v3.3.0: limit allocation to 32-bit DMA addr only
    
    commit 5d4c94ed9f564224d7b37dbee13f7c5d4a8a01ac upstream.
    
    The DMA logic in firmwares < v3.3.0 embedded in the PCAN-PCIe FD cards
    family is not capable of handling a mix of 32-bit and 64-bit logical
    addresses. If the board is equipped with 2 or 4 CAN ports, then such a
    situation might lead to a PCIe Bus Error "Malformed TLP" packet
    as well as "irq xx: nobody cared" issue.
    
    This patch adds a workaround that requests only 32-bit DMA addresses
    when these might be allocated outside of the 4 GB area.
    
    This issue has been fixed in firmware v3.3.0 and next.
    
    Signed-off-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60454a9715df60af6f1538826a59b8e0b7d0156f
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Mon Feb 26 14:27:13 2018 +0200

    can: xilinx_can: fix RX overflow interrupt not being enabled
    
    commit 83997997252f5d3fc7f04abc24a89600c2b504ab upstream.
    
    RX overflow interrupt (RXOFLW) is disabled even though xcan_interrupt()
    processes it. This means that an RX overflow interrupt will only be
    processed when another interrupt gets asserted (e.g. for RX/TX).
    
    Fix that by enabling the RXOFLW interrupt.
    
    Fixes: b1201e44f50b ("can: xilinx CAN controller support")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19c756e01b094e06f025f4a1facd006932455875
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Mon Feb 26 14:39:59 2018 +0200

    can: xilinx_can: fix incorrect clear of non-processed interrupts
    
    commit 2f4f0f338cf453bfcdbcf089e177c16f35f023c8 upstream.
    
    xcan_interrupt() clears ERROR|RXOFLV|BSOFF|ARBLST interrupts if any of
    them is asserted. This does not take into account that some of them
    could have been asserted between interrupt status read and interrupt
    clear, therefore clearing them without handling them.
    
    Fix the code to only clear those interrupts that it knows are asserted
    and therefore going to be processed in xcan_err_interrupt().
    
    Fixes: b1201e44f50b ("can: xilinx CAN controller support")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 189c7890f33b21764289e05dde76a196ebf64587
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Thu Feb 23 14:50:03 2017 +0200

    can: xilinx_can: keep only 1-2 frames in TX FIFO to fix TX accounting
    
    commit 620050d9c2be15c47017ba95efe59e0832e99a56 upstream.
    
    The xilinx_can driver assumes that the TXOK interrupt only clears after
    it has been acknowledged as many times as there have been successfully
    sent frames.
    
    However, the documentation does not mention such behavior, instead
    saying just that the interrupt is cleared when the clear bit is set.
    
    Similarly, testing seems to also suggest that it is immediately cleared
    regardless of the amount of frames having been sent. Performing some
    heavy TX load and then going back to idle has the tx_head drifting
    further away from tx_tail over time, steadily reducing the amount of
    frames the driver keeps in the TX FIFO (but not to zero, as the TXOK
    interrupt always frees up space for 1 frame from the driver's
    perspective, so frames continue to be sent) and delaying the local echo
    frames.
    
    The TX FIFO tracking is also otherwise buggy as it does not account for
    TX FIFO being cleared after software resets, causing
      BUG!, TX FIFO full when queue awake!
    messages to be output.
    
    There does not seem to be any way to accurately track the state of the
    TX FIFO for local echo support while using the full TX FIFO.
    
    The Zynq version of the HW (but not the soft-AXI version) has watermark
    programming support and with it an additional TX-FIFO-empty interrupt
    bit.
    
    Modify the driver to only put 1 frame into TX FIFO at a time on soft-AXI
    and 2 frames at a time on Zynq. On Zynq the TXFEMP interrupt bit is used
    to detect whether 1 or 2 frames have been sent at interrupt processing
    time.
    
    Tested with the integrated CAN on Zynq-7000 SoC. The 1-frame-FIFO mode
    was also tested.
    
    An alternative way to solve this would be to drop local echo support but
    keep using the full TX FIFO.
    
    v2: Add FIFO space check before TX queue wake with locking to
    synchronize with queue stop. This avoids waking the queue when xmit()
    had just filled it.
    
    v3: Keep local echo support and reduce the amount of frames in FIFO
    instead as suggested by Marc Kleine-Budde.
    
    Fixes: b1201e44f50b ("can: xilinx CAN controller support")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96bf3257c86655b7f6bac8566d916f25cd3aa946
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Tue Feb 7 13:23:04 2017 +0200

    can: xilinx_can: fix device dropping off bus on RX overrun
    
    commit 2574fe54515ed3487405de329e4e9f13d7098c10 upstream.
    
    The xilinx_can driver performs a software reset when an RX overrun is
    detected. This causes the device to enter Configuration mode where no
    messages are received or transmitted.
    
    The documentation does not mention any need to perform a reset on an RX
    overrun, and testing by inducing an RX overflow also indicated that the
    device continues to work just fine without a reset.
    
    Remove the software reset.
    
    Tested with the integrated CAN on Zynq-7000 SoC.
    
    Fixes: b1201e44f50b ("can: xilinx CAN controller support")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5846b2fd57b593180210f74d2f5e937f9e421cc
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Wed Feb 8 13:13:40 2017 +0200

    can: xilinx_can: fix recovery from error states not being propagated
    
    commit 877e0b75947e2c7acf5624331bb17ceb093c98ae upstream.
    
    The xilinx_can driver contains no mechanism for propagating recovery
    from CAN_STATE_ERROR_WARNING and CAN_STATE_ERROR_PASSIVE.
    
    Add such a mechanism by factoring the handling of
    XCAN_STATE_ERROR_PASSIVE and XCAN_STATE_ERROR_WARNING out of
    xcan_err_interrupt and checking for recovery after RX and TX if the
    interface is in one of those states.
    
    Tested with the integrated CAN on Zynq-7000 SoC.
    
    Fixes: b1201e44f50b ("can: xilinx CAN controller support")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f820de2a08b65bbe84372108c1975737f0d5d044
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Thu May 17 15:41:19 2018 +0300

    can: xilinx_can: fix power management handling
    
    commit 8ebd83bdb027f29870d96649dba18b91581ea829 upstream.
    
    There are several issues with the suspend/resume handling code of the
    driver:
    
    - The device is attached and detached in the runtime_suspend() and
      runtime_resume() callbacks if the interface is running. However,
      during xcan_chip_start() the interface is considered running,
      causing the resume handler to incorrectly call netif_start_queue()
      at the beginning of xcan_chip_start(), and on xcan_chip_start() error
      return the suspend handler detaches the device leaving the user
      unable to bring-up the device anymore.
    
    - The device is not brought properly up on system resume. A reset is
      done and the code tries to determine the bus state after that.
      However, after reset the device is always in Configuration mode
      (down), so the state checking code does not make sense and
      communication will also not work.
    
    - The suspend callback tries to set the device to sleep mode (low-power
      mode which monitors the bus and brings the device back to normal mode
      on activity), but then immediately disables the clocks (possibly
      before the device reaches the sleep mode), which does not make sense
      to me. If a clean shutdown is wanted before disabling clocks, we can
      just bring it down completely instead of only sleep mode.
    
    Reorganize the PM code so that only the clock logic remains in the
    runtime PM callbacks and the system PM callbacks contain the device
    bring-up/down logic. This makes calling the runtime PM callbacks during
    e.g. xcan_chip_start() safe.
    
    The system PM callbacks now simply call common code to start/stop the
    HW if the interface was running, replacing the broken code from before.
    
    xcan_chip_stop() is updated to use the common reset code so that it will
    wait for the reset to complete. Reset also disables all interrupts so do
    not do that separately.
    
    Also, the device_may_wakeup() checks are removed as the driver does not
    have wakeup support.
    
    Tested on Zynq-7000 integrated CAN.
    
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 464a3f9139f4ebea238f15db83705eac9561d2bc
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Tue Feb 7 17:01:14 2017 +0200

    can: xilinx_can: fix RX loop if RXNEMP is asserted without RXOK
    
    commit 32852c561bffd613d4ed7ec464b1e03e1b7b6c5c upstream.
    
    If the device gets into a state where RXNEMP (RX FIFO not empty)
    interrupt is asserted without RXOK (new frame received successfully)
    interrupt being asserted, xcan_rx_poll() will continue to try to clear
    RXNEMP without actually reading frames from RX FIFO. If the RX FIFO is
    not empty, the interrupt will not be cleared and napi_schedule() will
    just be called again.
    
    This situation can occur when:
    
    (a) xcan_rx() returns without reading RX FIFO due to an error condition.
    The code tries to clear both RXOK and RXNEMP but RXNEMP will not clear
    due to a frame still being in the FIFO. The frame will never be read
    from the FIFO as RXOK is no longer set.
    
    (b) A frame is received between xcan_rx_poll() reading interrupt status
    and clearing RXOK. RXOK will be cleared, but RXNEMP will again remain
    set as the new message is still in the FIFO.
    
    I'm able to trigger case (b) by flooding the bus with frames under load.
    
    There does not seem to be any benefit in using both RXNEMP and RXOK in
    the way the driver does, and the polling example in the reference manual
    (UG585 v1.10 18.3.7 Read Messages from RxFIFO) also says that either
    RXOK or RXNEMP can be used for detecting incoming messages.
    
    Fix the issue and simplify the RX processing by only using RXNEMP
    without RXOK.
    
    Tested with the integrated CAN on Zynq-7000 SoC.
    
    Fixes: b1201e44f50b ("can: xilinx CAN controller support")
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55cb8f40c8d7ee1adb1575257cf739be26561e9e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Jul 10 14:51:33 2018 +0200

    driver core: Partially revert "driver core: correct device's shutdown order"
    
    commit 722e5f2b1eec7de61117b7c0a7914761e3da2eda upstream.
    
    Commit 52cdbdd49853 (driver core: correct device's shutdown order)
    introduced a regression by breaking device shutdown on some systems.
    
    Namely, the devices_kset_move_last() call in really_probe() added by
    that commit is a mistake as it may cause parents to follow children
    in the devices_kset list which then causes shutdown to fail.  For
    example, if a device has children before really_probe() is called
    for it (which is not uncommon), that call will cause it to be
    reordered after the children in the devices_kset list and the
    ordering of that list will not reflect the correct device shutdown
    order any more.
    
    Also it causes the devices_kset list to be constantly reordered
    until all drivers have been probed which is totally pointless
    overhead in the majority of cases and it only covered an issue
    with system shutdown, while system-wide suspend/resume potentially
    had the same issue on the affected platforms (which was not covered).
    
    Moreover, the shutdown issue originally addressed by the change in
    really_probe() made by commit 52cdbdd49853 is not present in 4.18-rc
    any more, since dra7 started to use the sdhci-omap driver which
    doesn't disable any regulators during shutdown, so the really_probe()
    part of commit 52cdbdd49853 can be safely reverted.  [The original
    issue was related to the omap_hsmmc driver used by dra7 previously.]
    
    For the above reasons, revert the really_probe() modifications made
    by commit 52cdbdd49853.
    
    The other code changes made by commit 52cdbdd49853 are useful and
    they need not be reverted.
    
    Fixes: 52cdbdd49853 (driver core: correct device's shutdown order)
    Link: https://lore.kernel.org/lkml/CAFgQCTt7VfqM=UyCnvNFxrSw8Z6cUtAi3HUwR4_xPAc03SgHjQ@mail.gmail.com/
    Reported-by: Pingfan Liu <kernelfans@gmail.com>
    Tested-by: Pingfan Liu <kernelfans@gmail.com>
    Reviewed-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5421694d8cd76e258a3aa2923794f772f2e6a4de
Author: Jerry Zhang <zhangjerry@google.com>
Date:   Mon Jul 2 12:48:08 2018 -0700

    usb: gadget: f_fs: Only return delayed status when len is 0
    
    commit 4d644abf25698362bd33d17c9ddc8f7122c30f17 upstream.
    
    Commit 1b9ba000 ("Allow function drivers to pause control
    transfers") states that USB_GADGET_DELAYED_STATUS is only
    supported if data phase is 0 bytes.
    
    It seems that when the length is not 0 bytes, there is no
    need to explicitly delay the data stage since the transfer
    is not completed until the user responds. However, when the
    length is 0, there is no data stage and the transfer is
    finished once setup() returns, hence there is a need to
    explicitly delay completion.
    
    This manifests as the following bugs:
    
    Prior to 946ef68ad4e4 ('Let setup() return
    USB_GADGET_DELAYED_STATUS'), when setup is 0 bytes, ffs
    would require user to queue a 0 byte request in order to
    clear setup state. However, that 0 byte request was actually
    not needed and would hang and cause errors in other setup
    requests.
    
    After the above commit, 0 byte setups work since the gadget
    now accepts empty queues to ep0 to clear the delay, but all
    other setups hang.
    
    Fixes: 946ef68ad4e4 ("Let setup() return USB_GADGET_DELAYED_STATUS")
    Signed-off-by: Jerry Zhang <zhangjerry@google.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68fc92a0f3913d539d1ac68a861f895e34099e46
Author: Antti Seppälä <a.seppala@gmail.com>
Date:   Thu Jul 5 17:31:53 2018 +0300

    usb: dwc2: Fix DMA alignment to start at allocated boundary
    
    commit 56406e017a883b54b339207b230f85599f4d70ae upstream.
    
    The commit 3bc04e28a030 ("usb: dwc2: host: Get aligned DMA in a more
    supported way") introduced a common way to align DMA allocations.
    The code in the commit aligns the struct dma_aligned_buffer but the
    actual DMA address pointed by data[0] gets aligned to an offset from
    the allocated boundary by the kmalloc_ptr and the old_xfer_buffer
    pointers.
    
    This is against the recommendation in Documentation/DMA-API.txt which
    states:
    
      Therefore, it is recommended that driver writers who don't take
      special care to determine the cache line size at run time only map
      virtual regions that begin and end on page boundaries (which are
      guaranteed also to be cache line boundaries).
    
    The effect of this is that architectures with non-coherent DMA caches
    may run into memory corruption or kernel crashes with Unhandled
    kernel unaligned accesses exceptions.
    
    Fix the alignment by positioning the DMA area in front of the allocation
    and use memory at the end of the area for storing the orginal
    transfer_buffer pointer. This may have the added benefit of increased
    performance as the DMA area is now fully aligned on all architectures.
    
    Tested with Lantiq xRX200 (MIPS) and RPi Model B Rev 2 (ARM).
    
    Fixes: 3bc04e28a030 ("usb: dwc2: host: Get aligned DMA in a more supported way")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Antti Seppälä <a.seppala@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac3f65c6b6351b729be072debc44cd28a22e0d0e
Author: Bin Liu <b-liu@ti.com>
Date:   Thu Jul 19 14:39:37 2018 -0500

    usb: core: handle hub C_PORT_OVER_CURRENT condition
    
    commit 249a32b7eeb3edb6897dd38f89651a62163ac4ed upstream.
    
    Based on USB2.0 Spec Section 11.12.5,
    
      "If a hub has per-port power switching and per-port current limiting,
      an over-current on one port may still cause the power on another port
      to fall below specific minimums. In this case, the affected port is
      placed in the Power-Off state and C_PORT_OVER_CURRENT is set for the
      port, but PORT_OVER_CURRENT is not set."
    
    so let's check C_PORT_OVER_CURRENT too for over current condition.
    
    Fixes: 08d1dec6f405 ("usb:hub set hub->change_bits when over-current happens")
    Cc: <stable@vger.kernel.org>
    Tested-by: Alessandro Antenucci <antenucci@korg.it>
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e089c305af4903793dae85dc9d9b706e0d17bfb3
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Tue Jul 10 08:28:49 2018 +0200

    usb: cdc_acm: Add quirk for Castles VEGA3000
    
    commit 1445cbe476fc3dd09c0b380b206526a49403c071 upstream.
    
    The device (a POS terminal) implements CDC ACM, but has not union
    descriptor.
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab9489c4db894cc60f30430f80464eec8ccdf066
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Fri Jul 13 00:29:36 2018 +0200

    staging: speakup: fix wraparound in uaccess length check
    
    commit b96fba8d5855c3617adbfb43ca4723a808cac954 upstream.
    
    If softsynthx_read() is called with `count < 3`, `count - 3` wraps, causing
    the loop to copy as much data as available to the provided buffer. If
    softsynthx_read() is invoked through sys_splice(), this causes an
    unbounded kernel write; but even when userspace just reads from it
    normally, a small size could cause userspace crashes.
    
    Fixes: 425e586cf95b ("speakup: add unicode variant of /dev/softsynth")
    Cc: stable@vger.kernel.org
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22e3d3178b18115ba60cae7c968a67718f070da0
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 23 09:28:21 2018 -0700

    tcp: add tcp_ooo_try_coalesce() helper
    
    [ Upstream commit 58152ecbbcc6a0ce7fddd5bf5f6ee535834ece0c ]
    
    In case skb in out_or_order_queue is the result of
    multiple skbs coalescing, we would like to get a proper gso_segs
    counter tracking, so that future tcp_drop() can report an accurate
    number.
    
    I chose to not implement this tracking for skbs in receive queue,
    since they are not dropped, unless socket is disconnected.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec645ae62309a85522c2bc8f700afc6e152e62b9
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 23 09:28:20 2018 -0700

    tcp: call tcp_drop() from tcp_data_queue_ofo()
    
    [ Upstream commit 8541b21e781a22dce52a74fef0b9bed00404a1cd ]
    
    In order to be able to give better diagnostics and detect
    malicious traffic, we need to have better sk->sk_drops tracking.
    
    Fixes: 9f5afeae5152 ("tcp: use an RB tree for ooo receive queue")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6285a74a536f1ee807488436547cc17cda3306d8
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 23 09:28:19 2018 -0700

    tcp: detect malicious patterns in tcp_collapse_ofo_queue()
    
    [ Upstream commit 3d4bf93ac12003f9b8e1e2de37fe27983deebdcf ]
    
    In case an attacker feeds tiny packets completely out of order,
    tcp_collapse_ofo_queue() might scan the whole rb-tree, performing
    expensive copies, but not changing socket memory usage at all.
    
    1) Do not attempt to collapse tiny skbs.
    2) Add logic to exit early when too many tiny skbs are detected.
    
    We prefer not doing aggressive collapsing (which copies packets)
    for pathological flows, and revert to tcp_prune_ofo_queue() which
    will be less expensive.
    
    In the future, we might add the possibility of terminating flows
    that are proven to be malicious.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81e6b01d1c10015811f52bf04ec125bdb291b4b5
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 23 09:28:18 2018 -0700

    tcp: avoid collapses in tcp_prune_queue() if possible
    
    [ Upstream commit f4a3313d8e2ca9fd8d8f45e40a2903ba782607e7 ]
    
    Right after a TCP flow is created, receiving tiny out of order
    packets allways hit the condition :
    
    if (atomic_read(&sk->sk_rmem_alloc) >= sk->sk_rcvbuf)
            tcp_clamp_window(sk);
    
    tcp_clamp_window() increases sk_rcvbuf to match sk_rmem_alloc
    (guarded by tcp_rmem[2])
    
    Calling tcp_collapse_ofo_queue() in this case is not useful,
    and offers a O(N^2) surface attack to malicious peers.
    
    Better not attempt anything before full queue capacity is reached,
    forcing attacker to spend lots of resource and allow us to more
    easily detect the abuse.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3a5ba6310e11df370f6888ed716d1486896d983
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jul 23 09:28:17 2018 -0700

    tcp: free batches of packets in tcp_prune_ofo_queue()
    
    [ Upstream commit 72cd43ba64fc172a443410ce01645895850844c8 ]
    
    Juha-Matti Tilli reported that malicious peers could inject tiny
    packets in out_of_order_queue, forcing very expensive calls
    to tcp_collapse_ofo_queue() and tcp_prune_ofo_queue() for
    every incoming packet. out_of_order_queue rb-tree can contain
    thousands of nodes, iterating over all of them is not nice.
    
    Before linux-4.9, we would have pruned all packets in ofo_queue
    in one go, every XXXX packets. XXXX depends on sk_rcvbuf and skbs
    truesize, but is about 7000 packets with tcp_rmem[2] default of 6 MB.
    
    Since we plan to increase tcp_rmem[2] in the future to cope with
    modern BDP, can not revert to the old behavior, without great pain.
    
    Strategy taken in this patch is to purge ~12.5 % of the queue capacity.
    
    Fixes: 36a6503fedda ("tcp: refine tcp_prune_ofo_queue() to not drop all packets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Juha-Matti Tilli <juha-matti.tilli@iki.fi>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae70b61531979a4caaed63be4f19b76fd58e7932
Author: Yuchung Cheng <ycheng@google.com>
Date:   Wed Jul 18 13:56:36 2018 -0700

    tcp: do not delay ACK in DCTCP upon CE status change
    
    [ Upstream commit a0496ef2c23b3b180902dd185d0d63ccbc624cf8 ]
    
    Per DCTCP RFC8257 (Section 3.2) the ACK reflecting the CE status change
    has to be sent immediately so the sender can respond quickly:
    
    """ When receiving packets, the CE codepoint MUST be processed as follows:
    
       1.  If the CE codepoint is set and DCTCP.CE is false, set DCTCP.CE to
           true and send an immediate ACK.
    
       2.  If the CE codepoint is not set and DCTCP.CE is true, set DCTCP.CE
           to false and send an immediate ACK.
    """
    
    Previously DCTCP implementation may continue to delay the ACK. This
    patch fixes that to implement the RFC by forcing an immediate ACK.
    
    Tested with this packetdrill script provided by Larry Brakmo
    
    0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
    0.000 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
    0.000 setsockopt(3, SOL_TCP, TCP_CONGESTION, "dctcp", 5) = 0
    0.000 bind(3, ..., ...) = 0
    0.000 listen(3, 1) = 0
    
    0.100 < [ect0] SEW 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
    0.100 > SE. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 8>
    0.110 < [ect0] . 1:1(0) ack 1 win 257
    0.200 accept(3, ..., ...) = 4
       +0 setsockopt(4, SOL_SOCKET, SO_DEBUG, [1], 4) = 0
    
    0.200 < [ect0] . 1:1001(1000) ack 1 win 257
    0.200 > [ect01] . 1:1(0) ack 1001
    
    0.200 write(4, ..., 1) = 1
    0.200 > [ect01] P. 1:2(1) ack 1001
    
    0.200 < [ect0] . 1001:2001(1000) ack 2 win 257
    +0.005 < [ce] . 2001:3001(1000) ack 2 win 257
    
    +0.000 > [ect01] . 2:2(0) ack 2001
    // Previously the ACK below would be delayed by 40ms
    +0.000 > [ect01] E. 2:2(0) ack 3001
    
    +0.500 < F. 9501:9501(0) ack 4 win 257
    
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78636179f6e69f71f2d16e8716c096f297be9356
Author: Yuchung Cheng <ycheng@google.com>
Date:   Wed Jul 18 13:56:35 2018 -0700

    tcp: do not cancel delay-AcK on DCTCP special ACK
    
    [ Upstream commit 27cde44a259c380a3c09066fc4b42de7dde9b1ad ]
    
    Currently when a DCTCP receiver delays an ACK and receive a
    data packet with a different CE mark from the previous one's, it
    sends two immediate ACKs acking previous and latest sequences
    respectly (for ECN accounting).
    
    Previously sending the first ACK may mark off the delayed ACK timer
    (tcp_event_ack_sent). This may subsequently prevent sending the
    second ACK to acknowledge the latest sequence (tcp_ack_snd_check).
    The culprit is that tcp_send_ack() assumes it always acknowleges
    the latest sequence, which is not true for the first special ACK.
    
    The fix is to not make the assumption in tcp_send_ack and check the
    actual ack sequence before cancelling the delayed ACK. Further it's
    safer to pass the ack sequence number as a local variable into
    tcp_send_ack routine, instead of intercepting tp->rcv_nxt to avoid
    future bugs like this.
    
    Reported-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7f24b36938367d6e97d43f7dd53f0c5714cce1a
Author: Yuchung Cheng <ycheng@google.com>
Date:   Wed Jul 18 13:56:34 2018 -0700

    tcp: helpers to send special DCTCP ack
    
    [ Upstream commit 2987babb6982306509380fc11b450227a844493b ]
    
    Refactor and create helpers to send the special ACK in DCTCP.
    
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68c9bdfc8b425671003e37b27a400e77d288a8fb
Author: Yuchung Cheng <ycheng@google.com>
Date:   Thu Jul 12 06:04:52 2018 -0700

    tcp: fix dctcp delayed ACK schedule
    
    [ Upstream commit b0c05d0e99d98d7f0cd41efc1eeec94efdc3325d ]
    
    Previously, when a data segment was sent an ACK was piggybacked
    on the data segment without generating a CA_EVENT_NON_DELAYED_ACK
    event to notify congestion control modules. So the DCTCP
    ca->delayed_ack_reserved flag could incorrectly stay set when
    in fact there were no delayed ACKs being reserved. This could result
    in sending a special ECN notification ACK that carries an older
    ACK sequence, when in fact there was no need for such an ACK.
    DCTCP keeps track of the delayed ACK status with its own separate
    state ca->delayed_ack_reserved. Previously it may accidentally cancel
    the delayed ACK without updating this field upon sending a special
    ACK that carries a older ACK sequence. This inconsistency would
    lead to DCTCP receiver never acknowledging the latest data until the
    sender times out and retry in some cases.
    
    Packetdrill script (provided by Larry Brakmo)
    
    0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
    0.000 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
    0.000 setsockopt(3, SOL_TCP, TCP_CONGESTION, "dctcp", 5) = 0
    0.000 bind(3, ..., ...) = 0
    0.000 listen(3, 1) = 0
    
    0.100 < [ect0] SEW 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
    0.100 > SE. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 8>
    0.110 < [ect0] . 1:1(0) ack 1 win 257
    0.200 accept(3, ..., ...) = 4
    
    0.200 < [ect0] . 1:1001(1000) ack 1 win 257
    0.200 > [ect01] . 1:1(0) ack 1001
    
    0.200 write(4, ..., 1) = 1
    0.200 > [ect01] P. 1:2(1) ack 1001
    
    0.200 < [ect0] . 1001:2001(1000) ack 2 win 257
    0.200 write(4, ..., 1) = 1
    0.200 > [ect01] P. 2:3(1) ack 2001
    
    0.200 < [ect0] . 2001:3001(1000) ack 3 win 257
    0.200 < [ect0] . 3001:4001(1000) ack 3 win 257
    0.200 > [ect01] . 3:3(0) ack 4001
    
    0.210 < [ce] P. 4001:4501(500) ack 3 win 257
    
    +0.001 read(4, ..., 4500) = 4500
    +0 write(4, ..., 1) = 1
    +0 > [ect01] PE. 3:4(1) ack 4501
    
    +0.010 < [ect0] W. 4501:5501(1000) ack 4 win 257
    // Previously the ACK sequence below would be 4501, causing a long RTO
    +0.040~+0.045 > [ect01] . 4:4(0) ack 5501   // delayed ack
    
    +0.311 < [ect0] . 5501:6501(1000) ack 4 win 257  // More data
    +0 > [ect01] . 4:4(0) ack 6501     // now acks everything
    
    +0.500 < F. 9501:9501(0) ack 4 win 257
    
    Reported-by: Larry Brakmo <brakmo@fb.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Lawrence Brakmo <brakmo@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68974d0b9c8662744afdad22dbcb7d93b29a7b94
Author: Roopa Prabhu <roopa@cumulusnetworks.com>
Date:   Fri Jul 20 13:21:04 2018 -0700

    vxlan: fix default fdb entry netlink notify ordering during netdev create
    
    [ Upstream commit e99465b952861533d9ba748fdbecc96d9a36da3e ]
    
    Problem:
    In vxlan_newlink, a default fdb entry is added before register_netdev.
    The default fdb creation function also notifies user-space of the
    fdb entry on the vxlan device which user-space does not know about yet.
    (RTM_NEWNEIGH goes before RTM_NEWLINK for the same ifindex).
    
    This patch fixes the user-space netlink notification ordering issue
    with the following changes:
    - decouple fdb notify from fdb create.
    - Move fdb notify after register_netdev.
    - Call rtnl_configure_link in vxlan newlink handler to notify
    userspace about the newlink before fdb notify and
    hence avoiding the user-space race.
    
    Fixes: afbd8bae9c79 ("vxlan: add implicit fdb entry for default destination")
    Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb0335aacfddee9b7d06a1e2fdca0b62140c791c
Author: Roopa Prabhu <roopa@cumulusnetworks.com>
Date:   Fri Jul 20 13:21:03 2018 -0700

    vxlan: make netlink notify in vxlan_fdb_destroy optional
    
    [ Upstream commit f6e053858671bb156b6e44ad66418acc8c7f4e77 ]
    
    Add a new option do_notify to vxlan_fdb_destroy to make
    sending netlink notify optional. Used by a later patch.
    
    Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c345a5292587b29a99d30074fbb1759bccc43b5
Author: Roopa Prabhu <roopa@cumulusnetworks.com>
Date:   Fri Jul 20 13:21:02 2018 -0700

    vxlan: add new fdb alloc and create helpers
    
    [ Upstream commit 7431016b107c95cb5b2014aa1901fcb115f746bc ]
    
    - Add new vxlan_fdb_alloc helper
    - rename existing vxlan_fdb_create into vxlan_fdb_update:
            because it really creates or updates an existing
            fdb entry
    - move new fdb creation into a separate vxlan_fdb_create
    
    Main motivation for this change is to introduce the ability
    to decouple vxlan fdb creation and notify, used in a later patch.
    
    Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23557c5d34b96e1129c8567a26764faa587dd659
Author: Roopa Prabhu <roopa@cumulusnetworks.com>
Date:   Fri Jul 20 13:21:01 2018 -0700

    rtnetlink: add rtnl_link_state check in rtnl_configure_link
    
    [ Upstream commit 5025f7f7d506fba9b39e7fe8ca10f6f34cb9bc2d ]
    
    rtnl_configure_link sets dev->rtnl_link_state to
    RTNL_LINK_INITIALIZED and unconditionally calls
    __dev_notify_flags to notify user-space of dev flags.
    
    current call sequence for rtnl_configure_link
    rtnetlink_newlink
        rtnl_link_ops->newlink
        rtnl_configure_link (unconditionally notifies userspace of
                             default and new dev flags)
    
    If a newlink handler wants to call rtnl_configure_link
    early, we will end up with duplicate notifications to
    user-space.
    
    This patch fixes rtnl_configure_link to check rtnl_link_state
    and call __dev_notify_flags with gchanges = 0 if already
    RTNL_LINK_INITIALIZED.
    
    Later in the series, this patch will help the following sequence
    where a driver implementing newlink can call rtnl_configure_link
    to initialize the link early.
    
    makes the following call sequence work:
    rtnetlink_newlink
        rtnl_link_ops->newlink (vxlan) -> rtnl_configure_link (initializes
                                                    link and notifies
                                                    user-space of default
                                                    dev flags)
        rtnl_configure_link (updates dev flags if requested by user ifm
                             and notifies user-space of new dev flags)
    
    Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 464e2326a7f5cd39d82f96750bb56a9d302edf8d
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Jul 23 22:37:54 2018 +0200

    sock: fix sg page frag coalescing in sk_alloc_sg
    
    [ Upstream commit 144fe2bfd236dc814eae587aea7e2af03dbdd755 ]
    
    Current sg coalescing logic in sk_alloc_sg() (latter is used by tls and
    sockmap) is not quite correct in that we do fetch the previous sg entry,
    however the subsequent check whether the refilled page frag from the
    socket is still the same as from the last entry with prior offset and
    length matching the start of the current buffer is comparing always the
    first sg list entry instead of the prior one.
    
    Fixes: 3c4d7559159b ("tls: kernel TLS support")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Dave Watson <davejwatson@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50b464d33964282fb09be7d6d8a6063475f63814
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Jul 19 08:15:16 2018 +0200

    net: phy: consider PHY_IGNORE_INTERRUPT in phy_start_aneg_priv
    
    [ Upstream commit 215d08a85b9acf5e1fe9dbf50f1774cde333efef ]
    
    The situation described in the comment can occur also with
    PHY_IGNORE_INTERRUPT, therefore change the condition to include it.
    
    Fixes: f555f34fdc58 ("net: phy: fix auto-negotiation stall due to unavailable interrupt")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46f9e1d0bd4e52cd4fefcc6a7a28066f877857af
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Jul 20 14:04:27 2018 +0800

    multicast: do not restore deleted record source filter mode to new one
    
    There are two scenarios that we will restore deleted records. The first is
    when device down and up(or unmap/remap). In this scenario the new filter
    mode is same with previous one. Because we get it from in_dev->mc_list and
    we do not touch it during device down and up.
    
    The other scenario is when a new socket join a group which was just delete
    and not finish sending status reports. In this scenario, we should use the
    current filter mode instead of restore old one. Here are 4 cases in total.
    
    old_socket        new_socket       before_fix       after_fix
      IN(A)             IN(A)           ALLOW(A)         ALLOW(A)
      IN(A)             EX( )           TO_IN( )         TO_EX( )
      EX( )             IN(A)           TO_EX( )         ALLOW(A)
      EX( )             EX( )           TO_EX( )         TO_EX( )
    
    Fixes: 24803f38a5c0b (igmp: do not remove igmp souce list info when set link down)
    Fixes: 1666d49e1d416 (mld: do not remove mld souce list info when set link down)
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d5b7d68f45b1208493385a8490b65ff38c4fafe
Author: David Ahern <dsahern@gmail.com>
Date:   Thu Jul 19 12:41:18 2018 -0700

    net/ipv6: Fix linklocal to global address with VRF
    
    [ Upstream commit 24b711edfc34bc45777a3f068812b7d1ed004a5d ]
    
    Example setup:
        host: ip -6 addr add dev eth1 2001:db8:104::4
               where eth1 is enslaved to a VRF
    
        switch: ip -6 ro add 2001:db8:104::4/128 dev br1
                where br1 only has an LLA
    
               ping6 2001:db8:104::4
               ssh   2001:db8:104::4
    
    (NOTE: UDP works fine if the PKTINFO has the address set to the global
    address and ifindex is set to the index of eth1 with a destination an
    LLA).
    
    For ICMP, icmp6_iif needs to be updated to check if skb->dev is an
    L3 master. If it is then return the ifindex from rt6i_idev similar
    to what is done for loopback.
    
    For TCP, restore the original tcp_v6_iif definition which is needed in
    most places and add a new tcp_v6_iif_l3_slave that considers the
    l3_slave variability. This latter check is only needed for socket
    lookups.
    
    Fixes: 9ff74384600a ("net: vrf: Handle ipv6 multicast and link-local addresses")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 047af2d8ced33f16815e3650bfd5e6c732229634
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Sun Jul 8 13:08:55 2018 +0300

    net/mlx5e: Fix quota counting in aRFS expire flow
    
    [ Upstream commit 2630bae8018823c3b88788b69fb9f16ea3b4a11e ]
    
    Quota should follow the amount of rules which do expire, and not the
    number of rules that were examined, fixed that.
    
    Fixes: 18c908e477dc ("net/mlx5e: Add accelerated RFS support")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c83cd44202b503269388347a959017ebb6573963
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Sun Jul 8 14:52:12 2018 +0300

    net/mlx5e: Don't allow aRFS for encapsulated packets
    
    [ Upstream commit d2e1c57bcf9a07cbb67f30ecf238f298799bce1c ]
    
    Driver is yet to support aRFS for encapsulated packets, return early
    error in such case.
    
    Fixes: 18c908e477dc ("net/mlx5e: Add accelerated RFS support")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 291d99ac4dc273b64b7d98b98f494e18da716744
Author: Ariel Levkovich <lariel@mellanox.com>
Date:   Mon Jun 25 19:12:02 2018 +0300

    net/mlx5: Adjust clock overflow work period
    
    [ Upstream commit 33180bee86a8940a84950edca46315cd9dd6deb5 ]
    
    When driver converts HW timestamp to wall clock time it subtracts
    the last saved cycle counter from the HW timestamp and converts the
    difference to nanoseconds.
    The conversion is done by multiplying the cycles difference with the
    clock multiplier value as a first step and therefore the cycles
    difference should be small enough so that the multiplication product
    doesn't exceed 64bit.
    
    The overflow handling routine is in charge of updating the last saved
    cycle counter in driver and it is called periodically using kernel
    delayed workqueue.
    
    The delay period for this work is calculated using the max HW cycle
    counter value (a 41 bit mask) as a base which doesn't take the 64bit
    limit into account so the delay period may be incorrect and too
    long to prevent a large difference between the HW counter and the last
    saved counter in SW.
    
    This change adjusts the work period for the HW clock overflow work by
    taking the minimum between the previous value and the quotient of max
    u64 value and the clock multiplier value.
    
    Fixes: ef9814deafd0 ("net/mlx5e: Add HW timestamping (TS) support")
    Signed-off-by: Ariel Levkovich <lariel@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f208fbad98fde951c9783194e83ecfe004327b33
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jul 19 16:04:38 2018 -0700

    net: skb_segment() should not return NULL
    
    [ Upstream commit ff907a11a0d68a749ce1a321f4505c03bf72190c ]
    
    syzbot caught a NULL deref [1], caused by skb_segment()
    
    skb_segment() has many "goto err;" that assume the @err variable
    contains -ENOMEM.
    
    A successful call to __skb_linearize() should not clear @err,
    otherwise a subsequent memory allocation error could return NULL.
    
    While we are at it, we might use -EINVAL instead of -ENOMEM when
    MAX_SKB_FRAGS limit is reached.
    
    [1]
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 13285 Comm: syz-executor3 Not tainted 4.18.0-rc4+ #146
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:tcp_gso_segment+0x3dc/0x1780 net/ipv4/tcp_offload.c:106
    Code: f0 ff ff 0f 87 1c fd ff ff e8 00 88 0b fb 48 8b 75 d0 48 b9 00 00 00 00 00 fc ff df 48 8d be 90 00 00 00 48 89 f8 48 c1 e8 03 <0f> b6 14 08 48 8d 86 94 00 00 00 48 89 c6 83 e0 07 48 c1 ee 03 0f
    RSP: 0018:ffff88019b7fd060 EFLAGS: 00010206
    RAX: 0000000000000012 RBX: 0000000000000020 RCX: dffffc0000000000
    RDX: 0000000000040000 RSI: 0000000000000000 RDI: 0000000000000090
    RBP: ffff88019b7fd0f0 R08: ffff88019510e0c0 R09: ffffed003b5c46d6
    R10: ffffed003b5c46d6 R11: ffff8801dae236b3 R12: 0000000000000001
    R13: ffff8801d6c581f4 R14: 0000000000000000 R15: ffff8801d6c58128
    FS:  00007fcae64d6700(0000) GS:ffff8801dae00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000004e8664 CR3: 00000001b669b000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     tcp4_gso_segment+0x1c3/0x440 net/ipv4/tcp_offload.c:54
     inet_gso_segment+0x64e/0x12d0 net/ipv4/af_inet.c:1342
     inet_gso_segment+0x64e/0x12d0 net/ipv4/af_inet.c:1342
     skb_mac_gso_segment+0x3b5/0x740 net/core/dev.c:2792
     __skb_gso_segment+0x3c3/0x880 net/core/dev.c:2865
     skb_gso_segment include/linux/netdevice.h:4099 [inline]
     validate_xmit_skb+0x640/0xf30 net/core/dev.c:3104
     __dev_queue_xmit+0xc14/0x3910 net/core/dev.c:3561
     dev_queue_xmit+0x17/0x20 net/core/dev.c:3602
     neigh_hh_output include/net/neighbour.h:473 [inline]
     neigh_output include/net/neighbour.h:481 [inline]
     ip_finish_output2+0x1063/0x1860 net/ipv4/ip_output.c:229
     ip_finish_output+0x841/0xfa0 net/ipv4/ip_output.c:317
     NF_HOOK_COND include/linux/netfilter.h:276 [inline]
     ip_output+0x223/0x880 net/ipv4/ip_output.c:405
     dst_output include/net/dst.h:444 [inline]
     ip_local_out+0xc5/0x1b0 net/ipv4/ip_output.c:124
     iptunnel_xmit+0x567/0x850 net/ipv4/ip_tunnel_core.c:91
     ip_tunnel_xmit+0x1598/0x3af1 net/ipv4/ip_tunnel.c:778
     ipip_tunnel_xmit+0x264/0x2c0 net/ipv4/ipip.c:308
     __netdev_start_xmit include/linux/netdevice.h:4148 [inline]
     netdev_start_xmit include/linux/netdevice.h:4157 [inline]
     xmit_one net/core/dev.c:3034 [inline]
     dev_hard_start_xmit+0x26c/0xc30 net/core/dev.c:3050
     __dev_queue_xmit+0x29ef/0x3910 net/core/dev.c:3569
     dev_queue_xmit+0x17/0x20 net/core/dev.c:3602
     neigh_direct_output+0x15/0x20 net/core/neighbour.c:1403
     neigh_output include/net/neighbour.h:483 [inline]
     ip_finish_output2+0xa67/0x1860 net/ipv4/ip_output.c:229
     ip_finish_output+0x841/0xfa0 net/ipv4/ip_output.c:317
     NF_HOOK_COND include/linux/netfilter.h:276 [inline]
     ip_output+0x223/0x880 net/ipv4/ip_output.c:405
     dst_output include/net/dst.h:444 [inline]
     ip_local_out+0xc5/0x1b0 net/ipv4/ip_output.c:124
     ip_queue_xmit+0x9df/0x1f80 net/ipv4/ip_output.c:504
     tcp_transmit_skb+0x1bf9/0x3f10 net/ipv4/tcp_output.c:1168
     tcp_write_xmit+0x1641/0x5c20 net/ipv4/tcp_output.c:2363
     __tcp_push_pending_frames+0xb2/0x290 net/ipv4/tcp_output.c:2536
     tcp_push+0x638/0x8c0 net/ipv4/tcp.c:735
     tcp_sendmsg_locked+0x2ec5/0x3f00 net/ipv4/tcp.c:1410
     tcp_sendmsg+0x2f/0x50 net/ipv4/tcp.c:1447
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:641 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:651
     __sys_sendto+0x3d7/0x670 net/socket.c:1797
     __do_sys_sendto net/socket.c:1809 [inline]
     __se_sys_sendto net/socket.c:1805 [inline]
     __x64_sys_sendto+0xe1/0x1a0 net/socket.c:1805
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x455ab9
    Code: 1d ba fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 eb b9 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fcae64d5c68 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00007fcae64d66d4 RCX: 0000000000455ab9
    RDX: 0000000000000001 RSI: 0000000020000200 RDI: 0000000000000013
    RBP: 000000000072bea0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000014
    R13: 00000000004c1145 R14: 00000000004d1818 R15: 0000000000000006
    Modules linked in:
    Dumping ftrace buffer:
       (ftrace buffer empty)
    
    Fixes: ddff00d42043 ("net: Move skb_has_shared_frag check out of GRE code and into segmentation")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Alexander Duyck <alexander.h.duyck@intel.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e92f04a4fef1dd178fe1e285e7304bc3bb42ba2
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Tue Jul 24 14:27:55 2018 +0300

    net/mlx4_core: Save the qpn from the input modifier in RST2INIT wrapper
    
    [ Upstream commit 958c696f5a7274d9447a458ad7aa70719b29a50a ]
    
    Function mlx4_RST2INIT_QP_wrapper saved the qp number passed in the qp
    context, rather than the one passed in the input modifier.
    
    However, the qp number in the qp context is not defined as a
    required parameter by the FW. Therefore, drivers may choose to not
    specify the qp number in the qp context for the reset-to-init transition.
    
    Thus, we must save the qp number passed in the command input modifier --
    which is always present. (This saved qp number is used as the input
    modifier for command 2RST_QP when a slave's qp's are destroyed).
    
    Fixes: c82e9aa0a8bc ("mlx4_core: resource tracking for HCA resources used by guests")
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df20f746d68b6982923f0c318cc6a9347c96454f
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Jul 23 19:36:48 2018 -0400

    ip: in cmsg IP(V6)_ORIGDSTADDR call pskb_may_pull
    
    [ Upstream commit 2efd4fca703a6707cad16ab486eaab8fc7f0fd49 ]
    
    Syzbot reported a read beyond the end of the skb head when returning
    IPV6_ORIGDSTADDR:
    
      BUG: KMSAN: kernel-infoleak in put_cmsg+0x5ef/0x860 net/core/scm.c:242
      CPU: 0 PID: 4501 Comm: syz-executor128 Not tainted 4.17.0+ #9
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
      Google 01/01/2011
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x185/0x1d0 lib/dump_stack.c:113
        kmsan_report+0x188/0x2a0 mm/kmsan/kmsan.c:1125
        kmsan_internal_check_memory+0x138/0x1f0 mm/kmsan/kmsan.c:1219
        kmsan_copy_to_user+0x7a/0x160 mm/kmsan/kmsan.c:1261
        copy_to_user include/linux/uaccess.h:184 [inline]
        put_cmsg+0x5ef/0x860 net/core/scm.c:242
        ip6_datagram_recv_specific_ctl+0x1cf3/0x1eb0 net/ipv6/datagram.c:719
        ip6_datagram_recv_ctl+0x41c/0x450 net/ipv6/datagram.c:733
        rawv6_recvmsg+0x10fb/0x1460 net/ipv6/raw.c:521
        [..]
    
    This logic and its ipv4 counterpart read the destination port from
    the packet at skb_transport_offset(skb) + 4.
    
    With MSG_MORE and a local SOCK_RAW sender, syzbot was able to cook a
    packet that stores headers exactly up to skb_transport_offset(skb) in
    the head and the remainder in a frag.
    
    Call pskb_may_pull before accessing the pointer to ensure that it lies
    in skb head.
    
    Link: http://lkml.kernel.org/r/CAF=yD-LEJwZj5a1-bAAj2Oy_hKmGygV6rsJ_WOrAYnv-fnayiQ@mail.gmail.com
    Reported-by: syzbot+9adb4b567003cac781f0@syzkaller.appspotmail.com
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2ce657fd68cd617e7b8e014a141a2e15e799584
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Mon Jul 23 16:50:48 2018 +0200

    ip: hash fragments consistently
    
    [ Upstream commit 3dd1c9a1270736029ffca670e9bd0265f4120600 ]
    
    The skb hash for locally generated ip[v6] fragments belonging
    to the same datagram can vary in several circumstances:
    * for connected UDP[v6] sockets, the first fragment get its hash
      via set_owner_w()/skb_set_hash_from_sk()
    * for unconnected IPv6 UDPv6 sockets, the first fragment can get
      its hash via ip6_make_flowlabel()/skb_get_hash_flowi6(), if
      auto_flowlabel is enabled
    
    For the following frags the hash is usually computed via
    skb_get_hash().
    The above can cause OoO for unconnected IPv6 UDPv6 socket: in that
    scenario the egress tx queue can be selected on a per packet basis
    via the skb hash.
    It may also fool flow-oriented schedulers to place fragments belonging
    to the same datagram in different flows.
    
    Fix the issue by copying the skb hash from the head frag into
    the others at fragmentation time.
    
    Before this commit:
    perf probe -a "dev_queue_xmit skb skb->hash skb->l4_hash:b1@0/8 skb->sw_hash:b1@1/8"
    netperf -H $IPV4 -t UDP_STREAM -l 5 -- -m 2000 -n &
    perf record -e probe:dev_queue_xmit -e probe:skb_set_owner_w -a sleep 0.1
    perf script
    probe:dev_queue_xmit: (ffffffff8c6b1b20) hash=3713014309 l4_hash=1 sw_hash=0
    probe:dev_queue_xmit: (ffffffff8c6b1b20) hash=0 l4_hash=0 sw_hash=0
    
    After this commit:
    probe:dev_queue_xmit: (ffffffff8c6b1b20) hash=2171763177 l4_hash=1 sw_hash=0
    probe:dev_queue_xmit: (ffffffff8c6b1b20) hash=2171763177 l4_hash=1 sw_hash=0
    
    Fixes: b73c3d0e4f0e ("net: Save TX flow hash in sock and set in skbuf on xmit")
    Fixes: 67800f9b1f4e ("ipv6: Call skb_get_hash_flowi6 to get skb->hash in ip6_make_flowlabel")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1fb27fc256ce822ce22838c0edd862c76b04dc6
Author: Jarod Wilson <jarod@redhat.com>
Date:   Wed Jul 18 14:49:36 2018 -0400

    bonding: set default miimon value for non-arp modes if not set
    
    [ Upstream commit c1f897ce186a529a494441642125479d38727a3d ]
    
    For some time now, if you load the bonding driver and configure bond
    parameters via sysfs using minimal config options, such as specifying
    nothing but the mode, relying on defaults for everything else, modes
    that cannot use arp monitoring (802.3ad, balance-tlb, balance-alb) all
    wind up with both arp_interval=0 (as it should be) and miimon=0, which
    means the miimon monitor thread never actually runs. This is particularly
    problematic for 802.3ad.
    
    For example, from an LNST recipe I've set up:
    
    $ modprobe bonding max_bonds=0"
    $ echo "+t_bond0" > /sys/class/net/bonding_masters"
    $ ip link set t_bond0 down"
    $ echo "802.3ad" > /sys/class/net/t_bond0/bonding/mode"
    $ ip link set ens1f1 down"
    $ echo "+ens1f1" > /sys/class/net/t_bond0/bonding/slaves"
    $ ip link set ens1f0 down"
    $ echo "+ens1f0" > /sys/class/net/t_bond0/bonding/slaves"
    $ ethtool -i t_bond0"
    $ ip link set ens1f1 up"
    $ ip link set ens1f0 up"
    $ ip link set t_bond0 up"
    $ ip addr add 192.168.9.1/24 dev t_bond0"
    $ ip addr add 2002::1/64 dev t_bond0"
    
    This bond comes up okay, but things look slightly suspect in
    /proc/net/bonding/t_bond0 output:
    
    $ grep -i mii /proc/net/bonding/t_bond0
    MII Status: up
    MII Polling Interval (ms): 0
    MII Status: up
    MII Status: up
    
    Now, pull a cable on one of the ports in the bond, then reconnect it, and
    you'll see:
    
    Slave Interface: ens1f0
    MII Status: down
    Speed: 1000 Mbps
    Duplex: full
    
    I believe this became a major issue as of commit 4d2c0cda0744, which for
    802.3ad bonds, sets slave->link = BOND_LINK_DOWN, with a comment about
    relying on link monitoring via miimon to set it correctly, but since the
    miimon work queue never runs, the link just stays marked down.
    
    If we simply tweak bond_option_mode_set() slightly, we can check for the
    non-arp modes having no miimon value set, and insert BOND_DEFAULT_MIIMON,
    which gets things back in full working order. This problem exists as far
    back as 4.14, and might be worth fixing in all stable trees since, though
    the work-around is to simply specify an miimon value yourself.
    
    Reported-by: Bob Ball <ball@umich.edu>
    Signed-off-by: Jarod Wilson <jarod@redhat.com>
    Acked-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e454c18b76f07ff14666853aba38a4e6890921f
Author: Lyude Paul <lyude@redhat.com>
Date:   Tue Jul 3 16:31:41 2018 -0400

    drm/nouveau: Set DRIVER_ATOMIC cap earlier to fix debugfs
    
    commit eb493fbc150f4a28151ae1ee84f24395989f3600 upstream.
    
    Currently nouveau doesn't actually expose the state debugfs file that's
    usually provided for any modesetting driver that supports atomic, even
    if nouveau is loaded with atomic=1. This is due to the fact that the
    standard debugfs files that DRM creates for atomic drivers is called
    when drm_get_pci_dev() is called from nouveau_drm.c. This happens well
    before we've initialized the display core, which is currently
    responsible for setting the DRIVER_ATOMIC cap.
    
    So, move the atomic option into nouveau_drm.c and just add the
    DRIVER_ATOMIC cap whenever it's enabled on the kernel commandline. This
    shouldn't cause any actual issues, as the atomic ioctl will still fail
    as expected even if the display core doesn't disable it until later in
    the init sequence. This also provides the added benefit of being able to
    use the state debugfs file to check the current display state even if
    clients aren't allowed to modify it through anything other than the
    legacy ioctls.
    
    Additionally, disable the DRIVER_ATOMIC cap in nv04's display core, as
    this was already disabled there previously.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0bd2c70ffcbf83ad02d551ad6f1c1a1a6664ef1
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Jul 12 13:02:53 2018 -0400

    drm/nouveau/drm/nouveau: Fix runtime PM leak in nv50_disp_atomic_commit()
    
    commit e5d54f1935722f83df7619f3978f774c2b802cd8 upstream.
    
    A CRTC being enabled doesn't mean it's on! It doesn't even necessarily
    mean it's being used. This fixes runtime PM leaks on the P50 I've got
    next to me.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58113603a4ea409a2b77daa1e1caa663c648c748
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Tue Jul 17 17:19:13 2018 +1000

    KVM: PPC: Check if IOMMU page is contained in the pinned physical page
    
    commit 76fa4975f3ed12d15762bc979ca44078598ed8ee upstream.
    
    A VM which has:
     - a DMA capable device passed through to it (eg. network card);
     - running a malicious kernel that ignores H_PUT_TCE failure;
     - capability of using IOMMU pages bigger that physical pages
    can create an IOMMU mapping that exposes (for example) 16MB of
    the host physical memory to the device when only 64K was allocated to the VM.
    
    The remaining 16MB - 64K will be some other content of host memory, possibly
    including pages of the VM, but also pages of host kernel memory, host
    programs or other VMs.
    
    The attacking VM does not control the location of the page it can map,
    and is only allowed to map as many pages as it has pages of RAM.
    
    We already have a check in drivers/vfio/vfio_iommu_spapr_tce.c that
    an IOMMU page is contained in the physical page so the PCI hardware won't
    get access to unassigned host memory; however this check is missing in
    the KVM fastpath (H_PUT_TCE accelerated code). We were lucky so far and
    did not hit this yet as the very first time when the mapping happens
    we do not have tbl::it_userspace allocated yet and fall back to
    the userspace which in turn calls VFIO IOMMU driver, this fails and
    the guest does not retry,
    
    This stores the smallest preregistered page size in the preregistered
    region descriptor and changes the mm_iommu_xxx API to check this against
    the IOMMU page size.
    
    This calculates maximum page size as a minimum of the natural region
    alignment and compound page size. For the page shift this uses the shift
    returned by find_linux_pte() which indicates how the page is mapped to
    the current userspace - if the page is huge and this is not a zero, then
    it is a leaf pte and the page is mapped within the range.
    
    Fixes: 121f80ba68f1 ("KVM: PPC: VFIO: Add in-kernel acceleration for VFIO")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14500f14e0b6dd3fff66eec70b6bb1cf4d108dfa
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Tue May 8 19:56:22 2018 -0400

    xen/PVH: Set up GS segment for stack canary
    
    commit 98014068328c5574de9a4a30b604111fd9d8f901 upstream.
    
    We are making calls to C code (e.g. xen_prepare_pvh()) which may use
    stack canary (stored in GS segment).
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Cc: Jason Andryuk <jandryuk@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de019e7857fb743bb50db9b82dd447d4894b5610
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Jul 12 09:33:04 2018 -0700

    MIPS: Fix off-by-one in pci_resource_to_user()
    
    commit 38c0a74fe06da3be133cae3fb7bde6a9438e698b upstream.
    
    The MIPS implementation of pci_resource_to_user() introduced in v3.12 by
    commit 4c2924b725fb ("MIPS: PCI: Use pci_resource_to_user to map pci
    memory space properly") incorrectly sets *end to the address of the
    byte after the resource, rather than the last byte of the resource.
    
    This results in userland seeing resources as a byte larger than they
    actually are, for example a 32 byte BAR will be reported by a tool such
    as lspci as being 33 bytes in size:
    
        Region 2: I/O ports at 1000 [disabled] [size=33]
    
    Correct this by subtracting one from the calculated end address,
    reporting the correct address to userland.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Rui Wang <rui.wang@windriver.com>
    Fixes: 4c2924b725fb ("MIPS: PCI: Use pci_resource_to_user to map pci memory space properly")
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v3.12+
    Patchwork: https://patchwork.linux-mips.org/patch/19829/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c686d73bc3e090c8d8d55a07a1010955dcce9df
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Jul 20 13:58:21 2018 +0200

    MIPS: ath79: fix register address in ath79_ddr_wb_flush()
    
    commit bc88ad2efd11f29e00a4fd60fcd1887abfe76833 upstream.
    
    ath79_ddr_wb_flush_base has the type void __iomem *, so register offsets
    need to be a multiple of 4 in order to access the intended register.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: John Crispin <john@phrozen.org>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 24b0e3e84fbf ("MIPS: ath79: Improve the DDR controller interface")
    Patchwork: https://patchwork.linux-mips.org/patch/19912/
    Cc: Alban Bedel <albeu@free.fr>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # 4.2+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4168a84223646130203c7b566c27f9a74abef7ea
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jul 26 12:19:48 2018 +0200

    Revert "cifs: Fix slab-out-of-bounds in send_set_info() on SMB2 ACE setting"
    
    This reverts commit 748144f35514aef14c4fdef5bcaa0db99cb9367a which is
    commit f46ecbd97f508e68a7806291a139499794874f3d upstream.
    
    Philip reports:
            seems adding "cifs: Fix slab-out-of-bounds in send_set_info() on SMB2
            ACE setting" (commit 748144f) [1] created a regression within linux
            v4.14 kernel series. Writing to a mounted cifs either freezes on writing
            or crashes the PC. A more detailed explanation you may find in our
            forums [2]. Reverting the patch, seems to "fix" it. Thoughts?
    
            [2] https://forum.manjaro.org/t/53250
    
    Reported-by: Philip Müller <philm@manjaro.org>
    Cc: Jianhong Yin <jiyin@redhat.com>
    Cc: Stefano Brivio <sbrivio@redhat.com>
    Cc: Aurelien Aptel <aaptel@suse.com>
    Cc: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
