commit af3457a5c65c7192b20a47e76d1b3efba61d0af1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 11 13:38:02 2020 +0100

    Linux 4.9.248
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201210142602.361598591@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a91fa530e4de4358742480ca344e2ce6d955367
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Dec 3 13:50:37 2020 +0900

    x86/uprobes: Do not use prefixes.nbytes when looping over prefixes.bytes
    
    commit 4e9a5ae8df5b3365183150f6df49e49dece80d8c upstream
    
    Since insn.prefixes.nbytes can be bigger than the size of
    insn.prefixes.bytes[] when a prefix is repeated, the proper check must
    be
    
      insn.prefixes.bytes[i] != 0 and i < 4
    
    instead of using insn.prefixes.nbytes.
    
    Introduce a for_each_insn_prefix() macro for this purpose. Debugged by
    Kees Cook <keescook@chromium.org>.
    
     [ bp: Massage commit message, sync with the respective header in tools/
       and drop "we". ]
    
    Fixes: 2b1444983508 ("uprobes, mm, x86: Add the ability to install and remove uprobes breakpoints")
    Reported-by: syzbot+9b64b619f10f19d19a7c@syzkaller.appspotmail.com
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/160697103739.3146288.7437620795200799020.stgit@devnote2
    [sudip: adjust context, use old insn.h]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cad39416570f6fb1fbfe0be4ee3d245e311fcf0b
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 24 17:45:23 2020 -0800

    Input: i8042 - fix error return code in i8042_setup_aux()
    
    commit 855b69857830f8d918d715014f05e59a3f7491a0 upstream.
    
    Fix to return a negative error code from the error handling case
    instead of 0 in function i8042_setup_aux(), as done elsewhere in this
    function.
    
    Fixes: f81134163fc7 ("Input: i8042 - use platform_driver_probe")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201123133420.4071187-1-luomeng12@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c05b676982c02dd6bb0f1d6a6a9f8ca2f3abb8ef
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Nov 16 22:10:58 2020 +0800

    i2c: qup: Fix error return code in qup_i2c_bam_schedule_desc()
    
    commit e9acf0298c664f825e6f1158f2a97341bf9e03ca upstream.
    
    Fix to return the error code from qup_i2c_change_state()
    instaed of 0 in qup_i2c_bam_schedule_desc().
    
    Fixes: fbf9921f8b35d9b2 ("i2c: qup: Fix error handling")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6b1752469c053c46bc3bb758784aec36c83997b
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Nov 24 10:44:36 2020 -0500

    gfs2: check for empty rgrp tree in gfs2_ri_update
    
    commit 778721510e84209f78e31e2ccb296ae36d623f5e upstream.
    
    If gfs2 tries to mount a (corrupt) file system that has no resource
    groups it still tries to set preferences on the first one, which causes
    a kernel null pointer dereference. This patch adds a check to function
    gfs2_ri_update so this condition is detected and reported back as an
    error.
    
    Reported-by: syzbot+e3f23ce40269a4c9053a@syzkaller.appspotmail.com
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bde9d5348624c35d31f3275fb11d790154c320f
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Dec 4 16:36:16 2020 -0500

    tracing: Fix userstacktrace option for instances
    
    commit bcee5278958802b40ee8b26679155a6d9231783e upstream.
    
    When the instances were able to use their own options, the userstacktrace
    option was left hardcoded for the top level. This made the instance
    userstacktrace option bascially into a nop, and will confuse users that set
    it, but nothing happens (I was confused when it happened to me!)
    
    Cc: stable@vger.kernel.org
    Fixes: 16270145ce6b ("tracing: Add trace options for core options to instances")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af1603572512a1deee210d60a886dc07a59d57c5
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Sun Dec 6 13:46:04 2020 +0100

    spi: bcm2835: Release the DMA channel if probe fails after dma_init
    
    [ Upstream commit 666224b43b4bd4612ce3b758c038f9bc5c5e3fcb ]
    
    The DMA channel was not released if either devm_request_irq() or
    devm_spi_register_controller() failed.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Reviewed-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20191212135550.4634-3-peter.ujfalusi@ti.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [lukas: backport to 4.19-stable]
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2be1837b1737531469422c23343a5962e9e47c8a
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Dec 6 13:46:02 2020 +0100

    spi: bcm2835: Fix use-after-free on unbind
    
    [ Upstream commit e1483ac030fb4c57734289742f1c1d38dca61e22 ]
    
    bcm2835_spi_remove() accesses the driver's private data after calling
    spi_unregister_controller() even though that function releases the last
    reference on the spi_controller and thereby frees the private data.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound.
    
    Fixes: f8043872e796 ("spi: add driver for BCM2835")
    Reported-by: Sascha Hauer <s.hauer@pengutronix.de>
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v3.10+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v3.10+
    Cc: Vladimir Oltean <olteanv@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/ad66e0a0ad96feb848814842ecf5b6a4539ef35c.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aea0d9667beed0a0bea2d3fae8c66fe50fb5787
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Dec 6 13:46:01 2020 +0100

    spi: bcm-qspi: Fix use-after-free on unbind
    
    [ Upstream commit 63c5395bb7a9777a33f0e7b5906f2c0170a23692 ]
    
    bcm_qspi_remove() calls spi_unregister_master() even though
    bcm_qspi_probe() calls devm_spi_register_master().  The spi_master is
    therefore unregistered and freed twice on unbind.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound.
    
    While at it, fix an ordering issue in bcm_qspi_remove() wherein
    spi_unregister_master() is called after uninitializing the hardware,
    disabling the clock and freeing an IRQ data structure.  The correct
    order is to call spi_unregister_master() *before* those teardown steps
    because bus accesses may still be ongoing until that function returns.
    
    Fixes: fa236a7ef240 ("spi: bcm-qspi: Add Broadcom MSPI driver")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.9+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v4.9+
    Cc: Kamal Dasu <kdasu.kdev@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/5e31a9a59fd1c0d0b795b2fe219f25e5ee855f9d.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0870525cf94bc27907e94ce99afb6d7239ffd2f5
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Dec 6 13:46:00 2020 +0100

    spi: Introduce device-managed SPI controller allocation
    
    [ Upstream commit 5e844cc37a5cbaa460e68f9a989d321d63088a89 ]
    
    SPI driver probing currently comprises two steps, whereas removal
    comprises only one step:
    
        spi_alloc_master()
        spi_register_master()
    
        spi_unregister_master()
    
    That's because spi_unregister_master() calls device_unregister()
    instead of device_del(), thereby releasing the reference on the
    spi_master which was obtained by spi_alloc_master().
    
    An SPI driver's private data is contained in the same memory allocation
    as the spi_master struct.  Thus, once spi_unregister_master() has been
    called, the private data is inaccessible.  But some drivers need to
    access it after spi_unregister_master() to perform further teardown
    steps.
    
    Introduce devm_spi_alloc_master(), which releases a reference on the
    spi_master struct only after the driver has unbound, thereby keeping the
    memory allocation accessible.  Change spi_unregister_master() to not
    release a reference if the spi_master was allocated by the new devm
    function.
    
    The present commit is small enough to be backportable to stable.
    It allows fixing drivers which use the private data in their ->remove()
    hook after it's been freed.  It also allows fixing drivers which neglect
    to release a reference on the spi_master in the probe error path.
    
    Long-term, most SPI drivers shall be moved over to the devm function
    introduced herein.  The few that can't shall be changed in a treewide
    commit to explicitly release the last reference on the master.
    That commit shall amend spi_unregister_master() to no longer release
    a reference, thereby completing the migration.
    
    As a result, the behaviour will be less surprising and more consistent
    with subsystems such as IIO, which also includes the private data in the
    allocation of the generic iio_dev struct, but calls device_del() in
    iio_device_unregister().
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://lore.kernel.org/r/272bae2ef08abd21388c98e23729886663d19192.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b8d8c968b495c3a4cb1edb5a43a4bbf9ee9587f
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Mon Dec 7 03:19:20 2020 -0600

    iommu/amd: Set DTE[IntTabLen] to represent 512 IRTEs
    
    commit 4165bf015ba9454f45beaad621d16c516d5c5afe upstream.
    
    According to the AMD IOMMU spec, the commit 73db2fc595f3
    ("iommu/amd: Increase interrupt remapping table limit to 512 entries")
    also requires the interrupt table length (IntTabLen) to be set to 9
    (power of 2) in the device table mapping entry (DTE).
    
    Fixes: 73db2fc595f3 ("iommu/amd: Increase interrupt remapping table limit to 512 entries")
    Reported-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Link: https://lore.kernel.org/r/20201207091920.3052-1-suravee.suthikulpanit@amd.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 469268678716cb45d603b198b3bf78c2c77d61fd
Author: Christian Eggers <ceggers@arri.de>
Date:   Fri Oct 9 13:03:19 2020 +0200

    i2c: imx: Check for I2SR_IAL after every byte
    
    commit 1de67a3dee7a279ebe4d892b359fe3696938ec15 upstream.
    
    Arbitration Lost (IAL) can happen after every single byte transfer. If
    arbitration is lost, the I2C hardware will autonomously switch from
    master mode to slave. If a transfer is not aborted in this state,
    consecutive transfers will not be executed by the hardware and will
    timeout.
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Tested (not extensively) on Vybrid VF500 (Toradex VF50):
    Tested-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95046a503713302e4cbecf2c56288787f29dc71f
Author: Christian Eggers <ceggers@arri.de>
Date:   Fri Oct 9 13:03:18 2020 +0200

    i2c: imx: Fix reset of I2SR_IAL flag
    
    commit 384a9565f70a876c2e78e58c5ca0bbf0547e4f6d upstream.
    
    According to the "VFxxx Controller Reference Manual" (and the comment
    block starting at line 97), Vybrid requires writing a one for clearing
    an interrupt flag. Syncing the method for clearing I2SR_IIF in
    i2c_imx_isr().
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Fixes: 4b775022f6fd ("i2c: imx: add struct to hold more configurable quirks")
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da407a0029f335b0234ed2aea6a883cb50afd46e
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Sat Nov 28 16:54:02 2020 -0300

    cifs: fix potential use-after-free in cifs_echo_request()
    
    commit 212253367dc7b49ed3fc194ce71b0992eacaecf2 upstream.
    
    This patch fixes a potential use-after-free bug in
    cifs_echo_request().
    
    For instance,
    
      thread 1
      --------
      cifs_demultiplex_thread()
        clean_demultiplex_info()
          kfree(server)
    
      thread 2 (workqueue)
      --------
      apic_timer_interrupt()
        smp_apic_timer_interrupt()
          irq_exit()
            __do_softirq()
              run_timer_softirq()
                call_timer_fn()
                  cifs_echo_request() <- use-after-free in server ptr
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3920afb567e87f830dc4f287ed9f54c2adf56459
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Nov 26 23:38:38 2020 +0530

    ftrace: Fix updating FTRACE_FL_TRAMP
    
    commit 4c75b0ff4e4bf7a45b5aef9639799719c28d0073 upstream.
    
    On powerpc, kprobe-direct.tc triggered FTRACE_WARN_ON() in
    ftrace_get_addr_new() followed by the below message:
      Bad trampoline accounting at: 000000004222522f (wake_up_process+0xc/0x20) (f0000001)
    
    The set of steps leading to this involved:
    - modprobe ftrace-direct-too
    - enable_probe
    - modprobe ftrace-direct
    - rmmod ftrace-direct <-- trigger
    
    The problem turned out to be that we were not updating flags in the
    ftrace record properly. From the above message about the trampoline
    accounting being bad, it can be seen that the ftrace record still has
    FTRACE_FL_TRAMP set though ftrace-direct module is going away. This
    happens because we are checking if any ftrace_ops has the
    FTRACE_FL_TRAMP flag set _before_ updating the filter hash.
    
    The fix for this is to look for any _other_ ftrace_ops that also needs
    FTRACE_FL_TRAMP.
    
    Link: https://lkml.kernel.org/r/56c113aa9c3e10c19144a36d9684c7882bf09af5.1606412433.git.naveen.n.rao@linux.vnet.ibm.com
    
    Cc: stable@vger.kernel.org
    Fixes: a124692b698b0 ("ftrace: Enable trampoline when rec count returns back to one")
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac28e357fe00902bbc21655eaee6b56c850f80af
Author: Jann Horn <jannh@google.com>
Date:   Thu Dec 3 02:25:05 2020 +0100

    tty: Fix ->session locking
    
    commit c8bcd9c5be24fb9e6132e97da5a35e55a83e36b9 upstream.
    
    Currently, locking of ->session is very inconsistent; most places
    protect it using the legacy tty mutex, but disassociate_ctty(),
    __do_SAK(), tiocspgrp() and tiocgsid() don't.
    Two of the writers hold the ctrl_lock (because they already need it for
    ->pgrp), but __proc_set_tty() doesn't do that yet.
    
    On a PREEMPT=y system, an unprivileged user can theoretically abuse
    this broken locking to read 4 bytes of freed memory via TIOCGSID if
    tiocgsid() is preempted long enough at the right point. (Other things
    might also go wrong, especially if root-only ioctls are involved; I'm
    not sure about that.)
    
    Change the locking on ->session such that:
    
     - tty_lock() is held by all writers: By making disassociate_ctty()
       hold it. This should be fine because the same lock can already be
       taken through the call to tty_vhangup_session().
       The tricky part is that we need to shorten the area covered by
       siglock to be able to take tty_lock() without ugly retry logic; as
       far as I can tell, this should be fine, since nothing in the
       signal_struct is touched in the `if (tty)` branch.
     - ctrl_lock is held by all writers: By changing __proc_set_tty() to
       hold the lock a little longer.
     - All readers that aren't holding tty_lock() hold ctrl_lock: By
       adding locking to tiocgsid() and __do_SAK(), and expanding the area
       covered by ctrl_lock in tiocspgrp().
    
    Cc: stable@kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0725367fc9c98c8b339ea882b820f4e6bb55b109
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 27 15:11:03 2020 +0100

    ALSA: hda/generic: Add option to enforce preferred_dacs pairs
    
    commit 242d990c158d5b1dabd166516e21992baef5f26a upstream.
    
    The generic parser accepts the preferred_dacs[] pairs as a hint for
    assigning a DAC to each pin, but this hint doesn't work always
    effectively.  Currently it's merely a secondary choice after the trial
    with the path index failed.  This made sometimes it difficult to
    assign DACs without mimicking the connection list and/or the badness
    table.
    
    This patch adds a new flag, obey_preferred_dacs, that changes the
    behavior of the parser.  As its name stands, the parser obeys the
    given preferred_dacs[] pairs by skipping the path index matching and
    giving a high penalty if no DAC is assigned by the pairs.  This mode
    will help for assigning the fixed DACs forcibly from the codec
    driver.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201127141104.11041-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 219c8a383a478b0c53cd47540455b95ffa5e0ff8
Author: Kailang Yang <kailang@realtek.com>
Date:   Fri Nov 27 14:39:23 2020 +0800

    ALSA: hda/realtek - Add new codec supported for ALC897
    
    commit e5782a5d5054bf1e03cb7fbd87035037c2a22698 upstream.
    
    Enable new codec supported for ALC897.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3b00520f304842aab8291eb8d9191bd8@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 742f3062298ac1ae1d28de31b1f946f93db1eba1
Author: Jann Horn <jannh@google.com>
Date:   Thu Dec 3 02:25:04 2020 +0100

    tty: Fix ->pgrp locking in tiocspgrp()
    
    commit 54ffccbf053b5b6ca4f6e45094b942fab92a25fc upstream.
    
    tiocspgrp() takes two tty_struct pointers: One to the tty that userspace
    passed to ioctl() (`tty`) and one to the TTY being changed (`real_tty`).
    These pointers are different when ioctl() is called with a master fd.
    
    To properly lock real_tty->pgrp, we must take real_tty->ctrl_lock.
    
    This bug makes it possible for racing ioctl(TIOCSPGRP, ...) calls on
    both sides of a PTY pair to corrupt the refcount of `struct pid`,
    leading to use-after-free errors.
    
    Fixes: 47f86834bbd4 ("redo locking of tty->pgrp")
    CC: stable@kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5a1beb06681ab216028bd7c463326aecb50fbb2
Author: Giacinto Cifelli <gciofono@gmail.com>
Date:   Wed Nov 25 15:53:04 2020 +0100

    USB: serial: option: add support for Thales Cinterion EXS82
    
    commit 6d6556c04ebaeaf4e7fa8b791c97e2a7c41b38a3 upstream.
    
    There is a single option port in this modem, and it is used as debug port.
    
    lsusb -v for this device:
    
    Bus 001 Device 002: ID 1e2d:006c
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass          239 Miscellaneous Device
      bDeviceSubClass         2 ?
      bDeviceProtocol         1 Interface Association
      bMaxPacketSize0        64
      idVendor           0x1e2d
      idProduct          0x006c
      bcdDevice            0.00
      iManufacturer           4
      iProduct                3
      iSerial                 5
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength          243
        bNumInterfaces          7
        bConfigurationValue     1
        iConfiguration          2
        bmAttributes         0xe0
          Self Powered
          Remote Wakeup
        MaxPower              500mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol    255 Vendor Specific Protocol
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         1
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          2
          CDC Union:
            bMasterInterface        1
            bSlaveInterface         2
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         3
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          4
          CDC Union:
            bMasterInterface        3
            bSlaveInterface         4
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         5
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      6 Ethernet Networking
          bInterfaceProtocol      0
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC Ethernet:
            iMacAddress                      1 (??)
            bmEthernetStatistics    0x00000000
            wMaxSegmentSize              16384
            wNumberMCFilters            0x0001
            bNumberPowerFilters              0
          CDC Union:
            bMasterInterface        5
            bSlaveInterface         6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       0
          bNumEndpoints           0
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       1
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
    
    Signed-off-by: Giacinto Cifelli <gciofono@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcdda1e6c1c330b347adabe2a1097f8cc2010fce
Author: Vincent Palatin <vpalatin@chromium.org>
Date:   Fri Nov 20 10:28:28 2020 +0100

    USB: serial: option: add Fibocom NL668 variants
    
    commit 5e4d659b10fde14403adb2e215df4a3168fe8465 upstream.
    
    Update the USB serial option driver support for the Fibocom NL668 Cat.4
    LTE modules as there are actually several different variants.
    Got clarifications from Fibocom, there are distinct products:
    - VID:PID 1508:1001, NL668 for IOT (no MBIM interface)
    - VID:PID 2cb7:01a0, NL668-AM and NL652-EU are laptop M.2 cards (with
      MBIM interfaces for Windows/Linux/Chrome OS), respectively for Americas
      and Europe.
    
    usb-devices output for the laptop M.2 cards:
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  4 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=01a0 Rev=03.18
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom NL652-EU Modem
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: Vincent Palatin <vpalatin@chromium.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71245b958f758b61f4aae04b453b39c4ecf2c906
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Dec 3 10:11:59 2020 +0100

    USB: serial: ch341: sort device-id entries
    
    commit bf193bfc12dbc3754fc8a6e0e1e3702f1af2f772 upstream.
    
    Keep the device-id entries sorted to make it easier to add new ones in
    the right spot.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e00156c7af08ae4f32a32d342fb8b81cc6d5ce2a
Author: Jan-Niklas Burfeind <kernel@aiyionpri.me>
Date:   Thu Dec 3 04:03:59 2020 +0100

    USB: serial: ch341: add new Product ID for CH341A
    
    commit 46ee4abb10a07bd8f8ce910ee6b4ae6a947d7f63 upstream.
    
    Add PID for CH340 that's found on a ch341 based Programmer made by keeyees.
    The specific device that contains the serial converter is described
    here: http://www.keeyees.com/a/Products/ej/36.html
    
    The driver works flawlessly as soon as the new PID (0x5512) is added to
    it.
    
    Signed-off-by: Jan-Niklas Burfeind <kernel@aiyionpri.me>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30df8e693b1e32ebf25836f84a4d57afcd7743be
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Dec 4 09:55:19 2020 +0100

    USB: serial: kl5kusb105: fix memleak on open
    
    commit 3f203f057edfcf6bd02c6b942799262bfcf31f73 upstream.
    
    Fix memory leak of control-message transfer buffer on successful open().
    
    Fixes: 6774d5f53271 ("USB: serial: kl5kusb105: fix open error path")
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 259c2b3d4335972f062f59316f2fbac21e6e7537
Author: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
Date:   Mon Nov 30 12:34:53 2020 -0800

    usb: gadget: f_fs: Use local copy of descriptors for userspace copy
    
    commit a4b98a7512f18534ce33a7e98e49115af59ffa00 upstream.
    
    The function may be unbound causing the ffs_ep and its descriptors
    to be freed while userspace is in the middle of an ioctl requesting
    the same descriptors. Avoid dangling pointer reference by first
    making a local copy of desctiptors before releasing the spinlock.
    
    Fixes: c559a3534109 ("usb: gadget: f_fs: add ioctl returning ep descriptor")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201130203453.28154-1-jackp@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a890a3d3115da196ff25599fe900f34016a4ef49
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Tue Jul 7 13:03:25 2020 +0200

    vlan: consolidate VLAN parsing code and limit max parsing depth
    
    [ Upstream commit 469aceddfa3ed16e17ee30533fae45e90f62efd8 ]
    
    Toshiaki pointed out that we now have two very similar functions to extract
    the L3 protocol number in the presence of VLAN tags. And Daniel pointed out
    that the unbounded parsing loop makes it possible for maliciously crafted
    packets to loop through potentially hundreds of tags.
    
    Fix both of these issues by consolidating the two parsing functions and
    limiting the VLAN tag parsing to a max depth of 8 tags. As part of this,
    switch over __vlan_get_protocol() to use skb_header_pointer() instead of
    pskb_may_pull(), to avoid the possible side effects of the latter and keep
    the skb pointer 'const' through all the parsing functions.
    
    v2:
    - Use limit of 8 tags instead of 32 (matching XMIT_RECURSION_LIMIT)
    
    Reported-by: Toshiaki Makita <toshiaki.makita1@gmail.com>
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Fixes: d7bf2ebebc2b ("sched: consistently handle layer3 header accesses in the presence of VLANs")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36b9d0128405b60c13ead269296bb16bbb65d931
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Jun 6 11:31:50 2020 +0200

    pinctrl: baytrail: Fix pin being driven low for a while on gpiod_get(..., GPIOD_OUT_HIGH)
    
    commit 156abe2961601d60a8c2a60c6dc8dd6ce7adcdaf upstream
    
    The pins on the Bay Trail SoC have separate input-buffer and output-buffer
    enable bits and a read of the level bit of the value register will always
    return the value from the input-buffer.
    
    The BIOS of a device may configure a pin in output-only mode, only enabling
    the output buffer, and write 1 to the level bit to drive the pin high.
    This 1 written to the level bit will be stored inside the data-latch of the
    output buffer.
    
    But a subsequent read of the value register will return 0 for the level bit
    because the input-buffer is disabled. This causes a read-modify-write as
    done by byt_gpio_set_direction() to write 0 to the level bit, driving the
    pin low!
    
    Before this commit byt_gpio_direction_output() relied on
    pinctrl_gpio_direction_output() to set the direction, followed by a call
    to byt_gpio_set() to apply the selected value. This causes the pin to
    go low between the pinctrl_gpio_direction_output() and byt_gpio_set()
    calls.
    
    Change byt_gpio_direction_output() to directly make the register
    modifications itself instead. Replacing the 2 subsequent writes to the
    value register with a single write.
    
    Note that the pinctrl code does not keep track internally of the direction,
    so not going through pinctrl_gpio_direction_output() is not an issue.
    
    This issue was noticed on a Trekstor SurfTab Twin 10.1. When the panel is
    already on at boot (no external monitor connected), then the i915 driver
    does a gpiod_get(..., GPIOD_OUT_HIGH) for the panel-enable GPIO. The
    temporarily going low of that GPIO was causing the panel to reset itself
    after which it would not show an image until it was turned off and back on
    again (until a full modeset was done on it). This commit fixes this.
    
    This commit also updates the byt_gpio_direction_input() to use direct
    register accesses instead of going through pinctrl_gpio_direction_input(),
    to keep it consistent with byt_gpio_direction_output().
    
    Note for backporting, this commit depends on:
    commit e2b74419e5cc ("pinctrl: baytrail: Replace WARN with dev_info_once
    when setting direct-irq pin to output")
    
    Cc: stable@vger.kernel.org
    Fixes: 86e3ef812fe3 ("pinctrl: baytrail: Update gpio chip operations")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    [sudip: use byt_gpio and vg->pdev->dev for dev_info()]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89196a0fe22a2b7fecb8db65b5f47457880505e9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jan 1 15:52:43 2020 +0100

    pinctrl: baytrail: Replace WARN with dev_info_once when setting direct-irq pin to output
    
    commit e2b74419e5cc7cfc58f3e785849f73f8fa0af5b3 upstream
    
    Suspending Goodix touchscreens requires changing the interrupt pin to
    output before sending them a power-down command. Followed by wiggling
    the interrupt pin to wake the device up, after which it is put back
    in input mode.
    
    On Cherry Trail device the interrupt pin is listed as a GpioInt ACPI
    resource so we can do this without problems as long as we release the
    IRQ before changing the pin to output mode.
    
    On Bay Trail devices with a Goodix touchscreen direct-irq mode is used
    in combination with listing the pin as a normal GpioIo resource. This
    works fine, but this triggers the WARN in byt_gpio_set_direction-s output
    path because direct-irq support is enabled on the pin.
    
    This commit replaces the WARN call with a dev_info_once call, fixing a
    bunch of WARN splats in dmesg on each suspend/resume cycle.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9ff783f6da92d47e54f82de6e527277ed29938d
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 1 08:09:01 2020 -0400

    btrfs: sysfs: init devices outside of the chunk_mutex
    
    commit ca10845a56856fff4de3804c85e6424d0f6d0cde upstream
    
    While running btrfs/061, btrfs/073, btrfs/078, or btrfs/178 we hit the
    following lockdep splat:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      5.9.0-rc3+ #4 Not tainted
      ------------------------------------------------------
      kswapd0/100 is trying to acquire lock:
      ffff96ecc22ef4a0 (&delayed_node->mutex){+.+.}-{3:3}, at: __btrfs_release_delayed_node.part.0+0x3f/0x330
    
      but task is already holding lock:
      ffffffff8dd74700 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #3 (fs_reclaim){+.+.}-{0:0}:
             fs_reclaim_acquire+0x65/0x80
             slab_pre_alloc_hook.constprop.0+0x20/0x200
             kmem_cache_alloc+0x37/0x270
             alloc_inode+0x82/0xb0
             iget_locked+0x10d/0x2c0
             kernfs_get_inode+0x1b/0x130
             kernfs_get_tree+0x136/0x240
             sysfs_get_tree+0x16/0x40
             vfs_get_tree+0x28/0xc0
             path_mount+0x434/0xc00
             __x64_sys_mount+0xe3/0x120
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #2 (kernfs_mutex){+.+.}-{3:3}:
             __mutex_lock+0x7e/0x7e0
             kernfs_add_one+0x23/0x150
             kernfs_create_link+0x63/0xa0
             sysfs_do_create_link_sd+0x5e/0xd0
             btrfs_sysfs_add_devices_dir+0x81/0x130
             btrfs_init_new_device+0x67f/0x1250
             btrfs_ioctl+0x1ef/0x2e20
             __x64_sys_ioctl+0x83/0xb0
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #1 (&fs_info->chunk_mutex){+.+.}-{3:3}:
             __mutex_lock+0x7e/0x7e0
             btrfs_chunk_alloc+0x125/0x3a0
             find_free_extent+0xdf6/0x1210
             btrfs_reserve_extent+0xb3/0x1b0
             btrfs_alloc_tree_block+0xb0/0x310
             alloc_tree_block_no_bg_flush+0x4a/0x60
             __btrfs_cow_block+0x11a/0x530
             btrfs_cow_block+0x104/0x220
             btrfs_search_slot+0x52e/0x9d0
             btrfs_insert_empty_items+0x64/0xb0
             btrfs_insert_delayed_items+0x90/0x4f0
             btrfs_commit_inode_delayed_items+0x93/0x140
             btrfs_log_inode+0x5de/0x2020
             btrfs_log_inode_parent+0x429/0xc90
             btrfs_log_new_name+0x95/0x9b
             btrfs_rename2+0xbb9/0x1800
             vfs_rename+0x64f/0x9f0
             do_renameat2+0x320/0x4e0
             __x64_sys_rename+0x1f/0x30
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #0 (&delayed_node->mutex){+.+.}-{3:3}:
             __lock_acquire+0x119c/0x1fc0
             lock_acquire+0xa7/0x3d0
             __mutex_lock+0x7e/0x7e0
             __btrfs_release_delayed_node.part.0+0x3f/0x330
             btrfs_evict_inode+0x24c/0x500
             evict+0xcf/0x1f0
             dispose_list+0x48/0x70
             prune_icache_sb+0x44/0x50
             super_cache_scan+0x161/0x1e0
             do_shrink_slab+0x178/0x3c0
             shrink_slab+0x17c/0x290
             shrink_node+0x2b2/0x6d0
             balance_pgdat+0x30a/0x670
             kswapd+0x213/0x4c0
             kthread+0x138/0x160
             ret_from_fork+0x1f/0x30
    
      other info that might help us debug this:
    
      Chain exists of:
        &delayed_node->mutex --> kernfs_mutex --> fs_reclaim
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(fs_reclaim);
                                     lock(kernfs_mutex);
                                     lock(fs_reclaim);
        lock(&delayed_node->mutex);
    
       *** DEADLOCK ***
    
      3 locks held by kswapd0/100:
       #0: ffffffff8dd74700 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
       #1: ffffffff8dd65c50 (shrinker_rwsem){++++}-{3:3}, at: shrink_slab+0x115/0x290
       #2: ffff96ed2ade30e0 (&type->s_umount_key#36){++++}-{3:3}, at: super_cache_scan+0x38/0x1e0
    
      stack backtrace:
      CPU: 0 PID: 100 Comm: kswapd0 Not tainted 5.9.0-rc3+ #4
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      Call Trace:
       dump_stack+0x8b/0xb8
       check_noncircular+0x12d/0x150
       __lock_acquire+0x119c/0x1fc0
       lock_acquire+0xa7/0x3d0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       __mutex_lock+0x7e/0x7e0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       ? lock_acquire+0xa7/0x3d0
       ? find_held_lock+0x2b/0x80
       __btrfs_release_delayed_node.part.0+0x3f/0x330
       btrfs_evict_inode+0x24c/0x500
       evict+0xcf/0x1f0
       dispose_list+0x48/0x70
       prune_icache_sb+0x44/0x50
       super_cache_scan+0x161/0x1e0
       do_shrink_slab+0x178/0x3c0
       shrink_slab+0x17c/0x290
       shrink_node+0x2b2/0x6d0
       balance_pgdat+0x30a/0x670
       kswapd+0x213/0x4c0
       ? _raw_spin_unlock_irqrestore+0x41/0x50
       ? add_wait_queue_exclusive+0x70/0x70
       ? balance_pgdat+0x670/0x670
       kthread+0x138/0x160
       ? kthread_create_worker_on_cpu+0x40/0x40
       ret_from_fork+0x1f/0x30
    
    This happens because we are holding the chunk_mutex at the time of
    adding in a new device.  However we only need to hold the
    device_list_mutex, as we're going to iterate over the fs_devices
    devices.  Move the sysfs init stuff outside of the chunk_mutex to get
    rid of this lockdep splat.
    
    CC: stable@vger.kernel.org # 4.4.x: f3cd2c58110dad14e: btrfs: sysfs, rename device_link add/remove functions
    CC: stable@vger.kernel.org # 4.4.x
    Reported-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de1c4bf3ba0ae5186015c1436db493d490905a88
Author: Shiraz Saleem <shiraz.saleem@intel.com>
Date:   Tue Nov 24 18:56:16 2020 -0600

    RDMA/i40iw: Address an mmap handler exploit in i40iw
    
    commit 2ed381439e89fa6d1a0839ef45ccd45d99d8e915 upstream.
    
    i40iw_mmap manipulates the vma->vm_pgoff to differentiate a push page mmap
    vs a doorbell mmap, and uses it to compute the pfn in remap_pfn_range
    without any validation. This is vulnerable to an mmap exploit as described
    in: https://lore.kernel.org/r/20201119093523.7588-1-zhudi21@huawei.com
    
    The push feature is disabled in the driver currently and therefore no push
    mmaps are issued from user-space. The feature does not work as expected in
    the x722 product.
    
    Remove the push module parameter and all VMA attribute manipulations for
    this feature in i40iw_mmap. Update i40iw_mmap to only allow DB user
    mmapings at offset = 0. Check vm_pgoff for zero and if the mmaps are bound
    to a single page.
    
    Cc: <stable@kernel.org>
    Fixes: d37498417947 ("i40iw: add files for iwarp interface")
    Link: https://lore.kernel.org/r/20201125005616.1800-2-shiraz.saleem@intel.com
    Reported-by: Di Zhu <zhudi21@huawei.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbedb38b5b72194f408b3b3edfa28b92991bd740
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Dec 5 18:42:07 2020 +0100

    spi: Fix controller unregister order harder
    
    Commit c7e41e1caa71 sought to backport upstream commit 84855678add8 to
    the 4.9-stable tree but erroneously inserted a line at the wrong place.
    Fix it.
    
    Fixes: c7e41e1caa71 ("spi: Fix controller unregister order")
    Reported-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>

commit e90b7f234f2bc97b10384bb4e2a4b2af1d201cd3
Author: Po-Hsu Lin <po-hsu.lin@canonical.com>
Date:   Mon Nov 30 22:39:40 2020 -0800

    Input: i8042 - add ByteSpeed touchpad to noloop table
    
    commit a48491c65b513e5cdc3e7a886a4db915f848a5f5 upstream.
    
    It looks like the C15B laptop got another vendor: ByteSpeed LLC.
    
    Avoid AUX loopback on this touchpad as well, thus input subsystem will
    be able to recognize a Synaptics touchpad in the AUX port.
    
    BugLink: https://bugs.launchpad.net/bugs/1906128
    Signed-off-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Link: https://lore.kernel.org/r/20201201054723.5939-1-po-hsu.lin@canonical.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 487baca4cdd39a426d60599a6fd51fc72665d49a
Author: Sanjay Govind <sanjay.govind9@gmail.com>
Date:   Mon Nov 30 23:41:48 2020 -0800

    Input: xpad - support Ardwiino Controllers
    
    commit 2aab1561439032be2e98811dd0ddbeb5b2ae4c61 upstream.
    
    This commit adds support for Ardwiino Controllers
    
    Signed-off-by: Sanjay Govind <sanjay.govind9@gmail.com>
    Link: https://lore.kernel.org/r/20201201071922.131666-1-sanjay.govind9@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c593bdd46021ae635622d7ccfc52de38a7418a2
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Oct 26 16:36:20 2020 +0100

    dt-bindings: net: correct interrupt flags in examples
    
    [ Upstream commit 4d521943f76bd0d1e68ea5e02df7aadd30b2838a ]
    
    GPIO_ACTIVE_x flags are not correct in the context of interrupt flags.
    These are simple defines so they could be used in DTS but they will not
    have the same meaning:
    1. GPIO_ACTIVE_HIGH = 0 = IRQ_TYPE_NONE
    2. GPIO_ACTIVE_LOW  = 1 = IRQ_TYPE_EDGE_RISING
    
    Correct the interrupt flags, assuming the author of the code wanted same
    logical behavior behind the name "ACTIVE_xxx", this is:
      ACTIVE_LOW  => IRQ_TYPE_LEVEL_LOW
      ACTIVE_HIGH => IRQ_TYPE_LEVEL_HIGH
    
    Fixes: a1a8b4594f8d ("NFC: pn544: i2c: Add DTS Documentation")
    Fixes: 6be88670fc59 ("NFC: nxp-nci_i2c: Add I2C support to NXP NCI driver")
    Fixes: e3b329221567 ("dt-bindings: can: tcan4x5x: Update binding to use interrupt property")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Marc Kleine-Budde <mkl@pengutronix.de> # for tcan4x5x.txt
    Link: https://lore.kernel.org/r/20201026153620.89268-1-krzk@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e55337174639b9abfd75073b8bb0509fe1f3ebd
Author: Eran Ben Elisha <eranbe@nvidia.com>
Date:   Wed Dec 2 20:39:43 2020 -0800

    net/mlx5: Fix wrong address reclaim when command interface is down
    
    [ Upstream commit 1d2bb5ad89f47d8ce8aedc70ef85059ab3870292 ]
    
    When command interface is down, driver to reclaim all 4K page chucks that
    were hold by the Firmeware. Fix a bug for 64K page size systems, where
    driver repeatedly released only the first chunk of the page.
    
    Define helper function to fill 4K chunks for a given Firmware pages.
    Iterate over all unreleased Firmware pages and call the hepler per each.
    
    Fixes: 5adff6a08862 ("net/mlx5: Fix incorrect page count when in internal error")
    Signed-off-by: Eran Ben Elisha <eranbe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff0338a76570d33e2aa18c084d481e8f3a5ac88e
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Dec 2 17:57:15 2020 +0800

    net: pasemi: fix error return code in pasemi_mac_open()
    
    [ Upstream commit aba84871bd4f52c4dfcf3ad5d4501a6c9d2de90e ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: 72b05b9940f0 ("pasemi_mac: RX/TX ring management cleanup")
    Fixes: 8d636d8bc5ff ("pasemi_mac: jumbo frame support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/r/1606903035-1838-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb7aff26cad67694594032a6e832445d7016ae15
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Dec 2 17:56:05 2020 +0800

    cxgb3: fix error return code in t3_sge_alloc_qset()
    
    [ Upstream commit ff9924897f8bfed82e61894b373ab9d2dfea5b10 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: b1fb1f280d09 ("cxgb3 - Fix dma mapping error path")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Acked-by: Raju Rangoju <rajur@chelsio.com>
    Link: https://lore.kernel.org/r/1606902965-1646-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4596762761d5e0f843fc920babb4506e2d3c6c90
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Dec 1 18:15:12 2020 +0300

    net/x25: prevent a couple of overflows
    
    [ Upstream commit 6ee50c8e262a0f0693dad264c3c99e30e6442a56 ]
    
    The .x25_addr[] address comes from the user and is not necessarily
    NUL terminated.  This leads to a couple problems.  The first problem is
    that the strlen() in x25_bind() can read beyond the end of the buffer.
    
    The second problem is more subtle and could result in memory corruption.
    The call tree is:
      x25_connect()
      --> x25_write_internal()
          --> x25_addr_aton()
    
    The .x25_addr[] buffers are copied to the "addresses" buffer from
    x25_write_internal() so it will lead to stack corruption.
    
    Verify that the strings are NUL terminated and return -EINVAL if they
    are not.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Fixes: a9288525d2ae ("X25: Dont let x25_bind use addresses containing characters")
    Reported-by: "kiyin(尹亮)" <kiyin@tencent.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Martin Schiller <ms@dev.tdt.de>
    Link: https://lore.kernel.org/r/X8ZeAKm8FnFpN//B@mwanda
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 252de8f76b23a46ef7cc649dab8047893c3f4dd8
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Tue Dec 1 09:52:11 2020 -0600

    ibmvnic: Fix TX completion error handling
    
    [ Upstream commit ba246c175116e2e8fa4fdfa5f8e958e086a9a818 ]
    
    TX completions received with an error return code are not
    being processed properly. When an error code is seen, do not
    proceed to the next completion before cleaning up the existing
    entry's data structures.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89094e4759ffc1a4749e91377e84ac77fe9004f7
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Tue Dec 1 09:52:10 2020 -0600

    ibmvnic: Ensure that SCRQ entry reads are correctly ordered
    
    [ Upstream commit b71ec952234610b4f90ef17a2fdcb124d5320070 ]
    
    Ensure that received Subordinate Command-Response Queue (SCRQ)
    entries are properly read in order by the driver. These queues
    are used in the ibmvnic device to process RX buffer and TX completion
    descriptors. dma_rmb barriers have been added after checking for a
    pending descriptor to ensure the correct descriptor entry is checked
    and after reading the SCRQ descriptor to ensure the entire
    descriptor is read before processing.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10b6f570e0af27f22c019aac04f53a266e0d9c0e
Author: Antoine Tenart <atenart@kernel.org>
Date:   Mon Nov 23 18:49:02 2020 +0100

    netfilter: bridge: reset skb->pkt_type after NF_INET_POST_ROUTING traversal
    
    [ Upstream commit 44f64f23bae2f0fad25503bc7ab86cd08d04cd47 ]
    
    Netfilter changes PACKET_OTHERHOST to PACKET_HOST before invoking the
    hooks as, while it's an expected value for a bridge, routing expects
    PACKET_HOST. The change is undone later on after hook traversal. This
    can be seen with pairs of functions updating skb>pkt_type and then
    reverting it to its original value:
    
    For hook NF_INET_PRE_ROUTING:
      setup_pre_routing / br_nf_pre_routing_finish
    
    For hook NF_INET_FORWARD:
      br_nf_forward_ip / br_nf_forward_finish
    
    But the third case where netfilter does this, for hook
    NF_INET_POST_ROUTING, the packet type is changed in br_nf_post_routing
    but never reverted. A comment says:
    
      /* We assume any code from br_dev_queue_push_xmit onwards doesn't care
       * about the value of skb->pkt_type. */
    
    But when having a tunnel (say vxlan) attached to a bridge we have the
    following call trace:
    
      br_nf_pre_routing
      br_nf_pre_routing_ipv6
         br_nf_pre_routing_finish
      br_nf_forward_ip
         br_nf_forward_finish
      br_nf_post_routing           <- pkt_type is updated to PACKET_HOST
         br_nf_dev_queue_xmit      <- but not reverted to its original value
      vxlan_xmit
         vxlan_xmit_one
            skb_tunnel_check_pmtu  <- a check on pkt_type is performed
    
    In this specific case, this creates issues such as when an ICMPv6 PTB
    should be sent back. When CONFIG_BRIDGE_NETFILTER is enabled, the PTB
    isn't sent (as skb_tunnel_check_pmtu checks if pkt_type is PACKET_HOST
    and returns early).
    
    If the comment is right and no one cares about the value of
    skb->pkt_type after br_dev_queue_push_xmit (which isn't true), resetting
    it to its original value should be safe.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Link: https://lore.kernel.org/r/20201123174902.622102-1-atenart@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94f3032832bb5d9a3e2847eb5c7f87678c596a99
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Fri Nov 20 14:28:27 2020 +0000

    bonding: wait for sysfs kobject destruction before freeing struct slave
    
    [ Upstream commit b9ad3e9f5a7a760ab068e33e1f18d240ba32ce92 ]
    
    syzkaller found that with CONFIG_DEBUG_KOBJECT_RELEASE=y, releasing a
    struct slave device could result in the following splat:
    
      kobject: 'bonding_slave' (00000000cecdd4fe): kobject_release, parent 0000000074ceb2b2 (delayed 1000)
      bond0 (unregistering): (slave bond_slave_1): Releasing backup interface
      ------------[ cut here ]------------
      ODEBUG: free active (active state 0) object type: timer_list hint: workqueue_select_cpu_near kernel/workqueue.c:1549 [inline]
      ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x98 kernel/workqueue.c:1600
      WARNING: CPU: 1 PID: 842 at lib/debugobjects.c:485 debug_print_object+0x180/0x240 lib/debugobjects.c:485
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 1 PID: 842 Comm: kworker/u4:4 Tainted: G S                5.9.0-rc8+ #96
      Hardware name: linux,dummy-virt (DT)
      Workqueue: netns cleanup_net
      Call trace:
       dump_backtrace+0x0/0x4d8 include/linux/bitmap.h:239
       show_stack+0x34/0x48 arch/arm64/kernel/traps.c:142
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x174/0x1f8 lib/dump_stack.c:118
       panic+0x360/0x7a0 kernel/panic.c:231
       __warn+0x244/0x2ec kernel/panic.c:600
       report_bug+0x240/0x398 lib/bug.c:198
       bug_handler+0x50/0xc0 arch/arm64/kernel/traps.c:974
       call_break_hook+0x160/0x1d8 arch/arm64/kernel/debug-monitors.c:322
       brk_handler+0x30/0xc0 arch/arm64/kernel/debug-monitors.c:329
       do_debug_exception+0x184/0x340 arch/arm64/mm/fault.c:864
       el1_dbg+0x48/0xb0 arch/arm64/kernel/entry-common.c:65
       el1_sync_handler+0x170/0x1c8 arch/arm64/kernel/entry-common.c:93
       el1_sync+0x80/0x100 arch/arm64/kernel/entry.S:594
       debug_print_object+0x180/0x240 lib/debugobjects.c:485
       __debug_check_no_obj_freed lib/debugobjects.c:967 [inline]
       debug_check_no_obj_freed+0x200/0x430 lib/debugobjects.c:998
       slab_free_hook mm/slub.c:1536 [inline]
       slab_free_freelist_hook+0x190/0x210 mm/slub.c:1577
       slab_free mm/slub.c:3138 [inline]
       kfree+0x13c/0x460 mm/slub.c:4119
       bond_free_slave+0x8c/0xf8 drivers/net/bonding/bond_main.c:1492
       __bond_release_one+0xe0c/0xec8 drivers/net/bonding/bond_main.c:2190
       bond_slave_netdev_event drivers/net/bonding/bond_main.c:3309 [inline]
       bond_netdev_event+0x8f0/0xa70 drivers/net/bonding/bond_main.c:3420
       notifier_call_chain+0xf0/0x200 kernel/notifier.c:83
       __raw_notifier_call_chain kernel/notifier.c:361 [inline]
       raw_notifier_call_chain+0x44/0x58 kernel/notifier.c:368
       call_netdevice_notifiers_info+0xbc/0x150 net/core/dev.c:2033
       call_netdevice_notifiers_extack net/core/dev.c:2045 [inline]
       call_netdevice_notifiers net/core/dev.c:2059 [inline]
       rollback_registered_many+0x6a4/0xec0 net/core/dev.c:9347
       unregister_netdevice_many.part.0+0x2c/0x1c0 net/core/dev.c:10509
       unregister_netdevice_many net/core/dev.c:10508 [inline]
       default_device_exit_batch+0x294/0x338 net/core/dev.c:10992
       ops_exit_list.isra.0+0xec/0x150 net/core/net_namespace.c:189
       cleanup_net+0x44c/0x888 net/core/net_namespace.c:603
       process_one_work+0x96c/0x18c0 kernel/workqueue.c:2269
       worker_thread+0x3f0/0xc30 kernel/workqueue.c:2415
       kthread+0x390/0x498 kernel/kthread.c:292
       ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:925
    
    This is a potential use-after-free if the sysfs nodes are being accessed
    whilst removing the struct slave, so wait for the object destruction to
    complete before freeing the struct slave itself.
    
    Fixes: 07699f9a7c8d ("bonding: add sysfs /slave dir for bond slave devices.")
    Fixes: a068aab42258 ("bonding: Fix reference count leak in bond_sysfs_slave_add.")
    Cc: Qiushi Wu <wu000273@umn.edu>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20201120142827.879226-1-jamie@nuviainc.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f7e83674411bb1475e7ecd67df62c525fd7eec4
Author: Yves-Alexis Perez <corsac@corsac.net>
Date:   Thu Nov 19 18:24:39 2020 +0100

    usbnet: ipheth: fix connectivity with iOS 14
    
    [ Upstream commit f33d9e2b48a34e1558b67a473a1fc1d6e793f93c ]
    
    Starting with iOS 14 released in September 2020, connectivity using the
    personal hotspot USB tethering function of iOS devices is broken.
    
    Communication between the host and the device (for example ICMP traffic
    or DNS resolution using the DNS service running in the device itself)
    works fine, but communication to endpoints further away doesn't work.
    
    Investigation on the matter shows that no UDP and ICMP traffic from the
    tethered host is reaching the Internet at all. For TCP traffic there are
    exchanges between tethered host and server but packets are modified in
    transit leading to impossible communication.
    
    After some trials Matti Vuorela discovered that reducing the URB buffer
    size by two bytes restored the previous behavior. While a better
    solution might exist to fix the issue, since the protocol is not
    publicly documented and considering the small size of the fix, let's do
    that.
    
    Tested-by: Matti Vuorela <matti.vuorela@bitfactor.fi>
    Signed-off-by: Yves-Alexis Perez <corsac@corsac.net>
    Link: https://lore.kernel.org/linux-usb/CAAn0qaXmysJ9vx3ZEMkViv_B19ju-_ExN8Yn_uSefxpjS6g4Lw@mail.gmail.com/
    Link: https://github.com/libimobiledevice/libimobiledevice/issues/1038
    Link: https://lore.kernel.org/r/20201119172439.94988-1-corsac@corsac.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edc9b3113b50f3f2af7a1a803a026e903c947800
Author: Anmol Karn <anmol.karan123@gmail.com>
Date:   Fri Nov 20 00:40:43 2020 +0530

    rose: Fix Null pointer dereference in rose_send_frame()
    
    [ Upstream commit 3b3fd068c56e3fbea30090859216a368398e39bf ]
    
    rose_send_frame() dereferences `neigh->dev` when called from
    rose_transmit_clear_request(), and the first occurrence of the
    `neigh` is in rose_loopback_timer() as `rose_loopback_neigh`,
    and it is initialized in rose_add_loopback_neigh() as NULL.
    i.e when `rose_loopback_neigh` used in rose_loopback_timer()
    its `->dev` was still NULL and rose_loopback_timer() was calling
    rose_rx_call_request() without checking for NULL.
    
    - net/rose/rose_link.c
    This bug seems to get triggered in this line:
    
    rose_call = (ax25_address *)neigh->dev->dev_addr;
    
    Fix it by adding NULL checking for `rose_loopback_neigh->dev`
    in rose_loopback_timer().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Reported-by: syzbot+a1c743815982d9496393@syzkaller.appspotmail.com
    Tested-by: syzbot+a1c743815982d9496393@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=9d2a7ca8c7f2e4b682c97578dfa3f236258300b3
    Signed-off-by: Anmol Karn <anmol.karan123@gmail.com>
    Link: https://lore.kernel.org/r/20201119191043.28813-1-anmol.karan123@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 545c8af0db5228487e22bc63ee307c1035071561
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Fri Nov 20 11:06:57 2020 +0100

    net/af_iucv: set correct sk_protocol for child sockets
    
    [ Upstream commit c5dab0941fcdc9664eb0ec0d4d51433216d91336 ]
    
    Child sockets erroneously inherit their parent's sk_type (ie. SOCK_*),
    instead of the PF_IUCV protocol that the parent was created with in
    iucv_sock_create().
    
    We're currently not using sk->sk_protocol ourselves, so this shouldn't
    have much impact (except eg. getting the output in skb_dump() right).
    
    Fixes: eac3731bd04c ("[S390]: Add AF_IUCV socket support")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201120100657.34407-1-jwi@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
