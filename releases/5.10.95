commit 77656fde3c0125d6ef6f7fb46af6d2739d7b7141
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 29 10:26:11 2022 +0100

    Linux 5.10.95
    
    Link: https://lore.kernel.org/r/20220127180258.131170405@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae2b20f27732fe92055d9e7b350abc5cdf3e2414
Author: Mathias Krause <minipli@grsecurity.net>
Date:   Thu Jan 27 18:34:19 2022 +1000

    drm/vmwgfx: Fix stale file descriptors on failed usercopy
    
    commit a0f90c8815706981c483a652a6aefca51a5e191c upstream.
    
    A failing usercopy of the fence_rep object will lead to a stale entry in
    the file descriptor table as put_unused_fd() won't release it. This
    enables userland to refer to a dangling 'file' object through that still
    valid file descriptor, leading to all kinds of use-after-free
    exploitation scenarios.
    
    Fix this by deferring the call to fd_install() until after the usercopy
    has succeeded.
    
    Fixes: c906965dee22 ("drm/vmwgfx: Add export fence to file descriptor support")
    Signed-off-by: Mathias Krause <minipli@grsecurity.net>
    Signed-off-by: Zack Rusin <zackr@vmware.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11ba2c6dfb902de05b73000a98534e376173b6ca
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jan 10 19:19:23 2022 +0100

    select: Fix indefinitely sleeping task in poll_schedule_timeout()
    
    commit 68514dacf2715d11b91ca50d88de047c086fea9c upstream.
    
    A task can end up indefinitely sleeping in do_select() ->
    poll_schedule_timeout() when the following race happens:
    
      TASK1 (thread1)             TASK2                   TASK1 (thread2)
      do_select()
        setup poll_wqueues table
        with 'fd'
                                  write data to 'fd'
                                    pollwake()
                                      table->triggered = 1
                                                          closes 'fd' thread1 is
                                                            waiting for
        poll_schedule_timeout()
          - sees table->triggered
          table->triggered = 0
          return -EINTR
        loop back in do_select()
    
    But at this point when TASK1 loops back, the fdget() in the setup of
    poll_wqueues fails.  So now so we never find 'fd' is ready for reading
    and sleep in poll_schedule_timeout() indefinitely.
    
    Treat an fd that got closed as a fd on which some event happened.  This
    makes sure cannot block indefinitely in do_select().
    
    Another option would be to return -EBADF in this case but that has a
    potential of subtly breaking applications that excercise this behavior
    and it happens to work for them.  So returning fd as active seems like a
    safer choice.
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a447d7f786ec925d1c23f6509255f43ffc2ddffe
Author: David Matlack <dmatlack@google.com>
Date:   Thu Jan 13 23:30:17 2022 +0000

    KVM: x86/mmu: Fix write-protection of PTs mapped by the TDP MMU
    
    commit 7c8a4742c4abe205ec9daf416c9d42fd6b406e8e upstream.
    
    When the TDP MMU is write-protection GFNs for page table protection (as
    opposed to for dirty logging, or due to the HVA not being writable), it
    checks if the SPTE is already write-protected and if so skips modifying
    the SPTE and the TLB flush.
    
    This behavior is incorrect because it fails to check if the SPTE
    is write-protected for page table protection, i.e. fails to check
    that MMU-writable is '0'.  If the SPTE was write-protected for dirty
    logging but not page table protection, the SPTE could locklessly be made
    writable, and vCPUs could still be running with writable mappings cached
    in their TLB.
    
    Fix this by only skipping setting the SPTE if the SPTE is already
    write-protected *and* MMU-writable is already clear.  Technically,
    checking only MMU-writable would suffice; a SPTE cannot be writable
    without MMU-writable being set.  But check both to be paranoid and
    because it arguably yields more readable code.
    
    Fixes: 46044f72c382 ("kvm: x86/mmu: Support write protection for nesting in tdp MMU")
    Cc: stable@vger.kernel.org
    Signed-off-by: David Matlack <dmatlack@google.com>
    Message-Id: <20220113233020.3986005-2-dmatlack@google.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12d3389b7af68d89e45b214640699fb603e243e3
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Fri Sep 17 15:04:48 2021 -0700

    rcu: Tighten rcu_advance_cbs_nowake() checks
    
    commit 614ddad17f22a22e035e2ea37a04815f50362017 upstream.
    
    Currently, rcu_advance_cbs_nowake() checks that a grace period is in
    progress, however, that grace period could end just after the check.
    This commit rechecks that a grace period is still in progress while
    holding the rcu_node structure's lock.  The grace period cannot end while
    the current CPU's rcu_node structure's ->lock is held, thus avoiding
    false positives from the WARN_ON_ONCE().
    
    As Daniel Vacek noted, it is not necessary for the rcu_node structure
    to have a CPU that has not yet passed through its quiescent state.
    
    Tested-by: Guillaume Morin <guillaume@morinfr.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d63363c88e32ff5384122a0232c638c64499799
Author: Manish Chopra <manishc@marvell.com>
Date:   Tue Jan 25 10:57:49 2022 -0800

    bnx2x: Invalidate fastpath HSI version for VFs
    
    commit 802d4d207e75d7208ff75adb712b556c1e91cf1c upstream
    
    Commit 0a6890b9b4df ("bnx2x: Utilize FW 7.13.15.0.")
    added validation for fastpath HSI versions for different
    client init which was not meant for SR-IOV VF clients, which
    resulted in firmware asserts when running VF clients with
    different fastpath HSI version.
    
    This patch along with the new firmware support in patch #1
    fixes this behavior in order to not validate fastpath HSI
    version for the VFs.
    
    Fixes: 0a6890b9b4df ("bnx2x: Utilize FW 7.13.15.0.")
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Prabhakar Kushwaha <pkushwaha@marvell.com>
    Signed-off-by: Alok Prasad <palok@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdcfabd0952d0b66aee4128739e07ec4d212484a
Author: Manish Chopra <manishc@marvell.com>
Date:   Tue Jan 25 10:57:48 2022 -0800

    bnx2x: Utilize firmware 7.13.21.0
    
    commit b7a49f73059fe6147b6b78e8f674ce0d21237432 upstream
    
    This new firmware addresses few important issues and enhancements
    as mentioned below -
    
    - Support direct invalidation of FP HSI Ver per function ID, required for
      invalidating FP HSI Ver prior to each VF start, as there is no VF start
    - BRB hardware block parity error detection support for the driver
    - Fix the FCOE underrun flow
    - Fix PSOD during FCoE BFS over the NIC ports after preboot driver
    - Maintains backward compatibility
    
    This patch incorporates this new firmware 7.13.21.0 in bnx2x driver.
    
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Prabhakar Kushwaha <pkushwaha@marvell.com>
    Signed-off-by: Alok Prasad <palok@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a6acf927895c38bdd9f3cd76b8dbfc25ac03e88
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Tue Oct 19 13:27:10 2021 +0100

    drm/i915: Flush TLBs before releasing backing store
    
    commit 7938d61591d33394a21bdd7797a245b65428f44c upstream.
    
    We need to flush TLBs before releasing backing store otherwise userspace
    is able to encounter stale entries if a) it is not declaring access to
    certain buffers and b) it races with the backing store release from a
    such undeclared execution already executing on the GPU in parallel.
    
    The approach taken is to mark any buffer objects which were ever bound
    to the GPU and to trigger a serialized TLB flush when their backing
    store is released.
    
    Alternatively the flushing could be done on VMA unbind, at which point
    we would be able to ascertain whether there is potential a parallel GPU
    execution (which could race), but essentially it boils down to paying
    the cost of TLB flushes potentially needlessly at VMA unbind time (when
    the backing store is not known to be going away so not needed for
    safety), versus potentially needlessly at backing store relase time
    (since we at that point cannot tell whether there is anything executing
    on the GPU which uses that object).
    
    Thereforce simplicity of implementation has been chosen for now with
    scope to benchmark and refine later as required.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reported-by: Sushma Venkatesh Reddy <sushma.venkatesh.reddy@intel.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Acked-by: Dave Airlie <airlied@redhat.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
