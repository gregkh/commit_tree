commit b499cf4b3a901e87e1f933df04abf69b54de4457
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 5 14:43:55 2020 +0000

    Linux 4.19.102

commit b6606cc13491b4065a7a762890b9c21098812acd
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Thu Jan 30 22:11:14 2020 -0800

    mm/migrate.c: also overwrite error when it is bigger than zero
    
    [ Upstream commit dfe9aa23cab7880a794db9eb2d176c00ed064eb6 ]
    
    If we get here after successfully adding page to list, err would be 1 to
    indicate the page is queued in the list.
    
    Current code has two problems:
    
      * on success, 0 is not returned
      * on error, if add_page_for_migratioin() return 1, and the following err1
        from do_move_pages_to_node() is set, the err1 is not returned since err
        is 1
    
    And these behaviors break the user interface.
    
    Link: http://lkml.kernel.org/r/20200119065753.21694-1-richardw.yang@linux.intel.com
    Fixes: e0153fc2c760 ("mm: move_pages: return valid node id in status if the page is already on the target node").
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Acked-by: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0649c61de46220645721d951855407116f2ddfdd
Author: Jin Yao <yao.jin@linux.intel.com>
Date:   Wed Jan 8 03:17:45 2020 +0800

    perf report: Fix no libunwind compiled warning break s390 issue
    
    [ Upstream commit c3314a74f86dc00827e0945c8e5039fc3aebaa3c ]
    
    Commit 800d3f561659 ("perf report: Add warning when libunwind not
    compiled in") breaks the s390 platform. S390 uses libdw-dwarf-unwind for
    call chain unwinding and had no support for libunwind.
    
    So the warning "Please install libunwind development packages during the
    perf build." caused the confusion even if the call-graph is displayed
    correctly.
    
    This patch adds checking for HAVE_DWARF_SUPPORT, which is set when
    libdw-dwarf-unwind is compiled in.
    
    Fixes: 800d3f561659 ("perf report: Add warning when libunwind not compiled in")
    Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
    Reviewed-by: Thomas Richter <tmricht@linux.ibm.com>
    Tested-by: Thomas Richter <tmricht@linux.ibm.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jin Yao <yao.jin@intel.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200107191745.18415-1-yao.jin@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f7a33432aa1e0ca0ff11cef12a8b6029950a74a
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jan 31 09:31:05 2020 -0500

    btrfs: do not zero f_bavail if we have available space
    
    commit d55966c4279bfc6a0cf0b32bf13f5df228a1eeb6 upstream.
    
    There was some logic added a while ago to clear out f_bavail in statfs()
    if we did not have enough free metadata space to satisfy our global
    reserve.  This was incorrect at the time, however didn't really pose a
    problem for normal file systems because we would often allocate chunks
    if we got this low on free metadata space, and thus wouldn't really hit
    this case unless we were actually full.
    
    Fast forward to today and now we are much better about not allocating
    metadata chunks all of the time.  Couple this with d792b0f19711 ("btrfs:
    always reserve our entire size for the global reserve") which now means
    we'll easily have a larger global reserve than our free space, we are
    now more likely to trip over this while still having plenty of space.
    
    Fix this by skipping this logic if the global rsv's space_info is not
    full.  space_info->full is 0 unless we've attempted to allocate a chunk
    for that space_info and that has failed.  If this happens then the space
    for the global reserve is definitely sacred and we need to report
    b_avail == 0, but before then we can just use our calculated b_avail.
    
    Reported-by: Martin Steigerwald <martin@lichtvoll.de>
    Fixes: ca8a51b3a979 ("btrfs: statfs: report zero available if metadata are exhausted")
    CC: stable@vger.kernel.org # 4.5+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Tested-By: Martin Steigerwald <martin@lichtvoll.de>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e4d3a8c4885bf7616c34a7eafd225097a0ac856
Author: Praveen Chaudhary <praveen5582@gmail.com>
Date:   Thu Jan 23 12:33:28 2020 -0800

    net: Fix skb->csum update in inet_proto_csum_replace16().
    
    [ Upstream commit 189c9b1e94539b11c80636bc13e9cf47529e7bba ]
    
    skb->csum is updated incorrectly, when manipulation for
    NF_NAT_MANIP_SRC\DST is done on IPV6 packet.
    
    Fix:
    There is no need to update skb->csum in inet_proto_csum_replace16(),
    because update in two fields a.) IPv6 src/dst address and b.) L4 header
    checksum cancels each other for skb->csum calculation. Whereas
    inet_proto_csum_replace4 function needs to update skb->csum, because
    update in 3 fields a.) IPv4 src/dst address, b.) IPv4 Header checksum
    and c.) L4 header checksum results in same diff as L4 Header checksum
    for skb->csum calculation.
    
    [ pablo@netfilter.org: a few comestic documentation edits ]
    Signed-off-by: Praveen Chaudhary <pchaudhary@linkedin.com>
    Signed-off-by: Zhenggen Xu <zxu@linkedin.com>
    Signed-off-by: Andy Stracner <astracner@linkedin.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3239d4b4c2224a7cc4020ea99a9b331ecf9fab4c
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 10:11:13 2020 +0300

    l2t_seq_next should increase position index
    
    [ Upstream commit 66018a102f7756cf72db4d2704e1b93969d9d332 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f2c1c20ddcee8eba9dbe2b0ae14a71c29cd8df9
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 10:11:08 2020 +0300

    seq_tab_next() should increase position index
    
    [ Upstream commit 70a87287c821e9721b62463777f55ba588ac4623 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd3f8ebd7d688821b1e362d105ffb22380b7a96a
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Wed Jan 22 16:15:14 2020 +0200

    net: fsl/fman: rename IF_MODE_XGMII to IF_MODE_10G
    
    [ Upstream commit 457bfc0a4bf531487ecc3cf82ec728a5e114fb1e ]
    
    As the only 10G PHY interface type defined at the moment the code
    was developed was XGMII, although the PHY interface mode used was
    not XGMII, XGMII was used in the code to denote 10G. This patch
    renames the 10G interface mode to remove the ambiguity.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c37d91475be0bf35a46bf99bd35cc95faa7069f8
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Wed Jan 22 15:20:29 2020 +0200

    net/fsl: treat fsl,erratum-a011043
    
    [ Upstream commit 1d3ca681b9d9575ccf696ebc2840a1ebb1fd4074 ]
    
    When fsl,erratum-a011043 is set, adjust for erratum A011043:
    MDIO reads to internal PCS registers may result in having
    the MDIO_CFG[MDIO_RD_ER] bit set, even when there is no
    error and read data (MDIO_DATA[MDIO_DATA]) is correct.
    Software may get false read error when reading internal
    PCS registers through MDIO. As a workaround, all internal
    MDIO accesses should ignore the MDIO_CFG[MDIO_RD_ER] bit.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 567d6f8beb2f790cdb61229ac60c4ed4d4054589
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Wed Jan 22 15:20:28 2020 +0200

    powerpc/fsl/dts: add fsl,erratum-a011043
    
    [ Upstream commit 73d527aef68f7644e59f22ce7f9ac75e7b533aea ]
    
    Add fsl,erratum-a011043 to internal MDIO buses.
    Software may get false read error when reading internal
    PCS registers through MDIO. As a workaround, all internal
    MDIO accesses should ignore the MDIO_CFG[MDIO_RD_ER] bit.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c5d75c9e05cc32e1ef7551711b52828011eb9ac
Author: Manish Chopra <manishc@marvell.com>
Date:   Wed Jan 22 01:43:38 2020 -0800

    qlcnic: Fix CPU soft lockup while collecting firmware dump
    
    [ Upstream commit 22e984493a41bf8081f13d9ed84def3ca8cfd427 ]
    
    Driver while collecting firmware dump takes longer time to
    collect/process some of the firmware dump entries/memories.
    Bigger capture masks makes it worse as it results in larger
    amount of data being collected and results in CPU soft lockup.
    Place cond_resched() in some of the driver flows that are
    expectedly time consuming to relinquish the CPU to avoid CPU
    soft lockup panic.
    
    Signed-off-by: Shahed Shaikh <shshaikh@marvell.com>
    Tested-by: Yonggen Xu <Yonggen.Xu@dell.com>
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c32492c3d6850421a4095b55c2e9867186b9fc23
Author: Raag Jadav <raagjadav@gmail.com>
Date:   Sun Jan 19 16:58:59 2020 +0530

    ARM: dts: am43x-epos-evm: set data pin directions for spi0 and spi1
    
    [ Upstream commit b0b03951544534d6d9ad4aa2787eefec988fff20 ]
    
    Set d0 and d1 pin directions for spi0 and spi1 as per their pinmux.
    
    Signed-off-by: Raag Jadav <raagjadav@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97f0fcaf0da0a519e79e607d77143e3034d3aed1
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Jan 22 16:02:07 2020 +0800

    r8152: get default setting of WOL before initializing
    
    [ Upstream commit 9583a3638dc07cc1878f41265e85ed497f72efcb ]
    
    Initailization would reset runtime suspend by tp->saved_wolopts, so
    the tp->saved_wolopts should be set before initializing.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c82866b251d7587d5f7bdad43ad5adf9395ae716
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Jan 22 15:07:28 2020 +1100

    airo: Add missing CAP_NET_ADMIN check in AIROOLDIOCTL/SIOCDEVPRIVATE
    
    [ Upstream commit 78f7a7566f5eb59321e99b55a6fdb16ea05b37d1 ]
    
    The driver for Cisco Aironet 4500 and 4800 series cards (airo.c),
    implements AIROOLDIOCTL/SIOCDEVPRIVATE in airo_ioctl().
    
    The ioctl handler copies an aironet_ioctl struct from userspace, which
    includes a command. Some of the commands are handled in readrids(),
    where the user controlled command is converted into a driver-internal
    value called "ridcode".
    
    There are two command values, AIROGWEPKTMP and AIROGWEPKNV, which
    correspond to ridcode values of RID_WEP_TEMP and RID_WEP_PERM
    respectively. These commands both have checks that the user has
    CAP_NET_ADMIN, with the comment that "Only super-user can read WEP
    keys", otherwise they return -EPERM.
    
    However there is another command value, AIRORRID, that lets the user
    specify the ridcode value directly, with no other checks. This means
    the user can bypass the CAP_NET_ADMIN check on AIROGWEPKTMP and
    AIROGWEPKNV.
    
    Fix it by moving the CAP_NET_ADMIN check out of the command handling
    and instead do it later based on the ridcode. That way regardless of
    whether the ridcode is set via AIROGWEPKTMP or AIROGWEPKNV, or passed
    in using AIRORID, we always do the CAP_NET_ADMIN check.
    
    Found by Ilja by code inspection, not tested as I don't have the
    required hardware.
    
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb935b34400c38350a70378a057899048432658e
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Jan 22 15:07:27 2020 +1100

    airo: Fix possible info leak in AIROOLDIOCTL/SIOCDEVPRIVATE
    
    [ Upstream commit d6bce2137f5d6bb1093e96d2f801479099b28094 ]
    
    The driver for Cisco Aironet 4500 and 4800 series cards (airo.c),
    implements AIROOLDIOCTL/SIOCDEVPRIVATE in airo_ioctl().
    
    The ioctl handler copies an aironet_ioctl struct from userspace, which
    includes a command and a length. Some of the commands are handled in
    readrids(), which kmalloc()'s a buffer of RIDSIZE (2048) bytes.
    
    That buffer is then passed to PC4500_readrid(), which has two cases.
    The else case does some setup and then reads up to RIDSIZE bytes from
    the hardware into the kmalloc()'ed buffer.
    
    Here len == RIDSIZE, pBuf is the kmalloc()'ed buffer:
    
            // read the rid length field
            bap_read(ai, pBuf, 2, BAP1);
            // length for remaining part of rid
            len = min(len, (int)le16_to_cpu(*(__le16*)pBuf)) - 2;
            ...
            // read remainder of the rid
            rc = bap_read(ai, ((__le16*)pBuf)+1, len, BAP1);
    
    PC4500_readrid() then returns to readrids() which does:
    
            len = comp->len;
            if (copy_to_user(comp->data, iobuf, min(len, (int)RIDSIZE))) {
    
    Where comp->len is the user controlled length field.
    
    So if the "rid length field" returned by the hardware is < 2048, and
    the user requests 2048 bytes in comp->len, we will leak the previous
    contents of the kmalloc()'ed buffer to userspace.
    
    Fix it by kzalloc()'ing the buffer.
    
    Found by Ilja by code inspection, not tested as I don't have the
    required hardware.
    
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ac901fc064ddcfbe3e24af4a25f67ee182e4581
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Jan 10 12:28:07 2020 +0000

    tee: optee: Fix compilation issue with nommu
    
    [ Upstream commit 9e0caab8e0f96f0af7d1dd388e62f44184a75372 ]
    
    The optee driver uses specific page table types to verify if a memory
    region is normal. These types are not defined in nommu systems. Trying
    to compile the driver in these systems results in a build error:
    
      linux/drivers/tee/optee/call.c: In function ‘is_normal_memory’:
      linux/drivers/tee/optee/call.c:533:26: error: ‘L_PTE_MT_MASK’ undeclared
         (first use in this function); did you mean ‘PREEMPT_MASK’?
         return (pgprot_val(p) & L_PTE_MT_MASK) == L_PTE_MT_WRITEALLOC;
                                 ^~~~~~~~~~~~~
                                 PREEMPT_MASK
      linux/drivers/tee/optee/call.c:533:26: note: each undeclared identifier is
         reported only once for each function it appears in
      linux/drivers/tee/optee/call.c:533:44: error: ‘L_PTE_MT_WRITEALLOC’ undeclared
         (first use in this function)
         return (pgprot_val(p) & L_PTE_MT_MASK) == L_PTE_MT_WRITEALLOC;
                                                ^~~~~~~~~~~~~~~~~~~
    
    Make the optee driver depend on MMU to fix the compilation issue.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    [jw: update commit title]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8071075d6e9fcb925568febf3091a4f85da6397b
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Mon Jan 20 15:07:46 2020 +0100

    ARM: 8955/1: virt: Relax arch timer version check during early boot
    
    [ Upstream commit 6849b5eba1965ceb0cad3a75877ef4569dd3638e ]
    
    Updates to the Generic Timer architecture allow ID_PFR1.GenTimer to
    have values other than 0 or 1 while still preserving backward
    compatibility. At the moment, Linux is quite strict in the way it
    handles this field at early boot and will not configure arch timer if
    it doesn't find the value 1.
    
    Since here use ubfx for arch timer version extraction (hyb-stub build
    with -march=armv7-a, so it is safe)
    
    To help backports (even though the code was correct at the time of writing)
    
    Fixes: 8ec58be9f3ff ("ARM: virt: arch_timers: enable access to physical timers")
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17176e58b03797d414acfba9bb74cb8d5274255f
Author: Hannes Reinecke <hare@suse.de>
Date:   Thu Jan 16 11:20:53 2020 +0100

    scsi: fnic: do not queue commands during fwreset
    
    [ Upstream commit 0e2209629fec427ba75a6351486153a9feddd36b ]
    
    When a link is going down the driver will be calling fnic_cleanup_io(),
    which will traverse all commands and calling 'done' for each found command.
    While the traversal is handled under the host_lock, calling 'done' happens
    after the host_lock is being dropped.
    
    As fnic_queuecommand_lck() is being called with the host_lock held, it
    might well be that it will pick the command being selected for abortion
    from the above routine and enqueue it for sending, but then 'done' is being
    called on that very command from the above routine.
    
    Which of course confuses the hell out of the scsi midlayer.
    
    So fix this by not queueing commands when fnic_cleanup_io is active.
    
    Link: https://lore.kernel.org/r/20200116102053.62755-1-hare@suse.de
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33bafd311856abf36e3521fe4c02317fbe5c8613
Author: Xu Wang <vulab@iscas.ac.cn>
Date:   Mon Jan 13 09:00:36 2020 +0000

    xfrm: interface: do not confirm neighbor when do pmtu update
    
    [ Upstream commit 8aaea2b0428b6aad7c7e22d3fddc31a78bb1d724 ]
    
    When do IPv6 tunnel PMTU update and calls __ip6_rt_update_pmtu() in the end,
    we should not call dst_confirm_neigh() as there is no two-way communication.
    
    Signed-off-by: Xu Wang <vulab@iscas.ac.cn>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ea046c4df420a5ef982753d746d5161c61d660a
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon Jan 13 09:32:47 2020 +0100

    xfrm interface: fix packet tx through bpf_redirect()
    
    [ Upstream commit f042365dbffea98fb8148c98c700402e8d099f02 ]
    
    With an ebpf program that redirects packets through a xfrm interface,
    packets are dropped because no dst is attached to skb.
    
    This could also be reproduced with an AF_PACKET socket, with the following
    python script (xfrm1 is a xfrm interface):
    
     import socket
     send_s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 0)
     # scapy
     # p = IP(src='10.100.0.2', dst='10.200.0.1')/ICMP(type='echo-request')
     # raw(p)
     req = b'E\x00\x00\x1c\x00\x01\x00\x00@\x01e\xb2\nd\x00\x02\n\xc8\x00\x01\x08\x00\xf7\xff\x00\x00\x00\x00'
     send_s.sendto(req, ('xfrm1', 0x800, 0, 0))
    
    It was also not possible to send an ip packet through an AF_PACKET socket
    because a LL header was expected. Let's remove those LL header constraints.
    
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 011e94777d909f2551b0ade17bdad3672f979511
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Mon Jan 13 09:32:46 2020 +0100

    vti[6]: fix packet tx through bpf_redirect()
    
    [ Upstream commit 95224166a9032ff5d08fca633d37113078ce7d01 ]
    
    With an ebpf program that redirects packets through a vti[6] interface,
    the packets are dropped because no dst is attached.
    
    This could also be reproduced with an AF_PACKET socket, with the following
    python script (vti1 is an ip_vti interface):
    
     import socket
     send_s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, 0)
     # scapy
     # p = IP(src='10.100.0.2', dst='10.200.0.1')/ICMP(type='echo-request')
     # raw(p)
     req = b'E\x00\x00\x1c\x00\x01\x00\x00@\x01e\xb2\nd\x00\x02\n\xc8\x00\x01\x08\x00\xf7\xff\x00\x00\x00\x00'
     send_s.sendto(req, ('vti1', 0x800, 0, 0))
    
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a2c1d387f59f5917922bd1154978af7e9b453de
Author: Matwey V. Kornilov <matwey@sai.msu.ru>
Date:   Mon Jan 6 16:09:08 2020 +0300

    ARM: dts: am335x-boneblack-common: fix memory size
    
    [ Upstream commit 5abd45ea0fc3060f7805e131753fdcbafd6c6618 ]
    
    BeagleBone Black series is equipped with 512MB RAM
    whereas only 256MB is included from am335x-bone-common.dtsi
    
    This leads to an issue with unusual setups when devicetree
    is loaded by GRUB2 directly.
    
    Signed-off-by: Matwey V. Kornilov <matwey@sai.msu.ru>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c00f819a72150708b9f9e0a2b031a8fdafa7b15
Author: Haim Dreyfuss <haim.dreyfuss@intel.com>
Date:   Wed Nov 27 14:55:58 2019 -0500

    iwlwifi: Don't ignore the cap field upon mcc update
    
    [ Upstream commit 2763bba6328c53c455d8f7f5302b80030551c31b ]
    
    When receiving a new MCC driver get all the data about the new country
    code and its regulatory information.
    Mistakenly, we ignored the cap field, which includes global regulatory
    information which should be applies to every channel.
    Fix it.
    
    Signed-off-by: Haim Dreyfuss <haim.dreyfuss@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 313abce0a1498db52ce825916a1847ba24618106
Author: Ilie Halip <ilie.halip@gmail.com>
Date:   Wed Jan 15 13:32:42 2020 +0200

    riscv: delete temporary files
    
    [ Upstream commit 95f4d9cced96afa9c69b3da8e79e96102c84fc60 ]
    
    Temporary files used in the VDSO build process linger on even after make
    mrproper: vdso-dummy.o.tmp, vdso.so.dbg.tmp.
    
    Delete them once they're no longer needed.
    
    Signed-off-by: Ilie Halip <ilie.halip@gmail.com>
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23b8f9d7aa90574daf83ccbb541370c17c538372
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Fri Jan 17 00:32:46 2020 -0500

    bnxt_en: Fix ipv6 RFS filter matching logic.
    
    [ Upstream commit 6fc7caa84e713f7627e171ab1e7c4b5be0dc9b3d ]
    
    Fix bnxt_fltr_match() to match ipv6 source and destination addresses.
    The function currently only checks ipv4 addresses and will not work
    corrently on ipv6 filters.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f9681a11b18f33aa408adee38b150e6c8726057
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Jan 16 12:55:48 2020 -0800

    net: dsa: bcm_sf2: Configure IMP port for 2Gb/sec
    
    [ Upstream commit 8f1880cbe8d0d49ebb7e9ae409b3b96676e5aa97 ]
    
    With the implementation of the system reset controller we lost a setting
    that is currently applied by the bootloader and which configures the IMP
    port for 2Gb/sec, the default is 1Gb/sec. This is needed given the
    number of ports and applications we expect to run so bring back that
    setting.
    
    Fixes: 01b0ac07589e ("net: dsa: bcm_sf2: Add support for optional reset controller line")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f19727f16fa96fa2b61b134e3a4be48d3128076
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jan 16 08:58:05 2020 +0100

    netfilter: nft_tunnel: ERSPAN_VERSION must not be null
    
    [ Upstream commit 9ec22d7c6c69146180577f3ad5fdf504beeaee62 ]
    
    Fixes: af308b94a2a4a5 ("netfilter: nf_tables: add tunnel support")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffd89a6c2daace7a9e33adb665f8f1bb8e44c7e3
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 7 21:07:35 2020 +0100

    wireless: wext: avoid gcc -O3 warning
    
    [ Upstream commit e16119655c9e6c4aa5767cd971baa9c491f41b13 ]
    
    After the introduction of CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3,
    the wext code produces a bogus warning:
    
    In function 'iw_handler_get_iwstats',
        inlined from 'ioctl_standard_call' at net/wireless/wext-core.c:1015:9,
        inlined from 'wireless_process_ioctl' at net/wireless/wext-core.c:935:10,
        inlined from 'wext_ioctl_dispatch.part.8' at net/wireless/wext-core.c:986:8,
        inlined from 'wext_handle_ioctl':
    net/wireless/wext-core.c:671:3: error: argument 1 null where non-null expected [-Werror=nonnull]
       memcpy(extra, stats, sizeof(struct iw_statistics));
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    In file included from arch/x86/include/asm/string.h:5,
    net/wireless/wext-core.c: In function 'wext_handle_ioctl':
    arch/x86/include/asm/string_64.h:14:14: note: in a call to function 'memcpy' declared here
    
    The problem is that ioctl_standard_call() sometimes calls the handler
    with a NULL argument that would cause a problem for iw_handler_get_iwstats.
    However, iw_handler_get_iwstats never actually gets called that way.
    
    Marking that function as noinline avoids the warning and leads
    to slightly smaller object code as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20200107200741.3588770-1-arnd@arndb.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3f51f28574a2b1888d910d30c7a5e7c250d0062
Author: Jouni Malinen <j@w1.fi>
Date:   Tue Jan 7 17:35:45 2020 +0200

    mac80211: Fix TKIP replay protection immediately after key setup
    
    [ Upstream commit 6f601265215a421f425ba3a4850a35861d024643 ]
    
    TKIP replay protection was skipped for the very first frame received
    after a new key is configured. While this is potentially needed to avoid
    dropping a frame in some cases, this does leave a window for replay
    attacks with group-addressed frames at the station side. Any earlier
    frame sent by the AP using the same key would be accepted as a valid
    frame and the internal RSC would then be updated to the TSC from that
    frame. This would allow multiple previously transmitted group-addressed
    frames to be replayed until the next valid new group-addressed frame
    from the AP is received by the station.
    
    Fix this by limiting the no-replay-protection exception to apply only
    for the case where TSC=0, i.e., when this is for the very first frame
    protected using the new key, and the local RSC had not been set to a
    higher value when configuring the key (which may happen with GTK).
    
    Signed-off-by: Jouni Malinen <j@w1.fi>
    Link: https://lore.kernel.org/r/20200107153545.10934-1-j@w1.fi
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4f85674e4693904ade7cbf6722d0d105d8062d8
Author: Orr Mazor <orr.mazor@tandemg.com>
Date:   Sun Dec 22 14:55:31 2019 +0000

    cfg80211: Fix radar event during another phy CAC
    
    [ Upstream commit 26ec17a1dc5ecdd8d91aba63ead6f8b5ad5dea0d ]
    
    In case a radar event of CAC_FINISHED or RADAR_DETECTED
    happens during another phy is during CAC we might need
    to cancel that CAC.
    
    If we got a radar in a channel that another phy is now
    doing CAC on then the CAC should be canceled there.
    
    If, for example, 2 phys doing CAC on the same channels,
    or on comptable channels, once on of them will finish his
    CAC the other might need to cancel his CAC, since it is no
    longer relevant.
    
    To fix that the commit adds an callback and implement it in
    mac80211 to end CAC.
    This commit also adds a call to said callback if after a radar
    event we see the CAC is no longer relevant
    
    Signed-off-by: Orr Mazor <Orr.Mazor@tandemg.com>
    Reviewed-by: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
    Link: https://lore.kernel.org/r/20191222145449.15792-1-Orr.Mazor@tandemg.com
    [slightly reformat/reword commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc9a80e48e853cacf87a11884beaadd335439e44
Author: Ganapathi Bhat <ganapathi.bhat@nxp.com>
Date:   Fri Dec 20 10:14:32 2019 +0000

    wireless: fix enabling channel 12 for custom regulatory domain
    
    [ Upstream commit c4b9d655e445a8be0bff624aedea190606b5ebbc ]
    
    Commit e33e2241e272 ("Revert "cfg80211: Use 5MHz bandwidth by
    default when checking usable channels"") fixed a broken
    regulatory (leaving channel 12 open for AP where not permitted).
    Apply a similar fix to custom regulatory domain processing.
    
    Signed-off-by: Cathy Luo <xiaohua.luo@nxp.com>
    Signed-off-by: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Link: https://lore.kernel.org/r/1576836859-8945-1-git-send-email-ganapathi.bhat@nxp.com
    [reword commit message, fix coding style, add a comment]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a618848babc37ebc6d11f6df57a17e71e2d6bc28
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri Jan 3 17:39:25 2020 +0100

    parisc: Use proper printk format for resource_size_t
    
    [ Upstream commit 4f80b70e1953cb846dbdd1ce72cb17333d4c8d11 ]
    
    resource_size_t should be printed with its own size-independent format
    to fix warnings when compiling on 64-bit platform (e.g. with
    COMPILE_TEST):
    
        arch/parisc/kernel/drivers.c: In function 'print_parisc_device':
        arch/parisc/kernel/drivers.c:892:9: warning:
            format '%p' expects argument of type 'void *',
            but argument 4 has type 'resource_size_t {aka unsigned int}' [-Wformat=]
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78c15b2405f5a9f71990b27e43edbc3c32afd5eb
Author: Kristian Evensen <kristian.evensen@gmail.com>
Date:   Mon Jan 13 14:57:40 2020 +0100

    qmi_wwan: Add support for Quectel RM500Q
    
    [ Upstream commit a9ff44f0e61d074f29770413fef6a5452be7b83e ]
    
    RM500Q is a 5G module from Quectel, supporting both standalone and
    non-standalone modes. The normal Quectel quirks apply (DTR and dynamic
    interface numbers).
    
    Signed-off-by: Kristian Evensen <kristian.evensen@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7642b2c291382bb577e1d70aff915f385bc4418
Author: Arnaud Pouliquen <arnaud.pouliquen@st.com>
Date:   Mon Jan 13 11:04:00 2020 +0100

    ASoC: sti: fix possible sleep-in-atomic
    
    [ Upstream commit ce780a47c3c01e1e179d0792df6b853a913928f1 ]
    
    Change mutex and spinlock management to avoid sleep
    in atomic issue.
    
    Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@st.com>
    Link: https://lore.kernel.org/r/20200113100400.30472-1-arnaud.pouliquen@st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 678ad8eb4250dcffe65c527d9865633b9512e0cb
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Jan 6 15:42:19 2020 +0100

    platform/x86: GPD pocket fan: Allow somewhat lower/higher temperature limits
    
    [ Upstream commit 1f27dbd8265dbb379926c8f6a4453fe7fe26d7a3 ]
    
    Allow the user to configure the fan to turn on / speed-up at lower
    thresholds then before (20 degrees Celcius as minimum instead of 40) and
    likewise also allow the user to delay the fan speeding-up till the
    temperature hits 90 degrees Celcius (was 70).
    
    Cc: Jason Anderson <jasona.594@gmail.com>
    Reported-by: Jason Anderson <jasona.594@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adbaaac0a35b2a4fd7a66a17e8069a8b28c52ad3
Author: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
Date:   Wed Dec 4 11:40:26 2019 +0100

    igb: Fix SGMII SFP module discovery for 100FX/LX.
    
    [ Upstream commit 5365ec1aeff5b9f2962a9c9b31d63f9dad7e0e2d ]
    
    Changing the link mode should also be done for 100BaseFX SGMII modules,
    otherwise they just don't work when the default link mode in CTRL_EXT
    coming from the EEPROM is SERDES.
    
    Additionally 100Base-LX SGMII SFP modules are also supported now, which
    was not the case before.
    
    Tested with an i210 using Flexoptix S.1303.2M.G 100FX and
    S.1303.10.G 100LX SGMII SFP modules.
    
    Signed-off-by: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4600709706f10a261df2381b122c55a46f40888e
Author: Cambda Zhu <cambda@linux.alibaba.com>
Date:   Wed Nov 27 17:03:55 2019 +0800

    ixgbe: Fix calculation of queue with VFs and flow director on interface flap
    
    [ Upstream commit 4fad78ad6422d9bca62135bbed8b6abc4cbb85b8 ]
    
    This patch fixes the calculation of queue when we restore flow director
    filters after resetting adapter. In ixgbe_fdir_filter_restore(), filter's
    vf may be zero which makes the queue outside of the rx_ring array.
    
    The calculation is changed to the same as ixgbe_add_ethtool_fdir_entry().
    
    Signed-off-by: Cambda Zhu <cambda@linux.alibaba.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd12a4ffd665e733d8028f540267894236d60e82
Author: Radoslaw Tyl <radoslawx.tyl@intel.com>
Date:   Mon Nov 25 15:24:52 2019 +0100

    ixgbevf: Remove limit of 10 entries for unicast filter list
    
    [ Upstream commit aa604651d523b1493988d0bf6710339f3ee60272 ]
    
    Currently, though the FDB entry is added to VF, it does not appear in
    RAR filters. VF driver only allows to add 10 entries. Attempting to add
    another causes an error. This patch removes limitation and allows use of
    all free RAR entries for the FDB if needed.
    
    Fixes: 46ec20ff7d ("ixgbevf: Add macvlan support in the set rx mode op")
    Signed-off-by: Radoslaw Tyl <radoslawx.tyl@intel.com>
    Acked-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38c78f918e8df9c2c4027ec9a9e95072ce934815
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jan 6 04:47:07 2020 +0300

    ASoC: rt5640: Fix NULL dereference on module unload
    
    [ Upstream commit 89b71b3f02d8ae5a08a1dd6f4a2098b7b868d498 ]
    
    The rt5640->jack is NULL if jack is already disabled at the time of
    driver's module unloading.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20200106014707.11378-1-digetx@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68229946d8f26824de30d57db4d966c57ad2ec21
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Wed Dec 18 20:04:54 2019 +0100

    clk: mmp2: Fix the order of timer mux parents
    
    [ Upstream commit 8bea5ac0fbc5b2103f8779ddff216122e3c2e1ad ]
    
    Determined empirically, no documentation is available.
    
    The OLPC XO-1.75 laptop used parent 1, that one being VCTCXO/4 (65MHz), but
    thought it's a VCTCXO/2 (130MHz). The mmp2 timer driver, not knowing
    what is going on, ended up just dividing the rate as of
    commit f36797ee4380 ("ARM: mmp/mmp2: dt: enable the clock")'
    
    Link: https://lore.kernel.org/r/20191218190454.420358-3-lkundrak@v3.sk
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Acked-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b81007aecba9fdc43367da4201e2009473c7b76
Author: Markus Theil <markus.theil@tu-ilmenau.de>
Date:   Tue Dec 3 19:06:44 2019 +0100

    mac80211: mesh: restrict airtime metric to peered established plinks
    
    [ Upstream commit 02a614499600af836137c3fbc4404cd96365fff2 ]
    
    The following warning is triggered every time an unestablished mesh peer
    gets dumped. Checks if a peer link is established before retrieving the
    airtime link metric.
    
    [ 9563.022567] WARNING: CPU: 0 PID: 6287 at net/mac80211/mesh_hwmp.c:345
                   airtime_link_metric_get+0xa2/0xb0 [mac80211]
    [ 9563.022697] Hardware name: PC Engines apu2/apu2, BIOS v4.10.0.3
    [ 9563.022756] RIP: 0010:airtime_link_metric_get+0xa2/0xb0 [mac80211]
    [ 9563.022838] Call Trace:
    [ 9563.022897]  sta_set_sinfo+0x936/0xa10 [mac80211]
    [ 9563.022964]  ieee80211_dump_station+0x6d/0x90 [mac80211]
    [ 9563.023062]  nl80211_dump_station+0x154/0x2a0 [cfg80211]
    [ 9563.023120]  netlink_dump+0x17b/0x370
    [ 9563.023130]  netlink_recvmsg+0x2a4/0x480
    [ 9563.023140]  ____sys_recvmsg+0xa6/0x160
    [ 9563.023154]  ___sys_recvmsg+0x93/0xe0
    [ 9563.023169]  __sys_recvmsg+0x7e/0xd0
    [ 9563.023210]  do_syscall_64+0x4e/0x140
    [ 9563.023217]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Signed-off-by: Markus Theil <markus.theil@tu-ilmenau.de>
    Link: https://lore.kernel.org/r/20191203180644.70653-1-markus.theil@tu-ilmenau.de
    [rewrite commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e37ee4b177a690f57be32d16f8340c221532a3df
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Dec 28 20:59:22 2019 -0600

    clk: sunxi-ng: h6-r: Fix AR100/R_APB2 parent order
    
    [ Upstream commit 0c545240aebc2ccb8f661dc54283a14d64659804 ]
    
    According to the BSP source code, both the AR100 and R_APB2 clocks have
    PLL_PERIPH0 as mux index 3, not 2 as it was on previous chips. The pre-
    divider used for PLL_PERIPH0 should be changed to index 3 to match.
    
    This was verified by running a rough benchmark on the AR100 with various
    clock settings:
    
            | mux | pre-divider | iterations/second | clock source |
            |=====|=============|===================|==============|
            |   0 |           0 |  19033   (stable) |       osc24M |
            |   2 |           5 |  11466 (unstable) |  iosc/osc16M |
            |   2 |          17 |  11422 (unstable) |  iosc/osc16M |
            |   3 |           5 |  85338   (stable) |  pll-periph0 |
            |   3 |          17 |  27167   (stable) |  pll-periph0 |
    
    The relative performance numbers all match up (with pll-periph0 running
    at its default 600MHz).
    
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fb761dbbabc62c28e10910523eae7810b390f68
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Wed Dec 11 11:17:12 2019 -0500

    rseq: Unregister rseq for clone CLONE_VM
    
    [ Upstream commit 463f550fb47bede3a5d7d5177f363a6c3b45d50b ]
    
    It has been reported by Google that rseq is not behaving properly
    with respect to clone when CLONE_VM is used without CLONE_THREAD.
    
    It keeps the prior thread's rseq TLS registered when the TLS of the
    thread has moved, so the kernel can corrupt the TLS of the parent.
    
    The approach of clearing the per task-struct rseq registration
    on clone with CLONE_THREAD flag is incomplete. It does not cover
    the use-case of clone with CLONE_VM set, but without CLONE_THREAD.
    
    Here is the rationale for unregistering rseq on clone with CLONE_VM
    flag set:
    
    1) CLONE_THREAD requires CLONE_SIGHAND, which requires CLONE_VM to be
       set. Therefore, just checking for CLONE_VM covers all CLONE_THREAD
       uses. There is no point in checking for both CLONE_THREAD and
       CLONE_VM,
    
    2) There is the possibility of an unlikely scenario where CLONE_SETTLS
       is used without CLONE_VM. In order to be an issue, it would require
       that the rseq TLS is in a shared memory area.
    
       I do not plan on adding CLONE_SETTLS to the set of clone flags which
       unregister RSEQ, because it would require that we also unregister RSEQ
       on set_thread_area(2) and arch_prctl(2) ARCH_SET_FS for completeness.
       So rather than doing a partial solution, it appears better to let
       user-space explicitly perform rseq unregistration across clone if
       needed in scenarios where CLONE_VM is not set.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191211161713.4490-3-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cb939e8d47d2edf74761d885aeb66a75d0620b5
Author: Hewenliang <hewenliang4@huawei.com>
Date:   Mon Dec 9 01:35:49 2019 -0500

    tools lib traceevent: Fix memory leakage in filter_event
    
    [ Upstream commit f84ae29a6169318f9c929720c49d96323d2bbab9 ]
    
    It is necessary to call free_arg(arg) when add_filter_type() returns NULL
    in filter_event().
    
    Signed-off-by: Hewenliang <hewenliang4@huawei.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Feilong Lin <linfeilong@huawei.com>
    Cc: Tzvetomir Stoyanov <tstoyanov@vmware.com>
    Link: http://lore.kernel.org/lkml/20191209063549.59941-1-hewenliang4@huawei.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17d87b3e0b2e26b1ce13c70c10e998cbdcf2bb59
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Wed Dec 11 22:03:14 2019 -0600

    soc: ti: wkup_m3_ipc: Fix race condition with rproc_boot
    
    [ Upstream commit 03729cfa0d543bc996bf959e762ec999afc8f3d2 ]
    
    Any user of wkup_m3_ipc calls wkup_m3_ipc_get to get a handle and this
    checks the value of the static variable m3_ipc_state to see if the
    wkup_m3 is ready. Currently this is populated during probe before
    rproc_boot has been called, meaning there is a window of time that
    wkup_m3_ipc_get can return a valid handle but the wkup_m3 itself is not
    ready, leading to invalid IPC calls to the wkup_m3 and system
    instability.
    
    To avoid this, move the population of the m3_ipc_state variable until
    after rproc_boot has succeeded to guarantee a valid and usable handle
    is always returned.
    
    Reported-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d22af64f8283e732d6f858da90fcd8cee90361d
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Dec 17 14:21:24 2019 +0530

    ARM: dts: beagle-x15-common: Model 5V0 regulator
    
    [ Upstream commit e17e7c498d4f734df93c300441e100818ed58168 ]
    
    On am57xx-beagle-x15, 5V0 is connected to P16, P17, P18 and P19
    connectors. On am57xx-evm, 5V0 regulator is used to get 3V6 regulator
    which is connected to the COMQ port. Model 5V0 regulator here in order
    for it to be used in am57xx-evm to model 3V6 regulator.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c2c6cebdd0e1126636b2f6d73c066c9973441b9
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Dec 17 14:21:22 2019 +0530

    ARM: dts: am57xx-beagle-x15/am57xx-idk: Remove "gpios" for endpoint dt nodes
    
    [ Upstream commit 81cc0877840f72210e809bbedd6346d686560fc1 ]
    
    PERST# line in the PCIE connector is driven by the host mode and not
    EP mode. The gpios property here is used for driving the PERST# line.
    Remove gpios property from all endpoint device tree nodes.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 645d72fb040bf632d665d6f0abdec33e73747755
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Wed Dec 11 15:52:17 2019 +0100

    ARM: dts: sun8i: a83t: Correct USB3503 GPIOs polarity
    
    [ Upstream commit 1c226017d3ec93547b58082bdf778d9db7401c95 ]
    
    Current USB3503 driver ignores GPIO polarity and always operates as if the
    GPIO lines were flagged as ACTIVE_HIGH. Fix the polarity for the existing
    USB3503 chip applications to match the chip specification and common
    convention for naming the pins. The only pin, which has to be ACTIVE_LOW
    is the reset pin. The remaining are ACTIVE_HIGH. This change allows later
    to fix the USB3503 driver to properly use generic GPIO bindings and read
    polarity from DT.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bf57f087e57d6eb5fc80b6a413897a51655ca76
Author: Lee Jones <lee.jones@linaro.org>
Date:   Mon Feb 3 13:21:30 2020 +0000

    media: si470x-i2c: Move free() past last use of 'radio'
    
    A pointer to 'struct si470x_device' is currently used after free:
    
      drivers/media/radio/si470x/radio-si470x-i2c.c:462:25-30: ERROR: reference
        preceded by free on line 460
    
    Shift the call to free() down past its final use.
    
    NB: Not sending to Mainline, since the problem does not exist there, it was
    caused by the backport of 2df200ab234a ("media: si470x-i2c: add missed
    operations in remove") to the stable trees.
    
    Cc: <stable@vger.kernel.org> # v3.18+
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d2663091292bf78fd942ff32a7e068669d742b0
Author: Michal Koutný <mkoutny@suse.com>
Date:   Thu Jan 9 16:05:59 2020 +0100

    cgroup: Prevent double killing of css when enabling threaded cgroup
    
    commit 3bc0bb36fa30e95ca829e9cf480e1ef7f7638333 upstream.
    
    The test_cgcore_no_internal_process_constraint_on_threads selftest when
    running with subsystem controlling noise triggers two warnings:
    
    > [  597.443115] WARNING: CPU: 1 PID: 28167 at kernel/cgroup/cgroup.c:3131 cgroup_apply_control_enable+0xe0/0x3f0
    > [  597.443413] WARNING: CPU: 1 PID: 28167 at kernel/cgroup/cgroup.c:3177 cgroup_apply_control_disable+0xa6/0x160
    
    Both stem from a call to cgroup_type_write. The first warning was also
    triggered by syzkaller.
    
    When we're switching cgroup to threaded mode shortly after a subsystem
    was disabled on it, we can see the respective subsystem css dying there.
    
    The warning in cgroup_apply_control_enable is harmless in this case
    since we're not adding new subsys anyway.
    The warning in cgroup_apply_control_disable indicates an attempt to kill
    css of recently disabled subsystem repeatedly.
    
    The commit prevents these situations by making cgroup_type_write wait
    for all dying csses to go away before re-applying subtree controls.
    When at it, the locations of WARN_ON_ONCE calls are moved so that
    warning is triggered only when we are about to misuse the dying css.
    
    Reported-by: syzbot+5493b2a54d31d6aea629@syzkaller.appspotmail.com
    Reported-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Michal Koutný <mkoutny@suse.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71729b05e727c06a78e99a42c234f8ad4ea2aed9
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jan 15 20:49:04 2020 +0300

    Bluetooth: Fix race condition in hci_release_sock()
    
    commit 11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8 upstream.
    
    Syzbot managed to trigger a use after free "KASAN: use-after-free Write
    in hci_sock_bind".  I have reviewed the code manually and one possibly
    cause I have found is that we are not holding lock_sock(sk) when we do
    the hci_dev_put(hdev) in hci_sock_release().  My theory is that the bind
    and the release are racing against each other which results in this use
    after free.
    
    Reported-by: syzbot+eba992608adf3d796bcc@syzkaller.appspotmail.com
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb56687038cfd0e82b6185bdb134d5d7c2b6073f
Author: Zhenzhong Duan <zhenzhong.duan@gmail.com>
Date:   Mon Jan 13 11:48:42 2020 +0800

    ttyprintk: fix a potential deadlock in interrupt context issue
    
    commit 9a655c77ff8fc65699a3f98e237db563b37c439b upstream.
    
    tpk_write()/tpk_close() could be interrupted when holding a mutex, then
    in timer handler tpk_write() may be called again trying to acquire same
    mutex, lead to deadlock.
    
    Google syzbot reported this issue with CONFIG_DEBUG_ATOMIC_SLEEP
    enabled:
    
    BUG: sleeping function called from invalid context at
    kernel/locking/mutex.c:938
    in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 0, name: swapper/1
    1 lock held by swapper/1/0:
    ...
    Call Trace:
      <IRQ>
      dump_stack+0x197/0x210
      ___might_sleep.cold+0x1fb/0x23e
      __might_sleep+0x95/0x190
      __mutex_lock+0xc5/0x13c0
      mutex_lock_nested+0x16/0x20
      tpk_write+0x5d/0x340
      resync_tnc+0x1b6/0x320
      call_timer_fn+0x1ac/0x780
      run_timer_softirq+0x6c3/0x1790
      __do_softirq+0x262/0x98c
      irq_exit+0x19b/0x1e0
      smp_apic_timer_interrupt+0x1a3/0x610
      apic_timer_interrupt+0xf/0x20
      </IRQ>
    
    See link https://syzkaller.appspot.com/bug?extid=2eeef62ee31f9460ad65 for
    more details.
    
    Fix it by using spinlock in process context instead of mutex and having
    interrupt disabled in critical section.
    
    Reported-by: syzbot+2eeef62ee31f9460ad65@syzkaller.appspotmail.com
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@gmail.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200113034842.435-1-zhenzhong.duan@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f1c7fe1d57e37d03107c75f5deaa6ead31b8a4d
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Thu Jan 2 12:53:49 2020 +0900

    tomoyo: Use atomic_t for statistics counter
    
    commit a8772fad0172aeae339144598b809fd8d4823331 upstream.
    
    syzbot is reporting that there is a race at tomoyo_stat_update() [1].
    Although it is acceptable to fail to track exact number of times policy
    was updated, convert to atomic_t because this is not a hot path.
    
    [1] https://syzkaller.appspot.com/bug?id=a4d7b973972eeed410596e6604580e0133b0fc04
    
    Reported-by: syzbot <syzbot+efea72d4a0a1d03596cd@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddba92fa8338d3ee081d9be7702c287a8daf9111
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Nov 12 10:22:28 2019 +0100

    media: dvb-usb/dvb-usb-urb.c: initialize actlen to 0
    
    commit 569bc8d6a6a50acb5fcf07fb10b8d2d461fdbf93 upstream.
    
    This fixes a syzbot failure since actlen could be uninitialized,
    but it was still used.
    
    Syzbot link:
    
    https://syzkaller.appspot.com/bug?extid=6bf9606ee955b646c0e1
    
    Reported-and-tested-by: syzbot+6bf9606ee955b646c0e1@syzkaller.appspotmail.com
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Acked-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f43d55a25534d4b81ca7a981801354b7f07ce00
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Nov 12 10:22:24 2019 +0100

    media: gspca: zero usb_buf
    
    commit de89d0864f66c2a1b75becfdd6bf3793c07ce870 upstream.
    
    Allocate gspca_dev->usb_buf with kzalloc instead of kmalloc to
    ensure it is property zeroed. This fixes various syzbot errors
    about uninitialized data.
    
    Syzbot links:
    
    https://syzkaller.appspot.com/bug?extid=32310fc2aea76898d074
    https://syzkaller.appspot.com/bug?extid=99706d6390be1ac542a2
    https://syzkaller.appspot.com/bug?extid=64437af5c781a7f0e08e
    
    Reported-and-tested-by: syzbot+32310fc2aea76898d074@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+99706d6390be1ac542a2@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+64437af5c781a7f0e08e@syzkaller.appspotmail.com
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 373403c65479168ff6cf9b437447ac1a3eb3beef
Author: Sean Young <sean@mess.org>
Date:   Sun Nov 10 11:25:13 2019 +0100

    media: vp7045: do not read uninitialized values if usb transfer fails
    
    commit 26cff637121d8bb866ebd6515c430ac890e6ec80 upstream.
    
    It is not a fatal error if reading the mac address or the remote control
    decoder state fails.
    
    Reported-by: syzbot+ec869945d3dde5f33b43@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb3d4573bc77c3eb39bbae9d69e7d5beaf999a0f
Author: Sean Young <sean@mess.org>
Date:   Sun Nov 10 11:15:37 2019 +0100

    media: af9005: uninitialized variable printked
    
    commit 51d0c99b391f0cac61ad7b827c26f549ee55672c upstream.
    
    If usb_bulk_msg() fails, actual_length can be uninitialized.
    
    Reported-by: syzbot+9d42b7773d2fecd983ab@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1246693820123c83eabc888b869bf15c1246bb65
Author: Sean Young <sean@mess.org>
Date:   Sun Nov 10 11:04:40 2019 +0100

    media: digitv: don't continue if remote control state can't be read
    
    commit eecc70d22ae51225de1ef629c1159f7116476b2e upstream.
    
    This results in an uninitialized variable read.
    
    Reported-by: syzbot+6bf9606ee955b646c0e1@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1764dc15a6852b8e2b2d9ba412ef751f8a11c4b9
Author: Jan Kara <jack@suse.cz>
Date:   Thu Dec 12 11:30:03 2019 +0100

    reiserfs: Fix memory leak of journal device string
    
    commit 5474ca7da6f34fa95e82edc747d5faa19cbdfb5c upstream.
    
    When a filesystem is mounted with jdev mount option, we store the
    journal device name in an allocated string in superblock. However we
    fail to ever free that string. Fix it.
    
    Reported-by: syzbot+1c6756baf4b16b94d2a6@syzkaller.appspotmail.com
    Fixes: c3aa077648e1 ("reiserfs: Properly display mount options in /proc/mounts")
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 732ecd4aad51d336b49b9be431219d173ac826c8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jan 30 22:11:07 2020 -0800

    mm/mempolicy.c: fix out of bounds write in mpol_parse_str()
    
    commit c7a91bc7c2e17e0a9c8b9745a2cb118891218fd1 upstream.
    
    What we are trying to do is change the '=' character to a NUL terminator
    and then at the end of the function we restore it back to an '='.  The
    problem is there are two error paths where we jump to the end of the
    function before we have replaced the '=' with NUL.
    
    We end up putting the '=' in the wrong place (possibly one element
    before the start of the buffer).
    
    Link: http://lkml.kernel.org/r/20200115055426.vdjwvry44nfug7yy@kili.mountain
    Reported-by: syzbot+e64a13c5369a194d67df@syzkaller.appspotmail.com
    Fixes: 095f1fc4ebf3 ("mempolicy: rework shmem mpol parsing and display")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Dmitry Vyukov <dvyukov@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Lee Schermerhorn <lee.schermerhorn@hp.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb1702c403ad392a9ae6e090702a17cca98a38ca
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sun Dec 15 01:09:03 2019 -0500

    ext4: validate the debug_want_extra_isize mount option at parse time
    
    commit 9803387c55f7d2ce69aa64340c5fdc6b3027dbc8 upstream.
    
    Instead of setting s_want_extra_size and then making sure that it is a
    valid value afterwards, validate the field before we set it.  This
    avoids races and other problems when remounting the file system.
    
    Link: https://lore.kernel.org/r/20191215063020.GA11512@mit.edu
    Cc: stable@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reported-and-tested-by: syzbot+4a39a025912b265cacef@syzkaller.appspotmail.com
    Signed-off-by: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f3b1614c274d9f436d831ea9eefd1f64d9ab82a
Author: Dirk Behme <dirk.behme@de.bosch.com>
Date:   Tue Jan 21 16:54:39 2020 +0100

    arm64: kbuild: remove compressed images on 'make ARCH=arm64 (dist)clean'
    
    commit d7bbd6c1b01cb5dd13c245d4586a83145c1d5f52 upstream.
    
    Since v4.3-rc1 commit 0723c05fb75e44 ("arm64: enable more compressed
    Image formats"), it is possible to build Image.{bz2,lz4,lzma,lzo}
    AArch64 images. However, the commit missed adding support for removing
    those images on 'make ARCH=arm64 (dist)clean'.
    
    Fix this by adding them to the target list.
    Make sure to match the order of the recipes in the makefile.
    
    Cc: stable@vger.kernel.org # v4.3+
    Fixes: 0723c05fb75e44 ("arm64: enable more compressed Image formats")
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Reviewed-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d6c4c1bb569edc88624d8f6894928064363d9d5
Author: Vitaly Chikunov <vt@altlinux.org>
Date:   Tue Dec 24 20:20:29 2019 +0300

    tools lib: Fix builds when glibc contains strlcpy()
    
    commit 6c4798d3f08b81c2c52936b10e0fa872590c96ae upstream.
    
    Disable a couple of compilation warnings (which are treated as errors)
    on strlcpy() definition and declaration, allowing users to compile perf
    and kernel (objtool) when:
    
    1. glibc have strlcpy() (such as in ALT Linux since 2004) objtool and
       perf build fails with this (in gcc):
    
      In file included from exec-cmd.c:3:
      tools/include/linux/string.h:20:15: error: redundant redeclaration of ‘strlcpy’ [-Werror=redundant-decls]
         20 | extern size_t strlcpy(char *dest, const char *src, size_t size);
    
    2. clang ignores `-Wredundant-decls', but produces another warning when
       building perf:
    
        CC       util/string.o
      ../lib/string.c:99:8: error: attribute declaration must precede definition [-Werror,-Wignored-attributes]
      size_t __weak strlcpy(char *dest, const char *src, size_t size)
      ../../tools/include/linux/compiler.h:66:34: note: expanded from macro '__weak'
      # define __weak                 __attribute__((weak))
      /usr/include/bits/string_fortified.h:151:8: note: previous definition is here
      __NTH (strlcpy (char *__restrict __dest, const char *__restrict __src,
    
    Committer notes:
    
    The
    
     #pragma GCC diagnostic
    
    directive was introduced in gcc 4.6, so check for that as well.
    
    Fixes: ce99091 ("perf tools: Move strlcpy() from perf to tools/lib/string.c")
    Fixes: 0215d59 ("tools lib: Reinstate strlcpy() header guard with __UCLIBC__")
    Resolves: https://bugzilla.kernel.org/show_bug.cgi?id=118481
    Signed-off-by: Vitaly Chikunov <vt@altlinux.org>
    Reviewed-by: Dmitry Levin <ldv@altlinux.org>
    Cc: Dmitry Levin <ldv@altlinux.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: kbuild test robot <lkp@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Cc: Vineet Gupta <vineet.gupta1@synopsys.com>
    Link: http://lore.kernel.org/lkml/20191224172029.19690-1-vt@altlinux.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1635d4fc76a0cfc7fc7f4667dcb4e02e92e246cb
Author: Chanwoo Choi <cw00.choi@samsung.com>
Date:   Tue Nov 5 18:18:03 2019 +0900

    PM / devfreq: Add new name attribute for sysfs
    
    commit 2fee1a7cc6b1ce6634bb0f025be2c94a58dfa34d upstream.
    
    The commit 4585fbcb5331 ("PM / devfreq: Modify the device name as devfreq(X) for
    sysfs") changed the node name to devfreq(x). After this commit, it is not
    possible to get the device name through /sys/class/devfreq/devfreq(X)/*.
    
    Add new name attribute in order to get device name.
    
    Cc: stable@vger.kernel.org
    Fixes: 4585fbcb5331 ("PM / devfreq: Modify the device name as devfreq(X) for sysfs")
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e292b266359d4ddb8d6aab91a33fe206b76bf22c
Author: Andres Freund <andres@anarazel.de>
Date:   Wed Jan 8 20:30:30 2020 -0800

    perf c2c: Fix return type for histogram sorting comparision functions
    
    commit c1c8013ec34d7163431d18367808ea40b2e305f8 upstream.
    
    Commit 722ddfde366f ("perf tools: Fix time sorting") changed - correctly
    so - hist_entry__sort to return int64. Unfortunately several of the
    builtin-c2c.c comparison routines only happened to work due the cast
    caused by the wrong return type.
    
    This causes meaningless ordering of both the cacheline list, and the
    cacheline details page. E.g a simple:
    
      perf c2c record -a sleep 3
      perf c2c report
    
    will result in cacheline table like
      =================================================
                 Shared Data Cache Line Table
      =================================================
      #
      #        ------- Cacheline ----------    Total     Tot  - LLC Load Hitm -  - Store Reference -  - Load Dram -     LLC  Total  - Core Load Hit -  - LLC Load Hit -
      # Index         Address  Node  PA cnt  records    Hitm  Total  Lcl    Rmt  Total  L1Hit  L1Miss     Lcl   Rmt  Ld Miss  Loads    FB    L1   L2     Llc      Rmt
      # .....  ..............  ....  ......  .......  ......  .....  .....  ...  ....   .....  ......  ......  ....  ......   .....  .....  ..... ...  ....     .......
    
            0  0x7f0d27ffba00   N/A       0       52   0.12%     13      6    7    12      12       0       0     7      14      40      4     16    0    0           0
            1  0x7f0d27ff61c0   N/A       0     6353  14.04%   1475    801  674   779     779       0       0   718    1392    5574   1299   1967    0  115           0
            2  0x7f0d26d3ec80   N/A       0       71   0.15%     16      4   12    13      13       0       0    12      24      58      1     20    0    9           0
            3  0x7f0d26d3ec00   N/A       0       98   0.22%     23     17    6    19      19       0       0     6      12      79      0     40    0   10           0
    
    i.e. with the list not being ordered by Total Hitm.
    
    Fixes: 722ddfde366f ("perf tools: Fix time sorting")
    Signed-off-by: Andres Freund <andres@anarazel.de>
    Tested-by: Michael Petlan <mpetlan@redhat.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org # v3.16+
    Link: http://lore.kernel.org/lkml/20200109043030.233746-1-andres@anarazel.de
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94b4f57a9c9de6b13c8abf7ba5f5db8fdc149b52
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Nov 28 18:22:00 2019 +0100

    rsi: fix use-after-free on failed probe and unbind
    
    [ Upstream commit e93cd35101b61e4c79149be2cfc927c4b28dc60c ]
    
    Make sure to stop both URBs before returning after failed probe as well
    as on disconnect to avoid use-after-free in the completion handler.
    
    Reported-by: syzbot+b563b7f8dbe8223a51e8@syzkaller.appspotmail.com
    Fixes: a4302bff28e2 ("rsi: add bluetooth rx endpoint")
    Fixes: dad0d04fa7ba ("rsi: Add RS9113 wireless driver")
    Cc: stable <stable@vger.kernel.org>     # 3.15
    Cc: Siva Rebbagondla <siva.rebbagondla@redpinesignals.com>
    Cc: Prameela Rani Garnepudi <prameela.j04cs@gmail.com>
    Cc: Amitkumar Karwar <amit.karwar@redpinesignals.com>
    Cc: Fariya Fatima <fariyaf@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28fc6259cff958191d3ae8c71a1ce13f2e17a09a
Author: Siva Rebbagondla <siva.rebbagondla@redpinesignals.com>
Date:   Mon Feb 4 12:03:26 2019 +0530

    rsi: add hci detach for hibernation and poweroff
    
    [ Upstream commit cbde979b33fa16e06dadc2c81093699a2bc787db ]
    
    As we missed to detach HCI, while entering power off or hibernation,
    an extra hci interface gets created whenever system is woken up, to
    avoid this we added hci_detach() in rsi_disconnect(), rsi_freeze(),
    and rsi_shutdown() functions which are invoked for these tests.
    This patch fixes the issue
    
    Signed-off-by: Siva Rebbagondla <siva.rebbagondla@redpinesignals.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47ef5cb878817127bd3d54c3578bbbd3f7c2bf2c
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Nov 19 17:41:31 2019 +0800

    crypto: pcrypt - Fix user-after-free on module unload
    
    [ Upstream commit 07bfd9bdf568a38d9440c607b72342036011f727 ]
    
    On module unload of pcrypt we must unregister the crypto algorithms
    first and then tear down the padata structure.  As otherwise the
    crypto algorithms are still alive and can be used while the padata
    structure is being freed.
    
    Fixes: 5068c7a883d1 ("crypto: pcrypt - Add pcrypt crypto...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc071b7c434fb50c1afa34d9d852eacf03044f85
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Sun Feb 2 06:04:22 2020 +0800

    x86/resctrl: Fix a deadlock due to inaccurate reference
    
    commit 334b0f4e9b1b4a1d475f803419d202f6c5e4d18e upstream.
    
    There is a race condition which results in a deadlock when rmdir and
    mkdir execute concurrently:
    
    $ ls /sys/fs/resctrl/c1/mon_groups/m1/
    cpus  cpus_list  mon_data  tasks
    
    Thread 1: rmdir /sys/fs/resctrl/c1
    Thread 2: mkdir /sys/fs/resctrl/c1/mon_groups/m1
    
    3 locks held by mkdir/48649:
     #0:  (sb_writers#17){.+.+}, at: [<ffffffffb4ca2aa0>] mnt_want_write+0x20/0x50
     #1:  (&type->i_mutex_dir_key#8/1){+.+.}, at: [<ffffffffb4c8c13b>] filename_create+0x7b/0x170
     #2:  (rdtgroup_mutex){+.+.}, at: [<ffffffffb4a4389d>] rdtgroup_kn_lock_live+0x3d/0x70
    
    4 locks held by rmdir/48652:
     #0:  (sb_writers#17){.+.+}, at: [<ffffffffb4ca2aa0>] mnt_want_write+0x20/0x50
     #1:  (&type->i_mutex_dir_key#8/1){+.+.}, at: [<ffffffffb4c8c3cf>] do_rmdir+0x13f/0x1e0
     #2:  (&type->i_mutex_dir_key#8){++++}, at: [<ffffffffb4c86d5d>] vfs_rmdir+0x4d/0x120
     #3:  (rdtgroup_mutex){+.+.}, at: [<ffffffffb4a4389d>] rdtgroup_kn_lock_live+0x3d/0x70
    
    Thread 1 is deleting control group "c1". Holding rdtgroup_mutex,
    kernfs_remove() removes all kernfs nodes under directory "c1"
    recursively, then waits for sub kernfs node "mon_groups" to drop active
    reference.
    
    Thread 2 is trying to create a subdirectory "m1" in the "mon_groups"
    directory. The wrapper kernfs_iop_mkdir() takes an active reference to
    the "mon_groups" directory but the code drops the active reference to
    the parent directory "c1" instead.
    
    As a result, Thread 1 is blocked on waiting for active reference to drop
    and never release rdtgroup_mutex, while Thread 2 is also blocked on
    trying to get rdtgroup_mutex.
    
    Thread 1 (rdtgroup_rmdir)   Thread 2 (rdtgroup_mkdir)
    (rmdir /sys/fs/resctrl/c1)  (mkdir /sys/fs/resctrl/c1/mon_groups/m1)
    -------------------------   -------------------------
                                kernfs_iop_mkdir
                                  /*
                                   * kn: "m1", parent_kn: "mon_groups",
                                   * prgrp_kn: parent_kn->parent: "c1",
                                   *
                                   * "mon_groups", parent_kn->active++: 1
                                   */
                                  kernfs_get_active(parent_kn)
    kernfs_iop_rmdir
      /* "c1", kn->active++ */
      kernfs_get_active(kn)
    
      rdtgroup_kn_lock_live
        atomic_inc(&rdtgrp->waitcount)
        /* "c1", kn->active-- */
        kernfs_break_active_protection(kn)
        mutex_lock
    
      rdtgroup_rmdir_ctrl
        free_all_child_rdtgrp
          sentry->flags = RDT_DELETED
    
        rdtgroup_ctrl_remove
          rdtgrp->flags = RDT_DELETED
          kernfs_get(kn)
          kernfs_remove(rdtgrp->kn)
            __kernfs_remove
              /* "mon_groups", sub_kn */
              atomic_add(KN_DEACTIVATED_BIAS, &sub_kn->active)
              kernfs_drain(sub_kn)
                /*
                 * sub_kn->active == KN_DEACTIVATED_BIAS + 1,
                 * waiting on sub_kn->active to drop, but it
                 * never drops in Thread 2 which is blocked
                 * on getting rdtgroup_mutex.
                 */
    Thread 1 hangs here ---->
                wait_event(sub_kn->active == KN_DEACTIVATED_BIAS)
                ...
                                  rdtgroup_mkdir
                                    rdtgroup_mkdir_mon(parent_kn, prgrp_kn)
                                      mkdir_rdt_prepare(parent_kn, prgrp_kn)
                                        rdtgroup_kn_lock_live(prgrp_kn)
                                          atomic_inc(&rdtgrp->waitcount)
                                          /*
                                           * "c1", prgrp_kn->active--
                                           *
                                           * The active reference on "c1" is
                                           * dropped, but not matching the
                                           * actual active reference taken
                                           * on "mon_groups", thus causing
                                           * Thread 1 to wait forever while
                                           * holding rdtgroup_mutex.
                                           */
                                          kernfs_break_active_protection(
                                                                   prgrp_kn)
                                          /*
                                           * Trying to get rdtgroup_mutex
                                           * which is held by Thread 1.
                                           */
    Thread 2 hangs here ---->             mutex_lock
                                          ...
    
    The problem is that the creation of a subdirectory in the "mon_groups"
    directory incorrectly releases the active protection of its parent
    directory instead of itself before it starts waiting for rdtgroup_mutex.
    This is triggered by the rdtgroup_mkdir() flow calling
    rdtgroup_kn_lock_live()/rdtgroup_kn_unlock() with kernfs node of the
    parent control group ("c1") as argument. It should be called with kernfs
    node "mon_groups" instead. What is currently missing is that the
    kn->priv of "mon_groups" is NULL instead of pointing to the rdtgrp.
    
    Fix it by pointing kn->priv to rdtgrp when "mon_groups" is created. Then
    it could be passed to rdtgroup_kn_lock_live()/rdtgroup_kn_unlock()
    instead. And then it operates on the same rdtgroup structure but handles
    the active reference of kernfs node "mon_groups" to prevent deadlock.
    The same changes are also made to the "mon_data" directories.
    
    This results in some unused function parameters that will be cleaned up
    in follow-up patch as the focus here is on the fix only in support of
    backporting efforts.
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    for older stable trees.
    
    Fixes: c7d9aac61311 ("x86/intel_rdt/cqm: Add mkdir support for RDT monitoring")
    Suggested-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1578500886-21771-4-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95a41c7b7f1431b3264dd6dc1a1691f317ee89ee
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Sun Feb 2 06:03:43 2020 +0800

    x86/resctrl: Fix use-after-free due to inaccurate refcount of rdtgroup
    
    commit 074fadee59ee7a9d2b216e9854bd4efb5dad679f upstream.
    
    There is a race condition in the following scenario which results in an
    use-after-free issue when reading a monitoring file and deleting the
    parent ctrl_mon group concurrently:
    
    Thread 1 calls atomic_inc() to take refcount of rdtgrp and then calls
    kernfs_break_active_protection() to drop the active reference of kernfs
    node in rdtgroup_kn_lock_live().
    
    In Thread 2, kernfs_remove() is a blocking routine. It waits on all sub
    kernfs nodes to drop the active reference when removing all subtree
    kernfs nodes recursively. Thread 2 could block on kernfs_remove() until
    Thread 1 calls kernfs_break_active_protection(). Only after
    kernfs_remove() completes the refcount of rdtgrp could be trusted.
    
    Before Thread 1 calls atomic_inc() and kernfs_break_active_protection(),
    Thread 2 could call kfree() when the refcount of rdtgrp (sentry) is 0
    instead of 1 due to the race.
    
    In Thread 1, in rdtgroup_kn_unlock(), referring to earlier rdtgrp memory
    (rdtgrp->waitcount) which was already freed in Thread 2 results in
    use-after-free issue.
    
    Thread 1 (rdtgroup_mondata_show)  Thread 2 (rdtgroup_rmdir)
    --------------------------------  -------------------------
    rdtgroup_kn_lock_live
      /*
       * kn active protection until
       * kernfs_break_active_protection(kn)
       */
      rdtgrp = kernfs_to_rdtgroup(kn)
                                      rdtgroup_kn_lock_live
                                        atomic_inc(&rdtgrp->waitcount)
                                        mutex_lock
                                      rdtgroup_rmdir_ctrl
                                        free_all_child_rdtgrp
                                          /*
                                           * sentry->waitcount should be 1
                                           * but is 0 now due to the race.
                                           */
                                          kfree(sentry)*[1]
      /*
       * Only after kernfs_remove()
       * completes, the refcount of
       * rdtgrp could be trusted.
       */
      atomic_inc(&rdtgrp->waitcount)
      /* kn->active-- */
      kernfs_break_active_protection(kn)
                                        rdtgroup_ctrl_remove
                                          rdtgrp->flags = RDT_DELETED
                                          /*
                                           * Blocking routine, wait for
                                           * all sub kernfs nodes to drop
                                           * active reference in
                                           * kernfs_break_active_protection.
                                           */
                                          kernfs_remove(rdtgrp->kn)
                                      rdtgroup_kn_unlock
                                        mutex_unlock
                                        atomic_dec_and_test(
                                                    &rdtgrp->waitcount)
                                        && (flags & RDT_DELETED)
                                          kernfs_unbreak_active_protection(kn)
                                          kfree(rdtgrp)
      mutex_lock
    mon_event_read
    rdtgroup_kn_unlock
      mutex_unlock
      /*
       * Use-after-free: refer to earlier rdtgrp
       * memory which was freed in [1].
       */
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
        /* kn->active++ */
        kernfs_unbreak_active_protection(kn)
        kfree(rdtgrp)
    
    Fix it by moving free_all_child_rdtgrp() to after kernfs_remove() in
    rdtgroup_rmdir_ctrl() to ensure it has the accurate refcount of rdtgrp.
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    for older stable trees.
    
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Suggested-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1578500886-21771-3-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b006f8cbde9f3dabdfafe2ff7aa9f831ed5b625
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Sun Feb 2 06:02:17 2020 +0800

    x86/resctrl: Fix use-after-free when deleting resource groups
    
    commit b8511ccc75c033f6d54188ea4df7bf1e85778740 upstream.
    
    A resource group (rdtgrp) contains a reference count (rdtgrp->waitcount)
    that indicates how many waiters expect this rdtgrp to exist. Waiters
    could be waiting on rdtgroup_mutex or some work sitting on a task's
    workqueue for when the task returns from kernel mode or exits.
    
    The deletion of a rdtgrp is intended to have two phases:
    
      (1) while holding rdtgroup_mutex the necessary cleanup is done and
      rdtgrp->flags is set to RDT_DELETED,
    
      (2) after releasing the rdtgroup_mutex, the rdtgrp structure is freed
      only if there are no waiters and its flag is set to RDT_DELETED. Upon
      gaining access to rdtgroup_mutex or rdtgrp, a waiter is required to check
      for the RDT_DELETED flag.
    
    When unmounting the resctrl file system or deleting ctrl_mon groups,
    all of the subdirectories are removed and the data structure of rdtgrp
    is forcibly freed without checking rdtgrp->waitcount. If at this point
    there was a waiter on rdtgrp then a use-after-free issue occurs when the
    waiter starts running and accesses the rdtgrp structure it was waiting
    on.
    
    See kfree() calls in [1], [2] and [3] in these two call paths in
    following scenarios:
    (1) rdt_kill_sb() -> rmdir_all_sub() -> free_all_child_rdtgrp()
    (2) rdtgroup_rmdir() -> rdtgroup_rmdir_ctrl() -> free_all_child_rdtgrp()
    
    There are several scenarios that result in use-after-free issue in
    following:
    
    Scenario 1:
    -----------
    In Thread 1, rdtgroup_tasks_write() adds a task_work callback
    move_myself(). If move_myself() is scheduled to execute after Thread 2
    rdt_kill_sb() is finished, referring to earlier rdtgrp memory
    (rdtgrp->waitcount) which was already freed in Thread 2 results in
    use-after-free issue.
    
    Thread 1 (rdtgroup_tasks_write)        Thread 2 (rdt_kill_sb)
    -------------------------------        ----------------------
    rdtgroup_kn_lock_live
      atomic_inc(&rdtgrp->waitcount)
      mutex_lock
    rdtgroup_move_task
      __rdtgroup_move_task
        /*
         * Take an extra refcount, so rdtgrp cannot be freed
         * before the call back move_myself has been invoked
         */
        atomic_inc(&rdtgrp->waitcount)
        /* Callback move_myself will be scheduled for later */
        task_work_add(move_myself)
    rdtgroup_kn_unlock
      mutex_unlock
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
                                           mutex_lock
                                           rmdir_all_sub
                                             /*
                                              * sentry and rdtgrp are freed
                                              * without checking refcount
                                              */
                                             free_all_child_rdtgrp
                                               kfree(sentry)*[1]
                                             kfree(rdtgrp)*[2]
                                           mutex_unlock
    /*
     * Callback is scheduled to execute
     * after rdt_kill_sb is finished
     */
    move_myself
      /*
       * Use-after-free: refer to earlier rdtgrp
       * memory which was freed in [1] or [2].
       */
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
        kfree(rdtgrp)
    
    Scenario 2:
    -----------
    In Thread 1, rdtgroup_tasks_write() adds a task_work callback
    move_myself(). If move_myself() is scheduled to execute after Thread 2
    rdtgroup_rmdir() is finished, referring to earlier rdtgrp memory
    (rdtgrp->waitcount) which was already freed in Thread 2 results in
    use-after-free issue.
    
    Thread 1 (rdtgroup_tasks_write)        Thread 2 (rdtgroup_rmdir)
    -------------------------------        -------------------------
    rdtgroup_kn_lock_live
      atomic_inc(&rdtgrp->waitcount)
      mutex_lock
    rdtgroup_move_task
      __rdtgroup_move_task
        /*
         * Take an extra refcount, so rdtgrp cannot be freed
         * before the call back move_myself has been invoked
         */
        atomic_inc(&rdtgrp->waitcount)
        /* Callback move_myself will be scheduled for later */
        task_work_add(move_myself)
    rdtgroup_kn_unlock
      mutex_unlock
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
                                           rdtgroup_kn_lock_live
                                             atomic_inc(&rdtgrp->waitcount)
                                             mutex_lock
                                           rdtgroup_rmdir_ctrl
                                             free_all_child_rdtgrp
                                               /*
                                                * sentry is freed without
                                                * checking refcount
                                                */
                                               kfree(sentry)*[3]
                                             rdtgroup_ctrl_remove
                                               rdtgrp->flags = RDT_DELETED
                                           rdtgroup_kn_unlock
                                             mutex_unlock
                                             atomic_dec_and_test(
                                                         &rdtgrp->waitcount)
                                             && (flags & RDT_DELETED)
                                               kfree(rdtgrp)
    /*
     * Callback is scheduled to execute
     * after rdt_kill_sb is finished
     */
    move_myself
      /*
       * Use-after-free: refer to earlier rdtgrp
       * memory which was freed in [3].
       */
      atomic_dec_and_test(&rdtgrp->waitcount)
      && (flags & RDT_DELETED)
        kfree(rdtgrp)
    
    If CONFIG_DEBUG_SLAB=y, Slab corruption on kmalloc-2k can be observed
    like following. Note that "0x6b" is POISON_FREE after kfree(). The
    corrupted bits "0x6a", "0x64" at offset 0x424 correspond to
    waitcount member of struct rdtgroup which was freed:
    
      Slab corruption (Not tainted): kmalloc-2k start=ffff9504c5b0d000, len=2048
      420: 6b 6b 6b 6b 6a 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkjkkkkkkkkkkk
      Single bit error detected. Probably bad RAM.
      Run memtest86+ or a similar memory test tool.
      Next obj: start=ffff9504c5b0d800, len=2048
      000: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      010: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
    
      Slab corruption (Not tainted): kmalloc-2k start=ffff9504c58ab800, len=2048
      420: 6b 6b 6b 6b 64 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkdkkkkkkkkkkk
      Prev obj: start=ffff9504c58ab000, len=2048
      000: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      010: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
    
    Fix this by taking reference count (waitcount) of rdtgrp into account in
    the two call paths that currently do not do so. Instead of always
    freeing the resource group it will only be freed if there are no waiters
    on it. If there are waiters, the resource group will have its flags set
    to RDT_DELETED.
    
    It will be left to the waiter to free the resource group when it starts
    running and finding that it was the last waiter and the resource group
    has been removed (rdtgrp->flags & RDT_DELETED) since. (1) rdt_kill_sb()
    -> rmdir_all_sub() -> free_all_child_rdtgrp() (2) rdtgroup_rmdir() ->
    rdtgroup_rmdir_ctrl() -> free_all_child_rdtgrp()
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    in older stable trees.
    
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Suggested-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1578500886-21771-2-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d7a5100e29dde6b6557beb31ea9f2bbc9e998ca
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Feb 1 16:26:45 2020 +0000

    vfs: fix do_last() regression
    
    commit 6404674acd596de41fd3ad5f267b4525494a891a upstream.
    
    Brown paperbag time: fetching ->i_uid/->i_mode really should've been
    done from nd->inode.  I even suggested that, but the reason for that has
    slipped through the cracks and I went for dir->d_inode instead - made
    for more "obvious" patch.
    
    Analysis:
    
     - at the entry into do_last() and all the way to step_into(): dir (aka
       nd->path.dentry) is known not to have been freed; so's nd->inode and
       it's equal to dir->d_inode unless we are already doomed to -ECHILD.
       inode of the file to get opened is not known.
    
     - after step_into(): inode of the file to get opened is known; dir
       might be pointing to freed memory/be negative/etc.
    
     - at the call of may_create_in_sticky(): guaranteed to be out of RCU
       mode; inode of the file to get opened is known and pinned; dir might
       be garbage.
    
    The last was the reason for the original patch.  Except that at the
    do_last() entry we can be in RCU mode and it is possible that
    nd->path.dentry->d_inode has already changed under us.
    
    In that case we are going to fail with -ECHILD, but we need to be
    careful; nd->inode is pointing to valid struct inode and it's the same
    as nd->path.dentry->d_inode in "won't fail with -ECHILD" case, so we
    should use that.
    
    Reported-by: "Rantala, Tommi T. (Nokia - FI/Espoo)" <tommi.t.rantala@nokia.com>
    Reported-by: syzbot+190005201ced78a74ad6@syzkaller.appspotmail.com
    Wearing-brown-paperbag: Al Viro <viro@zeniv.linux.org.uk>
    Cc: stable@kernel.org
    Fixes: d0cb50185ae9 ("do_last(): fetch directory ->i_mode and ->i_uid before it's too late")
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
