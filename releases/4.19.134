commit 20b3a3dfdf6c55b50bbdc8e231a3dbf6bf965dc7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 22 09:32:14 2020 +0200

    Linux 4.19.134

commit c9f98ce75c3dbfa3ef569bb5ee1f959d0163510d
Author: Lingling Xu <ling_ling.xu@unisoc.com>
Date:   Tue Jun 2 16:24:15 2020 +0800

    spi: sprd: switch the sequence of setting WDG_LOAD_LOW and _HIGH
    
    commit 8bdd79dae1ff5397351b95e249abcae126572617 upstream.
    
    The watchdog counter consists of WDG_LOAD_LOW and WDG_LOAD_HIGH,
    which would be loaded to watchdog counter once writing WDG_LOAD_LOW.
    
    Fixes: ac1775012058 ("spi: sprd: Add the support of restarting the system")
    Signed-off-by: Lingling Xu <ling_ling.xu@unisoc.com>
    Signed-off-by: Chunyan Zhang <chunyan.zhang@unisoc.com>
    Link: https://lore.kernel.org/r/20200602082415.5848-1-zhang.lyra@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3fa6917aa57b3bca4c5afd08ec9b0c3323b579b
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jun 17 22:50:33 2020 +0100

    rxrpc: Fix trace string
    
    commit aadf9dcef9d4cd68c73a4ab934f93319c4becc47 upstream.
    
    The trace symbol printer (__print_symbolic()) ignores symbols that map to
    an empty string and prints the hex value instead.
    
    Fix the symbol for rxrpc_cong_no_change to " -" instead of "" to avoid
    this.
    
    Fixes: b54a134a7de4 ("rxrpc: Fix handling of enums-to-string translation in tracing")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cb7718803af0c615b8d71d17e64b83759930c35
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue Jun 9 11:57:56 2020 +0200

    libceph: don't omit recovery_deletes in target_copy()
    
    commit 2f3fead62144002557f322c2a7c15e1255df0653 upstream.
    
    Currently target_copy() is used only for sending linger pings, so
    this doesn't come up, but generally omitting recovery_deletes can
    result in unneeded resends (force_resend in calc_target()).
    
    Fixes: ae78dd8139ce ("libceph: make RECOVERY_DELETES feature create a new interval")
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caffd39d4f15810c653fa8686aaf43c11c18d854
Author: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Date:   Tue Mar 3 20:30:02 2020 +0900

    printk: queue wake_up_klogd irq_work only if per-CPU areas are ready
    
    commit ab6f762f0f53162d41497708b33c9a3236d3609e upstream.
    
    printk_deferred(), similarly to printk_safe/printk_nmi, does not
    immediately attempt to print a new message on the consoles, avoiding
    calls into non-reentrant kernel paths, e.g. scheduler or timekeeping,
    which potentially can deadlock the system.
    
    Those printk() flavors, instead, rely on per-CPU flush irq_work to print
    messages from safer contexts.  For same reasons (recursive scheduler or
    timekeeping calls) printk() uses per-CPU irq_work in order to wake up
    user space syslog/kmsg readers.
    
    However, only printk_safe/printk_nmi do make sure that per-CPU areas
    have been initialised and that it's safe to modify per-CPU irq_work.
    This means that, for instance, should printk_deferred() be invoked "too
    early", that is before per-CPU areas are initialised, printk_deferred()
    will perform illegal per-CPU access.
    
    Lech Perczak [0] reports that after commit 1b710b1b10ef ("char/random:
    silence a lockdep splat with printk()") user-space syslog/kmsg readers
    are not able to read new kernel messages.
    
    The reason is printk_deferred() being called too early (as was pointed
    out by Petr and John).
    
    Fix printk_deferred() and do not queue per-CPU irq_work before per-CPU
    areas are initialized.
    
    Link: https://lore.kernel.org/lkml/aa0732c6-5c4e-8a8b-a1c1-75ebe3dca05b@camlintechnologies.com/
    Reported-by: Lech Perczak <l.perczak@camlintechnologies.com>
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Tested-by: Jann Horn <jannh@google.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Cc: John Ogness <john.ogness@linutronix.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2048e4375c552614d26a7191394d8a8398fe7a85
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jul 17 18:00:02 2020 +0200

    genirq/affinity: Handle affinity setting on inactive interrupts correctly
    
    commit baedb87d1b53532f81b4bd0387f83b05d4f7eb9a upstream.
    
    Setting interrupt affinity on inactive interrupts is inconsistent when
    hierarchical irq domains are enabled. The core code should just store the
    affinity and not call into the irq chip driver for inactive interrupts
    because the chip drivers may not be in a state to handle such requests.
    
    X86 has a hacky workaround for that but all other irq chips have not which
    causes problems e.g. on GIC V3 ITS.
    
    Instead of adding more ugly hacks all over the place, solve the problem in
    the core code. If the affinity is set on an inactive interrupt then:
    
        - Store it in the irq descriptors affinity mask
        - Update the effective affinity to reflect that so user space has
          a consistent view
        - Don't call into the irq chip driver
    
    This is the core equivalent of the X86 workaround and works correctly
    because the affinity setting is established in the irq chip when the
    interrupt is activated later on.
    
    Note, that this is only effective when hierarchical irq domains are enabled
    by the architecture. Doing it unconditionally would break legacy irq chip
    implementations.
    
    For hierarchial irq domains this works correctly as none of the drivers can
    have a dependency on affinity setting in inactive state by design.
    
    Remove the X86 workaround as it is not longer required.
    
    Fixes: 02edee152d6e ("x86/apic/vector: Ignore set_affinity call for inactive interrupts")
    Reported-by: Ali Saidi <alisaidi@amazon.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Ali Saidi <alisaidi@amazon.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200529015501.15771-1-alisaidi@amazon.com
    Link: https://lkml.kernel.org/r/877dv2rv25.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d9d559b573d757b9314334104a42e97bc7cda16
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Fri Jul 10 17:24:26 2020 +0200

    sched/fair: handle case of task_h_load() returning 0
    
    commit 01cfcde9c26d8555f0e6e9aea9d6049f87683998 upstream.
    
    task_h_load() can return 0 in some situations like running stress-ng
    mmapfork, which forks thousands of threads, in a sched group on a 224 cores
    system. The load balance doesn't handle this correctly because
    env->imbalance never decreases and it will stop pulling tasks only after
    reaching loop_max, which can be equal to the number of running tasks of
    the cfs. Make sure that imbalance will be decreased by at least 1.
    
    misfit task is the other feature that doesn't handle correctly such
    situation although it's probably more difficult to face the problem
    because of the smaller number of CPUs and running tasks on heterogenous
    system.
    
    We can't simply ensure that task_h_load() returns at least one because it
    would imply to handle underflow in other places.
    
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Reviewed-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Tested-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Cc: <stable@vger.kernel.org> # v4.4+
    Link: https://lkml.kernel.org/r/20200710152426.16981-1-vincent.guittot@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2fc2e5774eb1911829ae761bc1569a05b72ebdc
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Mon Jul 6 16:49:10 2020 -0400

    sched: Fix unreliable rseq cpu_id for new tasks
    
    commit ce3614daabea8a2d01c1dd17ae41d1ec5e5ae7db upstream.
    
    While integrating rseq into glibc and replacing glibc's sched_getcpu
    implementation with rseq, glibc's tests discovered an issue with
    incorrect __rseq_abi.cpu_id field value right after the first time
    a newly created process issues sched_setaffinity.
    
    For the records, it triggers after building glibc and running tests, and
    then issuing:
    
      for x in {1..2000} ; do posix/tst-affinity-static  & done
    
    and shows up as:
    
    error: Unexpected CPU 2, expected 0
    error: Unexpected CPU 2, expected 0
    error: Unexpected CPU 2, expected 0
    error: Unexpected CPU 2, expected 0
    error: Unexpected CPU 138, expected 0
    error: Unexpected CPU 138, expected 0
    error: Unexpected CPU 138, expected 0
    error: Unexpected CPU 138, expected 0
    
    This is caused by the scheduler invoking __set_task_cpu() directly from
    sched_fork() and wake_up_new_task(), thus bypassing rseq_migrate() which
    is done by set_task_cpu().
    
    Add the missing rseq_migrate() to both functions. The only other direct
    use of __set_task_cpu() is done by init_idle(), which does not involve a
    user-space task.
    
    Based on my testing with the glibc test-case, just adding rseq_migrate()
    to wake_up_new_task() is sufficient to fix the observed issue. Also add
    it to sched_fork() to keep things consistent.
    
    The reason why this never triggered so far with the rseq/basic_test
    selftest is unclear.
    
    The current use of sched_getcpu(3) does not typically require it to be
    always accurate. However, use of the __rseq_abi.cpu_id field within rseq
    critical sections requires it to be accurate. If it is not accurate, it
    can cause corruption in the per-cpu data targeted by rseq critical
    sections in user-space.
    
    Reported-By: Florian Weimer <fweimer@redhat.com>
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-By: Florian Weimer <fweimer@redhat.com>
    Cc: stable@vger.kernel.org # v4.18+
    Link: https://lkml.kernel.org/r/20200707201505.2632-1-mathieu.desnoyers@efficios.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15b631b1ffb283ccd95cd68ac0f06ffa1c031966
Author: Will Deacon <will@kernel.org>
Date:   Fri Jul 3 12:08:42 2020 +0100

    arm64: compat: Ensure upper 32 bits of x0 are zero on syscall return
    
    commit 15956689a0e60aa0c795174f3c310b60d8794235 upstream.
    
    Although we zero the upper bits of x0 on entry to the kernel from an
    AArch32 task, we do not clear them on the exception return path and can
    therefore expose 64-bit sign extended syscall return values to userspace
    via interfaces such as the 'perf_regs' ABI, which deal exclusively with
    64-bit registers.
    
    Explicitly clear the upper 32 bits of x0 on return from a compat system
    call.
    
    Cc: <stable@vger.kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Keno Fischer <keno@juliacomputing.com>
    Cc: Luis Machado <luis.machado@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6753aa467811f5c6294230a9e7ca1d79140def8
Author: Will Deacon <will@kernel.org>
Date:   Thu Jul 2 21:16:20 2020 +0100

    arm64: ptrace: Consistently use pseudo-singlestep exceptions
    
    commit ac2081cdc4d99c57f219c1a6171526e0fa0a6fff upstream.
    
    Although the arm64 single-step state machine can be fast-forwarded in
    cases where we wish to generate a SIGTRAP without actually executing an
    instruction, this has two major limitations outside of simply skipping
    an instruction due to emulation.
    
    1. Stepping out of a ptrace signal stop into a signal handler where
       SIGTRAP is blocked. Fast-forwarding the stepping state machine in
       this case will result in a forced SIGTRAP, with the handler reset to
       SIG_DFL.
    
    2. The hardware implicitly fast-forwards the state machine when executing
       an SVC instruction for issuing a system call. This can interact badly
       with subsequent ptrace stops signalled during the execution of the
       system call (e.g. SYSCALL_EXIT or seccomp traps), as they may corrupt
       the stepping state by updating the PSTATE for the tracee.
    
    Resolve both of these issues by injecting a pseudo-singlestep exception
    on entry to a signal handler and also on return to userspace following a
    system call.
    
    Cc: <stable@vger.kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Luis Machado <luis.machado@linaro.org>
    Reported-by: Keno Fischer <keno@juliacomputing.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f4e6e7587391e5fff55da3472bdb29213b6b800
Author: Will Deacon <will@kernel.org>
Date:   Thu Feb 13 12:06:26 2020 +0000

    arm64: ptrace: Override SPSR.SS when single-stepping is enabled
    
    commit 3a5a4366cecc25daa300b9a9174f7fdd352b9068 upstream.
    
    Luis reports that, when reverse debugging with GDB, single-step does not
    function as expected on arm64:
    
      | I've noticed, under very specific conditions, that a PTRACE_SINGLESTEP
      | request by GDB won't execute the underlying instruction. As a consequence,
      | the PC doesn't move, but we return a SIGTRAP just like we would for a
      | regular successful PTRACE_SINGLESTEP request.
    
    The underlying problem is that when the CPU register state is restored
    as part of a reverse step, the SPSR.SS bit is cleared and so the hardware
    single-step state can transition to the "active-pending" state, causing
    an unexpected step exception to be taken immediately if a step operation
    is attempted.
    
    In hindsight, we probably shouldn't have exposed SPSR.SS in the pstate
    accessible by the GPR regset, but it's a bit late for that now. Instead,
    simply prevent userspace from configuring the bit to a value which is
    inconsistent with the TIF_SINGLESTEP state for the task being traced.
    
    Cc: <stable@vger.kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Keno Fischer <keno@juliacomputing.com>
    Link: https://lore.kernel.org/r/1eed6d69-d53d-9657-1fc9-c089be07f98c@linaro.org
    Reported-by: Luis Machado <luis.machado@linaro.org>
    Tested-by: Luis Machado <luis.machado@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit febe56f21371ba1e51e8586c3ddf8f54fc62fe61
Author: Finley Xiao <finley.xiao@rock-chips.com>
Date:   Fri Jun 19 17:08:25 2020 +0800

    thermal/drivers/cpufreq_cooling: Fix wrong frequency converted from power
    
    commit 371a3bc79c11b707d7a1b7a2c938dc3cc042fffb upstream.
    
    The function cpu_power_to_freq is used to find a frequency and set the
    cooling device to consume at most the power to be converted. For example,
    if the power to be converted is 80mW, and the em table is as follow.
    struct em_cap_state table[] = {
            /* KHz     mW */
            { 1008000, 36, 0 },
            { 1200000, 49, 0 },
            { 1296000, 59, 0 },
            { 1416000, 72, 0 },
            { 1512000, 86, 0 },
    };
    The target frequency should be 1416000KHz, not 1512000KHz.
    
    Fixes: 349d39dc5739 ("thermal: cpu_cooling: merge frequency and power tables")
    Cc: <stable@vger.kernel.org> # v4.13+
    Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200619090825.32747-1-finley.xiao@rock-chips.com
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a61c7bb96ea8592671c40920b21cdcc929dcda1
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Wed Jun 24 13:35:41 2020 +0200

    misc: atmel-ssc: lock with mutex instead of spinlock
    
    commit b037d60a3b1d1227609fd858fa34321f41829911 upstream.
    
    Uninterruptible context is not needed in the driver and causes lockdep
    warning because of mutex taken in of_alias_get_id(). Convert the lock to
    mutex to avoid the issue.
    
    Cc: stable@vger.kernel.org
    Fixes: 099343c64e16 ("ARM: at91: atmel-ssc: add device tree support")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/50f0d7fa107f318296afb49477c3571e4d6978c5.1592998403.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44151409fa0608dcb1b3dee2f12c5681cf54601b
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Jun 11 14:17:41 2020 +0200

    dmaengine: fsl-edma: Fix NULL pointer exception in fsl_edma_tx_handler
    
    commit f5e5677c420346b4e9788051c2e4d750996c428c upstream.
    
    NULL pointer exception happens occasionally on serial output initiated
    by login timeout.  This was reproduced only if kernel was built with
    significant debugging options and EDMA driver is used with serial
    console.
    
        col-vf50 login: root
        Password:
        Login timed out after 60 seconds.
        Unable to handle kernel NULL pointer dereference at virtual address 00000044
        Internal error: Oops: 5 [#1] ARM
        CPU: 0 PID: 157 Comm: login Not tainted 5.7.0-next-20200610-dirty #4
        Hardware name: Freescale Vybrid VF5xx/VF6xx (Device Tree)
          (fsl_edma_tx_handler) from [<8016eb10>] (__handle_irq_event_percpu+0x64/0x304)
          (__handle_irq_event_percpu) from [<8016eddc>] (handle_irq_event_percpu+0x2c/0x7c)
          (handle_irq_event_percpu) from [<8016ee64>] (handle_irq_event+0x38/0x5c)
          (handle_irq_event) from [<801729e4>] (handle_fasteoi_irq+0xa4/0x160)
          (handle_fasteoi_irq) from [<8016ddcc>] (generic_handle_irq+0x34/0x44)
          (generic_handle_irq) from [<8016e40c>] (__handle_domain_irq+0x54/0xa8)
          (__handle_domain_irq) from [<80508bc8>] (gic_handle_irq+0x4c/0x80)
          (gic_handle_irq) from [<80100af0>] (__irq_svc+0x70/0x98)
        Exception stack(0x8459fe80 to 0x8459fec8)
        fe80: 72286b00 e3359f64 00000001 0000412d a0070013 85c98840 85c98840 a0070013
        fea0: 8054e0d4 00000000 00000002 00000000 00000002 8459fed0 8081fbe8 8081fbec
        fec0: 60070013 ffffffff
          (__irq_svc) from [<8081fbec>] (_raw_spin_unlock_irqrestore+0x30/0x58)
          (_raw_spin_unlock_irqrestore) from [<8056cb48>] (uart_flush_buffer+0x88/0xf8)
          (uart_flush_buffer) from [<80554e60>] (tty_ldisc_hangup+0x38/0x1ac)
          (tty_ldisc_hangup) from [<8054c7f4>] (__tty_hangup+0x158/0x2bc)
          (__tty_hangup) from [<80557b90>] (disassociate_ctty.part.1+0x30/0x23c)
          (disassociate_ctty.part.1) from [<8011fc18>] (do_exit+0x580/0xba0)
          (do_exit) from [<801214f8>] (do_group_exit+0x3c/0xb4)
          (do_group_exit) from [<80121580>] (__wake_up_parent+0x0/0x14)
    
    Issue looks like race condition between interrupt handler fsl_edma_tx_handler()
    (called as result of fsl_edma_xfer_desc()) and terminating the transfer with
    fsl_edma_terminate_all().
    
    The fsl_edma_tx_handler() handles interrupt for a transfer with already freed
    edesc and idle==true.
    
    Fixes: d6be34fbd39b ("dma: Add Freescale eDMA engine driver support")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Robin Gong <yibin.gong@nxp.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1591877861-28156-2-git-send-email-krzk@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a9b2e08edef6933dc9eb2f3edd0319374829955
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Jul 6 19:13:39 2020 +0300

    intel_th: Fix a NULL dereference when hub driver is not loaded
    
    commit e78e1fdb282726beaf88aa75943682217e6ded0e upstream.
    
    Connecting master to an output port when GTH driver module is not loaded
    triggers a NULL dereference:
    
    > RIP: 0010:intel_th_set_output+0x35/0x70 [intel_th]
    > Call Trace:
    >  ? sth_stm_link+0x12/0x20 [intel_th_sth]
    >  stm_source_link_store+0x164/0x270 [stm_core]
    >  dev_attr_store+0x17/0x30
    >  sysfs_kf_write+0x3e/0x50
    >  kernfs_fop_write+0xda/0x1b0
    >  __vfs_write+0x1b/0x40
    >  vfs_write+0xb9/0x1a0
    >  ksys_write+0x67/0xe0
    >  __x64_sys_write+0x1a/0x20
    >  do_syscall_64+0x57/0x1d0
    >  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Make sure the module in question is loaded and return an error if not.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 39f4034693b7c ("intel_th: Add driver infrastructure for Intel(R) Trace Hub devices")
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reported-by: Ammy Yi <ammy.yi@intel.com>
    Tested-by: Ammy Yi <ammy.yi@intel.com>
    Cc: stable@vger.kernel.org # v4.4
    Link: https://lore.kernel.org/r/20200706161339.55468-5-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef78159fa67a478cc8c267368ac0ced14dff6060
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Jul 6 19:13:38 2020 +0300

    intel_th: pci: Add Emmitsburg PCH support
    
    commit fd73d74a32bfaaf259441322cc5a1c83caaa94f2 upstream.
    
    This adds support for the Trace Hub in Emmitsburg PCH.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.14+
    Link: https://lore.kernel.org/r/20200706161339.55468-4-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7295224398a7607f0b661fd1482b08eca8c33b2
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Jul 6 19:13:37 2020 +0300

    intel_th: pci: Add Tiger Lake PCH-H support
    
    commit 6227585dc7b6a5405fc08dc322f98cb95e2f0eb4 upstream.
    
    This adds support for the Trace Hub in Tiger Lake PCH-H.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.14+
    Link: https://lore.kernel.org/r/20200706161339.55468-3-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9763f7c8ba2a54620eb509a73d0628125fa6e4d
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Jul 6 19:13:36 2020 +0300

    intel_th: pci: Add Jasper Lake CPU support
    
    commit 203c1f615052921901b7a8fbe2005d8ea6add076 upstream.
    
    This adds support for the Trace Hub in Jasper Lake CPU.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.14+
    Link: https://lore.kernel.org/r/20200706161339.55468-2-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62c1cf71a226dbf8612675fdd72b8cbcd49f4ac8
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Sun Jul 12 18:50:47 2020 +0530

    powerpc/book3s64/pkeys: Fix pkey_access_permitted() for execute disable pkey
    
    commit 192b6a780598976feb7321ff007754f8511a4129 upstream.
    
    Even if the IAMR value denies execute access, the current code returns
    true from pkey_access_permitted() for an execute permission check, if
    the AMR read pkey bit is cleared.
    
    This results in repeated page fault loop with a test like below:
    
      #define _GNU_SOURCE
      #include <errno.h>
      #include <stdio.h>
      #include <stdlib.h>
      #include <signal.h>
      #include <inttypes.h>
    
      #include <assert.h>
      #include <malloc.h>
      #include <unistd.h>
      #include <pthread.h>
      #include <sys/mman.h>
    
      #ifdef SYS_pkey_mprotect
      #undef SYS_pkey_mprotect
      #endif
    
      #ifdef SYS_pkey_alloc
      #undef SYS_pkey_alloc
      #endif
    
      #ifdef SYS_pkey_free
      #undef SYS_pkey_free
      #endif
    
      #undef PKEY_DISABLE_EXECUTE
      #define PKEY_DISABLE_EXECUTE  0x4
    
      #define SYS_pkey_mprotect     386
      #define SYS_pkey_alloc                384
      #define SYS_pkey_free         385
    
      #define PPC_INST_NOP          0x60000000
      #define PPC_INST_BLR          0x4e800020
      #define PROT_RWX              (PROT_READ | PROT_WRITE | PROT_EXEC)
    
      static int sys_pkey_mprotect(void *addr, size_t len, int prot, int pkey)
      {
            return syscall(SYS_pkey_mprotect, addr, len, prot, pkey);
      }
    
      static int sys_pkey_alloc(unsigned long flags, unsigned long access_rights)
      {
            return syscall(SYS_pkey_alloc, flags, access_rights);
      }
    
      static int sys_pkey_free(int pkey)
      {
            return syscall(SYS_pkey_free, pkey);
      }
    
      static void do_execute(void *region)
      {
            /* jump to region */
            asm volatile(
                    "mtctr  %0;"
                    "bctrl"
                    : : "r"(region) : "ctr", "lr");
      }
    
      static void do_protect(void *region)
      {
            size_t pgsize;
            int i, pkey;
    
            pgsize = getpagesize();
    
            pkey = sys_pkey_alloc(0, PKEY_DISABLE_EXECUTE);
            assert (pkey > 0);
    
            /* perform mprotect */
            assert(!sys_pkey_mprotect(region, pgsize, PROT_RWX, pkey));
            do_execute(region);
    
            /* free pkey */
            assert(!sys_pkey_free(pkey));
    
      }
    
      int main(int argc, char **argv)
      {
            size_t pgsize, numinsns;
            unsigned int *region;
            int i;
    
            /* allocate memory region to protect */
            pgsize = getpagesize();
            region = memalign(pgsize, pgsize);
            assert(region != NULL);
            assert(!mprotect(region, pgsize, PROT_RWX));
    
            /* fill page with NOPs with a BLR at the end */
            numinsns = pgsize / sizeof(region[0]);
            for (i = 0; i < numinsns - 1; i++)
                    region[i] = PPC_INST_NOP;
            region[i] = PPC_INST_BLR;
    
            do_protect(region);
    
            return EXIT_SUCCESS;
      }
    
    The fix is to only check the IAMR for an execute check, the AMR value
    is not relevant.
    
    Fixes: f2407ef3ba22 ("powerpc: helper to validate key-access permissions of a pte")
    Cc: stable@vger.kernel.org # v4.16+
    Reported-by: Sandipan Das <sandipan@linux.ibm.com>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    [mpe: Add detail to change log, tweak wording & formatting]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200712132047.1038594-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit daddb90d47cf323c06957f7d70e9e5b159adb9d8
Author: Vishwas M <vishwas.reddy.vr@gmail.com>
Date:   Tue Jul 7 19:57:47 2020 +0530

    hwmon: (emc2103) fix unable to change fan pwm1_enable attribute
    
    commit 14b0e83dc4f1e52b94acaeb85a18fd7fdd46d2dc upstream.
    
    This patch fixes a bug which does not let FAN mode to be changed from
    sysfs(pwm1_enable). i.e pwm1_enable can not be set to 3, it will always
    remain at 0.
    
    This is caused because the device driver handles the result of
    "read_u8_from_i2c(client, REG_FAN_CONF1, &conf_reg)" incorrectly. The
    driver thinks an error has occurred if the (result != 0). This has been
    fixed by changing the condition to (result < 0).
    
    Signed-off-by: Vishwas M <vishwas.reddy.vr@gmail.com>
    Link: https://lore.kernel.org/r/20200707142747.118414-1-vishwas.reddy.vr@gmail.com
    Fixes: 9df7305b5a86 ("hwmon: Add driver for SMSC EMC2103 temperature monitor and fan controller")
    Cc: stable@vger.kernel.org
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e558fc637c08cb192daad9edda0db6d3c47e2448
Author: Andreas Schwab <schwab@suse.de>
Date:   Mon Jul 6 14:32:26 2020 +0200

    riscv: use 16KB kernel stack on 64-bit
    
    commit 0cac21b02ba5f3095fd2dcc77c26a25a0b2432ed upstream.
    
    With the current 8KB stack size there are frequent overflows in a 64-bit
    configuration.  We may split IRQ stacks off in the future, but this fixes a
    number of issues right now.
    
    Signed-off-by: Andreas Schwab <schwab@suse.de>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    [Palmer: mention irqstack in the commit text]
    Fixes: 7db91e57a0ac ("RISC-V: Task implementation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eefcd11cc9cc75762a133ffe9d0709e87bc4871d
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Jul 16 17:39:29 2020 +0800

    MIPS: Fix build for LTS kernel caused by backporting lpj adjustment
    
    Commit ed26aacfb5f71eecb20a ("mips: Add udelay lpj numbers adjustment")
    has backported to 4.4~5.4, but the "struct cpufreq_freqs" (and also the
    cpufreq notifier machanism) of 4.4~4.19 are different from the upstream
    kernel. These differences cause build errors, and this patch can fix the
    build.
    
    Cc: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Stable <stable@vger.kernel.org> # 4.4/4.9/4.14/4.19
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b9caae6153484239d90cb8a73f0c1b614dd2a89
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Fri Jul 17 16:05:40 2020 +0200

    timer: Fix wheel index calculation on last level
    
    commit e2a71bdea81690b6ef11f4368261ec6f5b6891aa upstream.
    
    When an expiration delta falls into the last level of the wheel, that delta
    has be compared against the maximum possible delay and reduced to fit in if
    necessary.
    
    However instead of comparing the delta against the maximum, the code
    compares the actual expiry against the maximum. Then instead of fixing the
    delta to fit in, it sets the maximum delta as the expiry value.
    
    This can result in various undesired outcomes, the worst possible one
    being a timer expiring 15 days ahead to fire immediately.
    
    Fixes: 500462a9de65 ("timers: Switch to a non-cascading wheel")
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200717140551.29076-2-frederic@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e68e2c661aa2cda521f1bf6e679f2a919ed5de5f
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Fri Jul 3 03:06:57 2020 +0200

    timer: Prevent base->clk from moving backward
    
    commit 30c66fc30ee7a98c4f3adf5fb7e213b61884474f upstream.
    
    When a timer is enqueued with a negative delta (ie: expiry is below
    base->clk), it gets added to the wheel as expiring now (base->clk).
    
    Yet the value that gets stored in base->next_expiry, while calling
    trigger_dyntick_cpu(), is the initial timer->expires value. The
    resulting state becomes:
    
            base->next_expiry < base->clk
    
    On the next timer enqueue, forward_timer_base() may accidentally
    rewind base->clk. As a possible outcome, timers may expire way too
    early, the worst case being that the highest wheel levels get spuriously
    processed again.
    
    To prevent from that, make sure that base->next_expiry doesn't get below
    base->clk.
    
    Fixes: a683f390b93f ("timers: Forward the wheel clock whenever possible")
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Anna-Maria Behnsen <anna-maria@linutronix.de>
    Tested-by: Juri Lelli <juri.lelli@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200703010657.2302-1-frederic@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53219e81bb93819769efb263d8be5e3db7cca87a
Author: Esben Haabendal <esben@geanix.com>
Date:   Wed Jul 1 16:56:58 2020 +0200

    uio_pdrv_genirq: fix use without device tree and no interrupt
    
    commit bf12fdf0ab728ca8e5933aac46dd972c0dd0421e upstream.
    
    While e3a3c3a20555 ("UIO: fix uio_pdrv_genirq with device tree but no
    interrupt") added support for using uio_pdrv_genirq for devices without
    interrupt for device tree platforms, the removal of uio_pdrv in
    26dac3c49d56 ("uio: Remove uio_pdrv and use uio_pdrv_genirq instead")
    broke the support for non device tree platforms.
    
    This change fixes this, so that uio_pdrv_genirq can be used without
    interrupt on all platforms.
    
    This still leaves the support that uio_pdrv had for custom interrupt
    handler lacking, as uio_pdrv_genirq does not handle it (yet).
    
    Fixes: 26dac3c49d56 ("uio: Remove uio_pdrv and use uio_pdrv_genirq instead")
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200701145659.3978-3-esben@geanix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f82688b48836503b5ce5f03c5c7700b5c68eab17
Author: David Pedersen <limero1337@gmail.com>
Date:   Mon Jul 6 18:48:51 2020 -0700

    Input: i8042 - add Lenovo XiaoXin Air 12 to i8042 nomux list
    
    commit 17d51429da722cd8fc77a365a112f008abf4f8b3 upstream.
    
    This fixes two finger trackpad scroll on the Lenovo XiaoXin Air 12.
    Without nomux, the trackpad behaves as if only one finger is present and
    moves the cursor when trying to scroll.
    
    Signed-off-by: David Pedersen <limero1337@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200625133754.291325-1-limero1337@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4d96b36c89ef03fb7006b6e0a943f8a4216ebac
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Mon Jun 29 01:53:59 2020 +0300

    mei: bus: don't clean driver pointer
    
    commit e852c2c251ed9c23ae6e3efebc5ec49adb504207 upstream.
    
    It's not needed to set driver to NULL in mei_cl_device_remove()
    which is bus_type remove() handler as this is done anyway
    in __device_release_driver().
    
    Actually this is causing an endless loop in driver_detach()
    on ubuntu patched kernel, while removing (rmmod) the mei_hdcp module.
    The reason list_empty(&drv->p->klist_devices.k_list) is always not-empty.
    as the check is always true in  __device_release_driver()
            if (dev->driver != drv)
                    return;
    
    The non upstream patch is causing this behavior, titled:
    'vfio -- release device lock before userspace requests'
    
    Nevertheless the fix is correct also for the upstream.
    
    Link: https://patchwork.ozlabs.org/project/ubuntu-kernel/patch/20180912085046.3401-2-apw@canonical.com/
    Cc: <stable@vger.kernel.org>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20200628225359.2185929-1-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81a91bf266dd7f2dd56fc3472b7bb54348ac62c7
Author: Wade Mealing <wmealing@redhat.com>
Date:   Wed Jun 17 13:49:47 2020 +0200

    Revert "zram: convert remaining CLASS_ATTR() to CLASS_ATTR_RO()"
    
    commit 853eab68afc80f59f36bbdeb715e5c88c501e680 upstream.
    
    Turns out that the permissions for 0400 really are what we want here,
    otherwise any user can read from this file.
    
    [fixed formatting, added changelog, and made attribute static - gregkh]
    
    Reported-by: Wade Mealing <wmealing@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Fixes: f40609d1591f ("zram: convert remaining CLASS_ATTR() to CLASS_ATTR_RO()")
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1847832
    Reviewed-by: Steffen Maier <maier@linux.ibm.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Link: https://lore.kernel.org/r/20200617114946.GA2131650@kroah.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d61cd1dcab2c675704eb4eb55d4392d25e55293a
Author: Chirantan Ekbote <chirantan@chromium.org>
Date:   Tue Jul 14 19:26:39 2020 +0900

    fuse: Fix parameter for FS_IOC_{GET,SET}FLAGS
    
    commit 31070f6ccec09f3bd4f1e28cd1e592fa4f3ba0b6 upstream.
    
    The ioctl encoding for this parameter is a long but the documentation says
    it should be an int and the kernel drivers expect it to be an int.  If the
    fuse driver treats this as a long it might end up scribbling over the stack
    of a userspace process that only allocated enough space for an int.
    
    This was previously discussed in [1] and a patch for fuse was proposed in
    [2].  From what I can tell the patch in [2] was nacked in favor of adding
    new, "fixed" ioctls and using those from userspace.  However there is still
    no "fixed" version of these ioctls and the fact is that it's sometimes
    infeasible to change all userspace to use the new one.
    
    Handling the ioctls specially in the fuse driver seems like the most
    pragmatic way for fuse servers to support them without causing crashes in
    userspace applications that call them.
    
    [1]: https://lore.kernel.org/linux-fsdevel/20131126200559.GH20559@hall.aurel32.net/T/
    [2]: https://sourceforge.net/p/fuse/mailman/message/31771759/
    
    Signed-off-by: Chirantan Ekbote <chirantan@chromium.org>
    Fixes: 59efec7b9039 ("fuse: implement ioctl support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00de23f4f90ed0bc7ed252844d2edbfd86f8d500
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Jun 18 18:43:53 2020 +0300

    ovl: fix unneeded call to ovl_change_flags()
    
    commit 81a33c1ee941c3bb9ffc6bac8f676be13351344e upstream.
    
    The check if user has changed the overlay file was wrong, causing unneeded
    call to ovl_change_flags() including taking f_lock on every file access.
    
    Fixes: d989903058a8 ("ovl: do not generate duplicate fsnotify events for "fake" path")
    Cc: <stable@vger.kernel.org> # v4.19+
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f03b3a039e2ffdce8f708a0cf9231a4d0b7f9275
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Wed Jun 17 09:57:11 2020 +0300

    ovl: relax WARN_ON() when decoding lower directory file handle
    
    commit 124c2de2c0aee96271e4ddab190083d8aa7aa71a upstream.
    
    Decoding a lower directory file handle to overlay path with cold
    inode/dentry cache may go as follows:
    
    1. Decode real lower file handle to lower dir path
    2. Check if lower dir is indexed (was copied up)
    3. If indexed, get the upper dir path from index
    4. Lookup upper dir path in overlay
    5. If overlay path found, verify that overlay lower is the lower dir
       from step 1
    
    On failure to verify step 5 above, user will get an ESTALE error and a
    WARN_ON will be printed.
    
    A mismatch in step 5 could be a result of lower directory that was renamed
    while overlay was offline, after that lower directory has been copied up
    and indexed.
    
    This is a scripted reproducer based on xfstest overlay/052:
    
      # Create lower subdir
      create_dirs
      create_test_files $lower/lowertestdir/subdir
      mount_dirs
      # Copy up lower dir and encode lower subdir file handle
      touch $SCRATCH_MNT/lowertestdir
      test_file_handles $SCRATCH_MNT/lowertestdir/subdir -p -o $tmp.fhandle
      # Rename lower dir offline
      unmount_dirs
      mv $lower/lowertestdir $lower/lowertestdir.new/
      mount_dirs
      # Attempt to decode lower subdir file handle
      test_file_handles $SCRATCH_MNT -p -i $tmp.fhandle
    
    Since this WARN_ON() can be triggered by user we need to relax it.
    
    Fixes: 4b91c30a5a19 ("ovl: lookup connected ancestor of dir in inode cache")
    Cc: <stable@vger.kernel.org> # v4.16+
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77cc397f6bb05121ef5544e9d78d29ecf4ba7165
Author: youngjun <her0gyugyu@gmail.com>
Date:   Tue Jun 16 17:30:43 2020 +0900

    ovl: inode reference leak in ovl_is_inuse true case.
    
    commit 24f14009b8f1754ec2ae4c168940c01259b0f88a upstream.
    
    When "ovl_is_inuse" true case, trap inode reference not put.  plus adding
    the comment explaining sequence of ovl_is_inuse after ovl_setup_trap.
    
    Fixes: 0be0bfd2de9d ("ovl: fix regression caused by overlapping layers detection")
    Cc: <stable@vger.kernel.org> # v4.19+
    Reviewed-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: youngjun <her0gyugyu@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 691a7ee694a6eb0b037629f911046861f96d548a
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu Jul 9 21:56:08 2020 +0800

    serial: mxs-auart: add missed iounmap() in probe failure and remove
    
    commit d8edf8eb5f6e921fe6389f96d2cd05862730a6ff upstream.
    
    This driver calls ioremap() in probe, but it misses calling iounmap() in
    probe's error handler and remove.
    Add the missed calls to fix it.
    
    Fixes: 47d37d6f94cc ("serial: Add auart driver for i.MX23/28")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200709135608.68290-1-hslester96@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eed95ec1e1c3551d5500ea53570c1ff41ac4f364
Author: Alexander Lobakin <alobakin@pm.me>
Date:   Tue Jun 23 11:09:33 2020 +0000

    virtio: virtio_console: add missing MODULE_DEVICE_TABLE() for rproc serial
    
    commit 897c44f0bae574c5fb318c759b060bebf9dd6013 upstream.
    
    rproc_serial_id_table lacks an exposure to module devicetable, so
    when remoteproc firmware requests VIRTIO_ID_RPROC_SERIAL, no uevent
    is generated and no module autoloading occurs.
    Add missing MODULE_DEVICE_TABLE() annotation and move the existing
    one for VIRTIO_ID_CONSOLE right to the table itself.
    
    Fixes: 1b6370463e88 ("virtio_console: Add support for remoteproc serial")
    Cc: <stable@vger.kernel.org> # v3.8+
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Reviewed-by: Amit Shah <amit@kernel.org>
    Link: https://lore.kernel.org/r/x7C_CbeJtoGMy258nwAXASYz3xgFMFpyzmUvOyZzRnQrgWCREBjaqBOpAUS7ol4NnZYvSVwmTsCG0Ohyfvta-ygw6HMHcoeKK0C3QFiAO_Q=@pm.me
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1570996d9403dd6093acf031af23a6fabb88d4cc
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Jul 9 14:08:52 2020 +0200

    virt: vbox: Fix guest capabilities mask check
    
    commit 59d1d2e8e1e7c50d2657d5e4812b53f71f507968 upstream.
    
    Check the passed in capabilities against VMMDEV_GUEST_CAPABILITIES_MASK
    instead of against VMMDEV_EVENT_VALID_EVENT_MASK.
    This tightens the allowed mask from 0x7ff to 0x7.
    
    Fixes: 0ba002bc4393 ("virt: Add vboxguest driver for Virtual Box Guest integration")
    Cc: stable@vger.kernel.org
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200709120858.63928-3-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39a35dfb082563b89013fd171e6563729cfdfa80
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Jul 9 14:08:51 2020 +0200

    virt: vbox: Fix VBGL_IOCTL_VMMDEV_REQUEST_BIG and _LOG req numbers to match upstream
    
    commit f794db6841e5480208f0c3a3ac1df445a96b079e upstream.
    
    Until this commit the mainline kernel version (this version) of the
    vboxguest module contained a bug where it defined
    VBGL_IOCTL_VMMDEV_REQUEST_BIG and VBGL_IOCTL_LOG using
    _IOC(_IOC_READ | _IOC_WRITE, 'V', ...) instead of
    _IO(V, ...) as the out of tree VirtualBox upstream version does.
    
    Since the VirtualBox userspace bits are always built against VirtualBox
    upstream's headers, this means that so far the mainline kernel version
    of the vboxguest module has been failing these 2 ioctls with -ENOTTY.
    I guess that VBGL_IOCTL_VMMDEV_REQUEST_BIG is never used causing us to
    not hit that one and sofar the vboxguest driver has failed to actually
    log any log messages passed it through VBGL_IOCTL_LOG.
    
    This commit changes the VBGL_IOCTL_VMMDEV_REQUEST_BIG and VBGL_IOCTL_LOG
    defines to match the out of tree VirtualBox upstream vboxguest version,
    while keeping compatibility with the old wrong request defines so as
    to not break the kernel ABI in case someone has been using the old
    request defines.
    
    Fixes: f6ddd094f579 ("virt: Add vboxguest driver for Virtual Box Guest integration UAPI")
    Cc: stable@vger.kernel.org
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200709120858.63928-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8d4bcbf6ba1649e758ada6ec816f04267d537e1
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Tue Jul 7 16:15:53 2020 +0800

    USB: serial: option: add Quectel EG95 LTE modem
    
    commit da6902e5b6dbca9081e3d377f9802d4fd0c5ea59 upstream.
    
    Add support for Quectel Wireless Solutions Co., Ltd. EG95 LTE modem
    
    T:  Bus=01 Lev=01 Prnt=01 Port=02 Cnt=02 Dev#=  5 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0195 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0923b2c49a054a738b03c14fc4f0df7322d68e38
Author: Jörgen Storvist <jorgen.storvist@gmail.com>
Date:   Tue Jun 23 00:13:59 2020 +0200

    USB: serial: option: add GosunCn GM500 series
    
    commit 08d4ef5cc9203a113702f24725f6cf4db476c958 upstream.
    
    Add USB IDs for GosunCn GM500 series cellular modules.
    
    RNDIS config:
    usb-devices
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 12 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=305a ProdID=1404 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=e0(wlcon) Sub=01 Prot=03 Driver=rndis_host
    I:  If#=0x1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    I:  If#=0x2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    
    MBIM config:
    usb-devices
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 11 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=305a ProdID=1405 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x4 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    
    ECM config:
    usb-devices
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 13 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=305a ProdID=1406 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    I:  If#=0x4 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    
    Signed-off-by: Jörgen Storvist <jorgen.storvist@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb8e5a509fb5804c38591c010f8483beeb0d9d0a
Author: Igor Moura <imphilippini@gmail.com>
Date:   Tue Jun 23 05:11:11 2020 -0300

    USB: serial: ch341: add new Product ID for CH340
    
    commit 5d0136f8e79f8287e6a36780601f0ce797cf11c2 upstream.
    
    Add PID for CH340 that's found on some ESP8266 dev boards made by
    LilyGO. The specific device that contains such serial converter can be
    seen here: https://github.com/LilyGO/LILYGO-T-OI.
    
    Apparently, it's a regular CH340, but I've confirmed with others that
    also bought this board that the PID found on this device (0x7522)
    differs from other devices with the "same" converter (0x7523).
    Simply adding its PID to the driver and rebuilding it made it work
    as expected.
    
    Signed-off-by: Igor Moura <imphilippini@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8404f8b6e437b0e5c9dc4a0877c543f744f1bb33
Author: James Hilliard <james.hilliard1@gmail.com>
Date:   Tue Jun 16 16:04:03 2020 -0600

    USB: serial: cypress_m8: enable Simply Automated UPB PIM
    
    commit 5c45d04c5081c1830d674f4d22d4400ea2083afe upstream.
    
    This is a UPB (Universal Powerline Bus) PIM (Powerline Interface Module)
    which allows for controlling multiple UPB compatible devices from Linux
    using the standard serial interface.
    
    Based on vendor application source code there are two different models
    of USB based PIM devices in addition to a number of RS232 based PIM's.
    
    The vendor UPB application source contains the following USB ID's:
    
            #define USB_PCS_VENDOR_ID 0x04b4
            #define USB_PCS_PIM_PRODUCT_ID 0x5500
    
            #define USB_SAI_VENDOR_ID 0x17dd
            #define USB_SAI_PIM_PRODUCT_ID 0x5500
    
    The first set of ID's correspond to the PIM variant sold by Powerline
    Control Systems while the second corresponds to the Simply Automated
    Incorporated PIM. As the product ID for both of these match the default
    cypress HID->COM RS232 product ID it assumed that they both use an
    internal variant of this HID->COM RS232 converter hardware. However
    as the vendor ID for the Simply Automated variant is different we need
    to also add it to the cypress_M8 driver so that it is properly
    detected.
    
    Signed-off-by: James Hilliard <james.hilliard1@gmail.com>
    Link: https://lore.kernel.org/r/20200616220403.1807003-1-james.hilliard1@gmail.com
    Cc: stable@vger.kernel.org
    [ johan: amend VID define entry ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9290e81b98bec0ff1126d9f9e2448dd35d6eb25f
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 15 11:02:45 2020 +0200

    USB: serial: iuu_phoenix: fix memory corruption
    
    commit e7b931bee739e8a77ae216e613d3b99342b6dec0 upstream.
    
    The driver would happily overwrite its write buffer with user data in
    256 byte increments due to a removed buffer-space sanity check.
    
    Fixes: 5fcf62b0f1f2 ("tty: iuu_phoenix: fix locking.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.31
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6104a85d1c6f83a832e71b81a7e345f5a26fe9b
Author: Zhang Qiang <qiang.zhang@windriver.com>
Date:   Mon Jul 6 13:14:55 2020 +0800

    usb: gadget: function: fix missing spinlock in f_uac1_legacy
    
    commit 8778eb0927ddcd3f431805c37b78fa56481aeed9 upstream.
    
    Add a missing spinlock protection for play_queue, because
    the play_queue may be destroyed when the "playback_work"
    work func and "f_audio_out_ep_complete" callback func
    operate this paly_queue at the same time.
    
    Fixes: c6994e6f067cf ("USB: gadget: add USB Audio Gadget driver")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Zhang Qiang <qiang.zhang@windriver.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce3670966e46f0c765d4c0c6d33bb318f917abcf
Author: Peter Chen <peter.chen@nxp.com>
Date:   Tue Jul 7 14:06:01 2020 +0800

    usb: chipidea: core: add wakeup support for extcon
    
    commit 876d4e1e8298ad1f94d9e9392fc90486755437b4 upstream.
    
    If wakeup event occurred by extcon event, it needs to call
    ci_irq again since the first ci_irq calling at extcon notifier
    only wakes up controller, but do noop for event handling,
    it causes the extcon use case can't work well from low power mode.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 3ecb3e09b042 ("usb: chipidea: Use extcon framework for VBUS and ID detect")
    Reported-by: Philippe Schenker <philippe.schenker@toradex.com>
    Tested-by: Philippe Schenker <philippe.schenker@toradex.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200707060601.31907-2-peter.chen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77330682db4c9adb1dd3c6b785b3dedfaaca510e
Author: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
Date:   Sat May 30 11:41:50 2020 +0400

    usb: dwc2: Fix shutdown callback in platform
    
    commit 4fdf228cdf6925af45a2066d403821e0977bfddb upstream.
    
    To avoid lot of interrupts from dwc2 core, which can be asserted in
    specific conditions need to disable interrupts on HW level instead of
    disable IRQs on Kernel level, because of IRQ can be shared between
    drivers.
    
    Cc: stable@vger.kernel.org
    Fixes: a40a00318c7fc ("usb: dwc2: add shutdown callback to platform variant")
    Tested-by: Frank Mori Hess <fmh6jj@gmail.com>
    Reviewed-by: Alan Stern <stern@rowland.harvard.edu>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Reviewed-by: Frank Mori Hess <fmh6jj@gmail.com>
    Signed-off-by: Minas Harutyunyan <hminas@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70a6e4e9d6e1e05101fc89ee6da561ab1f2599dc
Author: Tom Rix <trix@redhat.com>
Date:   Wed Jul 8 06:12:43 2020 -0700

    USB: c67x00: fix use after free in c67x00_giveback_urb
    
    commit 211f08347355cba1f769bbf3355816a12b3ddd55 upstream.
    
    clang static analysis flags this error
    
    c67x00-sched.c:489:55: warning: Use of memory after it is freed [unix.Malloc]
            usb_hcd_giveback_urb(c67x00_hcd_to_hcd(c67x00), urb, urbp->status);
                                                                 ^~~~~~~~~~~~
    Problem happens in this block of code
    
            c67x00_release_urb(c67x00, urb);
            usb_hcd_unlink_urb_from_ep(c67x00_hcd_to_hcd(c67x00), urb);
            spin_unlock(&c67x00->lock);
            usb_hcd_giveback_urb(c67x00_hcd_to_hcd(c67x00), urb, urbp->status);
    
    In the call to c67x00_release_urb has this freeing of urbp
    
            urbp = urb->hcpriv;
            urb->hcpriv = NULL;
            list_del(&urbp->hep_node);
            kfree(urbp);
    
    And so urbp is freed before usb_hcd_giveback_urb uses it as its 3rd
    parameter.
    
    Since all is required is the status, pass the status directly as is
    done in c64x00_urb_dequeue
    
    Fixes: e9b29ffc519b ("USB: add Cypress c67x00 OTG controller HCD driver")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200708131243.24336-1-trix@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e92f801c08ea6b90f27bdf49248f50484350787d
Author: Kailang Yang <kailang@realtek.com>
Date:   Thu Jul 16 14:42:33 2020 +0800

    ALSA: hda/realtek - Enable Speaker for ASUS UX533 and UX534
    
    commit 473fbe13fd6f9082e413aea37e624ecbce5463cc upstream.
    
    ASUS UX533 and UX534 speaker still can't output.
    End User feedback speaker didn't have output.
    Add this COEF value will enable it.
    
    Fixes: 4e051106730d ("ALSA: hda/realtek: Enable audio jacks of ASUS UX533FD with ALC294")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Link: https://lore.kernel.org/r/80334402a93b48e385f8f4841b59ae09@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d90436bb73c863078933755120f771315bb82f53
Author: Kailang Yang <kailang@realtek.com>
Date:   Fri Jul 10 15:31:11 2020 +0800

    ALSA: hda/realtek - change to suitable link model for ASUS platform
    
    commit ef9ddb9dc4f8b1da3b975918cd1fd98ec055b918 upstream.
    
    ASUS platform couldn't need to use Headset Mode model.
    It changes to the suitable model.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/d05bcff170784ec7bb35023407148161@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e83fa9ce16507c7d81e809dc7e708038a79ff5e4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jul 10 18:06:56 2020 +0200

    ALSA: usb-audio: Fix race against the error recovery URB submission
    
    commit 9b7e5208a941e2e491a83eb5fa83d889e888fa2f upstream.
    
    USB MIDI driver has an error recovery mechanism to resubmit the URB in
    the delayed timer handler, and this may race with the standard start /
    stop operations.  Although both start and stop operations themselves
    don't race with each other due to the umidi->mutex protection, but
    this isn't applied to the timer handler.
    
    For fixing this potential race, the following changes are applied:
    
    - Since the timer handler can't use the mutex, we apply the
      umidi->disc_lock protection at each input stream URB submission;
      this also needs to change the GFP flag to GFP_ATOMIC
    - Add a check of the URB refcount and skip if already submitted
    - Move the timer cancel call at disconnection to the beginning of the
      procedure; this assures the in-flight timer handler is gone properly
      before killing all pending URBs
    
    Reported-by: syzbot+0f4ecfe6a2c322c81728@syzkaller.appspotmail.com
    Reported-by: syzbot+5f1d24c49c1d2c427497@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200710160656.16819-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a163f36fd0e736b9f085376a9bf7603587185b6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jul 10 15:59:59 2020 +0200

    ALSA: line6: Sync the pending work cancel at disconnection
    
    commit 68359a1ad8447c99732ebeab8c169bfed543667a upstream.
    
    Recently syzkaller reported a UAF in LINE6 driver, and it's likely
    because we call cancel_delayed_work() at the disconnect callback
    instead of cancel_delayed_work_sync().  Let's use the correct one
    instead.
    
    Reported-by: syzbot+145012a46658ac00fc9e@syzkaller.appspotmail.com
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/s5hlfjr4gio.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ca7b059ee4b099ecf56b5468cedfbba7e98b9e5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jul 10 15:33:51 2020 +0200

    ALSA: line6: Perform sanity check for each URB creation
    
    commit 6e8a914ad619042c5f25a4feb663357c4170fd8d upstream.
    
    LINE6 drivers create stream URBs with a fixed pipe without checking
    its validity, and this may lead to a kernel WARNING at the submission
    when a malformed USB descriptor is passed.
    
    For avoiding the kernel warning, perform the similar sanity checks for
    each pipe type at creating a URB.
    
    Reported-by: syzbot+c190f6858a04ea7fbc52@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/s5hv9iv4hq8.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 074a3ea55aa0cdc8f71c92ab45ca01d956e3d95c
Author: James Hilliard <james.hilliard1@gmail.com>
Date:   Tue Jun 23 13:24:15 2020 -0600

    HID: quirks: Ignore Simply Automated UPB PIM
    
    commit 1ee1369b46de1083238fced60ff718f59de4b8aa upstream.
    
    As this is a cypress HID->COM RS232 style device that is handled
    by the cypress_M8 driver we also need to add it to the ignore list
    in hid-quirks.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: James Hilliard <james.hilliard1@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27276deea2ecfe7a2926e0590418bc987535f5c5
Author: Sebastian Parschauer <s.parschauer@gmx.de>
Date:   Tue Jun 9 12:00:53 2020 +0200

    HID: quirks: Always poll Obins Anne Pro 2 keyboard
    
    commit ca28aff0e1dc7dce9e12a7fd9276b7118ce5e73a upstream.
    
    The Obins Anne Pro 2 keyboard (04d9:a293) disconnects after a few
    minutes of inactivity when using it wired and typing does not result
    in any input events any more. This is a common firmware flaw. So add
    the ALWAYS_POLL quirk for this device.
    
    GitHub user Dietrich Moerman (dietrichm) tested the quirk and
    requested my help in my project
    https://github.com/sriemer/fix-linux-mouse issue 22 to provide
    this patch.
    
    Link: https://www.reddit.com/r/AnnePro/comments/gruzcb/anne_pro_2_linux_cant_type_after_inactivity/
    Signed-off-by: Sebastian Parschauer <s.parschauer@gmx.de>
    Cc: stable@vger.kernel.org # v4.16+
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a2928f50a3b52362b3af56f2950c2aebd590bef
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Sun May 24 16:51:34 2020 -0700

    HID: magicmouse: do not set up autorepeat
    
    commit 6363d2065cd399cf9d6dc9d08c437f8658831100 upstream.
    
    Neither the trackpad, nor the mouse want input core to generate autorepeat
    events for their buttons, so let's reset the bit (as hid-input sets it for
    these devices based on the usage vendor code).
    
    Cc: stable@vger.kernel.org
    Reported-by: Yariv <oigevald+kernel@gmail.com>
    Tested-by: Yariv <oigevald+kernel@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d0541ea5e64132885a980e40280c6fe5915d3ab
Author: Saravana Kannan <saravanak@google.com>
Date:   Mon May 11 16:13:34 2020 +0100

    slimbus: core: Fix mismatch in of_node_get/put
    
    commit 01360857486c0e4435dea3aa2f78b47213b7cf6a upstream.
    
    Adding missing corresponding of_node_put
    
    Fixes: 7588a511bdb4 ("slimbus: core: add support to device tree helper")
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    [Srini: added fixes tag, removed NULL check and updated log]
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20200511151334.362-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0f5383a46ec4109de3274c2d80aed6247026063
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:11 2020 +0200

    mtd: rawnand: oxnas: Release all devices in the _remove() path
    
    commit 0a5f45e57e35d0840bedb816974ce2e63406cd8b upstream.
    
    oxnans_nand_remove() should release all MTD devices and clean all NAND
    devices, not only the first one registered.
    
    Fixes: 668592492409 ("mtd: nand: Add OX820 NAND Support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-39-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68609f64fced234350461a0a22f48b0dc123fa13
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:10 2020 +0200

    mtd: rawnand: oxnas: Unregister all devices on error
    
    commit b60391eb17b2956ff2fc4c348e5a464da21ff9cb upstream.
    
    On error, the oxnas probe path just frees the device which failed and
    aborts the probe, leaving unreleased resources.
    
    Fix this situation by calling mtd_device_unregister()/nand_cleanup()
    on these.
    
    Fixes: 668592492409 ("mtd: nand: Add OX820 NAND Support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-38-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffa3794f702cfda48f4122bdcff0552ca04c3f34
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:08 2020 +0200

    mtd: rawnand: oxnas: Keep track of registered devices
    
    commit 383fc3f613e7eac9f2e3c13b6f9fb8c1f39cb9d5 upstream.
    
    All initialized and registered devices should be listed somewhere so
    that we can unregister/free them in the _remove() path.
    
    This patch is not a fix per-se but is needed to apply three other
    fixes coming right after, explaining the Fixes/Cc: stable tags.
    
    Fixes: 668592492409 ("mtd: nand: Add OX820 NAND Support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-36-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 419486ab4e9824309b21afd29b40de6d19805ea7
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Fri May 22 14:15:21 2020 +0200

    mtd: rawnand: brcmnand: fix CS0 layout
    
    commit 3d3fb3c5be9ce07fa85d8f67fb3922e4613b955b upstream.
    
    Only v3.3-v5.0 have a different CS0 layout.
    Controllers before v3.3 use the same layout for every CS.
    
    Fixes: 27c5b17cd1b1 ("mtd: nand: add NAND driver "library" for Broadcom STB NAND controller")
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522121524.4161539-3-noltari@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd77d10286119d209cf882909c91d6cb27fd1b96
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Apr 28 11:42:55 2020 +0200

    mtd: rawnand: timings: Fix default tR_max and tCCS_min timings
    
    commit 4d8ec041d9c454029f6cd90622f6d81eb61e781c upstream.
    
    tR and tCCS are currently wrongly expressed in femtoseconds, while we
    expect these values to be expressed in picoseconds. Set right
    hardcoded values.
    
    Fixes: 6a943386ee36 mtd: rawnand: add default values for dynamic timings
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@collabora.com>
    Link: https://lore.kernel.org/linux-mtd/20200428094302.14624-3-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 522ec2df8102a9c004732cc82cf59b034511d496
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Fri Apr 24 18:44:59 2020 +0200

    mtd: rawnand: marvell: Fix probe error path
    
    commit c525b7af96714f72e316c70781570a4a3e1c2856 upstream.
    
    Ensure all chips are deregistered and cleaned in case of error during
    the probe.
    
    Fixes: 02f26ecf8c77 ("mtd: nand: add reworked Marvell NAND controller driver")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@collabora.com>
    Link: https://lore.kernel.org/linux-mtd/20200424164501.26719-5-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b278001aca8f25e0a07c07a2961dc54327b394d9
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Fri Apr 24 18:44:58 2020 +0200

    mtd: rawnand: marvell: Use nand_cleanup() when the device is not yet registered
    
    commit 7a0c18fb5c71c6ac7d4662a145e4227dcd4a36a3 upstream.
    
    Do not call nand_release() while the MTD device has not been
    registered, use nand_cleanup() instead.
    
    Fixes: 02f26ecf8c77 ("mtd: nand: add reworked Marvell NAND controller driver")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@collabora.com>
    Link: https://lore.kernel.org/linux-mtd/20200424164501.26719-4-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a91f874ff4750c1505bc0aea4213b4803f1ccb9e
Author: Maulik Shah <mkshah@codeaurora.org>
Date:   Sun Apr 12 20:20:04 2020 +0530

    soc: qcom: rpmh-rsc: Allow using free WAKE TCS for active request
    
    commit 38427e5a47bf83299da930bd474c6cb2632ad810 upstream.
    
    When there are more than one WAKE TCS available and there is no dedicated
    ACTIVE TCS available, invalidating all WAKE TCSes and waiting for current
    transfer to complete in first WAKE TCS blocks using another free WAKE TCS
    to complete current request.
    
    Remove rpmh_rsc_invalidate() to happen from tcs_write() when WAKE TCSes
    is re-purposed to be used for Active mode. Clear only currently used
    WAKE TCS's register configuration.
    
    Fixes: 2de4b8d33eab (drivers: qcom: rpmh-rsc: allow active requests from wake TCS)
    Signed-off-by: Maulik Shah <mkshah@codeaurora.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/1586703004-13674-7-git-send-email-mkshah@codeaurora.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c15a40c95a6108831b5ac3d4b42e35c5cefa69fd
Author: Raju P.L.S.S.S.N <rplsssn@codeaurora.org>
Date:   Sun Apr 12 20:20:03 2020 +0530

    soc: qcom: rpmh-rsc: Clear active mode configuration for wake TCS
    
    commit 15b3bf61b8d48f8e0ccd9d7f1bcb468b543da396 upstream.
    
    For RSCs that have sleep & wake TCS but no dedicated active TCS, wake
    TCS can be re-purposed to send active requests. Once the active requests
    are sent and response is received, the active mode configuration needs
    to be cleared so that controller can use wake TCS for sending wake
    requests.
    
    Introduce enable_tcs_irq() to enable completion IRQ for repurposed TCSes.
    
    Fixes: 2de4b8d33eab (drivers: qcom: rpmh-rsc: allow active requests from wake TCS)
    Signed-off-by: Raju P.L.S.S.S.N <rplsssn@codeaurora.org>
    [mkshah: call enable_tcs_irq() within drv->lock, update commit message]
    Signed-off-by: Maulik Shah <mkshah@codeaurora.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/1586703004-13674-6-git-send-email-mkshah@codeaurora.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8644121c656aec40e729ea118f023dbec746d3b5
Author: Maulik Shah <mkshah@codeaurora.org>
Date:   Sun Apr 12 20:20:01 2020 +0530

    soc: qcom: rpmh: Invalidate SLEEP and WAKE TCSes before flushing new data
    
    commit f5ac95f9ca2f439179a5baf48e1c0f22f83d936e upstream.
    
    TCSes have previously programmed data when rpmh_flush() is called.
    This can cause old data to trigger along with newly flushed.
    
    Fix this by cleaning SLEEP and WAKE TCSes before new data is flushed.
    
    With this there is no need to invoke rpmh_rsc_invalidate() call from
    rpmh_invalidate().
    
    Simplify rpmh_invalidate() by moving invalidate_batch() inside.
    
    Fixes: 600513dfeef3 ("drivers: qcom: rpmh: cache sleep/wake state requests")
    Signed-off-by: Maulik Shah <mkshah@codeaurora.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/1586703004-13674-4-git-send-email-mkshah@codeaurora.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5046990bf686cef59e6b3de86c43209328df26f
Author: Maulik Shah <mkshah@codeaurora.org>
Date:   Sun Apr 12 20:20:00 2020 +0530

    soc: qcom: rpmh: Update dirty flag only when data changes
    
    commit bb7000677a1b287206c8d4327c62442fa3050a8f upstream.
    
    Currently rpmh ctrlr dirty flag is set for all cases regardless of data
    is really changed or not. Add changes to update dirty flag when data is
    changed to newer values. Update dirty flag everytime when data in batch
    cache is updated since rpmh_flush() may get invoked from any CPU instead
    of only last CPU going to low power mode.
    
    Also move dirty flag updates to happen from within cache_lock and remove
    unnecessary INIT_LIST_HEAD() call and a default case from switch.
    
    Fixes: 600513dfeef3 ("drivers: qcom: rpmh: cache sleep/wake state requests")
    Signed-off-by: Maulik Shah <mkshah@codeaurora.org>
    Reviewed-by: Srinivas Rao L <lsrao@codeaurora.org>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Link: https://lore.kernel.org/r/1586703004-13674-3-git-send-email-mkshah@codeaurora.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2cd8f9060c7ba3390aa9965e1d359eff645ded0
Author: Jin Yao <yao.jin@linux.intel.com>
Date:   Thu Apr 9 15:07:55 2020 +0800

    perf stat: Zero all the 'ena' and 'run' array slot stats for interval mode
    
    commit 0e0bf1ea1147fcf74eab19c2d3c853cc3740a72f upstream.
    
    As the code comments in perf_stat_process_counter() say, we calculate
    counter's data every interval, and the display code shows ps->res_stats
    avg value. We need to zero the stats for interval mode.
    
    But the current code only zeros the res_stats[0], it doesn't zero the
    res_stats[1] and res_stats[2], which are for ena and run of counter.
    
    This patch zeros the whole res_stats[] for interval mode.
    
    Fixes: 51fd2df1e882 ("perf stat: Fix interval output values")
    Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jin Yao <yao.jin@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200409070755.17261-1-yao.jin@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe1219a2893fe93cec9a3217c3c2d5113365e26a
Author: John Johansen <john.johansen@canonical.com>
Date:   Mon Mar 30 23:37:54 2020 -0700

    apparmor: ensure that dfa state tables have entries
    
    commit c27c6bd2c4d6b6bb779f9b722d5607993e1d5e5c upstream.
    
    Currently it is possible to specify a state machine table with 0 length,
    this is not valid as optional tables are specified by not defining
    the table as present. Further this allows by-passing the base tables
    range check against the next/check tables.
    
    Fixes: d901d6a298dc ("apparmor: dfa split verification of table headers")
    Reported-by: Mike Salvatore <mike.salvatore@canonical.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9851f7ad4ea488173f1f89ff7aafb1dfb0b84e4
Author: Kevin Buettner <kevinb@redhat.com>
Date:   Sat Jul 18 00:20:03 2020 -0700

    copy_xstate_to_kernel: Fix typo which caused GDB regression
    
    commit 5714ee50bb4375bd586858ad800b1d9772847452 upstream.
    
    This fixes a regression encountered while running the
    gdb.base/corefile.exp test in GDB's test suite.
    
    In my testing, the typo prevented the sw_reserved field of struct
    fxregs_state from being output to the kernel XSAVES area.  Thus the
    correct mask corresponding to XCR0 was not present in the core file for
    GDB to interrogate, resulting in the following behavior:
    
       [kev@f32-1 gdb]$ ./gdb -q testsuite/outputs/gdb.base/corefile/corefile testsuite/outputs/gdb.base/corefile/corefile.core
       Reading symbols from testsuite/outputs/gdb.base/corefile/corefile...
       [New LWP 232880]
    
       warning: Unexpected size of section `.reg-xstate/232880' in core file.
    
    With the typo fixed, the test works again as expected.
    
    Signed-off-by: Kevin Buettner <kevinb@redhat.com>
    Fixes: 9e4636545933 ("copy_xstate_to_kernel(): don't leave parts of destination uninitialized")
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Dave Airlie <airlied@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebd74a77f8b70e370e872d66173f3dc2cc22a9e7
Author: Douglas Anderson <dianders@chromium.org>
Date:   Wed Jul 15 16:46:15 2020 -0700

    regmap: debugfs: Don't sleep while atomic for fast_io regmaps
    
    [ Upstream commit 299632e54b2e692d2830af84be51172480dc1e26 ]
    
    If a regmap has "fast_io" set then its lock function uses a spinlock.
    That doesn't work so well with the functions:
    * regmap_cache_only_write_file()
    * regmap_cache_bypass_write_file()
    
    Both of the above functions have the pattern:
    1. Lock the regmap.
    2. Call:
       debugfs_write_file_bool()
         copy_from_user()
           __might_fault()
             __might_sleep()
    
    Let's reorder things a bit so that we do all of our sleepable
    functions before we grab the lock.
    
    Fixes: d3dc5430d68f ("regmap: debugfs: Allow writes to cache state settings")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200715164611.1.I35b3533e8a80efde0cec1cc70f71e1e74b2fa0da@changeid
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 970354a32999cbe4d10c991f6e85a05859322ad5
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri Jun 26 10:06:02 2020 +0200

    ARM: dts: socfpga: Align L2 cache-controller nodename with dtschema
    
    [ Upstream commit d7adfe5ffed9faa05f8926223086b101e14f700d ]
    
    Fix dtschema validator warnings like:
        l2-cache@fffff000: $nodename:0:
            'l2-cache@fffff000' does not match '^(cache-controller|cpu)(@[0-9a-f,]+)*$'
    
    Fixes: 475dc86d08de ("arm: dts: socfpga: Add a base DTSI for Altera's Arria10 SOC")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c2ac700c9d720abd60e39c6ac82d6b5cdb69368
Author: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Date:   Tue Jul 7 12:34:12 2020 +0200

    Revert "thermal: mediatek: fix register index error"
    
    [ Upstream commit a8f62f183021be389561570ab5f8c701a5e70298 ]
    
    This reverts commit eb9aecd90d1a39601e91cd08b90d5fee51d321a6
    
    The above patch is supposed to fix a register index error on mt2701. It
    is not clear if the problem solved is a hang or just an invalid value
    returned, my guess is the second. The patch introduces, though, a new
    hang on MT8173 device making them unusable. So, seems reasonable, revert
    the patch because introduces a worst issue.
    
    The reason I send a revert instead of trying to fix the issue for MT8173
    is because the information needed to fix the issue is in the datasheet
    and is not public. So I am not really able to fix it.
    
    Fixes the following bug when CONFIG_MTK_THERMAL is set on MT8173
    devices.
    
    [    2.222488] Unable to handle kernel paging request at virtual address ffff8000125f5001
    [    2.230421] Mem abort info:
    [    2.233207]   ESR = 0x96000021
    [    2.236261]   EC = 0x25: DABT (current EL), IL = 32 bits
    [    2.241571]   SET = 0, FnV = 0
    [    2.244623]   EA = 0, S1PTW = 0
    [    2.247762] Data abort info:
    [    2.250640]   ISV = 0, ISS = 0x00000021
    [    2.254473]   CM = 0, WnR = 0
    [    2.257544] swapper pgtable: 4k pages, 48-bit VAs, pgdp=0000000041850000
    [    2.264251] [ffff8000125f5001] pgd=000000013ffff003, pud=000000013fffe003, pmd=000000013fff9003, pte=006800001100b707
    [    2.274867] Internal error: Oops: 96000021 [#1] PREEMPT SMP
    [    2.280432] Modules linked in:
    [    2.283483] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.7.0-rc6+ #162
    [    2.289914] Hardware name: Google Elm (DT)
    [    2.294003] pstate: 20000005 (nzCv daif -PAN -UAO)
    [    2.298792] pc : mtk_read_temp+0xb8/0x1c8
    [    2.302793] lr : mtk_read_temp+0x7c/0x1c8
    [    2.306794] sp : ffff80001003b930
    [    2.310100] x29: ffff80001003b930 x28: 0000000000000000
    [    2.315404] x27: 0000000000000002 x26: ffff0000f9550b10
    [    2.320709] x25: ffff0000f9550a80 x24: 0000000000000090
    [    2.326014] x23: ffff80001003ba24 x22: 00000000610344c0
    [    2.331318] x21: 0000000000002710 x20: 00000000000001f4
    [    2.336622] x19: 0000000000030d40 x18: ffff800011742ec0
    [    2.341926] x17: 0000000000000001 x16: 0000000000000001
    [    2.347230] x15: ffffffffffffffff x14: ffffff0000000000
    [    2.352535] x13: ffffffffffffffff x12: 0000000000000028
    [    2.357839] x11: 0000000000000003 x10: ffff800011295ec8
    [    2.363143] x9 : 000000000000291b x8 : 0000000000000002
    [    2.368447] x7 : 00000000000000a8 x6 : 0000000000000004
    [    2.373751] x5 : 0000000000000000 x4 : ffff800011295cb0
    [    2.379055] x3 : 0000000000000002 x2 : ffff8000125f5001
    [    2.384359] x1 : 0000000000000001 x0 : ffff0000f9550a80
    [    2.389665] Call trace:
    [    2.392105]  mtk_read_temp+0xb8/0x1c8
    [    2.395760]  of_thermal_get_temp+0x2c/0x40
    [    2.399849]  thermal_zone_get_temp+0x78/0x160
    [    2.404198]  thermal_zone_device_update.part.0+0x3c/0x1f8
    [    2.409589]  thermal_zone_device_update+0x34/0x48
    [    2.414286]  of_thermal_set_mode+0x58/0x88
    [    2.418375]  thermal_zone_of_sensor_register+0x1a8/0x1d8
    [    2.423679]  devm_thermal_zone_of_sensor_register+0x64/0xb0
    [    2.429242]  mtk_thermal_probe+0x690/0x7d0
    [    2.433333]  platform_drv_probe+0x5c/0xb0
    [    2.437335]  really_probe+0xe4/0x448
    [    2.440901]  driver_probe_device+0xe8/0x140
    [    2.445077]  device_driver_attach+0x7c/0x88
    [    2.449252]  __driver_attach+0xac/0x178
    [    2.453082]  bus_for_each_dev+0x78/0xc8
    [    2.456909]  driver_attach+0x2c/0x38
    [    2.460476]  bus_add_driver+0x14c/0x230
    [    2.464304]  driver_register+0x6c/0x128
    [    2.468131]  __platform_driver_register+0x50/0x60
    [    2.472831]  mtk_thermal_driver_init+0x24/0x30
    [    2.477268]  do_one_initcall+0x50/0x298
    [    2.481098]  kernel_init_freeable+0x1ec/0x264
    [    2.485450]  kernel_init+0x1c/0x110
    [    2.488931]  ret_from_fork+0x10/0x1c
    [    2.492502] Code: f9401081 f9400402 b8a67821 8b010042 (b9400042)
    [    2.498599] ---[ end trace e43e3105ed27dc99 ]---
    [    2.503367] Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    [    2.511020] SMP: stopping secondary CPUs
    [    2.514941] Kernel Offset: disabled
    [    2.518421] CPU features: 0x090002,25006005
    [    2.522595] Memory Limit: none
    [    2.525644] ---[ end Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b ]--
    
    Cc: Michael Kao <michael.kao@mediatek.com>
    Fixes: eb9aecd90d1a ("thermal: mediatek: fix register index error")
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200707103412.1010823-1-enric.balletbo@collabora.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46fd5a35be29ebeb504e7ffe4e250791c100e295
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jul 9 13:29:36 2020 +0300

    staging: comedi: verify array index is correct before using it
    
    [ Upstream commit ef75e14a6c935eec82abac07ab68e388514e39bc ]
    
    This code reads from the array before verifying that "trig" is a valid
    index.  If the index is wildly out of bounds then reading from an
    invalid address could lead to an Oops.
    
    Fixes: a8c66b684efa ("staging: comedi: addi_apci_1500: rewrite the subdevice support functions")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20200709102936.GA20875@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22bc69d5a8483ab89a15d9ff71b5a52a3decded4
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Thu May 28 20:35:54 2020 +0200

    usb: gadget: udc: atmel: fix uninitialized read in debug printk
    
    [ Upstream commit 30517ffeb3bff842e1355cbc32f1959d9dbb5414 ]
    
    Fixed commit moved the assignment of 'req', but did not update a
    reference in the DBG() call. Use the argument as it was renamed.
    
    Fixes: 5fb694f96e7c ("usb: gadget: udc: atmel: fix possible oops when unloading module")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43969aa5915204fc402ee08a8e868a1a476212c2
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Mon Jul 6 16:34:34 2020 +0200

    spi: spi-sun6i: sun6i_spi_transfer_one(): fix setting of clock rate
    
    [ Upstream commit ed7815db70d17b1741883f2da8e1d80bc2efe517 ]
    
    A SPI transfer defines the _maximum_ speed of the SPI transfer. However the
    driver doesn't take into account that the clock divider is always rounded down
    (due to integer arithmetics). This results in a too high clock rate for the SPI
    transfer.
    
    E.g.: with a mclk_rate of 24 MHz and a SPI transfer speed of 10 MHz, the
    original code calculates a reg of "0", which results in a effective divider of
    "2" and a 12 MHz clock for the SPI transfer.
    
    This patch fixes the issue by using DIV_ROUND_UP() instead of a plain
    integer division.
    
    While there simplify the divider calculation for the CDR1 case, use
    order_base_2() instead of two ilog2() calculations.
    
    Fixes: 3558fe900e8a ("spi: sunxi: Add Allwinner A31 SPI controller driver")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Acked-by: Maxime Ripard <mripard@kernel.org>
    Link: https://lore.kernel.org/r/20200706143443.9855-2-mkl@pengutronix.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a34d3075630f03a4fffdeb46057b672b46c20d04
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Jun 17 14:53:46 2020 +0200

    arm64: dts: meson: add missing gxl rng clock
    
    [ Upstream commit 95ca6f06dd4827ff63be5154120c7a8511cd9a41 ]
    
    The peripheral clock of the RNG is missing for gxl while it is present
    for gxbb.
    
    Fixes: 1b3f6d148692 ("ARM64: dts: meson-gx: add clock CLKID_RNG0 to hwrng node")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20200617125346.1163527-1-jbrunet@baylibre.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c512de82d66c40d5437bf018de3975b1015a0787
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jun 25 13:44:28 2020 +0100

    phy: sun4i-usb: fix dereference of pointer phy0 before it is null checked
    
    [ Upstream commit 38b1927e5bf9bcad4a2e33189ef1c5569f9599ba ]
    
    Currently pointer phy0 is being dereferenced via the assignment of
    phy on the call to phy_get_drvdata before phy0 is null checked, this
    can lead to a null pointer dereference. Fix this by performing the
    null check on phy0 before the call to phy_get_drvdata. Also replace
    the phy0 == NULL check with the more usual !phy0 idiom.
    
    Addresses-Coverity: ("Dereference before null check")
    Fixes: e6f32efb1b12 ("phy: sun4i-usb: Make sure to disable PHY0 passby for peripheral mode")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20200625124428.83564-1-colin.king@canonical.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98596300e08611cb5603c1d8a5f1bf9b466213ef
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun May 17 18:29:57 2020 +0100

    iio:health:afe4404 Fix timestamp alignment and prevent data leak.
    
    [ Upstream commit f88ecccac4be348bbcc6d056bdbc622a8955c04d ]
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 40 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak appart from previous readings.
    
    Fixes: 87aec56e27ef ("iio: health: Add driver for the TI AFE4404 heart monitor")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78598eff769a20298a7001a5fe76eea208ae4f2c
Author: Christoffer Nielsen <cn@obviux.dk>
Date:   Fri Jun 19 13:48:22 2020 +0200

    ALSA: usb-audio: Add registration quirk for Kingston HyperX Cloud Flight S
    
    [ Upstream commit 73094608b8e214952444fb104651704c98a37aeb ]
    
    Similar to the Kingston HyperX AMP, the Kingston HyperX Cloud
    Alpha S (0951:0x16ea) uses two interfaces, but only the second
    interface contains the capture stream. This patch delays the
    registration until the second interface appears.
    
    Signed-off-by: Christoffer Nielsen <cn@obviux.dk>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/CAOtG2YHOM3zy+ed9KS-J4HkZo_QGzcUG9MigSp4e4_-13r6B=Q@mail.gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7abffd73e057b1501771b37846296574b9a9bbb6
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Fri May 22 14:22:28 2020 +0200

    ACPI: video: Use native backlight on Acer TravelMate 5735Z
    
    [ Upstream commit c41c36e900a337b4132b12ccabc97f5578248b44 ]
    
    Currently, changing the brightness of the internal display of the Acer
    TravelMate 5735Z does not work. Pressing the function keys or changing the
    slider, GNOME Shell 3.36.2 displays the OSD (five steps), but the
    brightness does not change.
    
    The Acer TravelMate 5735Z shipped with Windows 7 and as such does not
    trigger our "win8 ready" heuristic for preferring the native backlight
    interface.
    
    Still ACPI backlight control doesn't work on this model, where as the
    native (intel_video) backlight interface does work by adding
    `acpi_backlight=native` or `acpi_backlight=none` to Linux’ command line.
    
    So, add a quirk to force using native backlight control on this model.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=207835
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19454aacd9cd19752eab7d88be898582f8fe2074
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Sat Apr 25 13:06:31 2020 -0700

    Input: mms114 - add extra compatible for mms345l
    
    [ Upstream commit 7842087b0196d674ed877d768de8f2a34d7fdc53 ]
    
    MMS345L is another first generation touch screen from Melfas,
    which uses mostly the same registers as MMS152.
    
    However, there is some garbage printed during initialization.
    Apparently MMS345L does not have the MMS152_COMPAT_GROUP register
    that is read+printed during initialization.
    
      TSP FW Rev: bootloader 0x6 / core 0x26 / config 0x26, Compat group: \x06
    
    On earlier kernel versions the compat group was actually printed as
    an ASCII control character, seems like it gets escaped now.
    
    But we probably shouldn't print something from a random register.
    
    Add a separate "melfas,mms345l" compatible that avoids reading
    from the MMS152_COMPAT_GROUP register. This might also help in case
    there is some other device-specific quirk in the future.
    
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Andi Shyti <andi@etezian.org>
    Link: https://lore.kernel.org/r/20200423102431.2715-1-stephan@gerhold.net
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f33f63100f6c7b55e4d616f6a7902799dbf40bf
Author: Emmanuel Pescosta <emmanuelpescosta099@gmail.com>
Date:   Sat Apr 4 17:38:43 2020 +0200

    ALSA: usb-audio: Add registration quirk for Kingston HyperX Cloud Alpha S
    
    [ Upstream commit fd60e0683e8e9107e09cd2e4798f3e27e85d2705 ]
    
    Similar to the Kingston HyperX AMP, the Kingston HyperX Cloud
    Alpha S (0951:16d8) uses two interfaces, but only the second
    interface contains the capture stream. This patch delays the
    registration until the second interface appears.
    
    Signed-off-by: Emmanuel Pescosta <emmanuelpescosta099@gmail.com>
    Link: https://lore.kernel.org/r/20200404153843.9288-1-emmanuelpescosta099@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c4bd9500d678fcc95bda1e02c0e91a6dda2509d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Mar 31 14:36:23 2020 +0200

    ACPI: video: Use native backlight on Acer Aspire 5783z
    
    [ Upstream commit 1c8fbc1f9bfb804ef2f0d4ee9397ab800e33f23a ]
    
    The Acer Aspire 5783z shipped with Windows 7 and as such does not trigger
    our "win8 ready" heuristic for prefering the native backlight interface.
    
    Still ACPI backlight control doesn't work on this model, where as the
    native (intel_video) backlight interface does work. Add a quirk to
    force using native backlight control on this model.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a124407e2526c7d3e597b05e3a6bbc93fea7021
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Mar 25 11:33:19 2020 +0100

    ALSA: usb-audio: Rewrite registration quirk handling
    
    [ Upstream commit d8695bc5b1fe88305396b1f788d3b5f218e28a30 ]
    
    A slight refactoring of the registration quirk code.  Now it uses the
    table lookup for easy additions in future.  Also the return type was
    changed to bool, and got a few more comments.
    
    Link: https://lore.kernel.org/r/20200325103322.2508-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4392265c5194cdd1ee11b54e61d22b3ac55edc6
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Feb 19 16:22:40 2020 +0800

    mmc: sdhci: do not enable card detect interrupt for gpio cd type
    
    [ Upstream commit e65bb38824711559844ba932132f417bc5a355e2 ]
    
    Except SDHCI_QUIRK_BROKEN_CARD_DETECTION and MMC_CAP_NONREMOVABLE,
    we also do not need to handle controller native card detect interrupt
    for gpio cd type.
    If we wrong enabled the card detect interrupt for gpio case, it will
    cause a lot of unexpected card detect interrupts during data transfer
    which should not happen.
    
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/1582100563-20555-2-git-send-email-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e27e2a5ec7eb4392038e4787cef2d497871542e
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Fri Feb 21 10:15:30 2020 +0100

    doc: dt: bindings: usb: dwc3: Update entries for disabling SS instances in park mode
    
    [ Upstream commit 3d157c28d2289edf0439e8308e8de3a06acaaf0e ]
    
    This patch updates the documentation with the information related
    to the quirks that needs to be added for disabling all SuperSpeed XHCI
    instances in park mode.
    
    Cc: Dongjin Kim <tobetter@gmail.com>
    Cc: Jianxin Pan <jianxin.pan@amlogic.com>
    Cc: Thinh Nguyen <thinhn@synopsys.com>
    Cc: Jun Li <lijun.kernel@gmail.com>
    Reported-by: Tim <elatllat@gmail.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9407f45d86babca9dbd24d06b142c70388e7d0a5
Author: Chris Wulff <crwulff@gmail.com>
Date:   Sat Mar 14 12:54:49 2020 -0400

    ALSA: usb-audio: Create a registration quirk for Kingston HyperX Amp (0951:16d8)
    
    [ Upstream commit 55f7326170d9e83e2d828591938e1101982a679c ]
    
    Create a quirk that allows special processing and/or
    skipping the call to snd_card_register.
    
    For HyperX AMP, which uses two interfaces, but only has
    a capture stream in the second, this allows the capture
    stream to merge with the first PCM.
    
    Signed-off-by: Chris Wulff <crwulff@gmail.com>
    Link: https://lore.kernel.org/r/20200314165449.4086-3-crwulff@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1a0c5bcb17ff99000dce2231d7364d0994f1d58
Author: Diego Elio Pettenò <flameeyes@flameeyes.com>
Date:   Sun Feb 23 19:11:44 2020 +0000

    scsi: sr: remove references to BLK_DEV_SR_VENDOR, leave it enabled
    
    [ Upstream commit 679b2ec8e060ca7a90441aff5e7d384720a41b76 ]
    
    This kernel configuration is basically enabling/disabling sr driver quirks
    detection. While these quirks are for fairly rare devices (very old CD
    burners, and a glucometer), the additional detection of these models is a
    very minimal amount of code.
    
    The logic behind the quirks is always built into the sr driver.
    
    This also removes the config from all the defconfig files that are enabling
    this already.
    
    Link: https://lore.kernel.org/r/20200223191144.726-1-flameeyes@flameeyes.com
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Diego Elio Pettenò <flameeyes@flameeyes.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 919c5b8b9ed3b75b7c2349988e818aadb9bf5bf7
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon Jan 20 14:10:08 2020 +0200

    ARM: at91: pm: add quirk for sam9x60's ulp1
    
    [ Upstream commit bb1a0e87e1c54cd884e9b92b1cec06b186edc7a0 ]
    
    On SAM9X60 2 nop operations has to be introduced after setting
    WAITMODE bit in CKGR_MOR.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/1579522208-19523-9-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a7a00bf3faf42172613da8d9cac4fe7c6832f00
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Jan 31 13:46:25 2020 +0100

    HID: quirks: Remove ITE 8595 entry from hid_have_special_driver
    
    [ Upstream commit 3045696d0ce663d67c95dcb8206d3de57f6841ec ]
    
    The ITE 8595 chip used in various 2-in-1 keyboard docks works fine with
    the hid-generic driver (minus the RF_KILL key) and also keeps working fine
    when swapping drivers, so there is no need to have it in the
    hid_have_special_driver list.
    
    Note the other 2 USB ids in hid-ite.c were never added to
    hid_have_special_driver.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3205c26035d7afb0554b50636c083a2da13f4c4
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 20 11:42:47 2019 +0000

    net: sfp: add some quirks for GPON modules
    
    [ Upstream commit b0eae33b2583dceb36224619f9fd85e6140ae594 ]
    
    Marc Micalizzi reports that Huawei MA5671A and Alcatel/Lucent G-010S-P
    modules are capable of 2500base-X, but incorrectly report their
    capabilities in the EEPROM.  It seems rather common that GPON modules
    mis-report.
    
    Let's fix these modules by adding some quirks.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6772d3299cf52d003c6e411de1d839bdb803a2a5
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 20 11:42:42 2019 +0000

    net: sfp: add support for module quirks
    
    [ Upstream commit b34bb2cb5b62c7397c28fcc335e8047a687eada4 ]
    
    Add support for applying module quirks to the list of supported
    ethtool link modes.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b83c99f1ea72c9406ab9fd3ec85f3d1f75fa488
Author: Sasha Levin <sashal@kernel.org>
Date:   Fri Jul 17 12:59:31 2020 -0400

    Revert "usb/ehci-platform: Set PM runtime as active on resume"
    
    This reverts commit 71f660a1a74b2eae7896f18f31b68e9c4f4eaea3.
    
    Eugeniu Rosca writes:
    
    On Thu, Jul 09, 2020 at 09:00:23AM +0200, Eugeniu Rosca wrote:
    >After integrating v4.14.186 commit 5410d158ca2a50 ("usb/ehci-platform:
    >Set PM runtime as active on resume") into downstream v4.14.x, we started
    >to consistently experience below panic [1] on every second s2ram of
    >R-Car H3 Salvator-X Renesas reference board.
    >
    >After some investigations, we concluded the following:
    > - the issue does not exist in vanilla v5.8-rc4+
    > - [bisecting shows that] the panic on v4.14.186 is caused by the lack
    >   of v5.6-rc1 commit 987351e1ea7772 ("phy: core: Add consumer device
    >   link support"). Getting evidence for that is easy. Reverting
    >   987351e1ea7772 in vanilla leads to a similar backtrace [2].
    >
    >Questions:
    > - Backporting 987351e1ea7772 ("phy: core: Add consumer device
    >   link support") to v4.14.187 looks challenging enough, so probably not
    >   worth it. Anybody to contradict this?
    > - Assuming no plans to backport the missing mainline commit to v4.14.x,
    >   should the following three v4.14.186 commits be reverted on v4.14.x?
    >   * baef809ea497a4 ("usb/ohci-platform: Fix a warning when hibernating")
    >   * 9f33eff4958885 ("usb/xhci-plat: Set PM runtime as active on resume")
    >   * 5410d158ca2a50 ("usb/ehci-platform: Set PM runtime as active on resume")
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c2011825d6717a48c5233544949d30e3a77d084
Author: Sasha Levin <sashal@kernel.org>
Date:   Fri Jul 17 12:59:13 2020 -0400

    Revert "usb/xhci-plat: Set PM runtime as active on resume"
    
    This reverts commit 661f5686a1c805e9b1bff65c312c38ef97faa91d.
    
    Eugeniu Rosca writes:
    
    On Thu, Jul 09, 2020 at 09:00:23AM +0200, Eugeniu Rosca wrote:
    >After integrating v4.14.186 commit 5410d158ca2a50 ("usb/ehci-platform:
    >Set PM runtime as active on resume") into downstream v4.14.x, we started
    >to consistently experience below panic [1] on every second s2ram of
    >R-Car H3 Salvator-X Renesas reference board.
    >
    >After some investigations, we concluded the following:
    > - the issue does not exist in vanilla v5.8-rc4+
    > - [bisecting shows that] the panic on v4.14.186 is caused by the lack
    >   of v5.6-rc1 commit 987351e1ea7772 ("phy: core: Add consumer device
    >   link support"). Getting evidence for that is easy. Reverting
    >   987351e1ea7772 in vanilla leads to a similar backtrace [2].
    >
    >Questions:
    > - Backporting 987351e1ea7772 ("phy: core: Add consumer device
    >   link support") to v4.14.187 looks challenging enough, so probably not
    >   worth it. Anybody to contradict this?
    > - Assuming no plans to backport the missing mainline commit to v4.14.x,
    >   should the following three v4.14.186 commits be reverted on v4.14.x?
    >   * baef809ea497a4 ("usb/ohci-platform: Fix a warning when hibernating")
    >   * 9f33eff4958885 ("usb/xhci-plat: Set PM runtime as active on resume")
    >   * 5410d158ca2a50 ("usb/ehci-platform: Set PM runtime as active on resume"
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0e76f2b007a69eaa00b15fd0d435d3781ba2e8f
Author: Sasha Levin <sashal@kernel.org>
Date:   Fri Jul 17 12:58:32 2020 -0400

    Revert "usb/ohci-platform: Fix a warning when hibernating"
    
    This reverts commit c83258a757687ffccce37ed73dba56cc6d4b8a1b.
    
    Eugeniu Rosca writes:
    
    On Thu, Jul 09, 2020 at 09:00:23AM +0200, Eugeniu Rosca wrote:
    >After integrating v4.14.186 commit 5410d158ca2a50 ("usb/ehci-platform:
    >Set PM runtime as active on resume") into downstream v4.14.x, we started
    >to consistently experience below panic [1] on every second s2ram of
    >R-Car H3 Salvator-X Renesas reference board.
    >
    >After some investigations, we concluded the following:
    > - the issue does not exist in vanilla v5.8-rc4+
    > - [bisecting shows that] the panic on v4.14.186 is caused by the lack
    >   of v5.6-rc1 commit 987351e1ea7772 ("phy: core: Add consumer device
    >   link support"). Getting evidence for that is easy. Reverting
    >   987351e1ea7772 in vanilla leads to a similar backtrace [2].
    >
    >Questions:
    > - Backporting 987351e1ea7772 ("phy: core: Add consumer device
    >   link support") to v4.14.187 looks challenging enough, so probably not
    >   worth it. Anybody to contradict this?
    > - Assuming no plans to backport the missing mainline commit to v4.14.x,
    >   should the following three v4.14.186 commits be reverted on v4.14.x?
    >   * baef809ea497a4 ("usb/ohci-platform: Fix a warning when hibernating")
    >   * 9f33eff4958885 ("usb/xhci-plat: Set PM runtime as active on resume")
    >   * 5410d158ca2a50 ("usb/ehci-platform: Set PM runtime as active on resume")
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4c6078f09cfa6d6c7740295c714a98a4f1b401f
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jun 19 11:47:46 2020 -0700

    of: of_mdio: Correct loop scanning logic
    
    [ Upstream commit 5a8d7f126c97d04d893f5e5be2b286437a0d01b0 ]
    
    Commit 209c65b61d94 ("drivers/of/of_mdio.c:fix of_mdiobus_register()")
    introduced a break of the loop on the premise that a successful
    registration should exit the loop. The premise is correct but not to
    code, because rc && rc != -ENODEV is just a special error condition,
    that means we would exit the loop even with rc == -ENODEV which is
    absolutely not correct since this is the error code to indicate to the
    MDIO bus layer that scanning should continue.
    
    Fix this by explicitly checking for rc = 0 as the only valid condition
    to break out of the loop.
    
    Fixes: 209c65b61d94 ("drivers/of/of_mdio.c:fix of_mdiobus_register()")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de817599f9214e9b2564ec49e551e6e7c68eedf5
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Jun 17 20:42:44 2020 -0700

    net: dsa: bcm_sf2: Fix node reference count
    
    [ Upstream commit 8dbe4c5d5e40fe140221024f7b16bec9f310bf70 ]
    
    of_find_node_by_name() will do an of_node_put() on the "from" argument.
    With CONFIG_OF_DYNAMIC enabled which checks for device_node reference
    counts, we would be getting a warning like this:
    
    [    6.347230] refcount_t: increment on 0; use-after-free.
    [    6.352498] WARNING: CPU: 3 PID: 77 at lib/refcount.c:156
    refcount_inc_checked+0x38/0x44
    [    6.360601] Modules linked in:
    [    6.363661] CPU: 3 PID: 77 Comm: kworker/3:1 Tainted: G        W
    5.4.46-gb78b3e9956e6 #13
    [    6.372546] Hardware name: BCM97278SV (DT)
    [    6.376649] Workqueue: events deferred_probe_work_func
    [    6.381796] pstate: 60000005 (nZCv daif -PAN -UAO)
    [    6.386595] pc : refcount_inc_checked+0x38/0x44
    [    6.391133] lr : refcount_inc_checked+0x38/0x44
    ...
    [    6.478791] Call trace:
    [    6.481243]  refcount_inc_checked+0x38/0x44
    [    6.485433]  kobject_get+0x3c/0x4c
    [    6.488840]  of_node_get+0x24/0x34
    [    6.492247]  of_irq_find_parent+0x3c/0xe0
    [    6.496263]  of_irq_parse_one+0xe4/0x1d0
    [    6.500191]  irq_of_parse_and_map+0x44/0x84
    [    6.504381]  bcm_sf2_sw_probe+0x22c/0x844
    [    6.508397]  platform_drv_probe+0x58/0xa8
    [    6.512413]  really_probe+0x238/0x3fc
    [    6.516081]  driver_probe_device+0x11c/0x12c
    [    6.520358]  __device_attach_driver+0xa8/0x100
    [    6.524808]  bus_for_each_drv+0xb4/0xd0
    [    6.528650]  __device_attach+0xd0/0x164
    [    6.532493]  device_initial_probe+0x24/0x30
    [    6.536682]  bus_probe_device+0x38/0x98
    [    6.540524]  deferred_probe_work_func+0xa8/0xd4
    [    6.545061]  process_one_work+0x178/0x288
    [    6.549078]  process_scheduled_works+0x44/0x48
    [    6.553529]  worker_thread+0x218/0x270
    [    6.557285]  kthread+0xdc/0xe4
    [    6.560344]  ret_from_fork+0x10/0x18
    [    6.563925] ---[ end trace 68f65caf69bb152a ]---
    
    Fix this by adding a of_node_get() to increment the reference count
    prior to the call.
    
    Fixes: afa3b592953b ("net: dsa: bcm_sf2: Ensure correct sub-node is parsed")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b34a6fd4f4c3e6771e34618072016e002a8557fb
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Jun 22 13:05:41 2020 +0200

    spi: spi-fsl-dspi: Fix lockup if device is shutdown during SPI transfer
    
    [ Upstream commit 3c525b69e8c1a9a6944e976603c7a1a713e728f9 ]
    
    During shutdown, the driver should unregister the SPI controller
    and stop the hardware.  Otherwise the dspi_transfer_one_message() could
    wait on completion infinitely.
    
    Additionally, calling spi_unregister_controller() first in device
    shutdown reverse-matches the probe function, where SPI controller is
    registered at the end.
    
    Fixes: dc234825997e ("spi: spi-fsl-dspi: Adding shutdown hook")
    Reported-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200622110543.5035-2-krzk@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12b633327598a027374a620e17804e8060fb91d4
Author: Angelo Dureghello <angelo@sysam.it>
Date:   Wed Dec 26 22:45:06 2018 +0100

    spi: fix initial SPI_SR value in spi-fsl-dspi
    
    [ Upstream commit aa54c1c9d90e6db75190813907190fadcce1bf45 ]
    
    On ColdFire mcf54418, using DSPI_DMA_MODE mode, spi transfers
    at first boot stage are not succeding:
    
    m25p80 spi0.1: unrecognized JEDEC id bytes: 00, 00, 00
    
    The reason is the SPI_SR initial value set by the driver, that
    is not clearing (not setting to 1) the RF_DF flag. After a tour
    on the dspi hw modules that use this driver(Vybrid, ColdFire and
    ls1021a) a better init value for SR register has been set.
    
    Signed-off-by: Angelo Dureghello <angelo@sysam.it>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e6734e7675fa9ef17b95894eff2c2e9bec79a61
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun May 17 18:29:56 2020 +0100

    iio:health:afe4403 Fix timestamp alignment and prevent data leak.
    
    commit 3f9c6d38797e9903937b007a341dad0c251765d6 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 32 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak appart from previous readings.
    
    Fixes: eec96d1e2d31 ("iio: health: Add driver for the TI AFE4403 heart monitor")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Andrew F. Davis <afd@ti.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcf600cfe3b6d4a33de27576fdeb7d57422d5a5f
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 7 16:53:57 2020 +0100

    iio:pressure:ms5611 Fix buffer element alignment
    
    commit 8db4afe163bbdd93dca6fcefbb831ef12ecc6b4d upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    Here there is no data leak possibility so use an explicit structure
    on the stack to ensure alignment and nice readable fashion.
    
    The forced alignment of ts isn't strictly necessary in this driver
    as the padding will be correct anyway (there isn't any).  However
    it is probably less fragile to have it there and it acts as
    documentation of the requirement.
    
    Fixes: 713bbb4efb9dc ("iio: pressure: ms5611: Add triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Tomasz Duszynski <tomasz.duszynski@octakon.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30bdaafb6449769a947a7c1c3113672efc29d3ae
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 7 16:53:53 2020 +0100

    iio:humidity:hts221 Fix alignment and data leak issues
    
    commit 5c49056ad9f3c786f7716da2dd47e4488fc6bd25 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    This data is allocated with kzalloc so no data can leak
    apart from previous readings.
    
    Explicit alignment of ts needed to ensure consistent padding
    on all architectures (particularly x86_32 with it's 4 byte alignment
    of s64)
    
    Fixes: e4a70e3e7d84 ("iio: humidity: add support to hts221 rh/temp combo device")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24c26e80b7c37ea2049c6c4d6032e05b2ac43fbb
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    commit d88de040e1df38414fc1e4380be9d0e997ab4d58 upstream.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c438c81fca35ce8b1d2d8c8c6f60711b9f45984
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu May 28 14:41:21 2020 +0800

    iio: mma8452: Add missed iio_device_unregister() call in mma8452_probe()
    
    commit d7369ae1f4d7cffa7574d15e1f787dcca184c49d upstream.
    
    The function iio_device_register() was called in mma8452_probe().
    But the function iio_device_unregister() was not called after
    a call of the function mma8452_set_freefall_mode() failed.
    Thus add the missed function call for one error case.
    
    Fixes: 1a965d405fc6 ("drivers:iio:accel:mma8452: added cleanup provision in case of failure.")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e54c21c5bba27f3d5cec04bab58a9385b5d8d5b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue May 26 18:47:17 2020 +0800

    iio: magnetometer: ak8974: Fix runtime PM imbalance on error
    
    commit 0187294d227dfc42889e1da8f8ce1e44fc25f147 upstream.
    
    When devm_regmap_init_i2c() returns an error code, a pairing
    runtime PM usage counter decrement is needed to keep the
    counter balanced. For error paths after ak8974_set_power(),
    ak8974_detect() and ak8974_reset(), things are the same.
    
    However, When iio_triggered_buffer_setup() returns an error
    code, there will be two PM usgae counter decrements.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Fixes: 7c94a8b2ee8c ("iio: magn: add a driver for AK8974")
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fced142f7973c3cbd634ce90991b8911f907310
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 7 16:53:52 2020 +0100

    iio:humidity:hdc100x Fix alignment and data leak issues
    
    commit ea5e7a7bb6205d24371373cd80325db1bc15eded upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    This data is allocated with kzalloc so no data can leak apart
    from previous readings.
    
    Fixes: 16bf793f86b2 ("iio: humidity: hdc100x: add triggered buffer support for HDC100X")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Matt Ranostay <matt.ranostay@konsulko.com>
    Cc: Alison Schofield <amsfield22@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2117df663af08bac57d44a1816429f6e9d723f4
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 7 16:53:49 2020 +0100

    iio:magnetometer:ak8974: Fix alignment and data leak issues
    
    commit 838e00b13bfd4cac8b24df25bfc58e2eb99bcc70 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    
    This data is allocated with kzalloc so no data can leak appart from
    previous readings.
    
    Fixes: 7c94a8b2ee8cf ("iio: magn: add a driver for AK8974")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47fed9aa3fe0838eee41cb4f94c386aa18729b9e
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Jul 9 15:59:53 2020 +0300

    arm64/alternatives: don't patch up internal branches
    
    [ Upstream commit 5679b28142193a62f6af93249c0477be9f0c669b ]
    
    Commit f7b93d42945c ("arm64/alternatives: use subsections for replacement
    sequences") moved the alternatives replacement sequences into subsections,
    in order to keep the as close as possible to the code that they replace.
    
    Unfortunately, this broke the logic in branch_insn_requires_update,
    which assumed that any branch into kernel executable code was a branch
    that required updating, which is no longer the case now that the code
    sequences that are patched in are in the same section as the patch site
    itself.
    
    So the only way to discriminate branches that require updating and ones
    that don't is to check whether the branch targets the replacement sequence
    itself, and so we can drop the call to kernel_text_address() entirely.
    
    Fixes: f7b93d42945c ("arm64/alternatives: use subsections for replacement sequences")
    Reported-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Tested-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Link: https://lore.kernel.org/r/20200709125953.30918-1-ardb@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 206c9c97c212b3a815998ed47c0fc8167cc16e6e
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Jul 2 13:15:27 2020 +0300

    i2c: eg20t: Load module automatically if ID matches
    
    [ Upstream commit 5f90786b31fb7d1e199a8999d46c4e3aea672e11 ]
    
    The driver can't be loaded automatically because it misses
    module alias to be provided. Add corresponding MODULE_DEVICE_TABLE()
    call to the driver.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8bc4ff1c44954178eba375d1b1eaa3cf6912536
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Thu Jun 25 13:30:18 2020 -0500

    gfs2: read-only mounts should grab the sd_freeze_gl glock
    
    [ Upstream commit b780cc615ba4795a7ef0e93b19424828a5ad456a ]
    
    Before this patch, only read-write mounts would grab the freeze
    glock in read-only mode, as part of gfs2_make_fs_rw. So the freeze
    glock was never initialized. That meant requests to freeze, which
    request the glock in EX, were granted without any state transition.
    That meant you could mount a gfs2 file system, which is currently
    frozen on a different cluster node, in read-only mode.
    
    This patch makes read-only mounts lock the freeze glock in SH mode,
    which will block for file systems that are frozen on another node.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01729f8db1b7b0450ba1e987c080dc1cf6f1cbcd
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Sat Jun 13 17:18:33 2020 +0300

    tpm_tis: extra chip->ops check on error path in tpm_tis_core_init
    
    [ Upstream commit ccf6fb858e17a8f8a914a1c6444d277cfedfeae6 ]
    
    Found by smatch:
    drivers/char/tpm/tpm_tis_core.c:1088 tpm_tis_core_init() warn:
     variable dereferenced before check 'chip->ops' (see line 979)
    
    'chip->ops' is assigned in the beginning of function
    in tpmm_chip_alloc->tpm_chip_alloc
    and is used before first possible goto to error path.
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6d9145866fbfac91c9c1dd8e32b355bdd63d000
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jun 30 10:19:21 2020 +0200

    arm64/alternatives: use subsections for replacement sequences
    
    [ Upstream commit f7b93d42945cc71e1346dd5ae07c59061d56745e ]
    
    When building very large kernels, the logic that emits replacement
    sequences for alternatives fails when relative branches are present
    in the code that is emitted into the .altinstr_replacement section
    and patched in at the original site and fixed up. The reason is that
    the linker will insert veneers if relative branches go out of range,
    and due to the relative distance of the .altinstr_replacement from
    the .text section where its branch targets usually live, veneers
    may be emitted at the end of the .altinstr_replacement section, with
    the relative branches in the sequence pointed at the veneers instead
    of the actual target.
    
    The alternatives patching logic will attempt to fix up the branch to
    point to its original target, which will be the veneer in this case,
    but given that the patch site is likely to be far away as well, it
    will be out of range and so patching will fail. There are other cases
    where these veneers are problematic, e.g., when the target of the
    branch is in .text while the patch site is in .init.text, in which
    case putting the replacement sequence inside .text may not help either.
    
    So let's use subsections to emit the replacement code as closely as
    possible to the patch site, to ensure that veneers are only likely to
    be emitted if they are required at the patch site as well, in which
    case they will be in range for the replacement sequence both before
    and after it is transported to the patch site.
    
    This will prevent alternative sequences in non-init code from being
    released from memory after boot, but this is tolerable given that the
    entire section is only 512 KB on an allyesconfig build (which weighs in
    at 500+ MB for the entire Image). Also, note that modules today carry
    the replacement sequences in non-init sections as well, and any of
    those that target init code will be emitted into init sections after
    this change.
    
    This fixes an early crash when booting an allyesconfig kernel on a
    system where any of the alternatives sequences containing relative
    branches are activated at boot (e.g., ARM64_HAS_PAN on TX2)
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Andre Przywara <andre.przywara@arm.com>
    Cc: Dave P Martin <dave.martin@arm.com>
    Link: https://lore.kernel.org/r/20200630081921.13443-1-ardb@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c24fb4f560dc5a763f4b513624c5321be2feb12e
Author: Angelo Dureghello <angelo.dureghello@timesys.com>
Date:   Wed Jun 17 09:53:41 2020 +0300

    m68k: mm: fix node memblock init
    
    [ Upstream commit c43e55796dd4d13f4855971a4d7970ce2cd94db4 ]
    
    After pulling 5.7.0 (linux-next merge), mcf5441x mmu boot was
    hanging silently.
    
    memblock_add() seems not appropriate, since using MAX_NUMNODES
    as node id, while memblock_add_node() sets up memory for node id 0.
    
    Signed-off-by: Angelo Dureghello <angelo.dureghello@timesys.com>
    Signed-off-by: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ea1f064426525ac59a26c7fe2105eec6e186848
Author: Mike Rapoport <rppt@linux.ibm.com>
Date:   Wed Jun 17 09:53:40 2020 +0300

    m68k: nommu: register start of the memory with memblock
    
    [ Upstream commit d63bd8c81d8ab64db506ffde569cc8ff197516e2 ]
    
    The m68k nommu setup code didn't register the beginning of the physical
    memory with memblock because it was anyway occupied by the kernel. However,
    commit fa3354e4ea39 ("mm: free_area_init: use maximal zone PFNs rather than
    zone sizes") changed zones initialization to use memblock.memory to detect
    the zone extents and this caused inconsistency between zone PFNs and the
    actual PFNs:
    
    BUG: Bad page state in process swapper  pfn:20165
    page:41fe0ca0 refcount:0 mapcount:1 mapping:00000000 index:0x0 flags: 0x0()
    raw: 00000000 00000100 00000122 00000000 00000000 00000000 00000000 00000000
    page dumped because: nonzero mapcount
    CPU: 0 PID: 1 Comm: swapper Not tainted 5.8.0-rc1-00001-g3a38f8a60c65-dirty #1
    Stack from 404c9ebc:
            404c9ebc 4029ab28 4029ab28 40088470 41fe0ca0 40299e21 40299df1 404ba2a4
            00020165 00000000 41fd2c10 402c7ba0 41fd2c04 40088504 41fe0ca0 40299e21
            00000000 40088a12 41fe0ca0 41fe0ca4 0000020a 00000000 00000001 402ca000
            00000000 41fe0ca0 41fd2c10 41fd2c10 00000000 00000000 402b2388 00000001
            400a0934 40091056 404c9f44 404c9f44 40088db4 402c7ba0 00000001 41fd2c04
            41fe0ca0 41fd2000 41fe0ca0 40089e02 4026ecf4 40089e4e 41fe0ca0 ffffffff
    Call Trace:
            [<40088470>] 0x40088470
     [<40088504>] 0x40088504
     [<40088a12>] 0x40088a12
     [<402ca000>] 0x402ca000
     [<400a0934>] 0x400a0934
    
    Adjust the memory registration with memblock to include the beginning of
    the physical memory and make sure that the area occupied by the kernel is
    marked as reserved.
    
    Signed-off-by: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2cde935ada2fce7a7c5b01831fe26625f4715b4
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 00:49:28 2020 -0500

    drm/exynos: fix ref count leak in mic_pre_enable
    
    [ Upstream commit d4f5a095daf0d25f0b385e1ef26338608433a4c5 ]
    
    in mic_pre_enable, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf59aa00e47eb43c5f425121587760ed070b1d93
Author: Bernard Zhao <bernard@vivo.com>
Date:   Fri Jun 12 09:23:49 2020 +0800

    drm/msm: fix potential memleak in error branch
    
    [ Upstream commit 177d3819633cd520e3f95df541a04644aab4c657 ]
    
    In function msm_submitqueue_create, the queue is a local
    variable, in return -EINVAL branch, queue didn`t add to ctx`s
    list yet, and also didn`t kfree, this maybe bring in potential
    memleak.
    
    Signed-off-by: Bernard Zhao <bernard@vivo.com>
    [trivial commit msg fixup]
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4d0e6c07bcd17d704afe64e10382ffc5d342765
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Tue Jul 7 13:03:25 2020 +0200

    vlan: consolidate VLAN parsing code and limit max parsing depth
    
    [ Upstream commit 469aceddfa3ed16e17ee30533fae45e90f62efd8 ]
    
    Toshiaki pointed out that we now have two very similar functions to extract
    the L3 protocol number in the presence of VLAN tags. And Daniel pointed out
    that the unbounded parsing loop makes it possible for maliciously crafted
    packets to loop through potentially hundreds of tags.
    
    Fix both of these issues by consolidating the two parsing functions and
    limiting the VLAN tag parsing to a max depth of 8 tags. As part of this,
    switch over __vlan_get_protocol() to use skb_header_pointer() instead of
    pskb_may_pull(), to avoid the possible side effects of the latter and keep
    the skb pointer 'const' through all the parsing functions.
    
    v2:
    - Use limit of 8 tags instead of 32 (matching XMIT_RECURSION_LIMIT)
    
    Reported-by: Toshiaki Makita <toshiaki.makita1@gmail.com>
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Fixes: d7bf2ebebc2b ("sched: consistently handle layer3 header accesses in the presence of VLANs")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fd235ff00008e093951b4801349436fa27c64e8
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Fri Jul 3 22:26:43 2020 +0200

    sched: consistently handle layer3 header accesses in the presence of VLANs
    
    [ Upstream commit d7bf2ebebc2bd61ab95e2a8e33541ef282f303d4 ]
    
    There are a couple of places in net/sched/ that check skb->protocol and act
    on the value there. However, in the presence of VLAN tags, the value stored
    in skb->protocol can be inconsistent based on whether VLAN acceleration is
    enabled. The commit quoted in the Fixes tag below fixed the users of
    skb->protocol to use a helper that will always see the VLAN ethertype.
    
    However, most of the callers don't actually handle the VLAN ethertype, but
    expect to find the IP header type in the protocol field. This means that
    things like changing the ECN field, or parsing diffserv values, stops
    working if there's a VLAN tag, or if there are multiple nested VLAN
    tags (QinQ).
    
    To fix this, change the helper to take an argument that indicates whether
    the caller wants to skip the VLAN tags or not. When skipping VLAN tags, we
    make sure to skip all of them, so behaviour is consistent even in QinQ
    mode.
    
    To make the helper usable from the ECN code, move it to if_vlan.h instead
    of pkt_sched.h.
    
    v3:
    - Remove empty lines
    - Move vlan variable definitions inside loop in skb_protocol()
    - Also use skb_protocol() helper in IP{,6}_ECN_decapsulate() and
      bpf_skb_ecn_set_ce()
    
    v2:
    - Use eth_type_vlan() helper in skb_protocol()
    - Also fix code that reads skb->protocol directly
    - Change a couple of 'if/else if' statements to switch constructs to avoid
      calling the helper twice
    
    Reported-by: Ilya Ponetayev <i.ponetaev@ndmsystems.com>
    Fixes: d8b9605d2697 ("net: sched: fix skb->protocol use in case of accelerated vlan path")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d584c6e29fcc538f917f23ef1a7927721fd6176
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Jul 9 16:28:44 2020 -0700

    cgroup: Fix sock_cgroup_data on big-endian.
    
    [ Upstream commit 14b032b8f8fce03a546dcf365454bec8c4a58d7d ]
    
    In order for no_refcnt and is_data to be the lowest order two
    bits in the 'val' we have to pad out the bitfield of the u8.
    
    Fixes: ad0f75e5f57c ("cgroup: fix cgroup_sk_alloc() for sk_clone_lock()")
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0505cc4c908f46a4d22c4994dbbe7bc489d0c52d
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Jul 2 11:52:56 2020 -0700

    cgroup: fix cgroup_sk_alloc() for sk_clone_lock()
    
    [ Upstream commit ad0f75e5f57ccbceec13274e1e242f2b5a6397ed ]
    
    When we clone a socket in sk_clone_lock(), its sk_cgrp_data is
    copied, so the cgroup refcnt must be taken too. And, unlike the
    sk_alloc() path, sock_update_netprioidx() is not called here.
    Therefore, it is safe and necessary to grab the cgroup refcnt
    even when cgroup_sk_alloc is disabled.
    
    sk_clone_lock() is in BH context anyway, the in_interrupt()
    would terminate this function if called there. And for sk_alloc()
    skcd->val is always zero. So it's safe to factor out the code
    to make it more readable.
    
    The global variable 'cgroup_sk_alloc_disabled' is used to determine
    whether to take these reference counts. It is impossible to make
    the reference counting correct unless we save this bit of information
    in skcd->val. So, add a new bit there to record whether the socket
    has already taken the reference counts. This obviously relies on
    kmalloc() to align cgroup pointers to at least 4 bytes,
    ARCH_KMALLOC_MINALIGN is certainly larger than that.
    
    This bug seems to be introduced since the beginning, commit
    d979a39d7242 ("cgroup: duplicate cgroup reference when cloning sockets")
    tried to fix it but not compeletely. It seems not easy to trigger until
    the recent commit 090e28b229af
    ("netprio_cgroup: Fix unlimited memory leak of v2 cgroups") was merged.
    
    Fixes: bd1060a1d671 ("sock, cgroup: add sock->sk_cgroup")
    Reported-by: Cameron Berkenpas <cam@neo-zeon.de>
    Reported-by: Peter Geis <pgwipeout@gmail.com>
    Reported-by: Lu Fengqi <lufq.fnst@cn.fujitsu.com>
    Reported-by: Daniël Sonck <dsonck92@gmail.com>
    Reported-by: Zhang Qiang <qiang.zhang@windriver.com>
    Tested-by: Cameron Berkenpas <cam@neo-zeon.de>
    Tested-by: Peter Geis <pgwipeout@gmail.com>
    Tested-by: Thomas Lamprecht <t.lamprecht@proxmox.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Zefan Li <lizefan@huawei.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Roman Gushchin <guro@fb.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81b6550142f35d80cc75f5ce5ba7c52f9408f213
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 1 18:39:33 2020 -0700

    tcp: md5: allow changing MD5 keys in all socket states
    
    [ Upstream commit 1ca0fafd73c5268e8fc4b997094b8bb2bfe8deea ]
    
    This essentially reverts commit 721230326891 ("tcp: md5: reject TCP_MD5SIG
    or TCP_MD5SIG_EXT on established sockets")
    
    Mathieu reported that many vendors BGP implementations can
    actually switch TCP MD5 on established flows.
    
    Quoting Mathieu :
       Here is a list of a few network vendors along with their behavior
       with respect to TCP MD5:
    
       - Cisco: Allows for password to be changed, but within the hold-down
         timer (~180 seconds).
       - Juniper: When password is initially set on active connection it will
         reset, but after that any subsequent password changes no network
         resets.
       - Nokia: No notes on if they flap the tcp connection or not.
       - Ericsson/RedBack: Allows for 2 password (old/new) to co-exist until
         both sides are ok with new passwords.
       - Meta-Switch: Expects the password to be set before a connection is
         attempted, but no further info on whether they reset the TCP
         connection on a change.
       - Avaya: Disable the neighbor, then set password, then re-enable.
       - Zebos: Would normally allow the change when socket connected.
    
    We can revert my prior change because commit 9424e2e7ad93 ("tcp: md5: fix potential
    overestimation of TCP option space") removed the leak of 4 kernel bytes to
    the wire that was the main reason for my patch.
    
    While doing my investigations, I found a bug when a MD5 key is changed, leading
    to these commits that stable teams want to consider before backporting this revert :
    
     Commit 6a2febec338d ("tcp: md5: add missing memory barriers in tcp_md5_do_add()/tcp_md5_hash_key()")
     Commit e6ced831ef11 ("tcp: md5: refine tcp_md5_do_add()/tcp_md5_hash_key() barriers")
    
    Fixes: 721230326891 "tcp: md5: reject TCP_MD5SIG or TCP_MD5SIG_EXT on established sockets"
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 797a053e29c1042881e9bff91243f19c3dcc7c76
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 1 11:43:04 2020 -0700

    tcp: md5: refine tcp_md5_do_add()/tcp_md5_hash_key() barriers
    
    [ Upstream commit e6ced831ef11a2a06e8d00aad9d4fc05b610bf38 ]
    
    My prior fix went a bit too far, according to Herbert and Mathieu.
    
    Since we accept that concurrent TCP MD5 lookups might see inconsistent
    keys, we can use READ_ONCE()/WRITE_ONCE() instead of smp_rmb()/smp_wmb()
    
    Clearing all key->key[] is needed to avoid possible KMSAN reports,
    if key->keylen is increased. Since tcp_md5_do_add() is not fast path,
    using __GFP_ZERO to clear all struct tcp_md5sig_key is simpler.
    
    data_race() was added in linux-5.8 and will prevent KCSAN reports,
    this can safely be removed in stable backports, if data_race() is
    not yet backported.
    
    v2: use data_race() both in tcp_md5_hash_key() and tcp_md5_do_add()
    
    Fixes: 6a2febec338d ("tcp: md5: add missing memory barriers in tcp_md5_do_add()/tcp_md5_hash_key()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Marco Elver <elver@google.com>
    Reviewed-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c83943a78ed9c6a979a6d0ede5c2aafd6ea8b3e8
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 1 12:41:23 2020 -0700

    tcp: md5: do not send silly options in SYNCOOKIES
    
    [ Upstream commit e114e1e8ac9d31f25b9dd873bab5d80c1fc482ca ]
    
    Whenever cookie_init_timestamp() has been used to encode
    ECN,SACK,WSCALE options, we can not remove the TS option in the SYNACK.
    
    Otherwise, tcp_synack_options() will still advertize options like WSCALE
    that we can not deduce later when receiving the packet from the client
    to complete 3WHS.
    
    Note that modern linux TCP stacks wont use MD5+TS+SACK in a SYN packet,
    but we can not know for sure that all TCP stacks have the same logic.
    
    Before the fix a tcpdump would exhibit this wrong exchange :
    
    10:12:15.464591 IP C > S: Flags [S], seq 4202415601, win 65535, options [nop,nop,md5 valid,mss 1400,sackOK,TS val 456965269 ecr 0,nop,wscale 8], length 0
    10:12:15.464602 IP S > C: Flags [S.], seq 253516766, ack 4202415602, win 65535, options [nop,nop,md5 valid,mss 1400,nop,nop,sackOK,nop,wscale 8], length 0
    10:12:15.464611 IP C > S: Flags [.], ack 1, win 256, options [nop,nop,md5 valid], length 0
    10:12:15.464678 IP C > S: Flags [P.], seq 1:13, ack 1, win 256, options [nop,nop,md5 valid], length 12
    10:12:15.464685 IP S > C: Flags [.], ack 13, win 65535, options [nop,nop,md5 valid], length 0
    
    After this patch the exchange looks saner :
    
    11:59:59.882990 IP C > S: Flags [S], seq 517075944, win 65535, options [nop,nop,md5 valid,mss 1400,sackOK,TS val 1751508483 ecr 0,nop,wscale 8], length 0
    11:59:59.883002 IP S > C: Flags [S.], seq 1902939253, ack 517075945, win 65535, options [nop,nop,md5 valid,mss 1400,sackOK,TS val 1751508479 ecr 1751508483,nop,wscale 8], length 0
    11:59:59.883012 IP C > S: Flags [.], ack 1, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508483 ecr 1751508479], length 0
    11:59:59.883114 IP C > S: Flags [P.], seq 1:13, ack 1, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508483 ecr 1751508479], length 12
    11:59:59.883122 IP S > C: Flags [.], ack 13, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508483 ecr 1751508483], length 0
    11:59:59.883152 IP S > C: Flags [P.], seq 1:13, ack 13, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508484 ecr 1751508483], length 12
    11:59:59.883170 IP C > S: Flags [.], ack 13, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508484 ecr 1751508484], length 0
    
    Of course, no SACK block will ever be added later, but nothing should break.
    Technically, we could remove the 4 nops included in MD5+TS options,
    but again some stacks could break seeing not conventional alignment.
    
    Fixes: 4957faade11b ("TCPCT part 1g: Responder Cookie => Initiator")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee66c2d19cb4146193a7033ebabc0eca915b5c5f
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 30 16:41:01 2020 -0700

    tcp: md5: add missing memory barriers in tcp_md5_do_add()/tcp_md5_hash_key()
    
    [ Upstream commit 6a2febec338df7e7699a52d00b2e1207dcf65b28 ]
    
    MD5 keys are read with RCU protection, and tcp_md5_do_add()
    might update in-place a prior key.
    
    Normally, typical RCU updates would allocate a new piece
    of memory. In this case only key->key and key->keylen might
    be updated, and we do not care if an incoming packet could
    see the old key, the new one, or some intermediate value,
    since changing the key on a live flow is known to be problematic
    anyway.
    
    We only want to make sure that in the case key->keylen
    is changed, cpus in tcp_md5_hash_key() wont try to use
    uninitialized data, or crash because key->keylen was
    read twice to feed sg_init_one() and ahash_request_set_crypt()
    
    Fixes: 9ea88a153001 ("tcp: md5: check md5 signature without socket lock")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 030a998aa6d8ff7027c56475abd7569cae7eefed
Author: Christoph Paasch <cpaasch@apple.com>
Date:   Wed Jul 8 16:18:34 2020 -0700

    tcp: make sure listeners don't initialize congestion-control state
    
    [ Upstream commit ce69e563b325f620863830c246a8698ccea52048 ]
    
    syzkaller found its way into setsockopt with TCP_CONGESTION "cdg".
    tcp_cdg_init() does a kcalloc to store the gradients. As sk_clone_lock
    just copies all the memory, the allocated pointer will be copied as
    well, if the app called setsockopt(..., TCP_CONGESTION) on the listener.
    If now the socket will be destroyed before the congestion-control
    has properly been initialized (through a call to tcp_init_transfer), we
    will end up freeing memory that does not belong to that particular
    socket, opening the door to a double-free:
    
    [   11.413102] ==================================================================
    [   11.414181] BUG: KASAN: double-free or invalid-free in tcp_cleanup_congestion_control+0x58/0xd0
    [   11.415329]
    [   11.415560] CPU: 3 PID: 4884 Comm: syz-executor.5 Not tainted 5.8.0-rc2 #80
    [   11.416544] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    [   11.418148] Call Trace:
    [   11.418534]  <IRQ>
    [   11.418834]  dump_stack+0x7d/0xb0
    [   11.419297]  print_address_description.constprop.0+0x1a/0x210
    [   11.422079]  kasan_report_invalid_free+0x51/0x80
    [   11.423433]  __kasan_slab_free+0x15e/0x170
    [   11.424761]  kfree+0x8c/0x230
    [   11.425157]  tcp_cleanup_congestion_control+0x58/0xd0
    [   11.425872]  tcp_v4_destroy_sock+0x57/0x5a0
    [   11.426493]  inet_csk_destroy_sock+0x153/0x2c0
    [   11.427093]  tcp_v4_syn_recv_sock+0xb29/0x1100
    [   11.427731]  tcp_get_cookie_sock+0xc3/0x4a0
    [   11.429457]  cookie_v4_check+0x13d0/0x2500
    [   11.433189]  tcp_v4_do_rcv+0x60e/0x780
    [   11.433727]  tcp_v4_rcv+0x2869/0x2e10
    [   11.437143]  ip_protocol_deliver_rcu+0x23/0x190
    [   11.437810]  ip_local_deliver+0x294/0x350
    [   11.439566]  __netif_receive_skb_one_core+0x15d/0x1a0
    [   11.441995]  process_backlog+0x1b1/0x6b0
    [   11.443148]  net_rx_action+0x37e/0xc40
    [   11.445361]  __do_softirq+0x18c/0x61a
    [   11.445881]  asm_call_on_stack+0x12/0x20
    [   11.446409]  </IRQ>
    [   11.446716]  do_softirq_own_stack+0x34/0x40
    [   11.447259]  do_softirq.part.0+0x26/0x30
    [   11.447827]  __local_bh_enable_ip+0x46/0x50
    [   11.448406]  ip_finish_output2+0x60f/0x1bc0
    [   11.450109]  __ip_queue_xmit+0x71c/0x1b60
    [   11.451861]  __tcp_transmit_skb+0x1727/0x3bb0
    [   11.453789]  tcp_rcv_state_process+0x3070/0x4d3a
    [   11.456810]  tcp_v4_do_rcv+0x2ad/0x780
    [   11.457995]  __release_sock+0x14b/0x2c0
    [   11.458529]  release_sock+0x4a/0x170
    [   11.459005]  __inet_stream_connect+0x467/0xc80
    [   11.461435]  inet_stream_connect+0x4e/0xa0
    [   11.462043]  __sys_connect+0x204/0x270
    [   11.465515]  __x64_sys_connect+0x6a/0xb0
    [   11.466088]  do_syscall_64+0x3e/0x70
    [   11.466617]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   11.467341] RIP: 0033:0x7f56046dc469
    [   11.467844] Code: Bad RIP value.
    [   11.468282] RSP: 002b:00007f5604dccdd8 EFLAGS: 00000246 ORIG_RAX: 000000000000002a
    [   11.469326] RAX: ffffffffffffffda RBX: 000000000068bf00 RCX: 00007f56046dc469
    [   11.470379] RDX: 0000000000000010 RSI: 0000000020000000 RDI: 0000000000000004
    [   11.471311] RBP: 00000000ffffffff R08: 0000000000000000 R09: 0000000000000000
    [   11.472286] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    [   11.473341] R13: 000000000041427c R14: 00007f5604dcd5c0 R15: 0000000000000003
    [   11.474321]
    [   11.474527] Allocated by task 4884:
    [   11.475031]  save_stack+0x1b/0x40
    [   11.475548]  __kasan_kmalloc.constprop.0+0xc2/0xd0
    [   11.476182]  tcp_cdg_init+0xf0/0x150
    [   11.476744]  tcp_init_congestion_control+0x9b/0x3a0
    [   11.477435]  tcp_set_congestion_control+0x270/0x32f
    [   11.478088]  do_tcp_setsockopt.isra.0+0x521/0x1a00
    [   11.478744]  __sys_setsockopt+0xff/0x1e0
    [   11.479259]  __x64_sys_setsockopt+0xb5/0x150
    [   11.479895]  do_syscall_64+0x3e/0x70
    [   11.480395]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   11.481097]
    [   11.481321] Freed by task 4872:
    [   11.481783]  save_stack+0x1b/0x40
    [   11.482230]  __kasan_slab_free+0x12c/0x170
    [   11.482839]  kfree+0x8c/0x230
    [   11.483240]  tcp_cleanup_congestion_control+0x58/0xd0
    [   11.483948]  tcp_v4_destroy_sock+0x57/0x5a0
    [   11.484502]  inet_csk_destroy_sock+0x153/0x2c0
    [   11.485144]  tcp_close+0x932/0xfe0
    [   11.485642]  inet_release+0xc1/0x1c0
    [   11.486131]  __sock_release+0xc0/0x270
    [   11.486697]  sock_close+0xc/0x10
    [   11.487145]  __fput+0x277/0x780
    [   11.487632]  task_work_run+0xeb/0x180
    [   11.488118]  __prepare_exit_to_usermode+0x15a/0x160
    [   11.488834]  do_syscall_64+0x4a/0x70
    [   11.489326]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Wei Wang fixed a part of these CDG-malloc issues with commit c12014440750
    ("tcp: memset ca_priv data to 0 properly").
    
    This patch here fixes the listener-scenario: We make sure that listeners
    setting the congestion-control through setsockopt won't initialize it
    (thus CDG never allocates on listeners). For those who use AF_UNSPEC to
    reuse a socket, tcp_disconnect() is changed to cleanup afterwards.
    
    (The issue can be reproduced at least down to v4.4.x.)
    
    Cc: Wei Wang <weiwan@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Fixes: 2b0a8c9eee81 ("tcp: add CDG congestion control")
    Signed-off-by: Christoph Paasch <cpaasch@apple.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 721e5f54af0dbe1cdee6ce3d5fc8b6abe36f3e43
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 30 13:51:28 2020 -0700

    tcp: fix SO_RCVLOWAT possible hangs under high mem pressure
    
    [ Upstream commit ba3bb0e76ccd464bb66665a1941fabe55dadb3ba ]
    
    Whenever tcp_try_rmem_schedule() returns an error, we are under
    trouble and should make sure to wakeup readers so that they
    can drain socket queues and eventually make room.
    
    Fixes: 03f45c883c6f ("tcp: avoid extra wakeups for SO_RCVLOWAT users")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aedd1023b6747b7eb0c4add6d20f421f93a9890a
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Tue Jul 7 16:14:45 2020 +0800

    net: usb: qmi_wwan: add support for Quectel EG95 LTE modem
    
    [ Upstream commit f815dd5cf48b905eeecf0a2b990e9b7ab048b4f1 ]
    
    Add support for Quectel Wireless Solutions Co., Ltd. EG95 LTE modem
    
    T:  Bus=01 Lev=01 Prnt=01 Port=02 Cnt=02 Dev#=  5 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0195 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1343c5394537d9a7c6faac028462fe4df6d8254d
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jul 8 20:13:59 2020 -0700

    net_sched: fix a memory leak in atm_tc_init()
    
    [ Upstream commit 306381aec7c2b5a658eebca008c8a1b666536cba ]
    
    When tcf_block_get() fails inside atm_tc_init(),
    atm_tc_put() is called to release the qdisc p->link.q.
    But the flow->ref prevents it to do so, as the flow->ref
    is still zero.
    
    Fix this by moving the p->link.ref initialization before
    tcf_block_get().
    
    Fixes: 6529eaba33f0 ("net: sched: introduce tcf block infractructure")
    Reported-and-tested-by: syzbot+d411cff6ab29cc2c311b@syzkaller.appspotmail.com
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c6e5496a71b9f23aff69aa588e400d38eb73eba
Author: Martin Varghese <martin.varghese@nokia.com>
Date:   Sun Jul 5 14:23:49 2020 +0530

    net: Added pointer check for dst->ops->neigh_lookup in dst_neigh_lookup_skb
    
    [ Upstream commit 394de110a73395de2ca4516b0de435e91b11b604 ]
    
    The packets from tunnel devices (eg bareudp) may have only
    metadata in the dst pointer of skb. Hence a pointer check of
    neigh_lookup is needed in dst_neigh_lookup_skb
    
    Kernel crashes when packets from bareudp device is processed in
    the kernel neighbour subsytem.
    
    [  133.384484] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [  133.385240] #PF: supervisor instruction fetch in kernel mode
    [  133.385828] #PF: error_code(0x0010) - not-present page
    [  133.386603] PGD 0 P4D 0
    [  133.386875] Oops: 0010 [#1] SMP PTI
    [  133.387275] CPU: 0 PID: 5045 Comm: ping Tainted: G        W         5.8.0-rc2+ #15
    [  133.388052] Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
    [  133.391076] RIP: 0010:0x0
    [  133.392401] Code: Bad RIP value.
    [  133.394029] RSP: 0018:ffffb79980003d50 EFLAGS: 00010246
    [  133.396656] RAX: 0000000080000102 RBX: ffff9de2fe0d6600 RCX: ffff9de2fe5e9d00
    [  133.399018] RDX: 0000000000000000 RSI: ffff9de2fe5e9d00 RDI: ffff9de2fc21b400
    [  133.399685] RBP: ffff9de2fe5e9d00 R08: 0000000000000000 R09: 0000000000000000
    [  133.400350] R10: ffff9de2fbc6be22 R11: ffff9de2fe0d6600 R12: ffff9de2fc21b400
    [  133.401010] R13: ffff9de2fe0d6628 R14: 0000000000000001 R15: 0000000000000003
    [  133.401667] FS:  00007fe014918740(0000) GS:ffff9de2fec00000(0000) knlGS:0000000000000000
    [  133.402412] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  133.402948] CR2: ffffffffffffffd6 CR3: 000000003bb72000 CR4: 00000000000006f0
    [  133.403611] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  133.404270] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  133.404933] Call Trace:
    [  133.405169]  <IRQ>
    [  133.405367]  __neigh_update+0x5a4/0x8f0
    [  133.405734]  arp_process+0x294/0x820
    [  133.406076]  ? __netif_receive_skb_core+0x866/0xe70
    [  133.406557]  arp_rcv+0x129/0x1c0
    [  133.406882]  __netif_receive_skb_one_core+0x95/0xb0
    [  133.407340]  process_backlog+0xa7/0x150
    [  133.407705]  net_rx_action+0x2af/0x420
    [  133.408457]  __do_softirq+0xda/0x2a8
    [  133.408813]  asm_call_on_stack+0x12/0x20
    [  133.409290]  </IRQ>
    [  133.409519]  do_softirq_own_stack+0x39/0x50
    [  133.410036]  do_softirq+0x50/0x60
    [  133.410401]  __local_bh_enable_ip+0x50/0x60
    [  133.410871]  ip_finish_output2+0x195/0x530
    [  133.411288]  ip_output+0x72/0xf0
    [  133.411673]  ? __ip_finish_output+0x1f0/0x1f0
    [  133.412122]  ip_send_skb+0x15/0x40
    [  133.412471]  raw_sendmsg+0x853/0xab0
    [  133.412855]  ? insert_pfn+0xfe/0x270
    [  133.413827]  ? vvar_fault+0xec/0x190
    [  133.414772]  sock_sendmsg+0x57/0x80
    [  133.415685]  __sys_sendto+0xdc/0x160
    [  133.416605]  ? syscall_trace_enter+0x1d4/0x2b0
    [  133.417679]  ? __audit_syscall_exit+0x1d9/0x280
    [  133.418753]  ? __prepare_exit_to_usermode+0x5d/0x1a0
    [  133.419819]  __x64_sys_sendto+0x24/0x30
    [  133.420848]  do_syscall_64+0x4d/0x90
    [  133.421768]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  133.422833] RIP: 0033:0x7fe013689c03
    [  133.423749] Code: Bad RIP value.
    [  133.424624] RSP: 002b:00007ffc7288f418 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    [  133.425940] RAX: ffffffffffffffda RBX: 000056151fc63720 RCX: 00007fe013689c03
    [  133.427225] RDX: 0000000000000040 RSI: 000056151fc63720 RDI: 0000000000000003
    [  133.428481] RBP: 00007ffc72890b30 R08: 000056151fc60500 R09: 0000000000000010
    [  133.429757] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040
    [  133.431041] R13: 000056151fc636e0 R14: 000056151fc616bc R15: 0000000000000080
    [  133.432481] Modules linked in: mpls_iptunnel act_mirred act_tunnel_key cls_flower sch_ingress veth mpls_router ip_tunnel bareudp ip6_udp_tunnel udp_tunnel macsec udp_diag inet_diag unix_diag af_packet_diag netlink_diag binfmt_misc xt_MASQUERADE iptable_nat xt_addrtype xt_conntrack nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 br_netfilter bridge stp llc ebtable_filter ebtables overlay ip6table_filter ip6_tables iptable_filter sunrpc ext4 mbcache jbd2 pcspkr i2c_piix4 virtio_balloon joydev ip_tables xfs libcrc32c ata_generic qxl pata_acpi drm_ttm_helper ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm ata_piix libata virtio_net net_failover virtio_console failover virtio_blk i2c_core virtio_pci virtio_ring serio_raw floppy virtio dm_mirror dm_region_hash dm_log dm_mod
    [  133.444045] CR2: 0000000000000000
    [  133.445082] ---[ end trace f4aeee1958fd1638 ]---
    [  133.446236] RIP: 0010:0x0
    [  133.447180] Code: Bad RIP value.
    [  133.448152] RSP: 0018:ffffb79980003d50 EFLAGS: 00010246
    [  133.449363] RAX: 0000000080000102 RBX: ffff9de2fe0d6600 RCX: ffff9de2fe5e9d00
    [  133.450835] RDX: 0000000000000000 RSI: ffff9de2fe5e9d00 RDI: ffff9de2fc21b400
    [  133.452237] RBP: ffff9de2fe5e9d00 R08: 0000000000000000 R09: 0000000000000000
    [  133.453722] R10: ffff9de2fbc6be22 R11: ffff9de2fe0d6600 R12: ffff9de2fc21b400
    [  133.455149] R13: ffff9de2fe0d6628 R14: 0000000000000001 R15: 0000000000000003
    [  133.456520] FS:  00007fe014918740(0000) GS:ffff9de2fec00000(0000) knlGS:0000000000000000
    [  133.458046] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  133.459342] CR2: ffffffffffffffd6 CR3: 000000003bb72000 CR4: 00000000000006f0
    [  133.460782] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  133.462240] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  133.463697] Kernel panic - not syncing: Fatal exception in interrupt
    [  133.465226] Kernel Offset: 0xfa00000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [  133.467025] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    Fixes: aaa0c23cb901 ("Fix dst_neigh_lookup/dst_neigh_lookup_skb return value handling bug")
    Signed-off-by: Martin Varghese <martin.varghese@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f58328d7d3b5543ba0004c9a0c47d26a8d6bfbad
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Jun 27 13:31:50 2020 -0700

    llc: make sure applications use ARPHRD_ETHER
    
    [ Upstream commit a9b1110162357689a34992d5c925852948e5b9fd ]
    
    syzbot was to trigger a bug by tricking AF_LLC with
    non sensible addr->sllc_arphrd
    
    It seems clear LLC requires an Ethernet device.
    
    Back in commit abf9d537fea2 ("llc: add support for SO_BINDTODEVICE")
    Octavian Purdila added possibility for application to use a zero
    value for sllc_arphrd, convert it to ARPHRD_ETHER to not cause
    regressions on existing applications.
    
    BUG: KASAN: use-after-free in __read_once_size include/linux/compiler.h:199 [inline]
    BUG: KASAN: use-after-free in list_empty include/linux/list.h:268 [inline]
    BUG: KASAN: use-after-free in waitqueue_active include/linux/wait.h:126 [inline]
    BUG: KASAN: use-after-free in wq_has_sleeper include/linux/wait.h:160 [inline]
    BUG: KASAN: use-after-free in skwq_has_sleeper include/net/sock.h:2092 [inline]
    BUG: KASAN: use-after-free in sock_def_write_space+0x642/0x670 net/core/sock.c:2813
    Read of size 8 at addr ffff88801e0b4078 by task ksoftirqd/3/27
    
    CPU: 3 PID: 27 Comm: ksoftirqd/3 Not tainted 5.5.0-rc1-syzkaller #0
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x197/0x210 lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xd4/0x30b mm/kasan/report.c:374
     __kasan_report.cold+0x1b/0x41 mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:639
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:135
     __read_once_size include/linux/compiler.h:199 [inline]
     list_empty include/linux/list.h:268 [inline]
     waitqueue_active include/linux/wait.h:126 [inline]
     wq_has_sleeper include/linux/wait.h:160 [inline]
     skwq_has_sleeper include/net/sock.h:2092 [inline]
     sock_def_write_space+0x642/0x670 net/core/sock.c:2813
     sock_wfree+0x1e1/0x260 net/core/sock.c:1958
     skb_release_head_state+0xeb/0x260 net/core/skbuff.c:652
     skb_release_all+0x16/0x60 net/core/skbuff.c:663
     __kfree_skb net/core/skbuff.c:679 [inline]
     consume_skb net/core/skbuff.c:838 [inline]
     consume_skb+0xfb/0x410 net/core/skbuff.c:832
     __dev_kfree_skb_any+0xa4/0xd0 net/core/dev.c:2967
     dev_kfree_skb_any include/linux/netdevice.h:3650 [inline]
     e1000_unmap_and_free_tx_resource.isra.0+0x21b/0x3a0 drivers/net/ethernet/intel/e1000/e1000_main.c:1963
     e1000_clean_tx_irq drivers/net/ethernet/intel/e1000/e1000_main.c:3854 [inline]
     e1000_clean+0x4cc/0x1d10 drivers/net/ethernet/intel/e1000/e1000_main.c:3796
     napi_poll net/core/dev.c:6532 [inline]
     net_rx_action+0x508/0x1120 net/core/dev.c:6600
     __do_softirq+0x262/0x98c kernel/softirq.c:292
     run_ksoftirqd kernel/softirq.c:603 [inline]
     run_ksoftirqd+0x8e/0x110 kernel/softirq.c:595
     smpboot_thread_fn+0x6a3/0xa40 kernel/smpboot.c:165
     kthread+0x361/0x430 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Allocated by task 8247:
     save_stack+0x23/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     __kasan_kmalloc mm/kasan/common.c:513 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:486
     kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:521
     slab_post_alloc_hook mm/slab.h:584 [inline]
     slab_alloc mm/slab.c:3320 [inline]
     kmem_cache_alloc+0x121/0x710 mm/slab.c:3484
     sock_alloc_inode+0x1c/0x1d0 net/socket.c:240
     alloc_inode+0x68/0x1e0 fs/inode.c:230
     new_inode_pseudo+0x19/0xf0 fs/inode.c:919
     sock_alloc+0x41/0x270 net/socket.c:560
     __sock_create+0xc2/0x730 net/socket.c:1384
     sock_create net/socket.c:1471 [inline]
     __sys_socket+0x103/0x220 net/socket.c:1513
     __do_sys_socket net/socket.c:1522 [inline]
     __se_sys_socket net/socket.c:1520 [inline]
     __ia32_sys_socket+0x73/0xb0 net/socket.c:1520
     do_syscall_32_irqs_on arch/x86/entry/common.c:337 [inline]
     do_fast_syscall_32+0x27b/0xe16 arch/x86/entry/common.c:408
     entry_SYSENTER_compat+0x70/0x7f arch/x86/entry/entry_64_compat.S:139
    
    Freed by task 17:
     save_stack+0x23/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     kasan_set_free_info mm/kasan/common.c:335 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:474
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:483
     __cache_free mm/slab.c:3426 [inline]
     kmem_cache_free+0x86/0x320 mm/slab.c:3694
     sock_free_inode+0x20/0x30 net/socket.c:261
     i_callback+0x44/0x80 fs/inode.c:219
     __rcu_reclaim kernel/rcu/rcu.h:222 [inline]
     rcu_do_batch kernel/rcu/tree.c:2183 [inline]
     rcu_core+0x570/0x1540 kernel/rcu/tree.c:2408
     rcu_core_si+0x9/0x10 kernel/rcu/tree.c:2417
     __do_softirq+0x262/0x98c kernel/softirq.c:292
    
    The buggy address belongs to the object at ffff88801e0b4000
     which belongs to the cache sock_inode_cache of size 1152
    The buggy address is located 120 bytes inside of
     1152-byte region [ffff88801e0b4000, ffff88801e0b4480)
    The buggy address belongs to the page:
    page:ffffea0000782d00 refcount:1 mapcount:0 mapping:ffff88807aa59c40 index:0xffff88801e0b4ffd
    raw: 00fffe0000000200 ffffea00008e6c88 ffffea0000782d48 ffff88807aa59c40
    raw: ffff88801e0b4ffd ffff88801e0b4000 0000000100000003 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88801e0b3f00: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
     ffff88801e0b3f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88801e0b4000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                    ^
     ffff88801e0b4080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88801e0b4100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: abf9d537fea2 ("llc: add support for SO_BINDTODEVICE")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0400bbe85fd29939306b9e0e048d0d78454a808
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jul 7 02:02:32 2020 +0800

    l2tp: remove skb_dst_set() from l2tp_xmit_skb()
    
    [ Upstream commit 27d53323664c549b5bb2dfaaf6f7ad6e0376a64e ]
    
    In the tx path of l2tp, l2tp_xmit_skb() calls skb_dst_set() to set
    skb's dst. However, it will eventually call inet6_csk_xmit() or
    ip_queue_xmit() where skb's dst will be overwritten by:
    
       skb_dst_set_noref(skb, dst);
    
    without releasing the old dst in skb. Then it causes dst/dev refcnt leak:
    
      unregister_netdevice: waiting for eth0 to become free. Usage count = 1
    
    This can be reproduced by simply running:
    
      # modprobe l2tp_eth && modprobe l2tp_ip
      # sh ./tools/testing/selftests/net/l2tp.sh
    
    So before going to inet6_csk_xmit() or ip_queue_xmit(), skb's dst
    should be dropped. This patch is to fix it by removing skb_dst_set()
    from l2tp_xmit_skb() and moving skb_dst_drop() into l2tp_xmit_core().
    
    Fixes: 3557baabf280 ("[L2TP]: PPP over L2TP driver core")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: James Chapman <jchapman@katalix.com>
    Tested-by: James Chapman <jchapman@katalix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e8f49ed24d41d070c596faa01e694f4e0a1c7c3
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Jul 3 17:00:32 2020 +0200

    ipv4: fill fl4_icmp_{type,code} in ping_v4_sendmsg
    
    [ Upstream commit 5eff06902394425c722f0a44d9545909a8800f79 ]
    
    IPv4 ping sockets don't set fl4.fl4_icmp_{type,code}, which leads to
    incomplete IPsec ACQUIRE messages being sent to userspace. Currently,
    both raw sockets and IPv6 ping sockets set those fields.
    
    Expected output of "ip xfrm monitor":
        acquire proto esp
          sel src 10.0.2.15/32 dst 8.8.8.8/32 proto icmp type 8 code 0 dev ens4
          policy src 10.0.2.15/32 dst 8.8.8.8/32
            <snip>
    
    Currently with ping sockets:
        acquire proto esp
          sel src 10.0.2.15/32 dst 8.8.8.8/32 proto icmp type 0 code 0 dev ens4
          policy src 10.0.2.15/32 dst 8.8.8.8/32
            <snip>
    
    The Libreswan test suite found this problem after Fedora changed the
    value for the sysctl net.ipv4.ping_group_range.
    
    Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
    Reported-by: Paul Wouters <pwouters@redhat.com>
    Tested-by: Paul Wouters <pwouters@redhat.com>
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0845447d9c783a502bd3e13af0f38aa4c7655a77
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Tue Jun 30 11:50:17 2020 -0600

    genetlink: remove genl_bind
    
    [ Upstream commit 1e82a62fec613844da9e558f3493540a5b7a7b67 ]
    
    A potential deadlock can occur during registering or unregistering a
    new generic netlink family between the main nl_table_lock and the
    cb_lock where each thread wants the lock held by the other, as
    demonstrated below.
    
    1) Thread 1 is performing a netlink_bind() operation on a socket. As part
       of this call, it will call netlink_lock_table(), incrementing the
       nl_table_users count to 1.
    2) Thread 2 is registering (or unregistering) a genl_family via the
       genl_(un)register_family() API. The cb_lock semaphore will be taken for
       writing.
    3) Thread 1 will call genl_bind() as part of the bind operation to handle
       subscribing to GENL multicast groups at the request of the user. It will
       attempt to take the cb_lock semaphore for reading, but it will fail and
       be scheduled away, waiting for Thread 2 to finish the write.
    4) Thread 2 will call netlink_table_grab() during the (un)registration
       call. However, as Thread 1 has incremented nl_table_users, it will not
       be able to proceed, and both threads will be stuck waiting for the
       other.
    
    genl_bind() is a noop, unless a genl_family implements the mcast_bind()
    function to handle setting up family-specific multicast operations. Since
    no one in-tree uses this functionality as Cong pointed out, simply removing
    the genl_bind() function will remove the possibility for deadlock, as there
    is no attempt by Thread 1 above to take the cb_lock semaphore.
    
    Fixes: c380d9a7afff ("genetlink: pass multicast bind/unbind to families")
    Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Johannes Berg <johannes.berg@intel.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf7318b750400d8477f21bae6d9ffbb73f382045
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Thu Jul 2 17:08:18 2020 +0000

    net: rmnet: fix lower interface leak
    
    commit 2a762e9e8cd1cf1242e4269a2244666ed02eecd1 upstream.
    
    There are two types of the lower interface of rmnet that are VND
    and BRIDGE.
    Each lower interface can have only one type either VND or BRIDGE.
    But, there is a case, which uses both lower interface types.
    Due to this unexpected behavior, lower interface leak occurs.
    
    Test commands:
        ip link add dummy0 type dummy
        ip link add dummy1 type dummy
        ip link add rmnet0 link dummy0 type rmnet mux_id 1
        ip link set dummy1 master rmnet0
        ip link add rmnet1 link dummy1 type rmnet mux_id 2
        ip link del rmnet0
    
    The dummy1 was attached as BRIDGE interface of rmnet0.
    Then, it also was attached as VND interface of rmnet1.
    This is unexpected behavior and there is no code for handling this case.
    So that below splat occurs when the rmnet0 interface is deleted.
    
    Splat looks like:
    [   53.254112][    C1] WARNING: CPU: 1 PID: 1192 at net/core/dev.c:8992 rollback_registered_many+0x986/0xcf0
    [   53.254117][    C1] Modules linked in: rmnet dummy openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv6 nfx
    [   53.254182][    C1] CPU: 1 PID: 1192 Comm: ip Not tainted 5.8.0-rc1+ #620
    [   53.254188][    C1] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   53.254192][    C1] RIP: 0010:rollback_registered_many+0x986/0xcf0
    [   53.254200][    C1] Code: 41 8b 4e cc 45 31 c0 31 d2 4c 89 ee 48 89 df e8 e0 47 ff ff 85 c0 0f 84 cd fc ff ff 0f 0b e5
    [   53.254205][    C1] RSP: 0018:ffff888050a5f2e0 EFLAGS: 00010287
    [   53.254214][    C1] RAX: ffff88805756d658 RBX: ffff88804d99c000 RCX: ffffffff8329d323
    [   53.254219][    C1] RDX: 1ffffffff0be6410 RSI: 0000000000000008 RDI: ffffffff85f32080
    [   53.254223][    C1] RBP: dffffc0000000000 R08: fffffbfff0be6411 R09: fffffbfff0be6411
    [   53.254228][    C1] R10: ffffffff85f32087 R11: 0000000000000001 R12: ffff888050a5f480
    [   53.254233][    C1] R13: ffff88804d99c0b8 R14: ffff888050a5f400 R15: ffff8880548ebe40
    [   53.254238][    C1] FS:  00007f6b86b370c0(0000) GS:ffff88806c200000(0000) knlGS:0000000000000000
    [   53.254243][    C1] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   53.254248][    C1] CR2: 0000562c62438758 CR3: 000000003f600005 CR4: 00000000000606e0
    [   53.254253][    C1] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   53.254257][    C1] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   53.254261][    C1] Call Trace:
    [   53.254266][    C1]  ? lockdep_hardirqs_on_prepare+0x379/0x540
    [   53.254270][    C1]  ? netif_set_real_num_tx_queues+0x780/0x780
    [   53.254275][    C1]  ? rmnet_unregister_real_device+0x56/0x90 [rmnet]
    [   53.254279][    C1]  ? __kasan_slab_free+0x126/0x150
    [   53.254283][    C1]  ? kfree+0xdc/0x320
    [   53.254288][    C1]  ? rmnet_unregister_real_device+0x56/0x90 [rmnet]
    [   53.254293][    C1]  unregister_netdevice_many.part.135+0x13/0x1b0
    [   53.254297][    C1]  rtnl_delete_link+0xbc/0x100
    [   53.254301][    C1]  ? rtnl_af_register+0xc0/0xc0
    [   53.254305][    C1]  rtnl_dellink+0x2dc/0x840
    [   53.254309][    C1]  ? find_held_lock+0x39/0x1d0
    [   53.254314][    C1]  ? valid_fdb_dump_strict+0x620/0x620
    [   53.254318][    C1]  ? rtnetlink_rcv_msg+0x457/0x890
    [   53.254322][    C1]  ? lock_contended+0xd20/0xd20
    [   53.254326][    C1]  rtnetlink_rcv_msg+0x4a8/0x890
    [ ... ]
    [   73.813696][ T1192] unregister_netdevice: waiting for rmnet0 to become free. Usage count = 1
    
    Fixes: 037f9cdf72fb ("net: rmnet: use upper/lower device infrastructure")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0753b05cfcb79523f5fa29bb8499027a631fea2c
Author: Changbin Du <changbin.du@intel.com>
Date:   Tue Jan 28 23:29:38 2020 +0800

    perf: Make perf able to build with latest libbfd
    
    commit 0ada120c883d4f1f6aafd01cf0fbb10d8bbba015 upstream.
    
    libbfd has changed the bfd_section_* macros to inline functions
    bfd_section_<field> since 2019-09-18. See below two commits:
      o http://www.sourceware.org/ml/gdb-cvs/2019-09/msg00064.html
      o https://www.sourceware.org/ml/gdb-cvs/2019-09/msg00072.html
    
    This fix make perf able to build with both old and new libbfd.
    
    Signed-off-by: Changbin Du <changbin.du@gmail.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200128152938.31413-1-changbin.du@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jianmin Wang <jianmin@iscas.ac.cn>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
