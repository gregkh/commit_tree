commit 8bba2e2e62cbf2db0d03e4de1204f7850bc45c44
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Dec 15 08:50:48 2016 -0800

    Linux 4.8.15

commit 762c9bb16fced1d84b446fa7b73fee0f977b400d
Author: David Michael <david.michael@coreos.com>
Date:   Tue Nov 29 11:15:12 2016 -0800

    crypto: rsa - Add Makefile dependencies to fix parallel builds
    
    commit 57891633eeef60e732e045731cf20e50ee80acb4 upstream.
    
    Both asn1 headers are included by rsa_helper.c, so rsa_helper.o
    should explicitly depend on them.
    
    Signed-off-by: David Michael <david.michael@coreos.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Tuomas Tynkkynen <tuomas@tuxera.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 014e5a7d93547351e09b4c5ca5b1087488b853d6
Author: Michal Hocko <mhocko@suse.com>
Date:   Wed Dec 7 14:54:38 2016 +0100

    hotplug: Make register and unregister notifier API symmetric
    
    commit 777c6e0daebb3fcefbbd6f620410a946b07ef6d0 upstream.
    
    Yu Zhao has noticed that __unregister_cpu_notifier only unregisters its
    notifiers when HOTPLUG_CPU=y while the registration might succeed even
    when HOTPLUG_CPU=n if MODULE is enabled. This means that e.g. zswap
    might keep a stale notifier on the list on the manual clean up during
    the pool tear down and thus corrupt the list. Resulting in the following
    
    [  144.964346] BUG: unable to handle kernel paging request at ffff880658a2be78
    [  144.971337] IP: [<ffffffffa290b00b>] raw_notifier_chain_register+0x1b/0x40
    <snipped>
    [  145.122628] Call Trace:
    [  145.125086]  [<ffffffffa28e5cf8>] __register_cpu_notifier+0x18/0x20
    [  145.131350]  [<ffffffffa2a5dd73>] zswap_pool_create+0x273/0x400
    [  145.137268]  [<ffffffffa2a5e0fc>] __zswap_param_set+0x1fc/0x300
    [  145.143188]  [<ffffffffa2944c1d>] ? trace_hardirqs_on+0xd/0x10
    [  145.149018]  [<ffffffffa2908798>] ? kernel_param_lock+0x28/0x30
    [  145.154940]  [<ffffffffa2a3e8cf>] ? __might_fault+0x4f/0xa0
    [  145.160511]  [<ffffffffa2a5e237>] zswap_compressor_param_set+0x17/0x20
    [  145.167035]  [<ffffffffa2908d3c>] param_attr_store+0x5c/0xb0
    [  145.172694]  [<ffffffffa290848d>] module_attr_store+0x1d/0x30
    [  145.178443]  [<ffffffffa2b2b41f>] sysfs_kf_write+0x4f/0x70
    [  145.183925]  [<ffffffffa2b2a5b9>] kernfs_fop_write+0x149/0x180
    [  145.189761]  [<ffffffffa2a99248>] __vfs_write+0x18/0x40
    [  145.194982]  [<ffffffffa2a9a412>] vfs_write+0xb2/0x1a0
    [  145.200122]  [<ffffffffa2a9a732>] SyS_write+0x52/0xa0
    [  145.205177]  [<ffffffffa2ff4d97>] entry_SYSCALL_64_fastpath+0x12/0x17
    
    This can be even triggered manually by changing
    /sys/module/zswap/parameters/compressor multiple times.
    
    Fix this issue by making unregister APIs symmetric to the register so
    there are no surprises.
    
    Fixes: 47e627bc8c9a ("[PATCH] hotplug: Allow modules to use the cpu hotplug notifiers even if !CONFIG_HOTPLUG_CPU")
    Reported-and-tested-by: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Cc: linux-mm@kvack.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Dan Streetman <ddstreet@ieee.org>
    Link: http://lkml.kernel.org/r/20161207135438.4310-1-mhocko@kernel.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3527ad05b46ee204c1636cdb1c2a526d61486947
Author: Sven Eckelmann <sven@narfation.org>
Date:   Wed Nov 30 21:47:09 2016 +0100

    batman-adv: Check for alloc errors when preparing TT local data
    
    commit c2d0f48a13e53b4747704c9e692f5e765e52041a upstream.
    
    batadv_tt_prepare_tvlv_local_data can fail to allocate the memory for the
    new TVLV block. The caller is informed about this problem with the returned
    length of 0. Not checking this value results in an invalid memory access
    when either tt_data or tt_change is accessed.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 7ea7b4a14275 ("batman-adv: make the TT CRC logic VLAN specific")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32ccd76788a5975c16556c97c5ba0ec17148cf14
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Fri Oct 28 17:12:28 2016 +0200

    m68k: Fix ndelay() macro
    
    commit 7e251bb21ae08ca2e4fb28cc0981fac2685a8efa upstream.
    
    The current ndelay() macro definition has an extra semi-colon at the
    end of the line thus leading to a compilation error when ndelay is used
    in a conditional block without curly braces like this one:
    
            if (cond)
                    ndelay(t);
            else
                    ...
    
    which, after the preprocessor pass gives:
    
            if (cond)
                    m68k_ndelay(t);;
            else
                    ...
    
    thus leading to the following gcc error:
    
            error: 'else' without a previous 'if'
    
    Remove this extra semi-colon.
    
    Signed-off-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Fixes: c8ee038bd1488 ("m68k: Implement ndelay() based on the existing udelay() logic")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fc7a4758608571db1aa1eabd12a88f5dd37a327
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Nov 30 15:56:46 2016 -0500

    ceph: don't set req->r_locked_dir in ceph_d_revalidate
    
    commit c3f4688a08fd86f1bf8e055724c84b7a40a09733 upstream.
    
    This function sets req->r_locked_dir which is supposed to indicate to
    ceph_fill_trace that the parent's i_rwsem is locked for write.
    Unfortunately, there is no guarantee that the dir will be locked when
    d_revalidate is called, so we really don't want ceph_fill_trace to do
    any dcache manipulation from this context. Clear req->r_locked_dir since
    it's clearly not safe to do that.
    
    What we really want to know with d_revalidate is whether the dentry
    still points to the same inode. ceph_fill_trace installs a pointer to
    the inode in req->r_target_inode, so we can just compare that to
    d_inode(dentry) to see if it's the same one after the lookup.
    
    Also, since we aren't generally interested in the parent here, we can
    switch to using a GETATTR to hint that to the MDS, which also means that
    we only need to reserve one cap.
    
    Finally, just remove the d_unhashed check. That's really outside the
    purview of a filesystem's d_revalidate. If the thing became unhashed
    while we're checking it, then that's up to the VFS to handle anyway.
    
    Fixes: 200fd27c8fa2 ("ceph: use lookup request to revalidate dentry")
    Link: http://tracker.ceph.com/issues/18041
    Reported-by: Donatas Abraitis <donatas.abraitis@gmail.com>
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a05f493f8d4ee217cfbc5a5eb1b8bd4782f8d7db
Author: Stefan Agner <stefan@agner.ch>
Date:   Tue Nov 22 16:42:04 2016 -0800

    ARM: dts: imx7d: fix LCDIF clock assignment
    
    commit 4b707fa00a80b19b80bc8df6f1cbf4bdd9c91402 upstream.
    
    The eLCDIF IP of the i.MX 7 SoC knows multiple clocks and lists them
    separately:
    
    Clock      Clock Root              Description
    apb_clk    MAIN_AXI_CLK_ROOT       AXI clock
    pix_clk    LCDIF_PIXEL_CLK_ROOT    Pixel clock
    ipg_clk_s  MAIN_AXI_CLK_ROOT       Peripheral access clock
    
    All of them are switched by a single gate, which is part of the
    IMX7D_LCDIF_PIXEL_ROOT_CLK clock. Hence using that clock also for
    the AXI bus clock (clock-name "axi") makes sure the gate gets
    enabled when accessing registers.
    
    There seem to be no separate AXI display clock, and the clock is
    optional. Hence remove the dummy clock.
    
    This fixes kernel freezes when starting the X-Server (which
    disables/re-enables the display controller).
    
    Fixes: e8ed73f691bd ("ARM: dts: imx7d: add lcdif support")
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Reviewed-by: Fabio Estevam <fabio.estevam@nxp.com>
    Acked-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 798c825fb0063e29dbf165f4bdae3ef169abd570
Author: Roger Shimizu <rogershimizu@gmail.com>
Date:   Fri Dec 2 00:11:12 2016 +0900

    ARM: dts: orion5x: fix number of sata port for linkstation ls-gl
    
    commit 038ccb3e8cee52e07dc118ff99f47eaebc1d0746 upstream.
    
    Bug report from Debian [0] shows there's minor changed model of
    Linkstation LS-GL that uses the 2nd SATA port of the SoC.
    So it's necessary to enable two SATA ports, though for that specific
    model only the 2nd one is used.
    
    [0] https://bugs.debian.org/845611
    
    Fixes: b1742ffa9ddb ("ARM: dts: orion5x: add device tree for buffalo linkstation ls-gl")
    Reported-by: Ryan Tandy <ryan@nardis.ca>
    Tested-by: Ryan Tandy <ryan@nardis.ca>
    Signed-off-by: Roger Shimizu <rogershimizu@gmail.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d271b9bec2d3e7bd9a66d4b5437476f3406bbf73
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Nov 21 14:25:49 2016 +0100

    Revert "ACPI: Execute _PTS before system reboot"
    
    commit 9713adc2a1a5488f4889c657a0c0ce0c16056d3c upstream.
    
    Revert commit 2c85025c75df (ACPI: Execute _PTS before system reboot)
    as it is reported to cause poweroff and reboot to hang on Dell
    Latitude E7250.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=187061
    Reported-by:  Gianpaolo <gianpaoloc@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ee9f16cff18b6a781a7bd1e7ffb9038909977ec
Author: 추지호 <jiho.chu@samsung.com>
Date:   Thu Dec 8 12:01:13 2016 +0000

    can: peak: fix bad memory access and free sequence
    
    commit b67d0dd7d0dc9e456825447bbeb935d8ef43ea7c upstream.
    
    Fix for bad memory access while disconnecting. netdev is freed before
    private data free, and dev is accessed after freeing netdev.
    
    This makes a slub problem, and it raise kernel oops with slub debugger
    config.
    
    Signed-off-by: Jiho Chu <jiho.chu@samsung.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 212e0ff809706c60630defd38d479d00968e1456
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Mon Dec 5 11:44:23 2016 +0100

    can: raw: raw_setsockopt: limit number of can_filter that can be set
    
    commit 332b05ca7a438f857c61a3c21a88489a21532364 upstream.
    
    This patch adds a check to limit the number of can_filters that can be
    set via setsockopt on CAN_RAW sockets. Otherwise allocations > MAX_ORDER
    are not prevented resulting in a warning.
    
    Reference: https://lkml.org/lkml/2016/12/2/230
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdb5ed2040f54bc4b2cdaf2f313588daee694b82
Author: Romain Perier <romain.perier@free-electrons.com>
Date:   Mon Dec 5 09:56:39 2016 +0100

    crypto: marvell - Don't corrupt state of an STD req for re-stepped ahash
    
    commit 9e5f7a149e00d211177f6de8be427ebc72a1c363 upstream.
    
    mv_cesa_hash_std_step() copies the creq->state into the SRAM at each
    step, but this is only required on the first one. By doing that, we
    overwrite the engine state, and get erroneous results when the crypto
    request is split in several chunks to fit in the internal SRAM.
    
    This commit changes the function to copy the state only on the first
    step.
    
    Fixes: commit 2786cee8e50b ("crypto: marvell - Move SRAM I/O op...")
    Signed-off-by: Romain Perier <romain.perier@free-electrons.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfef274e4dae76cdee275b5985c85758e346e825
Author: tim <tim.c.chen@linux.intel.com>
Date:   Mon Dec 5 11:46:31 2016 -0800

    crypto: mcryptd - Check mcryptd algorithm compatibility
    
    commit 48a992727d82cb7db076fa15d372178743b1f4cd upstream.
    
    Algorithms not compatible with mcryptd could be spawned by mcryptd
    with a direct crypto_alloc_tfm invocation using a "mcryptd(alg)" name
    construct.  This causes mcryptd to crash the kernel if an arbitrary
    "alg" is incompatible and not intended to be used with mcryptd.  It is
    an issue if AF_ALG tries to spawn mcryptd(alg) to expose it externally.
    But such algorithms must be used internally and not be exposed.
    
    We added a check to enforce that only internal algorithms are allowed
    with mcryptd at the time mcryptd is spawning an algorithm.
    
    Link: http://marc.info/?l=linux-crypto-vger&m=148063683310477&w=2
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86bea59218a05031deeac415544eb48c1556456b
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Mon Dec 5 11:06:58 2016 +0200

    crypto: caam - fix pointer size for AArch64 boot loader, AArch32 kernel
    
    commit 39eaf759466f4e3fbeaa39075512f4f345dffdc8 upstream.
    
    Start with a clean slate before dealing with bit 16 (pointer size)
    of Master Configuration Register.
    This fixes the case of AArch64 boot loader + AArch32 kernel, when
    the boot loader might set MCFGR[PS] and kernel would fail to clear it.
    
    Reported-by: Alison Wang <alison.wang@nxp.com>
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Reviewed-By: Alison Wang <Alison.wang@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 666531ca650e67f111af70789a48b0d169772b78
Author: Romain Perier <romain.perier@free-electrons.com>
Date:   Mon Dec 5 09:56:38 2016 +0100

    crypto: marvell - Don't copy hash operation twice into the SRAM
    
    commit 68c7f8c1c4e9b06e6b153fa3e9e0cda2ef5aaed8 upstream.
    
    No need to copy the template of an hash operation twice into the SRAM
    from the step function.
    
    Fixes: commit 85030c5168f1 ("crypto: marvell - Add support for chai...")
    Signed-off-by: Romain Perier <romain.perier@free-electrons.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04925ba9b944e5aef43a309e772ad52c7bf048a8
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Dec 6 15:06:55 2016 -0800

    acpi, nfit: fix bus vs dimm confusion in xlat_status
    
    commit d6eb270c57fef35798525004ddf2ac5dcdadd43b upstream.
    
    Given dimms and bus commands share the same command number space we need
    to be careful that we are translating status in the correct context.
    Otherwise we can, for example, fail an ND_CMD_GET_CONFIG_SIZE command
    because max_xfer is zero. It fails because that condition erroneously
    correlates with the 'cleared == 0' failure of ND_CMD_CLEAR_ERROR.
    
    Fixes: aef253382266 ("libnvdimm, nfit: centralize command status translation")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53ed7c2e8d022c493dc9e46c22ffbb3710b91a0d
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Dec 6 12:45:24 2016 -0800

    acpi, nfit: validate ars_status output buffer size
    
    commit 82aa37cf09867c5e2c0326649d570e5b25c1189a upstream.
    
    If an ARS Status command returns truncated output, do not process
    partial records or otherwise consume non-status fields.
    
    Fixes: 0caeef63e6d2 ("libnvdimm: Add a poison list and export badblocks")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e04e2dace316983abd5651ff1abc60da7e76b423
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Dec 6 09:10:12 2016 -0800

    acpi, nfit, libnvdimm: fix / harden ars_status output length handling
    
    commit efda1b5d87cbc3d8816f94a3815b413f1868e10d upstream.
    
    Given ambiguities in the ACPI 6.1 definition of the "Output (Size)"
    field of the ARS (Address Range Scrub) Status command, a firmware
    implementation may in practice return 0, 4, or 8 to indicate that there
    is no output payload to process.
    
    The specification states "Size of Output Buffer in bytes, including this
    field.". However, 'Output Buffer' is also the name of the entire
    payload, and earlier in the specification it states "Max Query ARS
    Status Output Buffer Size: Maximum size of buffer (including the Status
    and Extended Status fields)".
    
    Without this fix if the BIOS happens to return 0 it causes memory
    corruption as evidenced by this result from the acpi_nfit_ctl() unit
    test.
    
     ars_status00000000: 00020000 00000000                    ........
     BUG: stack guard page was hit at ffffc90001750000 (stack is ffffc9000174c000..ffffc9000174ffff)
     kernel stack overflow (page fault): 0000 [#1] SMP DEBUG_PAGEALLOC
     task: ffff8803332d2ec0 task.stack: ffffc9000174c000
     RIP: 0010:[<ffffffff814cfe72>]  [<ffffffff814cfe72>] __memcpy+0x12/0x20
     RSP: 0018:ffffc9000174f9a8  EFLAGS: 00010246
     RAX: ffffc9000174fab8 RBX: 0000000000000000 RCX: 000000001fffff56
     RDX: 0000000000000000 RSI: ffff8803231f5a08 RDI: ffffc90001750000
     RBP: ffffc9000174fa88 R08: ffffc9000174fab0 R09: ffff8803231f54b8
     R10: 0000000000000008 R11: 0000000000000001 R12: 0000000000000000
     R13: 0000000000000000 R14: 0000000000000003 R15: ffff8803231f54a0
     FS:  00007f3a611af640(0000) GS:ffff88033ed00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: ffffc90001750000 CR3: 0000000325b20000 CR4: 00000000000406e0
     Stack:
      ffffffffa00bc60d 0000000000000008 ffffc90000000001 ffffc9000174faac
      0000000000000292 ffffffffa00c24e4 ffffffffa00c2914 0000000000000000
      0000000000000000 ffffffff00000003 ffff880331ae8ad0 0000000800000246
     Call Trace:
      [<ffffffffa00bc60d>] ? acpi_nfit_ctl+0x49d/0x750 [nfit]
      [<ffffffffa01f4fe0>] nfit_test_probe+0x670/0xb1b [nfit_test]
    
    Fixes: 747ffe11b440 ("libnvdimm, tools/testing/nvdimm: fix 'ars_status' output buffer sizing")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 483ac1487a9db5898423db0a8b31805f524b8012
Author: Vishal Verma <vishal.l.verma@intel.com>
Date:   Mon Dec 5 17:00:37 2016 -0700

    acpi, nfit: fix extended status translations for ACPI DSMs
    
    commit 9a901f5495e26e691c7d0ea7b6057a2f3e6330ed upstream.
    
    ACPI DSMs can have an 'extended' status which can be non-zero to convey
    additional information about the command. In the xlat_status routine,
    where we translate the command statuses, we were returning an error for
    a non-zero extended status, even if the primary status indicated success.
    
    Return from each command's 'case' once we have verified both its status
    and extend status are good.
    
    Fixes: 11294d63ac91 ("nfit: fail DSMs that return non-zero status by default")
    Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0525cebf8ef7f3f384463d9efad6e30874d04702
Author: Peter Zijlstra (Intel) <peterz@infradead.org>
Date:   Tue Nov 29 20:33:28 2016 +0000

    perf/x86: Fix full width counter, counter overflow
    
    commit 7f612a7f0bc13a2361a152862435b7941156b6af upstream.
    
    Lukasz reported that perf stat counters overflow handling is broken on KNL/SLM.
    
    Both these parts have full_width_write set, and that does indeed have
    a problem. In order to deal with counter wrap, we must sample the
    counter at at least half the counter period (see also the sampling
    theorem) such that we can unambiguously reconstruct the count.
    
    However commit:
    
      069e0c3c4058 ("perf/x86/intel: Support full width counting")
    
    sets the sampling interval to the full period, not half.
    
    Fixing that exposes another issue, in that we must not sign extend the
    delta value when we shift it right; the counter cannot have
    decremented after all.
    
    With both these issues fixed, counter overflow functions correctly
    again.
    
    Reported-by: Lukasz Odzioba <lukasz.odzioba@intel.com>
    Tested-by: Liang, Kan <kan.liang@intel.com>
    Tested-by: Odzioba, Lukasz <lukasz.odzioba@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: 069e0c3c4058 ("perf/x86/intel: Support full width counting")
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eceab1fd7f9ef1f3f906be1b2cb67a62e45c25d2
Author: Peng Tao <bergwolf@gmail.com>
Date:   Fri Dec 9 01:10:46 2016 +0800

    vhost-vsock: fix orphan connection reset
    
    commit c4587631c7bad47c045e081d1553cd73a23be59a upstream.
    
    local_addr.svm_cid is host cid. We should check guest cid instead,
    which is remote_addr.svm_cid. Otherwise we end up resetting all
    connections to all guests.
    
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Peng Tao <bergwolf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0224f36735e71e234e604865025e0da9fd248be
Author: Mike Galbraith <efault@gmx.de>
Date:   Wed Nov 23 11:33:37 2016 +0100

    sched/autogroup: Fix 64-bit kernel nice level adjustment
    
    commit 83929cce95251cc77e5659bf493bd424ae0e7a67 upstream.
    
    Michael Kerrisk reported:
    
    > Regarding the previous paragraph...  My tests indicate
    > that writing *any* value to the autogroup [nice priority level]
    > file causes the task group to get a lower priority.
    
    Because autogroup didn't call the then meaningless scale_load()...
    
    Autogroup nice level adjustment has been broken ever since load
    resolution was increased for 64-bit kernels.  Use scale_load() to
    scale group weight.
    
    Michael Kerrisk tested this patch to fix the problem:
    
    > Applied and tested against 4.9-rc6 on an Intel u7 (4 cores).
    > Test setup:
    >
    > Terminal window 1: running 40 CPU burner jobs
    > Terminal window 2: running 40 CPU burner jobs
    > Terminal window 1: running  1 CPU burner job
    >
    > Demonstrated that:
    > * Writing "0" to the autogroup file for TW1 now causes no change
    >   to the rate at which the process on the terminal consume CPU.
    > * Writing -20 to the autogroup file for TW1 caused those processes
    >   to get the lion's share of CPU while TW2 TW3 get a tiny amount.
    > * Writing -20 to the autogroup files for TW1 and TW3 allowed the
    >   process on TW3 to get as much CPU as it was getting as when
    >   the autogroup nice values for both terminals were 0.
    
    Reported-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Tested-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Signed-off-by: Mike Galbraith <umgwanakikbuti@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-man <linux-man@vger.kernel.org>
    Link: http://lkml.kernel.org/r/1479897217.4306.6.camel@gmx.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a477999977c8ebf58835ca9f36586bbd13f4877
Author: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
Date:   Wed Nov 23 10:33:19 2016 -0200

    scsi: lpfc: fix oops/BUG in lpfc_sli_ringtxcmpl_put()
    
    commit 2319f847a8910cff1d46c9b66aa1dd7cc3e836a9 upstream.
    
    The BUG_ON() recently introduced in lpfc_sli_ringtxcmpl_put() is hit in
    the lpfc_els_abort() > lpfc_sli_issue_abort_iotag() >
    lpfc_sli_abort_iotag_issue() function path [similar names], due to
    'piocb->vport == NULL':
    
            BUG_ON(!piocb || !piocb->vport);
    
    This happens because lpfc_sli_abort_iotag_issue() doesn't set the
    'abtsiocbp->vport' pointer -- but this is not the problem.
    
    Previously, lpfc_sli_ringtxcmpl_put() accessed 'piocb->vport' only if
    'piocb->iocb.ulpCommand' is neither CMD_ABORT_XRI_CN nor
    CMD_CLOSE_XRI_CN, which are the only possible values for
    lpfc_sli_abort_iotag_issue():
    
        lpfc_sli_ringtxcmpl_put():
    
            if ((unlikely(pring->ringno == LPFC_ELS_RING)) &&
               (piocb->iocb.ulpCommand != CMD_ABORT_XRI_CN) &&
               (piocb->iocb.ulpCommand != CMD_CLOSE_XRI_CN) &&
                (!(piocb->vport->load_flag & FC_UNLOADING)))
    
        lpfc_sli_abort_iotag_issue():
    
            if (phba->link_state >= LPFC_LINK_UP)
                    iabt->ulpCommand = CMD_ABORT_XRI_CN;
            else
                    iabt->ulpCommand = CMD_CLOSE_XRI_CN;
    
    So, this function path would not have hit this possible NULL pointer
    dereference before.
    
    In order to fix this regression, move the second part of the BUG_ON()
    check prior to the pointer dereference that it does check for.
    
    For reference, this is the stack trace observed. The problem happened
    because an unsolicited event was received - a PLOGI was received after
    our PLOGI was issued but not yet complete, so the discovery state
    machine goes on to sw-abort our PLOGI.
    
        kernel BUG at drivers/scsi/lpfc/lpfc_sli.c:1326!
        Oops: Exception in kernel mode, sig: 5 [#1]
        <...>
        NIP [...] lpfc_sli_ringtxcmpl_put+0x1c/0xf0 [lpfc]
        LR  [...] __lpfc_sli_issue_iocb_s4+0x188/0x200 [lpfc]
        Call Trace:
        [...] [...] __lpfc_sli_issue_iocb_s4+0xb0/0x200 [lpfc] (unreliable)
        [...] [...] lpfc_sli_issue_abort_iotag+0x2b4/0x350 [lpfc]
        [...] [...] lpfc_els_abort+0x1a8/0x4a0 [lpfc]
        [...] [...] lpfc_rcv_plogi+0x6d4/0x700 [lpfc]
        [...] [...] lpfc_rcv_plogi_plogi_issue+0xd8/0x1d0 [lpfc]
        [...] [...] lpfc_disc_state_machine+0xc0/0x2b0 [lpfc]
        [...] [...] lpfc_els_unsol_buffer+0xcc0/0x26c0 [lpfc]
        [...] [...] lpfc_els_unsol_event+0xa8/0x220 [lpfc]
        [...] [...] lpfc_complete_unsol_iocb+0xb8/0x138 [lpfc]
        [...] [...] lpfc_sli4_handle_received_buffer+0x6a0/0xec0 [lpfc]
        [...] [...] lpfc_sli_handle_slow_ring_event_s4+0x1c4/0x240 [lpfc]
        [...] [...] lpfc_sli_handle_slow_ring_event+0x24/0x40 [lpfc]
        [...] [...] lpfc_do_work+0xd88/0x1970 [lpfc]
        [...] [...] kthread+0x108/0x130
        [...] [...] ret_from_kernel_thread+0x5c/0xbc
        <...>
    
    Fixes: 22466da5b4b7 ("lpfc: Fix possible NULL pointer dereference")
    Reported-by: Harsha Thyagaraja <hathyaga@in.ibm.com>
    Signed-off-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac65fe0bbdea786f0a1b4e2229e15af697c5b01c
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Tue Dec 6 17:03:35 2016 -0800

    device-dax: fix private mapping restriction, permit read-only
    
    commit 325896ffdf90f7cbd59fb873b7ba20d60d1ddf3c upstream.
    
    Hugh notes in response to commit 4cb19355ea19 "device-dax: fail all
    private mapping attempts":
    
      "I think that is more restrictive than you intended: haven't tried, but I
      believe it rejects a PROT_READ, MAP_SHARED, O_RDONLY fd mmap, leaving no
      way to mmap /dev/dax without write permission to it."
    
    Indeed it does restrict read-only mappings, switch to checking
    VM_MAYSHARE, not VM_SHARED.
    
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Pawel Lebioda <pawel.lebioda@intel.com>
    Fixes: 4cb19355ea19 ("device-dax: fail all private mapping attempts")
    Reported-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2386c6b188c52c33aae263c95d0e0a5df4598d8a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 30 21:04:42 2016 +0000

    locking/rtmutex: Use READ_ONCE() in rt_mutex_owner()
    
    commit 1be5d4fa0af34fb7bafa205aeb59f5c7cc7a089d upstream.
    
    While debugging the rtmutex unlock vs. dequeue race Will suggested to use
    READ_ONCE() in rt_mutex_owner() as it might race against the
    cmpxchg_release() in unlock_rt_mutex_safe().
    
    Will: "It's a minor thing which will most likely not matter in practice"
    
    Careful search did not unearth an actual problem in todays code, but it's
    better to be safe than surprised.
    
    Suggested-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: David Daney <ddaney@caviumnetworks.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sebastian Siewior <bigeasy@linutronix.de>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Link: http://lkml.kernel.org/r/20161130210030.431379999@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b2347c8e8030d7d525bbdf2203567e376ae75b3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 30 21:04:41 2016 +0000

    locking/rtmutex: Prevent dequeue vs. unlock race
    
    commit dbb26055defd03d59f678cb5f2c992abe05b064a upstream.
    
    David reported a futex/rtmutex state corruption. It's caused by the
    following problem:
    
    CPU0            CPU1            CPU2
    
    l->owner=T1
                    rt_mutex_lock(l)
                    lock(l->wait_lock)
                    l->owner = T1 | HAS_WAITERS;
                    enqueue(T2)
                    boost()
                      unlock(l->wait_lock)
                    schedule()
    
                                    rt_mutex_lock(l)
                                    lock(l->wait_lock)
                                    l->owner = T1 | HAS_WAITERS;
                                    enqueue(T3)
                                    boost()
                                      unlock(l->wait_lock)
                                    schedule()
                    signal(->T2)    signal(->T3)
                    lock(l->wait_lock)
                    dequeue(T2)
                    deboost()
                      unlock(l->wait_lock)
                                    lock(l->wait_lock)
                                    dequeue(T3)
                                      ===> wait list is now empty
                                    deboost()
                                     unlock(l->wait_lock)
                    lock(l->wait_lock)
                    fixup_rt_mutex_waiters()
                      if (wait_list_empty(l)) {
                        owner = l->owner & ~HAS_WAITERS;
                        l->owner = owner
                         ==> l->owner = T1
                      }
    
                                    lock(l->wait_lock)
    rt_mutex_unlock(l)              fixup_rt_mutex_waiters()
                                      if (wait_list_empty(l)) {
                                        owner = l->owner & ~HAS_WAITERS;
    cmpxchg(l->owner, T1, NULL)
     ===> Success (l->owner = NULL)
                                        l->owner = owner
                                         ==> l->owner = T1
                                      }
    
    That means the problem is caused by fixup_rt_mutex_waiters() which does the
    RMW to clear the waiters bit unconditionally when there are no waiters in
    the rtmutexes rbtree.
    
    This can be fatal: A concurrent unlock can release the rtmutex in the
    fastpath because the waiters bit is not set. If the cmpxchg() gets in the
    middle of the RMW operation then the previous owner, which just unlocked
    the rtmutex is set as the owner again when the write takes place after the
    successfull cmpxchg().
    
    The solution is rather trivial: verify that the owner member of the rtmutex
    has the waiters bit set before clearing it. This does not require a
    cmpxchg() or other atomic operations because the waiters bit can only be
    set and cleared with the rtmutex wait_lock held. It's also safe against the
    fast path unlock attempt. The unlock attempt via cmpxchg() will either see
    the bit set and take the slowpath or see the bit cleared and release it
    atomically in the fastpath.
    
    It's remarkable that the test program provided by David triggers on ARM64
    and MIPS64 really quick, but it refuses to reproduce on x86-64, while the
    problem exists there as well. That refusal might explain that this got not
    discovered earlier despite the bug existing from day one of the rtmutex
    implementation more than 10 years ago.
    
    Thanks to David for meticulously instrumenting the code and providing the
    information which allowed to decode this subtle problem.
    
    Reported-by: David Daney <ddaney@caviumnetworks.com>
    Tested-by: David Daney <david.daney@cavium.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sebastian Siewior <bigeasy@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Fixes: 23f78d4a03c5 ("[PATCH] pi-futex: rt mutex core")
    Link: http://lkml.kernel.org/r/20161130210030.351136722@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bed4eef2e8fa26606cf9d83ba3568bbd475b02e4
Author: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Date:   Wed Dec 7 14:44:31 2016 -0800

    zram: restrict add/remove attributes to root only
    
    commit 5c7e9ccd91b90d87029261f8856294ee51934cab upstream.
    
    zram hot_add sysfs attribute is a very 'special' attribute - reading
    from it creates a new uninitialized zram device.  This file, by a
    mistake, can be read by a 'normal' user at the moment, while only root
    must be able to create a new zram device, therefore hot_add attribute
    must have S_IRUSR mode, not S_IRUGO.
    
    [akpm@linux-foundation.org: s/sence/sense/, reflow comment to use 80 cols]
    Fixes: 6566d1a32bf72 ("zram: add dynamic device add/remove functionality")
    Link: http://lkml.kernel.org/r/20161205155845.20129-1-sergey.senozhatsky@gmail.com
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reported-by: Steven Allen <steven@stebalien.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Minchan Kim <minchan@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fb7569c7370b9d44f5bbf628dd7ddc67638904b
Author: Helge Deller <deller@gmx.de>
Date:   Thu Dec 8 21:00:46 2016 +0100

    parisc: Fix TLB related boot crash on SMP machines
    
    commit 24d0492b7d5d321a9c5846c8c974eba9823ffaa0 upstream.
    
    At bootup we run measurements to calculate the best threshold for when we
    should be using full TLB flushes instead of just flushing a specific amount of
    TLB entries.  This performance test is run over the kernel text segment.
    
    But running this TLB performance test on the kernel text segment turned out to
    crash some SMP machines when the kernel text pages were mapped as huge pages.
    
    To avoid those crashes this patch simply skips this test on some SMP machines
    and calculates an optimal threshold based on the maximum number of available
    TLB entries and number of online CPUs.
    
    On a technical side, this seems to happen:
    The TLB measurement code uses flush_tlb_kernel_range() to flush specific TLB
    entries with a page size of 4k (pdtlb 0(sr1,addr)). On UP systems this purge
    instruction seems to work without problems even if the pages were mapped as
    huge pages.  But on SMP systems the TLB purge instruction is broadcasted to
    other CPUs. Those CPUs then crash the machine because the page size is not as
    expected.  C8000 machines with PA8800/PA8900 CPUs were not affected by this
    problem, because the required cache coherency prohibits to use huge pages at
    all.  Sadly I didn't found any documentation about this behaviour, so this
    finding is purely based on testing with phyiscal SMP machines (A500-44 and
    J5000, both were 2-way boxes).
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b81e5db49515dc50b18b761c1872d992a3f66b4b
Author: John David Anglin <dave.anglin@bell.net>
Date:   Tue Dec 6 22:02:01 2016 -0500

    parisc: Remove unnecessary TLB purges from flush_dcache_page_asm and flush_icache_page_asm
    
    commit febe42964fe182281859b3d43d844bb25ca49367 upstream.
    
    We have four routines in pacache.S that use temporary alias pages:
    copy_user_page_asm(), clear_user_page_asm(), flush_dcache_page_asm() and
    flush_icache_page_asm().  copy_user_page_asm() and clear_user_page_asm()
    don't purge the TLB entry used for the operation.
    flush_dcache_page_asm() and flush_icache_page_asm do purge the entry.
    
    Presumably, this was thought to optimize TLB use.  However, the
    operation is quite heavy weight on PA 1.X processors as we need to take
    the TLB lock and a TLB broadcast is sent to all processors.
    
    This patch removes the purges from flush_dcache_page_asm() and
    flush_icache_page_asm.
    
    Signed-off-by: John David Anglin  <dave.anglin@bell.net>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e8f68aa183310366bb81c1e34f7a62ed3aeb1d6
Author: John David Anglin <dave.anglin@bell.net>
Date:   Tue Dec 6 21:47:04 2016 -0500

    parisc: Purge TLB before setting PTE
    
    commit c78e710c1c9fbeff43dddc0aa3d0ff458e70b0cc upstream.
    
    The attached change interchanges the order of purging the TLB and
    setting the corresponding page table entry.  TLB purges are strongly
    ordered.  It occurred to me one night that setting the PTE first might
    have subtle ordering issues on SMP machines and cause random memory
    corruption.
    
    A TLB lock guards the insertion of user TLB entries.  So after the TLB
    is purged, a new entry can't be inserted until the lock is released.
    This ensures that the new PTE value is used when the lock is released.
    
    Since making this change, no random segmentation faults have been
    observed on the Debian hppa buildd servers.
    
    Signed-off-by: John David Anglin  <dave.anglin@bell.net>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e284445bab5b205e6b6e40f5186b18c4e7fd800
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Tue Dec 6 16:18:45 2016 +0100

    fuse: fix clearing suid, sgid for chown()
    
    commit c01638f5d919728f565bf8b5e0a6a159642df0d9 upstream.
    
    Basically, the pjdfstests set the ownership of a file to 06555, and then
    chowns it (as root) to a new uid/gid. Prior to commit a09f99eddef4 ("fuse:
    fix killing s[ug]id in setattr"), fuse would send down a setattr with both
    the uid/gid change and a new mode.  Now, it just sends down the uid/gid
    change.
    
    Technically this is NOTABUG, since POSIX doesn't _require_ that we clear
    these bits for a privileged process, but Linux (wisely) has done that and I
    think we don't want to change that behavior here.
    
    This is caused by the use of should_remove_suid(), which will always return
    0 when the process has CAP_FSETID.
    
    In fact we really don't need to be calling should_remove_suid() at all,
    since we've already been indicated that we should remove the suid, we just
    don't want to use a (very) stale mode for that.
    
    This patch should fix the above as well as simplify the logic.
    
    Reported-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: a09f99eddef4 ("fuse: fix killing s[ug]id in setattr")
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e70d6d2d73834f9b84d0ec5d0164ba85f2588dc8
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Wed Nov 16 18:27:56 2016 +0000

    powerpc/boot: Fix build failure in 32-bit boot wrapper
    
    commit 10c77dba40ff58fc03587b3b60725bb7fd723183 upstream.
    
    OPAL is not callable from 32-bit mode and the assembly code for it
    may not even build (depending on how binutils was configured).
    
    References: https://buildd.debian.org/status/fetch.php?pkg=linux&arch=powerpcspe&ver=4.8.7-1&stamp=1479203712
    Fixes: 656ad58ef19e ("powerpc/boot: Add OPAL console to epapr wrappers")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a82ad493f0454cee8518e7df7c4fc47b4b80b286
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Tue Nov 29 13:13:46 2016 +1100

    powerpc/mm: Fix lazy icache flush on pre-POWER5
    
    commit dd7b2f035ec41a409f7a7cec7aabc0ec0eacf476 upstream.
    
    On 64-bit CPUs with no-execute support and non-snooping icache, such as
    970 or POWER4, we have a software mechanism to ensure coherency of the
    cache (using exec faults when needed).
    
    This was broken due to a logic error when the code was rewritten
    from assembly to C, previously the assembly code did:
    
      BEGIN_FTR_SECTION
             mr      r4,r30
             mr      r5,r7
             bl      hash_page_do_lazy_icache
      END_FTR_SECTION(CPU_FTR_NOEXECUTE|CPU_FTR_COHERENT_ICACHE, CPU_FTR_NOEXECUTE)
    
    Which tests that:
       (cpu_features & (NOEXECUTE | COHERENT_ICACHE)) == NOEXECUTE
    
    Which says that the current cpu does have NOEXECUTE, but does not have
    COHERENT_ICACHE.
    
    Fixes: 91f1da99792a ("powerpc/mm: Convert 4k hash insert to C")
    Fixes: 89ff725051d1 ("powerpc/mm: Convert __hash_page_64K to C")
    Fixes: a43c0eb8364c ("powerpc/mm: Convert 4k insert from asm to C")
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
    [mpe: Change log verbosification]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84b36287c72d3c4be42efb23928a1645aa74cc5f
Author: Andrew Donnellan <andrew.donnellan@au1.ibm.com>
Date:   Thu Dec 1 11:23:05 2016 +1100

    powerpc/eeh: Fix deadlock when PE frozen state can't be cleared
    
    commit 409bf7f8a02ef88db5a0f2cdcf9489914f4b8508 upstream.
    
    In eeh_reset_device(), we take the pci_rescan_remove_lock immediately after
    after we call eeh_reset_pe() to reset the PCI controller. We then call
    eeh_clear_pe_frozen_state(), which can return an error. In this case, we
    bail out of eeh_reset_device() without calling pci_unlock_rescan_remove().
    
    Add a call to pci_unlock_rescan_remove() in the eeh_clear_pe_frozen_state()
    error path so that we don't cause a deadlock later on.
    
    Reported-by: Pradipta Ghosh <pradghos@in.ibm.com>
    Fixes: 78954700631f ("powerpc/eeh: Avoid I/O access during PE reset")
    Signed-off-by: Andrew Donnellan <andrew.donnellan@au1.ibm.com>
    Acked-by: Russell Currey <ruscur@russell.cc>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
