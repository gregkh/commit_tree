commit d5a2675b207d3b3629edb3e1588ccc4f8dfb5040
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 2 10:02:58 2019 +0200

    Linux 5.0.11

commit bcf0c1f4d56426ee7d784d9a0c958bceaa5ed24d
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Apr 19 16:52:19 2019 -0700

    net/tls: don't leak IV and record seq when offload fails
    
    [ Upstream commit 12c7686111326148b4b5db189130522a4ad1be4a ]
    
    When device refuses the offload in tls_set_device_offload_rx()
    it calls tls_sw_free_resources_rx() to clean up software context
    state.
    
    Unfortunately, tls_sw_free_resources_rx() does not free all
    the state tls_set_sw_offload() allocated - it leaks IV and
    sequence number buffers.  All other code paths which lead to
    tls_sw_release_resources_rx() (which tls_sw_free_resources_rx()
    calls) free those right before the call.
    
    Avoid the leak by moving freeing of iv and rec_seq into
    tls_sw_release_resources_rx().
    
    Fixes: 4799ac81e52a ("tls: Add rx inline crypto offload")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2adb99038ae421985daa37379521c863462859f9
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Apr 19 16:51:38 2019 -0700

    net/tls: avoid potential deadlock in tls_set_device_offload_rx()
    
    [ Upstream commit 62ef81d5632634d5e310ed25b9b940b2b6612b46 ]
    
    If device supports offload, but offload fails tls_set_device_offload_rx()
    will call tls_sw_free_resources_rx() which (unhelpfully) releases
    and reacquires the socket lock.
    
    For a small fix release and reacquire the device_offload_lock.
    
    Fixes: 4799ac81e52a ("tls: Add rx inline crypto offload")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c01e42fdccf5880b3ecb6bd8a8eaa8b24d17526a
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Fri Mar 15 16:41:43 2019 +0200

    net/mlx5e: Fix use-after-free after xdp_return_frame
    
    [ Upstream commit 12fc512f5741443a03adde2ead20724da8ad550a ]
    
    xdp_return_frame releases the frame. It leads to releasing the page, so
    it's not allowed to access xdpi.xdpf->len after that, because xdpi.xdpf
    is at xdp->data_hard_start after convert_to_xdp_frame. This patch moves
    the memory access to precede the return of the frame.
    
    Fixes: 58b99ee3e3ebe ("net/mlx5e: Add support for XDP_REDIRECT in device-out side")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9444b6aaa011c03a76d3486a18e270deb5f3501
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Mon Apr 8 15:12:45 2019 +0300

    net/mlx5e: Fix the max MTU check in case of XDP
    
    [ Upstream commit d460c2718906252a2a69bc6f89b537071f792e6e ]
    
    MLX5E_XDP_MAX_MTU was calculated incorrectly. It didn't account for
    NET_IP_ALIGN and MLX5E_HW2SW_MTU, and it also misused MLX5_SKB_FRAG_SZ.
    This commit fixes the calculations and adds a brief explanation for the
    formula used.
    
    Fixes: a26a5bdf3ee2d ("net/mlx5e: Restrict the combination of large MTU and XDP")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7b71fc253e8fc2585e04800928651bc9164ae77
Author: Petr Machata <petrm@mellanox.com>
Date:   Thu Apr 18 07:14:13 2019 +0000

    mlxsw: spectrum: Put MC TCs into DWRR mode
    
    [ Upstream commit f476b3f809fa02f47af6333ed63715058c3fc348 ]
    
    Both Spectrum-1 and Spectrum-2 chips are currently configured such that
    pairs of TC n (which is used for UC traffic) and TC n+8 (which is used
    for MC traffic) are feeding into the same subgroup. Strict
    prioritization is configured between the two TCs, and by enabling
    MC-aware mode on the switch, the lower-numbered (UC) TCs are favored
    over the higher-numbered (MC) TCs.
    
    On Spectrum-2 however, there is an issue in configuration of the
    MC-aware mode. As a result, MC traffic is prioritized over UC traffic.
    To work around the issue, configure the MC TCs with DWRR mode (while
    keeping the UC TCs in strict mode).
    
    With this patch, the multicast-unicast arbitration results in the same
    behavior on both Spectrum-1 and Spectrum-2 chips.
    
    Fixes: 7b8195306694 ("mlxsw: spectrum: Configure MC-aware mode on mlxsw ports")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3964a683ca1111b4127874b1448da08ebd867c0
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Apr 18 07:14:14 2019 +0000

    mlxsw: pci: Reincrease PCI reset timeout
    
    [ Upstream commit 1ab3030193d25878b3b1409060e1e0a879800c95 ]
    
    During driver initialization the driver sends a reset to the device and
    waits for the firmware to signal that it is ready to continue.
    
    Commit d2f372ba0914 ("mlxsw: pci: Increase PCI SW reset timeout")
    increased the timeout to 13 seconds due to longer PHY calibration in
    Spectrum-2 compared to Spectrum-1.
    
    Recently it became apparent that this timeout is too short and therefore
    this patch increases it again to a safer limit that will be reduced in
    the future.
    
    Fixes: c3ab435466d5 ("mlxsw: spectrum: Extend to support Spectrum-2 ASIC")
    Fixes: d2f372ba0914 ("mlxsw: pci: Increase PCI SW reset timeout")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72f71005903d92b5bbfe1add54089d9e8cfd7639
Author: Tao Ren <taoren@fb.com>
Date:   Wed Apr 24 01:43:32 2019 +0000

    net/ncsi: handle overflow when incrementing mac address
    
    [ Upstream commit 1c5c12ee308aacf635c8819cd4baa3bd58f8a8b7 ]
    
    Previously BMC's MAC address is calculated by simply adding 1 to the
    last byte of network controller's MAC address, and it produces incorrect
    result when network controller's MAC address ends with 0xFF.
    
    The problem can be fixed by calling eth_addr_inc() function to increment
    MAC address; besides, the MAC address is also validated before assigning
    to BMC.
    
    Fixes: cb10c7c0dfd9 ("net/ncsi: Add NCSI Broadcom OEM command")
    Signed-off-by: Tao Ren <taoren@fb.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Samuel Mendoza-Jonas <sam@mendozajonas.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19f6d3f49b28db54afa89d32b50523805d5ff454
Author: Ilias Apalodimas <ilias.apalodimas@linaro.org>
Date:   Tue Apr 23 09:01:41 2019 +0300

    net: socionext: replace napi_alloc_frag with the netdev variant on init
    
    [ Upstream commit ffbf9870dcf1342592a1a26f4cf70bda39046134 ]
    
    The netdev variant is usable on any context since it disables interrupts.
    The napi variant of the call should only be used within softirq context.
    Replace napi_alloc_frag on driver init with the correct netdev_alloc_frag
    call
    
    Changes since v1:
    - Adjusted commit message
    
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Acked-by: Jassi Brar <jaswinder.singh@linaro.org>
    Fixes: 4acb20b46214 ("net: socionext: different approach on DMA")
    Signed-off-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af31849700e4a1d8c65689cd9b23e6621bc387f2
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Apr 19 14:31:00 2019 +0800

    team: fix possible recursive locking when add slaves
    
    [ Upstream commit 925b0c841e066b488cc3a60272472b2c56300704 ]
    
    If we add a bond device which is already the master of the team interface,
    we will hold the team->lock in team_add_slave() first and then request the
    lock in team_set_mac_address() again. The functions are called like:
    
    - team_add_slave()
     - team_port_add()
       - team_port_enter()
         - team_modeop_port_enter()
           - __set_port_dev_addr()
             - dev_set_mac_address()
               - bond_set_mac_address()
                 - dev_set_mac_address()
                   - team_set_mac_address
    
    Although team_upper_dev_link() would check the upper devices but it is
    called too late. Fix it by adding a checking before processing the slave.
    
    v2: Do not split the string in netdev_err()
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc2b8b627802abcec26bc4bc715fded368849a19
Author: Su Bao Cheng <baocheng.su@siemens.com>
Date:   Thu Apr 18 11:14:56 2019 +0200

    stmmac: pci: Adjust IOT2000 matching
    
    [ Upstream commit e0c1d14a1a3211dccf0540a6703ffbd5d2a75bdb ]
    
    Since there are more IOT2040 variants with identical hardware but
    different asset tags, the asset tag matching should be adjusted to
    support them.
    
    For the board name "SIMATIC IOT2000", currently there are 2 types of
    hardware, IOT2020 and IOT2040. The IOT2020 is identified by its unique
    asset tag. Match on it first. If we then match on the board name only,
    we will catch all IOT2040 variants. In the future there will be no other
    devices with the "SIMATIC IOT2000" DMI board name but different
    hardware.
    
    Signed-off-by: Su Bao Cheng <baocheng.su@siemens.com>
    Reviewed-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd3574106ded2c8692f63032dddcb4a2cfbae64
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Apr 17 10:51:19 2019 -0700

    net/tls: fix refcount adjustment in fallback
    
    [ Upstream commit 9188d5ca454fd665145904267e726e9e8d122f5c ]
    
    Unlike atomic_add(), refcount_add() does not deal well
    with a negative argument.  TLS fallback code reallocates
    the skb and is very likely to shrink the truesize, leading to:
    
    [  189.513254] WARNING: CPU: 5 PID: 0 at lib/refcount.c:81 refcount_add_not_zero_checked+0x15c/0x180
     Call Trace:
      refcount_add_checked+0x6/0x40
      tls_enc_skb+0xb93/0x13e0 [tls]
    
    Once wmem_allocated count saturates the application can no longer
    send data on the socket.  This is similar to Eric's fixes for GSO,
    TCP:
    commit 7ec318feeed1 ("tcp: gso: avoid refcount_t warning from tcp_gso_segment()")
    and UDP:
    commit 575b65bc5bff ("udp: avoid refcount_t saturation in __udp_gso_segment()").
    
    Unlike the GSO case, for TLS fallback it's likely that the skb has
    shrunk, so the "likely" annotation is the other way around (likely
    branch being "sub").
    
    Fixes: e8f69799810c ("net/tls: Add generic NIC offload infrastructure")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: John Hurley <john.hurley@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e39643c12d3fbbe0c26f07c74f6471a4155b1cdc
Author: Vinod Koul <vkoul@kernel.org>
Date:   Mon Apr 22 15:15:32 2019 +0530

    net: stmmac: move stmmac_check_ether_addr() to driver probe
    
    [ Upstream commit b561af36b1841088552464cdc3f6371d92f17710 ]
    
    stmmac_check_ether_addr() checks the MAC address and assigns one in
    driver open(). In many cases when we create slave netdevice, the dev
    addr is inherited from master but the master dev addr maybe NULL at
    that time, so move this call to driver probe so that address is
    always valid.
    
    Signed-off-by: Xiaofei Shen <xiaofeis@codeaurora.org>
    Tested-by: Xiaofei Shen <xiaofeis@codeaurora.org>
    Signed-off-by: Sneh Shah <snehshah@codeaurora.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8de6f5e5b90d16e19a69e70e2cc2ea723813d8ef
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 05:35:00 2019 -0700

    net/rose: fix unbound loop in rose_loopback_timer()
    
    [ Upstream commit 0453c682459583910d611a96de928f4442205493 ]
    
    This patch adds a limit on the number of skbs that fuzzers can queue
    into loopback_queue. 1000 packets for rose loopback seems more than enough.
    
    Then, since we now have multiple cpus in most linux hosts,
    we also need to limit the number of skbs rose_loopback_timer()
    can dequeue at each round.
    
    rose_loopback_queue() can be drop-monitor friendly, calling
    consume_skb() or kfree_skb() appropriately.
    
    Finally, use mod_timer() instead of del_timer() + add_timer()
    
    syzbot report was :
    
    rcu: INFO: rcu_preempt self-detected stall on CPU
    rcu:    0-...!: (10499 ticks this GP) idle=536/1/0x4000000000000002 softirq=103291/103291 fqs=34
    rcu:     (t=10500 jiffies g=140321 q=323)
    rcu: rcu_preempt kthread starved for 10426 jiffies! g140321 f0x0 RCU_GP_WAIT_FQS(5) ->state=0x402 ->cpu=1
    rcu: RCU grace-period kthread stack dump:
    rcu_preempt     I29168    10      2 0x80000000
    Call Trace:
     context_switch kernel/sched/core.c:2877 [inline]
     __schedule+0x813/0x1cc0 kernel/sched/core.c:3518
     schedule+0x92/0x180 kernel/sched/core.c:3562
     schedule_timeout+0x4db/0xfd0 kernel/time/timer.c:1803
     rcu_gp_fqs_loop kernel/rcu/tree.c:1971 [inline]
     rcu_gp_kthread+0x962/0x17b0 kernel/rcu/tree.c:2128
     kthread+0x357/0x430 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    NMI backtrace for cpu 0
    CPU: 0 PID: 7632 Comm: kworker/0:4 Not tainted 5.1.0-rc5+ #172
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events iterate_cleanup_work
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     nmi_cpu_backtrace.cold+0x63/0xa4 lib/nmi_backtrace.c:101
     nmi_trigger_cpumask_backtrace+0x1be/0x236 lib/nmi_backtrace.c:62
     arch_trigger_cpumask_backtrace+0x14/0x20 arch/x86/kernel/apic/hw_nmi.c:38
     trigger_single_cpu_backtrace include/linux/nmi.h:164 [inline]
     rcu_dump_cpu_stacks+0x183/0x1cf kernel/rcu/tree.c:1223
     print_cpu_stall kernel/rcu/tree.c:1360 [inline]
     check_cpu_stall kernel/rcu/tree.c:1434 [inline]
     rcu_pending kernel/rcu/tree.c:3103 [inline]
     rcu_sched_clock_irq.cold+0x500/0xa4a kernel/rcu/tree.c:2544
     update_process_times+0x32/0x80 kernel/time/timer.c:1635
     tick_sched_handle+0xa2/0x190 kernel/time/tick-sched.c:161
     tick_sched_timer+0x47/0x130 kernel/time/tick-sched.c:1271
     __run_hrtimer kernel/time/hrtimer.c:1389 [inline]
     __hrtimer_run_queues+0x33e/0xde0 kernel/time/hrtimer.c:1451
     hrtimer_interrupt+0x314/0x770 kernel/time/hrtimer.c:1509
     local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1035 [inline]
     smp_apic_timer_interrupt+0x120/0x570 arch/x86/kernel/apic/apic.c:1060
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:807
    RIP: 0010:__sanitizer_cov_trace_pc+0x0/0x50 kernel/kcov.c:95
    Code: 89 25 b4 6e ec 08 41 bc f4 ff ff ff e8 cd 5d ea ff 48 c7 05 9e 6e ec 08 00 00 00 00 e9 a4 e9 ff ff 90 90 90 90 90 90 90 90 90 <55> 48 89 e5 48 8b 75 08 65 48 8b 04 25 00 ee 01 00 65 8b 15 c8 60
    RSP: 0018:ffff8880ae807ce0 EFLAGS: 00000286 ORIG_RAX: ffffffffffffff13
    RAX: ffff88806fd40640 RBX: dffffc0000000000 RCX: ffffffff863fbc56
    RDX: 0000000000000100 RSI: ffffffff863fbc1d RDI: ffff88808cf94228
    RBP: ffff8880ae807d10 R08: ffff88806fd40640 R09: ffffed1015d00f8b
    R10: ffffed1015d00f8a R11: 0000000000000003 R12: ffff88808cf941c0
    R13: 00000000fffff034 R14: ffff8882166cd840 R15: 0000000000000000
     rose_loopback_timer+0x30d/0x3f0 net/rose/rose_loopback.c:91
     call_timer_fn+0x190/0x720 kernel/time/timer.c:1325
     expire_timers kernel/time/timer.c:1362 [inline]
     __run_timers kernel/time/timer.c:1681 [inline]
     __run_timers kernel/time/timer.c:1649 [inline]
     run_timer_softirq+0x652/0x1700 kernel/time/timer.c:1694
     __do_softirq+0x266/0x95a kernel/softirq.c:293
     do_softirq_own_stack+0x2a/0x40 arch/x86/entry/entry_64.S:1027
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b225e518109bff2b0cb507ba9b8535e2ed78062d
Author: Zhu Yanjun <yanjun.zhu@oracle.com>
Date:   Wed Apr 24 02:56:42 2019 -0400

    net: rds: exchange of 8K and 1M pool
    
    [ Upstream commit 4b9fc7146249a6e0e3175d0acc033fdcd2bfcb17 ]
    
    Before the commit 490ea5967b0d ("RDS: IB: move FMR code to its own file"),
    when the dirty_count is greater than 9/10 of max_items of 8K pool,
    1M pool is used, Vice versa. After the commit 490ea5967b0d ("RDS: IB: move
    FMR code to its own file"), the above is removed. When we make the
    following tests.
    
    Server:
      rds-stress -r 1.1.1.16 -D 1M
    
    Client:
      rds-stress -r 1.1.1.14 -s 1.1.1.16 -D 1M
    
    The following will appear.
    "
    connecting to 1.1.1.16:4000
    negotiated options, tasks will start in 2 seconds
    Starting up..header from 1.1.1.166:4001 to id 4001 bogus
    ..
    tsks  tx/s  rx/s tx+rx K/s  mbi K/s  mbo K/s tx us/c  rtt us
    cpu %
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
    ...
    "
    So this exchange between 8K and 1M pool is added back.
    
    Fixes: commit 490ea5967b0d ("RDS: IB: move FMR code to its own file")
    Signed-off-by: Zhu Yanjun <yanjun.zhu@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 283882b045adb3f58aa89a62f5be551f1111de8e
Author: Erez Alfasi <ereza@mellanox.com>
Date:   Thu Apr 11 10:41:03 2019 +0300

    net/mlx5e: ethtool, Remove unsupported SFP EEPROM high pages query
    
    [ Upstream commit ace329f4ab3ba434be2adf618073c752d083b524 ]
    
    Querying EEPROM high pages data for SFP module is currently
    not supported by our driver and yet queried, resulting in
    invalid FW queries.
    
    Set the EEPROM ethtool data length to 256 for SFP module will
    limit the reading for page 0 only and prevent invalid FW queries.
    
    Fixes: bb64143eee8c ("net/mlx5e: Add ethtool support for dump module EEPROM")
    Signed-off-by: Erez Alfasi <ereza@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f37782f2d708e07d23745eed25d517074c3e6877
Author: Amit Cohen <amitc@mellanox.com>
Date:   Thu Apr 18 07:14:16 2019 +0000

    mlxsw: spectrum: Fix autoneg status in ethtool
    
    [ Upstream commit 151f0dddbbfe4c35c9c5b64873115aafd436af9d ]
    
    If link is down and autoneg is set to on/off, the status in ethtool does
    not change.
    
    The reason is when the link is down the function returns with zero
    before changing autoneg value.
    
    Move the checking of link state (up/down) to be performed after setting
    autoneg value, in order to be sure that autoneg will change in any case.
    
    Fixes: 56ade8fe3fe1 ("mlxsw: spectrum: Add initial support for Spectrum ASIC")
    Signed-off-by: Amit Cohen <amitc@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d69b7c8c8ab5d55b1cc52fa6ee54ba198a1f4f6c
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Apr 16 09:47:24 2019 +0800

    ipv4: set the tcp_min_rtt_wlen range from 0 to one day
    
    [ Upstream commit 19fad20d15a6494f47f85d869f00b11343ee5c78 ]
    
    There is a UBSAN report as below:
    UBSAN: Undefined behaviour in net/ipv4/tcp_input.c:2877:56
    signed integer overflow:
    2147483647 * 1000 cannot be represented in type 'int'
    CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.1.0-rc4-00058-g582549e #1
    Call Trace:
     <IRQ>
     dump_stack+0x8c/0xba
     ubsan_epilogue+0x11/0x60
     handle_overflow+0x12d/0x170
     ? ttwu_do_wakeup+0x21/0x320
     __ubsan_handle_mul_overflow+0x12/0x20
     tcp_ack_update_rtt+0x76c/0x780
     tcp_clean_rtx_queue+0x499/0x14d0
     tcp_ack+0x69e/0x1240
     ? __wake_up_sync_key+0x2c/0x50
     ? update_group_capacity+0x50/0x680
     tcp_rcv_established+0x4e2/0xe10
     tcp_v4_do_rcv+0x22b/0x420
     tcp_v4_rcv+0xfe8/0x1190
     ip_protocol_deliver_rcu+0x36/0x180
     ip_local_deliver+0x15b/0x1a0
     ip_rcv+0xac/0xd0
     __netif_receive_skb_one_core+0x7f/0xb0
     __netif_receive_skb+0x33/0xc0
     netif_receive_skb_internal+0x84/0x1c0
     napi_gro_receive+0x2a0/0x300
     receive_buf+0x3d4/0x2350
     ? detach_buf_split+0x159/0x390
     virtnet_poll+0x198/0x840
     ? reweight_entity+0x243/0x4b0
     net_rx_action+0x25c/0x770
     __do_softirq+0x19b/0x66d
     irq_exit+0x1eb/0x230
     do_IRQ+0x7a/0x150
     common_interrupt+0xf/0xf
     </IRQ>
    
    It can be reproduced by:
      echo 2147483647 > /proc/sys/net/ipv4/tcp_min_rtt_wlen
    
    Fixes: f672258391b42 ("tcp: track min RTT using windowed min-filter")
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 617d24036564ed8513ba44be20c6ceb6fea2b690
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 08:04:05 2019 -0700

    ipv4: add sanity checks in ipv4_link_failure()
    
    [ Upstream commit 20ff83f10f113c88d0bb74589389b05250994c16 ]
    
    Before calling __ip_options_compile(), we need to ensure the network
    header is a an IPv4 one, and that it is already pulled in skb->head.
    
    RAW sockets going through a tunnel can end up calling ipv4_link_failure()
    with total garbage in the skb, or arbitrary lengthes.
    
    syzbot report :
    
    BUG: KASAN: stack-out-of-bounds in memcpy include/linux/string.h:355 [inline]
    BUG: KASAN: stack-out-of-bounds in __ip_options_echo+0x294/0x1120 net/ipv4/ip_options.c:123
    Write of size 69 at addr ffff888096abf068 by task syz-executor.4/9204
    
    CPU: 0 PID: 9204 Comm: syz-executor.4 Not tainted 5.1.0-rc5+ #77
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     check_memory_region_inline mm/kasan/generic.c:185 [inline]
     check_memory_region+0x123/0x190 mm/kasan/generic.c:191
     memcpy+0x38/0x50 mm/kasan/common.c:133
     memcpy include/linux/string.h:355 [inline]
     __ip_options_echo+0x294/0x1120 net/ipv4/ip_options.c:123
     __icmp_send+0x725/0x1400 net/ipv4/icmp.c:695
     ipv4_link_failure+0x29f/0x550 net/ipv4/route.c:1204
     dst_link_failure include/net/dst.h:427 [inline]
     vti6_xmit net/ipv6/ip6_vti.c:514 [inline]
     vti6_tnl_xmit+0x10d4/0x1c0c net/ipv6/ip6_vti.c:553
     __netdev_start_xmit include/linux/netdevice.h:4414 [inline]
     netdev_start_xmit include/linux/netdevice.h:4423 [inline]
     xmit_one net/core/dev.c:3292 [inline]
     dev_hard_start_xmit+0x1b2/0x980 net/core/dev.c:3308
     __dev_queue_xmit+0x271d/0x3060 net/core/dev.c:3878
     dev_queue_xmit+0x18/0x20 net/core/dev.c:3911
     neigh_direct_output+0x16/0x20 net/core/neighbour.c:1527
     neigh_output include/net/neighbour.h:508 [inline]
     ip_finish_output2+0x949/0x1740 net/ipv4/ip_output.c:229
     ip_finish_output+0x73c/0xd50 net/ipv4/ip_output.c:317
     NF_HOOK_COND include/linux/netfilter.h:278 [inline]
     ip_output+0x21f/0x670 net/ipv4/ip_output.c:405
     dst_output include/net/dst.h:444 [inline]
     NF_HOOK include/linux/netfilter.h:289 [inline]
     raw_send_hdrinc net/ipv4/raw.c:432 [inline]
     raw_sendmsg+0x1d2b/0x2f20 net/ipv4/raw.c:663
     inet_sendmsg+0x147/0x5d0 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0xdd/0x130 net/socket.c:661
     sock_write_iter+0x27c/0x3e0 net/socket.c:988
     call_write_iter include/linux/fs.h:1866 [inline]
     new_sync_write+0x4c7/0x760 fs/read_write.c:474
     __vfs_write+0xe4/0x110 fs/read_write.c:487
     vfs_write+0x20c/0x580 fs/read_write.c:549
     ksys_write+0x14f/0x2d0 fs/read_write.c:599
     __do_sys_write fs/read_write.c:611 [inline]
     __se_sys_write fs/read_write.c:608 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:608
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458c29
    Code: ad b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f293b44bc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000458c29
    RDX: 0000000000000014 RSI: 00000000200002c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f293b44c6d4
    R13: 00000000004c8623 R14: 00000000004ded68 R15: 00000000ffffffff
    
    The buggy address belongs to the page:
    page:ffffea00025aafc0 count:0 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0x1fffc0000000000()
    raw: 01fffc0000000000 0000000000000000 ffffffff025a0101 0000000000000000
    raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888096abef80: 00 00 00 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 f2
     ffff888096abf000: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff888096abf080: 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00
                             ^
     ffff888096abf100: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00
     ffff888096abf180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    
    Fixes: ed0de45a1008 ("ipv4: recompile ip options in ipv4_link_failure")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Stephen Suryaputra <ssuryaextr@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f909f520742c9862e94e013c789216e2f7cfe28
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 29 09:48:53 2019 -0700

    rdma: fix build errors on s390 and MIPS due to bad ZERO_PAGE use
    
    commit 6a5c5d26c4c6c3cc486fef0bf04ff9551132611b upstream.
    
    The parameter to ZERO_PAGE() was wrong, but since all architectures
    except for MIPS and s390 ignore it, it wasn't noticed until 0-day
    reported the build error.
    
    Fixes: 67f269b37f9b ("RDMA/ucontext: Fix regression with disassociate")
    Cc: stable@vger.kernel.org
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Leon Romanovsky <leonro@mellanox.com>
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dee438745d7425da3cb1c453250ae8113742bb16
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Mar 25 14:56:20 2019 +0100

    x86/retpolines: Disable switch jump tables when retpolines are enabled
    
    commit a9d57ef15cbe327fe54416dd194ee0ea66ae53a4 upstream.
    
    Commit ce02ef06fcf7 ("x86, retpolines: Raise limit for generating indirect
    calls from switch-case") raised the limit under retpolines to 20 switch
    cases where gcc would only then start to emit jump tables, and therefore
    effectively disabling the emission of slow indirect calls in this area.
    
    After this has been brought to attention to gcc folks [0], Martin Liska
    has then fixed gcc to align with clang by avoiding to generate switch jump
    tables entirely under retpolines. This is taking effect in gcc starting
    from stable version 8.4.0. Given kernel supports compilation with older
    versions of gcc where the fix is not being available or backported anymore,
    we need to keep the extra KBUILD_CFLAGS around for some time and generally
    set the -fno-jump-tables to align with what more recent gcc is doing
    automatically today.
    
    More than 20 switch cases are not expected to be fast-path critical, but
    it would still be good to align with gcc behavior for versions < 8.4.0 in
    order to have consistency across supported gcc versions. vmlinux size is
    slightly growing by 0.27% for older gcc. This flag is only set to work
    around affected gcc, no change for clang.
    
      [0] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86952
    
    Suggested-by: Martin Liska <mliska@suse.cz>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Jesper Dangaard Brouer <brouer@redhat.com>
    Cc: Björn Töpel<bjorn.topel@intel.com>
    Cc: Magnus Karlsson <magnus.karlsson@intel.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: H.J. Lu <hjl.tools@gmail.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: David S. Miller <davem@davemloft.net>
    Link: https://lkml.kernel.org/r/20190325135620.14882-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bd5637a3ebb7f7bbaa4425c1d277c758b61d8f9
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Feb 21 23:19:41 2019 +0100

    x86, retpolines: Raise limit for generating indirect calls from switch-case
    
    commit ce02ef06fcf7a399a6276adb83f37373d10cbbe1 upstream.
    
    From networking side, there are numerous attempts to get rid of indirect
    calls in fast-path wherever feasible in order to avoid the cost of
    retpolines, for example, just to name a few:
    
      * 283c16a2dfd3 ("indirect call wrappers: helpers to speed-up indirect calls of builtin")
      * aaa5d90b395a ("net: use indirect call wrappers at GRO network layer")
      * 028e0a476684 ("net: use indirect call wrappers at GRO transport layer")
      * 356da6d0cde3 ("dma-mapping: bypass indirect calls for dma-direct")
      * 09772d92cd5a ("bpf: avoid retpoline for lookup/update/delete calls on maps")
      * 10870dd89e95 ("netfilter: nf_tables: add direct calls for all builtin expressions")
      [...]
    
    Recent work on XDP from Björn and Magnus additionally found that manually
    transforming the XDP return code switch statement with more than 5 cases
    into if-else combination would result in a considerable speedup in XDP
    layer due to avoidance of indirect calls in CONFIG_RETPOLINE enabled
    builds. On i40e driver with XDP prog attached, a 20-26% speedup has been
    observed [0]. Aside from XDP, there are many other places later in the
    networking stack's critical path with similar switch-case
    processing. Rather than fixing every XDP-enabled driver and locations in
    stack by hand, it would be good to instead raise the limit where gcc would
    emit expensive indirect calls from the switch under retpolines and stick
    with the default as-is in case of !retpoline configured kernels. This would
    also have the advantage that for archs where this is not necessary, we let
    compiler select the underlying target optimization for these constructs and
    avoid potential slow-downs by if-else hand-rewrite.
    
    In case of gcc, this setting is controlled by case-values-threshold which
    has an architecture global default that selects 4 or 5 (latter if target
    does not have a case insn that compares the bounds) where some arch back
    ends like arm64 or s390 override it with their own target hooks, for
    example, in gcc commit db7a90aa0de5 ("S/390: Disable prediction of indirect
    branches") the threshold pretty much disables jump tables by limit of 20
    under retpoline builds.  Comparing gcc's and clang's default code
    generation on x86-64 under O2 level with retpoline build results in the
    following outcome for 5 switch cases:
    
    * gcc with -mindirect-branch=thunk-inline -mindirect-branch-register:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400be0 <+0>:     cmp    $0x4,%edi
       0x0000000000400be3 <+3>:     ja     0x400c35 <dispatch+85>
       0x0000000000400be5 <+5>:     lea    0x915f8(%rip),%rdx        # 0x4921e4
       0x0000000000400bec <+12>:    mov    %edi,%edi
       0x0000000000400bee <+14>:    movslq (%rdx,%rdi,4),%rax
       0x0000000000400bf2 <+18>:    add    %rdx,%rax
       0x0000000000400bf5 <+21>:    callq  0x400c01 <dispatch+33>
       0x0000000000400bfa <+26>:    pause
       0x0000000000400bfc <+28>:    lfence
       0x0000000000400bff <+31>:    jmp    0x400bfa <dispatch+26>
       0x0000000000400c01 <+33>:    mov    %rax,(%rsp)
       0x0000000000400c05 <+37>:    retq
       0x0000000000400c06 <+38>:    nopw   %cs:0x0(%rax,%rax,1)
       0x0000000000400c10 <+48>:    jmpq   0x400c90 <fn_3>
       0x0000000000400c15 <+53>:    nopl   (%rax)
       0x0000000000400c18 <+56>:    jmpq   0x400c70 <fn_2>
       0x0000000000400c1d <+61>:    nopl   (%rax)
       0x0000000000400c20 <+64>:    jmpq   0x400c50 <fn_1>
       0x0000000000400c25 <+69>:    nopl   (%rax)
       0x0000000000400c28 <+72>:    jmpq   0x400c40 <fn_0>
       0x0000000000400c2d <+77>:    nopl   (%rax)
       0x0000000000400c30 <+80>:    jmpq   0x400cb0 <fn_4>
       0x0000000000400c35 <+85>:    push   %rax
       0x0000000000400c36 <+86>:    callq  0x40dd80 <abort>
      End of assembler dump.
    
    * clang with -mretpoline emitting search tree:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400b30 <+0>:     cmp    $0x1,%edi
       0x0000000000400b33 <+3>:     jle    0x400b44 <dispatch+20>
       0x0000000000400b35 <+5>:     cmp    $0x2,%edi
       0x0000000000400b38 <+8>:     je     0x400b4d <dispatch+29>
       0x0000000000400b3a <+10>:    cmp    $0x3,%edi
       0x0000000000400b3d <+13>:    jne    0x400b52 <dispatch+34>
       0x0000000000400b3f <+15>:    jmpq   0x400c50 <fn_3>
       0x0000000000400b44 <+20>:    test   %edi,%edi
       0x0000000000400b46 <+22>:    jne    0x400b5c <dispatch+44>
       0x0000000000400b48 <+24>:    jmpq   0x400c20 <fn_0>
       0x0000000000400b4d <+29>:    jmpq   0x400c40 <fn_2>
       0x0000000000400b52 <+34>:    cmp    $0x4,%edi
       0x0000000000400b55 <+37>:    jne    0x400b66 <dispatch+54>
       0x0000000000400b57 <+39>:    jmpq   0x400c60 <fn_4>
       0x0000000000400b5c <+44>:    cmp    $0x1,%edi
       0x0000000000400b5f <+47>:    jne    0x400b66 <dispatch+54>
       0x0000000000400b61 <+49>:    jmpq   0x400c30 <fn_1>
       0x0000000000400b66 <+54>:    push   %rax
       0x0000000000400b67 <+55>:    callq  0x40dd20 <abort>
      End of assembler dump.
    
      For sake of comparison, clang without -mretpoline:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400b30 <+0>:     cmp    $0x4,%edi
       0x0000000000400b33 <+3>:     ja     0x400b57 <dispatch+39>
       0x0000000000400b35 <+5>:     mov    %edi,%eax
       0x0000000000400b37 <+7>:     jmpq   *0x492148(,%rax,8)
       0x0000000000400b3e <+14>:    jmpq   0x400bf0 <fn_0>
       0x0000000000400b43 <+19>:    jmpq   0x400c30 <fn_4>
       0x0000000000400b48 <+24>:    jmpq   0x400c10 <fn_2>
       0x0000000000400b4d <+29>:    jmpq   0x400c20 <fn_3>
       0x0000000000400b52 <+34>:    jmpq   0x400c00 <fn_1>
       0x0000000000400b57 <+39>:    push   %rax
       0x0000000000400b58 <+40>:    callq  0x40dcf0 <abort>
      End of assembler dump.
    
    Raising the cases to a high number (e.g. 100) will still result in similar
    code generation pattern with clang and gcc as above, in other words clang
    generally turns off jump table emission by having an extra expansion pass
    under retpoline build to turn indirectbr instructions from their IR into
    switch instructions as a built-in -mno-jump-table lowering of a switch (in
    this case, even if IR input already contained an indirect branch).
    
    For gcc, adding --param=case-values-threshold=20 as in similar fashion as
    s390 in order to raise the limit for x86 retpoline enabled builds results
    in a small vmlinux size increase of only 0.13% (before=18,027,528
    after=18,051,192). For clang this option is ignored due to i) not being
    needed as mentioned and ii) not having above cmdline
    parameter. Non-retpoline-enabled builds with gcc continue to use the
    default case-values-threshold setting, so nothing changes here.
    
    [0] https://lore.kernel.org/netdev/20190129095754.9390-1-bjorn.topel@gmail.com/
        and "The Path to DPDK Speeds for AF_XDP", LPC 2018, networking track:
      - http://vger.kernel.org/lpc_net2018_talks/lpc18_pres_af_xdp_perf-v3.pdf
      - http://vger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Björn Töpel <bjorn.topel@intel.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: netdev@vger.kernel.org
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Magnus Karlsson <magnus.karlsson@intel.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/20190221221941.29358-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6dd51f041faa9e239d40782e58abb57eaef124c
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 7 21:45:41 2019 -0500

    Fix aio_poll() races
    
    commit af5c72b1fc7a00aa484e90b0c4e0eeb582545634 upstream.
    
    aio_poll() has to cope with several unpleasant problems:
            * requests that might stay around indefinitely need to
    be made visible for io_cancel(2); that must not be done to
    a request already completed, though.
            * in cases when ->poll() has placed us on a waitqueue,
    wakeup might have happened (and request completed) before ->poll()
    returns.
            * worse, in some early wakeup cases request might end
    up re-added into the queue later - we can't treat "woken up and
    currently not in the queue" as "it's not going to stick around
    indefinitely"
            * ... moreover, ->poll() might have decided not to
    put it on any queues to start with, and that needs to be distinguished
    from the previous case
            * ->poll() might have tried to put us on more than one queue.
    Only the first will succeed for aio poll, so we might end up missing
    wakeups.  OTOH, we might very well notice that only after the
    wakeup hits and request gets completed (all before ->poll() gets
    around to the second poll_wait()).  In that case it's too late to
    decide that we have an error.
    
    req->woken was an attempt to deal with that.  Unfortunately, it was
    broken.  What we need to keep track of is not that wakeup has happened -
    the thing might come back after that.  It's that async reference is
    already gone and won't come back, so we can't (and needn't) put the
    request on the list of cancellables.
    
    The easiest case is "request hadn't been put on any waitqueues"; we
    can tell by seeing NULL apt.head, and in that case there won't be
    anything async.  We should either complete the request ourselves
    (if vfs_poll() reports anything of interest) or return an error.
    
    In all other cases we get exclusion with wakeups by grabbing the
    queue lock.
    
    If request is currently on queue and we have something interesting
    from vfs_poll(), we can steal it and complete the request ourselves.
    
    If it's on queue and vfs_poll() has not reported anything interesting,
    we either put it on the cancellable list, or, if we know that it
    hadn't been put on all queues ->poll() wanted it on, we steal it and
    return an error.
    
    If it's _not_ on queue, it's either been already dealt with (in which
    case we do nothing), or there's aio_poll_complete_work() about to be
    executed.  In that case we either put it on the cancellable list,
    or, if we know it hadn't been put on all queues ->poll() wanted it on,
    simulate what cancel would've done.
    
    It's a lot more convoluted than I'd like it to be.  Single-consumer APIs
    suck, and unfortunately aio is not an exception...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6408361ded74c1f031fa14da39865d963e966c9
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 7 19:49:55 2019 -0500

    aio: store event at final iocb_put()
    
    commit 2bb874c0d873d13bd9b9b9c6d7b7c4edab18c8b4 upstream.
    
    Instead of having aio_complete() set ->ki_res.{res,res2}, do that
    explicitly in its callers, drop the reference (as aio_complete()
    used to do) and delay the rest until the final iocb_put().
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8a538aed4f9bd89862be15e207bfef506a4ba36
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 7 19:43:45 2019 -0500

    aio: keep io_event in aio_kiocb
    
    commit a9339b7855094ba11a97e8822ae038135e879e79 upstream.
    
    We want to separate forming the resulting io_event from putting it
    into the ring buffer.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 636fa71ed5f7d7442c263aa3111de776d235f881
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Mar 11 19:00:36 2019 -0400

    aio: fold lookup_kiocb() into its sole caller
    
    commit 833f4154ed560232120bc475935ee1d6a20e159f upstream.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 199f34c1355b2b277081320d2c5965bb98d08d85
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 6 20:22:54 2019 -0500

    pin iocb through aio.
    
    commit b53119f13a04879c3bf502828d99d13726639ead upstream.
    
    aio_poll() is not the only case that needs file pinned; worse, while
    aio_read()/aio_write() can live without pinning iocb itself, the
    proof is rather brittle and can easily break on later changes.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2f0a96eeb501b0bfb667e4d2f2a4cccf09914b6
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 09:44:11 2019 -0700

    rxrpc: fix race condition in rxrpc_input_packet()
    
    commit 032be5f19a94de51093851757089133dcc1e92aa upstream.
    
    After commit 5271953cad31 ("rxrpc: Use the UDP encap_rcv hook"),
    rxrpc_input_packet() is directly called from lockless UDP receive
    path, under rcu_read_lock() protection.
    
    It must therefore use RCU rules :
    
    - udp_sk->sk_user_data can be cleared at any point in this function.
      rcu_dereference_sk_user_data() is what we need here.
    
    - Also, since sk_user_data might have been set in rxrpc_open_socket()
      we must observe a proper RCU grace period before kfree(local) in
      rxrpc_lookup_local()
    
    v4: @local can be NULL in xrpc_lookup_local() as reported by kbuild test robot <lkp@intel.com>
            and Julia Lawall <julia.lawall@lip6.fr>, thanks !
    
    v3,v2 : addressed David Howells feedback, thanks !
    
    syzbot reported :
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 19236 Comm: syz-executor703 Not tainted 5.1.0-rc6 #79
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__lock_acquire+0xbef/0x3fb0 kernel/locking/lockdep.c:3573
    Code: 00 0f 85 a5 1f 00 00 48 81 c4 10 01 00 00 5b 41 5c 41 5d 41 5e 41 5f 5d c3 48 b8 00 00 00 00 00 fc ff df 4c 89 ea 48 c1 ea 03 <80> 3c 02 00 0f 85 4a 21 00 00 49 81 7d 00 20 54 9c 89 0f 84 cf f4
    RSP: 0018:ffff88809d7aef58 EFLAGS: 00010002
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000026 RSI: 0000000000000000 RDI: 0000000000000001
    RBP: ffff88809d7af090 R08: 0000000000000001 R09: 0000000000000001
    R10: ffffed1015d05bc7 R11: ffff888089428600 R12: 0000000000000000
    R13: 0000000000000130 R14: 0000000000000001 R15: 0000000000000001
    FS:  00007f059044d700(0000) GS:ffff8880ae800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000004b6040 CR3: 00000000955ca000 CR4: 00000000001406f0
    Call Trace:
     lock_acquire+0x16f/0x3f0 kernel/locking/lockdep.c:4211
     __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
     _raw_spin_lock_irqsave+0x95/0xcd kernel/locking/spinlock.c:152
     skb_queue_tail+0x26/0x150 net/core/skbuff.c:2972
     rxrpc_reject_packet net/rxrpc/input.c:1126 [inline]
     rxrpc_input_packet+0x4a0/0x5536 net/rxrpc/input.c:1414
     udp_queue_rcv_one_skb+0xaf2/0x1780 net/ipv4/udp.c:2011
     udp_queue_rcv_skb+0x128/0x730 net/ipv4/udp.c:2085
     udp_unicast_rcv_skb.isra.0+0xb9/0x360 net/ipv4/udp.c:2245
     __udp4_lib_rcv+0x701/0x2ca0 net/ipv4/udp.c:2301
     udp_rcv+0x22/0x30 net/ipv4/udp.c:2482
     ip_protocol_deliver_rcu+0x60/0x8f0 net/ipv4/ip_input.c:208
     ip_local_deliver_finish+0x23b/0x390 net/ipv4/ip_input.c:234
     NF_HOOK include/linux/netfilter.h:289 [inline]
     NF_HOOK include/linux/netfilter.h:283 [inline]
     ip_local_deliver+0x1e9/0x520 net/ipv4/ip_input.c:255
     dst_input include/net/dst.h:450 [inline]
     ip_rcv_finish+0x1e1/0x300 net/ipv4/ip_input.c:413
     NF_HOOK include/linux/netfilter.h:289 [inline]
     NF_HOOK include/linux/netfilter.h:283 [inline]
     ip_rcv+0xe8/0x3f0 net/ipv4/ip_input.c:523
     __netif_receive_skb_one_core+0x115/0x1a0 net/core/dev.c:4987
     __netif_receive_skb+0x2c/0x1c0 net/core/dev.c:5099
     netif_receive_skb_internal+0x117/0x660 net/core/dev.c:5202
     napi_frags_finish net/core/dev.c:5769 [inline]
     napi_gro_frags+0xade/0xd10 net/core/dev.c:5843
     tun_get_user+0x2f24/0x3fb0 drivers/net/tun.c:1981
     tun_chr_write_iter+0xbd/0x156 drivers/net/tun.c:2027
     call_write_iter include/linux/fs.h:1866 [inline]
     do_iter_readv_writev+0x5e1/0x8e0 fs/read_write.c:681
     do_iter_write fs/read_write.c:957 [inline]
     do_iter_write+0x184/0x610 fs/read_write.c:938
     vfs_writev+0x1b3/0x2f0 fs/read_write.c:1002
     do_writev+0x15e/0x370 fs/read_write.c:1037
     __do_sys_writev fs/read_write.c:1110 [inline]
     __se_sys_writev fs/read_write.c:1107 [inline]
     __x64_sys_writev+0x75/0xb0 fs/read_write.c:1107
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 5271953cad31 ("rxrpc: Use the UDP encap_rcv hook")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f2c074416346c2c1241ce573772f1354619cda7
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Apr 12 19:51:52 2019 +0900

    net/rds: Check address length before reading address family
    
    commit dd3ac9a684358b8c1d5c432ca8322aaf5e4f28ee upstream.
    
    syzbot is reporting uninitialized value at rds_connect() [1] and
    rds_bind() [2]. This is because syzbot is passing ulen == 0 whereas
    these functions expect that it is safe to access sockaddr->family field
    in order to determine minimal address length for validation.
    
    [1] https://syzkaller.appspot.com/bug?id=f4e61c010416c1e6f0fa3ffe247561b60a50ad71
    [2] https://syzkaller.appspot.com/bug?id=a4bf9e41b7e055c3823fdcd83e8c58ca7270e38f
    
    Reported-by: syzbot <syzbot+0049bebbf3042dbd2e8f@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+915c9f99f3dbc4bd6cd1@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0d184559cb42063a6fe960f0a9376d2aaabd8e6
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Apr 9 19:53:55 2019 +0800

    net: netrom: Fix error cleanup path of nr_proto_init
    
    commit d3706566ae3d92677b932dd156157fd6c72534b1 upstream.
    
    Syzkaller report this:
    
    BUG: unable to handle kernel paging request at fffffbfff830524b
    PGD 237fe8067 P4D 237fe8067 PUD 237e64067 PMD 1c9716067 PTE 0
    Oops: 0000 [#1] SMP KASAN PTI
    CPU: 1 PID: 4465 Comm: syz-executor.0 Not tainted 5.0.0+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:__list_add_valid+0x21/0xe0 lib/list_debug.c:23
    Code: 8b 0c 24 e9 17 fd ff ff 90 55 48 89 fd 48 8d 7a 08 53 48 89 d3 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 48 83 ec 08 <80> 3c 02 00 0f 85 8b 00 00 00 48 8b 53 08 48 39 f2 75 35 48 89 f2
    RSP: 0018:ffff8881ea2278d0 EFLAGS: 00010282
    RAX: dffffc0000000000 RBX: ffffffffc1829250 RCX: 1ffff1103d444ef4
    RDX: 1ffffffff830524b RSI: ffffffff85659300 RDI: ffffffffc1829258
    RBP: ffffffffc1879250 R08: fffffbfff0acb269 R09: fffffbfff0acb269
    R10: ffff8881ea2278f0 R11: fffffbfff0acb268 R12: ffffffffc1829250
    R13: dffffc0000000000 R14: 0000000000000008 R15: ffffffffc187c830
    FS:  00007fe0361df700(0000) GS:ffff8881f7300000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: fffffbfff830524b CR3: 00000001eb39a001 CR4: 00000000007606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     __list_add include/linux/list.h:60 [inline]
     list_add include/linux/list.h:79 [inline]
     proto_register+0x444/0x8f0 net/core/sock.c:3375
     nr_proto_init+0x73/0x4b3 [netrom]
     ? 0xffffffffc1628000
     ? 0xffffffffc1628000
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe0361dec58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00007fe0361dec70 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe0361df6bc
    R13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004
    Modules linked in: netrom(+) ax25 fcrypt pcbc af_alg arizona_ldo1 v4l2_common videodev media v4l2_dv_timings hdlc ide_cd_mod snd_soc_sigmadsp_regmap snd_soc_sigmadsp intel_spi_platform intel_spi mtd spi_nor snd_usbmidi_lib usbcore lcd ti_ads7950 hi6421_regulator snd_soc_kbl_rt5663_max98927 snd_soc_hdac_hdmi snd_hda_ext_core snd_hda_core snd_soc_rt5663 snd_soc_core snd_pcm_dmaengine snd_compress snd_soc_rl6231 mac80211 rtc_rc5t583 spi_slave_time leds_pwm hid_gt683r hid industrialio_triggered_buffer kfifo_buf industrialio ir_kbd_i2c rc_core led_class_flash dwc_xlgmac snd_ymfpci gameport snd_mpu401_uart snd_rawmidi snd_ac97_codec snd_pcm ac97_bus snd_opl3_lib snd_timer snd_seq_device snd_hwdep snd soundcore iptable_security iptable_raw iptable_mangle iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan
     bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun joydev mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel ide_pci_generic piix aesni_intel aes_x86_64 crypto_simd cryptd glue_helper ide_core psmouse input_leds i2c_piix4 serio_raw intel_agp intel_gtt ata_generic agpgart pata_acpi parport_pc rtc_cmos parport floppy sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: rxrpc]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    CR2: fffffbfff830524b
    ---[ end trace 039ab24b305c4b19 ]---
    
    If nr_proto_init failed, it may forget to call proto_unregister,
    tiggering this issue.This patch rearrange code of nr_proto_init
    to avoid such issues.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0cf85f49505796b28e03926b0ce0e17d34461f5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ee29a10021fdfaf02d22b82c1f7fcc605d365f3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a92526e257a5d752a37f0d148fc6182a517b5ce4
Author: Yue Haibing <yuehaibing@huawei.com>
Date:   Thu Mar 21 22:42:23 2019 +0800

    fm10k: Fix a potential NULL pointer dereference
    
    commit 01ca667133d019edc9f0a1f70a272447c84ec41f upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573
    Code: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00
    RSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080
    RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000
    R10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001
    R13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001
    FS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211
     __mutex_lock_common kernel/locking/mutex.c:925 [inline]
     __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072
     drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934
     destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc
    R13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff
    
    If alloc_workqueue fails, it should return -ENOMEM, otherwise may
    trigger this NULL pointer dereference while unloading drivers.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 0a38c17a21a0 ("fm10k: Remove create_workqueue")
    Signed-off-by: Yue Haibing <yuehaibing@huawei.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d41789ad8205743e06dacd85fc0bd95a3d8948c
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 15 00:43:00 2019 +0200

    netfilter: ebtables: CONFIG_COMPAT: drop a bogus WARN_ON
    
    commit 7caa56f006e9d712b44f27b32520c66420d5cbc6 upstream.
    
    It means userspace gave us a ruleset where there is some other
    data after the ebtables target but before the beginning of the next rule.
    
    Fixes: 81e675c227ec ("netfilter: ebtables: add CONFIG_COMPAT support")
    Reported-by: syzbot+659574e7bcc7f7eb4df7@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit becfa96eaecd76a46e9b164d79141b5baa315535
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Mar 30 10:21:07 2019 +0900

    NFS: Forbid setting AF_INET6 to "struct sockaddr_in"->sin_family.
    
    commit 7c2bd9a39845bfb6d72ddb55ce737650271f6f96 upstream.
    
    syzbot is reporting uninitialized value at rpc_sockaddr2uaddr() [1]. This
    is because syzbot is setting AF_INET6 to "struct sockaddr_in"->sin_family
    (which is embedded into user-visible "struct nfs_mount_data" structure)
    despite nfs23_validate_mount_data() cannot pass sizeof(struct sockaddr_in6)
    bytes of AF_INET6 address to rpc_sockaddr2uaddr().
    
    Since "struct nfs_mount_data" structure is user-visible, we can't change
    "struct nfs_mount_data" to use "struct sockaddr_storage". Therefore,
    assuming that everybody is using AF_INET family when passing address via
    "struct nfs_mount_data"->addr, reject if its sin_family is not AF_INET.
    
    [1] https://syzkaller.appspot.com/bug?id=599993614e7cbbf66bc2656a919ab2a95fb5d75c
    
    Reported-by: syzbot <syzbot+047a11c361b872896a4f@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5db8ea57de55585027304c1ec30d5542a9360ef
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Mar 29 08:56:22 2019 +0100

    mac80211_hwsim: calculate if_combination.max_interfaces
    
    commit 45fcef8b727b6f171bc5443e8153181a367d7a15 upstream.
    
    If we just set this to 2048, and have multiple limits you
    can select from, the total number might run over and cause
    a warning in cfg80211. This doesn't make sense, so we just
    calculate the total max_interfaces now.
    
    Reported-by: syzbot+8f91bd563bbff230d0ee@syzkaller.appspotmail.com
    Fixes: 99e3a44bac37 ("mac80211_hwsim: allow setting iftype support")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16de5d9b8f6be7a5fcb4a7dccd915e955c38e731
Author: luca abeni <luca.abeni@santannapisa.it>
Date:   Mon Mar 25 14:15:30 2019 +0100

    sched/deadline: Correctly handle active 0-lag timers
    
    commit 1b02cd6a2d7f3e2a6a5262887d2cb2912083e42f upstream.
    
    syzbot reported the following warning:
    
       [ ] WARNING: CPU: 4 PID: 17089 at kernel/sched/deadline.c:255 task_non_contending+0xae0/0x1950
    
    line 255 of deadline.c is:
    
            WARN_ON(hrtimer_active(&dl_se->inactive_timer));
    
    in task_non_contending().
    
    Unfortunately, in some cases (for example, a deadline task
    continuosly blocking and waking immediately) it can happen that
    a task blocks (and task_non_contending() is called) while the
    0-lag timer is still active.
    
    In this case, the safest thing to do is to immediately decrease
    the running bandwidth of the task, without trying to re-arm the 0-lag timer.
    
    Signed-off-by: luca abeni <luca.abeni@santannapisa.it>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Juri Lelli <juri.lelli@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: chengjian (D) <cj.chengjian@huawei.com>
    Link: https://lkml.kernel.org/r/20190325131530.34706-1-luca.abeni@santannapisa.it
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbb19ca082ce27ce60ca65be016a951806ea947c
Author: Todd Kjos <tkjos@android.com>
Date:   Thu Feb 14 15:22:57 2019 -0800

    binder: fix handling of misaligned binder object
    
    commit 26528be6720bb40bc8844e97ee73a37e530e9c5e upstream.
    
    Fixes crash found by syzbot:
    kernel BUG at drivers/android/binder_alloc.c:LINE! (2)
    
    Reported-and-tested-by: syzbot+55de1eb4975dec156d8f@syzkaller.appspotmail.com
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: stable <stable@vger.kernel.org> # 5.0, 4.19, 4.14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fe1600c91f9ba41990c35a0f817bd58d8a3c1d1
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Wed Jan 23 09:44:12 2019 +0900

    workqueue: Try to catch flush_work() without INIT_WORK().
    
    commit 4d43d395fed124631ca02356c711facb90185175 upstream.
    
    syzbot found a flush_work() caller who forgot to call INIT_WORK()
    because that work_struct was allocated by kzalloc() [1]. But the message
    
      INFO: trying to register non-static key.
      the code is fine but needs lockdep annotation.
      turning off the locking correctness validator.
    
    by lock_map_acquire() is failing to tell that INIT_WORK() is missing.
    
    Since flush_work() without INIT_WORK() is a bug, and INIT_WORK() should
    set ->func field to non-zero, let's warn if ->func field is zero.
    
    [1] https://syzkaller.appspot.com/bug?id=a5954455fcfa51c29ca2ab55b203076337e1c770
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abcbf3078130bf3151bca846f0b710e83a6623c4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 25 16:13:58 2019 -0700

    slip: make slhc_free() silently accept an error pointer
    
    commit baf76f0c58aec435a3a864075b8f6d8ee5d1f17e upstream.
    
    This way, slhc_free() accepts what slhc_init() returns, whether that is
    an error or not.
    
    In particular, the pattern in sl_alloc_bufs() is
    
            slcomp = slhc_init(16, 16);
            ...
            slhc_free(slcomp);
    
    for the error handling path, and rather than complicate that code, just
    make it ok to always free what was returned by the init function.
    
    That's what the code used to do before commit 4ab42d78e37a ("ppp, slip:
    Validate VJ compression slot parameters completely") when slhc_init()
    just returned NULL for the error case, with no actual indication of the
    details of the error.
    
    Reported-by: syzbot+45474c076a4927533d2e@syzkaller.appspotmail.com
    Fixes: 4ab42d78e37a ("ppp, slip: Validate VJ compression slot parameters completely")
    Acked-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: David Miller <davem@davemloft.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba965c2c980872cf2dbbf61136fd6eeedc839c47
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 upstream.
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2501b17f4f72e774e66b846edada376ff1a73697
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Fri Feb 22 22:10:19 2019 +0800

    loop: do not print warn message if partition scan is successful
    
    commit 40853d6fc619a6fd3d3177c3973a2eac9b598a80 upstream.
    
    Do not print warn message when the partition scan returns 0.
    
    Fixes: d57f3374ba48 ("loop: Move special partition reread handling in loop_clr_fd()")
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acaec7f6e25d8db2d79937780f5c48f7e43c0e4f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Feb 21 11:17:34 2019 -0500

    ext4: fix some error pointer dereferences
    
    commit 7159a986b4202343f6cca3bb8079ecace5816fd6 upstream.
    
    We can't pass error pointers to brelse().
    
    Fixes: fb265c9cb49e ("ext4: add ext4_sb_bread() to disambiguate ENOMEM cases")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cd705091e361e14c583689c146f8fd9c43fb74f
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sat Jan 12 03:54:25 2019 +0800

    USB: Consolidate LPM checks to avoid enabling LPM twice
    
    commit d7a6c0ce8d26412903c7981503bad9e1cc7c45d2 upstream.
    
    USB Bluetooth controller QCA ROME (0cf3:e007) sometimes stops working
    after S3:
    [ 165.110742] Bluetooth: hci0: using NVM file: qca/nvm_usb_00000302.bin
    [ 168.432065] Bluetooth: hci0: Failed to send body at 4 of 1953 (-110)
    
    After some experiments, I found that disabling LPM can workaround the
    issue.
    
    On some platforms, the USB power is cut during S3, so the driver uses
    reset-resume to resume the device. During port resume, LPM gets enabled
    twice, by usb_reset_and_verify_device() and usb_port_resume().
    
    Consolidate all checks into new LPM helpers to make sure LPM only gets
    enabled once.
    
    Fixes: de68bab4fa96 ("usb: Don't enable USB 2.0 Link PM by default.”)
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org> # after much soaking
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30d57be1f6eb0670c69c4912c33b28b6522b366b
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sat Jan 12 03:54:24 2019 +0800

    USB: Add new USB LPM helpers
    
    commit 7529b2574a7aaf902f1f8159fbc2a7caa74be559 upstream.
    
    Use new helpers to make LPM enabling/disabling more clear.
    
    This is a preparation to subsequent patch.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org> # after much soaking
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ec39721f131f6c939fb3063109644d97ac2745b
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed Apr 24 17:06:29 2019 +0200

    drm/vc4: Fix compilation error reported by kbuild test bot
    
    commit 462ce5d963f18b71c63f6b7730a35a2ee5273540 upstream.
    
    A pointer to crtc was missing, resulting in the following build error:
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse: sparse: incorrect type in argument 1 (different base types)
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse:    expected struct drm_crtc *crtc
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse:    got struct drm_crtc_state *state
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:39: sparse: sparse: not enough arguments for function vc4_crtc_destroy_state
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reported-by: kbuild test robot <lkp@intel.com>
    Cc: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/2b6ed5e6-81b0-4276-8860-870b54ca3262@linux.intel.com
    Fixes: d08106796a78 ("drm/vc4: Fix memory leak during gpu reset.")
    Cc: <stable@vger.kernel.org> # v4.6+
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e869fd348565c3bab7a6c61cc4b66c3594e6db2
Author: Dave Airlie <airlied@redhat.com>
Date:   Wed Apr 24 10:47:56 2019 +1000

    Revert "drm/i915/fbdev: Actually configure untiled displays"
    
    commit 9fa246256e09dc30820524401cdbeeaadee94025 upstream.
    
    This reverts commit d179b88deb3bf6fed4991a31fd6f0f2cad21fab5.
    
    This commit is documented to break userspace X.org modesetting driver in certain configurations.
    
    The X.org modesetting userspace driver is broken. No fixes are available yet. In order for this patch to be applied it either needs a config option or a workaround developed.
    
    This has been reported a few times, saying it's a userspace problem is clearly against the regression rules.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=109806
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Cc: <stable@vger.kernel.org> # v3.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6dca846c920d690b1164fc2e33ff599462c4cea8
Author: Christian König <christian.koenig@amd.com>
Date:   Tue Apr 16 11:49:17 2019 +0200

    drm/ttm: fix re-init of global structures
    
    commit bd4264112f93045704731850c5e4d85db981cd85 upstream.
    
    When a driver unloads without unloading TTM we don't correctly
    clear the global structures leading to errors on re-init.
    
    Next step should probably be to remove the global structures and
    kobjs all together, but this is tricky since we need to maintain
    backward compatibility.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Tested-by: Karol Herbst <kherbst@redhat.com>
    CC: stable@vger.kernel.org # 5.0.x
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b029ce3f4ee15d4e5625b6266dc1551ae1cda2d
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Fri Mar 1 13:56:11 2019 +0100

    drm/vc4: Fix memory leak during gpu reset.
    
    commit d08106796a78a4273e39e1bbdf538dc4334b2635 upstream.
    
    __drm_atomic_helper_crtc_destroy_state does not free memory, it only
    cleans it up. Fix this by calling the functions own destroy function.
    
    Fixes: 6d6e50039187 ("drm/vc4: Allocate the right amount of space for boot-time CRTC state.")
    Cc: Eric Anholt <eric@anholt.net>
    Cc: <stable@vger.kernel.org> # v4.6+
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190301125627.7285-2-maarten.lankhorst@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaceebbb71c58fd9086525ed8fdaf4510a8e5907
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Apr 16 23:59:02 2019 +1000

    powerpc/mm/radix: Make Radix require HUGETLB_PAGE
    
    commit 8adddf349fda0d3de2f6bb41ddf838cbf36a8ad2 upstream.
    
    Joel reported weird crashes using skiroot_defconfig, in his case we
    jumped into an NX page:
    
      kernel tried to execute exec-protected page (c000000002bff4f0) - exploit attempt? (uid: 0)
      BUG: Unable to handle kernel instruction fetch
      Faulting instruction address: 0xc000000002bff4f0
    
    Looking at the disassembly, we had simply branched to that address:
    
      c000000000c001bc  49fff335    bl     c000000002bff4f0
    
    But that didn't match the original kernel image:
    
      c000000000c001bc  4bfff335    bl     c000000000bff4f0 <kobject_get+0x8>
    
    When STRICT_KERNEL_RWX is enabled, and we're using the radix MMU, we
    call radix__change_memory_range() late in boot to change page
    protections. We do that both to mark rodata read only and also to mark
    init text no-execute. That involves walking the kernel page tables,
    and clearing _PAGE_WRITE or _PAGE_EXEC respectively.
    
    With radix we may use hugepages for the linear mapping, so the code in
    radix__change_memory_range() uses eg. pmd_huge() to test if it has
    found a huge mapping, and if so it stops the page table walk and
    changes the PMD permissions.
    
    However if the kernel is built without HUGETLBFS support, pmd_huge()
    is just a #define that always returns 0. That causes the code in
    radix__change_memory_range() to incorrectly interpret the PMD value as
    a pointer to a PTE page rather than as a PTE at the PMD level.
    
    We can see this using `dv` in xmon which also uses pmd_huge():
    
      0:mon> dv c000000000000000
      pgd  @ 0xc000000001740000
      pgdp @ 0xc000000001740000 = 0x80000000ffffb009
      pudp @ 0xc0000000ffffb000 = 0x80000000ffffa009
      pmdp @ 0xc0000000ffffa000 = 0xc00000000000018f   <- this is a PTE
      ptep @ 0xc000000000000100 = 0xa64bb17da64ab07d   <- kernel text
    
    The end result is we treat the value at 0xc000000000000100 as a PTE
    and clear _PAGE_WRITE or _PAGE_EXEC, potentially corrupting the code
    at that address.
    
    In Joel's specific case we cleared the sign bit in the offset of the
    branch, causing a backward branch to turn into a forward branch which
    caused us to branch into a non-executable page. However the exact
    nature of the crash depends on kernel version, compiler version, and
    other factors.
    
    We need to fix radix__change_memory_range() to not use accessors that
    depend on HUGETLBFS, but we also have radix memory hotplug code that
    uses pmd_huge() etc that will also need fixing. So for now just
    disallow the broken combination of Radix with HUGETLBFS disabled.
    
    The only defconfig we have that is affected is skiroot_defconfig, so
    turn on HUGETLBFS there so that it still gets Radix.
    
    Fixes: 566ca99af026 ("powerpc/mm/radix: Add dummy radix_enabled()")
    Cc: stable@vger.kernel.org # v4.7+
    Reported-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9a5bc4bb079b00cb81ab8a408195332faed331e
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Apr 12 22:34:18 2019 +0100

    ARM: 8857/1: efi: enable CP15 DMB instructions before cleaning the cache
    
    commit e17b1af96b2afc38e684aa2f1033387e2ed10029 upstream.
    
    The EFI stub is entered with the caches and MMU enabled by the
    firmware, and once the stub is ready to hand over to the decompressor,
    we clean and disable the caches.
    
    The cache clean routines use CP15 barrier instructions, which can be
    disabled via SCTLR. Normally, when using the provided cache handling
    routines to enable the caches and MMU, this bit is enabled as well.
    However, but since we entered the stub with the caches already enabled,
    this routine is not executed before we call the cache clean routines,
    resulting in undefined instruction exceptions if the firmware never
    enabled this bit.
    
    So set the bit explicitly in the EFI entry code, but do so in a way that
    guarantees that the resulting code can still run on v6 cores as well
    (which are guaranteed to have CP15 barriers enabled)
    
    Cc: <stable@vger.kernel.org> # v4.9+
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa5f016ba785b0c73018f9aa62ad67b5170a9d3e
Author: Shun-Chih Yu <shun-chih.yu@mediatek.com>
Date:   Thu Apr 25 11:53:50 2019 +0800

    dmaengine: mediatek-cqdma: fix wrong register usage in mtk_cqdma_start
    
    commit 5bb5c3a3ac102158b799bf5eda871223aa5e9c25 upstream.
    
    This patch fixes wrong register usage in the mtk_cqdma_start. The
    destination register should be MTK_CQDMA_DST2 instead.
    
    Fixes: b1f01e48df5a ("dmaengine: mediatek: Add MediaTek Command-Queue DMA controller for MT6765 SoC")
    Signed-off-by: Shun-Chih Yu <shun-chih.yu@mediatek.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9476c3ad5ee21b57dbfbf4f7fe6a79f672eba078
Author: Achim Dahlhoff <Achim.Dahlhoff@de.bosch.com>
Date:   Fri Apr 12 07:29:14 2019 +0200

    dmaengine: sh: rcar-dmac: Fix glitch in dmaengine_tx_status
    
    commit 6e7da74775348d96e2d7efaf3f91410e18c481ef upstream.
    
    The tx_status poll in the rcar_dmac driver reads the status register
    which indicates which chunk is busy (DMACHCRB). Afterwards the point
    inside the chunk is read from DMATCRB. It is possible that the chunk
    has changed between the two reads. The result is a non-monotonous
    increase of the residue. Fix this by introducing a 'safe read' logic.
    
    Fixes: 73a47bd0da66 ("dmaengine: rcar-dmac: use TCRB instead of TCR for residue")
    Signed-off-by: Achim Dahlhoff <Achim.Dahlhoff@de.bosch.com>
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Cc: <stable@vger.kernel.org> # v4.16+
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c46e14be004a1516600012f05d6e23b096c06f31
Author: Dirk Behme <dirk.behme@de.bosch.com>
Date:   Fri Apr 12 07:29:13 2019 +0200

    dmaengine: sh: rcar-dmac: With cyclic DMA residue 0 is valid
    
    commit 907bd68a2edc491849e2fdcfe52c4596627bca94 upstream.
    
    Having a cyclic DMA, a residue 0 is not an indication of a completed
    DMA. In case of cyclic DMA make sure that dma_set_residue() is called
    and with this a residue of 0 is forwarded correctly to the caller.
    
    Fixes: 3544d2878817 ("dmaengine: rcar-dmac: use result of updated get_residue in tx_status")
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Signed-off-by: Achim Dahlhoff <Achim.Dahlhoff@de.bosch.com>
    Signed-off-by: Hiroyuki Yokoyama <hiroyuki.yokoyama.vx@renesas.com>
    Signed-off-by: Yao Lihua <ylhuajnu@outlook.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16df9424ffaa5bdbeeebd6427606d3b8cc176be1
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Wed Apr 3 12:36:21 2019 -0600

    vfio/type1: Limit DMA mappings per container
    
    commit 492855939bdb59c6f947b0b5b44af9ad82b7e38c upstream.
    
    Memory backed DMA mappings are accounted against a user's locked
    memory limit, including multiple mappings of the same memory.  This
    accounting bounds the number of such mappings that a user can create.
    However, DMA mappings that are not backed by memory, such as DMA
    mappings of device MMIO via mmaps, do not make use of page pinning
    and therefore do not count against the user's locked memory limit.
    These mappings still consume memory, but the memory is not well
    associated to the process for the purpose of oom killing a task.
    
    To add bounding on this use case, we introduce a limit to the total
    number of concurrent DMA mappings that a user is allowed to create.
    This limit is exposed as a tunable module option where the default
    value of 64K is expected to be well in excess of any reasonable use
    case (a large virtual machine configuration would typically only make
    use of tens of concurrent mappings).
    
    This fixes CVE-2019-3882.
    
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Tested-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4898e9b9979528dd51407c5600e4688dc30228f2
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Fri Apr 26 17:22:01 2019 -0700

    Input: synaptics-rmi4 - write config register values to the right offset
    
    commit 3a349763cf11e63534b8f2d302f2d0c790566497 upstream.
    
    Currently any changed config register values don't take effect, as the
    function to write them back is called with the wrong register offset.
    
    Fixes: ff8f83708b3e (Input: synaptics-rmi4 - add support for 2D
                         sensors and F11)
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c704bba6dd3620faab4625f93e31a075a84aa179
Author: Harry Pan <harry.pan@intel.com>
Date:   Wed Apr 24 22:50:33 2019 +0800

    perf/x86/intel: Update KBL Package C-state events to also include PC8/PC9/PC10 counters
    
    commit 82c99f7a81f28f8c1be5f701c8377d14c4075b10 upstream.
    
    Kaby Lake (and Coffee Lake) has PC8/PC9/PC10 residency counters.
    
    This patch updates the list of Kaby/Coffee Lake PMU event counters
    from the snb_cstates[] list of events to the hswult_cstates[]
    list of events, which keeps all previously supported events and
    also adds the PKG_C8, PKG_C9 and PKG_C10 residency counters.
    
    This allows user space tools to profile them through the perf interface.
    
    Signed-off-by: Harry Pan <harry.pan@intel.com>
    Cc: <stable@vger.kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: gs0622@gmail.com
    Link: http://lkml.kernel.org/r/20190424145033.1924-1-harry.pan@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2eeeb49027ed58f04b5ca5f805319dc418d398a
Author: NeilBrown <neilb@suse.com>
Date:   Fri Apr 5 11:34:40 2019 +1100

    sunrpc: don't mark uninitialised items as VALID.
    
    commit d58431eacb226222430940134d97bfd72f292fcd upstream.
    
    A recent commit added a call to cache_fresh_locked()
    when an expired item was found.
    The call sets the CACHE_VALID flag, so it is important
    that the item actually is valid.
    There are two ways it could be valid:
    1/ If ->update has been called to fill in relevant content
    2/ if CACHE_NEGATIVE is set, to say that content doesn't exist.
    
    An expired item that is waiting for an update will be neither.
    Setting CACHE_VALID will mean that a subsequent call to cache_put()
    will be likely to dereference uninitialised pointers.
    
    So we must make sure the item is valid, and we already have code to do
    that in try_to_negate_entry().  This takes the hash lock and so cannot
    be used directly, so take out the two lines that we need and use them.
    
    Now cache_fresh_locked() is certain to be called only on
    a valid item.
    
    Cc: stable@kernel.org # 2.6.35
    Fixes: 4ecd55ea0742 ("sunrpc: fix cache_head leak due to queued request")
    Signed-off-by: NeilBrown <neilb@suse.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d29f7c720c670e02bcf01a2600a6cdbdb414489
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Apr 22 12:34:24 2019 -0400

    nfsd: wake blocked file lock waiters before sending callback
    
    commit f456458e4d25a8962d0946891617c76cc3ff5fb9 upstream.
    
    When a blocked NFS lock is "awoken" we send a callback to the server and
    then wake any hosts waiting on it. If a client attempts to get a lock
    and then drops off the net, we could end up waiting for a long time
    until we end up waking locks blocked on that request.
    
    So, wake any other waiting lock requests before sending the callback.
    Do this by calling locks_delete_block in a new "prepare" phase for
    CB_NOTIFY_LOCK callbacks.
    
    URL: https://bugzilla.kernel.org/show_bug.cgi?id=203363
    Fixes: 16306a61d3b7 ("fs/locks: always delete_block after waiting.")
    Reported-by: Slawomir Pryczek <slawek1211@gmail.com>
    Cc: Neil Brown <neilb@suse.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6569ae328aa3e5b58a3b722538480bd5e766a869
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Apr 22 12:34:23 2019 -0400

    nfsd: wake waiters blocked on file_lock before deleting it
    
    commit 6aaafc43a4ecc5bc8a3f6a2811d5eddc996a97f3 upstream.
    
    After a blocked nfsd file_lock request is deleted, knfsd will send a
    callback to the client and then free the request. Commit 16306a61d3b7
    ("fs/locks: always delete_block after waiting.") changed it such that
    locks_delete_block is always called on a request after it is awoken,
    but that patch missed fixing up blocked nfsd request handling.
    
    Call locks_delete_block on the block to wake up any locks still blocked
    on the nfsd lock request before freeing it. Some of its callers already
    do this however, so just remove those calls.
    
    URL: https://bugzilla.kernel.org/show_bug.cgi?id=203363
    Fixes: 16306a61d3b7 ("fs/locks: always delete_block after waiting.")
    Reported-by: Slawomir Pryczek <slawek1211@gmail.com>
    Cc: Neil Brown <neilb@suse.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e4a20e631a711553bf381bcd0725a9e3ba0f139
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Fri Apr 5 08:54:37 2019 -0700

    nfsd: Don't release the callback slot unless it was actually held
    
    commit e6abc8caa6deb14be2a206253f7e1c5e37e9515b upstream.
    
    If there are multiple callbacks queued, waiting for the callback
    slot when the callback gets shut down, then they all currently
    end up acting as if they hold the slot, and call
    nfsd4_cb_sequence_done() resulting in interesting side-effects.
    
    In addition, the 'retry_nowait' path in nfsd4_cb_sequence_done()
    causes a loop back to nfsd4_cb_prepare() without first freeing the
    slot, which causes a deadlock when nfsd41_cb_get_slot() gets called
    a second time.
    
    This patch therefore adds a boolean to track whether or not the
    callback did pick up the slot, so that it can do the right thing
    in these 2 cases.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 870588487197dda790bf52a0100ba80a3269f9ef
Author: Yan, Zheng <zyan@redhat.com>
Date:   Thu Apr 18 11:24:57 2019 +0800

    ceph: fix ci->i_head_snapc leak
    
    commit 37659182bff1eeaaeadcfc8f853c6d2b6dbc3f47 upstream.
    
    We missed two places that i_wrbuffer_ref_head, i_wr_ref, i_dirty_caps
    and i_flushing_caps may change. When they are all zeros, we should free
    i_head_snapc.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/38224
    Reported-and-tested-by: Luis Henriques <lhenriques@suse.com>
    Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9061ef0ab17b4230da913f5923fb8cb006fac1e
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Apr 17 12:58:28 2019 -0400

    ceph: ensure d_name stability in ceph_dentry_hash()
    
    commit 76a495d666e5043ffc315695f8241f5e94a98849 upstream.
    
    Take the d_lock here to ensure that d_name doesn't change.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcd9cbffb98f862bd56389ca205ccf42cfc9cf31
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Apr 15 12:00:42 2019 -0400

    ceph: only use d_name directly when parent is locked
    
    commit 1bcb344086f3ecf8d6705f6d708441baa823beb3 upstream.
    
    Ben reported tripping the BUG_ON in create_request_message during some
    performance testing. Analysis of the vmcore showed that the length of
    the r_dentry->d_name string changed after we allocated the buffer, but
    before we encoded it.
    
    build_dentry_path returns pointers to d_name in the common case of
    non-snapped dentries, but this optimization isn't safe unless the parent
    directory is locked. When it isn't, have the code make a copy of the
    d_name while holding the d_lock.
    
    Cc: stable@vger.kernel.org
    Reported-by: Ben England <bengland@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e548c9702d46c13f33455fa8c3a19ba4b5794b8e
Author: Xie XiuQi <xiexiuqi@huawei.com>
Date:   Sat Apr 20 16:34:16 2019 +0800

    sched/numa: Fix a possible divide-by-zero
    
    commit a860fa7b96e1a1c974556327aa1aee852d434c21 upstream.
    
    sched_clock_cpu() may not be consistent between CPUs. If a task
    migrates to another CPU, then se.exec_start is set to that CPU's
    rq_clock_task() by update_stats_curr_start(). Specifically, the new
    value might be before the old value due to clock skew.
    
    So then if in numa_get_avg_runtime() the expression:
    
      'now - p->last_task_numa_placement'
    
    ends up as -1, then the divider '*period + 1' in task_numa_placement()
    is 0 and things go bang. Similar to update_curr(), check if time goes
    backwards to avoid this.
    
    [ peterz: Wrote new changelog. ]
    [ mingo: Tweaked the code comment. ]
    
    Signed-off-by: Xie XiuQi <xiexiuqi@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: cj.chengjian@huawei.com
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20190425080016.GX11158@hirez.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3e4c555ac868a0e4f2515f38d9f4188d9585c75
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 16 14:07:28 2019 +0300

    RDMA/ucontext: Fix regression with disassociate
    
    commit 67f269b37f9b4d52c5e7f97acea26c0852e9b8a1 upstream.
    
    When this code was consolidated the intention was that the VMA would
    become backed by anonymous zero pages after the zap_vma_pte - however this
    very subtly relied on setting the vm_ops = NULL and clearing the VM_SHARED
    bits to transform the VMA into an anonymous VMA. Since the vm_ops was
    removed this broke.
    
    Now userspace gets a SIGBUS if it touches the vma after disassociation.
    
    Instead of converting the VMA to anonymous provide a fault handler that
    puts a zero'd page into the VMA when user-space touches it after
    disassociation.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Andrea Arcangeli <aarcange@redhat.com>
    Fixes: 5f9794dc94f5 ("RDMA/ucontext: Add a core API for mmaping driver IO memory")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52c44c4e81b31974284fde64deb02c4e1a2bd66c
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 16 14:07:26 2019 +0300

    RDMA/mlx5: Use rdma_user_map_io for mapping BAR pages
    
    commit d5e560d3f72382ac4e3bfe4e0f0420e6a220b039 upstream.
    
    Since mlx5 supports device disassociate it must use this API for all
    BAR page mmaps, otherwise the pages can remain mapped after the device
    is unplugged causing a system crash.
    
    Cc: stable@vger.kernel.org
    Fixes: 5f9794dc94f5 ("RDMA/ucontext: Add a core API for mmaping driver IO memory")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Reviewed-by: Haggai Eran <haggaie@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92d6731e6a6f28a0b3e59cc034e448b4280bbc23
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 16 14:07:25 2019 +0300

    RDMA/mlx5: Do not allow the user to write to the clock page
    
    commit c660133c339f9ab684fdf568c0d51b9ae5e86002 upstream.
    
    The intent of this VMA was to be read-only from user space, but the
    VM_MAYWRITE masking was missed, so mprotect could make it writable.
    
    Cc: stable@vger.kernel.org
    Fixes: 5c99eaecb1fc ("IB/mlx5: Mmap the HCA's clock info to user-space")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Reviewed-by: Haggai Eran <haggaie@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4dba6bf743e44fd74223c40be29b4fb06ea2fad
Author: Josh Collier <josh.d.collier@intel.com>
Date:   Mon Apr 15 11:34:22 2019 -0700

    IB/rdmavt: Fix frwr memory registration
    
    commit 7c39f7f671d2acc0a1f39ebbbee4303ad499bbfa upstream.
    
    Current implementation was not properly handling frwr memory
    registrations. This was uncovered by commit 27f26cec761das ("xprtrdma:
    Plant XID in on-the-wire RDMA offset (FRWR)") in which xprtrdma, which is
    used for NFS over RDMA, started failing as it was the first ULP to modify
    the ib_mr iova resulting in the NFS server getting REMOTE ACCESS ERROR
    when attempting to perform RDMA Writes to the client.
    
    The fix is to properly capture the true iova, offset, and length in the
    call to ib_map_mr_sg, and then update the iova when processing the
    IB_WR_REG_MEM on the send queue.
    
    Fixes: a41081aa5936 ("IB/rdmavt: Add support for ib_map_mr_sg")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Josh Collier <josh.d.collier@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7e378ed703ee91b5a10b5f3d93b36a3659ab9bc
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Wed Apr 17 21:29:29 2019 -0700

    arm64: mm: Ensure tail of unaligned initrd is reserved
    
    commit d4d18e3ec6091843f607e8929a56723e28f393a6 upstream.
    
    In the event that the start address of the initrd is not aligned, but
    has an aligned size, the base + size will not cover the entire initrd
    image and there is a chance that the kernel will corrupt the tail of the
    image.
    
    By aligning the end of the initrd to a page boundary and then
    subtracting the adjusted start address the memblock reservation will
    cover all pages that contains the initrd.
    
    Fixes: c756c592e442 ("arm64: Utilize phys_initrd_start/phys_initrd_size")
    Cc: stable@vger.kernel.org
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5f06bf8f46ce22033bc4354ae05c916be87f501
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Thu Apr 25 22:23:51 2019 -0700

    mm: do not boost watermarks to avoid fragmentation for the DISCONTIG memory model
    
    commit 24512228b7a3f412b5a51f189df302616b021c33 upstream.
    
    Mikulas Patocka reported that commit 1c30844d2dfe ("mm: reclaim small
    amounts of memory when an external fragmentation event occurs") "broke"
    memory management on parisc.
    
    The machine is not NUMA but the DISCONTIG model creates three pgdats
    even though it's a UMA machine for the following ranges
    
            0) Start 0x0000000000000000 End 0x000000003fffffff Size   1024 MB
            1) Start 0x0000000100000000 End 0x00000001bfdfffff Size   3070 MB
            2) Start 0x0000004040000000 End 0x00000040ffffffff Size   3072 MB
    
    Mikulas reported:
    
            With the patch 1c30844d2, the kernel will incorrectly reclaim the
            first zone when it fills up, ignoring the fact that there are two
            completely free zones. Basiscally, it limits cache size to 1GiB.
    
            For example, if I run:
            # dd if=/dev/sda of=/dev/null bs=1M count=2048
    
            - with the proper kernel, there should be "Buffers - 2GiB"
            when this command finishes. With the patch 1c30844d2, buffers
            will consume just 1GiB or slightly more, because the kernel was
            incorrectly reclaiming them.
    
    The page allocator and reclaim makes assumptions that pgdats really
    represent NUMA nodes and zones represent ranges and makes decisions on
    that basis.  Watermark boosting for small pgdats leads to unexpected
    results even though this would have behaved reasonably on SPARSEMEM.
    
    DISCONTIG is essentially deprecated and even parisc plans to move to
    SPARSEMEM so there is no need to be fancy, this patch simply disables
    watermark boosting by default on DISCONTIGMEM.
    
    Link: http://lkml.kernel.org/r/20190419094335.GJ18914@techsingularity.net
    Fixes: 1c30844d2dfe ("mm: reclaim small amounts of memory when an external fragmentation event occurs")
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Tested-by: Mikulas Patocka <mpatocka@redhat.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: James Bottomley <James.Bottomley@hansenpartnership.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 655b464eeaa82821846d0b68d69550ef1d83b4e6
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Apr 23 22:03:18 2019 +0200

    trace: Fix preempt_enable_no_resched() abuse
    
    commit d6097c9e4454adf1f8f2c9547c2fa6060d55d952 upstream.
    
    Unless the very next line is schedule(), or implies it, one must not use
    preempt_enable_no_resched(). It can cause a preemption to go missing and
    thereby cause arbitrary delays, breaking the PREEMPT=y invariant.
    
    Link: http://lkml.kernel.org/r/20190423200318.GY14281@hirez.programming.kicks-ass.net
    
    Cc: Waiman Long <longman@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: the arch/x86 maintainers <x86@kernel.org>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: huang ying <huang.ying.caritas@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: stable@vger.kernel.org
    Fixes: 2c2d7329d8af ("tracing/ftrace: use preempt_enable_no_resched_notrace in ring_buffer_time_stamp()")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f73358dff40fc8e919b059d10531ee4605fc9bf
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Tue Apr 9 16:53:55 2019 +0200

    MIPS: scall64-o32: Fix indirect syscall number load
    
    commit 79b4a9cf0e2ea8203ce777c8d5cfa86c71eae86e upstream.
    
    Commit 4c21b8fd8f14 (MIPS: seccomp: Handle indirect system calls (o32))
    added indirect syscall detection for O32 processes running on MIPS64,
    but it did not work correctly for big endian kernel/processes. The
    reason is that the syscall number is loaded from ARG1 using the lw
    instruction while this is a 64-bit value, so zero is loaded instead of
    the syscall number.
    
    Fix the code by using the ld instruction instead. When running a 32-bit
    processes on a 64 bit CPU, the values are properly sign-extended, so it
    ensures the value passed to syscall_trace_enter is correct.
    
    Recent systemd versions with seccomp enabled whitelist the getpid
    syscall for their internal  processes (e.g. systemd-journald), but call
    it through syscall(SYS_getpid). This fix therefore allows O32 big endian
    systems with a 64-bit kernel to run recent systemd versions.
    
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Cc: <stable@vger.kernel.org> # v3.15+
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 928962e99694c00808834ea608c2db17ec66aab4
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Apr 25 22:23:44 2019 -0700

    lib/Kconfig.debug: fix build error without CONFIG_BLOCK
    
    commit ae3d6a323347940f0548bbb4b17f0bb2e9164169 upstream.
    
    If CONFIG_TEST_KMOD is set to M, while CONFIG_BLOCK is not set, XFS and
    BTRFS can not be compiled successly.
    
    Link: http://lkml.kernel.org/r/20190410075434.35220-1-yuehaibing@huawei.com
    Fixes: d9c6a72d6fa2 ("kmod: add test driver to stress test the module loader")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4ab3de10c84613735d55c5634927b8d38b777c9
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Thu Apr 25 22:23:41 2019 -0700

    zram: pass down the bvec we need to read into in the work struct
    
    commit e153abc0739ff77bd89c9ba1688cdb963464af97 upstream.
    
    When scheduling work item to read page we need to pass down the proper
    bvec struct which points to the page to read into.  Before this patch it
    uses a randomly initialized bvec (only if PAGE_SIZE != 4096) which is
    wrong.
    
    Note that without this patch on arch/kernel where PAGE_SIZE != 4096
    userspace could read random memory through a zram block device (thought
    userspace probably would have no control on the address being read).
    
    Link: http://lkml.kernel.org/r/20190408183219.26377-1-jglisse@redhat.com
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6093c0212d03c1e50f37ce579a26388b7442e3e
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Apr 10 15:47:54 2019 +0800

    gpio: eic: sprd: Fix incorrect irq type setting for the sync EIC
    
    commit 102bbe34b31c9159e714432afd64458f6f3876d7 upstream.
    
    When setting sync EIC as IRQ_TYPE_EDGE_BOTH type, we missed to set the
    SPRD_EIC_SYNC_INTMODE register to 0, which means detecting edge signals.
    
    Thus this patch fixes the issue.
    
    Fixes: 25518e024e3a ("gpio: Add Spreadtrum EIC driver support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bb4e85bbd34c65af2f0abebde0e6cab0f0b6504
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Apr 15 14:37:34 2019 +0800

    crypto: lrw - Fix atomic sleep when walking skcipher
    
    commit b257b48cd5830c5b1d0c347eb281f9c28056f881 upstream.
    
    When we perform a walk in the completion function, we need to ensure
    that it is atomic.
    
    Fixes: ac3c8f36c31d ("crypto: lrw - Do not use auxiliary buffer")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6506cdd4205b20e17dc0191fb00e02c48a146840
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Apr 15 14:35:19 2019 +0800

    crypto: xts - Fix atomic sleep when walking skcipher
    
    commit 44427c0fbc09b448b22410978a4ef6ee37599d25 upstream.
    
    When we perform a walk in the completion function, we need to ensure
    that it is atomic.
    
    Reported-by: syzbot+6f72c20560060c98b566@syzkaller.appspotmail.com
    Fixes: 78105c7e769b ("crypto: xts - Drop use of auxiliary buffer")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8659a04c77e2ca52ce2af42f7c50b49e690ffb19
Author: Jann Horn <jannh@google.com>
Date:   Thu Apr 4 23:59:25 2019 +0200

    tracing: Fix buffer_ref pipe ops
    
    commit b987222654f84f7b4ca95b3a55eca784cb30235b upstream.
    
    This fixes multiple issues in buffer_pipe_buf_ops:
    
     - The ->steal() handler must not return zero unless the pipe buffer has
       the only reference to the page. But generic_pipe_buf_steal() assumes
       that every reference to the pipe is tracked by the page's refcount,
       which isn't true for these buffers - buffer_pipe_buf_get(), which
       duplicates a buffer, doesn't touch the page's refcount.
       Fix it by using generic_pipe_buf_nosteal(), which refuses every
       attempted theft. It should be easy to actually support ->steal, but the
       only current users of pipe_buf_steal() are the virtio console and FUSE,
       and they also only use it as an optimization. So it's probably not worth
       the effort.
     - The ->get() and ->release() handlers can be invoked concurrently on pipe
       buffers backed by the same struct buffer_ref. Make them safe against
       concurrency by using refcount_t.
     - The pointers stored in ->private were only zeroed out when the last
       reference to the buffer_ref was dropped. As far as I know, this
       shouldn't be necessary anyway, but if we do it, let's always do it.
    
    Link: http://lkml.kernel.org/r/20190404215925.253531-1-jannh@google.com
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: stable@vger.kernel.org
    Fixes: 73a757e63114d ("ring-buffer: Return reader page back into existing ring buffer")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68ab802fb8ccc6cbd953aa631bba7d98bc491996
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Fri Apr 19 21:22:59 2019 -0500

    tracing: Fix a memory leak by early error exit in trace_pid_write()
    
    commit 91862cc7867bba4ee5c8fcf0ca2f1d30427b6129 upstream.
    
    In trace_pid_write(), the buffer for trace parser is allocated through
    kmalloc() in trace_parser_get_init(). Later on, after the buffer is used,
    it is then freed through kfree() in trace_parser_put(). However, it is
    possible that trace_pid_write() is terminated due to unexpected errors,
    e.g., ENOMEM. In that case, the allocated buffer will not be freed, which
    is a memory leak bug.
    
    To fix this issue, free the allocated buffer when an error is encountered.
    
    Link: http://lkml.kernel.org/r/1555726979-15633-1-git-send-email-wang6495@umn.edu
    
    Fixes: f4d34a87e9c10 ("tracing: Use pid bitmap instead of a pid array for set_event_pid")
    Cc: stable@vger.kernel.org
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90b70b3ed31b4dcdc0cce09931c20002d2d6c2d5
Author: Frank Sorenson <sorenson@redhat.com>
Date:   Tue Apr 16 08:37:27 2019 -0500

    cifs: do not attempt cifs operation on smb2+ rename error
    
    commit 652727bbe1b17993636346716ae5867627793647 upstream.
    
    A path-based rename returning EBUSY will incorrectly try opening
    the file with a cifs (NT Create AndX) operation on an smb2+ mount,
    which causes the server to force a session close.
    
    If the mount is smb2+, skip the fallback.
    
    Signed-off-by: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6302b845f2dc3c3298f77b6bd2b754e35837a4d
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Wed Apr 10 15:37:47 2019 -0400

    cifs: fix page reference leak with readv/writev
    
    commit 13f5938d8264b5501368523c4513ff26608a33e8 upstream.
    
    CIFS can leak pages reference gotten through GUP (get_user_pages*()
    through iov_iter_get_pages()). This happen if cifs_send_async_read()
    or cifs_write_from_iter() calls fail from within __cifs_readv() and
    __cifs_writev() respectively. This patch move page unreference to
    cifs_aio_ctx_release() which will happens on all code paths this is
    all simpler to follow for correctness.
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Cc: Steve French <sfrench@samba.org>
    Cc: linux-cifs@vger.kernel.org
    Cc: samba-technical@lists.samba.org
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: linux-fsdevel@vger.kernel.org
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62cf691cdf74c40fb194143e295204f339194b11
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Tue Apr 23 16:39:45 2019 +1000

    cifs: fix memory leak in SMB2_read
    
    [ Upstream commit 05fd5c2c61732152a6bddc318aae62d7e436629b ]
    
    Commit 088aaf17aa79300cab14dbee2569c58cfafd7d6e introduced a leak where
    if SMB2_read() returned an error we would return without freeing the
    request buffer.
    
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34fb6f5eb2cd341a0807b7a2ff0f0a3ebfa45925
Author: Paolo Valente <paolo.valente@linaro.org>
Date:   Wed Apr 10 10:38:33 2019 +0200

    block, bfq: fix use after free in bfq_bfqq_expire
    
    [ Upstream commit eed47d19d9362bdd958e4ab56af480b9dbf6b2b6 ]
    
    The function bfq_bfqq_expire() invokes the function
    __bfq_bfqq_expire(), and the latter may free the in-service bfq-queue.
    If this happens, then no other instruction of bfq_bfqq_expire() must
    be executed, or a use-after-free will occur.
    
    Basing on the assumption that __bfq_bfqq_expire() invokes
    bfq_put_queue() on the in-service bfq-queue exactly once, the queue is
    assumed to be freed if its refcounter is equal to one right before
    invoking __bfq_bfqq_expire().
    
    But, since commit 9dee8b3b057e ("block, bfq: fix queue removal from
    weights tree") this assumption is false. __bfq_bfqq_expire() may also
    invoke bfq_weights_tree_remove() and, since commit 9dee8b3b057e
    ("block, bfq: fix queue removal from weights tree"), also
    the latter function may invoke bfq_put_queue(). So __bfq_bfqq_expire()
    may invoke bfq_put_queue() twice, and this is the actual case where
    the in-service queue may happen to be freed.
    
    To address this issue, this commit moves the check on the refcounter
    of the queue right around the last bfq_put_queue() that may be invoked
    on the queue.
    
    Fixes: 9dee8b3b057e ("block, bfq: fix queue removal from weights tree")
    Reported-by: Dmitrii Tcvetkov <demfloro@demfloro.ru>
    Reported-by: Douglas Anderson <dianders@chromium.org>
    Tested-by: Dmitrii Tcvetkov <demfloro@demfloro.ru>
    Tested-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41e09d7eab076a3368449470eb14de195bf5de29
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Apr 25 22:24:05 2019 -0700

    fs/proc/proc_sysctl.c: Fix a NULL pointer dereference
    
    [ Upstream commit 89189557b47b35683a27c80ee78aef18248eefb4 ]
    
    Syzkaller report this:
    
      sysctl could not get directory: /net//bridge -12
      kasan: CONFIG_KASAN_INLINE enabled
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      general protection fault: 0000 [#1] SMP KASAN PTI
      CPU: 1 PID: 7027 Comm: syz-executor.0 Tainted: G         C        5.1.0-rc3+ #8
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
      RIP: 0010:__write_once_size include/linux/compiler.h:220 [inline]
      RIP: 0010:__rb_change_child include/linux/rbtree_augmented.h:144 [inline]
      RIP: 0010:__rb_erase_augmented include/linux/rbtree_augmented.h:186 [inline]
      RIP: 0010:rb_erase+0x5f4/0x19f0 lib/rbtree.c:459
      Code: 00 0f 85 60 13 00 00 48 89 1a 48 83 c4 18 5b 5d 41 5c 41 5d 41 5e 41 5f c3 48 89 f2 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 75 0c 00 00 4d 85 ed 4c 89 2e 74 ce 4c 89 ea 48
      RSP: 0018:ffff8881bb507778 EFLAGS: 00010206
      RAX: dffffc0000000000 RBX: ffff8881f224b5b8 RCX: ffffffff818f3f6a
      RDX: 000000000000000a RSI: 0000000000000050 RDI: ffff8881f224b568
      RBP: 0000000000000000 R08: ffffed10376a0ef4 R09: ffffed10376a0ef4
      R10: 0000000000000001 R11: ffffed10376a0ef4 R12: ffff8881f224b558
      R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
      FS:  00007f3e7ce13700(0000) GS:ffff8881f7300000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007fd60fbe9398 CR3: 00000001cb55c001 CR4: 00000000007606e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
       erase_entry fs/proc/proc_sysctl.c:178 [inline]
       erase_header+0xe3/0x160 fs/proc/proc_sysctl.c:207
       start_unregistering fs/proc/proc_sysctl.c:331 [inline]
       drop_sysctl_table+0x558/0x880 fs/proc/proc_sysctl.c:1631
       get_subdir fs/proc/proc_sysctl.c:1022 [inline]
       __register_sysctl_table+0xd65/0x1090 fs/proc/proc_sysctl.c:1335
       br_netfilter_init+0x68/0x1000 [br_netfilter]
       do_one_initcall+0xbc/0x47d init/main.c:901
       do_init_module+0x1b5/0x547 kernel/module.c:3456
       load_module+0x6405/0x8c10 kernel/module.c:3804
       __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
       do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      Modules linked in: br_netfilter(+) backlight comedi(C) hid_sensor_hub max3100 ti_ads8688 udc_core fddi snd_mona leds_gpio rc_streamzap mtd pata_netcell nf_log_common rc_winfast udp_tunnel snd_usbmidi_lib snd_usb_toneport snd_usb_line6 snd_rawmidi snd_seq_device snd_hwdep videobuf2_v4l2 videobuf2_common videodev media videobuf2_vmalloc videobuf2_memops rc_gadmei_rm008z 8250_of smm665 hid_tmff hid_saitek hwmon_vid rc_ati_tv_wonder_hd_600 rc_core pata_pdc202xx_old dn_rtmsg as3722 ad714x_i2c ad714x snd_soc_cs4265 hid_kensington panel_ilitek_ili9322 drm drm_panel_orientation_quirks ipack cdc_phonet usbcore phonet hid_jabra hid extcon_arizona can_dev industrialio_triggered_buffer kfifo_buf industrialio adm1031 i2c_mux_ltc4306 i2c_mux ipmi_msghandler mlxsw_core snd_soc_cs35l34 snd_soc_core snd_pcm_dmaengine snd_pcm snd_timer ac97_bus snd_compress snd soundcore gpio_da9055 uio ecdh_generic mdio_thunder of_mdio fixed_phy libphy mdio_cavium iptable_security iptable_raw iptable_mangle
       iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun joydev mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel ide_pci_generic piix aes_x86_64 crypto_simd cryptd ide_core glue_helper input_leds psmouse intel_agp intel_gtt serio_raw ata_generic i2c_piix4 agpgart pata_acpi parport_pc parport floppy rtc_cmos sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: br_netfilter]
      Dumping ftrace buffer:
         (ftrace buffer empty)
      ---[ end trace 68741688d5fbfe85 ]---
    
    commit 23da9588037e ("fs/proc/proc_sysctl.c: fix NULL pointer
    dereference in put_links") forgot to handle start_unregistering() case,
    while header->parent is NULL, it calls erase_header() and as seen in the
    above syzkaller call trace, accessing &header->parent->root will trigger
    a NULL pointer dereference.
    
    As that commit explained, there is also no need to call
    start_unregistering() if header->parent is NULL.
    
    Link: http://lkml.kernel.org/r/20190409153622.28112-1-yuehaibing@huawei.com
    Fixes: 23da9588037e ("fs/proc/proc_sysctl.c: fix NULL pointer dereference in put_links")
    Fixes: 0e47c99d7fe25 ("sysctl: Replace root_list with links between sysctl_table_sets")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 685550ad1192cd848439034c9e371322d6160b6e
Author: Kailang Yang <kailang@realtek.com>
Date:   Wed Apr 3 15:31:49 2019 +0800

    ALSA: hda/realtek - Move to ACT_INIT state
    
    [ Upstream commit 8983eb602af511fc5822f5ff4a82074c68816fd9 ]
    
    It will be lose Mic JD state when Chrome OS boot and headset was plugged.
    Just Implement of reset combo jack JD verb for ACT_PRE_PROBE state.
    Intel test result was also failed.
    It test passed until changed the initial state to ACT_INIT.
    Mic JD will show every time.
    This patch also changed the model name as 'alc-chrome-book' for
    application of Chrome OS.
    
    Fixes: 10f5b1b85ed1 ("ALSA: hda/realtek - Fixed Headset Mic JD not stable")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6f3aa978866902ba23b3b38437cc41a8eced565
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Apr 4 12:20:05 2019 +0000

    powerpc/vdso32: fix CLOCK_MONOTONIC on PPC64
    
    [ Upstream commit dd9a994fc68d196a052b73747e3366c57d14a09e ]
    
    Commit b5b4453e7912 ("powerpc/vdso64: Fix CLOCK_MONOTONIC
    inconsistencies across Y2038") changed the type of wtom_clock_sec
    to s64 on PPC64. Therefore, VDSO32 needs to read it with a 4 bytes
    shift in order to retrieve the lower part of it.
    
    Fixes: b5b4453e7912 ("powerpc/vdso64: Fix CLOCK_MONOTONIC inconsistencies across Y2038")
    Reported-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92d4af2766a1645763c15c738223bb0f9254329c
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Fri Mar 1 10:09:55 2019 +0200

    intel_th: gth: Fix an off-by-one in output unassigning
    
    [ Upstream commit 91d3f8a629849968dc91d6ce54f2d46abf4feb7f ]
    
    Commit 9ed3f22223c3 ("intel_th: Don't reference unassigned outputs")
    fixes a NULL dereference for all masters except the last one ("256+"),
    which keeps the stale pointer after the output driver had been unassigned.
    
    Fix the off-by-one.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 9ed3f22223c3 ("intel_th: Don't reference unassigned outputs")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ccd99339030d617498d801d828594898c6f5bf6
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Mar 14 10:50:20 2019 +0100

    netfilter: nf_tables: bogus EBUSY in helper removal from transaction
    
    [ Upstream commit 8ffcd32f64633926163cdd07a7d295c500a947d1 ]
    
    Proper use counter updates when activating and deactivating the object,
    otherwise, this hits bogus EBUSY error.
    
    Fixes: cd5125d8f518 ("netfilter: nf_tables: split set destruction in deactivate and destroy phase")
    Reported-by: Laura Garcia <nevola@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b31245480624a4fb8de558d2565b765d1d23811
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Mar 8 15:30:03 2019 +0100

    netfilter: nf_tables: bogus EBUSY when deleting set after flush
    
    [ Upstream commit 273fe3f1006ea5ebc63d6729e43e8e45e32b256a ]
    
    Set deletion after flush coming in the same batch results in EBUSY. Add
    set use counter to track the number of references to this set from
    rules. We cannot rely on the list of bindings for this since such list
    is still populated from the preparation phase.
    
    Reported-by: Václav Zindulka <vaclav.zindulka@tlapnet.cz>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
