commit daefdc9eb24bfa11ab77a4b2a9c3923f1051fe0b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 2 08:48:14 2020 +0100

    Linux 4.19.161
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201201084647.751612010@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4584fc5a709540f1d57bf870a6116c6c673d4df0
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Nov 19 12:00:40 2020 -0500

    USB: core: Fix regression in Hercules audio card
    
    commit 184eead057cc7e803558269babc1f2cfb9113ad1 upstream
    
    Commit 3e4f8e21c4f2 ("USB: core: fix check for duplicate endpoints")
    aimed to make the USB stack more reliable by detecting and skipping
    over endpoints that are duplicated between interfaces.  This caused a
    regression for a Hercules audio card (reported as Bugzilla #208357),
    which contains such non-compliant duplications.  Although the
    duplications are harmless, skipping the valid endpoints prevented the
    device from working.
    
    This patch fixes the regression by adding ENDPOINT_IGNORE quirks for
    the Hercules card, telling the kernel to ignore the invalid duplicate
    endpoints and thereby allowing the valid endpoints to be used as
    intended.
    
    Fixes: 3e4f8e21c4f2 ("USB: core: fix check for duplicate endpoints")
    CC: <stable@vger.kernel.org>
    Reported-by: Alexander Chalikiopoulos <bugzilla.kernel.org@mrtoasted.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201119170040.GA576844@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [sudip: use usb_endpoint_blacklist and USB_QUIRK_ENDPOINT_BLACKLIST]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dee063b296b6db5b7a205a26c1917917459141ea
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Sat Oct 31 03:11:28 2020 +0800

    x86/resctrl: Add necessary kernfs_put() calls to prevent refcount leak
    
    commit 758999246965eeb8b253d47e72f7bfe508804b16 upstream.
    
    On resource group creation via a mkdir an extra kernfs_node reference is
    obtained by kernfs_get() to ensure that the rdtgroup structure remains
    accessible for the rdtgroup_kn_unlock() calls where it is removed on
    deletion. Currently the extra kernfs_node reference count is only
    dropped by kernfs_put() in rdtgroup_kn_unlock() while the rdtgroup
    structure is removed in a few other locations that lack the matching
    reference drop.
    
    In call paths of rmdir and umount, when a control group is removed,
    kernfs_remove() is called to remove the whole kernfs nodes tree of the
    control group (including the kernfs nodes trees of all child monitoring
    groups), and then rdtgroup structure is freed by kfree(). The rdtgroup
    structures of all child monitoring groups under the control group are
    freed by kfree() in free_all_child_rdtgrp().
    
    Before calling kfree() to free the rdtgroup structures, the kernfs node
    of the control group itself as well as the kernfs nodes of all child
    monitoring groups still take the extra references which will never be
    dropped to 0 and the kernfs nodes will never be freed. It leads to
    reference count leak and kernfs_node_cache memory leak.
    
    For example, reference count leak is observed in these two cases:
      (1) mount -t resctrl resctrl /sys/fs/resctrl
          mkdir /sys/fs/resctrl/c1
          mkdir /sys/fs/resctrl/c1/mon_groups/m1
          umount /sys/fs/resctrl
    
      (2) mkdir /sys/fs/resctrl/c1
          mkdir /sys/fs/resctrl/c1/mon_groups/m1
          rmdir /sys/fs/resctrl/c1
    
    The same reference count leak issue also exists in the error exit paths
    of mkdir in mkdir_rdt_prepare() and rdtgroup_mkdir_ctrl_mon().
    
    Fix this issue by following changes to make sure the extra kernfs_node
    reference on rdtgroup is dropped before freeing the rdtgroup structure.
      (1) Introduce rdtgroup removal helper rdtgroup_remove() to wrap up
      kernfs_put() and kfree().
    
      (2) Call rdtgroup_remove() in rdtgroup removal path where the rdtgroup
      structure is about to be freed by kfree().
    
      (3) Call rdtgroup_remove() or kernfs_put() as appropriate in the error
      exit paths of mkdir where an extra reference is taken by kernfs_get().
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    in older stable trees.
    
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: e02737d5b826 ("x86/intel_rdt: Add tasks files")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1604085088-31707-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e06f39d509816bd60c21708a7cc6847a73110225
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Sat Oct 31 03:10:53 2020 +0800

    x86/resctrl: Remove superfluous kernfs_get() calls to prevent refcount leak
    
    commit fd8d9db3559a29fd737bcdb7c4fcbe1940caae34 upstream.
    
    Willem reported growing of kernfs_node_cache entries in slabtop when
    repeatedly creating and removing resctrl subdirectories as well as when
    repeatedly mounting and unmounting the resctrl filesystem.
    
    On resource group (control as well as monitoring) creation via a mkdir
    an extra kernfs_node reference is obtained to ensure that the rdtgroup
    structure remains accessible for the rdtgroup_kn_unlock() calls where it
    is removed on deletion. The kernfs_node reference count is dropped by
    kernfs_put() in rdtgroup_kn_unlock().
    
    With the above explaining the need for one kernfs_get()/kernfs_put()
    pair in resctrl there are more places where a kernfs_node reference is
    obtained without a corresponding release. The excessive amount of
    reference count on kernfs nodes will never be dropped to 0 and the
    kernfs nodes will never be freed in the call paths of rmdir and umount.
    It leads to reference count leak and kernfs_node_cache memory leak.
    
    Remove the superfluous kernfs_get() calls and expand the existing
    comments surrounding the remaining kernfs_get()/kernfs_put() pair that
    remains in use.
    
    Superfluous kernfs_get() calls are removed from two areas:
    
      (1) In call paths of mount and mkdir, when kernfs nodes for "info",
      "mon_groups" and "mon_data" directories and sub-directories are
      created, the reference count of newly created kernfs node is set to 1.
      But after kernfs_create_dir() returns, superfluous kernfs_get() are
      called to take an additional reference.
    
      (2) kernfs_get() calls in rmdir call paths.
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    for older stable trees.
    
    Fixes: 17eafd076291 ("x86/intel_rdt: Split resource group removal in two")
    Fixes: 4af4a88e0c92 ("x86/intel_rdt/cqm: Add mount,umount support")
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: d89b7379015f ("x86/intel_rdt/cqm: Add mon_data")
    Fixes: c7d9aac61311 ("x86/intel_rdt/cqm: Add mkdir support for RDT monitoring")
    Fixes: 5dc1d5c6bac2 ("x86/intel_rdt: Simplify info and base file lists")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Fixes: 4e978d06dedb ("x86/intel_rdt: Add "info" files to resctrl file system")
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Tested-by: Willem de Bruijn <willemb@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1604085053-31639-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 474ba4eb744862295e41d898dea241ec4caf9897
Author: Anand K Mistry <amistry@google.com>
Date:   Tue Nov 10 12:33:53 2020 +1100

    x86/speculation: Fix prctl() when spectre_v2_user={seccomp,prctl},ibpb
    
    commit 33fc379df76b4991e5ae312f07bcd6820811971e upstream.
    
    When spectre_v2_user={seccomp,prctl},ibpb is specified on the command
    line, IBPB is force-enabled and STIPB is conditionally-enabled (or not
    available).
    
    However, since
    
      21998a351512 ("x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.")
    
    the spectre_v2_user_ibpb variable is set to SPECTRE_V2_USER_{PRCTL,SECCOMP}
    instead of SPECTRE_V2_USER_STRICT, which is the actual behaviour.
    Because the issuing of IBPB relies on the switch_mm_*_ibpb static
    branches, the mitigations behave as expected.
    
    Since
    
      1978b3a53a74 ("x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP")
    
    this discrepency caused the misreporting of IB speculation via prctl().
    
    On CPUs with STIBP always-on and spectre_v2_user=seccomp,ibpb,
    prctl(PR_GET_SPECULATION_CTRL) would return PR_SPEC_PRCTL |
    PR_SPEC_ENABLE instead of PR_SPEC_DISABLE since both IBPB and STIPB are
    always on. It also allowed prctl(PR_SET_SPECULATION_CTRL) to set the IB
    speculation mode, even though the flag is ignored.
    
    Similarly, for CPUs without SMT, prctl(PR_GET_SPECULATION_CTRL) should
    also return PR_SPEC_DISABLE since IBPB is always on and STIBP is not
    available.
    
     [ bp: Massage commit message. ]
    
    Fixes: 21998a351512 ("x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.")
    Fixes: 1978b3a53a74 ("x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP")
    Signed-off-by: Anand K Mistry <amistry@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201110123349.1.Id0cbf996d2151f4c143c90f9028651a5b49a5908@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37de7cebcf548ebab2e59adf743d8fce386d8add
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 17 10:16:29 2020 +0800

    usb: gadget: Fix memleak in gadgetfs_fill_super
    
    commit 87bed3d7d26c974948a3d6e7176f304b2d41272b upstream.
    
    usb_get_gadget_udc_name will alloc memory for CHIP
    in "Enomem" branch. we should free it before error
    returns to prevent memleak.
    
    Fixes: 175f712119c57 ("usb: gadget: provide interface for legacy gadgets to get UDC name")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201117021629.1470544-3-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c08e7c246cf4ed205d2329249920fd762c5645d
Author: penghao <penghao@uniontech.com>
Date:   Wed Nov 18 20:30:39 2020 +0800

    USB: quirks: Add USB_QUIRK_DISCONNECT_SUSPEND quirk for Lenovo A630Z TIO built-in usb-audio card
    
    commit 9ca57518361418ad5ae7dc38a2128fbf4855e1a2 upstream.
    
    Add a USB_QUIRK_DISCONNECT_SUSPEND quirk for the Lenovo TIO built-in
    usb-audio. when A630Z going into S3,the system immediately wakeup 7-8
    seconds later by usb-audio disconnect interrupt to avoids the issue.
    eg dmesg:
    ....
    [  626.974091 ] usb 7-1.1: USB disconnect, device number 3
    ....
    ....
    [ 1774.486691] usb 7-1.1: new full-speed USB device number 5 using xhci_hcd
    [ 1774.947742] usb 7-1.1: New USB device found, idVendor=17ef, idProduct=a012, bcdDevice= 0.55
    [ 1774.956588] usb 7-1.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
    [ 1774.964339] usb 7-1.1: Product: Thinkcentre TIO24Gen3 for USB-audio
    [ 1774.970999] usb 7-1.1: Manufacturer: Lenovo
    [ 1774.975447] usb 7-1.1: SerialNumber: 000000000000
    [ 1775.048590] usb 7-1.1: 2:1: cannot get freq at ep 0x1
    .......
    Seeking a better fix, we've tried a lot of things, including:
     - Check that the device's power/wakeup is disabled
     - Check that remote wakeup is off at the USB level
     - All the quirks in drivers/usb/core/quirks.c
       e.g. USB_QUIRK_RESET_RESUME,
            USB_QUIRK_RESET,
            USB_QUIRK_IGNORE_REMOTE_WAKEUP,
            USB_QUIRK_NO_LPM.
    
    but none of that makes any difference.
    
    There are no errors in the logs showing any suspend/resume-related issues.
    When the system wakes up due to the modem, log-wise it appears to be a
    normal resume.
    
    Introduce a quirk to disable the port during suspend when the modem is
    detected.
    
    Signed-off-by: penghao <penghao@uniontech.com>
    Link: https://lore.kernel.org/r/20201118123039.11696-1-penghao@uniontech.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b8402862fe46756e3160853aeb8baa072e69ca5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 17 10:16:28 2020 +0800

    usb: gadget: f_midi: Fix memleak in f_midi_alloc
    
    commit e7694cb6998379341fd9bf3bd62b48c4e6a79385 upstream.
    
    In the error path, if midi is not null, we should
    free the midi->id if necessary to prevent memleak.
    
    Fixes: b85e9de9e818d ("usb: gadget: f_midi: convert to new function interface with backward compatibility")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201117021629.1470544-2-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfd888ee5db1488f2bbbd370348879e703398760
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Nov 19 12:02:28 2020 -0500

    USB: core: Change %pK for __user pointers to %px
    
    commit f3bc432aa8a7a2bfe9ebb432502be5c5d979d7fe upstream.
    
    Commit 2f964780c03b ("USB: core: replace %p with %pK") used the %pK
    format specifier for a bunch of __user pointers.  But as the 'K' in
    the specifier indicates, it is meant for kernel pointers.  The reason
    for the %pK specifier is to avoid leaks of kernel addresses, but when
    the pointer is to an address in userspace the security implications
    are minimal.  In particular, no kernel information is leaked.
    
    This patch changes the __user %pK specifiers (used in a bunch of
    debugging output lines) to %px, which will always print the actual
    address with no mangling.  (Notably, there is no printk format
    specifier particularly intended for __user pointers.)
    
    Fixes: 2f964780c03b ("USB: core: replace %p with %pK")
    CC: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201119170228.GB576844@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dd3e48e69155ccd3dcc81e629217900bc560118
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Nov 27 14:48:46 2020 +0900

    perf probe: Fix to die_entrypc() returns error correctly
    
    [ Upstream commit ab4200c17ba6fe71d2da64317aae8a8aa684624c ]
    
    Fix die_entrypc() to return error correctly if the DIE has no
    DW_AT_ranges attribute. Since dwarf_ranges() will treat the case as an
    empty ranges and return 0, we have to check it by ourselves.
    
    Fixes: 91e2f539eeda ("perf probe: Fix to show function entry line as probe-able")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Cc: Thomas Richter <tmricht@linux.ibm.com>
    Link: http://lore.kernel.org/lkml/160645612634.2824037.5284932731175079426.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cae58721e4f8d881515b9aecc8abac1577686b87
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Nov 24 19:47:38 2020 +0100

    can: m_can: fix nominal bitiming tseg2 min for version >= 3.1
    
    [ Upstream commit e3409e4192535fbcc86a84b7a65d9351f46039ec ]
    
    At lest the revision 3.3.0 of the bosch m_can IP core specifies that valid
    register values for "Nominal Time segment after sample point (NTSEG2)" are from
    1 to 127. As the hardware uses a value of one more than the programmed value,
    mean tseg2_min is 2.
    
    This patch fixes the tseg2_min value accordingly.
    
    Cc: Dan Murphy <dmurphy@ti.com>
    Cc: Mario Huettel <mario.huettel@gmx.net>
    Acked-by: Sriram Dash <sriram.dash@samsung.com>
    Link: https://lore.kernel.org/r/20201124190751.3972238-1-mkl@pengutronix.de
    Fixes: b03cfc5bb0e1 ("can: m_can: Enable M_CAN version dependent initialization")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e41d7a7dc67b876a000495498593f7833d88b0aa
Author: Kaixu Xia <kaixuxia@tencent.com>
Date:   Sun Nov 22 13:49:37 2020 +0800

    platform/x86: toshiba_acpi: Fix the wrong variable assignment
    
    [ Upstream commit 2a72c46ac4d665614faa25e267c3fb27fb729ed7 ]
    
    The commit 78429e55e4057 ("platform/x86: toshiba_acpi: Clean up
    variable declaration") cleans up variable declaration in
    video_proc_write(). Seems it does the variable assignment in the
    wrong place, this results in dead code and changes the source code
    logic. Fix it by doing the assignment at the beginning of the funciton.
    
    Fixes: 78429e55e4057 ("platform/x86: toshiba_acpi: Clean up variable declaration")
    Reported-by: Tosk Robot <tencent_os_robot@tencent.com>
    Signed-off-by: Kaixu Xia <kaixuxia@tencent.com>
    Link: https://lore.kernel.org/r/1606024177-16481-1-git-send-email-kaixuxia@tencent.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b50485e5d8b7a847a3a041b76f52ff48f1c3f65
Author: Benjamin Berg <bberg@redhat.com>
Date:   Mon Nov 23 14:21:57 2020 +0100

    platform/x86: thinkpad_acpi: Send tablet mode switch at wakeup time
    
    [ Upstream commit e40cc1b476d60f22628741e53cf3446a29e6e6b9 ]
    
    The lid state may change while the machine is suspended. As such, we may
    need to re-check the state at wake-up time (at least when waking up from
    hibernation).
    Add the appropriate call to the resume handler in order to sync the
    SW_TABLET_MODE switch state with the hardware state.
    
    Fixes: dda3ec0aa631 ("platform/x86: thinkpad_acpi: Implement tablet mode using GMMS method")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=210269
    Signed-off-by: Benjamin Berg <bberg@redhat.com>
    Acked-by: Henrique de Moraes Holschuh <hnh@hmh.eng.br>
    Link: https://lore.kernel.org/r/20201123132157.866303-1-benjamin@sipsolutions.net
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4446737da080809caedab79c2ea9821adc6de0a
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Thu Nov 19 14:03:17 2020 +0100

    can: gs_usb: fix endianess problem with candleLight firmware
    
    [ Upstream commit 4ba1cb39fce4464151517a37ce0ac0a1a3f580d6 ]
    
    The firmware on the original USB2CAN by Geschwister Schneider Technologie
    Entwicklungs- und Vertriebs UG exchanges all data between the host and the
    device in host byte order. This is done with the struct
    gs_host_config::byte_order member, which is sent first to indicate the desired
    byte order.
    
    The widely used open source firmware candleLight doesn't support this feature
    and exchanges the data in little endian byte order. This breaks if a device
    with candleLight firmware is used on big endianess systems.
    
    To fix this problem, all u32 (but not the struct gs_host_frame::echo_id, which
    is a transparent cookie) are converted to __le32.
    
    Cc: Maximilian Schneider <max@schneidersoft.net>
    Cc: Hubert Denkmair <hubert@denkmair.de>
    Reported-by: Michael Rausch <mr@netadair.de>
    Link: https://lore.kernel.org/r/b58aace7-61f3-6df7-c6df-69fee2c66906@netadair.de
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Link: https://lore.kernel.org/r/20201120103818.3386964-1-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db9e8d33b066d7022a4ed1c8fa16b6496cd651c3
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Nov 25 08:45:55 2020 +0100

    efivarfs: revert "fix memory leak in efivarfs_create()"
    
    [ Upstream commit ff04f3b6f2e27f8ae28a498416af2a8dd5072b43 ]
    
    The memory leak addressed by commit fe5186cf12e3 is a false positive:
    all allocations are recorded in a linked list, and freed when the
    filesystem is unmounted. This leads to double frees, and as reported
    by David, leads to crashes if SLUB is configured to self destruct when
    double frees occur.
    
    So drop the redundant kfree() again, and instead, mark the offending
    pointer variable so the allocation is ignored by kmemleak.
    
    Cc: Vamshi K Sthambamkadi <vamshi.k.sthambamkadi@gmail.com>
    Fixes: fe5186cf12e3 ("efivarfs: fix memory leak in efivarfs_create()")
    Reported-by: David Laight <David.Laight@aculab.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6172283a4706aef3136d704e27b8446e879f010
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Fri Nov 13 15:06:04 2020 +0000

    optee: add writeback to valid memory type
    
    [ Upstream commit 853735e404244f5496cdb6188c5ed9a0f9627ee6 ]
    
    Only in smp systems the cache policy is setup as write alloc, in
    single cpu systems the cache policy is set as writeback and it is
    normal memory, so, it should pass the is_normal_memory check in the
    share memory registration.
    
    Add the right condition to make it work in no smp systems.
    
    Fixes: cdbcf83d29c1 ("tee: optee: check type of registered shared memory")
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f862c859218200fa2d4f22f8d2c5bfbbd09a53b9
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Mon Nov 23 13:35:46 2020 -0600

    ibmvnic: fix NULL pointer dereference in ibmvic_reset_crq
    
    [ Upstream commit 0e435befaea45f7ea58682eecab5e37e05b2ce65 ]
    
    crq->msgs could be NULL if the previous reset did not complete after
    freeing crq->msgs. Check for NULL before dereferencing them.
    
    Snippet of call trace:
    ...
    ibmvnic 30000003 env3 (unregistering): Releasing sub-CRQ
    ibmvnic 30000003 env3 (unregistering): Releasing CRQ
    BUG: Kernel NULL pointer dereference on read at 0x00000000
    Faulting instruction address: 0xc0000000000c1a30
    Oops: Kernel access of bad area, sig: 11 [#1]
    LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
    Modules linked in: ibmvnic(E-) rpadlpar_io rpaphp xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nf_tables xsk_diag tcp_diag udp_diag tun raw_diag inet_diag unix_diag bridge af_packet_diag netlink_diag stp llc rfkill sunrpc pseries_rng xts vmx_crypto uio_pdrv_genirq uio binfmt_misc ip_tables xfs libcrc32c sd_mod t10_pi sg ibmvscsi ibmveth scsi_transport_srp dm_mirror dm_region_hash dm_log dm_mod [last unloaded: ibmvnic]
    CPU: 20 PID: 8426 Comm: kworker/20:0 Tainted: G            E     5.10.0-rc1+ #12
    Workqueue: events __ibmvnic_reset [ibmvnic]
    NIP:  c0000000000c1a30 LR: c008000001b00c18 CTR: 0000000000000400
    REGS: c00000000d05b7a0 TRAP: 0380   Tainted: G            E      (5.10.0-rc1+)
    MSR:  800000000280b033 <SF,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 44002480  XER: 20040000
    CFAR: c0000000000c19ec IRQMASK: 0
    GPR00: 0000000000000400 c00000000d05ba30 c008000001b17c00 0000000000000000
    GPR04: 0000000000000000 0000000000000000 0000000000000000 00000000000001e2
    GPR08: 000000000001f400 ffffffffffffd950 0000000000000000 c008000001b0b280
    GPR12: c0000000000c19c8 c00000001ec72e00 c00000000019a778 c00000002647b440
    GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR20: 0000000000000006 0000000000000001 0000000000000003 0000000000000002
    GPR24: 0000000000001000 c008000001b0d570 0000000000000005 c00000007ab5d550
    GPR28: c00000007ab5c000 c000000032fcf848 c00000007ab5cc00 c000000032fcf800
    NIP [c0000000000c1a30] memset+0x68/0x104
    LR [c008000001b00c18] ibmvnic_reset_crq+0x70/0x110 [ibmvnic]
    Call Trace:
    [c00000000d05ba30] [0000000000000800] 0x800 (unreliable)
    [c00000000d05bab0] [c008000001b0a930] do_reset.isra.40+0x224/0x634 [ibmvnic]
    [c00000000d05bb80] [c008000001b08574] __ibmvnic_reset+0x17c/0x3c0 [ibmvnic]
    [c00000000d05bc50] [c00000000018d9ac] process_one_work+0x2cc/0x800
    [c00000000d05bd20] [c00000000018df58] worker_thread+0x78/0x520
    [c00000000d05bdb0] [c00000000019a934] kthread+0x1c4/0x1d0
    [c00000000d05be20] [c00000000000d5d0] ret_from_kernel_thread+0x5c/0x6c
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b7441fac98ccc3b53dbefd018203397ebf203ff
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Mon Nov 23 13:35:45 2020 -0600

    ibmvnic: fix NULL pointer dereference in reset_sub_crq_queues
    
    [ Upstream commit a0faaa27c71608799e0dd765c5af38a089091802 ]
    
    adapter->tx_scrq and adapter->rx_scrq could be NULL if the previous reset
    did not complete after freeing sub crqs. Check for NULL before
    dereferencing them.
    
    Snippet of call trace:
    ibmvnic 30000006 env6: Releasing sub-CRQ
    ibmvnic 30000006 env6: Releasing CRQ
    ...
    ibmvnic 30000006 env6: Got Control IP offload Response
    ibmvnic 30000006 env6: Re-setting tx_scrq[0]
    BUG: Kernel NULL pointer dereference on read at 0x00000000
    Faulting instruction address: 0xc008000003dea7cc
    Oops: Kernel access of bad area, sig: 11 [#1]
    LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
    Modules linked in: rpadlpar_io rpaphp xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nf_tables xsk_diag tcp_diag udp_diag raw_diag inet_diag unix_diag af_packet_diag netlink_diag tun bridge stp llc rfkill sunrpc pseries_rng xts vmx_crypto uio_pdrv_genirq uio binfmt_misc ip_tables xfs libcrc32c sd_mod t10_pi sg ibmvscsi ibmvnic ibmveth scsi_transport_srp dm_mirror dm_region_hash dm_log dm_mod
    CPU: 80 PID: 1856 Comm: kworker/80:2 Tainted: G        W         5.8.0+ #4
    Workqueue: events __ibmvnic_reset [ibmvnic]
    NIP:  c008000003dea7cc LR: c008000003dea7bc CTR: 0000000000000000
    REGS: c0000007ef7db860 TRAP: 0380   Tainted: G        W          (5.8.0+)
    MSR:  800000000280b033 <SF,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 28002422  XER: 0000000d
    CFAR: c000000000bd9520 IRQMASK: 0
    GPR00: c008000003dea7bc c0000007ef7dbaf0 c008000003df7400 c0000007fa26ec00
    GPR04: c0000007fcd0d008 c0000007fcd96350 0000000000000027 c0000007fcd0d010
    GPR08: 0000000000000023 0000000000000000 0000000000000000 0000000000000000
    GPR12: 0000000000002000 c00000001ec18e00 c0000000001982f8 c0000007bad6e840
    GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR20: 0000000000000000 0000000000000000 0000000000000000 fffffffffffffef7
    GPR24: 0000000000000402 c0000007fa26f3a8 0000000000000003 c00000016f8ec048
    GPR28: 0000000000000000 0000000000000000 0000000000000000 c0000007fa26ec00
    NIP [c008000003dea7cc] ibmvnic_reset_init+0x15c/0x258 [ibmvnic]
    LR [c008000003dea7bc] ibmvnic_reset_init+0x14c/0x258 [ibmvnic]
    Call Trace:
    [c0000007ef7dbaf0] [c008000003dea7bc] ibmvnic_reset_init+0x14c/0x258 [ibmvnic] (unreliable)
    [c0000007ef7dbb80] [c008000003de8860] __ibmvnic_reset+0x408/0x970 [ibmvnic]
    [c0000007ef7dbc50] [c00000000018b7cc] process_one_work+0x2cc/0x800
    [c0000007ef7dbd20] [c00000000018bd78] worker_thread+0x78/0x520
    [c0000007ef7dbdb0] [c0000000001984c4] kthread+0x1d4/0x1e0
    [c0000007ef7dbe20] [c00000000000cea8] ret_from_kernel_thread+0x5c/0x74
    
    Fixes: 57a49436f4e8 ("ibmvnic: Reset sub-crqs during driver reset")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b02218cf05216216fe3c0a7f2adaac643495b7b
Author: Shay Agroskin <shayagr@amazon.com>
Date:   Mon Nov 23 21:08:58 2020 +0200

    net: ena: set initial DMA width to avoid intel iommu issue
    
    [ Upstream commit 09323b3bca95181c0da79daebc8b0603e500f573 ]
    
    The ENA driver uses the readless mechanism, which uses DMA, to find
    out what the DMA mask is supposed to be.
    
    If DMA is used without setting the dma_mask first, it causes the
    Intel IOMMU driver to think that ENA is a 32-bit device and therefore
    disables IOMMU passthrough permanently.
    
    This patch sets the dma_mask to be ENA_MAX_PHYS_ADDR_SIZE_BITS=48
    before readless initialization in
    ena_device_init()->ena_com_mmio_reg_read_request_init(),
    which is large enough to workaround the intel_iommu issue.
    
    DMA mask is set again to the correct value after it's received from the
    device after readless is initialized.
    
    The patch also changes the driver to use dma_set_mask_and_coherent()
    function instead of the two pci_set_dma_mask() and
    pci_set_consistent_dma_mask() ones. Both methods achieve the same
    effect.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Mike Cui <mikecui@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: Shay Agroskin <shayagr@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24071f8ddbcd1f3d440b597605508cf375c9d3dd
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Nov 23 17:23:51 2020 +0100

    nfc: s3fwrn5: use signed integer for parsing GPIO numbers
    
    [ Upstream commit d8f0a86795c69f5b697f7d9e5274c124da93c92d ]
    
    GPIOs - as returned by of_get_named_gpio() and used by the gpiolib - are
    signed integers, where negative number indicates error.  The return
    value of of_get_named_gpio() should not be assigned to an unsigned int
    because in case of !CONFIG_GPIOLIB such number would be a valid GPIO.
    
    Fixes: c04c674fadeb ("nfc: s3fwrn5: Add driver for Samsung S3FWRN5 NFC Chip")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201123162351.209100-1-krzk@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f341a769f37926054ce04b79c259a871dabf35d0
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Nov 20 09:57:02 2020 +0800

    IB/mthca: fix return value of error branch in mthca_init_cq()
    
    [ Upstream commit 6830ff853a5764c75e56750d59d0bbb6b26f1835 ]
    
    We return 'err' in the error branch, but this variable may be set as zero
    by the above code. Fix it by setting 'err' as a negative value before we
    goto the error label.
    
    Fixes: 74c2174e7be5 ("IB uverbs: add mthca user CQ support")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/1605837422-42724-1-git-send-email-wangxiongfeng2@huawei.com
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c09619911bb4fb15962cb33f4d62d7f44778f31e
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Fri Nov 20 10:09:39 2020 +0100

    s390/qeth: fix tear down of async TX buffers
    
    [ Upstream commit 7ed10e16e50daf74460f54bc922e27c6863c8d61 ]
    
    When qeth_iqd_tx_complete() detects that a TX buffer requires additional
    async completion via QAOB, it might fail to replace the queue entry's
    metadata (and ends up triggering recovery).
    
    Assume now that the device gets torn down, overruling the recovery.
    If the QAOB notification then arrives before the tear down has
    sufficiently progressed, the buffer state is changed to
    QETH_QDIO_BUF_HANDLED_DELAYED by qeth_qdio_handle_aob().
    
    The tear down code calls qeth_drain_output_queue(), where
    qeth_cleanup_handled_pending() will then attempt to replace such a
    buffer _again_. If it succeeds this time, the buffer ends up dangling in
    its replacement's ->next_pending list ... where it will never be freed,
    since there's no further call to qeth_cleanup_handled_pending().
    
    But the second attempt isn't actually needed, we can simply leave the
    buffer on the queue and re-use it after a potential recovery has
    completed. The qeth_clear_output_buffer() in qeth_drain_output_queue()
    will ensure that it's in a clean state again.
    
    Fixes: 72861ae792c2 ("qeth: recovery through asynchronous delivery")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c08186c3948965e84c30ecee5872fea6e89adc52
Author: Raju Rangoju <rajur@chelsio.com>
Date:   Wed Nov 18 20:02:13 2020 +0530

    cxgb4: fix the panic caused by non smac rewrite
    
    [ Upstream commit bff453921ae105a8dbbad0ed7dd5f5ce424536e7 ]
    
    SMT entry is allocated only when loopback Source MAC
    rewriting is requested. Accessing SMT entry for non
    smac rewrite cases results in kernel panic.
    
    Fix the panic caused by non smac rewrite
    
    Fixes: 937d84205884 ("cxgb4: set up filter action after rewrites")
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Link: https://lore.kernel.org/r/20201118143213.13319-1-rajur@chelsio.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df9d58deae7effb3b230c2cb637dadabef8d6b2c
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Fri Nov 20 02:44:31 2020 -0500

    bnxt_en: Release PCI regions when DMA mask setup fails during probe.
    
    [ Upstream commit c54bc3ced5106663c2f2b44071800621f505b00e ]
    
    Jump to init_err_release to cleanup.  bnxt_unmap_bars() will also be
    called but it will do nothing if the BARs are not mapped yet.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/1605858271-8209-1-git-send-email-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57062bed8e4aba46bc2971551ed506a04bb07e5c
Author: Dexuan Cui <decui@microsoft.com>
Date:   Tue Nov 17 16:03:05 2020 -0800

    video: hyperv_fb: Fix the cache type when mapping the VRAM
    
    [ Upstream commit 5f1251a48c17b54939d7477305e39679a565382c ]
    
    x86 Hyper-V used to essentially always overwrite the effective cache type
    of guest memory accesses to WB. This was problematic in cases where there
    is a physical device assigned to the VM, since that often requires that
    the VM should have control over cache types. Thus, on newer Hyper-V since
    2018, Hyper-V always honors the VM's cache type, but unexpectedly Linux VM
    users start to complain that Linux VM's VRAM becomes very slow, and it
    turns out that Linux VM should not map the VRAM uncacheable by ioremap().
    Fix this slowness issue by using ioremap_cache().
    
    On ARM64, ioremap_cache() is also required as the host also maps the VRAM
    cacheable, otherwise VM Connect can't display properly with ioremap() or
    ioremap_wc().
    
    With this change, the VRAM on new Hyper-V is as fast as regular RAM, so
    it's no longer necessary to use the hacks we added to mitigate the
    slowness, i.e. we no longer need to allocate physical memory and use
    it to back up the VRAM in Generation-1 VM, and we also no longer need to
    allocate physical memory to back up the framebuffer in a Generation-2 VM
    and copy the framebuffer to the real VRAM. A further big change will
    address these for v5.11.
    
    Fixes: 68a2d20b79b1 ("drivers/video: add Hyper-V Synthetic Video Frame Buffer Driver")
    Tested-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
    Link: https://lore.kernel.org/r/20201118000305.24797-1-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8319dcf5d8b6b718db63d2fc0a9516216057cbf6
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Thu Nov 19 21:30:21 2020 +0800

    bnxt_en: fix error return code in bnxt_init_board()
    
    [ Upstream commit 3383176efc0fb0c0900a191026468a58668b4214 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Link: https://lore.kernel.org/r/1605792621-6268-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fc2786e95bdaa4a034a479160c1f4501724d4d7
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Nov 18 20:17:31 2020 +0800

    bnxt_en: fix error return code in bnxt_init_one()
    
    [ Upstream commit b5f796b62c98cd8c219c4b788ecb6e1218e648cb ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: c213eae8d3cd ("bnxt_en: Improve VF/PF link change logic.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Link: https://lore.kernel.org/r/1605701851-20270-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b364d26a171a300989148b52e83ec0b75df820a
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 593cd9d5c7f8ea6ae46d10a0805a33608b3c326f
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed Nov 11 15:12:11 2020 +0100

    ARM: dts: dra76x: m_can: fix order of clocks
    
    [ Upstream commit 05d5de6ba7dbe490dd413b5ca11d0875bd2bc006 ]
    
    According to the bosch,m_can.yaml bindings the first clock shall be the "hclk",
    while the second clock "cclk".
    
    This patch fixes the order accordingly.
    
    Fixes: 0adbe832f21a ("ARM: dts: dra76x: Add MCAN node")
    Cc: Faiz Abbas <faiz_abbas@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: linux-omap@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbcca50fd598d7043c44a4bfed8a231306821739
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sun Nov 15 10:30:04 2020 +0000

    batman-adv: set .owner to THIS_MODULE
    
    [ Upstream commit 14a2e551faea53d45bc11629a9dac88f88950ca7 ]
    
    If THIS_MODULE is not set, the module would be removed while debugfs is
    being used.
    It eventually makes kernel panic.
    
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce744a898e3d69853805a0a6a481a12244559646
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Oct 13 10:58:20 2020 +0100

    phy: tegra: xusb: Fix dangling pointer on probe failure
    
    [ Upstream commit eb9c4dd9bdfdebaa13846c16a8c79b5b336066b6 ]
    
    If, for some reason, the xusb PHY fails to probe, it leaves
    a dangling pointer attached to the platform device structure.
    
    This would normally be harmless, but the Tegra XHCI driver then
    goes and extract that pointer from the PHY device. Things go
    downhill from there:
    
        8.752082] [004d554e5145533c] address between user and kernel address ranges
    [    8.752085] Internal error: Oops: 96000004 [#1] PREEMPT SMP
    [    8.752088] Modules linked in: max77620_regulator(E+) xhci_tegra(E+) sdhci_tegra(E+) xhci_hcd(E) sdhci_pltfm(E) cqhci(E) fixed(E) usbcore(E) scsi_mod(E) sdhci(E) host1x(E+)
    [    8.752103] CPU: 4 PID: 158 Comm: systemd-udevd Tainted: G S      W   E     5.9.0-rc7-00298-gf6337624c4fe #1980
    [    8.752105] Hardware name: NVIDIA Jetson TX2 Developer Kit (DT)
    [    8.752108] pstate: 20000005 (nzCv daif -PAN -UAO BTYPE=--)
    [    8.752115] pc : kobject_put+0x1c/0x21c
    [    8.752120] lr : put_device+0x20/0x30
    [    8.752121] sp : ffffffc012eb3840
    [    8.752122] x29: ffffffc012eb3840 x28: ffffffc010e82638
    [    8.752125] x27: ffffffc008d56440 x26: 0000000000000000
    [    8.752128] x25: ffffff81eb508200 x24: 0000000000000000
    [    8.752130] x23: ffffff81eb538800 x22: 0000000000000000
    [    8.752132] x21: 00000000fffffdfb x20: ffffff81eb538810
    [    8.752134] x19: 3d4d554e51455300 x18: 0000000000000020
    [    8.752136] x17: ffffffc008d00270 x16: ffffffc008d00c94
    [    8.752138] x15: 0000000000000004 x14: ffffff81ebd4ae90
    [    8.752140] x13: 0000000000000000 x12: ffffff81eb86a4e8
    [    8.752142] x11: ffffff81eb86a480 x10: ffffff81eb862fea
    [    8.752144] x9 : ffffffc01055fb28 x8 : ffffff81eb86a4a8
    [    8.752146] x7 : 0000000000000001 x6 : 0000000000000001
    [    8.752148] x5 : ffffff81dff8bc38 x4 : 0000000000000000
    [    8.752150] x3 : 0000000000000001 x2 : 0000000000000001
    [    8.752152] x1 : 0000000000000002 x0 : 3d4d554e51455300
    [    8.752155] Call trace:
    [    8.752157]  kobject_put+0x1c/0x21c
    [    8.752160]  put_device+0x20/0x30
    [    8.752164]  tegra_xusb_padctl_put+0x24/0x3c
    [    8.752170]  tegra_xusb_probe+0x8b0/0xd10 [xhci_tegra]
    [    8.752174]  platform_drv_probe+0x60/0xb4
    [    8.752176]  really_probe+0xf0/0x504
    [    8.752179]  driver_probe_device+0x100/0x170
    [    8.752181]  device_driver_attach+0xcc/0xd4
    [    8.752183]  __driver_attach+0xb0/0x17c
    [    8.752185]  bus_for_each_dev+0x7c/0xd4
    [    8.752187]  driver_attach+0x30/0x3c
    [    8.752189]  bus_add_driver+0x154/0x250
    [    8.752191]  driver_register+0x84/0x140
    [    8.752193]  __platform_driver_register+0x54/0x60
    [    8.752197]  tegra_xusb_init+0x40/0x1000 [xhci_tegra]
    [    8.752201]  do_one_initcall+0x54/0x2d0
    [    8.752205]  do_init_module+0x68/0x29c
    [    8.752207]  load_module+0x2178/0x26c0
    [    8.752209]  __do_sys_finit_module+0xb0/0x120
    [    8.752211]  __arm64_sys_finit_module+0x2c/0x40
    [    8.752215]  el0_svc_common.constprop.0+0x80/0x240
    [    8.752218]  do_el0_svc+0x30/0xa0
    [    8.752220]  el0_svc+0x18/0x50
    [    8.752223]  el0_sync_handler+0x90/0x318
    [    8.752225]  el0_sync+0x158/0x180
    [    8.752230] Code: a9bd7bfd 910003fd a90153f3 aa0003f3 (3940f000)
    [    8.752232] ---[ end trace 90f6c89d62d85ff5 ]---
    
    Reset the pointer on probe failure fixes the issue.
    
    Fixes: 53d2a715c2403 ("phy: Add Tegra XUSB pad controller support")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201013095820.311376-1-maz@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b1f2cff16d13de92a04e14db96201a2f78d9e41
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Tue Sep 1 00:09:37 2020 +0300

    xtensa: uaccess: Add missing __user to strncpy_from_user() prototype
    
    [ Upstream commit dc293f2106903ab9c24e9cea18c276e32c394c33 ]
    
    When adding __user annotations in commit 2adf5352a34a, the
    strncpy_from_user() function declaration for the
    CONFIG_GENERIC_STRNCPY_FROM_USER case was missed. Fix it.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Message-Id: <20200831210937.17938-1-laurent.pinchart@ideasonboard.com>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 448ad389cbc12f72d9cc6ab087a694bb01a99cdf
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Fri Nov 13 10:31:26 2020 -0800

    perf/x86: fix sysfs type mismatches
    
    [ Upstream commit ebd19fc372e3e78bf165f230e7c084e304441c08 ]
    
    This change switches rapl to use PMU_FORMAT_ATTR, and fixes two other
    macros to use device_attribute instead of kobj_attribute to avoid
    callback type mismatches that trip indirect call checking with Clang's
    Control-Flow Integrity (CFI).
    
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lkml.kernel.org/r/20201113183126.1239404-1-samitolvanen@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97b5295711ae0a03a5cfaf025d768c6c87a209f6
Author: Mike Christie <michael.christie@oracle.com>
Date:   Fri Nov 13 19:46:18 2020 -0600

    scsi: target: iscsi: Fix cmd abort fabric stop race
    
    [ Upstream commit f36199355c64a39fe82cfddc7623d827c7e050da ]
    
    Maurizio found a race where the abort and cmd stop paths can race as
    follows:
    
     1. thread1 runs iscsit_release_commands_from_conn and sets
        CMD_T_FABRIC_STOP.
    
     2. thread2 runs iscsit_aborted_task and then does __iscsit_free_cmd. It
        then returns from the aborted_task callout and we finish
        target_handle_abort and do:
    
        target_handle_abort -> transport_cmd_check_stop_to_fabric ->
            lio_check_stop_free -> target_put_sess_cmd
    
        The cmd is now freed.
    
     3. thread1 now finishes iscsit_release_commands_from_conn and runs
        iscsit_free_cmd while accessing a command we just released.
    
    In __target_check_io_state we check for CMD_T_FABRIC_STOP and set the
    CMD_T_ABORTED if the driver is not cleaning up the cmd because of a session
    shutdown. However, iscsit_release_commands_from_conn only sets the
    CMD_T_FABRIC_STOP and does not check to see if the abort path has claimed
    completion ownership of the command.
    
    This adds a check in iscsit_release_commands_from_conn so only the abort or
    fabric stop path cleanup the command.
    
    Link: https://lore.kernel.org/r/1605318378-9269-1-git-send-email-michael.christie@oracle.com
    Reported-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0172455d4e9e946a2d388386ec48dd7538275ec
Author: Lee Duncan <lduncan@suse.com>
Date:   Fri Nov 6 11:33:17 2020 -0800

    scsi: libiscsi: Fix NOP race condition
    
    [ Upstream commit fe0a8a95e7134d0b44cd407bc0085b9ba8d8fe31 ]
    
    iSCSI NOPs are sometimes "lost", mistakenly sent to the user-land iscsid
    daemon instead of handled in the kernel, as they should be, resulting in a
    message from the daemon like:
    
      iscsid: Got nop in, but kernel supports nop handling.
    
    This can occur because of the new forward- and back-locks, and the fact
    that an iSCSI NOP response can occur before processing of the NOP send is
    complete. This can result in "conn->ping_task" being NULL in
    iscsi_nop_out_rsp(), when the pointer is actually in the process of being
    set.
    
    To work around this, we add a new state to the "ping_task" pointer. In
    addition to NULL (not assigned) and a pointer (assigned), we add the state
    "being set", which is signaled with an INVALID pointer (using "-1").
    
    Link: https://lore.kernel.org/r/20201106193317.16993-1-leeman.duncan@gmail.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc52f37bb51c8e88649914b7fe842f6ca713a861
Author: Sugar Zhang <sugar.zhang@rock-chips.com>
Date:   Sat Nov 14 11:55:06 2020 +0800

    dmaengine: pl330: _prep_dma_memcpy: Fix wrong burst size
    
    [ Upstream commit e773ca7da8beeca7f17fe4c9d1284a2b66839cc1 ]
    
    Actually, burst size is equal to '1 << desc->rqcfg.brst_size'.
    we should use burst size, not desc->rqcfg.brst_size.
    
    dma memcpy performance on Rockchip RV1126
    @ 1512MHz A7, 1056MHz LPDDR3, 200MHz DMA:
    
    dmatest:
    
    /# echo dma0chan0 > /sys/module/dmatest/parameters/channel
    /# echo 4194304 > /sys/module/dmatest/parameters/test_buf_size
    /# echo 8 > /sys/module/dmatest/parameters/iterations
    /# echo y > /sys/module/dmatest/parameters/norandom
    /# echo y > /sys/module/dmatest/parameters/verbose
    /# echo 1 > /sys/module/dmatest/parameters/run
    
    dmatest: dma0chan0-copy0: result #1: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #2: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #3: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #4: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #5: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #6: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #7: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #8: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    
    Before:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 48 iops 200338 KB/s (0)
    
    After this patch:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 179 iops 734873 KB/s (0)
    
    After this patch and increase dma clk to 400MHz:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 259 iops 1062929 KB/s (0)
    
    Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
    Link: https://lore.kernel.org/r/1605326106-55681-1-git-send-email-sugar.zhang@rock-chips.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd1c1de8c4589fdd528733bfd01ed0c5f3f69204
Author: Minwoo Im <minwoo.im.dev@gmail.com>
Date:   Thu Nov 5 23:28:47 2020 +0900

    nvme: free sq/cq dbbuf pointers when dbbuf set fails
    
    [ Upstream commit 0f0d2c876c96d4908a9ef40959a44bec21bdd6cf ]
    
    If Doorbell Buffer Config command fails even 'dev->dbbuf_dbs != NULL'
    which means OACS indicates that NVME_CTRL_OACS_DBBUF_SUPP is set,
    nvme_dbbuf_update_and_check_event() will check event even it's not been
    successfully set.
    
    This patch fixes mismatch among dbbuf for sq/cqs in case that dbbuf
    command fails.
    
    Signed-off-by: Minwoo Im <minwoo.im.dev@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49d04a6948825b309411d13e97109857e4f76de6
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Nov 13 16:47:52 2020 -0700

    proc: don't allow async path resolution of /proc/self components
    
    [ Upstream commit 8d4c3e76e3be11a64df95ddee52e99092d42fc19 ]
    
    If this is attempted by a kthread, then return -EOPNOTSUPP as we don't
    currently support that. Once we can get task_pid_ptr() doing the right
    thing, then this can go away again.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7daa8842205b5a2e7929c82390f7b377d37803b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 2 14:36:58 2020 +0100

    HID: Add Logitech Dinovo Edge battery quirk
    
    [ Upstream commit 7940fb035abd88040d56be209962feffa33b03d0 ]
    
    The battery status is also being reported by the logitech-hidpp driver,
    so ignore the standard HID battery status to avoid reporting the same
    info twice.
    
    Note the logitech-hidpp battery driver provides more info, such as properly
    differentiating between charging and discharging. Also the standard HID
    battery info seems to be wrong, reporting a capacity of just 26% after
    fully charging the device.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db42adcd476a6b9848c8bbf4a0d37f9a6ef0b239
Author: Brian Masney <bmasney@redhat.com>
Date:   Fri Nov 6 20:11:19 2020 -0500

    x86/xen: don't unbind uninitialized lock_kicker_irq
    
    [ Upstream commit 65cae18882f943215d0505ddc7e70495877308e6 ]
    
    When booting a hyperthreaded system with the kernel parameter
    'mitigations=auto,nosmt', the following warning occurs:
    
        WARNING: CPU: 0 PID: 1 at drivers/xen/events/events_base.c:1112 unbind_from_irqhandler+0x4e/0x60
        ...
        Hardware name: Xen HVM domU, BIOS 4.2.amazon 08/24/2006
        ...
        Call Trace:
         xen_uninit_lock_cpu+0x28/0x62
         xen_hvm_cpu_die+0x21/0x30
         takedown_cpu+0x9c/0xe0
         ? trace_suspend_resume+0x60/0x60
         cpuhp_invoke_callback+0x9a/0x530
         _cpu_up+0x11a/0x130
         cpu_up+0x7e/0xc0
         bringup_nonboot_cpus+0x48/0x50
         smp_init+0x26/0x79
         kernel_init_freeable+0xea/0x229
         ? rest_init+0xaa/0xaa
         kernel_init+0xa/0x106
         ret_from_fork+0x35/0x40
    
    The secondary CPUs are not activated with the nosmt mitigations and only
    the primary thread on each CPU core is used. In this situation,
    xen_hvm_smp_prepare_cpus(), and more importantly xen_init_lock_cpu(), is
    not called, so the lock_kicker_irq is not initialized for the secondary
    CPUs. Let's fix this by exiting early in xen_uninit_lock_cpu() if the
    irq is not set to avoid the warning from above for each secondary CPU.
    
    Signed-off-by: Brian Masney <bmasney@redhat.com>
    Link: https://lore.kernel.org/r/20201107011119.631442-1-bmasney@redhat.com
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5369afb5971fd8e55c3ce071034cd97e4327d6b0
Author: Marc Ferland <ferlandm@amotus.ca>
Date:   Wed Nov 4 12:30:04 2020 +0530

    dmaengine: xilinx_dma: use readl_poll_timeout_atomic variant
    
    [ Upstream commit 0ba2df09f1500d3f27398a3382b86d39c3e6abe2 ]
    
    The xilinx_dma_poll_timeout macro is sometimes called while holding a
    spinlock (see xilinx_dma_issue_pending() for an example) this means we
    shouldn't sleep when polling the dma channel registers. To address it
    in xilinx poll timeout macro use readl_poll_timeout_atomic instead of
    readl_poll_timeout variant.
    
    Signed-off-by: Marc Ferland <ferlandm@amotus.ca>
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1604473206-32573-2-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b64c55791a266339512e6849fece0a73732a618
Author: Chris Ye <lzye@google.com>
Date:   Sun Nov 1 11:34:52 2020 -0800

    HID: add HID_QUIRK_INCREMENT_USAGE_ON_DUPLICATE for Gamevice devices
    
    [ Upstream commit f59ee399de4a8ca4d7d19cdcabb4b63e94867f09 ]
    
    Kernel 5.4 introduces HID_QUIRK_INCREMENT_USAGE_ON_DUPLICATE, devices need to
    be set explicitly with this flag.
    
    Signed-off-by: Chris Ye <lzye@google.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efb042598b5f4ad57a4260f5fbfb7e88f313c5ab
Author: Pablo Ceballos <pceballos@google.com>
Date:   Mon Nov 2 19:29:39 2020 -0500

    HID: hid-sensor-hub: Fix issue with devices with no report ID
    
    [ Upstream commit 34a9fa2025d9d3177c99351c7aaf256c5f50691f ]
    
    Some HID devices don't use a report ID because they only have a single
    report. In those cases, the report ID in struct hid_report will be zero
    and the data for the report will start at the first byte, so don't skip
    over the first byte.
    
    Signed-off-by: Pablo Ceballos <pceballos@google.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94b6e6ee174193d65c6f6e47a1f8847d85325544
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 26 20:53:57 2020 -0700

    Input: i8042 - allow insmod to succeed on devices without an i8042 controller
    
    [ Upstream commit b1884583fcd17d6a1b1bba94bbb5826e6b5c6e17 ]
    
    The i8042 module exports several symbols which may be used by other
    modules.
    
    Before this commit it would refuse to load (when built as a module itself)
    on systems without an i8042 controller.
    
    This is a problem specifically for the asus-nb-wmi module. Many Asus
    laptops support the Asus WMI interface. Some of them have an i8042
    controller and need to use i8042_install_filter() to filter some kbd
    events. Other models do not have an i8042 controller (e.g. they use an
    USB attached kbd).
    
    Before this commit the asus-nb-wmi driver could not be loaded on Asus
    models without an i8042 controller, when the i8042 code was built as
    a module (as Arch Linux does) because the module_init function of the
    i8042 module would fail with -ENODEV and thus the i8042_install_filter
    symbol could not be loaded.
    
    This commit fixes this by exiting from module_init with a return code
    of 0 if no controller is found.  It also adds a i8042_present bool to
    make the module_exit function a no-op in this case and also adds a
    check for i8042_present to the exported i8042_command function.
    
    The latter i8042_present check should not really be necessary because
    when builtin that function can already be used on systems without
    an i8042 controller, but better safe then sorry.
    
    Reported-and-tested-by: Marius Iacob <themariusus@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201008112628.3979-2-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af13df79a0a006585e644a1c954fc9ad079fea2e
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Sep 30 22:52:31 2020 +0200

    HID: add support for Sega Saturn
    
    [ Upstream commit 1811977cb11354aef8cbd13e35ff50db716728a4 ]
    
    This device needs HID_QUIRK_MULTI_INPUT in order to be presented to userspace
    in a consistent way.
    
    Reported-and-tested-by: David Gámiz Jiménez <david.gamiz@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac13ba2bd1698c0c65611aa97cfdf09acb194a13
Author: Frank Yang <puilp0502@gmail.com>
Date:   Fri Aug 21 03:16:50 2020 +0900

    HID: cypress: Support Varmilo Keyboards' media hotkeys
    
    [ Upstream commit 652f3d00de523a17b0cebe7b90debccf13aa8c31 ]
    
    The Varmilo VA104M Keyboard (04b4:07b1, reported as Varmilo Z104M)
    exposes media control hotkeys as a USB HID consumer control device, but
    these keys do not work in the current (5.8-rc1) kernel due to the
    incorrect HID report descriptor. Fix the problem by modifying the
    internal HID report descriptor.
    
    More specifically, the keyboard report descriptor specifies the
    logical boundary as 572~10754 (0x023c ~ 0x2a02) while the usage
    boundary is specified as 0~10754 (0x00 ~ 0x2a02). This results in an
    incorrect interpretation of input reports, causing inputs to be ignored.
    By setting the Logical Minimum to zero, we align the logical boundary
    with the Usage ID boundary.
    
    Some notes:
    
    * There seem to be multiple variants of the VA104M keyboard. This
      patch specifically targets 04b4:07b1 variant.
    
    * The device works out-of-the-box on Windows platform with the generic
      consumer control device driver (hidserv.inf). This suggests that
      Windows either ignores the Logical Minimum/Logical Maximum or
      interprets the Usage ID assignment differently from the linux
      implementation; Maybe there are other devices out there that only
      works on Windows due to this problem?
    
    Signed-off-by: Frank Yang <puilp0502@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3afe38f6c3c6525d529db8e0fee89d1ad1fc345d
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Tue Oct 13 18:26:28 2020 +0300

    ALSA: hda/hdmi: fix incorrect locking in hdmi_pcm_close
    
    commit ce1558c285f9ad04c03b46833a028230771cc0a7 upstream
    
    A race exists between closing a PCM and update of ELD data. In
    hdmi_pcm_close(), hinfo->nid value is modified without taking
    spec->pcm_lock. If this happens concurrently while processing an ELD
    update in hdmi_pcm_setup_pin(), converter assignment may be done
    incorrectly.
    
    This bug was found by hitting a WARN_ON in snd_hda_spdif_ctls_assign()
    in a HDMI receiver connection stress test:
    
    [2739.684569] WARNING: CPU: 5 PID: 2090 at sound/pci/hda/patch_hdmi.c:1898 check_non_pcm_per_cvt+0x41/0x50 [snd_hda_codec_hdmi]
    ...
    [2739.684707] Call Trace:
    [2739.684720]  update_eld+0x121/0x5a0 [snd_hda_codec_hdmi]
    [2739.684736]  hdmi_present_sense+0x21e/0x3b0 [snd_hda_codec_hdmi]
    [2739.684750]  check_presence_and_report+0x81/0xd0 [snd_hda_codec_hdmi]
    [2739.684842]  intel_audio_codec_enable+0x122/0x190 [i915]
    
    Fixes: 42b2987079ec ("ALSA: hda - hdmi playback without monitor in dynamic pcm bind mode")
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201013152628.920764-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72289dc23c3c6311d21d87eee55278aa4308a73e
Author: Lyude Paul <lyude@redhat.com>
Date:   Tue Oct 16 16:39:46 2018 -0400

    drm/atomic_helper: Stop modesets on unregistered connectors harder
    
    commit de9f8eea5a44b0b756d3d6345af7f8e630a3c8c0 upstream.
    
    Unfortunately, it appears our fix in:
    commit b5d29843d8ef ("drm/atomic_helper: Allow DPMS On<->Off changes
    for unregistered connectors")
    
    Which attempted to work around the problems introduced by:
    commit 4d80273976bf ("drm/atomic_helper: Disallow new modesets on
    unregistered connectors")
    
    Is still not the right solution, as modesets can still be triggered
    outside of drm_atomic_set_crtc_for_connector().
    
    So in order to fix this, while still being careful that we don't break
    modesets that a driver may perform before being registered with
    userspace, we replace connector->registered with a tristate member,
    connector->registration_state. This allows us to keep track of whether
    or not a connector is still initializing and hasn't been exposed to
    userspace, is currently registered and exposed to userspace, or has been
    legitimately removed from the system after having once been present.
    
    Using this info, we can prevent userspace from performing new modesets
    on unregistered connectors while still allowing the driver to perform
    modesets on unregistered connectors before the driver has finished being
    registered.
    
    Changes since v1:
    - Fix WARN_ON() in drm_connector_cleanup() that CI caught with this
      patchset in igt@drv_module_reload@basic-reload-inject and
      igt@drv_module_reload@basic-reload by checking if the connector is
      registered instead of unregistered, as calling drm_connector_cleanup()
      on a connector that hasn't been registered with userspace yet should
      stay valid.
    - Remove unregistered_connector_check(), and just go back to what we
      were doing before in commit 4d80273976bf ("drm/atomic_helper: Disallow
      new modesets on unregistered connectors") except replacing
      READ_ONCE(connector->registered) with drm_connector_is_unregistered().
      This gets rid of the behavior of allowing DPMS On<->Off, but that should
      be fine as it's more consistent with the UAPI we had before - danvet
    - s/drm_connector_unregistered/drm_connector_is_unregistered/ - danvet
    - Update documentation, fix some typos.
    
    Fixes: b5d29843d8ef ("drm/atomic_helper: Allow DPMS On<->Off changes for unregistered connectors")
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: stable@vger.kernel.org
    Cc: David Airlie <airlied@linux.ie>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181016203946.9601-1-lyude@redhat.com
    (cherry picked from commit 39b50c603878f4f8ae541ac4088a805d588abc79)
    Fixes: e96550956fbc ("drm/atomic_helper: Disallow new modesets on unregistered connectors")
    Fixes: 34ca26a98ad6 ("drm/atomic_helper: Allow DPMS On<->Off changes for unregistered connectors")
    Cc: stable@vger.kernel.org
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Christoph Niedermaier <cniedermaier@dh-electronics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46c69325028226332be13b6df9f36f2d6b07b489
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 20 13:57:48 2020 +0000

    arm64: pgtable: Ensure dirty bit is preserved across pte_wrprotect()
    
    commit ff1712f953e27f0b0718762ec17d0adb15c9fd0b upstream.
    
    With hardware dirty bit management, calling pte_wrprotect() on a writable,
    dirty PTE will lose the dirty state and return a read-only, clean entry.
    
    Move the logic from ptep_set_wrprotect() into pte_wrprotect() to ensure that
    the dirty bit is preserved for writable entries, as this is required for
    soft-dirty bit management if we enable it in the future.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 2f4b829c625e ("arm64: Add support for hardware updates of the access and dirty pte bits")
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20201120143557.6715-3-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad1fc801a3e9bdaed26b112687f6677612da8427
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 20 13:28:01 2020 +0000

    arm64: pgtable: Fix pte_accessible()
    
    commit 07509e10dcc77627f8b6a57381e878fe269958d3 upstream.
    
    pte_accessible() is used by ptep_clear_flush() to figure out whether TLB
    invalidation is necessary when unmapping pages for reclaim. Although our
    implementation is correct according to the architecture, returning true
    only for valid, young ptes in the absence of racing page-table
    modifications, this is in fact flawed due to lazy invalidation of old
    ptes in ptep_clear_flush_young() where we elide the expensive DSB
    instruction for completing the TLB invalidation.
    
    Rather than penalise the aging path, adjust pte_accessible() to return
    true for any valid pte, even if the access flag is cleared.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 76c714be0e5e ("arm64: pgtable: implement pte_accessible()")
    Reported-by: Yu Zhao <yuzhao@google.com>
    Acked-by: Yu Zhao <yuzhao@google.com>
    Reviewed-by: Minchan Kim <minchan@kernel.org>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20201120143557.6715-2-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b43f0efb0b515e94f68dbc20119fa72fa938f3a7
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Nov 27 09:18:20 2020 +0100

    KVM: x86: Fix split-irqchip vs interrupt injection window request
    
    commit 71cc849b7093bb83af966c0e60cb11b7f35cd746 upstream.
    
    kvm_cpu_accept_dm_intr and kvm_vcpu_ready_for_interrupt_injection are
    a hodge-podge of conditions, hacked together to get something that
    more or less works.  But what is actually needed is much simpler;
    in both cases the fundamental question is, do we have a place to stash
    an interrupt if userspace does KVM_INTERRUPT?
    
    In userspace irqchip mode, that is !vcpu->arch.interrupt.injected.
    Currently kvm_event_needs_reinjection(vcpu) covers it, but it is
    unnecessarily restrictive.
    
    In split irqchip mode it's a bit more complicated, we need to check
    kvm_apic_accept_pic_intr(vcpu) (the IRQ window exit is basically an INTACK
    cycle and thus requires ExtINTs not to be masked) as well as
    !pending_userspace_extint(vcpu).  However, there is no need to
    check kvm_event_needs_reinjection(vcpu), since split irqchip keeps
    pending ExtINT state separate from event injection state, and checking
    kvm_cpu_has_interrupt(vcpu) is wrong too since ExtINT has higher
    priority than APIC interrupts.  In fact the latter fixes a bug:
    when userspace requests an IRQ window vmexit, an interrupt in the
    local APIC can cause kvm_cpu_has_interrupt() to be true and thus
    kvm_vcpu_ready_for_interrupt_injection() to return false.  When this
    happens, vcpu_run does not exit to userspace but the interrupt window
    vmexits keep occurring.  The VM loops without any hope of making progress.
    
    Once we try to fix these with something like
    
         return kvm_arch_interrupt_allowed(vcpu) &&
    -        !kvm_cpu_has_interrupt(vcpu) &&
    -        !kvm_event_needs_reinjection(vcpu) &&
    -        kvm_cpu_accept_dm_intr(vcpu);
    +        (!lapic_in_kernel(vcpu)
    +         ? !vcpu->arch.interrupt.injected
    +         : (kvm_apic_accept_pic_intr(vcpu)
    +            && !pending_userspace_extint(v)));
    
    we realize two things.  First, thanks to the previous patch the complex
    conditional can reuse !kvm_cpu_has_extint(vcpu).  Second, the interrupt
    window request in vcpu_enter_guest()
    
            bool req_int_win =
                    dm_request_for_irq_injection(vcpu) &&
                    kvm_cpu_accept_dm_intr(vcpu);
    
    should be kept in sync with kvm_vcpu_ready_for_interrupt_injection():
    it is unnecessary to ask the processor for an interrupt window
    if we would not be able to return to userspace.  Therefore,
    kvm_cpu_accept_dm_intr(vcpu) is basically !kvm_cpu_has_extint(vcpu)
    ANDed with the existing check for masked ExtINT.  It all makes sense:
    
    - we can accept an interrupt from userspace if there is a place
      to stash it (and, for irqchip split, ExtINTs are not masked).
      Interrupts from userspace _can_ be accepted even if right now
      EFLAGS.IF=0.
    
    - in order to tell userspace we will inject its interrupt ("IRQ
      window open" i.e. kvm_vcpu_ready_for_interrupt_injection), both
      KVM and the vCPU need to be ready to accept the interrupt.
    
    ... and this is what the patch implements.
    
    Reported-by: David Woodhouse <dwmw@amazon.co.uk>
    Analyzed-by: David Woodhouse <dwmw@amazon.co.uk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Nikos Tsironis <ntsironis@arrikto.com>
    Reviewed-by: David Woodhouse <dwmw@amazon.co.uk>
    Tested-by: David Woodhouse <dwmw@amazon.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6d579d770d50d21d5ad26d3dbdafe2237967766
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Nov 27 08:53:52 2020 +0100

    KVM: x86: handle !lapic_in_kernel case in kvm_cpu_*_extint
    
    commit 72c3bcdcda494cbd600712a32e67702cdee60c07 upstream.
    
    Centralize handling of interrupts from the userspace APIC
    in kvm_cpu_has_extint and kvm_cpu_get_extint, since
    userspace APIC interrupts are handled more or less the
    same as ExtINTs are with split irqchip.  This removes
    duplicated code from kvm_cpu_has_injectable_intr and
    kvm_cpu_has_interrupt, and makes the code more similar
    between kvm_cpu_has_{extint,interrupt} on one side
    and kvm_cpu_get_{extint,interrupt} on the other.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Filippo Sironi <sironi@amazon.de>
    Reviewed-by: David Woodhouse <dwmw@amazon.co.uk>
    Tested-by: David Woodhouse <dwmw@amazon.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53ee75b86be1bbaaa17a24149197fe8b4b84ac5e
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Tue Nov 17 23:16:29 2020 +0800

    KVM: arm64: vgic-v3: Drop the reporting of GICR_TYPER.Last for userspace
    
    commit 23bde34771f1ea92fb5e6682c0d8c04304d34b3b upstream.
    
    It was recently reported that if GICR_TYPER is accessed before the RD base
    address is set, we'll suffer from the unset @rdreg dereferencing. Oops...
    
            gpa_t last_rdist_typer = rdreg->base + GICR_TYPER +
                            (rdreg->free_index - 1) * KVM_VGIC_V3_REDIST_SIZE;
    
    It's "expected" that users will access registers in the redistributor if
    the RD has been properly configured (e.g., the RD base address is set). But
    it hasn't yet been covered by the existing documentation.
    
    Per discussion on the list [1], the reporting of the GICR_TYPER.Last bit
    for userspace never actually worked. And it's difficult for us to emulate
    it correctly given that userspace has the flexibility to access it any
    time. Let's just drop the reporting of the Last bit for userspace for now
    (userspace should have full knowledge about it anyway) and it at least
    prevents kernel from panic ;-)
    
    [1] https://lore.kernel.org/kvmarm/c20865a267e44d1e2c0d52ce4e012263@kernel.org/
    
    Fixes: ba7b3f1275fd ("KVM: arm/arm64: Revisit Redistributor TYPER last bit computation")
    Reported-by: Keqian Zhu <zhukeqian1@huawei.com>
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Link: https://lore.kernel.org/r/20201117151629.1738-1-yuzenghui@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6b9a7f781b88f1a1ddba93b504206d86bfbf68e
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Thu May 21 22:14:22 2020 +0200

    wireless: Use linux/stddef.h instead of stddef.h
    
    commit 1b9ae0c92925ac40489be526d67d0010d0724ce0 upstream.
    
    When compiling inside the kernel include linux/stddef.h instead of
    stddef.h. When I compile this header file in backports for power PC I
    run into a conflict with ptrdiff_t. I was unable to reproduce this in
    mainline kernel. I still would like to fix this problem in the kernel.
    
    Fixes: 6989310f5d43 ("wireless: Use offsetof instead of custom macro.")
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Link: https://lore.kernel.org/r/20200521201422.16493-1-hauke@hauke-m.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0ffa8527ba351f7249236b2f836efd6ead8a3d2
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Nov 23 14:28:44 2020 +0000

    btrfs: fix lockdep splat when reading qgroup config on mount
    
    commit 3d05cad3c357a2b749912914356072b38435edfa upstream.
    
    Lockdep reported the following splat when running test btrfs/190 from
    fstests:
    
      [ 9482.126098] ======================================================
      [ 9482.126184] WARNING: possible circular locking dependency detected
      [ 9482.126281] 5.10.0-rc4-btrfs-next-73 #1 Not tainted
      [ 9482.126365] ------------------------------------------------------
      [ 9482.126456] mount/24187 is trying to acquire lock:
      [ 9482.126534] ffffa0c869a7dac0 (&fs_info->qgroup_rescan_lock){+.+.}-{3:3}, at: qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.126647]
                     but task is already holding lock:
      [ 9482.126777] ffffa0c892ebd3a0 (btrfs-quota-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.126886]
                     which lock already depends on the new lock.
    
      [ 9482.127078]
                     the existing dependency chain (in reverse order) is:
      [ 9482.127213]
                     -> #1 (btrfs-quota-00){++++}-{3:3}:
      [ 9482.127366]        lock_acquire+0xd8/0x490
      [ 9482.127436]        down_read_nested+0x45/0x220
      [ 9482.127528]        __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.127613]        btrfs_read_lock_root_node+0x41/0x130 [btrfs]
      [ 9482.127702]        btrfs_search_slot+0x514/0xc30 [btrfs]
      [ 9482.127788]        update_qgroup_status_item+0x72/0x140 [btrfs]
      [ 9482.127877]        btrfs_qgroup_rescan_worker+0xde/0x680 [btrfs]
      [ 9482.127964]        btrfs_work_helper+0xf1/0x600 [btrfs]
      [ 9482.128039]        process_one_work+0x24e/0x5e0
      [ 9482.128110]        worker_thread+0x50/0x3b0
      [ 9482.128181]        kthread+0x153/0x170
      [ 9482.128256]        ret_from_fork+0x22/0x30
      [ 9482.128327]
                     -> #0 (&fs_info->qgroup_rescan_lock){+.+.}-{3:3}:
      [ 9482.128464]        check_prev_add+0x91/0xc60
      [ 9482.128551]        __lock_acquire+0x1740/0x3110
      [ 9482.128623]        lock_acquire+0xd8/0x490
      [ 9482.130029]        __mutex_lock+0xa3/0xb30
      [ 9482.130590]        qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.131577]        btrfs_read_qgroup_config+0x43a/0x550 [btrfs]
      [ 9482.132175]        open_ctree+0x1228/0x18a0 [btrfs]
      [ 9482.132756]        btrfs_mount_root.cold+0x13/0xed [btrfs]
      [ 9482.133325]        legacy_get_tree+0x30/0x60
      [ 9482.133866]        vfs_get_tree+0x28/0xe0
      [ 9482.134392]        fc_mount+0xe/0x40
      [ 9482.134908]        vfs_kern_mount.part.0+0x71/0x90
      [ 9482.135428]        btrfs_mount+0x13b/0x3e0 [btrfs]
      [ 9482.135942]        legacy_get_tree+0x30/0x60
      [ 9482.136444]        vfs_get_tree+0x28/0xe0
      [ 9482.136949]        path_mount+0x2d7/0xa70
      [ 9482.137438]        do_mount+0x75/0x90
      [ 9482.137923]        __x64_sys_mount+0x8e/0xd0
      [ 9482.138400]        do_syscall_64+0x33/0x80
      [ 9482.138873]        entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [ 9482.139346]
                     other info that might help us debug this:
    
      [ 9482.140735]  Possible unsafe locking scenario:
    
      [ 9482.141594]        CPU0                    CPU1
      [ 9482.142011]        ----                    ----
      [ 9482.142411]   lock(btrfs-quota-00);
      [ 9482.142806]                                lock(&fs_info->qgroup_rescan_lock);
      [ 9482.143216]                                lock(btrfs-quota-00);
      [ 9482.143629]   lock(&fs_info->qgroup_rescan_lock);
      [ 9482.144056]
                      *** DEADLOCK ***
    
      [ 9482.145242] 2 locks held by mount/24187:
      [ 9482.145637]  #0: ffffa0c8411c40e8 (&type->s_umount_key#44/1){+.+.}-{3:3}, at: alloc_super+0xb9/0x400
      [ 9482.146061]  #1: ffffa0c892ebd3a0 (btrfs-quota-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.146509]
                     stack backtrace:
      [ 9482.147350] CPU: 1 PID: 24187 Comm: mount Not tainted 5.10.0-rc4-btrfs-next-73 #1
      [ 9482.147788] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      [ 9482.148709] Call Trace:
      [ 9482.149169]  dump_stack+0x8d/0xb5
      [ 9482.149628]  check_noncircular+0xff/0x110
      [ 9482.150090]  check_prev_add+0x91/0xc60
      [ 9482.150561]  ? kvm_clock_read+0x14/0x30
      [ 9482.151017]  ? kvm_sched_clock_read+0x5/0x10
      [ 9482.151470]  __lock_acquire+0x1740/0x3110
      [ 9482.151941]  ? __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.152402]  lock_acquire+0xd8/0x490
      [ 9482.152887]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.153354]  __mutex_lock+0xa3/0xb30
      [ 9482.153826]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.154301]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.154768]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.155226]  qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.155690]  btrfs_read_qgroup_config+0x43a/0x550 [btrfs]
      [ 9482.156160]  open_ctree+0x1228/0x18a0 [btrfs]
      [ 9482.156643]  btrfs_mount_root.cold+0x13/0xed [btrfs]
      [ 9482.157108]  ? rcu_read_lock_sched_held+0x5d/0x90
      [ 9482.157567]  ? kfree+0x31f/0x3e0
      [ 9482.158030]  legacy_get_tree+0x30/0x60
      [ 9482.158489]  vfs_get_tree+0x28/0xe0
      [ 9482.158947]  fc_mount+0xe/0x40
      [ 9482.159403]  vfs_kern_mount.part.0+0x71/0x90
      [ 9482.159875]  btrfs_mount+0x13b/0x3e0 [btrfs]
      [ 9482.160335]  ? rcu_read_lock_sched_held+0x5d/0x90
      [ 9482.160805]  ? kfree+0x31f/0x3e0
      [ 9482.161260]  ? legacy_get_tree+0x30/0x60
      [ 9482.161714]  legacy_get_tree+0x30/0x60
      [ 9482.162166]  vfs_get_tree+0x28/0xe0
      [ 9482.162616]  path_mount+0x2d7/0xa70
      [ 9482.163070]  do_mount+0x75/0x90
      [ 9482.163525]  __x64_sys_mount+0x8e/0xd0
      [ 9482.163986]  do_syscall_64+0x33/0x80
      [ 9482.164437]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [ 9482.164902] RIP: 0033:0x7f51e907caaa
    
    This happens because at btrfs_read_qgroup_config() we can call
    qgroup_rescan_init() while holding a read lock on a quota btree leaf,
    acquired by the previous call to btrfs_search_slot_for_read(), and
    qgroup_rescan_init() acquires the mutex qgroup_rescan_lock.
    
    A qgroup rescan worker does the opposite: it acquires the mutex
    qgroup_rescan_lock, at btrfs_qgroup_rescan_worker(), and then tries to
    update the qgroup status item in the quota btree through the call to
    update_qgroup_status_item(). This inversion of locking order
    between the qgroup_rescan_lock mutex and quota btree locks causes the
    splat.
    
    Fix this simply by releasing and freeing the path before calling
    qgroup_rescan_init() at btrfs_read_qgroup_config().
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aec62fa475afe706ae210c28eca38ef62ac19dbc
Author: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Date:   Wed Nov 18 18:03:26 2020 +0900

    btrfs: don't access possibly stale fs_info data for printing duplicate device
    
    commit 0697d9a610998b8bdee6b2390836cb2391d8fd1a upstream.
    
    Syzbot reported a possible use-after-free when printing a duplicate device
    warning device_list_add().
    
    At this point it can happen that a btrfs_device::fs_info is not correctly
    setup yet, so we're accessing stale data, when printing the warning
    message using the btrfs_printk() wrappers.
    
      ==================================================================
      BUG: KASAN: use-after-free in btrfs_printk+0x3eb/0x435 fs/btrfs/super.c:245
      Read of size 8 at addr ffff8880878e06a8 by task syz-executor225/7068
    
      CPU: 1 PID: 7068 Comm: syz-executor225 Not tainted 5.9.0-rc5-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x1d6/0x29e lib/dump_stack.c:118
       print_address_description+0x66/0x620 mm/kasan/report.c:383
       __kasan_report mm/kasan/report.c:513 [inline]
       kasan_report+0x132/0x1d0 mm/kasan/report.c:530
       btrfs_printk+0x3eb/0x435 fs/btrfs/super.c:245
       device_list_add+0x1a88/0x1d60 fs/btrfs/volumes.c:943
       btrfs_scan_one_device+0x196/0x490 fs/btrfs/volumes.c:1359
       btrfs_mount_root+0x48f/0xb60 fs/btrfs/super.c:1634
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       fc_mount fs/namespace.c:978 [inline]
       vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008
       btrfs_mount+0x33c/0xae0 fs/btrfs/super.c:1732
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       do_new_mount fs/namespace.c:2875 [inline]
       path_mount+0x179d/0x29e0 fs/namespace.c:3192
       do_mount fs/namespace.c:3205 [inline]
       __do_sys_mount fs/namespace.c:3413 [inline]
       __se_sys_mount+0x126/0x180 fs/namespace.c:3390
       do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x44840a
      RSP: 002b:00007ffedfffd608 EFLAGS: 00000293 ORIG_RAX: 00000000000000a5
      RAX: ffffffffffffffda RBX: 00007ffedfffd670 RCX: 000000000044840a
      RDX: 0000000020000000 RSI: 0000000020000100 RDI: 00007ffedfffd630
      RBP: 00007ffedfffd630 R08: 00007ffedfffd670 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000293 R12: 000000000000001a
      R13: 0000000000000004 R14: 0000000000000003 R15: 0000000000000003
    
      Allocated by task 6945:
       kasan_save_stack mm/kasan/common.c:48 [inline]
       kasan_set_track mm/kasan/common.c:56 [inline]
       __kasan_kmalloc+0x100/0x130 mm/kasan/common.c:461
       kmalloc_node include/linux/slab.h:577 [inline]
       kvmalloc_node+0x81/0x110 mm/util.c:574
       kvmalloc include/linux/mm.h:757 [inline]
       kvzalloc include/linux/mm.h:765 [inline]
       btrfs_mount_root+0xd0/0xb60 fs/btrfs/super.c:1613
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       fc_mount fs/namespace.c:978 [inline]
       vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008
       btrfs_mount+0x33c/0xae0 fs/btrfs/super.c:1732
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       do_new_mount fs/namespace.c:2875 [inline]
       path_mount+0x179d/0x29e0 fs/namespace.c:3192
       do_mount fs/namespace.c:3205 [inline]
       __do_sys_mount fs/namespace.c:3413 [inline]
       __se_sys_mount+0x126/0x180 fs/namespace.c:3390
       do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      Freed by task 6945:
       kasan_save_stack mm/kasan/common.c:48 [inline]
       kasan_set_track+0x3d/0x70 mm/kasan/common.c:56
       kasan_set_free_info+0x17/0x30 mm/kasan/generic.c:355
       __kasan_slab_free+0xdd/0x110 mm/kasan/common.c:422
       __cache_free mm/slab.c:3418 [inline]
       kfree+0x113/0x200 mm/slab.c:3756
       deactivate_locked_super+0xa7/0xf0 fs/super.c:335
       btrfs_mount_root+0x72b/0xb60 fs/btrfs/super.c:1678
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       fc_mount fs/namespace.c:978 [inline]
       vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008
       btrfs_mount+0x33c/0xae0 fs/btrfs/super.c:1732
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       do_new_mount fs/namespace.c:2875 [inline]
       path_mount+0x179d/0x29e0 fs/namespace.c:3192
       do_mount fs/namespace.c:3205 [inline]
       __do_sys_mount fs/namespace.c:3413 [inline]
       __se_sys_mount+0x126/0x180 fs/namespace.c:3390
       do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      The buggy address belongs to the object at ffff8880878e0000
       which belongs to the cache kmalloc-16k of size 16384
      The buggy address is located 1704 bytes inside of
       16384-byte region [ffff8880878e0000, ffff8880878e4000)
      The buggy address belongs to the page:
      page:0000000060704f30 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x878e0
      head:0000000060704f30 order:3 compound_mapcount:0 compound_pincount:0
      flags: 0xfffe0000010200(slab|head)
      raw: 00fffe0000010200 ffffea00028e9a08 ffffea00021e3608 ffff8880aa440b00
      raw: 0000000000000000 ffff8880878e0000 0000000100000001 0000000000000000
      page dumped because: kasan: bad access detected
    
      Memory state around the buggy address:
       ffff8880878e0580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff8880878e0600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      >ffff8880878e0680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                        ^
       ffff8880878e0700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff8880878e0780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ==================================================================
    
    The syzkaller reproducer for this use-after-free crafts a filesystem image
    and loop mounts it twice in a loop. The mount will fail as the crafted
    image has an invalid chunk tree. When this happens btrfs_mount_root() will
    call deactivate_locked_super(), which then cleans up fs_info and
    fs_info::sb. If a second thread now adds the same block-device to the
    filesystem, it will get detected as a duplicate device and
    device_list_add() will reject the duplicate and print a warning. But as
    the fs_info pointer passed in is non-NULL this will result in a
    use-after-free.
    
    Instead of printing possibly uninitialized or already freed memory in
    btrfs_printk(), explicitly pass in a NULL fs_info so the printing of the
    device name will be skipped altogether.
    
    There was a slightly different approach discussed in
    https://lore.kernel.org/linux-btrfs/20200114060920.4527-1-anand.jain@oracle.com/t/#u
    
    Link: https://lore.kernel.org/linux-btrfs/000000000000c9e14b05afcc41ba@google.com
    Reported-by: syzbot+582e66e5edf36a22c7b0@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5460d62d661c0fc53bfe83493821b1dc3dc969f4
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Fri Nov 20 19:43:17 2020 -0800

    netfilter: clear skb->next in NF_HOOK_LIST()
    
    NF_HOOK_LIST() uses list_del() to remove skb from the linked list,
    however, it is not sufficient as skb->next still points to other
    skb. We should just call skb_list_del_init() to clear skb->next,
    like the rest places which using skb list.
    
    This has been fixed in upstream by commit ca58fbe06c54
    ("netfilter: add and use nf_hook_slow_list()").
    
    Fixes: 9f17dbf04ddf ("netfilter: fix use-after-free in NF_HOOK_LIST")
    Reported-by: liuzx@knownsec.com
    Tested-by: liuzx@knownsec.com
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Edward Cree <ecree@solarflare.com>
    Cc: stable@vger.kernel.org # between 4.19 and 5.4
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98c9afedbfc11028c1e1b96bdb6a2401785f6941
Author: Igor Lubashev <ilubashe@akamai.com>
Date:   Mon Aug 26 21:39:12 2019 -0400

    perf event: Check ref_reloc_sym before using it
    
    commit e9a6882f267a8105461066e3ea6b4b6b9be1b807 upstream.
    
    Check for ref_reloc_sym before using it instead of checking
    symbol_conf.kptr_restrict and relying solely on that check.
    
    Reported-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Igor Lubashev <ilubashe@akamai.com>
    Tested-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1566869956-7154-2-git-send-email-ilubashe@akamai.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Dahl <ada@thorsis.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
