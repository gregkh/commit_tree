commit a1b977b49b66c75e6c51a515f6700371ae720217
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Oct 7 08:00:09 2020 +0200

    Linux 4.19.150
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201005142108.650363140@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 289fe546ea16c2dcb57c5198c5a7b7387604530e
Author: Will McVicker <willmcvicker@google.com>
Date:   Mon Aug 24 19:38:32 2020 +0000

    netfilter: ctnetlink: add a range check for l3/l4 protonum
    
    commit 1cc5ef91d2ff94d2bf2de3b3585423e8a1051cb6 upstream.
    
    The indexes to the nf_nat_l[34]protos arrays come from userspace. So
    check the tuple's family, e.g. l3num, when creating the conntrack in
    order to prevent an OOB memory access during setup.  Here is an example
    kernel panic on 4.14.180 when userspace passes in an index greater than
    NFPROTO_NUMPROTO.
    
    Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    Modules linked in:...
    Process poc (pid: 5614, stack limit = 0x00000000a3933121)
    CPU: 4 PID: 5614 Comm: poc Tainted: G S      W  O    4.14.180-g051355490483
    Hardware name: Qualcomm Technologies, Inc. SM8150 V2 PM8150 Google Inc. MSM
    task: 000000002a3dfffe task.stack: 00000000a3933121
    pc : __cfi_check_fail+0x1c/0x24
    lr : __cfi_check_fail+0x1c/0x24
    ...
    Call trace:
    __cfi_check_fail+0x1c/0x24
    name_to_dev_t+0x0/0x468
    nfnetlink_parse_nat_setup+0x234/0x258
    ctnetlink_parse_nat_setup+0x4c/0x228
    ctnetlink_new_conntrack+0x590/0xc40
    nfnetlink_rcv_msg+0x31c/0x4d4
    netlink_rcv_skb+0x100/0x184
    nfnetlink_rcv+0xf4/0x180
    netlink_unicast+0x360/0x770
    netlink_sendmsg+0x5a0/0x6a4
    ___sys_sendmsg+0x314/0x46c
    SyS_sendmsg+0xb4/0x108
    el0_svc_naked+0x34/0x38
    
    This crash is not happening since 5.4+, however, ctnetlink still
    allows for creating entries with unsupported layer 3 protocol number.
    
    Fixes: c1d10adb4a521 ("[NETFILTER]: Add ctnetlink port for nf_conntrack")
    Signed-off-by: Will McVicker <willmcvicker@google.com>
    [pablo@netfilter.org: rebased original patch on top of nf.git]
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ced8ce5d2157142c469eccc5eef5ea8ad579fa5e
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Sep 24 19:41:58 2020 -0400

    ep_create_wakeup_source(): dentry name can change under you...
    
    commit 3701cb59d892b88d569427586f01491552f377b1 upstream.
    
    or get freed, for that matter, if it's a long (separately stored)
    name.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90ef231ba534d43033884b8560df26e608ca0a21
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Sep 10 08:33:27 2020 -0400

    epoll: EPOLL_CTL_ADD: close the race in decision to take fast path
    
    commit fe0a916c1eae8e17e86c3753d13919177d63ed7e upstream.
    
    Checking for the lack of epitems refering to the epoll we want to insert into
    is not enough; we might have an insertion of that epoll into another one that
    has already collected the set of files to recheck for excessive reverse paths,
    but hasn't gotten to creating/inserting the epitem for it.
    
    However, any such insertion in progress can be detected - it will update the
    generation count in our epoll when it's done looking through it for files
    to check.  That gets done under ->mtx of our epoll and that allows us to
    detect that safely.
    
    We are *not* holding epmutex here, so the generation count is not stable.
    However, since both the update of ep->gen by loop check and (later)
    insertion into ->f_ep_link are done with ep->mtx held, we are fine -
    the sequence is
            grab epmutex
            bump loop_check_gen
            ...
            grab tep->mtx           // 1
            tep->gen = loop_check_gen
            ...
            drop tep->mtx           // 2
            ...
            grab tep->mtx           // 3
            ...
            insert into ->f_ep_link
            ...
            drop tep->mtx           // 4
            bump loop_check_gen
            drop epmutex
    and if the fastpath check in another thread happens for that
    eventpoll, it can come
            * before (1) - in that case fastpath is just fine
            * after (4) - we'll see non-empty ->f_ep_link, slow path
    taken
            * between (2) and (3) - loop_check_gen is stable,
    with ->mtx providing barriers and we end up taking slow path.
    
    Note that ->f_ep_link emptiness check is slightly racy - we are protected
    against insertions into that list, but removals can happen right under us.
    Not a problem - in the worst case we'll end up taking a slow path for
    no good reason.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff329915a5b1f6778344a6fc7b060c991376b095
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Sep 10 08:30:05 2020 -0400

    epoll: replace ->visited/visited_list with generation count
    
    commit 18306c404abe18a0972587a6266830583c60c928 upstream.
    
    removes the need to clear it, along with the races.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e3bbc4d23eeb90bf282e98c7dfeca7702df3169
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Sep 9 22:25:06 2020 -0400

    epoll: do not insert into poll queues until all sanity checks are done
    
    commit f8d4f44df056c5b504b0d49683fb7279218fd207 upstream.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c3886dc302329f199cc04f8a56ba44d17a0df16
Author: Or Cohen <orcohen@paloaltonetworks.com>
Date:   Thu Sep 3 21:05:28 2020 -0700

    net/packet: fix overflow in tpacket_rcv
    
    commit acf69c946233259ab4d64f8869d4037a198c7f06 upstream.
    
    Using tp_reserve to calculate netoff can overflow as
    tp_reserve is unsigned int and netoff is unsigned short.
    
    This may lead to macoff receving a smaller value then
    sizeof(struct virtio_net_hdr), and if po->has_vnet_hdr
    is set, an out-of-bounds write will occur when
    calling virtio_net_hdr_from_skb.
    
    The bug is fixed by converting netoff to unsigned int
    and checking if it exceeds USHRT_MAX.
    
    This addresses CVE-2020-14386
    
    Fixes: 8913336a7e8d ("packet: add PACKET_RESERVE sockopt")
    Signed-off-by: Or Cohen <orcohen@paloaltonetworks.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [ snu: backported to pre-5.3, changed tp_drops counting/locking ]
    Signed-off-by: Stefan Nuernberger <snu@amazon.com>
    CC: David Woodhouse <dwmw@amazon.co.uk>
    CC: Amit Shah <aams@amazon.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6f69f72c15d7f973f5709c5351f378f235b3654
Author: Laurent Dufour <ldufour@linux.ibm.com>
Date:   Fri Sep 25 21:19:31 2020 -0700

    mm: don't rely on system state to detect hot-plug operations
    
    commit f85086f95fa36194eb0db5cd5c12e56801b98523 upstream.
    
    In register_mem_sect_under_node() the system_state's value is checked to
    detect whether the call is made during boot time or during an hot-plug
    operation.  Unfortunately, that check against SYSTEM_BOOTING is wrong
    because regular memory is registered at SYSTEM_SCHEDULING state.  In
    addition, memory hot-plug operation can be triggered at this system
    state by the ACPI [1].  So checking against the system state is not
    enough.
    
    The consequence is that on system with interleaved node's ranges like this:
    
     Early memory node ranges
       node   1: [mem 0x0000000000000000-0x000000011fffffff]
       node   2: [mem 0x0000000120000000-0x000000014fffffff]
       node   1: [mem 0x0000000150000000-0x00000001ffffffff]
       node   0: [mem 0x0000000200000000-0x000000048fffffff]
       node   2: [mem 0x0000000490000000-0x00000007ffffffff]
    
    This can be seen on PowerPC LPAR after multiple memory hot-plug and
    hot-unplug operations are done.  At the next reboot the node's memory
    ranges can be interleaved and since the call to link_mem_sections() is
    made in topology_init() while the system is in the SYSTEM_SCHEDULING
    state, the node's id is not checked, and the sections registered to
    multiple nodes:
    
      $ ls -l /sys/devices/system/memory/memory21/node*
      total 0
      lrwxrwxrwx 1 root root     0 Aug 24 05:27 node1 -> ../../node/node1
      lrwxrwxrwx 1 root root     0 Aug 24 05:27 node2 -> ../../node/node2
    
    In that case, the system is able to boot but if later one of theses
    memory blocks is hot-unplugged and then hot-plugged, the sysfs
    inconsistency is detected and this is triggering a BUG_ON():
    
      kernel BUG at /Users/laurent/src/linux-ppc/mm/memory_hotplug.c:1084!
      Oops: Exception in kernel mode, sig: 5 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Modules linked in: rpadlpar_io rpaphp pseries_rng rng_core vmx_crypto gf128mul binfmt_misc ip_tables x_tables xfs libcrc32c crc32c_vpmsum autofs4
      CPU: 8 PID: 10256 Comm: drmgr Not tainted 5.9.0-rc1+ #25
      Call Trace:
        add_memory_resource+0x23c/0x340 (unreliable)
        __add_memory+0x5c/0xf0
        dlpar_add_lmb+0x1b4/0x500
        dlpar_memory+0x1f8/0xb80
        handle_dlpar_errorlog+0xc0/0x190
        dlpar_store+0x198/0x4a0
        kobj_attr_store+0x30/0x50
        sysfs_kf_write+0x64/0x90
        kernfs_fop_write+0x1b0/0x290
        vfs_write+0xe8/0x290
        ksys_write+0xdc/0x130
        system_call_exception+0x160/0x270
        system_call_common+0xf0/0x27c
    
    This patch addresses the root cause by not relying on the system_state
    value to detect whether the call is due to a hot-plug operation.  An
    extra parameter is added to link_mem_sections() detailing whether the
    operation is due to a hot-plug operation.
    
    [1] According to Oscar Salvador, using this qemu command line, ACPI
    memory hotplug operations are raised at SYSTEM_SCHEDULING state:
    
      $QEMU -enable-kvm -machine pc -smp 4,sockets=4,cores=1,threads=1 -cpu host -monitor pty \
            -m size=$MEM,slots=255,maxmem=4294967296k  \
            -numa node,nodeid=0,cpus=0-3,mem=512 -numa node,nodeid=1,mem=512 \
            -object memory-backend-ram,id=memdimm0,size=134217728 -device pc-dimm,node=0,memdev=memdimm0,id=dimm0,slot=0 \
            -object memory-backend-ram,id=memdimm1,size=134217728 -device pc-dimm,node=0,memdev=memdimm1,id=dimm1,slot=1 \
            -object memory-backend-ram,id=memdimm2,size=134217728 -device pc-dimm,node=0,memdev=memdimm2,id=dimm2,slot=2 \
            -object memory-backend-ram,id=memdimm3,size=134217728 -device pc-dimm,node=0,memdev=memdimm3,id=dimm3,slot=3 \
            -object memory-backend-ram,id=memdimm4,size=134217728 -device pc-dimm,node=1,memdev=memdimm4,id=dimm4,slot=4 \
            -object memory-backend-ram,id=memdimm5,size=134217728 -device pc-dimm,node=1,memdev=memdimm5,id=dimm5,slot=5 \
            -object memory-backend-ram,id=memdimm6,size=134217728 -device pc-dimm,node=1,memdev=memdimm6,id=dimm6,slot=6 \
    
    Fixes: 4fbce633910e ("mm/memory_hotplug.c: make register_mem_sect_under_node() a callback of walk_memory_range()")
    Signed-off-by: Laurent Dufour <ldufour@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Nathan Lynch <nathanl@linux.ibm.com>
    Cc: Scott Cheloha <cheloha@linux.ibm.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200915094143.79181-3-ldufour@linux.ibm.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25eaea1b33f2569f69a82dfddb3fb05384143bd0
Author: Laurent Dufour <ldufour@linux.ibm.com>
Date:   Fri Sep 25 21:19:28 2020 -0700

    mm: replace memmap_context by meminit_context
    
    commit c1d0da83358a2316d9be7f229f26126dbaa07468 upstream.
    
    Patch series "mm: fix memory to node bad links in sysfs", v3.
    
    Sometimes, firmware may expose interleaved memory layout like this:
    
     Early memory node ranges
       node   1: [mem 0x0000000000000000-0x000000011fffffff]
       node   2: [mem 0x0000000120000000-0x000000014fffffff]
       node   1: [mem 0x0000000150000000-0x00000001ffffffff]
       node   0: [mem 0x0000000200000000-0x000000048fffffff]
       node   2: [mem 0x0000000490000000-0x00000007ffffffff]
    
    In that case, we can see memory blocks assigned to multiple nodes in
    sysfs:
    
      $ ls -l /sys/devices/system/memory/memory21
      total 0
      lrwxrwxrwx 1 root root     0 Aug 24 05:27 node1 -> ../../node/node1
      lrwxrwxrwx 1 root root     0 Aug 24 05:27 node2 -> ../../node/node2
      -rw-r--r-- 1 root root 65536 Aug 24 05:27 online
      -r--r--r-- 1 root root 65536 Aug 24 05:27 phys_device
      -r--r--r-- 1 root root 65536 Aug 24 05:27 phys_index
      drwxr-xr-x 2 root root     0 Aug 24 05:27 power
      -r--r--r-- 1 root root 65536 Aug 24 05:27 removable
      -rw-r--r-- 1 root root 65536 Aug 24 05:27 state
      lrwxrwxrwx 1 root root     0 Aug 24 05:25 subsystem -> ../../../../bus/memory
      -rw-r--r-- 1 root root 65536 Aug 24 05:25 uevent
      -r--r--r-- 1 root root 65536 Aug 24 05:27 valid_zones
    
    The same applies in the node's directory with a memory21 link in both
    the node1 and node2's directory.
    
    This is wrong but doesn't prevent the system to run.  However when
    later, one of these memory blocks is hot-unplugged and then hot-plugged,
    the system is detecting an inconsistency in the sysfs layout and a
    BUG_ON() is raised:
    
      kernel BUG at /Users/laurent/src/linux-ppc/mm/memory_hotplug.c:1084!
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Modules linked in: rpadlpar_io rpaphp pseries_rng rng_core vmx_crypto gf128mul binfmt_misc ip_tables x_tables xfs libcrc32c crc32c_vpmsum autofs4
      CPU: 8 PID: 10256 Comm: drmgr Not tainted 5.9.0-rc1+ #25
      Call Trace:
        add_memory_resource+0x23c/0x340 (unreliable)
        __add_memory+0x5c/0xf0
        dlpar_add_lmb+0x1b4/0x500
        dlpar_memory+0x1f8/0xb80
        handle_dlpar_errorlog+0xc0/0x190
        dlpar_store+0x198/0x4a0
        kobj_attr_store+0x30/0x50
        sysfs_kf_write+0x64/0x90
        kernfs_fop_write+0x1b0/0x290
        vfs_write+0xe8/0x290
        ksys_write+0xdc/0x130
        system_call_exception+0x160/0x270
        system_call_common+0xf0/0x27c
    
    This has been seen on PowerPC LPAR.
    
    The root cause of this issue is that when node's memory is registered,
    the range used can overlap another node's range, thus the memory block
    is registered to multiple nodes in sysfs.
    
    There are two issues here:
    
     (a) The sysfs memory and node's layouts are broken due to these
         multiple links
    
     (b) The link errors in link_mem_sections() should not lead to a system
         panic.
    
    To address (a) register_mem_sect_under_node should not rely on the
    system state to detect whether the link operation is triggered by a hot
    plug operation or not.  This is addressed by the patches 1 and 2 of this
    series.
    
    Issue (b) will be addressed separately.
    
    This patch (of 2):
    
    The memmap_context enum is used to detect whether a memory operation is
    due to a hot-add operation or happening at boot time.
    
    Make it general to the hotplug operation and rename it as
    meminit_context.
    
    There is no functional change introduced by this patch
    
    Suggested-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Laurent Dufour <ldufour@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Rafael J . Wysocki" <rafael@kernel.org>
    Cc: Nathan Lynch <nathanl@linux.ibm.com>
    Cc: Scott Cheloha <cheloha@linux.ibm.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200915094143.79181-1-ldufour@linux.ibm.com
    Link: https://lkml.kernel.org/r/20200915132624.9723-1-ldufour@linux.ibm.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4ebc2d6aa3ac2aa92cac8f6f53662df2c4904c9
Author: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
Date:   Fri Oct 2 17:16:11 2020 +0200

    random32: Restore __latent_entropy attribute on net_rand_state
    
    [ Upstream commit 09a6b0bc3be793ca8cba580b7992d73e9f68f15d ]
    
    Commit f227e3ec3b5c ("random32: update the net random state on interrupt
    and activity") broke compilation and was temporarily fixed by Linus in
    83bdc7275e62 ("random32: remove net_rand_state from the latent entropy
    gcc plugin") by entirely moving net_rand_state out of the things handled
    by the latent_entropy GCC plugin.
    
    From what I understand when reading the plugin code, using the
    __latent_entropy attribute on a declaration was the wrong part and
    simply keeping the __latent_entropy attribute on the variable definition
    was the correct fix.
    
    Fixes: 83bdc7275e62 ("random32: remove net_rand_state from the latent entropy gcc plugin")
    Acked-by: Willy Tarreau <w@1wt.eu>
    Cc: Emese Revfy <re.emese@gmail.com>
    Signed-off-by: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78ba2e803f40d55e4147f12bf9b29ac1f933992f
Author: Vincent Huang <vincent.huang@tw.synaptics.com>
Date:   Mon Sep 28 16:19:05 2020 -0700

    Input: trackpoint - enable Synaptics trackpoints
    
    [ Upstream commit 996d585b079ad494a30cac10e08585bcd5345125 ]
    
    Add Synaptics IDs in trackpoint_start_protocol() to mark them as valid.
    
    Signed-off-by: Vincent Huang <vincent.huang@tw.synaptics.com>
    Fixes: 6c77545af100 ("Input: trackpoint - add new trackpoint variant IDs")
    Reviewed-by: Harry Cutts <hcutts@chromium.org>
    Tested-by: Harry Cutts <hcutts@chromium.org>
    Link: https://lore.kernel.org/r/20200924053013.1056953-1-vincent.huang@tw.synaptics.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69e0a9eb6c49ccbf1d565e8a4d188132af3df70e
Author: Nicolas VINCENT <nicolas.vincent@vossloh.com>
Date:   Wed Sep 23 16:08:40 2020 +0200

    i2c: cpm: Fix i2c_ram structure
    
    [ Upstream commit a2bd970aa62f2f7f80fd0d212b1d4ccea5df4aed ]
    
    the i2c_ram structure is missing the sdmatmp field mentionned in
    datasheet for MPC8272 at paragraph 36.5. With this field missing, the
    hardware would write past the allocated memory done through
    cpm_muram_alloc for the i2c_ram structure and land in memory allocated
    for the buffers descriptors corrupting the cbd_bufaddr field. Since this
    field is only set during setup(), the first i2c transaction would work
    and the following would send data read from an arbitrary memory
    location.
    
    Fixes: 61045dbe9d8d ("i2c: Add support for I2C bus on Freescale CPM1/CPM2 controllers")
    Signed-off-by: Nicolas VINCENT <nicolas.vincent@vossloh.com>
    Acked-by: Jochen Friedrich <jochen@scram.de>
    Acked-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 543db1d99b0993d891acd91f667202fa17140e51
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Fri Sep 18 09:13:35 2020 +0800

    iommu/exynos: add missing put_device() call in exynos_iommu_of_xlate()
    
    [ Upstream commit 1a26044954a6d1f4d375d5e62392446af663be7a ]
    
    if of_find_device_by_node() succeed, exynos_iommu_of_xlate() doesn't have
    a corresponding put_device(). Thus add put_device() to fix the exception
    handling for this function implementation.
    
    Fixes: aa759fd376fb ("iommu/exynos: Add callback for initializing devices from device tree")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20200918011335.909141-1-yukuai3@huawei.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a84da5ea38334ff79c13259b7aa5cf50ed52aa67
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Sep 22 14:40:46 2020 +0200

    clk: samsung: exynos4: mark 'chipid' clock as CLK_IGNORE_UNUSED
    
    [ Upstream commit f3bb0f796f5ffe32f0fbdce5b1b12eb85511158f ]
    
    The ChipID IO region has it's own clock, which is being disabled while
    scanning for unused clocks. It turned out that some CPU hotplug, CPU idle
    or even SOC firmware code depends on the reads from that area. Fix the
    mysterious hang caused by entering deep CPU idle state by ignoring the
    'chipid' clock during unused clocks scan, as there are no direct clients
    for it which will keep it enabled.
    
    Fixes: e062b571777f ("clk: exynos4: register clocks using common clock framework")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20200922124046.10496-1-m.szyprowski@samsung.com
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 345c6f260c89e417de6e7d81f3366bd5079f48a3
Author: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
Date:   Tue Sep 15 16:42:52 2020 -0500

    nfs: Fix security label length not being reset
    
    [ Upstream commit d33030e2ee3508d65db5644551435310df86010e ]
    
    nfs_readdir_page_filler() iterates over entries in a directory, reusing
    the same security label buffer, but does not reset the buffer's length.
    This causes decode_attr_security_label() to return -ERANGE if an entry's
    security label is longer than the previous one's. This error, in
    nfs4_decode_dirent(), only gets passed up as -EAGAIN, which causes another
    failed attempt to copy into the buffer. The second error is ignored and
    the remaining entries do not show up in ls, specifically the getdents64()
    syscall.
    
    Reproduce by creating multiple files in NFS and giving one of the later
    files a longer security label. ls will not see that file nor any that are
    added afterwards, though they will exist on the backend.
    
    In nfs_readdir_page_filler(), reset security label buffer length before
    every reuse
    
    Signed-off-by: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
    Fixes: b4487b935452 ("nfs: Fix getxattr kernel panic and memory overflow")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 837af2c131c030322881f69e1098885a0aea2422
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Tue Sep 8 09:17:10 2020 +1200

    pinctrl: mvebu: Fix i2c sda definition for 98DX3236
    
    [ Upstream commit 63c3212e7a37d68c89a13bdaebce869f4e064e67 ]
    
    Per the datasheet the i2c functions use MPP_Sel=0x1. They are documented
    as using MPP_Sel=0x4 as well but mixing 0x1 and 0x4 is clearly wrong. On
    the board tested 0x4 resulted in a non-functioning i2c bus so stick with
    0x1 which works.
    
    Fixes: d7ae8f8dee7f ("pinctrl: mvebu: pinctrl driver for 98DX3236 SoC")
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20200907211712.9697-2-chris.packham@alliedtelesis.co.nz
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3851aa13f46b44849dbfd234edebea1a645121f0
Author: Taiping Lai <taiping.lai@unisoc.com>
Date:   Mon Aug 31 17:09:47 2020 +0800

    gpio: sprd: Clear interrupt when setting the type as edge
    
    [ Upstream commit 5fcface659aab7eac4bd65dd116d98b8f7bb88d5 ]
    
    The raw interrupt status of GPIO maybe set before the interrupt is enabled,
    which would trigger the interrupt event once enabled it from user side.
    This is the case for edge interrupts only. Adding a clear operation when
    setting interrupt type can avoid that.
    
    There're a few considerations for the solution:
    1) This issue is for edge interrupt only; The interrupts requested by users
       are IRQ_TYPE_LEVEL_HIGH as default, so clearing interrupt when request
       is useless.
    2) The interrupt type can be set to edge when request and following up
       with clearing it though, but the problem is still there once users set
       the interrupt type to level trggier.
    3) We can add a clear operation after each time of setting interrupt
       enable bit, but it is redundant for level trigger interrupt.
    
    Therefore, the solution is this patch seems the best for now.
    
    Fixes: 9a3821c2bb47 ("gpio: Add GPIO driver for Spreadtrum SC9860 platform")
    Signed-off-by: Taiping Lai <taiping.lai@unisoc.com>
    Signed-off-by: Chunyan Zhang <chunyan.zhang@unisoc.com>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ffc945b2ab8c52bb147b966636b87ba8884045f
Author: James Smart <james.smart@broadcom.com>
Date:   Thu Sep 17 13:33:22 2020 -0700

    nvme-fc: fail new connections to a deleted host or remote port
    
    [ Upstream commit 9e0e8dac985d4bd07d9e62922b9d189d3ca2fccf ]
    
    The lldd may have made calls to delete a remote port or local port and
    the delete is in progress when the cli then attempts to create a new
    controller. Currently, this proceeds without error although it can't be
    very successful.
    
    Fix this by validating that both the host port and remote port are
    present when a new controller is to be created.
    
    Signed-off-by: James Smart <james.smart@broadcom.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f72de67c77398d2e3b50e09e82a6c5131841462
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Fri Sep 4 12:28:12 2020 +1200

    spi: fsl-espi: Only process interrupts for expected events
    
    [ Upstream commit b867eef4cf548cd9541225aadcdcee644669b9e1 ]
    
    The SPIE register contains counts for the TX FIFO so any time the irq
    handler was invoked we would attempt to process the RX/TX fifos. Use the
    SPIM value to mask the events so that we only process interrupts that
    were expected.
    
    This was a latent issue exposed by commit 3282a3da25bd ("powerpc/64:
    Implement soft interrupt replay in C").
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Link: https://lore.kernel.org/r/20200904002812.7300-1-chris.packham@alliedtelesis.co.nz
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 487882d928cadeea0edd08fa1e659a2e6edf53e8
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Sep 17 14:50:31 2020 +0200

    mac80211: do not allow bigger VHT MPDUs than the hardware supports
    
    [ Upstream commit 3bd5c7a28a7c3aba07a2d300d43f8e988809e147 ]
    
    Limit maximum VHT MPDU size by local capability.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20200917125031.45009-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fcf25b4f8af806064c7b9c037bff8067ba90701
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Sep 16 14:25:07 2020 -0700

    drivers/net/wan/hdlc: Set skb->protocol before transmitting
    
    [ Upstream commit 9fb030a70431a2a2a1b292dbf0b2f399cc072c16 ]
    
    This patch sets skb->protocol before transmitting frames on the HDLC
    device, so that a user listening on the HDLC device with an AF_PACKET
    socket will see outgoing frames' sll_protocol field correctly set and
    consistent with that of incoming frames.
    
    1. Control frames in hdlc_cisco and hdlc_ppp
    
    When these drivers send control frames, skb->protocol is not set.
    
    This value should be set to htons(ETH_P_HDLC), because when receiving
    control frames, their skb->protocol is set to htons(ETH_P_HDLC).
    
    When receiving, hdlc_type_trans in hdlc.h is called, which then calls
    cisco_type_trans or ppp_type_trans. The skb->protocol of control frames
    is set to htons(ETH_P_HDLC) so that the control frames can be received
    by hdlc_rcv in hdlc.c, which calls cisco_rx or ppp_rx to process the
    control frames.
    
    2. hdlc_fr
    
    When this driver sends control frames, skb->protocol is set to internal
    values used in this driver.
    
    When this driver sends data frames (from upper stacked PVC devices),
    skb->protocol is the same as that of the user data packet being sent on
    the upper PVC device (for normal PVC devices), or is htons(ETH_P_802_3)
    (for Ethernet-emulating PVC devices).
    
    However, skb->protocol for both control frames and data frames should be
    set to htons(ETH_P_HDLC), because when receiving, all frames received on
    the HDLC device will have their skb->protocol set to htons(ETH_P_HDLC).
    
    When receiving, hdlc_type_trans in hdlc.h is called, and because this
    driver doesn't provide a type_trans function in struct hdlc_proto,
    all frames will have their skb->protocol set to htons(ETH_P_HDLC).
    The frames are then received by hdlc_rcv in hdlc.c, which calls fr_rx
    to process the frames (control frames are consumed and data frames
    are re-received on upper PVC devices).
    
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 596d087ef1628d84ddc56797f7ec33daac97bf11
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Sep 16 09:49:18 2020 -0700

    drivers/net/wan/lapbether: Make skb->protocol consistent with the header
    
    [ Upstream commit 83f9a9c8c1edc222846dc1bde6e3479703e8e5a3 ]
    
    This driver is a virtual driver stacked on top of Ethernet interfaces.
    
    When this driver transmits data on the Ethernet device, the skb->protocol
    setting is inconsistent with the Ethernet header prepended to the skb.
    
    This causes a user listening on the Ethernet interface with an AF_PACKET
    socket, to see different sll_protocol values for incoming and outgoing
    frames, because incoming frames would have this value set by parsing the
    Ethernet header.
    
    This patch changes the skb->protocol value for outgoing Ethernet frames,
    making it consistent with the Ethernet header prepended. This makes a
    user listening on the Ethernet device with an AF_PACKET socket, to see
    the same sll_protocol value for incoming and outgoing frames.
    
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2df194a0d50bc1370c6761f5b80d3a32f42bcd4
Author: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date:   Tue Sep 15 20:53:25 2020 -0700

    nvme-core: get/put ctrl and transport module in nvme_dev_open/release()
    
    [ Upstream commit 52a3974feb1a3eec25d8836d37a508b67b0a9cd0 ]
    
    Get and put the reference to the ctrl in the nvme_dev_open() and
    nvme_dev_release() before and after module get/put for ctrl in char
    device file operations.
    
    Introduce char_dev relase function, get/put the controller and module
    which allows us to fix the potential Oops which can be easily reproduced
    with a passthru ctrl (although the problem also exists with pure user
    access):
    
    Entering kdb (current=0xffff8887f8290000, pid 3128) on processor 30 Oops: (null)
    due to oops @ 0xffffffffa01019ad
    CPU: 30 PID: 3128 Comm: bash Tainted: G        W  OE     5.8.0-rc4nvme-5.9+ #35
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.4
    RIP: 0010:nvme_free_ctrl+0x234/0x285 [nvme_core]
    Code: 57 10 a0 e8 73 bf 02 e1 ba 3d 11 00 00 48 c7 c6 98 33 10 a0 48 c7 c7 1d 57 10 a0 e8 5b bf 02 e1 8
    RSP: 0018:ffffc90001d63de0 EFLAGS: 00010246
    RAX: ffffffffa05c0440 RBX: ffff8888119e45a0 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: ffff8888177e9550 RDI: ffff8888119e43b0
    RBP: ffff8887d4768000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: ffffc90001d63c90 R12: ffff8888119e43b0
    R13: ffff8888119e5108 R14: dead000000000100 R15: ffff8888119e5108
    FS:  00007f1ef27b0740(0000) GS:ffff888817600000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffffffa05c0470 CR3: 00000007f6bee000 CR4: 00000000003406e0
    Call Trace:
     device_release+0x27/0x80
     kobject_put+0x98/0x170
     nvmet_passthru_ctrl_disable+0x4a/0x70 [nvmet]
     nvmet_passthru_enable_store+0x4c/0x90 [nvmet]
     configfs_write_file+0xe6/0x150
     vfs_write+0xba/0x1e0
     ksys_write+0x5f/0xe0
     do_syscall_64+0x52/0xb0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7f1ef1eb2840
    Code: Bad RIP value.
    RSP: 002b:00007fffdbff0eb8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f1ef1eb2840
    RDX: 0000000000000002 RSI: 00007f1ef27d2000 RDI: 0000000000000001
    RBP: 00007f1ef27d2000 R08: 000000000000000a R09: 00007f1ef27b0740
    R10: 0000000000000001 R11: 0000000000000246 R12: 00007f1ef2186400
    R13: 0000000000000002 R14: 0000000000000001 R15: 0000000000000000
    
    With this patch fix we take the module ref count in nvme_dev_open() and
    release that ref count in newly introduced nvme_dev_release().
    
    Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22edeb67dfa89f1e1394dfbd8702b8dc3ae55062
Author: Olympia Giannou <ogiannou@gmail.com>
Date:   Fri Sep 11 14:17:24 2020 +0000

    rndis_host: increase sleep time in the query-response loop
    
    [ Upstream commit 4202c9fdf03d79dedaa94b2c4cf574f25793d669 ]
    
    Some WinCE devices face connectivity issues via the NDIS interface. They
    fail to register, resulting in -110 timeout errors and failures during the
    probe procedure.
    
    In this kind of WinCE devices, the Windows-side ndis driver needs quite
    more time to be loaded and configured, so that the linux rndis host queries
    to them fail to be responded correctly on time.
    
    More specifically, when INIT is called on the WinCE side - no other
    requests can be served by the Client and this results in a failed QUERY
    afterwards.
    
    The increase of the waiting time on the side of the linux rndis host in
    the command-response loop leaves the INIT process to complete and respond
    to a QUERY, which comes afterwards. The WinCE devices with this special
    "feature" in their ndis driver are satisfied by this fix.
    
    Signed-off-by: Olympia Giannou <olympia.giannou@leica-geosystems.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f9f01cfc32b4f39891a88dd653c89cf7d7220f4
Author: Lucy Yan <lucyyan@google.com>
Date:   Thu Sep 10 12:05:09 2020 -0700

    net: dec: de2104x: Increase receive ring size for Tulip
    
    [ Upstream commit ee460417d254d941dfea5fb7cff841f589643992 ]
    
    Increase Rx ring size to address issue where hardware is reaching
    the receive work limit.
    
    Before:
    
    [  102.223342] de2104x 0000:17:00.0 eth0: rx work limit reached
    [  102.245695] de2104x 0000:17:00.0 eth0: rx work limit reached
    [  102.251387] de2104x 0000:17:00.0 eth0: rx work limit reached
    [  102.267444] de2104x 0000:17:00.0 eth0: rx work limit reached
    
    Signed-off-by: Lucy Yan <lucyyan@google.com>
    Reviewed-by: Moritz Fischer <mdf@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87a4f2848cb4bc1d5810c399dc274d3894bfddcf
Author: Martin Cerveny <m.cerveny@computer.org>
Date:   Sun Sep 6 18:21:40 2020 +0200

    drm/sun4i: mixer: Extend regmap max_register
    
    [ Upstream commit 74ea06164cda81dc80e97790164ca533fd7e3087 ]
    
    Better guess. Secondary CSC registers are from 0xF0000.
    
    Signed-off-by: Martin Cerveny <m.cerveny@computer.org>
    Reviewed-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200906162140.5584-3-m.cerveny@computer.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 342ee084a1bbf62ace68f03a59742da38e2b009f
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Sep 2 17:06:58 2020 -0700

    drivers/net/wan/hdlc_fr: Add needed_headroom for PVC devices
    
    [ Upstream commit 44a049c42681de71c783d75cd6e56b4e339488b0 ]
    
    PVC devices are virtual devices in this driver stacked on top of the
    actual HDLC device. They are the devices normal users would use.
    PVC devices have two types: normal PVC devices and Ethernet-emulating
    PVC devices.
    
    When transmitting data with PVC devices, the ndo_start_xmit function
    will prepend a header of 4 or 10 bytes. Currently this driver requests
    this headroom to be reserved for normal PVC devices by setting their
    hard_header_len to 10. However, this does not work when these devices
    are used with AF_PACKET/RAW sockets. Also, this driver does not request
    this headroom for Ethernet-emulating PVC devices (but deals with this
    problem by reallocating the skb when needed, which is not optimal).
    
    This patch replaces hard_header_len with needed_headroom, and set
    needed_headroom for Ethernet-emulating PVC devices, too. This makes
    the driver to request headroom for all PVC devices in all cases.
    
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80f0f9b5803e1394c5bbcb7259359b3ab9d6b335
Author: Jean Delvare <jdelvare@suse.de>
Date:   Mon Sep 28 11:10:37 2020 +0200

    drm/amdgpu: restore proper ref count in amdgpu_display_crtc_set_config
    
    commit a39d0d7bdf8c21ac7645c02e9676b5cb2b804c31 upstream.
    
    A recent attempt to fix a ref count leak in
    amdgpu_display_crtc_set_config() turned out to be doing too much and
    "fixed" an intended decrease as if it were a leak. Undo that part to
    restore the proper balance. This is the very nature of this function
    to increase or decrease the power reference count depending on the
    situation.
    
    Consequences of this bug is that the power reference would
    eventually get down to 0 while the display was still in use,
    resulting in that display switching off unexpectedly.
    
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Fixes: e008fa6fb415 ("drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config")
    Cc: stable@vger.kernel.org
    Cc: Navid Emamdoost <navid.emamdoost@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fd5a462eb7b39694ae013450dc47d84cdf7204a
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Sep 29 12:40:31 2020 -0400

    ftrace: Move RCU is watching check after recursion check
    
    commit b40341fad6cc2daa195f8090fd3348f18fff640a upstream.
    
    The first thing that the ftrace function callback helper functions should do
    is to check for recursion. Peter Zijlstra found that when
    "rcu_is_watching()" had its notrace removed, it caused perf function tracing
    to crash. This is because the call of rcu_is_watching() is tested before
    function recursion is checked and and if it is traced, it will cause an
    infinite recursion loop.
    
    rcu_is_watching() should still stay notrace, but to prevent this should
    never had crashed in the first place. The recursion prevention must be the
    first thing done in callback functions.
    
    Link: https://lore.kernel.org/r/20200929112541.GM2628@hirez.programming.kicks-ass.net
    
    Cc: stable@vger.kernel.org
    Cc: Paul McKenney <paulmck@kernel.org>
    Fixes: c68c0fa293417 ("ftrace: Have ftrace_ops_get_func() handle RCU and PER_CPU flags too")
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reported-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eab97fc2aa4a6e6966d07b596a4bb6b5c68886b3
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Sep 28 16:21:17 2020 -0700

    Input: i8042 - add nopnp quirk for Acer Aspire 5 A515
    
    commit 5fc27b098dafb8e30794a9db0705074c7d766179 upstream.
    
    Touchpad on this laptop is not detected properly during boot, as PNP
    enumerates (wrongly) AUX port as disabled on this machine.
    
    Fix that by adding this board (with admittedly quite funny DMI
    identifiers) to nopnp quirk list.
    
    Reported-by: Andrés Barrantes Silman <andresbs2000@protonmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Link: https://lore.kernel.org/r/nycvar.YFH.7.76.2009252337340.3336@cbobk.fhfr.pm
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f2acd64ac15271dc47fe42b6685fc64085b4d56
Author: Sebastien Boeuf <sebastien.boeuf@intel.com>
Date:   Fri Feb 14 12:48:01 2020 +0100

    net: virtio_vsock: Enhance connection semantics
    
    [ Upstream commit df12eb6d6cd920ab2f0e0a43cd6e1c23a05cea91 ]
    
    Whenever the vsock backend on the host sends a packet through the RX
    queue, it expects an answer on the TX queue. Unfortunately, there is one
    case where the host side will hang waiting for the answer and might
    effectively never recover if no timeout mechanism was implemented.
    
    This issue happens when the guest side starts binding to the socket,
    which insert a new bound socket into the list of already bound sockets.
    At this time, we expect the guest to also start listening, which will
    trigger the sk_state to move from TCP_CLOSE to TCP_LISTEN. The problem
    occurs if the host side queued a RX packet and triggered an interrupt
    right between the end of the binding process and the beginning of the
    listening process. In this specific case, the function processing the
    packet virtio_transport_recv_pkt() will find a bound socket, which means
    it will hit the switch statement checking for the sk_state, but the
    state won't be changed into TCP_LISTEN yet, which leads the code to pick
    the default statement. This default statement will only free the buffer,
    while it should also respond to the host side, by sending a packet on
    its TX queue.
    
    In order to simply fix this unfortunate chain of events, it is important
    that in case the default statement is entered, and because at this stage
    we know the host side is waiting for an answer, we must send back a
    packet containing the operation VIRTIO_VSOCK_OP_RST.
    
    One could say that a proper timeout mechanism on the host side will be
    enough to avoid the backend to hang. But the point of this patch is to
    ensure the normal use case will be provided with proper responsiveness
    when it comes to establishing the connection.
    
    Signed-off-by: Sebastien Boeuf <sebastien.boeuf@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c20b974aac73b192fcb4aa8a3e3f901d1a9e591
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Thu Nov 14 10:57:40 2019 +0100

    vsock/virtio: add transport parameter to the virtio_transport_reset_no_sock()
    
    [ Upstream commit 4c7246dc45e2706770d5233f7ce1597a07e069ba ]
    
    We are going to add 'struct vsock_sock *' parameter to
    virtio_transport_get_ops().
    
    In some cases, like in the virtio_transport_reset_no_sock(),
    we don't have any socket assigned to the packet received,
    so we can't use the virtio_transport_get_ops().
    
    In order to allow virtio_transport_reset_no_sock() to use the
    '.send_pkt' callback from the 'vhost_transport' or 'virtio_transport',
    we add the 'struct virtio_transport *' to it and to its caller:
    virtio_transport_recv_pkt().
    
    We moved the 'vhost_transport' and 'virtio_transport' definition,
    to pass their address to the virtio_transport_recv_pkt().
    
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a5a7a88cc6f587e2119bbfbd8299ba31e5ac9d8
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jul 5 13:04:53 2019 +0200

    vsock/virtio: stop workers during the .remove()
    
    [ Upstream commit 17dd1367389cfe7f150790c83247b68e0c19d106 ]
    
    Before to call vdev->config->reset(vdev) we need to be sure that
    no one is accessing the device, for this reason, we add new variables
    in the struct virtio_vsock to stop the workers during the .remove().
    
    This patch also add few comments before vdev->config->reset(vdev)
    and vdev->config->del_vqs(vdev).
    
    Suggested-by: Stefan Hajnoczi <stefanha@redhat.com>
    Suggested-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1fa81b7cadc479924412de67e5737d45b00e01ac
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jul 5 13:04:52 2019 +0200

    vsock/virtio: use RCU to avoid use-after-free on the_virtio_vsock
    
    [ Upstream commit 9c7a5582f5d720dc35cfcc42ccaded69f0642e4a ]
    
    Some callbacks used by the upper layers can run while we are in the
    .remove(). A potential use-after-free can happen, because we free
    the_virtio_vsock without knowing if the callbacks are over or not.
    
    To solve this issue we move the assignment of the_virtio_vsock at the
    end of .probe(), when we finished all the initialization, and at the
    beginning of .remove(), before to release resources.
    For the same reason, we do the same also for the vdev->priv.
    
    We use RCU to be sure that all callbacks that use the_virtio_vsock
    ended before freeing it. This is not required for callbacks that
    use vdev->priv, because after the vdev->config->del_vqs() we are sure
    that they are ended and will no longer be invoked.
    
    We also take the mutex during the .remove() to avoid that .probe() can
    run while we are resetting the device.
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4b27faf3ed987a8eb02f944276796335145a6d4
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Aug 31 15:26:57 2020 -0500

    clk: socfpga: stratix10: fix the divider for the emac_ptp_free_clk
    
    commit b02cf0c4736c65c6667f396efaae6b5521e82abf upstream.
    
    The fixed divider the emac_ptp_free_clk should be 2, not 4.
    
    Fixes: 07afb8db7340 ("clk: socfpga: stratix10: add clock driver for
    Stratix10 platform")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Link: https://lore.kernel.org/r/20200831202657.8224-1-dinguyen@kernel.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 735cbbcddd83087dca4f66d835af1936f8ab4fdc
Author: dillon min <dillon.minfei@gmail.com>
Date:   Thu Sep 3 15:30:21 2020 +0800

    gpio: tc35894: fix up tc35894 interrupt configuration
    
    commit 214b0e1ad01abf4c1f6d8d28fa096bf167e47cef upstream.
    
    The offset of regmap is incorrect, j * 8 is move to the
    wrong register.
    
    for example:
    
    asume i = 0, j = 1. we want to set KPY5 as interrupt
    falling edge mode, regmap[0][1] should be TC3589x_GPIOIBE1 0xcd
    but, regmap[i] + j * 8 = TC3589x_GPIOIBE0 + 8 ,point to 0xd4,
    this is TC3589x_GPIOIE2 not TC3589x_GPIOIBE1.
    
    Fixes: d88b25be3584 ("gpio: Add TC35892 GPIO driver")
    Cc: Cc: stable@vger.kernel.org
    Signed-off-by: dillon min <dillon.minfei@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc8df1d63eb64fae9b4871a9602a66dc3f0095ba
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Tue Sep 8 15:07:49 2020 +0200

    gpio: mockup: fix resource leak in error path
    
    commit 1b02d9e770cd7087f34c743f85ccf5ea8372b047 upstream.
    
    If the module init function fails after creating the debugs directory,
    it's never removed. Add proper cleanup calls to avoid this resource
    leak.
    
    Fixes: 9202ba2397d1 ("gpio: mockup: implement event injecting over debugfs")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69868141bcf701a7d5b4c1999dda13eb84e0ff56
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Sun Sep 20 18:01:58 2020 +0100

    USB: gadget: f_ncm: Fix NDP16 datagram validation
    
    commit 2b405533c2560d7878199c57d95a39151351df72 upstream.
    
    commit 2b74b0a04d3e ("USB: gadget: f_ncm: add bounds checks to ncm_unwrap_ntb()")
    adds important bounds checking however it unfortunately also introduces  a
    bug with respect to section 3.3.1 of the NCM specification.
    
    wDatagramIndex[1] : "Byte index, in little endian, of the second datagram
    described by this NDP16. If zero, then this marks the end of the sequence
    of datagrams in this NDP16."
    
    wDatagramLength[1]: "Byte length, in little endian, of the second datagram
    described by this NDP16. If zero, then this marks the end of the sequence
    of datagrams in this NDP16."
    
    wDatagramIndex[1] and wDatagramLength[1] respectively then may be zero but
    that does not mean we should throw away the data referenced by
    wDatagramIndex[0] and wDatagramLength[0] as is currently the case.
    
    Breaking the loop on (index2 == 0 || dg_len2 == 0) should come at the end
    as was previously the case and checks for index2 and dg_len2 should be
    removed since zero is valid.
    
    I'm not sure how much testing the above patch received but for me right now
    after enumeration ping doesn't work. Reverting the commit restores ping,
    scp, etc.
    
    The extra validation associated with wDatagramIndex[0] and
    wDatagramLength[0] appears to be valid so, this change removes the incorrect
    restriction on wDatagramIndex[1] and wDatagramLength[1] restoring data
    processing between host and device.
    
    Fixes: 2b74b0a04d3e ("USB: gadget: f_ncm: add bounds checks to ncm_unwrap_ntb()")
    Cc: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Cc: Brooke Basile <brookebasile@gmail.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Link: https://lore.kernel.org/r/20200920170158.1217068-1-bryan.odonoghue@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9ac777f96d955c9512498b10387a9d25e42de97
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Sep 27 12:48:21 2020 +0200

    mmc: sdhci: Workaround broken command queuing on Intel GLK based IRBIS models
    
    commit afd7f30886b0b445a4240a99020458a9772f2b89 upstream.
    
    Commit bedf9fc01ff1 ("mmc: sdhci: Workaround broken command queuing on
    Intel GLK"), disabled command-queuing on Intel GLK based LENOVO models
    because of it being broken due to what is believed to be a bug in
    the BIOS.
    
    It seems that the BIOS of some IRBIS models, including the IRBIS NB111
    model has the same issue, so disable command queuing there too.
    
    Fixes: bedf9fc01ff1 ("mmc: sdhci: Workaround broken command queuing on Intel GLK")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=209397
    Reported-and-tested-by: RussianNeuroMancer <russianneuromancer@ya.ru>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20200927104821.5676-1-hdegoede@redhat.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
