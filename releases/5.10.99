commit fb063a6465f9d17a1bd46a678bc1ffaa84e2f486
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Feb 8 18:30:41 2022 +0100

    Linux 5.10.99
    
    Link: https://lore.kernel.org/r/20220207103757.232676988@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Slade Watkins <slade@sladewatkins.com>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4889d6ee9e483c7221bc94692541632f15ffbd50
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jan 26 12:54:54 2022 +0100

    selftests: nft_concat_range: add test for reload with no element add/del
    
    commit eda0cf1202acf1ef47f93d8f92d4839213431424 upstream.
    
    Add a specific test for the reload issue fixed with
    commit 23c54263efd7cb ("netfilter: nft_set_pipapo: allocate pcpu scratch maps on clone").
    
    Add to set, then flush set content + restore without other add/remove in
    the transaction.
    
    On kernels before the fix, this test case fails:
      net,mac with reload    [FAIL]
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 557727313534d9f92e782179372833fd3499f231
Author: Waiman Long <longman@redhat.com>
Date:   Wed Feb 2 22:31:03 2022 -0500

    cgroup/cpuset: Fix "suspicious RCU usage" lockdep warning
    
    commit 2bdfd2825c9662463371e6691b1a794e97fa36b4 upstream.
    
    It was found that a "suspicious RCU usage" lockdep warning was issued
    with the rcu_read_lock() call in update_sibling_cpumasks().  It is
    because the update_cpumasks_hier() function may sleep. So we have
    to release the RCU lock, call update_cpumasks_hier() and reacquire
    it afterward.
    
    Also add a percpu_rwsem_assert_held() in update_sibling_cpumasks()
    instead of stating that in the comment.
    
    Fixes: 4716909cc5c5 ("cpuset: Track cpusets that use parent's effective_cpus")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Tested-by: Phil Auld <pauld@redhat.com>
    Reviewed-by: Phil Auld <pauld@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1f7d1a22fd73034af73d51086b2fe2981d02028
Author: Arınç ÜNAL <arinc.unal@arinc9.com>
Date:   Sat Jan 29 09:27:04 2022 +0300

    net: dsa: mt7530: make NET_DSA_MT7530 select MEDIATEK_GE_PHY
    
    commit 4223f86512877b04c932e7203648b37eec931731 upstream.
    
    Make MediaTek MT753x DSA driver enable MediaTek Gigabit PHYs driver to
    properly control MT7530 and MT7531 switch PHYs.
    
    A noticeable change is that the behaviour of switchport interfaces going
    up-down-up-down is no longer there.
    
    Fixes: b8f126a8d543 ("net-next: dsa: add dsa support for Mediatek MT7530 switch")
    Signed-off-by: Arınç ÜNAL <arinc.unal@arinc9.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220129062703.595-1-arinc.unal@arinc9.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84b76a509cc3ee713d79da28a5cdfb3841effe45
Author: Xin Yin <yinxin.x@bytedance.com>
Date:   Wed Jan 26 14:31:46 2022 +0800

    ext4: fix incorrect type issue during replay_del_range
    
    commit 8fca8a2b0a822f7936130af7299d2fd7f0a66714 upstream.
    
    should not use fast commit log data directly, add le32_to_cpu().
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: 0b5b5a62b945 ("ext4: use ext4_ext_remove_space() for fast commit replay delete range")
    Cc: stable@kernel.org
    Signed-off-by: Xin Yin <yinxin.x@bytedance.com>
    Reviewed-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Link: https://lore.kernel.org/r/20220126063146.2302-1-yinxin.x@bytedance.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62e46e0ffc02daa8fcfc02f7a932cc8a19601b19
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Mon Jan 17 17:41:49 2022 +0530

    ext4: fix error handling in ext4_fc_record_modified_inode()
    
    commit cdce59a1549190b66f8e3fe465c2b2f714b98a94 upstream.
    
    Current code does not fully takes care of krealloc() error case, which
    could lead to silent memory corruption or a kernel bug.  This patch
    fixes that.
    
    Also it cleans up some duplicated error handling logic from various
    functions in fast_commit.c file.
    
    Reported-by: luo penghao <luo.penghao@zte.com.cn>
    Suggested-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/62e8b6a1cce9359682051deb736a3c0953c9d1e9.1642416995.git.riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 764793b4a5d0b4040c5ceeeeb859c42933f8532b
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Mon Jan 17 17:41:47 2022 +0530

    ext4: fix error handling in ext4_restore_inline_data()
    
    commit 897026aaa73eb2517dfea8d147f20ddb0b813044 upstream.
    
    While running "./check -I 200 generic/475" it sometimes gives below
    kernel BUG(). Ideally we should not call ext4_write_inline_data() if
    ext4_create_inline_data() has failed.
    
    <log snip>
    [73131.453234] kernel BUG at fs/ext4/inline.c:223!
    
    <code snip>
     212 static void ext4_write_inline_data(struct inode *inode, struct ext4_iloc *iloc,
     213                                    void *buffer, loff_t pos, unsigned int len)
     214 {
    <...>
     223         BUG_ON(!EXT4_I(inode)->i_inline_off);
     224         BUG_ON(pos + len > EXT4_I(inode)->i_inline_size);
    
    This patch handles the error and prints out a emergency msg saying potential
    data loss for the given inode (since we couldn't restore the original
    inline_data due to some previous error).
    
    [ 9571.070313] EXT4-fs (dm-0): error restoring inline_data for inode -- potential data loss! (inode 1703982, error -30)
    
    Reported-by: Eric Whitney <enwlinux@gmail.com>
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/9f4cd7dfd54fa58ff27270881823d94ddf78dd07.1642416995.git.riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c5bd55e36d3bdcbd723902b29bcf083e5592c6f
Author: Xin Yin <yinxin.x@bytedance.com>
Date:   Mon Jan 10 11:51:41 2022 +0800

    ext4: modify the logic of ext4_mb_new_blocks_simple
    
    commit 31a074a0c62dc0d2bfb9b543142db4fe27f9e5eb upstream.
    
    For now in ext4_mb_new_blocks_simple, if we found a block which
    should be excluded then will switch to next group, this may
    probably cause 'group' run out of range.
    
    Change to check next block in the same group when get a block should
    be excluded. Also change the search range to EXT4_CLUSTERS_PER_GROUP
    and add error checking.
    
    Signed-off-by: Xin Yin <yinxin.x@bytedance.com>
    Reviewed-by: Harshad Shirwadkar <harshadshirwadkar@gmail.com>
    Link: https://lore.kernel.org/r/20220110035141.1980-3-yinxin.x@bytedance.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d71fc23fcb895739803bbddd16542ff566788b3
Author: Xin Yin <yinxin.x@bytedance.com>
Date:   Mon Jan 10 11:51:40 2022 +0800

    ext4: prevent used blocks from being allocated during fast commit replay
    
    commit 599ea31d13617c5484c40cdf50d88301dc351cfc upstream.
    
    During fast commit replay procedure, we clear inode blocks bitmap in
    ext4_ext_clear_bb(), this may cause ext4_mb_new_blocks_simple() allocate
    blocks still in use.
    
    Make ext4_fc_record_regions() also record physical disk regions used by
    inodes during replay procedure. Then ext4_mb_new_blocks_simple() can
    excludes these blocks in use.
    
    Signed-off-by: Xin Yin <yinxin.x@bytedance.com>
    Link: https://lore.kernel.org/r/20220110035141.1980-2-yinxin.x@bytedance.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef2053afd71e5b1f3a94e81293f8f67bb3c7807b
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Mon Jan 24 21:55:03 2022 +0300

    EDAC/xgene: Fix deferred probing
    
    commit dfd0dfb9a7cc04acf93435b440dd34c2ca7b4424 upstream.
    
    The driver overrides error codes returned by platform_get_irq_optional()
    to -EINVAL for some strange reason, so if it returns -EPROBE_DEFER, the
    driver will fail the probe permanently instead of the deferred probing.
    Switch to propagating the proper error codes to platform driver code
    upwards.
    
      [ bp: Massage commit message. ]
    
    Fixes: 0d4429301c4a ("EDAC: Add APM X-Gene SoC EDAC driver")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220124185503.6720-3-s.shtylyov@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a12faf55baed67c343e8bc5f1e54d2a5b4336a4
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Mon Jan 24 21:55:02 2022 +0300

    EDAC/altera: Fix deferred probing
    
    commit 279eb8575fdaa92c314a54c0d583c65e26229107 upstream.
    
    The driver overrides the error codes returned by platform_get_irq() to
    -ENODEV for some strange reason, so if it returns -EPROBE_DEFER, the
    driver will fail the probe permanently instead of the deferred probing.
    Switch to propagating the proper error codes to platform driver code
    upwards.
    
      [ bp: Massage commit message. ]
    
    Fixes: 71bcada88b0f ("edac: altera: Add Altera SDRAM EDAC support")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Dinh Nguyen <dinguyen@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220124185503.6720-2-s.shtylyov@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd274cf85269a24a60282ae21268cf3bf83514e3
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Jan 27 12:32:51 2022 +0100

    x86/perf: Default set FREEZE_ON_SMI for all
    
    commit a01994f5e5c79d3a35e5e8cf4252c7f2147323c3 upstream.
    
    Kyle reported that rr[0] has started to malfunction on Comet Lake and
    later CPUs due to EFI starting to make use of CPL3 [1] and the PMU
    event filtering not distinguishing between regular CPL3 and SMM CPL3.
    
    Since this is a privilege violation, default disable SMM visibility
    where possible.
    
    Administrators wanting to observe SMM cycles can easily change this
    using the sysfs attribute while regular users don't have access to
    this file.
    
    [0] https://rr-project.org/
    
    [1] See the Intel white paper "Trustworthy SMM on the Intel vPro Platform"
    at https://bugzilla.kernel.org/attachment.cgi?id=300300, particularly the
    end of page 5.
    
    Reported-by: Kyle Huey <me@kylehuey.com>
    Suggested-by: Andrew Cooper <Andrew.Cooper3@citrix.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@kernel.org
    Link: https://lkml.kernel.org/r/YfKChjX61OW4CkYm@hirez.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 456f041e035913fcedb275aff6f8a71dfebcd394
Author: Tristan Hume <tristan@thume.ca>
Date:   Thu Jan 27 17:08:06 2022 -0500

    perf/x86/intel/pt: Fix crash with stop filters in single-range mode
    
    commit 1d9093457b243061a9bba23543c38726e864a643 upstream.
    
    Add a check for !buf->single before calling pt_buffer_region_size in a
    place where a missing check can cause a kernel crash.
    
    Fixes a bug introduced by commit 670638477aed ("perf/x86/intel/pt:
    Opportunistically use single range output mode"), which added a
    support for PT single-range output mode. Since that commit if a PT
    stop filter range is hit while tracing, the kernel will crash because
    of a null pointer dereference in pt_handle_status due to calling
    pt_buffer_region_size without a ToPA configured.
    
    The commit which introduced single-range mode guarded almost all uses of
    the ToPA buffer variables with checks of the buf->single variable, but
    missed the case where tracing was stopped by the PT hardware, which
    happens when execution hits a configured stop filter.
    
    Tested that hitting a stop filter while PT recording successfully
    records a trace with this patch but crashes without this patch.
    
    Fixes: 670638477aed ("perf/x86/intel/pt: Opportunistically use single range output mode")
    Signed-off-by: Tristan Hume <tristan@thume.ca>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@kernel.org
    Link: https://lkml.kernel.org/r/20220127220806.73664-1-tristan@thume.ca
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c0e6a8a630e7abd4bcba1c50facce84587fadaf
Author: Ian Rogers <irogers@google.com>
Date:   Fri Feb 4 17:09:41 2022 -0800

    perf stat: Fix display of grouped aliased events
    
    [ Upstream commit b2b1aa73ade982c175ac926a1fd34e76ad628b94 ]
    
    An event may have a number of uncore aliases that when added to the
    evlist are consecutive.
    
    If there are multiple uncore events in a group then
    parse_events__set_leader_for_uncore_aliase will reorder the evlist so
    that events on the same PMU are adjacent.
    
    The collect_all_aliases function assumes that aliases are in blocks so
    that only the first counter is printed and all others are marked merged.
    
    The reordering for groups breaks the assumption and so all counts are
    printed.
    
    This change removes the assumption from collect_all_aliases
    that the events are in blocks and instead processes the entire evlist.
    
    Before:
    
      ```
      $ perf stat -e '{UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE,UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE},duration_time' -a -A -- sleep 1
    
       Performance counter stats for 'system wide':
    
      CPU0                  256,866      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 494,413      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      967      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,738      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  285,161      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 429,920      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      955      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,443      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  310,753      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 416,657      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,231      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,573      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  416,067      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 405,966      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,481      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,447      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  312,911      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 408,154      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,086      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,380      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  333,994      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 370,349      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,287      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,335      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  188,107      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 302,423      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      701      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,070      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  307,221      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 383,642      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,036      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,158      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  318,479      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 821,545      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,028      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   2,550      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  227,618      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 372,272      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      903      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,456      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  376,783      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 419,827      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,406      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,453      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  286,583      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 429,956      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      999      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,436      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  313,867      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 370,159      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,114      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,291      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  342,083      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 409,111      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,399      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,684      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  365,828      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 376,037      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,378      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,411      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  382,456      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 621,743      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,232      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,955      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  342,316      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 385,067      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,176      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,268      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  373,588      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 386,163      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,394      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,464      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  381,206      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 546,891      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,266      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,712      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  221,176      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 392,069      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      831      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,456      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  355,401      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 705,595      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,235      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   2,216      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  371,436      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 428,103      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,306      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,442      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  384,352      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 504,200      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,468      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,860      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  228,856      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 287,976      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      832      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,060      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  215,121      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 334,162      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      681      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,026      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  296,179      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 436,083      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,084      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,525      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  262,296      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 416,573      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      986      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,533      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  285,852      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 359,842      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,073      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,326      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  303,379      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 367,222      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,008      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,156      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  273,487      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 425,449      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                      932      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,367      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  297,596      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 414,793      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,140      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,601      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  342,365      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 360,422      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,291      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,342      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  327,196      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 580,858      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,122      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   2,014      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  296,564      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 452,817      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,087      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,694      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  375,002      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 389,393      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,478      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   1,540      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0                  365,213      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36                 594,685      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                    1,401      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                   2,222      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0            1,000,749,060 ns   duration_time
    
             1.000749060 seconds time elapsed
      ```
    
    After:
    
      ```
       Performance counter stats for 'system wide':
    
      CPU0               20,547,434      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU36              45,202,862      UNC_CHA_TOR_OCCUPANCY.IA_MISS_DRD_REMOTE
      CPU0                   82,001      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU36                 159,688      UNC_CHA_TOR_INSERTS.IA_MISS_DRD_REMOTE
      CPU0            1,000,464,828 ns   duration_time
    
             1.000464828 seconds time elapsed
      ```
    
    Fixes: 3cdc5c2cb924acb4 ("perf parse-events: Handle uncore event aliases in small groups properly")
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Ian Rogers <irogers@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Cc: Asaf Yaffe <asaf.yaffe@intel.com>
    Cc: Caleb Biggers <caleb.biggers@intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: James Clark <james.clark@arm.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: John Garry <john.garry@huawei.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Kshipra Bopardikar <kshipra.bopardikar@intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Perry Taylor <perry.taylor@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Vineet Singh <vineet.singh@intel.com>
    Cc: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Link: https://lore.kernel.org/r/20220205010941.1065469-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57e8859acc6024ca9041f7fa58a0afed2ed6ea87
Author: Helge Deller <deller@gmx.de>
Date:   Wed Feb 2 14:55:31 2022 +0100

    fbcon: Add option to enable legacy hardware acceleration
    
    commit a3f781a9d6114c1d1e01defb7aa234dec45d2a5f upstream.
    
    Add a config option CONFIG_FRAMEBUFFER_CONSOLE_LEGACY_ACCELERATION to
    enable bitblt and fillrect hardware acceleration in the framebuffer
    console. If disabled, such acceleration will not be used, even if it is
    supported by the graphics hardware driver.
    
    If you plan to use DRM as your main graphics output system, you should
    disable this option since it will prevent compiling in code which isn't
    used later on when DRM takes over.
    
    For all other configurations, e.g. if none of your graphic cards support
    DRM (yet), DRM isn't available for your architecture, or you can't be
    sure that the graphic card in the target system will support DRM, you
    most likely want to enable this option.
    
    In the non-accelerated case (e.g. when DRM is used), the inlined
    fb_scrollmode() function is hardcoded to return SCROLL_REDRAW and as such the
    compiler is able to optimize much unneccesary code away.
    
    In this v3 patch version I additionally changed the GETVYRES() and GETVXRES()
    macros to take a pointer to the fbcon_display struct. This fixes the build when
    console rotation is enabled and helps the compiler again to optimize out code.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@vger.kernel.org # v5.10+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220202135531.92183-4-deller@gmx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 460f6b1a238d2ee1d69a4911f81ee1728242f0dd
Author: Helge Deller <deller@gmx.de>
Date:   Wed Feb 2 14:55:30 2022 +0100

    Revert "fbcon: Disable accelerated scrolling"
    
    commit 87ab9f6b7417349aa197a6c7098d4fdd4beebb74 upstream.
    
    This reverts commit 39aead8373b3c20bb5965c024dfb51a94e526151.
    
    Revert the first (of 2) commits which disabled scrolling acceleration in
    fbcon/fbdev.  It introduced a regression for fbdev-supported graphic cards
    because of the performance penalty by doing screen scrolling by software
    instead of using the existing graphic card 2D hardware acceleration.
    
    Console scrolling acceleration was disabled by dropping code which
    checked at runtime the driver hardware capabilities for the
    BINFO_HWACCEL_COPYAREA or FBINFO_HWACCEL_FILLRECT flags and if set, it
    enabled scrollmode SCROLL_MOVE which uses hardware acceleration to move
    screen contents.  After dropping those checks scrollmode was hard-wired
    to SCROLL_REDRAW instead, which forces all graphic cards to redraw every
    character at the new screen position when scrolling.
    
    This change effectively disabled all hardware-based scrolling acceleration for
    ALL drivers, because now all kind of 2D hardware acceleration (bitblt,
    fillrect) in the drivers isn't used any longer.
    
    The original commit message mentions that only 3 DRM drivers (nouveau, omapdrm
    and gma500) used hardware acceleration in the past and thus code for checking
    and using scrolling acceleration is obsolete.
    
    This statement is NOT TRUE, because beside the DRM drivers there are around 35
    other fbdev drivers which depend on fbdev/fbcon and still provide hardware
    acceleration for fbdev/fbcon.
    
    The original commit message also states that syzbot found lots of bugs in fbcon
    and thus it's "often the solution to just delete code and remove features".
    This is true, and the bugs - which actually affected all users of fbcon,
    including DRM - were fixed, or code was dropped like e.g. the support for
    software scrollback in vgacon (commit 973c096f6a85).
    
    So to further analyze which bugs were found by syzbot, I've looked through all
    patches in drivers/video which were tagged with syzbot or syzkaller back to
    year 2005. The vast majority fixed the reported issues on a higher level, e.g.
    when screen is to be resized, or when font size is to be changed. The few ones
    which touched driver code fixed a real driver bug, e.g. by adding a check.
    
    But NONE of those patches touched code of either the SCROLL_MOVE or the
    SCROLL_REDRAW case.
    
    That means, there was no real reason why SCROLL_MOVE had to be ripped-out and
    just SCROLL_REDRAW had to be used instead. The only reason I can imagine so far
    was that SCROLL_MOVE wasn't used by DRM and as such it was assumed that it
    could go away. That argument completely missed the fact that SCROLL_MOVE is
    still heavily used by fbdev (non-DRM) drivers.
    
    Some people mention that using memcpy() instead of the hardware acceleration is
    pretty much the same speed. But that's not true, at least not for older graphic
    cards and machines where we see speed decreases by factor 10 and more and thus
    this change leads to console responsiveness way worse than before.
    
    That's why the original commit is to be reverted. By reverting we
    reintroduce hardware-based scrolling acceleration and fix the
    performance regression for fbdev drivers.
    
    There isn't any impact on DRM when reverting those patches.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Sven Schnelle <svens@stackframe.org>
    Cc: stable@vger.kernel.org # v5.10+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220202135531.92183-3-deller@gmx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 460aa9d8734084628abae7b11b03d8daeff0955d
Author: Riwen Lu <luriwen@kylinos.cn>
Date:   Thu Jan 6 16:46:09 2022 +0800

    rtc: cmos: Evaluate century appropriate
    
    commit ff164ae39b82ee483b24579c8e22a13a8ce5bd04 upstream.
    
    There's limiting the year to 2069. When setting the rtc year to 2070,
    reading it returns 1970. Evaluate century starting from 19 to count the
    correct year.
    
    $ sudo date -s 20700106
    Mon 06 Jan 2070 12:00:00 AM CST
    $ sudo hwclock -w
    $ sudo hwclock -r
    1970-01-06 12:00:49.604968+08:00
    
    Fixes: 2a4daadd4d3e5071 ("rtc: cmos: ignore bogus century byte")
    
    Signed-off-by: Riwen Lu <luriwen@kylinos.cn>
    Acked-by: Eric Wong <e@80x24.org>
    Reviewed-by: Mateusz Jończyk <mat.jonczyk@o2.pl>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20220106084609.1223688-1-luriwen@kylinos.cn
    Signed-off-by: Mateusz Jończyk <mat.jonczyk@o2.pl> # preparation for stable
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2324f5fcdf9dd104b996d12cd0c173ddcc3c950f
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Feb 1 14:25:04 2022 -0700

    tools/resolve_btfids: Do not print any commands when building silently
    
    commit 7f3bdbc3f13146eb9d07de81ea71f551587a384b upstream.
    
    When building with 'make -s', there is some output from resolve_btfids:
    
    $ make -sj"$(nproc)" oldconfig prepare
      MKDIR     .../tools/bpf/resolve_btfids/libbpf/
      MKDIR     .../tools/bpf/resolve_btfids//libsubcmd
      LINK     resolve_btfids
    
    Silent mode means that no information should be emitted about what is
    currently being done. Use the $(silent) variable from Makefile.include
    to avoid defining the msg macro so that there is no information printed.
    
    Fixes: fbbb68de80a4 ("bpf: Add resolve_btfids tool to resolve BTF IDs in ELF object")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20220201212503.731732-1-nathan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1536fafa23ac072ab1a8293ed8efca808b20cfa7
Author: Muhammad Usama Anjum <usama.anjum@collabora.com>
Date:   Thu Jan 27 22:44:46 2022 +0500

    selftests: futex: Use variable MAKE instead of make
    
    commit b9199181a9ef8252e47e207be8c23e1f50662620 upstream.
    
    Recursive make commands should always use the variable MAKE, not the
    explicit command name ‘make’. This has benefits and removes the
    following warning when multiple jobs are used for the build:
    
    make[2]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
    
    Fixes: a8ba798bc8ec ("selftests: enable O and KBUILD_OUTPUT")
    Signed-off-by: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Reviewed-by: André Almeida <andrealmeid@collabora.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f0fff8b5968a840379f66ef9453ae87636b41fe
Author: Muhammad Usama Anjum <usama.anjum@collabora.com>
Date:   Thu Jan 27 21:33:45 2022 +0500

    selftests/exec: Remove pipe from TEST_GEN_FILES
    
    commit 908a26e139e8cf21093acc56d8e90ddad2ad1eff upstream.
    
    pipe named FIFO special file is being created in execveat.c to perform
    some tests. Makefile doesn't need to do anything with the pipe. When it
    isn't found, Makefile generates the following build error:
    
    make: *** No rule to make target
    '../tools/testing/selftests/exec/pipe', needed by 'all'.  Stop.
    
    pipe is created and removed during test run-time.
    
    Amended change log to add pipe remove info:
    Shuah Khan <skhan@linuxfoundation.org>
    
    Fixes: 61016db15b8e ("selftests/exec: Verify execve of non-regular files fail")
    Signed-off-by: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Reviewed-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6304a613a97d6dcd49b93fbad31e9f39d1e138d6
Author: Hou Tao <hotforest@gmail.com>
Date:   Wed Feb 2 14:01:58 2022 +0800

    bpf: Use VM_MAP instead of VM_ALLOC for ringbuf
    
    commit b293dcc473d22a62dc6d78de2b15e4f49515db56 upstream.
    
    After commit 2fd3fb0be1d1 ("kasan, vmalloc: unpoison VM_ALLOC pages
    after mapping"), non-VM_ALLOC mappings will be marked as accessible
    in __get_vm_area_node() when KASAN is enabled. But now the flag for
    ringbuf area is VM_ALLOC, so KASAN will complain out-of-bound access
    after vmap() returns. Because the ringbuf area is created by mapping
    allocated pages, so use VM_MAP instead.
    
    After the change, info in /proc/vmallocinfo also changes from
      [start]-[end]   24576 ringbuf_map_alloc+0x171/0x290 vmalloc user
    to
      [start]-[end]   24576 ringbuf_map_alloc+0x171/0x290 vmap user
    
    Fixes: 457f44363a88 ("bpf: Implement BPF ring buffer and verifier support for it")
    Reported-by: syzbot+5ad567a418794b9b5983@syzkaller.appspotmail.com
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20220202060158.6260-1-houtao1@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f744a064041cc1d84e1ad9d6a8e571f371850648
Author: Haiyue Wang <haiyue.wang@intel.com>
Date:   Fri Jan 28 18:47:14 2022 +0800

    gve: fix the wrong AdminQ buffer queue index check
    
    commit 1f84a9450d75e08af70d9e2f2d5e1c0ac0c881d2 upstream.
    
    The 'tail' and 'head' are 'unsigned int' type free-running count, when
    'head' is overflow, the 'int i (= tail) < u32 head' will be false:
    
    Only '- loop 0: idx = 63' result is shown, so it needs to use 'int' type
    to compare, it can handle the overflow correctly.
    
    typedef uint32_t u32;
    
    int main()
    {
            u32 tail, head;
            int stail, shead;
            int i, loop;
    
            tail = 0xffffffff;
            head = 0x00000000;
    
            for (i = tail, loop = 0; i < head; i++) {
                    unsigned int idx = i & 63;
    
                    printf("+ loop %d: idx = %u\n", loop++, idx);
            }
    
            stail = tail;
            shead = head;
            for (i = stail, loop = 0; i < shead; i++) {
                    unsigned int idx = i & 63;
    
                    printf("- loop %d: idx = %u\n", loop++, idx);
            }
    
            return 0;
    }
    
    Fixes: 5cdad90de62c ("gve: Batch AQ commands for creating and destroying queues.")
    Signed-off-by: Haiyue Wang <haiyue.wang@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51e88e8922734ea137dbeeeab87d27fe8dccfcc5
Author: Dai Ngo <dai.ngo@oracle.com>
Date:   Wed Jan 26 13:13:38 2022 -0800

    nfsd: nfsd4_setclientid_confirm mistakenly expires confirmed client.
    
    commit ab451ea952fe9d7afefae55ddb28943a148247fe upstream.
    
    From RFC 7530 Section 16.34.5:
    
    o  The server has not recorded an unconfirmed { v, x, c, *, * } and
       has recorded a confirmed { v, x, c, *, s }.  If the principals of
       the record and of SETCLIENTID_CONFIRM do not match, the server
       returns NFS4ERR_CLID_INUSE without removing any relevant leased
       client state, and without changing recorded callback and
       callback_ident values for client { x }.
    
    The current code intends to do what the spec describes above but
    it forgot to set 'old' to NULL resulting to the confirmed client
    to be expired.
    
    Fixes: 2b63482185e6 ("nfsd: fix clid_inuse on mount with security change")
    Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Reviewed-by: Bruce Fields <bfields@fieldses.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec4334152dae175dbd8fd5bde1d2139bbe7b42d0
Author: John Meneghini <jmeneghi@redhat.com>
Date:   Mon Jan 24 09:51:10 2022 -0500

    scsi: bnx2fc: Make bnx2fc_recv_frame() mp safe
    
    commit 936bd03405fc83ba039d42bc93ffd4b88418f1d3 upstream.
    
    Running tests with a debug kernel shows that bnx2fc_recv_frame() is
    modifying the per_cpu lport stats counters in a non-mpsafe way.  Just boot
    a debug kernel and run the bnx2fc driver with the hardware enabled.
    
    [ 1391.699147] BUG: using smp_processor_id() in preemptible [00000000] code: bnx2fc_
    [ 1391.699160] caller is bnx2fc_recv_frame+0xbf9/0x1760 [bnx2fc]
    [ 1391.699174] CPU: 2 PID: 4355 Comm: bnx2fc_l2_threa Kdump: loaded Tainted: G    B
    [ 1391.699180] Hardware name: HP ProLiant DL120 G7, BIOS J01 07/01/2013
    [ 1391.699183] Call Trace:
    [ 1391.699188]  dump_stack_lvl+0x57/0x7d
    [ 1391.699198]  check_preemption_disabled+0xc8/0xd0
    [ 1391.699205]  bnx2fc_recv_frame+0xbf9/0x1760 [bnx2fc]
    [ 1391.699215]  ? do_raw_spin_trylock+0xb5/0x180
    [ 1391.699221]  ? bnx2fc_npiv_create_vports.isra.0+0x4e0/0x4e0 [bnx2fc]
    [ 1391.699229]  ? bnx2fc_l2_rcv_thread+0xb7/0x3a0 [bnx2fc]
    [ 1391.699240]  bnx2fc_l2_rcv_thread+0x1af/0x3a0 [bnx2fc]
    [ 1391.699250]  ? bnx2fc_ulp_init+0xc0/0xc0 [bnx2fc]
    [ 1391.699258]  kthread+0x364/0x420
    [ 1391.699263]  ? _raw_spin_unlock_irq+0x24/0x50
    [ 1391.699268]  ? set_kthread_struct+0x100/0x100
    [ 1391.699273]  ret_from_fork+0x22/0x30
    
    Restore the old get_cpu/put_cpu code with some modifications to reduce the
    size of the critical section.
    
    Link: https://lore.kernel.org/r/20220124145110.442335-1-jmeneghi@redhat.com
    Fixes: d576a5e80cd0 ("bnx2fc: Improve stats update mechanism")
    Tested-by: Guangwu Zhang <guazhang@redhat.com>
    Acked-by: Saurav Kashyap <skashyap@marvell.com>
    Signed-off-by: John Meneghini <jmeneghi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd482f2d63dbc9f2fe179de2de9202021ed7e6fe
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Jan 27 13:50:31 2022 -0800

    pinctrl: bcm2835: Fix a few error paths
    
    commit 5297c693d8c8e08fa742e3112cf70723f7a04da2 upstream.
    
    After commit 266423e60ea1 ("pinctrl: bcm2835: Change init order for gpio
    hogs") a few error paths would not unwind properly the registration of
    gpio ranges. Correct that by assigning a single error label and goto it
    whenever we encounter a fatal error.
    
    Fixes: 266423e60ea1 ("pinctrl: bcm2835: Change init order for gpio hogs")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220127215033.267227-1-f.fainelli@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 752d9eafc64e7a1f8a62f6b3fad2086ba8c73058
Author: Łukasz Bartosik <lb@semihalf.com>
Date:   Mon Jan 24 13:55:29 2022 +0100

    pinctrl: intel: fix unexpected interrupt
    
    commit e986f0e602f19ecb7880b04dd1db415ed9bca3f6 upstream.
    
    ASUS Chromebook C223 with Celeron N3350 crashes sometimes during
    cold booot. Inspection of the kernel log showed that it gets into
    an inifite loop logging the following message:
    
    ->handle_irq():  000000009cdb51e8, handle_bad_irq+0x0/0x251
    ->irq_data.chip(): 000000005ec212a7, 0xffffa043009d8e7
    ->action(): 00000
       IRQ_NOPROBE set
    unexpected IRQ trap at vector 7c
    
    The issue happens during cold boot but only if cold boot happens
    at most several dozen seconds after Chromebook is powered off. For
    longer intervals between power off and power on (cold boot) the issue
    does not reproduce. The unexpected interrupt is sourced from INT3452
    GPIO pin which is used for SD card detect. Investigation relevealed
    that when the interval between power off and power on (cold boot)
    is less than several dozen seconds then values of INT3452 GPIO interrupt
    enable and interrupt pending registers survive power off and power
    on sequence and interrupt for SD card detect pin is enabled and pending
    during probe of SD controller which causes the unexpected IRQ message.
    "Intel Pentium and Celeron Processor N- and J- Series" volume 3 doc
    mentions that GPIO interrupt enable and status registers default
    value is 0x0.
    The fix clears INT3452 GPIO interrupt enabled and interrupt pending
    registers in its probe function.
    
    Fixes: 7981c0015af2 ("pinctrl: intel: Add Intel Sunrisepoint pin controller and GPIO support")
    Signed-off-by: Łukasz Bartosik <lb@semihalf.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14bc9978b486d0780f1d1d834202c899da68c47d
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Jan 19 20:19:15 2022 +0200

    pinctrl: intel: Fix a glitch when updating IRQ flags on a preconfigured line
    
    commit e12963c453263d5321a2c610e98cbc731233b685 upstream.
    
    The commit af7e3eeb84e2 ("pinctrl: intel: Disable input and output buffer
    when switching to GPIO") hadn't taken into account an update of the IRQ
    flags scenario.
    
    When updating the IRQ flags on the preconfigured line the ->irq_set_type()
    is called again. In such case the sequential Rx buffer configuration
    changes may trigger a falling or rising edge interrupt that may lead,
    on some platforms, to an undesired event.
    
    This may happen because each of intel_gpio_set_gpio_mode() and
    __intel_gpio_set_direction() updates the pad configuration with a different
    value of the GPIORXDIS bit. Notable, that the intel_gpio_set_gpio_mode() is
    called only for the pads that are configured as an input. Due to this fact,
    integrate the logic of __intel_gpio_set_direction() call into the
    intel_gpio_set_gpio_mode() so that the Rx buffer won't be disabled and
    immediately re-enabled.
    
    Fixes: af7e3eeb84e2 ("pinctrl: intel: Disable input and output buffer when switching to GPIO")
    Reported-by: Kane Chen <kane.chen@intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Grace Kao <grace.kao@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a45448ac95b715173edb1cd090ff24b6586d921
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jan 19 15:31:01 2022 +0300

    ASoC: max9759: fix underflow in speaker_gain_control_put()
    
    commit 4c907bcd9dcd233da6707059d777ab389dcbd964 upstream.
    
    Check for negative values of "priv->gain" to prevent an out of bounds
    access.  The concern is that these might come from the user via:
      -> snd_ctl_elem_write_user()
        -> snd_ctl_elem_write()
          -> kctl->put()
    
    Fixes: fa8d915172b8 ("ASoC: max9759: Add Amplifier Driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20220119123101.GA9509@kili
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02f4597198329076f4f02f27906447a90357ae66
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue Jan 11 10:50:48 2022 +0800

    ASoC: cpcap: Check for NULL pointer after calling of_get_child_by_name
    
    commit f7a6021aaf02088870559f82fc13c58cda7fea1a upstream.
    
    If the device does not exist, of_get_child_by_name() will return NULL
    pointer.
    And devm_snd_soc_register_component() does not check it.
    Also, I have noticed that cpcap_codec_driver has not been used yet.
    Therefore, it should be better to check it in order to avoid the future
    dereference of the NULL pointer.
    
    Fixes: f6cdf2d3445d ("ASoC: cpcap: new codec")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Link: https://lore.kernel.org/r/20220111025048.524134-1-jiasheng@iscas.ac.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb5f1fbd1f2233fc3f7c27fbb04e3f283f46f7b9
Author: Robert Hancock <robert.hancock@calian.com>
Date:   Fri Jan 7 15:47:06 2022 -0600

    ASoC: xilinx: xlnx_formatter_pcm: Make buffer bytes multiple of period bytes
    
    commit e958b5884725dac86d36c1e7afe5a55f31feb0b2 upstream.
    
    This patch is based on one in the Xilinx kernel tree, "ASoc: xlnx: Make
    buffer bytes multiple of period bytes" by Devarsh Thakkar. The same
    issue exists in the mainline version of the driver. The original
    patch description is as follows:
    
    "The Xilinx Audio Formatter IP has a constraint on period
    bytes to be multiple of 64. This leads to driver changing
    the period size to suitable frames such that period bytes
    are multiple of 64.
    
    Now since period bytes and period size are updated but not
    the buffer bytes, this may make the buffer bytes unaligned
    and not multiple of period bytes.
    
    When this happens we hear popping noise as while DMA is being
    done the buffer bytes are not enough to complete DMA access
    for last period of frame within the application buffer boundary.
    
    To avoid this, align buffer bytes too as multiple of 64, and
    set another constraint to always enforce number of periods as
    integer. Now since, there is already a rule in alsa core
    to enforce Buffer size = Number of Periods * Period Size
    this automatically aligns buffer bytes as multiple of period
    bytes."
    
    Fixes: 6f6c3c36f091 ("ASoC: xlnx: add pcm formatter platform driver")
    Cc: Devarsh Thakkar <devarsh.thakkar@xilinx.com>
    Signed-off-by: Robert Hancock <robert.hancock@calian.com>
    Link: https://lore.kernel.org/r/20220107214711.1100162-2-robert.hancock@calian.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56e0747d59accbd4785680b140bdc4130bec1217
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jan 27 13:13:34 2022 +0000

    ASoC: fsl: Add missing error handling in pcm030_fabric_probe
    
    commit fb25621da5702c104ce0a48de5b174ced09e5b4e upstream.
    
    Add the missing platform_device_put() and platform_device_del()
    before return from pcm030_fabric_probe in the error handling case.
    
    Fixes: c912fa913446 ("ASoC: fsl: register the wm9712-codec")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220127131336.30214-1-linmq006@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e698375517d0684224b7d4fa5df682efb84613b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jan 24 15:24:09 2022 +0300

    drm/i915/overlay: Prevent divide by zero bugs in scaling
    
    commit 90a3d22ff02b196d5884e111f39271a1d4ee8e3e upstream.
    
    Smatch detected a divide by zero bug in check_overlay_scaling().
    
        drivers/gpu/drm/i915/display/intel_overlay.c:976 check_overlay_scaling()
        error: potential divide by zero bug '/ rec->dst_height'.
        drivers/gpu/drm/i915/display/intel_overlay.c:980 check_overlay_scaling()
        error: potential divide by zero bug '/ rec->dst_width'.
    
    Prevent this by ensuring that the dst height and width are non-zero.
    
    Fixes: 02e792fbaadb ("drm/i915: implement drmmode overlay support v4")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220124122409.GA31673@kili
    (cherry picked from commit cf5b64f7f10b28bebb9b7c9d25e7aee5cbe43918)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ea01853611114567a0207b774eb76bfeed74878
Author: Yannick Vignon <yannick.vignon@nxp.com>
Date:   Thu Feb 3 17:00:25 2022 +0100

    net: stmmac: ensure PTP time register reads are consistent
    
    commit 80d4609008e6d696a279e39ae7458c916fcd44c1 upstream.
    
    Even if protected from preemption and interrupts, a small time window
    remains when the 2 register reads could return inconsistent values,
    each time the "seconds" register changes. This could lead to an about
    1-second error in the reported time.
    
    Add logic to ensure the "seconds" and "nanoseconds" values are consistent.
    
    Fixes: 92ba6888510c ("stmmac: add the support for PTP hw clock driver")
    Signed-off-by: Yannick Vignon <yannick.vignon@nxp.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Link: https://lore.kernel.org/r/20220203160025.750632-1-yannick.vignon@oss.nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41df2da2c1f396c6f049a205073845a48364e15a
Author: Camel Guo <camelg@axis.com>
Date:   Mon Jan 31 09:38:40 2022 +0100

    net: stmmac: dump gmac4 DMA registers correctly
    
    commit 7af037c39b600bac2c716dd1228e8ddbe149573f upstream.
    
    Unlike gmac100, gmac1000, gmac4 has 27 DMA registers and they are
    located at DMA_CHAN_BASE_ADDR (0x1100). In order for ethtool to dump
    gmac4 DMA registers correctly, this commit checks if a net_device has
    gmac4 and uses different logic to dump its DMA registers.
    
    This fixes the following KASAN warning, which can normally be triggered
    by a command similar like "ethtool -d eth0":
    
    BUG: KASAN: vmalloc-out-of-bounds in dwmac4_dump_dma_regs+0x6d4/0xb30
    Write of size 4 at addr ffffffc010177100 by task ethtool/1839
     kasan_report+0x200/0x21c
     __asan_report_store4_noabort+0x34/0x60
     dwmac4_dump_dma_regs+0x6d4/0xb30
     stmmac_ethtool_gregs+0x110/0x204
     ethtool_get_regs+0x200/0x4b0
     dev_ethtool+0x1dac/0x3800
     dev_ioctl+0x7c0/0xb50
     sock_ioctl+0x298/0x6c4
     ...
    
    Fixes: fbf68229ffe7 ("net: stmmac: unify registers dumps methods")
    Signed-off-by: Camel Guo <camelg@axis.com>
    Link: https://lore.kernel.org/r/20220131083841.3346801-1-camel.guo@axis.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 114bf9350413f00fe5ae1edb566593135c7c99c3
Author: Lior Nahmanson <liorna@nvidia.com>
Date:   Sun Jan 30 13:37:52 2022 +0200

    net: macsec: Verify that send_sci is on when setting Tx sci explicitly
    
    commit d0cfa548dbde354de986911d3913897b5448faad upstream.
    
    When setting Tx sci explicit, the Rx side is expected to use this
    sci and not recalculate it from the packet.However, in case of Tx sci
    is explicit and send_sci is off, the receiver is wrongly recalculate
    the sci from the source MAC address which most likely be different
    than the explicit sci.
    
    Fix by preventing such configuration when macsec newlink is established
    and return EINVAL error code on such cases.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Lior Nahmanson <liorna@nvidia.com>
    Reviewed-by: Raed Salem <raeds@nvidia.com>
    Signed-off-by: Raed Salem <raeds@nvidia.com>
    Link: https://lore.kernel.org/r/1643542672-29403-1-git-send-email-raeds@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e7f5b6ee1a7a2c628253a95b0a95b582901ef1b
Author: Lior Nahmanson <liorna@nvidia.com>
Date:   Sun Jan 30 13:29:01 2022 +0200

    net: macsec: Fix offload support for NETDEV_UNREGISTER event
    
    commit 9cef24c8b76c1f6effe499d2f131807c90f7ce9a upstream.
    
    Current macsec netdev notify handler handles NETDEV_UNREGISTER event by
    releasing relevant SW resources only, this causes resources leak in case
    of macsec HW offload, as the underlay driver was not notified to clean
    it's macsec offload resources.
    
    Fix by calling the underlay driver to clean it's relevant resources
    by moving offload handling from macsec_dellink() to macsec_common_dellink()
    when handling NETDEV_UNREGISTER event.
    
    Fixes: 3cf3227a21d1 ("net: macsec: hardware offloading infrastructure")
    Signed-off-by: Lior Nahmanson <liorna@nvidia.com>
    Reviewed-by: Raed Salem <raeds@nvidia.com>
    Signed-off-by: Raed Salem <raeds@nvidia.com>
    Reviewed-by: Antoine Tenart <atenart@kernel.org>
    Link: https://lore.kernel.org/r/1643542141-28956-1-git-send-email-raeds@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87b1c9fab6fe570182abcf7908e13a86478bc996
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 25 13:14:25 2022 +0100

    net: ieee802154: Return meaningful error codes from the netlink helpers
    
    commit 79c37ca73a6e9a33f7b2b7783ba6af07a448c8a9 upstream.
    
    Returning -1 does not indicate anything useful.
    
    Use a standard and meaningful error code instead.
    
    Fixes: a26c5fd7622d ("nl802154: add support for security layer")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20220125121426.848337-6-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78b3f20c17cbcb7645bfa63f2ca0e11b53c09d56
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 25 13:14:24 2022 +0100

    net: ieee802154: ca8210: Stop leaking skb's
    
    commit 621b24b09eb61c63f262da0c9c5f0e93348897e5 upstream.
    
    Upon error the ieee802154_xmit_complete() helper is not called. Only
    ieee802154_wake_queue() is called manually. We then leak the skb
    structure.
    
    Free the skb structure upon error before returning.
    
    Fixes: ded845a781a5 ("ieee802154: Add CA8210 IEEE 802.15.4 device driver")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20220125121426.848337-5-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bfe50dc5d91f6ab445088ef25f2f0fb163fb631
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 25 13:14:22 2022 +0100

    net: ieee802154: mcr20a: Fix lifs/sifs periods
    
    commit d753c4004820a888ec007dd88b271fa9c3172c5c upstream.
    
    These periods are expressed in time units (microseconds) while 40 and 12
    are the number of symbol durations these periods will last. We need to
    multiply them both with phy->symbol_duration in order to get these
    values in microseconds.
    
    Fixes: 8c6ad9cc5157 ("ieee802154: Add NXP MCR20A IEEE 802.15.4 transceiver driver")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20220125121426.848337-3-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75bbda318987975905ad159c0bf30a350f847f49
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 25 13:14:21 2022 +0100

    net: ieee802154: hwsim: Ensure proper channel selection at probe time
    
    commit 1293fccc9e892712d910ec96079d3717307f1d2d upstream.
    
    Drivers are expected to set the PHY current_channel and current_page
    according to their default state. The hwsim driver is advertising being
    configured on channel 13 by default but that is not reflected in its own
    internal pib structure. In order to ensure that this driver consider the
    current channel as being 13 internally, we at least need to set the
    pib->channel field to 13.
    
    Fixes: f25da51fdc38 ("ieee802154: hwsim: add replacement for fakelb")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    [stefan@datenfreihafen.org: fixed assigment from page to channel]
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20220125121426.848337-2-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e895e067d73e154b1ebc84a124e00831e311d9b0
Author: Xin Xiong <xiongx18@fudan.edu.cn>
Date:   Tue Jan 25 18:12:15 2022 +0800

    spi: uniphier: fix reference count leak in uniphier_spi_probe()
    
    commit 37c2c83ca4f1ef4b6908181ac98e18360af89b42 upstream.
    
    The issue happens in several error paths in uniphier_spi_probe().
    When either dma_get_slave_caps() or devm_spi_register_master() returns
    an error code, the function forgets to decrease the refcount of both
    `dma_rx` and `dma_tx` objects, which may lead to refcount leaks.
    
    Fix it by decrementing the reference count of specific objects in
    those error paths.
    
    Signed-off-by: Xin Xiong <xiongx18@fudan.edu.cn>
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Reviewed-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Fixes: 28d1dddc59f6 ("spi: uniphier: Add DMA transfer mode support")
    Link: https://lore.kernel.org/r/20220125101214.35677-1-xiongx18@fudan.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec942d08e0706c882ff8d7c5b724c6744cd3fea8
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Jan 26 11:04:47 2022 +0000

    spi: meson-spicc: add IRQ check in meson_spicc_probe
    
    commit e937440f7fc444a3e3f1fb75ea65292d6f433a44 upstream.
    
    This check misses checking for  platform_get_irq()'s call and may passes
    the negative error codes to devm_request_irq(), which takes unsigned IRQ #,
    causing it to fail with -EINVAL, overriding an original error code.
    Stop calling devm_request_irq() with invalid IRQ #s.
    
    Fixes: 454fa271bc4e ("spi: Add Meson SPICC driver")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220126110447.24549-1-linmq006@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2cf65e1008ba50d1688b94a887dc1d10743f877
Author: Benjamin Gaignard <benjamin.gaignard@collabora.com>
Date:   Mon Jan 31 15:17:08 2022 +0100

    spi: mediatek: Avoid NULL pointer crash in interrupt
    
    commit f83a96e5f033fbbd21764705cb9c04234b96218e upstream.
    
    In some case, like after a transfer timeout, master->cur_msg pointer
    is NULL which led to a kernel crash when trying to use master->cur_msg->spi.
    mtk_spi_can_dma(), pointed by master->can_dma, doesn't use this parameter
    avoid the problem by setting NULL as second parameter.
    
    Fixes: a568231f46322 ("spi: mediatek: Add spi bus for Mediatek MT8173")
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@collabora.com>
    Link: https://lore.kernel.org/r/20220131141708.888710-1-benjamin.gaignard@collabora.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30e05c98b99d138306e948afd0c7eaa7ce07f6dc
Author: Kamal Dasu <kdasu.kdev@gmail.com>
Date:   Thu Jan 27 13:53:59 2022 -0500

    spi: bcm-qspi: check for valid cs before applying chip select
    
    commit 2cbd27267ffe020af1442b95ec57f59a157ba85c upstream.
    
    Apply only valid chip select value. This change fixes case where chip
    select is set to initial value of '-1' during probe and  PM supend and
    subsequent resume can try to use the value with undefined behaviour.
    Also in case where gpio based chip select, the check in
    bcm_qspi_chip_select() shall prevent undefined behaviour on resume.
    
    Fixes: fa236a7ef240 ("spi: bcm-qspi: Add Broadcom MSPI driver")
    Signed-off-by: Kamal Dasu <kdasu.kdev@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220127185359.27322-1-kdasu.kdev@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d226e8afe88534e74df18e4f06fe425abb8e0dc
Author: Joerg Roedel <jroedel@suse.de>
Date:   Fri Feb 4 12:55:37 2022 +0100

    iommu/amd: Fix loop timeout issue in iommu_ga_log_enable()
    
    commit 9b45a7738eec52bf0f5d8d3d54e822962781c5f2 upstream.
    
    The polling loop for the register change in iommu_ga_log_enable() needs
    to have a udelay() in it.  Otherwise the CPU might be faster than the
    IOMMU hardware and wrongly trigger the WARN_ON() further down the code
    stream. Use a 10us for udelay(), has there is some hardware where
    activation of the GA log can take more than a 100ms.
    
    A future optimization should move the activation check of the GA log
    to the point where it gets used for the first time. But that is a
    bigger change and not suitable for a fix.
    
    Fixes: 8bda0cfbdc1a ("iommu/amd: Detect and initialize guest vAPIC log")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Link: https://lore.kernel.org/r/20220204115537.3894-1-joro@8bytes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d9995b0371e4e8c18d4f955479e5d47efe7b2d4
Author: Guoqing Jiang <guoqing.jiang@linux.dev>
Date:   Fri Jan 28 11:10:02 2022 +0800

    iommu/vt-d: Fix potential memory leak in intel_setup_irq_remapping()
    
    commit 99e675d473eb8cf2deac1376a0f840222fc1adcf upstream.
    
    After commit e3beca48a45b ("irqdomain/treewide: Keep firmware node
    unconditionally allocated"). For tear down scenario, fn is only freed
    after fail to allocate ir_domain, though it also should be freed in case
    dmar_enable_qi returns error.
    
    Besides free fn, irq_domain and ir_msi_domain need to be removed as well
    if intel_setup_irq_remapping fails to enable queued invalidation.
    
    Improve the rewinding path by add out_free_ir_domain and out_free_fwnode
    lables per Baolu's suggestion.
    
    Fixes: e3beca48a45b ("irqdomain/treewide: Keep firmware node unconditionally allocated")
    Suggested-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Guoqing Jiang <guoqing.jiang@linux.dev>
    Link: https://lore.kernel.org/r/20220119063640.16864-1-guoqing.jiang@linux.dev
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20220128031002.2219155-3-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3958d315163d1f5e0c6c2bff2c02d06f03e853b
Author: Leon Romanovsky <leon@kernel.org>
Date:   Mon Jan 31 11:45:26 2022 +0200

    RDMA/mlx4: Don't continue event handler after memory allocation failure
    
    commit f3136c4ce7acf64bee43135971ca52a880572e32 upstream.
    
    The failure to allocate memory during MLX4_DEV_EVENT_PORT_MGMT_CHANGE
    event handler will cause skip the assignment logic, but
    ib_dispatch_event() will be called anyway.
    
    Fix it by calling to return instead of break after memory allocation
    failure.
    
    Fixes: 00f5ce99dc6e ("mlx4: Use port management change event instead of smp_snoop")
    Link: https://lore.kernel.org/r/12a0e83f18cfad4b5f62654f141e240d04915e10.1643622264.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Håkon Bugge <haakon.bugge@oracle.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3f8b927df2fcfc19f43137094d7defe704f3403
Author: Bernard Metzler <bmt@zurich.ibm.com>
Date:   Sun Jan 30 18:08:15 2022 +0100

    RDMA/siw: Fix broken RDMA Read Fence/Resume logic.
    
    commit b43a76f423aa304037603fd6165c4a534d2c09a7 upstream.
    
    Code unconditionally resumed fenced SQ processing after next RDMA Read
    completion, even if other RDMA Read responses are still outstanding, or
    ORQ is full. Also adds comments for better readability of fence
    processing, and removes orq_get_tail() helper, which is not needed
    anymore.
    
    Fixes: 8b6a361b8c48 ("rdma/siw: receive path")
    Fixes: a531975279f3 ("rdma/siw: main include file")
    Link: https://lore.kernel.org/r/20220130170815.1940-1-bmt@zurich.ibm.com
    Reported-by: Jared Holzman <jared.holzman@excelero.com>
    Signed-off-by: Bernard Metzler <bmt@zurich.ibm.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7db20f5be73b6b3768d15b075a09e4b0d5c13f7
Author: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
Date:   Wed Jan 19 04:28:09 2022 -0500

    IB/rdmavt: Validate remote_addr during loopback atomic tests
    
    commit 4028bccb003cf67e46632dee7f97ddc5d7b6e685 upstream.
    
    The rdma-core test suite sends an unaligned remote address and expects a
    failure.
    
    ERROR: test_atomic_non_aligned_addr (tests.test_atomic.AtomicTest)
    
    The qib/hfi1 rc handling validates properly, but the test has the client
    and server on the same system.
    
    The loopback of these operations is a distinct code path.
    
    Fix by syntaxing the proposed remote address in the loopback code path.
    
    Fixes: 15703461533a ("IB/{hfi1, qib, rdmavt}: Move ruc_loopback to rdmavt")
    Link: https://lore.kernel.org/r/1642584489-141005-1-git-send-email-mike.marciniszyn@cornelisnetworks.com
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75c610212b9f1756b9384911d3a2c347eee8031c
Author: Leon Romanovsky <leon@kernel.org>
Date:   Tue Jan 18 09:35:01 2022 +0200

    RDMA/ucma: Protect mc during concurrent multicast leaves
    
    commit 36e8169ec973359f671f9ec7213547059cae972e upstream.
    
    Partially revert the commit mentioned in the Fixes line to make sure that
    allocation and erasing multicast struct are locked.
    
      BUG: KASAN: use-after-free in ucma_cleanup_multicast drivers/infiniband/core/ucma.c:491 [inline]
      BUG: KASAN: use-after-free in ucma_destroy_private_ctx+0x914/0xb70 drivers/infiniband/core/ucma.c:579
      Read of size 8 at addr ffff88801bb74b00 by task syz-executor.1/25529
      CPU: 0 PID: 25529 Comm: syz-executor.1 Not tainted 5.16.0-rc7-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
       __dump_stack lib/dump_stack.c:88 [inline]
       dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
       print_address_description.constprop.0.cold+0x8d/0x320 mm/kasan/report.c:247
       __kasan_report mm/kasan/report.c:433 [inline]
       kasan_report.cold+0x83/0xdf mm/kasan/report.c:450
       ucma_cleanup_multicast drivers/infiniband/core/ucma.c:491 [inline]
       ucma_destroy_private_ctx+0x914/0xb70 drivers/infiniband/core/ucma.c:579
       ucma_destroy_id+0x1e6/0x280 drivers/infiniband/core/ucma.c:614
       ucma_write+0x25c/0x350 drivers/infiniband/core/ucma.c:1732
       vfs_write+0x28e/0xae0 fs/read_write.c:588
       ksys_write+0x1ee/0x250 fs/read_write.c:643
       do_syscall_x64 arch/x86/entry/common.c:50 [inline]
       do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Currently the xarray search can touch a concurrently freeing mc as the
    xa_for_each() is not surrounded by any lock. Rather than hold the lock for
    a full scan hold it only for the effected items, which is usually an empty
    list.
    
    Fixes: 95fe51096b7a ("RDMA/ucma: Remove mc_list and rely on xarray")
    Link: https://lore.kernel.org/r/1cda5fabb1081e8d16e39a48d3a4f8160cea88b8.1642491047.git.leonro@nvidia.com
    Reported-by: syzbot+e3f96c43d19782dd14a7@syzkaller.appspotmail.com
    Suggested-by: Jason Gunthorpe <jgg@nvidia.com>
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 371979069a577ee5bc1bcaaa39fb53d9e4dc7e3f
Author: Maor Gottlieb <maorg@nvidia.com>
Date:   Tue Jan 18 09:35:00 2022 +0200

    RDMA/cma: Use correct address when leaving multicast group
    
    commit d9e410ebbed9d091b97bdf45b8a3792e2878dc48 upstream.
    
    In RoCE we should use cma_iboe_set_mgid() and not cma_set_mgid to generate
    the mgid, otherwise we will generate an IGMP for an incorrect address.
    
    Fixes: b5de0c60cc30 ("RDMA/cma: Fix use after free race in roce multicast join")
    Link: https://lore.kernel.org/r/913bc6783fd7a95fe71ad9454e01653ee6fb4a9a.1642491047.git.leonro@nvidia.com
    Signed-off-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa4ecd995f591013bca21d3ce599691772c193b5
Author: Yutian Yang <nglaive@gmail.com>
Date:   Thu Sep 2 14:55:07 2021 -0700

    memcg: charge fs_context and legacy_fs_context
    
    commit bb902cb47cf93b33cd92b3b7a4019330a03ef57f upstream.
    
    This patch adds accounting flags to fs_context and legacy_fs_context
    allocation sites so that kernel could correctly charge these objects.
    
    We have written a PoC to demonstrate the effect of the missing-charging
    bugs.  The PoC takes around 1,200MB unaccounted memory, while it is
    charged for only 362MB memory usage.  We evaluate the PoC on QEMU x86_64
    v5.2.90 + Linux kernel v5.10.19 + Debian buster.  All the limitations
    including ulimits and sysctl variables are set as default.  Specifically,
    the hard NOFILE limit and nr_open in sysctl are both 1,048,576.
    
    /*------------------------- POC code ----------------------------*/
    
    #define _GNU_SOURCE
    #include <sys/types.h>
    #include <sys/file.h>
    #include <time.h>
    #include <sys/wait.h>
    #include <stdint.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <stdio.h>
    #include <signal.h>
    #include <sched.h>
    #include <fcntl.h>
    #include <linux/mount.h>
    
    #define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \
                            } while (0)
    
    #define STACK_SIZE (8 * 1024)
    #ifndef __NR_fsopen
    #define __NR_fsopen 430
    #endif
    static inline int fsopen(const char *fs_name, unsigned int flags)
    {
            return syscall(__NR_fsopen, fs_name, flags);
    }
    
    static char thread_stack[512][STACK_SIZE];
    
    int thread_fn(void* arg)
    {
      for (int i = 0; i< 800000; ++i) {
        int fsfd = fsopen("nfs", FSOPEN_CLOEXEC);
        if (fsfd == -1) {
          errExit("fsopen");
        }
      }
      while(1);
      return 0;
    }
    
    int main(int argc, char *argv[]) {
      int thread_pid;
      for (int i = 0; i < 1; ++i) {
        thread_pid = clone(thread_fn, thread_stack[i] + STACK_SIZE, \
          SIGCHLD, NULL);
      }
      while(1);
      return 0;
    }
    
    /*-------------------------- end --------------------------------*/
    
    Link: https://lkml.kernel.org/r/1626517201-24086-1-git-send-email-nglaive@gmail.com
    Signed-off-by: Yutian Yang <nglaive@gmail.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <shenwenbo@zju.edu.cn>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 080f371d984e8039c66db87f3c54804b0d172329
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Fri Feb 4 17:47:55 2022 -0800

    Revert "ASoC: mediatek: Check for error clk pointer"
    
    This reverts commit d491a2c2cf96f9f3d855cf0bcd807d48ccb98e81 which is
    commit 9de2b9286a6dd16966959b3cb34fc2ddfd39213e upstream
    
    With this patch in the tree, Chromebooks running the affected hardware
    no longer boot. Bisect points to this patch, and reverting it fixes
    the problem.
    
    An analysis of the code with this patch applied shows:
    
            ret = init_clks(pdev, clk);
            if (ret)
                    return ERR_PTR(ret);
    ...
                    for (j = 0; j < MAX_CLKS && data->clk_id[j]; j++) {
                            struct clk *c = clk[data->clk_id[j]];
    
                            if (IS_ERR(c)) {
                                    dev_err(&pdev->dev, "%s: clk unavailable\n",
                                            data->name);
                                    return ERR_CAST(c);
                            }
    
                            scpd->clk[j] = c;
                    }
    
    Not all clocks in the clk_names array have to be present. Only the clocks
    in the data->clk_id array are actually needed. The code already checks if
    the required clocks are available and bails out if not. The assumption that
    all clocks have to be present is wrong, and commit 9de2b9286a6d needs to be
    reverted.
    
    Fixes: 9de2b9286a6d ("ASoC: mediatek: Check for error clk pointer")
    Cc: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: James Liao <jamesjj.liao@mediatek.com>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: Matthias Brugger <matthias.bgg@gmail.com
    Cc: Frank Wunderlich <frank-w@public-files.de>
    Cc: Daniel Golle <daniel@makrotopia.org>
    Link: https://lore.kernel.org/lkml/20220205014755.699603-1-linux@roeck-us.net/
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a9bd1e6780fc59f81466ec3489d5ad535a37190
Author: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
Date:   Sat Jan 15 18:02:35 2022 -0500

    IB/hfi1: Fix AIP early init panic
    
    commit 5f8f55b92edd621f056bdf09e572092849fabd83 upstream.
    
    An early failure in hfi1_ipoib_setup_rn() can lead to the following panic:
    
      BUG: unable to handle kernel NULL pointer dereference at 00000000000001b0
      PGD 0 P4D 0
      Oops: 0002 [#1] SMP NOPTI
      Workqueue: events work_for_cpu_fn
      RIP: 0010:try_to_grab_pending+0x2b/0x140
      Code: 1f 44 00 00 41 55 41 54 55 48 89 d5 53 48 89 fb 9c 58 0f 1f 44 00 00 48 89 c2 fa 66 0f 1f 44 00 00 48 89 55 00 40 84 f6 75 77 <f0> 48 0f ba 2b 00 72 09 31 c0 5b 5d 41 5c 41 5d c3 48 89 df e8 6c
      RSP: 0018:ffffb6b3cf7cfa48 EFLAGS: 00010046
      RAX: 0000000000000246 RBX: 00000000000001b0 RCX: 0000000000000000
      RDX: 0000000000000246 RSI: 0000000000000000 RDI: 00000000000001b0
      RBP: ffffb6b3cf7cfa70 R08: 0000000000000f09 R09: 0000000000000001
      R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000000
      R13: ffffb6b3cf7cfa90 R14: ffffffff9b2fbfc0 R15: ffff8a4fdf244690
      FS:  0000000000000000(0000) GS:ffff8a527f400000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00000000000001b0 CR3: 00000017e2410003 CR4: 00000000007706f0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
       __cancel_work_timer+0x42/0x190
       ? dev_printk_emit+0x4e/0x70
       iowait_cancel_work+0x15/0x30 [hfi1]
       hfi1_ipoib_txreq_deinit+0x5a/0x220 [hfi1]
       ? dev_err+0x6c/0x90
       hfi1_ipoib_netdev_dtor+0x15/0x30 [hfi1]
       hfi1_ipoib_setup_rn+0x10e/0x150 [hfi1]
       rdma_init_netdev+0x5a/0x80 [ib_core]
       ? hfi1_ipoib_free_rdma_netdev+0x20/0x20 [hfi1]
       ipoib_intf_init+0x6c/0x350 [ib_ipoib]
       ipoib_intf_alloc+0x5c/0xc0 [ib_ipoib]
       ipoib_add_one+0xbe/0x300 [ib_ipoib]
       add_client_context+0x12c/0x1a0 [ib_core]
       enable_device_and_get+0xdc/0x1d0 [ib_core]
       ib_register_device+0x572/0x6b0 [ib_core]
       rvt_register_device+0x11b/0x220 [rdmavt]
       hfi1_register_ib_device+0x6b4/0x770 [hfi1]
       do_init_one.isra.20+0x3e3/0x680 [hfi1]
       local_pci_probe+0x41/0x90
       work_for_cpu_fn+0x16/0x20
       process_one_work+0x1a7/0x360
       ? create_worker+0x1a0/0x1a0
       worker_thread+0x1cf/0x390
       ? create_worker+0x1a0/0x1a0
       kthread+0x116/0x130
       ? kthread_flush_work_fn+0x10/0x10
       ret_from_fork+0x1f/0x40
    
    The panic happens in hfi1_ipoib_txreq_deinit() because there is a NULL
    deref when hfi1_ipoib_netdev_dtor() is called in this error case.
    
    hfi1_ipoib_txreq_init() and hfi1_ipoib_rxq_init() are self unwinding so
    fix by adjusting the error paths accordingly.
    
    Other changes:
    - hfi1_ipoib_free_rdma_netdev() is deleted including the free_netdev()
      since the netdev core code deletes calls free_netdev()
    - The switch to the accelerated entrances is moved to the success path.
    
    Cc: stable@vger.kernel.org
    Fixes: d99dc602e2a5 ("IB/hfi1: Add functions to transmit datagram ipoib packets")
    Link: https://lore.kernel.org/r/1642287756-182313-4-git-send-email-mike.marciniszyn@cornelisnetworks.com
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d40f1bdad3dd1a177f21a90ad4353c1ed40ba3a
Author: Jordy Zomer <jordy@pwning.systems>
Date:   Sat Jan 29 16:06:04 2022 +0100

    dma-buf: heaps: Fix potential spectre v1 gadget
    
    commit 92c4cfaee6872038563c5b6f2e8e613f9d84d47d upstream.
    
    It appears like nr could be a Spectre v1 gadget as it's supplied by a
    user and used as an array index. Prevent the contents
    of kernel memory from being leaked to userspace via speculative
    execution by using array_index_nospec.
    
    Signed-off-by: Jordy Zomer <jordy@pwning.systems>
    Fixes: c02a81fba74f ("dma-buf: Add dma-buf heaps framework")
    Cc: <stable@vger.kernel.org> # v5.6+
    Acked-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
     [sumits: added fixes and cc: stable tags]
    Link: https://patchwork.freedesktop.org/patch/msgid/20220129150604.3461652-1-jordy@pwning.systems
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30de3bc099780232129c3737844ac37a809514a9
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Thu Feb 3 22:42:09 2022 -0500

    block: bio-integrity: Advance seed correctly for larger interval sizes
    
    commit b13e0c71856817fca67159b11abac350e41289f5 upstream.
    
    Commit 309a62fa3a9e ("bio-integrity: bio_integrity_advance must update
    integrity seed") added code to update the integrity seed value when
    advancing a bio. However, it failed to take into account that the
    integrity interval might be larger than the 512-byte block layer
    sector size. This broke bio splitting on PI devices with 4KB logical
    blocks.
    
    The seed value should be advanced by bio_integrity_intervals() and not
    the number of sectors.
    
    Cc: Dmitry Monakhov <dmonakhov@openvz.org>
    Cc: stable@vger.kernel.org
    Fixes: 309a62fa3a9e ("bio-integrity: bio_integrity_advance must update integrity seed")
    Tested-by: Dmitry Ivanov <dmitry.ivanov2@hpe.com>
    Reported-by: Alexey Lyashkov <alexey.lyashkov@hpe.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Link: https://lore.kernel.org/r/20220204034209.4193-1-martin.petersen@oracle.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 352715593e81b917ce1b321e794549815b850134
Author: Lang Yu <lang.yu@amd.com>
Date:   Thu Feb 3 20:49:37 2022 -0800

    mm/kmemleak: avoid scanning potential huge holes
    
    commit c10a0f877fe007021d70f9cada240f42adc2b5db upstream.
    
    When using devm_request_free_mem_region() and devm_memremap_pages() to
    add ZONE_DEVICE memory, if requested free mem region's end pfn were
    huge(e.g., 0x400000000), the node_end_pfn() will be also huge (see
    move_pfn_range_to_zone()).  Thus it creates a huge hole between
    node_start_pfn() and node_end_pfn().
    
    We found on some AMD APUs, amdkfd requested such a free mem region and
    created a huge hole.  In such a case, following code snippet was just
    doing busy test_bit() looping on the huge hole.
    
      for (pfn = start_pfn; pfn < end_pfn; pfn++) {
            struct page *page = pfn_to_online_page(pfn);
                    if (!page)
                            continue;
            ...
      }
    
    So we got a soft lockup:
    
      watchdog: BUG: soft lockup - CPU#6 stuck for 26s! [bash:1221]
      CPU: 6 PID: 1221 Comm: bash Not tainted 5.15.0-custom #1
      RIP: 0010:pfn_to_online_page+0x5/0xd0
      Call Trace:
        ? kmemleak_scan+0x16a/0x440
        kmemleak_write+0x306/0x3a0
        ? common_file_perm+0x72/0x170
        full_proxy_write+0x5c/0x90
        vfs_write+0xb9/0x260
        ksys_write+0x67/0xe0
        __x64_sys_write+0x1a/0x20
        do_syscall_64+0x3b/0xc0
        entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    I did some tests with the patch.
    
    (1) amdgpu module unloaded
    
    before the patch:
    
      real    0m0.976s
      user    0m0.000s
      sys     0m0.968s
    
    after the patch:
    
      real    0m0.981s
      user    0m0.000s
      sys     0m0.973s
    
    (2) amdgpu module loaded
    
    before the patch:
    
      real    0m35.365s
      user    0m0.000s
      sys     0m35.354s
    
    after the patch:
    
      real    0m1.049s
      user    0m0.000s
      sys     0m1.042s
    
    Link: https://lkml.kernel.org/r/20211108140029.721144-1-lang.yu@amd.com
    Signed-off-by: Lang Yu <lang.yu@amd.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7053188ddba3f6e7402000c94496066fa700891e
Author: Mike Rapoport <rppt@kernel.org>
Date:   Thu Feb 3 20:49:29 2022 -0800

    mm/pgtable: define pte_index so that preprocessor could recognize it
    
    commit 314c459a6fe0957b5885fbc65c53d51444092880 upstream.
    
    Since commit 974b9b2c68f3 ("mm: consolidate pte_index() and
    pte_offset_*() definitions") pte_index is a static inline and there is
    no define for it that can be recognized by the preprocessor.  As a
    result, vm_insert_pages() uses slower loop over vm_insert_page() instead
    of insert_pages() that amortizes the cost of spinlock operations when
    inserting multiple pages.
    
    Link: https://lkml.kernel.org/r/20220111145457.20748-1-rppt@kernel.org
    Fixes: 974b9b2c68f3 ("mm: consolidate pte_index() and pte_offset_*() definitions")
    Signed-off-by: Mike Rapoport <rppt@linux.ibm.com>
    Reported-by: Christian Dietrich <stettberger@dokucode.de>
    Reviewed-by: Khalid Aziz <khalid.aziz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bce7f5d74d74d6f97c8ce0a0dcb741f667ce68a5
Author: Pasha Tatashin <pasha.tatashin@soleen.com>
Date:   Thu Feb 3 20:49:10 2022 -0800

    mm/debug_vm_pgtable: remove pte entry from the page table
    
    commit fb5222aae64fe25e5f3ebefde8214dcf3ba33ca5 upstream.
    
    Patch series "page table check fixes and cleanups", v5.
    
    This patch (of 4):
    
    The pte entry that is used in pte_advanced_tests() is never removed from
    the page table at the end of the test.
    
    The issue is detected by page_table_check, to repro compile kernel with
    the following configs:
    
    CONFIG_DEBUG_VM_PGTABLE=y
    CONFIG_PAGE_TABLE_CHECK=y
    CONFIG_PAGE_TABLE_CHECK_ENFORCED=y
    
    During the boot the following BUG is printed:
    
      debug_vm_pgtable: [debug_vm_pgtable         ]: Validating architecture page table helpers
      ------------[ cut here ]------------
      kernel BUG at mm/page_table_check.c:162!
      invalid opcode: 0000 [#1] PREEMPT SMP PTI
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.16.0-11413-g2c271fe77d52 #3
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014
      ...
    
    The entry should be properly removed from the page table before the page
    is released to the free list.
    
    Link: https://lkml.kernel.org/r/20220131203249.2832273-1-pasha.tatashin@soleen.com
    Link: https://lkml.kernel.org/r/20220131203249.2832273-2-pasha.tatashin@soleen.com
    Fixes: a5c3b9ffb0f4 ("mm/debug_vm_pgtable: add tests validating advanced arch page table helpers")
    Signed-off-by: Pasha Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Zi Yan <ziy@nvidia.com>
    Tested-by: Zi Yan <ziy@nvidia.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Paul Turner <pjt@google.com>
    Cc: Wei Xu <weixugc@google.com>
    Cc: Greg Thelen <gthelen@google.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Mike Rapoport <rppt@kernel.org>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>    [5.9+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d83a7463d75661715616277f9664b2f0d6a513e
Author: Uday Shankar <ushankar@purestorage.com>
Date:   Thu Jan 20 12:17:37 2022 -0800

    nvme-fabrics: fix state check in nvmf_ctlr_matches_baseopts()
    
    commit 6a51abdeb259a56d95f13cc67e3a0838bcda0377 upstream.
    
    Controller deletion/reset, immediately followed by or concurrent with
    a reconnect, is hard failing the connect attempt resulting in a
    complete loss of connectivity to the controller.
    
    In the connect request, fabrics looks for an existing controller with
    the same address components and aborts the connect if a controller
    already exists and the duplicate connect option isn't set. The match
    routine filters out controllers that are dead or dying, so they don't
    interfere with the new connect request.
    
    When NVME_CTRL_DELETING_NOIO was added, it missed updating the state
    filters in the nvmf_ctlr_matches_baseopts() routine. Thus, when in this
    new state, it's seen as a live controller and fails the connect request.
    
    Correct by adding the DELETING_NIO state to the match checks.
    
    Fixes: ecca390e8056 ("nvme: fix deadlock in disconnect during scan_work and/or ana_work")
    Cc: <stable@vger.kernel.org> # v5.7+
    Signed-off-by: Uday Shankar <ushankar@purestorage.com>
    Reviewed-by: James Smart <jsmart2021@gmail.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0c73dbdd197cc78289cd56a9df8d00f53dcfada
Author: Aun-Ali Zaidi <admin@kodeit.net>
Date:   Sat Jan 29 05:49:55 2022 +0000

    drm/amd/display: Force link_rate as LINK_RATE_RBR2 for 2018 15" Apple Retina panels
    
    commit 30fbce374745a9c6af93c775a5ac49a97f822fda upstream.
    
    The eDP link rate reported by the DP_MAX_LINK_RATE dpcd register (0xa) is
    contradictory to the highest rate supported reported by
    EDID (0xc = LINK_RATE_RBR2). The effects of this compounded with commit
    '4a8ca46bae8a ("drm/amd/display: Default max bpc to 16 for eDP")' results
    in no display modes being found and a dark panel.
    
    For now, simply force the maximum supported link rate for the eDP attached
    2018 15" Apple Retina panels.
    
    Additionally, we must also check the firmware revision since the device ID
    reported by the DPCD is identical to that of the more capable 16,1,
    incorrectly quirking it. We also use said firmware check to quirk the
    refreshed 15,1 models with Vega graphics as they use a slightly newer
    firmware version.
    
    Tested-by: Aun-Ali Zaidi <admin@kodeit.net>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Aun-Ali Zaidi <admin@kodeit.net>
    Signed-off-by: Aditya Garg <gargaditya08@live.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f071d9fa857582d7bd77f4906691f73d3edeab73
Author: Nick Lopez <github@glowingmonkey.org>
Date:   Sat Jan 22 01:19:06 2022 -0700

    drm/nouveau: fix off by one in BIOS boundary checking
    
    commit 1b777d4d9e383d2744fc9b3a09af6ec1893c8b1a upstream.
    
    Bounds checking when parsing init scripts embedded in the BIOS reject
    access to the last byte. This causes driver initialization to fail on
    Apple eMac's with GeForce 2 MX GPUs, leaving the system with no working
    console.
    
    This is probably only seen on OpenFirmware machines like PowerPC Macs
    because the BIOS image provided by OF is only the used parts of the ROM,
    not a power-of-two blocks read from PCI directly so PCs always have
    empty bytes at the end that are never accessed.
    
    Signed-off-by: Nick Lopez <github@glowingmonkey.org>
    Fixes: 4d4e9907ff572 ("drm/nouveau/bios: guard against out-of-bounds accesses to image")
    Cc: <stable@vger.kernel.org> # v4.10+
    Reviewed-by: Ilia Mirkin <imirkin@alum.mit.edu>
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220122081906.2633061-1-github@glowingmonkey.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32747e01436aac8ef93fe85b5b523b4f3b52f040
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Thu Jan 20 20:09:16 2022 +0900

    btrfs: fix deadlock between quota disable and qgroup rescan worker
    
    commit e804861bd4e69cc5fe1053eedcb024982dde8e48 upstream.
    
    Quota disable ioctl starts a transaction before waiting for the qgroup
    rescan worker completes. However, this wait can be infinite and results
    in deadlock because of circular dependency among the quota disable
    ioctl, the qgroup rescan worker and the other task with transaction such
    as block group relocation task.
    
    The deadlock happens with the steps following:
    
    1) Task A calls ioctl to disable quota. It starts a transaction and
       waits for qgroup rescan worker completes.
    2) Task B such as block group relocation task starts a transaction and
       joins to the transaction that task A started. Then task B commits to
       the transaction. In this commit, task B waits for a commit by task A.
    3) Task C as the qgroup rescan worker starts its job and starts a
       transaction. In this transaction start, task C waits for completion
       of the transaction that task A started and task B committed.
    
    This deadlock was found with fstests test case btrfs/115 and a zoned
    null_blk device. The test case enables and disables quota, and the
    block group reclaim was triggered during the quota disable by chance.
    The deadlock was also observed by running quota enable and disable in
    parallel with 'btrfs balance' command on regular null_blk devices.
    
    An example report of the deadlock:
    
      [372.469894] INFO: task kworker/u16:6:103 blocked for more than 122 seconds.
      [372.479944]       Not tainted 5.16.0-rc8 #7
      [372.485067] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [372.493898] task:kworker/u16:6   state:D stack:    0 pid:  103 ppid:     2 flags:0x00004000
      [372.503285] Workqueue: btrfs-qgroup-rescan btrfs_work_helper [btrfs]
      [372.510782] Call Trace:
      [372.514092]  <TASK>
      [372.521684]  __schedule+0xb56/0x4850
      [372.530104]  ? io_schedule_timeout+0x190/0x190
      [372.538842]  ? lockdep_hardirqs_on+0x7e/0x100
      [372.547092]  ? _raw_spin_unlock_irqrestore+0x3e/0x60
      [372.555591]  schedule+0xe0/0x270
      [372.561894]  btrfs_commit_transaction+0x18bb/0x2610 [btrfs]
      [372.570506]  ? btrfs_apply_pending_changes+0x50/0x50 [btrfs]
      [372.578875]  ? free_unref_page+0x3f2/0x650
      [372.585484]  ? finish_wait+0x270/0x270
      [372.591594]  ? release_extent_buffer+0x224/0x420 [btrfs]
      [372.599264]  btrfs_qgroup_rescan_worker+0xc13/0x10c0 [btrfs]
      [372.607157]  ? lock_release+0x3a9/0x6d0
      [372.613054]  ? btrfs_qgroup_account_extent+0xda0/0xda0 [btrfs]
      [372.620960]  ? do_raw_spin_lock+0x11e/0x250
      [372.627137]  ? rwlock_bug.part.0+0x90/0x90
      [372.633215]  ? lock_is_held_type+0xe4/0x140
      [372.639404]  btrfs_work_helper+0x1ae/0xa90 [btrfs]
      [372.646268]  process_one_work+0x7e9/0x1320
      [372.652321]  ? lock_release+0x6d0/0x6d0
      [372.658081]  ? pwq_dec_nr_in_flight+0x230/0x230
      [372.664513]  ? rwlock_bug.part.0+0x90/0x90
      [372.670529]  worker_thread+0x59e/0xf90
      [372.676172]  ? process_one_work+0x1320/0x1320
      [372.682440]  kthread+0x3b9/0x490
      [372.687550]  ? _raw_spin_unlock_irq+0x24/0x50
      [372.693811]  ? set_kthread_struct+0x100/0x100
      [372.700052]  ret_from_fork+0x22/0x30
      [372.705517]  </TASK>
      [372.709747] INFO: task btrfs-transacti:2347 blocked for more than 123 seconds.
      [372.729827]       Not tainted 5.16.0-rc8 #7
      [372.745907] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [372.767106] task:btrfs-transacti state:D stack:    0 pid: 2347 ppid:     2 flags:0x00004000
      [372.787776] Call Trace:
      [372.801652]  <TASK>
      [372.812961]  __schedule+0xb56/0x4850
      [372.830011]  ? io_schedule_timeout+0x190/0x190
      [372.852547]  ? lockdep_hardirqs_on+0x7e/0x100
      [372.871761]  ? _raw_spin_unlock_irqrestore+0x3e/0x60
      [372.886792]  schedule+0xe0/0x270
      [372.901685]  wait_current_trans+0x22c/0x310 [btrfs]
      [372.919743]  ? btrfs_put_transaction+0x3d0/0x3d0 [btrfs]
      [372.938923]  ? finish_wait+0x270/0x270
      [372.959085]  ? join_transaction+0xc75/0xe30 [btrfs]
      [372.977706]  start_transaction+0x938/0x10a0 [btrfs]
      [372.997168]  transaction_kthread+0x19d/0x3c0 [btrfs]
      [373.013021]  ? btrfs_cleanup_transaction.isra.0+0xfc0/0xfc0 [btrfs]
      [373.031678]  kthread+0x3b9/0x490
      [373.047420]  ? _raw_spin_unlock_irq+0x24/0x50
      [373.064645]  ? set_kthread_struct+0x100/0x100
      [373.078571]  ret_from_fork+0x22/0x30
      [373.091197]  </TASK>
      [373.105611] INFO: task btrfs:3145 blocked for more than 123 seconds.
      [373.114147]       Not tainted 5.16.0-rc8 #7
      [373.120401] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [373.130393] task:btrfs           state:D stack:    0 pid: 3145 ppid:  3141 flags:0x00004000
      [373.140998] Call Trace:
      [373.145501]  <TASK>
      [373.149654]  __schedule+0xb56/0x4850
      [373.155306]  ? io_schedule_timeout+0x190/0x190
      [373.161965]  ? lockdep_hardirqs_on+0x7e/0x100
      [373.168469]  ? _raw_spin_unlock_irqrestore+0x3e/0x60
      [373.175468]  schedule+0xe0/0x270
      [373.180814]  wait_for_commit+0x104/0x150 [btrfs]
      [373.187643]  ? test_and_set_bit+0x20/0x20 [btrfs]
      [373.194772]  ? kmem_cache_free+0x124/0x550
      [373.201191]  ? btrfs_put_transaction+0x69/0x3d0 [btrfs]
      [373.208738]  ? finish_wait+0x270/0x270
      [373.214704]  ? __btrfs_end_transaction+0x347/0x7b0 [btrfs]
      [373.222342]  btrfs_commit_transaction+0x44d/0x2610 [btrfs]
      [373.230233]  ? join_transaction+0x255/0xe30 [btrfs]
      [373.237334]  ? btrfs_record_root_in_trans+0x4d/0x170 [btrfs]
      [373.245251]  ? btrfs_apply_pending_changes+0x50/0x50 [btrfs]
      [373.253296]  relocate_block_group+0x105/0xc20 [btrfs]
      [373.260533]  ? mutex_lock_io_nested+0x1270/0x1270
      [373.267516]  ? btrfs_wait_nocow_writers+0x85/0x180 [btrfs]
      [373.275155]  ? merge_reloc_roots+0x710/0x710 [btrfs]
      [373.283602]  ? btrfs_wait_ordered_extents+0xd30/0xd30 [btrfs]
      [373.291934]  ? kmem_cache_free+0x124/0x550
      [373.298180]  btrfs_relocate_block_group+0x35c/0x930 [btrfs]
      [373.306047]  btrfs_relocate_chunk+0x85/0x210 [btrfs]
      [373.313229]  btrfs_balance+0x12f4/0x2d20 [btrfs]
      [373.320227]  ? lock_release+0x3a9/0x6d0
      [373.326206]  ? btrfs_relocate_chunk+0x210/0x210 [btrfs]
      [373.333591]  ? lock_is_held_type+0xe4/0x140
      [373.340031]  ? rcu_read_lock_sched_held+0x3f/0x70
      [373.346910]  btrfs_ioctl_balance+0x548/0x700 [btrfs]
      [373.354207]  btrfs_ioctl+0x7f2/0x71b0 [btrfs]
      [373.360774]  ? lockdep_hardirqs_on_prepare+0x410/0x410
      [373.367957]  ? lockdep_hardirqs_on_prepare+0x410/0x410
      [373.375327]  ? btrfs_ioctl_get_supported_features+0x20/0x20 [btrfs]
      [373.383841]  ? find_held_lock+0x2c/0x110
      [373.389993]  ? lock_release+0x3a9/0x6d0
      [373.395828]  ? mntput_no_expire+0xf7/0xad0
      [373.402083]  ? lock_is_held_type+0xe4/0x140
      [373.408249]  ? vfs_fileattr_set+0x9f0/0x9f0
      [373.414486]  ? selinux_file_ioctl+0x349/0x4e0
      [373.420938]  ? trace_raw_output_lock+0xb4/0xe0
      [373.427442]  ? selinux_inode_getsecctx+0x80/0x80
      [373.434224]  ? lockdep_hardirqs_on+0x7e/0x100
      [373.440660]  ? force_qs_rnp+0x2a0/0x6b0
      [373.446534]  ? lock_is_held_type+0x9b/0x140
      [373.452763]  ? __blkcg_punt_bio_submit+0x1b0/0x1b0
      [373.459732]  ? security_file_ioctl+0x50/0x90
      [373.466089]  __x64_sys_ioctl+0x127/0x190
      [373.472022]  do_syscall_64+0x3b/0x90
      [373.477513]  entry_SYSCALL_64_after_hwframe+0x44/0xae
      [373.484823] RIP: 0033:0x7f8f4af7e2bb
      [373.490493] RSP: 002b:00007ffcbf936178 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [373.500197] RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f8f4af7e2bb
      [373.509451] RDX: 00007ffcbf936220 RSI: 00000000c4009420 RDI: 0000000000000003
      [373.518659] RBP: 00007ffcbf93774a R08: 0000000000000013 R09: 00007f8f4b02d4e0
      [373.527872] R10: 00007f8f4ae87740 R11: 0000000000000246 R12: 0000000000000001
      [373.537222] R13: 00007ffcbf936220 R14: 0000000000000000 R15: 0000000000000002
      [373.546506]  </TASK>
      [373.550878] INFO: task btrfs:3146 blocked for more than 123 seconds.
      [373.559383]       Not tainted 5.16.0-rc8 #7
      [373.565748] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [373.575748] task:btrfs           state:D stack:    0 pid: 3146 ppid:  2168 flags:0x00000000
      [373.586314] Call Trace:
      [373.590846]  <TASK>
      [373.595121]  __schedule+0xb56/0x4850
      [373.600901]  ? __lock_acquire+0x23db/0x5030
      [373.607176]  ? io_schedule_timeout+0x190/0x190
      [373.613954]  schedule+0xe0/0x270
      [373.619157]  schedule_timeout+0x168/0x220
      [373.625170]  ? usleep_range_state+0x150/0x150
      [373.631653]  ? mark_held_locks+0x9e/0xe0
      [373.637767]  ? do_raw_spin_lock+0x11e/0x250
      [373.643993]  ? lockdep_hardirqs_on_prepare+0x17b/0x410
      [373.651267]  ? _raw_spin_unlock_irq+0x24/0x50
      [373.657677]  ? lockdep_hardirqs_on+0x7e/0x100
      [373.664103]  wait_for_completion+0x163/0x250
      [373.670437]  ? bit_wait_timeout+0x160/0x160
      [373.676585]  btrfs_quota_disable+0x176/0x9a0 [btrfs]
      [373.683979]  ? btrfs_quota_enable+0x12f0/0x12f0 [btrfs]
      [373.691340]  ? down_write+0xd0/0x130
      [373.696880]  ? down_write_killable+0x150/0x150
      [373.703352]  btrfs_ioctl+0x3945/0x71b0 [btrfs]
      [373.710061]  ? find_held_lock+0x2c/0x110
      [373.716192]  ? lock_release+0x3a9/0x6d0
      [373.722047]  ? __handle_mm_fault+0x23cd/0x3050
      [373.728486]  ? btrfs_ioctl_get_supported_features+0x20/0x20 [btrfs]
      [373.737032]  ? set_pte+0x6a/0x90
      [373.742271]  ? do_raw_spin_unlock+0x55/0x1f0
      [373.748506]  ? lock_is_held_type+0xe4/0x140
      [373.754792]  ? vfs_fileattr_set+0x9f0/0x9f0
      [373.761083]  ? selinux_file_ioctl+0x349/0x4e0
      [373.767521]  ? selinux_inode_getsecctx+0x80/0x80
      [373.774247]  ? __up_read+0x182/0x6e0
      [373.780026]  ? count_memcg_events.constprop.0+0x46/0x60
      [373.787281]  ? up_write+0x460/0x460
      [373.792932]  ? security_file_ioctl+0x50/0x90
      [373.799232]  __x64_sys_ioctl+0x127/0x190
      [373.805237]  do_syscall_64+0x3b/0x90
      [373.810947]  entry_SYSCALL_64_after_hwframe+0x44/0xae
      [373.818102] RIP: 0033:0x7f1383ea02bb
      [373.823847] RSP: 002b:00007fffeb4d71f8 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
      [373.833641] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f1383ea02bb
      [373.842961] RDX: 00007fffeb4d7210 RSI: 00000000c0109428 RDI: 0000000000000003
      [373.852179] RBP: 0000000000000003 R08: 0000000000000003 R09: 0000000000000078
      [373.861408] R10: 00007f1383daec78 R11: 0000000000000202 R12: 00007fffeb4d874a
      [373.870647] R13: 0000000000493099 R14: 0000000000000001 R15: 0000000000000000
      [373.879838]  </TASK>
      [373.884018]
                   Showing all locks held in the system:
      [373.894250] 3 locks held by kworker/4:1/58:
      [373.900356] 1 lock held by khungtaskd/63:
      [373.906333]  #0: ffffffff8945ff60 (rcu_read_lock){....}-{1:2}, at: debug_show_all_locks+0x53/0x260
      [373.917307] 3 locks held by kworker/u16:6/103:
      [373.923938]  #0: ffff888127b4f138 ((wq_completion)btrfs-qgroup-rescan){+.+.}-{0:0}, at: process_one_work+0x712/0x1320
      [373.936555]  #1: ffff88810b817dd8 ((work_completion)(&work->normal_work)){+.+.}-{0:0}, at: process_one_work+0x73f/0x1320
      [373.951109]  #2: ffff888102dd4650 (sb_internal#2){.+.+}-{0:0}, at: btrfs_qgroup_rescan_worker+0x1f6/0x10c0 [btrfs]
      [373.964027] 2 locks held by less/1803:
      [373.969982]  #0: ffff88813ed56098 (&tty->ldisc_sem){++++}-{0:0}, at: tty_ldisc_ref_wait+0x24/0x80
      [373.981295]  #1: ffffc90000b3b2e8 (&ldata->atomic_read_lock){+.+.}-{3:3}, at: n_tty_read+0x9e2/0x1060
      [373.992969] 1 lock held by btrfs-transacti/2347:
      [373.999893]  #0: ffff88813d4887a8 (&fs_info->transaction_kthread_mutex){+.+.}-{3:3}, at: transaction_kthread+0xe3/0x3c0 [btrfs]
      [374.015872] 3 locks held by btrfs/3145:
      [374.022298]  #0: ffff888102dd4460 (sb_writers#18){.+.+}-{0:0}, at: btrfs_ioctl_balance+0xc3/0x700 [btrfs]
      [374.034456]  #1: ffff88813d48a0a0 (&fs_info->reclaim_bgs_lock){+.+.}-{3:3}, at: btrfs_balance+0xfe5/0x2d20 [btrfs]
      [374.047646]  #2: ffff88813d488838 (&fs_info->cleaner_mutex){+.+.}-{3:3}, at: btrfs_relocate_block_group+0x354/0x930 [btrfs]
      [374.063295] 4 locks held by btrfs/3146:
      [374.069647]  #0: ffff888102dd4460 (sb_writers#18){.+.+}-{0:0}, at: btrfs_ioctl+0x38b1/0x71b0 [btrfs]
      [374.081601]  #1: ffff88813d488bb8 (&fs_info->subvol_sem){+.+.}-{3:3}, at: btrfs_ioctl+0x38fd/0x71b0 [btrfs]
      [374.094283]  #2: ffff888102dd4650 (sb_internal#2){.+.+}-{0:0}, at: btrfs_quota_disable+0xc8/0x9a0 [btrfs]
      [374.106885]  #3: ffff88813d489800 (&fs_info->qgroup_ioctl_lock){+.+.}-{3:3}, at: btrfs_quota_disable+0xd5/0x9a0 [btrfs]
    
      [374.126780] =============================================
    
    To avoid the deadlock, wait for the qgroup rescan worker to complete
    before starting the transaction for the quota disable ioctl. Clear
    BTRFS_FS_QUOTA_ENABLE flag before the wait and the transaction to
    request the worker to complete. On transaction start failure, set the
    BTRFS_FS_QUOTA_ENABLE flag again. These BTRFS_FS_QUOTA_ENABLE flag
    changes can be done safely since the function btrfs_quota_disable is not
    called concurrently because of fs_info->subvol_sem.
    
    Also check the BTRFS_FS_QUOTA_ENABLE flag in qgroup_rescan_init to avoid
    another qgroup rescan worker to start after the previous qgroup worker
    completed.
    
    CC: stable@vger.kernel.org # 5.4+
    Suggested-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa5d406153c53d12e1c4a09f657a3b1e55220ef2
Author: Christian Lachner <gladiac@gmail.com>
Date:   Sat Jan 29 12:32:43 2022 +0100

    ALSA: hda/realtek: Fix silent output on Gigabyte X570 Aorus Xtreme after reboot from Windows
    
    commit ea3541961376f733373839cc90493aafa8a7f733 upstream.
    
    This commit switches the Gigabyte X570 Aorus Xtreme from using the
    ALC1220_FIXUP_CLEVO_P950 to the ALC1220_FIXUP_GB_X570 quirk. This fixes
    the no-audio after reboot from windows problem.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205275
    Signed-off-by: Christian Lachner <gladiac@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220129113243.93068-4-gladiac@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4aa3a98596f6d6968881942b9b70cbd1fffae6d
Author: Christian Lachner <gladiac@gmail.com>
Date:   Sat Jan 29 12:32:42 2022 +0100

    ALSA: hda/realtek: Fix silent output on Gigabyte X570S Aorus Master (newer chipset)
    
    commit 41a8601302ecbe704ac970552c33dc942300fc37 upstream.
    
    Newer versions of the X570 Master come with a newer revision of the
    mainboard chipset - the X570S. These boards have the same ALC1220 codec
    but seem to initialize the codec with a different parameter in Coef 0x7
    which causes the output audio to be very low. We therefore write a
    known-good value to Coef 0x7 to fix that. As the value is the exact same
    as on the other X570(non-S) boards the same quirk-function can be shared
    between both generations.
    
    This commit adds the Gigabyte X570S Aorus Master to the list of boards
    using the ALC1220_FIXUP_GB_X570 quirk. This fixes both, the silent output
    and the no-audio after reboot from windows problems.
    
    This work has been tested by the folks over at the level1techs forum here:
    https://forum.level1techs.com/t/has-anybody-gotten-audio-working-in-linux-on-aorus-x570-master/154072
    
    Signed-off-by: Christian Lachner <gladiac@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220129113243.93068-3-gladiac@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a8a8072e32be002804cf1d029a2eef8c61b2fe0
Author: Christian Lachner <gladiac@gmail.com>
Date:   Sat Jan 29 12:32:41 2022 +0100

    ALSA: hda/realtek: Add missing fixup-model entry for Gigabyte X570 ALC1220 quirks
    
    commit 63394a16086fc2152869d7902621e2525e14bc40 upstream.
    
    The initial commit of the new Gigabyte X570 ALC1220 quirks lacked the
    fixup-model entry in alc882_fixup_models[]. It seemed not to cause any ill
    effects but for completeness sake this commit makes up for that.
    
    Signed-off-by: Christian Lachner <gladiac@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220129113243.93068-2-gladiac@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 532cde962f5f1a3963729ed748f858ca5baddd05
Author: Albert Geantă <albertgeanta@gmail.com>
Date:   Mon Jan 31 03:05:23 2022 +0200

    ALSA: hda/realtek: Add quirk for ASUS GU603
    
    commit 94db9cc8f8fa2d5426ce79ec4ca16028f7084224 upstream.
    
    The ASUS GU603 (Zephyrus M16 - SSID 1043:16b2) requires a quirk similar to
    other ASUS devices for correctly routing the 4 integrated speakers. This
    fixes it by adding a corresponding quirk entry, which connects the bass
    speakers to the proper DAC.
    
    Signed-off-by: Albert Geantă <albertgeanta@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220131010523.546386-1-albertgeanta@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 410f231fd70c891469ff7c7c76fcd59a86b29a65
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jan 31 08:57:38 2022 +0100

    ALSA: hda: realtek: Fix race at concurrent COEF updates
    
    commit b837a9f5ab3bdfab9233c9f98a6bef717673a3e5 upstream.
    
    The COEF access is done with two steps: setting the index then read or
    write the data.  When multiple COEF accesses are performed
    concurrently, the index and data might be paired unexpectedly.
    In most cases, this isn't a big problem as the COEF setup is done at
    the initialization, but some dynamic changes like the mute LED may hit
    such a race.
    
    For avoiding the racy COEF accesses, this patch introduces a new
    mutex coef_mutex to alc_spec, and wrap the COEF accessing functions
    with it.
    
    Reported-by: Alexander Sergeyev <sergeev917@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220111195229.a77wrpjclqwrx4bx@localhost.localdomain
    Link: https://lore.kernel.org/r/20220131075738.24323-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7de1002135cf94367748ffc695a29812d7633b5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jan 26 15:50:11 2022 +0100

    ALSA: hda: Fix UAF of leds class devs at unbinding
    
    commit 549f8ffc7b2f7561bea7f90930b6c5104318e87b upstream.
    
    The LED class devices that are created by HD-audio codec drivers are
    registered via devm_led_classdev_register() and associated with the
    HD-audio codec device.  Unfortunately, it turned out that the devres
    release doesn't work for this case; namely, since the codec resource
    release happens before the devm call chain, it triggers a NULL
    dereference or a UAF for a stale set_brightness_delay callback.
    
    For fixing the bug, this patch changes the LED class device register
    and unregister in a manual manner without devres, keeping the
    instances in hda_gen_spec.
    
    Reported-by: Alexander Sergeyev <sergeev917@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220111195229.a77wrpjclqwrx4bx@localhost.localdomain
    Link: https://lore.kernel.org/r/20220126145011.16728-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 470bbb9cbd8fe115d844222317666f672d32c1fc
Author: Jonas Hahnfeld <hahnjo@hahnjo.de>
Date:   Mon Jan 31 19:35:16 2022 +0100

    ALSA: usb-audio: Correct quirk for VF0770
    
    commit 4ee02e20893d2f9e951c7888f2284fa608ddaa35 upstream.
    
    This device provides both audio and video. The original quirk added in
    commit 48827e1d6af5 ("ALSA: usb-audio: Add quirk for VF0770") used
    USB_DEVICE to match the vendor and product ID. Depending on module order,
    if snd-usb-audio was asked first, it would match the entire device and
    uvcvideo wouldn't get to see it. Change the matching to USB_AUDIO_DEVICE
    to restore uvcvideo matching in all cases.
    
    Fixes: 48827e1d6af5 ("ALSA: usb-audio: Add quirk for VF0770")
    Reported-by: Jukka Heikintalo <heikintalo.jukka@gmail.com>
    Tested-by: Jukka Heikintalo <heikintalo.jukka@gmail.com>
    Reported-by: Paweł Susicki <pawel.susicki@gmail.com>
    Tested-by: Paweł Susicki <pawel.susicki@gmail.com>
    Cc: <stable@vger.kernel.org> # 5.4, 5.10, 5.14, 5.15
    Signed-off-by: Jonas Hahnfeld <hahnjo@hahnjo.de>
    Link: https://lore.kernel.org/r/20220131183516.61191-1-hahnjo@hahnjo.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6877f87579ed830f9ff6d478539074f035d04bfb
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 24 15:32:53 2022 +0000

    ASoC: ops: Reject out of bounds values in snd_soc_put_xr_sx()
    
    commit 4cf28e9ae6e2e11a044be1bcbcfa1b0d8675fe4d upstream.
    
    We don't currently validate that the values being set are within the range
    we advertised to userspace as being valid, do so and reject any values
    that are out of range.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220124153253.3548853-4-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 038f8b7caa74d29e020949a43ca368c93f6b29b9
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 24 15:32:52 2022 +0000

    ASoC: ops: Reject out of bounds values in snd_soc_put_volsw_sx()
    
    commit 4f1e50d6a9cf9c1b8c859d449b5031cacfa8404e upstream.
    
    We don't currently validate that the values being set are within the range
    we advertised to userspace as being valid, do so and reject any values
    that are out of range.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220124153253.3548853-3-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9394f21fba027147bf275b083c77955864c366a
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 24 15:32:51 2022 +0000

    ASoC: ops: Reject out of bounds values in snd_soc_put_volsw()
    
    commit 817f7c9335ec01e0f5e8caffc4f1dcd5e458a4c0 upstream.
    
    We don't currently validate that the values being set are within the range
    we advertised to userspace as being valid, do so and reject any values
    that are out of range.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220124153253.3548853-2-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ff6b805069506318fb7385304b864d6694d9363
Author: Paul Moore <paul@paul-moore.com>
Date:   Thu Jan 13 18:54:38 2022 -0500

    audit: improve audit queue handling when "audit=1" on cmdline
    
    commit f26d04331360d42dbd6b58448bd98e4edbfbe1c5 upstream.
    
    When an admin enables audit at early boot via the "audit=1" kernel
    command line the audit queue behavior is slightly different; the
    audit subsystem goes to greater lengths to avoid dropping records,
    which unfortunately can result in problems when the audit daemon is
    forcibly stopped for an extended period of time.
    
    This patch makes a number of changes designed to improve the audit
    queuing behavior so that leaving the audit daemon in a stopped state
    for an extended period does not cause a significant impact to the
    system.
    
    - kauditd_send_queue() is now limited to looping through the
      passed queue only once per call.  This not only prevents the
      function from looping indefinitely when records are returned
      to the current queue, it also allows any recovery handling in
      kauditd_thread() to take place when kauditd_send_queue()
      returns.
    
    - Transient netlink send errors seen as -EAGAIN now cause the
      record to be returned to the retry queue instead of going to
      the hold queue.  The intention of the hold queue is to store,
      perhaps for an extended period of time, the events which led
      up to the audit daemon going offline.  The retry queue remains
      a temporary queue intended to protect against transient issues
      between the kernel and the audit daemon.
    
    - The retry queue is now limited by the audit_backlog_limit
      setting, the same as the other queues.  This allows admins
      to bound the size of all of the audit queues on the system.
    
    - kauditd_rehold_skb() now returns records to the end of the
      hold queue to ensure ordering is preserved in the face of
      recent changes to kauditd_send_queue().
    
    Cc: stable@vger.kernel.org
    Fixes: 5b52330bbfe63 ("audit: fix auditd/kernel connection state tracking")
    Fixes: f4b3ee3c85551 ("audit: improve robustness of the audit queue handling")
    Reported-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Tested-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f446089a268c8fc6908488e991d28a9b936293db
Author: Vratislav Bendel <vbendel@redhat.com>
Date:   Wed Feb 2 12:25:11 2022 +0100

    selinux: fix double free of cond_list on error paths
    
    commit 186edf7e368c40d06cf727a1ad14698ea67b74ad upstream.
    
    On error path from cond_read_list() and duplicate_policydb_cond_list()
    the cond_list_destroy() gets called a second time in caller functions,
    resulting in NULL pointer deref.  Fix this by resetting the
    cond_list_len to 0 in cond_list_destroy(), making subsequent calls a
    noop.
    
    Also consistently reset the cond_list pointer to NULL after freeing.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Vratislav Bendel <vbendel@redhat.com>
    [PM: fix line lengths in the description]
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
