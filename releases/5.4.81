commit 42af416d71462a72b02ba6ac632c8dcb9ce729a0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 2 08:49:57 2020 +0100

    Linux 5.4.81
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201201084652.827177826@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd734398737641a6dc13f09a4d9357174c879df6
Author: Mateusz Gorski <mateusz.gorski@linux.intel.com>
Date:   Sun Nov 29 12:41:48 2020 +0100

    ASoC: Intel: Skylake: Automatic DMIC format configuration according to information from NHLT
    
    commit 2d744ecf2b98405723a2138a547e5c75009bc4e5 upstream.
    
    Automatically choose DMIC pipeline format configuration depending on
    information included in NHLT.
    Change the access rights of appropriate kcontrols to read-only in order
    to prevent user interference.
    
    Signed-off-by: Mateusz Gorski <mateusz.gorski@linux.intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427132727.24942-4-mateusz.gorski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ebb6af62721767a437a4ac76736682631157985
Author: Mateusz Gorski <mateusz.gorski@linux.intel.com>
Date:   Sun Nov 29 12:41:47 2020 +0100

    ASoC: Intel: Multiple I/O PCM format support for pipe
    
    commit 1b450791d517d4d6666ab9ab6d9a20c8819e3572 upstream.
    
    For pipes supporting multiple input/output formats, kcontrol is
    created and selection of pipe input and output configuration
    is done based on control set.
    
    If more than one configuration is supported, then this patch
    allows user to select configuration of choice
    using amixer settings.
    
    Signed-off-by: Mateusz Gorski <mateusz.gorski@linux.intel.com>
    Signed-off-by: Pavan K S <pavan.k.s@intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427132727.24942-3-mateusz.gorski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2b05b04d44da4448eded3b9be33cbca1dfcd771
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Sun Nov 29 12:41:46 2020 +0100

    ASoC: Intel: Skylake: Await purge request ack on CNL
    
    commit 7693cadac86548b30389a6e11d78c38db654f393 upstream.
    
    Each purge request is sent by driver after master core is powered up and
    unresetted but before it is unstalled. On unstall, ROM begins processing
    the request and initializing environment for FW load. Host should await
    ROM's ack before moving forward. Without doing so, ROM init poll may
    start too early and false timeouts can occur.
    
    Fixes: cb6a55284629 ("ASoC: Intel: cnl: Add sst library functions for cnl platform")
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200305145314.32579-8-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a28144d62ddc287a9d00102b4f36904ecd976258
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Sun Nov 29 12:41:45 2020 +0100

    ASoC: Intel: Allow for ROM init retry on CNL platforms
    
    commit 024aa45f55ccd40704cfdef61b2a8b6d0de9cdd1 upstream.
    
    Due to unconditional initial timeouts, firmware may fail to load during
    its initialization. This issue cannot be resolved on driver side as it
    is caused by external sources such as CSME but has to be accounted for
    nonetheless.
    
    Fixes: cb6a55284629 ("ASoC: Intel: cnl: Add sst library functions for cnl platform")
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200305145314.32579-7-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4029a29f93ef68b51000dfa03a1fc7efa655d535
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Sun Nov 29 12:41:44 2020 +0100

    ASoC: Intel: Skylake: Shield against no-NHLT configurations
    
    commit 9e6c382f5a6161eb55115fb56614b9827f2e7da3 upstream.
    
    Some configurations expose no NHLT table at all within their
    /sys/firmware/acpi/tables. To prevent NULL-dereference errors from
    occurring, adjust probe flow and append additional safety checks in
    functions involved in NHLT lifecycle.
    
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200305145314.32579-5-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 754df2d3349dd1ddd5653512d0f2aa241d916a7b
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Sun Nov 29 12:41:43 2020 +0100

    ASoC: Intel: Skylake: Enable codec wakeup during chip init
    
    commit e603f11d5df8997d104ab405ff27640b90baffaa upstream.
    
    Follow the recommendation set by hda_intel.c and enable HDMI/DP codec
    wakeup during bus initialization procedure. Disable wakeup once init
    completes.
    
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200305145314.32579-4-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6de661f146a294b63bd91f484e3b212cd486f111
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Sun Nov 29 12:41:42 2020 +0100

    ASoC: Intel: Skylake: Select hda configuration permissively
    
    commit a66f88394a78fec9a05fa6e517e9603e8eca8363 upstream.
    
    With _reset_link removed from the probe sequence, codec_mask at the time
    skl_find_hda_machine() is invoked will always be 0, so hda machine will
    never be chosen. Rather than reorganizing boot flow, be permissive about
    invalid mask. codec_mask will be set to proper value during probe_work -
    before skl_codec_create() ever gets called.
    
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200305145314.32579-3-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 422c4938f704f6854b20205afc63658fa1f95028
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Sun Nov 29 12:41:41 2020 +0100

    ASoC: Intel: Skylake: Remove superfluous chip initialization
    
    commit 2ef81057d80456870b97890dd79c8f56a85b1242 upstream.
    
    Skylake driver does the controller init operation twice:
    - first during probe (only to stop it just before scheduling probe_work)
    - and during said probe_work where the actual correct sequence is
    executed
    
    To properly complete boot sequence when iDisp codec is present, bus
    initialization has to be called only after _i915_init() finishes.
    With additional _reset_list preceding _i915_init(), iDisp codec never
    gets the chance to enumerate on the link. Remove the superfluous
    initialization to address the issue.
    
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200305145314.32579-2-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23b093a2c4f9cc122af853331ba1de56da65a305
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Nov 19 12:00:40 2020 -0500

    USB: core: Fix regression in Hercules audio card
    
    commit 184eead057cc7e803558269babc1f2cfb9113ad1 upstream
    
    Commit 3e4f8e21c4f2 ("USB: core: fix check for duplicate endpoints")
    aimed to make the USB stack more reliable by detecting and skipping
    over endpoints that are duplicated between interfaces.  This caused a
    regression for a Hercules audio card (reported as Bugzilla #208357),
    which contains such non-compliant duplications.  Although the
    duplications are harmless, skipping the valid endpoints prevented the
    device from working.
    
    This patch fixes the regression by adding ENDPOINT_IGNORE quirks for
    the Hercules card, telling the kernel to ignore the invalid duplicate
    endpoints and thereby allowing the valid endpoints to be used as
    intended.
    
    Fixes: 3e4f8e21c4f2 ("USB: core: fix check for duplicate endpoints")
    CC: <stable@vger.kernel.org>
    Reported-by: Alexander Chalikiopoulos <bugzilla.kernel.org@mrtoasted.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201119170040.GA576844@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [sudip: use usb_endpoint_blacklist and USB_QUIRK_ENDPOINT_BLACKLIST]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc54f8b8e1cd5d47fa02f04b28187cf6e082c642
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Sat Oct 31 03:11:28 2020 +0800

    x86/resctrl: Add necessary kernfs_put() calls to prevent refcount leak
    
    commit 758999246965eeb8b253d47e72f7bfe508804b16 upstream.
    
    On resource group creation via a mkdir an extra kernfs_node reference is
    obtained by kernfs_get() to ensure that the rdtgroup structure remains
    accessible for the rdtgroup_kn_unlock() calls where it is removed on
    deletion. Currently the extra kernfs_node reference count is only
    dropped by kernfs_put() in rdtgroup_kn_unlock() while the rdtgroup
    structure is removed in a few other locations that lack the matching
    reference drop.
    
    In call paths of rmdir and umount, when a control group is removed,
    kernfs_remove() is called to remove the whole kernfs nodes tree of the
    control group (including the kernfs nodes trees of all child monitoring
    groups), and then rdtgroup structure is freed by kfree(). The rdtgroup
    structures of all child monitoring groups under the control group are
    freed by kfree() in free_all_child_rdtgrp().
    
    Before calling kfree() to free the rdtgroup structures, the kernfs node
    of the control group itself as well as the kernfs nodes of all child
    monitoring groups still take the extra references which will never be
    dropped to 0 and the kernfs nodes will never be freed. It leads to
    reference count leak and kernfs_node_cache memory leak.
    
    For example, reference count leak is observed in these two cases:
      (1) mount -t resctrl resctrl /sys/fs/resctrl
          mkdir /sys/fs/resctrl/c1
          mkdir /sys/fs/resctrl/c1/mon_groups/m1
          umount /sys/fs/resctrl
    
      (2) mkdir /sys/fs/resctrl/c1
          mkdir /sys/fs/resctrl/c1/mon_groups/m1
          rmdir /sys/fs/resctrl/c1
    
    The same reference count leak issue also exists in the error exit paths
    of mkdir in mkdir_rdt_prepare() and rdtgroup_mkdir_ctrl_mon().
    
    Fix this issue by following changes to make sure the extra kernfs_node
    reference on rdtgroup is dropped before freeing the rdtgroup structure.
      (1) Introduce rdtgroup removal helper rdtgroup_remove() to wrap up
      kernfs_put() and kfree().
    
      (2) Call rdtgroup_remove() in rdtgroup removal path where the rdtgroup
      structure is about to be freed by kfree().
    
      (3) Call rdtgroup_remove() or kernfs_put() as appropriate in the error
      exit paths of mkdir where an extra reference is taken by kernfs_get().
    
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: e02737d5b826 ("x86/intel_rdt: Add tasks files")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1604085088-31707-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0c4c5a89f5bc76fff1cc3830d019da7760f0356
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Sat Oct 31 03:10:53 2020 +0800

    x86/resctrl: Remove superfluous kernfs_get() calls to prevent refcount leak
    
    commit fd8d9db3559a29fd737bcdb7c4fcbe1940caae34 upstream.
    
    Willem reported growing of kernfs_node_cache entries in slabtop when
    repeatedly creating and removing resctrl subdirectories as well as when
    repeatedly mounting and unmounting the resctrl filesystem.
    
    On resource group (control as well as monitoring) creation via a mkdir
    an extra kernfs_node reference is obtained to ensure that the rdtgroup
    structure remains accessible for the rdtgroup_kn_unlock() calls where it
    is removed on deletion. The kernfs_node reference count is dropped by
    kernfs_put() in rdtgroup_kn_unlock().
    
    With the above explaining the need for one kernfs_get()/kernfs_put()
    pair in resctrl there are more places where a kernfs_node reference is
    obtained without a corresponding release. The excessive amount of
    reference count on kernfs nodes will never be dropped to 0 and the
    kernfs nodes will never be freed in the call paths of rmdir and umount.
    It leads to reference count leak and kernfs_node_cache memory leak.
    
    Remove the superfluous kernfs_get() calls and expand the existing
    comments surrounding the remaining kernfs_get()/kernfs_put() pair that
    remains in use.
    
    Superfluous kernfs_get() calls are removed from two areas:
    
      (1) In call paths of mount and mkdir, when kernfs nodes for "info",
      "mon_groups" and "mon_data" directories and sub-directories are
      created, the reference count of newly created kernfs node is set to 1.
      But after kernfs_create_dir() returns, superfluous kernfs_get() are
      called to take an additional reference.
    
      (2) kernfs_get() calls in rmdir call paths.
    
    Fixes: 17eafd076291 ("x86/intel_rdt: Split resource group removal in two")
    Fixes: 4af4a88e0c92 ("x86/intel_rdt/cqm: Add mount,umount support")
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: d89b7379015f ("x86/intel_rdt/cqm: Add mon_data")
    Fixes: c7d9aac61311 ("x86/intel_rdt/cqm: Add mkdir support for RDT monitoring")
    Fixes: 5dc1d5c6bac2 ("x86/intel_rdt: Simplify info and base file lists")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Fixes: 4e978d06dedb ("x86/intel_rdt: Add "info" files to resctrl file system")
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Tested-by: Willem de Bruijn <willemb@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1604085053-31639-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e799c00a745e6c5f2b5a8891159b619621a9b8f4
Author: Anand K Mistry <amistry@google.com>
Date:   Tue Nov 10 12:33:53 2020 +1100

    x86/speculation: Fix prctl() when spectre_v2_user={seccomp,prctl},ibpb
    
    commit 33fc379df76b4991e5ae312f07bcd6820811971e upstream.
    
    When spectre_v2_user={seccomp,prctl},ibpb is specified on the command
    line, IBPB is force-enabled and STIPB is conditionally-enabled (or not
    available).
    
    However, since
    
      21998a351512 ("x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.")
    
    the spectre_v2_user_ibpb variable is set to SPECTRE_V2_USER_{PRCTL,SECCOMP}
    instead of SPECTRE_V2_USER_STRICT, which is the actual behaviour.
    Because the issuing of IBPB relies on the switch_mm_*_ibpb static
    branches, the mitigations behave as expected.
    
    Since
    
      1978b3a53a74 ("x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP")
    
    this discrepency caused the misreporting of IB speculation via prctl().
    
    On CPUs with STIBP always-on and spectre_v2_user=seccomp,ibpb,
    prctl(PR_GET_SPECULATION_CTRL) would return PR_SPEC_PRCTL |
    PR_SPEC_ENABLE instead of PR_SPEC_DISABLE since both IBPB and STIPB are
    always on. It also allowed prctl(PR_SET_SPECULATION_CTRL) to set the IB
    speculation mode, even though the flag is ignored.
    
    Similarly, for CPUs without SMT, prctl(PR_GET_SPECULATION_CTRL) should
    also return PR_SPEC_DISABLE since IBPB is always on and STIBP is not
    available.
    
     [ bp: Massage commit message. ]
    
    Fixes: 21998a351512 ("x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.")
    Fixes: 1978b3a53a74 ("x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP")
    Signed-off-by: Anand K Mistry <amistry@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201110123349.1.Id0cbf996d2151f4c143c90f9028651a5b49a5908@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f753e1c02a2e788052a98ed4609902f07413da68
Author: Gabriele Paoloni <gabriele.paoloni@intel.com>
Date:   Fri Nov 27 16:18:15 2020 +0000

    x86/mce: Do not overwrite no_way_out if mce_end() fails
    
    commit 25bc65d8ddfc17cc1d7a45bd48e9bdc0e729ced3 upstream.
    
    Currently, if mce_end() fails, no_way_out - the variable denoting
    whether the machine can recover from this MCE - is determined by whether
    the worst severity that was found across the MCA banks associated with
    the current CPU, is of panic severity.
    
    However, at this point no_way_out could have been already set by
    mca_start() after looking at all severities of all CPUs that entered the
    MCE handler. If mce_end() fails, check first if no_way_out is already
    set and, if so, stick to it, otherwise use the local worst value.
    
     [ bp: Massage. ]
    
    Signed-off-by: Gabriele Paoloni <gabriele.paoloni@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201127161819.3106432-2-gabriele.paoloni@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62405223bafd54232558f9cc30e3a3c6ae264a74
Author: Chen Baozi <chenbaozi@phytium.com.cn>
Date:   Tue Nov 17 11:20:15 2020 +0800

    irqchip/exiu: Fix the index of fwspec for IRQ type
    
    commit d001e41e1b15716e9b759df5ef00510699f85282 upstream.
    
    Since fwspec->param_count of ACPI node is two, the index of IRQ type
    in fwspec->param[] should be 1 rather than 2.
    
    Fixes: 3d090a36c8c8 ("irqchip/exiu: Implement ACPI support")
    Signed-off-by: Chen Baozi <chenbaozi@phytium.com.cn>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Link: https://lore.kernel.org/r/20201117032015.11805-1-cbz@baozis.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f69d749d5f7fa29de59df256152486933fdb6adf
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 17 10:16:29 2020 +0800

    usb: gadget: Fix memleak in gadgetfs_fill_super
    
    commit 87bed3d7d26c974948a3d6e7176f304b2d41272b upstream.
    
    usb_get_gadget_udc_name will alloc memory for CHIP
    in "Enomem" branch. we should free it before error
    returns to prevent memleak.
    
    Fixes: 175f712119c57 ("usb: gadget: provide interface for legacy gadgets to get UDC name")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201117021629.1470544-3-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cad7b76a612925d3ff37e1b5753b06babd9ad7db
Author: penghao <penghao@uniontech.com>
Date:   Wed Nov 18 20:30:39 2020 +0800

    USB: quirks: Add USB_QUIRK_DISCONNECT_SUSPEND quirk for Lenovo A630Z TIO built-in usb-audio card
    
    commit 9ca57518361418ad5ae7dc38a2128fbf4855e1a2 upstream.
    
    Add a USB_QUIRK_DISCONNECT_SUSPEND quirk for the Lenovo TIO built-in
    usb-audio. when A630Z going into S3,the system immediately wakeup 7-8
    seconds later by usb-audio disconnect interrupt to avoids the issue.
    eg dmesg:
    ....
    [  626.974091 ] usb 7-1.1: USB disconnect, device number 3
    ....
    ....
    [ 1774.486691] usb 7-1.1: new full-speed USB device number 5 using xhci_hcd
    [ 1774.947742] usb 7-1.1: New USB device found, idVendor=17ef, idProduct=a012, bcdDevice= 0.55
    [ 1774.956588] usb 7-1.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
    [ 1774.964339] usb 7-1.1: Product: Thinkcentre TIO24Gen3 for USB-audio
    [ 1774.970999] usb 7-1.1: Manufacturer: Lenovo
    [ 1774.975447] usb 7-1.1: SerialNumber: 000000000000
    [ 1775.048590] usb 7-1.1: 2:1: cannot get freq at ep 0x1
    .......
    Seeking a better fix, we've tried a lot of things, including:
     - Check that the device's power/wakeup is disabled
     - Check that remote wakeup is off at the USB level
     - All the quirks in drivers/usb/core/quirks.c
       e.g. USB_QUIRK_RESET_RESUME,
            USB_QUIRK_RESET,
            USB_QUIRK_IGNORE_REMOTE_WAKEUP,
            USB_QUIRK_NO_LPM.
    
    but none of that makes any difference.
    
    There are no errors in the logs showing any suspend/resume-related issues.
    When the system wakes up due to the modem, log-wise it appears to be a
    normal resume.
    
    Introduce a quirk to disable the port during suspend when the modem is
    detected.
    
    Signed-off-by: penghao <penghao@uniontech.com>
    Link: https://lore.kernel.org/r/20201118123039.11696-1-penghao@uniontech.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c775935dfd1e4f83e6881d948abc76d7cfb29f68
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 17 10:16:28 2020 +0800

    usb: gadget: f_midi: Fix memleak in f_midi_alloc
    
    commit e7694cb6998379341fd9bf3bd62b48c4e6a79385 upstream.
    
    In the error path, if midi is not null, we should
    free the midi->id if necessary to prevent memleak.
    
    Fixes: b85e9de9e818d ("usb: gadget: f_midi: convert to new function interface with backward compatibility")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201117021629.1470544-2-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1a2a3043cc2478e6c02cac4e8d6e4af91b6dfae
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Nov 19 12:02:28 2020 -0500

    USB: core: Change %pK for __user pointers to %px
    
    commit f3bc432aa8a7a2bfe9ebb432502be5c5d979d7fe upstream.
    
    Commit 2f964780c03b ("USB: core: replace %p with %pK") used the %pK
    format specifier for a bunch of __user pointers.  But as the 'K' in
    the specifier indicates, it is meant for kernel pointers.  The reason
    for the %pK specifier is to avoid leaks of kernel addresses, but when
    the pointer is to an address in userspace the security implications
    are minimal.  In particular, no kernel information is leaked.
    
    This patch changes the __user %pK specifiers (used in a bunch of
    debugging output lines) to %px, which will always print the actual
    address with no mangling.  (Notably, there is no printk format
    specifier particularly intended for __user pointers.)
    
    Fixes: 2f964780c03b ("USB: core: replace %p with %pK")
    CC: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201119170228.GB576844@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84d04d722b6a81ac736ab87a48a7608f3e414250
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Nov 13 11:07:02 2020 -0700

    spi: bcm2835aux: Restore err assignment in bcm2835aux_spi_probe
    
    commit d853b3406903a7dc5b14eb5bada3e8cd677f66a2 upstream.
    
    Clang warns:
    
    drivers/spi/spi-bcm2835aux.c:532:50: warning: variable 'err' is
    uninitialized when used here [-Wuninitialized]
                    dev_err(&pdev->dev, "could not get clk: %d\n", err);
                                                                   ^~~
    ./include/linux/dev_printk.h:112:32: note: expanded from macro 'dev_err'
            _dev_err(dev, dev_fmt(fmt), ##__VA_ARGS__)
                                          ^~~~~~~~~~~
    drivers/spi/spi-bcm2835aux.c:495:9: note: initialize the variable 'err'
    to silence this warning
            int err;
                   ^
                    = 0
    1 warning generated.
    
    Restore the assignment so that the error value can be used in the
    dev_err statement and there is no uninitialized memory being leaked.
    
    Fixes: e13ee6cc4781 ("spi: bcm2835aux: Fix use-after-free on unbind")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1199
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lore.kernel.org/r/20201113180701.455541-1-natechancellor@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5849e7dc560bbd04cc3ecdb00fd4ee0142f21dc5
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Nov 27 14:48:46 2020 +0900

    perf probe: Fix to die_entrypc() returns error correctly
    
    [ Upstream commit ab4200c17ba6fe71d2da64317aae8a8aa684624c ]
    
    Fix die_entrypc() to return error correctly if the DIE has no
    DW_AT_ranges attribute. Since dwarf_ranges() will treat the case as an
    empty ranges and return 0, we have to check it by ourselves.
    
    Fixes: 91e2f539eeda ("perf probe: Fix to show function entry line as probe-able")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Cc: Thomas Richter <tmricht@linux.ibm.com>
    Link: http://lore.kernel.org/lkml/160645612634.2824037.5284932731175079426.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27193c41d0db5d8eecdb809a362ae2be2de6dd09
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Fri Nov 27 13:14:03 2020 +0900

    perf stat: Use proper cpu for shadow stats
    
    [ Upstream commit c0ee1d5ae8c8650031badcfca6483a28c0f94f38 ]
    
    Currently perf stat shows some metrics (like IPC) for defined events.
    But when no aggregation mode is used (-A option), it shows incorrect
    values since it used a value from a different cpu.
    
    Before:
    
      $ perf stat -aA -e cycles,instructions sleep 1
    
       Performance counter stats for 'system wide':
    
      CPU0      116,057,380      cycles
      CPU1       86,084,722      cycles
      CPU2       99,423,125      cycles
      CPU3       98,272,994      cycles
      CPU0       53,369,217      instructions      #    0.46  insn per cycle
      CPU1       33,378,058      instructions      #    0.29  insn per cycle
      CPU2       58,150,086      instructions      #    0.50  insn per cycle
      CPU3       40,029,703      instructions      #    0.34  insn per cycle
    
           1.001816971 seconds time elapsed
    
    So the IPC for CPU1 should be 0.38 (= 33,378,058 / 86,084,722)
    but it was 0.29 (= 33,378,058 / 116,057,380) and so on.
    
    After:
    
      $ perf stat -aA -e cycles,instructions sleep 1
    
       Performance counter stats for 'system wide':
    
      CPU0      109,621,384      cycles
      CPU1      159,026,454      cycles
      CPU2       99,460,366      cycles
      CPU3      124,144,142      cycles
      CPU0       44,396,706      instructions      #    0.41  insn per cycle
      CPU1      120,195,425      instructions      #    0.76  insn per cycle
      CPU2       44,763,978      instructions      #    0.45  insn per cycle
      CPU3       69,049,079      instructions      #    0.56  insn per cycle
    
           1.001910444 seconds time elapsed
    
    Fixes: 44d49a600259 ("perf stat: Support metrics in --per-core/socket mode")
    Reported-by: Sam Xi <xyzsam@google.com>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lore.kernel.org/lkml/20201127041404.390276-1-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc4d672a3fb59bd84215391a5cc5607db8db2f80
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Nov 24 19:47:38 2020 +0100

    can: m_can: fix nominal bitiming tseg2 min for version >= 3.1
    
    [ Upstream commit e3409e4192535fbcc86a84b7a65d9351f46039ec ]
    
    At lest the revision 3.3.0 of the bosch m_can IP core specifies that valid
    register values for "Nominal Time segment after sample point (NTSEG2)" are from
    1 to 127. As the hardware uses a value of one more than the programmed value,
    mean tseg2_min is 2.
    
    This patch fixes the tseg2_min value accordingly.
    
    Cc: Dan Murphy <dmurphy@ti.com>
    Cc: Mario Huettel <mario.huettel@gmx.net>
    Acked-by: Sriram Dash <sriram.dash@samsung.com>
    Link: https://lore.kernel.org/r/20201124190751.3972238-1-mkl@pengutronix.de
    Fixes: b03cfc5bb0e1 ("can: m_can: Enable M_CAN version dependent initialization")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f076cc1de82a520ddbe690228c0c441f5904efc
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Fri Nov 27 08:35:12 2020 +0100

    can: m_can: m_can_open(): remove IRQF_TRIGGER_FALLING from request_threaded_irq()'s flags
    
    [ Upstream commit 865f5b671b48d0088ce981cff1e822d9f7da441f ]
    
    The threaded IRQ handler is used for the tcan4x5x driver only. The IRQ pin of
    the tcan4x5x controller is active low, so better not use IRQF_TRIGGER_FALLING
    when requesting the IRQ. As this can result in missing interrupts.
    
    Further, if the device tree specified the interrupt as "IRQ_TYPE_LEVEL_LOW",
    unloading and reloading of the driver results in the following error during
    ifup:
    
    | irq: type mismatch, failed to map hwirq-31 for gpio@20a8000!
    | tcan4x5x spi1.1: m_can device registered (irq=0, version=32)
    | tcan4x5x spi1.1 can2: TCAN4X5X successfully initialized.
    | tcan4x5x spi1.1 can2: failed to request interrupt
    
    This patch fixes the problem by removing the IRQF_TRIGGER_FALLING from the
    request_threaded_irq().
    
    Fixes: f524f829b75a ("can: m_can: Create a m_can platform framework")
    Cc: Dan Murphy <dmurphy@ti.com>
    Cc: Sriram Dash <sriram.dash@samsung.com>
    Cc: Pankaj Sharma <pankj.sharma@samsung.com>
    Link: https://lore.kernel.org/r/20201127093548.509253-1-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd8ab85fd88e9902dd3016e13663c3e837bffe9b
Author: Yixian Liu <liuyixian@huawei.com>
Date:   Thu Nov 26 18:26:12 2020 +0800

    RDMA/hns: Bugfix for memory window mtpt configuration
    
    [ Upstream commit 17475e104dcb74217c282781817f8f52b46130d3 ]
    
    When a memory window is bound to a memory region, the local write access
    should be set for its mtpt table.
    
    Fixes: c7c28191408b ("RDMA/hns: Add MW support for hip08")
    Link: https://lore.kernel.org/r/1606386372-21094-1-git-send-email-liweihang@huawei.com
    Signed-off-by: Yixian Liu <liuyixian@huawei.com>
    Signed-off-by: Weihang Li <liweihang@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e69f384e22f1513672b5ca2f2ee29d5c042877f9
Author: Wenpeng Liang <liangwenpeng@huawei.com>
Date:   Thu Nov 26 17:29:37 2020 +0800

    RDMA/hns: Fix retry_cnt and rnr_cnt when querying QP
    
    [ Upstream commit ab6f7248cc446b85fe9e31091670ad7c4293d7fd ]
    
    The maximum number of retransmission should be returned when querying QP,
    not the value of retransmission counter.
    
    Fixes: 99fcf82521d9 ("RDMA/hns: Fix the wrong value of rnr_retry when querying qp")
    Fixes: 926a01dc000d ("RDMA/hns: Add QP operations support for hip08 SoC")
    Link: https://lore.kernel.org/r/1606382977-21431-1-git-send-email-liweihang@huawei.com
    Signed-off-by: Wenpeng Liang <liangwenpeng@huawei.com>
    Signed-off-by: Weihang Li <liweihang@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49b26b969474f74d3bacc9759c88447e42f34d65
Author: Kaixu Xia <kaixuxia@tencent.com>
Date:   Sun Nov 22 13:49:37 2020 +0800

    platform/x86: toshiba_acpi: Fix the wrong variable assignment
    
    [ Upstream commit 2a72c46ac4d665614faa25e267c3fb27fb729ed7 ]
    
    The commit 78429e55e4057 ("platform/x86: toshiba_acpi: Clean up
    variable declaration") cleans up variable declaration in
    video_proc_write(). Seems it does the variable assignment in the
    wrong place, this results in dead code and changes the source code
    logic. Fix it by doing the assignment at the beginning of the funciton.
    
    Fixes: 78429e55e4057 ("platform/x86: toshiba_acpi: Clean up variable declaration")
    Reported-by: Tosk Robot <tencent_os_robot@tencent.com>
    Signed-off-by: Kaixu Xia <kaixuxia@tencent.com>
    Link: https://lore.kernel.org/r/1606024177-16481-1-git-send-email-kaixuxia@tencent.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbd3f1d6ef2f20aebde3e2334b12597c54f732ca
Author: Benjamin Berg <bberg@redhat.com>
Date:   Mon Nov 23 14:21:57 2020 +0100

    platform/x86: thinkpad_acpi: Send tablet mode switch at wakeup time
    
    [ Upstream commit e40cc1b476d60f22628741e53cf3446a29e6e6b9 ]
    
    The lid state may change while the machine is suspended. As such, we may
    need to re-check the state at wake-up time (at least when waking up from
    hibernation).
    Add the appropriate call to the resume handler in order to sync the
    SW_TABLET_MODE switch state with the hardware state.
    
    Fixes: dda3ec0aa631 ("platform/x86: thinkpad_acpi: Implement tablet mode using GMMS method")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=210269
    Signed-off-by: Benjamin Berg <bberg@redhat.com>
    Acked-by: Henrique de Moraes Holschuh <hnh@hmh.eng.br>
    Link: https://lore.kernel.org/r/20201123132157.866303-1-benjamin@sipsolutions.net
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 405fd218058386d9187828688b2b2a5eda19fa9c
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Thu Nov 19 14:03:17 2020 +0100

    can: gs_usb: fix endianess problem with candleLight firmware
    
    [ Upstream commit 4ba1cb39fce4464151517a37ce0ac0a1a3f580d6 ]
    
    The firmware on the original USB2CAN by Geschwister Schneider Technologie
    Entwicklungs- und Vertriebs UG exchanges all data between the host and the
    device in host byte order. This is done with the struct
    gs_host_config::byte_order member, which is sent first to indicate the desired
    byte order.
    
    The widely used open source firmware candleLight doesn't support this feature
    and exchanges the data in little endian byte order. This breaks if a device
    with candleLight firmware is used on big endianess systems.
    
    To fix this problem, all u32 (but not the struct gs_host_frame::echo_id, which
    is a transparent cookie) are converted to __le32.
    
    Cc: Maximilian Schneider <max@schneidersoft.net>
    Cc: Hubert Denkmair <hubert@denkmair.de>
    Reported-by: Michael Rausch <mr@netadair.de>
    Link: https://lore.kernel.org/r/b58aace7-61f3-6df7-c6df-69fee2c66906@netadair.de
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Link: https://lore.kernel.org/r/20201120103818.3386964-1-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11420c32c1b49d0f900c4b20bc77c963c54086ce
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Tue Nov 24 20:16:46 2020 +0100

    efi: EFI_EARLYCON should depend on EFI
    
    [ Upstream commit 36a237526cd81ff4b6829e6ebd60921c6f976e3b ]
    
    CONFIG_EFI_EARLYCON defaults to yes, and thus is enabled on systems that
    do not support EFI, or do not have EFI support enabled, but do satisfy
    the symbol's other dependencies.
    
    While drivers/firmware/efi/ won't be entered during the build phase if
    CONFIG_EFI=n, and drivers/firmware/efi/earlycon.c itself thus won't be
    built, enabling EFI_EARLYCON does force-enable CONFIG_FONT_SUPPORT and
    CONFIG_ARCH_USE_MEMREMAP_PROT, and CONFIG_FONT_8x16, which is
    undesirable.
    
    Fix this by making CONFIG_EFI_EARLYCON depend on CONFIG_EFI.
    
    This reduces kernel size on headless systems by more than 4 KiB.
    
    Fixes: 69c1f396f25b805a ("efi/x86: Convert x86 EFI earlyprintk into generic earlycon implementation")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/20201124191646.3559757-1-geert@linux-m68k.org
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d245cbd939aba76d418154a59591355362962b4
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Nov 25 08:45:55 2020 +0100

    efivarfs: revert "fix memory leak in efivarfs_create()"
    
    [ Upstream commit ff04f3b6f2e27f8ae28a498416af2a8dd5072b43 ]
    
    The memory leak addressed by commit fe5186cf12e3 is a false positive:
    all allocations are recorded in a linked list, and freed when the
    filesystem is unmounted. This leads to double frees, and as reported
    by David, leads to crashes if SLUB is configured to self destruct when
    double frees occur.
    
    So drop the redundant kfree() again, and instead, mark the offending
    pointer variable so the allocation is ignored by kmemleak.
    
    Cc: Vamshi K Sthambamkadi <vamshi.k.sthambamkadi@gmail.com>
    Fixes: fe5186cf12e3 ("efivarfs: fix memory leak in efivarfs_create()")
    Reported-by: David Laight <David.Laight@aculab.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abae897f283bf7637839cf3f57a99292e2cfb27d
Author: Dipen Patel <dipenp@nvidia.com>
Date:   Fri Sep 11 19:26:45 2020 -0700

    arm64: tegra: Wrong AON HSP reg property size
    
    [ Upstream commit 1741e18737948c140ccc4cc643e8126d95ee6e79 ]
    
    The AON HSP node's "reg" property size 0xa0000 will overlap with other
    resources. This patch fixes that wrong value with correct size 0x90000.
    
    Reviewed-by: Mikko Perttunen <mperttunen@nvidia.com>
    Signed-off-by: Dipen Patel <dipenp@nvidia.com>
    Fixes: a38570c22e9d ("arm64: tegra: Add nodes for TCU on Tegra194")
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c4c6b2be717f1bcec6f6b0373f93761a76375ba
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Fri Nov 13 15:06:04 2020 +0000

    optee: add writeback to valid memory type
    
    [ Upstream commit 853735e404244f5496cdb6188c5ed9a0f9627ee6 ]
    
    Only in smp systems the cache policy is setup as write alloc, in
    single cpu systems the cache policy is set as writeback and it is
    normal memory, so, it should pass the is_normal_memory check in the
    share memory registration.
    
    Add the right condition to make it work in no smp systems.
    
    Fixes: cdbcf83d29c1 ("tee: optee: check type of registered shared memory")
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d371c3e70d7f16f43a0e1fe740c367dbfe28434
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Mon Nov 23 13:35:46 2020 -0600

    ibmvnic: fix NULL pointer dereference in ibmvic_reset_crq
    
    [ Upstream commit 0e435befaea45f7ea58682eecab5e37e05b2ce65 ]
    
    crq->msgs could be NULL if the previous reset did not complete after
    freeing crq->msgs. Check for NULL before dereferencing them.
    
    Snippet of call trace:
    ...
    ibmvnic 30000003 env3 (unregistering): Releasing sub-CRQ
    ibmvnic 30000003 env3 (unregistering): Releasing CRQ
    BUG: Kernel NULL pointer dereference on read at 0x00000000
    Faulting instruction address: 0xc0000000000c1a30
    Oops: Kernel access of bad area, sig: 11 [#1]
    LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
    Modules linked in: ibmvnic(E-) rpadlpar_io rpaphp xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nf_tables xsk_diag tcp_diag udp_diag tun raw_diag inet_diag unix_diag bridge af_packet_diag netlink_diag stp llc rfkill sunrpc pseries_rng xts vmx_crypto uio_pdrv_genirq uio binfmt_misc ip_tables xfs libcrc32c sd_mod t10_pi sg ibmvscsi ibmveth scsi_transport_srp dm_mirror dm_region_hash dm_log dm_mod [last unloaded: ibmvnic]
    CPU: 20 PID: 8426 Comm: kworker/20:0 Tainted: G            E     5.10.0-rc1+ #12
    Workqueue: events __ibmvnic_reset [ibmvnic]
    NIP:  c0000000000c1a30 LR: c008000001b00c18 CTR: 0000000000000400
    REGS: c00000000d05b7a0 TRAP: 0380   Tainted: G            E      (5.10.0-rc1+)
    MSR:  800000000280b033 <SF,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 44002480  XER: 20040000
    CFAR: c0000000000c19ec IRQMASK: 0
    GPR00: 0000000000000400 c00000000d05ba30 c008000001b17c00 0000000000000000
    GPR04: 0000000000000000 0000000000000000 0000000000000000 00000000000001e2
    GPR08: 000000000001f400 ffffffffffffd950 0000000000000000 c008000001b0b280
    GPR12: c0000000000c19c8 c00000001ec72e00 c00000000019a778 c00000002647b440
    GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR20: 0000000000000006 0000000000000001 0000000000000003 0000000000000002
    GPR24: 0000000000001000 c008000001b0d570 0000000000000005 c00000007ab5d550
    GPR28: c00000007ab5c000 c000000032fcf848 c00000007ab5cc00 c000000032fcf800
    NIP [c0000000000c1a30] memset+0x68/0x104
    LR [c008000001b00c18] ibmvnic_reset_crq+0x70/0x110 [ibmvnic]
    Call Trace:
    [c00000000d05ba30] [0000000000000800] 0x800 (unreliable)
    [c00000000d05bab0] [c008000001b0a930] do_reset.isra.40+0x224/0x634 [ibmvnic]
    [c00000000d05bb80] [c008000001b08574] __ibmvnic_reset+0x17c/0x3c0 [ibmvnic]
    [c00000000d05bc50] [c00000000018d9ac] process_one_work+0x2cc/0x800
    [c00000000d05bd20] [c00000000018df58] worker_thread+0x78/0x520
    [c00000000d05bdb0] [c00000000019a934] kthread+0x1c4/0x1d0
    [c00000000d05be20] [c00000000000d5d0] ret_from_kernel_thread+0x5c/0x6c
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 382383538f68939a24d6a09fe31436188498a7f4
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Mon Nov 23 13:35:45 2020 -0600

    ibmvnic: fix NULL pointer dereference in reset_sub_crq_queues
    
    [ Upstream commit a0faaa27c71608799e0dd765c5af38a089091802 ]
    
    adapter->tx_scrq and adapter->rx_scrq could be NULL if the previous reset
    did not complete after freeing sub crqs. Check for NULL before
    dereferencing them.
    
    Snippet of call trace:
    ibmvnic 30000006 env6: Releasing sub-CRQ
    ibmvnic 30000006 env6: Releasing CRQ
    ...
    ibmvnic 30000006 env6: Got Control IP offload Response
    ibmvnic 30000006 env6: Re-setting tx_scrq[0]
    BUG: Kernel NULL pointer dereference on read at 0x00000000
    Faulting instruction address: 0xc008000003dea7cc
    Oops: Kernel access of bad area, sig: 11 [#1]
    LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
    Modules linked in: rpadlpar_io rpaphp xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nf_tables xsk_diag tcp_diag udp_diag raw_diag inet_diag unix_diag af_packet_diag netlink_diag tun bridge stp llc rfkill sunrpc pseries_rng xts vmx_crypto uio_pdrv_genirq uio binfmt_misc ip_tables xfs libcrc32c sd_mod t10_pi sg ibmvscsi ibmvnic ibmveth scsi_transport_srp dm_mirror dm_region_hash dm_log dm_mod
    CPU: 80 PID: 1856 Comm: kworker/80:2 Tainted: G        W         5.8.0+ #4
    Workqueue: events __ibmvnic_reset [ibmvnic]
    NIP:  c008000003dea7cc LR: c008000003dea7bc CTR: 0000000000000000
    REGS: c0000007ef7db860 TRAP: 0380   Tainted: G        W          (5.8.0+)
    MSR:  800000000280b033 <SF,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 28002422  XER: 0000000d
    CFAR: c000000000bd9520 IRQMASK: 0
    GPR00: c008000003dea7bc c0000007ef7dbaf0 c008000003df7400 c0000007fa26ec00
    GPR04: c0000007fcd0d008 c0000007fcd96350 0000000000000027 c0000007fcd0d010
    GPR08: 0000000000000023 0000000000000000 0000000000000000 0000000000000000
    GPR12: 0000000000002000 c00000001ec18e00 c0000000001982f8 c0000007bad6e840
    GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR20: 0000000000000000 0000000000000000 0000000000000000 fffffffffffffef7
    GPR24: 0000000000000402 c0000007fa26f3a8 0000000000000003 c00000016f8ec048
    GPR28: 0000000000000000 0000000000000000 0000000000000000 c0000007fa26ec00
    NIP [c008000003dea7cc] ibmvnic_reset_init+0x15c/0x258 [ibmvnic]
    LR [c008000003dea7bc] ibmvnic_reset_init+0x14c/0x258 [ibmvnic]
    Call Trace:
    [c0000007ef7dbaf0] [c008000003dea7bc] ibmvnic_reset_init+0x14c/0x258 [ibmvnic] (unreliable)
    [c0000007ef7dbb80] [c008000003de8860] __ibmvnic_reset+0x408/0x970 [ibmvnic]
    [c0000007ef7dbc50] [c00000000018b7cc] process_one_work+0x2cc/0x800
    [c0000007ef7dbd20] [c00000000018bd78] worker_thread+0x78/0x520
    [c0000007ef7dbdb0] [c0000000001984c4] kthread+0x1d4/0x1e0
    [c0000007ef7dbe20] [c00000000000cea8] ret_from_kernel_thread+0x5c/0x74
    
    Fixes: 57a49436f4e8 ("ibmvnic: Reset sub-crqs during driver reset")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a447dbb44d443e0cd2da075df14a11dcca848d11
Author: Shay Agroskin <shayagr@amazon.com>
Date:   Mon Nov 23 21:08:58 2020 +0200

    net: ena: set initial DMA width to avoid intel iommu issue
    
    [ Upstream commit 09323b3bca95181c0da79daebc8b0603e500f573 ]
    
    The ENA driver uses the readless mechanism, which uses DMA, to find
    out what the DMA mask is supposed to be.
    
    If DMA is used without setting the dma_mask first, it causes the
    Intel IOMMU driver to think that ENA is a 32-bit device and therefore
    disables IOMMU passthrough permanently.
    
    This patch sets the dma_mask to be ENA_MAX_PHYS_ADDR_SIZE_BITS=48
    before readless initialization in
    ena_device_init()->ena_com_mmio_reg_read_request_init(),
    which is large enough to workaround the intel_iommu issue.
    
    DMA mask is set again to the correct value after it's received from the
    device after readless is initialized.
    
    The patch also changes the driver to use dma_set_mask_and_coherent()
    function instead of the two pci_set_dma_mask() and
    pci_set_consistent_dma_mask() ones. Both methods achieve the same
    effect.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Mike Cui <mikecui@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: Shay Agroskin <shayagr@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7869696d6c1e72c6b42cebb21be897e381d26148
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Nov 23 17:23:51 2020 +0100

    nfc: s3fwrn5: use signed integer for parsing GPIO numbers
    
    [ Upstream commit d8f0a86795c69f5b697f7d9e5274c124da93c92d ]
    
    GPIOs - as returned by of_get_named_gpio() and used by the gpiolib - are
    signed integers, where negative number indicates error.  The return
    value of of_get_named_gpio() should not be assigned to an unsigned int
    because in case of !CONFIG_GPIOLIB such number would be a valid GPIO.
    
    Fixes: c04c674fadeb ("nfc: s3fwrn5: Add driver for Samsung S3FWRN5 NFC Chip")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201123162351.209100-1-krzk@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a831f889db35782cce9b480c53b7f6a435bc3fb
Author: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
Date:   Fri Nov 20 10:06:40 2020 -0800

    i40e: Fix removing driver while bare-metal VFs pass traffic
    
    [ Upstream commit 2980cbd4dce7b1e9bf57df3ced43a7b184986f50 ]
    
    Prevent VFs from resetting when PF driver is being unloaded:
    - introduce new pf state: __I40E_VF_RESETS_DISABLED;
    - check if pf state has __I40E_VF_RESETS_DISABLED state set,
      if so, disable any further VFLR event notifications;
    - when i40e_remove (rmmod i40e) is called, disable any resets on
      the VFs;
    
    Previously if there were bare-metal VFs passing traffic and PF
    driver was removed, there was a possibility of VFs triggering a Tx
    timeout right before iavf_remove. This was causing iavf_close to
    not be called because there is a check in the beginning of  iavf_remove
    that bails out early if adapter->state < IAVF_DOWN_PENDING. This
    makes it so some resources do not get cleaned up.
    
    Fixes: 6a9ddb36eeb8 ("i40e: disable IOV before freeing resources")
    Signed-off-by: Slawomir Laba <slawomirx.laba@intel.com>
    Signed-off-by: Brett Creeley <brett.creeley@intel.com>
    Signed-off-by: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://lore.kernel.org/r/20201120180640.3654474-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 676857f78c1ac3e88df8db3198e3b497a6a57535
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Nov 20 09:57:02 2020 +0800

    IB/mthca: fix return value of error branch in mthca_init_cq()
    
    [ Upstream commit 6830ff853a5764c75e56750d59d0bbb6b26f1835 ]
    
    We return 'err' in the error branch, but this variable may be set as zero
    by the above code. Fix it by setting 'err' as a negative value before we
    goto the error label.
    
    Fixes: 74c2174e7be5 ("IB uverbs: add mthca user CQ support")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/1605837422-42724-1-git-send-email-wangxiongfeng2@huawei.com
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22f821fa5cbbf0cf841bc68ae939be8eb6cb76e4
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Mon Nov 23 18:40:16 2020 +1100

    powerpc/64s: Fix allnoconfig build since uaccess flush
    
    [ Upstream commit b6b79dd53082db11070b4368d85dd6699ff0b063 ]
    
    Using DECLARE_STATIC_KEY_FALSE needs linux/jump_table.h.
    
    Otherwise the build fails with eg:
    
      arch/powerpc/include/asm/book3s/64/kup-radix.h:66:1: warning: data definition has no type or storage class
         66 | DECLARE_STATIC_KEY_FALSE(uaccess_flush_key);
    
    Fixes: 9a32a7e78bd0 ("powerpc/64s: flush L1D after user accesses")
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    [mpe: Massage change log]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201123184016.693fe464@canb.auug.org.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae6e75b8c6d67b5a65c0c639470c8b80f2c23f0c
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Fri Nov 20 16:40:12 2020 -0600

    ibmvnic: notify peers when failover and migration happen
    
    [ Upstream commit 98025bce3a6200a0c4637272a33b5913928ba5b8 ]
    
    Commit 61d3e1d9bc2a ("ibmvnic: Remove netdev notify for failover resets")
    excluded the failover case for notify call because it said
    netdev_notify_peers() can cause network traffic to stall or halt.
    Current testing does not show network traffic stall
    or halt because of the notify call for failover event.
    netdev_notify_peers may be used when a device wants to inform the
    rest of the network about some sort of a reconfiguration
    such as failover or migration.
    
    It is unnecessary to call that in other events like
    FATAL, NON_FATAL, CHANGE_PARAM, and TIMEOUT resets
    since in those scenarios the hardware does not change.
    If the driver must do a hard reset, it is necessary to notify peers.
    
    Fixes: 61d3e1d9bc2a ("ibmvnic: Remove netdev notify for failover resets")
    Suggested-by: Brian King <brking@linux.vnet.ibm.com>
    Suggested-by: Pradeep Satyanarayana <pradeeps@linux.vnet.ibm.com>
    Signed-off-by: Dany Madden <drt@linux.ibm.com>
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b4e9fcf5ec31cc0f7c3365861ac8b8dff3ff4cd
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Fri Nov 20 16:40:11 2020 -0600

    ibmvnic: fix call_netdevice_notifiers in do_reset
    
    [ Upstream commit 8393597579f5250636f1cff157ea73f402b6501e ]
    
    When netdev_notify_peers was substituted in
    commit 986103e7920c ("net/ibmvnic: Fix RTNL deadlock during device reset"),
    call_netdevice_notifiers(NETDEV_RESEND_IGMP, dev) was missed.
    Fix it now.
    
    Fixes: 986103e7920c ("net/ibmvnic: Fix RTNL deadlock during device reset")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Reviewed-by: Dany Madden <drt@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 993e42d0f7d61a7347f4105c23182b53aa8f46bb
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Fri Nov 20 10:09:39 2020 +0100

    s390/qeth: fix tear down of async TX buffers
    
    [ Upstream commit 7ed10e16e50daf74460f54bc922e27c6863c8d61 ]
    
    When qeth_iqd_tx_complete() detects that a TX buffer requires additional
    async completion via QAOB, it might fail to replace the queue entry's
    metadata (and ends up triggering recovery).
    
    Assume now that the device gets torn down, overruling the recovery.
    If the QAOB notification then arrives before the tear down has
    sufficiently progressed, the buffer state is changed to
    QETH_QDIO_BUF_HANDLED_DELAYED by qeth_qdio_handle_aob().
    
    The tear down code calls qeth_drain_output_queue(), where
    qeth_cleanup_handled_pending() will then attempt to replace such a
    buffer _again_. If it succeeds this time, the buffer ends up dangling in
    its replacement's ->next_pending list ... where it will never be freed,
    since there's no further call to qeth_cleanup_handled_pending().
    
    But the second attempt isn't actually needed, we can simply leave the
    buffer on the queue and re-use it after a potential recovery has
    completed. The qeth_clear_output_buffer() in qeth_drain_output_queue()
    will ensure that it's in a clean state again.
    
    Fixes: 72861ae792c2 ("qeth: recovery through asynchronous delivery")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef0f6e36a6d485b143b700d028b3367aca0d06f0
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Fri Nov 20 10:09:38 2020 +0100

    s390/qeth: fix af_iucv notification race
    
    [ Upstream commit 8908f36d20d8ba610d3a7d110b3049b5853b9bb1 ]
    
    The two expected notification sequences are
    1. TX_NOTIFY_PENDING with a subsequent TX_NOTIFY_DELAYED_*, when
       our TX completion code first observed the pending TX and the QAOB
       then completes at a later time; or
    2. TX_NOTIFY_OK, when qeth_qdio_handle_aob() picked up the QAOB
       completion before our TX completion code even noticed that the TX
       was pending.
    
    But as qeth_iqd_tx_complete() and qeth_qdio_handle_aob() can run
    concurrently, we may end up with a race that results in a sequence of
    TX_NOTIFY_DELAYED_* followed by TX_NOTIFY_PENDING. Which would confuse
    the af_iucv code in its tracking of pending transmits.
    
    Rework the notification code, so that qeth_qdio_handle_aob() defers its
    notification if the TX completion code is still active.
    
    Fixes: b333293058aa ("qeth: add support for af_iucv HiperSockets transport")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb6c548934c9fdaae39665aa86756363b247dee8
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Fri Nov 20 10:09:37 2020 +0100

    s390/qeth: make af_iucv TX notification call more robust
    
    [ Upstream commit 34c7f50f7d0d36fa663c74aee39e25e912505320 ]
    
    Calling into socket code is ugly already, at least check whether we are
    dealing with the expected sk_family. Only looking at skb->protocol is
    bound to cause troubles (consider eg. af_packet).
    
    Fixes: b333293058aa ("qeth: add support for af_iucv HiperSockets transport")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f29dfa2bf6c7f13ccffeb20e82632082d289706a
Author: Raju Rangoju <rajur@chelsio.com>
Date:   Wed Nov 18 20:02:13 2020 +0530

    cxgb4: fix the panic caused by non smac rewrite
    
    [ Upstream commit bff453921ae105a8dbbad0ed7dd5f5ce424536e7 ]
    
    SMT entry is allocated only when loopback Source MAC
    rewriting is requested. Accessing SMT entry for non
    smac rewrite cases results in kernel panic.
    
    Fix the panic caused by non smac rewrite
    
    Fixes: 937d84205884 ("cxgb4: set up filter action after rewrites")
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Link: https://lore.kernel.org/r/20201118143213.13319-1-rajur@chelsio.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0410aeb9e04ca079648ab5a387c09223aef8af6f
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Fri Nov 20 02:44:31 2020 -0500

    bnxt_en: Release PCI regions when DMA mask setup fails during probe.
    
    [ Upstream commit c54bc3ced5106663c2f2b44071800621f505b00e ]
    
    Jump to init_err_release to cleanup.  bnxt_unmap_bars() will also be
    called but it will do nothing if the BARs are not mapped yet.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/1605858271-8209-1-git-send-email-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db49200b1dad3949fef14d0cf2aa426d879a7f16
Author: Dexuan Cui <decui@microsoft.com>
Date:   Tue Nov 17 16:03:05 2020 -0800

    video: hyperv_fb: Fix the cache type when mapping the VRAM
    
    [ Upstream commit 5f1251a48c17b54939d7477305e39679a565382c ]
    
    x86 Hyper-V used to essentially always overwrite the effective cache type
    of guest memory accesses to WB. This was problematic in cases where there
    is a physical device assigned to the VM, since that often requires that
    the VM should have control over cache types. Thus, on newer Hyper-V since
    2018, Hyper-V always honors the VM's cache type, but unexpectedly Linux VM
    users start to complain that Linux VM's VRAM becomes very slow, and it
    turns out that Linux VM should not map the VRAM uncacheable by ioremap().
    Fix this slowness issue by using ioremap_cache().
    
    On ARM64, ioremap_cache() is also required as the host also maps the VRAM
    cacheable, otherwise VM Connect can't display properly with ioremap() or
    ioremap_wc().
    
    With this change, the VRAM on new Hyper-V is as fast as regular RAM, so
    it's no longer necessary to use the hacks we added to mitigate the
    slowness, i.e. we no longer need to allocate physical memory and use
    it to back up the VRAM in Generation-1 VM, and we also no longer need to
    allocate physical memory to back up the framebuffer in a Generation-2 VM
    and copy the framebuffer to the real VRAM. A further big change will
    address these for v5.11.
    
    Fixes: 68a2d20b79b1 ("drivers/video: add Hyper-V Synthetic Video Frame Buffer Driver")
    Tested-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
    Link: https://lore.kernel.org/r/20201118000305.24797-1-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1a7fb15673e1529f87438b69eb40aa5fa33be1a
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Thu Nov 19 21:30:21 2020 +0800

    bnxt_en: fix error return code in bnxt_init_board()
    
    [ Upstream commit 3383176efc0fb0c0900a191026468a58668b4214 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Link: https://lore.kernel.org/r/1605792621-6268-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22e10c6bbefcda8a2056b39bc0a23d7ea599a0d7
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Nov 18 20:17:31 2020 +0800

    bnxt_en: fix error return code in bnxt_init_one()
    
    [ Upstream commit b5f796b62c98cd8c219c4b788ecb6e1218e648cb ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: c213eae8d3cd ("bnxt_en: Improve VF/PF link change logic.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Link: https://lore.kernel.org/r/1605701851-20270-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11b62fd00c628acc7f701f9307dc59c8732f0cf5
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 559ab6fb7b669372cff55b6bf88eefab504ec0ca
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed Nov 11 15:12:11 2020 +0100

    ARM: dts: dra76x: m_can: fix order of clocks
    
    [ Upstream commit 05d5de6ba7dbe490dd413b5ca11d0875bd2bc006 ]
    
    According to the bosch,m_can.yaml bindings the first clock shall be the "hclk",
    while the second clock "cclk".
    
    This patch fixes the order accordingly.
    
    Fixes: 0adbe832f21a ("ARM: dts: dra76x: Add MCAN node")
    Cc: Faiz Abbas <faiz_abbas@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: linux-omap@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bef5f25a69234613b92a0e2456870fee4a57efc
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Nov 11 17:52:58 2020 +0100

    arch: pgtable: define MAX_POSSIBLE_PHYSMEM_BITS where needed
    
    [ Upstream commit cef397038167ac15d085914493d6c86385773709 ]
    
    Stefan Agner reported a bug when using zsram on 32-bit Arm machines
    with RAM above the 4GB address boundary:
    
      Unable to handle kernel NULL pointer dereference at virtual address 00000000
      pgd = a27bd01c
      [00000000] *pgd=236a0003, *pmd=1ffa64003
      Internal error: Oops: 207 [#1] SMP ARM
      Modules linked in: mdio_bcm_unimac(+) brcmfmac cfg80211 brcmutil raspberrypi_hwmon hci_uart crc32_arm_ce bcm2711_thermal phy_generic genet
      CPU: 0 PID: 123 Comm: mkfs.ext4 Not tainted 5.9.6 #1
      Hardware name: BCM2711
      PC is at zs_map_object+0x94/0x338
      LR is at zram_bvec_rw.constprop.0+0x330/0xa64
      pc : [<c0602b38>]    lr : [<c0bda6a0>]    psr: 60000013
      sp : e376bbe0  ip : 00000000  fp : c1e2921c
      r10: 00000002  r9 : c1dda730  r8 : 00000000
      r7 : e8ff7a00  r6 : 00000000  r5 : 02f9ffa0  r4 : e3710000
      r3 : 000fdffe  r2 : c1e0ce80  r1 : ebf979a0  r0 : 00000000
      Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
      Control: 30c5383d  Table: 235c2a80  DAC: fffffffd
      Process mkfs.ext4 (pid: 123, stack limit = 0x495a22e6)
      Stack: (0xe376bbe0 to 0xe376c000)
    
    As it turns out, zsram needs to know the maximum memory size, which
    is defined in MAX_PHYSMEM_BITS when CONFIG_SPARSEMEM is set, or in
    MAX_POSSIBLE_PHYSMEM_BITS on the x86 architecture.
    
    The same problem will be hit on all 32-bit architectures that have a
    physical address space larger than 4GB and happen to not enable sparsemem
    and include asm/sparsemem.h from asm/pgtable.h.
    
    After the initial discussion, I suggested just always defining
    MAX_POSSIBLE_PHYSMEM_BITS whenever CONFIG_PHYS_ADDR_T_64BIT is
    set, or provoking a build error otherwise. This addresses all
    configurations that can currently have this runtime bug, but
    leaves all other configurations unchanged.
    
    I looked up the possible number of bits in source code and
    datasheets, here is what I found:
    
     - on ARC, CONFIG_ARC_HAS_PAE40 controls whether 32 or 40 bits are used
     - on ARM, CONFIG_LPAE enables 40 bit addressing, without it we never
       support more than 32 bits, even though supersections in theory allow
       up to 40 bits as well.
     - on MIPS, some MIPS32r1 or later chips support 36 bits, and MIPS32r5
       XPA supports up to 60 bits in theory, but 40 bits are more than
       anyone will ever ship
     - On PowerPC, there are three different implementations of 36 bit
       addressing, but 32-bit is used without CONFIG_PTE_64BIT
     - On RISC-V, the normal page table format can support 34 bit
       addressing. There is no highmem support on RISC-V, so anything
       above 2GB is unused, but it might be useful to eventually support
       CONFIG_ZRAM for high pages.
    
    Fixes: 61989a80fb3a ("staging: zsmalloc: zsmalloc memory allocation library")
    Fixes: 02390b87a945 ("mm/zsmalloc: Prepare to variable MAX_PHYSMEM_BITS")
    Acked-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Reviewed-by: Stefan Agner <stefan@agner.ch>
    Tested-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Mike Rapoport <rppt@linux.ibm.com>
    Link: https://lore.kernel.org/linux-mm/bdfa44bf1c570b05d6c70898e2bbb0acf234ecdf.1604762181.git.stefan@agner.ch/
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95b1f326315b69c257ac9a62f6f7b6b1c5b1ac13
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sun Nov 15 10:30:04 2020 +0000

    batman-adv: set .owner to THIS_MODULE
    
    [ Upstream commit 14a2e551faea53d45bc11629a9dac88f88950ca7 ]
    
    If THIS_MODULE is not set, the module would be removed while debugfs is
    being used.
    It eventually makes kernel panic.
    
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5672b83fc2d98ca3b69e29912fdfccb0a77427c
Author: Avraham Stern <avraham.stern@intel.com>
Date:   Sat Nov 7 10:50:09 2020 +0200

    iwlwifi: mvm: write queue_sync_state only for sync
    
    [ Upstream commit 97cc16943f23078535fdbce4f6391b948b4ccc08 ]
    
    We use mvm->queue_sync_state to wait for synchronous queue sync
    messages, but if an async one happens inbetween we shouldn't
    clear mvm->queue_sync_state after sending the async one, that
    can run concurrently (at least from the CPU POV) with another
    synchronous queue sync.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Fixes: 3c514bf831ac ("iwlwifi: mvm: add a loose synchronization of the NSSN across Rx queues")
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20201107104557.51a3148f2c14.I0772171dbaec87433a11513e9586d98b5d920b5f@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f32a1065c93005dc6eeec5ec60850ec98b394eb9
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Oct 13 10:58:20 2020 +0100

    phy: tegra: xusb: Fix dangling pointer on probe failure
    
    [ Upstream commit eb9c4dd9bdfdebaa13846c16a8c79b5b336066b6 ]
    
    If, for some reason, the xusb PHY fails to probe, it leaves
    a dangling pointer attached to the platform device structure.
    
    This would normally be harmless, but the Tegra XHCI driver then
    goes and extract that pointer from the PHY device. Things go
    downhill from there:
    
        8.752082] [004d554e5145533c] address between user and kernel address ranges
    [    8.752085] Internal error: Oops: 96000004 [#1] PREEMPT SMP
    [    8.752088] Modules linked in: max77620_regulator(E+) xhci_tegra(E+) sdhci_tegra(E+) xhci_hcd(E) sdhci_pltfm(E) cqhci(E) fixed(E) usbcore(E) scsi_mod(E) sdhci(E) host1x(E+)
    [    8.752103] CPU: 4 PID: 158 Comm: systemd-udevd Tainted: G S      W   E     5.9.0-rc7-00298-gf6337624c4fe #1980
    [    8.752105] Hardware name: NVIDIA Jetson TX2 Developer Kit (DT)
    [    8.752108] pstate: 20000005 (nzCv daif -PAN -UAO BTYPE=--)
    [    8.752115] pc : kobject_put+0x1c/0x21c
    [    8.752120] lr : put_device+0x20/0x30
    [    8.752121] sp : ffffffc012eb3840
    [    8.752122] x29: ffffffc012eb3840 x28: ffffffc010e82638
    [    8.752125] x27: ffffffc008d56440 x26: 0000000000000000
    [    8.752128] x25: ffffff81eb508200 x24: 0000000000000000
    [    8.752130] x23: ffffff81eb538800 x22: 0000000000000000
    [    8.752132] x21: 00000000fffffdfb x20: ffffff81eb538810
    [    8.752134] x19: 3d4d554e51455300 x18: 0000000000000020
    [    8.752136] x17: ffffffc008d00270 x16: ffffffc008d00c94
    [    8.752138] x15: 0000000000000004 x14: ffffff81ebd4ae90
    [    8.752140] x13: 0000000000000000 x12: ffffff81eb86a4e8
    [    8.752142] x11: ffffff81eb86a480 x10: ffffff81eb862fea
    [    8.752144] x9 : ffffffc01055fb28 x8 : ffffff81eb86a4a8
    [    8.752146] x7 : 0000000000000001 x6 : 0000000000000001
    [    8.752148] x5 : ffffff81dff8bc38 x4 : 0000000000000000
    [    8.752150] x3 : 0000000000000001 x2 : 0000000000000001
    [    8.752152] x1 : 0000000000000002 x0 : 3d4d554e51455300
    [    8.752155] Call trace:
    [    8.752157]  kobject_put+0x1c/0x21c
    [    8.752160]  put_device+0x20/0x30
    [    8.752164]  tegra_xusb_padctl_put+0x24/0x3c
    [    8.752170]  tegra_xusb_probe+0x8b0/0xd10 [xhci_tegra]
    [    8.752174]  platform_drv_probe+0x60/0xb4
    [    8.752176]  really_probe+0xf0/0x504
    [    8.752179]  driver_probe_device+0x100/0x170
    [    8.752181]  device_driver_attach+0xcc/0xd4
    [    8.752183]  __driver_attach+0xb0/0x17c
    [    8.752185]  bus_for_each_dev+0x7c/0xd4
    [    8.752187]  driver_attach+0x30/0x3c
    [    8.752189]  bus_add_driver+0x154/0x250
    [    8.752191]  driver_register+0x84/0x140
    [    8.752193]  __platform_driver_register+0x54/0x60
    [    8.752197]  tegra_xusb_init+0x40/0x1000 [xhci_tegra]
    [    8.752201]  do_one_initcall+0x54/0x2d0
    [    8.752205]  do_init_module+0x68/0x29c
    [    8.752207]  load_module+0x2178/0x26c0
    [    8.752209]  __do_sys_finit_module+0xb0/0x120
    [    8.752211]  __arm64_sys_finit_module+0x2c/0x40
    [    8.752215]  el0_svc_common.constprop.0+0x80/0x240
    [    8.752218]  do_el0_svc+0x30/0xa0
    [    8.752220]  el0_svc+0x18/0x50
    [    8.752223]  el0_sync_handler+0x90/0x318
    [    8.752225]  el0_sync+0x158/0x180
    [    8.752230] Code: a9bd7bfd 910003fd a90153f3 aa0003f3 (3940f000)
    [    8.752232] ---[ end trace 90f6c89d62d85ff5 ]---
    
    Reset the pointer on probe failure fixes the issue.
    
    Fixes: 53d2a715c2403 ("phy: Add Tegra XUSB pad controller support")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201013095820.311376-1-maz@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acea5424d9d26c401aae93c245ed747da998e929
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Oct 28 08:03:17 2020 +0200

    ARM: OMAP2+: Manage MPU state properly for omap_enter_idle_coupled()
    
    [ Upstream commit 294a3317bef52b189139c813b50dd14d344fa9ec ]
    
    Based on more testing, commit 8ca5ee624b4c ("ARM: OMAP2+: Restore MPU
    power domain if cpu_cluster_pm_enter() fails") is a poor fix for handling
    cpu_cluster_pm_enter() returned errors.
    
    We should not override the cpuidle states with a hardcoded PWRDM_POWER_ON
    value. Instead, we should use a configured idle state that does not cause
    the context to be lost. Otherwise we end up configuring a potentially
    improper state for the MPUSS. We also want to update the returned state
    index for the selected state.
    
    Let's just select the highest power idle state C1 to ensure no context
    loss is allowed on cpu_cluster_pm_enter() errors. With these changes we
    can now unconditionally call omap4_enter_lowpower() for WFI like we did
    earlier before commit 55be2f50336f ("ARM: OMAP2+: Handle errors for
    cpu_pm"). And we can return the selected state index.
    
    Fixes: 8f04aea048d5 ("ARM: OMAP2+: Restore MPU power domain if cpu_cluster_pm_enter() fails")
    Fixes: 55be2f50336f ("ARM: OMAP2+: Handle errors for cpu_pm")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f87d79ef40dcd43d95bd2db3c600b5bc7680c2d
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Oct 26 10:08:47 2020 +0200

    bus: ti-sysc: Fix bogus resetdone warning on enable for cpsw
    
    [ Upstream commit e7ae08d398e094e1305dee823435b1f996d39106 ]
    
    Bail out early from sysc_wait_softreset() just like we do in sysc_reset()
    if there's no sysstatus srst_shift to fix a bogus resetdone warning on
    enable as suggested by Grygorii Strashko <grygorii.strashko@ti.com>.
    
    We do not currently handle resets for modules that need writing to the
    sysstatus register. If we at some point add that, we also need to add
    SYSS_QUIRK_RESETDONE_INVERTED flag for cpsw as the sysstatus bit is low
    when reset is done as described in the am335x TRM "Table 14-202
    SOFT_RESET Register Field Descriptions"
    
    Fixes: d46f9fbec719 ("bus: ti-sysc: Use optional clocks on for enable and wait for softreset bit")
    Suggested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Acked-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8060ddddc9f739dff1c1ae4bae7ef3ac46da9ee
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Mon Nov 16 08:43:01 2020 -0800

    net: dsa: mv88e6xxx: Wait for EEPROM done after HW reset
    
    [ Upstream commit a3dcb3e7e70c72a68a79b30fc3a3adad5612731c ]
    
    When the switch is hardware reset, it reads the contents of the
    EEPROM. This can contain instructions for programming values into
    registers and to perform waits between such programming. Reading the
    EEPROM can take longer than the 100ms mv88e6xxx_hardware_reset() waits
    after deasserting the reset GPIO. So poll the EEPROM done bit to
    ensure it is complete.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Ruslan Sushko <rus@sushko.dev>
    Link: https://lore.kernel.org/r/20201116164301.977661-1-rus@sushko.dev
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f5531bb972074cee7b90edc347af8785bf816f2
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Tue Sep 1 00:09:37 2020 +0300

    xtensa: uaccess: Add missing __user to strncpy_from_user() prototype
    
    [ Upstream commit dc293f2106903ab9c24e9cea18c276e32c394c33 ]
    
    When adding __user annotations in commit 2adf5352a34a, the
    strncpy_from_user() function declaration for the
    CONFIG_GENERIC_STRNCPY_FROM_USER case was missed. Fix it.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Message-Id: <20200831210937.17938-1-laurent.pinchart@ideasonboard.com>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3753a62d5760beabe3898d1b2e17870c4c177524
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Fri Nov 13 10:31:26 2020 -0800

    perf/x86: fix sysfs type mismatches
    
    [ Upstream commit ebd19fc372e3e78bf165f230e7c084e304441c08 ]
    
    This change switches rapl to use PMU_FORMAT_ATTR, and fixes two other
    macros to use device_attribute instead of kobj_attribute to avoid
    callback type mismatches that trip indirect call checking with Clang's
    Control-Flow Integrity (CFI).
    
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lkml.kernel.org/r/20201113183126.1239404-1-samitolvanen@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd81f0711d9c6013f234cf9874e12031d4a06025
Author: Mike Christie <michael.christie@oracle.com>
Date:   Fri Nov 13 19:46:18 2020 -0600

    scsi: target: iscsi: Fix cmd abort fabric stop race
    
    [ Upstream commit f36199355c64a39fe82cfddc7623d827c7e050da ]
    
    Maurizio found a race where the abort and cmd stop paths can race as
    follows:
    
     1. thread1 runs iscsit_release_commands_from_conn and sets
        CMD_T_FABRIC_STOP.
    
     2. thread2 runs iscsit_aborted_task and then does __iscsit_free_cmd. It
        then returns from the aborted_task callout and we finish
        target_handle_abort and do:
    
        target_handle_abort -> transport_cmd_check_stop_to_fabric ->
            lio_check_stop_free -> target_put_sess_cmd
    
        The cmd is now freed.
    
     3. thread1 now finishes iscsit_release_commands_from_conn and runs
        iscsit_free_cmd while accessing a command we just released.
    
    In __target_check_io_state we check for CMD_T_FABRIC_STOP and set the
    CMD_T_ABORTED if the driver is not cleaning up the cmd because of a session
    shutdown. However, iscsit_release_commands_from_conn only sets the
    CMD_T_FABRIC_STOP and does not check to see if the abort path has claimed
    completion ownership of the command.
    
    This adds a check in iscsit_release_commands_from_conn so only the abort or
    fabric stop path cleanup the command.
    
    Link: https://lore.kernel.org/r/1605318378-9269-1-git-send-email-michael.christie@oracle.com
    Reported-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8814c070e783c90d43f2c15a660ade806e786f33
Author: Lee Duncan <lduncan@suse.com>
Date:   Fri Nov 6 11:33:17 2020 -0800

    scsi: libiscsi: Fix NOP race condition
    
    [ Upstream commit fe0a8a95e7134d0b44cd407bc0085b9ba8d8fe31 ]
    
    iSCSI NOPs are sometimes "lost", mistakenly sent to the user-land iscsid
    daemon instead of handled in the kernel, as they should be, resulting in a
    message from the daemon like:
    
      iscsid: Got nop in, but kernel supports nop handling.
    
    This can occur because of the new forward- and back-locks, and the fact
    that an iSCSI NOP response can occur before processing of the NOP send is
    complete. This can result in "conn->ping_task" being NULL in
    iscsi_nop_out_rsp(), when the pointer is actually in the process of being
    set.
    
    To work around this, we add a new state to the "ping_task" pointer. In
    addition to NULL (not assigned) and a pointer (assigned), we add the state
    "being set", which is signaled with an INVALID pointer (using "-1").
    
    Link: https://lore.kernel.org/r/20201106193317.16993-1-leeman.duncan@gmail.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 070a9a046d6db319be553ecf605592023d1b88df
Author: Sugar Zhang <sugar.zhang@rock-chips.com>
Date:   Sat Nov 14 11:55:06 2020 +0800

    dmaengine: pl330: _prep_dma_memcpy: Fix wrong burst size
    
    [ Upstream commit e773ca7da8beeca7f17fe4c9d1284a2b66839cc1 ]
    
    Actually, burst size is equal to '1 << desc->rqcfg.brst_size'.
    we should use burst size, not desc->rqcfg.brst_size.
    
    dma memcpy performance on Rockchip RV1126
    @ 1512MHz A7, 1056MHz LPDDR3, 200MHz DMA:
    
    dmatest:
    
    /# echo dma0chan0 > /sys/module/dmatest/parameters/channel
    /# echo 4194304 > /sys/module/dmatest/parameters/test_buf_size
    /# echo 8 > /sys/module/dmatest/parameters/iterations
    /# echo y > /sys/module/dmatest/parameters/norandom
    /# echo y > /sys/module/dmatest/parameters/verbose
    /# echo 1 > /sys/module/dmatest/parameters/run
    
    dmatest: dma0chan0-copy0: result #1: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #2: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #3: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #4: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #5: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #6: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #7: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #8: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    
    Before:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 48 iops 200338 KB/s (0)
    
    After this patch:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 179 iops 734873 KB/s (0)
    
    After this patch and increase dma clk to 400MHz:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 259 iops 1062929 KB/s (0)
    
    Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
    Link: https://lore.kernel.org/r/1605326106-55681-1-git-send-email-sugar.zhang@rock-chips.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a2ae7fa5d5c5ded438aad3235d4c1a12ecf2d2f
Author: Mike Christie <michael.christie@oracle.com>
Date:   Mon Nov 9 23:33:21 2020 -0600

    vhost scsi: fix cmd completion race
    
    [ Upstream commit 47a3565e8bb14ec48a75b48daf57aa830e2691f8 ]
    
    We might not do the final se_cmd put from vhost_scsi_complete_cmd_work.
    When the last put happens a little later then we could race where
    vhost_scsi_complete_cmd_work does vhost_signal, the guest runs and sends
    more IO, and vhost_scsi_handle_vq runs but does not find any free cmds.
    
    This patch has us delay completing the cmd until the last lio core ref
    is dropped. We then know that once we signal to the guest that the cmd
    is completed that if it queues a new command it will find a free cmd.
    
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Reviewed-by: Maurizio Lombardi <mlombard@redhat.com>
    Link: https://lore.kernel.org/r/1604986403-4931-4-git-send-email-michael.christie@oracle.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4940816604e3ce7e05e8df297773ee86c0476d48
Author: Minwoo Im <minwoo.im.dev@gmail.com>
Date:   Thu Nov 5 23:28:47 2020 +0900

    nvme: free sq/cq dbbuf pointers when dbbuf set fails
    
    [ Upstream commit 0f0d2c876c96d4908a9ef40959a44bec21bdd6cf ]
    
    If Doorbell Buffer Config command fails even 'dev->dbbuf_dbs != NULL'
    which means OACS indicates that NVME_CTRL_OACS_DBBUF_SUPP is set,
    nvme_dbbuf_update_and_check_event() will check event even it's not been
    successfully set.
    
    This patch fixes mismatch among dbbuf for sq/cqs in case that dbbuf
    command fails.
    
    Signed-off-by: Minwoo Im <minwoo.im.dev@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01968f9af0061b161045edefd6dcaf9fe4fdd496
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Nov 13 16:47:52 2020 -0700

    proc: don't allow async path resolution of /proc/self components
    
    [ Upstream commit 8d4c3e76e3be11a64df95ddee52e99092d42fc19 ]
    
    If this is attempted by a kthread, then return -EOPNOTSUPP as we don't
    currently support that. Once we can get task_pid_ptr() doing the right
    thing, then this can go away again.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 830f4aa73a69cad1425dba648aa5d46c7dbb4340
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 2 14:36:58 2020 +0100

    HID: Add Logitech Dinovo Edge battery quirk
    
    [ Upstream commit 7940fb035abd88040d56be209962feffa33b03d0 ]
    
    The battery status is also being reported by the logitech-hidpp driver,
    so ignore the standard HID battery status to avoid reporting the same
    info twice.
    
    Note the logitech-hidpp battery driver provides more info, such as properly
    differentiating between charging and discharging. Also the standard HID
    battery info seems to be wrong, reporting a capacity of just 26% after
    fully charging the device.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d070afa10805e89df3f6ecbdc2b5ab2d756a2d9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 2 14:36:57 2020 +0100

    HID: logitech-hidpp: Add HIDPP_CONSUMER_VENDOR_KEYS quirk for the Dinovo Edge
    
    [ Upstream commit c27168a04a438a457c100253b1aaf0c779218aae ]
    
    Like the MX5000 and MX5500 quad/bluetooth keyboards the Dinovo Edge also
    needs the HIDPP_CONSUMER_VENDOR_KEYS quirk for some special keys to work.
    Specifically without this the "Phone" and the 'A' - 'D' Smart Keys do not
    send any events.
    
    In addition to fixing these keys not sending any events, adding the
    Bluetooth match, so that hid-logitech-hidpp is used instead of the
    generic HID driver, also adds battery monitoring support when the
    keyboard is connected over Bluetooth.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 204dbc26f14e95313dc4249e5991a3fb62596d8b
Author: Brian Masney <bmasney@redhat.com>
Date:   Fri Nov 6 20:11:19 2020 -0500

    x86/xen: don't unbind uninitialized lock_kicker_irq
    
    [ Upstream commit 65cae18882f943215d0505ddc7e70495877308e6 ]
    
    When booting a hyperthreaded system with the kernel parameter
    'mitigations=auto,nosmt', the following warning occurs:
    
        WARNING: CPU: 0 PID: 1 at drivers/xen/events/events_base.c:1112 unbind_from_irqhandler+0x4e/0x60
        ...
        Hardware name: Xen HVM domU, BIOS 4.2.amazon 08/24/2006
        ...
        Call Trace:
         xen_uninit_lock_cpu+0x28/0x62
         xen_hvm_cpu_die+0x21/0x30
         takedown_cpu+0x9c/0xe0
         ? trace_suspend_resume+0x60/0x60
         cpuhp_invoke_callback+0x9a/0x530
         _cpu_up+0x11a/0x130
         cpu_up+0x7e/0xc0
         bringup_nonboot_cpus+0x48/0x50
         smp_init+0x26/0x79
         kernel_init_freeable+0xea/0x229
         ? rest_init+0xaa/0xaa
         kernel_init+0xa/0x106
         ret_from_fork+0x35/0x40
    
    The secondary CPUs are not activated with the nosmt mitigations and only
    the primary thread on each CPU core is used. In this situation,
    xen_hvm_smp_prepare_cpus(), and more importantly xen_init_lock_cpu(), is
    not called, so the lock_kicker_irq is not initialized for the secondary
    CPUs. Let's fix this by exiting early in xen_uninit_lock_cpu() if the
    irq is not set to avoid the warning from above for each secondary CPU.
    
    Signed-off-by: Brian Masney <bmasney@redhat.com>
    Link: https://lore.kernel.org/r/20201107011119.631442-1-bmasney@redhat.com
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6b5dc5429f161fcef7da5a1c83c31927da65fcd
Author: Marc Ferland <ferlandm@amotus.ca>
Date:   Wed Nov 4 12:30:04 2020 +0530

    dmaengine: xilinx_dma: use readl_poll_timeout_atomic variant
    
    [ Upstream commit 0ba2df09f1500d3f27398a3382b86d39c3e6abe2 ]
    
    The xilinx_dma_poll_timeout macro is sometimes called while holding a
    spinlock (see xilinx_dma_issue_pending() for an example) this means we
    shouldn't sleep when polling the dma channel registers. To address it
    in xilinx poll timeout macro use readl_poll_timeout_atomic instead of
    readl_poll_timeout variant.
    
    Signed-off-by: Marc Ferland <ferlandm@amotus.ca>
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1604473206-32573-2-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54b01ded1e926eed724428465696a54b52d07e5c
Author: Chris Ye <lzye@google.com>
Date:   Sun Nov 1 11:34:52 2020 -0800

    HID: add HID_QUIRK_INCREMENT_USAGE_ON_DUPLICATE for Gamevice devices
    
    [ Upstream commit f59ee399de4a8ca4d7d19cdcabb4b63e94867f09 ]
    
    Kernel 5.4 introduces HID_QUIRK_INCREMENT_USAGE_ON_DUPLICATE, devices need to
    be set explicitly with this flag.
    
    Signed-off-by: Chris Ye <lzye@google.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd7ea86a4a64562aba3166b4cd1a436447fc24b4
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Wed Nov 4 21:15:23 2020 +0300

    staging: ralink-gdma: fix kconfig dependency bug for DMA_RALINK
    
    [ Upstream commit 06ea594051707c6b8834ef5b24e9b0730edd391b ]
    
    When DMA_RALINK is enabled and DMADEVICES is disabled, it results in the
    following Kbuild warnings:
    
    WARNING: unmet direct dependencies detected for DMA_ENGINE
      Depends on [n]: DMADEVICES [=n]
      Selected by [y]:
      - DMA_RALINK [=y] && STAGING [=y] && RALINK [=y] && !SOC_RT288X [=n]
    
    WARNING: unmet direct dependencies detected for DMA_VIRTUAL_CHANNELS
      Depends on [n]: DMADEVICES [=n]
      Selected by [y]:
      - DMA_RALINK [=y] && STAGING [=y] && RALINK [=y] && !SOC_RT288X [=n]
    
    The reason is that DMA_RALINK selects DMA_ENGINE and DMA_VIRTUAL_CHANNELS
    without depending on or selecting DMADEVICES while DMA_ENGINE and
    DMA_VIRTUAL_CHANNELS are subordinate to DMADEVICES. This can also fail
    building the kernel as demonstrated in a bug report.
    
    Honor the kconfig dependency to remove unmet direct dependency warnings
    and avoid any potential build failures.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=210055
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Link: https://lore.kernel.org/r/20201104181522.43567-1-fazilyildiran@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3701c29a4687e530a27000a7ecb54614843b4ea
Author: Pablo Ceballos <pceballos@google.com>
Date:   Mon Nov 2 19:29:39 2020 -0500

    HID: hid-sensor-hub: Fix issue with devices with no report ID
    
    [ Upstream commit 34a9fa2025d9d3177c99351c7aaf256c5f50691f ]
    
    Some HID devices don't use a report ID because they only have a single
    report. In those cases, the report ID in struct hid_report will be zero
    and the data for the report will start at the first byte, so don't skip
    over the first byte.
    
    Signed-off-by: Pablo Ceballos <pceballos@google.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f68a28c9ecc914768be096653c82976edf32176
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 26 20:53:57 2020 -0700

    Input: i8042 - allow insmod to succeed on devices without an i8042 controller
    
    [ Upstream commit b1884583fcd17d6a1b1bba94bbb5826e6b5c6e17 ]
    
    The i8042 module exports several symbols which may be used by other
    modules.
    
    Before this commit it would refuse to load (when built as a module itself)
    on systems without an i8042 controller.
    
    This is a problem specifically for the asus-nb-wmi module. Many Asus
    laptops support the Asus WMI interface. Some of them have an i8042
    controller and need to use i8042_install_filter() to filter some kbd
    events. Other models do not have an i8042 controller (e.g. they use an
    USB attached kbd).
    
    Before this commit the asus-nb-wmi driver could not be loaded on Asus
    models without an i8042 controller, when the i8042 code was built as
    a module (as Arch Linux does) because the module_init function of the
    i8042 module would fail with -ENODEV and thus the i8042_install_filter
    symbol could not be loaded.
    
    This commit fixes this by exiting from module_init with a return code
    of 0 if no controller is found.  It also adds a i8042_present bool to
    make the module_exit function a no-op in this case and also adds a
    check for i8042_present to the exported i8042_command function.
    
    The latter i8042_present check should not really be necessary because
    when builtin that function can already be used on systems without
    an i8042 controller, but better safe then sorry.
    
    Reported-and-tested-by: Marius Iacob <themariusus@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201008112628.3979-2-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbe67dcf97cf5b34b3232b338e6177261b59f4fd
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Sep 30 22:52:31 2020 +0200

    HID: add support for Sega Saturn
    
    [ Upstream commit 1811977cb11354aef8cbd13e35ff50db716728a4 ]
    
    This device needs HID_QUIRK_MULTI_INPUT in order to be presented to userspace
    in a consistent way.
    
    Reported-and-tested-by: David Gámiz Jiménez <david.gamiz@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3845b2117f6da50bf550f0ee595a09f6040727db
Author: Frank Yang <puilp0502@gmail.com>
Date:   Fri Aug 21 03:16:50 2020 +0900

    HID: cypress: Support Varmilo Keyboards' media hotkeys
    
    [ Upstream commit 652f3d00de523a17b0cebe7b90debccf13aa8c31 ]
    
    The Varmilo VA104M Keyboard (04b4:07b1, reported as Varmilo Z104M)
    exposes media control hotkeys as a USB HID consumer control device, but
    these keys do not work in the current (5.8-rc1) kernel due to the
    incorrect HID report descriptor. Fix the problem by modifying the
    internal HID report descriptor.
    
    More specifically, the keyboard report descriptor specifies the
    logical boundary as 572~10754 (0x023c ~ 0x2a02) while the usage
    boundary is specified as 0~10754 (0x00 ~ 0x2a02). This results in an
    incorrect interpretation of input reports, causing inputs to be ignored.
    By setting the Logical Minimum to zero, we align the logical boundary
    with the Usage ID boundary.
    
    Some notes:
    
    * There seem to be multiple variants of the VA104M keyboard. This
      patch specifically targets 04b4:07b1 variant.
    
    * The device works out-of-the-box on Windows platform with the generic
      consumer control device driver (hidserv.inf). This suggests that
      Windows either ignores the Logical Minimum/Logical Maximum or
      interprets the Usage ID assignment differently from the linux
      implementation; Maybe there are other devices out there that only
      works on Windows due to this problem?
    
    Signed-off-by: Frank Yang <puilp0502@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 604912c2b20e35959264c90956a7f43fd1c14490
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 19 09:48:14 2020 +0200

    HID: ite: Replace ABS_MISC 120/121 events with touchpad on/off keypresses
    
    [ Upstream commit 3c785a06dee99501a17f8e8cf29b2b7e3f1e94ea ]
    
    The usb-hid keyboard-dock for the Acer Switch 10 SW5-012 model declares
    an application and hid-usage page of 0x0088 for the INPUT(4) report which
    it sends. This reports contains 2 8-bit fields which are declared as
    HID_MAIN_ITEM_VARIABLE.
    
    The keyboard-touchpad combo never actually generates this report, except
    when the touchpad is toggled on/off with the Fn + F7 hotkey combo. The
    toggle on/off is handled inside the keyboard-dock, when the touchpad is
    toggled off it simply stops sending events.
    
    When the touchpad is toggled on/off an INPUT(4) report is generated with
    the first content byte set to 120/121, before this commit the kernel
    would report this as ABS_MISC 120/121 events.
    
    Patch the descriptor to replace the HID_MAIN_ITEM_VARIABLE with
    HID_MAIN_ITEM_RELATIVE (because no key-presss release events are send)
    and add mappings for the 0x00880078 and 0x00880079 usages to generate
    touchpad on/off key events when the touchpad is toggled on/off.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a35be6c38aaa10c0db5be0004b595239dabfca4
Author: Martijn van de Streek <martijn@zeewinde.xyz>
Date:   Fri Oct 16 08:38:05 2020 +0200

    HID: uclogic: Add ID for Trust Flex Design Tablet
    
    [ Upstream commit 022fc5315b7aff69d3df2c953b892a6232642d50 ]
    
    The Trust Flex Design Tablet has an UGTizer USB ID and requires the same
    initialization as the UGTizer GP0610 to be detected as a graphics tablet
    instead of a mouse.
    
    Signed-off-by: Martijn van de Streek <martijn@zeewinde.xyz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 733e6db9736d1d29cbc4d69a60cfe3bd3be77620
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 20 13:57:48 2020 +0000

    arm64: pgtable: Ensure dirty bit is preserved across pte_wrprotect()
    
    commit ff1712f953e27f0b0718762ec17d0adb15c9fd0b upstream.
    
    With hardware dirty bit management, calling pte_wrprotect() on a writable,
    dirty PTE will lose the dirty state and return a read-only, clean entry.
    
    Move the logic from ptep_set_wrprotect() into pte_wrprotect() to ensure that
    the dirty bit is preserved for writable entries, as this is required for
    soft-dirty bit management if we enable it in the future.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 2f4b829c625e ("arm64: Add support for hardware updates of the access and dirty pte bits")
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20201120143557.6715-3-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b456de294ee4deea8ddd4ffe67835174066732d0
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 20 13:28:01 2020 +0000

    arm64: pgtable: Fix pte_accessible()
    
    commit 07509e10dcc77627f8b6a57381e878fe269958d3 upstream.
    
    pte_accessible() is used by ptep_clear_flush() to figure out whether TLB
    invalidation is necessary when unmapping pages for reclaim. Although our
    implementation is correct according to the architecture, returning true
    only for valid, young ptes in the absence of racing page-table
    modifications, this is in fact flawed due to lazy invalidation of old
    ptes in ptep_clear_flush_young() where we elide the expensive DSB
    instruction for completing the TLB invalidation.
    
    Rather than penalise the aging path, adjust pte_accessible() to return
    true for any valid pte, even if the access flag is cleared.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 76c714be0e5e ("arm64: pgtable: implement pte_accessible()")
    Reported-by: Yu Zhao <yuzhao@google.com>
    Acked-by: Yu Zhao <yuzhao@google.com>
    Reviewed-by: Minchan Kim <minchan@kernel.org>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20201120143557.6715-2-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b4d82d8dbff3bd0166c454035fbcae5ad296506
Author: Hui Su <sh_def@163.com>
Date:   Wed Nov 25 00:52:05 2020 +0800

    trace: fix potenial dangerous pointer
    
    commit fdeb17c70c9ecae655378761accf5a26a55a33cf upstream.
    
    The bdi_dev_name() returns a char [64], and
    the __entry->name is a char [32].
    
    It maybe dangerous to TP_printk("%s", __entry->name)
    after the strncpy().
    
    CC: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201124165205.GA23937@rlk
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Hui Su <sh_def@163.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a301b05cf61cdb5c3b55b49bd1c42aaa7d95a1b
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Nov 27 09:18:20 2020 +0100

    KVM: x86: Fix split-irqchip vs interrupt injection window request
    
    commit 71cc849b7093bb83af966c0e60cb11b7f35cd746 upstream.
    
    kvm_cpu_accept_dm_intr and kvm_vcpu_ready_for_interrupt_injection are
    a hodge-podge of conditions, hacked together to get something that
    more or less works.  But what is actually needed is much simpler;
    in both cases the fundamental question is, do we have a place to stash
    an interrupt if userspace does KVM_INTERRUPT?
    
    In userspace irqchip mode, that is !vcpu->arch.interrupt.injected.
    Currently kvm_event_needs_reinjection(vcpu) covers it, but it is
    unnecessarily restrictive.
    
    In split irqchip mode it's a bit more complicated, we need to check
    kvm_apic_accept_pic_intr(vcpu) (the IRQ window exit is basically an INTACK
    cycle and thus requires ExtINTs not to be masked) as well as
    !pending_userspace_extint(vcpu).  However, there is no need to
    check kvm_event_needs_reinjection(vcpu), since split irqchip keeps
    pending ExtINT state separate from event injection state, and checking
    kvm_cpu_has_interrupt(vcpu) is wrong too since ExtINT has higher
    priority than APIC interrupts.  In fact the latter fixes a bug:
    when userspace requests an IRQ window vmexit, an interrupt in the
    local APIC can cause kvm_cpu_has_interrupt() to be true and thus
    kvm_vcpu_ready_for_interrupt_injection() to return false.  When this
    happens, vcpu_run does not exit to userspace but the interrupt window
    vmexits keep occurring.  The VM loops without any hope of making progress.
    
    Once we try to fix these with something like
    
         return kvm_arch_interrupt_allowed(vcpu) &&
    -        !kvm_cpu_has_interrupt(vcpu) &&
    -        !kvm_event_needs_reinjection(vcpu) &&
    -        kvm_cpu_accept_dm_intr(vcpu);
    +        (!lapic_in_kernel(vcpu)
    +         ? !vcpu->arch.interrupt.injected
    +         : (kvm_apic_accept_pic_intr(vcpu)
    +            && !pending_userspace_extint(v)));
    
    we realize two things.  First, thanks to the previous patch the complex
    conditional can reuse !kvm_cpu_has_extint(vcpu).  Second, the interrupt
    window request in vcpu_enter_guest()
    
            bool req_int_win =
                    dm_request_for_irq_injection(vcpu) &&
                    kvm_cpu_accept_dm_intr(vcpu);
    
    should be kept in sync with kvm_vcpu_ready_for_interrupt_injection():
    it is unnecessary to ask the processor for an interrupt window
    if we would not be able to return to userspace.  Therefore,
    kvm_cpu_accept_dm_intr(vcpu) is basically !kvm_cpu_has_extint(vcpu)
    ANDed with the existing check for masked ExtINT.  It all makes sense:
    
    - we can accept an interrupt from userspace if there is a place
      to stash it (and, for irqchip split, ExtINTs are not masked).
      Interrupts from userspace _can_ be accepted even if right now
      EFLAGS.IF=0.
    
    - in order to tell userspace we will inject its interrupt ("IRQ
      window open" i.e. kvm_vcpu_ready_for_interrupt_injection), both
      KVM and the vCPU need to be ready to accept the interrupt.
    
    ... and this is what the patch implements.
    
    Reported-by: David Woodhouse <dwmw@amazon.co.uk>
    Analyzed-by: David Woodhouse <dwmw@amazon.co.uk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Nikos Tsironis <ntsironis@arrikto.com>
    Reviewed-by: David Woodhouse <dwmw@amazon.co.uk>
    Tested-by: David Woodhouse <dwmw@amazon.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d2e45cf6134bdaa6f715782ec14371429fbe17
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Nov 27 08:53:52 2020 +0100

    KVM: x86: handle !lapic_in_kernel case in kvm_cpu_*_extint
    
    commit 72c3bcdcda494cbd600712a32e67702cdee60c07 upstream.
    
    Centralize handling of interrupts from the userspace APIC
    in kvm_cpu_has_extint and kvm_cpu_get_extint, since
    userspace APIC interrupts are handled more or less the
    same as ExtINTs are with split irqchip.  This removes
    duplicated code from kvm_cpu_has_injectable_intr and
    kvm_cpu_has_interrupt, and makes the code more similar
    between kvm_cpu_has_{extint,interrupt} on one side
    and kvm_cpu_get_{extint,interrupt} on the other.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Filippo Sironi <sironi@amazon.de>
    Reviewed-by: David Woodhouse <dwmw@amazon.co.uk>
    Tested-by: David Woodhouse <dwmw@amazon.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6276d38cce87bf50ce6e1fb2b4afd52bdda669de
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Tue Nov 17 23:16:29 2020 +0800

    KVM: arm64: vgic-v3: Drop the reporting of GICR_TYPER.Last for userspace
    
    commit 23bde34771f1ea92fb5e6682c0d8c04304d34b3b upstream.
    
    It was recently reported that if GICR_TYPER is accessed before the RD base
    address is set, we'll suffer from the unset @rdreg dereferencing. Oops...
    
            gpa_t last_rdist_typer = rdreg->base + GICR_TYPER +
                            (rdreg->free_index - 1) * KVM_VGIC_V3_REDIST_SIZE;
    
    It's "expected" that users will access registers in the redistributor if
    the RD has been properly configured (e.g., the RD base address is set). But
    it hasn't yet been covered by the existing documentation.
    
    Per discussion on the list [1], the reporting of the GICR_TYPER.Last bit
    for userspace never actually worked. And it's difficult for us to emulate
    it correctly given that userspace has the flexibility to access it any
    time. Let's just drop the reporting of the Last bit for userspace for now
    (userspace should have full knowledge about it anyway) and it at least
    prevents kernel from panic ;-)
    
    [1] https://lore.kernel.org/kvmarm/c20865a267e44d1e2c0d52ce4e012263@kernel.org/
    
    Fixes: ba7b3f1275fd ("KVM: arm/arm64: Revisit Redistributor TYPER last bit computation")
    Reported-by: Keqian Zhu <zhukeqian1@huawei.com>
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Link: https://lore.kernel.org/r/20201117151629.1738-1-yuzenghui@huawei.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45b5f4b1b40b28d277b8cc90faa6769c588c776f
Author: Cédric Le Goater <clg@kaod.org>
Date:   Thu Nov 5 14:47:13 2020 +0100

    KVM: PPC: Book3S HV: XIVE: Fix possible oops when accessing ESB page
    
    commit 75b49620267c700f0a07fec7f27f69852db70e46 upstream.
    
    When accessing the ESB page of a source interrupt, the fault handler
    will retrieve the page address from the XIVE interrupt 'xive_irq_data'
    structure. If the associated KVM XIVE interrupt is not valid, that is
    not allocated at the HW level for some reason, the fault handler will
    dereference a NULL pointer leading to the oops below :
    
      WARNING: CPU: 40 PID: 59101 at arch/powerpc/kvm/book3s_xive_native.c:259 xive_native_esb_fault+0xe4/0x240 [kvm]
      CPU: 40 PID: 59101 Comm: qemu-system-ppc Kdump: loaded Tainted: G        W        --------- -  - 4.18.0-240.el8.ppc64le #1
      NIP:  c00800000e949fac LR: c00000000044b164 CTR: c00800000e949ec8
      REGS: c000001f69617840 TRAP: 0700   Tainted: G        W        --------- -  -  (4.18.0-240.el8.ppc64le)
      MSR:  9000000000029033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 44044282  XER: 00000000
      CFAR: c00000000044b160 IRQMASK: 0
      GPR00: c00000000044b164 c000001f69617ac0 c00800000e96e000 c000001f69617c10
      GPR04: 05faa2b21e000080 0000000000000000 0000000000000005 ffffffffffffffff
      GPR08: 0000000000000000 0000000000000001 0000000000000000 0000000000000001
      GPR12: c00800000e949ec8 c000001ffffd3400 0000000000000000 0000000000000000
      GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
      GPR20: 0000000000000000 0000000000000000 c000001f5c065160 c000000001c76f90
      GPR24: c000001f06f20000 c000001f5c065100 0000000000000008 c000001f0eb98c78
      GPR28: c000001dcab40000 c000001dcab403d8 c000001f69617c10 0000000000000011
      NIP [c00800000e949fac] xive_native_esb_fault+0xe4/0x240 [kvm]
      LR [c00000000044b164] __do_fault+0x64/0x220
      Call Trace:
      [c000001f69617ac0] [0000000137a5dc20] 0x137a5dc20 (unreliable)
      [c000001f69617b50] [c00000000044b164] __do_fault+0x64/0x220
      [c000001f69617b90] [c000000000453838] do_fault+0x218/0x930
      [c000001f69617bf0] [c000000000456f50] __handle_mm_fault+0x350/0xdf0
      [c000001f69617cd0] [c000000000457b1c] handle_mm_fault+0x12c/0x310
      [c000001f69617d10] [c00000000007ef44] __do_page_fault+0x264/0xbb0
      [c000001f69617df0] [c00000000007f8c8] do_page_fault+0x38/0xd0
      [c000001f69617e30] [c00000000000a714] handle_page_fault+0x18/0x38
      Instruction dump:
      40c2fff0 7c2004ac 2fa90000 409e0118 73e90001 41820080 e8bd0008 7c2004ac
      7ca90074 39400000 915c0000 7929d182 <0b090000> 2fa50000 419e0080 e89e0018
      ---[ end trace 66c6ff034c53f64f ]---
      xive-kvm: xive_native_esb_fault: accessing invalid ESB page for source 8 !
    
    Fix that by checking the validity of the KVM XIVE interrupt structure.
    
    Fixes: 6520ca64cde7 ("KVM: PPC: Book3S HV: XIVE: Add a mapping for the source ESB pages")
    Cc: stable@vger.kernel.org # v5.2+
    Reported-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Tested-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201105134713.656160-1-clg@kaod.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 214e6af4217ae3fc8f0ecaef8376fd7d04de3842
Author: Namjae Jeon <namjae.jeon@samsung.com>
Date:   Mon Nov 9 17:35:33 2020 +0900

    cifs: fix a memleak with modefromsid
    
    commit 98128572084c3dd8067f48bb588aa3733d1355b5 upstream.
    
    kmemleak reported a memory leak allocated in query_info() when cifs is
    working with modefromsid.
    
      backtrace:
        [<00000000aeef6a1e>] slab_post_alloc_hook+0x58/0x510
        [<00000000b2f7a440>] __kmalloc+0x1a0/0x390
        [<000000006d470ebc>] query_info+0x5b5/0x700 [cifs]
        [<00000000bad76ce0>] SMB2_query_acl+0x2b/0x30 [cifs]
        [<000000001fa09606>] get_smb2_acl_by_path+0x2f3/0x720 [cifs]
        [<000000001b6ebab7>] get_smb2_acl+0x75/0x90 [cifs]
        [<00000000abf43904>] cifs_acl_to_fattr+0x13b/0x1d0 [cifs]
        [<00000000a5372ec3>] cifs_get_inode_info+0x4cd/0x9a0 [cifs]
        [<00000000388e0a04>] cifs_revalidate_dentry_attr+0x1cd/0x510 [cifs]
        [<0000000046b6b352>] cifs_getattr+0x8a/0x260 [cifs]
        [<000000007692c95e>] vfs_getattr_nosec+0xa1/0xc0
        [<00000000cbc7d742>] vfs_getattr+0x36/0x40
        [<00000000de8acf67>] vfs_statx_fd+0x4a/0x80
        [<00000000a58c6adb>] __do_sys_newfstat+0x31/0x70
        [<00000000300b3b4e>] __x64_sys_newfstat+0x16/0x20
        [<000000006d8e9c48>] do_syscall_64+0x37/0x80
    
    This patch add missing kfree for pntsd when mounting modefromsid option.
    
    Cc: Stable <stable@vger.kernel.org> # v5.4+
    Signed-off-by: Namjae Jeon <namjae.jeon@samsung.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56f639aa0b5d2469ec8d14f1f01d1a969d1652f3
Author: Rohith Surabattula <rohiths@microsoft.com>
Date:   Thu Oct 29 06:07:56 2020 +0000

    smb3: Handle error case during offload read path
    
    commit 1254100030b3377e8302f9c75090ab191d73ee7c upstream.
    
    Mid callback needs to be called only when valid data is
    read into pages.
    
    These patches address a problem found during decryption offload:
          CIFS: VFS: trying to dequeue a deleted mid
    that could cause a refcount use after free:
          Workqueue: smb3decryptd smb2_decrypt_offload [cifs]
    
    Signed-off-by: Rohith Surabattula <rohiths@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    CC: Stable <stable@vger.kernel.org> #5.4+
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afa51221b911a57645a7295db4ef6537509f508d
Author: Rohith Surabattula <rohiths@microsoft.com>
Date:   Thu Oct 29 05:03:10 2020 +0000

    smb3: Avoid Mid pending list corruption
    
    commit ac873aa3dc21707c47db5db6608b38981c731afe upstream.
    
    When reconnect happens Mid queue can be corrupted when both
    demultiplex and offload thread try to dequeue the MID from the
    pending list.
    
    These patches address a problem found during decryption offload:
             CIFS: VFS: trying to dequeue a deleted mid
    that could cause a refcount use after free:
             Workqueue: smb3decryptd smb2_decrypt_offload [cifs]
    
    Signed-off-by: Rohith Surabattula <rohiths@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    CC: Stable <stable@vger.kernel.org> #5.4+
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b63215666c0fd78e6882e87cfbb212ccbba79e0
Author: Rohith Surabattula <rohiths@microsoft.com>
Date:   Wed Oct 28 13:42:21 2020 +0000

    smb3: Call cifs reconnect from demultiplex thread
    
    commit de9ac0a6e9efdffc8cde18781f48fb56ca4157b7 upstream.
    
    cifs_reconnect needs to be called only from demultiplex thread.
    skip cifs_reconnect in offload thread. So, cifs_reconnect will be
    called by demultiplex thread in subsequent request.
    
    These patches address a problem found during decryption offload:
         CIFS: VFS: trying to dequeue a deleted mid
    that can cause a refcount use after free:
    
    [ 1271.389453] Workqueue: smb3decryptd smb2_decrypt_offload [cifs]
    [ 1271.389456] RIP: 0010:refcount_warn_saturate+0xae/0xf0
    [ 1271.389457] Code: fa 1d 6a 01 01 e8 c7 44 b1 ff 0f 0b 5d c3 80 3d e7 1d 6a 01 00 75 91 48 c7 c7 d8 be 1d a2 c6 05 d7 1d 6a 01 01 e8 a7 44 b1 ff <0f> 0b 5d c3 80 3d c5 1d 6a 01 00 0f 85 6d ff ff ff 48 c7 c7 30 bf
    [ 1271.389458] RSP: 0018:ffffa4cdc1f87e30 EFLAGS: 00010286
    [ 1271.389458] RAX: 0000000000000000 RBX: ffff9974d2809f00 RCX: ffff9974df898cc8
    [ 1271.389459] RDX: 00000000ffffffd8 RSI: 0000000000000027 RDI: ffff9974df898cc0
    [ 1271.389460] RBP: ffffa4cdc1f87e30 R08: 0000000000000004 R09: 00000000000002c0
    [ 1271.389460] R10: 0000000000000000 R11: 0000000000000001 R12: ffff9974b7fdb5c0
    [ 1271.389461] R13: ffff9974d2809f00 R14: ffff9974ccea0a80 R15: ffff99748e60db80
    [ 1271.389462] FS:  0000000000000000(0000) GS:ffff9974df880000(0000) knlGS:0000000000000000
    [ 1271.389462] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1271.389463] CR2: 000055c60f344fe4 CR3: 0000001031a3c002 CR4: 00000000003706e0
    [ 1271.389465] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1271.389465] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 1271.389466] Call Trace:
    [ 1271.389483]  cifs_mid_q_entry_release+0xce/0x110 [cifs]
    [ 1271.389499]  smb2_decrypt_offload+0xa9/0x1c0 [cifs]
    [ 1271.389501]  process_one_work+0x1e8/0x3b0
    [ 1271.389503]  worker_thread+0x50/0x370
    [ 1271.389504]  kthread+0x12f/0x150
    [ 1271.389506]  ? process_one_work+0x3b0/0x3b0
    [ 1271.389507]  ? __kthread_bind_mask+0x70/0x70
    [ 1271.389509]  ret_from_fork+0x22/0x30
    
    Signed-off-by: Rohith Surabattula <rohiths@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    CC: Stable <stable@vger.kernel.org> #5.4+
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f923044a6c726f666eee02041108ce8381c9070c
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Thu May 21 22:14:22 2020 +0200

    wireless: Use linux/stddef.h instead of stddef.h
    
    commit 1b9ae0c92925ac40489be526d67d0010d0724ce0 upstream.
    
    When compiling inside the kernel include linux/stddef.h instead of
    stddef.h. When I compile this header file in backports for power PC I
    run into a conflict with ptrdiff_t. I was unable to reproduce this in
    mainline kernel. I still would like to fix this problem in the kernel.
    
    Fixes: 6989310f5d43 ("wireless: Use offsetof instead of custom macro.")
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Link: https://lore.kernel.org/r/20200521201422.16493-1-hauke@hauke-m.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6676b0fa09fd089c726f19187426bae9059f032
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Nov 23 14:28:44 2020 +0000

    btrfs: fix lockdep splat when reading qgroup config on mount
    
    commit 3d05cad3c357a2b749912914356072b38435edfa upstream.
    
    Lockdep reported the following splat when running test btrfs/190 from
    fstests:
    
      [ 9482.126098] ======================================================
      [ 9482.126184] WARNING: possible circular locking dependency detected
      [ 9482.126281] 5.10.0-rc4-btrfs-next-73 #1 Not tainted
      [ 9482.126365] ------------------------------------------------------
      [ 9482.126456] mount/24187 is trying to acquire lock:
      [ 9482.126534] ffffa0c869a7dac0 (&fs_info->qgroup_rescan_lock){+.+.}-{3:3}, at: qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.126647]
                     but task is already holding lock:
      [ 9482.126777] ffffa0c892ebd3a0 (btrfs-quota-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.126886]
                     which lock already depends on the new lock.
    
      [ 9482.127078]
                     the existing dependency chain (in reverse order) is:
      [ 9482.127213]
                     -> #1 (btrfs-quota-00){++++}-{3:3}:
      [ 9482.127366]        lock_acquire+0xd8/0x490
      [ 9482.127436]        down_read_nested+0x45/0x220
      [ 9482.127528]        __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.127613]        btrfs_read_lock_root_node+0x41/0x130 [btrfs]
      [ 9482.127702]        btrfs_search_slot+0x514/0xc30 [btrfs]
      [ 9482.127788]        update_qgroup_status_item+0x72/0x140 [btrfs]
      [ 9482.127877]        btrfs_qgroup_rescan_worker+0xde/0x680 [btrfs]
      [ 9482.127964]        btrfs_work_helper+0xf1/0x600 [btrfs]
      [ 9482.128039]        process_one_work+0x24e/0x5e0
      [ 9482.128110]        worker_thread+0x50/0x3b0
      [ 9482.128181]        kthread+0x153/0x170
      [ 9482.128256]        ret_from_fork+0x22/0x30
      [ 9482.128327]
                     -> #0 (&fs_info->qgroup_rescan_lock){+.+.}-{3:3}:
      [ 9482.128464]        check_prev_add+0x91/0xc60
      [ 9482.128551]        __lock_acquire+0x1740/0x3110
      [ 9482.128623]        lock_acquire+0xd8/0x490
      [ 9482.130029]        __mutex_lock+0xa3/0xb30
      [ 9482.130590]        qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.131577]        btrfs_read_qgroup_config+0x43a/0x550 [btrfs]
      [ 9482.132175]        open_ctree+0x1228/0x18a0 [btrfs]
      [ 9482.132756]        btrfs_mount_root.cold+0x13/0xed [btrfs]
      [ 9482.133325]        legacy_get_tree+0x30/0x60
      [ 9482.133866]        vfs_get_tree+0x28/0xe0
      [ 9482.134392]        fc_mount+0xe/0x40
      [ 9482.134908]        vfs_kern_mount.part.0+0x71/0x90
      [ 9482.135428]        btrfs_mount+0x13b/0x3e0 [btrfs]
      [ 9482.135942]        legacy_get_tree+0x30/0x60
      [ 9482.136444]        vfs_get_tree+0x28/0xe0
      [ 9482.136949]        path_mount+0x2d7/0xa70
      [ 9482.137438]        do_mount+0x75/0x90
      [ 9482.137923]        __x64_sys_mount+0x8e/0xd0
      [ 9482.138400]        do_syscall_64+0x33/0x80
      [ 9482.138873]        entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [ 9482.139346]
                     other info that might help us debug this:
    
      [ 9482.140735]  Possible unsafe locking scenario:
    
      [ 9482.141594]        CPU0                    CPU1
      [ 9482.142011]        ----                    ----
      [ 9482.142411]   lock(btrfs-quota-00);
      [ 9482.142806]                                lock(&fs_info->qgroup_rescan_lock);
      [ 9482.143216]                                lock(btrfs-quota-00);
      [ 9482.143629]   lock(&fs_info->qgroup_rescan_lock);
      [ 9482.144056]
                      *** DEADLOCK ***
    
      [ 9482.145242] 2 locks held by mount/24187:
      [ 9482.145637]  #0: ffffa0c8411c40e8 (&type->s_umount_key#44/1){+.+.}-{3:3}, at: alloc_super+0xb9/0x400
      [ 9482.146061]  #1: ffffa0c892ebd3a0 (btrfs-quota-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.146509]
                     stack backtrace:
      [ 9482.147350] CPU: 1 PID: 24187 Comm: mount Not tainted 5.10.0-rc4-btrfs-next-73 #1
      [ 9482.147788] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      [ 9482.148709] Call Trace:
      [ 9482.149169]  dump_stack+0x8d/0xb5
      [ 9482.149628]  check_noncircular+0xff/0x110
      [ 9482.150090]  check_prev_add+0x91/0xc60
      [ 9482.150561]  ? kvm_clock_read+0x14/0x30
      [ 9482.151017]  ? kvm_sched_clock_read+0x5/0x10
      [ 9482.151470]  __lock_acquire+0x1740/0x3110
      [ 9482.151941]  ? __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.152402]  lock_acquire+0xd8/0x490
      [ 9482.152887]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.153354]  __mutex_lock+0xa3/0xb30
      [ 9482.153826]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.154301]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.154768]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.155226]  qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.155690]  btrfs_read_qgroup_config+0x43a/0x550 [btrfs]
      [ 9482.156160]  open_ctree+0x1228/0x18a0 [btrfs]
      [ 9482.156643]  btrfs_mount_root.cold+0x13/0xed [btrfs]
      [ 9482.157108]  ? rcu_read_lock_sched_held+0x5d/0x90
      [ 9482.157567]  ? kfree+0x31f/0x3e0
      [ 9482.158030]  legacy_get_tree+0x30/0x60
      [ 9482.158489]  vfs_get_tree+0x28/0xe0
      [ 9482.158947]  fc_mount+0xe/0x40
      [ 9482.159403]  vfs_kern_mount.part.0+0x71/0x90
      [ 9482.159875]  btrfs_mount+0x13b/0x3e0 [btrfs]
      [ 9482.160335]  ? rcu_read_lock_sched_held+0x5d/0x90
      [ 9482.160805]  ? kfree+0x31f/0x3e0
      [ 9482.161260]  ? legacy_get_tree+0x30/0x60
      [ 9482.161714]  legacy_get_tree+0x30/0x60
      [ 9482.162166]  vfs_get_tree+0x28/0xe0
      [ 9482.162616]  path_mount+0x2d7/0xa70
      [ 9482.163070]  do_mount+0x75/0x90
      [ 9482.163525]  __x64_sys_mount+0x8e/0xd0
      [ 9482.163986]  do_syscall_64+0x33/0x80
      [ 9482.164437]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [ 9482.164902] RIP: 0033:0x7f51e907caaa
    
    This happens because at btrfs_read_qgroup_config() we can call
    qgroup_rescan_init() while holding a read lock on a quota btree leaf,
    acquired by the previous call to btrfs_search_slot_for_read(), and
    qgroup_rescan_init() acquires the mutex qgroup_rescan_lock.
    
    A qgroup rescan worker does the opposite: it acquires the mutex
    qgroup_rescan_lock, at btrfs_qgroup_rescan_worker(), and then tries to
    update the qgroup status item in the quota btree through the call to
    update_qgroup_status_item(). This inversion of locking order
    between the qgroup_rescan_lock mutex and quota btree locks causes the
    splat.
    
    Fix this simply by releasing and freeing the path before calling
    qgroup_rescan_init() at btrfs_read_qgroup_config().
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ea14731ac4c227618b21cb38984562760444cd5
Author: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Date:   Wed Nov 18 18:03:26 2020 +0900

    btrfs: don't access possibly stale fs_info data for printing duplicate device
    
    commit 0697d9a610998b8bdee6b2390836cb2391d8fd1a upstream.
    
    Syzbot reported a possible use-after-free when printing a duplicate device
    warning device_list_add().
    
    At this point it can happen that a btrfs_device::fs_info is not correctly
    setup yet, so we're accessing stale data, when printing the warning
    message using the btrfs_printk() wrappers.
    
      ==================================================================
      BUG: KASAN: use-after-free in btrfs_printk+0x3eb/0x435 fs/btrfs/super.c:245
      Read of size 8 at addr ffff8880878e06a8 by task syz-executor225/7068
    
      CPU: 1 PID: 7068 Comm: syz-executor225 Not tainted 5.9.0-rc5-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x1d6/0x29e lib/dump_stack.c:118
       print_address_description+0x66/0x620 mm/kasan/report.c:383
       __kasan_report mm/kasan/report.c:513 [inline]
       kasan_report+0x132/0x1d0 mm/kasan/report.c:530
       btrfs_printk+0x3eb/0x435 fs/btrfs/super.c:245
       device_list_add+0x1a88/0x1d60 fs/btrfs/volumes.c:943
       btrfs_scan_one_device+0x196/0x490 fs/btrfs/volumes.c:1359
       btrfs_mount_root+0x48f/0xb60 fs/btrfs/super.c:1634
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       fc_mount fs/namespace.c:978 [inline]
       vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008
       btrfs_mount+0x33c/0xae0 fs/btrfs/super.c:1732
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       do_new_mount fs/namespace.c:2875 [inline]
       path_mount+0x179d/0x29e0 fs/namespace.c:3192
       do_mount fs/namespace.c:3205 [inline]
       __do_sys_mount fs/namespace.c:3413 [inline]
       __se_sys_mount+0x126/0x180 fs/namespace.c:3390
       do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x44840a
      RSP: 002b:00007ffedfffd608 EFLAGS: 00000293 ORIG_RAX: 00000000000000a5
      RAX: ffffffffffffffda RBX: 00007ffedfffd670 RCX: 000000000044840a
      RDX: 0000000020000000 RSI: 0000000020000100 RDI: 00007ffedfffd630
      RBP: 00007ffedfffd630 R08: 00007ffedfffd670 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000293 R12: 000000000000001a
      R13: 0000000000000004 R14: 0000000000000003 R15: 0000000000000003
    
      Allocated by task 6945:
       kasan_save_stack mm/kasan/common.c:48 [inline]
       kasan_set_track mm/kasan/common.c:56 [inline]
       __kasan_kmalloc+0x100/0x130 mm/kasan/common.c:461
       kmalloc_node include/linux/slab.h:577 [inline]
       kvmalloc_node+0x81/0x110 mm/util.c:574
       kvmalloc include/linux/mm.h:757 [inline]
       kvzalloc include/linux/mm.h:765 [inline]
       btrfs_mount_root+0xd0/0xb60 fs/btrfs/super.c:1613
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       fc_mount fs/namespace.c:978 [inline]
       vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008
       btrfs_mount+0x33c/0xae0 fs/btrfs/super.c:1732
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       do_new_mount fs/namespace.c:2875 [inline]
       path_mount+0x179d/0x29e0 fs/namespace.c:3192
       do_mount fs/namespace.c:3205 [inline]
       __do_sys_mount fs/namespace.c:3413 [inline]
       __se_sys_mount+0x126/0x180 fs/namespace.c:3390
       do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      Freed by task 6945:
       kasan_save_stack mm/kasan/common.c:48 [inline]
       kasan_set_track+0x3d/0x70 mm/kasan/common.c:56
       kasan_set_free_info+0x17/0x30 mm/kasan/generic.c:355
       __kasan_slab_free+0xdd/0x110 mm/kasan/common.c:422
       __cache_free mm/slab.c:3418 [inline]
       kfree+0x113/0x200 mm/slab.c:3756
       deactivate_locked_super+0xa7/0xf0 fs/super.c:335
       btrfs_mount_root+0x72b/0xb60 fs/btrfs/super.c:1678
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       fc_mount fs/namespace.c:978 [inline]
       vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008
       btrfs_mount+0x33c/0xae0 fs/btrfs/super.c:1732
       legacy_get_tree+0xea/0x180 fs/fs_context.c:592
       vfs_get_tree+0x88/0x270 fs/super.c:1547
       do_new_mount fs/namespace.c:2875 [inline]
       path_mount+0x179d/0x29e0 fs/namespace.c:3192
       do_mount fs/namespace.c:3205 [inline]
       __do_sys_mount fs/namespace.c:3413 [inline]
       __se_sys_mount+0x126/0x180 fs/namespace.c:3390
       do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      The buggy address belongs to the object at ffff8880878e0000
       which belongs to the cache kmalloc-16k of size 16384
      The buggy address is located 1704 bytes inside of
       16384-byte region [ffff8880878e0000, ffff8880878e4000)
      The buggy address belongs to the page:
      page:0000000060704f30 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x878e0
      head:0000000060704f30 order:3 compound_mapcount:0 compound_pincount:0
      flags: 0xfffe0000010200(slab|head)
      raw: 00fffe0000010200 ffffea00028e9a08 ffffea00021e3608 ffff8880aa440b00
      raw: 0000000000000000 ffff8880878e0000 0000000100000001 0000000000000000
      page dumped because: kasan: bad access detected
    
      Memory state around the buggy address:
       ffff8880878e0580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff8880878e0600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      >ffff8880878e0680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                        ^
       ffff8880878e0700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff8880878e0780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ==================================================================
    
    The syzkaller reproducer for this use-after-free crafts a filesystem image
    and loop mounts it twice in a loop. The mount will fail as the crafted
    image has an invalid chunk tree. When this happens btrfs_mount_root() will
    call deactivate_locked_super(), which then cleans up fs_info and
    fs_info::sb. If a second thread now adds the same block-device to the
    filesystem, it will get detected as a duplicate device and
    device_list_add() will reject the duplicate and print a warning. But as
    the fs_info pointer passed in is non-NULL this will result in a
    use-after-free.
    
    Instead of printing possibly uninitialized or already freed memory in
    btrfs_printk(), explicitly pass in a NULL fs_info so the printing of the
    device name will be skipped altogether.
    
    There was a slightly different approach discussed in
    https://lore.kernel.org/linux-btrfs/20200114060920.4527-1-anand.jain@oracle.com/t/#u
    
    Link: https://lore.kernel.org/linux-btrfs/000000000000c9e14b05afcc41ba@google.com
    Reported-by: syzbot+582e66e5edf36a22c7b0@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12aedea582818380e6d246981c1296852fee9de1
Author: David Sterba <dsterba@suse.com>
Date:   Mon Nov 16 19:53:52 2020 +0100

    btrfs: tree-checker: add missing returns after data_ref alignment checks
    
    commit 6d06b0ad94d3dd7e3503d8ad39c39c4634884611 upstream.
    
    There are sectorsize alignment checks that are reported but then
    check_extent_data_ref continues. This was not intended, wrong alignment
    is not a minor problem and we should return with error.
    
    CC: stable@vger.kernel.org # 5.4+
    Fixes: 0785a9aacf9d ("btrfs: tree-checker: Add EXTENT_DATA_REF check")
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0115a26133976c359841ee59c65d9f01b11b3970
Author: Daniel Xu <dxu@dxuuu.xyz>
Date:   Thu Nov 12 17:55:06 2020 -0800

    btrfs: tree-checker: add missing return after error in root_item
    
    commit 1a49a97df657c63a4e8ffcd1ea9b6ed95581789b upstream.
    
    There's a missing return statement after an error is found in the
    root_item, this can cause further problems when a crafted image triggers
    the error.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=210181
    Fixes: 259ee7754b67 ("btrfs: tree-checker: Add ROOT_ITEM check")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ec51459df7117dbe9b1fef2174951f80877a850
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Fri Nov 20 19:43:17 2020 -0800

    netfilter: clear skb->next in NF_HOOK_LIST()
    
    NF_HOOK_LIST() uses list_del() to remove skb from the linked list,
    however, it is not sufficient as skb->next still points to other
    skb. We should just call skb_list_del_init() to clear skb->next,
    like the rest places which using skb list.
    
    This has been fixed in upstream by commit ca58fbe06c54
    ("netfilter: add and use nf_hook_slow_list()").
    
    Fixes: 9f17dbf04ddf ("netfilter: fix use-after-free in NF_HOOK_LIST")
    Reported-by: liuzx@knownsec.com
    Tested-by: liuzx@knownsec.com
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Edward Cree <ecree@solarflare.com>
    Cc: stable@vger.kernel.org # between 4.19 and 5.4
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee791835b3ec78178ca4c592368fa26d48dea5fa
Author: Florian Klink <flokli@flokli.de>
Date:   Sun Nov 15 23:45:09 2020 +0100

    ipv4: use IS_ENABLED instead of ifdef
    
    commit c09c8a27b9baa417864b9adc3228b10ae5eeec93 upstream.
    
    Checking for ifdef CONFIG_x fails if CONFIG_x=m.
    
    Use IS_ENABLED instead, which is true for both built-ins and modules.
    
    Otherwise, a
    > ip -4 route add 1.2.3.4/32 via inet6 fe80::2 dev eth1
    fails with the message "Error: IPv6 support not enabled in kernel." if
    CONFIG_IPV6 is `m`.
    
    In the spirit of b8127113d01e53adba15b41aefd37b90ed83d631.
    
    Fixes: d15662682db2 ("ipv4: Allow ipv6 gateway with ipv4 routes")
    Cc: Kim Phillips <kim.phillips@arm.com>
    Signed-off-by: Florian Klink <flokli@flokli.de>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20201115224509.2020651-1-flokli@flokli.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d16996369fd9fdcd2f53963c0bd76bafd45cc2d
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Nov 11 20:07:20 2020 +0100

    spi: bcm2835: Fix use-after-free on unbind
    
    commit e1483ac030fb4c57734289742f1c1d38dca61e22 upstream
    
    bcm2835_spi_remove() accesses the driver's private data after calling
    spi_unregister_controller() even though that function releases the last
    reference on the spi_controller and thereby frees the private data.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound.
    
    Fixes: f8043872e796 ("spi: add driver for BCM2835")
    Reported-by: Sascha Hauer <s.hauer@pengutronix.de>
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v3.10+: 123456789abc: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v3.10+
    Cc: Vladimir Oltean <olteanv@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/ad66e0a0ad96feb848814842ecf5b6a4539ef35c.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [sudip: dev_err_probe() not yet available]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b606031bbfed28460a0f7c70c860026ff844952f
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Nov 11 20:07:40 2020 +0100

    spi: bcm-qspi: Fix use-after-free on unbind
    
    commit 63c5395bb7a9777a33f0e7b5906f2c0170a23692 upstream
    
    bcm_qspi_remove() calls spi_unregister_master() even though
    bcm_qspi_probe() calls devm_spi_register_master().  The spi_master is
    therefore unregistered and freed twice on unbind.
    
    Moreover, since commit 0392727c261b ("spi: bcm-qspi: Handle clock probe
    deferral"), bcm_qspi_probe() leaks the spi_master allocation if the call
    to devm_clk_get_optional() fails.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound and also
    avoids the spi_master leak on probe.
    
    While at it, fix an ordering issue in bcm_qspi_remove() wherein
    spi_unregister_master() is called after uninitializing the hardware,
    disabling the clock and freeing an IRQ data structure.  The correct
    order is to call spi_unregister_master() *before* those teardown steps
    because bus accesses may still be ongoing until that function returns.
    
    Fixes: fa236a7ef240 ("spi: bcm-qspi: Add Broadcom MSPI driver")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.9+: 123456789abc: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v4.9+
    Cc: Kamal Dasu <kdasu.kdev@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/5e31a9a59fd1c0d0b795b2fe219f25e5ee855f9d.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
