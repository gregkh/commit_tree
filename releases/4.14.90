commit 592f5569e18471c07208f74540f4e0f646b226f7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 21 14:13:19 2018 +0100

    Linux 4.14.90

commit ad962d20d4eb1e690ace8ca9e390e2b05a786999
Author: Nicolas Schichan <nschichan@freebox.fr>
Date:   Wed Dec 19 22:40:42 2018 +0100

    bpf, arm: fix emit_ldx_r and emit_mov_i using TMP_REG_1
    
    emit_ldx_r() and emit_a32_mov_i() were both using TMP_REG_1 and
    clashing with each other. Using TMP_REG_2 in emit_ldx_r() fixes
    the issue.
    
    Fixes: ec19e02b343 ("ARM: net: bpf: fix LDX instructions")
    Cc: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Nicolas Schichan <nschichan@freebox.fr>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1e1eb5c90b6b6a359e584e01468ce0c05801f4d
Author: Trent Piepho <tpiepho@impinj.com>
Date:   Wed May 16 16:45:51 2018 -0700

    rtc: snvs: Add timeouts to avoid kernel lockups
    
    [ Upstream commit cd7f3a249dbed2858e6c2f30e5be7f1f7a709ee2 ]
    
    In order to read correctly from asynchronously updated RTC registers,
    it's necessary to read repeatedly until their values do not change from
    read to read.  It's also necessary to wait for three RTC clock ticks for
    certain operations.  There are no timeouts in this code and these
    operations could possibly loop forever.
    
    To avoid kernel hangs, put in timeouts.
    
    The iMX7d can be configured to stop the SRTC on a tamper event, which
    will lockup the kernel inside this driver as described above.
    
    These hangs can happen when running under qemu, which doesn't emulate
    the SNVS RTC, though currently the driver will refuse to load on qemu
    due to a timeout in the driver probe method.
    
    It could also happen if the SRTC block where somehow placed into reset
    or the slow speed clock that drives the SRTC counter (but not the CPU)
    were to stop.
    
    The symptoms on a two core iMX7d are a work queue hang on
    rtc_timer_do_work(), which eventually blocks a systemd fsnotify
    operation that triggers a work queue flush, causing systemd to hang and
    thus causing all services that should be started by systemd, like a
    console getty, to fail to start or stop.
    
    Also optimize the wait code to wait less.  It only needs to wait for the
    clock to advance three ticks, not to see it change three times.
    
    Cc: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Fabio Estevam <fabio.estevam@nxp.com>
    Cc: Shawn Guo <shawn.guo@linaro.org>
    Cc: Bryan O'Donoghue <pure.logic@nexus-software.ie>
    Signed-off-by: Trent Piepho <tpiepho@impinj.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60e3480e0bbf00ffcec4b1409131cf01b69c7cf1
Author: Israel Rukshin <israelr@mellanox.com>
Date:   Wed Dec 5 16:54:57 2018 +0000

    nvmet-rdma: fix response use after free
    
    [ Upstream commit d7dcdf9d4e15189ecfda24cc87339a3425448d5c ]
    
    nvmet_rdma_release_rsp() may free the response before using it at error
    flow.
    
    Fixes: 8407879 ("nvmet-rdma: fix possible bogus dereference under heavy load")
    Signed-off-by: Israel Rukshin <israelr@mellanox.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07d4f1c4cd57b6ba4b23d243bcb8d1a63316e784
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Dec 6 12:55:28 2018 +0900

    i2c: uniphier-f: fix violation of tLOW requirement for Fast-mode
    
    [ Upstream commit ece27a337d42a3197935711997f2880f0957ed7e ]
    
    Currently, the clock duty is set as tLOW/tHIGH = 1/1. For Fast-mode,
    tLOW is set to 1.25 us while the I2C spec requires tLOW >= 1.3 us.
    
    tLOW/tHIGH = 5/4 would meet both Standard-mode and Fast-mode:
      Standard-mode: tLOW = 5.56 us, tHIGH = 4.44 us
      Fast-mode:     tLOW = 1.39 us, tHIGH = 1.11 us
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90265a60aff7ad21eed76a9e62159760d1d364b2
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Dec 6 12:55:27 2018 +0900

    i2c: uniphier: fix violation of tLOW requirement for Fast-mode
    
    [ Upstream commit 8469636ab5d8c77645b953746c10fda6983a8830 ]
    
    Currently, the clock duty is set as tLOW/tHIGH = 1/1. For Fast-mode,
    tLOW is set to 1.25 us while the I2C spec requires tLOW >= 1.3 us.
    
    tLOW/tHIGH = 5/4 would meet both Standard-mode and Fast-mode:
      Standard-mode: tLOW = 5.56 us, tHIGH = 4.44 us
      Fast-mode:     tLOW = 1.39 us, tHIGH = 1.11 us
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c39910b57c7f557d304f50775eab28b6c892a7fd
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Nov 21 10:19:55 2018 +0100

    i2c: scmi: Fix probe error on devices with an empty SMB0001 ACPI device node
    
    [ Upstream commit 0544ee4b1ad574aec3b6379af5f5cdee42840971 ]
    
    Some AMD based HP laptops have a SMB0001 ACPI device node which does not
    define any methods.
    
    This leads to the following error in dmesg:
    
    [    5.222731] cmi: probe of SMB0001:00 failed with error -5
    
    This commit makes acpi_smbus_cmi_add() return -ENODEV instead in this case
    silencing the error. In case of a failure of the i2c_add_adapter() call
    this commit now propagates the error from that call instead of -EIO.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bdfff5c4f913c50a419b1e28e5893ebc04a09ff
Author: Adamski, Krzysztof (Nokia - PL/Wroclaw) <krzysztof.adamski@nokia.com>
Date:   Fri Nov 16 13:24:41 2018 +0000

    i2c: axxia: properly handle master timeout
    
    [ Upstream commit 6c7f25cae54b840302e4f1b371dbf318fbf09ab2 ]
    
    According to Intel (R) Axxia TM Lionfish Communication Processor
    Peripheral Subsystem Hardware Reference Manual, the AXXIA I2C module
    have a programmable Master Wait Timer, which among others, checks the
    time between commands send in manual mode. When a timeout (25ms) passes,
    TSS bit is set in Master Interrupt Status register and a Stop command is
    issued by the hardware.
    
    The axxia_i2c_xfer(), does not properly handle this situation, however.
    For each message a separate axxia_i2c_xfer_msg() is called and this
    function incorrectly assumes that any interrupt might happen only when
    waiting for completion. This is mostly correct but there is one
    exception - a master timeout can trigger if enough time has passed
    between individual transfers. It will, by definition, happen between
    transfers when the interrupts are disabled by the code. If that happens,
    the hardware issues Stop command.
    
    The interrupt indicating timeout will not be triggered as soon as we
    enable them since the Master Interrupt Status is cleared when master
    mode is entered again (which happens before enabling irqs) meaning this
    error is lost and the transfer is continued even though the Stop was
    issued on the bus. The subsequent operations completes without error but
    a bogus value (0xFF in case of read) is read as the client device is
    confused because aborted transfer. No error is returned from
    master_xfer() making caller believe that a valid value was read.
    
    To fix the problem, the TSS bit (indicating timeout) in Master Interrupt
    Status register is checked before each transfer. If it is set, there was
    a timeout before this transfer and (as described above) the hardware
    already issued Stop command so the transaction should be aborted thus
    -ETIMEOUT is returned from the master_xfer() callback. In order to be
    sure no timeout was issued we can't just read the status just before
    starting new transaction as there will always be a small window of time
    (few CPU cycles at best) where this might still happen. For this reason
    we have to temporally disable the timer before checking for TSS bit.
    Disabling it will, however, clear the TSS bit so in order to preserve
    that information, we have to read it in ISR so we have to ensure that
    the TSS interrupt is not masked between transfers of one transaction.
    There is no need to call bus recovery or controller reinitialization if
    that happens so it's skipped.
    
    Signed-off-by: Krzysztof Adamski <krzysztof.adamski@nokia.com>
    Reviewed-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73c821e378e86d9152bb53d9e261ac128b05e582
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Dec 6 17:44:53 2018 +0000

    mlxsw: spectrum_switchdev: Fix VLAN device deletion via ioctl
    
    [ Upstream commit 993107fea5eefdfdfde1ca38d3f01f0bebf76e77 ]
    
    When deleting a VLAN device using an ioctl the netdev is unregistered
    before the VLAN filter is updated via ndo_vlan_rx_kill_vid(). It can
    lead to a use-after-free in mlxsw in case the VLAN device is deleted
    while being enslaved to a bridge.
    
    The reason for the above is that when mlxsw receives the CHANGEUPPER
    event, it wrongly assumes that the VLAN device is no longer its upper
    and thus destroys the internal representation of the bridge port despite
    the reference count being non-zero.
    
    Fix this by checking if the VLAN device is our upper using its real
    device. In net-next I'm going to remove this trick and instead make
    mlxsw completely agnostic to the order of the events.
    
    Fixes: c57529e1d5d8 ("mlxsw: spectrum: Replace vPorts with Port-VLAN")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e43eec4b4587716505fcf388879e4191331e6fa
Author: Stefan Hajnoczi <stefanha@redhat.com>
Date:   Thu Dec 6 19:14:34 2018 +0000

    vhost/vsock: fix reset orphans race with close timeout
    
    [ Upstream commit c38f57da428b033f2721b611d84b1f40bde674a8 ]
    
    If a local process has closed a connected socket and hasn't received a
    RST packet yet, then the socket remains in the table until a timeout
    expires.
    
    When a vhost_vsock instance is released with the timeout still pending,
    the socket is never freed because vhost_vsock has already set the
    SOCK_DONE flag.
    
    Check if the close timer is pending and let it close the socket.  This
    prevents the race which can leak sockets.
    
    Reported-by: Maximilian Riemensberger <riemensberger@cadami.net>
    Cc: Graham Whaley <graham.whaley@gmail.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab9697222a1da17b6a4e909fab554b6ae5691789
Author: Steve French <stfrench@microsoft.com>
Date:   Sat Nov 3 15:02:44 2018 -0500

    cifs: In Kconfig CONFIG_CIFS_POSIX needs depends on legacy (insecure cifs)
    
    [ Upstream commit 6e785302dad32228819d8066e5376acd15d0e6ba ]
    
    Missing a dependency.  Shouldn't show cifs posix extensions
    in Kconfig if CONFIG_CIFS_ALLOW_INSECURE_DIALECTS (ie SMB1
    protocol) is disabled.
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 938199486ba9bc203fd312a6e02f7edb1640b2b4
Author: Sam Bobroff <sbobroff@linux.ibm.com>
Date:   Mon Dec 3 11:53:21 2018 +1100

    drm/ast: Fix connector leak during driver unload
    
    [ Upstream commit e594a5e349ddbfdaca1951bb3f8d72f3f1660d73 ]
    
    When unloading the ast driver, a warning message is printed by
    drm_mode_config_cleanup() because a reference is still held to one of
    the drm_connector structs.
    
    Correct this by calling drm_crtc_force_disable_all() in
    ast_fbdev_destroy().
    
    Signed-off-by: Sam Bobroff <sbobroff@linux.ibm.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1e613f3c630c7bbc72e04a44b178259b9164d2f6.1543798395.git.sbobroff@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d126d4bf34807707445c8716d9d7c3584a478cfe
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Mon Dec 3 13:21:01 2018 +0100

    ethernet: fman: fix wrong of_node_put() in probe function
    
    [ Upstream commit ecb239d96d369c23c33d41708646df646de669f4 ]
    
    After getting a reference to the platform device's of_node the probe
    function ends up calling of_find_matching_node() using the node as an
    argument. The function takes care of decreasing the refcount on it. We
    are then incorrectly decreasing the refcount on that node again.
    
    This patch removes the unwarranted call to of_node_put().
    
    Fixes: 414fd46e7762 ("fsl/fman: Add FMan support")
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2cc1b2d1954ec291ef61aa6976ae10467895f8d
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Fri Nov 23 12:25:21 2018 +0100

    ARM: 8815/1: V7M: align v7m_dma_inv_range() with v7 counterpart
    
    [ Upstream commit 3d0358d0ba048c5afb1385787aaec8fa5ad78fcc ]
    
    Chris has discovered and reported that v7_dma_inv_range() may corrupt
    memory if address range is not aligned to cache line size.
    
    Since the whole cache-v7m.S was lifted form cache-v7.S the same
    observation applies to v7m_dma_inv_range(). So the fix just mirrors
    what has been done for v7 with a little specific of M-class.
    
    Cc: Chris Cole <chris@sageembedded.com>
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 394f9a113b4c42672c24ce03697712643dc87dee
Author: Chris Cole <chris@sageembedded.com>
Date:   Fri Nov 23 12:20:45 2018 +0100

    ARM: 8814/1: mm: improve/fix ARM v7_dma_inv_range() unaligned address handling
    
    [ Upstream commit a1208f6a822ac29933e772ef1f637c5d67838da9 ]
    
    This patch addresses possible memory corruption when
    v7_dma_inv_range(start_address, end_address) address parameters are not
    aligned to whole cache lines. This function issues "invalidate" cache
    management operations to all cache lines from start_address (inclusive)
    to end_address (exclusive). When start_address and/or end_address are
    not aligned, the start and/or end cache lines are first issued "clean &
    invalidate" operation. The assumption is this is done to ensure that any
    dirty data addresses outside the address range (but part of the first or
    last cache lines) are cleaned/flushed so that data is not lost, which
    could happen if just an invalidate is issued.
    
    The problem is that these first/last partial cache lines are issued
    "clean & invalidate" and then "invalidate". This second "invalidate" is
    not required and worse can cause "lost" writes to addresses outside the
    address range but part of the cache line. If another component writes to
    its part of the cache line between the "clean & invalidate" and
    "invalidate" operations, the write can get lost. This fix is to remove
    the extra "invalidate" operation when unaligned addressed are used.
    
    A kernel module is available that has a stress test to reproduce the
    issue and a unit test of the updated v7_dma_inv_range(). It can be
    downloaded from
    http://ftp.sageembedded.com/outgoing/linux/cache-test-20181107.tgz.
    
    v7_dma_inv_range() is call by dmac_[un]map_area(addr, len, direction)
    when the direction is DMA_FROM_DEVICE. One can (I believe) successfully
    argue that DMA from a device to main memory should use buffers aligned
    to cache line size, because the "clean & invalidate" might overwrite
    data that the device just wrote using DMA. But if a driver does use
    unaligned buffers, at least this fix will prevent memory corruption
    outside the buffer.
    
    Signed-off-by: Chris Cole <chris@sageembedded.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7c36edac701bad12b54f182de7b63b137307e62
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Sun Dec 2 14:34:37 2018 +0200

    net/mlx4_en: Fix build break when CONFIG_INET is off
    
    [ Upstream commit 1b603f9e4313348608f256b564ed6e3d9e67f377 ]
    
    MLX4_EN depends on NETDEVICES, ETHERNET and INET Kconfigs.
    Make sure they are listed in MLX4_EN Kconfig dependencies.
    
    This fixes the following build break:
    
    drivers/net/ethernet/mellanox/mlx4/en_rx.c:582:18: warning: ‘struct iphdr’ declared inside parameter list [enabled by default]
    struct iphdr *iph)
    ^
    drivers/net/ethernet/mellanox/mlx4/en_rx.c:582:18: warning: its scope is only this definition or declaration, which is probably not what you want [enabled by default]
    drivers/net/ethernet/mellanox/mlx4/en_rx.c: In function ‘get_fixed_ipv4_csum’:
    drivers/net/ethernet/mellanox/mlx4/en_rx.c:586:20: error: dereferencing pointer to incomplete type
    _u8 ipproto = iph->protocol;
    
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a130bc711d3931567575c0449cdd255859c1e58
Author: Anderson Luiz Alves <alacn1@gmail.com>
Date:   Fri Nov 30 21:58:36 2018 -0200

    mv88e6060: disable hardware level MAC learning
    
    [ Upstream commit a74515604a7b171f2702bdcbd1e231225fb456d0 ]
    
    Disable hardware level MAC learning because it breaks station roaming.
    When enabled it drops all frames that arrive from a MAC address
    that is on a different port at learning table.
    
    Signed-off-by: Anderson Luiz Alves <alacn1@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b427e57f4f6eb3ad1c02d3faa3d551336f2fd59
Author: Juha-Matti Tilli <juha-matti.tilli@iki.fi>
Date:   Sun Dec 2 12:47:08 2018 +0200

    libata: whitelist all SAMSUNG MZ7KM* solid-state disks
    
    [ Upstream commit fd6f32f78645db32b6b95a42e45da2ddd6de0e67 ]
    
    These devices support read zero after trim (RZAT), as they advertise to
    the OS. However, the OS doesn't believe the SSDs unless they are
    explicitly whitelisted.
    
    Acked-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Juha-Matti Tilli <juha-matti.tilli@iki.fi>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 647492ad7341cc76a9ebafeb67cea1664f674cca
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Dec 3 11:24:30 2018 -0800

    Input: omap-keypad - fix keyboard debounce configuration
    
    [ Upstream commit 6c3516fed7b61a3527459ccfa67fab130d910610 ]
    
    I noticed that the Android v3.0.8 kernel on droid4 is using different
    keypad values from the mainline kernel and does not have issues with
    keys occasionally being stuck until pressed again. Turns out there was
    an earlier patch posted to fix this as "Input: omap-keypad: errata i689:
    Correct debounce time", but it was never reposted to fix use macros
    for timing calculations.
    
    This updated version is using macros, and also fixes the use of the
    input clock rate to use 32768KiHz instead of 32000KiHz. And we want to
    use the known good Android kernel values of 3 and 6 instead of 2 and 6
    in the earlier patch.
    
    Reported-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dc84c590cea6b1852e866132edb0079d477dbf6
Author: Teika Kazura <teika@gmx.com>
Date:   Mon Dec 3 11:26:03 2018 -0800

    Input: synaptics - enable SMBus for HP 15-ay000
    
    [ Upstream commit 5a6dab15f7a79817cab4af612ddd99eda793fce6 ]
    
    SMBus works fine for the touchpad with id SYN3221, used in the HP 15-ay000
    series,
    
    This device has been reported in these messages in the "linux-input"
    mailing list:
    * https://marc.info/?l=linux-input&m=152016683003369&w=2
    * https://www.spinics.net/lists/linux-input/msg52525.html
    
    Reported-by: Nitesh Debnath <niteshkd1999@gmail.com>
    Reported-by: Teika Kazura <teika@gmx.com>
    Signed-off-by: Teika Kazura <teika@gmx.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f74717d0237cde6fa63a70be9de7b275e2e8cd0
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Dec 3 17:51:43 2018 +0300

    clk: mmp: Off by one in mmp_clk_add()
    
    [ Upstream commit 2e85c57493e391b93445c1e0d530b36b95becc64 ]
    
    The > comparison should be >= or we write one element beyond the end of
    the unit->clk_table[] array.
    
    (The unit->clk_table[] array is allocated in the mmp_clk_init() function
    and it has unit->nr_clks elements).
    
    Fixes: 4661fda10f8b ("clk: mmp: add basic support functions for DT support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5f2432339ba2827d75f682887eac604afb06535
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Dec 3 17:50:55 2018 +0300

    clk: mvebu: Off by one bugs in cp110_of_clk_get()
    
    [ Upstream commit d9f5b7f5dd0fa74a89de5a7ac1e26366f211ccee ]
    
    These > comparisons should be >= to prevent reading beyond the end of
    of the clk_data->hws[] buffer.
    
    The clk_data->hws[] array is allocated in cp110_syscon_common_probe()
    when we do:
            cp110_clk_data = devm_kzalloc(dev, sizeof(*cp110_clk_data) +
                                          sizeof(struct clk_hw *) * CP110_CLK_NUM,
                                          GFP_KERNEL);
    As you can see, it has CP110_CLK_NUM elements which is equivalent to
    CP110_MAX_CORE_CLOCKS + CP110_MAX_GATABLE_CLOCKS.
    
    Fixes: d3da3eaef7f4 ("clk: mvebu: new driver for Armada CP110 system controller")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 308d65a18461c90b2e4e14dac55478376382a5d3
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Thu Nov 29 14:01:50 2018 +0800

    drm/msm: Fix error return checking
    
    [ Upstream commit 098336deb946f37a70afc0979af388b615c378bf ]
    
    The error checks on ret for a negative error return always fails because
    the return value of iommu_map_sg() is unsigned and can never be negative.
    
    Detected with Coccinelle:
    drivers/gpu/drm/msm/msm_iommu.c:69:9-12: WARNING: Unsigned expression
    compared with zero: ret < 0
    
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    CC: Rob Clark <robdclark@gmail.com>
    CC: David Airlie <airlied@linux.ie>
    CC: Julia Lawall <julia.lawall@lip6.fr>
    CC: linux-arm-msm@vger.kernel.org
    CC: dri-devel@lists.freedesktop.org
    CC: freedreno@lists.freedesktop.org
    CC: linux-kernel@vger.kernel.org
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b9860ad1efa031be8b37bbd60cdb699d0fdb64c
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Tue Nov 20 08:02:49 2018 -0500

    ide: pmac: add of_node_put()
    
    [ Upstream commit a51921c0db3fd26c4ed83dc0ec5d32988fa02aa5 ]
    
    use of_node_put() to release the refcount.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a19e57563ce7416727c7b318162972d780334020
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Wed Nov 21 10:22:54 2018 -0500

    drivers/tty: add missing of_node_put()
    
    [ Upstream commit dac097c4546e4c5b16dd303a1e97c1d319c8ab3e ]
    
    of_find_node_by_path() acquires a reference to the node
    returned by it and that reference needs to be dropped by its caller.
    This place is not doing this, so fix it.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b37106bc20ab5265b113a67563d4fb0b5191153
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Tue Nov 20 08:38:26 2018 -0500

    drivers/sbus/char: add of_node_put()
    
    [ Upstream commit 6bd520ab7cf69486ea81fd3cdfd2d5a390ad1100 ]
    
    use of_node_put() to release the refcount.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 923e09c74a9ca2761d3fa5f2c31b497360138244
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Tue Nov 20 08:30:40 2018 -0500

    sbus: char: add of_node_put()
    
    [ Upstream commit 87d81a23e24f24ebe014891e8bdf3ff8785031e8 ]
    
    use of_node_put() to release the refcount.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3f68415c9871e4828255ffb52b01ed4fe28dca1
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sat Dec 1 23:18:00 2018 -0500

    SUNRPC: Fix a potential race in xprt_connect()
    
    [ Upstream commit 0a9a4304f3614e25d9de9b63502ca633c01c0d70 ]
    
    If an asynchronous connection attempt completes while another task is
    in xprt_connect(), then the call to rpc_sleep_on() could end up
    racing with the call to xprt_wake_pending_tasks().
    So add a second test of the connection state after we've put the
    task to sleep and set the XPRT_CONNECTING flag, when we know that there
    can be no asynchronous connection attempts still in progress.
    
    Fixes: 0b9e79431377d ("SUNRPC: Move the test for XPRT_CONNECTING into...")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76413fbfc7c1193b9b5b2a0fde8a90003adb32d3
Author: Dave Kleikamp <dave.kleikamp@oracle.com>
Date:   Tue Nov 27 19:31:30 2018 +0000

    nfs: don't dirty kernel pages read by direct-io
    
    [ Upstream commit ad3cba223ac02dc769c3bbe88efe277bbb457566 ]
    
    When we use direct_IO with an NFS backing store, we can trigger a
    WARNING in __set_page_dirty(), as below, since we're dirtying the page
    unnecessarily in nfs_direct_read_completion().
    
    To fix, replicate the logic in commit 53cbf3b157a0 ("fs: direct-io:
    don't dirtying pages for ITER_BVEC/ITER_KVEC direct read").
    
    Other filesystems that implement direct_IO handle this; most use
    blockdev_direct_IO(). ceph and cifs have similar logic.
    
    mount 127.0.0.1:/export /nfs
    dd if=/dev/zero of=/nfs/image bs=1M count=200
    losetup --direct-io=on -f /nfs/image
    mkfs.btrfs /dev/loop0
    mount -t btrfs /dev/loop0 /mnt/
    
    kernel: WARNING: CPU: 0 PID: 8067 at fs/buffer.c:580 __set_page_dirty+0xaf/0xd0
    kernel: Modules linked in: loop(E) nfsv3(E) rpcsec_gss_krb5(E) nfsv4(E) dns_resolver(E) nfs(E) fscache(E) nfsd(E) auth_rpcgss(E) nfs_acl(E) lockd(E) grace(E) fuse(E) tun(E) ip6t_rpfilter(E) ipt_REJECT(E) nf_
    kernel:  snd_seq(E) snd_seq_device(E) snd_pcm(E) video(E) snd_timer(E) snd(E) soundcore(E) ip_tables(E) xfs(E) libcrc32c(E) sd_mod(E) sr_mod(E) cdrom(E) ata_generic(E) pata_acpi(E) crc32c_intel(E) ahci(E) li
    kernel: CPU: 0 PID: 8067 Comm: kworker/0:2 Tainted: G            E     4.20.0-rc1.master.20181111.ol7.x86_64 #1
    kernel: Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    kernel: Workqueue: nfsiod rpc_async_release [sunrpc]
    kernel: RIP: 0010:__set_page_dirty+0xaf/0xd0
    kernel: Code: c3 48 8b 02 f6 c4 04 74 d4 48 89 df e8 ba 05 f7 ff 48 89 c6 eb cb 48 8b 43 08 a8 01 75 1f 48 89 d8 48 8b 00 a8 04 74 02 eb 87 <0f> 0b eb 83 48 83 e8 01 eb 9f 48 83 ea 01 0f 1f 00 eb 8b 48 83 e8
    kernel: RSP: 0000:ffffc1c8825b7d78 EFLAGS: 00013046
    kernel: RAX: 000fffffc0020089 RBX: fffff2b603308b80 RCX: 0000000000000001
    kernel: RDX: 0000000000000001 RSI: ffff9d11478115c8 RDI: ffff9d11478115d0
    kernel: RBP: ffffc1c8825b7da0 R08: 0000646f6973666e R09: 8080808080808080
    kernel: R10: 0000000000000001 R11: 0000000000000000 R12: ffff9d11478115d0
    kernel: R13: ffff9d11478115c8 R14: 0000000000003246 R15: 0000000000000001
    kernel: FS:  0000000000000000(0000) GS:ffff9d115ba00000(0000) knlGS:0000000000000000
    kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    kernel: CR2: 00007f408686f640 CR3: 0000000104d8e004 CR4: 00000000000606f0
    kernel: DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    kernel: DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    kernel: Call Trace:
    kernel:  __set_page_dirty_buffers+0xb6/0x110
    kernel:  set_page_dirty+0x52/0xb0
    kernel:  nfs_direct_read_completion+0xc4/0x120 [nfs]
    kernel:  nfs_pgio_release+0x10/0x20 [nfs]
    kernel:  rpc_free_task+0x30/0x70 [sunrpc]
    kernel:  rpc_async_release+0x12/0x20 [sunrpc]
    kernel:  process_one_work+0x174/0x390
    kernel:  worker_thread+0x4f/0x3e0
    kernel:  kthread+0x102/0x140
    kernel:  ? drain_workqueue+0x130/0x130
    kernel:  ? kthread_stop+0x110/0x110
    kernel:  ret_from_fork+0x35/0x40
    kernel: ---[ end trace 01341980905412c9 ]---
    
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    
    [forward-ported to v4.20]
    Signed-off-by: Calum Mackay <calum.mackay@oracle.com>
    Reviewed-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Reviewed-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27be23532ed8cdc4dbe872b9b3b16887d3252e17
Author: David Miller <davem@davemloft.net>
Date:   Wed Nov 28 22:33:53 2018 -0800

    bpf: Fix verifier log string check for bad alignment.
    
    [ Upstream commit c01ac66b38660f2b507ccd0b75d28e3002d56fbb ]
    
    The message got changed a lot time ago.
    
    This was responsible for 36 test case failures on sparc64.
    
    Fixes: f1174f77b50c ("bpf/verifier: rework value tracking")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87c1a07b0e7f7127aa4be68864ef9cf6112e0535
Author: Toni Peltonen <peltzi@peltzi.fi>
Date:   Tue Nov 27 16:56:57 2018 +0200

    bonding: fix 802.3ad state sent to partner when unbinding slave
    
    [ Upstream commit 3b5b3a3331d141e8f2a7aaae3a94dfa1e61ecbe4 ]
    
    Previously when unbinding a slave the 802.3ad implementation only told
    partner that the port is not suitable for aggregation by setting the port
    aggregation state from aggregatable to individual. This is not enough. If the
    physical layer still stays up and we only unbinded this port from the bond there
    is nothing in the aggregation status alone to prevent the partner from sending
    traffic towards us. To ensure that the partner doesn't consider this
    port at all anymore we should also disable collecting and distributing to
    signal that this actor is going away. Also clear AD_STATE_SYNCHRONIZATION to
    ensure partner exits collecting + distributing state.
    
    I have tested this behaviour againts Arista EOS switches with mlx5 cards
    (physical link stays up even when interface is down) and simulated
    the same situation virtually Linux <-> Linux with two network namespaces
    running two veth device pairs. In both cases setting aggregation to
    individual doesn't alone prevent traffic from being to sent towards this
    port given that the link stays up in partners end. Partner still keeps
    it's end in collecting + distributing state and continues until timeout is
    reached. In most cases this means we are losing the traffic partner sends
    towards our port while we wait for timeout. This is most visible with slow
    periodic time (LACP rate slow).
    
    Other open source implementations like Open VSwitch and libreswitch, and
    vendor implementations like Arista EOS, seem to disable collecting +
    distributing to when doing similar port disabling/detaching/removing change.
    With this patch kernel implementation would behave the same way and ensure
    partner doesn't consider our actor viable anymore.
    
    Signed-off-by: Toni Peltonen <peltzi@peltzi.fi>
    Signed-off-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Acked-by: Jonathan Toppins <jtoppins@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32f91e02d0e93535b914bb8ed7111e5004dfdecd
Author: Jose Abreu <joabreu@synopsys.com>
Date:   Fri Nov 30 09:47:31 2018 +0000

    ARC: io.h: Implement reads{x}()/writes{x}()
    
    [ Upstream commit 10d443431dc2bb733cf7add99b453e3fb9047a2e ]
    
    Some ARC CPU's do not support unaligned loads/stores. Currently, generic
    implementation of reads{b/w/l}()/writes{b/w/l}() is being used with ARC.
    This can lead to misfunction of some drivers as generic functions do a
    plain dereference of a pointer that can be unaligned.
    
    Let's use {get/put}_unaligned() helpers instead of plain dereference of
    pointer in order to fix. The helpers allow to get and store data from an
    unaligned address whilst preserving the CPU internal alignment.
    According to [1], the use of these helpers are costly in terms of
    performance so we added an initial check for a buffer already aligned so
    that the usage of the helpers can be avoided, when possible.
    
    [1] Documentation/unaligned-memory-access.txt
    
    Cc: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: Joao Pinto <jpinto@synopsys.com>
    Cc: David Laight <David.Laight@ACULAB.COM>
    Tested-by: Vitor Soares <soares@synopsys.com>
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5094dea5acab748453e75fcb53db6fe9ce629ab7
Author: Sean Paul <seanpaul@chromium.org>
Date:   Wed Oct 3 16:22:31 2018 -0400

    drm/msm: Grab a vblank reference when waiting for commit_done
    
    [ Upstream commit 3b712e43e3876b42b38321ecf790a1f5fe59c834 ]
    
    Similar to the atomic helpers, we should enable vblank while we're
    waiting for the commit to finish. DPU needs this, MDP5 seems to work
    fine without it.
    
    Reviewed-by: Abhinav Kumar <abhinavk@codeaurora.org>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81710cedad2fa7ea3221cdf77bcb1d39683f07ac
Author: YiFei Zhu <zhuyifei1999@gmail.com>
Date:   Thu Nov 29 18:12:30 2018 +0100

    x86/earlyprintk/efi: Fix infinite loop on some screen widths
    
    [ Upstream commit 79c2206d369b87b19ac29cb47601059b6bf5c291 ]
    
    An affected screen resolution is 1366 x 768, which width is not
    divisible by 8, the default font width. On such screens, when longer
    lines are earlyprintk'ed, overflow-to-next-line can never trigger,
    due to the left-most x-coordinate of the next character always less
    than the screen width. Earlyprintk will infinite loop in trying to
    print the rest of the string but unable to, due to the line being
    full.
    
    This patch makes the trigger consider the right-most x-coordinate,
    instead of left-most, as the value to compare against the screen
    width threshold.
    
    Signed-off-by: YiFei Zhu <zhuyifei1999@gmail.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Arend van Spriel <arend.vanspriel@broadcom.com>
    Cc: Bhupesh Sharma <bhsharma@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Eric Snowberg <eric.snowberg@oracle.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Jon Hunter <jonathanh@nvidia.com>
    Cc: Julien Thierry <julien.thierry@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20181129171230.18699-12-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a2c2aae1bca2e176bcc93f02ce4cc8fe8bda326
Author: Cathy Avery <cavery@redhat.com>
Date:   Tue Nov 27 14:28:53 2018 -0500

    scsi: vmw_pscsi: Rearrange code to avoid multiple calls to free_irq during unload
    
    [ Upstream commit 02f425f811cefcc4d325d7a72272651e622dc97e ]
    
    Currently pvscsi_remove calls free_irq more than once as
    pvscsi_release_resources and __pvscsi_shutdown both call
    pvscsi_shutdown_intr. This results in a 'Trying to free already-free IRQ'
    warning and stack trace. To solve the problem pvscsi_shutdown_intr has been
    moved out of pvscsi_release_resources.
    
    Signed-off-by: Cathy Avery <cavery@redhat.com>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e30cdb191150be718bb01d0eb21c790ac24a1c3
Author: Fred Herard <fred.herard@oracle.com>
Date:   Tue Nov 20 20:22:45 2018 -0500

    scsi: libiscsi: Fix NULL pointer dereference in iscsi_eh_session_reset
    
    [ Upstream commit 5db6dd14b31397e8cccaaddab2ff44ebec1acf25 ]
    
    This commit addresses NULL pointer dereference in iscsi_eh_session_reset.
    Reference should not be made to session->leadconn when session->state is
    set to ISCSI_STATE_TERMINATE.
    
    Signed-off-by: Fred Herard <fred.herard@oracle.com>
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce28c745aafcd5ae6a5a85731c8585e1cf0e3e2e
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Nov 15 11:05:10 2018 -0800

    Input: hyper-v - fix wakeup from suspend-to-idle
    
    [ Upstream commit 10f91c73cc41ceead210a905dbd196398e99c7d2 ]
    
    It makes little sense but still possible to put Hyper-V guests into
    suspend-to-idle state. To wake them up two wakeup sources were registered
    in the past: hyperv-keyboard and hid-hyperv. However, since
    commit eed4d47efe95 ("ACPI / sleep: Ignore spurious SCI wakeups from
    suspend-to-idle") pm_wakeup_event() from these devices is ignored. Switch
    to pm_wakeup_hard_event() API as these devices are actually the only
    possible way to wakeup Hyper-V guests.
    
    Fixes: eed4d47efe95 (ACPI / sleep: Ignore spurious SCI wakeups from suspend-to-idle)
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d2d1629780025966c3fc793c201e387da18f5be
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Fri Oct 5 23:22:06 2018 +0300

    mac80211_hwsim: fix module init error paths for netlink
    
    [ Upstream commit 05cc09de4c017663a217630682041066f2f9a5cd ]
    
    There is no unregister netlink notifier and family on error paths
    in init_mac80211_hwsim(). Also there is an error path where
    hwsim_class is not destroyed.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Fixes: 62759361eb49 ("mac80211-hwsim: Provide multicast event for HWSIM_CMD_NEW_RADIO")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f972505011c27d09423a46707789192a039b66a
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Jun 21 20:35:26 2018 -0400

    locking/qspinlock: Fix build for anonymous union in older GCC compilers
    
    [ Upstream commit 6cc65be4f6f2a7186af8f3e09900787c7912dad2 ]
    
    One of my tests compiles the kernel with gcc 4.5.3, and I hit the
    following build error:
    
      include/linux/semaphore.h: In function 'sema_init':
      include/linux/semaphore.h:35:17: error: unknown field 'val' specified in initializer
      include/linux/semaphore.h:35:17: warning: missing braces around initializer
      include/linux/semaphore.h:35:17: warning: (near initialization for '(anonymous).raw_lock.<anonymous>.val')
    
    I bisected it down to:
    
     625e88be1f41 ("locking/qspinlock: Merge 'struct __qspinlock' into 'struct qspinlock'")
    
    ... which makes qspinlock have an anonymous union, which makes initializing it special
    for older compilers. By adding strategic brackets, it makes the build
    happy again.
    
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Fixes: 625e88be1f41 ("locking/qspinlock: Merge 'struct __qspinlock' into 'struct qspinlock'")
    Link: http://lkml.kernel.org/r/20180621203526.172ab5c4@vmware.local.home
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12f75e8ad273df5b4e0bdab97d55cc23be1a0d7f
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Tue Dec 18 16:04:18 2018 -0500

    IB/hfi1: Remove race conditions in user_sdma send path
    
    commit 28a9a9e83ceae2cee25b9af9ad20d53aaa9ab951 upstream
    
    Packet queue state is over used to determine SDMA descriptor
    availablitity and packet queue request state.
    
    cpu 0  ret = user_sdma_send_pkts(req, pcount);
    cpu 0  if (atomic_read(&pq->n_reqs))
    cpu 1  IRQ user_sdma_txreq_cb calls pq_update() (state to _INACTIVE)
    cpu 0        xchg(&pq->state, SDMA_PKT_Q_ACTIVE);
    
    At this point pq->n_reqs == 0 and pq->state is incorrectly
    SDMA_PKT_Q_ACTIVE.  The close path will hang waiting for the state
    to return to _INACTIVE.
    
    This can also change the state from _DEFERRED to _ACTIVE.  However,
    this is a mostly benign race.
    
    Remove the racy code path.
    
    Use n_reqs to determine if a packet queue is active or not.
    
    Cc: <stable@vger.kernel.org> # 4.14.0>
    Reviewed-by: Mitko Haralanov <mitko.haralanov@intel.com>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f8a5a9be2b422af6a7ea12a8fe2bdefdab754c5
Author: Ilan Peer <ilan.peer@intel.com>
Date:   Tue Apr 3 11:35:22 2018 +0300

    mac80211: Fix condition validating WMM IE
    
    [ Upstream commit 911a26484c33e10de6237228ca1d7293548e9f49 ]
    
    Commit c470bdc1aaf3 ("mac80211: don't WARN on bad WMM parameters from
    buggy APs") handled cases where an AP reports a zeroed WMM
    IE. However, the condition that checks the validity accessed the wrong
    index in the ieee80211_tx_queue_params array, thus wrongly deducing
    that the parameters are invalid. Fix it.
    
    Fixes: c470bdc1aaf3 ("mac80211: don't WARN on bad WMM parameters from buggy APs")
    Signed-off-by: Ilan Peer <ilan.peer@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 603bd4dc73594c8ac39a578d9fae997ea04e3a17
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Mon Mar 26 16:21:04 2018 +0300

    mac80211: don't WARN on bad WMM parameters from buggy APs
    
    [ Upstream commit c470bdc1aaf36669e04ba65faf1092b2d1c6cabe ]
    
    Apparently, some APs are buggy enough to send a zeroed
    WMM IE. Don't WARN on this since this is not caused by a bug
    on the client's system.
    
    This aligns the condition of the WARNING in drv_conf_tx
    with the validity check in ieee80211_sta_wmm_params.
    We will now pick the default values whenever we get
    a zeroed WMM IE.
    
    This has been reported here:
    https://bugzilla.kernel.org/show_bug.cgi?id=199161
    
    Fixes: f409079bb678 ("mac80211: sanity check CW_min/CW_max towards driver")
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5515c5bd3f560e89222cce52ea2f71c71687a2e8
Author: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
Date:   Fri Jan 12 11:16:50 2018 +0100

    netfilter: ipset: Fix wraparound in hash:*net* types
    
    [ Upstream commit 0b8d9073539e217f79ec1bff65eb205ac796723d ]
    
    Fix wraparound bug which could lead to memory exhaustion when adding an
    x.x.x.x-255.255.255.255 range to any hash:*net* types.
    
    Fixes Netfilter's bugzilla id #1212, reported by Thomas Schwark.
    
    Fixes: 48596a8ddc46 ("netfilter: ipset: Fix adding an IPv4 range containing more than 2^31 addresses")
    Signed-off-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a35d21a4d12fe774c46d17831e2938781179c83
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Oct 25 12:33:42 2017 -0600

    elevator: lookup mq vs non-mq elevators
    
    [ Upstream commit 2527d99789e248576ac8081530cd4fd88730f8c7 ]
    
    If an IO scheduler is selected via elevator= and it doesn't match
    the driver in question wrt blk-mq support, then we fail to boot.
    
    The elevator= parameter is deprecated and only supported for
    non-mq devices. Augment the elevator lookup API so that we
    pass in if we're looking for an mq capable scheduler or not,
    so that we only ever return a valid type for the queue in
    question.
    
    Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=196695
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d01e063296a80e93abe93803602e5cf37309865
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Dec 18 18:14:00 2018 +0100

    locking/qspinlock, x86: Provide liveness guarantee
    
    commit 7aa54be2976550f17c11a1c3e3630002dea39303 upstream.
    
    On x86 we cannot do fetch_or() with a single instruction and thus end up
    using a cmpxchg loop, this reduces determinism. Replace the fetch_or()
    with a composite operation: tas-pending + load.
    
    Using two instructions of course opens a window we previously did not
    have. Consider the scenario:
    
            CPU0            CPU1            CPU2
    
     1)     lock
              trylock -> (0,0,1)
    
     2)                     lock
                              trylock /* fail */
    
     3)     unlock -> (0,0,0)
    
     4)                                     lock
                                              trylock -> (0,0,1)
    
     5)                       tas-pending -> (0,1,1)
                              load-val <- (0,1,0) from 3
    
     6)                       clear-pending-set-locked -> (0,0,1)
    
                              FAIL: _2_ owners
    
    where 5) is our new composite operation. When we consider each part of
    the qspinlock state as a separate variable (as we can when
    _Q_PENDING_BITS == 8) then the above is entirely possible, because
    tas-pending will only RmW the pending byte, so the later load is able
    to observe prior tail and lock state (but not earlier than its own
    trylock, which operates on the whole word, due to coherence).
    
    To avoid this we need 2 things:
    
     - the load must come after the tas-pending (obviously, otherwise it
       can trivially observe prior state).
    
     - the tas-pending must be a full word RmW instruction, it cannot be an XCHGB for
       example, such that we cannot observe other state prior to setting
       pending.
    
    On x86 we can realize this by using "LOCK BTS m32, r32" for
    tas-pending followed by a regular load.
    
    Note that observing later state is not a problem:
    
     - if we fail to observe a later unlock, we'll simply spin-wait for
       that store to become visible.
    
     - if we observe a later xchg_tail(), there is no difference from that
       xchg_tail() having taken place before the tas-pending.
    
    Suggested-by: Will Deacon <will.deacon@arm.com>
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Will Deacon <will.deacon@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: andrea.parri@amarulasolutions.com
    Cc: longman@redhat.com
    Fixes: 59fb586b4a07 ("locking/qspinlock: Remove unbounded cmpxchg() loop from locking slowpath")
    Link: https://lkml.kernel.org/r/20181003130957.183726335@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    [bigeasy: GEN_BINARY_RMWcc macro redo]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e21502d37a503d4311e2bdb46a66aef783a7cfe
Author: Will Deacon <will@kernel.org>
Date:   Tue Dec 18 18:13:59 2018 +0100

    locking/qspinlock/x86: Increase _Q_PENDING_LOOPS upper bound
    
    commit b247be3fe89b6aba928bf80f4453d1c4ba8d2063 upstream.
    
    On x86, atomic_cond_read_relaxed will busy-wait with a cpu_relax() loop,
    so it is desirable to increase the number of times we spin on the qspinlock
    lockword when it is found to be transitioning from pending to locked.
    
    According to Waiman Long:
    
     | Ideally, the spinning times should be at least a few times the typical
     | cacheline load time from memory which I think can be down to 100ns or
     | so for each cacheline load with the newest systems or up to several
     | hundreds ns for older systems.
    
    which in his benchmarking corresponded to 512 iterations.
    
    Suggested-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boqun.feng@gmail.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: paulmck@linux.vnet.ibm.com
    Link: http://lkml.kernel.org/r/1524738868-31318-5-git-send-email-will.deacon@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49849a651b8456263391ae767be6f7d02af8ef26
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Dec 18 18:13:58 2018 +0100

    locking/qspinlock: Re-order code
    
    commit 53bf57fab7321fb42b703056a4c80fc9d986d170 upstream.
    
    Flip the branch condition after atomic_fetch_or_acquire(_Q_PENDING_VAL)
    such that we loose the indent. This also result in a more natural code
    flow IMO.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: andrea.parri@amarulasolutions.com
    Cc: longman@redhat.com
    Link: https://lkml.kernel.org/r/20181003130257.156322446@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2f76a2c666e9b09fa1fb903bdb20c756dc90e21
Author: Will Deacon <will@kernel.org>
Date:   Tue Dec 18 18:13:57 2018 +0100

    locking/qspinlock: Kill cmpxchg() loop when claiming lock from head of queue
    
    commit c61da58d8a9ba9238250a548f00826eaf44af0f7 upstream.
    
    When a queued locker reaches the head of the queue, it claims the lock
    by setting _Q_LOCKED_VAL in the lockword. If there isn't contention, it
    must also clear the tail as part of this operation so that subsequent
    lockers can avoid taking the slowpath altogether.
    
    Currently this is expressed as a cmpxchg() loop that practically only
    runs up to two iterations. This is confusing to the reader and unhelpful
    to the compiler. Rewrite the cmpxchg() loop without the loop, so that a
    failed cmpxchg() implies that there is contention and we just need to
    write to _Q_LOCKED_VAL without considering the rest of the lockword.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boqun.feng@gmail.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: paulmck@linux.vnet.ibm.com
    Link: http://lkml.kernel.org/r/1524738868-31318-7-git-send-email-will.deacon@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 075703d79c3a0a603a69e09167f96c1a2502eabe
Author: Will Deacon <will@kernel.org>
Date:   Tue Dec 18 18:13:56 2018 +0100

    locking/qspinlock: Remove duplicate clear_pending() function from PV code
    
    commit 3bea9adc96842b8a7345c7fb202c16ae9c8d5b25 upstream.
    
    The native clear_pending() function is identical to the PV version, so the
    latter can simply be removed.
    
    This fixes the build for systems with >= 16K CPUs using the PV lock implementation.
    
    Reported-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boqun.feng@gmail.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: paulmck@linux.vnet.ibm.com
    Link: http://lkml.kernel.org/r/20180427101619.GB21705@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a617996cba577806960e87882e60d7444d01df4
Author: Will Deacon <will@kernel.org>
Date:   Tue Dec 18 18:13:55 2018 +0100

    locking/qspinlock: Remove unbounded cmpxchg() loop from locking slowpath
    
    commit 59fb586b4a07b4e1a0ee577140ab4842ba451acd upstream.
    
    The qspinlock locking slowpath utilises a "pending" bit as a simple form
    of an embedded test-and-set lock that can avoid the overhead of explicit
    queuing in cases where the lock is held but uncontended. This bit is
    managed using a cmpxchg() loop which tries to transition the uncontended
    lock word from (0,0,0) -> (0,0,1) or (0,0,1) -> (0,1,1).
    
    Unfortunately, the cmpxchg() loop is unbounded and lockers can be starved
    indefinitely if the lock word is seen to oscillate between unlocked
    (0,0,0) and locked (0,0,1). This could happen if concurrent lockers are
    able to take the lock in the cmpxchg() loop without queuing and pass it
    around amongst themselves.
    
    This patch fixes the problem by unconditionally setting _Q_PENDING_VAL
    using atomic_fetch_or, and then inspecting the old value to see whether
    we need to spin on the current lock owner, or whether we now effectively
    hold the lock. The tricky scenario is when concurrent lockers end up
    queuing on the lock and the lock becomes available, causing us to see
    a lockword of (n,0,0). With pending now set, simply queuing could lead
    to deadlock as the head of the queue may not have observed the pending
    flag being cleared. Conversely, if the head of the queue did observe
    pending being cleared, then it could transition the lock from (n,0,0) ->
    (0,0,1) meaning that any attempt to "undo" our setting of the pending
    bit could race with a concurrent locker trying to set it.
    
    We handle this race by preserving the pending bit when taking the lock
    after reaching the head of the queue and leaving the tail entry intact
    if we saw pending set, because we know that the tail is going to be
    updated shortly.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boqun.feng@gmail.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: paulmck@linux.vnet.ibm.com
    Link: http://lkml.kernel.org/r/1524738868-31318-6-git-send-email-will.deacon@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5261ad70e2d673b9cfea7c81f309cabc847b7a27
Author: Will Deacon <will@kernel.org>
Date:   Tue Dec 18 18:13:54 2018 +0100

    locking/qspinlock: Merge 'struct __qspinlock' into 'struct qspinlock'
    
    commit 625e88be1f41b53cec55827c984e4a89ea8ee9f9 upstream.
    
    'struct __qspinlock' provides a handy union of fields so that
    subcomponents of the lockword can be accessed by name, without having to
    manage shifts and masks explicitly and take endianness into account.
    
    This is useful in qspinlock.h and also potentially in arch headers, so
    move the 'struct __qspinlock' into 'struct qspinlock' and kill the extra
    definition.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Acked-by: Boqun Feng <boqun.feng@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: paulmck@linux.vnet.ibm.com
    Link: http://lkml.kernel.org/r/1524738868-31318-3-git-send-email-will.deacon@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3dab30f33814dc0b97c001921d3d724004c09b5f
Author: Will Deacon <will@kernel.org>
Date:   Tue Dec 18 18:13:53 2018 +0100

    locking/qspinlock: Bound spinning on pending->locked transition in slowpath
    
    commit 6512276d97b160d90b53285bd06f7f201459a7e3 upstream.
    
    If a locker taking the qspinlock slowpath reads a lock value indicating
    that only the pending bit is set, then it will spin whilst the
    concurrent pending->locked transition takes effect.
    
    Unfortunately, there is no guarantee that such a transition will ever be
    observed since concurrent lockers could continuously set pending and
    hand over the lock amongst themselves, leading to starvation. Whilst
    this would probably resolve in practice, it means that it is not
    possible to prove liveness properties about the lock and means that lock
    acquisition time is unbounded.
    
    Rather than removing the pending->locked spinning from the slowpath
    altogether (which has been shown to heavily penalise a 2-threaded
    locking stress test on x86), this patch replaces the explicit spinning
    with a call to atomic_cond_read_relaxed and allows the architecture to
    provide a bound on the number of spins. For architectures that can
    respond to changes in cacheline state in their smp_cond_load implementation,
    it should be sufficient to use the default bound of 1.
    
    Suggested-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: boqun.feng@gmail.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: paulmck@linux.vnet.ibm.com
    Link: http://lkml.kernel.org/r/1524738868-31318-4-git-send-email-will.deacon@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13f14c36323d71e2178d7d97dc65808c0e5c872e
Author: Will Deacon <will@kernel.org>
Date:   Tue Dec 18 18:13:52 2018 +0100

    locking/qspinlock: Ensure node is initialised before updating prev->next
    
    commit 95bcade33a8af38755c9b0636e36a36ad3789fe6 upstream.
    
    When a locker ends up queuing on the qspinlock locking slowpath, we
    initialise the relevant mcs node and publish it indirectly by updating
    the tail portion of the lock word using xchg_tail. If we find that there
    was a pre-existing locker in the queue, we subsequently update their
    ->next field to point at our node so that we are notified when it's our
    turn to take the lock.
    
    This can be roughly illustrated as follows:
    
      /* Initialise the fields in node and encode a pointer to node in tail */
      tail = initialise_node(node);
    
      /*
       * Exchange tail into the lockword using an atomic read-modify-write
       * operation with release semantics
       */
      old = xchg_tail(lock, tail);
    
      /* If there was a pre-existing waiter ... */
      if (old & _Q_TAIL_MASK) {
            prev = decode_tail(old);
            smp_read_barrier_depends();
    
            /* ... then update their ->next field to point to node.
            WRITE_ONCE(prev->next, node);
      }
    
    The conditional update of prev->next therefore relies on the address
    dependency from the result of xchg_tail ensuring order against the
    prior initialisation of node. However, since the release semantics of
    the xchg_tail operation apply only to the write portion of the RmW,
    then this ordering is not guaranteed and it is possible for the CPU
    to return old before the writes to node have been published, consequently
    allowing us to point prev->next to an uninitialised node.
    
    This patch fixes the problem by making the update of prev->next a RELEASE
    operation, which also removes the reliance on dependency ordering.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1518528177-19169-2-git-send-email-will.deacon@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9febd662cee68712aea69012944df00033d2dd8
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Dec 18 18:13:51 2018 +0100

    locking: Remove smp_read_barrier_depends() from queued_spin_lock_slowpath()
    
    commit 548095dea63ffc016d39c35b32c628d033638aca upstream.
    
    Queued spinlocks are not used by DEC Alpha, and furthermore operations
    such as READ_ONCE() and release/relaxed RMW atomics are being changed
    to imply smp_read_barrier_depends().  This commit therefore removes the
    now-redundant smp_read_barrier_depends() from queued_spin_lock_slowpath(),
    and adjusts the comments accordingly.
    
    Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f02ef68bdad39ebf881f64cab027e8696fe57ade
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Wed Dec 5 15:27:19 2018 +0900

    x86/build: Fix compiler support check for CONFIG_RETPOLINE
    
    commit 25896d073d8a0403b07e6dec56f58e6c33678207 upstream.
    
    It is troublesome to add a diagnostic like this to the Makefile
    parse stage because the top-level Makefile could be parsed with
    a stale include/config/auto.conf.
    
    Once you are hit by the error about non-retpoline compiler, the
    compilation still breaks even after disabling CONFIG_RETPOLINE.
    
    The easiest fix is to move this check to the "archprepare" like
    this commit did:
    
      829fe4aa9ac1 ("x86: Allow generating user-space headers without a compiler")
    
    Reported-by: Meelis Roos <mroos@linux.ee>
    Tested-by: Meelis Roos <mroos@linux.ee>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Acked-by: Zhenzhong Duan <zhenzhong.duan@oracle.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Zhenzhong Duan <zhenzhong.duan@oracle.com>
    Fixes: 4cd24de3a098 ("x86/retpoline: Make CONFIG_RETPOLINE depend on compiler support")
    Link: http://lkml.kernel.org/r/1543991239-18476-1-git-send-email-yamada.masahiro@socionext.com
    Link: https://lkml.org/lkml/2018/12/4/206
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Cc: Gi-Oh Kim <gi-oh.kim@cloud.ionos.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8626858b2d873e2528d3099b896459947996247
Author: Junwei Zhang <Jerry.Zhang@amd.com>
Date:   Fri Dec 7 15:15:03 2018 +0800

    drm/amdgpu: update SMC firmware image for polaris10 variants
    
    commit d55d8be0747c96db28a1d08fc24d22ccd9b448ac upstream.
    
    Some new variants require different firmwares.
    
    Signed-off-by: Junwei Zhang <Jerry.Zhang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a20046277e31905a1be1dc159f81668bc871d8c
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Dec 6 08:44:31 2018 +0000

    drm/i915/execlists: Apply a full mb before execution for Braswell
    
    commit cf66b8a0ba142fbd1bf10ac8f3ae92d1b0cb7b8f upstream.
    
    Braswell is really picky about having our writes posted to memory before
    we execute or else the GPU may see stale values. A wmb() is insufficient
    as it only ensures the writes are visible to other cores, we need a full
    mb() to ensure the writes are in memory and visible to the GPU.
    
    The most frequent failure in flushing before execution is that we see
    stale PTE values and execute the wrong pages.
    
    References: 987abd5c62f9 ("drm/i915/execlists: Force write serialisation into context image vs execution")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181206084431.9805-3-chris@chris-wilson.co.uk
    (cherry picked from commit 490b8c65b9db45896769e1095e78725775f47b3e)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b1bdb94166862ac57b5a1f39d8e293265326e58
Author: Brian Norris <briannorris@chromium.org>
Date:   Wed Dec 5 10:16:57 2018 -0800

    Revert "drm/rockchip: Allow driver to be shutdown on reboot/kexec"
    
    commit 63238173b2faf3d6b85a416f1c69af6c7be2413f upstream.
    
    This reverts commit 7f3ef5dedb146e3d5063b6845781ad1bb59b92b5.
    
    It causes new warnings [1] on shutdown when running the Google Kevin or
    Scarlet (RK3399) boards under Chrome OS. Presumably our usage of DRM is
    different than what Marc and Heiko test.
    
    We're looking at a different approach (e.g., [2]) to replace this, but
    IMO the revert should be taken first, as it already propagated to
    -stable.
    
    [1] Report here:
    http://lkml.kernel.org/lkml/20181205030127.GA200921@google.com
    
    WARNING: CPU: 4 PID: 2035 at drivers/gpu/drm/drm_mode_config.c:477 drm_mode_config_cleanup+0x1c4/0x294
    ...
     Call trace:
      drm_mode_config_cleanup+0x1c4/0x294
      rockchip_drm_unbind+0x4c/0x8c
      component_master_del+0x88/0xb8
      rockchip_drm_platform_remove+0x2c/0x44
      rockchip_drm_platform_shutdown+0x20/0x2c
      platform_drv_shutdown+0x2c/0x38
      device_shutdown+0x164/0x1b8
      kernel_restart_prepare+0x40/0x48
      kernel_restart+0x20/0x68
    ...
     Memory manager not clean during takedown.
     WARNING: CPU: 4 PID: 2035 at drivers/gpu/drm/drm_mm.c:950 drm_mm_takedown+0x34/0x44
    ...
      drm_mm_takedown+0x34/0x44
      rockchip_drm_unbind+0x64/0x8c
      component_master_del+0x88/0xb8
      rockchip_drm_platform_remove+0x2c/0x44
      rockchip_drm_platform_shutdown+0x20/0x2c
      platform_drv_shutdown+0x2c/0x38
      device_shutdown+0x164/0x1b8
      kernel_restart_prepare+0x40/0x48
      kernel_restart+0x20/0x68
    ...
    
    [2] https://patchwork.kernel.org/patch/10556151/
        https://www.spinics.net/lists/linux-rockchip/msg21342.html
        [PATCH] drm/rockchip: shutdown drm subsystem on shutdown
    
    Fixes: 7f3ef5dedb14 ("drm/rockchip: Allow driver to be shutdown on reboot/kexec")
    Cc: Jeffy Chen <jeffy.chen@rock-chips.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Vicente Bergas <vicencb@gmail.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Heiko Stuebner <heiko@sntech.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181205181657.177703-1-briannorris@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0a954cbfbd09c9106192f880dbe52bf448f11a8
Author: Lyude Paul <lyude@redhat.com>
Date:   Tue Dec 11 18:56:20 2018 -0500

    drm/nouveau/kms: Fix memory leak in nv50_mstm_del()
    
    commit 24199c5436f267399afed0c4f1f57663c0408f57 upstream.
    
    Noticed this while working on redoing the reference counting scheme in
    the DP MST helpers. Nouveau doesn't attempt to call
    drm_dp_mst_topology_mgr_destroy() at all, which leaves it leaking all of
    the resources for drm_dp_mst_topology_mgr and it's children mstbs+ports.
    
    Fixes: f479c0ba4a17 ("drm/nouveau/kms/nv50: initial support for DP 1.2 multi-stream")
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e89aa818353bccf626c317f0dee0d1cd7cdc6772
Author: Radu Rendec <radu.rendec@gmail.com>
Date:   Tue Nov 27 22:20:48 2018 -0500

    powerpc/msi: Fix NULL pointer access in teardown code
    
    commit 78e7b15e17ac175e7eed9e21c6f92d03d3b0a6fa upstream.
    
    The arch_teardown_msi_irqs() function assumes that controller ops
    pointers were already checked in arch_setup_msi_irqs(), but this
    assumption is wrong: arch_teardown_msi_irqs() can be called even when
    arch_setup_msi_irqs() returns an error (-ENOSYS).
    
    This can happen in the following scenario:
      - msi_capability_init() calls pci_msi_setup_msi_irqs()
      - pci_msi_setup_msi_irqs() returns -ENOSYS
      - msi_capability_init() notices the error and calls free_msi_irqs()
      - free_msi_irqs() calls pci_msi_teardown_msi_irqs()
    
    This is easier to see when CONFIG_PCI_MSI_IRQ_DOMAIN is not set and
    pci_msi_setup_msi_irqs() and pci_msi_teardown_msi_irqs() are just
    aliases to arch_setup_msi_irqs() and arch_teardown_msi_irqs().
    
    The call to free_msi_irqs() upon pci_msi_setup_msi_irqs() failure
    seems legit, as it does additional cleanup; e.g.
    list_del(&entry->list) and kfree(entry) inside free_msi_irqs() do
    happen (MSI descriptors are allocated before pci_msi_setup_msi_irqs()
    is called and need to be cleaned up if that fails).
    
    Fixes: 6b2fd7efeb88 ("PCI/MSI/PPC: Remove arch_msi_check_device()")
    Cc: stable@vger.kernel.org # v3.18+
    Signed-off-by: Radu Rendec <radu.rendec@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a28d5f3d9c08a160801754804490dbac4ef9e2e1
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Dec 10 23:58:01 2018 -0500

    tracing: Fix memory leak of instance function hash filters
    
    commit 2840f84f74035e5a535959d5f17269c69fa6edc5 upstream.
    
    The following commands will cause a memory leak:
    
     # cd /sys/kernel/tracing
     # mkdir instances/foo
     # echo schedule > instance/foo/set_ftrace_filter
     # rmdir instances/foo
    
    The reason is that the hashes that hold the filters to set_ftrace_filter and
    set_ftrace_notrace are not freed if they contain any data on the instance
    and the instance is removed.
    
    Found by kmemleak detector.
    
    Cc: stable@vger.kernel.org
    Fixes: 591dffdade9f ("ftrace: Allow for function tracing instance to filter functions")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2e08ad9d4cb0d2c6776ff0a73903084ddc7588b
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Sun Dec 9 21:17:30 2018 -0500

    tracing: Fix memory leak in set_trigger_filter()
    
    commit 3cec638b3d793b7cacdec5b8072364b41caeb0e1 upstream.
    
    When create_event_filter() fails in set_trigger_filter(), the filter may
    still be allocated and needs to be freed. The caller expects the
    data->filter to be updated with the new filter, even if the new filter
    failed (we could add an error message by setting set_str parameter of
    create_event_filter(), but that's another update).
    
    But because the error would just exit, filter was left hanging and
    nothing could free it.
    
    Found by kmemleak detector.
    
    Cc: stable@vger.kernel.org
    Fixes: bac5fb97a173a ("tracing: Add and use generic set_trigger_filter() implementation")
    Reviewed-by: Tom Zanussi <tom.zanussi@linux.intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d17cc664f1ebc528b11a8db74c5b84910bf4ab14
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Nov 9 11:56:03 2018 -0500

    dm cache metadata: verify cache has blocks in blocks_are_clean_separate_dirty()
    
    commit 687cf4412a343a63928a5c9d91bdc0f522939d43 upstream.
    
    Otherwise dm_bitset_cursor_begin() return -ENODATA.  Other calls to
    dm_bitset_cursor_begin() have similar negative checks.
    
    Fixes inability to create a cache in passthrough mode (even though doing
    so makes no sense).
    
    Fixes: 0d963b6e65 ("dm cache metadata: fix metadata2 format's blocks_are_clean_separate_dirty")
    Cc: stable@vger.kernel.org
    Reported-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd5d8a9203ed16bfb16a03c570fb4cf7e7899125
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Tue Dec 11 13:31:40 2018 -0500

    dm thin: send event about thin-pool state change _after_ making it
    
    commit f6c367585d0d851349d3a9e607c43e5bea993fa1 upstream.
    
    Sending a DM event before a thin-pool state change is about to happen is
    a bug.  It wasn't realized until it became clear that userspace response
    to the event raced with the actual state change that the event was
    meant to notify about.
    
    Fix this by first updating internal thin-pool state to reflect what the
    DM event is being issued about.  This fixes a long-standing racey/buggy
    userspace device-mapper-test-suite 'resize_io' test that would get an
    event but not find the state it was looking for -- so it would just go
    on to hang because no other events caused the test to reevaluate the
    thin-pool's state.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 529571392b7a3efb91d12d70551ece5c0e60ece6
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Dec 2 12:12:24 2018 +0100

    ARM: mmp/mmp2: fix cpu_is_mmp2() on mmp2-dt
    
    commit 76f4e2c3b6a560cdd7a75b87df543e04d05a9e5f upstream.
    
    cpu_is_mmp2() was equivalent to cpu_is_pj4(), wouldn't be correct for
    multiplatform kernels. Fix it by also considering mmp_chip_id, as is
    done for cpu_is_pxa168() and cpu_is_pxa910() above.
    
    Moreover, it is only available with CONFIG_CPU_MMP2 and thus doesn't work
    on DT-based MMP2 machines. Enable it on CONFIG_MACH_MMP2_DT too.
    
    Note: CONFIG_CPU_MMP2 is only used for machines that use board files
    instead of DT. It should perhaps be renamed. I'm not doing it now, because
    I don't have a better idea.
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1149b873482a1f2a85659692376103e7d052dde
Author: Chad Austin <chadaustin@fb.com>
Date:   Mon Dec 10 10:54:52 2018 -0800

    fuse: continue to send FUSE_RELEASEDIR when FUSE_OPEN returns ENOSYS
    
    commit 2e64ff154ce6ce9a8dc0f9556463916efa6ff460 upstream.
    
    When FUSE_OPEN returns ENOSYS, the no_open bit is set on the connection.
    
    Because the FUSE_RELEASE and FUSE_RELEASEDIR paths share code, this
    incorrectly caused the FUSE_RELEASEDIR request to be dropped and never sent
    to userspace.
    
    Pass an isdir bool to distinguish between FUSE_RELEASE and FUSE_RELEASEDIR
    inside of fuse_file_put.
    
    Fixes: 7678ac50615d ("fuse: support clients that don't implement 'open'")
    Cc: <stable@vger.kernel.org> # v3.14
    Signed-off-by: Chad Austin <chadaustin@fb.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38ef9c5a931163eb8abf8f1c654d1b13de26f792
Author: Alek Du <alek.du@intel.com>
Date:   Thu Dec 6 17:24:59 2018 +0800

    mmc: sdhci: fix the timeout check window for clock and reset
    
    commit b704441e38f645dcfba1348ca3cc1ba43d1a9f31 upstream.
    
    We observed some premature timeouts on a virtualization platform, the log
    is like this:
    
    case 1:
    [159525.255629] mmc1: Internal clock never stabilised.
    [159525.255818] mmc1: sdhci: ============ SDHCI REGISTER DUMP ===========
    [159525.256049] mmc1: sdhci: Sys addr:  0x00000000 | Version:  0x00001002
    ...
    [159525.257205] mmc1: sdhci: Wake-up:   0x00000000 | Clock:    0x0000fa03
    From the clock control register dump, we are pretty sure the clock was
    stablized.
    
    case 2:
    [  914.550127] mmc1: Reset 0x2 never completed.
    [  914.550321] mmc1: sdhci: ============ SDHCI REGISTER DUMP ===========
    [  914.550608] mmc1: sdhci: Sys addr:  0x00000010 | Version:  0x00001002
    
    After checking the sdhci code, we found the timeout check actually has a
    little window that the CPU can be scheduled out and when it comes back,
    the original time set or check is not valid.
    
    Fixes: 5a436cc0af62 ("mmc: sdhci: Optimize delay loops")
    Cc: stable@vger.kernel.org      # v4.12+
    Signed-off-by: Alek Du <alek.du@intel.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30d358d804dacc04c095a95ba8584fabca155e83
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Tue Nov 20 01:14:00 2018 +0200

    MMC: OMAP: fix broken MMC on OMAP15XX/OMAP5910/OMAP310
    
    commit e8cde625bfe8a714a856e1366bcbb259d7346095 upstream.
    
    Since v2.6.22 or so there has been reports [1] about OMAP MMC being
    broken on OMAP15XX based hardware (OMAP5910 and OMAP310). The breakage
    seems to have been caused by commit 46a6730e3ff9 ("mmc-omap: Fix
    omap to use MMC_POWER_ON") that changed clock enabling to be done
    on MMC_POWER_ON. This can happen multiple times in a row, and on 15XX
    the hardware doesn't seem to like it and the MMC just stops responding.
    Fix by memorizing the power mode and do the init only when necessary.
    
    Before the patch (on Palm TE):
    
            mmc0: new SD card at address b368
            mmcblk0: mmc0:b368 SDC   977 MiB
            mmci-omap mmci-omap.0: command timeout (CMD18)
            mmci-omap mmci-omap.0: command timeout (CMD13)
            mmci-omap mmci-omap.0: command timeout (CMD13)
            mmci-omap mmci-omap.0: command timeout (CMD12) [x 6]
            mmci-omap mmci-omap.0: command timeout (CMD13) [x 6]
            mmcblk0: error -110 requesting status
            mmci-omap mmci-omap.0: command timeout (CMD8)
            mmci-omap mmci-omap.0: command timeout (CMD18)
            mmci-omap mmci-omap.0: command timeout (CMD13)
            mmci-omap mmci-omap.0: command timeout (CMD13)
            mmci-omap mmci-omap.0: command timeout (CMD12) [x 6]
            mmci-omap mmci-omap.0: command timeout (CMD13) [x 6]
            mmcblk0: error -110 requesting status
            mmcblk0: recovery failed!
            print_req_error: I/O error, dev mmcblk0, sector 0
            Buffer I/O error on dev mmcblk0, logical block 0, async page read
             mmcblk0: unable to read partition table
    
    After the patch:
    
            mmc0: new SD card at address b368
            mmcblk0: mmc0:b368 SDC   977 MiB
             mmcblk0: p1
    
    The patch is based on a fix and analysis done by Ladislav Michl.
    
    Tested on OMAP15XX/OMAP310 (Palm TE), OMAP1710 (Nokia 770)
    and OMAP2420 (Nokia N810).
    
    [1] https://marc.info/?t=123175197000003&r=1&w=2
    
    Fixes: 46a6730e3ff9 ("mmc-omap: Fix omap to use MMC_POWER_ON")
    Reported-by: Ladislav Michl <ladis@linux-mips.org>
    Reported-by: Andrzej Zaborowski <balrogg@gmail.com>
    Tested-by: Ladislav Michl <ladis@linux-mips.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87d143de94e24bc209b10750b1937d7b5b9ee648
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Mon Dec 10 19:33:31 2018 +0000

    arm64: dma-mapping: Fix FORCE_CONTIGUOUS buffer clearing
    
    commit 3238c359acee4ab57f15abb5a82b8ab38a661ee7 upstream.
    
    We need to invalidate the caches *before* clearing the buffer via the
    non-cacheable alias, else in the worst case __dma_flush_area() may
    write back dirty lines over the top of our nice new zeros.
    
    Fixes: dd65a941f6ba ("arm64: dma-mapping: clear buffers allocated with FORCE_CONTIGUOUS flag")
    Cc: <stable@vger.kernel.org> # 4.18.x-
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b99eaefb6850b38abdd8a2029bbfde08170ec6c9
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Fri Dec 14 14:17:17 2018 -0800

    userfaultfd: check VM_MAYWRITE was set after verifying the uffd is registered
    
    commit 01e881f5a1fca4677e82733061868c6d6ea05ca7 upstream.
    
    Calling UFFDIO_UNREGISTER on virtual ranges not yet registered in uffd
    could trigger an harmless false positive WARN_ON.  Check the vma is
    already registered before checking VM_MAYWRITE to shut off the false
    positive warning.
    
    Link: http://lkml.kernel.org/r/20181206212028.18726-2-aarcange@redhat.com
    Cc: <stable@vger.kernel.org>
    Fixes: 29ec90660d68 ("userfaultfd: shmem/hugetlbfs: only allow to register VM_MAYWRITE vmas")
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-by: syzbot+06c7092e7d71218a2c16@syzkaller.appspotmail.com
    Acked-by: Mike Rapoport <rppt@linux.ibm.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Acked-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f4610fe2ed4351b45c0d82b3246f18b886d26f9
Author: Jeff Moyer <jmoyer@redhat.com>
Date:   Tue Dec 11 12:37:49 2018 -0500

    aio: fix spectre gadget in lookup_ioctx
    
    commit a538e3ff9dabcdf6c3f477a373c629213d1c3066 upstream.
    
    Matthew pointed out that the ioctx_table is susceptible to spectre v1,
    because the index can be controlled by an attacker.  The below patch
    should mitigate the attack for all of the aio system calls.
    
    Cc: stable@vger.kernel.org
    Reported-by: Matthew Wilcox <willy@infradead.org>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ff0bcb2cb31602dd347b216f5f70851102d5067
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Tue Dec 4 17:04:57 2018 +0800

    pinctrl: sunxi: a83t: Fix IRQ offset typo for PH11
    
    commit 478b6767ad26ab86d9ecc341027dd09a87b1f997 upstream.
    
    Pin PH11 is used on various A83T board to detect a change in the OTG
    port's ID pin, as in when an OTG host cable is plugged in.
    
    The incorrect offset meant the gpiochip/irqchip was activating the wrong
    pin for interrupts.
    
    Fixes: 4730f33f0d82 ("pinctrl: sunxi: add allwinner A83T PIO controller support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30c64b5a4f2b88de1c69fcc556eb4a1238ad5ac3
Author: Ingo Molnar <mingo@kernel.org>
Date:   Mon Nov 13 07:15:41 2017 +0100

    timer/debug: Change /proc/timer_list from 0444 to 0400
    
    [ Upstream commit 8e7df2b5b7f245c9bd11064712db5cb69044a362 ]
    
    While it uses %pK, there's still few reasons to read this file
    as non-root.
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
