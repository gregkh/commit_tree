commit 4f68020fef1c6cf1b680ffb6481ac41379283ea3
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed May 27 16:43:13 2020 +0200

    Linux 4.14.182

commit 80592fb838c87dc44a9b35cb5f894c8213d99c60
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Thu Apr 30 11:28:45 2020 +0200

    iio: adc: stm32-adc: fix device used to request dma
    
    [ Upstream commit 52cd91c27f3908b88e8b25aed4a4d20660abcc45 ]
    
    DMA channel request should use device struct from platform device struct.
    Currently it's using iio device struct. But at this stage when probing,
    device struct isn't yet registered (e.g. device_register is done in
    iio_device_register). Since commit 71723a96b8b1 ("dmaengine: Create
    symlinks between DMA channels and slaves"), a warning message is printed
    as the links in sysfs can't be created, due to device isn't yet registered:
    - Cannot create DMA slave symlink
    - Cannot create DMA dma:rx symlink
    
    Fix this by using device struct from platform device to request dma chan.
    
    Fixes: 2763ea0585c99 ("iio: adc: stm32: add optional dma support")
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce2c6af1806f81238adada07b867a14d0b7fd315
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Jan 8 10:08:01 2020 +0200

    iio: adc: stm32-adc: Use dma_request_chan() instead dma_request_slave_channel()
    
    [ Upstream commit 735404b846dffcb320264f62b76e6f70012214dd ]
    
    dma_request_slave_channel() is a wrapper on top of dma_request_chan()
    eating up the error code.
    
    By using dma_request_chan() directly the driver can support deferred
    probing against DMA.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Acked-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18b7ea5dc2397fc31dd0dee35d320bbca351bfb1
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Fri May 22 08:54:35 2020 -0500

    x86/unwind/orc: Fix unwind_get_return_address_ptr() for inactive tasks
    
    commit 187b96db5ca79423618dfa29a05c438c34f9e1f0 upstream.
    
    Normally, show_trace_log_lvl() scans the stack, looking for text
    addresses to print.  In parallel, it unwinds the stack with
    unwind_next_frame().  If the stack address matches the pointer returned
    by unwind_get_return_address_ptr() for the current frame, the text
    address is printed normally without a question mark.  Otherwise it's
    considered a breadcrumb (potentially from a previous call path) and it's
    printed with a question mark to indicate that the address is unreliable
    and typically can be ignored.
    
    Since the following commit:
    
      f1d9a2abff66 ("x86/unwind/orc: Don't skip the first frame for inactive tasks")
    
    ... for inactive tasks, show_trace_log_lvl() prints *only* unreliable
    addresses (prepended with '?').
    
    That happens because, for the first frame of an inactive task,
    unwind_get_return_address_ptr() returns the wrong return address
    pointer: one word *below* the task stack pointer.  show_trace_log_lvl()
    starts scanning at the stack pointer itself, so it never finds the first
    'reliable' address, causing only guesses to being printed.
    
    The first frame of an inactive task isn't a normal stack frame.  It's
    actually just an instance of 'struct inactive_task_frame' which is left
    behind by __switch_to_asm().  Now that this inactive frame is actually
    exposed to callers, fix unwind_get_return_address_ptr() to interpret it
    properly.
    
    Fixes: f1d9a2abff66 ("x86/unwind/orc: Don't skip the first frame for inactive tasks")
    Reported-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200522135435.vbxs7umku5pyrdbk@treble
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cb6b5c57e787803a20ef366a1d2b38e0b6ac092
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Fri May 22 13:45:18 2020 -0500

    rxrpc: Fix a memory leak in rxkad_verify_response()
    
    commit f45d01f4f30b53c3a0a1c6c1c154acb7ff74ab9f upstream.
    
    A ticket was not released after a call of the function
    "rxkad_decrypt_ticket" failed. Thus replace the jump target
    "temporary_error_free_resp" by "temporary_error_free_ticket".
    
    Fixes: 8c2f826dc3631 ("rxrpc: Don't put crypto buffers on the stack")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Markus Elfring <Markus.Elfring@web.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 734bdc903d8493852a46eddb716143c487b2288c
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Fri May 22 22:22:48 2020 -0700

    rapidio: fix an error in get_user_pages_fast() error handling
    
    commit ffca476a0a8d26de767cc41d62b8ca7f540ecfdd upstream.
    
    In the case of get_user_pages_fast() returning fewer pages than
    requested, rio_dma_transfer() does not quite do the right thing.  It
    attempts to release all the pages that were requested, rather than just
    the pages that were pinned.
    
    Fix the error handling so that only the pages that were successfully
    pinned are released.
    
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200517235620.205225-2-jhubbard@nvidia.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53cf128d4acd3bc2b9a054317605aff7a145a426
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Wed May 13 01:31:40 2020 +0300

    mei: release me_cl object reference
    
    commit fc9c03ce30f79b71807961bfcb42be191af79873 upstream.
    
    Allow me_cl object to be freed by releasing the reference
    that was acquired  by one of the search functions:
    __mei_me_cl_by_uuid_id() or __mei_me_cl_by_uuid()
    
    Cc: <stable@vger.kernel.org>
    Reported-by: 亿一 <teroincn@gmail.com>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20200512223140.32186-1-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d41008b96fb2c1e91aa7ce47c1ec381c5ad06e16
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Apr 26 21:44:03 2020 +0200

    iio: dac: vf610: Fix an error handling path in 'vf610_dac_probe()'
    
    commit aad4742fbf0a560c25827adb58695a4497ffc204 upstream.
    
    A call to 'vf610_dac_exit()' is missing in an error handling path.
    
    Fixes: 1b983bf42fad ("iio: dac: vf610_dac: Add IIO DAC driver for Vybrid SoC")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a33d6c4a48554836ca2167439baeb60d8f37c89b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed May 6 05:52:06 2020 +0200

    iio: sca3000: Remove an erroneous 'get_device()'
    
    commit 928edefbc18cd8433f7df235c6e09a9306e7d580 upstream.
    
    This looks really unusual to have a 'get_device()' hidden in a 'dev_err()'
    call.
    Remove it.
    
    While at it add a missing \n at the end of the message.
    
    Fixes: 574fb258d636 ("Staging: IIO: VTI sca3000 series accelerometer driver (spi)")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da479c74790b8b8be88c84503593bb07105869fe
Author: Oscar Carter <oscar.carter@gmx.com>
Date:   Sun May 10 12:14:26 2020 +0200

    staging: greybus: Fix uninitialized scalar variable
    
    commit 34625c1931f8204c234c532b446b9f53c69f4b68 upstream.
    
    In the "gb_tty_set_termios" function the "newline" variable is declared
    but not initialized. So the "flow_control" member is not initialized and
    the OR / AND operations with itself results in an undefined value in
    this member.
    
    The purpose of the code is to set the flow control type, so remove the
    OR / AND self operator and set the value directly.
    
    Addresses-Coverity-ID: 1374016 ("Uninitialized scalar variable")
    Fixes: e55c25206d5c9 ("greybus: uart: Handle CRTSCTS flag in termios")
    Signed-off-by: Oscar Carter <oscar.carter@gmx.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200510101426.23631-1-oscar.carter@gmx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03e79b6c34e698da9c17da95f2db76e6a2f2578c
Author: Dragos Bogdan <dragos.bogdan@analog.com>
Date:   Wed Apr 29 10:21:29 2020 +0300

    staging: iio: ad2s1210: Fix SPI reading
    
    commit 5e4f99a6b788047b0b8a7496c2e0c8f372f6edf2 upstream.
    
    If the serial interface is used, the 8-bit address should be latched using
    the rising edge of the WR/FSYNC signal.
    
    This basically means that a CS change is required between the first byte
    sent, and the second one.
    This change splits the single-transfer transfer of 2 bytes into 2 transfers
    with a single byte, and CS change in-between.
    
    Note fixes tag is not accurate, but reflects a point beyond which there
    are too many refactors to make backporting straight forward.
    
    Fixes: b19e9ad5e2cb ("staging:iio:resolver:ad2s1210 general driver cleanup.")
    Signed-off-by: Dragos Bogdan <dragos.bogdan@analog.com>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33448dc95224b861f2478d42f5bf83c1a695f09e
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri May 8 15:01:25 2020 -0500

    Revert "gfs2: Don't demote a glock until its revokes are written"
    
    [ Upstream commit b14c94908b1b884276a6608dea3d0b1b510338b7 ]
    
    This reverts commit df5db5f9ee112e76b5202fbc331f990a0fc316d6.
    
    This patch fixes a regression: patch df5db5f9ee112 allowed function
    run_queue() to bypass its call to do_xmote() if revokes were queued for
    the glock. That's wrong because its call to do_xmote() is what is
    responsible for calling the go_sync() glops functions to sync both
    the ail list and any revokes queued for it. By bypassing the call,
    gfs2 could get into a stand-off where the glock could not be demoted
    until its revokes are written back, but the revokes would not be
    written back because do_xmote() was never called.
    
    It "sort of" works, however, because there are other mechanisms like
    the log flush daemon (logd) that can sync the ail items and revokes,
    if it deems it necessary. The problem is: without file system pressure,
    it might never deem it necessary.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eebc4b6578b5615a13e30ff6f807d2488589b5b7
Author: Arjun Vynipadath <arjun@chelsio.com>
Date:   Tue Nov 20 12:11:39 2018 +0530

    cxgb4/cxgb4vf: Fix mac_hlist initialization and free
    
    [ Upstream commit b539ea60f5043b9acd7562f04fa2117f18776cbb ]
    
    Null pointer dereference seen when cxgb4vf driver is unloaded
    without bringing up any interfaces, moving mac_hlist initialization
    to driver probe and free the mac_hlist in remove to fix the issue.
    
    Fixes: 24357e06ba51 ("cxgb4vf: fix memleak in mac_hlist initialization")
    Signed-off-by: Arjun Vynipadath <arjun@chelsio.com>
    Signed-off-by: Casey Leedom <leedom@chelsio.com>
    Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c1a6cea504bee7c0bf05101a585490f5251946a
Author: Arjun Vynipadath <arjun@chelsio.com>
Date:   Fri Nov 9 14:50:25 2018 +0530

    cxgb4: free mac_hlist properly
    
    [ Upstream commit 2a8d84bf513823ba398f4b2dec41b8decf4041af ]
    
    The locally maintained list for tracking hash mac table was
    not freed during driver remove.
    
    Signed-off-by: Arjun Vynipadath <arjun@chelsio.com>
    Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52fa232860f5f4fb990eebf9f7f44615585bf9f2
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Oct 24 10:09:16 2019 -0300

    media: fdp1: Fix R-Car M3-N naming in debug message
    
    [ Upstream commit c05b9d7b9f3ece2831e4e4829f10e904df296df8 ]
    
    The official name is "R-Car M3-N", not "R-Car M3N".
    
    Fixes: 4e8c120de9268fc2 ("media: fdp1: Support M3N and E3 platforms")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf87f274fe9fa0e81b0708782e924faefe637e05
Author: Vishal Verma <vishal.l.verma@intel.com>
Date:   Wed Feb 27 17:06:27 2019 -0700

    libnvdimm/btt: Fix LBA masking during 'free list' population
    
    [ Upstream commit 9dedc73a4658ebcc0c9b58c3cb84e9ac80122213 ]
    
    The Linux BTT implementation assumes that log entries will never have
    the 'zero' flag set, and indeed it never sets that flag for log entries
    itself.
    
    However, the UEFI spec is ambiguous on the exact format of the LBA field
    of a log entry, specifically as to whether it should include the
    additional flag bits or not. While a zero bit doesn't make sense in the
    context of a log entry, other BTT implementations might still have it set.
    
    If an implementation does happen to have it set, we would happily read
    it in as the next block to write to for writes. Since a high bit is set,
    it pushes the block number out of the range of an 'arena', and we fail
    such a write with an EIO.
    
    Follow the robustness principle, and tolerate such implementations by
    stripping out the zero flag when populating the free list during
    initialization. Additionally, use the same stripped out entries for
    detection of incomplete writes and map restoration that happens at this
    stage.
    
    Add a sysfs file 'log_zero_flags' that indicates the ability to accept
    such a layout to userspace applications. This enables 'ndctl
    check-namespace' to recognize whether the kernel is able to handle zero
    flags, or whether it should attempt a fix-up under the --repair option.
    
    Cc: Dan Williams <dan.j.williams@intel.com>
    Reported-by: Dexuan Cui <decui@microsoft.com>
    Reported-by: Pedro d'Aquino Filocre F S Barbuda <pbarbuda@microsoft.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7aac0bb409db425a848ce74f8f5c09a777d9fe0
Author: Vishal Verma <vishal.l.verma@intel.com>
Date:   Wed Feb 27 17:06:26 2019 -0700

    libnvdimm/btt: Remove unnecessary code in btt_freelist_init
    
    [ Upstream commit 2f8c9011151337d0bc106693f272f9bddbccfab2 ]
    
    We call btt_log_read() twice, once to get the 'old' log entry, and again
    to get the 'new' entry. However, we have no use for the 'old' entry, so
    remove it.
    
    Cc: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d1c6c0b67c3846a6ed2804c9f6732af21a45925
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Aug 2 21:48:58 2019 -0700

    ubsan: build ubsan.c more conservatively
    
    commit af700eaed0564d5d3963a7a51cb0843629d7fe3d upstream.
    
    objtool points out several conditions that it does not like, depending
    on the combination with other configuration options and compiler
    variants:
    
    stack protector:
      lib/ubsan.o: warning: objtool: __ubsan_handle_type_mismatch()+0xbf: call to __stack_chk_fail() with UACCESS enabled
      lib/ubsan.o: warning: objtool: __ubsan_handle_type_mismatch_v1()+0xbe: call to __stack_chk_fail() with UACCESS enabled
    
    stackleak plugin:
      lib/ubsan.o: warning: objtool: __ubsan_handle_type_mismatch()+0x4a: call to stackleak_track_stack() with UACCESS enabled
      lib/ubsan.o: warning: objtool: __ubsan_handle_type_mismatch_v1()+0x4a: call to stackleak_track_stack() with UACCESS enabled
    
    kasan:
      lib/ubsan.o: warning: objtool: __ubsan_handle_type_mismatch()+0x25: call to memcpy() with UACCESS enabled
      lib/ubsan.o: warning: objtool: __ubsan_handle_type_mismatch_v1()+0x25: call to memcpy() with UACCESS enabled
    
    The stackleak and kasan options just need to be disabled for this file
    as we do for other files already.  For the stack protector, we already
    attempt to disable it, but this fails on clang because the check is
    mixed with the gcc specific -fno-conserve-stack option.  According to
    Andrey Ryabinin, that option is not even needed, dropping it here fixes
    the stackprotector issue.
    
    Link: http://lkml.kernel.org/r/20190722125139.1335385-1-arnd@arndb.de
    Link: https://lore.kernel.org/lkml/20190617123109.667090-1-arnd@arndb.de/t/
    Link: https://lore.kernel.org/lkml/20190722091050.2188664-1-arnd@arndb.de/t/
    Fixes: d08965a27e84 ("x86/uaccess, ubsan: Fix UBSAN vs. SMAP")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e02c76f45cac17e86f34058f175d227ae88a1839
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Apr 3 09:40:16 2019 +0200

    x86/uaccess, ubsan: Fix UBSAN vs. SMAP
    
    commit d08965a27e84ca090b504844d50c24fc98587b11 upstream.
    
    UBSAN can insert extra code in random locations; including AC=1
    sections. Typically this code is not safe and needs wrapping.
    
    So far, only __ubsan_handle_type_mismatch* have been observed in AC=1
    sections and therefore only those are annotated.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    [stable backport: only take the lib/Makefile change to resolve gcc-10
     build issues]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7b28593c20c7469b20b55b87998fe797c0ee5a9
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed May 20 23:36:05 2020 +1000

    powerpc/64s: Disable STRICT_KERNEL_RWX
    
    [ Upstream commit 8659a0e0efdd975c73355dbc033f79ba3b31e82c ]
    
    Several strange crashes have been eventually traced back to
    STRICT_KERNEL_RWX and its interaction with code patching.
    
    Various paths in our ftrace, kprobes and other patching code need to
    be hardened against patching failures, otherwise we can end up running
    with partially/incorrectly patched ftrace paths, kprobes or jump
    labels, which can then cause strange crashes.
    
    Although fixes for those are in development, they're not -rc material.
    
    There also seem to be problems with the underlying strict RWX logic,
    which needs further debugging.
    
    So for now disable STRICT_KERNEL_RWX on 64-bit to prevent people from
    enabling the option and tripping over the bugs.
    
    Fixes: 1e0fc9d1eb2b ("powerpc/Kconfig: Enable STRICT_KERNEL_RWX for some configs")
    Cc: stable@vger.kernel.org # v4.13+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200520133605.972649-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9b2cf2d1fba8d645e2fa91abca32b3e8fb271fc
Author: Russell Currey <ruscur@russell.cc>
Date:   Tue Dec 24 17:41:26 2019 +1100

    powerpc: Remove STRICT_KERNEL_RWX incompatibility with RELOCATABLE
    
    [ Upstream commit c55d7b5e64265fdca45c85b639013e770bde2d0e ]
    
    I have tested this with the Radix MMU and everything seems to work, and
    the previous patch for Hash seems to fix everything too.
    STRICT_KERNEL_RWX should still be disabled by default for now.
    
    Please test STRICT_KERNEL_RWX + RELOCATABLE!
    
    Signed-off-by: Russell Currey <ruscur@russell.cc>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191224064126.183670-2-ruscur@russell.cc
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e49fe4c2df6def25fc00db667f854af15d641dab
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Jan 4 16:35:25 2018 +0100

    powerpc: restore alphabetic order in Kconfig
    
    [ Upstream commit 4ec591e51a4b0aedb6c7f1a8cd722aa58d7f61ba ]
    
    This patch restores the alphabetic order which was broken by
    commit 1e0fc9d1eb2b0 ("powerpc/Kconfig: Enable STRICT_KERNEL_RWX
    for some configs")
    
    Fixes: 1e0fc9d1eb2b0 ("powerpc/Kconfig: Enable STRICT_KERNEL_RWX for some configs")
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Acked-by: Balbir Singh <bsingharora@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6321cca1390c5b08c23d0a15c3c3544333c6d206
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat May 16 23:42:05 2020 +0200

    dmaengine: tegra210-adma: Fix an error handling path in 'tegra_adma_probe()'
    
    commit 3a5fd0dbd87853f8bd2ea275a5b3b41d6686e761 upstream.
    
    Commit b53611fb1ce9 ("dmaengine: tegra210-adma: Fix crash during probe")
    has moved some code in the probe function and reordered the error handling
    path accordingly.
    However, a goto has been missed.
    
    Fix it and goto the right label if 'dma_async_device_register()' fails, so
    that all resources are released.
    
    Fixes: b53611fb1ce9 ("dmaengine: tegra210-adma: Fix crash during probe")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/20200516214205.276266-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50229ba3f55da301c0af4d341605e33e535a4c40
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Mon Apr 20 13:35:28 2020 +0800

    apparmor: Fix aa_label refcnt leak in policy_update
    
    commit c6b39f070722ea9963ffe756bfe94e89218c5e63 upstream.
    
    policy_update() invokes begin_current_label_crit_section(), which
    returns a reference of the updated aa_label object to "label" with
    increased refcount.
    
    When policy_update() returns, "label" becomes invalid, so the refcount
    should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling path of
    policy_update(). When aa_may_manage_policy() returns not NULL, the
    refcnt increased by begin_current_label_crit_section() is not decreased,
    causing a refcnt leak.
    
    Fix this issue by jumping to "end_section" label when
    aa_may_manage_policy() returns not NULL.
    
    Fixes: 5ac8c355ae00 ("apparmor: allow introspecting the loaded policy pre internal transform")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d50e6fcf8fb1f7fbde5041416f1bc447ddabbaad
Author: Brent Lu <brent.lu@intel.com>
Date:   Mon May 18 12:30:38 2020 +0800

    ALSA: pcm: fix incorrect hw_base increase
    
    commit e7513c5786f8b33f0c107b3759e433bc6cbb2efa upstream.
    
    There is a corner case that ALSA keeps increasing the hw_ptr but DMA
    already stop working/updating the position for a long time.
    
    In following log we can see the position returned from DMA driver does
    not move at all but the hw_ptr got increased at some point of time so
    snd_pcm_avail() will return a large number which seems to be a buffer
    underrun event from user space program point of view. The program
    thinks there is space in the buffer and fill more data.
    
    [  418.510086] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 4096 avail 12368
    [  418.510149] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 6910 avail 9554
    ...
    [  418.681052] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 15102 avail 1362
    [  418.681130] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 16464 avail 0
    [  418.726515] sound pcmC0D5p: pos 96 hw_ptr 16464 appl_ptr 16464 avail 16368
    
    This is because the hw_base will be increased by runtime->buffer_size
    frames unconditionally if the hw_ptr is not updated for over half of
    buffer time. As the hw_base increases, so does the hw_ptr increased
    by the same number.
    
    The avail value returned from snd_pcm_avail() could exceed the limit
    (buffer_size) easily becase the hw_ptr itself got increased by same
    buffer_size samples when the corner case happens. In following log,
    the buffer_size is 16368 samples but the avail is 21810 samples so
    CRAS server complains about it.
    
    [  418.851755] sound pcmC0D5p: pos 96 hw_ptr 16464 appl_ptr 27390 avail 5442
    [  418.926491] sound pcmC0D5p: pos 96 hw_ptr 32832 appl_ptr 27390 avail 21810
    
    cras_server[1907]: pcm_avail returned frames larger than buf_size:
    sof-glkda7219max: :0,5: 21810 > 16368
    
    By updating runtime->hw_ptr_jiffies each time the HWSYNC is called,
    the hw_base will keep the same when buffer stall happens at long as
    the interval between each HWSYNC call is shorter than half of buffer
    time.
    
    Following is a log captured by a patched kernel. The hw_base/hw_ptr
    value is fixed in this corner case and user space program should be
    aware of the buffer stall and handle it.
    
    [  293.525543] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 4096 avail 12368
    [  293.525606] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 6880 avail 9584
    [  293.525975] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 10976 avail 5488
    [  293.611178] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 15072 avail 1392
    [  293.696429] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 16464 avail 0
    ...
    [  381.139517] sound pcmC0D5p: pos 96 hw_ptr 96 appl_ptr 16464 avail 0
    
    Signed-off-by: Brent Lu <brent.lu@intel.com>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1589776238-23877-1-git-send-email-brent.lu@intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68bbc89c213ad24477c38c7234eaa90bc663ddcc
Author: Scott Bahling <sbahling@suse.com>
Date:   Mon May 18 19:57:28 2020 +0200

    ALSA: iec1712: Initialize STDSP24 properly when using the model=staudio option
    
    commit b0cb099062b0c18246c3a20caaab4c0afc303255 upstream.
    
    The ST Audio ADCIII is an STDSP24 card plus extension box. With commit
    e8a91ae18bdc ("ALSA: ice1712: Add support for STAudio ADCIII") we
    enabled the ADCIII ports using the model=staudio option but forgot
    this part to ensure the STDSP24 card is initialized properly.
    
    Fixes: e8a91ae18bdc ("ALSA: ice1712: Add support for STAudio ADCIII")
    Signed-off-by: Scott Bahling <sbahling@suse.com>
    Cc: <stable@vger.kernel.org>
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1048934
    Link: https://lore.kernel.org/r/20200518175728.28766-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b22a7419cfb5862919388954ef75e749dd9f813
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 27 16:51:52 2017 +0200

    l2tp: initialise PPP sessions before registering them
    
    commit f98be6c6359e7e4a61aaefb9964c1db31cb9ec0c upstream.
    
    pppol2tp_connect() initialises L2TP sessions after they've been exposed
    to the rest of the system by l2tp_session_register(). This puts
    sessions into transient states that are the source of several races, in
    particular with session's deletion path.
    
    This patch centralises the initialisation code into
    pppol2tp_session_init(), which is called before the registration phase.
    The only field that can't be set before session registration is the
    pppol2tp socket pointer, which has already been converted to RCU. So
    pppol2tp_connect() should now be race-free.
    
    The session's .session_close() callback is now set before registration.
    Therefore, it's always called when l2tp_core deletes the session, even
    if it was created by pppol2tp_session_create() and hasn't been plugged
    to a pppol2tp socket yet. That'd prevent session free because the extra
    reference taken by pppol2tp_session_close() wouldn't be dropped by the
    socket's ->sk_destruct() callback (pppol2tp_session_destruct()).
    We could set .session_close() only while connecting a session to its
    pppol2tp socket, or teach pppol2tp_session_close() to avoid grabbing a
    reference when the session isn't connected, but that'd require adding
    some form of synchronisation to be race free.
    
    Instead of that, we can just let the pppol2tp socket hold a reference
    on the session as soon as it starts depending on it (that is, in
    pppol2tp_connect()). Then we don't need to utilise
    pppol2tp_session_close() to hold a reference at the last moment to
    prevent l2tp_core from dropping it.
    
    When releasing the socket, pppol2tp_release() now deletes the session
    using the standard l2tp_session_delete() function, instead of merely
    removing it from hash tables. l2tp_session_delete() drops the reference
    the sessions holds on itself, but also makes sure it doesn't remove a
    session twice. So it can safely be called, even if l2tp_core already
    tried, or is concurrently trying, to remove the session.
    Finally, pppol2tp_session_destruct() drops the reference held by the
    socket.
    
    Fixes: fd558d186df2 ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Giuliano Procida <gprocida@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26f8819ddd10141ebe7bbce700fbab36bfa5f478
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 27 16:51:52 2017 +0200

    l2tp: protect sock pointer of struct pppol2tp_session with RCU
    
    commit ee40fb2e1eb5bc0ddd3f2f83c6e39a454ef5a741 upstream.
    
    pppol2tp_session_create() registers sessions that can't have their
    corresponding socket initialised. This socket has to be created by
    userspace, then connected to the session by pppol2tp_connect().
    Therefore, we need to protect the pppol2tp socket pointer of L2TP
    sessions, so that it can safely be updated when userspace is connecting
    or closing the socket. This will eventually allow pppol2tp_connect()
    to avoid generating transient states while initialising its parts of the
    session.
    
    To this end, this patch protects the pppol2tp socket pointer using RCU.
    
    The pppol2tp socket pointer is still set in pppol2tp_connect(), but
    only once we know the function isn't going to fail. It's eventually
    reset by pppol2tp_release(), which now has to wait for a grace period
    to elapse before it can drop the last reference on the socket. This
    ensures that pppol2tp_session_get_sock() can safely grab a reference
    on the socket, even after ps->sk is reset to NULL but before this
    operation actually gets visible from pppol2tp_session_get_sock().
    
    The rest is standard RCU conversion: pppol2tp_recv(), which already
    runs in atomic context, is simply enclosed by rcu_read_lock() and
    rcu_read_unlock(), while other functions are converted to use
    pppol2tp_session_get_sock() followed by sock_put().
    pppol2tp_session_setsockopt() is a special case. It used to retrieve
    the pppol2tp socket from the L2TP session, which itself was retrieved
    from the pppol2tp socket. Therefore we can just avoid dereferencing
    ps->sk and directly use the original socket pointer instead.
    
    With all users of ps->sk now handling NULL and concurrent updates, the
    L2TP ->ref() and ->deref() callbacks aren't needed anymore. Therefore,
    rather than converting pppol2tp_session_sock_hold() and
    pppol2tp_session_sock_put(), we can just drop them.
    
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Giuliano Procida <gprocida@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39f35fbfb5947675cfbc9384f641f7a7d85d4ec6
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 27 16:51:51 2017 +0200

    l2tp: initialise l2tp_eth sessions before registering them
    
    commit ee28de6bbd78c2e18111a0aef43ea746f28d2073 upstream.
    
    Sessions must be initialised before being made externally visible by
    l2tp_session_register(). Otherwise the session may be concurrently
    deleted before being initialised, which can confuse the deletion path
    and eventually lead to kernel oops.
    
    Therefore, we need to move l2tp_session_register() down in
    l2tp_eth_create(), but also handle the intermediate step where only the
    session or the netdevice has been registered.
    
    We can't just call l2tp_session_register() in ->ndo_init() because
    we'd have no way to properly undo this operation in ->ndo_uninit().
    Instead, let's register the session and the netdevice in two different
    steps and protect the session's device pointer with RCU.
    
    And now that we allow the session's .dev field to be NULL, we don't
    need to prevent the netdevice from being removed anymore. So we can
    drop the dev_hold() and dev_put() calls in l2tp_eth_create() and
    l2tp_eth_dev_uninit().
    
    Fixes: d9e31d17ceba ("l2tp: Add L2TP ethernet pseudowire support")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Giuliano Procida <gprocida@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aef37401b467a0b1a9517c69924a1d66937e0789
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 27 16:51:50 2017 +0200

    l2tp: don't register sessions in l2tp_session_create()
    
    commit 3953ae7b218df4d1e544b98a393666f9ae58a78c upstream.
    
    Sessions created by l2tp_session_create() aren't fully initialised:
    some pseudo-wire specific operations need to be done before making the
    session usable. Therefore the PPP and Ethernet pseudo-wires continue
    working on the returned l2tp session while it's already been exposed to
    the rest of the system.
    This can lead to various issues. In particular, the session may enter
    the deletion process before having been fully initialised, which will
    confuse the session removal code.
    
    This patch moves session registration out of l2tp_session_create(), so
    that callers can control when the session is exposed to the rest of the
    system. This is done by the new l2tp_session_register() function.
    
    Only pppol2tp_session_create() can be easily converted to avoid
    modifying its session after registration (the debug message is dropped
    in order to avoid the need for holding a reference on the session).
    
    For pppol2tp_connect() and l2tp_eth_create()), more work is needed.
    That'll be done in followup patches. For now, let's just register the
    session right after its creation, like it was done before. The only
    difference is that we can easily take a reference on the session before
    registering it, so, at least, we're sure it's not going to be freed
    while we're working on it.
    
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Giuliano Procida <gprocida@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 524550a72cb801ba6f3391dc83eb4e9046947d8d
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu May 21 15:41:35 2020 +0100

    arm64: fix the flush_icache_range arguments in machine_kexec
    
    Commit d51c214541c5154dda3037289ee895ea3ded5ebd upstream.
    
    The second argument is the end "pointer", not the length.
    
    Fixes: d28f6df1305a ("arm64/kexec: Add core kexec support")
    Cc: <stable@vger.kernel.org> # 4.8.x-
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7597d2f3536cfef46ed1687bd0bc1f0c013db371
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Thu May 21 16:46:58 2020 -0400

    padata: purge get_cpu and reorder_via_wq from padata_do_serial
    
    [ Upstream commit 065cf577135a4977931c7a1e1edf442bfd9773dd ]
    
    With the removal of the padata timer, padata_do_serial no longer
    needs special CPU handling, so remove it.
    
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: linux-crypto@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ced157512660b2c5687199f4462578d4d064500
Author: Daniel Jordan <daniel.m.jordan@oracle.com>
Date:   Thu May 21 16:46:57 2020 -0400

    padata: initialize pd->cpu with effective cpumask
    
    [ Upstream commit ec9c7d19336ee98ecba8de80128aa405c45feebb ]
    
    Exercising CPU hotplug on a 5.2 kernel with recent padata fixes from
    cryptodev-2.6.git in an 8-CPU kvm guest...
    
        # modprobe tcrypt alg="pcrypt(rfc4106(gcm(aes)))" type=3
        # echo 0 > /sys/devices/system/cpu/cpu1/online
        # echo c > /sys/kernel/pcrypt/pencrypt/parallel_cpumask
        # modprobe tcrypt mode=215
    
    ...caused the following crash:
    
        BUG: kernel NULL pointer dereference, address: 0000000000000000
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        PGD 0 P4D 0
        Oops: 0000 [#1] SMP PTI
        CPU: 2 PID: 134 Comm: kworker/2:2 Not tainted 5.2.0-padata-base+ #7
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-<snip>
        Workqueue: pencrypt padata_parallel_worker
        RIP: 0010:padata_reorder+0xcb/0x180
        ...
        Call Trace:
         padata_do_serial+0x57/0x60
         pcrypt_aead_enc+0x3a/0x50 [pcrypt]
         padata_parallel_worker+0x9b/0xe0
         process_one_work+0x1b5/0x3f0
         worker_thread+0x4a/0x3c0
         ...
    
    In padata_alloc_pd, pd->cpu is set using the user-supplied cpumask
    instead of the effective cpumask, and in this case cpumask_first picked
    an offline CPU.
    
    The offline CPU's reorder->list.next is NULL in padata_reorder because
    the list wasn't initialized in padata_init_pqueues, which only operates
    on CPUs in the effective mask.
    
    Fix by using the effective mask in padata_alloc_pd.
    
    Fixes: 6fc4dbcf0276 ("padata: Replace delayed timer with immediate workqueue in padata_reorder")
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: linux-crypto@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7daee8c709bb5e3a2ebae137681fa6f54655aefc
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Thu May 21 16:46:56 2020 -0400

    padata: Replace delayed timer with immediate workqueue in padata_reorder
    
    [ Upstream commit 6fc4dbcf0276279d488c5fbbfabe94734134f4fa ]
    
    The function padata_reorder will use a timer when it cannot progress
    while completed jobs are outstanding (pd->reorder_objects > 0).  This
    is suboptimal as if we do end up using the timer then it would have
    introduced a gratuitous delay of one second.
    
    In fact we can easily distinguish between whether completed jobs
    are outstanding and whether we can make progress.  All we have to
    do is look at the next pqueue list.
    
    This patch does that by replacing pd->processed with pd->cpu so
    that the next pqueue is more accessible.
    
    A work queue is used instead of the original try_again to avoid
    hogging the CPU.
    
    Note that we don't bother removing the work queue in
    padata_flush_queues because the whole premise is broken.  You
    cannot flush async crypto requests so it makes no sense to even
    try.  A subsequent patch will fix it by replacing it with a ref
    counting scheme.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    [dj: - adjust context
         - corrected setup_timer -> timer_setup to delete hunk
         - skip padata_flush_queues() hunk, function already removed
           in 4.14]
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6949737c1e6399787a957dc251b1de5ee6c801bf
Author: Mathias Krause <minipli@googlemail.com>
Date:   Thu May 21 16:46:55 2020 -0400

    padata: set cpu_index of unused CPUs to -1
    
    [ Upstream commit 1bd845bcb41d5b7f83745e0cb99273eb376f2ec5 ]
    
    The parallel queue per-cpu data structure gets initialized only for CPUs
    in the 'pcpu' CPU mask set. This is not sufficient as the reorder timer
    may run on a different CPU and might wrongly decide it's the target CPU
    for the next reorder item as per-cpu memory gets memset(0) and we might
    be waiting for the first CPU in cpumask.pcpu, i.e. cpu_index 0.
    
    Make the '__this_cpu_read(pd->pqueue->cpu_index) == next_queue->cpu_index'
    compare in padata_get_next() fail in this case by initializing the
    cpu_index member of all per-cpu parallel queues. Use -1 for unused ones.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74607fdfb8acccd05031c6b21f2ee7d1a1b4724b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Apr 14 11:07:22 2020 +0200

    ARM: futex: Address build warning
    
    [ Upstream commit 8101b5a1531f3390b3a69fa7934c70a8fd6566ad ]
    
    Stephen reported the following build warning on a ARM multi_v7_defconfig
    build with GCC 9.2.1:
    
    kernel/futex.c: In function 'do_futex':
    kernel/futex.c:1676:17: warning: 'oldval' may be used uninitialized in this function [-Wmaybe-uninitialized]
     1676 |   return oldval == cmparg;
          |          ~~~~~~~^~~~~~~~~
    kernel/futex.c:1652:6: note: 'oldval' was declared here
     1652 |  int oldval, ret;
          |      ^~~~~~
    
    introduced by commit a08971e9488d ("futex: arch_futex_atomic_op_inuser()
    calling conventions change").
    
    While that change should not make any difference it confuses GCC which
    fails to work out that oldval is not referenced when the return value is
    not zero.
    
    GCC fails to properly analyze arch_futex_atomic_op_inuser(). It's not the
    early return, the issue is with the assembly macros. GCC fails to detect
    that those either set 'ret' to 0 and set oldval or set 'ret' to -EFAULT
    which makes oldval uninteresting. The store to the callsite supplied oldval
    pointer is conditional on ret == 0.
    
    The straight forward way to solve this is to make the store unconditional.
    
    Aside of addressing the build warning this makes sense anyway because it
    removes the conditional from the fastpath. In the error case the stored
    value is uninteresting and the extra store does not matter at all.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/87pncao2ph.fsf@nanos.tec.linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9103258552364565b3d264bf56bb61cfe27119e2
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 23 00:05:59 2020 +0200

    platform/x86: asus-nb-wmi: Do not load on Asus T100TA and T200TA
    
    [ Upstream commit 3bd12da7f50b8bc191fcb3bab1f55c582234df59 ]
    
    asus-nb-wmi does not add any extra functionality on these Asus
    Transformer books. They have detachable keyboards, so the hotkeys are
    send through a HID device (and handled by the hid-asus driver) and also
    the rfkill functionality is not used on these devices.
    
    Besides not adding any extra functionality, initializing the WMI interface
    on these devices actually has a negative side-effect. For some reason
    the \_SB.ATKD.INIT() function which asus_wmi_platform_init() calls drives
    GPO2 (INT33FC:02) pin 8, which is connected to the front facing webcam LED,
    high and there is no (WMI or other) interface to drive this low again
    causing the LED to be permanently on, even during suspend.
    
    This commit adds a blacklist of DMI system_ids on which not to load the
    asus-nb-wmi and adds these Transformer books to this list. This fixes
    the webcam LED being permanently on under Linux.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a6d2f0c91dde55801640ff13c2b1afb8345904a
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri May 1 16:07:28 2020 -0400

    USB: core: Fix misleading driver bug report
    
    [ Upstream commit ac854131d9844f79e2fdcef67a7707227538d78a ]
    
    The syzbot fuzzer found a race between URB submission to endpoint 0
    and device reset.  Namely, during the reset we call usb_ep0_reinit()
    because the characteristics of ep0 may have changed (if the reset
    follows a firmware update, for example).  While usb_ep0_reinit() is
    running there is a brief period during which the pointers stored in
    udev->ep_in[0] and udev->ep_out[0] are set to NULL, and if an URB is
    submitted to ep0 during that period, usb_urb_ep_type_check() will
    report it as a driver bug.  In the absence of those pointers, the
    routine thinks that the endpoint doesn't exist.  The log message looks
    like this:
    
    ------------[ cut here ]------------
    usb 2-1: BOGUS urb xfer, pipe 2 != type 2
    WARNING: CPU: 0 PID: 9241 at drivers/usb/core/urb.c:478
    usb_submit_urb+0x1188/0x1460 drivers/usb/core/urb.c:478
    
    Now, although submitting an URB while the device is being reset is a
    questionable thing to do, it shouldn't count as a driver bug as severe
    as submitting an URB for an endpoint that doesn't exist.  Indeed,
    endpoint 0 always exists, even while the device is in its unconfigured
    state.
    
    To prevent these misleading driver bug reports, this patch updates
    usb_disable_endpoint() to avoid clearing the ep_in[] and ep_out[]
    pointers when the endpoint being disabled is ep0.  There's no danger
    of leaving a stale pointer in place, because the usb_host_endpoint
    structure being pointed to is stored permanently in udev->ep0; it
    doesn't get deallocated until the entire usb_device structure does.
    
    Reported-and-tested-by: syzbot+db339689b2101f6f6071@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.2005011558590.903-100000@netrider.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a41dc82b599d5e7db674c8acb404d7bf8abaf2f
Author: Wu Bo <wubo40@huawei.com>
Date:   Thu Apr 30 14:12:49 2020 +0800

    ceph: fix double unlock in handle_cap_export()
    
    [ Upstream commit 4d8e28ff3106b093d98bfd2eceb9b430c70a8758 ]
    
    If the ceph_mdsc_open_export_target_session() return fails, it will
    do a "goto retry", but the session mutex has already been unlocked.
    Re-lock the mutex in that case to ensure that we don't unlock it
    twice.
    
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 453a376476ef8c25ab2bbc24370c39cfac8da05a
Author: Yoshiyuki Kurauchi <ahochauwaaaaa@gmail.com>
Date:   Thu Apr 30 14:01:36 2020 +0900

    gtp: set NLM_F_MULTI flag in gtp_genl_dump_pdp()
    
    [ Upstream commit 846c68f7f1ac82c797a2f1db3344a2966c0fe2e1 ]
    
    In drivers/net/gtp.c, gtp_genl_dump_pdp() should set NLM_F_MULTI
    flag since it returns multipart message.
    This patch adds a new arg "flags" in gtp_genl_fill_info() so that
    flags can be set by the callers.
    
    Signed-off-by: Yoshiyuki Kurauchi <ahochauwaaaaa@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa0b145db2b20bdbb70d31bc75e1563daa07b331
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Apr 27 16:55:57 2020 +0200

    x86/apic: Move TSC deadline timer debug printk
    
    [ Upstream commit c84cb3735fd53c91101ccdb191f2e3331a9262cb ]
    
    Leon reported that the printk_once() in __setup_APIC_LVTT() triggers a
    lockdep splat due to a lock order violation between hrtimer_base::lock and
    console_sem, when the 'once' condition is reset via
    /sys/kernel/debug/clear_warn_once after boot.
    
    The initial printk cannot trigger this because that happens during boot
    when the local APIC timer is set up on the boot CPU.
    
    Prevent it by moving the printk to a place which is guaranteed to be only
    called once during boot.
    
    Mark the deadline timer check related functions and data __init while at
    it.
    
    Reported-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/87y2qhoshi.fsf@nanos.tec.linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f24eaf37e69a96fadc9735d74d7c1f163ecec72
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Mon Apr 27 15:49:53 2020 -0700

    scsi: ibmvscsi: Fix WARN_ON during event pool release
    
    [ Upstream commit b36522150e5b85045f868768d46fbaaa034174b2 ]
    
    While removing an ibmvscsi client adapter a WARN_ON like the following is
    seen in the kernel log:
    
    drmgr: drmgr: -r -c slot -s U9080.M9S.783AEC8-V11-C11 -w 5 -d 1
    WARNING: CPU: 9 PID: 24062 at ../kernel/dma/mapping.c:311 dma_free_attrs+0x78/0x110
    Supported: No, Unreleased kernel
    CPU: 9 PID: 24062 Comm: drmgr Kdump: loaded Tainted: G               X 5.3.18-12-default
    NIP:  c0000000001fa758 LR: c0000000001fa744 CTR: c0000000001fa6e0
    REGS: c0000002173375d0 TRAP: 0700   Tainted: G               X (5.3.18-12-default)
    MSR:  8000000000029033 <SF,EE,ME,IR,DR,RI,LE>  CR: 28088282  XER: 20000000
    CFAR: c0000000001fbf0c IRQMASK: 1
    GPR00: c0000000001fa744 c000000217337860 c00000000161ab00 0000000000000000
    GPR04: 0000000000000000 c000011e12250000 0000000018010000 0000000000000000
    GPR08: 0000000000000000 0000000000000001 0000000000000001 c0080000190f4fa8
    GPR12: c0000000001fa6e0 c000000007fc2a00 0000000000000000 0000000000000000
    GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR20: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR24: 000000011420e310 0000000000000000 0000000000000000 0000000018010000
    GPR28: c00000000159de50 c000011e12250000 0000000000006600 c000011e5c994848
    NIP [c0000000001fa758] dma_free_attrs+0x78/0x110
    LR [c0000000001fa744] dma_free_attrs+0x64/0x110
    Call Trace:
    [c000000217337860] [000000011420e310] 0x11420e310 (unreliable)
    [c0000002173378b0] [c0080000190f0280] release_event_pool+0xd8/0x120 [ibmvscsi]
    [c000000217337930] [c0080000190f3f74] ibmvscsi_remove+0x6c/0x160 [ibmvscsi]
    [c000000217337960] [c0000000000f3cac] vio_bus_remove+0x5c/0x100
    [c0000002173379a0] [c00000000087a0a4] device_release_driver_internal+0x154/0x280
    [c0000002173379e0] [c0000000008777cc] bus_remove_device+0x11c/0x220
    [c000000217337a60] [c000000000870fc4] device_del+0x1c4/0x470
    [c000000217337b10] [c0000000008712a0] device_unregister+0x30/0xa0
    [c000000217337b80] [c0000000000f39ec] vio_unregister_device+0x2c/0x60
    [c000000217337bb0] [c00800001a1d0964] dlpar_remove_slot+0x14c/0x250 [rpadlpar_io]
    [c000000217337c50] [c00800001a1d0bcc] remove_slot_store+0xa4/0x110 [rpadlpar_io]
    [c000000217337cd0] [c000000000c091a0] kobj_attr_store+0x30/0x50
    [c000000217337cf0] [c00000000057c934] sysfs_kf_write+0x64/0x90
    [c000000217337d10] [c00000000057be10] kernfs_fop_write+0x1b0/0x290
    [c000000217337d60] [c000000000488c4c] __vfs_write+0x3c/0x70
    [c000000217337d80] [c00000000048c648] vfs_write+0xd8/0x260
    [c000000217337dd0] [c00000000048ca8c] ksys_write+0xdc/0x130
    [c000000217337e20] [c00000000000b488] system_call+0x5c/0x70
    Instruction dump:
    7c840074 f8010010 f821ffb1 20840040 eb830218 7c8407b4 48002019 60000000
    2fa30000 409e003c 892d0988 792907e0 <0b090000> 2fbd0000 419e0028 2fbc0000
    ---[ end trace 5955b3c0cc079942 ]---
    rpadlpar_io: slot U9080.M9S.783AEC8-V11-C11 removed
    
    This is tripped as a result of irqs being disabled during the call to
    dma_free_coherent() by release_event_pool(). At this point in the code path
    we have quiesced the adapter and it is overly paranoid to be holding the
    host lock.
    
    [mkp: fixed build warning reported by sfr]
    
    Link: https://lore.kernel.org/r/1588027793-17952-1-git-send-email-tyreld@linux.ibm.com
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c4bffd4b872662ce675a295a11dbccf6bd944e2
Author: James Hilliard <james.hilliard1@gmail.com>
Date:   Sat Apr 11 13:02:41 2020 -0600

    component: Silence bind error on -EPROBE_DEFER
    
    [ Upstream commit 7706b0a76a9697021e2bf395f3f065c18f51043d ]
    
    If a component fails to bind due to -EPROBE_DEFER we should not log an
    error as this is not a real failure.
    
    Fixes messages like:
    vc4-drm soc:gpu: failed to bind 3f902000.hdmi (ops vc4_hdmi_ops): -517
    vc4-drm soc:gpu: master bind failed: -517
    
    Signed-off-by: James Hilliard <james.hilliard1@gmail.com>
    Link: https://lore.kernel.org/r/20200411190241.89404-1-james.hilliard1@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 486a24502c9ac33bb3bc05ba598fb3b43134e3ab
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Apr 24 17:08:29 2020 +0200

    vhost/vsock: fix packet delivery order to monitoring devices
    
    [ Upstream commit 107bc0766b9feb5113074c753735a3f115c2141f ]
    
    We want to deliver packets to monitoring devices before it is
    put in the virtqueue, to avoid that replies can appear in the
    packet capture before the transmitted packet.
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5765f42d9fffb4808e625f0e1a1c810a5e9cfdb2
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Sat Apr 25 20:52:26 2020 +0800

    configfs: fix config_item refcnt leak in configfs_rmdir()
    
    [ Upstream commit 8aebfffacfa379ba400da573a5bf9e49634e38cb ]
    
    configfs_rmdir() invokes configfs_get_config_item(), which returns a
    reference of the specified config_item object to "parent_item" with
    increased refcnt.
    
    When configfs_rmdir() returns, local variable "parent_item" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling path of
    configfs_rmdir(). When down_write_killable() fails, the function forgets
    to decrease the refcnt increased by configfs_get_config_item(), causing
    a refcnt leak.
    
    Fix this issue by calling config_item_put() when down_write_killable()
    fails.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18859aa456e86b82c9fa68d6f2345ca7b833e8a4
Author: Arun Easi <aeasi@marvell.com>
Date:   Tue Mar 31 03:40:14 2020 -0700

    scsi: qla2xxx: Fix hang when issuing nvme disconnect-all in NPIV
    
    [ Upstream commit 45a76264c26fd8cfd0c9746196892d9b7e2657ee ]
    
    In NPIV environment, a NPIV host may use a queue pair created by base host
    or other NPIVs, so the check for a queue pair created by this NPIV is not
    correct, and can cause an abort to fail, which in turn means the NVME
    command not returned.  This leads to hang in nvme_fc layer in
    nvme_fc_delete_association() which waits for all I/Os to be returned, which
    is seen as hang in the application.
    
    Link: https://lore.kernel.org/r/20200331104015.24868-3-njavali@marvell.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a42492da52d601f14fee8b8535ae236118bb609
Author: Sebastian Reichel <sebastian.reichel@collabora.com>
Date:   Mon Apr 13 18:02:37 2020 +0200

    HID: multitouch: add eGalaxTouch P80H84 support
    
    [ Upstream commit f9e82295eec141a0569649d400d249333d74aa91 ]
    
    Add support for P80H84 touchscreen from eGalaxy:
    
      idVendor           0x0eef D-WAV Scientific Co., Ltd
      idProduct          0xc002
      iManufacturer           1 eGalax Inc.
      iProduct                2 eGalaxTouch P80H84 2019 vDIVA_1204_T01 k4.02.146
    
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5ef8f46a2ab471eed32a948185a05eac9613b13
Author: Frédéric Pierret (fepitre) <frederic.pierret@qubes-os.org>
Date:   Tue Apr 7 13:32:59 2020 +0200

    gcc-common.h: Update for GCC 10
    
    [ Upstream commit c7527373fe28f97d8a196ab562db5589be0d34b9 ]
    
    Remove "params.h" include, which has been dropped in GCC 10.
    
    Remove is_a_helper() macro, which is now defined in gimple.h, as seen
    when running './scripts/gcc-plugin.sh g++ g++ gcc':
    
    In file included from <stdin>:1:
    ./gcc-plugins/gcc-common.h:852:13: error: redefinition of ‘static bool is_a_helper<T>::test(U*) [with U = const gimple; T = const ggoto*]’
      852 | inline bool is_a_helper<const ggoto *>::test(const_gimple gs)
          |             ^~~~~~~~~~~~~~~~~~~~~~~~~~
    In file included from ./gcc-plugins/gcc-common.h:125,
                     from <stdin>:1:
    /usr/lib/gcc/x86_64-redhat-linux/10/plugin/include/gimple.h:1037:1: note: ‘static bool is_a_helper<T>::test(U*) [with U = const gimple; T = const ggoto*]’ previously declared here
     1037 | is_a_helper <const ggoto *>::test (const gimple *gs)
          | ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Add -Wno-format-diag to scripts/gcc-plugins/Makefile to avoid
    meaningless warnings from error() formats used by plugins:
    
    scripts/gcc-plugins/structleak_plugin.c: In function ‘int plugin_init(plugin_name_args*, plugin_gcc_version*)’:
    scripts/gcc-plugins/structleak_plugin.c:253:12: warning: unquoted sequence of 2 consecutive punctuation characters ‘'-’ in format [-Wformat-diag]
      253 |   error(G_("unknown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
          |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Signed-off-by: Frédéric Pierret (fepitre) <frederic.pierret@qubes-os.org>
    Link: https://lore.kernel.org/r/20200407113259.270172-1-frederic.pierret@qubes-os.org
    [kees: include -Wno-format-diag for plugin builds]
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d840a584a8fbccefbdbdac6a46e4788390c8d653
Author: Richard Weinberger <richard@nod.at>
Date:   Sat May 2 14:48:02 2020 +0200

    ubi: Fix seq_file usage in detailed_erase_block_info debugfs file
    
    [ Upstream commit 0e7572cffe442290c347e779bf8bd4306bb0aa7c ]
    
    3bfa7e141b0b ("fs/seq_file.c: seq_read(): add info message about buggy .next functions")
    showed that we don't use seq_file correctly.
    So make sure that our ->next function always updates the position.
    
    Fixes: 7bccd12d27b7 ("ubi: Add debugfs file for tracking PEB state")
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af50d1a9c1affab776d5a8c8558a3adafdce1eeb
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed May 6 21:21:00 2020 +0200

    i2c: mux: demux-pinctrl: Fix an error handling path in 'i2c_demux_pinctrl_probe()'
    
    [ Upstream commit e9d1a0a41d4486955e96552293c1fcf1fce61602 ]
    
    A call to 'i2c_demux_deactivate_master()' is missing in the error handling
    path, as already done in the remove function.
    
    Fixes: 50a5ba876908 ("i2c: mux: demux-pinctrl: add driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 491ab27057609eebd9bae927724d797ff3381030
Author: Alexander Monakov <amonakov@ispras.ru>
Date:   Mon May 11 10:23:52 2020 +0000

    iommu/amd: Fix over-read of ACPI UID from IVRS table
    
    [ Upstream commit e461b8c991b9202b007ea2059d953e264240b0c9 ]
    
    IVRS parsing code always tries to read 255 bytes from memory when
    retrieving ACPI device path, and makes an assumption that firmware
    provides a zero-terminated string. Both of those are bugs: the entry
    is likely to be shorter than 255 bytes, and zero-termination is not
    guaranteed.
    
    With Acer SF314-42 firmware these issues manifest visibly in dmesg:
    
    AMD-Vi: ivrs, add hid:AMDI0020, uid:\_SB.FUR0\xf0\xa5, rdevid:160
    AMD-Vi: ivrs, add hid:AMDI0020, uid:\_SB.FUR1\xf0\xa5, rdevid:160
    AMD-Vi: ivrs, add hid:AMDI0020, uid:\_SB.FUR2\xf0\xa5, rdevid:160
    AMD-Vi: ivrs, add hid:AMDI0020, uid:\_SB.FUR3>\x83e\x8d\x9a\xd1...
    
    The first three lines show how the code over-reads adjacent table
    entries into the UID, and in the last line it even reads garbage data
    beyond the end of the IVRS table itself.
    
    Since each entry has the length of the UID (uidl member of ivhd_entry
    struct), use that for memcpy, and manually add a zero terminator.
    
    Avoid zero-filling hid and uid arrays up front, and instead ensure
    the uid array is always zero-terminated. No change needed for the hid
    array, as it was already properly zero-terminated.
    
    Fixes: 2a0cb4e2d423c ("iommu/amd: Add new map for storing IVHD dev entry type HID")
    
    Signed-off-by: Alexander Monakov <amonakov@ispras.ru>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: iommu@lists.linux-foundation.org
    Link: https://lore.kernel.org/r/20200511102352.1831-1-amonakov@ispras.ru
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a738364667b485709c28942be9c0b1681b28199
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue May 19 17:48:52 2020 -0400

    fix multiplication overflow in copy_fdtable()
    
    [ Upstream commit 4e89b7210403fa4a8acafe7c602b6212b7af6c3b ]
    
    cpy and set really should be size_t; we won't get an overflow on that,
    since sysctl_nr_open can't be set above ~(size_t)0 / sizeof(void *),
    so nr that would've managed to overflow size_t on that multiplication
    won't get anywhere near copy_fdtable() - we'll fail with EMFILE
    before that.
    
    Cc: stable@kernel.org # v2.6.25+
    Fixes: 9cfe015aa424 (get rid of NR_OPEN and introduce a sysctl_nr_open)
    Reported-by: Thiago Macieira <thiago.macieira@intel.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa63cb9b6ddaa6142cea2b47f0ed0450f48e7f77
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Mon Apr 27 12:31:28 2020 +0200

    ima: Fix return value of ima_write_policy()
    
    [ Upstream commit 2e3a34e9f409ebe83d1af7cd2f49fca7af97dfac ]
    
    This patch fixes the return value of ima_write_policy() when a new policy
    is directly passed to IMA and the current policy requires appraisal of the
    file containing the policy. Currently, if appraisal is not in ENFORCE mode,
    ima_write_policy() returns 0 and leads user space applications to an
    endless loop. Fix this issue by denying the operation regardless of the
    appraisal mode.
    
    Cc: stable@vger.kernel.org # 4.10.x
    Fixes: 19f8a84713edc ("ima: measure and appraise the IMA policy itself")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bf1124865112379911b97c0c79a8d2277442a5e
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Mon Apr 27 12:28:56 2020 +0200

    evm: Check also if *tfm is an error pointer in init_desc()
    
    [ Upstream commit 53de3b080d5eae31d0de219617155dcc34e7d698 ]
    
    This patch avoids a kernel panic due to accessing an error pointer set by
    crypto_alloc_shash(). It occurs especially when there are many files that
    require an unsupported algorithm, as it would increase the likelihood of
    the following race condition:
    
    Task A: *tfm = crypto_alloc_shash() <= error pointer
    Task B: if (*tfm == NULL) <= *tfm is not NULL, use it
    Task B: rc = crypto_shash_init(desc) <= panic
    Task A: *tfm = NULL
    
    This patch uses the IS_ERR_OR_NULL macro to determine whether or not a new
    crypto context must be created.
    
    Cc: stable@vger.kernel.org
    Fixes: d46eb3699502b ("evm: crypto hash replaced by shash")
    Co-developed-by: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
    Signed-off-by: Krzysztof Struczynski <krzysztof.struczynski@huawei.com>
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bc138000e3be603190af6641f04f4f91011fe95
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Mon Apr 27 12:28:55 2020 +0200

    ima: Set file->f_mode instead of file->f_flags in ima_calc_file_hash()
    
    [ Upstream commit 0014cc04e8ec077dc482f00c87dfd949cfe2b98f ]
    
    Commit a408e4a86b36 ("ima: open a new file instance if no read
    permissions") tries to create a new file descriptor to calculate a file
    digest if the file has not been opened with O_RDONLY flag. However, if a
    new file descriptor cannot be obtained, it sets the FMODE_READ flag to
    file->f_flags instead of file->f_mode.
    
    This patch fixes this issue by replacing f_flags with f_mode as it was
    before that commit.
    
    Cc: stable@vger.kernel.org # 4.20.x
    Fixes: a408e4a86b36 ("ima: open a new file instance if no read permissions")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: Goldwyn Rodrigues <rgoldwyn@suse.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a9ac7ce3927b135390faaa27398d5932a70c3b7
Author: Mathias Krause <minipli@googlemail.com>
Date:   Fri Sep 8 20:57:11 2017 +0200

    padata: ensure padata_do_serial() runs on the correct CPU
    
    commit 350ef88e7e922354f82a931897ad4a4ce6c686ff upstream.
    
    If the algorithm we're parallelizing is asynchronous we might change
    CPUs between padata_do_parallel() and padata_do_serial(). However, we
    don't expect this to happen as we need to enqueue the padata object into
    the per-cpu reorder queue we took it from, i.e. the same-cpu's parallel
    queue.
    
    Ensure we're not switching CPUs for a given padata object by tracking
    the CPU within the padata object. If the serial callback gets called on
    the wrong CPU, defer invoking padata_reorder() via a kernel worker on
    the CPU we're expected to run on.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a68ca9a23e83c3e1003e091d1ce802b821efc5db
Author: Mathias Krause <minipli@googlemail.com>
Date:   Fri Sep 8 20:57:10 2017 +0200

    padata: ensure the reorder timer callback runs on the correct CPU
    
    commit cf5868c8a22dc2854b96e9569064bb92365549ca upstream.
    
    The reorder timer function runs on the CPU where the timer interrupt was
    handled which is not necessarily one of the CPUs of the 'pcpu' CPU mask
    set.
    
    Ensure the padata_reorder() callback runs on the correct CPU, which is
    one in the 'pcpu' CPU mask set and, preferrably, the next expected one.
    Do so by comparing the current CPU with the expected target CPU. If they
    match, call padata_reorder() right away. If they differ, schedule a work
    item on the target CPU that does the padata_reorder() call for us.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1f3b4150baf7c3aa6b4e6b81b8ff1909996d507
Author: Kevin Hao <haokexin@gmail.com>
Date:   Fri Oct 11 23:00:14 2019 +0800

    i2c: dev: Fix the race between the release of i2c_dev and cdev
    
    commit 1413ef638abae4ab5621901cf4d8ef08a4a48ba6 upstream.
    
    The struct cdev is embedded in the struct i2c_dev. In the current code,
    we would free the i2c_dev struct directly in put_i2c_dev(), but the
    cdev is manged by a kobject, and the release of it is not predictable.
    So it is very possible that the i2c_dev is freed before the cdev is
    entirely released. We can easily get the following call trace with
    CONFIG_DEBUG_KOBJECT_RELEASE and CONFIG_DEBUG_OBJECTS_TIMERS enabled.
      ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x38
      WARNING: CPU: 19 PID: 1 at lib/debugobjects.c:325 debug_print_object+0xb0/0xf0
      Modules linked in:
      CPU: 19 PID: 1 Comm: swapper/0 Tainted: G        W         5.2.20-yocto-standard+ #120
      Hardware name: Marvell OcteonTX CN96XX board (DT)
      pstate: 80c00089 (Nzcv daIf +PAN +UAO)
      pc : debug_print_object+0xb0/0xf0
      lr : debug_print_object+0xb0/0xf0
      sp : ffff00001292f7d0
      x29: ffff00001292f7d0 x28: ffff800b82151788
      x27: 0000000000000001 x26: ffff800b892c0000
      x25: ffff0000124a2558 x24: 0000000000000000
      x23: ffff00001107a1d8 x22: ffff0000116b5088
      x21: ffff800bdc6afca8 x20: ffff000012471ae8
      x19: ffff00001168f2c8 x18: 0000000000000010
      x17: 00000000fd6f304b x16: 00000000ee79de43
      x15: ffff800bc0e80568 x14: 79616c6564203a74
      x13: 6e6968207473696c x12: 5f72656d6974203a
      x11: ffff0000113f0018 x10: 0000000000000000
      x9 : 000000000000001f x8 : 0000000000000000
      x7 : ffff0000101294cc x6 : 0000000000000000
      x5 : 0000000000000000 x4 : 0000000000000001
      x3 : 00000000ffffffff x2 : 0000000000000000
      x1 : 387fc15c8ec0f200 x0 : 0000000000000000
      Call trace:
       debug_print_object+0xb0/0xf0
       __debug_check_no_obj_freed+0x19c/0x228
       debug_check_no_obj_freed+0x1c/0x28
       kfree+0x250/0x440
       put_i2c_dev+0x68/0x78
       i2cdev_detach_adapter+0x60/0xc8
       i2cdev_notifier_call+0x3c/0x70
       notifier_call_chain+0x8c/0xe8
       blocking_notifier_call_chain+0x64/0x88
       device_del+0x74/0x380
       device_unregister+0x54/0x78
       i2c_del_adapter+0x278/0x2d0
       unittest_i2c_bus_remove+0x3c/0x80
       platform_drv_remove+0x30/0x50
       device_release_driver_internal+0xf4/0x1c0
       driver_detach+0x58/0xa0
       bus_remove_driver+0x84/0xd8
       driver_unregister+0x34/0x60
       platform_driver_unregister+0x20/0x30
       of_unittest_overlay+0x8d4/0xbe0
       of_unittest+0xae8/0xb3c
       do_one_initcall+0xac/0x450
       do_initcall_level+0x208/0x224
       kernel_init_freeable+0x2d8/0x36c
       kernel_init+0x18/0x108
       ret_from_fork+0x10/0x1c
      irq event stamp: 3934661
      hardirqs last  enabled at (3934661): [<ffff00001009fa04>] debug_exception_exit+0x4c/0x58
      hardirqs last disabled at (3934660): [<ffff00001009fb14>] debug_exception_enter+0xa4/0xe0
      softirqs last  enabled at (3934654): [<ffff000010081d94>] __do_softirq+0x46c/0x628
      softirqs last disabled at (3934649): [<ffff0000100b4a1c>] irq_exit+0x104/0x118
    
    This is a common issue when using cdev embedded in a struct.
    Fortunately, we already have a mechanism to solve this kind of issue.
    Please see commit 233ed09d7fda ("chardev: add helper function to
    register char devs with a struct device") for more detail.
    
    In this patch, we choose to embed the struct device into the i2c_dev,
    and use the API provided by the commit 233ed09d7fda to make sure that
    the release of i2c_dev and cdev are in sequence.
    
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 450caf1faa0d7bbbd1da93d3ee8c5edea7bc51a8
Author: Kevin Hao <haokexin@gmail.com>
Date:   Tue Oct 8 19:29:34 2019 +0800

    watchdog: Fix the race between the release of watchdog_core_data and cdev
    
    commit 72139dfa2464e43957d330266994740bb7be2535 upstream.
    
    The struct cdev is embedded in the struct watchdog_core_data. In the
    current code, we manage the watchdog_core_data with a kref, but the
    cdev is manged by a kobject. There is no any relationship between
    this kref and kobject. So it is possible that the watchdog_core_data is
    freed before the cdev is entirely released. We can easily get the
    following call trace with CONFIG_DEBUG_KOBJECT_RELEASE and
    CONFIG_DEBUG_OBJECTS_TIMERS enabled.
      ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x38
      WARNING: CPU: 23 PID: 1028 at lib/debugobjects.c:481 debug_print_object+0xb0/0xf0
      Modules linked in: softdog(-) deflate ctr twofish_generic twofish_common camellia_generic serpent_generic blowfish_generic blowfish_common cast5_generic cast_common cmac xcbc af_key sch_fq_codel openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4
      CPU: 23 PID: 1028 Comm: modprobe Not tainted 5.3.0-next-20190924-yoctodev-standard+ #180
      Hardware name: Marvell OcteonTX CN96XX board (DT)
      pstate: 00400009 (nzcv daif +PAN -UAO)
      pc : debug_print_object+0xb0/0xf0
      lr : debug_print_object+0xb0/0xf0
      sp : ffff80001cbcfc70
      x29: ffff80001cbcfc70 x28: ffff800010ea2128
      x27: ffff800010bad000 x26: 0000000000000000
      x25: ffff80001103c640 x24: ffff80001107b268
      x23: ffff800010bad9e8 x22: ffff800010ea2128
      x21: ffff000bc2c62af8 x20: ffff80001103c600
      x19: ffff800010e867d8 x18: 0000000000000060
      x17: 0000000000000000 x16: 0000000000000000
      x15: ffff000bd7240470 x14: 6e6968207473696c
      x13: 5f72656d6974203a x12: 6570797420746365
      x11: 6a626f2029302065 x10: 7461747320657669
      x9 : 7463612820657669 x8 : 3378302f3078302b
      x7 : 0000000000001d7a x6 : ffff800010fd5889
      x5 : 0000000000000000 x4 : 0000000000000000
      x3 : 0000000000000000 x2 : ffff000bff948548
      x1 : 276a1c9e1edc2300 x0 : 0000000000000000
      Call trace:
       debug_print_object+0xb0/0xf0
       debug_check_no_obj_freed+0x1e8/0x210
       kfree+0x1b8/0x368
       watchdog_cdev_unregister+0x88/0xc8
       watchdog_dev_unregister+0x38/0x48
       watchdog_unregister_device+0xa8/0x100
       softdog_exit+0x18/0xfec4 [softdog]
       __arm64_sys_delete_module+0x174/0x200
       el0_svc_handler+0xd0/0x1c8
       el0_svc+0x8/0xc
    
    This is a common issue when using cdev embedded in a struct.
    Fortunately, we already have a mechanism to solve this kind of issue.
    Please see commit 233ed09d7fda ("chardev: add helper function to
    register char devs with a struct device") for more detail.
    
    In this patch, we choose to embed the struct device into the
    watchdog_core_data, and use the API provided by the commit 233ed09d7fda
    to make sure that the release of watchdog_core_data and cdev are
    in sequence.
    
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20191008112934.29669-1-haokexin@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    [bwh: Backported to 4.14:
     - There's no reboot notifier here
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dfc877ade290e5beb52fb81abb8bae5bf352486
Author: Shijie Luo <luoshijie1@huawei.com>
Date:   Mon Feb 10 20:17:52 2020 -0500

    ext4: add cond_resched() to ext4_protect_reserved_inode
    
    commit af133ade9a40794a37104ecbcc2827c0ea373a3c upstream.
    
    When journal size is set too big by "mkfs.ext4 -J size=", or when
    we mount a crafted image to make journal inode->i_size too big,
    the loop, "while (i < num)", holds cpu too long. This could cause
    soft lockup.
    
    [  529.357541] Call trace:
    [  529.357551]  dump_backtrace+0x0/0x198
    [  529.357555]  show_stack+0x24/0x30
    [  529.357562]  dump_stack+0xa4/0xcc
    [  529.357568]  watchdog_timer_fn+0x300/0x3e8
    [  529.357574]  __hrtimer_run_queues+0x114/0x358
    [  529.357576]  hrtimer_interrupt+0x104/0x2d8
    [  529.357580]  arch_timer_handler_virt+0x38/0x58
    [  529.357584]  handle_percpu_devid_irq+0x90/0x248
    [  529.357588]  generic_handle_irq+0x34/0x50
    [  529.357590]  __handle_domain_irq+0x68/0xc0
    [  529.357593]  gic_handle_irq+0x6c/0x150
    [  529.357595]  el1_irq+0xb8/0x140
    [  529.357599]  __ll_sc_atomic_add_return_acquire+0x14/0x20
    [  529.357668]  ext4_map_blocks+0x64/0x5c0 [ext4]
    [  529.357693]  ext4_setup_system_zone+0x330/0x458 [ext4]
    [  529.357717]  ext4_fill_super+0x2170/0x2ba8 [ext4]
    [  529.357722]  mount_bdev+0x1a8/0x1e8
    [  529.357746]  ext4_mount+0x44/0x58 [ext4]
    [  529.357748]  mount_fs+0x50/0x170
    [  529.357752]  vfs_kern_mount.part.9+0x54/0x188
    [  529.357755]  do_mount+0x5ac/0xd78
    [  529.357758]  ksys_mount+0x9c/0x118
    [  529.357760]  __arm64_sys_mount+0x28/0x38
    [  529.357764]  el0_svc_common+0x78/0x130
    [  529.357766]  el0_svc_handler+0x38/0x78
    [  529.357769]  el0_svc+0x8/0xc
    [  541.356516] watchdog: BUG: soft lockup - CPU#0 stuck for 23s! [mount:18674]
    
    Link: https://lore.kernel.org/r/20200211011752.29242-1-luoshijie1@huawei.com
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Shijie Luo <luoshijie1@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
