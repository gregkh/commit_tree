commit 19e5f4da1240dcc32cda9b9022308c1b4c72e1f1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Jul 22 14:27:43 2018 +0200

    Linux 4.9.114

commit 5c067898febcbe6f10ebc2d3c576eba629739326
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Jan 9 07:21:15 2018 -0800

    string: drop __must_check from strscpy() and restore strscpy() usages in cgroup
    
    commit 08a77676f9c5fc69a681ccd2cd8140e65dcb26c7 upstream.
    
    e7fd37ba1217 ("cgroup: avoid copying strings longer than the buffers")
    converted possibly unsafe strncpy() usages in cgroup to strscpy().
    However, although the callsites are completely fine with truncated
    copied, because strscpy() is marked __must_check, it led to the
    following warnings.
    
      kernel/cgroup/cgroup.c: In function ‘cgroup_file_name’:
      kernel/cgroup/cgroup.c:1400:10: warning: ignoring return value of ‘strscpy’, declared with attribute warn_unused_result [-Wunused-result]
         strscpy(buf, cft->name, CGROUP_FILE_NAME_MAX);
                   ^
    
    To avoid the warnings, 50034ed49645 ("cgroup: use strlcpy() instead of
    strscpy() to avoid spurious warning") switched them to strlcpy().
    
    strlcpy() is worse than strlcpy() because it unconditionally runs
    strlen() on the source string, and the only reason we switched to
    strlcpy() here was because it was lacking __must_check, which doesn't
    reflect any material differences between the two function.  It's just
    that someone added __must_check to strscpy() and not to strlcpy().
    
    These basic string copy operations are used in variety of ways, and
    one of not-so-uncommon use cases is safely handling truncated copies,
    where the caller naturally doesn't care about the return value.  The
    __must_check doesn't match the actual use cases and forces users to
    opt for inferior variants which lack __must_check by happenstance or
    spread ugly (void) casts.
    
    Remove __must_check from strscpy() and restore strscpy() usages in
    cgroup.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Ma Shimiao <mashimiao.fnst@cn.fujitsu.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Chris Metcalf <cmetcalf@ezchip.com>
    [backport only the string.h portion to remove build warnings starting to show up - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba3fe91cba38aaf55c421fe1bae3240aecd34944
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:34 2018 +0100

    arm64: KVM: Add ARCH_WORKAROUND_2 discovery through ARCH_FEATURES_FUNC_ID
    
    commit 5d81f7dc9bca4f4963092433e27b508cbe524a32 upstream.
    
    Now that all our infrastructure is in place, let's expose the
    availability of ARCH_WORKAROUND_2 to guests. We take this opportunity
    to tidy up a couple of SMCCC constants.
    
    Acked-by: Christoffer Dall <christoffer.dall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f99e40649147bb49e6dc7c1ce748617363c51434
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:33 2018 +0100

    arm64: KVM: Handle guest's ARCH_WORKAROUND_2 requests
    
    commit b4f18c063a13dfb33e3a63fe1844823e19c2265e upstream.
    
    In order to forward the guest's ARCH_WORKAROUND_2 calls to EL3,
    add a small(-ish) sequence to handle it at EL2. Special care must
    be taken to track the state of the guest itself by updating the
    workaround flags. We also rely on patching to enable calls into
    the firmware.
    
    Note that since we need to execute branches, this always executes
    after the Spectre-v2 mitigation has been applied.
    
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68240e9bb16d52f5bf2c88f5984374ac7c6939fa
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:32 2018 +0100

    arm64: KVM: Add ARCH_WORKAROUND_2 support for guests
    
    commit 55e3748e8902ff641e334226bdcb432f9a5d78d3 upstream.
    
    In order to offer ARCH_WORKAROUND_2 support to guests, we need
    a bit of infrastructure.
    
    Let's add a flag indicating whether or not the guest uses
    SSBD mitigation. Depending on the state of this flag, allow
    KVM to disable ARCH_WORKAROUND_2 before entering the guest,
    and enable it when exiting it.
    
    Reviewed-by: Christoffer Dall <christoffer.dall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b62e8503fbbf7702a55b1abbfdb2c290c96609e
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:31 2018 +0100

    arm64: KVM: Add HYP per-cpu accessors
    
    commit 85478bab409171de501b719971fd25a3d5d639f9 upstream.
    
    As we're going to require to access per-cpu variables at EL2,
    let's craft the minimum set of accessors required to implement
    reading a per-cpu variable, relying on tpidr_el2 to contain the
    per-cpu offset.
    
    Reviewed-by: Christoffer Dall <christoffer.dall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c06aab19b4421d22a43dffb599bae6696669d67
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:30 2018 +0100

    arm64: ssbd: Add prctl interface for per-thread mitigation
    
    commit 9cdc0108baa8ef87c76ed834619886a46bd70cbe upstream.
    
    If running on a system that performs dynamic SSBD mitigation, allow
    userspace to request the mitigation for itself. This is implemented
    as a prctl call, allowing the mitigation to be enabled or disabled at
    will for this particular thread.
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf14b896e77685eb89c8b02951f3b8d428e8dce0
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:29 2018 +0100

    arm64: ssbd: Introduce thread flag to control userspace mitigation
    
    commit 9dd9614f5476687abbff8d4b12cd08ae70d7c2ad upstream.
    
    In order to allow userspace to be mitigated on demand, let's
    introduce a new thread flag that prevents the mitigation from
    being turned off when exiting to userspace, and doesn't turn
    it on on entry into the kernel (with the assumption that the
    mitigation is always enabled in the kernel itself).
    
    This will be used by a prctl interface introduced in a later
    patch.
    
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8fbc84469f3b796c574740b3f4a0a8df51cb9b6
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:28 2018 +0100

    arm64: ssbd: Restore mitigation status on CPU resume
    
    commit 647d0519b53f440a55df163de21c52a8205431cc upstream.
    
    On a system where firmware can dynamically change the state of the
    mitigation, the CPU will always come up with the mitigation enabled,
    including when coming back from suspend.
    
    If the user has requested "no mitigation" via a command line option,
    let's enforce it by calling into the firmware again to disable it.
    
    Similarily, for a resume from hibernate, the mitigation could have
    been disabled by the boot kernel. Let's ensure that it is set
    back on in that case.
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42f967dede3e8dbe34935fd7612e0eba0bc3a666
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:27 2018 +0100

    arm64: ssbd: Skip apply_ssbd if not using dynamic mitigation
    
    commit 986372c4367f46b34a3c0f6918d7fb95cbdf39d6 upstream.
    
    In order to avoid checking arm64_ssbd_callback_required on each
    kernel entry/exit even if no mitigation is required, let's
    add yet another alternative that by default jumps over the mitigation,
    and that gets nop'ed out if we're doing dynamic mitigation.
    
    Think of it as a poor man's static key...
    
    Reviewed-by: Julien Grall <julien.grall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 242bff3816ad7b48d3db5d7aa9b6c2c961e08d16
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:26 2018 +0100

    arm64: ssbd: Add global mitigation state accessor
    
    commit c32e1736ca03904c03de0e4459a673be194f56fd upstream.
    
    We're about to need the mitigation state in various parts of the
    kernel in order to do the right thing for userspace and guests.
    
    Let's expose an accessor that will let other subsystems know
    about the state.
    
    Reviewed-by: Julien Grall <julien.grall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a64e6a9989e0748ff17b6deeec659cb1a3e1938
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:25 2018 +0100

    arm64: Add 'ssbd' command-line option
    
    commit a43ae4dfe56a01f5b98ba0cb2f784b6a43bafcc6 upstream.
    
    On a system where the firmware implements ARCH_WORKAROUND_2,
    it may be useful to either permanently enable or disable the
    workaround for cases where the user decides that they'd rather
    not get a trap overhead, and keep the mitigation permanently
    on or off instead of switching it on exception entry/exit.
    
    In any case, default to the mitigation being enabled.
    
    Reviewed-by: Julien Grall <julien.grall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7037bd9fc07329f8a2e6383c65876a35ba33a12
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:24 2018 +0100

    arm64: Add ARCH_WORKAROUND_2 probing
    
    commit a725e3dda1813ed306734823ac4c65ca04e38500 upstream.
    
    As for Spectre variant-2, we rely on SMCCC 1.1 to provide the
    discovery mechanism for detecting the SSBD mitigation.
    
    A new capability is also allocated for that purpose, and a
    config option.
    
    Reviewed-by: Julien Grall <julien.grall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8174bd75c8b9d3ed5598f39f0a3c7050e9cbbe6
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:23 2018 +0100

    arm64: Add per-cpu infrastructure to call ARCH_WORKAROUND_2
    
    commit 5cf9ce6e5ea50f805c6188c04ed0daaec7b6887d upstream.
    
    In a heterogeneous system, we can end up with both affected and
    unaffected CPUs. Let's check their status before calling into the
    firmware.
    
    Reviewed-by: Julien Grall <julien.grall@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be331630903b1c6355178d116d3bfe52f20a3ac7
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:22 2018 +0100

    arm64: Call ARCH_WORKAROUND_2 on transitions between EL0 and EL1
    
    commit 8e2906245f1e3b0d027169d9f2e55ce0548cb96e upstream.
    
    In order for the kernel to protect itself, let's call the SSBD mitigation
    implemented by the higher exception level (either hypervisor or firmware)
    on each transition between userspace and kernel.
    
    We must take the PSCI conduit into account in order to target the
    right exception level, hence the introduction of a runtime patching
    callback.
    
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Julien Grall <julien.grall@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1b5c1958391b921bce2ffd95ddfcd3f1e950c99
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:21 2018 +0100

    arm/arm64: smccc: Add SMCCC-specific return codes
    
    commit eff0e9e1078ea7dc1d794dc50e31baef984c46d7 upstream.
    
    We've so far used the PSCI return codes for SMCCC because they
    were extremely similar. But with the new ARM DEN 0070A specification,
    "NOT_REQUIRED" (-2) is clashing with PSCI's "PSCI_RET_INVALID_PARAMS".
    
    Let's bite the bullet and add SMCCC specific return codes. Users
    can be repainted as and when required.
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cab367c1c9b7797d7747a523935a90dc05ff24a1
Author: Christoffer Dall <christoffer.dall@linaro.org>
Date:   Fri Jul 20 10:56:20 2018 +0100

    KVM: arm64: Avoid storing the vcpu pointer on the stack
    
    Commit 4464e210de9e80e38de59df052fe09ea2ff80b1b upstream.
    
    We already have the percpu area for the host cpu state, which points to
    the VCPU, so there's no need to store the VCPU pointer on the stack on
    every context switch.  We can be a little more clever and just use
    tpidr_el2 for the percpu offset and load the VCPU pointer from the host
    context.
    
    This has the benefit of being able to retrieve the host context even
    when our stack is corrupted, and it has a potential performance benefit
    because we trade a store plus a load for an mrs and a load on a round
    trip to the guest.
    
    This does require us to calculate the percpu offset without including
    the offset from the kernel mapping of the percpu array to the linear
    mapping of the array (which is what we store in tpidr_el1), because a
    PC-relative generated address in EL2 is already giving us the hyp alias
    of the linear mapping of a kernel address.  We do this in
    __cpu_init_hyp_mode() by using kvm_ksym_ref().
    
    The code that accesses ESR_EL2 was previously using an alternative to
    use the _EL1 accessor on VHE systems, but this was actually unnecessary
    as the _EL1 accessor aliases the ESR_EL2 register on VHE, and the _EL2
    accessor does the same thing on both systems.
    
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42768259386bd29562954cb815237bf0608ebbae
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:19 2018 +0100

    KVM: arm/arm64: Do not use kern_hyp_va() with kvm_vgic_global_state
    
    Commit 44a497abd621a71c645f06d3d545ae2f46448830 upstream.
    
    kvm_vgic_global_state is part of the read-only section, and is
    usually accessed using a PC-relative address generation (adrp + add).
    
    It is thus useless to use kern_hyp_va() on it, and actively problematic
    if kern_hyp_va() becomes non-idempotent. On the other hand, there is
    no way that the compiler is going to guarantee that such access is
    always PC relative.
    
    So let's bite the bullet and provide our own accessor.
    
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: James Morse <james.morse@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e75f25aadb52f64e124f88e4eb1e6128900c06a
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Jul 20 10:56:18 2018 +0100

    arm64: alternatives: Add dynamic patching feature
    
    Commit dea5e2a4c5bcf196f879a66cebdcca07793e8ba4 upstream.
    
    We've so far relied on a patching infrastructure that only gave us
    a single alternative, without any way to provide a range of potential
    replacement instructions. For a single feature, this is an all or
    nothing thing.
    
    It would be interesting to have a more flexible grained way of patching
    the kernel though, where we could dynamically tune the code that gets
    injected.
    
    In order to achive this, let's introduce a new form of dynamic patching,
    assiciating a callback to a patching site. This callback gets source and
    target locations of the patching request, as well as the number of
    instructions to be patched.
    
    Dynamic patching is declared with the new ALTERNATIVE_CB and alternative_cb
    directives:
    
            asm volatile(ALTERNATIVE_CB("mov %0, #0\n", callback)
                         : "r" (v));
    or
            alternative_cb callback
                    mov     x0, #0
            alternative_cb_end
    
    where callback is the C function computing the alternative.
    
    Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8bace8ac81580d0e1b95563411bbf898b1d19787
Author: James Morse <james.morse@arm.com>
Date:   Fri Jul 20 10:56:17 2018 +0100

    KVM: arm64: Stop save/restoring host tpidr_el1 on VHE
    
    Commit 1f742679c33bc083722cb0b442a95d458c491b56 upstream.
    
    Now that a VHE host uses tpidr_el2 for the cpu offset we no longer
    need KVM to save/restore tpidr_el1. Move this from the 'common' code
    into the non-vhe code. While we're at it, on VHE we don't need to
    save the ELR or SPSR as kernel_entry in entry.S will have pushed these
    onto the kernel stack, and will restore them from there. Move these
    to the non-vhe code as we need them to get back to the host.
    
    Finally remove the always-copy-tpidr we hid in the stage2 setup
    code, cpufeature's enable callback will do this for VHE, we only
    need KVM to do it for non-vhe. Add the copy into kvm-init instead.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Christoffer Dall <cdall@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eea59020a7f2993018ccde317387031c04c62036
Author: James Morse <james.morse@arm.com>
Date:   Fri Jul 20 10:56:16 2018 +0100

    arm64: alternatives: use tpidr_el2 on VHE hosts
    
    Commit 6d99b68933fbcf51f84fcbba49246ce1209ec193 upstream.
    
    Now that KVM uses tpidr_el2 in the same way as Linux's cpu_offset in
    tpidr_el1, merge the two. This saves KVM from save/restoring tpidr_el1
    on VHE hosts, and allows future code to blindly access per-cpu variables
    without triggering world-switch.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Christoffer Dall <cdall@linaro.org>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa043b975c9aa7dc3a770217115d114cc3ca0d48
Author: James Morse <james.morse@arm.com>
Date:   Fri Jul 20 10:56:15 2018 +0100

    KVM: arm64: Change hyp_panic()s dependency on tpidr_el2
    
    Commit c97e166e54b662717d20ec2e36761758d2b6a7c2 upstream.
    
    Make tpidr_el2 a cpu-offset for per-cpu variables in the same way the
    host uses tpidr_el1. This lets tpidr_el{1,2} have the same value, and
    on VHE they can be the same register.
    
    KVM calls hyp_panic() when anything unexpected happens. This may occur
    while a guest owns the EL1 registers. KVM stashes the vcpu pointer in
    tpidr_el2, which it uses to find the host context in order to restore
    the host EL1 registers before parachuting into the host's panic().
    
    The host context is a struct kvm_cpu_context allocated in the per-cpu
    area, and mapped to hyp. Given the per-cpu offset for this CPU, this is
    easy to find. Change hyp_panic() to take a pointer to the
    struct kvm_cpu_context. Wrap these calls with an asm function that
    retrieves the struct kvm_cpu_context from the host's per-cpu area.
    
    Copy the per-cpu offset from the hosts tpidr_el1 into tpidr_el2 during
    kvm init. (Later patches will make this unnecessary for VHE hosts)
    
    We print out the vcpu pointer as part of the panic message. Add a back
    reference to the 'running vcpu' in the host cpu context to preserve this.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Christoffer Dall <cdall@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a654e6939152cea11ad339a9976b4d57bee5928
Author: James Morse <james.morse@arm.com>
Date:   Fri Jul 20 10:56:14 2018 +0100

    KVM: arm/arm64: Convert kvm_host_cpu_state to a static per-cpu allocation
    
    Commit 36989e7fd386a9a5822c48691473863f8fbb404d upstream.
    
    kvm_host_cpu_state is a per-cpu allocation made from kvm_arch_init()
    used to store the host EL1 registers when KVM switches to a guest.
    
    Make it easier for ASM to generate pointers into this per-cpu memory
    by making it a static allocation.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Acked-by: Christoffer Dall <cdall@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02891fdbfd1e61feec902b640d9eb415f04de693
Author: James Morse <james.morse@arm.com>
Date:   Fri Jul 20 10:56:13 2018 +0100

    KVM: arm64: Store vcpu on the stack during __guest_enter()
    
    Commit 32b03d1059667a39e089c45ee38ec9c16332430f upstream.
    
    KVM uses tpidr_el2 as its private vcpu register, which makes sense for
    non-vhe world switch as only KVM can access this register. This means
    vhe Linux has to use tpidr_el1, which KVM has to save/restore as part
    of the host context.
    
    If the SDEI handler code runs behind KVMs back, it mustn't access any
    per-cpu variables. To allow this on systems with vhe we need to make
    the host use tpidr_el2, saving KVM from save/restoring it.
    
    __guest_enter() stores the host_ctxt on the stack, do the same with
    the vcpu.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Christoffer Dall <cdall@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c488ae439ded49d20fcd264dec39f30300bbd2c1
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Jul 20 10:56:12 2018 +0100

    arm64: assembler: introduce ldr_this_cpu
    
    Commit 1b7e2296a822dfd2349960addc42a139360ce769 upstream.
    
    Shortly we will want to load a percpu variable in the return from
    userspace path. We can save an instruction by folding the addition of
    the percpu offset into the load instruction, and this patch adds a new
    helper to do so.
    
    At the same time, we clean up this_cpu_ptr for consistency. As with
    {adr,ldr,str}_l, we change the template to take the destination register
    first, and name this dst. Secondly, we rename the macro to adr_this_cpu,
    following the scheme of adr_l, and matching the newly added
    ldr_this_cpu.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Laura Abbott <labbott@redhat.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: James Morse <james.morse@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d31a56d23eac2cc53559731b5a7c17fd1a1b0450
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Jul 18 18:57:27 2018 +0900

    net/nfc: Avoid stalls when nfc_alloc_send_skb() returned NULL.
    
    commit 3bc53be9db21040b5d2de4d455f023c8c494aa68 upstream.
    
    syzbot is reporting stalls at nfc_llcp_send_ui_frame() [1]. This is
    because nfc_llcp_send_ui_frame() is retrying the loop without any delay
    when nonblocking nfc_alloc_send_skb() returned NULL.
    
    Since there is no need to use MSG_DONTWAIT if we retry until
    sock_alloc_send_pskb() succeeds, let's use blocking call.
    Also, in case an unexpected error occurred, let's break the loop
    if blocking nfc_alloc_send_skb() failed.
    
    [1] https://syzkaller.appspot.com/bug?id=4a131cc571c3733e0eff6bc673f4e36ae48f19c6
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+d29d18215e477cfbfbdd@syzkaller.appspotmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 863d5568b74171ad7e703fe0b98ceea11d3632ec
Author: Santosh Shilimkar <santosh.shilimkar@oracle.com>
Date:   Thu Jun 14 11:52:34 2018 -0700

    rds: avoid unenecessary cong_update in loop transport
    
    commit f1693c63ab133d16994cc50f773982b5905af264 upstream.
    
    Loop transport which is self loopback, remote port congestion
    update isn't relevant. Infact the xmit path already ignores it.
    Receive path needs to do the same.
    
    Reported-by: syzbot+4c20b3866171ce8441d2@syzkaller.appspotmail.com
    Reviewed-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad8b1ffc3efae2f65080bdb11145c87d299b8f9a
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Jul 9 13:43:38 2018 +0200

    netfilter: ipv6: nf_defrag: drop skb dst before queueing
    
    commit 84379c9afe011020e797e3f50a662b08a6355dcf upstream.
    
    Eric Dumazet reports:
     Here is a reproducer of an annoying bug detected by syzkaller on our production kernel
     [..]
     ./b78305423 enable_conntrack
     Then :
     sleep 60
     dmesg | tail -10
     [  171.599093] unregister_netdevice: waiting for lo to become free. Usage count = 2
     [  181.631024] unregister_netdevice: waiting for lo to become free. Usage count = 2
     [  191.687076] unregister_netdevice: waiting for lo to become free. Usage count = 2
     [  201.703037] unregister_netdevice: waiting for lo to become free. Usage count = 2
     [  211.711072] unregister_netdevice: waiting for lo to become free. Usage count = 2
     [  221.959070] unregister_netdevice: waiting for lo to become free. Usage count = 2
    
    Reproducer sends ipv6 fragment that hits nfct defrag via LOCAL_OUT hook.
    skb gets queued until frag timer expiry -- 1 minute.
    
    Normally nf_conntrack_reasm gets called during prerouting, so skb has
    no dst yet which might explain why this wasn't spotted earlier.
    
    Reported-by: Eric Dumazet <eric.dumazet@gmail.com>
    Reported-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Tested-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d0ce44dafd3d2540fbef3deeb5355faf009862c
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Jul 11 10:46:29 2018 -0700

    KEYS: DNS: fix parsing multiple options
    
    commit c604cb767049b78b3075497b80ebb8fd530ea2cc upstream.
    
    My recent fix for dns_resolver_preparse() printing very long strings was
    incomplete, as shown by syzbot which still managed to hit the
    WARN_ONCE() in set_precision() by adding a crafted "dns_resolver" key:
    
        precision 50001 too large
        WARNING: CPU: 7 PID: 864 at lib/vsprintf.c:2164 vsnprintf+0x48a/0x5a0
    
    The bug this time isn't just a printing bug, but also a logical error
    when multiple options ("#"-separated strings) are given in the key
    payload.  Specifically, when separating an option string into name and
    value, if there is no value then the name is incorrectly considered to
    end at the end of the key payload, rather than the end of the current
    option.  This bypasses validation of the option length, and also means
    that specifying multiple options is broken -- which presumably has gone
    unnoticed as there is currently only one valid option anyway.
    
    A similar problem also applied to option values, as the kstrtoul() when
    parsing the "dnserror" option will read past the end of the current
    option and into the next option.
    
    Fix these bugs by correctly computing the length of the option name and
    by copying the option value, null-terminated, into a temporary buffer.
    
    Reproducer for the WARN_ONCE() that syzbot hit:
    
        perl -e 'print "#A#", "\0" x 50000' | keyctl padd dns_resolver desc @s
    
    Reproducer for "dnserror" option being parsed incorrectly (expected
    behavior is to fail when seeing the unknown option "foo", actual
    behavior was to read the dnserror value as "1#foo" and fail there):
    
        perl -e 'print "#dnserror=1#foo\0"' | keyctl padd dns_resolver desc @s
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Fixes: 4a2d789267e0 ("DNS: If the DNS server returns an error, allow that to be cached [ver #2]")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec5e52a881fe7df745a45262e486f73fc6bd6b88
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Jul 13 16:59:27 2018 -0700

    reiserfs: fix buffer overflow with long warning messages
    
    commit fe10e398e860955bac4d28ec031b701d358465e4 upstream.
    
    ReiserFS prepares log messages into a 1024-byte buffer with no bounds
    checks.  Long messages, such as the "unknown mount option" warning when
    userspace passes a crafted mount options string, overflow this buffer.
    This causes KASAN to report a global-out-of-bounds write.
    
    Fix it by truncating messages to the buffer size.
    
    Link: http://lkml.kernel.org/r/20180707203621.30922-1-ebiggers3@gmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+b890b3335a4d8c608963@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 064d9e9744728d0c10ef5e22e955e8886f3dfcca
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jun 6 12:14:56 2018 +0200

    netfilter: ebtables: reject non-bridge targets
    
    commit 11ff7288beb2b7da889a014aff0a7b80bf8efcf3 upstream.
    
    the ebtables evaluation loop expects targets to return
    positive values (jumps), or negative values (absolute verdicts).
    
    This is completely different from what xtables does.
    In xtables, targets are expected to return the standard netfilter
    verdicts, i.e. NF_DROP, NF_ACCEPT, etc.
    
    ebtables will consider these as jumps.
    
    Therefore reject any target found due to unspec fallback.
    v2: also reject watchers.  ebtables ignores their return value, so
    a target that assumes skb ownership (and returns NF_STOLEN) causes
    use-after-free.
    
    The only watchers in the 'ebtables' front-end are log and nflog;
    both have AF_BRIDGE specific wrappers on kernel side.
    
    Reported-by: syzbot+2b43f681169a2a0d306a@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6ed63bc39e08fe761f9d100937d01fba9b098c1
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Sun Jul 15 21:53:20 2018 +0200

    net: lan78xx: Fix race in tx pending skb size calculation
    
    commit dea39aca1d7aef1e2b95b07edeacf04cc8863a2e upstream.
    
    The skb size calculation in lan78xx_tx_bh is in race with the start_xmit,
    which could lead to rare kernel oopses. So protect the whole skb walk with
    a spin lock. As a benefit we can unlink the skb directly.
    
    This patch was tested on Raspberry Pi 3B+
    
    Link: https://github.com/raspberrypi/linux/issues/2608
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Floris Bos <bos@je-eigen-domein.nl>
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 254f52df9b1ecbd0ee2a9f31b506924cb61ca850
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Thu Jun 28 10:02:27 2018 +0800

    rtlwifi: rtl8821ae: fix firmware is not ready to run
    
    commit 9a98302de19991d51e067b88750585203b2a3ab6 upstream.
    
    Without this patch, firmware will not run properly on rtl8821ae, and it
    causes bad user experience. For example, bad connection performance with
    low rate, higher power consumption, and so on.
    
    rtl8821ae uses two kinds of firmwares for normal and WoWlan cases, and
    each firmware has firmware data buffer and size individually. Original
    code always overwrite size of normal firmware rtlpriv->rtlhal.fwsize, and
    this mismatch causes firmware checksum error, then firmware can't start.
    
    In this situation, driver gives message "Firmware is not ready to run!".
    
    Fixes: fe89707f0afa ("rtlwifi: rtl8821ae: Simplify loading of WOWLAN firmware")
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Cc: Stable <stable@vger.kernel.org> # 4.0+
    Reviewed-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53e795c755de6e20516ae4387b78c4d92f841e2b
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Mon Jul 16 20:59:58 2018 -0500

    net: cxgb3_main: fix potential Spectre v1
    
    commit 676bcfece19f83621e905aa55b5ed2d45cc4f2d3 upstream.
    
    t.qset_idx can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c:2286 cxgb_extension_ioctl()
    warn: potential spectre issue 'adapter->msix_info'
    
    Fix this by sanitizing t.qset_idx before using it to index
    adapter->msix_info
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 224d2337c000090fca8e364e9e7b616c2f67adda
Author: Alex Vesker <valex@mellanox.com>
Date:   Tue Jun 12 16:14:31 2018 +0300

    net/mlx5: Fix command interface race in polling mode
    
    [ Upstream commit d412c31dae053bf30a1bc15582a9990df297a660 ]
    
    The command interface can work in two modes: Events and Polling.
    In the general case, each time we invoke a command, a work is
    queued to handle it.
    
    When working in events, the interrupt handler completes the
    command execution. On the other hand, when working in polling
    mode, the work itself completes it.
    
    Due to a bug in the work handler, a command could have been
    completed by the interrupt handler, while the work handler
    hasn't finished yet, causing the it to complete once again
    if the command interface mode was changed from Events to
    polling after the interrupt handler was called.
    
    mlx5_unload_one()
            mlx5_stop_eqs()
                    // Destroy the EQ before cmd EQ
                    ...cmd_work_handler()
                            write_doorbell()
                            --> EVENT_TYPE_CMD
                                    mlx5_cmd_comp_handler() // First free
                                            free_ent(cmd, ent->idx)
                                            complete(&ent->done)
    
            <-- mlx5_stop_eqs //cmd was complete
                    // move to polling before destroying the last cmd EQ
                    mlx5_cmd_use_polling()
                            cmd->mode = POLL;
    
                    --> cmd_work_handler (continues)
                            if (cmd->mode == POLL)
                                    mlx5_cmd_comp_handler() // Double free
    
    The solution is to store the cmd->mode before writing the doorbell.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dc96f7205d4bc8c99187c29dcdca5d31d6e7383
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jun 21 14:16:02 2018 -0700

    net/packet: fix use-after-free
    
    [ Upstream commit 945d015ee0c3095d2290e845565a23dedfd8027c ]
    
    We should put copy_skb in receive_queue only after
    a successful call to virtio_net_hdr_from_skb().
    
    syzbot report :
    
    BUG: KASAN: use-after-free in __skb_unlink include/linux/skbuff.h:1843 [inline]
    BUG: KASAN: use-after-free in __skb_dequeue include/linux/skbuff.h:1863 [inline]
    BUG: KASAN: use-after-free in skb_dequeue+0x16a/0x180 net/core/skbuff.c:2815
    Read of size 8 at addr ffff8801b044ecc0 by task syz-executor217/4553
    
    CPU: 0 PID: 4553 Comm: syz-executor217 Not tainted 4.18.0-rc1+ #111
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x2b4 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     __skb_unlink include/linux/skbuff.h:1843 [inline]
     __skb_dequeue include/linux/skbuff.h:1863 [inline]
     skb_dequeue+0x16a/0x180 net/core/skbuff.c:2815
     skb_queue_purge+0x26/0x40 net/core/skbuff.c:2852
     packet_set_ring+0x675/0x1da0 net/packet/af_packet.c:4331
     packet_release+0x630/0xd90 net/packet/af_packet.c:2991
     __sock_release+0xd7/0x260 net/socket.c:603
     sock_close+0x19/0x20 net/socket.c:1186
     __fput+0x35b/0x8b0 fs/file_table.c:209
     ____fput+0x15/0x20 fs/file_table.c:243
     task_work_run+0x1ec/0x2a0 kernel/task_work.c:113
     exit_task_work include/linux/task_work.h:22 [inline]
     do_exit+0x1b08/0x2750 kernel/exit.c:865
     do_group_exit+0x177/0x440 kernel/exit.c:968
     __do_sys_exit_group kernel/exit.c:979 [inline]
     __se_sys_exit_group kernel/exit.c:977 [inline]
     __x64_sys_exit_group+0x3e/0x50 kernel/exit.c:977
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4448e9
    Code: Bad RIP value.
    RSP: 002b:00007ffd5f777ca8 EFLAGS: 00000202 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00000000004448e9
    RDX: 00000000004448e9 RSI: 000000000000fcfb RDI: 0000000000000001
    RBP: 00000000006cf018 R08: 00007ffd0000a45b R09: 0000000000000000
    R10: 00007ffd5f777e48 R11: 0000000000000202 R12: 00000000004021f0
    R13: 0000000000402280 R14: 0000000000000000 R15: 0000000000000000
    
    Allocated by task 4553:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
     kmem_cache_alloc+0x12e/0x760 mm/slab.c:3554
     skb_clone+0x1f5/0x500 net/core/skbuff.c:1282
     tpacket_rcv+0x28f7/0x3200 net/packet/af_packet.c:2221
     deliver_skb net/core/dev.c:1925 [inline]
     deliver_ptype_list_skb net/core/dev.c:1940 [inline]
     __netif_receive_skb_core+0x1bfb/0x3680 net/core/dev.c:4611
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:4693
     netif_receive_skb_internal+0x12e/0x7d0 net/core/dev.c:4767
     netif_receive_skb+0xbf/0x420 net/core/dev.c:4791
     tun_rx_batched.isra.55+0x4ba/0x8c0 drivers/net/tun.c:1571
     tun_get_user+0x2af1/0x42f0 drivers/net/tun.c:1981
     tun_chr_write_iter+0xb9/0x154 drivers/net/tun.c:2009
     call_write_iter include/linux/fs.h:1795 [inline]
     new_sync_write fs/read_write.c:474 [inline]
     __vfs_write+0x6c6/0x9f0 fs/read_write.c:487
     vfs_write+0x1f8/0x560 fs/read_write.c:549
     ksys_write+0x101/0x260 fs/read_write.c:598
     __do_sys_write fs/read_write.c:610 [inline]
     __se_sys_write fs/read_write.c:607 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:607
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 4553:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kmem_cache_free+0x86/0x2d0 mm/slab.c:3756
     kfree_skbmem+0x154/0x230 net/core/skbuff.c:582
     __kfree_skb net/core/skbuff.c:642 [inline]
     kfree_skb+0x1a5/0x580 net/core/skbuff.c:659
     tpacket_rcv+0x189e/0x3200 net/packet/af_packet.c:2385
     deliver_skb net/core/dev.c:1925 [inline]
     deliver_ptype_list_skb net/core/dev.c:1940 [inline]
     __netif_receive_skb_core+0x1bfb/0x3680 net/core/dev.c:4611
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:4693
     netif_receive_skb_internal+0x12e/0x7d0 net/core/dev.c:4767
     netif_receive_skb+0xbf/0x420 net/core/dev.c:4791
     tun_rx_batched.isra.55+0x4ba/0x8c0 drivers/net/tun.c:1571
     tun_get_user+0x2af1/0x42f0 drivers/net/tun.c:1981
     tun_chr_write_iter+0xb9/0x154 drivers/net/tun.c:2009
     call_write_iter include/linux/fs.h:1795 [inline]
     new_sync_write fs/read_write.c:474 [inline]
     __vfs_write+0x6c6/0x9f0 fs/read_write.c:487
     vfs_write+0x1f8/0x560 fs/read_write.c:549
     ksys_write+0x101/0x260 fs/read_write.c:598
     __do_sys_write fs/read_write.c:610 [inline]
     __se_sys_write fs/read_write.c:607 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:607
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801b044ecc0
     which belongs to the cache skbuff_head_cache of size 232
    The buggy address is located 0 bytes inside of
     232-byte region [ffff8801b044ecc0, ffff8801b044eda8)
    The buggy address belongs to the page:
    page:ffffea0006c11380 count:1 mapcount:0 mapping:ffff8801d9be96c0 index:0x0
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffffea0006c17988 ffff8801d9bec248 ffff8801d9be96c0
    raw: 0000000000000000 ffff8801b044e040 000000010000000c 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801b044eb80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8801b044ec00: 00 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc
    >ffff8801b044ec80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                               ^
     ffff8801b044ed00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801b044ed80: fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc
    
    Fixes: 58d19b19cd99 ("packet: vnet_hdr support for tpacket_rcv")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e11eb6a3f96e7c05450a8bbc908bce0c9c13c77e
Author: Jason Wang <jasowang@redhat.com>
Date:   Thu Jun 21 13:11:31 2018 +0800

    vhost_net: validate sock before trying to put its fd
    
    [ Upstream commit b8f1f65882f07913157c44673af7ec0b308d03eb ]
    
    Sock will be NULL if we pass -1 to vhost_net_set_backend(), but when
    we meet errors during ubuf allocation, the code does not check for
    NULL before calling sockfd_put(), this will lead NULL
    dereferencing. Fixing by checking sock pointer before.
    
    Fixes: bab632d69ee4 ("vhost: vhost TX zero-copy support")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65fb77c3bab33eae0077247f330c6097c32217f9
Author: Ilpo Järvinen <ilpo.jarvinen@helsinki.fi>
Date:   Fri Jun 29 13:07:53 2018 +0300

    tcp: prevent bogus FRTO undos with non-SACK flows
    
    [ Upstream commit 1236f22fbae15df3736ab4a984c64c0c6ee6254c ]
    
    If SACK is not enabled and the first cumulative ACK after the RTO
    retransmission covers more than the retransmitted skb, a spurious
    FRTO undo will trigger (assuming FRTO is enabled for that RTO).
    The reason is that any non-retransmitted segment acknowledged will
    set FLAG_ORIG_SACK_ACKED in tcp_clean_rtx_queue even if there is
    no indication that it would have been delivered for real (the
    scoreboard is not kept with TCPCB_SACKED_ACKED bits in the non-SACK
    case so the check for that bit won't help like it does with SACK).
    Having FLAG_ORIG_SACK_ACKED set results in the spurious FRTO undo
    in tcp_process_loss.
    
    We need to use more strict condition for non-SACK case and check
    that none of the cumulatively ACKed segments were retransmitted
    to prove that progress is due to original transmissions. Only then
    keep FLAG_ORIG_SACK_ACKED set, allowing FRTO undo to proceed in
    non-SACK case.
    
    (FLAG_ORIG_SACK_ACKED is planned to be renamed to FLAG_ORIG_PROGRESS
    to better indicate its purpose but to keep this change minimal, it
    will be done in another patch).
    
    Besides burstiness and congestion control violations, this problem
    can result in RTO loop: When the loss recovery is prematurely
    undoed, only new data will be transmitted (if available) and
    the next retransmission can occur only after a new RTO which in case
    of multiple losses (that are not for consecutive packets) requires
    one RTO per loss to recover.
    
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@helsinki.fi>
    Tested-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63253726a5154b0a456667afc75a7cf17b7818d0
Author: Yuchung Cheng <ycheng@google.com>
Date:   Wed Jun 27 16:04:48 2018 -0700

    tcp: fix Fast Open key endianness
    
    [ Upstream commit c860e997e9170a6d68f9d1e6e2cf61f572191aaf ]
    
    Fast Open key could be stored in different endian based on the CPU.
    Previously hosts in different endianness in a server farm using
    the same key config (sysctl value) would produce different cookies.
    This patch fixes it by always storing it as little endian to keep
    same API for LE hosts.
    
    Reported-by: Daniele Iamartino <danielei@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e056369903c8a5a6ae34ed29debfd45dc01fc08
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Jun 25 09:26:27 2018 +0200

    r8152: napi hangup fix after disconnect
    
    [ Upstream commit 0ee1f4734967af8321ecebaf9c74221ace34f2d5 ]
    
    When unplugging an r8152 adapter while the interface is UP, the NIC
    becomes unusable.  usb->disconnect (aka rtl8152_disconnect) deletes
    napi. Then, rtl8152_disconnect calls unregister_netdev and that invokes
    netdev->ndo_stop (aka rtl8152_close). rtl8152_close tries to
    napi_disable, but the napi is already deleted by disconnect above. So
    the first while loop in napi_disable never finishes. This results in
    complete deadlock of the network layer as there is rtnl_mutex held by
    unregister_netdev.
    
    So avoid the call to napi_disable in rtl8152_close when the device is
    already gone.
    
    The other calls to usb_kill_urb, cancel_delayed_work_sync,
    netif_stop_queue etc. seem to be fine. The urb and netdev is not
    destroyed yet.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: linux-usb@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0a508a5c854d5c06eb0f0577f286f553bf45cfb
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Sat Jun 23 23:22:52 2018 +0200

    qmi_wwan: add support for the Dell Wireless 5821e module
    
    [ Upstream commit e7e197edd09c25774b4f12cab19f9d5462f240f4 ]
    
    This module exposes two USB configurations: a QMI+AT capable setup on
    USB config #1 and a MBIM capable setup on USB config #2.
    
    By default the kernel will choose the MBIM capable configuration as
    long as the cdc_mbim driver is available. This patch adds support for
    the QMI port in the secondary configuration.
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b796049605886c51dc12a646e7de8e39fa1aedf
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@cavium.com>
Date:   Sun Jul 1 20:03:05 2018 -0700

    qed: Limit msix vectors in kdump kernel to the minimum required count.
    
    [ Upstream commit bb7858ba1102f82470a917e041fd23e6385c31be ]
    
    Memory size is limited in the kdump kernel environment. Allocation of more
    msix-vectors (or queues) consumes few tens of MBs of memory, which might
    lead to the kdump kernel failure.
    This patch adds changes to limit the number of MSI-X vectors in kdump
    kernel to minimum required value (i.e., 2 per engine).
    
    Fixes: fe56b9e6a ("qed: Add module with basic common support")
    Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a648a4636d17810f008529ec181af932cf4684b7
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@cavium.com>
Date:   Sun Jul 1 20:03:07 2018 -0700

    qed: Fix use of incorrect size in memcpy call.
    
    [ Upstream commit cc9b27cdf7bd3c86df73439758ac1564bc8f5bbe ]
    
    Use the correct size value while copying chassis/port id values.
    
    Fixes: 6ad8c632e ("qed: Add support for query/config dcbx.")
    Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32490f4d76ed005b35d826ee4807dafad95f9ba8
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 19 19:18:50 2018 -0700

    net: sungem: fix rx checksum support
    
    [ Upstream commit 12b03558cef6d655d0d394f5e98a6fd07c1f6c0f ]
    
    After commit 88078d98d1bb ("net: pskb_trim_rcsum() and CHECKSUM_COMPLETE
    are friends"), sungem owners reported the infamous "eth0: hw csum failure"
    message.
    
    CHECKSUM_COMPLETE has in fact never worked for this driver, but this
    was masked by the fact that upper stacks had to strip the FCS, and
    therefore skb->ip_summed was set back to CHECKSUM_NONE before
    my recent change.
    
    Driver configures a number of bytes to skip when the chip computes
    the checksum, and for some reason only half of the Ethernet header
    was skipped.
    
    Then a second problem is that we should strip the FCS by default,
    unless the driver is updated to eventually support NETIF_F_RXFCS in
    the future.
    
    Finally, a driver should check if NETIF_F_RXCSUM feature is enabled
    or not, so that the admin can turn off rx checksum if wanted.
    
    Many thanks to Andreas Schwab and Mathieu Malaterre for their
    help in debugging this issue.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Meelis Roos <mroos@linux.ee>
    Reported-by: Mathieu Malaterre <malat@debian.org>
    Reported-by: Andreas Schwab <schwab@linux-m68k.org>
    Tested-by: Andreas Schwab <schwab@linux-m68k.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f1fbe1692afda4800290644606a9175175a84bd
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jun 15 13:27:31 2018 +0300

    net_sched: blackhole: tell upper qdisc about dropped packets
    
    [ Upstream commit 7e85dc8cb35abf16455f1511f0670b57c1a84608 ]
    
    When blackhole is used on top of classful qdisc like hfsc it breaks
    qlen and backlog counters because packets are disappear without notice.
    
    In HFSC non-zero qlen while all classes are inactive triggers warning:
    WARNING: ... at net/sched/sch_hfsc.c:1393 hfsc_dequeue+0xba4/0xe90 [sch_hfsc]
    and schedules watchdog work endlessly.
    
    This patch return __NET_XMIT_BYPASS in addition to NET_XMIT_SUCCESS,
    this flag tells upper layer: this packet is gone and isn't queued.
    
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14e9e6527a21eb37cecdc682c96979dbe7cf7e32
Author: Shay Agroskin <shayag@mellanox.com>
Date:   Tue May 22 14:14:02 2018 +0300

    net/mlx5: Fix wrong size allocation for QoS ETC TC regitster
    
    [ Upstream commit d14fcb8d877caf1b8d6bd65d444bf62b21f2070c ]
    
    The driver allocates wrong size (due to wrong struct name) when issuing
    a query/set request to NIC's register.
    
    Fixes: d8880795dabf ("net/mlx5e: Implement DCBNL IEEE max rate")
    Signed-off-by: Shay Agroskin <shayag@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b3cc7f9b39a02a981a89e42df12dcbc610bff3f
Author: Alex Vesker <valex@mellanox.com>
Date:   Fri May 25 20:25:59 2018 +0300

    net/mlx5: Fix incorrect raw command length parsing
    
    [ Upstream commit 603b7bcff824740500ddfa001d7a7168b0b38542 ]
    
    The NULL character was not set correctly for the string containing
    the command length, this caused failures reading the output of the
    command due to a random length. The fix is to initialize the output
    length string.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e555ae018ba40c8259fa8bc3952e2f01d9bec89c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jun 22 06:44:15 2018 -0700

    net: dccp: switch rx_tstamp_last_feedback to monotonic clock
    
    [ Upstream commit 0ce4e70ff00662ad7490e545ba0cd8c1fa179fca ]
    
    To compute delays, better not use time of the day which can
    be changed by admins or malicious programs.
    
    Also change ccid3_first_li() to use s64 type for delta variable
    to avoid potential overflows.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Gerrit Renker <gerrit@erg.abdn.ac.uk>
    Cc: dccp@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87cd5e4acdbebe0a4ec47ef5b0d31fd1f435067c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jun 22 06:44:14 2018 -0700

    net: dccp: avoid crash in ccid3_hc_rx_send_feedback()
    
    [ Upstream commit 74174fe5634ffbf645a7ca5a261571f700b2f332 ]
    
    On fast hosts or malicious bots, we trigger a DCCP_BUG() which
    seems excessive.
    
    syzbot reported :
    
    BUG: delta (-6195) <= 0 at net/dccp/ccids/ccid3.c:628/ccid3_hc_rx_send_feedback()
    CPU: 1 PID: 18 Comm: ksoftirqd/1 Not tainted 4.18.0-rc1+ #112
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x2b4 lib/dump_stack.c:113
     ccid3_hc_rx_send_feedback net/dccp/ccids/ccid3.c:628 [inline]
     ccid3_hc_rx_packet_recv.cold.16+0x38/0x71 net/dccp/ccids/ccid3.c:793
     ccid_hc_rx_packet_recv net/dccp/ccid.h:185 [inline]
     dccp_deliver_input_to_ccids+0xf0/0x280 net/dccp/input.c:180
     dccp_rcv_established+0x87/0xb0 net/dccp/input.c:378
     dccp_v4_do_rcv+0x153/0x180 net/dccp/ipv4.c:654
     sk_backlog_rcv include/net/sock.h:914 [inline]
     __sk_receive_skb+0x3ba/0xd80 net/core/sock.c:517
     dccp_v4_rcv+0x10f9/0x1f58 net/dccp/ipv4.c:875
     ip_local_deliver_finish+0x2eb/0xda0 net/ipv4/ip_input.c:215
     NF_HOOK include/linux/netfilter.h:287 [inline]
     ip_local_deliver+0x1e9/0x750 net/ipv4/ip_input.c:256
     dst_input include/net/dst.h:450 [inline]
     ip_rcv_finish+0x823/0x2220 net/ipv4/ip_input.c:396
     NF_HOOK include/linux/netfilter.h:287 [inline]
     ip_rcv+0xa18/0x1284 net/ipv4/ip_input.c:492
     __netif_receive_skb_core+0x2488/0x3680 net/core/dev.c:4628
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:4693
     process_backlog+0x219/0x760 net/core/dev.c:5373
     napi_poll net/core/dev.c:5771 [inline]
     net_rx_action+0x7da/0x1980 net/core/dev.c:5837
     __do_softirq+0x2e8/0xb17 kernel/softirq.c:284
     run_ksoftirqd+0x86/0x100 kernel/softirq.c:645
     smpboot_thread_fn+0x417/0x870 kernel/smpboot.c:164
     kthread+0x345/0x410 kernel/kthread.c:240
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:412
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Gerrit Renker <gerrit@erg.abdn.ac.uk>
    Cc: dccp@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7adadbf09463110a0bc9561250395c07f9011fb
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 21 12:56:04 2018 +0800

    ipvlan: fix IFLA_MTU ignored on NEWLINK
    
    [ Upstream commit 30877961b1cdd6fdca783c2e8c4f0f47e95dc58c ]
    
    Commit 296d48568042 ("ipvlan: inherit MTU from master device") adjusted
    the mtu from the master device when creating a ipvlan device, but it
    would also override the mtu value set in rtnl_create_link. It causes
    IFLA_MTU param not to take effect.
    
    So this patch is to not adjust the mtu if IFLA_MTU param is set when
    creating a ipvlan device.
    
    Fixes: 296d48568042 ("ipvlan: inherit MTU from master device")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b76942ac26f6d94d7d50abc9646d754b9ca4c428
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Fri Jun 29 13:28:07 2018 -0500

    atm: zatm: Fix potential Spectre v1
    
    [ Upstream commit ced9e191501e52b95e1b57b8e0db00943869eed0 ]
    
    pool can be indirectly controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    
    drivers/atm/zatm.c:1491 zatm_ioctl() warn: potential spectre issue
    'zatm_dev->pool_info' (local cap)
    
    Fix this by sanitizing pool before using it to index
    zatm_dev->pool_info
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e77e7d8f6bc00ec5d0b1d5194ae8093921f0c058
Author: Christian Lamparter <chunkeey@googlemail.com>
Date:   Fri Aug 25 15:47:24 2017 +0200

    crypto: crypto4xx - fix crypto4xx_build_pdr, crypto4xx_build_sdr leak
    
    commit 5d59ad6eea82ef8df92b4109615a0dde9d8093e9 upstream.
    
    If one of the later memory allocations in rypto4xx_build_pdr()
    fails: dev->pdr (and/or) dev->pdr_uinfo wouldn't be freed.
    
    crypto4xx_build_sdr() has the same issue with dev->sdr.
    
    Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af4b765a780b71f8d823bfd9123bd101fd12eb03
Author: Christian Lamparter <chunkeey@googlemail.com>
Date:   Fri Aug 25 15:47:14 2017 +0200

    crypto: crypto4xx - remove bad list_del
    
    commit a728a196d253530f17da5c86dc7dfbe58c5f7094 upstream.
    
    alg entries are only added to the list, after the registration
    was successful. If the registration failed, it was never added
    to the list in the first place.
    
    Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68bf812b35e1999656a1cd3ab1ffe07d023a1dfd
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Sun Oct 1 13:02:16 2017 +0200

    bcm63xx_enet: do not write to random DMA channel on BCM6345
    
    commit d6213c1f2ad54a964b77471690264ed685718928 upstream.
    
    The DMA controller regs actually point to DMA channel 0, so the write to
    ENETDMA_CFG_REG will actually modify a random DMA channel.
    
    Since DMA controller registers do not exist on BCM6345, guard the write
    with the usual check for dma_has_sram.
    
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5490a6ec598f201cccdd1de3e6356d51ed154b7
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Sun Oct 1 13:02:15 2017 +0200

    bcm63xx_enet: correct clock usage
    
    commit 9c86b846ce02f7e35d7234cf090b80553eba5389 upstream.
    
    Check the return code of prepare_enable and change one last instance of
    enable only to prepare_enable. Also properly disable and release the
    clock in error paths and on remove for enetsw.
    
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f61de8ef5c905ccc959099118986c4a18ba92f1b
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Oct 28 07:58:46 2016 +0200

    mtd: m25p80: consider max message size in m25p80_read
    
    commit 9e276de6a367cde07c1a63522152985d4e5cca8b upstream.
    
    Consider a message size limit when calculating the maximum amount
    of data that can be read.
    
    The message size limit has been introduced with 4.9, so cc it
    to stable.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Cyrille Pitchen <cyrille.pitchen@atmel.com>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78a65505cdf7b7392c963d3715269516bc812ef2
Author: alex chen <alex.chen@huawei.com>
Date:   Wed Nov 15 17:31:44 2017 -0800

    ocfs2: ip_alloc_sem should be taken in ocfs2_get_block()
    
    commit 3e4c56d41eef5595035872a2ec5a483f42e8917f upstream.
    
    ip_alloc_sem should be taken in ocfs2_get_block() when reading file in
    DIRECT mode to prevent concurrent access to extent tree with
    ocfs2_dio_end_io_write(), which may cause BUGON in the following
    situation:
    
    read file 'A'                                  end_io of writing file 'A'
    vfs_read
     __vfs_read
      ocfs2_file_read_iter
       generic_file_read_iter
        ocfs2_direct_IO
         __blockdev_direct_IO
          do_blockdev_direct_IO
           do_direct_IO
            get_more_blocks
             ocfs2_get_block
              ocfs2_extent_map_get_blocks
               ocfs2_get_clusters
                ocfs2_get_clusters_nocache()
                 ocfs2_search_extent_list
                  return the index of record which
                  contains the v_cluster, that is
                  v_cluster > rec[i]->e_cpos.
                                                    ocfs2_dio_end_io
                                                     ocfs2_dio_end_io_write
                                                      down_write(&oi->ip_alloc_sem);
                                                      ocfs2_mark_extent_written
                                                       ocfs2_change_extent_flag
                                                        ocfs2_split_extent
                                                         ...
                                                     --> modify the rec[i]->e_cpos, resulting
                                                         in v_cluster < rec[i]->e_cpos.
                 BUG_ON(v_cluster < le32_to_cpu(rec->e_cpos))
    
    [alex.chen@huawei.com: v3]
      Link: http://lkml.kernel.org/r/59EF3614.6050008@huawei.com
    Link: http://lkml.kernel.org/r/59EF3614.6050008@huawei.com
    Fixes: c15471f79506 ("ocfs2: fix sparse file & data ordering issue in direct io")
    Signed-off-by: Alex Chen <alex.chen@huawei.com>
    Reviewed-by: Jun Piao <piaojun@huawei.com>
    Reviewed-by: Joseph Qi <jiangqi903@gmail.com>
    Reviewed-by: Gang He <ghe@suse.com>
    Acked-by: Changwei Ge <ge.changwei@h3c.com>
    Cc: Mark Fasheh <mfasheh@versity.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32a1733cf823011266dac0ea34c13555ff35dde5
Author: alex chen <alex.chen@huawei.com>
Date:   Wed Nov 15 17:31:48 2017 -0800

    ocfs2: subsystem.su_mutex is required while accessing the item->ci_parent
    
    commit 853bc26a7ea39e354b9f8889ae7ad1492ffa28d2 upstream.
    
    The subsystem.su_mutex is required while accessing the item->ci_parent,
    otherwise, NULL pointer dereference to the item->ci_parent will be
    triggered in the following situation:
    
    add node                     delete node
    sys_write
     vfs_write
      configfs_write_file
       o2nm_node_store
        o2nm_node_local_write
                                 do_rmdir
                                  vfs_rmdir
                                   configfs_rmdir
                                    mutex_lock(&subsys->su_mutex);
                                    unlink_obj
                                     item->ci_group = NULL;
                                     item->ci_parent = NULL;
             to_o2nm_cluster_from_node
              node->nd_item.ci_parent->ci_parent
              BUG since of NULL pointer dereference to nd_item.ci_parent
    
    Moreover, the o2nm_cluster also should be protected by the
    subsystem.su_mutex.
    
    [alex.chen@huawei.com: v2]
      Link: http://lkml.kernel.org/r/59EEAA69.9080703@huawei.com
    Link: http://lkml.kernel.org/r/59E9B36A.10700@huawei.com
    Signed-off-by: Alex Chen <alex.chen@huawei.com>
    Reviewed-by: Jun Piao <piaojun@huawei.com>
    Reviewed-by: Joseph Qi <jiangqi903@gmail.com>
    Cc: Mark Fasheh <mfasheh@versity.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1919f3fd551aeeb547b8ebff5ab758a3fd615c31
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Thu Jun 21 09:23:24 2018 -0700

    x86/paravirt: Make native_save_fl() extern inline
    
    commit d0a8d9378d16eb3c69bd8e6d23779fbdbee3a8c7 upstream.
    
    native_save_fl() is marked static inline, but by using it as
    a function pointer in arch/x86/kernel/paravirt.c, it MUST be outlined.
    
    paravirt's use of native_save_fl() also requires that no GPRs other than
    %rax are clobbered.
    
    Compilers have different heuristics which they use to emit stack guard
    code, the emittance of which can break paravirt's callee saved assumption
    by clobbering %rcx.
    
    Marking a function definition extern inline means that if this version
    cannot be inlined, then the out-of-line version will be preferred. By
    having the out-of-line version be implemented in assembly, it cannot be
    instrumented with a stack protector, which might violate custom calling
    conventions that code like paravirt rely on.
    
    The semantics of extern inline has changed since gnu89. This means that
    folks using GCC versions >= 5.1 may see symbol redefinition errors at
    link time for subdirs that override KBUILD_CFLAGS (making the C standard
    used implicit) regardless of this patch. This has been cleaned up
    earlier in the patch set, but is left as a note in the commit message
    for future travelers.
    
    Reports:
     https://lkml.org/lkml/2018/5/7/534
     https://github.com/ClangBuiltLinux/linux/issues/16
    
    Discussion:
     https://bugs.llvm.org/show_bug.cgi?id=37512
     https://lkml.org/lkml/2018/5/24/1371
    
    Thanks to the many folks that participated in the discussion.
    
    Debugged-by: Alistair Strachan <astrachan@google.com>
    Debugged-by: Matthias Kaehlcke <mka@chromium.org>
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: H. Peter Anvin <hpa@zytor.com>
    Suggested-by: Tom Stellar <tstellar@redhat.com>
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: acme@redhat.com
    Cc: akataria@vmware.com
    Cc: akpm@linux-foundation.org
    Cc: andrea.parri@amarulasolutions.com
    Cc: ard.biesheuvel@linaro.org
    Cc: aryabinin@virtuozzo.com
    Cc: astrachan@google.com
    Cc: boris.ostrovsky@oracle.com
    Cc: brijesh.singh@amd.com
    Cc: caoj.fnst@cn.fujitsu.com
    Cc: geert@linux-m68k.org
    Cc: ghackmann@google.com
    Cc: gregkh@linuxfoundation.org
    Cc: jan.kiszka@siemens.com
    Cc: jarkko.sakkinen@linux.intel.com
    Cc: joe@perches.com
    Cc: jpoimboe@redhat.com
    Cc: keescook@google.com
    Cc: kirill.shutemov@linux.intel.com
    Cc: kstewart@linuxfoundation.org
    Cc: linux-efi@vger.kernel.org
    Cc: linux-kbuild@vger.kernel.org
    Cc: manojgupta@google.com
    Cc: mawilcox@microsoft.com
    Cc: michal.lkml@markovi.net
    Cc: mjg59@google.com
    Cc: mka@chromium.org
    Cc: pombredanne@nexb.com
    Cc: rientjes@google.com
    Cc: rostedt@goodmis.org
    Cc: thomas.lendacky@amd.com
    Cc: tweek@google.com
    Cc: virtualization@lists.linux-foundation.org
    Cc: will.deacon@arm.com
    Cc: yamada.masahiro@socionext.com
    Link: http://lkml.kernel.org/r/20180621162324.36656-4-ndesaulniers@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb877e4763d4b6276568858156621558c8e40037
Author: H. Peter Anvin <hpa@linux.intel.com>
Date:   Thu Jun 21 09:23:23 2018 -0700

    x86/asm: Add _ASM_ARG* constants for argument registers to <asm/asm.h>
    
    commit 0e2e160033283e20f688d8bad5b89460cc5bfcc4 upstream.
    
    i386 and x86-64 uses different registers for arguments; make them
    available so we don't have to #ifdef in the actual code.
    
    Native size and specified size (q, l, w, b) versions are provided.
    
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Sedat Dilek <sedat.dilek@gmail.com>
    Acked-by: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: acme@redhat.com
    Cc: akataria@vmware.com
    Cc: akpm@linux-foundation.org
    Cc: andrea.parri@amarulasolutions.com
    Cc: ard.biesheuvel@linaro.org
    Cc: arnd@arndb.de
    Cc: aryabinin@virtuozzo.com
    Cc: astrachan@google.com
    Cc: boris.ostrovsky@oracle.com
    Cc: brijesh.singh@amd.com
    Cc: caoj.fnst@cn.fujitsu.com
    Cc: geert@linux-m68k.org
    Cc: ghackmann@google.com
    Cc: gregkh@linuxfoundation.org
    Cc: jan.kiszka@siemens.com
    Cc: jarkko.sakkinen@linux.intel.com
    Cc: joe@perches.com
    Cc: jpoimboe@redhat.com
    Cc: keescook@google.com
    Cc: kirill.shutemov@linux.intel.com
    Cc: kstewart@linuxfoundation.org
    Cc: linux-efi@vger.kernel.org
    Cc: linux-kbuild@vger.kernel.org
    Cc: manojgupta@google.com
    Cc: mawilcox@microsoft.com
    Cc: michal.lkml@markovi.net
    Cc: mjg59@google.com
    Cc: mka@chromium.org
    Cc: pombredanne@nexb.com
    Cc: rientjes@google.com
    Cc: rostedt@goodmis.org
    Cc: thomas.lendacky@amd.com
    Cc: tstellar@redhat.com
    Cc: tweek@google.com
    Cc: virtualization@lists.linux-foundation.org
    Cc: will.deacon@arm.com
    Cc: yamada.masahiro@socionext.com
    Link: http://lkml.kernel.org/r/20180621162324.36656-3-ndesaulniers@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02c89527b056301846bfdec4fabbad924d1ad59d
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Thu Jun 21 09:23:22 2018 -0700

    compiler-gcc.h: Add __attribute__((gnu_inline)) to all inline declarations
    
    commit d03db2bc26f0e4a6849ad649a09c9c73fccdc656 upstream.
    
    Functions marked extern inline do not emit an externally visible
    function when the gnu89 C standard is used. Some KBUILD Makefiles
    overwrite KBUILD_CFLAGS. This is an issue for GCC 5.1+ users as without
    an explicit C standard specified, the default is gnu11. Since c99, the
    semantics of extern inline have changed such that an externally visible
    function is always emitted. This can lead to multiple definition errors
    of extern inline functions at link time of compilation units whose build
    files have removed an explicit C standard compiler flag for users of GCC
    5.1+ or Clang.
    
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: H. Peter Anvin <hpa@zytor.com>
    Suggested-by: Joe Perches <joe@perches.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Acked-by: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: acme@redhat.com
    Cc: akataria@vmware.com
    Cc: akpm@linux-foundation.org
    Cc: andrea.parri@amarulasolutions.com
    Cc: ard.biesheuvel@linaro.org
    Cc: aryabinin@virtuozzo.com
    Cc: astrachan@google.com
    Cc: boris.ostrovsky@oracle.com
    Cc: brijesh.singh@amd.com
    Cc: caoj.fnst@cn.fujitsu.com
    Cc: geert@linux-m68k.org
    Cc: ghackmann@google.com
    Cc: gregkh@linuxfoundation.org
    Cc: jan.kiszka@siemens.com
    Cc: jarkko.sakkinen@linux.intel.com
    Cc: jpoimboe@redhat.com
    Cc: keescook@google.com
    Cc: kirill.shutemov@linux.intel.com
    Cc: kstewart@linuxfoundation.org
    Cc: linux-efi@vger.kernel.org
    Cc: linux-kbuild@vger.kernel.org
    Cc: manojgupta@google.com
    Cc: mawilcox@microsoft.com
    Cc: michal.lkml@markovi.net
    Cc: mjg59@google.com
    Cc: mka@chromium.org
    Cc: pombredanne@nexb.com
    Cc: rientjes@google.com
    Cc: rostedt@goodmis.org
    Cc: sedat.dilek@gmail.com
    Cc: thomas.lendacky@amd.com
    Cc: tstellar@redhat.com
    Cc: tweek@google.com
    Cc: virtualization@lists.linux-foundation.org
    Cc: will.deacon@arm.com
    Cc: yamada.masahiro@socionext.com
    Link: http://lkml.kernel.org/r/20180621162324.36656-2-ndesaulniers@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29524a9d42f683ca7b67f07f1ac3f6049c8675cc
Author: David Rientjes <rientjes@google.com>
Date:   Thu Jul 6 15:35:24 2017 -0700

    compiler, clang: always inline when CONFIG_OPTIMIZE_INLINING is disabled
    
    commit 9a04dbcfb33b4012d0ce8c0282f1e3ca694675b1 upstream.
    
    The motivation for commit abb2ea7dfd82 ("compiler, clang: suppress
    warning for unused static inline functions") was to suppress clang's
    warnings about unused static inline functions.
    
    For configs without CONFIG_OPTIMIZE_INLINING enabled, such as any non-x86
    architecture, `inline' in the kernel implies that
    __attribute__((always_inline)) is used.
    
    Some code depends on that behavior, see
      https://lkml.org/lkml/2017/6/13/918:
    
      net/built-in.o: In function `__xchg_mb':
      arch/arm64/include/asm/cmpxchg.h:99: undefined reference to `__compiletime_assert_99'
      arch/arm64/include/asm/cmpxchg.h:99: undefined reference to `__compiletime_assert_99
    
    The full fix would be to identify these breakages and annotate the
    functions with __always_inline instead of `inline'.  But since we are
    late in the 4.12-rc cycle, simply carry forward the forced inlining
    behavior and work toward moving arm64, and other architectures, toward
    CONFIG_OPTIMIZE_INLINING behavior.
    
    Link: http://lkml.kernel.org/r/alpine.DEB.2.10.1706261552200.1075@chino.kir.corp.google.com
    Signed-off-by: David Rientjes <rientjes@google.com>
    Reported-by: Sodagudi Prasad <psodagud@codeaurora.org>
    Tested-by: Sodagudi Prasad <psodagud@codeaurora.org>
    Tested-by: Matthias Kaehlcke <mka@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f276b50c3a5b01c1b6636adb3e4eba67d187d218
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 11 15:51:56 2017 -0700

    compiler, clang: properly override 'inline' for clang
    
    commit 6d53cefb18e4646fb4bf62ccb6098fb3808486df upstream.
    
    Commit abb2ea7dfd82 ("compiler, clang: suppress warning for unused
    static inline functions") just caused more warnings due to re-defining
    the 'inline' macro.
    
    So undef it before re-defining it, and also add the 'notrace' attribute
    like the gcc version that this is overriding does.
    
    Maybe this makes clang happier.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94cc698fdaa7250c117343b34432ea6431b3856b
Author: David Rientjes <rientjes@google.com>
Date:   Tue Jun 6 13:36:24 2017 -0700

    compiler, clang: suppress warning for unused static inline functions
    
    commit abb2ea7dfd82451d85ce669b811310c05ab5ca46 upstream.
    
    GCC explicitly does not warn for unused static inline functions for
    -Wunused-function.  The manual states:
    
            Warn whenever a static function is declared but not defined or
            a non-inline static function is unused.
    
    Clang does warn for static inline functions that are unused.
    
    It turns out that suppressing the warnings avoids potentially complex
    #ifdef directives, which also reduces LOC.
    
    Suppress the warning for clang.
    
    Signed-off-by: David Rientjes <rientjes@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc9e795b080bab8f3268d585f406922e07f4be46
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Jun 22 10:55:46 2018 -0700

    MIPS: Use async IPIs for arch_trigger_cpumask_backtrace()
    
    commit b63e132b6433a41cf311e8bc382d33fd2b73b505 upstream.
    
    The current MIPS implementation of arch_trigger_cpumask_backtrace() is
    broken because it attempts to use synchronous IPIs despite the fact that
    it may be run with interrupts disabled.
    
    This means that when arch_trigger_cpumask_backtrace() is invoked, for
    example by the RCU CPU stall watchdog, we may:
    
      - Deadlock due to use of synchronous IPIs with interrupts disabled,
        causing the CPU that's attempting to generate the backtrace output
        to hang itself.
    
      - Not succeed in generating the desired output from remote CPUs.
    
      - Produce warnings about this from smp_call_function_many(), for
        example:
    
        [42760.526910] INFO: rcu_sched detected stalls on CPUs/tasks:
        [42760.535755]  0-...!: (1 GPs behind) idle=ade/140000000000000/0 softirq=526944/526945 fqs=0
        [42760.547874]  1-...!: (0 ticks this GP) idle=e4a/140000000000000/0 softirq=547885/547885 fqs=0
        [42760.559869]  (detected by 2, t=2162 jiffies, g=266689, c=266688, q=33)
        [42760.568927] ------------[ cut here ]------------
        [42760.576146] WARNING: CPU: 2 PID: 1216 at kernel/smp.c:416 smp_call_function_many+0x88/0x20c
        [42760.587839] Modules linked in:
        [42760.593152] CPU: 2 PID: 1216 Comm: sh Not tainted 4.15.4-00373-gee058bb4d0c2 #2
        [42760.603767] Stack : 8e09bd20 8e09bd20 8e09bd20 fffffff0 00000007 00000006 00000000 8e09bca8
        [42760.616937]         95b2b379 95b2b379 807a0080 00000007 81944518 0000018a 00000032 00000000
        [42760.630095]         00000000 00000030 80000000 00000000 806eca74 00000009 8017e2b8 000001a0
        [42760.643169]         00000000 00000002 00000000 8e09baa4 00000008 808b8008 86d69080 8e09bca0
        [42760.656282]         8e09ad50 805e20aa 00000000 00000000 00000000 8017e2b8 00000009 801070ca
        [42760.669424]         ...
        [42760.673919] Call Trace:
        [42760.678672] [<27fde568>] show_stack+0x70/0xf0
        [42760.685417] [<84751641>] dump_stack+0xaa/0xd0
        [42760.692188] [<699d671c>] __warn+0x80/0x92
        [42760.698549] [<68915d41>] warn_slowpath_null+0x28/0x36
        [42760.705912] [<f7c76c1c>] smp_call_function_many+0x88/0x20c
        [42760.713696] [<6bbdfc2a>] arch_trigger_cpumask_backtrace+0x30/0x4a
        [42760.722216] [<f845bd33>] rcu_dump_cpu_stacks+0x6a/0x98
        [42760.729580] [<796e7629>] rcu_check_callbacks+0x672/0x6ac
        [42760.737476] [<059b3b43>] update_process_times+0x18/0x34
        [42760.744981] [<6eb94941>] tick_sched_handle.isra.5+0x26/0x38
        [42760.752793] [<478d3d70>] tick_sched_timer+0x1c/0x50
        [42760.759882] [<e56ea39f>] __hrtimer_run_queues+0xc6/0x226
        [42760.767418] [<e88bbcae>] hrtimer_interrupt+0x88/0x19a
        [42760.775031] [<6765a19e>] gic_compare_interrupt+0x2e/0x3a
        [42760.782761] [<0558bf5f>] handle_percpu_devid_irq+0x78/0x168
        [42760.790795] [<90c11ba2>] generic_handle_irq+0x1e/0x2c
        [42760.798117] [<1b6d462c>] gic_handle_local_int+0x38/0x86
        [42760.805545] [<b2ada1c7>] gic_irq_dispatch+0xa/0x14
        [42760.812534] [<90c11ba2>] generic_handle_irq+0x1e/0x2c
        [42760.820086] [<c7521934>] do_IRQ+0x16/0x20
        [42760.826274] [<9aef3ce6>] plat_irq_dispatch+0x62/0x94
        [42760.833458] [<6a94b53c>] except_vec_vi_end+0x70/0x78
        [42760.840655] [<22284043>] smp_call_function_many+0x1ba/0x20c
        [42760.848501] [<54022b58>] smp_call_function+0x1e/0x2c
        [42760.855693] [<ab9fc705>] flush_tlb_mm+0x2a/0x98
        [42760.862730] [<0844cdd0>] tlb_flush_mmu+0x1c/0x44
        [42760.869628] [<cb259b74>] arch_tlb_finish_mmu+0x26/0x3e
        [42760.877021] [<1aeaaf74>] tlb_finish_mmu+0x18/0x66
        [42760.883907] [<b3fce717>] exit_mmap+0x76/0xea
        [42760.890428] [<c4c8a2f6>] mmput+0x80/0x11a
        [42760.896632] [<a41a08f4>] do_exit+0x1f4/0x80c
        [42760.903158] [<ee01cef6>] do_group_exit+0x20/0x7e
        [42760.909990] [<13fa8d54>] __wake_up_parent+0x0/0x1e
        [42760.917045] [<46cf89d0>] smp_call_function_many+0x1a2/0x20c
        [42760.924893] [<8c21a93b>] syscall_common+0x14/0x1c
        [42760.931765] ---[ end trace 02aa09da9dc52a60 ]---
        [42760.938342] ------------[ cut here ]------------
        [42760.945311] WARNING: CPU: 2 PID: 1216 at kernel/smp.c:291 smp_call_function_single+0xee/0xf8
        ...
    
    This patch switches MIPS' arch_trigger_cpumask_backtrace() to use async
    IPIs & smp_call_function_single_async() in order to resolve this
    problem. We ensure use of the pre-allocated call_single_data_t
    structures is serialized by maintaining a cpumask indicating that
    they're busy, and refusing to attempt to send an IPI when a CPU's bit is
    set in this mask. This should only happen if a CPU hasn't responded to a
    previous backtrace IPI - ie. if it's hung - and we print a warning to
    the console in this case.
    
    I've marked this for stable branches as far back as v4.9, to which it
    applies cleanly. Strictly speaking the faulty MIPS implementation can be
    traced further back to commit 856839b76836 ("MIPS: Add
    arch_trigger_all_cpu_backtrace() function") in v3.19, but kernel
    versions v3.19 through v4.8 will require further work to backport due to
    the rework performed in commit 9a01c3ed5cdb ("nmi_backtrace: add more
    trigger_*_cpu_backtrace() methods").
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/19597/
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.9+
    Fixes: 856839b76836 ("MIPS: Add arch_trigger_all_cpu_backtrace() function")
    Fixes: 9a01c3ed5cdb ("nmi_backtrace: add more trigger_*_cpu_backtrace() methods")
    [ Huacai: backported to 4.9: Replace "call_single_data_t" with "struct call_single_data" ]
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
