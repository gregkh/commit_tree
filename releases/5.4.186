commit 8e24ff11b5d216dc5de667bebeb7b0ef3946c596
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Mar 19 13:40:17 2022 +0100

    Linux 5.4.186
    
    Link: https://lore.kernel.org/r/20220317124527.672236844@linuxfoundation.org
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcbdaa6a3c9269a82a1dd399e0a91034f64f813e
Author: James Morse <james.morse@arm.com>
Date:   Fri Mar 18 17:37:13 2022 +0000

    fixup for "arm64 entry: Add macro for reading symbol address from the trampoline"
    
    __sdei_asm_trampoline_next_handler shouldn't have its own name as the
    tramp_data_read_var takes the symbol name, and generates the name for
    the value in the data page if CONFIG_RANDOMIZE_BASE is clear.
    
    This means when CONFIG_RANDOMIZE_BASE is clear, this code won't compile
    as __sdei_asm_trampoline_next_handler doesn't exist.
    
    Use the proper name, and let the macro do its thing.
    
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8bc0718baed4f9d67aec7c23468b3e79ed8ba00
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Fri Mar 4 20:29:04 2022 -0800

    kselftest/vm: fix tests build with old libc
    
    [ Upstream commit b773827e361952b3f53ac6fa4c4e39ccd632102e ]
    
    The error message when I build vm tests on debian10 (GLIBC 2.28):
    
        userfaultfd.c: In function `userfaultfd_pagemap_test':
        userfaultfd.c:1393:37: error: `MADV_PAGEOUT' undeclared (first use
        in this function); did you mean `MADV_RANDOM'?
          if (madvise(area_dst, test_pgsize, MADV_PAGEOUT))
                                             ^~~~~~~~~~~~
                                             MADV_RANDOM
    
    This patch includes these newer definitions from UAPI linux/mman.h, is
    useful to fix tests build on systems without these definitions in glibc
    sys/mman.h.
    
    Link: https://lkml.kernel.org/r/20220227055330.43087-2-zhouchengming@bytedance.com
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Reviewed-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2643ca24f511efb2a0f67ef5e17eb7aaeb866a89
Author: Niels Dossche <dossche.niels@gmail.com>
Date:   Tue Mar 1 23:28:22 2022 +0100

    sfc: extend the locking on mcdi->seqno
    
    [ Upstream commit f1fb205efb0ccca55626fd4ef38570dd16b44719 ]
    
    seqno could be read as a stale value outside of the lock. The lock is
    already acquired to protect the modification of seqno against a possible
    race condition. Place the reading of this value also inside this locking
    to protect it against a possible race condition.
    
    Signed-off-by: Niels Dossche <dossche.niels@gmail.com>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46fd0a07409b027e3e0de937fe245b4a0dbe8cc8
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 2 08:17:23 2022 -0800

    tcp: make tcp_read_sock() more robust
    
    [ Upstream commit e3d5ea2c011ecb16fb94c56a659364e6b30fac94 ]
    
    If recv_actor() returns an incorrect value, tcp_read_sock()
    might loop forever.
    
    Instead, issue a one time warning and make sure to make progress.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/r/20220302161723.3910001-2-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16a2e50fe9340b7074702dfc27ca5b8454594a4c
Author: Sreeramya Soratkal <quic_ssramya@quicinc.com>
Date:   Tue Mar 1 11:33:20 2022 +0530

    nl80211: Update bss channel on channel switch for P2P_CLIENT
    
    [ Upstream commit e50b88c4f076242358b66ddb67482b96947438f2 ]
    
    The wdev channel information is updated post channel switch only for
    the station mode and not for the other modes. Due to this, the P2P client
    still points to the old value though it moved to the new channel
    when the channel change is induced from the P2P GO.
    
    Update the bss channel after CSA channel switch completion for P2P client
    interface as well.
    
    Signed-off-by: Sreeramya Soratkal <quic_ssramya@quicinc.com>
    Link: https://lore.kernel.org/r/1646114600-31479-1-git-send-email-quic_ssramya@quicinc.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 941e8bcd2b2ba95490738e33dfeca27168452779
Author: Manasi Navare <manasi.d.navare@intel.com>
Date:   Thu Feb 24 17:30:54 2022 -0800

    drm/vrr: Set VRR capable prop only if it is attached to connector
    
    [ Upstream commit 62929726ef0ec72cbbe9440c5d125d4278b99894 ]
    
    VRR capable property is not attached by default to the connector
    It is attached only if VRR is supported.
    So if the driver tries to call drm core set prop function without
    it being attached that causes NULL dereference.
    
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Cc: dri-devel@lists.freedesktop.org
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220225013055.9282-1-manasi.d.navare@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6becb057247e6d5fbe771d9b3bdfd8308c8e130e
Author: Golan Ben Ami <golan.ben.ami@intel.com>
Date:   Tue Mar 1 09:29:26 2022 +0200

    iwlwifi: don't advertise TWT support
    
    [ Upstream commit 1db5fcbba2631277b78d7f8aff99c9607d29f6d8 ]
    
    Some APs misbehave when TWT is used and cause our firmware to crash.
    We don't know a reasonable way to detect and work around this problem
    in the FW yet.  To prevent these crashes, disable TWT in the driver by
    stopping to advertise TWT support.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215523
    Signed-off-by: Golan Ben Ami <golan.ben.ami@intel.com>
    [reworded the commit message]
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/20220301072926.153969-1-luca@coelho.fi
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51969ebe7f97f86a13f523b35325d069c86aa5cb
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Fri Feb 25 04:52:30 2022 -0800

    atm: firestream: check the return value of ioremap() in fs_init()
    
    [ Upstream commit d4e26aaea7f82ba884dcb4acfe689406bc092dc3 ]
    
    The function ioremap() in fs_init() can fail, so its return value should
    be checked.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23352749f0b21f9d2ac0e51ca01f1e295b7704bb
Author: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
Date:   Mon Feb 21 22:59:35 2022 +0000

    can: rcar_canfd: rcar_canfd_channel_probe(): register the CAN device when fully ready
    
    [ Upstream commit c5048a7b2c23ab589f3476a783bd586b663eda5b ]
    
    Register the CAN device only when all the necessary initialization is
    completed. This patch makes sure all the data structures and locks are
    initialized before registering the CAN device.
    
    Link: https://lore.kernel.org/all/20220221225935.12300-1-prabhakar.mahadev-lad.rj@bp.renesas.com
    Reported-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
    Reviewed-by: Pavel Machek <pavel@denx.de>
    Reviewed-by: Ulrich Hecht <uli+renesas@fpond.eu>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4006447f558c2ff3bbd7ff5a7665d118d86d1ec7
Author: Julian Braha <julianbraha@gmail.com>
Date:   Mon Jan 17 05:09:40 2022 +0100

    ARM: 9178/1: fix unmet dependency on BITREVERSE for HAVE_ARCH_BITREVERSE
    
    [ Upstream commit 11c57c3ba94da74c3446924260e34e0b1950b5d7 ]
    
    Resending this to properly add it to the patch tracker - thanks for letting
    me know, Arnd :)
    
    When ARM is enabled, and BITREVERSE is disabled,
    Kbuild gives the following warning:
    
    WARNING: unmet direct dependencies detected for HAVE_ARCH_BITREVERSE
      Depends on [n]: BITREVERSE [=n]
      Selected by [y]:
      - ARM [=y] && (CPU_32v7M [=n] || CPU_32v7 [=y]) && !CPU_32v6 [=n]
    
    This is because ARM selects HAVE_ARCH_BITREVERSE
    without selecting BITREVERSE, despite
    HAVE_ARCH_BITREVERSE depending on BITREVERSE.
    
    This unmet dependency bug was found by Kismet,
    a static analysis tool for Kconfig. Please advise if this
    is not the appropriate solution.
    
    Signed-off-by: Julian Braha <julianbraha@gmail.com>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2420bc3333111184cdcb112282d13afe1338dd7
Author: Alexander Lobakin <alobakin@pm.me>
Date:   Sat Feb 12 22:21:11 2022 +0000

    MIPS: smp: fill in sibling and core maps earlier
    
    [ Upstream commit f2703def339c793674010cc9f01bfe4980231808 ]
    
    After enabling CONFIG_SCHED_CORE (landed during 5.14 cycle),
    2-core 2-thread-per-core interAptiv (CPS-driven) started emitting
    the following:
    
    [    0.025698] CPU1 revision is: 0001a120 (MIPS interAptiv (multi))
    [    0.048183] ------------[ cut here ]------------
    [    0.048187] WARNING: CPU: 1 PID: 0 at kernel/sched/core.c:6025 sched_core_cpu_starting+0x198/0x240
    [    0.048220] Modules linked in:
    [    0.048233] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.17.0-rc3+ #35 b7b319f24073fd9a3c2aa7ad15fb7993eec0b26f
    [    0.048247] Stack : 817f0000 00000004 327804c8 810eb050 00000000 00000004 00000000 c314fdd1
    [    0.048278]         830cbd64 819c0000 81800000 817f0000 83070bf4 00000001 830cbd08 00000000
    [    0.048307]         00000000 00000000 815fcbc4 00000000 00000000 00000000 00000000 00000000
    [    0.048334]         00000000 00000000 00000000 00000000 817f0000 00000000 00000000 817f6f34
    [    0.048361]         817f0000 818a3c00 817f0000 00000004 00000000 00000000 4dc33260 0018c933
    [    0.048389]         ...
    [    0.048396] Call Trace:
    [    0.048399] [<8105a7bc>] show_stack+0x3c/0x140
    [    0.048424] [<8131c2a0>] dump_stack_lvl+0x60/0x80
    [    0.048440] [<8108b5c0>] __warn+0xc0/0xf4
    [    0.048454] [<8108b658>] warn_slowpath_fmt+0x64/0x10c
    [    0.048467] [<810bd418>] sched_core_cpu_starting+0x198/0x240
    [    0.048483] [<810c6514>] sched_cpu_starting+0x14/0x80
    [    0.048497] [<8108c0f8>] cpuhp_invoke_callback_range+0x78/0x140
    [    0.048510] [<8108d914>] notify_cpu_starting+0x94/0x140
    [    0.048523] [<8106593c>] start_secondary+0xbc/0x280
    [    0.048539]
    [    0.048543] ---[ end trace 0000000000000000 ]---
    [    0.048636] Synchronize counters for CPU 1: done.
    
    ...for each but CPU 0/boot.
    Basic debug printks right before the mentioned line say:
    
    [    0.048170] CPU: 1, smt_mask:
    
    So smt_mask, which is sibling mask obviously, is empty when entering
    the function.
    This is critical, as sched_core_cpu_starting() calculates
    core-scheduling parameters only once per CPU start, and it's crucial
    to have all the parameters filled in at that moment (at least it
    uses cpu_smt_mask() which in fact is `&cpu_sibling_map[cpu]` on
    MIPS).
    
    A bit of debugging led me to that set_cpu_sibling_map() performing
    the actual map calculation, was being invocated after
    notify_cpu_start(), and exactly the latter function starts CPU HP
    callback round (sched_core_cpu_starting() is basically a CPU HP
    callback).
    While the flow is same on ARM64 (maps after the notifier, although
    before calling set_cpu_online()), x86 started calculating sibling
    maps earlier than starting the CPU HP callbacks in Linux 4.14 (see
    [0] for the reference). Neither me nor my brief tests couldn't find
    any potential caveats in calculating the maps right after performing
    delay calibration, but the WARN splat is now gone.
    The very same debug prints now yield exactly what I expected from
    them:
    
    [    0.048433] CPU: 1, smt_mask: 0-1
    
    [0] https://git.kernel.org/pub/scm/linux/kernel/git/mips/linux.git/commit/?id=76ce7cfe35ef
    
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Reviewed-by: Philippe Mathieu-Daud챕 <f4bug@amsat.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1df59e3124cd797a1cdb67a1dcd3138ab0012b5
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Feb 3 20:15:29 2022 +0100

    mac80211: refuse aggregations sessions before authorized
    
    [ Upstream commit a6bce78262f5dd4b50510f0aa47f3995f7b185f3 ]
    
    If an MFP station isn't authorized, the receiver will (or
    at least should) drop the action frame since it's a robust
    management frame, but if we're not authorized we haven't
    installed keys yet. Refuse attempts to start a session as
    they'd just time out.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20220203201528.ff4d5679dce9.I34bb1f2bc341e161af2d6faf74f91b332ba11285@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb35b0cfbaf85477f60010507e727fc38f4e5467
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Wed Feb 9 12:03:55 2022 +0000

    ARM: dts: rockchip: fix a typo on rk3288 crypto-controller
    
    [ Upstream commit 3916c3619599a3970d3e6f98fb430b7c46266ada ]
    
    crypto-controller had a typo, fix it.
    In the same time, rename it to just crypto
    
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20220209120355.1985707-1-clabbe@baylibre.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4857a9b291dbc24163b0ce15c56ad781c119d2f9
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Thu Feb 10 15:23:53 2022 +0100

    ARM: dts: rockchip: reorder rk322x hmdi clocks
    
    [ Upstream commit be4e65bdffab5f588044325117df77dad7e9c45a ]
    
    The binding specifies the clock order to "iahb", "isfr", "cec". Reorder
    the clocks accordingly.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Link: https://lore.kernel.org/r/20220210142353.3420859-1-s.hauer@pengutronix.de
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba14ba2d4c63202e45bb3a169659e3186f9eaa65
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Thu Jan 6 17:53:31 2022 -0600

    arm64: dts: agilex: use the compatible "intel,socfpga-agilex-hsotg"
    
    [ Upstream commit 268a491aebc25e6dc7c618903b09ac3a2e8af530 ]
    
    The DWC2 USB controller on the Agilex platform does not support clock
    gating, so use the chip specific "intel,socfpga-agilex-hsotg"
    compatible.
    
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aca8fdddeee07cdd5fb2bd198724e36e6299cbb7
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Jan 26 15:55:40 2022 +0100

    arm64: dts: rockchip: reorder rk3399 hdmi clocks
    
    [ Upstream commit 2e8a8b5955a000cc655f7e368670518cbb77fe58 ]
    
    The binding specifies the clock order to "cec", "grf", "vpll". Reorder
    the clocks accordingly.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Link: https://lore.kernel.org/r/20220126145549.617165-19-s.hauer@pengutronix.de
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e49ebea3f53681d0f65e86e8c73df1076722b84d
Author: Jakob Unterwurzacher <jakob.unterwurzacher@theobroma-systems.com>
Date:   Wed Jan 19 14:49:48 2022 +0100

    arm64: dts: rockchip: fix rk3399-puma eMMC HS400 signal integrity
    
    [ Upstream commit 62966cbdda8a92f82d966a45aa671e788b2006f7 ]
    
    There are signal integrity issues running the eMMC at 200MHz on Puma
    RK3399-Q7.
    
    Similar to the work-around found for RK3399 Gru boards, lowering the
    frequency to 100MHz made the eMMC much more stable, so let's lower the
    frequency to 100MHz.
    
    It might be possible to run at 150MHz as on RK3399 Gru boards but only
    100MHz was extensively tested.
    
    Cc: Quentin Schulz <foss+kernel@0leil.net>
    Signed-off-by: Jakob Unterwurzacher <jakob.unterwurzacher@theobroma-systems.com>
    Signed-off-by: Quentin Schulz <quentin.schulz@theobroma-systems.com>
    Link: https://lore.kernel.org/r/20220119134948.1444965-1-quentin.schulz@theobroma-systems.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd33f9b864ec1adf37b8a806a3c11d8367c7aba7
Author: Yan Yan <evitayan@google.com>
Date:   Tue Jan 18 16:00:14 2022 -0800

    xfrm: Fix xfrm migrate issues when address family changes
    
    [ Upstream commit e03c3bba351f99ad932e8f06baa9da1afc418e02 ]
    
    xfrm_migrate cannot handle address family change of an xfrm_state.
    The symptons are the xfrm_state will be migrated to a wrong address,
    and sending as well as receiving packets wil be broken.
    
    This commit fixes it by breaking the original xfrm_state_clone
    method into two steps so as to update the props.family before
    running xfrm_init_state. As the result, xfrm_state's inner mode,
    outer mode, type and IP header length in xfrm_state_migrate can
    be updated with the new address family.
    
    Tested with additions to Android's kernel unit test suite:
    https://android-review.googlesource.com/c/kernel/tests/+/1885354
    
    Signed-off-by: Yan Yan <evitayan@google.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c21ece77549b5b6724c79cb47afe27b3b923bd4
Author: Yan Yan <evitayan@google.com>
Date:   Tue Jan 18 16:00:13 2022 -0800

    xfrm: Check if_id in xfrm_migrate
    
    [ Upstream commit c1aca3080e382886e2e58e809787441984a2f89b ]
    
    This patch enables distinguishing SAs and SPs based on if_id during
    the xfrm_migrate flow. This ensures support for xfrm interfaces
    throughout the SA/SP lifecycle.
    
    When there are multiple existing SPs with the same direction,
    the same xfrm_selector and different endpoint addresses,
    xfrm_migrate might fail with ENODATA.
    
    Specifically, the code path for performing xfrm_migrate is:
      Stage 1: find policy to migrate with
        xfrm_migrate_policy_find(sel, dir, type, net)
      Stage 2: find and update state(s) with
        xfrm_migrate_state_find(mp, net)
      Stage 3: update endpoint address(es) of template(s) with
        xfrm_policy_migrate(pol, m, num_migrate)
    
    Currently "Stage 1" always returns the first xfrm_policy that
    matches, and "Stage 3" looks for the xfrm_tmpl that matches the
    old endpoint address. Thus if there are multiple xfrm_policy
    with same selector, direction, type and net, "Stage 1" might
    rertun a wrong xfrm_policy and "Stage 3" will fail with ENODATA
    because it cannot find a xfrm_tmpl with the matching endpoint
    address.
    
    The fix is to allow userspace to pass an if_id and add if_id
    to the matching rule in Stage 1 and Stage 2 since if_id is a
    unique ID for xfrm_policy and xfrm_state. For compatibility,
    if_id will only be checked if the attribute is set.
    
    Tested with additions to Android's kernel unit test suite:
    https://android-review.googlesource.com/c/kernel/tests/+/1668886
    
    Signed-off-by: Yan Yan <evitayan@google.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 970a21404ebc854271055548a949731e65f959b2
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:15 2022 +0000

    arm64: Use the clearbhb instruction in mitigations
    
    commit 228a26b912287934789023b4132ba76065d9491c upstream.
    
    Future CPUs may implement a clearbhb instruction that is sufficient
    to mitigate SpectreBHB. CPUs that implement this instruction, but
    not CSV2.3 must be affected by Spectre-BHB.
    
    Add support to use this instruction as the BHB mitigation on CPUs
    that support it. The instruction is in the hint space, so it will
    be treated by a NOP as older CPUs.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    [ modified for stable: Use a KVM vector template instead of alternatives,
      removed bitmap of mitigations ]
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb65675f6620528b0b86f0355634c22aa49aa767
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:14 2022 +0000

    KVM: arm64: Allow SMCCC_ARCH_WORKAROUND_3 to be discovered and migrated
    
    commit a5905d6af492ee6a4a2205f0d550b3f931b03d03 upstream.
    
    KVM allows the guest to discover whether the ARCH_WORKAROUND SMCCC are
    implemented, and to preserve that state during migration through its
    firmware register interface.
    
    Add the necessary boiler plate for SMCCC_ARCH_WORKAROUND_3.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    [ kvm code moved to virt/kvm/arm. ]
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9013fd4bc958b33c3b4d5a2eaf4ded9857600395
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:13 2022 +0000

    arm64: Mitigate spectre style branch history side channels
    
    commit 558c303c9734af5a813739cd284879227f7297d2 upstream.
    
    Speculation attacks against some high-performance processors can
    make use of branch history to influence future speculation.
    When taking an exception from user-space, a sequence of branches
    or a firmware call overwrites or invalidates the branch history.
    
    The sequence of branches is added to the vectors, and should appear
    before the first indirect branch. For systems using KPTI the sequence
    is added to the kpti trampoline where it has a free register as the exit
    from the trampoline is via a 'ret'. For systems not using KPTI, the same
    register tricks are used to free up a register in the vectors.
    
    For the firmware call, arch-workaround-3 clobbers 4 registers, so
    there is no choice but to save them to the EL1 stack. This only happens
    for entry from EL0, so if we take an exception due to the stack access,
    it will not become re-entrant.
    
    For KVM, the existing branch-predictor-hardening vectors are used.
    When a spectre version of these vectors is in use, the firmware call
    is sufficient to mitigate against Spectre-BHB. For the non-spectre
    versions, the sequence of branches is added to the indirect vector.
    
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: <stable@kernel.org> # <v5.17.x 72bb9dcb6c33c arm64: Add Cortex-X2 CPU part definition
    Cc: <stable@kernel.org> # <v5.16.x 2d0d656700d67 arm64: Add Neoverse-N2, Cortex-A710 CPU part definition
    Cc: <stable@kernel.org> # <v5.10.x 8a6b88e66233f arm64: Add part number for Arm Cortex-A77
    [ modified for stable, moved code to cpu_errata.c removed bitmap of
      mitigations, use kvm template infrastructure ]
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26129ea2953b6b2c59d89e472e5465e77e3b8c7c
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:12 2022 +0000

    KVM: arm64: Add templates for BHB mitigation sequences
    
    KVM writes the Spectre-v2 mitigation template at the beginning of each
    vector when a CPU requires a specific sequence to run.
    
    Because the template is copied, it can not be modified by the alternatives
    at runtime.
    
    Add templates for calling ARCH_WORKAROUND_3 and one for each value of K
    in the brancy-loop. Instead of adding dummy functions for 'fn', which would
    disable the Spectre-v2 mitigation, add template_start to indicate that a
    template (and which one) is in use. Finally add a copy of
    install_bp_hardening_cb() that is able to install these.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b735c8dc1fb8392f62c056d6972a7b9ae9a1f9e
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:11 2022 +0000

    arm64: proton-pack: Report Spectre-BHB vulnerabilities as part of Spectre-v2
    
    commit dee435be76f4117410bbd90573a881fd33488f37 upstream.
    
    Speculation attacks against some high-performance processors can
    make use of branch history to influence future speculation as part of
    a spectre-v2 attack. This is not mitigated by CSV2, meaning CPUs that
    previously reported 'Not affected' are now moderately mitigated by CSV2.
    
    Update the value in /sys/devices/system/cpu/vulnerabilities/spectre_v2
    to also show the state of the BHB mitigation.
    
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    [ code move to cpu_errata.c for backport ]
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c45d885c5a77df2bc029cca77c1ad1ef25c2efd5
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:10 2022 +0000

    arm64: Add percpu vectors for EL1
    
    commit bd09128d16fac3c34b80bd6a29088ac632e8ce09 upstream.
    
    The Spectre-BHB workaround adds a firmware call to the vectors. This
    is needed on some CPUs, but not others. To avoid the unaffected CPU in
    a big/little pair from making the firmware call, create per cpu vectors.
    
    The per-cpu vectors only apply when returning from EL0.
    
    Systems using KPTI can use the canonical 'full-fat' vectors directly at
    EL1, the trampoline exit code will switch to this_cpu_vector on exit to
    EL0. Systems not using KPTI should always use this_cpu_vector.
    
    this_cpu_vector will point at a vector in tramp_vecs or
    __bp_harden_el1_vectors, depending on whether KPTI is in use.
    
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bb1944970a9dc2d05160e014a2aac634b0eca48
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:09 2022 +0000

    arm64: entry: Add macro for reading symbol addresses from the trampoline
    
    commit b28a8eebe81c186fdb1a0078263b30576c8e1f42 upstream.
    
    The trampoline code needs to use the address of symbols in the wider
    kernel, e.g. vectors. PC-relative addressing wouldn't work as the
    trampoline code doesn't run at the address the linker expected.
    
    tramp_ventry uses a literal pool, unless CONFIG_RANDOMIZE_BASE is
    set, in which case it uses the data page as a literal pool because
    the data page can be unmapped when running in user-space, which is
    required for CPUs vulnerable to meltdown.
    
    Pull this logic out as a macro, instead of adding a third copy
    of it.
    
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3abf6e8a7aa0fad437481d27ba0a249b9f22f131
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:08 2022 +0000

    arm64: entry: Add vectors that have the bhb mitigation sequences
    
    commit ba2689234be92024e5635d30fe744f4853ad97db upstream.
    
    Some CPUs affected by Spectre-BHB need a sequence of branches, or a
    firmware call to be run before any indirect branch. This needs to go
    in the vectors. No CPU needs both.
    
    While this can be patched in, it would run on all CPUs as there is a
    single set of vectors. If only one part of a big/little combination is
    affected, the unaffected CPUs have to run the mitigation too.
    
    Create extra vectors that include the sequence. Subsequent patches will
    allow affected CPUs to select this set of vectors. Later patches will
    modify the loop count to match what the CPU requires.
    
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2933ca8c816ffc972b32c42dcd7123703e1db447
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:07 2022 +0000

    arm64: entry: Add non-kpti __bp_harden_el1_vectors for mitigations
    
    commit aff65393fa1401e034656e349abd655cfe272de0 upstream.
    
    kpti is an optional feature, for systems not using kpti a set of
    vectors for the spectre-bhb mitigations is needed.
    
    Add another set of vectors, __bp_harden_el1_vectors, that will be
    used if a mitigation is needed and kpti is not in use.
    
    The EL1 ventries are repeated verbatim as there is no additional
    work needed for entry from EL1.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9232867e4fc20bc0a0cafc776664ca5ed3e4d53b
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:06 2022 +0000

    arm64: entry: Allow the trampoline text to occupy multiple pages
    
    commit a9c406e6462ff14956d690de7bbe5131a5677dc9 upstream.
    
    Adding a second set of vectors to .entry.tramp.text will make it
    larger than a single 4K page.
    
    Allow the trampoline text to occupy up to three pages by adding two
    more fixmap slots. Previous changes to tramp_valias allowed it to reach
    beyond a single page.
    
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad8800443b69e6cf150a5f2d1b5504d927acda37
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:05 2022 +0000

    arm64: entry: Make the kpti trampoline's kpti sequence optional
    
    commit c47e4d04ba0f1ea17353d85d45f611277507e07a upstream.
    
    Spectre-BHB needs to add sequences to the vectors. Having one global
    set of vectors is a problem for big/little systems where the sequence
    is costly on cpus that are not vulnerable.
    
    Making the vectors per-cpu in the style of KVM's bh_harden_hyp_vecs
    requires the vectors to be generated by macros.
    
    Make the kpti re-mapping of the kernel optional, so the macros can be
    used without kpti.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b91f35c8739f06dcf69efd5ee2293fd72da1d5b
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:04 2022 +0000

    arm64: entry: Move trampoline macros out of ifdef'd section
    
    commit 13d7a08352a83ef2252aeb464a5e08dfc06b5dfd upstream.
    
    The macros for building the kpti trampoline are all behind
    CONFIG_UNMAP_KERNEL_AT_EL0, and in a region that outputs to the
    .entry.tramp.text section.
    
    Move the macros out so they can be used to generate other kinds of
    trampoline. Only the symbols need to be guarded by
    CONFIG_UNMAP_KERNEL_AT_EL0 and appear in the .entry.tramp.text section.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bfdd733488210977c2f4c82e459ac70eeeea279
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:03 2022 +0000

    arm64: entry: Don't assume tramp_vectors is the start of the vectors
    
    commit ed50da7764535f1e24432ded289974f2bf2b0c5a upstream.
    
    The tramp_ventry macro uses tramp_vectors as the address of the vectors
    when calculating which ventry in the 'full fat' vectors to branch to.
    
    While there is one set of tramp_vectors, this will be true.
    Adding multiple sets of vectors will break this assumption.
    
    Move the generation of the vectors to a macro, and pass the start
    of the vectors as an argument to tramp_ventry.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb117a27c64e08c531ef4af964c228604836f023
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:02 2022 +0000

    arm64: entry: Allow tramp_alias to access symbols after the 4K boundary
    
    commit 6c5bf79b69f911560fbf82214c0971af6e58e682 upstream.
    
    Systems using kpti enter and exit the kernel through a trampoline mapping
    that is always mapped, even when the kernel is not. tramp_valias is a macro
    to find the address of a symbol in the trampoline mapping.
    
    Adding extra sets of vectors will expand the size of the entry.tramp.text
    section to beyond 4K. tramp_valias will be unable to generate addresses
    for symbols beyond 4K as it uses the 12 bit immediate of the add
    instruction.
    
    As there are now two registers available when tramp_alias is called,
    use the extra register to avoid the 4K limit of the 12 bit immediate.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 788fbb5fe290c77eeb800be9521761a46082e434
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:01 2022 +0000

    arm64: entry: Move the trampoline data page before the text page
    
    commit c091fb6ae059cda563b2a4d93fdbc548ef34e1d6 upstream.
    
    The trampoline code has a data page that holds the address of the vectors,
    which is unmapped when running in user-space. This ensures that with
    CONFIG_RANDOMIZE_BASE, the randomised address of the kernel can't be
    discovered until after the kernel has been mapped.
    
    If the trampoline text page is extended to include multiple sets of
    vectors, it will be larger than a single page, making it tricky to
    find the data page without knowing the size of the trampoline text
    pages, which will vary with PAGE_SIZE.
    
    Move the data page to appear before the text page. This allows the
    data page to be found without knowing the size of the trampoline text
    pages. 'tramp_vectors' is used to refer to the beginning of the
    .entry.tramp.text section, do that explicitly.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33397322d4c3b8f8b8dca06a86adbc9c871af8af
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:24:00 2022 +0000

    arm64: entry: Free up another register on kpti's tramp_exit path
    
    commit 03aff3a77a58b5b52a77e00537a42090ad57b80b upstream.
    
    Kpti stashes x30 in far_el1 while it uses x30 for all its work.
    
    Making the vectors a per-cpu data structure will require a second
    register.
    
    Allow tramp_exit two registers before it unmaps the kernel, by
    leaving x30 on the stack, and stashing x29 in far_el1.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f95cc642c3fbf2956a4aff3daa9115766131e59
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:23:59 2022 +0000

    arm64: entry: Make the trampoline cleanup optional
    
    commit d739da1694a0eaef0358a42b76904b611539b77b upstream.
    
    Subsequent patches will add additional sets of vectors that use
    the same tricks as the kpti vectors to reach the full-fat vectors.
    The full-fat vectors contain some cleanup for kpti that is patched
    in by alternatives when kpti is in use. Once there are additional
    vectors, the cleanup will be needed in more cases.
    
    But on big/little systems, the cleanup would be harmful if no
    trampoline vector were in use. Instead of forcing CPUs that don't
    need a trampoline vector to use one, make the trampoline cleanup
    optional.
    
    Entry at the top of the vectors will skip the cleanup. The trampoline
    vectors can then skip the first instruction, triggering the cleanup
    to run.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8aa1257128a1df4966cbee258ec716a5ba5cb9af
Author: James Morse <james.morse@arm.com>
Date:   Tue Mar 15 18:23:58 2022 +0000

    arm64: entry.S: Add ventry overflow sanity checks
    
    commit 4330e2c5c04c27bebf89d34e0bc14e6943413067 upstream.
    
    Subsequent patches add even more code to the ventry slots.
    Ensure kernels that overflow a ventry slot don't get built.
    
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 503fdc244aee332d049c95df090d479839f32b38
Author: Anshuman Khandual <anshuman.khandual@arm.com>
Date:   Tue Mar 15 18:23:57 2022 +0000

    arm64: Add Cortex-X2 CPU part definition
    
    commit 72bb9dcb6c33cfac80282713c2b4f2b254cd24d1 upstream.
    
    Add the CPU Partnumbers for the new Arm designs.
    
    Cc: Will Deacon <will@kernel.org>
    Cc: Suzuki Poulose <suzuki.poulose@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/1642994138-25887-2-git-send-email-anshuman.khandual@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7103651c98c894248a5981648f105f56962b2240
Author: Joey Gouly <joey.gouly@arm.com>
Date:   Tue Mar 15 18:23:56 2022 +0000

    arm64: add ID_AA64ISAR2_EL1 sys register
    
    commit 9e45365f1469ef2b934f9d035975dbc9ad352116 upstream.
    
    This is a new ID register, introduced in 8.7.
    
    Signed-off-by: Joey Gouly <joey.gouly@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: James Morse <james.morse@arm.com>
    Cc: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: Reiji Watanabe <reijiw@google.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211210165432.8106-3-joey.gouly@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5f94aa5004a3ae423ec3678da4b571687bdaae7
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Tue Mar 15 18:23:55 2022 +0000

    arm64: Add Neoverse-N2, Cortex-A710 CPU part definition
    
    commit 2d0d656700d67239a57afaf617439143d8dac9be upstream.
    
    Add the CPU Partnumbers for the new Arm designs.
    
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20211019163153.3692640-2-suzuki.poulose@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed5bf8a5075b9070c67849f65a557512e186cab4
Author: Rob Herring <robh@kernel.org>
Date:   Tue Mar 15 18:23:54 2022 +0000

    arm64: Add part number for Arm Cortex-A77
    
    commit 8a6b88e66233f5f1779b0a1342aa9dc030dddcd5 upstream.
    
    Add the MIDR part number info for the Arm Cortex-A77.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20201028182839.166037-1-robh@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b84cfaefea6d1e696557c35f119e4bd28ed95be
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 20 07:42:42 2021 -0400

    sctp: fix the processing for INIT chunk
    
    commit eae5783908042a762c24e1bd11876edb91d314b1 upstream.
    
    This patch fixes the problems below:
    
    1. In non-shutdown_ack_sent states: in sctp_sf_do_5_1B_init() and
       sctp_sf_do_5_2_2_dupinit():
    
      chunk length check should be done before any checks that may cause
      to send abort, as making packet for abort will access the init_tag
      from init_hdr in sctp_ootb_pkt_new().
    
    2. In shutdown_ack_sent state: in sctp_sf_do_9_2_reshutack():
    
      The same checks as does in sctp_sf_do_5_2_2_dupinit() is needed
      for sctp_sf_do_9_2_reshutack().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57e401a53c9f80f65aecd31ceb615f4d2a14399c
Author: Kai Lueke <kailueke@linux.microsoft.com>
Date:   Thu Mar 3 15:55:10 2022 +0100

    Revert "xfrm: state and policy should fail if XFRMA_IF_ID 0"
    
    commit a3d9001b4e287fc043e5539d03d71a32ab114bcb upstream.
    
    This reverts commit 68ac0f3810e76a853b5f7b90601a05c3048b8b54 because ID
    0 was meant to be used for configuring the policy/state without
    matching for a specific interface (e.g., Cilium is affected, see
    https://github.com/cilium/cilium/pull/18789 and
    https://github.com/cilium/cilium/pull/19019).
    
    Signed-off-by: Kai Lueke <kailueke@linux.microsoft.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
