commit dada86c5aaa8f2305bf8a8bf9014b60603f9f013
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 12 19:28:31 2019 +0100

    Linux 5.3.11

commit a46ee66f47837a36a1eaa48920601db6e05a1c56
Author: Junaid Shahid <junaids@google.com>
Date:   Fri Nov 1 00:14:14 2019 +0100

    kvm: x86: mmu: Recovery of shattered NX large pages
    
    commit 1aa9b9572b10529c2e64e2b8f44025d86e124308 upstream.
    
    The page table pages corresponding to broken down large pages are zapped in
    FIFO order, so that the large page can potentially be recovered, if it is
    not longer being used for execution.  This removes the performance penalty
    for walking deeper EPT page tables.
    
    By default, one large page will last about one hour once the guest
    reaches a steady state.
    
    Signed-off-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ad894b92932c8d1518d634994b1928db6033e19
Author: Junaid Shahid <junaids@google.com>
Date:   Fri Nov 1 00:14:08 2019 +0100

    kvm: Add helper function for creating VM worker threads
    
    commit c57c80467f90e5504c8df9ad3555d2c78800bf94 upstream.
    
    Add a function to create a kernel thread associated with a given VM. In
    particular, it ensures that the worker thread inherits the priority and
    cgroups of the calling thread.
    
    Signed-off-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78ffa84f00ff6b19f00c0e6dfe1870aba0db4025
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 4 12:22:02 2019 +0100

    kvm: mmu: ITLB_MULTIHIT mitigation
    
    commit b8e8c8303ff28c61046a4d0f6ea99aea609a7dc0 upstream.
    
    With some Intel processors, putting the same virtual address in the TLB
    as both a 4 KiB and 2 MiB page can confuse the instruction fetch unit
    and cause the processor to issue a machine check resulting in a CPU lockup.
    
    Unfortunately when EPT page tables use huge pages, it is possible for a
    malicious guest to cause this situation.
    
    Add a knob to mark huge pages as non-executable. When the nx_huge_pages
    parameter is enabled (and we are using EPT), all huge pages are marked as
    NX. If the guest attempts to execute in one of those pages, the page is
    broken down into 4K pages, which are then marked executable.
    
    This is not an issue for shadow paging (except nested EPT), because then
    the host is in control of TLB flushes and the problematic situation cannot
    happen.  With nested EPT, again the nested guest can cause problems shadow
    and direct EPT is treated in the same way.
    
    [ tglx: Fixup default to auto and massage wording a bit ]
    
    Originally-by: Junaid Shahid <junaids@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1655a277fe4aed4cab0590fa712961993d56e936
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Oct 11 11:59:48 2019 +0200

    kvm: x86, powerpc: do not allow clearing largepages debugfs entry
    
    commit 833b45de69a6016c4b0cebe6765d526a31a81580 upstream.
    
    The largepages debugfs entry is incremented/decremented as shadow
    pages are created or destroyed.  Clearing it will result in an
    underflow, which is harmless to KVM but ugly (and could be
    misinterpreted by tools that use debugfs information), so make
    this particular statistic read-only.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: kvm-ppc@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1af2cfe692941116565396065d6c86e203564fcd
Author: Gomez Iglesias, Antonio <antonio.gomez.iglesias@intel.com>
Date:   Mon Nov 4 12:22:03 2019 +0100

    Documentation: Add ITLB_MULTIHIT documentation
    
    commit 7f00cc8d4a51074eb0ad4c3f16c15757b1ddfb7d upstream.
    
    Add the initial ITLB_MULTIHIT documentation.
    
    [ tglx: Add it to the index so it gets actually built. ]
    
    Signed-off-by: Antonio Gomez Iglesias <antonio.gomez.iglesias@intel.com>
    Signed-off-by: Nelson D'Souza <nelson.dsouza@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d068ec1dca619fdaf37351424dbba21429644f64
Author: Tyler Hicks <tyhicks@canonical.com>
Date:   Mon Nov 4 12:22:02 2019 +0100

    cpu/speculation: Uninline and export CPU mitigations helpers
    
    commit 731dc9df975a5da21237a18c3384f811a7a41cc6 upstream.
    
    A kernel module may need to check the value of the "mitigations=" kernel
    command line parameter as part of its setup when the module needs
    to perform software mitigations for a CPU flaw.
    
    Uninline and export the helper functions surrounding the cpu_mitigations
    enum to allow for their usage from a module.
    
    Lastly, privatize the enum and cpu_mitigations variable since the value of
    cpu_mitigations can be checked with the exported helper functions.
    
    Signed-off-by: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 034967e8bd7d7f9dfd9c1348463906f0372fc999
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Mon Nov 4 12:22:01 2019 +0100

    x86/cpu: Add Tremont to the cpu vulnerability whitelist
    
    commit cad14885a8d32c1c0d8eaa7bf5c0152a22b6080e upstream.
    
    Add the new cpu family ATOM_TREMONT_D to the cpu vunerability
    whitelist. ATOM_TREMONT_D is not affected by X86_BUG_ITLB_MULTIHIT.
    
    ATOM_TREMONT_D might have mitigations against other issues as well, but
    only the ITLB multihit mitigation is confirmed at this point.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e79a48022f5f861e39babf31ee62f55328b8e09
Author: Vineela Tummalapalli <vineela.tummalapalli@intel.com>
Date:   Mon Nov 4 12:22:01 2019 +0100

    x86/bugs: Add ITLB_MULTIHIT bug infrastructure
    
    commit db4d30fbb71b47e4ecb11c4efa5d8aad4b03dfae upstream.
    
    Some processors may incur a machine check error possibly resulting in an
    unrecoverable CPU lockup when an instruction fetch encounters a TLB
    multi-hit in the instruction TLB. This can occur when the page size is
    changed along with either the physical address or cache type. The relevant
    erratum can be found here:
    
       https://bugzilla.kernel.org/show_bug.cgi?id=205195
    
    There are other processors affected for which the erratum does not fully
    disclose the impact.
    
    This issue affects both bare-metal x86 page tables and EPT.
    
    It can be mitigated by either eliminating the use of large pages or by
    using careful TLB invalidations when changing the page size in the page
    tables.
    
    Just like Spectre, Meltdown, L1TF and MDS, a new bit has been allocated in
    MSR_IA32_ARCH_CAPABILITIES (PSCHANGE_MC_NO) and will be set on CPUs which
    are mitigated against this issue.
    
    Signed-off-by: Vineela Tummalapalli <vineela.tummalapalli@intel.com>
    Co-developed-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a413f8c8637f8dba5ef94dd10f0ca894a553021d
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Nov 6 20:26:46 2019 -0600

    x86/speculation/taa: Fix printing of TAA_MSG_SMT on IBRS_ALL CPUs
    
    commit 012206a822a8b6ac09125bfaa210a95b9eb8f1c1 upstream.
    
    For new IBRS_ALL CPUs, the Enhanced IBRS check at the beginning of
    cpu_bugs_smt_update() causes the function to return early, unintentionally
    skipping the MDS and TAA logic.
    
    This is not a problem for MDS, because there appears to be no overlap
    between IBRS_ALL and MDS-affected CPUs.  So the MDS mitigation would be
    disabled and nothing would need to be done in this function anyway.
    
    But for TAA, the TAA_MSG_SMT string will never get printed on Cascade
    Lake and newer.
    
    The check is superfluous anyway: when 'spectre_v2_enabled' is
    SPECTRE_V2_IBRS_ENHANCED, 'spectre_v2_user' is always
    SPECTRE_V2_USER_NONE, and so the 'spectre_v2_user' switch statement
    handles it appropriately by doing nothing.  So just remove the check.
    
    Fixes: 1b42f017415b ("x86/speculation/taa: Add mitigation for TSX Async Abort")
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Tyler Hicks <tyhicks@canonical.com>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4943a4097ed4d32d2d996306c7b0350a21991380
Author: Michal Hocko <mhocko@suse.com>
Date:   Wed Oct 23 12:35:50 2019 +0200

    x86/tsx: Add config options to set tsx=on|off|auto
    
    commit db616173d787395787ecc93eef075fa975227b10 upstream.
    
    There is a general consensus that TSX usage is not largely spread while
    the history shows there is a non trivial space for side channel attacks
    possible. Therefore the tsx is disabled by default even on platforms
    that might have a safe implementation of TSX according to the current
    knowledge. This is a fair trade off to make.
    
    There are, however, workloads that really do benefit from using TSX and
    updating to a newer kernel with TSX disabled might introduce a
    noticeable regressions. This would be especially a problem for Linux
    distributions which will provide TAA mitigations.
    
    Introduce config options X86_INTEL_TSX_MODE_OFF, X86_INTEL_TSX_MODE_ON
    and X86_INTEL_TSX_MODE_AUTO to control the TSX feature. The config
    setting can be overridden by the tsx cmdline options.
    
     [ bp: Text cleanups from Josh. ]
    
    Suggested-by: Borislav Petkov <bpetkov@suse.de>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bd7d98dae592f2eca8e460b74d9f1df0891ac2c
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:32:55 2019 +0200

    x86/speculation/taa: Add documentation for TSX Async Abort
    
    commit a7a248c593e4fd7a67c50b5f5318fe42a0db335e upstream.
    
    Add the documenation for TSX Async Abort. Include the description of
    the issue, how to check the mitigation state, control the mitigation,
    guidance for system administrators.
    
     [ bp: Add proper SPDX tags, touch ups by Josh and me. ]
    
    Co-developed-by: Antonio Gomez Iglesias <antonio.gomez.iglesias@intel.com>
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Antonio Gomez Iglesias <antonio.gomez.iglesias@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fb8160ccd4a8ee015e10bebe2d02819696b6215
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:28:57 2019 +0200

    x86/tsx: Add "auto" option to the tsx= cmdline parameter
    
    commit 7531a3596e3272d1f6841e0d601a614555dc6b65 upstream.
    
    Platforms which are not affected by X86_BUG_TAA may want the TSX feature
    enabled. Add "auto" option to the TSX cmdline parameter. When tsx=auto
    disable TSX when X86_BUG_TAA is present, otherwise enable TSX.
    
    More details on X86_BUG_TAA can be found here:
    https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/tsx_async_abort.html
    
     [ bp: Extend the arg buffer to accommodate "auto\0". ]
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bfef6e0fa43dde5718d7d47f45400e390b3f175
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:23:33 2019 +0200

    kvm/x86: Export MDS_NO=0 to guests when TSX is enabled
    
    commit e1d38b63acd843cfdd4222bf19a26700fd5c699e upstream.
    
    Export the IA32_ARCH_CAPABILITIES MSR bit MDS_NO=0 to guests on TSX
    Async Abort(TAA) affected hosts that have TSX enabled and updated
    microcode. This is required so that the guests don't complain,
    
      "Vulnerable: Clear CPU buffers attempted, no microcode"
    
    when the host has the updated microcode to clear CPU buffers.
    
    Microcode update also adds support for MSR_IA32_TSX_CTRL which is
    enumerated by the ARCH_CAP_TSX_CTRL bit in IA32_ARCH_CAPABILITIES MSR.
    Guests can't do this check themselves when the ARCH_CAP_TSX_CTRL bit is
    not exported to the guests.
    
    In this case export MDS_NO=0 to the guests. When guests have
    CPUID.MD_CLEAR=1, they deploy MDS mitigation which also mitigates TAA.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3087c94f2194269e6e3efb87ee88daa74dbcf8fc
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 12:19:51 2019 +0200

    x86/speculation/taa: Add sysfs reporting for TSX Async Abort
    
    commit 6608b45ac5ecb56f9e171252229c39580cc85f0f upstream.
    
    Add the sysfs reporting file for TSX Async Abort. It exposes the
    vulnerability and the mitigation state similar to the existing files for
    the other hardware vulnerabilities.
    
    Sysfs file path is:
    /sys/devices/system/cpu/vulnerabilities/tsx_async_abort
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 981d3a01c29b03b512604f21196af3ec7a14987f
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 11:30:45 2019 +0200

    x86/speculation/taa: Add mitigation for TSX Async Abort
    
    commit 1b42f017415b46c317e71d41c34ec088417a1883 upstream.
    
    TSX Async Abort (TAA) is a side channel vulnerability to the internal
    buffers in some Intel processors similar to Microachitectural Data
    Sampling (MDS). In this case, certain loads may speculatively pass
    invalid data to dependent operations when an asynchronous abort
    condition is pending in a TSX transaction.
    
    This includes loads with no fault or assist condition. Such loads may
    speculatively expose stale data from the uarch data structures as in
    MDS. Scope of exposure is within the same-thread and cross-thread. This
    issue affects all current processors that support TSX, but do not have
    ARCH_CAP_TAA_NO (bit 8) set in MSR_IA32_ARCH_CAPABILITIES.
    
    On CPUs which have their IA32_ARCH_CAPABILITIES MSR bit MDS_NO=0,
    CPUID.MD_CLEAR=1 and the MDS mitigation is clearing the CPU buffers
    using VERW or L1D_FLUSH, there is no additional mitigation needed for
    TAA. On affected CPUs with MDS_NO=1 this issue can be mitigated by
    disabling the Transactional Synchronization Extensions (TSX) feature.
    
    A new MSR IA32_TSX_CTRL in future and current processors after a
    microcode update can be used to control the TSX feature. There are two
    bits in that MSR:
    
    * TSX_CTRL_RTM_DISABLE disables the TSX sub-feature Restricted
    Transactional Memory (RTM).
    
    * TSX_CTRL_CPUID_CLEAR clears the RTM enumeration in CPUID. The other
    TSX sub-feature, Hardware Lock Elision (HLE), is unconditionally
    disabled with updated microcode but still enumerated as present by
    CPUID(EAX=7).EBX{bit4}.
    
    The second mitigation approach is similar to MDS which is clearing the
    affected CPU buffers on return to user space and when entering a guest.
    Relevant microcode update is required for the mitigation to work.  More
    details on this approach can be found here:
    
      https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html
    
    The TSX feature can be controlled by the "tsx" command line parameter.
    If it is force-enabled then "Clear CPU buffers" (MDS mitigation) is
    deployed. The effective mitigation state can be read from sysfs.
    
     [ bp:
       - massage + comments cleanup
       - s/TAA_MITIGATION_TSX_DISABLE/TAA_MITIGATION_TSX_DISABLED/g - Josh.
       - remove partial TAA mitigation in update_mds_branch_idle() - Josh.
       - s/tsx_async_abort_cmdline/tsx_async_abort_parse_cmdline/g
     ]
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b0f6c35a0d3b08369ddafb6498fbf18ffc436cb
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 11:01:53 2019 +0200

    x86/cpu: Add a "tsx=" cmdline option with TSX disabled by default
    
    commit 95c5824f75f3ba4c9e8e5a4b1a623c95390ac266 upstream.
    
    Add a kernel cmdline parameter "tsx" to control the Transactional
    Synchronization Extensions (TSX) feature. On CPUs that support TSX
    control, use "tsx=on|off" to enable or disable TSX. Not specifying this
    option is equivalent to "tsx=off". This is because on certain processors
    TSX may be used as a part of a speculative side channel attack.
    
    Carve out the TSX controlling functionality into a separate compilation
    unit because TSX is a CPU feature while the TSX async abort control
    machinery will go to cpu/bugs.c.
    
     [ bp: - Massage, shorten and clear the arg buffer.
           - Clarifications of the tsx= possible options - Josh.
           - Expand on TSX_CTRL availability - Pawan. ]
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d6c39a641b7b527b12c16459ad0b42d7b4ba7a1
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 10:52:35 2019 +0200

    x86/cpu: Add a helper function x86_read_arch_cap_msr()
    
    commit 286836a70433fb64131d2590f4bf512097c255e1 upstream.
    
    Add a helper function to read the IA32_ARCH_CAPABILITIES MSR.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5b1f0297258207ac438525fe81d97a6f9ab1363
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Wed Oct 23 10:45:50 2019 +0200

    x86/msr: Add the IA32_TSX_CTRL MSR
    
    commit c2955f270a84762343000f103e0640d29c7a96f3 upstream.
    
    Transactional Synchronization Extensions (TSX) may be used on certain
    processors as part of a speculative side channel attack.  A microcode
    update for existing processors that are vulnerable to this attack will
    add a new MSR - IA32_TSX_CTRL to allow the system administrator the
    option to disable TSX as one of the possible mitigations.
    
    The CPUs which get this new MSR after a microcode upgrade are the ones
    which do not set MSR_IA32_ARCH_CAPABILITIES.MDS_NO (bit 5) because those
    CPUs have CPUID.MD_CLEAR, i.e., the VERW implementation which clears all
    CPU buffers takes care of the TAA case as well.
    
      [ Note that future processors that are not vulnerable will also
        support the IA32_TSX_CTRL MSR. ]
    
    Add defines for the new IA32_TSX_CTRL MSR and its bits.
    
    TSX has two sub-features:
    
    1. Restricted Transactional Memory (RTM) is an explicitly-used feature
       where new instructions begin and end TSX transactions.
    2. Hardware Lock Elision (HLE) is implicitly used when certain kinds of
       "old" style locks are used by software.
    
    Bit 7 of the IA32_ARCH_CAPABILITIES indicates the presence of the
    IA32_TSX_CTRL MSR.
    
    There are two control bits in IA32_TSX_CTRL MSR:
    
      Bit 0: When set, it disables the Restricted Transactional Memory (RTM)
             sub-feature of TSX (will force all transactions to abort on the
             XBEGIN instruction).
    
      Bit 1: When set, it disables the enumeration of the RTM and HLE feature
             (i.e. it will make CPUID(EAX=7).EBX{bit4} and
              CPUID(EAX=7).EBX{bit11} read as 0).
    
    The other TSX sub-feature, Hardware Lock Elision (HLE), is
    unconditionally disabled by the new microcode but still enumerated
    as present by CPUID(EAX=7).EBX{bit4}, unless disabled by
    IA32_TSX_CTRL_MSR[1] - TSX_CTRL_CPUID_CLEAR.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Mark Gross <mgross@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a4f236d3ad245824e8571d15338c38eea71fae0
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Mon Nov 11 08:13:24 2019 -0800

    drm/i915/cmdparser: Fix jump whitelist clearing
    
    commit ea0b163b13ffc52818c079adb00d55e227a6da6f upstream.
    
    When a jump_whitelist bitmap is reused, it needs to be cleared.
    Currently this is done with memset() and the size calculation assumes
    bitmaps are made of 32-bit words, not longs.  So on 64-bit
    architectures, only the first half of the bitmap is cleared.
    
    If some whitelist bits are carried over between successive batches
    submitted on the same context, this will presumably allow embedding
    the rogue instructions that we're trying to reject.
    
    Use bitmap_zero() instead, which gets the calculation right.
    
    Fixes: f8c08d8faee5 ("drm/i915/cmdparser: Add support for backward jumps")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4360736a7c0a6326e3bbdf7d41181f6ed03d9a6
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Jul 9 18:24:27 2018 +0300

    drm/i915/gen8+: Add RC6 CTX corruption WA
    
    commit 7e34f4e4aad3fd34c02b294a3cf2321adf5b4438 upstream.
    
    In some circumstances the RC6 context can get corrupted. We can detect
    this and take the required action, that is disable RC6 and runtime PM.
    The HW recovers from the corrupted state after a system suspend/resume
    cycle, so detect the recovery and re-enable RC6 and runtime PM.
    
    v2: rebase (Mika)
    v3:
    - Move intel_suspend_gt_powersave() to the end of the GEM suspend
      sequence.
    - Add commit message.
    v4:
    - Rebased on intel_uncore_forcewake_put(i915->uncore, ...) API
      change.
    v5: rebased on gem/gt split (Mika)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 343c1b3bb8284af4dccd5c47a9818eb40be8c39a
Author: Uma Shankar <uma.shankar@intel.com>
Date:   Tue Aug 7 21:15:35 2018 +0530

    drm/i915: Lower RM timeout to avoid DSI hard hangs
    
    commit 1d85a299c4db57c55e0229615132c964d17aa765 upstream.
    
    In BXT/APL, device 2 MMIO reads from MIPI controller requires its PLL
    to be turned ON. When MIPI PLL is turned off (MIPI Display is not
    active or connected), and someone (host or GT engine) tries to read
    MIPI registers, it causes hard hang. This is a hardware restriction
    or limitation.
    
    Driver by itself doesn't read MIPI registers when MIPI display is off.
    But any userspace application can submit unprivileged batch buffer for
    execution. In that batch buffer there can be mmio reads. And these
    reads are allowed even for unprivileged applications. If these
    register reads are for MIPI DSI controller and MIPI display is not
    active during that time, then the MMIO read operation causes system
    hard hang and only way to recover is hard reboot. A genuine
    process/application won't submit batch buffer like this and doesn't
    cause any issue. But on a compromised system, a malign userspace
    process/app can generate such batch buffer and can trigger system
    hard hang (denial of service attack).
    
    The fix is to lower the internal MMIO timeout value to an optimum
    value of 950us as recommended by hardware team. If the timeout is
    beyond 1ms (which will hit for any value we choose if MMIO READ on a
    DSI specific register is performed without PLL ON), it causes the
    system hang. But if the timeout value is lower than it will be below
    the threshold (even if timeout happens) and system will not get into
    a hung state. This will avoid a system hang without losing any
    programming or GT interrupts, taking the worst case of lowest CDCLK
    frequency and early DC5 abort into account.
    
    Signed-off-by: Uma Shankar <uma.shankar@intel.com>
    Reviewed-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdb4e778f43a07e0d51354c4b9a8a17306ec4b85
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Thu Sep 20 09:45:10 2018 -0700

    drm/i915/cmdparser: Ignore Length operands during command matching
    
    commit 926abff21a8f29ef159a3ac893b05c6e50e043c3 upstream.
    
    Some of the gen instruction macros (e.g. MI_DISPLAY_FLIP) have the
    length directly encoded in them. Since these are used directly in
    the tables, the Length becomes part of the comparison used for
    matching during parsing. Thus, if the cmd being parsed has a
    different length to that in the table, it is not matched and the
    cmd is accepted via the default variable length path.
    
    Fix by masking out everything except the Opcode in the cmd tables
    
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a3aabb5f347d18ad446f2126dba24e02e320ae8
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Thu Sep 20 09:58:36 2018 -0700

    drm/i915/cmdparser: Add support for backward jumps
    
    commit f8c08d8faee5567803c8c533865296ca30286bbf upstream.
    
    To keep things manageable, the pre-gen9 cmdparser does not
    attempt to track any form of nested BB_START's. This did not
    prevent usermode from using nested starts, or even chained
    batches because the cmdparser is not strictly enforced pre gen9.
    
    Instead, the existence of a nested BB_START would cause the batch
    to be emitted in insecure mode, and any privileged capabilities
    would not be available.
    
    For Gen9, the cmdparser becomes mandatory (for BCS at least), and
    so not providing any form of nested BB_START support becomes
    overly restrictive. Any such batch will simply not run.
    
    We make heavy use of backward jumps in igt, and it is much easier
    to add support for this restricted subset of nested jumps, than to
    rewrite the whole of our test suite to avoid them.
    
    Add the required logic to support limited backward jumps, to
    instructions that have already been validated by the parser.
    
    Note that it's not sufficient to simply approve any BB_START
    that jumps backwards in the buffer because this would allow an
    attacker to embed a rogue instruction sequence within the
    operand words of a harmless instruction (say LRI) and jump to
    that.
    
    We introduce a bit array to track every instr offset successfully
    validated, and test the target of BB_START against this. If the
    target offset hits, it is re-written to the same offset in the
    shadow buffer and the BB_START cmd is allowed.
    
    Note: This patch deliberately ignores checkpatch issues in the
    cmdtables, in order to match the style of the surrounding code.
    We'll correct the entire file in one go in a later patch.
    
    v2: set dispatch secure late (Mika)
    v3: rebase (Mika)
    v4: Clear whitelist on each parse
    Minor review updates (Chris)
    v5: Correct backward jump batching
    v6: fix compilation error due to struct eb shuffle (Mika)
    
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77fc9100fc5768ca01ca2dd2cc5a515a4723a58a
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Thu Sep 27 10:23:17 2018 -0700

    drm/i915/cmdparser: Use explicit goto for error paths
    
    commit 0546a29cd884fb8184731c79ab008927ca8859d0 upstream.
    
    In the next patch we will be adding a second valid
    termination condition which will require a small
    amount of refactoring to share logic with the BB_END
    case.
    
    Refactor all error conditions to jump to a dedicated
    exit path, with 'break' reserved only for a successful
    parse.
    
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b75b05cb098b15658a91fae3be29a58a1cfa2a1
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Mon Apr 23 11:12:15 2018 -0700

    drm/i915: Add gen9 BCS cmdparsing
    
    commit 0f2f39758341df70202ae1c42d5a1e4ee392b6d3 upstream.
    
    For gen9 we enable cmdparsing on the BCS ring, specifically
    to catch inadvertent accesses to sensitive registers
    
    Unlike gen7/hsw, we use the parser only to block certain
    registers. We can rely on h/w to block restricted commands,
    so the command tables only provide enough info to allow the
    parser to delineate each command, and identify commands that
    access registers.
    
    Note: This patch deliberately ignores checkpatch issues in
    favour of matching the style of the surrounding code. We'll
    correct the entire file in one go in a later patch.
    
    v3: rebase (Mika)
    v4: Add RING_TIMESTAMP registers to whitelist (Jon)
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41e79b82c420f88c709f53dd2f3e61e0c01d511b
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Wed Aug 1 09:45:50 2018 -0700

    drm/i915: Allow parsing of unsized batches
    
    commit 435e8fc059dbe0eec823a75c22da2972390ba9e0 upstream.
    
    In "drm/i915: Add support for mandatory cmdparsing" we introduced the
    concept of mandatory parsing. This allows the cmdparser to be invoked
    even when user passes batch_len=0 to the execbuf ioctl's.
    
    However, the cmdparser needs to know the extents of the buffer being
    scanned. Refactor the code to ensure the cmdparser uses the actual
    object size, instead of the incoming length, if user passes 0.
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78340a6f2ec06a4f851ad82dd2b1787280c389de
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Tue May 22 13:59:06 2018 -0700

    drm/i915: Support ro ppgtt mapped cmdparser shadow buffers
    
    commit 4f7af1948abcb18b4772fe1bcd84d7d27d96258c upstream.
    
    For Gen7, the original cmdparser motive was to permit limited
    use of register read/write instructions in unprivileged BB's.
    This worked by copying the user supplied bb to a kmd owned
    bb, and running it in secure mode, from the ggtt, only if
    the scanner finds no unsafe commands or registers.
    
    For Gen8+ we can't use this same technique because running bb's
    from the ggtt also disables access to ppgtt space. But we also
    do not actually require 'secure' execution since we are only
    trying to reduce the available command/register set. Instead we
    will copy the user buffer to a kmd owned read-only bb in ppgtt,
    and run in the usual non-secure mode.
    
    Note that ro pages are only supported by ppgtt (not ggtt), but
    luckily that's exactly what we need.
    
    Add the required paths to map the shadow buffer to ppgtt ro for Gen8+
    
    v2: IS_GEN7/IS_GEN (Mika)
    v3: rebase
    v4: rebase
    v5: rebase
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 110416def1d659f815103c77ccca70936ec2636c
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Wed Aug 1 09:33:59 2018 -0700

    drm/i915: Add support for mandatory cmdparsing
    
    commit 311a50e76a33d1e029563c24b2ff6db0c02b5afe upstream.
    
    The existing cmdparser for gen7 can be bypassed by specifying
    batch_len=0 in the execbuf call. This is safe because bypassing
    simply reduces the cmd-set available.
    
    In a later patch we will introduce cmdparsing for gen9, as a
    security measure, which must be strictly enforced since without
    it we are vulnerable to DoS attacks.
    
    Introduce the concept of 'required' cmd parsing that cannot be
    bypassed by submitting zero-length bb's.
    
    v2: rebase (Mika)
    v2: rebase (Mika)
    v3: fix conflict on engine flags (Mika)
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7819546459c63b98fe14d43137ef8e4eebeb78f4
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Fri Jun 8 10:05:26 2018 -0700

    drm/i915: Remove Master tables from cmdparser
    
    commit 66d8aba1cd6db34af10de465c0d52af679288cb6 upstream.
    
    The previous patch has killed support for secure batches
    on gen6+, and hence the cmdparsers master tables are
    now dead code. Remove them.
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5ccff64277dab16ace19034b5a45666b28babb9
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Fri Jun 8 08:53:46 2018 -0700

    drm/i915: Disable Secure Batches for gen6+
    
    commit 44157641d448cbc0c4b73c5231d2b911f0cb0427 upstream.
    
    Retroactively stop reporting support for secure batches
    through the api for gen6+ so that older binaries trigger
    the fallback path instead.
    
    Older binaries use secure batches pre gen6 to access resources
    that are not available to normal usermode processes. However,
    all known userspace explicitly checks for HAS_SECURE_BATCHES
    before relying on the secure batch feature.
    
    Since there are no known binaries relying on this for newer gens
    we can kill secure batches from gen6, via I915_PARAM_HAS_SECURE_BATCHES.
    
    v2: rebase (Mika)
    v3: rebase (Mika)
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d185a9932c9e42344106af1ce8287d8f2b6c4ec
Author: Jon Bloomfield <jon.bloomfield@intel.com>
Date:   Fri Apr 20 14:26:01 2018 -0700

    drm/i915: Rename gen7 cmdparser tables
    
    commit 0a2f661b6c21815a7fa60e30babe975fee8e73c6 upstream.
    
    We're about to introduce some new tables for later gens, and the
    current naming for the gen7 tables will no longer make sense.
    
    v2: rebase
    
    Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edd4b3e558a3a6baea6c891288b0c0222b59842b
Author: Juliet Kim <julietk@linux.vnet.ibm.com>
Date:   Fri Sep 20 16:11:22 2019 -0400

    net/ibmvnic: unlock rtnl_lock in reset so linkwatch_event can run
    
    [ Upstream commit b27507bb59ed504d7fa4d6a35f25a8cc39903b54 ]
    
    Commit a5681e20b541 ("net/ibmnvic: Fix deadlock problem in reset")
    made the change to hold the RTNL lock during a reset to avoid deadlock
    but linkwatch_event is fired during the reset and needs the RTNL lock.
    That keeps linkwatch_event process from proceeding until the reset
    is complete. The reset process cannot tolerate the linkwatch_event
    processing after reset completes, so release the RTNL lock during the
    process to allow a chance for linkwatch_event to run during reset.
    This does not guarantee that the linkwatch_event will be processed as
    soon as link state changes, but is an improvement over the current code
    where linkwatch_event processing is always delayed, which prevents
    transmissions on the device from being deactivated leading transmit
    watchdog timer to time-out.
    
    Release the RTNL lock before link state change and re-acquire after
    the link state change to allow linkwatch_event to grab the RTNL lock
    and run during the reset.
    
    Fixes: a5681e20b541 ("net/ibmnvic: Fix deadlock problem in reset")
    Signed-off-by: Juliet Kim <julietk@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 922accb4d259d4aa0ba2d9fab7af840fda5b51d1
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Sep 23 11:12:29 2019 +0200

    arm64: errata: Update stale comment
    
    [ Upstream commit 7a292b6c7c9c35afee01ce3b2248f705869d0ff1 ]
    
    Commit 73f381660959 ("arm64: Advertise mitigation of Spectre-v2, or lack
    thereof") renamed the caller of the install_bp_hardening_cb() function
    but forgot to update a comment, which can be confusing when trying to
    follow the code flow.
    
    Fixes: 73f381660959 ("arm64: Advertise mitigation of Spectre-v2, or lack thereof")
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d715f31f5fbefe7f4441e9b812149dcf7e97a2c
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Thu Oct 10 19:18:14 2019 +0200

    netfilter: ipset: Copy the right MAC address in hash:ip,mac IPv6 sets
    
    [ Upstream commit 97664bc2c77e2b65cdedddcae2643fc93291d958 ]
    
    Same as commit 1b4a75108d5b ("netfilter: ipset: Copy the right MAC
    address in bitmap:ip,mac and hash:ip,mac sets"), another copy and paste
    went wrong in commit 8cc4ccf58379 ("netfilter: ipset: Allow matching on
    destination MAC address for mac and ipmac sets").
    
    When I fixed this for IPv4 in 1b4a75108d5b, I didn't realise that
    hash:ip,mac sets also support IPv6 as family, and this is covered by a
    separate function, hash_ipmac6_kadt().
    
    In hash:ip,mac sets, the first dimension is the IP address, and the
    second dimension is the MAC address: check the IPSET_DIM_TWO_SRC flag
    in flags while deciding which MAC address to copy, destination or
    source.
    
    This way, mixing source and destination matches for the two dimensions
    of ip,mac hash type works as expected, also for IPv6. With this setup:
    
      ip netns add A
      ip link add veth1 type veth peer name veth2 netns A
      ip addr add 2001:db8::1/64 dev veth1
      ip -net A addr add 2001:db8::2/64 dev veth2
      ip link set veth1 up
      ip -net A link set veth2 up
    
      dst=$(ip netns exec A cat /sys/class/net/veth2/address)
    
      ip netns exec A ipset create test_hash hash:ip,mac family inet6
      ip netns exec A ipset add test_hash 2001:db8::1,${dst}
      ip netns exec A ip6tables -A INPUT -p icmpv6 --icmpv6-type 135 -j ACCEPT
      ip netns exec A ip6tables -A INPUT -m set ! --match-set test_hash src,dst -j DROP
    
    ipset now correctly matches a test packet:
    
      # ping -c1 2001:db8::2 >/dev/null
      # echo $?
      0
    
    Reported-by: Chen, Yi <yiche@redhat.com>
    Fixes: 8cc4ccf58379 ("netfilter: ipset: Allow matching on destination MAC address for mac and ipmac sets")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36ff8a445ab6c674ae45427b0cb3cb99545221cf
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Tue Oct 29 09:12:32 2019 +0000

    bonding: fix using uninitialized mode_lock
    
    [ Upstream commit ad9bd8daf2f9938572b0604e1280fefa8f338581 ]
    
    When a bonding interface is being created, it setups its mode and options.
    At that moment, it uses mode_lock so mode_lock should be initialized
    before that moment.
    
    rtnl_newlink()
            rtnl_create_link()
                    alloc_netdev_mqs()
                            ->setup() //bond_setup()
            ->newlink //bond_newlink
                    bond_changelink()
                    register_netdevice()
                            ->ndo_init() //bond_init()
    
    After commit 089bca2caed0 ("bonding: use dynamic lockdep key instead of
    subclass"), mode_lock is initialized in bond_init().
    So in the bond_changelink(), un-initialized mode_lock can be used.
    mode_lock should be initialized in bond_setup().
    This patch partially reverts commit 089bca2caed0 ("bonding: use dynamic
    lockdep key instead of subclass")
    
    Test command:
        ip link add bond0 type bond mode 802.3ad lacp_rate 0
    
    Splat looks like:
    [   60.615127] INFO: trying to register non-static key.
    [   60.615900] the code is fine but needs lockdep annotation.
    [   60.616697] turning off the locking correctness validator.
    [   60.617490] CPU: 1 PID: 957 Comm: ip Not tainted 5.4.0-rc3+ #109
    [   60.618350] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   60.619481] Call Trace:
    [   60.619918]  dump_stack+0x7c/0xbb
    [   60.620453]  register_lock_class+0x1215/0x14d0
    [   60.621131]  ? alloc_netdev_mqs+0x7b3/0xcc0
    [   60.621771]  ? is_bpf_text_address+0x86/0xf0
    [   60.622416]  ? is_dynamic_key+0x230/0x230
    [   60.623032]  ? unwind_get_return_address+0x5f/0xa0
    [   60.623757]  ? create_prof_cpu_mask+0x20/0x20
    [   60.624408]  ? arch_stack_walk+0x83/0xb0
    [   60.625023]  __lock_acquire+0xd8/0x3de0
    [   60.625616]  ? stack_trace_save+0x82/0xb0
    [   60.626225]  ? stack_trace_consume_entry+0x160/0x160
    [   60.626957]  ? deactivate_slab.isra.80+0x2c5/0x800
    [   60.627668]  ? register_lock_class+0x14d0/0x14d0
    [   60.628380]  ? alloc_netdev_mqs+0x7b3/0xcc0
    [   60.629020]  ? save_stack+0x69/0x80
    [   60.629574]  ? save_stack+0x19/0x80
    [   60.630121]  ? __kasan_kmalloc.constprop.4+0xa0/0xd0
    [   60.630859]  ? __kmalloc_node+0x16f/0x480
    [   60.631472]  ? alloc_netdev_mqs+0x7b3/0xcc0
    [   60.632121]  ? rtnl_create_link+0x2ed/0xad0
    [   60.634388]  ? __rtnl_newlink+0xad4/0x11b0
    [   60.635024]  lock_acquire+0x164/0x3b0
    [   60.635608]  ? bond_3ad_update_lacp_rate+0x91/0x200 [bonding]
    [   60.636463]  _raw_spin_lock_bh+0x38/0x70
    [   60.637084]  ? bond_3ad_update_lacp_rate+0x91/0x200 [bonding]
    [   60.637930]  bond_3ad_update_lacp_rate+0x91/0x200 [bonding]
    [   60.638753]  ? bond_3ad_lacpdu_recv+0xb30/0xb30 [bonding]
    [   60.639552]  ? bond_opt_get_val+0x180/0x180 [bonding]
    [   60.640307]  ? ___slab_alloc+0x5aa/0x610
    [   60.640925]  bond_option_lacp_rate_set+0x71/0x140 [bonding]
    [   60.641751]  __bond_opt_set+0x1ff/0xbb0 [bonding]
    [   60.643217]  ? kasan_unpoison_shadow+0x30/0x40
    [   60.643924]  bond_changelink+0x9a4/0x1700 [bonding]
    [   60.644653]  ? memset+0x1f/0x40
    [   60.742941]  ? bond_slave_changelink+0x1a0/0x1a0 [bonding]
    [   60.752694]  ? alloc_netdev_mqs+0x8ea/0xcc0
    [   60.753330]  ? rtnl_create_link+0x2ed/0xad0
    [   60.753964]  bond_newlink+0x1e/0x60 [bonding]
    [   60.754612]  __rtnl_newlink+0xb9f/0x11b0
    [ ... ]
    
    Reported-by: syzbot+8da67f407bcba2c72e6e@syzkaller.appspotmail.com
    Reported-by: syzbot+0d083911ab18b710da71@syzkaller.appspotmail.com
    Fixes: 089bca2caed0 ("bonding: use dynamic lockdep key instead of subclass")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8603233ea82ba893bf48f39095e4f8119327bc26
Author: Suwan Kim <suwan.kim027@gmail.com>
Date:   Tue Oct 22 18:30:17 2019 +0900

    usbip: Fix free of unallocated memory in vhci tx
    
    [ Upstream commit d4d8257754c3300ea2a465dadf8d2b02c713c920 ]
    
    iso_buffer should be set to NULL after use and free in the while loop.
    In the case of isochronous URB in the while loop, iso_buffer is
    allocated and after sending it to server, buffer is deallocated. And
    then, if the next URB in the while loop is not a isochronous pipe,
    iso_buffer still holds the previously deallocated buffer address and
    kfree tries to free wrong buffer address.
    
    Fixes: ea44d190764b ("usbip: Implement SG support to vhci-hcd and stub driver")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Suwan Kim <suwan.kim027@gmail.com>
    Reviewed-by: Julia Lawall <julia.lawall@lip6.fr>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20191022093017.8027-1-suwan.kim027@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5c0fa62ddab7696cd3f42b637e450f4b8caf4e8
Author: Keyon Jie <yang.jie@linux.intel.com>
Date:   Fri Oct 25 17:15:38 2019 -0500

    ASoC: SOF: Intel: hda-stream: fix the CONFIG_ prefix missing
    
    [ Upstream commit f792bd173a6fd51d1a4dde04263085ce67486aa3 ]
    
    We are missing the 'CONFIG_' prefix when using the kernel configure item
    SND_SOC_SOF_HDA_ALWAYS_ENABLE_DMI_L1, here correct them.
    
    Fixes: 43b2ab9009b13b ('ASoC: SOF: Intel: hda: Disable DMI L1 entry during capture')
    Signed-off-by: Keyon Jie <yang.jie@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20191025221538.6668-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e74a78cf2f699385ca043f781f50ec0e8e69fed5
Author: Amelie Delaunay <amelie.delaunay@st.com>
Date:   Mon Nov 4 11:55:29 2019 +0100

    ARM: dts: stm32: change joystick pinctrl definition on stm32mp157c-ev1
    
    [ Upstream commit f4d6e0f79bcde7810890563bac8e0f3479fe6d03 ]
    
    Pins used for joystick are all configured as input. "push-pull" is not a
    valid setting for an input pin.
    
    Fixes: a502b343ebd0 ("pinctrl: stmfx: update pinconf settings")
    Signed-off-by: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: Amelie Delaunay <amelie.delaunay@st.com>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e967af04ec0e2894b91d8e3e0bddd2f17937005
Author: Tejun Heo <tj@kernel.org>
Date:   Fri Nov 8 12:18:29 2019 -0800

    cgroup,writeback: don't switch wbs immediately on dead wbs if the memcg is dead
    
    commit 65de03e251382306a4575b1779c57c87889eee49 upstream.
    
    cgroup writeback tries to refresh the associated wb immediately if the
    current wb is dead.  This is to avoid keeping issuing IOs on the stale
    wb after memcg - blkcg association has changed (ie. when blkcg got
    disabled / enabled higher up in the hierarchy).
    
    Unfortunately, the logic gets triggered spuriously on inodes which are
    associated with dead cgroups.  When the logic is triggered on dead
    cgroups, the attempt fails only after doing quite a bit of work
    allocating and initializing a new wb.
    
    While c3aab9a0bd91 ("mm/filemap.c: don't initiate writeback if mapping
    has no dirty pages") alleviated the issue significantly as it now only
    triggers when the inode has dirty pages.  However, the condition can
    still be triggered before the inode is switched to a different cgroup
    and the logic simply doesn't make sense.
    
    Skip the immediate switching if the associated memcg is dying.
    
    This is a simplified version of the following two patches:
    
     * https://lore.kernel.org/linux-mm/20190513183053.GA73423@dennisz-mbp/
     * http://lkml.kernel.org/r/156355839560.2063.5265687291430814589.stgit@buzz
    
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Fixes: e8a7abf5a5bd ("writeback: disassociate inodes from dying bdi_writebacks")
    Acked-by: Dennis Zhou <dennis@kernel.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4bdb2697ccc9cecf1a9de86905c309ad901da4c
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Mon Sep 23 15:34:45 2019 -0700

    mm/filemap.c: don't initiate writeback if mapping has no dirty pages
    
    commit c3aab9a0bd91b696a852169479b7db1ece6cbf8c upstream.
    
    Functions like filemap_write_and_wait_range() should do nothing if inode
    has no dirty pages or pages currently under writeback.  But they anyway
    construct struct writeback_control and this does some atomic operations if
    CONFIG_CGROUP_WRITEBACK=y - on fast path it locks inode->i_lock and
    updates state of writeback ownership, on slow path might be more work.
    Current this path is safely avoided only when inode mapping has no pages.
    
    For example generic_file_read_iter() calls filemap_write_and_wait_range()
    at each O_DIRECT read - pretty hot path.
    
    This patch skips starting new writeback if mapping has no dirty tags set.
    If writeback is already in progress filemap_write_and_wait_range() will
    wait for it.
    
    Link: http://lkml.kernel.org/r/156378816804.1087.8607636317907921438.stgit@buzz
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab3664eabfa765e8fabcc106e23f7382ded518cb
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Oct 24 11:28:29 2019 +0800

    timekeeping/vsyscall: Update VDSO data unconditionally
    
    [ Upstream commit 52338415cf4d4064ae6b8dd972dadbda841da4fa ]
    
    The update of the VDSO data is depending on __arch_use_vsyscall() returning
    True. This is a leftover from the attempt to map the features of various
    architectures 1:1 into generic code.
    
    The usage of __arch_use_vsyscall() in the actual vsyscall implementations
    got dropped and replaced by the requirement for the architecture code to
    return U64_MAX if the global clocksource is not usable in the VDSO.
    
    But the __arch_use_vsyscall() check in the update code stayed which causes
    the VDSO data to be stale or invalid when an architecture actually
    implements that function and returns False when the current clocksource is
    not usable in the VDSO.
    
    As a consequence the VDSO implementations of clock_getres(), time(),
    clock_gettime(CLOCK_.*_COARSE) operate on invalid data and return bogus
    information.
    
    Remove the __arch_use_vsyscall() check from the VDSO update function and
    update the VDSO data unconditionally.
    
    [ tglx: Massaged changelog and removed the now useless implementations in
            asm-generic/ARM64/MIPS ]
    
    Fixes: 44f57d788e7deecb50 ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1571887709-11447-1-git-send-email-chenhc@lemote.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58578eabf8f9fb0530d5eb2da0dc14477918ebdf
Author: Leonard Crestez <leonard.crestez@nxp.com>
Date:   Tue Oct 22 22:21:28 2019 +0300

    clk: imx8m: Use SYS_PLL1_800M as intermediate parent of CLK_ARM
    
    [ Upstream commit b234fe9558615098d8d62516e7041ad7f99ebcea ]
    
    During cpu frequency switching the main "CLK_ARM" is reparented to an
    intermediate "step" clock. On imx8mm and imx8mn the 24M oscillator is
    used for this purpose but it is extremely slow, increasing wakeup
    latencies to the point that i2c transactions can timeout and system
    becomes unresponsive.
    
    Fix by switching the "step" clk to SYS_PLL1_800M, matching the behavior
    of imx8m cpufreq drivers in imx vendor tree.
    
    This bug was not immediately apparent because upstream arm64 defconfig
    uses the "performance" governor by default so no cpufreq transitions
    happen.
    
    Fixes: ba5625c3e272 ("clk: imx: Add clock driver support for imx8mm")
    Fixes: 96d6392b54db ("clk: imx: Add support for i.MX8MN clock driver")
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
    Link: https://lkml.kernel.org/r/f5d2b9c53f1ed5ccb1dd3c6624f56759d92e1689.1571771777.git.leonard.crestez@nxp.com
    Acked-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99cfd79a9ca8eee83db54f74225ab2f8f3d2dc05
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 18 11:08:42 2019 +0200

    pinctrl: cherryview: Fix irq_valid_mask calculation
    
    [ Upstream commit 63bdef6cd6941917c823b9cc9aa0219d19fcb716 ]
    
    Commit 03c4749dd6c7 ("gpio / ACPI: Drop unnecessary ACPI GPIO to Linux
    GPIO translation") has made the cherryview gpio numbers sparse, to get
    a 1:1 mapping between ACPI pin numbers and gpio numbers in Linux.
    
    This has greatly simplified things, but the code setting the
    irq_valid_mask was not updated for this, so the valid mask is still in
    the old "compressed" numbering with the gaps in the pin numbers skipped,
    which is wrong as irq_valid_mask needs to be expressed in gpio numbers.
    
    This results in the following error on devices using pin 24 (0x0018) on
    the north GPIO controller as an ACPI event source:
    
    [    0.422452] cherryview-pinctrl INT33FF:01: Failed to translate GPIO to IRQ
    
    This has been reported (by email) to be happening on a Caterpillar CAT T20
    tablet and I've reproduced this myself on a Medion Akoya e2215t 2-in-1.
    
    This commit uses the pin number instead of the compressed index into
    community->pins to clear the correct bits in irq_valid_mask for GPIOs
    using GPEs for interrupts, fixing these errors and in case of the
    Medion Akoya e2215t also fixing the LID switch not working.
    
    Cc: stable@vger.kernel.org
    Fixes: 03c4749dd6c7 ("gpio / ACPI: Drop unnecessary ACPI GPIO to Linux GPIO translation")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e02baf62a63109d2cc6bac5333e56a74572350d
Author: Shuning Zhang <sunny.s.zhang@oracle.com>
Date:   Tue Nov 5 21:16:34 2019 -0800

    ocfs2: protect extent tree in ocfs2_prepare_inode_for_write()
    
    [ Upstream commit e74540b285569d2b1e14fe7aee92297078f235ce ]
    
    When the extent tree is modified, it should be protected by inode
    cluster lock and ip_alloc_sem.
    
    The extent tree is accessed and modified in the
    ocfs2_prepare_inode_for_write, but isn't protected by ip_alloc_sem.
    
    The following is a case.  The function ocfs2_fiemap is accessing the
    extent tree, which is modified at the same time.
    
      kernel BUG at fs/ocfs2/extent_map.c:475!
      invalid opcode: 0000 [#1] SMP
      Modules linked in: tun ocfs2 ocfs2_nodemanager configfs ocfs2_stackglue [...]
      CPU: 16 PID: 14047 Comm: o2info Not tainted 4.1.12-124.23.1.el6uek.x86_64 #2
      Hardware name: Oracle Corporation ORACLE SERVER X7-2L/ASM, MB MECH, X7-2L, BIOS 42040600 10/19/2018
      task: ffff88019487e200 ti: ffff88003daa4000 task.ti: ffff88003daa4000
      RIP: ocfs2_get_clusters_nocache.isra.11+0x390/0x550 [ocfs2]
      Call Trace:
        ocfs2_fiemap+0x1e3/0x430 [ocfs2]
        do_vfs_ioctl+0x155/0x510
        SyS_ioctl+0x81/0xa0
        system_call_fastpath+0x18/0xd8
      Code: 18 48 c7 c6 60 7f 65 a0 31 c0 bb e2 ff ff ff 48 8b 4a 40 48 8b 7a 28 48 c7 c2 78 2d 66 a0 e8 38 4f 05 00 e9 28 fe ff ff 0f 1f 00 <0f> 0b 66 0f 1f 44 00 00 bb 86 ff ff ff e9 13 fe ff ff 66 0f 1f
      RIP  ocfs2_get_clusters_nocache.isra.11+0x390/0x550 [ocfs2]
      ---[ end trace c8aa0c8180e869dc ]---
      Kernel panic - not syncing: Fatal exception
      Kernel Offset: disabled
    
    This issue can be reproduced every week in a production environment.
    
    This issue is related to the usage mode.  If others use ocfs2 in this
    mode, the kernel will panic frequently.
    
    [akpm@linux-foundation.org: coding style fixes]
    [Fix new warning due to unused function by removing said function - Linus ]
    Link: http://lkml.kernel.org/r/1568772175-2906-2-git-send-email-sunny.s.zhang@oracle.com
    Signed-off-by: Shuning Zhang <sunny.s.zhang@oracle.com>
    Reviewed-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Gang He <ghe@suse.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Joseph Qi <jiangqi903@gmail.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4cfb09554b03fc18d12de2f6082e3fa857f21542
Author: Yangchun Fu <yangchun@google.com>
Date:   Fri Nov 1 10:09:56 2019 -0700

    gve: Fixes DMA synchronization.
    
    [ Upstream commit 9cfeeb576d49a7b5e643b8066ba64a55e8417c5d ]
    
    Synces the DMA buffer properly in order for CPU and device to see
    the most up-to-data data.
    
    Signed-off-by: Yangchun Fu <yangchun@google.com>
    Reviewed-by: Catherine Sullivan <csully@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6b52728673436b9728aa004a3efe34b06a86e7d
Author: Wenwen Wang <wenwen@cs.uga.edu>
Date:   Mon Aug 12 00:59:21 2019 -0500

    e1000: fix memory leaks
    
    [ Upstream commit 8472ba62154058b64ebb83d5f57259a352d28697 ]
    
    In e1000_set_ringparam(), 'tx_old' and 'rx_old' are not deallocated if
    e1000_up() fails, leading to memory leaks. Refactor the code to fix this
    issue.
    
    Signed-off-by: Wenwen Wang <wenwen@cs.uga.edu>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cce557f667a3b0513facaf6d510a74978cf0121d
Author: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
Date:   Thu Aug 15 13:55:20 2019 -0700

    igb: Fix constant media auto sense switching when no cable is connected
    
    [ Upstream commit 8d5cfd7f76a2414e23c74bb8858af7540365d985 ]
    
    At least on the i350 there is an annoying behavior that is maybe also
    present on 82580 devices, but was probably not noticed yet as MAS is not
    widely used.
    
    If no cable is connected on both fiber/copper ports the media auto sense
    code will constantly swap between them as part of the watchdog task and
    produce many unnecessary kernel log messages.
    
    The swap code responsible for this behavior (switching to fiber) should
    not be executed if the current media type is copper and there is no signal
    detected on the fiber port. In this case we can safely wait until the
    AUTOSENSE_EN bit is cleared.
    
    Signed-off-by: Manfred Rudigier <manfred.rudigier@omicronenergy.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd4babace756ef6bfa8b3ba1b0398bc1a4e1333f
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Fri Nov 1 20:17:25 2019 +0800

    net: ethernet: arc: add the missed clk_disable_unprepare
    
    [ Upstream commit 4202e219edd6cc164c042e16fa327525410705ae ]
    
    The remove misses to disable and unprepare priv->macclk like what is done
    when probe fails.
    Add the missed call in remove.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5beaffd786a5cb964a52309b4377aed5a496b7b4
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Thu Oct 31 18:40:32 2019 -0400

    NFSv4: Don't allow a cached open with a revoked delegation
    
    [ Upstream commit be3df3dd4c70ee020587a943a31b98a0fb4b6424 ]
    
    If the delegation is marked as being revoked, we must not use it
    for cached opens.
    
    Fixes: 869f9dfa4d6d ("NFSv4: Fix races between nfs_remove_bad_delegation() and delegation return")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dea19d1663ab8af2671f235653670248312c4cb
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Oct 31 14:47:25 2019 -0700

    arm64: apply ARM64_ERRATUM_843419 workaround for Brahma-B53 core
    
    [ Upstream commit 1cf45b8fdbb87040e1d1bd793891089f4678aa41 ]
    
    The Broadcom Brahma-B53 core is susceptible to the issue described by
    ARM64_ERRATUM_843419 so this commit enables the workaround to be applied
    when executing on that core.
    
    Since there are now multiple entries to match, we must convert the
    existing ARM64_ERRATUM_843419 into an erratum list and use
    cpucap_multi_entry_cap_matches to match our entries.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70d0628ba2f6efd41bd641ef8735a0be157c123b
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Oct 31 14:47:24 2019 -0700

    arm64: Brahma-B53 is SSB and spectre v2 safe
    
    [ Upstream commit e059770cb1cdfbcbe3f1748f76005861cc79dd1a ]
    
    Add the Brahma-B53 CPU (all versions) to the whitelists of CPUs for the
    SSB and spectre v2 mitigations.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11b0106d93e1846fc65270e41309f22e3c81e69e
Author: Doug Berger <opendmb@gmail.com>
Date:   Thu Oct 31 14:47:23 2019 -0700

    arm64: apply ARM64_ERRATUM_845719 workaround for Brahma-B53 core
    
    [ Upstream commit bfc97f9f199cb041cf897af3af096540948cc705 ]
    
    The Broadcom Brahma-B53 core is susceptible to the issue described by
    ARM64_ERRATUM_845719 so this commit enables the workaround to be applied
    when executing on that core.
    
    Since there are now multiple entries to match, we must convert the
    existing ARM64_ERRATUM_845719 into an erratum list.
    
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dfac7277898c9bfb48337a0dd7d90f7e53cbcbb
Author: Felipe Balbi <felipe.balbi@linux.intel.com>
Date:   Thu Oct 31 11:07:13 2019 +0200

    usb: dwc3: gadget: fix race when disabling ep with cancelled xfers
    
    [ Upstream commit d8eca64eec7103ab1fbabc0a187dbf6acfb2af93 ]
    
    When disabling an endpoint which has cancelled requests, we should
    make sure to giveback requests that are currently pending in the
    cancelled list, otherwise we may fall into a situation where command
    completion interrupt fires after endpoint has been disabled, therefore
    causing a splat.
    
    Fixes: fec9095bdef4 "usb: dwc3: gadget: remove wait_end_transfer"
    Reported-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Link: https://lore.kernel.org/r/20191031090713.1452818-1-felipe.balbi@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eb29fde247a1b5c773faceda0e31488da03505f
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Tue Oct 29 16:27:38 2019 -0700

    arm64: cpufeature: Enable Qualcomm Falkor errata 1009 for Kryo
    
    [ Upstream commit 36c602dcdd872e9f9b91aae5266b6d7d72b69b96 ]
    
    The Kryo cores share errata 1009 with Falkor, so add their model
    definitions and enable it for them as well.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    [will: Update entry in silicon-errata.rst]
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84c64c69b02c95dedb2154c3f98f1c67398a7fa0
Author: Kairui Song <kasong@redhat.com>
Date:   Tue Oct 29 18:37:54 2019 +0100

    x86, efi: Never relocate kernel below lowest acceptable address
    
    [ Upstream commit 220dd7699c46d5940115bd797b01b2ab047c87b8 ]
    
    Currently, kernel fails to boot on some HyperV VMs when using EFI.
    And it's a potential issue on all x86 platforms.
    
    It's caused by broken kernel relocation on EFI systems, when below three
    conditions are met:
    
    1. Kernel image is not loaded to the default address (LOAD_PHYSICAL_ADDR)
       by the loader.
    2. There isn't enough room to contain the kernel, starting from the
       default load address (eg. something else occupied part the region).
    3. In the memmap provided by EFI firmware, there is a memory region
       starts below LOAD_PHYSICAL_ADDR, and suitable for containing the
       kernel.
    
    EFI stub will perform a kernel relocation when condition 1 is met. But
    due to condition 2, EFI stub can't relocate kernel to the preferred
    address, so it fallback to ask EFI firmware to alloc lowest usable memory
    region, got the low region mentioned in condition 3, and relocated
    kernel there.
    
    It's incorrect to relocate the kernel below LOAD_PHYSICAL_ADDR. This
    is the lowest acceptable kernel relocation address.
    
    The first thing goes wrong is in arch/x86/boot/compressed/head_64.S.
    Kernel decompression will force use LOAD_PHYSICAL_ADDR as the output
    address if kernel is located below it. Then the relocation before
    decompression, which move kernel to the end of the decompression buffer,
    will overwrite other memory region, as there is no enough memory there.
    
    To fix it, just don't let EFI stub relocate the kernel to any address
    lower than lowest acceptable address.
    
    [ ardb: introduce efi_low_alloc_above() to reduce the scope of the change ]
    
    Signed-off-by: Kairui Song <kasong@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Acked-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191029173755.27149-6-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e20db7964d3e95e91cb147b4f02f38fd1bb35e10
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Oct 29 18:37:53 2019 +0100

    efi: libstub/arm: Account for firmware reserved memory at the base of RAM
    
    [ Upstream commit 41cd96fa149b29684ebd38759fefb07f9c7d5276 ]
    
    The EFI stubloader for ARM starts out by allocating a 32 MB window
    at the base of RAM, in order to ensure that the decompressor (which
    blindly copies the uncompressed kernel into that window) does not
    overwrite other allocations that are made while running in the context
    of the EFI firmware.
    
    In some cases, (e.g., U-Boot running on the Raspberry Pi 2), this is
    causing boot failures because this initial allocation conflicts with
    a page of reserved memory at the base of RAM that contains the SMP spin
    tables and other pieces of firmware data and which was put there by
    the bootloader under the assumption that the TEXT_OFFSET window right
    below the kernel is only used partially during early boot, and will be
    left alone once the memory reservations are processed and taken into
    account.
    
    So let's permit reserved memory regions to exist in the region starting
    at the base of RAM, and ending at TEXT_OFFSET - 5 * PAGE_SIZE, which is
    the window below the kernel that is not touched by the early boot code.
    
    Tested-by: Guillaume Gardet <Guillaume.Gardet@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Acked-by: Chester Lin <clin@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191029173755.27149-5-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95c085ef6057f86f11ccf40aed294e3c47992e1b
Author: Jerry Snitselaar <jsnitsel@redhat.com>
Date:   Tue Oct 29 18:37:51 2019 +0100

    efi/tpm: Return -EINVAL when determining tpm final events log size fails
    
    [ Upstream commit 2bb6a81633cb47dcba4c9f75605cbe49e6b73d60 ]
    
    Currently nothing checks the return value of efi_tpm_eventlog_init(),
    but in case that changes in the future make sure an error is
    returned when it fails to determine the tpm final events log
    size.
    
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: e658c82be556 ("efi/tpm: Only set 'efi_tpm_final_log_size' after ...")
    Link: https://lkml.kernel.org/r/20191029173755.27149-3-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf0ccb042e9ea3e6a156b753292b4d3e80bfeef9
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Wed Oct 30 15:32:13 2019 +0000

    hv_netvsc: Fix error handling in netvsc_attach()
    
    [ Upstream commit 719b85c336ed35565d0f3982269d6f684087bb00 ]
    
    If rndis_filter_open() fails, we need to remove the rndis device created
    in earlier steps, before returning an error code. Otherwise, the retry of
    netvsc_attach() from its callers will fail and hang.
    
    Fixes: 7b2ee50c0cd5 ("hv_netvsc: common detach logic")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fc9c5338bf43ba2cd80e4d704f6923bbad60a83
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Thu Oct 17 09:02:21 2019 -0400

    SUNRPC: Destroy the back channel when we destroy the host transport
    
    [ Upstream commit 669996add4c92476e0f8d6b4cd2bb308d1939fd7 ]
    
    When we're destroying the host transport mechanism, we should ensure
    that we do not leak memory by failing to release any back channel
    slots that might still exist.
    
    Reported-by: Neil Brown <neilb@suse.de>
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cca654e699b1a94e39a6783309683721f7be2dea
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Thu Oct 17 09:02:20 2019 -0400

    SUNRPC: The RDMA back channel mustn't disappear while requests are outstanding
    
    [ Upstream commit 9edb455e6797bb50aa38ef71e62668966065ede8 ]
    
    If there are RDMA back channel requests being processed by the
    server threads, then we should hold a reference to the transport
    to ensure it doesn't get freed from underneath us.
    
    Reported-by: Neil Brown <neilb@suse.de>
    Fixes: 63cae47005af ("xprtrdma: Handle incoming backward direction RPC calls")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7079affac73b588229dd2be4e45e862a18ad000f
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Thu Oct 17 09:02:19 2019 -0400

    SUNRPC: The TCP back channel mustn't disappear while requests are outstanding
    
    [ Upstream commit 875f0706accd6501c3209bb99df8573171fb5d75 ]
    
    If there are TCP back channel requests being processed by the
    server threads, then we should hold a reference to the transport
    to ensure it doesn't get freed from underneath us.
    
    Reported-by: Neil Brown <neilb@suse.de>
    Fixes: 2ea24497a1b3 ("SUNRPC: RPC callbacks may be split across several..")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acac5c944e516e1a271b9728acf3fccb7eb0d3ec
Author: zhongshiqi <zhong.shiqi@zte.com.cn>
Date:   Wed Oct 23 16:32:23 2019 +0800

    dc.c:use kzalloc without test
    
    [ Upstream commit 364593f3ee5fdefc6efd89475e1804c928b4e6ba ]
    
    dc.c:583:null check is needed after using kzalloc function
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: zhongshiqi <zhong.shiqi@zte.com.cn>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc027c6960a12a392ffde7124ccb27183d681651
Author: Michael Strauss <michael.strauss@amd.com>
Date:   Thu Oct 3 11:54:15 2019 -0400

    drm/amd/display: Passive DP->HDMI dongle detection fix
    
    [ Upstream commit bc2fde42e2418808dbfc04de1a6da91d7d31cf1a ]
    
    [WHY]
    i2c_read is called to differentiate passive DP->HDMI and DP->DVI-D dongles
    The call is expected to fail in DVI-D case but pass in HDMI case
    Some HDMI dongles have a chance to fail as well, causing misdetection as DVI-D
    
    [HOW]
    Retry i2c_read to ensure failed result is valid
    
    Signed-off-by: Michael Strauss <michael.strauss@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3119fd1d045b7777e652b78d3ae96d01f1b4d9c2
Author: Jun Lei <Jun.Lei@amd.com>
Date:   Thu Sep 19 17:43:45 2019 -0400

    drm/amd/display: add 50us buffer as WA for pstate switch in active
    
    [ Upstream commit 7c37d399c2b84d4b79de4d512a38373f1d71ab90 ]
    
    Signed-off-by: Jun Lei <Jun.Lei@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b71b3f975f438b96ef4a03f0f3db1223d4d80d25
Author: Jun Lei <Jun.Lei@amd.com>
Date:   Thu Oct 3 15:09:53 2019 -0400

    drm/amd/display: do not synchronize "drr" displays
    
    [ Upstream commit 8775e89fa7121535d2da738c95167b8c65aa6e90 ]
    
    [why]
    A display that supports DRR can never really be considered
    "synchronized" with any other display because we can dynamically
    enable DRR (i.e. without modeset).  this will cause their
    relative CRTC positions to drift and lose sync.  this will disrupt
    features such as MCLK switching that assume and depend on
    their permanent alignment (that can only change with modeset)
    
    [how]
    check for ignore_msa in stream when considered synchronizability
    this ignore_msa is basically actually implemented as "supports drr"
    
    Signed-off-by: Jun Lei <Jun.Lei@amd.com>
    Reviewed-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b46eeb109b26defa78c292cfeaddc37c4d24e889
Author: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
Date:   Thu Oct 24 15:44:10 2019 -0400

    drm/amdgpu: If amdgpu_ib_schedule fails return back the error.
    
    [ Upstream commit 57c0f58e9f562089de5f0b60da103677d232374c ]
    
    Use ERR_PTR to return back the error happened during amdgpu_ib_schedule.
    
    Signed-off-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8dc41bdb82911e657277cb8f7c1ea933b9fef70
Author: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
Date:   Thu Oct 24 15:39:06 2019 -0400

    drm/sched: Set error to s_fence if HW job submission failed.
    
    [ Upstream commit 167bf96014a095753053595f3224fcdeb49ac3c8 ]
    
    Problem:
    When run_job fails and HW fence returned is NULL we still signal
    the s_fence to avoid hangs but the user has no way of knowing if
    the actual HW job was ran and finished.
    
    Fix:
    Allow .run_job implementations to return ERR_PTR in the fence pointer
    returned and then set this error for s_fence->finished fence so whoever
    wait on this fence can inspect the signaled fence for an error.
    
    Signed-off-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b4be0c276c16b9a8036dd7b87ba7a7b188b7400
Author: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date:   Tue Oct 22 19:22:11 2019 +0200

    drm/amdgpu/sdma5: do not execute 0-sized IBs (v2)
    
    [ Upstream commit 9bdf63d3579e36942f4b91d3558a90da8116bb40 ]
    
    This seems to help with https://bugs.freedesktop.org/show_bug.cgi?id=111481.
    
    v2: insert a NOP instead of skipping all 0-sized IBs to avoid breaking older hw
    
    Signed-off-by: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb3d9654cec1e0a05f9ded57fcf48e17bd32abde
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Sun Oct 27 20:53:09 2019 +0100

    mt76: dma: fix buffer unmap with non-linear skbs
    
    [ Upstream commit 7bd0650be63cbb9e45e394d689c81365fe48e495 ]
    
    mt76 dma layer is supposed to unmap skb data buffers while keep txwi
    mapped on hw dma ring. At the moment mt76 wrongly unmap txwi or does
    not unmap data fragments in even positions for non-linear skbs. This
    issue may result in hw hangs with A-MSDU if the system relies on IOMMU
    or SWIOTLB. Fix this behaviour properly unmapping data fragments on
    non-linear skbs.
    
    Fixes: 17f1de56df05 ("mt76: add common code shared between multiple chipsets")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c919e17850302e5d927865a973a780015106541e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 21 17:17:21 2019 +0200

    iommu/amd: Apply the same IVRS IOAPIC workaround to Acer Aspire A315-41
    
    [ Upstream commit ad3e8da2d422c63c13819a53d3c5ea9312cc0b9d ]
    
    Acer Aspire A315-41 requires the very same workaround as the existing
    quirk for Dell Latitude 5495.  Add the new entry for that.
    
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1137799
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3be8cfe95d59538228a7379868b831f523d147ea
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Sat Oct 26 21:04:27 2019 +0300

    net: mscc: ocelot: refuse to overwrite the port's native vlan
    
    [ Upstream commit b9cd75e6689560140dadaed98eb4b41aad75d55d ]
    
    The switch driver keeps a "vid" variable per port, which signifies _the_
    VLAN ID that is stripped on that port's egress (aka the native VLAN on a
    trunk port).
    
    That is the way the hardware is designed (mostly). The port->vid is
    programmed into REW:PORT:PORT_VLAN_CFG:PORT_VID and the rewriter is told
    to send all traffic as tagged except the one having port->vid.
    
    There exists a possibility of finer-grained egress untagging decisions:
    using the VCAP IS1 engine, one rule can be added to match every
    VLAN-tagged frame whose VLAN should be untagged, and set POP_CNT=1 as
    action. However, the IS1 can hold at most 512 entries, and the VLANs are
    in the order of 6 * 4096.
    
    So the code is fine for now. But this sequence of commands:
    
    $ bridge vlan add dev swp0 vid 1 pvid untagged
    $ bridge vlan add dev swp0 vid 2 untagged
    
    makes untagged and pvid-tagged traffic be sent out of swp0 as tagged
    with VID 1, despite user's request.
    
    Prevent that from happening. The user should temporarily remove the
    existing untagged VLAN (1 in this case), add it back as tagged, and then
    add the new untagged VLAN (2 in this case).
    
    Cc: Antoine Tenart <antoine.tenart@bootlin.com>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Fixes: 7142529f1688 ("net: mscc: ocelot: add VLAN filtering")
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d29fe4a5e5d70c77c40b159ad94292f75b31cdc0
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Sat Oct 26 21:04:26 2019 +0300

    net: mscc: ocelot: fix vlan_filtering when enslaving to bridge before link is up
    
    [ Upstream commit 1c44ce560b4de639f237b458be1729489ff44d0a ]
    
    Background information: the driver operates the hardware in a mode where
    a single VLAN can be transmitted as untagged on a particular egress
    port. That is the "native VLAN on trunk port" use case. Its value is
    held in port->vid.
    
    Consider the following command sequence (no network manager, all
    interfaces are down, debugging prints added by me):
    
    $ ip link add dev br0 type bridge vlan_filtering 1
    $ ip link set dev swp0 master br0
    
    Kernel code path during last command:
    
    br_add_slave -> ocelot_netdevice_port_event (NETDEV_CHANGEUPPER):
    [   21.401901] ocelot_vlan_port_apply: port 0 vlan aware 0 pvid 0 vid 0
    
    br_add_slave -> nbp_vlan_init -> switchdev_port_attr_set -> ocelot_port_attr_set (SWITCHDEV_ATTR_ID_BRIDGE_VLAN_FILTERING):
    [   21.413335] ocelot_vlan_port_apply: port 0 vlan aware 1 pvid 0 vid 0
    
    br_add_slave -> nbp_vlan_init -> nbp_vlan_add -> br_switchdev_port_vlan_add -> switchdev_port_obj_add -> ocelot_port_obj_add -> ocelot_vlan_vid_add
    [   21.667421] ocelot_vlan_port_apply: port 0 vlan aware 1 pvid 1 vid 1
    
    So far so good. The bridge has replaced the driver's default pvid used
    in standalone mode (0) with its own default_pvid (1). The port's vid
    (native VLAN) has also changed from 0 to 1.
    
    $ ip link set dev swp0 up
    
    [   31.722956] 8021q: adding VLAN 0 to HW filter on device swp0
    do_setlink -> dev_change_flags -> vlan_vid_add -> ocelot_vlan_rx_add_vid -> ocelot_vlan_vid_add:
    [   31.728700] ocelot_vlan_port_apply: port 0 vlan aware 1 pvid 1 vid 0
    
    The 8021q module uses the .ndo_vlan_rx_add_vid API on .ndo_open to make
    ports be able to transmit and receive 802.1p-tagged traffic by default.
    This API is supposed to offload a VLAN sub-interface, which for a switch
    port means to add a VLAN that is not a pvid, and tagged on egress.
    
    But the driver implementation of .ndo_vlan_rx_add_vid is wrong: it adds
    back vid 0 as "egress untagged". Now back to the initial paragraph:
    there is a single untagged VID that the driver keeps track of, and that
    has just changed from 1 (the pvid) to 0. So this breaks the bridge
    core's expectation, because it has changed vid 1 from untagged to
    tagged, when what the user sees is.
    
    $ bridge vlan
    port    vlan ids
    swp0     1 PVID Egress Untagged
    
    br0      1 PVID Egress Untagged
    
    But curiously, instead of manifesting itself as "untagged and
    pvid-tagged traffic gets sent as tagged on egress", the bug:
    
    - is hidden when vlan_filtering=0
    - manifests as dropped traffic when vlan_filtering=1, due to this setting:
    
            if (port->vlan_aware && !port->vid)
                    /* If port is vlan-aware and tagged, drop untagged and priority
                     * tagged frames.
                     */
                    val |= ANA_PORT_DROP_CFG_DROP_UNTAGGED_ENA |
                           ANA_PORT_DROP_CFG_DROP_PRIO_S_TAGGED_ENA |
                           ANA_PORT_DROP_CFG_DROP_PRIO_C_TAGGED_ENA;
    
    which would have made sense if it weren't for this bug. The setting's
    intention was "this is a trunk port with no native VLAN, so don't accept
    untagged traffic". So the driver was never expecting to set VLAN 0 as
    the value of the native VLAN, 0 was just encoding for "invalid".
    
    So the fix is to not send 802.1p traffic as untagged, because that would
    change the port's native vlan to 0, unbeknownst to the bridge, and
    trigger unexpected code paths in the driver.
    
    Cc: Antoine Tenart <antoine.tenart@bootlin.com>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Fixes: 7142529f1688 ("net: mscc: ocelot: add VLAN filtering")
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Reviewed-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb89b0ed2a2dc651aa306fb0c48bc59da70d772c
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Fri Oct 25 23:53:30 2019 -0500

    wimax: i2400: Fix memory leak in i2400m_op_rfkill_sw_toggle
    
    [ Upstream commit 6f3ef5c25cc762687a7341c18cbea5af54461407 ]
    
    In the implementation of i2400m_op_rfkill_sw_toggle() the allocated
    buffer for cmd should be released before returning. The
    documentation for i2400m_msg_to_dev() says when it returns the buffer
    can be reused. Meaning cmd should be released in either case. Move
    kfree(cmd) before return to be reached by all execution paths.
    
    Fixes: 2507e6ab7a9a ("wimax: i2400: fix memory leak")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3f674ed434f467d7587f0225c2a4a99c19caa22
Author: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
Date:   Fri Oct 25 21:48:22 2019 +0800

    net: hisilicon: Fix "Trying to free already-free IRQ"
    
    [ Upstream commit 63a41746827cb16dc6ad0d4d761ab4e7dda7a0c3 ]
    
    When rmmod hip04_eth.ko, we can get the following warning:
    
    Task track: rmmod(1623)>bash(1591)>login(1581)>init(1)
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 1623 at kernel/irq/manage.c:1557 __free_irq+0xa4/0x2ac()
    Trying to free already-free IRQ 200
    Modules linked in: ping(O) pramdisk(O) cpuinfo(O) rtos_snapshot(O) interrupt_ctrl(O) mtdblock mtd_blkdevrtfs nfs_acl nfs lockd grace sunrpc xt_tcpudp ipt_REJECT iptable_filter ip_tables x_tables nf_reject_ipv
    CPU: 0 PID: 1623 Comm: rmmod Tainted: G           O    4.4.193 #1
    Hardware name: Hisilicon A15
    [<c020b408>] (rtos_unwind_backtrace) from [<c0206624>] (show_stack+0x10/0x14)
    [<c0206624>] (show_stack) from [<c03f2be4>] (dump_stack+0xa0/0xd8)
    [<c03f2be4>] (dump_stack) from [<c021a780>] (warn_slowpath_common+0x84/0xb0)
    [<c021a780>] (warn_slowpath_common) from [<c021a7e8>] (warn_slowpath_fmt+0x3c/0x68)
    [<c021a7e8>] (warn_slowpath_fmt) from [<c026876c>] (__free_irq+0xa4/0x2ac)
    [<c026876c>] (__free_irq) from [<c0268a14>] (free_irq+0x60/0x7c)
    [<c0268a14>] (free_irq) from [<c0469e80>] (release_nodes+0x1c4/0x1ec)
    [<c0469e80>] (release_nodes) from [<c0466924>] (__device_release_driver+0xa8/0x104)
    [<c0466924>] (__device_release_driver) from [<c0466a80>] (driver_detach+0xd0/0xf8)
    [<c0466a80>] (driver_detach) from [<c0465e18>] (bus_remove_driver+0x64/0x8c)
    [<c0465e18>] (bus_remove_driver) from [<c02935b0>] (SyS_delete_module+0x198/0x1e0)
    [<c02935b0>] (SyS_delete_module) from [<c0202ed0>] (__sys_trace_return+0x0/0x10)
    ---[ end trace bb25d6123d849b44 ]---
    
    Currently "rmmod hip04_eth.ko" call free_irq more than once
    as devres_release_all and hip04_remove both call free_irq.
    This results in a 'Trying to free already-free IRQ' warning.
    To solve the problem free_irq has been moved out of hip04_remove.
    
    Signed-off-by: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fb4fd110885c90944c7cc1b88414590e489a209
Author: Will Deacon <will@kernel.org>
Date:   Fri Oct 25 12:06:02 2019 +0100

    fjes: Handle workqueue allocation failure
    
    [ Upstream commit 85ac30fa2e24f628e9f4f9344460f4015d33fd7d ]
    
    In the highly unlikely event that we fail to allocate either of the
    "/txrx" or "/control" workqueues, we should bail cleanly rather than
    blindly march on with NULL queue pointer(s) installed in the
    'fjes_adapter' instance.
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Reported-by: Nicolas Waisman <nico@semmle.com>
    Link: https://lore.kernel.org/lkml/CADJ_3a8WFrs5NouXNqS5WYe7rebFP+_A5CheeqAyD_p7DFJJcg@mail.gmail.com/
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7593ffa645e57be9f8869e7dbb0e74a5e0916ae5
Author: Anton Eidelman <anton@lightbitslabs.com>
Date:   Fri Oct 18 11:32:50 2019 -0700

    nvme-multipath: fix possible io hang after ctrl reconnect
    
    [ Upstream commit af8fd0424713a2adb812d10d55e86718152cf656 ]
    
    The following scenario results in an IO hang:
    1) ctrl completes a request with NVME_SC_ANA_TRANSITION.
       NVME_NS_ANA_PENDING bit in ns->flags is set and ana_work is triggered.
    2) ana_work: nvme_read_ana_log() tries to get the ANA log page from the ctrl.
       This fails because ctrl disconnects.
       Therefore nvme_update_ns_ana_state() is not called
       and NVME_NS_ANA_PENDING bit in ns->flags is not cleared.
    3) ctrl reconnects: nvme_mpath_init(ctrl,...) calls
       nvme_read_ana_log(ctrl, groups_only=true).
       However, nvme_update_ana_state() does not update namespaces
       because nr_nsids = 0 (due to groups_only mode).
    4) scan_work calls nvme_validate_ns() finds the ns and re-validates OK.
    
    Result:
    The ctrl is now live but NVME_NS_ANA_PENDING bit in ns->flags is still set.
    Consequently ctrl will never be considered a viable path by __nvme_find_path().
    IO will hang if ctrl is the only or the last path to the namespace.
    
    More generally, while ctrl is reconnecting, its ANA state may change.
    And because nvme_mpath_init() requests ANA log in groups_only mode,
    these changes are not propagated to the existing ctrl namespaces.
    This may result in a mal-function or an IO hang.
    
    Solution:
    nvme_mpath_init() will nvme_read_ana_log() with groups_only set to false.
    This will not harm the new ctrl case (no namespaces present),
    and will make sure the ANA state of namespaces gets updated after reconnect.
    
    Note: Another option would be for nvme_mpath_init() to invoke
    nvme_parse_ana_log(..., nvme_set_ns_ana_state) for each existing namespace.
    
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3b3730b3fd25f816b39c61332b67004b2ae7606
Author: Valentin Schneider <valentin.schneider@arm.com>
Date:   Wed Oct 23 16:37:45 2019 +0100

    sched/topology: Allow sched_asym_cpucapacity to be disabled
    
    [ Upstream commit e284df705cf1eeedb5ec3a66ed82d17a64659150 ]
    
    While the static key is correctly initialized as being disabled, it will
    remain forever enabled once turned on. This means that if we start with an
    asymmetric system and hotplug out enough CPUs to end up with an SMP system,
    the static key will remain set - which is obviously wrong. We should detect
    this and turn off things like misfit migration and capacity aware wakeups.
    
    As Quentin pointed out, having separate root domains makes this slightly
    trickier. We could have exclusive cpusets that create an SMP island - IOW,
    the domains within this root domain will not see any asymmetry. This means
    we can't just disable the key on domain destruction, we need to count how
    many asymmetric root domains we have.
    
    Consider the following example using Juno r0 which is 2+4 big.LITTLE, where
    two identical cpusets are created: they both span both big and LITTLE CPUs:
    
        asym0    asym1
      [       ][       ]
       L  L  B  L  L  B
    
      $ cgcreate -g cpuset:asym0
      $ cgset -r cpuset.cpus=0,1,3 asym0
      $ cgset -r cpuset.mems=0 asym0
      $ cgset -r cpuset.cpu_exclusive=1 asym0
    
      $ cgcreate -g cpuset:asym1
      $ cgset -r cpuset.cpus=2,4,5 asym1
      $ cgset -r cpuset.mems=0 asym1
      $ cgset -r cpuset.cpu_exclusive=1 asym1
    
      $ cgset -r cpuset.sched_load_balance=0 .
    
    (the CPU numbering may look odd because on the Juno LITTLEs are CPUs 0,3-5
    and bigs are CPUs 1-2)
    
    If we make one of those SMP (IOW remove asymmetry) by e.g. hotplugging its
    big core, we would end up with an SMP cpuset and an asymmetric cpuset - the
    static key must remain set, because we still have one asymmetric root domain.
    
    With the above example, this could be done with:
    
      $ echo 0 > /sys/devices/system/cpu/cpu2/online
    
    Which would result in:
    
        asym0   asym1
      [       ][    ]
       L  L  B  L  L
    
    When both SMP and asymmetric cpusets are present, all CPUs will observe
    sched_asym_cpucapacity being set (it is system-wide), but not all CPUs
    observe asymmetry in their sched domain hierarchy:
    
      per_cpu(sd_asym_cpucapacity, <any CPU in asym0>) == <some SD at DIE level>
      per_cpu(sd_asym_cpucapacity, <any CPU in asym1>) == NULL
    
    Change the simple key enablement to an increment, and decrement the key
    counter when destroying domains that cover asymmetric CPUs.
    
    Signed-off-by: Valentin Schneider <valentin.schneider@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Cc: Dietmar.Eggemann@arm.com
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: hannes@cmpxchg.org
    Cc: lizefan@huawei.com
    Cc: morten.rasmussen@arm.com
    Cc: qperret@google.com
    Cc: tj@kernel.org
    Cc: vincent.guittot@linaro.org
    Fixes: df054e8445a4 ("sched/topology: Add static_key for asymmetric CPU capacity optimizations")
    Link: https://lkml.kernel.org/r/20191023153745.19515-3-valentin.schneider@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fe1731113eb760065dd7df6ec9ad54ecc62854f
Author: Valentin Schneider <valentin.schneider@arm.com>
Date:   Wed Oct 23 16:37:44 2019 +0100

    sched/topology: Don't try to build empty sched domains
    
    [ Upstream commit cd1cb3350561d2bf544ddfef76fbf0b1c9c7178f ]
    
    Turns out hotplugging CPUs that are in exclusive cpusets can lead to the
    cpuset code feeding empty cpumasks to the sched domain rebuild machinery.
    
    This leads to the following splat:
    
        Internal error: Oops: 96000004 [#1] PREEMPT SMP
        Modules linked in:
        CPU: 0 PID: 235 Comm: kworker/5:2 Not tainted 5.4.0-rc1-00005-g8d495477d62e #23
        Hardware name: ARM Juno development board (r0) (DT)
        Workqueue: events cpuset_hotplug_workfn
        pstate: 60000005 (nZCv daif -PAN -UAO)
        pc : build_sched_domains (./include/linux/arch_topology.h:23 kernel/sched/topology.c:1898 kernel/sched/topology.c:1969)
        lr : build_sched_domains (kernel/sched/topology.c:1966)
        Call trace:
        build_sched_domains (./include/linux/arch_topology.h:23 kernel/sched/topology.c:1898 kernel/sched/topology.c:1969)
        partition_sched_domains_locked (kernel/sched/topology.c:2250)
        rebuild_sched_domains_locked (./include/linux/bitmap.h:370 ./include/linux/cpumask.h:538 kernel/cgroup/cpuset.c:955 kernel/cgroup/cpuset.c:978 kernel/cgroup/cpuset.c:1019)
        rebuild_sched_domains (kernel/cgroup/cpuset.c:1032)
        cpuset_hotplug_workfn (kernel/cgroup/cpuset.c:3205 (discriminator 2))
        process_one_work (./arch/arm64/include/asm/jump_label.h:21 ./include/linux/jump_label.h:200 ./include/trace/events/workqueue.h:114 kernel/workqueue.c:2274)
        worker_thread (./include/linux/compiler.h:199 ./include/linux/list.h:268 kernel/workqueue.c:2416)
        kthread (kernel/kthread.c:255)
        ret_from_fork (arch/arm64/kernel/entry.S:1167)
        Code: f860dae2 912802d6 aa1603e1 12800000 (f8616853)
    
    The faulty line in question is:
    
      cap = arch_scale_cpu_capacity(cpumask_first(cpu_map));
    
    and we're not checking the return value against nr_cpu_ids (we shouldn't
    have to!), which leads to the above.
    
    Prevent generate_sched_domains() from returning empty cpumasks, and add
    some assertion in build_sched_domains() to scream bloody murder if it
    happens again.
    
    The above splat was obtained on my Juno r0 with the following reproducer:
    
      $ cgcreate -g cpuset:asym
      $ cgset -r cpuset.cpus=0-3 asym
      $ cgset -r cpuset.mems=0 asym
      $ cgset -r cpuset.cpu_exclusive=1 asym
    
      $ cgcreate -g cpuset:smp
      $ cgset -r cpuset.cpus=4-5 smp
      $ cgset -r cpuset.mems=0 smp
      $ cgset -r cpuset.cpu_exclusive=1 smp
    
      $ cgset -r cpuset.sched_load_balance=0 .
    
      $ echo 0 > /sys/devices/system/cpu/cpu4/online
      $ echo 0 > /sys/devices/system/cpu/cpu5/online
    
    Signed-off-by: Valentin Schneider <valentin.schneider@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Dietmar.Eggemann@arm.com
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: hannes@cmpxchg.org
    Cc: lizefan@huawei.com
    Cc: morten.rasmussen@arm.com
    Cc: qperret@google.com
    Cc: tj@kernel.org
    Cc: vincent.guittot@linaro.org
    Fixes: 05484e098448 ("sched/topology: Add SD_ASYM_CPUCAPACITY flag detection")
    Link: https://lkml.kernel.org/r/20191023153745.19515-2-valentin.schneider@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a600e39a56babf0ba569126d1ba61823c4d4bd9
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Thu Oct 24 16:38:04 2019 +1000

    scsi: qla2xxx: stop timer in shutdown path
    
    [ Upstream commit d3566abb1a1e7772116e4d50fb6a58d19c9802e5 ]
    
    In shutdown/reboot paths, the timer is not stopped:
    
      qla2x00_shutdown
      pci_device_shutdown
      device_shutdown
      kernel_restart_prepare
      kernel_restart
      sys_reboot
    
    This causes lockups (on powerpc) when firmware config space access calls
    are interrupted by smp_send_stop later in reboot.
    
    Fixes: e30d1756480dc ("[SCSI] qla2xxx: Addition of shutdown callback handler.")
    Link: https://lore.kernel.org/r/20191024063804.14538-1-npiggin@gmail.com
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c07a91d1800d509eca575d190025770510a842ae
Author: Nicolin Chen <nicoleotsuka@gmail.com>
Date:   Mon Oct 21 17:59:22 2019 -0700

    hwmon: (ina3221) Fix read timeout issue
    
    [ Upstream commit 2ccb4f16d013a0954459061d38172b1c53553ba6 ]
    
    After introducing "samples" to the calculation of wait time, the
    driver might timeout at the regmap_field_read_poll_timeout call,
    because the wait time could be longer than the 100000 usec limit
    due to a large "samples" number.
    
    So this patch sets the timeout limit to 2 times of the wait time
    in order to fix this issue.
    
    Fixes: 5c090abf945b ("hwmon: (ina3221) Add averaging mode support")
    Signed-off-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Link: https://lore.kernel.org/r/20191022005922.30239-1-nicoleotsuka@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46c654504ae1b02fe82955a5c32cb6615ed6e249
Author: Lijun Ou <oulijun@huawei.com>
Date:   Sat Oct 26 14:56:35 2019 +0800

    RDMA/hns: Prevent memory leaks of eq->buf_list
    
    [ Upstream commit b681a0529968d2261aa15d7a1e78801b2c06bb07 ]
    
    eq->buf_list->buf and eq->buf_list should also be freed when eqe_hop_num
    is set to 0, or there will be memory leaks.
    
    Fixes: a5073d6054f7 ("RDMA/hns: Add eq support of hip08")
    Link: https://lore.kernel.org/r/1572072995-11277-3-git-send-email-liweihang@hisilicon.com
    Signed-off-by: Lijun Ou <oulijun@huawei.com>
    Signed-off-by: Weihang Li <liweihang@hisilicon.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c68e48b30f4a4db07c7e9a5ebb4ab34651e0104
Author: Potnuri Bharat Teja <bharat@chelsio.com>
Date:   Fri Oct 25 18:04:40 2019 +0530

    RDMA/iw_cxgb4: Avoid freeing skb twice in arp failure case
    
    [ Upstream commit d4934f45693651ea15357dd6c7c36be28b6da884 ]
    
    _put_ep_safe() and _put_pass_ep_safe() free the skb before it is freed by
    process_work(). fix double free by freeing the skb only in process_work().
    
    Fixes: 1dad0ebeea1c ("iw_cxgb4: Avoid touch after free error in ARP failure handlers")
    Link: https://lore.kernel.org/r/1572006880-5800-1-git-send-email-bharat@chelsio.com
    Signed-off-by: Dakshaja Uppalapati <dakshaja@chelsio.com>
    Signed-off-by: Potnuri Bharat Teja <bharat@chelsio.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 754a946d139cf05a8caab32e7456a72df6fa8c69
Author: GwanYeong Kim <gy741.kim@gmail.com>
Date:   Fri Oct 18 03:22:23 2019 +0000

    usbip: tools: Fix read_usb_vudc_device() error path handling
    
    [ Upstream commit 28df0642abbf6d66908a2858922a7e4b21cdd8c2 ]
    
    This isn't really accurate right. fread() doesn't always
    return 0 in error. It could return < number of elements
    and set errno.
    
    Signed-off-by: GwanYeong Kim <gy741.kim@gmail.com>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20191018032223.4644-1-gy741.kim@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f6ecd07120ee715df60e188e87ae46e6ab3cfdc
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 22 16:32:03 2019 +0200

    USB: ldusb: use unsigned size format specifiers
    
    [ Upstream commit 88f6bf3846ee90bf33aa1ce848cd3bfb3229f4a4 ]
    
    A recent info-leak bug manifested itself along with warning about a
    negative buffer overflow:
    
            ldusb 1-1:0.28: Read buffer overflow, -131383859965943 bytes dropped
    
    when it was really a rather large positive one.
    
    A sanity check that prevents this has now been put in place, but let's
    fix up the size format specifiers, which should all be unsigned.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191022143203.5260-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47aaab6377204cdbcd16f52a23c584f994fd0d15
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 28 10:52:35 2019 -0400

    USB: Skip endpoints with 0 maxpacket length
    
    [ Upstream commit d482c7bb0541d19dea8bff437a9f3c5563b5b2d2 ]
    
    Endpoints with a maxpacket length of 0 are probably useless.  They
    can't transfer any data, and it's not at all unlikely that an HCD will
    crash or hang when trying to handle an URB for such an endpoint.
    
    Currently the USB core does not check for endpoints having a maxpacket
    value of 0.  This patch adds a check, printing a warning and skipping
    over any endpoints it catches.
    
    Now, the USB spec does not rule out endpoints having maxpacket = 0.
    But since they wouldn't have any practical use, there doesn't seem to
    be any good reason for us to accept them.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.1910281050420.1485-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 242858fac866030872c889692f2c0be2e831d304
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Fri Oct 25 07:43:13 2019 -0700

    perf/x86/uncore: Fix event group support
    
    [ Upstream commit 75be6f703a141b048590d659a3954c4fedd30bba ]
    
    The events in the same group don't start or stop simultaneously.
    Here is the ftrace when enabling event group for uncore_iio_0:
    
      # perf stat -e "{uncore_iio_0/event=0x1/,uncore_iio_0/event=0xe/}"
    
                <idle>-0     [000] d.h.  8959.064832: read_msr: a41, value
      b2b0b030              //Read counter reg of IIO unit0 counter0
                <idle>-0     [000] d.h.  8959.064835: write_msr: a48, value
      400001                        //Write Ctrl reg of IIO unit0 counter0 to enable
      counter0. <------ Although counter0 is enabled, Unit Ctrl is still
      freezed. Nothing will count. We are still good here.
                <idle>-0     [000] d.h.  8959.064836: read_msr: a40, value
      30100                   //Read Unit Ctrl reg of IIO unit0
                <idle>-0     [000] d.h.  8959.064838: write_msr: a40, value
      30000                 //Write Unit Ctrl reg of IIO unit0 to enable all
      counters in the unit by clear Freeze bit  <------Unit0 is un-freezed.
      Counter0 has been enabled. Now it starts counting. But counter1 has not
      been enabled yet. The issue starts here.
                <idle>-0     [000] d.h.  8959.064846: read_msr: a42, value 0
                            //Read counter reg of IIO unit0 counter1
                <idle>-0     [000] d.h.  8959.064847: write_msr: a49, value
      40000e                        //Write Ctrl reg of IIO unit0 counter1 to enable
      counter1.   <------ Now, counter1 just starts to count. Counter0 has
      been running for a while.
    
    Current code un-freezes the Unit Ctrl right after the first counter is
    enabled. The subsequent group events always loses some counter values.
    
    Implement pmu_enable and pmu_disable support for uncore, which can help
    to batch hardware accesses.
    
    No one uses uncore_enable_box and uncore_disable_box. Remove them.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: linux-drivers-review@eclists.intel.com
    Cc: linux-perf@eclists.intel.com
    Fixes: 087bfbb03269 ("perf/x86: Add generic Intel uncore PMU support")
    Link: https://lkml.kernel.org/r/1572014593-31591-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6b71b6427f99269bdf52bfb3f313c4cdca36983
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Wed Oct 23 10:09:55 2019 -0500

    perf/x86/amd/ibs: Handle erratum #420 only on the affected CPU family (10h)
    
    [ Upstream commit e431e79b60603079d269e0c2a5177943b95fa4b6 ]
    
    This saves us writing the IBS control MSR twice when disabling the
    event.
    
    I searched revision guides for all families since 10h, and did not
    find occurrence of erratum #420, nor anything remotely similar:
    so we isolate the secondary MSR write to family 10h only.
    
    Also unconditionally update the count mask for IBS Op implementations
    that have read & writeable current count (CurCnt) fields in addition
    to the MaxCnt field.  These bits were reserved on prior
    implementations, and therefore shouldn't have negative impact.
    
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: c9574fe0bdb9 ("perf/x86-ibs: Implement workaround for IBS erratum #420")
    Link: https://lkml.kernel.org/r/20191023150955.30292-2-kim.phillips@amd.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04e9a34d5b5822a98c48dcc09737233acacda399
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Wed Oct 23 10:09:54 2019 -0500

    perf/x86/amd/ibs: Fix reading of the IBS OpData register and thus precise RIP validity
    
    [ Upstream commit 317b96bb14303c7998dbcd5bc606bd8038fdd4b4 ]
    
    The loop that reads all the IBS MSRs into *buf stopped one MSR short of
    reading the IbsOpData register, which contains the RipInvalid status bit.
    
    Fix the offset_max assignment so the MSR gets read, so the RIP invalid
    evaluation is based on what the IBS h/w output, instead of what was
    left in memory.
    
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: d47e8238cd76 ("perf/x86-ibs: Take instruction pointer from ibs sample")
    Link: https://lkml.kernel.org/r/20191023150955.30292-1-kim.phillips@amd.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4111c2641e54fd2772cf71422dacd4c2deee4ff0
Author: Yinbo Zhu <yinbo.zhu@nxp.com>
Date:   Mon Jul 29 14:46:07 2019 +0800

    usb: dwc3: remove the call trace of USBx_GFLADJ
    
    [ Upstream commit a7d9874c6f3fbc8d25cd9ceba35b6822612c4ebf ]
    
    layerscape board sometimes reported some usb call trace, that is due to
    kernel sent LPM tokerns automatically when it has no pending transfers
    and think that the link is idle enough to enter L1, which procedure will
    ask usb register has a recovery,then kernel will compare USBx_GFLADJ and
    set GFLADJ_30MHZ, GFLADJ_30MHZ_REG until GFLADJ_30MHZ is equal 0x20, if
    the conditions were met then issue occur, but whatever the conditions
    whether were met that usb is all need keep GFLADJ_30MHZ of value is 0x20
    (xhci spec ask use GFLADJ_30MHZ to adjust any offset from clock source
    that generates the clock that drives the SOF counter, 0x20 is default
    value of it)That is normal logic, so need remove the call trace.
    
    Signed-off-by: Yinbo Zhu <yinbo.zhu@nxp.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4ed98374f764ee217ecf0bf6dcc98347e1b6023
Author: Peter Chen <peter.chen@nxp.com>
Date:   Mon Aug 26 15:10:55 2019 -0400

    usb: gadget: configfs: fix concurrent issue between composite APIs
    
    [ Upstream commit 1a1c851bbd706ea9f3a9756c2d3db28523506d3b ]
    
    We meet several NULL pointer issues if configfs_composite_unbind
    and composite_setup (or composite_disconnect) are running together.
    These issues occur when do the function switch stress test, the
    configfs_compsoite_unbind is called from user mode by
    echo "" to /sys/../UDC entry, and meanwhile, the setup interrupt
    or disconnect interrupt occurs by hardware. The composite_setup
    will get the cdev from get_gadget_data, but configfs_composite_unbind
    will set gadget data as NULL, so the NULL pointer issue occurs.
    This concurrent is hard to reproduce by native kernel, but can be
    reproduced by android kernel.
    
    In this commit, we introduce one spinlock belongs to structure
    gadget_info since we can't use the same spinlock in usb_composite_dev
    due to exclusive running together between composite_setup and
    configfs_composite_unbind. And one bit flag 'unbind' to indicate the
    code is at unbind routine, this bit is needed due to we release the
    lock at during configfs_composite_unbind sometimes, and composite_setup
    may be run at that time.
    
    Several oops:
    
    oops 1:
    android_work: sent uevent USB_STATE=CONNECTED
    configfs-gadget gadget: super-speed config #1: b
    android_work: sent uevent USB_STATE=CONFIGURED
    init: Received control message 'start' for 'adbd' from pid: 3515 (system_server)
    Unable to handle kernel NULL pointer dereference at virtual address 0000002a
    init: Received control message 'stop' for 'adbd' from pid: 3375 (/vendor/bin/hw/android.hardware.usb@1.1-servic)
    Mem abort info:
      Exception class = DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
    Data abort info:
      ISV = 0, ISS = 0x00000004
      CM = 0, WnR = 0
    user pgtable: 4k pages, 48-bit VAs, pgd = ffff8008f1b7f000
    [000000000000002a] *pgd=0000000000000000
    Internal error: Oops: 96000004 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 4 PID: 2457 Comm: irq/125-5b11000 Not tainted 4.14.98-07846-g0b40a9b-dirty #16
    Hardware name: Freescale i.MX8QM MEK (DT)
    task: ffff8008f2a98000 task.stack: ffff00000b7b8000
    PC is at composite_setup+0x44/0x1508
    LR is at android_setup+0xb8/0x13c
    pc : [<ffff0000089ffb3c>] lr : [<ffff000008a032fc>] pstate: 800001c5
    sp : ffff00000b7bbb80
    x29: ffff00000b7bbb80 x28: ffff8008f2a3c010
    x27: 0000000000000001 x26: 0000000000000000                                                          [1232/1897]
    audit: audit_lost=25791 audit_rate_limit=5 audit_backlog_limit=64
    x25: 00000000ffffffa1 x24: ffff8008f2a3c010
    audit: rate limit exceeded
    x23: 0000000000000409 x22: ffff000009c8e000
    x21: ffff8008f7a8b428 x20: ffff00000afae000
    x19: ffff0000089ff000 x18: 0000000000000000
    x17: 0000000000000000 x16: ffff0000082b7c9c
    x15: 0000000000000000 x14: f1866f5b952aca46
    x13: e35502e30d44349c x12: 0000000000000008
    x11: 0000000000000008 x10: 0000000000000a30
    x9 : ffff00000b7bbd00 x8 : ffff8008f2a98a90
    x7 : ffff8008f27a9c90 x6 : 0000000000000001
    x5 : 0000000000000000 x4 : 0000000000000001
    x3 : 0000000000000000 x2 : 0000000000000006
    x1 : ffff0000089ff8d0 x0 : 732a010310b9ed00
    
    X7: 0xffff8008f27a9c10:
    9c10  00000002 00000000 00000001 00000000 13110000 ffff0000 00000002 00208040
    9c30  00000000 00000000 00000000 00000000 00000000 00000005 00000029 00000000
    9c50  00051778 00000001 f27a8e00 ffff8008 00000005 00000000 00000078 00000078
    9c70  00000078 00000000 09031d48 ffff0000 00100000 00000000 00400000 00000000
    9c90  00000001 00000000 00000000 00000000 00000000 00000000 ffefb1a0 ffff8008
    9cb0  f27a9ca8 ffff8008 00000000 00000000 b9d88037 00000173 1618a3eb 00000001
    9cd0  870a792a 0000002e 16188fe6 00000001 0000242b 00000000 00000000 00000000
    using random self ethernet address
    9cf0  019a4646 00000000 000547f3 00000000 ecfd6c33 00000002 00000000
    using random host ethernet address
     00000000
    
    X8: 0xffff8008f2a98a10:
    8a10  00000000 00000000 f7788d00 ffff8008 00000001 00000000 00000000 00000000
    8a30  eb218000 ffff8008 f2a98000 ffff8008 f2a98000 ffff8008 09885000 ffff0000
    8a50  f34df480 ffff8008 00000000 00000000 f2a98648 ffff8008 09c8e000 ffff0000
    8a70  fff2c800 ffff8008 09031d48 ffff0000 0b7bbd00 ffff0000 0b7bbd00 ffff0000
    8a90  080861bc ffff0000 00000000 00000000 00000000 00000000 00000000 00000000
    8ab0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8ad0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8af0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    
    X21: 0xffff8008f7a8b3a8:
    b3a8  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b3c8  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b3e8  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b408  00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000
    b428  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    b448  0053004d 00540046 00300031 00010030 eb07b520 ffff8008 20011201 00000003
    b468  e418d109 0104404e 00010302 00000000 eb07b558 ffff8008 eb07b558 ffff8008
    b488  f7a8b488 ffff8008 f7a8b488 ffff8008 f7a8b300 ffff8008 00000000 00000000
    
    X24: 0xffff8008f2a3bf90:
    bf90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfd0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    c010  00000000 00000000 f2a3c018 ffff8008 f2a3c018 ffff8008 08a067dc ffff0000
    c030  f2a5a000 ffff8008 091c3650 ffff0000 f716fd18 ffff8008 f716fe30 ffff8008
    c050  f2ce4a30 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    c070  f76c8010 ffff8008 f2ce4b00 ffff8008 095cac68 ffff0000 f2a5a028 ffff8008
    
    X28: 0xffff8008f2a3bf90:
    bf90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bfd0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    bff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    c010  00000000 00000000 f2a3c018 ffff8008 f2a3c018 ffff8008 08a067dc ffff0000
    c030  f2a5a000 ffff8008 091c3650 ffff0000 f716fd18 ffff8008 f716fe30 ffff8008
    c050  f2ce4a30 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    c070  f76c8010 ffff8008 f2ce4b00 ffff8008 095cac68 ffff0000 f2a5a028 ffff8008
    
    Process irq/125-5b11000 (pid: 2457, stack limit = 0xffff00000b7b8000)
    Call trace:
    Exception stack(0xffff00000b7bba40 to 0xffff00000b7bbb80)
    ba40: 732a010310b9ed00 ffff0000089ff8d0 0000000000000006 0000000000000000
    ba60: 0000000000000001 0000000000000000 0000000000000001 ffff8008f27a9c90
    ba80: ffff8008f2a98a90 ffff00000b7bbd00 0000000000000a30 0000000000000008
    baa0: 0000000000000008 e35502e30d44349c f1866f5b952aca46 0000000000000000
    bac0: ffff0000082b7c9c 0000000000000000 0000000000000000 ffff0000089ff000
    bae0: ffff00000afae000 ffff8008f7a8b428 ffff000009c8e000 0000000000000409
    bb00: ffff8008f2a3c010 00000000ffffffa1 0000000000000000 0000000000000001
    bb20: ffff8008f2a3c010 ffff00000b7bbb80 ffff000008a032fc ffff00000b7bbb80
    bb40: ffff0000089ffb3c 00000000800001c5 ffff00000b7bbb80 732a010310b9ed00
    bb60: ffffffffffffffff ffff0000080f777c ffff00000b7bbb80 ffff0000089ffb3c
    [<ffff0000089ffb3c>] composite_setup+0x44/0x1508
    [<ffff000008a032fc>] android_setup+0xb8/0x13c
    [<ffff0000089bd9a8>] cdns3_ep0_delegate_req+0x44/0x70
    [<ffff0000089bdff4>] cdns3_check_ep0_interrupt_proceed+0x33c/0x654
    [<ffff0000089bca44>] cdns3_device_thread_irq_handler+0x4b0/0x4bc
    [<ffff0000089b77b4>] cdns3_thread_irq+0x48/0x68
    [<ffff000008145bf0>] irq_thread_fn+0x28/0x88
    [<ffff000008145e38>] irq_thread+0x13c/0x228
    [<ffff0000080fed70>] kthread+0x104/0x130
    [<ffff000008085064>] ret_from_fork+0x10/0x18
    
    oops2:
    composite_disconnect: Calling disconnect on a Gadget that is                      not connected
    android_work: did not send uevent (0 0           (null))
    init: Received control message 'stop' for 'adbd' from pid: 3359 (/vendor/bin/hw/android.hardware.usb@1.1-service.imx)
    init: Sending signal 9 to service 'adbd' (pid 22343) process group...
    ------------[ cut here ]------------
    audit: audit_lost=180038 audit_rate_limit=5 audit_backlog_limit=64
    audit: rate limit exceeded
    WARNING: CPU: 0 PID: 3468 at kernel_imx/drivers/usb/gadget/composite.c:2009 composite_disconnect+0x80/0x88
    Modules linked in:
    CPU: 0 PID: 3468 Comm: HWC-UEvent-Thre Not tainted 4.14.98-07846-g0b40a9b-dirty #16
    Hardware name: Freescale i.MX8QM MEK (DT)
    task: ffff8008f2349c00 task.stack: ffff00000b0a8000
    PC is at composite_disconnect+0x80/0x88
    LR is at composite_disconnect+0x80/0x88
    pc : [<ffff0000089ff9b0>] lr : [<ffff0000089ff9b0>] pstate: 600001c5
    sp : ffff000008003dd0
    x29: ffff000008003dd0 x28: ffff8008f2349c00
    x27: ffff000009885018 x26: ffff000008004000
    Timeout for IPC response!
    x25: ffff000009885018 x24: ffff000009c8e280
    x23: ffff8008f2d98010 x22: 00000000000001c0
    x21: ffff8008f2d98394 x20: ffff8008f2d98010
    x19: 0000000000000000 x18: 0000e3956f4f075a
    fxos8700 4-001e: i2c block read acc failed
    x17: 0000e395735727e8 x16: ffff00000829f4d4
    x15: ffffffffffffffff x14: 7463656e6e6f6320
    x13: 746f6e2009090920 x12: 7369207461687420
    x11: 7465676461472061 x10: 206e6f207463656e
    x9 : 6e6f637369642067 x8 : ffff000009c8e280
    x7 : ffff0000086ca6cc x6 : ffff000009f15e78
    x5 : 0000000000000000 x4 : 0000000000000000
    x3 : ffffffffffffffff x2 : c3f28b86000c3900
    x1 : c3f28b86000c3900 x0 : 000000000000004e
    
    X20: 0xffff8008f2d97f90:
    7f90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7fb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    libprocessgroup: Failed to kill process cgroup uid 0 pid 22343 in 215ms, 1 processes remain
    7fd0
    Timeout for IPC response!
     00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    using random self ethernet address
    7ff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    8010  00000100 00000000 f2d98018 ffff8008 f2d98018 ffff8008 08a067dc
    using random host ethernet address
     ffff0000
    8030  f206d800 ffff8008 091c3650 ffff0000 f7957b18 ffff8008 f7957730 ffff8008
    8050  f716a630 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    8070  f76c8010 ffff8008 f716a800 ffff8008 095cac68 ffff0000 f206d828 ffff8008
    
    X21: 0xffff8008f2d98314:
    8314  ffff8008 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8334  00000000 00000000 00000000 00000000 00000000 08a04cf4 ffff0000 00000000
    8354  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    8374  00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000
    8394  e4bbe4bb 0f230000 ffff0000 0afae000 ffff0000 ae001000 00000000 f206d400
    Timeout for IPC response!
    83b4  ffff8008 00000000 00000000 f7957b18 ffff8008 f7957718 ffff8008 f7957018
    83d4  ffff8008 f7957118 ffff8008 f7957618 ffff8008 f7957818 ffff8008 f7957918
    83f4  ffff8008 f7957d18 ffff8008 00000000 00000000 00000000 00000000 00000000
    
    X23: 0xffff8008f2d97f90:
    7f90  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7fb0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7fd0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    7ff0  00000000 00000000 00000000 00000000 f76c8010 ffff8008 f76c8010 ffff8008
    8010  00000100 00000000 f2d98018 ffff8008 f2d98018 ffff8008 08a067dc ffff0000
    8030  f206d800 ffff8008 091c3650 ffff0000 f7957b18 ffff8008 f7957730 ffff8008
    8050  f716a630 ffff8008 00000000 00000005 00000000 00000000 095d1568 ffff0000
    8070  f76c8010 ffff8008 f716a800 ffff8008 095cac68 ffff0000 f206d828 ffff8008
    
    X28: 0xffff8008f2349b80:
    9b80  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9ba0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9bc0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9be0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    9c00  00000022 00000000 ffffffff ffffffff 00010001 00000000 00000000 00000000
    9c20  0b0a8000 ffff0000 00000002 00404040 00000000 00000000 00000000 00000000
    9c40  00000001 00000000 00000001 00000000 001ebd44 00000001 f390b800 ffff8008
    9c60  00000000 00000001 00000070 00000070 00000070 00000000 09031d48 ffff0000
    
    Call trace:
    Exception stack(0xffff000008003c90 to 0xffff000008003dd0)
    3c80:                                   000000000000004e c3f28b86000c3900
    3ca0: c3f28b86000c3900 ffffffffffffffff 0000000000000000 0000000000000000
    3cc0: ffff000009f15e78 ffff0000086ca6cc ffff000009c8e280 6e6f637369642067
    3ce0: 206e6f207463656e 7465676461472061 7369207461687420 746f6e2009090920
    3d00: 7463656e6e6f6320 ffffffffffffffff ffff00000829f4d4 0000e395735727e8
    3d20: 0000e3956f4f075a 0000000000000000 ffff8008f2d98010 ffff8008f2d98394
    3d40: 00000000000001c0 ffff8008f2d98010 ffff000009c8e280 ffff000009885018
    3d60: ffff000008004000 ffff000009885018 ffff8008f2349c00 ffff000008003dd0
    3d80: ffff0000089ff9b0 ffff000008003dd0 ffff0000089ff9b0 00000000600001c5
    3da0: ffff8008f33f2cd8 0000000000000000 0000ffffffffffff 0000000000000000
    init: Received control message 'start' for 'adbd' from pid: 3359 (/vendor/bin/hw/android.hardware.usb@1.1-service.imx)
    3dc0: ffff000008003dd0 ffff0000089ff9b0
    [<ffff0000089ff9b0>] composite_disconnect+0x80/0x88
    [<ffff000008a044d4>] android_disconnect+0x3c/0x68
    [<ffff0000089ba9f8>] cdns3_device_irq_handler+0xfc/0x2c8
    [<ffff0000089b84c0>] cdns3_irq+0x44/0x94
    [<ffff00000814494c>] __handle_irq_event_percpu+0x60/0x24c
    [<ffff000008144c0c>] handle_irq_event+0x58/0xc0
    [<ffff00000814873c>] handle_fasteoi_irq+0x98/0x180
    [<ffff000008143a10>] generic_handle_irq+0x24/0x38
    [<ffff000008144170>] __handle_domain_irq+0x60/0xac
    [<ffff0000080819c4>] gic_handle_irq+0xd4/0x17c
    
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65b4a421e657ed09d3585a5bf75d4b2625aa1ba6
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Sep 29 21:41:45 2019 -0500

    usb: dwc3: pci: prevent memory leak in dwc3_pci_probe
    
    [ Upstream commit 9bbfceea12a8f145097a27d7c7267af25893c060 ]
    
    In dwc3_pci_probe a call to platform_device_alloc allocates a device
    which is correctly put in case of error except one case: when the call to
    platform_device_add_properties fails it directly returns instead of
    going to error handling. This commit replaces return with the goto.
    
    Fixes: 1a7b12f69a94 ("usb: dwc3: pci: Supply device properties via driver data")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ced537d6e7947aafca457ac858b35669c7ab0037
Author: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
Date:   Tue Oct 1 13:16:48 2019 +0530

    usb: gadget: composite: Fix possible double free memory bug
    
    [ Upstream commit 1c20c89b0421b52b2417bb0f62a611bc669eda1d ]
    
    composite_dev_cleanup call from the failure of configfs_composite_bind
    frees up the cdev->os_desc_req and cdev->req. If the previous calls of
    bind and unbind is successful these will carry stale values.
    
    Consider the below sequence of function calls:
    configfs_composite_bind()
            composite_dev_prepare()
                    - Allocate cdev->req, cdev->req->buf
            composite_os_desc_req_prepare()
                    - Allocate cdev->os_desc_req, cdev->os_desc_req->buf
    configfs_composite_unbind()
            composite_dev_cleanup()
                    - free the cdev->os_desc_req->buf and cdev->req->buf
    Next composition switch
    configfs_composite_bind()
            - If it fails goto err_comp_cleanup will call the
              composite_dev_cleanup() function
            composite_dev_cleanup()
                    - calls kfree up with the stale values of cdev->req->buf and
                      cdev->os_desc_req from the previous configfs_composite_bind
                      call. The free call on these stale values leads to double free.
    
    Hence, Fix this issue by setting request and buffer pointer to NULL after
    kfree.
    
    Signed-off-by: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1856034dca52eccbd663cf15793b3ed0de234ec
Author: Cristian Birsan <cristian.birsan@microchip.com>
Date:   Fri Oct 4 20:10:54 2019 +0300

    usb: gadget: udc: atmel: Fix interrupt storm in FIFO mode.
    
    [ Upstream commit ba3a1a915c49cc3023e4ddfc88f21e7514e82aa4 ]
    
    Fix interrupt storm generated by endpoints when working in FIFO mode.
    The TX_COMPLETE interrupt is used only by control endpoints processing.
    Do not enable it for other types of endpoints.
    
    Fixes: 914a3f3b3754 ("USB: add atmel_usba_udc driver")
    Signed-off-by: Cristian Birsan <cristian.birsan@microchip.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8426e6559e00fb3ab11b29b87eda94b4e69b8749
Author: Nikhil Badola <nikhil.badola@freescale.com>
Date:   Mon Oct 21 18:21:51 2019 +0800

    usb: fsl: Check memory resource before releasing it
    
    [ Upstream commit bc1e3a2dd0c9954fd956ac43ca2876bbea018c01 ]
    
    Check memory resource existence before releasing it to avoid NULL
    pointer dereference
    
    Signed-off-by: Nikhil Badola <nikhil.badola@freescale.com>
    Reviewed-by: Ran Wang <ran.wang_1@nxp.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42bc4412969e8983142ffd28dd2bb4e82b0b4f1e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 21 16:18:36 2019 +0200

    usb: dwc3: select CONFIG_REGMAP_MMIO
    
    [ Upstream commit a51bab592fbbef10f0e42a8aed86adfbf6a68fa7 ]
    
    After many randconfig builds, one configuration caused a link
    error with dwc3-meson-g12a lacking the regmap-mmio code:
    
    drivers/usb/dwc3/dwc3-meson-g12a.o: In function `dwc3_meson_g12a_probe':
    dwc3-meson-g12a.c:(.text+0x9f): undefined reference to `__devm_regmap_init_mmio_clk'
    
    Add the select statement that we have for all other users
    of that dependency.
    
    Fixes: c99993376f72 ("usb: dwc3: Add Amlogic G12A DWC3 glue")
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37d4de65b10959894411fff6e8d3fbc9f4abc150
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Tue Oct 22 14:27:08 2019 +0800

    scsi: sd: define variable dif as unsigned int instead of bool
    
    [ Upstream commit 0cf9f4e547cebb5f5d2d046437c71ddcc8ea4a39 ]
    
    Variable dif in function sd_setup_read_write_cmnd() is the return value of
    function scsi_host_dif_capable() which returns dif capability of disks.  If
    define it as bool, even for the disks which support DIF3, the function
    still return dif=1, which causes IO error. So define variable dif as
    unsigned int instead of bool.
    
    Fixes: e249e42d277e ("scsi: sd: Clean up sd_setup_read_write_cmnd()")
    Link: https://lore.kernel.org/r/1571725628-132736-1-git-send-email-chenxiang66@hisilicon.com
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b414f0c95f08e3c1e8193f31a1a5c6f94f661c2
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Oct 21 18:47:59 2019 +0000

    virt_wifi: fix refcnt leak in module exit routine
    
    [ Upstream commit 1962f86b42ed06ea6af9ff09390243b99d9eb83a ]
    
    virt_wifi_newlink() calls netdev_upper_dev_link() and it internally
    holds reference count of lower interface.
    
    Current code does not release a reference count of the lower interface
    when the lower interface is being deleted.
    So, reference count leaks occur.
    
    Test commands:
        ip link add dummy0 type dummy
        ip link add vw1 link dummy0 type virt_wifi
        ip link del dummy0
    
    Splat looks like:
    [  133.787526][  T788] WARNING: CPU: 1 PID: 788 at net/core/dev.c:8274 rollback_registered_many+0x835/0xc80
    [  133.788355][  T788] Modules linked in: virt_wifi cfg80211 dummy team af_packet sch_fq_codel ip_tables x_tables unix
    [  133.789377][  T788] CPU: 1 PID: 788 Comm: ip Not tainted 5.4.0-rc3+ #96
    [  133.790069][  T788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  133.791167][  T788] RIP: 0010:rollback_registered_many+0x835/0xc80
    [  133.791906][  T788] Code: 00 4d 85 ff 0f 84 b5 fd ff ff ba c0 0c 00 00 48 89 de 4c 89 ff e8 9b 58 04 00 48 89 df e8 30
    [  133.794317][  T788] RSP: 0018:ffff88805ba3f338 EFLAGS: 00010202
    [  133.795080][  T788] RAX: ffff88805e57e801 RBX: ffff88805ba34000 RCX: ffffffffa9294723
    [  133.796045][  T788] RDX: 1ffff1100b746816 RSI: 0000000000000008 RDI: ffffffffabcc4240
    [  133.797006][  T788] RBP: ffff88805ba3f4c0 R08: fffffbfff5798849 R09: fffffbfff5798849
    [  133.797993][  T788] R10: 0000000000000001 R11: fffffbfff5798848 R12: dffffc0000000000
    [  133.802514][  T788] R13: ffff88805ba3f440 R14: ffff88805ba3f400 R15: ffff88805ed622c0
    [  133.803237][  T788] FS:  00007f2e9608c0c0(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [  133.804002][  T788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  133.804664][  T788] CR2: 00007f2e95610603 CR3: 000000005f68c004 CR4: 00000000000606e0
    [  133.805363][  T788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  133.806073][  T788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  133.806787][  T788] Call Trace:
    [  133.807069][  T788]  ? generic_xdp_install+0x310/0x310
    [  133.807612][  T788]  ? lock_acquire+0x164/0x3b0
    [  133.808077][  T788]  ? is_bpf_text_address+0x5/0xf0
    [  133.808640][  T788]  ? deref_stack_reg+0x9c/0xd0
    [  133.809138][  T788]  ? __nla_validate_parse+0x98/0x1ab0
    [  133.809944][  T788]  unregister_netdevice_many.part.122+0x13/0x1b0
    [  133.810599][  T788]  rtnl_delete_link+0xbc/0x100
    [  133.811073][  T788]  ? rtnl_af_register+0xc0/0xc0
    [  133.811672][  T788]  rtnl_dellink+0x30e/0x8a0
    [  133.812205][  T788]  ? is_bpf_text_address+0x5/0xf0
    [ ... ]
    
    [  144.110530][  T788] unregister_netdevice: waiting for dummy0 to become free. Usage count = 1
    
    This patch adds notifier routine to delete upper interface before deleting
    lower interface.
    
    Fixes: c7cdba31ed8b ("mac80211-next: rtnetlink wifi simulation device")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0add6db3d5ec4561cab257358871a9d3df7f0a3
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Oct 21 18:47:55 2019 +0000

    macsec: fix refcnt leak in module exit routine
    
    [ Upstream commit 2bce1ebed17da54c65042ec2b962e3234bad5b47 ]
    
    When a macsec interface is created, it increases a refcnt to a lower
    device(real device). when macsec interface is deleted, the refcnt is
    decreased in macsec_free_netdev(), which is ->priv_destructor() of
    macsec interface.
    
    The problem scenario is this.
    When nested macsec interfaces are exiting, the exit routine of the
    macsec module makes refcnt leaks.
    
    Test commands:
        ip link add dummy0 type dummy
        ip link add macsec0 link dummy0 type macsec
        ip link add macsec1 link macsec0 type macsec
        modprobe -rv macsec
    
    [  208.629433] unregister_netdevice: waiting for macsec0 to become free. Usage count = 1
    
    Steps of exit routine of macsec module are below.
    1. Calls ->dellink() in __rtnl_link_unregister().
    2. Checks refcnt and wait refcnt to be 0 if refcnt is not 0 in
    netdev_run_todo().
    3. Calls ->priv_destruvtor() in netdev_run_todo().
    
    Step2 checks refcnt, but step3 decreases refcnt.
    So, step2 waits forever.
    
    This patch makes the macsec module do not hold a refcnt of the lower
    device because it already holds a refcnt of the lower device with
    netdev_upper_dev_link().
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80688a6fd6f60b679b69a00f538ce4b14fa4e585
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Oct 21 18:47:53 2019 +0000

    bonding: use dynamic lockdep key instead of subclass
    
    [ Upstream commit 089bca2caed0d0dea7da235ce1fe245808f5ec02 ]
    
    All bonding device has same lockdep key and subclass is initialized with
    nest_level.
    But actual nest_level value can be changed when a lower device is attached.
    And at this moment, the subclass should be updated but it seems to be
    unsafe.
    So this patch makes bonding use dynamic lockdep key instead of the
    subclass.
    
    Test commands:
        ip link add bond0 type bond
    
        for i in {1..5}
        do
                let A=$i-1
                ip link add bond$i type bond
                ip link set bond$i master bond$A
        done
        ip link set bond5 master bond0
    
    Splat looks like:
    [  307.992912] WARNING: possible recursive locking detected
    [  307.993656] 5.4.0-rc3+ #96 Tainted: G        W
    [  307.994367] --------------------------------------------
    [  307.995092] ip/761 is trying to acquire lock:
    [  307.995710] ffff8880513aac60 (&(&bond->stats_lock)->rlock#2/2){+.+.}, at: bond_get_stats+0xb8/0x500 [bonding]
    [  307.997045]
                   but task is already holding lock:
    [  307.997923] ffff88805fcbac60 (&(&bond->stats_lock)->rlock#2/2){+.+.}, at: bond_get_stats+0xb8/0x500 [bonding]
    [  307.999215]
                   other info that might help us debug this:
    [  308.000251]  Possible unsafe locking scenario:
    
    [  308.001137]        CPU0
    [  308.001533]        ----
    [  308.001915]   lock(&(&bond->stats_lock)->rlock#2/2);
    [  308.002609]   lock(&(&bond->stats_lock)->rlock#2/2);
    [  308.003302]
                    *** DEADLOCK ***
    
    [  308.004310]  May be due to missing lock nesting notation
    
    [  308.005319] 3 locks held by ip/761:
    [  308.005830]  #0: ffffffff9fcc42b0 (rtnl_mutex){+.+.}, at: rtnetlink_rcv_msg+0x466/0x8a0
    [  308.006894]  #1: ffff88805fcbac60 (&(&bond->stats_lock)->rlock#2/2){+.+.}, at: bond_get_stats+0xb8/0x500 [bonding]
    [  308.008243]  #2: ffffffff9f9219c0 (rcu_read_lock){....}, at: bond_get_stats+0x9f/0x500 [bonding]
    [  308.009422]
                   stack backtrace:
    [  308.010124] CPU: 0 PID: 761 Comm: ip Tainted: G        W         5.4.0-rc3+ #96
    [  308.011097] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  308.012179] Call Trace:
    [  308.012601]  dump_stack+0x7c/0xbb
    [  308.013089]  __lock_acquire+0x269d/0x3de0
    [  308.013669]  ? register_lock_class+0x14d0/0x14d0
    [  308.014318]  lock_acquire+0x164/0x3b0
    [  308.014858]  ? bond_get_stats+0xb8/0x500 [bonding]
    [  308.015520]  _raw_spin_lock_nested+0x2e/0x60
    [  308.016129]  ? bond_get_stats+0xb8/0x500 [bonding]
    [  308.017215]  bond_get_stats+0xb8/0x500 [bonding]
    [  308.018454]  ? bond_arp_rcv+0xf10/0xf10 [bonding]
    [  308.019710]  ? rcu_read_lock_held+0x90/0xa0
    [  308.020605]  ? rcu_read_lock_sched_held+0xc0/0xc0
    [  308.021286]  ? bond_get_stats+0x9f/0x500 [bonding]
    [  308.021953]  dev_get_stats+0x1ec/0x270
    [  308.022508]  bond_get_stats+0x1d1/0x500 [bonding]
    
    Fixes: d3fff6c443fe ("net: add netdev_lockdep_set_classes() helper")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56ed4805453febf9f4f341b2f694c4b6f6779c82
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Oct 21 18:47:52 2019 +0000

    bonding: fix unexpected IFF_BONDING bit unset
    
    [ Upstream commit 65de65d9033750d2cf1b336c9d6e9da3a8b5cc6e ]
    
    The IFF_BONDING means bonding master or bonding slave device.
    ->ndo_add_slave() sets IFF_BONDING flag and ->ndo_del_slave() unsets
    IFF_BONDING flag.
    
    bond0<--bond1
    
    Both bond0 and bond1 are bonding device and these should keep having
    IFF_BONDING flag until they are removed.
    But bond1 would lose IFF_BONDING at ->ndo_del_slave() because that routine
    do not check whether the slave device is the bonding type or not.
    This patch adds the interface type check routine before removing
    IFF_BONDING flag.
    
    Test commands:
        ip link add bond0 type bond
        ip link add bond1 type bond
        ip link set bond1 master bond0
        ip link set bond1 nomaster
        ip link del bond1 type bond
        ip link add bond1 type bond
    
    Splat looks like:
    [  226.665555] proc_dir_entry 'bonding/bond1' already registered
    [  226.666440] WARNING: CPU: 0 PID: 737 at fs/proc/generic.c:361 proc_register+0x2a9/0x3e0
    [  226.667571] Modules linked in: bonding af_packet sch_fq_codel ip_tables x_tables unix
    [  226.668662] CPU: 0 PID: 737 Comm: ip Not tainted 5.4.0-rc3+ #96
    [  226.669508] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  226.670652] RIP: 0010:proc_register+0x2a9/0x3e0
    [  226.671612] Code: 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 39 01 00 00 48 8b 04 24 48 89 ea 48 c7 c7 a0 0b 14 9f 48 8b b0 e
    0 00 00 00 e8 07 e7 88 ff <0f> 0b 48 c7 c7 40 2d a5 9f e8 59 d6 23 01 48 8b 4c 24 10 48 b8 00
    [  226.675007] RSP: 0018:ffff888050e17078 EFLAGS: 00010282
    [  226.675761] RAX: dffffc0000000008 RBX: ffff88805fdd0f10 RCX: ffffffff9dd344e2
    [  226.676757] RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffff88806c9f6b8c
    [  226.677751] RBP: ffff8880507160f3 R08: ffffed100d940019 R09: ffffed100d940019
    [  226.678761] R10: 0000000000000001 R11: ffffed100d940018 R12: ffff888050716008
    [  226.679757] R13: ffff8880507160f2 R14: dffffc0000000000 R15: ffffed100a0e2c1e
    [  226.680758] FS:  00007fdc217cc0c0(0000) GS:ffff88806c800000(0000) knlGS:0000000000000000
    [  226.681886] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  226.682719] CR2: 00007f49313424d0 CR3: 0000000050e46001 CR4: 00000000000606f0
    [  226.683727] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  226.684725] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  226.685681] Call Trace:
    [  226.687089]  proc_create_seq_private+0xb3/0xf0
    [  226.687778]  bond_create_proc_entry+0x1b3/0x3f0 [bonding]
    [  226.691458]  bond_netdev_event+0x433/0x970 [bonding]
    [  226.692139]  ? __module_text_address+0x13/0x140
    [  226.692779]  notifier_call_chain+0x90/0x160
    [  226.693401]  register_netdevice+0x9b3/0xd80
    [  226.694010]  ? alloc_netdev_mqs+0x854/0xc10
    [  226.694629]  ? netdev_change_features+0xa0/0xa0
    [  226.695278]  ? rtnl_create_link+0x2ed/0xad0
    [  226.695849]  bond_newlink+0x2a/0x60 [bonding]
    [  226.696422]  __rtnl_newlink+0xb9f/0x11b0
    [  226.696968]  ? rtnl_link_unregister+0x220/0x220
    [ ... ]
    
    Fixes: 0b680e753724 ("[PATCH] bonding: Add priv_flag to avoid event mishandling")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c61d399b81e5ddb3aa61f43f60e8c40897f32e3
Author: Mark Zhang <markz@mellanox.com>
Date:   Sun Oct 20 09:28:00 2019 +0300

    RDMA/nldev: Skip counter if port doesn't match
    
    [ Upstream commit a15542bb72a48042f5df7475893d46f725f5f9fb ]
    
    The counter resource should return -EAGAIN if it was requested for a
    different port, this is similar to how QP works if the users provides a
    port filter.
    
    Otherwise port filtering in netlink will return broken counter nests.
    
    Fixes: c4ffee7c9bdb ("RDMA/netlink: Implement counter dumpit calback")
    Link: https://lore.kernel.org/r/20191020062800.8065-1-leon@kernel.org
    Signed-off-by: Mark Zhang <markz@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa1ba958cd0c8fa9976ec2c854d81c17c6ee02a2
Author: wenxu <wenxu@ucloud.cn>
Date:   Thu Oct 24 15:52:45 2019 +0800

    netfilter: nft_payload: fix missing check for matching length in offloads
    
    [ Upstream commit a69a85da458f79088c38a38db034a4d64d9c32c3 ]
    
    Payload offload rule should also check the length of the match.
    Moreover, check for unsupported link-layer fields:
    
     nft --debug=netlink add rule firewall zones vlan id 100
     ...
     [ payload load 2b @ link header + 0 => reg 1 ]
    
    this loads 2byte base on ll header and offset 0.
    
    This also fixes unsupported raw payload match.
    
    Fixes: 92ad6325cb89 ("netfilter: nf_tables: add hardware offload support")
    Signed-off-by: wenxu <wenxu@ucloud.cn>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0df80c1a109a88565f38961631dd7aba5d738405
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 23 09:53:03 2019 -0700

    ipvs: move old_secure_tcp into struct netns_ipvs
    
    [ Upstream commit c24b75e0f9239e78105f81c5f03a751641eb07ef ]
    
    syzbot reported the following issue :
    
    BUG: KCSAN: data-race in update_defense_level / update_defense_level
    
    read to 0xffffffff861a6260 of 4 bytes by task 3006 on cpu 1:
     update_defense_level+0x621/0xb30 net/netfilter/ipvs/ip_vs_ctl.c:177
     defense_work_handler+0x3d/0xd0 net/netfilter/ipvs/ip_vs_ctl.c:225
     process_one_work+0x3d4/0x890 kernel/workqueue.c:2269
     worker_thread+0xa0/0x800 kernel/workqueue.c:2415
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    write to 0xffffffff861a6260 of 4 bytes by task 7333 on cpu 0:
     update_defense_level+0xa62/0xb30 net/netfilter/ipvs/ip_vs_ctl.c:205
     defense_work_handler+0x3d/0xd0 net/netfilter/ipvs/ip_vs_ctl.c:225
     process_one_work+0x3d4/0x890 kernel/workqueue.c:2269
     worker_thread+0xa0/0x800 kernel/workqueue.c:2415
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 7333 Comm: kworker/0:5 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events defense_work_handler
    
    Indeed, old_secure_tcp is currently a static variable, while it
    needs to be a per netns variable.
    
    Fixes: a0840e2e165a ("IPVS: netns, ip_vs_ctl local vars moved to ipvs struct.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 529c302d6470c76c18982bd8b61a3c9c1efd7c07
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Sat Oct 19 17:34:35 2019 +0200

    ipvs: don't ignore errors in case refcounting ip_vs module fails
    
    [ Upstream commit 62931f59ce9cbabb934a431f48f2f1f441c605ac ]
    
    if the IPVS module is removed while the sync daemon is starting, there is
    a small gap where try_module_get() might fail getting the refcount inside
    ip_vs_use_count_inc(). Then, the refcounts of IPVS module are unbalanced,
    and the subsequent call to stop_sync_thread() causes the following splat:
    
     WARNING: CPU: 0 PID: 4013 at kernel/module.c:1146 module_put.part.44+0x15b/0x290
      Modules linked in: ip_vs(-) nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 veth ip6table_filter ip6_tables iptable_filter binfmt_misc intel_rapl_msr intel_rapl_common crct10dif_pclmul crc32_pclmul ext4 mbcache jbd2 ghash_clmulni_intel snd_hda_codec_generic ledtrig_audio snd_hda_intel snd_intel_nhlt snd_hda_codec snd_hda_core snd_hwdep snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd glue_helper joydev pcspkr snd_timer virtio_balloon snd soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs libcrc32c ata_generic pata_acpi virtio_net net_failover virtio_blk failover virtio_console qxl drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ata_piix ttm crc32c_intel serio_raw drm virtio_pci libata virtio_ring virtio floppy dm_mirror dm_region_hash dm_log dm_mod [last unloaded: nf_defrag_ipv6]
      CPU: 0 PID: 4013 Comm: modprobe Tainted: G        W         5.4.0-rc1.upstream+ #741
      Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
      RIP: 0010:module_put.part.44+0x15b/0x290
      Code: 04 25 28 00 00 00 0f 85 18 01 00 00 48 83 c4 68 5b 5d 41 5c 41 5d 41 5e 41 5f c3 89 44 24 28 83 e8 01 89 c5 0f 89 57 ff ff ff <0f> 0b e9 78 ff ff ff 65 8b 1d 67 83 26 4a 89 db be 08 00 00 00 48
      RSP: 0018:ffff888050607c78 EFLAGS: 00010297
      RAX: 0000000000000003 RBX: ffffffffc1420590 RCX: ffffffffb5db0ef9
      RDX: 0000000000000000 RSI: 0000000000000004 RDI: ffffffffc1420590
      RBP: 00000000ffffffff R08: fffffbfff82840b3 R09: fffffbfff82840b3
      R10: 0000000000000001 R11: fffffbfff82840b2 R12: 1ffff1100a0c0f90
      R13: ffffffffc1420200 R14: ffff88804f533300 R15: ffff88804f533ca0
      FS:  00007f8ea9720740(0000) GS:ffff888053800000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f3245abe000 CR3: 000000004c28a006 CR4: 00000000001606f0
      Call Trace:
       stop_sync_thread+0x3a3/0x7c0 [ip_vs]
       ip_vs_sync_net_cleanup+0x13/0x50 [ip_vs]
       ops_exit_list.isra.5+0x94/0x140
       unregister_pernet_operations+0x29d/0x460
       unregister_pernet_device+0x26/0x60
       ip_vs_cleanup+0x11/0x38 [ip_vs]
       __x64_sys_delete_module+0x2d5/0x400
       do_syscall_64+0xa5/0x4e0
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      RIP: 0033:0x7f8ea8bf0db7
      Code: 73 01 c3 48 8b 0d b9 80 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 b8 b0 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 89 80 2c 00 f7 d8 64 89 01 48
      RSP: 002b:00007ffcd38d2fe8 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000000002436240 RCX: 00007f8ea8bf0db7
      RDX: 0000000000000000 RSI: 0000000000000800 RDI: 00000000024362a8
      RBP: 0000000000000000 R08: 00007f8ea8eba060 R09: 00007f8ea8c658a0
      R10: 00007ffcd38d2a60 R11: 0000000000000206 R12: 0000000000000000
      R13: 0000000000000001 R14: 00000000024362a8 R15: 0000000000000000
      irq event stamp: 4538
      hardirqs last  enabled at (4537): [<ffffffffb6193dde>] quarantine_put+0x9e/0x170
      hardirqs last disabled at (4538): [<ffffffffb5a0556a>] trace_hardirqs_off_thunk+0x1a/0x20
      softirqs last  enabled at (4522): [<ffffffffb6f8ebe9>] sk_common_release+0x169/0x2d0
      softirqs last disabled at (4520): [<ffffffffb6f8eb3e>] sk_common_release+0xbe/0x2d0
    
    Check the return value of ip_vs_use_count_inc() and let its caller return
    proper error. Inside do_ip_vs_set_ctl() the module is already refcounted,
    we don't need refcount/derefcount there. Finally, in register_ip_vs_app()
    and start_sync_thread(), take the module refcount earlier and ensure it's
    released in the error path.
    
    Change since v1:
     - better return values in case of failure of ip_vs_use_count_inc(),
       thanks to Julian Anastasov
     - no need to increase/decrease the module refcount in ip_vs_set_ctl(),
       thanks to Julian Anastasov
    
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7e6965cdefe21f6947e3368f573ef574f5818e7
Author: Martin Fuzzey <martin.fuzzey@flowbird.group>
Date:   Wed Oct 23 11:44:24 2019 +0200

    net: phy: smsc: LAN8740: add PHY_RST_AFTER_CLK_EN flag
    
    [ Upstream commit 76db2d466f6a929a04775f0f87d837e3bcba44e8 ]
    
    The LAN8740, like the 8720, also requires a reset after enabling clock.
    The datasheet [1] 3.8.5.1 says:
            "During a Hardware reset, an external clock must be supplied
            to the XTAL1/CLKIN signal."
    
    I have observed this issue on a custom i.MX6 based board with
    the LAN8740A.
    
    [1] http://ww1.microchip.com/downloads/en/DeviceDoc/8740a.pdf
    
    Signed-off-by: Martin Fuzzey <martin.fuzzey@flowbird.group>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16e024372ba3d563da9b5ab394a3e7e33535ee81
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Mon Oct 21 10:16:58 2019 +0200

    xsk: Fix registration of Rx-only sockets
    
    [ Upstream commit 2afd23f78f39da84937006ecd24aa664a4ab052b ]
    
    Having Rx-only AF_XDP sockets can potentially lead to a crash in the
    system by a NULL pointer dereference in xsk_umem_consume_tx(). This
    function iterates through a list of all sockets tied to a umem and
    checks if there are any packets to send on the Tx ring. Rx-only
    sockets do not have a Tx ring, so this will cause a NULL pointer
    dereference. This will happen if you have registered one or more
    Rx-only sockets to a umem and the driver is checking the Tx ring even
    on Rx, or if the XDP_SHARED_UMEM mode is used and there is a mix of
    Rx-only and other sockets tied to the same umem.
    
    Fixed by only putting sockets with a Tx component on the list that
    xsk_umem_consume_tx() iterates over.
    
    Fixes: ac98d8aab61b ("xsk: wire upp Tx zero-copy functions")
    Reported-by: Kal Cutter Conley <kal.conley@dectris.com>
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Jonathan Lemon <jonathan.lemon@gmail.com>
    Link: https://lore.kernel.org/bpf/1571645818-16244-1-git-send-email-magnus.karlsson@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43ed09d84c7def99b38075b4f553d543b68afcd7
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Oct 21 13:52:49 2019 -0500

    drm/v3d: Fix memory leak in v3d_submit_cl_ioctl
    
    [ Upstream commit 29cd13cfd7624726d9e6becbae9aa419ef35af7f ]
    
    In the impelementation of v3d_submit_cl_ioctl() there are two memory
    leaks. One is when allocation for bin fails, and the other is when bin
    initialization fails. If kcalloc fails to allocate memory for bin then
    render->base should be put. Also, if v3d_job_init() fails to initialize
    bin->base then allocated memory for bin should be released.
    
    Fixes: a783a09ee76d ("drm/v3d: Refactor job management.")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191021185250.26130-1-navid.emamdoost@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4df6b9f49d3c6e9c6b658f4f01b896bce7698bca
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Oct 14 11:03:15 2019 +0200

    netfilter: nf_flow_table: set timeout before insertion into hashes
    
    [ Upstream commit daf61b026f4686250e6afa619e6d7b49edc61df7 ]
    
    Other garbage collector might remove an entry not fully set up yet.
    
    [570953.958293] RIP: 0010:memcmp+0x9/0x50
    [...]
    [570953.958567]  flow_offload_hash_cmp+0x1e/0x30 [nf_flow_table]
    [570953.958585]  flow_offload_lookup+0x8c/0x110 [nf_flow_table]
    [570953.958606]  nf_flow_offload_ip_hook+0x135/0xb30 [nf_flow_table]
    [570953.958624]  nf_flow_offload_inet_hook+0x35/0x37 [nf_flow_table_inet]
    [570953.958646]  nf_hook_slow+0x3c/0xb0
    [570953.958664]  __netif_receive_skb_core+0x90f/0xb10
    [570953.958678]  ? ip_rcv_finish+0x82/0xa0
    [570953.958692]  __netif_receive_skb_one_core+0x3b/0x80
    [570953.958711]  __netif_receive_skb+0x18/0x60
    [570953.958727]  netif_receive_skb_internal+0x45/0xf0
    [570953.958741]  napi_gro_receive+0xcd/0xf0
    [570953.958764]  ixgbe_clean_rx_irq+0x432/0xe00 [ixgbe]
    [570953.958782]  ixgbe_poll+0x27b/0x700 [ixgbe]
    [570953.958796]  net_rx_action+0x284/0x3c0
    [570953.958817]  __do_softirq+0xcc/0x27c
    [570953.959464]  irq_exit+0xe8/0x100
    [570953.960097]  do_IRQ+0x59/0xe0
    [570953.960734]  common_interrupt+0xf/0xf
    
    Fixes: 43c8f131184f ("netfilter: nf_flow_table: fix missing error check for rhashtable_insert_fast")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4c27320c89be036cd6a31b6a2fec010c6f17822
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Sat Oct 19 13:03:31 2019 +0300

    iwlwifi: pcie: 0x2720 is qu and 0x30DC is not
    
    [ Upstream commit 17c216ed6b9eef34e647192063f6149d33eff579 ]
    
    When converting the wrong qu configurations in an earlier commit, I
    accidentally swapped 0x2720 and 0x30DC.  Instead of converting 0x2720,
    I converted 0x30DC.  Undo 0x30DC and convert 0x2720.
    
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6a33a44d7fa0b7a55f511d3c0ec9bd70e82a055
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Sat Oct 19 13:03:28 2019 +0300

    iwlwifi: pcie: fix all 9460 entries for qnj
    
    [ Upstream commit e55890150a961944e861a46efc8599f80f25de76 ]
    
    A bunch of the entries for qnj were wrong.  The 9460 device doesn't
    exist, so update them to 9461 and 9462.  There are still a bunch of
    other occurrences of 9460, but that will be fixed separately.
    
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19be57ee528ed93d8fc25779332e2c196f0d10bd
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Sat Oct 19 13:03:27 2019 +0300

    iwlwifi: pcie: fix PCI ID 0x2720 configs that should be soc
    
    [ Upstream commit 6dea7da7019aa04c02edf1878c9c2e59d6cb75a5 ]
    
    Some entries for PCI ID 0x2720 were using iwl9260_2ac_cfg, but the
    correct is to use iwl9260_2ac_cfg_soc.  Fix that.
    
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ab5cba443278b2605fcb51b9c3c8d4c1966d622
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Oct 22 23:30:38 2019 +0200

    bpf: Fix use after free in bpf_get_prog_name
    
    [ Upstream commit 3b4d9eb2ee74dd5ea7fa36cffb0ca7f5bc4924da ]
    
    There is one more problematic case I noticed while recently fixing BPF kallsyms
    handling in cd7455f1013e ("bpf: Fix use after free in subprog's jited symbol
    removal") and that is bpf_get_prog_name().
    
    If BTF has been attached to the prog, then we may be able to fetch the function
    signature type id in kallsyms through prog->aux->func_info[prog->aux->func_idx].type_id.
    However, while the BTF object itself is torn down via RCU callback, the prog's
    aux->func_info is immediately freed via kvfree(prog->aux->func_info) once the
    prog's refcount either hit zero or when subprograms were already exposed via
    kallsyms and we hit the error path added in 5482e9a93c83 ("bpf: Fix memleak in
    aux->func_info and aux->btf").
    
    This violates RCU as well since kallsyms could be walked in parallel where we
    could access aux->func_info. Hence, defer kvfree() to after RCU grace period.
    Looking at ba64e7d85252 ("bpf: btf: support proper non-jit func info") there
    is no reason/dependency where we couldn't defer the kvfree(aux->func_info) into
    the RCU callback.
    
    Fixes: 5482e9a93c83 ("bpf: Fix memleak in aux->func_info and aux->btf")
    Fixes: ba64e7d85252 ("bpf: btf: support proper non-jit func info")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/875f2906a7c1a0691f2d567b4d8e4ea2739b1e88.1571779205.git.daniel@iogearbox.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 912bcdcac4f3ae2bb76f0ec1556513eaca77322c
Author: Himanshu Madhani <hmadhani@marvell.com>
Date:   Tue Oct 22 12:36:42 2019 -0700

    scsi: qla2xxx: Initialized mailbox to prevent driver load failure
    
    [ Upstream commit c2ff2a36eff60efb5e123c940115216d6bf65684 ]
    
    This patch fixes issue with Gen7 adapter in a blade environment where one
    of the ports will not be detected by driver. Firmware expects mailbox 11 to
    be set or cleared by driver for newer ISP.
    
    Following message is seen in the log file:
    
    [   18.810892] qla2xxx [0000:d8:00.0]-1820:1: **** Failed=102 mb[0]=4005 mb[1]=37 mb[2]=20 mb[3]=8
    [   18.819596]  cmd=2 ****
    
    [mkp: typos]
    
    Link: https://lore.kernel.org/r/20191022193643.7076-2-hmadhani@marvell.com
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c7a8ffd9d0759ff99c41850544f217a7f48b9aa
Author: Daniel Wagner <dwagner@suse.de>
Date:   Tue Oct 22 09:21:12 2019 +0200

    scsi: lpfc: Honor module parameter lpfc_use_adisc
    
    [ Upstream commit 0fd103ccfe6a06e40e2d9d8c91d96332cc9e1239 ]
    
    The initial lpfc_desc_set_adisc implementation in commit
    dea3101e0a5c ("lpfc: add Emulex FC driver version 8.0.28") enabled ADISC if
    
            cfg_use_adisc && RSCN_MODE && FCP_2_DEVICE
    
    In commit 92d7f7b0cde3 ("[SCSI] lpfc: NPIV: add NPIV support on top of
    SLI-3") this changed to
    
            (cfg_use_adisc && RSC_MODE) || FCP_2_DEVICE
    
    and later in commit ffc954936b13 ("[SCSI] lpfc 8.3.13: FC Discovery Fixes
    and enhancements.") to
    
            (cfg_use_adisc && RSC_MODE) || (FCP_2_DEVICE && FCP_TARGET)
    
    A customer reports that after a devloss, an ADISC failure is logged. It
    turns out the ADISC flag is set even the user explicitly set lpfc_use_adisc
    = 0.
    
    [Sat Dec 22 22:55:58 2018] lpfc 0000:82:00.0: 2:(0):0203 Devloss timeout on WWPN 50:01:43:80:12:8e:40:20 NPort x05df00 Data: x82000000 x8 xa
    [Sat Dec 22 23:08:20 2018] lpfc 0000:82:00.0: 2:(0):2755 ADISC failure DID:05DF00 Status:x9/x70000
    
    [mkp: fixed Hannes' email]
    
    Fixes: 92d7f7b0cde3 ("[SCSI] lpfc: NPIV: add NPIV support on top of SLI-3")
    Cc: Dick Kennedy <dick.kennedy@broadcom.com>
    Cc: James Smart <james.smart@broadcom.com>
    Link: https://lore.kernel.org/r/20191022072112.132268-1-dwagner@suse.de
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Daniel Wagner <dwagner@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46f8579b63edba8d1d64a959aecdb68b3e15c6ca
Author: Hillf Danton <hdanton@sina.com>
Date:   Mon Oct 21 12:01:57 2019 +0200

    net: openvswitch: free vport unless register_netdevice() succeeds
    
    [ Upstream commit 9464cc37f3671ee69cb1c00662b5e1f113a96b23 ]
    
    syzbot found the following crash on:
    
    HEAD commit:    1e78030e Merge tag 'mmc-v5.3-rc1' of git://git.kernel.org/..
    git tree:       upstream
    console output: https://syzkaller.appspot.com/x/log.txt?x=148d3d1a600000
    kernel config:  https://syzkaller.appspot.com/x/.config?x=30cef20daf3e9977
    dashboard link: https://syzkaller.appspot.com/bug?extid=13210896153522fe1ee5
    compiler:       gcc (GCC) 9.0.0 20181231 (experimental)
    syz repro:      https://syzkaller.appspot.com/x/repro.syz?x=136aa8c4600000
    C reproducer:   https://syzkaller.appspot.com/x/repro.c?x=109ba792600000
    
    =====================================================================
    BUG: memory leak
    unreferenced object 0xffff8881207e4100 (size 128):
       comm "syz-executor032", pid 7014, jiffies 4294944027 (age 13.830s)
       hex dump (first 32 bytes):
         00 70 16 18 81 88 ff ff 80 af 8c 22 81 88 ff ff  .p........."....
         00 b6 23 17 81 88 ff ff 00 00 00 00 00 00 00 00  ..#.............
       backtrace:
         [<000000000eb78212>] kmemleak_alloc_recursive  include/linux/kmemleak.h:43 [inline]
         [<000000000eb78212>] slab_post_alloc_hook mm/slab.h:522 [inline]
         [<000000000eb78212>] slab_alloc mm/slab.c:3319 [inline]
         [<000000000eb78212>] kmem_cache_alloc_trace+0x145/0x2c0 mm/slab.c:3548
         [<00000000006ea6c6>] kmalloc include/linux/slab.h:552 [inline]
         [<00000000006ea6c6>] kzalloc include/linux/slab.h:748 [inline]
         [<00000000006ea6c6>] ovs_vport_alloc+0x37/0xf0  net/openvswitch/vport.c:130
         [<00000000f9a04a7d>] internal_dev_create+0x24/0x1d0  net/openvswitch/vport-internal_dev.c:164
         [<0000000056ee7c13>] ovs_vport_add+0x81/0x190  net/openvswitch/vport.c:199
         [<000000005434efc7>] new_vport+0x19/0x80 net/openvswitch/datapath.c:194
         [<00000000b7b253f1>] ovs_dp_cmd_new+0x22f/0x410  net/openvswitch/datapath.c:1614
         [<00000000e0988518>] genl_family_rcv_msg+0x2ab/0x5b0  net/netlink/genetlink.c:629
         [<00000000d0cc9347>] genl_rcv_msg+0x54/0x9c net/netlink/genetlink.c:654
         [<000000006694b647>] netlink_rcv_skb+0x61/0x170  net/netlink/af_netlink.c:2477
         [<0000000088381f37>] genl_rcv+0x29/0x40 net/netlink/genetlink.c:665
         [<00000000dad42a47>] netlink_unicast_kernel  net/netlink/af_netlink.c:1302 [inline]
         [<00000000dad42a47>] netlink_unicast+0x1ec/0x2d0  net/netlink/af_netlink.c:1328
         [<0000000067e6b079>] netlink_sendmsg+0x270/0x480  net/netlink/af_netlink.c:1917
         [<00000000aab08a47>] sock_sendmsg_nosec net/socket.c:637 [inline]
         [<00000000aab08a47>] sock_sendmsg+0x54/0x70 net/socket.c:657
         [<000000004cb7c11d>] ___sys_sendmsg+0x393/0x3c0 net/socket.c:2311
         [<00000000c4901c63>] __sys_sendmsg+0x80/0xf0 net/socket.c:2356
         [<00000000c10abb2d>] __do_sys_sendmsg net/socket.c:2365 [inline]
         [<00000000c10abb2d>] __se_sys_sendmsg net/socket.c:2363 [inline]
         [<00000000c10abb2d>] __x64_sys_sendmsg+0x23/0x30 net/socket.c:2363
    
    BUG: memory leak
    unreferenced object 0xffff88811723b600 (size 64):
       comm "syz-executor032", pid 7014, jiffies 4294944027 (age 13.830s)
       hex dump (first 32 bytes):
         01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  ................
         00 00 00 00 00 00 00 00 02 00 00 00 05 35 82 c1  .............5..
       backtrace:
         [<00000000352f46d8>] kmemleak_alloc_recursive  include/linux/kmemleak.h:43 [inline]
         [<00000000352f46d8>] slab_post_alloc_hook mm/slab.h:522 [inline]
         [<00000000352f46d8>] slab_alloc mm/slab.c:3319 [inline]
         [<00000000352f46d8>] __do_kmalloc mm/slab.c:3653 [inline]
         [<00000000352f46d8>] __kmalloc+0x169/0x300 mm/slab.c:3664
         [<000000008e48f3d1>] kmalloc include/linux/slab.h:557 [inline]
         [<000000008e48f3d1>] ovs_vport_set_upcall_portids+0x54/0xd0  net/openvswitch/vport.c:343
         [<00000000541e4f4a>] ovs_vport_alloc+0x7f/0xf0  net/openvswitch/vport.c:139
         [<00000000f9a04a7d>] internal_dev_create+0x24/0x1d0  net/openvswitch/vport-internal_dev.c:164
         [<0000000056ee7c13>] ovs_vport_add+0x81/0x190  net/openvswitch/vport.c:199
         [<000000005434efc7>] new_vport+0x19/0x80 net/openvswitch/datapath.c:194
         [<00000000b7b253f1>] ovs_dp_cmd_new+0x22f/0x410  net/openvswitch/datapath.c:1614
         [<00000000e0988518>] genl_family_rcv_msg+0x2ab/0x5b0  net/netlink/genetlink.c:629
         [<00000000d0cc9347>] genl_rcv_msg+0x54/0x9c net/netlink/genetlink.c:654
         [<000000006694b647>] netlink_rcv_skb+0x61/0x170  net/netlink/af_netlink.c:2477
         [<0000000088381f37>] genl_rcv+0x29/0x40 net/netlink/genetlink.c:665
         [<00000000dad42a47>] netlink_unicast_kernel  net/netlink/af_netlink.c:1302 [inline]
         [<00000000dad42a47>] netlink_unicast+0x1ec/0x2d0  net/netlink/af_netlink.c:1328
         [<0000000067e6b079>] netlink_sendmsg+0x270/0x480  net/netlink/af_netlink.c:1917
         [<00000000aab08a47>] sock_sendmsg_nosec net/socket.c:637 [inline]
         [<00000000aab08a47>] sock_sendmsg+0x54/0x70 net/socket.c:657
         [<000000004cb7c11d>] ___sys_sendmsg+0x393/0x3c0 net/socket.c:2311
         [<00000000c4901c63>] __sys_sendmsg+0x80/0xf0 net/socket.c:2356
    
    BUG: memory leak
    unreferenced object 0xffff8881228ca500 (size 128):
       comm "syz-executor032", pid 7015, jiffies 4294944622 (age 7.880s)
       hex dump (first 32 bytes):
         00 f0 27 18 81 88 ff ff 80 ac 8c 22 81 88 ff ff  ..'........"....
         40 b7 23 17 81 88 ff ff 00 00 00 00 00 00 00 00  @.#.............
       backtrace:
         [<000000000eb78212>] kmemleak_alloc_recursive  include/linux/kmemleak.h:43 [inline]
         [<000000000eb78212>] slab_post_alloc_hook mm/slab.h:522 [inline]
         [<000000000eb78212>] slab_alloc mm/slab.c:3319 [inline]
         [<000000000eb78212>] kmem_cache_alloc_trace+0x145/0x2c0 mm/slab.c:3548
         [<00000000006ea6c6>] kmalloc include/linux/slab.h:552 [inline]
         [<00000000006ea6c6>] kzalloc include/linux/slab.h:748 [inline]
         [<00000000006ea6c6>] ovs_vport_alloc+0x37/0xf0  net/openvswitch/vport.c:130
         [<00000000f9a04a7d>] internal_dev_create+0x24/0x1d0  net/openvswitch/vport-internal_dev.c:164
         [<0000000056ee7c13>] ovs_vport_add+0x81/0x190  net/openvswitch/vport.c:199
         [<000000005434efc7>] new_vport+0x19/0x80 net/openvswitch/datapath.c:194
         [<00000000b7b253f1>] ovs_dp_cmd_new+0x22f/0x410  net/openvswitch/datapath.c:1614
         [<00000000e0988518>] genl_family_rcv_msg+0x2ab/0x5b0  net/netlink/genetlink.c:629
         [<00000000d0cc9347>] genl_rcv_msg+0x54/0x9c net/netlink/genetlink.c:654
         [<000000006694b647>] netlink_rcv_skb+0x61/0x170  net/netlink/af_netlink.c:2477
         [<0000000088381f37>] genl_rcv+0x29/0x40 net/netlink/genetlink.c:665
         [<00000000dad42a47>] netlink_unicast_kernel  net/netlink/af_netlink.c:1302 [inline]
         [<00000000dad42a47>] netlink_unicast+0x1ec/0x2d0  net/netlink/af_netlink.c:1328
         [<0000000067e6b079>] netlink_sendmsg+0x270/0x480  net/netlink/af_netlink.c:1917
         [<00000000aab08a47>] sock_sendmsg_nosec net/socket.c:637 [inline]
         [<00000000aab08a47>] sock_sendmsg+0x54/0x70 net/socket.c:657
         [<000000004cb7c11d>] ___sys_sendmsg+0x393/0x3c0 net/socket.c:2311
         [<00000000c4901c63>] __sys_sendmsg+0x80/0xf0 net/socket.c:2356
         [<00000000c10abb2d>] __do_sys_sendmsg net/socket.c:2365 [inline]
         [<00000000c10abb2d>] __se_sys_sendmsg net/socket.c:2363 [inline]
         [<00000000c10abb2d>] __x64_sys_sendmsg+0x23/0x30 net/socket.c:2363
    =====================================================================
    
    The function in net core, register_netdevice(), may fail with vport's
    destruction callback either invoked or not. After commit 309b66970ee2
    ("net: openvswitch: do not free vport if register_netdevice() is failed."),
    the duty to destroy vport is offloaded from the driver OTOH, which ends
    up in the memory leak reported.
    
    It is fixed by releasing vport unless device is registered successfully.
    To do that, the callback assignment is defered until device is registered.
    
    Reported-by: syzbot+13210896153522fe1ee5@syzkaller.appspotmail.com
    Fixes: 309b66970ee2 ("net: openvswitch: do not free vport if register_netdevice() is failed.")
    Cc: Taehee Yoo <ap420073@gmail.com>
    Cc: Greg Rose <gvrose8192@gmail.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Hillf Danton <hdanton@sina.com>
    Acked-by: Pravin B Shelar <pshelar@ovn.org>
    [sbrivio: this was sent to dev@openvswitch.org and never made its way
     to netdev -- resending original patch]
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: Greg Rose <gvrose8192@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fd8ecf10b9cf44efc6d70791df3e1857598fb76
Author: yuqi jin <jinyuqi@huawei.com>
Date:   Mon Oct 21 11:27:34 2019 +0800

    net: stmmac: Fix the problem of tso_xmit
    
    [ Upstream commit 34c15202896d11e3974788daf9005a84ec45f7a2 ]
    
    When the address width of DMA is greater than 32, the packet header occupies
    a BD descriptor. The starting address of the data should be added to the
    header length.
    
    Fixes: a993db88d17d ("net: stmmac: Enable support for > 32 Bits addressing in XGMAC")
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Jose Abreu <joabreu@synopsys.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Signed-off-by: yuqi jin <jinyuqi@huawei.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddb34ab36bad09885de9dad21e74b9b80b3c324c
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Oct 22 15:57:23 2019 +0200

    bpf: Fix use after free in subprog's jited symbol removal
    
    [ Upstream commit cd7455f1013ef96d5cbf5c05d2b7c06f273810a6 ]
    
    syzkaller managed to trigger the following crash:
    
      [...]
      BUG: unable to handle page fault for address: ffffc90001923030
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD aa551067 P4D aa551067 PUD aa552067 PMD a572b067 PTE 80000000a1173163
      Oops: 0000 [#1] PREEMPT SMP KASAN
      CPU: 0 PID: 7982 Comm: syz-executor912 Not tainted 5.4.0-rc3+ #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      RIP: 0010:bpf_jit_binary_hdr include/linux/filter.h:787 [inline]
      RIP: 0010:bpf_get_prog_addr_region kernel/bpf/core.c:531 [inline]
      RIP: 0010:bpf_tree_comp kernel/bpf/core.c:600 [inline]
      RIP: 0010:__lt_find include/linux/rbtree_latch.h:115 [inline]
      RIP: 0010:latch_tree_find include/linux/rbtree_latch.h:208 [inline]
      RIP: 0010:bpf_prog_kallsyms_find kernel/bpf/core.c:674 [inline]
      RIP: 0010:is_bpf_text_address+0x184/0x3b0 kernel/bpf/core.c:709
      [...]
      Call Trace:
       kernel_text_address kernel/extable.c:147 [inline]
       __kernel_text_address+0x9a/0x110 kernel/extable.c:102
       unwind_get_return_address+0x4c/0x90 arch/x86/kernel/unwind_frame.c:19
       arch_stack_walk+0x98/0xe0 arch/x86/kernel/stacktrace.c:26
       stack_trace_save+0xb6/0x150 kernel/stacktrace.c:123
       save_stack mm/kasan/common.c:69 [inline]
       set_track mm/kasan/common.c:77 [inline]
       __kasan_kmalloc+0x11c/0x1b0 mm/kasan/common.c:510
       kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:518
       slab_post_alloc_hook mm/slab.h:584 [inline]
       slab_alloc mm/slab.c:3319 [inline]
       kmem_cache_alloc+0x1f5/0x2e0 mm/slab.c:3483
       getname_flags+0xba/0x640 fs/namei.c:138
       getname+0x19/0x20 fs/namei.c:209
       do_sys_open+0x261/0x560 fs/open.c:1091
       __do_sys_open fs/open.c:1115 [inline]
       __se_sys_open fs/open.c:1110 [inline]
       __x64_sys_open+0x87/0x90 fs/open.c:1110
       do_syscall_64+0xf7/0x1c0 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [...]
    
    After further debugging it turns out that we walk kallsyms while in parallel
    we tear down a BPF program which contains subprograms that have been JITed
    though the program itself has not been fully exposed and is eventually bailing
    out with error.
    
    The bpf_prog_kallsyms_del_subprogs() in bpf_prog_load()'s error path removes
    the symbols, however, bpf_prog_free() tears down the JIT memory too early via
    scheduled work. Instead, it needs to properly respect RCU grace period as the
    kallsyms walk for BPF is under RCU.
    
    Fix it by refactoring __bpf_prog_put()'s tear down and reuse it in our error
    path where we defer final destruction when we have subprogs in the program.
    
    Fixes: 7d1982b4e335 ("bpf: fix panic in prog load calls cleanup")
    Fixes: 1c2a088a6626 ("bpf: x64: add JIT support for multi-function programs")
    Reported-by: syzbot+710043c5d1d5b5013bc7@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Tested-by: syzbot+710043c5d1d5b5013bc7@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/bpf/55f6367324c2d7e9583fa9ccf5385dcbba0d7a6e.1571752452.git.daniel@iogearbox.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c18bcfc793a30dada2b8343b9b5a3fc70c742de
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Oct 11 16:34:19 2019 +0300

    RDMA/uverbs: Prevent potential underflow
    
    [ Upstream commit a9018adfde809d44e71189b984fa61cc89682b5e ]
    
    The issue is in drivers/infiniband/core/uverbs_std_types_cq.c in the
    UVERBS_HANDLER(UVERBS_METHOD_CQ_CREATE) function.  We check that:
    
            if (attr.comp_vector >= attrs->ufile->device->num_comp_vectors) {
    
    But we don't check if "attr.comp_vector" is negative.  It could
    potentially lead to an array underflow.  My concern would be where
    cq->vector is used in the create_cq() function from the cxgb4 driver.
    
    And really "attr.comp_vector" is appears as a u32 to user space so that's
    the right type to use.
    
    Fixes: 9ee79fce3642 ("IB/core: Add completion queue (cq) object actions")
    Link: https://lore.kernel.org/r/20191011133419.GA22905@mwanda
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40e8486c143eeaae6f7b7e3454e2f4e0e628801b
Author: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date:   Fri Oct 18 14:11:25 2019 +0300

    ARC: [plat-hsdk]: Enable on-board SPI NOR flash IC
    
    [ Upstream commit 8ca8fa7f22dcb0a3265490a690b0c3e27de681f9 ]
    
    HSDK board has sst26wf016b SPI NOR flash IC installed, enable it.
    
    Acked-by: Alexey Brodkin <abrodkin@synopsys.com>
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24665ff0d06a6bdf3e9abe1b558d1efb38c38c33
Author: Avri Altman <avri.altman@wdc.com>
Date:   Thu Oct 10 11:31:07 2019 +0300

    scsi: ufs-bsg: Wake the device before sending raw upiu commands
    
    [ Upstream commit 74e5e468b664d3739b2872d54764af97ac38e795 ]
    
    The scsi async probe process is calling blk_pm_runtime_init for each lun,
    and then those request queues are monitored by the block layer pm
    engine (blk-pm.c).  This is however, not the case for scsi-passthrough
    queues, created by bsg_setup_queue().
    
    So the ufs-bsg driver might send various commands, disregarding the pm
    status of the device. This is wrong, regardless if its request queue is
    pm-aware or not.
    
    Fixes: df032bf27a41 (scsi: ufs: Add a bsg endpoint that supports UPIUs)
    Link: https://lore.kernel.org/r/1570696267-8487-1-git-send-email-avri.altman@wdc.com
    Reported-by: Yuliy Izrailov <yuliy.izrailov@wdc.com>
    Signed-off-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7153621da5cd0dc1be00fb5caa63e24d18782914
Author: Daniel Wagner <dwagner@suse.de>
Date:   Fri Oct 18 18:21:11 2019 +0200

    scsi: lpfc: Check queue pointer before use
    
    [ Upstream commit 535fb49e730a6fe1e9f11af4ae67ef4228ff4287 ]
    
    The queue pointer might not be valid. The rest of the code checks the
    pointer before accessing it. lpfc_sli4_process_missed_mbox_completions is
    the only place where the check is missing.
    
    Fixes: 657add4e5e15 ("scsi: lpfc: Fix poor use of hardware queues if fewer irq vectors")
    Cc: James Smart <jsmart2021@gmail.com>
    Link: https://lore.kernel.org/r/20191018162111.8798-1-dwagner@suse.de
    Signed-off-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cce90d648943e311e4d06f15a35e754c5f53914f
Author: Hannes Reinecke <hare@suse.com>
Date:   Fri Oct 18 16:04:58 2019 +0200

    scsi: qla2xxx: fixup incorrect usage of host_byte
    
    [ Upstream commit 66cf50e65b183c863825f5c28a818e3f47a72e40 ]
    
    DRIVER_ERROR is a a driver byte setting, not a host byte.  The qla2xxx
    driver should rather return DID_ERROR here to be in line with the other
    drivers.
    
    Link: https://lore.kernel.org/r/20191018140458.108278-1-hare@suse.de
    Signed-off-by: Hannes Reinecke <hare@suse.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 690a68940a8ba50fd4bbae6976d181039a83547c
Author: Jiri Benc <jbenc@redhat.com>
Date:   Fri Oct 18 14:00:42 2019 +0200

    selftests/bpf: More compatible nc options in test_tc_edt
    
    [ Upstream commit 11875ba7f251c52effb2b924e04c2ddefa9856ef ]
    
    Out of the three nc implementations widely in use, at least two (BSD netcat
    and nmap-ncat) do not support -l combined with -s. Modify the nc invocation
    to be accepted by all of them.
    
    Fixes: 7df5e3db8f63 ("selftests: bpf: tc-bpf flow shaping with EDT")
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Peter Oskolkov <posk@google.com>
    Link: https://lore.kernel.org/bpf/f5bf07dccd8b552a76c84d49e80b86c5aa071122.1571400024.git.jbenc@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38dc6b5959af978740b50a50ca229f73f701b578
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Fri Sep 27 17:37:28 2019 -0500

    net/mlx5: fix memory leak in mlx5_fw_fatal_reporter_dump
    
    [ Upstream commit c7ed6d0183d5ea9bc31bcaeeba4070bd62546471 ]
    
    In mlx5_fw_fatal_reporter_dump if mlx5_crdump_collect fails the
    allocated memory for cr_data must be released otherwise there will be
    memory leak. To fix this, this commit changes the return instruction
    into goto error handling.
    
    Fixes: 9b1f29823605 ("net/mlx5: Add support for FW fatal reporter dump")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 666adb04e4f98a073017e9b3f5a0483a326b9587
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Tue Sep 24 22:20:34 2019 -0500

    net/mlx5: prevent memory leak in mlx5_fpga_conn_create_cq
    
    [ Upstream commit c8c2a057fdc7de1cd16f4baa51425b932a42eb39 ]
    
    In mlx5_fpga_conn_create_cq if mlx5_vector2eqn fails the allocated
    memory should be released.
    
    Fixes: 537a50574175 ("net/mlx5: FPGA, Add high-speed connection routines")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e24313f70e789166ff8e64fd8ce6ff4591dc742
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Tue Sep 24 11:29:09 2019 +0300

    net/mlx5e: TX, Fix consumer index of error cqe dump
    
    [ Upstream commit 61ea02d2c13106116c6e4916ac5d9dd41151c959 ]
    
    The completion queue consumer index increments upon a call to
    mlx5_cqwq_pop().
    When dumping an error CQE, the index is already incremented.
    Decrease one for the print command.
    
    Fixes: 16cc14d81733 ("net/mlx5e: Dump xmit error completions")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bf82947c2a79aef7e561ce654b276d753a05483
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Wed Sep 18 13:45:38 2019 +0300

    net/mlx5e: kTLS, Release reference on DUMPed fragments in shutdown flow
    
    [ Upstream commit 2c559361389b452ca23494080d0c65ab812706c1 ]
    
    A call to kTLS completion handler was missing in the TXQSQ release
    flow. Add it.
    
    Fixes: d2ead1f360e8 ("net/mlx5e: Add kTLS TX HW offload support")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0dc9c29cfad04129fcc33af89fa274941d8c61d8
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon Sep 16 17:43:33 2019 +0300

    net/mlx5e: Tx, Fix assumption of single WQEBB of NOP in cleanup flow
    
    [ Upstream commit 0c258dec8d98af15b34dbffdb89c008b6da01ff8 ]
    
    Cited patch removed the assumption only in datapath.
    Here we remove it also form control/cleanup flow.
    
    Fixes: 9ab0233728ca ("net/mlx5e: Tx, Don't implicitly assume SKB-less wqe has one WQEBB")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40599d1a46afc43a340b8f5aa1659dafedc47fd1
Author: Parav Pandit <parav@mellanox.com>
Date:   Wed Oct 2 15:17:50 2019 +0300

    IB/core: Use rdma_read_gid_l2_fields to compare GID L2 fields
    
    [ Upstream commit 777a8b32bc0f9bb25848a025f72a9febc30d9033 ]
    
    Current code tries to derive VLAN ID and compares it with GID
    attribute for matching entry. This raw search fails on macvlan
    netdevice as its not a VLAN device, but its an upper device of a VLAN
    netdevice.
    
    Due to this limitation, incoming QP1 packets fail to match in the
    GID table. Such packets are dropped.
    
    Hence, to support it, use the existing rdma_read_gid_l2_fields()
    that takes care of diffferent device types.
    
    Fixes: dbf727de7440 ("IB/core: Use GID table in AH creation and dmac resolution")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Link: https://lore.kernel.org/r/20191002121750.17313-1-leon@kernel.org
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a3cf2bc157d63918d28a98f149c4087b60d871e
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Tue Oct 8 00:07:30 2019 +0300

    RDMA/qedr: Fix reported firmware version
    
    [ Upstream commit b806c94ee44e53233b8ce6c92d9078d9781786a5 ]
    
    Remove spaces from the reported firmware version string.
    Actual value:
    $ cat /sys/class/infiniband/qedr0/fw_ver
    8. 37. 7. 0
    
    Expected value:
    $ cat /sys/class/infiniband/qedr0/fw_ver
    8.37.7.0
    
    Fixes: ec72fce401c6 ("qedr: Add support for RoCE HW init")
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Acked-by: Michal Kalderon <michal.kalderon@marvell.com>
    Link: https://lore.kernel.org/r/20191007210730.7173-1-kamalheib1@gmail.com
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddf04b2db94fda7e8f5bbacb091be05eb2fef757
Author: Krishnamraju Eraparaju <krishna2@chelsio.com>
Date:   Mon Oct 7 16:12:29 2019 +0530

    RDMA/siw: free siw_base_qp in kref release routine
    
    [ Upstream commit e17fa5c95ef2434a08e0be217969d246d037f0c2 ]
    
    As siw_free_qp() is the last routine to access 'siw_base_qp' structure,
    freeing this structure early in siw_destroy_qp() could cause
    touch-after-free issue.
    Hence, moved kfree(siw_base_qp) from siw_destroy_qp() to siw_free_qp().
    
    Fixes: 303ae1cdfdf7 ("rdma/siw: application interface")
    Signed-off-by: Krishnamraju Eraparaju <krishna2@chelsio.com>
    Link: https://lore.kernel.org/r/20191007104229.29412-1-krishna2@chelsio.com
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9156df7660a555b6684162221d4f8af1f2483ce
Author: Potnuri Bharat Teja <bharat@chelsio.com>
Date:   Thu Oct 3 16:13:53 2019 +0530

    iw_cxgb4: fix ECN check on the passive accept
    
    [ Upstream commit 612e0486ad0845c41ac10492e78144f99e326375 ]
    
    pass_accept_req() is using the same skb for handling accept request and
    sending accept reply to HW. Here req and rpl structures are pointing to
    same skb->data which is over written by INIT_TP_WR() and leads to
    accessing corrupt req fields in accept_cr() while checking for ECN flags.
    Reordered code in accept_cr() to fetch correct req fields.
    
    Fixes: 92e7ae7172 ("iw_cxgb4: Choose appropriate hw mtu index and ISS for iWARP connections")
    Signed-off-by: Potnuri Bharat Teja <bharat@chelsio.com>
    Link: https://lore.kernel.org/r/20191003104353.11590-1-bharat@chelsio.com
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc3eef2144b4f560ad7d5f1761f5c11c0d40ee73
Author: Rafi Wiener <rafiw@mellanox.com>
Date:   Wed Oct 2 15:02:43 2019 +0300

    RDMA/mlx5: Clear old rate limit when closing QP
    
    [ Upstream commit c8973df2da677f375f8b12b6eefca2f44c8884d5 ]
    
    Before QP is closed it changes to ERROR state, when this happens
    the QP was left with old rate limit that was already removed from
    the table.
    
    Fixes: 7d29f349a4b9 ("IB/mlx5: Properly adjust rate limit on QP state transitions")
    Signed-off-by: Rafi Wiener <rafiw@mellanox.com>
    Signed-off-by: Oleg Kuporosov <olegk@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Link: https://lore.kernel.org/r/20191002120243.16971-1-leon@kernel.org
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b7811ded97635032c26bab49de36048c2c5f2b5
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Mon Oct 14 16:51:28 2019 +0000

    powerpc/32s: fix allow/prevent_user_access() when crossing segment boundaries.
    
    [ Upstream commit d10f60ae27d26d811e2a1bb39ded47df96d7499f ]
    
    Make sure starting addr is aligned to segment boundary so that when
    incrementing the segment, the starting address of the new segment is
    below the end address. Otherwise the last segment might get  missed.
    
    Fixes: a68c31fc01ef ("powerpc/32s: Implement Kernel Userspace Access Protection")
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/067a1b09f15f421d40797c2d04c22d4049a1cee8.1571071875.git.christophe.leroy@c-s.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21c3168b7332ed657974d0edcedee8278b38687c
Author: Zhang Lixu <lixu.zhang@intel.com>
Date:   Wed Oct 16 08:15:59 2019 +0800

    HID: intel-ish-hid: fix wrong error handling in ishtp_cl_alloc_tx_ring()
    
    [ Upstream commit 16ff7bf6dbcc6f77d2eec1ac9120edf44213c2f1 ]
    
    When allocating tx ring buffers failed, should free tx buffers, not rx buffers.
    
    Signed-off-by: Zhang Lixu <lixu.zhang@intel.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 339ff30eb7b82fec239fd466e215303974ac4867
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Oct 9 17:11:30 2019 +0800

    dmaengine: sprd: Fix the possible memory leak issue
    
    [ Upstream commit ec1ac309596a7bdf206743b092748205f6cd5720 ]
    
    If we terminate the channel to free all descriptors associated with this
    channel, we will leak the memory of current descriptor if the current
    descriptor is not completed, since it had been deteled from the desc_issued
    list and have not been added into the desc_completed list.
    
    Thus we should check if current descriptor is completed or not, when freeing
    the descriptors associated with one channel, if not, we should free it to
    avoid this issue.
    
    Fixes: 9b3b8171f7f4 ("dmaengine: sprd: Add Spreadtrum DMA driver")
    Reported-by: Zhenfang Wang <zhenfang.wang@unisoc.com>
    Tested-by: Zhenfang Wang <zhenfang.wang@unisoc.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Link: https://lore.kernel.org/r/170dbbc6d5366b6fa974ce2d366652e23a334251.1570609788.git.baolin.wang@linaro.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aba285e5f5ca7f14d24aa0ecdc88a5179c54be27
Author: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
Date:   Thu Sep 26 16:20:58 2019 +0530

    dmaengine: xilinx_dma: Fix control reg update in vdma_channel_set_config
    
    [ Upstream commit 6c6de1ddb1be3840f2ed5cc9d009a622720940c9 ]
    
    In vdma_channel_set_config clear the delay, frame count and master mask
    before updating their new values. It avoids programming incorrect state
    when input parameters are different from default.
    
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Acked-by: Appana Durga Kedareswara rao <appana.durga.rao@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Link: https://lore.kernel.org/r/1569495060-18117-3-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc97c00f9d987de6e97c36ed8eb24133e9df3696
Author: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
Date:   Thu Sep 26 16:20:57 2019 +0530

    dmaengine: xilinx_dma: Fix 64-bit simple AXIDMA transfer
    
    [ Upstream commit 68fe2b520cee829ed518b4b1f64d2a557bcbffe1 ]
    
    In AXI DMA simple mode also pass MSB bits of source and destination
    address to xilinx_write function. It fixes simple AXI DMA operation
    mode using 64-bit addressing.
    
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1569495060-18117-2-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84cc17f40d1f4cd9ca821295a48d190e178200f1
Author: Jiri Benc <jbenc@redhat.com>
Date:   Wed Oct 9 10:31:24 2019 +0200

    bpf: lwtunnel: Fix reroute supplying invalid dst
    
    [ Upstream commit 9e8acd9c44a0dd52b2922eeb82398c04e356c058 ]
    
    The dst in bpf_input() has lwtstate field set. As it is of the
    LWTUNNEL_ENCAP_BPF type, lwtstate->data is struct bpf_lwt. When the bpf
    program returns BPF_LWT_REROUTE, ip_route_input_noref is directly called on
    this skb. This causes invalid memory access, as ip_route_input_slow calls
    skb_tunnel_info(skb) that expects the dst->lwstate->data to be
    struct ip_tunnel_info. This results to struct bpf_lwt being accessed as
    struct ip_tunnel_info.
    
    Drop the dst before calling the IP route input functions (both for IPv4 and
    IPv6).
    
    Reported by KASAN.
    
    Fixes: 3bd0b15281af ("bpf: add handling of BPF_LWT_REROUTE to lwt_bpf.c")
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Peter Oskolkov <posk@google.com>
    Link: https://lore.kernel.org/bpf/111664d58fe4e9dd9c8014bb3d0b2dab93086a9e.1570609794.git.jbenc@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd75b8300a76962bf4064c9ae1f9e3fc9d5cdde7
Author: Zhenfang Wang <zhenfang.wang@unisoc.com>
Date:   Thu Sep 12 13:47:18 2019 +0800

    dmaengine: sprd: Fix the link-list pointer register configuration issue
    
    [ Upstream commit 8b6bc5fd71e677864d1a3b896b3069a6e0c5e214 ]
    
    We will set the link-list pointer register point to next link-list
    configuration's physical address, which can load DMA configuration
    from the link-list node automatically.
    
    But the link-list node's physical address can be larger than 32bits,
    and now Spreadtrum DMA driver only supports 32bits physical address,
    which may cause loading a incorrect DMA configuration when starting
    the link-list transfer mode. According to the DMA datasheet, we can
    use SRC_BLK_STEP register (bit28 - bit31) to save the high bits of the
    link-list node's physical address to fix this issue.
    
    Fixes: 4ac695464763 ("dmaengine: sprd: Support DMA link-list mode")
    Signed-off-by: Zhenfang Wang <zhenfang.wang@unisoc.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Link: https://lore.kernel.org/r/eadfe9295499efa003e1c344e67e2890f9d1d780.1568267061.git.baolin.wang@linaro.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa2177d1b22bc396a6c568146aa6d89479f8fd81
Author: Nicolas Boichat <drinkcat@chromium.org>
Date:   Thu Oct 3 11:17:59 2019 +0800

    HID: google: add magnemite/masterball USB ids
    
    [ Upstream commit 9e4dbc4646a84b2562ea7c64a542740687ff7daf ]
    
    Add 2 additional hammer-like devices.
    
    Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d18c267df63f4f5cb227af0e7e4c23b311ad89a
Author: Suwan Kim <suwan.kim027@gmail.com>
Date:   Wed Aug 28 12:27:41 2019 +0900

    usbip: Implement SG support to vhci-hcd and stub driver
    
    commit ea44d190764b4422af4d1c29eaeb9e69e353b406 upstream.
    
    There are bugs on vhci with usb 3.0 storage device. In USB, each SG
    list entry buffer should be divisible by the bulk max packet size.
    But with native SG support, this problem doesn't matter because the
    SG buffer is treated as contiguous buffer. But without native SG
    support, USB storage driver breaks SG list into several URBs and the
    error occurs because of a buffer size of URB that cannot be divided
    by the bulk max packet size. The error situation is as follows.
    
    When USB Storage driver requests 31.5 KB data and has SG list which
    has 3584 bytes buffer followed by 7 4096 bytes buffer for some
    reason. USB Storage driver splits this SG list into several URBs
    because VHCI doesn't support SG and sends them separately. So the
    first URB buffer size is 3584 bytes. When receiving data from device,
    USB 3.0 device sends data packet of 1024 bytes size because the max
    packet size of BULK pipe is 1024 bytes. So device sends 4096 bytes.
    But the first URB buffer has only 3584 bytes buffer size. So host
    controller terminates the transfer even though there is more data to
    receive. So, vhci needs to support SG transfer to prevent this error.
    
    In this patch, vhci supports SG regardless of whether the server's
    host controller supports SG or not, because stub driver splits SG
    list into several URBs if the server's host controller doesn't
    support SG.
    
    To support SG, vhci sets URB_DMA_MAP_SG flag in urb->transfer_flags
    if URB has SG list and this flag will tell stub driver to use SG
    list. After receiving urb from stub driver, vhci clear URB_DMA_MAP_SG
    flag to avoid unnecessary DMA unmapping in HCD.
    
    vhci sends each SG list entry to stub driver. Then, stub driver sees
    the total length of the buffer and allocates SG table and pages
    according to the total buffer length calling sgl_alloc(). After stub
    driver receives completed URB, it again sends each SG list entry to
    vhci.
    
    If the server's host controller doesn't support SG, stub driver
    breaks a single SG request into several URBs and submits them to
    the server's host controller. When all the split URBs are completed,
    stub driver reassembles the URBs into a single return command and
    sends it to vhci.
    
    Moreover, in the situation where vhci supports SG, but stub driver
    does not, or vice versa, usbip works normally. Because there is no
    protocol modification, there is no problem in communication between
    server and client even if the one has a kernel without SG support.
    
    In the case of vhci supports SG and stub driver doesn't, because
    vhci sends only the total length of the buffer to stub driver as
    it did before the patch applied, stub driver only needs to allocate
    the required length of buffers using only kmalloc() regardless of
    whether vhci supports SG or not. But stub driver has to allocate
    buffer with kmalloc() as much as the total length of SG buffer which
    is quite huge when vhci sends SG request, so it has overhead in
    buffer allocation in this situation.
    
    If stub driver needs to send data buffer to vhci because of IN pipe,
    stub driver also sends only total length of buffer as metadata and
    then sends real data as vhci does. Then vhci receive data from stub
    driver and store it to the corresponding buffer of SG list entry.
    
    And for the case of stub driver supports SG and vhci doesn't, since
    the USB storage driver checks that vhci doesn't support SG and sends
    the request to stub driver by splitting the SG list into multiple
    URBs, stub driver allocates a buffer for each URB with kmalloc() as
    it did before this patch.
    
    * Test environment
    
    Test uses two difference machines and two different kernel version
    to make mismatch situation between the client and the server where
    vhci supports SG, but stub driver does not, or vice versa. All tests
    are conducted in both full SG support that both vhci and stub support
    SG and half SG support that is the mismatch situation. Test kernel
    version is 5.3-rc6 with commit "usb: add a HCD_DMA flag instead of
    guestimating DMA capabilities" to avoid unnecessary DMA mapping and
    unmapping.
    
     - Test kernel version
        - 5.3-rc6 with SG support
        - 5.1.20-200.fc29.x86_64 without SG support
    
    * SG support test
    
     - Test devices
        - Super-speed storage device - SanDisk Ultra USB 3.0
        - High-speed storage device - SMI corporation USB 2.0 flash drive
    
     - Test description
    
    Test read and write operation of mass storage device that uses the
    BULK transfer. In test, the client reads and writes files whose size
    is over 1G and it works normally.
    
    * Regression test
    
     - Test devices
        - Super-speed device - Logitech Brio webcam
        - High-speed device  - Logitech C920 HD Pro webcam
        - Full-speed device  - Logitech bluetooth mouse
                             - Britz BR-Orion speaker
        - Low-speed device   - Logitech wired mouse
    
     - Test description
    
    Moving and click test for mouse. To test the webcam, use gnome-cheese.
    To test the speaker, play music and video on the client. All works
    normally.
    
    * VUDC compatibility test
    
    VUDC also works well with this patch. Tests are done with two USB
    gadget created by CONFIGFS USB gadget. Both use the BULK pipe.
    
            1. Serial gadget
            2. Mass storage gadget
    
     - Serial gadget test
    
    Serial gadget on the host sends and receives data using cat command
    on the /dev/ttyGS<N>. The client uses minicom to communicate with
    the serial gadget.
    
     - Mass storage gadget test
    
    After connecting the gadget with vhci, use "dd" to test read and
    write operation on the client side.
    
    Read  - dd if=/dev/sd<N> iflag=direct of=/dev/null bs=1G count=1
    Write - dd if=<my file path> iflag=direct of=/dev/sd<N> bs=1G count=1
    
    Signed-off-by: Suwan Kim <suwan.kim027@gmail.com>
    Acked-by: Shuah khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20190828032741.12234-1-suwan.kim027@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2f49f58b40e1680650bc36f9b5d3de626f57b09
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Oct 22 17:45:14 2019 +0200

    ALSA: usb-audio: Fix copy&paste error in the validator
    
    commit ba8bf0967a154796be15c4983603aad0b05c3138 upstream.
    
    The recently introduced USB-audio descriptor validator had a stupid
    copy&paste error that may lead to an unexpected overlook of too short
    descriptors for processing and extension units.  It's likely the cause
    of the report triggered by syzkaller fuzzer.  Let's fix it.
    
    Fixes: 57f8770620e9 ("ALSA: usb-audio: More validations of descriptor units")
    Reported-by: syzbot+0620f79a1978b1133fd7@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/s5hsgnkdbsl.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa07532bc86bd94b7cdafd3042d3e268a34f4cbe
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Aug 26 16:45:50 2019 +0300

    ALSA: usb-audio: remove some dead code
    
    commit b39e077fcb283dd96dd251a3abeba585402c61fe upstream.
    
    We recently cleaned up the error handling in commit 52c3e317a857 ("ALSA:
    usb-audio: Unify the release of usb_mixer_elem_info objects") but
    accidentally left this stray return.
    
    Fixes: 52c3e317a857 ("ALSA: usb-audio: Unify the release of usb_mixer_elem_info objects")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee3f9007c2e85ee99c5efb2a8a4da60c2b758d7a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Aug 26 13:55:21 2019 +0200

    ALSA: usb-audio: Fix possible NULL dereference at create_yamaha_midi_quirk()
    
    commit 60849562a5db4a1eee2160167e4dce4590d3eafe upstream.
    
    The previous addition of descriptor validation may lead to a NULL
    dereference at create_yamaha_midi_quirk() when either injd or outjd is
    NULL.  Add proper non-NULL checks.
    
    Fixes: 57f8770620e9 ("ALSA: usb-audio: More validations of descriptor units")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c07240f4150bb16193d1fd977f702671cf3d1ff3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Aug 23 12:38:07 2019 +0200

    ALSA: usb-audio: Clean up check_input_term()
    
    commit e0ccdef92653f8867e2d1667facfd3c23699f540 upstream.
    
    The primary changes in this patch are cleanups of __check_input_term()
    and move to a non-nested switch-case block by evaluating the pair of
    UAC version and the unit type, as we've done for parse_audio_unit().
    Also each parser is split into the function for readability.
    
    Now, a slight behavior change by this cleanup is the handling of
    processing and extension units.  Formerly we've dealt with them
    differently between UAC1/2 and UAC3; the latter returns an error if no
    input sources are available, while the former continues to parse.
    
    In this patch, unify the behavior in all cases: when input sources are
    available, it parses recursively, then override the type and the id,
    as well as channel information if not provided yet.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b17a13b687ae99939dc94a4ae01fbc34f68decc
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Aug 22 09:25:27 2019 +0200

    ALSA: usb-audio: Remove superfluous bLength checks
    
    commit b8e4f1fdfa422398c2d6c47bfb7d1feb3046d70a upstream.
    
    Now that we got the more comprehensive validation code for USB-audio
    descriptors, the check of overflow in each descriptor unit parser
    became superfluous.  Drop some of the obvious cases.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcf43f13ca33daa2196d5570c1b8416c62e982a5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Aug 22 08:23:10 2019 +0200

    ALSA: usb-audio: Unify the release of usb_mixer_elem_info objects
    
    commit 52c3e317a857091fd746e15179a637f32be4d337 upstream.
    
    Instead of the direct kfree() calls, introduce a new local helper to
    release the usb_mixer_elem_info object.  This will be extended to do
    more than a single kfree() in the later patches.
    
    Also, use the standard goto instead of multiple calls in
    parse_audio_selector_unit() error paths.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09400c7b28fd9f665dd8592df60604e376fb9cd8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Aug 15 16:30:39 2019 +0200

    ALSA: usb-audio: Simplify parse_audio_unit()
    
    commit 68e9fde245591d18200f8a9054cac22339437adb upstream.
    
    Minor code refactoring by combining the UAC version and the type in
    the switch-case flow, so that we reduce the indentation and
    redundancy.  One good bonus is that the duplicated definition of the
    same type value (e.g. UAC2_EFFECT_UNIT) can be handled more cleanly.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf74a46aebb1b5ab5e5f25bafa4ae0a453ba813a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Aug 20 17:17:09 2019 +0200

    ALSA: usb-audio: More validations of descriptor units
    
    commit 57f8770620e9b51c61089751f0b5ad3dbe376ff2 upstream.
    
    Introduce a new helper to validate each audio descriptor unit before
    and check the unit before actually accessing it.  This should harden
    against the OOB access cases with malformed descriptors that have been
    recently frequently reported by fuzzers.
    
    The existing descriptor checks are still kept although they become
    superfluous after this patch.  They'll be cleaned up eventually
    later.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 858c35c6ad0f049f6c13853b874c59165499f7df
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Aug 3 11:51:18 2019 -0400

    configfs: fix a deadlock in configfs_symlink()
    
    commit 351e5d869e5ac10cb40c78b5f2d7dfc816ad4587 upstream.
    
    Configfs abuses symlink(2).  Unlike the normal filesystems, it
    wants the target resolved at symlink(2) time, like link(2) would've
    done.  The problem is that ->symlink() is called with the parent
    directory locked exclusive, so resolving the target inside the
    ->symlink() is easily deadlocked.
    
    Short of really ugly games in sys_symlink() itself, all we can
    do is to unlock the parent before resolving the target and
    relock it after.  However, that invalidates the checks done
    by the caller of ->symlink(), so we have to
            * check that dentry is still where it used to be
    (it couldn't have been moved, but it could've been unhashed)
            * recheck that it's still negative (somebody else
    might've successfully created a symlink with the same name
    while we were looking the target up)
            * recheck the permissions on the parent directory.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29dd281d2d6c6bf135e2bf8d3bc93f3568668cdd
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 23 10:27:05 2019 +0200

    can: peak_usb: fix slab info leak
    
    commit f7a1337f0d29b98733c8824e165fca3371d7d4fd upstream.
    
    Fix a small slab info leak due to a failure to clear the command buffer
    at allocation.
    
    The first 16 bytes of the command buffer are always sent to the device
    in pcan_usb_send_cmd() even though only the first two may have been
    initialised in case no argument payload is provided (e.g. when waiting
    for a response).
    
    Fixes: bb4785551f64 ("can: usb: PEAK-System Technik USB adapters driver core")
    Cc: stable <stable@vger.kernel.org>     # 3.4
    Reported-by: syzbot+863724e7128e14b26732@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a681359a9c01041282bffeabc23ef1d760dd40da
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 12:29:13 2019 +0200

    can: mcba_usb: fix use-after-free on disconnect
    
    commit 4d6636498c41891d0482a914dd570343a838ad79 upstream.
    
    The driver was accessing its driver data after having freed it.
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Cc: stable <stable@vger.kernel.org>     # 4.12
    Cc: Remigiusz Kołłątaj <remigiusz.kollataj@mobica.com>
    Reported-by: syzbot+e29b17e5042bbc56fae9@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8eed5c83042a0a35c65ca4e605a6bce90be9810
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Sat Sep 28 22:29:05 2019 +0800

    can: dev: add missing of_node_put() after calling of_get_child_by_name()
    
    commit db9ee384f6f71f7c5296ce85b7c1a2a2527e7c72 upstream.
    
    of_node_put() needs to be called when the device node which is got
    from of_get_child_by_name() finished using.
    
    Fixes: 2290aefa2e90 ("can: dev: Add support for limiting configured bitrate")
    Cc: Franklin S Cooper Jr <fcooper@ti.com>
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55b11d219350255d2afef08716bf08821c4486d5
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Sep 19 21:44:38 2019 -0500

    can: gs_usb: gs_can_open(): prevent memory leak
    
    commit fb5be6a7b4863ecc44963bb80ca614584b6c7817 upstream.
    
    In gs_can_open() if usb_submit_urb() fails the allocated urb should be
    released.
    
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 363e780f784da2e704fa2d9bb8ee2347e68ddf5b
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed Oct 9 15:48:48 2019 +0200

    can: rx-offload: can_rx_offload_queue_sorted(): fix error handling, avoid skb mem leak
    
    commit ca913f1ac024559ebc17f0b599af262f0ad997c9 upstream.
    
    If the rx-offload skb_queue is full can_rx_offload_queue_sorted() will
    not queue the skb and return with an error.
    
    None of the callers of this function, issue a kfree_skb() to free the
    not queued skb. This results in a memory leak.
    
    This patch fixes the problem by freeing the skb in case of a full queue.
    The return value is adjusted to -ENOBUFS to better reflect the actual
    problem.
    
    The device stats handling is left to the callers, as this function might
    be used in both the rx and tx path.
    
    Fixes: 55059f2b7f86 ("can: rx-offload: introduce can_rx_offload_get_echo_skb() and can_rx_offload_queue_sorted() functions")
    Cc: linux-stable <stable@vger.kernel.org>
    Cc: Martin Hundebøll <martin@geanix.com>
    Reported-by: Martin Hundebøll <martin@geanix.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7300d0ed2e22d2f0a021b3ee6fcb88e52c21b1d
Author: Stephane Grosjean <s.grosjean@peak-system.com>
Date:   Tue Oct 8 10:35:44 2019 +0200

    can: peak_usb: fix a potential out-of-sync while decoding packets
    
    commit de280f403f2996679e2607384980703710576fed upstream.
    
    When decoding a buffer received from PCAN-USB, the first timestamp read in
    a packet is a 16-bit coded time base, and the next ones are an 8-bit
    offset to this base, regardless of the type of packet read.
    
    This patch corrects a potential loss of synchronization by using a
    timestamp index read from the buffer, rather than an index of received
    data packets, to determine on the sizeof the timestamp to be read from the
    packet being decoded.
    
    Signed-off-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Fixes: 46be265d3388 ("can: usb: PEAK-System Technik PCAN-USB specific part")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0651ea4fc7971f9db6f013cb52973b972461019b
Author: Kurt Van Dijck <dev.kurt@vandijck-laurijssen.be>
Date:   Tue Oct 1 09:40:36 2019 +0200

    can: c_can: c_can_poll(): only read status register after status IRQ
    
    commit 3cb3eaac52c0f145d895f4b6c22834d5f02b8569 upstream.
    
    When the status register is read without the status IRQ pending, the
    chip may not raise the interrupt line for an upcoming status interrupt
    and the driver may miss a status interrupt.
    
    It is critical that the BUSOFF status interrupt is forwarded to the
    higher layers, since no more interrupts will follow without
    intervention.
    
    Thanks to Wolfgang and Joe for bringing up the first idea.
    
    Signed-off-by: Kurt Van Dijck <dev.kurt@vandijck-laurijssen.be>
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Cc: Joe Burmeister <joe.burmeister@devtank.co.uk>
    Fixes: fa39b54ccf28 ("can: c_can: Get rid of pointless interrupts")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52a61a7c2beef59340d83b736c18f055c7ba9d9e
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Thu Aug 15 08:00:26 2019 +0000

    can: flexcan: disable completely the ECC mechanism
    
    commit 5e269324db5adb2f5f6ec9a93a9c7b0672932b47 upstream.
    
    The ECC (memory error detection and correction) mechanism can be
    activated or not, controlled by the ECCDIS bit in CAN_MECR. When
    disabled, updates on indications and reporting registers are stopped.
    So if want to disable ECC completely, had better assert ECCDIS bit, not
    just mask the related interrupts.
    
    Fixes: cdce844865be ("can: flexcan: add vf610 support for FlexCAN")
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 484f18282e87ac2a8932cc3566b560a6c147bf0d
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 12:29:14 2019 +0200

    can: usb_8dev: fix use-after-free on disconnect
    
    commit 3759739426186a924675651b388d1c3963c5710e upstream.
    
    The driver was accessing its driver data after having freed it.
    
    Fixes: 0024d8ad1639 ("can: usb_8dev: Add support for USB2CAN interface from 8 devices")
    Cc: stable <stable@vger.kernel.org>     # 3.9
    Cc: Bernd Krumboeck <b.krumboeck@gmail.com>
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f37d35c165a15e7b0379e1a05968d33d571df308
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Wed Nov 6 13:58:15 2019 -0800

    SMB3: Fix persistent handles reconnect
    
    commit d243af7ab9feb49f11f2c0050d2077e2d9556f9b upstream.
    
    When the client hits a network reconnect, it re-opens every open
    file with a create context to reconnect a persistent handle. All
    create context types should be 8-bytes aligned but the padding
    was missed for that one. As a result, some servers don't allow
    us to reconnect handles and return an error. The problem occurs
    when the problematic context is not at the end of the create
    request packet. Fix this by adding a proper padding at the end
    of the reconnect persistent handle context.
    
    Cc: Stable <stable@vger.kernel.org> # 4.19.x
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcc0bed1d344aa4428467ec494cd11ff4da7de42
Author: Jan Beulich <jbeulich@suse.com>
Date:   Tue Oct 29 10:34:19 2019 +0100

    x86/apic/32: Avoid bogus LDR warnings
    
    commit fe6f85ca121e9c74e7490fe66b0c5aae38e332c3 upstream.
    
    The removal of the LDR initialization in the bigsmp_32 APIC code unearthed
    a problem in setup_local_APIC().
    
    The code checks unconditionally for a mismatch of the logical APIC id by
    comparing the early APIC id which was initialized in get_smp_config() with
    the actual LDR value in the APIC.
    
    Due to the removal of the bogus LDR initialization the check now can
    trigger on bigsmp_32 APIC systems emitting a warning for every booting
    CPU. This is of course a false positive because the APIC is not using
    logical destination mode.
    
    Restrict the check and the possibly resulting fixup to systems which are
    actually using the APIC in logical destination mode.
    
    [ tglx: Massaged changelog and added Cc stable ]
    
    Fixes: bae3a8d3308 ("x86/apic: Do not initialize LDR and DFR for bigsmp")
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/666d8f91-b5a8-1afd-7add-821e72a35f03@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f76565c1d5a6080eee4d5c9493d74b72f17239a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Oct 23 20:05:49 2019 +0200

    x86/dumpstack/64: Don't evaluate exception stacks before setup
    
    commit e361362b08cab1098b64b0e5fd8c879f086b3f46 upstream.
    
    Cyrill reported the following crash:
    
      BUG: unable to handle page fault for address: 0000000000001ff0
      #PF: supervisor read access in kernel mode
      RIP: 0010:get_stack_info+0xb3/0x148
    
    It turns out that if the stack tracer is invoked before the exception stack
    mappings are initialized in_exception_stack() can erroneously classify an
    invalid address as an address inside of an exception stack:
    
        begin = this_cpu_read(cea_exception_stacks);  <- 0
        end = begin + sizeof(exception stacks);
    
    i.e. any address between 0 and end will be considered as exception stack
    address and the subsequent code will then try to derefence the resulting
    stack frame at a non mapped address.
    
     end = begin + (unsigned long)ep->size;
         ==> end = 0x2000
    
     regs = (struct pt_regs *)end - 1;
         ==> regs = 0x2000 - sizeof(struct pt_regs *) = 0x1ff0
    
     info->next_sp   = (unsigned long *)regs->sp;
         ==> Crashes due to accessing 0x1ff0
    
    Prevent this by checking the validity of the cea_exception_stack base
    address and bailing out if it is zero.
    
    Fixes: afcd21dad88b ("x86/dumpstack/64: Use cpu_entry_area instead of orig_ist")
    Reported-by: Cyrill Gorcunov <gorcunov@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Cyrill Gorcunov <gorcunov@gmail.com>
    Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1910231950590.1852@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01e15002a3ab79d82d2cc7f6f1faff0a32c6adcd
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Oct 28 09:06:51 2019 +0200

    intel_th: pci: Add Jasper Lake PCH support
    
    commit 9d55499d8da49e9261e95a490f3fda41d955f505 upstream.
    
    This adds support for Intel TH on Jasper Lake PCH.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191028070651.9770-8-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd3d05f8c5a45ca2d2bfda97c1102395dc45a1a1
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Oct 28 09:06:50 2019 +0200

    intel_th: pci: Add Comet Lake PCH support
    
    commit 3adbb5718dd5264666ddbc2b9b43799d292e9cb6 upstream.
    
    This adds support for Intel TH on Comet Lake PCH.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191028070651.9770-7-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1af578f231039227d0150d912ab4ab699030d367
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Oct 28 09:06:45 2019 +0200

    intel_th: gth: Fix the window switching sequence
    
    commit 87c0b9c79ec136ea76a14a88d675a746bc6a87f9 upstream.
    
    Commit 8116db57cf16 ("intel_th: Add switch triggering support") added
    a trigger assertion of the CTS, but forgot to de-assert it at the end
    of the sequence. This results in window switches randomly not happening.
    
    Fix that by de-asserting the trigger at the end of the window switch
    sequence.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Fixes: 8116db57cf16 ("intel_th: Add switch triggering support")
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191028070651.9770-2-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12de7b98969ad749aadeba381822b86a5226ea57
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Aug 24 17:49:55 2019 +0300

    netfilter: ipset: Fix an error code in ip_set_sockfn_get()
    
    commit 30b7244d79651460ff114ba8f7987ed94c86b99a upstream.
    
    The copy_to_user() function returns the number of bytes remaining to be
    copied.  In this code, that positive return is checked at the end of the
    function and we return zero/success.  What we should do instead is
    return -EFAULT.
    
    Fixes: a7b4f989a629 ("netfilter: ipset: IP set core support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24fa1fd6050600b10c8f91bbdc50ce7a658c316a
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Oct 31 11:06:24 2019 +0100

    netfilter: nf_tables: Align nft_expr private data to 64-bit
    
    commit 250367c59e6ba0d79d702a059712d66edacd4a1a upstream.
    
    Invoking the following commands on a 32-bit architecture with strict
    alignment requirements (such as an ARMv7-based Raspberry Pi) results
    in an alignment exception:
    
     # nft add table ip test-ip4
     # nft add chain ip test-ip4 output { type filter hook output priority 0; }
     # nft add rule  ip test-ip4 output quota 1025 bytes
    
    Alignment trap: not handling instruction e1b26f9f at [<7f4473f8>]
    Unhandled fault: alignment exception (0x001) at 0xb832e824
    Internal error: : 1 [#1] PREEMPT SMP ARM
    Hardware name: BCM2835
    [<7f4473fc>] (nft_quota_do_init [nft_quota])
    [<7f447448>] (nft_quota_init [nft_quota])
    [<7f4260d0>] (nf_tables_newrule [nf_tables])
    [<7f4168dc>] (nfnetlink_rcv_batch [nfnetlink])
    [<7f416bd0>] (nfnetlink_rcv [nfnetlink])
    [<8078b334>] (netlink_unicast)
    [<8078b664>] (netlink_sendmsg)
    [<8071b47c>] (sock_sendmsg)
    [<8071bd18>] (___sys_sendmsg)
    [<8071ce3c>] (__sys_sendmsg)
    [<8071ce94>] (sys_sendmsg)
    
    The reason is that nft_quota_do_init() calls atomic64_set() on an
    atomic64_t which is only aligned to 32-bit, not 64-bit, because it
    succeeds struct nft_expr in memory which only contains a 32-bit pointer.
    Fix by aligning the nft_expr private data to 64-bit.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.13+
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cef6a188b185c14abfd8230df96ad3c010904a32
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Thu Oct 31 12:36:08 2019 +0100

    clone3: validate stack arguments
    
    commit fa729c4df558936b4a1a7b3e2234011f44ede28b upstream.
    
    Validate the stack arguments and setup the stack depening on whether or not
    it is growing down or up.
    
    Legacy clone() required userspace to know in which direction the stack is
    growing and pass down the stack pointer appropriately. To make things more
    confusing microblaze uses a variant of the clone() syscall selected by
    CONFIG_CLONE_BACKWARDS3 that takes an additional stack_size argument.
    IA64 has a separate clone2() syscall which also takes an additional
    stack_size argument. Finally, parisc has a stack that is growing upwards.
    Userspace therefore has a lot nasty code like the following:
    
     #define __STACK_SIZE (8 * 1024 * 1024)
     pid_t sys_clone(int (*fn)(void *), void *arg, int flags, int *pidfd)
     {
             pid_t ret;
             void *stack;
    
             stack = malloc(__STACK_SIZE);
             if (!stack)
                     return -ENOMEM;
    
     #ifdef __ia64__
             ret = __clone2(fn, stack, __STACK_SIZE, flags | SIGCHLD, arg, pidfd);
     #elif defined(__parisc__) /* stack grows up */
             ret = clone(fn, stack, flags | SIGCHLD, arg, pidfd);
     #else
             ret = clone(fn, stack + __STACK_SIZE, flags | SIGCHLD, arg, pidfd);
     #endif
             return ret;
     }
    
    or even crazier variants such as [3].
    
    With clone3() we have the ability to validate the stack. We can check that
    when stack_size is passed, the stack pointer is valid and the other way
    around. We can also check that the memory area userspace gave us is fine to
    use via access_ok(). Furthermore, we probably should not require
    userspace to know in which direction the stack is growing. It is easy
    for us to do this in the kernel and I couldn't find the original
    reasoning behind exposing this detail to userspace.
    
    /* Intentional user visible API change */
    clone3() was released with 5.3. Currently, it is not documented and very
    unclear to userspace how the stack and stack_size argument have to be
    passed. After talking to glibc folks we concluded that trying to change
    clone3() to setup the stack instead of requiring userspace to do this is
    the right course of action.
    Note, that this is an explicit change in user visible behavior we introduce
    with this patch. If it breaks someone's use-case we will revert! (And then
    e.g. place the new behavior under an appropriate flag.)
    Breaking someone's use-case is very unlikely though. First, neither glibc
    nor musl currently expose a wrapper for clone3(). Second, there is no real
    motivation for anyone to use clone3() directly since it does not provide
    features that legacy clone doesn't. New features for clone3() will first
    happen in v5.5 which is why v5.4 is still a good time to try and make that
    change now and backport it to v5.3. Searches on [4] did not reveal any
    packages calling clone3().
    
    [1]: https://lore.kernel.org/r/CAG48ez3q=BeNcuVTKBN79kJui4vC6nw0Bfq6xc-i0neheT17TA@mail.gmail.com
    [2]: https://lore.kernel.org/r/20191028172143.4vnnjpdljfnexaq5@wittgenstein
    [3]: https://github.com/systemd/systemd/blob/5238e9575906297608ff802a27e2ff9effa3b338/src/basic/raw-clone.h#L31
    [4]: https://codesearch.debian.net
    Fixes: 7f192e3cd316 ("fork: add clone3")
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Florian Weimer <fweimer@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: linux-api@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: <stable@vger.kernel.org> # 5.3
    Cc: GNU C Library <libc-alpha@sourceware.org>
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Aleksa Sarai <cyphar@cyphar.com>
    Link: https://lore.kernel.org/r/20191031113608.20713-1-christian.brauner@ubuntu.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 246a5a18920c533ba5819f9bfff20a03388d0cd9
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Thu Oct 31 12:26:20 2019 -0700

    cpufreq: intel_pstate: Fix invalid EPB setting
    
    commit c31432fa7f825de0e19838f1ac7746381c509ec4 upstream.
    
    The max value of EPB can only be 0x0F. Attempting to set more than that
    triggers an "unchecked MSR access error" warning which happens in
    intel_pstate_hwp_force_min_perf() called via cpufreq stop_cpu().
    
    However, it is not even necessary to touch the EPB from intel_pstate,
    because it is restored on every CPU online by the intel_epb.c code,
    so let that code do the right thing and drop the redundant (and
    incorrect) EPB update from intel_pstate.
    
    Fixes: af3b7379e2d70 ("cpufreq: intel_pstate: Force HWP min perf before offline")
    Reported-by: Qian Cai <cai@lca.pw>
    Cc: 5.2+ <stable@vger.kernel.org> # 5.2+
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    [ rjw: Changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6972f6cdf9b4d1367df7e45e4471d9e1124a0b85
Author: Adam Ford <aford173@gmail.com>
Date:   Wed Oct 16 09:40:05 2019 -0500

    ARM: dts: imx6-logicpd: Re-enable SNVS power key
    
    commit cabe5f85e63626c00f3b879a670ec27325056a2d upstream.
    
    The baseboard of the Logic PD i.MX6 development kit has a power
    button routed which can both power down and power up the board.
    It can also wake the board from sleep.  This functionality was
    marked as disabled by default in imx6qdl.dtsi, so it needs to
    be explicitly enabled for each board.
    
    This patch enables the snvs power key again.
    
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Fixes: 770856f0da5d ("ARM: dts: imx6qdl: Enable SNVS power key according to board design")
    Cc: stable <stable@vger.kernel.org> #5.3+
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88fd55d3dd2537a8c0f0b60f8ed43396c96b4ca8
Author: Ondrej Jirman <megous@megous.com>
Date:   Mon Oct 28 22:49:14 2019 +0100

    ARM: sunxi: Fix CPU powerdown on A83T
    
    commit e690053e97e7a9c968df9a97cef9089dfa8e6a44 upstream.
    
    PRCM_PWROFF_GATING_REG has CPU0 at bit 4 on A83T. So without this
    patch, instead of gating the CPU0, the whole cluster was power gated,
    when shutting down first CPU in the cluster.
    
    Fixes: 6961275e72a8c1 ("ARM: sun8i: smp: Add support for A83T")
    Signed-off-by: Ondrej Jirman <megous@megous.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Maxime Ripard <mripard@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77f0f55cb8e9b0fc30c66794a8c85c78295206b5
Author: Andreas Klinger <ak@it-klinger.de>
Date:   Sun Oct 6 16:29:56 2019 +0200

    iio: srf04: fix wrong limitation in distance measuring
    
    commit 431f7667bd6889a274913162dfd19cce9d84848e upstream.
    
    The measured time value in the driver is limited to the maximum distance
    which can be read by the sensor. This limitation was wrong and is fixed
    by this patch.
    
    It also takes into account that we are supporting a variety of sensors
    today and that the recently added sensors have a higher maximum
    distance range.
    
    Changes in v2:
    - Added a Tested-by
    
    Suggested-by: Zbyněk Kocur <zbynek.kocur@fel.cvut.cz>
    Tested-by: Zbyněk Kocur <zbynek.kocur@fel.cvut.cz>
    Signed-off-by: Andreas Klinger <ak@it-klinger.de>
    Cc:<Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32a0a542bb83eab6bf918a78b6964bd88f72fa63
Author: Jean-Baptiste Maneyrol <JManeyrol@invensense.com>
Date:   Wed Oct 16 14:43:28 2019 +0000

    iio: imu: inv_mpu6050: fix no data on MPU6050
    
    commit 6e82ae6b8d11b948b74e71396efd8e074c415f44 upstream.
    
    Some chips have a fifo overflow bit issue where the bit is always
    set. The result is that every data is dropped.
    
    Change fifo overflow management by checking fifo count against
    a maximum value.
    
    Add fifo size in chip hardware set of values.
    
    Fixes: f5057e7b2dba ("iio: imu: inv_mpu6050: better fifo overflow handling")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jean-Baptiste Maneyrol <jmaneyrol@invensense.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f682347b80ca51ac73c85052972f06d63198803
Author: Alexandru Ardelean <alexandru.ardelean@analog.com>
Date:   Tue Oct 8 17:15:37 2019 +0300

    iio: imu: adis16480: make sure provided frequency is positive
    
    commit 24e1eb5c0d78cfb9750b690bbe997d4d59170258 upstream.
    
    It could happen that either `val` or `val2` [provided from userspace] is
    negative. In that case the computed frequency could get a weird value.
    
    Fix this by checking that neither of the 2 variables is negative, and check
    that the computed result is not-zero.
    
    Fixes: e4f959390178 ("iio: imu: adis16480 switch sampling frequency attr to core support")
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d958a6b9e490e4e48d693812d47a5b3c55478d9
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Fri Oct 25 17:04:20 2019 +0200

    iio: adc: stm32-adc: fix stopping dma
    
    commit e6afcf6c598d6f3a0c9c408bfeddb3f5730608b0 upstream.
    
    There maybe a race when using dmaengine_terminate_all(). The predisable
    routine may call iio_triggered_buffer_predisable() prior to a pending DMA
    callback.
    Adopt dmaengine_terminate_sync() to ensure there's no pending DMA request
    before calling iio_triggered_buffer_predisable().
    
    Fixes: 2763ea0585c9 ("iio: adc: stm32: add optional dma support")
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 520158f465cdd48d57b57a70ed33a707547b8aea
Author: Luis Henriques <lhenriques@suse.com>
Date:   Thu Oct 31 11:49:39 2019 +0000

    ceph: don't allow copy_file_range when stripe_count != 1
    
    commit a3a0819388b2bf15e7eafe38ff6aacfc27b12df0 upstream.
    
    copy_file_range tries to use the OSD 'copy-from' operation, which simply
    performs a full object copy.  Unfortunately, the implementation of this
    system call assumes that stripe_count is always set to 1 and doesn't take
    into account that the data may be striped across an object set.  If the
    file layout has stripe_count different from 1, then the destination file
    data will be corrupted.
    
    For example:
    
    Consider a 8 MiB file with 4 MiB object size, stripe_count of 2 and
    stripe_size of 2 MiB; the first half of the file will be filled with 'A's
    and the second half will be filled with 'B's:
    
                   0      4M     8M       Obj1     Obj2
                   +------+------+       +----+   +----+
            file:  | AAAA | BBBB |       | AA |   | AA |
                   +------+------+       |----|   |----|
                                         | BB |   | BB |
                                         +----+   +----+
    
    If we copy_file_range this file into a new file (which needs to have the
    same file layout!), then it will start by copying the object starting at
    file offset 0 (Obj1).  And then it will copy the object starting at file
    offset 4M -- which is Obj1 again.
    
    Unfortunately, the solution for this is to not allow remote object copies
    to be performed when the file layout stripe_count is not 1 and simply
    fallback to the default (VFS) copy_file_range implementation.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c825c8fd68650b8cb0934a4aa96e96382adc865
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Oct 30 12:15:10 2019 -0400

    ceph: don't try to handle hashed dentries in non-O_CREAT atomic_open
    
    commit 5bb5e6ee6f5c557dcd19822eccd7bcced1e1a410 upstream.
    
    If ceph_atomic_open is handed a !d_in_lookup dentry, then that means
    that it already passed d_revalidate so we *know* that it's negative (or
    at least was very recently). Just return -ENOENT in that case.
    
    This also addresses a subtle bug in dentry handling. Non-O_CREAT opens
    call atomic_open with the parent's i_rwsem shared, but calling
    d_splice_alias on a hashed dentry requires the exclusive lock.
    
    If ceph_atomic_open receives a hashed, negative dentry on a non-O_CREAT
    open, and another client were to race in and create the file before we
    issue our OPEN, ceph_fill_trace could end up calling d_splice_alias on
    the dentry with the new inode with insufficient locks.
    
    Cc: stable@vger.kernel.org
    Reported-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a037d92302e10c7c0e5c0f7208363b9fc9671a04
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Oct 29 13:53:29 2019 +0000

    ceph: add missing check in d_revalidate snapdir handling
    
    commit 1f08529c84cfecaf1261ed9b7e17fab18541c58f upstream.
    
    We should not play with dcache without parent locked...
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fe37abb1e8f97d7f3407c8d82f24240940f315a
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Oct 29 13:50:19 2019 +0000

    ceph: fix RCU case handling in ceph_d_revalidate()
    
    commit aa8dd816732b2bab28c54bc4d2ccf3fc8a6e0892 upstream.
    
    For RCU case ->d_revalidate() is called with rcu_read_lock() and
    without pinning the dentry passed to it.  Which means that it
    can't rely upon ->d_inode remaining stable; that's the reason
    for d_inode_rcu(), actually.
    
    Make sure we don't reload ->d_inode there.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28589859743a65a6c623a71d906dd7de3aa55d6b
Author: Luis Henriques <lhenriques@suse.com>
Date:   Fri Oct 25 14:05:24 2019 +0100

    ceph: fix use-after-free in __ceph_remove_cap()
    
    commit ea60ed6fcf29eebc78f2ce91491e6309ee005a01 upstream.
    
    KASAN reports a use-after-free when running xfstest generic/531, with the
    following trace:
    
    [  293.903362]  kasan_report+0xe/0x20
    [  293.903365]  rb_erase+0x1f/0x790
    [  293.903370]  __ceph_remove_cap+0x201/0x370
    [  293.903375]  __ceph_remove_caps+0x4b/0x70
    [  293.903380]  ceph_evict_inode+0x4e/0x360
    [  293.903386]  evict+0x169/0x290
    [  293.903390]  __dentry_kill+0x16f/0x250
    [  293.903394]  dput+0x1c6/0x440
    [  293.903398]  __fput+0x184/0x330
    [  293.903404]  task_work_run+0xb9/0xe0
    [  293.903410]  exit_to_usermode_loop+0xd3/0xe0
    [  293.903413]  do_syscall_64+0x1a0/0x1c0
    [  293.903417]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This happens because __ceph_remove_cap() may queue a cap release
    (__ceph_queue_cap_release) which can be scheduled before that cap is
    removed from the inode list with
    
            rb_erase(&cap->ci_node, &ci->i_caps);
    
    And, when this finally happens, the use-after-free will occur.
    
    This can be fixed by removing the cap from the inode list before being
    removed from the session list, and thus eliminating the risk of an UAF.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 820e180cf4468bf54fab856f28ac9a0693e8b02c
Author: Jiada Wang <jiada_wang@mentor.com>
Date:   Tue Oct 22 20:54:29 2019 +0200

    ASoC: rsnd: dma: fix SSI9 4/5/6/7 busif dma address
    
    commit d10be65f87fc9d98ad3cbdc406e86745fe8c59e2 upstream.
    
    Currently each SSI unit's busif dma address is calculated by
    following calculation formula:
    0xec540000 + 0x1000 * id + busif / 4 * 0xA000 + busif % 4 * 0x400
    
    But according to R-Car3 HW manual 41.1.4 Register Configuration,
    ssi9 4/5/6/7 busif data register address
    (SSI9_4_BUSIF/SSI9_5_BUSIF/SSI9_6_BUSIF/SSI9_7_BUSIF)
    are out of this rule.
    
    This patch updates the calculation formula to correct
    ssi9 4/5/6/7 busif data register address.
    
    Fixes: 5e45a6fab3b9 ("ASoc: rsnd: dma: Calculate dma address with consider of BUSIF")
    Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
    Signed-off-by: Timo Wischer <twischer@de.adit-jv.com>
    [erosca: minor improvements in commit description]
    Cc: Andrew Gabbasov <andrew_gabbasov@mentor.com>
    Cc: stable@vger.kernel.org # v4.20+
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Link: https://lore.kernel.org/r/20191022185429.12769-1-erosca@de.adit-jv.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee3f3e6fe3f640b6d06fabe0423c8cebe22d7d27
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Nov 6 15:41:05 2019 +0000

    arm64: Do not mask out PTE_RDONLY in pte_same()
    
    commit 6767df245f4736d0cf0c6fb7cf9cf94b27414245 upstream.
    
    Following commit 73e86cb03cf2 ("arm64: Move PTE_RDONLY bit handling out
    of set_pte_at()"), the PTE_RDONLY bit is no longer managed by
    set_pte_at() but built into the PAGE_* attribute definitions.
    Consequently, pte_same() must include this bit when checking two PTEs
    for equality.
    
    Remove the arm64-specific pte_same() function, practically reverting
    commit 747a70e60b72 ("arm64: Fix copy-on-write referencing in HugeTLB")
    
    Fixes: 73e86cb03cf2 ("arm64: Move PTE_RDONLY bit handling out of set_pte_at()")
    Cc: <stable@vger.kernel.org> # 4.14.x-
    Cc: Will Deacon <will@kernel.org>
    Cc: Steve Capper <steve.capper@arm.com>
    Reported-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3386e45be13564d87bf8907361df096e581d676
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Nov 5 08:09:51 2019 -0800

    blkcg: make blkcg_print_stat() print stats only for online blkgs
    
    commit b0814361a25cba73a224548843ed92d8ea78715a upstream.
    
    blkcg_print_stat() iterates blkgs under RCU and doesn't test whether
    the blkg is online.  This can call into pd_stat_fn() on a pd which is
    still being initialized leading to an oops.
    
    The heaviest operation - recursively summing up rwstat counters - is
    already done while holding the queue_lock.  Expand queue_lock to cover
    the other operations and skip the blkg if it isn't online yet.  The
    online state is protected by both blkcg and queue locks, so this
    guarantees that only online blkgs are processed.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Roman Gushchin <guro@fb.com>
    Cc: Josef Bacik <jbacik@fb.com>
    Fixes: 903d23f0a354 ("blk-cgroup: allow controllers to output their own stats")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b5dd4f48bbd7b9ce138bb027f73bc81b54f5760
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Fri Aug 30 02:11:35 2019 +0800

    soundwire: bus: set initial value to port_status
    
    commit f1fac63af678b2fc1044ca71fedf1f2ae8bf7c3b upstream.
    
    port_status[port_num] are assigned for each port_num in some if
    conditions. So some of the port_status may not be initialized.
    
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20190829181135.16049-1-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f2a6868ecd28ff70d770043e4d7b832b6cc028b
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Oct 3 12:13:55 2019 +0200

    soundwire: depend on ACPI || OF
    
    commit 0f8c0f8a7782178c40157b2feb6a532493cbadd3 upstream.
    
    Now devicetree is supported for probing soundwire as well.
    
    On platforms built with !ACPI !OF (ie s390x) the device still cannot be
    probed and gives a build warning.
    
    Cc: stable@vger.kernel.org
    Fixes: a2e484585ad3 ("soundwire: core: add device tree support for slave devices")
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Link: https://lore.kernel.org/r/0b89b4ea16a93f523105c81a2f718b0cd7ec66f2.1570097621.git.msuchanek@suse.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bc2e8c5f0d506a9ef2d76871d012510c46299a9
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Oct 3 12:13:54 2019 +0200

    soundwire: depend on ACPI
    
    commit 52eb063d153ac310058fbaa91577a72c0e7a7169 upstream.
    
    The device cannot be probed on !ACPI and gives this warning:
    
    drivers/soundwire/slave.c:16:12: warning: ‘sdw_slave_add’ defined but
    not used [-Wunused-function]
     static int sdw_slave_add(struct sdw_bus *bus,
                ^~~~~~~~~~~~~
    
    Cc: stable@vger.kernel.org
    Fixes: 7c3cd189b86d ("soundwire: Add Master registration")
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Link: https://lore.kernel.org/r/bd685232ea511251eeb9554172f1524eabf9a46e.1570097621.git.msuchanek@suse.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaae532d532a74ca29e7e910f0261592ca54641d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Nov 5 21:16:48 2019 -0800

    mm/khugepaged: fix might_sleep() warn with CONFIG_HIGHPTE=y
    
    commit ec649c9d454ea372dcf16cccf48250994f1d7788 upstream.
    
    I got some khugepaged spew on a 32bit x86:
    
      BUG: sleeping function called from invalid context at include/linux/mmu_notifier.h:346
      in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 25, name: khugepaged
      INFO: lockdep is turned off.
      CPU: 1 PID: 25 Comm: khugepaged Not tainted 5.4.0-rc5-elk+ #206
      Hardware name: System manufacturer P5Q-EM/P5Q-EM, BIOS 2203    07/08/2009
      Call Trace:
       dump_stack+0x66/0x8e
       ___might_sleep.cold.96+0x95/0xa6
       __might_sleep+0x2e/0x80
       collapse_huge_page.isra.51+0x5ac/0x1360
       khugepaged+0x9a9/0x20f0
       kthread+0xf5/0x110
       ret_from_fork+0x2e/0x38
    
    Looks like it's due to CONFIG_HIGHPTE=y pte_offset_map()->kmap_atomic()
    vs.  mmu_notifier_invalidate_range_start().  Let's do the naive approach
    and just reorder the two operations.
    
    Link: http://lkml.kernel.org/r/20191029201513.GG1208@intel.com
    Fixes: 810e24e009cf71 ("mm/mmu_notifiers: annotate with might_sleep()")
    Signed-off-by: Ville Syrjl <ville.syrjala@linux.intel.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Jérôme Glisse <jglisse@redhat.com>
    Cc: Ralph Campbell <rcampbell@nvidia.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33fbcf3c0e42f4ece0e2beb9d21064d6cf05ba1d
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Nov 6 11:59:46 2019 -0800

    HID: wacom: generic: Treat serial number and related fields as unsigned
    
    commit ff479731c3859609530416a18ddb3db5db019b66 upstream.
    
    The HID descriptors for most Wacom devices oddly declare the serial
    number and other related fields as signed integers. When these numbers
    are ingested by the HID subsystem, they are automatically sign-extended
    into 32-bit integers. We treat the fields as unsigned elsewhere in the
    kernel and userspace, however, so this sign-extension causes problems.
    In particular, the sign-extended tool ID sent to userspace as ABS_MISC
    does not properly match unsigned IDs used by xf86-input-wacom and libwacom.
    
    We introduce a function 'wacom_s32tou' that can undo the automatic sign
    extension performed by 'hid_snto32'. We call this function when processing
    the serial number and related fields to ensure that we are dealing with
    and reporting the unsigned form. We opt to use this method rather than
    adding a descriptor fixup in 'wacom_hid_usage_quirk' since it should be
    more robust in the face of future devices.
    
    Ref: https://github.com/linuxwacom/input-wacom/issues/134
    Fixes: f85c9dc678 ("HID: wacom: generic: Support tool ID and additional tool types")
    CC: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 146cd2869859c2d4a14a1f6b63fac3f6b40a1334
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Oct 30 10:21:28 2019 -0400

    drm/radeon: fix si_enable_smc_cac() failed issue
    
    commit 2c409ba81be25516afe05ae27a4a15da01740b01 upstream.
    
    Need to set the dte flag on this asic.
    
    Port the fix from amdgpu:
    5cb818b861be114 ("drm/amd/amdgpu: fix si_enable_smc_cac() failed issue")
    
    Reviewed-by: Yong Zhao <yong.zhao@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d845c88c9eabfad99f4e9c35b497e327e736f021
Author: John Keeping <john@metanate.com>
Date:   Thu Aug 15 11:01:44 2019 +0100

    perf map: Use zalloc for map_groups
    
    commit ab6cd0e5276e24403751e0b3b8ed807738a8571f upstream.
    
    In the next commit we will add new fields to map_groups and we need
    these to be null if no value is assigned.  The simplest way to achieve
    this is to request zeroed memory from the allocator.
    
    Signed-off-by: John Keeping <john@metanate.com>
    Reviewed-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: john keeping <john@metanate.com>
    Link: http://lkml.kernel.org/r/20190815100146.28842-1-john@metanate.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Andres Freund <andres@anarazel.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4e1a0f9c711068fd6ca373ab7525c4905f818e4
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Tue Nov 5 00:27:11 2019 +0100

    perf tools: Fix time sorting
    
    commit 722ddfde366fd46205456a9c5ff9b3359dc9a75e upstream.
    
    The final sort might get confused when the comparison is done over
    bigger numbers than int like for -s time.
    
    Check the following report for longer workloads:
    
      $ perf report -s time -F time,overhead --stdio
    
    Fix hist_entry__sort() to properly return int64_t and not possible cut
    int.
    
    Fixes: 043ca389a318 ("perf tools: Use hpp formats to sort final output")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org # v3.16+
    Link: http://lore.kernel.org/lkml/20191104232711.16055-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a967331e5c8b41f0986dab0fde09546b7390aefa
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Oct 14 12:51:04 2019 +0300

    pinctrl: intel: Avoid potential glitches if pin is in GPIO mode
    
    commit 29c2c6aa32405dfee4a29911a51ba133edcedb0f upstream.
    
    When consumer requests a pin, in order to be on the safest side,
    we switch it first to GPIO mode followed by immediate transition
    to the input state. Due to posted writes it's luckily to be a single
    I/O transaction.
    
    However, if firmware or boot loader already configures the pin
    to the GPIO mode, user expects no glitches for the requested pin.
    We may check if the pin is pre-configured and leave it as is
    till the actual consumer toggles its state to avoid glitches.
    
    Fixes: 7981c0015af2 ("pinctrl: intel: Add Intel Sunrisepoint pin controller and GPIO support")
    Depends-on: f5a26acf0162 ("pinctrl: intel: Initialize GPIO properly when used through irqchip")
    Cc: stable@vger.kernel.org
    Cc: fei.yang@intel.com
    Reported-by: Oliver Barta <oliver.barta@aptiv.com>
    Reported-by: Malin Jonsson <malin.jonsson@ericsson.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61a928dff6ea8f576e7ff9f2141a3c68425e22fc
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Thu Sep 26 19:16:41 2019 -0600

    tools: gpio: Use !building_out_of_srctree to determine srctree
    
    commit 4a6a6f5c4aeedb72db871d60bfcca89835f317aa upstream.
    
    make TARGETS=gpio kselftest fails with:
    
    Makefile:23: tools/build/Makefile.include: No such file or directory
    
    When the gpio tool make is invoked from tools Makefile, srctree is
    cleared and the current logic check for srctree equals to empty
    string to determine srctree location from CURDIR.
    
    When the build in invoked from selftests/gpio Makefile, the srctree
    is set to "." and the same logic used for srctree equals to empty is
    needed to determine srctree.
    
    Check building_out_of_srctree undefined as the condition for both
    cases to fix "make TARGETS=gpio kselftest" build failure.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49a9b4896e2e6424346ca175543874d7b4797edb
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Oct 11 09:03:54 2019 -0400

    btrfs: save i_size to avoid double evaluation of i_size_read in compress_file_range
    
    commit d98da49977f67394db492f06c00b1fb1cc090c05 upstream.
    
    We hit a regression while rolling out 5.2 internally where we were
    hitting the following panic
    
      kernel BUG at mm/page-writeback.c:2659!
      RIP: 0010:clear_page_dirty_for_io+0xe6/0x1f0
      Call Trace:
       __process_pages_contig+0x25a/0x350
       ? extent_clear_unlock_delalloc+0x43/0x70
       submit_compressed_extents+0x359/0x4d0
       normal_work_helper+0x15a/0x330
       process_one_work+0x1f5/0x3f0
       worker_thread+0x2d/0x3d0
       ? rescuer_thread+0x340/0x340
       kthread+0x111/0x130
       ? kthread_create_on_node+0x60/0x60
       ret_from_fork+0x1f/0x30
    
    This is happening because the page is not locked when doing
    clear_page_dirty_for_io.  Looking at the core dump it was because our
    async_extent had a ram_size of 24576 but our async_chunk range only
    spanned 20480, so we had a whole extra page in our ram_size for our
    async_extent.
    
    This happened because we try not to compress pages outside of our
    i_size, however a cleanup patch changed us to do
    
    actual_end = min_t(u64, i_size_read(inode), end + 1);
    
    which is problematic because i_size_read() can evaluate to different
    values in between checking and assigning.  So either an expanding
    truncate or a fallocate could increase our i_size while we're doing
    writeout and actual_end would end up being past the range we have
    locked.
    
    I confirmed this was what was happening by installing a debug kernel
    that had
    
      actual_end = min_t(u64, i_size_read(inode), end + 1);
      if (actual_end > end + 1) {
              printk(KERN_ERR "KABOOM\n");
              actual_end = end + 1;
      }
    
    and installing it onto 500 boxes of the tier that had been seeing the
    problem regularly.  Last night I got my debug message and no panic,
    confirming what I expected.
    
    [ dsterba: the assembly confirms a tiny race window:
    
        mov    0x20(%rsp),%rax
        cmp    %rax,0x48(%r15)           # read
        movl   $0x0,0x18(%rsp)
        mov    %rax,%r12
        mov    %r14,%rax
        cmovbe 0x48(%r15),%r12           # eval
    
      Where r15 is inode and 0x48 is offset of i_size.
    
      The original fix was to revert 62b37622718c that would do an
      intermediate assignment and this would also avoid the doulble
      evaluation but is not future-proof, should the compiler merge the
      stores and call i_size_read anyway.
    
      There's a patch adding READ_ONCE to i_size_read but that's not being
      applied at the moment and we need to fix the bug. Instead, emulate
      READ_ONCE by two barrier()s that's what effectively happens. The
      assembly confirms single evaluation:
    
        mov    0x48(%rbp),%rax          # read once
        mov    0x20(%rsp),%rcx
        mov    $0x20,%edx
        cmp    %rax,%rcx
        cmovbe %rcx,%rax
        mov    %rax,(%rsp)
        mov    %rax,%rcx
        mov    %r14,%rax
    
      Where 0x48(%rbp) is inode->i_size stored to %eax.
    ]
    
    Fixes: 62b37622718c ("btrfs: Remove isize local variable in compress_file_range")
    CC: stable@vger.kernel.org # v5.1+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ changelog updated ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05f3325f582f1686387767ec10399ef4c97d71e1
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Aug 28 10:33:13 2019 +0800

    btrfs: tree-checker: Fix wrong check on max devid
    
    commit 8bb177d18f114358a57d8ae7e206861b48b8b4de upstream.
    
    [BUG]
    The following script will cause false alert on devid check.
      #!/bin/bash
    
      dev1=/dev/test/test
      dev2=/dev/test/scratch1
      mnt=/mnt/btrfs
    
      umount $dev1 &> /dev/null
      umount $dev2 &> /dev/null
      umount $mnt &> /dev/null
    
      mkfs.btrfs -f $dev1
    
      mount $dev1 $mnt
    
      _fail()
      {
              echo "!!! FAILED !!!"
              exit 1
      }
    
      for ((i = 0; i < 4096; i++)); do
              btrfs dev add -f $dev2 $mnt || _fail
              btrfs dev del $dev1 $mnt || _fail
              dev_tmp=$dev1
              dev1=$dev2
              dev2=$dev_tmp
      done
    
    [CAUSE]
    Tree-checker uses BTRFS_MAX_DEVS() and BTRFS_MAX_DEVS_SYS_CHUNK() as
    upper limit for devid.  But we can have devid holes just like above
    script.
    
    So the check for devid is incorrect and could cause false alert.
    
    [FIX]
    Just remove the whole devid check.  We don't have any hard requirement
    for devid assignment.
    
    Furthermore, even devid could get corrupted by a bitflip, we still have
    dev extents verification at mount time, so corrupted data won't sneak
    in.
    
    This fixes fstests btrfs/194.
    
    Reported-by: Anand Jain <anand.jain@oracle.com>
    Fixes: ab4ba2e13346 ("btrfs: tree-checker: Verify dev item")
    CC: stable@vger.kernel.org # 5.2+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e0d169b7f2518cee6c824238bcdb46024ed5609
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Aug 28 10:33:12 2019 +0800

    btrfs: Consider system chunk array size for new SYSTEM chunks
    
    commit c17add7a1c61a15578e4071ed7bfd460fd041c43 upstream.
    
    For SYSTEM chunks, despite the regular chunk item size limit, there is
    another limit due to system chunk array size.
    
    The extra limit was removed in a refactoring, so add it back.
    
    Fixes: e3ecdb3fdecf ("btrfs: factor out devs_max setting in __btrfs_alloc_chunk")
    CC: stable@vger.kernel.org # 5.3+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d16e0502ade195f0aa1e9f9c51c76e4a70b0d3a
Author: Roman Gushchin <guro@fb.com>
Date:   Tue Nov 5 21:17:03 2019 -0800

    mm: slab: make page_cgroup_ino() to recognize non-compound slab pages properly
    
    commit 221ec5c0a46c1a1740f34fb36fc661a5284d01b0 upstream.
    
    page_cgroup_ino() doesn't return a valid memcg pointer for non-compound
    slab pages, because it depends on PgHead AND PgSlab flags to be set to
    determine the memory cgroup from the kmem_cache.  It's correct for
    compound pages, but not for generic small pages.  Those don't have PgHead
    set, so it ends up returning zero.
    
    Fix this by replacing the condition to PageSlab() && !PageTail().
    
    Before this patch:
      [root@localhost ~]# ./page-types -c /sys/fs/cgroup/user.slice/user-0.slice/user@0.service/ | grep slab
      0x0000000000000080            38        0  _______S___________________________________        slab
    
    After this patch:
      [root@localhost ~]# ./page-types -c /sys/fs/cgroup/user.slice/user-0.slice/user@0.service/ | grep slab
      0x0000000000000080           147        0  _______S___________________________________        slab
    
    Also, hwpoison_filter_task() uses output of page_cgroup_ino() in order
    to filter error injection events based on memcg.  So if
    page_cgroup_ino() fails to return memcg pointer, we just fail to inject
    memory error.  Considering that hwpoison filter is for testing, affected
    users are limited and the impact should be marginal.
    
    [n-horiguchi@ah.jp.nec.com: changelog additions]
    Link: http://lkml.kernel.org/r/20191031012151.2722280-1-guro@fb.com
    Fixes: 4d96ba353075 ("mm: memcg/slab: stop setting page->mem_cgroup pointer for slab pages")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76e81b48fec824c40512194fa38551edf6d8c3de
Author: Kevin Hao <haokexin@gmail.com>
Date:   Tue Nov 5 21:16:57 2019 -0800

    dump_stack: avoid the livelock of the dump_lock
    
    commit 5cbf2fff3bba8d3c6a4d47c1754de1cf57e2b01f upstream.
    
    In the current code, we use the atomic_cmpxchg() to serialize the output
    of the dump_stack(), but this implementation suffers the thundering herd
    problem.  We have observed such kind of livelock on a Marvell cn96xx
    board(24 cpus) when heavily using the dump_stack() in a kprobe handler.
    Actually we can let the competitors to wait for the releasing of the
    lock before jumping to atomic_cmpxchg().  This will definitely mitigate
    the thundering herd problem.  Thanks Linus for the suggestion.
    
    [akpm@linux-foundation.org: fix comment]
    Link: http://lkml.kernel.org/r/20191030031637.6025-1-haokexin@gmail.com
    Fixes: b58d977432c8 ("dump_stack: serialize the output from dump_stack()")
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 775e7a9b82903e957b693c97f464e333e6146b29
Author: Michal Hocko <mhocko@suse.com>
Date:   Tue Nov 5 21:16:40 2019 -0800

    mm, vmstat: hide /proc/pagetypeinfo from normal users
    
    commit abaed0112c1db08be15a784a2c5c8a8b3063cdd3 upstream.
    
    /proc/pagetypeinfo is a debugging tool to examine internal page
    allocator state wrt to fragmentation.  It is not very useful for any
    other use so normal users really do not need to read this file.
    
    Waiman Long has noticed that reading this file can have negative side
    effects because zone->lock is necessary for gathering data and that a)
    interferes with the page allocator and its users and b) can lead to hard
    lockups on large machines which have very long free_list.
    
    Reduce both issues by simply not exporting the file to regular users.
    
    Link: http://lkml.kernel.org/r/20191025072610.18526-2-mhocko@kernel.org
    Fixes: 467c996c1e19 ("Print out statistics in relation to fragmentation avoidance to /proc/pagetypeinfo")
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: Waiman Long <longman@redhat.com>
    Acked-by: Mel Gorman <mgorman@suse.de>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Waiman Long <longman@redhat.com>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Cc: Jann Horn <jannh@google.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1bbad9c45eba3f650d4b1d41713b7d1d407e9c0
Author: Yang Shi <yang.shi@linux.alibaba.com>
Date:   Tue Nov 5 21:16:30 2019 -0800

    mm: thp: handle page cache THP correctly in PageTransCompoundMap
    
    commit 169226f7e0d275c1879551f37484ef6683579a5c upstream.
    
    We have a usecase to use tmpfs as QEMU memory backend and we would like
    to take the advantage of THP as well.  But, our test shows the EPT is
    not PMD mapped even though the underlying THP are PMD mapped on host.
    The number showed by /sys/kernel/debug/kvm/largepage is much less than
    the number of PMD mapped shmem pages as the below:
    
      7f2778200000-7f2878200000 rw-s 00000000 00:14 262232 /dev/shm/qemu_back_mem.mem.Hz2hSf (deleted)
      Size:            4194304 kB
      [snip]
      AnonHugePages:         0 kB
      ShmemPmdMapped:   579584 kB
      [snip]
      Locked:                0 kB
    
      cat /sys/kernel/debug/kvm/largepages
      12
    
    And some benchmarks do worse than with anonymous THPs.
    
    By digging into the code we figured out that commit 127393fbe597 ("mm:
    thp: kvm: fix memory corruption in KVM with THP enabled") checks if
    there is a single PTE mapping on the page for anonymous THP when setting
    up EPT map.  But the _mapcount < 0 check doesn't work for page cache THP
    since every subpage of page cache THP would get _mapcount inc'ed once it
    is PMD mapped, so PageTransCompoundMap() always returns false for page
    cache THP.  This would prevent KVM from setting up PMD mapped EPT entry.
    
    So we need handle page cache THP correctly.  However, when page cache
    THP's PMD gets split, kernel just remove the map instead of setting up
    PTE map like what anonymous THP does.  Before KVM calls get_user_pages()
    the subpages may get PTE mapped even though it is still a THP since the
    page cache THP may be mapped by other processes at the mean time.
    
    Checking its _mapcount and whether the THP has PTE mapped or not.
    Although this may report some false negative cases (PTE mapped by other
    processes), it looks not trivial to make this accurate.
    
    With this fix /sys/kernel/debug/kvm/largepage would show reasonable
    pages are PMD mapped by EPT as the below:
    
      7fbeaee00000-7fbfaee00000 rw-s 00000000 00:14 275464 /dev/shm/qemu_back_mem.mem.SKUvat (deleted)
      Size:            4194304 kB
      [snip]
      AnonHugePages:         0 kB
      ShmemPmdMapped:   557056 kB
      [snip]
      Locked:                0 kB
    
      cat /sys/kernel/debug/kvm/largepages
      271
    
    And the benchmarks are as same as anonymous THPs.
    
    [yang.shi@linux.alibaba.com: v4]
      Link: http://lkml.kernel.org/r/1571865575-42913-1-git-send-email-yang.shi@linux.alibaba.com
    Link: http://lkml.kernel.org/r/1571769577-89735-1-git-send-email-yang.shi@linux.alibaba.com
    Fixes: dd78fedde4b9 ("rmap: support file thp")
    Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>
    Reported-by: Gang Deng <gavin.dg@linux.alibaba.com>
    Tested-by: Gang Deng <gavin.dg@linux.alibaba.com>
    Suggested-by: Hugh Dickins <hughd@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e4a6a887f1cea99d8f237ebfc6bd848f3719080
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Tue Nov 5 21:16:27 2019 -0800

    mm, meminit: recalculate pcpu batch and high limits after init completes
    
    commit 3e8fc0075e24338b1117cdff6a79477427b8dbed upstream.
    
    Deferred memory initialisation updates zone->managed_pages during the
    initialisation phase but before that finishes, the per-cpu page
    allocator (pcpu) calculates the number of pages allocated/freed in
    batches as well as the maximum number of pages allowed on a per-cpu
    list.  As zone->managed_pages is not up to date yet, the pcpu
    initialisation calculates inappropriately low batch and high values.
    
    This increases zone lock contention quite severely in some cases with
    the degree of severity depending on how many CPUs share a local zone and
    the size of the zone.  A private report indicated that kernel build
    times were excessive with extremely high system CPU usage.  A perf
    profile indicated that a large chunk of time was lost on zone->lock
    contention.
    
    This patch recalculates the pcpu batch and high values after deferred
    initialisation completes for every populated zone in the system.  It was
    tested on a 2-socket AMD EPYC 2 machine using a kernel compilation
    workload -- allmodconfig and all available CPUs.
    
    mmtests configuration: config-workload-kernbench-max Configuration was
    modified to build on a fresh XFS partition.
    
    kernbench
                                    5.4.0-rc3              5.4.0-rc3
                                      vanilla           resetpcpu-v2
    Amean     user-256    13249.50 (   0.00%)    16401.31 * -23.79%*
    Amean     syst-256    14760.30 (   0.00%)     4448.39 *  69.86%*
    Amean     elsp-256      162.42 (   0.00%)      119.13 *  26.65%*
    Stddev    user-256       42.97 (   0.00%)       19.15 (  55.43%)
    Stddev    syst-256      336.87 (   0.00%)        6.71 (  98.01%)
    Stddev    elsp-256        2.46 (   0.00%)        0.39 (  84.03%)
    
                       5.4.0-rc3    5.4.0-rc3
                         vanilla resetpcpu-v2
    Duration User       39766.24     49221.79
    Duration System     44298.10     13361.67
    Duration Elapsed      519.11       388.87
    
    The patch reduces system CPU usage by 69.86% and total build time by
    26.65%.  The variance of system CPU usage is also much reduced.
    
    Before, this was the breakdown of batch and high values over all zones
    was:
    
        256               batch: 1
        256               batch: 63
        512               batch: 7
        256               high:  0
        256               high:  378
        512               high:  42
    
    512 pcpu pagesets had a batch limit of 7 and a high limit of 42.  After
    the patch:
    
        256               batch: 1
        768               batch: 63
        256               high:  0
        768               high:  378
    
    [mgorman@techsingularity.net: fix merge/linkage snafu]
      Link: http://lkml.kernel.org/r/20191023084705.GD3016@techsingularity.netLink: http://lkml.kernel.org/r/20191021094808.28824-2-mgorman@techsingularity.net
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Qian Cai <cai@lca.pw>
    Cc: <stable@vger.kernel.org>    [4.1+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d459ceb9f7113fec063aee7393df46781393d506
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Tue Nov 5 21:17:13 2019 -0800

    mm: memcontrol: fix network errors from failing __GFP_ATOMIC charges
    
    commit 869712fd3de5a90b7ba23ae1272278cddc66b37b upstream.
    
    While upgrading from 4.16 to 5.2, we noticed these allocation errors in
    the log of the new kernel:
    
      SLUB: Unable to allocate memory on node -1, gfp=0xa20(GFP_ATOMIC)
        cache: tw_sock_TCPv6(960:helper-logs), object size: 232, buffer size: 240, default order: 1, min order: 0
        node 0: slabs: 5, objs: 170, free: 0
    
            slab_out_of_memory+1
            ___slab_alloc+969
            __slab_alloc+14
            kmem_cache_alloc+346
            inet_twsk_alloc+60
            tcp_time_wait+46
            tcp_fin+206
            tcp_data_queue+2034
            tcp_rcv_state_process+784
            tcp_v6_do_rcv+405
            __release_sock+118
            tcp_close+385
            inet_release+46
            __sock_release+55
            sock_close+17
            __fput+170
            task_work_run+127
            exit_to_usermode_loop+191
            do_syscall_64+212
            entry_SYSCALL_64_after_hwframe+68
    
    accompanied by an increase in machines going completely radio silent
    under memory pressure.
    
    One thing that changed since 4.16 is e699e2c6a654 ("net, mm: account
    sock objects to kmemcg"), which made these slab caches subject to cgroup
    memory accounting and control.
    
    The problem with that is that cgroups, unlike the page allocator, do not
    maintain dedicated atomic reserves.  As a cgroup's usage hovers at its
    limit, atomic allocations - such as done during network rx - can fail
    consistently for extended periods of time.  The kernel is not able to
    operate under these conditions.
    
    We don't want to revert the culprit patch, because it indeed tracks a
    potentially substantial amount of memory used by a cgroup.
    
    We also don't want to implement dedicated atomic reserves for cgroups.
    There is no point in keeping a fixed margin of unused bytes in the
    cgroup's memory budget to accomodate a consumer that is impossible to
    predict - we'd be wasting memory and get into configuration headaches,
    not unlike what we have going with min_free_kbytes.  We do this for
    physical mem because we have to, but cgroups are an accounting game.
    
    Instead, account these privileged allocations to the cgroup, but let
    them bypass the configured limit if they have to.  This way, we get the
    benefits of accounting the consumed memory and have it exert pressure on
    the rest of the cgroup, but like with the page allocator, we shift the
    burden of reclaimining on behalf of atomic allocations onto the regular
    allocations that can block.
    
    Link: http://lkml.kernel.org/r/20191022233708.365764-1-hannes@cmpxchg.org
    Fixes: e699e2c6a654 ("net, mm: account sock objects to kmemcg")
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Suleiman Souhlal <suleiman@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: <stable@vger.kernel.org>    [4.18+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acbeba2a7d5296ccec9b73ab596dc01fdb3a4430
Author: Shakeel Butt <shakeelb@google.com>
Date:   Tue Nov 5 21:16:21 2019 -0800

    mm: memcontrol: fix NULL-ptr deref in percpu stats flush
    
    commit 7961eee3978475fd9e8626137f88595b1ca05856 upstream.
    
    __mem_cgroup_free() can be called on the failure path in
    mem_cgroup_alloc().  However memcg_flush_percpu_vmstats() and
    memcg_flush_percpu_vmevents() which are called from __mem_cgroup_free()
    access the fields of memcg which can potentially be null if called from
    failure path from mem_cgroup_alloc().  Indeed syzbot has reported the
    following crash:
    
            kasan: CONFIG_KASAN_INLINE enabled
            kasan: GPF could be caused by NULL-ptr deref or user memory access
            general protection fault: 0000 [#1] PREEMPT SMP KASAN
            CPU: 0 PID: 30393 Comm: syz-executor.1 Not tainted 5.4.0-rc2+ #0
            Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
            RIP: 0010:memcg_flush_percpu_vmstats+0x4ae/0x930 mm/memcontrol.c:3436
            Code: 05 41 89 c0 41 0f b6 04 24 41 38 c7 7c 08 84 c0 0f 85 5d 03 00 00 44 3b 05 33 d5 12 08 0f 83 e2 00 00 00 4c 89 f0 48 c1 e8 03 <42> 80 3c 28 00 0f 85 91 03 00 00 48 8b 85 10 fe ff ff 48 8b b0 90
            RSP: 0018:ffff888095c27980 EFLAGS: 00010206
            RAX: 0000000000000012 RBX: ffff888095c27b28 RCX: ffffc90008192000
            RDX: 0000000000040000 RSI: ffffffff8340fae7 RDI: 0000000000000007
            RBP: ffff888095c27be0 R08: 0000000000000000 R09: ffffed1013f0da33
            R10: ffffed1013f0da32 R11: ffff88809f86d197 R12: fffffbfff138b760
            R13: dffffc0000000000 R14: 0000000000000090 R15: 0000000000000007
            FS:  00007f5027170700(0000) GS:ffff8880ae800000(0000) knlGS:0000000000000000
            CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
            CR2: 0000000000710158 CR3: 00000000a7b18000 CR4: 00000000001406f0
            DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
            DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
            Call Trace:
            __mem_cgroup_free+0x1a/0x190 mm/memcontrol.c:5021
            mem_cgroup_free mm/memcontrol.c:5033 [inline]
            mem_cgroup_css_alloc+0x3a1/0x1ae0 mm/memcontrol.c:5160
            css_create kernel/cgroup/cgroup.c:5156 [inline]
            cgroup_apply_control_enable+0x44d/0xc40 kernel/cgroup/cgroup.c:3119
            cgroup_mkdir+0x899/0x11b0 kernel/cgroup/cgroup.c:5401
            kernfs_iop_mkdir+0x14d/0x1d0 fs/kernfs/dir.c:1124
            vfs_mkdir+0x42e/0x670 fs/namei.c:3807
            do_mkdirat+0x234/0x2a0 fs/namei.c:3830
            __do_sys_mkdir fs/namei.c:3846 [inline]
            __se_sys_mkdir fs/namei.c:3844 [inline]
            __x64_sys_mkdir+0x5c/0x80 fs/namei.c:3844
            do_syscall_64+0xfa/0x760 arch/x86/entry/common.c:290
            entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixing this by moving the flush to mem_cgroup_free as there is no need
    to flush anything if we see failure in mem_cgroup_alloc().
    
    Link: http://lkml.kernel.org/r/20191018165231.249872-1-shakeelb@google.com
    Fixes: bb65f89b7d3d ("mm: memcontrol: flush percpu vmevents before releasing memcg")
    Fixes: c350a99ea2b1 ("mm: memcontrol: flush percpu vmstats before releasing memcg")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reported-by: syzbot+515d5bcfe179cdf049b2@syzkaller.appspotmail.com
    Reviewed-by: Roman Gushchin <guro@fb.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e76678e3237f09ed791ba1d8b0f1195816d1b46
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 5 14:43:16 2019 +0100

    ALSA: hda/ca0132 - Fix possible workqueue stall
    
    commit 15c2b3cc09a31620914955cb2a89c277c18ee999 upstream.
    
    The unsolicited event handler for the headphone jack on CA0132 codec
    driver tries to reschedule the another delayed work with
    cancel_delayed_work_sync().  It's no good idea, unfortunately,
    especially after we changed the work queue to the standard global
    one; this may lead to a stall because both works are using the same
    global queue.
    
    Fix it by dropping the _sync but does call cancel_delayed_work()
    instead.
    
    Fixes: 993884f6a26c ("ALSA: hda/ca0132 - Delay HP amp turnon.")
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1155836
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191105134316.19294-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ade96d0d8008f1a696b1bf41e6f36d54ddabb94c
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Nov 3 00:09:20 2019 +0900

    ALSA: bebob: fix to detect configured source of sampling clock for Focusrite Saffire Pro i/o series
    
    commit 706ad6746a66546daf96d4e4a95e46faf6cf689a upstream.
    
    For Focusrite Saffire Pro i/o, the lowest 8 bits of register represents
    configured source of sampling clock. The next lowest 8 bits represents
    whether the configured source is actually detected or not just after
    the register is changed for the source.
    
    Current implementation evaluates whole the register to detect configured
    source. This results in failure due to the next lowest 8 bits when the
    source is connected in advance.
    
    This commit fixes the bug.
    
    Fixes: 25784ec2d034 ("ALSA: bebob: Add support for Focusrite Saffire/SaffirePro series")
    Cc: <stable@vger.kernel.org> # v3.16+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20191102150920.20367-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6acd3013c1c705dbc9af9ef47d76f7110f5d450
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Nov 6 17:55:47 2019 +0100

    ALSA: timer: Fix incorrectly assigned timer instance
    
    commit e7af6307a8a54f0b873960b32b6a644f2d0fbd97 upstream.
    
    The clean up commit 41672c0c24a6 ("ALSA: timer: Simplify error path in
    snd_timer_open()") unified the error handling code paths with the
    standard goto, but it introduced a subtle bug: the timer instance is
    stored in snd_timer_open() incorrectly even if it returns an error.
    This may eventually lead to UAF, as spotted by fuzzer.
    
    The culprit is the snd_timer_open() code checks the
    SNDRV_TIMER_IFLG_EXCLUSIVE flag with the common variable timeri.
    This variable is supposed to be the newly created instance, but we
    (ab-)used it for a temporary check before the actual creation of a
    timer instance.  After that point, there is another check for the max
    number of instances, and it bails out if over the threshold.  Before
    the refactoring above, it worked fine because the code returned
    directly from that point.  After the refactoring, however, it jumps to
    the unified error path that stores the timeri variable in return --
    even if it returns an error.  Unfortunately this stored value is kept
    in the caller side (snd_timer_user_tselect()) in tu->timeri.  This
    causes inconsistency later, as if the timer was successfully
    assigned.
    
    In this patch, we fix it by not re-using timeri variable but a
    temporary variable for testing the exclusive connection, so timeri
    remains NULL at that point.
    
    Fixes: 41672c0c24a6 ("ALSA: timer: Simplify error path in snd_timer_open()")
    Reported-and-tested-by: Tristan Madani <tristmd@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191106165547.23518-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9aa247c24ca4671cb40a9fd5f9e21d574119c14a
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed Nov 6 21:51:31 2019 +0100

    r8169: fix page read in r8168g_mdio_read
    
    [ Upstream commit 9c6850fea3edefef6e7153b2c466f09155399882 ]
    
    Functions like phy_modify_paged() read the current page, on Realtek
    PHY's this means reading the value of register 0x1f. Add special
    handling for reading this register, similar to what we do already
    in r8168g_mdio_write(). Currently we read a random value that by
    chance seems to be 0 always.
    
    Fixes: a2928d28643e ("r8169: use paged versions of phylib MDIO access functions")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e9b5e8d8ffe8613fb7f460c10d1d38b3e528206
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Nov 8 17:08:50 2019 +0100

    vsock/virtio: fix sock refcnt holding during the shutdown
    
    [ Upstream commit ad8a7220355d39cddce8eac1cea9677333e8b821 ]
    
    The "42f5cda5eaf4" commit rightly set SOCK_DONE on peer shutdown,
    but there is an issue if we receive the SHUTDOWN(RDWR) while the
    virtio_transport_close_timeout() is scheduled.
    In this case, when the timeout fires, the SOCK_DONE is already
    set and the virtio_transport_close_timeout() will not call
    virtio_transport_reset() and virtio_transport_do_close().
    This causes that both sockets remain open and will never be released,
    preventing the unloading of [virtio|vhost]_transport modules.
    
    This patch fixes this issue, calling virtio_transport_reset() and
    virtio_transport_do_close() when we receive the SHUTDOWN(RDWR)
    and there is nothing left to read.
    
    Fixes: 42f5cda5eaf4 ("vsock/virtio: set SOCK_DONE on peer shutdown")
    Cc: Stephen Barber <smbarber@chromium.org>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8ac0e74005f476cbadec7d0f076c44de8ea0e96
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Wed Nov 6 10:49:57 2019 +0100

    net/smc: fix ethernet interface refcounting
    
    [ Upstream commit 98f3375505b8d6517bd6710bc6d4f6289eeb30aa ]
    
    If a pnet table entry is to be added mentioning a valid ethernet
    interface, but an invalid infiniband or ISM device, the dev_put()
    operation for the ethernet interface is called twice, resulting
    in a negative refcount for the ethernet interface, which disables
    removal of such a network interface.
    
    This patch removes one of the dev_put() calls.
    
    Fixes: 890a2cb4a966 ("net/smc: rework pnet table")
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16f4842ab3250157ca5aa79bb0ed87ef3ece367b
Author: John Hurley <john.hurley@netronome.com>
Date:   Sat Nov 2 14:17:47 2019 +0000

    net: sched: prevent duplicate flower rules from tcf_proto destroy race
    
    [ Upstream commit 59eb87cb52c9f7164804bc8639c4d03ba9b0c169 ]
    
    When a new filter is added to cls_api, the function
    tcf_chain_tp_insert_unique() looks up the protocol/priority/chain to
    determine if the tcf_proto is duplicated in the chain's hashtable. It then
    creates a new entry or continues with an existing one. In cls_flower, this
    allows the function fl_ht_insert_unque to determine if a filter is a
    duplicate and reject appropriately, meaning that the duplicate will not be
    passed to drivers via the offload hooks. However, when a tcf_proto is
    destroyed it is removed from its chain before a hardware remove hook is
    hit. This can lead to a race whereby the driver has not received the
    remove message but duplicate flows can be accepted. This, in turn, can
    lead to the offload driver receiving incorrect duplicate flows and out of
    order add/delete messages.
    
    Prevent duplicates by utilising an approach suggested by Vlad Buslov. A
    hash table per block stores each unique chain/protocol/prio being
    destroyed. This entry is only removed when the full destroy (and hardware
    offload) has completed. If a new flow is being added with the same
    identiers as a tc_proto being detroyed, then the add request is replayed
    until the destroy is complete.
    
    Fixes: 8b64678e0af8 ("net: sched: refactor tp insert/delete for concurrent execution")
    Signed-off-by: John Hurley <john.hurley@netronome.com>
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Reported-by: Louis Peens <louis.peens@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6ba303408632e7cd680ed48a7b1a62fc977e244
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Nov 4 21:38:43 2019 -0800

    net: prevent load/store tearing on sk->sk_stamp
    
    [ Upstream commit f75359f3ac855940c5718af10ba089b8977bf339 ]
    
    Add a couple of READ_ONCE() and WRITE_ONCE() to prevent
    load-tearing and store-tearing in sock_read_timestamp()
    and sock_write_timestamp()
    
    This might prevent another KCSAN report.
    
    Fixes: 3a0ed3e96197 ("sock: Make sock->sk_stamp thread-safe")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Deepa Dinamani <deepa.kernel@gmail.com>
    Acked-by: Deepa Dinamani <deepa.kernel@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7060f71ffaf5ff3245e7940a29285d713f80a987
Author: Salil Mehta <salil.mehta@huawei.com>
Date:   Thu Nov 7 17:09:53 2019 +0000

    net: hns: Fix the stray netpoll locks causing deadlock in NAPI path
    
    [ Upstream commit bf5a6b4c474c589244dc25ee1af2c3c829228ef8 ]
    
    This patch fixes the problem of the spin locks, originally
    meant for the netpoll path of hns driver, causing deadlock in
    the normal NAPI poll path. The issue happened due to the presence
    of the stray leftover spin lock code related to the netpoll,
    whose support was earlier removed from the HNS[1], got activated
    due to enabling of NET_POLL_CONTROLLER switch.
    
    Earlier background:
    The netpoll handling code originally had this bug(as identified
    by Marc Zyngier[2]) of wrong spin lock API being used which did
    not disable the interrupts and hence could cause locking issues.
    i.e. if the lock were first acquired in context to thread like
    'ip' util and this lock if ever got later acquired again in
    context to the interrupt context like TX/RX (Interrupts could
    always pre-empt the lock holding task and acquire the lock again)
    and hence could cause deadlock.
    
    Proposed Solution:
    1. If the netpoll was enabled in the HNS driver, which is not
       right now, we could have simply used spin_[un]lock_irqsave()
    2. But as netpoll is disabled, therefore, it is best to get rid
       of the existing locks and stray code for now. This should
       solve the problem reported by Marc.
    
    [1] https://git.kernel.org/torvalds/c/4bd2c03be7
    [2] https://patchwork.ozlabs.org/patch/1189139/
    
    Fixes: 4bd2c03be707 ("net: hns: remove ndo_poll_controller")
    Cc: lipeng <lipeng321@huawei.com>
    Cc: Yisen Zhuang <yisen.zhuang@huawei.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: David S. Miller <davem@davemloft.net>
    Reported-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f29865aaf3d227eeffcbd3f810355b1a1866cf5
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 7 09:26:19 2019 -0800

    ipv6: fixes rt6_probe() and fib6_nh->last_probe init
    
    [ Upstream commit 1bef4c223b8588cf50433bdc2c6953d82949b3b3 ]
    
    While looking at a syzbot KCSAN report [1], I found multiple
    issues in this code :
    
    1) fib6_nh->last_probe has an initial value of 0.
    
       While probably okay on 64bit kernels, this causes an issue
       on 32bit kernels since the time_after(jiffies, 0 + interval)
       might be false ~24 days after boot (for HZ=1000)
    
    2) The data-race found by KCSAN
       I could use READ_ONCE() and WRITE_ONCE(), but we also can
       take the opportunity of not piling-up too many rt6_probe_deferred()
       works by using instead cmpxchg() so that only one cpu wins the race.
    
    [1]
    BUG: KCSAN: data-race in find_match / find_match
    
    write to 0xffff8880bb7aabe8 of 8 bytes by interrupt on cpu 1:
     rt6_probe net/ipv6/route.c:663 [inline]
     find_match net/ipv6/route.c:757 [inline]
     find_match+0x5bd/0x790 net/ipv6/route.c:733
     __find_rr_leaf+0xe3/0x780 net/ipv6/route.c:831
     find_rr_leaf net/ipv6/route.c:852 [inline]
     rt6_select net/ipv6/route.c:896 [inline]
     fib6_table_lookup+0x383/0x650 net/ipv6/route.c:2164
     ip6_pol_route+0xee/0x5c0 net/ipv6/route.c:2200
     ip6_pol_route_output+0x48/0x60 net/ipv6/route.c:2452
     fib6_rule_lookup+0x3d6/0x470 net/ipv6/fib6_rules.c:117
     ip6_route_output_flags_noref+0x16b/0x230 net/ipv6/route.c:2484
     ip6_route_output_flags+0x50/0x1a0 net/ipv6/route.c:2497
     ip6_dst_lookup_tail+0x25d/0xc30 net/ipv6/ip6_output.c:1049
     ip6_dst_lookup_flow+0x68/0x120 net/ipv6/ip6_output.c:1150
     inet6_csk_route_socket+0x2f7/0x420 net/ipv6/inet6_connection_sock.c:106
     inet6_csk_xmit+0x91/0x1f0 net/ipv6/inet6_connection_sock.c:121
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
     tcp_transmit_skb net/ipv4/tcp_output.c:1185 [inline]
     tcp_xmit_probe_skb+0x19b/0x1d0 net/ipv4/tcp_output.c:3735
    
    read to 0xffff8880bb7aabe8 of 8 bytes by interrupt on cpu 0:
     rt6_probe net/ipv6/route.c:657 [inline]
     find_match net/ipv6/route.c:757 [inline]
     find_match+0x521/0x790 net/ipv6/route.c:733
     __find_rr_leaf+0xe3/0x780 net/ipv6/route.c:831
     find_rr_leaf net/ipv6/route.c:852 [inline]
     rt6_select net/ipv6/route.c:896 [inline]
     fib6_table_lookup+0x383/0x650 net/ipv6/route.c:2164
     ip6_pol_route+0xee/0x5c0 net/ipv6/route.c:2200
     ip6_pol_route_output+0x48/0x60 net/ipv6/route.c:2452
     fib6_rule_lookup+0x3d6/0x470 net/ipv6/fib6_rules.c:117
     ip6_route_output_flags_noref+0x16b/0x230 net/ipv6/route.c:2484
     ip6_route_output_flags+0x50/0x1a0 net/ipv6/route.c:2497
     ip6_dst_lookup_tail+0x25d/0xc30 net/ipv6/ip6_output.c:1049
     ip6_dst_lookup_flow+0x68/0x120 net/ipv6/ip6_output.c:1150
     inet6_csk_route_socket+0x2f7/0x420 net/ipv6/inet6_connection_sock.c:106
     inet6_csk_xmit+0x91/0x1f0 net/ipv6/inet6_connection_sock.c:121
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 18894 Comm: udevd Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: cc3a86c802f0 ("ipv6: Change rt6_probe to take a fib6_nh")
    Fixes: f547fac624be ("ipv6: rate-limit probes for neighbourless routes")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d83d1cb178385055ac949bfda8fc2fea0a6d750a
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Nov 5 14:24:36 2019 -0800

    selftests/tls: add test for concurrent recv and send
    
    [ Upstream commit 41098af59d8d753aa8d3bb4310cc4ecb61fc82c7 ]
    
    Add a test which spawns 16 threads and performs concurrent
    send and recv calls on the same socket.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8d6817345f4ba228d07380e571676405e112872
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Nov 5 14:24:35 2019 -0800

    net/tls: add a TX lock
    
    [ Upstream commit 79ffe6087e9145d2377385cac48d0d6a6b4225a5 ]
    
    TLS TX needs to release and re-acquire the socket lock if send buffer
    fills up.
    
    TLS SW TX path currently depends on only allowing one thread to enter
    the function by the abuse of sk_write_pending. If another writer is
    already waiting for memory no new ones are allowed in.
    
    This has two problems:
     - writers don't wake other threads up when they leave the kernel;
       meaning that this scheme works for single extra thread (second
       application thread or delayed work) because memory becoming
       available will send a wake up request, but as Mallesham and
       Pooja report with larger number of threads it leads to threads
       being put to sleep indefinitely;
     - the delayed work does not get _scheduled_ but it may _run_ when
       other writers are present leading to crashes as writers don't
       expect state to change under their feet (same records get pushed
       and freed multiple times); it's hard to reliably bail from the
       work, however, because the mere presence of a writer does not
       guarantee that the writer will push pending records before exiting.
    
    Ensuring wakeups always happen will make the code basically open
    code a mutex. Just use a mutex.
    
    The TLS HW TX path does not have any locking (not even the
    sk_write_pending hack), yet it uses a per-socket sg_tx_data
    array to push records.
    
    Fixes: a42055e8d2c3 ("net/tls: Add support for async encryption of records for performance")
    Reported-by: Mallesham  Jatharakonda <mallesh537@gmail.com>
    Reported-by: Pooja Trivedi <poojatrivedi@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55d2cda3f982a81fd4dcc9f0f2af7fe14cc5c8aa
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Nov 5 14:24:34 2019 -0800

    net/tls: don't pay attention to sk_write_pending when pushing partial records
    
    [ Upstream commit 02b1fa07bb58f5d1f349b5b09eb936739a7b20fc ]
    
    sk_write_pending being not zero does not guarantee that partial
    record will be pushed. If the thread waiting for memory times out
    the pending record may get stuck.
    
    In case of tls_device there is no path where parial record is
    set and writer present in the first place. Partial record is
    set only in tls_push_sg() and tls_push_sg() will return an
    error immediately. All tls_device callers of tls_push_sg()
    will return (and not wait for memory) if it failed.
    
    Fixes: a42055e8d2c3 ("net/tls: Add support for async encryption of records for performance")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffa40969e500ced9140ad83066dd31b40d6751f2
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Tue Nov 5 23:50:14 2019 +0200

    net: mscc: ocelot: fix NULL pointer on LAG slave removal
    
    [ Upstream commit 3b3eed8eec47259939ee6c3d58aea1c311ddee3b ]
    
    lag_upper_info may be NULL on slave removal.
    
    Fixes: dc96ee3730fc ("net: mscc: ocelot: add bonding support")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94b6375049d22737dd4dfeb84fb8b81761bed1cb
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Tue Nov 5 23:50:13 2019 +0200

    net: mscc: ocelot: don't handle netdev events for other netdevs
    
    [ Upstream commit 7afb3e575e5aa9f5a200a3eb3f45d8130f6d6601 ]
    
    The check that the event is actually for this device should be moved
    from the "port" handler to the net device handler.
    
    Otherwise the port handler will deny bonding configuration for other
    net devices in the same system (like enetc in the LS1028A) that don't
    have the lag_upper_info->tx_type restriction that ocelot has.
    
    Fixes: dc96ee3730fc ("net: mscc: ocelot: add bonding support")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d67f9a20b857c5b1090eb18d6cb60e28347feb22
Author: Manish Chopra <manishc@marvell.com>
Date:   Fri Nov 8 02:42:30 2019 -0800

    qede: fix NULL pointer deref in __qede_remove()
    
    [ Upstream commit deabc87111c690097c03765ea017cd500f7376fc ]
    
    While rebooting the system with SR-IOV vfs enabled leads
    to below crash due to recurrence of __qede_remove() on the VF
    devices (first from .shutdown() flow of the VF itself and
    another from PF's .shutdown() flow executing pci_disable_sriov())
    
    This patch adds a safeguard in __qede_remove() flow to fix this,
    so that driver doesn't attempt to remove "already removed" devices.
    
    [  194.360134] BUG: unable to handle kernel NULL pointer dereference at 00000000000008dc
    [  194.360227] IP: [<ffffffffc03553c4>] __qede_remove+0x24/0x130 [qede]
    [  194.360304] PGD 0
    [  194.360325] Oops: 0000 [#1] SMP
    [  194.360360] Modules linked in: tcp_lp fuse tun bridge stp llc devlink bonding ip_set nfnetlink ib_isert iscsi_target_mod ib_srpt target_core_mod ib_srp scsi_transport_srp scsi_tgt ib_ipoib ib_umad rpcrdma sunrpc rdma_ucm ib_uverbs ib_iser rdma_cm iw_cm ib_cm libiscsi scsi_transport_iscsi dell_smbios iTCO_wdt iTCO_vendor_support dell_wmi_descriptor dcdbas vfat fat pcc_cpufreq skx_edac intel_powerclamp coretemp intel_rapl iosf_mbi kvm_intel kvm irqbypass crc32_pclmul ghash_clmulni_intel aesni_intel lrw gf128mul glue_helper ablk_helper cryptd qedr ib_core pcspkr ses enclosure joydev ipmi_ssif sg i2c_i801 lpc_ich mei_me mei wmi ipmi_si ipmi_devintf ipmi_msghandler tpm_crb acpi_pad acpi_power_meter xfs libcrc32c sd_mod crc_t10dif crct10dif_generic crct10dif_pclmul crct10dif_common crc32c_intel mgag200
    [  194.361044]  qede i2c_algo_bit drm_kms_helper qed syscopyarea sysfillrect nvme sysimgblt fb_sys_fops ttm nvme_core mpt3sas crc8 ptp drm pps_core ahci raid_class scsi_transport_sas libahci libata drm_panel_orientation_quirks nfit libnvdimm dm_mirror dm_region_hash dm_log dm_mod [last unloaded: ip_tables]
    [  194.361297] CPU: 51 PID: 7996 Comm: reboot Kdump: loaded Not tainted 3.10.0-1062.el7.x86_64 #1
    [  194.361359] Hardware name: Dell Inc. PowerEdge MX840c/0740HW, BIOS 2.4.6 10/15/2019
    [  194.361412] task: ffff9cea9b360000 ti: ffff9ceabebdc000 task.ti: ffff9ceabebdc000
    [  194.361463] RIP: 0010:[<ffffffffc03553c4>]  [<ffffffffc03553c4>] __qede_remove+0x24/0x130 [qede]
    [  194.361534] RSP: 0018:ffff9ceabebdfac0  EFLAGS: 00010282
    [  194.361570] RAX: 0000000000000000 RBX: ffff9cd013846098 RCX: 0000000000000000
    [  194.361621] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff9cd013846098
    [  194.361668] RBP: ffff9ceabebdfae8 R08: 0000000000000000 R09: 0000000000000000
    [  194.361715] R10: 00000000bfe14201 R11: ffff9ceabfe141e0 R12: 0000000000000000
    [  194.361762] R13: ffff9cd013846098 R14: 0000000000000000 R15: ffff9ceab5e48000
    [  194.361810] FS:  00007f799c02d880(0000) GS:ffff9ceacb0c0000(0000) knlGS:0000000000000000
    [  194.361865] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  194.361903] CR2: 00000000000008dc CR3: 0000001bdac76000 CR4: 00000000007607e0
    [  194.361953] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  194.362002] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  194.362051] PKRU: 55555554
    [  194.362073] Call Trace:
    [  194.362109]  [<ffffffffc0355500>] qede_remove+0x10/0x20 [qede]
    [  194.362180]  [<ffffffffb97d0f3e>] pci_device_remove+0x3e/0xc0
    [  194.362240]  [<ffffffffb98b3c52>] __device_release_driver+0x82/0xf0
    [  194.362285]  [<ffffffffb98b3ce3>] device_release_driver+0x23/0x30
    [  194.362343]  [<ffffffffb97c86d4>] pci_stop_bus_device+0x84/0xa0
    [  194.362388]  [<ffffffffb97c87e2>] pci_stop_and_remove_bus_device+0x12/0x20
    [  194.362450]  [<ffffffffb97f153f>] pci_iov_remove_virtfn+0xaf/0x160
    [  194.362496]  [<ffffffffb97f1aec>] sriov_disable+0x3c/0xf0
    [  194.362534]  [<ffffffffb97f1bc3>] pci_disable_sriov+0x23/0x30
    [  194.362599]  [<ffffffffc02f83c3>] qed_sriov_disable+0x5e3/0x650 [qed]
    [  194.362658]  [<ffffffffb9622df6>] ? kfree+0x106/0x140
    [  194.362709]  [<ffffffffc02cc0c0>] ? qed_free_stream_mem+0x70/0x90 [qed]
    [  194.362754]  [<ffffffffb9622df6>] ? kfree+0x106/0x140
    [  194.362803]  [<ffffffffc02cd659>] qed_slowpath_stop+0x1a9/0x1d0 [qed]
    [  194.362854]  [<ffffffffc035544e>] __qede_remove+0xae/0x130 [qede]
    [  194.362904]  [<ffffffffc03554e0>] qede_shutdown+0x10/0x20 [qede]
    [  194.362956]  [<ffffffffb97cf90a>] pci_device_shutdown+0x3a/0x60
    [  194.363010]  [<ffffffffb98b180b>] device_shutdown+0xfb/0x1f0
    [  194.363066]  [<ffffffffb94b66c6>] kernel_restart_prepare+0x36/0x40
    [  194.363107]  [<ffffffffb94b66e2>] kernel_restart+0x12/0x60
    [  194.363146]  [<ffffffffb94b6959>] SYSC_reboot+0x229/0x260
    [  194.363196]  [<ffffffffb95f200d>] ? handle_mm_fault+0x39d/0x9b0
    [  194.363253]  [<ffffffffb942b621>] ? __switch_to+0x151/0x580
    [  194.363304]  [<ffffffffb9b7ec28>] ? __schedule+0x448/0x9c0
    [  194.363343]  [<ffffffffb94b69fe>] SyS_reboot+0xe/0x10
    [  194.363387]  [<ffffffffb9b8bede>] system_call_fastpath+0x25/0x2a
    [  194.363430] Code: f9 e9 37 ff ff ff 90 0f 1f 44 00 00 55 48 89 e5 41 57 41 56 41 55 4c 8d af 98 00 00 00 41 54 4c 89 ef 41 89 f4 53 e8 4c e4 55 f9 <80> b8 dc 08 00 00 01 48 89 c3 4c 8d b8 c0 08 00 00 4c 8b b0 c0
    [  194.363712] RIP  [<ffffffffc03553c4>] __qede_remove+0x24/0x130 [qede]
    [  194.363764]  RSP <ffff9ceabebdfac0>
    [  194.363791] CR2: 00000000000008dc
    
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Sudarsana Kalluru <skalluru@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df3addccc88cf943d75c9485edfbfb437ac3c485
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 7 09:33:20 2019 +0800

    NFC: st21nfca: fix double free
    
    [ Upstream commit 99a8efbb6e30b72ac98cecf81103f847abffb1e5 ]
    
    The variable nfcid_skb is not changed in the callee nfc_hci_get_param()
    if error occurs. Consequently, the freed variable nfcid_skb will be
    freed again, resulting in a double free bug. Set nfcid_skb to NULL after
    releasing it to fix the bug.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e9b0ae6bec8fc9c7e6a02c03c5ae668c08004b1
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 7 14:29:50 2019 +0800

    nfc: netlink: fix double device reference drop
    
    [ Upstream commit 025ec40b81d785a98f76b8bdb509ac10773b4f12 ]
    
    The function nfc_put_device(dev) is called twice to drop the reference
    to dev when there is no associated local llcp. Remove one of them to fix
    the bug.
    
    Fixes: 52feb444a903 ("NFC: Extend netlink interface for LTO, RW, and MIUX parameters support")
    Fixes: d9b8d8e19b07 ("NFC: llcp: Service Name Lookup netlink interface")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20859d12090362cf344d4ec5c633d69c1eaada40
Author: Pan Bian <bianpan2016@163.com>
Date:   Tue Nov 5 16:34:07 2019 +0800

    NFC: fdp: fix incorrect free object
    
    [ Upstream commit 517ce4e93368938b204451285e53014549804868 ]
    
    The address of fw_vsc_cfg is on stack. Releasing it with devm_kfree() is
    incorrect, which may result in a system crash or other security impacts.
    The expected object to free is *fw_vsc_cfg.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c076d78844658b5d33e4c7d603c5ca6f6898e18d
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Thu Nov 7 11:57:01 2019 +0100

    net: usb: qmi_wwan: add support for DW5821e with eSIM support
    
    [ Upstream commit e497df686e8fed8c1dd69179010656362858edb3 ]
    
    Exactly same layout as the default DW5821e module, just a different
    vid/pid.
    
    The QMI interface is exposed in USB configuration #1:
    
    P:  Vendor=413c ProdID=81e0 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5821e-eSIM Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33115512984b263ef69476e1137e6485a6fcd09
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Nov 4 15:36:57 2019 -0800

    net/tls: fix sk_msg trim on fallback to copy mode
    
    [ Upstream commit 683916f6a84023407761d843048f1aea486b2612 ]
    
    sk_msg_trim() tries to only update curr pointer if it falls into
    the trimmed region. The logic, however, does not take into the
    account pointer wrapping that sk_msg_iter_var_prev() does nor
    (as John points out) the fact that msg->sg is a ring buffer.
    
    This means that when the message was trimmed completely, the new
    curr pointer would have the value of MAX_MSG_FRAGS - 1, which is
    neither smaller than any other value, nor would it actually be
    correct.
    
    Special case the trimming to 0 length a little bit and rework
    the comparison between curr and end to take into account wrapping.
    
    This bug caused the TLS code to not copy all of the message, if
    zero copy filled in fewer sg entries than memcopy would need.
    
    Big thanks to Alexander Potapenko for the non-KMSAN reproducer.
    
    v2:
     - take into account that msg->sg is a ring buffer (John).
    
    Link: https://lore.kernel.org/netdev/20191030160542.30295-1-jakub.kicinski@netronome.com/ (v1)
    
    Fixes: d829e9c4112b ("tls: convert to generic sk_msg interface")
    Reported-by: syzbot+f8495bff23a879a6d0bd@syzkaller.appspotmail.com
    Reported-by: syzbot+6f50c99e8f6194bf363f@syzkaller.appspotmail.com
    Co-developed-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c8593ad56dee97d177e1db3cf77de842c74974e
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Mon Nov 4 17:54:22 2019 -0700

    net: qualcomm: rmnet: Fix potential UAF when unregistering
    
    [ Upstream commit e7a86c687e64ab24f88330ad24ecc9442ce40c5a ]
    
    During the exit/unregistration process of the RmNet driver, the function
    rmnet_unregister_real_device() is called to handle freeing the driver's
    internal state and removing the RX handler on the underlying physical
    device. However, the order of operations this function performs is wrong
    and can lead to a use after free of the rmnet_port structure.
    
    Before calling netdev_rx_handler_unregister(), this port structure is
    freed with kfree(). If packets are received on any RmNet devices before
    synchronize_net() completes, they will attempt to use this already-freed
    port structure when processing the packet. As such, before cleaning up any
    other internal state, the RX handler must be unregistered in order to
    guarantee that no further packets will arrive on the device.
    
    Fixes: ceed73a2cf4a ("drivers: net: ethernet: qualcomm: rmnet: Initial implementation")
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9f19b54f771ee8449ceacbe9250bd42b386ba33
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 7 20:08:19 2019 -0800

    net: fix data-race in neigh_event_send()
    
    [ Upstream commit 1b53d64435d56902fc234ff2507142d971a09687 ]
    
    KCSAN reported the following data-race [1]
    
    The fix will also prevent the compiler from optimizing out
    the condition.
    
    [1]
    
    BUG: KCSAN: data-race in neigh_resolve_output / neigh_resolve_output
    
    write to 0xffff8880a41dba78 of 8 bytes by interrupt on cpu 1:
     neigh_event_send include/net/neighbour.h:443 [inline]
     neigh_resolve_output+0x78/0x480 net/core/neighbour.c:1474
     neigh_output include/net/neighbour.h:511 [inline]
     ip_finish_output2+0x4af/0xe40 net/ipv4/ip_output.c:228
     __ip_finish_output net/ipv4/ip_output.c:308 [inline]
     __ip_finish_output+0x23a/0x490 net/ipv4/ip_output.c:290
     ip_finish_output+0x41/0x160 net/ipv4/ip_output.c:318
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip_output+0xdf/0x210 net/ipv4/ip_output.c:432
     dst_output include/net/dst.h:436 [inline]
     ip_local_out+0x74/0x90 net/ipv4/ip_output.c:125
     __ip_queue_xmit+0x3a8/0xa40 net/ipv4/ip_output.c:532
     ip_queue_xmit+0x45/0x60 include/net/ip.h:237
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
     tcp_transmit_skb net/ipv4/tcp_output.c:1185 [inline]
     __tcp_retransmit_skb+0x4bd/0x15f0 net/ipv4/tcp_output.c:2976
     tcp_retransmit_skb+0x36/0x1a0 net/ipv4/tcp_output.c:2999
     tcp_retransmit_timer+0x719/0x16d0 net/ipv4/tcp_timer.c:515
     tcp_write_timer_handler+0x42d/0x510 net/ipv4/tcp_timer.c:598
     tcp_write_timer+0xd1/0xf0 net/ipv4/tcp_timer.c:618
    
    read to 0xffff8880a41dba78 of 8 bytes by interrupt on cpu 0:
     neigh_event_send include/net/neighbour.h:442 [inline]
     neigh_resolve_output+0x57/0x480 net/core/neighbour.c:1474
     neigh_output include/net/neighbour.h:511 [inline]
     ip_finish_output2+0x4af/0xe40 net/ipv4/ip_output.c:228
     __ip_finish_output net/ipv4/ip_output.c:308 [inline]
     __ip_finish_output+0x23a/0x490 net/ipv4/ip_output.c:290
     ip_finish_output+0x41/0x160 net/ipv4/ip_output.c:318
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip_output+0xdf/0x210 net/ipv4/ip_output.c:432
     dst_output include/net/dst.h:436 [inline]
     ip_local_out+0x74/0x90 net/ipv4/ip_output.c:125
     __ip_queue_xmit+0x3a8/0xa40 net/ipv4/ip_output.c:532
     ip_queue_xmit+0x45/0x60 include/net/ip.h:237
     __tcp_transmit_skb+0xe81/0x1d60 net/ipv4/tcp_output.c:1169
     tcp_transmit_skb net/ipv4/tcp_output.c:1185 [inline]
     __tcp_retransmit_skb+0x4bd/0x15f0 net/ipv4/tcp_output.c:2976
     tcp_retransmit_skb+0x36/0x1a0 net/ipv4/tcp_output.c:2999
     tcp_retransmit_timer+0x719/0x16d0 net/ipv4/tcp_timer.c:515
     tcp_write_timer_handler+0x42d/0x510 net/ipv4/tcp_timer.c:598
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11c6dd3bd60ad547ab2f1e0716c08c8562ebb008
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Nov 8 10:00:44 2019 +0000

    net: ethernet: octeon_mgmt: Account for second possible VLAN header
    
    [ Upstream commit e4dd5608033efe7b6030cde359bfdbaeb73bc22d ]
    
    Octeon's input ring-buffer entry has 14 bits-wide size field, so to account
    for second possible VLAN header max_mtu must be further reduced.
    
    Fixes: 109cc16526c6d ("ethernet/cavium: use core min/max MTU checking")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07deb878eaea0959d145f6c53991d09ae8a7fe6b
Author: David Ahern <dsahern@kernel.org>
Date:   Thu Nov 7 18:29:52 2019 +0000

    ipv4: Fix table id reference in fib_sync_down_addr
    
    [ Upstream commit e0a312629fefa943534fc46f7bfbe6de3fdaf463 ]
    
    Hendrik reported routes in the main table using source address are not
    removed when the address is removed. The problem is that fib_sync_down_addr
    does not account for devices in the default VRF which are associated
    with the main table. Fix by updating the table id reference.
    
    Fixes: 5a56a0b3a45d ("net: Don't delete routes in different VRFs")
    Reported-by: Hendrik Donner <hd@os-cillation.de>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 679fd22c868409cb6c74f7d0887f46c4f14f7f75
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 7 09:48:01 2019 +0100

    CDC-NCM: handle incomplete transfer of MTU
    
    [ Upstream commit 332f989a3b0041b810836c5c3747e59aad7e9d0b ]
    
    A malicious device may give half an answer when asked
    for its MTU. The driver will proceed after this with
    a garbage MTU. Anything but a complete answer must be treated
    as an error.
    
    V2: used sizeof as request by Alexander
    
    Reported-and-tested-by: syzbot+0631d878823ce2411636@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6a3a22757204466af7960226d2c26e42f7d219e
Author: Jay Vosburgh <jay.vosburgh@canonical.com>
Date:   Fri Nov 1 21:56:42 2019 -0700

    bonding: fix state transition issue in link monitoring
    
    [ Upstream commit 1899bb325149e481de31a4f32b59ea6f24e176ea ]
    
    Since de77ecd4ef02 ("bonding: improve link-status update in
    mii-monitoring"), the bonding driver has utilized two separate variables
    to indicate the next link state a particular slave should transition to.
    Each is used to communicate to a different portion of the link state
    change commit logic; one to the bond_miimon_commit function itself, and
    another to the state transition logic.
    
            Unfortunately, the two variables can become unsynchronized,
    resulting in incorrect link state transitions within bonding.  This can
    cause slaves to become stuck in an incorrect link state until a
    subsequent carrier state transition.
    
            The issue occurs when a special case in bond_slave_netdev_event
    sets slave->link directly to BOND_LINK_FAIL.  On the next pass through
    bond_miimon_inspect after the slave goes carrier up, the BOND_LINK_FAIL
    case will set the proposed next state (link_new_state) to BOND_LINK_UP,
    but the new_link to BOND_LINK_DOWN.  The setting of the final link state
    from new_link comes after that from link_new_state, and so the slave
    will end up incorrectly in _DOWN state.
    
            Resolve this by combining the two variables into one.
    
    Reported-by: Aleksei Zakharov <zakharov.a.g@yandex.ru>
    Reported-by: Sha Zhang <zhangsha.zhang@huawei.com>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Fixes: de77ecd4ef02 ("bonding: improve link-status update in mii-monitoring")
    Signed-off-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
