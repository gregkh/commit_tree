commit 5825c88e96518d8793f99e8c70aa0b0396642b45
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 4 19:19:19 2020 +0100

    Linux 5.4.8

commit 1cab43eb6137928106364340a5287b29ce3552f1
Author: Jan Stancek <jstancek@redhat.com>
Date:   Fri Jan 3 18:37:18 2020 +0100

    mm/hugetlbfs: fix for_each_hstate() loop in init_hugetlbfs_fs()
    
    commit 15f0ec941f4f908fefa23a30ded8358977cc1cc0 upstream.
    
    LTP memfd_create04 started failing for some huge page sizes
    after v5.4-10135-gc3bfc5dd73c6.
    
    The problem is the check introduced to for_each_hstate() loop that
    should skip default_hstate_idx.  Since it doesn't update 'i' counter,
    all subsequent huge page sizes are skipped as well.
    
    Fixes: 8fc312b32b25 ("mm/hugetlbfs: fix error handling when setting up mounts")
    Signed-off-by: Jan Stancek <jstancek@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 596180c2110c1848fe2ccf885245745658d98079
Author: Yangbo Lu <yangbo.lu@nxp.com>
Date:   Thu Dec 19 11:23:35 2019 +0800

    mmc: sdhci-of-esdhc: re-implement erratum A-009204 workaround
    
    [ Upstream commit f667216c5c7c967c3e568cdddefb51fe606bfe26 ]
    
    The erratum A-009204 workaround patch was reverted because of
    incorrect implementation.
    
    8b6dc6b mmc: sdhci-of-esdhc: Revert "mmc: sdhci-of-esdhc: add
            erratum A-009204 support"
    
    This patch is to re-implement the workaround (add a 5 ms delay
    before setting SYSCTL[RSTD] to make sure all the DMA transfers
    are finished).
    
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Link: https://lore.kernel.org/r/20191219032335.26528-1-yangbo.lu@nxp.com
    Fixes: 5dd195522562 ("mmc: sdhci-of-esdhc: add erratum A-009204 support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79bd72bd2f97099265eacbc248a44b60d1072dbd
Author: Yangbo Lu <yangbo.lu@nxp.com>
Date:   Wed Oct 9 15:41:40 2019 +0800

    mmc: sdhci-of-esdhc: fix up erratum A-008171 workaround
    
    [ Upstream commit 22dc132d5448db1b1c021de0c34aa8033ca7d98f ]
    
    A previous patch implemented an incomplete workaround of erratum
    A-008171. The complete workaround is as below. This patch is to
    implement the complete workaround which uses SW tuning if HW tuning
    fails, and retries both HW/SW tuning once with reduced clock if
    workaround fails. This is suggested by hardware team, and the patch
    had been verified on LS1046A eSDHC + Phison 32G eMMC which could
    trigger the erratum.
    
    Workaround:
    /* For T1040, T2080, LS1021A, T1023 Rev 1: */
    1. Program TBPTR[TB_WNDW_END_PTR] = 3*DIV_RATIO.
    2. Program TBPTR[TB_WNDW_START_PTR] = 5*DIV_RATIO.
    3. Program the software tuning mode by setting TBCTL[TB_MODE] = 2'h3.
    4. Set SYSCTL2[EXTN] and SYSCTL2[SAMPCLKSEL].
    5. Issue SEND_TUNING_BLK Command (CMD19 for SD, CMD21 for MMC).
    6. Wait for IRQSTAT[BRR], buffer read ready, to be set.
    7. Clear IRQSTAT[BRR].
    8. Check SYSCTL2[EXTN] to be cleared.
    9. Check SYSCTL2[SAMPCLKSEL], Sampling Clock Select. It's set value
       indicate tuning procedure success, and clear indicate failure.
       In case of tuning failure, fixed sampling scheme could be used by
       clearing TBCTL[TB_EN].
    /* For LS1080A Rev 1, LS2088A Rev 1.0, LA1575A Rev 1.0: */
    1. Read the TBCTL[31:0] register. Write TBCTL[11:8]=4'h8 and wait for
       1ms.
    2. Read the TBCTL[31:0] register and rewrite again. Wait for 1ms second.
    3. Read the TBSTAT[31:0] register twice.
    3.1 Reset data lines by setting ESDHCCTL[RSTD] bit.
    3.2 Check ESDHCCTL[RSTD] bit.
    3.3 If ESDHCCTL[RSTD] is 0, go to step 3.4 else go to step 3.2.
    3.4 Write 32'hFFFF_FFFF to IRQSTAT register.
    4. if TBSTAT[15:8]-TBSTAT[7:0] > 4*DIV_RATIO or TBSTAT[7:0]-TBSTAT[15:8]
       > 4*DIV_RATIO , then program TBPTR[TB_WNDW_END_PTR] = 4*DIV_RATIO and
       program TBPTR[TB_WNDW_START_PTR] = 8*DIV_RATIO.
    /* For LS1012A Rev1, LS1043A Rev 1.x, LS1046A 1.0: */
    1. Read the TBCTL[0:31] register. Write TBCTL[20:23]=4'h8 and wait for
       1ms.
    2. Read the TBCTL[0:31] register and rewrite again. Wait for 1ms second.
    3. Read the TBSTAT[0:31] register twice.
    3.1 Reset data lines by setting ESDHCCTL[RSTD] bit.
    3.2 Check ESDHCCTL[RSTD] bit.
    3.3 If ESDHCCTL[RSTD] is 0, go to step 3.4 else go to step 3.2.
    3.4 Write 32'hFFFF_FFFF to IRQSTAT register.
    4. if TBSTAT[16:23]-TBSTAT[24:31] > 4*DIV_RATIO or TBSTAT[24:31]-
       TBSTAT[16:23] > 4* DIV_RATIO , then program TBPTR[TB_WNDW_END_PTR] =
       4*DIV_RATIO and program TBPTR[TB_WNDW_START_PTR] = 8*DIV_RATIO.
    /* For LS1080A Rev 1, LS2088A Rev 1.0, LA1575A Rev 1.0 LS1012A Rev1,
     * LS1043A Rev 1.x, LS1046A 1.0:
     */
    5. else program TBPTR[TB_WNDW_END_PTR] = 3*DIV_RATIO and program
       TBPTR[TB_WNDW_START_PTR] = 5*DIV_RATIO.
    6. Program the software tuning mode by setting TBCTL[TB_MODE] = 2'h3.
    7. Set SYSCTL2[EXTN], wait 1us and SYSCTL2[SAMPCLKSEL].
    8. Issue SEND_TUNING_BLK Command (CMD19 for SD, CMD21 for MMC).
    9. Wait for IRQSTAT[BRR], buffer read ready, to be set.
    10. Clear IRQSTAT[BRR].
    11. Check SYSCTL2[EXTN] to be cleared.
    12. Check SYSCTL2[SAMPCLKSEL], Sampling Clock Select. It's set value
        indicate tuning procedure success, and clear indicate failure.
        In case of tuning failure, fixed sampling scheme could be used by
        clearing TBCTL[TB_EN].
    
    Fixes: b1f378ab5334 ("mmc: sdhci-of-esdhc: add erratum A008171 support")
    Signed-off-by: Yinbo Zhu <yinbo.zhu@nxp.com>
    Signed-off-by: Yangbo Lu <yangbo.lu@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb9aab7844fc59d6ec6ebcc9ca9362946f36a095
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Dec 6 15:39:12 2019 +0100

    vhost/vsock: accept only packets with the right dst_cid
    
    [ Upstream commit 8a3cc29c316c17de590e3ff8b59f3d6cbfd37b0a ]
    
    When we receive a new packet from the guest, we check if the
    src_cid is correct, but we forgot to check the dst_cid.
    
    The host should accept only packets where dst_cid is
    equal to the host CID.
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 252ac779a46de92f0e695267feca35443d566594
Author: Netanel Belgazal <netanel@amazon.com>
Date:   Tue Dec 10 11:27:44 2019 +0000

    net: ena: fix napi handler misbehavior when the napi budget is zero
    
    [ Upstream commit 24dee0c7478d1a1e00abdf5625b7f921467325dc ]
    
    In netpoll the napi handler could be called with budget equal to zero.
    Current ENA napi handler doesn't take that into consideration.
    
    The napi handler handles Rx packets in a do-while loop.
    Currently, the budget check happens only after decrementing the
    budget, therefore the napi handler, in rare cases, could run over
    MAX_INT packets.
    
    In addition to that, this moves all budget related variables to int
    calculation and stop mixing u32 to avoid ambiguity
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Netanel Belgazal <netanel@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06067fd5a24b01957d5ca67192280f9e80b4bd6f
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Fri Dec 13 10:06:30 2019 +0000

    net: phylink: fix interface passed to mac_link_up
    
    [ Upstream commit 9b2079c046a9d6c9c73a4ec33816678565ee01f3 ]
    
    A mismerge between the following two commits:
    
    c678726305b9 ("net: phylink: ensure consistent phy interface mode")
    27755ff88c0e ("net: phylink: Add phylink_mac_link_{up, down} wrapper functions")
    
    resulted in the wrong interface being passed to the mac_link_up()
    function. Fix this up.
    
    Fixes: b4b12b0d2f02 ("Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fa4ec03512d603efdd22d7a9bc45a22a99d122f
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Wed Dec 11 22:20:16 2019 +0800

    ipv6/addrconf: only check invalid header values when NETLINK_F_STRICT_CHK is set
    
    [ Upstream commit 2beb6d2901a3f73106485d560c49981144aeacb1 ]
    
    In commit 4b1373de73a3 ("net: ipv6: addr: perform strict checks also for
    doit handlers") we add strict check for inet6_rtm_getaddr(). But we did
    the invalid header values check before checking if NETLINK_F_STRICT_CHK
    is set. This may break backwards compatibility if user already set the
    ifm->ifa_prefixlen, ifm->ifa_flags, ifm->ifa_scope in their netlink code.
    
    I didn't move the nlmsg_len check because I thought it's a valid check.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Fixes: 4b1373de73a3 ("net: ipv6: addr: perform strict checks also for doit handlers")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f54d3349a21d0942531ff0f87001086fe31e731
Author: Jonathan Lemon <jonathan.lemon@gmail.com>
Date:   Tue Dec 10 08:39:46 2019 -0800

    bnxt: apply computed clamp value for coalece parameter
    
    [ Upstream commit 6adc4601c2a1ac87b4ab8ed0cb55db6efd0264e8 ]
    
    After executing "ethtool -C eth0 rx-usecs-irq 0", the box becomes
    unresponsive, likely due to interrupt livelock.  It appears that
    a minimum clamp value for the irq timer is computed, but is never
    applied.
    
    Fix by applying the corrected clamp value.
    
    Fixes: 74706afa712d ("bnxt_en: Update interrupt coalescing logic.")
    Signed-off-by: Jonathan Lemon <jonathan.lemon@gmail.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de2dd4bc5e665fdbd2d5dde24b33938093cb81f5
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Dec 11 08:23:00 2019 +0000

    gtp: do not allow adding duplicate tid and ms_addr pdp context
    
    [ Upstream commit 6b01b1d9b2d38dc84ac398bfe9f00baff06a31e5 ]
    
    GTP RX packet path lookups pdp context with TID. If duplicate TID pdp
    contexts are existing in the list, it couldn't select correct pdp context.
    So, TID value  should be unique.
    GTP TX packet path lookups pdp context with ms_addr. If duplicate ms_addr pdp
    contexts are existing in the list, it couldn't select correct pdp context.
    So, ms_addr value should be unique.
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c185e1d6e2752a4b656c3ca878c525fa11f55757
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Dec 11 08:23:34 2019 +0000

    gtp: fix an use-after-free in ipv4_pdp_find()
    
    [ Upstream commit 94dc550a5062030569d4aa76e10e50c8fc001930 ]
    
    ipv4_pdp_find() is called in TX packet path of GTP.
    ipv4_pdp_find() internally uses gtp->tid_hash to lookup pdp context.
    In the current code, gtp->tid_hash and gtp->addr_hash are freed by
    ->dellink(), which is gtp_dellink().
    But gtp_dellink() would be called while packets are processing.
    So, gtp_dellink() should not free gtp->tid_hash and gtp->addr_hash.
    Instead, dev->priv_destructor() would be used because this callback
    is called after all packet processing safely.
    
    Test commands:
        ip link add veth1 type veth peer name veth2
        ip a a 172.0.0.1/24 dev veth1
        ip link set veth1 up
        ip a a 172.99.0.1/32 dev lo
    
        gtp-link add gtp1 &
    
        gtp-tunnel add gtp1 v1 200 100 172.99.0.2 172.0.0.2
        ip r a  172.99.0.2/32 dev gtp1
        ip link set gtp1 mtu 1500
    
        ip netns add ns2
        ip link set veth2 netns ns2
        ip netns exec ns2 ip a a 172.0.0.2/24 dev veth2
        ip netns exec ns2 ip link set veth2 up
        ip netns exec ns2 ip a a 172.99.0.2/32 dev lo
        ip netns exec ns2 ip link set lo up
    
        ip netns exec ns2 gtp-link add gtp2 &
        ip netns exec ns2 gtp-tunnel add gtp2 v1 100 200 172.99.0.1 172.0.0.1
        ip netns exec ns2 ip r a 172.99.0.1/32 dev gtp2
        ip netns exec ns2 ip link set gtp2 mtu 1500
    
        hping3 172.99.0.2 -2 --flood &
        ip link del gtp1
    
    Splat looks like:
    [   72.568081][ T1195] BUG: KASAN: use-after-free in ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.568916][ T1195] Read of size 8 at addr ffff8880b9a35d28 by task hping3/1195
    [   72.569631][ T1195]
    [   72.569861][ T1195] CPU: 2 PID: 1195 Comm: hping3 Not tainted 5.5.0-rc1 #199
    [   72.570547][ T1195] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   72.571438][ T1195] Call Trace:
    [   72.571764][ T1195]  dump_stack+0x96/0xdb
    [   72.572171][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.572761][ T1195]  print_address_description.constprop.5+0x1be/0x360
    [   72.573400][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.573971][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.574544][ T1195]  __kasan_report+0x12a/0x16f
    [   72.575014][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.575593][ T1195]  kasan_report+0xe/0x20
    [   72.576004][ T1195]  ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.576577][ T1195]  gtp_build_skb_ip4+0x199/0x1420 [gtp]
    [ ... ]
    [   72.647671][ T1195] BUG: unable to handle page fault for address: ffff8880b9a35d28
    [   72.648512][ T1195] #PF: supervisor read access in kernel mode
    [   72.649158][ T1195] #PF: error_code(0x0000) - not-present page
    [   72.649849][ T1195] PGD a6c01067 P4D a6c01067 PUD 11fb07067 PMD 11f939067 PTE 800fffff465ca060
    [   72.652958][ T1195] Oops: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   72.653834][ T1195] CPU: 2 PID: 1195 Comm: hping3 Tainted: G    B             5.5.0-rc1 #199
    [   72.668062][ T1195] RIP: 0010:ipv4_pdp_find.isra.12+0x86/0x170 [gtp]
    [ ... ]
    [   72.679168][ T1195] Call Trace:
    [   72.679603][ T1195]  gtp_build_skb_ip4+0x199/0x1420 [gtp]
    [   72.681915][ T1195]  ? ipv4_pdp_find.isra.12+0x170/0x170 [gtp]
    [   72.682513][ T1195]  ? lock_acquire+0x164/0x3b0
    [   72.682966][ T1195]  ? gtp_dev_xmit+0x35e/0x890 [gtp]
    [   72.683481][ T1195]  gtp_dev_xmit+0x3c2/0x890 [gtp]
    [ ... ]
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a3aa30ec4287e3e2c0113f0d58192a8832950cc
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Wed Dec 11 14:26:27 2019 -0800

    hv_netvsc: Fix tx_table init in rndis_set_subchannel()
    
    [ Upstream commit c39ea5cba5a2e97fc01b78c85208bf31383b399c ]
    
    Host can provide send indirection table messages anytime after RSS is
    enabled by calling rndis_filter_set_rss_param(). So the host provided
    table values may be overwritten by the initialization in
    rndis_set_subchannel().
    
    To prevent this problem, move the tx_table initialization before calling
    rndis_filter_set_rss_param().
    
    Fixes: a6fb6aa3cfa9 ("hv_netvsc: Set tx_table to equal weight after subchannels open")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a0ee9f2d5c0076e6d45d40a1b50c0411edef40a
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 13 18:20:41 2019 -0800

    tcp/dccp: fix possible race __inet_lookup_established()
    
    [ Upstream commit 8dbd76e79a16b45b2ccb01d2f2e08dbf64e71e40 ]
    
    Michal Kubecek and Firo Yang did a very nice analysis of crashes
    happening in __inet_lookup_established().
    
    Since a TCP socket can go from TCP_ESTABLISH to TCP_LISTEN
    (via a close()/socket()/listen() cycle) without a RCU grace period,
    I should not have changed listeners linkage in their hash table.
    
    They must use the nulls protocol (Documentation/RCU/rculist_nulls.txt),
    so that a lookup can detect a socket in a hash list was moved in
    another one.
    
    Since we added code in commit d296ba60d8e2 ("soreuseport: Resolve
    merge conflict for v4/v6 ordering fix"), we have to add
    hlist_nulls_add_tail_rcu() helper.
    
    Fixes: 3b24d854cb35 ("tcp/dccp: do not touch listener sk_refcnt under synflood")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Michal Kubecek <mkubecek@suse.cz>
    Reported-by: Firo Yang <firo.yang@suse.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Link: https://lore.kernel.org/netdev/20191120083919.GH27852@unicorn.suse.cz/
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 703761d85193e0c31d57941790a27a7ac4ba7214
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 12 12:55:29 2019 -0800

    tcp: do not send empty skb from tcp_write_xmit()
    
    [ Upstream commit 1f85e6267caca44b30c54711652b0726fadbb131 ]
    
    Backport of commit fdfc5c8594c2 ("tcp: remove empty skb from
    write queue in error cases") in linux-4.14 stable triggered
    various bugs. One of them has been fixed in commit ba2ddb43f270
    ("tcp: Don't dequeue SYN/FIN-segments from write-queue"), but
    we still have crashes in some occasions.
    
    Root-cause is that when tcp_sendmsg() has allocated a fresh
    skb and could not append a fragment before being blocked
    in sk_stream_wait_memory(), tcp_write_xmit() might be called
    and decide to send this fresh and empty skb.
    
    Sending an empty packet is not only silly, it might have caused
    many issues we had in the past with tp->packets_out being
    out of sync.
    
    Fixes: c65f7f00c587 ("[TCP]: Simplify SKB data portion allocation with NETIF_F_SG.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Christoph Paasch <cpaasch@apple.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Cc: Jason Baron <jbaron@akamai.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2610008fb5b0c6effac244b7bfb7d0bf82c8b9f
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Fri Dec 6 15:44:55 2019 -0800

    bonding: fix active-backup transition after link failure
    
    [ Upstream commit 5d485ed88d48f8101a2067348e267c0aaf4ed486 ]
    
    After the recent fix in commit 1899bb325149 ("bonding: fix state
    transition issue in link monitoring"), the active-backup mode with
    miimon initially come-up fine but after a link-failure, both members
    transition into backup state.
    
    Following steps to reproduce the scenario (eth1 and eth2 are the
    slaves of the bond):
    
        ip link set eth1 up
        ip link set eth2 down
        sleep 1
        ip link set eth2 up
        ip link set eth1 down
        cat /sys/class/net/eth1/bonding_slave/state
        cat /sys/class/net/eth2/bonding_slave/state
    
    Fixes: 1899bb325149 ("bonding: fix state transition issue in link monitoring")
    CC: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85ee5098dd03873ff98e9f4b3cd55c9a302a4c21
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Dec 11 08:23:48 2019 +0000

    gtp: avoid zero size hashtable
    
    [ Upstream commit 6a902c0f31993ab02e1b6ea7085002b9c9083b6a ]
    
    GTP default hashtable size is 1024 and userspace could set specific
    hashtable size with IFLA_GTP_PDP_HASHSIZE. If hashtable size is set to 0
    from userspace,  hashtable will not work and panic will occur.
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b040f61ef66970f2c1f7c174d3c5a111e7c969e5
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Dec 11 08:23:17 2019 +0000

    gtp: fix wrong condition in gtp_genl_dump_pdp()
    
    [ Upstream commit 94a6d9fb88df43f92d943c32b84ce398d50bf49f ]
    
    gtp_genl_dump_pdp() is ->dumpit() callback of GTP module and it is used
    to dump pdp contexts. it would be re-executed because of dump packet size.
    
    If dump packet size is too big, it saves current dump pointer
    (gtp interface pointer, bucket, TID value) then it restarts dump from
    last pointer.
    Current GTP code allows adding zero TID pdp context but dump code
    ignores zero TID value. So, last dump pointer will not be found.
    
    In addition, this patch adds missing rcu_read_lock() in
    gtp_genl_dump_pdp().
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5b17e9d835d8d1d291b947dcab347c799efe668
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue Dec 10 22:33:05 2019 +0000

    net: marvell: mvpp2: phylink requires the link interrupt
    
    [ Upstream commit f3f2364ea14d1cf6bf966542f31eadcf178f1577 ]
    
    phylink requires the MAC to report when its link status changes when
    operating in inband modes.  Failure to report link status changes
    means that phylink has no idea when the link events happen, which
    results in either the network interface's carrier remaining up or
    remaining permanently down.
    
    For example, with a fiber module, if the interface is brought up and
    link is initially established, taking the link down at the far end
    will cut the optical power.  The SFP module's LOS asserts, we
    deactivate the link, and the network interface reports no carrier.
    
    When the far end is brought back up, the SFP module's LOS deasserts,
    but the MAC may be slower to establish link.  If this happens (which
    in my tests is a certainty) then phylink never hears that the MAC
    has established link with the far end, and the network interface is
    stuck reporting no carrier.  This means the interface is
    non-functional.
    
    Avoiding the link interrupt when we have phylink is basically not
    an option, so remove the !port->phylink from the test.
    
    Fixes: 4bb043262878 ("net: mvpp2: phylink support")
    Tested-by: Sven Auhagen <sven.auhagen@voleatech.de>
    Tested-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24a7f6f1aed31441e07fce105e306671b92a6de2
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Fri Dec 27 03:11:13 2019 +0200

    net: dsa: sja1105: Reconcile the meaning of TPID and TPID2 for E/T and P/Q/R/S
    
    [ Upstream commit 54fa49ee88138756df0fcf867cb1849904710a8c ]
    
    For first-generation switches (SJA1105E and SJA1105T):
    - TPID means C-Tag (typically 0x8100)
    - TPID2 means S-Tag (typically 0x88A8)
    
    While for the second generation switches (SJA1105P, SJA1105Q, SJA1105R,
    SJA1105S) it is the other way around:
    - TPID means S-Tag (typically 0x88A8)
    - TPID2 means C-Tag (typically 0x8100)
    
    In other words, E/T tags untagged traffic with TPID, and P/Q/R/S with
    TPID2.
    
    So the patch mentioned below fixed VLAN filtering for P/Q/R/S, but broke
    it for E/T.
    
    We strive for a common code path for all switches in the family, so just
    lie in the static config packing functions that TPID and TPID2 are at
    swapped bit offsets than they actually are, for P/Q/R/S. This will make
    both switches understand TPID to be ETH_P_8021Q and TPID2 to be
    ETH_P_8021AD. The meaning from the original E/T was chosen over P/Q/R/S
    because E/T is actually the one with public documentation available
    (UM10944.pdf).
    
    Fixes: f9a1a7646c0d ("net: dsa: sja1105: Reverse TPID and TPID2")
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82cb396aeefac27c2e946b8aaaf1cb4d46b65447
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:16 2019 +0800

    net/dst: do not confirm neighbor for vxlan and geneve pmtu update
    
    [ Upstream commit f081042d128a0c7acbd67611def62e1b52e2d294 ]
    
    When do IPv6 tunnel PMTU update and calls __ip6_rt_update_pmtu() in the end,
    we should not call dst_confirm_neigh() as there is no two-way communication.
    
    So disable the neigh confirm for vxlan and geneve pmtu update.
    
    v5: No change.
    v4: No change.
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Fixes: a93bf0ff4490 ("vxlan: update skb dst pmtu on tx path")
    Fixes: 52a589d51f10 ("geneve: update skb dst pmtu on tx path")
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Tested-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57a5af98a28531402172d63137cda2e62073026a
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:15 2019 +0800

    sit: do not confirm neighbor when do pmtu update
    
    [ Upstream commit 4d42df46d6372ece4cb4279870b46c2ea7304a47 ]
    
    When do IPv6 tunnel PMTU update and calls __ip6_rt_update_pmtu() in the end,
    we should not call dst_confirm_neigh() as there is no two-way communication.
    
    v5: No change.
    v4: No change.
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcf4fe619c778bf055ef0e2c91ee65cc7b028e5f
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:14 2019 +0800

    vti: do not confirm neighbor when do pmtu update
    
    [ Upstream commit 8247a79efa2f28b44329f363272550c1738377de ]
    
    When do IPv6 tunnel PMTU update and calls __ip6_rt_update_pmtu() in the end,
    we should not call dst_confirm_neigh() as there is no two-way communication.
    
    Although vti and vti6 are immune to this problem because they are IFF_NOARP
    interfaces, as Guillaume pointed. There is still no sense to confirm neighbour
    here.
    
    v5: Update commit description.
    v4: No change.
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 020546ec66665c4c80edb847bbcd5b4937bdddff
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:13 2019 +0800

    tunnel: do not confirm neighbor when do pmtu update
    
    [ Upstream commit 7a1592bcb15d71400a98632727791d1e68ea0ee8 ]
    
    When do tunnel PMTU update and calls __ip6_rt_update_pmtu() in the end,
    we should not call dst_confirm_neigh() as there is no two-way communication.
    
    v5: No Change.
    v4: Update commit description
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Fixes: 0dec879f636f ("net: use dst_confirm_neigh for UDP, RAW, ICMP, L2TP")
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Tested-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70f10ed21e29b75fe4f152856cc4597db07e2595
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:12 2019 +0800

    net/dst: add new function skb_dst_update_pmtu_no_confirm
    
    [ Upstream commit 07dc35c6e3cc3c001915d05f5bf21f80a39a0970 ]
    
    Add a new function skb_dst_update_pmtu_no_confirm() for callers who need
    update pmtu but should not do neighbor confirm.
    
    v5: No change.
    v4: No change.
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 048478ddec29dfe8fe72e01b49d2200bd87f5cc5
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:11 2019 +0800

    gtp: do not confirm neighbor when do pmtu update
    
    [ Upstream commit 6e9105c73f8d2163d12d5dfd762fd75483ed30f5 ]
    
    When do IPv6 tunnel PMTU update and calls __ip6_rt_update_pmtu() in the end,
    we should not call dst_confirm_neigh() as there is no two-way communication.
    
    Although GTP only support ipv4 right now, and __ip_rt_update_pmtu() does not
    call dst_confirm_neigh(), we still set it to false to keep consistency with
    IPv6 code.
    
    v5: No change.
    v4: No change.
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 871d063728649733c3d6fac2fe210f07b186f0a7
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:10 2019 +0800

    ip6_gre: do not confirm neighbor when do pmtu update
    
    [ Upstream commit 675d76ad0ad5bf41c9a129772ef0aba8f57ea9a7 ]
    
    When we do ipv6 gre pmtu update, we will also do neigh confirm currently.
    This will cause the neigh cache be refreshed and set to REACHABLE before
    xmit.
    
    But if the remote mac address changed, e.g. device is deleted and recreated,
    we will not able to notice this and still use the old mac address as the neigh
    cache is REACHABLE.
    
    Fix this by disable neigh confirm when do pmtu update
    
    v5: No change.
    v4: No change.
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d49ce85cad06d00455f80030333131cb93cf1619
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sun Dec 22 10:51:09 2019 +0800

    net: add bool confirm_neigh parameter for dst_ops.update_pmtu
    
    [ Upstream commit bd085ef678b2cc8c38c105673dfe8ff8f5ec0c57 ]
    
    The MTU update code is supposed to be invoked in response to real
    networking events that update the PMTU. In IPv6 PMTU update function
    __ip6_rt_update_pmtu() we called dst_confirm_neigh() to update neighbor
    confirmed time.
    
    But for tunnel code, it will call pmtu before xmit, like:
      - tnl_update_pmtu()
        - skb_dst_update_pmtu()
          - ip6_rt_update_pmtu()
            - __ip6_rt_update_pmtu()
              - dst_confirm_neigh()
    
    If the tunnel remote dst mac address changed and we still do the neigh
    confirm, we will not be able to update neigh cache and ping6 remote
    will failed.
    
    So for this ip_tunnel_xmit() case, _EVEN_ if the MTU is changed, we
    should not be invoking dst_confirm_neigh() as we have no evidence
    of successful two-way communication at this point.
    
    On the other hand it is also important to keep the neigh reachability fresh
    for TCP flows, so we cannot remove this dst_confirm_neigh() call.
    
    To fix the issue, we have to add a new bool parameter for dst_ops.update_pmtu
    to choose whether we should do neigh update or not. I will add the parameter
    in this patch and set all the callers to true to comply with the previous
    way, and fix the tunnel code one by one on later patches.
    
    v5: No change.
    v4: No change.
    v3: Do not remove dst_confirm_neigh, but add a new bool parameter in
        dst_ops.update_pmtu to control whether we should do neighbor confirm.
        Also split the big patch to small ones for each area.
    v2: Remove dst_confirm_neigh in __ip6_rt_update_pmtu.
    
    Suggested-by: David Miller <davem@davemloft.net>
    Reviewed-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29e92a154df20a1199a3e0737699b797511eb6ba
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Sun Dec 29 13:40:23 2019 +0200

    mlxsw: spectrum: Use dedicated policer for VRRP packets
    
    [ Upstream commit acca789a358cc960be3937851d7de6591c79d6c2 ]
    
    Currently, VRRP packets and packets that hit exceptions during routing
    (e.g., MTU error) are policed using the same policer towards the CPU.
    This means, for example, that misconfiguration of the MTU on a routed
    interface can prevent VRRP packets from reaching the CPU, which in turn
    can cause the VRRP daemon to assume it is the Master router.
    
    Fix this by using a dedicated policer for VRRP packets.
    
    Fixes: 11566d34f895 ("mlxsw: spectrum: Add VRRP traps")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Alex Veber <alexve@mellanox.com>
    Tested-by: Alex Veber <alexve@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a54f9b5729dd88d356c57e2e957fa9533a2dbb5
Author: Amit Cohen <amitc@mellanox.com>
Date:   Sun Dec 29 13:40:22 2019 +0200

    mlxsw: spectrum_router: Skip loopback RIFs during MAC validation
    
    [ Upstream commit 314bd842d98e1035cc40b671a71e07f48420e58f ]
    
    When a router interface (RIF) is created the MAC address of the backing
    netdev is verified to have the same MSBs as existing RIFs. This is
    required in order to avoid changing existing RIF MAC addresses that all
    share the same MSBs.
    
    Loopback RIFs are special in this regard as they do not have a MAC
    address, given they are only used to loop packets from the overlay to
    the underlay.
    
    Without this change, an error is returned when trying to create a RIF
    after the creation of a GRE tunnel that is represented by a loopback
    RIF. 'rif->dev->dev_addr' points to the GRE device's local IP, which
    does not share the same MSBs as physical interfaces. Adding an IP
    address to any physical interface results in:
    
    Error: mlxsw_spectrum: All router interface MAC addresses must have the
    same prefix.
    
    Fix this by skipping loopback RIFs during MAC validation.
    
    Fixes: 74bc99397438 ("mlxsw: spectrum_router: Veto unsupported RIF MAC addresses")
    Signed-off-by: Amit Cohen <amitc@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d96309527c83d6d5fe4f429b675c70ca0f33829
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Tue Dec 10 02:49:13 2019 -0500

    bnxt_en: Add missing devlink health reporters for VFs.
    
    [ Upstream commit 7e334fc8003c7a38372cc98e7be6082670a47d29 ]
    
    The VF driver also needs to create the health reporters since
    VFs are also involved in firmware reset and recovery.  Modify
    bnxt_dl_register() and bnxt_dl_unregister() so that they can
    be called by the VFs to register/unregister devlink.  Only the PF
    will register the devlink parameters.  With devlink registered,
    we can now create the health reporters on the VFs.
    
    Fixes: 6763c779c2d8 ("bnxt_en: Add new FW devlink_health_reporter")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5575705b998e7bd47acfbfa9271ee946b2876ec8
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Tue Dec 10 02:49:12 2019 -0500

    bnxt_en: Fix the logic that creates the health reporters.
    
    [ Upstream commit 937f188c1f4f89b3fa93ba31fc8587dc1fb14a22 ]
    
    Fix the logic to properly check the fw capabilities and create the
    devlink health reporters only when needed.  The current code creates
    the reporters unconditionally as long as bp->fw_health is valid, and
    that's not correct.
    
    Call bnxt_dl_fw_reporters_create() directly from the init and reset
    code path instead of from bnxt_dl_register().  This allows the
    reporters to be adjusted when capabilities change.  The same
    applies to bnxt_dl_fw_reporters_destroy().
    
    Fixes: 6763c779c2d8 ("bnxt_en: Add new FW devlink_health_reporter")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02aa518984e9879643aeefec95a7d09fba811179
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Tue Dec 10 02:49:11 2019 -0500

    bnxt_en: Remove unnecessary NULL checks for fw_health
    
    [ Upstream commit 0797c10d2d1fa0d6f14612404781b348fc757c3e ]
    
    After fixing the allocation of bp->fw_health in the previous patch,
    the driver will not go through the fw reset and recovery code paths
    if bp->fw_health allocation fails.  So we can now remove the
    unnecessary NULL checks.
    
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f750698a0a8e3b559a4519edf7ec9e1ac2205aa
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Tue Dec 10 02:49:10 2019 -0500

    bnxt_en: Fix bp->fw_health allocation and free logic.
    
    [ Upstream commit 8280b38e01f71e0f89389ccad3fa43b79e57c604 ]
    
    bp->fw_health needs to be allocated for either the firmware initiated
    reset feature or the driver initiated error recovery feature.  The
    current code is not allocating bp->fw_health for all the necessary cases.
    This patch corrects the logic to allocate bp->fw_health correctly when
    needed.  If allocation fails, we clear the feature flags.
    
    We also add the the missing kfree(bp->fw_health) when the driver is
    unloaded.  If we get an async reset message from the firmware, we also
    need to make sure that we have a valid bp->fw_health before proceeding.
    
    Fixes: 07f83d72d238 ("bnxt_en: Discover firmware error recovery capabilities.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a76837dd731b68cc3b5690470bc9efa2a8e3801a
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Tue Dec 10 02:49:09 2019 -0500

    bnxt_en: Return error if FW returns more data than dump length
    
    [ Upstream commit c74751f4c39232c31214ec6a3bc1c7e62f5c728b ]
    
    If any change happened in the configuration of VF in VM while
    collecting live dump, there could be a race and firmware can return
    more data than allocated dump length. Fix it by keeping track of
    the accumulated core dump length copied so far and abort the copy
    with error code if the next chunk of core dump will exceed the
    original dump length.
    
    Fixes: 6c5657d085ae ("bnxt_en: Add support for ethtool get dump.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afc13aa9400b5d3d54efa4b4183168a9a3e03c12
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Tue Dec 10 02:49:08 2019 -0500

    bnxt_en: Free context memory in the open path if firmware has been reset.
    
    [ Upstream commit 325f85f37e5b35807d86185bdf2c64d2980c44ba ]
    
    This will trigger new context memory to be rediscovered and allocated
    during the re-probe process after a firmware reset.  Without this, the
    newly reset firmware does not have valid context memory and the driver
    will eventually fail to allocate some resources.
    
    Fixes: ec5d31e3c15d ("bnxt_en: Handle firmware reset status during IF_UP.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 972d2ca72c8cca730e0ce349e935acf7cea48b9a
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Tue Dec 10 02:49:07 2019 -0500

    bnxt_en: Fix MSIX request logic for RDMA driver.
    
    [ Upstream commit 0c722ec0a289c7f6b53f89bad1cfb7c4db3f7a62 ]
    
    The logic needs to check both bp->total_irqs and the reserved IRQs in
    hw_resc->resv_irqs if applicable and see if both are enough to cover
    the L2 and RDMA requested vectors.  The current code is only checking
    bp->total_irqs and can fail in some code paths, such as the TX timeout
    code path with the RDMA driver requesting vectors after recovery.  In
    this code path, we have not reserved enough MSIX resources for the
    RDMA driver yet.
    
    Fixes: 75720e6323a1 ("bnxt_en: Keep track of reserved IRQs.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff4839120cbe24c2cbf4339b17771c7140e81720
Author: Antonio Messina <amessina@google.com>
Date:   Thu Dec 19 15:08:03 2019 +0100

    udp: fix integer overflow while computing available space in sk_rcvbuf
    
    [ Upstream commit feed8a4fc9d46c3126fb9fcae0e9248270c6321a ]
    
    When the size of the receive buffer for a socket is close to 2^31 when
    computing if we have enough space in the buffer to copy a packet from
    the queue to the buffer we might hit an integer overflow.
    
    When an user set net.core.rmem_default to a value close to 2^31 UDP
    packets are dropped because of this overflow. This can be visible, for
    instance, with failure to resolve hostnames.
    
    This can be fixed by casting sk_rcvbuf (which is an int) to unsigned
    int, similarly to how it is done in TCP.
    
    Signed-off-by: Antonio Messina <amessina@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c5fa9d3c87497e5f753ae48f692e84e8a732e9b
Author: Cambda Zhu <cambda@linux.alibaba.com>
Date:   Fri Dec 27 16:52:37 2019 +0800

    tcp: Fix highest_sack and highest_sack_seq
    
    [ Upstream commit 853697504de043ff0bfd815bd3a64de1dce73dc7 ]
    
    >From commit 50895b9de1d3 ("tcp: highest_sack fix"), the logic about
    setting tp->highest_sack to the head of the send queue was removed.
    Of course the logic is error prone, but it is logical. Before we
    remove the pointer to the highest sack skb and use the seq instead,
    we need to set tp->highest_sack to NULL when there is no skb after
    the last sack, and then replace NULL with the real skb when new skb
    inserted into the rtx queue, because the NULL means the highest sack
    seq is tp->snd_nxt. If tp->highest_sack is NULL and new data sent,
    the next ACK with sack option will increase tp->reordering unexpectedly.
    
    This patch sets tp->highest_sack to the tail of the rtx queue if
    it's NULL and new data is sent. The patch keeps the rule that the
    highest_sack can only be maintained by sack processing, except for
    this only case.
    
    Fixes: 50895b9de1d3 ("tcp: highest_sack fix")
    Signed-off-by: Cambda Zhu <cambda@linux.alibaba.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfa2e0cd3dfda64fde43c3dca3aeba298d2fe7ad
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Fri Dec 27 03:26:27 2019 +0100

    ptp: fix the race between the release of ptp_clock and cdev
    
    [ Upstream commit a33121e5487b424339636b25c35d3a180eaa5f5e ]
    
    In a case when a ptp chardev (like /dev/ptp0) is open but an underlying
    device is removed, closing this file leads to a race. This reproduces
    easily in a kvm virtual machine:
    
    ts# cat openptp0.c
    int main() { ... fp = fopen("/dev/ptp0", "r"); ... sleep(10); }
    ts# uname -r
    5.5.0-rc3-46cf053e
    ts# cat /proc/cmdline
    ... slub_debug=FZP
    ts# modprobe ptp_kvm
    ts# ./openptp0 &
    [1] 670
    opened /dev/ptp0, sleeping 10s...
    ts# rmmod ptp_kvm
    ts# ls /dev/ptp*
    ls: cannot access '/dev/ptp*': No such file or directory
    ts# ...woken up
    [   48.010809] general protection fault: 0000 [#1] SMP
    [   48.012502] CPU: 6 PID: 658 Comm: openptp0 Not tainted 5.5.0-rc3-46cf053e #25
    [   48.014624] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), ...
    [   48.016270] RIP: 0010:module_put.part.0+0x7/0x80
    [   48.017939] RSP: 0018:ffffb3850073be00 EFLAGS: 00010202
    [   48.018339] RAX: 000000006b6b6b6b RBX: 6b6b6b6b6b6b6b6b RCX: ffff89a476c00ad0
    [   48.018936] RDX: fffff65a08d3ea08 RSI: 0000000000000247 RDI: 6b6b6b6b6b6b6b6b
    [   48.019470] ...                                              ^^^ a slub poison
    [   48.023854] Call Trace:
    [   48.024050]  __fput+0x21f/0x240
    [   48.024288]  task_work_run+0x79/0x90
    [   48.024555]  do_exit+0x2af/0xab0
    [   48.024799]  ? vfs_write+0x16a/0x190
    [   48.025082]  do_group_exit+0x35/0x90
    [   48.025387]  __x64_sys_exit_group+0xf/0x10
    [   48.025737]  do_syscall_64+0x3d/0x130
    [   48.026056]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   48.026479] RIP: 0033:0x7f53b12082f6
    [   48.026792] ...
    [   48.030945] Modules linked in: ptp i6300esb watchdog [last unloaded: ptp_kvm]
    [   48.045001] Fixing recursive fault but reboot is needed!
    
    This happens in:
    
    static void __fput(struct file *file)
    {   ...
        if (file->f_op->release)
            file->f_op->release(inode, file); <<< cdev is kfree'd here
        if (unlikely(S_ISCHR(inode->i_mode) && inode->i_cdev != NULL &&
                 !(mode & FMODE_PATH))) {
            cdev_put(inode->i_cdev); <<< cdev fields are accessed here
    
    Namely:
    
    __fput()
      posix_clock_release()
        kref_put(&clk->kref, delete_clock) <<< the last reference
          delete_clock()
            delete_ptp_clock()
              kfree(ptp) <<< cdev is embedded in ptp
      cdev_put
        module_put(p->owner) <<< *p is kfree'd, bang!
    
    Here cdev is embedded in posix_clock which is embedded in ptp_clock.
    The race happens because ptp_clock's lifetime is controlled by two
    refcounts: kref and cdev.kobj in posix_clock. This is wrong.
    
    Make ptp_clock's sysfs device a parent of cdev with cdev_device_add()
    created especially for such cases. This way the parent device with its
    ptp_clock is not released until all references to the cdev are released.
    This adds a requirement that an initialized but not exposed struct
    device should be provided to posix_clock_register() by a caller instead
    of a simple dev_t.
    
    This approach was adopted from the commit 72139dfa2464 ("watchdog: Fix
    the race between the release of watchdog_core_data and cdev"). See
    details of the implementation in the commit 233ed09d7fda ("chardev: add
    helper function to register char devs with a struct device").
    
    Link: https://lore.kernel.org/linux-fsdevel/20191125125342.6189-1-vdronov@redhat.com/T/#u
    Analyzed-by: Stephen Johnston <sjohnsto@redhat.com>
    Analyzed-by: Vern Lovejoy <vlovejoy@redhat.com>
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80cd0b9748adab4ee142ee72d06d5270c67fd32a
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Thu Dec 26 20:01:01 2019 +0100

    net: stmmac: dwmac-meson8b: Fix the RGMII TX delay on Meson8b/8m2 SoCs
    
    [ Upstream commit bd6f48546b9cb7a785344fc78058c420923d7ed8 ]
    
    GXBB and newer SoCs use the fixed FCLK_DIV2 (1GHz) clock as input for
    the m250_sel clock. Meson8b and Meson8m2 use MPLL2 instead, whose rate
    can be adjusted at runtime.
    
    So far we have been running MPLL2 with ~250MHz (and the internal
    m250_div with value 1), which worked enough that we could transfer data
    with an TX delay of 4ns. Unfortunately there is high packet loss with
    an RGMII PHY when transferring data (receiving data works fine though).
    Odroid-C1's u-boot is running with a TX delay of only 2ns as well as
    the internal m250_div set to 2 - no lost (TX) packets can be observed
    with that setting in u-boot.
    
    Manual testing has shown that the TX packet loss goes away when using
    the following settings in Linux (the vendor kernel uses the same
    settings):
    - MPLL2 clock set to ~500MHz
    - m250_div set to 2
    - TX delay set to 2ns on the MAC side
    
    Update the m250_div divider settings to only accept dividers greater or
    equal 2 to fix the TX delay generated by the MAC.
    
    iperf3 results before the change:
    [ ID] Interval           Transfer     Bitrate         Retr
    [  5]   0.00-10.00  sec   182 MBytes   153 Mbits/sec  514      sender
    [  5]   0.00-10.00  sec   182 MBytes   152 Mbits/sec           receiver
    
    iperf3 results after the change (including an updated TX delay of 2ns):
    [ ID] Interval           Transfer     Bitrate         Retr  Cwnd
    [  5]   0.00-10.00  sec   927 MBytes   778 Mbits/sec    0      sender
    [  5]   0.00-10.01  sec   927 MBytes   777 Mbits/sec           receiver
    
    Fixes: 4f6a71b84e1afd ("net: stmmac: dwmac-meson8b: fix internal RGMII clock configuration")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebbadeab4460889fca9198f74273ae65a38971ad
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Dec 23 11:13:24 2019 -0800

    net_sched: sch_fq: properly set sk->sk_pacing_status
    
    [ Upstream commit bb3d0b8bf5be61ab1d6f472c43cbf34de17e796b ]
    
    If fq_classify() recycles a struct fq_flow because
    a socket structure has been reallocated, we do not
    set sk->sk_pacing_status immediately, but later if the
    flow becomes detached.
    
    This means that any flow requiring pacing (BBR, or SO_MAX_PACING_RATE)
    might fallback to TCP internal pacing, which requires a per-socket
    high resolution timer, and therefore more cpu cycles.
    
    Fixes: 218af599fa63 ("tcp: internal implementation for pacing")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c40e059513e4846ddf807f07f381ac54b979a6c8
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Sat Dec 28 16:36:58 2019 +0100

    net/sched: add delete_empty() to filters and use it in cls_flower
    
    [ Upstream commit a5b72a083da197b493c7ed1e5730d62d3199f7d6 ]
    
    Revert "net/sched: cls_u32: fix refcount leak in the error path of
    u32_change()", and fix the u32 refcount leak in a more generic way that
    preserves the semantic of rule dumping.
    On tc filters that don't support lockless insertion/removal, there is no
    need to guard against concurrent insertion when a removal is in progress.
    Therefore, for most of them we can avoid a full walk() when deleting, and
    just decrease the refcount, like it was done on older Linux kernels.
    This fixes situations where walk() was wrongly detecting a non-empty
    filter, like it happened with cls_u32 in the error path of change(), thus
    leading to failures in the following tdc selftests:
    
     6aa7: (filter, u32) Add/Replace u32 with source match and invalid indev
     6658: (filter, u32) Add/Replace u32 with custom hash table and invalid handle
     74c2: (filter, u32) Add/Replace u32 filter with invalid hash table id
    
    On cls_flower, and on (future) lockless filters, this check is necessary:
    move all the check_empty() logic in a callback so that each filter
    can have its own implementation. For cls_flower, it's sufficient to check
    if no IDRs have been allocated.
    
    This reverts commit 275c44aa194b7159d1191817b20e076f55f0e620.
    
    Changes since v1:
     - document the need for delete_empty() when TCF_PROTO_OPS_DOIT_UNLOCKED
       is used, thanks to Vlad Buslov
     - implement delete_empty() without doing fl_walk(), thanks to Vlad Buslov
     - squash revert and new fix in a single patch, to be nice with bisect
       tests that run tdc on u32 filter, thanks to Dave Miller
    
    Fixes: 275c44aa194b ("net/sched: cls_u32: fix refcount leak in the error path of u32_change()")
    Fixes: 6676d5e416ee ("net: sched: set dedicated tcf_walker flag when tp is empty")
    Suggested-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Suggested-by: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Reviewed-by: Vlad Buslov <vladbu@mellanox.com>
    Tested-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f754ad07751771b4e85f2e821d5a0618a6b861d
Author: Shmulik Ladkani <sladkani@proofpoint.com>
Date:   Wed Dec 25 10:51:01 2019 +0200

    net/sched: act_mirred: Pull mac prior redir to non mac_header_xmit device
    
    [ Upstream commit 70cf3dc7313207816255b9acb0dffb19dae78144 ]
    
    There's no skb_pull performed when a mirred action is set at egress of a
    mac device, with a target device/action that expects skb->data to point
    at the network header.
    
    As a result, either the target device is errornously given an skb with
    data pointing to the mac (egress case), or the net stack receives the
    skb with data pointing to the mac (ingress case).
    
    E.g:
     # tc qdisc add dev eth9 root handle 1: prio
     # tc filter add dev eth9 parent 1: prio 9 protocol ip handle 9 basic \
       action mirred egress redirect dev tun0
    
     (tun0 is a tun device. result: tun0 errornously gets the eth header
      instead of the iph)
    
    Revise the push/pull logic of tcf_mirred_act() to not rely on the
    skb_at_tc_ingress() vs tcf_mirred_act_wants_ingress() comparison, as it
    does not cover all "pull" cases.
    
    Instead, calculate whether the required action on the target device
    requires the data to point at the network header, and compare this to
    whether skb->data points to network header - and make the push/pull
    adjustments as necessary.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Shmulik Ladkani <sladkani@proofpoint.com>
    Tested-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbeec8f00b01644d094bf883b963fb6790b02666
Author: Madalin Bucur <madalin.bucur@oss.nxp.com>
Date:   Mon Dec 23 10:06:10 2019 +0200

    net: phy: aquantia: add suspend / resume ops for AQR105
    
    [ Upstream commit 1c93fb45761e79b3c00080e71523886cefaf351c ]
    
    The suspend/resume code for AQR107 works on AQR105 too.
    This patch fixes issues with the partner not seeing the link down
    when the interface using AQR105 is brought down.
    
    Fixes: bee8259dd31f ("net: phy: add driver for aquantia phy")
    Signed-off-by: Madalin Bucur <madalin.bucur@oss.nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c75efb9e5b6a8c06105a011562939acaeeea48b
Author: Vladyslav Tarasiuk <vladyslavt@mellanox.com>
Date:   Thu Dec 26 10:41:56 2019 +0200

    net/mlxfw: Fix out-of-memory error in mfa2 flash burning
    
    [ Upstream commit a5bcd72e054aabb93ddc51ed8cde36a5bfc50271 ]
    
    The burning process requires to perform internal allocations of large
    chunks of memory. This memory doesn't need to be contiguous and can be
    safely allocated by vzalloc() instead of kzalloc(). This patch changes
    such allocation to avoid possible out-of-memory failure.
    
    Fixes: 410ed13cae39 ("Add the mlxfw module for Mellanox firmware flash process")
    Signed-off-by: Vladyslav Tarasiuk <vladyslavt@mellanox.com>
    Reviewed-by: Aya Levin <ayal@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Tested-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 770247f2b26419303a2a574ddce96e7d45c646b7
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Dec 20 11:24:21 2019 -0800

    net: dsa: bcm_sf2: Fix IP fragment location and behavior
    
    [ Upstream commit 7c3125f0a6ebc17846c5908ad7d6056d66c1c426 ]
    
    The IP fragment is specified through user-defined field as the first
    bit of the first user-defined word. We were previously trying to extract
    it from the user-defined mask which could not possibly work. The ip_frag
    is also supposed to be a boolean, if we do not cast it as such, we risk
    overwriting the next fields in CFP_DATA(6) which would render the rule
    inoperative.
    
    Fixes: 7318166cacad ("net: dsa: bcm_sf2: Add support for ethtool::rxnfc")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49ba803590429e6c82a7c4b78cf0a456b5f270ca
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Mon Dec 30 18:14:08 2019 +0530

    cxgb4/cxgb4vf: fix flow control display for auto negotiation
    
    [ Upstream commit 0caeaf6ad532f9be5a768a158627cb31921cc8b7 ]
    
    As per 802.3-2005, Section Two, Annex 28B, Table 28B-2 [1], when
    _only_ Rx pause is enabled, both symmetric and asymmetric pause
    towards local device must be enabled. Also, firmware returns the local
    device's flow control pause params as part of advertised capabilities
    and negotiated params as part of current link attributes. So, fix up
    ethtool's flow control pause params fetch logic to read from acaps,
    instead of linkattr.
    
    [1] https://standards.ieee.org/standard/802_3-2005.html
    
    Fixes: c3168cabe1af ("cxgb4/cxgbvf: Handle 32-bit fw port capabilities")
    Signed-off-by: Surendra Mobiya <surendra@chelsio.com>
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03c074b26ff95d715c2f48798ac2c03d9d9b80c8
Author: Brian Foster <bfoster@redhat.com>
Date:   Tue Dec 3 07:53:15 2019 -0800

    xfs: fix mount failure crash on invalid iclog memory access
    
    commit 798a9cada4694ca8d970259f216cec47e675bfd5 upstream.
    
    syzbot (via KASAN) reports a use-after-free in the error path of
    xlog_alloc_log(). Specifically, the iclog freeing loop doesn't
    handle the case of a fully initialized ->l_iclog linked list.
    Instead, it assumes that the list is partially constructed and NULL
    terminated.
    
    This bug manifested because there was no possible error scenario
    after iclog list setup when the original code was added.  Subsequent
    code and associated error conditions were added some time later,
    while the original error handling code was never updated. Fix up the
    error loop to terminate either on a NULL iclog or reaching the end
    of the list.
    
    Reported-by: syzbot+c732f8644185de340492@syzkaller.appspotmail.com
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfd653e839b2b26b68368d2bb2491ecc0200d83a
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Dec 4 16:52:37 2019 -0800

    drm: limit to INT_MAX in create_blob ioctl
    
    commit 5bf8bec3f4ce044a223c40cbce92590d938f0e9c upstream.
    
    The hardened usercpy code is too paranoid ever since commit 6a30afa8c1fb
    ("uaccess: disallow > INT_MAX copy sizes")
    
    Code itself should have been fine as-is.
    
    Link: http://lkml.kernel.org/r/20191106164755.31478-1-daniel.vetter@ffwll.ch
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Reported-by: syzbot+fb77e97ebf0612ee6914@syzkaller.appspotmail.com
    Fixes: 6a30afa8c1fb ("uaccess: disallow > INT_MAX copy sizes")
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24c792fb7cbc08e5c4b1f3fc4b926d665e64ce4d
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Dec 4 16:52:40 2019 -0800

    uaccess: disallow > INT_MAX copy sizes
    
    commit 6d13de1489b6bf539695f96d945de3860e6d5e17 upstream.
    
    As we've done with VFS, string operations, etc, reject usercopy sizes
    larger than INT_MAX, which would be nice to have for catching bugs
    related to size calculation overflows[1].
    
    This adds 10 bytes to x86_64 defconfig text and 1980 bytes to the data
    section:
    
         text    data     bss     dec     hex filename
      19691167        5134320 1646664 26472151        193eed7 vmlinux.before
      19691177        5136300 1646664 26474141        193f69d vmlinux.after
    
    [1] https://marc.info/?l=linux-s390&m=156631939010493&w=2
    
    Link: http://lkml.kernel.org/r/201908251612.F9902D7A@keescook
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c24cc6a9d9570d1312af1b379ab1764face8cd8
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Nov 25 10:46:51 2019 +0900

    tomoyo: Don't use nifty names on sockets.
    
    commit 6f7c41374b62fd80bbd8aae3536c43688c54d95e upstream.
    
    syzbot is reporting that use of SOCKET_I()->sk from open() can result in
    use after free problem [1], for socket's inode is still reachable via
    /proc/pid/fd/n despite destruction of SOCKET_I()->sk already completed.
    
    At first I thought that this race condition applies to only open/getattr
    permission checks. But James Morris has pointed out that there are more
    permission checks where this race condition applies to. Thus, get rid of
    tomoyo_get_socket_name() instead of conditionally bypassing permission
    checks on sockets. As a side effect of this patch,
    "socket:[family=\$:type=\$:protocol=\$]" in the policy files has to be
    rewritten to "socket:[\$]".
    
    [1] https://syzkaller.appspot.com/bug?id=73d590010454403d55164cca23bd0565b1eb3b74
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+0341f6a4d729d4e0acf1@syzkaller.appspotmail.com>
    Reported-by: James Morris <jmorris@namei.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cd7c5f23ff1b2ce5d15720334861cb902519e8b
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Nov 6 09:48:04 2019 -0800

    hrtimer: Annotate lockless access to timer->state
    
    commit 56144737e67329c9aaed15f942d46a6302e2e3d8 upstream.
    
    syzbot reported various data-race caused by hrtimer_is_queued() reading
    timer->state. A READ_ONCE() is required there to silence the warning.
    
    Also add the corresponding WRITE_ONCE() when timer->state is set.
    
    In remove_hrtimer() the hrtimer_is_queued() helper is open coded to avoid
    loading timer->state twice.
    
    KCSAN reported these cases:
    
    BUG: KCSAN: data-race in __remove_hrtimer / tcp_pacing_check
    
    write to 0xffff8880b2a7d388 of 1 bytes by interrupt on cpu 0:
     __remove_hrtimer+0x52/0x130 kernel/time/hrtimer.c:991
     __run_hrtimer kernel/time/hrtimer.c:1496 [inline]
     __hrtimer_run_queues+0x250/0x600 kernel/time/hrtimer.c:1576
     hrtimer_run_softirq+0x10e/0x150 kernel/time/hrtimer.c:1593
     __do_softirq+0x115/0x33f kernel/softirq.c:292
     run_ksoftirqd+0x46/0x60 kernel/softirq.c:603
     smpboot_thread_fn+0x37d/0x4a0 kernel/smpboot.c:165
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    read to 0xffff8880b2a7d388 of 1 bytes by task 24652 on cpu 1:
     tcp_pacing_check net/ipv4/tcp_output.c:2235 [inline]
     tcp_pacing_check+0xba/0x130 net/ipv4/tcp_output.c:2225
     tcp_xmit_retransmit_queue+0x32c/0x5a0 net/ipv4/tcp_output.c:3044
     tcp_xmit_recovery+0x7c/0x120 net/ipv4/tcp_input.c:3558
     tcp_ack+0x17b6/0x3170 net/ipv4/tcp_input.c:3717
     tcp_rcv_established+0x37e/0xf50 net/ipv4/tcp_input.c:5696
     tcp_v4_do_rcv+0x381/0x4e0 net/ipv4/tcp_ipv4.c:1561
     sk_backlog_rcv include/net/sock.h:945 [inline]
     __release_sock+0x135/0x1e0 net/core/sock.c:2435
     release_sock+0x61/0x160 net/core/sock.c:2951
     sk_stream_wait_memory+0x3d7/0x7c0 net/core/stream.c:145
     tcp_sendmsg_locked+0xb47/0x1f30 net/ipv4/tcp.c:1393
     tcp_sendmsg+0x39/0x60 net/ipv4/tcp.c:1434
     inet_sendmsg+0x6d/0x90 net/ipv4/af_inet.c:807
     sock_sendmsg_nosec net/socket.c:637 [inline]
     sock_sendmsg+0x9f/0xc0 net/socket.c:657
    
    BUG: KCSAN: data-race in __remove_hrtimer / __tcp_ack_snd_check
    
    write to 0xffff8880a3a65588 of 1 bytes by interrupt on cpu 0:
     __remove_hrtimer+0x52/0x130 kernel/time/hrtimer.c:991
     __run_hrtimer kernel/time/hrtimer.c:1496 [inline]
     __hrtimer_run_queues+0x250/0x600 kernel/time/hrtimer.c:1576
     hrtimer_run_softirq+0x10e/0x150 kernel/time/hrtimer.c:1593
     __do_softirq+0x115/0x33f kernel/softirq.c:292
     invoke_softirq kernel/softirq.c:373 [inline]
     irq_exit+0xbb/0xe0 kernel/softirq.c:413
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0xe6/0x280 arch/x86/kernel/apic/apic.c:1137
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
    
    read to 0xffff8880a3a65588 of 1 bytes by task 22891 on cpu 1:
     __tcp_ack_snd_check+0x415/0x4f0 net/ipv4/tcp_input.c:5265
     tcp_ack_snd_check net/ipv4/tcp_input.c:5287 [inline]
     tcp_rcv_established+0x750/0xf50 net/ipv4/tcp_input.c:5708
     tcp_v4_do_rcv+0x381/0x4e0 net/ipv4/tcp_ipv4.c:1561
     sk_backlog_rcv include/net/sock.h:945 [inline]
     __release_sock+0x135/0x1e0 net/core/sock.c:2435
     release_sock+0x61/0x160 net/core/sock.c:2951
     sk_stream_wait_memory+0x3d7/0x7c0 net/core/stream.c:145
     tcp_sendmsg_locked+0xb47/0x1f30 net/ipv4/tcp.c:1393
     tcp_sendmsg+0x39/0x60 net/ipv4/tcp.c:1434
     inet_sendmsg+0x6d/0x90 net/ipv4/af_inet.c:807
     sock_sendmsg_nosec net/socket.c:637 [inline]
     sock_sendmsg+0x9f/0xc0 net/socket.c:657
     __sys_sendto+0x21f/0x320 net/socket.c:1952
     __do_sys_sendto net/socket.c:1964 [inline]
     __se_sys_sendto net/socket.c:1960 [inline]
     __x64_sys_sendto+0x89/0xb0 net/socket.c:1960
     do_syscall_64+0xcc/0x370 arch/x86/entry/common.c:290
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 24652 Comm: syz-executor.3 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    [ tglx: Added comments ]
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191106174804.74723-1-edumazet@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fe9be220c67262e23ddd9219505d29ef9577f4b
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Nov 8 10:34:47 2019 -0800

    net: icmp: fix data-race in cmp_global_allow()
    
    commit bbab7ef235031f6733b5429ae7877bfa22339712 upstream.
    
    This code reads two global variables without protection
    of a lock. We need READ_ONCE()/WRITE_ONCE() pairs to
    avoid load/store-tearing and better document the intent.
    
    KCSAN reported :
    BUG: KCSAN: data-race in icmp_global_allow / icmp_global_allow
    
    read to 0xffffffff861a8014 of 4 bytes by task 11201 on cpu 0:
     icmp_global_allow+0x36/0x1b0 net/ipv4/icmp.c:254
     icmpv6_global_allow net/ipv6/icmp.c:184 [inline]
     icmpv6_global_allow net/ipv6/icmp.c:179 [inline]
     icmp6_send+0x493/0x1140 net/ipv6/icmp.c:514
     icmpv6_send+0x71/0xb0 net/ipv6/ip6_icmp.c:43
     ip6_link_failure+0x43/0x180 net/ipv6/route.c:2640
     dst_link_failure include/net/dst.h:419 [inline]
     vti_xmit net/ipv4/ip_vti.c:243 [inline]
     vti_tunnel_xmit+0x27f/0xa50 net/ipv4/ip_vti.c:279
     __netdev_start_xmit include/linux/netdevice.h:4420 [inline]
     netdev_start_xmit include/linux/netdevice.h:4434 [inline]
     xmit_one net/core/dev.c:3280 [inline]
     dev_hard_start_xmit+0xef/0x430 net/core/dev.c:3296
     __dev_queue_xmit+0x14c9/0x1b60 net/core/dev.c:3873
     dev_queue_xmit+0x21/0x30 net/core/dev.c:3906
     neigh_direct_output+0x1f/0x30 net/core/neighbour.c:1530
     neigh_output include/net/neighbour.h:511 [inline]
     ip6_finish_output2+0x7a6/0xec0 net/ipv6/ip6_output.c:116
     __ip6_finish_output net/ipv6/ip6_output.c:142 [inline]
     __ip6_finish_output+0x2d7/0x330 net/ipv6/ip6_output.c:127
     ip6_finish_output+0x41/0x160 net/ipv6/ip6_output.c:152
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip6_output+0xf2/0x280 net/ipv6/ip6_output.c:175
     dst_output include/net/dst.h:436 [inline]
     ip6_local_out+0x74/0x90 net/ipv6/output_core.c:179
    
    write to 0xffffffff861a8014 of 4 bytes by task 11183 on cpu 1:
     icmp_global_allow+0x174/0x1b0 net/ipv4/icmp.c:272
     icmpv6_global_allow net/ipv6/icmp.c:184 [inline]
     icmpv6_global_allow net/ipv6/icmp.c:179 [inline]
     icmp6_send+0x493/0x1140 net/ipv6/icmp.c:514
     icmpv6_send+0x71/0xb0 net/ipv6/ip6_icmp.c:43
     ip6_link_failure+0x43/0x180 net/ipv6/route.c:2640
     dst_link_failure include/net/dst.h:419 [inline]
     vti_xmit net/ipv4/ip_vti.c:243 [inline]
     vti_tunnel_xmit+0x27f/0xa50 net/ipv4/ip_vti.c:279
     __netdev_start_xmit include/linux/netdevice.h:4420 [inline]
     netdev_start_xmit include/linux/netdevice.h:4434 [inline]
     xmit_one net/core/dev.c:3280 [inline]
     dev_hard_start_xmit+0xef/0x430 net/core/dev.c:3296
     __dev_queue_xmit+0x14c9/0x1b60 net/core/dev.c:3873
     dev_queue_xmit+0x21/0x30 net/core/dev.c:3906
     neigh_direct_output+0x1f/0x30 net/core/neighbour.c:1530
     neigh_output include/net/neighbour.h:511 [inline]
     ip6_finish_output2+0x7a6/0xec0 net/ipv6/ip6_output.c:116
     __ip6_finish_output net/ipv6/ip6_output.c:142 [inline]
     __ip6_finish_output+0x2d7/0x330 net/ipv6/ip6_output.c:127
     ip6_finish_output+0x41/0x160 net/ipv6/ip6_output.c:152
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip6_output+0xf2/0x280 net/ipv6/ip6_output.c:175
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 11183 Comm: syz-executor.2 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 4cdf507d5452 ("icmp: add a global rate limitation")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf0bcc99582cd148e94b651d677054622a252abd
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 7 18:49:43 2019 -0800

    net: add a READ_ONCE() in skb_peek_tail()
    
    commit f8cc62ca3e660ae3fdaee533b1d554297cd2ae82 upstream.
    
    skb_peek_tail() can be used without protection of a lock,
    as spotted by KCSAN [1]
    
    In order to avoid load-stearing, add a READ_ONCE()
    
    Note that the corresponding WRITE_ONCE() are already there.
    
    [1]
    BUG: KCSAN: data-race in sk_wait_data / skb_queue_tail
    
    read to 0xffff8880b36a4118 of 8 bytes by task 20426 on cpu 1:
     skb_peek_tail include/linux/skbuff.h:1784 [inline]
     sk_wait_data+0x15b/0x250 net/core/sock.c:2477
     kcm_wait_data+0x112/0x1f0 net/kcm/kcmsock.c:1103
     kcm_recvmsg+0xac/0x320 net/kcm/kcmsock.c:1130
     sock_recvmsg_nosec net/socket.c:871 [inline]
     sock_recvmsg net/socket.c:889 [inline]
     sock_recvmsg+0x92/0xb0 net/socket.c:885
     ___sys_recvmsg+0x1a0/0x3e0 net/socket.c:2480
     do_recvmmsg+0x19a/0x5c0 net/socket.c:2601
     __sys_recvmmsg+0x1ef/0x200 net/socket.c:2680
     __do_sys_recvmmsg net/socket.c:2703 [inline]
     __se_sys_recvmmsg net/socket.c:2696 [inline]
     __x64_sys_recvmmsg+0x89/0xb0 net/socket.c:2696
     do_syscall_64+0xcc/0x370 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    write to 0xffff8880b36a4118 of 8 bytes by task 451 on cpu 0:
     __skb_insert include/linux/skbuff.h:1852 [inline]
     __skb_queue_before include/linux/skbuff.h:1958 [inline]
     __skb_queue_tail include/linux/skbuff.h:1991 [inline]
     skb_queue_tail+0x7e/0xc0 net/core/skbuff.c:3145
     kcm_queue_rcv_skb+0x202/0x310 net/kcm/kcmsock.c:206
     kcm_rcv_strparser+0x74/0x4b0 net/kcm/kcmsock.c:370
     __strp_recv+0x348/0xf50 net/strparser/strparser.c:309
     strp_recv+0x84/0xa0 net/strparser/strparser.c:343
     tcp_read_sock+0x174/0x5c0 net/ipv4/tcp.c:1639
     strp_read_sock+0xd4/0x140 net/strparser/strparser.c:366
     do_strp_work net/strparser/strparser.c:414 [inline]
     strp_work+0x9a/0xe0 net/strparser/strparser.c:423
     process_one_work+0x3d4/0x890 kernel/workqueue.c:2269
     worker_thread+0xa0/0x800 kernel/workqueue.c:2415
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 451 Comm: kworker/u4:3 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: kstrp strp_work
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a196cde2d4ba322b935254c75ec1bbc734abcc08
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 7 10:30:42 2019 -0800

    inetpeer: fix data-race in inet_putpeer / inet_putpeer
    
    commit 71685eb4ce80ae9c49eff82ca4dd15acab215de9 upstream.
    
    We need to explicitely forbid read/store tearing in inet_peer_gc()
    and inet_putpeer().
    
    The following syzbot report reminds us about inet_putpeer()
    running without a lock held.
    
    BUG: KCSAN: data-race in inet_putpeer / inet_putpeer
    
    write to 0xffff888121fb2ed0 of 4 bytes by interrupt on cpu 0:
     inet_putpeer+0x37/0xa0 net/ipv4/inetpeer.c:240
     ip4_frag_free+0x3d/0x50 net/ipv4/ip_fragment.c:102
     inet_frag_destroy_rcu+0x58/0x80 net/ipv4/inet_fragment.c:228
     __rcu_reclaim kernel/rcu/rcu.h:222 [inline]
     rcu_do_batch+0x256/0x5b0 kernel/rcu/tree.c:2157
     rcu_core+0x369/0x4d0 kernel/rcu/tree.c:2377
     rcu_core_si+0x12/0x20 kernel/rcu/tree.c:2386
     __do_softirq+0x115/0x33f kernel/softirq.c:292
     invoke_softirq kernel/softirq.c:373 [inline]
     irq_exit+0xbb/0xe0 kernel/softirq.c:413
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0xe6/0x280 arch/x86/kernel/apic/apic.c:1137
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
     native_safe_halt+0xe/0x10 arch/x86/kernel/paravirt.c:71
     arch_cpu_idle+0x1f/0x30 arch/x86/kernel/process.c:571
     default_idle_call+0x1e/0x40 kernel/sched/idle.c:94
     cpuidle_idle_call kernel/sched/idle.c:154 [inline]
     do_idle+0x1af/0x280 kernel/sched/idle.c:263
    
    write to 0xffff888121fb2ed0 of 4 bytes by interrupt on cpu 1:
     inet_putpeer+0x37/0xa0 net/ipv4/inetpeer.c:240
     ip4_frag_free+0x3d/0x50 net/ipv4/ip_fragment.c:102
     inet_frag_destroy_rcu+0x58/0x80 net/ipv4/inet_fragment.c:228
     __rcu_reclaim kernel/rcu/rcu.h:222 [inline]
     rcu_do_batch+0x256/0x5b0 kernel/rcu/tree.c:2157
     rcu_core+0x369/0x4d0 kernel/rcu/tree.c:2377
     rcu_core_si+0x12/0x20 kernel/rcu/tree.c:2386
     __do_softirq+0x115/0x33f kernel/softirq.c:292
     run_ksoftirqd+0x46/0x60 kernel/softirq.c:603
     smpboot_thread_fn+0x37d/0x4a0 kernel/smpboot.c:165
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 16 Comm: ksoftirqd/1 Not tainted 5.4.0-rc3+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 4b9d9be839fd ("inetpeer: remove unused list")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0fc9cf57ff3fdcdc96748673aa88d7b93938e2d
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Dec 7 14:43:39 2019 -0800

    netfilter: bridge: make sure to pull arp header in br_nf_forward_arp()
    
    commit 5604285839aaedfb23ebe297799c6e558939334d upstream.
    
    syzbot is kind enough to remind us we need to call skb_may_pull()
    
    BUG: KMSAN: uninit-value in br_nf_forward_arp+0xe61/0x1230 net/bridge/br_netfilter_hooks.c:665
    CPU: 1 PID: 11631 Comm: syz-executor.1 Not tainted 5.4.0-rc8-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0x128/0x220 mm/kmsan/kmsan_report.c:108
     __msan_warning+0x64/0xc0 mm/kmsan/kmsan_instr.c:245
     br_nf_forward_arp+0xe61/0x1230 net/bridge/br_netfilter_hooks.c:665
     nf_hook_entry_hookfn include/linux/netfilter.h:135 [inline]
     nf_hook_slow+0x18b/0x3f0 net/netfilter/core.c:512
     nf_hook include/linux/netfilter.h:260 [inline]
     NF_HOOK include/linux/netfilter.h:303 [inline]
     __br_forward+0x78f/0xe30 net/bridge/br_forward.c:109
     br_flood+0xef0/0xfe0 net/bridge/br_forward.c:234
     br_handle_frame_finish+0x1a77/0x1c20 net/bridge/br_input.c:162
     nf_hook_bridge_pre net/bridge/br_input.c:245 [inline]
     br_handle_frame+0xfb6/0x1eb0 net/bridge/br_input.c:348
     __netif_receive_skb_core+0x20b9/0x51a0 net/core/dev.c:4830
     __netif_receive_skb_one_core net/core/dev.c:4927 [inline]
     __netif_receive_skb net/core/dev.c:5043 [inline]
     process_backlog+0x610/0x13c0 net/core/dev.c:5874
     napi_poll net/core/dev.c:6311 [inline]
     net_rx_action+0x7a6/0x1aa0 net/core/dev.c:6379
     __do_softirq+0x4a1/0x83a kernel/softirq.c:293
     do_softirq_own_stack+0x49/0x80 arch/x86/entry/entry_64.S:1091
     </IRQ>
     do_softirq kernel/softirq.c:338 [inline]
     __local_bh_enable_ip+0x184/0x1d0 kernel/softirq.c:190
     local_bh_enable+0x36/0x40 include/linux/bottom_half.h:32
     rcu_read_unlock_bh include/linux/rcupdate.h:688 [inline]
     __dev_queue_xmit+0x38e8/0x4200 net/core/dev.c:3819
     dev_queue_xmit+0x4b/0x60 net/core/dev.c:3825
     packet_snd net/packet/af_packet.c:2959 [inline]
     packet_sendmsg+0x8234/0x9100 net/packet/af_packet.c:2984
     sock_sendmsg_nosec net/socket.c:637 [inline]
     sock_sendmsg net/socket.c:657 [inline]
     __sys_sendto+0xc44/0xc70 net/socket.c:1952
     __do_sys_sendto net/socket.c:1964 [inline]
     __se_sys_sendto+0x107/0x130 net/socket.c:1960
     __x64_sys_sendto+0x6e/0x90 net/socket.c:1960
     do_syscall_64+0xb6/0x160 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45a679
    Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f0a3c9e5c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000000006 RCX: 000000000045a679
    RDX: 000000000000000e RSI: 0000000020000200 RDI: 0000000000000003
    RBP: 000000000075bf20 R08: 00000000200000c0 R09: 0000000000000014
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f0a3c9e66d4
    R13: 00000000004c8ec1 R14: 00000000004dfe28 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:149 [inline]
     kmsan_internal_poison_shadow+0x5c/0x110 mm/kmsan/kmsan.c:132
     kmsan_slab_alloc+0x97/0x100 mm/kmsan/kmsan_hooks.c:86
     slab_alloc_node mm/slub.c:2773 [inline]
     __kmalloc_node_track_caller+0xe27/0x11a0 mm/slub.c:4381
     __kmalloc_reserve net/core/skbuff.c:141 [inline]
     __alloc_skb+0x306/0xa10 net/core/skbuff.c:209
     alloc_skb include/linux/skbuff.h:1049 [inline]
     alloc_skb_with_frags+0x18c/0xa80 net/core/skbuff.c:5662
     sock_alloc_send_pskb+0xafd/0x10a0 net/core/sock.c:2244
     packet_alloc_skb net/packet/af_packet.c:2807 [inline]
     packet_snd net/packet/af_packet.c:2902 [inline]
     packet_sendmsg+0x63a6/0x9100 net/packet/af_packet.c:2984
     sock_sendmsg_nosec net/socket.c:637 [inline]
     sock_sendmsg net/socket.c:657 [inline]
     __sys_sendto+0xc44/0xc70 net/socket.c:1952
     __do_sys_sendto net/socket.c:1964 [inline]
     __se_sys_sendto+0x107/0x130 net/socket.c:1960
     __x64_sys_sendto+0x6e/0x90 net/socket.c:1960
     do_syscall_64+0xb6/0x160 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: c4e70a87d975 ("netfilter: bridge: rename br_netfilter.c to br_netfilter_hooks.c")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90e0e78bfa061997534993e57af389194bca9bd4
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Thu Dec 12 22:35:58 2019 +0100

    net/smc: add fallback check to connect()
    
    commit 86434744fedf0cfe07a9eee3f4632c0e25c1d136 upstream.
    
    FASTOPEN setsockopt() or sendmsg() may switch the SMC socket to fallback
    mode. Once fallback mode is active, the native TCP socket functions are
    called. Nevertheless there is a small race window, when FASTOPEN
    setsockopt/sendmsg runs in parallel to a connect(), and switch the
    socket into fallback mode before connect() takes the sock lock.
    Make sure the SMC-specific connect setup is omitted in this case.
    
    This way a syzbot-reported refcount problem is fixed, triggered by
    different threads running non-blocking connect() and FASTOPEN_KEY
    setsockopt.
    
    Reported-by: syzbot+96d3f9ff6a86d37e44c8@syzkaller.appspotmail.com
    Fixes: 6d6dd528d5af ("net/smc: fix refcount non-blocking connect() -part 2")
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e83c40f7bb108f0466b47ab27d210a8239e72076
Author: Andrew Donnellan <ajd@linux.ibm.com>
Date:   Tue Dec 10 00:22:21 2019 +1100

    powerpc: Fix __clear_user() with KUAP enabled
    
    commit 61e3acd8c693a14fc69b824cb5b08d02cb90a6e7 upstream.
    
    The KUAP implementation adds calls in clear_user() to enable and
    disable access to userspace memory. However, it doesn't add these to
    __clear_user(), which is used in the ptrace regset code.
    
    As there's only one direct user of __clear_user() (the regset code),
    and the time taken to set the AMR for KUAP purposes is going to
    dominate the cost of a quick access_ok(), there's not much point
    having a separate path.
    
    Rename __clear_user() to __arch_clear_user(), and make __clear_user()
    just call clear_user().
    
    Reported-by: syzbot+f25ecf4b2982d8c7a640@syzkaller-ppc64.appspotmail.com
    Reported-by: Daniel Axtens <dja@axtens.net>
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Fixes: de78a9c42a79 ("powerpc: Add a framework for Kernel Userspace Access Protection")
    Signed-off-by: Andrew Donnellan <ajd@linux.ibm.com>
    [mpe: Use __arch_clear_user() for the asm version like arm64 & nds32]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191209132221.15328-1-ajd@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0a1380de70a88f63ebfc2e3756d7f1543d2d68f
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 12 10:32:13 2019 -0800

    6pack,mkiss: fix possible deadlock
    
    commit 5c9934b6767b16ba60be22ec3cbd4379ad64170d upstream.
    
    We got another syzbot report [1] that tells us we must use
    write_lock_irq()/write_unlock_irq() to avoid possible deadlock.
    
    [1]
    
    WARNING: inconsistent lock state
    5.5.0-rc1-syzkaller #0 Not tainted
    --------------------------------
    inconsistent {HARDIRQ-ON-W} -> {IN-HARDIRQ-R} usage.
    syz-executor826/9605 [HC1[1]:SC0[0]:HE0:SE1] takes:
    ffffffff8a128718 (disc_data_lock){+-..}, at: sp_get.isra.0+0x1d/0xf0 drivers/net/ppp/ppp_synctty.c:138
    {HARDIRQ-ON-W} state was registered at:
      lock_acquire+0x190/0x410 kernel/locking/lockdep.c:4485
      __raw_write_lock_bh include/linux/rwlock_api_smp.h:203 [inline]
      _raw_write_lock_bh+0x33/0x50 kernel/locking/spinlock.c:319
      sixpack_close+0x1d/0x250 drivers/net/hamradio/6pack.c:657
      tty_ldisc_close.isra.0+0x119/0x1a0 drivers/tty/tty_ldisc.c:489
      tty_set_ldisc+0x230/0x6b0 drivers/tty/tty_ldisc.c:585
      tiocsetd drivers/tty/tty_io.c:2337 [inline]
      tty_ioctl+0xe8d/0x14f0 drivers/tty/tty_io.c:2597
      vfs_ioctl fs/ioctl.c:47 [inline]
      file_ioctl fs/ioctl.c:545 [inline]
      do_vfs_ioctl+0x977/0x14e0 fs/ioctl.c:732
      ksys_ioctl+0xab/0xd0 fs/ioctl.c:749
      __do_sys_ioctl fs/ioctl.c:756 [inline]
      __se_sys_ioctl fs/ioctl.c:754 [inline]
      __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:754
      do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    irq event stamp: 3946
    hardirqs last  enabled at (3945): [<ffffffff87c86e43>] __raw_spin_unlock_irq include/linux/spinlock_api_smp.h:168 [inline]
    hardirqs last  enabled at (3945): [<ffffffff87c86e43>] _raw_spin_unlock_irq+0x23/0x80 kernel/locking/spinlock.c:199
    hardirqs last disabled at (3946): [<ffffffff8100675f>] trace_hardirqs_off_thunk+0x1a/0x1c arch/x86/entry/thunk_64.S:42
    softirqs last  enabled at (2658): [<ffffffff86a8b4df>] spin_unlock_bh include/linux/spinlock.h:383 [inline]
    softirqs last  enabled at (2658): [<ffffffff86a8b4df>] clusterip_netdev_event+0x46f/0x670 net/ipv4/netfilter/ipt_CLUSTERIP.c:222
    softirqs last disabled at (2656): [<ffffffff86a8b22b>] spin_lock_bh include/linux/spinlock.h:343 [inline]
    softirqs last disabled at (2656): [<ffffffff86a8b22b>] clusterip_netdev_event+0x1bb/0x670 net/ipv4/netfilter/ipt_CLUSTERIP.c:196
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(disc_data_lock);
      <Interrupt>
        lock(disc_data_lock);
    
     *** DEADLOCK ***
    
    5 locks held by syz-executor826/9605:
     #0: ffff8880a905e198 (&tty->legacy_mutex){+.+.}, at: tty_lock+0xc7/0x130 drivers/tty/tty_mutex.c:19
     #1: ffffffff899a56c0 (rcu_read_lock){....}, at: mutex_spin_on_owner+0x0/0x330 kernel/locking/mutex.c:413
     #2: ffff8880a496a2b0 (&(&i->lock)->rlock){-.-.}, at: spin_lock include/linux/spinlock.h:338 [inline]
     #2: ffff8880a496a2b0 (&(&i->lock)->rlock){-.-.}, at: serial8250_interrupt+0x2d/0x1a0 drivers/tty/serial/8250/8250_core.c:116
     #3: ffffffff8c104048 (&port_lock_key){-.-.}, at: serial8250_handle_irq.part.0+0x24/0x330 drivers/tty/serial/8250/8250_port.c:1823
     #4: ffff8880a905e090 (&tty->ldisc_sem){++++}, at: tty_ldisc_ref+0x22/0x90 drivers/tty/tty_ldisc.c:288
    
    stack backtrace:
    CPU: 1 PID: 9605 Comm: syz-executor826 Not tainted 5.5.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x197/0x210 lib/dump_stack.c:118
     print_usage_bug.cold+0x327/0x378 kernel/locking/lockdep.c:3101
     valid_state kernel/locking/lockdep.c:3112 [inline]
     mark_lock_irq kernel/locking/lockdep.c:3309 [inline]
     mark_lock+0xbb4/0x1220 kernel/locking/lockdep.c:3666
     mark_usage kernel/locking/lockdep.c:3554 [inline]
     __lock_acquire+0x1e55/0x4a00 kernel/locking/lockdep.c:3909
     lock_acquire+0x190/0x410 kernel/locking/lockdep.c:4485
     __raw_read_lock include/linux/rwlock_api_smp.h:149 [inline]
     _raw_read_lock+0x32/0x50 kernel/locking/spinlock.c:223
     sp_get.isra.0+0x1d/0xf0 drivers/net/ppp/ppp_synctty.c:138
     sixpack_write_wakeup+0x25/0x340 drivers/net/hamradio/6pack.c:402
     tty_wakeup+0xe9/0x120 drivers/tty/tty_io.c:536
     tty_port_default_wakeup+0x2b/0x40 drivers/tty/tty_port.c:50
     tty_port_tty_wakeup+0x57/0x70 drivers/tty/tty_port.c:387
     uart_write_wakeup+0x46/0x70 drivers/tty/serial/serial_core.c:104
     serial8250_tx_chars+0x495/0xaf0 drivers/tty/serial/8250/8250_port.c:1761
     serial8250_handle_irq.part.0+0x2a2/0x330 drivers/tty/serial/8250/8250_port.c:1834
     serial8250_handle_irq drivers/tty/serial/8250/8250_port.c:1820 [inline]
     serial8250_default_handle_irq+0xc0/0x150 drivers/tty/serial/8250/8250_port.c:1850
     serial8250_interrupt+0xf1/0x1a0 drivers/tty/serial/8250/8250_core.c:126
     __handle_irq_event_percpu+0x15d/0x970 kernel/irq/handle.c:149
     handle_irq_event_percpu+0x74/0x160 kernel/irq/handle.c:189
     handle_irq_event+0xa7/0x134 kernel/irq/handle.c:206
     handle_edge_irq+0x25e/0x8d0 kernel/irq/chip.c:830
     generic_handle_irq_desc include/linux/irqdesc.h:156 [inline]
     do_IRQ+0xde/0x280 arch/x86/kernel/irq.c:250
     common_interrupt+0xf/0xf arch/x86/entry/entry_64.S:607
     </IRQ>
    RIP: 0010:cpu_relax arch/x86/include/asm/processor.h:685 [inline]
    RIP: 0010:mutex_spin_on_owner+0x247/0x330 kernel/locking/mutex.c:579
    Code: c3 be 08 00 00 00 4c 89 e7 e8 e5 06 59 00 4c 89 e0 48 c1 e8 03 42 80 3c 38 00 0f 85 e1 00 00 00 49 8b 04 24 a8 01 75 96 f3 90 <e9> 2f fe ff ff 0f 0b e8 0d 19 09 00 84 c0 0f 85 ff fd ff ff 48 c7
    RSP: 0018:ffffc90001eafa20 EFLAGS: 00000246 ORIG_RAX: ffffffffffffffd7
    RAX: 0000000000000000 RBX: ffff88809fd9e0c0 RCX: 1ffffffff13266dd
    RDX: 0000000000000000 RSI: 0000000000000008 RDI: 0000000000000000
    RBP: ffffc90001eafa60 R08: 1ffff11013d22898 R09: ffffed1013d22899
    R10: ffffed1013d22898 R11: ffff88809e9144c7 R12: ffff8880a905e138
    R13: ffff88809e9144c0 R14: 0000000000000000 R15: dffffc0000000000
     mutex_optimistic_spin kernel/locking/mutex.c:673 [inline]
     __mutex_lock_common kernel/locking/mutex.c:962 [inline]
     __mutex_lock+0x32b/0x13c0 kernel/locking/mutex.c:1106
     mutex_lock_nested+0x16/0x20 kernel/locking/mutex.c:1121
     tty_lock+0xc7/0x130 drivers/tty/tty_mutex.c:19
     tty_release+0xb5/0xe90 drivers/tty/tty_io.c:1665
     __fput+0x2ff/0x890 fs/file_table.c:280
     ____fput+0x16/0x20 fs/file_table.c:313
     task_work_run+0x145/0x1c0 kernel/task_work.c:113
     exit_task_work include/linux/task_work.h:22 [inline]
     do_exit+0x8e7/0x2ef0 kernel/exit.c:797
     do_group_exit+0x135/0x360 kernel/exit.c:895
     __do_sys_exit_group kernel/exit.c:906 [inline]
     __se_sys_exit_group kernel/exit.c:904 [inline]
     __x64_sys_exit_group+0x44/0x50 kernel/exit.c:904
     do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x43fef8
    Code: Bad RIP value.
    RSP: 002b:00007ffdb07d2338 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 000000000043fef8
    RDX: 0000000000000000 RSI: 000000000000003c RDI: 0000000000000000
    RBP: 00000000004bf730 R08: 00000000000000e7 R09: ffffffffffffffd0
    R10: 00000000004002c8 R11: 0000000000000246 R12: 0000000000000001
    R13: 00000000006d1180 R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: 6e4e2f811bad ("6pack,mkiss: fix lock inconsistency")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b54ba0dc0d2f0829510797f5128d0ceb0a6c4f7d
Author: Florian Westphal <fw@strlen.de>
Date:   Sun Dec 15 03:49:25 2019 +0100

    netfilter: ebtables: compat: reject all padding in matches/watchers
    
    commit e608f631f0ba5f1fc5ee2e260a3a35d13107cbfe upstream.
    
    syzbot reported following splat:
    
    BUG: KASAN: vmalloc-out-of-bounds in size_entry_mwt net/bridge/netfilter/ebtables.c:2063 [inline]
    BUG: KASAN: vmalloc-out-of-bounds in compat_copy_entries+0x128b/0x1380 net/bridge/netfilter/ebtables.c:2155
    Read of size 4 at addr ffffc900004461f4 by task syz-executor267/7937
    
    CPU: 1 PID: 7937 Comm: syz-executor267 Not tainted 5.5.0-rc1-syzkaller #0
     size_entry_mwt net/bridge/netfilter/ebtables.c:2063 [inline]
     compat_copy_entries+0x128b/0x1380 net/bridge/netfilter/ebtables.c:2155
     compat_do_replace+0x344/0x720 net/bridge/netfilter/ebtables.c:2249
     compat_do_ebt_set_ctl+0x22f/0x27e net/bridge/netfilter/ebtables.c:2333
     [..]
    
    Because padding isn't considered during computation of ->buf_user_offset,
    "total" is decremented by fewer bytes than it should.
    
    Therefore, the first part of
    
    if (*total < sizeof(*entry) || entry->next_offset < sizeof(*entry))
    
    will pass, -- it should not have.  This causes oob access:
    entry->next_offset is past the vmalloced size.
    
    Reject padding and check that computed user offset (sum of ebt_entry
    structure plus all individual matches/watchers/targets) is same
    value that userspace gave us as the offset of the next entry.
    
    Reported-by: syzbot+f68108fed972453a0ad4@syzkaller.appspotmail.com
    Fixes: 81e675c227ec ("netfilter: ebtables: add CONFIG_COMPAT support")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1d93f13f647dfe133b4626612fa1ee1bd31b230
Author: Anders Kaseorg <andersk@mit.edu>
Date:   Mon Dec 2 17:09:20 2019 -0500

    Revert "iwlwifi: assign directly to iwl_trans->cfg in QuZ detection"
    
    commit db5cce1afc8d2475d2c1c37c2a8267dd0e151526 upstream.
    
    This reverts commit 968dcfb4905245dc64d65312c0d17692fa087b99.
    
    Both that commit and commit 809805a820c6445f7a701ded24fdc6bbc841d1e4
    attempted to fix the same bug (dead assignments to the local variable
    cfg), but they did so in incompatible ways. When they were both merged,
    independently of each other, the combination actually caused the bug to
    reappear, leading to a firmware crash on boot for some cards.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=205719
    
    Signed-off-by: Anders Kaseorg <andersk@mit.edu>
    Acked-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33ecb96148d61defc779bf4df47ba0d6e02129a4
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Tue Dec 10 15:01:29 2019 +0800

    md: make sure desc_nr less than MD_SB_DISKS
    
    [ Upstream commit 3b7436cc9449d5ff7fa1c1fd5bc3edb6402ff5b8 ]
    
    For super_90_load, we need to make sure 'desc_nr' less
    than MD_SB_DISKS, avoiding invalid memory access of 'sb->disks'.
    
    Fixes: 228fc7d76db6 ("md: avoid invalid memory access for array sb->dev_roles")
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09bc029f759996193b36e46321bc305fc3a284d6
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Fri Dec 20 15:03:44 2019 -0300

    sctp: fix err handling of stream initialization
    
    [ Upstream commit 61d5d4062876e21331c3d0ba4b02dbd50c06a658 ]
    
    The fix on 951c6db954a1 fixed the issued reported there but introduced
    another. When the allocation fails within sctp_stream_init() it is
    okay/necessary to free the genradix. But it is also called when adding
    new streams, from sctp_send_add_streams() and
    sctp_process_strreset_addstrm_in() and in those situations it cannot
    just free the genradix because by then it is a fully operational
    association.
    
    The fix here then is to only free the genradix in sctp_stream_init()
    and on those other call sites  move on with what it already had and let
    the subsequent error handling to handle it.
    
    Tested with the reproducers from this report and the previous one,
    with lksctp-tools and sctp-tests.
    
    Reported-by: syzbot+9a1bc632e78a1a98488b@syzkaller.appspotmail.com
    Fixes: 951c6db954a1 ("sctp: fix memleak on err handling of stream initialization")
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f36b4556e544a09de899054d3cdffa8daa26191b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jan 1 17:24:32 2020 +0100

    Revert "powerpc/vcpu: Assume dedicated processors as non-preempt"
    
    This reverts commit 8332dbe5157a0056d8ab409957dfa89930066d87 which is
    commit 14c73bd344da60abaf7da3ea2e7733ddda35bbac upstream.
    
    It breaks the build.
    
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Parth Shah <parth@linux.ibm.com>
    Cc: Ihor Pasichnyk <Ihor.Pasichnyk@ibm.com>
    Cc: Juri Lelli <juri.lelli@redhat.com>
    Cc: Waiman Long <longman@redhat.com>
    Cc: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: Phil Auld <pauld@redhat.com>
    Cc: Vaidyanathan Srinivasan <svaidy@linux.ibm.com>
    Cc: Parth Shah <parth@linux.ibm.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2176441fdd00bdeba970ec5c382723d9d1448b3d
Author: Mike Rapoport <rppt@linux.ibm.com>
Date:   Sat Nov 30 17:58:01 2019 -0800

    userfaultfd: require CAP_SYS_PTRACE for UFFD_FEATURE_EVENT_FORK
    
    [ Upstream commit 3c1c24d91ffd536de0a64688a9df7f49e58fadbc ]
    
    A while ago Andy noticed
    (http://lkml.kernel.org/r/CALCETrWY+5ynDct7eU_nDUqx=okQvjm=Y5wJvA4ahBja=CQXGw@mail.gmail.com)
    that UFFD_FEATURE_EVENT_FORK used by an unprivileged user may have
    security implications.
    
    As the first step of the solution the following patch limits the availably
    of UFFD_FEATURE_EVENT_FORK only for those having CAP_SYS_PTRACE.
    
    The usage of CAP_SYS_PTRACE ensures compatibility with CRIU.
    
    Yet, if there are other users of non-cooperative userfaultfd that run
    without CAP_SYS_PTRACE, they would be broken :(
    
    Current implementation of UFFD_FEATURE_EVENT_FORK modifies the file
    descriptor table from the read() implementation of uffd, which may have
    security implications for unprivileged use of the userfaultfd.
    
    Limit availability of UFFD_FEATURE_EVENT_FORK only for callers that have
    CAP_SYS_PTRACE.
    
    Link: http://lkml.kernel.org/r/1572967777-8812-2-git-send-email-rppt@linux.ibm.com
    Signed-off-by: Mike Rapoport <rppt@linux.ibm.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Daniel Colascione <dancol@google.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Lokesh Gidra <lokeshgidra@google.com>
    Cc: Nick Kralevich <nnk@google.com>
    Cc: Nosh Minwalla <nosh@google.com>
    Cc: Pavel Emelyanov <ovzxemul@gmail.com>
    Cc: Tim Murray <timmurray@google.com>
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ead87f1165cc1ff5fb809ec11f82866f02bca810
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Sat Nov 30 17:56:08 2019 -0800

    kernel: sysctl: make drop_caches write-only
    
    [ Upstream commit 204cb79ad42f015312a5bbd7012d09c93d9b46fb ]
    
    Currently, the drop_caches proc file and sysctl read back the last value
    written, suggesting this is somehow a stateful setting instead of a
    one-time command.  Make it write-only, like e.g.  compact_memory.
    
    While mitigating a VM problem at scale in our fleet, there was confusion
    about whether writing to this file will permanently switch the kernel into
    a non-caching mode.  This influences the decision making in a tense
    situation, where tens of people are trying to fix tens of thousands of
    affected machines: Do we need a rollback strategy?  What are the
    performance implications of operating in a non-caching state for several
    days?  It also caused confusion when the kernel team said we may need to
    write the file several times to make sure it's effective ("But it already
    reads back 3?").
    
    Link: http://lkml.kernel.org/r/20191031221602.9375-1-hannes@cmpxchg.org
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Chris Down <chris@chrisdown.name>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: David Hildenbrand <david@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 865e3fd60eaa6bc3f5271708b520bd55e98f1a48
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Sat Nov 30 17:56:34 2019 -0800

    mm/hugetlbfs: fix error handling when setting up mounts
    
    [ Upstream commit 8fc312b32b25c6b0a8b46fab4df8c68df5af1223 ]
    
    It is assumed that the hugetlbfs_vfsmount[] array will contain either a
    valid vfsmount pointer or NULL for each hstate after initialization.
    Changes made while converting to use fs_context broke this assumption.
    
    While fixing the hugetlbfs_vfsmount issue, it was discovered that
    init_hugetlbfs_fs never did correctly clean up when encountering a vfs
    mount error.
    
    It was found during code inspection.  A small memory allocation failure
    would be the most likely cause of taking a error path with the bug.
    This is unlikely to happen as this is early init code.
    
    Link: http://lkml.kernel.org/r/94b6244d-2c24-e269-b12c-e3ba694b242d@oracle.com
    Reported-by: Chengguang Xu <cgxu519@mykernel.net>
    Fixes: 32021982a324 ("hugetlbfs: Convert to fs_context")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 623309a6e6c840e0e84b36ac40058c0e7be2307b
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Sat Nov 30 17:54:43 2019 -0800

    selftests: vm: add fragment CONFIG_TEST_VMALLOC
    
    [ Upstream commit 746dd4012d215b53152f0001a48856e41ea31730 ]
    
    When running test_vmalloc.sh smoke the following print out states that
    the fragment is missing.
    
     # ./test_vmalloc.sh: You must have the following enabled in your kernel:
     # CONFIG_TEST_VMALLOC=m
    
    Rework to add the fragment 'CONFIG_TEST_VMALLOC=m' to the config file.
    
    Link: http://lkml.kernel.org/r/20190916095217.19665-1-anders.roxell@linaro.org
    Fixes: a05ef00c9790 ("selftests/vm: add script helper for CONFIG_TEST_VMALLOC_MODULE")
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: "Uladzislau Rezki (Sony)" <urezki@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0ca1ec34d7f3888003130b22e312db99dad6387
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Fri Nov 22 12:19:16 2019 +0100

    s390: disable preemption when switching to nodat stack with CALL_ON_STACK
    
    [ Upstream commit 7f28dad395243c5026d649136823bbc40029a828 ]
    
    Make sure preemption is disabled when temporary switching to nodat
    stack with CALL_ON_STACK helper, because nodat stack is per cpu.
    
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99472d43f4ef93c293bc4a4b364608889b7d3139
Author: Daniel Baluta <daniel.baluta@nxp.com>
Date:   Wed Oct 9 16:07:18 2019 +0800

    mailbox: imx: Fix Tx doorbell shutdown path
    
    [ Upstream commit bf159d151a0b844be28882f39e316b5800acaa2b ]
    
    Tx doorbell is handled by txdb_tasklet and doesn't
    have an associated IRQ.
    
    Anyhow, imx_mu_shutdown ignores this and tries to
    free an IRQ that wasn't requested for Tx DB resulting
    in the following warning:
    
    [    1.967644] Trying to free already-free IRQ 26
    [    1.972108] WARNING: CPU: 2 PID: 157 at kernel/irq/manage.c:1708 __free_irq+0xc0/0x358
    [    1.980024] Modules linked in:
    [    1.983088] CPU: 2 PID: 157 Comm: kworker/2:1 Tainted: G
    [    1.993524] Hardware name: Freescale i.MX8QXP MEK (DT)
    [    1.998668] Workqueue: events deferred_probe_work_func
    [    2.003812] pstate: 60000085 (nZCv daIf -PAN -UAO)
    [    2.008607] pc : __free_irq+0xc0/0x358
    [    2.012364] lr : __free_irq+0xc0/0x358
    [    2.016111] sp : ffff00001179b7e0
    [    2.019422] x29: ffff00001179b7e0 x28: 0000000000000018
    [    2.024736] x27: ffff000011233000 x26: 0000000000000004
    [    2.030053] x25: 000000000000001a x24: ffff80083bec74d4
    [    2.035369] x23: 0000000000000000 x22: ffff80083bec7588
    [    2.040686] x21: ffff80083b1fe8d8 x20: ffff80083bec7400
    [    2.046003] x19: 0000000000000000 x18: ffffffffffffffff
    [    2.051320] x17: 0000000000000000 x16: 0000000000000000
    [    2.056637] x15: ffff0000111296c8 x14: ffff00009179b517
    [    2.061953] x13: ffff00001179b525 x12: ffff000011142000
    [    2.067270] x11: ffff000011129f20 x10: ffff0000105da970
    [    2.072587] x9 : 00000000ffffffd0 x8 : 0000000000000194
    [    2.077903] x7 : 612065657266206f x6 : ffff0000111e7b09
    [    2.083220] x5 : 0000000000000003 x4 : 0000000000000000
    [    2.088537] x3 : 0000000000000000 x2 : 00000000ffffffff
    [    2.093854] x1 : 28b70f0a2b60a500 x0 : 0000000000000000
    [    2.099173] Call trace:
    [    2.101618]  __free_irq+0xc0/0x358
    [    2.105021]  free_irq+0x38/0x98
    [    2.108170]  imx_mu_shutdown+0x90/0xb0
    [    2.111921]  mbox_free_channel.part.2+0x24/0xb8
    [    2.116453]  mbox_free_channel+0x18/0x28
    
    This bug is present from the beginning of times.
    
    Cc: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
    Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
    Reviewed-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 496cec79449b6beee9d67f227c8d4de02be76ccc
Author: Ding Xiang <dingxiang@cmss.chinamobile.com>
Date:   Sat Nov 30 17:49:12 2019 -0800

    ocfs2: fix passing zero to 'PTR_ERR' warning
    
    [ Upstream commit 188c523e1c271d537f3c9f55b6b65bf4476de32f ]
    
    Fix a static code checker warning:
    fs/ocfs2/acl.c:331
            ocfs2_acl_chmod() warn: passing zero to 'PTR_ERR'
    
    Link: http://lkml.kernel.org/r/1dee278b-6c96-eec2-ce76-fe6e07c6e20f@linux.alibaba.com
    Fixes: 5ee0fbd50fd ("ocfs2: revert using ocfs2_acl_chmod to avoid inode cluster lock hang")
    Signed-off-by: Ding Xiang <dingxiang@cmss.chinamobile.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef6f6e717de77caf0dc4b93cb2fac93e1b4e7f7c
Author: Thomas Richter <tmricht@linux.ibm.com>
Date:   Fri Nov 22 16:43:15 2019 +0100

    s390/cpum_sf: Check for SDBT and SDB consistency
    
    [ Upstream commit 247f265fa502e7b17a0cb0cc330e055a36aafce4 ]
    
    Each SBDT is located at a 4KB page and contains 512 entries.
    Each entry of a SDBT points to a SDB, a 4KB page containing
    sampled data. The last entry is a link to another SDBT page.
    
    When an event is created the function sequence executed is:
    
      __hw_perf_event_init()
      +--> allocate_buffers()
           +--> realloc_sampling_buffers()
                +---> alloc_sample_data_block()
    
    Both functions realloc_sampling_buffers() and
    alloc_sample_data_block() allocate pages and the allocation
    can fail. This is handled correctly and all allocated
    pages are freed and error -ENOMEM is returned to the
    top calling function. Finally the event is not created.
    
    Once the event has been created, the amount of initially
    allocated SDBT and SDB can be too low. This is detected
    during measurement interrupt handling, where the amount
    of lost samples is calculated. If the number of lost samples
    is too high considering sampling frequency and already allocated
    SBDs, the number of SDBs is enlarged during the next execution
    of cpumsf_pmu_enable().
    
    If more SBDs need to be allocated, functions
    
           realloc_sampling_buffers()
           +---> alloc-sample_data_block()
    
    are called to allocate more pages. Page allocation may fail
    and the returned error is ignored. A SDBT and SDB setup
    already exists.
    
    However the modified SDBTs and SDBs might end up in a situation
    where the first entry of an SDBT does not point to an SDB,
    but another SDBT, basicly an SBDT without payload.
    This can not be handled by the interrupt handler, where an SDBT
    must have at least one entry pointing to an SBD.
    
    Add a check to avoid SDBTs with out payload (SDBs) when enlarging
    the buffer setup.
    
    Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cff542509ec302ea63b9cc19ae2226740883ba63
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Wed Nov 27 18:12:04 2019 +0100

    s390/unwind: filter out unreliable bogus %r14
    
    [ Upstream commit bf018ee644897d7982e1b8dd8b15e97db6e1a4da ]
    
    Currently unwinder unconditionally returns %r14 from the first frame
    pointed by %r15 from pt_regs. A task could be interrupted when a function
    already allocated this frame (if it needs it) for its callees or to
    store local variables. In that case this frame would contain random
    values from stack or values stored there by a callee. As we are only
    interested in %r14 to get potential return address, skip bogus return
    addresses which doesn't belong to kernel text.
    
    This helps to avoid duplicating filtering logic in unwider users, most
    of which use unwind_get_return_address() and would choke on bogus 0
    address returned by it otherwise.
    
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebd75fea2cda2a1ecfe2a63ed2316665ed193f97
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Wed Nov 13 16:12:02 2019 +0900

    libfdt: define INT32_MAX and UINT32_MAX in libfdt_env.h
    
    [ Upstream commit a8de1304b7df30e3a14f2a8b9709bb4ff31a0385 ]
    
    The DTC v1.5.1 added references to (U)INT32_MAX.
    
    This is no problem for user-space programs since <stdint.h> defines
    (U)INT32_MAX along with (u)int32_t.
    
    For the kernel space, libfdt_env.h needs to be adjusted before we
    pull in the changes.
    
    In the kernel, we usually use s/u32 instead of (u)int32_t for the
    fixed-width types.
    
    Accordingly, we already have S/U32_MAX for their max values.
    So, we should not add (U)INT32_MAX to <linux/limits.h> any more.
    
    Instead, add them to the in-kernel libfdt_env.h to compile the
    latest libfdt.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1a6e48c0c74fa3d939adc5eef727df2648df485
Author: Daniel Baluta <daniel.baluta@nxp.com>
Date:   Wed Oct 9 16:07:19 2019 +0800

    mailbox: imx: Clear the right interrupts at shutdown
    
    [ Upstream commit 5f0af07e89199ac51cdd4f25bc303bdc703f4e9c ]
    
    Make sure to only clear enabled interrupts keeping count
    of the connection type.
    
    Suggested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
    Signed-off-by: Richard Zhu <hongxing.zhu@nxp.com>
    Reviewed-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3ef5071a5d9c2417ad1a5f2ecac32a31ae7876a
Author: Harald Freudenberger <freude@linux.ibm.com>
Date:   Wed Nov 20 11:44:31 2019 +0100

    s390/zcrypt: handle new reply code FILTERED_BY_HYPERVISOR
    
    [ Upstream commit 6733775a92eacd612ac88afa0fd922e4ffeb2bc7 ]
    
    This patch introduces support for a new architectured reply
    code 0x8B indicating that a hypervisor layer (if any) has
    rejected an ap message.
    
    Linux may run as a guest on top of a hypervisor like zVM
    or KVM. So the crypto hardware seen by the ap bus may be
    restricted by the hypervisor for example only a subset like
    only clear key crypto requests may be supported. Other
    requests will be filtered out - rejected by the hypervisor.
    The new reply code 0x8B will appear in such cases and needs
    to get recognized by the ap bus and zcrypt device driver zoo.
    
    Signed-off-by: Harald Freudenberger <freude@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4992f88dfe93376b3364a1675182b3b094c6abb1
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Wed Nov 27 10:13:34 2019 -0300

    perf regs: Make perf_reg_name() return "unknown" instead of NULL
    
    [ Upstream commit 5b596e0ff0e1852197d4c82d3314db5e43126bf7 ]
    
    To avoid breaking the build on arches where this is not wired up, at
    least all the other features should be made available and when using
    this specific routine, the "unknown" should point the user/developer to
    the need to wire this up on this particular hardware architecture.
    
    Detected in a container mipsel debian cross build environment, where it
    shows up as:
    
      In file included from /usr/mipsel-linux-gnu/include/stdio.h:867,
                       from /git/linux/tools/perf/lib/include/perf/cpumap.h:6,
                       from util/session.c:13:
      In function 'printf',
          inlined from 'regs_dump__printf' at util/session.c:1103:3,
          inlined from 'regs__printf' at util/session.c:1131:2:
      /usr/mipsel-linux-gnu/include/bits/stdio2.h:107:10: error: '%-5s' directive argument is null [-Werror=format-overflow=]
        107 |   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
            |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    cross compiler details:
    
      mipsel-linux-gnu-gcc (Debian 9.2.1-8) 9.2.1 20190909
    
    Also on mips64:
    
      In file included from /usr/mips64-linux-gnuabi64/include/stdio.h:867,
                       from /git/linux/tools/perf/lib/include/perf/cpumap.h:6,
                       from util/session.c:13:
      In function 'printf',
          inlined from 'regs_dump__printf' at util/session.c:1103:3,
          inlined from 'regs__printf' at util/session.c:1131:2,
          inlined from 'regs_user__printf' at util/session.c:1139:3,
          inlined from 'dump_sample' at util/session.c:1246:3,
          inlined from 'machines__deliver_event' at util/session.c:1421:3:
      /usr/mips64-linux-gnuabi64/include/bits/stdio2.h:107:10: error: '%-5s' directive argument is null [-Werror=format-overflow=]
        107 |   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
            |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      In function 'printf',
          inlined from 'regs_dump__printf' at util/session.c:1103:3,
          inlined from 'regs__printf' at util/session.c:1131:2,
          inlined from 'regs_intr__printf' at util/session.c:1147:3,
          inlined from 'dump_sample' at util/session.c:1249:3,
          inlined from 'machines__deliver_event' at util/session.c:1421:3:
      /usr/mips64-linux-gnuabi64/include/bits/stdio2.h:107:10: error: '%-5s' directive argument is null [-Werror=format-overflow=]
        107 |   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
            |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    cross compiler details:
    
      mips64-linux-gnuabi64-gcc (Debian 9.2.1-8) 9.2.1 20190909
    
    Fixes: 2bcd355b71da ("perf tools: Add interface to arch registers sets")
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-95wjyv4o65nuaeweq31t7l1s@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c61219f6d204849446e3b20737310d6b1a4f70d
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Nov 27 11:53:21 2019 +0200

    perf script: Fix brstackinsn for AUXTRACE
    
    [ Upstream commit 0cd032d3b5fcebf5454315400ab310746a81ca53 ]
    
    brstackinsn must be allowed to be set by the user when AUX area data has
    been captured because, in that case, the branch stack might be
    synthesized on the fly. This fixes the following error:
    
    Before:
    
      $ perf record -e '{intel_pt//,cpu/mem_inst_retired.all_loads,aux-sample-size=8192/pp}:u' grep -rqs jhgjhg /boot
      [ perf record: Woken up 19 times to write data ]
      [ perf record: Captured and wrote 2.274 MB perf.data ]
      $ perf script -F +brstackinsn --xed --itrace=i1usl100 | head
      Display of branch stack assembler requested, but non all-branch filter set
      Hint: run 'perf record -b ...'
    
    After:
    
      $ perf record -e '{intel_pt//,cpu/mem_inst_retired.all_loads,aux-sample-size=8192/pp}:u' grep -rqs jhgjhg /boot
      [ perf record: Woken up 19 times to write data ]
      [ perf record: Captured and wrote 2.274 MB perf.data ]
      $ perf script -F +brstackinsn --xed --itrace=i1usl100 | head
                grep 13759 [002]  8091.310257:       1862                                        instructions:uH:      5641d58069eb bmexec+0x86b (/bin/grep)
            bmexec+2485:
            00005641d5806b35                        jnz 0x5641d5806bd0              # MISPRED
            00005641d5806bd0                        movzxb  (%r13,%rdx,1), %eax
            00005641d5806bd6                        add %rdi, %rax
            00005641d5806bd9                        movzxb  -0x1(%rax), %edx
            00005641d5806bdd                        cmp %rax, %r14
            00005641d5806be0                        jnb 0x5641d58069c0              # MISPRED
            mismatch of LBR data and executable
            00005641d58069c0                        movzxb  (%r13,%rdx,1), %edi
    
    Fixes: 48d02a1d5c13 ("perf script: Add 'brstackinsn' for branch stacks")
    Reported-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Link: http://lore.kernel.org/lkml/20191127095322.15417-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 734e4a8cd43d275c59218d6408cc354277954828
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Wed Nov 27 09:58:22 2019 -0300

    perf diff: Use llabs() with 64-bit values
    
    [ Upstream commit 98e93245113d0f5c279ef77f4a9e7d097323ad71 ]
    
    To fix these build errors on a debian mipsel cross build environment:
    
      builtin-diff.c: In function 'block_cycles_diff_cmp':
      builtin-diff.c:550:6: error: absolute value function 'labs' given an argument of type 's64' {aka 'long long int'} but has parameter of type 'long int' which may cause truncation of value [-Werror=absolute-value]
        550 |  l = labs(left->diff.cycles);
            |      ^~~~
      builtin-diff.c:551:6: error: absolute value function 'labs' given an argument of type 's64' {aka 'long long int'} but has parameter of type 'long int' which may cause truncation of value [-Werror=absolute-value]
        551 |  r = labs(right->diff.cycles);
            |      ^~~~
    
    Fixes: 99150a1faab2 ("perf diff: Use hists to manage basic blocks per symbol")
    Cc: Jin Yao <yao.jin@linux.intel.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-pn7szy5uw384ntjgk6zckh6a@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2685410d1e3c7b184d09b07f5473e7d5b33c4d34
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Sun Nov 3 13:06:37 2019 +1000

    cifs: move cifsFileInfo_put logic into a work-queue
    
    [ Upstream commit 32546a9586aa4565035bb557e191648e022b29e8 ]
    
    This patch moves the final part of the cifsFileInfo_put() logic where we
    need a write lock on lock_sem to be processed in a separate thread that
    holds no other locks.
    This is to prevent deadlocks like the one below:
    
    > there are 6 processes looping to while trying to down_write
    > cinode->lock_sem, 5 of them from _cifsFileInfo_put, and one from
    > cifs_new_fileinfo
    >
    > and there are 5 other processes which are blocked, several of them
    > waiting on either PG_writeback or PG_locked (which are both set), all
    > for the same page of the file
    >
    > 2 inode_lock() (inode->i_rwsem) for the file
    > 1 wait_on_page_writeback() for the page
    > 1 down_read(inode->i_rwsem) for the inode of the directory
    > 1 inode_lock()(inode->i_rwsem) for the inode of the directory
    > 1 __lock_page
    >
    >
    > so processes are blocked waiting on:
    >   page flags PG_locked and PG_writeback for one specific page
    >   inode->i_rwsem for the directory
    >   inode->i_rwsem for the file
    >   cifsInodeInflock_sem
    >
    >
    >
    > here are the more gory details (let me know if I need to provide
    > anything more/better):
    >
    > [0 00:48:22.765] [UN]  PID: 8863   TASK: ffff8c691547c5c0  CPU: 3
    > COMMAND: "reopen_file"
    >  #0 [ffff9965007e3ba8] __schedule at ffffffff9b6e6095
    >  #1 [ffff9965007e3c38] schedule at ffffffff9b6e64df
    >  #2 [ffff9965007e3c48] rwsem_down_write_slowpath at ffffffff9af283d7
    >  #3 [ffff9965007e3cb8] legitimize_path at ffffffff9b0f975d
    >  #4 [ffff9965007e3d08] path_openat at ffffffff9b0fe55d
    >  #5 [ffff9965007e3dd8] do_filp_open at ffffffff9b100a33
    >  #6 [ffff9965007e3ee0] do_sys_open at ffffffff9b0eb2d6
    >  #7 [ffff9965007e3f38] do_syscall_64 at ffffffff9ae04315
    > * (I think legitimize_path is bogus)
    >
    > in path_openat
    >         } else {
    >                 const char *s = path_init(nd, flags);
    >                 while (!(error = link_path_walk(s, nd)) &&
    >                         (error = do_last(nd, file, op)) > 0) {  <<<<
    >
    > do_last:
    >         if (open_flag & O_CREAT)
    >                 inode_lock(dir->d_inode);  <<<<
    >         else
    > so it's trying to take inode->i_rwsem for the directory
    >
    >      DENTRY           INODE           SUPERBLK     TYPE PATH
    > ffff8c68bb8e79c0 ffff8c691158ef20 ffff8c6915bf9000 DIR  /mnt/vm1_smb/
    > inode.i_rwsem is ffff8c691158efc0
    >
    > <struct rw_semaphore 0xffff8c691158efc0>:
    >         owner: <struct task_struct 0xffff8c6914275d00> (UN -   8856 -
    > reopen_file), counter: 0x0000000000000003
    >         waitlist: 2
    >         0xffff9965007e3c90     8863   reopen_file      UN 0  1:29:22.926
    >   RWSEM_WAITING_FOR_WRITE
    >         0xffff996500393e00     9802   ls               UN 0  1:17:26.700
    >   RWSEM_WAITING_FOR_READ
    >
    >
    > the owner of the inode.i_rwsem of the directory is:
    >
    > [0 00:00:00.109] [UN]  PID: 8856   TASK: ffff8c6914275d00  CPU: 3
    > COMMAND: "reopen_file"
    >  #0 [ffff99650065b828] __schedule at ffffffff9b6e6095
    >  #1 [ffff99650065b8b8] schedule at ffffffff9b6e64df
    >  #2 [ffff99650065b8c8] schedule_timeout at ffffffff9b6e9f89
    >  #3 [ffff99650065b940] msleep at ffffffff9af573a9
    >  #4 [ffff99650065b948] _cifsFileInfo_put.cold.63 at ffffffffc0a42dd6 [cifs]
    >  #5 [ffff99650065ba38] cifs_writepage_locked at ffffffffc0a0b8f3 [cifs]
    >  #6 [ffff99650065bab0] cifs_launder_page at ffffffffc0a0bb72 [cifs]
    >  #7 [ffff99650065bb30] invalidate_inode_pages2_range at ffffffff9b04d4bd
    >  #8 [ffff99650065bcb8] cifs_invalidate_mapping at ffffffffc0a11339 [cifs]
    >  #9 [ffff99650065bcd0] cifs_revalidate_mapping at ffffffffc0a1139a [cifs]
    > #10 [ffff99650065bcf0] cifs_d_revalidate at ffffffffc0a014f6 [cifs]
    > #11 [ffff99650065bd08] path_openat at ffffffff9b0fe7f7
    > #12 [ffff99650065bdd8] do_filp_open at ffffffff9b100a33
    > #13 [ffff99650065bee0] do_sys_open at ffffffff9b0eb2d6
    > #14 [ffff99650065bf38] do_syscall_64 at ffffffff9ae04315
    >
    > cifs_launder_page is for page 0xffffd1e2c07d2480
    >
    > crash> page.index,mapping,flags 0xffffd1e2c07d2480
    >       index = 0x8
    >       mapping = 0xffff8c68f3cd0db0
    >   flags = 0xfffffc0008095
    >
    >   PAGE-FLAG       BIT  VALUE
    >   PG_locked         0  0000001
    >   PG_uptodate       2  0000004
    >   PG_lru            4  0000010
    >   PG_waiters        7  0000080
    >   PG_writeback     15  0008000
    >
    >
    > inode is ffff8c68f3cd0c40
    > inode.i_rwsem is ffff8c68f3cd0ce0
    >      DENTRY           INODE           SUPERBLK     TYPE PATH
    > ffff8c68a1f1b480 ffff8c68f3cd0c40 ffff8c6915bf9000 REG
    > /mnt/vm1_smb/testfile.8853
    >
    >
    > this process holds the inode->i_rwsem for the parent directory, is
    > laundering a page attached to the inode of the file it's opening, and in
    > _cifsFileInfo_put is trying to down_write the cifsInodeInflock_sem
    > for the file itself.
    >
    >
    > <struct rw_semaphore 0xffff8c68f3cd0ce0>:
    >         owner: <struct task_struct 0xffff8c6914272e80> (UN -   8854 -
    > reopen_file), counter: 0x0000000000000003
    >         waitlist: 1
    >         0xffff9965005dfd80     8855   reopen_file      UN 0  1:29:22.912
    >   RWSEM_WAITING_FOR_WRITE
    >
    > this is the inode.i_rwsem for the file
    >
    > the owner:
    >
    > [0 00:48:22.739] [UN]  PID: 8854   TASK: ffff8c6914272e80  CPU: 2
    > COMMAND: "reopen_file"
    >  #0 [ffff99650054fb38] __schedule at ffffffff9b6e6095
    >  #1 [ffff99650054fbc8] schedule at ffffffff9b6e64df
    >  #2 [ffff99650054fbd8] io_schedule at ffffffff9b6e68e2
    >  #3 [ffff99650054fbe8] __lock_page at ffffffff9b03c56f
    >  #4 [ffff99650054fc80] pagecache_get_page at ffffffff9b03dcdf
    >  #5 [ffff99650054fcc0] grab_cache_page_write_begin at ffffffff9b03ef4c
    >  #6 [ffff99650054fcd0] cifs_write_begin at ffffffffc0a064ec [cifs]
    >  #7 [ffff99650054fd30] generic_perform_write at ffffffff9b03bba4
    >  #8 [ffff99650054fda8] __generic_file_write_iter at ffffffff9b04060a
    >  #9 [ffff99650054fdf0] cifs_strict_writev.cold.70 at ffffffffc0a4469b [cifs]
    > #10 [ffff99650054fe48] new_sync_write at ffffffff9b0ec1dd
    > #11 [ffff99650054fed0] vfs_write at ffffffff9b0eed35
    > #12 [ffff99650054ff00] ksys_write at ffffffff9b0eefd9
    > #13 [ffff99650054ff38] do_syscall_64 at ffffffff9ae04315
    >
    > the process holds the inode->i_rwsem for the file to which it's writing,
    > and is trying to __lock_page for the same page as in the other processes
    >
    >
    > the other tasks:
    > [0 00:00:00.028] [UN]  PID: 8859   TASK: ffff8c6915479740  CPU: 2
    > COMMAND: "reopen_file"
    >  #0 [ffff9965007b39d8] __schedule at ffffffff9b6e6095
    >  #1 [ffff9965007b3a68] schedule at ffffffff9b6e64df
    >  #2 [ffff9965007b3a78] schedule_timeout at ffffffff9b6e9f89
    >  #3 [ffff9965007b3af0] msleep at ffffffff9af573a9
    >  #4 [ffff9965007b3af8] cifs_new_fileinfo.cold.61 at ffffffffc0a42a07 [cifs]
    >  #5 [ffff9965007b3b78] cifs_open at ffffffffc0a0709d [cifs]
    >  #6 [ffff9965007b3cd8] do_dentry_open at ffffffff9b0e9b7a
    >  #7 [ffff9965007b3d08] path_openat at ffffffff9b0fe34f
    >  #8 [ffff9965007b3dd8] do_filp_open at ffffffff9b100a33
    >  #9 [ffff9965007b3ee0] do_sys_open at ffffffff9b0eb2d6
    > #10 [ffff9965007b3f38] do_syscall_64 at ffffffff9ae04315
    >
    > this is opening the file, and is trying to down_write cinode->lock_sem
    >
    >
    > [0 00:00:00.041] [UN]  PID: 8860   TASK: ffff8c691547ae80  CPU: 2
    > COMMAND: "reopen_file"
    > [0 00:00:00.057] [UN]  PID: 8861   TASK: ffff8c6915478000  CPU: 3
    > COMMAND: "reopen_file"
    > [0 00:00:00.059] [UN]  PID: 8858   TASK: ffff8c6914271740  CPU: 2
    > COMMAND: "reopen_file"
    > [0 00:00:00.109] [UN]  PID: 8862   TASK: ffff8c691547dd00  CPU: 6
    > COMMAND: "reopen_file"
    >  #0 [ffff9965007c3c78] __schedule at ffffffff9b6e6095
    >  #1 [ffff9965007c3d08] schedule at ffffffff9b6e64df
    >  #2 [ffff9965007c3d18] schedule_timeout at ffffffff9b6e9f89
    >  #3 [ffff9965007c3d90] msleep at ffffffff9af573a9
    >  #4 [ffff9965007c3d98] _cifsFileInfo_put.cold.63 at ffffffffc0a42dd6 [cifs]
    >  #5 [ffff9965007c3e88] cifs_close at ffffffffc0a07aaf [cifs]
    >  #6 [ffff9965007c3ea0] __fput at ffffffff9b0efa6e
    >  #7 [ffff9965007c3ee8] task_work_run at ffffffff9aef1614
    >  #8 [ffff9965007c3f20] exit_to_usermode_loop at ffffffff9ae03d6f
    >  #9 [ffff9965007c3f38] do_syscall_64 at ffffffff9ae0444c
    >
    > closing the file, and trying to down_write cifsi->lock_sem
    >
    >
    > [0 00:48:22.839] [UN]  PID: 8857   TASK: ffff8c6914270000  CPU: 7
    > COMMAND: "reopen_file"
    >  #0 [ffff9965006a7cc8] __schedule at ffffffff9b6e6095
    >  #1 [ffff9965006a7d58] schedule at ffffffff9b6e64df
    >  #2 [ffff9965006a7d68] io_schedule at ffffffff9b6e68e2
    >  #3 [ffff9965006a7d78] wait_on_page_bit at ffffffff9b03cac6
    >  #4 [ffff9965006a7e10] __filemap_fdatawait_range at ffffffff9b03b028
    >  #5 [ffff9965006a7ed8] filemap_write_and_wait at ffffffff9b040165
    >  #6 [ffff9965006a7ef0] cifs_flush at ffffffffc0a0c2fa [cifs]
    >  #7 [ffff9965006a7f10] filp_close at ffffffff9b0e93f1
    >  #8 [ffff9965006a7f30] __x64_sys_close at ffffffff9b0e9a0e
    >  #9 [ffff9965006a7f38] do_syscall_64 at ffffffff9ae04315
    >
    > in __filemap_fdatawait_range
    >                         wait_on_page_writeback(page);
    > for the same page of the file
    >
    >
    >
    > [0 00:48:22.718] [UN]  PID: 8855   TASK: ffff8c69142745c0  CPU: 7
    > COMMAND: "reopen_file"
    >  #0 [ffff9965005dfc98] __schedule at ffffffff9b6e6095
    >  #1 [ffff9965005dfd28] schedule at ffffffff9b6e64df
    >  #2 [ffff9965005dfd38] rwsem_down_write_slowpath at ffffffff9af283d7
    >  #3 [ffff9965005dfdf0] cifs_strict_writev at ffffffffc0a0c40a [cifs]
    >  #4 [ffff9965005dfe48] new_sync_write at ffffffff9b0ec1dd
    >  #5 [ffff9965005dfed0] vfs_write at ffffffff9b0eed35
    >  #6 [ffff9965005dff00] ksys_write at ffffffff9b0eefd9
    >  #7 [ffff9965005dff38] do_syscall_64 at ffffffff9ae04315
    >
    >         inode_lock(inode);
    >
    >
    > and one 'ls' later on, to see whether the rest of the mount is available
    > (the test file is in the root, so we get blocked up on the directory
    > ->i_rwsem), so the entire mount is unavailable
    >
    > [0 00:36:26.473] [UN]  PID: 9802   TASK: ffff8c691436ae80  CPU: 4
    > COMMAND: "ls"
    >  #0 [ffff996500393d28] __schedule at ffffffff9b6e6095
    >  #1 [ffff996500393db8] schedule at ffffffff9b6e64df
    >  #2 [ffff996500393dc8] rwsem_down_read_slowpath at ffffffff9b6e9421
    >  #3 [ffff996500393e78] down_read_killable at ffffffff9b6e95e2
    >  #4 [ffff996500393e88] iterate_dir at ffffffff9b103c56
    >  #5 [ffff996500393ec8] ksys_getdents64 at ffffffff9b104b0c
    >  #6 [ffff996500393f30] __x64_sys_getdents64 at ffffffff9b104bb6
    >  #7 [ffff996500393f38] do_syscall_64 at ffffffff9ae04315
    >
    > in iterate_dir:
    >         if (shared)
    >                 res = down_read_killable(&inode->i_rwsem);  <<<<
    >         else
    >                 res = down_write_killable(&inode->i_rwsem);
    >
    
    Reported-by: Frank Sorenson <sorenson@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7739bc1e0e65e9a64793abbef2342d1dda35cc26
Author: Diego Elio Pettenò <flameeyes@flameeyes.com>
Date:   Tue Nov 19 21:37:08 2019 +0000

    cdrom: respect device capabilities during opening action
    
    [ Upstream commit 366ba7c71ef77c08d06b18ad61b26e2df7352338 ]
    
    Reading the TOC only works if the device can play audio, otherwise
    these commands fail (and possibly bring the device to an unhealthy
    state.)
    
    Similarly, cdrom_mmc3_profile() should only be called if the device
    supports generic packet commands.
    
    To: Jens Axboe <axboe@kernel.dk>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-scsi@vger.kernel.org
    Signed-off-by: Diego Elio Pettenò <flameeyes@flameeyes.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c45e9ed2457606b4d0bd5744538a1d81289391f
Author: Erhard Furtner <erhard_f@mailbox.org>
Date:   Tue Nov 26 02:48:04 2019 +0100

    of: unittest: fix memory leak in attach_node_and_children
    
    [ Upstream commit 2aacace6dbbb6b6ce4e177e6c7ea901f389c0472 ]
    
    In attach_node_and_children memory is allocated for full_name via
    kasprintf. If the condition of the 1st if is not met the function
    returns early without freeing the memory. Add a kfree() to fix that.
    
    This has been detected with kmemleak:
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=205327
    
    It looks like the leak was introduced by this commit:
    Fixes: 5babefb7f7ab ("of: unittest: allow base devicetree to have symbol metadata")
    
    Signed-off-by: Erhard Furtner <erhard_f@mailbox.org>
    Reviewed-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1768acaa6d8a0a0ef6b6ac3d3c0467e4ab404840
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Nov 20 09:26:29 2019 -0700

    io_uring: io_allocate_scq_urings() should return a sane state
    
    [ Upstream commit eb065d301e8c83643367bdb0898becc364046bda ]
    
    We currently rely on the ring destroy on cleaning things up in case of
    failure, but io_allocate_scq_urings() can leave things half initialized
    if only parts of it fails.
    
    Be nice and return with either everything setup in success, or return an
    error with things nicely cleaned up.
    
    Reported-by: syzbot+0d818c0d39399188f393@syzkaller.appspotmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b36482417730be1a73657ca2aa77c0e12f4cd3d9
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Sep 24 09:21:17 2019 +0200

    um: virtio: Keep reading on -EAGAIN
    
    [ Upstream commit 7e60746005573a06149cdee7acedf428906f3a59 ]
    
    When we get an interrupt from the socket getting readable,
    and start reading, there's a possibility for a race. This
    depends on the implementation of the device, but e.g. with
    qemu's libvhost-user, we can see:
    
     device                 virtio_uml
    ---------------------------------------
      write header
                             get interrupt
                             read header
                             read body -> returns -EAGAIN
      write body
    
    The -EAGAIN return is because the socket is non-blocking,
    and then this leads us to abandon this message.
    
    In fact, we've already read the header, so when the get
    another signal/interrupt for the body, we again read it
    as though it's a new message header, and also abandon it
    for the same reason (wrong size etc.)
    
    This essentially breaks things, and if that message was
    one that required a response, it leads to a deadlock as
    the device is waiting for the response but we'll never
    reply.
    
    Fix this by spinning on -EAGAIN as well when we read the
    message body. We need to handle -EAGAIN as "no message"
    while reading the header, since we share an interrupt.
    
    Note that this situation is highly unlikely to occur in
    normal usage, since there will be very few messages and
    only in the startup phase. With the inband call feature
    this does tend to happen (eventually) though.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42e8507bf2dcd39b4eddc318d63a1b494ffd098a
Author: Paulo Alcantara (SUSE) <pc@cjr.nz>
Date:   Fri Nov 22 12:30:51 2019 -0300

    cifs: Fix use-after-free bug in cifs_reconnect()
    
    [ Upstream commit 8354d88efdab72b4da32fc4f032448fcef22dab4 ]
    
    Ensure we grab an active reference in cifs superblock while doing
    failover to prevent automounts (DFS links) of expiring and then
    destroying the superblock pointer.
    
    This patch fixes the following KASAN report:
    
    [  464.301462] BUG: KASAN: use-after-free in
    cifs_reconnect+0x6ab/0x1350
    [  464.303052] Read of size 8 at addr ffff888155e580d0 by task
    cifsd/1107
    
    [  464.304682] CPU: 3 PID: 1107 Comm: cifsd Not tainted 5.4.0-rc4+ #13
    [  464.305552] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009),
    BIOS rel-1.12.1-0-ga5cab58-rebuilt.opensuse.org 04/01/2014
    [  464.307146] Call Trace:
    [  464.307875]  dump_stack+0x5b/0x90
    [  464.308631]  print_address_description.constprop.0+0x16/0x200
    [  464.309478]  ? cifs_reconnect+0x6ab/0x1350
    [  464.310253]  ? cifs_reconnect+0x6ab/0x1350
    [  464.311040]  __kasan_report.cold+0x1a/0x41
    [  464.311811]  ? cifs_reconnect+0x6ab/0x1350
    [  464.312563]  kasan_report+0xe/0x20
    [  464.313300]  cifs_reconnect+0x6ab/0x1350
    [  464.314062]  ? extract_hostname.part.0+0x90/0x90
    [  464.314829]  ? printk+0xad/0xde
    [  464.315525]  ? _raw_spin_lock+0x7c/0xd0
    [  464.316252]  ? _raw_read_lock_irq+0x40/0x40
    [  464.316961]  ? ___ratelimit+0xed/0x182
    [  464.317655]  cifs_readv_from_socket+0x289/0x3b0
    [  464.318386]  cifs_read_from_socket+0x98/0xd0
    [  464.319078]  ? cifs_readv_from_socket+0x3b0/0x3b0
    [  464.319782]  ? try_to_wake_up+0x43c/0xa90
    [  464.320463]  ? cifs_small_buf_get+0x4b/0x60
    [  464.321173]  ? allocate_buffers+0x98/0x1a0
    [  464.321856]  cifs_demultiplex_thread+0x218/0x14a0
    [  464.322558]  ? cifs_handle_standard+0x270/0x270
    [  464.323237]  ? __switch_to_asm+0x40/0x70
    [  464.323893]  ? __switch_to_asm+0x34/0x70
    [  464.324554]  ? __switch_to_asm+0x40/0x70
    [  464.325226]  ? __switch_to_asm+0x40/0x70
    [  464.325863]  ? __switch_to_asm+0x34/0x70
    [  464.326505]  ? __switch_to_asm+0x40/0x70
    [  464.327161]  ? __switch_to_asm+0x34/0x70
    [  464.327784]  ? finish_task_switch+0xa1/0x330
    [  464.328414]  ? __switch_to+0x363/0x640
    [  464.329044]  ? __schedule+0x575/0xaf0
    [  464.329655]  ? _raw_spin_lock_irqsave+0x82/0xe0
    [  464.330301]  kthread+0x1a3/0x1f0
    [  464.330884]  ? cifs_handle_standard+0x270/0x270
    [  464.331624]  ? kthread_create_on_node+0xd0/0xd0
    [  464.332347]  ret_from_fork+0x35/0x40
    
    [  464.333577] Allocated by task 1110:
    [  464.334381]  save_stack+0x1b/0x80
    [  464.335123]  __kasan_kmalloc.constprop.0+0xc2/0xd0
    [  464.335848]  cifs_smb3_do_mount+0xd4/0xb00
    [  464.336619]  legacy_get_tree+0x6b/0xa0
    [  464.337235]  vfs_get_tree+0x41/0x110
    [  464.337975]  fc_mount+0xa/0x40
    [  464.338557]  vfs_kern_mount.part.0+0x6c/0x80
    [  464.339227]  cifs_dfs_d_automount+0x336/0xd29
    [  464.339846]  follow_managed+0x1b1/0x450
    [  464.340449]  lookup_fast+0x231/0x4a0
    [  464.341039]  path_openat+0x240/0x1fd0
    [  464.341634]  do_filp_open+0x126/0x1c0
    [  464.342277]  do_sys_open+0x1eb/0x2c0
    [  464.342957]  do_syscall_64+0x5e/0x190
    [  464.343555]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [  464.344772] Freed by task 0:
    [  464.345347]  save_stack+0x1b/0x80
    [  464.345966]  __kasan_slab_free+0x12c/0x170
    [  464.346576]  kfree+0xa6/0x270
    [  464.347211]  rcu_core+0x39c/0xc80
    [  464.347800]  __do_softirq+0x10d/0x3da
    
    [  464.348919] The buggy address belongs to the object at
    ffff888155e58000
                    which belongs to the cache kmalloc-256 of size 256
    [  464.350222] The buggy address is located 208 bytes inside of
                    256-byte region [ffff888155e58000, ffff888155e58100)
    [  464.351575] The buggy address belongs to the page:
    [  464.352333] page:ffffea0005579600 refcount:1 mapcount:0
    mapping:ffff88815a803400 index:0x0 compound_mapcount: 0
    [  464.353583] flags: 0x200000000010200(slab|head)
    [  464.354209] raw: 0200000000010200 ffffea0005576200 0000000400000004
    ffff88815a803400
    [  464.355353] raw: 0000000000000000 0000000080100010 00000001ffffffff
    0000000000000000
    [  464.356458] page dumped because: kasan: bad access detected
    
    [  464.367005] Memory state around the buggy address:
    [  464.367787]  ffff888155e57f80: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [  464.368877]  ffff888155e58000: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [  464.369967] >ffff888155e58080: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [  464.371111]                                                  ^
    [  464.371775]  ffff888155e58100: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [  464.372893]  ffff888155e58180: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [  464.373983] ==================================================================
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afd954170f96d5cd41debc28937b8f72f5afbf06
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Nov 18 21:57:10 2019 -0700

    powerpc: Don't add -mabi= flags when building with Clang
    
    [ Upstream commit 465bfd9c44dea6b55962b5788a23ac87a467c923 ]
    
    When building pseries_defconfig, building vdso32 errors out:
    
      error: unknown target ABI 'elfv1'
    
    This happens because -m32 in clang changes the target to 32-bit,
    which does not allow the ABI to be changed.
    
    Commit 4dc831aa8813 ("powerpc: Fix compiling a BE kernel with a
    powerpc64le toolchain") added these flags to fix building big endian
    kernels with a little endian GCC.
    
    Clang doesn't need -mabi because the target triple controls the
    default value. -mlittle-endian and -mbig-endian manipulate the triple
    into either powerpc64-* or powerpc64le-*, which properly sets the
    default ABI.
    
    Adding a debug print out in the PPC64TargetInfo constructor after line
    383 above shows this:
    
      $ echo | ./clang -E --target=powerpc64-linux -mbig-endian -o /dev/null -
      Default ABI: elfv1
    
      $ echo | ./clang -E --target=powerpc64-linux -mlittle-endian -o /dev/null -
      Default ABI: elfv2
    
      $ echo | ./clang -E --target=powerpc64le-linux -mbig-endian -o /dev/null -
      Default ABI: elfv1
    
      $ echo | ./clang -E --target=powerpc64le-linux -mlittle-endian -o /dev/null -
      Default ABI: elfv2
    
    Don't specify -mabi when building with clang to avoid the build error
    with -m32 and not change any code generation.
    
    -mcall-aixdesc is not an implemented flag in clang so it can be safely
    excluded as well, see commit 238abecde8ad ("powerpc: Don't use gcc
    specific options on clang").
    
    pseries_defconfig successfully builds after this patch and
    powernv_defconfig and ppc44x_defconfig don't regress.
    
    Reviewed-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    [mpe: Trim clang links in change log]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191119045712.39633-2-natechancellor@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70958af3e2f9f2770eb5653dcf4904ee7d696963
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Sun Nov 24 01:04:30 2019 +0900

    scripts/kallsyms: fix definitely-lost memory leak
    
    [ Upstream commit 21915eca088dc271c970e8351290e83d938114ac ]
    
    build_initial_tok_table() overwrites unused sym_entry to shrink the
    table size. Before the entry is overwritten, table[i].sym must be freed
    since it is malloc'ed data.
    
    This fixes the 'definitely lost' report from valgrind. I ran valgrind
    against x86_64_defconfig of v5.4-rc8 kernel, and here is the summary:
    
    [Before the fix]
    
      LEAK SUMMARY:
         definitely lost: 53,184 bytes in 2,874 blocks
    
    [After the fix]
    
      LEAK SUMMARY:
         definitely lost: 0 bytes in 0 blocks
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7da0d7a575434fb82472a894960152c8c6b30347
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Nov 12 16:22:27 2019 -0400

    drm/amdgpu: Call find_vma under mmap_sem
    
    [ Upstream commit a9ae8731e6e52829a935d81a65d7f925cb95dbac ]
    
    find_vma() must be called under the mmap_sem, reorganize this code to
    do the vma check after entering the lock.
    
    Further, fix the unlocked use of struct task_struct's mm, instead use
    the mm from hmm_mirror which has an active mm_grab. Also the mm_grab
    must be converted to a mm_get before acquiring mmap_sem or calling
    find_vma().
    
    Fixes: 66c45500bfdc ("drm/amdgpu: use new HMM APIs and helpers")
    Fixes: 0919195f2b0d ("drm/amdgpu: Enable amdgpu_ttm_tt_get_user_pages in worker threads")
    Link: https://lore.kernel.org/r/20191112202231.3856-11-jgg@ziepe.ca
    Acked-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Philip Yang <Philip.Yang@amd.com>
    Tested-by: Philip Yang <Philip.Yang@amd.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f13232aa6370e09616563514ed7ef9d81c69f0e
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jun 27 14:09:04 2019 +0100

    apparmor: fix unsigned len comparison with less than zero
    
    [ Upstream commit 00e0590dbaec6f1bcaa36a85467d7e3497ced522 ]
    
    The sanity check in macro update_for_len checks to see if len
    is less than zero, however, len is a size_t so it can never be
    less than zero, so this sanity check is a no-op.  Fix this by
    making len a ssize_t so the comparison will work and add ulen
    that is a size_t copy of len so that the min() macro won't
    throw warnings about comparing different types.
    
    Addresses-Coverity: ("Macro compares unsigned to 0")
    Fixes: f1bd904175e8 ("apparmor: add the base fns() for domain labels")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adeec3de92221e6f32935b95e96b7418f14ea457
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Thu Nov 14 06:32:01 2019 +0000

    Drivers: hv: vmbus: Fix crash handler reset of Hyper-V synic
    
    [ Upstream commit 7a1323b5dfe44a9013a2cc56ef2973034a00bf88 ]
    
    The crash handler calls hv_synic_cleanup() to shutdown the
    Hyper-V synthetic interrupt controller.  But if the CPU
    that calls hv_synic_cleanup() has a VMbus channel interrupt
    assigned to it (which is likely the case in smaller VM sizes),
    hv_synic_cleanup() returns an error and the synthetic
    interrupt controller isn't shutdown.  While the lack of
    being shutdown hasn't caused a known problem, it still
    should be fixed for highest reliability.
    
    So directly call hv_synic_disable_regs() instead of
    hv_synic_cleanup(), which ensures that the synic is always
    shutdown.
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7dad7c353ba94d200e2a3b33895eb4a56fdf628
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Fri Nov 15 12:35:22 2019 -0800

    tools/power/x86/intel-speed-select: Ignore missing config level
    
    [ Upstream commit 20183ccd3e4d01d23b0a01fe9f3ee73fbae312fa ]
    
    It is possible that certain config levels are not available, even
    if the max level includes the level. There can be missing levels in
    some platforms. So ignore the level when called for information dump
    for all levels and fail if specifically ask for the missing level.
    
    Here the changes is to continue reading information about other levels
    even if we fail to get information for the current level. But use the
    "processed" flag to indicate the failure. When the "processed" flag is
    not set, don't dump information about that level.
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a2d6bc5aa9e163b67786310c7b5c8ed669e8f74
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Nov 18 20:02:51 2019 +0200

    gpio: lynxpoint: Setup correct IRQ handlers
    
    [ Upstream commit e272f7ec070d212b9301d5a465bc8952f8dcf908 ]
    
    When commit 75e99bf5ed8f ("gpio: lynxpoint: set default handler to be
    handle_bad_irq()") switched default handler to be handle_bad_irq() the
    lp_irq_type() function remained untouched. It means that even request_irq()
    can't change the handler and we are not able to handle IRQs properly anymore.
    Fix it by setting correct handlers in the lp_irq_type() callback.
    
    Fixes: 75e99bf5ed8f ("gpio: lynxpoint: set default handler to be handle_bad_irq()")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20191118180251.31439-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00ae1761fab3b3fdeb703e5aa85aca0bbeda8e5c
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Nov 15 14:55:51 2019 +0200

    gpio: mpc8xxx: Don't overwrite default irq_set_type callback
    
    [ Upstream commit 4e50573f39229d5e9c985fa3b4923a8b29619ade ]
    
    The per-SoC devtype structures can contain their own callbacks that
    overwrite mpc8xxx_gpio_devtype_default.
    
    The clear intention is that mpc8xxx_irq_set_type is used in case the SoC
    does not specify a more specific callback. But what happens is that if
    the SoC doesn't specify one, its .irq_set_type is de-facto NULL, and
    this overwrites mpc8xxx_irq_set_type to a no-op. This means that the
    following SoCs are affected:
    
    - fsl,mpc8572-gpio
    - fsl,ls1028a-gpio
    - fsl,ls1088a-gpio
    
    On these boards, the irq_set_type does exactly nothing, and the GPIO
    controller keeps its GPICR register in the hardware-default state. On
    the LS1028A, that is ACTIVE_BOTH, which means 2 interrupts are raised
    even if the IRQ client requests LEVEL_HIGH. Another implication is that
    the IRQs are not checked (e.g. level-triggered interrupts are not
    rejected, although they are not supported).
    
    Fixes: 82e39b0d8566 ("gpio: mpc8xxx: handle differences between incarnations at a single place")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20191115125551.31061-1-olteanv@gmail.com
    Tested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b22d3a4b7b55d64c3983bd62f468345e37a5f9fe
Author: Gayatri Kammela <gayatri.kammela@intel.com>
Date:   Mon Nov 18 11:05:41 2019 -0800

    platform/x86: intel_pmc_core: Add Comet Lake (CML) platform support to intel_pmc_core driver
    
    [ Upstream commit 5406327d43edd9a171bd260f49c752d148727eaf ]
    
    Add Comet Lake to the list of the platforms that intel_pmc_core driver
    supports for pmc_core device.
    
    Just like Ice Lake, Comet Lake can also reuse all the Cannon Lake PCH
    IPs. No additional effort is needed to enable but to simply reuse them.
    
    Cc: Mario Limonciello <mario.limonciello@dell.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Srinivas Pandruvada <srinivas.pandruvada@intel.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Kan Liang <kan.liang@intel.com>
    Cc: David E. Box <david.e.box@intel.com>
    Cc: Rajneesh Bhardwaj <rajneesh.bhardwaj@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b889648cb7eb62d14a5d8cf03da60a403d509aac
Author: Gayatri Kammela <gayatri.kammela@intel.com>
Date:   Mon Nov 18 11:05:40 2019 -0800

    platform/x86: intel_pmc_core: Fix the SoC naming inconsistency
    
    [ Upstream commit 43e82d8aa92503d264309fb648b251b2d85caf1a ]
    
    Intel's SoCs follow a naming convention which spells out the SoC name as
    two words instead of one word (E.g: Cannon Lake vs Cannonlake). Thus fix
    the naming inconsistency across the intel_pmc_core driver, so future
    SoCs can follow the naming consistency as below.
    
    Cometlake -> Comet Lake
    Tigerlake -> Tiger Lake
    Elkhartlake -> Elkhart Lake
    
    Cc: Mario Limonciello <mario.limonciello@dell.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Srinivas Pandruvada <srinivas.pandruvada@intel.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Kan Liang <kan.liang@intel.com>
    Cc: David E. Box <david.e.box@intel.com>
    Cc: Rajneesh Bhardwaj <rajneesh.bhardwaj@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Suggested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fd185ba5688fbb5191213ab849f03940f3012c6
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue Nov 19 13:10:38 2019 +0000

    gpio/mpc8xxx: fix qoriq GPIO reading
    
    [ Upstream commit 787b64a43f7acacf8099329ea08872e663f1e74f ]
    
    Qoriq requires the IBE register to be set to enable GPIO inputs to be
    read.  Set it.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Link: https://lore.kernel.org/r/E1iX3HC-00069N-0T@rmk-PC.armlinux.org.uk
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02270fc85b51a514b55ae6f6b3050de34e159e34
Author: Omer Shpigelman <oshpigelman@habana.ai>
Date:   Thu Nov 14 18:23:57 2019 +0000

    habanalabs: skip VA block list update in reset flow
    
    [ Upstream commit 71c5e55e7c077fa17c42fbda91a8d14322825c44 ]
    
    Reduce context close time by skipping the VA block free list update in
    order to avoid hard reset with open contexts.
    Reset with open contexts can potentially lead to a kernel crash as the
    generic pool of the MMU hops is destroyed while it is not empty because
    some unmap operations are not done.
    The commit affect mainly when running on simulator.
    
    Signed-off-by: Omer Shpigelman <oshpigelman@habana.ai>
    Reviewed-by: Oded Gabbay <oded.gabbay@gmail.com>
    Signed-off-by: Oded Gabbay <oded.gabbay@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce7269497052f463cb3c74f1388d352c37d24b80
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Wed Nov 13 16:01:03 2019 +0530

    f2fs: Fix deadlock in f2fs_gc() context during atomic files handling
    
    [ Upstream commit 677017d196ba2a4cfff13626b951cc9a206b8c7c ]
    
    The FS got stuck in the below stack when the storage is almost
    full/dirty condition (when FG_GC is being done).
    
    schedule_timeout
    io_schedule_timeout
    congestion_wait
    f2fs_drop_inmem_pages_all
    f2fs_gc
    f2fs_balance_fs
    __write_node_page
    f2fs_fsync_node_pages
    f2fs_do_sync_file
    f2fs_ioctl
    
    The root cause for this issue is there is a potential infinite loop
    in f2fs_drop_inmem_pages_all() for the case where gc_failure is true
    and when there an inode whose i_gc_failures[GC_FAILURE_ATOMIC] is
    not set. Fix this by keeping track of the total atomic files
    currently opened and using that to exit from this condition.
    
    Fix-suggested-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddf426dbe3162d61d35497dc5ac8034778009481
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Nov 13 14:05:08 2019 -0800

    scsi: target: iscsi: Wait for all commands to finish before freeing a session
    
    [ Upstream commit e9d3009cb936bd0faf0719f68d98ad8afb1e613b ]
    
    The iSCSI target driver is the only target driver that does not wait for
    ongoing commands to finish before freeing a session. Make the iSCSI target
    driver wait for ongoing commands to finish before freeing a session. This
    patch fixes the following KASAN complaint:
    
    BUG: KASAN: use-after-free in __lock_acquire+0xb1a/0x2710
    Read of size 8 at addr ffff8881154eca70 by task kworker/0:2/247
    
    CPU: 0 PID: 247 Comm: kworker/0:2 Not tainted 5.4.0-rc1-dbg+ #6
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Workqueue: target_completion target_complete_ok_work [target_core_mod]
    Call Trace:
     dump_stack+0x8a/0xd6
     print_address_description.constprop.0+0x40/0x60
     __kasan_report.cold+0x1b/0x33
     kasan_report+0x16/0x20
     __asan_load8+0x58/0x90
     __lock_acquire+0xb1a/0x2710
     lock_acquire+0xd3/0x200
     _raw_spin_lock_irqsave+0x43/0x60
     target_release_cmd_kref+0x162/0x7f0 [target_core_mod]
     target_put_sess_cmd+0x2e/0x40 [target_core_mod]
     lio_check_stop_free+0x12/0x20 [iscsi_target_mod]
     transport_cmd_check_stop_to_fabric+0xd8/0xe0 [target_core_mod]
     target_complete_ok_work+0x1b0/0x790 [target_core_mod]
     process_one_work+0x549/0xa40
     worker_thread+0x7a/0x5d0
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Allocated by task 889:
     save_stack+0x23/0x90
     __kasan_kmalloc.constprop.0+0xcf/0xe0
     kasan_slab_alloc+0x12/0x20
     kmem_cache_alloc+0xf6/0x360
     transport_alloc_session+0x29/0x80 [target_core_mod]
     iscsi_target_login_thread+0xcd6/0x18f0 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Freed by task 1025:
     save_stack+0x23/0x90
     __kasan_slab_free+0x13a/0x190
     kasan_slab_free+0x12/0x20
     kmem_cache_free+0x146/0x400
     transport_free_session+0x179/0x2f0 [target_core_mod]
     transport_deregister_session+0x130/0x180 [target_core_mod]
     iscsit_close_session+0x12c/0x350 [iscsi_target_mod]
     iscsit_logout_post_handler+0x136/0x380 [iscsi_target_mod]
     iscsit_response_queue+0x8de/0xbe0 [iscsi_target_mod]
     iscsi_target_tx_thread+0x27f/0x370 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    The buggy address belongs to the object at ffff8881154ec9c0
     which belongs to the cache se_sess_cache of size 352
    The buggy address is located 176 bytes inside of
     352-byte region [ffff8881154ec9c0, ffff8881154ecb20)
    The buggy address belongs to the page:
    page:ffffea0004553b00 refcount:1 mapcount:0 mapping:ffff888101755400 index:0x0 compound_mapcount: 0
    flags: 0x2fff000000010200(slab|head)
    raw: 2fff000000010200 dead000000000100 dead000000000122 ffff888101755400
    raw: 0000000000000000 0000000080130013 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881154ec900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8881154ec980: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    >ffff8881154eca00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                 ^
     ffff8881154eca80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8881154ecb00: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
    
    Cc: Mike Christie <mchristi@redhat.com>
    Link: https://lore.kernel.org/r/20191113220508.198257-3-bvanassche@acm.org
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 692b104e36fe1623786760740afb984d19de016d
Author: Anatol Pomazau <anatol@google.com>
Date:   Fri Nov 15 19:47:35 2019 -0500

    scsi: iscsi: Don't send data to unbound connection
    
    [ Upstream commit 238191d65d7217982d69e21c1d623616da34b281 ]
    
    If a faulty initiator fails to bind the socket to the iSCSI connection
    before emitting a command, for instance, a subsequent send_pdu, it will
    crash the kernel due to a null pointer dereference in sock_sendmsg(), as
    shown in the log below.  This patch makes sure the bind succeeded before
    trying to use the socket.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000018
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    CPU: 3 PID: 7 Comm: kworker/u8:0 Not tainted 5.4.0-rc2.iscsi+ #13
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    [   24.158246] Workqueue: iscsi_q_0 iscsi_xmitworker
    [   24.158883] RIP: 0010:apparmor_socket_sendmsg+0x5/0x20
    [...]
    [   24.161739] RSP: 0018:ffffab6440043ca0 EFLAGS: 00010282
    [   24.162400] RAX: ffffffff891c1c00 RBX: ffffffff89d53968 RCX: 0000000000000001
    [   24.163253] RDX: 0000000000000030 RSI: ffffab6440043d00 RDI: 0000000000000000
    [   24.164104] RBP: 0000000000000030 R08: 0000000000000030 R09: 0000000000000030
    [   24.165166] R10: ffffffff893e66a0 R11: 0000000000000018 R12: ffffab6440043d00
    [   24.166038] R13: 0000000000000000 R14: 0000000000000000 R15: ffff9d5575a62e90
    [   24.166919] FS:  0000000000000000(0000) GS:ffff9d557db80000(0000) knlGS:0000000000000000
    [   24.167890] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   24.168587] CR2: 0000000000000018 CR3: 000000007a838000 CR4: 00000000000006e0
    [   24.169451] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   24.170320] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   24.171214] Call Trace:
    [   24.171537]  security_socket_sendmsg+0x3a/0x50
    [   24.172079]  sock_sendmsg+0x16/0x60
    [   24.172506]  iscsi_sw_tcp_xmit_segment+0x77/0x120
    [   24.173076]  iscsi_sw_tcp_pdu_xmit+0x58/0x170
    [   24.173604]  ? iscsi_dbg_trace+0x63/0x80
    [   24.174087]  iscsi_tcp_task_xmit+0x101/0x280
    [   24.174666]  iscsi_xmit_task+0x83/0x110
    [   24.175206]  iscsi_xmitworker+0x57/0x380
    [   24.175757]  ? __schedule+0x2a2/0x700
    [   24.176273]  process_one_work+0x1b5/0x360
    [   24.176837]  worker_thread+0x50/0x3c0
    [   24.177353]  kthread+0xf9/0x130
    [   24.177799]  ? process_one_work+0x360/0x360
    [   24.178401]  ? kthread_park+0x90/0x90
    [   24.178915]  ret_from_fork+0x35/0x40
    [   24.179421] Modules linked in:
    [   24.179856] CR2: 0000000000000018
    [   24.180327] ---[ end trace b4b7674b6df5f480 ]---
    
    Signed-off-by: Anatol Pomazau <anatol@google.com>
    Co-developed-by: Frank Mayhar <fmayhar@google.com>
    Signed-off-by: Frank Mayhar <fmayhar@google.com>
    Co-developed-by: Bharath Ravi <rbharath@google.com>
    Signed-off-by: Bharath Ravi <rbharath@google.com>
    Co-developed-by: Khazhimsel Kumykov <khazhy@google.com>
    Signed-off-by: Khazhimsel Kumykov <khazhy@google.com>
    Co-developed-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit affadd78b17a6c7e79d921b71cf4d77b4b32a24a
Author: Can Guo <cang@codeaurora.org>
Date:   Thu Nov 14 22:09:26 2019 -0800

    scsi: ufs: Fix up auto hibern8 enablement
    
    [ Upstream commit 71d848b8d97ec0f8e993d63cf9de6ac8b3f7c43d ]
    
    Fix up possible unclocked register access to auto hibern8 register in
    resume path and through sysfs entry. Meanwhile, enable auto hibern8 only
    after device is fully initialized in probe path.
    
    Link: https://lore.kernel.org/r/1573798172-20534-4-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2852d1dc224255db42a3d358730537d81635131
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Nov 13 14:05:07 2019 -0800

    scsi: target: core: Release SPC-2 reservations when closing a session
    
    [ Upstream commit 80647a89eaf3f2549741648f3230cd6ff68c23b4 ]
    
    The SCSI specs require releasing SPC-2 reservations when a session is
    closed. Make sure that the target core does this.
    
    Running the libiscsi tests triggers the KASAN complaint shown below.  This
    patch fixes that use-after-free.
    
    BUG: KASAN: use-after-free in target_check_reservation+0x171/0x980 [target_core_mod]
    Read of size 8 at addr ffff88802ecd1878 by task iscsi_trx/17200
    
    CPU: 0 PID: 17200 Comm: iscsi_trx Not tainted 5.4.0-rc1-dbg+ #1
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    Call Trace:
     dump_stack+0x8a/0xd6
     print_address_description.constprop.0+0x40/0x60
     __kasan_report.cold+0x1b/0x34
     kasan_report+0x16/0x20
     __asan_load8+0x58/0x90
     target_check_reservation+0x171/0x980 [target_core_mod]
     __target_execute_cmd+0xb1/0xf0 [target_core_mod]
     target_execute_cmd+0x22d/0x4d0 [target_core_mod]
     transport_generic_new_cmd+0x31f/0x5b0 [target_core_mod]
     transport_handle_cdb_direct+0x6f/0x90 [target_core_mod]
     iscsit_execute_cmd+0x381/0x3f0 [iscsi_target_mod]
     iscsit_sequence_cmd+0x13b/0x1f0 [iscsi_target_mod]
     iscsit_process_scsi_cmd+0x4c/0x130 [iscsi_target_mod]
     iscsit_get_rx_pdu+0x8e8/0x15f0 [iscsi_target_mod]
     iscsi_target_rx_thread+0x105/0x1b0 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Allocated by task 1079:
     save_stack+0x23/0x90
     __kasan_kmalloc.constprop.0+0xcf/0xe0
     kasan_slab_alloc+0x12/0x20
     kmem_cache_alloc+0xfe/0x3a0
     transport_alloc_session+0x29/0x80 [target_core_mod]
     iscsi_target_login_thread+0xceb/0x1920 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Freed by task 17193:
     save_stack+0x23/0x90
     __kasan_slab_free+0x13a/0x190
     kasan_slab_free+0x12/0x20
     kmem_cache_free+0xc8/0x3e0
     transport_free_session+0x179/0x2f0 [target_core_mod]
     transport_deregister_session+0x121/0x170 [target_core_mod]
     iscsit_close_session+0x12c/0x350 [iscsi_target_mod]
     iscsit_logout_post_handler+0x136/0x380 [iscsi_target_mod]
     iscsit_response_queue+0x8fa/0xc00 [iscsi_target_mod]
     iscsi_target_tx_thread+0x28e/0x390 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    The buggy address belongs to the object at ffff88802ecd1860
     which belongs to the cache se_sess_cache of size 352
    The buggy address is located 24 bytes inside of
     352-byte region [ffff88802ecd1860, ffff88802ecd19c0)
    The buggy address belongs to the page:
    page:ffffea0000bb3400 refcount:1 mapcount:0 mapping:ffff8880bef2ed00 index:0x0 compound_mapcount: 0
    flags: 0x1000000000010200(slab|head)
    raw: 1000000000010200 dead000000000100 dead000000000122 ffff8880bef2ed00
    raw: 0000000000000000 0000000080270027 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88802ecd1700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88802ecd1780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88802ecd1800: fb fb fb fb fc fc fc fc fc fc fc fc fb fb fb fb
                                                                    ^
     ffff88802ecd1880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88802ecd1900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Cc: Mike Christie <mchristi@redhat.com>
    Link: https://lore.kernel.org/r/20191113220508.198257-2-bvanassche@acm.org
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 026401a5942a99e7aaa3f94c3ef4d204138b9fb9
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Nov 16 14:36:57 2019 +1100

    scsi: NCR5380: Add disconnect_mask module parameter
    
    [ Upstream commit 0b7a223552d455bcfba6fb9cfc5eef2b5fce1491 ]
    
    Add a module parameter to inhibit disconnect/reselect for individual
    targets. This gains compatibility with Aztec PowerMonster SCSI/SATA
    adapters with buggy firmware. (No fix is available from the vendor.)
    
    Apparently these adapters pass-through the product/vendor of the attached
    SATA device. Since they can't be identified from the response to an INQUIRY
    command, a device blacklist flag won't work.
    
    Cc: Michael Schmitz <schmitzmic@gmail.com>
    Link: https://lore.kernel.org/r/993b17545990f31f9fa5a98202b51102a68e7594.1573875417.git.fthain@telegraphics.com.au
    Reviewed-and-tested-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d411fa766a87315ceecd2a098531e0e322835a1
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Fri Nov 15 17:37:27 2019 +0100

    scsi: scsi_debug: num_tgts must be >= 0
    
    [ Upstream commit aa5334c4f3014940f11bf876e919c956abef4089 ]
    
    Passing the parameter "num_tgts=-1" will start an infinite loop that
    exhausts the system memory
    
    Link: https://lore.kernel.org/r/20191115163727.24626-1-mlombard@redhat.com
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17e6ff3d46add0e8618d0791dbd2adddc8b09b65
Author: Subhash Jadavani <subhashj@codeaurora.org>
Date:   Thu Nov 14 22:09:30 2019 -0800

    scsi: ufs: Fix error handing during hibern8 enter
    
    [ Upstream commit 6d303e4b19d694cdbebf76bcdb51ada664ee953d ]
    
    During clock gating (ufshcd_gate_work()), we first put the link hibern8 by
    calling ufshcd_uic_hibern8_enter() and if ufshcd_uic_hibern8_enter()
    returns success (0) then we gate all the clocks.  Now let’s zoom in to what
    ufshcd_uic_hibern8_enter() does internally: It calls
    __ufshcd_uic_hibern8_enter() and if failure is encountered, link recovery
    shall put the link back to the highest HS gear and returns success (0) to
    ufshcd_uic_hibern8_enter() which is the issue as link is still in active
    state due to recovery!  Now ufshcd_uic_hibern8_enter() returns success to
    ufshcd_gate_work() and hence it goes ahead with gating the UFS clock while
    link is still in active state hence I believe controller would raise UIC
    error interrupts. But when we service the interrupt, clocks might have
    already been disabled!
    
    This change fixes for this by returning failure from
    __ufshcd_uic_hibern8_enter() if recovery succeeds as link is still not in
    hibern8, upon receiving the error ufshcd_hibern8_enter() would initiate
    retry to put the link state back into hibern8.
    
    Link: https://lore.kernel.org/r/1573798172-20534-8-git-send-email-cang@codeaurora.org
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Subhash Jadavani <subhashj@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed1e1d67313ac9e8bf36974410524f553d91549d
Author: peter chang <dpf@google.com>
Date:   Thu Nov 14 15:38:58 2019 +0530

    scsi: pm80xx: Fix for SATA device discovery
    
    [ Upstream commit ce21c63ee995b7a8b7b81245f2cee521f8c3c220 ]
    
    Driver was missing complete() call in mpi_sata_completion which result in
    SATA abort error handling timing out. That causes the device to be left in
    the in_recovery state so subsequent commands sent to the device fail and
    the OS removes access to it.
    
    Link: https://lore.kernel.org/r/20191114100910.6153-2-deepak.ukey@microchip.com
    Acked-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Signed-off-by: peter chang <dpf@google.com>
    Signed-off-by: Deepak Ukey <deepak.ukey@microchip.com>
    Signed-off-by: Viswas G <Viswas.G@microchip.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4ef8f2e3cc6b833539ca07160140f5df87875a2
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Sep 12 13:49:42 2019 +0000

    powerpc/fixmap: Use __fix_to_virt() instead of fix_to_virt()
    
    [ Upstream commit 77693a5fb57be4606a6024ec8e3076f9499b906b ]
    
    Modify back __set_fixmap() to using __fix_to_virt() instead
    of fix_to_virt() otherwise the following happens because it
    seems GCC doesn't see idx as a builtin const.
    
      CC      mm/early_ioremap.o
    In file included from ./include/linux/kernel.h:11:0,
                     from mm/early_ioremap.c:11:
    In function ‘fix_to_virt’,
        inlined from ‘__set_fixmap’ at ./arch/powerpc/include/asm/fixmap.h:87:2,
        inlined from ‘__early_ioremap’ at mm/early_ioremap.c:156:4:
    ./include/linux/compiler.h:350:38: error: call to ‘__compiletime_assert_32’ declared with attribute error: BUILD_BUG_ON failed: idx >= __end_of_fixed_addresses
      _compiletime_assert(condition, msg, __compiletime_assert_, __LINE__)
                                          ^
    ./include/linux/compiler.h:331:4: note: in definition of macro ‘__compiletime_assert’
        prefix ## suffix();    \
        ^
    ./include/linux/compiler.h:350:2: note: in expansion of macro ‘_compiletime_assert’
      _compiletime_assert(condition, msg, __compiletime_assert_, __LINE__)
      ^
    ./include/linux/build_bug.h:39:37: note: in expansion of macro ‘compiletime_assert’
     #define BUILD_BUG_ON_MSG(cond, msg) compiletime_assert(!(cond), msg)
                                         ^
    ./include/linux/build_bug.h:50:2: note: in expansion of macro ‘BUILD_BUG_ON_MSG’
      BUILD_BUG_ON_MSG(condition, "BUILD_BUG_ON failed: " #condition)
      ^
    ./include/asm-generic/fixmap.h:32:2: note: in expansion of macro ‘BUILD_BUG_ON’
      BUILD_BUG_ON(idx >= __end_of_fixed_addresses);
      ^
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 4cfac2f9c7f1 ("powerpc/mm: Simplify __set_fixmap()")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/f4984c615f90caa3277775a68849afeea846850d.1568295907.git.christophe.leroy@c-s.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca7851d46de8a8d69022c4e5feed0820483b5f46
Author: Kevin Hao <haokexin@gmail.com>
Date:   Tue Oct 8 19:29:34 2019 +0800

    watchdog: Fix the race between the release of watchdog_core_data and cdev
    
    [ Upstream commit 72139dfa2464e43957d330266994740bb7be2535 ]
    
    The struct cdev is embedded in the struct watchdog_core_data. In the
    current code, we manage the watchdog_core_data with a kref, but the
    cdev is manged by a kobject. There is no any relationship between
    this kref and kobject. So it is possible that the watchdog_core_data is
    freed before the cdev is entirely released. We can easily get the
    following call trace with CONFIG_DEBUG_KOBJECT_RELEASE and
    CONFIG_DEBUG_OBJECTS_TIMERS enabled.
      ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x38
      WARNING: CPU: 23 PID: 1028 at lib/debugobjects.c:481 debug_print_object+0xb0/0xf0
      Modules linked in: softdog(-) deflate ctr twofish_generic twofish_common camellia_generic serpent_generic blowfish_generic blowfish_common cast5_generic cast_common cmac xcbc af_key sch_fq_codel openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4
      CPU: 23 PID: 1028 Comm: modprobe Not tainted 5.3.0-next-20190924-yoctodev-standard+ #180
      Hardware name: Marvell OcteonTX CN96XX board (DT)
      pstate: 00400009 (nzcv daif +PAN -UAO)
      pc : debug_print_object+0xb0/0xf0
      lr : debug_print_object+0xb0/0xf0
      sp : ffff80001cbcfc70
      x29: ffff80001cbcfc70 x28: ffff800010ea2128
      x27: ffff800010bad000 x26: 0000000000000000
      x25: ffff80001103c640 x24: ffff80001107b268
      x23: ffff800010bad9e8 x22: ffff800010ea2128
      x21: ffff000bc2c62af8 x20: ffff80001103c600
      x19: ffff800010e867d8 x18: 0000000000000060
      x17: 0000000000000000 x16: 0000000000000000
      x15: ffff000bd7240470 x14: 6e6968207473696c
      x13: 5f72656d6974203a x12: 6570797420746365
      x11: 6a626f2029302065 x10: 7461747320657669
      x9 : 7463612820657669 x8 : 3378302f3078302b
      x7 : 0000000000001d7a x6 : ffff800010fd5889
      x5 : 0000000000000000 x4 : 0000000000000000
      x3 : 0000000000000000 x2 : ffff000bff948548
      x1 : 276a1c9e1edc2300 x0 : 0000000000000000
      Call trace:
       debug_print_object+0xb0/0xf0
       debug_check_no_obj_freed+0x1e8/0x210
       kfree+0x1b8/0x368
       watchdog_cdev_unregister+0x88/0xc8
       watchdog_dev_unregister+0x38/0x48
       watchdog_unregister_device+0xa8/0x100
       softdog_exit+0x18/0xfec4 [softdog]
       __arm64_sys_delete_module+0x174/0x200
       el0_svc_handler+0xd0/0x1c8
       el0_svc+0x8/0xc
    
    This is a common issue when using cdev embedded in a struct.
    Fortunately, we already have a mechanism to solve this kind of issue.
    Please see commit 233ed09d7fda ("chardev: add helper function to
    register char devs with a struct device") for more detail.
    
    In this patch, we choose to embed the struct device into the
    watchdog_core_data, and use the API provided by the commit 233ed09d7fda
    to make sure that the release of watchdog_core_data and cdev are
    in sequence.
    
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20191008112934.29669-1-haokexin@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce4d6fff7a962727c29a5d34e26945ac0df133ff
Author: Julia Cartwright <julia@ni.com>
Date:   Tue Nov 5 15:45:06 2019 +0100

    watchdog: prevent deferral of watchdogd wakeup on RT
    
    [ Upstream commit a19f89335f4bda3d77d991c96583e3e51856acbb ]
    
    When PREEMPT_RT is enabled, all hrtimer expiry functions are
    deferred for execution into the context of ksoftirqd unless otherwise
    annotated.
    
    Deferring the expiry of the hrtimer used by the watchdog core, however,
    is a waste, as the callback does nothing but queue a kthread work item
    and wakeup watchdogd.
    
    It's worst then that, too: the deferral through ksoftirqd also means
    that for correct behavior a user must adjust the scheduling parameters
    of both watchdogd _and_ ksoftirqd, which is unnecessary and has other
    side effects (like causing unrelated expiry functions to execute at
    potentially elevated priority).
    
    Instead, mark the hrtimer used by the watchdog core as being _HARD to
    allow it's execution directly from hardirq context.  The work done in
    this expiry function is well-bounded and minimal.
    
    A user still must adjust the scheduling parameters of the watchdogd
    to be correct w.r.t. their application needs.
    
    Link: https://lkml.kernel.org/r/0e02d8327aeca344096c246713033887bc490dd7.1538089180.git.julia@ni.com
    Cc: Guenter Roeck <linux@roeck-us.net>
    Reported-and-tested-by: Steffen Trumtrar <s.trumtrar@pengutronix.de>
    Reported-by: Tim Sander <tim@krieglstein.org>
    Signed-off-by: Julia Cartwright <julia@ni.com>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    [bigeasy: use only HRTIMER_MODE_REL_HARD]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20191105144506.clyadjbvnn7b7b2m@linutronix.de
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c0dcde4844407845bb29bcc7b02561c3b1230b4
Author: Fabio Estevam <festevam@gmail.com>
Date:   Tue Oct 29 14:40:33 2019 -0300

    watchdog: imx7ulp: Fix reboot hang
    
    [ Upstream commit 6083ab7b2f3f25022e2e8f4c42f14a8521f47873 ]
    
    The following hang is observed when a 'reboot' command is issued:
    
    # reboot
    # Stopping network: OK
    Stopping klogd: OK
    Stopping syslogd: OK
    umount: devtmpfs busy - remounted read-only
    [    8.612079] EXT4-fs (mmcblk0p2): re-mounted. Opts: (null)
    The system is going down NOW!
    Sent SIGTERM to all processes
    Sent SIGKILL to all processes
    Requesting system reboot
    [   10.694753] reboot: Restarting system
    [   11.699008] Reboot failed -- System halted
    
    Fix this problem by adding a .restart ops member.
    
    Fixes: 41b630f41bf7 ("watchdog: Add i.MX7ULP watchdog support")
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20191029174037.25381-1-festevam@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f1d82ac0c72a1bc913252ec2e5848f473c6763b
Author: Andrew Duggan <aduggan@synaptics.com>
Date:   Wed Oct 23 01:24:03 2019 +0000

    HID: rmi: Check that the RMI_STARTED bit is set before unregistering the RMI transport device
    
    [ Upstream commit 8725aa4fa7ded30211ebd28bb1c9bae806eb3841 ]
    
    In the event that the RMI device is unreachable, the calls to rmi_set_mode() or
    rmi_set_page() will fail before registering the RMI transport device. When the
    device is removed, rmi_remove() will call rmi_unregister_transport_device()
    which will attempt to access the rmi_dev pointer which was not set.
    This patch adds a check of the RMI_STARTED bit before calling
    rmi_unregister_transport_device().  The RMI_STARTED bit is only set
    after rmi_register_transport_device() completes successfully.
    
    The kernel oops was reported in this message:
    https://www.spinics.net/lists/linux-input/msg58433.html
    
    [jkosina@suse.cz: reworded changelog as agreed with Andrew]
    Signed-off-by: Andrew Duggan <aduggan@synaptics.com>
    Reported-by: Federico Cerutti <federico@ceres-c.it>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65889bba7be12410fdc346420e4e49e693d92de1
Author: Blaž Hrastnik <blaz@mxxn.io>
Date:   Wed Nov 6 20:02:46 2019 +0900

    HID: Improve Windows Precision Touchpad detection.
    
    [ Upstream commit 2dbc6f113acd74c66b04bf49fb027efd830b1c5a ]
    
    Per Microsoft spec, usage 0xC5 (page 0xFF) returns a blob containing
    data used to verify the touchpad as a Windows Precision Touchpad.
    
       0x85, REPORTID_PTPHQA,    //    REPORT_ID (PTPHQA)
        0x09, 0xC5,              //    USAGE (Vendor Usage 0xC5)
        0x15, 0x00,              //    LOGICAL_MINIMUM (0)
        0x26, 0xff, 0x00,        //    LOGICAL_MAXIMUM (0xff)
        0x75, 0x08,              //    REPORT_SIZE (8)
        0x96, 0x00, 0x01,        //    REPORT_COUNT (0x100 (256))
        0xb1, 0x02,              //    FEATURE (Data,Var,Abs)
    
    However, some devices, namely Microsoft's Surface line of products
    instead implement a "segmented device certification report" (usage 0xC6)
    which returns the same report, but in smaller chunks.
    
        0x06, 0x00, 0xff,        //     USAGE_PAGE (Vendor Defined)
        0x85, REPORTID_PTPHQA,   //     REPORT_ID (PTPHQA)
        0x09, 0xC6,              //     USAGE (Vendor usage for segment #)
        0x25, 0x08,              //     LOGICAL_MAXIMUM (8)
        0x75, 0x08,              //     REPORT_SIZE (8)
        0x95, 0x01,              //     REPORT_COUNT (1)
        0xb1, 0x02,              //     FEATURE (Data,Var,Abs)
        0x09, 0xC7,              //     USAGE (Vendor Usage)
        0x26, 0xff, 0x00,        //     LOGICAL_MAXIMUM (0xff)
        0x95, 0x20,              //     REPORT_COUNT (32)
        0xb1, 0x02,              //     FEATURE (Data,Var,Abs)
    
    By expanding Win8 touchpad detection to also look for the segmented
    report, all Surface touchpads are now properly recognized by
    hid-multitouch.
    
    Signed-off-by: Blaž Hrastnik <blaz@mxxn.io>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 689b2c656f3f6a05c09fd9b6dd8d459de6d9fbd6
Author: Qian Cai <cai@lca.pw>
Date:   Thu Oct 31 10:05:19 2019 -0400

    libnvdimm/btt: fix variable 'rc' set but not used
    
    [ Upstream commit 4e24e37d5313edca8b4ab86f240c046c731e28d6 ]
    
    drivers/nvdimm/btt.c: In function 'btt_read_pg':
    drivers/nvdimm/btt.c:1264:8: warning: variable 'rc' set but not used
    [-Wunused-but-set-variable]
        int rc;
            ^~
    
    Add a ratelimited message in case a storm of errors is encountered.
    
    Fixes: d9b83c756953 ("libnvdimm, btt: rework error clearing")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    Link: https://lore.kernel.org/r/1572530719-32161-1-git-send-email-cai@lca.pw
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87d9d4cdb1975efb5852f25eb63498549bc57a32
Author: Doug Berger <opendmb@gmail.com>
Date:   Mon Nov 11 04:32:04 2019 +0100

    ARM: 8937/1: spectre-v2: remove Brahma-B53 from hardening
    
    [ Upstream commit 4ae5061a19b550dfe25397843427ed2ebab16b16 ]
    
    When the default processor handling was added to the function
    cpu_v7_spectre_init() it only excluded other ARM implemented processor
    cores. The Broadcom Brahma B53 core is not implemented by ARM so it
    ended up falling through into the set of processors that attempt to use
    the ARM_SMCCC_ARCH_WORKAROUND_1 service to harden the branch predictor.
    
    Since this workaround is not necessary for the Brahma-B53 this commit
    explicitly checks for it and prevents it from applying a branch
    predictor hardening workaround.
    
    Fixes: 10115105cb3a ("ARM: spectre-v2: add firmware based hardening")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0822e4dc6a38a2d1ce972a7b5c66c98ac2bb7713
Author: Aaron Ma <aaron.ma@canonical.com>
Date:   Thu Nov 14 03:12:47 2019 +0800

    HID: i2c-hid: fix no irq after reset on raydium 3118
    
    [ Upstream commit 0c8432236dea20a95f68fa17989ea3f8af0186a5 ]
    
    On some ThinkPad L390 some raydium 3118 touchscreen devices
    doesn't response any data after reset, but some does.
    
    Add this ID to no irq quirk,
    then don't wait for any response alike on these touchscreens.
    All kinds of raydium 3118 devices work fine.
    
    BugLink: https://bugs.launchpad.net/bugs/1849721
    
    Signed-off-by: Aaron Ma <aaron.ma@canonical.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d608857e1e09990bb1a71f90a73af712df42f96
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Nov 14 15:30:46 2019 +0100

    HID: logitech-hidpp: Silence intermittent get_battery_capacity errors
    
    [ Upstream commit 61005d65b6c7dcf61c19516e6ebe5acc02d2cdda ]
    
    My Logitech M185 (PID:4038) 2.4 GHz wireless HID++ mouse is causing
    intermittent errors like these in the log:
    
    [11091.034857] logitech-hidpp-device 0003:046D:4038.0006: hidpp20_batterylevel_get_battery_capacity: received protocol error 0x09
    [12388.031260] logitech-hidpp-device 0003:046D:4038.0006: hidpp20_batterylevel_get_battery_capacity: received protocol error 0x09
    [16613.718543] logitech-hidpp-device 0003:046D:4038.0006: hidpp20_batterylevel_get_battery_capacity: received protocol error 0x09
    [23529.938728] logitech-hidpp-device 0003:046D:4038.0006: hidpp20_batterylevel_get_battery_capacity: received protocol error 0x09
    
    We are already silencing error-code 0x09 (HIDPP_ERROR_RESOURCE_ERROR)
    errors in other places, lets do the same in
    hidpp20_batterylevel_get_battery_capacity to remove these harmless,
    but scary looking errors from the dmesg output.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3f76584cafe0e7d26923db3277f3f506841da7a
Author: Rob Herring <robh@kernel.org>
Date:   Wed Nov 13 09:46:19 2019 -0600

    dt-bindings: Improve validation build error handling
    
    [ Upstream commit 93512dad334deb444619505f1fbb761156f7471b ]
    
    Schema errors can cause make to exit before useful information is
    printed. This leaves developers wondering what's wrong. It can be
    overcome passing '-k' to make, but that's not an obvious solution.
    There's 2 scenarios where this happens.
    
    When using DT_SCHEMA_FILES to validate with a single schema, any error
    in the schema results in processed-schema.yaml being empty causing a
    make error. The result is the specific errors in the schema are never
    shown because processed-schema.yaml is the first target built. Simply
    making processed-schema.yaml last in extra-y ensures the full schema
    validation with detailed error messages happen first.
    
    The 2nd problem is while schema errors are ignored for
    processed-schema.yaml, full validation of the schema still runs in
    parallel and any schema validation errors will still stop the build when
    running validation of dts files. The fix is to not add the schema
    examples to extra-y in this case. This means 'dtbs_check' is no longer a
    superset of 'dt_binding_check'. Update the documentation to make this
    clear.
    
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Tested-by: Jeffrey Hugo <jhugo@codeaurora.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ed04c8d92c6db874b62d87592389042d06d96d8
Author: Jinke Fan <fanjinke@hygon.cn>
Date:   Wed Nov 13 11:38:41 2019 +0800

    HID: quirks: Add quirk for HP MSU1465 PIXART OEM mouse
    
    [ Upstream commit f1a0094cbbe97a5f8aca7bdc64bfe43ac9dc6879 ]
    
    The PixArt OEM mouse disconnets/reconnects every minute on
    Linux. All contents of dmesg are repetitive:
    
    [ 1465.810014] usb 1-2.2: USB disconnect, device number 20
    [ 1467.431509] usb 1-2.2: new low-speed USB device number 21 using xhci_hcd
    [ 1467.654982] usb 1-2.2: New USB device found, idVendor=03f0,idProduct=1f4a, bcdDevice= 1.00
    [ 1467.654985] usb 1-2.2: New USB device strings: Mfr=1, Product=2,SerialNumber=0
    [ 1467.654987] usb 1-2.2: Product: HP USB Optical Mouse
    [ 1467.654988] usb 1-2.2: Manufacturer: PixArt
    [ 1467.699722] input: PixArt HP USB Optical Mouse as /devices/pci0000:00/0000:00:07.1/0000:05:00.3/usb1/1-2/1-2.2/1-2.2:1.0/0003:03F0:1F4A.0012/input/input19
    [ 1467.700124] hid-generic 0003:03F0:1F4A.0012: input,hidraw0: USB HID v1.11 Mouse [PixArt HP USB Optical Mouse] on usb-0000:05:00.3-2.2/input0
    
    So add HID_QUIRK_ALWAYS_POLL for this one as well.
    Test the patch, the mouse is no longer disconnected and there are no
    duplicate logs in dmesg.
    
    Reference:
    https://github.com/sriemer/fix-linux-mouse
    
    Signed-off-by: Jinke Fan <fanjinke@hygon.cn>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91204059738e532c4e73e4d43bf10cd66029bf93
Author: Coly Li <colyli@suse.de>
Date:   Wed Nov 13 16:03:24 2019 +0800

    bcache: at least try to shrink 1 node in bch_mca_scan()
    
    [ Upstream commit 9fcc34b1a6dd4b8e5337e2b6ef45e428897eca6b ]
    
    In bch_mca_scan(), the number of shrinking btree node is calculated
    by code like this,
            unsigned long nr = sc->nr_to_scan;
    
            nr /= c->btree_pages;
            nr = min_t(unsigned long, nr, mca_can_free(c));
    variable sc->nr_to_scan is number of objects (here is bcache B+tree
    nodes' number) to shrink, and pointer variable sc is sent from memory
    management code as parametr of a callback.
    
    If sc->nr_to_scan is smaller than c->btree_pages, after the above
    calculation, variable 'nr' will be 0 and nothing will be shrunk. It is
    frequeently observed that only 1 or 2 is set to sc->nr_to_scan and make
    nr to be zero. Then bch_mca_scan() will do nothing more then acquiring
    and releasing mutex c->bucket_lock.
    
    This patch checkes whether nr is 0 after the above calculation, if 0
    is the result then set 1 to variable 'n'. Then at least bch_mca_scan()
    will try to shrink a single B+tree node.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b77d61dbdb41f1dfdf0b76c8f10fb5955c6d318
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Sat Oct 26 21:44:20 2019 +0200

    clk: pxa: fix one of the pxa RTC clocks
    
    [ Upstream commit 46acbcb4849b2ca2e6e975e7c8130c1d61c8fd0c ]
    
    The pxa27x platforms have a single IP with 2 drivers, sa1100-rtc and
    rtc-pxa drivers.
    
    A previous patch fixed the sa1100-rtc case, but the pxa-rtc wasn't
    fixed. This patch completes the previous one.
    
    Fixes: 8b6d10345e16 ("clk: pxa: add missing pxa27x clocks for Irda and sa1100-rtc")
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Link: https://lkml.kernel.org/r/20191026194420.11918-1-robert.jarzmik@free.fr
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2ead371071acc3ac8fa2154a4039bf8d42182e3
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Nov 2 12:06:54 2019 +1100

    scsi: atari_scsi: sun3_scsi: Set sg_tablesize to 1 instead of SG_NONE
    
    [ Upstream commit 79172ab20bfd8437b277254028efdb68484e2c21 ]
    
    Since the scsi subsystem adopted the blk-mq API, a host with zero
    sg_tablesize crashes with a NULL pointer dereference.
    
    blk_queue_max_segments: set to minimum 1
    scsi 0:0:0:0: Direct-Access     QEMU     QEMU HARDDISK    2.5+ PQ: 0 ANSI: 5
    scsi target0:0:0: Beginning Domain Validation
    scsi target0:0:0: Domain Validation skipping write tests
    scsi target0:0:0: Ending Domain Validation
    blk_queue_max_segments: set to minimum 1
    scsi 0:0:1:0: Direct-Access     QEMU     QEMU HARDDISK    2.5+ PQ: 0 ANSI: 5
    scsi target0:0:1: Beginning Domain Validation
    scsi target0:0:1: Domain Validation skipping write tests
    scsi target0:0:1: Ending Domain Validation
    blk_queue_max_segments: set to minimum 1
    scsi 0:0:2:0: CD-ROM            QEMU     QEMU CD-ROM      2.5+ PQ: 0 ANSI: 5
    scsi target0:0:2: Beginning Domain Validation
    scsi target0:0:2: Domain Validation skipping write tests
    scsi target0:0:2: Ending Domain Validation
    blk_queue_max_segments: set to minimum 1
    blk_queue_max_segments: set to minimum 1
    blk_queue_max_segments: set to minimum 1
    blk_queue_max_segments: set to minimum 1
    sr 0:0:2:0: Power-on or device reset occurred
    sd 0:0:0:0: Power-on or device reset occurred
    sd 0:0:1:0: Power-on or device reset occurred
    sd 0:0:0:0: [sda] 10485762 512-byte logical blocks: (5.37 GB/5.00 GiB)
    sd 0:0:0:0: [sda] Write Protect is off
    sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
    Unable to handle kernel NULL pointer dereference at virtual address (ptrval)
    Oops: 00000000
    Modules linked in:
    PC: [<001cd874>] blk_mq_free_request+0x66/0xe2
    SR: 2004  SP: (ptrval)  a2: 00874520
    d0: 00000000    d1: 00000000    d2: 009ba800    d3: 00000000
    d4: 00000000    d5: 08000002    a0: 0087be68    a1: 009a81e0
    Process kworker/u2:2 (pid: 15, task=(ptrval))
    Frame format=7 eff addr=0000007a ssw=0505 faddr=0000007a
    wb 1 stat/addr/data: 0000 00000000 00000000
    wb 2 stat/addr/data: 0000 00000000 00000000
    wb 3 stat/addr/data: 0000 0000007a 00000000
    push data: 00000000 00000000 00000000 00000000
    Stack from 0087bd98:
            00000002 00000000 0087be72 009a7820 0087bdb4 001c4f6c 009a7820 0087bdd4
            0024d200 009a7820 0024d0dc 0087be72 009baa00 0087be68 009a5000 0087be7c
            00265d10 009a5000 0087be72 00000003 00000000 00000000 00000000 0087be68
            00000bb8 00000005 00000000 00000000 00000000 00000000 00265c56 00000000
            009ba60c 0036ddf4 00000002 ffffffff 009baa00 009ba600 009a50d6 0087be74
            00227ba0 009baa08 00000001 009baa08 009ba60c 0036ddf4 00000000 00000000
    Call Trace: [<001c4f6c>] blk_put_request+0xe/0x14
     [<0024d200>] __scsi_execute+0x124/0x174
     [<0024d0dc>] __scsi_execute+0x0/0x174
     [<00265d10>] sd_revalidate_disk+0xba/0x1f02
     [<00265c56>] sd_revalidate_disk+0x0/0x1f02
     [<0036ddf4>] strlen+0x0/0x22
     [<00227ba0>] device_add+0x3da/0x604
     [<0036ddf4>] strlen+0x0/0x22
     [<00267e64>] sd_probe+0x30c/0x4b4
     [<0002da44>] process_one_work+0x0/0x402
     [<0022b978>] really_probe+0x226/0x354
     [<0022bc34>] driver_probe_device+0xa4/0xf0
     [<0002da44>] process_one_work+0x0/0x402
     [<0022bcd0>] __driver_attach_async_helper+0x50/0x70
     [<00035dae>] async_run_entry_fn+0x36/0x130
     [<0002db88>] process_one_work+0x144/0x402
     [<0002e1aa>] worker_thread+0x0/0x570
     [<0002e29a>] worker_thread+0xf0/0x570
     [<0002e1aa>] worker_thread+0x0/0x570
     [<003768d8>] schedule+0x0/0xb8
     [<0003f58c>] __init_waitqueue_head+0x0/0x12
     [<00033e92>] kthread+0xc2/0xf6
     [<000331e8>] kthread_parkme+0x0/0x4e
     [<003768d8>] schedule+0x0/0xb8
     [<00033dd0>] kthread+0x0/0xf6
     [<00002c10>] ret_from_kernel_thread+0xc/0x14
    Code: 0280 0006 0800 56c0 4400 0280 0000 00ff <52b4> 0c3a 082b 0006 0013 6706 2042 53a8 00c4 4ab9 0047 3374 6640 202d 000c 670c
    Disabling lock debugging due to kernel taint
    
    Avoid this by setting sg_tablesize = 1.
    
    Link: https://lore.kernel.org/r/4567bcae94523b47d6f3b77450ba305823bca479.1572656814.git.fthain@telegraphics.com.au
    Reported-and-tested-by: Michael Schmitz <schmitzmic@gmail.com>
    Reviewed-by: Michael Schmitz <schmitzmic@gmail.com>
    References: commit 68ab2d76e4be ("scsi: cxlflash: Set sg_tablesize to 1 instead of SG_NONE")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25579c7999462fbbaee7009037ae5675e294a7b6
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Thu Jul 11 20:28:14 2019 +0530

    powerpc/book3s/mm: Update Oops message to print the correct translation in use
    
    [ Upstream commit d7e02f7b7991dbe14a2acfb0e53d675cd149001c ]
    
    Avoids confusion when printing Oops message like below
    
     Faulting instruction address: 0xc00000000008bdb4
     Oops: Kernel access of bad area, sig: 11 [#1]
     LE PAGE_SIZE=64K MMU=Radix MMU=Hash SMP NR_CPUS=2048 NUMA PowerNV
    
    This was because we never clear the MMU_FTR_HPTE_TABLE feature flag
    even if we run with radix translation. It was discussed that we should
    look at this feature flag as an indication of the capability to run
    hash translation and we should not clear the flag even if we run in
    radix translation. All the code paths check for radix_enabled() check and
    if found true consider we are running with radix translation. Follow the
    same sequence for finding the MMU translation string to be used in Oops
    message.
    
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Acked-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190711145814.17970-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a99c17ab271460595eaad34c363917f98fb07b1
Author: Sam Bobroff <sbobroff@linux.ibm.com>
Date:   Thu Oct 17 15:59:37 2019 +1100

    powerpc/eeh: differentiate duplicate detection message
    
    [ Upstream commit de84ffc3ccbeec3678f95a3d898fc188efa0d9c5 ]
    
    Currently when an EEH error is detected, the system log receives the
    same (or almost the same) message twice:
    
      EEH: PHB#0 failure detected, location: N/A
      EEH: PHB#0 failure detected, location: N/A
    or
      EEH: eeh_dev_check_failure: Frozen PHB#0-PE#0 detected
      EEH: Frozen PHB#0-PE#0 detected
    
    This looks like a bug, but in fact the messages are from different
    functions and mean slightly different things.  So keep both but change
    one of the messages slightly, so that it's clear they are different:
    
      EEH: PHB#0 failure detected, location: N/A
      EEH: Recovering PHB#0, location: N/A
    or
      EEH: eeh_dev_check_failure: Frozen PHB#0-PE#0 detected
      EEH: Recovering PHB#0-PE#0
    
    Signed-off-by: Sam Bobroff <sbobroff@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/43817cb6e6631b0828b9a6e266f60d1f8ca8eb22.1571288375.git.sbobroff@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e25a8e8d0c14be7786160ae12c0998e22e39392b
Author: Gustavo L. F. Walbon <gwalbon@linux.ibm.com>
Date:   Thu May 2 18:09:07 2019 -0300

    powerpc/security: Fix wrong message when RFI Flush is disable
    
    [ Upstream commit 4e706af3cd8e1d0503c25332b30cad33c97ed442 ]
    
    The issue was showing "Mitigation" message via sysfs whatever the
    state of "RFI Flush", but it should show "Vulnerable" when it is
    disabled.
    
    If you have "L1D private" feature enabled and not "RFI Flush" you are
    vulnerable to meltdown attacks.
    
    "RFI Flush" is the key feature to mitigate the meltdown whatever the
    "L1D private" state.
    
    SEC_FTR_L1D_THREAD_PRIV is a feature for Power9 only.
    
    So the message should be as the truth table shows:
    
      CPU | L1D private | RFI Flush |                sysfs
      ----|-------------|-----------|-------------------------------------
       P9 |    False    |   False   | Vulnerable
       P9 |    False    |   True    | Mitigation: RFI Flush
       P9 |    True     |   False   | Vulnerable: L1D private per thread
       P9 |    True     |   True    | Mitigation: RFI Flush, L1D private per thread
       P8 |    False    |   False   | Vulnerable
       P8 |    False    |   True    | Mitigation: RFI Flush
    
    Output before this fix:
      # cat /sys/devices/system/cpu/vulnerabilities/meltdown
      Mitigation: RFI Flush, L1D private per thread
      # echo 0 > /sys/kernel/debug/powerpc/rfi_flush
      # cat /sys/devices/system/cpu/vulnerabilities/meltdown
      Mitigation: L1D private per thread
    
    Output after fix:
      # cat /sys/devices/system/cpu/vulnerabilities/meltdown
      Mitigation: RFI Flush, L1D private per thread
      # echo 0 > /sys/kernel/debug/powerpc/rfi_flush
      # cat /sys/devices/system/cpu/vulnerabilities/meltdown
      Vulnerable: L1D private per thread
    
    Signed-off-by: Gustavo L. F. Walbon <gwalbon@linux.ibm.com>
    Signed-off-by: Mauro S. M. Rodrigues <maurosr@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190502210907.42375-1-gwalbon@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03c90248c574b002a588a97187000179db6aef7d
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Sun Nov 10 23:21:36 2019 -0600

    PCI: rpaphp: Correctly match ibm, my-drc-index to drc-name when using drc-info
    
    [ Upstream commit 4f9f2d3d7a434b7f882b72550194c9278f4a3925 ]
    
    The newer ibm,drc-info property is a condensed description of the old
    ibm,drc-* properties (ie. names, types, indexes, and power-domains).
    When matching a drc-index to a drc-name we need to verify that the
    index is within the start and last drc-index range and map it to a
    drc-name using the drc-name-prefix and logical index.
    
    Fix the mapping by checking that the index is within the range of the
    current drc-info entry, and build the name from the drc-name-prefix
    concatenated with the starting drc-name-suffix value and the sequential
    index obtained by subtracting ibm,my-drc-index from this entries
    drc-start-index.
    
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1573449697-5448-10-git-send-email-tyreld@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b49ded4448ac0153656c44d1165e9f970714bb8
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Sun Nov 10 23:21:35 2019 -0600

    PCI: rpaphp: Annotate and correctly byte swap DRC properties
    
    [ Upstream commit 0737686778c6dbe0908d684dd5b9c05b127526ba ]
    
    The device tree is in big endian format and any properties directly
    retrieved using OF helpers that don't explicitly byte swap should
    be annotated. In particular there are several places where we grab
    the opaque property value for the old ibm,drc-* properties and the
    ibm,my-drc-index property.
    
    Fix this for better static checking by annotating values we know to
    explicitly big endian, and byte swap where appropriate.
    
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1573449697-5448-9-git-send-email-tyreld@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7aae44bbc91b90ae2b9fba573e51469ea4e1c7e4
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Sun Nov 10 23:21:32 2019 -0600

    PCI: rpaphp: Don't rely on firmware feature to imply drc-info support
    
    [ Upstream commit 52e2b0f16574afd082cff0f0e8567b2d9f68c033 ]
    
    In the event that the partition is migrated to a platform with older
    firmware that doesn't support the ibm,drc-info property the device
    tree is modified to remove the ibm,drc-info property and replace it
    with the older style ibm,drc-* properties for types, names, indexes,
    and power-domains. One of the requirements of the drc-info firmware
    feature is that the client is able to handle both the new property,
    and old style properties at runtime. Therefore we can't rely on the
    firmware feature alone to dictate which property is currently
    present in the device tree.
    
    Fix this short coming by checking explicitly for the ibm,drc-info
    property, and falling back to the older ibm,drc-* properties if it
    doesn't exist.
    
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1573449697-5448-6-git-send-email-tyreld@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bc418d6a90bdf2b39f362bfb92881582573fcc4
Author: David Hildenbrand <david@redhat.com>
Date:   Thu Oct 31 15:29:22 2019 +0100

    powerpc/pseries/cmm: Implement release() function for sysfs device
    
    [ Upstream commit 7d8212747435c534c8d564fbef4541a463c976ff ]
    
    When unloading the module, one gets
      ------------[ cut here ]------------
      Device 'cmm0' does not have a release() function, it is broken and must be fixed. See Documentation/kobject.txt.
      WARNING: CPU: 0 PID: 19308 at drivers/base/core.c:1244 .device_release+0xcc/0xf0
      ...
    
    We only have one static fake device. There is nothing to do when
    releasing the device (via cmm_exit()).
    
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191031142933.10779-2-david@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e02c150d9bcd2bc3122c90fa15883078c260dafd
Author: Bean Huo <beanhuo@micron.com>
Date:   Tue Nov 12 23:34:36 2019 +0100

    scsi: ufs: fix potential bug which ends in system hang
    
    [ Upstream commit cfcbae3895b86c390ede57b2a8f601dd5972b47b ]
    
    In function __ufshcd_query_descriptor(), in the event of an error
    happening, we directly goto out_unlock and forget to invaliate
    hba->dev_cmd.query.descriptor pointer. This results in this pointer still
    valid in ufshcd_copy_query_response() for other query requests which go
    through ufshcd_exec_raw_upiu_cmd(). This will cause __memcpy() crash and
    system hangs. Log as shown below:
    
    Unable to handle kernel paging request at virtual address
    ffff000012233c40
    Mem abort info:
       ESR = 0x96000047
       Exception class = DABT (current EL), IL = 32 bits
       SET = 0, FnV = 0
       EA = 0, S1PTW = 0
    Data abort info:
       ISV = 0, ISS = 0x00000047
       CM = 0, WnR = 1
    swapper pgtable: 4k pages, 48-bit VAs, pgdp = 0000000028cc735c
    [ffff000012233c40] pgd=00000000bffff003, pud=00000000bfffe003,
    pmd=00000000ba8b8003, pte=0000000000000000
     Internal error: Oops: 96000047 [#2] PREEMPT SMP
     ...
     Call trace:
      __memcpy+0x74/0x180
      ufshcd_issue_devman_upiu_cmd+0x250/0x3c0
      ufshcd_exec_raw_upiu_cmd+0xfc/0x1a8
      ufs_bsg_request+0x178/0x3b0
      bsg_queue_rq+0xc0/0x118
      blk_mq_dispatch_rq_list+0xb0/0x538
      blk_mq_sched_dispatch_requests+0x18c/0x1d8
      __blk_mq_run_hw_queue+0xb4/0x118
      blk_mq_run_work_fn+0x28/0x38
      process_one_work+0x1ec/0x470
      worker_thread+0x48/0x458
      kthread+0x130/0x138
      ret_from_fork+0x10/0x1c
     Code: 540000ab a8c12027 a88120c7 a8c12027 (a88120c7)
     ---[ end trace 793e1eb5dff69f2d ]---
     note: kworker/0:2H[2054] exited with preempt_count 1
    
    This patch is to move "descriptor = NULL" down to below the label
    "out_unlock".
    
    Fixes: d44a5f98bb49b2(ufs: query descriptor API)
    Link: https://lore.kernel.org/r/20191112223436.27449-3-huobean@gmail.com
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8361f9a864d954e563528f27769fae66f1881db
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Sun Nov 10 23:21:31 2019 -0600

    PCI: rpaphp: Fix up pointer to first drc-info entry
    
    [ Upstream commit 9723c25f99aff0451cfe6392e1b9fdd99d0bf9f0 ]
    
    The first entry of the ibm,drc-info property is an int encoded count
    of the number of drc-info entries that follow. The "value" pointer
    returned by of_prop_next_u32() is still pointing at the this value
    when we call of_read_drc_info_cell(), but the helper function
    expects that value to be pointing at the first element of an entry.
    
    Fix up by incrementing the "value" pointer to point at the first
    element of the first drc-info entry prior.
    
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1573449697-5448-5-git-send-email-tyreld@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0a72e78fc23aec95d043563aa2811f84a0e992a
Author: Kars de Jong <jongk@linux-m68k.org>
Date:   Tue Nov 12 18:55:23 2019 +0100

    scsi: zorro_esp: Limit DMA transfers to 65536 bytes (except on Fastlane)
    
    [ Upstream commit 02f7e9f351a9de95577eafdc3bd413ed1c3b589f ]
    
    When using this driver on a Blizzard 1260, there were failures whenever DMA
    transfers from the SCSI bus to memory of 65535 bytes were followed by a DMA
    transfer of 1 byte. This caused the byte at offset 65535 to be overwritten
    with 0xff. The Blizzard hardware can't handle single byte DMA transfers.
    
    Besides this issue, limiting the DMA length to something that is not a
    multiple of the page size is very inefficient on most file systems.
    
    It seems this limit was chosen because the DMA transfer counter of the ESP
    by default is 16 bits wide, thus limiting the length to 65535 bytes.
    However, the value 0 means 65536 bytes, which is handled by the ESP and the
    Blizzard just fine. It is also the default maximum used by esp_scsi when
    drivers don't provide their own dma_length_limit() function.
    
    The limit of 65536 bytes can be used by all boards except the Fastlane. The
    old driver used a limit of 65532 bytes (0xfffc), which is reintroduced in
    this patch.
    
    Fixes: b7ded0e8b0d1 ("scsi: zorro_esp: Limit DMA transfers to 65535 bytes")
    Link: https://lore.kernel.org/r/20191112175523.23145-1-jongk@linux-m68k.org
    Signed-off-by: Kars de Jong <jongk@linux-m68k.org>
    Reviewed-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd53b26c1b2ad130c3b63e0ec71da1a04affaa23
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Nov 11 15:03:57 2019 -0800

    scsi: lpfc: fix: Coverity: lpfc_cmpl_els_rsp(): Null pointer dereferences
    
    [ Upstream commit 6c6d59e0fe5b86cf273d6d744a6a9768c4ecc756 ]
    
    Coverity reported the following:
    
    *** CID 101747:  Null pointer dereferences  (FORWARD_NULL)
    /drivers/scsi/lpfc/lpfc_els.c: 4439 in lpfc_cmpl_els_rsp()
    4433                            kfree(mp);
    4434                    }
    4435                    mempool_free(mbox, phba->mbox_mem_pool);
    4436            }
    4437     out:
    4438            if (ndlp && NLP_CHK_NODE_ACT(ndlp)) {
    vvv     CID 101747:  Null pointer dereferences  (FORWARD_NULL)
    vvv     Dereferencing null pointer "shost".
    4439                    spin_lock_irq(shost->host_lock);
    4440                    ndlp->nlp_flag &= ~(NLP_ACC_REGLOGIN | NLP_RM_DFLT_RPI);
    4441                    spin_unlock_irq(shost->host_lock);
    4442
    4443                    /* If the node is not being used by another discovery thread,
    4444                     * and we are sending a reject, we are done with it.
    
    Fix by adding a check for non-null shost in line 4438.
    The scenario when shost is set to null is when ndlp is null.
    As such, the ndlp check present was sufficient. But better safe
    than sorry so add the shost check.
    
    Reported-by: coverity-bot <keescook+coverity-bot@chromium.org>
    Addresses-Coverity-ID: 101747 ("Null pointer dereferences")
    Fixes: 2e0fef85e098 ("[SCSI] lpfc: NPIV: split ports")
    
    CC: James Bottomley <James.Bottomley@SteelEye.com>
    CC: "Gustavo A. R. Silva" <gustavo@embeddedor.com>
    CC: linux-next@vger.kernel.org
    Link: https://lore.kernel.org/r/20191111230401.12958-3-jsmart2021@gmail.com
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4bf016b32ffd341ef2d62325d0f7963ec6a9dfc
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Nov 4 10:39:41 2019 -0800

    Input: ili210x - handle errors from input_mt_init_slots()
    
    [ Upstream commit 43f06a4c639de8ee89fc348a9a3ecd70320a04dd ]
    
    input_mt_init_slots() may fail and we need to handle such failures.
    
    Tested-by: Adam Ford <aford173@gmail.com> #imx6q-logicpd
    Tested-by: Sven Van Asbroeck <TheSven73@gmail.com> # ILI2118A variant
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 185563ec11956ec1237d62fae80eab593ee63ca9
Author: Jan Stancek <jstancek@redhat.com>
Date:   Mon Nov 11 12:58:24 2019 -0800

    iomap: fix return value of iomap_dio_bio_actor on 32bit systems
    
    [ Upstream commit e9f930ac88a8936ccc2d021110c98810cf5aa810 ]
    
    Naresh reported LTP diotest4 failing for 32bit x86 and arm -next
    kernels on ext4. Same problem exists in 5.4-rc7 on xfs.
    
    The failure comes down to:
      openat(AT_FDCWD, "testdata-4.5918", O_RDWR|O_DIRECT) = 4
      mmap2(NULL, 4096, PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f7b000
      read(4, 0xb7f7b000, 4096)              = 0 // expects -EFAULT
    
    Problem is conversion at iomap_dio_bio_actor() return. Ternary
    operator has a return type and an attempt is made to convert each
    of operands to the type of the other. In this case "ret" (int)
    is converted to type of "copied" (unsigned long). Both have size
    of 4 bytes:
        size_t copied = 0;
        int ret = -14;
        long long actor_ret = copied ? copied : ret;
    
        On x86_64: actor_ret == -14;
        On x86   : actor_ret == 4294967282
    
    Replace ternary operator with 2 return statements to avoid this
    unwanted conversion.
    
    Fixes: 4721a6010990 ("iomap: dio data corruption and spurious errors when pipes fill")
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Jan Stancek <jstancek@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1558fadfca30c82751cda70315c768ebabaaf260
Author: Alain Volmat <alain.volmat@st.com>
Date:   Fri Oct 25 16:04:24 2019 +0200

    i2c: stm32f7: fix & reorder remove & probe error handling
    
    [ Upstream commit 53aaaa5d9b1e95eb40e877fbffa6f964a8394bb7 ]
    
    Add missing dma channels free calls in case of error during probe
    and reorder the remove function so that dma channels are freed after
    the i2c adapter is deleted.
    Overall, reorder the remove function so that probe error handling order
    and remove function order are same.
    
    Fixes: 7ecc8cfde553 ("i2c: i2c-stm32f7: Add DMA support")
    Signed-off-by: Alain Volmat <alain.volmat@st.com>
    Reviewed-by: Pierre-Yves MORDRET <pierre-yves.mordret@st.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b1400f260df61fd6921a098fc00f7b647421b40
Author: Jean-Philippe Brucker <jean-philippe@linaro.org>
Date:   Mon Nov 11 12:17:20 2019 +0100

    iommu/arm-smmu-v3: Don't display an error when IRQ lines are missing
    
    [ Upstream commit f7aff1a93f52047739af31072de0ad8d149641f3 ]
    
    Since commit 7723f4c5ecdb ("driver core: platform: Add an error message
    to platform_get_irq*()"), platform_get_irq_byname() displays an error
    when the IRQ isn't found. Since the SMMUv3 driver uses that function to
    query which interrupt method is available, the message is now displayed
    during boot for any SMMUv3 that doesn't implement the combined
    interrupt, or that implements MSIs.
    
    [   20.700337] arm-smmu-v3 arm-smmu-v3.7.auto: IRQ combined not found
    [   20.706508] arm-smmu-v3 arm-smmu-v3.7.auto: IRQ eventq not found
    [   20.712503] arm-smmu-v3 arm-smmu-v3.7.auto: IRQ priq not found
    [   20.718325] arm-smmu-v3 arm-smmu-v3.7.auto: IRQ gerror not found
    
    Use platform_get_irq_byname_optional() to avoid displaying a spurious
    error.
    
    Fixes: 7723f4c5ecdb ("driver core: platform: Add an error message to platform_get_irq*()")
    Signed-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19f612e6ccd727d7efc958c992f332c4e8901eee
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Sun Nov 10 12:49:06 2019 +0300

    fs/quota: handle overflows of sysctl fs.quota.* and report as unsigned long
    
    [ Upstream commit 6fcbcec9cfc7b3c6a2c1f1a23ebacedff7073e0a ]
    
    Quota statistics counted as 64-bit per-cpu counter. Reading sums per-cpu
    fractions as signed 64-bit int, filters negative values and then reports
    lower half as signed 32-bit int.
    
    Result may looks like:
    
    fs.quota.allocated_dquots = 22327
    fs.quota.cache_hits = -489852115
    fs.quota.drops = -487288718
    fs.quota.free_dquots = 22083
    fs.quota.lookups = -486883485
    fs.quota.reads = 22327
    fs.quota.syncs = 335064
    fs.quota.writes = 3088689
    
    Values bigger than 2^31-1 reported as negative.
    
    All counters except "allocated_dquots" and "free_dquots" are monotonic,
    thus they should be reported as is without filtering negative values.
    
    Kernel doesn't have generic helper for 64-bit sysctl yet,
    let's use at least unsigned long.
    
    Link: https://lore.kernel.org/r/157337934693.2078.9842146413181153727.stgit@buzz
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e44850bd4205a8cf17f23c44668c0f8d28ad40b1
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Thu Nov 7 16:06:44 2019 +0100

    dma-direct: check for overflows on 32 bit DMA addresses
    
    [ Upstream commit b12d66278dd627cbe1ea7c000aa4715aaf8830c8 ]
    
    As seen on the new Raspberry Pi 4 and sta2x11's DMA implementation it is
    possible for a device configured with 32 bit DMA addresses and a partial
    DMA mapping located at the end of the address space to overflow. It
    happens when a higher physical address, not DMAable, is translated to
    it's DMA counterpart.
    
    For example the Raspberry Pi 4, configurable up to 4 GB of memory, has
    an interconnect capable of addressing the lower 1 GB of physical memory
    with a DMA offset of 0xc0000000. It transpires that, any attempt to
    translate physical addresses higher than the first GB will result in an
    overflow which dma_capable() can't detect as it only checks for
    addresses bigger then the maximum allowed DMA address.
    
    Fix this by verifying in dma_capable() if the DMA address range provided
    is at any point lower than the minimum possible DMA address on the bus.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44d9a1428d87293149562d643758e793221611a5
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Oct 2 19:25:22 2019 +0800

    irqchip: ingenic: Error out if IRQ domain creation failed
    
    [ Upstream commit 52ecc87642f273a599c9913b29fd179c13de457b ]
    
    If we cannot create the IRQ domain, the driver should fail to probe
    instead of succeeding with just a warning message.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/1570015525-27018-3-git-send-email-zhouyanjie@zoho.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c14a155609ae66321c0280d24a9cccbf210f924a
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Oct 24 13:14:13 2019 -0700

    irqchip/irq-bcm7038-l1: Enable parent IRQ if necessary
    
    [ Upstream commit 27eebb60357ed5aa6659442f92907c0f7368d6ae ]
    
    If the 'brcm,irq-can-wake' property is specified, make sure we also
    enable the corresponding parent interrupt we are attached to.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20191024201415.23454-4-f.fainelli@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d9b0a683e22cb53286386dc4b7625de210f185a
Author: Michael Hennerich <michael.hennerich@analog.com>
Date:   Fri Nov 8 09:17:18 2019 +0200

    clk: clk-gpio: propagate rate change to parent
    
    [ Upstream commit fc59462c5ce60da119568fac325c92fc6b7c6175 ]
    
    For an external clock source, which is gated via a GPIO, the
    rate change should typically be propagated to the parent clock.
    
    The situation where we are requiring this propagation, is when an
    external clock is connected to override an internal clock (which typically
    has a fixed rate). The external clock can have a different rate than the
    internal one, and may also be variable, thus requiring the rate
    propagation.
    
    This rate change wasn't propagated until now, and it's unclear about cases
    where this shouldn't be propagated. Thus, it's unclear whether this is
    fixing a bug, or extending the current driver behavior. Also, it's unsure
    about whether this may break any existing setups; in the case that it does,
    a device-tree property may be added to disable this flag.
    
    Signed-off-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Link: https://lkml.kernel.org/r/20191108071718.17985-1-alexandru.ardelean@analog.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e219dae7ce725825f055d572fed6752a395eb72
Author: Jeffrey Hugo <jeffrey.l.hugo@gmail.com>
Date:   Thu Oct 31 11:57:15 2019 -0700

    clk: qcom: Allow constant ratio freq tables for rcg
    
    [ Upstream commit efd164b5520afd6fb2883b68e0d408a7de29c491 ]
    
    Some RCGs (the gfx_3d_src_clk in msm8998 for example) are basically just
    some constant ratio from the input across the entire frequency range.  It
    would be great if we could specify the frequency table as a single entry
    constant ratio instead of a long list, ie:
    
            { .src = P_GPUPLL0_OUT_EVEN, .pre_div = 3 },
            { }
    
    So, lets support that.
    
    We need to fix a corner case in qcom_find_freq() where if the freq table
    is non-null, but has no frequencies, we end up returning an "entry" before
    the table array, which is bad.  Then, we need ignore the freq from the
    table, and instead base everything on the requested freq.
    
    Suggested-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Jeffrey Hugo <jeffrey.l.hugo@gmail.com>
    Link: https://lkml.kernel.org/r/20191031185715.15504-1-jeffrey.l.hugo@gmail.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ed60d7f2a54d675f0627719dcfc0ad31fdae0a3
Author: Jeffrey Hugo <jeffrey.l.hugo@gmail.com>
Date:   Thu Nov 7 11:06:15 2019 -0800

    clk: qcom: smd: Add missing pnoc clock
    
    [ Upstream commit ba1d366de261981c0dd04fac44d2ce3a5eba2eaa ]
    
    When MSM8998 support was added, and analysis was done to determine what
    clocks would be consumed.  That analysis had a flaw, which caused the
    pnoc to be skipped.  The pnoc clock needs to be on to access the uart
    for the console.  The clock is on from boot, but has no consumer votes
    in the RPM.  When we attempt to boot the modem, it causes the RPM to
    turn off pnoc, which kills our access to the console and causes CPU hangs.
    
    We need pnoc to be defined, so that clk_smd_rpm_handoff() will put in
    an implicit vote for linux and prevent issues when booting modem.
    Hopefully pnoc can be consumed by the interconnect framework in future
    so that Linux can rely on explicit votes.
    
    Fixes: 6131dc81211c ("clk: qcom: smd: Add support for MSM8998 rpm clocks")
    Signed-off-by: Jeffrey Hugo <jeffrey.l.hugo@gmail.com>
    Link: https://lkml.kernel.org/r/20191107190615.5656-1-jeffrey.l.hugo@gmail.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc5de89f679b06a7bc9c2e2f83c0f4c438ea8f56
Author: Chao Yu <chao@kernel.org>
Date:   Thu Nov 7 14:12:05 2019 +0800

    f2fs: fix to update dir's i_pino during cross_rename
    
    [ Upstream commit 2a60637f06ac94869b2e630eaf837110d39bf291 ]
    
    As Eric reported:
    
    RENAME_EXCHANGE support was just added to fsstress in xfstests:
    
            commit 65dfd40a97b6bbbd2a22538977bab355c5bc0f06
            Author: kaixuxia <xiakaixu1987@gmail.com>
            Date:   Thu Oct 31 14:41:48 2019 +0800
    
                fsstress: add EXCHANGE renameat2 support
    
    This is causing xfstest generic/579 to fail due to fsck.f2fs reporting errors.
    I'm not sure what the problem is, but it still happens even with all the
    fs-verity stuff in the test commented out, so that the test just runs fsstress.
    
    generic/579 23s ...     [10:02:25]
    [    7.745370] run fstests generic/579 at 2019-11-04 10:02:25
    _check_generic_filesystem: filesystem on /dev/vdc is inconsistent
    (see /results/f2fs/results-default/generic/579.full for details)
     [10:02:47]
    Ran: generic/579
    Failures: generic/579
    Failed 1 of 1 tests
    Xunit report: /results/f2fs/results-default/result.xml
    
    Here's the contents of 579.full:
    
    _check_generic_filesystem: filesystem on /dev/vdc is inconsistent
    *** fsck.f2fs output ***
    [ASSERT] (__chk_dots_dentries:1378)  --> Bad inode number[0x24] for '..', parent parent ino is [0xd10]
    
    The root cause is that we forgot to update directory's i_pino during
    cross_rename, fix it.
    
    Fixes: 32f9bc25cbda0 ("f2fs: support ->rename2()")
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Tested-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11ff350c9bd39258eec186600c931515e18d447f
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Nov 4 16:56:58 2019 -0800

    scsi: lpfc: Fix duplicate unreg_rpi error in port offline flow
    
    [ Upstream commit 7cfd5639d99bec0d27af089d0c8c114330e43a72 ]
    
    If the driver receives a login that is later then LOGO'd by the remote port
    (aka ndlp), the driver, upon the completion of the LOGO ACC transmission,
    will logout the node and unregister the rpi that is being used for the
    node.  As part of the unreg, the node's rpi value is replaced by the
    LPFC_RPI_ALLOC_ERROR value.  If the port is subsequently offlined, the
    offline walks the nodes and ensures they are logged out, which possibly
    entails unreg'ing their rpi values.  This path does not validate the node's
    rpi value, thus doesn't detect that it has been unreg'd already.  The
    replaced rpi value is then used when accessing the rpi bitmask array which
    tracks active rpi values.  As the LPFC_RPI_ALLOC_ERROR value is not a valid
    index for the bitmask, it may fault the system.
    
    Revise the rpi release code to detect when the rpi value is the replaced
    RPI_ALLOC_ERROR value and ignore further release steps.
    
    Link: https://lore.kernel.org/r/20191105005708.7399-2-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 358b37c6c67663f56891c3464d9e2c8e470842da
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Nov 4 16:57:01 2019 -0800

    scsi: lpfc: Fix unexpected error messages during RSCN handling
    
    [ Upstream commit 2332e6e475b016e2026763f51333f84e2e6c57a3 ]
    
    During heavy RCN activity and log_verbose = 0 we see these messages:
    
      2754 PRLI failure DID:521245 Status:x9/xb2c00, data: x0
      0231 RSCN timeout Data: x0 x3
      0230 Unexpected timeout, hba link state x5
    
    This is due to delayed RSCN activity.
    
    Correct by avoiding the timeout thus the messages by restarting the
    discovery timeout whenever an rscn is received.
    
    Filter PRLI responses such that severity depends on whether expected for
    the configuration or not. For example, PRLI errors on a fabric will be
    informational (they are expected), but Point-to-Point errors are not
    necessarily expected so they are raised to an error level.
    
    Link: https://lore.kernel.org/r/20191105005708.7399-5-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 872f8013136e6775b648eb5ba0469deb7e40d86d
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Nov 5 13:55:53 2019 -0800

    scsi: tracing: Fix handling of TRANSFER LENGTH == 0 for READ(6) and WRITE(6)
    
    [ Upstream commit f6b8540f40201bff91062dd64db8e29e4ddaaa9d ]
    
    According to SBC-2 a TRANSFER LENGTH field of zero means that 256 logical
    blocks must be transferred. Make the SCSI tracing code follow SBC-2.
    
    Fixes: bf8162354233 ("[SCSI] add scsi trace core functions and put trace points")
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Douglas Gilbert <dgilbert@interlog.com>
    Link: https://lore.kernel.org/r/20191105215553.185018-1-bvanassche@acm.org
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e2946bdddf136c90ac06b717856fa7d83830af7
Author: Jan Kara <jack@suse.cz>
Date:   Tue Nov 5 17:44:19 2019 +0100

    jbd2: Fix statistics for the number of logged blocks
    
    [ Upstream commit 015c6033068208d6227612c878877919f3fcf6b6 ]
    
    jbd2 statistics counting number of blocks logged in a transaction was
    wrong. It didn't count the commit block and more importantly it didn't
    count revoke descriptor blocks. Make sure these get properly counted.
    
    Reviewed-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20191105164437.32602-13-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e48a6034482babeccdd6a2aac6f3b10beda35f26
Author: Matthew Bobrowski <mbobrowski@mbobrowski.org>
Date:   Tue Nov 5 22:59:37 2019 +1100

    ext4: iomap that extends beyond EOF should be marked dirty
    
    [ Upstream commit 2e9b51d78229d5145725a481bb5464ebc0a3f9b2 ]
    
    This patch addresses what Dave Chinner had discovered and fixed within
    commit: 7684e2c4384d. This changes does not have any user visible
    impact for ext4 as none of the current users of ext4_iomap_begin()
    that extend files depend on IOMAP_F_DIRTY.
    
    When doing a direct IO that spans the current EOF, and there are
    written blocks beyond EOF that extend beyond the current write, the
    only metadata update that needs to be done is a file size extension.
    
    However, we don't mark such iomaps as IOMAP_F_DIRTY to indicate that
    there is IO completion metadata updates required, and hence we may
    fail to correctly sync file size extensions made in IO completion when
    O_DSYNC writes are being used and the hardware supports FUA.
    
    Hence when setting IOMAP_F_DIRTY, we need to also take into account
    whether the iomap spans the current EOF. If it does, then we need to
    mark it dirty so that IO completion will call generic_write_sync() to
    flush the inode size update to stable storage correctly.
    
    Signed-off-by: Matthew Bobrowski <mbobrowski@mbobrowski.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Link: https://lore.kernel.org/r/8b43ee9ee94bee5328da56ba0909b7d2229ef150.1572949325.git.mbobrowski@mbobrowski.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 339a860cdd0726477131c67e1d618844f2b64610
Author: Matthew Bobrowski <mbobrowski@mbobrowski.org>
Date:   Tue Nov 5 22:59:22 2019 +1100

    ext4: update direct I/O read lock pattern for IOCB_NOWAIT
    
    [ Upstream commit 548feebec7e93e58b647dba70b3303dcb569c914 ]
    
    This patch updates the lock pattern in ext4_direct_IO_read() to not
    block on inode lock in cases of IOCB_NOWAIT direct I/O reads. The
    locking condition implemented here is similar to that of 942491c9e6d6
    ("xfs: fix AIM7 regression").
    
    Fixes: 16c54688592c ("ext4: Allow parallel DIO reads")
    Signed-off-by: Matthew Bobrowski <mbobrowski@mbobrowski.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Link: https://lore.kernel.org/r/c5d5e759f91747359fbd2c6f9a36240cf75ad79f.1572949325.git.mbobrowski@mbobrowski.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99db9e0fec6bc5b8f2d3e9def3c3ed9e2a302d5b
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Tue Oct 1 14:16:56 2019 +0530

    powerpc/book3s64/hash: Add cond_resched to avoid soft lockup warning
    
    [ Upstream commit 16f6b67cf03cb43db7104acb2ca877bdc2606c92 ]
    
    With large memory (8TB and more) hotplug, we can get soft lockup
    warnings as below. These were caused by a long loop without any
    explicit cond_resched which is a problem for !PREEMPT kernels.
    
    Avoid this using cond_resched() while inserting hash page table
    entries. We already do similar cond_resched() in __add_pages(), see
    commit f64ac5e6e306 ("mm, memory_hotplug: add scheduling point to
    __add_pages").
    
      rcu:     3-....: (24002 ticks this GP) idle=13e/1/0x4000000000000002 softirq=722/722 fqs=12001
       (t=24003 jiffies g=4285 q=2002)
      NMI backtrace for cpu 3
      CPU: 3 PID: 3870 Comm: ndctl Not tainted 5.3.0-197.18-default+ #2
      Call Trace:
        dump_stack+0xb0/0xf4 (unreliable)
        nmi_cpu_backtrace+0x124/0x130
        nmi_trigger_cpumask_backtrace+0x1ac/0x1f0
        arch_trigger_cpumask_backtrace+0x28/0x3c
        rcu_dump_cpu_stacks+0xf8/0x154
        rcu_sched_clock_irq+0x878/0xb40
        update_process_times+0x48/0x90
        tick_sched_handle.isra.16+0x4c/0x80
        tick_sched_timer+0x68/0xe0
        __hrtimer_run_queues+0x180/0x430
        hrtimer_interrupt+0x110/0x300
        timer_interrupt+0x108/0x2f0
        decrementer_common+0x114/0x120
      --- interrupt: 901 at arch_add_memory+0xc0/0x130
          LR = arch_add_memory+0x74/0x130
        memremap_pages+0x494/0x650
        devm_memremap_pages+0x3c/0xa0
        pmem_attach_disk+0x188/0x750
        nvdimm_bus_probe+0xac/0x2c0
        really_probe+0x148/0x570
        driver_probe_device+0x19c/0x1d0
        device_driver_attach+0xcc/0x100
        bind_store+0x134/0x1c0
        drv_attr_store+0x44/0x60
        sysfs_kf_write+0x64/0x90
        kernfs_fop_write+0x1a0/0x270
        __vfs_write+0x3c/0x70
        vfs_write+0xd0/0x260
        ksys_write+0xdc/0x130
        system_call+0x5c/0x68
    
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191001084656.31277-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f68c0f32944544bb8e7c6fb411713e3fd855a753
Author: Anthony Steinhauser <asteinhauser@google.com>
Date:   Tue Oct 29 12:07:59 2019 -0700

    powerpc/security/book3s64: Report L1TF status in sysfs
    
    [ Upstream commit 8e6b6da91ac9b9ec5a925b6cb13f287a54bd547d ]
    
    Some PowerPC CPUs are vulnerable to L1TF to the same extent as to
    Meltdown. It is also mitigated by flushing the L1D on privilege
    transition.
    
    Currently the sysfs gives a false negative on L1TF on CPUs that I
    verified to be vulnerable, a Power9 Talos II Boston 004e 1202, PowerNV
    T2P9D01.
    
    Signed-off-by: Anthony Steinhauser <asteinhauser@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    [mpe: Just have cpu_show_l1tf() call cpu_show_meltdown() directly]
    Link: https://lore.kernel.org/r/20191029190759.84821-1-asteinhauser@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0090266e05da3c1d56a1e584741cd5f593624779
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Nov 5 10:15:56 2019 +1100

    selftests/powerpc: Skip tm-signal-sigreturn-nt if TM not available
    
    [ Upstream commit 505127068d9b705a6cf335143239db91bfe7bbe2 ]
    
    On systems where TM (Transactional Memory) is disabled the
    tm-signal-sigreturn-nt test causes a SIGILL:
    
      test: tm_signal_sigreturn_nt
      tags: git_version:7c202575ef63
      !! child died by signal 4
      failure: tm_signal_sigreturn_nt
    
    We should skip the test if TM is not available.
    
    Fixes: 34642d70ac7e ("selftests/powerpc: Add checks for transactional sigreturn")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191104233524.24348-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1332e29038a35c81200f1677ef760d3919a1ddf1
Author: Pavel Modilaynen <pavel.modilaynen@axis.com>
Date:   Fri Jul 12 13:52:19 2019 +0200

    dtc: Use pkg-config to locate libyaml
    
    [ Upstream commit 067c650c456e758f933aaf87a202f841d34be269 ]
    
    Using Makefile's wildcard with absolute path to detect
    the presence of libyaml results in false-positive
    detection when cross-compiling e.g. in yocto environment.
    The latter results in build error:
    | scripts/dtc/yamltree.o: In function `yaml_propval_int':
    | yamltree.c: undefined reference to `yaml_sequence_start_event_initialize'
    | yamltree.c: undefined reference to `yaml_emitter_emit'
    | yamltree.c: undefined reference to `yaml_scalar_event_initialize'
    ...
    Use pkg-config to locate libyaml to address this scenario.
    
    Signed-off-by: Pavel Modilaynen <pavel.modilaynen@axis.com>
    [robh: silence stderr]
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 139ca605c35eb3cc3dbee53803b89ea37b01367b
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:45 2019 +0200

    clocksource/drivers/timer-of: Use unique device name instead of timer
    
    [ Upstream commit 4411464d6f8b5e5759637235a6f2b2a85c2be0f1 ]
    
    If a hardware-specific driver does not provide a name, the timer-of core
    falls back to device_node.name.  Due to generic DT node naming policies,
    that name is almost always "timer", and thus doesn't identify the actual
    timer used.
    
    Fix this by using device_node.full_name instead, which includes the unit
    addrees.
    
    Example impact on /proc/timer_list:
    
        -Clock Event Device: timer
        +Clock Event Device: timer@fcfec400
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-3-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9e1fc5b6f0cebeca4f7b19145e8d63187419d51
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:43:30 2019 +0800

    clocksource/drivers/asm9260: Add a check for of_clk_get
    
    [ Upstream commit 6e001f6a4cc73cd06fc7b8c633bc4906c33dd8ad ]
    
    asm9260_timer_init misses a check for of_clk_get.
    Add a check for it and print errors like other clocksource drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016124330.22211-1-hslester96@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6b7636ac42855d70150e8e804f2e142204eae8b
Author: Martin Schiller <ms@dev.tdt.de>
Date:   Fri Oct 25 09:01:42 2019 +0200

    leds: trigger: netdev: fix handling on interface rename
    
    [ Upstream commit 5f820ed52371b4f5d8c43c93f03408d0dbc01e5b ]
    
    The NETDEV_CHANGENAME code is not "unneeded" like it is stated in commit
    4cb6560514fa ("leds: trigger: netdev: fix refcnt leak on interface
    rename").
    
    The event was accidentally misinterpreted equivalent to
    NETDEV_UNREGISTER, but should be equivalent to NETDEV_REGISTER.
    
    This was the case in the original code from the openwrt project.
    
    Otherwise, you are unable to set netdev led triggers for (non-existent)
    netdevices, which has to be renamed. This is the case, for example, for
    ppp interfaces in openwrt.
    
    Fixes: 06f502f57d0d ("leds: trigger: Introduce a NETDEV trigger")
    Fixes: 4cb6560514fa ("leds: trigger: netdev: fix refcnt leak on interface rename")
    Signed-off-by: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd2f1bc5b673328f3b14ecd1da8d7389c862bea9
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:54:03 2019 +0800

    leds: an30259a: add a check for devm_regmap_init_i2c
    
    [ Upstream commit fc7b5028f2627133c7c18734715a08829eab4d1f ]
    
    an30259a_probe misses a check for devm_regmap_init_i2c and may cause
    problems.
    Add a check and print errors like other leds drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af4eac2a2871a97f6284f816930ab612bbd6c01c
Author: Guido Günther <agx@sigxcpu.org>
Date:   Sat Sep 21 14:12:10 2019 -0700

    leds: lm3692x: Handle failure to probe the regulator
    
    [ Upstream commit 396128d2ffcba6e1954cfdc9a89293ff79cbfd7c ]
    
    Instead use devm_regulator_get_optional since the regulator
    is optional and check for errors.
    
    Signed-off-by: Guido Günther <agx@sigxcpu.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37958001e11d592114c3e02e296065c670803ced
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri Oct 4 17:08:26 2019 +0200

    dmaengine: fsl-qdma: Handle invalid qdma-queue0 IRQ
    
    [ Upstream commit 41814c4eadf8a791b6d07114f96e7e120e59555c ]
    
    platform_get_irq_byname() might return -errno which later would be cast
    to an unsigned int and used in IRQ handling code leading to usage of
    wrong ID and errors about wrong irq_base.
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Peng Ma <peng.ma@nxp.com>
    Tested-by: Peng Ma <peng.ma@nxp.com>
    Link: https://lore.kernel.org/r/20191004150826.6656-1-krzk@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fee76d84ba258022865d00c1817281fbdc494bf9
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Wed Oct 30 10:13:13 2019 +0000

    dma-mapping: fix handling of dma-ranges for reserved memory (again)
    
    [ Upstream commit a445e940ea686fc60475564009821010eb213be3 ]
    
    Daniele reported that issue previously fixed in c41f9ea998f3
    ("drivers: dma-coherent: Account dma_pfn_offset when used with device
    tree") reappear shortly after 43fc509c3efb ("dma-coherent: introduce
    interface for default DMA pool") where fix was accidentally dropped.
    
    Lets put fix back in place and respect dma-ranges for reserved memory.
    
    Fixes: 43fc509c3efb ("dma-coherent: introduce interface for default DMA pool")
    
    Reported-by: Daniele Alessandrelli <daniele.alessandrelli@gmail.com>
    Tested-by: Daniele Alessandrelli <daniele.alessandrelli@gmail.com>
    Tested-by: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 686dd313a2caaa374f21087cce768d44b534a170
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Oct 29 14:34:22 2019 -0700

    dma-mapping: Add vmap checks to dma_map_single()
    
    [ Upstream commit 4544b9f25e70eae9f70a243de0cc802aa5c8cb69 ]
    
    As we've seen from USB and other areas[1], we need to always do runtime
    checks for DMA operating on memory regions that might be remapped. This
    adds vmap checks (similar to those already in USB but missing in other
    places) into dma_map_single() so all callers benefit from the checking.
    
    [1] https://git.kernel.org/linus/3840c5b78803b2b6cc1ff820100a74a092c40cbb
    
    Suggested-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    [hch: fixed the printk message]
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34205ed59e98a3ce6bab5b2085dcb33c8c0ca98e
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 28 14:56:46 2019 -0700

    dma-debug: add a schedule point in debug_dma_dump_mappings()
    
    [ Upstream commit 9ff6aa027dbb98755f0265695354f2dd07c0d1ce ]
    
    debug_dma_dump_mappings() can take a lot of cpu cycles :
    
    lpk43:/# time wc -l /sys/kernel/debug/dma-api/dump
    163435 /sys/kernel/debug/dma-api/dump
    
    real    0m0.463s
    user    0m0.003s
    sys     0m0.459s
    
    Let's add a cond_resched() to avoid holding cpu for too long.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Corentin Labbe <clabbe@baylibre.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d26bf75e06f72bea4f7cbaed2170cb9b9e0b7c2e
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Oct 24 11:47:30 2019 +1100

    powerpc/tools: Don't quote $objdump in scripts
    
    [ Upstream commit e44ff9ea8f4c8a90c82f7b85bd4f5e497c841960 ]
    
    Some of our scripts are passed $objdump and then call it as
    "$objdump". This doesn't work if it contains spaces because we're
    using ccache, for example you get errors such as:
    
      ./arch/powerpc/tools/relocs_check.sh: line 48: ccache ppc64le-objdump: No such file or directory
      ./arch/powerpc/tools/unrel_branch_check.sh: line 26: ccache ppc64le-objdump: No such file or directory
    
    Fix it by not quoting the string when we expand it, allowing the shell
    to do the right thing for us.
    
    Fixes: a71aa05e1416 ("powerpc: Convert relocs_check to a shell script using grep")
    Fixes: 4ea80652dc75 ("powerpc/64s: Tool to flag direct branches from unrelocated interrupt vectors")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191024004730.32135-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89c7e99b391134cc3264b38ea2cea4705b45d4ad
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Mon Oct 14 13:30:43 2019 +1100

    selftests/powerpc: Fixup clobbers for TM tests
    
    [ Upstream commit a02cbc7ffe529ed58b6bbe54652104fc2c88bd77 ]
    
    Some of our TM (Transactional Memory) tests, list "r1" (the stack
    pointer) as a clobbered register.
    
    GCC >= 9 doesn't accept this, and the build breaks:
    
      ptrace-tm-spd-tar.c: In function 'tm_spd_tar':
      ptrace-tm-spd-tar.c:31:2: error: listing the stack pointer register 'r1' in a clobber list is deprecated [-Werror=deprecated]
         31 |  asm __volatile__(
            |  ^~~
      ptrace-tm-spd-tar.c:31:2: note: the value of the stack pointer after an 'asm' statement must be the same as it was before the statement
    
    We do have some fairly large inline asm blocks in these tests, and
    some of them do change the value of r1. However they should all return
    to C with the value in r1 restored, so I think it's legitimate to say
    r1 is not clobbered.
    
    As Segher points out, the r1 clobbers may have been added because of
    the use of `or 1,1,1`, however that doesn't actually clobber r1.
    
    Segher also points out that some of these tests do clobber LR, because
    they call functions, and that is not listed in the clobbers, so add
    that where appropriate.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191029095324.14669-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1720bdd8e6ec695083bb56c50fbd216ba1c24830
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Oct 21 11:02:33 2019 -0700

    Input: st1232 - do not reset the chip too early
    
    [ Upstream commit efd7bb08a762d4f6322054c6824bd942971ac563 ]
    
    We should not be putting the chip into reset while interrupts are enabled
    and ISR may be running. Fix this by installing a custom devm action and
    powering off the device/resetting GPIO line from there. This ensures proper
    ordering.
    
    Tested-by: Matthias Fend <Matthias.Fend@wolfvision.net>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 779c0ee4f459846e038b2f981157c9bc7429342c
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Thu Oct 24 15:05:41 2019 +0530

    powerpc/pseries: Don't fail hash page table insert for bolted mapping
    
    [ Upstream commit 75838a3290cd4ebbd1f567f310ba04b6ef017ce4 ]
    
    If the hypervisor returned H_PTEG_FULL for H_ENTER hcall, retry a hash page table
    insert by removing a random entry from the group.
    
    After some runtime, it is very well possible to find all the 8 hash page table
    entry slot in the hpte group used for mapping. Don't fail a bolted entry insert
    in that case. With Storage class memory a user can find this error easily since
    a namespace enable/disable is equivalent to memory add/remove.
    
    This results in failures as reported below:
    
    $ ndctl create-namespace -r region1 -t pmem -m devdax -a 65536 -s 100M
    libndctl: ndctl_dax_enable: dax1.3: failed to enable
      Error: namespace1.2: failed to enable
    
    failed to create namespace: No such device or address
    
    In kernel log we find the details as below:
    
    Unable to create mapping for hot added memory 0xc000042006000000..0xc00004200d000000: -1
    dax_pmem: probe of dax1.3 failed with error -14
    
    This indicates that we failed to create a bolted hash table entry for direct-map
    address backing the namespace.
    
    We also observe failures such that not all namespaces will be enabled with
    ndctl enable-namespace all command.
    
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191024093542.29777-2-aneesh.kumar@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3655538ba83ad3f5adc9f85b871a8c86d01c6e5d
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sun Oct 13 21:23:51 2019 +1100

    powerpc/pseries: Mark accumulate_stolen_time() as notrace
    
    [ Upstream commit eb8e20f89093b64f48975c74ccb114e6775cee22 ]
    
    accumulate_stolen_time() is called prior to interrupt state being
    reconciled, which can trip the warning in arch_local_irq_restore():
    
      WARNING: CPU: 5 PID: 1017 at arch/powerpc/kernel/irq.c:258 .arch_local_irq_restore+0x9c/0x130
      ...
      NIP .arch_local_irq_restore+0x9c/0x130
      LR  .rb_start_commit+0x38/0x80
      Call Trace:
        .ring_buffer_lock_reserve+0xe4/0x620
        .trace_function+0x44/0x210
        .function_trace_call+0x148/0x170
        .ftrace_ops_no_ops+0x180/0x1d0
        ftrace_call+0x4/0x8
        .accumulate_stolen_time+0x1c/0xb0
        decrementer_common+0x124/0x160
    
    For now just mark it as notrace. We may change the ordering to call it
    after interrupt state has been reconciled, but that is a larger
    change.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191024055932.27940-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 266bde856cbd31429b77791f93948cd9899b9da1
Author: Luo Jiaxing <luojiaxing@huawei.com>
Date:   Thu Oct 24 22:08:24 2019 +0800

    scsi: hisi_sas: Delete the debugfs folder of hisi_sas when the probe fails
    
    [ Upstream commit cabe7c10c97a0857a9fb14b6c772ab784947995d ]
    
    Although if the debugfs initialization fails, we will delete the debugfs
    folder of hisi_sas, but we did not consider the scenario where debugfs was
    successfully initialized, but the probe failed for other reasons. We found
    out that hisi_sas folder is still remain after the probe failed.
    
    When probe fail, we should delete debugfs folder to avoid the above issue.
    
    Link: https://lore.kernel.org/r/1571926105-74636-18-git-send-email-john.garry@huawei.com
    Signed-off-by: Luo Jiaxing <luojiaxing@huawei.com>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9eb98caa072a8bdad33b9fc6799e386fe8ee33f
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Thu Oct 24 22:08:11 2019 +0800

    scsi: hisi_sas: Replace in_softirq() check in hisi_sas_task_exec()
    
    [ Upstream commit 550c0d89d52d3bec5c299f69b4ed5d2ee6b8a9a6 ]
    
    For IOs from upper layer, preemption may be disabled as it may be called by
    function __blk_mq_delay_run_hw_queue which will call get_cpu() (it disables
    preemption). So if flags HISI_SAS_REJECT_CMD_BIT is set in function
    hisi_sas_task_exec(), it may disable preempt twice after down() and up()
    which will cause following call trace:
    
    BUG: scheduling while atomic: fio/60373/0x00000002
    Call trace:
    dump_backtrace+0x0/0x150
    show_stack+0x24/0x30
    dump_stack+0xa0/0xc4
    __schedule_bug+0x68/0x88
    __schedule+0x4b8/0x548
    schedule+0x40/0xd0
    schedule_timeout+0x200/0x378
    __down+0x78/0xc8
    down+0x54/0x70
    hisi_sas_task_exec.isra.10+0x598/0x8d8 [hisi_sas_main]
    hisi_sas_queue_command+0x28/0x38 [hisi_sas_main]
    sas_queuecommand+0x168/0x1b0 [libsas]
    scsi_queue_rq+0x2ac/0x980
    blk_mq_dispatch_rq_list+0xb0/0x550
    blk_mq_do_dispatch_sched+0x6c/0x110
    blk_mq_sched_dispatch_requests+0x114/0x1d8
    __blk_mq_run_hw_queue+0xb8/0x130
    __blk_mq_delay_run_hw_queue+0x1c0/0x220
    blk_mq_run_hw_queue+0xb0/0x128
    blk_mq_sched_insert_requests+0xdc/0x208
    blk_mq_flush_plug_list+0x1b4/0x3a0
    blk_flush_plug_list+0xdc/0x110
    blk_finish_plug+0x3c/0x50
    blkdev_direct_IO+0x404/0x550
    generic_file_read_iter+0x9c/0x848
    blkdev_read_iter+0x50/0x78
    aio_read+0xc8/0x170
    io_submit_one+0x1fc/0x8d8
    __arm64_sys_io_submit+0xdc/0x280
    el0_svc_common.constprop.0+0xe0/0x1e0
    el0_svc_handler+0x34/0x90
    el0_svc+0x10/0x14
    ...
    
    To solve the issue, check preemptible() to avoid disabling preempt multiple
    when flag HISI_SAS_REJECT_CMD_BIT is set.
    
    Link: https://lore.kernel.org/r/1571926105-74636-5-git-send-email-john.garry@huawei.com
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e98014e8d3be09470f270e69dc38e3dcb55752e4
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Oct 19 11:59:13 2019 +0300

    scsi: csiostor: Don't enable IRQs too early
    
    [ Upstream commit d6c9b31ac3064fbedf8961f120a4c117daa59932 ]
    
    These are called with IRQs disabled from csio_mgmt_tmo_handler() so we
    can't call spin_unlock_irq() or it will enable IRQs prematurely.
    
    Fixes: a3667aaed569 ("[SCSI] csiostor: Chelsio FCoE offload driver")
    Link: https://lore.kernel.org/r/20191019085913.GA14245@mwanda
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00b111173ee81c9ffc6e9871a4adb5a047cefeb1
Author: James Smart <jsmart2021@gmail.com>
Date:   Fri Oct 18 14:18:20 2019 -0700

    scsi: lpfc: Fix SLI3 hba in loop mode not discovering devices
    
    [ Upstream commit feff8b3d84d3d9570f893b4d83e5eab6693d6a52 ]
    
    When operating in private loop mode, PLOGI exchanges are racing and the
    driver tries to abort it's PLOGI. But the PLOGI abort ends up terminating
    the login with the other end causing the other end to abort its PLOGI as
    well. Discovery never fully completes.
    
    Fix by disabling the PLOGI abort when private loop and letting the state
    machine play out.
    
    Link: https://lore.kernel.org/r/20191018211832.7917-5-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41f66da6d49941c331b26fa49dc83342149eac9e
Author: James Smart <jsmart2021@gmail.com>
Date:   Fri Oct 18 14:18:22 2019 -0700

    scsi: lpfc: Fix hardlockup in lpfc_abort_handler
    
    [ Upstream commit 91a52b617cdb8bf6d298892101c061d438b84a19 ]
    
    In lpfc_abort_handler, the lock acquire order is hbalock (irqsave),
    buf_lock (irq) and ring_lock (irq).  The issue is that in two places the
    locks are released out of order - the buf_lock and the hbalock - resulting
    in the cpu preemption/lock flags getting restored out of order and
    deadlocking the cpu.
    
    Fix the unlock order by fully releasing the hbalocks as well.
    
    CC: Zhangguanghui <zhang.guanghui@h3c.com>
    Link: https://lore.kernel.org/r/20191018211832.7917-7-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ebe87052a72c3c09a09ace2b3f078319fa147d8e
Author: David Disseldorp <ddiss@suse.de>
Date:   Thu Sep 12 11:55:45 2019 +0200

    scsi: target: compare full CHAP_A Algorithm strings
    
    [ Upstream commit 9cef2a7955f2754257a7cddedec16edae7b587d0 ]
    
    RFC 2307 states:
    
      For CHAP [RFC1994], in the first step, the initiator MUST send:
    
          CHAP_A=<A1,A2...>
    
       Where A1,A2... are proposed algorithms, in order of preference.
    ...
       For the Algorithm, as stated in [RFC1994], one value is required to
       be implemented:
    
           5     (CHAP with MD5)
    
    LIO currently checks for this value by only comparing a single byte in
    the tokenized Algorithm string, which means that any value starting with
    a '5' (e.g. "55") is interpreted as "CHAP with MD5". Fix this by
    comparing the entire tokenized string.
    
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Link: https://lore.kernel.org/r/20190912095547.22427-2-ddiss@suse.de
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2456880b7a89bcd3a9369134c6fdeef9942bc1cb
Author: Nicholas Graumann <nick.graumann@gmail.com>
Date:   Tue Oct 15 20:18:24 2019 +0530

    dmaengine: xilinx_dma: Clear desc_pendingcount in xilinx_dma_reset
    
    [ Upstream commit 8a631a5a0f7d4a4a24dba8587d5d9152be0871cc ]
    
    Whenever we reset the channel, we need to clear desc_pendingcount
    along with desc_submitcount. Otherwise when a new transaction is
    submitted, the irq coalesce level could be programmed to an incorrect
    value in the axidma case.
    
    This behavior can be observed when terminating pending transactions
    with xilinx_dma_terminate_all() and then submitting new transactions
    without releasing and requesting the channel.
    
    Signed-off-by: Nicholas Graumann <nick.graumann@gmail.com>
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1571150904-3988-8-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d23e93e7fe1cbbec070c891dc9020a7dc909820c
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Oct 16 13:50:26 2019 +0200

    iommu/tegra-smmu: Fix page tables in > 4 GiB memory
    
    [ Upstream commit 96d3ab802e4930a29a33934373157d6dff1b2c7e ]
    
    Page tables that reside in physical memory beyond the 4 GiB boundary are
    currently not working properly. The reason is that when the physical
    address for page directory entries is read, it gets truncated at 32 bits
    and can cause crashes when passing that address to the DMA API.
    
    Fix this by first casting the PDE value to a dma_addr_t and then using
    the page frame number mask for the SMMU instance to mask out the invalid
    bits, which are typically used for mapping attributes, etc.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f43e37b582dfeb118e09790e49d07d86e379d37
Author: Ezequiel Garcia <ezequiel@collabora.com>
Date:   Wed Oct 2 14:29:23 2019 -0300

    iommu: rockchip: Free domain on .domain_free
    
    [ Upstream commit 42bb97b80f2e3bf592e3e99d109b67309aa1b30e ]
    
    IOMMU domain resource life is well-defined, managed
    by .domain_alloc and .domain_free.
    
    Therefore, domain-specific resources shouldn't be tied to
    the device life, but instead to its domain.
    
    Signed-off-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Acked-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28b491943c61cff2f3c11dd669b1b09a38ca3b2d
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Oct 1 11:58:22 2019 -0700

    platform/x86: peaq-wmi: switch to using polled mode of input devices
    
    [ Upstream commit 60d15095336cfb56dce5c7767ed3b8c6c1cf79a3 ]
    
    We have added polled mode to the normal input devices with the intent of
    retiring input_polled_dev. This converts peaq-wmi driver to use the
    polling mode of standard input devices and removes dependency on
    INPUT_POLLDEV.
    
    Because the new polling coded does not allow peeking inside the poller
    structure to get the poll interval, we change the "debounce" process to
    operate on the time basis, instead of counting events.
    
    We also fix error handling during initialization, as previously we leaked
    input device structure when we failed to register it.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9595fb752cdb3c3b007f6c0f2ec9c542c02f9032
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Thu Oct 10 13:29:36 2019 -0700

    tools/power/x86/intel-speed-select: Remove warning for unused result
    
    [ Upstream commit abd120e3bdf3dd72ba1ed9ac077a861e0e3dc43a ]
    
    Fix warning for:
    isst-config.c: In function ‘set_cpu_online_offline’:
    isst-config.c:221:3: warning: ignoring return value of ‘write’,
    declared with attribute warn_unused_result [-Wunused-result]
       write(fd, "1\n", 2);
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f42248ded31da34136098e713145bc41203c9b2b
Author: Vaibhav Jain <vaibhav@linux.ibm.com>
Date:   Fri Sep 27 11:50:02 2019 +0530

    powerpc/papr_scm: Fix an off-by-one check in papr_scm_meta_{get, set}
    
    [ Upstream commit 612ee81b9461475b5a5612c2e8d71559dd3c7920 ]
    
    A validation check to prevent out of bounds read/write inside
    functions papr_scm_meta_{get,set}() is off-by-one that prevent reads
    and writes to the last byte of the label area.
    
    This bug manifests as a failure to probe a dimm when libnvdimm is
    unable to read the entire config-area as advertised by
    ND_CMD_GET_CONFIG_SIZE. This usually happens when there are large
    number of namespaces created in the region backed by the dimm and the
    label-index spans max possible config-area. An error of the form below
    usually reported in the kernel logs:
    
    [  255.293912] nvdimm: probe of nmem0 failed with error -22
    
    The patch fixes these validation checks there by letting libnvdimm
    access the entire config-area.
    
    Fixes: 53e80bd042773('powerpc/nvdimm: Add support for multibyte read/write for metadata')
    Signed-off-by: Vaibhav Jain <vaibhav@linux.ibm.com>
    Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190927062002.3169-1-vaibhav@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d4e226f662aa73fa38d6f6025aaa6edd7e4ed61
Author: Chao Yu <chao@kernel.org>
Date:   Fri Sep 27 18:01:35 2019 +0800

    f2fs: fix to update time in lazytime mode
    
    [ Upstream commit fe1897eaa6646f5a64a4cee0e6473ed9887d324b ]
    
    generic/018 reports an inconsistent status of atime, the
    testcase is as below:
    - open file with O_SYNC
    - write file to construct fraged space
    - calc md5 of file
    - record {a,c,m}time
    - defrag file --- do nothing
    - umount & mount
    - check {a,c,m}time
    
    The root cause is, as f2fs enables lazytime by default, atime
    update will dirty vfs inode, rather than dirtying f2fs inode (by set
    with FI_DIRTY_INODE), so later f2fs_write_inode() called from VFS will
    fail to update inode page due to our skip:
    
    f2fs_write_inode()
            if (is_inode_flag_set(inode, FI_DIRTY_INODE))
                    return 0;
    
    So eventually, after evict(), we lose last atime for ever.
    
    To fix this issue, we need to check whether {a,c,m,cr}time is
    consistent in between inode cache and inode page, and only skip
    f2fs_update_inode() if f2fs inode is not dirty and time is
    consistent as well.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fac68e77e87e56f679be6d60acc8494fc7662116
Author: Evan Green <evgreen@chromium.org>
Date:   Wed Oct 2 14:00:21 2019 -0700

    Input: atmel_mxt_ts - disable IRQ across suspend
    
    [ Upstream commit 463fa44eec2fef50d111ed0199cf593235065c04 ]
    
    Across suspend and resume, we are seeing error messages like the following:
    
    atmel_mxt_ts i2c-PRP0001:00: __mxt_read_reg: i2c transfer failed (-121)
    atmel_mxt_ts i2c-PRP0001:00: Failed to read T44 and T5 (-121)
    
    This occurs because the driver leaves its IRQ enabled. Upon resume, there
    is an IRQ pending, but the interrupt is serviced before both the driver and
    the underlying I2C bus have been resumed. This causes EREMOTEIO errors.
    
    Disable the IRQ in suspend, and re-enable it on resume. If there are cases
    where the driver enters suspend with interrupts disabled, that's a bug we
    should fix separately.
    
    Signed-off-by: Evan Green <evgreen@chromium.org>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03d0de2da8806a801c7f1d3e1f113f2a5aeec745
Author: James Smart <jsmart2021@gmail.com>
Date:   Sat Sep 21 20:58:59 2019 -0700

    scsi: lpfc: Fix list corruption in lpfc_sli_get_iocbq
    
    [ Upstream commit 15498dc1a55b7aaea4b51ff03e3ff0f662e73f44 ]
    
    After study, it was determined there was a double free of a CT iocb during
    execution of lpfc_offline_prep and lpfc_offline.  The prep routine issued
    an abort for some CT iocbs, but the aborts did not complete fast enough for
    a subsequent routine that waits for completion. Thus the driver proceeded
    to lpfc_offline, which releases any pending iocbs. Unfortunately, the
    completions for the aborts were then received which re-released the ct
    iocbs.
    
    Turns out the issue for why the aborts didn't complete fast enough was not
    their time on the wire/in the adapter. It was the lpfc_work_done routine,
    which requires the adapter state to be UP before it calls
    lpfc_sli_handle_slow_ring_event() to process the completions. The issue is
    the prep routine takes the link down as part of it's processing.
    
    To fix, the following was performed:
    
     - Prevent the offline routine from releasing iocbs that have had aborts
       issued on them. Defer to the abort completions. Also means the driver
       fully waits for the completions.  Given this change, the recognition of
       "driver-generated" status which then releases the iocb is no longer
       valid. As such, the change made in the commit 296012285c90 is reverted.
       As recognition of "driver-generated" status is no longer valid, this
       patch reverts the changes made in
       commit 296012285c90 ("scsi: lpfc: Fix leak of ELS completions on adapter reset")
    
     - Modify lpfc_work_done to allow slow path completions so that the abort
       completions aren't ignored.
    
     - Updated the fdmi path to recognize a CT request that fails due to the
       port being unusable. This stops FDMI retries. FDMI will be restarted on
       next link up.
    
    Link: https://lore.kernel.org/r/20190922035906.10977-14-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c85192b4b0a1b8a5f53752e4a60a3b384dc871c
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Thu Sep 19 17:39:17 2019 +0800

    gpio: mxc: Only get the second IRQ when there is more than one IRQ
    
    [ Upstream commit c8f3d144004dd3f471ffd414690d15a005e4acd6 ]
    
    On some of i.MX SoCs like i.MX8QXP, there is ONLY one IRQ for each
    GPIO bank, so it is better to check the IRQ count before getting
    second IRQ to avoid below error message during probe:
    
    [    1.070908] gpio-mxc 5d080000.gpio: IRQ index 1 not found
    [    1.077420] gpio-mxc 5d090000.gpio: IRQ index 1 not found
    [    1.083766] gpio-mxc 5d0a0000.gpio: IRQ index 1 not found
    [    1.090122] gpio-mxc 5d0b0000.gpio: IRQ index 1 not found
    [    1.096470] gpio-mxc 5d0c0000.gpio: IRQ index 1 not found
    [    1.102804] gpio-mxc 5d0d0000.gpio: IRQ index 1 not found
    [    1.109144] gpio-mxc 5d0e0000.gpio: IRQ index 1 not found
    [    1.115475] gpio-mxc 5d0f0000.gpio: IRQ index 1 not found
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08f9773f3db4d07e6eb3cac5eae2591bef062cfe
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Fri Sep 13 09:04:48 2019 -0400

    scsi: mpt3sas: Reject NVMe Encap cmnds to unsupported HBA
    
    [ Upstream commit 77fd4f2c88bf83205a21f9ca49fdcc0c7868dba9 ]
    
    If any faulty application issues an NVMe Encapsulated commands to HBA which
    doesn't support NVMe protocol then driver should return the command as
    invalid with the following message.
    
    "HBA doesn't support NVMe. Rejecting NVMe Encapsulated request."
    
    Otherwise below page fault kernel panic will be observed while building the
    PRPs as there is no PRP pools allocated for the HBA which doesn't support
    NVMe drives.
    
    RIP: 0010:_base_build_nvme_prp+0x3b/0xf0 [mpt3sas]
    Call Trace:
     _ctl_do_mpt_command+0x931/0x1120 [mpt3sas]
     _ctl_ioctl_main.isra.11+0xa28/0x11e0 [mpt3sas]
     ? prepare_to_wait+0xb0/0xb0
     ? tty_ldisc_deref+0x16/0x20
     _ctl_ioctl+0x1a/0x20 [mpt3sas]
     do_vfs_ioctl+0xaa/0x620
     ? vfs_read+0x117/0x140
     ksys_ioctl+0x67/0x90
     __x64_sys_ioctl+0x1a/0x20
     do_syscall_64+0x60/0x190
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [mkp: tweaked error string]
    
    Link: https://lore.kernel.org/r/1568379890-18347-12-git-send-email-sreekanth.reddy@broadcom.com
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a51f92387fdbd11930ec4cedcfd442d6ab301288
Author: James Smart <jsmart2021@gmail.com>
Date:   Sat Sep 21 20:58:53 2019 -0700

    scsi: lpfc: Fix locking on mailbox command completion
    
    [ Upstream commit 07b8582430370097238b589f4e24da7613ca6dd3 ]
    
    Symptoms were seen of the driver not having valid data for mailbox
    commands. After debugging, the following sequence was found:
    
    The driver maintains a port-wide pointer of the mailbox command that is
    currently in execution. Once finished, the port-wide pointer is cleared
    (done in lpfc_sli4_mq_release()). The next mailbox command issued will set
    the next pointer and so on.
    
    The mailbox response data is only copied if there is a valid port-wide
    pointer.
    
    In the failing case, it was seen that a new mailbox command was being
    attempted in parallel with the completion.  The parallel path was seeing
    the mailbox no long in use (flag check under lock) and thus set the port
    pointer.  The completion path had cleared the active flag under lock, but
    had not touched the port pointer.  The port pointer is cleared after the
    lock is released. In this case, the completion path cleared the just-set
    value by the parallel path.
    
    Fix by making the calls that clear mbox state/port pointer while under
    lock.  Also slightly cleaned up the error path.
    
    Link: https://lore.kernel.org/r/20190922035906.10977-8-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc1f1460545c52fc61ded21ef5f736149f5601e1
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Fri Sep 13 09:04:40 2019 -0400

    scsi: mpt3sas: Fix clear pending bit in ioctl status
    
    [ Upstream commit 782b281883caf70289ba6a186af29441a117d23e ]
    
    When user issues diag register command from application with required size,
    and if driver unable to allocate the memory, then it will fail the register
    command. While failing the register command, driver is not currently
    clearing MPT3_CMD_PENDING bit in ctl_cmds.status variable which was set
    before trying to allocate the memory. As this bit is set, subsequent
    register command will be failed with BUSY status even when user wants to
    register the trace buffer will less memory.
    
    Clear MPT3_CMD_PENDING bit in ctl_cmds.status before returning the diag
    register command with no memory status.
    
    Link: https://lore.kernel.org/r/1568379890-18347-4-git-send-email-sreekanth.reddy@broadcom.com
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe35d5a4fad9d379d93a019923e0ebac1968c65a
Author: James Smart <jsmart2021@gmail.com>
Date:   Sat Sep 21 20:58:55 2019 -0700

    scsi: lpfc: Fix discovery failures when target device connectivity bounces
    
    [ Upstream commit 3f97aed6117c7677eb16756c4ec8b86000fd5822 ]
    
    An issue was seen discovering all SCSI Luns when a target device undergoes
    link bounce.
    
    The driver currently does not qualify the FC4 support on the target.
    Therefore it will send a SCSI PRLI and an NVMe PRLI. The expectation is
    that the target will reject the PRLI if it is not supported. If a PRLI
    times out, the driver will retry. The driver will not proceed with the
    device until both SCSI and NVMe PRLIs are resolved.  In the failure case,
    the device is FCP only and does not respond to the NVMe PRLI, thus
    initiating the wait/retry loop in the driver.  During that time, a RSCN is
    received (device bounced) causing the driver to issue a GID_FT.  The GID_FT
    response comes back before the PRLI mess is resolved and it prematurely
    cancels the PRLI retry logic and leaves the device in a STE_PRLI_ISSUE
    state. Discovery with the target never completes or resets.
    
    Fix by resetting the node state back to STE_NPR_NODE when GID_FT completes,
    thereby restarting the discovery process for the node.
    
    Link: https://lore.kernel.org/r/20190922035906.10977-10-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45331ad46993af173244628517986ddf3ebdbe38
Author: James Smart <jsmart2021@gmail.com>
Date:   Sat Sep 21 20:59:00 2019 -0700

    scsi: lpfc: Fix spinlock_irq issues in lpfc_els_flush_cmd()
    
    [ Upstream commit d38b4a527fe898f859f74a3a43d4308f48ac7855 ]
    
    While reviewing the CT behavior, issues with spinlock_irq were seen. The
    driver should be using spinlock_irqsave/irqrestore in the els flush
    routine.
    
    Changed to spinlock_irqsave/irqrestore.
    
    Link: https://lore.kernel.org/r/20190922035906.10977-15-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffe485232df06b3cbb933d02aeb8965fd1ddca61
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Dec 31 18:08:46 2019 +0100

    Revert "MIPS: futex: Emit Loongson3 sync workarounds within asm"
    
    This reverts commit d754a529a8be55f009c6679d772c472c1632cd5b which was
    commit 3c1d3f0979721a39dd2980c97466127ce65aa130 upstream.
    
    This breaks the build and should be reverted.
    
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Cc: linux-kernel@vger.kernel.org
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03ad5d55bea1fb58735eff1a9a0aaa34c230f357
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Dec 31 18:04:17 2019 +0100

    Revert "MIPS: futex: Restore \n after sync instructions"
    
    This reverts commit dc9d0a75ce9af74612d6a4d052e4df2bddfe8ed4 which is
    commit fd7710cb491f900eb63d2ce5aac0e682003e84e9 upstream.
    
    This, and the follow-on patch, breaks the mips build so it needs to be
    reverted.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
