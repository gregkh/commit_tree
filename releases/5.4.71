commit 85b0841aab15c12948af951d477183ab3df7de14
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Oct 14 10:33:07 2020 +0200

    Linux 5.4.71
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20201012132632.846779148@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22e6625babfc1fe349032cd46237085b91aae076
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Sep 22 20:56:24 2020 -0700

    net_sched: commit action insertions together
    
    commit 0fedc63fadf0404a729e73a35349481c8009c02f upstream.
    
    syzbot is able to trigger a failure case inside the loop in
    tcf_action_init(), and when this happens we clean up with
    tcf_action_destroy(). But, as these actions are already inserted
    into the global IDR, other parallel process could free them
    before tcf_action_destroy(), then we will trigger a use-after-free.
    
    Fix this by deferring the insertions even later, after the loop,
    and committing all the insertions in a separate loop, so we will
    never fail in the middle of the insertions any more.
    
    One side effect is that the window between alloction and final
    insertion becomes larger, now it is more likely that the loop in
    tcf_del_walker() sees the placeholder -EBUSY pointer. So we have
    to check for error pointer in tcf_del_walker().
    
    Reported-and-tested-by: syzbot+2287853d392e4b42374a@syzkaller.appspotmail.com
    Fixes: 0190c1d452a9 ("net: sched: atomically check-allocate action")
    Cc: Vlad Buslov <vladbu@mellanox.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5de4ee6d055899b67bfb41722bbeb5c6e0fba70
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Sep 22 20:56:23 2020 -0700

    net_sched: defer tcf_idr_insert() in tcf_action_init_1()
    
    commit e49d8c22f1261c43a986a7fdbf677ac309682a07 upstream.
    
    All TC actions call tcf_idr_insert() for new action at the end
    of their ->init(), so we can actually move it to a central place
    in tcf_action_init_1().
    
    And once the action is inserted into the global IDR, other parallel
    process could free it immediately as its refcnt is still 1, so we can
    not fail after this, we need to move it after the goto action
    validation to avoid handling the failure case after insertion.
    
    This is found during code review, is not directly triggered by syzbot.
    And this prepares for the next patch.
    
    Cc: Vlad Buslov <vladbu@mellanox.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbb763107d3ee8ecfe1fc0e262158339e9875892
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Oct 5 18:59:58 2020 +0530

    net: usb: rtl8150: set random MAC address when set_ethernet_addr() fails
    
    commit f45a4248ea4cc13ed50618ff066849f9587226b2 upstream.
    
    When get_registers() fails in set_ethernet_addr(),the uninitialized
    value of node_id gets copied over as the address.
    So, check the return value of get_registers().
    
    If get_registers() executed successfully (i.e., it returns
    sizeof(node_id)), copy over the MAC address using ether_addr_copy()
    (instead of using memcpy()).
    
    Else, if get_registers() failed instead, a randomly generated MAC
    address is set as the MAC address instead.
    
    Reported-by: syzbot+abbc768b560c84d92fd3@syzkaller.appspotmail.com
    Tested-by: syzbot+abbc768b560c84d92fd3@syzkaller.appspotmail.com
    Acked-by: Petko Manolov <petkan@nucleusys.com>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c9edf2d855a3456abce8ee1603a4114337ce3ee
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Jul 21 22:24:24 2020 -0700

    Input: ati_remote2 - add missing newlines when printing module parameters
    
    commit 37bd9e803daea816f2dc2c8f6dc264097eb3ebd2 upstream.
    
    When I cat some module parameters by sysfs, it displays as follows. It's
    better to add a newline for easy reading.
    
    root@syzkaller:~# cat /sys/module/ati_remote2/parameters/mode_mask
    0x1froot@syzkaller:~# cat /sys/module/ati_remote2/parameters/channel_mask
    0xffffroot@syzkaller:~#
    
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Link: https://lore.kernel.org/r/20200720092148.9320-1-wangxiongfeng2@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 536c767b14e394eb8ccead829e7f35428c0f13ef
Author: Aya Levin <ayal@mellanox.com>
Date:   Sun Aug 9 12:34:21 2020 +0300

    net/mlx5e: Fix driver's declaration to support GRE offload
    
    commit 3d093bc2369003b4ce6c3522d9b383e47c40045d upstream.
    
    Declare GRE offload support with respect to the inner protocol. Add a
    list of supported inner protocols on which the driver can offload
    checksum and GSO. For other protocols, inform the stack to do the needed
    operations. There is no noticeable impact on GRE performance.
    
    Fixes: 2729984149e6 ("net/mlx5e: Support TSO and TX checksum offloads for GRE tunnels")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dc5025c6a444548ab5e2ef9e6f4479f71c7c1a0
Author: Rohit Maheshwari <rohitm@chelsio.com>
Date:   Thu Sep 24 12:28:45 2020 +0530

    net/tls: race causes kernel panic
    
    commit 38f7e1c0c43dd25b06513137bb6fd35476f9ec6d upstream.
    
    BUG: kernel NULL pointer dereference, address: 00000000000000b8
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 80000008b6fef067 P4D 80000008b6fef067 PUD 8b6fe6067 PMD 0
     Oops: 0000 [#1] SMP PTI
     CPU: 12 PID: 23871 Comm: kworker/12:80 Kdump: loaded Tainted: G S
     5.9.0-rc3+ #1
     Hardware name: Supermicro X10SRA-F/X10SRA-F, BIOS 2.1 03/29/2018
     Workqueue: events tx_work_handler [tls]
     RIP: 0010:tx_work_handler+0x1b/0x70 [tls]
     Code: dc fe ff ff e8 16 d4 a3 f6 66 0f 1f 44 00 00 0f 1f 44 00 00 55 53 48 8b
     6f 58 48 8b bd a0 04 00 00 48 85 ff 74 1c 48 8b 47 28 <48> 8b 90 b8 00 00 00 83
     e2 02 75 0c f0 48 0f ba b0 b8 00 00 00 00
     RSP: 0018:ffffa44ace61fe88 EFLAGS: 00010286
     RAX: 0000000000000000 RBX: ffff91da9e45cc30 RCX: dead000000000122
     RDX: 0000000000000001 RSI: ffff91da9e45cc38 RDI: ffff91d95efac200
     RBP: ffff91da133fd780 R08: 0000000000000000 R09: 000073746e657665
     R10: 8080808080808080 R11: 0000000000000000 R12: ffff91dad7d30700
     R13: ffff91dab6561080 R14: 0ffff91dad7d3070 R15: ffff91da9e45cc38
     FS:  0000000000000000(0000) GS:ffff91dad7d00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00000000000000b8 CR3: 0000000906478003 CR4: 00000000003706e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      process_one_work+0x1a7/0x370
      worker_thread+0x30/0x370
      ? process_one_work+0x370/0x370
      kthread+0x114/0x130
      ? kthread_park+0x80/0x80
      ret_from_fork+0x22/0x30
    
    tls_sw_release_resources_tx() waits for encrypt_pending, which
    can have race, so we need similar changes as in commit
    0cada33241d9de205522e3858b18e506ca5cce2c here as well.
    
    Fixes: a42055e8d2c3 ("net/tls: Add support for async encryption of records for performance")
    Signed-off-by: Rohit Maheshwari <rohitm@chelsio.com>
    Acked-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a42dbd059ef6616e009d3f9d7e6c92e93d9eb27b
Author: Guillaume Nault <gnault@redhat.com>
Date:   Fri Oct 2 21:53:08 2020 +0200

    net/core: check length before updating Ethertype in skb_mpls_{push,pop}
    
    commit 4296adc3e32f5d544a95061160fe7e127be1b9ff upstream.
    
    Openvswitch allows to drop a packet's Ethernet header, therefore
    skb_mpls_push() and skb_mpls_pop() might be called with ethernet=true
    and mac_len=0. In that case the pointer passed to skb_mod_eth_type()
    doesn't point to an Ethernet header and the new Ethertype is written at
    unexpected locations.
    
    Fix this by verifying that mac_len is big enough to contain an Ethernet
    header.
    
    Fixes: fa4e0f8855fc ("net/sched: fix corrupted L2 header with MPLS 'push' and 'pop' actions")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Acked-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e39c9eba9bef0e1dd01d744360660873c10d9d3c
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 5 06:48:13 2020 -0700

    tcp: fix receive window update in tcp_add_backlog()
    
    commit 86bccd0367130f481ca99ba91de1c6a5aa1c78c1 upstream.
    
    We got reports from GKE customers flows being reset by netfilter
    conntrack unless nf_conntrack_tcp_be_liberal is set to 1.
    
    Traces seemed to suggest ACK packet being dropped by the
    packet capture, or more likely that ACK were received in the
    wrong order.
    
     wscale=7, SYN and SYNACK not shown here.
    
     This ACK allows the sender to send 1871*128 bytes from seq 51359321 :
     New right edge of the window -> 51359321+1871*128=51598809
    
     09:17:23.389210 IP A > B: Flags [.], ack 51359321, win 1871, options [nop,nop,TS val 10 ecr 999], length 0
    
     09:17:23.389212 IP B > A: Flags [.], seq 51422681:51424089, ack 1577, win 268, options [nop,nop,TS val 999 ecr 10], length 1408
     09:17:23.389214 IP A > B: Flags [.], ack 51422681, win 1376, options [nop,nop,TS val 10 ecr 999], length 0
     09:17:23.389253 IP B > A: Flags [.], seq 51424089:51488857, ack 1577, win 268, options [nop,nop,TS val 999 ecr 10], length 64768
     09:17:23.389272 IP A > B: Flags [.], ack 51488857, win 859, options [nop,nop,TS val 10 ecr 999], length 0
     09:17:23.389275 IP B > A: Flags [.], seq 51488857:51521241, ack 1577, win 268, options [nop,nop,TS val 999 ecr 10], length 32384
    
     Receiver now allows to send 606*128=77568 from seq 51521241 :
     New right edge of the window -> 51521241+606*128=51598809
    
     09:17:23.389296 IP A > B: Flags [.], ack 51521241, win 606, options [nop,nop,TS val 10 ecr 999], length 0
    
     09:17:23.389308 IP B > A: Flags [.], seq 51521241:51553625, ack 1577, win 268, options [nop,nop,TS val 999 ecr 10], length 32384
    
     It seems the sender exceeds RWIN allowance, since 51611353 > 51598809
    
     09:17:23.389346 IP B > A: Flags [.], seq 51553625:51611353, ack 1577, win 268, options [nop,nop,TS val 999 ecr 10], length 57728
     09:17:23.389356 IP B > A: Flags [.], seq 51611353:51618393, ack 1577, win 268, options [nop,nop,TS val 999 ecr 10], length 7040
    
     09:17:23.389367 IP A > B: Flags [.], ack 51611353, win 0, options [nop,nop,TS val 10 ecr 999], length 0
    
     netfilter conntrack is not happy and sends RST
    
     09:17:23.389389 IP A > B: Flags [R], seq 92176528, win 0, length 0
     09:17:23.389488 IP B > A: Flags [R], seq 174478967, win 0, length 0
    
     Now imagine ACK were delivered out of order and tcp_add_backlog() sets window based on wrong packet.
     New right edge of the window -> 51521241+859*128=51631193
    
    Normally TCP stack handles OOO packets just fine, but it
    turns out tcp_add_backlog() does not. It can update the window
    field of the aggregated packet even if the ACK sequence
    of the last received packet is too old.
    
    Many thanks to Alexandre Ferrieux for independently reporting the issue
    and suggesting a fix.
    
    Fixes: 4f693b55c3d2 ("tcp: implement coalescing on backlog queue")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Alexandre Ferrieux <alexandre.ferrieux@orange.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2729afe17987d55845fee512e3d713bc4724c553
Author: Vijay Balakrishna <vijayb@linux.microsoft.com>
Date:   Sat Oct 10 23:16:40 2020 -0700

    mm: khugepaged: recalculate min_free_kbytes after memory hotplug as expected by khugepaged
    
    commit 4aab2be0983031a05cb4a19696c9da5749523426 upstream.
    
    When memory is hotplug added or removed the min_free_kbytes should be
    recalculated based on what is expected by khugepaged.  Currently after
    hotplug, min_free_kbytes will be set to a lower default and higher
    default set when THP enabled is lost.
    
    This change restores min_free_kbytes as expected for THP consumers.
    
    [vijayb@linux.microsoft.com: v5]
      Link: https://lkml.kernel.org/r/1601398153-5517-1-git-send-email-vijayb@linux.microsoft.com
    
    Fixes: f000565adb77 ("thp: set recommended min free kbytes")
    Signed-off-by: Vijay Balakrishna <vijayb@linux.microsoft.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Allen Pais <apais@microsoft.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/1600305709-2319-2-git-send-email-vijayb@linux.microsoft.com
    Link: https://lkml.kernel.org/r/1600204258-13683-1-git-send-email-vijayb@linux.microsoft.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d94c1505fa919759ad71f4e3aecbe198445fed0e
Author: Coly Li <colyli@suse.de>
Date:   Fri Oct 2 09:38:52 2020 +0800

    mmc: core: don't set limits.discard_granularity as 0
    
    [ Upstream commit 4243219141b67d7c2fdb2d8073c17c539b9263eb ]
    
    In mmc_queue_setup_discard() the mmc driver queue's discard_granularity
    might be set as 0 (when card->pref_erase > max_discard) while the mmc
    device still declares to support discard operation. This is buggy and
    triggered the following kernel warning message,
    
    WARNING: CPU: 0 PID: 135 at __blkdev_issue_discard+0x200/0x294
    CPU: 0 PID: 135 Comm: f2fs_discard-17 Not tainted 5.9.0-rc6 #1
    Hardware name: Google Kevin (DT)
    pstate: 00000005 (nzcv daif -PAN -UAO BTYPE=--)
    pc : __blkdev_issue_discard+0x200/0x294
    lr : __blkdev_issue_discard+0x54/0x294
    sp : ffff800011dd3b10
    x29: ffff800011dd3b10 x28: 0000000000000000 x27: ffff800011dd3cc4 x26: ffff800011dd3e18 x25: 000000000004e69b x24: 0000000000000c40 x23: ffff0000f1deaaf0 x22: ffff0000f2849200 x21: 00000000002734d8 x20: 0000000000000008 x19: 0000000000000000 x18: 0000000000000000 x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000000000 x14: 0000000000000394 x13: 0000000000000000 x12: 0000000000000000 x11: 0000000000000000 x10: 00000000000008b0 x9 : ffff800011dd3cb0 x8 : 000000000004e69b x7 : 0000000000000000 x6 : ffff0000f1926400 x5 : ffff0000f1940800 x4 : 0000000000000000 x3 : 0000000000000c40 x2 : 0000000000000008 x1 : 00000000002734d8 x0 : 0000000000000000 Call trace:
    __blkdev_issue_discard+0x200/0x294
    __submit_discard_cmd+0x128/0x374
    __issue_discard_cmd_orderly+0x188/0x244
    __issue_discard_cmd+0x2e8/0x33c
    issue_discard_thread+0xe8/0x2f0
    kthread+0x11c/0x120
    ret_from_fork+0x10/0x1c
    ---[ end trace e4c8023d33dfe77a ]---
    
    This patch fixes the issue by setting discard_granularity as SECTOR_SIZE
    instead of 0 when (card->pref_erase > max_discard) is true. Now no more
    complain from __blkdev_issue_discard() for the improper value of discard
    granularity.
    
    This issue is exposed after commit b35fd7422c2f ("block: check queue's
    limits.discard_granularity in __blkdev_issue_discard()"), a "Fixes:" tag
    is also added for the commit to make sure people won't miss this patch
    after applying the change of __blkdev_issue_discard().
    
    Fixes: e056a1b5b67b ("mmc: queue: let host controllers specify maximum discard timeout")
    Fixes: b35fd7422c2f ("block: check queue's limits.discard_granularity in __blkdev_issue_discard()").
    Reported-and-tested-by: Vicente Bergas <vicencb@gmail.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/20201002013852.51968-1-colyli@suse.de
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 760c7a948bea9881598c528a4779aaa7f142d91b
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Thu Aug 27 12:17:32 2020 +0530

    perf: Fix task_function_call() error handling
    
    [ Upstream commit 6d6b8b9f4fceab7266ca03d194f60ec72bd4b654 ]
    
    The error handling introduced by commit:
    
      2ed6edd33a21 ("perf: Add cond_resched() to task_function_call()")
    
    looses any return value from smp_call_function_single() that is not
    {0, -EINVAL}. This is a problem because it will return -EXNIO when the
    target CPU is offline. Worse, in that case it'll turn into an infinite
    loop.
    
    Fixes: 2ed6edd33a21 ("perf: Add cond_resched() to task_function_call()")
    Reported-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Barret Rhoden <brho@google.com>
    Tested-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Link: https://lkml.kernel.org/r/20200827064732.20860-1-kjain@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b750f86a62d1a3bc75e17f9934eac6b225fd5387
Author: David Howells <dhowells@redhat.com>
Date:   Fri Oct 2 14:04:51 2020 +0100

    rxrpc: Fix server keyring leak
    
    [ Upstream commit 38b1dc47a35ba14c3f4472138ea56d014c2d609b ]
    
    If someone calls setsockopt() twice to set a server key keyring, the first
    keyring is leaked.
    
    Fix it to return an error instead if the server key keyring is already set.
    
    Fixes: 17926a79320a ("[AF_RXRPC]: Provide secure RxRPC sockets for use by userspace and kernel both")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae1a085b4aacda829f7a469c6d3d9d52e18a5e1d
Author: David Howells <dhowells@redhat.com>
Date:   Wed Sep 30 19:52:08 2020 +0100

    rxrpc: The server keyring isn't network-namespaced
    
    [ Upstream commit fea99111244bae44e7d82a973744d27ea1567814 ]
    
    The keyring containing the server's tokens isn't network-namespaced, so it
    shouldn't be looked up with a network namespace.  It is expected to be
    owned specifically by the server, so namespacing is unnecessary.
    
    Fixes: a58946c158a0 ("keys: Pass the network namespace into request_key mechanism")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 513dd1609c9d094b7863f02f05509db3c78adf20
Author: David Howells <dhowells@redhat.com>
Date:   Thu Oct 1 11:57:40 2020 +0100

    rxrpc: Fix some missing _bh annotations on locking conn->state_lock
    
    [ Upstream commit fa1d113a0f96f9ab7e4fe4f8825753ba1e34a9d3 ]
    
    conn->state_lock may be taken in softirq mode, but a previous patch
    replaced an outer lock in the response-packet event handling code, and lost
    the _bh from that when doing so.
    
    Fix this by applying the _bh annotation to the state_lock locking.
    
    Fixes: a1399f8bb033 ("rxrpc: Call channels should have separate call number spaces")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 422f5c5d3ef9eb44eaac710504593da733aca985
Author: David Howells <dhowells@redhat.com>
Date:   Tue Sep 8 22:09:04 2020 +0100

    rxrpc: Downgrade the BUG() for unsupported token type in rxrpc_read()
    
    [ Upstream commit 9a059cd5ca7d9c5c4ca5a6e755cf72f230176b6a ]
    
    If rxrpc_read() (which allows KEYCTL_READ to read a key), sees a token of a
    type it doesn't recognise, it can BUG in a couple of places, which is
    unnecessary as it can easily get back to userspace.
    
    Fix this to print an error message instead.
    
    Fixes: 99455153d067 ("RxRPC: Parse security index 5 keys (Kerberos 5)")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e1f39b5c1d5ba70a70844658cbde0d0ab8f7e1d
Author: Marc Dionne <marc.dionne@auristor.com>
Date:   Fri Sep 4 14:01:24 2020 -0300

    rxrpc: Fix rxkad token xdr encoding
    
    [ Upstream commit 56305118e05b2db8d0395bba640ac9a3aee92624 ]
    
    The session key should be encoded with just the 8 data bytes and
    no length; ENCODE_DATA precedes it with a 4 byte length, which
    confuses some existing tools that try to parse this format.
    
    Add an ENCODE_BYTES macro that does not include a length, and use
    it for the key.  Also adjust the expected length.
    
    Note that commit 774521f353e1d ("rxrpc: Fix an assertion in
    rxrpc_read()") had fixed a BUG by changing the length rather than
    fixing the encoding.  The original length was correct.
    
    Fixes: 99455153d067 ("RxRPC: Parse security index 5 keys (Kerberos 5)")
    Signed-off-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a52da3f61b45fea94478b59e2f3829a64a615a5
Author: Aya Levin <ayal@nvidia.com>
Date:   Sun Sep 13 18:05:40 2020 +0300

    net/mlx5e: Fix VLAN create flow
    
    [ Upstream commit d4a16052bccdd695982f89d815ca075825115821 ]
    
    When interface is attached while in promiscuous mode and with VLAN
    filtering turned off, both configurations are not respected and VLAN
    filtering is performed.
    There are 2 flows which add the any-vid rules during interface attach:
    VLAN creation table and set rx mode. Each is relaying on the other to
    add any-vid rules, eventually non of them does.
    
    Fix this by adding any-vid rules on VLAN creation regardless of
    promiscuous mode.
    
    Fixes: 9df30601c843 ("net/mlx5e: Restore vlan filter after seamless reset")
    Signed-off-by: Aya Levin <ayal@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b9752d85e72f8681e3df839b866bd3f1a7c70dc
Author: Aya Levin <ayal@nvidia.com>
Date:   Sun Sep 13 17:57:23 2020 +0300

    net/mlx5e: Fix VLAN cleanup flow
    
    [ Upstream commit 8c7353b6f716436ad0bfda2b5c5524ab2dde5894 ]
    
    Prior to this patch unloading an interface in promiscuous mode with RX
    VLAN filtering feature turned off - resulted in a warning. This is due
    to a wrong condition in the VLAN rules cleanup flow, which left the
    any-vid rules in the VLAN steering table. These rules prevented
    destroying the flow group and the flow table.
    
    The any-vid rules are removed in 2 flows, but none of them remove it in
    case both promiscuous is set and VLAN filtering is off. Fix the issue by
    changing the condition of the VLAN table cleanup flow to clean also in
    case of promiscuous mode.
    
    mlx5_core 0000:00:08.0: mlx5_destroy_flow_group:2123:(pid 28729): Flow group 20 wasn't destroyed, refcount > 1
    mlx5_core 0000:00:08.0: mlx5_destroy_flow_group:2123:(pid 28729): Flow group 19 wasn't destroyed, refcount > 1
    mlx5_core 0000:00:08.0: mlx5_destroy_flow_table:2112:(pid 28729): Flow table 262149 wasn't destroyed, refcount > 1
    ...
    ...
    ------------[ cut here ]------------
    FW pages counter is 11560 after reclaiming all pages
    WARNING: CPU: 1 PID: 28729 at
    drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c:660
    mlx5_reclaim_startup_pages+0x178/0x230 [mlx5_core]
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
    rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Call Trace:
      mlx5_function_teardown+0x2f/0x90 [mlx5_core]
      mlx5_unload_one+0x71/0x110 [mlx5_core]
      remove_one+0x44/0x80 [mlx5_core]
      pci_device_remove+0x3e/0xc0
      device_release_driver_internal+0xfb/0x1c0
      device_release_driver+0x12/0x20
      pci_stop_bus_device+0x68/0x90
      pci_stop_and_remove_bus_device+0x12/0x20
      hv_eject_device_work+0x6f/0x170 [pci_hyperv]
      ? __schedule+0x349/0x790
      process_one_work+0x206/0x400
      worker_thread+0x34/0x3f0
      ? process_one_work+0x400/0x400
      kthread+0x126/0x140
      ? kthread_park+0x90/0x90
      ret_from_fork+0x22/0x30
       ---[ end trace 6283bde8d26170dc ]---
    
    Fixes: 9df30601c843 ("net/mlx5e: Restore vlan filter after seamless reset")
    Signed-off-by: Aya Levin <ayal@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47e83c69fe14c03e0d8ca96d33678b010a88b297
Author: Aya Levin <ayal@mellanox.com>
Date:   Mon Jul 20 16:53:18 2020 +0300

    net/mlx5e: Add resiliency in Striding RQ mode for packets larger than MTU
    
    [ Upstream commit c3c9402373fe20e2d08c04f437ce4dcd252cffb2 ]
    
    Prior to this fix, in Striding RQ mode the driver was vulnerable when
    receiving packets in the range (stride size - headroom, stride size].
    Where stride size is calculated by mtu+headroom+tailroom aligned to the
    closest power of 2.
    Usually, this filtering is performed by the HW, except for a few cases:
    - Between 2 VFs over the same PF with different MTUs
    - On bluefield, when the host physical function sets a larger MTU than
      the ARM has configured on its representor and uplink representor.
    
    When the HW filtering is not present, packets that are larger than MTU
    might be harmful for the RQ's integrity, in the following impacts:
    1) Overflow from one WQE to the next, causing a memory corruption that
    in most cases is unharmful: as the write happens to the headroom of next
    packet, which will be overwritten by build_skb(). In very rare cases,
    high stress/load, this is harmful. When the next WQE is not yet reposted
    and points to existing SKB head.
    2) Each oversize packet overflows to the headroom of the next WQE. On
    the last WQE of the WQ, where addresses wrap-around, the address of the
    remainder headroom does not belong to the next WQE, but it is out of the
    memory region range. This results in a HW CQE error that moves the RQ
    into an error state.
    
    Solution:
    Add a page buffer at the end of each WQE to absorb the leak. Actually
    the maximal overflow size is headroom but since all memory units must be
    of the same size, we use page size to comply with UMR WQEs. The increase
    in memory consumption is of a single page per RQ. Initialize the mkey
    with all MTTs pointing to a default page. When the channels are
    activated, UMR WQEs will redirect the RX WQEs to the actual memory from
    the RQ's pool, while the overflow MTTs remain mapped to the default page.
    
    Fixes: 73281b78a37a ("net/mlx5e: Derive Striding RQ size from MTU")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e7a94724b78ad81dbe0f0fc9552adfa8ce927b0
Author: Maor Gottlieb <maorg@nvidia.com>
Date:   Mon Aug 31 21:37:31 2020 +0300

    net/mlx5: Fix request_irqs error flow
    
    [ Upstream commit 732ebfab7fe96b7ac9a3df3208f14752a4bb6db3 ]
    
    Fix error flow handling in request_irqs which try to free irq
    that we failed to request.
    It fixes the below trace.
    
    WARNING: CPU: 1 PID: 7587 at kernel/irq/manage.c:1684 free_irq+0x4d/0x60
    CPU: 1 PID: 7587 Comm: bash Tainted: G        W  OE    4.15.15-1.el7MELLANOXsmp-x86_64 #1
    Hardware name: Advantech SKY-6200/SKY-6200, BIOS F2.00 08/06/2020
    RIP: 0010:free_irq+0x4d/0x60
    RSP: 0018:ffffc9000ef47af0 EFLAGS: 00010282
    RAX: ffff88001476ae00 RBX: 0000000000000655 RCX: 0000000000000000
    RDX: ffff88001476ae00 RSI: ffffc9000ef47ab8 RDI: ffff8800398bb478
    RBP: ffff88001476a838 R08: ffff88001476ae00 R09: 000000000000156d
    R10: 0000000000000000 R11: 0000000000000004 R12: ffff88001476a838
    R13: 0000000000000006 R14: ffff88001476a888 R15: 00000000ffffffe4
    FS:  00007efeadd32740(0000) GS:ffff88047fc40000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fc9cc010008 CR3: 00000001a2380004 CR4: 00000000007606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     mlx5_irq_table_create+0x38d/0x400 [mlx5_core]
     ? atomic_notifier_chain_register+0x50/0x60
     mlx5_load_one+0x7ee/0x1130 [mlx5_core]
     init_one+0x4c9/0x650 [mlx5_core]
     pci_device_probe+0xb8/0x120
     driver_probe_device+0x2a1/0x470
     ? driver_allows_async_probing+0x30/0x30
     bus_for_each_drv+0x54/0x80
     __device_attach+0xa3/0x100
     pci_bus_add_device+0x4a/0x90
     pci_iov_add_virtfn+0x2dc/0x2f0
     pci_enable_sriov+0x32e/0x420
     mlx5_core_sriov_configure+0x61/0x1b0 [mlx5_core]
     ? kstrtoll+0x22/0x70
     num_vf_store+0x4b/0x70 [mlx5_core]
     kernfs_fop_write+0x102/0x180
     __vfs_write+0x26/0x140
     ? rcu_all_qs+0x5/0x80
     ? _cond_resched+0x15/0x30
     ? __sb_start_write+0x41/0x80
     vfs_write+0xad/0x1a0
     SyS_write+0x42/0x90
     do_syscall_64+0x60/0x110
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Fixes: 24163189da48 ("net/mlx5: Separate IRQ request/free from EQ life cycle")
    Signed-off-by: Maor Gottlieb <maorg@nvidia.com>
    Reviewed-by: Eran Ben Elisha <eranbe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 073fff8102062cd675170ceb54d90da22fe7e668
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Tue Aug 4 10:40:21 2020 +0300

    net/mlx5: Avoid possible free of command entry while timeout comp handler
    
    [ Upstream commit 50b2412b7e7862c5af0cbf4b10d93bc5c712d021 ]
    
    Upon command completion timeout, driver simulates a forced command
    completion. In a rare case where real interrupt for that command arrives
    simultaneously, it might release the command entry while the forced
    handler might still access it.
    
    Fix that by adding an entry refcount, to track current amount of allowed
    handlers. Command entry to be released only when this refcount is
    decremented to zero.
    
    Command refcount is always initialized to one. For callback commands,
    command completion handler is the symmetric flow to decrement it. For
    non-callback commands, it is wait_func().
    
    Before ringing the doorbell, increment the refcount for the real completion
    handler. Once the real completion handler is called, it will decrement it.
    
    For callback commands, once the delayed work is scheduled, increment the
    refcount. Upon callback command completion handler, we will try to cancel
    the timeout callback. In case of success, we need to decrement the callback
    refcount as it will never run.
    
    In addition, gather the entry index free and the entry free into a one
    flow for all command types release.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Reviewed-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0955c774f32d15d39d29548273cccd39bbc9ec23
Author: Tonghao Zhang <xiangxia.m.yue@gmail.com>
Date:   Tue Sep 29 09:58:06 2020 +0800

    virtio-net: don't disable guest csum when disable LRO
    
    [ Upstream commit 1a03b8a35a957f9f38ecb8a97443b7380bbf6a8b ]
    
    Open vSwitch and Linux bridge will disable LRO of the interface
    when this interface added to them. Now when disable the LRO, the
    virtio-net csum is disable too. That drops the forwarding performance.
    
    Fixes: a02e8964eaf9 ("virtio-net: ethtool configurable LRO")
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Tonghao Zhang <xiangxia.m.yue@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15f84bdf6185024e48de54a2fc136a71632412e8
Author: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
Date:   Mon Sep 28 11:01:04 2020 +0200

    net: usb: ax88179_178a: fix missing stop entry in driver_info
    
    [ Upstream commit 9666ea66a74adfe295cb3a8760c76e1ef70f9caf ]
    
    Adds the missing .stop entry in the Belkin driver_info structure.
    
    Fixes: e20bd60bf62a ("net: usb: asix88179_178a: Add support for the Belkin B2B128")
    Signed-off-by: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70877d04d41f2ff97818ec5d77858cf0ab8f8e89
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sun Sep 27 19:44:29 2020 +0200

    r8169: fix RTL8168f/RTL8411 EPHY config
    
    [ Upstream commit 709a16be0593c08190982cfbdca6df95e6d5823b ]
    
    Mistakenly bit 2 was set instead of bit 3 as in the vendor driver.
    
    Fixes: a7a92cf81589 ("r8169: sync PCIe PHY init with vendor driver 8.047.01")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a96cbd74fcd0ac34680d5ed842e5629bc7aa75b
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Sun Sep 27 09:42:11 2020 +0300

    mlxsw: spectrum_acl: Fix mlxsw_sp_acl_tcam_group_add()'s error path
    
    [ Upstream commit 72865028582a678be1e05240e55d452e5c258eca ]
    
    If mlxsw_sp_acl_tcam_group_id_get() fails, the mutex initialized earlier
    is not destroyed.
    
    Fix this by initializing the mutex after calling the function. This is
    symmetric to mlxsw_sp_acl_tcam_group_del().
    
    Fixes: 5ec2ee28d27b ("mlxsw: spectrum_acl: Introduce a mutex to guard region list updates")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3b35c3782ed76cdd13b2f6af700dcd5d73ac186
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Sep 26 21:33:43 2020 -0700

    mdio: fix mdio-thunder.c dependency & build error
    
    [ Upstream commit 7dbbcf496f2a4b6d82cfc7810a0746e160b79762 ]
    
    Fix build error by selecting MDIO_DEVRES for MDIO_THUNDER.
    Fixes this build error:
    
    ld: drivers/net/phy/mdio-thunder.o: in function `thunder_mdiobus_pci_probe':
    drivers/net/phy/mdio-thunder.c:78: undefined reference to `devm_mdiobus_alloc_size'
    
    Fixes: 379d7ac7ca31 ("phy: mdio-thunder: Add driver for Cavium Thunder SoC MDIO buses.")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Cc: netdev@vger.kernel.org
    Cc: David Daney <david.daney@cavium.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d103b1f9ce52d06e4db3c829e1d49756936ec43
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 25 06:38:07 2020 -0700

    bonding: set dev->needed_headroom in bond_setup_by_slave()
    
    [ Upstream commit f32f19339596b214c208c0dba716f4b6cc4f6958 ]
    
    syzbot managed to crash a host by creating a bond
    with a GRE device.
    
    For non Ethernet device, bonding calls bond_setup_by_slave()
    instead of ether_setup(), and unfortunately dev->needed_headroom
    was not copied from the new added member.
    
    [  171.243095] skbuff: skb_under_panic: text:ffffffffa184b9ea len:116 put:20 head:ffff883f84012dc0 data:ffff883f84012dbc tail:0x70 end:0xd00 dev:bond0
    [  171.243111] ------------[ cut here ]------------
    [  171.243112] kernel BUG at net/core/skbuff.c:112!
    [  171.243117] invalid opcode: 0000 [#1] SMP KASAN PTI
    [  171.243469] gsmi: Log Shutdown Reason 0x03
    [  171.243505] Call Trace:
    [  171.243506]  <IRQ>
    [  171.243512]  [<ffffffffa171be59>] skb_push+0x49/0x50
    [  171.243516]  [<ffffffffa184b9ea>] ipgre_header+0x2a/0xf0
    [  171.243520]  [<ffffffffa17452d7>] neigh_connected_output+0xb7/0x100
    [  171.243524]  [<ffffffffa186f1d3>] ip6_finish_output2+0x383/0x490
    [  171.243528]  [<ffffffffa186ede2>] __ip6_finish_output+0xa2/0x110
    [  171.243531]  [<ffffffffa186acbc>] ip6_finish_output+0x2c/0xa0
    [  171.243534]  [<ffffffffa186abe9>] ip6_output+0x69/0x110
    [  171.243537]  [<ffffffffa186ac90>] ? ip6_output+0x110/0x110
    [  171.243541]  [<ffffffffa189d952>] mld_sendpack+0x1b2/0x2d0
    [  171.243544]  [<ffffffffa189d290>] ? mld_send_report+0xf0/0xf0
    [  171.243548]  [<ffffffffa189c797>] mld_ifc_timer_expire+0x2d7/0x3b0
    [  171.243551]  [<ffffffffa189c4c0>] ? mld_gq_timer_expire+0x50/0x50
    [  171.243556]  [<ffffffffa0fea270>] call_timer_fn+0x30/0x130
    [  171.243559]  [<ffffffffa0fea17c>] expire_timers+0x4c/0x110
    [  171.243563]  [<ffffffffa0fea0e3>] __run_timers+0x213/0x260
    [  171.243566]  [<ffffffffa0fecb7d>] ? ktime_get+0x3d/0xa0
    [  171.243570]  [<ffffffffa0ff9c4e>] ? clockevents_program_event+0x7e/0xe0
    [  171.243574]  [<ffffffffa0f7e5d5>] ? sched_clock_cpu+0x15/0x190
    [  171.243577]  [<ffffffffa0fe973d>] run_timer_softirq+0x1d/0x40
    [  171.243581]  [<ffffffffa1c00152>] __do_softirq+0x152/0x2f0
    [  171.243585]  [<ffffffffa0f44e1f>] irq_exit+0x9f/0xb0
    [  171.243588]  [<ffffffffa1a02e1d>] smp_apic_timer_interrupt+0xfd/0x1a0
    [  171.243591]  [<ffffffffa1a01ea6>] apic_timer_interrupt+0x86/0x90
    
    Fixes: f5184d267c1a ("net: Allow netdevices to specify needed head/tailroom")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ce96a55b7561ff59b763d68db54d76a3436c418
Author: Ivan Khoronzhuk <ivan.khoronzhuk@gmail.com>
Date:   Fri Sep 25 15:44:39 2020 +0300

    net: ethernet: cavium: octeon_mgmt: use phy_start and phy_stop
    
    [ Upstream commit 4663ff60257aec4ee1e2e969a7c046f0aff35ab8 ]
    
    To start also "phy state machine", with UP state as it should be,
    the phy_start() has to be used, in another case machine even is not
    triggered. After this change negotiation is supposed to be triggered
    by SM workqueue.
    
    It's not correct usage, but it appears after the following patch,
    so add it as a fix.
    
    Fixes: 74a992b3598a ("net: phy: add phy_check_link_status")
    Signed-off-by: Ivan Khoronzhuk <ikhoronz@cisco.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e987ea087fd2920dfc2699472371869bb59257b4
Author: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
Date:   Wed Sep 2 12:54:59 2020 +0000

    iavf: Fix incorrect adapter get in iavf_resume
    
    [ Upstream commit 75598a8fc0e0dff2aa5d46c62531b36a595f1d4f ]
    
    When calling iavf_resume there was a crash because wrong
    function was used to get iavf_adapter and net_device pointers.
    Changed how iavf_resume is getting iavf_adapter and net_device
    pointers from pci_dev.
    
    Fixes: 5eae00c57f5e ("i40evf: main driver core")
    Signed-off-by: Sylwester Dziedziuch <sylwesterx.dziedziuch@intel.com>
    Reviewed-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 029ced5cce896fc0ee3dd0b7600cdbca028a868c
Author: Vaibhav Gupta <vaibhavgupta40@gmail.com>
Date:   Mon Jun 29 14:59:39 2020 +0530

    iavf: use generic power management
    
    [ Upstream commit bc5cbd73eb493944b8665dc517f684c40eb18a4a ]
    
    With the support of generic PM callbacks, drivers no longer need to use
    legacy .suspend() and .resume() in which they had to maintain PCI states
    changes and device's power state themselves. The required operations are
    done by PCI core.
    
    PCI drivers are not expected to invoke PCI helper functions like
    pci_save/restore_state(), pci_enable/disable_device(),
    pci_set_power_state(), etc. Their tasks are completed by PCI core itself.
    
    Compile-tested only.
    
    Signed-off-by: Vaibhav Gupta <vaibhavgupta40@gmail.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84ab35eacdf244e9950505d1a5034044745ebec9
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Sep 25 14:42:56 2020 +1000

    xfrm: Use correct address family in xfrm_state_find
    
    [ Upstream commit e94ee171349db84c7cfdc5fefbebe414054d0924 ]
    
    The struct flowi must never be interpreted by itself as its size
    depends on the address family.  Therefore it must always be grouped
    with its original family value.
    
    In this particular instance, the original family value is lost in
    the function xfrm_state_find.  Therefore we get a bogus read when
    it's coupled with the wrong family which would occur with inter-
    family xfrm states.
    
    This patch fixes it by keeping the original family value.
    
    Note that the same bug could potentially occur in LSM through
    the xfrm_state_pol_flow_match hook.  I checked the current code
    there and it seems to be safe for now as only secid is used which
    is part of struct flowi_common.  But that API should be changed
    so that so that we don't get new bugs in the future.  We could
    do that by replacing fl with just secid or adding a family field.
    
    Reported-by: syzbot+577fbac3145a6eb2e7a5@syzkaller.appspotmail.com
    Fixes: 48b8d78315bf ("[XFRM]: State selection update to use inner...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d3edb2e4d6e3e2ef5d740470a9e63d177d177ab
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Thu Sep 17 19:16:53 2020 +0300

    platform/x86: fix kconfig dependency warning for FUJITSU_LAPTOP
    
    [ Upstream commit afdd1ebb72051e8b6b83c4d7dc542a9be0e1352d ]
    
    When FUJITSU_LAPTOP is enabled and NEW_LEDS is disabled, it results in the
    following Kbuild warning:
    
    WARNING: unmet direct dependencies detected for LEDS_CLASS
      Depends on [n]: NEW_LEDS [=n]
      Selected by [y]:
      - FUJITSU_LAPTOP [=y] && X86 [=y] && X86_PLATFORM_DEVICES [=y] && ACPI [=y] && INPUT [=y] && BACKLIGHT_CLASS_DEVICE [=y] && (ACPI_VIDEO [=n] || ACPI_VIDEO [=n]=n)
    
    The reason is that FUJITSU_LAPTOP selects LEDS_CLASS without depending on
    or selecting NEW_LEDS while LEDS_CLASS is subordinate to NEW_LEDS.
    
    Honor the kconfig menu hierarchy to remove kconfig dependency warnings.
    
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: d89bcc83e709 ("platform/x86: fujitsu-laptop: select LEDS_CLASS")
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd2786a3e5219bbcc168361892e72cc6aa80f09b
Author: Voon Weifeng <weifeng.voon@intel.com>
Date:   Wed Sep 23 16:56:14 2020 +0800

    net: stmmac: removed enabling eee in EEE set callback
    
    [ Upstream commit 7241c5a697479c7d0c5a96595822cdab750d41ae ]
    
    EEE should be only be enabled during stmmac_mac_link_up() when the
    link are up and being set up properly. set_eee should only do settings
    configuration and disabling the eee.
    
    Without this fix, turning on EEE using ethtool will return
    "Operation not supported". This is due to the driver is in a dead loop
    waiting for eee to be advertised in the for eee to be activated but the
    driver will only configure the EEE advertisement after the eee is
    activated.
    
    Ethtool should only return "Operation not supported" if there is no EEE
    capbility in the MAC controller.
    
    Fixes: 8a7493e58ad6 ("net: stmmac: Fix a race in EEE enable callback")
    Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
    Acked-by: Mark Gross <mgross@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9a12de5a2bedeeb34aa0e56d5873222226558eb
Author: Antony Antony <antony.antony@secunet.com>
Date:   Fri Sep 4 08:50:29 2020 +0200

    xfrm: clone whole liftime_cur structure in xfrm_do_migrate
    
    [ Upstream commit 8366685b2883e523f91e9816d7be371eb1144749 ]
    
    When we clone state only add_time was cloned. It missed values like
    bytes, packets.  Now clone the all members of the structure.
    
    v1->v3:
     - use memcpy to copy the entire structure
    
    Fixes: 80c9abaabf42 ("[XFRM]: Extension for dynamic update of endpoint address(es)")
    Signed-off-by: Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ea7436c406c1f1ce02d54055e89a862d9ef0f6b
Author: Antony Antony <antony.antony@secunet.com>
Date:   Fri Sep 4 08:50:11 2020 +0200

    xfrm: clone XFRMA_SEC_CTX in xfrm_do_migrate
    
    [ Upstream commit 7aa05d304785204703a67a6aa7f1db402889a172 ]
    
    XFRMA_SEC_CTX was not cloned from the old to the new.
    Migrate this attribute during XFRMA_MSG_MIGRATE
    
    v1->v2:
     - return -ENOMEM on error
    v2->v3:
     - fix return type to int
    
    Fixes: 80c9abaabf42 ("[XFRM]: Extension for dynamic update of endpoint address(es)")
    Signed-off-by: Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1becfebe33efa7dc6dbe974d0c3e1107f15b5db
Author: Antony Antony <antony.antony@secunet.com>
Date:   Fri Sep 4 08:49:55 2020 +0200

    xfrm: clone XFRMA_REPLAY_ESN_VAL in xfrm_do_migrate
    
    [ Upstream commit 91a46c6d1b4fcbfa4773df9421b8ad3e58088101 ]
    
    XFRMA_REPLAY_ESN_VAL was not cloned completely from the old to the new.
    Migrate this attribute during XFRMA_MSG_MIGRATE
    
    v1->v2:
     - move curleft cloning to a separate patch
    
    Fixes: af2f464e326e ("xfrm: Assign esn pointers when cloning a state")
    Signed-off-by: Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bea401a9a5a05694a55b9754f2ab0dd1fc5c1d0
Author: Antony Antony <antony.antony@secunet.com>
Date:   Fri Sep 4 08:49:38 2020 +0200

    xfrm: clone XFRMA_SET_MARK in xfrm_do_migrate
    
    [ Upstream commit 545e5c571662b1cd79d9588f9d3b6e36985b8007 ]
    
    XFRMA_SET_MARK and XFRMA_SET_MARK_MASK was not cloned from the old
    to the new. Migrate these two attributes during XFRMA_MSG_MIGRATE
    
    Fixes: 9b42c1f179a6 ("xfrm: Extend the output_mark to support input direction and masking.")
    Signed-off-by: Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f825fd534f8b4b07cbcfbbb7ad570880ee4a9bb3
Author: Lu Baolu <baolu.lu@linux.intel.com>
Date:   Sun Sep 27 14:24:28 2020 +0800

    iommu/vt-d: Fix lockdep splat in iommu_flush_dev_iotlb()
    
    [ Upstream commit 1a3f2fd7fc4e8f24510830e265de2ffb8e3300d2 ]
    
    Lock(&iommu->lock) without disabling irq causes lockdep warnings.
    
    [   12.703950] ========================================================
    [   12.703962] WARNING: possible irq lock inversion dependency detected
    [   12.703975] 5.9.0-rc6+ #659 Not tainted
    [   12.703983] --------------------------------------------------------
    [   12.703995] systemd-udevd/284 just changed the state of lock:
    [   12.704007] ffffffffbd6ff4d8 (device_domain_lock){..-.}-{2:2}, at:
                   iommu_flush_dev_iotlb.part.57+0x2e/0x90
    [   12.704031] but this lock took another, SOFTIRQ-unsafe lock in the past:
    [   12.704043]  (&iommu->lock){+.+.}-{2:2}
    [   12.704045]
    
                   and interrupts could create inverse lock ordering between
                   them.
    
    [   12.704073]
                   other info that might help us debug this:
    [   12.704085]  Possible interrupt unsafe locking scenario:
    
    [   12.704097]        CPU0                    CPU1
    [   12.704106]        ----                    ----
    [   12.704115]   lock(&iommu->lock);
    [   12.704123]                                local_irq_disable();
    [   12.704134]                                lock(device_domain_lock);
    [   12.704146]                                lock(&iommu->lock);
    [   12.704158]   <Interrupt>
    [   12.704164]     lock(device_domain_lock);
    [   12.704174]
                    *** DEADLOCK ***
    
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20200927062428.13713-1-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdffb36bcd383f7bd7204362d261bf6c84993db9
Author: Philip Yang <Philip.Yang@amd.com>
Date:   Tue Sep 15 17:07:35 2020 -0400

    drm/amdgpu: prevent double kfree ttm->sg
    
    [ Upstream commit 1d0e16ac1a9e800598dcfa5b6bc53b704a103390 ]
    
    Set ttm->sg to NULL after kfree, to avoid memory corruption backtrace:
    
    [  420.932812] kernel BUG at
    /build/linux-do9eLF/linux-4.15.0/mm/slub.c:295!
    [  420.934182] invalid opcode: 0000 [#1] SMP NOPTI
    [  420.935445] Modules linked in: xt_conntrack ipt_MASQUERADE
    [  420.951332] Hardware name: Dell Inc. PowerEdge R7525/0PYVT1, BIOS
    1.5.4 07/09/2020
    [  420.952887] RIP: 0010:__slab_free+0x180/0x2d0
    [  420.954419] RSP: 0018:ffffbe426291fa60 EFLAGS: 00010246
    [  420.955963] RAX: ffff9e29263e9c30 RBX: ffff9e29263e9c30 RCX:
    000000018100004b
    [  420.957512] RDX: ffff9e29263e9c30 RSI: fffff3d33e98fa40 RDI:
    ffff9e297e407a80
    [  420.959055] RBP: ffffbe426291fb00 R08: 0000000000000001 R09:
    ffffffffc0d39ade
    [  420.960587] R10: ffffbe426291fb20 R11: ffff9e49ffdd4000 R12:
    ffff9e297e407a80
    [  420.962105] R13: fffff3d33e98fa40 R14: ffff9e29263e9c30 R15:
    ffff9e2954464fd8
    [  420.963611] FS:  00007fa2ea097780(0000) GS:ffff9e297e840000(0000)
    knlGS:0000000000000000
    [  420.965144] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  420.966663] CR2: 00007f16bfffefb8 CR3: 0000001ff0c62000 CR4:
    0000000000340ee0
    [  420.968193] Call Trace:
    [  420.969703]  ? __page_cache_release+0x3c/0x220
    [  420.971294]  ? amdgpu_ttm_tt_unpopulate+0x5e/0x80 [amdgpu]
    [  420.972789]  kfree+0x168/0x180
    [  420.974353]  ? amdgpu_ttm_tt_set_user_pages+0x64/0xc0 [amdgpu]
    [  420.975850]  ? kfree+0x168/0x180
    [  420.977403]  amdgpu_ttm_tt_unpopulate+0x5e/0x80 [amdgpu]
    [  420.978888]  ttm_tt_unpopulate.part.10+0x53/0x60 [amdttm]
    [  420.980357]  ttm_tt_destroy.part.11+0x4f/0x60 [amdttm]
    [  420.981814]  ttm_tt_destroy+0x13/0x20 [amdttm]
    [  420.983273]  ttm_bo_cleanup_memtype_use+0x36/0x80 [amdttm]
    [  420.984725]  ttm_bo_release+0x1c9/0x360 [amdttm]
    [  420.986167]  amdttm_bo_put+0x24/0x30 [amdttm]
    [  420.987663]  amdgpu_bo_unref+0x1e/0x30 [amdgpu]
    [  420.989165]  amdgpu_amdkfd_gpuvm_alloc_memory_of_gpu+0x9ca/0xb10
    [amdgpu]
    [  420.990666]  kfd_ioctl_alloc_memory_of_gpu+0xef/0x2c0 [amdgpu]
    
    Signed-off-by: Philip Yang <Philip.Yang@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4034664a733ebfaa7a32a12f49d75afa171ab082
Author: Dumitru Ceara <dceara@redhat.com>
Date:   Wed Oct 7 17:48:03 2020 +0200

    openvswitch: handle DNAT tuple collision
    
    commit 8aa7b526dc0b5dbf40c1b834d76a667ad672a410 upstream.
    
    With multiple DNAT rules it's possible that after destination
    translation the resulting tuples collide.
    
    For example, two openvswitch flows:
    nw_dst=10.0.0.10,tp_dst=10, actions=ct(commit,table=2,nat(dst=20.0.0.1:20))
    nw_dst=10.0.0.20,tp_dst=10, actions=ct(commit,table=2,nat(dst=20.0.0.1:20))
    
    Assuming two TCP clients initiating the following connections:
    10.0.0.10:5000->10.0.0.10:10
    10.0.0.10:5000->10.0.0.20:10
    
    Both tuples would translate to 10.0.0.10:5000->20.0.0.1:20 causing
    nf_conntrack_confirm() to fail because of tuple collision.
    
    Netfilter handles this case by allocating a null binding for SNAT at
    egress by default.  Perform the same operation in openvswitch for DNAT
    if no explicit SNAT is requested by the user and allocate a null binding
    for SNAT for packets in the "original" direction.
    
    Reported-at: https://bugzilla.redhat.com/1877128
    Suggested-by: Florian Westphal <fw@strlen.de>
    Fixes: 05752523e565 ("openvswitch: Interface with NAT.")
    Signed-off-by: Dumitru Ceara <dceara@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f89128ad358e016d79490bb641b7f2916aee1e08
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Oct 5 02:25:36 2020 +0530

    net: team: fix memory leak in __team_options_register
    
    commit 9a9e77495958c7382b2438bc19746dd3aaaabb8e upstream.
    
    The variable "i" isn't initialized back correctly after the first loop
    under the label inst_rollback gets executed.
    
    The value of "i" is assigned to be option_count - 1, and the ensuing
    loop (under alloc_rollback) begins by initializing i--.
    Thus, the value of i when the loop begins execution will now become
    i = option_count - 2.
    
    Thus, when kfree(dst_opts[i]) is called in the second loop in this
    order, (i.e., inst_rollback followed by alloc_rollback),
    dst_optsp[option_count - 2] is the first element freed, and
    dst_opts[option_count - 1] does not get freed, and thus, a memory
    leak is caused.
    
    This memory leak can be fixed, by assigning i = option_count (instead of
    option_count - 1).
    
    Fixes: 80f7c6683fe0 ("team: add support for per-port options")
    Reported-by: syzbot+69b804437cfec30deac3@syzkaller.appspotmail.com
    Tested-by: syzbot+69b804437cfec30deac3@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 003269d8d6de1762a0ae386a2ad31fb1155cdf44
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 25 06:38:08 2020 -0700

    team: set dev->needed_headroom in team_setup_by_port()
    
    commit 89d01748b2354e210b5d4ea47bc25a42a1b42c82 upstream.
    
    Some devices set needed_headroom. If we ignore it, we might
    end up crashing in various skb_push() for example in ipgre_header()
    since some layers assume enough headroom has been reserved.
    
    Fixes: 1d76efe1577b ("team: add support for non-ethernet devices")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb3681c20fbfb990860cb9a19fbe96882298c21a
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 8 01:38:31 2020 -0700

    sctp: fix sctp_auth_init_hmacs() error path
    
    commit d42ee76ecb6c49d499fc5eb32ca34468d95dbc3e upstream.
    
    After freeing ep->auth_hmacs we have to clear the pointer
    or risk use-after-free as reported by syzbot:
    
    BUG: KASAN: use-after-free in sctp_auth_destroy_hmacs net/sctp/auth.c:509 [inline]
    BUG: KASAN: use-after-free in sctp_auth_destroy_hmacs net/sctp/auth.c:501 [inline]
    BUG: KASAN: use-after-free in sctp_auth_free+0x17e/0x1d0 net/sctp/auth.c:1070
    Read of size 8 at addr ffff8880a8ff52c0 by task syz-executor941/6874
    
    CPU: 0 PID: 6874 Comm: syz-executor941 Not tainted 5.9.0-rc8-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x198/0x1fd lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xae/0x497 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530
     sctp_auth_destroy_hmacs net/sctp/auth.c:509 [inline]
     sctp_auth_destroy_hmacs net/sctp/auth.c:501 [inline]
     sctp_auth_free+0x17e/0x1d0 net/sctp/auth.c:1070
     sctp_endpoint_destroy+0x95/0x240 net/sctp/endpointola.c:203
     sctp_endpoint_put net/sctp/endpointola.c:236 [inline]
     sctp_endpoint_free+0xd6/0x110 net/sctp/endpointola.c:183
     sctp_destroy_sock+0x9c/0x3c0 net/sctp/socket.c:4981
     sctp_v6_destroy_sock+0x11/0x20 net/sctp/socket.c:9415
     sk_common_release+0x64/0x390 net/core/sock.c:3254
     sctp_close+0x4ce/0x8b0 net/sctp/socket.c:1533
     inet_release+0x12e/0x280 net/ipv4/af_inet.c:431
     inet6_release+0x4c/0x70 net/ipv6/af_inet6.c:475
     __sock_release+0xcd/0x280 net/socket.c:596
     sock_close+0x18/0x20 net/socket.c:1277
     __fput+0x285/0x920 fs/file_table.c:281
     task_work_run+0xdd/0x190 kernel/task_work.c:141
     exit_task_work include/linux/task_work.h:25 [inline]
     do_exit+0xb7d/0x29f0 kernel/exit.c:806
     do_group_exit+0x125/0x310 kernel/exit.c:903
     __do_sys_exit_group kernel/exit.c:914 [inline]
     __se_sys_exit_group kernel/exit.c:912 [inline]
     __x64_sys_exit_group+0x3a/0x50 kernel/exit.c:912
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x43f278
    Code: Bad RIP value.
    RSP: 002b:00007fffe0995c38 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 000000000043f278
    RDX: 0000000000000000 RSI: 000000000000003c RDI: 0000000000000000
    RBP: 00000000004bf068 R08: 00000000000000e7 R09: ffffffffffffffd0
    R10: 0000000020000000 R11: 0000000000000246 R12: 0000000000000001
    R13: 00000000006d1180 R14: 0000000000000000 R15: 0000000000000000
    
    Allocated by task 6874:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc.constprop.0+0xbf/0xd0 mm/kasan/common.c:461
     kmem_cache_alloc_trace+0x174/0x300 mm/slab.c:3554
     kmalloc include/linux/slab.h:554 [inline]
     kmalloc_array include/linux/slab.h:593 [inline]
     kcalloc include/linux/slab.h:605 [inline]
     sctp_auth_init_hmacs+0xdb/0x3b0 net/sctp/auth.c:464
     sctp_auth_init+0x8a/0x4a0 net/sctp/auth.c:1049
     sctp_setsockopt_auth_supported net/sctp/socket.c:4354 [inline]
     sctp_setsockopt+0x477e/0x97f0 net/sctp/socket.c:4631
     __sys_setsockopt+0x2db/0x610 net/socket.c:2132
     __do_sys_setsockopt net/socket.c:2143 [inline]
     __se_sys_setsockopt net/socket.c:2140 [inline]
     __x64_sys_setsockopt+0xba/0x150 net/socket.c:2140
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 6874:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track+0x1c/0x30 mm/kasan/common.c:56
     kasan_set_free_info+0x1b/0x30 mm/kasan/generic.c:355
     __kasan_slab_free+0xd8/0x120 mm/kasan/common.c:422
     __cache_free mm/slab.c:3422 [inline]
     kfree+0x10e/0x2b0 mm/slab.c:3760
     sctp_auth_destroy_hmacs net/sctp/auth.c:511 [inline]
     sctp_auth_destroy_hmacs net/sctp/auth.c:501 [inline]
     sctp_auth_init_hmacs net/sctp/auth.c:496 [inline]
     sctp_auth_init_hmacs+0x2b7/0x3b0 net/sctp/auth.c:454
     sctp_auth_init+0x8a/0x4a0 net/sctp/auth.c:1049
     sctp_setsockopt_auth_supported net/sctp/socket.c:4354 [inline]
     sctp_setsockopt+0x477e/0x97f0 net/sctp/socket.c:4631
     __sys_setsockopt+0x2db/0x610 net/socket.c:2132
     __do_sys_setsockopt net/socket.c:2143 [inline]
     __se_sys_setsockopt net/socket.c:2140 [inline]
     __x64_sys_setsockopt+0xba/0x150 net/socket.c:2140
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 1f485649f529 ("[SCTP]: Implement SCTP-AUTH internals")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Vlad Yasevich <vyasevich@gmail.com>
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Cc: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 040e3110d49cf20a03458b36051e7fb21b19b5c0
Author: Cristian Ciocaltea <cristian.ciocaltea@gmail.com>
Date:   Fri Oct 9 00:44:39 2020 +0300

    i2c: owl: Clear NACK and BUS error bits
    
    commit f5b3f433641c543ebe5171285a42aa6adcdb2d22 upstream.
    
    When the NACK and BUS error bits are set by the hardware, the driver is
    responsible for clearing them by writing "1" into the corresponding
    status registers.
    
    Hence perform the necessary operations in owl_i2c_interrupt().
    
    Fixes: d211e62af466 ("i2c: Add Actions Semiconductor Owl family S900 I2C driver")
    Reported-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Cristian Ciocaltea <cristian.ciocaltea@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abe997f632d1d87d4d4880d57fdf944c7eaf4b83
Author: Nicolas Belin <nbelin@baylibre.com>
Date:   Wed Oct 7 10:07:51 2020 +0200

    i2c: meson: fixup rate calculation with filter delay
    
    commit 1334d3b4e49e35d8912a7c37ffca4c5afb9a0516 upstream.
    
    Apparently, 15 cycles of the peripheral clock are used by the controller
    for sampling and filtering. Because this was not known before, the rate
    calculation is slightly off.
    
    Clean up and fix the calculation taking this filtering delay into account.
    
    Fixes: 30021e3707a7 ("i2c: add support for Amlogic Meson I2C controller")
    Signed-off-by: Nicolas Belin <nbelin@baylibre.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6db69c39062285d0cc1cf99795b7d82bae3ad57d
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Oct 7 10:07:49 2020 +0200

    i2c: meson: fix clock setting overwrite
    
    commit 28683e847e2f20eed22cdd24f185d7783db396d3 upstream.
    
    When the slave address is written in do_start(), SLAVE_ADDR is written
    completely. This may overwrite some setting related to the clock rate
    or signal filtering.
    
    Fix this by writing only the bits related to slave address. To avoid
    causing unexpected changed, explicitly disable filtering or high/low
    clock mode which may have been left over by the bootloader.
    
    Fixes: 30021e3707a7 ("i2c: add support for Amlogic Meson I2C controller")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 209549c1c0f069c5207e07b8b82761f0d06baaae
Author: Vladimir Zapolskiy <vladimir@tuxera.com>
Date:   Sat Oct 10 21:25:54 2020 +0300

    cifs: Fix incomplete memory allocation on setxattr path
    
    commit 64b7f674c292207624b3d788eda2dde3dc1415df upstream.
    
    On setxattr() syscall path due to an apprent typo the size of a dynamically
    allocated memory chunk for storing struct smb2_file_full_ea_info object is
    computed incorrectly, to be more precise the first addend is the size of
    a pointer instead of the wanted object size. Coincidentally it makes no
    difference on 64-bit platforms, however on 32-bit targets the following
    memcpy() writes 4 bytes of data outside of the dynamically allocated memory.
    
      =============================================================================
      BUG kmalloc-16 (Not tainted): Redzone overwritten
      -----------------------------------------------------------------------------
    
      Disabling lock debugging due to kernel taint
      INFO: 0x79e69a6f-0x9e5cdecf @offset=368. First byte 0x73 instead of 0xcc
      INFO: Slab 0xd36d2454 objects=85 used=51 fp=0xf7d0fc7a flags=0x35000201
      INFO: Object 0x6f171df3 @offset=352 fp=0x00000000
    
      Redzone 5d4ff02d: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................
      Object 6f171df3: 00 00 00 00 00 05 06 00 73 6e 72 75 62 00 66 69  ........snrub.fi
      Redzone 79e69a6f: 73 68 32 0a                                      sh2.
      Padding 56254d82: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      CPU: 0 PID: 8196 Comm: attr Tainted: G    B             5.9.0-rc8+ #3
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1 04/01/2014
      Call Trace:
       dump_stack+0x54/0x6e
       print_trailer+0x12c/0x134
       check_bytes_and_report.cold+0x3e/0x69
       check_object+0x18c/0x250
       free_debug_processing+0xfe/0x230
       __slab_free+0x1c0/0x300
       kfree+0x1d3/0x220
       smb2_set_ea+0x27d/0x540
       cifs_xattr_set+0x57f/0x620
       __vfs_setxattr+0x4e/0x60
       __vfs_setxattr_noperm+0x4e/0x100
       __vfs_setxattr_locked+0xae/0xd0
       vfs_setxattr+0x4e/0xe0
       setxattr+0x12c/0x1a0
       path_setxattr+0xa4/0xc0
       __ia32_sys_lsetxattr+0x1d/0x20
       __do_fast_syscall_32+0x40/0x70
       do_fast_syscall_32+0x29/0x60
       do_SYSENTER_32+0x15/0x20
       entry_SYSENTER_32+0x9f/0xf2
    
    Fixes: 5517554e4313 ("cifs: Add support for writing attributes on SMB2+")
    Signed-off-by: Vladimir Zapolskiy <vladimir@tuxera.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0afdda28eb2b97997b0a66d380c066825d63791a
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Aug 4 11:37:29 2020 +0200

    xfrmi: drop ignore_df check before updating pmtu
    
    commit 45a36a18d01907710bad5258d81f76c18882ad88 upstream.
    
    xfrm interfaces currently test for !skb->ignore_df when deciding
    whether to update the pmtu on the skb's dst. Because of this, no pmtu
    exception is created when we do something like:
    
        ping -s 1438 <dest>
    
    By dropping this check, the pmtu exception will be created and the
    next ping attempt will work.
    
    Fixes: f203b76d7809 ("xfrm: Add virtual xfrm interfaces")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49af88ac6534f4d31dbd6ca157c38c37d3a72004
Author: Coly Li <colyli@suse.de>
Date:   Fri Oct 2 16:27:30 2020 +0800

    nvme-tcp: check page by sendpage_ok() before calling kernel_sendpage()
    
    commit 7d4194abfc4de13a2663c7fee6891de8360f7a52 upstream.
    
    Currently nvme_tcp_try_send_data() doesn't use kernel_sendpage() to
    send slab pages. But for pages allocated by __get_free_pages() without
    __GFP_COMP, which also have refcount as 0, they are still sent by
    kernel_sendpage() to remote end, this is problematic.
    
    The new introduced helper sendpage_ok() checks both PageSlab tag and
    page_count counter, and returns true if the checking page is OK to be
    sent by kernel_sendpage().
    
    This patch fixes the page checking issue of nvme_tcp_try_send_data()
    with sendpage_ok(). If sendpage_ok() returns true, send this page by
    kernel_sendpage(), otherwise use sock_no_sendpage to handle this page.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Cc: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Jan Kara <jack@suse.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Mikhail Skorzhinskii <mskorzhinskiy@solarflare.com>
    Cc: Philipp Reisner <philipp.reisner@linbit.com>
    Cc: Sagi Grimberg <sagi@grimberg.me>
    Cc: Vlastimil Babka <vbabka@suse.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15cac17d9d3906c098128e8ee3a9d8721991677a
Author: Coly Li <colyli@suse.de>
Date:   Fri Oct 2 16:27:31 2020 +0800

    tcp: use sendpage_ok() to detect misused .sendpage
    
    commit cf83a17edeeb36195596d2dae060a7c381db35f1 upstream.
    
    commit a10674bf2406 ("tcp: detecting the misuse of .sendpage for Slab
    objects") adds the checks for Slab pages, but the pages don't have
    page_count are still missing from the check.
    
    Network layer's sendpage method is not designed to send page_count 0
    pages neither, therefore both PageSlab() and page_count() should be
    both checked for the sending page. This is exactly what sendpage_ok()
    does.
    
    This patch uses sendpage_ok() in do_tcp_sendpages() to detect misused
    .sendpage, to make the code more robust.
    
    Fixes: a10674bf2406 ("tcp: detecting the misuse of .sendpage for Slab objects")
    Suggested-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Cc: Vasily Averin <vvs@virtuozzo.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d23dd3864b4c9231b4281d7894848362fe2fc06c
Author: Coly Li <colyli@suse.de>
Date:   Fri Oct 2 16:27:28 2020 +0800

    net: introduce helper sendpage_ok() in include/linux/net.h
    
    commit c381b07941adc2274ce552daf86c94701c5e265a upstream.
    
    The original problem was from nvme-over-tcp code, who mistakenly uses
    kernel_sendpage() to send pages allocated by __get_free_pages() without
    __GFP_COMP flag. Such pages don't have refcount (page_count is 0) on
    tail pages, sending them by kernel_sendpage() may trigger a kernel panic
    from a corrupted kernel heap, because these pages are incorrectly freed
    in network stack as page_count 0 pages.
    
    This patch introduces a helper sendpage_ok(), it returns true if the
    checking page,
    - is not slab page: PageSlab(page) is false.
    - has page refcount: page_count(page) is not zero
    
    All drivers who want to send page to remote end by kernel_sendpage()
    may use this helper to check whether the page is OK. If the helper does
    not return true, the driver should try other non sendpage method (e.g.
    sock_no_sendpage()) to handle the page.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Cc: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Jan Kara <jack@suse.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Mikhail Skorzhinskii <mskorzhinskiy@solarflare.com>
    Cc: Philipp Reisner <philipp.reisner@linbit.com>
    Cc: Sagi Grimberg <sagi@grimberg.me>
    Cc: Vlastimil Babka <vbabka@suse.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c62d335317cb9c25273a46fa80a42a6c8dd0108
Author: Hugh Dickins <hughd@google.com>
Date:   Fri Oct 9 20:07:59 2020 -0700

    mm/khugepaged: fix filemap page_to_pgoff(page) != offset
    
    commit 033b5d77551167f8c24ca862ce83d3e0745f9245 upstream.
    
    There have been elusive reports of filemap_fault() hitting its
    VM_BUG_ON_PAGE(page_to_pgoff(page) != offset, page) on kernels built
    with CONFIG_READ_ONLY_THP_FOR_FS=y.
    
    Suren has hit it on a kernel with CONFIG_READ_ONLY_THP_FOR_FS=y and
    CONFIG_NUMA is not set: and he has analyzed it down to how khugepaged
    without NUMA reuses the same huge page after collapse_file() failed
    (whereas NUMA targets its allocation to the respective node each time).
    And most of us were usually testing with CONFIG_NUMA=y kernels.
    
    collapse_file(old start)
      new_page = khugepaged_alloc_page(hpage)
      __SetPageLocked(new_page)
      new_page->index = start // hpage->index=old offset
      new_page->mapping = mapping
      xas_store(&xas, new_page)
    
                              filemap_fault
                                page = find_get_page(mapping, offset)
                                // if offset falls inside hpage then
                                // compound_head(page) == hpage
                                lock_page_maybe_drop_mmap()
                                  __lock_page(page)
    
      // collapse fails
      xas_store(&xas, old page)
      new_page->mapping = NULL
      unlock_page(new_page)
    
    collapse_file(new start)
      new_page = khugepaged_alloc_page(hpage)
      __SetPageLocked(new_page)
      new_page->index = start // hpage->index=new offset
      new_page->mapping = mapping // mapping becomes valid again
    
                                // since compound_head(page) == hpage
                                // page_to_pgoff(page) got changed
                                VM_BUG_ON_PAGE(page_to_pgoff(page) != offset)
    
    An initial patch replaced __SetPageLocked() by lock_page(), which did
    fix the race which Suren illustrates above.  But testing showed that it's
    not good enough: if the racing task's __lock_page() gets delayed long
    after its find_get_page(), then it may follow collapse_file(new start)'s
    successful final unlock_page(), and crash on the same VM_BUG_ON_PAGE.
    
    It could be fixed by relaxing filemap_fault()'s VM_BUG_ON_PAGE to a
    check and retry (as is done for mapping), with similar relaxations in
    find_lock_entry() and pagecache_get_page(): but it's not obvious what
    else might get caught out; and khugepaged non-NUMA appears to be unique
    in exposing a page to page cache, then revoking, without going through
    a full cycle of freeing before reuse.
    
    Instead, non-NUMA khugepaged_prealloc_page() release the old page
    if anyone else has a reference to it (1% of cases when I tested).
    
    Although never reported on huge tmpfs, I believe its find_lock_entry()
    has been at similar risk; but huge tmpfs does not rely on khugepaged
    for its normal working nearly so much as READ_ONLY_THP_FOR_FS does.
    
    Reported-by: Denis Lisov <dennis.lissov@gmail.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=206569
    Link: https://lore.kernel.org/linux-mm/?q=20200219144635.3b7417145de19b65f258c943%40linux-foundation.org
    Reported-by: Qian Cai <cai@lca.pw>
    Link: https://lore.kernel.org/linux-xfs/?q=20200616013309.GB815%40lca.pw
    Reported-and-analyzed-by: Suren Baghdasaryan <surenb@google.com>
    Fixes: 87c460a0bded ("mm/khugepaged: collapse_shmem() without freezing new_page")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Cc: stable@vger.kernel.org # v4.9+
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1317469fa05bc01da2da7fb78da51a51ed7a8a86
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 7 01:42:46 2020 -0700

    macsec: avoid use-after-free in macsec_handle_frame()
    
    commit c7cc9200e9b4a2ac172e990ef1975cd42975dad6 upstream.
    
    De-referencing skb after call to gro_cells_receive() is not allowed.
    We need to fetch skb->len earlier.
    
    Fixes: 5491e7c6b1a9 ("macsec: enable GRO and RPS on macsec devices")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20f96fee81c632a8c5e9a0f055b0d5f26b62efef
Author: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date:   Tue Oct 6 16:36:47 2020 -0700

    nvme-core: put ctrl ref when module ref get fail
    
    commit 4bab69093044ca81f394bd0780be1b71c5a4d308 upstream.
    
    When try_module_get() fails in the nvme_dev_open() it returns without
    releasing the ctrl reference which was taken earlier.
    
    Put the ctrl reference which is taken before calling the
    try_module_get() in the error return code path.
    
    Fixes: 52a3974feb1a "nvme-core: get/put ctrl and transport module in nvme_dev_open/release()"
    Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0f3c53869951431f7aa14849b2aca1836e31209
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Jun 24 07:23:50 2020 +0800

    btrfs: allow btrfs_truncate_block() to fallback to nocow for data space reservation
    
    commit 6d4572a9d71d5fc2affee0258d8582d39859188c upstream.
    
    [BUG]
    When the data space is exhausted, even if the inode has NOCOW attribute,
    we will still refuse to truncate unaligned range due to ENOSPC.
    
    The following script can reproduce it pretty easily:
      #!/bin/bash
    
      dev=/dev/test/test
      mnt=/mnt/btrfs
    
      umount $dev &> /dev/null
      umount $mnt &> /dev/null
    
      mkfs.btrfs -f $dev -b 1G
      mount -o nospace_cache $dev $mnt
      touch $mnt/foobar
      chattr +C $mnt/foobar
    
      xfs_io -f -c "pwrite -b 4k 0 4k" $mnt/foobar > /dev/null
      xfs_io -f -c "pwrite -b 4k 0 1G" $mnt/padding &> /dev/null
      sync
    
      xfs_io -c "fpunch 0 2k" $mnt/foobar
      umount $mnt
    
    Currently this will fail at the fpunch part.
    
    [CAUSE]
    Because btrfs_truncate_block() always reserves space without checking
    the NOCOW attribute.
    
    Since the writeback path follows NOCOW bit, we only need to bother the
    space reservation code in btrfs_truncate_block().
    
    [FIX]
    Make btrfs_truncate_block() follow btrfs_buffered_write() to try to
    reserve data space first, and fall back to NOCOW check only when we
    don't have enough space.
    
    Such always-try-reserve is an optimization introduced in
    btrfs_buffered_write(), to avoid expensive btrfs_check_can_nocow() call.
    
    This patch will export check_can_nocow() as btrfs_check_can_nocow(), and
    use it in btrfs_truncate_block() to fix the problem.
    
    Reported-by: Martin Doucha <martin.doucha@suse.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e531fd7f8b3a9feefcad7873e972fccb123c4b07
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 15 18:49:13 2020 +0100

    btrfs: fix RWF_NOWAIT write not failling when we need to cow
    
    commit 260a63395f90f67d6ab89e4266af9e3dc34a77e9 upstream.
    
    If we attempt to do a RWF_NOWAIT write against a file range for which we
    can only do NOCOW for a part of it, due to the existence of holes or
    shared extents for example, we proceed with the write as if it were
    possible to NOCOW the whole range.
    
    Example:
    
      $ mkfs.btrfs -f /dev/sdb
      $ mount /dev/sdb /mnt
    
      $ touch /mnt/sdj/bar
      $ chattr +C /mnt/sdj/bar
    
      $ xfs_io -d -c "pwrite -S 0xab -b 256K 0 256K" /mnt/bar
      wrote 262144/262144 bytes at offset 0
      256 KiB, 1 ops; 0.0003 sec (694.444 MiB/sec and 2777.7778 ops/sec)
    
      $ xfs_io -c "fpunch 64K 64K" /mnt/bar
      $ sync
    
      $ xfs_io -d -c "pwrite -N -V 1 -b 128K -S 0xfe 0 128K" /mnt/bar
      wrote 131072/131072 bytes at offset 0
      128 KiB, 1 ops; 0.0007 sec (160.051 MiB/sec and 1280.4097 ops/sec)
    
    This last write should fail with -EAGAIN since the file range from 64K to
    128K is a hole. On xfs it fails, as expected, but on ext4 it currently
    succeeds because apparently it is expensive to check if there are extents
    allocated for the whole range, but I'll check with the ext4 people.
    
    Fix the issue by checking if check_can_nocow() returns a number of
    NOCOW'able bytes smaller then the requested number of bytes, and if it
    does return -EAGAIN.
    
    Fixes: edf064e7c6fec3 ("btrfs: nowait aio support")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f90600e259bff46f0195df30c7a0571ea999a45
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Oct 23 21:57:27 2019 +0800

    btrfs: Ensure we trim ranges across block group boundary
    
    commit 6b7faadd985c990324b5b5bd18cc4ba5c395eb65 upstream.
    
    [BUG]
    When deleting large files (which cross block group boundary) with
    discard mount option, we find some btrfs_discard_extent() calls only
    trimmed part of its space, not the whole range:
    
      btrfs_discard_extent: type=0x1 start=19626196992 len=2144530432 trimmed=1073741824 ratio=50%
    
    type:           bbio->map_type, in above case, it's SINGLE DATA.
    start:          Logical address of this trim
    len:            Logical length of this trim
    trimmed:        Physically trimmed bytes
    ratio:          trimmed / len
    
    Thus leaving some unused space not discarded.
    
    [CAUSE]
    When discard mount option is specified, after a transaction is fully
    committed (super block written to disk), we begin to cleanup pinned
    extents in the following call chain:
    
    btrfs_commit_transaction()
    |- btrfs_finish_extent_commit()
       |- find_first_extent_bit(unpin, 0, &start, &end, EXTENT_DIRTY);
       |- btrfs_discard_extent()
    
    However, pinned extents are recorded in an extent_io_tree, which can
    merge adjacent extent states.
    
    When a large file gets deleted and it has adjacent file extents across
    block group boundary, we will get a large merged range like this:
    
          |<---    BG1    --->|<---      BG2     --->|
          |//////|<--   Range to discard   --->|/////|
    
    To discard that range, we have the following calls:
    
      btrfs_discard_extent()
      |- btrfs_map_block()
      |  Returned bbio will end at BG1's end. As btrfs_map_block()
      |  never returns result across block group boundary.
      |- btrfs_issuse_discard()
         Issue discard for each stripe.
    
    So we will only discard the range in BG1, not the remaining part in BG2.
    
    Furthermore, this bug is not that reliably observed, for above case, if
    there is no other extent in BG2, BG2 will be empty and btrfs will trim
    all space of BG2, covering up the bug.
    
    [FIX]
    - Allow __btrfs_map_block_for_discard() to modify @length parameter
      btrfs_map_block() uses its @length paramter to notify the caller how
      many bytes are mapped in current call.
      With __btrfs_map_block_for_discard() also modifing the @length,
      btrfs_discard_extent() now understands when to do extra trim.
    
    - Call btrfs_map_block() in a loop until we hit the range end Since we
      now know how many bytes are mapped each time, we can iterate through
      each block group boundary and issue correct trim for each range.
    
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Tested-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a0f5da2db3b47fb5adaa6d0833f80b75e4d46a8
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Oct 23 21:57:26 2019 +0800

    btrfs: volumes: Use more straightforward way to calculate map length
    
    commit 2d974619a77f106f3d1341686dea95c0eaad601f upstream.
    
    The old code goes:
    
            offset = logical - em->start;
            length = min_t(u64, em->len - offset, length);
    
    Where @length calculation is dependent on offset, it can take reader
    several more seconds to find it's just the same code as:
    
            offset = logical - em->start;
            length = min_t(u64, em->start + em->len - logical, length);
    
    Use above code to make the length calculate independent from other
    variable, thus slightly increase the readability.
    
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aefd1fa9f4d7b5765c0969d8a47e426c64c8687
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Jan 29 17:09:53 2020 +0000

    Btrfs: send, fix emission of invalid clone operations within the same file
    
    commit 9722b10148504c4153a74a9c89725af271e490fc upstream.
    
    When doing an incremental send and a file has extents shared with itself
    at different file offsets, it's possible for send to emit clone operations
    that will fail at the destination because the source range goes beyond the
    file's current size. This happens when the file size has increased in the
    send snapshot, there is a hole between the shared extents and both shared
    extents are at file offsets which are greater the file's size in the
    parent snapshot.
    
    Example:
    
      $ mkfs.btrfs -f /dev/sdb
      $ mount /dev/sdb /mnt/sdb
    
      $ xfs_io -f -c "pwrite -S 0xf1 0 64K" /mnt/sdb/foobar
      $ btrfs subvolume snapshot -r /mnt/sdb /mnt/sdb/base
      $ btrfs send -f /tmp/1.snap /mnt/sdb/base
    
      # Create a 320K extent at file offset 512K.
      $ xfs_io -c "pwrite -S 0xab 512K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0xcd 576K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0xef 640K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0x64 704K 64K" /mnt/sdb/foobar
      $ xfs_io -c "pwrite -S 0x73 768K 64K" /mnt/sdb/foobar
    
      # Clone part of that 320K extent into a lower file offset (192K).
      # This file offset is greater than the file's size in the parent
      # snapshot (64K). Also the clone range is a bit behind the offset of
      # the 320K extent so that we leave a hole between the shared extents.
      $ xfs_io -c "reflink /mnt/sdb/foobar 448K 192K 192K" /mnt/sdb/foobar
    
      $ btrfs subvolume snapshot -r /mnt/sdb /mnt/sdb/incr
      $ btrfs send -p /mnt/sdb/base -f /tmp/2.snap /mnt/sdb/incr
    
      $ mkfs.btrfs -f /dev/sdc
      $ mount /dev/sdc /mnt/sdc
    
      $ btrfs receive -f /tmp/1.snap /mnt/sdc
      $ btrfs receive -f /tmp/2.snap /mnt/sdc
      ERROR: failed to clone extents to foobar: Invalid argument
    
    The problem is that after processing the extent at file offset 256K, which
    refers to the first 128K of the 320K extent created by the buffered write
    operations, we have 'cur_inode_next_write_offset' set to 384K, which
    corresponds to the end offset of the partially shared extent (256K + 128K)
    and to the current file size in the receiver. Then when we process the
    extent at offset 512K, we do extent backreference iteration to figure out
    if we can clone the extent from some other inode or from the same inode,
    and we consider the extent at offset 256K of the same inode as a valid
    source for a clone operation, which is not correct because at that point
    the current file size in the receiver is 384K, which corresponds to the
    end of last processed extent (at file offset 256K), so using a clone
    source range from 256K to 256K + 320K is invalid because that goes past
    the current size of the file (384K) - this makes the receiver get an
    -EINVAL error when attempting the clone operation.
    
    So fix this by excluding clone sources that have a range that goes beyond
    the current file size in the receiver when iterating extent backreferences.
    
    A test case for fstests follows soon.
    
    Fixes: 11f2069c113e02 ("Btrfs: send, allow clone operations within the same file")
    CC: stable@vger.kernel.org # 5.5+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19d8412679f2c73b880ab3ff78ad2e6b7589f8a5
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Oct 30 12:23:11 2019 +0000

    Btrfs: send, allow clone operations within the same file
    
    commit 11f2069c113e02971b8db6fda62f9b9cd31a030f upstream.
    
    For send we currently skip clone operations when the source and
    destination files are the same. This is so because clone didn't support
    this case in its early days, but support for it was added back in May
    2013 by commit a96fbc72884fcb ("Btrfs: allow file data clone within a
    file"). This change adds support for it.
    
    Example:
    
      $ mkfs.btrfs -f /dev/sdd
      $ mount /dev/sdd /mnt/sdd
    
      $ xfs_io -f -c "pwrite -S 0xab -b 64K 0 64K" /mnt/sdd/foobar
      $ xfs_io -c "reflink /mnt/sdd/foobar 0 64K 64K" /mnt/sdd/foobar
    
      $ btrfs subvolume snapshot -r /mnt/sdd /mnt/sdd/snap
    
      $ mkfs.btrfs -f /dev/sde
      $ mount /dev/sde /mnt/sde
    
      $ btrfs send /mnt/sdd/snap | btrfs receive /mnt/sde
    
    Without this change file foobar at the destination has a single 128Kb
    extent:
    
      $ filefrag -v /mnt/sde/snap/foobar
      Filesystem type is: 9123683e
      File size of /mnt/sde/snap/foobar is 131072 (32 blocks of 4096 bytes)
       ext:     logical_offset:        physical_offset: length:   expected: flags:
         0:        0..      31:          0..        31:     32:             last,unknown_loc,delalloc,eof
      /mnt/sde/snap/foobar: 1 extent found
    
    With this we get a single 64Kb extent that is shared at file offsets 0
    and 64K, just like in the source filesystem:
    
      $ filefrag -v /mnt/sde/snap/foobar
      Filesystem type is: 9123683e
      File size of /mnt/sde/snap/foobar is 131072 (32 blocks of 4096 bytes)
       ext:     logical_offset:        physical_offset: length:   expected: flags:
         0:        0..      15:       3328..      3343:     16:             shared
         1:       16..      31:       3328..      3343:     16:       3344: last,shared,eof
      /mnt/sde/snap/foobar: 2 extents found
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f02dc39bbb2020de61925b2641661b7347ff4526
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Jun 29 11:25:43 2020 -0500

    arm64: dts: stratix10: add status to qspi dts node
    
    commit 263a0269a59c0b4145829462a107fe7f7327105f upstream.
    
    Add status = "okay" to QSPI node.
    
    Fixes: 0cb140d07fc75 ("arm64: dts: stratix10: Add QSPI support for Stratix10")
    Cc: linux-stable <stable@vger.kernel.org> # >= v5.6
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    [iwamatsu: Drop arch/arm64/boot/dts/altera/socfpga_stratix10_socdk_nand.dts]
    Signed-off-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8e1d16e0b89be064bd97094af58dee7502858c7
Author: Jean Delvare <jdelvare@suse.de>
Date:   Thu Sep 10 11:57:08 2020 +0200

    i2c: i801: Exclude device from suspend direct complete optimization
    
    commit 845b89127bc5458d0152a4d63f165c62a22fcb70 upstream.
    
    By default, PCI drivers with runtime PM enabled will skip the calls
    to suspend and resume on system PM. For this driver, we don't want
    that, as we need to perform additional steps for system PM to work
    properly on all systems. So instruct the PM core to not skip these
    calls.
    
    Fixes: a9c8088c7988 ("i2c: i801: Don't restore config registers on runtime PM")
    Reported-by: Volker Rümelin <volker.ruemelin@googlemail.com>
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    [iwamatsu: Use DPM_FLAG_NEVER_SKIP instead of DPM_FLAG_NO_DIRECT_COMPLETE]
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2118c7ba5f2a08df126d59006e2cf8f7cd68aecb
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Thu Mar 5 10:37:12 2020 +0200

    perf top: Fix stdio interface input handling with glibc 2.28+
    
    commit 29b4f5f188571c112713c35cc87eefb46efee612 upstream.
    
    Since glibc 2.28 when running 'perf top --stdio', input handling no
    longer works, but hitting any key always just prints the "Mapped keys"
    help text.
    
    To fix it, call clearerr() in the display_thread() loop to clear any EOF
    sticky errors, as instructed in the glibc NEWS file
    (https://sourceware.org/git/?p=glibc.git;a=blob;f=NEWS):
    
     * All stdio functions now treat end-of-file as a sticky condition.  If you
       read from a file until EOF, and then the file is enlarged by another
       process, you must call clearerr or another function with the same effect
       (e.g. fseek, rewind) before you can read the additional data.  This
       corrects a longstanding C99 conformance bug.  It is most likely to affect
       programs that use stdio to read interactive input from a terminal.
       (Bug #1190.)
    
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200305083714.9381-2-tommi.t.rantala@nokia.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2499c15115ac2e426df5f1075f3968293d1d5f3f
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Thu Apr 23 14:53:40 2020 +0300

    perf test session topology: Fix data path
    
    commit dbd660e6b2884b864d2642d930a163d3bcebe4be upstream.
    
    Commit 2d4f27999b88 ("perf data: Add global path holder") missed path
    conversion in tests/topology.c, causing the "Session topology" testcase
    to "hang" (waits forever for input from stdin) when doing "ssh $VM perf
    test".
    
    Can be reproduced by running "cat | perf test topo", and crashed by
    replacing cat with true:
    
      $ true | perf test -v topo
      40: Session topology                                      :
      --- start ---
      test child forked, pid 3638
      templ file: /tmp/perf-test-QPvAch
      incompatible file format
      incompatible file format (rerun with -v to learn more)
      free(): invalid pointer
      test child interrupted
      ---- end ----
      Session topology: FAILED!
    
    Committer testing:
    
    Reproduced the above result before the patch and after it is back
    working:
    
      # true | perf test -v topo
      41: Session topology                                      :
      --- start ---
      test child forked, pid 19374
      templ file: /tmp/perf-test-YOTEQg
      CPU 0, core 0, socket 0
      CPU 1, core 1, socket 0
      CPU 2, core 2, socket 0
      CPU 3, core 3, socket 0
      CPU 4, core 0, socket 0
      CPU 5, core 1, socket 0
      CPU 6, core 2, socket 0
      CPU 7, core 3, socket 0
      test child finished with 0
      ---- end ----
      Session topology: Ok
      #
    
    Fixes: 2d4f27999b88 ("perf data: Add global path holder")
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Mamatha Inamdar <mamatha4@linux.vnet.ibm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
    Link: http://lore.kernel.org/lkml/20200423115341.562782-1-tommi.t.rantala@nokia.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c1847aa4932d988af89a12b5bc63a444ec5c5df
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Jul 13 11:12:54 2020 +0900

    driver core: Fix probe_count imbalance in really_probe()
    
    commit b292b50b0efcc7095d8bf15505fba6909bb35dce upstream.
    
    syzbot is reporting hung task in wait_for_device_probe() [1]. At least,
    we always need to decrement probe_count if we incremented probe_count in
    really_probe().
    
    However, since I can't find "Resources present before probing" message in
    the console log, both "this message simply flowed off" and "syzbot is not
    hitting this path" will be possible. Therefore, while we are at it, let's
    also prepare for concurrent wait_for_device_probe() calls by replacing
    wake_up() with wake_up_all().
    
    [1] https://syzkaller.appspot.com/bug?id=25c833f1983c9c1d512f4ff860dd0d7f5a2e2c0f
    
    Reported-by: syzbot <syzbot+805f5f6ae37411f15b64@syzkaller.appspotmail.com>
    Fixes: 7c35e699c88bd607 ("driver core: Print device when resources present in really_probe()")
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20200713021254.3444-1-penguin-kernel@I-love.SAKURA.ne.jp
    [iwamatsu: Drop patch for deferred_probe_timeout_work_func()]
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd2647f9d687295c96865d0713e20c79924c6d5
Author: Aaron Ma <aaron.ma@canonical.com>
Date:   Sat Oct 3 01:09:16 2020 +0800

    platform/x86: thinkpad_acpi: re-initialize ACPI buffer size when reuse
    
    commit 720ef73d1a239e33c3ad8fac356b9b1348e68aaf upstream.
    
    Evaluating ACPI _BCL could fail, then ACPI buffer size will be set to 0.
    When reuse this ACPI buffer, AE_BUFFER_OVERFLOW will be triggered.
    
    Re-initialize buffer size will make ACPI evaluate successfully.
    
    Fixes: 46445b6b896fd ("thinkpad-acpi: fix handle locate for video and query of _BCL")
    Signed-off-by: Aaron Ma <aaron.ma@canonical.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da4cdc87dfeb596da0fa2e14d70e4f2648bee839
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Sep 30 15:19:05 2020 +0200

    platform/x86: intel-vbtn: Switch to an allow-list for SW_TABLET_MODE reporting
    
    commit 8169bd3e6e193497cab781acddcff8fde5d0c416 upstream.
    
    2 recent commits:
    cfae58ed681c ("platform/x86: intel-vbtn: Only blacklist SW_TABLET_MODE
    on the 9 / "Laptop" chasis-type")
    1fac39fd0316 ("platform/x86: intel-vbtn: Also handle tablet-mode switch on
    "Detachable" and "Portable" chassis-types")
    
    Enabled reporting of SW_TABLET_MODE on more devices since the vbtn ACPI
    interface is used by the firmware on some of those devices to report this.
    
    Testing has shown that unconditionally enabling SW_TABLET_MODE reporting
    on all devices with a chassis type of 8 ("Portable") or 10 ("Notebook")
    which support the VGBS method is a very bad idea.
    
    Many of these devices are normal laptops (non 2-in-1) models with a VGBS
    which always returns 0, which we translate to SW_TABLET_MODE=1. This in
    turn causes userspace (libinput) to suppress events from the builtin
    keyboard and touchpad, making the laptop essentially unusable.
    
    Since the problem of wrongly reporting SW_TABLET_MODE=1 in combination
    with libinput, leads to a non-usable system. Where as OTOH many people will
    not even notice when SW_TABLET_MODE is not being reported, this commit
    changes intel_vbtn_has_switches() to use a DMI based allow-list.
    
    The new DMI based allow-list matches on the 31 ("Convertible") and
    32 ("Detachable") chassis-types, as these clearly are 2-in-1s and
    so far if they support the intel-vbtn ACPI interface they all have
    properly working SW_TABLET_MODE reporting.
    
    Besides these 2 generic matches, it also contains model specific matches
    for 2-in-1 models which use a different chassis-type and which are known
    to have properly working SW_TABLET_MODE reporting.
    
    This has been tested on the following 2-in-1 devices:
    
    Dell Venue 11 Pro 7130 vPro
    HP Pavilion X2 10-p002nd
    HP Stream x360 Convertible PC 11
    Medion E1239T
    
    Fixes: cfae58ed681c ("platform/x86: intel-vbtn: Only blacklist SW_TABLET_MODE on the 9 / "Laptop" chasis-type")
    BugLink: https://forum.manjaro.org/t/keyboard-and-touchpad-only-work-on-kernel-5-6/22668
    BugLink: https://bugzilla.opensuse.org/show_bug.cgi?id=1175599
    Cc: Barnabás Pőcze <pobrn@protonmail.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6440fb9bda91c7bddad15d5dc9b0dd7fec652174
Author: Tony Ambardar <tony.ambardar@gmail.com>
Date:   Sat Sep 19 22:01:34 2020 -0700

    bpf: Prevent .BTF section elimination
    
    commit 65c204398928f9c79f1a29912b410439f7052635 upstream.
    
    Systems with memory or disk constraints often reduce the kernel footprint
    by configuring LD_DEAD_CODE_DATA_ELIMINATION. However, this can result in
    removal of any BTF information.
    
    Use the KEEP() macro to preserve the BTF data as done with other important
    sections, while still allowing for smaller kernels.
    
    Fixes: 90ceddcb4950 ("bpf: Support llvm-objcopy for vmlinux BTF")
    Signed-off-by: Tony Ambardar <Tony.Ambardar@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/a635b5d3e2da044e7b51ec1315e8910fbce0083f.1600417359.git.Tony.Ambardar@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67a57230b4bfb377cd479c9b32d1e2ab70bc96d1
Author: Tony Ambardar <tony.ambardar@gmail.com>
Date:   Sat Sep 19 22:01:33 2020 -0700

    bpf: Fix sysfs export of empty BTF section
    
    commit e23bb04b0c938588eae41b7f4712b722290ed2b8 upstream.
    
    If BTF data is missing or removed from the ELF section it is still exported
    via sysfs as a zero-length file:
    
      root@OpenWrt:/# ls -l /sys/kernel/btf/vmlinux
      -r--r--r--    1 root    root    0 Jul 18 02:59 /sys/kernel/btf/vmlinux
    
    Moreover, reads from this file succeed and leak kernel data:
    
      root@OpenWrt:/# hexdump -C /sys/kernel/btf/vmlinux|head -10
      000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
      *
      000cc0 00 00 00 00 00 00 00 00 00 00 00 00 80 83 b0 80 |................|
      000cd0 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
      000ce0 00 00 00 00 00 00 00 00 00 00 00 00 57 ac 6e 9d |............W.n.|
      000cf0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
      *
      002650 00 00 00 00 00 00 00 10 00 00 00 01 00 00 00 01 |................|
      002660 80 82 9a c4 80 85 97 80 81 a9 51 68 00 00 00 02 |..........Qh....|
      002670 80 25 44 dc 80 85 97 80 81 a9 50 24 81 ab c4 60 |.%D.......P$...`|
    
    This situation was first observed with kernel 5.4.x, cross-compiled for a
    MIPS target system. Fix by adding a sanity-check for export of zero-length
    data sections.
    
    Fixes: 341dfcf8d78e ("btf: expose BTF info through sysfs")
    Signed-off-by: Tony Ambardar <Tony.Ambardar@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Link: https://lore.kernel.org/bpf/b38db205a66238f70823039a8c531535864eaac5.1600417359.git.Tony.Ambardar@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bd694ccfd44d6b4b5ae004ea0a1bfe3f13b7f35
Author: Tom Rix <trix@redhat.com>
Date:   Sun Sep 13 12:02:03 2020 -0700

    platform/x86: thinkpad_acpi: initialize tp_nvram_state variable
    
    commit 5f38b06db8af3ed6c2fc1b427504ca56fae2eacc upstream.
    
    clang static analysis flags this represenative problem
    thinkpad_acpi.c:2523:7: warning: Branch condition evaluates
      to a garbage value
                    if (!oldn->mute ||
                        ^~~~~~~~~~~
    
    In hotkey_kthread() mute is conditionally set by hotkey_read_nvram()
    but unconditionally checked by hotkey_compare_and_issue_event().
    So the tp_nvram_state variable s[2] needs to be initialized.
    
    Fixes: 01e88f25985d ("ACPI: thinkpad-acpi: add CMOS NVRAM polling for hot keys (v9)")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: mark gross <mgross@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d101961ce588aae29b2e00f1ef44e94e4dcfd2b9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Sep 12 11:35:32 2020 +0200

    platform/x86: intel-vbtn: Fix SW_TABLET_MODE always reporting 1 on the HP Pavilion 11 x360
    
    commit d823346876a970522ff9e4d2b323c9b734dcc4de upstream.
    
    Commit cfae58ed681c ("platform/x86: intel-vbtn: Only blacklist
    SW_TABLET_MODE on the 9 / "Laptop" chasis-type") restored SW_TABLET_MODE
    reporting on the HP stream x360 11 series on which it was previously broken
    by commit de9647efeaa9 ("platform/x86: intel-vbtn: Only activate tablet
    mode switch on 2-in-1's").
    
    It turns out that enabling SW_TABLET_MODE reporting on devices with a
    chassis-type of 10 ("Notebook") causes SW_TABLET_MODE to always report 1
    at boot on the HP Pavilion 11 x360, which causes libinput to disable the
    kbd and touchpad.
    
    The HP Pavilion 11 x360's ACPI VGBS method sets bit 4 instead of bit 6 when
    NOT in tablet mode at boot. Inspecting all the DSDTs in my DSDT collection
    shows only one other model, the Medion E1239T ever setting bit 4 and it
    always sets this together with bit 6.
    
    So lets treat bit 4 as a second bit which when set indicates the device not
    being in tablet-mode, as we already do for bit 6.
    
    While at it also prefix all VGBS constant defines with "VGBS_".
    
    Fixes: cfae58ed681c ("platform/x86: intel-vbtn: Only blacklist SW_TABLET_MODE on the 9 / "Laptop" chasis-type")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mark Gross <mgross@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2293272345ff9942531657839fe6a2650cb9e3e0
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Aug 23 19:12:11 2020 +0800

    Platform: OLPC: Fix memleak in olpc_ec_probe
    
    commit 4fd9ac6bd3044734a7028bd993944c3617d1eede upstream.
    
    When devm_regulator_register() fails, ec should be
    freed just like when olpc_ec_cmd() fails.
    
    Fixes: 231c0c216172a ("Platform: OLPC: Add a regulator for the DCON")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce8432912f1b9d82cf570b581ed818f34503c850
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 5 10:56:22 2020 -0700

    usermodehelper: reset umask to default before executing user process
    
    commit 4013c1496c49615d90d36b9d513eee8e369778e9 upstream.
    
    Kernel threads intentionally do CLONE_FS in order to follow any changes
    that 'init' does to set up the root directory (or cwd).
    
    It is admittedly a bit odd, but it avoids the situation where 'init'
    does some extensive setup to initialize the system environment, and then
    we execute a usermode helper program, and it uses the original FS setup
    from boot time that may be very limited and incomplete.
    
    [ Both Al Viro and Eric Biederman point out that 'pivot_root()' will
      follow the root regardless, since it fixes up other users of root (see
      chroot_fs_refs() for details), but overmounting root and doing a
      chroot() would not. ]
    
    However, Vegard Nossum noticed that the CLONE_FS not only means that we
    follow the root and current working directories, it also means we share
    umask with whatever init changed it to. That wasn't intentional.
    
    Just reset umask to the original default (0022) before actually starting
    the usermode helper program.
    
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Acked-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 920a61ddd3b5787957c1dec7a84b426e629b5051
Author: Greg Kurz <groug@kaod.org>
Date:   Sat Oct 3 12:02:03 2020 +0200

    vhost: Use vhost_get_used_size() in vhost_vring_set_addr()
    
    commit 71878fa46c7e3b40fa7b3f1b6e4ba3f92f1ac359 upstream.
    
    The open-coded computation of the used size doesn't take the event
    into account when the VIRTIO_RING_F_EVENT_IDX feature is present.
    Fix that by using vhost_get_used_size().
    
    Fixes: 8ea8cf89e19a ("vhost: support event index")
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Link: https://lore.kernel.org/r/160171932300.284610.11846106312938909461.stgit@bahia.lan
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57b47abc1a4a337e009a05845b2df7d9fc2103e4
Author: Greg Kurz <groug@kaod.org>
Date:   Sat Oct 3 12:01:52 2020 +0200

    vhost: Don't call access_ok() when using IOTLB
    
    commit 0210a8db2aeca393fb3067e234967877e3146266 upstream.
    
    When the IOTLB device is enabled, the vring addresses we get
    from userspace are GIOVAs. It is thus wrong to pass them down
    to access_ok() which only takes HVAs.
    
    Access validation is done at prefetch time with IOTLB. Teach
    vq_access_ok() about that by moving the (vq->iotlb) check
    from vhost_vq_access_ok() to vq_access_ok(). This prevents
    vhost_vring_set_addr() to fail when verifying the accesses.
    No behavior change for vhost_vq_access_ok().
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1883084
    Fixes: 6b1e6cc7855b ("vhost: new device IOTLB API")
    Cc: jasowang@redhat.com
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Link: https://lore.kernel.org/r/160171931213.284610.2052489816407219136.stgit@bahia.lan
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 456d77c1bdfa560ead369cb092e14715e2d3573d
Author: Karol Herbst <kherbst@redhat.com>
Date:   Wed Oct 7 00:05:28 2020 +0200

    drm/nouveau/mem: guard against NULL pointer access in mem_del
    
    commit d10285a25e29f13353bbf7760be8980048c1ef2f upstream.
    
    other drivers seems to do something similar
    
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Cc: dri-devel <dri-devel@lists.freedesktop.org>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201006220528.13925-2-kherbst@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ece83bf754f758bf457c2b4ef0a9d456da3d0c6
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Wed Oct 7 09:24:01 2020 +0530

    net: wireless: nl80211: fix out-of-bounds access in nl80211_del_key()
    
    commit 3dc289f8f139997f4e9d3cfccf8738f20d23e47b upstream.
    
    In nl80211_parse_key(), key.idx is first initialized as -1.
    If this value of key.idx remains unmodified and gets returned, and
    nl80211_key_allowed() also returns 0, then rdev_del_key() gets called
    with key.idx = -1.
    This causes an out-of-bounds array access.
    
    Handle this issue by checking if the value of key.idx after
    nl80211_parse_key() is called and return -EINVAL if key.idx < 0.
    
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+b1bb342d1d097516cbda@syzkaller.appspotmail.com
    Tested-by: syzbot+b1bb342d1d097516cbda@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20201007035401.9522-1-anant.thazhemadam@gmail.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee413b2915bfdcb83972f9fd426409600eedc309
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Wed Oct 7 11:16:35 2020 +0800

    io_uring: Fix double list add in io_queue_async_work()
    
    If we queue work in io_poll_wake(), it will leads to list double
    add. So we should add the list when the callback func is the
    io_sq_wq_submit_work.
    
    The following oops was seen:
    
        list_add double add: new=ffff9ca6a8f1b0e0, prev=ffff9ca62001cee8,
        next=ffff9ca6a8f1b0e0.
        ------------[ cut here ]------------
        kernel BUG at lib/list_debug.c:31!
        Call Trace:
         <IRQ>
         io_poll_wake+0xf3/0x230
         __wake_up_common+0x91/0x170
         __wake_up_common_lock+0x7a/0xc0
         io_commit_cqring+0xea/0x280
         ? blkcg_iolatency_done_bio+0x2b/0x610
         io_cqring_add_event+0x3e/0x60
         io_complete_rw+0x58/0x80
         dio_complete+0x106/0x250
         blk_update_request+0xa0/0x3b0
         blk_mq_end_request+0x1a/0x110
         blk_mq_complete_request+0xd0/0xe0
         nvme_irq+0x129/0x270 [nvme]
         __handle_irq_event_percpu+0x7b/0x190
         handle_irq_event_percpu+0x30/0x80
         handle_irq_event+0x3c/0x60
         handle_edge_irq+0x91/0x1e0
         do_IRQ+0x4d/0xd0
         common_interrupt+0xf/0xf
    
    Fixes: 1c4404efcf2c ("io_uring: make sure async workqueue is canceled on exit")
    Reported-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efb1cef27d591db4a6258fed069163aef50ca7dd
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Wed Oct 7 11:16:34 2020 +0800

    io_uring: Fix remove irrelevant req from the task_list
    
    If the process 0 has been initialized io_uring is complete, and
    then fork process 1. If process 1 exits and it leads to delete
    all reqs from the task_list. If we kill process 0. We will not
    send SIGINT signal to the kworker. So we can not remove the req
    from the task_list. The io_sq_wq_submit_work() can do that for
    us.
    
    Fixes: 1c4404efcf2c ("io_uring: make sure async workqueue is canceled on exit")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75524f753318f61bcf974a3062973aff3a40394d
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Wed Oct 7 11:16:33 2020 +0800

    io_uring: Fix missing smp_mb() in io_cancel_async_work()
    
    The store to req->flags and load req->work_task should not be
    reordering in io_cancel_async_work(). We should make sure that
    either we store REQ_F_CANCE flag to req->flags or we see the
    req->work_task setted in io_sq_wq_submit_work().
    
    Fixes: 1c4404efcf2c ("io_uring: make sure async workqueue is canceled on exit")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9e81b2fb3724a0e4cc658a78b8905aabdb3ff44
Author: Yinyin Zhu <zhuyinyin@bytedance.com>
Date:   Wed Oct 7 11:16:32 2020 +0800

    io_uring: Fix resource leaking when kill the process
    
    The commit
    
      1c4404efcf2c0> ("<io_uring: make sure async workqueue is canceled on exit>")
    
    doesn't solve the resource leak problem totally! When kworker is doing a
    io task for the io_uring, The process which submitted the io task has
    received a SIGKILL signal from the user. Then the io_cancel_async_work
    function could have sent a SIGINT signal to the kworker, but the judging
    condition is wrong. So it doesn't send a SIGINT signal to the kworker,
    then caused the resource leaking problem.
    
    Why the juding condition is wrong? The process is a multi-threaded process,
    we call the thread of the process which has submitted the io task Thread1.
    So the req->task is the current macro of the Thread1. when all the threads
    of the process have done exit procedure, the last thread will call the
    io_cancel_async_work, but the last thread may not the Thread1, so the task
    is not equal and doesn't send the SIGINT signal. To fix this bug, we alter
    the task attribute of the req with struct files_struct. And check the files
    instead.
    
    Fixes: 1c4404efcf2c0 ("io_uring: make sure async workqueue is canceled on exit")
    Signed-off-by: Yinyin Zhu <zhuyinyin@bytedance.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f46ef7bec86d13ac89c7976d8cb41612cd179f2
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Sep 22 09:29:31 2020 +0200

    Revert "ravb: Fixed to be able to unload modules"
    
    commit 77972b55fb9d35d4a6b0abca99abffaa4ec6a85b upstream.
    
    This reverts commit 1838d6c62f57836639bd3d83e7855e0ee4f6defc.
    
    This commit moved the ravb_mdio_init() call (and thus the
    of_mdiobus_register() call) from the ravb_probe() to the ravb_open()
    call.  This causes a regression during system resume (s2idle/s2ram), as
    new PHY devices cannot be bound while suspended.
    
    During boot, the Micrel PHY is detected like this:
    
        Micrel KSZ9031 Gigabit PHY e6800000.ethernet-ffffffff:00: attached PHY driver [Micrel KSZ9031 Gigabit PHY] (mii_bus:phy_addr=e6800000.ethernet-ffffffff:00, irq=228)
        ravb e6800000.ethernet eth0: Link is Up - 1Gbps/Full - flow control off
    
    During system suspend, (A) defer_all_probes is set to true, and (B)
    usermodehelper_disabled is set to UMH_DISABLED, to avoid drivers being
    probed while suspended.
    
      A. If CONFIG_MODULES=n, phy_device_register() calling device_add()
         merely adds the device, but does not probe it yet, as
         really_probe() returns early due to defer_all_probes being set:
    
           dpm_resume+0x128/0x4f8
             device_resume+0xcc/0x1b0
               dpm_run_callback+0x74/0x340
                 ravb_resume+0x190/0x1b8
                   ravb_open+0x84/0x770
                     of_mdiobus_register+0x1e0/0x468
                       of_mdiobus_register_phy+0x1b8/0x250
                         of_mdiobus_phy_device_register+0x178/0x1e8
                           phy_device_register+0x114/0x1b8
                             device_add+0x3d4/0x798
                               bus_probe_device+0x98/0xa0
                                 device_initial_probe+0x10/0x18
                                   __device_attach+0xe4/0x140
                                     bus_for_each_drv+0x64/0xc8
                                       __device_attach_driver+0xb8/0xe0
                                         driver_probe_device.part.11+0xc4/0xd8
                                           really_probe+0x32c/0x3b8
    
         Later, phy_attach_direct() notices no PHY driver has been bound,
         and falls back to the Generic PHY, leading to degraded operation:
    
           Generic PHY e6800000.ethernet-ffffffff:00: attached PHY driver [Generic PHY] (mii_bus:phy_addr=e6800000.ethernet-ffffffff:00, irq=POLL)
           ravb e6800000.ethernet eth0: Link is Up - 1Gbps/Full - flow control off
    
      B. If CONFIG_MODULES=y, request_module() returns early with -EBUSY due
         to UMH_DISABLED, and MDIO initialization fails completely:
    
           mdio_bus e6800000.ethernet-ffffffff:00: error -16 loading PHY driver module for ID 0x00221622
           ravb e6800000.ethernet eth0: failed to initialize MDIO
           PM: dpm_run_callback(): ravb_resume+0x0/0x1b8 returns -16
           PM: Device e6800000.ethernet failed to resume: error -16
    
         Ignoring -EBUSY in phy_request_driver_module(), like was done for
         -ENOENT in commit 21e194425abd65b5 ("net: phy: fix issue with loading
         PHY driver w/o initramfs"), would makes it fall back to the Generic
         PHY, like in the CONFIG_MODULES=n case.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b2fcd82c0ca23f6fa01298c0d7b59eb4efbaf48
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Sep 24 09:43:48 2020 -0400

    fbcon: Fix global-out-of-bounds read in fbcon_get_font()
    
    commit 5af08640795b2b9a940c9266c0260455377ae262 upstream.
    
    fbcon_get_font() is reading out-of-bounds. A malicious user may resize
    `vc->vc_font.height` to a large value, causing fbcon_get_font() to
    read out of `fontdata`.
    
    fbcon_get_font() handles both built-in and user-provided fonts.
    Fortunately, recently we have added FONT_EXTRA_WORDS support for built-in
    fonts, so fix it by adding range checks using FNTSIZE().
    
    This patch depends on patch "fbdev, newport_con: Move FONT_EXTRA_WORDS
    macros into linux/font.h", and patch "Fonts: Support FONT_EXTRA_WORDS
    macros for built-in fonts".
    
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: syzbot+29d4ed7f3bdedf2aa2fd@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=08b8be45afea11888776f897895aef9ad1c3ecfd
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/b34544687a1a09d6de630659eb7a773f4953238b.1600953813.git.yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f51ec3fd71284531205981858b192970ec46770e
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Sep 24 09:42:22 2020 -0400

    Fonts: Support FONT_EXTRA_WORDS macros for built-in fonts
    
    commit 6735b4632def0640dbdf4eb9f99816aca18c4f16 upstream.
    
    syzbot has reported an issue in the framebuffer layer, where a malicious
    user may overflow our built-in font data buffers.
    
    In order to perform a reliable range check, subsystems need to know
    `FONTDATAMAX` for each built-in font. Unfortunately, our font descriptor,
    `struct console_font` does not contain `FONTDATAMAX`, and is part of the
    UAPI, making it infeasible to modify it.
    
    For user-provided fonts, the framebuffer layer resolves this issue by
    reserving four extra words at the beginning of data buffers. Later,
    whenever a function needs to access them, it simply uses the following
    macros:
    
    Recently we have gathered all the above macros to <linux/font.h>. Let us
    do the same thing for built-in fonts, prepend four extra words (including
    `FONTDATAMAX`) to their data buffers, so that subsystems can use these
    macros for all fonts, no matter built-in or user-provided.
    
    This patch depends on patch "fbdev, newport_con: Move FONT_EXTRA_WORDS
    macros into linux/font.h".
    
    Cc: stable@vger.kernel.org
    Link: https://syzkaller.appspot.com/bug?id=08b8be45afea11888776f897895aef9ad1c3ecfd
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/ef18af00c35fb3cc826048a5f70924ed6ddce95b.1600953813.git.yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eebe3685701bcd4b437f2ddd2142888b1fb39aeb
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Sep 24 09:40:53 2020 -0400

    fbdev, newport_con: Move FONT_EXTRA_WORDS macros into linux/font.h
    
    commit bb0890b4cd7f8203e3aa99c6d0f062d6acdaad27 upstream.
    
    drivers/video/console/newport_con.c is borrowing FONT_EXTRA_WORDS macros
    from drivers/video/fbdev/core/fbcon.h. To keep things simple, move all
    definitions into <linux/font.h>.
    
    Since newport_con now uses four extra words, initialize the fourth word in
    newport_set_font() properly.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/7fb8bc9b0abc676ada6b7ac0e0bd443499357267.1600953813.git.yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
