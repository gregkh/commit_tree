commit f77982e6911294725180897ff7244446ab708381
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 17 11:37:54 2018 +0200

    Linux 4.9.113

commit b2660f35d3da4d960b935c9b683b92511d4d54b4
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri May 4 10:58:09 2018 -0600

    loop: remember whether sysfs_create_group() was done
    
    commit d3349b6b3c373ac1fbfb040b810fcee5e2adc7e0 upstream.
    
    syzbot is hitting WARN() triggered by memory allocation fault
    injection [1] because loop module is calling sysfs_remove_group()
    when sysfs_create_group() failed.
    Fix this by remembering whether sysfs_create_group() succeeded.
    
    [1] https://syzkaller.appspot.com/bug?id=3f86c0edf75c86d2633aeb9dd69eccc70bc7e90b
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+9f03168400f56df89dbc6f1751f4458fe739ff29@syzkaller.appspotmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Renamed sysfs_ready -> sysfs_inited.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 684db31e7471c39aad887820ff62804dac60b444
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed May 23 08:22:11 2018 +0300

    RDMA/ucm: Mark UCM interface as BROKEN
    
    commit 7a8690ed6f5346f6738971892205e91d39b6b901 upstream.
    
    In commit 357d23c811a7 ("Remove the obsolete libibcm library")
    in rdma-core [1], we removed obsolete library which used the
    /dev/infiniband/ucmX interface.
    
    Following multiple syzkaller reports about non-sanitized
    user input in the UCMA module, the short audit reveals the same
    issues in UCM module too.
    
    It is better to disable this interface in the kernel,
    before syzkaller team invests time and energy to harden
    this unused interface.
    
    [1] https://github.com/linux-rdma/rdma-core/pull/279
    
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34f841a3c3db03dd7de1157c3b1bda07b50d3259
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat May 26 09:59:36 2018 +0900

    PM / hibernate: Fix oops at snapshot_write()
    
    commit fc14eebfc20854a38fd9f1d93a42b1783dad4d17 upstream.
    
    syzbot is reporting NULL pointer dereference at snapshot_write() [1].
    This is because data->handle is zero-cleared by ioctl(SNAPSHOT_FREE).
    Fix this by checking data_of(data->handle) != NULL before using it.
    
    [1] https://syzkaller.appspot.com/bug?id=828a3c71bd344a6de8b6a31233d51a72099f27fd
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+ae590932da6e45d6564d@syzkaller.appspotmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3cf1cc9ed9230560e61306e13c88eccb5189c1b
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon May 7 11:37:58 2018 -0400

    loop: add recursion validation to LOOP_CHANGE_FD
    
    commit d2ac838e4cd7e5e9891ecc094d626734b0245c99 upstream.
    
    Refactor the validation code used in LOOP_SET_FD so it is also used in
    LOOP_CHANGE_FD.  Otherwise it is possible to construct a set of loop
    devices that all refer to each other.  This can lead to a infinite
    loop in starting with "while (is_loop_device(f)) .." in loop_set_fd().
    
    Fix this by refactoring out the validation code and using it for
    LOOP_CHANGE_FD as well as LOOP_SET_FD.
    
    Reported-by: syzbot+4349872271ece473a7c91190b68b4bac7c5dbc87@syzkaller.appspotmail.com
    Reported-by: syzbot+40bd32c4d9a3cc12a339@syzkaller.appspotmail.com
    Reported-by: syzbot+769c54e66f994b041be7@syzkaller.appspotmail.com
    Reported-by: syzbot+0a89a9ce473936c57065@syzkaller.appspotmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40352e791c0c407ae260c294e04d81bd989e00a5
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jun 7 21:34:43 2018 +0200

    netfilter: x_tables: initialise match/target check parameter struct
    
    commit c568503ef02030f169c9e19204def610a3510918 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in ebt_stp_mt_check+0x24b/0x450
     net/bridge/netfilter/ebt_stp.c:162
     ebt_stp_mt_check+0x24b/0x450 net/bridge/netfilter/ebt_stp.c:162
     xt_check_match+0x1438/0x1650 net/netfilter/x_tables.c:506
     ebt_check_match net/bridge/netfilter/ebtables.c:372 [inline]
     ebt_check_entry net/bridge/netfilter/ebtables.c:702 [inline]
    
    The uninitialised access is
       xt_mtchk_param->nft_compat
    
    ... which should be set to 0.
    Fix it by zeroing the struct beforehand, same for tgchk.
    
    ip(6)tables targetinfo uses c99-style initialiser, so no change
    needed there.
    
    Reported-by: syzbot+da4494182233c23a5fcf@syzkaller.appspotmail.com
    Fixes: 55917a21d0cc0 ("netfilter: x_tables: add context to know if extension runs from nft_compat")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac378e6ade31d5426c6225afa147252ce9170e63
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jun 13 09:13:39 2018 -0700

    netfilter: nf_queue: augment nfqa_cfg_policy
    
    commit ba062ebb2cd561d404e0fba8ee4b3f5ebce7cbfc upstream.
    
    Three attributes are currently not verified, thus can trigger KMSAN
    warnings such as :
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in nfqnl_recv_config+0x939/0x17d0 net/netfilter/nfnetlink_queue.c:1268
    CPU: 1 PID: 4521 Comm: syz-executor120 Not tainted 4.17.0+ #5
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x188/0x2a0 mm/kmsan/kmsan.c:1117
     __msan_warning_32+0x70/0xc0 mm/kmsan/kmsan_instr.c:620
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     nfqnl_recv_config+0x939/0x17d0 net/netfilter/nfnetlink_queue.c:1268
     nfnetlink_rcv_msg+0xb2e/0xc80 net/netfilter/nfnetlink.c:212
     netlink_rcv_skb+0x37e/0x600 net/netlink/af_netlink.c:2448
     nfnetlink_rcv+0x2fe/0x680 net/netfilter/nfnetlink.c:513
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0x1680/0x1750 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x104f/0x1350 net/netlink/af_netlink.c:1901
     sock_sendmsg_nosec net/socket.c:629 [inline]
     sock_sendmsg net/socket.c:639 [inline]
     ___sys_sendmsg+0xec8/0x1320 net/socket.c:2117
     __sys_sendmsg net/socket.c:2155 [inline]
     __do_sys_sendmsg net/socket.c:2164 [inline]
     __se_sys_sendmsg net/socket.c:2162 [inline]
     __x64_sys_sendmsg+0x331/0x460 net/socket.c:2162
     do_syscall_64+0x15b/0x230 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x43fd59
    RSP: 002b:00007ffde0e30d28 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fd59
    RDX: 0000000000000000 RSI: 0000000020000080 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 0000000000401680
    R13: 0000000000401710 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:279 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:189
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:315
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan.c:322
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2753 [inline]
     __kmalloc_node_track_caller+0xb35/0x11b0 mm/slub.c:4395
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cb/0x9e0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:988 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0x76e/0x1350 net/netlink/af_netlink.c:1876
     sock_sendmsg_nosec net/socket.c:629 [inline]
     sock_sendmsg net/socket.c:639 [inline]
     ___sys_sendmsg+0xec8/0x1320 net/socket.c:2117
     __sys_sendmsg net/socket.c:2155 [inline]
     __do_sys_sendmsg net/socket.c:2164 [inline]
     __se_sys_sendmsg net/socket.c:2162 [inline]
     __x64_sys_sendmsg+0x331/0x460 net/socket.c:2162
     do_syscall_64+0x15b/0x230 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: fdb694a01f1f ("netfilter: Add fail-open support")
    Fixes: 829e17a1a602 ("[NETFILTER]: nfnetlink_queue: allow changing queue length through netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 377fb3d894d61421dadafd2cc9c4a5765d0ea241
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Fri May 18 18:27:39 2018 +0200

    uprobes/x86: Remove incorrect WARN_ON() in uprobe_init_insn()
    
    commit 90718e32e1dcc2479acfa208ccfc6442850b594c upstream.
    
    insn_get_length() has the side-effect of processing the entire instruction
    but only if it was decoded successfully, otherwise insn_complete() can fail
    and in this case we need to just return an error without warning.
    
    Reported-by: syzbot+30d675e3ca03c1c351e7@syzkaller.appspotmail.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: syzkaller-bugs@googlegroups.com
    Link: https://lkml.kernel.org/lkml/20180518162739.GA5559@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 062c4965a1e66361f3840fe8234871500af3549e
Author: Keith Busch <keith.busch@intel.com>
Date:   Tue Feb 13 05:44:44 2018 -0700

    nvme-pci: Remap CMB SQ entries on every controller reset
    
    commit 815c6704bf9f1c59f3a6be380a4032b9c57b12f1 upstream.
    
    The controller memory buffer is remapped into a kernel address on each
    reset, but the driver was setting the submission queue base address
    only on the very first queue creation. The remapped address is likely to
    change after a reset, so accessing the old address will hit a kernel bug.
    
    This patch fixes that by setting the queue's CMB base address each time
    the queue is created.
    
    Fixes: f63572dff1421 ("nvme: unmap CMB and remove sysfs file in reset path")
    Reported-by: Christian Black <christian.d.black@intel.com>
    Cc: Jon Derrick <jonathan.derrick@intel.com>
    Cc: <stable@vger.kernel.org> # 4.9+
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Scott Bauer <scott.bauer@intel.com>
    Reviewed-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70c89bccb516af8694c50ba73b553278d7afaed4
Author: Steve Wise <larrystevenwise@gmail.com>
Date:   Thu Jun 21 07:43:21 2018 -0700

    iw_cxgb4: correctly enforce the max reg_mr depth
    
    commit 7b72717a20bba8bdd01b14c0460be7d15061cd6b upstream.
    
    The code was mistakenly using the length of the page array memory instead
    of the depth of the page array.
    
    This would cause MR creation to fail in some cases.
    
    Fixes: 8376b86de7d3 ("iw_cxgb4: Support the new memory registration API")
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve Wise <swise@opengridcomputing.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e78e3706bfba8b7865b7a52b3d1f4643e31c2197
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Tue Jul 3 09:55:43 2018 +0100

    i2c: tegra: Fix NACK error handling
    
    commit 54836e2d03e76d80aec3399368ffaf5b7caadd1b upstream.
    
    On Tegra30 Cardhu the PCA9546 I2C mux is not ACK'ing I2C commands on
    resume from suspend (which is caused by the reset signal for the I2C
    mux not being configured correctl). However, this NACK is causing the
    Tegra30 to hang on resuming from suspend which is not expected as we
    detect NACKs and handle them. The hang observed appears to occur when
    resetting the I2C controller to recover from the NACK.
    
    Commit 77821b4678f9 ("i2c: tegra: proper handling of error cases") added
    additional error handling for some error cases including NACK, however,
    it appears that this change conflicts with an early fix by commit
    f70893d08338 ("i2c: tegra: Add delay before resetting the controller
    after NACK"). After commit 77821b4678f9 was made we now disable 'packet
    mode' before the delay from commit f70893d08338 happens. Testing shows
    that moving the delay to before disabling 'packet mode' fixes the hang
    observed on Tegra30. The delay was added to give the I2C controller
    chance to send a stop condition and so it makes sense to move this to
    before we disable packet mode. Please note that packet mode is always
    enabled for Tegra.
    
    Fixes: 77821b4678f9 ("i2c: tegra: proper handling of error cases")
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36c038f0a97edc9f76000f6238a37c8dd16781cb
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Tue Jun 5 19:00:22 2018 +0200

    tools build: fix # escaping in .cmd files for future Make
    
    commit 9feeb638cde083c737e295c0547f1b4f28e99583 upstream.
    
    In 2016 GNU Make made a backwards incompatible change to the way '#'
    characters were handled in Makefiles when used inside functions or
    macros:
    
    http://git.savannah.gnu.org/cgit/make.git/commit/?id=c6966b323811c37acedff05b57
    
    Due to this change, when attempting to run `make prepare' I get a
    spurious make syntax error:
    
        /home/earnest/linux/tools/objtool/.fixdep.o.cmd:1: *** missing separator.  Stop.
    
    When inspecting `.fixdep.o.cmd' it includes two lines which use
    unescaped comment characters at the top:
    
        \# cannot find fixdep (/home/earnest/linux/tools/objtool//fixdep)
        \# using basic dep data
    
    This is because `tools/build/Build.include' prints these '\#'
    characters:
    
        printf '\# cannot find fixdep (%s)\n' $(fixdep) > $(dot-target).cmd; \
        printf '\# using basic dep data\n\n' >> $(dot-target).cmd;           \
    
    This completes commit 9564a8cf422d ("Kbuild: fix # escaping in .cmd files
    for future Make").
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=197847
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db2858f193dd9b3808fb180f1dbada87b3e41ba4
Author: Oscar Salvador <osalvador@suse.de>
Date:   Fri Jul 13 16:59:13 2018 -0700

    fs, elf: make sure to page align bss in load_elf_library
    
    commit 24962af7e1041b7e50c1bc71d8d10dc678c556b5 upstream.
    
    The current code does not make sure to page align bss before calling
    vm_brk(), and this can lead to a VM_BUG_ON() in __mm_populate() due to
    the requested lenght not being correctly aligned.
    
    Let us make sure to align it properly.
    
    Kees: only applicable to CONFIG_USELIB kernels: 32-bit and configured
    for libc5.
    
    Link: http://lkml.kernel.org/r/20180705145539.9627-1-osalvador@techadventures.net
    Signed-off-by: Oscar Salvador <osalvador@suse.de>
    Reported-by: syzbot+5dcb560fe12aa5091c06@syzkaller.appspotmail.com
    Tested-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Nicolas Pitre <nicolas.pitre@linaro.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc193057d4885693374fd286e6e39b421a0ed758
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Jun 27 07:25:32 2018 +0100

    ALSA: hda - Handle pm failure during hotplug
    
    commit aaa23f86001bdb82d2f937c5c7bce0a1e11a6c5b upstream.
    
    Obtaining the runtime pm wakeref can fail, especially in a hotplug
    scenario where i915.ko has been unloaded. If we do not catch the
    failure, we end up with an unbalanced pm.
    
    v2 additions by tiwai:
    hdmi_present_sense() checks the return value and handle only a
    negative error case and bails out only if it's really still suspended.
    Also, snd_hda_power_down() is called at the error path so that the
    refcount is balanced.
    
    Along with it, the spec->pcm_lock is taken outside
    hdmi_present_sense() in the caller side, so that it won't cause
    deadlock at reentrace via runtime resume.
    
    v3 fix by tiwai:
    Missing linux/pm_runtime.h is included.
    
    References: 222bde03881c ("ALSA: hda - Fix mutex deadlock at HDMI/DP hotplug")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2c7c52431819aa05d76fae77bb3f95dd0955da1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 3 17:10:19 2018 -0700

    Fix up non-directory creation in SGID directories
    
    commit 0fa3ecd87848c9c93c2c828ef4c3a8ca36ce46c7 upstream.
    
    sgid directories have special semantics, making newly created files in
    the directory belong to the group of the directory, and newly created
    subdirectories will also become sgid.  This is historically used for
    group-shared directories.
    
    But group directories writable by non-group members should not imply
    that such non-group members can magically join the group, so make sure
    to clear the sgid bit on non-directories for non-members (but remember
    that sgid without group execute means "mandatory locking", just to
    confuse things even more).
    
    Reported-by: Jann Horn <jannh@google.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16387eb51caa0828de1d78e605523a6d738a7f3f
Author: Tomasz Kramkowski <tk@the-tk.com>
Date:   Tue Feb 14 23:14:33 2017 +0000

    HID: usbhid: add quirk for innomedia INNEX GENESIS/ATARI adapter
    
    commit 9547837bdccb4af127528b36a73377150658b4ac upstream.
    
    The (1292:4745) Innomedia INNEX GENESIS/ATARI adapter needs
    HID_QUIRK_MULTI_INPUT to split the device up into two controllers
    instead of inputs from both being merged into one.
    
    Signed-off-by: Tomasz Kramkowski <tk@the-tk.com>
    Acked-By: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 268476c9d3cbd9af1e879536e99a045301d7c83b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 4 12:48:53 2018 +0300

    xhci: xhci-mem: off by one in xhci_stream_id_to_ring()
    
    commit 313db3d6488bb03b61b99de9dbca061f1fd838e1 upstream.
    
    The > should be >= here so that we don't read one element beyond the end
    of the ep->stream_info->stream_rings[] array.
    
    Fixes: e9df17eb1408 ("USB: xhci: Correct assumptions about number of rings per endpoint.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cac38ab7d4ff3b97eea76b7a59e22ced0dbb85a6
Author: Nico Sneck <snecknico@gmail.com>
Date:   Mon Jul 2 19:26:07 2018 +0300

    usb: quirks: add delay quirks for Corsair Strafe
    
    commit bba57eddadda936c94b5dccf73787cb9e159d0a5 upstream.
    
    Corsair Strafe appears to suffer from the same issues
    as the Corsair Strafe RGB.
    Apply the same quirks (control message delay and init delay)
    that the RGB version has to 1b1c:1b15.
    
    With these quirks in place the keyboard works correctly upon
    booting the system, and no longer requires reattaching the device.
    
    Signed-off-by: Nico Sneck <snecknico@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7675c7b78e34ece3829e85308f5e37f2fb62c11a
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 4 17:02:17 2018 +0200

    USB: serial: mos7840: fix status-register error handling
    
    commit 794744abfffef8b1f3c0c8a4896177d6d13d653d upstream.
    
    Add missing transfer-length sanity check to the status-register
    completion handler to avoid leaking bits of uninitialised slab data to
    user space.
    
    Fixes: 3f5429746d91 ("USB: Moschip 7840 USB-Serial Driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fdef3142f99430b94f5d394ca2b181d20d87e77
Author: Jann Horn <jannh@google.com>
Date:   Fri Jul 6 17:12:56 2018 +0200

    USB: yurex: fix out-of-bounds uaccess in read handler
    
    commit f1e255d60ae66a9f672ff9a207ee6cd8e33d2679 upstream.
    
    In general, accessing userspace memory beyond the length of the supplied
    buffer in VFS read/write handlers can lead to both kernel memory corruption
    (via kernel_read()/kernel_write(), which can e.g. be triggered via
    sys_splice()) and privilege escalation inside userspace.
    
    Fix it by using simple_read_from_buffer() instead of custom logic.
    
    Fixes: 6bc235a2e24a ("USB: add driver for Meywa-Denki & Kayac YUREX")
    Signed-off-by: Jann Horn <jannh@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e7c86d2757067f52fa1a81f5d472f5662bd0e7f
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 4 17:02:16 2018 +0200

    USB: serial: keyspan_pda: fix modem-status error handling
    
    commit 01b3cdfca263a17554f7b249d20a247b2a751521 upstream.
    
    Fix broken modem-status error handling which could lead to bits of slab
    data leaking to user space.
    
    Fixes: 3b36a8fd6777 ("usb: fix uninitialized variable warning in keyspan_pda")
    Cc: stable <stable@vger.kernel.org>     # 2.6.27
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4115045f9588e794c091c5fbc2a85f2e1f03e260
Author: Olli Salonen <olli.salonen@iki.fi>
Date:   Wed Jul 4 14:07:42 2018 +0300

    USB: serial: cp210x: add another USB ID for Qivicon ZigBee stick
    
    commit 367b160fe4717c14a2a978b6f9ffb75a7762d3ed upstream.
    
    There are two versions of the Qivicon Zigbee stick in circulation. This
    adds the second USB ID to the cp210x driver.
    
    Signed-off-by: Olli Salonen <olli.salonen@iki.fi>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c73f193b320d8463c280ef8b4df314fb291f76b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 4 12:29:38 2018 +0300

    USB: serial: ch341: fix type promotion bug in ch341_control_in()
    
    commit e33eab9ded328ccc14308afa51b5be7cbe78d30b upstream.
    
    The "r" variable is an int and "bufsize" is an unsigned int so the
    comparison is type promoted to unsigned.  If usb_control_msg() returns a
    negative that is treated as a high positive value and the error handling
    doesn't work.
    
    Fixes: 2d5a9c72d0c4 ("USB: serial: ch341: fix control-message error handling")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f510cc3a2f314b299b6dd7bce93a11dfe7adaabe
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Jul 1 12:15:46 2018 +0200

    ahci: Disable LPM on Lenovo 50 series laptops with a too old BIOS
    
    commit 240630e61870e62e39a97225048f9945848fa5f5 upstream.
    
    There have been several reports of LPM related hard freezes about once
    a day on multiple Lenovo 50 series models. Strange enough these reports
    where not disk model specific as LPM issues usually are and some users
    with the exact same disk + laptop where seeing them while other users
    where not seeing these issues.
    
    It turns out that enabling LPM triggers a firmware bug somewhere, which
    has been fixed in later BIOS versions.
    
    This commit adds a new ahci_broken_lpm() function and a new ATA_FLAG_NO_LPM
    for dealing with this.
    
    The ahci_broken_lpm() function contains DMI match info for the 4 models
    which are known to be affected by this and the DMI BIOS date field for
    known good BIOS versions. If the BIOS date is older then the one in the
    table LPM will be disabled and a warning will be printed.
    
    Note the BIOS dates are for known good versions, some older versions may
    work too, but we don't know for sure, the table is using dates from BIOS
    versions for which users have confirmed that upgrading to that version
    makes the problem go away.
    
    Unfortunately I've been unable to get hold of the reporter who reported
    that BIOS version 2.35 fixed the problems on the W541 for him. I've been
    able to verify the DMI_SYS_VENDOR and DMI_PRODUCT_VERSION from an older
    dmidecode, but I don't know the exact BIOS date as reported in the DMI.
    Lenovo keeps a changelog with dates in their release notes, but the
    dates there are the release dates not the build dates which are in DMI.
    So I've chosen to set the date to which we compare to one day past the
    release date of the 2.34 BIOS. I plan to fix this with a follow up
    commit once I've the necessary info.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63c003e3fff7e3f450375bdbf34a8465cb824d16
Author: Nadav Amit <namit@vmware.com>
Date:   Mon Jul 2 19:27:13 2018 -0700

    vmw_balloon: fix inflation with batching
    
    commit 90d72ce079791399ac255c75728f3c9e747b093d upstream.
    
    Embarrassingly, the recent fix introduced worse problem than it solved,
    causing the balloon not to inflate. The VM informed the hypervisor that
    the pages for lock/unlock are sitting in the wrong address, as it used
    the page that is used the uninitialized page variable.
    
    Fixes: b23220fe054e9 ("vmw_balloon: fixing double free when batching mode is off")
    Cc: stable@vger.kernel.org
    Reviewed-by: Xavier Deguillard <xdeguillard@vmware.com>
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f205d7a89d96d50fcf9a44754c180908388da25
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Tue Jun 26 20:56:55 2018 +0900

    ata: Fix ZBC_OUT all bit handling
    
    commit 6edf1d4cb0acde3a0a5dac849f33031bd7abb7b1 upstream.
    
    If the ALL bit is set in the ZBC_OUT command, the command zone ID field
    (block) should be ignored.
    
    Reported-by: David Butterfield <david.butterfield@wdc.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51bacd848cc1bcd8fb82d413cf27f407973536f5
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Tue Jun 26 20:56:54 2018 +0900

    ata: Fix ZBC_OUT command block check
    
    commit b320a0a9f23c98f21631eb27bcbbca91c79b1c6e upstream.
    
    The block (LBA) specified must not exceed the last addressable LBA,
    which is dev->nr_sectors - 1. So fix the correct check is
    "if (block >= dev->n_sectors)" and not "if (block > dev->n_sectords)".
    
    Additionally, the asc/ascq to return for an LBA that is not a zone start
    LBA should be ILLEGAL REQUEST, regardless if the bad LBA is out of
    range.
    
    Reported-by: David Butterfield <david.butterfield@wdc.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2823345cd41f30d39483aebb9e3eb5341a2d4f06
Author: Jann Horn <jannh@google.com>
Date:   Sat Jul 7 04:16:33 2018 +0200

    ibmasm: don't write out of bounds in read handler
    
    commit a0341fc1981a950c1e902ab901e98f60e0e243f3 upstream.
    
    This read handler had a lot of custom logic and wrote outside the bounds of
    the provided buffer. This could lead to kernel and userspace memory
    corruption. Just use simple_read_from_buffer() with a stack buffer.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35479c22ff2159387f93b368c5d416ddc1cc437d
Author: x00270170 <xiaqing17@hisilicon.com>
Date:   Tue Jul 3 15:06:27 2018 +0800

    mmc: dw_mmc: fix card threshold control configuration
    
    commit 7a6b9f4d601dfce8cb68f0dcfd834270280e31e6 upstream.
    
    Card write threshold control is supposed to be set since controller
    version 2.80a for data write in HS400 mode and data read in
    HS200/HS400/SDR104 mode. However the current code returns without
    configuring it in the case of data writing in HS400 mode.
    Meanwhile the patch fixes that the current code goes to
    'disable' when doing data reading in HS400 mode.
    
    Fixes: 7e4bf1bc9543 ("mmc: dw_mmc: add the card write threshold for HS400 mode")
    Signed-off-by: Qing Xia <xiaqing17@hisilicon.com>
    Cc: stable@vger.kernel.org # v4.8+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92cb1184ae064dfd9d15575dc64b3b0a88a198ad
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Jul 5 14:37:52 2018 -0700

    MIPS: Fix ioremap() RAM check
    
    commit 523402fa9101090c91d2033b7ebdfdcf65880488 upstream.
    
    We currently attempt to check whether a physical address range provided
    to __ioremap() may be in use by the page allocator by examining the
    value of PageReserved for each page in the region - lowmem pages not
    marked reserved are presumed to be in use by the page allocator, and
    requests to ioremap them fail.
    
    The way we check this has been broken since commit 92923ca3aace ("mm:
    meminit: only set page reserved in the memblock region"), because
    memblock will typically not have any knowledge of non-RAM pages and
    therefore those pages will not have the PageReserved flag set. Thus when
    we attempt to ioremap a region outside of RAM we incorrectly fail
    believing that the region is RAM that may be in use.
    
    In most cases ioremap() on MIPS will take a fast-path to use the
    unmapped kseg1 or xkphys virtual address spaces and never hit this path,
    so the only way to hit it is for a MIPS32 system to attempt to ioremap()
    an address range in lowmem with flags other than _CACHE_UNCACHED.
    Perhaps the most straightforward way to do this is using
    ioremap_uncached_accelerated(), which is how the problem was discovered.
    
    Fix this by making use of walk_system_ram_range() to test the address
    range provided to __ioremap() against only RAM pages, rather than all
    lowmem pages. This means that if we have a lowmem I/O region, which is
    very common for MIPS systems, we're free to ioremap() address ranges
    within it. A nice bonus is that the test is no longer limited to lowmem.
    
    The approach here matches the way x86 performed the same test after
    commit c81c8a1eeede ("x86, ioremap: Speed up check for RAM pages") until
    x86 moved towards a slightly more complicated check using walk_mem_res()
    for unrelated reasons with commit 0e4c12b45aa8 ("x86/mm, resource: Use
    PAGE_KERNEL protection for ioremap of memory pages").
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Serge Semin <fancer.lancer@gmail.com>
    Tested-by: Serge Semin <fancer.lancer@gmail.com>
    Fixes: 92923ca3aace ("mm: meminit: only set page reserved in the memblock region")
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.2+
    Patchwork: https://patchwork.linux-mips.org/patch/19786/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 473b33dd615f35c0bad13737def7751fb089ce60
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Jun 22 10:55:45 2018 -0700

    MIPS: Call dump_stack() from show_regs()
    
    commit 5a267832c2ec47b2dad0fdb291a96bb5b8869315 upstream.
    
    The generic nmi_cpu_backtrace() function calls show_regs() when a struct
    pt_regs is available, and dump_stack() otherwise. If we were to make use
    of the generic nmi_cpu_backtrace() with MIPS' current implementation of
    show_regs() this would mean that we see only register data with no
    accompanying stack information, in contrast with our current
    implementation which calls dump_stack() regardless of whether register
    state is available.
    
    In preparation for making use of the generic nmi_cpu_backtrace() to
    implement arch_trigger_cpumask_backtrace(), have our implementation of
    show_regs() call dump_stack() and drop the explicit dump_stack() call in
    arch_dump_stack() which is invoked by arch_trigger_cpumask_backtrace().
    
    This will allow the output we produce to remain the same after a later
    patch switches to using nmi_cpu_backtrace(). It may mean that we produce
    extra stack output in other uses of show_regs(), but this:
    
      1) Seems harmless.
      2) Is good for consistency between arch_trigger_cpumask_backtrace()
         and other users of show_regs().
      3) Matches the behaviour of the ARM & PowerPC architectures.
    
    Marked for stable back to v4.9 as a prerequisite of the following patch
    "MIPS: Call dump_stack() from show_regs()".
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/19596/
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.9+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93e54f40c89336adc28b4125529bb75d4b565a70
Author: Scott Bauer <scott.bauer@intel.com>
Date:   Tue Jul 25 10:27:06 2017 -0600

    nvme: validate admin queue before unquiesce
    
    commit 7dd1ab163c17e11473a65b11f7e748db30618ebb upstream.
    
    With a misbehaving controller it's possible we'll never
    enter the live state and create an admin queue. When we
    fail out of reset work it's possible we failed out early
    enough without setting up the admin queue. We tear down
    queues after a failed reset, but needed to do some more
    sanitization.
    
    Fixes 443bd90f2cca: "nvme: host: unquiesce queue in nvme_kill_queues()"
    
    [  189.650995] nvme nvme1: pci function 0000:0b:00.0
    [  317.680055] nvme nvme0: Device not ready; aborting reset
    [  317.680183] nvme nvme0: Removing after probe failure status: -19
    [  317.681258] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [  317.681397] general protection fault: 0000 [#1] SMP KASAN
    [  317.682984] CPU: 3 PID: 477 Comm: kworker/3:2 Not tainted 4.13.0-rc1+ #5
    [  317.683112] Hardware name: Gigabyte Technology Co., Ltd. Z170X-UD5/Z170X-UD5-CF, BIOS F5 03/07/2016
    [  317.683284] Workqueue: events nvme_remove_dead_ctrl_work [nvme]
    [  317.683398] task: ffff8803b0990000 task.stack: ffff8803c2ef0000
    [  317.683516] RIP: 0010:blk_mq_unquiesce_queue+0x2b/0xa0
    [  317.683614] RSP: 0018:ffff8803c2ef7d40 EFLAGS: 00010282
    [  317.683716] RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 1ffff1006fbdcde3
    [  317.683847] RDX: 0000000000000038 RSI: 1ffff1006f5a9245 RDI: 0000000000000000
    [  317.683978] RBP: ffff8803c2ef7d58 R08: 1ffff1007bcdc974 R09: 0000000000000000
    [  317.684108] R10: 1ffff1007bcdc975 R11: 0000000000000000 R12: 00000000000001c0
    [  317.684239] R13: ffff88037ad49228 R14: ffff88037ad492d0 R15: ffff88037ad492e0
    [  317.684371] FS:  0000000000000000(0000) GS:ffff8803de6c0000(0000) knlGS:0000000000000000
    [  317.684519] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  317.684627] CR2: 0000002d1860c000 CR3: 000000045b40d000 CR4: 00000000003406e0
    [  317.684758] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  317.684888] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  317.685018] Call Trace:
    [  317.685084]  nvme_kill_queues+0x4d/0x170 [nvme_core]
    [  317.685185]  nvme_remove_dead_ctrl_work+0x3a/0x90 [nvme]
    [  317.685289]  process_one_work+0x771/0x1170
    [  317.685372]  worker_thread+0xde/0x11e0
    [  317.685452]  ? pci_mmcfg_check_reserved+0x110/0x110
    [  317.685550]  kthread+0x2d3/0x3d0
    [  317.685617]  ? process_one_work+0x1170/0x1170
    [  317.685704]  ? kthread_create_on_node+0xc0/0xc0
    [  317.685785]  ret_from_fork+0x25/0x30
    [  317.685798] Code: 0f 1f 44 00 00 55 48 b8 00 00 00 00 00 fc ff df 48 89 e5 41 54 4c 8d a7 c0 01 00 00 53 48 89 fb 4c 89 e2 48 c1 ea 03 48 83 ec 08 <80> 3c 02 00 75 50 48 8b bb c0 01 00 00 e8 33 8a f9 00 0f ba b3
    [  317.685872] RIP: blk_mq_unquiesce_queue+0x2b/0xa0 RSP: ffff8803c2ef7d40
    [  317.685908] ---[ end trace a3f8704150b1e8b4 ]---
    
    Signed-off-by: Scott Bauer <scott.bauer@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    [ adapted for 4.9: added check around blk_mq_start_hw_queues() call
      instead of upstream blk_mq_unquiesce_queue() ]
    Fixes: 4aae4388165a2611fa42 ("nvme: fix hang in remove path")
    Signed-off-by: Simon Veith <sveith@amazon.de>
    Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
    Signed-off-by: Amit Shah <aams@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
