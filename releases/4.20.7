commit fb978c0292e73632e0591454a2a61b6ffce75648
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 6 17:27:45 2019 +0100

    Linux 4.20.7

commit c3ffc8df0734aa6448ac08d288c1f7945ecc62d7
Author: Paulo Alcantara <paulo@paulo.ac>
Date:   Tue Nov 20 15:16:36 2018 -0200

    cifs: Always resolve hostname before reconnecting
    
    commit 28eb24ff75c5ac130eb326b3b4d0dcecfc0f427d upstream.
    
    In case a hostname resolves to a different IP address (e.g. long
    running mounts), make sure to resolve it every time prior to calling
    generic_ip_connect() in reconnect.
    
    Suggested-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Paulo Alcantara <palcantara@suse.de>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6db72280410d25b54a3067803231ede93c863a2
Author: Alexei Naberezhnov <anaberezhnov@fb.com>
Date:   Tue Mar 27 16:54:16 2018 -0700

    md/raid5: fix 'out of memory' during raid cache recovery
    
    commit 483cbbeddd5fe2c80fd4141ff0748fa06c4ff146 upstream.
    
    This fixes the case when md array assembly fails because of raid cache recovery
    unable to allocate a stripe, despite attempts to replay stripes and increase
    cache size. This happens because stripes released by r5c_recovery_replay_stripes
    and raid5_set_cache_size don't become available for allocation immediately.
    Released stripes first are placed on conf->released_stripes list and require
    md thread to merge them on conf->inactive_list before they can be allocated.
    
    Patch allows final allocation attempt during cache recovery to wait for
    new stripes to become availabe for allocation.
    
    Cc: linux-raid@vger.kernel.org
    Cc: Shaohua Li <shli@kernel.org>
    Cc: linux-stable <stable@vger.kernel.org> # 4.10+
    Fixes: b4c625c67362 ("md/r5cache: r5cache recovery: part 1")
    Signed-off-by: Alexei Naberezhnov <anaberezhnov@fb.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6ae333bd613a0e5ce6a666105da1fa083c29887
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:29:01 2018 -0700

    of: overlay: do not duplicate properties from overlay for new nodes
    
    commit 8814dc46bd9e347d4de55ec5bf8f16ea54470499 upstream.
    
    When allocating a new node, add_changeset_node() was duplicating the
    properties from the respective node in the overlay instead of
    allocating a node with no properties.
    
    When this patch is applied the errors reported by the devictree
    unittest from patch "of: overlay: add tests to validate kfrees from
    overlay removal" will no longer occur.  These error messages are of
    the form:
    
       "OF: ERROR: ..."
    
    and the unittest results will change from:
    
       ### dt-test ### end of unittest - 203 passed, 7 failed
    
    to
    
       ### dt-test ### end of unittest - 210 passed, 0 failed
    
    Tested-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf037126228853b60eb0d9ca89a5074d538f52dc
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:28:08 2018 -0700

    of: overlay: use prop add changeset entry for property in new nodes
    
    commit 6b4955ba7bc05e40c8c41071cc121bc26ca65277 upstream.
    
    The changeset entry 'update property' was used for new properties in
    an overlay instead of 'add property'.
    
    The decision of whether to use 'update property' was based on whether
    the property already exists in the subtree where the node is being
    spliced into.  At the top level of creating a changeset describing the
    overlay, the target node is in the live devicetree, so checking whether
    the property exists in the target node returns the correct result.
    As soon as the changeset creation algorithm recurses into a new node,
    the target is no longer in the live devicetree, but is instead in the
    detached overlay tree, thus all properties are incorrectly found to
    already exist in the target.
    
    This fix will expose another devicetree bug that will be fixed
    in the following patch in the series.
    
    When this patch is applied the errors reported by the devictree
    unittest will change, and the unittest results will change from:
    
       ### dt-test ### end of unittest - 210 passed, 0 failed
    
    to
    
       ### dt-test ### end of unittest - 203 passed, 7 failed
    
    Tested-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5933abd0743489f89d165cdfd372467d9c100c8f
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:26:05 2018 -0700

    of: overlay: add missing of_node_get() in __of_attach_node_sysfs
    
    commit 5b2c2f5a0ea3a43e0dee78059e34c7cb54136dcc upstream.
    
    There is a matching of_node_put() in __of_detach_node_sysfs()
    
    Remove misleading comment from function header comment for
    of_detach_node().
    
    This patch may result in memory leaks from code that directly calls
    the dynamic node add and delete functions directly instead of
    using changesets.
    
    This commit should result in powerpc systems that dynamically
    allocate a node, then later deallocate the node to have a
    memory leak when the node is deallocated.
    
    The next commit will fix the leak.
    
    Tested-by: Alan Tull <atull@kernel.org>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0aa65adc854a6e08e9c932df834c5d3a5b617836
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:24:17 2018 -0700

    of: overlay: add tests to validate kfrees from overlay removal
    
    commit 144552c786925314c1e7cb8f91a71dae1aca8798 upstream.
    
    Add checks:
      - attempted kfree due to refcount reaching zero before overlay
        is removed
      - properties linked to an overlay node when the node is removed
      - node refcount > one during node removal in a changeset destroy,
        if the node was created by the changeset
    
    After applying this patch, several validation warnings will be
    reported from the devicetree unittest during boot due to
    pre-existing devicetree bugs. The warnings will be similar to:
    
      OF: ERROR: of_node_release(), unexpected properties in /testcase-data/overlay-node/test-bus/test-unittest11
      OF: ERROR: memory leak, expected refcount 1 instead of 2, of_node_get()/of_node_put() unbalanced - destroy cset entry: attach overlay node /testcase-data-2/substation@100/
      hvac-medium-2
    
    Tested-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0f2cf27499ee7f4b6f58dc5905e7cf53f8b7568
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Feb 1 14:21:19 2019 -0800

    mm: migrate: don't rely on __PageMovable() of newpage after unlocking it
    
    commit e0a352fabce61f730341d119fbedf71ffdb8663f upstream.
    
    We had a race in the old balloon compaction code before b1123ea6d3b3
    ("mm: balloon: use general non-lru movable page feature") refactored it
    that became visible after backporting 195a8c43e93d ("virtio-balloon:
    deflate via a page list") without the refactoring.
    
    The bug existed from commit d6d86c0a7f8d ("mm/balloon_compaction:
    redesign ballooned pages management") till b1123ea6d3b3 ("mm: balloon:
    use general non-lru movable page feature").  d6d86c0a7f8d
    ("mm/balloon_compaction: redesign ballooned pages management") was
    backported to 3.12, so the broken kernels are stable kernels [3.12 -
    4.7].
    
    There was a subtle race between dropping the page lock of the newpage in
    __unmap_and_move() and checking for __is_movable_balloon_page(newpage).
    
    Just after dropping this page lock, virtio-balloon could go ahead and
    deflate the newpage, effectively dequeueing it and clearing PageBalloon,
    in turn making __is_movable_balloon_page(newpage) fail.
    
    This resulted in dropping the reference of the newpage via
    putback_lru_page(newpage) instead of put_page(newpage), leading to
    page->lru getting modified and a !LRU page ending up in the LRU lists.
    With 195a8c43e93d ("virtio-balloon: deflate via a page list")
    backported, one would suddenly get corrupted lists in
    release_pages_balloon():
    
    - WARNING: CPU: 13 PID: 6586 at lib/list_debug.c:59 __list_del_entry+0xa1/0xd0
    - list_del corruption. prev->next should be ffffe253961090a0, but was dead000000000100
    
    Nowadays this race is no longer possible, but it is hidden behind very
    ugly handling of __ClearPageMovable() and __PageMovable().
    
    __ClearPageMovable() will not make __PageMovable() fail, only
    PageMovable().  So the new check (__PageMovable(newpage)) will still
    hold even after newpage was dequeued by virtio-balloon.
    
    If anybody would ever change that special handling, the BUG would be
    introduced again.  So instead, make it explicit and use the information
    of the original isolated page before migration.
    
    This patch can be backported fairly easy to stable kernels (in contrast
    to the refactoring).
    
    Link: http://lkml.kernel.org/r/20190129233217.10747-1-david@redhat.com
    Fixes: d6d86c0a7f8d ("mm/balloon_compaction: redesign ballooned pages management")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reported-by: Vratislav Bendel <vbendel@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Vratislav Bendel <vbendel@redhat.com>
    Cc: Rafael Aquini <aquini@redhat.com>
    Cc: Konstantin Khlebnikov <k.khlebnikov@samsung.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: <stable@vger.kernel.org>    [3.12 - 4.7]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 590dc8f979ad3e12b09897184f7a109a6adf3754
Author: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Date:   Fri Feb 1 14:21:08 2019 -0800

    mm: hwpoison: use do_send_sig_info() instead of force_sig()
    
    commit 6376360ecbe525a9c17b3d081dfd88ba3e4ed65b upstream.
    
    Currently memory_failure() is racy against process's exiting, which
    results in kernel crash by null pointer dereference.
    
    The root cause is that memory_failure() uses force_sig() to forcibly
    kill asynchronous (meaning not in the current context) processes.  As
    discussed in thread https://lkml.org/lkml/2010/6/8/236 years ago for OOM
    fixes, this is not a right thing to do.  OOM solves this issue by using
    do_send_sig_info() as done in commit d2d393099de2 ("signal:
    oom_kill_task: use SEND_SIG_FORCED instead of force_sig()"), so this
    patch is suggesting to do the same for hwpoison.  do_send_sig_info()
    properly accesses to siglock with lock_task_sighand(), so is free from
    the reported race.
    
    I confirmed that the reported bug reproduces with inserting some delay
    in kill_procs(), and it never reproduces with this patch.
    
    Note that memory_failure() can send another type of signal using
    force_sig_mceerr(), and the reported race shouldn't happen on it because
    force_sig_mceerr() is called only for synchronous processes (i.e.
    BUS_MCEERR_AR happens only when some process accesses to the corrupted
    memory.)
    
    Link: http://lkml.kernel.org/r/20190116093046.GA29835@hori1.linux.bs1.fc.nec.co.jp
    Signed-off-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Reported-by: Jane Chu <jane.chu@oracle.com>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: William Kucharski <william.kucharski@oracle.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54adc36a438bba64c19ec5d4334a0993614f899d
Author: Shakeel Butt <shakeelb@google.com>
Date:   Fri Feb 1 14:20:54 2019 -0800

    mm, oom: fix use-after-free in oom_kill_process
    
    commit cefc7ef3c87d02fc9307835868ff721ea12cc597 upstream.
    
    Syzbot instance running on upstream kernel found a use-after-free bug in
    oom_kill_process.  On further inspection it seems like the process
    selected to be oom-killed has exited even before reaching
    read_lock(&tasklist_lock) in oom_kill_process().  More specifically the
    tsk->usage is 1 which is due to get_task_struct() in oom_evaluate_task()
    and the put_task_struct within for_each_thread() frees the tsk and
    for_each_thread() tries to access the tsk.  The easiest fix is to do
    get/put across the for_each_thread() on the selected task.
    
    Now the next question is should we continue with the oom-kill as the
    previously selected task has exited? However before adding more
    complexity and heuristics, let's answer why we even look at the children
    of oom-kill selected task? The select_bad_process() has already selected
    the worst process in the system/memcg.  Due to race, the selected
    process might not be the worst at the kill time but does that matter?
    The userspace can use the oom_score_adj interface to prefer children to
    be killed before the parent.  I looked at the history but it seems like
    this is there before git history.
    
    Link: http://lkml.kernel.org/r/20190121215850.221745-1-shakeelb@google.com
    Reported-by: syzbot+7fbbfa368521945f0e3d@syzkaller.appspotmail.com
    Fixes: 6b0c81b3be11 ("mm, oom: reduce dependency on tasklist_lock")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Roman Gushchin <guro@fb.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ee7c007088272d0887dd172a3460b1cb0c10cc4
Author: Oscar Salvador <osalvador@suse.de>
Date:   Fri Feb 1 14:20:47 2019 -0800

    mm,memory_hotplug: fix scan_movable_pages() for gigantic hugepages
    
    commit eeb0efd071d821a88da3fbd35f2d478f40d3b2ea upstream.
    
    This is the same sort of error we saw in commit 17e2e7d7e1b8 ("mm,
    page_alloc: fix has_unmovable_pages for HugePages").
    
    Gigantic hugepages cross several memblocks, so it can be that the page
    we get in scan_movable_pages() is a page-tail belonging to a
    1G-hugepage.  If that happens, page_hstate()->size_to_hstate() will
    return NULL, and we will blow up in hugepage_migration_supported().
    
    The splat is as follows:
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
      #PF error: [normal kernel read fault]
      PGD 0 P4D 0
      Oops: 0000 [#1] SMP PTI
      CPU: 1 PID: 1350 Comm: bash Tainted: G            E     5.0.0-rc1-mm1-1-default+ #27
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.0.0-prebuilt.qemu-project.org 04/01/2014
      RIP: 0010:__offline_pages+0x6ae/0x900
      Call Trace:
       memory_subsys_offline+0x42/0x60
       device_offline+0x80/0xa0
       state_store+0xab/0xc0
       kernfs_fop_write+0x102/0x180
       __vfs_write+0x26/0x190
       vfs_write+0xad/0x1b0
       ksys_write+0x42/0x90
       do_syscall_64+0x5b/0x180
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      Modules linked in: af_packet(E) xt_tcpudp(E) ipt_REJECT(E) xt_conntrack(E) nf_conntrack(E) nf_defrag_ipv4(E) ip_set(E) nfnetlink(E) ebtable_nat(E) ebtable_broute(E) bridge(E) stp(E) llc(E) iptable_mangle(E) iptable_raw(E) iptable_security(E) ebtable_filter(E) ebtables(E) iptable_filter(E) ip_tables(E) x_tables(E) kvm_intel(E) kvm(E) irqbypass(E) crct10dif_pclmul(E) crc32_pclmul(E) ghash_clmulni_intel(E) bochs_drm(E) ttm(E) aesni_intel(E) drm_kms_helper(E) aes_x86_64(E) crypto_simd(E) cryptd(E) glue_helper(E) drm(E) virtio_net(E) syscopyarea(E) sysfillrect(E) net_failover(E) sysimgblt(E) pcspkr(E) failover(E) i2c_piix4(E) fb_sys_fops(E) parport_pc(E) parport(E) button(E) btrfs(E) libcrc32c(E) xor(E) zstd_decompress(E) zstd_compress(E) xxhash(E) raid6_pq(E) sd_mod(E) ata_generic(E) ata_piix(E) ahci(E) libahci(E) libata(E) crc32c_intel(E) serio_raw(E) virtio_pci(E) virtio_ring(E) virtio(E) sg(E) scsi_mod(E) autofs4(E)
    
    [akpm@linux-foundation.org: fix brace layout, per David.  Reduce indentation]
    Link: http://lkml.kernel.org/r/20190122154407.18417-1-osalvador@suse.de
    Signed-off-by: Oscar Salvador <osalvador@suse.de>
    Reviewed-by: Anthony Yznaga <anthony.yznaga@oracle.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f1a96b1043b1ef244599f2073d1b97e25ee02d4
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Feb 1 14:20:31 2019 -0800

    oom, oom_reaper: do not enqueue same task twice
    
    commit 9bcdeb51bd7d2ae9fe65ea4d60643d2aeef5bfe3 upstream.
    
    Arkadiusz reported that enabling memcg's group oom killing causes
    strange memcg statistics where there is no task in a memcg despite the
    number of tasks in that memcg is not 0.  It turned out that there is a
    bug in wake_oom_reaper() which allows enqueuing same task twice which
    makes impossible to decrease the number of tasks in that memcg due to a
    refcount leak.
    
    This bug existed since the OOM reaper became invokable from
    task_will_free_mem(current) path in out_of_memory() in Linux 4.7,
    
      T1@P1     |T2@P1     |T3@P1     |OOM reaper
      ----------+----------+----------+------------
                                       # Processing an OOM victim in a different memcg domain.
                            try_charge()
                              mem_cgroup_out_of_memory()
                                mutex_lock(&oom_lock)
                 try_charge()
                   mem_cgroup_out_of_memory()
                     mutex_lock(&oom_lock)
      try_charge()
        mem_cgroup_out_of_memory()
          mutex_lock(&oom_lock)
                                out_of_memory()
                                  oom_kill_process(P1)
                                    do_send_sig_info(SIGKILL, @P1)
                                    mark_oom_victim(T1@P1)
                                    wake_oom_reaper(T1@P1) # T1@P1 is enqueued.
                                mutex_unlock(&oom_lock)
                     out_of_memory()
                       mark_oom_victim(T2@P1)
                       wake_oom_reaper(T2@P1) # T2@P1 is enqueued.
                     mutex_unlock(&oom_lock)
          out_of_memory()
            mark_oom_victim(T1@P1)
            wake_oom_reaper(T1@P1) # T1@P1 is enqueued again due to oom_reaper_list == T2@P1 && T1@P1->oom_reaper_list == NULL.
          mutex_unlock(&oom_lock)
                                       # Completed processing an OOM victim in a different memcg domain.
                                       spin_lock(&oom_reaper_lock)
                                       # T1P1 is dequeued.
                                       spin_unlock(&oom_reaper_lock)
    
    but memcg's group oom killing made it easier to trigger this bug by
    calling wake_oom_reaper() on the same task from one out_of_memory()
    request.
    
    Fix this bug using an approach used by commit 855b018325737f76 ("oom,
    oom_reaper: disable oom_reaper for oom_kill_allocating_task").  As a
    side effect of this patch, this patch also avoids enqueuing multiple
    threads sharing memory via task_will_free_mem(current) path.
    
    Link: http://lkml.kernel.org/r/e865a044-2c10-9858-f4ef-254bc71d6cc2@i-love.sakura.ne.jp
    Link: http://lkml.kernel.org/r/5ee34fc6-1485-34f8-8790-903ddabaa809@i-love.sakura.ne.jp
    Fixes: af8e15cc85a25315 ("oom, oom_reaper: do not enqueue task if it is on the oom_reaper_list head")
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: Arkadiusz Miskiewicz <arekm@maven.pl>
    Tested-by: Arkadiusz Miskiewicz <arekm@maven.pl>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Aleksa Sarai <asarai@suse.de>
    Cc: Jay Kamat <jgkamat@fb.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d076f6973267b0ed3c8932d6efb54d29cef1d726
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Fri Feb 1 14:20:16 2019 -0800

    mm/hugetlb.c: teach follow_hugetlb_page() to handle FOLL_NOWAIT
    
    commit 1ac25013fb9e4ed595cd608a406191e93520881e upstream.
    
    hugetlb needs the same fix as faultin_nopage (which was applied in
    commit 96312e61282a ("mm/gup.c: teach get_user_pages_unlocked to handle
    FOLL_NOWAIT")) or KVM hangs because it thinks the mmap_sem was already
    released by hugetlb_fault() if it returned VM_FAULT_RETRY, but it wasn't
    in the FOLL_NOWAIT case.
    
    Link: http://lkml.kernel.org/r/20190109020203.26669-2-aarcange@redhat.com
    Fixes: ce53053ce378 ("kvm: switch get_user_page_nowait() to get_user_pages_unlocked()")
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Tested-by: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Reported-by: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d268abf0fd1ddb18a93d5b8a50ce65b095039b28
Author: Andrei Vagin <avagin@gmail.com>
Date:   Fri Feb 1 14:20:24 2019 -0800

    kernel/exit.c: release ptraced tasks before zap_pid_ns_processes
    
    commit 8fb335e078378c8426fabeed1ebee1fbf915690c upstream.
    
    Currently, exit_ptrace() adds all ptraced tasks in a dead list, then
    zap_pid_ns_processes() waits on all tasks in a current pidns, and only
    then are tasks from the dead list released.
    
    zap_pid_ns_processes() can get stuck on waiting tasks from the dead
    list.  In this case, we will have one unkillable process with one or
    more dead children.
    
    Thanks to Oleg for the advice to release tasks in find_child_reaper().
    
    Link: http://lkml.kernel.org/r/20190110175200.12442-1-avagin@gmail.com
    Fixes: 7c8bd2322c7f ("exit: ptrace: shift "reap dead" code from exit_ptrace() to forget_original_parent()")
    Signed-off-by: Andrei Vagin <avagin@gmail.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b06853ecf284f641be50334af56db1e66c5eba33
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Wed Jan 30 07:54:12 2019 -0600

    btrfs: On error always free subvol_name in btrfs_mount
    
    commit 532b618bdf237250d6d4566536d4b6ce3d0a31fe upstream.
    
    The subvol_name is allocated in btrfs_parse_subvol_options and is
    consumed and freed in mount_subvol.  Add a free to the error paths that
    don't call mount_subvol so that it is guaranteed that subvol_name is
    freed when an error happens.
    
    Fixes: 312c89fbca06 ("btrfs: cleanup btrfs_mount() using btrfs_mount_root()")
    Cc: stable@vger.kernel.org # v4.19+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1300efa04447591162443447d8bf2417c5aa26fc
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jan 25 11:48:51 2019 +0000

    Btrfs: fix deadlock when allocating tree block during leaf/node split
    
    commit a6279470762c19ba97e454f90798373dccdf6148 upstream.
    
    When splitting a leaf or node from one of the trees that are modified when
    flushing pending block groups (extent, chunk, device and free space trees),
    we need to allocate a new tree block, which in turn can result in the need
    to allocate a new block group. After allocating the new block group we may
    need to flush new block groups that were previously allocated during the
    course of the current transaction, which is what may cause a deadlock due
    to attempts to write lock twice the same leaf or node, as when splitting
    a leaf or node we are holding a write lock on it and its parent node.
    
    The same type of deadlock can also happen when increasing the tree's
    height, since we are holding a lock on the existing root while allocating
    the tree block to use as the new root node.
    
    An example trace when the deadlock happens during the leaf split path is:
    
      [27175.293054] CPU: 0 PID: 3005 Comm: kworker/u17:6 Tainted: G        W         4.19.16 #1
      [27175.293942] Hardware name: Penguin Computing Relion 1900/MD90-FS0-ZB-XX, BIOS R15 06/25/2018
      [27175.294846] Workqueue: btrfs-extent-refs btrfs_extent_refs_helper [btrfs]
      (...)
      [27175.298384] RSP: 0018:ffffab2087107758 EFLAGS: 00010246
      [27175.299269] RAX: 0000000000000bbd RBX: ffff9fadc7141c48 RCX: 0000000000000001
      [27175.300155] RDX: 0000000000000001 RSI: 0000000000000002 RDI: ffff9fadc7141c48
      [27175.301023] RBP: 0000000000000001 R08: ffff9faeb6ac1040 R09: ffff9fa9c0000000
      [27175.301887] R10: 0000000000000000 R11: 0000000000000040 R12: ffff9fb21aac8000
      [27175.302743] R13: ffff9fb1a64d6a20 R14: 0000000000000001 R15: ffff9fb1a64d6a18
      [27175.303601] FS:  0000000000000000(0000) GS:ffff9fb21fa00000(0000) knlGS:0000000000000000
      [27175.304468] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [27175.305339] CR2: 00007fdc8743ead8 CR3: 0000000763e0a006 CR4: 00000000003606f0
      [27175.306220] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [27175.307087] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [27175.307940] Call Trace:
      [27175.308802]  btrfs_search_slot+0x779/0x9a0 [btrfs]
      [27175.309669]  ? update_space_info+0xba/0xe0 [btrfs]
      [27175.310534]  btrfs_insert_empty_items+0x67/0xc0 [btrfs]
      [27175.311397]  btrfs_insert_item+0x60/0xd0 [btrfs]
      [27175.312253]  btrfs_create_pending_block_groups+0xee/0x210 [btrfs]
      [27175.313116]  do_chunk_alloc+0x25f/0x300 [btrfs]
      [27175.313984]  find_free_extent+0x706/0x10d0 [btrfs]
      [27175.314855]  btrfs_reserve_extent+0x9b/0x1d0 [btrfs]
      [27175.315707]  btrfs_alloc_tree_block+0x100/0x5b0 [btrfs]
      [27175.316548]  split_leaf+0x130/0x610 [btrfs]
      [27175.317390]  btrfs_search_slot+0x94d/0x9a0 [btrfs]
      [27175.318235]  btrfs_insert_empty_items+0x67/0xc0 [btrfs]
      [27175.319087]  alloc_reserved_file_extent+0x84/0x2c0 [btrfs]
      [27175.319938]  __btrfs_run_delayed_refs+0x596/0x1150 [btrfs]
      [27175.320792]  btrfs_run_delayed_refs+0xed/0x1b0 [btrfs]
      [27175.321643]  delayed_ref_async_start+0x81/0x90 [btrfs]
      [27175.322491]  normal_work_helper+0xd0/0x320 [btrfs]
      [27175.323328]  ? move_linked_works+0x6e/0xa0
      [27175.324160]  process_one_work+0x191/0x370
      [27175.324976]  worker_thread+0x4f/0x3b0
      [27175.325763]  kthread+0xf8/0x130
      [27175.326531]  ? rescuer_thread+0x320/0x320
      [27175.327284]  ? kthread_create_worker_on_cpu+0x50/0x50
      [27175.328027]  ret_from_fork+0x35/0x40
      [27175.328741] ---[ end trace 300a1b9f0ac30e26 ]---
    
    Fix this by preventing the flushing of new blocks groups when splitting a
    leaf/node and when inserting a new root node for one of the trees modified
    by the flushing operation, similar to what is done when COWing a node/leaf
    from on of these trees.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=202383
    Reported-by: Eli V <eliventer@gmail.com>
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80ca2c3bd8af1898e605957c03aac0197af4da27
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Wed Oct 31 17:21:28 2018 -0700

    platform/x86: asus-nb-wmi: Drop mapping of 0x33 and 0x34 scan codes
    
    [ Upstream commit 71b12beaf12f21a53bfe100795d0797f1035b570 ]
    
    According to Asus firmware engineers, the meaning of these codes is only
    to notify the OS that the screen brightness has been turned on/off by
    the EC. This does not match the meaning of KEY_DISPLAYTOGGLE /
    KEY_DISPLAY_OFF, where userspace is expected to change the display
    brightness.
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1331b6229fecd2f73baa86108aac993da622a50
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Wed Oct 31 17:21:27 2018 -0700

    platform/x86: asus-nb-wmi: Map 0x35 to KEY_SCREENLOCK
    
    [ Upstream commit b3f2f3799a972d3863d0fdc2ab6287aef6ca631f ]
    
    When the OS registers to handle events from the display off hotkey the
    EC will send a notification with 0x35 for every key press, independent
    of the backlight state.
    
    The behavior of this key on Windows, with the ATKACPI driver from Asus
    installed, is turning off the backlight of all connected displays with a
    fading effect, and any cursor input or key press turning the backlight
    back on. The key press or cursor input that wakes up the display is also
    passed through to the application under the cursor or under focus.
    
    The key that matches this behavior the closest is KEY_SCREENLOCK.
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc0db9e2ca03262709eb7db536d643c60ec49a1e
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Thu Jan 17 12:42:16 2019 -0800

    IB/hfi1: Add limit test for RC/UC send via loopback
    
    commit 09ce351dff8e7636af0beb72cd4a86c3904a0500 upstream.
    
    Fix potential memory corruption and panic in loopback for IB_WR_SEND
    variants.
    
    The code blindly assumes the posted length will fit in the fetched rwqe,
    which is not a valid assumption.
    
    Fix by adding a limit test, and triggering the appropriate send completion
    and putting the QP in an error state.  This mimics the handling for
    non-loopback QPs.
    
    Fixes: 15703461533a ("IB/{hfi1, qib, rdmavt}: Move ruc_loopback to rdmavt")
    Cc: <stable@vger.kernel.org> #v4.20+
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21c2697bb9ccaeaec620aa95ea143f64d2d3772b
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Thu Jan 17 12:42:04 2019 -0800

    IB/hfi1: Remove overly conservative VM_EXEC flag check
    
    commit 7709b0dc265f28695487712c45f02bbd1f98415d upstream.
    
    Applications that use the stack for execution purposes cause userspace PSM
    jobs to fail during mmap().
    
    Both Fortran (non-standard format parsing) and C (callback functions
    located in the stack) applications can be written such that stack
    execution is required. The linker notes this via the gnu_stack ELF flag.
    
    This causes READ_IMPLIES_EXEC to be set which forces all PROT_READ mmaps
    to have PROT_EXEC for the process.
    
    Checking for VM_EXEC bit and failing the request with EPERM is overly
    conservative and will break any PSM application using executable stacks.
    
    Cc: <stable@vger.kernel.org> #v4.14+
    Fixes: 12220267645c ("IB/hfi: Protect against writable mmap")
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfccdac6577c3ce17bb30974d852d6cd1643d001
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Sun Jan 27 10:11:27 2019 +0200

    IB/uverbs: Fix OOPs in uverbs_user_mmap_disassociate
    
    commit 7b21b69ab203136fdc153c7707fa6c409e523c2e upstream.
    
    The vma->vm_mm can become impossible to get before rdma_umap_close() is
    called, in this case we must not try to get an mm that is already
    undergoing process exit. In this case there is no need to wait for
    anything as the VMA will be destroyed by another thread soon and is
    already effectively 'unreachable' by userspace.
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
     PGD 800000012bc50067 P4D 800000012bc50067 PUD 129db5067 PMD 0
     Oops: 0000 [#1] SMP PTI
     CPU: 1 PID: 2050 Comm: bash Tainted: G        W  OE 4.20.0-rc6+ #3
     Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
     RIP: 0010:__rb_erase_color+0xb9/0x280
     Code: 84 17 01 00 00 48 3b 68 10 0f 84 15 01 00 00 48 89
                   58 08 48 89 de 48 89 ef 4c 89 e3 e8 90 84 22 00 e9 60 ff ff ff 48 8b 5d
                   10 <f6> 03 01 0f 84 9c 00 00 00 48 8b 43 10 48 85 c0 74 09 f6 00 01 0f
     RSP: 0018:ffffbecfc090bab8 EFLAGS: 00010246
     RAX: ffff97616346cf30 RBX: 0000000000000000 RCX: 0000000000000101
     RDX: 0000000000000000 RSI: ffff97623b6ca828 RDI: ffff97621ef10828
     RBP: ffff97621ef10828 R08: ffff97621ef10828 R09: 0000000000000000
     R10: 0000000000000000 R11: 0000000000000000 R12: ffff97623b6ca838
     R13: ffffffffbb3fef50 R14: ffff97623b6ca828 R15: 0000000000000000
     FS:  00007f7a5c31d740(0000) GS:ffff97623bb00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000000 CR3: 000000011255a000 CR4: 00000000000006e0
     Call Trace:
      unlink_file_vma+0x3b/0x50
      free_pgtables+0xa1/0x110
      exit_mmap+0xca/0x1a0
      ? mlx5_ib_dealloc_pd+0x28/0x30 [mlx5_ib]
      mmput+0x54/0x140
      uverbs_user_mmap_disassociate+0xcc/0x160 [ib_uverbs]
      uverbs_destroy_ufile_hw+0xf7/0x120 [ib_uverbs]
      ib_uverbs_remove_one+0xea/0x240 [ib_uverbs]
      ib_unregister_device+0xfb/0x200 [ib_core]
      mlx5_ib_remove+0x51/0xe0 [mlx5_ib]
      mlx5_remove_device+0xc1/0xd0 [mlx5_core]
      mlx5_unregister_device+0x3d/0xb0 [mlx5_core]
      remove_one+0x2a/0x90 [mlx5_core]
      pci_device_remove+0x3b/0xc0
      device_release_driver_internal+0x16d/0x240
      unbind_store+0xb2/0x100
      kernfs_fop_write+0x102/0x180
      __vfs_write+0x36/0x1a0
      ? __alloc_fd+0xa9/0x170
      ? set_close_on_exec+0x49/0x70
      vfs_write+0xad/0x1a0
      ksys_write+0x52/0xc0
      do_syscall_64+0x5b/0x180
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Cc: <stable@vger.kernel.org> # 4.19
    Fixes: 5f9794dc94f5 ("RDMA/ucontext: Add a core API for mmaping driver IO memory")
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc755c6a0a4f781ec778ab4a2c01477bdfcc3b29
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Thu Jan 24 14:33:12 2019 +0200

    IB/uverbs: Fix OOPs upon device disassociation
    
    commit 425784aa5b029eeb80498c73a68f62c3ad1d3b3f upstream.
    
    The async_file might be freed before the disassociation has been ended,
    causing qp shutdown to use after free on it.
    
    Since uverbs_destroy_ufile_hw is not a fence, it returns if a
    disassociation is ongoing in another thread. It has to be written this way
    to avoid deadlock. However this means that the ufile FD close cannot
    destroy anything that may still be used by an active kref, such as the the
    async_file.
    
    To fix that move the kref_put() to be in ib_uverbs_release_file().
    
     BUG: unable to handle kernel paging request at ffffffffba682787
     PGD bc80e067 P4D bc80e067 PUD bc80f063 PMD 1313df163 PTE 80000000bc682061
     Oops: 0003 [#1] SMP PTI
     CPU: 1 PID: 32410 Comm: bash Tainted: G           OE 4.20.0-rc6+ #3
     Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
     RIP: 0010:__pv_queued_spin_lock_slowpath+0x1b3/0x2a0
     Code: 98 83 e2 60 49 89 df 48 8b 04 c5 80 18 72 ba 48 8d
                    ba 80 32 02 00 ba 00 80 00 00 4c 8d 65 14 41 bd 01 00 00 00 48 01 c7 85
                    d2 <48> 89 2f 48 89 fb 74 14 8b 45 08 85 c0 75 42 84 d2 74 6b f3 90 83
     RSP: 0018:ffffc1bbc064fb58 EFLAGS: 00010006
     RAX: ffffffffba65f4e7 RBX: ffff9f209c656c00 RCX: 0000000000000001
     RDX: 0000000000008000 RSI: 0000000000000000 RDI: ffffffffba682787
     RBP: ffff9f217bb23280 R08: 0000000000000001 R09: 0000000000000000
     R10: ffff9f209d2c7800 R11: ffffffffffffffe8 R12: ffff9f217bb23294
     R13: 0000000000000001 R14: 0000000000000000 R15: ffff9f209c656c00
     FS:  00007fac55aad740(0000) GS:ffff9f217bb00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: ffffffffba682787 CR3: 000000012f8e0000 CR4: 00000000000006e0
     Call Trace:
      _raw_spin_lock_irq+0x27/0x30
      ib_uverbs_release_uevent+0x1e/0xa0 [ib_uverbs]
      uverbs_free_qp+0x7e/0x90 [ib_uverbs]
      destroy_hw_idr_uobject+0x1c/0x50 [ib_uverbs]
      uverbs_destroy_uobject+0x2e/0x180 [ib_uverbs]
      __uverbs_cleanup_ufile+0x73/0x90 [ib_uverbs]
      uverbs_destroy_ufile_hw+0x5d/0x120 [ib_uverbs]
      ib_uverbs_remove_one+0xea/0x240 [ib_uverbs]
      ib_unregister_device+0xfb/0x200 [ib_core]
      mlx5_ib_remove+0x51/0xe0 [mlx5_ib]
      mlx5_remove_device+0xc1/0xd0 [mlx5_core]
      mlx5_unregister_device+0x3d/0xb0 [mlx5_core]
      remove_one+0x2a/0x90 [mlx5_core]
      pci_device_remove+0x3b/0xc0
      device_release_driver_internal+0x16d/0x240
      unbind_store+0xb2/0x100
      kernfs_fop_write+0x102/0x180
      __vfs_write+0x36/0x1a0
      ? __alloc_fd+0xa9/0x170
      ? set_close_on_exec+0x49/0x70
      vfs_write+0xad/0x1a0
      ksys_write+0x52/0xc0
      do_syscall_64+0x5b/0x180
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
     RIP: 0033:0x7fac551aac60
    
    Cc: <stable@vger.kernel.org> # 4.2
    Fixes: 036b10635739 ("IB/uverbs: Enable device removal when there are active user space applications")
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c66684e35c97ff129d26b23d5bde5aba1c4e94f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jan 25 17:11:32 2019 +0100

    ALSA: pcm: Fix tight loop of OSS capture stream
    
    commit e190161f96b88ffae870405fd6c3fdd1d2e7f98d upstream.
    
    When the trigger=off is passed for a PCM OSS stream, it sets the
    start_threshold of the given substream to the boundary size, so that
    it won't be automatically started.  This can be problematic for a
    capture stream, unfortunately, as detected by syzkaller.  The scenario
    is like the following:
    
    - In __snd_pcm_lib_xfer() that is invoked from snd_pcm_oss_read()
      loop, we have a check whether the stream was already started or the
      stream can be auto-started.
    - The function at this check returns 0 with trigger=off since we
      explicitly disable the auto-start.
    - The loop continues and repeats calling __snd_pcm_lib_xfer() tightly,
      which may lead to an RCU stall.
    
    This patch fixes the bug by simply allowing the wait for non-started
    stream in the case of OSS capture.  For native usages, it's supposed
    to be done by the caller side (which is user-space), hence it returns
    zero like before.
    
    (In theory, __snd_pcm_lib_xfer() could wait even for the native API
     usage cases, too; but I'd like to stay in a safer side for not
     breaking the existing stuff for now.)
    
    Reported-by: syzbot+fbe0496f92a0ce7b786c@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c697687f89de68583fef88a445bb2e564ae0e871
Author: Kailang Yang <kailang@realtek.com>
Date:   Tue Jan 29 15:38:21 2019 +0800

    ALSA: hda/realtek - Fixed hp_pin no value
    
    commit 693abe11aa6b27aed6eb8222162f8fb986325cef upstream.
    
    Fix hp_pin always no value.
    
    [More notes on the changes:
    
     The hp_pin value that is referred in alc294_hp_init() is always zero
     at the moment the function gets called, hence this is actually
     useless as in the current code.
    
     And, this kind of init sequence should be called from the codec init
     callback, instead of the parser function.  So, the first fix in this
     patch to move the call call into its own init_hook.
    
     OTOH, this function is needed to be called only once after the boot,
     and it'd take too long for invoking at each resume (where the init
     callback gets called).  So we add a new flag and invoke this only
     once as an additional fix.
    
     The one case is still not covered, though: S4 resume.  But this
     change itself won't lead to any regression in that regard, so we
     leave S4 issue as is for now and fix it later.  -- tiwai ]
    
    Fixes: bde1a7459623 ("ALSA: hda/realtek - Fixed headphone issue for ALC700")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5f6b0d2301bdb01e6ef1c711f70dd3c40b05a6a
Author: Olek Poplavsky <woodenbits@gmail.com>
Date:   Thu Jan 24 23:30:03 2019 -0500

    ALSA: usb-audio: Add Opus #3 to quirks for native DSD support
    
    commit 9e6966646b6bc5078d579151b90016522d4ff2cb upstream.
    
    This patch adds quirk VID/PID IDs for the Opus #3 DAP (made by 'The Bit')
    in order to enable Native DSD support.
    
    [ NOTE: this could be handled in the generic way with fp->dvd_raw if
      we add 0x10cb to the vendor whitelist, but since 0x10cb shows a
      different vendor name (Erantech), put to the individual entry at
      this time -- tiwai ]
    
    Signed-off-by: Olek Poplavsky <woodenbits@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7db50615993e9e1abf0556a45238548f30fe9813
Author: Chaotian Jing <chaotian.jing@mediatek.com>
Date:   Wed Jan 23 20:05:25 2019 +0800

    mmc: mediatek: fix incorrect register setting of hs400_cmd_int_delay
    
    commit 3751e008da0df4384031bd66a516c0292f915605 upstream.
    
    to set cmd internal delay, need set PAD_TUNE register but not PAD_CMD_TUNE
    register.
    
    Signed-off-by: Chaotian Jing <chaotian.jing@mediatek.com>
    Fixes: 1ede5cb88a29 ("mmc: mediatek: Use data tune for CMD line tune")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c681206446051606f4a198e61990b0cd90972776
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Jan 19 16:31:00 2019 +0100

    mmc: bcm2835: Fix DMA channel leak on probe error
    
    commit 8c9620b1cc9b69e82fa8d4081d646d0016b602e7 upstream.
    
    The BCM2835 MMC host driver requests a DMA channel on probe but neglects
    to release the channel in the probe error path.  The channel may
    therefore be leaked, in particular if devm_clk_get() causes probe
    deferral.  Fix it.
    
    Fixes: 660fc733bd74 ("mmc: bcm2835: Add new driver for the sdhost controller.")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v4.12+
    Cc: Frank Pavlic <f.pavlic@kunbus.de>
    Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccbf07b21139da5d82d2f6187a14d038685e2861
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Wed Jan 30 21:30:36 2019 +0100

    gfs2: Revert "Fix loop in gfs2_rbm_find"
    
    commit e74c98ca2d6ae4376cc15fa2a22483430909d96b upstream.
    
    This reverts commit 2d29f6b96d8f80322ed2dd895bca590491c38d34.
    
    It turns out that the fix can lead to a ~20 percent performance regression
    in initial writes to the page cache according to iozone.  Let's revert this
    for now to have more time for a proper fix.
    
    Cc: stable@vger.kernel.org # v3.13+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0daa1c121a063f509a50fff4fbf84ec24a34bd6a
Author: Neo Hou <neo.hou@unisoc.com>
Date:   Wed Jan 16 13:06:14 2019 +0800

    gpio: sprd: Fix incorrect irq type setting for the async EIC
    
    commit f785ffb61605734b518afa766d1b5445e9f38c8d upstream.
    
    When setting async EIC as IRQ_TYPE_EDGE_BOTH type, we missed to set the
    SPRD_EIC_ASYNC_INTMODE register to 0, which means detecting edge signals.
    
    Thus this patch fixes the issue.
    
    Fixes: 25518e024e3a ("gpio: Add Spreadtrum EIC driver support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Neo Hou <neo.hou@unisoc.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eca5a12b5dee4dedb0cc324834e8be8d7dea8aa
Author: Neo Hou <neo.hou@unisoc.com>
Date:   Wed Jan 16 13:06:13 2019 +0800

    gpio: sprd: Fix the incorrect data register
    
    commit 09d158d52d2bceda736797a61b6c13d7fc83707b upstream.
    
    Since differnt type EICs have its own data register to read, thus fix the
    incorrect data register.
    
    Fixes: 25518e024e3a ("gpio: Add Spreadtrum EIC driver support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Neo Hou <neo.hou@unisoc.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e40be0ac3b4798f0ce917ad69d491a15bb56379
Author: Roger Quadros <rogerq@ti.com>
Date:   Wed Jan 9 11:11:24 2019 +0200

    gpio: pcf857x: Fix interrupts on multiple instances
    
    commit 2486e67374aa8b7854c2de32869642c2873b3d53 upstream.
    
    When multiple instances of pcf857x chips are present, a fix up
    message [1] is printed during the probe of the 2nd and later
    instances.
    
    The issue is that the driver is using the same irq_chip data
    structure between multiple instances.
    
    Fix this by allocating the irq_chip data structure per instance.
    
    [1] fix up message addressed by this patch
    [    1.212100] gpio gpiochip9: (pcf8575): detected irqchip that is shared with multiple gpiochips: please fix the driver.
    
    Cc: Stable <stable@vger.kernel.org>
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a2793a443dc133a5fa873a0aacf0e413fd7064a
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 4 11:24:20 2019 +0100

    gpiolib: fix line event timestamps for nested irqs
    
    commit 1033be58992f818dc564196ded2bcc3f360bc297 upstream.
    
    Nested interrupts run inside the calling thread's context and the top
    half handler is never called which means that we never read the
    timestamp.
    
    This issue came up when trying to read line events from a gpiochip
    using regmap_irq_chip for interrupts.
    
    Fix it by reading the timestamp from the irq thread function if it's
    still 0 by the time the second handler is called.
    
    Fixes: d58f2bf261fd ("gpio: Timestamp events in hardirq handler")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed6ac6b668c790a10df0e79af9f319488a33fa48
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Jan 23 08:00:57 2019 +0800

    gpio: altera-a10sr: Set proper output level for direction_output
    
    commit 2095a45e345e669ea77a9b34bdd7de5ceb422f93 upstream.
    
    The altr_a10sr_gpio_direction_output should set proper output level
    based on the value argument.
    
    Fixes: 26a48c4cc2f1 ("gpio: altera-a10sr: Add A10 System Resource Chip GPIO support.")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Tested by: Thor Thayer <thor.thayer@linux.intel.com>
    Reviewed by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d082dc579eb40c79f534b4a30a8a72b01e7193
Author: James Morse <james.morse@arm.com>
Date:   Thu Jan 24 16:32:57 2019 +0000

    arm64: hibernate: Clean the __hyp_text to PoC after resume
    
    commit f7daa9c8fd191724b9ab9580a7be55cd1a67d799 upstream.
    
    During resume hibernate restores all physical memory. Any memory
    that is accessed with the MMU disabled needs to be cleaned to the
    PoC.
    
    KVMs __hyp_text was previously ommitted as it runs with the MMU
    enabled, but now that the hyp-stub is located in this section,
    we must clean __hyp_text too.
    
    This ensures secondary CPUs that come online after hibernate
    has finished resuming, and load KVM via the freshly written
    hyp-stub see the correct instructions.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4b2de570d3b08123e9e418a12dd66bb6a23506b
Author: James Morse <james.morse@arm.com>
Date:   Thu Jan 24 16:32:56 2019 +0000

    arm64: hyp-stub: Forbid kprobing of the hyp-stub
    
    commit 8fac5cbdfe0f01254d9d265c6aa1a95f94f58595 upstream.
    
    The hyp-stub is loaded by the kernel's early startup code at EL2
    during boot, before KVM takes ownership later. The hyp-stub's
    text is part of the regular kernel text, meaning it can be kprobed.
    
    A breakpoint in the hyp-stub causes the CPU to spin in el2_sync_invalid.
    
    Add it to the __hyp_text.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bebca1b247b8aba9c221fe76b3b098c322ff020
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Thu Jan 24 17:28:37 2019 +0000

    arm64: Do not issue IPIs for user executable ptes
    
    commit 132fdc379eb143932d209a20fd581e1ce7630960 upstream.
    
    Commit 3b8c9f1cdfc5 ("arm64: IPI each CPU after invalidating the I-cache
    for kernel mappings") was aimed at fixing the I-cache invalidation for
    kernel mappings. However, it inadvertently caused all cache maintenance
    for user mappings via set_pte_at() -> __sync_icache_dcache() ->
    sync_icache_aliases() to call kick_all_cpus_sync().
    
    Reported-by: Shijith Thotton <sthotton@marvell.com>
    Tested-by: Shijith Thotton <sthotton@marvell.com>
    Reported-by: Wandun Chen <chenwandun@huawei.com>
    Fixes: 3b8c9f1cdfc5 ("arm64: IPI each CPU after invalidating the I-cache for kernel mappings")
    Cc: <stable@vger.kernel.org> # 4.19.x-
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a256a4fb1887dde6887255f530e239cde57c94d5
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sun Jan 27 09:29:42 2019 +0100

    arm64: kaslr: ensure randomized quantities are clean also when kaslr is off
    
    commit 8ea235932314311f15ea6cf65c1393ed7e31af70 upstream.
    
    Commit 1598ecda7b23 ("arm64: kaslr: ensure randomized quantities are
    clean to the PoC") added cache maintenance to ensure that global
    variables set by the kaslr init routine are not wiped clean due to
    cache invalidation occurring during the second round of page table
    creation.
    
    However, if kaslr_early_init() exits early with no randomization
    being applied (either due to the lack of a seed, or because the user
    has disabled kaslr explicitly), no cache maintenance is performed,
    leading to the same issue we attempted to fix earlier, as far as the
    module_alloc_base variable is concerned.
    
    Note that module_alloc_base cannot be initialized statically, because
    that would cause it to be subject to a R_AARCH64_RELATIVE relocation,
    causing it to be overwritten by the second round of KASLR relocation
    processing.
    
    Fixes: f80fb3a3d508 ("arm64: add support for kernel ASLR")
    Cc: <stable@vger.kernel.org> # v4.6+
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de74cfdf620384a3778c43605bd8daef7aca5a09
Author: Koen Vandeputte <koen.vandeputte@ncentric.com>
Date:   Thu Jan 31 15:00:01 2019 -0600

    ARM: cns3xxx: Fix writing to wrong PCI config registers after alignment
    
    commit 65dbb423cf28232fed1732b779249d6164c5999b upstream.
    
    Originally, cns3xxx used its own functions for mapping, reading and
    writing config registers.
    
    Commit 802b7c06adc7 ("ARM: cns3xxx: Convert PCI to use generic config
    accessors") removed the internal PCI config write function in favor of
    the generic one:
    
      cns3xxx_pci_write_config() --> pci_generic_config_write()
    
    cns3xxx_pci_write_config() expected aligned addresses, being produced by
    cns3xxx_pci_map_bus() while the generic one pci_generic_config_write()
    actually expects the real address as both the function and hardware are
    capable of byte-aligned writes.
    
    This currently leads to pci_generic_config_write() writing to the wrong
    registers.
    
    For instance, upon ath9k module loading:
    
    - driver ath9k gets loaded
    - The driver wants to write value 0xA8 to register PCI_LATENCY_TIMER,
      located at 0x0D
    - cns3xxx_pci_map_bus() aligns the address to 0x0C
    - pci_generic_config_write() effectively writes 0xA8 into register 0x0C
      (CACHE_LINE_SIZE)
    
    Fix the bug by removing the alignment in the cns3xxx mapping function.
    
    Fixes: 802b7c06adc7 ("ARM: cns3xxx: Convert PCI to use generic config accessors")
    Signed-off-by: Koen Vandeputte <koen.vandeputte@ncentric.com>
    [lorenzo.pieralisi@arm.com: updated commit log]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Krzysztof Halasa <khalasa@piap.pl>
    Acked-by: Tim Harvey <tharvey@gateworks.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    CC: stable@vger.kernel.org      # v4.0+
    CC: Bjorn Helgaas <bhelgaas@google.com>
    CC: Olof Johansson <olof@lixom.net>
    CC: Robin Leblon <robin.leblon@ncentric.com>
    CC: Rob Herring <robh@kernel.org>
    CC: Russell King <linux@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cac11486ac6d24d970f8209004f263e0aa5d2cf
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Tue Jan 29 15:52:55 2019 -0500

    NFS: Fix up return value on fatal errors in nfs_page_async_flush()
    
    commit 8fc75bed96bb94e23ca51bd9be4daf65c57697bf upstream.
    
    Ensure that we return the fatal error value that caused us to exit
    nfs_page_async_flush().
    
    Fixes: c373fff7bd25 ("NFSv4: Don't special case "launder"")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org # v4.12+
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ae83cb1f39a6715a3f3527dd1d1993fd72ca403
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Jan 25 10:33:59 2019 -0800

    selftests/seccomp: Enhance per-arch ptrace syscall skip tests
    
    commit ed5f13261cb65b02c611ae9971677f33581d4286 upstream.
    
    Passing EPERM during syscall skipping was confusing since the test wasn't
    actually exercising the errno evaluation -- it was just passing a literal
    "1" (EPERM). Instead, expand the tests to check both direct value returns
    (positive, 45000 in this case), and errno values (negative, -ESRCH in this
    case) to check both fake success and fake failure during syscall skipping.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Fixes: a33b2d0359a0 ("selftests/seccomp: Add tests for basic ptrace actions")
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b3d0c4a12fb7dc794d5f0a84a6634a9bfa728ab
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Wed Jan 16 20:11:44 2019 +0100

    iommu/vt-d: Fix memory leak in intel_iommu_put_resv_regions()
    
    commit 198bc3252ea3a45b0c5d500e6a5b91cfdd08f001 upstream.
    
    Commit 9d3a4de4cb8d ("iommu: Disambiguate MSI region types") changed
    the reserved region type in intel_iommu_get_resv_regions() from
    IOMMU_RESV_RESERVED to IOMMU_RESV_MSI, but it forgot to also change
    the type in intel_iommu_put_resv_regions().
    
    This leads to a memory leak, because now the check in
    intel_iommu_put_resv_regions() for IOMMU_RESV_RESERVED will never
    be true, and no allocated regions will be freed.
    
    Fix this by changing the region type in intel_iommu_put_resv_regions()
    to IOMMU_RESV_MSI, matching the type of the allocated regions.
    
    Fixes: 9d3a4de4cb8d ("iommu: Disambiguate MSI region types")
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de881e65ba81d3ddf220d8c0513c03d5841511fc
Author: Waiman Long <longman@redhat.com>
Date:   Wed Jan 30 13:52:36 2019 -0500

    fs/dcache: Fix incorrect nr_dentry_unused accounting in shrink_dcache_sb()
    
    commit 1dbd449c9943e3145148cc893c2461b72ba6fef0 upstream.
    
    The nr_dentry_unused per-cpu counter tracks dentries in both the LRU
    lists and the shrink lists where the DCACHE_LRU_LIST bit is set.
    
    The shrink_dcache_sb() function moves dentries from the LRU list to a
    shrink list and subtracts the dentry count from nr_dentry_unused.  This
    is incorrect as the nr_dentry_unused count will also be decremented in
    shrink_dentry_list() via d_shrink_del().
    
    To fix this double decrement, the decrement in the shrink_dcache_sb()
    function is taken out.
    
    Fixes: 4e717f5c1083 ("list_lru: remove special case function list_lru_dispose_all."
    Cc: stable@kernel.org
    Signed-off-by: Waiman Long <longman@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bffb1eb45cd428553af5784307a1411a6f31f8f0
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Fri Jan 18 15:54:34 2019 -0800

    CIFS: Do not consider -ENODATA as stat failure for reads
    
    commit 082aaa8700415f6471ec9c5ef0c8307ca214989a upstream.
    
    When doing reads beyound the end of a file the server returns
    error STATUS_END_OF_FILE error which is mapped to -ENODATA.
    Currently we report it as a failure which confuses read stats.
    Change it to not consider -ENODATA as failure for stat purposes.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2da24a1c475c9a284de4a7eac57bf3de7e34cbca
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Thu Jan 31 13:46:07 2019 +0100

    CIFS: fix use-after-free of the lease keys
    
    commit d339adc12a4f885b572c5412e4869af8939db854 upstream.
    
    The request buffers are freed right before copying the pointers.
    Use the func args instead which are identical and still valid.
    
    Simple reproducer (requires KASAN enabled) on a cifs mount:
    
    echo foo > foo ; tail -f foo & rm foo
    
    Cc: <stable@vger.kernel.org> # 4.20
    Fixes: 179e44d49c2f ("smb3: add tracepoint for sending lease break responses to server")
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Paulo Alcantara <palcantara@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50dd5c261f729f2b5714577cdaba50a75f9d7455
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Fri Jan 25 11:38:53 2019 -0800

    CIFS: Fix trace command logging for SMB2 reads and writes
    
    commit 7d42e72fe8ee5ab70b1af843dd7d8615e6fb0abe upstream.
    
    Currently we log success once we send an async IO request to
    the server. Instead we need to analyse a response and then log
    success or failure for a particular command. Also fix argument
    list for read logging.
    
    Cc: <stable@vger.kernel.org> # 4.18
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd4a745d51c52893cdd31799fc148b629a62bf62
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Wed Jan 23 17:12:09 2019 -0800

    CIFS: Fix possible oops and memory leaks in async IO
    
    commit 9bda8723da2d55b1de833b98cf802b88006e5b69 upstream.
    
    Allocation of a page array for non-cached IO was separated from
    allocation of rdata and wdata structures and this introduced memory
    leaks and a possible null pointer dereference. This patch fixes
    these problems.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39d00e20e9065b38f0b8cc3d49cb063bbe9c6dd3
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Sat Jan 26 12:21:32 2019 -0800

    CIFS: Do not count -ENODATA as failure for query directory
    
    commit 8e6e72aeceaaed5aeeb1cb43d3085de7ceb14f79 upstream.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25cb7ffd8b1b49a2e9e887bee24e5626bb14fa0b
Author: David Ahern <dsahern@gmail.com>
Date:   Wed Jan 2 18:57:09 2019 -0800

    ipv6: Consider sk_bound_dev_if when binding a socket to an address
    
    [ Upstream commit c5ee066333ebc322a24a00a743ed941a0c68617e ]
    
    IPv6 does not consider if the socket is bound to a device when binding
    to an address. The result is that a socket can be bound to eth0 and then
    bound to the address of eth1. If the device is a VRF, the result is that
    a socket can only be bound to an address in the default VRF.
    
    Resolve by considering the device if sk_bound_dev_if is set.
    
    This problem exists from the beginning of git history.
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95ee755f964d854e1474fbc6b87217a5d3abfc61
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:59 2019 +0900

    virtio_net: Differentiate sk_buff and xdp_frame on freeing
    
    [ Upstream commit 5050471d35d1316ba32dfcbb409978337eb9e75e
    
      I had to fold commit df133f3f9625 ("virtio_net: bulk free tx skbs")
      into this to make it work.  ]
    
    We do not reset or free up unused buffers when enabling/disabling XDP,
    so it can happen that xdp_frames are freed after disabling XDP or
    sk_buffs are freed after enabling XDP on xdp tx queues.
    Thus we need to handle both forms (xdp_frames and sk_buffs) regardless
    of XDP setting.
    One way to trigger this problem is to disable XDP when napi_tx is
    enabled. In that case, virtnet_xdp_set() calls virtnet_napi_enable()
    which kicks NAPI. The NAPI handler will call virtnet_poll_cleantx()
    which invokes free_old_xmit_skbs() for queues which have been used by
    XDP.
    
    Note that even with this change we need to keep skipping
    free_old_xmit_skbs() from NAPI handlers when XDP is enabled, because XDP
    tx queues do not aquire queue locks.
    
    - v2: Use napi_consume_skb() instead of dev_consume_skb_any()
    
    Fixes: 4941d472bf95 ("virtio-net: do not reset during XDP set")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a60a8b8a3040e7d2e31c294eac88a506de8dd6cb
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:58 2019 +0900

    virtio_net: Use xdp_return_frame to free xdp_frames on destroying vqs
    
    [ Upstream commit 07b344f494ddda9f061b396407c96df8c46c82b5 ]
    
    put_page() can work as a fallback for freeing xdp_frames, but the
    appropriate way is to use xdp_return_frame().
    
    Fixes: cac320c850ef ("virtio_net: convert to use generic xdp_frame and xdp_return_frame API")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86f99ec8463e91c607dde4ee508451275a0bbfed
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:57 2019 +0900

    virtio_net: Don't process redirected XDP frames when XDP is disabled
    
    [ Upstream commit 03aa6d34868c07b2b1b8b2db080602d7ec528173 ]
    
    Commit 8dcc5b0ab0ec ("virtio_net: fix ndo_xdp_xmit crash towards dev not
    ready for XDP") tried to avoid access to unexpected sq while XDP is
    disabled, but was not complete.
    
    There was a small window which causes out of bounds sq access in
    virtnet_xdp_xmit() while disabling XDP.
    
    An example case of
     - curr_queue_pairs = 6 (2 for SKB and 4 for XDP)
     - online_cpu_num = xdp_queue_paris = 4
    when XDP is enabled:
    
    CPU 0                         CPU 1
    (Disabling XDP)               (Processing redirected XDP frames)
    
                                  virtnet_xdp_xmit()
    virtnet_xdp_set()
     _virtnet_set_queues()
      set curr_queue_pairs (2)
                                   check if rq->xdp_prog is not NULL
                                   virtnet_xdp_sq(vi)
                                    qp = curr_queue_pairs -
                                         xdp_queue_pairs +
                                         smp_processor_id()
                                       = 2 - 4 + 1 = -1
                                    sq = &vi->sq[qp] // out of bounds access
      set xdp_queue_pairs (0)
      rq->xdp_prog = NULL
    
    Basically we should not change curr_queue_pairs and xdp_queue_pairs
    while someone can read the values. Thus, when disabling XDP, assign NULL
    to rq->xdp_prog first, and wait for RCU grace period, then change
    xxx_queue_pairs.
    Note that we need to keep the current order when enabling XDP though.
    
    - v2: Make rcu_assign_pointer/synchronize_net conditional instead of
          _virtnet_set_queues.
    
    Fixes: 186b3c998c50 ("virtio-net: support XDP_REDIRECT")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40d05836779ad3adb01f93e79ec21c97a72a8339
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:56 2019 +0900

    virtio_net: Fix out of bounds access of sq
    
    [ Upstream commit 1667c08a9d31c7cdf09f4890816bfbf20b685495 ]
    
    When XDP is disabled, curr_queue_pairs + smp_processor_id() can be
    larger than max_queue_pairs.
    There is no guarantee that we have enough XDP send queues dedicated for
    each cpu when XDP is disabled, so do not count drops on sq in that case.
    
    Fixes: 5b8f3c8d30a6 ("virtio_net: Add XDP related stats")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5401bd93f508551421d9733494ae163c8c51c7e
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:55 2019 +0900

    virtio_net: Fix not restoring real_num_rx_queues
    
    [ Upstream commit 188313c137c4f76afd0862f50dbc185b198b9e2a ]
    
    When _virtnet_set_queues() failed we did not restore real_num_rx_queues.
    Fix this by placing the change of real_num_rx_queues after
    _virtnet_set_queues().
    This order is also in line with virtnet_set_channels().
    
    Fixes: 4941d472bf95 ("virtio-net: do not reset during XDP set")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c826556972fc29e96ee8509a69dac19157d4dcab
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:54 2019 +0900

    virtio_net: Don't call free_old_xmit_skbs for xdp_frames
    
    [ Upstream commit 534da5e856334fb54cb0272a9fb3afec28ea3aed ]
    
    When napi_tx is enabled, virtnet_poll_cleantx() called
    free_old_xmit_skbs() even for xdp send queue.
    This is bogus since the queue has xdp_frames, not sk_buffs, thus mangled
    device tx bytes counters because skb->len is meaningless value, and even
    triggered oops due to general protection fault on freeing them.
    
    Since xdp send queues do not aquire locks, old xdp_frames should be
    freed only in virtnet_xdp_xmit(), so just skip free_old_xmit_skbs() for
    xdp send queues.
    
    Similarly virtnet_poll_tx() called free_old_xmit_skbs(). This NAPI
    handler is called even without calling start_xmit() because cb for tx is
    by default enabled. Once the handler is called, it enabled the cb again,
    and then the handler would be called again. We don't need this handler
    for XDP, so don't enable cb as well as not calling free_old_xmit_skbs().
    
    Also, we need to disable tx NAPI when disabling XDP, so
    virtnet_poll_tx() can safely access curr_queue_pairs and
    xdp_queue_pairs, which are not atomically updated while disabling XDP.
    
    Fixes: b92f1e6751a6 ("virtio-net: transmit napi")
    Fixes: 7b0411ef4aa6 ("virtio-net: clean tx descriptors from rx napi")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a773c5cb51078d7cb7b5ba9aea039dbb7d9b6d85
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Jan 29 09:45:53 2019 +0900

    virtio_net: Don't enable NAPI when interface is down
    
    [ Upstream commit 8be4d9a492f88b96d4d3a06c6cbedbc40ca14c83 ]
    
    Commit 4e09ff536284 ("virtio-net: disable NAPI only when enabled during
    XDP set") tried to fix inappropriate NAPI enabling/disabling when
    !netif_running(), but was not complete.
    
    On error path virtio_net could enable NAPI even when !netif_running().
    This can cause enabling NAPI twice on virtnet_open(), which would
    trigger BUG_ON() in napi_enable().
    
    Fixes: 4941d472bf95b ("virtio-net: do not reset during XDP set")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb77e08da85fba41c646795d1865df2fdff59a90
Author: Dave Watson <davejwatson@fb.com>
Date:   Sun Jan 27 00:57:38 2019 +0000

    net: tls: Save iv in tls_rec for async crypto requests
    
    [ Upstream commit 32eb67b93c9e3cd62cb423e30b090cdd4aa8d275 ]
    
    aead_request_set_crypt takes an iv pointer, and we change the iv
    soon after setting it.  Some async crypto algorithms don't save the iv,
    so we need to save it in the tls_rec for async requests.
    
    Found by hardcoding x64 aesni to use async crypto manager (to test the async
    codepath), however I don't think this combination can happen in the wild.
    Presumably other hardware offloads will need this fix, but there have been
    no user reports.
    
    Fixes: a42055e8d2c30 ("Add support for async encryption of records...")
    Signed-off-by: Dave Watson <davejwatson@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c293753e4e7f6d82fdd565d18484189c1fe7f50
Author: Dave Watson <davejwatson@fb.com>
Date:   Sun Jan 27 00:59:03 2019 +0000

    net: tls: Fix deadlock in free_resources tx
    
    [ Upstream commit 1023121375c6b0b3dc00334983c762ba2b76cb19 ]
    
    If there are outstanding async tx requests (when crypto returns EINPROGRESS),
    there is a potential deadlock: the tx work acquires the lock, while we
    cancel_delayed_work_sync() while holding the lock.  Drop the lock while waiting
    for the work to complete.
    
    Fixes: a42055e8d2c30 ("Add support for async encryption of records...")
    Signed-off-by: Dave Watson <davejwatson@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9516163d4c4f58982a7d01fc8a8310d7a9c41966
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 22 02:42:41 2019 +0800

    sctp: set flow sport from saddr only when it's 0
    
    [ Upstream commit ecf938fe7d0088077ee1280419a2b3c5429b47c8 ]
    
    Now sctp_transport_pmtu() passes transport->saddr into .get_dst() to set
    flow sport from 'saddr'. However, transport->saddr is set only when
    transport->dst exists in sctp_transport_route().
    
    If sctp_transport_pmtu() is called without transport->saddr set, like
    when transport->dst doesn't exists, the flow sport will be set to 0
    from transport->saddr, which will cause a wrong route to be got.
    
    Commit 6e91b578bf3f ("sctp: re-use sctp_transport_pmtu in
    sctp_transport_route") made the issue be triggered more easily
    since sctp_transport_pmtu() would be called in sctp_transport_route()
    after that.
    
    In gerneral, fl4->fl4_sport should always be set to
    htons(asoc->base.bind_addr.port), unless transport->asoc doesn't exist
    in sctp_v4/6_get_dst(), which is the case:
    
      sctp_ootb_pkt_new() ->
        sctp_transport_route()
    
    For that, we can simply handle it by setting flow sport from saddr only
    when it's 0 in sctp_v4/6_get_dst().
    
    Fixes: 6e91b578bf3f ("sctp: re-use sctp_transport_pmtu in sctp_transport_route")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d4ddd5e364f1b926d9f0707274405fedb643150
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 22 02:42:09 2019 +0800

    sctp: set chunk transport correctly when it's a new asoc
    
    [ Upstream commit 4ff40b86262b73553ee47cc3784ce8ba0f220bd8 ]
    
    In the paths:
    
      sctp_sf_do_unexpected_init() ->
        sctp_make_init_ack()
      sctp_sf_do_dupcook_a/b()() ->
        sctp_sf_do_5_1D_ce()
    
    The new chunk 'retval' transport is set from the incoming chunk 'chunk'
    transport. However, 'retval' transport belong to the new asoc, which
    is a different one from 'chunk' transport's asoc.
    
    It will cause that the 'retval' chunk gets set with a wrong transport.
    Later when sending it and because of Commit b9fd683982c9 ("sctp: add
    sctp_packet_singleton"), sctp_packet_singleton() will set some fields,
    like vtag to 'retval' chunk from that wrong transport's asoc.
    
    This patch is to fix it by setting 'retval' transport correctly which
    belongs to the right asoc in sctp_make_init_ack() and
    sctp_sf_do_5_1D_ce().
    
    Fixes: b9fd683982c9 ("sctp: add sctp_packet_singleton")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26542ade62be641358698496369e7b0b5249939b
Author: Bodong Wang <bodong@mellanox.com>
Date:   Sun Jan 13 22:47:26 2019 -0600

    Revert "net/mlx5e: E-Switch, Initialize eswitch only if eswitch manager"
    
    [ Upstream commit 4e046de0f50e04acd48eb373d6a9061ddf014e0c ]
    
    This reverts commit 5f5991f36dce1e69dd8bd7495763eec2e28f08e7.
    
    With the original commit, eswitch instance will not be initialized for
    a function which is vport group manager but not eswitch manager such as
    host PF on SmartNIC (BlueField) card. This will result in a kernel crash
    when such a vport group manager is trying to access vports in its group.
    E.g, PF vport manager (not eswitch manager) tries to configure the MAC
    of its VF vport, a kernel trace will happen similar as bellow:
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
     ...
     RIP: 0010:mlx5_eswitch_get_vport_config+0xc/0x180 [mlx5_core]
     ...
    
    Fixes: 5f5991f36dce ("net/mlx5e: E-Switch, Initialize eswitch only if eswitch manager")
    Signed-off-by: Bodong Wang <bodong@mellanox.com>
    Reported-by: Yuval Avnery <yuvalav@mellanox.com>
    Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4162e715048578938b1ae153dae8d96b9d391ac
Author: Nir Dotan <nird@mellanox.com>
Date:   Sun Jan 27 09:26:22 2019 +0200

    ip6mr: Fix notifiers call on mroute_clean_tables()
    
    [ Upstream commit 146820cc240f4389cf33481c058d9493aef95e25 ]
    
    When the MC route socket is closed, mroute_clean_tables() is called to
    cleanup existing routes. Mistakenly notifiers call was put on the cleanup
    of the unresolved MC route entries cache.
    In a case where the MC socket closes before an unresolved route expires,
    the notifier call leads to a crash, caused by the driver trying to
    increment a non initialized refcount_t object [1] and then when handling
    is done, to decrement it [2]. This was detected by a test recently added in
    commit 6d4efada3b82 ("selftests: forwarding: Add multicast routing test").
    
    Fix that by putting notifiers call on the resolved entries traversal,
    instead of on the unresolved entries traversal.
    
    [1]
    
    [  245.748967] refcount_t: increment on 0; use-after-free.
    [  245.754829] WARNING: CPU: 3 PID: 3223 at lib/refcount.c:153 refcount_inc_checked+0x2b/0x30
    ...
    [  245.802357] Hardware name: Mellanox Technologies Ltd. MSN2740/SA001237, BIOS 5.6.5 06/07/2016
    [  245.811873] RIP: 0010:refcount_inc_checked+0x2b/0x30
    ...
    [  245.907487] Call Trace:
    [  245.910231]  mlxsw_sp_router_fib_event.cold.181+0x42/0x47 [mlxsw_spectrum]
    [  245.917913]  notifier_call_chain+0x45/0x7
    [  245.922484]  atomic_notifier_call_chain+0x15/0x20
    [  245.927729]  call_fib_notifiers+0x15/0x30
    [  245.932205]  mroute_clean_tables+0x372/0x3f
    [  245.936971]  ip6mr_sk_done+0xb1/0xc0
    [  245.940960]  ip6_mroute_setsockopt+0x1da/0x5f0
    ...
    
    [2]
    
    [  246.128487] refcount_t: underflow; use-after-free.
    [  246.133859] WARNING: CPU: 0 PID: 7 at lib/refcount.c:187 refcount_sub_and_test_checked+0x4c/0x60
    [  246.183521] Hardware name: Mellanox Technologies Ltd. MSN2740/SA001237, BIOS 5.6.5 06/07/2016
    ...
    [  246.193062] Workqueue: mlxsw_core_ordered mlxsw_sp_router_fibmr_event_work [mlxsw_spectrum]
    [  246.202394] RIP: 0010:refcount_sub_and_test_checked+0x4c/0x60
    ...
    [  246.298889] Call Trace:
    [  246.301617]  refcount_dec_and_test_checked+0x11/0x20
    [  246.307170]  mlxsw_sp_router_fibmr_event_work.cold.196+0x47/0x78 [mlxsw_spectrum]
    [  246.315531]  process_one_work+0x1fa/0x3f0
    [  246.320005]  worker_thread+0x2f/0x3e0
    [  246.324083]  kthread+0x118/0x130
    [  246.327683]  ? wq_update_unbound_numa+0x1b0/0x1b0
    [  246.332926]  ? kthread_park+0x80/0x80
    [  246.337013]  ret_from_fork+0x1f/0x30
    
    Fixes: 088aa3eec2ce ("ip6mr: Support fib notifications")
    Signed-off-by: Nir Dotan <nird@mellanox.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49fe5881981ad0c8ef626d3526c18c9416a17ec4
Author: Aya Levin <ayal@mellanox.com>
Date:   Mon Dec 24 09:48:42 2018 +0200

    net/mlx5e: Allow MAC invalidation while spoofchk is ON
    
    [ Upstream commit 9d2cbdc5d334967c35b5f58c7bf3208e17325647 ]
    
    Prior to this patch the driver prohibited spoof checking on invalid MAC.
    Now the user can set this configuration if it wishes to.
    
    This is required since libvirt might invalidate the VF Mac by setting it
    to zero, while spoofcheck is ON.
    
    Fixes: 1ab2068a4c66 ("net/mlx5: Implement vports admin state backup/restore")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 031eda88739e06823a64e79eb6d5bb88afafa7b3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 22 02:40:12 2019 +0800

    sctp: improve the events for sctp stream adding
    
    [ Upstream commit 8220c870cb0f4eaa4e335c9645dbd9a1c461c1dd ]
    
    This patch is to improve sctp stream adding events in 2 places:
    
      1. In sctp_process_strreset_addstrm_out(), move up SCTP_MAX_STREAM
         and in stream allocation failure checks, as the adding has to
         succeed after reconf_timer stops for the in stream adding
         request retransmission.
    
      3. In sctp_process_strreset_addstrm_in(), no event should be sent,
         as no in or out stream is added here.
    
    Fixes: 50a41591f110 ("sctp: implement receiver-side procedures for the Add Outgoing Streams Request Parameter")
    Fixes: c5c4ebb3ab87 ("sctp: implement receiver-side procedures for the Add Incoming Streams Request Parameter")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 510b552b1cb9f60272e0ffe4031c703c9e08fd44
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Mon Jan 28 22:23:49 2019 +0100

    net: ip6_gre: always reports o_key to userspace
    
    [ Upstream commit c706863bc8902d0c2d1a5a27ac8e1ead5d06b79d ]
    
    As Erspan_v4, Erspan_v6 protocol relies on o_key to configure
    session id header field. However TUNNEL_KEY bit is cleared in
    ip6erspan_tunnel_xmit since ERSPAN protocol does not set the key field
    of the external GRE header and so the configured o_key is not reported
    to userspace. The issue can be triggered with the following reproducer:
    
    $ip link add ip6erspan1 type ip6erspan local 2000::1 remote 2000::2 \
        key 1 seq erspan_ver 1
    $ip link set ip6erspan1 up
    ip -d link sh ip6erspan1
    
    ip6erspan1@NONE: <BROADCAST,MULTICAST> mtu 1422 qdisc noop state DOWN mode DEFAULT
        link/ether ba:ff:09:24:c3:0e brd ff:ff:ff:ff:ff:ff promiscuity 0 minmtu 68 maxmtu 1500
        ip6erspan remote 2000::2 local 2000::1 encaplimit 4 flowlabel 0x00000 ikey 0.0.0.1 iseq oseq
    
    Fix the issue adding TUNNEL_KEY bit to the o_flags parameter in
    ip6gre_fill_info
    
    Fixes: 5a963eb61b7c ("ip6_gre: Add ERSPAN native tunnel support")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6706210b3897492ffe74907b5126444ddbf9f166
Author: Jason Wang <jasowang@redhat.com>
Date:   Mon Jan 28 15:05:05 2019 +0800

    vhost: fix OOB in get_rx_bufs()
    
    [ Upstream commit b46a0bf78ad7b150ef5910da83859f7f5a514ffd ]
    
    After batched used ring updating was introduced in commit e2b3b35eb989
    ("vhost_net: batch used ring update in rx"). We tend to batch heads in
    vq->heads for more than one packet. But the quota passed to
    get_rx_bufs() was not correctly limited, which can result a OOB write
    in vq->heads.
    
            headcount = get_rx_bufs(vq, vq->heads + nvq->done_idx,
                        vhost_len, &in, vq_log, &log,
                        likely(mergeable) ? UIO_MAXIOV : 1);
    
    UIO_MAXIOV was still used which is wrong since we could have batched
    used in vq->heads, this will cause OOB if the next buffer needs more
    than 960 (1024 (UIO_MAXIOV) - 64 (VHOST_NET_BATCH)) heads after we've
    batched 64 (VHOST_NET_BATCH) heads:
    Acked-by: Stefan Hajnoczi <stefanha@redhat.com>
    
    =============================================================================
    BUG kmalloc-8k (Tainted: G    B            ): Redzone overwritten
    -----------------------------------------------------------------------------
    
    INFO: 0x00000000fd93b7a2-0x00000000f0713384. First byte 0xa9 instead of 0xcc
    INFO: Allocated in alloc_pd+0x22/0x60 age=3933677 cpu=2 pid=2674
        kmem_cache_alloc_trace+0xbb/0x140
        alloc_pd+0x22/0x60
        gen8_ppgtt_create+0x11d/0x5f0
        i915_ppgtt_create+0x16/0x80
        i915_gem_create_context+0x248/0x390
        i915_gem_context_create_ioctl+0x4b/0xe0
        drm_ioctl_kernel+0xa5/0xf0
        drm_ioctl+0x2ed/0x3a0
        do_vfs_ioctl+0x9f/0x620
        ksys_ioctl+0x6b/0x80
        __x64_sys_ioctl+0x11/0x20
        do_syscall_64+0x43/0xf0
        entry_SYSCALL_64_after_hwframe+0x44/0xa9
    INFO: Slab 0x00000000d13e87af objects=3 used=3 fp=0x          (null) flags=0x200000000010201
    INFO: Object 0x0000000003278802 @offset=17064 fp=0x00000000e2e6652b
    
    Fixing this by allocating UIO_MAXIOV + VHOST_NET_BATCH iovs for
    vhost-net. This is done through set the limitation through
    vhost_dev_init(), then set_owner can allocate the number of iov in a
    per device manner.
    
    This fixes CVE-2018-16880.
    
    Fixes: e2b3b35eb989 ("vhost_net: batch used ring update in rx")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6297b1b7ff6e00cfe6ae0d8d3a0b9dfbdbb38a6f
Author: Mathias Thore <mathias.thore@infinera.com>
Date:   Mon Jan 28 10:07:47 2019 +0100

    ucc_geth: Reset BQL queue when stopping device
    
    [ Upstream commit e15aa3b2b1388c399c1a2ce08550d2cc4f7e3e14 ]
    
    After a timeout event caused by for example a broadcast storm, when
    the MAC and PHY are reset, the BQL TX queue needs to be reset as
    well. Otherwise, the device will exhibit severe performance issues
    even after the storm has ended.
    
    Co-authored-by: David Gounaris <david.gounaris@infinera.com>
    Signed-off-by: Mathias Thore <mathias.thore@infinera.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d54f0c387b1de056130a788dfe4f0a0bf753581c
Author: George Amanakis <gamanakis@gmail.com>
Date:   Tue Jan 29 22:50:13 2019 -0500

    tun: move the call to tun_set_real_num_queues
    
    [ Upstream commit 3a03cb8456cc1d61c467a5375e0a10e5207b948c ]
    
    Call tun_set_real_num_queues() after the increment of tun->numqueues
    since the former depends on it. Otherwise, the number of queues is not
    correctly accounted for, which results to warnings similar to:
    "vnet0 selects TX queue 11, but real number of TX queues is 11".
    
    Fixes: 0b7959b62573 ("tun: publish tfile after it's fully initialized")
    Reported-and-tested-by: George Amanakis <gamanakis@gmail.com>
    Signed-off-by: George Amanakis <gamanakis@gmail.com>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bc41f518300dada8c856eb4b61cbaabe83b4774
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 22 02:39:34 2019 +0800

    sctp: improve the events for sctp stream reset
    
    [ Upstream commit 2e6dc4d95110becfe0ff4c3d4749c33ea166e9e7 ]
    
    This patch is to improve sctp stream reset events in 4 places:
    
      1. In sctp_process_strreset_outreq(), the flag should always be set with
         SCTP_STREAM_RESET_INCOMING_SSN instead of OUTGOING, as receiver's in
         stream is reset here.
      2. In sctp_process_strreset_outreq(), move up SCTP_STRRESET_ERR_WRONG_SSN
         check, as the reset has to succeed after reconf_timer stops for the
         in stream reset request retransmission.
      3. In sctp_process_strreset_inreq(), no event should be sent, as no in
         or out stream is reset here.
      4. In sctp_process_strreset_resp(), SCTP_STREAM_RESET_INCOMING_SSN or
         OUTGOING event should always be sent for stream reset requests, no
         matter it fails or succeeds to process the request.
    
    Fixes: 810544764536 ("sctp: implement receiver-side procedures for the Outgoing SSN Reset Request Parameter")
    Fixes: 16e1a91965b0 ("sctp: implement receiver-side procedures for the Incoming SSN Reset Request Parameter")
    Fixes: 11ae76e67a17 ("sctp: implement receiver-side procedures for the Reconf Response Parameter")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c69df4f9c5fd30753c6770afcb6b7e9a0e02187e
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Wed Jan 23 12:14:52 2019 +0100

    ravb: expand rx descriptor data to accommodate hw checksum
    
    [ Upstream commit 12da64300fbc76b875900445f4146c3dc617d43e ]
    
    EtherAVB may provide a checksum of packet data appended to packet data. In
    order to allow this checksum to be received by the host descriptor data
    needs to be enlarged by 2 bytes to accommodate the checksum.
    
    In the case of MTU-sized packets without a VLAN tag the
    checksum were already accommodated by virtue of the space reserved for the
    VLAN tag. However, a packet of MTU-size with a  VLAN tag consumed all
    packet data space provided by a descriptor leaving no space for the
    trailing checksum.
    
    This was not detected by the driver which incorrectly used the last two
    bytes of packet data as the checksum and truncate the packet by two bytes.
    This resulted all such packets being dropped.
    
    A work around is to disable RX checksum offload
     # ethtool -K eth0 rx off
    
    This patch resolves this problem by increasing the size available for
    packet data in RX descriptors by two bytes.
    
    Tested on R-Car E3 (r8a77990) ES1.0 based Ebisu-4D board
    
    v2
    * Use sizeof(__sum16) directly rather than adding a driver-local
      #define for the size of the checksum provided by the hw (2 bytes).
    
    Fixes: 4d86d3818627 ("ravb: RX checksum offload")
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad32f158aa22c6f8cd0c2e0b79ca39d29bff87a5
Author: Josh Elsasser <jelsasser@appneta.com>
Date:   Sat Jan 26 14:38:33 2019 -0800

    net: set default network namespace in init_dummy_netdev()
    
    [ Upstream commit 35edfdc77f683c8fd27d7732af06cf6489af60a5 ]
    
    Assign a default net namespace to netdevs created by init_dummy_netdev().
    Fixes a NULL pointer dereference caused by busy-polling a socket bound to
    an iwlwifi wireless device, which bumps the per-net BUSYPOLLRXPACKETS stat
    if napi_poll() received packets:
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000190
      IP: napi_busy_loop+0xd6/0x200
      Call Trace:
        sock_poll+0x5e/0x80
        do_sys_poll+0x324/0x5a0
        SyS_poll+0x6c/0xf0
        do_syscall_64+0x6b/0x1f0
        entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Fixes: 7db6b048da3b ("net: Commonize busy polling code to focus on napi_id instead of socket")
    Signed-off-by: Josh Elsasser <jelsasser@appneta.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32d9062a8853dda0fcdee65524441b58922a6120
Author: Bernard Pidoux <f6bvp@free.fr>
Date:   Fri Jan 25 11:46:40 2019 +0100

    net/rose: fix NULL ax25_cb kernel panic
    
    [ Upstream commit b0cf029234f9b18e10703ba5147f0389c382bccc ]
    
    When an internally generated frame is handled by rose_xmit(),
    rose_route_frame() is called:
    
            if (!rose_route_frame(skb, NULL)) {
                    dev_kfree_skb(skb);
                    stats->tx_errors++;
                    return NETDEV_TX_OK;
            }
    
    We have the same code sequence in Net/Rom where an internally generated
    frame is handled by nr_xmit() calling nr_route_frame(skb, NULL).
    However, in this function NULL argument is tested while it is not in
    rose_route_frame().
    Then kernel panic occurs later on when calling ax25cmp() with a NULL
    ax25_cb argument as reported many times and recently with syzbot.
    
    We need to test if ax25 is NULL before using it.
    
    Testing:
    Built kernel with CONFIG_ROSE=y.
    
    Signed-off-by: Bernard Pidoux <f6bvp@free.fr>
    Acked-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: syzbot+1a2c456a1ea08fa5b5f7@syzkaller.appspotmail.com
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Bernard Pidoux <f6bvp@free.fr>
    Cc: linux-hams@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 519e8a22a454b1f1baa3a151b184fe51bc18e178
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Jan 24 14:18:18 2019 -0800

    netrom: switch to sock timer API
    
    [ Upstream commit 63346650c1a94a92be61a57416ac88c0a47c4327 ]
    
    sk_reset_timer() and sk_stop_timer() properly handle
    sock refcnt for timer function. Switching to them
    could fix a refcounting bug reported by syzbot.
    
    Reported-and-tested-by: syzbot+defa700d16f1bd1b9a05@syzkaller.appspotmail.com
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-hams@vger.kernel.org
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e04ca4863fa367b54d7f0d0f5f4c1abdfefe8f2
Author: Aya Levin <ayal@mellanox.com>
Date:   Tue Jan 22 15:19:44 2019 +0200

    net/mlx4_core: Add masking for a few queries on HCA caps
    
    [ Upstream commit a40ded6043658444ee4dd6ee374119e4e98b33fc ]
    
    Driver reads the query HCA capabilities without the corresponding masks.
    Without the correct masks, the base addresses of the queues are
    unaligned.  In addition some reserved bits were wrongly read.  Using the
    correct masks, ensures alignment of the base addresses and allows future
    firmware versions safe use of the reserved bits.
    
    Fixes: ab9c17a009ee ("mlx4_core: Modify driver initialization flow to accommodate SRIOV for Ethernet")
    Fixes: 0ff1fb654bec ("{NET, IB}/mlx4: Add device managed flow steering firmware API")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c42b60e2305008cc5eceecbc80322302283a3e74
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Jan 22 14:47:19 2019 -0800

    net/ipv6: don't return positive numbers when nothing was dumped
    
    [ Upstream commit 1518039f6b5ac794313c24c76f85cead0cd60f6c ]
    
    in6_dump_addrs() returns a positive 1 if there was nothing to dump.
    This return value can not be passed as return from inet6_dump_addr()
    as is, because it will confuse rtnetlink, resulting in NLMSG_DONE
    never getting set:
    
    $ ip addr list dev lo
    EOF on netlink
    Dump terminated
    
    v2: flip condition to avoid a new goto (DaveA)
    
    Fixes: 7c1e8a3817c5 ("netlink: fixup regression in RTM_GETADDR")
    Reported-by: Brendan Galloway <brendan.galloway@netronome.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Tested-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5195acd38ae48b7b5c186f522cd4351441297859
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Fri Jan 18 12:05:39 2019 +0100

    net: ip_gre: use erspan key field for tunnel lookup
    
    [ Upstream commit cb73ee40b1b381eaf3749e6dbeed567bb38e5258 ]
    
    Use ERSPAN key header field as tunnel key in gre_parse_header routine
    since ERSPAN protocol sets the key field of the external GRE header to
    0 resulting in a tunnel lookup fail in ip6gre_err.
    In addition remove key field parsing and pskb_may_pull check in
    erspan_rcv and ip6erspan_rcv
    
    Fixes: 5a963eb61b7c ("ip6_gre: Add ERSPAN native tunnel support")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3395c773ea958f32622acb55e5815dce5ae5051c
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Mon Jan 28 22:23:48 2019 +0100

    net: ip_gre: always reports o_key to userspace
    
    [ Upstream commit feaf5c796b3f0240f10d0d6d0b686715fd58a05b ]
    
    Erspan protocol (version 1 and 2) relies on o_key to configure
    session id header field. However TUNNEL_KEY bit is cleared in
    erspan_xmit since ERSPAN protocol does not set the key field
    of the external GRE header and so the configured o_key is not reported
    to userspace. The issue can be triggered with the following reproducer:
    
    $ip link add erspan1 type erspan local 192.168.0.1 remote 192.168.0.2 \
        key 1 seq erspan_ver 1
    $ip link set erspan1 up
    $ip -d link sh erspan1
    
    erspan1@NONE: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc pfifo_fast state UNKNOWN mode DEFAULT
      link/ether 52:aa:99:95:9a:b5 brd ff:ff:ff:ff:ff:ff promiscuity 0 minmtu 68 maxmtu 1500
      erspan remote 192.168.0.2 local 192.168.0.1 ttl inherit ikey 0.0.0.1 iseq oseq erspan_index 0
    
    Fix the issue adding TUNNEL_KEY bit to the o_flags parameter in
    ipgre_fill_info
    
    Fixes: 84e54fe0a5ea ("gre: introduce native tunnel support for ERSPAN")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cac9e3fba19f8e0f8a5a391e505216071b37d9ec
Author: Jacob Wen <jian.w.wen@oracle.com>
Date:   Wed Jan 30 14:55:14 2019 +0800

    l2tp: fix reading optional fields of L2TPv3
    
    [ Upstream commit 4522a70db7aa5e77526a4079628578599821b193 ]
    
    Use pskb_may_pull() to make sure the optional fields are in skb linear
    parts, so we can safely read them later.
    
    It's easy to reproduce the issue with a net driver that supports paged
    skb data. Just create a L2TPv3 over IP tunnel and then generates some
    network traffic.
    Once reproduced, rx err in /sys/kernel/debug/l2tp/tunnels will increase.
    
    Changes in v4:
    1. s/l2tp_v3_pull_opt/l2tp_v3_ensure_opt_in_linear/
    2. s/tunnel->version != L2TP_HDR_VER_2/tunnel->version == L2TP_HDR_VER_3/
    3. Add 'Fixes' in commit messages.
    
    Changes in v3:
    1. To keep consistency, move the code out of l2tp_recv_common.
    2. Use "net" instead of "net-next", since this is a bug fix.
    
    Changes in v2:
    1. Only fix L2TPv3 to make code simple.
       To fix both L2TPv3 and L2TPv2, we'd better refactor l2tp_recv_common.
       It's complicated to do so.
    2. Reloading pointers after pskb_may_pull
    
    Fixes: f7faffa3ff8e ("l2tp: Add L2TPv3 protocol support")
    Fixes: 0d76751fad77 ("l2tp: Add L2TPv3 IP encapsulation (no UDP) support")
    Fixes: a32e0eec7042 ("l2tp: introduce L2TPv3 IP encapsulation support for IPv6")
    Signed-off-by: Jacob Wen <jian.w.wen@oracle.com>
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16ac09ecc31529d5000284eab108280746f1868d
Author: Jacob Wen <jian.w.wen@oracle.com>
Date:   Thu Jan 31 15:18:56 2019 +0800

    l2tp: copy 4 more bytes to linear part if necessary
    
    [ Upstream commit 91c524708de6207f59dd3512518d8a1c7b434ee3 ]
    
    The size of L2TPv2 header with all optional fields is 14 bytes.
    l2tp_udp_recv_core only moves 10 bytes to the linear part of a
    skb. This may lead to l2tp_recv_common read data outside of a skb.
    
    This patch make sure that there is at least 14 bytes in the linear
    part of a skb to meet the maximum need of l2tp_udp_recv_core and
    l2tp_recv_common. The minimum size of both PPP HDLC-like frame and
    Ethernet frame is larger than 14 bytes, so we are safe to do so.
    
    Also remove L2TP_HDR_SIZE_NOSEQ, it is unused now.
    
    Fixes: fd558d186df2 ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Suggested-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Jacob Wen <jian.w.wen@oracle.com>
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61d228f94b58e86145011c13dc8929844264e212
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Jan 30 12:49:48 2019 +0100

    ipvlan, l3mdev: fix broken l3s mode wrt local routes
    
    [ Upstream commit d5256083f62e2720f75bb3c5a928a0afe47d6bc3 ]
    
    While implementing ipvlan l3 and l3s mode for kubernetes CNI plugin,
    I ran into the issue that while l3 mode is working fine, l3s mode
    does not have any connectivity to kube-apiserver and hence all pods
    end up in Error state as well. The ipvlan master device sits on
    top of a bond device and hostns traffic to kube-apiserver (also running
    in hostns) is DNATed from 10.152.183.1:443 to 139.178.29.207:37573
    where the latter is the address of the bond0. While in l3 mode, a
    curl to https://10.152.183.1:443 or to https://139.178.29.207:37573
    works fine from hostns, neither of them do in case of l3s. In the
    latter only a curl to https://127.0.0.1:37573 appeared to work where
    for local addresses of bond0 I saw kernel suddenly starting to emit
    ARP requests to query HW address of bond0 which remained unanswered
    and neighbor entries in INCOMPLETE state. These ARP requests only
    happen while in l3s.
    
    Debugging this further, I found the issue is that l3s mode is piggy-
    backing on l3 master device, and in this case local routes are using
    l3mdev_master_dev_rcu(dev) instead of net->loopback_dev as per commit
    f5a0aab84b74 ("net: ipv4: dst for local input routes should use l3mdev
    if relevant") and 5f02ce24c269 ("net: l3mdev: Allow the l3mdev to be
    a loopback"). I found that reverting them back into using the
    net->loopback_dev fixed ipvlan l3s connectivity and got everything
    working for the CNI.
    
    Now judging from 4fbae7d83c98 ("ipvlan: Introduce l3s mode") and the
    l3mdev paper in [0] the only sole reason why ipvlan l3s is relying
    on l3 master device is to get the l3mdev_ip_rcv() receive hook for
    setting the dst entry of the input route without adding its own
    ipvlan specific hacks into the receive path, however, any l3 domain
    semantics beyond just that are breaking l3s operation. Note that
    ipvlan also has the ability to dynamically switch its internal
    operation from l3 to l3s for all ports via ipvlan_set_port_mode()
    at runtime. In any case, l3 vs l3s soley distinguishes itself by
    'de-confusing' netfilter through switching skb->dev to ipvlan slave
    device late in NF_INET_LOCAL_IN before handing the skb to L4.
    
    Minimal fix taken here is to add a IFF_L3MDEV_RX_HANDLER flag which,
    if set from ipvlan setup, gets us only the wanted l3mdev_l3_rcv() hook
    without any additional l3mdev semantics on top. This should also have
    minimal impact since dev->priv_flags is already hot in cache. With
    this set, l3s mode is working fine and I also get things like
    masquerading pod traffic on the ipvlan master properly working.
    
      [0] https://netdevconf.org/1.2/papers/ahern-what-is-l3mdev-paper.pdf
    
    Fixes: f5a0aab84b74 ("net: ipv4: dst for local input routes should use l3mdev if relevant")
    Fixes: 5f02ce24c269 ("net: l3mdev: Allow the l3mdev to be a loopback")
    Fixes: 4fbae7d83c98 ("ipvlan: Introduce l3s mode")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Cc: David Ahern <dsa@cumulusnetworks.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Martynas Pumputis <m@lambda.lt>
    Acked-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b71b7e0280f47b4ac633fbfd153423814ea87810
Author: Yohei Kanemaru <yohei.kanemaru@gmail.com>
Date:   Tue Jan 29 15:52:34 2019 +0900

    ipv6: sr: clear IP6CB(skb) on SRH ip4ip6 encapsulation
    
    [ Upstream commit ef489749aae508e6f17886775c075f12ff919fb1 ]
    
    skb->cb may contain data from previous layers (in an observed case
    IPv4 with L3 Master Device). In the observed scenario, the data in
    IPCB(skb)->frags was misinterpreted as IP6CB(skb)->frag_max_size,
    eventually caused an unexpected IPv6 fragmentation in ip6_fragment()
    through ip6_finish_output().
    
    This patch clears IP6CB(skb), which potentially contains garbage data,
    on the SRH ip4ip6 encapsulation.
    
    Fixes: 32d99d0b6702 ("ipv6: sr: add support for ip4ip6 encapsulation")
    Signed-off-by: Yohei Kanemaru <yohei.kanemaru@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cedc04f5082c8507c6210b8971befd7ffe6cf25c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Aug 13 23:23:44 2018 +0200

    drm/msm/gpu: fix building without debugfs
    
    commit c878a628e0c483ec36fa70f4590e4a58e34a6e49 upstream.
    
    When debugfs is disabled, but coredump is turned on, the adreno driver fails to build:
    
    drivers/gpu/drm/msm/adreno/a3xx_gpu.c:460:4: error: 'struct msm_gpu_funcs' has no member named 'show'
       .show = adreno_show,
        ^~~~
    drivers/gpu/drm/msm/adreno/a3xx_gpu.c:460:11: note: (near initialization for 'funcs.base')
    drivers/gpu/drm/msm/adreno/a3xx_gpu.c:460:11: error: initialization of 'void (*)(struct msm_gpu *, struct msm_gem_submit *, struct msm_file_private *)' from incompatible pointer type 'void (*)(struct msm_gpu *, struct msm_gpu_state *, struct drm_printer *)' [-Werror=incompatible-pointer-types]
    drivers/gpu/drm/msm/adreno/a3xx_gpu.c:460:11: note: (near initialization for 'funcs.base.submit')
    drivers/gpu/drm/msm/adreno/a4xx_gpu.c:546:4: error: 'struct msm_gpu_funcs' has no member named 'show'
    drivers/gpu/drm/msm/adreno/a5xx_gpu.c:1460:4: error: 'struct msm_gpu_funcs' has no member named 'show'
    drivers/gpu/drm/msm/adreno/a6xx_gpu.c:769:4: error: 'struct msm_gpu_funcs' has no member named 'show'
    drivers/gpu/drm/msm/msm_gpu.c: In function 'msm_gpu_devcoredump_read':
    drivers/gpu/drm/msm/msm_gpu.c:289:12: error: 'const struct msm_gpu_funcs' has no member named 'show'
    
    Adjust the #ifdef to make it build again.
    
    Fixes: c0fec7f562ec ("drm/msm/gpu: Capture the GPU state on a GPU hang")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
