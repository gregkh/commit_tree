commit 0c52d2a4d9e9c5659feb05f718bb37d3eab6f591
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Sep 26 18:05:28 2020 +0200

    Linux 5.8.12
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jeffrin Jose T <jeffrin@rajagiritech.edu.in>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200925124727.878494124@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 973f3e32fefe736e11c4dc407ebf7df0e6e645bf
Author: Maor Dickman <maord@nvidia.com>
Date:   Wed Sep 2 16:49:52 2020 +0300

    net/mlx5e: Fix endianness when calculating pedit mask first bit
    
    [ Upstream commit 82198d8bcdeff01d19215d712aa55031e21bccbc ]
    
    The field mask value is provided in network byte order and has to
    be converted to host byte order before calculating pedit mask
    first bit.
    
    Fixes: 88f30bbcbaaa ("net/mlx5e: Bit sized fields rewrite support")
    Signed-off-by: Maor Dickman <maord@nvidia.com>
    Reviewed-by: Roi Dayan <roid@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fa560ecd2cafc20aa65983cc17495e7d0b54528
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Thu Jun 11 14:25:19 2020 +0300

    net/mlx5e: Use synchronize_rcu to sync with NAPI
    
    [ Upstream commit 9c25a22dfb00270372224721fed646965420323a ]
    
    As described in the previous commit, napi_synchronize doesn't quite fit
    the purpose when we just need to wait until the currently running NAPI
    quits. Its implementation waits until NAPI is not running by polling and
    waiting for 1ms in between. In cases where we need to deactivate one
    queue (e.g., recovery flows) or where we deactivate them one-by-one
    (deactivate channel flow), we may get stuck in napi_synchronize forever
    if other queues keep NAPI active, causing a soft lockup. Depending on
    kernel configuration (CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC), it may result
    in a kernel panic.
    
    To fix the issue, use synchronize_rcu to wait for NAPI to quit, and wrap
    the whole NAPI in rcu_read_lock.
    
    Fixes: acc6c5953af1 ("net/mlx5e: Split open/close channels to stages")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb02cd23a450528cd1e117caaa40113172c340d2
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Thu Jun 11 13:55:19 2020 +0300

    net/mlx5e: Use RCU to protect rq->xdp_prog
    
    [ Upstream commit fe45386a208277cae4648106133c08246eecd012 ]
    
    Currently, the RQs are temporarily deactivated while hot-replacing the
    XDP program, and napi_synchronize is used to make sure rq->xdp_prog is
    not in use. However, napi_synchronize is not ideal: instead of waiting
    till the end of a NAPI cycle, it polls and waits until NAPI is not
    running, sleeping for 1ms between the periodic checks. Under heavy
    workloads, this loop will never end, which may even lead to a kernel
    panic if the kernel detects the hangup. Such workloads include XSK TX
    and possibly also heavy RX (XSK or normal).
    
    The fix is inspired by commit 326fe02d1ed6 ("net/mlx4_en: protect
    ring->xdp_prog with rcu_read_lock"). As mlx5e_xdp_handle is already
    protected by rcu_read_lock, and bpf_prog_put uses call_rcu to free the
    program, there is no need for additional synchronization if proper RCU
    functions are used to access the pointer. This patch converts all
    accesses to rq->xdp_prog to use RCU functions.
    
    Fixes: 86994156c736 ("net/mlx5e: XDP fast RX drop bpf programs support")
    Fixes: db05815b36cb ("net/mlx5e: Add XSK zero-copy support")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb67766834c890ac7367d03e89102c07d4255305
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Sep 7 15:54:41 2020 +0000

    Revert "netns: don't disable BHs when locking "nsid_lock""
    
    [ Upstream commit e1f469cd5866499ac40bfdca87411e1c525a10c7 ]
    
    This reverts commit 8d7e5dee972f1cde2ba96c621f1541fa36e7d4f4.
    
    To protect netns id, the nsid_lock is used when netns id is being
    allocated and removed by peernet2id_alloc() and unhash_nsid().
    The nsid_lock can be used in BH context but only spin_lock() is used
    in this code.
    Using spin_lock() instead of spin_lock_bh() can result in a deadlock in
    the following scenario reported by the lockdep.
    In order to avoid a deadlock, the spin_lock_bh() should be used instead
    of spin_lock() to acquire nsid_lock.
    
    Test commands:
        ip netns del nst
        ip netns add nst
        ip link add veth1 type veth peer name veth2
        ip link set veth1 netns nst
        ip netns exec nst ip link add name br1 type bridge vlan_filtering 1
        ip netns exec nst ip link set dev br1 up
        ip netns exec nst ip link set dev veth1 master br1
        ip netns exec nst ip link set dev veth1 up
        ip netns exec nst ip link add macvlan0 link br1 up type macvlan
    
    Splat looks like:
    [   33.615860][  T607] WARNING: SOFTIRQ-safe -> SOFTIRQ-unsafe lock order detected
    [   33.617194][  T607] 5.9.0-rc1+ #665 Not tainted
    [ ... ]
    [   33.670615][  T607] Chain exists of:
    [   33.670615][  T607]   &mc->mca_lock --> &bridge_netdev_addr_lock_key --> &net->nsid_lock
    [   33.670615][  T607]
    [   33.673118][  T607]  Possible interrupt unsafe locking scenario:
    [   33.673118][  T607]
    [   33.674599][  T607]        CPU0                    CPU1
    [   33.675557][  T607]        ----                    ----
    [   33.676516][  T607]   lock(&net->nsid_lock);
    [   33.677306][  T607]                                local_irq_disable();
    [   33.678517][  T607]                                lock(&mc->mca_lock);
    [   33.679725][  T607]                                lock(&bridge_netdev_addr_lock_key);
    [   33.681166][  T607]   <Interrupt>
    [   33.681791][  T607]     lock(&mc->mca_lock);
    [   33.682579][  T607]
    [   33.682579][  T607]  *** DEADLOCK ***
    [ ... ]
    [   33.922046][  T607] stack backtrace:
    [   33.922999][  T607] CPU: 3 PID: 607 Comm: ip Not tainted 5.9.0-rc1+ #665
    [   33.924099][  T607] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [   33.925714][  T607] Call Trace:
    [   33.926238][  T607]  dump_stack+0x78/0xab
    [   33.926905][  T607]  check_irq_usage+0x70b/0x720
    [   33.927708][  T607]  ? iterate_chain_key+0x60/0x60
    [   33.928507][  T607]  ? check_path+0x22/0x40
    [   33.929201][  T607]  ? check_noncircular+0xcf/0x180
    [   33.930024][  T607]  ? __lock_acquire+0x1952/0x1f20
    [   33.930860][  T607]  __lock_acquire+0x1952/0x1f20
    [   33.931667][  T607]  lock_acquire+0xaf/0x3a0
    [   33.932366][  T607]  ? peernet2id_alloc+0x3a/0x170
    [   33.933147][  T607]  ? br_port_fill_attrs+0x54c/0x6b0 [bridge]
    [   33.934140][  T607]  ? br_port_fill_attrs+0x5de/0x6b0 [bridge]
    [   33.935113][  T607]  ? kvm_sched_clock_read+0x14/0x30
    [   33.935974][  T607]  _raw_spin_lock+0x30/0x70
    [   33.936728][  T607]  ? peernet2id_alloc+0x3a/0x170
    [   33.937523][  T607]  peernet2id_alloc+0x3a/0x170
    [   33.938313][  T607]  rtnl_fill_ifinfo+0xb5e/0x1400
    [   33.939091][  T607]  rtmsg_ifinfo_build_skb+0x8a/0xf0
    [   33.939953][  T607]  rtmsg_ifinfo_event.part.39+0x17/0x50
    [   33.940863][  T607]  rtmsg_ifinfo+0x1f/0x30
    [   33.941571][  T607]  __dev_notify_flags+0xa5/0xf0
    [   33.942376][  T607]  ? __irq_work_queue_local+0x49/0x50
    [   33.943249][  T607]  ? irq_work_queue+0x1d/0x30
    [   33.943993][  T607]  ? __dev_set_promiscuity+0x7b/0x1a0
    [   33.944878][  T607]  __dev_set_promiscuity+0x7b/0x1a0
    [   33.945758][  T607]  dev_set_promiscuity+0x1e/0x50
    [   33.946582][  T607]  br_port_set_promisc+0x1f/0x40 [bridge]
    [   33.947487][  T607]  br_manage_promisc+0x8b/0xe0 [bridge]
    [   33.948388][  T607]  __dev_set_promiscuity+0x123/0x1a0
    [   33.949244][  T607]  __dev_set_rx_mode+0x68/0x90
    [   33.950021][  T607]  dev_uc_add+0x50/0x60
    [   33.950720][  T607]  macvlan_open+0x18e/0x1f0 [macvlan]
    [   33.951601][  T607]  __dev_open+0xd6/0x170
    [   33.952269][  T607]  __dev_change_flags+0x181/0x1d0
    [   33.953056][  T607]  rtnl_configure_link+0x2f/0xa0
    [   33.953884][  T607]  __rtnl_newlink+0x6b9/0x8e0
    [   33.954665][  T607]  ? __lock_acquire+0x95d/0x1f20
    [   33.955450][  T607]  ? lock_acquire+0xaf/0x3a0
    [   33.956193][  T607]  ? is_bpf_text_address+0x5/0xe0
    [   33.956999][  T607]  rtnl_newlink+0x47/0x70
    
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Fixes: 8d7e5dee972f ("netns: don't disable BHs when locking "nsid_lock"")
    Reported-by: syzbot+3f960c64a104eaa2c813@syzkaller.appspotmail.com
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1338ca16300fa6cb9904a545d864529cb0dc4c9
Author: Parshuram Thombare <pthombar@cadence.com>
Date:   Sat Sep 5 10:21:33 2020 +0200

    net: macb: fix for pause frame receive enable bit
    
    [ Upstream commit d7739b0b6d15ef9ad5c79424736b8ded5ed3e913 ]
    
    PAE bit of NCFGR register, when set, pauses transmission
    if a non-zero 802.3 classic pause frame is received.
    
    Fixes: 7897b071ac3b ("net: macb: convert to phylink")
    Signed-off-by: Parshuram Thombare <pthombar@cadence.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8c79a8b0671513619725af3b9bd5a206f97158c
Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
Date:   Wed Sep 16 12:08:39 2020 +0200

    net: dsa: microchip: ksz8795: really set the correct number of ports
    
    [ Upstream commit fd944dc24336922656a48f4608bfb41abdcdc4aa ]
    
    The KSZ9477 and KSZ8795 use the port_cnt field differently: For the
    KSZ9477, it includes the CPU port(s), while for the KSZ8795, it doesn't.
    
    It would be a good cleanup to make the handling of both drivers match,
    but as a first step, fix the recently broken assignment of num_ports in
    the KSZ8795 driver (which completely broke probing, as the CPU port
    index was always failing the num_ports check).
    
    Fixes: af199a1a9cb0 ("net: dsa: microchip: set the correct number of ports")
    Signed-off-by: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
    Reviewed-by: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86ae8bdee923846f9fb3bbdaad1e7aa4704d5be2
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Tue Sep 8 02:48:42 2020 +0300

    net: dsa: link interfaces with the DSA master to get rid of lockdep warnings
    
    [ Upstream commit 2f1e8ea726e9020e01e9e2ae29c2d5eb11133032 ]
    
    Since commit 845e0ebb4408 ("net: change addr_list_lock back to static
    key"), cascaded DSA setups (DSA switch port as DSA master for another
    DSA switch port) are emitting this lockdep warning:
    
    ============================================
    WARNING: possible recursive locking detected
    5.8.0-rc1-00133-g923e4b5032dd-dirty #208 Not tainted
    --------------------------------------------
    dhcpcd/323 is trying to acquire lock:
    ffff000066dd4268 (&dsa_master_addr_list_lock_key/1){+...}-{2:2}, at: dev_mc_sync+0x44/0x90
    
    but task is already holding lock:
    ffff00006608c268 (&dsa_master_addr_list_lock_key/1){+...}-{2:2}, at: dev_mc_sync+0x44/0x90
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&dsa_master_addr_list_lock_key/1);
      lock(&dsa_master_addr_list_lock_key/1);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    3 locks held by dhcpcd/323:
     #0: ffffdbd1381dda18 (rtnl_mutex){+.+.}-{3:3}, at: rtnl_lock+0x24/0x30
     #1: ffff00006614b268 (_xmit_ETHER){+...}-{2:2}, at: dev_set_rx_mode+0x28/0x48
     #2: ffff00006608c268 (&dsa_master_addr_list_lock_key/1){+...}-{2:2}, at: dev_mc_sync+0x44/0x90
    
    stack backtrace:
    Call trace:
     dump_backtrace+0x0/0x1e0
     show_stack+0x20/0x30
     dump_stack+0xec/0x158
     __lock_acquire+0xca0/0x2398
     lock_acquire+0xe8/0x440
     _raw_spin_lock_nested+0x64/0x90
     dev_mc_sync+0x44/0x90
     dsa_slave_set_rx_mode+0x34/0x50
     __dev_set_rx_mode+0x60/0xa0
     dev_mc_sync+0x84/0x90
     dsa_slave_set_rx_mode+0x34/0x50
     __dev_set_rx_mode+0x60/0xa0
     dev_set_rx_mode+0x30/0x48
     __dev_open+0x10c/0x180
     __dev_change_flags+0x170/0x1c8
     dev_change_flags+0x2c/0x70
     devinet_ioctl+0x774/0x878
     inet_ioctl+0x348/0x3b0
     sock_do_ioctl+0x50/0x310
     sock_ioctl+0x1f8/0x580
     ksys_ioctl+0xb0/0xf0
     __arm64_sys_ioctl+0x28/0x38
     el0_svc_common.constprop.0+0x7c/0x180
     do_el0_svc+0x2c/0x98
     el0_sync_handler+0x9c/0x1b8
     el0_sync+0x158/0x180
    
    Since DSA never made use of the netdev API for describing links between
    upper devices and lower devices, the dev->lower_level value of a DSA
    switch interface would be 1, which would warn when it is a DSA master.
    
    We can use netdev_upper_dev_link() to describe the relationship between
    a DSA slave and a DSA master. To be precise, a DSA "slave" (switch port)
    is an "upper" to a DSA "master" (host port). The relationship is "many
    uppers to one lower", like in the case of VLAN. So, for that reason, we
    use the same function as VLAN uses.
    
    There might be a chance that somebody will try to take hold of this
    interface and use it immediately after register_netdev() and before
    netdev_upper_dev_link(). To avoid that, we do the registration and
    linkage while holding the RTNL, and we use the RTNL-locked cousin of
    register_netdev(), which is register_netdevice().
    
    Since this warning was not there when lockdep was using dynamic keys for
    addr_list_lock, we are blaming the lockdep patch itself. The network
    stack _has_ been using static lockdep keys before, and it _is_ likely
    that stacked DSA setups have been triggering these lockdep warnings
    since forever, however I can't test very old kernels on this particular
    stacked DSA setup, to ensure I'm not in fact introducing regressions.
    
    Fixes: 845e0ebb4408 ("net: change addr_list_lock back to static key")
    Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 150feba39d809c37a3e95f8802c0219237936371
Author: Dexuan Cui <decui@microsoft.com>
Date:   Mon Sep 7 00:13:39 2020 -0700

    hv_netvsc: Fix hibernation for mlx5 VF driver
    
    [ Upstream commit 19162fd4063a3211843b997a454b505edb81d5ce ]
    
    mlx5_suspend()/resume() keep the network interface, so during hibernation
    netvsc_unregister_vf() and netvsc_register_vf() are not called, and hence
    netvsc_resume() should call netvsc_vf_changed() to switch the data path
    back to the VF after hibernation. Note: after we close and re-open the
    vmbus channel of the netvsc NIC in netvsc_suspend() and netvsc_resume(),
    the data path is implicitly switched to the netvsc NIC. Similarly,
    netvsc_suspend() should not call netvsc_unregister_vf(), otherwise the VF
    can no longer be used after hibernation.
    
    For mlx4, since the VF network interafce is explicitly destroyed and
    re-created during hibernation (see mlx4_suspend()/resume()), hv_netvsc
    already explicitly switches the data path from and to the VF automatically
    via netvsc_register_vf() and netvsc_unregister_vf(), so mlx4 doesn't need
    this fix. Note: mlx4 can still work with the fix because in
    netvsc_suspend()/resume() ndev_ctx->vf_netdev is NULL for mlx4.
    
    Fixes: 0efeea5fb153 ("hv_netvsc: Add the support of hibernation")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b569fc51689ce8070c089d19ed40b8f82f3ff18
Author: Luo bin <luobin9@huawei.com>
Date:   Thu Sep 10 22:04:40 2020 +0800

    hinic: fix rewaking txq after netif_tx_disable
    
    [ Upstream commit a1b80e0143a1b878f8e21d82fd55f3f46f0014be ]
    
    When calling hinic_close in hinic_set_channels, all queues are
    stopped after netif_tx_disable, but some queue may be rewaken in
    free_tx_poll by mistake while drv is handling tx irq. If one queue
    is rewaken core may call hinic_xmit_frame to send pkt after
    netif_tx_disable within a short time which may results in accessing
    memory that has been already freed in hinic_close. So we call
    napi_disable before netif_tx_disable in hinic_close to fix this bug.
    
    Fixes: 2eed5a8b614b ("hinic: add set_channels ethtool_ops support")
    Signed-off-by: Luo bin <luobin9@huawei.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a3aab5bd46f077e1456de9eb3aceb22c47b9d0c
Author: Jianbo Liu <jianbol@mellanox.com>
Date:   Tue Jul 7 06:16:24 2020 +0000

    net/mlx5e: Fix memory leak of tunnel info when rule under multipath not ready
    
    [ Upstream commit 12a240a41427d37b5e70570700704e84c827452f ]
    
    When deleting vxlan flow rule under multipath, tun_info in parse_attr is
    not freed when the rule is not ready.
    
    Fixes: ef06c9ee8933 ("net/mlx5e: Allow one failure when offloading tc encap rules under multipath")
    Signed-off-by: Jianbo Liu <jianbol@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e77ae86a283091f080b60a362c05afc8743e0e97
Author: Vadym Kochan <vadym.kochan@plvision.eu>
Date:   Thu Sep 10 18:41:52 2020 +0300

    net: ipa: fix u32_replace_bits by u32p_xxx version
    
    [ Upstream commit c047dc1d260f2593035d63747d616c3512f9d6b6 ]
    
    Looks like u32p_replace_bits() should be used instead of
    u32_replace_bits() which does not modifies the value but returns the
    modified version.
    
    Fixes: 2b9feef2b6c2 ("soc: qcom: ipa: filter and routing tables")
    Signed-off-by: Vadym Kochan <vadym.kochan@plvision.eu>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f41a9b68b2e5fe6156eaf31a78c707ab1d5b89a3
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Sep 9 13:58:15 2020 +0200

    wireguard: peerlookup: take lock before checking hash in replace operation
    
    [ Upstream commit 6147f7b1e90ff09bd52afc8b9206a7fcd133daf7 ]
    
    Eric's suggested fix for the previous commit's mentioned race condition
    was to simply take the table->lock in wg_index_hashtable_replace(). The
    table->lock of the hash table is supposed to protect the bucket heads,
    not the entires, but actually, since all the mutator functions are
    already taking it, it makes sense to take it too for the test to
    hlist_unhashed, as a defense in depth measure, so that it no longer
    races with deletions, regardless of what other locks are protecting
    individual entries. This is sensible from a performance perspective
    because, as Eric pointed out, the case of being unhashed is already the
    unlikely case, so this won't add common contention. And comparing
    instructions, this basically doesn't make much of a difference other
    than pushing and popping %r13, used by the new `bool ret`. More
    generally, I like the idea of locking consistency across table mutator
    functions, and this might let me rest slightly easier at night.
    
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/wireguard/20200908145911.4090480-1-edumazet@google.com/
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1aa173b4181abba1c8f03e2219e95e6470294d96
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Sep 9 13:58:14 2020 +0200

    wireguard: noise: take lock when removing handshake entry from table
    
    [ Upstream commit 9179ba31367bcf481c3c79b5f028c94faad9f30a ]
    
    Eric reported that syzkaller found a race of this variety:
    
    CPU 1                                       CPU 2
    -------------------------------------------|---------------------------------------
    wg_index_hashtable_replace(old, ...)       |
      if (hlist_unhashed(&old->index_hash))    |
                                               | wg_index_hashtable_remove(old)
                                               |   hlist_del_init_rcu(&old->index_hash)
                                               |     old->index_hash.pprev = NULL
      hlist_replace_rcu(&old->index_hash, ...) |
        *old->index_hash.pprev                 |
    
    Syzbot wasn't actually able to reproduce this more than once or create a
    reproducer, because the race window between checking "hlist_unhashed" and
    calling "hlist_replace_rcu" is just so small. Adding an mdelay(5) or
    similar there helps make this demonstrable using this simple script:
    
        #!/bin/bash
        set -ex
        trap 'kill $pid1; kill $pid2; ip link del wg0; ip link del wg1' EXIT
        ip link add wg0 type wireguard
        ip link add wg1 type wireguard
        wg set wg0 private-key <(wg genkey) listen-port 9999
        wg set wg1 private-key <(wg genkey) peer $(wg show wg0 public-key) endpoint 127.0.0.1:9999 persistent-keepalive 1
        wg set wg0 peer $(wg show wg1 public-key)
        ip link set wg0 up
        yes link set wg1 up | ip -force -batch - &
        pid1=$!
        yes link set wg1 down | ip -force -batch - &
        pid2=$!
        wait
    
    The fundumental underlying problem is that we permit calls to wg_index_
    hashtable_remove(handshake.entry) without requiring the caller to take
    the handshake mutex that is intended to protect members of handshake
    during mutations. This is consistently the case with calls to wg_index_
    hashtable_insert(handshake.entry) and wg_index_hashtable_replace(
    handshake.entry), but it's missing from a pertinent callsite of wg_
    index_hashtable_remove(handshake.entry). So, this patch makes sure that
    mutex is taken.
    
    The original code was a little bit funky though, in the form of:
    
        remove(handshake.entry)
        lock(), memzero(handshake.some_members), unlock()
        remove(handshake.entry)
    
    The original intention of that double removal pattern outside the lock
    appears to be some attempt to prevent insertions that might happen while
    locks are dropped during expensive crypto operations, but actually, all
    callers of wg_index_hashtable_insert(handshake.entry) take the write
    lock and then explicitly check handshake.state, as they should, which
    the aforementioned memzero clears, which means an insertion should
    already be impossible. And regardless, the original intention was
    necessarily racy, since it wasn't guaranteed that something else would
    run after the unlock() instead of after the remove(). So, from a
    soundness perspective, it seems positive to remove what looks like a
    hack at best.
    
    The crash from both syzbot and from the script above is as follows:
    
      general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN
      KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
      CPU: 0 PID: 7395 Comm: kworker/0:3 Not tainted 5.9.0-rc4-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Workqueue: wg-kex-wg1 wg_packet_handshake_receive_worker
      RIP: 0010:hlist_replace_rcu include/linux/rculist.h:505 [inline]
      RIP: 0010:wg_index_hashtable_replace+0x176/0x330 drivers/net/wireguard/peerlookup.c:174
      Code: 00 fc ff df 48 89 f9 48 c1 e9 03 80 3c 01 00 0f 85 44 01 00 00 48 b9 00 00 00 00 00 fc ff df 48 8b 45 10 48 89 c6 48 c1 ee 03 <80> 3c 0e 00 0f 85 06 01 00 00 48 85 d2 4c 89 28 74 47 e8 a3 4f b5
      RSP: 0018:ffffc90006a97bf8 EFLAGS: 00010246
      RAX: 0000000000000000 RBX: ffff888050ffc4f8 RCX: dffffc0000000000
      RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff88808e04e010
      RBP: ffff88808e04e000 R08: 0000000000000001 R09: ffff8880543d0000
      R10: ffffed100a87a000 R11: 000000000000016e R12: ffff8880543d0000
      R13: ffff88808e04e008 R14: ffff888050ffc508 R15: ffff888050ffc500
      FS:  0000000000000000(0000) GS:ffff8880ae600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00000000f5505db0 CR3: 0000000097cf7000 CR4: 00000000001526f0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
      wg_noise_handshake_begin_session+0x752/0xc9a drivers/net/wireguard/noise.c:820
      wg_receive_handshake_packet drivers/net/wireguard/receive.c:183 [inline]
      wg_packet_handshake_receive_worker+0x33b/0x730 drivers/net/wireguard/receive.c:220
      process_one_work+0x94c/0x1670 kernel/workqueue.c:2269
      worker_thread+0x64c/0x1120 kernel/workqueue.c:2415
      kthread+0x3b5/0x4a0 kernel/kthread.c:292
      ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:294
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/wireguard/20200908145911.4090480-1-edumazet@google.com/
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9346c24848d6818e0afbc0f55e6ee150d3c31c33
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Sep 10 23:52:29 2020 +0300

    net: ethernet: ti: cpsw_new: fix suspend/resume
    
    [ Upstream commit 5760d9acbe9514eec68eb70821d6fa5764f57042 ]
    
    Add missed suspend/resume callbacks to properly restore networking after
    suspend/resume cycle.
    
    Fixes: ed3525eda4c4 ("net: ethernet: ti: introduce cpsw switchdev based driver part 1 - dual-emac")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b42148e2270e2f42aaa881e15e6524e65ac83676
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Sep 9 01:27:40 2020 -0700

    net: add __must_check to skb_put_padto()
    
    [ Upstream commit 4a009cb04aeca0de60b73f37b102573354214b52 ]
    
    skb_put_padto() and __skb_put_padto() callers
    must check return values or risk use-after-free.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cb51c5f22f1c1c14841ab24b42f15874b1d7dc8
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Sep 9 01:27:39 2020 -0700

    net: qrtr: check skb_put_padto() return value
    
    [ Upstream commit 3ca1a42a52ca4b4f02061683851692ad65fefac8 ]
    
    If skb_put_padto() returns an error, skb has been freed.
    Better not touch it anymore, as reported by syzbot [1]
    
    Note to qrtr maintainers : this suggests qrtr_sendmsg()
    should adjust sock_alloc_send_skb() second parameter
    to account for the potential added alignment to avoid
    reallocation.
    
    [1]
    
    BUG: KASAN: use-after-free in __skb_insert include/linux/skbuff.h:1907 [inline]
    BUG: KASAN: use-after-free in __skb_queue_before include/linux/skbuff.h:2016 [inline]
    BUG: KASAN: use-after-free in __skb_queue_tail include/linux/skbuff.h:2049 [inline]
    BUG: KASAN: use-after-free in skb_queue_tail+0x6b/0x120 net/core/skbuff.c:3146
    Write of size 8 at addr ffff88804d8ab3c0 by task syz-executor.4/4316
    
    CPU: 1 PID: 4316 Comm: syz-executor.4 Not tainted 5.9.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1d6/0x29e lib/dump_stack.c:118
     print_address_description+0x66/0x620 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     __skb_insert include/linux/skbuff.h:1907 [inline]
     __skb_queue_before include/linux/skbuff.h:2016 [inline]
     __skb_queue_tail include/linux/skbuff.h:2049 [inline]
     skb_queue_tail+0x6b/0x120 net/core/skbuff.c:3146
     qrtr_tun_send+0x1a/0x40 net/qrtr/tun.c:23
     qrtr_node_enqueue+0x44f/0xc00 net/qrtr/qrtr.c:364
     qrtr_bcast_enqueue+0xbe/0x140 net/qrtr/qrtr.c:861
     qrtr_sendmsg+0x680/0x9c0 net/qrtr/qrtr.c:960
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     sock_write_iter+0x317/0x470 net/socket.c:998
     call_write_iter include/linux/fs.h:1882 [inline]
     new_sync_write fs/read_write.c:503 [inline]
     vfs_write+0xa96/0xd10 fs/read_write.c:578
     ksys_write+0x11b/0x220 fs/read_write.c:631
     do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45d5b9
    Code: 5d b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 2b b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f84b5b81c78 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000038b40 RCX: 000000000045d5b9
    RDX: 0000000000000055 RSI: 0000000020001240 RDI: 0000000000000003
    RBP: 00007f84b5b81ca0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 000000000000000f
    R13: 00007ffcbbf86daf R14: 00007f84b5b829c0 R15: 000000000118cf4c
    
    Allocated by task 4316:
     kasan_save_stack mm/kasan/common.c:48 [inline]
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc+0x100/0x130 mm/kasan/common.c:461
     slab_post_alloc_hook+0x3e/0x290 mm/slab.h:518
     slab_alloc mm/slab.c:3312 [inline]
     kmem_cache_alloc+0x1c1/0x2d0 mm/slab.c:3482
     skb_clone+0x1b2/0x370 net/core/skbuff.c:1449
     qrtr_bcast_enqueue+0x6d/0x140 net/qrtr/qrtr.c:857
     qrtr_sendmsg+0x680/0x9c0 net/qrtr/qrtr.c:960
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     sock_write_iter+0x317/0x470 net/socket.c:998
     call_write_iter include/linux/fs.h:1882 [inline]
     new_sync_write fs/read_write.c:503 [inline]
     vfs_write+0xa96/0xd10 fs/read_write.c:578
     ksys_write+0x11b/0x220 fs/read_write.c:631
     do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 4316:
     kasan_save_stack mm/kasan/common.c:48 [inline]
     kasan_set_track+0x3d/0x70 mm/kasan/common.c:56
     kasan_set_free_info+0x17/0x30 mm/kasan/generic.c:355
     __kasan_slab_free+0xdd/0x110 mm/kasan/common.c:422
     __cache_free mm/slab.c:3418 [inline]
     kmem_cache_free+0x82/0xf0 mm/slab.c:3693
     __skb_pad+0x3f5/0x5a0 net/core/skbuff.c:1823
     __skb_put_padto include/linux/skbuff.h:3233 [inline]
     skb_put_padto include/linux/skbuff.h:3252 [inline]
     qrtr_node_enqueue+0x62f/0xc00 net/qrtr/qrtr.c:360
     qrtr_bcast_enqueue+0xbe/0x140 net/qrtr/qrtr.c:861
     qrtr_sendmsg+0x680/0x9c0 net/qrtr/qrtr.c:960
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     sock_write_iter+0x317/0x470 net/socket.c:998
     call_write_iter include/linux/fs.h:1882 [inline]
     new_sync_write fs/read_write.c:503 [inline]
     vfs_write+0xa96/0xd10 fs/read_write.c:578
     ksys_write+0x11b/0x220 fs/read_write.c:631
     do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The buggy address belongs to the object at ffff88804d8ab3c0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 0 bytes inside of
     224-byte region [ffff88804d8ab3c0, ffff88804d8ab4a0)
    The buggy address belongs to the page:
    page:00000000ea8cccfb refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff88804d8abb40 pfn:0x4d8ab
    flags: 0xfffe0000000200(slab)
    raw: 00fffe0000000200 ffffea0002237ec8 ffffea00029b3388 ffff88821bb66800
    raw: ffff88804d8abb40 ffff88804d8ab000 000000010000000b 0000000000000000
    page dumped because: kasan: bad access detected
    
    Fixes: ce57785bf91b ("net: qrtr: fix len of skb_put_padto in qrtr_node_enqueue")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Carl Huang <cjhuang@codeaurora.org>
    Cc: Wen Gong <wgong@codeaurora.org>
    Cc: Bjorn Andersson <bjorn.andersson@linaro.org>
    Cc: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Acked-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 410c186dc45eddf7383770cc10686bb9b17a0a39
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Sep 16 20:43:10 2020 -0700

    net: phy: Do not warn in phy_stop() on PHY_DOWN
    
    [ Upstream commit 5116a8ade333b6c2e180782139c9c516a437b21c ]
    
    When phy_is_started() was added to catch incorrect PHY states,
    phy_stop() would not be qualified against PHY_DOWN. It is possible to
    reach that state when the PHY driver has been unbound and the network
    device is then brought down.
    
    Fixes: 2b3e88ea6528 ("net: phy: improve phy state checking")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fa1f8461a5d60653f0c2f8cdf583b556d66a052
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Sep 16 20:43:09 2020 -0700

    net: phy: Avoid NPD upon phy_detach() when driver is unbound
    
    [ Upstream commit c2b727df7caa33876e7066bde090f40001b6d643 ]
    
    If we have unbound the PHY driver prior to calling phy_detach() (often
    via phy_disconnect()) then we can cause a NULL pointer de-reference
    accessing the driver owner member. The steps to reproduce are:
    
    echo unimac-mdio-0:01 > /sys/class/net/eth0/phydev/driver/unbind
    ip link set eth0 down
    
    Fixes: cafe8df8b9bc ("net: phy: Fix lack of reference count on PHY driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 318d2408a81de9d4558803ab4a4763644f186312
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Sat Sep 12 21:36:29 2020 +0200

    net: lantiq: Disable IRQs only if NAPI gets scheduled
    
    [ Upstream commit 9423361da52356cb68642db5b2729b6b85aad330 ]
    
    The napi_schedule() call will only schedule the NAPI if it is not
    already running. To make sure that we do not deactivate interrupts
    without scheduling NAPI only deactivate the interrupts in case NAPI also
    gets scheduled.
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c36c06305afebe16ea012fbea1c9e17da58724d4
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Sat Sep 12 21:36:28 2020 +0200

    net: lantiq: Use napi_complete_done()
    
    [ Upstream commit c582a7fea9dad4d309437d1a7e22e6d2cb380e2e ]
    
    Use napi_complete_done() and activate the interrupts when this function
    returns true. This way the generic NAPI code can take care of activating
    the interrupts.
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e0c1c65c7da250d1d88e75a0224318c471603ae
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Sat Sep 12 21:36:27 2020 +0200

    net: lantiq: use netif_tx_napi_add() for TX NAPI
    
    [ Upstream commit 74c7b80e222b58d3cea731d31e2a31a77fea8345 ]
    
    netif_tx_napi_add() should be used for NAPI in the TX direction instead
    of the netif_napi_add() function.
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 345fa127e965a6c8d4bf940fb794e1e2d0166562
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Sat Sep 12 21:36:26 2020 +0200

    net: lantiq: Wake TX queue again
    
    [ Upstream commit dea36631e6f186d4b853af67a4aef2e35cfa8bb7 ]
    
    The call to netif_wake_queue() when the TX descriptors were freed was
    missing. When there are no TX buffers available the TX queue will be
    stopped, but it was not started again when they are available again,
    this is fixed in this patch.
    
    Fixes: fe1a56420cf2 ("net: lantiq: Add Lantiq / Intel VRX200 Ethernet driver")
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 786c627c377f46038a9c0044e76741fc35665881
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Sep 20 21:08:56 2020 -0400

    bnxt_en: Protect bnxt_set_eee() and bnxt_set_pauseparam() with mutex.
    
    [ Upstream commit a53906908148d64423398a62c4435efb0d09652c ]
    
    All changes related to bp->link_info require the protection of the
    link_lock mutex.  It's not sufficient to rely just on RTNL.
    
    Fixes: 163e9ef63641 ("bnxt_en: Fix race when modifying pause settings.")
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 138ded90a311e6a1b8bc3bba95a6bb3f66966521
Author: Edwin Peer <edwin.peer@broadcom.com>
Date:   Sun Sep 20 21:08:55 2020 -0400

    bnxt_en: return proper error codes in bnxt_show_temp
    
    [ Upstream commit d69753fa1ecb3218b56b022722f7a5822735b876 ]
    
    Returning "unknown" as a temperature value violates the hwmon interface
    rules. Appropriate error codes should be returned via device_attribute
    show instead. These will ultimately be propagated to the user via the
    file system interface.
    
    In addition to the corrected error handling, it is an even better idea to
    not present the sensor in sysfs at all if it is known that the read will
    definitely fail. Given that temp1_input is currently the only sensor
    reported, ensure no hwmon registration if TEMP_MONITOR_QUERY is not
    supported or if it will fail due to access permissions. Something smarter
    may be needed if and when other sensors are added.
    
    Fixes: 12cce90b934b ("bnxt_en: fix HWRM error when querying VF temperature")
    Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 693ba8c81ca3b139de961e6966d046e935618609
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sun Sep 20 21:08:54 2020 -0400

    bnxt_en: Use memcpy to copy VPD field info.
    
    [ Upstream commit 492adcf481292521ee8df1a482dc12acdb28aa15 ]
    
    Using strlcpy() to copy from VPD is not correct because VPD strings
    are not necessarily NULL terminated.  Use memcpy() to copy the VPD
    length up to the destination buffer size - 1.  The destination is
    zeroed memory so it will always be NULL terminated.
    
    Fixes: a0d0fd70fed5 ("bnxt_en: Read partno and serialno of the board from VPD")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6229623f54cb75a0472fff673649be3bbacf0c03
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Sun Jun 28 13:06:06 2020 +0300

    net/mlx5e: TLS, Do not expose FPGA TLS counter if not supported
    
    [ Upstream commit 8f0bcd19b1da3f264223abea985b9462e85a3718 ]
    
    The set of TLS TX global SW counters in mlx5e_tls_sw_stats_desc
    is updated from all rings by using atomic ops.
    This set of stats is used only in the FPGA TLS use case, not in
    the Connect-X TLS one, where regular per-ring counters are used.
    
    Do not expose them in the Connect-X use case, as this would cause
    counter duplication. For example, tx_tls_drop_no_sync_data would
    appear twice in the ethtool stats.
    
    Fixes: d2ead1f360e8 ("net/mlx5e: Add kTLS TX HW offload support")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46ef5581c432a0ba4c69e1ee593174509a9fdec1
Author: Maor Dickman <maord@mellanox.com>
Date:   Wed Aug 5 17:56:04 2020 +0300

    net/mlx5e: Enable adding peer miss rules only if merged eswitch is supported
    
    [ Upstream commit 6cec0229ab1959259e71e9a5bbe47c04577950b1 ]
    
    The cited commit creates peer miss group during switchdev mode
    initialization in order to handle miss packets correctly while in VF
    LAG mode. This is done regardless of FW support of such groups which
    could cause rules setups failure later on.
    
    Fix by adding FW capability check before creating peer groups/rule.
    
    Fixes: ac004b832128 ("net/mlx5e: E-Switch, Add peer miss rules")
    Signed-off-by: Maor Dickman <maord@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Raed Salem <raeds@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41f2b0bd171359a62f638d92d7064bbc41a00658
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8e7be19d2bddd97c91e678cdd495f41ed049f4a
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Sep 5 15:14:47 2020 +0900

    tipc: fix shutdown() of connection oriented socket
    
    [ Upstream commit a4b5cc9e10803ecba64a7d54c0f47e4564b4a980 ]
    
    I confirmed that the problem fixed by commit 2a63866c8b51a3f7 ("tipc: fix
    shutdown() of connectionless socket") also applies to stream socket.
    
    ----------
    #include <sys/socket.h>
    #include <unistd.h>
    #include <sys/wait.h>
    
    int main(int argc, char *argv[])
    {
            int fds[2] = { -1, -1 };
            socketpair(PF_TIPC, SOCK_STREAM /* or SOCK_DGRAM */, 0, fds);
            if (fork() == 0)
                    _exit(read(fds[0], NULL, 1));
            shutdown(fds[0], SHUT_RDWR); /* This must make read() return. */
            wait(NULL); /* To be woken up by _exit(). */
            return 0;
    }
    ----------
    
    Since shutdown(SHUT_RDWR) should affect all processes sharing that socket,
    unconditionally setting sk->sk_shutdown to SHUTDOWN_MASK will be the right
    behavior.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ada162ea056a506bbb11c4f29c574e3da5d1490
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Sun Sep 13 04:06:05 2020 -0400

    tipc: Fix memory leak in tipc_group_create_member()
    
    [ Upstream commit bb3a420d47ab00d7e1e5083286cab15235a96680 ]
    
    tipc_group_add_to_tree() returns silently if `key` matches `nkey` of an
    existing node, causing tipc_group_create_member() to leak memory. Let
    tipc_group_add_to_tree() return an error in such a case, so that
    tipc_group_create_member() can handle it properly.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+f95d90c454864b3b5bc9@syzkaller.appspotmail.com
    Cc: Hillf Danton <hdanton@sina.com>
    Link: https://syzkaller.appspot.com/bug?id=048390604fe1b60df34150265479202f10e13aff
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 817ff50796c5e364c879596509f83fcba194bb6f
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Wed Sep 9 17:03:11 2020 -0700

    taprio: Fix allowing too small intervals
    
    [ Upstream commit b5b73b26b3ca34574124ed7ae9c5ba8391a7f176 ]
    
    It's possible that the user specifies an interval that couldn't allow
    any packet to be transmitted. This also avoids the issue of the
    hrtimer handler starving the other threads because it's running too
    often.
    
    The solution is to reject interval sizes that according to the current
    link speed wouldn't allow any packet to be transmitted.
    
    Reported-by: syzbot+8267241609ae8c23b248@syzkaller.appspotmail.com
    Fixes: 5a781ccbd19e ("tc: Add support for configuring the taprio scheduler")
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b193ee2ad41716e8a933baa46f774d50c6756d8d
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Sep 17 10:52:57 2020 -0700

    nfp: use correct define to return NONE fec
    
    [ Upstream commit 5f6857e808a8bd078296575b417c4b9d160b9779 ]
    
    struct ethtool_fecparam carries bitmasks not bit numbers.
    We want to return 1 (NONE), not 0.
    
    Fixes: 0d0870938337 ("nfp: implement ethtool FEC mode settings")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bda4b3ec1c9faf236b30d5892f5467c55300414
Author: Henry Ptasinski <hptasinski@google.com>
Date:   Sat Sep 19 00:12:11 2020 +0000

    net: sctp: Fix IPv6 ancestor_size calc in sctp_copy_descendant
    
    [ Upstream commit fe81d9f6182d1160e625894eecb3d7ff0222cac5 ]
    
    When calculating ancestor_size with IPv6 enabled, simply using
    sizeof(struct ipv6_pinfo) doesn't account for extra bytes needed for
    alignment in the struct sctp6_sock. On x86, there aren't any extra
    bytes, but on ARM the ipv6_pinfo structure is aligned on an 8-byte
    boundary so there were 4 pad bytes that were omitted from the
    ancestor_size calculation.  This would lead to corruption of the
    pd_lobby pointers, causing an oops when trying to free the sctp
    structure on socket close.
    
    Fixes: 636d25d557d1 ("sctp: not copy sctp_sock pd_lobby in sctp_copy_descendant")
    Signed-off-by: Henry Ptasinski <hptasinski@google.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd6df0266e31c399268d795d649fb079ce5079b7
Author: Yunsheng Lin <linyunsheng@huawei.com>
Date:   Tue Sep 8 19:02:34 2020 +0800

    net: sch_generic: aviod concurrent reset and enqueue op for lockless qdisc
    
    [ Upstream commit 2fb541c862c987d02dfdf28f1545016deecfa0d5 ]
    
    Currently there is concurrent reset and enqueue operation for the
    same lockless qdisc when there is no lock to synchronize the
    q->enqueue() in __dev_xmit_skb() with the qdisc reset operation in
    qdisc_deactivate() called by dev_deactivate_queue(), which may cause
    out-of-bounds access for priv->ring[] in hns3 driver if user has
    requested a smaller queue num when __dev_xmit_skb() still enqueue a
    skb with a larger queue_mapping after the corresponding qdisc is
    reset, and call hns3_nic_net_xmit() with that skb later.
    
    Reused the existing synchronize_net() in dev_deactivate_many() to
    make sure skb with larger queue_mapping enqueued to old qdisc(which
    is saved in dev_queue->qdisc_sleeping) will always be reset when
    dev_reset_queue() is called.
    
    Fixes: 6b3ba9146fe6 ("net: sched: allow qdiscs to handle locking")
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abdd468785e1580d4e0c33d4914ccce9e06da2e1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:43:03 2020 +0800

    net: sched: initialize with 0 before setting erspan md->u
    
    [ Upstream commit 8e1b3ac4786680c2d2b5a24e38a2d714c3bcd1ef ]
    
    In fl_set_erspan_opt(), all bits of erspan md was set 1, as this
    function is also used to set opt MASK. However, when setting for
    md->u.index for opt VALUE, the rest bits of the union md->u will
    be left 1. It would cause to fail the match of the whole md when
    version is 1 and only index is set.
    
    This patch is to fix by initializing with 0 before setting erspan
    md->u.
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 79b1011cb33d ("net: sched: allow flower to match erspan options")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9286233285ba5dd927333f83d8654fb967dfef74
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Sep 9 14:43:14 2020 +0900

    net: phy: call phy_disable_interrupts() in phy_attach_direct() instead
    
    [ Upstream commit 7d3ba9360c6dac7c077fbd6631e08f32ea2bcd53 ]
    
    Since the micrel phy driver calls phy_init_hw() as a workaround,
    the commit 9886a4dbd2aa ("net: phy: call phy_disable_interrupts()
    in phy_init_hw()") disables the interrupt unexpectedly. So,
    call phy_disable_interrupts() in phy_attach_direct() instead.
    Otherwise, the phy cannot link up after the ethernet cable was
    disconnected.
    
    Note that other drivers (like at803x.c) also calls phy_init_hw().
    So, perhaps, the driver caused a similar issue too.
    
    Fixes: 9886a4dbd2aa ("net: phy: call phy_disable_interrupts() in phy_init_hw()")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9fd16fc0c7ddcdd66025e614c4120a6b97a5721
Author: Maor Gottlieb <maorg@nvidia.com>
Date:   Mon Aug 31 20:50:42 2020 +0300

    net/mlx5: Fix FTE cleanup
    
    [ Upstream commit cefc23554fc259114e78a7b0908aac4610ee18eb ]
    
    Currently, when an FTE is allocated, its refcount is decreased to 0
    with the purpose it will not be a stand alone steering object and every
    rule (destination) of the FTE would increase the refcount.
    When mlx5_cleanup_fs is called while not all rules were deleted by the
    steering users, it hit refcount underflow on the FTE once clean_tree
    calls to tree_remove_node after the deleted rules already decreased
    the refcount to 0.
    
    FTE is no longer destroyed implicitly when the last rule (destination)
    is deleted. mlx5_del_flow_rules avoids it by increasing the refcount on
    the FTE and destroy it explicitly after all rules were deleted. So we
    can avoid the refcount underflow by making FTE as stand alone object.
    In addition need to set del_hw_func to FTE so the HW object will be
    destroyed when the FTE is deleted from the cleanup_tree flow.
    
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 2 PID: 15715 at lib/refcount.c:28 refcount_warn_saturate+0xd9/0xe0
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
    Call Trace:
     tree_put_node+0xf2/0x140 [mlx5_core]
     clean_tree+0x4e/0xf0 [mlx5_core]
     clean_tree+0x4e/0xf0 [mlx5_core]
     clean_tree+0x4e/0xf0 [mlx5_core]
     clean_tree+0x5f/0xf0 [mlx5_core]
     clean_tree+0x4e/0xf0 [mlx5_core]
     clean_tree+0x5f/0xf0 [mlx5_core]
     mlx5_cleanup_fs+0x26/0x270 [mlx5_core]
     mlx5_unload+0x2e/0xa0 [mlx5_core]
     mlx5_unload_one+0x51/0x120 [mlx5_core]
     mlx5_devlink_reload_down+0x51/0x90 [mlx5_core]
     devlink_reload+0x39/0x120
     ? devlink_nl_cmd_reload+0x43/0x220
     genl_rcv_msg+0x1e4/0x420
     ? genl_family_rcv_msg_attrs_parse+0x100/0x100
     netlink_rcv_skb+0x47/0x110
     genl_rcv+0x24/0x40
     netlink_unicast+0x217/0x2f0
     netlink_sendmsg+0x30f/0x430
     sock_sendmsg+0x30/0x40
     __sys_sendto+0x10e/0x140
     ? handle_mm_fault+0xc4/0x1f0
     ? do_page_fault+0x33f/0x630
     __x64_sys_sendto+0x24/0x30
     do_syscall_64+0x48/0x130
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 718ce4d601db ("net/mlx5: Consolidate update FTE for all removal changes")
    Fixes: bd71b08ec2ee ("net/mlx5: Support multiple updates of steering rules in parallel")
    Signed-off-by: Maor Gottlieb <maorg@nvidia.com>
    Reviewed-by: Mark Bloch <mbloch@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 320df8ef04c6742a44a99680b83bce99e467c6aa
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Thu Sep 17 19:46:43 2020 +0300

    net: ipv6: fix kconfig dependency warning for IPV6_SEG6_HMAC
    
    [ Upstream commit db7cd91a4be15e1485d6b58c6afc8761c59c4efb ]
    
    When IPV6_SEG6_HMAC is enabled and CRYPTO is disabled, it results in the
    following Kbuild warning:
    
    WARNING: unmet direct dependencies detected for CRYPTO_HMAC
      Depends on [n]: CRYPTO [=n]
      Selected by [y]:
      - IPV6_SEG6_HMAC [=y] && NET [=y] && INET [=y] && IPV6 [=y]
    
    WARNING: unmet direct dependencies detected for CRYPTO_SHA1
      Depends on [n]: CRYPTO [=n]
      Selected by [y]:
      - IPV6_SEG6_HMAC [=y] && NET [=y] && INET [=y] && IPV6 [=y]
    
    WARNING: unmet direct dependencies detected for CRYPTO_SHA256
      Depends on [n]: CRYPTO [=n]
      Selected by [y]:
      - IPV6_SEG6_HMAC [=y] && NET [=y] && INET [=y] && IPV6 [=y]
    
    The reason is that IPV6_SEG6_HMAC selects CRYPTO_HMAC, CRYPTO_SHA1, and
    CRYPTO_SHA256 without depending on or selecting CRYPTO while those configs
    are subordinate to CRYPTO.
    
    Honor the kconfig menu hierarchy to remove kconfig dependency warnings.
    
    Fixes: bf355b8d2c30 ("ipv6: sr: add core files for SR HMAC support")
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 894514e1785690949371c9ff4e9184841828a447
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Thu Sep 10 14:01:26 2020 +0300

    net: Fix bridge enslavement failure
    
    [ Upstream commit e1b9efe6baebe79019a2183176686a0e709388ae ]
    
    When a netdev is enslaved to a bridge, its parent identifier is queried.
    This is done so that packets that were already forwarded in hardware
    will not be forwarded again by the bridge device between netdevs
    belonging to the same hardware instance.
    
    The operation fails when the netdev is an upper of netdevs with
    different parent identifiers.
    
    Instead of failing the enslavement, have dev_get_port_parent_id() return
    '-EOPNOTSUPP' which will signal the bridge to skip the query operation.
    Other callers of the function are not affected by this change.
    
    Fixes: 7e1146e8c10c ("net: devlink: introduce devlink_compat_switch_id_get() helper")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reported-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Reviewed-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4979e51c318caceb72208f4ed8e8d8c9842af6cf
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Sep 5 12:32:33 2020 +0200

    net: dsa: rtl8366: Properly clear member config
    
    [ Upstream commit 4ddcaf1ebb5e4e99240f29d531ee69d4244fe416 ]
    
    When removing a port from a VLAN we are just erasing the
    member config for the VLAN, which is wrong: other ports
    can be using it.
    
    Just mask off the port and only zero out the rest of the
    member config once ports using of the VLAN are removed
    from it.
    
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Fixes: d8652956cf37 ("net: dsa: realtek-smi: Add Realtek SMI driver")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e9939f0fef81043af9038b921287a460ff03f96
Author: Petr Machata <petrm@nvidia.com>
Date:   Thu Sep 10 14:09:05 2020 +0200

    net: DCB: Validate DCB_ATTR_DCB_BUFFER argument
    
    [ Upstream commit 297e77e53eadb332d5062913447b104a772dc33b ]
    
    The parameter passed via DCB_ATTR_DCB_BUFFER is a struct dcbnl_buffer. The
    field prio2buffer is an array of IEEE_8021Q_MAX_PRIORITIES bytes, where
    each value is a number of a buffer to direct that priority's traffic to.
    That value is however never validated to lie within the bounds set by
    DCBX_MAX_BUFFERS. The only driver that currently implements the callback is
    mlx5 (maintainers CCd), and that does not do any validation either, in
    particual allowing incorrect configuration if the prio2buffer value does
    not fit into 4 bits.
    
    Instead of offloading the need to validate the buffer index to drivers, do
    it right there in core, and bounce the request if the value is too large.
    
    CC: Parav Pandit <parav@nvidia.com>
    CC: Saeed Mahameed <saeedm@nvidia.com>
    Fixes: e549f6f9c098 ("net/dcb: Add dcbnl buffer attribute")
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b9c3f8de6abfc422e2d570ac99d69f4e289780a
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Sep 22 01:07:09 2020 +0300

    net: bridge: br_vlan_get_pvid_rcu() should dereference the VLAN group under RCU
    
    [ Upstream commit 99f62a746066fa436aa15d4606a538569540db08 ]
    
    When calling the RCU brother of br_vlan_get_pvid(), lockdep warns:
    
    =============================
    WARNING: suspicious RCU usage
    5.9.0-rc3-01631-g13c17acb8e38-dirty #814 Not tainted
    -----------------------------
    net/bridge/br_private.h:1054 suspicious rcu_dereference_protected() usage!
    
    Call trace:
     lockdep_rcu_suspicious+0xd4/0xf8
     __br_vlan_get_pvid+0xc0/0x100
     br_vlan_get_pvid_rcu+0x78/0x108
    
    The warning is because br_vlan_get_pvid_rcu() calls nbp_vlan_group()
    which calls rtnl_dereference() instead of rcu_dereference(). In turn,
    rtnl_dereference() calls rcu_dereference_protected() which assumes
    operation under an RCU write-side critical section, which obviously is
    not the case here. So, when the incorrect primitive is used to access
    the RCU-protected VLAN group pointer, READ_ONCE() is not used, which may
    cause various unexpected problems.
    
    I'm sad to say that br_vlan_get_pvid() and br_vlan_get_pvid_rcu() cannot
    share the same implementation. So fix the bug by splitting the 2
    functions, and making br_vlan_get_pvid_rcu() retrieve the VLAN groups
    under proper locking annotations.
    
    Fixes: 7582f5b70f9a ("bridge: add br_vlan_get_pvid_rcu()")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 176b2e5140afa957095c84fade39f6fa87a07b0c
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Sep 8 01:20:23 2020 -0700

    ipv6: avoid lockdep issue in fib6_del()
    
    [ Upstream commit 843d926b003ea692468c8cc5bea1f9f58dfa8c75 ]
    
    syzbot reported twice a lockdep issue in fib6_del() [1]
    which I think is caused by net->ipv6.fib6_null_entry
    having a NULL fib6_table pointer.
    
    fib6_del() already checks for fib6_null_entry special
    case, we only need to return earlier.
    
    Bug seems to occur very rarely, I have thus chosen
    a 'bug origin' that makes backports not too complex.
    
    [1]
    WARNING: suspicious RCU usage
    5.9.0-rc4-syzkaller #0 Not tainted
    -----------------------------
    net/ipv6/ip6_fib.c:1996 suspicious rcu_dereference_protected() usage!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    4 locks held by syz-executor.5/8095:
     #0: ffffffff8a7ea708 (rtnl_mutex){+.+.}-{3:3}, at: ppp_release+0x178/0x240 drivers/net/ppp/ppp_generic.c:401
     #1: ffff88804c422dd8 (&net->ipv6.fib6_gc_lock){+.-.}-{2:2}, at: spin_trylock_bh include/linux/spinlock.h:414 [inline]
     #1: ffff88804c422dd8 (&net->ipv6.fib6_gc_lock){+.-.}-{2:2}, at: fib6_run_gc+0x21b/0x2d0 net/ipv6/ip6_fib.c:2312
     #2: ffffffff89bd6a40 (rcu_read_lock){....}-{1:2}, at: __fib6_clean_all+0x0/0x290 net/ipv6/ip6_fib.c:2613
     #3: ffff8880a82e6430 (&tb->tb6_lock){+.-.}-{2:2}, at: spin_lock_bh include/linux/spinlock.h:359 [inline]
     #3: ffff8880a82e6430 (&tb->tb6_lock){+.-.}-{2:2}, at: __fib6_clean_all+0x107/0x290 net/ipv6/ip6_fib.c:2245
    
    stack backtrace:
    CPU: 1 PID: 8095 Comm: syz-executor.5 Not tainted 5.9.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x198/0x1fd lib/dump_stack.c:118
     fib6_del+0x12b4/0x1630 net/ipv6/ip6_fib.c:1996
     fib6_clean_node+0x39b/0x570 net/ipv6/ip6_fib.c:2180
     fib6_walk_continue+0x4aa/0x8e0 net/ipv6/ip6_fib.c:2102
     fib6_walk+0x182/0x370 net/ipv6/ip6_fib.c:2150
     fib6_clean_tree+0xdb/0x120 net/ipv6/ip6_fib.c:2230
     __fib6_clean_all+0x120/0x290 net/ipv6/ip6_fib.c:2246
     fib6_clean_all net/ipv6/ip6_fib.c:2257 [inline]
     fib6_run_gc+0x113/0x2d0 net/ipv6/ip6_fib.c:2320
     ndisc_netdev_event+0x217/0x350 net/ipv6/ndisc.c:1805
     notifier_call_chain+0xb5/0x200 kernel/notifier.c:83
     call_netdevice_notifiers_info+0xb5/0x130 net/core/dev.c:2033
     call_netdevice_notifiers_extack net/core/dev.c:2045 [inline]
     call_netdevice_notifiers net/core/dev.c:2059 [inline]
     dev_close_many+0x30b/0x650 net/core/dev.c:1634
     rollback_registered_many+0x3a8/0x1210 net/core/dev.c:9261
     rollback_registered net/core/dev.c:9329 [inline]
     unregister_netdevice_queue+0x2dd/0x570 net/core/dev.c:10410
     unregister_netdevice include/linux/netdevice.h:2774 [inline]
     ppp_release+0x216/0x240 drivers/net/ppp/ppp_generic.c:403
     __fput+0x285/0x920 fs/file_table.c:281
     task_work_run+0xdd/0x190 kernel/task_work.c:141
     tracehook_notify_resume include/linux/tracehook.h:188 [inline]
     exit_to_user_mode_loop kernel/entry/common.c:163 [inline]
     exit_to_user_mode_prepare+0x1e1/0x200 kernel/entry/common.c:190
     syscall_exit_to_user_mode+0x7e/0x2e0 kernel/entry/common.c:265
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 421842edeaf6 ("net/ipv6: Add fib6_null_entry")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: David Ahern <dsahern@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b1be6c925cdf4638811765a9160796291494b89
Author: David Ahern <dsahern@kernel.org>
Date:   Mon Sep 14 21:03:54 2020 -0600

    ipv4: Update exception handling for multipath routes via same device
    
    [ Upstream commit 2fbc6e89b2f1403189e624cabaf73e189c5e50c6 ]
    
    Kfir reported that pmtu exceptions are not created properly for
    deployments where multipath routes use the same device.
    
    After some digging I see 2 compounding problems:
    1. ip_route_output_key_hash_rcu is updating the flowi4_oif *after*
       the route lookup. This is the second use case where this has
       been a problem (the first is related to use of vti devices with
       VRF). I can not find any reason for the oif to be changed after the
       lookup; the code goes back to the start of git. It does not seem
       logical so remove it.
    
    2. fib_lookups for exceptions do not call fib_select_path to handle
       multipath route selection based on the hash.
    
    The end result is that the fib_lookup used to add the exception
    always creates it based using the first leg of the route.
    
    An example topology showing the problem:
    
                     |  host1
                 +------+
                 | eth0 |  .209
                 +------+
                     |
                 +------+
         switch  | br0  |
                 +------+
                     |
           +---------+---------+
           | host2             |  host3
       +------+             +------+
       | eth0 | .250        | eth0 | 192.168.252.252
       +------+             +------+
    
       +-----+             +-----+
       | vti | .2          | vti | 192.168.247.3
       +-----+             +-----+
           \                  /
     =================================
     tunnels
             192.168.247.1/24
    
    for h in host1 host2 host3; do
            ip netns add ${h}
            ip -netns ${h} link set lo up
            ip netns exec ${h} sysctl -wq net.ipv4.ip_forward=1
    done
    
    ip netns add switch
    ip -netns switch li set lo up
    ip -netns switch link add br0 type bridge stp 0
    ip -netns switch link set br0 up
    
    for n in 1 2 3; do
            ip -netns switch link add eth-sw type veth peer name eth-h${n}
            ip -netns switch li set eth-h${n} master br0 up
            ip -netns switch li set eth-sw netns host${n} name eth0
    done
    
    ip -netns host1 addr add 192.168.252.209/24 dev eth0
    ip -netns host1 link set dev eth0 up
    ip -netns host1 route add 192.168.247.0/24 \
            nexthop via 192.168.252.250 dev eth0 nexthop via 192.168.252.252 dev eth0
    
    ip -netns host2 addr add 192.168.252.250/24 dev eth0
    ip -netns host2 link set dev eth0 up
    
    ip -netns host2 addr add 192.168.252.252/24 dev eth0
    ip -netns host3 link set dev eth0 up
    
    ip netns add tunnel
    ip -netns tunnel li set lo up
    ip -netns tunnel li add br0 type bridge
    ip -netns tunnel li set br0 up
    for n in $(seq 11 20); do
            ip -netns tunnel addr add dev br0 192.168.247.${n}/24
    done
    
    for n in 2 3
    do
            ip -netns tunnel link add vti${n} type veth peer name eth${n}
            ip -netns tunnel link set eth${n} mtu 1360 master br0 up
            ip -netns tunnel link set vti${n} netns host${n} mtu 1360 up
            ip -netns host${n} addr add dev vti${n} 192.168.247.${n}/24
    done
    ip -netns tunnel ro add default nexthop via 192.168.247.2 nexthop via 192.168.247.3
    
    ip netns exec host1 ping -M do -s 1400 -c3 -I 192.168.252.209 192.168.247.11
    ip netns exec host1 ping -M do -s 1400 -c3 -I 192.168.252.209 192.168.247.15
    ip -netns host1 ro ls cache
    
    Before this patch the cache always shows exceptions against the first
    leg in the multipath route; 192.168.252.250 per this example. Since the
    hash has an initial random seed, you may need to vary the final octet
    more than what is listed. In my tests, using addresses between 11 and 19
    usually found 1 that used both legs.
    
    With this patch, the cache will have exceptions for both legs.
    
    Fixes: 4895c771c7f0 ("ipv4: Add FIB nexthop exceptions")
    Reported-by: Kfir Itzhak <mastertheknife@gmail.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8faee58f55a047bd25da710368f6cad68168fa1
Author: David Ahern <dsahern@gmail.com>
Date:   Sun Sep 13 12:43:39 2020 -0600

    ipv4: Initialize flowi4_multipath_hash in data path
    
    [ Upstream commit 1869e226a7b3ef75b4f70ede2f1b7229f7157fa4 ]
    
    flowi4_multipath_hash was added by the commit referenced below for
    tunnels. Unfortunately, the patch did not initialize the new field
    for several fast path lookups that do not initialize the entire flow
    struct to 0. Fix those locations. Currently, flowi4_multipath_hash
    is random garbage and affects the hash value computed by
    fib_multipath_hash for multipath selection.
    
    Fixes: 24ba14406c5c ("route: Add multipath_hash in flowi_common to make user-define hash")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Cc: wenxu <wenxu@ucloud.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f49e5618fd5429ba537d5449b263cf704bdef4be
Author: Wei Wang <weiwan@google.com>
Date:   Tue Sep 8 14:09:34 2020 -0700

    ip: fix tos reflection in ack and reset packets
    
    [ Upstream commit ba9e04a7ddf4f22a10e05bf9403db6b97743c7bf ]
    
    Currently, in tcp_v4_reqsk_send_ack() and tcp_v4_send_reset(), we
    echo the TOS value of the received packets in the response.
    However, we do not want to echo the lower 2 ECN bits in accordance
    with RFC 3168 6.1.5 robustness principles.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    
    Signed-off-by: Wei Wang <weiwan@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 584ff7bb14a65b0796afe824dc5a29b7b95af765
Author: Luo bin <luobin9@huawei.com>
Date:   Fri Sep 4 16:37:28 2020 +0800

    hinic: bump up the timeout of SET_FUNC_STATE cmd
    
    [ Upstream commit 4e4269ebe7e18038fffacf113e2dd5ded6d49942 ]
    
    We free memory regardless of the return value of SET_FUNC_STATE
    cmd in hinic_close function to avoid memory leak and this cmd may
    timeout when fw is busy with handling other cmds, so we bump up the
    timeout of this cmd to ensure it won't return failure.
    
    Fixes: 00e57a6d4ad3 ("net-next/hinic: Add Tx operation")
    Signed-off-by: Luo bin <luobin9@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6070a0f58d95a13234fecae40424c6978ec09ef6
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 9 12:46:48 2020 +0300

    hdlc_ppp: add range checks in ppp_cp_parse_cr()
    
    [ Upstream commit 66d42ed8b25b64eb63111a2b8582c5afc8bf1105 ]
    
    There are a couple bugs here:
    1) If opt[1] is zero then this results in a forever loop.  If the value
       is less than 2 then it is invalid.
    2) It assumes that "len" is more than sizeof(valid_accm) or 6 which can
       result in memory corruption.
    
    In the case of LCP_OPTION_ACCM, then  we should check "opt[1]" instead
    of "len" because, if "opt[1]" is less than sizeof(valid_accm) then
    "nak_len" gets out of sync and it can lead to memory corruption in the
    next iterations through the loop.  In case of LCP_OPTION_MAGIC, the
    only valid value for opt[1] is 6, but the code is trying to log invalid
    data so we should only discard the data when "len" is less than 6
    because that leads to a read overflow.
    
    Reported-by: ChenNan Of Chaitin Security Research Lab  <whutchennan@gmail.com>
    Fixes: e022c2f07ae5 ("WAN: new synchronous PPP implementation for generic HDLC.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e76c0f41d7b1951ef4161e079c832c2e904fd29f
Author: Mark Gray <mark.d.gray@redhat.com>
Date:   Wed Sep 16 05:19:35 2020 -0400

    geneve: add transport ports in route lookup for geneve
    
    [ Upstream commit 34beb21594519ce64a55a498c2fe7d567bc1ca20 ]
    
    This patch adds transport ports information for route lookup so that
    IPsec can select Geneve tunnel traffic to do encryption. This is
    needed for OVS/OVN IPsec with encrypted Geneve tunnels.
    
    This can be tested by configuring a host-host VPN using an IKE
    daemon and specifying port numbers. For example, for an
    Openswan-type configuration, the following parameters should be
    configured on both hosts and IPsec set up as-per normal:
    
    $ cat /etc/ipsec.conf
    
    conn in
    ...
    left=$IP1
    right=$IP2
    ...
    leftprotoport=udp/6081
    rightprotoport=udp
    ...
    conn out
    ...
    left=$IP1
    right=$IP2
    ...
    leftprotoport=udp
    rightprotoport=udp/6081
    ...
    
    The tunnel can then be setup using "ip" on both hosts (but
    changing the relevant IP addresses):
    
    $ ip link add tun type geneve id 1000 remote $IP2
    $ ip addr add 192.168.0.1/24 dev tun
    $ ip link set tun up
    
    This can then be tested by pinging from $IP1:
    
    $ ping 192.168.0.2
    
    Without this patch the traffic is unencrypted on the wire.
    
    Fixes: 2d07dc79fe04 ("geneve: add initial netdev driver for GENEVE tunnels")
    Signed-off-by: Qiuyu Xiao <qiuyu.xiao.qyx@gmail.com>
    Signed-off-by: Mark Gray <mark.d.gray@redhat.com>
    Reviewed-by: Greg Rose <gvrose8192@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 732a8eb73c5118078d70af0bfeb9536873ccb9b8
Author: Ganji Aravind <ganji.aravind@chelsio.com>
Date:   Fri Sep 4 15:58:18 2020 +0530

    cxgb4: Fix offset when clearing filter byte counters
    
    [ Upstream commit 94cc242a067a869c29800aa789d38b7676136e50 ]
    
    Pass the correct offset to clear the stale filter hit
    bytes counter. Otherwise, the counter starts incrementing
    from the stale information, instead of 0.
    
    Fixes: 12b276fbf6e0 ("cxgb4: add support to create hash filters")
    Signed-off-by: Ganji Aravind <ganji.aravind@chelsio.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a01b4105d2f00aaeb0425d420d0794cde7c80c4c
Author: Raju Rangoju <rajur@chelsio.com>
Date:   Wed Sep 16 21:50:39 2020 +0530

    cxgb4: fix memory leak during module unload
    
    [ Upstream commit f4a26a9b311d7ff9db461278faf2869d06496ef8 ]
    
    Fix the memory leak in mps during module unload
    path by freeing mps reference entries if the list
    adpter->mps_ref is not already empty
    
    Fixes: 28b3870578ef ("cxgb4: Re-work the logic for mps refcounting")
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d7002517f9bb2de70ab42787413bd2767862692
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sat Sep 5 22:55:37 2020 -0400

    bnxt_en: Fix NULL ptr dereference crash in bnxt_fw_reset_task()
    
    [ Upstream commit b16939b59cc00231a75d224fd058d22c9d064976 ]
    
    bnxt_fw_reset_task() which runs from a workqueue can race with
    bnxt_remove_one().  For example, if firmware reset and VF FLR are
    happening at about the same time.
    
    bnxt_remove_one() already cancels the workqueue and waits for it
    to finish, but we need to do this earlier before the devlink
    reporters are destroyed.  This will guarantee that
    the devlink reporters will always be valid when bnxt_fw_reset_task()
    is still running.
    
    Fixes: b148bb238c02 ("bnxt_en: Fix possible crash in bnxt_fw_reset_task().")
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67eb902e033523f5afd0eae2bc6dab8e4066138d
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sat Sep 5 22:55:36 2020 -0400

    bnxt_en: Avoid sending firmware messages when AER error is detected.
    
    [ Upstream commit b340dc680ed48dcc05b56e1ebe1b9535813c3ee0 ]
    
    When the driver goes through PCIe AER reset in error state, all
    firmware messages will timeout because the PCIe bus is no longer
    accessible.  This can lead to AER reset taking many minutes to
    complete as each firmware command takes time to timeout.
    
    Define a new macro BNXT_NO_FW_ACCESS() to skip these firmware messages
    when either firmware is in fatal error state or when
    pci_channel_offline() is true.  It now takes a more reasonable 20 to
    30 seconds to complete AER recovery.
    
    Fixes: b4fff2079d10 ("bnxt_en: Do not send firmware messages if firmware is in error state.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 946fc6d847682b6feb2f7100079b1ddcd5fd52f7
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Sep 3 19:10:11 2020 -0700

    act_ife: load meta modules before tcf_idr_check_alloc()
    
    [ Upstream commit cc8e58f8325cdf14b9516b61c384cdfd02a4f408 ]
    
    The following deadlock scenario is triggered by syzbot:
    
    Thread A:                               Thread B:
    tcf_idr_check_alloc()
    ...
    populate_metalist()
      rtnl_unlock()
                                            rtnl_lock()
                                            ...
      request_module()                      tcf_idr_check_alloc()
      rtnl_lock()
    
    At this point, thread A is waiting for thread B to release RTNL
    lock, while thread B is waiting for thread A to commit the IDR
    change with tcf_idr_insert() later.
    
    Break this deadlock situation by preloading ife modules earlier,
    before tcf_idr_check_alloc(), this is fine because we only need
    to load modules we need potentially.
    
    Reported-and-tested-by: syzbot+80e32b5d1f9923f8ace6@syzkaller.appspotmail.com
    Fixes: 0190c1d452a9 ("net: sched: atomically check-allocate action")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Vlad Buslov <vladbu@mellanox.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9215385638b70b5d4b050a42933cbaf884f8a6f3
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Sep 4 21:07:49 2020 -0700

    ibmvnic: add missing parenthesis in do_reset()
    
    [ Upstream commit 8ae4dff882eb879c17bf46574201bd37fc6bc8b5 ]
    
    Indentation and logic clearly show that this code is missing
    parenthesis.
    
    Fixes: 9f1345737790 ("ibmvnic fix NULL tx_pools and rx_tools issue at do_reset")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68c7abb8302ab8c67b07ab342a85a6e53ae1aab8
Author: Mingming Cao <mmc@linux.vnet.ibm.com>
Date:   Tue Aug 25 13:26:41 2020 -0400

    ibmvnic fix NULL tx_pools and rx_tools issue at do_reset
    
    [ Upstream commit 9f13457377907fa253aef560e1a37e1ca4197f9b ]
    
    At the time of do_rest, ibmvnic tries to re-initalize the tx_pools
    and rx_pools to avoid re-allocating the long term buffer. However
    there is a window inside do_reset that the tx_pools and
    rx_pools were freed before re-initialized making it possible to deference
    null pointers.
    
    This patch fix this issue by always check the tx_pool
    and rx_pool are not NULL after ibmvnic_login. If so, re-allocating
    the pools. This will avoid getting into calling reset_tx/rx_pools with
    NULL adapter tx_pools/rx_pools pointer. Also add null pointer check in
    reset_tx_pools and reset_rx_pools to safe handle NULL pointer case.
    
    Signed-off-by: Mingming Cao <mmc@linux.vnet.ibm.com>
    Signed-off-by: Dany Madden <drt@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
