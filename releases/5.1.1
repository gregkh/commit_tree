commit b724e93564045d97ec1179d3acacdac60e658569
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat May 11 07:49:56 2019 +0200

    Linux 5.1.1

commit 022ccef6d1c3e52148392cf17c25d6957a50e69f
Author: Will Deacon <will@kernel.org>
Date:   Mon Apr 8 14:23:17 2019 +0100

    arm64: futex: Bound number of LDXR/STXR loops in FUTEX_WAKE_OP
    
    commit 03110a5cb2161690ae5ac04994d47ed0cd6cef75 upstream.
    
    Our futex implementation makes use of LDXR/STXR loops to perform atomic
    updates to user memory from atomic context. This can lead to latency
    problems if we end up spinning around the LL/SC sequence at the expense
    of doing something useful.
    
    Rework our futex atomic operations so that we return -EAGAIN if we fail
    to update the futex word after 128 attempts. The core futex code will
    reschedule if necessary and we'll try again later.
    
    Cc: <stable@kernel.org>
    Fixes: 6170a97460db ("arm64: Atomic operations")
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 325d0a18d3ff0d0392dcbb624f0818b7dade2420
Author: Will Deacon <will@kernel.org>
Date:   Thu Feb 28 11:58:08 2019 +0000

    locking/futex: Allow low-level atomic operations to return -EAGAIN
    
    commit 6b4f4bc9cb22875f97023984a625386f0c7cc1c0 upstream.
    
    Some futex() operations, including FUTEX_WAKE_OP, require the kernel to
    perform an atomic read-modify-write of the futex word via the userspace
    mapping. These operations are implemented by each architecture in
    arch_futex_atomic_op_inuser() and futex_atomic_cmpxchg_inatomic(), which
    are called in atomic context with the relevant hash bucket locks held.
    
    Although these routines may return -EFAULT in response to a page fault
    generated when accessing userspace, they are expected to succeed (i.e.
    return 0) in all other cases. This poses a problem for architectures
    that do not provide bounded forward progress guarantees or fairness of
    contended atomic operations and can lead to starvation in some cases.
    
    In these problematic scenarios, we must return back to the core futex
    code so that we can drop the hash bucket locks and reschedule if
    necessary, much like we do in the case of a page fault.
    
    Allow architectures to return -EAGAIN from their implementations of
    arch_futex_atomic_op_inuser() and futex_atomic_cmpxchg_inatomic(), which
    will cause the core futex code to reschedule if necessary and return
    back to the architecture code later on.
    
    Cc: <stable@kernel.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ae39e99e5395bee9dfa6796c2e2f125d96d0096
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Apr 23 13:40:20 2019 +0300

    i3c: Fix a shift wrap bug in i3c_bus_set_addr_slot_status()
    
    commit 476c7e1d34f2a03b1aa5a924c50703053fe5f77c upstream.
    
    The problem here is that addr can be I3C_BROADCAST_ADDR (126).  That
    means we're shifting by (126 * 2) % 64 which is 60.  The
    I3C_ADDR_SLOT_STATUS_MASK is an enum which is an unsigned int in GCC
    so shifts greater than 31 are undefined.
    
    Fixes: 3a379bbcea0a ("i3c: Add core I3C infrastructure")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8f93c2735218ec38a2e778128da844c811448ac
Author: Ross Zwisler <zwisler@chromium.org>
Date:   Mon Apr 29 12:25:17 2019 -0600

    ASoC: Intel: avoid Oops if DMA setup fails
    
    commit 0efa3334d65b7f421ba12382dfa58f6ff5bf83c4 upstream.
    
    Currently in sst_dsp_new() if we get an error return from sst_dma_new()
    we just print an error message and then still complete the function
    successfully.  This means that we are trying to run without sst->dma
    properly set up, which will result in NULL pointer dereference when
    sst->dma is later used.  This was happening for me in
    sst_dsp_dma_get_channel():
    
            struct sst_dma *dma = dsp->dma;
            ...
            dma->ch = dma_request_channel(mask, dma_chan_filter, dsp);
    
    This resulted in:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000018
       IP: sst_dsp_dma_get_channel+0x4f/0x125 [snd_soc_sst_firmware]
    
    Fix this by adding proper error handling for the case where we fail to
    set up DMA.
    
    This change only affects Haswell and Broadwell systems.  Baytrail
    systems explicilty opt-out of DMA via sst->pdata->resindex_dma_base
    being set to -1.
    
    Signed-off-by: Ross Zwisler <zwisler@google.com>
    Cc: stable@vger.kernel.org
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fc35c756bc845a740abda5b36f17357f251b279
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Apr 30 12:21:45 2019 +0200

    UAS: fix alignment of scatter/gather segments
    
    commit 3ae62a42090f1ed48e2313ed256a1182a85fb575 upstream.
    
    This is the UAS version of
    
    747668dbc061b3e62bc1982767a3a1f9815fcf0e
    usb-storage: Set virt_boundary_mask to avoid SG overflows
    
    We are not as likely to be vulnerable as storage, as it is unlikelier
    that UAS is run over a controller without native support for SG,
    but the issue exists.
    The issue has been existing since the inception of the driver.
    
    Fixes: 115bb1ffa54c ("USB: Add UAS driver")
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d00686df16844a12910fae00dbc79b228e50cce7
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Mon Apr 1 11:43:12 2019 +0800

    Bluetooth: hci_bcm: Fix empty regulator supplies for Intel Macs
    
    commit 62611abc8f37d00e3b0cff0eb2d72fa92b05fd27 upstream.
    
    The code path for Macs goes through bcm_apple_get_resources(), which
    skips over the code that sets up the regulator supplies. As a result,
    the call to regulator_bulk_enable() / regulator_bulk_disable() results
    in a NULL pointer dereference.
    
    This was reported on the kernel.org Bugzilla, bug 202963.
    
    Unbreak Broadcom Bluetooth support on Intel Macs by checking if the
    supplies were set up before enabling or disabling them.
    
    The same does not need to be done for the clocks, as the common clock
    framework API checks for NULL pointers.
    
    Fixes: 75d11676dccb ("Bluetooth: hci_bcm: Add support for regulator supplies")
    Cc: <stable@vger.kernel.org> # 5.0.x
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Tested-by: Imre Kaloz <kaloz@openwrt.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a324fa50549a0a30676cd4e0aa7d1d0c11a503a1
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Mar 14 15:43:37 2019 +0200

    Bluetooth: Fix not initializing L2CAP tx_credits
    
    commit ba8f5289f706aed94cc95b15cc5b89e22062f61f upstream.
    
    l2cap_le_flowctl_init was reseting the tx_credits which works only for
    outgoing connection since that set the tx_credits on the response, for
    incoming connections that was not the case which leaves the channel
    without any credits causing it to be suspended.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: stable@vger.kernel.org # 4.20+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07e38998a19d72b916c39a983c19134522ae806b
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Wed Apr 24 22:19:17 2019 +0200

    Bluetooth: Align minimum encryption key size for LE and BR/EDR connections
    
    commit d5bb334a8e171b262e48f378bd2096c0ea458265 upstream.
    
    The minimum encryption key size for LE connections is 56 bits and to
    align LE with BR/EDR, enforce 56 bits of minimum encryption key size for
    BR/EDR connections as well.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d4cafccc6d3af718de78ab23f79feb44ec4d3d3
Author: Young Xiao <YangX92@hotmail.com>
Date:   Fri Apr 12 15:24:30 2019 +0800

    Bluetooth: hidp: fix buffer overflow
    
    commit a1616a5ac99ede5d605047a9012481ce7ff18b16 upstream.
    
    Struct ca is copied from userspace. It is not checked whether the "name"
    field is NULL terminated, which allows local users to obtain potentially
    sensitive information from kernel stack memory, via a HIDPCONNADD command.
    
    This vulnerability is similar to CVE-2011-1079.
    
    Signed-off-by: Young Xiao <YangX92@hotmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 435885bdb0d8ba3edd414a807343f7ae4167513b
Author: Quinn Tran <qtran@marvell.com>
Date:   Tue Apr 23 14:52:35 2019 -0700

    scsi: qla2xxx: Fix device staying in blocked state
    
    commit 2137490f2147a8d0799b72b9a1023efb012d40c7 upstream.
    
    This patch fixes issue reported by some of the customers, who discovered
    that after cable pull scenario the devices disappear and path seems to
    remain in blocked state. Once the device reappears, driver does not seem to
    update path to online. This issue appears because of the defer flag
    creating race condition where the same session reappears.  This patch fixes
    this issue by indicating SCSI-ML of device lost when
    qlt_free_session_done() is called from qlt_unreg_sess().
    
    Fixes: 41dc529a4602a ("qla2xxx: Improve RSCN handling in driver")
    Signed-off-by: Quinn Tran <qtran@marvell.com>
    Cc: stable@vger.kernel.org #4.19
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63ec822488c994221510a8084038b9ef60b845c0
Author: Giridhar Malavali <gmalavali@marvell.com>
Date:   Tue Apr 2 14:24:30 2019 -0700

    scsi: qla2xxx: Set remote port devloss timeout to 0
    
    commit ffc81fc07efc94a04695a8c1d458a06aecaf9f30 upstream.
    
    This patch sets remote_port_devloss value to 0. This indicates to FC-NVMe
    transport that driver is unloading and transport should not retry.
    
    Fixes: e476fe8af5ff ("scsi: qla2xxx: Fix unload when NVMe devices are configured")
    Cc: stable@vger.kernel.org
    Signed-off-by: Giridhar Malavali <gmalavali@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7065a70d695b031d70e629adbb07237de94eca31
Author: Andrew Vasquez <andrewv@marvell.com>
Date:   Tue Apr 2 14:24:25 2019 -0700

    scsi: qla2xxx: Fix incorrect region-size setting in optrom SYSFS routines
    
    commit 5cbdae10bf11f96e30b4d14de7b08c8b490e903c upstream.
    
    Commit e6f77540c067 ("scsi: qla2xxx: Fix an integer overflow in sysfs
    code") incorrectly set 'optrom_region_size' to 'start+size', which can
    overflow option-rom boundaries when 'start' is non-zero.  Continue setting
    optrom_region_size to the proper adjusted value of 'size'.
    
    Fixes: e6f77540c067 ("scsi: qla2xxx: Fix an integer overflow in sysfs code")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrew Vasquez <andrewv@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1119e98d0eb093f2ac8c230ef31afeb3be522520
Author: Silvio Cesare <silvio.cesare@gmail.com>
Date:   Thu Mar 21 09:44:32 2019 -0700

    scsi: lpfc: change snprintf to scnprintf for possible overflow
    
    commit e7f7b6f38a44697428f5a2e7c606de028df2b0e3 upstream.
    
    Change snprintf to scnprintf. There are generally two cases where using
    snprintf causes problems.
    
    1) Uses of size += snprintf(buf, SIZE - size, fmt, ...)
    In this case, if snprintf would have written more characters than what the
    buffer size (SIZE) is, then size will end up larger than SIZE. In later
    uses of snprintf, SIZE - size will result in a negative number, leading
    to problems. Note that size might already be too large by using
    size = snprintf before the code reaches a case of size += snprintf.
    
    2) If size is ultimately used as a length parameter for a copy back to user
    space, then it will potentially allow for a buffer overflow and information
    disclosure when size is greater than SIZE. When the size is used to index
    the buffer directly, we can have memory corruption. This also means when
    size = snprintf... is used, it may also cause problems since size may become
    large.  Copying to userspace is mitigated by the HARDENED_USERCOPY kernel
    configuration.
    
    The solution to these issues is to use scnprintf which returns the number of
    characters actually written to the buffer, so the size variable will never
    exceed SIZE.
    
    Signed-off-by: Silvio Cesare <silvio.cesare@gmail.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: James Smart <james.smart@broadcom.com>
    Cc: Dick Kennedy <dick.kennedy@broadcom.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Greg KH <greg@kroah.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fb84183e04792c3abc3205336a56b374d6a515d
Author: Samuel Holland <samuel@sholland.org>
Date:   Tue Apr 30 09:59:37 2019 -0500

    soc: sunxi: Fix missing dependency on REGMAP_MMIO
    
    commit a84014e1db35d8e7af09878d0b4bf30804fb17d5 upstream.
    
    When enabling ARCH_SUNXI from allnoconfig, SUNXI_SRAM is enabled, but
    not REGMAP_MMIO, so the kernel fails to link with an undefined reference
    to __devm_regmap_init_mmio_clk. Select REGMAP_MMIO, as suggested in
    drivers/base/regmap/Kconfig.
    
    This creates the following dependency loop:
    
      drivers/of/Kconfig:68:                symbol OF_IRQ depends on IRQ_DOMAIN
      kernel/irq/Kconfig:63:                symbol IRQ_DOMAIN is selected by REGMAP
      drivers/base/regmap/Kconfig:7:        symbol REGMAP default is visible depending on REGMAP_MMIO
      drivers/base/regmap/Kconfig:39:       symbol REGMAP_MMIO is selected by SUNXI_SRAM
      drivers/soc/sunxi/Kconfig:4:          symbol SUNXI_SRAM is selected by USB_MUSB_SUNXI
      drivers/usb/musb/Kconfig:63:          symbol USB_MUSB_SUNXI depends on GENERIC_PHY
      drivers/phy/Kconfig:7:                symbol GENERIC_PHY is selected by PHY_BCM_NS_USB3
      drivers/phy/broadcom/Kconfig:29:      symbol PHY_BCM_NS_USB3 depends on MDIO_BUS
      drivers/net/phy/Kconfig:12:           symbol MDIO_BUS default is visible depending on PHYLIB
      drivers/net/phy/Kconfig:181:          symbol PHYLIB is selected by ARC_EMAC_CORE
      drivers/net/ethernet/arc/Kconfig:18:  symbol ARC_EMAC_CORE is selected by ARC_EMAC
      drivers/net/ethernet/arc/Kconfig:24:  symbol ARC_EMAC depends on OF_IRQ
    
    To fix the circular dependency, make USB_MUSB_SUNXI select GENERIC_PHY
    instead of depending on it. This matches the use of GENERIC_PHY by all
    but two other drivers.
    
    Cc: <stable@vger.kernel.org> # 4.19
    Fixes: 5828729bebbb ("soc: sunxi: export a regmap for EMAC clock reg on A64")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cebdbdda4850e4ce844c2c2d03d838a43abbd63a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 18 13:39:33 2019 +0200

    ACPI / LPSS: Use acpi_lpss_* instead of acpi_subsys_* functions for hibernate
    
    commit c8afd03486c26accdda4846e5561aa3f8e862a9d upstream.
    
    Commit 48402cee6889 ("ACPI / LPSS: Resume BYT/CHT I2C controllers from
    resume_noirq") makes acpi_lpss_{suspend_late,resume_early}() bail early
    on BYT/CHT as resume_from_noirq is set.
    
    This means that on resume from hibernate dw_i2c_plat_resume() doesn't get
    called by the restore_early callback, acpi_lpss_resume_early(). Instead it
    should be called by the restore_noirq callback matching how things are done
    when resume_from_noirq is set and we are doing a regular resume.
    
    Change the restore_noirq callback to acpi_lpss_resume_noirq so that
    dw_i2c_plat_resume() gets properly called when resume_from_noirq is set
    and we are resuming from hibernate.
    
    Likewise also change the poweroff_noirq callback so that
    dw_i2c_plat_suspend gets called properly.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=202139
    Fixes: 48402cee6889 ("ACPI / LPSS: Resume BYT/CHT I2C controllers from resume_noirq")
    Reported-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Cc: 4.20+ <stable@vger.kernel.org> # 4.20+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6ad5c7d15ea2203e2f69a0a3e264428c2a23825
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Fri Mar 8 17:47:10 2019 +0100

    cpufreq: armada-37xx: fix frequency calculation for opp
    
    commit 8db82563451f976597ab7b282ec655e4390a4088 upstream.
    
    The frequency calculation was based on the current(max) frequency of the
    CPU. However for low frequency, the value used was already the parent
    frequency divided by a factor of 2.
    
    Instead of using this frequency, this fix directly get the frequency from
    the parent clock.
    
    Fixes: 92ce45fb875d ("cpufreq: Add DVFS support for Armada 37xx")
    Cc: <stable@vger.kernel.org>
    Reported-by: Christian Neubert <christian.neubert.86@gmail.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a8fc4fad97d3b997388d14f899a55531773b3ab
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Tue Apr 16 16:49:27 2019 -0700

    iio: adc: qcom-spmi-adc5: Fix of-based module autoloading
    
    commit 447ccb4e0834a9f9f0dd5643e421c7f1a1649e6a upstream.
    
    The of_device_id table needs to be registered as module alias in order
    for automatic module loading to pick the kernel module based on the
    DeviceTree compatible. So add MODULE_DEVICE_TABLE() to make this happen.
    
    Fixes: e13d757279bb ("iio: adc: Add QCOM SPMI PMIC5 ADC driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b1dbf70684b1c0d047e6ca846564845991f9915
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Wed Apr 17 10:35:36 2019 +0300

    intel_th: pci: Add Comet Lake support
    
    commit e60e9a4b231a20a199d7a61caadc48693c30d695 upstream.
    
    This adds support for Intel TH on Comet Lake.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f0f5b3ed6d097676e2a2ec71aed3aeb8a08ac36
Author: Prasad Sodagudi <psodagud@codeaurora.org>
Date:   Sun Mar 24 07:57:04 2019 -0700

    genirq: Prevent use-after-free and work list corruption
    
    commit 59c39840f5abf4a71e1810a8da71aaccd6c17d26 upstream.
    
    When irq_set_affinity_notifier() replaces the notifier, then the
    reference count on the old notifier is dropped which causes it to be
    freed. But nothing ensures that the old notifier is not longer queued
    in the work list. If it is queued this results in a use after free and
    possibly in work list corruption.
    
    Ensure that the work is canceled before the reference is dropped.
    
    Signed-off-by: Prasad Sodagudi <psodagud@codeaurora.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: marc.zyngier@arm.com
    Link: https://lkml.kernel.org/r/1553439424-6529-1-git-send-email-psodagud@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03bc2652443576da16c63574bc99cb6468339567
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Apr 15 13:19:25 2019 -0400

    usb-storage: Set virt_boundary_mask to avoid SG overflows
    
    commit 747668dbc061b3e62bc1982767a3a1f9815fcf0e upstream.
    
    The USB subsystem has always had an unusual requirement for its
    scatter-gather transfers: Each element in the scatterlist (except the
    last one) must have a length divisible by the bulk maxpacket size.
    This is a particular issue for USB mass storage, which uses SG lists
    created by the block layer rather than setting up its own.
    
    So far we have scraped by okay because most devices have a logical
    block size of 512 bytes or larger, and the bulk maxpacket sizes for
    USB 2 and below are all <= 512.  However, USB 3 has a bulk maxpacket
    size of 1024.  Since the xhci-hcd driver includes native SG support,
    this hasn't mattered much.  But now people are trying to use USB-3
    mass storage devices with USBIP, and the vhci-hcd driver currently
    does not have full SG support.
    
    The result is an overflow error, when the driver attempts to implement
    an SG transfer of 63 512-byte blocks as a single
    3584-byte (7 blocks) transfer followed by seven 4096-byte (8 blocks)
    transfers.  The device instead sends 31 1024-byte packets followed by
    a 512-byte packet, and this overruns the first SG buffer.
    
    Ideally this would be fixed by adding better SG support to vhci-hcd.
    But for now it appears we can work around the problem by
    asking the block layer to respect the maxpacket limitation, through
    the use of the virt_boundary_mask.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Seth Bollinger <Seth.Bollinger@digi.com>
    Tested-by: Seth Bollinger <Seth.Bollinger@digi.com>
    CC: Ming Lei <tom.leiming@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57a65a3140606a4c1122a0dcfc8a06a8bd5d70b2
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Apr 25 18:05:39 2019 +0200

    USB: cdc-acm: fix unthrottle races
    
    commit 764478f41130f1b8d8057575b89e69980a0f600d upstream.
    
    Fix two long-standing bugs which could potentially lead to memory
    corruption or leave the port throttled until it is reopened (on weakly
    ordered systems), respectively, when read-URB completion races with
    unthrottle().
    
    First, the URB must not be marked as free before processing is complete
    to prevent it from being submitted by unthrottle() on another CPU.
    
            CPU 1                           CPU 2
            ================                ================
            complete()                      unthrottle()
              process_urb();
              smp_mb__before_atomic();
              set_bit(i, free);               if (test_and_clear_bit(i, free))
                                                      submit_urb();
    
    Second, the URB must be marked as free before checking the throttled
    flag to prevent unthrottle() on another CPU from failing to observe that
    the URB needs to be submitted if complete() sees that the throttled flag
    is set.
    
            CPU 1                           CPU 2
            ================                ================
            complete()                      unthrottle()
              set_bit(i, free);               throttled = 0;
              smp_mb__after_atomic();         smp_mb();
              if (throttled)                  if (test_and_clear_bit(i, free))
                      return;                         submit_urb();
    
    Note that test_and_clear_bit() only implies barriers when the test is
    successful. To handle the case where the URB is still in use an explicit
    barrier needs to be added to unthrottle() for the second race condition.
    
    Also note that the first race was fixed by 36e59e0d70d6 ("cdc-acm: fix
    race between callback and unthrottle") back in 2015, but the bug was
    reintroduced a year later.
    
    Fixes: 1aba579f3cf5 ("cdc-acm: handle read pipe errors")
    Fixes: 088c64f81284 ("USB: cdc-acm: re-write read processing")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b27d939957bc9fee53daee6a5780f1b120ea37e4
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Tue Apr 30 09:22:29 2019 +0800

    USB: serial: f81232: fix interrupt worker not stop
    
    commit 804dbee1e49774918339c1e5a87400988c0819e8 upstream.
    
    The F81232 will use interrupt worker to handle MSR change.
    This patch will fix the issue that interrupt work should stop
    in close() and suspend().
    
    This also fixes line-status events being disabled after a suspend cycle
    until the port is re-opened.
    
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    [ johan: amend commit message ]
    Fixes: 87fe5adcd8de ("USB: f81232: implement read IIR/MSR with endpoint")
    Cc: stable <stable@vger.kernel.org>     # 4.1
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1ab43c370c590b19855b203e8b2dc1f53e6f7e6
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Apr 25 13:55:23 2019 -0700

    usb: dwc3: Fix default lpm_nyet_threshold value
    
    commit 8d791929b2fbdf7734c1596d808e55cb457f4562 upstream.
    
    The max possible value for DCTL.LPM_NYET_THRES is 15 and not 255. Change
    the default value to 15.
    
    Cc: stable@vger.kernel.org
    Fixes: 80caf7d21adc ("usb: dwc3: add lpm erratum support")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5928706ff19f7df98cc29a7bef468af5cba88ad3
Author: Marc Gonzalez <marc.w.gonzalez@free.fr>
Date:   Wed Apr 24 17:00:57 2019 +0200

    usb: dwc3: Allow building USB_DWC3_QCOM without EXTCON
    
    commit 77a4946516fe488b6a33390de6d749f934a243ba upstream.
    
    Keep EXTCON support optional, as some platforms do not need it.
    
    Do the same for USB_DWC3_OMAP while we're at it.
    
    Fixes: 3def4031b3e3f ("usb: dwc3: add EXTCON dependency for qcom")
    Signed-off-by: Marc Gonzalez <marc.w.gonzalez@free.fr>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6643e2610aa7e745c49656d6917f47589d8de5e1
Author: Christian Gromm <christian.gromm@microchip.com>
Date:   Tue Apr 30 14:07:48 2019 +0200

    staging: most: sound: pass correct device when creating a sound card
    
    commit 98592c1faca82a9024a64e4ecead68b19f81c299 upstream.
    
    This patch fixes the usage of the wrong struct device when calling
    function snd_card_new.
    
    Reported-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Signed-off-by: Christian Gromm <christian.gromm@microchip.com>
    Fixes: 69c90cf1b2fa ("staging: most: sound: call snd_card_new with struct device")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0e289e4a66585b48151b42b940a4b54f8d10751
Author: Suresh Udipi <sudipi@jp.adit-jv.com>
Date:   Wed Apr 24 21:23:43 2019 +0200

    staging: most: cdev: fix chrdev_region leak in mod_exit
    
    commit af708900e9a48c0aa46070c8a8cdf0608a1d2025 upstream.
    
    It looks like v4.18-rc1 commit [0] which upstreams mld-1.8.0
    commit [1] missed to fix the memory leak in mod_exit function.
    
    Do it now.
    
    [0] aba258b7310167 ("staging: most: cdev: fix chrdev_region leak")
    [1] https://github.com/microchip-ais/linux/commit/a2d8f7ae7ea381
        ("staging: most: cdev: fix leak for chrdev_region")
    
    Signed-off-by: Suresh Udipi <sudipi@jp.adit-jv.com>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Christian Gromm <christian.gromm@microchip.com>
    Fixes: aba258b73101 ("staging: most: cdev: fix chrdev_region leak")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 651832db87667f12d5ef57e22b48ee9eba921231
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sun Apr 7 21:58:43 2019 +0900

    staging: wilc1000: Avoid GFP_KERNEL allocation from atomic context.
    
    commit ae26aa844679cdf660e12c7055f958cb90889eb6 upstream.
    
    Since wilc_set_multicast_list() is called with dev->addr_list_lock
    spinlock held, we can't use GFP_KERNEL memory allocation.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: e624c58cf8eb ("staging: wilc1000: refactor code to avoid use of wilc_set_multicast_list global")
    Cc: Ajay Singh <ajay.kathat@microchip.com>
    Reviewed-by: Adham Abozaeid <adham.abozaeid@microchip.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f40de00d49fc01c9ae22405cb303e64d24626afe
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Apr 4 08:53:30 2019 +0200

    staging: greybus: power_supply: fix prop-descriptor request size
    
    commit 47830c1127ef166af787caf2f871f23089610a7f upstream.
    
    Since moving the message buffers off the stack, the dynamically
    allocated get-prop-descriptor request buffer is incorrectly sized due to
    using the pointer rather than request-struct size when creating the
    operation.
    
    Fortunately, the pointer size is always larger than this one-byte
    request, but this could still cause trouble on the remote end due to the
    unexpected message size.
    
    Fixes: 9d15134d067e ("greybus: power_supply: rework get descriptors")
    Cc: stable <stable@vger.kernel.org>     # 4.9
    Cc: Rui Miguel Silva <rui.silva@linaro.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d222de4c7d88624822dbd0c793822d54c3c7d180
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Mon May 6 13:45:26 2019 +0300

    ubsan: Fix nasty -Wbuiltin-declaration-mismatch GCC-9 warnings
    
    commit f0996bc2978e02d2ea898101462b960f6119b18f upstream.
    
    Building lib/ubsan.c with gcc-9 results in a ton of nasty warnings like
    this one:
    
        lib/ubsan.c warning: conflicting types for built-in function
             ‘__ubsan_handle_negate_overflow’; expected ‘void(void *, void *)’ [-Wbuiltin-declaration-mismatch]
    
    The kernel's declarations of __ubsan_handle_*() often uses 'unsigned
    long' types in parameters while GCC these parameters as 'void *' types,
    hence the mismatch.
    
    Fix this by using 'void *' to match GCC's declarations.
    
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Fixes: c6d308534aef ("UBSAN: run-time undefined behavior sanity checker")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6637557e4ecce564d9c7ce52d13ffb49281115ba
Author: Dexuan Cui <decui@microsoft.com>
Date:   Fri Apr 12 23:34:45 2019 +0000

    Drivers: hv: vmbus: Remove the undesired put_cpu_ptr() in hv_synic_cleanup()
    
    commit a0033bd1eae4650b69be07c17cb87393da584563 upstream.
    
    With CONFIG_DEBUG_PREEMPT=y, the put_cpu_ptr() triggers an underflow
    warning in preempt_count_sub().
    
    Fixes: 37cdd991fac8 ("vmbus: put related per-cpu variable together")
    Cc: stable@vger.kernel.org
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Sasha Levin (Microsoft) <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
