commit 0a27a29496060843ae3a8fe78aaec0062cbd5dfa
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Apr 13 13:18:12 2020 +0200

    Linux 5.6.4

commit 136e3ac01aaae6f0768a40afceead0c39cf2212c
Author: Saravana Kannan <saravanak@google.com>
Date:   Fri Feb 21 17:40:34 2020 -0800

    driver core: Reevaluate dev->links.need_for_probe as suppliers are added
    
    commit 1745d299af5b373abad08fa29bff0d31dc6aff21 upstream.
    
    A previous patch 03324507e66c ("driver core: Allow
    fwnode_operations.add_links to differentiate errors") forgot to update
    all call sites to fwnode_operations.add_links. This patch fixes that.
    
    Legend:
    -> Denotes RHS is an optional/potential supplier for LHS
    => Denotes RHS is a mandatory supplier for LHS
    
    Example:
    
    Device A => Device X
    Device A -> Device Y
    
    Before this patch:
    1. Device A is added.
    2. Device A is marked as waiting for mandatory suppliers
    3. Device X is added
    4. Device A is left marked as waiting for mandatory suppliers
    
    Step 4 is wrong since all mandatory suppliers of Device A have been
    added.
    
    After this patch:
    1. Device A is added.
    2. Device A is marked as waiting for mandatory suppliers
    3. Device X is added
    4. Device A is no longer considered as waiting for mandatory suppliers
    
    This is the correct behavior.
    
    Fixes: 03324507e66c ("driver core: Allow fwnode_operations.add_links to differentiate errors")
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    Link: https://lore.kernel.org/r/20200222014038.180923-2-saravanak@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c0732ed742079b27f5372efe35cec7be0255035
Author: Hillf Danton <hdanton@sina.com>
Date:   Mon Mar 23 17:42:35 2020 +0800

    io-uring: drop completion when removing file
    
    commit 4afdb733b1606c6cb86e7833f9335f4870cf7ddd upstream.
    
    A case of task hung was reported by syzbot,
    
    INFO: task syz-executor975:9880 blocked for more than 143 seconds.
          Not tainted 5.6.0-rc6-syzkaller #0
    "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    syz-executor975 D27576  9880   9878 0x80004000
    Call Trace:
     schedule+0xd0/0x2a0 kernel/sched/core.c:4154
     schedule_timeout+0x6db/0xba0 kernel/time/timer.c:1871
     do_wait_for_common kernel/sched/completion.c:83 [inline]
     __wait_for_common kernel/sched/completion.c:104 [inline]
     wait_for_common kernel/sched/completion.c:115 [inline]
     wait_for_completion+0x26a/0x3c0 kernel/sched/completion.c:136
     io_queue_file_removal+0x1af/0x1e0 fs/io_uring.c:5826
     __io_sqe_files_update.isra.0+0x3a1/0xb00 fs/io_uring.c:5867
     io_sqe_files_update fs/io_uring.c:5918 [inline]
     __io_uring_register+0x377/0x2c00 fs/io_uring.c:7131
     __do_sys_io_uring_register fs/io_uring.c:7202 [inline]
     __se_sys_io_uring_register fs/io_uring.c:7184 [inline]
     __x64_sys_io_uring_register+0x192/0x560 fs/io_uring.c:7184
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    and bisect pointed to 05f3fb3c5397 ("io_uring: avoid ring quiesce for
    fixed file set unregister and update").
    
    It is down to the order that we wait for work done before flushing it
    while nobody is likely going to wake us up.
    
    We can drop that completion on stack as flushing work itself is a sync
    operation we need and no more is left behind it.
    
    To that end, io_file_put::done is re-used for indicating if it can be
    freed in the workqueue worker context.
    
    Reported-and-Inspired-by: syzbot <syzbot+538d1957ce178382a394@syzkaller.appspotmail.com>
    Signed-off-by: Hillf Danton <hdanton@sina.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Rename ->done to ->free_pfile
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 5c46deb2cb626b201536245ed9372f7de666b6b8
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Sun Mar 29 16:56:47 2020 +0800

    fbcon: fix null-ptr-deref in fbcon_switch
    
    commit b139f8b00db4a8ea75a4174346eafa48041aa489 upstream.
    
    Set logo_shown to FBCON_LOGO_CANSHOW when the vc was deallocated.
    
    syzkaller report: https://lkml.org/lkml/2020/3/27/403
    general protection fault, probably for non-canonical address
    0xdffffc000000006c: 0000 [#1] SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000360-0x0000000000000367]
    RIP: 0010:fbcon_switch+0x28f/0x1740
    drivers/video/fbdev/core/fbcon.c:2260
    
    Call Trace:
    redraw_screen+0x2a8/0x770 drivers/tty/vt/vt.c:1008
    vc_do_resize+0xfe7/0x1360 drivers/tty/vt/vt.c:1295
    fbcon_init+0x1221/0x1ab0 drivers/video/fbdev/core/fbcon.c:1219
    visual_init+0x305/0x5c0 drivers/tty/vt/vt.c:1062
    do_bind_con_driver+0x536/0x890 drivers/tty/vt/vt.c:3542
    do_take_over_console+0x453/0x5b0 drivers/tty/vt/vt.c:4122
    do_fbcon_takeover+0x10b/0x210 drivers/video/fbdev/core/fbcon.c:588
    fbcon_fb_registered+0x26b/0x340 drivers/video/fbdev/core/fbcon.c:3259
    do_register_framebuffer drivers/video/fbdev/core/fbmem.c:1664 [inline]
    register_framebuffer+0x56e/0x980 drivers/video/fbdev/core/fbmem.c:1832
    dlfb_usb_probe.cold+0x1743/0x1ba3 drivers/video/fbdev/udlfb.c:1735
    usb_probe_interface+0x310/0x800 drivers/usb/core/driver.c:374
    
    accessing vc_cons[logo_shown].d->vc_top causes the bug.
    
    Reported-by: syzbot+732528bae351682f1f27@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200329085647.25133-1-hqjagain@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3e7c575aa035d8f95f80bf2b13126a235b0167b
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Mar 9 21:26:17 2020 -0700

    blk-mq: Keep set->nr_hw_queues and set->map[].nr_queues in sync
    
    commit 6e66b49392419f3fe134e1be583323ef75da1e4b upstream.
    
    blk_mq_map_queues() and multiple .map_queues() implementations expect that
    set->map[HCTX_TYPE_DEFAULT].nr_queues is set to the number of hardware
    queues. Hence set .nr_queues before calling these functions. This patch
    fixes the following kernel warning:
    
    WARNING: CPU: 0 PID: 2501 at include/linux/cpumask.h:137
    Call Trace:
     blk_mq_run_hw_queue+0x19d/0x350 block/blk-mq.c:1508
     blk_mq_run_hw_queues+0x112/0x1a0 block/blk-mq.c:1525
     blk_mq_requeue_work+0x502/0x780 block/blk-mq.c:775
     process_one_work+0x9af/0x1740 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x361/0x430 kernel/kthread.c:255
    
    Fixes: ed76e329d74a ("blk-mq: abstract out queue map") # v5.0
    Reported-by: syzbot+d44e1b26ce5c3e77458d@syzkaller.appspotmail.com
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Cc: Johannes Thumshirn <jth@kernel.org>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24c6badaf2fac51cb9b7dcef969f928691f31495
Author: Avihai Horon <avihaih@mellanox.com>
Date:   Wed Mar 18 12:17:41 2020 +0200

    RDMA/cm: Update num_paths in cma_resolve_iboe_route error flow
    
    commit 987914ab841e2ec281a35b54348ab109b4c0bb4e upstream.
    
    After a successful allocation of path_rec, num_paths is set to 1, but any
    error after such allocation will leave num_paths uncleared.
    
    This causes to de-referencing a NULL pointer later on. Hence, num_paths
    needs to be set back to 0 if such an error occurs.
    
    The following crash from syzkaller revealed it.
    
      kasan: CONFIG_KASAN_INLINE enabled
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
      CPU: 0 PID: 357 Comm: syz-executor060 Not tainted 4.18.0+ #311
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
      rel-1.11.0-0-g63451fca13-prebuilt.qemu-project.org 04/01/2014
      RIP: 0010:ib_copy_path_rec_to_user+0x94/0x3e0
      Code: f1 f1 f1 f1 c7 40 0c 00 00 f4 f4 65 48 8b 04 25 28 00 00 00 48 89
      45 c8 31 c0 e8 d7 60 24 ff 48 8d 7b 4c 48 89 f8 48 c1 e8 03 <42> 0f b6
      14 30 48 89 f8 83 e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85
      RSP: 0018:ffff88006586f980 EFLAGS: 00010207
      RAX: 0000000000000009 RBX: 0000000000000000 RCX: 1ffff1000d5fe475
      RDX: ffff8800621e17c0 RSI: ffffffff820d45f9 RDI: 000000000000004c
      RBP: ffff88006586fa50 R08: ffffed000cb0df73 R09: ffffed000cb0df72
      R10: ffff88006586fa70 R11: ffffed000cb0df73 R12: 1ffff1000cb0df30
      R13: ffff88006586fae8 R14: dffffc0000000000 R15: ffff88006aff2200
      FS: 00000000016fc880(0000) GS:ffff88006d000000(0000)
      knlGS:0000000000000000
      CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000020000040 CR3: 0000000063fec000 CR4: 00000000000006b0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
      ? ib_copy_path_rec_from_user+0xcc0/0xcc0
      ? __mutex_unlock_slowpath+0xfc/0x670
      ? wait_for_completion+0x3b0/0x3b0
      ? ucma_query_route+0x818/0xc60
      ucma_query_route+0x818/0xc60
      ? ucma_listen+0x1b0/0x1b0
      ? sched_clock_cpu+0x18/0x1d0
      ? sched_clock_cpu+0x18/0x1d0
      ? ucma_listen+0x1b0/0x1b0
      ? ucma_write+0x292/0x460
      ucma_write+0x292/0x460
      ? ucma_close_id+0x60/0x60
      ? sched_clock_cpu+0x18/0x1d0
      ? sched_clock_cpu+0x18/0x1d0
      __vfs_write+0xf7/0x620
      ? ucma_close_id+0x60/0x60
      ? kernel_read+0x110/0x110
      ? time_hardirqs_on+0x19/0x580
      ? lock_acquire+0x18b/0x3a0
      ? finish_task_switch+0xf3/0x5d0
      ? _raw_spin_unlock_irq+0x29/0x40
      ? _raw_spin_unlock_irq+0x29/0x40
      ? finish_task_switch+0x1be/0x5d0
      ? __switch_to_asm+0x34/0x70
      ? __switch_to_asm+0x40/0x70
      ? security_file_permission+0x172/0x1e0
      vfs_write+0x192/0x460
      ksys_write+0xc6/0x1a0
      ? __ia32_sys_read+0xb0/0xb0
      ? entry_SYSCALL_64_after_hwframe+0x3e/0xbe
      ? do_syscall_64+0x1d/0x470
      do_syscall_64+0x9e/0x470
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 3c86aa70bf67 ("RDMA/cm: Add RDMA CM support for IBoE devices")
    Link: https://lore.kernel.org/r/20200318101741.47211-1-leon@kernel.org
    Signed-off-by: Avihai Horon <avihaih@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdca0b2b73b00f967864f31f6556884d8bc4d5a5
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Sun Mar 8 17:45:27 2020 +0800

    Bluetooth: RFCOMM: fix ODEBUG bug in rfcomm_dev_ioctl
    
    commit 71811cac8532b2387b3414f7cd8fe9e497482864 upstream.
    
    Needn't call 'rfcomm_dlc_put' here, because 'rfcomm_dlc_exists' didn't
    increase dlc->refcnt.
    
    Reported-by: syzbot+4496e82090657320efc6@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Suggested-by: Hillf Danton <hdanton@sina.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88a270ba28a8664dc5f98680ea82ce385329ba49
Author: Bernard Metzler <bmt@zurich.ibm.com>
Date:   Fri Feb 28 18:35:34 2020 +0100

    RDMA/siw: Fix passive connection establishment
    
    commit 33fb27fd54465c74cbffba6315b2f043e90cec4c upstream.
    
    Holding the rtnl_lock while iterating a devices interface address list
    potentially causes deadlocks with the cma_netdev_callback. While this was
    implemented to limit the scope of a wildcard listen to addresses of the
    current device only, a better solution limits the scope of the socket to
    the device. This completely avoiding locking, and also results in
    significant code simplification.
    
    Fixes: c421651fa229 ("RDMA/siw: Add missing rtnl_lock around access to ifa")
    Link: https://lore.kernel.org/r/20200228173534.26815-1-bmt@zurich.ibm.com
    Reported-by: syzbot+55de90ab5f44172b0c90@syzkaller.appspotmail.com
    Suggested-by: Jason Gunthorpe <jgg@ziepe.ca>
    Signed-off-by: Bernard Metzler <bmt@zurich.ibm.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f58649c6517a6b126c058388f6dd0764f782c30d
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Thu Feb 27 16:36:51 2020 -0400

    RDMA/cma: Teach lockdep about the order of rtnl and lock
    
    commit 32ac9e4399b12d3e54d312a0e0e30ed5cd19bd4e upstream.
    
    This lock ordering only happens when bonding is enabled and a certain
    bonding related event fires. However, since it can happen this is a global
    restriction on lock ordering.
    
    Teach lockdep about the order directly and unconditionally so bugs here
    are found quickly.
    
    See https://syzkaller.appspot.com/bug?extid=55de90ab5f44172b0c90
    
    Link: https://lore.kernel.org/r/20200227203651.GA27185@ziepe.ca
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69eb0ff46c4f4ee3c98158580e5b948d36eaf4fa
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Feb 18 15:45:38 2020 -0400

    RDMA/ucma: Put a lock around every call to the rdma_cm layer
    
    commit 7c11910783a1ea17e88777552ef146cace607b3c upstream.
    
    The rdma_cm must be used single threaded.
    
    This appears to be a bug in the design, as it does have lots of locking
    that seems like it should allow concurrency. However, when it is all said
    and done every single place that uses the cma_exch() scheme is broken, and
    all the unlocked reads from the ucma of the cm_id data are wrong too.
    
    syzkaller has been finding endless bugs related to this.
    
    Fixing this in any elegant way is some enormous amount of work. Take a
    very big hammer and put a mutex around everything to do with the
    ucma_context at the top of every syscall.
    
    Fixes: 75216638572f ("RDMA/cma: Export rdma cm interface to userspace")
    Link: https://lore.kernel.org/r/20200218210432.GA31966@ziepe.ca
    Reported-by: syzbot+adb15cf8c2798e4e0db4@syzkaller.appspotmail.com
    Reported-by: syzbot+e5579222b6a3edd96522@syzkaller.appspotmail.com
    Reported-by: syzbot+4b628fcc748474003457@syzkaller.appspotmail.com
    Reported-by: syzbot+29ee8f76017ce6cf03da@syzkaller.appspotmail.com
    Reported-by: syzbot+6956235342b7317ec564@syzkaller.appspotmail.com
    Reported-by: syzbot+b358909d8d01556b790b@syzkaller.appspotmail.com
    Reported-by: syzbot+6b46b135602a3f3ac99e@syzkaller.appspotmail.com
    Reported-by: syzbot+8458d13b13562abf6b77@syzkaller.appspotmail.com
    Reported-by: syzbot+bd034f3fdc0402e942ed@syzkaller.appspotmail.com
    Reported-by: syzbot+c92378b32760a4eef756@syzkaller.appspotmail.com
    Reported-by: syzbot+68b44a1597636e0b342c@syzkaller.appspotmail.com
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dd5b930ff18a10532b16c38b2e18797a28fb549
Author: Hou Tao <houtao1@huawei.com>
Date:   Mon Feb 10 21:26:34 2020 +0800

    ubi: fastmap: Free unused fastmap anchor peb during detach
    
    commit c16f39d14a7e0ec59881fbdb22ae494907534384 upstream.
    
    When CONFIG_MTD_UBI_FASTMAP is enabled, fm_anchor will be assigned
    a free PEB during ubi_wl_init() or ubi_update_fastmap(). However
    if fastmap is not used or disabled on the MTD device, ubi_wl_entry
    related with the PEB will not be freed during detach.
    
    So Fix it by freeing the unused fastmap anchor during detach.
    
    Fixes: f9c34bb52997 ("ubi: Fix producing anchor PEBs")
    Reported-by: syzbot+f317896aae32eb281a58@syzkaller.appspotmail.com
    Reviewed-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95c6f33c4e66b8d5607e562885a28e1b729a5e6b
Author: Alex Vesker <valex@mellanox.com>
Date:   Thu Mar 5 14:38:41 2020 +0200

    IB/mlx5: Replace tunnel mpls capability bits for tunnel_offloads
    
    commit 41e684ef3f37ce6e5eac3fb5b9c7c1853f4b0447 upstream.
    
    Until now the flex parser capability was used in ib_query_device() to
    indicate tunnel_offloads_caps support for mpls_over_gre/mpls_over_udp.
    
    Newer devices and firmware will have configurations with the flexparser
    but without mpls support.
    
    Testing for the flex parser capability was a mistake, the tunnel_stateless
    capability was intended for detecting mpls and was introduced at the same
    time as the flex parser capability.
    
    Otherwise userspace will be incorrectly informed that a future device
    supports MPLS when it does not.
    
    Link: https://lore.kernel.org/r/20200305123841.196086-1-leon@kernel.org
    Cc: <stable@vger.kernel.org> # 4.17
    Fixes: e818e255a58d ("IB/mlx5: Expose MPLS related tunneling offloads")
    Signed-off-by: Alex Vesker <valex@mellanox.com>
    Reviewed-by: Ariel Levkovich <lariel@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 405e7e2e9c637fcb334441256f51befa2c257ff9
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Thu Mar 26 12:38:07 2020 -0400

    IB/hfi1: Fix memory leaks in sysfs registration and unregistration
    
    commit 5c15abc4328ad696fa61e2f3604918ed0c207755 upstream.
    
    When the hfi1 driver is unloaded, kmemleak will report the following
    issue:
    
    unreferenced object 0xffff8888461a4c08 (size 8):
    comm "kworker/0:0", pid 5, jiffies 4298601264 (age 2047.134s)
    hex dump (first 8 bytes):
    73 64 6d 61 30 00 ff ff sdma0...
    backtrace:
    [<00000000311a6ef5>] kvasprintf+0x62/0xd0
    [<00000000ade94d9f>] kobject_set_name_vargs+0x1c/0x90
    [<0000000060657dbb>] kobject_init_and_add+0x5d/0xb0
    [<00000000346fe72b>] 0xffffffffa0c5ecba
    [<000000006cfc5819>] 0xffffffffa0c866b9
    [<0000000031c65580>] 0xffffffffa0c38e87
    [<00000000e9739b3f>] local_pci_probe+0x41/0x80
    [<000000006c69911d>] work_for_cpu_fn+0x16/0x20
    [<00000000601267b5>] process_one_work+0x171/0x380
    [<0000000049a0eefa>] worker_thread+0x1d1/0x3f0
    [<00000000909cf2b9>] kthread+0xf8/0x130
    [<0000000058f5f874>] ret_from_fork+0x35/0x40
    
    This patch fixes the issue by:
    
    - Releasing dd->per_sdma[i].kobject in hfi1_unregister_sysfs().
      - This will fix the memory leak.
    
    - Calling kobject_put() to unwind operations only for those entries in
       dd->per_sdma[] whose operations have succeeded (including the current
       one that has just failed) in hfi1_verbs_register_sysfs().
    
    Cc: <stable@vger.kernel.org>
    Fixes: 0cb2aa690c7e ("IB/hfi1: Add sysfs interface for affinity setup")
    Link: https://lore.kernel.org/r/20200326163807.21129.27371.stgit@awfm-01.aw.intel.com
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 276f205011a4b43c21c87ce1f661bd445e5d44bc
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Thu Mar 26 12:38:14 2020 -0400

    IB/hfi1: Call kobject_put() when kobject_init_and_add() fails
    
    commit dfb5394f804ed4fcea1fc925be275a38d66712ab upstream.
    
    When kobject_init_and_add() returns an error in the function
    hfi1_create_port_files(), the function kobject_put() is not called for the
    corresponding kobject, which potentially leads to memory leak.
    
    This patch fixes the issue by calling kobject_put() even if
    kobject_init_and_add() fails.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200326163813.21129.44280.stgit@awfm-01.aw.intel.com
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22b5f3e20fa6829e6ae2338a50863a69c6e08953
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Fri Mar 6 23:29:27 2020 +0100

    ASoC: jz4740-i2s: Fix divider written at incorrect offset in register
    
    commit 9401d5aa328e64617d87abd59af1c91cace4c3e4 upstream.
    
    The 4-bit divider value was written at offset 8, while the jz4740
    programming manual locates it at offset 0.
    
    Fixes: 26b0aad80a86 ("ASoC: jz4740: Add dynamic sampling rate support to jz4740-i2s")
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200306222931.39664-2-paul@crapouillou.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10f63aee09f8f0e99d5e409f8f178e5a6bb3b2c9
Author: Jonghwan Choi <charlie.jh@kakaocorp.com>
Date:   Thu Mar 19 23:00:44 2020 +0900

    ASoC: tas2562: Fixed incorrect amp_level setting.
    
    commit eedf8a126629bf9db8ad3a2a5dc9dc1798fb2302 upstream.
    
    According to the tas2562 datasheet,the bits[5:1] represents the amp_level value.
    So to set the amp_level value correctly,the shift value should be set to 1.
    
    Signed-off-by: Jonghwan Choi <charlie.jh@kakaocorp.com>
    Acked-by: Dan Murphy <dmurphy@ti.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200319140043.GA6688@jhbirdchoi-MS-7B79
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c0bc69e3a486f41430b717034e74cfd97c49d68
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Apr 3 17:48:34 2020 +0200

    platform/x86: intel_int0002_vgpio: Use acpi_register_wakeup_handler()
    
    commit 767191db8220db29f78c031f4d27375173c336d5 upstream.
    
    The Power Management Events (PMEs) the INT0002 driver listens for get
    signalled by the Power Management Controller (PMC) using the same IRQ
    as used for the ACPI SCI.
    
    Since commit fdde0ff8590b ("ACPI: PM: s2idle: Prevent spurious SCIs from
    waking up the system") the SCI triggering, without there being a wakeup
    cause recognized by the ACPI sleep code, will no longer wakeup the system.
    
    This breaks PMEs / wakeups signalled to the INT0002 driver, the system
    never leaves the s2idle_loop() now.
    
    Use acpi_register_wakeup_handler() to register a function which checks
    the GPE0a_STS register for a PME and trigger a wakeup when a PME has
    been signalled.
    
    Fixes: fdde0ff8590b ("ACPI: PM: s2idle: Prevent spurious SCIs from waking up the system")
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe02c4d27cdbf06e2582b62d3c0708cf3575f923
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Apr 3 17:48:33 2020 +0200

    ACPI: PM: Add acpi_[un]register_wakeup_handler()
    
    commit ddfd9dcf270ce23ed1985b66fcfa163920e2e1b8 upstream.
    
    Since commit fdde0ff8590b ("ACPI: PM: s2idle: Prevent spurious SCIs from
    waking up the system") the SCI triggering without there being a wakeup
    cause recognized by the ACPI sleep code will no longer wakeup the system.
    
    This works as intended, but this is a problem for devices where the SCI
    is shared with another device which is also a wakeup source.
    
    In the past these, from the pov of the ACPI sleep code, spurious SCIs
    would still cause a wakeup so the wakeup from the device sharing the
    interrupt would actually wakeup the system. This now no longer works.
    
    This is a problem on e.g. Bay Trail-T and Cherry Trail devices where
    some peripherals (typically the XHCI controller) can signal a
    Power Management Event (PME) to the Power Management Controller (PMC)
    to wakeup the system, this uses the same interrupt as the SCI.
    These wakeups are handled through a special INT0002 ACPI device which
    checks for events in the GPE0a_STS for this and takes care of acking
    the PME so that the shared interrupt stops triggering.
    
    The change to the ACPI sleep code to ignore the spurious SCI, causes
    the system to no longer wakeup on these PME events. To make things
    worse this means that the INT0002 device driver interrupt handler will
    no longer run, causing the PME to not get cleared and resulting in the
    system hanging. Trying to wakeup the system after such a PME through e.g.
    the power button no longer works.
    
    Add an acpi_register_wakeup_handler() function which registers
    a handler to be called from acpi_s2idle_wake() and when the handler
    returns true, return true from acpi_s2idle_wake().
    
    The INT0002 driver will use this mechanism to check the GPE0a_STS
    register from acpi_s2idle_wake() and to tell the system to wakeup
    if a PME is signaled in the register.
    
    Fixes: fdde0ff8590b ("ACPI: PM: s2idle: Prevent spurious SCIs from waking up the system")
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28852ddcd249adb25aea2932e9dadbbb3e066603
Author: Martin Kaiser <martin@kaiser.cx>
Date:   Thu Mar 5 21:58:20 2020 +0100

    hwrng: imx-rngc - fix an error path
    
    commit 47a1f8e8b3637ff5f7806587883d7d94068d9ee8 upstream.
    
    Make sure that the rngc interrupt is masked if the rngc self test fails.
    Self test failure means that probe fails as well. Interrupts should be
    masked in this case, regardless of the error.
    
    Cc: stable@vger.kernel.org
    Fixes: 1d5449445bd0 ("hwrng: mx-rngc - add a driver for Freescale RNGC")
    Reviewed-by: PrasannaKumar Muralidharan <prasannatsmkumar@gmail.com>
    Signed-off-by: Martin Kaiser <martin@kaiser.cx>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09c032411ec59958f2f02198185c621b456cefad
Author: David Ahern <dsahern@kernel.org>
Date:   Wed Apr 1 21:02:25 2020 -0700

    tools/accounting/getdelays.c: fix netlink attribute length
    
    commit 4054ab64e29bb05b3dfe758fff3c38a74ba753bb upstream.
    
    A recent change to the netlink code: 6e237d099fac ("netlink: Relax attr
    validation for fixed length types") logs a warning when programs send
    messages with invalid attributes (e.g., wrong length for a u32).  Yafang
    reported this error message for tools/accounting/getdelays.c.
    
    send_cmd() is wrongly adding 1 to the attribute length.  As noted in
    include/uapi/linux/netlink.h nla_len should be NLA_HDRLEN + payload
    length, so drop the +1.
    
    Fixes: 9e06d3f9f6b1 ("per task delay accounting taskstats interface: documentation fix")
    Reported-by: Yafang Shao <laoar.shao@gmail.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Yafang Shao <laoar.shao@gmail.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Cc: Shailabh Nagar <nagar@watson.ibm.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200327173111.63922-1-dsahern@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3e3aed98c3af671b4d0675c8a90edbdd091404e
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Apr 1 21:04:23 2020 -0700

    slub: improve bit diffusion for freelist ptr obfuscation
    
    commit 1ad53d9fa3f6168ebcf48a50e08b170432da2257 upstream.
    
    Under CONFIG_SLAB_FREELIST_HARDENED=y, the obfuscation was relatively weak
    in that the ptr and ptr address were usually so close that the first XOR
    would result in an almost entirely 0-byte value[1], leaving most of the
    "secret" number ultimately being stored after the third XOR.  A single
    blind memory content exposure of the freelist was generally sufficient to
    learn the secret.
    
    Add a swab() call to mix bits a little more.  This is a cheap way (1
    cycle) to make attacks need more than a single exposure to learn the
    secret (or to know _where_ the exposure is in memory).
    
    kmalloc-32 freelist walk, before:
    
    ptr              ptr_addr            stored value      secret
    ffff90c22e019020@ffff90c22e019000 is 86528eb656b3b5bd (86528eb656b3b59d)
    ffff90c22e019040@ffff90c22e019020 is 86528eb656b3b5fd (86528eb656b3b59d)
    ffff90c22e019060@ffff90c22e019040 is 86528eb656b3b5bd (86528eb656b3b59d)
    ffff90c22e019080@ffff90c22e019060 is 86528eb656b3b57d (86528eb656b3b59d)
    ffff90c22e0190a0@ffff90c22e019080 is 86528eb656b3b5bd (86528eb656b3b59d)
    ...
    
    after:
    
    ptr              ptr_addr            stored value      secret
    ffff9eed6e019020@ffff9eed6e019000 is 793d1135d52cda42 (86528eb656b3b59d)
    ffff9eed6e019040@ffff9eed6e019020 is 593d1135d52cda22 (86528eb656b3b59d)
    ffff9eed6e019060@ffff9eed6e019040 is 393d1135d52cda02 (86528eb656b3b59d)
    ffff9eed6e019080@ffff9eed6e019060 is 193d1135d52cdae2 (86528eb656b3b59d)
    ffff9eed6e0190a0@ffff9eed6e019080 is f93d1135d52cdac2 (86528eb656b3b59d)
    
    [1] https://blog.infosectcbr.com.au/2020/03/weaknesses-in-linux-kernel-heap.html
    
    Fixes: 2482ddec670f ("mm: add SLUB free list pointer obfuscation")
    Reported-by: Silvio Cesare <silvio.cesare@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/202003051623.AF4F8CB@keescook
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0869936fe0c416d89a245f32745c0cfda0f7cf32
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Mar 5 13:24:01 2020 -0800

    usb: dwc3: gadget: Wrap around when skip TRBs
    
    commit 2dedea035ae82c5af0595637a6eda4655532b21e upstream.
    
    When skipping TRBs, we need to account for wrapping around the ring
    buffer and not modifying some invalid TRBs. Without this fix, dwc3 won't
    be able to check for available TRBs.
    
    Cc: stable <stable@vger.kernel.org>
    Fixes: 7746a8dfb3f9 ("usb: dwc3: gadget: extract dwc3_gadget_ep_skip_trbs()")
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9fdb3dfd495c2fe373be74d30c27af9a724a85c
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Fri Feb 21 21:10:37 2020 +0100

    random: always use batched entropy for get_random_u{32,64}
    
    commit 69efea712f5b0489e67d07565aad5c94e09a3e52 upstream.
    
    It turns out that RDRAND is pretty slow. Comparing these two
    constructions:
    
      for (i = 0; i < CHACHA_BLOCK_SIZE; i += sizeof(ret))
        arch_get_random_long(&ret);
    
    and
    
      long buf[CHACHA_BLOCK_SIZE / sizeof(long)];
      extract_crng((u8 *)buf);
    
    it amortizes out to 352 cycles per long for the top one and 107 cycles
    per long for the bottom one, on Coffee Lake Refresh, Intel Core i9-9880H.
    
    And importantly, the top one has the drawback of not benefiting from the
    real rng, whereas the bottom one has all the nice benefits of using our
    own chacha rng. As get_random_u{32,64} gets used in more places (perhaps
    beyond what it was originally intended for when it was introduced as
    get_random_{int,long} back in the md5 monstrosity era), it seems like it
    might be a good thing to strengthen its posture a tiny bit. Doing this
    should only be stronger and not any weaker because that pool is already
    initialized with a bunch of rdrand data (when available). This way, we
    get the benefits of the hardware rng as well as our own rng.
    
    Another benefit of this is that we no longer hit pitfalls of the recent
    stream of AMD bugs in RDRAND. One often used code pattern for various
    things is:
    
      do {
            val = get_random_u32();
      } while (hash_table_contains_key(val));
    
    That recent AMD bug rendered that pattern useless, whereas we're really
    very certain that chacha20 output will give pretty distributed numbers,
    no matter what.
    
    So, this simplification seems better both from a security perspective
    and from a performance perspective.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200221201037.30231-1-Jason@zx2c4.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7508984a9c45caaa08c31ebd2fc5b120c10210e
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Wed Jan 22 13:38:22 2020 +0100

    s390: prevent leaking kernel address in BEAR
    
    commit 0b38b5e1d0e2f361e418e05c179db05bb688bbd6 upstream.
    
    When userspace executes a syscall or gets interrupted,
    BEAR contains a kernel address when returning to userspace.
    This make it pretty easy to figure out where the kernel is
    mapped even with KASLR enabled. To fix this, add lpswe to
    lowcore and always execute it there, so userspace sees only
    the lowcore address of lpswe. For this we have to extend
    both critical_cleanup and the SWITCH_ASYNC macro to also check
    for lpswe addresses in lowcore.
    
    Fixes: b2d24b97b2a9 ("s390/kernel: add support for kernel address space layout randomization (KASLR)")
    Cc: <stable@vger.kernel.org> # v5.2+
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2ec350b2727da304a5bb801a3ee8840e5a6558b
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Wed Apr 1 11:57:32 2020 +0200

    net: phy: at803x: fix clock sink configuration on ATH8030 and ATH8035
    
    [ Upstream commit b1f4c209d84057b6d40b939b6e4404854271d797 ]
    
    The masks in priv->clk_25m_reg and priv->clk_25m_mask are one-bits-set
    for the values that comprise the fields, not zero-bits-set.
    
    This patch fixes the clock frequency configuration for ATH8030 and
    ATH8035 Atheros PHYs by removing the erroneous "~".
    
    To reproduce this bug, configure the PHY  with the device tree binding
    "qca,clk-out-frequency" and remove the machine specific PHY fixups.
    
    Fixes: 2f664823a47021 ("net: phy: at803x: add device tree binding")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reported-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Russell King <rmk+kernel@armlinux.org.uk>
    Tested-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c963138042200a95a7ff5ce8b7a21b6c76e3c6e1
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Apr 1 01:17:01 2020 +0530

    cxgb4: free MQPRIO resources in shutdown path
    
    [ Upstream commit cef8dac96bc108633f5090bb3a9988d734dc1ee0 ]
    
    Perform missing MQPRIO resource cleanup in PCI shutdown path. Also,
    fix MQPRIO MSIX bitmap leak in resource cleanup.
    
    Fixes: b1396c2bd675 ("cxgb4: parse and configure TC-MQPRIO offload")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c14c25c1a80501a8f05dafb1055276acda329266
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Apr 4 23:48:45 2020 +0200

    r8169: change back SG and TSO to be disabled by default
    
    [ Upstream commit 95099c569a9fdbe186a27447dfa8a5a0562d4b7f ]
    
    There has been a number of reports that using SG/TSO on different chip
    versions results in tx timeouts. However for a lot of people SG/TSO
    works fine. Therefore disable both features by default, but allow users
    to enable them. Use at own risk!
    
    Fixes: 93681cd7d94f ("r8169: enable HW csum and TSO")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c0aea8b6e3d50e68a200a657f58e135420f2177
Author: Petr Machata <petrm@mellanox.com>
Date:   Sun Apr 5 09:50:22 2020 +0300

    mlxsw: spectrum_flower: Do not stop at FLOW_ACTION_VLAN_MANGLE
    
    [ Upstream commit ccfc569347f870830e7c7cf854679a06cf9c45b5 ]
    
    The handler for FLOW_ACTION_VLAN_MANGLE ends by returning whatever the
    lower-level function that it calls returns. If there are more actions lined
    up after this action, those are never offloaded. Fix by only bailing out
    when the called function returns an error.
    
    Fixes: a150201a70da ("mlxsw: spectrum: Add support for vlan modify TC action")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97a240aeab498d0693bfad028d1de496bdc498f0
Author: Will Deacon <will@kernel.org>
Date:   Fri Apr 3 16:13:21 2020 +0100

    tun: Don't put_page() for all negative return values from XDP program
    
    [ Upstream commit bee348907d19d654e8524d3a946dcd25b693aa7e ]
    
    When an XDP program is installed, tun_build_skb() grabs a reference to
    the current page fragment page if the program returns XDP_REDIRECT or
    XDP_TX. However, since tun_xdp_act() passes through negative return
    values from the XDP program, it is possible to trigger the error path by
    mistake and accidentally drop a reference to the fragments page without
    taking one, leading to a spurious free. This is believed to be the cause
    of some KASAN use-after-free reports from syzbot [1], although without a
    reproducer it is not possible to confirm whether this patch fixes the
    problem.
    
    Ensure that we only drop a reference to the fragments page if the XDP
    transmit or redirect operations actually fail.
    
    [1] https://syzkaller.appspot.com/bug?id=e76a6af1be4acd727ff6bbca669833f98cbf5d95
    
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    CC: Eric Dumazet <edumazet@google.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Fixes: 8ae1aff0b331 ("tuntap: split out XDP logic")
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25af2eccd139a2823ca14036282592d329be7b6e
Author: Richard Palethorpe <rpalethorpe@suse.com>
Date:   Wed Apr 1 12:06:39 2020 +0200

    slcan: Don't transmit uninitialized stack data in padding
    
    [ Upstream commit b9258a2cece4ec1f020715fe3554bc2e360f6264 ]
    
    struct can_frame contains some padding which is not explicitly zeroed in
    slc_bump. This uninitialized data will then be transmitted if the stack
    initialization hardening feature is not enabled (CONFIG_INIT_STACK_ALL).
    
    This commit just zeroes the whole struct including the padding.
    
    Signed-off-by: Richard Palethorpe <rpalethorpe@suse.com>
    Fixes: a1044e36e457 ("can: add slcan driver for serial/USB-serial CAN adapters")
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: linux-can@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Cc: security@kernel.org
    Cc: wg@grandegger.com
    Cc: mkl@pengutronix.de
    Cc: davem@davemloft.net
    Acked-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1362c5ec3bc1d76302bb869111a8964c9f36cb0e
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Fri Apr 3 10:23:29 2020 +0800

    net: stmmac: dwmac1000: fix out-of-bounds mac address reg setting
    
    [ Upstream commit 3e1221acf6a8f8595b5ce354bab4327a69d54d18 ]
    
    Commit 9463c4455900 ("net: stmmac: dwmac1000: Clear unused address
    entries") cleared the unused mac address entries, but introduced an
    out-of bounds mac address register programming bug -- After setting
    the secondary unicast mac addresses, the "reg" value has reached
    netdev_uc_count() + 1, thus we should only clear address entries
    if (addr < perfect_addr_number)
    
    Fixes: 9463c4455900 ("net: stmmac: dwmac1000: Clear unused address entries")
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75b85977897ce08d8b64a4e903883105408c9ae1
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Apr 2 20:58:51 2020 -0700

    net_sched: fix a missing refcnt in tcindex_init()
    
    [ Upstream commit a8eab6d35e22f4f21471f16147be79529cd6aaf7 ]
    
    The initial refcnt of struct tcindex_data should be 1,
    it is clear that I forgot to set it to 1 in tcindex_init().
    This leads to a dec-after-zero warning.
    
    Reported-by: syzbot+8325e509a1bf83ec741d@syzkaller.appspotmail.com
    Fixes: 304e024216a8 ("net_sched: add a temporary refcnt for struct tcindex_data")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a11c1b00e9deadf3c4379c442b12238b7eb9380
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Mar 28 12:12:59 2020 -0700

    net_sched: add a temporary refcnt for struct tcindex_data
    
    [ Upstream commit 304e024216a802a7dc8ba75d36de82fa136bbf3e ]
    
    Although we intentionally use an ordered workqueue for all tc
    filter works, the ordering is not guaranteed by RCU work,
    given that tcf_queue_work() is esstenially a call_rcu().
    
    This problem is demostrated by Thomas:
    
      CPU 0:
        tcf_queue_work()
          tcf_queue_work(&r->rwork, tcindex_destroy_rexts_work);
    
      -> Migration to CPU 1
    
      CPU 1:
         tcf_queue_work(&p->rwork, tcindex_destroy_work);
    
    so the 2nd work could be queued before the 1st one, which leads
    to a free-after-free.
    
    Enforcing this order in RCU work is hard as it requires to change
    RCU code too. Fortunately we can workaround this problem in tcindex
    filter by taking a temporary refcnt, we only refcnt it right before
    we begin to destroy it. This simplifies the code a lot as a full
    refcnt requires much more changes in tcindex_set_parms().
    
    Reported-by: syzbot+46f513c3033d592409d2@syzkaller.appspotmail.com
    Fixes: 3d210534cc93 ("net_sched: fix a race condition in tcindex_destroy()")
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Paul E. McKenney <paulmck@kernel.org>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b464deddc3f96dc7f0724ae4bcefdf1fb82eb7ae
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Fri Apr 3 09:53:25 2020 +0200

    net: phy: micrel: kszphy_resume(): add delay after genphy_resume() before accessing PHY registers
    
    [ Upstream commit 6110dff776f7fa65c35850ef65b41d3b39e2fac2 ]
    
    After the power-down bit is cleared, the chip internally triggers a
    global reset. According to the KSZ9031 documentation, we have to wait at
    least 1ms for the reset to finish.
    
    If the chip is accessed during reset, read will return 0xffff, while
    write will be ignored. Depending on the system performance and MDIO bus
    speed, we may or may not run in to this issue.
    
    This bug was discovered on an iMX6QP system with KSZ9031 PHY and
    attached PHY interrupt line. If IRQ was used, the link status update was
    lost. In polling mode, the link status update was always correct.
    
    The investigation showed, that during a read-modify-write access, the
    read returned 0xffff (while the chip was still in reset) and
    corresponding write hit the chip _after_ reset and triggered (due to the
    0xffff) another reset in an undocumented bit (register 0x1f, bit 1),
    resulting in the next write being lost due to the new reset cycle.
    
    This patch fixes the issue by adding a 1...2 ms sleep after the
    genphy_resume().
    
    Fixes: 836384d2501d ("net: phy: micrel: Add specific suspend")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65fca16cbf0257d9e3609aca30956000605992e1
Author: Chuanhong Guo <gch981213@gmail.com>
Date:   Fri Apr 3 19:28:24 2020 +0800

    net: dsa: mt7530: fix null pointer dereferencing in port5 setup
    
    [ Upstream commit 0452800f6db4ed0a42ffb15867c0acfd68829f6a ]
    
    The 2nd gmac of mediatek soc ethernet may not be connected to a PHY
    and a phy-handle isn't always available.
    Unfortunately, mt7530 dsa driver assumes that the 2nd gmac is always
    connected to switch port 5 and setup mt7530 according to phy address
    of 2nd gmac node, causing null pointer dereferencing when phy-handle
    isn't defined in dts.
    This commit fix this setup code by checking return value of
    of_parse_phandle before using it.
    
    Fixes: 38f790a80560 ("net: dsa: mt7530: Add support for port 5")
    Signed-off-by: Chuanhong Guo <gch981213@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: René van Dorst <opensource@vdorst.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2a784e058ffd911747805faa84ae639110789fb
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sun Apr 5 13:00:30 2020 -0700

    net: dsa: bcm_sf2: Ensure correct sub-node is parsed
    
    [ Upstream commit afa3b592953bfaecfb4f2f335ec5f935cff56804 ]
    
    When the bcm_sf2 was converted into a proper platform device driver and
    used the new dsa_register_switch() interface, we would still be parsing
    the legacy DSA node that contained all the port information since the
    platform firmware has intentionally maintained backward and forward
    compatibility to client programs. Ensure that we do parse the correct
    node, which is "ports" per the revised DSA binding.
    
    Fixes: d9338023fb8e ("net: dsa: bcm_sf2: Make it a real platform device driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9150efb181170a47951585f3ff61ccda114179d9
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sat Apr 4 14:35:17 2020 -0700

    net: dsa: bcm_sf2: Do not register slave MDIO bus with OF
    
    [ Upstream commit 536fab5bf5826404534a6c271f622ad2930d9119 ]
    
    We were registering our slave MDIO bus with OF and doing so with
    assigning the newly created slave_mii_bus of_node to the master MDIO bus
    controller node. This is a bad thing to do for a number of reasons:
    
    - we are completely lying about the slave MII bus is arranged and yet we
      still want to control which MDIO devices it probes. It was attempted
      before to play tricks with the bus_mask to perform that:
      https://www.spinics.net/lists/netdev/msg429420.html but the approach
      was rightfully rejected
    
    - the device_node reference counting is messed up and we are effectively
      doing a double probe on the devices we already probed using the
      master, this messes up all resources reference counts (such as clocks)
    
    The proper fix for this as indicated by David in his reply to the
    thread above is to use a platform data style registration so as to
    control exactly which devices we probe:
    https://www.spinics.net/lists/netdev/msg430083.html
    
    By using mdiobus_register(), our slave_mii_bus->phy_mask value is used
    as intended, and all the PHY addresses that must be redirected towards
    our slave MDIO bus is happening while other addresses get redirected
    towards the master MDIO bus.
    
    Fixes: 461cd1b03e32 ("net: dsa: bcm_sf2: Register our slave MDIO bus")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1c9061bffbeeb1046e0661575d1b8a2a38bbee2
Author: Jarod Wilson <jarod@redhat.com>
Date:   Mon Mar 30 11:22:19 2020 -0400

    ipv6: don't auto-add link-local address to lag ports
    
    [ Upstream commit 744fdc8233f6aa9582ce08a51ca06e59796a3196 ]
    
    Bonding slave and team port devices should not have link-local addresses
    automatically added to them, as it can interfere with openvswitch being
    able to properly add tc ingress.
    
    Basic reproducer, courtesy of Marcelo:
    
    $ ip link add name bond0 type bond
    $ ip link set dev ens2f0np0 master bond0
    $ ip link set dev ens2f1np2 master bond0
    $ ip link set dev bond0 up
    $ ip a s
    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
    group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
           valid_lft forever preferred_lft forever
        inet6 ::1/128 scope host
           valid_lft forever preferred_lft forever
    2: ens2f0np0: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc
    mq master bond0 state UP group default qlen 1000
        link/ether 00:0f:53:2f:ea:40 brd ff:ff:ff:ff:ff:ff
    5: ens2f1np2: <NO-CARRIER,BROADCAST,MULTICAST,SLAVE,UP> mtu 1500 qdisc
    mq master bond0 state DOWN group default qlen 1000
        link/ether 00:0f:53:2f:ea:40 brd ff:ff:ff:ff:ff:ff
    11: bond0: <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP> mtu 1500 qdisc
    noqueue state UP group default qlen 1000
        link/ether 00:0f:53:2f:ea:40 brd ff:ff:ff:ff:ff:ff
        inet6 fe80::20f:53ff:fe2f:ea40/64 scope link
           valid_lft forever preferred_lft forever
    
    (above trimmed to relevant entries, obviously)
    
    $ sysctl net.ipv6.conf.ens2f0np0.addr_gen_mode=0
    net.ipv6.conf.ens2f0np0.addr_gen_mode = 0
    $ sysctl net.ipv6.conf.ens2f1np2.addr_gen_mode=0
    net.ipv6.conf.ens2f1np2.addr_gen_mode = 0
    
    $ ip a l ens2f0np0
    2: ens2f0np0: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc
    mq master bond0 state UP group default qlen 1000
        link/ether 00:0f:53:2f:ea:40 brd ff:ff:ff:ff:ff:ff
        inet6 fe80::20f:53ff:fe2f:ea40/64 scope link tentative
           valid_lft forever preferred_lft forever
    $ ip a l ens2f1np2
    5: ens2f1np2: <NO-CARRIER,BROADCAST,MULTICAST,SLAVE,UP> mtu 1500 qdisc
    mq master bond0 state DOWN group default qlen 1000
        link/ether 00:0f:53:2f:ea:40 brd ff:ff:ff:ff:ff:ff
        inet6 fe80::20f:53ff:fe2f:ea40/64 scope link tentative
           valid_lft forever preferred_lft forever
    
    Looks like addrconf_sysctl_addr_gen_mode() bypasses the original "is
    this a slave interface?" check added by commit c2edacf80e15, and
    results in an address getting added, while w/the proposed patch added,
    no address gets added. This simply adds the same gating check to another
    code path, and thus should prevent the same devices from erroneously
    obtaining an ipv6 link-local address.
    
    Fixes: d35a00b8e33d ("net/ipv6: allow sysctl to change link-local address generation mode")
    Reported-by: Moshe Levi <moshele@mellanox.com>
    CC: Stephen Hemminger <stephen@networkplumber.org>
    CC: Marcelo Ricardo Leitner <mleitner@redhat.com>
    CC: netdev@vger.kernel.org
    Signed-off-by: Jarod Wilson <jarod@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d3e9413792e157539199429ab50f934500785a8
Author: Herat Ramani <herat@chelsio.com>
Date:   Wed Apr 1 01:16:09 2020 +0530

    cxgb4: fix MPS index overwrite when setting MAC address
    
    [ Upstream commit 41aa8561ca3fc5748391f08cc5f3e561923da52c ]
    
    cxgb4_update_mac_filt() earlier requests firmware to add a new MAC
    address into MPS TCAM. The MPS TCAM index returned by firmware is
    stored in pi->xact_addr_filt. However, the saved MPS TCAM index gets
    overwritten again with the return value of cxgb4_update_mac_filt(),
    which is wrong.
    
    When trying to update to another MAC address later, the wrong MPS TCAM
    index is sent to firmware, which causes firmware to return error,
    because it's not the same MPS TCAM index that firmware had sent
    earlier to driver.
    
    So, fix by removing the wrong overwrite being done after call to
    cxgb4_update_mac_filt().
    
    Fixes: 3f8cfd0d95e6 ("cxgb4/cxgb4vf: Program hash region for {t4/t4vf}_change_mac()")
    Signed-off-by: Herat Ramani <herat@chelsio.com>
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
