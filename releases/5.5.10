commit 7ee76f1601f39ab3941c8b1c9a19dfc58f7cea47
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 18 07:19:20 2020 +0100

    Linux 5.5.10

commit 40d816c70e095e684f69978f3a51c94156f84eb5
Author: Karsten Graul <kgraul@linux.ibm.com>
Date:   Wed Feb 26 17:52:46 2020 +0100

    net/smc: check for valid ib_client_data
    
    commit a2f2ef4a54c0d97aa6a8386f4ff23f36ebb488cf upstream.
    
    In smc_ib_remove_dev() check if the provided ib device was actually
    initialized for SMC before.
    
    Reported-by: syzbot+84484ccebdd4e5451d91@syzkaller.appspotmail.com
    Fixes: a4cf0443c414 ("smc: introduce SMC as an IB-client")
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b871cdcbb11ed43c8268f89584e670b4cda7e12
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Feb 25 11:52:29 2020 -0800

    ipv6: restrict IPV6_ADDRFORM operation
    
    commit b6f6118901d1e867ac9177bbff3b00b185bd4fdc upstream.
    
    IPV6_ADDRFORM is able to transform IPv6 socket to IPv4 one.
    While this operation sounds illogical, we have to support it.
    
    One of the things it does for TCP socket is to switch sk->sk_prot
    to tcp_prot.
    
    We now have other layers playing with sk->sk_prot, so we should make
    sure to not interfere with them.
    
    This patch makes sure sk_prot is the default pointer for TCP IPv6 socket.
    
    syzbot reported :
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    PGD a0113067 P4D a0113067 PUD a8771067 PMD 0
    Oops: 0010 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 10686 Comm: syz-executor.0 Not tainted 5.6.0-rc2-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:0x0
    Code: Bad RIP value.
    RSP: 0018:ffffc9000281fce0 EFLAGS: 00010246
    RAX: 1ffffffff15f48ac RBX: ffffffff8afa4560 RCX: dffffc0000000000
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff8880a69a8f40
    RBP: ffffc9000281fd10 R08: ffffffff86ed9b0c R09: ffffed1014d351f5
    R10: ffffed1014d351f5 R11: 0000000000000000 R12: ffff8880920d3098
    R13: 1ffff1101241a613 R14: ffff8880a69a8f40 R15: 0000000000000000
    FS:  00007f2ae75db700(0000) GS:ffff8880aea00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffffffffffffd6 CR3: 00000000a3b85000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     inet_release+0x165/0x1c0 net/ipv4/af_inet.c:427
     __sock_release net/socket.c:605 [inline]
     sock_close+0xe1/0x260 net/socket.c:1283
     __fput+0x2e4/0x740 fs/file_table.c:280
     ____fput+0x15/0x20 fs/file_table.c:313
     task_work_run+0x176/0x1b0 kernel/task_work.c:113
     tracehook_notify_resume include/linux/tracehook.h:188 [inline]
     exit_to_usermode_loop arch/x86/entry/common.c:164 [inline]
     prepare_exit_to_usermode+0x480/0x5b0 arch/x86/entry/common.c:195
     syscall_return_slowpath+0x113/0x4a0 arch/x86/entry/common.c:278
     do_syscall_64+0x11f/0x1c0 arch/x86/entry/common.c:304
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x45c429
    Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2ae75dac78 EFLAGS: 00000246 ORIG_RAX: 0000000000000036
    RAX: 0000000000000000 RBX: 00007f2ae75db6d4 RCX: 000000000045c429
    RDX: 0000000000000001 RSI: 000000000000011a RDI: 0000000000000004
    RBP: 000000000076bf20 R08: 0000000000000038 R09: 0000000000000000
    R10: 0000000020000180 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 0000000000000a9d R14: 00000000004ccfb4 R15: 000000000076bf2c
    Modules linked in:
    CR2: 0000000000000000
    ---[ end trace 82567b5207e87bae ]---
    RIP: 0010:0x0
    Code: Bad RIP value.
    RSP: 0018:ffffc9000281fce0 EFLAGS: 00010246
    RAX: 1ffffffff15f48ac RBX: ffffffff8afa4560 RCX: dffffc0000000000
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff8880a69a8f40
    RBP: ffffc9000281fd10 R08: ffffffff86ed9b0c R09: ffffed1014d351f5
    R10: ffffed1014d351f5 R11: 0000000000000000 R12: ffff8880920d3098
    R13: 1ffff1101241a613 R14: ffff8880a69a8f40 R15: 0000000000000000
    FS:  00007f2ae75db700(0000) GS:ffff8880aea00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffffffffffffd6 CR3: 00000000a3b85000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Fixes: 604326b41a6f ("bpf, sockmap: convert to generic sk_msg interface")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+1938db17e275e85dc328@syzkaller.appspotmail.com
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 886b6020f3dd9e962b2b583b3a2edb8154f2c48e
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Thu Mar 12 05:18:39 2020 -0500

    iommu/amd: Fix IOMMU AVIC not properly update the is_run bit in IRTE
    
    commit 730ad0ede130015a773229573559e97ba0943065 upstream.
    
    Commit b9c6ff94e43a ("iommu/amd: Re-factor guest virtual APIC
    (de-)activation code") accidentally left out the ir_data pointer when
    calling modity_irte_ga(), which causes the function amd_iommu_update_ga()
    to return prematurely due to struct amd_ir_data.ref is NULL and
    the "is_run" bit of IRTE does not get updated properly.
    
    This results in bad I/O performance since IOMMU AVIC always generate GA Log
    entry and notify IOMMU driver and KVM when it receives interrupt from the
    PCI pass-through device instead of directly inject interrupt to the vCPU.
    
    Fixes by passing ir_data when calling modify_irte_ga() as done previously.
    
    Fixes: b9c6ff94e43a ("iommu/amd: Re-factor guest virtual APIC (de-)activation code")
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9a2aa82976559a7f8a469d9c8577aa91145a807
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Thu Mar 12 14:32:44 2020 +0100

    i2c: acpi: put device when verifying client fails
    
    commit 8daee952b4389729358665fb91949460641659d4 upstream.
    
    i2c_verify_client() can fail, so we need to put the device when that
    happens.
    
    Fixes: 525e6fabeae2 ("i2c / ACPI: add support for ACPI reconfigure notifications")
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6992aa0a741dde0e3d2225c7164db455692e8c64
Author: Daniel Drake <drake@endlessm.com>
Date:   Thu Mar 12 14:09:55 2020 +0800

    iommu/vt-d: Ignore devices with out-of-spec domain number
    
    commit da72a379b2ec0bad3eb265787f7008bead0b040c upstream.
    
    VMD subdevices are created with a PCI domain ID of 0x10000 or
    higher.
    
    These subdevices are also handled like all other PCI devices by
    dmar_pci_bus_notifier().
    
    However, when dmar_alloc_pci_notify_info() take records of such devices,
    it will truncate the domain ID to a u16 value (in info->seg).
    The device at (e.g.) 10000:00:02.0 is then treated by the DMAR code as if
    it is 0000:00:02.0.
    
    In the unlucky event that a real device also exists at 0000:00:02.0 and
    also has a device-specific entry in the DMAR table,
    dmar_insert_dev_scope() will crash on:
     Â  BUG_ON(i >= devices_cnt);
    
    That's basically a sanity check that only one PCI device matches a
    single DMAR entry; in this case we seem to have two matching devices.
    
    Fix this by ignoring devices that have a domain number higher than
    what can be looked up in the DMAR table.
    
    This problem was carefully diagnosed by Jian-Hong Pan.
    
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Fixes: 59ce0515cdaf3 ("iommu/vt-d: Update DRHD/RMRR/ATSR device scope caches when PCI hotplug happens")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8de7510abd2a55252d9a13ba690b33a7d45d390
Author: Zhenzhong Duan <zhenzhong.duan@gmail.com>
Date:   Thu Mar 12 14:09:54 2020 +0800

    iommu/vt-d: Fix the wrong printing in RHSA parsing
    
    commit b0bb0c22c4db623f2e7b1a471596fbf1c22c6dc5 upstream.
    
    When base address in RHSA structure doesn't match base address in
    each DRHD structure, the base address in last DRHD is printed out.
    
    This doesn't make sense when there are multiple DRHD units, fix it
    by printing the buggy RHSA's base address.
    
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@gmail.com>
    Fixes: fd0c8894893cb ("intel-iommu: Set a more specific taint flag for invalid BIOS DMAR tables")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19acceae7a2f9a6d080cf0aa0d708c7f52e72d23
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Mar 6 17:37:28 2020 +0100

    netfilter: nft_chain_nat: inet family is missing module ownership
    
    commit 6a42cefb25d8bdc1b391f4a53c78c32164eea2dd upstream.
    
    Set owner to THIS_MODULE, otherwise the nft_chain_nat module might be
    removed while there are still inet/nat chains in place.
    
    [  117.942096] BUG: unable to handle page fault for address: ffffffffa0d5e040
    [  117.942101] #PF: supervisor read access in kernel mode
    [  117.942103] #PF: error_code(0x0000) - not-present page
    [  117.942106] PGD 200c067 P4D 200c067 PUD 200d063 PMD 3dc909067 PTE 0
    [  117.942113] Oops: 0000 [#1] PREEMPT SMP PTI
    [  117.942118] CPU: 3 PID: 27 Comm: kworker/3:0 Not tainted 5.6.0-rc3+ #348
    [  117.942133] Workqueue: events nf_tables_trans_destroy_work [nf_tables]
    [  117.942145] RIP: 0010:nf_tables_chain_destroy.isra.0+0x94/0x15a [nf_tables]
    [  117.942149] Code: f6 45 54 01 0f 84 d1 00 00 00 80 3b 05 74 44 48 8b 75 e8 48 c7 c7 72 be de a0 e8 56 e6 2d e0 48 8b 45 e8 48 c7 c7 7f be de a0 <48> 8b 30 e8 43 e6 2d e0 48 8b 45 e8 48 8b 40 10 48 85 c0 74 5b 8b
    [  117.942152] RSP: 0018:ffffc9000015be10 EFLAGS: 00010292
    [  117.942155] RAX: ffffffffa0d5e040 RBX: ffff88840be87fc2 RCX: 0000000000000007
    [  117.942158] RDX: 0000000000000007 RSI: 0000000000000086 RDI: ffffffffa0debe7f
    [  117.942160] RBP: ffff888403b54b50 R08: 0000000000001482 R09: 0000000000000004
    [  117.942162] R10: 0000000000000000 R11: 0000000000000001 R12: ffff8883eda7e540
    [  117.942164] R13: dead000000000122 R14: dead000000000100 R15: ffff888403b3db80
    [  117.942167] FS:  0000000000000000(0000) GS:ffff88840e4c0000(0000) knlGS:0000000000000000
    [  117.942169] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  117.942172] CR2: ffffffffa0d5e040 CR3: 00000003e4c52002 CR4: 00000000001606e0
    [  117.942174] Call Trace:
    [  117.942188]  nf_tables_trans_destroy_work.cold+0xd/0x12 [nf_tables]
    [  117.942196]  process_one_work+0x1d6/0x3b0
    [  117.942200]  worker_thread+0x45/0x3c0
    [  117.942203]  ? process_one_work+0x3b0/0x3b0
    [  117.942210]  kthread+0x112/0x130
    [  117.942214]  ? kthread_create_worker_on_cpu+0x40/0x40
    [  117.942221]  ret_from_fork+0x35/0x40
    
    nf_tables_chain_destroy() crashes on module_put() because the module is
    gone.
    
    Fixes: d164385ec572 ("netfilter: nat: add inet family nat support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb99a32fb8ddbcc5507639c301f248045def0b40
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Mar 3 15:02:45 2020 +0100

    netfilter: nf_tables: dump NFTA_CHAIN_FLAGS attribute
    
    commit d78008de6103c708171baff9650a7862645d23b0 upstream.
    
    Missing NFTA_CHAIN_FLAGS netlink attribute when dumping basechain
    definitions.
    
    Fixes: c9626a2cbdb2 ("netfilter: nf_tables: add hardware offload support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit faad112a61bf6ffc717f514ee4059947a16abd17
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:08:33 2020 -0800

    netfilter: nft_tunnel: add missing attribute validation for tunnels
    
    commit 88a637719a1570705c02cacb3297af164b1714e7 upstream.
    
    Add missing attribute validation for tunnel source and
    destination ports to the netlink policy.
    
    Fixes: af308b94a2a4 ("netfilter: nf_tables: add tunnel support")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f25d22be9f52d86a4519e9fc048cf5fdbab112d
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:08:32 2020 -0800

    netfilter: nft_payload: add missing attribute validation for payload csum flags
    
    commit 9d6effb2f1523eb84516e44213c00f2fd9e6afff upstream.
    
    Add missing attribute validation for NFTA_PAYLOAD_CSUM_FLAGS
    to the netlink policy.
    
    Fixes: 1814096980bb ("netfilter: nft_payload: layer 4 checksum adjustment for pseudoheader fields")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac88f8253faa555a698b5e0c8f82173f0a7ffa8c
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:08:31 2020 -0800

    netfilter: cthelper: add missing attribute validation for cthelper
    
    commit c049b3450072b8e3998053490e025839fecfef31 upstream.
    
    Add missing attribute validation for cthelper
    to the netlink policy.
    
    Fixes: 12f7a505331e ("netfilter: add user-space connection tracking helper infrastructure")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9c6bcec7e332bdd578dd9561a1b0cab6c01588c
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Mar 2 21:58:50 2020 +0100

    netfilter: nf_tables: free flowtable hooks on hook register error
    
    commit 2d285f26ecd072800a29c5b71e63437f21ef830a upstream.
    
    If hook registration fails, the hooks allocated via nft_netdev_hook_alloc
    need to be freed.
    
    We can't change the goto label to 'goto 5' -- while it does fix the memleak
    it does cause a warning splat from the netfilter core (the hooks were not
    registered).
    
    Fixes: 3f0465a9ef02 ("netfilter: nf_tables: dynamically allocate hooks per net_device in flowtables")
    Reported-by: syzbot+a2ff6fa45162a5ed4dd3@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cbb27243668e2b28f2b67bd86a348e1ad383db2
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Thu Mar 5 10:37:13 2020 +0200

    perf bench futex-wake: Restore thread count default to online CPU count
    
    commit f649bd9dd5d5004543bbc3c50b829577b49f5d75 upstream.
    
    Since commit 3b2323c2c1c4 ("perf bench futex: Use cpumaps") the default
    number of threads the benchmark uses got changed from number of online
    CPUs to zero:
    
      $ perf bench futex wake
      # Running 'futex/wake' benchmark:
      Run summary [PID 15930]: blocking on 0 threads (at [private] futex 0x558b8ee4bfac), waking up 1 at a time.
      [Run 1]: Wokeup 0 of 0 threads in 0.0000 ms
      [...]
      [Run 10]: Wokeup 0 of 0 threads in 0.0000 ms
      Wokeup 0 of 0 threads in 0.0004 ms (+-40.82%)
    
    Restore the old behavior by grabbing the number of online CPUs via
    cpu->nr:
    
      $ perf bench futex wake
      # Running 'futex/wake' benchmark:
      Run summary [PID 18356]: blocking on 8 threads (at [private] futex 0xb3e62c), waking up 1 at a time.
      [Run 1]: Wokeup 8 of 8 threads in 0.0260 ms
      [...]
      [Run 10]: Wokeup 8 of 8 threads in 0.0270 ms
      Wokeup 8 of 8 threads in 0.0419 ms (+-24.35%)
    
    Fixes: 3b2323c2c1c4 ("perf bench futex: Use cpumaps")
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Darren Hart <dvhart@infradead.org>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lore.kernel.org/lkml/20200305083714.9381-3-tommi.t.rantala@nokia.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8369caa1ddcbfb464aa10cdb904d58f56524e28a
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:10:58 2020 -0800

    nl80211: add missing attribute validation for channel switch
    
    commit 5cde05c61cbe13cbb3fa66d52b9ae84f7975e5e6 upstream.
    
    Add missing attribute validation for NL80211_ATTR_OPER_CLASS
    to the netlink policy.
    
    Fixes: 1057d35ede5d ("cfg80211: introduce TDLS channel switch commands")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20200303051058.4089398-4-kuba@kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80530e4cfb55a0c3f6ce205249ddb55b0eb65db3
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:10:57 2020 -0800

    nl80211: add missing attribute validation for beacon report scanning
    
    commit 056e9375e1f3c4bf2fd49b70258c7daf788ecd9d upstream.
    
    Add missing attribute validation for beacon report scanning
    to the netlink policy.
    
    Fixes: 1d76250bd34a ("nl80211: support beacon report scanning")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20200303051058.4089398-3-kuba@kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c0907acd1f0b145bf2c925d8a2e484a48a3cb78
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:10:56 2020 -0800

    nl80211: add missing attribute validation for critical protocol indication
    
    commit 0e1a1d853ecedc99da9d27f9f5c376935547a0e2 upstream.
    
    Add missing attribute validation for critical protocol fields
    to the netlink policy.
    
    Fixes: 5de17984898c ("cfg80211: introduce critical protocol indication from user-space")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Link: https://lore.kernel.org/r/20200303051058.4089398-2-kuba@kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f7ad7d568f79dc17e243d2e3b115fdbb74005c7
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Tue Mar 10 10:16:18 2020 +1300

    i2c: gpio: suppress error on probe defer
    
    commit 3747cd2efe7ecb9604972285ab3f60c96cb753a8 upstream.
    
    If a GPIO we are trying to use is not available and we are deferring
    the probe, don't output an error message.
    This seems to have been the intent of commit 05c74778858d
    ("i2c: gpio: Add support for named gpios in DT") but the error was
    still output due to not checking the updated 'retdesc'.
    
    Fixes: 05c74778858d ("i2c: gpio: Add support for named gpios in DT")
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34e8d20c334890a848d5035b9b140f666b6eeaa5
Author: Qian Cai <cai@lca.pw>
Date:   Thu Mar 5 15:00:46 2020 -0500

    iommu/vt-d: Fix RCU-list bugs in intel_iommu_init()
    
    commit 2d48ea0efb8887ebba3e3720bb5b738aced4e574 upstream.
    
    There are several places traverse RCU-list without holding any lock in
    intel_iommu_init(). Fix them by acquiring dmar_global_lock.
    
     WARNING: suspicious RCU usage
     -----------------------------
     drivers/iommu/intel-iommu.c:5216 RCU-list traversed in non-reader section!!
    
     other info that might help us debug this:
    
     rcu_scheduler_active = 2, debug_locks = 1
     no locks held by swapper/0/1.
    
     Call Trace:
      dump_stack+0xa0/0xea
      lockdep_rcu_suspicious+0x102/0x10b
      intel_iommu_init+0x947/0xb13
      pci_iommu_init+0x26/0x62
      do_one_initcall+0xfe/0x500
      kernel_init_freeable+0x45a/0x4f8
      kernel_init+0x11/0x139
      ret_from_fork+0x3a/0x50
     DMAR: Intel(R) Virtualization Technology for Directed I/O
    
    Fixes: d8190dc63886 ("iommu/vt-d: Enable DMA remapping after rmrr mapped")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28e2f6b183d49964aac587e638f3708a29afb88c
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Mar 11 17:07:10 2020 +0100

    driver code: clarify and fix platform device DMA mask allocation
    
    commit e3a36eb6dfaeea8175c05d5915dcf0b939be6dab upstream.
    
    This does three inter-related things to clarify the usage of the
    platform device dma_mask field. In the process, fix the bug introduced
    by cdfee5623290 ("driver core: initialize a default DMA mask for
    platform device") that caused Artem Tashkinov's laptop to not boot with
    newer Fedora kernels.
    
    This does:
    
     - First off, rename the field to "platform_dma_mask" to make it
       greppable.
    
       We have way too many different random fields called "dma_mask" in
       various data structures, where some of them are actual masks, and
       some of them are just pointers to the mask. And the structures all
       have pointers to each other, or embed each other inside themselves,
       and "pdev" sometimes means "platform device" and sometimes it means
       "PCI device".
    
       So to make it clear in the code when you actually use this new field,
       give it a unique name (it really should be something even more unique
       like "platform_device_dma_mask", since it's per platform device, not
       per platform, but that gets old really fast, and this is unique
       enough in context).
    
       To further clarify when the field gets used, initialize it when we
       actually start using it with the default value.
    
     - Then, use this field instead of the random one-off allocation in
       platform_device_register_full() that is now unnecessary since we now
       already have a perfectly fine allocation for it in the platform
       device structure.
    
     - The above then allows us to fix the actual bug, where the error path
       of platform_device_register_full() would unconditionally free the
       platform device DMA allocation with 'kfree()'.
    
       That kfree() was dont regardless of whether the allocation had been
       done earlier with the (now removed) kmalloc, or whether
       setup_pdev_dma_masks() had already been used and the dma_mask pointer
       pointed to the mask that was part of the platform device.
    
    It seems most people never triggered the error path, or only triggered
    it from a call chain that set an explicit pdevinfo->dma_mask value (and
    thus caused the unnecessary allocation that was "cleaned up" in the
    error path) before calling platform_device_register_full().
    
    Robin Murphy points out that in Artem's case the wdat_wdt driver failed
    in platform_device_add(), and that was the one that had called
    platform_device_register_full() with pdevinfo.dma_mask = 0, and would
    have caused that kfree() of pdev.dma_mask corrupting the heap.
    
    A later unrelated kmalloc() then oopsed due to the heap corruption.
    
    Fixes: cdfee5623290 ("driver core: initialize a default DMA mask for platform device")
    Reported-bisected-and-tested-by:  Artem S. Tashkinov <aros@gmx.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4450a7b9e8f7d38814ed303a22ff5016472df8f9
Author: Zhenyu Wang <zhenyuw@linux.intel.com>
Date:   Tue Mar 3 13:54:12 2020 +0800

    drm/i915/gvt: Fix unnecessary schedule timer when no vGPU exits
    
    commit 04d6067f1f19e70a418f92fa3170cf7fe53b7fdf upstream.
    
    From commit f25a49ab8ab9 ("drm/i915/gvt: Use vgpu_lock to protect per
    vgpu access") the vgpu idr destroy is moved later than vgpu resource
    destroy, then it would fail to stop timer for schedule policy clean
    which to check vgpu idr for any left vGPU. So this trys to destroy
    vgpu idr earlier.
    
    Cc: Colin Xu <colin.xu@intel.com>
    Fixes: f25a49ab8ab9 ("drm/i915/gvt: Use vgpu_lock to protect per vgpu access")
    Acked-by: Colin Xu <colin.xu@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20200229055445.31481-1-zhenyuw@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a76b2d3a4c86f64ed92549e3f4f079bd8c62fa4c
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Fri Feb 28 15:41:42 2020 +0000

    pinctrl: core: Remove extra kref_get which blocks hogs being freed
    
    commit aafd56fc79041bf36f97712d4b35208cbe07db90 upstream.
    
    kref_init starts with the reference count at 1, which will be balanced
    by the pinctrl_put in pinctrl_unregister. The additional kref_get in
    pinctrl_claim_hogs will increase this count to 2 and cause the hogs to
    not get freed when pinctrl_unregister is called.
    
    Fixes: 6118714275f0 ("pinctrl: core: Fix pinctrl_register_and_init() with pinctrl_enable()")
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200228154142.13860-1-ckeepax@opensource.cirrus.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dad3e99a617178f642e5b8e8fa83bc7d2c0e76fa
Author: Tina Zhang <tina.zhang@intel.com>
Date:   Thu Feb 27 09:00:41 2020 +0800

    drm/i915/gvt: Fix dma-buf display blur issue on CFL
    
    commit 259170cb4c84f4165a36c0b05811eb74c495412c upstream.
    
    Commit c3b5a8430daad ("drm/i915/gvt: Enable gfx virtualiztion for CFL")
    added the support on CFL. The vgpu emulation hotplug support on CFL was
    supposed to be included in that patch. Without the vgpu emulation
    hotplug support, the dma-buf based display gives us a blur face.
    
    So fix this issue by adding the vgpu emulation hotplug support on CFL.
    
    Fixes: c3b5a8430daad ("drm/i915/gvt: Enable gfx virtualiztion for CFL")
    Signed-off-by: Tina Zhang <tina.zhang@intel.com>
    Acked-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20200227010041.32248-1-tina.zhang@intel.com
    (cherry picked from commit 135dde8853c7e00f6002e710f7e4787ed8585c0e)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6daf40bc08b849cfe9b40d5c37c8494f168fdc7b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Feb 25 14:55:15 2020 +0100

    x86/mce/therm_throt: Undo thermal polling properly on CPU offline
    
    commit d364847eed890211444ad74496bb549f838c6018 upstream.
    
    Chris Wilson reported splats from running the thermal throttling
    workqueue callback on offlined CPUs. The problem is that that callback
    should not even run on offlined CPUs but it happens nevertheless because
    the offlining callback thermal_throttle_offline() does not symmetrically
    undo the setup work done in its onlining counterpart. IOW,
    
     1. The thermal interrupt vector should be masked out before ...
    
     2. ... cancelling any pending work synchronously so that no new work is
     enqueued anymore.
    
    Do those things and fix the issue properly.
    
     [ bp: Write commit message. ]
    
    Fixes: f6656208f04e ("x86/mce/therm_throt: Optimize notifications of thermal throttle")
    Reported-by: Chris Wilson <chris@chris-wilson.co.uk>
    Tested-by: Pandruvada, Srinivas <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/158120068234.18291.7938335950259651295@skylake-alporthouse-com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d01de099fca4289624420ffec63b0b2391ad9bcb
Author: Suman Anna <s-anna@ti.com>
Date:   Mon Feb 24 15:26:43 2020 -0600

    virtio_ring: Fix mem leak with vring_new_virtqueue()
    
    commit f13f09a12cbd0c7b776e083c5d008b6c6a9c4e0b upstream.
    
    The functions vring_new_virtqueue() and __vring_new_virtqueue() are used
    with split rings, and any allocations within these functions are managed
    outside of the .we_own_ring flag. The commit cbeedb72b97a ("virtio_ring:
    allocate desc state for split ring separately") allocates the desc state
    within the __vring_new_virtqueue() but frees it only when the .we_own_ring
    flag is set. This leads to a memory leak when freeing such allocated
    virtqueues with the vring_del_virtqueue() function.
    
    Fix this by moving the desc_state free code outside the flag and only
    for split rings. Issue was discovered during testing with remoteproc
    and virtio_rpmsg.
    
    Fixes: cbeedb72b97a ("virtio_ring: allocate desc state for split ring separately")
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Link: https://lore.kernel.org/r/20200224212643.30672-1-s-anna@ti.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84b78a4da93b1ac328a3a390d1791f2f561289df
Author: Leonard Crestez <leonard.crestez@nxp.com>
Date:   Thu Feb 20 18:29:37 2020 +0200

    pinctrl: imx: scu: Align imx sc msg structs to 4
    
    commit 4c48e549f39f8ed10cf8a0b6cb96f5eddf0391ce upstream.
    
    The imx SC api strongly assumes that messages are composed out of
    4-bytes words but some of our message structs have odd sizeofs.
    
    This produces many oopses with CONFIG_KASAN=y.
    
    Fix by marking with __aligned(4).
    
    Fixes: b96eea718bf6 ("pinctrl: fsl: add scu based pinctrl support")
    Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
    Link: https://lore.kernel.org/r/bd7ad5fd755739a6d8d5f4f65e03b3ca4f457bd2.1582216144.git.leonard.crestez@nxp.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 349e5991e48b9f2302e1617ae7bdff4cb7379c98
Author: Nicolas Belin <nbelin@baylibre.com>
Date:   Thu Feb 20 14:15:12 2020 +0100

    pinctrl: meson-gxl: fix GPIOX sdio pins
    
    commit dc7a06b0dbbafac8623c2b7657e61362f2f479a7 upstream.
    
    In the gxl driver, the sdio cmd and clk pins are inverted. It has not caused
    any issue so far because devices using these pins always take both pins
    so the resulting configuration is OK.
    
    Fixes: 0f15f500ff2c ("pinctrl: meson: Add GXL pinctrl definitions")
    Reviewed-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Nicolas Belin <nbelin@baylibre.com>
    Link: https://lore.kernel.org/r/1582204512-7582-1-git-send-email-nbelin@baylibre.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb36d9b4cb37808dd27781af6214c11b05ad18dd
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Mon Feb 17 11:01:35 2020 +0800

    clk: imx8mn: Fix incorrect clock defines
    
    commit 5eb40257047fb11085d582b7b9ccd0bffe900726 upstream.
    
    IMX8MN_CLK_I2C4 and IMX8MN_CLK_UART1's index definitions are incorrect,
    fix them.
    
    Fixes: 1e80936a42e1 ("dt-bindings: imx: Add clock binding doc for i.MX8MN")
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dada8dbf1c2172e32a2038419ba906aaa93c2d5f
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sun Feb 16 13:02:06 2020 +0100

    batman-adv: Don't schedule OGM for disabled interface
    
    commit 8e8ce08198de193e3d21d42e96945216e3d9ac7f upstream.
    
    A transmission scheduling for an interface which is currently dropped by
    batadv_iv_ogm_iface_disable could still be in progress. The B.A.T.M.A.N. V
    is simply cancelling the workqueue item in an synchronous way but this is
    not possible with B.A.T.M.A.N. IV because the OGM submissions are
    intertwined.
    
    Instead it has to stop submitting the OGM when it detect that the buffer
    pointer is set to NULL.
    
    Reported-by: syzbot+a98f2016f40b9cd3818a@syzkaller.appspotmail.com
    Reported-by: syzbot+ac36b6a33c28a491e929@syzkaller.appspotmail.com
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Cc: Hillf Danton <hdanton@sina.com>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de1d6cf7f4b86ac0aff7843def2467238028438d
Author: Yonghyun Hwang <yonghyun@google.com>
Date:   Wed Feb 26 12:30:06 2020 -0800

    iommu/vt-d: Fix a bug in intel_iommu_iova_to_phys() for huge page
    
    commit 77a1bce84bba01f3f143d77127b72e872b573795 upstream.
    
    intel_iommu_iova_to_phys() has a bug when it translates an IOVA for a huge
    page onto its corresponding physical address. This commit fixes the bug by
    accomodating the level of page entry for the IOVA and adds IOVA's lower
    address to the physical address.
    
    Cc: <stable@vger.kernel.org>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Reviewed-by: Moritz Fischer <mdf@kernel.org>
    Signed-off-by: Yonghyun Hwang <yonghyun@google.com>
    Fixes: 3871794642579 ("VT-d: Changes to support KVM")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72751dab23df582dc2a10be7e7878a0243c04ee3
Author: Amol Grover <frextrite@gmail.com>
Date:   Sun Feb 23 22:25:39 2020 +0530

    iommu/vt-d: Fix RCU list debugging warnings
    
    commit 02d715b4a8182f4887d82df82a7b83aced647760 upstream.
    
    dmar_drhd_units is traversed using list_for_each_entry_rcu()
    outside of an RCU read side critical section but under the
    protection of dmar_global_lock. Hence add corresponding lockdep
    expression to silence the following false-positive warnings:
    
    [    1.603975] =============================
    [    1.603976] WARNING: suspicious RCU usage
    [    1.603977] 5.5.4-stable #17 Not tainted
    [    1.603978] -----------------------------
    [    1.603980] drivers/iommu/intel-iommu.c:4769 RCU-list traversed in non-reader section!!
    
    [    1.603869] =============================
    [    1.603870] WARNING: suspicious RCU usage
    [    1.603872] 5.5.4-stable #17 Not tainted
    [    1.603874] -----------------------------
    [    1.603875] drivers/iommu/dmar.c:293 RCU-list traversed in non-reader section!!
    
    Tested-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Signed-off-by: Amol Grover <frextrite@gmail.com>
    Cc: stable@vger.kernel.org
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 153a0efacf6cec3d3ce6c939d08982a824d03e7e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 9 15:01:38 2020 +0100

    iommu/vt-d: dmar_parse_one_rmrr: replace WARN_TAINT with pr_warn + add_taint
    
    commit 96788c7a7f1e7206519d4d736f89a2072dcfe0fc upstream.
    
    Quoting from the comment describing the WARN functions in
    include/asm-generic/bug.h:
    
     * WARN(), WARN_ON(), WARN_ON_ONCE, and so on can be used to report
     * significant kernel issues that need prompt attention if they should ever
     * appear at runtime.
     *
     * Do not use these macros when checking for invalid external inputs
    
    The (buggy) firmware tables which the dmar code was calling WARN_TAINT
    for really are invalid external inputs. They are not under the kernel's
    control and the issues in them cannot be fixed by a kernel update.
    So logging a backtrace, which invites bug reports to be filed about this,
    is not helpful.
    
    Some distros, e.g. Fedora, have tools watching for the kernel backtraces
    logged by the WARN macros and offer the user an option to file a bug for
    this when these are encountered. The WARN_TAINT in dmar_parse_one_rmrr
    + another iommu WARN_TAINT, addressed in another patch, have lead to over
    a 100 bugs being filed this way.
    
    This commit replaces the WARN_TAINT("...") call, with a
    pr_warn(FW_BUG "...") + add_taint(TAINT_FIRMWARE_WORKAROUND, ...) call
    avoiding the backtrace and thus also avoiding bug-reports being filed
    about this against the kernel.
    
    Fixes: f5a68bb0752e ("iommu/vt-d: Mark firmware tainted if RMRR fails sanity check")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Cc: stable@vger.kernel.org
    Cc: Barret Rhoden <brho@google.com>
    Link: https://lore.kernel.org/r/20200309140138.3753-3-hdegoede@redhat.com
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1808874
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0960910ac977b07f5fdf00b8f5aa854e8ce653a4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 9 15:01:37 2020 +0100

    iommu/vt-d: dmar: replace WARN_TAINT with pr_warn + add_taint
    
    commit 59833696442c674acbbd297772ba89e7ad8c753d upstream.
    
    Quoting from the comment describing the WARN functions in
    include/asm-generic/bug.h:
    
     * WARN(), WARN_ON(), WARN_ON_ONCE, and so on can be used to report
     * significant kernel issues that need prompt attention if they should ever
     * appear at runtime.
     *
     * Do not use these macros when checking for invalid external inputs
    
    The (buggy) firmware tables which the dmar code was calling WARN_TAINT
    for really are invalid external inputs. They are not under the kernel's
    control and the issues in them cannot be fixed by a kernel update.
    So logging a backtrace, which invites bug reports to be filed about this,
    is not helpful.
    
    Some distros, e.g. Fedora, have tools watching for the kernel backtraces
    logged by the WARN macros and offer the user an option to file a bug for
    this when these are encountered. The WARN_TAINT in warn_invalid_dmar()
    + another iommu WARN_TAINT, addressed in another patch, have lead to over
    a 100 bugs being filed this way.
    
    This commit replaces the WARN_TAINT("...") calls, with
    pr_warn(FW_BUG "...") + add_taint(TAINT_FIRMWARE_WORKAROUND, ...) calls
    avoiding the backtrace and thus also avoiding bug-reports being filed
    about this against the kernel.
    
    Fixes: fd0c8894893c ("intel-iommu: Set a more specific taint flag for invalid BIOS DMAR tables")
    Fixes: e625b4a95d50 ("iommu/vt-d: Parse ANDD records")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200309140138.3753-2-hdegoede@redhat.com
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1564895
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57c73840b8df2c8f6e0254c87f644f156a925823
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Mar 4 11:11:17 2020 +0000

    iommu/dma: Fix MSI reservation allocation
    
    commit 65ac74f1de3334852fb7d9b1b430fa5a06524276 upstream.
    
    The way cookie_init_hw_msi_region() allocates the iommu_dma_msi_page
    structures doesn't match the way iommu_put_dma_cookie() frees them.
    
    The former performs a single allocation of all the required structures,
    while the latter tries to free them one at a time. It doesn't quite
    work for the main use case (the GICv3 ITS where the range is 64kB)
    when the base granule size is 4kB.
    
    This leads to a nice slab corruption on teardown, which is easily
    observable by simply creating a VF on a SRIOV-capable device, and
    tearing it down immediately (no need to even make use of it).
    Fortunately, this only affects systems where the ITS isn't translated
    by the SMMU, which are both rare and non-standard.
    
    Fix it by allocating iommu_dma_msi_page structures one at a time.
    
    Fixes: 7c1b058c8b5a3 ("iommu/dma: Handle IOMMU API reserved regions")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Joerg Roedel <jroedel@suse.de>
    Cc: Will Deacon <will@kernel.org>
    Cc: stable@vger.kernel.org
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 750f88ea5ed8b49a5410bb570373ed15724000d8
Author: Tony Luck <tony.luck@intel.com>
Date:   Tue Feb 25 17:17:37 2020 -0800

    x86/mce: Fix logic and comments around MSR_PPIN_CTL
    
    commit 59b5809655bdafb0767d3fd00a3e41711aab07e6 upstream.
    
    There are two implemented bits in the PPIN_CTL MSR:
    
    Bit 0: LockOut (R/WO)
          Set 1 to prevent further writes to MSR_PPIN_CTL.
    
    Bit 1: Enable_PPIN (R/W)
           If 1, enables MSR_PPIN to be accessible using RDMSR.
           If 0, an attempt to read MSR_PPIN will cause #GP.
    
    So there are four defined values:
            0: PPIN is disabled, PPIN_CTL may be updated
            1: PPIN is disabled. PPIN_CTL is locked against updates
            2: PPIN is enabled. PPIN_CTL may be updated
            3: PPIN is enabled. PPIN_CTL is locked against updates
    
    Code would only enable the X86_FEATURE_INTEL_PPIN feature for case "2".
    When it should have done so for both case "2" and case "3".
    
    Fix the final test to just check for the enable bit. Also fix some of
    the other comments in this function.
    
    Fixes: 3f5a7896a509 ("x86/mce: Include the PPIN in MCE records when available")
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200226011737.9958-1-tony.luck@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 529f729b28e19c976b986b36a93da53a2c2f08da
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Wed Mar 11 14:13:21 2020 -0500

    perf/amd/uncore: Replace manual sampling check with CAP_NO_INTERRUPT flag
    
    commit f967140dfb7442e2db0868b03b961f9c59418a1b upstream.
    
    Enable the sampling check in kernel/events/core.c::perf_event_open(),
    which returns the more appropriate -EOPNOTSUPP.
    
    BEFORE:
    
      $ sudo perf record -a -e instructions,l3_request_g1.caching_l3_cache_accesses true
      Error:
      The sys_perf_event_open() syscall returned with 22 (Invalid argument) for event (l3_request_g1.caching_l3_cache_accesses).
      /bin/dmesg | grep -i perf may provide additional information.
    
    With nothing relevant in dmesg.
    
    AFTER:
    
      $ sudo perf record -a -e instructions,l3_request_g1.caching_l3_cache_accesses true
      Error:
      l3_request_g1.caching_l3_cache_accesses: PMU Hardware doesn't support sampling/overflow-interrupts. Try 'perf stat'
    
    Fixes: c43ca5091a37 ("perf/x86/amd: Add support for AMD NB and L2I "uncore" counters")
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200311191323.13124-1-kim.phillips@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc09229baaaf75e068302b060f7f21548ba2ded6
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Feb 20 12:41:39 2020 +0100

    mt76: fix array overflow on receiving too many fragments for a packet
    
    commit b102f0c522cf668c8382c56a4f771b37d011cda2 upstream.
    
    If the hardware receives an oversized packet with too many rx fragments,
    skb_shinfo(skb)->frags can overflow and corrupt memory of adjacent pages.
    This becomes especially visible if it corrupts the freelist pointer of
    a slab page.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6710853e488e03a4ee22a104c1f076fc15f54330
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Thu Feb 13 17:15:03 2020 +0200

    i2c: designware-pci: Fix BUG_ON during device removal
    
    commit 9be8bc4dd6177cf992b93b0bd014c4f611283896 upstream.
    
    Function i2c_dw_pci_remove() -> pci_free_irq_vectors() ->
    pci_disable_msi() -> free_msi_irqs() will throw a BUG_ON() for MSI
    enabled device since the driver has not released the requested IRQ before
    calling the pci_free_irq_vectors().
    
    Here driver requests an IRQ using devm_request_irq() but automatic
    release happens only after remove callback. Fix this by explicitly
    freeing the IRQ before calling pci_free_irq_vectors().
    
    Fixes: 21aa3983d619 ("i2c: designware-pci: Switch over to MSI interrupts")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68002f17e2a7c2dd0150826327b71b55a2787ed2
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Sun Mar 8 09:08:55 2020 +0100

    efi: Add a sanity check to efivar_store_raw()
    
    commit d6c066fda90d578aacdf19771a027ed484a79825 upstream.
    
    Add a sanity check to efivar_store_raw() the same way
    efivar_{attr,size,data}_read() and efivar_show_raw() have it.
    
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200305084041.24053-3-vdronov@redhat.com
    Link: https://lore.kernel.org/r/20200308080859.21568-25-ardb@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4364b5e357ead9245f29f5ec567f244a804aaf62
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Sun Mar 8 09:08:54 2020 +0100

    efi: Fix a race and a buffer overflow while reading efivars via sysfs
    
    commit 286d3250c9d6437340203fb64938bea344729a0e upstream.
    
    There is a race and a buffer overflow corrupting a kernel memory while
    reading an EFI variable with a size more than 1024 bytes via the older
    sysfs method. This happens because accessing struct efi_variable in
    efivar_{attr,size,data}_read() and friends is not protected from
    a concurrent access leading to a kernel memory corruption and, at best,
    to a crash. The race scenario is the following:
    
    CPU0:                                CPU1:
    efivar_attr_read()
      var->DataSize = 1024;
      efivar_entry_get(... &var->DataSize)
        down_interruptible(&efivars_lock)
                                         efivar_attr_read() // same EFI var
                                           var->DataSize = 1024;
                                           efivar_entry_get(... &var->DataSize)
                                             down_interruptible(&efivars_lock)
        virt_efi_get_variable()
        // returns EFI_BUFFER_TOO_SMALL but
        // var->DataSize is set to a real
        // var size more than 1024 bytes
        up(&efivars_lock)
                                             virt_efi_get_variable()
                                             // called with var->DataSize set
                                             // to a real var size, returns
                                             // successfully and overwrites
                                             // a 1024-bytes kernel buffer
                                             up(&efivars_lock)
    
    This can be reproduced by concurrent reading of an EFI variable which size
    is more than 1024 bytes:
    
      ts# for cpu in $(seq 0 $(nproc --ignore=1)); do ( taskset -c $cpu \
      cat /sys/firmware/efi/vars/KEKDefault*/size & ) ; done
    
    Fix this by using a local variable for a var's data buffer size so it
    does not get overwritten.
    
    Fixes: e14ab23dde12b80d ("efivars: efivar_entry API")
    Reported-by: Bob Sanders <bob.sanders@hpe.com> and the LTP testsuite
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200305084041.24053-2-vdronov@redhat.com
    Link: https://lore.kernel.org/r/20200308080859.21568-24-ardb@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91b3829766c5645e95bc9be10d44c24a68760a99
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Tue Mar 10 18:35:57 2020 +0100

    x86/ioremap: Map EFI runtime services data as encrypted for SEV
    
    commit 985e537a4082b4635754a57f4f95430790afee6a upstream.
    
    The dmidecode program fails to properly decode the SMBIOS data supplied
    by OVMF/UEFI when running in an SEV guest. The SMBIOS area, under SEV, is
    encrypted and resides in reserved memory that is marked as EFI runtime
    services data.
    
    As a result, when memremap() is attempted for the SMBIOS data, it
    can't be mapped as regular RAM (through try_ram_remap()) and, since
    the address isn't part of the iomem resources list, it isn't mapped
    encrypted through the fallback ioremap().
    
    Add a new __ioremap_check_other() to deal with memory types like
    EFI_RUNTIME_SERVICES_DATA which are not covered by the resource ranges.
    
    This allows any runtime services data which has been created encrypted,
    to be mapped encrypted too.
    
     [ bp: Move functionality to a separate function. ]
    
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Joerg Roedel <jroedel@suse.de>
    Tested-by: Joerg Roedel <jroedel@suse.de>
    Cc: <stable@vger.kernel.org> # 5.3
    Link: https://lkml.kernel.org/r/2d9e16eb5b53dc82665c95c6764b7407719df7a0.1582645327.git.thomas.lendacky@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46f25715f60e648dd664ae9c43a90c8a8aa83553
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Tue Mar 3 13:50:46 2020 +0100

    macintosh: windfarm: fix MODINFO regression
    
    commit bcf3588d8ed3517e6ffaf083f034812aee9dc8e2 upstream.
    
    Commit af503716ac14 made sure OF devices get an OF style modalias with
    I2C events. It assumed all in-tree users were converted, yet it missed
    some Macintosh drivers.
    
    Add an OF module device table for all windfarm drivers to make them
    automatically load again.
    
    Fixes: af503716ac14 ("i2c: core: report OF style module alias for devices registered via OF")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=199471
    Reported-by: Erhard Furtner <erhard_f@mailbox.org>
    Tested-by: Erhard Furtner <erhard_f@mailbox.org>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org # v4.17+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6964a5a247e6f01d89a47630367adba1b2dbb178
Author: Corey Minyard <cminyard@mvista.com>
Date:   Fri Mar 6 11:23:14 2020 -0600

    pid: Fix error return value in some cases
    
    commit b26ebfe12f34f372cf041c6f801fa49c3fb382c5 upstream.
    
    Recent changes to alloc_pid() allow the pid number to be specified on
    the command line.  If set_tid_size is set, then the code scanning the
    levels will hard-set retval to -EPERM, overriding it's previous -ENOMEM
    value.
    
    After the code scanning the levels, there are error returns that do not
    set retval, assuming it is still set to -ENOMEM.
    
    So set retval back to -ENOMEM after scanning the levels.
    
    Fixes: 49cb2fc42ce4 ("fork: extend clone3() to support setting a PID")
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Adrian Reber <areber@redhat.com>
    Cc: <stable@vger.kernel.org> # 5.5
    Link: https://lore.kernel.org/r/20200306172314.12232-1-minyard@acm.org
    [christian.brauner@ubuntu.com: fixup commit message]
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0128764695f27d908428e118b56a66b731d3cf6
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Mar 5 00:41:38 2020 -0800

    fscrypt: don't evict dirty inodes after removing key
    
    commit 2b4eae95c7361e0a147b838715c8baa1380a428f upstream.
    
    After FS_IOC_REMOVE_ENCRYPTION_KEY removes a key, it syncs the
    filesystem and tries to get and put all inodes that were unlocked by the
    key so that unused inodes get evicted via fscrypt_drop_inode().
    Normally, the inodes are all clean due to the sync.
    
    However, after the filesystem is sync'ed, userspace can modify and close
    one of the files.  (Userspace is *supposed* to close the files before
    removing the key.  But it doesn't always happen, and the kernel can't
    assume it.)  This causes the inode to be dirtied and have i_count == 0.
    Then, fscrypt_drop_inode() failed to consider this case and indicated
    that the inode can be dropped, causing the write to be lost.
    
    On f2fs, other problems such as a filesystem freeze could occur due to
    the inode being freed while still on f2fs's dirty inode list.
    
    Fix this bug by making fscrypt_drop_inode() only drop clean inodes.
    
    I've written an xfstest which detects this bug on ext4, f2fs, and ubifs.
    
    Fixes: b1c0ec3599f4 ("fscrypt: add FS_IOC_REMOVE_ENCRYPTION_KEY ioctl")
    Cc: <stable@vger.kernel.org> # v5.4+
    Link: https://lore.kernel.org/r/20200305084138.653498-1-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 148119c2d43f92c63eff571b7504b50273c2196a
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Mar 10 13:07:46 2020 -0400

    blk-iocost: fix incorrect vtime comparison in iocg_is_idle()
    
    commit dcd6589b11d3b1e71f516a87a7b9646ed356b4c0 upstream.
    
    vtimes may wrap and time_before/after64() should be used to determine
    whether a given vtime is before or after another. iocg_is_idle() was
    incorrectly using plain "<" comparison do determine whether done_vtime
    is before vtime. Here, the only thing we're interested in is whether
    done_vtime matches vtime which indicates that there's nothing in
    flight. Let's test for inequality instead.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: 7caa47151ab2 ("blkcg: implement blk-iocost")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffa2d7340d4fbfecd5e01ec66502cab18cc15d84
Author: Artem Savkov <asavkov@redhat.com>
Date:   Fri Mar 6 18:43:17 2020 +0100

    ftrace: Return the first found result in lookup_rec()
    
    commit d9815bff6b379ff46981bea9dfeb146081eab314 upstream.
    
    It appears that ip ranges can overlap so. In that case lookup_rec()
    returns whatever results it got last even if it found nothing in last
    searched page.
    
    This breaks an obscure livepatch late module patching usecase:
      - load livepatch
      - load the patched module
      - unload livepatch
      - try to load livepatch again
    
    To fix this return from lookup_rec() as soon as it found the record
    containing searched-for ip. This used to be this way prior lookup_rec()
    introduction.
    
    Link: http://lkml.kernel.org/r/20200306174317.21699-1-asavkov@redhat.com
    
    Cc: stable@vger.kernel.org
    Fixes: 7e16f581a817 ("ftrace: Separate out functionality from ftrace_location_range()")
    Signed-off-by: Artem Savkov <asavkov@redhat.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6a85df83f5df29d0a914268168189ffd0443efa
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 5 10:31:46 2020 +0100

    ipmi_si: Avoid spurious errors for optional IRQs
    
    commit 443d372d6a96cd94ad119e5c14bb4d63a536a7f6 upstream.
    
    Although the IRQ assignment in ipmi_si driver is optional,
    platform_get_irq() spews error messages unnecessarily:
      ipmi_si dmi-ipmi-si.0: IRQ index 0 not found
    
    Fix this by switching to platform_get_irq_optional().
    
    Cc: stable@vger.kernel.org # 5.4.x
    Cc: John Donnelly <john.p.donnelly@oracle.com>
    Fixes: 7723f4c5ecdb ("driver core: platform: Add an error message to platform_get_irq*()")
    Reported-and-tested-by: Patrick Vo <patrick.vo@hpe.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Message-Id: <20200205093146.1352-1-tiwai@suse.de>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f7c9989f11305aaa43e0f4378f4f070022a9f2b
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Thu Mar 12 14:17:15 2020 +0100

    s390/dasd: fix data corruption for thin provisioned devices
    
    commit 5e6bdd37c5526ef01326df5dabb93011ee89237e upstream.
    
    Devices are formatted in multiple of tracks.
    For an Extent Space Efficient (ESE) volume we get errors when accessing
    unformatted tracks. In this case the driver either formats the track on
    the flight for write requests or returns zero data for read requests.
    
    In case a request spans multiple tracks, the indication of an unformatted
    track presented for the first track is incorrectly applied to all tracks
    covered by the request. As a result, tracks containing data will be handled
    as empty, resulting in zero data being returned on read, or overwriting
    existing data with zero on write.
    
    Fix by determining the track that gets the NRF error.
    For write requests only format the track that is surely not formatted.
    For Read requests all tracks before have returned valid data and should not
    be touched.
    All tracks after the unformatted track might be formatted or not. Those are
    returned to the blocklayer to build a new request.
    
    When using alias devices there is a chance that multiple write requests
    trigger a format of the same track which might lead to data loss. Ensure
    that a track is formatted only once by maintaining a list of currently
    processed tracks.
    
    Fixes: 5e2b17e712cf ("s390/dasd: Add dynamic formatting support for ESE volumes")
    Cc: stable@vger.kernel.org # 5.3+
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 671963b7b3db885f56f4a4559274190400989e34
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Tue Feb 25 12:28:09 2020 -0300

    MIPS: Fix CONFIG_MIPS_CMDLINE_DTB_EXTEND handling
    
    commit 8e029eb0bcd6a7fab6dc9191152c085784c31ee6 upstream.
    
    The CONFIG_MIPS_CMDLINE_DTB_EXTEND option is used so that the kernel
    arguments provided in the 'bootargs' property in devicetree are extended
    with the kernel arguments provided by the bootloader.
    
    The code was broken, as it didn't actually take any of the kernel
    arguments provided in devicetree when that option was set.
    
    Fixes: 7784cac69735 ("MIPS: cmdline: Clean up boot_command_line initialization")
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4901adae1b69e2d1c69f9597be8fd4eab60227a
Author: H. Nikolaus Schaller <hns@goldelico.com>
Date:   Fri Mar 6 18:28:30 2020 +0100

    MIPS: DTS: CI20: fix interrupt for pcf8563 RTC
    
    commit 130ab8819d81bd96f1a71e8461a8f73edf1fbe82 upstream.
    
    Interrupts should not be specified by interrupt line but by
    gpio parent and reference.
    
    Fixes: 73f2b940474d ("MIPS: CI20: DTS: Add I2C nodes")
    Cc: stable@vger.kernel.org
    Signed-off-by: H. Nikolaus Schaller <hns@goldelico.com>
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 177f6f6badf5d032037bf21d13e56184feaa171b
Author: H. Nikolaus Schaller <hns@goldelico.com>
Date:   Fri Mar 6 18:27:58 2020 +0100

    MIPS: DTS: CI20: fix PMU definitions for ACT8600
    
    commit e8d87a0b822d4b3d9a94a5da915f93aa1b674c93 upstream.
    
    There is a ACT8600 on the CI20 board and the bindings of the
    ACT8865 driver have changed without updating the CI20 device
    tree. Therefore the PMU can not be probed successfully and
    is running in power-on reset state.
    
    Fix DT to match the latest act8865-regulator bindings.
    
    Fixes: 73f2b940474d ("MIPS: CI20: DTS: Add I2C nodes")
    Cc: stable@vger.kernel.org
    Signed-off-by: H. Nikolaus Schaller <hns@goldelico.com>
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2031a50a17f2f3b99d5fc9b6b8fe85688b139a5b
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Feb 13 09:16:07 2020 +0100

    fuse: fix stack use after return
    
    commit 3e8cb8b2eaeb22f540f1cbc00cbb594047b7ba89 upstream.
    
    Normal, synchronous requests will have their args allocated on the stack.
    After the FR_FINISHED bit is set by receiving the reply from the userspace
    fuse server, the originating task may return and reuse the stack frame,
    resulting in an Oops if the args structure is dereferenced.
    
    Fix by setting a flag in the request itself upon initializing, indicating
    whether it has an asynchronous ->end() callback.
    
    Reported-by: Kyle Sanderson <kyle.leet@gmail.com>
    Reported-by: Michael Stapelberg <michael+lkml@stapelberg.ch>
    Fixes: 2b319d1f6f92 ("fuse: don't dereference req->args on finished request")
    Cc: <stable@vger.kernel.org> # v5.4
    Tested-by: Michael Stapelberg <michael+lkml@stapelberg.ch>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7114a8a8d3b7d11d04888f6c41849690bfbfc54c
Author: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date:   Wed Mar 11 19:26:43 2020 +0300

    ARC: define __ALIGN_STR and __ALIGN symbols for ARC
    
    commit 8d92e992a785f35d23f845206cf8c6cafbc264e0 upstream.
    
    The default defintions use fill pattern 0x90 for padding which for ARC
    generates unintended "ldh_s r12,[r0,0x20]" corresponding to opcode 0x9090
    
    So use ".align 4" which insert a "nop_s" instruction instead.
    
    Cc: stable@vger.kernel.org
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 721cff8874d63a180b851bb4efce9663090a16df
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Mon Mar 9 16:52:11 2020 +0100

    KVM: nVMX: avoid NULL pointer dereference with incorrect EVMCS GPAs
    
    commit 95fa10103dabc38be5de8efdfced5e67576ed896 upstream.
    
    When an EVMCS enabled L1 guest on KVM will tries doing enlightened VMEnter
    with EVMCS GPA = 0 the host crashes because the
    
    evmcs_gpa != vmx->nested.hv_evmcs_vmptr
    
    condition in nested_vmx_handle_enlightened_vmptrld() will evaluate to
    false (as nested.hv_evmcs_vmptr is zeroed after init). The crash will
    happen on vmx->nested.hv_evmcs pointer dereference.
    
    Another problematic EVMCS ptr value is '-1' but it only causes host crash
    after nested_release_evmcs() invocation. The problem is exactly the same as
    with '0', we mistakenly think that the EVMCS pointer hasn't changed and
    thus nested.hv_evmcs_vmptr is valid.
    
    Resolve the issue by adding an additional !vmx->nested.hv_evmcs
    check to nested_vmx_handle_enlightened_vmptrld(), this way we will
    always be trying kvm_vcpu_map() when nested.hv_evmcs is NULL
    and this is supposed to catch all invalid EVMCS GPAs.
    
    Also, initialize hv_evmcs_vmptr to '0' in nested_release_evmcs()
    to be consistent with initialization where we don't currently
    set hv_evmcs_vmptr to '-1'.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e094de6d3aeb68b00487b9a4238a01bb459856d
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Tue Mar 3 15:33:15 2020 +0100

    KVM: x86: clear stale x86_emulate_ctxt->intercept value
    
    commit 342993f96ab24d5864ab1216f46c0b199c2baf8e upstream.
    
    After commit 07721feee46b ("KVM: nVMX: Don't emulate instructions in guest
    mode") Hyper-V guests on KVM stopped booting with:
    
     kvm_nested_vmexit:    rip fffff802987d6169 reason EPT_VIOLATION info1 181
        info2 0 int_info 0 int_info_err 0
     kvm_page_fault:       address febd0000 error_code 181
     kvm_emulate_insn:     0:fffff802987d6169: f3 a5
     kvm_emulate_insn:     0:fffff802987d6169: f3 a5 FAIL
     kvm_inj_exception:    #UD (0x0)
    
    "f3 a5" is a "rep movsw" instruction, which should not be intercepted
    at all.  Commit c44b4c6ab80e ("KVM: emulate: clean up initializations in
    init_decode_cache") reduced the number of fields cleared by
    init_decode_cache() claiming that they are being cleared elsewhere,
    'intercept', however, is left uncleared if the instruction does not have
    any of the "slow path" flags (NotImpl, Stack, Op3264, Sse, Mmx, CheckPerm,
    NearBranch, No16 and of course Intercept itself).
    
    Fixes: c44b4c6ab80e ("KVM: emulate: clean up initializations in init_decode_cache")
    Fixes: 07721feee46b ("KVM: nVMX: Don't emulate instructions in guest mode")
    Cc: stable@vger.kernel.org
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 295f65553b411d3dbf32bcd5bdd44f351bdcf577
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Mar 10 09:31:41 2020 -0400

    gfs2_atomic_open(): fix O_EXCL|O_CREAT handling on cold dcache
    
    commit 21039132650281de06a169cbe8a0f7e5c578fd8b upstream.
    
    with the way fs/namei.c:do_last() had been done, ->atomic_open()
    instances needed to recognize the case when existing file got
    found with O_EXCL|O_CREAT, either by falling back to finish_no_open()
    or failing themselves.  gfs2 one didn't.
    
    Fixes: 6d4ade986f9c (GFS2: Add atomic_open support)
    Cc: stable@kernel.org # v3.11
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1ab1c60a5f33773b77b8deb894f311c7105db85
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 12 18:25:20 2020 -0400

    cifs_atomic_open(): fix double-put on late allocation failure
    
    commit d9a9f4849fe0c9d560851ab22a85a666cddfdd24 upstream.
    
    several iterations of ->atomic_open() calling conventions ago, we
    used to need fput() if ->atomic_open() failed at some point after
    successful finish_open().  Now (since 2016) it's not needed -
    struct file carries enough state to make fput() work regardless
    of the point in struct file lifecycle and discarding it on
    failure exits in open() got unified.  Unfortunately, I'd missed
    the fact that we had an instance of ->atomic_open() (cifs one)
    that used to need that fput(), as well as the stale comment in
    finish_open() demanding such late failure handling.  Trivially
    fixed...
    
    Fixes: fe9ec8291fca "do_last(): take fput() on error after opening to out:"
    Cc: stable@kernel.org # v4.7+
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b032c163acfbd7fe4aa2ff189d9cc55e9791ad5d
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Fri Feb 21 10:37:08 2020 +0900

    block: Fix partition support for host aware zoned block devices
    
    commit b53df2e7442c73a932fb74228147fb946e531585 upstream.
    
    Commit b72053072c0b ("block: allow partitions on host aware zone
    devices") introduced the helper function disk_has_partitions() to check
    if a given disk has valid partitions. However, since this function result
    directly depends on the disk partition table length rather than the
    actual existence of valid partitions in the table, it returns true even
    after all partitions are removed from the disk. For host aware zoned
    block devices, this results in zone management support to be kept
    disabled even after removing all partitions.
    
    Fix this by changing disk_has_partitions() to walk through the partition
    table entries and return true if and only if a valid non-zero size
    partition is found.
    
    Fixes: b72053072c0b ("block: allow partitions on host aware zone devices")
    Cc: stable@vger.kernel.org # 5.5
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1839a61e26ae5f6cdf228e3aa72067d891dc5953
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Mar 9 16:00:11 2020 -0400

    ktest: Add timeout for ssh sync testing
    
    commit 4d00fc477a2ce8b6d2b09fb34ef9fe9918e7d434 upstream.
    
    Before rebooting the box, a "ssh sync" is called to the test machine to see
    if it is alive or not. But if the test machine is in a partial state, that
    ssh may never actually finish, and the ktest test hangs.
    
    Add a 10 second timeout to the sync test, which will fail after 10 seconds
    and then cause the test to reboot the test machine.
    
    Cc: stable@vger.kernel.org
    Fixes: 6474ace999edd ("ktest.pl: Powercycle the box on reboot if no connection can be made")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bddb07a930ffe5e22402d102a8f61c9c4128dca5
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Mar 9 16:26:04 2020 +0100

    pinctrl: qcom: Assign irq_eoi conditionally
    
    commit 1cada2f307665e208a486d7ac2294ed9a6f74a6f upstream.
    
    The hierarchical parts of MSM pinctrl/GPIO is only
    used when the device tree has a "wakeup-parent" as
    a phandle, but the .irq_eoi is anyway assigned leading
    to semantic problems on elder Qualcomm chipsets.
    
    When the drivers/mfd/qcom-pm8xxx.c driver calls
    chained_irq_exit() that call will in turn call chip->irq_eoi()
    which is set to irq_chip_eoi_parent() by default on a
    hierachical IRQ chip, and the parent is pinctrl-msm.c
    so that will in turn unconditionally call
    irq_chip_eoi_parent() again, but its parent is invalid
    so we get the following crash:
    
     Unnable to handle kernel NULL pointer dereference at
     virtual address 00000010
     pgd = (ptrval)
     [00000010] *pgd=00000000
     Internal error: Oops: 5 [#1] PREEMPT SMP ARM
     (...)
     PC is at irq_chip_eoi_parent+0x4/0x10
     LR is at pm8xxx_irq_handler+0x1b4/0x2d8
    
    If we solve this crash by avoiding to call up to
    irq_chip_eoi_parent(), the machine will hang and get
    reset by the watchdog, because of semantic issues,
    probably inside irq_chip.
    
    As a solution, just assign the .irq_eoi conditionally if
    we are actually using a wakeup parent.
    
    Cc: David Heidelberg <david@ixit.cz>
    Cc: Bjorn Andersson <bjorn.andersson@linaro.org>
    Cc: Lina Iyer <ilina@codeaurora.org>
    Cc: Stephen Boyd <swboyd@chromium.org>
    Cc: stable@vger.kernel.org
    Fixes: e35a6ae0eb3a ("pinctrl/msm: Setup GPIO chip in hierarchy")
    Link: https://lore.kernel.org/r/20200306121221.1231296-1-linus.walleij@linaro.org
    Link: https://lore.kernel.org/r/20200309125207.571840-1-linus.walleij@linaro.org
    Link: https://lore.kernel.org/r/20200309152604.585112-1-linus.walleij@linaro.org
    Tested-by: David Heidelberg <david@ixit.cz>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1a978aa5a2cfd6f37284e9336978b15e5983c71
Author: Mathias Kresin <dev@kresin.me>
Date:   Thu Mar 5 19:22:45 2020 +0100

    pinctrl: falcon: fix syntax error
    
    commit d62e7fbea4951c124a24176da0c7bf3003ec53d4 upstream.
    
    Add the missing semicolon after of_node_put to get the file compiled.
    
    Fixes: f17d2f54d36d ("pinctrl: falcon: Add of_node_put() before return")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Mathias Kresin <dev@kresin.me>
    Link: https://lore.kernel.org/r/20200305182245.9636-1-dev@kresin.me
    Acked-by: Thomas Langer <thomas.langer@intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6addf8cea846093a0b1f83eadc9ba73014766ead
Author: Ben Chuang <ben.chuang@genesyslogic.com.tw>
Date:   Wed Feb 19 17:29:00 2020 +0800

    mmc: sdhci-pci-gli: Enable MSI interrupt for GL975x
    
    commit 31e43f31890ca6e909b27dcb539252b46aa465da upstream.
    
    Enable MSI interrupt for GL9750/GL9755. Some platforms
    do not support PCI INTx and devices can not work without
    interrupt. Like messages below:
    
    [    4.487132] sdhci-pci 0000:01:00.0: SDHCI controller found [17a0:9755] (rev 0)
    [    4.487198] ACPI BIOS Error (bug): Could not resolve symbol [\_SB.PCI0.PBR2._PRT.APS2], AE_NOT_FOUND (20190816/psargs-330)
    [    4.487397] ACPI Error: Aborting method \_SB.PCI0.PBR2._PRT due to previous error (AE_NOT_FOUND) (20190816/psparse-529)
    [    4.487707] pcieport 0000:00:01.3: can't derive routing for PCI INT A
    [    4.487709] sdhci-pci 0000:01:00.0: PCI INT A: no GSI
    
    Signed-off-by: Ben Chuang <ben.chuang@genesyslogic.com.tw>
    Tested-by: Raul E Rangel <rrangel@chromium.org>
    Fixes: e51df6ce668a ("mmc: host: sdhci-pci: Add Genesys Logic GL975x support")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200219092900.9151-1-benchuanggli@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be0e53f10e05d58740478ff1416a0d9b456cc2ce
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Mar 6 11:30:10 2020 +0000

    drm/i915/execlists: Enable timeslice on partial virtual engine dequeue
    
    commit eafc2aa20fba319b6e791a1b0c45a91511eccb6b upstream.
    
    If we stop filling the ELSP due to an incompatible virtual engine
    request, check if we should enable the timeslice on behalf of the queue.
    
    This fixes the case where we are inspecting the last->next element when
    we know that the last element is the last request in the execution queue,
    and so decided we did not need to enable timeslicing despite the intent
    to do so!
    
    Fixes: 8ee36e048c98 ("drm/i915/execlists: Minimalistic timeslicing")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: <stable@vger.kernel.org> # v5.4+
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200306113012.3184606-1-chris@chris-wilson.co.uk
    (cherry picked from commit 3df2deed411e0f1b7312baf0139aab8bba4c0410)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce5922168a2a3257df2a1718f65eaaeffd37fe73
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Mar 6 15:46:47 2020 +0000

    drm/i915/gt: Close race between cacheline_retire and free
    
    commit 8ea6bb8e4d47e07518e5dba4f5cb77e210f0df82 upstream.
    
    If the cacheline may still be busy, atomically mark it for future
    release, and only if we can determine that it will never be used again,
    immediately free it.
    
    Closes: https://gitlab.freedesktop.org/drm/intel/issues/1392
    Fixes: ebece7539242 ("drm/i915: Keep timeline HWSP allocated until idle across the system")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.2+
    Link: https://patchwork.freedesktop.org/patch/msgid/20200306154647.3528345-1-chris@chris-wilson.co.uk
    (cherry picked from commit 2d4bd971f5baa51418625f379a69f5d58b5a0450)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 371f7a3e0cde7c5cd1e0c7c95af60b05e7c9277e
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Mar 10 10:17:20 2020 +0000

    drm/i915: Defer semaphore priority bumping to a workqueue
    
    commit 14a0d527a479eb2cb6067f9e5e163e1bf35db2a9 upstream.
    
    Since the semaphore fence may be signaled from inside an interrupt
    handler from inside a request holding its request->lock, we cannot then
    enter into the engine->active.lock for processing the semaphore priority
    bump as we may traverse our call tree and end up on another held
    request.
    
    CPU 0:
    [ 2243.218864]  _raw_spin_lock_irqsave+0x9a/0xb0
    [ 2243.218867]  i915_schedule_bump_priority+0x49/0x80 [i915]
    [ 2243.218869]  semaphore_notify+0x6d/0x98 [i915]
    [ 2243.218871]  __i915_sw_fence_complete+0x61/0x420 [i915]
    [ 2243.218874]  ? kmem_cache_free+0x211/0x290
    [ 2243.218876]  i915_sw_fence_complete+0x58/0x80 [i915]
    [ 2243.218879]  dma_i915_sw_fence_wake+0x3e/0x80 [i915]
    [ 2243.218881]  signal_irq_work+0x571/0x690 [i915]
    [ 2243.218883]  irq_work_run_list+0xd7/0x120
    [ 2243.218885]  irq_work_run+0x1d/0x50
    [ 2243.218887]  smp_irq_work_interrupt+0x21/0x30
    [ 2243.218889]  irq_work_interrupt+0xf/0x20
    
    CPU 1:
    [ 2242.173107]  _raw_spin_lock+0x8f/0xa0
    [ 2242.173110]  __i915_request_submit+0x64/0x4a0 [i915]
    [ 2242.173112]  __execlists_submission_tasklet+0x8ee/0x2120 [i915]
    [ 2242.173114]  ? i915_sched_lookup_priolist+0x1e3/0x2b0 [i915]
    [ 2242.173117]  execlists_submit_request+0x2e8/0x2f0 [i915]
    [ 2242.173119]  submit_notify+0x8f/0xc0 [i915]
    [ 2242.173121]  __i915_sw_fence_complete+0x61/0x420 [i915]
    [ 2242.173124]  ? _raw_spin_unlock_irqrestore+0x39/0x40
    [ 2242.173137]  i915_sw_fence_complete+0x58/0x80 [i915]
    [ 2242.173140]  i915_sw_fence_commit+0x16/0x20 [i915]
    
    Closes: https://gitlab.freedesktop.org/drm/intel/issues/1318
    Fixes: b7404c7ecb38 ("drm/i915: Bump ready tasks ahead of busywaits")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: <stable@vger.kernel.org> # v5.2+
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200310101720.9944-1-chris@chris-wilson.co.uk
    (cherry picked from commit 209df10bb4536c81c2540df96c02cd079435357f)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56bb6bbb7d6e0ebb5b95229da54eca01b74ddbe9
Author: Matthew Auld <matthew.auld@intel.com>
Date:   Thu Mar 5 20:35:34 2020 +0000

    drm/i915: be more solid in checking the alignment
    
    commit 1d61c5d711a2dc0b978ae905535edee9601f9449 upstream.
    
    The alignment is u64, and yet is_power_of_2() assumes unsigned long,
    which might give different results between 32b and 64b kernel.
    
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200305203534.210466-1-matthew.auld@intel.com
    Cc: stable@vger.kernel.org
    (cherry picked from commit 2920516b2f719546f55079bc39a7fe409d9e80ab)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c757343dfed3bad886b527ebfe24825a2e61eff
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Mar 5 13:48:22 2020 +0000

    drm/i915: Return early for await_start on same timeline
    
    commit c951b0af2dddbb1f34be103029eb9030392d5554 upstream.
    
    Requests within a timeline are ordered by that timeline, so awaiting for
    the start of a request within the timeline is a no-op. This used to work
    by falling out of the mutex_trylock() as the signaler and waiter had the
    same timeline and not returning an error.
    
    Fixes: 6a79d848403d ("drm/i915: Lock signaler timeline while navigating")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.5+
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200305134822.2750496-1-chris@chris-wilson.co.uk
    (cherry picked from commit ab7a69020fb5d5c7ba19fba60f62fd6f9ca9f779)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10456606d668d1f4758eed569408d93e3cb55039
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Mar 5 10:42:10 2020 +0000

    drm/i915: Actually emit the await_start
    
    commit c67b35d970ed3391069c21f3071a26f687399ab2 upstream.
    
    Fix the inverted test to emit the wait on the end of the previous
    request if we /haven't/ already.
    
    Fixes: 6a79d848403d ("drm/i915: Lock signaler timeline while navigating")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v5.5+
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200305104210.2619967-1-chris@chris-wilson.co.uk
    (cherry picked from commit 07e9c59d63df6a1c44c1975c01827ba18b69270a)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ef49e0481c0ebc3019a919192f0122eb167260a
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Nov 8 14:45:27 2019 +0000

    drm/amd/display: remove duplicated assignment to grph_obj_type
    
    commit d785476c608c621b345dd9396e8b21e90375cb0e upstream.
    
    Variable grph_obj_type is being assigned twice, one of these is
    redundant so remove it.
    
    Addresses-Coverity: ("Evaluation order violation")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad2e2d9b194ea63b2147f022f2a1179a1913a047
Author: Hillf Danton <hdanton@sina.com>
Date:   Fri Jan 24 20:14:45 2020 -0500

    workqueue: don't use wq_select_unbound_cpu() for bound works
    
    commit aa202f1f56960c60e7befaa0f49c72b8fa11b0a8 upstream.
    
    wq_select_unbound_cpu() is designed for unbound workqueues only, but
    it's wrongly called when using a bound workqueue too.
    
    Fixing this ensures work queued to a bound workqueue with
    cpu=WORK_CPU_UNBOUND always runs on the local CPU.
    
    Before, that would happen only if wq_unbound_cpumask happened to include
    it (likely almost always the case), or was empty, or we got lucky with
    forced round-robin placement.  So restricting
    /sys/devices/virtual/workqueue/cpumask to a small subset of a machine's
    CPUs would cause some bound work items to run unexpectedly there.
    
    Fixes: ef557180447f ("workqueue: schedule WORK_CPU_UNBOUND work on wq_unbound_cpumask CPUs")
    Cc: stable@vger.kernel.org # v4.5+
    Signed-off-by: Hillf Danton <hdanton@sina.com>
    [dj: massage changelog]
    Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Lai Jiangshan <jiangshanlai@gmail.com>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04cfa2387d9e5e582dde567c5831fec9d70a1215
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Tue Feb 25 10:07:12 2020 +0300

    netfilter: x_tables: xt_mttg_seq_next should increase position index
    
    commit ee84f19cbbe9cf7cba2958acb03163fed3ecbb0f upstream.
    
    If .next function does not change position index,
    following .show function will repeat output related
    to current position index.
    
    Without patch:
     # dd if=/proc/net/ip_tables_matches  # original file output
     conntrack
     conntrack
     conntrack
     recent
     recent
     icmp
     udplite
     udp
     tcp
     0+1 records in
     0+1 records out
     65 bytes copied, 5.4074e-05 s, 1.2 MB/s
    
     # dd if=/proc/net/ip_tables_matches bs=62 skip=1
     dd: /proc/net/ip_tables_matches: cannot skip to specified offset
     cp   <<< end of  last line
     tcp  <<< and then unexpected whole last line once again
     0+1 records in
     0+1 records out
     7 bytes copied, 0.000102447 s, 68.3 kB/s
    
    Cc: stable@vger.kernel.org
    Fixes: 1f4aace60b0e ("fs/seq_file.c: simplify seq_file iteration code ...")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a9aafa2d7bebb600c66e239880561ea5175c9c5
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Tue Feb 25 10:06:29 2020 +0300

    netfilter: xt_recent: recent_seq_next should increase position index
    
    commit db25517a550926f609c63054b12ea9ad515e1a10 upstream.
    
    If .next function does not change position index,
    following .show function will repeat output related
    to current position index.
    
    Without the patch:
     # dd if=/proc/net/xt_recent/SSH # original file outpt
     src=127.0.0.4 ttl: 0 last_seen: 6275444819 oldest_pkt: 1 6275444819
     src=127.0.0.2 ttl: 0 last_seen: 6275438906 oldest_pkt: 1 6275438906
     src=127.0.0.3 ttl: 0 last_seen: 6275441953 oldest_pkt: 1 6275441953
     0+1 records in
     0+1 records out
     204 bytes copied, 6.1332e-05 s, 3.3 MB/s
    
    Read after lseek into middle of last line (offset 140 in example below)
    generates expected end of last line and then unexpected whole last line
    once again
    
     # dd if=/proc/net/xt_recent/SSH bs=140 skip=1
     dd: /proc/net/xt_recent/SSH: cannot skip to specified offset
     127.0.0.3 ttl: 0 last_seen: 6275441953 oldest_pkt: 1 6275441953
     src=127.0.0.3 ttl: 0 last_seen: 6275441953 oldest_pkt: 1 6275441953
     0+1 records in
     0+1 records out
     132 bytes copied, 6.2487e-05 s, 2.1 MB/s
    
    Cc: stable@vger.kernel.org
    Fixes: 1f4aace60b0e ("fs/seq_file.c: simplify seq_file iteration code ...")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee8f0dcd28550c9742d0ef92639a0c3b379b8d15
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Tue Feb 25 10:05:59 2020 +0300

    netfilter: synproxy: synproxy_cpu_seq_next should increase position index
    
    commit bb71f846a0002239f7058c84f1496648ff4a5c20 upstream.
    
    If .next function does not change position index,
    following .show function will repeat output related
    to current position index.
    
    Cc: stable@vger.kernel.org
    Fixes: 1f4aace60b0e ("fs/seq_file.c: simplify seq_file iteration code ...")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b784bfda4d2e9247726264079d511898fe8cd60d
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Tue Feb 25 10:05:47 2020 +0300

    netfilter: nf_conntrack: ct_cpu_seq_next should increase position index
    
    commit dc15af8e9dbd039ebb06336597d2c491ef46ab74 upstream.
    
    If .next function does not change position index,
    following .show function will repeat output related
    to current position index.
    
    Cc: stable@vger.kernel.org
    Fixes: 1f4aace60b0e ("fs/seq_file.c: simplify seq_file iteration code ...")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3efdf5120a3a83ca59ce4226bc46b2544fb71ba6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 9 19:25:10 2020 +0100

    iommu/vt-d: quirk_ioat_snb_local_iommu: replace WARN_TAINT with pr_warn + add_taint
    
    commit 81ee85d0462410de8eeeec1b9761941fd6ed8c7b upstream.
    
    Quoting from the comment describing the WARN functions in
    include/asm-generic/bug.h:
    
     * WARN(), WARN_ON(), WARN_ON_ONCE, and so on can be used to report
     * significant kernel issues that need prompt attention if they should ever
     * appear at runtime.
     *
     * Do not use these macros when checking for invalid external inputs
    
    The (buggy) firmware tables which the dmar code was calling WARN_TAINT
    for really are invalid external inputs. They are not under the kernel's
    control and the issues in them cannot be fixed by a kernel update.
    So logging a backtrace, which invites bug reports to be filed about this,
    is not helpful.
    
    Fixes: 556ab45f9a77 ("ioat2: catch and recover from broken vtd configurations v6")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20200309182510.373875-1-hdegoede@redhat.com
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=701847
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96d7ef4945f2054aa86144f2c564e7667e49e27f
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Thu Feb 13 13:37:27 2020 +0100

    virtio-blk: fix hw_queue stopped on arbitrary error
    
    commit f5f6b95c72f7f8bb46eace8c5306c752d0133daa upstream.
    
    Since nobody else is going to restart our hw_queue for us, the
    blk_mq_start_stopped_hw_queues() is in virtblk_done() is not sufficient
    necessarily sufficient to ensure that the queue will get started again.
    In case of global resource outage (-ENOMEM because mapping failure,
    because of swiotlb full) our virtqueue may be empty and we can get
    stuck with a stopped hw_queue.
    
    Let us not stop the queue on arbitrary errors, but only on -EONSPC which
    indicates a full virtqueue, where the hw_queue is guaranteed to get
    started by virtblk_done() before when it makes sense to carry on
    submitting requests. Let us also remove a stale comment.
    
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Fixes: f7728002c1c7 ("virtio_ring: fix return code on DMA mapping fails")
    Link: https://lore.kernel.org/r/20200213123728.61216-2-pasic@linux.ibm.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cfd18c6f32c6516e6930d1a58d3e0c5aeb9fd09
Author: Dan Moulding <dmoulding@me.com>
Date:   Tue Jan 28 02:31:07 2020 -0700

    iwlwifi: mvm: Do not require PHY_SKU NVM section for 3168 devices
    
    commit a9149d243f259ad8f02b1e23dfe8ba06128f15e1 upstream.
    
    The logic for checking required NVM sections was recently fixed in
    commit b3f20e098293 ("iwlwifi: mvm: fix NVM check for 3168
    devices"). However, with that fixed the else is now taken for 3168
    devices and within the else clause there is a mandatory check for the
    PHY_SKU section. This causes the parsing to fail for 3168 devices.
    
    The PHY_SKU section is really only mandatory for the IWL_NVM_EXT
    layout (the phy_sku parameter of iwl_parse_nvm_data is only used when
    the NVM type is IWL_NVM_EXT). So this changes the PHY_SKU section
    check so that it's only mandatory for IWL_NVM_EXT.
    
    Fixes: b3f20e098293 ("iwlwifi: mvm: fix NVM check for 3168 devices")
    Signed-off-by: Dan Moulding <dmoulding@me.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27ec80ad29c889b144a7c716093774bcb2adcba2
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Mar 5 11:15:36 2020 +0100

    netfilter: nf_tables: fix infinite loop when expr is not available
    
    commit 1d305ba40eb8081ff21eeb8ca6ba5c70fd920934 upstream.
    
    nft will loop forever if the kernel doesn't support an expression:
    
    1. nft_expr_type_get() appends the family specific name to the module list.
    2. -EAGAIN is returned to nfnetlink, nfnetlink calls abort path.
    3. abort path sets ->done to true and calls request_module for the
       expression.
    4. nfnetlink replays the batch, we end up in nft_expr_type_get() again.
    5. nft_expr_type_get attempts to append family-specific name. This
       one already exists on the list, so we continue
    6. nft_expr_type_get adds the generic expression name to the module
       list. -EAGAIN is returned, nfnetlink calls abort path.
    7. abort path encounters the family-specific expression which
       has 'done' set, so it gets removed.
    8. abort path requests the generic expression name, sets done to true.
    9. batch is replayed.
    
    If the expression could not be loaded, then we will end up back at 1),
    because the family-specific name got removed and the cycle starts again.
    
    Note that userspace can SIGKILL the nft process to stop the cycle, but
    the desired behaviour is to return an error after the generic expr name
    fails to load the expression.
    
    Fixes: eb014de4fd418 ("netfilter: nf_tables: autoload modules from the abort path")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de9d0ad764628a55a9e1d46a7d6bd30acd1a02a2
Author: Michal KoutnÃ½ <mkoutny@suse.com>
Date:   Fri Jan 24 12:40:15 2020 +0100

    cgroup: Iterate tasks that did not finish do_exit()
    
    commit 9c974c77246460fa6a92c18554c3311c8c83c160 upstream.
    
    PF_EXITING is set earlier than actual removal from css_set when a task
    is exitting. This can confuse cgroup.procs readers who see no PF_EXITING
    tasks, however, rmdir is checking against css_set membership so it can
    transitionally fail with EBUSY.
    
    Fix this by listing tasks that weren't unlinked from css_set active
    lists.
    It may happen that other users of the task iterator (without
    CSS_TASK_ITER_PROCS) spot a PF_EXITING task before cgroup_exit(). This
    is equal to the state before commit c03cd7738a83 ("cgroup: Include dying
    leaders with live threads in PROCS iterations") but it may be reviewed
    later.
    
    Reported-by: Suren Baghdasaryan <surenb@google.com>
    Fixes: c03cd7738a83 ("cgroup: Include dying leaders with live threads in PROCS iterations")
    Signed-off-by: Michal KoutnÃ½ <mkoutny@suse.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f605480ac77e07429cea5fef223d1fa3bcf6d35
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 30 13:34:59 2020 +0300

    cgroup: cgroup_procs_next should increase position index
    
    commit 2d4ecb030dcc90fb725ecbfc82ce5d6c37906e0e upstream.
    
    If seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output:
    
    1) dd bs=1 skip output of each 2nd elements
    $ dd if=/sys/fs/cgroup/cgroup.procs bs=8 count=1
    2
    3
    4
    5
    1+0 records in
    1+0 records out
    8 bytes copied, 0,000267297 s, 29,9 kB/s
    [test@localhost ~]$ dd if=/sys/fs/cgroup/cgroup.procs bs=1 count=8
    2
    4 <<< NB! 3 was skipped
    6 <<<    ... and 5 too
    8 <<<    ... and 7
    8+0 records in
    8+0 records out
    8 bytes copied, 5,2123e-05 s, 153 kB/s
    
     This happen because __cgroup_procs_start() makes an extra
     extra cgroup_procs_next() call
    
    2) read after lseek beyond end of file generates whole last line.
    3) read after lseek into middle of last line generates
    expected rest of last line and unexpected whole line once again.
    
    Additionally patch removes an extra position index changes in
    __cgroup_procs_start()
    
    Cc: stable@vger.kernel.org
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13be570b96c53d191ca764cce763a0f62578ba5c
Author: Qian Cai <cai@lca.pw>
Date:   Sun Feb 23 22:00:07 2020 -0500

    cgroup: fix psi_show() crash on 32bit ino archs
    
    commit 190ecb190a9cd8c0599d8499b901e3c32e87966a upstream.
    
    Similar to the commit d7495343228f ("cgroup: fix incorrect
    WARN_ON_ONCE() in cgroup_setup_root()"), cgroup_id(root_cgrp) does not
    equal to 1 on 32bit ino archs which triggers all sorts of issues with
    psi_show() on s390x. For example,
    
     BUG: KASAN: slab-out-of-bounds in collect_percpu_times+0x2d0/
     Read of size 4 at addr 000000001e0ce000 by task read_all/3667
     collect_percpu_times+0x2d0/0x798
     psi_show+0x7c/0x2a8
     seq_read+0x2ac/0x830
     vfs_read+0x92/0x150
     ksys_read+0xe2/0x188
     system_call+0xd8/0x2b4
    
    Fix it by using cgroup_ino().
    
    Fixes: 743210386c03 ("cgroup: use cgrp->kn->id as the cgroup ID")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: stable@vger.kernel.org # v5.5
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 914e916e2066117823c6e84f79c592f16cce19e8
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Feb 20 15:34:53 2020 -0800

    net: phy: Avoid multiple suspends
    
    commit 503ba7c6961034ff0047707685644cad9287c226 upstream.
    
    It is currently possible for a PHY device to be suspended as part of a
    network device driver's suspend call while it is still being attached to
    that net_device, either via phy_suspend() or implicitly via phy_stop().
    
    Later on, when the MDIO bus controller get suspended, we would attempt
    to suspend again the PHY because it is still attached to a network
    device.
    
    This is both a waste of time and creates an opportunity for improper
    clock/power management bugs to creep in.
    
    Fixes: 803dd9c77ac3 ("net: phy: avoid suspending twice a PHY")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36afe8b14e893f800e5d138263308e48a1e14e44
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Wed Mar 11 21:02:31 2020 +0100

    net: dsa: mv88e6xxx: Add missing mask of ATU occupancy register
    
    [ Upstream commit 012fc74517b25177dfede2ed45cd108258564e4a ]
    
    Only the bottom 12 bits contain the ATU bin occupancy statistics. The
    upper bits need masking off.
    
    Fixes: e0c69ca7dfbb ("net: dsa: mv88e6xxx: Add ATU occupancy via devlink resources")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 833110c7d72b45f7071d58efbb61f0314ba5ff07
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Wed Mar 11 16:24:24 2020 +0100

    net: dsa: Don't instantiate phylink for CPU/DSA ports unless needed
    
    [ Upstream commit a20f997010c4ec76eaa55b8cc047d76dcac69f70 ]
    
    By default, DSA drivers should configure CPU and DSA ports to their
    maximum speed. In many configurations this is sufficient to make the
    link work.
    
    In some cases it is necessary to configure the link to run slower,
    e.g. because of limitations of the SoC it is connected to. Or back to
    back PHYs are used and the PHY needs to be driven in order to
    establish link. In this case, phylink is used.
    
    Only instantiate phylink if it is required. If there is no PHY, or no
    fixed link properties, phylink can upset a link which works in the
    default configuration.
    
    Fixes: 0e27921816ad ("net: dsa: Use PHYLINK for the CPU/DSA ports")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4bd31aeeaf53c4fdf5ef04384b946d4694dcb3d
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Tue Mar 10 18:38:02 2020 +0100

    s390/qeth: handle error when backing RX buffer
    
    [ Upstream commit 17413852804d7e86e6f0576cca32c1541817800e ]
    
    qeth_init_qdio_queues() fills the RX ring with an initial set of
    RX buffers. If qeth_init_input_buffer() fails to back one of the RX
    buffers with memory, we need to bail out and report the error.
    
    Fixes: 4a71df50047f ("qeth: new qeth device driver")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c02e8c24c5048c74cee0dfdc83b4ac1a6ff712d
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Tue Mar 10 18:38:01 2020 +0100

    s390/qeth: don't reset default_out_queue
    
    [ Upstream commit 240c1948491b81cfe40f84ea040a8f2a4966f101 ]
    
    When an OSA device in prio-queue setup is reduced to 1 TX queue due to
    HW restrictions, we reset its the default_out_queue to 0.
    
    In the old code this was needed so that qeth_get_priority_queue() gets
    the queue selection right. But with proper multiqueue support we already
    reduced dev->real_num_tx_queues to 1, and so the stack puts all traffic
    on txq 0 without even calling .ndo_select_queue.
    
    Thus we can preserve the user's configuration, and apply it if the OSA
    device later re-gains support for multiple TX queues.
    
    Fixes: 73dc2daf110f ("s390/qeth: add TX multiqueue support for OSA devices")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 296f37b5ba49f76f5ec5e66cacf81d3bb037735f
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Tue Mar 3 14:37:36 2020 +0800

    selftests/net/fib_tests: update addr_metric_test for peer route testing
    
    [ Upstream commit 0d29169a708bf730ede287248e429d579f432d1d ]
    
    This patch update {ipv4, ipv6}_addr_metric_test with
    1. Set metric of address with peer route and see if the route added
    correctly.
    2. Modify metric and peer address for peer route and see if the route
    changed correctly.
    
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1357a679d9b74d7e072d555fd2e964c1b1bf48f
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Tue Mar 3 14:37:35 2020 +0800

    net/ipv6: remove the old peer route if change it to a new one
    
    [ Upstream commit d0098e4c6b83e502cc1cd96d67ca86bc79a6c559 ]
    
    When we modify the peer route and changed it to a new one, we should
    remove the old route first. Before the fix:
    
    + ip addr add dev dummy1 2001:db8::1 peer 2001:db8::2
    + ip -6 route show dev dummy1
    2001:db8::1 proto kernel metric 256 pref medium
    2001:db8::2 proto kernel metric 256 pref medium
    + ip addr change dev dummy1 2001:db8::1 peer 2001:db8::3
    + ip -6 route show dev dummy1
    2001:db8::1 proto kernel metric 256 pref medium
    2001:db8::2 proto kernel metric 256 pref medium
    
    After the fix:
    + ip addr change dev dummy1 2001:db8::1 peer 2001:db8::3
    + ip -6 route show dev dummy1
    2001:db8::1 proto kernel metric 256 pref medium
    2001:db8::3 proto kernel metric 256 pref medium
    
    This patch depend on the previous patch "net/ipv6: need update peer route
    when modify metric" to update new peer route after delete old one.
    
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ce257739cbfb31ba175a3503ec46fdeffa57e13
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Tue Mar 3 14:37:34 2020 +0800

    net/ipv6: need update peer route when modify metric
    
    [ Upstream commit 617940123e0140521f3080d2befc2bf55bcda094 ]
    
    When we modify the route metric, the peer address's route need also
    be updated. Before the fix:
    
    + ip addr add dev dummy1 2001:db8::1 peer 2001:db8::2 metric 60
    + ip -6 route show dev dummy1
    2001:db8::1 proto kernel metric 60 pref medium
    2001:db8::2 proto kernel metric 60 pref medium
    + ip addr change dev dummy1 2001:db8::1 peer 2001:db8::2 metric 61
    + ip -6 route show dev dummy1
    2001:db8::1 proto kernel metric 61 pref medium
    2001:db8::2 proto kernel metric 60 pref medium
    
    After the fix:
    + ip addr change dev dummy1 2001:db8::1 peer 2001:db8::2 metric 61
    + ip -6 route show dev dummy1
    2001:db8::1 proto kernel metric 61 pref medium
    2001:db8::2 proto kernel metric 61 pref medium
    
    Fixes: 8308f3ff1753 ("net/ipv6: Add support for specifying metric of connected routes")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 500ac6cd6e8047af74c9187eabb08cd93348aa09
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Mar 12 22:25:20 2020 +0100

    net: phy: fix MDIO bus PM PHY resuming
    
    [ Upstream commit 611d779af7cad2b87487ff58e4931a90c20b113c ]
    
    So far we have the unfortunate situation that mdio_bus_phy_may_suspend()
    is called in suspend AND resume path, assuming that function result is
    the same. After the original change this is no longer the case,
    resulting in broken resume as reported by Geert.
    
    To fix this call mdio_bus_phy_may_suspend() in the suspend path only,
    and let the phy_device store the info whether it was suspended by
    MDIO bus PM.
    
    Fixes: 503ba7c69610 ("net: phy: Avoid multiple suspends")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a214ba7dd48fa862afe343dabd49dee136ccbe7
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sun Mar 1 21:36:09 2020 +0100

    net: phy: avoid clearing PHY interrupts twice in irq handler
    
    [ Upstream commit 249bc9744e165abe74ae326f43e9d70bad54c3b7 ]
    
    On all PHY drivers that implement did_interrupt() reading the interrupt
    status bits clears them. This means we may loose an interrupt that
    is triggered between calling did_interrupt() and phy_clear_interrupt().
    As part of the fix make it a requirement that did_interrupt() clears
    the interrupt.
    
    The Fixes tag refers to the first commit where the patch applies
    cleanly.
    
    Fixes: 49644e68f472 ("net: phy: add callback for custom interrupt handler to struct phy_driver")
    Reported-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aab30c42cad4721634e2a48fe5e2274719d8af51
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:26 2020 -0800

    nfc: add missing attribute validation for vendor subcommand
    
    [ Upstream commit 6ba3da446551f2150fadbf8c7788edcb977683d3 ]
    
    Add missing attribute validation for vendor subcommand attributes
    to the netlink policy.
    
    Fixes: 9e58095f9660 ("NFC: netlink: Implement vendor command support")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 363f746627bdc328846b0716cda349133b7d70ca
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:25 2020 -0800

    nfc: add missing attribute validation for deactivate target
    
    [ Upstream commit 88e706d5168b07df4792dbc3d1bc37b83e4bd74d ]
    
    Add missing attribute validation for NFC_ATTR_TARGET_INDEX
    to the netlink policy.
    
    Fixes: 4d63adfe12dd ("NFC: Add NFC_CMD_DEACTIVATE_TARGET support")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4422a48479c18ffbad3459d2f5382bd065542f79
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:24 2020 -0800

    nfc: add missing attribute validation for SE API
    
    [ Upstream commit 361d23e41ca6e504033f7e66a03b95788377caae ]
    
    Add missing attribute validation for NFC_ATTR_SE_INDEX
    to the netlink policy.
    
    Fixes: 5ce3f32b5264 ("NFC: netlink: SE API implementation")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6b521aa8a4792bc622a19a4fe5d54eda6282b9a
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:23 2020 -0800

    tipc: add missing attribute validation for MTU property
    
    [ Upstream commit 213320a67962ff6e7b83b704d55cbebc341426db ]
    
    Add missing attribute validation for TIPC_NLA_PROP_MTU
    to the netlink policy.
    
    Fixes: 901271e0403a ("tipc: implement configuration of UDP media MTU")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c3b59e7f0867f0153a95e0a6429aeb2dcde8fda
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:22 2020 -0800

    team: add missing attribute validation for array index
    
    [ Upstream commit 669fcd7795900cd1880237cbbb57a7db66cb9ac8 ]
    
    Add missing attribute validation for TEAM_ATTR_OPTION_ARRAY_INDEX
    to the netlink policy.
    
    Fixes: b13033262d24 ("team: introduce array options")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2a346979ab62e5e8fbd2c2bad39d9c1291fd4d8
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:21 2020 -0800

    team: add missing attribute validation for port ifindex
    
    [ Upstream commit dd25cb272ccce4db67dc8509278229099e4f5e99 ]
    
    Add missing attribute validation for TEAM_ATTR_OPTION_PORT_IFINDEX
    to the netlink policy.
    
    Fixes: 80f7c6683fe0 ("team: add support for per-port options")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd9f60f959866a94dc6dfe727ac0fc7660826182
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:20 2020 -0800

    net: taprio: add missing attribute validation for txtime delay
    
    [ Upstream commit e13aaa0643da10006ec35715954e7f92a62899a5 ]
    
    Add missing attribute validation for TCA_TAPRIO_ATTR_TXTIME_DELAY
    to the netlink policy.
    
    Fixes: 4cfd5779bd6e ("taprio: Add support for txtime-assist mode")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10105672bd4d11222759a5b1f718b4d89083032b
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:19 2020 -0800

    net: fq: add missing attribute validation for orphan mask
    
    [ Upstream commit 7e6dc03eeb023e18427a373522f1d247b916a641 ]
    
    Add missing attribute validation for TCA_FQ_ORPHAN_MASK
    to the netlink policy.
    
    Fixes: 06eb395fa985 ("pkt_sched: fq: better control of DDOS traffic")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67a008d0a61ac280d28bfafe72f4925e18c8f1ef
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:18 2020 -0800

    openvswitch: add missing attribute validation for hash
    
    [ Upstream commit b5ab1f1be6180a2e975eede18731804b5164a05d ]
    
    Add missing attribute validation for OVS_PACKET_ATTR_HASH
    to the netlink policy.
    
    Fixes: bd1903b7c459 ("net: openvswitch: add hash info to upcall")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Greg Rose <gvrose8192@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caf313aa0b975b6ff7208117523d03aa42a4889d
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:17 2020 -0800

    macsec: add missing attribute validation for port
    
    [ Upstream commit 31d9a1c524964bac77b7f9d0a1ac140dc6b57461 ]
    
    Add missing attribute validation for IFLA_MACSEC_PORT
    to the netlink policy.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5a51de6c81263882a18c3afa8f62a9d2b5ace7b
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:16 2020 -0800

    can: add missing attribute validation for termination
    
    [ Upstream commit ab02ad660586b94f5d08912a3952b939cf4c4430 ]
    
    Add missing attribute validation for IFLA_CAN_TERMINATION
    to the netlink policy.
    
    Fixes: 12a6075cabc0 ("can: dev: add CAN interface termination API")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6996829d9327d35a6fd1add343ab32c171009647
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:15 2020 -0800

    nl802154: add missing attribute validation for dev_type
    
    [ Upstream commit b60673c4c418bef7550d02faf53c34fbfeb366bf ]
    
    Add missing attribute type validation for IEEE802154_ATTR_DEV_TYPE
    to the netlink policy.
    
    Fixes: 90c049b2c6ae ("ieee802154: interface type to be added")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3bee2dd016f2e4b5f9824a35124416cfccdd765
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:14 2020 -0800

    nl802154: add missing attribute validation
    
    [ Upstream commit 9322cd7c4af2ccc7fe7c5f01adb53f4f77949e92 ]
    
    Add missing attribute validation for several u8 types.
    
    Fixes: 2c21d11518b6 ("net: add NL802154 interface for configuration of 802.15.4 devices")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e960cb0526d68461ad388300aa8d80b97893c974
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:13 2020 -0800

    fib: add missing attribute validation for tun_id
    
    [ Upstream commit 4c16d64ea04056f1b1b324ab6916019f6a064114 ]
    
    Add missing netlink policy entry for FRA_TUN_ID.
    
    Fixes: e7030878fc84 ("fib: Add fib rule match on tunnel id")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ecf0f66ac6617152da7888338c3834a179b3a77
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:12 2020 -0800

    devlink: validate length of region addr/len
    
    [ Upstream commit ff3b63b8c299b73ac599b120653b47e275407656 ]
    
    DEVLINK_ATTR_REGION_CHUNK_ADDR and DEVLINK_ATTR_REGION_CHUNK_LEN
    lack entries in the netlink policy. Corresponding nla_get_u64()s
    may read beyond the end of the message.
    
    Fixes: 4e54795a27f5 ("devlink: Add support for region snapshot read command")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08e42270aa5f21124787f247776a60d23bb57ba4
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:11 2020 -0800

    devlink: validate length of param values
    
    [ Upstream commit 8750939b6ad86abc3f53ec8a9683a1cded4a5654 ]
    
    DEVLINK_ATTR_PARAM_VALUE_DATA may have different types
    so it's not checked by the normal netlink policy. Make
    sure the attribute length is what we expect.
    
    Fixes: e3b7ca18ad7b ("devlink: Add param set command")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15a4ad76485f21aefe221e23360f64be0126324b
Author: Jian Shen <shenjian15@huawei.com>
Date:   Thu Mar 12 15:11:06 2020 +0800

    net: hns3: clear port base VLAN when unload PF
    
    [ Upstream commit 59359fc8a2f7af062777692e6a7aae73483729ec ]
    
    Currently, PF missed to clear the port base VLAN for VF when
    unload. In this case, the VLAN id will remain in the VLAN
    table. This patch fixes it.
    
    Fixes: 92f11ea177cd ("net: hns3: fix set port based VLAN issue for VF")
    Signed-off-by: Jian Shen <shenjian15@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52db97d314aae0c9d10f704ae4cebf5e9f84468d
Author: Jian Shen <shenjian15@huawei.com>
Date:   Thu Mar 12 15:11:05 2020 +0800

    net: hns3: fix RMW issue for VLAN filter switch
    
    [ Upstream commit 903b85d3adce99a5301d5959c4d3c9d14a7974d4 ]
    
    According to the user manual, the ingress and egress VLAN filter
    are configured at the same time. Currently, hclge_init_vlan_config()
    and hclge_set_vlan_spoofchk() will both change the VLAN filter
    switch. So it's necessary to read the old configuration before
    modifying it.
    
    Fixes: 22044f95faa0 ("net: hns3: add support for spoof check setting")
    Signed-off-by: Jian Shen <shenjian15@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit deb003cecab42f81bf860d5ffaf0d2efad376752
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Thu Mar 12 15:11:03 2020 +0800

    net: hns3: fix "tc qdisc del" failed issue
    
    [ Upstream commit 5eb01ddfcfb25e6ebc404a41deae946bde776731 ]
    
    The HNS3 driver supports to configure TC numbers and TC to priority
    map via "tc" tool. But when delete the rule, will fail, because
    the HNS3 driver needs at least one TC, but the "tc" tool sets TC
    number to zero when delete.
    
    This patch makes sure that the TC number is at least one.
    
    Fixes: 30d240dfa2e8 ("net: hns3: Add mqprio hardware offload support in hns3 driver")
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3693a3243ec0b9e3b5881df9809ba39afc865ea
Author: Madalin Bucur <madalin.bucur@nxp.com>
Date:   Wed Mar 4 18:04:28 2020 +0200

    dpaa_eth: FMan erratum A050385 workaround
    
    commit 3c68b8fffb48c0018c24e73c48f2bac768c6203e upstream.
    
    Align buffers, data start, SG fragment length to avoid DMA splits.
    These changes prevent the A050385 erratum to manifest itself:
    
    FMAN DMA read or writes under heavy traffic load may cause FMAN
    internal resource leak; thus stopping further packet processing.
    
    The FMAN internal queue can overflow when FMAN splits single
    read or write transactions into multiple smaller transactions
    such that more than 17 AXI transactions are in flight from FMAN
    to interconnect. When the FMAN internal queue overflows, it can
    stall further packet processing. The issue can occur with any one
    of the following three conditions:
    
      1. FMAN AXI transaction crosses 4K address boundary (Errata
             A010022)
      2. FMAN DMA address for an AXI transaction is not 16 byte
             aligned, i.e. the last 4 bits of an address are non-zero
      3. Scatter Gather (SG) frames have more than one SG buffer in
             the SG list and any one of the buffers, except the last
             buffer in the SG list has data size that is not a multiple
             of 16 bytes, i.e., other than 16, 32, 48, 64, etc.
    
    With any one of the above three conditions present, there is
    likelihood of stalled FMAN packet processing, especially under
    stress with multiple ports injecting line-rate traffic.
    
    To avoid situations that stall FMAN packet processing, all of the
    above three conditions must be avoided; therefore, configure the
    system with the following rules:
    
      1. Frame buffers must not span a 4KB address boundary, unless
             the frame start address is 256 byte aligned
      2. All FMAN DMA start addresses (for example, BMAN buffer
             address, FD[address] + FD[offset]) are 16B aligned
      3. SG table and buffer addresses are 16B aligned and the size
             of SG buffers are multiple of 16 bytes, except for the last
             SG buffer that can be of any size.
    
    Additional workaround notes:
    - Address alignment of 64 bytes is recommended for maximally
    efficient system bus transactions (although 16 byte alignment is
    sufficient to avoid the stall condition)
    - To support frame sizes that are larger than 4K bytes, there are
    two options:
      1. Large single buffer frames that span a 4KB page boundary can
             be converted into SG frames to avoid transaction splits at
             the 4KB boundary,
      2. Align the large single buffer to 256B address boundaries,
             ensure that the frame address plus offset is 256B aligned.
    - If software generated SG frames have buffers that are unaligned
    and with random non-multiple of 16 byte lengths, before
    transmitting such frames via FMAN, frames will need to be copied
    into a new single buffer or multiple buffer SG frame that is
    compliant with the three rules listed above.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47e0813506597fbcf23cf175d6fd9cd38c38f770
Author: Madalin Bucur <madalin.bucur@nxp.com>
Date:   Wed Mar 4 18:04:27 2020 +0200

    fsl/fman: detect FMan erratum A050385
    
    commit b281f7b93b258ce1419043bbd898a29254d5c9c7 upstream.
    
    Detect the presence of the A050385 erratum.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9bf9aabff57a1bdf5d90e61a1e42501cea7d683
Author: Madalin Bucur <madalin.bucur@nxp.com>
Date:   Wed Mar 4 18:04:26 2020 +0200

    arm64: dts: ls1043a: FMan erratum A050385
    
    commit b54d3900862374e1bb2846e6b39d79c896c0b200 upstream.
    
    The LS1043A SoC is affected by the A050385 erratum stating that
    FMAN DMA read or writes under heavy traffic load may cause FMAN
    internal resource leak thus stopping further packet processing.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 699c82d70bd1ed8596cefe880c20d05e619e334a
Author: Madalin Bucur <madalin.bucur@nxp.com>
Date:   Wed Mar 4 18:04:25 2020 +0200

    dt-bindings: net: FMan erratum A050385
    
    commit 26d5bb9e4c4b541c475751e015072eb2cbf70d15 upstream.
    
    FMAN DMA read or writes under heavy traffic load may cause FMAN
    internal resource leak; thus stopping further packet processing.
    
    The FMAN internal queue can overflow when FMAN splits single
    read or write transactions into multiple smaller transactions
    such that more than 17 AXI transactions are in flight from FMAN
    to interconnect. When the FMAN internal queue overflows, it can
    stall further packet processing. The issue can occur with any one
    of the following three conditions:
    
      1. FMAN AXI transaction crosses 4K address boundary (Errata
         A010022)
      2. FMAN DMA address for an AXI transaction is not 16 byte
         aligned, i.e. the last 4 bits of an address are non-zero
      3. Scatter Gather (SG) frames have more than one SG buffer in
         the SG list and any one of the buffers, except the last
         buffer in the SG list has data size that is not a multiple
         of 16 bytes, i.e., other than 16, 32, 48, 64, etc.
    
    With any one of the above three conditions present, there is
    likelihood of stalled FMAN packet processing, especially under
    stress with multiple ports injecting line-rate traffic.
    
    To avoid situations that stall FMAN packet processing, all of the
    above three conditions must be avoided; therefore, configure the
    system with the following rules:
    
      1. Frame buffers must not span a 4KB address boundary, unless
         the frame start address is 256 byte aligned
      2. All FMAN DMA start addresses (for example, BMAN buffer
         address, FD[address] + FD[offset]) are 16B aligned
      3. SG table and buffer addresses are 16B aligned and the size
         of SG buffers are multiple of 16 bytes, except for the last
         SG buffer that can be of any size.
    
    Additional workaround notes:
    - Address alignment of 64 bytes is recommended for maximally
    efficient system bus transactions (although 16 byte alignment is
    sufficient to avoid the stall condition)
    - To support frame sizes that are larger than 4K bytes, there are
    two options:
      1. Large single buffer frames that span a 4KB page boundary can
         be converted into SG frames to avoid transaction splits at
         the 4KB boundary,
      2. Align the large single buffer to 256B address boundaries,
         ensure that the frame address plus offset is 256B aligned.
    - If software generated SG frames have buffers that are unaligned
    and with random non-multiple of 16 byte lengths, before
    transmitting such frames via FMAN, frames will need to be copied
    into a new single buffer or multiple buffer SG frame that is
    compliant with the three rules listed above.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abd3d76e1172f01a222de5420a6a050ef00f74a0
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 11 11:44:26 2020 -0700

    net: memcg: fix lockdep splat in inet_csk_accept()
    
    commit 06669ea346e476a5339033d77ef175566a40efbb upstream.
    
    Locking newsk while still holding the listener lock triggered
    a lockdep splat [1]
    
    We can simply move the memcg code after we release the listener lock,
    as this can also help if multiple threads are sharing a common listener.
    
    Also fix a typo while reading socket sk_rmem_alloc.
    
    [1]
    WARNING: possible recursive locking detected
    5.6.0-rc3-syzkaller #0 Not tainted
    --------------------------------------------
    syz-executor598/9524 is trying to acquire lock:
    ffff88808b5b8b90 (sk_lock-AF_INET6){+.+.}, at: lock_sock include/net/sock.h:1541 [inline]
    ffff88808b5b8b90 (sk_lock-AF_INET6){+.+.}, at: inet_csk_accept+0x69f/0xd30 net/ipv4/inet_connection_sock.c:492
    
    but task is already holding lock:
    ffff88808b5b9590 (sk_lock-AF_INET6){+.+.}, at: lock_sock include/net/sock.h:1541 [inline]
    ffff88808b5b9590 (sk_lock-AF_INET6){+.+.}, at: inet_csk_accept+0x8d/0xd30 net/ipv4/inet_connection_sock.c:445
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(sk_lock-AF_INET6);
      lock(sk_lock-AF_INET6);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    1 lock held by syz-executor598/9524:
     #0: ffff88808b5b9590 (sk_lock-AF_INET6){+.+.}, at: lock_sock include/net/sock.h:1541 [inline]
     #0: ffff88808b5b9590 (sk_lock-AF_INET6){+.+.}, at: inet_csk_accept+0x8d/0xd30 net/ipv4/inet_connection_sock.c:445
    
    stack backtrace:
    CPU: 0 PID: 9524 Comm: syz-executor598 Not tainted 5.6.0-rc3-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     print_deadlock_bug kernel/locking/lockdep.c:2370 [inline]
     check_deadlock kernel/locking/lockdep.c:2411 [inline]
     validate_chain kernel/locking/lockdep.c:2954 [inline]
     __lock_acquire.cold+0x114/0x288 kernel/locking/lockdep.c:3954
     lock_acquire+0x197/0x420 kernel/locking/lockdep.c:4484
     lock_sock_nested+0xc5/0x110 net/core/sock.c:2947
     lock_sock include/net/sock.h:1541 [inline]
     inet_csk_accept+0x69f/0xd30 net/ipv4/inet_connection_sock.c:492
     inet_accept+0xe9/0x7c0 net/ipv4/af_inet.c:734
     __sys_accept4_file+0x3ac/0x5b0 net/socket.c:1758
     __sys_accept4+0x53/0x90 net/socket.c:1809
     __do_sys_accept4 net/socket.c:1821 [inline]
     __se_sys_accept4 net/socket.c:1818 [inline]
     __x64_sys_accept4+0x93/0xf0 net/socket.c:1818
     do_syscall_64+0xf6/0x790 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4445c9
    Code: e8 0c 0d 03 00 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 eb 08 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffc35b37608 EFLAGS: 00000246 ORIG_RAX: 0000000000000120
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00000000004445c9
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 0000000000306777 R09: 0000000000306777
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00000000004053d0 R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: d752a4986532 ("net: memcg: late association of sock to memcg")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fddc57f84d7da531d7cc8093717ec17ddd50a0df
Author: Shakeel Butt <shakeelb@google.com>
Date:   Mon Mar 9 22:16:06 2020 -0700

    net: memcg: late association of sock to memcg
    
    [ Upstream commit d752a4986532cb6305dfd5290a614cde8072769d ]
    
    If a TCP socket is allocated in IRQ context or cloned from unassociated
    (i.e. not associated to a memcg) in IRQ context then it will remain
    unassociated for its whole life. Almost half of the TCPs created on the
    system are created in IRQ context, so, memory used by such sockets will
    not be accounted by the memcg.
    
    This issue is more widespread in cgroup v1 where network memory
    accounting is opt-in but it can happen in cgroup v2 if the source socket
    for the cloning was created in root memcg.
    
    To fix the issue, just do the association of the sockets at the accept()
    time in the process context and then force charge the memory buffer
    already used and reserved by the socket.
    
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48f7246793390c0410d74ec5d273dfc9d75338a1
Author: Shakeel Butt <shakeelb@google.com>
Date:   Mon Mar 9 22:16:05 2020 -0700

    cgroup: memcg: net: do not associate sock with unrelated cgroup
    
    [ Upstream commit e876ecc67db80dfdb8e237f71e5b43bb88ae549c ]
    
    We are testing network memory accounting in our setup and noticed
    inconsistent network memory usage and often unrelated cgroups network
    usage correlates with testing workload. On further inspection, it
    seems like mem_cgroup_sk_alloc() and cgroup_sk_alloc() are broken in
    irq context specially for cgroup v1.
    
    mem_cgroup_sk_alloc() and cgroup_sk_alloc() can be called in irq context
    and kind of assumes that this can only happen from sk_clone_lock()
    and the source sock object has already associated cgroup. However in
    cgroup v1, where network memory accounting is opt-in, the source sock
    can be unassociated with any cgroup and the new cloned sock can get
    associated with unrelated interrupted cgroup.
    
    Cgroup v2 can also suffer if the source sock object was created by
    process in the root cgroup or if sk_alloc() is called in irq context.
    The fix is to just do nothing in interrupt.
    
    WARNING: Please note that about half of the TCP sockets are allocated
    from the IRQ context, so, memory used by such sockets will not be
    accouted by the memcg.
    
    The stack trace of mem_cgroup_sk_alloc() from IRQ-context:
    
    CPU: 70 PID: 12720 Comm: ssh Tainted:  5.6.0-smp-DEV #1
    Hardware name: ...
    Call Trace:
     <IRQ>
     dump_stack+0x57/0x75
     mem_cgroup_sk_alloc+0xe9/0xf0
     sk_clone_lock+0x2a7/0x420
     inet_csk_clone_lock+0x1b/0x110
     tcp_create_openreq_child+0x23/0x3b0
     tcp_v6_syn_recv_sock+0x88/0x730
     tcp_check_req+0x429/0x560
     tcp_v6_rcv+0x72d/0xa40
     ip6_protocol_deliver_rcu+0xc9/0x400
     ip6_input+0x44/0xd0
     ? ip6_protocol_deliver_rcu+0x400/0x400
     ip6_rcv_finish+0x71/0x80
     ipv6_rcv+0x5b/0xe0
     ? ip6_sublist_rcv+0x2e0/0x2e0
     process_backlog+0x108/0x1e0
     net_rx_action+0x26b/0x460
     __do_softirq+0x104/0x2a6
     do_softirq_own_stack+0x2a/0x40
     </IRQ>
     do_softirq.part.19+0x40/0x50
     __local_bh_enable_ip+0x51/0x60
     ip6_finish_output2+0x23d/0x520
     ? ip6table_mangle_hook+0x55/0x160
     __ip6_finish_output+0xa1/0x100
     ip6_finish_output+0x30/0xd0
     ip6_output+0x73/0x120
     ? __ip6_finish_output+0x100/0x100
     ip6_xmit+0x2e3/0x600
     ? ipv6_anycast_cleanup+0x50/0x50
     ? inet6_csk_route_socket+0x136/0x1e0
     ? skb_free_head+0x1e/0x30
     inet6_csk_xmit+0x95/0xf0
     __tcp_transmit_skb+0x5b4/0xb20
     __tcp_send_ack.part.60+0xa3/0x110
     tcp_send_ack+0x1d/0x20
     tcp_rcv_state_process+0xe64/0xe80
     ? tcp_v6_connect+0x5d1/0x5f0
     tcp_v6_do_rcv+0x1b1/0x3f0
     ? tcp_v6_do_rcv+0x1b1/0x3f0
     __release_sock+0x7f/0xd0
     release_sock+0x30/0xa0
     __inet_stream_connect+0x1c3/0x3b0
     ? prepare_to_wait+0xb0/0xb0
     inet_stream_connect+0x3b/0x60
     __sys_connect+0x101/0x120
     ? __sys_getsockopt+0x11b/0x140
     __x64_sys_connect+0x1a/0x20
     do_syscall_64+0x51/0x200
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The stack trace of mem_cgroup_sk_alloc() from IRQ-context:
    Fixes: 2d7580738345 ("mm: memcontrol: consolidate cgroup socket tracking")
    Fixes: d979a39d7242 ("cgroup: duplicate cgroup reference when cloning sockets")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cbcee990995262c43088fbe78d7077470082145
Author: Edwin Peer <edwin.peer@broadcom.com>
Date:   Sun Mar 1 22:07:18 2020 -0500

    bnxt_en: fix error handling when flashing from file
    
    [ Upstream commit 22630e28f9c2b55abd217869cc0696def89f2284 ]
    
    After bnxt_hwrm_do_send_message() was updated to return standard error
    codes in a recent commit, a regression in bnxt_flash_package_from_file()
    was introduced.  The return value does not properly reflect all
    possible firmware errors when calling firmware to flash the package.
    
    Fix it by consolidating all errors in one local variable rc instead
    of having 2 variables for different errors.
    
    Fixes: d4f1420d3656 ("bnxt_en: Convert error code in firmware message response to standard code.")
    Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3802d02eaaaddb72e011deb4dcf4850b33fabc4b
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sun Mar 1 22:07:17 2020 -0500

    bnxt_en: reinitialize IRQs when MTU is modified
    
    [ Upstream commit a9b952d267e59a3b405e644930f46d252cea7122 ]
    
    MTU changes may affect the number of IRQs so we must call
    bnxt_close_nic()/bnxt_open_nic() with the irq_re_init parameter
    set to true.  The reason is that a larger MTU may require
    aggregation rings not needed with smaller MTU.  We may not be
    able to allocate the required number of aggregation rings and
    so we reduce the number of channels which will change the number
    of IRQs.  Without this patch, it may crash eventually in
    pci_disable_msix() when the IRQs are not properly unwound.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 129a8737e1cce6ba6dfb2b4bcf3451831940ad6f
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 4 09:32:16 2020 -0800

    bonding/alb: make sure arp header is pulled before accessing it
    
    commit b7469e83d2add567e4e0b063963db185f3167cea upstream.
    
    Similar to commit 38f88c454042 ("bonding/alb: properly access headers
    in bond_alb_xmit()"), we need to make sure arp header was pulled
    in skb->head before blindly accessing it in rlb_arp_xmit().
    
    Remove arp_pkt() private helper, since it is more readable/obvious
    to have the following construct back to back :
    
            if (!pskb_network_may_pull(skb, sizeof(*arp)))
                    return NULL;
            arp = (struct arp_pkt *)skb_network_header(skb);
    
    syzbot reported :
    
    BUG: KMSAN: uninit-value in bond_slave_has_mac_rx include/net/bonding.h:704 [inline]
    BUG: KMSAN: uninit-value in rlb_arp_xmit drivers/net/bonding/bond_alb.c:662 [inline]
    BUG: KMSAN: uninit-value in bond_alb_xmit+0x575/0x25e0 drivers/net/bonding/bond_alb.c:1477
    CPU: 0 PID: 12743 Comm: syz-executor.4 Not tainted 5.6.0-rc2-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     bond_slave_has_mac_rx include/net/bonding.h:704 [inline]
     rlb_arp_xmit drivers/net/bonding/bond_alb.c:662 [inline]
     bond_alb_xmit+0x575/0x25e0 drivers/net/bonding/bond_alb.c:1477
     __bond_start_xmit drivers/net/bonding/bond_main.c:4257 [inline]
     bond_start_xmit+0x85d/0x2f70 drivers/net/bonding/bond_main.c:4282
     __netdev_start_xmit include/linux/netdevice.h:4524 [inline]
     netdev_start_xmit include/linux/netdevice.h:4538 [inline]
     xmit_one net/core/dev.c:3470 [inline]
     dev_hard_start_xmit+0x531/0xab0 net/core/dev.c:3486
     __dev_queue_xmit+0x37de/0x4220 net/core/dev.c:4063
     dev_queue_xmit+0x4b/0x60 net/core/dev.c:4096
     packet_snd net/packet/af_packet.c:2967 [inline]
     packet_sendmsg+0x8347/0x93b0 net/packet/af_packet.c:2992
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     __sys_sendto+0xc1b/0xc50 net/socket.c:1998
     __do_sys_sendto net/socket.c:2010 [inline]
     __se_sys_sendto+0x107/0x130 net/socket.c:2006
     __x64_sys_sendto+0x6e/0x90 net/socket.c:2006
     do_syscall_64+0xb8/0x160 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45c479
    Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fc77ffbbc78 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00007fc77ffbc6d4 RCX: 000000000045c479
    RDX: 000000000000000e RSI: 00000000200004c0 RDI: 0000000000000003
    RBP: 000000000076bf20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 0000000000000a04 R14: 00000000004cc7b0 R15: 000000000076bf2c
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:144 [inline]
     kmsan_internal_poison_shadow+0x66/0xd0 mm/kmsan/kmsan.c:127
     kmsan_slab_alloc+0x8a/0xe0 mm/kmsan/kmsan_hooks.c:82
     slab_alloc_node mm/slub.c:2793 [inline]
     __kmalloc_node_track_caller+0xb40/0x1200 mm/slub.c:4401
     __kmalloc_reserve net/core/skbuff.c:142 [inline]
     __alloc_skb+0x2fd/0xac0 net/core/skbuff.c:210
     alloc_skb include/linux/skbuff.h:1051 [inline]
     alloc_skb_with_frags+0x18c/0xa70 net/core/skbuff.c:5766
     sock_alloc_send_pskb+0xada/0xc60 net/core/sock.c:2242
     packet_alloc_skb net/packet/af_packet.c:2815 [inline]
     packet_snd net/packet/af_packet.c:2910 [inline]
     packet_sendmsg+0x66a0/0x93b0 net/packet/af_packet.c:2992
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     __sys_sendto+0xc1b/0xc50 net/socket.c:1998
     __do_sys_sendto net/socket.c:2010 [inline]
     __se_sys_sendto+0x107/0x130 net/socket.c:2006
     __x64_sys_sendto+0x6e/0x90 net/socket.c:2006
     do_syscall_64+0xb8/0x160 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac3fe63efe935659c8d42ea58a41472cdf7ad46b
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Mon Mar 9 10:39:53 2020 -0700

    taprio: Fix sending packets without dequeueing them
    
    [ Upstream commit b09fe70ef520e011ba4a64f4b93f948a8f14717b ]
    
    There was a bug that was causing packets to be sent to the driver
    without first calling dequeue() on the "child" qdisc. And the KASAN
    report below shows that sending a packet without calling dequeue()
    leads to bad results.
    
    The problem is that when checking the last qdisc "child" we do not set
    the returned skb to NULL, which can cause it to be sent to the driver,
    and so after the skb is sent, it may be freed, and in some situations a
    reference to it may still be in the child qdisc, because it was never
    dequeued.
    
    The crash log looks like this:
    
    [   19.937538] ==================================================================
    [   19.938300] BUG: KASAN: use-after-free in taprio_dequeue_soft+0x620/0x780
    [   19.938968] Read of size 4 at addr ffff8881128628cc by task swapper/1/0
    [   19.939612]
    [   19.939772] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.6.0-rc3+ #97
    [   19.940397] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qe4
    [   19.941523] Call Trace:
    [   19.941774]  <IRQ>
    [   19.941985]  dump_stack+0x97/0xe0
    [   19.942323]  print_address_description.constprop.0+0x3b/0x60
    [   19.942884]  ? taprio_dequeue_soft+0x620/0x780
    [   19.943325]  ? taprio_dequeue_soft+0x620/0x780
    [   19.943767]  __kasan_report.cold+0x1a/0x32
    [   19.944173]  ? taprio_dequeue_soft+0x620/0x780
    [   19.944612]  kasan_report+0xe/0x20
    [   19.944954]  taprio_dequeue_soft+0x620/0x780
    [   19.945380]  __qdisc_run+0x164/0x18d0
    [   19.945749]  net_tx_action+0x2c4/0x730
    [   19.946124]  __do_softirq+0x268/0x7bc
    [   19.946491]  irq_exit+0x17d/0x1b0
    [   19.946824]  smp_apic_timer_interrupt+0xeb/0x380
    [   19.947280]  apic_timer_interrupt+0xf/0x20
    [   19.947687]  </IRQ>
    [   19.947912] RIP: 0010:default_idle+0x2d/0x2d0
    [   19.948345] Code: 00 00 41 56 41 55 65 44 8b 2d 3f 8d 7c 7c 41 54 55 53 0f 1f 44 00 00 e8 b1 b2 c5 fd e9 07 00 3
    [   19.950166] RSP: 0018:ffff88811a3efda0 EFLAGS: 00000282 ORIG_RAX: ffffffffffffff13
    [   19.950909] RAX: 0000000080000000 RBX: ffff88811a3a9600 RCX: ffffffff8385327e
    [   19.951608] RDX: 1ffff110234752c0 RSI: 0000000000000000 RDI: ffffffff8385262f
    [   19.952309] RBP: ffffed10234752c0 R08: 0000000000000001 R09: ffffed10234752c1
    [   19.953009] R10: ffffed10234752c0 R11: ffff88811a3a9607 R12: 0000000000000001
    [   19.953709] R13: 0000000000000001 R14: 0000000000000000 R15: 0000000000000000
    [   19.954408]  ? default_idle_call+0x2e/0x70
    [   19.954816]  ? default_idle+0x1f/0x2d0
    [   19.955192]  default_idle_call+0x5e/0x70
    [   19.955584]  do_idle+0x3d4/0x500
    [   19.955909]  ? arch_cpu_idle_exit+0x40/0x40
    [   19.956325]  ? _raw_spin_unlock_irqrestore+0x23/0x30
    [   19.956829]  ? trace_hardirqs_on+0x30/0x160
    [   19.957242]  cpu_startup_entry+0x19/0x20
    [   19.957633]  start_secondary+0x2a6/0x380
    [   19.958026]  ? set_cpu_sibling_map+0x18b0/0x18b0
    [   19.958486]  secondary_startup_64+0xa4/0xb0
    [   19.958921]
    [   19.959078] Allocated by task 33:
    [   19.959412]  save_stack+0x1b/0x80
    [   19.959747]  __kasan_kmalloc.constprop.0+0xc2/0xd0
    [   19.960222]  kmem_cache_alloc+0xe4/0x230
    [   19.960617]  __alloc_skb+0x91/0x510
    [   19.960967]  ndisc_alloc_skb+0x133/0x330
    [   19.961358]  ndisc_send_ns+0x134/0x810
    [   19.961735]  addrconf_dad_work+0xad5/0xf80
    [   19.962144]  process_one_work+0x78e/0x13a0
    [   19.962551]  worker_thread+0x8f/0xfa0
    [   19.962919]  kthread+0x2ba/0x3b0
    [   19.963242]  ret_from_fork+0x3a/0x50
    [   19.963596]
    [   19.963753] Freed by task 33:
    [   19.964055]  save_stack+0x1b/0x80
    [   19.964386]  __kasan_slab_free+0x12f/0x180
    [   19.964830]  kmem_cache_free+0x80/0x290
    [   19.965231]  ip6_mc_input+0x38a/0x4d0
    [   19.965617]  ipv6_rcv+0x1a4/0x1d0
    [   19.965948]  __netif_receive_skb_one_core+0xf2/0x180
    [   19.966437]  netif_receive_skb+0x8c/0x3c0
    [   19.966846]  br_handle_frame_finish+0x779/0x1310
    [   19.967302]  br_handle_frame+0x42a/0x830
    [   19.967694]  __netif_receive_skb_core+0xf0e/0x2a90
    [   19.968167]  __netif_receive_skb_one_core+0x96/0x180
    [   19.968658]  process_backlog+0x198/0x650
    [   19.969047]  net_rx_action+0x2fa/0xaa0
    [   19.969420]  __do_softirq+0x268/0x7bc
    [   19.969785]
    [   19.969940] The buggy address belongs to the object at ffff888112862840
    [   19.969940]  which belongs to the cache skbuff_head_cache of size 224
    [   19.971202] The buggy address is located 140 bytes inside of
    [   19.971202]  224-byte region [ffff888112862840, ffff888112862920)
    [   19.972344] The buggy address belongs to the page:
    [   19.972820] page:ffffea00044a1800 refcount:1 mapcount:0 mapping:ffff88811a2bd1c0 index:0xffff8881128625c0 compo0
    [   19.973930] flags: 0x8000000000010200(slab|head)
    [   19.974388] raw: 8000000000010200 ffff88811a2ed650 ffff88811a2ed650 ffff88811a2bd1c0
    [   19.975151] raw: ffff8881128625c0 0000000000190013 00000001ffffffff 0000000000000000
    [   19.975915] page dumped because: kasan: bad access detected
    [   19.976461] page_owner tracks the page as allocated
    [   19.976946] page last allocated via order 2, migratetype Unmovable, gfp_mask 0xd20c0(__GFP_IO|__GFP_FS|__GFP_NO)
    [   19.978332]  prep_new_page+0x24b/0x330
    [   19.978707]  get_page_from_freelist+0x2057/0x2c90
    [   19.979170]  __alloc_pages_nodemask+0x218/0x590
    [   19.979619]  new_slab+0x9d/0x300
    [   19.979948]  ___slab_alloc.constprop.0+0x2f9/0x6f0
    [   19.980421]  __slab_alloc.constprop.0+0x30/0x60
    [   19.980870]  kmem_cache_alloc+0x201/0x230
    [   19.981269]  __alloc_skb+0x91/0x510
    [   19.981620]  alloc_skb_with_frags+0x78/0x4a0
    [   19.982043]  sock_alloc_send_pskb+0x5eb/0x750
    [   19.982476]  unix_stream_sendmsg+0x399/0x7f0
    [   19.982904]  sock_sendmsg+0xe2/0x110
    [   19.983262]  ____sys_sendmsg+0x4de/0x6d0
    [   19.983660]  ___sys_sendmsg+0xe4/0x160
    [   19.984032]  __sys_sendmsg+0xab/0x130
    [   19.984396]  do_syscall_64+0xe7/0xae0
    [   19.984761] page last free stack trace:
    [   19.985142]  __free_pages_ok+0x432/0xbc0
    [   19.985533]  qlist_free_all+0x56/0xc0
    [   19.985907]  quarantine_reduce+0x149/0x170
    [   19.986315]  __kasan_kmalloc.constprop.0+0x9e/0xd0
    [   19.986791]  kmem_cache_alloc+0xe4/0x230
    [   19.987182]  prepare_creds+0x24/0x440
    [   19.987548]  do_faccessat+0x80/0x590
    [   19.987906]  do_syscall_64+0xe7/0xae0
    [   19.988276]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   19.988775]
    [   19.988930] Memory state around the buggy address:
    [   19.989402]  ffff888112862780: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   19.990111]  ffff888112862800: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    [   19.990822] >ffff888112862880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   19.991529]                                               ^
    [   19.992081]  ffff888112862900: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
    [   19.992796]  ffff888112862980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    
    Fixes: 5a781ccbd19e ("tc: Add support for configuring the taprio scheduler")
    Reported-by: Michael Schmidt <michael.schmidt@eti.uni-siegen.de>
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Acked-by: Andre Guedes <andre.guedes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7130e838c1dcf414fdba7a65fc0aab35bc5cf92
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 4 15:51:43 2020 -0800

    slip: make slhc_compress() more robust against malicious packets
    
    [ Upstream commit 110a40dfb708fe940a3f3704d470e431c368d256 ]
    
    Before accessing various fields in IPV4 network header
    and TCP header, make sure the packet :
    
    - Has IP version 4 (ip->version == 4)
    - Has not a silly network length (ip->ihl >= 5)
    - Is big enough to hold network and transport headers
    - Has not a silly TCP header size (th->doff >= sizeof(struct tcphdr) / 4)
    
    syzbot reported :
    
    BUG: KMSAN: uninit-value in slhc_compress+0x5b9/0x2e60 drivers/net/slip/slhc.c:270
    CPU: 0 PID: 11728 Comm: syz-executor231 Not tainted 5.6.0-rc2-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     slhc_compress+0x5b9/0x2e60 drivers/net/slip/slhc.c:270
     ppp_send_frame drivers/net/ppp/ppp_generic.c:1637 [inline]
     __ppp_xmit_process+0x1902/0x2970 drivers/net/ppp/ppp_generic.c:1495
     ppp_xmit_process+0x147/0x2f0 drivers/net/ppp/ppp_generic.c:1516
     ppp_write+0x6bb/0x790 drivers/net/ppp/ppp_generic.c:512
     do_loop_readv_writev fs/read_write.c:717 [inline]
     do_iter_write+0x812/0xdc0 fs/read_write.c:1000
     compat_writev+0x2df/0x5a0 fs/read_write.c:1351
     do_compat_pwritev64 fs/read_write.c:1400 [inline]
     __do_compat_sys_pwritev fs/read_write.c:1420 [inline]
     __se_compat_sys_pwritev fs/read_write.c:1414 [inline]
     __ia32_compat_sys_pwritev+0x349/0x3f0 fs/read_write.c:1414
     do_syscall_32_irqs_on arch/x86/entry/common.c:339 [inline]
     do_fast_syscall_32+0x3c7/0x6e0 arch/x86/entry/common.c:410
     entry_SYSENTER_compat+0x68/0x77 arch/x86/entry/entry_64_compat.S:139
    RIP: 0023:0xf7f7cd99
    Code: 90 e8 0b 00 00 00 f3 90 0f ae e8 eb f9 8d 74 26 00 89 3c 24 c3 90 90 90 90 90 90 90 90 90 90 90 90 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 eb 0d 90 90 90 90 90 90 90 90 90 90 90 90
    RSP: 002b:00000000ffdb84ac EFLAGS: 00000217 ORIG_RAX: 000000000000014e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00000000200001c0
    RDX: 0000000000000001 RSI: 0000000000000000 RDI: 0000000000000003
    RBP: 0000000040047459 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:144 [inline]
     kmsan_internal_poison_shadow+0x66/0xd0 mm/kmsan/kmsan.c:127
     kmsan_slab_alloc+0x8a/0xe0 mm/kmsan/kmsan_hooks.c:82
     slab_alloc_node mm/slub.c:2793 [inline]
     __kmalloc_node_track_caller+0xb40/0x1200 mm/slub.c:4401
     __kmalloc_reserve net/core/skbuff.c:142 [inline]
     __alloc_skb+0x2fd/0xac0 net/core/skbuff.c:210
     alloc_skb include/linux/skbuff.h:1051 [inline]
     ppp_write+0x115/0x790 drivers/net/ppp/ppp_generic.c:500
     do_loop_readv_writev fs/read_write.c:717 [inline]
     do_iter_write+0x812/0xdc0 fs/read_write.c:1000
     compat_writev+0x2df/0x5a0 fs/read_write.c:1351
     do_compat_pwritev64 fs/read_write.c:1400 [inline]
     __do_compat_sys_pwritev fs/read_write.c:1420 [inline]
     __se_compat_sys_pwritev fs/read_write.c:1414 [inline]
     __ia32_compat_sys_pwritev+0x349/0x3f0 fs/read_write.c:1414
     do_syscall_32_irqs_on arch/x86/entry/common.c:339 [inline]
     do_fast_syscall_32+0x3c7/0x6e0 arch/x86/entry/common.c:410
     entry_SYSENTER_compat+0x68/0x77 arch/x86/entry/entry_64_compat.S:139
    
    Fixes: b5451d783ade ("slip: Move the SLIP drivers")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6cf2131afebbec918fb503c844d43a7a7f6a9d2
Author: Edward Cree <ecree@solarflare.com>
Date:   Mon Mar 9 18:16:24 2020 +0000

    sfc: detach from cb_page in efx_copy_channel()
    
    [ Upstream commit 4b1bd9db078f7d5332c8601a2f5bd43cf0458fd4 ]
    
    It's a resource, not a parameter, so we can't copy it into the new
     channel's TX queues, otherwise aliasing will lead to resource-
     management bugs if the channel is subsequently torn down without
     being initialised.
    
    Before the Fixes:-tagged commit there was a similar bug with
     tsoh_page, but I'm not sure it's worth doing another fix for such
     old kernels.
    
    Fixes: e9117e5099ea ("sfc: Firmware-Assisted TSO version 2")
    Suggested-by: Derek Shute <Derek.Shute@stratus.com>
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a524fd6728302b7563e8e0484de1f16264b4a6b8
Author: You-Sheng Yang <vicamo.yang@canonical.com>
Date:   Wed Feb 26 23:37:10 2020 +0800

    r8152: check disconnect status after long sleep
    
    [ Upstream commit d64c7a08034b32c285e576208ae44fc3ba3fa7df ]
    
    Dell USB Type C docking WD19/WD19DC attaches additional peripherals as:
    
      /: Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/6p, 5000M
          |__ Port 1: Dev 11, If 0, Class=Hub, Driver=hub/4p, 5000M
              |__ Port 3: Dev 12, If 0, Class=Hub, Driver=hub/4p, 5000M
              |__ Port 4: Dev 13, If 0, Class=Vendor Specific Class,
                  Driver=r8152, 5000M
    
    where usb 2-1-3 is a hub connecting all USB Type-A/C ports on the dock.
    
    When hotplugging such dock with additional usb devices already attached on
    it, the probing process may reset usb 2.1 port, therefore r8152 ethernet
    device is also reset. However, during r8152 device init there are several
    for-loops that, when it's unable to retrieve hardware registers due to
    being disconnected from USB, may take up to 14 seconds each in practice,
    and that has to be completed before USB may re-enumerate devices on the
    bus. As a result, devices attached to the dock will only be available
    after nearly 1 minute after the dock was plugged in:
    
      [ 216.388290] [250] r8152 2-1.4:1.0: usb_probe_interface
      [ 216.388292] [250] r8152 2-1.4:1.0: usb_probe_interface - got id
      [ 258.830410] r8152 2-1.4:1.0 (unnamed net_device) (uninitialized): PHY not ready
      [ 258.830460] r8152 2-1.4:1.0 (unnamed net_device) (uninitialized): Invalid header when reading pass-thru MAC addr
      [ 258.830464] r8152 2-1.4:1.0 (unnamed net_device) (uninitialized): Get ether addr fail
    
    This happens in, for example, r8153_init:
    
      static int generic_ocp_read(struct r8152 *tp, u16 index, u16 size,
                                void *data, u16 type)
      {
        if (test_bit(RTL8152_UNPLUG, &tp->flags))
          return -ENODEV;
        ...
      }
    
      static u16 ocp_read_word(struct r8152 *tp, u16 type, u16 index)
      {
        u32 data;
        ...
        generic_ocp_read(tp, index, sizeof(tmp), &tmp, type | byen);
    
        data = __le32_to_cpu(tmp);
        ...
        return (u16)data;
      }
    
      static void r8153_init(struct r8152 *tp)
      {
        ...
        if (test_bit(RTL8152_UNPLUG, &tp->flags))
          return;
    
        for (i = 0; i < 500; i++) {
          if (ocp_read_word(tp, MCU_TYPE_PLA, PLA_BOOT_CTRL) &
              AUTOLOAD_DONE)
            break;
          msleep(20);
        }
        ...
      }
    
    Since ocp_read_word() doesn't check the return status of
    generic_ocp_read(), and the only exit condition for the loop is to have
    a match in the returned value, such loops will only ends after exceeding
    its maximum runs when the device has been marked as disconnected, which
    takes 500 * 20ms = 10 seconds in theory, 14 in practice.
    
    To solve this long latency another test to RTL8152_UNPLUG flag should be
    added after those 20ms sleep to skip unnecessary loops, so that the device
    probe can complete early and proceed to parent port reset/reprobe process.
    
    This can be reproduced on all kernel versions up to latest v5.6-rc2, but
    after v5.5-rc7 the reproduce rate is dramatically lowered to 1/30 or less
    while it was around 1/2.
    
    Signed-off-by: You-Sheng Yang <vicamo.yang@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0010beac70d4fbfe930065270fd63c30edaeff95
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Mar 12 15:04:30 2020 +0000

    net: systemport: fix index check to avoid an array out of bounds access
    
    [ Upstream commit c0368595c1639947839c0db8294ee96aca0b3b86 ]
    
    Currently the bounds check on index is off by one and can lead to
    an out of bounds access on array priv->filters_loc when index is
    RXCHK_BRCM_TAG_MAX.
    
    Fixes: bb9051a2b230 ("net: systemport: Add support for WAKE_FILTER")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21a33a4a2c142eee369943e9b2db546746bfe813
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Sun Mar 8 10:25:56 2020 +0100

    net: stmmac: dwmac1000: Disable ACS if enhanced descs are not used
    
    [ Upstream commit b723bd933980f4956dabc8a8d84b3e83be8d094c ]
    
    ACS (auto PAD/FCS stripping) removes FCS off 802.3 packets (LLC) so that
    there is no need to manually strip it for such packets. The enhanced DMA
    descriptors allow to flag LLC packets so that the receiving callback can
    use that to strip FCS manually or not. On the other hand, normal
    descriptors do not support that.
    
    Thus in order to not truncate LLC packet ACS should be disabled when
    using normal DMA descriptors.
    
    Fixes: 47dd7a540b8a0 ("net: add support for STMicroelectronics Ethernet controllers.")
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 941aeb6e93544be1d23f22c88fe885da27130d8f
Author: Karsten Graul <kgraul@linux.ibm.com>
Date:   Tue Mar 10 09:33:30 2020 +0100

    net/smc: cancel event worker during device removal
    
    [ Upstream commit ece0d7bd74615773268475b6b64d6f1ebbd4b4c6 ]
    
    During IB device removal, cancel the event worker before the device
    structure is freed.
    
    Fixes: a4cf0443c414 ("smc: introduce SMC as an IB-client")
    Reported-by: syzbot+b297c6825752e7a07272@syzkaller.appspotmail.com
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab00b888b66b53efbb2bc56e48f5643dd2ed9ce9
Author: Jonas Gorski <jonas.gorski@gmail.com>
Date:   Mon Mar 2 20:46:57 2020 +0100

    net: phy: bcm63xx: fix OOPS due to missing driver name
    
    [ Upstream commit 43de81b0601df7d7988d3f5617ee0987df65c883 ]
    
    719655a14971 ("net: phy: Replace phy driver features u32 with link_mode
    bitmap") was a bit over-eager and also removed the second phy driver's
    name, resulting in a nasty OOPS on registration:
    
    [    1.319854] CPU 0 Unable to handle kernel paging request at virtual address 00000000, epc == 804dd50c, ra == 804dd4f0
    [    1.330859] Oops[#1]:
    [    1.333138] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.4.22 #0
    [    1.339217] $ 0   : 00000000 00000001 87ca7f00 805c1874
    [    1.344590] $ 4   : 00000000 00000047 00585000 8701f800
    [    1.349965] $ 8   : 8701f800 804f4a5c 00000003 64726976
    [    1.355341] $12   : 00000001 00000000 00000000 00000114
    [    1.360718] $16   : 87ca7f80 00000000 00000000 80639fe4
    [    1.366093] $20   : 00000002 00000000 806441d0 80b90000
    [    1.371470] $24   : 00000000 00000000
    [    1.376847] $28   : 87c1e000 87c1fda0 80b90000 804dd4f0
    [    1.382224] Hi    : d1c8f8da
    [    1.385180] Lo    : 5518a480
    [    1.388182] epc   : 804dd50c kset_find_obj+0x3c/0x114
    [    1.393345] ra    : 804dd4f0 kset_find_obj+0x20/0x114
    [    1.398530] Status: 10008703 KERNEL EXL IE
    [    1.402833] Cause : 00800008 (ExcCode 02)
    [    1.406952] BadVA : 00000000
    [    1.409913] PrId  : 0002a075 (Broadcom BMIPS4350)
    [    1.414745] Modules linked in:
    [    1.417895] Process swapper/0 (pid: 1, threadinfo=(ptrval), task=(ptrval), tls=00000000)
    [    1.426214] Stack : 87cec000 80630000 80639370 80640658 80640000 80049af4 80639fe4 8063a0d8
    [    1.434816]         8063a0d8 802ef078 00000002 00000000 806441d0 80b90000 8063a0d8 802ef114
    [    1.443417]         87cea0de 87c1fde0 00000000 804de488 87cea000 8063a0d8 8063a0d8 80334e48
    [    1.452018]         80640000 8063984c 80639bf4 00000000 8065de48 00000001 8063a0d8 80334ed0
    [    1.460620]         806441d0 80b90000 80b90000 802ef164 8065dd70 80620000 80b90000 8065de58
    [    1.469222]         ...
    [    1.471734] Call Trace:
    [    1.474255] [<804dd50c>] kset_find_obj+0x3c/0x114
    [    1.479141] [<802ef078>] driver_find+0x1c/0x44
    [    1.483665] [<802ef114>] driver_register+0x74/0x148
    [    1.488719] [<80334e48>] phy_driver_register+0x9c/0xd0
    [    1.493968] [<80334ed0>] phy_drivers_register+0x54/0xe8
    [    1.499345] [<8001061c>] do_one_initcall+0x7c/0x1f4
    [    1.504374] [<80644ed8>] kernel_init_freeable+0x1d4/0x2b4
    [    1.509940] [<804f4e24>] kernel_init+0x10/0xf8
    [    1.514502] [<80018e68>] ret_from_kernel_thread+0x14/0x1c
    [    1.520040] Code: 1060000c  02202025  90650000 <90810000> 24630001  14250004  24840001  14a0fffb  90650000
    [    1.530061]
    [    1.531698] ---[ end trace d52f1717cd29bdc8 ]---
    
    Fix it by readding the name.
    
    Fixes: 719655a14971 ("net: phy: Replace phy driver features u32 with link_mode bitmap")
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c951b4f2d688a0de433f9ffb2742be2a1981fe9
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Mar 9 11:34:35 2020 -0400

    net/packet: tpacket_rcv: do not increment ring index on drop
    
    [ Upstream commit 46e4c421a053c36bf7a33dda2272481bcaf3eed3 ]
    
    In one error case, tpacket_rcv drops packets after incrementing the
    ring producer index.
    
    If this happens, it does not update tp_status to TP_STATUS_USER and
    thus the reader is stalled for an iteration of the ring, causing out
    of order arrival.
    
    The only such error path is when virtio_net_hdr_from_skb fails due
    to encountering an unknown GSO type.
    
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71f15f769e0cdbcbe9b3c086d105495310642791
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    [ Upstream commit a3aefbfe45751bf7b338c181b97608e276b5bb73 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc2eb5f583124cacafcb95dfe2e65a7892e1814b
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Mar 10 03:28:18 2020 +0200

    net: mscc: ocelot: properly account for VLAN header length when setting MRU
    
    [ Upstream commit a8015ded89ad740d21355470d41879c5bd82aab7 ]
    
    What the driver writes into MAC_MAXLEN_CFG does not actually represent
    VLAN_ETH_FRAME_LEN but instead ETH_FRAME_LEN + ETH_FCS_LEN. Yes they are
    numerically equal, but the difference is important, as the switch treats
    VLAN-tagged traffic specially and knows to increase the maximum accepted
    frame size automatically. So it is always wrong to account for VLAN in
    the MAC_MAXLEN_CFG register.
    
    Unconditionally increase the maximum allowed frame size for
    double-tagged traffic. Accounting for the additional length does not
    mean that the other VLAN membership checks aren't performed, so there's
    no harm done.
    
    Also, stop abusing the MTU name for configuring the MRU. There is no
    support for configuring the MRU on an interface at the moment.
    
    Fixes: a556c76adc05 ("net: mscc: Add initial Ocelot switch support")
    Fixes: fa914e9c4d94 ("net: mscc: ocelot: create a helper for changing the port MTU")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a653b2223367700a3de062ebc07d455247a6204d
Author: Dmitry Bogdanov <dbogdanov@marvell.com>
Date:   Tue Mar 10 18:22:24 2020 +0300

    net: macsec: update SCI upon MAC address change.
    
    [ Upstream commit 6fc498bc82929ee23aa2f35a828c6178dfd3f823 ]
    
    SCI should be updated, because it contains MAC in its first 6 octets.
    
    Fixes: c09440f7dcb3 ("macsec: introduce IEEE 802.1AE driver")
    Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
    Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a78f10e28053ba6033971721fdc7d771feb1bfe
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Feb 26 19:47:34 2020 +0100

    netlink: Use netlink header as base to calculate bad attribute offset
    
    [ Upstream commit 84b3268027641401bb8ad4427a90a3cce2eb86f5 ]
    
    Userspace might send a batch that is composed of several netlink
    messages. The netlink_ack() function must use the pointer to the netlink
    header as base to calculate the bad attribute offset.
    
    Fixes: 2d4bc93368f5 ("netlink: extended ACK reporting")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cd130bca3d22b2b87d1e83250fe2c8ec67d9503
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Sat Feb 29 17:27:13 2020 +0800

    net/ipv6: use configured metric when add peer route
    
    [ Upstream commit 07758eb9ff52794fba15d03aa88d92dbd1b7d125 ]
    
    When we add peer address with metric configured, IPv4 could set the dest
    metric correctly, but IPv6 do not. e.g.
    
    ]# ip addr add 192.0.2.1 peer 192.0.2.2/32 dev eth1 metric 20
    ]# ip route show dev eth1
    192.0.2.2 proto kernel scope link src 192.0.2.1 metric 20
    ]# ip addr add 2001:db8::1 peer 2001:db8::2/128 dev eth1 metric 20
    ]# ip -6 route show dev eth1
    2001:db8::1 proto kernel metric 20 pref medium
    2001:db8::2 proto kernel metric 256 pref medium
    
    Fix this by using configured metric instead of default one.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Fixes: 8308f3ff1753 ("net/ipv6: Add support for specifying metric of connected routes")
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28eacc01e817c28accd09d77dd580af6fdf94760
Author: Jian Shen <shenjian15@huawei.com>
Date:   Thu Mar 5 09:47:53 2020 +0800

    net: hns3: fix a not link up issue when fibre port supports autoneg
    
    [ Upstream commit 68e1006f618e509fc7869259fe83ceec4a95dac3 ]
    
    When fibre port supports auto-negotiation, the IMP(Intelligent
    Management Process) processes the speed of auto-negotiation
    and the  user's speed separately.
    For below case, the port will get a not link up problem.
    step 1: disables auto-negotiation and sets speed to A, then
    the driver's MAC speed will be updated to A.
    step 2: enables auto-negotiation and MAC gets negotiated
    speed B, then the driver's MAC speed will be updated to B
    through querying in periodical task.
    step 3: MAC gets new negotiated speed A.
    step 4: disables auto-negotiation and sets speed to B before
    periodical task query new MAC speed A, the driver will  ignore
    the speed configuration.
    
    This patch fixes it by skipping speed and duplex checking when
    fibre port supports auto-negotiation.
    
    Fixes: 22f48e24a23d ("net: hns3: add autoneg and change speed support for fibre port")
    Signed-off-by: Jian Shen <shenjian15@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a394ca66aaa858f67b817f72d60daf42815c7f0a
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Mar 10 20:36:16 2020 -0700

    net: fec: validate the new settings in fec_enet_set_coalesce()
    
    [ Upstream commit ab14961d10d02d20767612c78ce148f6eb85bd58 ]
    
    fec_enet_set_coalesce() validates the previously set params
    and if they are within range proceeds to apply the new ones.
    The new ones, however, are not validated. This seems backwards,
    probably a copy-paste error?
    
    Compile tested only.
    
    Fixes: d851b47b22fc ("net: fec: add interrupt coalescence feature support")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 405f31f2e773f4601e505681c575cebaf1bcf4f6
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Fri Feb 28 19:39:41 2020 +0000

    net: dsa: mv88e6xxx: fix lockup on warm boot
    
    [ Upstream commit 0395823b8d9a4d87bd1bf74359123461c2ae801b ]
    
    If the switch is not hardware reset on a warm boot, interrupts can be
    left enabled, and possibly pending. This will cause us to enter an
    infinite loop trying to service an interrupt we are unable to handle,
    thereby preventing the kernel from booting.
    
    Ensure that the global 2 interrupt sources are disabled before we claim
    the parent interrupt.
    
    Observed on the ZII development revision B and C platforms with
    reworked serdes support, and using reboot -f to reboot the platform.
    
    Fixes: dc30c35be720 ("net: dsa: mv88e6xxx: Implement interrupt support.")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5094cd2f4a5d494c0c67f92dad2c167054d74910
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue Mar 3 15:01:46 2020 +0000

    net: dsa: fix phylink_start()/phylink_stop() calls
    
    [ Upstream commit 8640f8dc6d657ebfb4e67c202ad32c5457858a13 ]
    
    Place phylink_start()/phylink_stop() inside dsa_port_enable() and
    dsa_port_disable(), which ensures that we call phylink_stop() before
    tearing down phylink - which is a documented requirement.  Failure
    to do so can cause use-after-free bugs.
    
    Fixes: 0e27921816ad ("net: dsa: Use PHYLINK for the CPU/DSA ports")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c1c9950fbd3d8853ece44ba84d0ed88e1be1276
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Mon Mar 9 15:57:07 2020 -0700

    macvlan: add cond_resched() during multicast processing
    
    [ Upstream commit ce9a4186f9ac475c415ffd20348176a4ea366670 ]
    
    The Rx bound multicast packets are deferred to a workqueue and
    macvlan can also suffer from the same attack that was discovered
    by Syzbot for IPvlan. This solution is not as effective as in
    IPvlan. IPvlan defers all (Tx and Rx) multicast packet processing
    to a workqueue while macvlan does this way only for the Rx. This
    fix should address the Rx codition to certain extent.
    
    Tx is still suseptible. Tx multicast processing happens when
    .ndo_start_xmit is called, hence we cannot add cond_resched().
    However, it's not that severe since the user which is generating
     / flooding will be affected the most.
    
    Fixes: 412ca1550cbe ("macvlan: Move broadcasts into a work queue")
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f48b35b0d71e6c6ebf4e27c558c6fae33083a6c5
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Mon Mar 9 15:56:56 2020 -0700

    ipvlan: don't deref eth hdr before checking it's set
    
    [ Upstream commit ad8192767c9f9cf97da57b9ffcea70fb100febef ]
    
    IPvlan in L3 mode discards outbound multicast packets but performs
    the check before ensuring the ether-header is set or not. This is
    an error that Eric found through code browsing.
    
    Fixes: 2ad7bf363841 (âipvlan: Initial check-in of the IPVLAN driver.â)
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a217be5ae614c4603ff8871ce29dd565139cc3c3
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 9 18:22:58 2020 -0700

    ipvlan: do not use cond_resched_rcu() in ipvlan_process_multicast()
    
    [ Upstream commit afe207d80a61e4d6e7cfa0611a4af46d0ba95628 ]
    
    Commit e18b353f102e ("ipvlan: add cond_resched_rcu() while
    processing muticast backlog") added a cond_resched_rcu() in a loop
    using rcu protection to iterate over slaves.
    
    This is breaking rcu rules, so lets instead use cond_resched()
    at a point we can reschedule
    
    Fixes: e18b353f102e ("ipvlan: add cond_resched_rcu() while processing muticast backlog")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65ec3ca5369b6f5ee578fa7ef65ba9210301ea47
Author: Jiri Wiesner <jwiesner@suse.com>
Date:   Sat Mar 7 13:31:57 2020 +0100

    ipvlan: do not add hardware address of master to its unicast filter list
    
    [ Upstream commit 63aae7b17344d4b08a7d05cb07044de4c0f9dcc6 ]
    
    There is a problem when ipvlan slaves are created on a master device that
    is a vmxnet3 device (ipvlan in VMware guests). The vmxnet3 driver does not
    support unicast address filtering. When an ipvlan device is brought up in
    ipvlan_open(), the ipvlan driver calls dev_uc_add() to add the hardware
    address of the vmxnet3 master device to the unicast address list of the
    master device, phy_dev->uc. This inevitably leads to the vmxnet3 master
    device being forced into promiscuous mode by __dev_set_rx_mode().
    
    Promiscuous mode is switched on the master despite the fact that there is
    still only one hardware address that the master device should use for
    filtering in order for the ipvlan device to be able to receive packets.
    The comment above struct net_device describes the uc_promisc member as a
    "counter, that indicates, that promiscuous mode has been enabled due to
    the need to listen to additional unicast addresses in a device that does
    not implement ndo_set_rx_mode()". Moreover, the design of ipvlan
    guarantees that only the hardware address of a master device,
    phy_dev->dev_addr, will be used to transmit and receive all packets from
    its ipvlan slaves. Thus, the unicast address list of the master device
    should not be modified by ipvlan_open() and ipvlan_stop() in order to make
    ipvlan a workable option on masters that do not support unicast address
    filtering.
    
    Fixes: 2ad7bf3638411 ("ipvlan: Initial check-in of the IPVLAN driver")
    Reported-by: Per Sundstrom <per.sundstrom@redqube.se>
    Signed-off-by: Jiri Wiesner <jwiesner@suse.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cedbf1f6066def9af0ab6d2137661b4f74c60ac
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Mon Mar 9 15:57:02 2020 -0700

    ipvlan: add cond_resched_rcu() while processing muticast backlog
    
    [ Upstream commit e18b353f102e371580f3f01dd47567a25acc3c1d ]
    
    If there are substantial number of slaves created as simulated by
    Syzbot, the backlog processing could take much longer and result
    into the issue found in the Syzbot report.
    
    INFO: rcu_sched detected stalls on CPUs/tasks:
            (detected by 1, t=10502 jiffies, g=5049, c=5048, q=752)
    All QSes seen, last rcu_sched kthread activity 10502 (4294965563-4294955061), jiffies_till_next_fqs=1, root ->qsmask 0x0
    syz-executor.1  R  running task on cpu   1  10984 11210   3866 0x30020008 179034491270
    Call Trace:
     <IRQ>
     [<ffffffff81497163>] _sched_show_task kernel/sched/core.c:8063 [inline]
     [<ffffffff81497163>] _sched_show_task.cold+0x2fd/0x392 kernel/sched/core.c:8030
     [<ffffffff8146a91b>] sched_show_task+0xb/0x10 kernel/sched/core.c:8073
     [<ffffffff815c931b>] print_other_cpu_stall kernel/rcu/tree.c:1577 [inline]
     [<ffffffff815c931b>] check_cpu_stall kernel/rcu/tree.c:1695 [inline]
     [<ffffffff815c931b>] __rcu_pending kernel/rcu/tree.c:3478 [inline]
     [<ffffffff815c931b>] rcu_pending kernel/rcu/tree.c:3540 [inline]
     [<ffffffff815c931b>] rcu_check_callbacks.cold+0xbb4/0xc29 kernel/rcu/tree.c:2876
     [<ffffffff815e3962>] update_process_times+0x32/0x80 kernel/time/timer.c:1635
     [<ffffffff816164f0>] tick_sched_handle+0xa0/0x180 kernel/time/tick-sched.c:161
     [<ffffffff81616ae4>] tick_sched_timer+0x44/0x130 kernel/time/tick-sched.c:1193
     [<ffffffff815e75f7>] __run_hrtimer kernel/time/hrtimer.c:1393 [inline]
     [<ffffffff815e75f7>] __hrtimer_run_queues+0x307/0xd90 kernel/time/hrtimer.c:1455
     [<ffffffff815e90ea>] hrtimer_interrupt+0x2ea/0x730 kernel/time/hrtimer.c:1513
     [<ffffffff844050f4>] local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1031 [inline]
     [<ffffffff844050f4>] smp_apic_timer_interrupt+0x144/0x5e0 arch/x86/kernel/apic/apic.c:1056
     [<ffffffff84401cbe>] apic_timer_interrupt+0x8e/0xa0 arch/x86/entry/entry_64.S:778
    RIP: 0010:do_raw_read_lock+0x22/0x80 kernel/locking/spinlock_debug.c:153
    RSP: 0018:ffff8801dad07ab8 EFLAGS: 00000a02 ORIG_RAX: ffffffffffffff12
    RAX: 0000000000000000 RBX: ffff8801c4135680 RCX: 0000000000000000
    RDX: 1ffff10038826afe RSI: ffff88019d816bb8 RDI: ffff8801c41357f0
    RBP: ffff8801dad07ac0 R08: 0000000000004b15 R09: 0000000000310273
    R10: ffff88019d816bb8 R11: 0000000000000001 R12: ffff8801c41357e8
    R13: 0000000000000000 R14: ffff8801cfb19850 R15: ffff8801cfb198b0
     [<ffffffff8101460e>] __raw_read_lock_bh include/linux/rwlock_api_smp.h:177 [inline]
     [<ffffffff8101460e>] _raw_read_lock_bh+0x3e/0x50 kernel/locking/spinlock.c:240
     [<ffffffff840d78ca>] ipv6_chk_mcast_addr+0x11a/0x6f0 net/ipv6/mcast.c:1006
     [<ffffffff84023439>] ip6_mc_input+0x319/0x8e0 net/ipv6/ip6_input.c:482
     [<ffffffff840211c8>] dst_input include/net/dst.h:449 [inline]
     [<ffffffff840211c8>] ip6_rcv_finish+0x408/0x610 net/ipv6/ip6_input.c:78
     [<ffffffff840214de>] NF_HOOK include/linux/netfilter.h:292 [inline]
     [<ffffffff840214de>] NF_HOOK include/linux/netfilter.h:286 [inline]
     [<ffffffff840214de>] ipv6_rcv+0x10e/0x420 net/ipv6/ip6_input.c:278
     [<ffffffff83a29efa>] __netif_receive_skb_one_core+0x12a/0x1f0 net/core/dev.c:5303
     [<ffffffff83a2a15c>] __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:5417
     [<ffffffff83a2f536>] process_backlog+0x216/0x6c0 net/core/dev.c:6243
     [<ffffffff83a30d1b>] napi_poll net/core/dev.c:6680 [inline]
     [<ffffffff83a30d1b>] net_rx_action+0x47b/0xfb0 net/core/dev.c:6748
     [<ffffffff846002c8>] __do_softirq+0x2c8/0x99a kernel/softirq.c:317
     [<ffffffff813e656a>] invoke_softirq kernel/softirq.c:399 [inline]
     [<ffffffff813e656a>] irq_exit+0x16a/0x1a0 kernel/softirq.c:439
     [<ffffffff84405115>] exiting_irq arch/x86/include/asm/apic.h:561 [inline]
     [<ffffffff84405115>] smp_apic_timer_interrupt+0x165/0x5e0 arch/x86/kernel/apic/apic.c:1058
     [<ffffffff84401cbe>] apic_timer_interrupt+0x8e/0xa0 arch/x86/entry/entry_64.S:778
     </IRQ>
    RIP: 0010:__sanitizer_cov_trace_pc+0x26/0x50 kernel/kcov.c:102
    RSP: 0018:ffff880196033bd8 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff12
    RAX: ffff88019d8161c0 RBX: 00000000ffffffff RCX: ffffc90003501000
    RDX: 0000000000000002 RSI: ffffffff816236d1 RDI: 0000000000000005
    RBP: ffff880196033bd8 R08: ffff88019d8161c0 R09: 0000000000000000
    R10: 1ffff10032c067f0 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000000
     [<ffffffff816236d1>] do_futex+0x151/0x1d50 kernel/futex.c:3548
     [<ffffffff816260f0>] C_SYSC_futex kernel/futex_compat.c:201 [inline]
     [<ffffffff816260f0>] compat_SyS_futex+0x270/0x3b0 kernel/futex_compat.c:175
     [<ffffffff8101da17>] do_syscall_32_irqs_on arch/x86/entry/common.c:353 [inline]
     [<ffffffff8101da17>] do_fast_syscall_32+0x357/0xe1c arch/x86/entry/common.c:415
     [<ffffffff84401a9b>] entry_SYSENTER_compat+0x8b/0x9d arch/x86/entry/entry_64_compat.S:139
    RIP: 0023:0xf7f23c69
    RSP: 002b:00000000f5d1f12c EFLAGS: 00000282 ORIG_RAX: 00000000000000f0
    RAX: ffffffffffffffda RBX: 000000000816af88 RCX: 0000000000000080
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 000000000816af8c
    RBP: 00000000f5d1f228 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    rcu_sched kthread starved for 10502 jiffies! g5049 c5048 f0x2 RCU_GP_WAIT_FQS(3) ->state=0x0 ->cpu=1
    rcu_sched       R  running task on cpu   1  13048     8      2 0x90000000 179099587640
    Call Trace:
     [<ffffffff8147321f>] context_switch+0x60f/0xa60 kernel/sched/core.c:3209
     [<ffffffff8100095a>] __schedule+0x5aa/0x1da0 kernel/sched/core.c:3934
     [<ffffffff810021df>] schedule+0x8f/0x1b0 kernel/sched/core.c:4011
     [<ffffffff8101116d>] schedule_timeout+0x50d/0xee0 kernel/time/timer.c:1803
     [<ffffffff815c13f1>] rcu_gp_kthread+0xda1/0x3b50 kernel/rcu/tree.c:2327
     [<ffffffff8144b318>] kthread+0x348/0x420 kernel/kthread.c:246
     [<ffffffff84400266>] ret_from_fork+0x56/0x70 arch/x86/entry/entry_64.S:393
    
    Fixes: ba35f8588f47 (âipvlan: Defer multicast / broadcast processing to a work-queueâ)
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b91a96d63b87b685c055eda89b82c6ce696e622
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Tue Mar 10 15:27:37 2020 +0800

    ipv6/addrconf: call ipv6_mc_up() for non-Ethernet interface
    
    [ Upstream commit 60380488e4e0b95e9e82aa68aa9705baa86de84c ]
    
    RafaÅ found an issue that for non-Ethernet interface, if we down and up
    frequently, the memory will be consumed slowly.
    
    The reason is we add allnodes/allrouters addressed in multicast list in
    ipv6_add_dev(). When link down, we call ipv6_mc_down(), store all multicast
    addresses via mld_add_delrec(). But when link up, we don't call ipv6_mc_up()
    for non-Ethernet interface to remove the addresses. This makes idev->mc_tomb
    getting bigger and bigger. The call stack looks like:
    
    addrconf_notify(NETDEV_REGISTER)
            ipv6_add_dev
                    ipv6_dev_mc_inc(ff01::1)
                    ipv6_dev_mc_inc(ff02::1)
                    ipv6_dev_mc_inc(ff02::2)
    
    addrconf_notify(NETDEV_UP)
            addrconf_dev_config
                    /* Alas, we support only Ethernet autoconfiguration. */
                    return;
    
    addrconf_notify(NETDEV_DOWN)
            addrconf_ifdown
                    ipv6_mc_down
                            igmp6_group_dropped(ff02::2)
                                    mld_add_delrec(ff02::2)
                            igmp6_group_dropped(ff02::1)
                            igmp6_group_dropped(ff01::1)
    
    After investigating, I can't found a rule to disable multicast on
    non-Ethernet interface. In RFC2460, the link could be Ethernet, PPP, ATM,
    tunnels, etc. In IPv4, it doesn't check the dev type when calls ip_mc_up()
    in inetdev_event(). Even for IPv6, we don't check the dev type and call
    ipv6_add_dev(), ipv6_dev_mc_inc() after register device.
    
    So I think it's OK to fix this memory consumer by calling ipv6_mc_up() for
    non-Ethernet interface.
    
    v2: Also check IFF_MULTICAST flag to make sure the interface supports
        multicast
    
    Reported-by: RafaÅ MiÅecki <zajec5@gmail.com>
    Tested-by: RafaÅ MiÅecki <zajec5@gmail.com>
    Fixes: 74235a25c673 ("[IPV6] addrconf: Fix IPv6 on tuntap tunnels")
    Fixes: 1666d49e1d41 ("mld: do not remove mld souce list info when set link down")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd8c3cc975c64b99e3e4936410a1bbcd3dda6709
Author: Dmitry Yakunin <zeil@yandex-team.ru>
Date:   Thu Mar 5 15:33:12 2020 +0300

    inet_diag: return classid for all socket types
    
    [ Upstream commit 83f73c5bb7b9a9135173f0ba2b1aa00c06664ff9 ]
    
    In commit 1ec17dbd90f8 ("inet_diag: fix reporting cgroup classid and
    fallback to priority") croup classid reporting was fixed. But this works
    only for TCP sockets because for other socket types icsk parameter can
    be NULL and classid code path is skipped. This change moves classid
    handling to inet_diag_msg_attrs_fill() function.
    
    Also inet_diag_msg_attrs_size() helper was added and addends in
    nlmsg_new() were reordered to save order from inet_sk_diag_fill().
    
    Fixes: 1ec17dbd90f8 ("inet_diag: fix reporting cgroup classid and fallback to priority")
    Signed-off-by: Dmitry Yakunin <zeil@yandex-team.ru>
    Reviewed-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfe511ce3d84281c12cf643f0bbdd267bd6ff1d5
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Mar 7 22:05:14 2020 -0800

    gre: fix uninit-value in __iptunnel_pull_header
    
    [ Upstream commit 17c25cafd4d3e74c83dce56b158843b19c40b414 ]
    
    syzbot found an interesting case of the kernel reading
    an uninit-value [1]
    
    Problem is in the handling of ETH_P_WCCP in gre_parse_header()
    
    We look at the byte following GRE options to eventually decide
    if the options are four bytes longer.
    
    Use skb_header_pointer() to not pull bytes if we found
    that no more bytes were needed.
    
    All callers of gre_parse_header() are properly using pskb_may_pull()
    anyway before proceeding to next header.
    
    [1]
    BUG: KMSAN: uninit-value in pskb_may_pull include/linux/skbuff.h:2303 [inline]
    BUG: KMSAN: uninit-value in __iptunnel_pull_header+0x30c/0xbd0 net/ipv4/ip_tunnel_core.c:94
    CPU: 1 PID: 11784 Comm: syz-executor940 Not tainted 5.6.0-rc2-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     pskb_may_pull include/linux/skbuff.h:2303 [inline]
     __iptunnel_pull_header+0x30c/0xbd0 net/ipv4/ip_tunnel_core.c:94
     iptunnel_pull_header include/net/ip_tunnels.h:411 [inline]
     gre_rcv+0x15e/0x19c0 net/ipv6/ip6_gre.c:606
     ip6_protocol_deliver_rcu+0x181b/0x22c0 net/ipv6/ip6_input.c:432
     ip6_input_finish net/ipv6/ip6_input.c:473 [inline]
     NF_HOOK include/linux/netfilter.h:307 [inline]
     ip6_input net/ipv6/ip6_input.c:482 [inline]
     ip6_mc_input+0xdf2/0x1460 net/ipv6/ip6_input.c:576
     dst_input include/net/dst.h:442 [inline]
     ip6_rcv_finish net/ipv6/ip6_input.c:76 [inline]
     NF_HOOK include/linux/netfilter.h:307 [inline]
     ipv6_rcv+0x683/0x710 net/ipv6/ip6_input.c:306
     __netif_receive_skb_one_core net/core/dev.c:5198 [inline]
     __netif_receive_skb net/core/dev.c:5312 [inline]
     netif_receive_skb_internal net/core/dev.c:5402 [inline]
     netif_receive_skb+0x66b/0xf20 net/core/dev.c:5461
     tun_rx_batched include/linux/skbuff.h:4321 [inline]
     tun_get_user+0x6aef/0x6f60 drivers/net/tun.c:1997
     tun_chr_write_iter+0x1f2/0x360 drivers/net/tun.c:2026
     call_write_iter include/linux/fs.h:1901 [inline]
     new_sync_write fs/read_write.c:483 [inline]
     __vfs_write+0xa5a/0xca0 fs/read_write.c:496
     vfs_write+0x44a/0x8f0 fs/read_write.c:558
     ksys_write+0x267/0x450 fs/read_write.c:611
     __do_sys_write fs/read_write.c:623 [inline]
     __se_sys_write fs/read_write.c:620 [inline]
     __ia32_sys_write+0xdb/0x120 fs/read_write.c:620
     do_syscall_32_irqs_on arch/x86/entry/common.c:339 [inline]
     do_fast_syscall_32+0x3c7/0x6e0 arch/x86/entry/common.c:410
     entry_SYSENTER_compat+0x68/0x77 arch/x86/entry/entry_64_compat.S:139
    RIP: 0023:0xf7f62d99
    Code: 90 e8 0b 00 00 00 f3 90 0f ae e8 eb f9 8d 74 26 00 89 3c 24 c3 90 90 90 90 90 90 90 90 90 90 90 90 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 eb 0d 90 90 90 90 90 90 90 90 90 90 90 90
    RSP: 002b:00000000fffedb2c EFLAGS: 00000217 ORIG_RAX: 0000000000000004
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000020002580
    RDX: 0000000000000fca RSI: 0000000000000036 RDI: 0000000000000004
    RBP: 0000000000008914 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:144 [inline]
     kmsan_internal_poison_shadow+0x66/0xd0 mm/kmsan/kmsan.c:127
     kmsan_slab_alloc+0x8a/0xe0 mm/kmsan/kmsan_hooks.c:82
     slab_alloc_node mm/slub.c:2793 [inline]
     __kmalloc_node_track_caller+0xb40/0x1200 mm/slub.c:4401
     __kmalloc_reserve net/core/skbuff.c:142 [inline]
     __alloc_skb+0x2fd/0xac0 net/core/skbuff.c:210
     alloc_skb include/linux/skbuff.h:1051 [inline]
     alloc_skb_with_frags+0x18c/0xa70 net/core/skbuff.c:5766
     sock_alloc_send_pskb+0xada/0xc60 net/core/sock.c:2242
     tun_alloc_skb drivers/net/tun.c:1529 [inline]
     tun_get_user+0x10ae/0x6f60 drivers/net/tun.c:1843
     tun_chr_write_iter+0x1f2/0x360 drivers/net/tun.c:2026
     call_write_iter include/linux/fs.h:1901 [inline]
     new_sync_write fs/read_write.c:483 [inline]
     __vfs_write+0xa5a/0xca0 fs/read_write.c:496
     vfs_write+0x44a/0x8f0 fs/read_write.c:558
     ksys_write+0x267/0x450 fs/read_write.c:611
     __do_sys_write fs/read_write.c:623 [inline]
     __se_sys_write fs/read_write.c:620 [inline]
     __ia32_sys_write+0xdb/0x120 fs/read_write.c:620
     do_syscall_32_irqs_on arch/x86/entry/common.c:339 [inline]
     do_fast_syscall_32+0x3c7/0x6e0 arch/x86/entry/common.c:410
     entry_SYSENTER_compat+0x68/0x77 arch/x86/entry/entry_64_compat.S:139
    
    Fixes: 95f5c64c3c13 ("gre: Move utility functions to common headers")
    Fixes: c54419321455 ("GRE: Refactor GRE tunneling code.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3b4544a1a962303d4a7cfd2749de0d2594cc4f0
Author: Vishal Kulkarni <vishal@chelsio.com>
Date:   Mon Mar 2 10:54:13 2020 +0530

    cxgb4: fix checks for max queues to allocate
    
    [ Upstream commit 116ca924aea664141afa86a1425edc3fcda0d06f ]
    
    Hardware can support more than 8 queues currently limited by
    netif_get_num_default_rss_queues(). So, rework and fix checks for max
    number of queues to allocate. The checks should be based on how many are
    actually supported by hardware, OR the number of online cpus; whichever
    is lower.
    
    Fixes: 5952dde72307 ("cxgb4: set maximal number of default RSS queues")
    Signed-off-by: Vishal Kulkarni <vishal@chelsio.com>"
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4003dc0caf7ef9e7888e6139efabd21fc756f3c
Author: Dmitry Yakunin <zeil@yandex-team.ru>
Date:   Thu Mar 5 17:45:57 2020 +0300

    cgroup, netclassid: periodically release file_lock on classid updating
    
    [ Upstream commit 018d26fcd12a75fb9b5fe233762aa3f2f0854b88 ]
    
    In our production environment we have faced with problem that updating
    classid in cgroup with heavy tasks cause long freeze of the file tables
    in this tasks. By heavy tasks we understand tasks with many threads and
    opened sockets (e.g. balancers). This freeze leads to an increase number
    of client timeouts.
    
    This patch implements following logic to fix this issue:
    Ð°fter iterating 1000 file descriptors file table lock will be released
    thus providing a time gap for socket creation/deletion.
    
    Now update is non atomic and socket may be skipped using calls:
    
    dup2(oldfd, newfd);
    close(oldfd);
    
    But this case is not typical. Moreover before this patch skip is possible
    too by hiding socket fd in unix socket buffer.
    
    New sockets will be allocated with updated classid because cgroup state
    is updated before start of the file descriptors iteration.
    
    So in common cases this patch has no side effects.
    
    Signed-off-by: Dmitry Yakunin <zeil@yandex-team.ru>
    Reviewed-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b350fea945793bdbc25e0b362c3b182779d4037d
Author: Kailang Yang <kailang@realtek.com>
Date:   Wed Feb 5 15:40:01 2020 +0800

    ALSA: hda/realtek - Fixed one of HP ALC671 platform Headset Mic supported
    
    [ Upstream commit f2adbae0cb20c8eaf06914b2187043ea944b0aff ]
    
    HP want to keep BIOS verb table for release platform.
    So, it need to add 0x19 pin for quirk.
    
    Fixes: 5af29028fd6d ("ALSA: hda/realtek - Add Headset Mic supported for HP cPC")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Link: https://lore.kernel.org/r/74636ccb700a4cbda24c58a99dc430ce@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c273dadbb2afd80bed42895b2118064732567f34
Author: Kailang Yang <kailang@realtek.com>
Date:   Fri Jan 17 14:04:01 2020 +0800

    ALSA: hda/realtek - Add Headset Mic supported for HP cPC
    
    [ Upstream commit 5af29028fd6db9438b5584ab7179710a0a22569d ]
    
    HP ALC671 need to support Headset Mic.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Link: https://lore.kernel.org/r/06a9d2b176e14706976d6584cbe2d92a@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 229d3811cd1ca4b472aa9475da342036cd312a94
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Jan 5 15:47:18 2020 +0100

    ALSA: hda/realtek - More constifications
    
    [ Upstream commit 6b0f95c49d890440c01a759c767dfe40e2acdbf2 ]
    
    Apply const prefix to each coef table array.
    
    Just for minor optimization and no functional changes.
    
    Link: https://lore.kernel.org/r/20200105144823.29547-4-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54673a9cdd8499405cbd5603263767f2d678789f
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Sat Feb 15 17:40:39 2020 -0700

    virtio_balloon: Adjust label in virtballoon_probe
    
    [ Upstream commit 6ae4edab2fbf86ec92fbf0a8f0c60b857d90d50f ]
    
    Clang warns when CONFIG_BALLOON_COMPACTION is unset:
    
    ../drivers/virtio/virtio_balloon.c:963:1: warning: unused label
    'out_del_vqs' [-Wunused-label]
    out_del_vqs:
    ^~~~~~~~~~~~
    1 warning generated.
    
    Move the label within the preprocessor block since it is only used when
    CONFIG_BALLOON_COMPACTION is set.
    
    Fixes: 1ad6f58ea936 ("virtio_balloon: Fix memory leaks on errors in virtballoon_probe()")
    Link: https://github.com/ClangBuiltLinux/linux/issues/886
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lore.kernel.org/r/20200216004039.23464-1-natechancellor@gmail.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
