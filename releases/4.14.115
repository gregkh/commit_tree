commit 1c046f37313210e0c41b036fcd14c4bdb1581d47
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 2 09:40:34 2019 +0200

    Linux 4.14.115

commit 0a5112f20c1deca4b3899fdbf711f309ee977a18
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Sat Jul 28 09:06:39 2018 +1000

    Documentation: Add nospectre_v1 parameter
    
    commit 26cb1f36c43ee6e89d2a9f48a5a7500d5248f836 upstream.
    
    Currently only supported on powerpc.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07198c41d25aa963d33b2ccc7909c06655b6613c
Author: Diana Craciun <diana.craciun@nxp.com>
Date:   Wed Dec 12 16:03:10 2018 +0200

    powerpc/fsl: Add FSL_PPC_BOOK3E as supported arch for nospectre_v2 boot arg
    
    commit e59f5bd759b7dee57593c5b6c0441609bda5d530 upstream.
    
    Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd8e4afb2812bce3ceef6cfad9a08cdaf63f06d3
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Apr 16 09:47:24 2019 +0800

    ipv4: set the tcp_min_rtt_wlen range from 0 to one day
    
    [ Upstream commit 19fad20d15a6494f47f85d869f00b11343ee5c78 ]
    
    There is a UBSAN report as below:
    UBSAN: Undefined behaviour in net/ipv4/tcp_input.c:2877:56
    signed integer overflow:
    2147483647 * 1000 cannot be represented in type 'int'
    CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.1.0-rc4-00058-g582549e #1
    Call Trace:
     <IRQ>
     dump_stack+0x8c/0xba
     ubsan_epilogue+0x11/0x60
     handle_overflow+0x12d/0x170
     ? ttwu_do_wakeup+0x21/0x320
     __ubsan_handle_mul_overflow+0x12/0x20
     tcp_ack_update_rtt+0x76c/0x780
     tcp_clean_rtx_queue+0x499/0x14d0
     tcp_ack+0x69e/0x1240
     ? __wake_up_sync_key+0x2c/0x50
     ? update_group_capacity+0x50/0x680
     tcp_rcv_established+0x4e2/0xe10
     tcp_v4_do_rcv+0x22b/0x420
     tcp_v4_rcv+0xfe8/0x1190
     ip_protocol_deliver_rcu+0x36/0x180
     ip_local_deliver+0x15b/0x1a0
     ip_rcv+0xac/0xd0
     __netif_receive_skb_one_core+0x7f/0xb0
     __netif_receive_skb+0x33/0xc0
     netif_receive_skb_internal+0x84/0x1c0
     napi_gro_receive+0x2a0/0x300
     receive_buf+0x3d4/0x2350
     ? detach_buf_split+0x159/0x390
     virtnet_poll+0x198/0x840
     ? reweight_entity+0x243/0x4b0
     net_rx_action+0x25c/0x770
     __do_softirq+0x19b/0x66d
     irq_exit+0x1eb/0x230
     do_IRQ+0x7a/0x150
     common_interrupt+0xf/0xf
     </IRQ>
    
    It can be reproduced by:
      echo 2147483647 > /proc/sys/net/ipv4/tcp_min_rtt_wlen
    
    Fixes: f672258391b42 ("tcp: track min RTT using windowed min-filter")
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51ba221aef55daa8102ec2469099ea9b60ae2bfb
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 05:35:00 2019 -0700

    net/rose: fix unbound loop in rose_loopback_timer()
    
    [ Upstream commit 0453c682459583910d611a96de928f4442205493 ]
    
    This patch adds a limit on the number of skbs that fuzzers can queue
    into loopback_queue. 1000 packets for rose loopback seems more than enough.
    
    Then, since we now have multiple cpus in most linux hosts,
    we also need to limit the number of skbs rose_loopback_timer()
    can dequeue at each round.
    
    rose_loopback_queue() can be drop-monitor friendly, calling
    consume_skb() or kfree_skb() appropriately.
    
    Finally, use mod_timer() instead of del_timer() + add_timer()
    
    syzbot report was :
    
    rcu: INFO: rcu_preempt self-detected stall on CPU
    rcu:    0-...!: (10499 ticks this GP) idle=536/1/0x4000000000000002 softirq=103291/103291 fqs=34
    rcu:     (t=10500 jiffies g=140321 q=323)
    rcu: rcu_preempt kthread starved for 10426 jiffies! g140321 f0x0 RCU_GP_WAIT_FQS(5) ->state=0x402 ->cpu=1
    rcu: RCU grace-period kthread stack dump:
    rcu_preempt     I29168    10      2 0x80000000
    Call Trace:
     context_switch kernel/sched/core.c:2877 [inline]
     __schedule+0x813/0x1cc0 kernel/sched/core.c:3518
     schedule+0x92/0x180 kernel/sched/core.c:3562
     schedule_timeout+0x4db/0xfd0 kernel/time/timer.c:1803
     rcu_gp_fqs_loop kernel/rcu/tree.c:1971 [inline]
     rcu_gp_kthread+0x962/0x17b0 kernel/rcu/tree.c:2128
     kthread+0x357/0x430 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    NMI backtrace for cpu 0
    CPU: 0 PID: 7632 Comm: kworker/0:4 Not tainted 5.1.0-rc5+ #172
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events iterate_cleanup_work
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     nmi_cpu_backtrace.cold+0x63/0xa4 lib/nmi_backtrace.c:101
     nmi_trigger_cpumask_backtrace+0x1be/0x236 lib/nmi_backtrace.c:62
     arch_trigger_cpumask_backtrace+0x14/0x20 arch/x86/kernel/apic/hw_nmi.c:38
     trigger_single_cpu_backtrace include/linux/nmi.h:164 [inline]
     rcu_dump_cpu_stacks+0x183/0x1cf kernel/rcu/tree.c:1223
     print_cpu_stall kernel/rcu/tree.c:1360 [inline]
     check_cpu_stall kernel/rcu/tree.c:1434 [inline]
     rcu_pending kernel/rcu/tree.c:3103 [inline]
     rcu_sched_clock_irq.cold+0x500/0xa4a kernel/rcu/tree.c:2544
     update_process_times+0x32/0x80 kernel/time/timer.c:1635
     tick_sched_handle+0xa2/0x190 kernel/time/tick-sched.c:161
     tick_sched_timer+0x47/0x130 kernel/time/tick-sched.c:1271
     __run_hrtimer kernel/time/hrtimer.c:1389 [inline]
     __hrtimer_run_queues+0x33e/0xde0 kernel/time/hrtimer.c:1451
     hrtimer_interrupt+0x314/0x770 kernel/time/hrtimer.c:1509
     local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1035 [inline]
     smp_apic_timer_interrupt+0x120/0x570 arch/x86/kernel/apic/apic.c:1060
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:807
    RIP: 0010:__sanitizer_cov_trace_pc+0x0/0x50 kernel/kcov.c:95
    Code: 89 25 b4 6e ec 08 41 bc f4 ff ff ff e8 cd 5d ea ff 48 c7 05 9e 6e ec 08 00 00 00 00 e9 a4 e9 ff ff 90 90 90 90 90 90 90 90 90 <55> 48 89 e5 48 8b 75 08 65 48 8b 04 25 00 ee 01 00 65 8b 15 c8 60
    RSP: 0018:ffff8880ae807ce0 EFLAGS: 00000286 ORIG_RAX: ffffffffffffff13
    RAX: ffff88806fd40640 RBX: dffffc0000000000 RCX: ffffffff863fbc56
    RDX: 0000000000000100 RSI: ffffffff863fbc1d RDI: ffff88808cf94228
    RBP: ffff8880ae807d10 R08: ffff88806fd40640 R09: ffffed1015d00f8b
    R10: ffffed1015d00f8a R11: 0000000000000003 R12: ffff88808cf941c0
    R13: 00000000fffff034 R14: ffff8882166cd840 R15: 0000000000000000
     rose_loopback_timer+0x30d/0x3f0 net/rose/rose_loopback.c:91
     call_timer_fn+0x190/0x720 kernel/time/timer.c:1325
     expire_timers kernel/time/timer.c:1362 [inline]
     __run_timers kernel/time/timer.c:1681 [inline]
     __run_timers kernel/time/timer.c:1649 [inline]
     run_timer_softirq+0x652/0x1700 kernel/time/timer.c:1694
     __do_softirq+0x266/0x95a kernel/softirq.c:293
     do_softirq_own_stack+0x2a/0x40 arch/x86/entry/entry_64.S:1027
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cf41a93387a4db81ff499af52217305e7cb8f1a
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Oct 16 17:28:47 2017 -0700

    net/rose: Convert timers to use timer_setup()
    
    commit 4966babd904d7f8e9e20735f3637a98fd7ca538c upstream.
    
    In preparation for unconditionally passing the struct timer_list pointer to
    all timer callbacks, switch to using the new timer_setup() and from_timer()
    to pass the timer pointer explicitly.
    
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: linux-hams@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edd3e48b4e5cd66c4814895d8a7813cc5f6a312b
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Fri Apr 19 14:31:00 2019 +0800

    team: fix possible recursive locking when add slaves
    
    [ Upstream commit 925b0c841e066b488cc3a60272472b2c56300704 ]
    
    If we add a bond device which is already the master of the team interface,
    we will hold the team->lock in team_add_slave() first and then request the
    lock in team_set_mac_address() again. The functions are called like:
    
    - team_add_slave()
     - team_port_add()
       - team_port_enter()
         - team_modeop_port_enter()
           - __set_port_dev_addr()
             - dev_set_mac_address()
               - bond_set_mac_address()
                 - dev_set_mac_address()
                   - team_set_mac_address
    
    Although team_upper_dev_link() would check the upper devices but it is
    called too late. Fix it by adding a checking before processing the slave.
    
    v2: Do not split the string in netdev_err()
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f81c74b1f2ec834ae95db6898c7ef5320283f6a
Author: Su Bao Cheng <baocheng.su@siemens.com>
Date:   Thu Apr 18 11:14:56 2019 +0200

    stmmac: pci: Adjust IOT2000 matching
    
    [ Upstream commit e0c1d14a1a3211dccf0540a6703ffbd5d2a75bdb ]
    
    Since there are more IOT2040 variants with identical hardware but
    different asset tags, the asset tag matching should be adjusted to
    support them.
    
    For the board name "SIMATIC IOT2000", currently there are 2 types of
    hardware, IOT2020 and IOT2040. The IOT2020 is identified by its unique
    asset tag. Match on it first. If we then match on the board name only,
    we will catch all IOT2040 variants. In the future there will be no other
    devices with the "SIMATIC IOT2000" DMI board name but different
    hardware.
    
    Signed-off-by: Su Bao Cheng <baocheng.su@siemens.com>
    Reviewed-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6653b30930d1f04a24c6de2fd9d65c953193d738
Author: Vinod Koul <vkoul@kernel.org>
Date:   Mon Apr 22 15:15:32 2019 +0530

    net: stmmac: move stmmac_check_ether_addr() to driver probe
    
    [ Upstream commit b561af36b1841088552464cdc3f6371d92f17710 ]
    
    stmmac_check_ether_addr() checks the MAC address and assigns one in
    driver open(). In many cases when we create slave netdevice, the dev
    addr is inherited from master but the master dev addr maybe NULL at
    that time, so move this call to driver probe so that address is
    always valid.
    
    Signed-off-by: Xiaofei Shen <xiaofeis@codeaurora.org>
    Tested-by: Xiaofei Shen <xiaofeis@codeaurora.org>
    Signed-off-by: Sneh Shah <snehshah@codeaurora.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dcab85a9af5ef2d26ec690a82b3dcce4e1bd0bd
Author: Zhu Yanjun <yanjun.zhu@oracle.com>
Date:   Wed Apr 24 02:56:42 2019 -0400

    net: rds: exchange of 8K and 1M pool
    
    [ Upstream commit 4b9fc7146249a6e0e3175d0acc033fdcd2bfcb17 ]
    
    Before the commit 490ea5967b0d ("RDS: IB: move FMR code to its own file"),
    when the dirty_count is greater than 9/10 of max_items of 8K pool,
    1M pool is used, Vice versa. After the commit 490ea5967b0d ("RDS: IB: move
    FMR code to its own file"), the above is removed. When we make the
    following tests.
    
    Server:
      rds-stress -r 1.1.1.16 -D 1M
    
    Client:
      rds-stress -r 1.1.1.14 -s 1.1.1.16 -D 1M
    
    The following will appear.
    "
    connecting to 1.1.1.16:4000
    negotiated options, tasks will start in 2 seconds
    Starting up..header from 1.1.1.166:4001 to id 4001 bogus
    ..
    tsks  tx/s  rx/s tx+rx K/s  mbi K/s  mbo K/s tx us/c  rtt us
    cpu %
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
       1    0    0     0.00     0.00     0.00    0.00 0.00 -1.00
    ...
    "
    So this exchange between 8K and 1M pool is added back.
    
    Fixes: commit 490ea5967b0d ("RDS: IB: move FMR code to its own file")
    Signed-off-by: Zhu Yanjun <yanjun.zhu@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6af464bfd6c444f32090ce5a6279c774e87a8472
Author: Erez Alfasi <ereza@mellanox.com>
Date:   Thu Apr 11 10:41:03 2019 +0300

    net/mlx5e: ethtool, Remove unsupported SFP EEPROM high pages query
    
    [ Upstream commit ace329f4ab3ba434be2adf618073c752d083b524 ]
    
    Querying EEPROM high pages data for SFP module is currently
    not supported by our driver and yet queried, resulting in
    invalid FW queries.
    
    Set the EEPROM ethtool data length to 256 for SFP module will
    limit the reading for page 0 only and prevent invalid FW queries.
    
    Fixes: bb64143eee8c ("net/mlx5e: Add ethtool support for dump module EEPROM")
    Signed-off-by: Erez Alfasi <ereza@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ff13dbace24a9fa8595e278290d6ff3aab2b0d7
Author: Amit Cohen <amitc@mellanox.com>
Date:   Thu Apr 18 07:14:16 2019 +0000

    mlxsw: spectrum: Fix autoneg status in ethtool
    
    [ Upstream commit 151f0dddbbfe4c35c9c5b64873115aafd436af9d ]
    
    If link is down and autoneg is set to on/off, the status in ethtool does
    not change.
    
    The reason is when the link is down the function returns with zero
    before changing autoneg value.
    
    Move the checking of link state (up/down) to be performed after setting
    autoneg value, in order to be sure that autoneg will change in any case.
    
    Fixes: 56ade8fe3fe1 ("mlxsw: spectrum: Add initial support for Spectrum ASIC")
    Signed-off-by: Amit Cohen <amitc@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 748ed75029ebd0433d02eb97839fe6a08479ee4b
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 08:04:05 2019 -0700

    ipv4: add sanity checks in ipv4_link_failure()
    
    [ Upstream commit 20ff83f10f113c88d0bb74589389b05250994c16 ]
    
    Before calling __ip_options_compile(), we need to ensure the network
    header is a an IPv4 one, and that it is already pulled in skb->head.
    
    RAW sockets going through a tunnel can end up calling ipv4_link_failure()
    with total garbage in the skb, or arbitrary lengthes.
    
    syzbot report :
    
    BUG: KASAN: stack-out-of-bounds in memcpy include/linux/string.h:355 [inline]
    BUG: KASAN: stack-out-of-bounds in __ip_options_echo+0x294/0x1120 net/ipv4/ip_options.c:123
    Write of size 69 at addr ffff888096abf068 by task syz-executor.4/9204
    
    CPU: 0 PID: 9204 Comm: syz-executor.4 Not tainted 5.1.0-rc5+ #77
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     check_memory_region_inline mm/kasan/generic.c:185 [inline]
     check_memory_region+0x123/0x190 mm/kasan/generic.c:191
     memcpy+0x38/0x50 mm/kasan/common.c:133
     memcpy include/linux/string.h:355 [inline]
     __ip_options_echo+0x294/0x1120 net/ipv4/ip_options.c:123
     __icmp_send+0x725/0x1400 net/ipv4/icmp.c:695
     ipv4_link_failure+0x29f/0x550 net/ipv4/route.c:1204
     dst_link_failure include/net/dst.h:427 [inline]
     vti6_xmit net/ipv6/ip6_vti.c:514 [inline]
     vti6_tnl_xmit+0x10d4/0x1c0c net/ipv6/ip6_vti.c:553
     __netdev_start_xmit include/linux/netdevice.h:4414 [inline]
     netdev_start_xmit include/linux/netdevice.h:4423 [inline]
     xmit_one net/core/dev.c:3292 [inline]
     dev_hard_start_xmit+0x1b2/0x980 net/core/dev.c:3308
     __dev_queue_xmit+0x271d/0x3060 net/core/dev.c:3878
     dev_queue_xmit+0x18/0x20 net/core/dev.c:3911
     neigh_direct_output+0x16/0x20 net/core/neighbour.c:1527
     neigh_output include/net/neighbour.h:508 [inline]
     ip_finish_output2+0x949/0x1740 net/ipv4/ip_output.c:229
     ip_finish_output+0x73c/0xd50 net/ipv4/ip_output.c:317
     NF_HOOK_COND include/linux/netfilter.h:278 [inline]
     ip_output+0x21f/0x670 net/ipv4/ip_output.c:405
     dst_output include/net/dst.h:444 [inline]
     NF_HOOK include/linux/netfilter.h:289 [inline]
     raw_send_hdrinc net/ipv4/raw.c:432 [inline]
     raw_sendmsg+0x1d2b/0x2f20 net/ipv4/raw.c:663
     inet_sendmsg+0x147/0x5d0 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0xdd/0x130 net/socket.c:661
     sock_write_iter+0x27c/0x3e0 net/socket.c:988
     call_write_iter include/linux/fs.h:1866 [inline]
     new_sync_write+0x4c7/0x760 fs/read_write.c:474
     __vfs_write+0xe4/0x110 fs/read_write.c:487
     vfs_write+0x20c/0x580 fs/read_write.c:549
     ksys_write+0x14f/0x2d0 fs/read_write.c:599
     __do_sys_write fs/read_write.c:611 [inline]
     __se_sys_write fs/read_write.c:608 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:608
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458c29
    Code: ad b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f293b44bc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000458c29
    RDX: 0000000000000014 RSI: 00000000200002c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f293b44c6d4
    R13: 00000000004c8623 R14: 00000000004ded68 R15: 00000000ffffffff
    
    The buggy address belongs to the page:
    page:ffffea00025aafc0 count:0 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0x1fffc0000000000()
    raw: 01fffc0000000000 0000000000000000 ffffffff025a0101 0000000000000000
    raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888096abef80: 00 00 00 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 f2
     ffff888096abf000: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff888096abf080: 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00
                             ^
     ffff888096abf100: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00
     ffff888096abf180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    
    Fixes: ed0de45a1008 ("ipv4: recompile ip options in ipv4_link_failure")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Stephen Suryaputra <ssuryaextr@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22f36db48781d0db6a01ee0113265984990c1a8e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Apr 29 15:56:26 2019 +0200

    Revert "block/loop: Use global lock for ioctl() operation."
    
    This reverts commit 57da9a9742200f391d1cf93fea389f7ddc25ec9a which is
    commit 310ca162d779efee8a2dc3731439680f3e9c1e86 upstream.
    
    Jan Kara has reported seeing problems with this patch applied, as has
    Salvatore Bonaccorso, so let's drop it for now.
    
    Reported-by: Salvatore Bonaccorso <carnil@debian.org>
    Reported-by: Jan Kara <jack@suse.cz>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7adeff6112ce12fb70dab378287d0d85917d240
Author: Jan Kara <jack@suse.cz>
Date:   Tue Oct 30 15:10:47 2018 -0700

    mm: Fix warning in insert_pfn()
    
    commit f2c57d91b0d96aa13ccff4e3b178038f17b00658 upstream.
    
    In DAX mode a write pagefault can race with write(2) in the following
    way:
    
    CPU0                            CPU1
                                    write fault for mapped zero page (hole)
    dax_iomap_rw()
      iomap_apply()
        xfs_file_iomap_begin()
          - allocates blocks
        dax_iomap_actor()
          invalidate_inode_pages2_range()
            - invalidates radix tree entries in given range
                                    dax_iomap_pte_fault()
                                      grab_mapping_entry()
                                        - no entry found, creates empty
                                      ...
                                      xfs_file_iomap_begin()
                                        - finds already allocated block
                                      ...
                                      vmf_insert_mixed_mkwrite()
                                        - WARNs and does nothing because there
                                          is still zero page mapped in PTE
            unmap_mapping_pages()
    
    This race results in WARN_ON from insert_pfn() and is occasionally
    triggered by fstest generic/344. Note that the race is otherwise
    harmless as before write(2) on CPU0 is finished, we will invalidate page
    tables properly and thus user of mmap will see modified data from
    write(2) from that point on. So just restrict the warning only to the
    case when the PFN in PTE is not zero page.
    
    Link: http://lkml.kernel.org/r/20180824154542.26872-1-jack@suse.cz
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e28951100515c9fd8f8d4b06ed96576e3527ad82
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Mar 25 14:56:20 2019 +0100

    x86/retpolines: Disable switch jump tables when retpolines are enabled
    
    commit a9d57ef15cbe327fe54416dd194ee0ea66ae53a4 upstream.
    
    Commit ce02ef06fcf7 ("x86, retpolines: Raise limit for generating indirect
    calls from switch-case") raised the limit under retpolines to 20 switch
    cases where gcc would only then start to emit jump tables, and therefore
    effectively disabling the emission of slow indirect calls in this area.
    
    After this has been brought to attention to gcc folks [0], Martin Liska
    has then fixed gcc to align with clang by avoiding to generate switch jump
    tables entirely under retpolines. This is taking effect in gcc starting
    from stable version 8.4.0. Given kernel supports compilation with older
    versions of gcc where the fix is not being available or backported anymore,
    we need to keep the extra KBUILD_CFLAGS around for some time and generally
    set the -fno-jump-tables to align with what more recent gcc is doing
    automatically today.
    
    More than 20 switch cases are not expected to be fast-path critical, but
    it would still be good to align with gcc behavior for versions < 8.4.0 in
    order to have consistency across supported gcc versions. vmlinux size is
    slightly growing by 0.27% for older gcc. This flag is only set to work
    around affected gcc, no change for clang.
    
      [0] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86952
    
    Suggested-by: Martin Liska <mliska@suse.cz>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Jesper Dangaard Brouer <brouer@redhat.com>
    Cc: Björn Töpel<bjorn.topel@intel.com>
    Cc: Magnus Karlsson <magnus.karlsson@intel.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: H.J. Lu <hjl.tools@gmail.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: David S. Miller <davem@davemloft.net>
    Link: https://lkml.kernel.org/r/20190325135620.14882-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c75d3d5104ecb5deafa40108153454b39b4f90b
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Feb 21 23:19:41 2019 +0100

    x86, retpolines: Raise limit for generating indirect calls from switch-case
    
    commit ce02ef06fcf7a399a6276adb83f37373d10cbbe1 upstream.
    
    From networking side, there are numerous attempts to get rid of indirect
    calls in fast-path wherever feasible in order to avoid the cost of
    retpolines, for example, just to name a few:
    
      * 283c16a2dfd3 ("indirect call wrappers: helpers to speed-up indirect calls of builtin")
      * aaa5d90b395a ("net: use indirect call wrappers at GRO network layer")
      * 028e0a476684 ("net: use indirect call wrappers at GRO transport layer")
      * 356da6d0cde3 ("dma-mapping: bypass indirect calls for dma-direct")
      * 09772d92cd5a ("bpf: avoid retpoline for lookup/update/delete calls on maps")
      * 10870dd89e95 ("netfilter: nf_tables: add direct calls for all builtin expressions")
      [...]
    
    Recent work on XDP from Björn and Magnus additionally found that manually
    transforming the XDP return code switch statement with more than 5 cases
    into if-else combination would result in a considerable speedup in XDP
    layer due to avoidance of indirect calls in CONFIG_RETPOLINE enabled
    builds. On i40e driver with XDP prog attached, a 20-26% speedup has been
    observed [0]. Aside from XDP, there are many other places later in the
    networking stack's critical path with similar switch-case
    processing. Rather than fixing every XDP-enabled driver and locations in
    stack by hand, it would be good to instead raise the limit where gcc would
    emit expensive indirect calls from the switch under retpolines and stick
    with the default as-is in case of !retpoline configured kernels. This would
    also have the advantage that for archs where this is not necessary, we let
    compiler select the underlying target optimization for these constructs and
    avoid potential slow-downs by if-else hand-rewrite.
    
    In case of gcc, this setting is controlled by case-values-threshold which
    has an architecture global default that selects 4 or 5 (latter if target
    does not have a case insn that compares the bounds) where some arch back
    ends like arm64 or s390 override it with their own target hooks, for
    example, in gcc commit db7a90aa0de5 ("S/390: Disable prediction of indirect
    branches") the threshold pretty much disables jump tables by limit of 20
    under retpoline builds.  Comparing gcc's and clang's default code
    generation on x86-64 under O2 level with retpoline build results in the
    following outcome for 5 switch cases:
    
    * gcc with -mindirect-branch=thunk-inline -mindirect-branch-register:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400be0 <+0>:     cmp    $0x4,%edi
       0x0000000000400be3 <+3>:     ja     0x400c35 <dispatch+85>
       0x0000000000400be5 <+5>:     lea    0x915f8(%rip),%rdx        # 0x4921e4
       0x0000000000400bec <+12>:    mov    %edi,%edi
       0x0000000000400bee <+14>:    movslq (%rdx,%rdi,4),%rax
       0x0000000000400bf2 <+18>:    add    %rdx,%rax
       0x0000000000400bf5 <+21>:    callq  0x400c01 <dispatch+33>
       0x0000000000400bfa <+26>:    pause
       0x0000000000400bfc <+28>:    lfence
       0x0000000000400bff <+31>:    jmp    0x400bfa <dispatch+26>
       0x0000000000400c01 <+33>:    mov    %rax,(%rsp)
       0x0000000000400c05 <+37>:    retq
       0x0000000000400c06 <+38>:    nopw   %cs:0x0(%rax,%rax,1)
       0x0000000000400c10 <+48>:    jmpq   0x400c90 <fn_3>
       0x0000000000400c15 <+53>:    nopl   (%rax)
       0x0000000000400c18 <+56>:    jmpq   0x400c70 <fn_2>
       0x0000000000400c1d <+61>:    nopl   (%rax)
       0x0000000000400c20 <+64>:    jmpq   0x400c50 <fn_1>
       0x0000000000400c25 <+69>:    nopl   (%rax)
       0x0000000000400c28 <+72>:    jmpq   0x400c40 <fn_0>
       0x0000000000400c2d <+77>:    nopl   (%rax)
       0x0000000000400c30 <+80>:    jmpq   0x400cb0 <fn_4>
       0x0000000000400c35 <+85>:    push   %rax
       0x0000000000400c36 <+86>:    callq  0x40dd80 <abort>
      End of assembler dump.
    
    * clang with -mretpoline emitting search tree:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400b30 <+0>:     cmp    $0x1,%edi
       0x0000000000400b33 <+3>:     jle    0x400b44 <dispatch+20>
       0x0000000000400b35 <+5>:     cmp    $0x2,%edi
       0x0000000000400b38 <+8>:     je     0x400b4d <dispatch+29>
       0x0000000000400b3a <+10>:    cmp    $0x3,%edi
       0x0000000000400b3d <+13>:    jne    0x400b52 <dispatch+34>
       0x0000000000400b3f <+15>:    jmpq   0x400c50 <fn_3>
       0x0000000000400b44 <+20>:    test   %edi,%edi
       0x0000000000400b46 <+22>:    jne    0x400b5c <dispatch+44>
       0x0000000000400b48 <+24>:    jmpq   0x400c20 <fn_0>
       0x0000000000400b4d <+29>:    jmpq   0x400c40 <fn_2>
       0x0000000000400b52 <+34>:    cmp    $0x4,%edi
       0x0000000000400b55 <+37>:    jne    0x400b66 <dispatch+54>
       0x0000000000400b57 <+39>:    jmpq   0x400c60 <fn_4>
       0x0000000000400b5c <+44>:    cmp    $0x1,%edi
       0x0000000000400b5f <+47>:    jne    0x400b66 <dispatch+54>
       0x0000000000400b61 <+49>:    jmpq   0x400c30 <fn_1>
       0x0000000000400b66 <+54>:    push   %rax
       0x0000000000400b67 <+55>:    callq  0x40dd20 <abort>
      End of assembler dump.
    
      For sake of comparison, clang without -mretpoline:
    
      # gdb -batch -ex 'disassemble dispatch' ./c-switch
      Dump of assembler code for function dispatch:
       0x0000000000400b30 <+0>:     cmp    $0x4,%edi
       0x0000000000400b33 <+3>:     ja     0x400b57 <dispatch+39>
       0x0000000000400b35 <+5>:     mov    %edi,%eax
       0x0000000000400b37 <+7>:     jmpq   *0x492148(,%rax,8)
       0x0000000000400b3e <+14>:    jmpq   0x400bf0 <fn_0>
       0x0000000000400b43 <+19>:    jmpq   0x400c30 <fn_4>
       0x0000000000400b48 <+24>:    jmpq   0x400c10 <fn_2>
       0x0000000000400b4d <+29>:    jmpq   0x400c20 <fn_3>
       0x0000000000400b52 <+34>:    jmpq   0x400c00 <fn_1>
       0x0000000000400b57 <+39>:    push   %rax
       0x0000000000400b58 <+40>:    callq  0x40dcf0 <abort>
      End of assembler dump.
    
    Raising the cases to a high number (e.g. 100) will still result in similar
    code generation pattern with clang and gcc as above, in other words clang
    generally turns off jump table emission by having an extra expansion pass
    under retpoline build to turn indirectbr instructions from their IR into
    switch instructions as a built-in -mno-jump-table lowering of a switch (in
    this case, even if IR input already contained an indirect branch).
    
    For gcc, adding --param=case-values-threshold=20 as in similar fashion as
    s390 in order to raise the limit for x86 retpoline enabled builds results
    in a small vmlinux size increase of only 0.13% (before=18,027,528
    after=18,051,192). For clang this option is ignored due to i) not being
    needed as mentioned and ii) not having above cmdline
    parameter. Non-retpoline-enabled builds with gcc continue to use the
    default case-values-threshold setting, so nothing changes here.
    
    [0] https://lore.kernel.org/netdev/20190129095754.9390-1-bjorn.topel@gmail.com/
        and "The Path to DPDK Speeds for AF_XDP", LPC 2018, networking track:
      - http://vger.kernel.org/lpc_net2018_talks/lpc18_pres_af_xdp_perf-v3.pdf
      - http://vger.kernel.org/lpc_net2018_talks/lpc18_paper_af_xdp_perf-v2.pdf
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Björn Töpel <bjorn.topel@intel.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: netdev@vger.kernel.org
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Magnus Karlsson <magnus.karlsson@intel.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/20190221221941.29358-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8468115ee9f0f4e2c7ce4ef219a515b2a8bec19d
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Mar 13 07:56:02 2019 -0400

    dm integrity: change memcmp to strncmp in dm_integrity_ctr
    
    commit 0d74e6a3b6421d98eeafbed26f29156d469bc0b5 upstream.
    
    If the string opt_string is small, the function memcmp can access bytes
    that are beyond the terminating nul character. In theory, it could cause
    segfault, if opt_string were located just below some unmapped memory.
    
    Change from memcmp to strncmp so that we don't read bytes beyond the end
    of the string.
    
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87e87b655801993eb9cd1aba7418bd2a0a152bd1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13af7118da01f6daf6a1aa4cdddc4836952472c3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2617f9af19ce93c509ebf3fd3ce26048b8f85216
Author: Yue Haibing <yuehaibing@huawei.com>
Date:   Thu Mar 21 22:42:23 2019 +0800

    fm10k: Fix a potential NULL pointer dereference
    
    commit 01ca667133d019edc9f0a1f70a272447c84ec41f upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573
    Code: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00
    RSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080
    RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000
    R10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001
    R13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001
    FS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211
     __mutex_lock_common kernel/locking/mutex.c:925 [inline]
     __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072
     drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934
     destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc
    R13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff
    
    If alloc_workqueue fails, it should return -ENOMEM, otherwise may
    trigger this NULL pointer dereference while unloading drivers.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 0a38c17a21a0 ("fm10k: Remove create_workqueue")
    Signed-off-by: Yue Haibing <yuehaibing@huawei.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8946d9cbd1fc969b094fafaac590d06e46f739c
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 15 00:43:00 2019 +0200

    netfilter: ebtables: CONFIG_COMPAT: drop a bogus WARN_ON
    
    commit 7caa56f006e9d712b44f27b32520c66420d5cbc6 upstream.
    
    It means userspace gave us a ruleset where there is some other
    data after the ebtables target but before the beginning of the next rule.
    
    Fixes: 81e675c227ec ("netfilter: ebtables: add CONFIG_COMPAT support")
    Reported-by: syzbot+659574e7bcc7f7eb4df7@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba4837023eba2b8799d62892f938f86b1a01d218
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Mar 30 10:21:07 2019 +0900

    NFS: Forbid setting AF_INET6 to "struct sockaddr_in"->sin_family.
    
    commit 7c2bd9a39845bfb6d72ddb55ce737650271f6f96 upstream.
    
    syzbot is reporting uninitialized value at rpc_sockaddr2uaddr() [1]. This
    is because syzbot is setting AF_INET6 to "struct sockaddr_in"->sin_family
    (which is embedded into user-visible "struct nfs_mount_data" structure)
    despite nfs23_validate_mount_data() cannot pass sizeof(struct sockaddr_in6)
    bytes of AF_INET6 address to rpc_sockaddr2uaddr().
    
    Since "struct nfs_mount_data" structure is user-visible, we can't change
    "struct nfs_mount_data" to use "struct sockaddr_storage". Therefore,
    assuming that everybody is using AF_INET family when passing address via
    "struct nfs_mount_data"->addr, reject if its sin_family is not AF_INET.
    
    [1] https://syzkaller.appspot.com/bug?id=599993614e7cbbf66bc2656a919ab2a95fb5d75c
    
    Reported-by: syzbot <syzbot+047a11c361b872896a4f@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c22cb4bd1a35fb86ef00547031b975e3235201e8
Author: luca abeni <luca.abeni@santannapisa.it>
Date:   Mon Mar 25 14:15:30 2019 +0100

    sched/deadline: Correctly handle active 0-lag timers
    
    commit 1b02cd6a2d7f3e2a6a5262887d2cb2912083e42f upstream.
    
    syzbot reported the following warning:
    
       [ ] WARNING: CPU: 4 PID: 17089 at kernel/sched/deadline.c:255 task_non_contending+0xae0/0x1950
    
    line 255 of deadline.c is:
    
            WARN_ON(hrtimer_active(&dl_se->inactive_timer));
    
    in task_non_contending().
    
    Unfortunately, in some cases (for example, a deadline task
    continuosly blocking and waking immediately) it can happen that
    a task blocks (and task_non_contending() is called) while the
    0-lag timer is still active.
    
    In this case, the safest thing to do is to immediately decrease
    the running bandwidth of the task, without trying to re-arm the 0-lag timer.
    
    Signed-off-by: luca abeni <luca.abeni@santannapisa.it>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Juri Lelli <juri.lelli@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: chengjian (D) <cj.chengjian@huawei.com>
    Link: https://lkml.kernel.org/r/20190325131530.34706-1-luca.abeni@santannapisa.it
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33c6b9ca70a8b066a613e2a3d0331ae8f82aa31a
Author: Todd Kjos <tkjos@android.com>
Date:   Thu Feb 14 15:22:57 2019 -0800

    binder: fix handling of misaligned binder object
    
    commit 26528be6720bb40bc8844e97ee73a37e530e9c5e upstream.
    
    Fixes crash found by syzbot:
    kernel BUG at drivers/android/binder_alloc.c:LINE! (2)
    
    Reported-and-tested-by: syzbot+55de1eb4975dec156d8f@syzkaller.appspotmail.com
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: stable <stable@vger.kernel.org> # 5.0, 4.19, 4.14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44579653c9ab9bb1be04888f285ba4c20c924217
Author: Andrea Claudi <aclaudi@redhat.com>
Date:   Fri Feb 15 17:51:48 2019 +0100

    ipvs: fix warning on unused variable
    
    commit c93a49b9769e435990c82297aa0baa31e1538790 upstream.
    
    When CONFIG_IP_VS_IPV6 is not defined, build produced this warning:
    
    net/netfilter/ipvs/ip_vs_ctl.c:899:6: warning: unused variable ‘ret’ [-Wunused-variable]
      int ret = 0;
          ^~~
    
    Fix this by moving the declaration of 'ret' in the CONFIG_IP_VS_IPV6
    section in the same function.
    
    While at it, drop its unneeded initialisation.
    
    Fixes: 098e13f5b21d ("ipvs: fix dependency on nf_defrag_ipv6")
    Reported-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Andrea Claudi <aclaudi@redhat.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a50d8db5f3ec1cd11d97fffca6ba242cff18f1ea
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Apr 25 22:24:05 2019 -0700

    fs/proc/proc_sysctl.c: Fix a NULL pointer dereference
    
    commit 89189557b47b35683a27c80ee78aef18248eefb4 upstream.
    
    Syzkaller report this:
    
      sysctl could not get directory: /net//bridge -12
      kasan: CONFIG_KASAN_INLINE enabled
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      general protection fault: 0000 [#1] SMP KASAN PTI
      CPU: 1 PID: 7027 Comm: syz-executor.0 Tainted: G         C        5.1.0-rc3+ #8
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
      RIP: 0010:__write_once_size include/linux/compiler.h:220 [inline]
      RIP: 0010:__rb_change_child include/linux/rbtree_augmented.h:144 [inline]
      RIP: 0010:__rb_erase_augmented include/linux/rbtree_augmented.h:186 [inline]
      RIP: 0010:rb_erase+0x5f4/0x19f0 lib/rbtree.c:459
      Code: 00 0f 85 60 13 00 00 48 89 1a 48 83 c4 18 5b 5d 41 5c 41 5d 41 5e 41 5f c3 48 89 f2 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 75 0c 00 00 4d 85 ed 4c 89 2e 74 ce 4c 89 ea 48
      RSP: 0018:ffff8881bb507778 EFLAGS: 00010206
      RAX: dffffc0000000000 RBX: ffff8881f224b5b8 RCX: ffffffff818f3f6a
      RDX: 000000000000000a RSI: 0000000000000050 RDI: ffff8881f224b568
      RBP: 0000000000000000 R08: ffffed10376a0ef4 R09: ffffed10376a0ef4
      R10: 0000000000000001 R11: ffffed10376a0ef4 R12: ffff8881f224b558
      R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
      FS:  00007f3e7ce13700(0000) GS:ffff8881f7300000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007fd60fbe9398 CR3: 00000001cb55c001 CR4: 00000000007606e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
       erase_entry fs/proc/proc_sysctl.c:178 [inline]
       erase_header+0xe3/0x160 fs/proc/proc_sysctl.c:207
       start_unregistering fs/proc/proc_sysctl.c:331 [inline]
       drop_sysctl_table+0x558/0x880 fs/proc/proc_sysctl.c:1631
       get_subdir fs/proc/proc_sysctl.c:1022 [inline]
       __register_sysctl_table+0xd65/0x1090 fs/proc/proc_sysctl.c:1335
       br_netfilter_init+0x68/0x1000 [br_netfilter]
       do_one_initcall+0xbc/0x47d init/main.c:901
       do_init_module+0x1b5/0x547 kernel/module.c:3456
       load_module+0x6405/0x8c10 kernel/module.c:3804
       __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
       do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      Modules linked in: br_netfilter(+) backlight comedi(C) hid_sensor_hub max3100 ti_ads8688 udc_core fddi snd_mona leds_gpio rc_streamzap mtd pata_netcell nf_log_common rc_winfast udp_tunnel snd_usbmidi_lib snd_usb_toneport snd_usb_line6 snd_rawmidi snd_seq_device snd_hwdep videobuf2_v4l2 videobuf2_common videodev media videobuf2_vmalloc videobuf2_memops rc_gadmei_rm008z 8250_of smm665 hid_tmff hid_saitek hwmon_vid rc_ati_tv_wonder_hd_600 rc_core pata_pdc202xx_old dn_rtmsg as3722 ad714x_i2c ad714x snd_soc_cs4265 hid_kensington panel_ilitek_ili9322 drm drm_panel_orientation_quirks ipack cdc_phonet usbcore phonet hid_jabra hid extcon_arizona can_dev industrialio_triggered_buffer kfifo_buf industrialio adm1031 i2c_mux_ltc4306 i2c_mux ipmi_msghandler mlxsw_core snd_soc_cs35l34 snd_soc_core snd_pcm_dmaengine snd_pcm snd_timer ac97_bus snd_compress snd soundcore gpio_da9055 uio ecdh_generic mdio_thunder of_mdio fixed_phy libphy mdio_cavium iptable_security iptable_raw iptable_mangle
       iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_vti ip_gre ipip sit tunnel4 ip_tunnel hsr veth netdevsim vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon dummy team bonding vcan bridge stp llc ip6_gre gre ip6_tunnel tunnel6 tun joydev mousedev ppdev tpm kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel ide_pci_generic piix aes_x86_64 crypto_simd cryptd ide_core glue_helper input_leds psmouse intel_agp intel_gtt serio_raw ata_generic i2c_piix4 agpgart pata_acpi parport_pc parport floppy rtc_cmos sch_fq_codel ip_tables x_tables sha1_ssse3 sha1_generic ipv6 [last unloaded: br_netfilter]
      Dumping ftrace buffer:
         (ftrace buffer empty)
      ---[ end trace 68741688d5fbfe85 ]---
    
    commit 23da9588037e ("fs/proc/proc_sysctl.c: fix NULL pointer
    dereference in put_links") forgot to handle start_unregistering() case,
    while header->parent is NULL, it calls erase_header() and as seen in the
    above syzkaller call trace, accessing &header->parent->root will trigger
    a NULL pointer dereference.
    
    As that commit explained, there is also no need to call
    start_unregistering() if header->parent is NULL.
    
    Link: http://lkml.kernel.org/r/20190409153622.28112-1-yuehaibing@huawei.com
    Fixes: 23da9588037e ("fs/proc/proc_sysctl.c: fix NULL pointer dereference in put_links")
    Fixes: 0e47c99d7fe25 ("sysctl: Replace root_list with links between sysctl_table_sets")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01b6f50f90387c1f020bcf3cd684d24e3f0c16c5
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Fri Mar 1 10:09:55 2019 +0200

    intel_th: gth: Fix an off-by-one in output unassigning
    
    commit 91d3f8a629849968dc91d6ce54f2d46abf4feb7f upstream.
    
    Commit 9ed3f22223c3 ("intel_th: Don't reference unassigned outputs")
    fixes a NULL dereference for all masters except the last one ("256+"),
    which keeps the stale pointer after the output driver had been unassigned.
    
    Fix the off-by-one.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 9ed3f22223c3 ("intel_th: Don't reference unassigned outputs")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da0bbf51bdcb043fad034b6ccabc0775bd5397bc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 25 16:13:58 2019 -0700

    slip: make slhc_free() silently accept an error pointer
    
    commit baf76f0c58aec435a3a864075b8f6d8ee5d1f17e upstream.
    
    This way, slhc_free() accepts what slhc_init() returns, whether that is
    an error or not.
    
    In particular, the pattern in sl_alloc_bufs() is
    
            slcomp = slhc_init(16, 16);
            ...
            slhc_free(slcomp);
    
    for the error handling path, and rather than complicate that code, just
    make it ok to always free what was returned by the init function.
    
    That's what the code used to do before commit 4ab42d78e37a ("ppp, slip:
    Validate VJ compression slot parameters completely") when slhc_init()
    just returned NULL for the error case, with no actual indication of the
    details of the error.
    
    Reported-by: syzbot+45474c076a4927533d2e@syzkaller.appspotmail.com
    Fixes: 4ab42d78e37a ("ppp, slip: Validate VJ compression slot parameters completely")
    Acked-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: David Miller <davem@davemloft.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dabc887d133afce32a58c022cb114c53d156e21
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 upstream.
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0be0231ac9fc72c9877d887d563903ccb9be745f
Author: Adalbert Lazăr <alazar@bitdefender.com>
Date:   Wed Mar 6 12:13:53 2019 +0200

    vsock/virtio: fix kernel panic from virtio_transport_reset_no_sock
    
    commit 4c404ce23358d5d8fbdeb7a6021a9b33d3c3c167 upstream.
    
    Previous to commit 22b5c0b63f32 ("vsock/virtio: fix kernel panic
    after device hot-unplug"), vsock_core_init() was called from
    virtio_vsock_probe(). Now, virtio_transport_reset_no_sock() can be called
    before vsock_core_init() has the chance to run.
    
    [Wed Feb 27 14:17:09 2019] BUG: unable to handle kernel NULL pointer dereference at 0000000000000110
    [Wed Feb 27 14:17:09 2019] #PF error: [normal kernel read fault]
    [Wed Feb 27 14:17:09 2019] PGD 0 P4D 0
    [Wed Feb 27 14:17:09 2019] Oops: 0000 [#1] SMP PTI
    [Wed Feb 27 14:17:09 2019] CPU: 3 PID: 59 Comm: kworker/3:1 Not tainted 5.0.0-rc7-390-generic-hvi #390
    [Wed Feb 27 14:17:09 2019] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [Wed Feb 27 14:17:09 2019] Workqueue: virtio_vsock virtio_transport_rx_work [vmw_vsock_virtio_transport]
    [Wed Feb 27 14:17:09 2019] RIP: 0010:virtio_transport_reset_no_sock+0x8c/0xc0 [vmw_vsock_virtio_transport_common]
    [Wed Feb 27 14:17:09 2019] Code: 35 8b 4f 14 48 8b 57 08 31 f6 44 8b 4f 10 44 8b 07 48 8d 7d c8 e8 84 f8 ff ff 48 85 c0 48 89 c3 74 2a e8 f7 31 03 00 48 89 df <48> 8b 80 10 01 00 00 e8 68 fb 69 ed 48 8b 75 f0 65 48 33 34 25 28
    [Wed Feb 27 14:17:09 2019] RSP: 0018:ffffb42701ab7d40 EFLAGS: 00010282
    [Wed Feb 27 14:17:09 2019] RAX: 0000000000000000 RBX: ffff9d79637ee080 RCX: 0000000000000003
    [Wed Feb 27 14:17:09 2019] RDX: 0000000000000001 RSI: 0000000000000002 RDI: ffff9d79637ee080
    [Wed Feb 27 14:17:09 2019] RBP: ffffb42701ab7d78 R08: ffff9d796fae70e0 R09: ffff9d796f403500
    [Wed Feb 27 14:17:09 2019] R10: ffffb42701ab7d90 R11: 0000000000000000 R12: ffff9d7969d09240
    [Wed Feb 27 14:17:09 2019] R13: ffff9d79624e6840 R14: ffff9d7969d09318 R15: ffff9d796d48ff80
    [Wed Feb 27 14:17:09 2019] FS:  0000000000000000(0000) GS:ffff9d796fac0000(0000) knlGS:0000000000000000
    [Wed Feb 27 14:17:09 2019] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [Wed Feb 27 14:17:09 2019] CR2: 0000000000000110 CR3: 0000000427f22000 CR4: 00000000000006e0
    [Wed Feb 27 14:17:09 2019] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [Wed Feb 27 14:17:09 2019] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [Wed Feb 27 14:17:09 2019] Call Trace:
    [Wed Feb 27 14:17:09 2019]  virtio_transport_recv_pkt+0x63/0x820 [vmw_vsock_virtio_transport_common]
    [Wed Feb 27 14:17:09 2019]  ? kfree+0x17e/0x190
    [Wed Feb 27 14:17:09 2019]  ? detach_buf_split+0x145/0x160
    [Wed Feb 27 14:17:09 2019]  ? __switch_to_asm+0x40/0x70
    [Wed Feb 27 14:17:09 2019]  virtio_transport_rx_work+0xa0/0x106 [vmw_vsock_virtio_transport]
    [Wed Feb 27 14:17:09 2019] NET: Registered protocol family 40
    [Wed Feb 27 14:17:09 2019]  process_one_work+0x167/0x410
    [Wed Feb 27 14:17:09 2019]  worker_thread+0x4d/0x460
    [Wed Feb 27 14:17:09 2019]  kthread+0x105/0x140
    [Wed Feb 27 14:17:09 2019]  ? rescuer_thread+0x360/0x360
    [Wed Feb 27 14:17:09 2019]  ? kthread_destroy_worker+0x50/0x50
    [Wed Feb 27 14:17:09 2019]  ret_from_fork+0x35/0x40
    [Wed Feb 27 14:17:09 2019] Modules linked in: vmw_vsock_virtio_transport vmw_vsock_virtio_transport_common input_leds vsock serio_raw i2c_piix4 mac_hid qemu_fw_cfg autofs4 cirrus ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops virtio_net psmouse drm net_failover pata_acpi virtio_blk failover floppy
    
    Fixes: 22b5c0b63f32 ("vsock/virtio: fix kernel panic after device hot-unplug")
    Reported-by: Alexandru Herghelegiu <aherghelegiu@bitdefender.com>
    Signed-off-by: Adalbert Lazăr <alazar@bitdefender.com>
    Co-developed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9d262229d646ca28d3aaca2b46906d92f9b6c6f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Feb 21 11:17:34 2019 -0500

    ext4: fix some error pointer dereferences
    
    commit 7159a986b4202343f6cca3bb8079ecace5816fd6 upstream.
    
    We can't pass error pointers to brelse().
    
    Fixes: fb265c9cb49e ("ext4: add ext4_sb_bread() to disambiguate ENOMEM cases")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0feaa3aeea0914a33a2da33d5e9480d4a17b27e2
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sat Jan 12 03:54:25 2019 +0800

    USB: Consolidate LPM checks to avoid enabling LPM twice
    
    commit d7a6c0ce8d26412903c7981503bad9e1cc7c45d2 upstream.
    
    USB Bluetooth controller QCA ROME (0cf3:e007) sometimes stops working
    after S3:
    [ 165.110742] Bluetooth: hci0: using NVM file: qca/nvm_usb_00000302.bin
    [ 168.432065] Bluetooth: hci0: Failed to send body at 4 of 1953 (-110)
    
    After some experiments, I found that disabling LPM can workaround the
    issue.
    
    On some platforms, the USB power is cut during S3, so the driver uses
    reset-resume to resume the device. During port resume, LPM gets enabled
    twice, by usb_reset_and_verify_device() and usb_port_resume().
    
    Consolidate all checks into new LPM helpers to make sure LPM only gets
    enabled once.
    
    Fixes: de68bab4fa96 ("usb: Don't enable USB 2.0 Link PM by default.”)
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org> # after much soaking
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 277519b646caa25d1afa986bc62091576ceaecdf
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sat Jan 12 03:54:24 2019 +0800

    USB: Add new USB LPM helpers
    
    commit 7529b2574a7aaf902f1f8159fbc2a7caa74be559 upstream.
    
    Use new helpers to make LPM enabling/disabling more clear.
    
    This is a preparation to subsequent patch.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org> # after much soaking
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c13229b3003e142971a0551fbac74fd6b1c62951
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed Apr 24 17:06:29 2019 +0200

    drm/vc4: Fix compilation error reported by kbuild test bot
    
    commit 462ce5d963f18b71c63f6b7730a35a2ee5273540 upstream.
    
    A pointer to crtc was missing, resulting in the following build error:
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse: sparse: incorrect type in argument 1 (different base types)
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse:    expected struct drm_crtc *crtc
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:44: sparse:    got struct drm_crtc_state *state
    drivers/gpu/drm/vc4/vc4_crtc.c:1045:39: sparse: sparse: not enough arguments for function vc4_crtc_destroy_state
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reported-by: kbuild test robot <lkp@intel.com>
    Cc: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/2b6ed5e6-81b0-4276-8860-870b54ca3262@linux.intel.com
    Fixes: d08106796a78 ("drm/vc4: Fix memory leak during gpu reset.")
    Cc: <stable@vger.kernel.org> # v4.6+
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 261eff5dd5b67d9424f2ac5f1f95e89fbdc50b3b
Author: Dave Airlie <airlied@redhat.com>
Date:   Wed Apr 24 10:47:56 2019 +1000

    Revert "drm/i915/fbdev: Actually configure untiled displays"
    
    commit 9fa246256e09dc30820524401cdbeeaadee94025 upstream.
    
    This reverts commit d179b88deb3bf6fed4991a31fd6f0f2cad21fab5.
    
    This commit is documented to break userspace X.org modesetting driver in certain configurations.
    
    The X.org modesetting userspace driver is broken. No fixes are available yet. In order for this patch to be applied it either needs a config option or a workaround developed.
    
    This has been reported a few times, saying it's a userspace problem is clearly against the regression rules.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=109806
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Cc: <stable@vger.kernel.org> # v3.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8bf63442f9ca4694f4ab28e62e3b9bc84cfffa7d
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Fri Mar 1 13:56:11 2019 +0100

    drm/vc4: Fix memory leak during gpu reset.
    
    commit d08106796a78a4273e39e1bbdf538dc4334b2635 upstream.
    
    __drm_atomic_helper_crtc_destroy_state does not free memory, it only
    cleans it up. Fix this by calling the functions own destroy function.
    
    Fixes: 6d6e50039187 ("drm/vc4: Allocate the right amount of space for boot-time CRTC state.")
    Cc: Eric Anholt <eric@anholt.net>
    Cc: <stable@vger.kernel.org> # v4.6+
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190301125627.7285-2-maarten.lankhorst@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c433c36e7ed5b0ed33d725138ec130ab2a23c8c6
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Apr 12 22:34:18 2019 +0100

    ARM: 8857/1: efi: enable CP15 DMB instructions before cleaning the cache
    
    commit e17b1af96b2afc38e684aa2f1033387e2ed10029 upstream.
    
    The EFI stub is entered with the caches and MMU enabled by the
    firmware, and once the stub is ready to hand over to the decompressor,
    we clean and disable the caches.
    
    The cache clean routines use CP15 barrier instructions, which can be
    disabled via SCTLR. Normally, when using the provided cache handling
    routines to enable the caches and MMU, this bit is enabled as well.
    However, but since we entered the stub with the caches already enabled,
    this routine is not executed before we call the cache clean routines,
    resulting in undefined instruction exceptions if the firmware never
    enabled this bit.
    
    So set the bit explicitly in the EFI entry code, but do so in a way that
    guarantees that the resulting code can still run on v6 cores as well
    (which are guaranteed to have CP15 barriers enabled)
    
    Cc: <stable@vger.kernel.org> # v4.9+
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5db50e4f36f331d60830a771252aeae5beff01e9
Author: Dirk Behme <dirk.behme@de.bosch.com>
Date:   Fri Apr 12 07:29:13 2019 +0200

    dmaengine: sh: rcar-dmac: With cyclic DMA residue 0 is valid
    
    commit 907bd68a2edc491849e2fdcfe52c4596627bca94 upstream.
    
    Having a cyclic DMA, a residue 0 is not an indication of a completed
    DMA. In case of cyclic DMA make sure that dma_set_residue() is called
    and with this a residue of 0 is forwarded correctly to the caller.
    
    Fixes: 3544d2878817 ("dmaengine: rcar-dmac: use result of updated get_residue in tx_status")
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Signed-off-by: Achim Dahlhoff <Achim.Dahlhoff@de.bosch.com>
    Signed-off-by: Hiroyuki Yokoyama <hiroyuki.yokoyama.vx@renesas.com>
    Signed-off-by: Yao Lihua <ylhuajnu@outlook.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73a95f1a41c0bb586b8c62622ebf25aca1582af3
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Wed Apr 3 12:36:21 2019 -0600

    vfio/type1: Limit DMA mappings per container
    
    commit 492855939bdb59c6f947b0b5b44af9ad82b7e38c upstream.
    
    Memory backed DMA mappings are accounted against a user's locked
    memory limit, including multiple mappings of the same memory.  This
    accounting bounds the number of such mappings that a user can create.
    However, DMA mappings that are not backed by memory, such as DMA
    mappings of device MMIO via mmaps, do not make use of page pinning
    and therefore do not count against the user's locked memory limit.
    These mappings still consume memory, but the memory is not well
    associated to the process for the purpose of oom killing a task.
    
    To add bounding on this use case, we introduce a limit to the total
    number of concurrent DMA mappings that a user is allowed to create.
    This limit is exposed as a tunable module option where the default
    value of 64K is expected to be well in excess of any reasonable use
    case (a large virtual machine configuration would typically only make
    use of tens of concurrent mappings).
    
    This fixes CVE-2019-3882.
    
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Tested-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14ce45a0103d0bd086857539ec96a2a0bcda4d48
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Fri Apr 26 17:22:01 2019 -0700

    Input: synaptics-rmi4 - write config register values to the right offset
    
    commit 3a349763cf11e63534b8f2d302f2d0c790566497 upstream.
    
    Currently any changed config register values don't take effect, as the
    function to write them back is called with the wrong register offset.
    
    Fixes: ff8f83708b3e (Input: synaptics-rmi4 - add support for 2D
                         sensors and F11)
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 790899da35fa894c8d916c612aadb9f4e8631ed5
Author: NeilBrown <neilb@suse.com>
Date:   Fri Apr 5 11:34:40 2019 +1100

    sunrpc: don't mark uninitialised items as VALID.
    
    commit d58431eacb226222430940134d97bfd72f292fcd upstream.
    
    A recent commit added a call to cache_fresh_locked()
    when an expired item was found.
    The call sets the CACHE_VALID flag, so it is important
    that the item actually is valid.
    There are two ways it could be valid:
    1/ If ->update has been called to fill in relevant content
    2/ if CACHE_NEGATIVE is set, to say that content doesn't exist.
    
    An expired item that is waiting for an update will be neither.
    Setting CACHE_VALID will mean that a subsequent call to cache_put()
    will be likely to dereference uninitialised pointers.
    
    So we must make sure the item is valid, and we already have code to do
    that in try_to_negate_entry().  This takes the hash lock and so cannot
    be used directly, so take out the two lines that we need and use them.
    
    Now cache_fresh_locked() is certain to be called only on
    a valid item.
    
    Cc: stable@kernel.org # 2.6.35
    Fixes: 4ecd55ea0742 ("sunrpc: fix cache_head leak due to queued request")
    Signed-off-by: NeilBrown <neilb@suse.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f08c65298341a0a62e57f66ddee6849f0d0654a9
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Fri Apr 5 08:54:37 2019 -0700

    nfsd: Don't release the callback slot unless it was actually held
    
    commit e6abc8caa6deb14be2a206253f7e1c5e37e9515b upstream.
    
    If there are multiple callbacks queued, waiting for the callback
    slot when the callback gets shut down, then they all currently
    end up acting as if they hold the slot, and call
    nfsd4_cb_sequence_done() resulting in interesting side-effects.
    
    In addition, the 'retry_nowait' path in nfsd4_cb_sequence_done()
    causes a loop back to nfsd4_cb_prepare() without first freeing the
    slot, which causes a deadlock when nfsd41_cb_get_slot() gets called
    a second time.
    
    This patch therefore adds a boolean to track whether or not the
    callback did pick up the slot, so that it can do the right thing
    in these 2 cases.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be539bbf3c8619bccc6b74825710f1ff7a8bb068
Author: Yan, Zheng <zyan@redhat.com>
Date:   Thu Apr 18 11:24:57 2019 +0800

    ceph: fix ci->i_head_snapc leak
    
    commit 37659182bff1eeaaeadcfc8f853c6d2b6dbc3f47 upstream.
    
    We missed two places that i_wrbuffer_ref_head, i_wr_ref, i_dirty_caps
    and i_flushing_caps may change. When they are all zeros, we should free
    i_head_snapc.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/38224
    Reported-and-tested-by: Luis Henriques <lhenriques@suse.com>
    Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08152ac980c608f5add894b0f34d111f1fe50be4
Author: Jeff Layton <jlayton@kernel.org>
Date:   Wed Apr 17 12:58:28 2019 -0400

    ceph: ensure d_name stability in ceph_dentry_hash()
    
    commit 76a495d666e5043ffc315695f8241f5e94a98849 upstream.
    
    Take the d_lock here to ensure that d_name doesn't change.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc97f988b736c678a921cba87a350e6833489f82
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Apr 15 12:00:42 2019 -0400

    ceph: only use d_name directly when parent is locked
    
    commit 1bcb344086f3ecf8d6705f6d708441baa823beb3 upstream.
    
    Ben reported tripping the BUG_ON in create_request_message during some
    performance testing. Analysis of the vmcore showed that the length of
    the r_dentry->d_name string changed after we allocated the buffer, but
    before we encoded it.
    
    build_dentry_path returns pointers to d_name in the common case of
    non-snapped dentries, but this optimization isn't safe unless the parent
    directory is locked. When it isn't, have the code make a copy of the
    d_name while holding the d_lock.
    
    Cc: stable@vger.kernel.org
    Reported-by: Ben England <bengland@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4713de969c4b20a71fd3905af19e8b3904e7425
Author: Xie XiuQi <xiexiuqi@huawei.com>
Date:   Sat Apr 20 16:34:16 2019 +0800

    sched/numa: Fix a possible divide-by-zero
    
    commit a860fa7b96e1a1c974556327aa1aee852d434c21 upstream.
    
    sched_clock_cpu() may not be consistent between CPUs. If a task
    migrates to another CPU, then se.exec_start is set to that CPU's
    rq_clock_task() by update_stats_curr_start(). Specifically, the new
    value might be before the old value due to clock skew.
    
    So then if in numa_get_avg_runtime() the expression:
    
      'now - p->last_task_numa_placement'
    
    ends up as -1, then the divider '*period + 1' in task_numa_placement()
    is 0 and things go bang. Similar to update_curr(), check if time goes
    backwards to avoid this.
    
    [ peterz: Wrote new changelog. ]
    [ mingo: Tweaked the code comment. ]
    
    Signed-off-by: Xie XiuQi <xiexiuqi@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: cj.chengjian@huawei.com
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20190425080016.GX11158@hirez.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit daff434656562c3c8c9328945156ff241448d521
Author: Josh Collier <josh.d.collier@intel.com>
Date:   Mon Apr 15 11:34:22 2019 -0700

    IB/rdmavt: Fix frwr memory registration
    
    commit 7c39f7f671d2acc0a1f39ebbbee4303ad499bbfa upstream.
    
    Current implementation was not properly handling frwr memory
    registrations. This was uncovered by commit 27f26cec761das ("xprtrdma:
    Plant XID in on-the-wire RDMA offset (FRWR)") in which xprtrdma, which is
    used for NFS over RDMA, started failing as it was the first ULP to modify
    the ib_mr iova resulting in the NFS server getting REMOTE ACCESS ERROR
    when attempting to perform RDMA Writes to the client.
    
    The fix is to properly capture the true iova, offset, and length in the
    call to ib_map_mr_sg, and then update the iova when processing the
    IB_WR_REG_MEM on the send queue.
    
    Fixes: a41081aa5936 ("IB/rdmavt: Add support for ib_map_mr_sg")
    Cc: stable@vger.kernel.org
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Josh Collier <josh.d.collier@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c7bedd0ca381d05df5472a90154f9f28f2934df
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Apr 23 22:03:18 2019 +0200

    trace: Fix preempt_enable_no_resched() abuse
    
    commit d6097c9e4454adf1f8f2c9547c2fa6060d55d952 upstream.
    
    Unless the very next line is schedule(), or implies it, one must not use
    preempt_enable_no_resched(). It can cause a preemption to go missing and
    thereby cause arbitrary delays, breaking the PREEMPT=y invariant.
    
    Link: http://lkml.kernel.org/r/20190423200318.GY14281@hirez.programming.kicks-ass.net
    
    Cc: Waiman Long <longman@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: the arch/x86 maintainers <x86@kernel.org>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: huang ying <huang.ying.caritas@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: stable@vger.kernel.org
    Fixes: 2c2d7329d8af ("tracing/ftrace: use preempt_enable_no_resched_notrace in ring_buffer_time_stamp()")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85946150b26cc532356192f27ee893d6ec753c35
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Tue Apr 9 16:53:55 2019 +0200

    MIPS: scall64-o32: Fix indirect syscall number load
    
    commit 79b4a9cf0e2ea8203ce777c8d5cfa86c71eae86e upstream.
    
    Commit 4c21b8fd8f14 (MIPS: seccomp: Handle indirect system calls (o32))
    added indirect syscall detection for O32 processes running on MIPS64,
    but it did not work correctly for big endian kernel/processes. The
    reason is that the syscall number is loaded from ARG1 using the lw
    instruction while this is a 64-bit value, so zero is loaded instead of
    the syscall number.
    
    Fix the code by using the ld instruction instead. When running a 32-bit
    processes on a 64 bit CPU, the values are properly sign-extended, so it
    ensures the value passed to syscall_trace_enter is correct.
    
    Recent systemd versions with seccomp enabled whitelist the getpid
    syscall for their internal  processes (e.g. systemd-journald), but call
    it through syscall(SYS_getpid). This fix therefore allows O32 big endian
    systems with a 64-bit kernel to run recent systemd versions.
    
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Cc: <stable@vger.kernel.org> # v3.15+
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a326879fcca3140c350c3a8ba5e0f659242639b
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Apr 25 22:23:44 2019 -0700

    lib/Kconfig.debug: fix build error without CONFIG_BLOCK
    
    commit ae3d6a323347940f0548bbb4b17f0bb2e9164169 upstream.
    
    If CONFIG_TEST_KMOD is set to M, while CONFIG_BLOCK is not set, XFS and
    BTRFS can not be compiled successly.
    
    Link: http://lkml.kernel.org/r/20190410075434.35220-1-yuehaibing@huawei.com
    Fixes: d9c6a72d6fa2 ("kmod: add test driver to stress test the module loader")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f2739be115bb3edc70fc67f52b7767cb3490069
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Thu Apr 25 22:23:41 2019 -0700

    zram: pass down the bvec we need to read into in the work struct
    
    commit e153abc0739ff77bd89c9ba1688cdb963464af97 upstream.
    
    When scheduling work item to read page we need to pass down the proper
    bvec struct which points to the page to read into.  Before this patch it
    uses a randomly initialized bvec (only if PAGE_SIZE != 4096) which is
    wrong.
    
    Note that without this patch on arch/kernel where PAGE_SIZE != 4096
    userspace could read random memory through a zram block device (thought
    userspace probably would have no control on the address being read).
    
    Link: http://lkml.kernel.org/r/20190408183219.26377-1-jglisse@redhat.com
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aec0d4aad4613ea834b65070aba62ced4ec4e540
Author: Jann Horn <jannh@google.com>
Date:   Thu Apr 4 23:59:25 2019 +0200

    tracing: Fix buffer_ref pipe ops
    
    commit b987222654f84f7b4ca95b3a55eca784cb30235b upstream.
    
    This fixes multiple issues in buffer_pipe_buf_ops:
    
     - The ->steal() handler must not return zero unless the pipe buffer has
       the only reference to the page. But generic_pipe_buf_steal() assumes
       that every reference to the pipe is tracked by the page's refcount,
       which isn't true for these buffers - buffer_pipe_buf_get(), which
       duplicates a buffer, doesn't touch the page's refcount.
       Fix it by using generic_pipe_buf_nosteal(), which refuses every
       attempted theft. It should be easy to actually support ->steal, but the
       only current users of pipe_buf_steal() are the virtio console and FUSE,
       and they also only use it as an optimization. So it's probably not worth
       the effort.
     - The ->get() and ->release() handlers can be invoked concurrently on pipe
       buffers backed by the same struct buffer_ref. Make them safe against
       concurrency by using refcount_t.
     - The pointers stored in ->private were only zeroed out when the last
       reference to the buffer_ref was dropped. As far as I know, this
       shouldn't be necessary anyway, but if we do it, let's always do it.
    
    Link: http://lkml.kernel.org/r/20190404215925.253531-1-jannh@google.com
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: stable@vger.kernel.org
    Fixes: 73a757e63114d ("ring-buffer: Return reader page back into existing ring buffer")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cc7ae880836c5943a773148e7a936728c750430
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Fri Apr 19 21:22:59 2019 -0500

    tracing: Fix a memory leak by early error exit in trace_pid_write()
    
    commit 91862cc7867bba4ee5c8fcf0ca2f1d30427b6129 upstream.
    
    In trace_pid_write(), the buffer for trace parser is allocated through
    kmalloc() in trace_parser_get_init(). Later on, after the buffer is used,
    it is then freed through kfree() in trace_parser_put(). However, it is
    possible that trace_pid_write() is terminated due to unexpected errors,
    e.g., ENOMEM. In that case, the allocated buffer will not be freed, which
    is a memory leak bug.
    
    To fix this issue, free the allocated buffer when an error is encountered.
    
    Link: http://lkml.kernel.org/r/1555726979-15633-1-git-send-email-wang6495@umn.edu
    
    Fixes: f4d34a87e9c10 ("tracing: Use pid bitmap instead of a pid array for set_event_pid")
    Cc: stable@vger.kernel.org
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bc43c8776d413d0b22f1d4719b226df36825b37
Author: Frank Sorenson <sorenson@redhat.com>
Date:   Tue Apr 16 08:37:27 2019 -0500

    cifs: do not attempt cifs operation on smb2+ rename error
    
    commit 652727bbe1b17993636346716ae5867627793647 upstream.
    
    A path-based rename returning EBUSY will incorrectly try opening
    the file with a cifs (NT Create AndX) operation on an smb2+ mount,
    which causes the server to force a session close.
    
    If the mount is smb2+, skip the fallback.
    
    Signed-off-by: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f855871fc65a5dbe875df8bb13e7d018a542d93
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Feb 23 13:56:53 2018 +0900

    kbuild: simplify ld-option implementation
    
    commit 0294e6f4a0006856e1f36b8cd8fa088d9e499e98 upstream.
    
    Currently, linker options are tested by the coordination of $(CC) and
    $(LD) because $(LD) needs some object to link.
    
    As commit 86a9df597cdd ("kbuild: fix linker feature test macros when
    cross compiling with Clang") addressed, we need to make sure $(CC)
    and $(LD) agree the underlying architecture of the passed object.
    
    This could be a bit complex when we combine tools from different groups.
    For example, we can use clang for $(CC), but we still need to rely on
    GCC toolchain for $(LD).
    
    So, I was searching for a way of standalone testing of linker options.
    A trick I found is to use '-v'; this not only prints the version string,
    but also tests if the given option is recognized.
    
    If a given option is supported,
    
      $ aarch64-linux-gnu-ld -v --fix-cortex-a53-843419
      GNU ld (Linaro_Binutils-2017.11) 2.28.2.20170706
      $ echo $?
      0
    
    If unsupported,
    
      $ aarch64-linux-gnu-ld -v --fix-cortex-a53-843419
      GNU ld (crosstool-NG linaro-1.13.1-4.7-2013.04-20130415 - Linaro GCC 2013.04) 2.23.1
      aarch64-linux-gnu-ld: unrecognized option '--fix-cortex-a53-843419'
      aarch64-linux-gnu-ld: use the --help option for usage information
      $ echo $?
      1
    
    Gold works likewise.
    
      $ aarch64-linux-gnu-ld.gold -v --fix-cortex-a53-843419
      GNU gold (Linaro_Binutils-2017.11 2.28.2.20170706) 1.14
      masahiro@pug:~/ref/linux$ echo $?
      0
      $ aarch64-linux-gnu-ld.gold -v --fix-cortex-a53-999999
      GNU gold (Linaro_Binutils-2017.11 2.28.2.20170706) 1.14
      aarch64-linux-gnu-ld.gold: --fix-cortex-a53-999999: unknown option
      aarch64-linux-gnu-ld.gold: use the --help option for usage information
      $ echo $?
      1
    
    LLD too.
    
      $ ld.lld -v --gc-sections
      LLD 7.0.0 (http://llvm.org/git/lld.git 4a0e4190e74cea19f8a8dc625ccaebdf8b5d1585) (compatible with GNU linkers)
      $ echo $?
      0
      $ ld.lld -v --fix-cortex-a53-843419
      LLD 7.0.0 (http://llvm.org/git/lld.git 4a0e4190e74cea19f8a8dc625ccaebdf8b5d1585) (compatible with GNU linkers)
      $ echo $?
      0
      $ ld.lld -v --fix-cortex-a53-999999
      ld.lld: error: unknown argument: --fix-cortex-a53-999999
      LLD 7.0.0 (http://llvm.org/git/lld.git 4a0e4190e74cea19f8a8dc625ccaebdf8b5d1585) (compatible with GNU linkers)
      $ echo $?
      1
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    [nc: try-run-cached was added later, just use try-run, which is the
         current mainline state]
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
