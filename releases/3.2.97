commit 3993a5061a845fe8d7a92b47e478265b0f5754d1
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Mon Jan 1 20:51:06 2018 +0000

    Linux 3.2.97

commit 5d8207e99e9baadab32d815772da60bff3a07eb5
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Dec 8 15:13:27 2017 +0000

    KEYS: add missing permission check for request_key() destination
    
    commit 4dca6ea1d9432052afb06baf2e3ae78188a4410b upstream.
    
    When the request_key() syscall is not passed a destination keyring, it
    links the requested key (if constructed) into the "default" request-key
    keyring.  This should require Write permission to the keyring.  However,
    there is actually no permission check.
    
    This can be abused to add keys to any keyring to which only Search
    permission is granted.  This is because Search permission allows joining
    the keyring.  keyctl_set_reqkey_keyring(KEY_REQKEY_DEFL_SESSION_KEYRING)
    then will set the default request-key keyring to the session keyring.
    Then, request_key() can be used to add keys to the keyring.
    
    Both negatively and positively instantiated keys can be added using this
    method.  Adding negative keys is trivial.  Adding a positive key is a
    bit trickier.  It requires that either /sbin/request-key positively
    instantiates the key, or that another thread adds the key to the process
    keyring at just the right time, such that request_key() misses it
    initially but then finds it in construct_alloc_key().
    
    Fix this bug by checking for Write permission to the keyring in
    construct_get_dest_keyring() when the default keyring is being used.
    
    We don't do the permission check for non-default keyrings because that
    was already done by the earlier call to lookup_user_key().  Also,
    request_key_and_link() is currently passed a 'struct key *' rather than
    a key_ref_t, so the "possessed" bit is unavailable.
    
    We also don't do the permission check for the "requestor keyring", to
    continue to support the use case described by commit 8bbf4976b59f
    ("KEYS: Alter use of key instantiation link-to-keyring argument") where
    /sbin/request-key recursively calls request_key() to add keys to the
    original requestor's destination keyring.  (I don't know of any users
    who actually do that, though...)
    
    Fixes: 3e30148c3d52 ("[PATCH] Keys: Make request-key create an authorisation key")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    [bwh: Backported to 3.2:
     - s/KEY_NEED_WRITE/KEY_WRITE/
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a63785d3294e9d7704db04500400fd8bb4b59a69
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Nov 28 18:01:38 2017 -0800

    crypto: hmac - require that the underlying hash algorithm is unkeyed
    
    commit af3ff8045bbf3e32f1a448542e73abb4c8ceb6f1 upstream.
    
    Because the HMAC template didn't check that its underlying hash
    algorithm is unkeyed, trying to use "hmac(hmac(sha3-512-generic))"
    through AF_ALG or through KEYCTL_DH_COMPUTE resulted in the inner HMAC
    being used without having been keyed, resulting in sha3_update() being
    called without sha3_init(), causing a stack buffer overflow.
    
    This is a very old bug, but it seems to have only started causing real
    problems when SHA-3 support was added (requires CONFIG_CRYPTO_SHA3)
    because the innermost hash's state is ->import()ed from a zeroed buffer,
    and it just so happens that other hash algorithms are fine with that,
    but SHA-3 is not.  However, there could be arch or hardware-dependent
    hash algorithms also affected; I couldn't test everything.
    
    Fix the bug by introducing a function crypto_shash_alg_has_setkey()
    which tests whether a shash algorithm is keyed.  Then update the HMAC
    template to require that its underlying hash algorithm is unkeyed.
    
    Here is a reproducer:
    
        #include <linux/if_alg.h>
        #include <sys/socket.h>
    
        int main()
        {
            int algfd;
            struct sockaddr_alg addr = {
                .salg_type = "hash",
                .salg_name = "hmac(hmac(sha3-512-generic))",
            };
            char key[4096] = { 0 };
    
            algfd = socket(AF_ALG, SOCK_SEQPACKET, 0);
            bind(algfd, (const struct sockaddr *)&addr, sizeof(addr));
            setsockopt(algfd, SOL_ALG, ALG_SET_KEY, key, sizeof(key));
        }
    
    Here was the KASAN report from syzbot:
    
        BUG: KASAN: stack-out-of-bounds in memcpy include/linux/string.h:341  [inline]
        BUG: KASAN: stack-out-of-bounds in sha3_update+0xdf/0x2e0  crypto/sha3_generic.c:161
        Write of size 4096 at addr ffff8801cca07c40 by task syzkaller076574/3044
    
        CPU: 1 PID: 3044 Comm: syzkaller076574 Not tainted 4.14.0-mm1+ #25
        Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS  Google 01/01/2011
        Call Trace:
          __dump_stack lib/dump_stack.c:17 [inline]
          dump_stack+0x194/0x257 lib/dump_stack.c:53
          print_address_description+0x73/0x250 mm/kasan/report.c:252
          kasan_report_error mm/kasan/report.c:351 [inline]
          kasan_report+0x25b/0x340 mm/kasan/report.c:409
          check_memory_region_inline mm/kasan/kasan.c:260 [inline]
          check_memory_region+0x137/0x190 mm/kasan/kasan.c:267
          memcpy+0x37/0x50 mm/kasan/kasan.c:303
          memcpy include/linux/string.h:341 [inline]
          sha3_update+0xdf/0x2e0 crypto/sha3_generic.c:161
          crypto_shash_update+0xcb/0x220 crypto/shash.c:109
          shash_finup_unaligned+0x2a/0x60 crypto/shash.c:151
          crypto_shash_finup+0xc4/0x120 crypto/shash.c:165
          hmac_finup+0x182/0x330 crypto/hmac.c:152
          crypto_shash_finup+0xc4/0x120 crypto/shash.c:165
          shash_digest_unaligned+0x9e/0xd0 crypto/shash.c:172
          crypto_shash_digest+0xc4/0x120 crypto/shash.c:186
          hmac_setkey+0x36a/0x690 crypto/hmac.c:66
          crypto_shash_setkey+0xad/0x190 crypto/shash.c:64
          shash_async_setkey+0x47/0x60 crypto/shash.c:207
          crypto_ahash_setkey+0xaf/0x180 crypto/ahash.c:200
          hash_setkey+0x40/0x90 crypto/algif_hash.c:446
          alg_setkey crypto/af_alg.c:221 [inline]
          alg_setsockopt+0x2a1/0x350 crypto/af_alg.c:254
          SYSC_setsockopt net/socket.c:1851 [inline]
          SyS_setsockopt+0x189/0x360 net/socket.c:1830
          entry_SYSCALL_64_fastpath+0x1f/0x96
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a1eb10d948c39388c5dea527aa4e76ac90a6a7e1
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Nov 28 20:56:59 2017 -0800

    crypto: salsa20 - fix blkcipher_walk API usage
    
    commit ecaaab5649781c5a0effdaf298a925063020500e upstream.
    
    When asked to encrypt or decrypt 0 bytes, both the generic and x86
    implementations of Salsa20 crash in blkcipher_walk_done(), either when
    doing 'kfree(walk->buffer)' or 'free_page((unsigned long)walk->page)',
    because walk->buffer and walk->page have not been initialized.
    
    The bug is that Salsa20 is calling blkcipher_walk_done() even when
    nothing is in 'walk.nbytes'.  But blkcipher_walk_done() is only meant to
    be called when a nonzero number of bytes have been provided.
    
    The broken code is part of an optimization that tries to make only one
    call to salsa20_encrypt_bytes() to process inputs that are not evenly
    divisible by 64 bytes.  To fix the bug, just remove this "optimization"
    and use the blkcipher_walk API the same way all the other users do.
    
    Reproducer:
    
        #include <linux/if_alg.h>
        #include <sys/socket.h>
        #include <unistd.h>
    
        int main()
        {
                int algfd, reqfd;
                struct sockaddr_alg addr = {
                        .salg_type = "skcipher",
                        .salg_name = "salsa20",
                };
                char key[16] = { 0 };
    
                algfd = socket(AF_ALG, SOCK_SEQPACKET, 0);
                bind(algfd, (void *)&addr, sizeof(addr));
                reqfd = accept(algfd, 0, 0);
                setsockopt(algfd, SOL_ALG, ALG_SET_KEY, key, sizeof(key));
                read(reqfd, key, sizeof(key));
        }
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Fixes: eb6f13eb9f81 ("[CRYPTO] salsa20_generic: Fix multi-page processing")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 26a8a3c531ae847048ee9126f07cb07424bd4724
Author: Wanpeng Li <wanpeng.li@hotmail.com>
Date:   Thu Dec 14 17:40:50 2017 -0800

    KVM: Fix stack-out-of-bounds read in write_mmio
    
    commit e39d200fa5bf5b94a0948db0dae44c1b73b84a56 upstream.
    
    Reported by syzkaller:
    
      BUG: KASAN: stack-out-of-bounds in write_mmio+0x11e/0x270 [kvm]
      Read of size 8 at addr ffff8803259df7f8 by task syz-executor/32298
    
      CPU: 6 PID: 32298 Comm: syz-executor Tainted: G           OE    4.15.0-rc2+ #18
      Hardware name: LENOVO ThinkCentre M8500t-N000/SHARKBAY, BIOS FBKTC1AUS 02/16/2016
      Call Trace:
       dump_stack+0xab/0xe1
       print_address_description+0x6b/0x290
       kasan_report+0x28a/0x370
       write_mmio+0x11e/0x270 [kvm]
       emulator_read_write_onepage+0x311/0x600 [kvm]
       emulator_read_write+0xef/0x240 [kvm]
       emulator_fix_hypercall+0x105/0x150 [kvm]
       em_hypercall+0x2b/0x80 [kvm]
       x86_emulate_insn+0x2b1/0x1640 [kvm]
       x86_emulate_instruction+0x39a/0xb90 [kvm]
       handle_exception+0x1b4/0x4d0 [kvm_intel]
       vcpu_enter_guest+0x15a0/0x2640 [kvm]
       kvm_arch_vcpu_ioctl_run+0x549/0x7d0 [kvm]
       kvm_vcpu_ioctl+0x479/0x880 [kvm]
       do_vfs_ioctl+0x142/0x9a0
       SyS_ioctl+0x74/0x80
       entry_SYSCALL_64_fastpath+0x23/0x9a
    
    The path of patched vmmcall will patch 3 bytes opcode 0F 01 C1(vmcall)
    to the guest memory, however, write_mmio tracepoint always prints 8 bytes
    through *(u64 *)val since kvm splits the mmio access into 8 bytes. This
    leaks 5 bytes from the kernel stack (CVE-2017-17741).  This patch fixes
    it by just accessing the bytes which we operate on.
    
    Before patch:
    
    syz-executor-5567  [007] .... 51370.561696: kvm_mmio: mmio write len 3 gpa 0x10 val 0x1ffff10077c1010f
    
    After patch:
    
    syz-executor-13416 [002] .... 51302.299573: kvm_mmio: mmio write len 3 gpa 0x10 val 0xc1010f
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Tested-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [bwh: Backported to 3.2:
     - Drop ARM changes
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit e48f3c144e9ea1133fb5747deeb76ef4c3582322
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Tue Mar 22 14:25:33 2016 -0700

    ptrace: change __ptrace_unlink() to clear ->ptrace under ->siglock
    
    commit 1333ab03150478df8d6f5673a91df1e50dc6ab97 upstream.
    
    This test-case (simplified version of generated by syzkaller)
    
            #include <unistd.h>
            #include <sys/ptrace.h>
            #include <sys/wait.h>
    
            void test(void)
            {
                    for (;;) {
                            if (fork()) {
                                    wait(NULL);
                                    continue;
                            }
    
                            ptrace(PTRACE_SEIZE, getppid(), 0, 0);
                            ptrace(PTRACE_INTERRUPT, getppid(), 0, 0);
                            _exit(0);
                    }
            }
    
            int main(void)
            {
                    int np;
    
                    for (np = 0; np < 8; ++np)
                            if (!fork())
                                    test();
    
                    while (wait(NULL) > 0)
                            ;
                    return 0;
            }
    
    triggers the 2nd WARN_ON_ONCE(!signr) warning in do_jobctl_trap().  The
    problem is that __ptrace_unlink() clears task->jobctl under siglock but
    task->ptrace is cleared without this lock held; this fools the "else"
    branch which assumes that !PT_SEIZED means PT_PTRACED.
    
    Note also that most of other PTRACE_SEIZE checks can race with detach
    from the exiting tracer too.  Say, the callers of ptrace_trap_notify()
    assume that SEIZED can't go away after it was checked.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: syzkaller <syzkaller@googlegroups.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9015cf5eb1447b3d06d8fcd240ba5475ce0e3773
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Tue Dec 19 23:35:38 2017 +0000

    security: Fix mode test in selinux_ptrace_access_check()
    
    Commit 1c8d42255f4c "ptrace: use fsuid, fsgid, effective creds for fs access
    checks" added flags to the ptrace mode which need to be ignored here.
    
    This change was made upstream in 3.3 as part of commit 69f594a38967
    "ptrace: do not audit capability check when outputing /proc/pid/stat", but
    that's probably not suitable for stable due to its dependencies.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 13b86808f7fabea496c02131f49fec46a84fb3c9
Author: Andrew Honig <ahonig@google.com>
Date:   Fri Dec 1 10:21:09 2017 -0800

    KVM: VMX: remove I/O port 0x80 bypass on Intel hosts
    
    commit d59d51f088014f25c2562de59b9abff4f42a7468 upstream.
    
    This fixes CVE-2017-1000407.
    
    KVM allows guests to directly access I/O port 0x80 on Intel hosts.  If
    the guest floods this port with writes it generates exceptions and
    instability in the host kernel, leading to a crash.  With this change
    guest writes to port 0x80 on Intel will behave the same as they
    currently behave on AMD systems.
    
    Prevent the flooding by removing the code that sets port 0x80 as a
    passthrough port.  This is essentially the same as upstream patch
    99f85a28a78e96d28907fe036e1671a218fee597, except that patch was
    for AMD chipsets and this patch is for Intel.
    
    Signed-off-by: Andrew Honig <ahonig@google.com>
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Fixes: fdef3ad1b386 ("KVM: VMX: Enable io bitmaps to avoid IO port 0x80 VMEXITs")
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 11a1db99b93dbb5f7b78cffe9b85e616ab749776
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Dec 12 14:25:13 2017 -0500

    USB: core: prevent malicious bNumInterfaces overflow
    
    commit 48a4ff1c7bb5a32d2e396b03132d20d552c0eca7 upstream.
    
    A malicious USB device with crafted descriptors can cause the kernel
    to access unallocated memory by setting the bNumInterfaces value too
    high in a configuration descriptor.  Although the value is adjusted
    during parsing, this adjustment is skipped in one of the error return
    paths.
    
    This patch prevents the problem by setting bNumInterfaces to 0
    initially.  The existing code already sets it to the proper value
    after parsing is complete.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit d5623517462d7bdf03cae13e8b713389b0cdd381
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Dec 19 06:20:59 2014 +0000

    Bluetooth: bnep: bnep_add_connection() should verify that it's dealing with l2cap socket
    
    commit 71bb99a02b32b4cc4265118e85f6035ca72923f0 upstream.
    
    same story as cmtp
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 16a6be25e09c31cb2825107886e5d22e61440413
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Dec 19 06:20:58 2014 +0000

    Bluetooth: cmtp: cmtp_add_connection() should verify that it's dealing with l2cap socket
    
    commit 96c26653ce65bf84f3212f8b00d4316c1efcbf4c upstream.
    
    ... rather than relying on ciptool(8) never passing it anything else.  Give
    it e.g. an AF_UNIX connected socket (from socketpair(2)) and it'll oops,
    trying to evaluate &l2cap_pi(sock->sk)->chan->dst...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 6b369a5d1ed6c5c04a76db01c21802e1ca11ec82
Author: David Herrmann <dh.herrmann@gmail.com>
Date:   Fri Apr 5 14:57:34 2013 +0200

    Bluetooth: hidp: verify l2cap sockets
    
    commit b3916db32c4a3124eee9f3742a2f4723731d7602 upstream.
    
    We need to verify that the given sockets actually are l2cap sockets. If
    they aren't, we are not supposed to access bt_sk(sock) and we shouldn't
    start the session if the offsets turn out to be valid local BT addresses.
    
    That is, if someone passes a TCP socket to HIDCONNADD, then we access some
    random offset in the TCP socket (which isn't even guaranteed to be valid).
    
    Fix this by checking that the socket is an l2cap socket.
    
    Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit e23d13a89d8ca5fe717d75248672e1b8bc4a3be8
Author: Mohamed Ghannam <simo.ghannam@gmail.com>
Date:   Tue Dec 5 20:58:35 2017 +0000

    dccp: CVE-2017-8824: use-after-free in DCCP code
    
    commit 69c64866ce072dea1d1e59a0d61e0f66c0dffb76 upstream.
    
    Whenever the sock object is in DCCP_CLOSED state,
    dccp_disconnect() must free dccps_hc_tx_ccid and
    dccps_hc_rx_ccid and set to NULL.
    
    Signed-off-by: Mohamed Ghannam <simo.ghannam@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit b3457d5470b1e82cf7a15e595577be493d07b7bf
Author: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
Date:   Sun Oct 29 16:27:20 2017 +0100

    MIPS: AR7: Ensure that serial ports are properly set up
    
    commit b084116f8587b222a2c5ef6dcd846f40f24b9420 upstream.
    
    Without UPF_FIXED_TYPE, the data from the PORT_AR7 uart_config entry is
    never copied, resulting in a dead port.
    
    Fixes: 154615d55459 ("MIPS: AR7: Use correct UART port type")
    Signed-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
    [jonas.gorski: add Fixes tag]
    Signed-off-by: Jonas Gorski <jonas.gorski@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Yoshihiro YUNOMAE <yoshihiro.yunomae.ez@hitachi.com>
    Cc: Nicolas Schichan <nschichan@freebox.fr>
    Cc: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
    Cc: linux-mips@linux-mips.org
    Cc: linux-serial@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/17543/
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 380478e6ea1962fe7d0de8a3bf9915a30f5d28bc
Author: Borislav Petkov <bp@suse.de>
Date:   Tue Nov 7 18:53:07 2017 +0100

    x86/oprofile/ppro: Do not use __this_cpu*() in preemptible context
    
    commit a743bbeef27b9176987ec0cb7f906ab0ab52d1da upstream.
    
    The warning below says it all:
    
      BUG: using __this_cpu_read() in preemptible [00000000] code: swapper/0/1
      caller is __this_cpu_preempt_check
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.14.0-rc8 #4
      Call Trace:
       dump_stack
       check_preemption_disabled
       ? do_early_param
       __this_cpu_preempt_check
       arch_perfmon_init
       op_nmi_init
       ? alloc_pci_root_info
       oprofile_arch_init
       oprofile_init
       do_one_initcall
       ...
    
    These accessors should not have been used in the first place: it is PPro so
    no mixed silicon revisions and thus it can simply use boot_cpu_data.
    
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Tested-by: Fengguang Wu <fengguang.wu@intel.com>
    Fix-creation-mandated-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Robert Richter <rric@kernel.org>
    Cc: x86@kernel.org
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ae634c7e3b6becd76a9f8490044fda58a7871722
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 7 16:05:24 2017 +0100

    ALSA: seq: Fix OSS sysex delivery in OSS emulation
    
    commit 132d358b183ac6ad8b3fea32ad5e0663456d18d1 upstream.
    
    The SYSEX event delivery in OSS sequencer emulation assumed that the
    event is encoded in the variable-length data with the straight
    buffering.  This was the normal behavior in the past, but during the
    development, the chained buffers were introduced for carrying more
    data, while the OSS code was left intact.  As a result, when a SYSEX
    event with the chained buffer data is passed to OSS sequencer port,
    it may end up with the wrong memory access, as if it were having a too
    large buffer.
    
    This patch addresses the bug, by applying the buffer data expansion by
    the generic snd_seq_dump_var_event() helper function.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reported-by: Mark Salyzyn <salyzyn@android.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8cd91d715b641d31b4b79f6dde178d1e3032988b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Nov 6 20:16:50 2017 +0100

    ALSA: seq: Avoid invalid lockdep class warning
    
    commit 3510c7aa069aa83a2de6dab2b41401a198317bdc upstream.
    
    The recent fix for adding rwsem nesting annotation was using the given
    "hop" argument as the lock subclass key.  Although the idea itself
    works, it may trigger a kernel warning like:
      BUG: looking up invalid subclass: 8
      ....
    since the lockdep has a smaller number of subclasses (8) than we
    currently allow for the hops there (10).
    
    The current definition is merely a sanity check for avoiding the too
    deep delivery paths, and the 8 hops are already enough.  So, as a
    quick fix, just follow the max hops as same as the max lockdep
    subclasses.
    
    Fixes: 1f20f9ff57ca ("ALSA: seq: Fix nested rwsem annotation for lockdep splat")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1e7e03e81806836de6078d15d41af7ad5ee301cf
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Thu Nov 2 18:44:28 2017 +0100

    ARM: 8720/1: ensure dump_instr() checks addr_limit
    
    commit b9dd05c7002ee0ca8b676428b2268c26399b5e31 upstream.
    
    When CONFIG_DEBUG_USER is enabled, it's possible for a user to
    deliberately trigger dump_instr() with a chosen kernel address.
    
    Let's avoid problems resulting from this by using get_user() rather than
    __get_user(), ensuring that we don't erroneously access kernel memory.
    
    So that we can use the same code to dump user instructions and kernel
    instructions, the common dumping code is factored out to __dump_instr(),
    with the fs manipulated appropriately in dump_instr() around calls to
    this.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 57a70fe807328d99a7e483592b883b2e8abaca13
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Nov 5 10:07:43 2017 +0100

    ALSA: timer: Limit max instances per timer
    
    commit 9b7d869ee5a77ed4a462372bb89af622e705bfb8 upstream.
    
    Currently we allow unlimited number of timer instances, and it may
    bring the system hogging way too much CPU when too many timer
    instances are opened and processed concurrently.  This may end up with
    a soft-lockup report as triggered by syzkaller, especially when
    hrtimer backend is deployed.
    
    Since such insane number of instances aren't demanded by the normal
    use case of ALSA sequencer and it merely  opens a risk only for abuse,
    this patch introduces the upper limit for the number of instances per
    timer backend.  As default, it's set to 1000, but for the fine-grained
    timer like hrtimer, it's set to 100.
    
    Reported-by: syzbot
    Tested-by: Jérôme Glisse <jglisse@redhat.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a6a1f3005929d1a7ed35d683ba4ce2a12aad7395
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 10 11:53:30 2016 +0100

    ALSA: timer: Protect the whole snd_timer_close() with open race
    
    commit 9984d1b5835ca29fc7025186a891ee7398d21cc7 upstream.
    
    In order to make the open/close more robust, widen the register_mutex
    protection over the whole snd_timer_close() function.  Also, the close
    procedure is slightly shuffled to be in the safer order, as well as a
    few code refactoring.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9b4658f3daaf2070c871eac06fbee7cebeb18ce8
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Nov 3 16:49:00 2017 +0100

    l2tp: don't use l2tp_tunnel_find() in l2tp_ip and l2tp_ip6
    
    commit 8f7dc9ae4a7aece9fbc3e6637bdfa38b36bcdf09 upstream.
    
    Using l2tp_tunnel_find() in l2tp_ip_recv() is wrong for two reasons:
    
      * It doesn't take a reference on the returned tunnel, which makes the
        call racy wrt. concurrent tunnel deletion.
    
      * The lookup is only based on the tunnel identifier, so it can return
        a tunnel that doesn't match the packet's addresses or protocol.
    
    For example, a packet sent to an L2TPv3 over IPv6 tunnel can be
    delivered to an L2TPv2 over UDPv4 tunnel. This is worse than a simple
    cross-talk: when delivering the packet to an L2TP over UDP tunnel, the
    corresponding socket is UDP, where ->sk_backlog_rcv() is NULL. Calling
    sk_receive_skb() will then crash the kernel by trying to execute this
    callback.
    
    And l2tp_tunnel_find() isn't even needed here. __l2tp_ip_bind_lookup()
    properly checks the socket binding and connection settings. It was used
    as a fallback mechanism for finding tunnels that didn't have their data
    path registered yet. But it's not limited to this case and can be used
    to replace l2tp_tunnel_find() in the general case.
    
    Fix l2tp_ip6 in the same way.
    
    Fixes: 0d76751fad77 ("l2tp: Add L2TPv3 IP encapsulation (no UDP) support")
    Fixes: a32e0eec7042 ("l2tp: introduce L2TPv3 IP encapsulation support for IPv6")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2:
     - Always look up in init_net
     - Drop changes in l2tp_ip6.c
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9b9d4fd4f7e21c19718691fca547d5445639a96e
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Wed Mar 29 08:44:59 2017 +0200

    l2tp: hold tunnel socket when handling control frames in l2tp_ip and l2tp_ip6
    
    commit 94d7ee0baa8b764cf64ad91ed69464c1a6a0066b upstream.
    
    The code following l2tp_tunnel_find() expects that a new reference is
    held on sk. Either sk_receive_skb() or the discard_put error path will
    drop a reference from the tunnel's socket.
    
    This issue exists in both l2tp_ip and l2tp_ip6.
    
    Fixes: a3c18422a4b4 ("l2tp: hold socket before dropping lock in l2tp_ip{, 6}_recv()")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2:
     - Drop changes to l2tp_ip6.c
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4ea094bb4db82122d8ebc84e9f10293e56453690
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Tue Nov 29 13:09:45 2016 +0100

    l2tp: hold socket before dropping lock in l2tp_ip{, 6}_recv()
    
    commit a3c18422a4b4e108bcf6a2328f48867e1003fd95 upstream.
    
    Socket must be held while under the protection of the l2tp lock; there
    is no guarantee that sk remains valid after the read_unlock_bh() call.
    
    Same issue for l2tp_ip and l2tp_ip6.
    
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2:
     - Drop changes in l2tp_ip6.c
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 308581eef46759d036ba7d20854f87b238030cb1
Author: Ashish Samant <ashish.samant@oracle.com>
Date:   Thu Nov 2 15:59:37 2017 -0700

    ocfs2: fstrim: Fix start offset of first cluster group during fstrim
    
    commit 105ddc93f06ebe3e553f58563d11ed63dbcd59f0 upstream.
    
    The first cluster group descriptor is not stored at the start of the
    group but at an offset from the start.  We need to take this into
    account while doing fstrim on the first cluster group.  Otherwise we
    will wrongly start fstrim a few blocks after the desired start block and
    the range can cross over into the next cluster group and zero out the
    group descriptor there.  This can cause filesytem corruption that cannot
    be fixed by fsck.
    
    Link: http://lkml.kernel.org/r/1507835579-7308-1-git-send-email-ashish.samant@oracle.com
    Signed-off-by: Ashish Samant <ashish.samant@oracle.com>
    Reviewed-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Joseph Qi <jiangqi903@gmail.com>
    Cc: Mark Fasheh <mfasheh@versity.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit bc2acd699938b98ea7f903d67acce4a84d6b7fe8
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Nov 2 00:47:12 2017 +0000

    KEYS: trusted: fix writing past end of buffer in trusted_read()
    
    commit a3c812f7cfd80cf51e8f5b7034f7418f6beb56c1 upstream.
    
    When calling keyctl_read() on a key of type "trusted", if the
    user-supplied buffer was too small, the kernel ignored the buffer length
    and just wrote past the end of the buffer, potentially corrupting
    userspace memory.  Fix it by instead returning the size required, as per
    the documentation for keyctl_read().
    
    We also don't even fill the buffer at all in this case, as this is
    slightly easier to implement than doing a short read, and either
    behavior appears to be permitted.  It also makes it match the behavior
    of the "encrypted" key type.
    
    Fixes: d00a1c72f7f4 ("keys: add new trusted key-type")
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3c16f689b7430641cef4f216b0707c56184c114c
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jun 8 14:49:18 2017 +0100

    KEYS: trusted: sanitize all key material
    
    commit ee618b4619b72527aaed765f0f0b74072b281159 upstream.
    
    As the previous patch did for encrypted-keys, zero sensitive any
    potentially sensitive data related to the "trusted" key type before it
    is freed.  Notably, we were not zeroing the tpm_buf structures in which
    the actual key is stored for TPM seal and unseal, nor were we zeroing
    the trusted_key_payload in certain error paths.
    
    Cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Cc: David Safford <safford@us.ibm.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    [bwh: Backported to 3.2:
     - Also use kzfree() in my_get_random()
     - Drop one unapplicable change
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7451eb5f46e23df1f8e280af3a820cf55710137b
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 30 23:08:20 2017 -0700

    tcp: fix tcp_mtu_probe() vs highest_sack
    
    commit 2b7cda9c35d3b940eb9ce74b30bbd5eb30db493d upstream.
    
    Based on SNMP values provided by Roman, Yuchung made the observation
    that some crashes in tcp_sacktag_walk() might be caused by MTU probing.
    
    Looking at tcp_mtu_probe(), I found that when a new skb was placed
    in front of the write queue, we were not updating tcp highest sack.
    
    If one skb is freed because all its content was copied to the new skb
    (for MTU probing), then tp->highest_sack could point to a now freed skb.
    
    Bad things would then happen, including infinite loops.
    
    This patch renames tcp_highest_sack_combine() and uses it
    from tcp_mtu_probe() to fix the bug.
    
    Note that I also removed one test against tp->sacked_out,
    since we want to replace tp->highest_sack regardless of whatever
    condition, since keeping a stale pointer to freed skb is a recipe
    for disaster.
    
    Fixes: a47e5a988a57 ("[TCP]: Convert highest_sack to sk_buff to allow direct access")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Reported-by: Roman Gushchin <guro@fb.com>
    Reported-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4460204da263649732ccf2ae920f87b15f8a8a17
Author: Craig Gallek <kraig@google.com>
Date:   Mon Oct 30 18:50:11 2017 -0400

    tun/tap: sanitize TUNSETSNDBUF input
    
    commit 93161922c658c714715686cd0cf69b090cb9bf1d upstream.
    
    Syzkaller found several variants of the lockup below by setting negative
    values with the TUNSETSNDBUF ioctl.  This patch adds a sanity check
    to both the tun and tap versions of this ioctl.
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [repro:2389]
      Modules linked in:
      irq event stamp: 329692056
      hardirqs last  enabled at (329692055): [<ffffffff824b8381>] _raw_spin_unlock_irqrestore+0x31/0x75
      hardirqs last disabled at (329692056): [<ffffffff824b9e58>] apic_timer_interrupt+0x98/0xb0
      softirqs last  enabled at (35659740): [<ffffffff824bc958>] __do_softirq+0x328/0x48c
      softirqs last disabled at (35659731): [<ffffffff811c796c>] irq_exit+0xbc/0xd0
      CPU: 0 PID: 2389 Comm: repro Not tainted 4.14.0-rc7 #23
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      task: ffff880009452140 task.stack: ffff880006a20000
      RIP: 0010:_raw_spin_lock_irqsave+0x11/0x80
      RSP: 0018:ffff880006a27c50 EFLAGS: 00000282 ORIG_RAX: ffffffffffffff10
      RAX: ffff880009ac68d0 RBX: ffff880006a27ce0 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffff880006a27ce0 RDI: ffff880009ac6900
      RBP: ffff880006a27c60 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000001 R11: 000000000063ff00 R12: ffff880009ac6900
      R13: ffff880006a27cf8 R14: 0000000000000001 R15: ffff880006a27cf8
      FS:  00007f4be4838700(0000) GS:ffff88000cc00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000020101000 CR3: 0000000009616000 CR4: 00000000000006f0
      Call Trace:
       prepare_to_wait+0x26/0xc0
       sock_alloc_send_pskb+0x14e/0x270
       ? remove_wait_queue+0x60/0x60
       tun_get_user+0x2cc/0x19d0
       ? __tun_get+0x60/0x1b0
       tun_chr_write_iter+0x57/0x86
       __vfs_write+0x156/0x1e0
       vfs_write+0xf7/0x230
       SyS_write+0x57/0xd0
       entry_SYSCALL_64_fastpath+0x1f/0xbe
      RIP: 0033:0x7f4be4356df9
      RSP: 002b:00007ffc18101c08 EFLAGS: 00000293 ORIG_RAX: 0000000000000001
      RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f4be4356df9
      RDX: 0000000000000046 RSI: 0000000020101000 RDI: 0000000000000005
      RBP: 00007ffc18101c40 R08: 0000000000000001 R09: 0000000000000001
      R10: 0000000000000001 R11: 0000000000000293 R12: 0000559c75f64780
      R13: 00007ffc18101d30 R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: 33dccbb050bb ("tun: Limit amount of queued packets per device")
    Fixes: 20d29d7a916a ("net: macvtap driver")
    Signed-off-by: Craig Gallek <kraig@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2: adjust filename]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f120b905f0be58baf038ad9e34262144407fac2f
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Fri Sep 18 13:41:09 2015 +0300

    macvtap: fix TUNSETSNDBUF values > 64k
    
    commit 3ea79249e81e5ed051f2e6480cbde896d99046e8 upstream.
    
    Upon TUNSETSNDBUF,  macvtap reads the requested sndbuf size into
    a local variable u.
    commit 39ec7de7092b ("macvtap: fix uninitialized access on
    TUNSETIFF") changed its type to u16 (which is the right thing to
    do for all other macvtap ioctls), breaking all values > 64k.
    
    The value of TUNSETSNDBUF is actually a signed 32 bit integer, so
    the right thing to do is to read it into an int.
    
    Cc: David S. Miller <davem@davemloft.net>
    Fixes: 39ec7de7092b ("macvtap: fix uninitialized access on TUNSETIFF")
    Reported-by: Mark A. Peloquin
    Bisected-by: Matthew Rosato <mjrosato@linux.vnet.ibm.com>
    Reported-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by:  Matthew Rosato <mjrosato@linux.vnet.ibm.com>
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c8b65d0592334b361264c82726c05ffcec60193f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Oct 29 11:10:43 2017 +0100

    ALSA: seq: Fix nested rwsem annotation for lockdep splat
    
    commit 1f20f9ff57ca23b9f5502fca85ce3977e8496cb1 upstream.
    
    syzkaller reported the lockdep splat due to the possible deadlock of
    grp->list_mutex of each sequencer client object.  Actually this is
    rather a false-positive report due to the missing nested lock
    annotations.  The sequencer client may deliver the event directly to
    another client which takes another own lock.
    
    For addressing this issue, this patch replaces the simple down_read()
    with down_read_nested().  As a lock subclass, the already existing
    "hop" can be re-used, which indicates the depth of the call.
    
    Reference: http://lkml.kernel.org/r/089e082686ac9b482e055c832617@google.com
    Reported-by: syzbot <bot+7feb8de6b4d6bf810cf098bef942cc387e79d0ad@syzkaller.appspotmail.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a7cae39d138d5011b16fcf554cb91bdf445f3571
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Oct 29 11:02:04 2017 +0100

    ALSA: timer: Add missing mutex lock for compat ioctls
    
    commit 79fb0518fec8c8b4ea7f1729f54f293724b3dbb0 upstream.
    
    The races among ioctl and other operations were protected by the
    commit af368027a49a ("ALSA: timer: Fix race among timer ioctls") and
    later fixes, but one code path was forgotten in the scenario: the
    32bit compat ioctl.  As syzkaller recently spotted, a very similar
    use-after-free may happen with the combination of compat ioctls.
    
    The fix is simply to apply the same ioctl_lock to the compat_ioctl
    callback, too.
    
    Fixes: af368027a49a ("ALSA: timer: Fix race among timer ioctls")
    Reference: http://lkml.kernel.org/r/089e082686ac9b482e055c832617@google.com
    Reported-by: syzbot <bot+e5f3c9783e7048a74233054febbe9f1bdf54b6da@syzkaller.appspotmail.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 12945a46acaa55195996eea82c762d6ba2fe002a
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Mon Oct 30 17:58:58 2017 +0100

    l2tp: hold tunnel in pppol2tp_connect()
    
    commit f9e56baf03f9d36043a78f16e3e8b2cfd211e09e upstream.
    
    Use l2tp_tunnel_get() in pppol2tp_connect() to ensure the tunnel isn't
    going to disappear while processing the rest of the function.
    
    Fixes: fd558d186df2 ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit cf651e67b5d9fdafc167872bf0544eaeb38f2f2b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Oct 28 19:43:56 2017 +0800

    sctp: fix a type cast warnings that causes a_rwnd gets the wrong value
    
    commit f6fc6bc0b8e0bb13a210bd7386ffdcb1a5f30ef1 upstream.
    
    These warnings were found by running 'make C=2 M=net/sctp/'.
    
    Commit d4d6fb5787a6 ("sctp: Try not to change a_rwnd when faking a
    SACK from SHUTDOWN.") expected to use the peers old rwnd and add
    our flight size to the a_rwnd. But with the wrong Endian, it may
    not work as well as expected.
    
    So fix it by converting to the right value.
    
    Fixes: d4d6fb5787a6 ("sctp: Try not to change a_rwnd when faking a SACK from SHUTDOWN.")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 43ce9bf0770f22048156e7b36fe812a3352da842
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sat Dec 9 19:24:58 2017 +0000

    ipsec: Fix aborted xfrm policy dump crash
    
    commit 1137b5e2529a8f5ca8ee709288ecba3e68044df2 upstream.
    
    This is a fix for CVE-2017-16939 suitable for older stable branches.
    The upstream fix is commit 1137b5e2529a8f5ca8ee709288ecba3e68044df2,
    from which the following explanation is taken:
    
        An independent security researcher, Mohamed Ghannam, has reported
        this vulnerability to Beyond Security's SecuriTeam Secure Disclosure
        program.
    
        The xfrm_dump_policy_done function expects xfrm_dump_policy to
        have been called at least once or it will crash.  This can be
        triggered if a dump fails because the target socket's receive
        buffer is full.
    
    It was not possible to define a 'start' callback for netlink dumps
    until Linux 4.5, so instead add a check for the initialisation flag in
    the 'done' callback.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 64eb21a3bd16b4627823947ac786dcb00c0f34b1
Author: Stefan Mätje <Stefan.Maetje@esd.eu>
Date:   Wed Oct 18 13:25:17 2017 +0200

    can: esd_usb2: Fix can_dlc value for received RTR, frames
    
    commit 72d92e865d1560723e1957ee3f393688c49ca5bf upstream.
    
    The dlc member of the struct rx_msg contains also the ESD_RTR flag to
    mark received RTR frames. Without the fix the can_dlc value for received
    RTR frames would always be set to 8 by get_can_dlc() instead of the
    received value.
    
    Fixes: 96d8e90382dc ("can: Add driver for esd CAN-USB/2 device")
    Signed-off-by: Stefan Mätje <stefan.maetje@esd.eu>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 30be5646aeab85f0e878ce3d0533b964c645b605
Author: Felipe Balbi <felipe.balbi@linux.intel.com>
Date:   Tue Oct 3 11:16:43 2017 +0300

    usb: quirks: add quirk for WORLDE MINI MIDI keyboard
    
    commit 2811501e6d8f5747d08f8e25b9ecf472d0dc4c7d upstream.
    
    This keyboard doesn't implement Get String descriptors properly even
    though string indexes are valid. What happens is that when requesting
    for the String descriptor, the device disconnects and
    reconnects. Without this quirk, this loop will continue forever.
    
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Владимир Мартьянов <vilgeforce@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 76eee06dea15a2182889985789c45c2854cbf35d
Author: Maksim Salau <msalau@iotecha.com>
Date:   Wed Oct 11 11:10:52 2017 +0300

    usb: cdc_acm: Add quirk for Elatec TWN3
    
    commit 765fb2f181cad669f2beb87842a05d8071f2be85 upstream.
    
    Elatec TWN3 has the union descriptor on data interface. This results in
    failure to bind the device to the driver with the following log:
      usb 1-1.2: new full speed USB device using streamplug-ehci and address 4
      usb 1-1.2: New USB device found, idVendor=09d8, idProduct=0320
      usb 1-1.2: New USB device strings: Mfr=1, Product=2, SerialNumber=0
      usb 1-1.2: Product: RFID Device (COM)
      usb 1-1.2: Manufacturer: OEM
      cdc_acm 1-1.2:1.0: Zero length descriptor references
      cdc_acm: probe of 1-1.2:1.0 failed with error -22
    
    Adding the NO_UNION_NORMAL quirk for the device fixes the issue.
    
    `lsusb -v` of the device:
    
    Bus 001 Device 003: ID 09d8:0320
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass            2 Communications
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0        32
      idVendor           0x09d8
      idProduct          0x0320
      bcdDevice            3.00
      iManufacturer           1 OEM
      iProduct                2 RFID Device (COM)
      iSerial                 0
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength           67
        bNumInterfaces          2
        bConfigurationValue     1
        iConfiguration          0
        bmAttributes         0x80
          (Bus Powered)
        MaxPower              250mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0020  1x 32 bytes
            bInterval               2
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0020  1x 32 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0020  1x 32 bytes
            bInterval               0
          CDC Header:
            bcdCDC               1.10
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          1
          CDC ACM:
            bmCapabilities       0x06
              sends break
              line coding and serial state
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
    Device Status:     0x0000
      (Bus Powered)
    
    Signed-off-by: Maksim Salau <msalau@iotecha.com>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit e62fe787c5743f14858c87c4fc86c661fb34afc2
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Oct 13 15:40:07 2017 +0200

    scsi: zfcp: fix erp_action use-before-initialize in REC action trace
    
    commit ab31fd0ce65ec93828b617123792c1bb7c6dcc42 upstream.
    
    v4.10 commit 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN
    recovery") extended accessing parent pointer fields of struct
    zfcp_erp_action for tracing.  If an erp_action has never been enqueued
    before, these parent pointer fields are uninitialized and NULL. Examples
    are zfcp objects freshly added to the parent object's children list,
    before enqueueing their first recovery subsequently. In
    zfcp_erp_try_rport_unblock(), we iterate such list. Accessing erp_action
    fields can cause a NULL pointer dereference.  Since the kernel can read
    from lowcore on s390, it does not immediately cause a kernel page
    fault. Instead it can cause hangs on trying to acquire the wrong
    erp_action->adapter->dbf->rec_lock in zfcp_dbf_rec_action_lvl()
                          ^bogus^
    while holding already other locks with IRQs disabled.
    
    Real life example from attaching lots of LUNs in parallel on many CPUs:
    
    crash> bt 17723
    PID: 17723  TASK: ...               CPU: 25  COMMAND: "zfcperp0.0.1800"
     LOWCORE INFO:
      -psw      : 0x0404300180000000 0x000000000038e424
      -function : _raw_spin_lock_wait_flags at 38e424
    ...
     #0 [fdde8fc90] zfcp_dbf_rec_action_lvl at 3e0004e9862 [zfcp]
     #1 [fdde8fce8] zfcp_erp_try_rport_unblock at 3e0004dfddc [zfcp]
     #2 [fdde8fd38] zfcp_erp_strategy at 3e0004e0234 [zfcp]
     #3 [fdde8fda8] zfcp_erp_thread at 3e0004e0a12 [zfcp]
     #4 [fdde8fe60] kthread at 173550
     #5 [fdde8feb8] kernel_thread_starter at 10add2
    
    zfcp_adapter
     zfcp_port
      zfcp_unit <address>, 0x404040d600000000
      scsi_device NULL, returning early!
    zfcp_scsi_dev.status = 0x40000000
    0x40000000 ZFCP_STATUS_COMMON_RUNNING
    
    crash> zfcp_unit <address>
    struct zfcp_unit {
      erp_action = {
        adapter = 0x0,
        port = 0x0,
        unit = 0x0,
      },
    }
    
    zfcp_erp_action is always fully embedded into its container object. Such
    container object is never moved in its object tree (only add or delete).
    Hence, erp_action parent pointers can never change.
    
    To fix the issue, initialize the erp_action parent pointers before
    adding the erp_action container to any list and thus before it becomes
    accessible from outside of its initializing function.
    
    In order to also close the time window between zfcp_erp_setup_act()
    memsetting the entire erp_action to zero and setting the parent pointers
    again, drop the memset and instead explicitly initialize individually
    all erp_action fields except for parent pointers. To be extra careful
    not to introduce any other unintended side effect, even keep zeroing the
    erp_action fields for list and timer. Also double-check with
    WARN_ON_ONCE that erp_action parent pointers never change, so we get to
    know when we would deviate from previous behavior.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3d2913c30150f9e07f054a98265811c417b21f72
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Wed Oct 11 16:24:48 2017 +0200

    net: enable interface alias removal via rtnl
    
    commit 2459b4c635858094df78abb9ca87d99f89fe8ca5 upstream.
    
    IFLA_IFALIAS is defined as NLA_STRING. It means that the minimal length of
    the attribute is 1 ("\0"). However, to remove an alias, the attribute
    length must be 0 (see dev_set_alias()).
    
    Let's define the type to NLA_BINARY to allow 0-length string, so that the
    alias can be removed.
    
    Example:
    $ ip l s dummy0 alias foo
    $ ip l l dev dummy0
    5: dummy0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
        link/ether ae:20:30:4f:a7:f3 brd ff:ff:ff:ff:ff:ff
        alias foo
    
    Before the patch:
    $ ip l s dummy0 alias ""
    RTNETLINK answers: Numerical result out of range
    
    After the patch:
    $ ip l s dummy0 alias ""
    $ ip l l dev dummy0
    5: dummy0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
        link/ether ae:20:30:4f:a7:f3 brd ff:ff:ff:ff:ff:ff
    
    CC: Oliver Hartkopp <oliver@hartkopp.net>
    CC: Stephen Hemminger <stephen@networkplumber.org>
    Fixes: 96ca4a2cc145 ("net: remove ifalias on empty given alias")
    Reported-by: Julien FLoret <julien.floret@6wind.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 95de39762794bf55dc17ee33b6d1502923f1ad18
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 13 19:22:35 2017 +0200

    l2tp: check ps->sock before running pppol2tp_session_ioctl()
    
    commit 5903f594935a3841137c86b9d5b75143a5b7121c upstream.
    
    When pppol2tp_session_ioctl() is called by pppol2tp_tunnel_ioctl(),
    the session may be unconnected. That is, it was created by
    pppol2tp_session_create() and hasn't been connected with
    pppol2tp_connect(). In this case, ps->sock is NULL, so we need to check
    for this case in order to avoid dereferencing a NULL pointer.
    
    Fixes: 309795f4bec2 ("l2tp: Add netlink control API for L2TP")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 05941cd73c7e50d4b4488668b53d91b8d81fc2ad
Author: Joerg Roedel <jroedel@suse.de>
Date:   Fri Oct 13 14:32:37 2017 +0200

    iommu/amd: Finish TLB flush in amd_iommu_unmap()
    
    commit ce76353f169a6471542d999baf3d29b121dce9c0 upstream.
    
    The function only sends the flush command to the IOMMU(s),
    but does not wait for its completion when it returns. Fix
    that.
    
    Fixes: 601367d76bd1 ('x86/amd-iommu: Remove iommu_flush_domain function')
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3feb8b1c61cffa8f9fd22dad04144a0ac954cd85
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 9 12:51:27 2017 -0700

    ecryptfs: fix dereference of NULL user_key_payload
    
    commit f66665c09ab489a11ca490d6a82df57cfc1bea3e upstream.
    
    In eCryptfs, we failed to verify that the authentication token keys are
    not revoked before dereferencing their payloads, which is problematic
    because the payload of a revoked key is NULL.  request_key() *does* skip
    revoked keys, but there is still a window where the key can be revoked
    before we acquire the key semaphore.
    
    Fix it by updating ecryptfs_get_key_payload_data() to return
    -EKEYREVOKED if the key payload is NULL.  For completeness we check this
    for "encrypted" keys as well as "user" keys, although encrypted keys
    cannot be revoked currently.
    
    Alternatively we could use key_validate(), but since we'll also need to
    fix ecryptfs_get_key_payload_data() to validate the payload length, it
    seems appropriate to just check the payload pointer.
    
    Fixes: 237fead61998 ("[PATCH] ecryptfs: fs/Makefile and fs/Kconfig")
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Cc: Michael Halcrow <mhalcrow@google.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    [bwh: Backported to 3.2: user key payload is key->payload.data, not
     key->payload.data[0]]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3b2aa8f209fb50f62935044358651db0ea176c91
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 9 12:40:00 2017 -0700

    FS-Cache: fix dereference of NULL user_key_payload
    
    commit d124b2c53c7bee6569d2a2d0b18b4a1afde00134 upstream.
    
    When the file /proc/fs/fscache/objects (available with
    CONFIG_FSCACHE_OBJECT_LIST=y) is opened, we request a user key with
    description "fscache:objlist", then access its payload.  However, a
    revoked key has a NULL payload, and we failed to check for this.
    request_key() *does* skip revoked keys, but there is still a window
    where the key can be revoked before we access its payload.
    
    Fix it by checking for a NULL payload, treating it like a key which was
    already revoked at the time it was requested.
    
    Fixes: 4fbf4291aa15 ("FS-Cache: Allow the current state of all objects to be dumped")
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3c249c1d5cb10277a293618747136aa9f2564f46
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 9 12:37:49 2017 -0700

    KEYS: encrypted: fix dereference of NULL user_key_payload
    
    commit 13923d0865ca96312197962522e88bc0aedccd74 upstream.
    
    A key of type "encrypted" references a "master key" which is used to
    encrypt and decrypt the encrypted key's payload.  However, when we
    accessed the master key's payload, we failed to handle the case where
    the master key has been revoked, which sets the payload pointer to NULL.
    Note that request_key() *does* skip revoked keys, but there is still a
    window where the key can be revoked before we acquire its semaphore.
    
    Fix it by checking for a NULL payload, treating it like a key which was
    already revoked at the time it was requested.
    
    This was an issue for master keys of type "user" only.  Master keys can
    also be of type "trusted", but those cannot be revoked.
    
    Fixes: 7e70cb497850 ("keys: add new key-type encrypted")
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Cc: David Safford <safford@us.ibm.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4a79131d68ebc4aa74c2c7df8ab88a4b9536b1fc
Author: Haozhong Zhang <haozhong.zhang@intel.com>
Date:   Tue Oct 10 15:01:22 2017 +0800

    KVM: nVMX: fix guest CR4 loading when emulating L2 to L1 exit
    
    commit 8eb3f87d903168bdbd1222776a6b1e281f50513e upstream.
    
    When KVM emulates an exit from L2 to L1, it loads L1 CR4 into the
    guest CR4. Before this CR4 loading, the guest CR4 refers to L2
    CR4. Because these two CR4's are in different levels of guest, we
    should vmx_set_cr4() rather than kvm_set_cr4() here. The latter, which
    is used to handle guest writes to its CR4, checks the guest change to
    CR4 and may fail if the change is invalid.
    
    The failure may cause trouble. Consider we start
      a L1 guest with non-zero L1 PCID in use,
         (i.e. L1 CR4.PCIDE == 1 && L1 CR3.PCID != 0)
    and
      a L2 guest with L2 PCID disabled,
         (i.e. L2 CR4.PCIDE == 0)
    and following events may happen:
    
    1. If kvm_set_cr4() is used in load_vmcs12_host_state() to load L1 CR4
       into guest CR4 (in VMCS01) for L2 to L1 exit, it will fail because
       of PCID check. As a result, the guest CR4 recorded in L0 KVM (i.e.
       vcpu->arch.cr4) is left to the value of L2 CR4.
    
    2. Later, if L1 attempts to change its CR4, e.g., clearing VMXE bit,
       kvm_set_cr4() in L0 KVM will think L1 also wants to enable PCID,
       because the wrong L2 CR4 is used by L0 KVM as L1 CR4. As L1
       CR3.PCID != 0, L0 KVM will inject GP to L1 guest.
    
    Fixes: 4704d0befb072 ("KVM: nVMX: Exiting from L2 to L1")
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 85e2ca347fde672970c0349f15eca07488cd5e0d
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Mon Oct 9 13:33:19 2017 +0200

    scsi: libiscsi: fix shifting of DID_REQUEUE host byte
    
    commit eef9ffdf9cd39b2986367bc8395e2772bc1284ba upstream.
    
    The SCSI host byte should be shifted left by 16 in order to have
    scsi_decide_disposition() do the right thing (.i.e. requeue the
    command).
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Fixes: 661134ad3765 ("[SCSI] libiscsi, bnx2i: make bound ep check common")
    Cc: Lee Duncan <lduncan@suse.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Bart Van Assche <Bart.VanAssche@sandisk.com>
    Cc: Chris Leech <cleech@redhat.com>
    Acked-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ec314904ac8a5632b5715a9b15de2f59f6c42076
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Oct 11 16:39:02 2017 +0200

    ALSA: caiaq: Fix stray URB at probe error path
    
    commit 99fee508245825765ff60155fed43f970ff83a8f upstream.
    
    caiaq driver doesn't kill the URB properly at its error path during
    the probe, which may lead to a use-after-free error later.  This patch
    addresses it.
    
    Reported-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [bwh: Backported to 3.2: s/cdev/dev/g]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 767121581507749d66fe5212b9947083384d42d3
Author: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Date:   Mon Oct 2 14:01:41 2017 +0900

    usb: renesas_usbhs: Fix DMAC sequence for receiving zero-length packet
    
    commit 29c7f3e68eec4ae94d85ad7b5dfdafdb8089f513 upstream.
    
    The DREQE bit of the DnFIFOSEL should be set to 1 after the DE bit of
    USB-DMAC on R-Car SoCs is set to 1 after the USB-DMAC received a
    zero-length packet. Otherwise, a transfer completion interruption
    of USB-DMAC doesn't happen. Even if the driver changes the sequence,
    normal operations (transmit/receive without zero-length packet) will
    not cause any side-effects. So, this patch fixes the sequence anyway.
    
    Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    [shimoda: revise the commit log]
    Fixes: e73a9891b3a1 ("usb: renesas_usbhs: add DMAEngine support")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 64a4896ee653aa0ff4541a60f7b6da6094ba652b
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Oct 6 10:27:44 2017 -0400

    USB: dummy-hcd: Fix deadlock caused by disconnect detection
    
    commit ab219221a5064abfff9f78c323c4a257b16cdb81 upstream.
    
    The dummy-hcd driver calls the gadget driver's disconnect callback
    under the wrong conditions.  It should invoke the callback when Vbus
    power is turned off, but instead it does so when the D+ pullup is
    turned off.
    
    This can cause a deadlock in the composite core when a gadget driver
    is unregistered:
    
    [   88.361471] ============================================
    [   88.362014] WARNING: possible recursive locking detected
    [   88.362580] 4.14.0-rc2+ #9 Not tainted
    [   88.363010] --------------------------------------------
    [   88.363561] v4l_id/526 is trying to acquire lock:
    [   88.364062]  (&(&cdev->lock)->rlock){....}, at: [<ffffffffa0547e03>] composite_disconnect+0x43/0x100 [libcomposite]
    [   88.365051]
    [   88.365051] but task is already holding lock:
    [   88.365826]  (&(&cdev->lock)->rlock){....}, at: [<ffffffffa0547b09>] usb_function_deactivate+0x29/0x80 [libcomposite]
    [   88.366858]
    [   88.366858] other info that might help us debug this:
    [   88.368301]  Possible unsafe locking scenario:
    [   88.368301]
    [   88.369304]        CPU0
    [   88.369701]        ----
    [   88.370101]   lock(&(&cdev->lock)->rlock);
    [   88.370623]   lock(&(&cdev->lock)->rlock);
    [   88.371145]
    [   88.371145]  *** DEADLOCK ***
    [   88.371145]
    [   88.372211]  May be due to missing lock nesting notation
    [   88.372211]
    [   88.373191] 2 locks held by v4l_id/526:
    [   88.373715]  #0:  (&(&cdev->lock)->rlock){....}, at: [<ffffffffa0547b09>] usb_function_deactivate+0x29/0x80 [libcomposite]
    [   88.374814]  #1:  (&(&dum_hcd->dum->lock)->rlock){....}, at: [<ffffffffa05bd48d>] dummy_pullup+0x7d/0xf0 [dummy_hcd]
    [   88.376289]
    [   88.376289] stack backtrace:
    [   88.377726] CPU: 0 PID: 526 Comm: v4l_id Not tainted 4.14.0-rc2+ #9
    [   88.378557] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014
    [   88.379504] Call Trace:
    [   88.380019]  dump_stack+0x86/0xc7
    [   88.380605]  __lock_acquire+0x841/0x1120
    [   88.381252]  lock_acquire+0xd5/0x1c0
    [   88.381865]  ? composite_disconnect+0x43/0x100 [libcomposite]
    [   88.382668]  _raw_spin_lock_irqsave+0x40/0x54
    [   88.383357]  ? composite_disconnect+0x43/0x100 [libcomposite]
    [   88.384290]  composite_disconnect+0x43/0x100 [libcomposite]
    [   88.385490]  set_link_state+0x2d4/0x3c0 [dummy_hcd]
    [   88.386436]  dummy_pullup+0xa7/0xf0 [dummy_hcd]
    [   88.387195]  usb_gadget_disconnect+0xd8/0x160 [udc_core]
    [   88.387990]  usb_gadget_deactivate+0xd3/0x160 [udc_core]
    [   88.388793]  usb_function_deactivate+0x64/0x80 [libcomposite]
    [   88.389628]  uvc_function_disconnect+0x1e/0x40 [usb_f_uvc]
    
    This patch changes the code to test the port-power status bit rather
    than the port-connect status bit when deciding whether to isue the
    callback.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: David Tulloh <david@tulloh.id.au>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    [bwh: Backported to 3.2: adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8fab3702764bd73f2f9b8e1c140ef1de845e3071
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Sep 23 15:51:23 2017 -0400

    more bio_map_user_iov() leak fixes
    
    commit 2b04e8f6bbb196cab4b232af0f8d48ff2c7a8058 upstream.
    
    we need to take care of failure exit as well - pages already
    in bio should be dropped by analogue of bio_unmap_pages(),
    since their refcounts had been bumped only once per reference
    in bio.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    [bwh: Backported to 3.2: adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9bbca12514f329a54e11ed37f572eaecb19dd147
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Oct 9 23:30:02 2017 +0800

    crypto: shash - Fix zero-length shash ahash digest crash
    
    commit b61907bb42409adf9b3120f741af7c57dd7e3db2 upstream.
    
    The shash ahash digest adaptor function may crash if given a
    zero-length input together with a null SG list.  This is because
    it tries to read the SG list before looking at the length.
    
    This patch fixes it by checking the length first.
    
    Reported-by: Stephan Müller<smueller@chronox.de>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Tested-by: Stephan Müller <smueller@chronox.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3bad09df43577f98cbf45a6aecf0d8b061ee4325
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 9 10:02:56 2017 +0200

    ALSA: seq: Fix copy_from_user() call inside lock
    
    commit 5803b023881857db32ffefa0d269c90280a67ee0 upstream.
    
    The event handler in the virmidi sequencer code takes a read-lock for
    the linked list traverse, while it's calling snd_seq_dump_var_event()
    in the loop.  The latter function may expand the user-space data
    depending on the event type.  It eventually invokes copy_from_user(),
    which might be a potential dead-lock.
    
    The sequencer core guarantees that the user-space data is passed only
    with atomic=0 argument, but snd_virmidi_dev_receive_event() ignores it
    and always takes read-lock().  For avoiding the problem above, this
    patch introduces rwsem for non-atomic case, while keeping rwlock for
    atomic case.
    
    Also while we're at it: the superfluous irq flags is dropped in
    snd_virmidi_input_open().
    
    Reported-by: Jia-Ju Bai <baijiaju1990@163.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit e53e94b1d3c2408ae5ecb8eca228aa90ebb04afd
Author: Boqun Feng <boqun.feng@gmail.com>
Date:   Tue Oct 3 21:36:51 2017 +0800

    kvm/x86: Avoid async PF preempting the kernel incorrectly
    
    commit a2b7861bb33b2538420bb5d8554153484d3f961f upstream.
    
    Currently, in PREEMPT_COUNT=n kernel, kvm_async_pf_task_wait() could call
    schedule() to reschedule in some cases.  This could result in
    accidentally ending the current RCU read-side critical section early,
    causing random memory corruption in the guest, or otherwise preempting
    the currently running task inside between preempt_disable and
    preempt_enable.
    
    The difficulty to handle this well is because we don't know whether an
    async PF delivered in a preemptible section or RCU read-side critical section
    for PREEMPT_COUNT=n, since preempt_disable()/enable() and rcu_read_lock/unlock()
    are both no-ops in that case.
    
    To cure this, we treat any async PF interrupting a kernel context as one
    that cannot be preempted, preventing kvm_async_pf_task_wait() from choosing
    the schedule() path in that case.
    
    To do so, a second parameter for kvm_async_pf_task_wait() is introduced,
    so that we know whether it's called from a context interrupting the
    kernel, and the parameter is set properly in all the callsites.
    
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Wanpeng Li <wanpeng.li@hotmail.com>
    Signed-off-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    [bwh: Backported to 3.2:
     - Use user_mode_vm() as equivalent to upstream user_mode()
     - Adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 182022ea4acf9d8a5625405c97df721b49a4cfcd
Author: Casey Schaufler <casey@schaufler-ca.com>
Date:   Tue Sep 19 09:39:08 2017 -0700

    lsm: fix smack_inode_removexattr and xattr_getsecurity memleak
    
    commit 57e7ba04d422c3d41c8426380303ec9b7533ded9 upstream.
    
    security_inode_getsecurity() provides the text string value
    of a security attribute. It does not provide a "secctx".
    The code in xattr_getsecurity() that calls security_inode_getsecurity()
    and then calls security_release_secctx() happened to work because
    SElinux and Smack treat the attribute and the secctx the same way.
    It fails for cap_inode_getsecurity(), because that module has no
    secctx that ever needs releasing. It turns out that Smack is the
    one that's doing things wrong by not allocating memory when instructed
    to do so by the "alloc" parameter.
    
    The fix is simple enough. Change the security_release_secctx() to
    kfree() because it isn't a secctx being returned by
    security_inode_getsecurity(). Change Smack to allocate the string when
    told to do so.
    
    Note: this also fixes memory leaks for LSMs which implement
    inode_getsecurity but not release_secctx, such as capabilities.
    
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Reported-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    [bwh: Backported to 3.2:
     - s/isp->smk_known/isp/
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2db75fd326ba4cda7bc0db5a9eb7c4ea8db25cf2
Author: Konstantin Khlebnikov <koct9i@gmail.com>
Date:   Thu Aug 7 20:52:49 2014 +0400

    Smack: remove unneeded NULL-termination from securtity label
    
    commit da1b63566c469bf3e2b24182114422e16b1aa34c upstream.
    
    Values of extended attributes are stored as binary blobs. NULL-termination
    of them isn't required. It just wastes disk space and confuses command-line
    tools like getfattr because they have to print that zero byte at the end.
    
    This patch removes terminating zero byte from initial security label in
    smack_inode_init_security and cuts it out in function smack_inode_getsecurity
    which is used by syscall getxattr. This change seems completely safe, because
    function smk_parse_smack ignores everything after first zero byte.
    
    Signed-off-by: Konstantin Khlebnikov <k.khlebnikov@samsung.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2dd8d5457df52372053f01c93fe374305796e58f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Oct 3 16:14:37 2017 -0700

    sh: sh7757: remove nonexistent GPIO_PT[JLNQ]7_RESV to fix pinctrl registration
    
    commit d8ce38f69843a56da044e56b6c16aecfbc3c6e39 upstream.
    
    Commit 3810e96056ff ("sh: modify pinmux for SH7757 2nd cut") renamed
    GPIO_PT[JLNQ]7 to GPIO_PT[JLNQ]7_RESV, and removed the existing users
    from the pinmux_pins[] array.
    
    However, pinmux_pins[] is initialized through PINMUX_GPIO(), using
    designated array initializers, where the GPIO_* enums serve as indices.
    Hence entries were not really removed, but replaced by (zero-filled)
    holes.  Such entries are treated as pin zero, which was registered
    before, thus leading to pinctrl registration failures, as seen on
    sh7722:
    
        sh-pfc pfc-sh7722: pin 0 already registered
        sh-pfc pfc-sh7722: error during pin registration
        sh-pfc pfc-sh7722: could not register: -22
        sh-pfc: probe of pfc-sh7722 failed with error -22
    
    Remove GPIO_PT[JLNQ]7_RESV from the enum to fix this.
    
    Link: http://lkml.kernel.org/r/1505205657-18012-3-git-send-email-geert+renesas@glider.be
    Fixes: 3810e96056ffddf6 ("sh: modify pinmux for SH7757 2nd cut")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: Jacopo Mondi <jacopo+renesas@jmondi.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Cc: Rich Felker <dalias@libc.org>
    Cc: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3322af2c88fd594b429c01849236f4c5a0f76842
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Oct 3 16:14:34 2017 -0700

    sh: sh7722: remove nonexistent GPIO_PTQ7 to fix pinctrl registration
    
    commit b78412b8300a8453b78d2c1b0b925b66493bb011 upstream.
    
    Patch series "sh: sh7722/sh7757i/sh7264/sh7269: Fix pinctrl registration",
    v2.
    
    Magnus Damm reported that on sh7722/Migo-R, pinctrl registration fails
    with:
    
        sh-pfc pfc-sh7722: pin 0 already registered
        sh-pfc pfc-sh7722: error during pin registration
        sh-pfc pfc-sh7722: could not register: -22
        sh-pfc: probe of pfc-sh7722 failed with error -22
    
    pinmux_pins[] is initialized through PINMUX_GPIO(), using designated
    array initializers, where the GPIO_* enums serve as indices.  Apparently
    GPIO_PTQ7 was defined in the enum, but never used.  If enum values are
    defined, but never used, pinmux_pins[] contains (zero-filled) holes.
    Hence such entries are treated as pin zero, which was registered before,
    and pinctrl registration fails.
    
    I can't see how this ever worked, as at the time of commit f5e25ae52fef
    ("sh-pfc: Add sh7722 pinmux support"), pinmux_gpios[] in
    drivers/pinctrl/sh-pfc/pfc-sh7722.c already had the hole, and
    drivers/pinctrl/core.c already had the check.
    
    Some scripting revealed a few more broken drivers:
      - sh7757 has four holes, due to nonexistent GPIO_PT[JLNQ]7_RESV.
      - sh7264 and sh7269 define GPIO_PH[0-7], but don't use it with
        PINMUX_GPIO().
    
    Patch 1 fixes the issue on sh7722, and was tested.  Patches 3-4 should
    fix the issue on the other 3 SoCs, but was untested due to lack of
    hardware.
    
    This patch (of 4):
    
    On sh7722/Migo-R, pinctrl registration fails with:
    
        sh-pfc pfc-sh7722: pin 0 already registered
        sh-pfc pfc-sh7722: error during pin registration
        sh-pfc pfc-sh7722: could not register: -22
        sh-pfc: probe of pfc-sh7722 failed with error -22
    
    pinmux_pins[] is initialized through PINMUX_GPIO(), using designated array
    initializers, where the GPIO_* enums serve as indices.  As GPIO_PTQ7 is
    defined in the enum, but never used, pinmux_pins[] contains a
    (zero-filled) hole.  Hence this entry is treated as pin zero, which was
    registered before, and pinctrl registration fails.
    
    According to the datasheet, port PTQ7 does not exist.  Hence remove
    GPIO_PTQ7 from the enum to fix this.
    
    Link: http://lkml.kernel.org/r/1505205657-18012-2-git-send-email-geert+renesas@glider.be
    Fixes: 8d7b5b0af7e070b9 ("sh: Add sh7722 pinmux code")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reported-by: Magnus Damm <magnus.damm@gmail.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Tested-by: Jacopo Mondi <jacopo+renesas@jmondi.org>
    Cc: Rich Felker <dalias@libc.org>
    Cc: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 64f8eb23a139d4454600f75bcc40ca470fc0b637
Author: Jean Delvare <jdelvare@suse.de>
Date:   Tue Oct 3 16:14:18 2017 -0700

    kernel/params.c: align add_sysfs_param documentation with code
    
    commit 630cc2b30a42c70628368a412beb4a5e5dd71abe upstream.
    
    This parameter is named kp, so the documentation should use that.
    
    Fixes: 9b473de87209 ("param: Fix duplicate module prefixes")
    Link: http://lkml.kernel.org/r/20170919142656.64aea59e@endymion
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Acked-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a75a0b71bc065dc42701e7708a8e6b368ea01864
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Wed Sep 27 21:35:12 2017 -0400

    scsi: sd: Implement blacklist option for WRITE SAME w/ UNMAP
    
    commit 28a0bc4120d38a394499382ba21d6965a67a3703 upstream.
    
    SBC-4 states:
    
      "A MAXIMUM UNMAP LBA COUNT field set to a non-zero value indicates the
       maximum number of LBAs that may be unmapped by an UNMAP command"
    
      "A MAXIMUM WRITE SAME LENGTH field set to a non-zero value indicates
       the maximum number of contiguous logical blocks that the device server
       allows to be unmapped or written in a single WRITE SAME command."
    
    Despite the spec being clear on the topic, some devices incorrectly
    expect WRITE SAME commands with the UNMAP bit set to be limited to the
    value reported in MAXIMUM UNMAP LBA COUNT in the Block Limits VPD.
    
    Implement a blacklist option that can be used to accommodate devices
    with this behavior.
    
    Reported-by: Bill Kuzeja <William.Kuzeja@stratus.com>
    Reported-by: Ewan D. Milne <emilne@redhat.com>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Tested-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    [bwh: Backported to 3.2:
     - Keep using literals for SD_MAX_WS{16,10}_BLOCKS
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 89c0c6643aac2443b3a53104c1adbaccd2919d34
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 2 14:06:43 2017 +0200

    ALSA: usx2y: Suppress kernel warning at page allocation failures
    
    commit 7682e399485fe19622b6fd82510b1f4551e48a25 upstream.
    
    The usx2y driver allocates the stream read/write buffers in continuous
    pages depending on the stream setup, and this may spew the kernel
    warning messages with a stack trace like:
      WARNING: CPU: 1 PID: 1846 at mm/page_alloc.c:3883
      __alloc_pages_slowpath+0x1ef2/0x2d70
      Modules linked in:
      CPU: 1 PID: 1846 Comm: kworker/1:2 Not tainted
      ....
    
    It may confuse user as if it were any serious error, although this is
    no fatal error and the driver handles the error case gracefully.
    Since the driver has already some sanity check of the given size (128
    and 256 pages), it can't pass any crazy value.  So it's merely page
    fragmentation.
    
    This patch adds __GFP_NOWARN to each caller for suppressing such
    kernel warnings.  The original issue was spotted by syzkaller.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1e44d4e0c0ef21599f86e0b7adb2dc6bcd0c35dd
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Thu Sep 28 15:44:38 2017 +0200

    l2tp: fix l2tp_eth module loading
    
    commit 9f775ead5e570e7e19015b9e4e2f3dd6e71a5935 upstream.
    
    The l2tp_eth module crashes if its netlink callbacks are run when the
    pernet data aren't initialised.
    
    We should normally register_pernet_device() before the genl callbacks.
    However, the pernet data only maintain a list of l2tpeth interfaces,
    and this list is never used. So let's just drop pernet handling
    instead.
    
    Fixes: d9e31d17ceba ("l2tp: Add L2TP ethernet pseudowire support")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit d10c7e4c08f6ce862142655aac31ff301860f68f
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Sep 13 18:02:02 2017 +0100

    staging: iio: ade7759: fix signed extension bug on shift of a u8
    
    commit 13ffe9a26df4e156363579b25c904dd0b1e31bfb upstream.
    
    The current shift of st->rx[2] left shifts a u8 24 bits left,
    promotes the integer to a an int and then to a unsigned u64. If
    the top bit of st->rx[2] is set then we end up with all the upper
    bits being set to 1. Fix this by casting st->rx[2] to a u64 before
    the 24 bit left shift.
    
    Detected by CoverityScan CID#144940 ("Unintended sign extension")
    
    Fixes: 2919fa54ef64 ("staging: iio: meter: new driver for ADE7759 devices")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2443035a896e0680f0c21b8ef7cdabf33ac95ac3
Author: Boqun Feng <boqun.feng@gmail.com>
Date:   Fri Sep 29 19:01:45 2017 +0800

    kvm/x86: Handle async PF in RCU read-side critical sections
    
    commit b862789aa5186d5ea3a024b7cfe0f80c3a38b980 upstream.
    
    Sasha Levin reported a WARNING:
    
    | WARNING: CPU: 0 PID: 6974 at kernel/rcu/tree_plugin.h:329
    | rcu_preempt_note_context_switch kernel/rcu/tree_plugin.h:329 [inline]
    | WARNING: CPU: 0 PID: 6974 at kernel/rcu/tree_plugin.h:329
    | rcu_note_context_switch+0x16c/0x2210 kernel/rcu/tree.c:458
    ...
    | CPU: 0 PID: 6974 Comm: syz-fuzzer Not tainted 4.13.0-next-20170908+ #246
    | Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    | 1.10.1-1ubuntu1 04/01/2014
    | Call Trace:
    ...
    | RIP: 0010:rcu_preempt_note_context_switch kernel/rcu/tree_plugin.h:329 [inline]
    | RIP: 0010:rcu_note_context_switch+0x16c/0x2210 kernel/rcu/tree.c:458
    | RSP: 0018:ffff88003b2debc8 EFLAGS: 00010002
    | RAX: 0000000000000001 RBX: 1ffff1000765bd85 RCX: 0000000000000000
    | RDX: 1ffff100075d7882 RSI: ffffffffb5c7da20 RDI: ffff88003aebc410
    | RBP: ffff88003b2def30 R08: dffffc0000000000 R09: 0000000000000001
    | R10: 0000000000000000 R11: 0000000000000000 R12: ffff88003b2def08
    | R13: 0000000000000000 R14: ffff88003aebc040 R15: ffff88003aebc040
    | __schedule+0x201/0x2240 kernel/sched/core.c:3292
    | schedule+0x113/0x460 kernel/sched/core.c:3421
    | kvm_async_pf_task_wait+0x43f/0x940 arch/x86/kernel/kvm.c:158
    | do_async_page_fault+0x72/0x90 arch/x86/kernel/kvm.c:271
    | async_page_fault+0x22/0x30 arch/x86/entry/entry_64.S:1069
    | RIP: 0010:format_decode+0x240/0x830 lib/vsprintf.c:1996
    | RSP: 0018:ffff88003b2df520 EFLAGS: 00010283
    | RAX: 000000000000003f RBX: ffffffffb5d1e141 RCX: ffff88003b2df670
    | RDX: 0000000000000001 RSI: dffffc0000000000 RDI: ffffffffb5d1e140
    | RBP: ffff88003b2df560 R08: dffffc0000000000 R09: 0000000000000000
    | R10: ffff88003b2df718 R11: 0000000000000000 R12: ffff88003b2df5d8
    | R13: 0000000000000064 R14: ffffffffb5d1e140 R15: 0000000000000000
    | vsnprintf+0x173/0x1700 lib/vsprintf.c:2136
    | sprintf+0xbe/0xf0 lib/vsprintf.c:2386
    | proc_self_get_link+0xfb/0x1c0 fs/proc/self.c:23
    | get_link fs/namei.c:1047 [inline]
    | link_path_walk+0x1041/0x1490 fs/namei.c:2127
    ...
    
    This happened when the host hit a page fault, and delivered it as in an
    async page fault, while the guest was in an RCU read-side critical
    section.  The guest then tries to reschedule in kvm_async_pf_task_wait(),
    but rcu_preempt_note_context_switch() would treat the reschedule as a
    sleep in RCU read-side critical section, which is not allowed (even in
    preemptible RCU).  Thus the WARN.
    
    To cure this, make kvm_async_pf_task_wait() go to the halt path if the
    PF happens in a RCU read-side critical section.
    
    Reported-by: Sasha Levin <levinsasha928@gmail.com>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1f7adce49fcea809d87769ea06ff23aef4214acf
Author: Gleb Natapov <gleb@redhat.com>
Date:   Wed May 2 15:04:02 2012 +0300

    KVM: Do not take reference to mm during async #PF
    
    commit 62c49cc976af84cb0ffcb5ec07ee88da1a94e222 upstream.
    
    It turned to be totally unneeded. The reason the code was introduced is
    so that KVM can prefault swapped in page, but prefault can fail even
    if mm is pinned since page table can change anyway. KVM handles this
    situation correctly though and does not inject spurious page faults.
    
    Fixes:
     "INFO: SOFTIRQ-safe -> SOFTIRQ-unsafe lock order detected" warning while
     running LTP inside a KVM guest using the recent -next kernel.
    
    Reported-by: Sasha Levin <levinsasha928@gmail.com>
    Signed-off-by: Gleb Natapov <gleb@redhat.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7ce12102de97485c896e3b5413ffc31fc0d9372e
Author: Ethan Zhao <ethan.zhao@oracle.com>
Date:   Mon Sep 4 13:59:34 2017 +0800

    sched/sysctl: Check user input value of sysctl_sched_time_avg
    
    commit 5ccba44ba118a5000cccc50076b0344632459779 upstream.
    
    System will hang if user set sysctl_sched_time_avg to 0:
    
      [root@XXX ~]# sysctl kernel.sched_time_avg_ms=0
    
      Stack traceback for pid 0
      0xffff883f6406c600 0 0 1 3 R 0xffff883f6406cf50 *swapper/3
      ffff883f7ccc3ae8 0000000000000018 ffffffff810c4dd0 0000000000000000
      0000000000017800 ffff883f7ccc3d78 0000000000000003 ffff883f7ccc3bf8
      ffffffff810c4fc9 ffff883f7ccc3c08 00000000810c5043 ffff883f7ccc3c08
      Call Trace:
      <IRQ> [<ffffffff810c4dd0>] ? update_group_capacity+0x110/0x200
      [<ffffffff810c4fc9>] ? update_sd_lb_stats+0x109/0x600
      [<ffffffff810c5507>] ? find_busiest_group+0x47/0x530
      [<ffffffff810c5b84>] ? load_balance+0x194/0x900
      [<ffffffff810ad5ca>] ? update_rq_clock.part.83+0x1a/0xe0
      [<ffffffff810c6d42>] ? rebalance_domains+0x152/0x290
      [<ffffffff810c6f5c>] ? run_rebalance_domains+0xdc/0x1d0
      [<ffffffff8108a75b>] ? __do_softirq+0xfb/0x320
      [<ffffffff8108ac85>] ? irq_exit+0x125/0x130
      [<ffffffff810b3a17>] ? scheduler_ipi+0x97/0x160
      [<ffffffff81052709>] ? smp_reschedule_interrupt+0x29/0x30
      [<ffffffff8173a1be>] ? reschedule_interrupt+0x6e/0x80
       <EOI> [<ffffffff815bc83c>] ? cpuidle_enter_state+0xcc/0x230
      [<ffffffff815bc80c>] ? cpuidle_enter_state+0x9c/0x230
      [<ffffffff815bc9d7>] ? cpuidle_enter+0x17/0x20
      [<ffffffff810cd6dc>] ? cpu_startup_entry+0x38c/0x420
      [<ffffffff81053373>] ? start_secondary+0x173/0x1e0
    
    Because divide-by-zero error happens in function:
    
    update_group_capacity()
      update_cpu_capacity()
        scale_rt_capacity()
         {
              ...
              total = sched_avg_period() + delta;
              used = div_u64(avg, total);
              ...
         }
    
    To fix this issue, check user input value of sysctl_sched_time_avg, keep
    it unchanged when hitting invalid input, and set the minimum limit of
    sysctl_sched_time_avg to 1 ms.
    
    Reported-by: James Puthukattukaran <james.puthukattukaran@oracle.com>
    Signed-off-by: Ethan Zhao <ethan.zhao@oracle.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: efault@gmx.de
    Cc: ethan.kernel@gmail.com
    Cc: keescook@chromium.org
    Cc: mcgrof@kernel.org
    Link: http://lkml.kernel.org/r/1504504774-18253-1-git-send-email-ethan.zhao@oracle.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2d8da6748e80b542ac58fca51deb0d4f42f2d54c
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Sep 26 12:20:17 2017 -0400

    packet: only test po->has_vnet_hdr once in packet_snd
    
    commit da7c9561015e93d10fe6aab73e9288e0d09d65a6 upstream.
    
    Packet socket option po->has_vnet_hdr can be updated concurrently with
    other operations if no ring is attached.
    
    Do not test the option twice in packet_snd, as the value may change in
    between calls. A race on setsockopt disable may cause a packet > mtu
    to be sent without having GSO options set.
    
    Fixes: bfd5f4a3d605 ("packet: Add GSO/csum offload support.")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a1a563d82bf0660f626c5a56ea91190f1283b315
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Sep 27 18:47:13 2017 +0900

    usb: renesas_usbhs: fix usbhsf_fifo_clear() for RX direction
    
    commit 0a2ce62b61f2c76d0213edf4e37aaf54a8ddf295 upstream.
    
    This patch fixes an issue that the usbhsf_fifo_clear() is possible
    to cause 10 msec delay if the pipe is RX direction and empty because
    the FRDY bit will never be set to 1 in such case.
    
    Fixes: e8d548d54968 ("usb: renesas_usbhs: fifo became independent from pipe.")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8fcbf776604a2c7bd52ceb6171cf57577532c1b3
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Sep 27 18:47:12 2017 +0900

    usb: renesas_usbhs: fix the BCLR setting condition for non-DCP pipe
    
    commit 6124607acc88fffeaadf3aacfeb3cc1304c87387 upstream.
    
    This patch fixes an issue that the driver sets the BCLR bit of
    {C,Dn}FIFOCTR register to 1 even when it's non-DCP pipe and
    the FRDY bit of {C,Dn}FIFOCTR register is set to 1.
    
    Fixes: e8d548d54968 ("usb: renesas_usbhs: fifo became independent from pipe.")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7b416b9dac6ede26d4ca0c1a88b448b543623ff3
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 26 15:15:49 2017 -0400

    USB: dummy-hcd: Fix erroneous synchronization change
    
    commit 7dbd8f4cabd96db5a50513de9d83a8105a5ffc81 upstream.
    
    A recent change to the synchronization in dummy-hcd was incorrect.
    The issue was that dummy_udc_stop() contained no locking and therefore
    could race with various gadget driver callbacks, and the fix was to
    add locking and issue the callbacks with the private spinlock held.
    
    UDC drivers aren't supposed to do this.  Gadget driver callback
    routines are allowed to invoke functions in the UDC driver, and these
    functions will generally try to acquire the private spinlock.  This
    would deadlock the driver.
    
    The correct solution is to drop the spinlock before issuing callbacks,
    and avoid races by emulating the synchronize_irq() call that all real
    UDC drivers must perform in their ->udc_stop() routines after
    disabling interrupts.  This involves adding a flag to dummy-hcd's
    private structure to keep track of whether interrupts are supposed to
    be enabled, and adding a counter to keep track of ongoing callbacks so
    that dummy_udc_stop() can wait for them all to finish.
    
    A real UDC driver won't receive disconnect, reset, suspend, resume, or
    setup events once it has disabled interrupts.  dummy-hcd will receive
    them but won't try to issue any gadget driver callbacks, which should
    be just as good.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: f16443a034c7 ("USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks")
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    [bwh: Backported to 3.2: adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4d9648315e42c1b45ed235a70cb94df141eed81c
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Jun 13 15:23:42 2017 -0400

    USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks
    
    commit f16443a034c7aa359ddf6f0f9bc40d01ca31faea upstream.
    
    Using the syzkaller kernel fuzzer, Andrey Konovalov generated the
    following error in gadgetfs:
    
    > BUG: KASAN: use-after-free in __lock_acquire+0x3069/0x3690
    > kernel/locking/lockdep.c:3246
    > Read of size 8 at addr ffff88003a2bdaf8 by task kworker/3:1/903
    >
    > CPU: 3 PID: 903 Comm: kworker/3:1 Not tainted 4.12.0-rc4+ #35
    > Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    > Workqueue: usb_hub_wq hub_event
    > Call Trace:
    >  __dump_stack lib/dump_stack.c:16 [inline]
    >  dump_stack+0x292/0x395 lib/dump_stack.c:52
    >  print_address_description+0x78/0x280 mm/kasan/report.c:252
    >  kasan_report_error mm/kasan/report.c:351 [inline]
    >  kasan_report+0x230/0x340 mm/kasan/report.c:408
    >  __asan_report_load8_noabort+0x19/0x20 mm/kasan/report.c:429
    >  __lock_acquire+0x3069/0x3690 kernel/locking/lockdep.c:3246
    >  lock_acquire+0x22d/0x560 kernel/locking/lockdep.c:3855
    >  __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
    >  _raw_spin_lock+0x2f/0x40 kernel/locking/spinlock.c:151
    >  spin_lock include/linux/spinlock.h:299 [inline]
    >  gadgetfs_suspend+0x89/0x130 drivers/usb/gadget/legacy/inode.c:1682
    >  set_link_state+0x88e/0xae0 drivers/usb/gadget/udc/dummy_hcd.c:455
    >  dummy_hub_control+0xd7e/0x1fb0 drivers/usb/gadget/udc/dummy_hcd.c:2074
    >  rh_call_control drivers/usb/core/hcd.c:689 [inline]
    >  rh_urb_enqueue drivers/usb/core/hcd.c:846 [inline]
    >  usb_hcd_submit_urb+0x92f/0x20b0 drivers/usb/core/hcd.c:1650
    >  usb_submit_urb+0x8b2/0x12c0 drivers/usb/core/urb.c:542
    >  usb_start_wait_urb+0x148/0x5b0 drivers/usb/core/message.c:56
    >  usb_internal_control_msg drivers/usb/core/message.c:100 [inline]
    >  usb_control_msg+0x341/0x4d0 drivers/usb/core/message.c:151
    >  usb_clear_port_feature+0x74/0xa0 drivers/usb/core/hub.c:412
    >  hub_port_disable+0x123/0x510 drivers/usb/core/hub.c:4177
    >  hub_port_init+0x1ed/0x2940 drivers/usb/core/hub.c:4648
    >  hub_port_connect drivers/usb/core/hub.c:4826 [inline]
    >  hub_port_connect_change drivers/usb/core/hub.c:4999 [inline]
    >  port_event drivers/usb/core/hub.c:5105 [inline]
    >  hub_event+0x1ae1/0x3d40 drivers/usb/core/hub.c:5185
    >  process_one_work+0xc08/0x1bd0 kernel/workqueue.c:2097
    >  process_scheduled_works kernel/workqueue.c:2157 [inline]
    >  worker_thread+0xb2b/0x1860 kernel/workqueue.c:2233
    >  kthread+0x363/0x440 kernel/kthread.c:231
    >  ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:424
    >
    > Allocated by task 9958:
    >  save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
    >  save_stack+0x43/0xd0 mm/kasan/kasan.c:513
    >  set_track mm/kasan/kasan.c:525 [inline]
    >  kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:617
    >  kmem_cache_alloc_trace+0x87/0x280 mm/slub.c:2745
    >  kmalloc include/linux/slab.h:492 [inline]
    >  kzalloc include/linux/slab.h:665 [inline]
    >  dev_new drivers/usb/gadget/legacy/inode.c:170 [inline]
    >  gadgetfs_fill_super+0x24f/0x540 drivers/usb/gadget/legacy/inode.c:1993
    >  mount_single+0xf6/0x160 fs/super.c:1192
    >  gadgetfs_mount+0x31/0x40 drivers/usb/gadget/legacy/inode.c:2019
    >  mount_fs+0x9c/0x2d0 fs/super.c:1223
    >  vfs_kern_mount.part.25+0xcb/0x490 fs/namespace.c:976
    >  vfs_kern_mount fs/namespace.c:2509 [inline]
    >  do_new_mount fs/namespace.c:2512 [inline]
    >  do_mount+0x41b/0x2d90 fs/namespace.c:2834
    >  SYSC_mount fs/namespace.c:3050 [inline]
    >  SyS_mount+0xb0/0x120 fs/namespace.c:3027
    >  entry_SYSCALL_64_fastpath+0x1f/0xbe
    >
    > Freed by task 9960:
    >  save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
    >  save_stack+0x43/0xd0 mm/kasan/kasan.c:513
    >  set_track mm/kasan/kasan.c:525 [inline]
    >  kasan_slab_free+0x72/0xc0 mm/kasan/kasan.c:590
    >  slab_free_hook mm/slub.c:1357 [inline]
    >  slab_free_freelist_hook mm/slub.c:1379 [inline]
    >  slab_free mm/slub.c:2961 [inline]
    >  kfree+0xed/0x2b0 mm/slub.c:3882
    >  put_dev+0x124/0x160 drivers/usb/gadget/legacy/inode.c:163
    >  gadgetfs_kill_sb+0x33/0x60 drivers/usb/gadget/legacy/inode.c:2027
    >  deactivate_locked_super+0x8d/0xd0 fs/super.c:309
    >  deactivate_super+0x21e/0x310 fs/super.c:340
    >  cleanup_mnt+0xb7/0x150 fs/namespace.c:1112
    >  __cleanup_mnt+0x1b/0x20 fs/namespace.c:1119
    >  task_work_run+0x1a0/0x280 kernel/task_work.c:116
    >  exit_task_work include/linux/task_work.h:21 [inline]
    >  do_exit+0x18a8/0x2820 kernel/exit.c:878
    >  do_group_exit+0x14e/0x420 kernel/exit.c:982
    >  get_signal+0x784/0x1780 kernel/signal.c:2318
    >  do_signal+0xd7/0x2130 arch/x86/kernel/signal.c:808
    >  exit_to_usermode_loop+0x1ac/0x240 arch/x86/entry/common.c:157
    >  prepare_exit_to_usermode arch/x86/entry/common.c:194 [inline]
    >  syscall_return_slowpath+0x3ba/0x410 arch/x86/entry/common.c:263
    >  entry_SYSCALL_64_fastpath+0xbc/0xbe
    >
    > The buggy address belongs to the object at ffff88003a2bdae0
    >  which belongs to the cache kmalloc-1024 of size 1024
    > The buggy address is located 24 bytes inside of
    >  1024-byte region [ffff88003a2bdae0, ffff88003a2bdee0)
    > The buggy address belongs to the page:
    > page:ffffea0000e8ae00 count:1 mapcount:0 mapping:          (null)
    > index:0x0 compound_mapcount: 0
    > flags: 0x100000000008100(slab|head)
    > raw: 0100000000008100 0000000000000000 0000000000000000 0000000100170017
    > raw: ffffea0000ed3020 ffffea0000f5f820 ffff88003e80efc0 0000000000000000
    > page dumped because: kasan: bad access detected
    >
    > Memory state around the buggy address:
    >  ffff88003a2bd980: fb fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >  ffff88003a2bda00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    > >ffff88003a2bda80: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fb
    >                                                                 ^
    >  ffff88003a2bdb00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >  ffff88003a2bdb80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    > ==================================================================
    
    What this means is that the gadgetfs_suspend() routine was trying to
    access dev->lock after it had been deallocated.  The root cause is a
    race in the dummy_hcd driver; the dummy_udc_stop() routine can race
    with the rest of the driver because it contains no locking.  And even
    when proper locking is added, it can still race with the
    set_link_state() function because that function incorrectly drops the
    private spinlock before invoking any gadget driver callbacks.
    
    The result of this race, as seen above, is that set_link_state() can
    invoke a callback in gadgetfs even after gadgetfs has been unbound
    from dummy_hcd's UDC and its private data structures have been
    deallocated.
    
    include/linux/usb/gadget.h documents that the ->reset, ->disconnect,
    ->suspend, and ->resume callbacks may be invoked in interrupt context.
    In general this is necessary, to prevent races with gadget driver
    removal.  This patch fixes dummy_hcd to retain the spinlock across
    these calls, and it adds a spinlock acquisition to dummy_udc_stop() to
    prevent the race.
    
    The net2280 driver makes the same mistake of dropping the private
    spinlock for its ->disconnect and ->reset callback invocations.  The
    patch fixes it too.
    
    Lastly, since gadgetfs_suspend() may be invoked in interrupt context,
    it cannot assume that interrupts are enabled when it runs.  It must
    use spin_lock_irqsave() instead of spin_lock_irq().  The patch fixes
    that bug as well.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [bwh: Backported to 3.2:
     - Drop changes in net2280
     - Adjust filenames, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f0318387bb5088c1f787dff79f4dd7508f25e147
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 26 15:15:40 2017 -0400

    USB: dummy-hcd: fix infinite-loop resubmission bug
    
    commit 0173a68bfb0ad1c72a6ee39cc485aa2c97540b98 upstream.
    
    The dummy-hcd HCD/UDC emulator tries not to do too much work during
    each timer interrupt.  But it doesn't try very hard; currently all
    it does is limit the total amount of bulk data transferred.  Other
    transfer types aren't limited, and URBs that transfer no data (because
    of an error, perhaps) don't count toward the limit, even though on a
    real USB bus they would consume at least a minimum overhead.
    
    This means it's possible to get the driver stuck in an infinite loop,
    for example, if the host class driver resubmits an URB every time it
    completes (which is common for interrupt URBs).  Each time the URB is
    resubmitted it gets added to the end of the pending-URBs list, and
    dummy-hcd doesn't stop until that list is empty.  Andrey Konovalov was
    able to trigger this failure mode using the syzkaller fuzzer.
    
    This patch fixes the infinite-loop problem by restricting the URBs
    handled during each timer interrupt to those that were already on the
    pending list when the interrupt routine started.  Newly added URBs
    won't be processed until the next timer interrupt.  The problem of
    properly accounting for non-bulk bandwidth (as well as packet and
    transaction overhead) is not addressed here.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7408c3e7745d10a60738e5726a29893cb707b260
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Mon Sep 25 12:23:03 2017 +0200

    vfs: Return -ENXIO for negative SEEK_HOLE / SEEK_DATA offsets
    
    commit fc46820b27a2d9a46f7e90c9ceb4a64a1bc5fab8 upstream.
    
    In generic_file_llseek_size, return -ENXIO for negative offsets as well
    as offsets beyond EOF.  This affects filesystems which don't implement
    SEEK_HOLE / SEEK_DATA internally, possibly because they don't support
    holes.
    
    Fixes xfstest generic/448.
    
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.2: s/eof/i_size_read(inode)/]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a0ff43031db9d248f659a5db3a819f5498203775
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Sep 18 11:37:03 2017 -0700

    KEYS: prevent creating a different user's keyrings
    
    commit 237bbd29f7a049d310d907f4b2716a7feef9abf3 upstream.
    
    It was possible for an unprivileged user to create the user and user
    session keyrings for another user.  For example:
    
        sudo -u '#3000' sh -c 'keyctl add keyring _uid.4000 "" @u
                               keyctl add keyring _uid_ses.4000 "" @u
                               sleep 15' &
        sleep 1
        sudo -u '#4000' keyctl describe @u
        sudo -u '#4000' keyctl describe @us
    
    This is problematic because these "fake" keyrings won't have the right
    permissions.  In particular, the user who created them first will own
    them and will have full access to them via the possessor permissions,
    which can be used to compromise the security of a user's keys:
    
        -4: alswrv-----v------------  3000     0 keyring: _uid.4000
        -5: alswrv-----v------------  3000     0 keyring: _uid_ses.4000
    
    Fix it by marking user and user session keyrings with a flag
    KEY_FLAG_UID_KEYRING.  Then, when searching for a user or user session
    keyring by name, skip all keyrings that don't have the flag set.
    
    Fixes: 69664cf16af4 ("keys: don't generate user and user session keyrings unless they're accessed")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0286cd9b50525d917de6f882fa6cbbe4190cf2d2
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Sep 18 11:36:31 2017 -0700

    KEYS: fix key refcount leak in keyctl_read_key()
    
    commit 7fc0786d956d9e59b68d282be9b156179846ea3d upstream.
    
    In keyctl_read_key(), if key_permission() were to return an error code
    other than EACCES, we would leak a the reference to the key.  This can't
    actually happen currently because key_permission() can only return an
    error code other than EACCES if security_key_permission() does, only
    SELinux and Smack implement that hook, and neither can return an error
    code other than EACCES.  But it should still be fixed, as it is a bug
    waiting to happen.
    
    Fixes: 29db91906340 ("[PATCH] Keys: Add LSM hooks for key management [try #3]")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4955da6650a89d4c9ea194dbfbe9ae5ae52f52e1
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Sep 18 11:36:12 2017 -0700

    KEYS: fix key refcount leak in keyctl_assume_authority()
    
    commit 884bee0215fcc239b30c062c37ca29077005e064 upstream.
    
    In keyctl_assume_authority(), if keyctl_change_reqkey_auth() were to
    fail, we would leak the reference to the 'authkey'.  Currently this can
    only happen if prepare_creds() fails to allocate memory.  But it still
    should be fixed, as it is a more severe bug waiting to happen.
    
    This patch also moves the read of 'authkey->serial' to before the
    reference to the authkey is dropped.  Doing the read after dropping the
    reference is very fragile because it assumes we still hold another
    reference to the key.  (Which we do, in current->cred->request_key_auth,
    but there's no reason not to write it in the "obviously correct" way.)
    
    Fixes: d84f4f992cbd ("CRED: Inaugurate COW credentials")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9e9039264036f9d1213920150f7db680c385aaf8
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Sep 21 13:57:41 2017 -0700

    KEYS: don't revoke uninstantiated key in request_key_auth_new()
    
    commit f7b48cf08fa63a68b59c2894806ee478216d7f91 upstream.
    
    If key_instantiate_and_link() were to fail (which fortunately isn't
    possible currently), the call to key_revoke(authkey) would crash with a
    NULL pointer dereference in request_key_auth_revoke() because the key
    has not yet been instantiated.
    
    Fix this by removing the call to key_revoke().  key_put() is sufficient,
    as it's not possible for an uninstantiated authkey to have been used for
    anything yet.
    
    Fixes: b5f545c880a2 ("[PATCH] keys: Permit running process to instantiate keys")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3b9c8a06857e48471028f8446176ff8664911626
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Sep 21 13:57:40 2017 -0700

    KEYS: fix cred refcount leak in request_key_auth_new()
    
    commit 44d8143340a99b167c74365e844516b73523c087 upstream.
    
    In request_key_auth_new(), if key_alloc() or key_instantiate_and_link()
    were to fail, we would leak a reference to the 'struct cred'.  Currently
    this can only happen if key_alloc() fails to allocate memory.  But it
    still should be fixed, as it is a more severe bug waiting to happen.
    
    Fix it by cleaning things up to use a helper function which frees a
    'struct request_key_auth' correctly.
    
    Fixes: d84f4f992cbd ("CRED: Inaugurate COW credentials")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c1f10c6b89f3b32eb701395e64244d1c872ae586
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 13:23:58 2017 -0400

    USB: gadgetfs: Fix crash caused by inadequate synchronization
    
    commit 520b72fc64debf8a86c3853b8e486aa5982188f0 upstream.
    
    The gadgetfs driver (drivers/usb/gadget/legacy/inode.c) was written
    before the UDC and composite frameworks were adopted; it is a legacy
    driver.  As such, it expects that once bound to a UDC controller, it
    will not be unbound until it unregisters itself.
    
    However, the UDC framework does unbind function drivers while they are
    still registered.  When this happens, it can cause the gadgetfs driver
    to misbehave or crash.  For example, userspace can cause a crash by
    opening the device file and doing an ioctl call before setting up a
    configuration (found by Andrey Konovalov using the syzkaller fuzzer).
    
    This patch adds checks and synchronization to prevent these bad
    behaviors.  It adds a udc_usage counter that the driver increments at
    times when it is using a gadget interface without holding the private
    spinlock.  The unbind routine waits for this counter to go to 0 before
    returning, thereby ensuring that the UDC is no longer in use.
    
    The patch also adds a check in the dev_ioctl() routine to make sure
    the driver is bound to a UDC before dereferencing the gadget pointer,
    and it makes destroy_ep_files() synchronize with the endpoint I/O
    routines, to prevent the user from accessing an endpoint data
    structure after it has been removed.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [bwh: Backported to 3.2:
     - Expand locked section in ep0_write() to match upstream
     - Adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a776d55c9e394166bbb509b214f09ebbc6baf62a
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 16:12:01 2017 -0400

    USB: gadgetfs: fix copy_to_user while holding spinlock
    
    commit 6e76c01e71551cb221c1f3deacb9dcd9a7346784 upstream.
    
    The gadgetfs driver as a long-outstanding FIXME, regarding a call of
    copy_to_user() made while holding a spinlock.  This patch fixes the
    issue by dropping the spinlock and using the dev->udc_usage mechanism
    introduced by another recent patch to guard against status changes
    while the lock isn't held.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [bwh: Backported to 3.2: adjust filename]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a91864a3a37edaaad870391fa798f1d974a7a9bf
Author: Bin Liu <b-liu@ti.com>
Date:   Thu May 26 11:43:45 2016 -0500

    usb: gadget: fix spinlock dead lock in gadgetfs
    
    commit d246dcb2331c5783743720e6510892eb1d2801d9 upstream.
    
    [   40.467381] =============================================
    [   40.473013] [ INFO: possible recursive locking detected ]
    [   40.478651] 4.6.0-08691-g7f3db9a #37 Not tainted
    [   40.483466] ---------------------------------------------
    [   40.489098] usb/733 is trying to acquire lock:
    [   40.493734]  (&(&dev->lock)->rlock){-.....}, at: [<bf129288>] ep0_complete+0x18/0xdc [gadgetfs]
    [   40.502882]
    [   40.502882] but task is already holding lock:
    [   40.508967]  (&(&dev->lock)->rlock){-.....}, at: [<bf12a420>] ep0_read+0x20/0x5e0 [gadgetfs]
    [   40.517811]
    [   40.517811] other info that might help us debug this:
    [   40.524623]  Possible unsafe locking scenario:
    [   40.524623]
    [   40.530798]        CPU0
    [   40.533346]        ----
    [   40.535894]   lock(&(&dev->lock)->rlock);
    [   40.540088]   lock(&(&dev->lock)->rlock);
    [   40.544284]
    [   40.544284]  *** DEADLOCK ***
    [   40.544284]
    [   40.550461]  May be due to missing lock nesting notation
    [   40.550461]
    [   40.557544] 2 locks held by usb/733:
    [   40.561271]  #0:  (&f->f_pos_lock){+.+.+.}, at: [<c02a6114>] __fdget_pos+0x40/0x48
    [   40.569219]  #1:  (&(&dev->lock)->rlock){-.....}, at: [<bf12a420>] ep0_read+0x20/0x5e0 [gadgetfs]
    [   40.578523]
    [   40.578523] stack backtrace:
    [   40.583075] CPU: 0 PID: 733 Comm: usb Not tainted 4.6.0-08691-g7f3db9a #37
    [   40.590246] Hardware name: Generic AM33XX (Flattened Device Tree)
    [   40.596625] [<c010ffbc>] (unwind_backtrace) from [<c010c1bc>] (show_stack+0x10/0x14)
    [   40.604718] [<c010c1bc>] (show_stack) from [<c04207fc>] (dump_stack+0xb0/0xe4)
    [   40.612267] [<c04207fc>] (dump_stack) from [<c01886ec>] (__lock_acquire+0xf68/0x1994)
    [   40.620440] [<c01886ec>] (__lock_acquire) from [<c0189528>] (lock_acquire+0xd8/0x238)
    [   40.628621] [<c0189528>] (lock_acquire) from [<c06ad6b4>] (_raw_spin_lock_irqsave+0x38/0x4c)
    [   40.637440] [<c06ad6b4>] (_raw_spin_lock_irqsave) from [<bf129288>] (ep0_complete+0x18/0xdc [gadgetfs])
    [   40.647339] [<bf129288>] (ep0_complete [gadgetfs]) from [<bf10a728>] (musb_g_giveback+0x118/0x1b0 [musb_hdrc])
    [   40.657842] [<bf10a728>] (musb_g_giveback [musb_hdrc]) from [<bf108768>] (musb_g_ep0_queue+0x16c/0x188 [musb_hdrc])
    [   40.668772] [<bf108768>] (musb_g_ep0_queue [musb_hdrc]) from [<bf12a944>] (ep0_read+0x544/0x5e0 [gadgetfs])
    [   40.678963] [<bf12a944>] (ep0_read [gadgetfs]) from [<c0284470>] (__vfs_read+0x20/0x110)
    [   40.687414] [<c0284470>] (__vfs_read) from [<c0285324>] (vfs_read+0x88/0x114)
    [   40.694864] [<c0285324>] (vfs_read) from [<c0286150>] (SyS_read+0x44/0x9c)
    [   40.702051] [<c0286150>] (SyS_read) from [<c0107820>] (ret_fast_syscall+0x0/0x1c)
    
    This is caused by the spinlock bug in ep0_read().
    Fix the two other deadlock sources in gadgetfs_setup() too.
    
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8811455c7f369431eb3811f7d44beaa149d5988d
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 15:59:30 2017 -0400

    usb-storage: unusual_devs entry to fix write-access regression for Seagate external drives
    
    commit 113f6eb6d50cfa5e2a1cdcf1678b12661fa272ab upstream.
    
    Kris Lindgren reports that without the NO_WP_DETECT flag, his Seagate
    external disk drive fails all write accesses.  This regresssion dates
    back approximately to the start of the 4.x kernel releases.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Kris Lindgren <kris.lindgren@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3eee55582f4b23d2579286c5ba61d82828bd655f
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Fri Sep 1 17:13:43 2017 -0700

    Input: uinput - avoid FF flush when destroying device
    
    commit e8b95728f724797f958912fd9b765a695595d3a6 upstream.
    
    Normally, when input device supporting force feedback effects is being
    destroyed, we try to "flush" currently playing effects, so that the
    physical device does not continue vibrating (or executing other effects).
    Unfortunately this does not work well for uinput as flushing of the effects
    deadlocks with the destroy action:
    
    - if device is being destroyed because the file descriptor is being closed,
      then there is noone to even service FF requests;
    
    - if device is being destroyed because userspace sent UI_DEV_DESTROY,
      while theoretically it could be possible to service FF requests,
      userspace is unlikely to do so (they'd need to make sure FF handling
      happens on a separate thread) even if kernel solves the issue with FF
      ioctls deadlocking with UI_DEV_DESTROY ioctl on udev->mutex.
    
    To avoid lockups like the one below, let's install a custom input device
    flush handler, and avoid trying to flush force feedback effects when we
    destroying the device, and instead rely on uinput to shut off the device
    properly.
    
    NMI watchdog: Watchdog detected hard LOCKUP on cpu 3
    ...
     <<EOE>>  [<ffffffff817a0307>] _raw_spin_lock_irqsave+0x37/0x40
     [<ffffffff810e633d>] complete+0x1d/0x50
     [<ffffffffa00ba08c>] uinput_request_done+0x3c/0x40 [uinput]
     [<ffffffffa00ba587>] uinput_request_submit.part.7+0x47/0xb0 [uinput]
     [<ffffffffa00bb62b>] uinput_dev_erase_effect+0x5b/0x76 [uinput]
     [<ffffffff815d91ad>] erase_effect+0xad/0xf0
     [<ffffffff815d929d>] flush_effects+0x4d/0x90
     [<ffffffff815d4cc0>] input_flush_device+0x40/0x60
     [<ffffffff815daf1c>] evdev_cleanup+0xac/0xc0
     [<ffffffff815daf5b>] evdev_disconnect+0x2b/0x60
     [<ffffffff815d74ac>] __input_unregister_device+0xac/0x150
     [<ffffffff815d75f7>] input_unregister_device+0x47/0x70
     [<ffffffffa00bac45>] uinput_destroy_device+0xb5/0xc0 [uinput]
     [<ffffffffa00bb2de>] uinput_ioctl_handler.isra.9+0x65e/0x740 [uinput]
     [<ffffffff811231ab>] ? do_futex+0x12b/0xad0
     [<ffffffffa00bb3f8>] uinput_ioctl+0x18/0x20 [uinput]
     [<ffffffff81241248>] do_vfs_ioctl+0x298/0x480
     [<ffffffff81337553>] ? security_file_ioctl+0x43/0x60
     [<ffffffff812414a9>] SyS_ioctl+0x79/0x90
     [<ffffffff817a04ee>] entry_SYSCALL_64_fastpath+0x12/0x71
    
    Reported-by: Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>
    Reported-by: Clément VUCHENER <clement.vuchener@gmail.com>
    Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=193741
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7cc1730f5aa986547f721e0f6516ef02c6cc5719
Author: LEROY Christophe <christophe.leroy@c-s.fr>
Date:   Wed Sep 13 12:44:51 2017 +0200

    crypto: talitos - fix sha224
    
    commit afd62fa26343be6445479e75de9f07092a061459 upstream.
    
    Kernel crypto tests report the following error at startup
    
    [    2.752626] alg: hash: Test 4 failed for sha224-talitos
    [    2.757907] 00000000: 30 e2 86 e2 e7 8a dd 0d d7 eb 9f d5 83 fe f1 b0
    00000010: 2d 5a 6c a5 f9 55 ea fd 0e 72 05 22
    
    This patch fixes it
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7153ff439446521ff40f639357b8c567083e7ef0
Author: Andreas Engel <anen-nospam@gmx.net>
Date:   Mon Sep 18 21:11:57 2017 +0200

    USB: serial: cp210x: add support for ELV TFD500
    
    commit c496ad835c31ad639b6865714270b3003df031f6 upstream.
    
    Add the USB device id for the ELV TFD500 data logger.
    
    Signed-off-by: Andreas Engel <anen-nospam@gmx.net>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c87f2285d0f94bbb594c2d768143e2569697df02
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Mon Sep 18 16:51:51 2017 +0200

    s390/mm: fix write access check in gup_huge_pmd()
    
    commit ba385c0594e723d41790ecfb12c610e6f90c7785 upstream.
    
    The check for the _SEGMENT_ENTRY_PROTECT bit in gup_huge_pmd() is the
    wrong way around. It must not be set for write==1, and not be checked for
    write==0. Fix this similar to how it was fixed for ptes long time ago in
    commit 25591b070336 ("[S390] fix get_user_pages_fast").
    
    One impact of this bug would be unnecessarily using the gup slow path for
    write==0 on r/w mappings. A potentially more severe impact would be that
    gup_huge_pmd() will succeed for write==1 on r/o mappings.
    
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    [bwh: Backported to 3.2:
     - Segment flag names are different
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 6c7d6c44646e59ef9443c51f60c251b907dbc180
Author: Jim Dickerson <jim.dickerson@hpe.com>
Date:   Mon Sep 18 17:39:14 2017 +0300

    usb: pci-quirks.c: Corrected timeout values used in handshake
    
    commit 114ec3a6f9096d211a4aff4277793ba969a62c73 upstream.
    
    Servers were emitting failed handoff messages but were not
    waiting the full 1 second as designated in section 4.22.1 of
    the eXtensible Host Controller Interface specifications. The
    handshake was using wrong units so calls were made with milliseconds
    not microseconds. Comments referenced 5 seconds not 1 second as
    in specs.
    
    The wrong units were also corrected in a second handshake call.
    
    Signed-off-by: Jim Dickerson <jim.dickerson@hpe.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5e425d575cd83c9de5662378e78b90f2e39712dc
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon Sep 18 17:39:13 2017 +0300

    xhci: fix finding correct bus_state structure for USB 3.1 hosts
    
    commit 5a838a13c9b4e5dd188b7a6eaeb894e9358ead0c upstream.
    
    xhci driver keeps a bus_state structure for each hcd (usb2 and usb3)
    
    The structure is picked based on hcd speed, but driver only compared
    for HCD_USB3 speed, returning the wrong bus_state for HCD_USB31 hosts.
    
    This caused null pointer dereference errors in bus_resume function.
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0f87665439a5b128c3b76571e7bdaf061c9a2225
Author: Dmitry Fleytman <dmitry@daynix.com>
Date:   Tue Sep 5 11:40:56 2017 +0300

    usb: Increase quirk delay for USB devices
    
    commit b2a542bbb3081dbd64acc8929c140d196664c406 upstream.
    
    Commit e0429362ab15
    ("usb: Add device quirk for Logitech HD Pro Webcams C920 and C930e")
    introduced quirk to workaround an issue with some Logitech webcams.
    
    The workaround is introducing delay for some USB operations.
    
    According to our testing, delay introduced by original commit
    is not long enough and in rare cases we still see issues described
    by the aforementioned commit.
    
    This patch increases delays introduced by original commit.
    Having this patch applied we do not see those problems anymore.
    
    Signed-off-by: Dmitry Fleytman <dmitry@daynix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c95d921ebf9e02853bd090f3b3845085082185f8
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Sep 14 14:30:55 2017 +0200

    uwb: properly check kthread_run return value
    
    commit bbf26183b7a6236ba602f4d6a2f7cade35bba043 upstream.
    
    uwbd_start() calls kthread_run() and checks that the return value is
    not NULL. But the return value is not NULL in case kthread_run() fails,
    it takes the form of ERR_PTR(-EINTR).
    
    Use IS_ERR() instead.
    
    Also add a check to uwbd_stop().
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 82ff3c87e407b2497ae55c7802288759d0a864c6
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Sep 14 16:52:59 2017 +0200

    uwb: ensure that endpoint is interrupt
    
    commit 70e743e4cec3733dc13559f6184b35d358b9ef3f upstream.
    
    hwarc_neep_init() assumes that endpoint 0 is interrupt, but there's no
    check for that, which results in a WARNING in USB core code, when a bad
    USB descriptor is provided from a device:
    
    usb 1-1: BOGUS urb xfer, pipe 1 != type 3
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 3 at drivers/usb/core/urb.c:449 usb_submit_urb+0xf8a/0x11d0
    Modules linked in:
    CPU: 0 PID: 3 Comm: kworker/0:0 Not tainted 4.13.0+ #111
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Workqueue: usb_hub_wq hub_event
    task: ffff88006bdc1a00 task.stack: ffff88006bde8000
    RIP: 0010:usb_submit_urb+0xf8a/0x11d0 drivers/usb/core/urb.c:448
    RSP: 0018:ffff88006bdee3c0 EFLAGS: 00010282
    RAX: 0000000000000029 RBX: ffff8800672a7200 RCX: 0000000000000000
    RDX: 0000000000000029 RSI: ffff88006c815c78 RDI: ffffed000d7bdc6a
    RBP: ffff88006bdee4c0 R08: fffffbfff0fe00ff R09: fffffbfff0fe00ff
    R10: 0000000000000018 R11: fffffbfff0fe00fe R12: 1ffff1000d7bdc7f
    R13: 0000000000000003 R14: 0000000000000001 R15: ffff88006b02cc90
    FS:  0000000000000000(0000) GS:ffff88006c800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fe4daddf000 CR3: 000000006add6000 CR4: 00000000000006f0
    Call Trace:
     hwarc_neep_init+0x4ce/0x9c0 drivers/uwb/hwa-rc.c:710
     uwb_rc_add+0x2fb/0x730 drivers/uwb/lc-rc.c:361
     hwarc_probe+0x34e/0x9b0 drivers/uwb/hwa-rc.c:858
     usb_probe_interface+0x351/0x8d0 drivers/usb/core/driver.c:361
     really_probe drivers/base/dd.c:385
     driver_probe_device+0x610/0xa00 drivers/base/dd.c:529
     __device_attach_driver+0x230/0x290 drivers/base/dd.c:625
     bus_for_each_drv+0x15e/0x210 drivers/base/bus.c:463
     __device_attach+0x269/0x3c0 drivers/base/dd.c:682
     device_initial_probe+0x1f/0x30 drivers/base/dd.c:729
     bus_probe_device+0x1da/0x280 drivers/base/bus.c:523
     device_add+0xcf9/0x1640 drivers/base/core.c:1703
     usb_set_configuration+0x1064/0x1890 drivers/usb/core/message.c:1932
     generic_probe+0x73/0xe0 drivers/usb/core/generic.c:174
     usb_probe_device+0xaf/0xe0 drivers/usb/core/driver.c:266
     really_probe drivers/base/dd.c:385
     driver_probe_device+0x610/0xa00 drivers/base/dd.c:529
     __device_attach_driver+0x230/0x290 drivers/base/dd.c:625
     bus_for_each_drv+0x15e/0x210 drivers/base/bus.c:463
     __device_attach+0x269/0x3c0 drivers/base/dd.c:682
     device_initial_probe+0x1f/0x30 drivers/base/dd.c:729
     bus_probe_device+0x1da/0x280 drivers/base/bus.c:523
     device_add+0xcf9/0x1640 drivers/base/core.c:1703
     usb_new_device+0x7b8/0x1020 drivers/usb/core/hub.c:2457
     hub_port_connect drivers/usb/core/hub.c:4890
     hub_port_connect_change drivers/usb/core/hub.c:4996
     port_event drivers/usb/core/hub.c:5102
     hub_event+0x23c8/0x37c0 drivers/usb/core/hub.c:5182
     process_one_work+0x9fb/0x1570 kernel/workqueue.c:2097
     worker_thread+0x1e4/0x1350 kernel/workqueue.c:2231
     kthread+0x324/0x3f0 kernel/kthread.c:231
     ret_from_fork+0x25/0x30 arch/x86/entry/entry_64.S:425
    Code: 48 8b 85 30 ff ff ff 48 8d b8 98 00 00 00 e8 8e 93 07 ff 45 89
    e8 44 89 f1 4c 89 fa 48 89 c6 48 c7 c7 a0 e5 55 86 e8 20 08 8f fd <0f>
    ff e9 9b f7 ff ff e8 4a 04 d6 fd e9 80 f7 ff ff e8 60 11 a6
    ---[ end trace 55d741234124cfc3 ]---
    
    Check that endpoint is interrupt.
    
    Found by syzkaller.
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit e3cd598c745aef564ab832f14c62214d817d3419
Author: Henryk Heisig <hyniu@o2.pl>
Date:   Mon Sep 11 17:57:34 2017 +0200

    USB: serial: option: add support for TP-Link LTE module
    
    commit 837ddc4793a69b256ac5e781a5e729b448a8d983 upstream.
    
    This commit adds support for TP-Link LTE mPCIe module is used
    in in TP-Link MR200v1, MR6400v1 and v2 routers.
    
    Signed-off-by: Henryk Heisig <hyniu@o2.pl>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 593a54a589a838318c9499c8e840876453fabe4a
Author: Jeffrey Chu <jeffrey.chu@cypress.com>
Date:   Fri Sep 8 21:08:58 2017 +0000

    USB: serial: ftdi_sio: add id for Cypress WICED dev board
    
    commit a6c215e21b0dc5fe9416dce90f9acc2ea53c4502 upstream.
    
    Add CYPRESS_VID vid and CYPRESS_WICED_BT_USB and CYPRESS_WICED_WL_USB
    device IDs to ftdi_sio driver.
    
    Signed-off-by: Jeffrey Chu <jeffrey.chu@cypress.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 84e35fd3c942c65affe7634ed69f978110695c21
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Wed Sep 6 11:02:56 2017 +0200

    scsi: lpfc: Don't return internal MBXERR_ERROR code from probe function
    
    commit 5c756065e47dc3e84b00577bd109f0a8e69903d7 upstream.
    
    Internal error codes happen to be positive, thus the PCI driver core
    won't treat them as failure, but we do. This would cause a crash later
    on as lpfc_pci_remove_one() is called (e.g. as shutdown function).
    
    Fixes: 6d368e532168 ("[SCSI] lpfc 8.3.24: Add resource extent support")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Acked-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    [bwh: Backported to 3.2: adjust context, indentation]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit cd2f884550494fff41b80cf11b0a5568edd2706f
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Sun Sep 10 20:29:45 2017 +0300

    spi: uapi: spidev: add missing ioctl header
    
    commit a2b4a79b88b24c49d98d45a06a014ffd22ada1a4 upstream.
    
    The SPI_IOC_MESSAGE() macro references _IOC_SIZEBITS. Add linux/ioctl.h
    to make sure this macro is defined. This fixes the following build
    failure of lcdproc with the musl libc:
    
    In file included from .../sysroot/usr/include/sys/ioctl.h:7:0,
                     from hd44780-spi.c:31:
    hd44780-spi.c: In function 'spi_transfer':
    hd44780-spi.c:89:24: error: '_IOC_SIZEBITS' undeclared (first use in this function)
      status = ioctl(p->fd, SPI_IOC_MESSAGE(1), &xfer);
                            ^
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [bwh: Backported to 3.2: adjust filename]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f3b2148eda63b42e082259aaf1622c9ae2d53ac8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Jul 22 10:33:02 2017 +0300

    tile: array underflow in setup_maxnodemem()
    
    commit 637f23abca87d26e091e0d6647ec878d97d2c6cd upstream.
    
    My static checker correctly complains that we should have a lower bound
    on "node" to prevent an array underflow.
    
    Fixes: 867e359b97c9 ("arch/tile: core support for Tilera 32-bit chips.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>
    [bwh: Backported to 3.2: keep maxnodemem_mb as long]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
