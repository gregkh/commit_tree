commit 8afcfa55e6a7d8c58bdb4355bd544602e6f0c3ad
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 29 13:03:17 2017 +0200

    Linux 4.11.8

commit bc3512188f51f99b0b7c9714426483a5f6740a06
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Fri Jun 16 09:36:35 2017 +0100

    brcmfmac: fix uninitialized warning in brcmf_usb_probe_phase2()
    
    commit 35abcd4f9f303ac4f10f99b3f7e993e5f2e6fa37 upstream.
    
    This fixes the following warning:
    
      drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c: In function
      'brcmf_usb_probe_phase2':
      drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c:1198:2:
      warning: 'devinfo' may be used uninitialized in this function
      [-Wmaybe-uninitialized]
        mutex_unlock(&devinfo->dev_init_lock);
    
    Fixes: 6d0507a777fb ("brcmfmac: add parameter to pass error code in firmware callback")
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Reported-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5d12fe110cf59b8b0d7cea21521fd7761237d7d
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed May 17 11:24:47 2017 -0400

    netfilter: xtables: fix build failure from COMPAT_XT_ALIGN outside CONFIG_COMPAT
    
    commit 751a9c763849f5859cb69ea44b0430d00672f637 upstream.
    
    The patch in the Fixes references COMPAT_XT_ALIGN in the definition
    of XT_DATA_TO_USER, outside an #ifdef CONFIG_COMPAT block.
    
    Split XT_DATA_TO_USER into separate compat and non compat variants and
    define the first inside an CONFIG_COMPAT block.
    
    This simplifies both variants by removing branches inside the macro.
    
    Fixes: 324318f0248c ("netfilter: xtables: zero padding in data_to_user")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Cc: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 865cdeeae70ae9f9a0ecce183401cc61ee756287
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue May 9 16:17:37 2017 -0400

    netfilter: xtables: zero padding in data_to_user
    
    commit 324318f0248c31be8a08984146e7e4dd7cdd091d upstream.
    
    When looking up an iptables rule, the iptables binary compares the
    aligned match and target data (XT_ALIGN). In some cases this can
    exceed the actual data size to include padding bytes.
    
    Before commit f77bc5b23fb1 ("iptables: use match, target and data
    copy_to_user helpers") the malloc()ed bytes were overwritten by the
    kernel with kzalloced contents, zeroing the padding and making the
    comparison succeed. After this patch, the kernel copies and clears
    only data, leaving the padding bytes undefined.
    
    Extend the clear operation from data size to aligned data size to
    include the padding bytes, if any.
    
    Padding bytes can be observed in both match and target, and the bug
    triggered, by issuing a rule with match icmp and target ACCEPT:
    
      iptables -t mangle -A INPUT -i lo -p icmp --icmp-type 1 -j ACCEPT
      iptables -t mangle -D INPUT -i lo -p icmp --icmp-type 1 -j ACCEPT
    
    Fixes: f77bc5b23fb1 ("iptables: use match, target and data copy_to_user helpers")
    Reported-by: Paul Moore <pmoore@redhat.com>
    Reported-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Cc: Florian Westphal <fw@strlen.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 958c8a07d59e196b577d7b81817f5fc9f17edf19
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue May 30 16:21:51 2017 +0100

    net: phy: fix marvell phy status reading
    
    commit 898805e0cdf7fd860ec21bf661d3a0285a3defbd upstream.
    
    The Marvell driver incorrectly provides phydev->lp_advertising as the
    logical and of the link partner's advert and our advert.  This is
    incorrect - this field is supposed to store the link parter's unmodified
    advertisment.
    
    This allows ethtool to report the correct link partner auto-negotiation
    status.
    
    Fixes: be937f1f89ca ("Marvell PHY m88e1111 driver fix")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc95f4a320f05539ef5fb5ba9b7a4bd349c866ab
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Mon Apr 17 01:38:05 2017 +0200

    spi: double time out tolerance
    
    commit 833bfade96561216aa2129516a5926a0326860a2 upstream.
    
    The generic SPI code calculates how long the issued transfer would take
    and adds 100ms in addition to the timeout as tolerance. On my 500 MHz
    Lantiq Mips SoC I am getting timeouts from the SPI like this when the
    system boots up:
    
    m25p80 spi32766.4: SPI transfer timed out
    blk_update_request: I/O error, dev mtdblock3, sector 2
    SQUASHFS error: squashfs_read_data failed to read block 0x6e
    
    After increasing the tolerance for the timeout to 200ms I haven't seen
    these SPI transfer time outs any more.
    The Lantiq SPI driver in use here has an extra work queue in between,
    which gets triggered when the controller send the last word and the
    hardware FIFOs used for reading and writing are only 8 words long.
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87e67ff633d834342583aba6ffb0d073aade8f2c
Author: William Wu <william.wu@rock-chips.com>
Date:   Tue Apr 25 17:45:48 2017 +0800

    usb: gadget: f_fs: avoid out of bounds access on comp_desc
    
    commit b7f73850bb4fac1e2209a4dd5e636d39be92f42c upstream.
    
    Companion descriptor is only used for SuperSpeed endpoints,
    if the endpoints are HighSpeed or FullSpeed, the Companion
    descriptor will not allocated, so we can only access it if
    gadget is SuperSpeed.
    
    I can reproduce this issue on Rockchip platform rk3368 SoC
    which supports USB 2.0, and use functionfs for ADB. Kernel
    build with CONFIG_KASAN=y and CONFIG_SLUB_DEBUG=y report
    the following BUG:
    
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in ffs_func_set_alt+0x224/0x3a0 at addr ffffffc0601f6509
    Read of size 1 by task swapper/0/0
    ============================================================================
    BUG kmalloc-256 (Not tainted): kasan: bad access detected
    ----------------------------------------------------------------------------
    
    Disabling lock debugging due to kernel taint
    INFO: Allocated in ffs_func_bind+0x52c/0x99c age=1275 cpu=0 pid=1
    alloc_debug_processing+0x128/0x17c
    ___slab_alloc.constprop.58+0x50c/0x610
    __slab_alloc.isra.55.constprop.57+0x24/0x34
    __kmalloc+0xe0/0x250
    ffs_func_bind+0x52c/0x99c
    usb_add_function+0xd8/0x1d4
    configfs_composite_bind+0x48c/0x570
    udc_bind_to_driver+0x6c/0x170
    usb_udc_attach_driver+0xa4/0xd0
    gadget_dev_desc_UDC_store+0xcc/0x118
    configfs_write_file+0x1a0/0x1f8
    __vfs_write+0x64/0x174
    vfs_write+0xe4/0x200
    SyS_write+0x68/0xc8
    el0_svc_naked+0x24/0x28
    INFO: Freed in inode_doinit_with_dentry+0x3f0/0x7c4 age=1275 cpu=7 pid=247
    ...
    Call trace:
    [<ffffff900808aab4>] dump_backtrace+0x0/0x230
    [<ffffff900808acf8>] show_stack+0x14/0x1c
    [<ffffff90084ad420>] dump_stack+0xa0/0xc8
    [<ffffff90082157cc>] print_trailer+0x188/0x198
    [<ffffff9008215948>] object_err+0x3c/0x4c
    [<ffffff900821b5ac>] kasan_report+0x324/0x4dc
    [<ffffff900821aa38>] __asan_load1+0x24/0x50
    [<ffffff90089eb750>] ffs_func_set_alt+0x224/0x3a0
    [<ffffff90089d3760>] composite_setup+0xdcc/0x1ac8
    [<ffffff90089d7394>] android_setup+0x124/0x1a0
    [<ffffff90089acd18>] _setup+0x54/0x74
    [<ffffff90089b6b98>] handle_ep0+0x3288/0x4390
    [<ffffff90089b9b44>] dwc_otg_pcd_handle_out_ep_intr+0x14dc/0x2ae4
    [<ffffff90089be85c>] dwc_otg_pcd_handle_intr+0x1ec/0x298
    [<ffffff90089ad680>] dwc_otg_pcd_irq+0x10/0x20
    [<ffffff9008116328>] handle_irq_event_percpu+0x124/0x3ac
    [<ffffff9008116610>] handle_irq_event+0x60/0xa0
    [<ffffff900811af30>] handle_fasteoi_irq+0x10c/0x1d4
    [<ffffff9008115568>] generic_handle_irq+0x30/0x40
    [<ffffff90081159b4>] __handle_domain_irq+0xac/0xdc
    [<ffffff9008080e9c>] gic_handle_irq+0x64/0xa4
    ...
    Memory state around the buggy address:
      ffffffc0601f6400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ffffffc0601f6480: 00 00 00 00 00 00 00 00 00 00 06 fc fc fc fc fc
     >ffffffc0601f6500: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
                           ^
      ffffffc0601f6580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffffffc0601f6600: fc fc fc fc fc fc fc fc 00 00 00 00 00 00 00 00
    ==================================================================
    
    Signed-off-by: William Wu <william.wu@rock-chips.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Cc: Jerry Zhang <zhangjerry@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5693426a5c055e93fb1d6786e73d896db107f40b
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue Jun 20 22:28:37 2017 +0200

    drm: Fix GETCONNECTOR regression
    
    commit e94ac3510b6a0f696f2c442c4fc4051c8101ef12 upstream.
    
    In
    
    commit 91eefc05f0ac71902906b2058360e61bd25137fe
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Wed Dec 14 00:08:10 2016 +0100
    
        drm: Tighten locking in drm_mode_getconnector
    
    I reordered the logic a bit in that IOCTL, but that broke userspace
    since it'll get the new mode list, but not the new property values.
    Fix that again.
    
    v2: Fix up the error path handling when copy_to_user for the modes
    failes (Dhinakaran).
    
    Fixes: 91eefc05f0ac ("drm: Tighten locking in drm_mode_getconnector")
    Cc: Sean Paul <seanpaul@chromium.org>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: David Airlie <airlied@linux.ie>
    Cc: dri-devel@lists.freedesktop.org
    Reported-by: "H.J. Lu" <hjl.tools@gmail.com>
    Tested-by: "H.J. Lu" <hjl.tools@gmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=100576
    Cc: "H.J. Lu" <hjl.tools@gmail.com>
    Cc: "Pandiyan, Dhinakaran" <dhinakaran.pandiyan@intel.com>
    Reviewed-by: Sean Paul <seanpaul@chromium.org>
    Reviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170620202837.1701-1-daniel.vetter@ffwll.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 575cd7d4cec3ad0aa13c9d156fbcc3979db6f3ae
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jun 15 00:12:24 2017 +0100

    rxrpc: Fix several cases where a padded len isn't checked in ticket decode
    
    commit 5f2f97656ada8d811d3c1bef503ced266fcd53a0 upstream.
    
    This fixes CVE-2017-7482.
    
    When a kerberos 5 ticket is being decoded so that it can be loaded into an
    rxrpc-type key, there are several places in which the length of a
    variable-length field is checked to make sure that it's not going to
    overrun the available data - but the data is padded to the nearest
    four-byte boundary and the code doesn't check for this extra.  This could
    lead to the size-remaining variable wrapping and the data pointer going
    over the end of the buffer.
    
    Fix this by making the various variable-length data checks use the padded
    length.
    
    Reported-by: 石磊 <shilei-c@360.cn>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.c.dionne@auristor.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 017294bd93f4c1b3fcd004483195c88cb0f7794e
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Mon Jun 19 15:53:01 2017 +0300

    ACPI / scan: Fix enumeration for special SPI and I2C devices
    
    commit e4330d8bf669139a983255d1801733b64c2ae841 upstream.
    
    Commit f406270bf73d ("ACPI / scan: Set the visited flag for all
    enumerated devices") caused that two group of special SPI or I2C
    devices do not enumerate. SPI and I2C devices are expected to be
    enumerated by the SPI and I2C subsystems but change caused that
    acpi_bus_attach() marks those devices with acpi_device_set_enumerated().
    
    First group of devices are matched using Device Tree compatible property
    with special _HID "PRP0001". Those devices have matched scan handler,
    acpi_scan_attach_handler() retuns 1 and acpi_bus_attach() marks them
    with acpi_device_set_enumerated().
    
    Second group of devices without valid _HID such as "LNXVIDEO" have
    device->pnp.type.platform_id set to zero and change again marks them
    with acpi_device_set_enumerated().
    
    Fix this by flagging the SPI and I2C devices during struct acpi_device
    object initialization time and let the code in acpi_bus_attach() to go
    through the device_attach() and acpi_default_enumeration() path for all
    SPI and I2C devices.
    
    Fixes: f406270bf73d (ACPI / scan: Set the visited flag for all enumerated devices)
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3645b8f1fb789a9f5f149e064c32e08124467e15
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 17 01:19:50 2017 +0200

    ACPI / scan: Apply default enumeration to devices with ACPI drivers
    
    commit f5beabfe61794d9a9d9549d387cda2bffd81e504 upstream.
    
    The current code in acpi_bus_attach() is inconsistent with respect
    to device objects with ACPI drivers bound to them, as it allows
    ACPI drivers to bind to device objects with existing "physical"
    device companions, but it doesn't allow "physical" device objects
    to be created for ACPI device objects with ACPI drivers bound to
    them.  Thus, in some cases, the outcome depends on the ordering
    of events which is confusing at best.
    
    For this reason, modify acpi_bus_attach() to call
    acpi_default_enumeration() for device objects with the
    pnp.type.platform_id flag set regardless of whether or not
    any ACPI drivers are bound to them.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Joey Lee <jlee@suse.com>
    Cc: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e79fccb184cf0b3d014b15f610e10dd1fc8c4950
Author: Junshan Fang <Junshan.Fang@amd.com>
Date:   Thu Jun 15 14:02:20 2017 +0800

    drm/amdgpu: add Polaris12 DID
    
    commit 6e88491cf2a3b17199c78bd53348b39dc6a88275 upstream.
    
    Signed-off-by: Junshan Fang <Junshan.Fang@amd.com>
    Reviewed-by: Roger.He <Hongbo.He@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 033b267d4f6fd2ceb45241d64ad3813087dde663
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Jun 15 11:12:28 2017 -0400

    drm/amdgpu: adjust default display clock
    
    commit 52b482b0f4fd6d5267faf29fe91398e203f3c230 upstream.
    
    Increase the default display clock on newer asics to
    accomodate some high res modes with really high refresh
    rates.
    
    bug: https://bugs.freedesktop.org/show_bug.cgi?id=93826
    Acked-by: Chunming Zhou <david1.zhou@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e01b65960f926a9804b4f8d1c388482a9ba9bbe
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Jun 15 10:55:11 2017 -0400

    drm/amdgpu/atom: fix ps allocation size for EnableDispPowerGating
    
    commit 05b4017b37f1fce4b7185f138126dd8decdb381f upstream.
    
    We were using the wrong structure which lead to an overflow
    on some boards.
    
    bug: https://bugs.freedesktop.org/show_bug.cgi?id=101387
    Acked-by: Chunming Zhou <david1.zhou@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08a02c2c3f29f448d2b3617f61a8131bde4ae72f
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jun 19 15:59:58 2017 -0400

    drm/radeon: add a quirk for Toshiba Satellite L20-183
    
    commit acfd6ee4fa7ebeee75511825fe02be3f7ac1d668 upstream.
    
    Fixes resume from suspend.
    
    bug: https://bugzilla.kernel.org/show_bug.cgi?id=196121
    Reported-by: Przemek <soprwa@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b54ffeb713420637d7a4e40d8d2d85d43797f7b6
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jun 19 12:52:47 2017 -0400

    drm/radeon: add a PX quirk for another K53TK variant
    
    commit 4eb59793cca00b0e629b6d55b5abb5acb82c5868 upstream.
    
    Disable PX on these systems.
    
    bug: https://bugs.freedesktop.org/show_bug.cgi?id=101491
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47a1f8d951dc1e167d7b4a63792303b51377d1c3
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Wed Jun 7 20:29:50 2017 -0700

    iscsi-target: Reject immediate data underflow larger than SCSI transfer length
    
    commit abb85a9b512e8ca7ad04a5a8a6db9664fe644974 upstream.
    
    When iscsi WRITE underflow occurs there are two different scenarios
    that can happen.
    
    Normally in practice, when an EDTL vs. SCSI CDB TRANSFER LENGTH
    underflow is detected, the iscsi immediate data payload is the
    smaller SCSI CDB TRANSFER LENGTH.
    
    That is, when a host fabric LLD is using a fixed size EDTL for
    a specific control CDB, the SCSI CDB TRANSFER LENGTH and actual
    SCSI payload ends up being smaller than EDTL.  In iscsi, this
    means the received iscsi immediate data payload matches the
    smaller SCSI CDB TRANSFER LENGTH, because there is no more
    SCSI payload to accept beyond SCSI CDB TRANSFER LENGTH.
    
    However, it's possible for a malicous host to send a WRITE
    underflow where EDTL is larger than SCSI CDB TRANSFER LENGTH,
    but incoming iscsi immediate data actually matches EDTL.
    
    In the wild, we've never had a iscsi host environment actually
    try to do this.
    
    For this special case, it's wrong to truncate part of the
    control CDB payload and continue to process the command during
    underflow when immediate data payload received was larger than
    SCSI CDB TRANSFER LENGTH, so go ahead and reject and drop the
    bogus payload as a defensive action.
    
    Note this potential bug was originally relaxed by the following
    for allowing WRITE underflow in MSFT FCP host environments:
    
       commit c72c5250224d475614a00c1d7e54a67f77cd3410
       Author: Roland Dreier <roland@purestorage.com>
       Date:   Wed Jul 22 15:08:18 2015 -0700
    
          target: allow underflow/overflow for PR OUT etc. commands
    
    Cc: Roland Dreier <roland@purestorage.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 600966d6bc4d1602c17849e9b4eee68240054f0e
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Sat Jun 3 05:35:47 2017 -0700

    iscsi-target: Fix delayed logout processing greater than SECONDS_FOR_LOGOUT_COMP
    
    commit 105fa2f44e504c830697b0c794822112d79808dc upstream.
    
    This patch fixes a BUG() in iscsit_close_session() that could be
    triggered when iscsit_logout_post_handler() execution from within
    tx thread context was not run for more than SECONDS_FOR_LOGOUT_COMP
    (15 seconds), and the TCP connection didn't already close before
    then forcing tx thread context to automatically exit.
    
    This would manifest itself during explicit logout as:
    
    [33206.974254] 1 connection(s) still exist for iSCSI session to iqn.1993-08.org.debian:01:3f5523242179
    [33206.980184] INFO: NMI handler (kgdb_nmi_handler) took too long to run: 2100.772 msecs
    [33209.078643] ------------[ cut here ]------------
    [33209.078646] kernel BUG at drivers/target/iscsi/iscsi_target.c:4346!
    
    Normally when explicit logout attempt fails, the tx thread context
    exits and iscsit_close_connection() from rx thread context does the
    extra cleanup once it detects conn->conn_logout_remove has not been
    cleared by the logout type specific post handlers.
    
    To address this special case, if the logout post handler in tx thread
    context detects conn->tx_thread_active has already been cleared, simply
    return and exit in order for existing iscsit_close_connection()
    logic from rx thread context do failed logout cleanup.
    
    Reported-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Tested-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Tested-by: Gary Guo <ghg@datera.io>
    Tested-by: Chu Yuan Lin <cyl@datera.io>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 852a804236ee6d04ec45e639d047b7c88e5e96d8
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Fri Jun 2 20:00:17 2017 -0700

    target: Fix kref->refcount underflow in transport_cmd_finish_abort
    
    commit 73d4e580ccc5c3e05cea002f18111f66c9c07034 upstream.
    
    This patch fixes a se_cmd->cmd_kref underflow during CMD_T_ABORTED
    when a fabric driver drops it's second reference from below the
    target_core_tmr.c based callers of transport_cmd_finish_abort().
    
    Recently with the conversion of kref to refcount_t, this bug was
    manifesting itself as:
    
    [705519.601034] refcount_t: underflow; use-after-free.
    [705519.604034] INFO: NMI handler (kgdb_nmi_handler) took too long to run: 20116.512 msecs
    [705539.719111] ------------[ cut here ]------------
    [705539.719117] WARNING: CPU: 3 PID: 26510 at lib/refcount.c:184 refcount_sub_and_test+0x33/0x51
    
    Since the original kref atomic_t based kref_put() didn't check for
    underflow and only invoked the final callback when zero was reached,
    this bug did not manifest in practice since all se_cmd memory is
    using preallocated tags.
    
    To address this, go ahead and propigate the existing return from
    transport_put_cmd() up via transport_cmd_finish_abort(), and
    change transport_cmd_finish_abort() + core_tmr_handle_tas_abort()
    callers to only do their local target_put_sess_cmd() if necessary.
    
    Reported-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Tested-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Himanshu Madhani <himanshu.madhani@qlogic.com>
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Tested-by: Gary Guo <ghg@datera.io>
    Tested-by: Chu Yuan Lin <cyl@datera.io>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 830146b6390a8f2cedbc7dc5e78331987c0418fa
Author: Will Deacon <will@kernel.org>
Date:   Thu Jun 8 16:44:22 2017 -0700

    arm64/vdso: Fix nsec handling for CLOCK_MONOTONIC_RAW
    
    commit dbb236c1ceb697a559e0694ac4c9e7b9131d0b16 upstream.
    
    Recently vDSO support for CLOCK_MONOTONIC_RAW was added in
    49eea433b326 ("arm64: Add support for CLOCK_MONOTONIC_RAW in
    clock_gettime() vDSO"). Noticing that the core timekeeping code
    never set tkr_raw.xtime_nsec, the vDSO implementation didn't
    bother exposing it via the data page and instead took the
    unshifted tk->raw_time.tv_nsec value which was then immediately
    shifted left in the vDSO code.
    
    Unfortunately, by accellerating the MONOTONIC_RAW clockid, it
    uncovered potential 1ns time inconsistencies caused by the
    timekeeping core not handing sub-ns resolution.
    
    Now that the core code has been fixed and is actually setting
    tkr_raw.xtime_nsec, we need to take that into account in the
    vDSO by adding it to the shifted raw_time value, in order to
    fix the user-visible inconsistency. Rather than do that at each
    use (and expand the data page in the process), instead perform
    the shift/addition operation when populating the data page and
    remove the shift from the vDSO code entirely.
    
    [jstultz: minor whitespace tweak, tried to improve commit
     message to make it more clear this fixes a regression]
    Reported-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Daniel Mentz <danielmentz@google.com>
    Acked-by: Kevin Brodsky <kevin.brodsky@arm.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-4-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 102d12f1567fa3d637bbb2885691fa4aca367f33
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:21 2017 -0700

    time: Fix CLOCK_MONOTONIC_RAW sub-nanosecond accounting
    
    commit 3d88d56c5873f6eebe23e05c3da701960146b801 upstream.
    
    Due to how the MONOTONIC_RAW accumulation logic was handled,
    there is the potential for a 1ns discontinuity when we do
    accumulations. This small discontinuity has for the most part
    gone un-noticed, but since ARM64 enabled CLOCK_MONOTONIC_RAW
    in their vDSO clock_gettime implementation, we've seen failures
    with the inconsistency-check test in kselftest.
    
    This patch addresses the issue by using the same sub-ns
    accumulation handling that CLOCK_MONOTONIC uses, which avoids
    the issue for in-kernel users.
    
    Since the ARM64 vDSO implementation has its own clock_gettime
    calculation logic, this patch reduces the frequency of errors,
    but failures are still seen. The ARM64 vDSO will need to be
    updated to include the sub-nanosecond xtime_nsec values in its
    calculation for this issue to be completely fixed.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Daniel Mentz <danielmentz@google.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Kevin Brodsky <kevin.brodsky@arm.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-3-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa79bdd4c3e513d68bd13b40e7dc81b32376dc22
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:20 2017 -0700

    time: Fix clock->read(clock) race around clocksource changes
    
    commit ceea5e3771ed2378668455fa21861bead7504df5 upstream.
    
    In tests, which excercise switching of clocksources, a NULL
    pointer dereference can be observed on AMR64 platforms in the
    clocksource read() function:
    
    u64 clocksource_mmio_readl_down(struct clocksource *c)
    {
            return ~(u64)readl_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
    }
    
    This is called from the core timekeeping code via:
    
            cycle_now = tkr->read(tkr->clock);
    
    tkr->read is the cached tkr->clock->read() function pointer.
    When the clocksource is changed then tkr->clock and tkr->read
    are updated sequentially. The code above results in a sequential
    load operation of tkr->read and tkr->clock as well.
    
    If the store to tkr->clock hits between the loads of tkr->read
    and tkr->clock, then the old read() function is called with the
    new clock pointer. As a consequence the read() function
    dereferences a different data structure and the resulting 'reg'
    pointer can point anywhere including NULL.
    
    This problem was introduced when the timekeeping code was
    switched over to use struct tk_read_base. Before that, it was
    theoretically possible as well when the compiler decided to
    reload clock in the code sequence:
    
         now = tk->clock->read(tk->clock);
    
    Add a helper function which avoids the issue by reading
    tk_read_base->clock once into a local variable clk and then issue
    the read function via clk->read(clk). This guarantees that the
    read() function always gets the proper clocksource pointer handed
    in.
    
    Since there is now no use for the tkr.read pointer, this patch
    also removes it, and to address stopping the fast timekeeper
    during suspend/resume, it introduces a dummy clocksource to use
    rather then just a dummy read function.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Daniel Mentz <danielmentz@google.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f3ae212fc0481c45db124bc858a129f897fd18b
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Mon Jun 12 12:47:34 2017 +0100

    brcmfmac: unbind all devices upon failure in firmware callback
    
    commit 7a51461fc2da82a6c565a3ee65c41c197f28225d upstream.
    
    When request firmware fails, brcmf_ops_sdio_remove is being called and
    brcmf_bus freed. In such circumstancies if you do a suspend/resume cycle
    the kernel hangs on resume due a NULL pointer dereference in resume
    function. So in brcmf_sdio_firmware_callback() we need to unbind the
    driver from both sdio_func devices when firmware load failure is indicated.
    
    Tested-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cb9b88c7ddcfe80d5dc2f9015e7dfd34bf53ecb
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Mon Jun 12 12:47:33 2017 +0100

    brcmfmac: use firmware callback upon failure to load
    
    commit 03fb0e8393fae8ebb6710a99387853ed0becbc8e upstream.
    
    When firmware loading failed the code used to unbind the device provided
    by the calling code. However, for the sdio driver two devices are bound
    and both need to be released upon failure. The callback has been extended
    with parameter to pass error code so add that in this commit upon firmware
    loading failure.
    
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e5c71934d0907f5fd59763cbf9a3e63fa205e3b
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Mon Jun 12 12:47:32 2017 +0100

    brcmfmac: add parameter to pass error code in firmware callback
    
    commit 6d0507a777fbc533f7f1bf5664a81982dd50dece upstream.
    
    Extend the parameters in the firmware callback so it can be called
    upon success and failure. This allows the caller to properly clear
    all resources in the failure path. Right now the error code is
    always zero, ie. success.
    
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6bfede20b73939dd8862cf32b3d3619845295fb
Author: Daniel Drake <drake@endlessm.com>
Date:   Mon Jun 19 19:48:52 2017 -0700

    Input: i8042 - add Fujitsu Lifebook AH544 to notimeout list
    
    commit 817ae460c784f32cd45e60b2b1b21378c3c6a847 upstream.
    
    Without this quirk, the touchpad is not responsive on this product, with
    the following message repeated in the logs:
    
     psmouse serio1: bad data from KBC - timeout
    
    Add it to the notimeout list alongside other similar Fujitsu laptops.
    
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc1c180ba6e8b000784a4b0e71e4d8db8ba38b3f
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Wed Jun 14 00:12:00 2017 +0530

    powerpc/64s: Handle data breakpoints in Radix mode
    
    commit d89ba5353f301971dd7d2f9fdf25c4432728f38e upstream.
    
    On Power9, trying to use data breakpoints throws the splat shown
    below. This is because the check for a data breakpoint in DSISR is in
    do_hash_page(), which is not called when in Radix mode.
    
      Unable to handle kernel paging request for data at address 0xc000000000e19218
      Faulting instruction address: 0xc0000000001155e8
      cpu 0x0: Vector: 300 (Data Access) at [c0000000ef1e7b20]
      pc: c0000000001155e8: find_pid_ns+0x48/0xe0
      lr: c000000000116ac4: find_task_by_vpid+0x44/0x90
      sp: c0000000ef1e7da0
      msr: 9000000000009033
      dar: c000000000e19218
      dsisr: 400000
    
    Move the check to handle_page_fault() so as to catch data breakpoints
    in both Hash and Radix MMU modes.
    
    We have to change the check in do_hash_page() against 0xa410 to use
    0xa450, so as to include the value of (DSISR_DABRMATCH << 16).
    
    There are two sites that call handle_page_fault() when in Radix, both
    already pass DSISR in r4.
    
    Fixes: caca285e5ab4 ("powerpc/mm/radix: Use STD_MMU_64 to properly isolate hash related code")
    Reported-by: Shriya R. Kulkarni <shriykul@in.ibm.com>
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    [mpe: Fix the fall-through case on hash, we need to reload DSISR]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a6c505366cc259f0bf39a7fc703501a55f48d33
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Jun 1 16:18:15 2017 +0530

    powerpc/kprobes: Pause function_graph tracing during jprobes handling
    
    commit a9f8553e935f26cb5447f67e280946b0923cd2dc upstream.
    
    This fixes a crash when function_graph and jprobes are used together.
    This is essentially commit 237d28db036e ("ftrace/jprobes/x86: Fix
    conflict between jprobes and function graph tracing"), but for powerpc.
    
    Jprobes breaks function_graph tracing since the jprobe hook needs to use
    jprobe_return(), which never returns back to the hook, but instead to
    the original jprobe'd function. The solution is to momentarily pause
    function_graph tracing before invoking the jprobe hook and re-enable it
    when returning back to the original jprobe'd function.
    
    Fixes: 6794c78243bf ("powerpc64: port of the function graph tracer")
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6281e0df1887c1032f7f789bba0e1bd2ab7ad45
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue Jun 13 04:31:16 2017 -0500

    signal: Only reschedule timers on signals timers have sent
    
    commit 57db7e4a2d92c2d3dfbca4ef8057849b2682436b upstream.
    
    Thomas Gleixner  wrote:
    > The CRIU support added a 'feature' which allows a user space task to send
    > arbitrary (kernel) signals to itself. The changelog says:
    >
    >   The kernel prevents sending of siginfo with positive si_code, because
    >   these codes are reserved for kernel.  I think we can allow a task to
    >   send such a siginfo to itself.  This operation should not be dangerous.
    >
    > Quite contrary to that claim, it turns out that it is outright dangerous
    > for signals with info->si_code == SI_TIMER. The following code sequence in
    > a user space task allows to crash the kernel:
    >
    >    id = timer_create(CLOCK_XXX, ..... signo = SIGX);
    >    timer_set(id, ....);
    >    info->si_signo = SIGX;
    >    info->si_code = SI_TIMER:
    >    info->_sifields._timer._tid = id;
    >    info->_sifields._timer._sys_private = 2;
    >    rt_[tg]sigqueueinfo(..., SIGX, info);
    >    sigemptyset(&sigset);
    >    sigaddset(&sigset, SIGX);
    >    rt_sigtimedwait(sigset, info);
    >
    > For timers based on CLOCK_PROCESS_CPUTIME_ID, CLOCK_THREAD_CPUTIME_ID this
    > results in a kernel crash because sigwait() dequeues the signal and the
    > dequeue code observes:
    >
    >   info->si_code == SI_TIMER && info->_sifields._timer._sys_private != 0
    >
    > which triggers the following callchain:
    >
    >  do_schedule_next_timer() -> posix_cpu_timer_schedule() -> arm_timer()
    >
    > arm_timer() executes a list_add() on the timer, which is already armed via
    > the timer_set() syscall. That's a double list add which corrupts the posix
    > cpu timer list. As a consequence the kernel crashes on the next operation
    > touching the posix cpu timer list.
    >
    > Posix clocks which are internally implemented based on hrtimers are not
    > affected by this because hrtimer_start() can handle already armed timers
    > nicely, but it's a reliable way to trigger the WARN_ON() in
    > hrtimer_forward(), which complains about calling that function on an
    > already armed timer.
    
    This problem has existed since the posix timer code was merged into
    2.5.63. A few releases earlier in 2.5.60 ptrace gained the ability to
    inject not just a signal (which linux has supported since 1.0) but the
    full siginfo of a signal.
    
    The core problem is that the code will reschedule in response to
    signals getting dequeued not just for signals the timers sent but
    for other signals that happen to a si_code of SI_TIMER.
    
    Avoid this confusion by testing to see if the queued signal was
    preallocated as all timer signals are preallocated, and so far
    only the timer code preallocates signals.
    
    Move the check for if a timer needs to be rescheduled up into
    collect_signal where the preallocation check must be performed,
    and pass the result back to dequeue_signal where the code reschedules
    timers.   This makes it clear why the code cares about preallocated
    timers.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    History Tree: https://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
    Reference: 66dd34ad31e5 ("signal: allow to send any siginfo to itself")
    Reference: 1669ce53e2ff ("Add PTRACE_GETSIGINFO and PTRACE_SETSIGINFO")
    Fixes: db8b50ba75f2 ("[PATCH] POSIX clocks & timers")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a182635e01636c8c021b53ce103efa95125d460
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Thu Jun 15 00:45:26 2017 +0200

    random: silence compiler warnings and fix race
    
    commit 4a072c71f49b0a0e495ea13423bdb850da73c58c upstream.
    
    Odd versions of gcc for the sh4 architecture will actually warn about
    flags being used while uninitialized, so we set them to zero. Non crazy
    gccs will optimize that out again, so it doesn't make a difference.
    
    Next, over aggressive gccs could inline the expression that defines
    use_lock, which could then introduce a race resulting in a lock
    imbalance. By using READ_ONCE, we prevent that fate. Finally, we make
    that assignment const, so that gcc can still optimize a nice amount.
    
    Finally, we fix a potential deadlock between primary_crng.lock and
    batched_entropy_reset_lock, where they could be called in opposite
    order. Moving the call to invalidate_batched_entropy to outside the lock
    rectifies this issue.
    
    Fixes: b169c13de473a85b3c859bb36216a4cb5f00a54a
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1429fdb15fd9dc9ecb8eb7616b1f8c0a65a42762
Author: Sebastian Parschauer <sparschauer@suse.de>
Date:   Tue Jun 6 13:53:13 2017 +0200

    HID: Add quirk for Dell PIXART OEM mouse
    
    commit 3db28271f0feae129262d30e41384a7c4c767987 upstream.
    
    This mouse is also known under other IDs. It needs the quirk
    ALWAYS_POLL or will disconnect in runlevel 1 or 3.
    
    Signed-off-by: Sebastian Parschauer <sparschauer@suse.de>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abef7afb35a99572d975f3e38bdc86e6f2a23cd6
Author: Raju Rangoju <rajur@chelsio.com>
Date:   Mon Jun 19 19:46:00 2017 +0530

    cxgb4: notify uP to route ctrlq compl to rdma rspq
    
    commit dec6b33163d24e2c19ba521c89fffbaab53ae986 upstream.
    
    During the module initialisation there is a possible race
    (basically race between uld and lld) where neither the uld
    nor lld notifies the uP about where to route the ctrl queue
    completions. LLD skips notifying uP as the rdma queues were
    not created by then (will leave it to ULD to notify the uP).
    As the ULD comes up, it also skips notifying the uP as the
    flag FULL_INIT_DONE is not set yet (ULD assumes that the
    interface is not up yet).
    
    Consequently, this race between uld and lld leaves uP
    unnotified about where to send the ctrl queue completions
    to, leading to iwarp RI_RES WR failure.
    
    Here is the race:
    
    CPU 0                                   CPU1
    
    - allocates nic rx queus
    - t4_sge_alloc_ctrl_txq()
    (if rdma rsp queues exists,
    tell uP to route ctrl queue
    compl to rdma rspq)
                                    - acquires the mutex_lock
                                    - allocates rdma response queues
                                    - if FULL_INIT_DONE set,
                                      tell uP to route ctrl queue compl
                                      to rdma rspq
                                    - relinquishes mutex_lock
    - acquires the mutex_lock
    - enable_rx()
    - set FULL_INIT_DONE
    - relinquishes mutex_lock
    
    This patch fixes the above issue.
    
    Fixes: e7519f9926f1('cxgb4: avoid enabling napi twice to the same queue')
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Acked-by: Steve Wise <swise@opengridcomputing.com>
    Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4eec15d336aab2a7133859c2e9270809c5a66b08
Author: Christophe Jaillet <christophe.jaillet@wanadoo.fr>
Date:   Sun Jun 11 09:12:47 2017 +0200

    CIFS: Fix some return values in case of error in 'crypt_message'
    
    commit 517a6e43c4872c89794af5b377fa085e47345952 upstream.
    
    'rc' is known to be 0 at this point. So if 'init_sg' or 'kzalloc' fails, we
    should return -ENOMEM instead.
    
    Also remove a useless 'rc' in a debug message as it is meaningless here.
    
    Fixes: 026e93dc0a3ee ("CIFS: Encrypt SMB3 requests before sending")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <smfrench@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcaa5a53ccfd82c1a0c152ac771381a83e7a65e0
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Tue Jun 6 16:58:58 2017 -0700

    CIFS: Improve readdir verbosity
    
    commit dcd87838c06f05ab7650b249ebf0d5b57ae63e1e upstream.
    
    Downgrade the loglevel for SMB2 to prevent filling the log
    with messages if e.g. readdir was interrupted. Also make SMB2
    and SMB1 codepaths do the same logging during readdir.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <smfrench@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ff8eda23a8a2d59ed19bffa9642726f1919669a
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Fri Jun 16 11:53:19 2017 +1000

    KVM: PPC: Book3S HV: Save/restore host values of debug registers
    
    commit 7ceaa6dcd8c6f59588428cec37f3c8093dd1011f upstream.
    
    At present, HV KVM on POWER8 and POWER9 machines loses any instruction
    or data breakpoint set in the host whenever a guest is run.
    Instruction breakpoints are currently only used by xmon, but ptrace
    and the perf_event subsystem can set data breakpoints as well as xmon.
    
    To fix this, we save the host values of the debug registers (CIABR,
    DAWR and DAWRX) before entering the guest and restore them on exit.
    To provide space to save them in the stack frame, we expand the stack
    frame allocated by kvmppc_hv_entry() from 112 to 144 bytes.
    
    Fixes: b005255e12a3 ("KVM: PPC: Book3S HV: Context-switch new POWER8 SPRs", 2014-01-08)
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 324df574b964ca030e3fe4469bc9a38b6bc1e9b1
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Thu Jun 15 15:43:17 2017 +1000

    KVM: PPC: Book3S HV: Restore critical SPRs to host values on guest exit
    
    commit 4c3bb4ccd074e1a0552078c0bf94c662367a1658 upstream.
    
    This restores several special-purpose registers (SPRs) to sane values
    on guest exit that were missed before.
    
    TAR and VRSAVE are readable and writable by userspace, and we need to
    save and restore them to prevent the guest from potentially affecting
    userspace execution (not that TAR or VRSAVE are used by any known
    program that run uses the KVM_RUN ioctl).  We save/restore these
    in kvmppc_vcpu_run_hv() rather than on every guest entry/exit.
    
    FSCR affects userspace execution in that it can prohibit access to
    certain facilities by userspace.  We restore it to the normal value
    for the task on exit from the KVM_RUN ioctl.
    
    IAMR is normally 0, and is restored to 0 on guest exit.  However,
    with a radix host on POWER9, it is set to a value that prevents the
    kernel from executing user-accessible memory.  On POWER9, we save
    IAMR on guest entry and restore it on guest exit to the saved value
    rather than 0.  On POWER8 we continue to set it to 0 on guest exit.
    
    PSPB is normally 0.  We restore it to 0 on guest exit to prevent
    userspace taking advantage of the guest having set it non-zero
    (which would allow userspace to set its SMT priority to high).
    
    UAMOR is normally 0.  We restore it to 0 on guest exit to prevent
    the AMR from being used as a covert channel between userspace
    processes, since the AMR is not context-switched at present.
    
    Fixes: b005255e12a3 ("KVM: PPC: Book3S HV: Context-switch new POWER8 SPRs", 2014-01-08)
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ae3f3581ff3a021bd40bd1e2cda704d737b8b3d
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Jun 6 16:47:22 2017 +1000

    KVM: PPC: Book3S HV: Context-switch EBB registers properly
    
    commit ca8efa1df1d15a1795a2da57f9f6aada6ed6b946 upstream.
    
    This adds code to save the values of three SPRs (special-purpose
    registers) used by userspace to control event-based branches (EBBs),
    which are essentially interrupts that get delivered directly to
    userspace.  These registers are loaded up with guest values when
    entering the guest, and their values are saved when exiting the
    guest, but we were not saving the host values and restoring them
    before going back to userspace.
    
    On POWER8 this would only affect userspace programs which explicitly
    request the use of EBBs and also use the KVM_RUN ioctl, since the
    only source of EBBs on POWER8 is the PMU, and there is an explicit
    enable bit in the PMU registers (and those PMU registers do get
    properly context-switched between host and guest).  On POWER9 there
    is provision for externally-generated EBBs, and these are not subject
    to the control in the PMU registers.
    
    Since these registers only affect userspace, we can save them when
    we first come in from userspace and restore them before returning to
    userspace, rather than saving/restoring the host values on every
    guest entry/exit.  Similarly, we don't need to worry about their
    values on offline secondary threads since they execute in the context
    of the idle task, which never executes in userspace.
    
    Fixes: b005255e12a3 ("KVM: PPC: Book3S HV: Context-switch new POWER8 SPRs", 2014-01-08)
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d29e276e1b9ec0d67f7788f356a9f81c4443ad
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Jun 6 14:35:30 2017 +1000

    KVM: PPC: Book3S HV: Ignore timebase offset on POWER9 DD1
    
    commit 3d3efb68c19e539f0535c93a5258c1299270215f upstream.
    
    POWER9 DD1 has an erratum where writing to the TBU40 register, which
    is used to apply an offset to the timebase, can cause the timebase to
    lose counts.  This results in the timebase on some CPUs getting out of
    sync with other CPUs, which then results in misbehaviour of the
    timekeeping code.
    
    To work around the problem, we make KVM ignore the timebase offset for
    all guests on POWER9 DD1 machines.  This means that live migration
    cannot be supported on POWER9 DD1 machines.
    
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d9c6828d004dec97fe7b757e13d309e6d566a90
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Thu Jun 15 16:10:27 2017 +1000

    KVM: PPC: Book3S HV: Preserve userspace HTM state properly
    
    commit 46a704f8409f79fd66567ad3f8a7304830a84293 upstream.
    
    If userspace attempts to call the KVM_RUN ioctl when it has hardware
    transactional memory (HTM) enabled, the values that it has put in the
    HTM-related SPRs TFHAR, TFIAR and TEXASR will get overwritten by
    guest values.  To fix this, we detect this condition and save those
    SPR values in the thread struct, and disable HTM for the task.  If
    userspace goes to access those SPRs or the HTM facility in future,
    a TM-unavailable interrupt will occur and the handler will reload
    those SPRs and re-enable HTM.
    
    If userspace has started a transaction and suspended it, we would
    currently lose the transactional state in the guest entry path and
    would almost certainly get a "TM Bad Thing" interrupt, which would
    cause the host to crash.  To avoid this, we detect this case and
    return from the KVM_RUN ioctl with an EINVAL error, with the KVM
    exit reason set to KVM_EXIT_FAIL_ENTRY.
    
    Fixes: b005255e12a3 ("KVM: PPC: Book3S HV: Context-switch new POWER8 SPRs", 2014-01-08)
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e0d799688df53ceaecb1f09716466d0368b4a2a
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Mon May 22 16:25:14 2017 +1000

    KVM: PPC: Book3S HV: Cope with host using large decrementer mode
    
    commit 2f2724630f7a8d582470f03ee56b96746767d270 upstream.
    
    POWER9 introduces a new mode for the decrementer register, called
    large decrementer mode, in which the decrementer counter is 56 bits
    wide rather than 32, and reads are sign-extended rather than
    zero-extended.  For the decrementer, this new mode is optional and
    controlled by a bit in the LPCR.  The hypervisor decrementer (HDEC)
    is 56 bits wide on POWER9 and has no mode control.
    
    Since KVM code reads and writes the decrementer and hypervisor
    decrementer registers in a few places, it needs to be aware of the
    need to treat the decrementer value as a 64-bit quantity, and only do
    a 32-bit sign extension when large decrementer mode is not in effect.
    Similarly, the HDEC should always be treated as a 64-bit quantity on
    POWER9.  We define a new EXTEND_HDEC macro to encapsulate the feature
    test for POWER9 and the sign extension.
    
    To enable the sign extension to be removed in large decrementer mode,
    we test the LPCR_LD bit in the host LPCR image stored in the struct
    kvm for the guest.  If is set then large decrementer mode is enabled
    and the sign extension should be skipped.
    
    This is partly based on an earlier patch by Oliver O'Halloran.
    
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d34bddddcdbe45e04dc22b4bdad32bf7f116d02
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Mon Jun 19 08:02:28 2017 +0200

    KVM: s390: gaccess: fix real-space designation asce handling for gmap shadows
    
    commit addb63c18a0d52a9ce2611d039f981f7b6148d2b upstream.
    
    For real-space designation asces the asce origin part is only a token.
    The asce token origin must not be used to generate an effective
    address for storage references. This however is erroneously done
    within kvm_s390_shadow_tables().
    
    Furthermore within the same function the wrong parts of virtual
    addresses are used to generate a corresponding real address
    (e.g. the region second index is used as region first index).
    
    Both of the above can result in incorrect address translations. Only
    for real space designations with a token origin of zero and addresses
    below one megabyte the translation was correct.
    
    Furthermore replace a "!asce.r" statement with a "!*fake" statement to
    make it more obvious that a specific condition has nothing to do with
    the architecture, but with the fake handling of real space designations.
    
    Fixes: 3218f7094b6b ("s390/mm: support real-space for gmap shadows")
    Cc: David Hildenbrand <david@redhat.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87ee4cdd8cd6dfbb14039739ddeaefff328f824e
Author: James Cowgill <James.Cowgill@imgtec.com>
Date:   Tue Jun 20 10:57:51 2017 +0100

    KVM: MIPS: Fix maybe-uninitialized build failure
    
    commit e27a9eca5d4a392b96ce5d5238c8d637bcb0a52c upstream.
    
    This commit fixes a "maybe-uninitialized" build failure in
    arch/mips/kvm/tlb.c when KVM, DYNAMIC_DEBUG and JUMP_LABEL are all
    enabled. The failure is:
    
    In file included from ./include/linux/printk.h:329:0,
                     from ./include/linux/kernel.h:13,
                     from ./include/asm-generic/bug.h:15,
                     from ./arch/mips/include/asm/bug.h:41,
                     from ./include/linux/bug.h:4,
                     from ./include/linux/thread_info.h:11,
                     from ./include/asm-generic/current.h:4,
                     from ./arch/mips/include/generated/asm/current.h:1,
                     from ./include/linux/sched.h:11,
                     from arch/mips/kvm/tlb.c:13:
    arch/mips/kvm/tlb.c: In function ‘kvm_mips_host_tlb_inv’:
    ./include/linux/dynamic_debug.h:126:3: error: ‘idx_kernel’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
       __dynamic_pr_debug(&descriptor, pr_fmt(fmt), \
       ^~~~~~~~~~~~~~~~~~
    arch/mips/kvm/tlb.c:169:16: note: ‘idx_kernel’ was declared here
      int idx_user, idx_kernel;
                    ^~~~~~~~~~
    
    There is a similar error relating to "idx_user". Both errors were
    observed with GCC 6.
    
    As far as I can tell, it is impossible for either idx_user or idx_kernel
    to be uninitialized when they are later read in the calls to kvm_debug,
    but to satisfy the compiler, add zero initializers to both variables.
    
    Signed-off-by: James Cowgill <James.Cowgill@imgtec.com>
    Fixes: 57e3869cfaae ("KVM: MIPS/TLB: Generalise host TLB invalidate to kernel ASID")
    Acked-by: James Hogan <james.hogan@imgtec.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3af2b32a50c23af81403e6fed880f18e9ae0cb30
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 7 15:13:14 2017 +0200

    KVM: x86: fix singlestepping over syscall
    
    commit c8401dda2f0a00cd25c0af6a95ed50e478d25de4 upstream.
    
    TF is handled a bit differently for syscall and sysret, compared
    to the other instructions: TF is checked after the instruction completes,
    so that the OS can disable #DB at a syscall by adding TF to FMASK.
    When the sysret is executed the #DB is taken "as if" the syscall insn
    just completed.
    
    KVM emulates syscall so that it can trap 32-bit syscall on Intel processors.
    Fix the behavior, otherwise you could get #DB on a user stack which is not
    nice.  This does not affect Linux guests, as they use an IST or task gate
    for #DB.
    
    This fixes CVE-2017-7518.
    
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75d735389044a333d6ecd44e03fb25f8b413bf92
Author: Björn Töpel <bjorn.topel@intel.com>
Date:   Wed Jun 21 18:41:34 2017 +0200

    perf probe: Fix probe definition for inlined functions
    
    commit 7598f8bc1383ffd77686cb4e92e749bef3c75937 upstream.
    
    In commit 613f050d68a8 ("perf probe: Fix to probe on gcc generated
    functions in modules"), the offset from symbol is, incorrectly, added
    to the trace point address. This leads to incorrect probe trace points
    for inlined functions and when using relative line number on symbols.
    
    Prior this patch:
      $ perf probe -m nf_nat -D in_range
      p:probe/in_range nf_nat:in_range.isra.9+0
      $ perf probe -m i40e -D i40e_clean_rx_irq
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+2212
      $ perf probe -m i40e -D i40e_clean_rx_irq:16
      p:probe/i40e_clean_rx_irq i40e:i40e_lan_xmit_frame+626
    
    After:
      $ perf probe -m nf_nat -D in_range
      p:probe/in_range nf_nat:in_range.isra.9+0
      $ perf probe -m i40e -D i40e_clean_rx_irq
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+1106
      $ perf probe -m i40e -D i40e_clean_rx_irq:16
      p:probe/i40e_clean_rx_irq i40e:i40e_napi_poll+2665
    
    Committer testing:
    
    Using 'pfunct', a tool found in the 'dwarves' package [1], one can ask what are
    the functions that while not being explicitely marked as inline, were inlined
    by the compiler:
    
      # pfunct --cc_inlined /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko | head
      __ew32
      e1000_regdump
      e1000e_dump_ps_pages
      e1000_desc_unused
      e1000e_systim_to_hwtstamp
      e1000e_rx_hwtstamp
      e1000e_update_rdt_wa
      e1000e_update_tdt_wa
      e1000_put_txbuf
      e1000_consume_page
    
    Then ask 'perf probe' to produce the kprobe_tracer probe definitions for two of
    them:
    
      # perf probe -m e1000e -D e1000e_rx_hwtstamp
      p:probe/e1000e_rx_hwtstamp e1000e:e1000_receive_skb+74
    
      # perf probe -m e1000e -D e1000_consume_page
      p:probe/e1000_consume_page e1000e:e1000_clean_jumbo_rx_irq+876
      p:probe/e1000_consume_page_1 e1000e:e1000_clean_jumbo_rx_irq+1506
      p:probe/e1000_consume_page_2 e1000e:e1000_clean_rx_irq_ps+1074
    
    Now lets concentrate on the 'e1000_consume_page' one, that was inlined twice in
    e1000_clean_jumbo_rx_irq(), lets see what readelf says about the DWARF tags for
    that function:
    
      $ readelf -wi /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
      <SNIP>
      <1><13e27b>: Abbrev Number: 121 (DW_TAG_subprogram)
        <13e27c>   DW_AT_name        : (indirect string, offset: 0xa8945): e1000_clean_jumbo_rx_irq
        <13e287>   DW_AT_low_pc      : 0x17a30
      <3><13e6ef>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13e6f0>   DW_AT_abstract_origin: <0x13ed2c>
        <13e6f4>   DW_AT_low_pc      : 0x17be6
      <SNIP>
      <1><13ed2c>: Abbrev Number: 142 (DW_TAG_subprogram)
         <13ed2e>   DW_AT_name        : (indirect string, offset: 0xa54c3): e1000_consume_page
    
    So, the first time in e1000_clean_jumbo_rx_irq() where e1000_consume_page() is
    inlined is at PC 0x17be6, which subtracted from e1000_clean_jumbo_rx_irq()'s
    address, gives us the offset we should use in the probe definition:
    
      0x17be6 - 0x17a30 = 438
    
    but above we have 876, which is twice as much.
    
    Lets see the second inline expansion of e1000_consume_page() in
    e1000_clean_jumbo_rx_irq():
    
      <3><13e86e>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13e86f>   DW_AT_abstract_origin: <0x13ed2c>
        <13e873>   DW_AT_low_pc      : 0x17d21
    
      0x17d21 - 0x17a30 = 753
    
    So we where adding it at twice the offset from the containing function as we
    should.
    
    And then after this patch:
    
      # perf probe -m e1000e -D e1000e_rx_hwtstamp
      p:probe/e1000e_rx_hwtstamp e1000e:e1000_receive_skb+37
    
      # perf probe -m e1000e -D e1000_consume_page
      p:probe/e1000_consume_page e1000e:e1000_clean_jumbo_rx_irq+438
      p:probe/e1000_consume_page_1 e1000e:e1000_clean_jumbo_rx_irq+753
      p:probe/e1000_consume_page_2 e1000e:e1000_clean_jumbo_rx_irq+1353
      #
    
    Which matches the two first expansions and shows that because we were
    doubling the offset it would spill over the next function:
    
      readelf -sw /lib/modules/4.12.0-rc4+/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
       673: 0000000000017a30  1626 FUNC    LOCAL  DEFAULT    2 e1000_clean_jumbo_rx_irq
       674: 0000000000018090  2013 FUNC    LOCAL  DEFAULT    2 e1000_clean_rx_irq_ps
    
    This is the 3rd inline expansion of e1000_consume_page() in
    e1000_clean_jumbo_rx_irq():
    
       <3><13ec77>: Abbrev Number: 119 (DW_TAG_inlined_subroutine)
        <13ec78>   DW_AT_abstract_origin: <0x13ed2c>
        <13ec7c>   DW_AT_low_pc      : 0x17f79
    
      0x17f79 - 0x17a30 = 1353
    
     So:
    
       0x17a30 + 2 * 1353 = 0x184c2
    
      And:
    
       0x184c2 - 0x18090 = 1074
    
    Which explains the bogus third expansion for e1000_consume_page() to end up at:
    
       p:probe/e1000_consume_page_2 e1000e:e1000_clean_rx_irq_ps+1074
    
    All fixed now :-)
    
    [1] https://git.kernel.org/pub/scm/devel/pahole/pahole.git/
    
    Signed-off-by: Björn Töpel <bjorn.topel@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Fixes: 613f050d68a8 ("perf probe: Fix to probe on gcc generated functions in modules")
    Link: http://lkml.kernel.org/r/20170621164134.5701-1-bjorn.topel@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d46eda1978c83f07e64d76e5710d4ec7716ef30b
Author: Kan Liang <Kan.liang@intel.com>
Date:   Mon Jun 19 07:26:09 2017 -0700

    perf/x86/intel: Add 1G DTLB load/store miss support for SKL
    
    commit fb3a5055cd7098f8d1dd0cd38d7172211113255f upstream.
    
    Current DTLB load/store miss events (0x608/0x649) only counts 4K,2M and
    4M page size.
    Need to extend the events to support any page size (4K/2M/4M/1G).
    
    The complete DTLB load/store miss events are:
    
      DTLB_LOAD_MISSES.WALK_COMPLETED               0xe08
      DTLB_STORE_MISSES.WALK_COMPLETED              0xe49
    
    Signed-off-by: Kan Liang <Kan.liang@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: eranian@google.com
    Link: http://lkml.kernel.org/r/20170619142609.11058-1-kan.liang@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a640581c85fac9b11e317d317c3f9b0a911e257
Author: Ilya Matveychikov <matvejchikov@gmail.com>
Date:   Fri Jun 23 15:08:49 2017 -0700

    lib/cmdline.c: fix get_options() overflow while parsing ranges
    
    commit a91e0f680bcd9e10c253ae8b62462a38bd48f09f upstream.
    
    When using get_options() it's possible to specify a range of numbers,
    like 1-100500.  The problem is that it doesn't track array size while
    calling internally to get_range() which iterates over the range and
    fills the memory with numbers.
    
    Link: http://lkml.kernel.org/r/2613C75C-B04D-4BFF-82A6-12F97BA0F620@gmail.com
    Signed-off-by: Ilya V. Matveychikov <matvejchikov@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f83a744143d999dc89bd30277a4bc673a7dbb0d
Author: Jan Kara <jack@suse.cz>
Date:   Fri Jun 23 15:08:46 2017 -0700

    fs/dax.c: fix inefficiency in dax_writeback_mapping_range()
    
    commit 1eb643d02b21412e603b42cdd96010a2ac31c05f upstream.
    
    dax_writeback_mapping_range() fails to update iteration index when
    searching radix tree for entries needing cache flushing.  Thus each
    pagevec worth of entries is searched starting from the start which is
    inefficient and prone to livelocks.  Update index properly.
    
    Link: http://lkml.kernel.org/r/20170619124531.21491-1-jack@suse.cz
    Fixes: 9973c98ecfda3 ("dax: add support for fsync/sync")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ross Zwisler <ross.zwisler@linux.intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 909c25623aca614a9074ddc7bd8433447f39bcf6
Author: NeilBrown <neilb@suse.com>
Date:   Fri Jun 23 15:08:43 2017 -0700

    autofs: sanity check status reported with AUTOFS_DEV_IOCTL_FAIL
    
    commit 9fa4eb8e490a28de40964b1b0e583d8db4c7e57c upstream.
    
    If a positive status is passed with the AUTOFS_DEV_IOCTL_FAIL ioctl,
    autofs4_d_automount() will return
    
       ERR_PTR(status)
    
    with that status to follow_automount(), which will then dereference an
    invalid pointer.
    
    So treat a positive status the same as zero, and map to ENOENT.
    
    See comment in systemd src/core/automount.c::automount_send_ready().
    
    Link: http://lkml.kernel.org/r/871sqwczx5.fsf@notabene.neil.brown.name
    Signed-off-by: NeilBrown <neilb@suse.com>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2063a20547005c2e345591642f5483da7ad9a2d
Author: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
Date:   Thu Jun 15 19:16:48 2017 +0530

    powerpc/perf: Fix oops when kthread execs user process
    
    commit bf05fc25f268cd62f147f368fe65ad3e5b04fe9f upstream.
    
    When a kthread calls call_usermodehelper() the steps are:
      1. allocate current->mm
      2. load_elf_binary()
      3. populate current->thread.regs
    
    While doing this, interrupts are not disabled. If there is a perf
    interrupt in the middle of this process (i.e. step 1 has completed
    but not yet reached to step 3) and if perf tries to read userspace
    regs, kernel oops with following log:
    
      Unable to handle kernel paging request for data at address 0x00000000
      Faulting instruction address: 0xc0000000000da0fc
      ...
      Call Trace:
      perf_output_sample_regs+0x6c/0xd0
      perf_output_sample+0x4e4/0x830
      perf_event_output_forward+0x64/0x90
      __perf_event_overflow+0x8c/0x1e0
      record_and_restart+0x220/0x5c0
      perf_event_interrupt+0x2d8/0x4d0
      performance_monitor_exception+0x54/0x70
      performance_monitor_common+0x158/0x160
      --- interrupt: f01 at avtab_search_node+0x150/0x1a0
          LR = avtab_search_node+0x100/0x1a0
      ...
      load_elf_binary+0x6e8/0x15a0
      search_binary_handler+0xe8/0x290
      do_execveat_common.isra.14+0x5f4/0x840
      call_usermodehelper_exec_async+0x170/0x210
      ret_from_kernel_thread+0x5c/0x7c
    
    Fix it by setting abi to PERF_SAMPLE_REGS_ABI_NONE when userspace
    pt_regs are not set.
    
    Fixes: ed4a4ef85cf5 ("powerpc/perf: Add support for sampling interrupt register state")
    Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fed07e89078ddfbdddb2c54f340a934e94bee2b2
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Jun 23 15:08:57 2017 -0700

    fs/exec.c: account for argv/envp pointers
    
    commit 98da7d08850fb8bdeb395d6368ed15753304aa0c upstream.
    
    When limiting the argv/envp strings during exec to 1/4 of the stack limit,
    the storage of the pointers to the strings was not included.  This means
    that an exec with huge numbers of tiny strings could eat 1/4 of the stack
    limit in strings and then additional space would be later used by the
    pointers to the strings.
    
    For example, on 32-bit with a 8MB stack rlimit, an exec with 1677721
    single-byte strings would consume less than 2MB of stack, the max (8MB /
    4) amount allowed, but the pointers to the strings would consume the
    remaining additional stack space (1677721 * 4 == 6710884).
    
    The result (1677721 + 6710884 == 8388605) would exhaust stack space
    entirely.  Controlling this stack exhaustion could result in
    pathological behavior in setuid binaries (CVE-2017-1000365).
    
    [akpm@linux-foundation.org: additional commenting from Kees]
    Fixes: b6a2fea39318 ("mm: variable length argument support")
    Link: http://lkml.kernel.org/r/20170622001720.GA32173@beast
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Rik van Riel <riel@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Qualys Security Advisory <qsa@qualys.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8bfdd083e78ac516b6876c6760bfda3c56a4554
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jun 14 07:37:14 2017 +0200

    ALSA: hda - Apply quirks to Broxton-T, too
    
    commit c7ecb9068e6772c43941ce609f08bc53f36e1dce upstream.
    
    Broxton-T was a forgotten child and we didn't apply the quirks for
    Skylake+ properly.  Meanwhile, a quirk for reducing the DMA latency
    seems specific to the early Broxton model, so we leave as is.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14487f9f6e8779e959802a540d4ffd6c85570de2
Author: Megha Dey <megha.dey@intel.com>
Date:   Wed Jun 14 09:51:56 2017 +0530

    ALSA: hda - Add Coffelake PCI ID
    
    commit e79b0006c45c9b0b22f3ea54ff6e256b34c1f208 upstream.
    
    Coffelake is another Intel part, so need to add PCI ID for it.
    
    Signed-off-by: Megha Dey <megha.dey@intel.com>
    Signed-off-by: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
    Acked-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6dc243c285dcf210765a7189194eeabca84b117
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jun 14 16:20:32 2017 +0200

    ALSA: pcm: Don't treat NULL chmap as a fatal error
    
    commit 2deaeaf102d692cb6f764123b1df7aa118a8e97c upstream.
    
    The standard PCM chmap helper callbacks treat the NULL info->chmap as
    a fatal error and spews the kernel warning with stack trace when
    CONFIG_SND_DEBUG is on.  This was OK, originally it was supposed to be
    always static and non-NULL.  But, as the recent addition of Intel LPE
    audio driver shows, the chmap content may vary dynamically, and it can
    be even NULL when disconnected.  The user still sees the kernel
    warning unnecessarily.
    
    For clearing such a confusion, this patch simply removes the
    snd_BUG_ON() in each place, just returns an error without warning.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c06718bcbd1375d25b7d1efe83eeda65ee7a6272
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Jun 11 16:08:21 2017 +0900

    ALSA: firewire-lib: Fix stall of process context at packet error
    
    commit 4a9bfafc64f44ef83de4e00ca1b57352af6cd8c2 upstream.
    
    At Linux v3.5, packet processing can be done in process context of ALSA
    PCM application as well as software IRQ context for OHCI 1394. Below is
    an example of the callgraph (some calls are omitted).
    
    ioctl(2) with e.g. HWSYNC
    (sound/core/pcm_native.c)
    ->snd_pcm_common_ioctl1()
      ->snd_pcm_hwsync()
        ->snd_pcm_stream_lock_irq
        (sound/core/pcm_lib.c)
        ->snd_pcm_update_hw_ptr()
          ->snd_pcm_udpate_hw_ptr0()
            ->struct snd_pcm_ops.pointer()
            (sound/firewire/*)
            = Each handler on drivers in ALSA firewire stack
              (sound/firewire/amdtp-stream.c)
              ->amdtp_stream_pcm_pointer()
                (drivers/firewire/core-iso.c)
                ->fw_iso_context_flush_completions()
                  ->struct fw_card_driver.flush_iso_completion()
                  (drivers/firewire/ohci.c)
                  = flush_iso_completions()
                    ->struct fw_iso_context.callback.sc
                    (sound/firewire/amdtp-stream.c)
                    = in_stream_callback() or out_stream_callback()
                      ->...
        ->snd_pcm_stream_unlock_irq
    
    When packet queueing error occurs or detecting invalid packets in
    'in_stream_callback()' or 'out_stream_callback()', 'snd_pcm_stop_xrun()'
    is called on local CPU with disabled IRQ.
    
    (sound/firewire/amdtp-stream.c)
    in_stream_callback() or out_stream_callback()
    ->amdtp_stream_pcm_abort()
      ->snd_pcm_stop_xrun()
        ->snd_pcm_stream_lock_irqsave()
        ->snd_pcm_stop()
        ->snd_pcm_stream_unlock_irqrestore()
    
    The process is stalled on the CPU due to attempt to acquire recursive lock.
    
    [  562.630853] INFO: rcu_sched detected stalls on CPUs/tasks:
    [  562.630861]      2-...: (1 GPs behind) idle=37d/140000000000000/0 softirq=38323/38323 fqs=7140
    [  562.630862]      (detected by 3, t=15002 jiffies, g=21036, c=21035, q=5933)
    [  562.630866] Task dump for CPU 2:
    [  562.630867] alsa-source-OXF R  running task        0  6619      1 0x00000008
    [  562.630870] Call Trace:
    [  562.630876]  ? vt_console_print+0x79/0x3e0
    [  562.630880]  ? msg_print_text+0x9d/0x100
    [  562.630883]  ? up+0x32/0x50
    [  562.630885]  ? irq_work_queue+0x8d/0xa0
    [  562.630886]  ? console_unlock+0x2b6/0x4b0
    [  562.630888]  ? vprintk_emit+0x312/0x4a0
    [  562.630892]  ? dev_vprintk_emit+0xbf/0x230
    [  562.630895]  ? do_sys_poll+0x37a/0x550
    [  562.630897]  ? dev_printk_emit+0x4e/0x70
    [  562.630900]  ? __dev_printk+0x3c/0x80
    [  562.630903]  ? _raw_spin_lock+0x20/0x30
    [  562.630909]  ? snd_pcm_stream_lock+0x31/0x50 [snd_pcm]
    [  562.630914]  ? _snd_pcm_stream_lock_irqsave+0x2e/0x40 [snd_pcm]
    [  562.630918]  ? snd_pcm_stop_xrun+0x16/0x70 [snd_pcm]
    [  562.630922]  ? in_stream_callback+0x3e6/0x450 [snd_firewire_lib]
    [  562.630925]  ? handle_ir_packet_per_buffer+0x8e/0x1a0 [firewire_ohci]
    [  562.630928]  ? ohci_flush_iso_completions+0xa3/0x130 [firewire_ohci]
    [  562.630932]  ? fw_iso_context_flush_completions+0x15/0x20 [firewire_core]
    [  562.630935]  ? amdtp_stream_pcm_pointer+0x2d/0x40 [snd_firewire_lib]
    [  562.630938]  ? pcm_capture_pointer+0x19/0x20 [snd_oxfw]
    [  562.630943]  ? snd_pcm_update_hw_ptr0+0x47/0x3d0 [snd_pcm]
    [  562.630945]  ? poll_select_copy_remaining+0x150/0x150
    [  562.630947]  ? poll_select_copy_remaining+0x150/0x150
    [  562.630952]  ? snd_pcm_update_hw_ptr+0x10/0x20 [snd_pcm]
    [  562.630956]  ? snd_pcm_hwsync+0x45/0xb0 [snd_pcm]
    [  562.630960]  ? snd_pcm_common_ioctl1+0x1ff/0xc90 [snd_pcm]
    [  562.630962]  ? futex_wake+0x90/0x170
    [  562.630966]  ? snd_pcm_capture_ioctl1+0x136/0x260 [snd_pcm]
    [  562.630970]  ? snd_pcm_capture_ioctl+0x27/0x40 [snd_pcm]
    [  562.630972]  ? do_vfs_ioctl+0xa3/0x610
    [  562.630974]  ? vfs_read+0x11b/0x130
    [  562.630976]  ? SyS_ioctl+0x79/0x90
    [  562.630978]  ? entry_SYSCALL_64_fastpath+0x1e/0xad
    
    This commit fixes the above bug. This assumes two cases:
    1. Any error is detected in software IRQ context of OHCI 1394 context.
    In this case, PCM substream should be aborted in packet handler. On the
    other hand, it should not be done in any process context. TO distinguish
    these two context, use 'in_interrupt()' macro.
    2. Any error is detect in process context of ALSA PCM application.
    In this case, PCM substream should not be aborted in packet handler
    because PCM substream lock is acquired. The task to abort PCM substream
    should be done in ALSA PCM core. For this purpose, SNDRV_PCM_POS_XRUN is
    returned at 'struct snd_pcm_ops.pointer()'.
    
    Suggested-by: Clemens Ladisch <clemens@ladisch.de>
    Fixes: e9148dddc3c7("ALSA: firewire-lib: flush completed packets when reading PCM position")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b919d2dc590952b2985e43d03b2724b84e5dc2a0
Author: Jan Beulich <jbeulich@suse.com>
Date:   Tue Jun 13 16:28:27 2017 -0400

    xen-blkback: don't leak stack data via response ring
    
    commit 089bc0143f489bd3a4578bdff5f4ca68fb26f341 upstream.
    
    Rather than constructing a local structure instance on the stack, fill
    the fields directly on the shared ring, just like other backends do.
    Build on the fact that all response structure flavors are actually
    identical (the old code did make this assumption too).
    
    This is XSA-216.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bffd6bb0c2a0b7e867ecd44aea82e8f0c6e6294
Author: Juergen Gross <jgross@suse.com>
Date:   Thu May 18 17:28:47 2017 +0200

    xen/blkback: fix disconnect while I/Os in flight
    
    commit 46464411307746e6297a034a9983a22c9dfc5a0c upstream.
    
    Today disconnecting xen-blkback is broken in case there are still
    I/Os in flight: xen_blkif_disconnect() will bail out early without
    releasing all resources in the hope it will be called again when
    the last request has terminated. This, however, won't happen as
    xen_blkif_free() won't be called on termination of the last running
    request: xen_blkif_put() won't decrement the blkif refcnt to 0 as
    xen_blkif_disconnect() didn't finish before thus some xen_blkif_put()
    calls in xen_blkif_disconnect() didn't happen.
    
    To solve this deadlock xen_blkif_disconnect() and
    xen_blkif_alloc_rings() shouldn't use xen_blkif_put() and
    xen_blkif_get() but use some other way to do their accounting of
    resources.
    
    This at once fixes another error in xen_blkif_disconnect(): when it
    returned early with -EBUSY for another ring than 0 it would call
    xen_blkif_put() again for already handled rings on a subsequent call.
    This will lead to inconsistencies in the refcnt handling.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Steven Haigh <netwiz@crc.id.au>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61ab4c4a857e145bc9a3a38075bdb718651b8a6d
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Wed May 24 18:34:29 2017 +0200

    clk: sunxi-ng: sun5i: Fix ahb_bist_clk definition
    
    commit 370d9192719e6c174167888cf9240df2542e3b4b upstream.
    
    AHB BIST gate is actually controlled with bit 7.
    
    This bug was detected while trying to use the NAND controller which is
    using the DMA engine to transfer data to the NAND.
    Since the ahb_bist_clk gate bit conflicts with the ahb_dma_clk gate bit,
    the core was disabling the DMA engine clock as part of its 'disable
    unused clks' procedure, which was causing all DMA transfers to fail after
    this point.
    
    Fixes: 5e73761786d6 ("clk: sunxi-ng: Add sun5i CCU driver")
    Reported-by: Angus Ainslie <angus@akkea.ca>
    Signed-off-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Tested-by: Angus Ainslie <angus@akkea.ca>
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Link: lkml.kernel.org/r/1495643669-28221-1-git-send-email-boris.brezillon@free-electrons.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 744b0f61b424d437e8773495c80b84c37a739e81
Author: Yong Deng <iemdey@gmail.com>
Date:   Fri May 5 18:31:57 2017 +0800

    clk: sunxi-ng: v3s: Fix usb otg device reset bit
    
    commit 7ffc781ec46ef1e9aedb482f5f04425bd8bb2753 upstream.
    
    V3S's usb otg device reset bit should be 24, not 23.
    
    Signed-off-by: Yong Deng <iemdey@gmail.com>
    Reviewed-By: Icenowy Zheng <icenowy@aosc.io>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 861b4d9542e696fb60a20281840f4258e29ba5d4
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Wed May 3 11:13:46 2017 +0800

    clk: sunxi-ng: a31: Correct lcd1-ch1 clock register offset
    
    commit 38b8f823864707eb1cf331d2247608c419ed388c upstream.
    
    The register offset for the lcd1-ch1 clock was incorrectly pointing to
    the lcd0-ch1 clock. This resulted in the lcd0-ch1 clock being disabled
    when the clk core disables unused clocks. This then stops the simplefb
    HDMI output path.
    
    Reported-by: Bob Ham <rah@settrans.net>
    Fixes: c6e6c96d8fa6 ("clk: sunxi-ng: Add A31/A31s clocks")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
