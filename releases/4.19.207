commit 2950c9c5e0df6bd34af45a5168bbee345e95eae2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Sep 22 11:48:14 2021 +0200

    Linux 4.19.207
    
    Link: https://lore.kernel.org/r/20210920163933.258815435@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e15c2fe2def24324bfdbfb7ec2837e40b2aac7fd
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Tue Sep 7 13:41:16 2021 +0200

    s390/bpf: Fix 64-bit subtraction of the -0x80000000 constant
    
    commit 6e61dc9da0b7a0d91d57c2e20b5ea4fd2d4e7e53 upstream.
    
    The JIT uses agfi for subtracting constants, but -(-0x80000000) cannot
    be represented as a 32-bit signed binary integer. Fix by using algfi in
    this particular case.
    
    Reported-by: Johan Almbladh <johan.almbladh@anyfinetworks.com>
    Fixes: 054623105728 ("s390/bpf: Add s390x eBPF JIT compiler backend")
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 044e7097e849366dfc71cccfc5d8c8a97cb3f010
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Sep 7 20:29:40 2021 +0900

    net: renesas: sh_eth: Fix freeing wrong tx descriptor
    
    [ Upstream commit 0341d5e3d1ee2a36dd5a49b5bef2ce4ad1cfa6b4 ]
    
    The cur_tx counter must be incremented after TACT bit of
    txdesc->status was set. However, a CPU is possible to reorder
    instructions and/or memory accesses between cur_tx and
    txdesc->status. And then, if TX interrupt happened at such a
    timing, the sh_eth_tx_free() may free the descriptor wrongly.
    So, add wmb() before cur_tx++.
    Otherwise NETDEV WATCHDOG timeout is possible to happen.
    
    Fixes: 86a74ff21a7a ("net: sh_eth: add support for Renesas SuperH Ethernet")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 774430026bd9a472d08c5d3c33351a782315771a
Author: Willem de Bruijn <willemb@google.com>
Date:   Sun Sep 5 11:21:09 2021 -0400

    ip_gre: validate csum_start only on pull
    
    [ Upstream commit 8a0ed250f911da31a2aef52101bc707846a800ff ]
    
    The GRE tunnel device can pull existing outer headers in ipge_xmit.
    This is a rare path, apparently unique to this device. The below
    commit ensured that pulling does not move skb->data beyond csum_start.
    
    But it has a false positive if ip_summed is not CHECKSUM_PARTIAL and
    thus csum_start is irrelevant.
    
    Refine to exclude this. At the same time simplify and strengthen the
    test.
    
    Simplify, by moving the check next to the offending pull, making it
    more self documenting and removing an unnecessary branch from other
    code paths.
    
    Strengthen, by also ensuring that the transport header is correct and
    therefore the inner headers will be after skb_reset_inner_headers.
    The transport header is set to csum_start in skb_partial_csum_set.
    
    Link: https://lore.kernel.org/netdev/YS+h%2FtqCJJiQei+W@shredder/
    Fixes: 1d011c4803c7 ("ip_gre: add validation for csum_start")
    Reported-by: Ido Schimmel <idosch@idosch.org>
    Suggested-by: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 833ffc44049435ab0e9b636a671c2108acfbc72a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri Sep 3 15:35:43 2021 +0800

    qlcnic: Remove redundant unlock in qlcnic_pinit_from_rom
    
    [ Upstream commit 9ddbc2a00d7f63fa9748f4278643193dac985f2d ]
    
    Previous commit 68233c583ab4 removes the qlcnic_rom_lock()
    in qlcnic_pinit_from_rom(), but remains its corresponding
    unlock function, which is odd. I'm not very sure whether the
    lock is missing, or the unlock is redundant. This bug is
    suggested by a static analysis tool, please advise.
    
    Fixes: 68233c583ab4 ("qlcnic: updated reset sequence")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c113506163a1ec6157927428eddd80038d2916e
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 3 15:03:43 2021 -0700

    fq_codel: reject silly quantum parameters
    
    [ Upstream commit c7c5e6ff533fe1f9afef7d2fa46678987a1335a7 ]
    
    syzbot found that forcing a big quantum attribute would crash hosts fast,
    essentially using this:
    
    tc qd replace dev eth0 root fq_codel quantum 4294967295
    
    This is because fq_codel_dequeue() would have to loop
    ~2^31 times in :
    
            if (flow->deficit <= 0) {
                    flow->deficit += q->quantum;
                    list_move_tail(&flow->flowchain, &q->old_flows);
                    goto begin;
            }
    
    SFQ max quantum is 2^19 (half a megabyte)
    Lets adopt a max quantum of one megabyte for FQ_CODEL.
    
    Fixes: 4b549a2ef4be ("fq_codel: Fair Queue Codel AQM")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6efada330af09253b0f81a0d836cee02192bd4f
Author: Benjamin Hesmans <benjamin.hesmans@tessares.net>
Date:   Fri Sep 3 15:23:35 2021 +0200

    netfilter: socket: icmp6: fix use-after-scope
    
    [ Upstream commit 730affed24bffcd1eebd5903171960f5ff9f1f22 ]
    
    Bug reported by KASAN:
    
    BUG: KASAN: use-after-scope in inet6_ehashfn (net/ipv6/inet6_hashtables.c:40)
    Call Trace:
    (...)
    inet6_ehashfn (net/ipv6/inet6_hashtables.c:40)
    (...)
    nf_sk_lookup_slow_v6 (net/ipv6/netfilter/nf_socket_ipv6.c:91
    net/ipv6/netfilter/nf_socket_ipv6.c:146)
    
    It seems that this bug has already been fixed by Eric Dumazet in the
    past in:
    commit 78296c97ca1f ("netfilter: xt_socket: fix a stack corruption bug")
    
    But a variant of the same issue has been introduced in
    commit d64d80a2cde9 ("netfilter: x_tables: don't extract flow keys on early demuxed sks in socket match")
    
    `daddr` and `saddr` potentially hold a reference to ipv6_var that is no
    longer in scope when the call to `nf_socket_get_sock_v6` is made.
    
    Fixes: d64d80a2cde9 ("netfilter: x_tables: don't extract flow keys on early demuxed sks in socket match")
    Acked-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Benjamin Hesmans <benjamin.hesmans@tessares.net>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e24ffdb604179a057e9be5c9a8ed68b90a28eee5
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Thu Sep 2 10:30:50 2021 +0200

    net: dsa: b53: Fix calculating number of switch ports
    
    [ Upstream commit cdb067d31c0fe4cce98b9d15f1f2ef525acaa094 ]
    
    It isn't true that CPU port is always the last one. Switches BCM5301x
    have 9 ports (port 6 being inactive) and they use port 5 as CPU by
    default (depending on design some other may be CPU ports too).
    
    A more reliable way of determining number of ports is to check for the
    last set bit in the "enabled_ports" bitfield.
    
    This fixes b53 internal state, it will allow providing accurate info to
    the DSA and is required to fix BCM5301x support.
    
    Fixes: 967dd82ffc52 ("net: dsa: b53: Add support for Broadcom RoboSwitch")
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e91ae87f7e3f4e3e9b4700c498a0b0a4ce82cf1d
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Aug 16 14:05:33 2021 -0700

    ARC: export clear_user_page() for modules
    
    [ Upstream commit 6b5ff0405e4190f23780362ea324b250bc495683 ]
    
    0day bot reports a build error:
      ERROR: modpost: "clear_user_page" [drivers/media/v4l2-core/videobuf-dma-sg.ko] undefined!
    so export it in arch/arc/ to fix the build error.
    
    In most ARCHes, clear_user_page() is a macro. OTOH, in a few
    ARCHes it is a function and needs to be exported.
    PowerPC exported it in 2004. It looks like nds32 and nios2
    still need to have it exported.
    
    Fixes: 4102b53392d63 ("ARC: [mm] Aliasing VIPT dcache support 2/4")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: linux-snps-arc@lists.infradead.org
    Signed-off-by: Vineet Gupta <vgupta@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a3dd774453aae49c8987decb0ab86f8eb349cc4
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Aug 21 09:58:45 2021 +0200

    mtd: rawnand: cafe: Fix a resource leak in the error handling path of 'cafe_nand_probe()'
    
    [ Upstream commit 6b430c7595e4eb95fae8fb54adc3c3ce002e75ae ]
    
    A successful 'init_rs_non_canonical()' call should be balanced by a
    corresponding 'free_rs()' call in the error handling path of the probe, as
    already done in the remove function.
    
    Update the error handling path accordingly.
    
    Fixes: 8c61b7a7f4d4 ("[MTD] [NAND] Use rslib for CAFÉ ECC")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/fd313d3fb787458bcc73189e349f481133a2cdc9.1629532640.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bdadfff347e42b6da70a9c77bb443479781c1f3
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Aug 13 18:36:19 2021 +0300

    PCI: Sync __pci_register_driver() stub for CONFIG_PCI=n
    
    [ Upstream commit 817f9916a6e96ae43acdd4e75459ef4f92d96eb1 ]
    
    The CONFIG_PCI=y case got a new parameter long time ago.  Sync the stub as
    well.
    
    [bhelgaas: add parameter names]
    Fixes: 725522b5453d ("PCI: add the sysfs driver name to all modules")
    Link: https://lore.kernel.org/r/20210813153619.89574-1-andriy.shevchenko@linux.intel.com
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6e5cd323d1d1537f450ab0d3e06811a868267c2
Author: Oliver Upton <oupton@google.com>
Date:   Wed Aug 18 20:21:31 2021 +0000

    KVM: arm64: Handle PSCI resets before userspace touches vCPU state
    
    [ Upstream commit 6826c6849b46aaa91300201213701eb861af4ba0 ]
    
    The CPU_ON PSCI call takes a payload that KVM uses to configure a
    destination vCPU to run. This payload is non-architectural state and not
    exposed through any existing UAPI. Effectively, we have a race between
    CPU_ON and userspace saving/restoring a guest: if the target vCPU isn't
    ran again before the VMM saves its state, the requested PC and context
    ID are lost. When restored, the target vCPU will be runnable and start
    executing at its old PC.
    
    We can avoid this race by making sure the reset payload is serviced
    before userspace can access a vCPU's state.
    
    Fixes: 358b28f09f0a ("arm/arm64: KVM: Allow a VCPU to fully reset itself")
    Signed-off-by: Oliver Upton <oupton@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20210818202133.1106786-3-oupton@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a091bfd11e61032b6192cf2a1ebb259889f28b3
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Aug 12 10:00:04 2021 +0300

    PCI: Fix pci_dev_str_match_path() alloc while atomic bug
    
    [ Upstream commit 7eb6ea4148579b85540a41d57bcec315b8af8ff8 ]
    
    pci_dev_str_match_path() is often called with a spinlock held so the
    allocation has to be atomic.  The call tree is:
    
      pci_specified_resource_alignment() <-- takes spin_lock();
        pci_dev_str_match()
          pci_dev_str_match_path()
    
    Fixes: 45db33709ccc ("PCI: Allow specifying devices using a base bus and path of devfns")
    Link: https://lore.kernel.org/r/20210812070004.GC31863@kili
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91264ae7fceb7e30172ab7dd27e3e41751cb83b3
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Jun 29 19:12:39 2021 +0200

    mfd: axp20x: Update AXP288 volatile ranges
    
    [ Upstream commit f949a9ebce7a18005266b859a17f10c891bb13d7 ]
    
    On Cherry Trail devices with an AXP288 PMIC the external SD-card slot
    used the AXP's DLDO2 as card-voltage and either DLDO3 or GPIO1LDO
    (GPIO1 pin in low noise LDO mode) as signal-voltage.
    
    These regulators are turned on/off and in case of the signal-voltage
    also have their output-voltage changed by the _PS0 and _PS3 power-
    management ACPI methods on the MMC-controllers ACPI fwnode as well as
    by the _DSM ACPI method for changing the signal voltage.
    
    The AML code implementing these methods is directly accessing the
    PMIC through ACPI I2C OpRegion accesses, instead of using the special
    PMIC OpRegion handled by drivers/acpi/pmic/intel_pmic_xpower.c .
    
    This means that the contents of the involved PMIC registers can change
    without the change being made through the regmap interface, so regmap
    should not cache the contents of these registers.
    
    Mark the regulator power on/off, the regulator voltage control and the
    GPIO1 control registers as volatile, to avoid regmap caching them.
    
    Specifically this fixes an issue on some models where the i915 driver
    toggles another LDO using the same on/off register on/off through
    MIPI sequences (through intel_soc_pmic_exec_mipi_pmic_seq_element())
    which then writes back a cached on/off register-value where the
    card-voltage is off causing the external sdcard slot to stop working
    when the screen goes blank, or comes back on again.
    
    The regulator register-range now marked volatile also includes the
    buck regulator control registers. This is done on purpose these are
    normally not touched by the AML code, but they are updated directly
    by the SoC's PUNIT which means that they may also change without going
    through regmap.
    
    Note the AXP288 PMIC is only used on Bay- and Cherry-Trail platforms,
    so even though this is an ACPI specific problem there is no need to
    make the new volatile ranges conditional since these platforms always
    use ACPI.
    
    Fixes: dc91c3b6fe66 ("mfd: axp20x: Mark AXP20X_VBUS_IPSOUT_MGMT as volatile")
    Fixes: cd53216625a0 ("mfd: axp20x: Fix axp288 volatile ranges")
    Reported-and-tested-by: Clamshell <clamfly@163.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3e968b65cd5bc1578438a5436339640f1b79342
Author: Yang Li <yang.lee@linux.alibaba.com>
Date:   Mon Jun 7 16:40:36 2021 +0800

    NTB: perf: Fix an error code in perf_setup_inbuf()
    
    [ Upstream commit 0097ae5f7af5684f961a5f803ff7ad3e6f933668 ]
    
    When the function IS_ALIGNED() returns false, the value of ret is 0.
    So, we set ret to -EINVAL to indicate this error.
    
    Clean up smatch warning:
    drivers/ntb/test/ntb_perf.c:602 perf_setup_inbuf() warn: missing error
    code 'ret'.
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Yang Li <yang.lee@linux.alibaba.com>
    Reviewed-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86e6540a230281cc913e9e2a39953360b9924859
Author: Yang Li <yang.lee@linux.alibaba.com>
Date:   Fri Sep 3 14:42:33 2021 +0800

    ethtool: Fix an error code in cxgb2.c
    
    [ Upstream commit 7db8263a12155c7ae4ad97e850f1e499c73765fc ]
    
    When adapter->registered_device_map is NULL, the value of err is
    uncertain, we set err to -EINVAL to avoid ambiguity.
    
    Clean up smatch warning:
    drivers/net/ethernet/chelsio/cxgb/cxgb2.c:1114 init_one() warn: missing
    error code 'err'
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Yang Li <yang.lee@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c1b1848357dc69f62ce3630b850e6680b87854b
Author: Paolo Valente <paolo.valente@linaro.org>
Date:   Mon Aug 2 16:13:52 2021 +0200

    block, bfq: honor already-setup queue merges
    
    [ Upstream commit 2d52c58b9c9bdae0ca3df6a1eab5745ab3f7d80b ]
    
    The function bfq_setup_merge prepares the merging between two
    bfq_queues, say bfqq and new_bfqq. To this goal, it assigns
    bfqq->new_bfqq = new_bfqq. Then, each time some I/O for bfqq arrives,
    the process that generated that I/O is disassociated from bfqq and
    associated with new_bfqq (merging is actually a redirection). In this
    respect, bfq_setup_merge increases new_bfqq->ref in advance, adding
    the number of processes that are expected to be associated with
    new_bfqq.
    
    Unfortunately, the stable-merging mechanism interferes with this
    setup. After bfqq->new_bfqq has been set by bfq_setup_merge, and
    before all the expected processes have been associated with
    bfqq->new_bfqq, bfqq may happen to be stably merged with a different
    queue than the current bfqq->new_bfqq. In this case, bfqq->new_bfqq
    gets changed. So, some of the processes that have been already
    accounted for in the ref counter of the previous new_bfqq will not be
    associated with that queue.  This creates an unbalance, because those
    references will never be decremented.
    
    This commit fixes this issue by reestablishing the previous, natural
    behaviour: once bfqq->new_bfqq has been set, it will not be changed
    until all expected redirections have occurred.
    
    Signed-off-by: Davide Zini <davidezini2@gmail.com>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Link: https://lore.kernel.org/r/20210802141352.74353-2-paolo.valente@linaro.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 052447e9d4aaf6cba23e96b26b3dec79cf63a1bd
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Thu Sep 2 12:51:22 2021 +0200

    net: usb: cdc_mbim: avoid altsetting toggling for Telit LN920
    
    [ Upstream commit aabbdc67f3485b5db27ab4eba01e5fbf1ffea62c ]
    
    Add quirk CDC_MBIM_FLAG_AVOID_ALTSETTING_TOGGLE for Telit LN920
    0x1061 composition in order to avoid bind error.
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9859de9fd373ef3beaf7d845e963920cf99293a6
Author: George Cherian <george.cherian@marvell.com>
Date:   Tue Aug 10 17:54:25 2021 +0530

    PCI: Add ACS quirks for Cavium multi-function devices
    
    [ Upstream commit 32837d8a8f63eb95dcb9cd005524a27f06478832 ]
    
    Some Cavium endpoints are implemented as multi-function devices without ACS
    capability, but they actually don't support peer-to-peer transactions.
    
    Add ACS quirks to declare DMA isolation for the following devices:
    
      - BGX device found on Octeon-TX (8xxx)
      - CGX device found on Octeon-TX2 (9xxx)
      - RPM device found on Octeon-TX3 (10xxx)
    
    Link: https://lore.kernel.org/r/20210810122425.1115156-1-george.cherian@marvell.com
    Signed-off-by: George Cherian <george.cherian@marvell.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3dc49079ef7d2bfea436d1124ed92802214f1c2
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Jul 25 19:07:54 2021 +0100

    mfd: Don't use irq_create_mapping() to resolve a mapping
    
    [ Upstream commit 9ff80e2de36d0554e3a6da18a171719fe8663c17 ]
    
    Although irq_create_mapping() is able to deal with duplicate
    mappings, it really isn't supposed to be a substitute for
    irq_find_mapping(), and can result in allocations that take place
    in atomic context if the mapping didn't exist.
    
    Fix the handful of MFD drivers that use irq_create_mapping() in
    interrupt context by using irq_find_mapping() instead.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Lee Jones <lee.jones@linaro.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@foss.st.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05e4fdd51a934d4bf51b368e5c00dd35f744637e
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Thu Jun 10 16:39:45 2021 +0200

    dt-bindings: mtd: gpmc: Fix the ECC bytes vs. OOB bytes equation
    
    [ Upstream commit 778cb8e39f6ec252be50fc3850d66f3dcbd5dd5a ]
    
    "PAGESIZE / 512" is the number of ECC chunks.
    "ECC_BYTES" is the number of bytes needed to store a single ECC code.
    "2" is the space reserved by the bad block marker.
    
    "2 + (PAGESIZE / 512) * ECC_BYTES" should of course be lower or equal
    than the total number of OOB bytes, otherwise it won't fit.
    
    Fix the equation by substituting s/>=/<=/.
    
    Suggested-by: Ryan J. Barnett <ryan.barnett@collins.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/linux-mtd/20210610143945.3504781-1-miquel.raynal@bootlin.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d95bdee23e92568710530f1eca161ccd63db39f
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Fri Aug 27 14:54:29 2021 +0200

    KVM: s390: index kvm->arch.idle_mask by vcpu_idx
    
    commit a3e03bc1368c1bc16e19b001fc96dc7430573cc8 upstream.
    
    While in practice vcpu->vcpu_idx ==  vcpu->vcp_id is often true, it may
    not always be, and we must not rely on this. Reason is that KVM decides
    the vcpu_idx, userspace decides the vcpu_id, thus the two might not
    match.
    
    Currently kvm->arch.idle_mask is indexed by vcpu_id, which implies
    that code like
    for_each_set_bit(vcpu_id, kvm->arch.idle_mask, online_vcpus) {
                    vcpu = kvm_get_vcpu(kvm, vcpu_id);
                    do_stuff(vcpu);
    }
    is not legit. Reason is that kvm_get_vcpu expects an vcpu_idx, not an
    vcpu_id.  The trouble is, we do actually use kvm->arch.idle_mask like
    this. To fix this problem we have two options. Either use
    kvm_get_vcpu_by_id(vcpu_id), which would loop to find the right vcpu_id,
    or switch to indexing via vcpu_idx. The latter is preferable for obvious
    reasons.
    
    Let us make switch from indexing kvm->arch.idle_mask by vcpu_id to
    indexing it by vcpu_idx.  To keep gisa_int.kicked_mask indexed by the
    same index as idle_mask lets make the same change for it as well.
    
    Fixes: 1ee0bc559dc3 ("KVM: s390: get rid of local_int array")
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Christian Bornträger <borntraeger@de.ibm.com>
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Cc: <stable@vger.kernel.org> # 3.15+
    Link: https://lore.kernel.org/r/20210827125429.1912577-1-pasic@linux.ibm.com
    [borntraeger@de.ibm.com]: change  idle mask, remove kicked_mask
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c48402015e02901ff8b1fac5c112b02546364bb6
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Sep 7 19:54:59 2021 -0700

    mm/memory_hotplug: use "unsigned long" for PFN in zone_for_pfn_range()
    
    commit 7cf209ba8a86410939a24cb1aeb279479a7e0ca6 upstream.
    
    Patch series "mm/memory_hotplug: preparatory patches for new online policy and memory"
    
    These are all cleanups and one fix previously sent as part of [1]:
    [PATCH v1 00/12] mm/memory_hotplug: "auto-movable" online policy and memory
    groups.
    
    These patches make sense even without the other series, therefore I pulled
    them out to make the other series easier to digest.
    
    [1] https://lkml.kernel.org/r/20210607195430.48228-1-david@redhat.com
    
    This patch (of 4):
    
    Checkpatch complained on a follow-up patch that we are using "unsigned"
    here, which defaults to "unsigned int" and checkpatch is correct.
    
    As we will search for a fitting zone using the wrong pfn, we might end
    up onlining memory to one of the special kernel zones, such as ZONE_DMA,
    which can end badly as the onlined memory does not satisfy properties of
    these zones.
    
    Use "unsigned long" instead, just as we do in other places when handling
    PFNs.  This can bite us once we have physical addresses in the range of
    multiple TB.
    
    Link: https://lkml.kernel.org/r/20210712124052.26491-2-david@redhat.com
    Fixes: e5e689302633 ("mm, memory_hotplug: display allowed zones in the preferred ordering")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta@ionos.com>
    Reviewed-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Cc: Wei Yang <richard.weiyang@linux.alibaba.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Mike Rapoport <rppt@kernel.org>
    Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: virtualization@lists.linux-foundation.org
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
    Cc: Anton Blanchard <anton@ozlabs.org>
    Cc: Ard Biesheuvel <ardb@kernel.org>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jia He <justin.he@arm.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Laurent Dufour <ldufour@linux.ibm.com>
    Cc: Michel Lespinasse <michel@lespinasse.org>
    Cc: Nathan Lynch <nathanl@linux.ibm.com>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Pierre Morel <pmorel@linux.ibm.com>
    Cc: "Rafael J. Wysocki" <rafael.j.wysocki@intel.com>
    Cc: Rich Felker <dalias@libc.org>
    Cc: Scott Cheloha <cheloha@linux.ibm.com>
    Cc: Sergei Trofimovich <slyfox@gentoo.org>
    Cc: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e365c0137ac1bc78bfa95bd3220a89d2f5d38e89
Author: Yufeng Mo <moyufeng@huawei.com>
Date:   Mon Sep 13 21:08:21 2021 +0800

    net: hns3: pad the short tunnel frame before sending to hardware
    
    commit d18e81183b1cb9c309266cbbce9acd3e0c528d04 upstream.
    
    The hardware cannot handle short tunnel frames below 65 bytes,
    and will cause vlan tag missing problem. So pads packet size to
    65 bytes for tunnel frames to fix this bug.
    
    Fixes: 3db084d28dc0("net: hns3: Fix for vxlan tx checksum bug")
    Signed-off-by: Yufeng Mo <moyufeng@huawei.com>
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6323a3ec9058ae951cc968d378e5ec6eec92bc4b
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Wed Sep 8 09:58:20 2021 -0700

    ibmvnic: check failover_pending in login response
    
    commit 273c29e944bda9a20a30c26cfc34c9a3f363280b upstream.
    
    If a failover occurs before a login response is received, the login
    response buffer maybe undefined. Check that there was no failover
    before accessing the login response buffer.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 533ef9965857cbca7a16b0440f33d109d4e6d891
Author: Shai Malin <smalin@marvell.com>
Date:   Fri Sep 10 11:33:56 2021 +0300

    qed: Handle management FW error
    
    commit 20e100f52730cd0db609e559799c1712b5f27582 upstream.
    
    Handle MFW (management FW) error response in order to avoid a crash
    during recovery flows.
    
    Changes from v1:
    - Add "Fixes tag".
    
    Fixes: tag 5e7ba042fd05 ("qed: Fix reading stale configuration information")
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Shai Malin <smalin@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfefcc46354530c3ec1d12db0e16c740548c6229
Author: zhenggy <zhenggy@chinatelecom.cn>
Date:   Tue Sep 14 09:51:15 2021 +0800

    tcp: fix tp->undo_retrans accounting in tcp_sacktag_one()
    
    commit 4f884f3962767877d7aabbc1ec124d2c307a4257 upstream.
    
    Commit 10d3be569243 ("tcp-tso: do not split TSO packets at retransmit
    time") may directly retrans a multiple segments TSO/GSO packet without
    split, Since this commit, we can no longer assume that a retransmitted
    packet is a single segment.
    
    This patch fixes the tp->undo_retrans accounting in tcp_sacktag_one()
    that use the actual segments(pcount) of the retransmitted packet.
    
    Before that commit (10d3be569243), the assumption underlying the
    tp->undo_retrans-- seems correct.
    
    Fixes: 10d3be569243 ("tcp-tso: do not split TSO packets at retransmit time")
    Signed-off-by: zhenggy <zhenggy@chinatelecom.cn>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 948fa0bac0840b67d7ab1b748b1eb7d9d6c032b8
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Tue Sep 14 16:43:31 2021 +0300

    net: dsa: destroy the phylink instance on any error in dsa_slave_phy_setup
    
    commit 6a52e73368038f47f6618623d75061dc263b26ae upstream.
    
    DSA supports connecting to a phy-handle, and has a fallback to a non-OF
    based method of connecting to an internal PHY on the switch's own MDIO
    bus, if no phy-handle and no fixed-link nodes were present.
    
    The -ENODEV error code from the first attempt (phylink_of_phy_connect)
    is what triggers the second attempt (phylink_connect_phy).
    
    However, when the first attempt returns a different error code than
    -ENODEV, this results in an unbalance of calls to phylink_create and
    phylink_destroy by the time we exit the function. The phylink instance
    has leaked.
    
    There are many other error codes that can be returned by
    phylink_of_phy_connect. For example, phylink_validate returns -EINVAL.
    So this is a practical issue too.
    
    Fixes: aab9c4067d23 ("net: dsa: Plug in PHYLINK support")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Link: https://lore.kernel.org/r/20210914134331.2303380-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44ba281510190e2915506016407ba5b374a3add2
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Sep 8 17:00:29 2021 -0700

    net/af_unix: fix a data-race in unix_dgram_poll
    
    commit 04f08eb44b5011493d77b602fdec29ff0f5c6cd5 upstream.
    
    syzbot reported another data-race in af_unix [1]
    
    Lets change __skb_insert() to use WRITE_ONCE() when changing
    skb head qlen.
    
    Also, change unix_dgram_poll() to use lockless version
    of unix_recvq_full()
    
    It is verry possible we can switch all/most unix_recvq_full()
    to the lockless version, this will be done in a future kernel version.
    
    [1] HEAD commit: 8596e589b787732c8346f0482919e83cc9362db1
    
    BUG: KCSAN: data-race in skb_queue_tail / unix_dgram_poll
    
    write to 0xffff88814eeb24e0 of 4 bytes by task 25815 on cpu 0:
     __skb_insert include/linux/skbuff.h:1938 [inline]
     __skb_queue_before include/linux/skbuff.h:2043 [inline]
     __skb_queue_tail include/linux/skbuff.h:2076 [inline]
     skb_queue_tail+0x80/0xa0 net/core/skbuff.c:3264
     unix_dgram_sendmsg+0xff2/0x1600 net/unix/af_unix.c:1850
     sock_sendmsg_nosec net/socket.c:703 [inline]
     sock_sendmsg net/socket.c:723 [inline]
     ____sys_sendmsg+0x360/0x4d0 net/socket.c:2392
     ___sys_sendmsg net/socket.c:2446 [inline]
     __sys_sendmmsg+0x315/0x4b0 net/socket.c:2532
     __do_sys_sendmmsg net/socket.c:2561 [inline]
     __se_sys_sendmmsg net/socket.c:2558 [inline]
     __x64_sys_sendmmsg+0x53/0x60 net/socket.c:2558
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    read to 0xffff88814eeb24e0 of 4 bytes by task 25834 on cpu 1:
     skb_queue_len include/linux/skbuff.h:1869 [inline]
     unix_recvq_full net/unix/af_unix.c:194 [inline]
     unix_dgram_poll+0x2bc/0x3e0 net/unix/af_unix.c:2777
     sock_poll+0x23e/0x260 net/socket.c:1288
     vfs_poll include/linux/poll.h:90 [inline]
     ep_item_poll fs/eventpoll.c:846 [inline]
     ep_send_events fs/eventpoll.c:1683 [inline]
     ep_poll fs/eventpoll.c:1798 [inline]
     do_epoll_wait+0x6ad/0xf00 fs/eventpoll.c:2226
     __do_sys_epoll_wait fs/eventpoll.c:2238 [inline]
     __se_sys_epoll_wait fs/eventpoll.c:2233 [inline]
     __x64_sys_epoll_wait+0xf6/0x120 fs/eventpoll.c:2233
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0x90 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0x0000001b -> 0x00000001
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 25834 Comm: syz-executor.1 Tainted: G        W         5.14.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 86b18aaa2b5b ("skbuff: fix a data race in skb_queue_len()")
    Cc: Qian Cai <cai@lca.pw>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c09a84aea0d3902f955cc6504e1c25cddb7c48c2
Author: Baptiste Lepers <baptiste.lepers@gmail.com>
Date:   Mon Sep 6 11:53:10 2021 +1000

    events: Reuse value read using READ_ONCE instead of re-reading it
    
    commit b89a05b21f46150ac10a962aa50109250b56b03b upstream.
    
    In perf_event_addr_filters_apply, the task associated with
    the event (event->ctx->task) is read using READ_ONCE at the beginning
    of the function, checked, and then re-read from event->ctx->task,
    voiding all guarantees of the checks. Reuse the value that was read by
    READ_ONCE to ensure the consistency of the task struct throughout the
    function.
    
    Fixes: 375637bc52495 ("perf/core: Introduce address range filtering")
    Signed-off-by: Baptiste Lepers <baptiste.lepers@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210906015310.12802-1-baptiste.lepers@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e68a11a4324dbf7e98eeda55c16501263ce2d00c
Author: Maor Gottlieb <maorg@nvidia.com>
Date:   Wed Sep 1 11:48:13 2021 +0300

    net/mlx5: Fix potential sleeping in atomic context
    
    commit ee27e330a953595903979ffdb84926843595a9fe upstream.
    
    Fixes the below flow of sleeping in atomic context by releasing
    the RCU lock before calling to free_match_list.
    
    build_match_list() <- disables preempt
    -> free_match_list()
       -> tree_put_node()
          -> down_write_ref_node() <- take write lock
    
    Fixes: 693c6883bbc4 ("net/mlx5: Add hash table for flow groups in flow table")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Maor Gottlieb <maorg@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44428199a3ce7ba6c3c6b9c6385cbbc9131662ea
Author: Michael Petlan <mpetlan@redhat.com>
Date:   Mon Jul 19 16:53:32 2021 +0200

    perf machine: Initialize srcline string member in add_location struct
    
    commit 57f0ff059e3daa4e70a811cb1d31a49968262d20 upstream.
    
    It's later supposed to be either a correct address or NULL. Without the
    initialization, it may contain an undefined value which results in the
    following segmentation fault:
    
      # perf top --sort comm -g --ignore-callees=do_idle
    
    terminates with:
    
      #0  0x00007ffff56b7685 in __strlen_avx2 () from /lib64/libc.so.6
      #1  0x00007ffff55e3802 in strdup () from /lib64/libc.so.6
      #2  0x00005555558cb139 in hist_entry__init (callchain_size=<optimized out>, sample_self=true, template=0x7fffde7fb110, he=0x7fffd801c250) at util/hist.c:489
      #3  hist_entry__new (template=template@entry=0x7fffde7fb110, sample_self=sample_self@entry=true) at util/hist.c:564
      #4  0x00005555558cb4ba in hists__findnew_entry (hists=hists@entry=0x5555561d9e38, entry=entry@entry=0x7fffde7fb110, al=al@entry=0x7fffde7fb420,
          sample_self=sample_self@entry=true) at util/hist.c:657
      #5  0x00005555558cba1b in __hists__add_entry (hists=hists@entry=0x5555561d9e38, al=0x7fffde7fb420, sym_parent=<optimized out>, bi=bi@entry=0x0, mi=mi@entry=0x0,
          sample=sample@entry=0x7fffde7fb4b0, sample_self=true, ops=0x0, block_info=0x0) at util/hist.c:288
      #6  0x00005555558cbb70 in hists__add_entry (sample_self=true, sample=0x7fffde7fb4b0, mi=0x0, bi=0x0, sym_parent=<optimized out>, al=<optimized out>, hists=0x5555561d9e38)
          at util/hist.c:1056
      #7  iter_add_single_cumulative_entry (iter=0x7fffde7fb460, al=<optimized out>) at util/hist.c:1056
      #8  0x00005555558cc8a4 in hist_entry_iter__add (iter=iter@entry=0x7fffde7fb460, al=al@entry=0x7fffde7fb420, max_stack_depth=<optimized out>, arg=arg@entry=0x7fffffff7db0)
          at util/hist.c:1231
      #9  0x00005555557cdc9a in perf_event__process_sample (machine=<optimized out>, sample=0x7fffde7fb4b0, evsel=<optimized out>, event=<optimized out>, tool=0x7fffffff7db0)
          at builtin-top.c:842
      #10 deliver_event (qe=<optimized out>, qevent=<optimized out>) at builtin-top.c:1202
      #11 0x00005555558a9318 in do_flush (show_progress=false, oe=0x7fffffff80e0) at util/ordered-events.c:244
      #12 __ordered_events__flush (oe=oe@entry=0x7fffffff80e0, how=how@entry=OE_FLUSH__TOP, timestamp=timestamp@entry=0) at util/ordered-events.c:323
      #13 0x00005555558a9789 in __ordered_events__flush (timestamp=<optimized out>, how=<optimized out>, oe=<optimized out>) at util/ordered-events.c:339
      #14 ordered_events__flush (how=OE_FLUSH__TOP, oe=0x7fffffff80e0) at util/ordered-events.c:341
      #15 ordered_events__flush (oe=oe@entry=0x7fffffff80e0, how=how@entry=OE_FLUSH__TOP) at util/ordered-events.c:339
      #16 0x00005555557cd631 in process_thread (arg=0x7fffffff7db0) at builtin-top.c:1114
      #17 0x00007ffff7bb817a in start_thread () from /lib64/libpthread.so.0
      #18 0x00007ffff5656dc3 in clone () from /lib64/libc.so.6
    
    If you look at the frame #2, the code is:
    
    488      if (he->srcline) {
    489          he->srcline = strdup(he->srcline);
    490          if (he->srcline == NULL)
    491              goto err_rawdata;
    492      }
    
    If he->srcline is not NULL (it is not NULL if it is uninitialized rubbish),
    it gets strdupped and strdupping a rubbish random string causes the problem.
    
    Also, if you look at the commit 1fb7d06a509e, it adds the srcline property
    into the struct, but not initializing it everywhere needed.
    
    Committer notes:
    
    Now I see, when using --ignore-callees=do_idle we end up here at line
    2189 in add_callchain_ip():
    
    2181         if (al.sym != NULL) {
    2182                 if (perf_hpp_list.parent && !*parent &&
    2183                     symbol__match_regex(al.sym, &parent_regex))
    2184                         *parent = al.sym;
    2185                 else if (have_ignore_callees && root_al &&
    2186                   symbol__match_regex(al.sym, &ignore_callees_regex)) {
    2187                         /* Treat this symbol as the root,
    2188                            forgetting its callees. */
    2189                         *root_al = al;
    2190                         callchain_cursor_reset(cursor);
    2191                 }
    2192         }
    
    And the al that doesn't have the ->srcline field initialized will be
    copied to the root_al, so then, back to:
    
    1211 int hist_entry_iter__add(struct hist_entry_iter *iter, struct addr_location *al,
    1212                          int max_stack_depth, void *arg)
    1213 {
    1214         int err, err2;
    1215         struct map *alm = NULL;
    1216
    1217         if (al)
    1218                 alm = map__get(al->map);
    1219
    1220         err = sample__resolve_callchain(iter->sample, &callchain_cursor, &iter->parent,
    1221                                         iter->evsel, al, max_stack_depth);
    1222         if (err) {
    1223                 map__put(alm);
    1224                 return err;
    1225         }
    1226
    1227         err = iter->ops->prepare_entry(iter, al);
    1228         if (err)
    1229                 goto out;
    1230
    1231         err = iter->ops->add_single_entry(iter, al);
    1232         if (err)
    1233                 goto out;
    1234
    
    That al at line 1221 is what hist_entry_iter__add() (called from
    sample__resolve_callchain()) saw as 'root_al', and then:
    
            iter->ops->add_single_entry(iter, al);
    
    will go on with al->srcline with a bogus value, I'll add the above
    sequence to the cset and apply, thanks!
    
    Signed-off-by: Michael Petlan <mpetlan@redhat.com>
    CC: Milian Wolff <milian.wolff@kdab.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Fixes: 1fb7d06a509e ("perf report Use srcline from callchain for hist entries")
    Link: https //lore.kernel.org/r/20210719145332.29747-1-mpetlan@redhat.com
    Reported-by: Juri Lelli <jlelli@redhat.com>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df957462980e7a68ccc389ccee9c2de72e973c43
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a86e6a43f3a734ccc1416a4304e03d85db320b5d
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Sep 9 10:33:28 2021 -0700

    r6040: Restore MDIO clock frequency after MAC reset
    
    commit e3f0cc1a945fcefec0c7c9d9dfd028a51daa1846 upstream.
    
    A number of users have reported that they were not able to get the PHY
    to successfully link up, especially after commit c36757eb9dee ("net:
    phy: consider AN_RESTART status when reading link status") where we
    stopped reading just BMSR, but we also read BMCR to determine the link
    status.
    
    Andrius at NetBSD did a wonderful job at debugging the problem
    and found out that the MDIO bus clock frequency would be incorrectly set
    back to its default value which would prevent the MDIO bus controller
    from reading PHY registers properly. Back when we only read BMSR, if we
    read all 1s, we could falsely indicate a link status, though in general
    there is a cable plugged in, so this went unnoticed. After a second read
    of BMCR was added, a wrong read will lead to the inability to determine
    a link UP condition which is when it started to be visibly broken, even
    if it was long before that.
    
    The fix consists in restoring the value of the MD_CSR register that was
    set prior to the MAC reset.
    
    Link: http://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=53494
    Fixes: 90f750a81a29 ("r6040: consolidate MAC reset to its own function")
    Reported-by: Andrius V <vezhlys@gmail.com>
    Reported-by: Darek Strugacz <darek.strugacz@op.pl>
    Tested-by: Darek Strugacz <darek.strugacz@op.pl>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef05e810c1cb0cdcacfcc134e5878a0c15d90808
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Sep 9 12:32:00 2021 +0800

    net/l2tp: Fix reference count leak in l2tp_udp_recv_core
    
    commit 9b6ff7eb666415e1558f1ba8a742f5db6a9954de upstream.
    
    The reference count leak issue may take place in an error handling
    path. If both conditions of tunnel->version == L2TP_HDR_VER_3 and the
    return value of l2tp_v3_ensure_opt_in_linear is nonzero, the function
    would directly jump to label invalid, without decrementing the reference
    count of the l2tp_session object session increased earlier by
    l2tp_tunnel_get_session(). This may result in refcount leaks.
    
    Fix this issue by decrease the reference count before jumping to the
    label invalid.
    
    Fixes: 4522a70db7aa ("l2tp: fix reading optional fields of L2TPv3")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Xiong <xiongx18@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfec82f3e5b8bd93ab65b7417a64886ec8c42f14
Author: Lin, Zhenpeng <zplin@psu.edu>
Date:   Wed Sep 8 03:40:59 2021 +0000

    dccp: don't duplicate ccid when cloning dccp sock
    
    commit d9ea761fdd197351890418acd462c51f241014a7 upstream.
    
    Commit 2677d2067731 ("dccp: don't free ccid2_hc_tx_sock ...") fixed
    a UAF but reintroduced CVE-2017-6074.
    
    When the sock is cloned, two dccps_hc_tx_ccid will reference to the
    same ccid. So one can free the ccid object twice from two socks after
    cloning.
    
    This issue was found by "Hadar Manor" as well and assigned with
    CVE-2020-16119, which was fixed in Ubuntu's kernel. So here I port
    the patch from Ubuntu to fix it.
    
    The patch prevents cloned socks from referencing the same ccid.
    
    Fixes: 2677d2067731410 ("dccp: don't free ccid2_hc_tx_sock ...")
    Signed-off-by: Zhenpeng Lin <zplin@psu.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d0a3d07bfa9518825cb4b71999f74bf50b3d557
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Sep 13 15:06:05 2021 -0700

    ptp: dp83640: don't define PAGE0
    
    commit 7366c23ff492ad260776a3ee1aaabba9fc773a8b upstream.
    
    Building dp83640.c on arch/parisc/ produces a build warning for
    PAGE0 being redefined. Since the macro is not used in the dp83640
    driver, just make it a comment for documentation purposes.
    
    In file included from ../drivers/net/phy/dp83640.c:23:
    ../drivers/net/phy/dp83640_reg.h:8: warning: "PAGE0" redefined
        8 | #define PAGE0                     0x0000
                     from ../drivers/net/phy/dp83640.c:11:
    ../arch/parisc/include/asm/page.h:187: note: this is the location of the previous definition
      187 | #define PAGE0   ((struct zeropage *)__PAGE_OFFSET)
    
    Fixes: cb646e2b02b2 ("ptp: Added a clock driver for the National Semiconductor PHYTER.")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Richard Cochran <richard.cochran@omicron.at>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Cc: Russell King <linux@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20210913220605.19682-1-rdunlap@infradead.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9abcfed25029c1a99029914823389ea8f213d3df
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Sep 13 11:08:36 2021 -0700

    net-caif: avoid user-triggerable WARN_ON(1)
    
    commit 550ac9c1aaaaf51fd42e20d461f0b1cdbd55b3d2 upstream.
    
    syszbot triggers this warning, which looks something
    we can easily prevent.
    
    If we initialize priv->list_field in chnl_net_init(),
    then always use list_del_init(), we can remove robust_list_del()
    completely.
    
    WARNING: CPU: 0 PID: 3233 at net/caif/chnl_net.c:67 robust_list_del net/caif/chnl_net.c:67 [inline]
    WARNING: CPU: 0 PID: 3233 at net/caif/chnl_net.c:67 chnl_net_uninit+0xc9/0x2e0 net/caif/chnl_net.c:375
    Modules linked in:
    CPU: 0 PID: 3233 Comm: syz-executor.3 Not tainted 5.14.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:robust_list_del net/caif/chnl_net.c:67 [inline]
    RIP: 0010:chnl_net_uninit+0xc9/0x2e0 net/caif/chnl_net.c:375
    Code: 89 eb e8 3a a3 ba f8 48 89 d8 48 c1 e8 03 42 80 3c 28 00 0f 85 bf 01 00 00 48 81 fb 00 14 4e 8d 48 8b 2b 75 d0 e8 17 a3 ba f8 <0f> 0b 5b 5d 41 5c 41 5d e9 0a a3 ba f8 4c 89 e3 e8 02 a3 ba f8 4c
    RSP: 0018:ffffc90009067248 EFLAGS: 00010202
    RAX: 0000000000008780 RBX: ffffffff8d4e1400 RCX: ffffc9000fd34000
    RDX: 0000000000040000 RSI: ffffffff88bb6e49 RDI: 0000000000000003
    RBP: ffff88802cd9ee08 R08: 0000000000000000 R09: ffffffff8d0e6647
    R10: ffffffff88bb6dc2 R11: 0000000000000000 R12: ffff88803791ae08
    R13: dffffc0000000000 R14: 00000000e600ffce R15: ffff888073ed3480
    FS:  00007fed10fa0700(0000) GS:ffff8880b9d00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2c322000 CR3: 00000000164a6000 CR4: 00000000001506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     register_netdevice+0xadf/0x1500 net/core/dev.c:10347
     ipcaif_newlink+0x4c/0x260 net/caif/chnl_net.c:468
     __rtnl_newlink+0x106d/0x1750 net/core/rtnetlink.c:3458
     rtnl_newlink+0x64/0xa0 net/core/rtnetlink.c:3506
     rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5572
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2504
     netlink_unicast_kernel net/netlink/af_netlink.c:1314 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1340
     netlink_sendmsg+0x86d/0xdb0 net/netlink/af_netlink.c:1929
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:724
     __sys_sendto+0x21c/0x320 net/socket.c:2036
     __do_sys_sendto net/socket.c:2048 [inline]
     __se_sys_sendto net/socket.c:2044 [inline]
     __x64_sys_sendto+0xdd/0x1b0 net/socket.c:2044
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fixes: cc36a070b590 ("net-caif: add CAIF netdevice")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd02719fe29c9514c7cec70040b71af13e549e11
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 13:25:36 2021 -0400

    tipc: fix an use-after-free issue in tipc_recvmsg
    
    commit cc19862ffe454a5b632ca202e5a51bfec9f89fd2 upstream.
    
    syzbot reported an use-after-free crash:
    
      BUG: KASAN: use-after-free in tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
      Call Trace:
       tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
       sock_recvmsg_nosec net/socket.c:943 [inline]
       sock_recvmsg net/socket.c:961 [inline]
       sock_recvmsg+0xca/0x110 net/socket.c:957
       tipc_conn_rcv_from_sock+0x162/0x2f0 net/tipc/topsrv.c:398
       tipc_conn_recv_work+0xeb/0x190 net/tipc/topsrv.c:421
       process_one_work+0x98d/0x1630 kernel/workqueue.c:2276
       worker_thread+0x658/0x11f0 kernel/workqueue.c:2422
    
    As Hoang pointed out, it was caused by skb_cb->bytes_read still accessed
    after calling tsk_advance_rx_queue() to free the skb in tipc_recvmsg().
    
    This patch is to fix it by accessing skb_cb->bytes_read earlier than
    calling tsk_advance_rx_queue().
    
    Fixes: f4919ff59c28 ("tipc: keep the skb in rcv queue until the whole data is read")
    Reported-by: syzbot+e6741b97d5552f97c24d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2717db72f74c8e51068801b6327559241c54b86e
Author: Mike Rapoport <rppt@kernel.org>
Date:   Thu Aug 19 16:27:17 2021 +0300

    x86/mm: Fix kern_addr_valid() to cope with existing but not present entries
    
    commit 34b1999da935a33be6239226bfa6cd4f704c5c88 upstream.
    
    Jiri Olsa reported a fault when running:
    
      # cat /proc/kallsyms | grep ksys_read
      ffffffff8136d580 T ksys_read
      # objdump -d --start-address=0xffffffff8136d580 --stop-address=0xffffffff8136d590 /proc/kcore
    
      /proc/kcore:     file format elf64-x86-64
    
      Segmentation fault
    
      general protection fault, probably for non-canonical address 0xf887ffcbff000: 0000 [#1] SMP PTI
      CPU: 12 PID: 1079 Comm: objdump Not tainted 5.14.0-rc5qemu+ #508
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-4.fc34 04/01/2014
      RIP: 0010:kern_addr_valid
      Call Trace:
       read_kcore
       ? rcu_read_lock_sched_held
       ? rcu_read_lock_sched_held
       ? rcu_read_lock_sched_held
       ? trace_hardirqs_on
       ? rcu_read_lock_sched_held
       ? lock_acquire
       ? lock_acquire
       ? rcu_read_lock_sched_held
       ? lock_acquire
       ? rcu_read_lock_sched_held
       ? rcu_read_lock_sched_held
       ? rcu_read_lock_sched_held
       ? lock_release
       ? _raw_spin_unlock
       ? __handle_mm_fault
       ? rcu_read_lock_sched_held
       ? lock_acquire
       ? rcu_read_lock_sched_held
       ? lock_release
       proc_reg_read
       ? vfs_read
       vfs_read
       ksys_read
       do_syscall_64
       entry_SYSCALL_64_after_hwframe
    
    The fault happens because kern_addr_valid() dereferences existent but not
    present PMD in the high kernel mappings.
    
    Such PMDs are created when free_kernel_image_pages() frees regions larger
    than 2Mb. In this case, a part of the freed memory is mapped with PMDs and
    the set_memory_np_noalias() -> ... -> __change_page_attr() sequence will
    mark the PMD as not present rather than wipe it completely.
    
    Have kern_addr_valid() check whether higher level page table entries are
    present before trying to dereference them to fix this issue and to avoid
    similar issues in the future.
    
    Stable backporting note:
    ------------------------
    
    Note that the stable marking is for all active stable branches because
    there could be cases where pagetable entries exist but are not valid -
    see 9a14aefc1d28 ("x86: cpa, fix lookup_address"), for example. So make
    sure to be on the safe side here and use pXY_present() accessors rather
    than pXY_none() which could #GP when accessing pages in the direct map.
    
    Also see:
    
      c40a56a7818c ("x86/mm/init: Remove freed kernel image areas from alias mapping")
    
    for more info.
    
    Reported-by: Jiri Olsa <jolsa@redhat.com>
    Signed-off-by: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: Dave Hansen <dave.hansen@intel.com>
    Tested-by: Jiri Olsa <jolsa@redhat.com>
    Cc: <stable@vger.kernel.org>    # 4.4+
    Link: https://lkml.kernel.org/r/20210819132717.19358-1-rppt@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e947ff6f6071d07e4f725fbe4e9dac1bb0bd738a
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Sep 3 14:33:11 2021 +0800

    PCI: Add AMD GPU multi-function power dependencies
    
    commit 60b78ed088ebe1a872ee1320b6c5ad6ee2c4bd9a upstream.
    
    Some AMD GPUs have built-in USB xHCI and USB Type-C UCSI controllers with
    power dependencies between the GPU and the other functions as in
    6d2e369f0d4c ("PCI: Add NVIDIA GPU multi-function power dependencies").
    
    Add device link support for the AMD integrated USB xHCI and USB Type-C UCSI
    controllers.
    
    Without this, runtime power management, including GPU resume and temp and
    fan sensors don't work correctly.
    
    Reported-at: https://gitlab.freedesktop.org/drm/amd/-/issues/1704
    Link: https://lore.kernel.org/r/20210903063311.3606226-1-evan.quan@amd.com
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50990255209c11c6452649d2f00884aafbc27166
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Sep 3 10:49:36 2021 +0200

    PM: base: power: don't try to use non-existing RTC for storing data
    
    commit 0560204b360a332c321124dbc5cdfd3364533a74 upstream.
    
    If there is no legacy RTC device, don't try to use it for storing trace
    data across suspend/resume.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Rafael J. Wysocki <rafael@kernel.org>
    Link: https://lore.kernel.org/r/20210903084937.19392-2-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aadf3115f86c6df4308e2734b5c39eadbe9573e0
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Sep 9 17:53:56 2021 +0100

    arm64/sve: Use correct size when reinitialising SVE state
    
    commit e35ac9d0b56e9efefaeeb84b635ea26c2839ea86 upstream.
    
    When we need a buffer for SVE register state we call sve_alloc() to make
    sure that one is there. In order to avoid repeated allocations and frees
    we keep the buffer around unless we change vector length and just memset()
    it to ensure a clean register state. The function that deals with this
    takes the task to operate on as an argument, however in the case where we
    do a memset() we initialise using the SVE state size for the current task
    rather than the task passed as an argument.
    
    This is only an issue in the case where we are setting the register state
    for a task via ptrace and the task being configured has a different vector
    length to the task tracing it. In the case where the buffer is larger in
    the traced process we will leak old state from the traced process to
    itself, in the case where the buffer is smaller in the traced process we
    will overflow the buffer and corrupt memory.
    
    Fixes: bc0ee4760364 ("arm64/sve: Core task context handling")
    Cc: <stable@vger.kernel.org> # 4.15.x
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210909165356.10675-1-broonie@kernel.org
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9662002bff0e92a17837e7cead95cb119a874367
Author: Adrian Bunk <bunk@kernel.org>
Date:   Sun Sep 12 22:05:23 2021 +0300

    bnx2x: Fix enabling network interfaces without VFs
    
    commit 52ce14c134a003fee03d8fc57442c05a55b53715 upstream.
    
    This function is called to enable SR-IOV when available,
    not enabling interfaces without VFs was a regression.
    
    Fixes: 65161c35554f ("bnx2x: Fix missing error code in bnx2x_iov_init_one()")
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Reported-by: YunQiang Su <wzssyqa@gmail.com>
    Tested-by: YunQiang Su <wzssyqa@gmail.com>
    Cc: stable@vger.kernel.org
    Acked-by: Shai Malin <smalin@marvell.com>
    Link: https://lore.kernel.org/r/20210912190523.27991-1-bunk@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 831c0778892dc6586d67bb455cc3fcf43b9d4918
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Sep 3 10:49:37 2021 +0200

    xen: reset legacy rtc flag for PV domU
    
    commit f68aa100d815b5b4467fd1c3abbe3b99d65fd028 upstream.
    
    A Xen PV guest doesn't have a legacy RTC device, so reset the legacy
    RTC flag. Otherwise the following WARN splat will occur at boot:
    
    [    1.333404] WARNING: CPU: 1 PID: 1 at /home/gross/linux/head/drivers/rtc/rtc-mc146818-lib.c:25 mc146818_get_time+0x1be/0x210
    [    1.333404] Modules linked in:
    [    1.333404] CPU: 1 PID: 1 Comm: swapper/0 Tainted: G        W         5.14.0-rc7-default+ #282
    [    1.333404] RIP: e030:mc146818_get_time+0x1be/0x210
    [    1.333404] Code: c0 64 01 c5 83 fd 45 89 6b 14 7f 06 83 c5 64 89 6b 14 41 83 ec 01 b8 02 00 00 00 44 89 63 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 <0f> 0b 48 c7 c7 30 0e ef 82 4c 89 e6 e8 71 2a 24 00 48 c7 c0 ff ff
    [    1.333404] RSP: e02b:ffffc90040093df8 EFLAGS: 00010002
    [    1.333404] RAX: 00000000000000ff RBX: ffffc90040093e34 RCX: 0000000000000000
    [    1.333404] RDX: 0000000000000001 RSI: 0000000000000000 RDI: 000000000000000d
    [    1.333404] RBP: ffffffff82ef0e30 R08: ffff888005013e60 R09: 0000000000000000
    [    1.333404] R10: ffffffff82373e9b R11: 0000000000033080 R12: 0000000000000200
    [    1.333404] R13: 0000000000000000 R14: 0000000000000002 R15: ffffffff82cdc6d4
    [    1.333404] FS:  0000000000000000(0000) GS:ffff88807d440000(0000) knlGS:0000000000000000
    [    1.333404] CS:  10000e030 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    1.333404] CR2: 0000000000000000 CR3: 000000000260a000 CR4: 0000000000050660
    [    1.333404] Call Trace:
    [    1.333404]  ? wakeup_sources_sysfs_init+0x30/0x30
    [    1.333404]  ? rdinit_setup+0x2b/0x2b
    [    1.333404]  early_resume_init+0x23/0xa4
    [    1.333404]  ? cn_proc_init+0x36/0x36
    [    1.333404]  do_one_initcall+0x3e/0x200
    [    1.333404]  kernel_init_freeable+0x232/0x28e
    [    1.333404]  ? rest_init+0xd0/0xd0
    [    1.333404]  kernel_init+0x16/0x120
    [    1.333404]  ret_from_fork+0x1f/0x30
    
    Cc: <stable@vger.kernel.org>
    Fixes: 8d152e7a5c7537 ("x86/rtc: Replace paravirt rtc check with platform legacy quirk")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20210903084937.19392-3-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d8d5889c3a9b9f35614826228f5be585439685f
Author: Ye Bin <yebin10@huawei.com>
Date:   Tue Sep 1 14:25:44 2020 +0800

    dm thin metadata: Fix use-after-free in dm_bm_set_read_only
    
    commit 3a653b205f29b3f9827a01a0c88bfbcb0d169494 upstream.
    
    The following error ocurred when testing disk online/offline:
    
    [  301.798344] device-mapper: thin: 253:5: aborting current metadata transaction
    [  301.848441] device-mapper: thin: 253:5: failed to abort metadata transaction
    [  301.849206] Aborting journal on device dm-26-8.
    [  301.850489] EXT4-fs error (device dm-26) in __ext4_new_inode:943: Journal has aborted
    [  301.851095] EXT4-fs (dm-26): Delayed block allocation failed for inode 398742 at logical offset 181 with max blocks 19 with error 30
    [  301.854476] BUG: KASAN: use-after-free in dm_bm_set_read_only+0x3a/0x40 [dm_persistent_data]
    
    Reason is:
    
     metadata_operation_failed
        abort_transaction
            dm_pool_abort_metadata
                __create_persistent_data_objects
                    r = __open_or_format_metadata
                    if (r) --> If failed will free pmd->bm but pmd->bm not set NULL
                        dm_block_manager_destroy(pmd->bm);
        set_pool_mode
            dm_pool_metadata_read_only(pool->pmd);
            dm_bm_set_read_only(pmd->bm);  --> use-after-free
    
    Add checks to see if pmd->bm is NULL in dm_bm_set_read_only and
    dm_bm_set_read_write functions.  If bm is NULL it means creating the
    bm failed and so dm_bm_is_read_only must return true.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: xiejingfeng <xiejingfeng@linux.alibaba.com>
    Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7442102055bbb4b5968e745671c3447a950cd79f
Author: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
Date:   Tue Jun 22 12:23:38 2021 -0400

    drm/amdgpu: Fix BUG_ON assert
    
    commit ea7acd7c5967542353430947f3faf699e70602e5 upstream.
    
    With added CPU domain to placement you can have
    now 3 placemnts at once.
    
    CC: stable@kernel.org
    Signed-off-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210622162339.761651-5-andrey.grodzovsky@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54748ae6a818d058c1299d1eeb85d4ae458e021f
Author: Patryk Duda <pdk@semihalf.com>
Date:   Tue May 18 16:07:58 2021 +0200

    platform/chrome: cros_ec_proto: Send command again when timeout occurs
    
    commit 3abc16af57c9939724df92fcbda296b25cc95168 upstream.
    
    Sometimes kernel is trying to probe Fingerprint MCU (FPMCU) when it
    hasn't initialized SPI yet. This can happen because FPMCU is restarted
    during system boot and kernel can send message in short window
    eg. between sysjump to RW and SPI initialization.
    
    Cc: <stable@vger.kernel.org> # 4.4+
    Signed-off-by: Patryk Duda <pdk@semihalf.com>
    Link: https://lore.kernel.org/r/20210518140758.29318-1-pdk@semihalf.com
    Signed-off-by: Benson Leung <bleung@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cc559a4b936247ed33a8e7259c5fa920fc35e35
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Sep 2 14:54:57 2021 -0700

    memcg: enable accounting for pids in nested pid namespaces
    
    commit fab827dbee8c2e06ca4ba000fa6c48bcf9054aba upstream.
    
    Commit 5d097056c9a0 ("kmemcg: account certain kmem allocations to memcg")
    enabled memcg accounting for pids allocated from init_pid_ns.pid_cachep,
    but forgot to adjust the setting for nested pid namespaces.  As a result,
    pid memory is not accounted exactly where it is really needed, inside
    memcg-limited containers with their own pid namespaces.
    
    Pid was one the first kernel objects enabled for memcg accounting.
    init_pid_ns.pid_cachep marked by SLAB_ACCOUNT and we can expect that any
    new pids in the system are memcg-accounted.
    
    Though recently I've noticed that it is wrong.  nested pid namespaces
    creates own slab caches for pid objects, nested pids have increased size
    because contain id both for all parent and for own pid namespaces.  The
    problem is that these slab caches are _NOT_ marked by SLAB_ACCOUNT, as a
    result any pids allocated in nested pid namespaces are not
    memcg-accounted.
    
    Pid struct in nested pid namespace consumes up to 500 bytes memory, 100000
    such objects gives us up to ~50Mb unaccounted memory, this allow container
    to exceed assigned memcg limits.
    
    Link: https://lkml.kernel.org/r/8b6de616-fd1a-02c6-cbdb-976ecdcfa604@virtuozzo.com
    Fixes: 5d097056c9a0 ("kmemcg: account certain kmem allocations to memcg")
    Cc: stable@vger.kernel.org
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Michal Koutný <mkoutny@suse.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fed7f8eda3211190a27caddd6ba8fd728f7b17b
Author: Liu Zixian <liuzixian4@huawei.com>
Date:   Wed Sep 8 18:10:05 2021 -0700

    mm/hugetlb: initialize hugetlb_usage in mm_init
    
    commit 13db8c50477d83ad3e3b9b0ae247e5cd833a7ae4 upstream.
    
    After fork, the child process will get incorrect (2x) hugetlb_usage.  If
    a process uses 5 2MB hugetlb pages in an anonymous mapping,
    
            HugetlbPages:      10240 kB
    
    and then forks, the child will show,
    
            HugetlbPages:      20480 kB
    
    The reason for double the amount is because hugetlb_usage will be copied
    from the parent and then increased when we copy page tables from parent
    to child.  Child will have 2x actual usage.
    
    Fix this by adding hugetlb_count_init in mm_init.
    
    Link: https://lkml.kernel.org/r/20210826071742.877-1-liuzixian4@huawei.com
    Fixes: 5d317b2b6536 ("mm: hugetlb: proc: add HugetlbPages field to /proc/PID/status")
    Signed-off-by: Liu Zixian <liuzixian4@huawei.com>
    Reviewed-by: Naoya Horiguchi <naoya.horiguchi@nec.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cca7b5d236a4f7fc1937dc403087f5892d64a5d6
Author: Pratik R. Sampat <psampat@linux.ibm.com>
Date:   Wed Jul 28 17:35:00 2021 +0530

    cpufreq: powernv: Fix init_chip_info initialization in numa=off
    
    commit f34ee9cb2c5ac5af426fee6fa4591a34d187e696 upstream.
    
    In the numa=off kernel command-line configuration init_chip_info() loops
    around the number of chips and attempts to copy the cpumask of that node
    which is NULL for all iterations after the first chip.
    
    Hence, store the cpu mask for each chip instead of derving cpumask from
    node while populating the "chips" struct array and copy that to the
    chips[i].mask
    
    Fixes: 053819e0bf84 ("cpufreq: powernv: Handle throttling due to Pmax capping at chip level")
    Cc: stable@vger.kernel.org # v4.3+
    Reported-by: Shirisha Ganta <shirisha.ganta1@ibm.com>
    Signed-off-by: Pratik R. Sampat <psampat@linux.ibm.com>
    Reviewed-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    [mpe: Rename goto label to out_free_chip_cpu_mask]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210728120500.87549-2-psampat@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 124e801e558f479d37784738904b568a05b1ed96
Author: Saurav Kashyap <skashyap@marvell.com>
Date:   Mon Aug 9 21:37:19 2021 -0700

    scsi: qla2xxx: Sync queue idx with queue_pair_map idx
    
    commit c8fadf019964d0eb1da410ba8b629494d3339db9 upstream.
    
    The first invocation of function find_first_zero_bit will return 0 and
    queue_id gets set to 0.
    
    An index of queue_pair_map also gets set to 0.
    
            qpair_id = find_first_zero_bit(ha->qpair_qid_map, ha->max_qpairs);
    
            set_bit(qpair_id, ha->qpair_qid_map);
            ha->queue_pair_map[qpair_id] = qpair;
    
    In the alloc_queue callback driver checks the map, if queue is already
    allocated:
    
            ha->queue_pair_map[qidx]
    
    This works fine as long as max_qpairs is greater than nvme_max_hw_queues(8)
    since the size of the queue_pair_map is equal to max_qpair. In case nr_cpus
    is less than 8, max_qpairs is less than 8. This creates wrong value
    returned as qpair.
    
    [ 1572.353669] qla2xxx [0000:24:00.3]-2121:6: Returning existing qpair of 4e00000000000000 for idx=2
    [ 1572.354458] general protection fault: 0000 [#1] SMP PTI
    [ 1572.354461] CPU: 1 PID: 44 Comm: kworker/1:1H Kdump: loaded Tainted: G          IOE    --------- -  - 4.18.0-304.el8.x86_64 #1
    [ 1572.354462] Hardware name: HP ProLiant DL380p Gen8, BIOS P70 03/01/2013
    [ 1572.354467] Workqueue: kblockd blk_mq_run_work_fn
    [ 1572.354485] RIP: 0010:qla_nvme_post_cmd+0x92/0x760 [qla2xxx]
    [ 1572.354486] Code: 84 24 5c 01 00 00 00 00 b8 0a 74 1e 66 83 79 48 00 0f 85 a8 03 00 00 48 8b 44 24 08 48 89 ee 4c 89 e7 8b 50 24 e8 5e 8e 00 00 <f0> 41 ff 47 04 0f ae f0 41 f6 47 24 04 74 19 f0 41 ff 4f 04 b8 f0
    [ 1572.354487] RSP: 0018:ffff9c81c645fc90 EFLAGS: 00010246
    [ 1572.354489] RAX: 0000000000000001 RBX: ffff8ea3e5070138 RCX: 0000000000000001
    [ 1572.354490] RDX: 0000000000000001 RSI: 0000000000000001 RDI: ffff8ea4c866b800
    [ 1572.354491] RBP: ffff8ea4c866b800 R08: 0000000000005010 R09: ffff8ea4c866b800
    [ 1572.354492] R10: 0000000000000001 R11: 000000069d1ca3ff R12: ffff8ea4bc460000
    [ 1572.354493] R13: ffff8ea3e50702b0 R14: ffff8ea4c4c16a58 R15: 4e00000000000000
    [ 1572.354494] FS:  0000000000000000(0000) GS:ffff8ea4dfd00000(0000) knlGS:0000000000000000
    [ 1572.354495] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1572.354496] CR2: 000055884504fa58 CR3: 00000005a1410001 CR4: 00000000000606e0
    [ 1572.354497] Call Trace:
    [ 1572.354503]  ? check_preempt_curr+0x62/0x90
    [ 1572.354506]  ? dma_direct_map_sg+0x72/0x1f0
    [ 1572.354509]  ? nvme_fc_start_fcp_op.part.32+0x175/0x460 [nvme_fc]
    [ 1572.354511]  ? blk_mq_dispatch_rq_list+0x11c/0x730
    [ 1572.354515]  ? __switch_to_asm+0x35/0x70
    [ 1572.354516]  ? __switch_to_asm+0x41/0x70
    [ 1572.354518]  ? __switch_to_asm+0x35/0x70
    [ 1572.354519]  ? __switch_to_asm+0x41/0x70
    [ 1572.354521]  ? __switch_to_asm+0x35/0x70
    [ 1572.354522]  ? __switch_to_asm+0x41/0x70
    [ 1572.354523]  ? __switch_to_asm+0x35/0x70
    [ 1572.354525]  ? entry_SYSCALL_64_after_hwframe+0xb9/0xca
    [ 1572.354527]  ? __switch_to_asm+0x41/0x70
    [ 1572.354529]  ? __blk_mq_sched_dispatch_requests+0xc6/0x170
    [ 1572.354531]  ? blk_mq_sched_dispatch_requests+0x30/0x60
    [ 1572.354532]  ? __blk_mq_run_hw_queue+0x51/0xd0
    [ 1572.354535]  ? process_one_work+0x1a7/0x360
    [ 1572.354537]  ? create_worker+0x1a0/0x1a0
    [ 1572.354538]  ? worker_thread+0x30/0x390
    [ 1572.354540]  ? create_worker+0x1a0/0x1a0
    [ 1572.354541]  ? kthread+0x116/0x130
    [ 1572.354543]  ? kthread_flush_work_fn+0x10/0x10
    [ 1572.354545]  ? ret_from_fork+0x35/0x40
    
    Fix is to use index 0 for admin and first IO queue.
    
    Link: https://lore.kernel.org/r/20210810043720.1137-14-njavali@marvell.com
    Fixes: e84067d74301 ("scsi: qla2xxx: Add FC-NVMe F/W initialization and transport registration")
    Cc: stable@vger.kernel.org
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Saurav Kashyap <skashyap@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33b8fcdedbde2b2a508c3d78d4bb34e4067391a0
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Tue Apr 20 20:01:47 2021 +0200

    scsi: BusLogic: Fix missing pr_cont() use
    
    commit 44d01fc86d952f5a8b8b32bdb4841504d5833d95 upstream.
    
    Update BusLogic driver's messaging system to use pr_cont() for continuation
    lines, bringing messy output:
    
    pci 0000:00:13.0: PCI->APIC IRQ transform: INT A -> IRQ 17
    scsi: ***** BusLogic SCSI Driver Version 2.1.17 of 12 September 2013 *****
    scsi: Copyright 1995-1998 by Leonard N. Zubkoff <lnz@dandelion.com>
    scsi0: Configuring BusLogic Model BT-958 PCI Wide Ultra SCSI Host Adapter
    scsi0:   Firmware Version: 5.07B, I/O Address: 0x7000, IRQ Channel: 17/Level
    scsi0:   PCI Bus: 0, Device: 19, Address:
    0xE0012000,
    Host Adapter SCSI ID: 7
    scsi0:   Parity Checking: Enabled, Extended Translation: Enabled
    scsi0:   Synchronous Negotiation: Ultra, Wide Negotiation: Enabled
    scsi0:   Disconnect/Reconnect: Enabled, Tagged Queuing: Enabled
    scsi0:   Scatter/Gather Limit: 128 of 8192 segments, Mailboxes: 211
    scsi0:   Driver Queue Depth: 211, Host Adapter Queue Depth: 192
    scsi0:   Tagged Queue Depth:
    Automatic
    , Untagged Queue Depth: 3
    scsi0:   SCSI Bus Termination: Both Enabled
    , SCAM: Disabled
    
    scsi0: *** BusLogic BT-958 Initialized Successfully ***
    scsi host0: BusLogic BT-958
    
    back to order:
    
    pci 0000:00:13.0: PCI->APIC IRQ transform: INT A -> IRQ 17
    scsi: ***** BusLogic SCSI Driver Version 2.1.17 of 12 September 2013 *****
    scsi: Copyright 1995-1998 by Leonard N. Zubkoff <lnz@dandelion.com>
    scsi0: Configuring BusLogic Model BT-958 PCI Wide Ultra SCSI Host Adapter
    scsi0:   Firmware Version: 5.07B, I/O Address: 0x7000, IRQ Channel: 17/Level
    scsi0:   PCI Bus: 0, Device: 19, Address: 0xE0012000, Host Adapter SCSI ID: 7
    scsi0:   Parity Checking: Enabled, Extended Translation: Enabled
    scsi0:   Synchronous Negotiation: Ultra, Wide Negotiation: Enabled
    scsi0:   Disconnect/Reconnect: Enabled, Tagged Queuing: Enabled
    scsi0:   Scatter/Gather Limit: 128 of 8192 segments, Mailboxes: 211
    scsi0:   Driver Queue Depth: 211, Host Adapter Queue Depth: 192
    scsi0:   Tagged Queue Depth: Automatic, Untagged Queue Depth: 3
    scsi0:   SCSI Bus Termination: Both Enabled, SCAM: Disabled
    scsi0: *** BusLogic BT-958 Initialized Successfully ***
    scsi host0: BusLogic BT-958
    
    Also diagnostic output such as with the BusLogic=TraceConfiguration
    parameter is affected and becomes vertical and therefore hard to read.
    This has now been corrected, e.g.:
    
    pci 0000:00:13.0: PCI->APIC IRQ transform: INT A -> IRQ 17
    blogic_cmd(86) Status = 30:  4 ==>  4: FF 05 93 00
    blogic_cmd(95) Status = 28: (Modify I/O Address)
    blogic_cmd(91) Status = 30:  1 ==>  1: 01
    blogic_cmd(04) Status = 30:  4 ==>  4: 41 41 35 30
    blogic_cmd(8D) Status = 30: 14 ==> 14: 45 DC 00 20 00 00 00 00 00 40 30 37 42 1D
    scsi: ***** BusLogic SCSI Driver Version 2.1.17 of 12 September 2013 *****
    scsi: Copyright 1995-1998 by Leonard N. Zubkoff <lnz@dandelion.com>
    blogic_cmd(04) Status = 30:  4 ==>  4: 41 41 35 30
    blogic_cmd(0B) Status = 30:  3 ==>  3: 00 08 07
    blogic_cmd(0D) Status = 30: 34 ==> 34: 03 01 07 04 00 00 00 00 00 00 00 00 00 00 00 00 FF 42 44 46 FF 00 00 00 00 00 00 00 00 00 FF 00 FF 00
    blogic_cmd(8D) Status = 30: 14 ==> 14: 45 DC 00 20 00 00 00 00 00 40 30 37 42 1D
    blogic_cmd(84) Status = 30:  1 ==>  1: 37
    blogic_cmd(8B) Status = 30:  5 ==>  5: 39 35 38 20 20
    blogic_cmd(85) Status = 30:  1 ==>  1: 42
    blogic_cmd(86) Status = 30:  4 ==>  4: FF 05 93 00
    blogic_cmd(91) Status = 30: 64 ==> 64: 41 46 3E 20 39 35 38 20 20 00 C4 00 04 01 07 2F 07 04 35 FF FF FF FF FF FF FF FF FF FF 01 00 FE FF 08 FF FF 00 00 00 00 00 00 00 01 00 01 00 00 FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FC
    scsi0: Configuring BusLogic Model BT-958 PCI Wide Ultra SCSI Host Adapter
    
    etc.
    
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2104201940430.44318@angie.orcam.me.uk
    Fixes: 4bcc595ccd80 ("printk: reinstate KERN_CONT for printing continuation lines")
    Cc: stable@vger.kernel.org # v4.9+
    Acked-by: Khalid Aziz <khalid@gonehiking.org>
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bc41e47e0ee05367b2efbdd95bdc2d4e7fcc164
Author: chenying <chenying.kernel@bytedance.com>
Date:   Mon Aug 16 18:02:56 2021 +0800

    ovl: fix BUG_ON() in may_delete() when called from ovl_cleanup()
    
    commit 52d5a0c6bd8a89f460243ed937856354f8f253a3 upstream.
    
    If function ovl_instantiate() returns an error, ovl_cleanup will be called
    and try to remove newdentry from wdir, but the newdentry has been moved to
    udir at this time.  This will causes BUG_ON(victim->d_parent->d_inode !=
    dir) in fs/namei.c:may_delete.
    
    Signed-off-by: chenying <chenying.kernel@bytedance.com>
    Fixes: 01b39dcc9568 ("ovl: use inode_insert5() to hash a newly created inode")
    Link: https://lore.kernel.org/linux-unionfs/e6496a94-a161-dc04-c38a-d2544633acb4@bytedance.com/
    Cc: <stable@vger.kernel.org> # v4.18
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07f2e0249db3f7bdf91633c4e04be6b11e5a8ed4
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Aug 30 05:42:27 2021 -0400

    parisc: fix crash with signals and alloca
    
    commit 030f653078316a9cc9ca6bd1b0234dcf858be35d upstream.
    
    I was debugging some crashes on parisc and I found out that there is a
    crash possibility if a function using alloca is interrupted by a signal.
    The reason for the crash is that the gcc alloca implementation leaves
    garbage in the upper 32 bits of the sp register. This normally doesn't
    matter (the upper bits are ignored because the PSW W-bit is clear),
    however the signal delivery routine in the kernel uses full 64 bits of sp
    and it fails with -EFAULT if the upper 32 bits are not zero.
    
    I created this program that demonstrates the problem:
    
    #include <stdlib.h>
    #include <unistd.h>
    #include <signal.h>
    #include <alloca.h>
    
    static __attribute__((noinline,noclone)) void aa(int *size)
    {
            void * volatile p = alloca(-*size);
            while (1) ;
    }
    
    static void handler(int sig)
    {
            write(1, "signal delivered\n", 17);
            _exit(0);
    }
    
    int main(void)
    {
            int size = -0x100;
            signal(SIGALRM, handler);
            alarm(1);
            aa(&size);
    }
    
    If you compile it with optimizations, it will crash.
    The "aa" function has this disassembly:
    
    000106a0 <aa>:
       106a0:       08 03 02 41     copy r3,r1
       106a4:       08 1e 02 43     copy sp,r3
       106a8:       6f c1 00 80     stw,ma r1,40(sp)
       106ac:       37 dc 3f c1     ldo -20(sp),ret0
       106b0:       0c 7c 12 90     stw ret0,8(r3)
       106b4:       0f 40 10 9c     ldw 0(r26),ret0         ; ret0 = 0x00000000FFFFFF00
       106b8:       97 9c 00 7e     subi 3f,ret0,ret0       ; ret0 = 0xFFFFFFFF0000013F
       106bc:       d7 80 1c 1a     depwi 0,31,6,ret0       ; ret0 = 0xFFFFFFFF00000100
       106c0:       0b 9e 0a 1e     add,l sp,ret0,sp        ;   sp = 0xFFFFFFFFxxxxxxxx
       106c4:       e8 1f 1f f7     b,l,n 106c4 <aa+0x24>,r0
    
    This patch fixes the bug by truncating the "usp" variable to 32 bits.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cc9af2dffee3ba20d17a91d22acbc9b6488e5af
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Aug 31 16:40:18 2021 +0800

    net: w5100: check return value after calling platform_get_resource()
    
    [ Upstream commit a39ff4a47f3e1da3b036817ef436b1a9be10783a ]
    
    It will cause null-ptr-deref if platform_get_resource() returns NULL,
    we need check the return value.
    
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c97090607058f516880f60733b4302c695385a8b
Author: 王贇 <yun.wang@linux.alibaba.com>
Date:   Mon Aug 30 18:28:01 2021 +0800

    net: fix NULL pointer reference in cipso_v4_doi_free
    
    [ Upstream commit 733c99ee8be9a1410287cdbb943887365e83b2d6 ]
    
    In netlbl_cipsov4_add_std() when 'doi_def->map.std' alloc
    failed, we sometime observe panic:
    
      BUG: kernel NULL pointer dereference, address:
      ...
      RIP: 0010:cipso_v4_doi_free+0x3a/0x80
      ...
      Call Trace:
       netlbl_cipsov4_add_std+0xf4/0x8c0
       netlbl_cipsov4_add+0x13f/0x1b0
       genl_family_rcv_msg_doit.isra.15+0x132/0x170
       genl_rcv_msg+0x125/0x240
    
    This is because in cipso_v4_doi_free() there is no check
    on 'doi_def->map.std' when 'doi_def->type' equal 1, which
    is possibe, since netlbl_cipsov4_add_std() haven't initialize
    it before alloc 'doi_def->map.std'.
    
    This patch just add the check to prevent panic happen for similar
    cases.
    
    Reported-by: Abaci <abaci@linux.alibaba.com>
    Signed-off-by: Michael Wang <yun.wang@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fc679d00942dab627e22602cd86a4e2e71c2e0c
Author: Miaoqing Pan <miaoqing@codeaurora.org>
Date:   Mon Aug 9 12:05:16 2021 +0800

    ath9k: fix sleeping in atomic context
    
    [ Upstream commit 7c48662b9d56666219f526a71ace8c15e6e12f1f ]
    
    The problem is that gpio_free() can sleep and the cfg_soc() can be
    called with spinlocks held. One problematic call tree is:
    
    --> ath_reset_internal() takes &sc->sc_pcu_lock spin lock
       --> ath9k_hw_reset()
          --> ath9k_hw_gpio_request_in()
             --> ath9k_hw_gpio_request()
                --> ath9k_hw_gpio_cfg_soc()
    
    Remove gpio_free(), use error message instead, so we should make sure
    there is no GPIO conflict.
    
    Also remove ath9k_hw_gpio_free() from ath9k_hw_apply_gpio_override(),
    as gpio_mask will never be set for SOC chips.
    
    Signed-off-by: Miaoqing Pan <miaoqing@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1628481916-15030-1-git-send-email-miaoqing@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a1cb9e6c3d30c430052b6636a3cc1a5c6cda1be
Author: Zekun Shen <bruceshenzk@gmail.com>
Date:   Sat Jun 19 09:29:14 2021 -0400

    ath9k: fix OOB read ar9300_eeprom_restore_internal
    
    [ Upstream commit 23151b9ae79e3bc4f6a0c4cd3a7f355f68dad128 ]
    
    Bad header can have large length field which can cause OOB.
    cptr is the last bytes for read, and the eeprom is parsed
    from high to low address. The OOB, triggered by the condition
    length > cptr could cause memory error with a read on
    negative index.
    
    There are some sanity check around length, but it is not
    compared with cptr (the remaining bytes). Here, the
    corrupted/bad EEPROM can cause panic.
    
    I was able to reproduce the crash, but I cannot find the
    log and the reproducer now. After I applied the patch, the
    bug is no longer reproducible.
    
    Signed-off-by: Zekun Shen <bruceshenzk@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/YM3xKsQJ0Hw2hjrc@Zekuns-MBP-16.fios-router.home
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d84d3b7ffbcd7ee6ee22c8aff51e5d9d751ec478
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Jul 30 11:07:10 2021 +0100

    parport: remove non-zero check on count
    
    [ Upstream commit 0be883a0d795d9146f5325de582584147dd0dcdc ]
    
    The check for count appears to be incorrect since a non-zero count
    check occurs a couple of statements earlier. Currently the check is
    always false and the dev->port->irq != PARPORT_IRQ_NONE part of the
    check is never tested and the if statement is dead-code. Fix this
    by removing the check on count.
    
    Note that this code is pre-git history, so I can't find a sha for
    it.
    
    Acked-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Addresses-Coverity: ("Logically dead code")
    Link: https://lore.kernel.org/r/20210730100710.27405-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b44a56ce5f3a1a6e4af993c2997e2f462d327e5
Author: Xiaotan Luo <lxt@rock-chips.com>
Date:   Thu Aug 26 12:02:36 2021 +0800

    ASoC: rockchip: i2s: Fixup config for DAIFMT_DSP_A/B
    
    [ Upstream commit 1bf56843e664eef2525bdbfae6a561e98910f676 ]
    
    - DSP_A: PCM delay 1 bit mode, L data MSB after FRM LRC
    - DSP_B: PCM no delay mode, L data MSB during FRM LRC
    
    Signed-off-by: Xiaotan Luo <lxt@rock-chips.com>
    Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
    Link: https://lore.kernel.org/r/1629950562-14281-3-git-send-email-sugar.zhang@rock-chips.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34a2e6704d55cec79c81bc84b8494430821db01f
Author: Sugar Zhang <sugar.zhang@rock-chips.com>
Date:   Thu Aug 26 12:01:50 2021 +0800

    ASoC: rockchip: i2s: Fix regmap_ops hang
    
    [ Upstream commit 53ca9b9777b95cdd689181d7c547e38dc79adad0 ]
    
    API 'set_fmt' maybe called when PD is off, in the situation,
    any register access will hang the system. so, enable PD
    before r/w register.
    
    Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
    Link: https://lore.kernel.org/r/1629950520-14190-4-git-send-email-sugar.zhang@rock-chips.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4bc9fa125d54ee68faac3dfbdfd6b8f845a9f97
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Thu Aug 19 16:59:37 2021 -0600

    usbip:vhci_hcd USB port can get stuck in the disabled state
    
    [ Upstream commit 66cce9e73ec61967ed1f97f30cee79bd9a2bb7ee ]
    
    When a remote usb device is attached to the local Virtual USB
    Host Controller Root Hub port, the bound device driver may send
    a port reset command.
    
    vhci_hcd accepts port resets only when the device doesn't have
    port address assigned to it. When reset happens device is in
    assigned/used state and vhci_hcd rejects it leaving the port in
    a stuck state.
    
    This problem was found when a blue-tooth or xbox wireless dongle
    was passed through using usbip.
    
    A few drivers reset the port during probe including mt76 driver
    specific to this bug report. Fix the problem with a change to
    honor reset requests when device is in used state (VDEV_ST_USED).
    
    Reported-and-tested-by: Michael <msbroadf@gmail.com>
    Suggested-by: Michael <msbroadf@gmail.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20210819225937.41037-1-skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3882c11a9b87d730fed84b1a4818c4f51ec61b96
Author: Anirudh Rayabharam <mail@anirudhrb.com>
Date:   Sat Aug 21 00:31:21 2021 +0530

    usbip: give back URBs for unsent unlink requests during cleanup
    
    [ Upstream commit 258c81b341c8025d79073ce2d6ce19dcdc7d10d2 ]
    
    In vhci_device_unlink_cleanup(), the URBs for unsent unlink requests are
    not given back. This sometimes causes usb_kill_urb to wait indefinitely
    for that urb to be given back. syzbot has reported a hung task issue [1]
    for this.
    
    To fix this, give back the urbs corresponding to unsent unlink requests
    (unlink_tx list) similar to how urbs corresponding to unanswered unlink
    requests (unlink_rx list) are given back.
    
    [1]: https://syzkaller.appspot.com/bug?id=08f12df95ae7da69814e64eb5515d5a85ed06b76
    
    Reported-by: syzbot+74d6ef051d3d2eacf428@syzkaller.appspotmail.com
    Tested-by: syzbot+74d6ef051d3d2eacf428@syzkaller.appspotmail.com
    Reviewed-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Anirudh Rayabharam <mail@anirudhrb.com>
    Link: https://lore.kernel.org/r/20210820190122.16379-2-mail@anirudhrb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffc825049ed2e8c849d318e987fd5073e0be462f
Author: Nadezda Lutovinova <lutovinova@ispras.ru>
Date:   Thu Aug 19 19:33:23 2021 +0300

    usb: musb: musb_dsps: request_irq() after initializing musb
    
    [ Upstream commit 7c75bde329d7e2a93cf86a5c15c61f96f1446cdc ]
    
    If IRQ occurs between calling  dsps_setup_optional_vbus_irq()
    and  dsps_create_musb_pdev(), then null pointer dereference occurs
    since glue->musb wasn't initialized yet.
    
    The patch puts initializing of neccesery data before registration
    of the interrupt handler.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Nadezda Lutovinova <lutovinova@ispras.ru>
    Link: https://lore.kernel.org/r/20210819163323.17714-1-lutovinova@ispras.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0ce526fd5f150dd0ba473384461813a040b1015
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Aug 20 15:35:01 2021 +0300

    Revert "USB: xhci: fix U1/U2 handling for hardware with XHCI_INTEL_HOST quirk set"
    
    [ Upstream commit 2847c46c61486fd8bca9136a6e27177212e78c69 ]
    
    This reverts commit 5d5323a6f3625f101dbfa94ba3ef7706cce38760.
    
    That commit effectively disabled Intel host initiated U1/U2 lpm for devices
    with periodic endpoints.
    
    Before that commit we disabled host initiated U1/U2 lpm if the exit latency
    was larger than any periodic endpoint service interval, this is according
    to xhci spec xhci 1.1 specification section 4.23.5.2
    
    After that commit we incorrectly checked that service interval was smaller
    than U1/U2 inactivity timeout. This is not relevant, and can't happen for
    Intel hosts as previously set U1/U2 timeout = 105% * service interval.
    
    Patch claimed it solved cases where devices can't be enumerated because of
    bandwidth issues. This might be true but it's a side effect of accidentally
    turning off lpm.
    
    exit latency calculations have been revised since then
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210820123503.2605901-5-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c409595b46bc405e9d4761d449d9307e009fc6f
Author: Ding Hui <dinghui@sangfor.com.cn>
Date:   Tue Aug 17 22:55:10 2021 +0800

    cifs: fix wrong release in sess_alloc_buffer() failed path
    
    [ Upstream commit d72c74197b70bc3c95152f351a568007bffa3e11 ]
    
    smb_buf is allocated by small_smb_init_no_tc(), and buf type is
    CIFS_SMALL_BUFFER, so we should use cifs_small_buf_release() to
    release it in failed path.
    
    Signed-off-by: Ding Hui <dinghui@sangfor.com.cn>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61eb990afb7da629e69e0ac3ec8cdfad97152443
Author: Nishad Kamdar <nishadkamdar@gmail.com>
Date:   Wed Aug 25 00:47:26 2021 +0530

    mmc: core: Return correct emmc response in case of ioctl error
    
    [ Upstream commit e72a55f2e5ddcfb3dce0701caf925ce435b87682 ]
    
    When a read/write command is sent via ioctl to the kernel,
    and the command fails, the actual error response of the emmc
    is not sent to the user.
    
    IOCTL read/write tests are carried out using commands
    17 (Single BLock Read), 24 (Single Block Write),
    18 (Multi Block Read), 25 (Multi Block Write)
    
    The tests are carried out on a 64Gb emmc device. All of these
    tests try to access an "out of range" sector address (0x09B2FFFF).
    
    It is seen that without the patch the response received by the user
    is not OUT_OF_RANGE error (R1 response 31st bit is not set) as per
    JEDEC specification. After applying the patch proper response is seen.
    This is because the function returns without copying the response to
    the user in case of failure. This patch fixes the issue.
    
    Hence, this memcpy is required whether we get an error response or not.
    Therefor it is moved up from the current position up to immediately
    after we have called mmc_wait_for_req().
    
    The test code and the output of only the CMD17 is included in the
    commit to limit the message length.
    
    CMD17 (Test Code Snippet):
    ==========================
            printf("Forming CMD%d\n", opt_idx);
            /*  single block read */
            cmd.blksz = 512;
            cmd.blocks = 1;
            cmd.write_flag = 0;
            cmd.opcode = 17;
            //cmd.arg = atoi(argv[3]);
            cmd.arg = 0x09B2FFFF;
            /* Expecting response R1B */
            cmd.flags = MMC_RSP_SPI_R1 | MMC_RSP_R1 | MMC_CMD_ADTC;
    
            memset(data, 0, sizeof(__u8) * 512);
            mmc_ioc_cmd_set_data(cmd, data);
    
            printf("Sending CMD%d: ARG[0x%08x]\n", opt_idx, cmd.arg);
            if(ioctl(fd, MMC_IOC_CMD, &cmd))
                    perror("Error");
    
            printf("\nResponse: %08x\n", cmd.response[0]);
    
    CMD17 (Output without patch):
    =============================
    test@test-LIVA-Z:~$ sudo ./mmc cmd_test /dev/mmcblk0 17
    Entering the do_mmc_commands:Device: /dev/mmcblk0 nargs:4
    Entering the do_mmc_commands:Device: /dev/mmcblk0 options[17, 0x09B2FFF]
    Forming CMD17
    Sending CMD17: ARG[0x09b2ffff]
    Error: Connection timed out
    
    Response: 00000000
    (Incorrect response)
    
    CMD17 (Output with patch):
    ==========================
    test@test-LIVA-Z:~$ sudo ./mmc cmd_test /dev/mmcblk0 17
    [sudo] password for test:
    Entering the do_mmc_commands:Device: /dev/mmcblk0 nargs:4
    Entering the do_mmc_commands:Device: /dev/mmcblk0 options[17, 09B2FFFF]
    Forming CMD17
    Sending CMD17: ARG[0x09b2ffff]
    Error: Connection timed out
    
    Response: 80000900
    (Correct OUT_OF_ERROR response as per JEDEC specification)
    
    Signed-off-by: Nishad Kamdar <nishadkamdar@gmail.com>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Link: https://lore.kernel.org/r/20210824191726.8296-1-nishadkamdar@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c48bd3aa1a33cb3e8a0eca8330b8f100f43d895
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Fri Aug 20 09:55:53 2021 +0800

    selftests/bpf: Enlarge select() timeout for test_maps
    
    [ Upstream commit 2d82d73da35b72b53fe0d96350a2b8d929d07e42 ]
    
    0Day robot observed that it's easily timeout on a heavy load host.
    -------------------
     # selftests: bpf: test_maps
     # Fork 1024 tasks to 'test_update_delete'
     # Fork 1024 tasks to 'test_update_delete'
     # Fork 100 tasks to 'test_hashmap'
     # Fork 100 tasks to 'test_hashmap_percpu'
     # Fork 100 tasks to 'test_hashmap_sizes'
     # Fork 100 tasks to 'test_hashmap_walk'
     # Fork 100 tasks to 'test_arraymap'
     # Fork 100 tasks to 'test_arraymap_percpu'
     # Failed sockmap unexpected timeout
     not ok 3 selftests: bpf: test_maps # exit=1
     # selftests: bpf: test_lru_map
     # nr_cpus:8
    -------------------
    Since this test will be scheduled by 0Day to a random host that could have
    only a few cpus(2-8), enlarge the timeout to avoid a false NG report.
    
    In practice, i tried to pin it to only one cpu by 'taskset 0x01 ./test_maps',
    and knew 10S is likely enough, but i still perfer to a larger value 30.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/bpf/20210820015556.23276-2-lizhijian@cn.fujitsu.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0435c88ee82781cafcb7328f14d847aa7f3b247
Author: Thomas Hebb <tommyhebb@gmail.com>
Date:   Sun Aug 1 04:46:14 2021 -0700

    mmc: rtsx_pci: Fix long reads when clock is prescaled
    
    [ Upstream commit 3ac5e45291f3f0d699a721357380d4593bc2dcb3 ]
    
    For unexplained reasons, the prescaler register for this device needs to
    be cleared (set to 1) while performing a data read or else the command
    will hang. This does not appear to affect the real clock rate sent out
    on the bus, so I assume it's purely to work around a hardware bug.
    
    During normal operation, the prescaler is already set to 1, so nothing
    needs to be done. However, in "initial mode" (which is used for sub-MHz
    clock speeds, like the core sets while enumerating cards), it's set to
    128 and so we need to reset it during data reads. We currently fail to
    do this for long reads.
    
    This has no functional affect on the driver's operation currently
    written, as the MMC core always sets a clock above 1MHz before
    attempting any long reads. However, the core could conceivably set any
    clock speed at any time and the driver should still work, so I think
    this fix is worthwhile.
    
    I personally encountered this issue while performing data recovery on an
    external chip. My connections had poor signal integrity, so I modified
    the core code to reduce the clock speed. Without this change, I saw the
    card enumerate but was unable to actually read any data.
    
    Writes don't seem to work in the situation described above even with
    this change (and even if the workaround is extended to encompass data
    write commands). I was not able to find a way to get them working.
    
    Signed-off-by: Thomas Hebb <tommyhebb@gmail.com>
    Link: https://lore.kernel.org/r/2fef280d8409ab0100c26c6ac7050227defd098d.1627818365.git.tommyhebb@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 039fa89907fb86ce78e6394acd06357979e973d0
Author: Manish Narani <manish.narani@xilinx.com>
Date:   Tue Jun 15 16:13:54 2021 +0530

    mmc: sdhci-of-arasan: Check return value of non-void funtions
    
    [ Upstream commit 66bad6ed2204fdb78a0a8fb89d824397106a5471 ]
    
    At a couple of places, the return values of the non-void functions were
    not getting checked. This was reported by the coverity tool. Modify the
    code to check the return values of the same.
    
    Addresses-Coverity: ("check_return")
    Signed-off-by: Manish Narani <manish.narani@xilinx.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/1623753837-21035-5-git-send-email-manish.narani@xilinx.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f3c58973177a70c9b94a3ce85375529d3cb5b3c
Author: Marc Zyngier <maz@kernel.org>
Date:   Fri Aug 20 15:47:22 2021 +0100

    of: Don't allow __of_attached_node_sysfs() without CONFIG_SYSFS
    
    [ Upstream commit 6211e9cb2f8faf7faae0b6caf844bfe9527cc607 ]
    
    Trying to boot without SYSFS, but with OF_DYNAMIC quickly
    results in a crash:
    
    [    0.088460] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000070
    [...]
    [    0.103927] CPU: 1 PID: 1 Comm: swapper/0 Not tainted 5.14.0-rc3 #4179
    [    0.105810] Hardware name: linux,dummy-virt (DT)
    [    0.107147] pstate: 80000005 (Nzcv daif -PAN -UAO -TCO BTYPE=--)
    [    0.108876] pc : kernfs_find_and_get_ns+0x3c/0x7c
    [    0.110244] lr : kernfs_find_and_get_ns+0x3c/0x7c
    [...]
    [    0.134087] Call trace:
    [    0.134800]  kernfs_find_and_get_ns+0x3c/0x7c
    [    0.136054]  safe_name+0x4c/0xd0
    [    0.136994]  __of_attach_node_sysfs+0xf8/0x124
    [    0.138287]  of_core_init+0x90/0xfc
    [    0.139296]  driver_init+0x30/0x4c
    [    0.140283]  kernel_init_freeable+0x160/0x1b8
    [    0.141543]  kernel_init+0x30/0x140
    [    0.142561]  ret_from_fork+0x10/0x18
    
    While not having sysfs isn't a very common option these days,
    it is still expected that such configuration would work.
    
    Paper over it by bailing out from __of_attach_node_sysfs() if
    CONFIG_SYSFS isn't enabled.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20210820144722.169226-1-maz@kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cff77b9827a956d076168b56775aad23bce87e4
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Jul 30 12:41:49 2021 -0500

    gfs2: Don't call dlm after protocol is unmounted
    
    [ Upstream commit d1340f80f0b8066321b499a376780da00560e857 ]
    
    In the gfs2 withdraw sequence, the dlm protocol is unmounted with a call
    to lm_unmount. After a withdraw, users are allowed to unmount the
    withdrawn file system. But at that point we may still have glocks left
    over that we need to free via unmount's call to gfs2_gl_hash_clear.
    These glocks may have never been completed because of whatever problem
    caused the withdraw (IO errors or whatever).
    
    Before this patch, function gdlm_put_lock would still try to call into
    dlm to unlock these leftover glocks, which resulted in dlm returning
    -EINVAL because the lock space was abandoned. These glocks were never
    freed because there was no mechanism after that to free them.
    
    This patch adds a check to gdlm_put_lock to see if the locking protocol
    was inactive (DFL_UNMOUNT flag) and if so, free the glock and not
    make the invalid call into dlm.
    
    I could have combined this "if" with the one that follows, related to
    leftover glock LVBs, but I felt the code was more readable with its own
    if clause.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee50ef36711d75186a616a14bc0c05a139e649da
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Aug 17 21:42:52 2021 -0700

    staging: rts5208: Fix get_ms_information() heap buffer size
    
    [ Upstream commit cbe34165cc1b7d1110b268ba8b9f30843c941639 ]
    
    Fix buf allocation size (it needs to be 2 bytes larger). Found when
    __alloc_size() annotations were added to kmalloc() interfaces.
    
    In file included from ./include/linux/string.h:253,
                     from ./include/linux/bitmap.h:10,
                     from ./include/linux/cpumask.h:12,
                     from ./arch/x86/include/asm/paravirt.h:17,
                     from ./arch/x86/include/asm/irqflags.h:63,
                     from ./include/linux/irqflags.h:16,
                     from ./include/linux/rcupdate.h:26,
                     from ./include/linux/rculist.h:11,
                     from ./include/linux/pid.h:5,
                     from ./include/linux/sched.h:14,
                     from ./include/linux/blkdev.h:5,
                     from drivers/staging/rts5208/rtsx_scsi.c:12:
    In function 'get_ms_information',
        inlined from 'ms_sp_cmnd' at drivers/staging/rts5208/rtsx_scsi.c:2877:12,
        inlined from 'rtsx_scsi_handler' at drivers/staging/rts5208/rtsx_scsi.c:3247:12:
    ./include/linux/fortify-string.h:54:29: warning: '__builtin_memcpy' forming offset [106, 107] is out
     of the bounds [0, 106] [-Warray-bounds]
       54 | #define __underlying_memcpy __builtin_memcpy
          |                             ^
    ./include/linux/fortify-string.h:417:2: note: in expansion of macro '__underlying_memcpy'
      417 |  __underlying_##op(p, q, __fortify_size);   \
          |  ^~~~~~~~~~~~~
    ./include/linux/fortify-string.h:463:26: note: in expansion of macro '__fortify_memcpy_chk'
      463 | #define memcpy(p, q, s)  __fortify_memcpy_chk(p, q, s,   \
          |                          ^~~~~~~~~~~~~~~~~~~~
    drivers/staging/rts5208/rtsx_scsi.c:2851:3: note: in expansion of macro 'memcpy'
     2851 |   memcpy(buf + i, ms_card->raw_sys_info, 96);
          |   ^~~~~~
    
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: linux-staging@lists.linux.dev
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20210818044252.1533634-1-keescook@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3dbfde73fb4635c8aab6121309617f99fd114350
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Aug 12 16:41:42 2021 -0400

    rpc: fix gss_svc_init cleanup on failure
    
    [ Upstream commit 5a4753446253a427c0ff1e433b9c4933e5af207c ]
    
    The failure case here should be rare, but it's obviously wrong.
    
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b0d36222fd99ffb077a7fb5bbc3a5902191e5cc
Author: Luke Hsiao <lukehsiao@google.com>
Date:   Mon Aug 16 20:51:06 2021 +0000

    tcp: enable data-less, empty-cookie SYN with TFO_SERVER_COOKIE_NOT_REQD
    
    [ Upstream commit e3faa49bcecdfcc80e94dd75709d6acb1a5d89f6 ]
    
    Since the original TFO server code was implemented in commit
    168a8f58059a22feb9e9a2dcc1b8053dbbbc12ef ("tcp: TCP Fast Open Server -
    main code path") the TFO server code has supported the sysctl bit flag
    TFO_SERVER_COOKIE_NOT_REQD. Currently, when the TFO_SERVER_ENABLE and
    TFO_SERVER_COOKIE_NOT_REQD sysctl bit flags are set, a server connection
    will accept a SYN with N bytes of data (N > 0) that has no TFO cookie,
    create a new fast open connection, process the incoming data in the SYN,
    and make the connection ready for accepting. After accepting, the
    connection is ready for read()/recvmsg() to read the N bytes of data in
    the SYN, ready for write()/sendmsg() calls and data transmissions to
    transmit data.
    
    This commit changes an edge case in this feature by changing this
    behavior to apply to (N >= 0) bytes of data in the SYN rather than only
    (N > 0) bytes of data in the SYN. Now, a server will accept a data-less
    SYN without a TFO cookie if TFO_SERVER_COOKIE_NOT_REQD is set.
    
    Caveat! While this enables a new kind of TFO (data-less empty-cookie
    SYN), some firewall rules setup may not work if they assume such packets
    are not legit TFOs and will filter them.
    
    Signed-off-by: Luke Hsiao <lukehsiao@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20210816205105.2533289-1-luke.w.hsiao@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5595ae08d6c23505b090f8eb3e8ef0270aa8c1c5
Author: Ulrich Hecht <uli+renesas@fpond.eu>
Date:   Mon Aug 16 18:22:01 2021 +0200

    serial: sh-sci: fix break handling for sysrq
    
    [ Upstream commit 87b8061bad9bd4b549b2daf36ffbaa57be2789a2 ]
    
    This fixes two issues that cause the sysrq sequence to be inadvertently
    aborted on SCIF serial consoles:
    
    - a NUL character remains in the RX queue after a break has been detected,
      which is then passed on to uart_handle_sysrq_char()
    - the break interrupt is handled twice on controllers with multiplexed ERI
      and BRI interrupts
    
    Signed-off-by: Ulrich Hecht <uli+renesas@fpond.eu>
    Link: https://lore.kernel.org/r/20210816162201.28801-1-uli+renesas@fpond.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3dde8baefcececdd6f6369ea3e91d8e6ed15cd66
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Wed Aug 11 16:20:15 2021 -0700

    Bluetooth: Fix handling of LE Enhanced Connection Complete
    
    [ Upstream commit cafae4cd625502f65d1798659c1aa9b62d38cc56 ]
    
    LE Enhanced Connection Complete contains the Local RPA used in the
    connection which must be used when set otherwise there could problems
    when pairing since the address used by the remote stack could be the
    Local RPA:
    
    BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 4, Part E
    page 2396
    
      'Resolvable Private Address being used by the local device for this
      connection. This is only valid when the Own_Address_Type (from the
      HCI_LE_Create_Connection, HCI_LE_Set_Advertising_Parameters,
      HCI_LE_Set_Extended_Advertising_Parameters, or
      HCI_LE_Extended_Create_Connection commands) is set to 0x02 or
      0x03, and the Controller generated a resolvable private address for the
      local device using a non-zero local IRK. For other Own_Address_Type
      values, the Controller shall return all zeros.'
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b80cfef360839ccccf70a2813efc464bdb2b8664
Author: Andreas Obergschwandtner <andreas.obergschwandtner@gmail.com>
Date:   Thu Jul 29 16:42:26 2021 +0200

    ARM: tegra: tamonten: Fix UART pad setting
    
    [ Upstream commit 2270ad2f4e123336af685ecedd1618701cb4ca1e ]
    
    This patch fixes the tristate and pullup configuration for UART 1 to 3
    on the Tamonten SOM.
    
    Signed-off-by: Andreas Obergschwandtner <andreas.obergschwandtner@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 563db83b10ec3dbd66fdd44bcb3f80f0fc6689f2
Author: Tuo Li <islituo@gmail.com>
Date:   Wed Aug 11 04:34:58 2021 -0700

    gpu: drm: amd: amdgpu: amdgpu_i2c: fix possible uninitialized-variable access in amdgpu_i2c_router_select_ddc_port()
    
    [ Upstream commit a211260c34cfadc6068fece8c9e99e0fe1e2a2b6 ]
    
    The variable val is declared without initialization, and its address is
    passed to amdgpu_i2c_get_byte(). In this function, the value of val is
    accessed in:
      DRM_DEBUG("i2c 0x%02x 0x%02x read failed\n",
           addr, *val);
    
    Also, when amdgpu_i2c_get_byte() returns, val may remain uninitialized,
    but it is accessed in:
      val &= ~amdgpu_connector->router.ddc_mux_control_pin;
    
    To fix this possible uninitialized-variable access, initialize val to 0 in
    amdgpu_i2c_router_select_ddc_port().
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Tuo Li <islituo@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f7b869c1b44108a8cbf3e4a763ddac9df548d73
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Tue Aug 10 12:14:06 2021 +0800

    Bluetooth: avoid circular locks in sco_sock_connect
    
    [ Upstream commit 734bc5ff783115aa3164f4e9dd5967ae78e0a8ab ]
    
    In a future patch, calls to bh_lock_sock in sco.c should be replaced
    by lock_sock now that none of the functions are run in IRQ context.
    
    However, doing so results in a circular locking dependency:
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.14.0-rc4-syzkaller #0 Not tainted
    ------------------------------------------------------
    syz-executor.2/14867 is trying to acquire lock:
    ffff88803e3c1120 (sk_lock-AF_BLUETOOTH-BTPROTO_SCO){+.+.}-{0:0}, at:
    lock_sock include/net/sock.h:1613 [inline]
    ffff88803e3c1120 (sk_lock-AF_BLUETOOTH-BTPROTO_SCO){+.+.}-{0:0}, at:
    sco_conn_del+0x12a/0x2a0 net/bluetooth/sco.c:191
    
    but task is already holding lock:
    ffffffff8d2dc7c8 (hci_cb_list_lock){+.+.}-{3:3}, at:
    hci_disconn_cfm include/net/bluetooth/hci_core.h:1497 [inline]
    ffffffff8d2dc7c8 (hci_cb_list_lock){+.+.}-{3:3}, at:
    hci_conn_hash_flush+0xda/0x260 net/bluetooth/hci_conn.c:1608
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #2 (hci_cb_list_lock){+.+.}-{3:3}:
           __mutex_lock_common kernel/locking/mutex.c:959 [inline]
           __mutex_lock+0x12a/0x10a0 kernel/locking/mutex.c:1104
           hci_connect_cfm include/net/bluetooth/hci_core.h:1482 [inline]
           hci_remote_features_evt net/bluetooth/hci_event.c:3263 [inline]
           hci_event_packet+0x2f4d/0x7c50 net/bluetooth/hci_event.c:6240
           hci_rx_work+0x4f8/0xd30 net/bluetooth/hci_core.c:5122
           process_one_work+0x98d/0x1630 kernel/workqueue.c:2276
           worker_thread+0x658/0x11f0 kernel/workqueue.c:2422
           kthread+0x3e5/0x4d0 kernel/kthread.c:319
           ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295
    
    -> #1 (&hdev->lock){+.+.}-{3:3}:
           __mutex_lock_common kernel/locking/mutex.c:959 [inline]
           __mutex_lock+0x12a/0x10a0 kernel/locking/mutex.c:1104
           sco_connect net/bluetooth/sco.c:245 [inline]
           sco_sock_connect+0x227/0xa10 net/bluetooth/sco.c:601
           __sys_connect_file+0x155/0x1a0 net/socket.c:1879
           __sys_connect+0x161/0x190 net/socket.c:1896
           __do_sys_connect net/socket.c:1906 [inline]
           __se_sys_connect net/socket.c:1903 [inline]
           __x64_sys_connect+0x6f/0xb0 net/socket.c:1903
           do_syscall_x64 arch/x86/entry/common.c:50 [inline]
           do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
           entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    -> #0 (sk_lock-AF_BLUETOOTH-BTPROTO_SCO){+.+.}-{0:0}:
           check_prev_add kernel/locking/lockdep.c:3051 [inline]
           check_prevs_add kernel/locking/lockdep.c:3174 [inline]
           validate_chain kernel/locking/lockdep.c:3789 [inline]
           __lock_acquire+0x2a07/0x54a0 kernel/locking/lockdep.c:5015
           lock_acquire kernel/locking/lockdep.c:5625 [inline]
           lock_acquire+0x1ab/0x510 kernel/locking/lockdep.c:5590
           lock_sock_nested+0xca/0x120 net/core/sock.c:3170
           lock_sock include/net/sock.h:1613 [inline]
           sco_conn_del+0x12a/0x2a0 net/bluetooth/sco.c:191
           sco_disconn_cfm+0x71/0xb0 net/bluetooth/sco.c:1202
           hci_disconn_cfm include/net/bluetooth/hci_core.h:1500 [inline]
           hci_conn_hash_flush+0x127/0x260 net/bluetooth/hci_conn.c:1608
           hci_dev_do_close+0x528/0x1130 net/bluetooth/hci_core.c:1778
           hci_unregister_dev+0x1c0/0x5a0 net/bluetooth/hci_core.c:4015
           vhci_release+0x70/0xe0 drivers/bluetooth/hci_vhci.c:340
           __fput+0x288/0x920 fs/file_table.c:280
           task_work_run+0xdd/0x1a0 kernel/task_work.c:164
           exit_task_work include/linux/task_work.h:32 [inline]
           do_exit+0xbd4/0x2a60 kernel/exit.c:825
           do_group_exit+0x125/0x310 kernel/exit.c:922
           get_signal+0x47f/0x2160 kernel/signal.c:2808
           arch_do_signal_or_restart+0x2a9/0x1c40 arch/x86/kernel/signal.c:865
           handle_signal_work kernel/entry/common.c:148 [inline]
           exit_to_user_mode_loop kernel/entry/common.c:172 [inline]
           exit_to_user_mode_prepare+0x17d/0x290 kernel/entry/common.c:209
           __syscall_exit_to_user_mode_work kernel/entry/common.c:291 [inline]
           syscall_exit_to_user_mode+0x19/0x60 kernel/entry/common.c:302
           ret_from_fork+0x15/0x30 arch/x86/entry/entry_64.S:288
    
    other info that might help us debug this:
    
    Chain exists of:
      sk_lock-AF_BLUETOOTH-BTPROTO_SCO --> &hdev->lock --> hci_cb_list_lock
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(hci_cb_list_lock);
                                   lock(&hdev->lock);
                                   lock(hci_cb_list_lock);
      lock(sk_lock-AF_BLUETOOTH-BTPROTO_SCO);
    
     *** DEADLOCK ***
    
    The issue is that the lock hierarchy should go from &hdev->lock -->
    hci_cb_list_lock --> sk_lock-AF_BLUETOOTH-BTPROTO_SCO. For example,
    one such call trace is:
    
      hci_dev_do_close():
        hci_dev_lock();
        hci_conn_hash_flush():
          hci_disconn_cfm():
            mutex_lock(&hci_cb_list_lock);
            sco_disconn_cfm():
            sco_conn_del():
              lock_sock(sk);
    
    However, in sco_sock_connect, we call lock_sock before calling
    hci_dev_lock inside sco_connect, thus inverting the lock hierarchy.
    
    We fix this by pulling the call to hci_dev_lock out from sco_connect.
    
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48669c81a65628ef234cbdd91b9395952c7c27fe
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Tue Aug 10 12:14:05 2021 +0800

    Bluetooth: schedule SCO timeouts with delayed_work
    
    [ Upstream commit ba316be1b6a00db7126ed9a39f9bee434a508043 ]
    
    struct sock.sk_timer should be used as a sock cleanup timer. However,
    SCO uses it to implement sock timeouts.
    
    This causes issues because struct sock.sk_timer's callback is run in
    an IRQ context, and the timer callback function sco_sock_timeout takes
    a spin lock on the socket. However, other functions such as
    sco_conn_del and sco_conn_ready take the spin lock with interrupts
    enabled.
    
    This inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} lock usage could
    lead to deadlocks as reported by Syzbot [1]:
           CPU0
           ----
      lock(slock-AF_BLUETOOTH-BTPROTO_SCO);
      <Interrupt>
        lock(slock-AF_BLUETOOTH-BTPROTO_SCO);
    
    To fix this, we use delayed work to implement SCO sock timouts
    instead. This allows us to avoid taking the spin lock on the socket in
    an IRQ context, and corrects the misuse of struct sock.sk_timer.
    
    As a note, cancel_delayed_work is used instead of
    cancel_delayed_work_sync in sco_sock_set_timer and
    sco_sock_clear_timer to avoid a deadlock. In the future, the call to
    bh_lock_sock inside sco_sock_timeout should be changed to lock_sock to
    synchronize with other functions using lock_sock. However, since
    sco_sock_set_timer and sco_sock_clear_timer are sometimes called under
    the locked socket (in sco_connect and __sco_sock_close),
    cancel_delayed_work_sync might cause them to sleep until an
    sco_sock_timeout that has started finishes running. But
    sco_sock_timeout would also sleep until it can grab the lock_sock.
    
    Using cancel_delayed_work is fine because sco_sock_timeout does not
    change from run to run, hence there is no functional difference
    between:
    1. waiting for a timeout to finish running before scheduling another
    timeout
    2. scheduling another timeout while a timeout is running.
    
    Link: https://syzkaller.appspot.com/bug?id=9089d89de0502e120f234ca0fc8a703f7368b31e [1]
    Reported-by: syzbot+2f6d7c28bb4bf7e82060@syzkaller.appspotmail.com
    Tested-by: syzbot+2f6d7c28bb4bf7e82060@syzkaller.appspotmail.com
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aca58859ee7254f195745d98f33192a008427835
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Aug 6 12:13:40 2021 -0700

    net: ethernet: stmmac: Do not use unreachable() in ipq806x_gmac_probe()
    
    [ Upstream commit 4367355dd90942a71641c98c40c74589c9bddf90 ]
    
    When compiling with clang in certain configurations, an objtool warning
    appears:
    
    drivers/net/ethernet/stmicro/stmmac/dwmac-ipq806x.o: warning: objtool:
    ipq806x_gmac_probe() falls through to next function phy_modes()
    
    This happens because the unreachable annotation in the third switch
    statement is not eliminated. The compiler should know that the first
    default case would prevent the second and third from being reached as
    the comment notes but sanitizer options can make it harder for the
    compiler to reason this out.
    
    Help the compiler out by eliminating the unreachable() annotation and
    unifying the default case error handling so that there is no objtool
    warning, the meaning of the code stays the same, and there is less
    duplication.
    
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Tested-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7c14a0ca1d5f59aa7eca0275fecfba47fbfb4bb
Author: Vinod Koul <vkoul@kernel.org>
Date:   Mon Mar 8 11:38:25 2021 +0530

    arm64: dts: qcom: sdm660: use reg value for memory node
    
    [ Upstream commit c81210e38966cfa1c784364e4035081c3227cf5b ]
    
    memory node like other node should be node@reg, which is missing in this
    case, so fix it up
    
    arch/arm64/boot/dts/qcom/ipq8074-hk01.dt.yaml: /: memory: False schema does not allow {'device_type': ['memory'], 'reg': [[0, 1073741824, 0, 536870912]]}
    
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20210308060826.3074234-18-vkoul@kernel.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0214e26442be85a054a1af8bb66db094ba26bc00
Author: Sebastian Reichel <sebastian.reichel@collabora.com>
Date:   Mon Aug 2 19:23:08 2021 +0200

    ARM: dts: imx53-ppd: Fix ACHC entry
    
    [ Upstream commit cd7cd5b716d594e27a933c12f026d4f2426d7bf4 ]
    
    PPD has only one ACHC device, which effectively is a Kinetis
    microcontroller. It has one SPI interface used for normal
    communication. Additionally it's possible to flash the device
    firmware using NXP's EzPort protocol by correctly driving a
    second chip select pin and the device reset pin.
    
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Link: https://lore.kernel.org/r/20210802172309.164365-3-sebastian.reichel@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 264b5301ced2d7c9075b60811ef786989ef97002
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Wed Jul 28 16:44:32 2021 +0200

    media: tegra-cec: Handle errors of clk_prepare_enable()
    
    [ Upstream commit 38367073c796a37a61549b1f66a71b3adb03802d ]
    
    tegra_cec_probe() and tegra_cec_resume() ignored possible errors of
    clk_prepare_enable(). The patch fixes this.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f9db592da247dea159e5546b214a63a23e49260
Author: Krzysztof Hałasa <khalasa@piap.pl>
Date:   Mon Jul 26 12:46:28 2021 +0200

    media: TDA1997x: fix tda1997x_query_dv_timings() return value
    
    [ Upstream commit 7dee1030871a48d4f3c5a74227a4b4188463479a ]
    
    Correctly propagate the tda1997x_detect_std error value.
    
    Signed-off-by: Krzysztof Hałasa <khalasa@piap.pl>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af1913c9f29581360d82ee6f201ab1be7d5e7546
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Fri Jul 23 10:22:59 2021 +0200

    media: v4l2-dv-timings.c: fix wrong condition in two for-loops
    
    [ Upstream commit 4108b3e6db31acc4c68133290bbcc87d4db905c9 ]
    
    These for-loops should test against v4l2_dv_timings_presets[i].bt.width,
    not if i < v4l2_dv_timings_presets[i].bt.width. Luckily nothing ever broke,
    since the smallest width is still a lot higher than the total number of
    presets, but it is wrong.
    
    The last item in the presets array is all 0, so the for-loop must stop
    when it reaches that sentinel.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reported-by: Krzysztof Hałasa <khalasa@piap.pl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c0307b0607e5af0a5c1525085d95069770fadcd
Author: Umang Jain <umang.jain@ideasonboard.com>
Date:   Fri Jul 23 13:22:33 2021 +0200

    media: imx258: Limit the max analogue gain to 480
    
    [ Upstream commit f809665ee75fff3f4ea8907f406a66d380aeb184 ]
    
    The range for analog gain mentioned in the datasheet is [0, 480].
    The real gain formula mentioned in the datasheet is:
    
            Gain = 512 / (512 – X)
    
    Hence, values larger than 511 clearly makes no sense. The gain
    register field is also documented to be of 9-bits in the datasheet.
    
    Certainly, it is enough to infer that, the kernel driver currently
    advertises an arbitrary analog gain max. Fix it by rectifying the
    value as per the data sheet i.e. 480.
    
    Signed-off-by: Umang Jain <umang.jain@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e07928573c48fbee4938592c6af6f86cad659576
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Fri Jul 23 13:22:32 2021 +0200

    media: imx258: Rectify mismatch of VTS value
    
    [ Upstream commit 51f93add3669f1b1f540de1cf397815afbd4c756 ]
    
    The frame_length_lines (0x0340) registers are hard-coded as follows:
    
    - 4208x3118
      frame_length_lines = 0x0c50
    
    - 2104x1560
      frame_length_lines = 0x0638
    
    - 1048x780
      frame_length_lines = 0x034c
    
    The driver exposes the V4L2_CID_VBLANK control in read-only mode and
    sets its value to vts_def - height, where vts_def is a mode-dependent
    value coming from the supported_modes array. It is set using one of
    the following macros defined in the driver:
    
      #define IMX258_VTS_30FPS                0x0c98
      #define IMX258_VTS_30FPS_2K             0x0638
      #define IMX258_VTS_30FPS_VGA            0x034c
    
    There's a clear mismatch in the value for the full resolution mode i.e.
    IMX258_VTS_30FPS. Fix it by rectifying the macro with the value set for
    the frame_length_lines register as stated above.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Umang Jain <umang.jain@ideasonboard.com>
    Reviewed-by: Bingbu Cao <bingbu.cao@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8923ac1a48f00afff8d534477315e63d025efa30
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Aug 2 16:24:56 2021 +0200

    ASoC: Intel: bytcr_rt5640: Move "Platform Clock" routes to the maps for the matching in-/output
    
    [ Upstream commit dccd1dfd0770bfd494b68d1135b4547b2c602c42 ]
    
    Move the "Platform Clock" routes for the "Internal Mic" and "Speaker"
    routes to the intmic_*_map[] / *_spk_map[] arrays.
    
    This ensures that these "Platform Clock" routes do not get added when the
    BYT_RT5640_NO_INTERNAL_MIC_MAP / BYT_RT5640_NO_SPEAKERS quirks are used.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20210802142501.991985-2-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25a35dd83627d33ff4304b656f17928efa339a09
Author: Yufeng Mo <moyufeng@huawei.com>
Date:   Fri Jul 30 10:19:11 2021 +0800

    bonding: 3ad: fix the concurrency between __bond_release_one() and bond_3ad_state_machine_handler()
    
    [ Upstream commit 220ade77452c15ecb1ab94c3f8aaeb6d033c3582 ]
    
    Some time ago, I reported a calltrace issue
    "did not find a suitable aggregator", please see[1].
    After a period of analysis and reproduction, I find
    that this problem is caused by concurrency.
    
    Before the problem occurs, the bond structure is like follows:
    
    bond0 - slaver0(eth0) - agg0.lag_ports -> port0 - port1
                          \
                            port0
          \
            slaver1(eth1) - agg1.lag_ports -> NULL
                          \
                            port1
    
    If we run 'ifenslave bond0 -d eth1', the process is like below:
    
    excuting __bond_release_one()
    |
    bond_upper_dev_unlink()[step1]
    |                       |                       |
    |                       |                       bond_3ad_lacpdu_recv()
    |                       |                       ->bond_3ad_rx_indication()
    |                       |                       spin_lock_bh()
    |                       |                       ->ad_rx_machine()
    |                       |                       ->__record_pdu()[step2]
    |                       |                       spin_unlock_bh()
    |                       |                       |
    |                       bond_3ad_state_machine_handler()
    |                       spin_lock_bh()
    |                       ->ad_port_selection_logic()
    |                       ->try to find free aggregator[step3]
    |                       ->try to find suitable aggregator[step4]
    |                       ->did not find a suitable aggregator[step5]
    |                       spin_unlock_bh()
    |                       |
    |                       |
    bond_3ad_unbind_slave() |
    spin_lock_bh()
    spin_unlock_bh()
    
    step1: already removed slaver1(eth1) from list, but port1 remains
    step2: receive a lacpdu and update port0
    step3: port0 will be removed from agg0.lag_ports. The struct is
           "agg0.lag_ports -> port1" now, and agg0 is not free. At the
               same time, slaver1/agg1 has been removed from the list by step1.
               So we can't find a free aggregator now.
    step4: can't find suitable aggregator because of step2
    step5: cause a calltrace since port->aggregator is NULL
    
    To solve this concurrency problem, put bond_upper_dev_unlink()
    after bond_3ad_unbind_slave(). In this way, we can invalid the port
    first and skip this port in bond_3ad_state_machine_handler(). This
    eliminates the situation that the slaver has been removed from the
    list but the port is still valid.
    
    [1]https://lore.kernel.org/netdev/10374.1611947473@famine/
    
    Signed-off-by: Yufeng Mo <moyufeng@huawei.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2f1874e084dba7ab08da5b7ce363ad6b871c64d
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Wed Jul 28 15:51:04 2021 +0800

    Bluetooth: skip invalid hci_sync_conn_complete_evt
    
    [ Upstream commit 92fe24a7db751b80925214ede43f8d2be792ea7b ]
    
    Syzbot reported a corrupted list in kobject_add_internal [1]. This
    happens when multiple HCI_EV_SYNC_CONN_COMPLETE event packets with
    status 0 are sent for the same HCI connection. This causes us to
    register the device more than once which corrupts the kset list.
    
    As this is forbidden behavior, we add a check for whether we're
    trying to process the same HCI_EV_SYNC_CONN_COMPLETE event multiple
    times for one connection. If that's the case, the event is invalid, so
    we report an error that the device is misbehaving, and ignore the
    packet.
    
    Link: https://syzkaller.appspot.com/bug?extid=66264bf2fd0476be7e6c [1]
    Reported-by: syzbot+66264bf2fd0476be7e6c@syzkaller.appspotmail.com
    Tested-by: syzbot+66264bf2fd0476be7e6c@syzkaller.appspotmail.com
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c26ed04be9e390cbd698a4cedcdf42780a3a659
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Jul 27 15:51:30 2021 +0300

    ata: sata_dwc_460ex: No need to call phy_exit() befre phy_init()
    
    [ Upstream commit 3ad4a31620355358316fa08fcfab37b9d6c33347 ]
    
    Last change to device managed APIs cleaned up error path to simple phy_exit()
    call, which in some cases has been executed with NULL parameter. This per se
    is not a problem, but rather logical misconception: no need to free resource
    when it's for sure has not been allocated yet. Fix the driver accordingly.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210727125130.19977-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bf1e421b903f16ddc6289d451f2d2ca7755e54f
Author: Juhee Kang <claudiajkang@gmail.com>
Date:   Tue Jul 27 04:10:55 2021 +0000

    samples: bpf: Fix tracex7 error raised on the missing argument
    
    [ Upstream commit 7d07006f05922b95518be403f08ef8437b67aa32 ]
    
    The current behavior of 'tracex7' doesn't consist with other bpf samples
    tracex{1..6}. Other samples do not require any argument to run with, but
    tracex7 should be run with btrfs device argument. (it should be executed
    with test_override_return.sh)
    
    Currently, tracex7 doesn't have any description about how to run this
    program and raises an unexpected error. And this result might be
    confusing since users might not have a hunch about how to run this
    program.
    
        // Current behavior
        # ./tracex7
        sh: 1: Syntax error: word unexpected (expecting ")")
        // Fixed behavior
        # ./tracex7
        ERROR: Run with the btrfs device argument!
    
    In order to fix this error, this commit adds logic to report a message
    and exit when running this program with a missing argument.
    
    Additionally in test_override_return.sh, there is a problem with
    multiple directory(tmpmnt) creation. So in this commit adds a line with
    removing the directory with every execution.
    
    Signed-off-by: Juhee Kang <claudiajkang@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20210727041056.23455-1-claudiajkang@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 962ee5d1ff986bbc0f0370337db32fdfc7f2e7ed
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Jul 21 10:45:11 2021 +0200

    staging: ks7010: Fix the initialization of the 'sleep_status' structure
    
    [ Upstream commit 56315e55119c0ea57e142b6efb7c31208628ad86 ]
    
    'sleep_status' has 3 atomic_t members. Initialize the 3 of them instead of
    initializing only 2 of them and setting 0 twice to the same variable.
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/d2e52a33a9beab41879551d0ae2fdfc99970adab.1626856991.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf30a0b8c6425b4d041993671475099315b55278
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jul 26 15:07:17 2021 +0200

    serial: 8250_pci: make setup_port() parameters explicitly unsigned
    
    [ Upstream commit 3a96e97ab4e835078e6f27b7e1c0947814df3841 ]
    
    The bar and offset parameters to setup_port() are used in pointer math,
    and while it would be very difficult to get them to wrap as a negative
    number, just be "safe" and make them unsigned so that static checkers do
    not trip over them unintentionally.
    
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Reported-by: Jordy Zomer <jordy@pwning.systems>
    Link: https://lore.kernel.org/r/20210726130717.2052096-1-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 546c8bc6d0d509db71557df2f3dd04dee0973c26
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Fri Jul 23 09:43:11 2021 +0200

    hvsi: don't panic on tty_register_driver failure
    
    [ Upstream commit 7ccbdcc4d08a6d7041e4849219bbb12ffa45db4c ]
    
    The alloc_tty_driver failure is handled gracefully in hvsi_init. But
    tty_register_driver is not. panic is called if that one fails.
    
    So handle the failure of tty_register_driver gracefully too. This will
    keep at least the console functional as it was enabled earlier by
    console_initcall in hvsi_console_init. Instead of shooting down the
    whole system.
    
    This means, we disable interrupts and restore hvsi_wait back to
    poll_for_state().
    
    Cc: linuxppc-dev@lists.ozlabs.org
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20210723074317.32690-3-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af4e52d6e5a00aea1b12090a609b429f15843b61
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Fri Jul 23 09:43:10 2021 +0200

    xtensa: ISS: don't panic in rs_init
    
    [ Upstream commit 23411c720052ad860b3e579ee4873511e367130a ]
    
    While alloc_tty_driver failure in rs_init would mean we have much bigger
    problem, there is no reason to panic when tty_register_driver fails
    there. It can fail for various reasons.
    
    So handle the failure gracefully. Actually handle them both while at it.
    This will make at least the console functional as it was enabled earlier
    by console_initcall in iss_console_init. Instead of shooting down the
    whole system.
    
    We move tty_port_init() after alloc_tty_driver(), so that we don't need
    to destroy the port in case the latter function fails.
    
    Cc: Chris Zankel <chris@zankel.net>
    Cc: Max Filippov <jcmvbkbc@gmail.com>
    Cc: linux-xtensa@linux-xtensa.org
    Acked-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20210723074317.32690-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23ae8901bf008bec310d5c68374a4bf7eec585fa
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Sat Jun 26 06:11:51 2021 +0200

    serial: 8250: Define RX trigger levels for OxSemi 950 devices
    
    [ Upstream commit d7aff291d069c4418285f3c8ee27b0ff67ce5998 ]
    
    Oxford Semiconductor 950 serial port devices have a 128-byte FIFO and in
    the enhanced (650) mode, which we select in `autoconfig_has_efr' with
    the ECB bit set in the EFR register, they support the receive interrupt
    trigger level selectable with FCR bits 7:6 from the set of 16, 32, 112,
    120.  This applies to the original OX16C950 discrete UART[1] as well as
    950 cores embedded into more complex devices.
    
    For these devices we set the default to 112, which sets an excessively
    high level of 112 or 7/8 of the FIFO capacity, unlike with other port
    types where we choose at most 1/2 of their respective FIFO capacities.
    Additionally we don't make the trigger level configurable.  Consequently
    frequent input overruns happen with high bit rates where hardware flow
    control cannot be used (e.g. terminal applications) even with otherwise
    highly-performant systems.
    
    Lower the default receive interrupt trigger level to 32 then, and make
    it configurable.  Document the trigger levels along with other port
    types, including the set of 16, 32, 64, 112 for the transmit interrupt
    as well[2].
    
    References:
    
    [1] "OX16C950 rev B High Performance UART with 128 byte FIFOs", Oxford
        Semiconductor, Inc., DS-0031, Sep 05, Table 10: "Receiver Trigger
        Levels", p. 22
    
    [2] same, Table 9: "Transmit Interrupt Trigger Levels", p. 22
    
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2106260608480.37803@angie.orcam.me.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8dc4b13dae63e643ef6f928ff537bfdc926ba972
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Mon Jul 12 19:26:01 2021 +0200

    s390/jump_label: print real address in a case of a jump label bug
    
    [ Upstream commit 5492886c14744d239e87f1b0b774b5a341e755cc ]
    
    In case of a jump label print the real address of the piece of code
    where a mismatch was detected. This is right before the system panics,
    so there is nothing revealed.
    
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1ccc70028950c7f04bda737df3a7904c7d52f56
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Mon Jul 26 14:25:11 2021 -0500

    flow_dissector: Fix out-of-bounds warnings
    
    [ Upstream commit 323e0cb473e2a8706ff162b6b4f4fa16023c9ba7 ]
    
    Fix the following out-of-bounds warnings:
    
        net/core/flow_dissector.c: In function '__skb_flow_dissect':
    >> net/core/flow_dissector.c:1104:4: warning: 'memcpy' offset [24, 39] from the object at '<unknown>' is out of the bounds of referenced subobject 'saddr' with type 'struct in6_addr' at offset 8 [-Warray-bounds]
         1104 |    memcpy(&key_addrs->v6addrs, &iph->saddr,
              |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         1105 |           sizeof(key_addrs->v6addrs));
              |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        In file included from include/linux/ipv6.h:5,
                         from net/core/flow_dissector.c:6:
        include/uapi/linux/ipv6.h:133:18: note: subobject 'saddr' declared here
          133 |  struct in6_addr saddr;
              |                  ^~~~~
    >> net/core/flow_dissector.c:1059:4: warning: 'memcpy' offset [16, 19] from the object at '<unknown>' is out of the bounds of referenced subobject 'saddr' with type 'unsigned int' at offset 12 [-Warray-bounds]
         1059 |    memcpy(&key_addrs->v4addrs, &iph->saddr,
              |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         1060 |           sizeof(key_addrs->v4addrs));
              |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        In file included from include/linux/ip.h:17,
                         from net/core/flow_dissector.c:5:
        include/uapi/linux/ip.h:103:9: note: subobject 'saddr' declared here
          103 |  __be32 saddr;
              |         ^~~~~
    
    The problem is that the original code is trying to copy data into a
    couple of struct members adjacent to each other in a single call to
    memcpy().  So, the compiler legitimately complains about it. As these
    are just a couple of members, fix this by copying each one of them in
    separate calls to memcpy().
    
    This helps with the ongoing efforts to globally enable -Warray-bounds
    and get us closer to being able to tighten the FORTIFY_SOURCE routines
    on memcpy().
    
    Link: https://github.com/KSPP/linux/issues/109
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/d5ae2e65-1f18-2577-246f-bada7eee6ccd@intel.com/
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c197826e2df81a25a49317a6a99c9b3acf19527
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Mon Jul 26 14:52:51 2021 -0500

    ipv4: ip_output.c: Fix out-of-bounds warning in ip_copy_addrs()
    
    [ Upstream commit 6321c7acb82872ef6576c520b0e178eaad3a25c0 ]
    
    Fix the following out-of-bounds warning:
    
        In function 'ip_copy_addrs',
            inlined from '__ip_queue_xmit' at net/ipv4/ip_output.c:517:2:
    net/ipv4/ip_output.c:449:2: warning: 'memcpy' offset [40, 43] from the object at 'fl' is out of the bounds of referenced subobject 'saddr' with type 'unsigned int' at offset 36 [-Warray-bounds]
          449 |  memcpy(&iph->saddr, &fl4->saddr,
              |  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          450 |         sizeof(fl4->saddr) + sizeof(fl4->daddr));
              |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    The problem is that the original code is trying to copy data into a
    couple of struct members adjacent to each other in a single call to
    memcpy(). This causes a legitimate compiler warning because memcpy()
    overruns the length of &iph->saddr and &fl4->saddr. As these are just
    a couple of struct members, fix this by using direct assignments,
    instead of memcpy().
    
    This helps with the ongoing efforts to globally enable -Warray-bounds
    and get us closer to being able to tighten the FORTIFY_SOURCE routines
    on memcpy().
    
    Link: https://github.com/KSPP/linux/issues/109
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/d5ae2e65-1f18-2577-246f-bada7eee6ccd@intel.com/
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c423e9ca4ac2c59e8a07a5bb457e806bf1bb23
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Mon Jul 26 10:03:55 2021 +0000

    video: fbdev: riva: Error out if 'pixclock' equals zero
    
    [ Upstream commit f92763cb0feba247e0939ed137b495601fd072a5 ]
    
    The userspace program could pass any values to the driver through
    ioctl() interface. If the driver doesn't check the value of 'pixclock',
    it may cause divide error.
    
    Fix this by checking whether 'pixclock' is zero first.
    
    The following log reveals it:
    
    [   33.396850] divide error: 0000 [#1] PREEMPT SMP KASAN PTI
    [   33.396864] CPU: 5 PID: 11754 Comm: i740 Not tainted 5.14.0-rc2-00513-gac532c9bbcfb-dirty #222
    [   33.396883] RIP: 0010:riva_load_video_mode+0x417/0xf70
    [   33.396969] Call Trace:
    [   33.396973]  ? debug_smp_processor_id+0x1c/0x20
    [   33.396984]  ? tick_nohz_tick_stopped+0x1a/0x90
    [   33.396996]  ? rivafb_copyarea+0x3c0/0x3c0
    [   33.397003]  ? wake_up_klogd.part.0+0x99/0xd0
    [   33.397014]  ? vprintk_emit+0x110/0x4b0
    [   33.397024]  ? vprintk_default+0x26/0x30
    [   33.397033]  ? vprintk+0x9c/0x1f0
    [   33.397041]  ? printk+0xba/0xed
    [   33.397054]  ? record_print_text.cold+0x16/0x16
    [   33.397063]  ? __kasan_check_read+0x11/0x20
    [   33.397074]  ? profile_tick+0xc0/0x100
    [   33.397084]  ? __sanitizer_cov_trace_const_cmp4+0x24/0x80
    [   33.397094]  ? riva_set_rop_solid+0x2a0/0x2a0
    [   33.397102]  rivafb_set_par+0xbe/0x610
    [   33.397111]  ? riva_set_rop_solid+0x2a0/0x2a0
    [   33.397119]  fb_set_var+0x5bf/0xeb0
    [   33.397127]  ? fb_blank+0x1a0/0x1a0
    [   33.397134]  ? lock_acquire+0x1ef/0x530
    [   33.397143]  ? lock_release+0x810/0x810
    [   33.397151]  ? lock_is_held_type+0x100/0x140
    [   33.397159]  ? ___might_sleep+0x1ee/0x2d0
    [   33.397170]  ? __mutex_lock+0x620/0x1190
    [   33.397180]  ? trace_hardirqs_on+0x6a/0x1c0
    [   33.397190]  do_fb_ioctl+0x31e/0x700
    
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1627293835-17441-4-git-send-email-zheyuma97@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d026edf74d9379b2e28882ae90831eaead6852e5
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Mon Jul 26 10:03:54 2021 +0000

    video: fbdev: kyro: Error out if 'pixclock' equals zero
    
    [ Upstream commit 1520b4b7ba964f8eec2e7dd14c571d50de3e5191 ]
    
    The userspace program could pass any values to the driver through
    ioctl() interface. if the driver doesn't check the value of 'pixclock',
    it may cause divide error because the value of 'lineclock' and
    'frameclock' will be zero.
    
    Fix this by checking whether 'pixclock' is zero in kyrofb_check_var().
    
    The following log reveals it:
    
    [  103.073930] divide error: 0000 [#1] PREEMPT SMP KASAN PTI
    [  103.073942] CPU: 4 PID: 12483 Comm: syz-executor Not tainted 5.14.0-rc2-00478-g2734d6c1b1a0-dirty #118
    [  103.073959] RIP: 0010:kyrofb_set_par+0x316/0xc80
    [  103.074045] Call Trace:
    [  103.074048]  ? ___might_sleep+0x1ee/0x2d0
    [  103.074060]  ? kyrofb_ioctl+0x330/0x330
    [  103.074069]  fb_set_var+0x5bf/0xeb0
    [  103.074078]  ? fb_blank+0x1a0/0x1a0
    [  103.074085]  ? lock_acquire+0x3bd/0x530
    [  103.074094]  ? lock_release+0x810/0x810
    [  103.074103]  ? ___might_sleep+0x1ee/0x2d0
    [  103.074114]  ? __mutex_lock+0x620/0x1190
    [  103.074126]  ? trace_hardirqs_on+0x6a/0x1c0
    [  103.074137]  do_fb_ioctl+0x31e/0x700
    [  103.074144]  ? fb_getput_cmap+0x280/0x280
    [  103.074152]  ? rcu_read_lock_sched_held+0x11/0x80
    [  103.074162]  ? rcu_read_lock_sched_held+0x11/0x80
    [  103.074171]  ? __sanitizer_cov_trace_switch+0x67/0xf0
    [  103.074181]  ? __sanitizer_cov_trace_const_cmp2+0x20/0x80
    [  103.074191]  ? do_vfs_ioctl+0x14b/0x16c0
    [  103.074199]  ? vfs_fileattr_set+0xb60/0xb60
    [  103.074207]  ? rcu_read_lock_sched_held+0x11/0x80
    [  103.074216]  ? lock_release+0x483/0x810
    [  103.074224]  ? __fget_files+0x217/0x3d0
    [  103.074234]  ? __fget_files+0x239/0x3d0
    [  103.074243]  ? do_fb_ioctl+0x700/0x700
    [  103.074250]  fb_ioctl+0xe6/0x130
    
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1627293835-17441-3-git-send-email-zheyuma97@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f997d6f5ba934dd3722b1ae125ec0cda505d2d59
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Mon Jul 26 10:03:53 2021 +0000

    video: fbdev: asiliantfb: Error out if 'pixclock' equals zero
    
    [ Upstream commit b36b242d4b8ea178f7fd038965e3cac7f30c3f09 ]
    
    The userspace program could pass any values to the driver through
    ioctl() interface. If the driver doesn't check the value of 'pixclock',
    it may cause divide error.
    
    Fix this by checking whether 'pixclock' is zero first.
    
    The following log reveals it:
    
    [   43.861711] divide error: 0000 [#1] PREEMPT SMP KASAN PTI
    [   43.861737] CPU: 2 PID: 11764 Comm: i740 Not tainted 5.14.0-rc2-00513-gac532c9bbcfb-dirty #224
    [   43.861756] RIP: 0010:asiliantfb_check_var+0x4e/0x730
    [   43.861843] Call Trace:
    [   43.861848]  ? asiliantfb_remove+0x190/0x190
    [   43.861858]  fb_set_var+0x2e4/0xeb0
    [   43.861866]  ? fb_blank+0x1a0/0x1a0
    [   43.861873]  ? lock_acquire+0x1ef/0x530
    [   43.861884]  ? lock_release+0x810/0x810
    [   43.861892]  ? lock_is_held_type+0x100/0x140
    [   43.861903]  ? ___might_sleep+0x1ee/0x2d0
    [   43.861914]  ? __mutex_lock+0x620/0x1190
    [   43.861921]  ? do_fb_ioctl+0x313/0x700
    [   43.861929]  ? mutex_lock_io_nested+0xfa0/0xfa0
    [   43.861936]  ? __this_cpu_preempt_check+0x1d/0x30
    [   43.861944]  ? _raw_spin_unlock_irqrestore+0x46/0x60
    [   43.861952]  ? lockdep_hardirqs_on+0x59/0x100
    [   43.861959]  ? _raw_spin_unlock_irqrestore+0x46/0x60
    [   43.861967]  ? trace_hardirqs_on+0x6a/0x1c0
    [   43.861978]  do_fb_ioctl+0x31e/0x700
    
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1627293835-17441-2-git-send-email-zheyuma97@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9ac9630e90d00a8b9dd396ea77d9b8c3f80fb67
Author: Johan Almbladh <johan.almbladh@anyfinetworks.com>
Date:   Wed Jul 21 12:38:22 2021 +0200

    bpf/tests: Do not PASS tests without actually testing the result
    
    [ Upstream commit 2b7e9f25e590726cca76700ebdb10e92a7a72ca1 ]
    
    Each test case can have a set of sub-tests, where each sub-test can
    run the cBPF/eBPF test snippet with its own data_size and expected
    result. Before, the end of the sub-test array was indicated by both
    data_size and result being zero. However, most or all of the internal
    eBPF tests has a data_size of zero already. When such a test also had
    an expected value of zero, the test was never run but reported as
    PASS anyway.
    
    Now the test runner always runs the first sub-test, regardless of the
    data_size and result values. The sub-test array zero-termination only
    applies for any additional sub-tests.
    
    There are other ways fix it of course, but this solution at least
    removes the surprise of eBPF tests with a zero result always succeeding.
    
    Signed-off-by: Johan Almbladh <johan.almbladh@anyfinetworks.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20210721103822.3755111-1-johan.almbladh@anyfinetworks.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fa42b748728f418da5f9574e2d0383c466d842a
Author: Johan Almbladh <johan.almbladh@anyfinetworks.com>
Date:   Wed Jul 21 12:40:58 2021 +0200

    bpf/tests: Fix copy-and-paste error in double word test
    
    [ Upstream commit ae7f47041d928b1a2f28717d095b4153c63cbf6a ]
    
    This test now operates on DW as stated instead of W, which was
    already covered by another test.
    
    Signed-off-by: Johan Almbladh <johan.almbladh@anyfinetworks.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20210721104058.3755254-1-johan.almbladh@anyfinetworks.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ddffd43f393531447231430cfc3f6828012e67b
Author: Anson Jacob <Anson.Jacob@amd.com>
Date:   Tue Jul 20 11:00:44 2021 -0400

    drm/amd/amdgpu: Update debugfs link_settings output link_rate field in hex
    
    [ Upstream commit 1a394b3c3de2577f200cb623c52a5c2b82805cec ]
    
    link_rate is updated via debugfs using hex values, set it to output
    in hex as well.
    
    eg: Resolution: 1920x1080@144Hz
    cat /sys/kernel/debug/dri/0/DP-1/link_settings
    Current:  4  0x14  0  Verified:  4  0x1e  0  Reported:  4  0x1e  16  Preferred:  0  0x0  0
    
    echo "4 0x1e" > /sys/kernel/debug/dri/0/DP-1/link_settings
    
    cat /sys/kernel/debug/dri/0/DP-1/link_settings
    Current:  4  0x1e  0  Verified:  4  0x1e  0  Reported:  4  0x1e  16  Preferred:  4  0x1e  0
    
    Signed-off-by: Anson Jacob <Anson.Jacob@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84bf0fb189d512cb890381e6af855bc26b7b2294
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Wed Jul 14 05:53:23 2021 +0000

    tty: serial: jsm: hold port lock when reporting modem line changes
    
    [ Upstream commit 240e126c28df084222f0b661321e8e3ecb0d232e ]
    
    uart_handle_dcd_change() requires a port lock to be held and will emit a
    warning when lockdep is enabled.
    
    Held corresponding lock to fix the following warnings.
    
    [  132.528648] WARNING: CPU: 5 PID: 11600 at drivers/tty/serial/serial_core.c:3046 uart_handle_dcd_change+0xf4/0x120
    [  132.530482] Modules linked in:
    [  132.531050] CPU: 5 PID: 11600 Comm: jsm Not tainted 5.14.0-rc1-00003-g7fef2edf7cc7-dirty #31
    [  132.535268] RIP: 0010:uart_handle_dcd_change+0xf4/0x120
    [  132.557100] Call Trace:
    [  132.557562]  ? __free_pages+0x83/0xb0
    [  132.558213]  neo_parse_modem+0x156/0x220
    [  132.558897]  neo_param+0x399/0x840
    [  132.559495]  jsm_tty_open+0x12f/0x2d0
    [  132.560131]  uart_startup.part.18+0x153/0x340
    [  132.560888]  ? lock_is_held_type+0xe9/0x140
    [  132.561660]  uart_port_activate+0x7f/0xe0
    [  132.562351]  ? uart_startup.part.18+0x340/0x340
    [  132.563003]  tty_port_open+0x8d/0xf0
    [  132.563523]  ? uart_set_options+0x1e0/0x1e0
    [  132.564125]  uart_open+0x24/0x40
    [  132.564604]  tty_open+0x15c/0x630
    
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Link: https://lore.kernel.org/r/1626242003-3809-1-git-send-email-zheyuma97@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit beb8f733e6f345d9d53fc229ae99394778d7e6cc
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Jul 14 12:13:46 2021 +0200

    staging: board: Fix uninitialized spinlock when attaching genpd
    
    [ Upstream commit df00609821bf17f50a75a446266d19adb8339d84 ]
    
    On Armadillo-800-EVA with CONFIG_DEBUG_SPINLOCK=y:
    
        BUG: spinlock bad magic on CPU#0, swapper/1
         lock: lcdc0_device+0x10c/0x308, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
        CPU: 0 PID: 1 Comm: swapper Not tainted 5.11.0-rc5-armadillo-00036-gbbca04be7a80-dirty #287
        Hardware name: Generic R8A7740 (Flattened Device Tree)
        [<c010c3c8>] (unwind_backtrace) from [<c010a49c>] (show_stack+0x10/0x14)
        [<c010a49c>] (show_stack) from [<c0159534>] (do_raw_spin_lock+0x20/0x94)
        [<c0159534>] (do_raw_spin_lock) from [<c040858c>] (dev_pm_get_subsys_data+0x8c/0x11c)
        [<c040858c>] (dev_pm_get_subsys_data) from [<c05fbcac>] (genpd_add_device+0x78/0x2b8)
        [<c05fbcac>] (genpd_add_device) from [<c0412db4>] (of_genpd_add_device+0x34/0x4c)
        [<c0412db4>] (of_genpd_add_device) from [<c0a1ea74>] (board_staging_register_device+0x11c/0x148)
        [<c0a1ea74>] (board_staging_register_device) from [<c0a1eac4>] (board_staging_register_devices+0x24/0x28)
    
    of_genpd_add_device() is called before platform_device_register(), as it
    needs to attach the genpd before the device is probed.  But the spinlock
    is only initialized when the device is registered.
    
    Fix this by open-coding the spinlock initialization, cfr.
    device_pm_init_common() in the internal drivers/base code, and in the
    SuperH early platform code.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/57783ece7ddae55f2bda2f59f452180bff744ea0.1626257398.git.geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb9647dce5f3dfa7b6f02679f16d7f9231bbe57c
Author: Jack Pham <jackp@codeaurora.org>
Date:   Tue Jul 20 01:09:07 2021 -0700

    usb: gadget: composite: Allow bMaxPower=0 if self-powered
    
    [ Upstream commit bcacbf06c891374e7fdd7b72d11cda03b0269b43 ]
    
    Currently the composite driver encodes the MaxPower field of
    the configuration descriptor by reading the c->MaxPower of the
    usb_configuration only if it is non-zero, otherwise it falls back
    to using the value hard-coded in CONFIG_USB_GADGET_VBUS_DRAW.
    However, there are cases when a configuration must explicitly set
    bMaxPower to 0, particularly if its bmAttributes also has the
    Self-Powered bit set, which is a valid combination.
    
    This is specifically called out in the USB PD specification section
    9.1, in which a PDUSB device "shall report zero in the bMaxPower
    field after negotiating a mutually agreeable Contract", and also
    verified by the USB Type-C Functional Test TD.4.10.2 Sink Power
    Precedence Test.
    
    The fix allows the c->MaxPower to be used for encoding the bMaxPower
    even if it is 0, if the self-powered bit is also set.  An example
    usage of this would be for a ConfigFS gadget to be dynamically
    updated by userspace when the Type-C connection is determined to be
    operating in Power Delivery mode.
    
    Co-developed-by: Ronak Vijay Raheja <rraheja@codeaurora.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Ronak Vijay Raheja <rraheja@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Link: https://lore.kernel.org/r/20210720080907.30292-1-jackp@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7dd08d66af3df5d599a7352afda9e324754cf57d
Author: Maciej Żenczykowski <maze@google.com>
Date:   Thu Jul 1 04:48:34 2021 -0700

    usb: gadget: u_ether: fix a potential null pointer dereference
    
    [ Upstream commit 8ae01239609b29ec2eff55967c8e0fe3650cfa09 ]
    
    f_ncm tx timeout can call us with null skb to flush
    a pending frame.  In this case skb is NULL to begin
    with but ceases to be null after dev->wrap() completes.
    
    In such a case in->maxpacket will be read, even though
    we've failed to check that 'in' is not NULL.
    
    Though I've never observed this fail in practice,
    however the 'flush operation' simply does not make sense with
    a null usb IN endpoint - there's nowhere to flush to...
    (note that we're the gadget/device, and IN is from the point
     of view of the host, so here IN actually means outbound...)
    
    Cc: Brooke Basile <brookebasile@gmail.com>
    Cc: "Bryan O'Donoghue" <bryan.odonoghue@linaro.org>
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Link: https://lore.kernel.org/r/20210701114834.884597-6-zenczykowski@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9ee01f32dc1073afe978ab0f8dad8a7c30a11ed
Author: Kelly Devilliv <kelly.devilliv@gmail.com>
Date:   Sun Jun 27 20:57:47 2021 +0800

    usb: host: fotg210: fix the actual_length of an iso packet
    
    [ Upstream commit 091cb2f782f32ab68c6f5f326d7868683d3d4875 ]
    
    We should acquire the actual_length of an iso packet
    from the iTD directly using FOTG210_ITD_LENGTH() macro.
    
    Signed-off-by: Kelly Devilliv <kelly.devilliv@gmail.com>
    Link: https://lore.kernel.org/r/20210627125747.127646-4-kelly.devilliv@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a1c8ec6534f231817e6568f0363db737a411b0b
Author: Kelly Devilliv <kelly.devilliv@gmail.com>
Date:   Sun Jun 27 20:57:46 2021 +0800

    usb: host: fotg210: fix the endpoint's transactional opportunities calculation
    
    [ Upstream commit c2e898764245c852bc8ee4857613ba4f3a6d761d ]
    
    Now that usb_endpoint_maxp() only returns the lowest
    11 bits from wMaxPacketSize, we should make use of the
    usb_endpoint_* helpers instead and remove the unnecessary
    max_packet()/hb_mult() macro.
    
    Signed-off-by: Kelly Devilliv <kelly.devilliv@gmail.com>
    Link: https://lore.kernel.org/r/20210627125747.127646-3-kelly.devilliv@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3f5947867d58b75f0e8cf610f067094ede4dce3
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Thu Jul 15 17:17:24 2021 +0800

    Smack: Fix wrong semantics in smk_access_entry()
    
    [ Upstream commit 6d14f5c7028eea70760df284057fe198ce7778dd ]
    
    In the smk_access_entry() function, if no matching rule is found
    in the rust_list, a negative error code will be used to perform bit
    operations with the MAY_ enumeration value. This is semantically
    wrong. This patch fixes this issue.
    
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51fae54d5ad9d8e9222580f2cdb04a8474f6520b
Author: Yajun Deng <yajun.deng@linux.dev>
Date:   Mon Jul 19 13:18:16 2021 +0800

    netlink: Deal with ESRCH error in nlmsg_notify()
    
    [ Upstream commit fef773fc8110d8124c73a5e6610f89e52814637d ]
    
    Yonghong Song report:
    The bpf selftest tc_bpf failed with latest bpf-next.
    The following is the command to run and the result:
    $ ./test_progs -n 132
    [   40.947571] bpf_testmod: loading out-of-tree module taints kernel.
    test_tc_bpf:PASS:test_tc_bpf__open_and_load 0 nsec
    test_tc_bpf:PASS:bpf_tc_hook_create(BPF_TC_INGRESS) 0 nsec
    test_tc_bpf:PASS:bpf_tc_hook_create invalid hook.attach_point 0 nsec
    test_tc_bpf_basic:PASS:bpf_obj_get_info_by_fd 0 nsec
    test_tc_bpf_basic:PASS:bpf_tc_attach 0 nsec
    test_tc_bpf_basic:PASS:handle set 0 nsec
    test_tc_bpf_basic:PASS:priority set 0 nsec
    test_tc_bpf_basic:PASS:prog_id set 0 nsec
    test_tc_bpf_basic:PASS:bpf_tc_attach replace mode 0 nsec
    test_tc_bpf_basic:PASS:bpf_tc_query 0 nsec
    test_tc_bpf_basic:PASS:handle set 0 nsec
    test_tc_bpf_basic:PASS:priority set 0 nsec
    test_tc_bpf_basic:PASS:prog_id set 0 nsec
    libbpf: Kernel error message: Failed to send filter delete notification
    test_tc_bpf_basic:FAIL:bpf_tc_detach unexpected error: -3 (errno 3)
    test_tc_bpf:FAIL:test_tc_internal ingress unexpected error: -3 (errno 3)
    
    The failure seems due to the commit
        cfdf0d9ae75b ("rtnetlink: use nlmsg_notify() in rtnetlink_send()")
    
    Deal with ESRCH error in nlmsg_notify() even the report variable is zero.
    
    Reported-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Yajun Deng <yajun.deng@linux.dev>
    Link: https://lore.kernel.org/r/20210719051816.11762-1-yajun.deng@linux.dev
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9ce5d519d631fa2d02ab16b3a77856719db19f8
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Wed Jul 14 04:09:22 2021 +0000

    video: fbdev: kyro: fix a DoS bug by restricting user input
    
    [ Upstream commit 98a65439172dc69cb16834e62e852afc2adb83ed ]
    
    The user can pass in any value to the driver through the 'ioctl'
    interface. The driver dost not check, which may cause DoS bugs.
    
    The following log reveals it:
    
    divide error: 0000 [#1] PREEMPT SMP KASAN PTI
    RIP: 0010:SetOverlayViewPort+0x133/0x5f0 drivers/video/fbdev/kyro/STG4000OverlayDevice.c:476
    Call Trace:
     kyro_dev_overlay_viewport_set drivers/video/fbdev/kyro/fbdev.c:378 [inline]
     kyrofb_ioctl+0x2eb/0x330 drivers/video/fbdev/kyro/fbdev.c:603
     do_fb_ioctl+0x1f3/0x700 drivers/video/fbdev/core/fbmem.c:1171
     fb_ioctl+0xeb/0x130 drivers/video/fbdev/core/fbmem.c:1185
     vfs_ioctl fs/ioctl.c:48 [inline]
     __do_sys_ioctl fs/ioctl.c:753 [inline]
     __se_sys_ioctl fs/ioctl.c:739 [inline]
     __x64_sys_ioctl+0x19b/0x220 fs/ioctl.c:739
     do_syscall_64+0x32/0x80 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1626235762-2590-1-git-send-email-zheyuma97@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8df5bcb0c1c607fa4094106bfd1790d14d16b0c8
Author: David Heidelberg <david@ixit.cz>
Date:   Wed Jul 7 15:14:53 2021 +0200

    ARM: dts: qcom: apq8064: correct clock names
    
    [ Upstream commit 0dc6c59892ead17a9febd11202c9f6794aac1895 ]
    
    Since new code doesn't take old clk names in account, it does fixes
    error:
    
    msm_dsi 4700000.mdss_dsi: dev_pm_opp_set_clkname: Couldn't find clock: -2
    
    and following kernel oops introduced by
    b0530eb1191 ("drm/msm/dpu: Use OPP API to set clk/perf state").
    
    Also removes warning about deprecated clock names.
    
    Tested against linux-5.10.y LTS on Nexus 7 2013.
    
    Reviewed-by: Brian Masney <masneyb@onstation.org>
    Signed-off-by: David Heidelberg <david@ixit.cz>
    Link: https://lore.kernel.org/r/20210707131453.24041-1-david@ixit.cz
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4a2974be078c5f762b1cd19c6555e94758c111a
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 27 17:32:37 2021 +0100

    iio: dac: ad5624r: Fix incorrect handling of an optional regulator.
    
    [ Upstream commit 97683c851f9cdbd3ea55697cbe2dcb6af4287bbd ]
    
    The naming of the regulator is problematic.  VCC is usually a supply
    voltage whereas these devices have a separate VREF pin.
    
    Secondly, the regulator core might have provided a stub regulator if
    a real regulator wasn't provided. That would in turn have failed to
    provide a voltage when queried. So reality was that there was no way
    to use the internal reference.
    
    In order to avoid breaking any dts out in the wild, make sure to fallback
    to the original vcc naming if vref is not available.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Acked-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20210627163244.1090296-9-jic23@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef306a7dd849d3e623716cb539e56fe4c0f4c64f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 16 17:44:07 2021 -0400

    tipc: keep the skb in rcv queue until the whole data is read
    
    [ Upstream commit f4919ff59c2828064b4156e3c3600a169909bcf4 ]
    
    Currently, when userspace reads a datagram with a buffer that is
    smaller than this datagram, the data will be truncated and only
    part of it can be received by users. It doesn't seem right that
    users don't know the datagram size and have to use a huge buffer
    to read it to avoid the truncation.
    
    This patch to fix it by keeping the skb in rcv queue until the
    whole data is read by users. Only the last msg of the datagram
    will be marked with MSG_EOR, just as TCP/SCTP does.
    
    Note that this will work as above only when MSG_EOR is set in the
    flags parameter of recvmsg(), so that it won't break any old user
    applications.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d941bd6366a08bf5c660dbd4f8345427d56aefe
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jul 8 15:25:06 2021 +0200

    PCI: Use pci_update_current_state() in pci_enable_device_flags()
    
    [ Upstream commit 14858dcc3b3587f4bb5c48e130ee7d68fc2b0a29 ]
    
    Updating the current_state field of struct pci_dev the way it is done
    in pci_enable_device_flags() before calling do_pci_enable_device() may
    not work.  For example, if the given PCI device depends on an ACPI
    power resource whose _STA method initially returns 0 ("off"), but the
    config space of the PCI device is accessible and the power state
    retrieved from the PCI_PM_CTRL register is D0, the current_state
    field in the struct pci_dev representing that device will get out of
    sync with the power.state of its ACPI companion object and that will
    lead to power management issues going forward.
    
    To avoid such issues, make pci_enable_device_flags() call
    pci_update_current_state() which takes ACPI device power management
    into account, if present, to retrieve the current power state of the
    device.
    
    Link: https://lore.kernel.org/lkml/20210314000439.3138941-1-luzmaximilian@gmail.com/
    Reported-by: Maximilian Luz <luzmaximilian@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Maximilian Luz <luzmaximilian@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bcffed7ce794850379b31a588e19c1255dfbe05b
Author: Sean Anderson <sean.anderson@seco.com>
Date:   Thu Jul 1 14:56:38 2021 -0400

    crypto: mxs-dcp - Use sg_mapping_iter to copy data
    
    [ Upstream commit 2e6d793e1bf07fe5e20cfbbdcec9e1af7e5097eb ]
    
    This uses the sg_pcopy_from_buffer to copy data, instead of doing it
    ourselves.
    
    In addition to reducing code size, this fixes the following oops
    resulting from failing to kmap the page:
    
    [   68.896381] Unable to handle kernel NULL pointer dereference at virtual address 00000ab8
    [   68.904539] pgd = 3561adb3
    [   68.907475] [00000ab8] *pgd=00000000
    [   68.911153] Internal error: Oops: 805 [#1] ARM
    [   68.915618] Modules linked in: cfg80211 rfkill des_generic libdes arc4 libarc4 cbc ecb algif_skcipher sha256_generic libsha256 sha1_generic hmac aes_generic libaes cmac sha512_generic md5 md4 algif_hash af_alg i2c_imx i2c_core ci_hdrc_imx ci_hdrc mxs_dcp ulpi roles udc_core imx_sdma usbmisc_imx usb_common firmware_class virt_dma phy_mxs_usb nf_tables nfnetlink ip_tables x_tables ipv6 autofs4
    [   68.950741] CPU: 0 PID: 139 Comm: mxs_dcp_chan/ae Not tainted 5.10.34 #296
    [   68.958501] Hardware name: Freescale i.MX6 Ultralite (Device Tree)
    [   68.964710] PC is at memcpy+0xa8/0x330
    [   68.968479] LR is at 0xd7b2bc9d
    [   68.971638] pc : [<c053e7c8>]    lr : [<d7b2bc9d>]    psr: 000f0013
    [   68.977920] sp : c2cbbee4  ip : 00000010  fp : 00000010
    [   68.983159] r10: 00000000  r9 : c3283a40  r8 : 1a5a6f08
    [   68.988402] r7 : 4bfe0ecc  r6 : 76d8a220  r5 : c32f9050  r4 : 00000001
    [   68.994945] r3 : 00000ab8  r2 : fffffff0  r1 : c32f9050  r0 : 00000ab8
    [   69.001492] Flags: nzcv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    [   69.008646] Control: 10c53c7d  Table: 83664059  DAC: 00000051
    [   69.014414] Process mxs_dcp_chan/ae (pid: 139, stack limit = 0x667b57ab)
    [   69.021133] Stack: (0xc2cbbee4 to 0xc2cbc000)
    [   69.025519] bee0:          c32f9050 c3235408 00000010 00000010 00000ab8 00000001 bf10406c
    [   69.033720] bf00: 00000000 00000000 00000010 00000000 c32355d0 832fb080 00000000 c13de2fc
    [   69.041921] bf20: c3628010 00000010 c33d5780 00000ab8 bf1067e8 00000002 c21e5010 c2cba000
    [   69.050125] bf40: c32f8040 00000000 bf106a40 c32f9040 c3283a80 00000001 bf105240 c3234040
    [   69.058327] bf60: ffffe000 c3204100 c2c69800 c2cba000 00000000 bf103b84 00000000 c2eddc54
    [   69.066530] bf80: c3204144 c0140d1c c2cba000 c2c69800 c0140be8 00000000 00000000 00000000
    [   69.074730] bfa0: 00000000 00000000 00000000 c0100114 00000000 00000000 00000000 00000000
    [   69.082932] bfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [   69.091131] bfe0: 00000000 00000000 00000000 00000000 00000013 00000000 00000000 00000000
    [   69.099364] [<c053e7c8>] (memcpy) from [<bf10406c>] (dcp_chan_thread_aes+0x4e8/0x840 [mxs_dcp])
    [   69.108117] [<bf10406c>] (dcp_chan_thread_aes [mxs_dcp]) from [<c0140d1c>] (kthread+0x134/0x160)
    [   69.116941] [<c0140d1c>] (kthread) from [<c0100114>] (ret_from_fork+0x14/0x20)
    [   69.124178] Exception stack(0xc2cbbfb0 to 0xc2cbbff8)
    [   69.129250] bfa0:                                     00000000 00000000 00000000 00000000
    [   69.137450] bfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [   69.145648] bfe0: 00000000 00000000 00000000 00000000 00000013 00000000
    [   69.152289] Code: e320f000 e4803004 e4804004 e4805004 (e4806004)
    
    Signed-off-by: Sean Anderson <sean.anderson@seco.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93ef984d68ff68354598766c0efc2ef1e458027f
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Thu Jun 17 13:28:57 2021 +0200

    media: dib8000: rewrite the init prbs logic
    
    [ Upstream commit 8db11aebdb8f93f46a8513c22c9bd52fa23263aa ]
    
    The logic at dib8000_get_init_prbs() has a few issues:
    
    1. the tables used there has an extra unused value at the beginning;
    2. the dprintk() message doesn't write the right value when
       transmission mode is not 8K;
    3. the array overflow validation is done by the callers.
    
    Rewrite the code to fix such issues.
    
    This should also shut up those smatch warnings:
    
            drivers/media/dvb-frontends/dib8000.c:2125 dib8000_get_init_prbs() error: buffer overflow 'lut_prbs_8k' 14 <= 14
            drivers/media/dvb-frontends/dib8000.c:2129 dib8000_get_init_prbs() error: buffer overflow 'lut_prbs_2k' 14 <= 14
            drivers/media/dvb-frontends/dib8000.c:2131 dib8000_get_init_prbs() error: buffer overflow 'lut_prbs_4k' 14 <= 14
            drivers/media/dvb-frontends/dib8000.c:2134 dib8000_get_init_prbs() error: buffer overflow 'lut_prbs_8k' 14 <= 14
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e826df5864e449f89c2d056aab998c813d40c932
Author: Nadav Amit <namit@vmware.com>
Date:   Thu Sep 2 14:58:59 2021 -0700

    userfaultfd: prevent concurrent API initialization
    
    [ Upstream commit 22e5fe2a2a279d9a6fcbdfb4dffe73821bef1c90 ]
    
    userfaultfd assumes that the enabled features are set once and never
    changed after UFFDIO_API ioctl succeeded.
    
    However, currently, UFFDIO_API can be called concurrently from two
    different threads, succeed on both threads and leave userfaultfd's
    features in non-deterministic state.  Theoretically, other uffd operations
    (ioctl's and page-faults) can be dispatched while adversely affected by
    such changes of features.
    
    Moreover, the writes to ctx->state and ctx->features are not ordered,
    which can - theoretically, again - let userfaultfd_ioctl() think that
    userfaultfd API completed, while the features are still not initialized.
    
    To avoid races, it is arguably best to get rid of ctx->state.  Since there
    are only 2 states, record the API initialization in ctx->features as the
    uppermost bit and remove ctx->state.
    
    Link: https://lkml.kernel.org/r/20210808020724.1022515-3-namit@vmware.com
    Fixes: 9cd75c3cd4c3d ("userfaultfd: non-cooperative: add ability to report non-PF events from uffd descriptor")
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Peter Xu <peterx@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fddf7111ffa47d0e9d63d12389b7a9fe8296a5c
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Thu Sep 2 09:19:51 2021 +0200

    MIPS: Malta: fix alignment of the devicetree buffer
    
    [ Upstream commit bea6a94a279bcbe6b2cde348782b28baf12255a5 ]
    
    Starting with following patch MIPS Malta is not able to boot:
    | commit 79edff12060fe7772af08607eff50c0e2486c5ba
    | Author: Rob Herring <robh@kernel.org>
    | scripts/dtc: Update to upstream version v1.6.0-51-g183df9e9c2b9
    
    The reason is the alignment test added to the fdt_ro_probe_(). To fix
    this issue, we need to make sure that fdt_buf is aligned.
    
    Since the dtc patch was designed to uncover potential issue, I handle
    initial MIPS Malta patch as initial bug.
    
    Fixes: e81a8c7dabac ("MIPS: Malta: Setup RAM regions via DT")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efd37f01d719a0f51dcc4929ca2edae46e7a600b
Author: Chao Yu <chao@kernel.org>
Date:   Wed Aug 25 19:34:19 2021 +0800

    f2fs: fix to unmap pages from userspace process in punch_hole()
    
    [ Upstream commit c8dc3047c48540183744f959412d44b08c5435e1 ]
    
    We need to unmap pages from userspace process before removing pagecache
    in punch_hole() like we did in f2fs_setattr().
    
    Similar change:
    commit 5e44f8c374dc ("ext4: hole-punch use truncate_pagecache_range")
    
    Fixes: fbfa2cc58d53 ("f2fs: add file operations")
    Signed-off-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8002259a366e8a7206f7e706a1e4e33bee6efcef
Author: Chao Yu <chao@kernel.org>
Date:   Tue Aug 24 08:12:08 2021 +0800

    f2fs: fix to account missing .skipped_gc_rwsem
    
    [ Upstream commit ad126ebddecbf696e0cf214ff56c7b170fa9f0f7 ]
    
    There is a missing place we forgot to account .skipped_gc_rwsem, fix it.
    
    Fixes: 6f8d4455060d ("f2fs: avoid fi->i_gc_rwsem[WRITE] lock in f2fs_gc")
    Signed-off-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55188428827775af6054948dcea7edd8e8573d57
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jun 17 14:21:00 2021 +0100

    fscache: Fix cookie key hashing
    
    [ Upstream commit 35b72573e977ed6b18b094136a4fa3e0ffb13603 ]
    
    The current hash algorithm used for hashing cookie keys is really bad,
    producing almost no dispersion (after a test kernel build, ~30000 files
    were split over just 18 out of the 32768 hash buckets).
    
    Borrow the full_name_hash() hash function into fscache to do the hashing
    for cookie keys and, in the future, volume keys.
    
    I don't want to use full_name_hash() as-is because I want the hash value to
    be consistent across arches and over time as the hash value produced may
    get used on disk.
    
    I can also optimise parts of it away as the key will always be a padded
    array of aligned 32-bit words.
    
    Fixes: ec0328e46d6e ("fscache: Maintain a catalogue of allocated cookies")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    cc: linux-cachefs@redhat.com
    Link: https://lore.kernel.org/r/162431201844.2908479.8293647220901514696.stgit@warthog.procyon.org.uk/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 942a39041bc579902069eed9b8b174deefe41c68
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Aug 26 16:08:22 2021 +0200

    platform/x86: dell-smbios-wmi: Add missing kfree in error-exit from run_smbios_call
    
    [ Upstream commit 0487d4fc42d7f31a56cfd9e2237f9ebd889e6112 ]
    
    As pointed out be Kees Cook if we return -EIO because the
    obj->type != ACPI_TYPE_BUFFER, then we must kfree the
    output buffer before the return.
    
    Fixes: 1a258e670434 ("platform/x86: dell-smbios-wmi: Add new WMI dispatcher driver")
    Reported-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210826140822.71198-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cd59378234072a71789aeb411a6ae8cce187a34
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Aug 10 11:47:53 2021 +0300

    scsi: qedi: Fix error codes in qedi_alloc_global_queues()
    
    [ Upstream commit 4dbe57d46d54a847875fa33e7d05877bb341585e ]
    
    This function had some left over code that returned 1 on error instead
    negative error codes.  Convert everything to use negative error codes.  The
    caller treats all non-zero returns the same so this does not affect run
    time.
    
    A couple places set "rc" instead of "status" so those error paths ended up
    returning success by mistake.  Get rid of the "rc" variable and use
    "status" everywhere.
    
    Remove the bogus "status = 0" initialization, as a future proofing measure
    so the compiler will warn about uninitialized error codes.
    
    Link: https://lore.kernel.org/r/20210810084753.GD23810@kili
    Fixes: ace7f46ba5fd ("scsi: qedi: Add QLogic FastLinQ offload iSCSI driver framework.")
    Acked-by: Manish Rangankar <mrangankar@marvell.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3b721153985a0ada351170846474bdfda949f49
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Thu Jul 22 11:39:29 2021 +0800

    pinctrl: single: Fix error return code in pcs_parse_bits_in_pinctrl_entry()
    
    [ Upstream commit d789a490d32fdf0465275e3607f8a3bc87d3f3ba ]
    
    Fix to return -ENOTSUPP instead of 0 when PCS_HAS_PINCONF is true, which
    is the same as that returned in pcs_parse_pinconf().
    
    Fixes: 4e7e8017a80e ("pinctrl: pinctrl-single: enhance to configure multiple pins of different modules")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Link: https://lore.kernel.org/r/20210722033930.4034-2-thunder.leizhen@huawei.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f58d402beec798fe7a284ff90c41237dda07eb2
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Jul 18 19:33:09 2021 -0700

    openrisc: don't printk() unconditionally
    
    [ Upstream commit 946e1052cdcc7e585ee5d1e72528ca49fb295243 ]
    
    Don't call printk() when CONFIG_PRINTK is not set.
    Fixes the following build errors:
    
    or1k-linux-ld: arch/openrisc/kernel/entry.o: in function `_external_irq_handler':
    (.text+0x804): undefined reference to `printk'
    (.text+0x804): relocation truncated to fit: R_OR1K_INSN_REL_26 against undefined symbol `printk'
    
    Fixes: 9d02a4283e9c ("OpenRISC: Boot code")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Jonas Bonn <jonas@southpole.se>
    Cc: Stefan Kristiansson <stefan.kristiansson@saunalahti.fi>
    Cc: Stafford Horne <shorne@gmail.com>
    Cc: openrisc@lists.librecores.org
    Signed-off-by: Stafford Horne <shorne@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65c923f99bdd09e5f6e102d3793bf366d846d94c
Author: Michal Suchanek <msuchanek@suse.de>
Date:   Thu Jul 29 20:01:03 2021 +0200

    powerpc/stacktrace: Include linux/delay.h
    
    [ Upstream commit a6cae77f1bc89368a4e2822afcddc45c3062d499 ]
    
    commit 7c6986ade69e ("powerpc/stacktrace: Fix spurious "stale" traces in raise_backtrace_ipi()")
    introduces udelay() call without including the linux/delay.h header.
    This may happen to work on master but the header that declares the
    functionshould be included nonetheless.
    
    Fixes: 7c6986ade69e ("powerpc/stacktrace: Fix spurious "stale" traces in raise_backtrace_ipi()")
    Signed-off-by: Michal Suchanek <msuchanek@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210729180103.15578-1-msuchanek@suse.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cca5a2a545c4780315aeb0f91bb84e363eb1f2aa
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Fri Jul 16 15:39:12 2021 -0300

    vfio: Use config not menuconfig for VFIO_NOIOMMU
    
    [ Upstream commit 26c22cfde5dd6e63f25c48458b0185dcb0fbb2fd ]
    
    VFIO_NOIOMMU is supposed to be an element in the VFIO menu, not start
    a new menu. Correct this copy-paste mistake.
    
    Fixes: 03a76b60f8ba ("vfio: Include No-IOMMU mode")
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Link: https://lore.kernel.org/r/0-v1-3f0b685c3679+478-vfio_menuconfig_jgg@nvidia.com
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90a6672480ae5eb9088c369431c26c7ddf4e3295
Author: Jaehyoung Choi <jkkkkk.choi@samsung.com>
Date:   Fri Jul 30 22:29:05 2021 +0300

    pinctrl: samsung: Fix pinctrl bank pin count
    
    [ Upstream commit 70115558ab02fe8d28a6634350b3491a542aaa02 ]
    
    Commit 1abd18d1a51a ("pinctrl: samsung: Register pinctrl before GPIO")
    changes the order of GPIO and pinctrl registration: now pinctrl is
    registered before GPIO. That means gpio_chip->ngpio is not set when
    samsung_pinctrl_register() called, and one cannot rely on that value
    anymore. Use `pin_bank->nr_pins' instead of `pin_bank->gpio_chip.ngpio'
    to fix mentioned inconsistency.
    
    Fixes: 1abd18d1a51a ("pinctrl: samsung: Register pinctrl before GPIO")
    Signed-off-by: Jaehyoung Choi <jkkkkk.choi@samsung.com>
    Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
    Link: https://lore.kernel.org/r/20210730192905.7173-1-semen.protsenko@linaro.org
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 296a527ee36c0fac0b3ff281759c085728aeb304
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed Jul 28 16:04:12 2021 +0300

    docs: Fix infiniband uverbs minor number
    
    [ Upstream commit 8d7e415d55610d503fdb8815344846b72d194a40 ]
    
    Starting from the beginning of infiniband subsystem, the uverbs char
    devices start from 192 as a minor number, see
    commit bc38a6abdd5a ("[PATCH] IB uverbs: core implementation").
    
    This patch updates the admin guide documentation to reflect it.
    
    Fixes: 9d85025b0418 ("docs-rst: create an user's manual book")
    Link: https://lore.kernel.org/r/bad03e6bcde45550c01e12908a6fe7dfa4770703.1627477347.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78bbca0bf3f4f4780515872e8286c84296d04cdb
Author: Leon Romanovsky <leon@kernel.org>
Date:   Fri Jul 23 17:08:55 2021 +0300

    RDMA/iwcm: Release resources if iw_cm module initialization fails
    
    [ Upstream commit e677b72a0647249370f2635862bf0241c86f66ad ]
    
    The failure during iw_cm module initialization partially left the system
    with unreleased memory and other resources. Rewrite the module init/exit
    routines in such way that netlink commands will be opened only after
    successful initialization.
    
    Fixes: b493d91d333e ("iwcm: common code for port mapper")
    Link: https://lore.kernel.org/r/b01239f99cb1a3e6d2b0694c242d89e6410bcd93.1627048781.git.leonro@nvidia.com
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9076623badf1dba7a45743bad393ede47ca3f72e
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Jun 29 11:25:50 2021 -0700

    HID: input: do not report stylus battery state as "full"
    
    [ Upstream commit f4abaa9eebde334045ed6ac4e564d050f1df3013 ]
    
    The power supply states of discharging, charging, full, etc, represent
    state of charging, not the capacity level of the battery (for which
    we have a separate property). Current HID usage tables to not allow
    for expressing charging state of the batteries found in generic
    styli, so we should simply assume that the battery is discharging
    even if current capacity is at 100% when battery strength reporting
    is done via HID interface. In fact, we were doing just that before
    commit 581c4484769e.
    
    This change helps UIs to not mis-represent fully charged batteries in
    styli as being charging/topping-off.
    
    Fixes: 581c4484769e ("HID: input: map digitizer battery usage")
    Reported-by: Kenneth Albanowski <kenalba@google.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b04b4e98bb7563fb64e5b5161f935a5a3b0c79be
Author: Pali Rohár <pali@kernel.org>
Date:   Fri Aug 20 17:50:20 2021 +0200

    PCI: aardvark: Fix masking and unmasking legacy INTx interrupts
    
    commit d212dcee27c1f89517181047e5485fcbba4a25c2 upstream.
    
    irq_mask and irq_unmask callbacks need to be properly guarded by raw spin
    locks as masking/unmasking procedure needs atomic read-modify-write
    operation on hardware register.
    
    Link: https://lore.kernel.org/r/20210820155020.3000-1-pali@kernel.org
    Reported-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19d29895971c1ba4d1a31577221aa2bb1931586b
Author: Pali Rohár <pali@kernel.org>
Date:   Thu Jul 22 16:40:39 2021 +0200

    PCI: aardvark: Increase polling delay to 1.5s while waiting for PIO response
    
    commit 02bcec3ea5591720114f586960490b04b093a09e upstream.
    
    Measurements in different conditions showed that aardvark hardware PIO
    response can take up to 1.44s. Increase wait timeout from 1ms to 1.5s to
    ensure that we do not miss responses from hardware. After 1.44s hardware
    returns errors (e.g. Completer abort).
    
    The previous two patches fixed checking for PIO status, so now we can use
    it to also catch errors which are reported by hardware after 1.44s.
    
    After applying this patch, kernel can detect and print PIO errors to dmesg:
    
        [    6.879999] advk-pcie d0070000.pcie: Non-posted PIO Response Status: CA, 0xe00 @ 0x100004
        [    6.896436] advk-pcie d0070000.pcie: Posted PIO Response Status: COMP_ERR, 0x804 @ 0x100004
        [    6.913049] advk-pcie d0070000.pcie: Posted PIO Response Status: COMP_ERR, 0x804 @ 0x100010
        [    6.929663] advk-pcie d0070000.pcie: Non-posted PIO Response Status: CA, 0xe00 @ 0x100010
        [    6.953558] advk-pcie d0070000.pcie: Posted PIO Response Status: COMP_ERR, 0x804 @ 0x100014
        [    6.970170] advk-pcie d0070000.pcie: Non-posted PIO Response Status: CA, 0xe00 @ 0x100014
        [    6.994328] advk-pcie d0070000.pcie: Posted PIO Response Status: COMP_ERR, 0x804 @ 0x100004
    
    Without this patch kernel prints only a generic error to dmesg:
    
        [    5.246847] advk-pcie d0070000.pcie: config read/write timed out
    
    Link: https://lore.kernel.org/r/20210722144041.12661-3-pali@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Cc: stable@vger.kernel.org # 7fbcb5da811b ("PCI: aardvark: Don't rely on jiffies while holding spinlock")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba7a035004e43d969f6a8fd1823ec87c4106d7cc
Author: Hyun Kwon <hyun.kwon@xilinx.com>
Date:   Fri Jun 25 12:48:23 2021 +0200

    PCI: xilinx-nwl: Enable the clock through CCF
    
    commit de0a01f5296651d3a539f2d23d0db8f359483696 upstream.
    
    Enable PCIe reference clock. There is no remove function that's why
    this should be enough for simple operation.
    Normally this clock is enabled by default by firmware but there are
    usecases where this clock should be enabled by driver itself.
    It is also good that PCIe clock is recorded in a clock framework.
    
    Link: https://lore.kernel.org/r/ee6997a08fab582b1c6de05f8be184f3fe8d5357.1624618100.git.michal.simek@xilinx.com
    Fixes: ab597d35ef11 ("PCI: xilinx-nwl: Add support for Xilinx NWL PCIe Host Controller")
    Signed-off-by: Hyun Kwon <hyun.kwon@xilinx.com>
    Signed-off-by: Bharat Kumar Gogada <bharat.kumar.gogada@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60242386c7ef9b084fc138e3d2b7bb99042fd779
Author: Krzysztof Wilczyński <kw@linux.com>
Date:   Thu Jul 29 23:37:54 2021 +0000

    PCI: Return ~0 data on pciconfig_read() CAP_SYS_ADMIN failure
    
    commit a8bd29bd49c4156ea0ec5a97812333e2aeef44e7 upstream.
    
    The pciconfig_read() syscall reads PCI configuration space using
    hardware-dependent config accessors.
    
    If the read fails on PCI, most accessors don't return an error; they
    pretend the read was successful and got ~0 data from the device, so the
    syscall returns success with ~0 data in the buffer.
    
    When the accessor does return an error, pciconfig_read() normally fills the
    user's buffer with ~0 and returns an error in errno.  But after
    e4585da22ad0 ("pci syscall.c: Switch to refcounting API"), we don't fill
    the buffer with ~0 for the EPERM "user lacks CAP_SYS_ADMIN" error.
    
    Userspace may rely on the ~0 data to detect errors, but after e4585da22ad0,
    that would not detect CAP_SYS_ADMIN errors.
    
    Restore the original behaviour of filling the buffer with ~0 when the
    CAP_SYS_ADMIN check fails.
    
    [bhelgaas: commit log, fold in Nathan's fix
    https://lore.kernel.org/r/20210803200836.500658-1-nathan@kernel.org]
    Fixes: e4585da22ad0 ("pci syscall.c: Switch to refcounting API")
    Link: https://lore.kernel.org/r/20210729233755.1509616-1-kw@linux.com
    Signed-off-by: Krzysztof Wilczyński <kw@linux.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e8375e7ad220665dabd0c0f709ba9c04b29d1c9
Author: Marek Behún <kabel@kernel.org>
Date:   Thu Jun 24 19:14:18 2021 +0200

    PCI: Restrict ASMedia ASM1062 SATA Max Payload Size Supported
    
    commit b12d93e9958e028856cbcb061b6e64728ca07755 upstream.
    
    The ASMedia ASM1062 SATA controller advertises Max_Payload_Size_Supported
    of 512, but in fact it cannot handle incoming TLPs with payload size of
    512.
    
    We discovered this issue on PCIe controllers capable of MPS = 512 (Aardvark
    and DesignWare), where the issue presents itself as an External Abort.
    Bjorn Helgaas says:
    
      Probably ASM1062 reports a Malformed TLP error when it receives a data
      payload of 512 bytes, and Aardvark, DesignWare, etc convert this to an
      arm64 External Abort. [1]
    
    To avoid this problem, limit the ASM1062 Max Payload Size Supported to 256
    bytes, so we set the Max Payload Size of devices that may send TLPs to the
    ASM1062 to 256 or less.
    
    [1] https://lore.kernel.org/linux-pci/20210601170907.GA1949035@bjorn-Precision-5520/
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=212695
    Link: https://lore.kernel.org/r/20210624171418.27194-2-kabel@kernel.org
    Reported-by: Rötti <espressobinboardarmbiantempmailaddress@posteo.de>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Krzysztof Wilczyński <kw@linux.com>
    Reviewed-by: Pali Rohár <pali@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e163f6bb5d3b5d565827e04f93767ce6b4143b23
Author: David Heidelberg <david@ixit.cz>
Date:   Mon Aug 9 19:07:30 2021 +0100

    ARM: 9105/1: atags_to_fdt: don't warn about stack size
    
    commit b30d0289de72c62516df03fdad8d53f552c69839 upstream.
    
    The merge_fdt_bootargs() function by definition consumes more than 1024
    bytes of stack because it has a 1024 byte command line on the stack,
    meaning that we always get a warning when building this file:
    
    arch/arm/boot/compressed/atags_to_fdt.c: In function 'merge_fdt_bootargs':
    arch/arm/boot/compressed/atags_to_fdt.c:98:1: warning: the frame size of 1032 bytes is larger than 1024 bytes [-Wframe-larger-than=]
    
    However, as this is the decompressor and we know that it has a very shallow
    call chain, and we do not actually risk overflowing the kernel stack
    at runtime here.
    
    This just shuts up the warning by disabling the warning flag for this
    file.
    
    Tested on Nexus 7 2012 builds.
    
    Acked-by: Nicolas Pitre <nico@fluxnic.net>
    Signed-off-by: David Heidelberg <david@ixit.cz>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98e8d55654c4836a580924443e69daa84358bc91
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Aug 23 11:52:20 2021 +0200

    libata: add ATA_HORKAGE_NO_NCQ_TRIM for Samsung 860 and 870 SSDs
    
    commit 8a6430ab9c9c87cb64c512e505e8690bbaee190b upstream.
    
    Commit ca6bfcb2f6d9 ("libata: Enable queued TRIM for Samsung SSD 860")
    limited the existing ATA_HORKAGE_NO_NCQ_TRIM quirk from "Samsung SSD 8*",
    covering all Samsung 800 series SSDs, to only apply to "Samsung SSD 840*"
    and "Samsung SSD 850*" series based on information from Samsung.
    
    But there is a large number of users which is still reporting issues
    with the Samsung 860 and 870 SSDs combined with Intel, ASmedia or
    Marvell SATA controllers and all reporters also report these problems
    going away when disabling queued trims.
    
    Note that with AMD SATA controllers users are reporting even worse
    issues and only completely disabling NCQ helps there, this will be
    addressed in a separate patch.
    
    Fixes: ca6bfcb2f6d9 ("libata: Enable queued TRIM for Samsung SSD 860")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=203475
    Cc: stable@vger.kernel.org
    Cc: Kate Hsuan <hpa@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Link: https://lore.kernel.org/r/20210823095220.30157-1-hdegoede@redhat.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59d1566f7b5ccb457fca5841157f2a9e10d4da43
Author: Sean Young <sean@mess.org>
Date:   Sat Jul 3 15:37:17 2021 +0200

    media: rc-loopback: return number of emitters rather than error
    
    commit 6b7f554be8c92319d7e6df92fd247ebb9beb4a45 upstream.
    
    The LIRC_SET_TRANSMITTER_MASK ioctl should return the number of emitters
    if an invalid list was set.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6bc08a6af42d789e7b13fcf83f221def6743780
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Thu Jun 17 14:33:29 2021 +0200

    media: uvc: don't do DMA on stack
    
    commit 1a10d7fdb6d0e235e9d230916244cc2769d3f170 upstream.
    
    As warned by smatch:
            drivers/media/usb/uvc/uvc_v4l2.c:911 uvc_ioctl_g_input() error: doing dma on the stack (&i)
            drivers/media/usb/uvc/uvc_v4l2.c:943 uvc_ioctl_s_input() error: doing dma on the stack (&i)
    
    those two functions call uvc_query_ctrl passing a pointer to
    a data at the DMA stack. those are used to send URBs via
    usb_control_msg(). Using DMA stack is not supported and should
    not work anymore on modern Linux versions.
    
    So, use a kmalloc'ed buffer.
    
    Cc: stable@vger.kernel.org      # Kernel 4.9 and upper
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50ac516a77353a277189f17e6a69ed10914376be
Author: Wang Hai <wanghai38@huawei.com>
Date:   Wed Aug 18 20:48:45 2021 +0800

    VMCI: fix NULL pointer dereference when unmapping queue pair
    
    commit a30dc6cf0dc51419021550152e435736aaef8799 upstream.
    
    I got a NULL pointer dereference report when doing fuzz test:
    
    Call Trace:
      qp_release_pages+0xae/0x130
      qp_host_unregister_user_memory.isra.25+0x2d/0x80
      vmci_qp_broker_unmap+0x191/0x320
      ? vmci_host_do_alloc_queuepair.isra.9+0x1c0/0x1c0
      vmci_host_unlocked_ioctl+0x59f/0xd50
      ? do_vfs_ioctl+0x14b/0xa10
      ? tomoyo_file_ioctl+0x28/0x30
      ? vmci_host_do_alloc_queuepair.isra.9+0x1c0/0x1c0
      __x64_sys_ioctl+0xea/0x120
      do_syscall_64+0x34/0xb0
      entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    When a queue pair is created by the following call, it will not
    register the user memory if the page_store is NULL, and the
    entry->state will be set to VMCIQPB_CREATED_NO_MEM.
    
    vmci_host_unlocked_ioctl
      vmci_host_do_alloc_queuepair
        vmci_qp_broker_alloc
          qp_broker_alloc
            qp_broker_create // set entry->state = VMCIQPB_CREATED_NO_MEM;
    
    When unmapping this queue pair, qp_host_unregister_user_memory() will
    be called to unregister the non-existent user memory, which will
    result in a null pointer reference. It will also change
    VMCIQPB_CREATED_NO_MEM to VMCIQPB_CREATED_MEM, which should not be
    present in this operation.
    
    Only when the qp broker has mem, it can unregister the user
    memory when unmapping the qp broker.
    
    Only when the qp broker has no mem, it can register the user
    memory when mapping the qp broker.
    
    Fixes: 06164d2b72aa ("VMCI: queue pairs implementation.")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Jorgen Hansen <jhansen@vmware.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Link: https://lore.kernel.org/r/20210818124845.488312-1-wanghai38@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dafd9d753be60e7df9273177d41d457fb5994fae
Author: Arne Welzel <arne.welzel@corelight.com>
Date:   Sat Aug 14 00:40:38 2021 +0200

    dm crypt: Avoid percpu_counter spinlock contention in crypt_page_alloc()
    
    commit 528b16bfc3ae5f11638e71b3b63a81f9999df727 upstream.
    
    On systems with many cores using dm-crypt, heavy spinlock contention in
    percpu_counter_compare() can be observed when the page allocation limit
    for a given device is reached or close to be reached. This is due
    to percpu_counter_compare() taking a spinlock to compute an exact
    result on potentially many CPUs at the same time.
    
    Switch to non-exact comparison of allocated and allowed pages by using
    the value returned by percpu_counter_read_positive() to avoid taking
    the percpu_counter spinlock.
    
    This may over/under estimate the actual number of allocated pages by at
    most (batch-1) * num_online_cpus().
    
    Currently, batch is bounded by 32. The system on which this issue was
    first observed has 256 CPUs and 512GB of RAM. With a 4k page size, this
    change may over/under estimate by 31MB. With ~10G (2%) allowed dm-crypt
    allocations, this seems an acceptable error. Certainly preferred over
    running into the spinlock contention.
    
    This behavior was reproduced on an EC2 c5.24xlarge instance with 96 CPUs
    and 192GB RAM as follows, but can be provoked on systems with less CPUs
    as well.
    
     * Disable swap
     * Tune vm settings to promote regular writeback
         $ echo 50 > /proc/sys/vm/dirty_expire_centisecs
         $ echo 25 > /proc/sys/vm/dirty_writeback_centisecs
         $ echo $((128 * 1024 * 1024)) > /proc/sys/vm/dirty_background_bytes
    
     * Create 8 dmcrypt devices based on files on a tmpfs
     * Create and mount an ext4 filesystem on each crypt devices
     * Run stress-ng --hdd 8 within one of above filesystems
    
    Total %system usage collected from sysstat goes to ~35%. Write throughput
    on the underlying loop device is ~2GB/s. perf profiling an individual
    kworker kcryptd thread shows the following profile, indicating spinlock
    contention in percpu_counter_compare():
    
        99.98%     0.00%  kworker/u193:46  [kernel.kallsyms]  [k] ret_from_fork
          |
          --ret_from_fork
            kthread
            worker_thread
            |
             --99.92%--process_one_work
                |
                |--80.52%--kcryptd_crypt
                |    |
                |    |--62.58%--mempool_alloc
                |    |  |
                |    |   --62.24%--crypt_page_alloc
                |    |     |
                |    |      --61.51%--__percpu_counter_compare
                |    |        |
                |    |         --61.34%--__percpu_counter_sum
                |    |           |
                |    |           |--58.68%--_raw_spin_lock_irqsave
                |    |           |  |
                |    |           |   --58.30%--native_queued_spin_lock_slowpath
                |    |           |
                |    |            --0.69%--cpumask_next
                |    |                |
                |    |                 --0.51%--_find_next_bit
                |    |
                |    |--10.61%--crypt_convert
                |    |          |
                |    |          |--6.05%--xts_crypt
                ...
    
    After applying this patch and running the same test, %system usage is
    lowered to ~7% and write throughput on the loop device increases
    to ~2.7GB/s. perf report shows mempool_alloc() as ~8% rather than ~62%
    in the profile and not hitting the percpu_counter() spinlock anymore.
    
        |--8.15%--mempool_alloc
        |    |
        |    |--3.93%--crypt_page_alloc
        |    |    |
        |    |     --3.75%--__alloc_pages
        |    |         |
        |    |          --3.62%--get_page_from_freelist
        |    |              |
        |    |               --3.22%--rmqueue_bulk
        |    |                   |
        |    |                    --2.59%--_raw_spin_lock
        |    |                      |
        |    |                       --2.57%--native_queued_spin_lock_slowpath
        |    |
        |     --3.05%--_raw_spin_lock_irqsave
        |               |
        |                --2.49%--native_queued_spin_lock_slowpath
    
    Suggested-by: DJ Gregor <dj@corelight.com>
    Reviewed-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Arne Welzel <arne.welzel@corelight.com>
    Fixes: 5059353df86e ("dm crypt: limit the number of allocated pages")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb7ff81efcc5bd7123a22f66864bc7e88afdd739
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Mon Aug 16 10:27:14 2021 +0200

    power: supply: max17042: handle fails of reading status register
    
    commit 54784ffa5b267f57161eb8fbb811499f22a0a0bf upstream.
    
    Reading status register can fail in the interrupt handler.  In such
    case, the regmap_read() will not store anything useful under passed
    'val' variable and random stack value will be used to determine type of
    interrupt.
    
    Handle the regmap_read() failure to avoid handling interrupt type and
    triggering changed power supply event based on random stack value.
    
    Fixes: 39e7213edc4f ("max17042_battery: Support regmap to access device's registers")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35a276f173356448cd07d83238d2bbc30796b267
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Wed Aug 11 12:36:57 2021 +0900

    block: bfq: fix bfq_set_next_ioprio_data()
    
    commit a680dd72ec336b81511e3bff48efac6dbfa563e7 upstream.
    
    For a request that has a priority level equal to or larger than
    IOPRIO_BE_NR, bfq_set_next_ioprio_data() prints a critical warning but
    defaults to setting the request new_ioprio field to IOPRIO_BE_NR. This
    is not consistent with the warning and the allowed values for priority
    levels. Fix this by setting the request new_ioprio field to
    IOPRIO_BE_NR - 1, the lowest priority level allowed.
    
    Cc: <stable@vger.kernel.org>
    Fixes: aee69d78dec0 ("block, bfq: introduce the BFQ-v0 I/O scheduler as an extra scheduler")
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Link: https://lore.kernel.org/r/20210811033702.368488-2-damien.lemoal@wdc.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aab312696d37de80502ca633b40184de24f22917
Author: zhenwei pi <pizhenwei@bytedance.com>
Date:   Thu Aug 19 20:37:10 2021 +0800

    crypto: public_key: fix overflow during implicit conversion
    
    commit f985911b7bc75d5c98ed24d8aaa8b94c590f7c6a upstream.
    
    Hit kernel warning like this, it can be reproduced by verifying 256
    bytes datafile by keyctl command, run script:
    RAWDATA=rawdata
    SIGDATA=sigdata
    
    modprobe pkcs8_key_parser
    
    rm -rf *.der *.pem *.pfx
    rm -rf $RAWDATA
    dd if=/dev/random of=$RAWDATA bs=256 count=1
    
    openssl req -nodes -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem \
      -subj "/C=CN/ST=GD/L=SZ/O=vihoo/OU=dev/CN=xx.com/emailAddress=yy@xx.com"
    
    KEY_ID=`openssl pkcs8 -in key.pem -topk8 -nocrypt -outform DER | keyctl \
      padd asymmetric 123 @s`
    
    keyctl pkey_sign $KEY_ID 0 $RAWDATA enc=pkcs1 hash=sha1 > $SIGDATA
    keyctl pkey_verify $KEY_ID 0 $RAWDATA $SIGDATA enc=pkcs1 hash=sha1
    
    Then the kernel reports:
     WARNING: CPU: 5 PID: 344556 at crypto/rsa-pkcs1pad.c:540
       pkcs1pad_verify+0x160/0x190
     ...
     Call Trace:
      public_key_verify_signature+0x282/0x380
      ? software_key_query+0x12d/0x180
      ? keyctl_pkey_params_get+0xd6/0x130
      asymmetric_key_verify_signature+0x66/0x80
      keyctl_pkey_verify+0xa5/0x100
      do_syscall_64+0x35/0xb0
      entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The reason of this issue, in function 'asymmetric_key_verify_signature':
    '.digest_size(u8) = params->in_len(u32)' leads overflow of an u8 value,
    so use u32 instead of u8 for digest_size field. And reorder struct
    public_key_signature, it saves 8 bytes on a 64-bit machine.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: zhenwei pi <pizhenwei@bytedance.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79d15fc5646f79e769b90957370a84c0ba981c85
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Aug 23 11:12:53 2021 +0100

    arm64: head: avoid over-mapping in map_memory
    
    commit 90268574a3e8a6b883bd802d702a2738577e1006 upstream.
    
    The `compute_indices` and `populate_entries` macros operate on inclusive
    bounds, and thus the `map_memory` macro which uses them also operates
    on inclusive bounds.
    
    We pass `_end` and `_idmap_text_end` to `map_memory`, but these are
    exclusive bounds, and if one of these is sufficiently aligned (as a
    result of kernel configuration, physical placement, and KASLR), then:
    
    * In `compute_indices`, the computed `iend` will be in the page/block *after*
      the final byte of the intended mapping.
    
    * In `populate_entries`, an unnecessary entry will be created at the end
      of each level of table. At the leaf level, this entry will map up to
      SWAPPER_BLOCK_SIZE bytes of physical addresses that we did not intend
      to map.
    
    As we may map up to SWAPPER_BLOCK_SIZE bytes more than intended, we may
    violate the boot protocol and map physical address past the 2MiB-aligned
    end address we are permitted to map. As we map these with Normal memory
    attributes, this may result in further problems depending on what these
    physical addresses correspond to.
    
    The final entry at each level may require an additional table at that
    level. As EARLY_ENTRIES() calculates an inclusive bound, we allocate
    enough memory for this.
    
    Avoid the extraneous mapping by having map_memory convert the exclusive
    end address to an inclusive end address by subtracting one, and do
    likewise in EARLY_ENTRIES() when calculating the number of required
    tables. For clarity, comments are updated to more clearly document which
    boundaries the macros operate on.  For consistency with the other
    macros, the comments in map_memory are also updated to describe `vstart`
    and `vend` as virtual addresses.
    
    Fixes: 0370b31e4845 ("arm64: Extend early page table code to allow for larger kernels")
    Cc: <stable@vger.kernel.org> # 4.16.x
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Steve Capper <steve.capper@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Acked-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20210823101253.55567-1-mark.rutland@arm.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c8891b638319ddba9cfa330247922cd960c95b0
Author: Iwona Winiarska <iwona.winiarska@intel.com>
Date:   Wed Aug 4 01:48:18 2021 +0200

    soc: aspeed: lpc-ctrl: Fix boundary check for mmap
    
    commit b49a0e69a7b1a68c8d3f64097d06dabb770fec96 upstream.
    
    The check mixes pages (vm_pgoff) with bytes (vm_start, vm_end) on one
    side of the comparison, and uses resource address (rather than just the
    resource size) on the other side of the comparison.
    This can allow malicious userspace to easily bypass the boundary check and
    map pages that are located outside memory-region reserved by the driver.
    
    Fixes: 6c4e97678501 ("drivers/misc: Add Aspeed LPC control driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Iwona Winiarska <iwona.winiarska@intel.com>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Tested-by: Andrew Jeffery <andrew@aj.id.au>
    Reviewed-by: Joel Stanley <joel@aj.id.au>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a918bda2c08e0ec5d350ca8f9208d2179e009173
Author: Rolf Eike Beer <eb@emlix.com>
Date:   Fri Jul 30 13:51:54 2021 +0200

    tools/thermal/tmon: Add cross compiling support
    
    commit b5f7912bb604b47a0fe024560488a7556dce8ee7 upstream.
    
    Default to prefixed pkg-config when crosscompiling, this matches what
    other parts of the tools/ directory already do.
    
    [dlezcano] : Reworked description
    
    Signed-off-by: Rolf Eike Beer <eb@emlix.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/31302992.qZodDJZGDc@devpool47
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a386fceed74e9f1125104eea7e66cff187edeff7
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Sep 13 18:35:37 2021 +0300

    bpf: Fix pointer arithmetic mask tightening under state pruning
    
    commit e042aa532c84d18ff13291d00620502ce7a38dda upstream.
    
    In 7fedb63a8307 ("bpf: Tighten speculative pointer arithmetic mask") we
    narrowed the offset mask for unprivileged pointer arithmetic in order to
    mitigate a corner case where in the speculative domain it is possible to
    advance, for example, the map value pointer by up to value_size-1 out-of-
    bounds in order to leak kernel memory via side-channel to user space.
    
    The verifier's state pruning for scalars leaves one corner case open
    where in the first verification path R_x holds an unknown scalar with an
    aux->alu_limit of e.g. 7, and in a second verification path that same
    register R_x, here denoted as R_x', holds an unknown scalar which has
    tighter bounds and would thus satisfy range_within(R_x, R_x') as well as
    tnum_in(R_x, R_x') for state pruning, yielding an aux->alu_limit of 3:
    Given the second path fits the register constraints for pruning, the final
    generated mask from aux->alu_limit will remain at 7. While technically
    not wrong for the non-speculative domain, it would however be possible
    to craft similar cases where the mask would be too wide as in 7fedb63a8307.
    
    One way to fix it is to detect the presence of unknown scalar map pointer
    arithmetic and force a deeper search on unknown scalars to ensure that
    we do not run into a masking mismatch.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    [OP: adjusted context for 4.19]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4fe956b03316516ce0eca037d480d270b9bed4c
Author: Lorenz Bauer <lmb@cloudflare.com>
Date:   Mon Sep 13 18:35:36 2021 +0300

    bpf: verifier: Allocate idmap scratch in verifier env
    
    commit c9e73e3d2b1eb1ea7ff068e05007eec3bd8ef1c9 upstream.
    
    func_states_equal makes a very short lived allocation for idmap,
    probably because it's too large to fit on the stack. However the
    function is called quite often, leading to a lot of alloc / free
    churn. Replace the temporary allocation with dedicated scratch
    space in struct bpf_verifier_env.
    
    Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Edward Cree <ecree.xilinx@gmail.com>
    Link: https://lore.kernel.org/bpf/20210429134656.122225-4-lmb@cloudflare.com
    [OP: adjusted context for 4.19]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 872968502114d68c21419cf7eb5ab97717e7b803
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Sep 13 18:35:35 2021 +0300

    bpf: Fix leakage due to insufficient speculative store bypass mitigation
    
    commit 2039f26f3aca5b0e419b98f65dd36481337b86ee upstream.
    
    Spectre v4 gadgets make use of memory disambiguation, which is a set of
    techniques that execute memory access instructions, that is, loads and
    stores, out of program order; Intel's optimization manual, section 2.4.4.5:
    
      A load instruction micro-op may depend on a preceding store. Many
      microarchitectures block loads until all preceding store addresses are
      known. The memory disambiguator predicts which loads will not depend on
      any previous stores. When the disambiguator predicts that a load does
      not have such a dependency, the load takes its data from the L1 data
      cache. Eventually, the prediction is verified. If an actual conflict is
      detected, the load and all succeeding instructions are re-executed.
    
    af86ca4e3088 ("bpf: Prevent memory disambiguation attack") tried to mitigate
    this attack by sanitizing the memory locations through preemptive "fast"
    (low latency) stores of zero prior to the actual "slow" (high latency) store
    of a pointer value such that upon dependency misprediction the CPU then
    speculatively executes the load of the pointer value and retrieves the zero
    value instead of the attacker controlled scalar value previously stored at
    that location, meaning, subsequent access in the speculative domain is then
    redirected to the "zero page".
    
    The sanitized preemptive store of zero prior to the actual "slow" store is
    done through a simple ST instruction based on r10 (frame pointer) with
    relative offset to the stack location that the verifier has been tracking
    on the original used register for STX, which does not have to be r10. Thus,
    there are no memory dependencies for this store, since it's only using r10
    and immediate constant of zero; hence af86ca4e3088 /assumed/ a low latency
    operation.
    
    However, a recent attack demonstrated that this mitigation is not sufficient
    since the preemptive store of zero could also be turned into a "slow" store
    and is thus bypassed as well:
    
      [...]
      // r2 = oob address (e.g. scalar)
      // r7 = pointer to map value
      31: (7b) *(u64 *)(r10 -16) = r2
      // r9 will remain "fast" register, r10 will become "slow" register below
      32: (bf) r9 = r10
      // JIT maps BPF reg to x86 reg:
      //  r9  -> r15 (callee saved)
      //  r10 -> rbp
      // train store forward prediction to break dependency link between both r9
      // and r10 by evicting them from the predictor's LRU table.
      33: (61) r0 = *(u32 *)(r7 +24576)
      34: (63) *(u32 *)(r7 +29696) = r0
      35: (61) r0 = *(u32 *)(r7 +24580)
      36: (63) *(u32 *)(r7 +29700) = r0
      37: (61) r0 = *(u32 *)(r7 +24584)
      38: (63) *(u32 *)(r7 +29704) = r0
      39: (61) r0 = *(u32 *)(r7 +24588)
      40: (63) *(u32 *)(r7 +29708) = r0
      [...]
      543: (61) r0 = *(u32 *)(r7 +25596)
      544: (63) *(u32 *)(r7 +30716) = r0
      // prepare call to bpf_ringbuf_output() helper. the latter will cause rbp
      // to spill to stack memory while r13/r14/r15 (all callee saved regs) remain
      // in hardware registers. rbp becomes slow due to push/pop latency. below is
      // disasm of bpf_ringbuf_output() helper for better visual context:
      //
      // ffffffff8117ee20: 41 54                 push   r12
      // ffffffff8117ee22: 55                    push   rbp
      // ffffffff8117ee23: 53                    push   rbx
      // ffffffff8117ee24: 48 f7 c1 fc ff ff ff  test   rcx,0xfffffffffffffffc
      // ffffffff8117ee2b: 0f 85 af 00 00 00     jne    ffffffff8117eee0 <-- jump taken
      // [...]
      // ffffffff8117eee0: 49 c7 c4 ea ff ff ff  mov    r12,0xffffffffffffffea
      // ffffffff8117eee7: 5b                    pop    rbx
      // ffffffff8117eee8: 5d                    pop    rbp
      // ffffffff8117eee9: 4c 89 e0              mov    rax,r12
      // ffffffff8117eeec: 41 5c                 pop    r12
      // ffffffff8117eeee: c3                    ret
      545: (18) r1 = map[id:4]
      547: (bf) r2 = r7
      548: (b7) r3 = 0
      549: (b7) r4 = 4
      550: (85) call bpf_ringbuf_output#194288
      // instruction 551 inserted by verifier    \
      551: (7a) *(u64 *)(r10 -16) = 0            | /both/ are now slow stores here
      // storing map value pointer r7 at fp-16   | since value of r10 is "slow".
      552: (7b) *(u64 *)(r10 -16) = r7           /
      // following "fast" read to the same memory location, but due to dependency
      // misprediction it will speculatively execute before insn 551/552 completes.
      553: (79) r2 = *(u64 *)(r9 -16)
      // in speculative domain contains attacker controlled r2. in non-speculative
      // domain this contains r7, and thus accesses r7 +0 below.
      554: (71) r3 = *(u8 *)(r2 +0)
      // leak r3
    
    As can be seen, the current speculative store bypass mitigation which the
    verifier inserts at line 551 is insufficient since /both/, the write of
    the zero sanitation as well as the map value pointer are a high latency
    instruction due to prior memory access via push/pop of r10 (rbp) in contrast
    to the low latency read in line 553 as r9 (r15) which stays in hardware
    registers. Thus, architecturally, fp-16 is r7, however, microarchitecturally,
    fp-16 can still be r2.
    
    Initial thoughts to address this issue was to track spilled pointer loads
    from stack and enforce their load via LDX through r10 as well so that /both/
    the preemptive store of zero /as well as/ the load use the /same/ register
    such that a dependency is created between the store and load. However, this
    option is not sufficient either since it can be bypassed as well under
    speculation. An updated attack with pointer spill/fills now _all_ based on
    r10 would look as follows:
    
      [...]
      // r2 = oob address (e.g. scalar)
      // r7 = pointer to map value
      [...]
      // longer store forward prediction training sequence than before.
      2062: (61) r0 = *(u32 *)(r7 +25588)
      2063: (63) *(u32 *)(r7 +30708) = r0
      2064: (61) r0 = *(u32 *)(r7 +25592)
      2065: (63) *(u32 *)(r7 +30712) = r0
      2066: (61) r0 = *(u32 *)(r7 +25596)
      2067: (63) *(u32 *)(r7 +30716) = r0
      // store the speculative load address (scalar) this time after the store
      // forward prediction training.
      2068: (7b) *(u64 *)(r10 -16) = r2
      // preoccupy the CPU store port by running sequence of dummy stores.
      2069: (63) *(u32 *)(r7 +29696) = r0
      2070: (63) *(u32 *)(r7 +29700) = r0
      2071: (63) *(u32 *)(r7 +29704) = r0
      2072: (63) *(u32 *)(r7 +29708) = r0
      2073: (63) *(u32 *)(r7 +29712) = r0
      2074: (63) *(u32 *)(r7 +29716) = r0
      2075: (63) *(u32 *)(r7 +29720) = r0
      2076: (63) *(u32 *)(r7 +29724) = r0
      2077: (63) *(u32 *)(r7 +29728) = r0
      2078: (63) *(u32 *)(r7 +29732) = r0
      2079: (63) *(u32 *)(r7 +29736) = r0
      2080: (63) *(u32 *)(r7 +29740) = r0
      2081: (63) *(u32 *)(r7 +29744) = r0
      2082: (63) *(u32 *)(r7 +29748) = r0
      2083: (63) *(u32 *)(r7 +29752) = r0
      2084: (63) *(u32 *)(r7 +29756) = r0
      2085: (63) *(u32 *)(r7 +29760) = r0
      2086: (63) *(u32 *)(r7 +29764) = r0
      2087: (63) *(u32 *)(r7 +29768) = r0
      2088: (63) *(u32 *)(r7 +29772) = r0
      2089: (63) *(u32 *)(r7 +29776) = r0
      2090: (63) *(u32 *)(r7 +29780) = r0
      2091: (63) *(u32 *)(r7 +29784) = r0
      2092: (63) *(u32 *)(r7 +29788) = r0
      2093: (63) *(u32 *)(r7 +29792) = r0
      2094: (63) *(u32 *)(r7 +29796) = r0
      2095: (63) *(u32 *)(r7 +29800) = r0
      2096: (63) *(u32 *)(r7 +29804) = r0
      2097: (63) *(u32 *)(r7 +29808) = r0
      2098: (63) *(u32 *)(r7 +29812) = r0
      // overwrite scalar with dummy pointer; same as before, also including the
      // sanitation store with 0 from the current mitigation by the verifier.
      2099: (7a) *(u64 *)(r10 -16) = 0         | /both/ are now slow stores here
      2100: (7b) *(u64 *)(r10 -16) = r7        | since store unit is still busy.
      // load from stack intended to bypass stores.
      2101: (79) r2 = *(u64 *)(r10 -16)
      2102: (71) r3 = *(u8 *)(r2 +0)
      // leak r3
      [...]
    
    Looking at the CPU microarchitecture, the scheduler might issue loads (such
    as seen in line 2101) before stores (line 2099,2100) because the load execution
    units become available while the store execution unit is still busy with the
    sequence of dummy stores (line 2069-2098). And so the load may use the prior
    stored scalar from r2 at address r10 -16 for speculation. The updated attack
    may work less reliable on CPU microarchitectures where loads and stores share
    execution resources.
    
    This concludes that the sanitizing with zero stores from af86ca4e3088 ("bpf:
    Prevent memory disambiguation attack") is insufficient. Moreover, the detection
    of stack reuse from af86ca4e3088 where previously data (STACK_MISC) has been
    written to a given stack slot where a pointer value is now to be stored does
    not have sufficient coverage as precondition for the mitigation either; for
    several reasons outlined as follows:
    
     1) Stack content from prior program runs could still be preserved and is
        therefore not "random", best example is to split a speculative store
        bypass attack between tail calls, program A would prepare and store the
        oob address at a given stack slot and then tail call into program B which
        does the "slow" store of a pointer to the stack with subsequent "fast"
        read. From program B PoV such stack slot type is STACK_INVALID, and
        therefore also must be subject to mitigation.
    
     2) The STACK_SPILL must not be coupled to register_is_const(&stack->spilled_ptr)
        condition, for example, the previous content of that memory location could
        also be a pointer to map or map value. Without the fix, a speculative
        store bypass is not mitigated in such precondition and can then lead to
        a type confusion in the speculative domain leaking kernel memory near
        these pointer types.
    
    While brainstorming on various alternative mitigation possibilities, we also
    stumbled upon a retrospective from Chrome developers [0]:
    
      [...] For variant 4, we implemented a mitigation to zero the unused memory
      of the heap prior to allocation, which cost about 1% when done concurrently
      and 4% for scavenging. Variant 4 defeats everything we could think of. We
      explored more mitigations for variant 4 but the threat proved to be more
      pervasive and dangerous than we anticipated. For example, stack slots used
      by the register allocator in the optimizing compiler could be subject to
      type confusion, leading to pointer crafting. Mitigating type confusion for
      stack slots alone would have required a complete redesign of the backend of
      the optimizing compiler, perhaps man years of work, without a guarantee of
      completeness. [...]
    
    >From BPF side, the problem space is reduced, however, options are rather
    limited. One idea that has been explored was to xor-obfuscate pointer spills
    to the BPF stack:
    
      [...]
      // preoccupy the CPU store port by running sequence of dummy stores.
      [...]
      2106: (63) *(u32 *)(r7 +29796) = r0
      2107: (63) *(u32 *)(r7 +29800) = r0
      2108: (63) *(u32 *)(r7 +29804) = r0
      2109: (63) *(u32 *)(r7 +29808) = r0
      2110: (63) *(u32 *)(r7 +29812) = r0
      // overwrite scalar with dummy pointer; xored with random 'secret' value
      // of 943576462 before store ...
      2111: (b4) w11 = 943576462
      2112: (af) r11 ^= r7
      2113: (7b) *(u64 *)(r10 -16) = r11
      2114: (79) r11 = *(u64 *)(r10 -16)
      2115: (b4) w2 = 943576462
      2116: (af) r2 ^= r11
      // ... and restored with the same 'secret' value with the help of AX reg.
      2117: (71) r3 = *(u8 *)(r2 +0)
      [...]
    
    While the above would not prevent speculation, it would make data leakage
    infeasible by directing it to random locations. In order to be effective
    and prevent type confusion under speculation, such random secret would have
    to be regenerated for each store. The additional complexity involved for a
    tracking mechanism that prevents jumps such that restoring spilled pointers
    would not get corrupted is not worth the gain for unprivileged. Hence, the
    fix in here eventually opted for emitting a non-public BPF_ST | BPF_NOSPEC
    instruction which the x86 JIT translates into a lfence opcode. Inserting the
    latter in between the store and load instruction is one of the mitigations
    options [1]. The x86 instruction manual notes:
    
      [...] An LFENCE that follows an instruction that stores to memory might
      complete before the data being stored have become globally visible. [...]
    
    The latter meaning that the preceding store instruction finished execution
    and the store is at minimum guaranteed to be in the CPU's store queue, but
    it's not guaranteed to be in that CPU's L1 cache at that point (globally
    visible). The latter would only be guaranteed via sfence. So the load which
    is guaranteed to execute after the lfence for that local CPU would have to
    rely on store-to-load forwarding. [2], in section 2.3 on store buffers says:
    
      [...] For every store operation that is added to the ROB, an entry is
      allocated in the store buffer. This entry requires both the virtual and
      physical address of the target. Only if there is no free entry in the store
      buffer, the frontend stalls until there is an empty slot available in the
      store buffer again. Otherwise, the CPU can immediately continue adding
      subsequent instructions to the ROB and execute them out of order. On Intel
      CPUs, the store buffer has up to 56 entries. [...]
    
    One small upside on the fix is that it lifts constraints from af86ca4e3088
    where the sanitize_stack_off relative to r10 must be the same when coming
    from different paths. The BPF_ST | BPF_NOSPEC gets emitted after a BPF_STX
    or BPF_ST instruction. This happens either when we store a pointer or data
    value to the BPF stack for the first time, or upon later pointer spills.
    The former needs to be enforced since otherwise stale stack data could be
    leaked under speculation as outlined earlier. For non-x86 JITs the BPF_ST |
    BPF_NOSPEC mapping is currently optimized away, but others could emit a
    speculation barrier as well if necessary. For real-world unprivileged
    programs e.g. generated by LLVM, pointer spill/fill is only generated upon
    register pressure and LLVM only tries to do that for pointers which are not
    used often. The program main impact will be the initial BPF_ST | BPF_NOSPEC
    sanitation for the STACK_INVALID case when the first write to a stack slot
    occurs e.g. upon map lookup. In future we might refine ways to mitigate
    the latter cost.
    
      [0] https://arxiv.org/pdf/1902.05178.pdf
      [1] https://msrc-blog.microsoft.com/2018/05/21/analysis-and-mitigation-of-speculative-store-bypass-cve-2018-3639/
      [2] https://arxiv.org/pdf/1905.05725.pdf
    
    Fixes: af86ca4e3088 ("bpf: Prevent memory disambiguation attack")
    Fixes: f7cf25b2026d ("bpf: track spill/fill of constants")
    Co-developed-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Benedict Schlueter <benedict.schlueter@rub.de>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Signed-off-by: Benedict Schlueter <benedict.schlueter@rub.de>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    [OP: - apply check_stack_write_fixed_off() changes in check_stack_write()
         - replace env->bypass_spec_v4 -> env->allow_ptr_leaks]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91cdb5b36234e6af69d6280f1510e4453707a2b8
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Sep 13 18:35:34 2021 +0300

    bpf: Introduce BPF nospec instruction for mitigating Spectre v4
    
    commit f5e81d1117501546b7be050c5fbafa6efd2c722c upstream.
    
    In case of JITs, each of the JIT backends compiles the BPF nospec instruction
    /either/ to a machine instruction which emits a speculation barrier /or/ to
    /no/ machine instruction in case the underlying architecture is not affected
    by Speculative Store Bypass or has different mitigations in place already.
    
    This covers both x86 and (implicitly) arm64: In case of x86, we use 'lfence'
    instruction for mitigation. In case of arm64, we rely on the firmware mitigation
    as controlled via the ssbd kernel parameter. Whenever the mitigation is enabled,
    it works for all of the kernel code with no need to provide any additional
    instructions here (hence only comment in arm64 JIT). Other archs can follow
    as needed. The BPF nospec instruction is specifically targeting Spectre v4
    since i) we don't use a serialization barrier for the Spectre v1 case, and
    ii) mitigation instructions for v1 and v4 might be different on some archs.
    
    The BPF nospec is required for a future commit, where the BPF verifier does
    annotate intermediate BPF programs with speculation barriers.
    
    Co-developed-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Benedict Schlueter <benedict.schlueter@rub.de>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Signed-off-by: Benedict Schlueter <benedict.schlueter@rub.de>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    [OP: adjusted context for 4.19, drop riscv and ppc32 changes]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc578c64398df4f93fd7a6143e218281cc7c4348
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon Sep 13 18:35:33 2021 +0300

    selftests/bpf: fix tests due to const spill/fill
    
    commit fc559a70d57c6ee5443f7a750858503e94cdc941 upstream.
    
    fix tests that incorrectly assumed that the verifier
    cannot track constants through stack.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    [OP: backport to 4.19]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1195c579b2b3f7dd97b8faddcaea1406abac570a
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon Sep 13 18:35:32 2021 +0300

    bpf: track spill/fill of constants
    
    commit f7cf25b2026dc8441e0fa3a202c2aa8a56211e30 upstream.
    
    Compilers often spill induction variables into the stack,
    hence it is necessary for the verifier to track scalar values
    of the registers through stack slots.
    
    Also few bpf programs were incorrectly rejected in the past,
    since the verifier was not able to track such constants while
    they were used to compute offsets into packet headers.
    
    Tracking constants through the stack significantly decreases
    the chances of state pruning, since two different constants
    are considered to be different by state equivalency.
    End result that cilium tests suffer serious degradation in the number
    of states processed and corresponding verification time increase.
    
                         before  after
    bpf_lb-DLB_L3.o      1838    6441
    bpf_lb-DLB_L4.o      3218    5908
    bpf_lb-DUNKNOWN.o    1064    1064
    bpf_lxc-DDROP_ALL.o  26935   93790
    bpf_lxc-DUNKNOWN.o   34439   123886
    bpf_netdev.o         9721    31413
    bpf_overlay.o        6184    18561
    bpf_lxc_jit.o        39389   359445
    
    After further debugging turned out that cillium progs are
    getting hurt by clang due to the same constant tracking issue.
    Newer clang generates better code by spilling less to the stack.
    Instead it keeps more constants in the registers which
    hurts state pruning since the verifier already tracks constants
    in the registers:
                      old clang  new clang
                             (no spill/fill tracking introduced by this patch)
    bpf_lb-DLB_L3.o      1838    1923
    bpf_lb-DLB_L4.o      3218    3077
    bpf_lb-DUNKNOWN.o    1064    1062
    bpf_lxc-DDROP_ALL.o  26935   166729
    bpf_lxc-DUNKNOWN.o   34439   174607
    bpf_netdev.o         9721    8407
    bpf_overlay.o        6184    5420
    bpf_lcx_jit.o        39389   39389
    
    The final table is depressing:
                      old clang  old clang    new clang  new clang
                               const spill/fill        const spill/fill
    bpf_lb-DLB_L3.o      1838    6441          1923      8128
    bpf_lb-DLB_L4.o      3218    5908          3077      6707
    bpf_lb-DUNKNOWN.o    1064    1064          1062      1062
    bpf_lxc-DDROP_ALL.o  26935   93790         166729    380712
    bpf_lxc-DUNKNOWN.o   34439   123886        174607    440652
    bpf_netdev.o         9721    31413         8407      31904
    bpf_overlay.o        6184    18561         5420      23569
    bpf_lxc_jit.o        39389   359445        39389     359445
    
    Tracking constants in the registers hurts state pruning already.
    Adding tracking of constants through stack hurts pruning even more.
    The later patch address this general constant tracking issue
    with coarse/precise logic.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    [OP: - drop verbose_linfo() calls, as the function is not implemented in 4.19
         - adjust mark_reg_read() calls to match the prototype in 4.19]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a28675d4b5cff2bfa0b3475c53edba1f5ec8401
Author: Andrey Ignatov <rdna@fb.com>
Date:   Mon Sep 13 18:35:31 2021 +0300

    selftests/bpf: Test variable offset stack access
    
    commit 8ff80e96e3ccea5ff0a890d4f18997e0344dbec2 upstream.
    
    Test different scenarios of indirect variable-offset stack access: out of
    bound access (>0), min_off below initialized part of the stack,
    max_off+size above initialized part of the stack, initialized stack.
    
    Example of output:
      ...
      #856/p indirect variable-offset stack access, out of bound OK
      #857/p indirect variable-offset stack access, max_off+size > max_initialized OK
      #858/p indirect variable-offset stack access, min_off < min_initialized OK
      #859/p indirect variable-offset stack access, ok OK
      ...
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [OP: backport to 4.19]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7667818ef188832f69e2cf9cfed56e03a8f7436b
Author: Andrey Ignatov <rdna@fb.com>
Date:   Mon Sep 13 18:35:30 2021 +0300

    bpf: Sanity check max value for var_off stack access
    
    commit 107c26a70ca81bfc33657366ad69d02fdc9efc9d upstream.
    
    As discussed in [1] max value of variable offset has to be checked for
    overflow on stack access otherwise verifier would accept code like this:
    
      0: (b7) r2 = 6
      1: (b7) r3 = 28
      2: (7a) *(u64 *)(r10 -16) = 0
      3: (7a) *(u64 *)(r10 -8) = 0
      4: (79) r4 = *(u64 *)(r1 +168)
      5: (c5) if r4 s< 0x0 goto pc+4
       R1=ctx(id=0,off=0,imm=0) R2=inv6 R3=inv28
       R4=inv(id=0,umax_value=9223372036854775807,var_off=(0x0;
       0x7fffffffffffffff)) R10=fp0,call_-1 fp-8=mmmmmmmm fp-16=mmmmmmmm
      6: (17) r4 -= 16
      7: (0f) r4 += r10
      8: (b7) r5 = 8
      9: (85) call bpf_getsockopt#57
      10: (b7) r0 = 0
      11: (95) exit
    
    , where R4 obviosly has unbounded max value.
    
    Fix it by checking that reg->smax_value is inside (-BPF_MAX_VAR_OFF;
    BPF_MAX_VAR_OFF) range.
    
    reg->smax_value is used instead of reg->umax_value because stack
    pointers are calculated using negative offset from fp. This is opposite
    to e.g. map access where offset must be non-negative and where
    umax_value is used.
    
    Also dedicated verbose logs are added for both min and max bound check
    failures to have diagnostics consistent with variable offset handling in
    check_map_access().
    
    [1] https://marc.info/?l=linux-netdev&m=155433357510597&w=2
    
    Fixes: 2011fccfb61b ("bpf: Support variable offset stack access from helpers")
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14cf676ba6a0fb5e495baf843d750070f627d7e8
Author: Andrey Ignatov <rdna@fb.com>
Date:   Mon Sep 13 18:35:29 2021 +0300

    bpf: Reject indirect var_off stack access in unpriv mode
    
    commit 088ec26d9c2da9d879ab73e3f4117f9df6c566ee upstream.
    
    Proper support of indirect stack access with variable offset in
    unprivileged mode (!root) requires corresponding support in Spectre
    masking for stack ALU in retrieve_ptr_limit().
    
    There are no use-case for variable offset in unprivileged mode though so
    make verifier reject such accesses for simplicity.
    
    Pointer arithmetics is one (and only?) way to cause variable offset and
    it's already rejected in unpriv mode so that verifier won't even get to
    helper function whose argument contains variable offset, e.g.:
    
      0: (7a) *(u64 *)(r10 -16) = 0
      1: (7a) *(u64 *)(r10 -8) = 0
      2: (61) r2 = *(u32 *)(r1 +0)
      3: (57) r2 &= 4
      4: (17) r2 -= 16
      5: (0f) r2 += r10
      variable stack access var_off=(0xfffffffffffffff0; 0x4) off=-16 size=1R2
      stack pointer arithmetic goes out of range, prohibited for !root
    
    Still it looks like a good idea to reject variable offset indirect stack
    access for unprivileged mode in check_stack_boundary() explicitly.
    
    Fixes: 2011fccfb61b ("bpf: Support variable offset stack access from helpers")
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    [OP: drop comment in retrieve_ptr_limit()]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 148339cb18ed38a4b1de2269d1a4227fd51376ef
Author: Andrey Ignatov <rdna@fb.com>
Date:   Mon Sep 13 18:35:28 2021 +0300

    bpf: Reject indirect var_off stack access in raw mode
    
    commit f2bcd05ec7b839ff826d2008506ad2d2dff46a59 upstream.
    
    It's hard to guarantee that whole memory is marked as initialized on
    helper return if uninitialized stack is accessed with variable offset
    since specific bounds are unknown to verifier. This may cause
    uninitialized stack leaking.
    
    Reject such an access in check_stack_boundary to prevent possible
    leaking.
    
    There are no known use-cases for indirect uninitialized stack access
    with variable offset so it shouldn't break anything.
    
    Fixes: 2011fccfb61b ("bpf: Support variable offset stack access from helpers")
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caee4103f09e3dcce2ec0d0faf6ff245a6cffbad
Author: Andrey Ignatov <rdna@fb.com>
Date:   Mon Sep 13 18:35:27 2021 +0300

    bpf: Support variable offset stack access from helpers
    
    commit 2011fccfb61bbd1d7c8864b2b3ed7012342e9ba3 upstream.
    
    Currently there is a difference in how verifier checks memory access for
    helper arguments for PTR_TO_MAP_VALUE and PTR_TO_STACK with regard to
    variable part of offset.
    
    check_map_access, that is used for PTR_TO_MAP_VALUE, can handle variable
    offsets just fine, so that BPF program can call a helper like this:
    
      some_helper(map_value_ptr + off, size);
    
    , where offset is unknown at load time, but is checked by program to be
    in a safe rage (off >= 0 && off + size < map_value_size).
    
    But it's not the case for check_stack_boundary, that is used for
    PTR_TO_STACK, and same code with pointer to stack is rejected by
    verifier:
    
      some_helper(stack_value_ptr + off, size);
    
    For example:
      0: (7a) *(u64 *)(r10 -16) = 0
      1: (7a) *(u64 *)(r10 -8) = 0
      2: (61) r2 = *(u32 *)(r1 +0)
      3: (57) r2 &= 4
      4: (17) r2 -= 16
      5: (0f) r2 += r10
      6: (18) r1 = 0xffff888111343a80
      8: (85) call bpf_map_lookup_elem#1
      invalid variable stack read R2 var_off=(0xfffffffffffffff0; 0x4)
    
    Add support for variable offset access to check_stack_boundary so that
    if offset is checked by program to be in a safe range it's accepted by
    verifier.
    
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [OP: replace reg_state(env, regno) helper with "cur_regs(env) + regno"]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79aba0ac3df1a604e843780b17c37646e175b4f8
Author: Jiong Wang <jiong.wang@netronome.com>
Date:   Mon Sep 13 18:35:26 2021 +0300

    bpf: correct slot_type marking logic to allow more stack slot sharing
    
    commit 0bae2d4d62d523f06ff1a8e88ce38b45400acd28 upstream.
    
    Verifier is supposed to support sharing stack slot allocated to ptr with
    SCALAR_VALUE for privileged program. However this doesn't happen for some
    cases.
    
    The reason is verifier is not clearing slot_type STACK_SPILL for all bytes,
    it only clears part of them, while verifier is using:
    
      slot_type[0] == STACK_SPILL
    
    as a convention to check one slot is ptr type.
    
    So, the consequence of partial clearing slot_type is verifier could treat a
    partially overridden ptr slot, which should now be a SCALAR_VALUE slot,
    still as ptr slot, and rejects some valid programs.
    
    Before this patch, test_xdp_noinline.o under bpf selftests, bpf_lxc.o and
    bpf_netdev.o under Cilium bpf repo, when built with -mattr=+alu32 are
    rejected due to this issue. After this patch, they all accepted.
    
    There is no processed insn number change before and after this patch on
    Cilium bpf programs.
    
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
    Reviewed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [OP: adjusted context for 4.19]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 228e64bdbb1c5004a015bac942dd649f8ccab8c9
Author: Edward Cree <ecree@solarflare.com>
Date:   Mon Sep 13 18:35:25 2021 +0300

    bpf/verifier: per-register parent pointers
    
    commit 679c782de14bd48c19dd74cd1af20a2bc05dd936 upstream.
    
    By giving each register its own liveness chain, we elide the skip_callee()
     logic.  Instead, each register's parent is the state it inherits from;
     both check_func_call() and prepare_func_exit() automatically connect
     reg states to the correct chain since when they copy the reg state across
     (r1-r5 into the callee as args, and r0 out as the return value) they also
     copy the parent pointer.
    
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [OP: adjusted context for 4.19]
    Signed-off-by: Ovidiu Panait <ovidiu.panait@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46a43575b8c36a32f6d951a77403e0c29d424c5e
Author: Harshvardhan Jha <harshvardhan.jha@oracle.com>
Date:   Tue Jul 27 05:37:10 2021 +0530

    9p/xen: Fix end of loop tests for list_for_each_entry
    
    commit 732b33d0dbf17e9483f0b50385bf606f724f50a2 upstream.
    
    This patch addresses the following problems:
     - priv can never be NULL, so this part of the check is useless
     - if the loop ran through the whole list, priv->client is invalid and
    it is more appropriate and sufficient to check for the end of
    list_for_each_entry loop condition.
    
    Link: http://lkml.kernel.org/r/20210727000709.225032-1-harshvardhan.jha@oracle.com
    Signed-off-by: Harshvardhan Jha <harshvardhan.jha@oracle.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Tested-by: Stefano Stabellini <sstabellini@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 386a913d4960a83cc4657ebe0c9bc462d8f5e2a1
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Oct 15 20:11:31 2020 -0700

    include/linux/list.h: add a macro to test if entry is pointing to the head
    
    commit e130816164e244b692921de49771eeb28205152d upstream.
    
    Add a macro to test if entry is pointing to the head of the list which is
    useful in cases like:
    
      list_for_each_entry(pos, &head, member) {
        if (cond)
          break;
      }
      if (list_entry_is_head(pos, &head, member))
        return -ERRNO;
    
    that allows to avoid additional variable to be added to track if loop has
    not been stopped in the middle.
    
    While here, convert list_for_each_entry*() family of macros to use a new one.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lkml.kernel.org/r/20200929134342.51489-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a52a5266080aa53dce51d58efdfd7b69b85d08fb
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Jul 30 11:26:21 2021 +0200

    xen: fix setting of max_pfn in shared_info
    
    commit 4b511d5bfa74b1926daefd1694205c7f1bcf677f upstream.
    
    Xen PV guests are specifying the highest used PFN via the max_pfn
    field in shared_info. This value is used by the Xen tools when saving
    or migrating the guest.
    
    Unfortunately this field is misnamed, as in reality it is specifying
    the number of pages (including any memory holes) of the guest, so it
    is the highest used PFN + 1. Renaming isn't possible, as this is a
    public Xen hypervisor interface which needs to be kept stable.
    
    The kernel will set the value correctly initially at boot time, but
    when adding more pages (e.g. due to memory hotplug or ballooning) a
    real PFN number is stored in max_pfn. This is done when expanding the
    p2m array, and the PFN stored there is even possibly wrong, as it
    should be the last possible PFN of the just added P2M frame, and not
    one which led to the P2M expansion.
    
    Fix that by setting shared_info->max_pfn to the last possible PFN + 1.
    
    Fixes: 98dd166ea3a3c3 ("x86/xen/p2m: hint at the last populated P2M entry")
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Link: https://lore.kernel.org/r/20210730092622.9973-2-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90a2eb8a436341b1b4c5e5226dc78408ad8a97e4
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Fri Aug 13 13:51:58 2021 +0530

    powerpc/perf/hv-gpci: Fix counter value parsing
    
    commit f9addd85fbfacf0d155e83dbee8696d6df5ed0c7 upstream.
    
    H_GetPerformanceCounterInfo (0xF080) hcall returns the counter data in
    the result buffer. Result buffer has specific format defined in the PAPR
    specification. One of the fields is counter offset and width of the
    counter data returned.
    
    Counter data are returned in a unsigned char array in big endian byte
    order. To get the final counter data, the values must be left shifted
    byte at a time. But commit 220a0c609ad17 ("powerpc/perf: Add support for
    the hv gpci (get performance counter info) interface") made the shifting
    bitwise and also assumed little endian order. Because of that, hcall
    counters values are reported incorrectly.
    
    In particular this can lead to counters go backwards which messes up the
    counter prev vs now calculation and leads to huge counter value
    reporting:
    
      #: perf stat -e hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
               -C 0 -I 1000
            time             counts unit events
         1.000078854 18,446,744,073,709,535,232      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         2.000213293                  0      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         3.000320107                  0      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         4.000428392                  0      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         5.000537864                  0      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         6.000649087                  0      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         7.000760312                  0      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         8.000865218             16,448      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         9.000978985 18,446,744,073,709,535,232      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
        10.001088891             16,384      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
        11.001201435                  0      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
        12.001307937 18,446,744,073,709,535,232      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
    
    Fix the shifting logic to correct match the format, ie. read bytes in
    big endian order.
    
    Fixes: e4f226b1580b ("powerpc/perf/hv-gpci: Increase request buffer size")
    Cc: stable@vger.kernel.org # v4.6+
    Reported-by: Nageswara R Sastry<rnsastry@linux.ibm.com>
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Tested-by: Nageswara R Sastry<rnsastry@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210813082158.429023-1-kjain@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34b23fc32c05f14fd21caa32544f3720e1527a8d
Author: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
Date:   Thu Aug 26 19:03:42 2021 +0200

    PCI/MSI: Skip masking MSI-X on Xen PV
    
    commit 1a519dc7a73c977547d8b5108d98c6e769c89f4b upstream.
    
    When running as Xen PV guest, masking MSI-X is a responsibility of the
    hypervisor. The guest has no write access to the relevant BAR at all - when
    it tries to, it results in a crash like this:
    
        BUG: unable to handle page fault for address: ffffc9004069100c
        #PF: supervisor write access in kernel mode
        #PF: error_code(0x0003) - permissions violation
        RIP: e030:__pci_enable_msix_range.part.0+0x26b/0x5f0
         e1000e_set_interrupt_capability+0xbf/0xd0 [e1000e]
         e1000_probe+0x41f/0xdb0 [e1000e]
         local_pci_probe+0x42/0x80
        (...)
    
    The recently introduced function msix_mask_all() does not check the global
    variable pci_msi_ignore_mask which is set by XEN PV to bypass the masking
    of MSI[-X] interrupts.
    
    Add the check to make this function XEN PV compatible.
    
    Fixes: 7d5ec3d36123 ("PCI/MSI: Mask all unused MSI-X entries")
    Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210826170342.135172-1-marmarek@invisiblethingslab.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20c1d98ca96be6b2b583806a01899b1a8d88924b
Author: Niklas Cassel <niklas.cassel@wdc.com>
Date:   Wed Aug 11 11:05:19 2021 +0000

    blk-zoned: allow BLKREPORTZONE without CAP_SYS_ADMIN
    
    commit 4d643b66089591b4769bcdb6fd1bfeff2fe301b8 upstream.
    
    A user space process should not need the CAP_SYS_ADMIN capability set
    in order to perform a BLKREPORTZONE ioctl.
    
    Getting the zone report is required in order to get the write pointer.
    Neither read() nor write() requires CAP_SYS_ADMIN, so it is reasonable
    that a user space process that can read/write from/to the device, also
    can get the write pointer. (Since e.g. writes have to be at the write
    pointer.)
    
    Fixes: 3ed05a987e0f ("blk-zoned: implement ioctls")
    Signed-off-by: Niklas Cassel <niklas.cassel@wdc.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Aravind Ramesh <aravind.ramesh@wdc.com>
    Reviewed-by: Adam Manzanares <a.manzanares@samsung.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Cc: stable@vger.kernel.org # v4.10+
    Link: https://lore.kernel.org/r/20210811110505.29649-3-Niklas.Cassel@wdc.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d860ad5128b1d0adb8bb0b32275b46111568794b
Author: Niklas Cassel <niklas.cassel@wdc.com>
Date:   Wed Aug 11 11:05:18 2021 +0000

    blk-zoned: allow zone management send operations without CAP_SYS_ADMIN
    
    commit ead3b768bb51259e3a5f2287ff5fc9041eb6f450 upstream.
    
    Zone management send operations (BLKRESETZONE, BLKOPENZONE, BLKCLOSEZONE
    and BLKFINISHZONE) should be allowed under the same permissions as write().
    (write() does not require CAP_SYS_ADMIN).
    
    Additionally, other ioctls like BLKSECDISCARD and BLKZEROOUT only check if
    the fd was successfully opened with FMODE_WRITE.
    (They do not require CAP_SYS_ADMIN).
    
    Currently, zone management send operations require both CAP_SYS_ADMIN
    and that the fd was successfully opened with FMODE_WRITE.
    
    Remove the CAP_SYS_ADMIN requirement, so that zone management send
    operations match the access control requirement of write(), BLKSECDISCARD
    and BLKZEROOUT.
    
    Fixes: 3ed05a987e0f ("blk-zoned: implement ioctls")
    Signed-off-by: Niklas Cassel <niklas.cassel@wdc.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Aravind Ramesh <aravind.ramesh@wdc.com>
    Reviewed-by: Adam Manzanares <a.manzanares@samsung.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Cc: stable@vger.kernel.org # v4.10+
    Link: https://lore.kernel.org/r/20210811110505.29649-2-Niklas.Cassel@wdc.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e44d9cfb15a3c2a304545eaf2f7aa882b4263578
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Sat Aug 21 01:50:40 2021 +0800

    btrfs: reset replace target device to allocation state on close
    
    commit 0d977e0eba234e01a60bdde27314dc21374201b3 upstream.
    
    This crash was observed with a failed assertion on device close:
    
      BTRFS: Transaction aborted (error -28)
      WARNING: CPU: 1 PID: 3902 at fs/btrfs/extent-tree.c:2150 btrfs_run_delayed_refs+0x1d2/0x1e0 [btrfs]
      Modules linked in: btrfs blake2b_generic libcrc32c crc32c_intel xor zstd_decompress zstd_compress xxhash lzo_compress lzo_decompress raid6_pq loop
      CPU: 1 PID: 3902 Comm: kworker/u8:4 Not tainted 5.14.0-rc5-default+ #1532
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba527-rebuilt.opensuse.org 04/01/2014
      Workqueue: events_unbound btrfs_async_reclaim_metadata_space [btrfs]
      RIP: 0010:btrfs_run_delayed_refs+0x1d2/0x1e0 [btrfs]
      RSP: 0018:ffffb7a5452d7d80 EFLAGS: 00010282
      RAX: 0000000000000000 RBX: 0000000000000003 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffffffffabee13c4 RDI: 00000000ffffffff
      RBP: ffff97834176a378 R08: 0000000000000001 R09: 0000000000000001
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff97835195d388
      R13: 0000000005b08000 R14: ffff978385484000 R15: 000000000000016c
      FS:  0000000000000000(0000) GS:ffff9783bd800000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 000056190d003fe8 CR3: 000000002a81e005 CR4: 0000000000170ea0
      Call Trace:
       flush_space+0x197/0x2f0 [btrfs]
       btrfs_async_reclaim_metadata_space+0x139/0x300 [btrfs]
       process_one_work+0x262/0x5e0
       worker_thread+0x4c/0x320
       ? process_one_work+0x5e0/0x5e0
       kthread+0x144/0x170
       ? set_kthread_struct+0x40/0x40
       ret_from_fork+0x1f/0x30
      irq event stamp: 19334989
      hardirqs last  enabled at (19334997): [<ffffffffab0e0c87>] console_unlock+0x2b7/0x400
      hardirqs last disabled at (19335006): [<ffffffffab0e0d0d>] console_unlock+0x33d/0x400
      softirqs last  enabled at (19334900): [<ffffffffaba0030d>] __do_softirq+0x30d/0x574
      softirqs last disabled at (19334893): [<ffffffffab0721ec>] irq_exit_rcu+0x12c/0x140
      ---[ end trace 45939e308e0dd3c7 ]---
      BTRFS: error (device vdd) in btrfs_run_delayed_refs:2150: errno=-28 No space left
      BTRFS info (device vdd): forced readonly
      BTRFS warning (device vdd): failed setting block group ro: -30
      BTRFS info (device vdd): suspending dev_replace for unmount
      assertion failed: !test_bit(BTRFS_DEV_STATE_REPLACE_TGT, &device->dev_state), in fs/btrfs/volumes.c:1150
      ------------[ cut here ]------------
      kernel BUG at fs/btrfs/ctree.h:3431!
      invalid opcode: 0000 [#1] PREEMPT SMP
      CPU: 1 PID: 3982 Comm: umount Tainted: G        W         5.14.0-rc5-default+ #1532
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba527-rebuilt.opensuse.org 04/01/2014
      RIP: 0010:assertfail.constprop.0+0x18/0x1a [btrfs]
      RSP: 0018:ffffb7a5454c7db8 EFLAGS: 00010246
      RAX: 0000000000000068 RBX: ffff978364b91c00 RCX: 0000000000000000
      RDX: 0000000000000000 RSI: ffffffffabee13c4 RDI: 00000000ffffffff
      RBP: ffff9783523a4c00 R08: 0000000000000001 R09: 0000000000000001
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff9783523a4d18
      R13: 0000000000000000 R14: 0000000000000004 R15: 0000000000000003
      FS:  00007f61c8f42800(0000) GS:ffff9783bd800000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 000056190cffa810 CR3: 0000000030b96002 CR4: 0000000000170ea0
      Call Trace:
       btrfs_close_one_device.cold+0x11/0x55 [btrfs]
       close_fs_devices+0x44/0xb0 [btrfs]
       btrfs_close_devices+0x48/0x160 [btrfs]
       generic_shutdown_super+0x69/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x2c/0xa0
       cleanup_mnt+0x144/0x1b0
       task_work_run+0x59/0xa0
       exit_to_user_mode_loop+0xe7/0xf0
       exit_to_user_mode_prepare+0xaf/0xf0
       syscall_exit_to_user_mode+0x19/0x50
       do_syscall_64+0x4a/0x90
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    This happens when close_ctree is called while a dev_replace hasn't
    completed. In close_ctree, we suspend the dev_replace, but keep the
    replace target around so that we can resume the dev_replace procedure
    when we mount the root again. This is the call trace:
    
      close_ctree():
        btrfs_dev_replace_suspend_for_unmount();
        btrfs_close_devices():
          btrfs_close_fs_devices():
            btrfs_close_one_device():
              ASSERT(!test_bit(BTRFS_DEV_STATE_REPLACE_TGT,
                     &device->dev_state));
    
    However, since the replace target sticks around, there is a device
    with BTRFS_DEV_STATE_REPLACE_TGT set on close, and we fail the
    assertion in btrfs_close_one_device.
    
    To fix this, if we come across the replace target device when
    closing, we should properly reset it back to allocation state. This
    fix also ensures that if a non-target device has a corrupted state and
    has the BTRFS_DEV_STATE_REPLACE_TGT bit set, the assertion will still
    catch the error.
    
    Reported-by: David Sterba <dsterba@suse.com>
    Fixes: b2a616676839 ("btrfs: fix rw device counting in __btrfs_free_extra_devids")
    CC: stable@vger.kernel.org # 4.19+
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f420390a0baff373f964b795490d0ba1547fb03
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Aug 8 19:00:30 2021 +0300

    rtc: tps65910: Correct driver module alias
    
    commit 8d448fa0a8bb1c8d94eef7647edffe9ac81a281e upstream.
    
    The TPS65910 RTC driver module doesn't auto-load because of the wrong
    module alias that doesn't match the device name, fix it.
    
    Cc: stable@vger.kernel.org
    Reported-by: Anton Bambura <jenneron@protonmail.com>
    Tested-by: Anton Bambura <jenneron@protonmail.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20210808160030.8556-1-digetx@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf5504e5b52f494723f4fade0e59227878592549
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Aug 15 01:55:14 2021 +0200

    clk: kirkwood: Fix a clocking boot regression
    
    commit aaedb9e00e5400220a8871180d23a83e67f29f63 upstream.
    
    Since a few kernel releases the Pogoplug 4 has crashed like this
    during boot:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000002
    (...)
    [<c04116ec>] (strlen) from [<c00ead80>] (kstrdup+0x1c/0x4c)
    [<c00ead80>] (kstrdup) from [<c04591d8>] (__clk_register+0x44/0x37c)
    [<c04591d8>] (__clk_register) from [<c04595ec>] (clk_hw_register+0x20/0x44)
    [<c04595ec>] (clk_hw_register) from [<c045bfa8>] (__clk_hw_register_mux+0x198/0x1e4)
    [<c045bfa8>] (__clk_hw_register_mux) from [<c045c050>] (clk_register_mux_table+0x5c/0x6c)
    [<c045c050>] (clk_register_mux_table) from [<c0acf3e0>] (kirkwood_clk_muxing_setup.constprop.0+0x13c/0x1ac)
    [<c0acf3e0>] (kirkwood_clk_muxing_setup.constprop.0) from [<c0aceae0>] (of_clk_init+0x12c/0x214)
    [<c0aceae0>] (of_clk_init) from [<c0ab576c>] (time_init+0x20/0x2c)
    [<c0ab576c>] (time_init) from [<c0ab3d18>] (start_kernel+0x3dc/0x56c)
    [<c0ab3d18>] (start_kernel) from [<00000000>] (0x0)
    Code: e3130020 1afffffb e12fff1e c08a1078 (e5d03000)
    
    This is because the "powersave" mux clock 0 was provided in an unterminated
    array, which is required by the loop in the driver:
    
            /* Count, allocate, and register clock muxes */
            for (n = 0; desc[n].name;)
                    n++;
    
    Here n will go out of bounds and then call clk_register_mux() on random
    memory contents after the mux clock.
    
    Fix this by terminating the array with a blank entry.
    
    Fixes: 105299381d87 ("cpufreq: kirkwood: use the powersave multiplexer")
    Cc: stable@vger.kernel.org
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Cc: Gregory CLEMENT <gregory.clement@bootlin.com>
    Cc: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20210814235514.403426-1-linus.walleij@linaro.org
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5ea08842b23dd665dee7e006f91d73461c374ba
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Thu Jul 22 15:46:23 2021 +0100

    backlight: pwm_bl: Improve bootloader/kernel device handover
    
    commit 79fad92f2e596f5a8dd085788a24f540263ef887 upstream.
    
    Currently there are (at least) two problems in the way pwm_bl starts
    managing the enable_gpio pin. Both occur when the backlight is initially
    off and the driver finds the pin not already in output mode and, as a
    result, unconditionally switches it to output-mode and asserts the signal.
    
    Problem 1: This could cause the backlight to flicker since, at this stage
    in driver initialisation, we have no idea what the PWM and regulator are
    doing (an unconfigured PWM could easily "rest" at 100% duty cycle).
    
    Problem 2: This will cause us not to correctly honour the
    post_pwm_on_delay (which also risks flickers).
    
    Fix this by moving the code to configure the GPIO output mode until after
    we have examines the handover state. That allows us to initialize
    enable_gpio to off if the backlight is currently off and on if the
    backlight is on.
    
    Cc: stable@vger.kernel.org
    Reported-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Acked-by: Marek Vasut <marex@denx.de>
    Tested-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f87c22d3dd91795590524ba69bb4368f8957a72
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Wed Sep 8 19:27:49 2021 +0900

    fbmem: don't allow too huge resolutions
    
    commit 8c28051cdcbe9dfcec6bd0a4709d67a09df6edae upstream.
    
    syzbot is reporting page fault at vga16fb_fillrect() [1], for
    vga16fb_check_var() is failing to detect multiplication overflow.
    
      if (vxres * vyres > maxmem) {
        vyres = maxmem / vxres;
        if (vyres < yres)
          return -ENOMEM;
      }
    
    Since no module would accept too huge resolutions where multiplication
    overflow happens, let's reject in the common path.
    
    Link: https://syzkaller.appspot.com/bug?extid=04168c8063cfdde1db5e [1]
    Reported-by: syzbot <syzbot+04168c8063cfdde1db5e@syzkaller.appspotmail.com>
    Debugged-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/185175d6-227a-7b55-433d-b070929b262c@i-love.sakura.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e71c3544b5d620f12064d9aa026ccfae0dfb644
Author: THOBY Simon <Simon.THOBY@viveris.fr>
Date:   Mon Aug 16 08:10:59 2021 +0000

    IMA: remove the dependency on CRYPTO_MD5
    
    commit 8510505d55e194d3f6c9644c9f9d12c4f6b0395a upstream.
    
    MD5 is a weak digest algorithm that shouldn't be used for cryptographic
    operation. It hinders the efficiency of a patch set that aims to limit
    the digests allowed for the extended file attribute namely security.ima.
    MD5 is no longer a requirement for IMA, nor should it be used there.
    
    The sole place where we still use the MD5 algorithm inside IMA is setting
    the ima_hash algorithm to MD5, if the user supplies 'ima_hash=md5'
    parameter on the command line.  With commit ab60368ab6a4 ("ima: Fallback
    to the builtin hash algorithm"), setting "ima_hash=md5" fails gracefully
    when CRYPTO_MD5 is not set:
            ima: Can not allocate md5 (reason: -2)
            ima: Allocating md5 failed, going to use default hash algorithm sha256
    
    Remove the CRYPTO_MD5 dependency for IMA.
    
    Signed-off-by: THOBY Simon <Simon.THOBY@viveris.fr>
    Reviewed-by: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
    [zohar@linux.ibm.com: include commit number in patch description for
    stable.]
    Cc: stable@vger.kernel.org # 4.17
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38521398d51d5c0bf37280e55e1cc45ae29b82a1
Author: Austin Kim <austin.kim@lge.com>
Date:   Tue Jun 29 14:50:50 2021 +0100

    IMA: remove -Wmissing-prototypes warning
    
    commit a32ad90426a9c8eb3915eed26e08ce133bd9e0da upstream.
    
    With W=1 build, the compiler throws warning message as below:
    
       security/integrity/ima/ima_mok.c:24:12: warning:
       no previous prototype for ‘ima_mok_init’ [-Wmissing-prototypes]
           __init int ima_mok_init(void)
    
    Silence the warning by adding static keyword to ima_mok_init().
    
    Signed-off-by: Austin Kim <austin.kim@lge.com>
    Fixes: 41c89b64d718 ("IMA: create machine owner and blacklist keyrings")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c086bf77be04888157e7a94ba7d43dadffe2ca55
Author: Zelin Deng <zelin.deng@linux.alibaba.com>
Date:   Wed Apr 28 10:22:01 2021 +0800

    KVM: x86: Update vCPU's hv_clock before back to guest when tsc_offset is adjusted
    
    commit d9130a2dfdd4b21736c91b818f87dbc0ccd1e757 upstream.
    
    When MSR_IA32_TSC_ADJUST is written by guest due to TSC ADJUST feature
    especially there's a big tsc warp (like a new vCPU is hot-added into VM
    which has been up for a long time), tsc_offset is added by a large value
    then go back to guest. This causes system time jump as tsc_timestamp is
    not adjusted in the meantime and pvclock monotonic character.
    To fix this, just notify kvm to update vCPU's guest time before back to
    guest.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Zelin Deng <zelin.deng@linux.alibaba.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <1619576521-81399-2-git-send-email-zelin.deng@linux.alibaba.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e726fa6971f145a23830ded7ce1f17086a0cf82e
Author: Babu Moger <babu.moger@amd.com>
Date:   Fri Aug 20 16:52:42 2021 -0500

    x86/resctrl: Fix a maybe-uninitialized build warning treated as error
    
    commit 527f721478bce3f49b513a733bacd19d6f34b08c upstream.
    
    The recent commit
    
      064855a69003 ("x86/resctrl: Fix default monitoring groups reporting")
    
    caused a RHEL build failure with an uninitialized variable warning
    treated as an error because it removed the default case snippet.
    
    The RHEL Makefile uses '-Werror=maybe-uninitialized' to force possibly
    uninitialized variable warnings to be treated as errors. This is also
    reported by smatch via the 0day robot.
    
    The error from the RHEL build is:
    
      arch/x86/kernel/cpu/resctrl/monitor.c: In function ‘__mon_event_count’:
      arch/x86/kernel/cpu/resctrl/monitor.c:261:12: error: ‘m’ may be used
      uninitialized in this function [-Werror=maybe-uninitialized]
        m->chunks += chunks;
                  ^~
    
    The upstream Makefile does not build using '-Werror=maybe-uninitialized'.
    So, the problem is not seen there. Fix the problem by putting back the
    default case snippet.
    
     [ bp: note that there's nothing wrong with the code and other compilers
       do not trigger this warning - this is being done just so the RHEL compiler
       is happy. ]
    
    Fixes: 064855a69003 ("x86/resctrl: Fix default monitoring groups reporting")
    Reported-by: Terry Bowman <Terry.Bowman@amd.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Babu Moger <babu.moger@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/162949631908.23903.17090272726012848523.stgit@bmoger-ubuntu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7bffefa322a3d5a292c0b7a9b93302b392928f6
Author: Nguyen Dinh Phi <phind.uet@gmail.com>
Date:   Mon Aug 23 08:06:41 2021 +0800

    tty: Fix data race between tiocsti() and flush_to_ldisc()
    
    commit bb2853a6a421a052268eee00fd5d3f6b3504b2b1 upstream.
    
    The ops->receive_buf() may be accessed concurrently from these two
    functions.  If the driver flushes data to the line discipline
    receive_buf() method while tiocsti() is waiting for the
    ops->receive_buf() to finish its work, the data race will happen.
    
    For example:
    tty_ioctl                       |tty_ldisc_receive_buf
     ->tioctsi                      | ->tty_port_default_receive_buf
                                    |  ->tty_ldisc_receive_buf
       ->hci_uart_tty_receive       |   ->hci_uart_tty_receive
        ->h4_recv                   |    ->h4_recv
    
    In this case, the h4 receive buffer will be overwritten by the
    latecomer, and we will lost the data.
    
    Hence, change tioctsi() function to use the exclusive lock interface
    from tty_buffer to avoid the data race.
    
    Reported-by: syzbot+97388eb9d31b997fe1d0@syzkaller.appspotmail.com
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Nguyen Dinh Phi <phind.uet@gmail.com>
    Link: https://lore.kernel.org/r/20210823000641.2082292-1-phind.uet@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e7b9f8867ad82a1ef495abb32f127d5142fb107
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Sep 8 14:50:33 2021 -0700

    ubifs: report correct st_size for encrypted symlinks
    
    commit 064c734986011390b4d111f1a99372b7f26c3850 upstream.
    
    The stat() family of syscalls report the wrong size for encrypted
    symlinks, which has caused breakage in several userspace programs.
    
    Fix this by calling fscrypt_symlink_getattr() after ubifs_getattr() for
    encrypted symlinks.  This function computes the correct size by reading
    and decrypting the symlink target (if it's not already cached).
    
    For more details, see the commit which added fscrypt_symlink_getattr().
    
    Fixes: ca7f85be8d6c ("ubifs: Add support for encrypted symlinks")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210702065350.209646-5-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8377a6af62992a55b19da1c3ac2b0c0ecae7e5ec
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Sep 8 14:50:32 2021 -0700

    f2fs: report correct st_size for encrypted symlinks
    
    commit 461b43a8f92e68e96c4424b31e15f2b35f1bbfa9 upstream.
    
    The stat() family of syscalls report the wrong size for encrypted
    symlinks, which has caused breakage in several userspace programs.
    
    Fix this by calling fscrypt_symlink_getattr() after f2fs_getattr() for
    encrypted symlinks.  This function computes the correct size by reading
    and decrypting the symlink target (if it's not already cached).
    
    For more details, see the commit which added fscrypt_symlink_getattr().
    
    Fixes: cbaf042a3cc6 ("f2fs crypto: add symlink encryption")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210702065350.209646-4-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24eb2413d3f9e7fcf47b53b9934fa3eadbf20011
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Sep 8 14:50:31 2021 -0700

    ext4: report correct st_size for encrypted symlinks
    
    commit 8c4bca10ceafc43b1ca0a9fab5fa27e13cbce99e upstream.
    
    The stat() family of syscalls report the wrong size for encrypted
    symlinks, which has caused breakage in several userspace programs.
    
    Fix this by calling fscrypt_symlink_getattr() after ext4_getattr() for
    encrypted symlinks.  This function computes the correct size by reading
    and decrypting the symlink target (if it's not already cached).
    
    For more details, see the commit which added fscrypt_symlink_getattr().
    
    Fixes: f348c252320b ("ext4 crypto: add symlink encryption")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210702065350.209646-3-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e675870b3625d921a4091063eb61eaf596996730
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Sep 8 14:50:30 2021 -0700

    fscrypt: add fscrypt_symlink_getattr() for computing st_size
    
    commit d18760560593e5af921f51a8c9b64b6109d634c2 upstream.
    
    Add a helper function fscrypt_symlink_getattr() which will be called
    from the various filesystems' ->getattr() methods to read and decrypt
    the target of encrypted symlinks in order to report the correct st_size.
    
    Detailed explanation:
    
    As required by POSIX and as documented in various man pages, st_size for
    a symlink is supposed to be the length of the symlink target.
    Unfortunately, st_size has always been wrong for encrypted symlinks
    because st_size is populated from i_size from disk, which intentionally
    contains the length of the encrypted symlink target.  That's slightly
    greater than the length of the decrypted symlink target (which is the
    symlink target that userspace usually sees), and usually won't match the
    length of the no-key encoded symlink target either.
    
    This hadn't been fixed yet because reporting the correct st_size would
    require reading the symlink target from disk and decrypting or encoding
    it, which historically has been considered too heavyweight to do in
    ->getattr().  Also historically, the wrong st_size had only broken a
    test (LTP lstat03) and there were no known complaints from real users.
    (This is probably because the st_size of symlinks isn't used too often,
    and when it is, typically it's for a hint for what buffer size to pass
    to readlink() -- which a slightly-too-large size still works for.)
    
    However, a couple things have changed now.  First, there have recently
    been complaints about the current behavior from real users:
    
    - Breakage in rpmbuild:
      https://github.com/rpm-software-management/rpm/issues/1682
      https://github.com/google/fscrypt/issues/305
    
    - Breakage in toybox cpio:
      https://www.mail-archive.com/toybox@lists.landley.net/msg07193.html
    
    - Breakage in libgit2: https://issuetracker.google.com/issues/189629152
      (on Android public issue tracker, requires login)
    
    Second, we now cache decrypted symlink targets in ->i_link.  Therefore,
    taking the performance hit of reading and decrypting the symlink target
    in ->getattr() wouldn't be as big a deal as it used to be, since usually
    it will just save having to do the same thing later.
    
    Also note that eCryptfs ended up having to read and decrypt symlink
    targets in ->getattr() as well, to fix this same issue; see
    commit 3a60a1686f0d ("eCryptfs: Decrypt symlink target for stat size").
    
    So, let's just bite the bullet, and read and decrypt the symlink target
    in ->getattr() in order to report the correct st_size.  Add a function
    fscrypt_symlink_getattr() which the filesystems will call to do this.
    
    (Alternatively, we could store the decrypted size of symlinks on-disk.
    But there isn't a great place to do so, and encryption is meant to hide
    the original size to some extent; that property would be lost.)
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210702065350.209646-2-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f94601e19dd7e80bf12f42a7cdfed9652a9a01dc
Author: Guillaume Nault <gnault@redhat.com>
Date:   Mon Jan 13 22:39:22 2020 +0100

    netns: protect netns ID lookups with RCU
    
    commit 2dce224f469f060b9998a5a869151ef83c08ce77 upstream.
    
    __peernet2id() can be protected by RCU as it only calls idr_for_each(),
    which is RCU-safe, and never modifies the nsid table.
    
    rtnl_net_dumpid() can also do lockless lookups. It does two nested
    idr_for_each() calls on nsid tables (one direct call and one indirect
    call because of rtnl_net_dumpid_one() calling __peernet2id()). The
    netnsid tables are never updated. Therefore it is safe to not take the
    nsid_lock and run within an RCU-critical section instead.
    
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Håkon Bugge <haakon.bugge@oracle.com>

commit 1d3e3d569712e994483643f17b95ebf83965d4f2
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Aug 30 19:02:10 2021 -0700

    ipv4: fix endianness issue in inet_rtm_getroute_build_skb()
    
    [ Upstream commit 92548b0ee220e000d81c27ac9a80e0ede895a881 ]
    
    The UDP length field should be in network order.
    This removes the following sparse error:
    
    net/ipv4/route.c:3173:27: warning: incorrect type in assignment (different base types)
    net/ipv4/route.c:3173:27:    expected restricted __be16 [usertype] len
    net/ipv4/route.c:3173:27:    got unsigned long
    
    Fixes: 404eb77ea766 ("ipv4: support sport, dport and ip_proto in RTM_GETROUTE")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Roopa Prabhu <roopa@nvidia.com>
    Cc: David Ahern <dsahern@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b754f6353bbe66fe03fccff7ddd4e8025e55e243
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Sat Aug 28 16:23:15 2021 +0200

    net: qualcomm: fix QCA7000 checksum handling
    
    [ Upstream commit 429205da6c834447a57279af128bdd56ccd5225e ]
    
    Based on tests the QCA7000 doesn't support checksum offloading. So assume
    ip_summed is CHECKSUM_NONE and let the kernel take care of the checksum
    handling. This fixes data transfer issues in noisy environments.
    
    Reported-by: Michael Heimpold <michael.heimpold@in-tech.com>
    Fixes: 291ab06ecf67 ("net: qualcomm: new Ethernet over SPI driver for QCA7000")
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5129766a9797ea212087314fafc68268f1bf8515
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Sun Aug 29 23:58:01 2021 +0800

    net: sched: Fix qdisc_rate_table refcount leak when get tcf_block failed
    
    [ Upstream commit c66070125837900163b81a03063ddd657a7e9bfb ]
    
    The reference counting issue happens in one exception handling path of
    cbq_change_class(). When failing to get tcf_block, the function forgets
    to decrease the refcount of "rtab" increased by qdisc_put_rtab(),
    causing a refcount leak.
    
    Fix this issue by jumping to "failure" label when get tcf_block failed.
    
    Fixes: 6529eaba33f0 ("net: sched: introduce tcf block infractructure")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Reviewed-by: Cong Wang <cong.wang@bytedance.com>
    Link: https://lore.kernel.org/r/1630252681-71588-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e6bd2b583f18da9856fc9741ffa200a74a52cba
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Aug 29 15:16:15 2021 -0700

    ipv4: make exception cache less predictible
    
    [ Upstream commit 67d6d681e15b578c1725bad8ad079e05d1c48a8e ]
    
    Even after commit 6457378fe796 ("ipv4: use siphash instead of Jenkins in
    fnhe_hashfun()"), an attacker can still use brute force to learn
    some secrets from a victim linux host.
    
    One way to defeat these attacks is to make the max depth of the hash
    table bucket a random value.
    
    Before this patch, each bucket of the hash table used to store exceptions
    could contain 6 items under attack.
    
    After the patch, each bucket would contains a random number of items,
    between 6 and 10. The attacker can no longer infer secrets.
    
    This is slightly increasing memory size used by the hash table,
    by 50% in average, we do not expect this to be a problem.
    
    This patch is more complex than the prior one (IPv6 equivalent),
    because IPv4 was reusing the oldest entry.
    Since we need to be able to evict more than one entry per
    update_or_create_fnhe() call, I had to replace
    fnhe_oldest() with fnhe_remove_oldest().
    
    Also note that we will queue extra kfree_rcu() calls under stress,
    which hopefully wont be a too big issue.
    
    Fixes: 4895c771c7f0 ("ipv4: Add FIB nexthop exceptions.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Keyu Man <kman001@ucr.edu>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Tested-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 743a3ee3880e518ea714a09d40e08f0029674f3b
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Tue Jul 27 10:52:31 2021 +0800

    bcma: Fix memory leak for internally-handled cores
    
    [ Upstream commit b63aed3ff195130fef12e0af590f4838cf0201d8 ]
    
    kmemleak reported that dev_name() of internally-handled cores were leaked
    on driver unbinding. Let's use device_initialize() to take refcounts for
    them and put_device() to properly free the related stuff.
    
    While looking at it, there's another potential issue for those which should
    be *registered* into driver core. If device_register() failed, we put
    device once and freed bcma_device structures. In bcma_unregister_cores(),
    they're treated as unregistered and we hit both UAF and double-free. That
    smells not good and has also been fixed now.
    
    Fixes: ab54bc8460b5 ("bcma: fill core details for every device")
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210727025232.663-2-yuzenghui@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd6bfcc343aba78be8ca69b55599fd772da120f4
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Aug 13 14:34:38 2021 +0300

    ath6kl: wmi: fix an error code in ath6kl_wmi_sync_point()
    
    [ Upstream commit fd6729ec534cffbbeb3917761e6d1fe6a412d3fe ]
    
    This error path is unlikely because of it checked for NULL and
    returned -ENOMEM earlier in the function.  But it should return
    an error code here as well if we ever do hit it because of a
    race condition or something.
    
    Fixes: bdcd81707973 ("Add ath6kl cleaned up driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210813113438.GB30697@kili
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 600624ecbe35e0359806b107f247811b1f79ad25
Author: Andy Duan <fugang.duan@nxp.com>
Date:   Thu Aug 19 10:10:33 2021 +0800

    tty: serial: fsl_lpuart: fix the wrong mapbase value
    
    [ Upstream commit d5c38948448abc2bb6b36dbf85a554bf4748885e ]
    
    Register offset needs to be applied on mapbase also.
    dma_tx/rx_request use the physical address of UARTDATA.
    Register offset is currently only applied to membase (the
    corresponding virtual addr) but not on mapbase.
    
    Fixes: 24b1e5f0e83c ("tty: serial: lpuart: add imx7ulp support")
    Reviewed-by: Leonard Crestez <leonard.crestez@nxp.com>
    Signed-off-by: Adriana Reus <adriana.reus@nxp.com>
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Signed-off-by: Andy Duan <fugang.duan@nxp.com>
    Link: https://lore.kernel.org/r/20210819021033.32606-1-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4269f839184bd183a83d7b75f52bbb10788f85b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Aug 18 21:32:38 2021 +0200

    usb: bdc: Fix an error handling path in 'bdc_probe()' when no suitable DMA config is available
    
    [ Upstream commit d2f42e09393c774ab79088d8e3afcc62b3328fc9 ]
    
    If no suitable DMA configuration is available, a previous 'bdc_phy_init()'
    call must be undone by a corresponding 'bdc_phy_exit()' call.
    
    Branch to the existing error handling path instead of returning
    directly.
    
    Fixes: cc29d4f67757 ("usb: bdc: Add support for USB phy")
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/0c5910979f39225d5d8fe68c9ab1c147c68ddee1.1629314734.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51a95e4d277bc31ab134240a72c2cab8f8d7f778
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Wed Aug 25 20:09:02 2021 +0300

    usb: ehci-orion: Handle errors of clk_prepare_enable() in probe
    
    [ Upstream commit 4720f1bf4ee4a784d9ece05420ba33c9222a3004 ]
    
    ehci_orion_drv_probe() did not account for possible errors of
    clk_prepare_enable() that in particular could cause invocation of
    clk_disable_unprepare() on clocks that were not prepared/enabled yet,
    e.g. in remove or on handling errors of usb_add_hcd() in probe. Though,
    there were several patches fixing different issues with clocks in this
    driver, they did not solve this problem.
    
    Add handling of errors of clk_prepare_enable() in ehci_orion_drv_probe()
    to avoid calls of clk_disable_unprepare() without previous successful
    invocation of clk_prepare_enable().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Fixes: 8c869edaee07 ("ARM: Orion: EHCI: Add support for enabling clocks")
    Co-developed-by: Kirill Shilimanov <kirill.shilimanov@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Signed-off-by: Kirill Shilimanov <kirill.shilimanov@huawei.com>
    Link: https://lore.kernel.org/r/20210825170902.11234-1-novikov@ispras.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d009f519e56c9293056148fa596d33878eb21a75
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sun Jul 4 17:38:45 2021 +0300

    i2c: mt65xx: fix IRQ check
    
    [ Upstream commit 58fb7c643d346e2364404554f531cfa6a1a3917c ]
    
    Iff platform_get_irq() returns 0, the driver's probe() method will return 0
    early (as if the method's call was successful).  Let's consider IRQ0 valid
    for simplicity -- devm_request_irq() can always override that decision...
    
    Fixes: ce38815d39ea ("I2C: mediatek: Add driver for MediaTek I2C controller")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Reviewed-by: Qii Wang <qii.wang@mediatek.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bea655491daf39f1934a71bf576bf3499092d3a4
Author: Len Baker <len.baker@gmx.com>
Date:   Tue Aug 17 12:27:09 2021 +0200

    CIFS: Fix a potencially linear read overflow
    
    [ Upstream commit f980d055a0f858d73d9467bb0b570721bbfcdfb8 ]
    
    strlcpy() reads the entire source buffer first. This read may exceed the
    destination size limit. This is both inefficient and can lead to linear
    read overflows if a source string is not NUL-terminated.
    
    Also, the strnlen() call does not avoid the read overflow in the strlcpy
    function when a not NUL-terminated string is passed.
    
    So, replace this block by a call to kstrndup() that avoids this type of
    overflow and does the same.
    
    Fixes: 066ce6899484d ("cifs: rename cifs_strlcpy_to_host and make it use new functions")
    Signed-off-by: Len Baker <len.baker@gmx.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3349b3a4ca50b2821de2291657961fb43bef4d2
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Aug 10 11:16:44 2021 +0300

    mmc: moxart: Fix issue with uninitialized dma_slave_config
    
    [ Upstream commit ee5165354d498e5bceb0b386e480ac84c5f8c28c ]
    
    Depending on the DMA driver being used, the struct dma_slave_config may
    need to be initialized to zero for the unused data.
    
    For example, we have three DMA drivers using src_port_window_size and
    dst_port_window_size. If these are left uninitialized, it can cause DMA
    failures.
    
    For moxart, this is probably not currently an issue but is still good to
    fix though.
    
    Fixes: 1b66e94e6b99 ("mmc: moxart: Add MOXA ART SD/MMC driver")
    Cc: Jonas Jensen <jonas.jensen@gmail.com>
    Cc: Vinod Koul <vkoul@kernel.org>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210810081644.19353-3-tony@atomide.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8dedc73c5edbcf909434783f5195beec3fe85bec
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Aug 10 11:16:43 2021 +0300

    mmc: dw_mmc: Fix issue with uninitialized dma_slave_config
    
    [ Upstream commit c3ff0189d3bc9c03845fe37472c140f0fefd0c79 ]
    
    Depending on the DMA driver being used, the struct dma_slave_config may
    need to be initialized to zero for the unused data.
    
    For example, we have three DMA drivers using src_port_window_size and
    dst_port_window_size. If these are left uninitialized, it can cause DMA
    failures.
    
    For dw_mmc, this is probably not currently an issue but is still good to
    fix though.
    
    Fixes: 3fc7eaef44db ("mmc: dw_mmc: Add external dma interface support")
    Cc: Shawn Lin <shawn.lin@rock-chips.com>
    Cc: Jaehoon Chung <jh80.chung@samsung.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Cc: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210810081644.19353-2-tony@atomide.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92680bc8f0b2f0c90590cab16505e1892b700ed7
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sun Jul 4 17:45:25 2021 +0300

    i2c: s3c2410: fix IRQ check
    
    [ Upstream commit d6840a5e370b7ea4fde16ce2caf431bcc87f9a75 ]
    
    Iff platform_get_irq() returns 0, the driver's probe() method will return 0
    early (as if the method's call was successful).  Let's consider IRQ0 valid
    for simplicity -- devm_request_irq() can always override that decision...
    
    Fixes: e0d1ec97853f ("i2c-s3c2410: Change IRQ to be plain integer.")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4491423690e385d8db669e1b4f299b2c60e3e5e
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Thu Aug 12 23:35:09 2021 +0300

    i2c: iop3xx: fix deferred probing
    
    [ Upstream commit a1299505162ad00def3573260c2c68b9c8e8d697 ]
    
    When adding the code to handle platform_get_irq*() errors in the commit
    489447380a29 ("handle errors returned by platform_get_irq*()"), the
    actual error code was enforced to be -ENXIO in the driver for some
    strange reason.  This didn't matter much until the deferred probing was
    introduced -- which requires an actual error code to be propagated
    upstream from the failure site.
    
    While fixing this, also stop overriding the errors from request_irq() to
    -EIO (done since the pre-git era).
    
    Fixes: 489447380a29 ("[PATCH] handle errors returned by platform_get_irq*()")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c52204af399ac67db9eac43aff2d14a4df616bed
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Thu Aug 19 18:15:21 2021 +0300

    Bluetooth: add timeout sanity check to hci_inquiry
    
    [ Upstream commit f41a4b2b5eb7872109723dab8ae1603bdd9d9ec1 ]
    
    Syzbot hit "task hung" bug in hci_req_sync(). The problem was in
    unreasonable huge inquiry timeout passed from userspace.
    Fix it by adding sanity check for timeout value to hci_inquiry().
    
    Since hci_inquiry() is the only user of hci_req_sync() with user
    controlled timeout value, it makes sense to check timeout value in
    hci_inquiry() and don't touch hci_req_sync().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: syzbot+be2baed593ea56c6a84c@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21c82201853d3c0a2d571cc6029fe9d55c934a6b
Author: Nadezda Lutovinova <lutovinova@ispras.ru>
Date:   Wed Aug 18 17:12:47 2021 +0300

    usb: gadget: mv_u3d: request_irq() after initializing UDC
    
    [ Upstream commit 2af0c5ffadaf9d13eca28409d4238b4e672942d3 ]
    
    If IRQ occurs between calling  request_irq() and  mv_u3d_eps_init(),
    then null pointer dereference occurs since u3d->eps[] wasn't
    initialized yet but used in mv_u3d_nuke().
    
    The patch puts registration of the interrupt handler after
    initializing of neccesery data.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Fixes: 90fccb529d24 ("usb: gadget: Gadget directory cleanup - group UDC drivers")
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Nadezda Lutovinova <lutovinova@ispras.ru>
    Link: https://lore.kernel.org/r/20210818141247.4794-1-lutovinova@ispras.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dce4b0050c31a9a7fcaeb00d71145d1cbe0bd2ac
Author: Chih-Kang Chang <gary.chang@realtek.com>
Date:   Mon Aug 16 16:51:28 2021 +0800

    mac80211: Fix insufficient headroom issue for AMSDU
    
    [ Upstream commit f50d2ff8f016b79a2ff4acd5943a1eda40c545d4 ]
    
    ieee80211_amsdu_realloc_pad() fails to account for extra_tx_headroom,
    the original reserved headroom might be eaten. Add the necessary
    extra_tx_headroom.
    
    Fixes: 6e0456b54545 ("mac80211: add A-MSDU tx support")
    Signed-off-by: Chih-Kang Chang <gary.chang@realtek.com>
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Link: https://lore.kernel.org/r/20210816085128.10931-2-pkshih@realtek.com
    [fix indentation]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e2d2f05204f7ab9c645a1fb9f10a3f6393dd2fa
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Fri Aug 13 23:32:38 2021 +0300

    usb: phy: tahvo: add IRQ check
    
    [ Upstream commit 0d45a1373e669880b8beaecc8765f44cb0241e47 ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to request_threaded_irq() (which
    takes *unsigned* IRQ #), causing it to fail with -EINVAL, overriding an
    original error code.  Stop calling request_threaded_irq() with the invalid
    IRQ #s.
    
    Fixes: 9ba96ae5074c ("usb: omap1: Tahvo USB transceiver driver")
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/8280d6a4-8e9a-7cfe-1aa9-db586dc9afdf@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 699b3dbadd41f4078377c583b6ecb4918d60442a
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Fri Aug 13 23:30:18 2021 +0300

    usb: host: ohci-tmio: add IRQ check
    
    [ Upstream commit 4ac5132e8a4300637a2da8f5d6bc7650db735b8a ]
    
    The driver neglects to check the  result of platform_get_irq()'s call and
    blithely passes the negative error codes to usb_add_hcd() (which takes
    *unsigned* IRQ #), causing request_irq() that it calls to fail with
    -EINVAL, overriding an original error code. Stop calling usb_add_hcd()
    with the invalid IRQ #s.
    
    Fixes: 78c73414f4f6 ("USB: ohci: add support for tmio-ohci cell")
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/402e1a45-a0a4-0e08-566a-7ca1331506b1@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60cf1b5fbc0260e7b6e69a2d4048c1c1f4ddd188
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue Aug 10 12:53:15 2021 +0800

    Bluetooth: Move shutdown callback before flushing tx and rx queue
    
    [ Upstream commit 0ea53674d07fb6db2dd7a7ec2fdc85a12eb246c2 ]
    
    Commit 0ea9fd001a14 ("Bluetooth: Shutdown controller after workqueues
    are flushed or cancelled") introduced a regression that makes mtkbtsdio
    driver stops working:
    [   36.593956] Bluetooth: hci0: Firmware already downloaded
    [   46.814613] Bluetooth: hci0: Execution of wmt command timed out
    [   46.814619] Bluetooth: hci0: Failed to send wmt func ctrl (-110)
    
    The shutdown callback depends on the result of hdev->rx_work, so we
    should call it before flushing rx_work:
    -> btmtksdio_shutdown()
     -> mtk_hci_wmt_sync()
      -> __hci_cmd_send()
       -> wait for BTMTKSDIO_TX_WAIT_VND_EVT gets cleared
    
    -> btmtksdio_recv_event()
     -> hci_recv_frame()
      -> queue_work(hdev->workqueue, &hdev->rx_work)
       -> clears BTMTKSDIO_TX_WAIT_VND_EVT
    
    So move the shutdown callback before flushing TX/RX queue to resolve the
    issue.
    
    Reported-and-tested-by: Mattijs Korpershoek <mkorpershoek@baylibre.com>
    Tested-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Fixes: 0ea9fd001a14 ("Bluetooth: Shutdown controller after workqueues are flushed or cancelled")
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dab26f6754ee1fcb5b8eb52cafc5f9c7591b185
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Mon Aug 9 23:53:16 2021 +0300

    usb: phy: twl6030: add IRQ checks
    
    [ Upstream commit 0881e22c06e66af0b64773c91c8868ead3d01aa1 ]
    
    The driver neglects to check the result of platform_get_irq()'s calls and
    blithely passes the negative error codes to request_threaded_irq() (which
    takes *unsigned* IRQ #), causing them both to fail with -EINVAL, overriding
    an original error code.  Stop calling request_threaded_irq() with the
    invalid IRQ #s.
    
    Fixes: c33fad0c3748 ("usb: otg: Adding twl6030-usb transceiver driver for OMAP4430")
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/9507f50b-50f1-6dc4-f57c-3ed4e53a1c25@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23479ea22202b0689693bb84e1ca327d3d3fe83a
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Mon Aug 9 23:50:18 2021 +0300

    usb: phy: fsl-usb: add IRQ check
    
    [ Upstream commit ecc2f30dbb25969908115c81ec23650ed982b004 ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to request_irq() (which takes
    *unsigned* IRQ #), causing it to fail with -EINVAL, overriding an original
    error code. Stop calling request_irq() with the invalid IRQ #s.
    
    Fixes: 0807c500a1a6 ("USB: add Freescale USB OTG Transceiver driver")
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Link: https://lore.kernel.org/r/b0a86089-8b8b-122e-fd6d-73e8c2304964@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99a53e692da25aeea6801c355f7b34b197a68efd
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Mon Aug 9 23:27:28 2021 +0300

    usb: gadget: udc: at91: add IRQ check
    
    [ Upstream commit 50855c31573b02963f0aa2aacfd4ea41c31ae0e0 ]
    
    The driver neglects to check the result of platform_get_irq()'s call and
    blithely passes the negative error codes to devm_request_irq() (which takes
    *unsigned* IRQ #), causing it to fail with -EINVAL, overriding an original
    error code. Stop calling devm_request_irq() with the invalid IRQ #s.
    
    Fixes: 8b2e76687b39 ("USB: AT91 UDC updates, mostly power management")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Link: https://lore.kernel.org/r/6654a224-739a-1a80-12f0-76d920f87b6c@omp.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a94fdd4b5661cc2f4c5e20f825049a594262ac18
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Aug 6 11:15:13 2021 +0200

    drm/msm/dsi: Fix some reference counted resource leaks
    
    [ Upstream commit 6977cc89c87506ff17e6c05f0e37f46752256e82 ]
    
    'of_find_device_by_node()' takes a reference that must be released when
    not needed anymore.
    This is expected to be done in 'dsi_destroy()'.
    
    However, there are 2 issues in 'dsi_get_phy()'.
    
    First, if 'of_find_device_by_node()' succeeds but 'platform_get_drvdata()'
    returns NULL, 'msm_dsi->phy_dev' will still be NULL, and the reference
    won't be released in 'dsi_destroy()'.
    
    Secondly, as 'of_find_device_by_node()' already takes a reference, there is
    no need for an additional 'get_device()'.
    
    Move the assignment to 'msm_dsi->phy_dev' a few lines above and remove the
    unneeded 'get_device()' to solve both issues.
    
    Fixes: ec31abf6684e ("drm/msm/dsi: Separate PHY to another platform device")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/f15bc57648a00e7c99f943903468a04639d50596.1628241097.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc4b08383046f3282b6fa58cfcef05bd13e52b93
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Tue Aug 10 12:14:10 2021 +0800

    Bluetooth: fix repeated calls to sco_sock_kill
    
    [ Upstream commit e1dee2c1de2b4dd00eb44004a4bda6326ed07b59 ]
    
    In commit 4e1a720d0312 ("Bluetooth: avoid killing an already killed
    socket"), a check was added to sco_sock_kill to skip killing a socket
    if the SOCK_DEAD flag was set.
    
    This was done after a trace for a use-after-free bug showed that the
    same sock pointer was being killed twice.
    
    Unfortunately, this check prevents sco_sock_kill from running on any
    socket. sco_sock_kill kills a socket only if it's zapped and orphaned,
    however sock_orphan announces that the socket is dead before detaching
    it. i.e., orphaned sockets have the SOCK_DEAD flag set.
    
    To fix this, we remove the check for SOCK_DEAD, and avoid repeated
    calls to sco_sock_kill by removing incorrect calls in:
    
    1. sco_sock_timeout. The socket should not be killed on timeout as
    further processing is expected to be done. For example,
    sco_sock_connect sets the timer then waits for the socket to be
    connected or for an error to be returned.
    
    2. sco_conn_del. This function should clean up resources for the
    connection, but the socket itself should be cleaned up in
    sco_sock_release.
    
    3. sco_sock_close. Calls to sco_sock_close in sco_sock_cleanup_listen
    and sco_sock_release are followed by sco_sock_kill. Hence the
    duplicated call should be removed.
    
    Fixes: 4e1a720d0312 ("Bluetooth: avoid killing an already killed socket")
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e751dfbab446815a204796c1392f7dffcfa86221
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu Aug 5 09:21:10 2021 +0200

    arm64: dts: exynos: correct GIC CPU interfaces address range on Exynos7
    
    [ Upstream commit 01c72cad790cb6cd3ccbe4c1402b6cb6c6bbffd0 ]
    
    The GIC-400 CPU interfaces address range is defined as 0x2000-0x3FFF (by
    ARM).
    
    Reported-by: Sam Protsenko <semen.protsenko@linaro.org>
    Reported-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Sam Protsenko <semen.protsenko@linaro.org>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Fixes: b9024cbc937d ("arm64: dts: Add initial device tree support for exynos7")
    Link: https://lore.kernel.org/r/20210805072110.4730-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d3971d4fd807eddb6e0b601394055eda4dbf132
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Mon Jul 5 02:05:19 2021 +0300

    drm/msm/dpu: make dpu_hw_ctl_clear_all_blendstages clear necessary LMs
    
    [ Upstream commit a41cdb693595ae1904dd793fc15d6954f4295e27 ]
    
    dpu_hw_ctl_clear_all_blendstages() clears settings for the few first LMs
    instead of mixers actually used for the CTL. Change it to clear
    necessary data, using provided mixer ids.
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20210704230519.4081467-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 518d8c3c34fa443821440fa6cdd8a62e58f70693
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Aug 4 16:09:51 2021 +0100

    Bluetooth: increase BTNAMSIZ to 21 chars to fix potential buffer overflow
    
    [ Upstream commit 713baf3dae8f45dc8ada4ed2f5fdcbf94a5c274d ]
    
    An earlier commit replaced using batostr to using %pMR sprintf for the
    construction of session->name. Static analysis detected that this new
    method can use a total of 21 characters (including the trailing '\0')
    so we need to increase the BTNAMSIZ from 18 to 21 to fix potential
    buffer overflows.
    
    Addresses-Coverity: ("Out-of-bounds write")
    Fixes: fcb73338ed53 ("Bluetooth: Use %pMR in sprintf/seq_printf instead of batostr")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23beb85d910f96ee5c7c8011fa8fb27a78ab80b7
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Mon Jul 12 15:57:03 2021 +0200

    soc: qcom: smsm: Fix missed interrupts if state changes while masked
    
    [ Upstream commit e3d4571955050736bbf3eda0a9538a09d9fcfce8 ]
    
    The SMSM driver detects interrupt edges by tracking the last state
    it has seen (and has triggered the interrupt handler for). This works
    fine, but only if the interrupt does not change state while masked.
    
    For example, if an interrupt is unmasked while the state is HIGH,
    the stored last_value for that interrupt might still be LOW. Then,
    when the remote processor triggers smsm_intr() we assume that nothing
    has changed, even though the state might have changed from HIGH to LOW.
    
    Attempt to fix this by checking the current remote state before
    unmasking an IRQ. Use atomic operations to avoid the interrupt handler
    from interfering with the unmask function.
    
    This fixes modem crashes in some edge cases with the BAM-DMUX driver.
    Specifically, the BAM-DMUX interrupt handler is not called for the
    HIGH -> LOW smsm state transition if the BAM-DMUX driver is loaded
    (and therefore unmasks the interrupt) after the modem was already started:
    
    qcom-q6v5-mss 4080000.remoteproc: fatal error received: a2_task.c:3188:
      Assert FALSE failed: A2 DL PER deadlock timer expired waiting for Apps ACK
    
    Fixes: c97c4090ff72 ("soc: qcom: smsm: Add driver for Qualcomm SMSM")
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20210712135703.324748-2-stephan@gerhold.net
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4bcd29b50d1a33111d3bacd7974f0d0bbec484f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jul 29 16:49:10 2021 +0200

    PCI: PM: Enable PME if it can be signaled from D3cold
    
    [ Upstream commit 0e00392a895c95c6d12d42158236c8862a2f43f2 ]
    
    PME signaling is only enabled by __pci_enable_wake() if the target
    device can signal PME from the given target power state (to avoid
    pointless reconfiguration of the device), but if the hierarchy above
    the device goes into D3cold, the device itself will end up in D3cold
    too, so if it can signal PME from D3cold, it should be enabled to
    do so in __pci_enable_wake().
    
    [Note that if the device does not end up in D3cold and it cannot
     signal PME from the original target power state, it will not signal
     PME, so in that case the behavior does not change.]
    
    Link: https://lore.kernel.org/linux-pm/3149540.aeNJFYEL58@kreacher/
    Fixes: 5bcc2fb4e815 ("PCI PM: Simplify PCI wake-up code")
    Reported-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reported-by: Utkarsh H Patel <utkarsh.h.patel@intel.com>
    Reported-by: Koba Ko <koba.ko@canonical.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5c62f4c936407fb734cae64700f20b68273b059
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jul 29 17:54:28 2021 +0200

    PCI: PM: Avoid forcing PCI_D0 for wakeup reasons inconsistently
    
    [ Upstream commit da9f2150684ea684a7ddd6d7f0e38b2bdf43dcd8 ]
    
    It is inconsistent to return PCI_D0 from pci_target_state() instead
    of the original target state if 'wakeup' is true and the device
    cannot signal PME from D0.
    
    This only happens when the device cannot signal PME from the original
    target state and any shallower power states (including D0) and that
    case is effectively equivalent to the one in which PME singaling is
    not supported at all.  Since the original target state is returned in
    the latter case, make the function do that in the former one too.
    
    Link: https://lore.kernel.org/linux-pm/3149540.aeNJFYEL58@kreacher/
    Fixes: 666ff6f83e1d ("PCI/PM: Avoid using device_may_wakeup() for runtime PM")
    Reported-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reported-by: Utkarsh H Patel <utkarsh.h.patel@intel.com>
    Reported-by: Koba Ko <koba.ko@canonical.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a17484f832798cae4fa0beb105b70a2606c51f0d
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Jul 9 14:30:25 2021 +0200

    media: venus: venc: Fix potential null pointer dereference on pointer fmt
    
    [ Upstream commit 09ea9719a423fc675d40dd05407165e161ea0c48 ]
    
    Currently the call to find_format can potentially return a NULL to
    fmt and the nullpointer is later dereferenced on the assignment of
    pixmp->num_planes = fmt->num_planes.  Fix this by adding a NULL pointer
    check and returning NULL for the failure case.
    
    Addresses-Coverity: ("Dereference null return")
    
    Fixes: aaaa93eda64b ("[media] media: venus: venc: add video encoder files")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fba6d1d3645cf45f17c60faeb419dd3cc3fdd6e8
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Wed Jul 7 11:34:09 2021 +0200

    media: em28xx-input: fix refcount bug in em28xx_usb_disconnect
    
    [ Upstream commit 6fa54bc713c262e1cfbc5613377ef52280d7311f ]
    
    If em28xx_ir_init fails, it would decrease the refcount of dev. However,
    in the em28xx_ir_fini, when ir is NULL, it goes to ref_put and decrease
    the refcount of dev. This will lead to a refcount bug.
    
    Fix this bug by removing the kref_put in the error handling code
    of em28xx_ir_init.
    
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 0 PID: 7 at lib/refcount.c:28 refcount_warn_saturate+0x18e/0x1a0 lib/refcount.c:28
    Modules linked in:
    CPU: 0 PID: 7 Comm: kworker/0:1 Not tainted 5.13.0 #3
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:refcount_warn_saturate+0x18e/0x1a0 lib/refcount.c:28
    Call Trace:
      kref_put.constprop.0+0x60/0x85 include/linux/kref.h:69
      em28xx_usb_disconnect.cold+0xd7/0xdc drivers/media/usb/em28xx/em28xx-cards.c:4150
      usb_unbind_interface+0xbf/0x3a0 drivers/usb/core/driver.c:458
      __device_release_driver drivers/base/dd.c:1201 [inline]
      device_release_driver_internal+0x22a/0x230 drivers/base/dd.c:1232
      bus_remove_device+0x108/0x160 drivers/base/bus.c:529
      device_del+0x1fe/0x510 drivers/base/core.c:3540
      usb_disable_device+0xd1/0x1d0 drivers/usb/core/message.c:1419
      usb_disconnect+0x109/0x330 drivers/usb/core/hub.c:2221
      hub_port_connect drivers/usb/core/hub.c:5151 [inline]
      hub_port_connect_change drivers/usb/core/hub.c:5440 [inline]
      port_event drivers/usb/core/hub.c:5586 [inline]
      hub_event+0xf81/0x1d40 drivers/usb/core/hub.c:5668
      process_one_work+0x2c9/0x610 kernel/workqueue.c:2276
      process_scheduled_works kernel/workqueue.c:2338 [inline]
      worker_thread+0x333/0x5b0 kernel/workqueue.c:2424
      kthread+0x188/0x1d0 kernel/kthread.c:319
      ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295
    
    Reported-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Fixes: ac5688637144 ("media: em28xx: Fix possible memory leak of em28xx struct")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9281b86a0b444ffc313212643ac192fc47eac8c
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sun May 30 22:13:45 2021 +0300

    i2c: highlander: add IRQ check
    
    [ Upstream commit f16a3bb69aa6baabf8f0aca982c8cf21e2a4f6bc ]
    
    The driver is written as if platform_get_irq() returns 0 on errors (while
    actually it returns a negative error code), blithely passing these error
    codes to request_irq() (which takes *unsigned* IRQ #) -- which fails with
    -EINVAL. Add the necessary error check to the pre-existing *if* statement
    forcing the driver into the polling mode...
    
    Fixes: 4ad48e6ab18c ("i2c: Renesas Highlander FPGA SMBus support")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7d1479e2364430f62c97fe53b6ad7f3d3f5b13e
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Tue Jul 27 19:35:30 2021 +0300

    net: cipso: fix warnings in netlbl_cipsov4_add_std
    
    [ Upstream commit 8ca34a13f7f9b3fa2c464160ffe8cc1a72088204 ]
    
    Syzbot reported warning in netlbl_cipsov4_add(). The
    problem was in too big doi_def->map.std->lvl.local_size
    passed to kcalloc(). Since this value comes from userpace there is
    no need to warn if value is not correct.
    
    The same problem may occur with other kcalloc() calls in
    this function, so, I've added __GFP_NOWARN flag to all
    kcalloc() calls there.
    
    Reported-and-tested-by: syzbot+cdd51ee2e6b0b2e18c0d@syzkaller.appspotmail.com
    Fixes: 96cb8e3313c7 ("[NetLabel]: CIPSOv4 and Unlabeled packet integration")
    Acked-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15bf24c5fb7948564397b450ead0441143d42af2
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Thu Jul 1 13:05:41 2021 -0700

    tcp: seq_file: Avoid skipping sk during tcp_seek_last_pos
    
    [ Upstream commit 525e2f9fd0229eb10cb460a9e6d978257f24804e ]
    
    st->bucket stores the current bucket number.
    st->offset stores the offset within this bucket that is the sk to be
    seq_show().  Thus, st->offset only makes sense within the same
    st->bucket.
    
    These two variables are an optimization for the common no-lseek case.
    When resuming the seq_file iteration (i.e. seq_start()),
    tcp_seek_last_pos() tries to continue from the st->offset
    at bucket st->bucket.
    
    However, it is possible that the bucket pointed by st->bucket
    has changed and st->offset may end up skipping the whole st->bucket
    without finding a sk.  In this case, tcp_seek_last_pos() currently
    continues to satisfy the offset condition in the next (and incorrect)
    bucket.  Instead, regardless of the offset value, the first sk of the
    next bucket should be returned.  Thus, "bucket == st->bucket" check is
    added to tcp_seek_last_pos().
    
    The chance of hitting this is small and the issue is a decade old,
    so targeting for the next tree.
    
    Fixes: a8b690f98baf ("tcp: Fix slowness in read /proc/net/tcp")
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Kuniyuki Iwashima <kuniyu@amazon.co.jp>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20210701200541.1033917-1-kafai@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba0a4e09a438871b9ce7052dfcc156e9df1c71b2
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jun 25 18:00:09 2021 +0300

    Bluetooth: sco: prevent information leak in sco_conn_defer_accept()
    
    [ Upstream commit 59da0b38bc2ea570ede23a3332ecb3e7574ce6b2 ]
    
    Smatch complains that some of these struct members are not initialized
    leading to a stack information disclosure:
    
        net/bluetooth/sco.c:778 sco_conn_defer_accept() warn:
        check that 'cp.retrans_effort' doesn't leak information
    
    This seems like a valid warning.  I've added a default case to fix
    this issue.
    
    Fixes: 2f69a82acf6f ("Bluetooth: Use voice setting in deferred SCO connection request")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5444d813ec17510d788930526be6d9926751812
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Jun 20 21:45:42 2021 +0200

    media: go7007: remove redundant initialization
    
    [ Upstream commit 6f5885a7750545973bf1a942d2f0f129aef0aa06 ]
    
    In go7007_alloc() kzalloc() is used for struct go7007
    allocation. It means that there is no need in zeroing
    any members, because kzalloc will take care of it.
    
    Removing these reduntant initialization steps increases
    execution speed a lot:
    
            Before:
                    + 86.802 us   |    go7007_alloc();
            After:
                    + 29.595 us   |    go7007_alloc();
    
    Fixes: 866b8695d67e8 ("Staging: add the go7007 video driver")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9e50e35338041d7b30ac968898f7ff98f486e45
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Fri Jun 25 07:59:04 2021 +0200

    media: dvb-usb: fix uninit-value in vp702x_read_mac_addr
    
    [ Upstream commit 797c061ad715a9a1480eb73f44b6939fbe3209ed ]
    
    If vp702x_usb_in_op fails, the mac address is not initialized.
    And vp702x_read_mac_addr does not handle this failure, which leads to
    the uninit-value in dvb_usb_adapter_dvb_init.
    
    Fix this by handling the failure of vp702x_usb_in_op.
    
    Fixes: 786baecfe78f ("[media] dvb-usb: move it to drivers/media/usb/dvb-usb")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 811cb97224ced0066b830c5f2782a2864e2cb91e
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Fri Jun 25 07:33:27 2021 +0200

    media: dvb-usb: fix uninit-value in dvb_usb_adapter_dvb_init
    
    [ Upstream commit c5453769f77ce19a5b03f1f49946fd3f8a374009 ]
    
    If dibusb_read_eeprom_byte fails, the mac address is not initialized.
    And nova_t_read_mac_address does not handle this failure, which leads to
    the uninit-value in dvb_usb_adapter_dvb_init.
    
    Fix this by handling the failure of dibusb_read_eeprom_byte.
    
    Reported-by: syzbot+e27b4fd589762b0b9329@syzkaller.appspotmail.com
    Fixes: 786baecfe78f ("[media] dvb-usb: move it to drivers/media/usb/dvb-usb")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01db625eb1b03f12bfaa198a460a939ab62ef64e
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Feb 8 15:38:55 2021 +0100

    soc: rockchip: ROCKCHIP_GRF should not default to y, unconditionally
    
    [ Upstream commit 2a1c55d4762dd34a8b0f2e36fb01b7b16b60735b ]
    
    Merely enabling CONFIG_COMPILE_TEST should not enable additional code.
    To fix this, restrict the automatic enabling of ROCKCHIP_GRF to
    ARCH_ROCKCHIP, and ask the user in case of compile-testing.
    
    Fixes: 4c58063d4258f6be ("soc: rockchip: add driver handling grf setup")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20210208143855.418374-1-geert+renesas@glider.be
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b0bb0c2fbb7f69a0108f5712f05d130255ca1e7
Author: Krzysztof Hałasa <khalasa@piap.pl>
Date:   Wed Jun 16 07:13:55 2021 +0200

    media: TDA1997x: enable EDID support
    
    [ Upstream commit ea3e1c36e38810427485f06c2becc1f29e54521d ]
    
    Without this patch, the TDA19971 chip's EDID is inactive.
    EDID never worked with this driver, it was all tested with HDMI signal
    sources which don't need EDID support.
    
    Signed-off-by: Krzysztof Halasa <khalasa@piap.pl>
    Fixes: 9ac0038db9a7 ("media: i2c: Add TDA1997x HDMI receiver driver")
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2f93104e8cd0fac969d471f3396c073956d5af
Author: Chunyan Zhang <chunyan.zhang@unisoc.com>
Date:   Thu Aug 26 17:15:46 2021 +0800

    spi: sprd: Fix the wrong WDG_LOAD_VAL
    
    [ Upstream commit 245ca2cc212bb2a078332ec99afbfbb202f44c2d ]
    
    Use 50ms as default timeout value and the time clock is 32768HZ.
    The original value of WDG_LOAD_VAL is not correct, so this patch
    fixes it.
    
    Fixes: ac1775012058 ("spi: sprd: Add the support of restarting the system")
    Signed-off-by: Chunyan Zhang <chunyan.zhang@unisoc.com>
    Link: https://lore.kernel.org/r/20210826091549.2138125-2-zhang.lyra@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a45af82c9458910903d2aeaa2e165166a4e3e820
Author: Stefan Berger <stefanb@linux.ibm.com>
Date:   Tue Jun 29 17:34:20 2021 -0400

    certs: Trigger creation of RSA module signing key if it's not an RSA key
    
    [ Upstream commit ea35e0d5df6c92fa2e124bb1b91d09b2240715ba ]
    
    Address a kbuild issue where a developer created an ECDSA key for signing
    kernel modules and then builds an older version of the kernel, when bi-
    secting the kernel for example, that does not support ECDSA keys.
    
    If openssl is installed, trigger the creation of an RSA module signing
    key if it is not an RSA key.
    
    Fixes: cfc411e7fff3 ("Move certificate handling to its own directory")
    Cc: David Howells <dhowells@redhat.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee2f276966218d83e242858e1d0de4fb9eb77954
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Thu Aug 12 21:21:10 2021 +0100

    crypto: qat - use proper type for vf_mask
    
    [ Upstream commit 462354d986b6a89c6449b85f17aaacf44e455216 ]
    
    Replace vf_mask type with unsigned long to avoid a stack-out-of-bound.
    
    This is to fix the following warning reported by KASAN the first time
    adf_msix_isr_ae() gets called.
    
        [  692.091987] BUG: KASAN: stack-out-of-bounds in find_first_bit+0x28/0x50
        [  692.092017] Read of size 8 at addr ffff88afdf789e60 by task swapper/32/0
        [  692.092076] Call Trace:
        [  692.092089]  <IRQ>
        [  692.092101]  dump_stack+0x9c/0xcf
        [  692.092132]  print_address_description.constprop.0+0x18/0x130
        [  692.092164]  ? find_first_bit+0x28/0x50
        [  692.092185]  kasan_report.cold+0x7f/0x111
        [  692.092213]  ? static_obj+0x10/0x80
        [  692.092234]  ? find_first_bit+0x28/0x50
        [  692.092262]  find_first_bit+0x28/0x50
        [  692.092288]  adf_msix_isr_ae+0x16e/0x230 [intel_qat]
    
    Fixes: ed8ccaef52fa ("crypto: qat - Add support for SRIOV")
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Reviewed-by: Fiona Trahe <fiona.trahe@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bb51f7f627b3bc4247c95f3a98b09ed821a0728
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    [ Upstream commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb ]
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab642cd7bf1859569dc93a67db980bf883096ab5
Author: Hongbo Li <herberthbli@tencent.com>
Date:   Thu Aug 5 16:53:32 2021 +0800

    lib/mpi: use kcalloc in mpi_resize
    
    [ Upstream commit b6f756726e4dfe75be1883f6a0202dcecdc801ab ]
    
    We should set the additional space to 0 in mpi_resize().
    So use kcalloc() instead of kmalloc_array().
    
    In lib/mpi/ec.c:
    /****************
     * Resize the array of A to NLIMBS. the additional space is cleared
     * (set to 0) [done by m_realloc()]
     */
    int mpi_resize(MPI a, unsigned nlimbs)
    
    Like the comment of kernel's mpi_resize() said, the additional space
    need to be set to 0, but when a->d is not NULL, it does not set.
    
    The kernel's mpi lib is from libgcrypt, the mpi resize in libgcrypt
    is _gcry_mpi_resize() which set the additional space to 0.
    
    This bug may cause mpi api which use mpi_resize() get wrong result
    under the condition of using the additional space without initiation.
    If this condition is not met, the bug would not be triggered.
    Currently in kernel, rsa, sm2 and dh use mpi lib, and they works well,
    so the bug is not triggered in these cases.
    
    add_points_edwards() use the additional space directly, so it will
    get a wrong result.
    
    Fixes: cdec9cb5167a ("crypto: GnuPG based MPI lib - source files (part 1)")
    Signed-off-by: Hongbo Li <herberthbli@tencent.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6812cb0d4379a55677337f115318b6857a4b905e
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Aug 10 11:17:27 2021 +0300

    spi: spi-pic32: Fix issue with uninitialized dma_slave_config
    
    [ Upstream commit 976c1de1de147bb7f4e0d87482f375221c05aeaf ]
    
    Depending on the DMA driver being used, the struct dma_slave_config may
    need to be initialized to zero for the unused data.
    
    For example, we have three DMA drivers using src_port_window_size and
    dst_port_window_size. If these are left uninitialized, it can cause DMA
    failures.
    
    For spi-pic32, this is probably not currently an issue but is still good to
    fix though.
    
    Fixes: 1bcb9f8ceb67 ("spi: spi-pic32: Add PIC32 SPI master driver")
    Cc: Purna Chandra Mandal <purna.mandal@microchip.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Cc: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210810081727.19491-2-tony@atomide.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bcc9379c761f4b94bd09aeb57cd7974443baee5d
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Aug 10 11:17:26 2021 +0300

    spi: spi-fsl-dspi: Fix issue with uninitialized dma_slave_config
    
    [ Upstream commit 209ab223ad5b18e437289235e3bde12593b94ac4 ]
    
    Depending on the DMA driver being used, the struct dma_slave_config may
    need to be initialized to zero for the unused data.
    
    For example, we have three DMA drivers using src_port_window_size and
    dst_port_window_size. If these are left uninitialized, it can cause DMA
    failures.
    
    For spi-fsl-dspi, this is probably not currently an issue but is still
    good to fix though.
    
    Fixes: 90ba37033cb9 ("spi: spi-fsl-dspi: Add DMA support for Vybrid")
    Cc: Sanchayan Maity <maitysanchayan@gmail.com>
    Cc: Vladimir Oltean <vladimir.oltean@nxp.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Cc: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20210810081727.19491-1-tony@atomide.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 161818ff30e696c3eec58a7617d38c9fd5889296
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Mon Jul 5 23:47:27 2021 +0300

    m68k: emu: Fix invalid free in nfeth_cleanup()
    
    [ Upstream commit 761608f5cf70e8876c2f0e39ca54b516bdcb7c12 ]
    
    In the for loop all nfeth_dev array members should be freed, not only
    the first one.  Freeing only the first array member can cause
    double-free bugs and memory leaks.
    
    Fixes: 9cd7b148312f ("m68k/atari: ARAnyM - Add support for network access")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Link: https://lore.kernel.org/r/20210705204727.10743-1-paskripkin@gmail.com
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f08721ee2b387cc0ba93f8c27e2e3a6be80db2e4
Author: Stian Skjelstad <stian.skjelstad@gmail.com>
Date:   Sun Aug 22 11:33:32 2021 +0200

    udf_get_extendedattr() had no boundary checks.
    
    [ Upstream commit 58bc6d1be2f3b0ceecb6027dfa17513ec6aa2abb ]
    
    When parsing the ExtendedAttr data, malicous or corrupt attribute length
    could cause kernel hangs and buffer overruns in some special cases.
    
    Link: https://lore.kernel.org/r/20210822093332.25234-1-stian.skjelstad@gmail.com
    Signed-off-by: Stian Skjelstad <stian.skjelstad@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64dd1fbb0bb743ccd2fb420c441f4ca9732f598f
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Fri Jul 2 17:18:31 2021 +0800

    fcntl: fix potential deadlock for &fasync_struct.fa_lock
    
    [ Upstream commit 2f488f698fda820f8e6fa0407630154eceb145d6 ]
    
    There is an existing lock hierarchy of
    &dev->event_lock --> &fasync_struct.fa_lock --> &f->f_owner.lock
    from the following call chain:
    
      input_inject_event():
        spin_lock_irqsave(&dev->event_lock,...);
        input_handle_event():
          input_pass_values():
            input_to_handler():
              evdev_events():
                evdev_pass_values():
                  spin_lock(&client->buffer_lock);
                  __pass_event():
                    kill_fasync():
                      kill_fasync_rcu():
                        read_lock(&fa->fa_lock);
                        send_sigio():
                          read_lock_irqsave(&fown->lock,...);
    
    &dev->event_lock is HARDIRQ-safe, so interrupts have to be disabled
    while grabbing &fasync_struct.fa_lock, otherwise we invert the lock
    hierarchy. However, since kill_fasync which calls kill_fasync_rcu is
    an exported symbol, it may not necessarily be called with interrupts
    disabled.
    
    As kill_fasync_rcu may be called with interrupts disabled (for
    example, in the call chain above), we replace calls to
    read_lock/read_unlock on &fasync_struct.fa_lock in kill_fasync_rcu
    with read_lock_irqsave/read_unlock_irqrestore.
    
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 829ead9080979febda2b122f86cce41fd8b80253
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Thu Aug 12 21:21:28 2021 +0100

    crypto: qat - do not export adf_iov_putmsg()
    
    [ Upstream commit 645ae0af1840199086c33e4f841892ebee73f615 ]
    
    The function adf_iov_putmsg() is only used inside the intel_qat module
    therefore should not be exported.
    Remove EXPORT_SYMBOL for the function adf_iov_putmsg().
    
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Fiona Trahe <fiona.trahe@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38b589d176e83693868db60d78307e5ba629bc23
Author: Marco Chiappero <marco.chiappero@intel.com>
Date:   Thu Aug 12 21:21:22 2021 +0100

    crypto: qat - fix naming for init/shutdown VF to PF notifications
    
    [ Upstream commit b90c1c4d3fa8cd90f4e8245b13564380fd0bfad1 ]
    
    At start and shutdown, VFs notify the PF about their state. These
    notifications are carried out through a message exchange using the PFVF
    protocol.
    
    Function names lead to believe they do perform init or shutdown logic.
    This is to fix the naming to better reflect their purpose.
    
    Signed-off-by: Marco Chiappero <marco.chiappero@intel.com>
    Co-developed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Fiona Trahe <fiona.trahe@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 480af08b5ca757c4f7ebb9cf999c996ca54b805e
Author: Marco Chiappero <marco.chiappero@intel.com>
Date:   Thu Aug 12 21:21:19 2021 +0100

    crypto: qat - fix reuse of completion variable
    
    [ Upstream commit 3d655732b0199562267a05c7ff69ecdd11632939 ]
    
    Use reinit_completion() to set to a clean state a completion variable,
    used to coordinate the VF to PF request-response flow, before every
    new VF request.
    
    Signed-off-by: Marco Chiappero <marco.chiappero@intel.com>
    Co-developed-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Fiona Trahe <fiona.trahe@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b51cb36e1f849020ec34f2b7f9d06eb57ba058eb
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Thu Aug 12 21:21:14 2021 +0100

    crypto: qat - handle both source of interrupt in VF ISR
    
    [ Upstream commit 0a73c762e1eee33a5e5dc0e3488f1b7cd17249b3 ]
    
    The top half of the VF drivers handled only a source at the time.
    If an interrupt for PF2VF and bundle occurred at the same time, the ISR
    scheduled only the bottom half for PF2VF.
    This patch fixes the VF top half so that if both sources of interrupt
    trigger at the same time, both bottom halves are scheduled.
    
    This patch is based on earlier work done by Conor McLoughlin.
    
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Reviewed-by: Fiona Trahe <fiona.trahe@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 283b8b67b3df74ca9df45431388ca422d14b6253
Author: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
Date:   Thu Aug 12 21:21:13 2021 +0100

    crypto: qat - do not ignore errors from enable_vf2pf_comms()
    
    [ Upstream commit 5147f0906d50a9d26f2b8698cd06b5680e9867ff ]
    
    The function adf_dev_init() ignores the error code reported by
    enable_vf2pf_comms(). If the latter fails, e.g. the VF is not compatible
    with the pf, then the load of the VF driver progresses.
    This patch changes adf_dev_init() so that the error code from
    enable_vf2pf_comms() is returned to the caller.
    
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Reviewed-by: Marco Chiappero <marco.chiappero@intel.com>
    Reviewed-by: Fiona Trahe <fiona.trahe@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0dfadcf9e9e4dc072fd328ea34fe1830993b425b
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Mon Aug 16 10:44:47 2021 +0900

    libata: fix ata_host_start()
    
    [ Upstream commit 355a8031dc174450ccad2a61c513ad7222d87a97 ]
    
    The loop on entry of ata_host_start() may not initialize host->ops to a
    non NULL value. The test on the host_stop field of host->ops must then
    be preceded by a check that host->ops is not NULL.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Link: https://lore.kernel.org/r/20210816014456.2191776-3-damien.lemoal@wdc.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf5b3bd01970a902f25f66704713ae2893898119
Author: Vineeth Vijayan <vneethv@linux.ibm.com>
Date:   Sun Apr 25 10:52:38 2021 +0200

    s390/cio: add dev_busid sysfs entry for each subchannel
    
    [ Upstream commit d3683c055212bf910d4e318f7944910ce10dbee6 ]
    
    Introduce dev_busid, which exports the device-id associated with the
    io-subchannel (and message-subchannel). The dev_busid indicates that of
    the device which may be physically installed on the corrosponding
    subchannel. The dev_busid value "none" indicates that the subchannel
    is not valid, there is no I/O device currently associated with the
    subchannel.
    
    The dev_busid information would be helpful to write device-specific
    udev-rules associated with the subchannel. The dev_busid interface would
    be available even when the sch is not bound to any driver or if there is
    no operational device connected on it. Hence this attribute can be used to
    write udev-rules which are specific to the device associated with the
    subchannel.
    
    Signed-off-by: Vineeth Vijayan <vneethv@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e92a5b41ed4c9c9993fbf40a090484cf20c49af4
Author: Sebastian Krzyszkowiak <sebastian.krzyszkowiak@puri.sm>
Date:   Mon Aug 16 18:50:14 2021 +0200

    power: supply: max17042_battery: fix typo in MAx17042_TOFF
    
    [ Upstream commit ed0d0a0506025f06061325cedae1bbebd081620a ]
    
    Signed-off-by: Sebastian Krzyszkowiak <sebastian.krzyszkowiak@puri.sm>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbce041ab8d1d9e7e57666e533ad4018f9e265e8
Author: Ruozhu Li <liruozhu@huawei.com>
Date:   Wed Jul 28 17:41:20 2021 +0800

    nvme-rdma: don't update queue count when failing to set io queues
    
    [ Upstream commit 85032874f80ba17bf187de1d14d9603bf3f582b8 ]
    
    We update ctrl->queue_count and schedule another reconnect when io queue
    count is zero.But we will never try to create any io queue in next reco-
    nnection, because ctrl->queue_count already set to zero.We will end up
    having an admin-only session in Live state, which is exactly what we try
    to avoid in the original patch.
    Update ctrl->queue_count after queue_count zero checking to fix it.
    
    Signed-off-by: Ruozhu Li <liruozhu@huawei.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ff23e9baeab1c3c918b957bb2ef7653d56ded44
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Aug 9 08:40:26 2021 +0200

    bcache: add proper error unwinding in bcache_device_init
    
    [ Upstream commit 224b0683228c5f332f9cee615d85e75e9a347170 ]
    
    Except for the IDA none of the allocations in bcache_device_init is
    unwound on error, fix that.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Coly Li <colyli@suse.de>
    Link: https://lore.kernel.org/r/20210809064028.1198327-7-hch@lst.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 891ab1769ff1cc40fff0fcea0f4b359f115effde
Author: Pali Rohár <pali@kernel.org>
Date:   Sun Aug 8 18:24:37 2021 +0200

    isofs: joliet: Fix iocharset=utf8 mount option
    
    [ Upstream commit 28ce50f8d96ec9035f60c9348294ea26b94db944 ]
    
    Currently iocharset=utf8 mount option is broken. To use UTF-8 as iocharset,
    it is required to use utf8 mount option.
    
    Fix iocharset=utf8 mount option to use be equivalent to the utf8 mount
    option.
    
    If UTF-8 as iocharset is used then s_nls_iocharset is set to NULL. So
    simplify code around, remove s_utf8 field as to distinguish between UTF-8
    and non-UTF-8 it is needed just to check if s_nls_iocharset is set to NULL
    or not.
    
    Link: https://lore.kernel.org/r/20210808162453.1653-5-pali@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd6ab4e1c2b6a22318f2526282dbf33c7fb51151
Author: Jan Kara <jack@suse.cz>
Date:   Mon May 3 11:39:03 2021 +0200

    udf: Check LVID earlier
    
    [ Upstream commit 781d2a9a2fc7d0be53a072794dc03ef6de770f3d ]
    
    We were checking validity of LVID entries only when getting
    implementation use information from LVID in udf_sb_lvidiu(). However if
    the LVID is suitably corrupted, it can cause problems also to code such
    as udf_count_free() which doesn't use udf_sb_lvidiu(). So check validity
    of LVID already when loading it from the disk and just disable LVID
    altogether when it is not valid.
    
    Reported-by: syzbot+7fbfe5fed73ebb675748@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6c3fefc6bb11bef1bd8adfe37e0f317303ab751
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jul 13 15:39:46 2021 +0200

    hrtimer: Avoid double reprogramming in __hrtimer_start_range_ns()
    
    [ Upstream commit 627ef5ae2df8eeccb20d5af0e4cfa4df9e61ed28 ]
    
    If __hrtimer_start_range_ns() is invoked with an already armed hrtimer then
    the timer has to be canceled first and then added back. If the timer is the
    first expiring timer then on removal the clockevent device is reprogrammed
    to the next expiring timer to avoid that the pending expiry fires needlessly.
    
    If the new expiry time ends up to be the first expiry again then the clock
    event device has to reprogrammed again.
    
    Avoid this by checking whether the timer is the first to expire and in that
    case, keep the timer on the current CPU and delay the reprogramming up to
    the point where the timer has been enqueued again.
    
    Reported-by: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20210713135157.873137732@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 293fe77dbfe68c5794be4e76c9212003e9304d24
Author: Dietmar Eggemann <dietmar.eggemann@arm.com>
Date:   Wed Aug 4 15:59:25 2021 +0200

    sched/deadline: Fix missing clock update in migrate_task_rq_dl()
    
    [ Upstream commit b4da13aa28d4fd0071247b7b41c579ee8a86c81a ]
    
    A missing clock update is causing the following warning:
    
    rq->clock_update_flags < RQCF_ACT_SKIP
    WARNING: CPU: 112 PID: 2041 at kernel/sched/sched.h:1453
    sub_running_bw.isra.0+0x190/0x1a0
    ...
    CPU: 112 PID: 2041 Comm: sugov:112 Tainted: G W 5.14.0-rc1 #1
    Hardware name: WIWYNN Mt.Jade Server System
    B81.030Z1.0007/Mt.Jade Motherboard, BIOS 1.6.20210526 (SCP:
    1.06.20210526) 2021/05/26
    ...
    Call trace:
      sub_running_bw.isra.0+0x190/0x1a0
      migrate_task_rq_dl+0xf8/0x1e0
      set_task_cpu+0xa8/0x1f0
      try_to_wake_up+0x150/0x3d4
      wake_up_q+0x64/0xc0
      __up_write+0xd0/0x1c0
      up_write+0x4c/0x2b0
      cppc_set_perf+0x120/0x2d0
      cppc_cpufreq_set_target+0xe0/0x1a4 [cppc_cpufreq]
      __cpufreq_driver_target+0x74/0x140
      sugov_work+0x64/0x80
      kthread_worker_fn+0xe0/0x230
      kthread+0x138/0x140
      ret_from_fork+0x10/0x18
    
    The task causing this is the `cppc_fie` DL task introduced by
    commit 1eb5dde674f5 ("cpufreq: CPPC: Add support for frequency
    invariance").
    
    With CONFIG_ACPI_CPPC_CPUFREQ_FIE=y and schedutil cpufreq governor on
    slow-switching system (like on this Ampere Altra WIWYNN Mt. Jade Arm
    Server):
    
    DL task `curr=sugov:112` lets `p=cppc_fie` migrate and since the latter
    is in `non_contending` state, migrate_task_rq_dl() calls
    
      sub_running_bw()->__sub_running_bw()->cpufreq_update_util()->
      rq_clock()->assert_clock_updated()
    
    on p.
    
    Fix this by updating the clock for a non_contending task in
    migrate_task_rq_dl() before calling sub_running_bw().
    
    Reported-by: Bruno Goncalves <bgoncalv@redhat.com>
    Signed-off-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Daniel Bristot de Oliveira <bristot@kernel.org>
    Acked-by: Juri Lelli <juri.lelli@redhat.com>
    Link: https://lore.kernel.org/r/20210804135925.3734605-1-dietmar.eggemann@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c27cabac4afe8ca3822178888613499accb06920
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jul 27 13:23:34 2021 +0300

    crypto: omap-sham - clear dma flags only after omap_sham_update_dma_stop()
    
    [ Upstream commit fe28140b3393b0ba1eb95cc109f974a7e58b26fd ]
    
    We should not clear FLAGS_DMA_ACTIVE before omap_sham_update_dma_stop() is
    done calling dma_unmap_sg(). We already clear FLAGS_DMA_ACTIVE at the
    end of omap_sham_update_dma_stop().
    
    The early clearing of FLAGS_DMA_ACTIVE is not causing issues as we do not
    need to defer anything based on FLAGS_DMA_ACTIVE currently. So this can be
    applied as clean-up.
    
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1c3b899fb5d481c2a0ea99f259be44b1115e209
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Aug 1 15:30:59 2021 +0200

    power: supply: axp288_fuel_gauge: Report register-address on readb / writeb errors
    
    [ Upstream commit caa534c3ba40c6e8352b42cbbbca9ba481814ac8 ]
    
    When fuel_gauge_reg_readb()/_writeb() fails, report which register we
    were trying to read / write when the error happened.
    
    Also reword the message a bit:
    - Drop the axp288 prefix, dev_err() already prints this
    - Switch from telegram / abbreviated style to a normal sentence, aligning
      the message with those from fuel_gauge_read_*bit_word()
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc0d543f53e0d73059cf10733be0109984dadd44
Author: Quentin Perret <qperret@google.com>
Date:   Tue Jul 27 11:11:01 2021 +0100

    sched/deadline: Fix reset_on_fork reporting of DL tasks
    
    [ Upstream commit f95091536f78971b269ec321b057b8d630b0ad8a ]
    
    It is possible for sched_getattr() to incorrectly report the state of
    the reset_on_fork flag when called on a deadline task.
    
    Indeed, if the flag was set on a deadline task using sched_setattr()
    with flags (SCHED_FLAG_RESET_ON_FORK | SCHED_FLAG_KEEP_PARAMS), then
    p->sched_reset_on_fork will be set, but __setscheduler() will bail out
    early, which means that the dl_se->flags will not get updated by
    __setscheduler_params()->__setparam_dl(). Consequently, if
    sched_getattr() is then called on the task, __getparam_dl() will
    override kattr.sched_flags with the now out-of-date copy in dl_se->flags
    and report the stale value to userspace.
    
    To fix this, make sure to only copy the flags that are relevant to
    sched_deadline to and from the dl_se->flags field.
    
    Signed-off-by: Quentin Perret <qperret@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20210727101103.2729607-2-qperret@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 463cca05f6ca46813f40585e63e7ac9b304ed15a
Author: Sean Anderson <sean.anderson@seco.com>
Date:   Thu Jul 1 14:56:37 2021 -0400

    crypto: mxs-dcp - Check for DMA mapping errors
    
    [ Upstream commit df6313d707e575a679ada3313358289af24454c0 ]
    
    After calling dma_map_single(), we must also call dma_mapping_error().
    This fixes the following warning when compiling with CONFIG_DMA_API_DEBUG:
    
    [  311.241478] WARNING: CPU: 0 PID: 428 at kernel/dma/debug.c:1027 check_unmap+0x79c/0x96c
    [  311.249547] DMA-API: mxs-dcp 2280000.crypto: device driver failed to check map error[device address=0x00000000860cb080] [size=32 bytes] [mapped as single]
    
    Signed-off-by: Sean Anderson <sean.anderson@seco.com>
    Reviewed-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02c0d85cd4d5628d122be60fb62a97ca917ed108
Author: Jeongtae Park <jeongtae.park@gmail.com>
Date:   Thu Jul 1 23:26:30 2021 +0900

    regmap: fix the offset of register error log
    
    [ Upstream commit 1852f5ed358147095297a09cc3c6f160208a676d ]
    
    This patch fixes the offset of register error log
    by using regmap_get_offset().
    
    Signed-off-by: Jeongtae Park <jeongtae.park@gmail.com>
    Link: https://lore.kernel.org/r/20210701142630.44936-1-jeongtae.park@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7a041073f4e72083dcd688a003a59bf9d9c9124
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Jun 30 17:35:18 2021 +0200

    locking/mutex: Fix HANDOFF condition
    
    [ Upstream commit 048661a1f963e9517630f080687d48af79ed784c ]
    
    Yanfei reported that setting HANDOFF should not depend on recomputing
    @first, only on @first state. Which would then give:
    
      if (ww_ctx || !first)
        first = __mutex_waiter_is_first(lock, &waiter);
      if (first)
        __mutex_set_flag(lock, MUTEX_FLAG_HANDOFF);
    
    But because 'ww_ctx || !first' is basically 'always' and the test for
    first is relatively cheap, omit that first branch entirely.
    
    Reported-by: Yanfei Xu <yanfei.xu@windriver.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Reviewed-by: Yanfei Xu <yanfei.xu@windriver.com>
    Link: https://lore.kernel.org/r/20210630154114.896786297@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 777631932f4a5185c18b3df1b47f365dbaa70252
Author: Marek Behún <kabel@kernel.org>
Date:   Thu Jun 24 19:14:17 2021 +0200

    PCI: Call Max Payload Size-related fixup quirks early
    
    commit b8da302e2955fe4d41eb9d48199242674d77dbe0 upstream.
    
    pci_device_add() calls HEADER fixups after pci_configure_device(), which
    configures Max Payload Size.
    
    Convert MPS-related fixups to EARLY fixups so pci_configure_mps() takes
    them into account.
    
    Fixes: 27d868b5e6cfa ("PCI: Set MPS to match upstream bridge")
    Link: https://lore.kernel.org/r/20210624171418.27194-1-kabel@kernel.org
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04931dd5fbe1855d4f783b0b1d74217c96125165
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun May 30 12:24:47 2021 -0400

    x86/reboot: Limit Dell Optiplex 990 quirk to early BIOS versions
    
    commit a729691b541f6e63043beae72e635635abe5dc09 upstream.
    
    When this platform was relatively new in November 2011, with early BIOS
    revisions, a reboot quirk was added in commit 6be30bb7d750 ("x86/reboot:
    Blacklist Dell OptiPlex 990 known to require PCI reboot")
    
    However, this quirk (and several others) are open-ended to all BIOS
    versions and left no automatic expiry if/when the system BIOS fixed the
    issue, meaning that nobody is likely to come along and re-test.
    
    What is really problematic with using PCI reboot as this quirk does, is
    that it causes this platform to do a full power down, wait one second,
    and then power back on.  This is less than ideal if one is using it for
    boot testing and/or bisecting kernels when legacy rotating hard disks
    are installed.
    
    It was only by chance that the quirk was noticed in dmesg - and when
    disabled it turned out that it wasn't required anymore (BIOS A24), and a
    default reboot would work fine without the "harshness" of power cycling the
    machine (and disks) down and up like the PCI reboot does.
    
    Doing a bit more research, it seems that the "newest" BIOS for which the
    issue was reported[1] was version A06, however Dell[2] seemed to suggest
    only up to and including version A05, with the A06 having a large number of
    fixes[3] listed.
    
    As is typical with a new platform, the initial BIOS updates come frequently
    and then taper off (and in this case, with a revival for CPU CVEs); a
    search for O990-A<ver>.exe reveals the following dates:
    
            A02     16 Mar 2011
            A03     11 May 2011
            A06     14 Sep 2011
            A07     24 Oct 2011
            A10     08 Dec 2011
            A14     06 Sep 2012
            A16     15 Oct 2012
            A18     30 Sep 2013
            A19     23 Sep 2015
            A20     02 Jun 2017
            A23     07 Mar 2018
            A24     21 Aug 2018
    
    While it's overkill to flash and test each of the above, it would seem
    likely that the issue was contained within A0x BIOS versions, given the
    dates above and the dates of issue reports[4] from distros.  So rather than
    just throw out the quirk entirely, limit the scope to just those early BIOS
    versions, in case people are still running systems from 2011 with the
    original as-shipped early A0x BIOS versions.
    
    [1] https://lore.kernel.org/lkml/1320373471-3942-1-git-send-email-trenn@suse.de/
    [2] https://www.dell.com/support/kbdoc/en-ca/000131908/linux-based-operating-systems-stall-upon-reboot-on-optiplex-390-790-990-systems
    [3] https://www.dell.com/support/home/en-ca/drivers/driversdetails?driverid=85j10
    [4] https://bugs.launchpad.net/ubuntu/+source/linux/+bug/768039
    
    Fixes: 6be30bb7d750 ("x86/reboot: Blacklist Dell OptiPlex 990 known to require PCI reboot")
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210530162447.996461-4-paul.gortmaker@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5339240fb9e5aedd97a43d04bd9847000fc3f955
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Fri Aug 13 14:30:49 2021 +0800

    usb: mtu3: fix the wrong HS mult value
    
    commit 44e4439d8f9f8d0e9da767d1f31e7c211081feca upstream.
    
    usb_endpoint_maxp() returns actual max packet size, @mult will
    always be zero, fix it by using usb_endpoint_maxp_mult() instead
    to get mult.
    
    Fixes: 4d79e042ed8b ("usb: mtu3: add support for usb3.1 IP")
    Cc: stable@vger.kernel.org
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/1628836253-7432-3-git-send-email-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8f832d565e769d88dbcfb3a3a53c7918e01c371
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Fri Aug 13 14:30:48 2021 +0800

    usb: mtu3: use @mult for HS isoc or intr
    
    commit fd7cb394ec7efccc3985feb0978cee4d352e1817 upstream.
    
    For HS isoc or intr, should use @mult but not @burst
    to save mult value.
    
    Fixes: 4d79e042ed8b ("usb: mtu3: add support for usb3.1 IP")
    Cc: stable@vger.kernel.org
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/1628836253-7432-2-git-send-email-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d7d5ffda8a8e28bb05c5e1ff53716cc7a5a2dd8
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Fri Aug 27 15:32:27 2021 +0900

    usb: host: xhci-rcar: Don't reload firmware after the completion
    
    commit 57f3ffdc11143f56f1314972fe86fe17a0dcde85 upstream.
    
    According to the datasheet, "Upon the completion of FW Download,
    there is no need to write or reload FW.". Otherwise, it's possible
    to cause unexpected behaviors. So, adds such a condition.
    
    Fixes: 4ac8918f3a73 ("usb: host: xhci-plat: add support for the R-Car H2 and M2 xHCI controllers")
    Cc: stable@vger.kernel.org # v3.17+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/20210827063227.81990-1-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9d1115fca4cb49b1cb363b6e702455e452e3d3b
Author: Alexander Tsoy <alexander@tsoy.me>
Date:   Tue Aug 31 03:25:31 2021 +0300

    ALSA: usb-audio: Add registration quirk for JBL Quantum 800
    
    commit c8b177b6e3a005bd8fb0395a4bc5db3470301c28 upstream.
    
    Add another device ID for JBL Quantum 800. It requires the same quirk as
    other JBL Quantum devices.
    
    Signed-off-by: Alexander Tsoy <alexander@tsoy.me>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210831002531.116957-1-alexander@tsoy.me
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1059d8a3e222f7127724ad307e6a5a85a9a6f7d7
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Aug 25 13:41:42 2021 +0800

    Revert "btrfs: compression: don't try to compress if we don't have enough pages"
    
    commit 4e9655763b82a91e4c341835bb504a2b1590f984 upstream.
    
    This reverts commit f2165627319ffd33a6217275e5690b1ab5c45763.
    
    [BUG]
    It's no longer possible to create compressed inline extent after commit
    f2165627319f ("btrfs: compression: don't try to compress if we don't
    have enough pages").
    
    [CAUSE]
    For compression code, there are several possible reasons we have a range
    that needs to be compressed while it's no more than one page.
    
    - Compressed inline write
      The data is always smaller than one sector and the test lacks the
      condition to properly recognize a non-inline extent.
    
    - Compressed subpage write
      For the incoming subpage compressed write support, we require page
      alignment of the delalloc range.
      And for 64K page size, we can compress just one page into smaller
      sectors.
    
    For those reasons, the requirement for the data to be more than one page
    is not correct, and is already causing regression for compressed inline
    data writeback.  The idea of skipping one page to avoid wasting CPU time
    could be revisited in the future.
    
    [FIX]
    Fix it by reverting the offending commit.
    
    Reported-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Link: https://lore.kernel.org/linux-btrfs/afa2742.c084f5d6.17b6b08dffc@tnonline.net
    Fixes: f2165627319f ("btrfs: compression: don't try to compress if we don't have enough pages")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd8b408964e77e9b23c4fc6e0cca61bc9345a01f
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Mon Dec 14 19:11:25 2020 -0800

    mm/page_alloc: speed up the iteration of max_order
    
    commit 7ad69832f37e3cea8557db6df7c793905f1135e8 upstream.
    
    When we free a page whose order is very close to MAX_ORDER and greater
    than pageblock_order, it wastes some CPU cycles to increase max_order to
    MAX_ORDER one by one and check the pageblock migratetype of that page
    repeatedly especially when MAX_ORDER is much larger than pageblock_order.
    
    We also should not be checking migratetype of buddy when "order ==
    MAX_ORDER - 1" as the buddy pfn may be invalid, so adjust the condition.
    With the new check, we don't need the max_order check anymore, so we
    replace it.
    
    Also adjust max_order initialization so that it's lower by one than
    previously, which makes the code hopefully more clear.
    
    Link: https://lkml.kernel.org/r/20201204155109.55451-1-songmuchun@bytedance.com
    Fixes: d9dddbf55667 ("mm/page_alloc: prevent merging between isolated and other pageblocks")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e531fb101fb8632bb09f67bdbe0e3b41a1d7967
Author: Esben Haabendal <esben@geanix.com>
Date:   Mon Jun 21 10:20:08 2021 +0200

    net: ll_temac: Remove left-over debug message
    
    commit ce03b94ba682a67e8233c9ee3066071656ded58f upstream.
    
    Fixes: f63963411942 ("net: ll_temac: Avoid ndo_start_xmit returning NETDEV_TX_BUSY")
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa4468a122f243dd0ae89721b7f13f064fbae8d6
Author: Fangrui Song <maskray@google.com>
Date:   Wed Mar 25 09:42:57 2020 -0700

    powerpc/boot: Delete unneeded .globl _zimage_start
    
    commit 968339fad422a58312f67718691b717dac45c399 upstream.
    
    .globl sets the symbol binding to STB_GLOBAL while .weak sets the
    binding to STB_WEAK. GNU as let .weak override .globl since
    binutils-gdb 5ca547dc2399a0a5d9f20626d4bf5547c3ccfddd (1996). Clang
    integrated assembler let the last win but it may error in the future.
    
    Since it is a convention that only one binding directive is used, just
    delete .globl.
    
    Fixes: ee9d21b3b358 ("powerpc/boot: Ensure _zimage_start is a weak symbol")
    Signed-off-by: Fangrui Song <maskray@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200325164257.170229-1-maskray@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78f92d8ce3b101ee591f56c75833fc449d95a948
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sat Jul 6 00:18:53 2019 +1000

    powerpc/module64: Fix comment in R_PPC64_ENTRY handling
    
    commit 2fb0a2c989837c976b68233496bbaefb47cd3d6f upstream.
    
    The comment here is wrong, the addi reads from r2 not r12. The code is
    correct, 0x38420000 = addi r2,r2,0.
    
    Fixes: a61674bdfc7c ("powerpc/module: Handle R_PPC64_ENTRY relocations")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 145cbec513bfca1c406cde474e792f655b3e9bd5
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:09 2019 +0000

    crypto: talitos - reduce max key size for SEC1
    
    commit b8fbdc2bc4e71b62646031d5df5f08aafe15d5ad upstream.
    
    SEC1 doesn't support SHA384/512, so it doesn't require
    longer keys.
    
    This patch reduces the max key size when the driver
    is built for SEC1 only.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 03d2c5114c95 ("crypto: talitos - Extend max key length for SHA384/512-HMAC and AEAD")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 692bae5b0a749841199eb9e39b67a3c6448eb586
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Tue Apr 9 11:46:14 2019 -0400

    SUNRPC/nfs: Fix return value for nfs4_callback_compound()
    
    commit 83dd59a0b9afc3b1a2642fb5c9b0585b1c08768f upstream.
    
    RPC server procedures are normally expected to return a __be32 encoded
    status value of type 'enum rpc_accept_stat', however at least one function
    wants to return an authentication status of type 'enum rpc_auth_stat'
    in the case where authentication fails.
    This patch adds functionality to allow this.
    
    Fixes: a4e187d83d88 ("NFS: Don't drop CB requests with invalid principals")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69178f2d652e64991dc812be24d0776a731f447d
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Mon Oct 12 10:50:14 2020 -0400

    ipv4/icmp: l3mdev: Perform icmp error route lookup on source device routing table (v2)
    
    commit e1e84eb58eb494b77c8389fc6308b5042dcce791 upstream.
    
    As per RFC792, ICMP errors should be sent to the source host.
    
    However, in configurations with Virtual Routing and Forwarding tables,
    looking up which routing table to use is currently done by using the
    destination net_device.
    
    commit 9d1a6c4ea43e ("net: icmp_route_lookup should use rt dev to
    determine L3 domain") changes the interface passed to
    l3mdev_master_ifindex() and inet_addr_type_dev_table() from skb_in->dev
    to skb_dst(skb_in)->dev. This effectively uses the destination device
    rather than the source device for choosing which routing table should be
    used to lookup where to send the ICMP error.
    
    Therefore, if the source and destination interfaces are within separate
    VRFs, or one in the global routing table and the other in a VRF, looking
    up the source host in the destination interface's routing table will
    fail if the destination interface's routing table contains no route to
    the source host.
    
    One observable effect of this issue is that traceroute does not work in
    the following cases:
    
    - Route leaking between global routing table and VRF
    - Route leaking between VRFs
    
    Preferably use the source device routing table when sending ICMP error
    messages. If no source device is set, fall-back on the destination
    device routing table. Else, use the main routing table (index 0).
    
    [ It has been pointed out that a similar issue may exist with ICMP
      errors triggered when forwarding between network namespaces. It would
      be worthwhile to investigate, but is outside of the scope of this
      investigation. ]
    
    [ It has also been pointed out that a similar issue exists with
      unreachable / fragmentation needed messages, which can be triggered by
      changing the MTU of eth1 in r1 to 1400 and running:
    
      ip netns exec h1 ping -s 1450 -Mdo -c1 172.16.2.2
    
      Some investigation points to raw_icmp_error() and raw_err() as being
      involved in this last scenario. The focus of this patch is TTL expired
      ICMP messages, which go through icmp_route_lookup.
      Investigation of failure modes related to raw_icmp_error() is beyond
      this investigation's scope. ]
    
    Fixes: 9d1a6c4ea43e ("net: icmp_route_lookup should use rt dev to determine L3 domain")
    Link: https://tools.ietf.org/html/rfc792
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4b606f708379d10ea822bde217bdf338a94d096
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 11 14:09:04 2021 -0800

    USB: serial: mos7720: improve OOM-handling in read_mos_reg()
    
    commit 161a582bd1d8681095f158d11bc679a58f1d026b upstream.
    
    clang static analysis reports this problem
    
    mos7720.c:352:2: warning: Undefined or garbage value returned to caller
            return d;
            ^~~~~~~~
    
    In the parport_mos7715_read_data()'s call to read_mos_reg(), 'd' is
    only set after the alloc block.
    
            buf = kmalloc(1, GFP_KERNEL);
            if (!buf)
                    return -ENOMEM;
    
    Although the problem is reported in parport_most7715_read_data(),
    none of the callee's of read_mos_reg() check the return status.
    
    Make sure to clear the return-value buffer also on allocation failures.
    
    Fixes: 0d130367abf5 ("USB: serial: mos7720: fix control-message error handling")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Link: https://lore.kernel.org/r/20210111220904.1035957-1-trix@redhat.com
    [ johan: only clear the buffer on errors, amend commit message ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4768973dffed4d0126854514335ed4fe87bec1ab
Author: Liu Jian <liujian56@huawei.com>
Date:   Fri Jul 16 12:06:17 2021 +0800

    igmp: Add ip_mc_list lock in ip_check_mc_rcu
    
    commit 23d2b94043ca8835bd1e67749020e839f396a1c2 upstream.
    
    I got below panic when doing fuzz test:
    
    Kernel panic - not syncing: panic_on_warn set ...
    CPU: 0 PID: 4056 Comm: syz-executor.3 Tainted: G    B             5.14.0-rc1-00195-gcff5c4254439-dirty #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    Call Trace:
    dump_stack_lvl+0x7a/0x9b
    panic+0x2cd/0x5af
    end_report.cold+0x5a/0x5a
    kasan_report+0xec/0x110
    ip_check_mc_rcu+0x556/0x5d0
    __mkroute_output+0x895/0x1740
    ip_route_output_key_hash_rcu+0x2d0/0x1050
    ip_route_output_key_hash+0x182/0x2e0
    ip_route_output_flow+0x28/0x130
    udp_sendmsg+0x165d/0x2280
    udpv6_sendmsg+0x121e/0x24f0
    inet6_sendmsg+0xf7/0x140
    sock_sendmsg+0xe9/0x180
    ____sys_sendmsg+0x2b8/0x7a0
    ___sys_sendmsg+0xf0/0x160
    __sys_sendmmsg+0x17e/0x3c0
    __x64_sys_sendmmsg+0x9e/0x100
    do_syscall_64+0x3b/0x90
    entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x462eb9
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8
     48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48>
     3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f3df5af1c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000133
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462eb9
    RDX: 0000000000000312 RSI: 0000000020001700 RDI: 0000000000000007
    RBP: 0000000000000004 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f3df5af26bc
    R13: 00000000004c372d R14: 0000000000700b10 R15: 00000000ffffffff
    
    It is one use-after-free in ip_check_mc_rcu.
    In ip_mc_del_src, the ip_sf_list of pmc has been freed under pmc->lock protection.
    But access to ip_sf_list in ip_check_mc_rcu is not protected by the lock.
    
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ba71ffe2a3fb29a1f55f0cad7f2988318dc10f9
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jul 15 14:23:21 2021 +0100

    ARM: imx: fix missing 3rd argument in macro imx_mmdc_perf_init
    
    commit 20fb73911fec01f06592de1cdbca00b66602ebd7 upstream.
    
    The function imx_mmdc_perf_init recently had a 3rd argument added to
    it but the equivalent macro was not updated and is still the older
    2 argument version. Fix this by adding in the missing 3rd argumement
    mmdc_ipg_clk.
    
    Fixes: f07ec8536580 ("ARM: imx: add missing clk_disable_unprepare()")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ad9438f6d25d67668216174188a2683f17e19ae
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Jun 15 20:52:39 2021 +0800

    ARM: imx: add missing clk_disable_unprepare()
    
    commit f07ec85365807b3939f32d0094a6dd5ce065d1b9 upstream.
    
    clock source is prepared and enabled by clk_prepare_enable()
    in probe function, but no disable or unprepare in remove and
    error path.
    
    Fixes: 9454a0caff6a ("ARM: imx: add mmdc ipg clock operation for mmdc")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a3217bba039330f5c489245923f989b43bd94d1
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Wed Jul 7 19:54:30 2021 +0200

    media: stkwebcam: fix memory leak in stk_camera_probe
    
    commit 514e97674400462cc09c459a1ddfb9bf39017223 upstream.
    
    My local syzbot instance hit memory leak in usb_set_configuration().
    The problem was in unputted usb interface. In case of errors after
    usb_get_intf() the reference should be putted to correclty free memory
    allocated for this interface.
    
    Fixes: ec16dae5453e ("V4L/DVB (7019): V4L: add support for Syntek DC1125 webcams")
    Cc: stable@vger.kernel.org
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c56350d5bd66da152f6884ab01fcdc199bacfbdb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Sep 6 10:31:20 2021 +0200

    clk: fix build warning for orphan_list
    
    In the backport of commit bdcf1dc25324 ("clk: Evict unregistered clks
    from parent caches") to the 4.19.y and 4.14.y stable trees, the
    orphan_list structure was placed in the wrong location, causing loads of
    build warnings on systems that do not define CONFIG_DEBUG_FS.
    
    Fix this up by moving the structure to the correct place in the file.
    
    Reported-by: "kernelci.org bot" <bot@kernelci.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5056ed2789bdefcb48983122bfbe9e66312bc931
Author: Zubin Mithra <zsm@chromium.org>
Date:   Fri Aug 27 08:37:35 2021 -0700

    ALSA: pcm: fix divide error in snd_pcm_lib_ioctl
    
    commit f3eef46f0518a2b32ca1244015820c35a22cfe4a upstream.
    
    Syzkaller reported a divide error in snd_pcm_lib_ioctl. fifo_size
    is of type snd_pcm_uframes_t(unsigned long). If frame_size
    is 0x100000000, the error occurs.
    
    Fixes: a9960e6a293e ("ALSA: pcm: fix fifo_size frame calculation")
    Signed-off-by: Zubin Mithra <zsm@chromium.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210827153735.789452-1-zsm@chromium.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c62e4ae337ad450659fff72a627e3c2738c7bbe
Author: Ben Dooks <ben-linux@fluff.org>
Date:   Mon Nov 4 18:15:15 2019 +0100

    ARM: 8918/2: only build return_address() if needed
    
    commit fb033c95c94ca1ee3d16e04ebdb85d65fb55fff8 upstream.
    
    The system currently warns if the config conditions for
    building return_address in arch/arm/kernel/return_address.c
    are not met, leaving just an EXPORT_SYMBOL_GPL(return_address)
    of a function defined to be 'static linline'.
    This is a result of aeea3592a13b ("ARM: 8158/1: LLVMLinux: use static inline in ARM ftrace.h").
    
    Since we're not going to build anything other than an exported
    symbol for something that is already being defined to be an
    inline-able return of NULL, just avoid building the code to
    remove the following warning:
    
    Fixes: aeea3592a13b ("ARM: 8158/1: LLVMLinux: use static inline in ARM ftrace.h")
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41eb3512d2eba335facba3290eb88402ad8fd13b
Author: Christoph Hellwig <hch@lst.de>
Date:   Fri Aug 27 18:32:50 2021 +0200

    cryptoloop: add a deprecation warning
    
    [ Upstream commit 222013f9ac30b9cec44301daa8dbd0aae38abffb ]
    
    Support for cryptoloop has been officially marked broken and deprecated
    in favor of dm-crypt (which supports the same broken algorithms if
    needed) in Linux 2.6.4 (released in March 2004), and support for it has
    been entirely removed from losetup in util-linux 2.23 (released in April
    2013).  Add a warning and a deprecation schedule.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20210827163250.255325-1-hch@lst.de
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cff9af5340e39dcca479538459bb5795716fde33
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Tue Aug 17 17:10:42 2021 -0500

    perf/x86/amd/ibs: Work around erratum #1197
    
    [ Upstream commit 26db2e0c51fe83e1dd852c1321407835b481806e ]
    
    Erratum #1197 "IBS (Instruction Based Sampling) Register State May be
    Incorrect After Restore From CC6" is published in a document:
    
      "Revision Guide for AMD Family 19h Models 00h-0Fh Processors" 56683 Rev. 1.04 July 2021
    
      https://bugzilla.kernel.org/show_bug.cgi?id=206537
    
    Implement the erratum's suggested workaround and ignore IBS samples if
    MSRC001_1031 == 0.
    
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20210817221048.88063-3-kim.phillips@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f109e8a1678ce920b7f0df7865f2a31754ec5d1c
Author: Xiaoyao Li <xiaoyao.li@intel.com>
Date:   Tue Aug 24 12:06:22 2021 +0800

    perf/x86/intel/pt: Fix mask of num_address_ranges
    
    [ Upstream commit c53c6b7409f4cd9e542991b53d597fbe2751d7db ]
    
    Per SDM, bit 2:0 of CPUID(0x14,1).EAX[2:0] reports the number of
    configurable address ranges for filtering, not bit 1:0.
    
    Signed-off-by: Xiaoyao Li <xiaoyao.li@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Link: https://lkml.kernel.org/r/20210824040622.4081502-1-xiaoyao.li@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cda01d1da3b0ba663ac77acd9dc254762746ebfd
Author: Shai Malin <smalin@marvell.com>
Date:   Tue Aug 24 19:52:49 2021 +0300

    qede: Fix memset corruption
    
    [ Upstream commit e543468869e2532f5d7926e8f417782b48eca3dc ]
    
    Thanks to Kees Cook who detected the problem of memset that starting
    from not the first member, but sized for the whole struct.
    The better change will be to remove the redundant memset and to clear
    only the msix_cnt member.
    
    Signed-off-by: Prabhakar Kushwaha <pkushwaha@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Shai Malin <smalin@marvell.com>
    Reported-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47116bdde9f23af744f77ed4058475359289f3f0
Author: Harini Katakam <harini.katakam@xilinx.com>
Date:   Tue Aug 24 15:32:09 2021 +0530

    net: macb: Add a NULL check on desc_ptp
    
    [ Upstream commit 85520079afce885b80647fbd0d13d8f03d057167 ]
    
    macb_ptp_desc will not return NULL under most circumstances with correct
    Kconfig and IP design config register. But for the sake of the extreme
    corner case, check for NULL when using the helper. In case of rx_tstamp,
    no action is necessary except to return (similar to timestamp disabled)
    and warn. In case of TX, return -EINVAL to let the skb be free. Perform
    this check before marking skb in progress.
    Fixes coverity warning:
    (4) Event dereference:
    Dereferencing a null pointer "desc_ptp"
    
    Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
    Reviewed-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1290961f2824a44618d4cb3f0ee5bdb8224bbe3
Author: Shai Malin <smalin@marvell.com>
Date:   Sun Aug 22 22:21:14 2021 +0300

    qed: Fix the VF msix vectors flow
    
    [ Upstream commit b0cd08537db8d2fbb227cdb2e5835209db295a24 ]
    
    For VFs we should return with an error in case we didn't get the exact
    number of msix vectors as we requested.
    Not doing that will lead to a crash when starting queues for this VF.
    
    Signed-off-by: Prabhakar Kushwaha <pkushwaha@marvell.com>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Shai Malin <smalin@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42150e1b46a474541f677c759ac61599277c8a9c
Author: Krzysztof Hałasa <khalasa@piap.pl>
Date:   Mon Jun 7 12:49:07 2021 +0200

    gpu: ipu-v3: Fix i.MX IPU-v3 offset calculations for (semi)planar U/V formats
    
    [ Upstream commit 7cca7c8096e2c8a4149405438329b5035d0744f0 ]
    
    Video captured in 1400x1050 resolution (bytesperline aka stride = 1408
    bytes) is invalid. Fix it.
    
    Signed-off-by: Krzysztof Halasa <khalasa@piap.pl>
    Link: https://lore.kernel.org/r/m3y2bmq7a4.fsf@t19.piap.pl
    [p.zabel@pengutronix.de: added "gpu: ipu-v3:" prefix to commit description]
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79a08818e97e52befb0a6d8e8a4461101c46facc
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed May 26 00:03:37 2021 -0700

    xtensa: fix kconfig unmet dependency warning for HAVE_FUTEX_CMPXCHG
    
    commit ed5aacc81cd41efc4d561e14af408d1003f7b855 upstream.
    
    XTENSA should only select HAVE_FUTEX_CMPXCHG when FUTEX is
    set/enabled. This prevents a kconfig warning.
    
    WARNING: unmet direct dependencies detected for HAVE_FUTEX_CMPXCHG
      Depends on [n]: FUTEX [=n]
      Selected by [y]:
      - XTENSA [=y] && !MMU [=n]
    
    Fixes: d951ba21b959 ("xtensa: nommu: select HAVE_FUTEX_CMPXCHG")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Max Filippov <jcmvbkbc@gmail.com>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: linux-xtensa@linux-xtensa.org
    Message-Id: <20210526070337.28130-1-rdunlap@infradead.org>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c481607ba522e31e6ed01efefc19cc1d0e0a46fa
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Fri Aug 20 23:44:17 2021 -0400

    ext4: fix race writing to an inline_data file while its xattrs are changing
    
    commit a54c4613dac1500b40e4ab55199f7c51f028e848 upstream.
    
    The location of the system.data extended attribute can change whenever
    xattr_sem is not taken.  So we need to recalculate the i_inline_off
    field since it mgiht have changed between ext4_write_begin() and
    ext4_write_end().
    
    This means that caching i_inline_off is probably not helpful, so in
    the long run we should probably get rid of it and shrink the in-memory
    ext4 inode slightly, but let's fix the race the simple way for now.
    
    Cc: stable@kernel.org
    Fixes: f19d5870cbf72 ("ext4: add normal write support for inline data")
    Reported-by: syzbot+13146364637c7363a7de@syzkaller.appspotmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
