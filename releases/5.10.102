commit 47667effb7d2f54dab3be33749c5a05152c07db0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 23 12:01:08 2022 +0100

    Linux 5.10.102
    
    Link: https://lore.kernel.org/r/20220221084921.147454846@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Slade Watkins <slade@sladewatkins.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6062d1267ff3e5570165c974bb0dc2120c9d363c
Author: Cheng Jui Wang <cheng-jui.wang@mediatek.com>
Date:   Thu Feb 10 18:50:11 2022 +0800

    lockdep: Correct lock_classes index mapping
    
    commit 28df029d53a2fd80c1b8674d47895648ad26dcfb upstream.
    
    A kernel exception was hit when trying to dump /proc/lockdep_chains after
    lockdep report "BUG: MAX_LOCKDEP_CHAIN_HLOCKS too low!":
    
    Unable to handle kernel paging request at virtual address 00054005450e05c3
    ...
    00054005450e05c3] address between user and kernel address ranges
    ...
    pc : [0xffffffece769b3a8] string+0x50/0x10c
    lr : [0xffffffece769ac88] vsnprintf+0x468/0x69c
    ...
     Call trace:
      string+0x50/0x10c
      vsnprintf+0x468/0x69c
      seq_printf+0x8c/0xd8
      print_name+0x64/0xf4
      lc_show+0xb8/0x128
      seq_read_iter+0x3cc/0x5fc
      proc_reg_read_iter+0xdc/0x1d4
    
    The cause of the problem is the function lock_chain_get_class() will
    shift lock_classes index by 1, but the index don't need to be shifted
    anymore since commit 01bb6f0af992 ("locking/lockdep: Change the range
    of class_idx in held_lock struct") already change the index to start
    from 0.
    
    The lock_classes[-1] located at chain_hlocks array. When printing
    lock_classes[-1] after the chain_hlocks entries are modified, the
    exception happened.
    
    The output of lockdep_chains are incorrect due to this problem too.
    
    Fixes: f611e8cf98ec ("lockdep: Take read/write status in consideration when generate chainkey")
    Signed-off-by: Cheng Jui Wang <cheng-jui.wang@mediatek.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Boqun Feng <boqun.feng@gmail.com>
    Link: https://lore.kernel.org/r/20220210105011.21712-1-cheng-jui.wang@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f333c1916fd6b55900029bf8f918cc00009e2111
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Tue Feb 15 08:27:35 2022 +0100

    i2c: brcmstb: fix support for DSL and CM variants
    
    commit 834cea3a252ed4847db076a769ad9efe06afe2d5 upstream.
    
    DSL and CM (Cable Modem) support 8 B max transfer size and have a custom
    DT binding for that reason. This driver was checking for a wrong
    "compatible" however which resulted in an incorrect setup.
    
    Fixes: e2e5a2c61837 ("i2c: brcmstb: Adding support for CM and DSL SoCs")
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fee985f9afa2fd5ee2c024d1a35b86e56bd1b63
Author: Waiman Long <longman@redhat.com>
Date:   Tue Feb 8 11:39:12 2022 -0500

    copy_process(): Move fd_install() out of sighand->siglock critical section
    
    commit ddc204b517e60ae64db34f9832dc41dafa77c751 upstream.
    
    I was made aware of the following lockdep splat:
    
    [ 2516.308763] =====================================================
    [ 2516.309085] WARNING: HARDIRQ-safe -> HARDIRQ-unsafe lock order detected
    [ 2516.309433] 5.14.0-51.el9.aarch64+debug #1 Not tainted
    [ 2516.309703] -----------------------------------------------------
    [ 2516.310149] stress-ng/153663 [HC0[0]:SC0[0]:HE0:SE1] is trying to acquire:
    [ 2516.310512] ffff0000e422b198 (&newf->file_lock){+.+.}-{2:2}, at: fd_install+0x368/0x4f0
    [ 2516.310944]
                   and this task is already holding:
    [ 2516.311248] ffff0000c08140d8 (&sighand->siglock){-.-.}-{2:2}, at: copy_process+0x1e2c/0x3e80
    [ 2516.311804] which would create a new lock dependency:
    [ 2516.312066]  (&sighand->siglock){-.-.}-{2:2} -> (&newf->file_lock){+.+.}-{2:2}
    [ 2516.312446]
                   but this new dependency connects a HARDIRQ-irq-safe lock:
    [ 2516.312983]  (&sighand->siglock){-.-.}-{2:2}
       :
    [ 2516.330700]  Possible interrupt unsafe locking scenario:
    
    [ 2516.331075]        CPU0                    CPU1
    [ 2516.331328]        ----                    ----
    [ 2516.331580]   lock(&newf->file_lock);
    [ 2516.331790]                                local_irq_disable();
    [ 2516.332231]                                lock(&sighand->siglock);
    [ 2516.332579]                                lock(&newf->file_lock);
    [ 2516.332922]   <Interrupt>
    [ 2516.333069]     lock(&sighand->siglock);
    [ 2516.333291]
                    *** DEADLOCK ***
    [ 2516.389845]
                   stack backtrace:
    [ 2516.390101] CPU: 3 PID: 153663 Comm: stress-ng Kdump: loaded Not tainted 5.14.0-51.el9.aarch64+debug #1
    [ 2516.390756] Hardware name: QEMU KVM Virtual Machine, BIOS 0.0.0 02/06/2015
    [ 2516.391155] Call trace:
    [ 2516.391302]  dump_backtrace+0x0/0x3e0
    [ 2516.391518]  show_stack+0x24/0x30
    [ 2516.391717]  dump_stack_lvl+0x9c/0xd8
    [ 2516.391938]  dump_stack+0x1c/0x38
    [ 2516.392247]  print_bad_irq_dependency+0x620/0x710
    [ 2516.392525]  check_irq_usage+0x4fc/0x86c
    [ 2516.392756]  check_prev_add+0x180/0x1d90
    [ 2516.392988]  validate_chain+0x8e0/0xee0
    [ 2516.393215]  __lock_acquire+0x97c/0x1e40
    [ 2516.393449]  lock_acquire.part.0+0x240/0x570
    [ 2516.393814]  lock_acquire+0x90/0xb4
    [ 2516.394021]  _raw_spin_lock+0xe8/0x154
    [ 2516.394244]  fd_install+0x368/0x4f0
    [ 2516.394451]  copy_process+0x1f5c/0x3e80
    [ 2516.394678]  kernel_clone+0x134/0x660
    [ 2516.394895]  __do_sys_clone3+0x130/0x1f4
    [ 2516.395128]  __arm64_sys_clone3+0x5c/0x7c
    [ 2516.395478]  invoke_syscall.constprop.0+0x78/0x1f0
    [ 2516.395762]  el0_svc_common.constprop.0+0x22c/0x2c4
    [ 2516.396050]  do_el0_svc+0xb0/0x10c
    [ 2516.396252]  el0_svc+0x24/0x34
    [ 2516.396436]  el0t_64_sync_handler+0xa4/0x12c
    [ 2516.396688]  el0t_64_sync+0x198/0x19c
    [ 2517.491197] NET: Registered PF_ATMPVC protocol family
    [ 2517.491524] NET: Registered PF_ATMSVC protocol family
    [ 2591.991877] sched: RT throttling activated
    
    One way to solve this problem is to move the fd_install() call out of
    the sighand->siglock critical section.
    
    Before commit 6fd2fe494b17 ("copy_process(): don't use ksys_close()
    on cleanups"), the pidfd installation was done without holding both
    the task_list lock and the sighand->siglock. Obviously, holding these
    two locks are not really needed to protect the fd_install() call.
    So move the fd_install() call down to after the releases of both locks.
    
    Link: https://lore.kernel.org/r/20220208163912.1084752-1-longman@redhat.com
    Fixes: 6fd2fe494b17 ("copy_process(): don't use ksys_close() on cleanups")
    Reviewed-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3fdbc40b7501f3822327d83e039e71d107117ff
Author: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
Date:   Thu Feb 3 18:47:03 2022 +0200

    i2c: qcom-cci: don't put a device tree node before i2c_add_adapter()
    
    commit 02a4a69667a2ad32f3b52ca906f19628fbdd8a01 upstream.
    
    There is a minor chance for a race, if a pointer to an i2c-bus subnode
    is stored and then reused after releasing its reference, and it would
    be sufficient to get one more reference under a loop over children
    subnodes.
    
    Fixes: e517526195de ("i2c: Add Qualcomm CCI I2C driver")
    Signed-off-by: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5b2a92117137159f0cf71f57987962c35d68f82
Author: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
Date:   Thu Feb 3 18:47:00 2022 +0200

    i2c: qcom-cci: don't delete an unregistered adapter
    
    commit a0d48505a1d68e27220369e2dd1e3573a2f362d2 upstream.
    
    If i2c_add_adapter() fails to add an I2C adapter found on QCOM CCI
    controller, on error path i2c_del_adapter() is still called.
    
    Fortunately there is a sanity check in the I2C core, so the only
    visible implication is a printed debug level message:
    
        i2c-core: attempting to delete unregistered adapter [Qualcomm-CCI]
    
    Nevertheless it would be reasonable to correct the probe error path.
    
    Fixes: e517526195de ("i2c: Add Qualcomm CCI I2C driver")
    Signed-off-by: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b6d25d1b6a298b1f7dbbfef98dd2086ec60960f
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue Jan 11 09:12:39 2022 +0800

    dmaengine: sh: rcar-dmac: Check for error num after dma_set_max_seg_size
    
    commit da2ad87fba0891576aadda9161b8505fde81a84d upstream.
    
    As the possible failure of the dma_set_max_seg_size(), it should be
    better to check the return value of the dma_set_max_seg_size().
    
    Fixes: 97d49c59e219 ("dmaengine: rcar-dmac: set scatter/gather max segment size")
    Reported-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20220111011239.452837-1-jiasheng@iscas.ac.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c35c95d3640979d0f0118b640ddd4b326cf4d81
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sat Jan 8 08:53:36 2022 +0000

    dmaengine: stm32-dmamux: Fix PM disable depth imbalance in stm32_dmamux_probe
    
    commit e831c7aba950f3ae94002b10321279654525e5ec upstream.
    
    The pm_runtime_enable will increase power disable depth.
    If the probe fails, we should use pm_runtime_disable() to balance
    pm_runtime_enable().
    
    Fixes: 4f3ceca254e0 ("dmaengine: stm32-dmamux: Add PM Runtime support")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
    Link: https://lore.kernel.org/r/20220108085336.11992-1-linmq006@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f907b6eb701a5f7c56bc401197eb3b51db0cd8d
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Thu Jan 6 11:09:39 2022 +0800

    dmaengine: sh: rcar-dmac: Check for error num after setting mask
    
    commit 2d21543efe332cd8c8f212fb7d365bc8b0690bfa upstream.
    
    Because of the possible failure of the dma_supported(), the
    dma_set_mask_and_coherent() may return error num.
    Therefore, it should be better to check it and return the error if
    fails.
    
    Fixes: dc312349e875 ("dmaengine: rcar-dmac: Widen DMA mask to 40 bits")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20220106030939.2644320-1-jiasheng@iscas.ac.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 797b380f0756354b39f7487c362ea203cf3e3e80
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Feb 15 15:53:05 2022 -0800

    net: sched: limit TC_ACT_REPEAT loops
    
    commit 5740d068909676d4bdb5c9c00c37a83df7728909 upstream.
    
    We have been living dangerously, at the mercy of malicious users,
    abusing TC_ACT_REPEAT, as shown by this syzpot report [1].
    
    Add an arbitrary limit (32) to the number of times an action can
    return TC_ACT_REPEAT.
    
    v2: switch the limit to 32 instead of 10.
        Use net_warn_ratelimited() instead of pr_err_once().
    
    [1] (C repro available on demand)
    
    rcu: INFO: rcu_preempt self-detected stall on CPU
    rcu:    1-...!: (10500 ticks this GP) idle=021/1/0x4000000000000000 softirq=5592/5592 fqs=0
            (t=10502 jiffies g=5305 q=190)
    rcu: rcu_preempt kthread timer wakeup didn't happen for 10502 jiffies! g5305 f0x0 RCU_GP_WAIT_FQS(5) ->state=0x402
    rcu:    Possible timer handling issue on cpu=0 timer-softirq=3527
    rcu: rcu_preempt kthread starved for 10505 jiffies! g5305 f0x0 RCU_GP_WAIT_FQS(5) ->state=0x402 ->cpu=0
    rcu:    Unless rcu_preempt kthread gets sufficient CPU time, OOM is now expected behavior.
    rcu: RCU grace-period kthread stack dump:
    task:rcu_preempt     state:I stack:29344 pid:   14 ppid:     2 flags:0x00004000
    Call Trace:
     <TASK>
     context_switch kernel/sched/core.c:4986 [inline]
     __schedule+0xab2/0x4db0 kernel/sched/core.c:6295
     schedule+0xd2/0x260 kernel/sched/core.c:6368
     schedule_timeout+0x14a/0x2a0 kernel/time/timer.c:1881
     rcu_gp_fqs_loop+0x186/0x810 kernel/rcu/tree.c:1963
     rcu_gp_kthread+0x1de/0x320 kernel/rcu/tree.c:2136
     kthread+0x2e9/0x3a0 kernel/kthread.c:377
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295
     </TASK>
    rcu: Stack dump where RCU GP kthread last ran:
    Sending NMI from CPU 1 to CPUs 0:
    NMI backtrace for cpu 0
    CPU: 0 PID: 3646 Comm: syz-executor358 Not tainted 5.17.0-rc3-syzkaller-00149-gbf8e59fd315f #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:rep_nop arch/x86/include/asm/vdso/processor.h:13 [inline]
    RIP: 0010:cpu_relax arch/x86/include/asm/vdso/processor.h:18 [inline]
    RIP: 0010:pv_wait_head_or_lock kernel/locking/qspinlock_paravirt.h:437 [inline]
    RIP: 0010:__pv_queued_spin_lock_slowpath+0x3b8/0xb40 kernel/locking/qspinlock.c:508
    Code: 48 89 eb c6 45 01 01 41 bc 00 80 00 00 48 c1 e9 03 83 e3 07 41 be 01 00 00 00 48 b8 00 00 00 00 00 fc ff df 4c 8d 2c 01 eb 0c <f3> 90 41 83 ec 01 0f 84 72 04 00 00 41 0f b6 45 00 38 d8 7f 08 84
    RSP: 0018:ffffc9000283f1b0 EFLAGS: 00000206
    RAX: 0000000000000003 RBX: 0000000000000000 RCX: 1ffff1100fc0071e
    RDX: 0000000000000001 RSI: 0000000000000201 RDI: 0000000000000000
    RBP: ffff88807e0038f0 R08: 0000000000000001 R09: ffffffff8ffbf9ff
    R10: 0000000000000001 R11: 0000000000000001 R12: 0000000000004c1e
    R13: ffffed100fc0071e R14: 0000000000000001 R15: ffff8880b9c3aa80
    FS:  00005555562bf300(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007ffdbfef12b8 CR3: 00000000723c2000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     pv_queued_spin_lock_slowpath arch/x86/include/asm/paravirt.h:591 [inline]
     queued_spin_lock_slowpath arch/x86/include/asm/qspinlock.h:51 [inline]
     queued_spin_lock include/asm-generic/qspinlock.h:85 [inline]
     do_raw_spin_lock+0x200/0x2b0 kernel/locking/spinlock_debug.c:115
     spin_lock_bh include/linux/spinlock.h:354 [inline]
     sch_tree_lock include/net/sch_generic.h:610 [inline]
     sch_tree_lock include/net/sch_generic.h:605 [inline]
     prio_tune+0x3b9/0xb50 net/sched/sch_prio.c:211
     prio_init+0x5c/0x80 net/sched/sch_prio.c:244
     qdisc_create.constprop.0+0x44a/0x10f0 net/sched/sch_api.c:1253
     tc_modify_qdisc+0x4c5/0x1980 net/sched/sch_api.c:1660
     rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5594
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2494
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x539/0x7e0 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x904/0xe00 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:705 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:725
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2413
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2467
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2496
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f7ee98aae99
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 41 15 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007ffdbfef12d8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007ffdbfef1300 RCX: 00007f7ee98aae99
    RDX: 0000000000000000 RSI: 0000000020000000 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 000000000000000d R09: 000000000000000d
    R10: 000000000000000d R11: 0000000000000246 R12: 00007ffdbfef12f0
    R13: 00000000000f4240 R14: 000000000004ca47 R15: 00007ffdbfef12e4
     </TASK>
    INFO: NMI handler (nmi_cpu_backtrace_handler) took too long to run: 2.293 msecs
    NMI backtrace for cpu 1
    CPU: 1 PID: 3260 Comm: kworker/1:3 Not tainted 5.17.0-rc3-syzkaller-00149-gbf8e59fd315f #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: mld mld_ifc_work
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     nmi_cpu_backtrace.cold+0x47/0x144 lib/nmi_backtrace.c:111
     nmi_trigger_cpumask_backtrace+0x1b3/0x230 lib/nmi_backtrace.c:62
     trigger_single_cpu_backtrace include/linux/nmi.h:164 [inline]
     rcu_dump_cpu_stacks+0x25e/0x3f0 kernel/rcu/tree_stall.h:343
     print_cpu_stall kernel/rcu/tree_stall.h:604 [inline]
     check_cpu_stall kernel/rcu/tree_stall.h:688 [inline]
     rcu_pending kernel/rcu/tree.c:3919 [inline]
     rcu_sched_clock_irq.cold+0x5c/0x759 kernel/rcu/tree.c:2617
     update_process_times+0x16d/0x200 kernel/time/timer.c:1785
     tick_sched_handle+0x9b/0x180 kernel/time/tick-sched.c:226
     tick_sched_timer+0x1b0/0x2d0 kernel/time/tick-sched.c:1428
     __run_hrtimer kernel/time/hrtimer.c:1685 [inline]
     __hrtimer_run_queues+0x1c0/0xe50 kernel/time/hrtimer.c:1749
     hrtimer_interrupt+0x31c/0x790 kernel/time/hrtimer.c:1811
     local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1086 [inline]
     __sysvec_apic_timer_interrupt+0x146/0x530 arch/x86/kernel/apic/apic.c:1103
     sysvec_apic_timer_interrupt+0x8e/0xc0 arch/x86/kernel/apic/apic.c:1097
     </IRQ>
     <TASK>
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:638
    RIP: 0010:__sanitizer_cov_trace_const_cmp4+0xc/0x70 kernel/kcov.c:286
    Code: 00 00 00 48 89 7c 30 e8 48 89 4c 30 f0 4c 89 54 d8 20 48 89 10 5b c3 0f 1f 80 00 00 00 00 41 89 f8 bf 03 00 00 00 4c 8b 14 24 <89> f1 65 48 8b 34 25 00 70 02 00 e8 14 f9 ff ff 84 c0 74 4b 48 8b
    RSP: 0018:ffffc90002c5eea8 EFLAGS: 00000246
    RAX: 0000000000000007 RBX: ffff88801c625800 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000003
    RBP: ffff8880137d3100 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff874fcd88 R11: 0000000000000000 R12: ffff88801d692dc0
    R13: ffff8880137d3104 R14: 0000000000000000 R15: ffff88801d692de8
     tcf_police_act+0x358/0x11d0 net/sched/act_police.c:256
     tcf_action_exec net/sched/act_api.c:1049 [inline]
     tcf_action_exec+0x1a6/0x530 net/sched/act_api.c:1026
     tcf_exts_exec include/net/pkt_cls.h:326 [inline]
     route4_classify+0xef0/0x1400 net/sched/cls_route.c:179
     __tcf_classify net/sched/cls_api.c:1549 [inline]
     tcf_classify+0x3e8/0x9d0 net/sched/cls_api.c:1615
     prio_classify net/sched/sch_prio.c:42 [inline]
     prio_enqueue+0x3a7/0x790 net/sched/sch_prio.c:75
     dev_qdisc_enqueue+0x40/0x300 net/core/dev.c:3668
     __dev_xmit_skb net/core/dev.c:3756 [inline]
     __dev_queue_xmit+0x1f61/0x3660 net/core/dev.c:4081
     neigh_hh_output include/net/neighbour.h:533 [inline]
     neigh_output include/net/neighbour.h:547 [inline]
     ip_finish_output2+0x14dc/0x2170 net/ipv4/ip_output.c:228
     __ip_finish_output net/ipv4/ip_output.c:306 [inline]
     __ip_finish_output+0x396/0x650 net/ipv4/ip_output.c:288
     ip_finish_output+0x32/0x200 net/ipv4/ip_output.c:316
     NF_HOOK_COND include/linux/netfilter.h:296 [inline]
     ip_output+0x196/0x310 net/ipv4/ip_output.c:430
     dst_output include/net/dst.h:451 [inline]
     ip_local_out+0xaf/0x1a0 net/ipv4/ip_output.c:126
     iptunnel_xmit+0x628/0xa50 net/ipv4/ip_tunnel_core.c:82
     geneve_xmit_skb drivers/net/geneve.c:966 [inline]
     geneve_xmit+0x10c8/0x3530 drivers/net/geneve.c:1077
     __netdev_start_xmit include/linux/netdevice.h:4683 [inline]
     netdev_start_xmit include/linux/netdevice.h:4697 [inline]
     xmit_one net/core/dev.c:3473 [inline]
     dev_hard_start_xmit+0x1eb/0x920 net/core/dev.c:3489
     __dev_queue_xmit+0x2985/0x3660 net/core/dev.c:4116
     neigh_hh_output include/net/neighbour.h:533 [inline]
     neigh_output include/net/neighbour.h:547 [inline]
     ip6_finish_output2+0xf7a/0x14f0 net/ipv6/ip6_output.c:126
     __ip6_finish_output net/ipv6/ip6_output.c:191 [inline]
     __ip6_finish_output+0x61e/0xe90 net/ipv6/ip6_output.c:170
     ip6_finish_output+0x32/0x200 net/ipv6/ip6_output.c:201
     NF_HOOK_COND include/linux/netfilter.h:296 [inline]
     ip6_output+0x1e4/0x530 net/ipv6/ip6_output.c:224
     dst_output include/net/dst.h:451 [inline]
     NF_HOOK include/linux/netfilter.h:307 [inline]
     NF_HOOK include/linux/netfilter.h:301 [inline]
     mld_sendpack+0x9a3/0xe40 net/ipv6/mcast.c:1826
     mld_send_cr net/ipv6/mcast.c:2127 [inline]
     mld_ifc_work+0x71c/0xdc0 net/ipv6/mcast.c:2659
     process_one_work+0x9ac/0x1650 kernel/workqueue.c:2307
     worker_thread+0x657/0x1110 kernel/workqueue.c:2454
     kthread+0x2e9/0x3a0 kernel/kthread.c:377
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:295
     </TASK>
    ----------------
    Code disassembly (best guess):
       0:   48 89 eb                mov    %rbp,%rbx
       3:   c6 45 01 01             movb   $0x1,0x1(%rbp)
       7:   41 bc 00 80 00 00       mov    $0x8000,%r12d
       d:   48 c1 e9 03             shr    $0x3,%rcx
      11:   83 e3 07                and    $0x7,%ebx
      14:   41 be 01 00 00 00       mov    $0x1,%r14d
      1a:   48 b8 00 00 00 00 00    movabs $0xdffffc0000000000,%rax
      21:   fc ff df
      24:   4c 8d 2c 01             lea    (%rcx,%rax,1),%r13
      28:   eb 0c                   jmp    0x36
    * 2a:   f3 90                   pause <-- trapping instruction
      2c:   41 83 ec 01             sub    $0x1,%r12d
      30:   0f 84 72 04 00 00       je     0x4a8
      36:   41 0f b6 45 00          movzbl 0x0(%r13),%eax
      3b:   38 d8                   cmp    %bl,%al
      3d:   7f 08                   jg     0x47
      3f:   84                      .byte 0x84
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20220215235305.3272331-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 595c259f75aeb0114014dc1cd6c54f9c9feee25c
Author: Eliav Farber <farbere@amazon.com>
Date:   Thu Jan 13 10:06:19 2022 +0000

    EDAC: Fix calculation of returned address and next offset in edac_align_ptr()
    
    commit f8efca92ae509c25e0a4bd5d0a86decea4f0c41e upstream.
    
    Do alignment logic properly and use the "ptr" local variable for
    calculating the remainder of the alignment.
    
    This became an issue because struct edac_mc_layer has a size that is not
    zero modulo eight, and the next offset that was prepared for the private
    data was unaligned, causing an alignment exception.
    
    The patch in Fixes: which broke this actually wanted to "what we
    actually care about is the alignment of the actual pointer that's about
    to be returned." But it didn't check that alignment.
    
    Use the correct variable "ptr" for that.
    
      [ bp: Massage commit message. ]
    
    Fixes: 8447c4d15e35 ("edac: Do alignment logic properly in edac_align_ptr()")
    Signed-off-by: Eliav Farber <farbere@amazon.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220113100622.12783-2-farbere@amazon.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6ce4e328939337abdb7659fcb505d084ecc7b8f
Author: James Smart <jsmart2021@gmail.com>
Date:   Sat Feb 12 08:31:20 2022 -0800

    scsi: lpfc: Fix pt2pt NVMe PRLI reject LOGO loop
    
    commit 7f4c5a26f735dea4bbc0eb8eb9da99cda95a8563 upstream.
    
    When connected point to point, the driver does not know the FC4's supported
    by the other end. In Fabrics, it can query the nameserver.  Thus the driver
    must send PRLIs for the FC4s it supports and enable support based on the
    acc(ept) or rej(ect) of the respective FC4 PRLI.  Currently the driver
    supports SCSI and NVMe PRLIs.
    
    Unfortunately, although the behavior is per standard, many devices have
    come to expect only SCSI PRLIs. In this particular example, the NVMe PRLI
    is properly RJT'd but the target decided that it must LOGO after seeing the
    unexpected NVMe PRLI. The LOGO causes the sequence to restart and login is
    now in an infinite failure loop.
    
    Fix the problem by having the driver, on a pt2pt link, remember NVMe PRLI
    accept or reject status across logout as long as the link stays "up".  When
    retrying login, if the prior NVMe PRLI was rejected, it will not be sent on
    the next login.
    
    Link: https://lore.kernel.org/r/20220212163120.15385-1-jsmart2021@gmail.com
    Cc: <stable@vger.kernel.org> # v5.4+
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3680b2b8104b9c0cdbe168d0de4912ad5bff6abd
Author: Jing Leng <jleng@ambarella.com>
Date:   Fri Feb 11 17:27:36 2022 +0800

    kconfig: fix failing to generate auto.conf
    
    [ Upstream commit 1b9e740a81f91ae338b29ed70455719804957b80 ]
    
    When the KCONFIG_AUTOCONFIG is specified (e.g. export \
    KCONFIG_AUTOCONFIG=output/config/auto.conf), the directory of
    include/config/ will not be created, so kconfig can't create deps
    files in it and auto.conf can't be generated.
    
    Signed-off-by: Jing Leng <jleng@ambarella.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6787e284d3dfaa830f8241679abef3fb7e609e5
Author: Marc St-Amand <mstamand@ciena.com>
Date:   Wed Feb 9 15:13:25 2022 +0530

    net: macb: Align the dma and coherent dma masks
    
    [ Upstream commit 37f7860602b5b2d99fc7465f6407f403f5941988 ]
    
    Single page and coherent memory blocks can use different DMA masks
    when the macb accesses physical memory directly. The kernel is clever
    enough to allocate pages that fit into the requested address width.
    
    When using the ARM SMMU, the DMA mask must be the same for single
    pages and big coherent memory blocks. Otherwise the translation
    tables turn into one big mess.
    
      [   74.959909] macb ff0e0000.ethernet eth0: DMA bus error: HRESP not OK
      [   74.959989] arm-smmu fd800000.smmu: Unhandled context fault: fsr=0x402, iova=0x3165687460, fsynr=0x20001, cbfrsynra=0x877, cb=1
      [   75.173939] macb ff0e0000.ethernet eth0: DMA bus error: HRESP not OK
      [   75.173955] arm-smmu fd800000.smmu: Unhandled context fault: fsr=0x402, iova=0x3165687460, fsynr=0x20001, cbfrsynra=0x877, cb=1
    
    Since using the same DMA mask does not hurt direct 1:1 physical
    memory mappings, this commit always aligns DMA and coherent masks.
    
    Signed-off-by: Marc St-Amand <mstamand@ciena.com>
    Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Tested-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 439171a2917c734a3b8e144aa3163ca8afcfcb74
Author: Slark Xiao <slark_xiao@163.com>
Date:   Wed Feb 9 10:47:17 2022 +0800

    net: usb: qmi_wwan: Add support for Dell DW5829e
    
    [ Upstream commit 8ecbb179286cbc91810c16caeb3396e06305cd0c ]
    
    Dell DW5829e same as DW5821e except the CAT level.
    DW5821e supports CAT16 but DW5829e supports CAT9.
    Also, DW5829e includes normal and eSIM type.
    Please see below test evidence:
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  5 Spd=5000 MxCh= 0
    D:  Ver= 3.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=81e6 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5829e Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    T:  Bus=04 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  7 Spd=5000 MxCh= 0
    D:  Ver= 3.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  1
    P:  Vendor=413c ProdID=81e4 Rev=03.18
    S:  Manufacturer=Dell Inc.
    S:  Product=DW5829e-eSIM Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    Signed-off-by: Slark Xiao <slark_xiao@163.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20220209024717.8564-1-slark_xiao@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15616ba17d02b5139408cc86a92a9b8ed323dbb1
Author: JaeSang Yoo <js.yoo.5b@gmail.com>
Date:   Wed Feb 9 04:54:22 2022 +0900

    tracing: Fix tp_printk option related with tp_printk_stop_on_boot
    
    [ Upstream commit 3203ce39ac0b2a57a84382ec184c7d4a0bede175 ]
    
    The kernel parameter "tp_printk_stop_on_boot" starts with "tp_printk" which is
    the same as another kernel parameter "tp_printk". If "tp_printk" setup is
    called before the "tp_printk_stop_on_boot", it will override the latter
    and keep it from being set.
    
    This is similar to other kernel parameter issues, such as:
      Commit 745a600cf1a6 ("um: console: Ignore console= option")
    or init/do_mounts.c:45 (setup function of "ro" kernel param)
    
    Fix it by checking for a "_" right after the "tp_printk" and if that
    exists do not process the parameter.
    
    Link: https://lkml.kernel.org/r/20220208195421.969326-1-jsyoo5b@gmail.com
    
    Signed-off-by: JaeSang Yoo <jsyoo5b@gmail.com>
    [ Fixed up change log and added space after if condition ]
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a253a23d9f13d9aa505cdd48b8ab8328d752c5d
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Jan 26 15:55:24 2022 +0100

    drm/rockchip: dw_hdmi: Do not leave clock enabled in error case
    
    [ Upstream commit c0cfbb122275da1b726481de5a8cffeb24e6322b ]
    
    The driver returns an error when devm_phy_optional_get() fails leaving
    the previously enabled clock turned on. Change order and enable the
    clock only after the phy has been acquired.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220126145549.617165-3-s.hauer@pengutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e7433fb95ccc01629a5edaa4ced0cd8c98d0ae0
Author: Dan Aloni <dan.aloni@vastdata.com>
Date:   Tue Jan 25 22:06:46 2022 +0200

    xprtrdma: fix pointer derefs in error cases of rpcrdma_ep_create
    
    [ Upstream commit a9c10b5b3b67b3750a10c8b089b2e05f5e176e33 ]
    
    If there are failures then we must not leave the non-NULL pointers with
    the error value, otherwise `rpcrdma_ep_destroy` gets confused and tries
    free them, resulting in an Oops.
    
    Signed-off-by: Dan Aloni <dan.aloni@vastdata.com>
    Acked-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a21f472fb5cc9b08a2a31e19a5b89338c0bd921d
Author: Jae Hyun Yoo <jae.hyun.yoo@linux.intel.com>
Date:   Tue Feb 1 17:31:18 2022 +1030

    soc: aspeed: lpc-ctrl: Block error printing on probe defer cases
    
    [ Upstream commit 301a5d3ad2432d7829f59432ca0a93a6defbb9a1 ]
    
    Add a checking code when it gets -EPROBE_DEFER while getting a clock
    resource. In this case, it doesn't need to print out an error message
    because the probing will be re-visited.
    
    Signed-off-by: Jae Hyun Yoo <jae.hyun.yoo@linux.intel.com>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Reviewed-by: Iwona Winiarska <iwona.winiarska@intel.com>
    Link: https://lore.kernel.org/r/20211104173709.222912-1-jae.hyun.yoo@intel.com
    Link: https://lore.kernel.org/r/20220201070118.196372-1-joel@jms.id.au'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fecb05b1ce6b7b39884999de5cd15b47eb9b5426
Author: Zoltán Böszörményi <zboszor@gmail.com>
Date:   Fri Feb 4 13:57:50 2022 +0100

    ata: libata-core: Disable TRIM on M88V29
    
    [ Upstream commit c8ea23d5fa59f28302d4e3370c75d9c308e64410 ]
    
    This device is a CF card, or possibly an SSD in CF form factor.
    It supports NCQ and high speed DMA.
    
    While it also advertises TRIM support, I/O errors are reported
    when the discard mount option fstrim is used. TRIM also fails
    when disabling NCQ and not just as an NCQ command.
    
    TRIM must be disabled for this device.
    
    Signed-off-by: Zoltán Böszörményi <zboszor@gmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b19ec7afa9297d862ed86443e0164643b97250ab
Author: Max Kellermann <max.kellermann@ionos.com>
Date:   Mon Feb 21 11:03:13 2022 +0100

    lib/iov_iter: initialize "flags" in new pipe_buffer
    
    commit 9d2231c5d74e13b2a0546fee6737ee4446017903 upstream.
    
    The functions copy_page_to_iter_pipe() and push_pipe() can both
    allocate a new pipe_buffer, but the "flags" member initializer is
    missing.
    
    Fixes: 241699cd72a8 ("new iov_iter flavour: pipe-backed")
    To: Alexander Viro <viro@zeniv.linux.org.uk>
    To: linux-fsdevel@vger.kernel.org
    To: linux-kernel@vger.kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Max Kellermann <max.kellermann@ionos.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30455322787aee4bb95dcaabdcfcfaab69a1a8f0
Author: Brenda Streiff <brenda.streiff@ni.com>
Date:   Fri Jan 28 16:01:28 2022 -0600

    kconfig: let 'shell' return enough output for deep path names
    
    [ Upstream commit 8a4c5b2a6d8ea079fa36034e8167de87ab6f8880 ]
    
    The 'shell' built-in only returns the first 256 bytes of the command's
    output. In some cases, 'shell' is used to return a path; by bumping up
    the buffer size to 4096 this lets us capture up to PATH_MAX.
    
    The specific case where I ran into this was due to commit 1e860048c53e
    ("gcc-plugins: simplify GCC plugin-dev capability test"). After this
    change, we now use `$(shell,$(CC) -print-file-name=plugin)` to return
    a path; if the gcc path is particularly long, then the path ends up
    truncated at the 256 byte mark, which makes the HAVE_GCC_PLUGINS
    depends test always fail.
    
    Signed-off-by: Brenda Streiff <brenda.streiff@ni.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e05dde47f52a4a8b027be0fa199d1419b2b4fc3c
Author: Axel Rasmussen <axelrasmussen@google.com>
Date:   Thu Jan 27 14:11:15 2022 -0800

    selftests: fixup build warnings in pidfd / clone3 tests
    
    [ Upstream commit e2aa5e650b07693477dff554053605976789fd68 ]
    
    These are some trivial fixups, which were needed to build the tests with
    clang and -Werror. The following issues are fixed:
    
    - Remove various unused variables.
    - In child_poll_leader_exit_test, clang isn't smart enough to realize
      syscall(SYS_exit, 0) won't return, so it complains we never return
      from a non-void function. Add an extra exit(0) to appease it.
    - In test_pidfd_poll_leader_exit, ret may be branched on despite being
      uninitialized, if we have !use_waitpid. Initialize it to zero to get
      the right behavior in that case.
    
    Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
    Acked-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 531a56c2e0bfe7269b90eb68035e4d602847ca8b
Author: Axel Rasmussen <axelrasmussen@google.com>
Date:   Thu Jan 27 13:29:51 2022 -0800

    pidfd: fix test failure due to stack overflow on some arches
    
    [ Upstream commit 4cbd93c3c110447adc66cb67c08af21f939ae2d7 ]
    
    When running the pidfd_fdinfo_test on arm64, it fails for me. After some
    digging, the reason is that the child exits due to SIGBUS, because it
    overflows the 1024 byte stack we've reserved for it.
    
    To fix the issue, increase the stack size to 8192 bytes (this number is
    somewhat arbitrary, and was arrived at through experimentation -- I kept
    doubling until the failure no longer occurred).
    
    Also, let's make the issue easier to debug. wait_for_pid() returns an
    ambiguous value: it may return -1 in all of these cases:
    
    1. waitpid() itself returned -1
    2. waitpid() returned success, but we found !WIFEXITED(status).
    3. The child process exited, but it did so with a -1 exit code.
    
    There's no way for the caller to tell the difference. So, at least log
    which occurred, so the test runner can debug things.
    
    While debugging this, I found that we had !WIFEXITED(), because the
    child exited due to a signal. This seems like a reasonably common case,
    so also print out whether or not we have WIFSIGNALED(), and the
    associated WTERMSIG() (if any). This lets us see the SIGBUS I'm fixing
    clearly when it occurs.
    
    Finally, I'm suspicious of allocating the child's stack on our stack.
    man clone(2) suggests that the correct way to do this is with mmap(),
    and in particular by setting MAP_STACK. So, switch to doing it that way
    instead.
    
    Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
    Acked-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 429ef36c4fc497a9a958768c3ffb75c139abfa1e
Author: Christian Hewitt <christianshewitt@gmail.com>
Date:   Wed Jan 26 04:49:54 2022 +0000

    arm64: dts: meson-g12: drop BL32 region from SEI510/SEI610
    
    [ Upstream commit f26573e2bc9dfd551a0d5c6971f18cc546543312 ]
    
    The BL32/TEE reserved-memory region is now inherited from the common
    family dtsi (meson-g12-common) so we can drop it from board files.
    
    Signed-off-by: Christian Hewitt <christianshewitt@gmail.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220126044954.19069-4-christianshewitt@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1415f22ee541a708ded842075015f4407a8743cf
Author: Christian Hewitt <christianshewitt@gmail.com>
Date:   Wed Jan 26 04:49:53 2022 +0000

    arm64: dts: meson-g12: add ATF BL32 reserved-memory region
    
    [ Upstream commit 08982a1b3aa2611c9c711d24825c9002d28536f4 ]
    
    Add an additional reserved memory region for the BL32 trusted firmware
    present in many devices that boot from Amlogic vendor u-boot.
    
    Signed-off-by: Christian Hewitt <christianshewitt@gmail.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220126044954.19069-3-christianshewitt@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 605080f19eb7edde039cec7bee1646b2eefeaea2
Author: Christian Hewitt <christianshewitt@gmail.com>
Date:   Wed Jan 26 04:49:52 2022 +0000

    arm64: dts: meson-gx: add ATF BL32 reserved-memory region
    
    [ Upstream commit 76577c9137456febb05b0e17d244113196a98968 ]
    
    Add an additional reserved memory region for the BL32 trusted firmware
    present in many devices that boot from Amlogic vendor u-boot.
    
    Suggested-by: Mateusz Krzak <kszaquitto@gmail.com>
    Signed-off-by: Christian Hewitt <christianshewitt@gmail.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220126044954.19069-2-christianshewitt@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eefb68794f9434c9a0545a9bb686967a4fca2467
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Jan 28 13:13:32 2022 +0100

    netfilter: conntrack: don't refresh sctp entries in closed state
    
    [ Upstream commit 77b337196a9d87f3d6bb9b07c0436ecafbffda1e ]
    
    Vivek Thrivikraman reported:
     An SCTP server application which is accessed continuously by client
     application.
     When the session disconnects the client retries to establish a connection.
     After restart of SCTP server application the session is not established
     because of stale conntrack entry with connection state CLOSED as below.
    
     (removing this entry manually established new connection):
    
     sctp 9 CLOSED src=10.141.189.233 [..]  [ASSURED]
    
    Just skip timeout update of closed entries, we don't want them to
    stay around forever.
    
    Reported-and-tested-by: Vivek Thrivikraman <vivek.thrivikraman@est.tech>
    Closes: https://bugzilla.netfilter.org/show_bug.cgi?id=1579
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ab48248573b486d8ee4d9cb07545844548b9ba4
Author: Guo Ren <guoren@kernel.org>
Date:   Sun Jan 30 21:56:34 2022 +0800

    irqchip/sifive-plic: Add missing thead,c900-plic match string
    
    [ Upstream commit 1d4df649cbb4b26d19bea38ecff4b65b10a1bbca ]
    
    The thead,c900-plic has been used in opensbi to distinguish
    PLIC [1]. Although PLICs have the same behaviors in Linux,
    they are different hardware with some custom initializing in
    firmware(opensbi).
    
    Qute opensbi patch commit-msg by Samuel:
    
      The T-HEAD PLIC implementation requires setting a delegation bit
      to allow access from S-mode. Now that the T-HEAD PLIC has its own
      compatible string, set this bit automatically from the PLIC driver,
      instead of reaching into the PLIC's MMIO space from another driver.
    
    [1]: https://github.com/riscv-software-src/opensbi/commit/78c2b19218bd62653b9fb31623a42ced45f38ea6
    
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Cc: Anup Patel <anup@brainfault.org>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Samuel Holland <samuel@sholland.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20220130135634.1213301-3-guoren@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98bc06c46d1fc9ff86c39e59cd559c2cc8c3228b
Author: Al Cooper <alcooperx@gmail.com>
Date:   Wed Dec 1 13:06:51 2021 -0500

    phy: usb: Leave some clocks running during suspend
    
    [ Upstream commit 42fed57046fc74586d7058bd51a1c10ac9c690cb ]
    
    The PHY client driver does a phy_exit() call on suspend or rmmod and
    the PHY driver needs to know the difference because some clocks need
    to be kept running for suspend but can be shutdown on unbind/rmmod
    (or if there are no PHY clients at all).
    
    The fix is to use a PM notifier so the driver can tell if a PHY
    client is calling exit() because of a system suspend or a driver
    unbind/rmmod.
    
    Signed-off-by: Al Cooper <alcooperx@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20211201180653.35097-2-alcooperx@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 717f2fa858228b2bd2ffb7aad3c68b55828d4092
Author: Ye Guojin <ye.guojin@zte.com.cn>
Date:   Tue Nov 16 06:27:26 2021 +0000

    ARM: OMAP2+: adjust the location of put_device() call in omapdss_init_of
    
    [ Upstream commit 34596ba380b03d181e24efd50e2f21045bde3696 ]
    
    This was found by coccicheck:
    ./arch/arm/mach-omap2/display.c, 272, 1-7, ERROR missing put_device;
    call of_find_device_by_node on line 258, but without a corresponding
    object release within this function.
    
    Move the put_device() call before the if judgment.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Ye Guojin <ye.guojin@zte.com.cn>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6932353af74cc1b0c081d7a75b0fb3f4da7f5329
Author: Wan Jiabing <wanjiabing@vivo.com>
Date:   Thu Oct 14 04:57:19 2021 -0400

    ARM: OMAP2+: hwmod: Add of_node_put() before break
    
    [ Upstream commit 80c469a0a03763f814715f3d12b6f3964c7423e8 ]
    
    Fix following coccicheck warning:
    ./arch/arm/mach-omap2/omap_hwmod.c:753:1-23: WARNING: Function
    for_each_matching_node should have of_node_put() before break
    
    Early exits from for_each_matching_node should decrement the
    node reference counter.
    
    Signed-off-by: Wan Jiabing <wanjiabing@vivo.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 521dcc107e3923553c9c09021d2202460cdf3667
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Feb 8 16:45:49 2021 -0500

    NFS: Don't set NFS_INO_INVALID_XATTR if there is no xattr cache
    
    [ Upstream commit 848fdd62399c638e65a1512616acaa5de7d5c5e8 ]
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb00319afb72be8f7b2661b91293f005af00d775
Author: Jim Mattson <jmattson@google.com>
Date:   Wed Feb 2 17:48:13 2022 -0800

    KVM: x86/pmu: Use AMD64_RAW_EVENT_MASK for PERF_TYPE_RAW
    
    [ Upstream commit 710c476514313c74045c41c0571bb5178fd16e3d ]
    
    AMD's event select is 3 nybbles, with the high nybble in bits 35:32 of
    a PerfEvtSeln MSR. Don't mask off the high nybble when configuring a
    RAW perf event.
    
    Fixes: ca724305a2b0 ("KVM: x86/vPMU: Implement AMD vPMU code for KVM")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220203014813.2130559-2-jmattson@google.com>
    Reviewed-by: David Dunn <daviddunn@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ee4bb8ce8b8279a2fa811efccc9422d0b6d9bff
Author: Jim Mattson <jmattson@google.com>
Date:   Wed Feb 2 17:48:12 2022 -0800

    KVM: x86/pmu: Don't truncate the PerfEvtSeln MSR when creating a perf event
    
    [ Upstream commit b8bfee85f1307426e0242d654f3a14c06ef639c5 ]
    
    AMD's event select is 3 nybbles, with the high nybble in bits 35:32 of
    a PerfEvtSeln MSR. Don't drop the high nybble when setting up the
    config field of a perf_event_attr structure for a call to
    perf_event_create_kernel_counter().
    
    Fixes: ca724305a2b0 ("KVM: x86/vPMU: Implement AMD vPMU code for KVM")
    Reported-by: Stephane Eranian <eranian@google.com>
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220203014813.2130559-1-jmattson@google.com>
    Reviewed-by: David Dunn <daviddunn@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99cd2a043760e4fcf06fe3c67e9885a2d64c986d
Author: Like Xu <likexu@tencent.com>
Date:   Tue Nov 30 15:42:17 2021 +0800

    KVM: x86/pmu: Refactoring find_arch_event() to pmc_perf_hw_id()
    
    [ Upstream commit 7c174f305cbee6bdba5018aae02b84369e7ab995 ]
    
    The find_arch_event() returns a "unsigned int" value,
    which is used by the pmc_reprogram_counter() to
    program a PERF_TYPE_HARDWARE type perf_event.
    
    The returned value is actually the kernel defined generic
    perf_hw_id, let's rename it to pmc_perf_hw_id() with simpler
    incoming parameters for better self-explanation.
    
    Signed-off-by: Like Xu <likexu@tencent.com>
    Message-Id: <20211130074221.93635-3-likexu@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91d8866ca55232d21995a3d54fac96de33c9e20c
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Fri Feb 4 01:30:08 2022 +0800

    Drivers: hv: vmbus: Fix memory leak in vmbus_add_channel_kobj
    
    [ Upstream commit 8bc69f86328e87a0ffa79438430cc82f3aa6a194 ]
    
    kobject_init_and_add() takes reference even when it fails.
    According to the doc of kobject_init_and_add()：
    
       If this function returns an error, kobject_put() must be called to
       properly clean up the memory associated with the object.
    
    Fix memory leak by calling kobject_put().
    
    Fixes: c2e5df616e1a ("vmbus: add per-channel sysfs info")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Juan Vazquez <juvazq@linux.microsoft.com>
    Link: https://lore.kernel.org/r/20220203173008.43480-1-linmq006@gmail.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a176d559e826672c5b07ca42d63bfb3975c756f7
Author: david regan <dregan@mail.com>
Date:   Wed Jan 26 23:43:44 2022 +0100

    mtd: rawnand: brcmnand: Fixed incorrect sub-page ECC status
    
    commit 36415a7964711822e63695ea67fede63979054d9 upstream.
    
    The brcmnand driver contains a bug in which if a page (example 2k byte)
    is read from the parallel/ONFI NAND and within that page a subpage (512
    byte) has correctable errors which is followed by a subpage with
    uncorrectable errors, the page read will return the wrong status of
    correctable (as opposed to the actual status of uncorrectable.)
    
    The bug is in function brcmnand_read_by_pio where there is a check for
    uncorrectable bits which will be preempted if a previous status for
    correctable bits is detected.
    
    The fix is to stop checking for bad bits only if we already have a bad
    bits status.
    
    Fixes: 27c5b17cd1b1 ("mtd: nand: add NAND driver "library" for Broadcom STB NAND controller")
    Signed-off-by: david regan <dregan@mail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/trinity-478e0c09-9134-40e8-8f8c-31c371225eda-1643237024774@3c-app-mailcom-lxa02
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a49b1b0b0cb2170fc6e5ab0613eb8139302b6c7
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Mon Jan 3 03:03:15 2022 +0000

    mtd: rawnand: qcom: Fix clock sequencing in qcom_nandc_probe()
    
    commit 5c23b3f965bc9ee696bf2ed4bdc54d339dd9a455 upstream.
    
    Interacting with a NAND chip on an IPQ6018 I found that the qcomsmem NAND
    partition parser was returning -EPROBE_DEFER waiting for the main smem
    driver to load.
    
    This caused the board to reset. Playing about with the probe() function
    shows that the problem lies in the core clock being switched off before the
    nandc_unalloc() routine has completed.
    
    If we look at how qcom_nandc_remove() tears down allocated resources we see
    the expected order is
    
    qcom_nandc_unalloc(nandc);
    
    clk_disable_unprepare(nandc->aon_clk);
    clk_disable_unprepare(nandc->core_clk);
    
    dma_unmap_resource(&pdev->dev, nandc->base_dma, resource_size(res),
                       DMA_BIDIRECTIONAL, 0);
    
    Tweaking probe() to both bring up and tear-down in that order removes the
    reset if we end up deferring elsewhere.
    
    Fixes: c76b78d8ec05 ("mtd: nand: Qualcomm NAND controller driver")
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20220103030316.58301-2-bryan.odonoghue@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c848744c11bf98b95b98d8bd64576d08dd4ad90
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Feb 15 15:28:00 2022 -0800

    tty: n_tty: do not look ahead for EOL character past the end of the buffer
    
    commit 3593030761630e09200072a4bd06468892c27be3 upstream.
    
    Daniel Gibson reports that the n_tty code gets line termination wrong in
    very specific cases:
    
     "If you feed a line with exactly 64 chars + terminating newline, and
      directly afterwards (without reading) another line into a pseudo
      terminal, the the first read() on the other side will return the 64
      char line *without* terminating newline, and the next read() will
      return the missing terminating newline AND the complete next line (if
      it fits in the buffer)"
    
    and bisected the behavior to commit 3b830a9c34d5 ("tty: convert
    tty_ldisc_ops 'read()' function to take a kernel pointer").
    
    Now, digging deeper, it turns out that the behavior isn't exactly new:
    what changed in commit 3b830a9c34d5 was that the tty line discipline
    .read() function is now passed an intermediate kernel buffer rather than
    the final user space buffer.
    
    And that intermediate kernel buffer is 64 bytes in size - thus that
    special case with exactly 64 bytes plus terminating newline.
    
    The same problem did exist before, but historically the boundary was not
    the 64-byte chunk, but the user-supplied buffer size, which is obviously
    generally bigger (and potentially bigger than N_TTY_BUF_SIZE, which
    would hide the issue entirely).
    
    The reason is that the n_tty canon_copy_from_read_buf() code would look
    ahead for the EOL character one byte further than it would actually
    copy.  It would then decide that it had found the terminator, and unmark
    it as an EOL character - which in turn explains why the next read
    wouldn't then be terminated by it.
    
    Now, the reason it did all this in the first place is related to some
    historical and pretty obscure EOF behavior, see commit ac8f3bf8832a
    ("n_tty: Fix poll() after buffer-limited eof push read") and commit
    40d5e0905a03 ("n_tty: Fix EOF push handling").
    
    And the reason for the EOL confusion is that we treat EOF as a special
    EOL condition, with the EOL character being NUL (aka "__DISABLED_CHAR"
    in the kernel sources).
    
    So that EOF look-ahead also affects the normal EOL handling.
    
    This patch just removes the look-ahead that causes problems, because EOL
    is much more critical than the historical "EOF in the middle of a line
    that coincides with the end of the buffer" handling ever was.
    
    Now, it is possible that we should indeed re-introduce the "look at next
    character to see if it's a EOF" behavior, but if so, that should be done
    not at the kernel buffer chunk boundary in canon_copy_from_read_buf(),
    but at a higher level, when we run out of the user buffer.
    
    In particular, the place to do that would be at the top of
    'n_tty_read()', where we check if it's a continuation of a previously
    started read, and there is no more buffer space left, we could decide to
    just eat the __DISABLED_CHAR at that point.
    
    But that would be a separate patch, because I suspect nobody actually
    cares, and I'd like to get a report about it before bothering.
    
    Fixes: 3b830a9c34d5 ("tty: convert tty_ldisc_ops 'read()' function to take a kernel pointer")
    Fixes: ac8f3bf8832a ("n_tty: Fix  poll() after buffer-limited eof push read")
    Fixes: 40d5e0905a03 ("n_tty: Fix EOF push handling")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215611
    Reported-and-tested-by: Daniel Gibson <metalcaedes@gmail.com>
    Cc: Peter Hurley <peter@hurleysoftware.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8daa0436ce79f3c2ec3cfff47d68bb0bd43c7d28
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Feb 15 18:05:18 2022 -0500

    NFS: Do not report writeback errors in nfs_getattr()
    
    commit d19e0183a88306acda07f4a01fedeeffe2a2a06b upstream.
    
    The result of the writeback, whether it is an ENOSPC or an EIO, or
    anything else, does not inhibit the NFS client from reporting the
    correct file timestamps.
    
    Fixes: 79566ef018f5 ("NFS: Getattr doesn't require data sync semantics")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9b7385c0f6261f6464b09731ff9700e182cd9b7
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Feb 8 13:38:23 2022 -0500

    NFS: LOOKUP_DIRECTORY is also ok with symlinks
    
    commit e0caaf75d443e02e55e146fd75fe2efc8aed5540 upstream.
    
    Commit ac795161c936 (NFSv4: Handle case where the lookup of a directory
    fails) [1], part of Linux since 5.17-rc2, introduced a regression, where
    a symbolic link on an NFS mount to a directory on another NFS does not
    resolve(?) the first time it is accessed:
    
    Reported-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Fixes: ac795161c936 ("NFSv4: Handle case where the lookup of a directory fails")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Tested-by: Donald Buczek <buczek@molgen.mpg.de>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 598dbaf74b64f51aa09bdbb8d15e957330ff2659
Author: Laibin Qiu <qiulaibin@huawei.com>
Date:   Sat Jan 22 19:10:45 2022 +0800

    block/wbt: fix negative inflight counter when remove scsi device
    
    commit e92bc4cd34de2ce454bdea8cd198b8067ee4e123 upstream.
    
    Now that we disable wbt by set WBT_STATE_OFF_DEFAULT in
    wbt_disable_default() when switch elevator to bfq. And when
    we remove scsi device, wbt will be enabled by wbt_enable_default.
    If it become false positive between wbt_wait() and wbt_track()
    when submit write request.
    
    The following is the scenario that triggered the problem.
    
    T1                          T2                           T3
                                elevator_switch_mq
                                bfq_init_queue
                                wbt_disable_default <= Set
                                rwb->enable_state (OFF)
    Submit_bio
    blk_mq_make_request
    rq_qos_throttle
    <= rwb->enable_state (OFF)
                                                             scsi_remove_device
                                                             sd_remove
                                                             del_gendisk
                                                             blk_unregister_queue
                                                             elv_unregister_queue
                                                             wbt_enable_default
                                                             <= Set rwb->enable_state (ON)
    q_qos_track
    <= rwb->enable_state (ON)
    ^^^^^^ this request will mark WBT_TRACKED without inflight add and will
    lead to drop rqw->inflight to -1 in wbt_done() which will trigger IO hung.
    
    Fix this by move wbt_enable_default() from elv_unregister to
    bfq_exit_queue(). Only re-enable wbt when bfq exit.
    
    Fixes: 76a8040817b4b ("blk-wbt: make sure throttle is enabled properly")
    
    Remove oneline stale comment, and kill one oneshot local variable.
    
    Signed-off-by: Ming Lei <ming.lei@rehdat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/linux-block/20211214133103.551813-1-qiulaibin@huawei.com/
    Signed-off-by: Laibin Qiu <qiulaibin@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc6faa0ede4d190b25980dd648e2be808fc58ff5
Author: Martin Povišer <povik+lin@cutebit.org>
Date:   Fri Feb 4 10:53:01 2022 +0100

    ASoC: tas2770: Insert post reset delay
    
    commit 307f31452078792aab94a729fce33200c6e42dc4 upstream.
    
    Per TAS2770 datasheet there must be a 1 ms delay from reset to first
    command. So insert delays into the driver where appropriate.
    
    Fixes: 1a476abc723e ("tas2770: add tas2770 smart PA kernel driver")
    Signed-off-by: Martin Povišer <povik+lin@cutebit.org>
    Link: https://lore.kernel.org/r/20220204095301.5554-1-povik+lin@cutebit.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dcedbe943be8c93722c1ed68b59001b28b0d889
Author: Sean Christopherson <seanjc@google.com>
Date:   Thu Jan 20 01:07:11 2022 +0000

    KVM: SVM: Never reject emulation due to SMAP errata for !SEV guests
    
    commit 55467fcd55b89c622e62b4afe60ac0eb2fae91f2 upstream.
    
    Always signal that emulation is possible for !SEV guests regardless of
    whether or not the CPU provided a valid instruction byte stream.  KVM can
    read all guest state (memory and registers) for !SEV guests, i.e. can
    fetch the code stream from memory even if the CPU failed to do so because
    of the SMAP errata.
    
    Fixes: 05d5a4863525 ("KVM: SVM: Workaround errata#1096 (insn_len maybe zero on SMAP violation)")
    Cc: stable@vger.kernel.org
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Brijesh Singh <brijesh.singh@amd.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Liam Merwick <liam.merwick@oracle.com>
    Message-Id: <20220120010719.711476-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [jwang: adjust context for kernel 5.10.101]
    Signed-off-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4eeeaca50199e3f19eb13ac3b7e0bbb93e22de4
Author: Christian Eggers <ceggers@arri.de>
Date:   Tue Jan 25 09:16:19 2022 +0100

    mtd: rawnand: gpmi: don't leak PM reference in error path
    
    commit 9161f365c91614e5a3f5c6dcc44c3b1b33bc59c0 upstream.
    
    If gpmi_nfc_apply_timings() fails, the PM runtime usage counter must be
    dropped.
    
    Reported-by: Pavel Machek <pavel@denx.de>
    Fixes: f53d4c109a66 ("mtd: rawnand: gpmi: Add ERR007117 protection for nfc_apply_timings")
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20220125081619.6286-1-ceggers@arri.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb26219b40467e32b57221b9dfd245c2f7de95f7
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Fri Feb 11 01:51:13 2022 +0100

    powerpc/lib/sstep: fix 'ptesync' build error
    
    commit fe663df7825811358531dc2e8a52d9eaa5e3515e upstream.
    
    Building tinyconfig with gcc (Debian 11.2.0-16) and assembler (Debian
    2.37.90.20220207) the following build error shows up:
    
      {standard input}: Assembler messages:
      {standard input}:2088: Error: unrecognized opcode: `ptesync'
      make[3]: *** [/builds/linux/scripts/Makefile.build:287: arch/powerpc/lib/sstep.o] Error 1
    
    Add the 'ifdef CONFIG_PPC64' around the 'ptesync' in function
    'emulate_update_regs()' to like it is in 'analyse_instr()'. Since it looks like
    it got dropped inadvertently by commit 3cdfcbfd32b9 ("powerpc: Change
    analyse_instr so it doesn't modify *regs").
    
    A key detail is that analyse_instr() will never recognise lwsync or
    ptesync on 32-bit (because of the existing ifdef), and as a result
    emulate_update_regs() should never be called with an op specifying
    either of those on 32-bit. So removing them from emulate_update_regs()
    should be a nop in terms of runtime behaviour.
    
    Fixes: 3cdfcbfd32b9 ("powerpc: Change analyse_instr so it doesn't modify *regs")
    Cc: stable@vger.kernel.org # v4.14+
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    [mpe: Add last paragraph of change log mentioning analyse_instr() details]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20220211005113.1361436-1-anders.roxell@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54f76366cd013bfcfe2247177407581c40a10458
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Feb 1 15:56:28 2022 +0000

    ASoC: ops: Fix stereo change notifications in snd_soc_put_volsw_range()
    
    commit 650204ded3703b5817bd4b6a77fa47d333c4f902 upstream.
    
    When writing out a stereo control we discard the change notification from
    the first channel, meaning that events are only generated based on changes
    to the second channel. Ensure that we report a change if either channel
    has changed.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220201155629.120510-4-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0df1badfdfcd94f6bce1b26a1f9d9f4f9d4be92e
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Feb 1 15:56:26 2022 +0000

    ASoC: ops: Fix stereo change notifications in snd_soc_put_volsw()
    
    commit 564778d7b1ea465f9487eedeece7527a033549c5 upstream.
    
    When writing out a stereo control we discard the change notification from
    the first channel, meaning that events are only generated based on changes
    to the second channel. Ensure that we report a change if either channel
    has changed.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20220201155629.120510-2-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ef76832fef3db0b168be8bdf0514e210be1c5d8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Feb 14 11:00:20 2022 +0100

    ALSA: hda: Fix missing codec probe on Shenker Dock 15
    
    commit dd8e5b161d7fb9cefa1f1d6e35a39b9e1563c8d3 upstream.
    
    By some unknown reason, BIOS on Shenker Dock 15 doesn't set up the
    codec mask properly for the onboard audio.  Let's set the forced codec
    mask to enable the codec discovery.
    
    Reported-by: dmummenschanz@web.de
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/trinity-f018660b-95c9-442b-a2a8-c92a56eb07ed-1644345967148@3c-app-webde-bap22
    Link: https://lore.kernel.org/r/20220214100020.8870-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c72c3b597a79508a54857b34b5aa55b49db889b4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Feb 14 11:00:19 2022 +0100

    ALSA: hda: Fix regression on forced probe mask option
    
    commit 6317f7449348a897483a2b4841f7a9190745c81b upstream.
    
    The forced probe mask via probe_mask 0x100 bit doesn't work any longer
    as expected since the bus init code was moved and it's clearing the
    codec_mask value that was set beforehand.  This patch fixes the
    long-time regression by moving the check_probe_mask() call.
    
    Fixes: a41d122449be ("ALSA: hda - Embed bus into controller object")
    Reported-by: dmummenschanz@web.de
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/trinity-f018660b-95c9-442b-a2a8-c92a56eb07ed-1644345967148@3c-app-webde-bap22
    Link: https://lore.kernel.org/r/20220214100020.8870-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63b1602c2fd5af84f3fc4eec64d93298237c791e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Feb 14 14:04:10 2022 +0100

    ALSA: hda/realtek: Fix deadlock by COEF mutex
    
    commit 2a845837e3d0ddaed493b4c5c4643d7f0542804d upstream.
    
    The recently introduced coef_mutex for Realtek codec seems causing a
    deadlock when the relevant code is invoked from the power-off state;
    then the HD-audio core tries to power-up internally, and this kicks
    off the codec runtime PM code that tries to take the same coef_mutex.
    
    In order to avoid the deadlock, do the temporary power up/down around
    the coef_mutex acquisition and release.  This assures that the
    power-up sequence runs before the mutex, hence no re-entrance will
    happen.
    
    Fixes: b837a9f5ab3b ("ALSA: hda: realtek: Fix race at concurrent COEF updates")
    Reported-and-tested-by: Julian Wollrath <jwollrath@web.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220214132838.4db10fca@schienar
    Link: https://lore.kernel.org/r/20220214130410.21230-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6a5e8f45f896d8ae7524193ab1a0c1dde89268b
Author: Yu Huang <diwang90@gmail.com>
Date:   Sun Feb 13 00:08:33 2022 +0800

    ALSA: hda/realtek: Add quirk for Legion Y9000X 2019
    
    commit c07f2c7b45413a9e50ba78630fda04ecfa17b4f2 upstream.
    
    Legion Y9000X 2019 has the same speaker with Y9000X 2020,
    but with a different quirk address. Add one quirk entry
    to make the speaker work on Y9000X 2019 too.
    
    Signed-off-by: Yu Huang <diwang90@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220212160835.165065-1-diwang90@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67de71b9433185747c85b627b616a58a582ba11f
Author: Muhammad Usama Anjum <usama.anjum@collabora.com>
Date:   Thu Feb 10 22:13:23 2022 +0500

    selftests/exec: Add non-regular to TEST_GEN_PROGS
    
    commit a7e793a867ae312cecdeb6f06cceff98263e75dd upstream.
    
    non-regular file needs to be compiled and then copied to the output
    directory. Remove it from TEST_PROGS and add it to TEST_GEN_PROGS. This
    removes error thrown by rsync when non-regular object isn't found:
    
    rsync: [sender] link_stat "/linux/tools/testing/selftests/exec/non-regular" failed: No such file or directory (2)
    rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1333) [sender=3.2.3]
    
    Fixes: 0f71241a8e32 ("selftests/exec: add file type errno tests")
    Reported-by: "kernelci.org bot" <bot@kernelci.org>
    Signed-off-by: Muhammad Usama Anjum <usama.anjum@collabora.com>
    Reviewed-by: Shuah Khan <skhan@linuxfoundation.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3018a19622115e1126f6abb3657c65877a99410
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Wed Feb 16 16:01:00 2022 -0300

    perf bpf: Defer freeing string after possible strlen() on it
    
    commit 31ded1535e3182778a1d0e5c32711f55da3bc512 upstream.
    
    This was detected by the gcc in Fedora Rawhide's gcc:
    
      50    11.01 fedora:rawhide                : FAIL gcc version 12.0.1 20220205 (Red Hat 12.0.1-0) (GCC)
            inlined from 'bpf__config_obj' at util/bpf-loader.c:1242:9:
        util/bpf-loader.c:1225:34: error: pointer 'map_opt' may be used after 'free' [-Werror=use-after-free]
         1225 |                 *key_scan_pos += strlen(map_opt);
              |                                  ^~~~~~~~~~~~~~~
        util/bpf-loader.c:1223:9: note: call to 'free' here
         1223 |         free(map_name);
              |         ^~~~~~~~~~~~~~
        cc1: all warnings being treated as errors
    
    So do the calculations on the pointer before freeing it.
    
    Fixes: 04f9bf2bac72480c ("perf bpf-loader: Add missing '*' for key_scan_pos")
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Link: https://lore.kernel.org/lkml/Yg1VtQxKrPpS3uNA@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 016e3ca9c588a6793542d6a8d40c15027654f82e
Author: Radu Bulie <radu-andrei.bulie@nxp.com>
Date:   Mon Feb 14 19:45:34 2022 +0200

    dpaa2-eth: Initialize mutex used in one step timestamping path
    
    commit 07dd44852be89386ab12210df90a2d78779f3bff upstream.
    
    1588 Single Step Timestamping code path uses a mutex to
    enforce atomicity for two events:
    - update of ptp single step register
    - transmit ptp event packet
    
    Before this patch the mutex was not initialized. This
    caused unexpected crashes in the Tx function.
    
    Fixes: c55211892f463 ("dpaa2-eth: support PTP Sync packet one-step timestamping")
    Signed-off-by: Radu Bulie <radu-andrei.bulie@nxp.com>
    Reviewed-by: Ioana Ciornei <ioana.ciornei@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50f3b00d4c7ba9aef6e0be4db192ee81f4f8a125
Author: Kees Cook <keescook@chromium.org>
Date:   Sun Feb 13 10:24:43 2022 -0800

    libsubcmd: Fix use-after-free for realloc(..., 0)
    
    commit 52a9dab6d892763b2a8334a568bd4e2c1a6fde66 upstream.
    
    GCC 12 correctly reports a potential use-after-free condition in the
    xrealloc helper. Fix the warning by avoiding an implicit "free(ptr)"
    when size == 0:
    
    In file included from help.c:12:
    In function 'xrealloc',
        inlined from 'add_cmdname' at help.c:24:2: subcmd-util.h:56:23: error: pointer may be used after 'realloc' [-Werror=use-after-free]
       56 |                 ret = realloc(ptr, size);
          |                       ^~~~~~~~~~~~~~~~~~
    subcmd-util.h:52:21: note: call to 'realloc' here
       52 |         void *ret = realloc(ptr, size);
          |                     ^~~~~~~~~~~~~~~~~~
    subcmd-util.h:58:31: error: pointer may be used after 'realloc' [-Werror=use-after-free]
       58 |                         ret = realloc(ptr, 1);
          |                               ^~~~~~~~~~~~~~~
    subcmd-util.h:52:21: note: call to 'realloc' here
       52 |         void *ret = realloc(ptr, size);
          |                     ^~~~~~~~~~~~~~~~~~
    
    Fixes: 2f4ce5ec1d447beb ("perf tools: Finalize subcmd independence")
    Reported-by: Valdis Klētnieks <valdis.kletnieks@vt.edu>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Valdis Klētnieks <valdis.kletnieks@vt.edu>
    Tested-by: Justin M. Forbes <jforbes@fedoraproject.org>
    Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: linux-hardening@vger.kernel.org
    Cc: Valdis Klētnieks <valdis.kletnieks@vt.edu>
    Link: http://lore.kernel.org/lkml/20220213182443.4037039-1-keescook@chromium.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffa8df4f0e8fb60c5f7bc71992f67016173c2744
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Feb 14 11:15:53 2022 -0800

    bonding: fix data-races around agg_select_timer
    
    commit 9ceaf6f76b203682bb6100e14b3d7da4c0bedde8 upstream.
    
    syzbot reported that two threads might write over agg_select_timer
    at the same time. Make agg_select_timer atomic to fix the races.
    
    BUG: KCSAN: data-race in bond_3ad_initiate_agg_selection / bond_3ad_state_machine_handler
    
    read to 0xffff8881242aea90 of 4 bytes by task 1846 on cpu 1:
     bond_3ad_state_machine_handler+0x99/0x2810 drivers/net/bonding/bond_3ad.c:2317
     process_one_work+0x3f6/0x960 kernel/workqueue.c:2307
     worker_thread+0x616/0xa70 kernel/workqueue.c:2454
     kthread+0x1bf/0x1e0 kernel/kthread.c:377
     ret_from_fork+0x1f/0x30
    
    write to 0xffff8881242aea90 of 4 bytes by task 25910 on cpu 0:
     bond_3ad_initiate_agg_selection+0x18/0x30 drivers/net/bonding/bond_3ad.c:1998
     bond_open+0x658/0x6f0 drivers/net/bonding/bond_main.c:3967
     __dev_open+0x274/0x3a0 net/core/dev.c:1407
     dev_open+0x54/0x190 net/core/dev.c:1443
     bond_enslave+0xcef/0x3000 drivers/net/bonding/bond_main.c:1937
     do_set_master net/core/rtnetlink.c:2532 [inline]
     do_setlink+0x94f/0x2500 net/core/rtnetlink.c:2736
     __rtnl_newlink net/core/rtnetlink.c:3414 [inline]
     rtnl_newlink+0xfeb/0x13e0 net/core/rtnetlink.c:3529
     rtnetlink_rcv_msg+0x745/0x7e0 net/core/rtnetlink.c:5594
     netlink_rcv_skb+0x14e/0x250 net/netlink/af_netlink.c:2494
     rtnetlink_rcv+0x18/0x20 net/core/rtnetlink.c:5612
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x602/0x6d0 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x728/0x850 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:705 [inline]
     sock_sendmsg net/socket.c:725 [inline]
     ____sys_sendmsg+0x39a/0x510 net/socket.c:2413
     ___sys_sendmsg net/socket.c:2467 [inline]
     __sys_sendmsg+0x195/0x230 net/socket.c:2496
     __do_sys_sendmsg net/socket.c:2505 [inline]
     __se_sys_sendmsg net/socket.c:2503 [inline]
     __x64_sys_sendmsg+0x42/0x50 net/socket.c:2503
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0x00000050 -> 0x0000004f
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 25910 Comm: syz-executor.1 Tainted: G        W         5.17.0-rc4-syzkaller-dirty #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9bd9d4c60c34fe3e71732b8edcba3a880193948
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 11 12:06:23 2022 -0800

    net_sched: add __rcu annotation to netdev->qdisc
    
    commit 5891cd5ec46c2c2eb6427cb54d214b149635dd0e upstream.
    
    syzbot found a data-race [1] which lead me to add __rcu
    annotations to netdev->qdisc, and proper accessors
    to get LOCKDEP support.
    
    [1]
    BUG: KCSAN: data-race in dev_activate / qdisc_lookup_rcu
    
    write to 0xffff888168ad6410 of 8 bytes by task 13559 on cpu 1:
     attach_default_qdiscs net/sched/sch_generic.c:1167 [inline]
     dev_activate+0x2ed/0x8f0 net/sched/sch_generic.c:1221
     __dev_open+0x2e9/0x3a0 net/core/dev.c:1416
     __dev_change_flags+0x167/0x3f0 net/core/dev.c:8139
     rtnl_configure_link+0xc2/0x150 net/core/rtnetlink.c:3150
     __rtnl_newlink net/core/rtnetlink.c:3489 [inline]
     rtnl_newlink+0xf4d/0x13e0 net/core/rtnetlink.c:3529
     rtnetlink_rcv_msg+0x745/0x7e0 net/core/rtnetlink.c:5594
     netlink_rcv_skb+0x14e/0x250 net/netlink/af_netlink.c:2494
     rtnetlink_rcv+0x18/0x20 net/core/rtnetlink.c:5612
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x602/0x6d0 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x728/0x850 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:705 [inline]
     sock_sendmsg net/socket.c:725 [inline]
     ____sys_sendmsg+0x39a/0x510 net/socket.c:2413
     ___sys_sendmsg net/socket.c:2467 [inline]
     __sys_sendmsg+0x195/0x230 net/socket.c:2496
     __do_sys_sendmsg net/socket.c:2505 [inline]
     __se_sys_sendmsg net/socket.c:2503 [inline]
     __x64_sys_sendmsg+0x42/0x50 net/socket.c:2503
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    read to 0xffff888168ad6410 of 8 bytes by task 13560 on cpu 0:
     qdisc_lookup_rcu+0x30/0x2e0 net/sched/sch_api.c:323
     __tcf_qdisc_find+0x74/0x3a0 net/sched/cls_api.c:1050
     tc_del_tfilter+0x1c7/0x1350 net/sched/cls_api.c:2211
     rtnetlink_rcv_msg+0x5ba/0x7e0 net/core/rtnetlink.c:5585
     netlink_rcv_skb+0x14e/0x250 net/netlink/af_netlink.c:2494
     rtnetlink_rcv+0x18/0x20 net/core/rtnetlink.c:5612
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x602/0x6d0 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x728/0x850 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:705 [inline]
     sock_sendmsg net/socket.c:725 [inline]
     ____sys_sendmsg+0x39a/0x510 net/socket.c:2413
     ___sys_sendmsg net/socket.c:2467 [inline]
     __sys_sendmsg+0x195/0x230 net/socket.c:2496
     __do_sys_sendmsg net/socket.c:2505 [inline]
     __se_sys_sendmsg net/socket.c:2503 [inline]
     __x64_sys_sendmsg+0x42/0x50 net/socket.c:2503
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    value changed: 0xffffffff85dee080 -> 0xffff88815d96ec00
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 13560 Comm: syz-executor.2 Not tainted 5.17.0-rc3-syzkaller-00116-gf1baf68e1383-dirty #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 470502de5bdb ("net: sched: unlock rules update API")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Vlad Buslov <vladbu@mellanox.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 877a05672f95d819ba2e45af3b7e95e01ece4c28
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 10 09:13:31 2022 -0800

    drop_monitor: fix data-race in dropmon_net_event / trace_napi_poll_hit
    
    commit dcd54265c8bc14bd023815e36e2d5f9d66ee1fee upstream.
    
    trace_napi_poll_hit() is reading stat->dev while another thread can write
    on it from dropmon_net_event()
    
    Use READ_ONCE()/WRITE_ONCE() here, RCU rules are properly enforced already,
    we only have to take care of load/store tearing.
    
    BUG: KCSAN: data-race in dropmon_net_event / trace_napi_poll_hit
    
    write to 0xffff88816f3ab9c0 of 8 bytes by task 20260 on cpu 1:
     dropmon_net_event+0xb8/0x2b0 net/core/drop_monitor.c:1579
     notifier_call_chain kernel/notifier.c:84 [inline]
     raw_notifier_call_chain+0x53/0xb0 kernel/notifier.c:392
     call_netdevice_notifiers_info net/core/dev.c:1919 [inline]
     call_netdevice_notifiers_extack net/core/dev.c:1931 [inline]
     call_netdevice_notifiers net/core/dev.c:1945 [inline]
     unregister_netdevice_many+0x867/0xfb0 net/core/dev.c:10415
     ip_tunnel_delete_nets+0x24a/0x280 net/ipv4/ip_tunnel.c:1123
     vti_exit_batch_net+0x2a/0x30 net/ipv4/ip_vti.c:515
     ops_exit_list net/core/net_namespace.c:173 [inline]
     cleanup_net+0x4dc/0x8d0 net/core/net_namespace.c:597
     process_one_work+0x3f6/0x960 kernel/workqueue.c:2307
     worker_thread+0x616/0xa70 kernel/workqueue.c:2454
     kthread+0x1bf/0x1e0 kernel/kthread.c:377
     ret_from_fork+0x1f/0x30
    
    read to 0xffff88816f3ab9c0 of 8 bytes by interrupt on cpu 0:
     trace_napi_poll_hit+0x89/0x1c0 net/core/drop_monitor.c:292
     trace_napi_poll include/trace/events/napi.h:14 [inline]
     __napi_poll+0x36b/0x3f0 net/core/dev.c:6366
     napi_poll net/core/dev.c:6432 [inline]
     net_rx_action+0x29e/0x650 net/core/dev.c:6519
     __do_softirq+0x158/0x2de kernel/softirq.c:558
     do_softirq+0xb1/0xf0 kernel/softirq.c:459
     __local_bh_enable_ip+0x68/0x70 kernel/softirq.c:383
     __raw_spin_unlock_bh include/linux/spinlock_api_smp.h:167 [inline]
     _raw_spin_unlock_bh+0x33/0x40 kernel/locking/spinlock.c:210
     spin_unlock_bh include/linux/spinlock.h:394 [inline]
     ptr_ring_consume_bh include/linux/ptr_ring.h:367 [inline]
     wg_packet_decrypt_worker+0x73c/0x780 drivers/net/wireguard/receive.c:506
     process_one_work+0x3f6/0x960 kernel/workqueue.c:2307
     worker_thread+0x616/0xa70 kernel/workqueue.c:2454
     kthread+0x1bf/0x1e0 kernel/kthread.c:377
     ret_from_fork+0x1f/0x30
    
    value changed: 0xffff88815883e000 -> 0x0000000000000000
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 26435 Comm: kworker/0:1 Not tainted 5.17.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: wg-crypt-wg2 wg_packet_decrypt_worker
    
    Fixes: 4ea7e38696c7 ("dropmon: add ability to detect when hardware dropsrxpackets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0e004e6206e52079c8309daaf466b506ca4b52d
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Feb 16 22:18:08 2022 +0800

    bonding: force carrier update when releasing slave
    
    commit a6ab75cec1e461f8a35559054c146c21428430b8 upstream.
    
    In __bond_release_one(), bond_set_carrier() is only called when bond
    device has no slave. Therefore, if we remove the up slave from a master
    with two slaves and keep the down slave, the master will remain up.
    
    Fix this by moving bond_set_carrier() out of if (!bond_has_slaves(bond))
    statement.
    
    Reproducer:
    $ insmod bonding.ko mode=0 miimon=100 max_bonds=2
    $ ifconfig bond0 up
    $ ifenslave bond0 eth0 eth1
    $ ifconfig eth0 down
    $ ifenslave -d bond0 eth1
    $ cat /proc/net/bonding/bond0
    
    Fixes: ff59c4563a8d ("[PATCH] bonding: support carrier state for master")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Link: https://lore.kernel.org/r/1645021088-38370-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dec3c4e7350ff24910aa454847f7dc9e4bc38f9
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Feb 16 00:20:52 2022 -0500

    ping: fix the dif and sdif check in ping_lookup
    
    commit 35a79e64de29e8d57a5989aac57611c0cd29e13e upstream.
    
    When 'ping' changes to use PING socket instead of RAW socket by:
    
       # sysctl -w net.ipv4.ping_group_range="0 100"
    
    There is another regression caused when matching sk_bound_dev_if
    and dif, RAW socket is using inet_iif() while PING socket lookup
    is using skb->dev->ifindex, the cmd below fails due to this:
    
      # ip link add dummy0 type dummy
      # ip link set dummy0 up
      # ip addr add 192.168.111.1/24 dev dummy0
      # ping -I dummy0 192.168.111.1 -c1
    
    The issue was also reported on:
    
      https://github.com/iputils/iputils/issues/104
    
    But fixed in iputils in a wrong way by not binding to device when
    destination IP is on device, and it will cause some of kselftests
    to fail, as Jianlin noticed.
    
    This patch is to use inet(6)_iif and inet(6)_sdif to get dif and
    sdif for PING socket, and keep consistent with RAW socket.
    
    Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6793a9b028ce803447a846c7000a89f9b4762400
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Feb 1 19:06:26 2022 +0100

    net: ieee802154: ca8210: Fix lifs/sifs periods
    
    commit bdc120a2bcd834e571ce4115aaddf71ab34495de upstream.
    
    These periods are expressed in time units (microseconds) while 40 and 12
    are the number of symbol durations these periods will last. We need to
    multiply them both with the symbol_duration in order to get these
    values in microseconds.
    
    Fixes: ded845a781a5 ("ieee802154: Add CA8210 IEEE 802.15.4 device driver")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/r/20220201180629.93410-2-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f48bd34137718042872d06f2c7332b3267a29165
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Tue Feb 15 13:42:48 2022 +0300

    net: dsa: lantiq_gswip: fix use after free in gswip_remove()
    
    commit 8c6ae46150a453f8ae9a6cd49b45f354f478587d upstream.
    
    of_node_put(priv->ds->slave_mii_bus->dev.of_node) should be
    done before mdiobus_free(priv->ds->slave_mii_bus).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Fixes: 0d120dfb5d67 ("net: dsa: lantiq_gswip: don't use devres for mdiobus")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/1644921768-26477-1-git-send-email-khoroshilov@ispras.ru
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9b2203e5a30482beb5e502b6985ad84ead922e4
Author: Mans Rullgard <mans@mansr.com>
Date:   Wed Feb 9 14:54:54 2022 +0000

    net: dsa: lan9303: fix reset on probe
    
    commit 6bb9681a43f34f2cab4aad6e2a02da4ce54d13c5 upstream.
    
    The reset input to the LAN9303 chip is active low, and devicetree
    gpio handles reflect this.  Therefore, the gpio should be requested
    with an initial state of high in order for the reset signal to be
    asserted.  Other uses of the gpio already use the correct polarity.
    
    Fixes: a1292595e006 ("net: dsa: add new DSA switch driver for the SMSC-LAN9303")
    Signed-off-by: Mans Rullgard <mans@mansr.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fianelil <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220209145454.19749-1-mans@mansr.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f523f15e5d753ac055302bc29ca9677d6692eed
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Feb 15 11:00:37 2022 -0500

    ipv6: per-netns exclusive flowlabel checks
    
    commit 0b0dff5b3b98c5c7ce848151df9da0b3cdf0cc8b upstream.
    
    Ipv6 flowlabels historically require a reservation before use.
    Optionally in exclusive mode (e.g., user-private).
    
    Commit 59c820b2317f ("ipv6: elide flowlabel check if no exclusive
    leases exist") introduced a fastpath that avoids this check when no
    exclusive leases exist in the system, and thus any flowlabel use
    will be granted.
    
    That allows skipping the control operation to reserve a flowlabel
    entirely. Though with a warning if the fast path fails:
    
      This is an optimization. Robust applications still have to revert to
      requesting leases if the fast path fails due to an exclusive lease.
    
    Still, this is subtle. Better isolate network namespaces from each
    other. Flowlabels are per-netns. Also record per-netns whether
    exclusive leases are in use. Then behavior does not change based on
    activity in other netns.
    
    Changes
      v2
        - wrap in IS_ENABLED(CONFIG_IPV6) to avoid breakage if disabled
    
    Fixes: 59c820b2317f ("ipv6: elide flowlabel check if no exclusive leases exist")
    Link: https://lore.kernel.org/netdev/MWHPR2201MB1072BCCCFCE779E4094837ACD0329@MWHPR2201MB1072.namprd22.prod.outlook.com/
    Reported-by: Congyu Liu <liu3101@purdue.edu>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Tested-by: Congyu Liu <liu3101@purdue.edu>
    Link: https://lore.kernel.org/r/20220215160037.1976072-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 100344200a0cd263f23897ce20a69e0f86067d56
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Feb 10 10:06:42 2022 +0100

    netfilter: nft_synproxy: unregister hooks on init error path
    
    commit 2b4e5fb4d3776c391e40fb33673ba946dd96012d upstream.
    
    Disable the IPv4 hooks if the IPv6 hooks fail to be registered.
    
    Fixes: ad49d86e07a4 ("netfilter: nf_tables: Add synproxy support")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26931971db5f9d81c6a334ac08eda2f2c393ce43
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Wed Feb 9 16:25:51 2022 +0800

    selftests: netfilter: fix exit value for nft_concat_range
    
    commit 2e71ec1a725a794a16e3862791ed43fe5ba6a06b upstream.
    
    When the nft_concat_range test failed, it exit 1 in the code
    specifically.
    
    But when part of, or all of the test passed, it will failed the
    [ ${passed} -eq 0 ] check and thus exit with 1, which is the same
    exit value with failure result. Fix it by exit 0 when passed is not 0.
    
    Fixes: 611973c1e06f ("selftests: netfilter: Introduce tests for sets with range concatenation")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b26ea3f6b7b0d9e7167c7c7c2d73328aadae3954
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 28 14:30:53 2022 +0200

    iwlwifi: pcie: gen2: fix locking when "HW not ready"
    
    commit 4c29c1e27a1e178a219b3877d055e6dd643bdfda upstream.
    
    If we run into this error path, we shouldn't unlock the mutex
    since it's not locked since. Fix this in the gen2 code as well.
    
    Fixes: eda50cde58de ("iwlwifi: pcie: add context information support")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/iwlwifi.20220128142706.b8b0dfce16ef.Ie20f0f7b23e5911350a2766524300d2915e7b677@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8867f993790d9d9ff6e10fd937260c76b12390ce
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 28 14:30:52 2022 +0200

    iwlwifi: pcie: fix locking when "HW not ready"
    
    commit e9848aed147708a06193b40d78493b0ef6abccf2 upstream.
    
    If we run into this error path, we shouldn't unlock the mutex
    since it's not locked since. Fix this.
    
    Fixes: a6bd005fe92d ("iwlwifi: pcie: fix RF-Kill vs. firmware load race")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/iwlwifi.20220128142706.5d16821d1433.Id259699ddf9806459856d6aefbdbe54477aecffd@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3c1910257c88b80e105e42cadf0b873869ddff6
Author: Siva Mullati <siva.mullati@intel.com>
Date:   Fri Jan 7 15:22:35 2022 +0530

    drm/i915/gvt: Make DRM_I915_GVT depend on X86
    
    commit d72d69abfdb6e0375981cfdda8eb45143f12c77d upstream.
    
    GVT is not supported on non-x86 platforms, So add
    dependency of X86 on config parameter DRM_I915_GVT.
    
    Fixes: 0ad35fed618c ("drm/i915: gvt: Introduce the basic architecture of GVT-g")
    Signed-off-by: Siva Mullati <siva.mullati@intel.com>
    Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20220107095235.243448-1-siva.mullati@intel.com
    Reviewed-by: Zhi Wang <zhi.a.wang@intel.com>
    Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87cd1bbd6677411e17369cd4b7389ab1e1fdba44
Author: Seth Forshee <sforshee@digitalocean.com>
Date:   Thu Feb 17 08:13:12 2022 -0600

    vsock: remove vsock from connected table when connect is interrupted by a signal
    
    commit b9208492fcaecff8f43915529ae34b3bcb03877c upstream.
    
    vsock_connect() expects that the socket could already be in the
    TCP_ESTABLISHED state when the connecting task wakes up with a signal
    pending. If this happens the socket will be in the connected table, and
    it is not removed when the socket state is reset. In this situation it's
    common for the process to retry connect(), and if the connection is
    successful the socket will be added to the connected table a second
    time, corrupting the list.
    
    Prevent this by calling vsock_remove_connected() if a signal is received
    while waiting for a connection. This is harmless if the socket is not in
    the connected table, and if it is in the table then removing it will
    prevent list corruption from a double add.
    
    Note for backporting: this patch requires d5afa82c977e ("vsock: correct
    removal of socket from the list"), which is in all current stable trees
    except 4.9.y.
    
    Fixes: d021c344051a ("VSOCK: Introduce VM Sockets")
    Signed-off-by: Seth Forshee <sforshee@digitalocean.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20220217141312.2297547-1-sforshee@digitalocean.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb7bf11e8ef1fd12ec3d8b0f48b749fc45a0347a
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Feb 10 12:36:42 2022 +0200

    drm/i915/opregion: check port number bounds for SWSCI display power state
    
    commit ea958422291de248b9e2eaaeea36004e84b64043 upstream.
    
    The mapping from enum port to whatever port numbering scheme is used by
    the SWSCI Display Power State Notification is odd, and the memory of it
    has faded. In any case, the parameter only has space for ports numbered
    [0..4], and UBSAN reports bit shift beyond it when the platform has port
    F or more.
    
    Since the SWSCI functionality is supposed to be obsolete for new
    platforms (i.e. ones that might have port F or more), just bail out
    early if the mapped and mangled port number is beyond what the Display
    Power State Notification can support.
    
    Fixes: 9c4b0a683193 ("drm/i915: add opregion function to notify bios of encoder enable/disable")
    Cc: <stable@vger.kernel.org> # v3.13+
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4800
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/cc363f42d6b5a5932b6d218fefcc8bdfb15dbbe5.1644489329.git.jani.nikula@intel.com
    (cherry picked from commit 24a644ebbfd3b13cda702f98907f9dd123e34bf9)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5564d83ebc1b91537a7fc92c8e19b8c1a29caa9d
Author: Nicholas Bishop <nicholasbishop@google.com>
Date:   Fri Feb 11 14:57:39 2022 -0500

    drm/radeon: Fix backlight control on iMac 12,1
    
    commit 364438fd629f7611a84c8e6d7de91659300f1502 upstream.
    
    The iMac 12,1 does not use the gmux driver for backlight, so the radeon
    backlight device is needed to set the brightness.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/1838
    Signed-off-by: Nicholas Bishop <nicholasbishop@google.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 008508c16af0087cda0394e1ac6f0493b01b6063
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Feb 8 11:47:30 2022 +0100

    iwlwifi: fix use-after-free
    
    commit bea2662e7818e15d7607d17d57912ac984275d94 upstream.
    
    If no firmware was present at all (or, presumably, all of the
    firmware files failed to parse), we end up unbinding by calling
    device_release_driver(), which calls remove(), which then in
    iwlwifi calls iwl_drv_stop(), freeing the 'drv' struct. However
    the new code I added will still erroneously access it after it
    was freed.
    
    Set 'failure=false' in this case to avoid the access, all data
    was already freed anyway.
    
    Cc: stable@vger.kernel.org
    Reported-by: Stefan Agner <stefan@agner.ch>
    Reported-by: Wolfgang Walter <linux@stwm.de>
    Reported-by: Jason Self <jason@bluehome.net>
    Reported-by: Dominik Behr <dominik@dominikbehr.com>
    Reported-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Fixes: ab07506b0454 ("iwlwifi: fix leaks/bad data after failed firmware load")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220208114728.e6b514cf4c85.Iffb575ca2a623d7859b542c33b2a507d01554251@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44b81136e86849117f34a083c359e4860662b3be
Author: Sean Christopherson <seanjc@google.com>
Date:   Mon Mar 22 16:44:38 2021 -0700

    kbuild: lto: Merge module sections if and only if CONFIG_LTO_CLANG is enabled
    
    commit 6a3193cdd5e5b96ac65f04ee42555c216da332af upstream.
    
    Merge module sections only when using Clang LTO. With ld.bfd, merging
    sections does not appear to update the symbol tables for the module,
    e.g. 'readelf -s' shows the value that a symbol would have had, if
    sections were not merged. ld.lld does not show this problem.
    
    The stale symbol table breaks gdb's function disassembler, and presumably
    other things, e.g.
    
      gdb -batch -ex "file arch/x86/kvm/kvm.ko" -ex "disassemble kvm_init"
    
    reads the wrong bytes and dumps garbage.
    
    Fixes: dd2776222abb ("kbuild: lto: merge module sections")
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Tested-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20210322234438.502582-1-seanjc@google.com
    Cc: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b53e5f737bcf64226298c16c3920e7f0807ab94
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Fri Dec 11 10:46:22 2020 -0800

    kbuild: lto: merge module sections
    
    commit dd2776222abb9893e5b5c237a2c8c880d8854cee upstream.
    
    LLD always splits sections with LTO, which increases module sizes. This
    change adds linker script rules to merge the split sections in the final
    module.
    
    Suggested-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20201211184633.3213045-6-samitolvanen@google.com
    Cc: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45102b538a9e0b244ede1007fd8dcc1a0d9a0627
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Fri Jan 28 23:44:03 2022 +0100

    random: wake up /dev/random writers after zap
    
    [ Upstream commit 042e293e16e3aa9794ce60c29f5b7b0c8170f933 ]
    
    When account() is called, and the amount of entropy dips below
    random_write_wakeup_bits, we wake up the random writers, so that they
    can write some more in. However, the RNDZAPENTCNT/RNDCLEARPOOL ioctl
    sets the entropy count to zero -- a potential reduction just like
    account() -- but does not unblock writers. This commit adds the missing
    logic to that ioctl to unblock waiting writers.
    
    Reviewed-by: Dominik Brodowski <linux@dominikbrodowski.net>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 143aaf79bafa9839cabebd49aa10b36f8aaef3ce
Author: Kees Cook <keescook@chromium.org>
Date:   Thu Feb 3 12:17:54 2022 -0800

    gcc-plugins/stackleak: Use noinstr in favor of notrace
    
    [ Upstream commit dcb85f85fa6f142aae1fe86f399d4503d49f2b60 ]
    
    While the stackleak plugin was already using notrace, objtool is now a
    bit more picky.  Update the notrace uses to noinstr.  Silences the
    following objtool warnings when building with:
    
    CONFIG_DEBUG_ENTRY=y
    CONFIG_STACK_VALIDATION=y
    CONFIG_VMLINUX_VALIDATION=y
    CONFIG_GCC_PLUGIN_STACKLEAK=y
    
      vmlinux.o: warning: objtool: do_syscall_64()+0x9: call to stackleak_track_stack() leaves .noinstr.text section
      vmlinux.o: warning: objtool: do_int80_syscall_32()+0x9: call to stackleak_track_stack() leaves .noinstr.text section
      vmlinux.o: warning: objtool: exc_general_protection()+0x22: call to stackleak_track_stack() leaves .noinstr.text section
      vmlinux.o: warning: objtool: fixup_bad_iret()+0x20: call to stackleak_track_stack() leaves .noinstr.text section
      vmlinux.o: warning: objtool: do_machine_check()+0x27: call to stackleak_track_stack() leaves .noinstr.text section
      vmlinux.o: warning: objtool: .text+0x5346e: call to stackleak_erase() leaves .noinstr.text section
      vmlinux.o: warning: objtool: .entry.text+0x143: call to stackleak_erase() leaves .noinstr.text section
      vmlinux.o: warning: objtool: .entry.text+0x10eb: call to stackleak_erase() leaves .noinstr.text section
      vmlinux.o: warning: objtool: .entry.text+0x17f9: call to stackleak_erase() leaves .noinstr.text section
    
    Note that the plugin's addition of calls to stackleak_track_stack() from
    noinstr functions is expected to be safe, as it isn't runtime
    instrumentation and is self-contained.
    
    Cc: Alexander Popov <alex.popov@linux.com>
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de55891e162cac0ae058e05c2527fd32cc435ac0
Author: Igor Pylypiv <ipylypiv@google.com>
Date:   Thu Jan 27 15:39:53 2022 -0800

    Revert "module, async: async_synchronize_full() on module init iff async is used"
    
    [ Upstream commit 67d6212afda218d564890d1674bab28e8612170f ]
    
    This reverts commit 774a1221e862b343388347bac9b318767336b20b.
    
    We need to finish all async code before the module init sequence is
    done.  In the reverted commit the PF_USED_ASYNC flag was added to mark a
    thread that called async_schedule().  Then the PF_USED_ASYNC flag was
    used to determine whether or not async_synchronize_full() needs to be
    invoked.  This works when modprobe thread is calling async_schedule(),
    but it does not work if module dispatches init code to a worker thread
    which then calls async_schedule().
    
    For example, PCI driver probing is invoked from a worker thread based on
    a node where device is attached:
    
            if (cpu < nr_cpu_ids)
                    error = work_on_cpu(cpu, local_pci_probe, &ddi);
            else
                    error = local_pci_probe(&ddi);
    
    We end up in a situation where a worker thread gets the PF_USED_ASYNC
    flag set instead of the modprobe thread.  As a result,
    async_synchronize_full() is not invoked and modprobe completes without
    waiting for the async code to finish.
    
    The issue was discovered while loading the pm80xx driver:
    (scsi_mod.scan=async)
    
    modprobe pm80xx                      worker
    ...
      do_init_module()
      ...
        pci_call_probe()
          work_on_cpu(local_pci_probe)
                                         local_pci_probe()
                                           pm8001_pci_probe()
                                             scsi_scan_host()
                                               async_schedule()
                                               worker->flags |= PF_USED_ASYNC;
                                         ...
          < return from worker >
      ...
      if (current->flags & PF_USED_ASYNC) <--- false
            async_synchronize_full();
    
    Commit 21c3c5d28007 ("block: don't request module during elevator init")
    fixed the deadlock issue which the reverted commit 774a1221e862
    ("module, async: async_synchronize_full() on module init iff async is
    used") tried to fix.
    
    Since commit 0fdff3ec6d87 ("async, kmod: warn on synchronous
    request_module() from async workers") synchronous module loading from
    async is not allowed.
    
    Given that the original deadlock issue is fixed and it is no longer
    allowed to call synchronous request_module() from async we can remove
    PF_USED_ASYNC flag to make module init consistently invoke
    async_synchronize_full() unless async module probe is requested.
    
    Signed-off-by: Igor Pylypiv <ipylypiv@google.com>
    Reviewed-by: Changyuan Lyu <changyuanl@google.com>
    Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c958dbcba1862050db73a5340b02d52fa9cc917
Author: Jan Beulich <jbeulich@suse.com>
Date:   Tue Feb 1 11:57:16 2022 +0100

    x86/Xen: streamline (and fix) PV CPU enumeration
    
    [ Upstream commit e25a8d959992f61b64a58fc62fb7951dc6f31d1f ]
    
    This started out with me noticing that "dom0_max_vcpus=<N>" with <N>
    larger than the number of physical CPUs reported through ACPI tables
    would not bring up the "excess" vCPU-s. Addressing this is the primary
    purpose of the change; CPU maps handling is being tidied only as far as
    is necessary for the change here (with the effect of also avoiding the
    setting up of too much per-CPU infrastructure, i.e. for CPUs which can
    never come online).
    
    Noticing that xen_fill_possible_map() is called way too early, whereas
    xen_filter_cpu_maps() is called too late (after per-CPU areas were
    already set up), and further observing that each of the functions serves
    only one of Dom0 or DomU, it looked like it was better to simplify this.
    Use the .get_smp_config hook instead, uniformly for Dom0 and DomU.
    xen_fill_possible_map() can be dropped altogether, while
    xen_filter_cpu_maps() is re-purposed but not otherwise changed.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/2dbd5f0a-9859-ca2d-085e-a02f7166c610@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e76d0a9692c51d231d9d3a8cd0892c7c885351f8
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Jan 28 13:21:10 2022 +0100

    drm/amdgpu: fix logic inversion in check
    
    [ Upstream commit e8ae38720e1a685fd98cfa5ae118c9d07b45ca79 ]
    
    We probably never trigger this, but the logic inside the check is
    inverted.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 324f5bdc52ecb6a6dadb31a62823ef8c709d1439
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Tue Feb 1 14:54:21 2022 +0200

    nvme-rdma: fix possible use-after-free in transport error_recovery work
    
    [ Upstream commit b6bb1722f34bbdbabed27acdceaf585d300c5fd2 ]
    
    While nvme_rdma_submit_async_event_work is checking the ctrl and queue
    state before preparing the AER command and scheduling io_work, in order
    to fully prevent a race where this check is not reliable the error
    recovery work must flush async_event_work before continuing to destroy
    the admin queue after setting the ctrl state to RESETTING such that
    there is no race .submit_async_event and the error recovery handler
    itself changing the ctrl state.
    
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e192184cf8bce8dd55d619f5611a2eaba996fa05
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Tue Feb 1 14:54:20 2022 +0200

    nvme-tcp: fix possible use-after-free in transport error_recovery work
    
    [ Upstream commit ff9fc7ebf5c06de1ef72a69f9b1ab40af8b07f9e ]
    
    While nvme_tcp_submit_async_event_work is checking the ctrl and queue
    state before preparing the AER command and scheduling io_work, in order
    to fully prevent a race where this check is not reliable the error
    recovery work must flush async_event_work before continuing to destroy
    the admin queue after setting the ctrl state to RESETTING such that
    there is no race .submit_async_event and the error recovery handler
    itself changing the ctrl state.
    
    Tested-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ead57ceb21bbf15963b4874c2ac67143455382f
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Tue Feb 1 14:54:19 2022 +0200

    nvme: fix a possible use-after-free in controller reset during load
    
    [ Upstream commit 0fa0f99fc84e41057cbdd2efbfe91c6b2f47dd9d ]
    
    Unlike .queue_rq, in .submit_async_event drivers may not check the ctrl
    readiness for AER submission. This may lead to a use-after-free
    condition that was observed with nvme-tcp.
    
    The race condition may happen in the following scenario:
    1. driver executes its reset_ctrl_work
    2. -> nvme_stop_ctrl - flushes ctrl async_event_work
    3. ctrl sends AEN which is received by the host, which in turn
       schedules AEN handling
    4. teardown admin queue (which releases the queue socket)
    5. AEN processed, submits another AER, calling the driver to submit
    6. driver attempts to send the cmd
    ==> use-after-free
    
    In order to fix that, add ctrl state check to validate the ctrl
    is actually able to accept the AER submission.
    
    This addresses the above race in controller resets because the driver
    during teardown should:
    1. change ctrl state to RESETTING
    2. flush async_event_work (as well as other async work elements)
    
    So after 1,2, any other AER command will find the
    ctrl state to be RESETTING and bail out without submitting the AER.
    
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe9ac3eaa2e387a5742b380b73a5a6bc237bf184
Author: John Garry <john.garry@huawei.com>
Date:   Thu Jan 27 21:12:52 2022 +0800

    scsi: pm8001: Fix use-after-free for aborted SSP/STP sas_task
    
    [ Upstream commit df7abcaa1246e2537ab4016077b5443bb3c09378 ]
    
    Currently a use-after-free may occur if a sas_task is aborted by the upper
    layer before we handle the I/O completion in mpi_ssp_completion() or
    mpi_sata_completion().
    
    In this case, the following are the two steps in handling those I/O
    completions:
    
     - Call complete() to inform the upper layer handler of completion of
       the I/O.
    
     - Release driver resources associated with the sas_task in
       pm8001_ccb_task_free() call.
    
    When complete() is called, the upper layer may free the sas_task. As such,
    we should not touch the associated sas_task afterwards, but we do so in the
    pm8001_ccb_task_free() call.
    
    Fix by swapping the complete() and pm8001_ccb_task_free() calls ordering.
    
    Link: https://lore.kernel.org/r/1643289172-165636-4-git-send-email-john.garry@huawei.com
    Reviewed-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d872e7b5fe38f325f5206b6872746fa02c2b4819
Author: John Garry <john.garry@huawei.com>
Date:   Thu Jan 27 21:12:51 2022 +0800

    scsi: pm8001: Fix use-after-free for aborted TMF sas_task
    
    [ Upstream commit 61f162aa4381845acbdc7f2be4dfb694d027c018 ]
    
    Currently a use-after-free may occur if a TMF sas_task is aborted before we
    handle the IO completion in mpi_ssp_completion(). The abort occurs due to
    timeout.
    
    When the timeout occurs, the SAS_TASK_STATE_ABORTED flag is set and the
    sas_task is freed in pm8001_exec_internal_tmf_task().
    
    However, if the I/O completion occurs later, the I/O completion still
    thinks that the sas_task is available. Fix this by clearing the ccb->task
    if the TMF times out - the I/O completion handler does nothing if this
    pointer is cleared.
    
    Link: https://lore.kernel.org/r/1643289172-165636-3-git-send-email-john.garry@huawei.com
    Reviewed-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e73f5cfc160d0f04b8e40d40fe23004f54e1f52
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Sun Jan 30 08:53:16 2022 -0800

    quota: make dquot_quota_sync return errors from ->sync_fs
    
    [ Upstream commit dd5532a4994bfda0386eb2286ec00758cee08444 ]
    
    Strangely, dquot_quota_sync ignores the return code from the ->sync_fs
    call, which means that quotacalls like Q_SYNC never see the error.  This
    doesn't seem right, so fix that.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c405640aad56e8e203b18beea0d0e7b9efc4eaab
Author: Darrick J. Wong <djwong@kernel.org>
Date:   Sun Jan 30 08:53:16 2022 -0800

    vfs: make freeze_super abort when sync_filesystem returns error
    
    [ Upstream commit 2719c7160dcfaae1f73a1c0c210ad3281c19022e ]
    
    If we fail to synchronize the filesystem while preparing to freeze the
    fs, abort the freeze.
    
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9a229fd48bfa45edb954c75a57e3931a3da6c5f
Author: Duoming Zhou <duoming@zju.edu.cn>
Date:   Fri Jan 28 12:47:15 2022 +0800

    ax25: improve the incomplete fix to avoid UAF and NPD bugs
    
    [ Upstream commit 4e0f718daf97d47cf7dec122da1be970f145c809 ]
    
    The previous commit 1ade48d0c27d ("ax25: NPD bug when detaching
    AX25 device") introduce lock_sock() into ax25_kill_by_device to
    prevent NPD bug. But the concurrency NPD or UAF bug will occur,
    when lock_sock() or release_sock() dereferences the ax25_cb->sock.
    
    The NULL pointer dereference bug can be shown as below:
    
    ax25_kill_by_device()        | ax25_release()
                                 |   ax25_destroy_socket()
                                 |     ax25_cb_del()
      ...                        |     ...
                                 |     ax25->sk=NULL;
      lock_sock(s->sk); //(1)    |
      s->ax25_dev = NULL;        |     ...
      release_sock(s->sk); //(2) |
      ...                        |
    
    The root cause is that the sock is set to null before dereference
    site (1) or (2). Therefore, this patch extracts the ax25_cb->sock
    in advance, and uses ax25_list_lock to protect it, which can synchronize
    with ax25_cb_del() and ensure the value of sock is not null before
    dereference sites.
    
    The concurrency UAF bug can be shown as below:
    
    ax25_kill_by_device()        | ax25_release()
                                 |   ax25_destroy_socket()
      ...                        |   ...
                                 |   sock_put(sk); //FREE
      lock_sock(s->sk); //(1)    |
      s->ax25_dev = NULL;        |   ...
      release_sock(s->sk); //(2) |
      ...                        |
    
    The root cause is that the sock is released before dereference
    site (1) or (2). Therefore, this patch uses sock_hold() to increase
    the refcount of sock and uses ax25_list_lock to protect it, which
    can synchronize with ax25_cb_del() in ax25_destroy_socket() and
    ensure the sock wil not be released before dereference sites.
    
    Signed-off-by: Duoming Zhou <duoming@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 139fce2992ee88528714a56aaee7c45dd1ec7f7a
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Jan 26 10:27:19 2022 +0000

    selftests: skip mincore.check_file_mmap when fs lacks needed support
    
    [ Upstream commit dae1d8ac31896988e7313384c0370176a75e9b45 ]
    
    Report mincore.check_file_mmap as SKIP instead of FAIL if the underlying
    filesystem lacks support of O_TMPFILE or fallocate since such failures
    are not really related to mincore functionality.
    
    Cc: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 204a2390da42759da2b5bc42c40878609f3c329b
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Jan 26 10:27:23 2022 +0000

    selftests: openat2: Skip testcases that fail with EOPNOTSUPP
    
    [ Upstream commit ac9e0a250bb155078601a5b999aab05f2a04d1ab ]
    
    Skip testcases that fail since the requested valid flags combination is not
    supported by the underlying filesystem.
    
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2be48bfac71313d26293301ebeb5b33da24c13f7
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Jan 26 10:27:22 2022 +0000

    selftests: openat2: Add missing dependency in Makefile
    
    [ Upstream commit ea3396725aa143dd42fe388cb67e44c90d2fb719 ]
    
    Add a dependency on header helpers.h to the main target; while at that add
    to helpers.h also a missing include for bool types.
    
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74a30666b4b53bb4b54c2e5eafabde6eb8bf3f55
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Jan 26 10:27:21 2022 +0000

    selftests: openat2: Print also errno in failure messages
    
    [ Upstream commit e051cdf655fa016692008a446a060eff06222bb5 ]
    
    In E_func() macro, on error, print also errno in order to aid debugging.
    
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfc84cfd909b2611806066699b7aca656b4f38e2
Author: Yang Xu <xuyang2018.jy@fujitsu.com>
Date:   Thu Jan 27 17:11:37 2022 +0800

    selftests/zram: Adapt the situation that /dev/zram0 is being used
    
    [ Upstream commit 01dabed20573804750af5c7bf8d1598a6bf7bf6e ]
    
    If zram-generator package is installed and works, then we can not remove
    zram module because zram swap is being used. This case needs a clean zram
    environment, change this test by using hot_add/hot_remove interface. So
    even zram device is being used, we still can add zram device and remove
    them in cleanup.
    
    The two interface was introduced since kernel commit 6566d1a32bf7("zram:
    add dynamic device add/remove functionality") in v4.2-rc1. If kernel
    supports these two interface, we use hot_add/hot_remove to slove this
    problem, if not, just check whether zram is being used or built in, then
    skip it on old kernel.
    
    Signed-off-by: Yang Xu <xuyang2018.jy@fujitsu.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0eba714c11d1011aeb1d2afcac0d4051a742c4d
Author: Yang Xu <xuyang2018.jy@fujitsu.com>
Date:   Thu Jan 27 17:11:36 2022 +0800

    selftests/zram01.sh: Fix compression ratio calculation
    
    [ Upstream commit d18da7ec3719559d6e74937266d0416e6c7e0b31 ]
    
    zram01 uses `free -m` to measure zram memory usage. The results are no
    sense because they are polluted by all running processes on the system.
    
    We Should only calculate the free memory delta for the current process.
    So use the third field of /sys/block/zram<id>/mm_stat to measure memory
    usage instead. The file is available since kernel 4.1.
    
    orig_data_size(first): uncompressed size of data stored in this disk.
    compr_data_size(second): compressed size of data stored in this disk
    mem_used_total(third): the amount of memory allocated for this disk
    
    Also remove useless zram cleanup call in zram_fill_fs and so we don't
    need to cleanup zram twice if fails.
    
    Signed-off-by: Yang Xu <xuyang2018.jy@fujitsu.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bb704b69fb1da36ea8adcb5163570467e848535
Author: Yang Xu <xuyang2018.jy@fujitsu.com>
Date:   Thu Jan 27 17:11:35 2022 +0800

    selftests/zram: Skip max_comp_streams interface on newer kernel
    
    [ Upstream commit fc4eb486a59d70bd35cf1209f0e68c2d8b979193 ]
    
    Since commit 43209ea2d17a ("zram: remove max_comp_streams internals"), zram
    has switched to per-cpu streams. Even kernel still keep this interface for
    some reasons, but writing to max_comp_stream doesn't take any effect. So
    skip it on newer kernel ie 4.7.
    
    The code that comparing kernel version is from xfstests testsuite ext4/053.
    
    Signed-off-by: Yang Xu <xuyang2018.jy@fujitsu.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fd484644c68897c490a3307bfcc8bf767df5a43
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Jan 25 13:14:23 2022 +0100

    net: ieee802154: at86rf230: Stop leaking skb's
    
    [ Upstream commit e5ce576d45bf72fd0e3dc37eff897bfcc488f6a9 ]
    
    Upon error the ieee802154_xmit_complete() helper is not called. Only
    ieee802154_wake_queue() is called manually. In the Tx case we then leak
    the skb structure.
    
    Free the skb structure upon error before returning when appropriate.
    
    As the 'is_tx = 0' cannot be moved in the complete handler because of a
    possible race between the delay in switching to STATE_RX_AACK_ON and a
    new interrupt, we introduce an intermediate 'was_tx' boolean just for
    this purpose.
    
    There is no Fixes tag applying here, many changes have been made on this
    area and the issue kind of always existed.
    
    Suggested-by: Alexander Aring <alex.aring@gmail.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Acked-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20220125121426.848337-4-miquel.raynal@bootlin.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c18a751930cd88fbc4c110aab89ee6ba3ce710d
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Fri Dec 17 17:29:55 2021 +0800

    kselftest: signal all child processes
    
    [ Upstream commit 92d25637a3a45904292c93f1863c6bbda4e3e38f ]
    
    We have some many cases that will create child process as well, such as
    pidfd_wait. Previously, we will signal/kill the parent process when it
    is time out, but this signal will not be sent to its child process. In
    such case, if child process doesn't terminate itself, ksefltest framework
    will hang forever.
    
    Here we group all its child processes so that kill() can signal all of
    them in timeout.
    
    Fixed change log: Shuah Khan <skhan@linuxfoundation.org>
    
    Suggested-by: yang xu <xuyang2018.jy@cn.fujitsu.com>
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1136141f19ab3a53bdbb30e178dd0a8b5f6debc2
Author: Nícolas F. R. A. Prado <nfraprado@collabora.com>
Date:   Wed Jan 12 14:41:42 2022 -0500

    selftests: rtc: Increase test timeout so that all tests run
    
    [ Upstream commit f034cc1301e7d83d4ec428dd6b8ffb57ca446efb ]
    
    The timeout setting for the rtc kselftest is currently 90 seconds. This
    setting is used by the kselftest runner to stop running a test if it
    takes longer than the assigned value.
    
    However, two of the test cases inside rtc set alarms. These alarms are
    set to the next beginning of the minute, so each of these test cases may
    take up to, in the worst case, 60 seconds.
    
    In order to allow for all test cases in rtc to run, even in the worst
    case, when using the kselftest runner, the timeout value should be
    increased to at least 120. Set it to 180, so there's some additional
    slack.
    
    Correct operation can be tested by running the following command right
    after the start of a minute (low second count), and checking that all
    test cases run:
    
            ./run_kselftest.sh -c rtc
    
    Signed-off-by: Nícolas F. R. A. Prado <nfraprado@collabora.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79175b6ee658fa0c4bd8f2a45de301c8f1d5f754
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Tue Jan 11 18:25:21 2022 -0800

    platform/x86: ISST: Fix possible circular locking dependency detected
    
    [ Upstream commit 17da2d5f93692086dd096a975225ffd5622d0bf8 ]
    
    As reported:
    
    [  256.104522] ======================================================
    [  256.113783] WARNING: possible circular locking dependency detected
    [  256.120093] 5.16.0-rc6-yocto-standard+ #99 Not tainted
    [  256.125362] ------------------------------------------------------
    [  256.131673] intel-speed-sel/844 is trying to acquire lock:
    [  256.137290] ffffffffc036f0d0 (punit_misc_dev_lock){+.+.}-{3:3}, at: isst_if_open+0x18/0x90 [isst_if_common]
    [  256.147171]
    [  256.147171] but task is already holding lock:
    [  256.153135] ffffffff8ee7cb50 (misc_mtx){+.+.}-{3:3}, at: misc_open+0x2a/0x170
    [  256.160407]
    [  256.160407] which lock already depends on the new lock.
    [  256.160407]
    [  256.168712]
    [  256.168712] the existing dependency chain (in reverse order) is:
    [  256.176327]
    [  256.176327] -> #1 (misc_mtx){+.+.}-{3:3}:
    [  256.181946]        lock_acquire+0x1e6/0x330
    [  256.186265]        __mutex_lock+0x9b/0x9b0
    [  256.190497]        mutex_lock_nested+0x1b/0x20
    [  256.195075]        misc_register+0x32/0x1a0
    [  256.199390]        isst_if_cdev_register+0x65/0x180 [isst_if_common]
    [  256.205878]        isst_if_probe+0x144/0x16e [isst_if_mmio]
    ...
    [  256.241976]
    [  256.241976] -> #0 (punit_misc_dev_lock){+.+.}-{3:3}:
    [  256.248552]        validate_chain+0xbc6/0x1750
    [  256.253131]        __lock_acquire+0x88c/0xc10
    [  256.257618]        lock_acquire+0x1e6/0x330
    [  256.261933]        __mutex_lock+0x9b/0x9b0
    [  256.266165]        mutex_lock_nested+0x1b/0x20
    [  256.270739]        isst_if_open+0x18/0x90 [isst_if_common]
    [  256.276356]        misc_open+0x100/0x170
    [  256.280409]        chrdev_open+0xa5/0x1e0
    ...
    
    The call sequence suggested that misc_device /dev file can be opened
    before misc device is yet to be registered, which is done only once.
    
    Here punit_misc_dev_lock was used as common lock, to protect the
    registration by multiple ISST HW drivers, one time setup, prevent
    duplicate registry of misc device and prevent load/unload when device
    is open.
    
    We can split into locks:
    - One which just prevent duplicate call to misc_register() and one
    time setup. Also never call again if the misc_register() failed or
    required one time setup is failed. This lock is not shared with
    any misc device callbacks.
    
    - The other lock protects registry, load and unload of HW drivers.
    
    Sequence in isst_if_cdev_register()
    - Register callbacks under punit_misc_dev_open_lock
    - Call isst_misc_reg() which registers misc_device on the first
    registry which is under punit_misc_dev_reg_lock, which is not
    shared with callbacks.
    
    Sequence in isst_if_cdev_unregister
    Just opposite of isst_if_cdev_register
    
    Reported-and-tested-by: Liwei Song <liwei.song@windriver.com>
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Link: https://lore.kernel.org/r/20220112022521.54669-1-srinivas.pandruvada@linux.intel.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 066c905ed06c3a6895ddafcd177b7657a9350ff4
Author: Yuka Kawajiri <yukx00@gmail.com>
Date:   Wed Jan 12 00:40:21 2022 +0900

    platform/x86: touchscreen_dmi: Add info for the RWC NANOTE P8 AY07J 2-in-1
    
    [ Upstream commit 512eb73cfd1208898cf10cb06094e0ee0bb53b58 ]
    
    Add touchscreen info for RWC NANOTE P8 (AY07J) 2-in-1.
    
    Signed-off-by: Yuka Kawajiri <yukx00@gmail.com>
    Link: https://lore.kernel.org/r/20220111154019.4599-1-yukx00@gmail.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b17d4b51c6311469a6498e0215f43a4008f156c
Author: Dāvis Mosāns <davispuh@gmail.com>
Date:   Sat Feb 5 20:48:23 2022 +0200

    btrfs: send: in case of IO error log it
    
    commit 2e7be9db125a0bf940c5d65eb5c40d8700f738b5 upstream.
    
    Currently if we get IO error while doing send then we abort without
    logging information about which file caused issue.  So log it to help
    with debugging.
    
    CC: stable@vger.kernel.org # 4.9+
    Signed-off-by: Dāvis Mosāns <davispuh@gmail.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78a68bbebdcc34314600764fce0c11d8679e1ceb
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Feb 7 17:16:39 2022 +0200

    parisc: Add ioread64_lo_hi() and iowrite64_lo_hi()
    
    commit 18a1d5e1945385d9b5adc3fe11427ce4a9d2826e upstream.
    
    It's a followup to the previous commit f15309d7ad5d ("parisc: Add
    ioread64_hi_lo() and iowrite64_hi_lo()") which does only half of
    the job. Add the rest, so we won't get a new kernel test robot
    reports.
    
    Fixes: f15309d7ad5d ("parisc: Add ioread64_hi_lo() and iowrite64_hi_lo()")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ade1077c7fc054d1207ed6fbf3787f921af95814
Author: Long Li <longli@microsoft.com>
Date:   Wed Jan 26 17:43:34 2022 -0800

    PCI: hv: Fix NUMA node assignment when kernel boots with custom NUMA topology
    
    commit 3149efcdf2c6314420c418dfc94de53bfd076b1f upstream.
    
    When kernel boots with a NUMA topology with some NUMA nodes offline, the PCI
    driver should only set an online NUMA node on the device. This can happen
    during KDUMP where some NUMA nodes are not made online by the KDUMP kernel.
    
    This patch also fixes the case where kernel is booting with "numa=off".
    
    Fixes: 999dd956d838 ("PCI: hv: Add support for protocol 1.3 and support PCI_BUS_RELATIONS2")
    Signed-off-by: Long Li <longli@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Tested-by: Purna Pavan Chandra Aekkaladevi <paekkaladevi@microsoft.com>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Link: https://lore.kernel.org/r/1643247814-15184-1-git-send-email-longli@linuxonhyperv.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 254090925e16abd914c87b4ad1b489440d89c4c3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 17 08:57:47 2022 -0800

    mm: don't try to NUMA-migrate COW pages that have other uses
    
    commit 80d47f5de5e311cbc0d01ebb6ee684e8f4c196c6 upstream.
    
    Oded Gabbay reports that enabling NUMA balancing causes corruption with
    his Gaudi accelerator test load:
    
     "All the details are in the bug, but the bottom line is that somehow,
      this patch causes corruption when the numa balancing feature is
      enabled AND we don't use process affinity AND we use GUP to pin pages
      so our accelerator can DMA to/from system memory.
    
      Either disabling numa balancing, using process affinity to bind to
      specific numa-node or reverting this patch causes the bug to
      disappear"
    
    and Oded bisected the issue to commit 09854ba94c6a ("mm: do_wp_page()
    simplification").
    
    Now, the NUMA balancing shouldn't actually be changing the writability
    of a page, and as such shouldn't matter for COW.  But it appears it
    does.  Suspicious.
    
    However, regardless of that, the condition for enabling NUMA faults in
    change_pte_range() is nonsensical.  It uses "page_mapcount(page)" to
    decide if a COW page should be NUMA-protected or not, and that makes
    absolutely no sense.
    
    The number of mappings a page has is irrelevant: not only does GUP get a
    reference to a page as in Oded's case, but the other mappings migth be
    paged out and the only reference to them would be in the page count.
    
    Since we should never try to NUMA-balance a page that we can't move
    anyway due to other references, just fix the code to use 'page_count()'.
    Oded confirms that that fixes his issue.
    
    Now, this does imply that something in NUMA balancing ends up changing
    page protections (other than the obvious one of making the page
    inaccessible to get the NUMA faulting information).  Otherwise the COW
    simplification wouldn't matter - since doing the GUP on the page would
    make sure it's writable.
    
    The cause of that permission change would be good to figure out too,
    since it clearly results in spurious COW events - but fixing the
    nonsensical test that just happened to work before is obviously the
    CorrectThing(tm) to do regardless.
    
    Fixes: 09854ba94c6a ("mm: do_wp_page() simplification")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215616
    Link: https://lore.kernel.org/all/CAFCwf10eNmwq2wD71xjUhqkvv5+_pJMR1nPug2RqNDcFT4H86Q@mail.gmail.com/
    Reported-and-tested-by: Oded Gabbay <oded.gabbay@gmail.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Peter Xu <peterx@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab2b4e65a130d67478bd5b35ca9004b2075805fa
Author: Christian Löhle <CLoehle@hyperstone.com>
Date:   Fri Feb 4 15:11:37 2022 +0000

    mmc: block: fix read single on recovery logic
    
    commit 54309fde1a352ad2674ebba004a79f7d20b9f037 upstream.
    
    On reads with MMC_READ_MULTIPLE_BLOCK that fail,
    the recovery handler will use MMC_READ_SINGLE_BLOCK for
    each of the blocks, up to MMC_READ_SINGLE_RETRIES times each.
    The logic for this is fixed to never report unsuccessful reads
    as success to the block layer.
    
    On command error with retries remaining, blk_update_request was
    called with whatever value error was set last to.
    In case it was last set to BLK_STS_OK (default), the read will be
    reported as success, even though there was no data read from the device.
    This could happen on a CRC mismatch for the response,
    a card rejecting the command (e.g. again due to a CRC mismatch).
    In case it was last set to BLK_STS_IOERR, the error is reported correctly,
    but no retries will be attempted.
    
    Fixes: 81196976ed946c ("mmc: block: Add blk-mq support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian Loehle <cloehle@hyperstone.com>
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/bc706a6ab08c4fe2834ba0c05a804672@hyperstone.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7756716872990ef8173e226f689c5cf17528ebdb
Author: John David Anglin <dave.anglin@bell.net>
Date:   Thu Jan 27 22:33:41 2022 +0000

    parisc: Fix sglist access in ccio-dma.c
    
    commit d7da660cab47183cded65e11b64497d0f56c6edf upstream.
    
    This patch implements the same bug fix to ccio-dma.c as to sba_iommu.c.
    It ensures that only the allocated entries of the sglist are accessed.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8f519d7df66c334b5e08f896ac70ee3b53add3b
Author: John David Anglin <dave.anglin@bell.net>
Date:   Wed Jan 26 20:39:05 2022 +0000

    parisc: Fix data TLB miss in sba_unmap_sg
    
    commit b7d6f44a0fa716a82969725516dc0b16bc7cd514 upstream.
    
    Rolf Eike Beer reported the following bug:
    
    [1274934.746891] Bad Address (null pointer deref?): Code=15 (Data TLB miss fault) at addr 0000004140000018
    [1274934.746891] CPU: 3 PID: 5549 Comm: cmake Not tainted 5.15.4-gentoo-parisc64 #4
    [1274934.746891] Hardware name: 9000/785/C8000
    [1274934.746891]
    [1274934.746891]      YZrvWESTHLNXBCVMcbcbcbcbOGFRQPDI
    [1274934.746891] PSW: 00001000000001001111111000001110 Not tainted
    [1274934.746891] r00-03  000000ff0804fe0e 0000000040bc9bc0 00000000406760e4 0000004140000000
    [1274934.746891] r04-07  0000000040b693c0 0000004140000000 000000004a2b08b0 0000000000000001
    [1274934.746891] r08-11  0000000041f98810 0000000000000000 000000004a0a7000 0000000000000001
    [1274934.746891] r12-15  0000000040bddbc0 0000000040c0cbc0 0000000040bddbc0 0000000040bddbc0
    [1274934.746891] r16-19  0000000040bde3c0 0000000040bddbc0 0000000040bde3c0 0000000000000007
    [1274934.746891] r20-23  0000000000000006 000000004a368950 0000000000000000 0000000000000001
    [1274934.746891] r24-27  0000000000001fff 000000000800000e 000000004a1710f0 0000000040b693c0
    [1274934.746891] r28-31  0000000000000001 0000000041f988b0 0000000041f98840 000000004a171118
    [1274934.746891] sr00-03  00000000066e5800 0000000000000000 0000000000000000 00000000066e5800
    [1274934.746891] sr04-07  0000000000000000 0000000000000000 0000000000000000 0000000000000000
    [1274934.746891]
    [1274934.746891] IASQ: 0000000000000000 0000000000000000 IAOQ: 00000000406760e8 00000000406760ec
    [1274934.746891]  IIR: 48780030    ISR: 0000000000000000  IOR: 0000004140000018
    [1274934.746891]  CPU:        3   CR30: 00000040e3a9c000 CR31: ffffffffffffffff
    [1274934.746891]  ORIG_R28: 0000000040acdd58
    [1274934.746891]  IAOQ[0]: sba_unmap_sg+0xb0/0x118
    [1274934.746891]  IAOQ[1]: sba_unmap_sg+0xb4/0x118
    [1274934.746891]  RP(r2): sba_unmap_sg+0xac/0x118
    [1274934.746891] Backtrace:
    [1274934.746891]  [<00000000402740cc>] dma_unmap_sg_attrs+0x6c/0x70
    [1274934.746891]  [<000000004074d6bc>] scsi_dma_unmap+0x54/0x60
    [1274934.746891]  [<00000000407a3488>] mptscsih_io_done+0x150/0xd70
    [1274934.746891]  [<0000000040798600>] mpt_interrupt+0x168/0xa68
    [1274934.746891]  [<0000000040255a48>] __handle_irq_event_percpu+0xc8/0x278
    [1274934.746891]  [<0000000040255c34>] handle_irq_event_percpu+0x3c/0xd8
    [1274934.746891]  [<000000004025ecb4>] handle_percpu_irq+0xb4/0xf0
    [1274934.746891]  [<00000000402548e0>] generic_handle_irq+0x50/0x70
    [1274934.746891]  [<000000004019a254>] call_on_stack+0x18/0x24
    [1274934.746891]
    [1274934.746891] Kernel panic - not syncing: Bad Address (null pointer deref?)
    
    The bug is caused by overrunning the sglist and incorrectly testing
    sg_dma_len(sglist) before nents. Normally this doesn't cause a crash,
    but in this case sglist crossed a page boundary. This occurs in the
    following code:
    
            while (sg_dma_len(sglist) && nents--) {
    
    The fix is simply to test nents first and move the decrement of nents
    into the loop.
    
    Reported-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d569b959e54fee219847468310680de3bbe4929
Author: John David Anglin <dave.anglin@bell.net>
Date:   Sat Jan 22 18:19:49 2022 +0000

    parisc: Drop __init from map_pages declaration
    
    commit 9129886b88185962538180625ca8051362b01327 upstream.
    
    With huge kernel pages, we randomly eat a SPARC in map_pages(). This
    is fixed by dropping __init from the declaration.
    
    However, map_pages references the __init routine memblock_alloc_try_nid
    via memblock_alloc.  Thus, it needs to be marked with __ref.
    
    memblock_alloc is only called before the kernel text is set to readonly.
    
    The __ref on free_initmem is no longer needed.
    
    Comment regarding map_pages being in the init section is removed.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e3f9a098eca65d60c5d312288b3709d3befef0b
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Feb 14 10:00:19 2022 -0800

    serial: parisc: GSC: fix build when IOSAPIC is not set
    
    commit 6e8793674bb0d1135ca0e5c9f7e16fecbf815926 upstream.
    
    There is a build error when using a kernel .config file from
    'kernel test robot' for a different build problem:
    
    hppa64-linux-ld: drivers/tty/serial/8250/8250_gsc.o: in function `.LC3':
    (.data.rel.ro+0x18): undefined reference to `iosapic_serial_irq'
    
    when:
      CONFIG_GSC=y
      CONFIG_SERIO_GSCPS2=y
      CONFIG_SERIAL_8250_GSC=y
      CONFIG_PCI is not set
        and hence PCI_LBA is not set.
      IOSAPIC depends on PCI_LBA, so IOSAPIC is not set/enabled.
    
    Make the use of iosapic_serial_irq() conditional to fix the build error.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: "James E.J. Bottomley" <James.Bottomley@HansenPartnership.com>
    Cc: Helge Deller <deller@gmx.de>
    Cc: linux-parisc@vger.kernel.org
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: linux-serial@vger.kernel.org
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Johan Hovold <johan@kernel.org>
    Suggested-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe383750d40d43d74ffc63f2d695c6f7b9901ff3
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Feb 4 21:41:55 2022 +0000

    Revert "svm: Add warning message for AVIC IPI invalid target"
    
    commit dd4589eee99db8f61f7b8f7df1531cad3f74a64d upstream.
    
    Remove a WARN on an "AVIC IPI invalid target" exit, the WARN is trivial
    to trigger from guest as it will fail on any destination APIC ID that
    doesn't exist from the guest's perspective.
    
    Don't bother recording anything in the kernel log, the common tracepoint
    for kvm_avic_incomplete_ipi() is sufficient for debugging.
    
    This reverts commit 37ef0c4414c9743ba7f1af4392f0a27a99649f2a.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20220204214205.3306634-2-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 126382b5565f6559f7c1f0e530654c7710f14a5d
Author: Sergio Costas <rastersoft@gmail.com>
Date:   Fri Feb 4 10:01:17 2022 +0100

    HID:Add support for UGTABLET WP5540
    
    commit fd5dd6acd8f823ea804f76d3af64fa1be9d5fb78 upstream.
    
    This patch adds support for the UGTABLET WP5540 digitizer tablet
    devices. Without it, the pen moves the cursor, but neither the
    buttons nor the tap sensor in the tip do work.
    
    Signed-off-by: Sergio Costas <rastersoft@gmail.com>
    Link: https://lore.kernel.org/r/63dece1d-91ca-1b1b-d90d-335be66896be@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f100e758cef51917c517d7e6ddea29c899ccd52c
Author: James Smart <jsmart2021@gmail.com>
Date:   Tue Sep 21 07:30:08 2021 -0700

    scsi: lpfc: Fix mailbox command failure during driver initialization
    
    commit efe1dc571a5b808baa26682eef16561be2e356fd upstream.
    
    Contention for the mailbox interface may occur during driver initialization
    (immediately after a function reset), between mailbox commands initiated
    via ioctl (bsg) and those driver requested by the driver.
    
    After setting SLI_ACTIVE flag for a port, there is a window in which the
    driver will allow an ioctl to be initiated while the adapter is
    initializing and issuing mailbox commands via polling. The polling logic
    then gets confused.
    
    Correct by having thread setting SLI_ACTIVE spot an active mailbox command
    and allow it complete before proceeding.
    
    Link: https://lore.kernel.org/r/20210921143008.64212-1-jsmart2021@gmail.com
    Co-developed-by: Nigel Kirkland <nkirkland2304@gmail.com>
    Signed-off-by: Nigel Kirkland <nkirkland2304@gmail.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4578b979ef61bbda8ea594899110e983c2c0fa00
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Sun Dec 6 15:47:31 2020 +0100

    can: isotp: add SF_BROADCAST support for functional addressing
    
    commit 921ca574cd382142add8b12d0a7117f495510de5 upstream.
    
    When CAN_ISOTP_SF_BROADCAST is set in the CAN_ISOTP_OPTS flags the CAN_ISOTP
    socket is switched into functional addressing mode, where only single frame
    (SF) protocol data units can be send on the specified CAN interface and the
    given tp.tx_id after bind().
    
    In opposite to normal and extended addressing this socket does not register a
    CAN-ID for reception which would be needed for a 1-to-1 ISOTP connection with a
    segmented bi-directional data transfer.
    
    Sending SFs on this socket is therefore a TX-only 'broadcast' operation.
    
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Thomas Wagner <thwa1@web.de>
    Link: https://lore.kernel.org/r/20201206144731.4609-1-socketcan@hartkopp.net
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d42865fc311af63785c9aa45ca30d1717c1c653
Author: Norbert Slusarek <nslusarek@gmx.net>
Date:   Wed May 12 00:43:54 2021 +0200

    can: isotp: prevent race between isotp_bind() and isotp_setsockopt()
    
    commit 2b17c400aeb44daf041627722581ade527bb3c1d upstream.
    
    A race condition was found in isotp_setsockopt() which allows to
    change socket options after the socket was bound.
    For the specific case of SF_BROADCAST support, this might lead to possible
    use-after-free because can_rx_unregister() is not called.
    
    Checking for the flag under the socket lock in isotp_bind() and taking
    the lock in isotp_setsockopt() fixes the issue.
    
    Fixes: 921ca574cd38 ("can: isotp: add SF_BROADCAST support for functional addressing")
    Link: https://lore.kernel.org/r/trinity-e6ae9efa-9afb-4326-84c0-f3609b9b8168-1620773528307@3c-app-gmx-bs06
    Reported-by: Norbert Slusarek <nslusarek@gmx.net>
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Norbert Slusarek <nslusarek@gmx.net>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db3f3636e4aed2cba3e4e7897a053323f7a62249
Author: Yang Shi <shy828301@gmail.com>
Date:   Fri Feb 11 16:32:26 2022 -0800

    fs/proc: task_mmu.c: don't read mapcount for migration entry
    
    commit 24d7275ce2791829953ed4e72f68277ceb2571c6 upstream.
    
    The syzbot reported the below BUG:
    
      kernel BUG at include/linux/page-flags.h:785!
      invalid opcode: 0000 [#1] PREEMPT SMP KASAN
      CPU: 1 PID: 4392 Comm: syz-executor560 Not tainted 5.16.0-rc6-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      RIP: 0010:PageDoubleMap include/linux/page-flags.h:785 [inline]
      RIP: 0010:__page_mapcount+0x2d2/0x350 mm/util.c:744
      Call Trace:
        page_mapcount include/linux/mm.h:837 [inline]
        smaps_account+0x470/0xb10 fs/proc/task_mmu.c:466
        smaps_pte_entry fs/proc/task_mmu.c:538 [inline]
        smaps_pte_range+0x611/0x1250 fs/proc/task_mmu.c:601
        walk_pmd_range mm/pagewalk.c:128 [inline]
        walk_pud_range mm/pagewalk.c:205 [inline]
        walk_p4d_range mm/pagewalk.c:240 [inline]
        walk_pgd_range mm/pagewalk.c:277 [inline]
        __walk_page_range+0xe23/0x1ea0 mm/pagewalk.c:379
        walk_page_vma+0x277/0x350 mm/pagewalk.c:530
        smap_gather_stats.part.0+0x148/0x260 fs/proc/task_mmu.c:768
        smap_gather_stats fs/proc/task_mmu.c:741 [inline]
        show_smap+0xc6/0x440 fs/proc/task_mmu.c:822
        seq_read_iter+0xbb0/0x1240 fs/seq_file.c:272
        seq_read+0x3e0/0x5b0 fs/seq_file.c:162
        vfs_read+0x1b5/0x600 fs/read_write.c:479
        ksys_read+0x12d/0x250 fs/read_write.c:619
        do_syscall_x64 arch/x86/entry/common.c:50 [inline]
        do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
        entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The reproducer was trying to read /proc/$PID/smaps when calling
    MADV_FREE at the mean time.  MADV_FREE may split THPs if it is called
    for partial THP.  It may trigger the below race:
    
               CPU A                         CPU B
               -----                         -----
      smaps walk:                      MADV_FREE:
      page_mapcount()
        PageCompound()
                                       split_huge_page()
        page = compound_head(page)
        PageDoubleMap(page)
    
    When calling PageDoubleMap() this page is not a tail page of THP anymore
    so the BUG is triggered.
    
    This could be fixed by elevated refcount of the page before calling
    mapcount, but that would prevent it from counting migration entries, and
    it seems overkilling because the race just could happen when PMD is
    split so all PTE entries of tail pages are actually migration entries,
    and smaps_account() does treat migration entries as mapcount == 1 as
    Kirill pointed out.
    
    Add a new parameter for smaps_account() to tell this entry is migration
    entry then skip calling page_mapcount().  Don't skip getting mapcount
    for device private entries since they do track references with mapcount.
    
    Pagemap also has the similar issue although it was not reported.  Fixed
    it as well.
    
    [shy828301@gmail.com: v4]
      Link: https://lkml.kernel.org/r/20220203182641.824731-1-shy828301@gmail.com
    [nathan@kernel.org: avoid unused variable warning in pagemap_pmd_range()]
      Link: https://lkml.kernel.org/r/20220207171049.1102239-1-nathan@kernel.org
    Link: https://lkml.kernel.org/r/20220120202805.3369-1-shy828301@gmail.com
    Fixes: e9b61f19858a ("thp: reintroduce split_huge_page()")
    Signed-off-by: Yang Shi <shy828301@gmail.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reported-by: syzbot+1f52b3a18d5633fa7f82@syzkaller.appspotmail.com
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0849f83e4782c44969d12283995b8fcd4df0af20
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 10 14:00:15 2021 -0800

    fget: clarify and improve __fget_files() implementation
    
    commit e386dfc56f837da66d00a078e5314bc8382fab83 upstream.
    
    Commit 054aa8d439b9 ("fget: check that the fd still exists after getting
    a ref to it") fixed a race with getting a reference to a file just as it
    was being closed.  It was a fairly minimal patch, and I didn't think
    re-checking the file pointer lookup would be a measurable overhead,
    since it was all right there and cached.
    
    But I was wrong, as pointed out by the kernel test robot.
    
    The 'poll2' case of the will-it-scale.per_thread_ops benchmark regressed
    quite noticeably.  Admittedly it seems to be a very artificial test:
    doing "poll()" system calls on regular files in a very tight loop in
    multiple threads.
    
    That means that basically all the time is spent just looking up file
    descriptors without ever doing anything useful with them (not that doing
    'poll()' on a regular file is useful to begin with).  And as a result it
    shows the extra "re-check fd" cost as a sore thumb.
    
    Happily, the regression is fixable by just writing the code to loook up
    the fd to be better and clearer.  There's still a cost to verify the
    file pointer, but now it's basically in the noise even for that
    benchmark that does nothing else - and the code is more understandable
    and has better comments too.
    
    [ Side note: this patch is also a classic case of one that looks very
      messy with the default greedy Myers diff - it's much more legible with
      either the patience of histogram diff algorithm ]
    
    Link: https://lore.kernel.org/lkml/20211210053743.GA36420@xsang-OptiPlex-9020/
    Link: https://lore.kernel.org/lkml/20211213083154.GA20853@linux.intel.com/
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Tested-by: Carel Si <beibei.si@intel.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 657991fb06a4a1e423d1e9e82514dd35b8caccd8
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Fri Oct 30 13:11:24 2020 -0700

    rcu: Do not report strict GPs for outgoing CPUs
    
    commit bfb3aa735f82c8d98b32a669934ee7d6b346264d upstream.
    
    An outgoing CPU is marked offline in a stop-machine handler and most
    of that CPU's services stop at that point, including IRQ work queues.
    However, that CPU must take another pass through the scheduler and through
    a number of CPU-hotplug notifiers, many of which contain RCU readers.
    In the past, these readers were not a problem because the outgoing CPU
    has interrupts disabled, so that rcu_read_unlock_special() would not
    be invoked, and thus RCU would never attempt to queue IRQ work on the
    outgoing CPU.
    
    This changed with the advent of the CONFIG_RCU_STRICT_GRACE_PERIOD
    Kconfig option, in which rcu_read_unlock_special() is invoked upon exit
    from almost all RCU read-side critical sections.  Worse yet, because
    interrupts are disabled, rcu_read_unlock_special() cannot immediately
    report a quiescent state and will therefore attempt to defer this
    reporting, for example, by queueing IRQ work.  Which fails with a splat
    because the CPU is already marked as being offline.
    
    But it turns out that there is no need to report this quiescent state
    because rcu_report_dead() will do this job shortly after the outgoing
    CPU makes its final dive into the idle loop.  This commit therefore
    makes rcu_read_unlock_special() refrain from queuing IRQ work onto
    outgoing CPUs.
    
    Fixes: 44bad5b3cca2 ("rcu: Do full report for .need_qs for strict GPs")
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Cc: Jann Horn <jannh@google.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c8385972ea96adeb9b678c9390beaa4d94c4aae
Author: Roman Gushchin <guro@fb.com>
Date:   Fri Feb 11 16:32:32 2022 -0800

    mm: memcg: synchronize objcg lists with a dedicated spinlock
    
    commit 0764db9b49c932b89ee4d9e3236dff4bb07b4a66 upstream.
    
    Alexander reported a circular lock dependency revealed by the mmap1 ltp
    test:
    
      LOCKDEP_CIRCULAR (suite: ltp, case: mtest06 (mmap1))
              WARNING: possible circular locking dependency detected
              5.17.0-20220113.rc0.git0.f2211f194038.300.fc35.s390x+debug #1 Not tainted
              ------------------------------------------------------
              mmap1/202299 is trying to acquire lock:
              00000001892c0188 (css_set_lock){..-.}-{2:2}, at: obj_cgroup_release+0x4a/0xe0
              but task is already holding lock:
              00000000ca3b3818 (&sighand->siglock){-.-.}-{2:2}, at: force_sig_info_to_task+0x38/0x180
              which lock already depends on the new lock.
              the existing dependency chain (in reverse order) is:
              -> #1 (&sighand->siglock){-.-.}-{2:2}:
                     __lock_acquire+0x604/0xbd8
                     lock_acquire.part.0+0xe2/0x238
                     lock_acquire+0xb0/0x200
                     _raw_spin_lock_irqsave+0x6a/0xd8
                     __lock_task_sighand+0x90/0x190
                     cgroup_freeze_task+0x2e/0x90
                     cgroup_migrate_execute+0x11c/0x608
                     cgroup_update_dfl_csses+0x246/0x270
                     cgroup_subtree_control_write+0x238/0x518
                     kernfs_fop_write_iter+0x13e/0x1e0
                     new_sync_write+0x100/0x190
                     vfs_write+0x22c/0x2d8
                     ksys_write+0x6c/0xf8
                     __do_syscall+0x1da/0x208
                     system_call+0x82/0xb0
              -> #0 (css_set_lock){..-.}-{2:2}:
                     check_prev_add+0xe0/0xed8
                     validate_chain+0x736/0xb20
                     __lock_acquire+0x604/0xbd8
                     lock_acquire.part.0+0xe2/0x238
                     lock_acquire+0xb0/0x200
                     _raw_spin_lock_irqsave+0x6a/0xd8
                     obj_cgroup_release+0x4a/0xe0
                     percpu_ref_put_many.constprop.0+0x150/0x168
                     drain_obj_stock+0x94/0xe8
                     refill_obj_stock+0x94/0x278
                     obj_cgroup_charge+0x164/0x1d8
                     kmem_cache_alloc+0xac/0x528
                     __sigqueue_alloc+0x150/0x308
                     __send_signal+0x260/0x550
                     send_signal+0x7e/0x348
                     force_sig_info_to_task+0x104/0x180
                     force_sig_fault+0x48/0x58
                     __do_pgm_check+0x120/0x1f0
                     pgm_check_handler+0x11e/0x180
              other info that might help us debug this:
               Possible unsafe locking scenario:
                     CPU0                    CPU1
                     ----                    ----
                lock(&sighand->siglock);
                                             lock(css_set_lock);
                                             lock(&sighand->siglock);
                lock(css_set_lock);
               *** DEADLOCK ***
              2 locks held by mmap1/202299:
               #0: 00000000ca3b3818 (&sighand->siglock){-.-.}-{2:2}, at: force_sig_info_to_task+0x38/0x180
               #1: 00000001892ad560 (rcu_read_lock){....}-{1:2}, at: percpu_ref_put_many.constprop.0+0x0/0x168
              stack backtrace:
              CPU: 15 PID: 202299 Comm: mmap1 Not tainted 5.17.0-20220113.rc0.git0.f2211f194038.300.fc35.s390x+debug #1
              Hardware name: IBM 3906 M04 704 (LPAR)
              Call Trace:
                dump_stack_lvl+0x76/0x98
                check_noncircular+0x136/0x158
                check_prev_add+0xe0/0xed8
                validate_chain+0x736/0xb20
                __lock_acquire+0x604/0xbd8
                lock_acquire.part.0+0xe2/0x238
                lock_acquire+0xb0/0x200
                _raw_spin_lock_irqsave+0x6a/0xd8
                obj_cgroup_release+0x4a/0xe0
                percpu_ref_put_many.constprop.0+0x150/0x168
                drain_obj_stock+0x94/0xe8
                refill_obj_stock+0x94/0x278
                obj_cgroup_charge+0x164/0x1d8
                kmem_cache_alloc+0xac/0x528
                __sigqueue_alloc+0x150/0x308
                __send_signal+0x260/0x550
                send_signal+0x7e/0x348
                force_sig_info_to_task+0x104/0x180
                force_sig_fault+0x48/0x58
                __do_pgm_check+0x120/0x1f0
                pgm_check_handler+0x11e/0x180
              INFO: lockdep is turned off.
    
    In this example a slab allocation from __send_signal() caused a
    refilling and draining of a percpu objcg stock, resulted in a releasing
    of another non-related objcg.  Objcg release path requires taking the
    css_set_lock, which is used to synchronize objcg lists.
    
    This can create a circular dependency with the sighandler lock, which is
    taken with the locked css_set_lock by the freezer code (to freeze a
    task).
    
    In general it seems that using css_set_lock to synchronize objcg lists
    makes any slab allocations and deallocation with the locked css_set_lock
    and any intervened locks risky.
    
    To fix the problem and make the code more robust let's stop using
    css_set_lock to synchronize objcg lists and use a new dedicated spinlock
    instead.
    
    Link: https://lkml.kernel.org/r/Yfm1IHmoGdyUR81T@carbon.dhcp.thefacebook.com
    Fixes: bf4f059954dc ("mm: memcg/slab: obj_cgroup API")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Reported-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Tested-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Reviewed-by: Waiman Long <longman@redhat.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Jeremy Linton <jeremy.linton@arm.com>
    Tested-by: Jeremy Linton <jeremy.linton@arm.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0f4aa2d978f3cc978d116f2ecae7e824c4c264e
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Thu Feb 25 14:54:59 2021 +1000

    drm/nouveau/pmu/gm200-: use alternate falcon reset sequence
    
    commit 4cdd2450bf739bada353e82d27b00db9af8c3001 upstream.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://gitlab.freedesktop.org/drm/nouveau/-/merge_requests/10
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
