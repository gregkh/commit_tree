commit cbe6c8d6575ab39b78589f6083a842b6a9185295
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Wed Dec 3 11:32:35 2014 +0100

    Linux 3.12.34

commit a05916f8ff7280e8539dac505bc3100212a3a098
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Nov 26 14:56:31 2014 -0600

    x86: kvm: use alternatives for VMCALL vs. VMMCALL if kernel text is read-only
    
    commit c1118b3602c2329671ad5ec8bdf8e374323d6343 upstream.
    
    On x86_64, kernel text mappings are mapped read-only with CONFIG_DEBUG_RODATA.
    In that case, KVM will fail to patch VMCALL instructions to VMMCALL
    as required on AMD processors.
    
    The failure mode is currently a divide-by-zero exception, which obviously
    is a KVM bug that has to be fixed.  However, picking the right instruction
    between VMCALL and VMMCALL will be faster and will help if you cannot upgrade
    the hypervisor.
    
    Reported-by: Chris Webb <chris@arachsys.com>
    Tested-by: Chris Webb <chris@arachsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: x86@kernel.org
    Acked-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Chris J Arges <chris.j.arges@canonical.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 7e3bea443c47e2f499d7547dbabafbaacfa2f8e6
Author: Fabian Frederick <fabf@skynet.be>
Date:   Mon Apr 14 09:39:01 2014 +0200

    fs/jfs/jfs_inode.c: atomically set inode->i_flags
    
    commit 24e4a0f3de21ad715c9235367e241554c64b9adb upstream.
    
    According to commit 5f16f3225b0624
    
    ext4: atomically set inode->i_flags in ext4_set_inode_flags()
    
    Signed-off-by: Fabian Frederick <fabf@skynet.be>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Cc: "Theodore Ts'o" <tytso@mit.edu>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit ec81c28104fd2198f076203be3d1bae5546e863f
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Mar 24 14:43:12 2014 -0400

    ext4: atomically set inode->i_flags in ext4_set_inode_flags()
    
    commit 5f16f3225b06242a9ee876f07c1c9b6ed36a22b6 upstream.
    
    Use cmpxchg() to atomically set i_flags instead of clearing out the
    S_IMMUTABLE, S_APPEND, etc. flags and then setting them from the
    EXT4_IMMUTABLE_FL, EXT4_APPEND_FL flags, since this opens up a race
    where an immutable file has the immutable flag cleared for a brief
    window of time.
    
    js: there is no change for ext4. This patch defines merely
        inode_set_flags for jffs in the next patch. I wonder why do we
        have both inode_set_flags and set_mask_bits? Looks like an
        improperly resolved merge conflict.
    
    Reported-by: John Sullivan <jsrhbz@kanargh.force9.co.uk>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 692f067fb661c39cc800ae7407ab655173ca2de2
Author: Qi Yong <qiyong@fc-cn.com>
Date:   Fri Aug 8 14:20:29 2014 -0700

    minix zmap block counts calculation fix
    
    commit 6d6747f85314687f72012ae85cde401db531e130 upstream.
    
    The original minix zmap blocks calculation was correct, in the formula of:
    
            sbi->s_nzones - sbi->s_firstdatazone + 1
    
    It is
    
            sp->s_zones - (sp->s_firstdatazone - 1)
    
    in the minix3 source code.
    
    But a later commit 016e8d44bc06 ("fs/minix: Verify bitmap block counts
    before mounting") has changed it unfortunately as:
    
      sbi->s_nzones - (sbi->s_firstdatazone + 1)
    
    This would show free blocks one block less than the real when the total
    data blocks are in "full zmap blocks plus one".
    
    This patch corrects that zmap blocks calculation and tidy a printk
    message while at it.
    
    Signed-off-by: Qi Yong <qiyong@fc-cn.com>
    Cc: Josh Boyer <jwboyer@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 0d68992fb4250d00a906ee886ec541a6afeab066
Author: Andreas Rohner <andreas.rohner@gmx.net>
Date:   Mon Oct 13 15:53:20 2014 -0700

    nilfs2: add missing blkdev_issue_flush() to nilfs_sync_fs()
    
    commit e2c7617ae36b27f97643bfa08aabe27e630c1a76 upstream.
    
    Under normal circumstances nilfs_sync_fs() writes out the super block,
    which causes a flush of the underlying block device.  But this depends
    on the THE_NILFS_SB_DIRTY flag, which is only set if the pointer to the
    last segment crosses a segment boundary.  So if only a small amount of
    data is written before the call to nilfs_sync_fs(), no flush of the
    block device occurs.
    
    In the above case an additional call to blkdev_issue_flush() is needed.
    To prevent unnecessary overhead, the new flag nilfs->ns_flushed_device
    is introduced, which is cleared whenever new logs are written and set
    whenever the block device is flushed.  For convenience the function
    nilfs_flush_device() is added, which contains the above logic.
    
    Signed-off-by: Andreas Rohner <andreas.rohner@gmx.net>
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@lab.ntt.co.jp>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 79a423edd0ce526b6a28fd1fed4478d0ecda03e0
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Feb 9 15:18:09 2014 -0500

    fix O_SYNC|O_APPEND syncing the wrong range on write()
    
    commit d311d79de305f1ada47cadd672e6ed1b28a949eb upstream.
    
    It actually goes back to 2004 ([PATCH] Concurrent O_SYNC write support)
    when sync_page_range() had been introduced; generic_file_write{,v}() correctly
    synced
            pos_after_write - written .. pos_after_write - 1
    but generic_file_aio_write() synced
            pos_before_write .. pos_before_write + written - 1
    instead.  Which is not the same thing with O_APPEND, obviously.
    A couple of years later correct variant had been killed off when
    everything switched to use of generic_file_aio_write().
    
    All users of generic_file_aio_write() are affected, and the same bug
    has been copied into other instances of ->aio_write().
    
    The fix is trivial; the only subtle point is that generic_write_sync()
    ought to be inlined to avoid calculations useless for the majority of
    calls.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit f39a6f3d592372cd369b6a04a8562f3e6f41ee47
Author: Jiri Bohac <jbohac@suse.cz>
Date:   Wed Nov 19 23:05:49 2014 +0100

    ipx: fix locking regression in ipx_sendmsg and ipx_recvmsg
    
    [ Upstream commit 01462405f0c093b2f8dfddafcadcda6c9e4c5cdf ]
    
    This fixes an old regression introduced by commit
    b0d0d915 (ipx: remove the BKL).
    
    When a recvmsg syscall blocks waiting for new data, no data can be sent on the
    same socket with sendmsg because ipx_recvmsg() sleeps with the socket locked.
    
    This breaks mars-nwe (NetWare emulator):
    - the ncpserv process reads the request using recvmsg
    - ncpserv forks and spawns nwconn
    - ncpserv calls a (blocking) recvmsg and waits for new requests
    - nwconn deadlocks in sendmsg on the same socket
    
    Commit b0d0d915 has simply replaced BKL locking with
    lock_sock/release_sock. Unlike now, BKL got unlocked while
    sleeping, so a blocking recvmsg did not block a concurrent
    sendmsg.
    
    Only keep the socket locked while actually working with the socket data and
    release it prior to calling skb_recv_datagram().
    
    Signed-off-by: Jiri Bohac <jbohac@suse.cz>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 416b05bc9db9b9cd48418391538478a438e762b3
Author: Mathias Krause <minipli@googlemail.com>
Date:   Wed Nov 19 18:05:26 2014 +0100

    pptp: fix stack info leak in pptp_getname()
    
    [ Upstream commit a5f6fc28d6e6cc379c6839f21820e62262419584 ]
    
    pptp_getname() only partially initializes the stack variable sa,
    particularly only fills the pptp part of the sa_addr union. The code
    thereby discloses 16 bytes of kernel stack memory via getsockname().
    
    Fix this by memset(0)'ing the union before.
    
    Cc: Dmitry Kozlov <xeb@mail.ru>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 6d986f090a2f895a0d3a3f42122402aa3d3427b7
Author: Martin Hauke <mardnh@gmx.de>
Date:   Sun Nov 16 19:55:25 2014 +0100

    qmi_wwan: Add support for HP lt4112 LTE/HSPA+ Gobi 4G Modem
    
    [ Upstream commit bb2bdeb83fb125c95e47fc7eca2a3e8f868e2a74 ]
    
    Added the USB VID/PID for the HP lt4112 LTE/HSPA+ Gobi 4G Modem (Huawei me906e)
    
    Signed-off-by: Martin Hauke <mardnh@gmx.de>
    Acked-by: Bj√∏rn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 0d55bc1cf51599a78ae3bb5182fa2eda1e9c0c7c
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Nov 15 02:11:59 2014 +0300

    ieee802154: fix error handling in ieee802154fake_probe()
    
    [ Upstream commit 8c2dd54485ccee7fc4086611e188478584758c8d ]
    
    In case of any failure ieee802154fake_probe() just calls unregister_netdev().
    But it does not look safe to unregister netdevice before it was registered.
    
    The patch implements straightforward resource deallocation in case of
    failure in ieee802154fake_probe().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 8cdc2cb0cfeeeac2fe600431fe7f41847c61f6f9
Author: Panu Matilainen <pmatilai@redhat.com>
Date:   Fri Nov 14 13:14:32 2014 +0200

    ipv4: Fix incorrect error code when adding an unreachable route
    
    [ Upstream commit 49dd18ba4615eaa72f15c9087dea1c2ab4744cf5 ]
    
    Trying to add an unreachable route incorrectly returns -ESRCH if
    if custom FIB rules are present:
    
    [root@localhost ~]# ip route add 74.125.31.199 dev eth0 via 1.2.3.4
    RTNETLINK answers: Network is unreachable
    [root@localhost ~]# ip rule add to 55.66.77.88 table 200
    [root@localhost ~]# ip route add 74.125.31.199 dev eth0 via 1.2.3.4
    RTNETLINK answers: No such process
    [root@localhost ~]#
    
    Commit 83886b6b636173b206f475929e58fac75c6f2446 ("[NET]: Change "not found"
    return value for rule lookup") changed fib_rules_lookup()
    to use -ESRCH as a "not found" code internally, but for user space it
    should be translated into -ENETUNREACH. Handle the translation centrally in
    ipv4-specific fib_lookup(), leaving the DECnet case alone.
    
    On a related note, commit b7a71b51ee37d919e4098cd961d59a883fd272d8
    ("ipv4: removed redundant conditional") removed a similar translation from
    ip_route_input_slow() prematurely AIUI.
    
    Fixes: b7a71b51ee37 ("ipv4: removed redundant conditional")
    Signed-off-by: Panu Matilainen <pmatilai@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 77256f4afd82ebda1bd5564709809bae22b58f41
Author: Vincent BENAYOUN <vincent.benayoun@trust-in-soft.com>
Date:   Thu Nov 13 13:47:26 2014 +0100

    inetdevice: fixed signed integer overflow
    
    [ Upstream commit 84bc88688e3f6ef843aa8803dbcd90168bb89faf ]
    
    There could be a signed overflow in the following code.
    
    The expression, (32-logmask) is comprised between 0 and 31 included.
    It may be equal to 31.
    In such a case the left shift will produce a signed integer overflow.
    According to the C99 Standard, this is an undefined behavior.
    A simple fix is to replace the signed int 1 with the unsigned int 1U.
    
    Signed-off-by: Vincent BENAYOUN <vincent.benayoun@trust-in-soft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 0bdeed7d131bf61214dbce110959925c13ac7be5
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Nov 16 13:19:32 2014 -0800

    sparc64: Fix constraints on swab helpers.
    
    [ Upstream commit 5a2b59d3993e8ca4f7788a48a23e5cb303f26954 ]
    
    We are reading the memory location, so we have to have a memory
    constraint in there purely for the sake of showing the data flow
    to the compiler.
    
    Reported-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 037e69291b28bb3c7ac303c8d743fca393a5532e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue May 6 17:52:26 2014 +0200

    pvpanic: Set high notifier priority
    
    commit 7939831eacd81fccbd7a956b30c7bb3abb9079db upstream.
    
    We've observed the missing pvpanic call at panic, and it turned out
    that this was blocked by the broken notifier of drm_fb_helper, where
    scheduling may be called during switching to the fb console.
    It's fairly difficult to fix the drm_fb problem and a quick fix isn't
    foreseen, a simpler solution for the missing pvpanic call would be
    just to call this earlier.
    
    In order to assure that, this patch sets a higher priority to pvpanic
    notifier_block.  Once when the issue of drm_fb is resolved, we can
    remove this priority again.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Matthew Garrett <matthew.garrett@nebula.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit f96abf0060149fbc2093c2de7f4dae9fbff20694
Author: Sergei Antonov <saproj@gmail.com>
Date:   Fri Jun 6 14:36:24 2014 -0700

    hfsplus: emit proper file type from readdir
    
    commit 97a62eaefdc196969e9d3857f65fc8a90ee1fe3c upstream.
    
    hfsplus_readdir() incorrectly returned DT_REG for symbolic links and
    special files.  Return DT_REG, DT_LNK, DT_FIFO, DT_CHR, DT_BLK, DT_SOCK,
    or DT_UNKNOWN according to mode field in catalog record.  Programs
    relying on information from readdir will now work correctly with HFS+.
    
    Signed-off-by: Sergei Antonov <saproj@gmail.com>
    Cc: Anton Altaparmakov <aia21@cam.ac.uk>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Vyacheslav Dubeyko <slava@dubeyko.com>
    Cc: Hin-Tak Leung <htl10@users.sourceforge.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 7357404a711a32bcade125a84a07edca78e71361
Author: Sougata Santra <sougata@tuxera.com>
Date:   Thu Apr 3 14:50:34 2014 -0700

    fs/hfsplus/extents.c: fix concurrent acess of alloc_blocks
    
    commit d7bdb996aef67ea24c62707ca4e29b07025e9683 upstream.
    
    Concurrent access to alloc_blocks in hfsplus_inode_info() is protected
    by extents_lock mutex.  This patch fixes two instances where
    alloc_blocks modification was not protected with this lock.
    
    This fixes possible allocation bitmap corruption in race conditions
    while extending and truncating files.
    
    [akpm@linux-foundation.org: take extents_lock before taking a copy of ->alloc_blocks]
    [akpm@linux-foundation.org: remove now-unused label `out']
    Signed-off-by: Sougata Santra <sougata@tuxera.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: Vyacheslav Dubeyko <slava@dubeyko.com>
    Cc: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 291e7f11b9028ac9e418e15ebae1d30a94b59382
Author: Vyacheslav Dubeyko <slava@dubeyko.com>
Date:   Mon Mar 3 15:38:35 2014 -0800

    hfsplus: fix remount issue
    
    commit bd2c00353286d63542a8a0896a8c747f7c880edd upstream.
    
    Current implementation of HFS+ driver has small issue with remount
    option.  Namely, for example, you are unable to remount from RO mode
    into RW mode by means of command "mount -o remount,rw /dev/loop0
    /mnt/hfsplus".  Trying to execute sequence of commands results in an
    error message:
    
      mount /dev/loop0 /mnt/hfsplus
      mount -o remount,ro /dev/loop0 /mnt/hfsplus
      mount -o remount,rw /dev/loop0 /mnt/hfsplus
    
      mount: you must specify the filesystem type
    
      mount -t hfsplus -o remount,rw /dev/loop0 /mnt/hfsplus
    
      mount: /mnt/hfsplus not mounted or bad option
    
    The reason of such issue is failure of mount syscall:
    
      mount("/dev/loop0", "/mnt/hfsplus", 0x2282a60, MS_MGC_VAL|MS_REMOUNT, NULL) = -1 EINVAL (Invalid argument)
    
    Namely, hfsplus_parse_options_remount() method receives empty "input"
    argument and return false in such case.  As a result, hfsplus_remount()
    returns -EINVAL error code.
    
    This patch fixes the issue by means of return true for the case of empty
    "input" argument in hfsplus_parse_options_remount() method.
    
    Signed-off-by: Vyacheslav Dubeyko <slava@dubeyko.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit c5988e0e5c0858bc916f5a15a066cc0d3d614e93
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jan 23 15:54:07 2014 -0800

    drivers/vlynq/vlynq.c: fix another resource size off by 1 error
    
    commit 59d42cd43c7335a3a8081fd6ee54ea41b0c239be upstream.
    
    We fixed the call to request_mem_region() in commit 3354f73b24c6
    ("drivers/vlynq/vlynq.c: fix resource size off by 1 error").  But we
    need to fix the call the release_mem_region() as well.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Florian Fainelli <florian@openwrt.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 181bbf73ff2088b53b1c9978f372225689c8b6e2
Author: Martyn Welch <martyn.welch@ge.com>
Date:   Thu Feb 6 13:35:36 2014 +0000

    VME: Stop using memcpy_[to|from]io() due to unwanted behaviour
    
    commit a2a720e15f59be60c7ae1c58b5b4ac1003dd5078 upstream.
    
    The ca91cx42 and tsi148 VME bridges use the width of reads and writes on the
    PCI bus in part to control the width of the cycles on the VME bus. It is
    important that we can control the width of cycles on the VME bus as some VME
    hardware requires cycles of a specific width. The memcpy_toio() and
    memcpy_fromio() functions do not provide sufficient control, so instead loop
    using ioread functions.
    
    Reported-by: Michael Kenney <mfkenney@gmail.com>
    Signed-off-by: Martyn Welch <martyn.welch@ge.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit ff286b4678fd95286afef33e5b740a2e0d5f9983
Author: Joe Schultz <jschultz@xes-inc.com>
Date:   Thu Apr 3 14:47:55 2014 -0500

    vme_tsi148: Fix typo in tsi148_slave_get()
    
    commit 098ced8fefe4a4e4240fa47b1ed9b00d65b6cd21 upstream.
    
    This patch corrects a typo where "vme_base" was used instead of
    "*vme_base". The typo resulted in an incorrect value being returned
    to userspace (via vme_user).
    
    It also removes the following compile warning on some platforms:
    
    warning: cast from pointer to integer of different size
    
    [asierra: commit title/log rewording]
    Signed-off-by: Joe Schultz <jschultz@xes-inc.com>
    Signed-off-by: Aaron Sierra <asierra@xes-inc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 8a8f33b2f640e1e7d0486888293817f56505aa4f
Author: Joe Schultz <jschultz@xes-inc.com>
Date:   Thu Apr 3 14:48:16 2014 -0500

    vme_tsi148: Fix PCI address mapping assumption
    
    commit 226572b110ab6083cb8c1d6afb191166b4178179 upstream.
    
    Previously, tsi148_master_set() assumed the address contained in its
    PCI bus resource represented the actual PCI bus address. This is a fine
    assumption on some platforms. However, on platforms that don't use a
    1:1 (CPU:PCI) mapping this results in the tsi148 driver configuring an
    invalid master window translation.
    
    This patch updates the vme_tsi148 driver to first convert the address
    contained in the PCI bus resource into a PCI bus address before using
    it.
    
    [asierra: account for pcibios_resource_to_bus() prototype change]
    Signed-off-by: Joe Schultz <jschultz@xes-inc.com>
    Signed-off-by: Aaron Sierra <asierra@xes-inc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 8d6960fa02a523485d20ae8bd4bf3b6731f00937
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Sat May 24 15:24:51 2014 -0300

    parport: Add support for the WCH353 1S/1P multi-IO card
    
    commit feb5814254094c306429fe6d7b9c534fa0250f4c upstream.
    
    This Multi-IO card has one serial 16550-like and one parallel port connector.
    Here's the lspci output, after this commit is applied:
    
    03:07.0 Serial controller: Device 4348:5053 (rev 10) (prog-if 02 [16550])
            Subsystem: Device 4348:5053
            Control: I/O+ Mem- BusMaster- SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-
            Status: Cap- 66MHz- UDF- FastB2B- ParErr- DEVSEL=medium >TAbort- <TAbort- <MAbort- >SERR- <PERR- INTx-
            Interrupt: pin A routed to IRQ 21
            Region 0: I/O ports at cf00 [size=8]
            Region 1: I/O ports at ce00 [size=8]
            Kernel driver in use: parport_serial
            Kernel modules: 8250_pci, parport_serial
    
    This commit adds an entry with the device ID to the blacklist declared in
    8250_pci to prevent the driver from taking ownership. Also, and as was done
    for the 2S/1P variant, add a quirk to skip autodetection and set the correct
    type to 16550A clone.
    
    Proper entries are added to parport_serial, to support the device parallel
    and serial ports.
    
    Cc: Gianluca Anzolin <gianluca@sottospazio.it>
    Cc: Alan Cox <alan@linux.intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit bd66de1b39f7694430862d9637475439be571d62
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jun 5 23:05:47 2014 +0200

    pcmcia: journada720: use sa1100 pin interfaces correctly
    
    commit 58409f9d21a9d372e35857b5b8aaf334997b127b upstream.
    
    commit dabd14684bc2 "PCMCIA: sa1111: remove duplicated initializers"
    incorrectly moved some code into the pcmcia_jornada720_init, causing
    a few build errors, and for unknown reasons, the driver lacks
    an inclusion of <linux/io.h>, so we get the build errors, and more:
    
    sa1111_jornada720.c: In function 'pcmcia_jornada720_init':
    sa1111_jornada720.c:101:3: error: implicit declaration of function 'IOMEM' [-Werror=implicit-function-declaration]
       GRER |= 0x00000002;
       ^
    sa1111_jornada720.c:104:3: warning: passing argument 1 of 'sa1111_set_io_dir' from incompatible pointer type [enabled by default]
       sa1111_set_io_dir(dev, pin, 0, 0);
       ^
    
    This patch uses the SA1111_DEV() to convert the dev pointer to the
    correct type before passing it and adds the missing include.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: Kristoffer Ericson <kristoffer.ericson@gmail.com>
    Cc: linux-pcmcia@lists.infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 2948ce57731969aa662e0192d2df0749f1f21462
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jun 5 23:05:48 2014 +0200

    pcmcia: pxa2xx: fix logic for lubbock
    
    commit f1674f213ec81c55c909bb6805d3502b5883754d upstream.
    
    The lubbock platform uses the sa1111 companion chip with a pxa250
    CPU, which means it requires both the PCMCIA_SA1111 and the
    PCMCIA_PXA2XX code to be built into the kernel. Unfortunately,
    the Makefile and Kconfig don't agree on how this is accomplished,
    leading to a situation where you get this link error when building
    a lubbock kernel with PCMCIA_SA1111 enabled but PCMCIA_PXA2XX
    disabled:
    
    ERROR: "pxa2xx_configure_sockets" [drivers/pcmcia/sa1111_cs.ko] undefined!
    ERROR: "pxa2xx_drv_pcmcia_ops" [drivers/pcmcia/sa1111_cs.ko] undefined!
    ERROR: "pxa2xx_drv_pcmcia_add_one" [drivers/pcmcia/sa1111_cs.ko] undefined!
    
    This patch changes the Kconfig code to disallow that particular
    configuration.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 77cf7a125c16bfab995ea37962047a80d296bad7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jun 5 23:05:49 2014 +0200

    pcmcia: sa1100: H3100 and H3600 share a driver
    
    commit d8477126f46b036b26d95b127689a3774a080e34 upstream.
    
    When building a iPAQ H3100-only kernel with PCMCIA enabled,
    we get this build error:
    
    ERROR: "pcmcia_h3600_init" [drivers/pcmcia/sa1100_cs.ko] undefined!
    
    The defconfig normally works fine because it enables both H3100
    and H3600 support. This patch fixes the Makefile to build the
    driver if at least one of the two machines are selected.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit ae04c8258c710aefb297b079a84ccbec318822d4
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Sep 23 16:27:29 2013 +0200

    pcmcia: at91_cf: fix deferred probe from __init
    
    commit 16a7c7cfd21cca8a260b63467e4f5c6a6d548b09 upstream.
    
    Move probe out of __init section and don't use platform_driver_probe
    which cannot be used with deferred probing.
    
    Since commit e9354576 ("gpiolib: Defer failed gpio requests by default")
    this driver might return -EPROBE_DEFER if a gpio_request fails.
    
    Cc: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 05b598ab439ca2aaff4930d45ec74062f484d52e
Author: Dmitry Eremin-Solenikov <dmitry_eremin@mentor.com>
Date:   Fri Oct 24 15:34:39 2014 -0700

    Input: wm97xx - adapt parameters to tosa touchscreen.
    
    commit 859abd1d59e2db07d2e4db27074fc33568353d11 upstream.
    
    Sharp SL-6000 (tosa) touchscreen needs wider limits to properly map all
    points on the screen. Expand ranges in abs_x and abs_y arrays according
    to the touchscreen area.
    
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 937d4c93ad018deb95c363ed469ed3b228e6e24e
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Fri Oct 31 09:16:19 2014 -0700

    Input: altera_ps2 - write to correct register when disabling interrupts
    
    commit d0269b8475020718afd7f559064698f5500fa879 upstream.
    
    In altera_ps2_close, the data register (offset 0) is written instead of
    the control register (offset 4), leading to the RX interrupt not being
    disabled. Fix this by calling writel() with the offset for the proper
    register.
    
    Signed-off-by: Tobias Klauser <tklauser@distanz.ch>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 214c97a12f1f14260b90eea07444de6aa3b90d27
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Oct 16 04:57:21 2014 -0300

    [media] usbvision-video: two use after frees
    
    commit 470a9147899500eb4898f77816520c4b4aa1a698 upstream.
    
    The lock has been freed in usbvision_release() so there is no need to
    call mutex_unlock() here.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit fed533bb941e2d3155c89bab8a43493c85bdcb56
Author: Micky Ching <micky_ching@realsil.com.cn>
Date:   Mon Jun 23 13:22:04 2014 -0700

    drivers/memstick/host/rtsx_pci_ms.c: add cancel_work when remove driver
    
    commit b6226b45c66196e14ef628d3aead2139700db1ad upstream.
    
    Add cancel_work_sync() in rtsx_pci_ms_drv_remove() to cancel pending
    request work when removing the driver.
    
    Signed-off-by: Micky Ching <micky_ching@realsil.com.cn>
    Cc: Samuel Ortiz <sameo@linux.intel.com> says:
    Cc: Maxim Levitsky <maximlevitsky@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Alex Dubov <oakad@yahoo.com>
    Cc: Roger Tseng <rogerable@realtek.com>
    Cc: Wei WANG <wei_wang@realsil.com.cn>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit bbd951a21e0fd555cd9ede44c7196af09d04d171
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Oct 9 22:55:31 2014 +0200

    net: sctp: fix skb_over_panic when receiving malformed ASCONF chunks
    
    commit 9de7922bc709eee2f609cd01d98aaedc4cf5ea74 upstream.
    
    Commit 6f4c618ddb0 ("SCTP : Add paramters validity check for
    ASCONF chunk") added basic verification of ASCONF chunks, however,
    it is still possible to remotely crash a server by sending a
    special crafted ASCONF chunk, even up to pre 2.6.12 kernels:
    
    skb_over_panic: text:ffffffffa01ea1c3 len:31056 put:30768
     head:ffff88011bd81800 data:ffff88011bd81800 tail:0x7950
     end:0x440 dev:<NULL>
     ------------[ cut here ]------------
    kernel BUG at net/core/skbuff.c:129!
    [...]
    Call Trace:
     <IRQ>
     [<ffffffff8144fb1c>] skb_put+0x5c/0x70
     [<ffffffffa01ea1c3>] sctp_addto_chunk+0x63/0xd0 [sctp]
     [<ffffffffa01eadaf>] sctp_process_asconf+0x1af/0x540 [sctp]
     [<ffffffff8152d025>] ? _read_unlock_bh+0x15/0x20
     [<ffffffffa01e0038>] sctp_sf_do_asconf+0x168/0x240 [sctp]
     [<ffffffffa01e3751>] sctp_do_sm+0x71/0x1210 [sctp]
     [<ffffffff8147645d>] ? fib_rules_lookup+0xad/0xf0
     [<ffffffffa01e6b22>] ? sctp_cmp_addr_exact+0x32/0x40 [sctp]
     [<ffffffffa01e8393>] sctp_assoc_bh_rcv+0xd3/0x180 [sctp]
     [<ffffffffa01ee986>] sctp_inq_push+0x56/0x80 [sctp]
     [<ffffffffa01fcc42>] sctp_rcv+0x982/0xa10 [sctp]
     [<ffffffffa01d5123>] ? ipt_local_in_hook+0x23/0x28 [iptable_filter]
     [<ffffffff8148bdc9>] ? nf_iterate+0x69/0xb0
     [<ffffffff81496d10>] ? ip_local_deliver_finish+0x0/0x2d0
     [<ffffffff8148bf86>] ? nf_hook_slow+0x76/0x120
     [<ffffffff81496d10>] ? ip_local_deliver_finish+0x0/0x2d0
     [<ffffffff81496ded>] ip_local_deliver_finish+0xdd/0x2d0
     [<ffffffff81497078>] ip_local_deliver+0x98/0xa0
     [<ffffffff8149653d>] ip_rcv_finish+0x12d/0x440
     [<ffffffff81496ac5>] ip_rcv+0x275/0x350
     [<ffffffff8145c88b>] __netif_receive_skb+0x4ab/0x750
     [<ffffffff81460588>] netif_receive_skb+0x58/0x60
    
    This can be triggered e.g., through a simple scripted nmap
    connection scan injecting the chunk after the handshake, for
    example, ...
    
      -------------- INIT[ASCONF; ASCONF_ACK] ------------->
      <----------- INIT-ACK[ASCONF; ASCONF_ACK] ------------
      -------------------- COOKIE-ECHO -------------------->
      <-------------------- COOKIE-ACK ---------------------
      ------------------ ASCONF; UNKNOWN ------------------>
    
    ... where ASCONF chunk of length 280 contains 2 parameters ...
    
      1) Add IP address parameter (param length: 16)
      2) Add/del IP address parameter (param length: 255)
    
    ... followed by an UNKNOWN chunk of e.g. 4 bytes. Here, the
    Address Parameter in the ASCONF chunk is even missing, too.
    This is just an example and similarly-crafted ASCONF chunks
    could be used just as well.
    
    The ASCONF chunk passes through sctp_verify_asconf() as all
    parameters passed sanity checks, and after walking, we ended
    up successfully at the chunk end boundary, and thus may invoke
    sctp_process_asconf(). Parameter walking is done with
    WORD_ROUND() to take padding into account.
    
    In sctp_process_asconf()'s TLV processing, we may fail in
    sctp_process_asconf_param() e.g., due to removal of the IP
    address that is also the source address of the packet containing
    the ASCONF chunk, and thus we need to add all TLVs after the
    failure to our ASCONF response to remote via helper function
    sctp_add_asconf_response(), which basically invokes a
    sctp_addto_chunk() adding the error parameters to the given
    skb.
    
    When walking to the next parameter this time, we proceed
    with ...
    
      length = ntohs(asconf_param->param_hdr.length);
      asconf_param = (void *)asconf_param + length;
    
    ... instead of the WORD_ROUND()'ed length, thus resulting here
    in an off-by-one that leads to reading the follow-up garbage
    parameter length of 12336, and thus throwing an skb_over_panic
    for the reply when trying to sctp_addto_chunk() next time,
    which implicitly calls the skb_put() with that length.
    
    Fix it by using sctp_walk_params() [ which is also used in
    INIT parameter processing ] macro in the verification *and*
    in ASCONF processing: it will make sure we don't spill over,
    that we walk parameters WORD_ROUND()'ed. Moreover, we're being
    more defensive and guard against unknown parameter types and
    missized addresses.
    
    Joint work with Vlad Yasevich.
    
    Fixes: b896b82be4ae ("[SCTP] ADDIP: Support for processing incoming ASCONF_ACK chunks.")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: Vlad Yasevich <vyasevich@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Josh Boyer <jwboyer@fedoraproject.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a723db0be941b8aebaa1a98b33d17a91b16603e4
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Oct 9 22:55:32 2014 +0200

    net: sctp: fix panic on duplicate ASCONF chunks
    
    commit b69040d8e39f20d5215a03502a8e8b4c6ab78395 upstream.
    
    When receiving a e.g. semi-good formed connection scan in the
    form of ...
    
      -------------- INIT[ASCONF; ASCONF_ACK] ------------->
      <----------- INIT-ACK[ASCONF; ASCONF_ACK] ------------
      -------------------- COOKIE-ECHO -------------------->
      <-------------------- COOKIE-ACK ---------------------
      ---------------- ASCONF_a; ASCONF_b ----------------->
    
    ... where ASCONF_a equals ASCONF_b chunk (at least both serials
    need to be equal), we panic an SCTP server!
    
    The problem is that good-formed ASCONF chunks that we reply with
    ASCONF_ACK chunks are cached per serial. Thus, when we receive a
    same ASCONF chunk twice (e.g. through a lost ASCONF_ACK), we do
    not need to process them again on the server side (that was the
    idea, also proposed in the RFC). Instead, we know it was cached
    and we just resend the cached chunk instead. So far, so good.
    
    Where things get nasty is in SCTP's side effect interpreter, that
    is, sctp_cmd_interpreter():
    
    While incoming ASCONF_a (chunk = event_arg) is being marked
    !end_of_packet and !singleton, and we have an association context,
    we do not flush the outqueue the first time after processing the
    ASCONF_ACK singleton chunk via SCTP_CMD_REPLY. Instead, we keep it
    queued up, although we set local_cork to 1. Commit 2e3216cd54b1
    changed the precedence, so that as long as we get bundled, incoming
    chunks we try possible bundling on outgoing queue as well. Before
    this commit, we would just flush the output queue.
    
    Now, while ASCONF_a's ASCONF_ACK sits in the corked outq, we
    continue to process the same ASCONF_b chunk from the packet. As
    we have cached the previous ASCONF_ACK, we find it, grab it and
    do another SCTP_CMD_REPLY command on it. So, effectively, we rip
    the chunk->list pointers and requeue the same ASCONF_ACK chunk
    another time. Since we process ASCONF_b, it's correctly marked
    with end_of_packet and we enforce an uncork, and thus flush, thus
    crashing the kernel.
    
    Fix it by testing if the ASCONF_ACK is currently pending and if
    that is the case, do not requeue it. When flushing the output
    queue we may relink the chunk for preparing an outgoing packet,
    but eventually unlink it when it's copied into the skb right
    before transmission.
    
    Joint work with Vlad Yasevich.
    
    Fixes: 2e3216cd54b1 ("sctp: Follow security requirement of responding with 1 packet")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Josh Boyer <jwboyer@fedoraproject.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit e476841415c1b7b54e4118d8a219f5db71878675
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Oct 9 22:55:33 2014 +0200

    net: sctp: fix remote memory pressure from excessive queueing
    
    commit 26b87c7881006311828bb0ab271a551a62dcceb4 upstream.
    
    This scenario is not limited to ASCONF, just taken as one
    example triggering the issue. When receiving ASCONF probes
    in the form of ...
    
      -------------- INIT[ASCONF; ASCONF_ACK] ------------->
      <----------- INIT-ACK[ASCONF; ASCONF_ACK] ------------
      -------------------- COOKIE-ECHO -------------------->
      <-------------------- COOKIE-ACK ---------------------
      ---- ASCONF_a; [ASCONF_b; ...; ASCONF_n;] JUNK ------>
      [...]
      ---- ASCONF_m; [ASCONF_o; ...; ASCONF_z;] JUNK ------>
    
    ... where ASCONF_a, ASCONF_b, ..., ASCONF_z are good-formed
    ASCONFs and have increasing serial numbers, we process such
    ASCONF chunk(s) marked with !end_of_packet and !singleton,
    since we have not yet reached the SCTP packet end. SCTP does
    only do verification on a chunk by chunk basis, as an SCTP
    packet is nothing more than just a container of a stream of
    chunks which it eats up one by one.
    
    We could run into the case that we receive a packet with a
    malformed tail, above marked as trailing JUNK. All previous
    chunks are here goodformed, so the stack will eat up all
    previous chunks up to this point. In case JUNK does not fit
    into a chunk header and there are no more other chunks in
    the input queue, or in case JUNK contains a garbage chunk
    header, but the encoded chunk length would exceed the skb
    tail, or we came here from an entirely different scenario
    and the chunk has pdiscard=1 mark (without having had a flush
    point), it will happen, that we will excessively queue up
    the association's output queue (a correct final chunk may
    then turn it into a response flood when flushing the
    queue ;)): I ran a simple script with incremental ASCONF
    serial numbers and could see the server side consuming
    excessive amount of RAM [before/after: up to 2GB and more].
    
    The issue at heart is that the chunk train basically ends
    with !end_of_packet and !singleton markers and since commit
    2e3216cd54b1 ("sctp: Follow security requirement of responding
    with 1 packet") therefore preventing an output queue flush
    point in sctp_do_sm() -> sctp_cmd_interpreter() on the input
    chunk (chunk = event_arg) even though local_cork is set,
    but its precedence has changed since then. In the normal
    case, the last chunk with end_of_packet=1 would trigger the
    queue flush to accommodate possible outgoing bundling.
    
    In the input queue, sctp_inq_pop() seems to do the right thing
    in terms of discarding invalid chunks. So, above JUNK will
    not enter the state machine and instead be released and exit
    the sctp_assoc_bh_rcv() chunk processing loop. It's simply
    the flush point being missing at loop exit. Adding a try-flush
    approach on the output queue might not work as the underlying
    infrastructure might be long gone at this point due to the
    side-effect interpreter run.
    
    One possibility, albeit a bit of a kludge, would be to defer
    invalid chunk freeing into the state machine in order to
    possibly trigger packet discards and thus indirectly a queue
    flush on error. It would surely be better to discard chunks
    as in the current, perhaps better controlled environment, but
    going back and forth, it's simply architecturally not possible.
    I tried various trailing JUNK attack cases and it seems to
    look good now.
    
    Joint work with Vlad Yasevich.
    
    Fixes: 2e3216cd54b1 ("sctp: Follow security requirement of responding with 1 packet")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Josh Boyer <jwboyer@fedoraproject.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 7e1ebf020aff9b3e4c0d52e8ace6e3278e8f8762
Author: Nadav Amit <namit@cs.technion.ac.il>
Date:   Wed Sep 17 02:50:50 2014 +0300

    KVM: x86: Don't report guest userspace emulation error to userspace
    
    commit a2b9e6c1a35afcc0973acb72e591c714e78885ff upstream.
    
    Commit fc3a9157d314 ("KVM: X86: Don't report L2 emulation failures to
    user-space") disabled the reporting of L2 (nested guest) emulation failures to
    userspace due to race-condition between a vmexit and the instruction emulator.
    The same rational applies also to userspace applications that are permitted by
    the guest OS to access MMIO area or perform PIO.
    
    This patch extends the current behavior - of injecting a #UD instead of
    reporting it to userspace - also for guest userspace code.
    
    Signed-off-by: Nadav Amit <namit@cs.technion.ac.il>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 4ffc1f8b153b3b0e322fbac381ed4c240d1b7106
Author: Pranith Kumar <bobby.prani@gmail.com>
Date:   Tue Aug 12 13:07:47 2014 -0400

    rcu: Use rcu_gp_kthread_wake() to wake up grace period kthreads
    
    commit 2aa792e6faf1a00f5accf1f69e87e11a390ba2cd upstream.
    
    The rcu_gp_kthread_wake() function checks for three conditions before
    waking up grace period kthreads:
    
    *  Is the thread we are trying to wake up the current thread?
    *  Are the gp_flags zero? (all threads wait on non-zero gp_flags condition)
    *  Is there no thread created for this flavour, hence nothing to wake up?
    
    If any one of these condition is true, we do not call wake_up().
    It was found that there are quite a few avoidable wake ups both during
    idle time and under stress induced by rcutorture.
    
    Idle:
    
    Total:66000, unnecessary:66000, case1:61827, case2:66000, case3:0
    Total:68000, unnecessary:68000, case1:63696, case2:68000, case3:0
    
    rcutorture:
    
    Total:254000, unnecessary:254000, case1:199913, case2:254000, case3:0
    Total:256000, unnecessary:256000, case1:201784, case2:256000, case3:0
    
    Here case{1-3} are the cases listed above. We can avoid these wake
    ups by using rcu_gp_kthread_wake() to conditionally wake up the grace
    period kthreads.
    
    There is a comment about an implied barrier supplied by the wake_up()
    logic.  This barrier is necessary for the awakened thread to see the
    updated ->gp_flags.  This flag is always being updated with the root node
    lock held. Also, the awakened thread tries to acquire the root node lock
    before reading ->gp_flags because of which there is proper ordering.
    
    Hence this commit tries to avoid calling wake_up() whenever we can by
    using rcu_gp_kthread_wake() function.
    
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    CC: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Kamal Mostafa <kamal@canonical.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 9b3128c465d0ad59ca8739b8028bcad4042eb170
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Mar 11 13:02:16 2014 -0700

    rcu: Make callers awaken grace-period kthread
    
    commit 48a7639ce80cf279834d0d44865e49ecd714f37d upstream.
    
    The rcu_start_gp_advanced() function currently uses irq_work_queue()
    to defer wakeups of the RCU grace-period kthread.  This deferring
    is necessary to avoid RCU-scheduler deadlocks involving the rcu_node
    structure's lock, meaning that RCU cannot call any of the scheduler's
    wake-up functions while holding one of these locks.
    
    Unfortunately, the second and subsequent calls to irq_work_queue() are
    ignored, and the first call will be ignored (aside from queuing the work
    item) if the scheduler-clock tick is turned off.  This is OK for many
    uses, especially those where irq_work_queue() is called from an interrupt
    or softirq handler, because in those cases the scheduler-clock-tick state
    will be re-evaluated, which will turn the scheduler-clock tick back on.
    On the next tick, any deferred work will then be processed.
    
    However, this strategy does not always work for RCU, which can be invoked
    at process level from idle CPUs.  In this case, the tick might never
    be turned back on, indefinitely defering a grace-period start request.
    Note that the RCU CPU stall detector cannot see this condition, because
    there is no RCU grace period in progress.  Therefore, we can (and do!)
    see long tens-of-seconds stalls in grace-period handling.  In theory,
    we could see a full grace-period hang, but rcutorture testing to date
    has seen only the tens-of-seconds stalls.  Event tracing demonstrates
    that irq_work_queue() is being called repeatedly to no effect during
    these stalls: The "newreq" event appears repeatedly from a task that is
    not one of the grace-period kthreads.
    
    In theory, irq_work_queue() might be fixed to avoid this sort of issue,
    but RCU's requirements are unusual and it is quite straightforward to pass
    wake-up responsibility up through RCU's call chain, so that the wakeup
    happens when the offending locks are released.
    
    This commit therefore makes this change.  The rcu_start_gp_advanced(),
    rcu_start_future_gp(), rcu_accelerate_cbs(), rcu_advance_cbs(),
    __note_gp_changes(), and rcu_start_gp() functions now return a boolean
    which indicates when a wake-up is needed.  A new rcu_gp_kthread_wake()
    does the wakeup when it is necessary and safe to do so: No self-wakes,
    no wake-ups if the ->gp_flags field indicates there is no need (as in
    someone else did the wake-up before we got around to it), and no wake-ups
    before the grace-period kthread has been created.
    
    Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Reviewed-by: Josh Triplett <josh@joshtriplett.org>
    [ Pranith: backport to 3.13-stable: just rcu_gp_kthread_wake(),
      prereq for 2aa792e "rcu: Use rcu_gp_kthread_wake() to wake up grace
      period kthreads" ]
    Signed-off-by: Pranith Kumar <bobby.prani@gmail.com>
    Signed-off-by: Kamal Mostafa <kamal@canonical.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 612d07862d30f4a08cc1157b82bf94312c63f3ef
Author: Ben Dooks <ben.dooks@codethink.co.uk>
Date:   Fri Nov 8 18:29:25 2013 +0000

    ARM: probes: fix instruction fetch order with <asm/opcodes.h>
    
    commit 888be25402021a425da3e85e2d5a954d7509286e upstream.
    
    If we are running BE8, the data and instruction endianness do not
    match, so use <asm/opcodes.h> to correctly translate memory accesses
    into ARM instructions.
    
    Acked-by: Jon Medhurst <tixy@linaro.org>
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    [taras.kondratiuk@linaro.org: fixed Thumb instruction fetch order]
    Signed-off-by: Taras Kondratiuk <taras.kondratiuk@linaro.org>
    [wangnan: backport to 3.10 and 3.14:
     - adjust context
     - backport all changes on arch/arm/kernel/probes.c to
       arch/arm/kernel/kprobes-common.c since we don't have
       commit c18377c303787ded44b7decd7dee694db0f205e9.
     - After the above adjustments, becomes same to Taras Kondratiuk's
       original patch:
         http://lists.linaro.org/pipermail/linaro-kernel/2014-January/010346.html
    ]
    Signed-off-by: Wang Nan <wangnan0@huawei.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit afdb2106cf94f193907304fd51dcaa5894926280
Author: Pablo Neira <pablo@netfilter.org>
Date:   Tue Jul 29 18:12:15 2014 +0200

    netfilter: xt_bpf: add mising opaque struct sk_filter definition
    
    commit e10038a8ec06ac819b7552bb67aaa6d2d6f850c1 upstream.
    
    This structure is not exposed to userspace, so fix this by defining
    struct sk_filter; so we skip the casting in kernelspace. This is safe
    since userspace has no way to lurk with that internal pointer.
    
    Fixes: e6f30c7 ("netfilter: x_tables: add xt_bpf match")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 37bdac282ed1d1f2641ba9063f50cf42bcb94dc4
Author: Houcheng Lin <houcheng@gmail.com>
Date:   Thu Oct 23 10:36:08 2014 +0200

    netfilter: nf_log: release skbuff on nlmsg put failure
    
    commit b51d3fa364885a2c1e1668f88776c67c95291820 upstream.
    
    The kernel should reserve enough room in the skb so that the DONE
    message can always be appended.  However, in case of e.g. new attribute
    erronously not being size-accounted for, __nfulnl_send() will still
    try to put next nlmsg into this full skbuf, causing the skb to be stuck
    forever and blocking delivery of further messages.
    
    Fix issue by releasing skb immediately after nlmsg_put error and
    WARN() so we can track down the cause of such size mismatch.
    
    [ fw@strlen.de: add tailroom/len info to WARN ]
    
    Signed-off-by: Houcheng Lin <houcheng@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 45ebf3641319166e3a6c468eeeac48aa4d6d567d
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Oct 23 10:36:07 2014 +0200

    netfilter: nfnetlink_log: fix maximum packet length logged to userspace
    
    commit c1e7dc91eed0ed1a51c9b814d648db18bf8fc6e9 upstream.
    
    don't try to queue payloads > 0xffff - NLA_HDRLEN, it does not work.
    The nla length includes the size of the nla struct, so anything larger
    results in u16 integer overflow.
    
    This patch is similar to
    9cefbbc9c8f9abe (netfilter: nfnetlink_queue: cleanup copy_range usage).
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 131172845aa2c804ffa9423455aee585061ea35e
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Oct 23 10:36:06 2014 +0200

    netfilter: nf_log: account for size of NLMSG_DONE attribute
    
    commit 9dfa1dfe4d5e5e66a991321ab08afe69759d797a upstream.
    
    We currently neither account for the nlattr size, nor do we consider
    the size of the trailing NLMSG_DONE when allocating nlmsg skb.
    
    This can result in nflog to stop working, as __nfulnl_send() re-tries
    sending forever if it failed to append NLMSG_DONE (which will never
    work if buffer is not large enough).
    
    Reported-by: Houcheng Lin <houcheng@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 04e7556e9c84532bbdbe5663b7b25eb8ca15c14e
Author: Andrey Vagin <avagin@openvz.org>
Date:   Mon Oct 13 15:54:10 2014 -0700

    ipc: always handle a new value of auto_msgmni
    
    commit 1195d94e006b23c6292e78857e154872e33b6d7e upstream.
    
    proc_dointvec_minmax() returns zero if a new value has been set.  So we
    don't need to check all charecters have been handled.
    
    Below you can find two examples.  In the new value has not been handled
    properly.
    
    $ strace ./a.out
    open("/proc/sys/kernel/auto_msgmni", O_WRONLY) = 3
    write(3, "0\n\0", 3)                    = 2
    close(3)                                = 0
    exit_group(0)
    $ cat /sys/kernel/debug/tracing/trace
    
    $strace ./a.out
    open("/proc/sys/kernel/auto_msgmni", O_WRONLY) = 3
    write(3, "0\n", 2)                      = 2
    close(3)                                = 0
    
    $ cat /sys/kernel/debug/tracing/trace
    a.out-697   [000] ....  3280.998235: unregister_ipcns_notifier <-proc_ipcauto_dointvec_minmax
    
    Fixes: 9eefe520c814 ("ipc: do not use a negative value to re-enable msgmni automatic recomputin")
    Signed-off-by: Andrey Vagin <avagin@openvz.org>
    Cc: Mathias Krause <minipli@googlemail.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Davidlohr Bueso <davidlohr@hp.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 0f207b54545a7535e02e7ca11931655396e15846
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:09 2014 -0600

    clocksource: Remove "weak" from clocksource_default_clock() declaration
    
    commit 96a2adbc6f501996418da9f7afe39bf0e4d006a9 upstream.
    
    kernel/time/jiffies.c provides a default clocksource_default_clock()
    definition explicitly marked "weak".  arch/s390 provides its own definition
    intended to override the default, but the "weak" attribute on the
    declaration applied to the s390 definition as well, so the linker chose one
    based on link order (see 10629d711ed7 ("PCI: Remove __weak annotation from
    pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the clocksource_default_clock()
    declaration so we always prefer a non-weak definition over the weak one,
    independent of link order.
    
    Fixes: f1b82746c1e9 ("clocksource: Cleanup clocksource selection")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 33176fe6d29e0a689928532db6cf44de67c72921
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 19:00:25 2014 -0600

    kgdb: Remove "weak" from kgdb_arch_pc() declaration
    
    commit 107bcc6d566cb40184068d888637f9aefe6252dd upstream.
    
    kernel/debug/debug_core.c provides a default kgdb_arch_pc() definition
    explicitly marked "weak".  Several architectures provide their own
    definitions intended to override the default, but the "weak" attribute on
    the declaration applied to the arch definitions as well, so the linker
    chose one based on link order (see 10629d711ed7 ("PCI: Remove __weak
    annotation from pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the declaration so we always prefer a
    non-weak definition over the weak one, independent of link order.
    
    Fixes: 688b744d8bc8 ("kgdb: fix signedness mixmatches, add statics, add declaration to header")
    Tested-by: Vineet Gupta <vgupta@synopsys.com>   # for ARC build
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Harvey Harrison <harvey.harrison@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit c9813eda171c8e01f62f71623aff4b0fbe79106c
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:41 2014 -0600

    vmcore: Remove "weak" from function declarations
    
    commit 5ab03ac5aaa1f032e071f1b3dc433b7839359c03 upstream.
    
    For the following functions:
    
      elfcorehdr_alloc()
      elfcorehdr_free()
      elfcorehdr_read()
      elfcorehdr_read_notes()
      remap_oldmem_pfn_range()
    
    fs/proc/vmcore.c provides default definitions explicitly marked "weak".
    arch/s390 provides its own definitions intended to override the default
    ones, but the "weak" attribute on the declarations applied to the s390
    definitions as well, so the linker chose one based on link order (see
    10629d711ed7 ("PCI: Remove __weak annotation from pcibios_get_phb_of_node
    decl")).
    
    Remove the "weak" attribute from the declarations so we always prefer a
    non-weak definition over the weak one, independent of link order.
    
    Fixes: be8a8d069e50 ("vmcore: introduce ELF header in new memory feature")
    Fixes: 9cb218131de1 ("vmcore: introduce remap_oldmem_pfn_range()")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Vivek Goyal <vgoyal@redhat.com>
    CC: Michael Holzheu <holzheu@linux.vnet.ibm.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit eac34ad1b7643c51d9b4b96a2c6e034f49c7b7be
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Wed Nov 12 14:44:49 2014 -0500

    NFSv4.1: nfs41_clear_delegation_stateid shouldn't trust NFS_DELEGATED_STATE
    
    commit 0c116cadd94b16b30b1dd90d38b2784d9b39b01a upstream.
    
    This patch removes the assumption made previously, that we only need to
    check the delegation stateid when it matches the stateid on a cached
    open.
    
    If we believe that we hold a delegation for this file, then we must assume
    that its stateid may have been revoked or expired too. If we don't test it
    then our state recovery process may end up caching open/lock state in a
    situation where it should not.
    We therefore rename the function nfs41_clear_delegation_stateid as
    nfs41_check_delegation_stateid, and change it to always run through the
    delegation stateid test and recovery process as outlined in RFC5661.
    
    http://lkml.kernel.org/r/CAN-5tyHwG=Cn2Q9KsHWadewjpTTy_K26ee+UnSvHvG4192p-Xw@mail.gmail.com
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 1f093632c55db7d63da16f158ed86be8836a40c4
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Mon Nov 10 18:43:56 2014 -0500

    NFSv4: Fix races between nfs_remove_bad_delegation() and delegation return
    
    commit 869f9dfa4d6d57b79e0afc3af14772c2a023eeb1 upstream.
    
    Any attempt to call nfs_remove_bad_delegation() while a delegation is being
    returned is currently a no-op. This means that we can end up looping
    forever in nfs_end_delegation_return() if something causes the delegation
    to be revoked.
    This patch adds a mechanism whereby the state recovery code can communicate
    to the delegation return code that the delegation is no longer valid and
    that it should not be used when reclaiming state.
    It also changes the return value for nfs4_handle_delegation_recall_error()
    to ensure that nfs_end_delegation_return() does not reattempt the lock
    reclaim before state recovery is done.
    
    http://lkml.kernel.org/r/CAN-5tyHwG=Cn2Q9KsHWadewjpTTy_K26ee+UnSvHvG4192p-Xw@mail.gmail.com
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 77683fa6ccecf2eb8b4dd34fe609455580dfe766
Author: Jan Kara <jack@suse.cz>
Date:   Thu Oct 23 14:02:47 2014 +0200

    nfs: Fix use of uninitialized variable in nfs_getattr()
    
    commit 16caf5b6101d03335b386e77e9e14136f989be87 upstream.
    
    Variable 'err' needn't be initialized when nfs_getattr() uses it to
    check whether it should call generic_fillattr() or not. That can result
    in spurious error returns. Initialize 'err' properly.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a78d2dde1a6297c60901b287ccdb843d260f4483
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Fri Oct 17 23:02:52 2014 +0300

    NFS: Don't try to reclaim delegation open state if recovery failed
    
    commit f8ebf7a8ca35dde321f0cd385fee6f1950609367 upstream.
    
    If state recovery failed, then we should not attempt to reclaim delegated
    state.
    
    http://lkml.kernel.org/r/CAN-5tyHwG=Cn2Q9KsHWadewjpTTy_K26ee+UnSvHvG4192p-Xw@mail.gmail.com
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit ae87d577bf33ddcfd06cfdfa6df95a13a01f9e55
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Fri Oct 17 15:10:25 2014 +0300

    NFSv4: Ensure that we remove NFSv4.0 delegations when state has expired
    
    commit 4dfd4f7af0afd201706ad186352ca423b0f17d4b upstream.
    
    NFSv4.0 does not have TEST_STATEID/FREE_STATEID functionality, so
    unlike NFSv4.1, the recovery procedure when stateids have expired or
    have been revoked requires us to just forget the delegation.
    
    http://lkml.kernel.org/r/CAN-5tyHwG=Cn2Q9KsHWadewjpTTy_K26ee+UnSvHvG4192p-Xw@mail.gmail.com
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 4d7358976da0be177081dda43759b83582709dbc
Author: Pali Roh√°r <pali@kernel.org>
Date:   Sat Nov 8 23:36:09 2014 -0800

    Input: alps - ignore bad data on Dell Latitudes E6440 and E7440
    
    commit a7ef82aee91f26da79b981b9f5bca43b8817d3e4 upstream.
    
    Sometimes on Dell Latitude laptops psmouse/alps driver receive invalid ALPS
    protocol V3 packets with bit7 set in last byte. More often it can be
    reproduced on Dell Latitude E6440 or E7440 with closed lid and pushing
    cover above touchpad.
    
    If bit7 in last packet byte is set then it is not valid ALPS packet. I was
    told that ALPS devices never send these packets. It is not know yet who
    send those packets, it could be Dell EC, bug in BIOS and also bug in
    touchpad firmware...
    
    With this patch alps driver does not process those invalid packets, but
    instead of reporting PSMOUSE_BAD_DATA, getting into out of sync state,
    getting back in sync with the next byte and spam dmesg we return
    PSMOUSE_FULL_PACKET. If driver is truly out of sync we'll fail the checks
    on the next byte and report PSMOUSE_BAD_DATA then.
    
    Signed-off-by: Pali Roh√°r <pali.rohar@gmail.com>
    Tested-by: Pali Roh√°r <pali.rohar@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 335d898edb25d9a470b9c75f194b7c5f564338d4
Author: Pali Roh√°r <pali@kernel.org>
Date:   Sat Nov 8 12:58:57 2014 -0800

    Input: alps - allow up to 2 invalid packets without resetting device
    
    commit 9d720b34c0a432639252f63012e18b0507f5b432 upstream.
    
    On some Dell Latitude laptops ALPS device or Dell EC send one invalid byte
    in 6 bytes ALPS packet. In this case psmouse driver enter out of sync
    state. It looks like that all other bytes in packets are valid and also
    device working properly. So there is no need to do full device reset, just
    need to wait for byte which match condition for first byte (start of
    packet). Because ALPS packets are bigger (6 or 8 bytes) default limit is
    small.
    
    This patch increase number of invalid bytes to size of 2 ALPS packets which
    psmouse driver can drop before do full reset.
    
    Resetting ALPS devices take some time and when doing reset on some Dell
    laptops touchpad, trackstick and also keyboard do not respond. So it is
    better to do it only if really necessary.
    
    Signed-off-by: Pali Roh√°r <pali.rohar@gmail.com>
    Tested-by: Pali Roh√°r <pali.rohar@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 92e2e274732d93eb7b1f5a7f916ba12d742afeee
Author: Pali Roh√°r <pali@kernel.org>
Date:   Sat Nov 8 12:45:23 2014 -0800

    Input: alps - ignore potential bare packets when device is out of sync
    
    commit 4ab8f7f320f91f279c3f06a9795cfea5c972888a upstream.
    
    5th and 6th byte of ALPS trackstick V3 protocol match condition for first
    byte of PS/2 3 bytes packet. When driver enters out of sync state and ALPS
    trackstick is sending data then driver match 5th, 6th and next 1st bytes as
    PS/2.
    
    It basically means if user is using trackstick when driver is in out of
    sync state driver will never resync. Processing these bytes as 3 bytes PS/2
    data cause total mess (random cursor movements, random clicks) and make
    trackstick unusable until psmouse driver decide to do full device reset.
    
    Lot of users reported problems with ALPS devices on Dell Latitude E6440,
    E6540 and E7440 laptops. ALPS device or Dell EC for unknown reason send
    some invalid ALPS PS/2 bytes which cause driver out of sync. It looks like
    that i8042 and psmouse/alps driver always receive group of 6 bytes packets
    so there are no missing bytes and no bytes were inserted between valid
    ones.
    
    This patch does not fix root of problem with ALPS devices found in Dell
    Latitude laptops but it does not allow to process some (invalid)
    subsequence of 6 bytes ALPS packets as 3 bytes PS/2 when driver is out of
    sync.
    
    So with this patch trackstick input device does not report bogus data when
    also driver is out of sync, so trackstick should be usable on those
    machines.
    
    Signed-off-by: Pali Roh√°r <pali.rohar@gmail.com>
    Tested-by: Pali Roh√°r <pali.rohar@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit e90b799e47a5d3923e58d8cc11bdff39117580c3
Author: Heinz Mauelshagen <heinzm@redhat.com>
Date:   Fri Oct 17 13:38:50 2014 +0200

    dm raid: ensure superblock's size matches device's logical block size
    
    commit 40d43c4b4cac4c2647bf07110d7b07d35f399a84 upstream.
    
    The dm-raid superblock (struct dm_raid_superblock) is padded to 512
    bytes and that size is being used to read it in from the metadata
    device into one preallocated page.
    
    Reading or writing this on a 512-byte sector device works fine but on
    a 4096-byte sector device this fails.
    
    Set the dm-raid superblock's size to the logical block size of the
    metadata device, because IO at that size is guaranteed too work.  Also
    add a size check to avoid silent partial metadata loss in case the
    superblock should ever grow past the logical block size or PAGE_SIZE.
    
    [includes pointer math fix from Dan Carpenter]
    Reported-by: "Liuhua Wang" <lwang@suse.com>
    Signed-off-by: Heinz Mauelshagen <heinzm@redhat.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit d0960e2100d219b38ac94bddcca37c04281f31e9
Author: Joe Thornber <ejt@redhat.com>
Date:   Mon Nov 10 15:03:24 2014 +0000

    dm btree: fix a recursion depth bug in btree walking code
    
    commit 9b460d3699324d570a4d4161c3741431887f102f upstream.
    
    The walk code was using a 'ro_spine' to hold it's locked btree nodes.
    But this data structure is designed for the rolling lock scheme, and
    as such automatically unlocks blocks that are two steps up the call
    chain.  This is not suitable for the simple recursive walk algorithm,
    which retraces its steps.
    
    This code is only used by the persistent array code, which in turn is
    only used by dm-cache.  In order to trigger it you need to have a
    mapping tree that is more than 2 levels deep; which equates to 8-16
    million cache blocks.  For instance a 4T ssd with a very small block
    size of 32k only just triggers this bug.
    
    The fix just places the locked blocks on the stack, and stops using
    the ro_spine altogether.
    
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit d1bb12f652136abaa633ca8a8e2cd700c960fefb
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Oct 16 14:45:20 2014 -0400

    dm bufio: change __GFP_IO to __GFP_FS in shrinker callbacks
    
    commit 9d28eb12447ee08bb5d1e8bb3195cf20e1ecd1c0 upstream.
    
    The shrinker uses gfp flags to indicate what kind of operation can the
    driver wait for. If __GFP_IO flag is present, the driver can wait for
    block I/O operations, if __GFP_FS flag is present, the driver can wait on
    operations involving the filesystem.
    
    dm-bufio tested for __GFP_IO. However, dm-bufio can run on a loop block
    device that makes calls into the filesystem. If __GFP_IO is present and
    __GFP_FS isn't, dm-bufio could still block on filesystem operations if it
    runs on a loop block device.
    
    The change from __GFP_IO to __GFP_FS supposedly fixes one observed (though
    unreproducible) deadlock involving dm-bufio and loop device.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a39c8649e480bf8bf6419bc1ed6c8d66fbc89ebb
Author: Jan Kara <jack@suse.cz>
Date:   Thu Oct 30 20:43:38 2014 +0100

    block: Fix computation of merged request priority
    
    commit ece9c72accdc45c3a9484dacb1125ce572647288 upstream.
    
    Priority of a merged request is computed by ioprio_best(). If one of the
    requests has undefined priority (IOPRIO_CLASS_NONE) and another request
    has priority from IOPRIO_CLASS_BE, the function will return the
    undefined priority which is wrong. Fix the function to properly return
    priority of a request with the defined priority.
    
    Fixes: d58cdfb89ce0c6bd5f81ae931a984ef298dbda20
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit e29a7bc42c8ce108b2ffc70a0467c05faea8cc8e
Author: Helge Deller <deller@gmx.de>
Date:   Mon Nov 10 21:46:18 2014 +0100

    parisc: Use compat layer for msgctl, shmat, shmctl and semtimedop syscalls
    
    commit 2fe749f50b0bec07650ef135b29b1f55bf543869 upstream.
    
    Switch over the msgctl, shmat, shmctl and semtimedop syscalls to use the compat
    layer. The problem was found with the debian procenv package, which called
            shmctl(0, SHM_INFO, &info);
    in which the shmctl syscall then overwrote parts of the surrounding areas on
    the stack on which the info variable was stored and thus lead to a segfault
    later on.
    
    Additionally fix the definition of struct shminfo64 to use unsigned longs like
    the other architectures. This has no impact on userspace since we only have a
    32bit userspace up to now.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: John David Anglin <dave.anglin@bell.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 7a6e7a368541b06df81597056667035aedbe514c
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Nov 3 19:36:40 2014 +0100

    scsi: only re-lock door after EH on devices that were reset
    
    commit 48379270fe6808cf4612ee094adc8da2b7a83baa upstream.
    
    Setups that use the blk-mq I/O path can lock up if a host with a single
    device that has its door locked enters EH.  Make sure to only send the
    command to re-lock the door to devices that actually were reset and thus
    might have lost their state.  Otherwise the EH code might be get blocked
    on blk_get_request as all requests for non-reset devices might be in use.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reported-by: Meelis Roos <meelis.roos@ut.ee>
    Tested-by: Meelis Roos <meelis.roos@ut.ee>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit d0c8187c16fa9294a2ff8fbbe85c15776ca3fa72
Author: Peng Tao <tao.peng@primarydata.com>
Date:   Wed Nov 5 22:36:50 2014 +0800

    nfs: fix pnfs direct write memory leak
    
    commit 8c393f9a721c30a030049a680e1bf896669bb279 upstream.
    
    For pNFS direct writes, layout driver may dynamically allocate ds_cinfo.buckets.
    So we need to take care to free them when freeing dreq.
    
    Ideally this needs to be done inside layout driver where ds_cinfo.buckets
    are allocated. But buckets are attached to dreq and reused across LD IO iterations.
    So I feel it's OK to free them in the generic layer.
    
    Signed-off-by: Peng Tao <tao.peng@primarydata.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 9fb5f68e66142ca36cb0958a12b2f1af47a723bc
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Tue Nov 11 17:16:44 2014 +0100

    firewire: cdev: prevent kernel stack leaking into ioctl arguments
    
    commit eaca2d8e75e90a70a63a6695c9f61932609db212 upstream.
    
    Found by the UC-KLEE tool:  A user could supply less input to
    firewire-cdev ioctls than write- or write/read-type ioctl handlers
    expect.  The handlers used data from uninitialized kernel stack then.
    
    This could partially leak back to the user if the kernel subsequently
    generated fw_cdev_event_'s (to be read from the firewire-cdev fd)
    which notably would contain the _u64 closure field which many of the
    ioctl argument structures contain.
    
    The fact that the handlers would act on random garbage input is a
    lesser issue since all handlers must check their input anyway.
    
    The fix simply always null-initializes the entire ioctl argument buffer
    regardless of the actual length of expected user input.  That is, a
    runtime overhead of memset(..., 40) is added to each firewirew-cdev
    ioctl() call.  [Comment from Clemens Ladisch:  This part of the stack is
    most likely to be already in the cache.]
    
    Remarks:
      - There was never any leak from kernel stack to the ioctl output
        buffer itself.  IOW, it was not possible to read kernel stack by a
        read-type or write/read-type ioctl alone; the leak could at most
        happen in combination with read()ing subsequent event data.
      - The actual expected minimum user input of each ioctl from
        include/uapi/linux/firewire-cdev.h is, in bytes:
        [0x00] = 32, [0x05] =  4, [0x0a] = 16, [0x0f] = 20, [0x14] = 16,
        [0x01] = 36, [0x06] = 20, [0x0b] =  4, [0x10] = 20, [0x15] = 20,
        [0x02] = 20, [0x07] =  4, [0x0c] =  0, [0x11] =  0, [0x16] =  8,
        [0x03] =  4, [0x08] = 24, [0x0d] = 20, [0x12] = 36, [0x17] = 12,
        [0x04] = 20, [0x09] = 24, [0x0e] =  4, [0x13] = 40, [0x18] =  4.
    
    Reported-by: David Ramos <daramos@stanford.edu>
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit beb762ba2a940ce1f87a03b1c5820ce2d433db6e
Author: Kyle McMartin <kyle@redhat.com>
Date:   Wed Nov 12 21:07:44 2014 +0000

    arm64: __clear_user: handle exceptions on strb
    
    commit 97fc15436b36ee3956efad83e22a557991f7d19d upstream.
    
    ARM64 currently doesn't fix up faults on the single-byte (strb) case of
    __clear_user... which means that we can cause a nasty kernel panic as an
    ordinary user with any multiple PAGE_SIZE+1 read from /dev/zero.
    i.e.: dd if=/dev/zero of=foo ibs=1 count=1 (or ibs=65537, etc.)
    
    This is a pretty obscure bug in the general case since we'll only
    __do_kernel_fault (since there's no extable entry for pc) if the
    mmap_sem is contended. However, with CONFIG_DEBUG_VM enabled, we'll
    always fault.
    
    if (!down_read_trylock(&mm->mmap_sem)) {
            if (!user_mode(regs) && !search_exception_tables(regs->pc))
                    goto no_context;
    retry:
            down_read(&mm->mmap_sem);
    } else {
            /*
             * The above down_read_trylock() might have succeeded in
             * which
             * case, we'll have missed the might_sleep() from
             * down_read().
             */
            might_sleep();
            if (!user_mode(regs) && !search_exception_tables(regs->pc))
                    goto no_context;
    }
    
    Fix that by adding an extable entry for the strb instruction, since it
    touches user memory, similar to the other stores in __clear_user.
    
    Signed-off-by: Kyle McMartin <kyle@redhat.com>
    Reported-by: Milo≈° Prchl√≠k <mprchlik@redhat.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 2c49ae544b24a61a8de26c7bf0bce13151d54abf
Author: Joe Thornber <ejt@redhat.com>
Date:   Fri Oct 10 09:41:09 2014 +0100

    dm thin: grab a virtual cell before looking up the mapping
    
    commit c822ed967cba38505713d59ed40a114386ef6c01 upstream.
    
    Avoids normal IO racing with discard.
    
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit f0a72a0e7c682320fa38e71612008de3e3d796ca
Author: Will Deacon <will@kernel.org>
Date:   Tue Nov 4 11:40:46 2014 +0100

    ARM: 8191/1: decompressor: ensure I-side picks up relocated code
    
    commit 238962ac71910d6c20162ea5230685fead1836a4 upstream.
    
    To speed up decompression, the decompressor sets up a flat, cacheable
    mapping of memory. However, when there is insufficient space to hold
    the page tables for this mapping, we don't bother to enable the caches
    and subsequently skip all the cache maintenance hooks.
    
    Skipping the cache maintenance before jumping to the relocated code
    allows the processor to predict the branch and populate the I-cache
    with stale data before the relocation loop has completed (since a
    bootloader may have SCTLR.I set, which permits normal, cacheable
    instruction fetches regardless of SCTLR.M).
    
    This patch moves the cache maintenance check into the maintenance
    routines themselves, allowing the v6/v7 versions to invalidate the
    I-cache regardless of the MMU state.
    
    Reported-by: Marc Carino <marc.ceeeee@gmail.com>
    Tested-by: Julien Grall <julien.grall@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit d8149279a2ec936d50ab54e51b803477fefc55dd
Author: Nathan Lynch <nathan_lynch@mentor.com>
Date:   Mon Nov 10 23:46:27 2014 +0100

    ARM: 8198/1: make kuser helpers depend on MMU
    
    commit 08b964ff3c51b10aaf2e6ba639f40054c09f0f7a upstream.
    
    The kuser helpers page is not set up on non-MMU systems, so it does
    not make sense to allow CONFIG_KUSER_HELPERS to be enabled when
    CONFIG_MMU=n.  Allowing it to be set on !MMU results in an oops in
    set_tls (used in execve and the arm_syscall trap handler):
    
    Unhandled exception: IPSR = 00000005 LR = fffffff1
    CPU: 0 PID: 1 Comm: swapper Not tainted 3.18.0-rc1-00041-ga30465a #216
    task: 8b838000 ti: 8b82a000 task.ti: 8b82a000
    PC is at flush_thread+0x32/0x40
    LR is at flush_thread+0x21/0x40
    pc : [<8f00157a>]    lr : [<8f001569>]    psr: 4100000b
    sp : 8b82be20  ip : 00000000  fp : 8b83c000
    r10: 00000001  r9 : 88018c84  r8 : 8bb85000
    r7 : 8b838000  r6 : 00000000  r5 : 8bb77400  r4 : 8b82a000
    r3 : ffff0ff0  r2 : 8b82a000  r1 : 00000000  r0 : 88020354
    xPSR: 4100000b
    CPU: 0 PID: 1 Comm: swapper Not tainted 3.18.0-rc1-00041-ga30465a #216
    [<8f002bc1>] (unwind_backtrace) from [<8f002033>] (show_stack+0xb/0xc)
    [<8f002033>] (show_stack) from [<8f00265b>] (__invalid_entry+0x4b/0x4c)
    
    As best I can tell this issue existed for the set_tls ARM syscall
    before commit fbfb872f5f41 "ARM: 8148/1: flush TLS and thumbee
    register state during exec" consolidated the TLS manipulation code
    into the set_tls helper function, but now that we're using it to flush
    register state during execve, !MMU users encounter the oops at the
    first exec.
    
    Prevent CONFIG_MMU=n configurations from enabling
    CONFIG_KUSER_HELPERS.
    
    Fixes: fbfb872f5f41 (ARM: 8148/1: flush TLS and thumbee register state during exec)
    
    Signed-off-by: Nathan Lynch <nathan_lynch@mentor.com>
    Reported-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Uwe Kleine-K√∂nig <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 984e580d41b0e91b37e53f64f2455618c49e571b
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Nov 5 17:14:32 2014 -0500

    drm/radeon: add missing crtc unlock when setting up the MC
    
    commit f0d7bfb9407fccb6499ec01c33afe43512a439a2 upstream.
    
    Need to unlock the crtc after updating the blanking state.
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 30c45d8c1094fa14ef7180bbd5cf3af33b49f1c8
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Nov 3 09:57:46 2014 -0500

    drm/radeon: make sure mode init is complete in bandwidth_update
    
    commit 8efe82ca908400785253c8f0dfcf301e6bd93488 upstream.
    
    The power management code calls into the display code for
    certain things.  If certain power management sysfs attributes
    are called before the driver has finished initializing all of
    the hardware we can run into problems with uninitialized
    modesetting state.  Add a check to make sure modesetting
    init has completed to the bandwidth update callbacks to
    fix this.  Can be triggered by the tlp and laptop start
    up scripts depending on the timing.
    
    bugs:
    https://bugzilla.kernel.org/show_bug.cgi?id=83611
    https://bugs.freedesktop.org/show_bug.cgi?id=85771
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 37dc09565477b5beb644ceea44341fdc46ac4dbe
Author: Jammy Zhou <Jammy.Zhou@amd.com>
Date:   Mon Nov 3 08:58:20 2014 -0500

    drm/radeon: set correct CE ram size for CIK
    
    commit dc4edad6530a9b7b66c3d905e2bc06021a05dcad upstream.
    
    CE ram size is 32k/0k/0k for GFX/CS0/CS1 with CIK
    
    Ported from amdgpu driver.
    
    Signed-off-by: Jammy Zhou <Jammy.Zhou@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 8384cbafb34d6abfe75dbc2d9b4f42302ad3edae
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 3 13:57:46 2014 +0100

    mac80211: fix use-after-free in defragmentation
    
    commit b8fff407a180286aa683d543d878d98d9fc57b13 upstream.
    
    Upon receiving the last fragment, all but the first fragment
    are freed, but the multicast check for statistics at the end
    of the function refers to the current skb (the last fragment)
    causing a use-after-free bug.
    
    Since multicast frames cannot be fragmented and we check for
    this early in the function, just modify that check to also
    do the accounting to fix the issue.
    
    Reported-by: Yosef Khyal <yosefx.khyal@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit e7ba6308e5c4725632baf8a55332b050e510af5d
Author: Luciano Coelho <luciano.coelho@intel.com>
Date:   Tue Oct 28 13:33:05 2014 +0200

    mac80211: schedule the actual switch of the station before CSA count 0
    
    commit ff1e417c7c239b7abfe70aa90460a77eaafc7f83 upstream.
    
    Due to the time it takes to process the beacon that started the CSA
    process, we may be late for the switch if we try to reach exactly
    beacon 0.  To avoid that, use count - 1 when calculating the switch time.
    
    Reported-by: Jouni Malinen <j@w1.fi>
    Signed-off-by: Luciano Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 3a5a7cd8d92bf9d5a42694a5bebc37934561602d
Author: Johannes Berg <johannes@sipsolutions.net>
Date:   Tue Oct 21 20:56:42 2014 +0200

    mac80211: properly flush delayed scan work on interface removal
    
    commit 46238845bd609a5c0fbe076e1b82b4c5b33360b2 upstream.
    
    When an interface is deleted, an ongoing hardware scan is canceled and
    the driver must abort the scan, at the very least reporting completion
    while the interface is removed.
    
    However, if it scheduled the work that might only run after everything
    is said and done, which leads to cfg80211 warning that the scan isn't
    reported as finished yet; this is no fault of the driver, it already
    did, but mac80211 hasn't processed it.
    
    To fix this situation, flush the delayed work when the interface being
    removed is the one that was executing the scan.
    
    Reported-by: Sujith Manoharan <sujith@msujith.org>
    Tested-by: Sujith Manoharan <sujith@msujith.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 4d2ff0c7516b4e636e59a0d1e036dc33750c1f89
Author: Junjie Mao <eternal.n08@gmail.com>
Date:   Tue Oct 28 09:31:47 2014 +0800

    mac80211_hwsim: release driver when ieee80211_register_hw fails
    
    commit 805dbe17d1c832ad341f14fae8cedf41b67ca6fa upstream.
    
    The driver is not released when ieee80211_register_hw fails in
    mac80211_hwsim_create_radio, leading to the access to the unregistered (and
    possibly freed) device in platform_driver_unregister:
    
    [    0.447547] mac80211_hwsim: ieee80211_register_hw failed (-2)
    [    0.448292] ------------[ cut here ]------------
    [    0.448854] WARNING: CPU: 0 PID: 1 at ../include/linux/kref.h:47 kobject_get+0x33/0x50()
    [    0.449839] CPU: 0 PID: 1 Comm: swapper Not tainted 3.17.0-00001-gdd46990-dirty #2
    [    0.450813] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [    0.451512]  00000000 00000000 78025e38 7967c6c6 78025e68 7905e09b 7988b480 00000000
    [    0.452579]  00000001 79887d62 0000002f 79170bb3 79170bb3 78397008 79ac9d74 00000001
    [    0.453614]  78025e78 7905e15d 00000009 00000000 78025e84 79170bb3 78397000 78025e8c
    [    0.454632] Call Trace:
    [    0.454921]  [<7967c6c6>] dump_stack+0x16/0x18
    [    0.455453]  [<7905e09b>] warn_slowpath_common+0x6b/0x90
    [    0.456067]  [<79170bb3>] ? kobject_get+0x33/0x50
    [    0.456612]  [<79170bb3>] ? kobject_get+0x33/0x50
    [    0.457155]  [<7905e15d>] warn_slowpath_null+0x1d/0x20
    [    0.457748]  [<79170bb3>] kobject_get+0x33/0x50
    [    0.458274]  [<7925824f>] get_device+0xf/0x20
    [    0.458779]  [<7925b5cd>] driver_detach+0x3d/0xa0
    [    0.459331]  [<7925a3ff>] bus_remove_driver+0x8f/0xb0
    [    0.459927]  [<7925bf80>] ? class_unregister+0x40/0x80
    [    0.460660]  [<7925bad7>] driver_unregister+0x47/0x50
    [    0.461248]  [<7925c033>] ? class_destroy+0x13/0x20
    [    0.461824]  [<7925d07b>] platform_driver_unregister+0xb/0x10
    [    0.462507]  [<79b51ba0>] init_mac80211_hwsim+0x3e8/0x3f9
    [    0.463161]  [<79b30c58>] do_one_initcall+0x106/0x1a9
    [    0.463758]  [<79b517b8>] ? if_spi_init_module+0xac/0xac
    [    0.464393]  [<79b517b8>] ? if_spi_init_module+0xac/0xac
    [    0.465001]  [<79071935>] ? parse_args+0x2f5/0x480
    [    0.465569]  [<7906b41e>] ? __usermodehelper_set_disable_depth+0x3e/0x50
    [    0.466345]  [<79b30dd9>] kernel_init_freeable+0xde/0x17d
    [    0.466972]  [<79b304d6>] ? do_early_param+0x7a/0x7a
    [    0.467546]  [<79677b1b>] kernel_init+0xb/0xe0
    [    0.468072]  [<79075f42>] ? schedule_tail+0x12/0x40
    [    0.468658]  [<79686580>] ret_from_kernel_thread+0x20/0x30
    [    0.469303]  [<79677b10>] ? rest_init+0xc0/0xc0
    [    0.469829] ---[ end trace ad8ac403ff8aef5c ]---
    [    0.470509] ------------[ cut here ]------------
    [    0.471047] WARNING: CPU: 0 PID: 1 at ../kernel/locking/lockdep.c:3161 __lock_acquire.isra.22+0x7aa/0xb00()
    [    0.472163] DEBUG_LOCKS_WARN_ON(id >= MAX_LOCKDEP_KEYS)
    [    0.472774] CPU: 0 PID: 1 Comm: swapper Tainted: G        W      3.17.0-00001-gdd46990-dirty #2
    [    0.473815] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [    0.474492]  78025de0 78025de0 78025da0 7967c6c6 78025dd0 7905e09b 79888931 78025dfc
    [    0.475515]  00000001 79888a93 00000c59 7907f33a 7907f33a 78028000 fffe9d09 00000000
    [    0.476519]  78025de8 7905e10e 00000009 78025de0 79888931 78025dfc 78025e24 7907f33a
    [    0.477523] Call Trace:
    [    0.477821]  [<7967c6c6>] dump_stack+0x16/0x18
    [    0.478352]  [<7905e09b>] warn_slowpath_common+0x6b/0x90
    [    0.478976]  [<7907f33a>] ? __lock_acquire.isra.22+0x7aa/0xb00
    [    0.479658]  [<7907f33a>] ? __lock_acquire.isra.22+0x7aa/0xb00
    [    0.480417]  [<7905e10e>] warn_slowpath_fmt+0x2e/0x30
    [    0.480479]  [<7907f33a>] __lock_acquire.isra.22+0x7aa/0xb00
    [    0.480479]  [<79078aa5>] ? sched_clock_cpu+0xb5/0xf0
    [    0.480479]  [<7907fd06>] lock_acquire+0x56/0x70
    [    0.480479]  [<7925b5e8>] ? driver_detach+0x58/0xa0
    [    0.480479]  [<79682d11>] mutex_lock_nested+0x61/0x2a0
    [    0.480479]  [<7925b5e8>] ? driver_detach+0x58/0xa0
    [    0.480479]  [<7925b5e8>] ? driver_detach+0x58/0xa0
    [    0.480479]  [<7925b5e8>] driver_detach+0x58/0xa0
    [    0.480479]  [<7925a3ff>] bus_remove_driver+0x8f/0xb0
    [    0.480479]  [<7925bf80>] ? class_unregister+0x40/0x80
    [    0.480479]  [<7925bad7>] driver_unregister+0x47/0x50
    [    0.480479]  [<7925c033>] ? class_destroy+0x13/0x20
    [    0.480479]  [<7925d07b>] platform_driver_unregister+0xb/0x10
    [    0.480479]  [<79b51ba0>] init_mac80211_hwsim+0x3e8/0x3f9
    [    0.480479]  [<79b30c58>] do_one_initcall+0x106/0x1a9
    [    0.480479]  [<79b517b8>] ? if_spi_init_module+0xac/0xac
    [    0.480479]  [<79b517b8>] ? if_spi_init_module+0xac/0xac
    [    0.480479]  [<79071935>] ? parse_args+0x2f5/0x480
    [    0.480479]  [<7906b41e>] ? __usermodehelper_set_disable_depth+0x3e/0x50
    [    0.480479]  [<79b30dd9>] kernel_init_freeable+0xde/0x17d
    [    0.480479]  [<79b304d6>] ? do_early_param+0x7a/0x7a
    [    0.480479]  [<79677b1b>] kernel_init+0xb/0xe0
    [    0.480479]  [<79075f42>] ? schedule_tail+0x12/0x40
    [    0.480479]  [<79686580>] ret_from_kernel_thread+0x20/0x30
    [    0.480479]  [<79677b10>] ? rest_init+0xc0/0xc0
    [    0.480479] ---[ end trace ad8ac403ff8aef5d ]---
    [    0.495478] BUG: unable to handle kernel paging request at 00200200
    [    0.496257] IP: [<79682de5>] mutex_lock_nested+0x135/0x2a0
    [    0.496923] *pde = 00000000
    [    0.497290] Oops: 0002 [#1]
    [    0.497653] CPU: 0 PID: 1 Comm: swapper Tainted: G        W      3.17.0-00001-gdd46990-dirty #2
    [    0.498659] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [    0.499321] task: 78028000 ti: 78024000 task.ti: 78024000
    [    0.499955] EIP: 0060:[<79682de5>] EFLAGS: 00010097 CPU: 0
    [    0.500620] EIP is at mutex_lock_nested+0x135/0x2a0
    [    0.501145] EAX: 00200200 EBX: 78397434 ECX: 78397460 EDX: 78025e70
    [    0.501816] ESI: 00000246 EDI: 78028000 EBP: 78025e8c ESP: 78025e54
    [    0.502497]  DS: 007b ES: 007b FS: 0000 GS: 0000 SS: 0068
    [    0.503076] CR0: 8005003b CR2: 00200200 CR3: 01b9d000 CR4: 00000690
    [    0.503773] Stack:
    [    0.503998]  00000000 00000001 00000000 7925b5e8 78397460 7925b5e8 78397474 78397460
    [    0.504944]  00200200 11111111 78025e70 78397000 79ac9d74 00000001 78025ea0 7925b5e8
    [    0.505451]  79ac9d74 fffffffe 00000001 78025ebc 7925a3ff 7a251398 78025ec8 7925bf80
    [    0.505451] Call Trace:
    [    0.505451]  [<7925b5e8>] ? driver_detach+0x58/0xa0
    [    0.505451]  [<7925b5e8>] ? driver_detach+0x58/0xa0
    [    0.505451]  [<7925b5e8>] driver_detach+0x58/0xa0
    [    0.505451]  [<7925a3ff>] bus_remove_driver+0x8f/0xb0
    [    0.505451]  [<7925bf80>] ? class_unregister+0x40/0x80
    [    0.505451]  [<7925bad7>] driver_unregister+0x47/0x50
    [    0.505451]  [<7925c033>] ? class_destroy+0x13/0x20
    [    0.505451]  [<7925d07b>] platform_driver_unregister+0xb/0x10
    [    0.505451]  [<79b51ba0>] init_mac80211_hwsim+0x3e8/0x3f9
    [    0.505451]  [<79b30c58>] do_one_initcall+0x106/0x1a9
    [    0.505451]  [<79b517b8>] ? if_spi_init_module+0xac/0xac
    [    0.505451]  [<79b517b8>] ? if_spi_init_module+0xac/0xac
    [    0.505451]  [<79071935>] ? parse_args+0x2f5/0x480
    [    0.505451]  [<7906b41e>] ? __usermodehelper_set_disable_depth+0x3e/0x50
    [    0.505451]  [<79b30dd9>] kernel_init_freeable+0xde/0x17d
    [    0.505451]  [<79b304d6>] ? do_early_param+0x7a/0x7a
    [    0.505451]  [<79677b1b>] kernel_init+0xb/0xe0
    [    0.505451]  [<79075f42>] ? schedule_tail+0x12/0x40
    [    0.505451]  [<79686580>] ret_from_kernel_thread+0x20/0x30
    [    0.505451]  [<79677b10>] ? rest_init+0xc0/0xc0
    [    0.505451] Code: 89 d8 e8 cf 9b 9f ff 8b 4f 04 8d 55 e4 89 d8 e8 72 9d 9f ff 8d 43 2c 89 c1 89 45 d8 8b 43 30 8d 55 e4 89 53 30 89 4d e4 89 45 e8 <89> 10 8b 55 dc 8b 45 e0 89 7d ec e8 db af 9f ff eb 11 90 31 c0
    [    0.505451] EIP: [<79682de5>] mutex_lock_nested+0x135/0x2a0 SS:ESP 0068:78025e54
    [    0.505451] CR2: 0000000000200200
    [    0.505451] ---[ end trace ad8ac403ff8aef5e ]---
    [    0.505451] Kernel panic - not syncing: Fatal exception
    
    Fixes: 9ea927748ced ("mac80211_hwsim: Register and bind to driver")
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Junjie Mao <eternal.n08@gmail.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 6e2b9478b3c0545793d0da88287dc417146bad90
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Nov 3 14:01:25 2014 +0800

    macvtap: Fix csum_start when VLAN tags are present
    
    commit 3ce9b20f1971690b8b3b620e735ec99431573b39 upstream.
    
    When VLAN is in use in macvtap_put_user, we end up setting
    csum_start to the wrong place.  The result is that the whoever
    ends up doing the checksum setting will corrupt the packet instead
    of writing the checksum to the expected location, usually this
    means writing the checksum with an offset of -4.
    
    This patch fixes this by adjusting csum_start when VLAN tags are
    detected.
    
    Fixes: f09e2249c4f5 ("macvtap: restore vlan header on user read")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8ad766627efd7296267b8ddb231d990f84c90bdd
Author: Ilya Dryomov <idryomov@redhat.com>
Date:   Thu Oct 23 00:25:22 2014 +0400

    libceph: do not crash on large auth tickets
    
    commit aaef31703a0cf6a733e651885bfb49edc3ac6774 upstream.
    
    Large (greater than 32k, the value of PAGE_ALLOC_COSTLY_ORDER) auth
    tickets will have their buffers vmalloc'ed, which leads to the
    following crash in crypto:
    
    [   28.685082] BUG: unable to handle kernel paging request at ffffeb04000032c0
    [   28.686032] IP: [<ffffffff81392b42>] scatterwalk_pagedone+0x22/0x80
    [   28.686032] PGD 0
    [   28.688088] Oops: 0000 [#1] PREEMPT SMP
    [   28.688088] Modules linked in:
    [   28.688088] CPU: 0 PID: 878 Comm: kworker/0:2 Not tainted 3.17.0-vm+ #305
    [   28.688088] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
    [   28.688088] Workqueue: ceph-msgr con_work
    [   28.688088] task: ffff88011a7f9030 ti: ffff8800d903c000 task.ti: ffff8800d903c000
    [   28.688088] RIP: 0010:[<ffffffff81392b42>]  [<ffffffff81392b42>] scatterwalk_pagedone+0x22/0x80
    [   28.688088] RSP: 0018:ffff8800d903f688  EFLAGS: 00010286
    [   28.688088] RAX: ffffeb04000032c0 RBX: ffff8800d903f718 RCX: ffffeb04000032c0
    [   28.688088] RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8800d903f750
    [   28.688088] RBP: ffff8800d903f688 R08: 00000000000007de R09: ffff8800d903f880
    [   28.688088] R10: 18df467c72d6257b R11: 0000000000000000 R12: 0000000000000010
    [   28.688088] R13: ffff8800d903f750 R14: ffff8800d903f8a0 R15: 0000000000000000
    [   28.688088] FS:  00007f50a41c7700(0000) GS:ffff88011fc00000(0000) knlGS:0000000000000000
    [   28.688088] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    [   28.688088] CR2: ffffeb04000032c0 CR3: 00000000da3f3000 CR4: 00000000000006b0
    [   28.688088] Stack:
    [   28.688088]  ffff8800d903f698 ffffffff81392ca8 ffff8800d903f6e8 ffffffff81395d32
    [   28.688088]  ffff8800dac96000 ffff880000000000 ffff8800d903f980 ffff880119b7e020
    [   28.688088]  ffff880119b7e010 0000000000000000 0000000000000010 0000000000000010
    [   28.688088] Call Trace:
    [   28.688088]  [<ffffffff81392ca8>] scatterwalk_done+0x38/0x40
    [   28.688088]  [<ffffffff81392ca8>] scatterwalk_done+0x38/0x40
    [   28.688088]  [<ffffffff81395d32>] blkcipher_walk_done+0x182/0x220
    [   28.688088]  [<ffffffff813990bf>] crypto_cbc_encrypt+0x15f/0x180
    [   28.688088]  [<ffffffff81399780>] ? crypto_aes_set_key+0x30/0x30
    [   28.688088]  [<ffffffff8156c40c>] ceph_aes_encrypt2+0x29c/0x2e0
    [   28.688088]  [<ffffffff8156d2a3>] ceph_encrypt2+0x93/0xb0
    [   28.688088]  [<ffffffff8156d7da>] ceph_x_encrypt+0x4a/0x60
    [   28.688088]  [<ffffffff8155b39d>] ? ceph_buffer_new+0x5d/0xf0
    [   28.688088]  [<ffffffff8156e837>] ceph_x_build_authorizer.isra.6+0x297/0x360
    [   28.688088]  [<ffffffff8112089b>] ? kmem_cache_alloc_trace+0x11b/0x1c0
    [   28.688088]  [<ffffffff8156b496>] ? ceph_auth_create_authorizer+0x36/0x80
    [   28.688088]  [<ffffffff8156ed83>] ceph_x_create_authorizer+0x63/0xd0
    [   28.688088]  [<ffffffff8156b4b4>] ceph_auth_create_authorizer+0x54/0x80
    [   28.688088]  [<ffffffff8155f7c0>] get_authorizer+0x80/0xd0
    [   28.688088]  [<ffffffff81555a8b>] prepare_write_connect+0x18b/0x2b0
    [   28.688088]  [<ffffffff81559289>] try_read+0x1e59/0x1f10
    
    This is because we set up crypto scatterlists as if all buffers were
    kmalloc'ed.  Fix it.
    
    Signed-off-by: Ilya Dryomov <idryomov@redhat.com>
    Reviewed-by: Sage Weil <sage@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 89e4b77675e4124a46ab3ee24da0558ee2639167
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Oct 6 21:01:17 2014 +0400

    xtensa: re-wire umount syscall to sys_oldumount
    
    commit 2651cc6974d47fc43bef1cd8cd26966e4f5ba306 upstream.
    
    Userspace actually passes single parameter (path name) to the umount
    syscall, so new umount just fails. Fix it by requesting old umount
    syscall implementation and re-wiring umount to it.
    
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 9e7e0e10a13b7754b9a98fbdae557614b05e8875
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 11 15:45:57 2014 +0100

    ALSA: usb-audio: Fix memory leak in FTU quirk
    
    commit 1a290581ded60e87276741f8ca97b161d2b226fc upstream.
    
    M-audio FastTrack Ultra quirk doesn't release the kzalloc'ed memory.
    This patch adds the private_free callback to release it properly.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 9c599f2b9b023abcff31e49dca754bf92170a023
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Oct 27 10:22:56 2014 -0400

    ahci: disable MSI instead of NCQ on Samsung pci-e SSDs on macbooks
    
    commit 66a7cbc303f4d28f201529b06061944d51ab530c upstream.
    
    Samsung pci-e SSDs on macbooks failed miserably on NCQ commands, so
    67809f85d31e ("ahci: disable NCQ on Samsung pci-e SSDs on macbooks")
    disabled NCQ on them.  It turns out that NCQ is fine as long as MSI is
    not used, so let's turn off MSI and leave NCQ on.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=60731
    Tested-by: <dorin@i51.org>
    Tested-by: Imre Kaloz <kaloz@openwrt.org>
    Fixes: 67809f85d31e ("ahci: disable NCQ on Samsung pci-e SSDs on macbooks")
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 8a4895938980c3a2b008f47fa5198a504fa39286
Author: James Ralston <james.d.ralston@intel.com>
Date:   Mon Oct 13 15:16:38 2014 -0700

    ahci: Add Device IDs for Intel Sunrise Point PCH
    
    commit 690000b930456a98663567d35dd5c54b688d1e3f upstream.
    
    This patch adds the AHCI-mode SATA Device IDs for the Intel Sunrise Point PCH.
    
    Signed-off-by: James Ralston <james.d.ralston@intel.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 24c0902a16c983802418f4a77b7fca0604f3a3e6
Author: Miklos Szeredi <mszeredi@suse.cz>
Date:   Tue Nov 4 11:27:12 2014 +0100

    audit: keep inode pinned
    
    commit 799b601451b21ebe7af0e6e8f6e2ccd4683c5064 upstream.
    
    Audit rules disappear when an inode they watch is evicted from the cache.
    This is likely not what we want.
    
    The guilty commit is "fsnotify: allow marks to not pin inodes in core",
    which didn't take into account that audit_tree adds watches with a zero
    mask.
    
    Adding any mask should fix this.
    
    Fixes: 90b1e7a57880 ("fsnotify: allow marks to not pin inodes in core")
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
    Signed-off-by: Paul Moore <pmoore@redhat.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit d45d0a5e0fad7acffdeac6a0bfcabfefaccd7d28
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Fri Sep 5 15:13:52 2014 -0700

    x86, x32, audit: Fix x32's AUDIT_ARCH wrt audit
    
    commit 81f49a8fd7088cfcb588d182eeede862c0e3303e upstream.
    
    is_compat_task() is the wrong check for audit arch; the check should
    be is_ia32_task(): x32 syscalls should be AUDIT_ARCH_X86_64, not
    AUDIT_ARCH_I386.
    
    CONFIG_AUDITSYSCALL is currently incompatible with x32, so this has
    no visible effect.
    
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    Link: http://lkml.kernel.org/r/a0138ed8c709882aec06e4acc30bfa9b623b8717.1409954077.git.luto@amacapital.net
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit c150584886e5542df2a9fb4d0189f492d9d69b35
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Nov 3 04:30:13 2014 +0800

    tun: Fix csum_start with VLAN acceleration
    
    commit a8f9bfdf982e2b1fb9f094e4de9ab08c57f3d2fd upstream.
    
    When VLAN acceleration is in use on the xmit path, we end up
    setting csum_start to the wrong place.  The result is that the
    whoever ends up doing the checksum setting will corrupt the packet
    instead of writing the checksum to the expected location, usually
    this means writing the checksum with an offset of -4.
    
    This patch fixes this by adjusting csum_start when VLAN acceleration
    is detected.
    
    Fixes: 6680ec68eff4 ("tuntap: hardware vlan tx support")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 50e52368e667f2a8d5a43c0c9f60b4391a5bc715
Author: Greg Kurz <gkurz@linux.vnet.ibm.com>
Date:   Fri Oct 31 07:50:11 2014 +0100

    hwrng: pseries - port to new read API and fix stack corruption
    
    commit 24c65bc7037e7d0f362c0df70d17dd72ee64b8b9 upstream.
    
    The add_early_randomness() function in drivers/char/hw_random/core.c passes
    a 16-byte buffer to pseries_rng_data_read(). Unfortunately, plpar_hcall()
    returns four 64-bit values and trashes 16 bytes on the stack.
    
    This bug has been lying around for a long time. It got unveiled by:
    
    commit d3cc7996473a7bdd33256029988ea690754e4e2a
    Author: Amit Shah <amit.shah@redhat.com>
    Date:   Thu Jul 10 15:42:34 2014 +0530
    
        hwrng: fetch randomness only after device init
    
    It may trig a oops while loading or unloading the pseries-rng module for both
    PowerVM and PowerKVM guests.
    
    This patch does two things:
    - pass an intermediate well sized buffer to plpar_hcall(). This is acceptalbe
      since we're not on a hot path.
    - move to the new read API so that we know the return buffer size for sure.
    
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit e5fbc698350a42a56f5c165dbb6283d69b65d3f3
Author: Cristian Stoica <cristian.stoica@freescale.com>
Date:   Thu Aug 14 13:51:56 2014 +0300

    crypto: caam - remove duplicated sg copy functions
    
    commit 307fd543f3d23f8f56850eca1b27b1be2fe71017 upstream.
    
    Replace equivalent (and partially incorrect) scatter-gather functions
    with ones from crypto-API.
    
    The replacement is motivated by page-faults in sg_copy_part triggered
    by successive calls to crypto_hash_update. The following fault appears
    after calling crypto_ahash_update twice, first with 13 and then
    with 285 bytes:
    
    Unable to handle kernel paging request for data at address 0x00000008
    Faulting instruction address: 0xf9bf9a8c
    Oops: Kernel access of bad area, sig: 11 [#1]
    SMP NR_CPUS=8 CoreNet Generic
    Modules linked in: tcrypt(+) caamhash caam_jr caam tls
    CPU: 6 PID: 1497 Comm: cryptomgr_test Not tainted
    3.12.19-rt30-QorIQ-SDK-V1.6+g9fda9f2 #75
    task: e9308530 ti: e700e000 task.ti: e700e000
    NIP: f9bf9a8c LR: f9bfcf28 CTR: c0019ea0
    REGS: e700fb80 TRAP: 0300   Not tainted
    (3.12.19-rt30-QorIQ-SDK-V1.6+g9fda9f2)
    MSR: 00029002 <CE,EE,ME>  CR: 44f92024  XER: 20000000
    DEAR: 00000008, ESR: 00000000
    
    GPR00: f9bfcf28 e700fc30 e9308530 e70b1e55 00000000 ffffffdd e70b1e54 0bebf888
    GPR08: 902c7ef5 c0e771e2 00000002 00000888 c0019ea0 00000000 00000000 c07a4154
    GPR16: c08d0000 e91a8f9c 00000001 e98fb400 00000100 e9c83028 e70b1e08 e70b1d48
    GPR24: e992ce10 e70b1dc8 f9bfe4f4 e70b1e55 ffffffdd e70b1ce0 00000000 00000000
    NIP [f9bf9a8c] sg_copy+0x1c/0x100 [caamhash]
    LR [f9bfcf28] ahash_update_no_ctx+0x628/0x660 [caamhash]
    Call Trace:
    [e700fc30] [f9bf9c50] sg_copy_part+0xe0/0x160 [caamhash] (unreliable)
    [e700fc50] [f9bfcf28] ahash_update_no_ctx+0x628/0x660 [caamhash]
    [e700fcb0] [f954e19c] crypto_tls_genicv+0x13c/0x300 [tls]
    [e700fd10] [f954e65c] crypto_tls_encrypt+0x5c/0x260 [tls]
    [e700fd40] [c02250ec] __test_aead.constprop.9+0x2bc/0xb70
    [e700fe40] [c02259f0] alg_test_aead+0x50/0xc0
    [e700fe60] [c02241e4] alg_test+0x114/0x2e0
    [e700fee0] [c022276c] cryptomgr_test+0x4c/0x60
    [e700fef0] [c004f658] kthread+0x98/0xa0
    [e700ff40] [c000fd04] ret_from_kernel_thread+0x5c/0x64
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Cristian Stoica <cristian.stoica@freescale.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 14ddbde7a77f3647238133ba3c4c84f64abcdd8d
Author: Weijie Yang <weijie.yang@samsung.com>
Date:   Thu Nov 13 15:19:05 2014 -0800

    zram: avoid kunmap_atomic() of a NULL pointer
    
    commit c406515239376fc93a30d5d03192182160cbd3fb upstream.
    
    zram could kunmap_atomic() a NULL pointer in a rare situation: a zram
    page becomes a full-zeroed page after a partial write io.  The current
    code doesn't handle this case and performs kunmap_atomic() on a NULL
    pointer, which panics the kernel.
    
    This patch fixes this issue.
    
    Signed-off-by: Weijie Yang <weijie.yang@samsung.com>
    Cc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Dan Streetman <ddstreet@ieee.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Cc: Weijie Yang <weijie.yang.kh@gmail.com>
    Acked-by: Jerome Marchand <jmarchan@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 9546673d9dc0c6c642d7f4740622d15d7fb980f9
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Wed Nov 19 18:54:40 2014 +0200

    iwlwifi: configure the LTR
    
    commit 9180ac50716a097a407c6d7e7e4589754a922260 upstream.
    
    The LTR is the handshake between the device and the root
    complex about the latency allowed when the bus exits power
    save. This configuration was missing and this led to high
    latency in the link power up. The end user could experience
    high latency in the network because of this.
    
    Cc: <stable@vger.kernel.org> [3.10+]
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit b4dc3a3ad9a91453d3d72a6a3e5218d670dfc7dd
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Wed Sep 25 19:24:17 2013 +1000

    hwrng: pseries - Return errors to upper levels in pseries-rng.c
    
    commit d319fe2a0af3509f959d5195fb8916accbf14857 upstream.
    
    We don't expect to get errors from the hypervisor when reading the rng,
    but if we do we should pass the error up to the hwrng driver. Otherwise
    the hwrng driver will continue calling us forever.
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 1c854a6cd16b5096200fb47d1418b1d20f7df6bd
Author: Andreas Larsson <andreas@gaisler.com>
Date:   Wed Nov 5 15:52:08 2014 +0100

    sparc32: Implement xchg and atomic_xchg using ATOMIC_HASH locks
    
    [ Upstream commit 1a17fdc4f4ed06b63fac1937470378a5441a663a ]
    
    Atomicity between xchg and cmpxchg cannot be guaranteed when xchg is
    implemented with a swap and cmpxchg is implemented with locks.
    Without this, e.g. mcs_spin_lock and mcs_spin_unlock are broken.
    
    Signed-off-by: Andreas Larsson <andreas@gaisler.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a80e35d99a6e184732ab484efd89af2b06f9e174
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Nov 7 09:50:48 2014 -0800

    sparc64: Do irq_{enter,exit}() around generic_smp_call_function*().
    
    [ Upstream commit ab5c780913bca0a5763ca05dd5c2cb5cb08ccb26 ]
    
    Otherwise rcu_irq_{enter,exit}() do not happen and we get dumps like:
    
    ====================
    [  188.275021] ===============================
    [  188.309351] [ INFO: suspicious RCU usage. ]
    [  188.343737] 3.18.0-rc3-00068-g20f3963-dirty #54 Not tainted
    [  188.394786] -------------------------------
    [  188.429170] include/linux/rcupdate.h:883 rcu_read_lock() used
    illegally while idle!
    [  188.505235]
    other info that might help us debug this:
    
    [  188.554230]
    RCU used illegally from idle CPU!
    rcu_scheduler_active = 1, debug_locks = 0
    [  188.637587] RCU used illegally from extended quiescent state!
    [  188.690684] 3 locks held by swapper/7/0:
    [  188.721932]  #0:  (&x->wait#11){......}, at: [<0000000000495de8>] complete+0x8/0x60
    [  188.797994]  #1:  (&p->pi_lock){-.-.-.}, at: [<000000000048510c>] try_to_wake_up+0xc/0x400
    [  188.881343]  #2:  (rcu_read_lock){......}, at: [<000000000048a910>] select_task_rq_fair+0x90/0xb40
    [  188.973043]stack backtrace:
    [  188.993879] CPU: 7 PID: 0 Comm: swapper/7 Not tainted 3.18.0-rc3-00068-g20f3963-dirty #54
    [  189.076187] Call Trace:
    [  189.089719]  [0000000000499360] lockdep_rcu_suspicious+0xe0/0x100
    [  189.147035]  [000000000048a99c] select_task_rq_fair+0x11c/0xb40
    [  189.202253]  [00000000004852d8] try_to_wake_up+0x1d8/0x400
    [  189.252258]  [000000000048554c] default_wake_function+0xc/0x20
    [  189.306435]  [0000000000495554] __wake_up_common+0x34/0x80
    [  189.356448]  [00000000004955b4] __wake_up_locked+0x14/0x40
    [  189.406456]  [0000000000495e08] complete+0x28/0x60
    [  189.448142]  [0000000000636e28] blk_end_sync_rq+0x8/0x20
    [  189.496057]  [0000000000639898] __blk_mq_end_request+0x18/0x60
    [  189.550249]  [00000000006ee014] scsi_end_request+0x94/0x180
    [  189.601286]  [00000000006ee334] scsi_io_completion+0x1d4/0x600
    [  189.655463]  [00000000006e51c4] scsi_finish_command+0xc4/0xe0
    [  189.708598]  [00000000006ed958] scsi_softirq_done+0x118/0x140
    [  189.761735]  [00000000006398ec] __blk_mq_complete_request_remote+0xc/0x20
    [  189.827383]  [00000000004c75d0] generic_smp_call_function_single_interrupt+0x150/0x1c0
    [  189.906581]  [000000000043e514] smp_call_function_single_client+0x14/0x40
    ====================
    
    Based almost entirely upon a patch by Paul E. McKenney.
    
    Reported-by: Meelis Roos <mroos@linux.ee>
    Tested-by: Meelis Roos <mroos@linux.ee>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 80059d68eda6b553d0e6e730bfb37e3c2700ce84
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Nov 1 00:33:58 2014 -0400

    sparc64: Fix crashes in schizo_pcierr_intr_other().
    
    [ Upstream commit 7da89a2a3776442a57e918ca0b8678d1b16a7072 ]
    
    Meelis Roos reports crashes during bootup on a V480 that look like
    this:
    
    ====================
    [   61.300577] PCI: Scanning PBM /pci@9,600000
    [   61.304867] schizo f009b070: PCI host bridge to bus 0003:00
    [   61.310385] pci_bus 0003:00: root bus resource [io  0x7ffe9000000-0x7ffe9ffffff] (bus address [0x0000-0xffffff])
    [   61.320515] pci_bus 0003:00: root bus resource [mem 0x7fb00000000-0x7fbffffffff] (bus address [0x00000000-0xffffffff])
    [   61.331173] pci_bus 0003:00: root bus resource [bus 00]
    [   61.385344] Unable to handle kernel NULL pointer dereference
    [   61.390970] tsk->{mm,active_mm}->context = 0000000000000000
    [   61.396515] tsk->{mm,active_mm}->pgd = fff000b000002000
    [   61.401716]               \|/ ____ \|/
    [   61.401716]               "@'/ .. \`@"
    [   61.401716]               /_| \__/ |_\
    [   61.401716]                  \__U_/
    [   61.416362] swapper/0(0): Oops [#1]
    [   61.419837] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.18.0-rc1-00422-g2cc9188-dirty #24
    [   61.427975] task: fff000b0fd8e9c40 ti: fff000b0fd928000 task.ti: fff000b0fd928000
    [   61.435426] TSTATE: 0000004480e01602 TPC: 00000000004455e4 TNPC: 00000000004455e8 Y: 00000000    Not tainted
    [   61.445230] TPC: <schizo_pcierr_intr+0x104/0x560>
    [   61.449897] g0: 0000000000000000 g1: 0000000000000000 g2: 0000000000a10f78 g3: 000000000000000a
    [   61.458563] g4: fff000b0fd8e9c40 g5: fff000b0fdd82000 g6: fff000b0fd928000 g7: 000000000000000a
    [   61.467229] o0: 000000000000003d o1: 0000000000000000 o2: 0000000000000006 o3: fff000b0ffa5fc7e
    [   61.475894] o4: 0000000000060000 o5: c000000000000000 sp: fff000b0ffa5f3c1 ret_pc: 00000000004455cc
    [   61.484909] RPC: <schizo_pcierr_intr+0xec/0x560>
    [   61.489500] l0: fff000b0fd8e9c40 l1: 0000000000a20800 l2: 0000000000000000 l3: 000000000119a430
    [   61.498164] l4: 0000000001742400 l5: 00000000011cfbe0 l6: 00000000011319c0 l7: fff000b0fd8ea348
    [   61.506830] i0: 0000000000000000 i1: fff000b0fdb34000 i2: 0000000320000000 i3: 0000000000000000
    [   61.515497] i4: 00060002010b003f i5: 0000040004e02000 i6: fff000b0ffa5f481 i7: 00000000004a9920
    [   61.524175] I7: <handle_irq_event_percpu+0x40/0x140>
    [   61.529099] Call Trace:
    [   61.531531]  [00000000004a9920] handle_irq_event_percpu+0x40/0x140
    [   61.537681]  [00000000004a9a58] handle_irq_event+0x38/0x80
    [   61.543145]  [00000000004ac77c] handle_fasteoi_irq+0xbc/0x200
    [   61.548860]  [00000000004a9084] generic_handle_irq+0x24/0x40
    [   61.554500]  [000000000042be0c] handler_irq+0xac/0x100
    ====================
    
    The problem is that pbm->pci_bus->self is NULL.
    
    This code is trying to go through the standard PCI config space
    interfaces to read the PCI controller's PCI_STATUS register.
    
    This doesn't work, because we more often than not do not enumerate
    the PCI controller as a bonafide PCI device during the OF device
    node scan.  Therefore bus->self remains NULL.
    
    Existing common code for PSYCHO and PSYCHO-like PCI controllers
    handles this properly, by doing the config space access directly.
    
    Do the same here, pbm->pci_ops->{read,write}().
    
    Reported-by: Meelis Roos <mroos@linux.ee>
    Tested-by: Meelis Roos <mroos@linux.ee>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 6ec85a4339cb39197b1c82f1238ca479f086ea26
Author: Dwight Engen <dwight.engen@oracle.com>
Date:   Thu Oct 30 15:55:35 2014 -0400

    sunvdc: don't call VD_OP_GET_VTOC
    
    [ Upstream commit 85b0c6e62c48bb9179fd5b3e954f362fb346cbd5 ]
    
    The VD_OP_GET_VTOC operation will succeed only if the vdisk backend has a
    VTOC label, otherwise it will fail. In particular, it will return error
    48 (ENOTSUP) if the disk has an EFI label. VTOC disk labels are already
    handled by directly reading the disk in block/partitions/sun.c (enabled by
    CONFIG_SUN_PARTITION which defaults to y on SPARC). Since port->label is
    unused in the driver, remove the call and the field.
    
    Signed-off-by: Dwight Engen <dwight.engen@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 4a08354c17c8eea62b9e058d762324aa77e50e84
Author: Dwight Engen <dwight.engen@oracle.com>
Date:   Fri Sep 19 09:43:02 2014 -0400

    vio: fix reuse of vio_dring slot
    
    [ Upstream commit d0aedcd4f14a22e23b313f42b7e6e6ebfc0fbc31 ]
    
    vio_dring_avail() will allow use of every dring entry, but when the last
    entry is allocated then dr->prod == dr->cons which is indistinguishable from
    the ring empty condition. This causes the next allocation to reuse an entry.
    When this happens in sunvdc, the server side vds driver begins nack'ing the
    messages and ends up resetting the ldc channel. This problem does not effect
    sunvnet since it checks for < 2.
    
    The fix here is to just never allocate the very last dring slot so that full
    and empty are not the same condition. The request start path was changed to
    check for the ring being full a bit earlier, and to stop the blk_queue if
    there is no space left. The blk_queue will be restarted once the ring is
    only half full again. The number of ring entries was increased to 512 which
    matches the sunvnet and Solaris vdc drivers, and greatly reduces the
    frequency of hitting the ring full condition and the associated blk_queue
    stop/starting. The checks in sunvent were adjusted to account for
    vio_dring_avail() returning 1 less.
    
    Orabug: 19441666
    OraBZ: 14983
    
    Signed-off-by: Dwight Engen <dwight.engen@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit d19343d672650096ab5e5966aaaa4665f9a0fdd9
Author: Dwight Engen <dwight.engen@oracle.com>
Date:   Fri Sep 19 09:42:53 2014 -0400

    sunvdc: limit each sg segment to a page
    
    [ Upstream commit 5eed69ffd248c9f68f56c710caf07db134aef28b ]
    
    ldc_map_sg() could fail its check that the number of pages referred to
    by the sg scatterlist was <= the number of cookies.
    
    This fixes the issue by doing a similar thing to the xen-blkfront driver,
    ensuring that the scatterlist will only ever contain a segment count <=
    port->ring_cookies, and each segment will be page aligned, and <= page
    size. This ensures that the scatterlist is always mappable.
    
    Orabug: 19347817
    OraBZ: 15945
    
    Signed-off-by: Dwight Engen <dwight.engen@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 2c6b39c0b39d7a0e39b88612d4538d46a682491b
Author: Allen Pais <allen.pais@oracle.com>
Date:   Fri Sep 19 09:42:26 2014 -0400

    sunvdc: compute vdisk geometry from capacity
    
    [ Upstream commit de5b73f08468b4fc5e2f6d1505f650262622f78b ]
    
    The LDom diskserver doesn't return reliable geometry data. In addition,
    the types for all fields in the vio_disk_geom are u16, which were being
    truncated in the cast into the u8's of the Linux struct hd_geometry.
    
    Modify vdc_getgeo() to compute the geometry from the disk's capacity in a
    manner consistent with xen-blkfront::blkif_getgeo().
    
    Signed-off-by: Dwight Engen <dwight.engen@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 81e8f4169909dc2b4e3a5c21411d2dc3750d693c
Author: Allen Pais <allen.pais@oracle.com>
Date:   Fri Sep 19 09:42:14 2014 -0400

    sunvdc: add cdrom and v1.1 protocol support
    
    [ Upstream commit 9bce21828d54a95143f1b74619705c2dd8e88b92 ]
    
    Interpret the media type from v1.1 protocol to support CDROM/DVD.
    
    For v1.0 protocol, a disk's size continues to be calculated from the
    geometry returned by the vdisk server. The geometry returned by the server
    can be less than the actual number of sectors available in the backing
    image/device due to the rounding in the division used to compute the
    geometry in the vdisk server.
    
    In v1.1 protocol a disk's actual size in sectors is returned during the
    handshake. Use this size when v1.1 protocol is negotiated. Since this size
    will always be larger than the former geometry computed size, disks created
    under v1.0 will be forwards compatible to v1.1, but not vice versa.
    
    Signed-off-by: Dwight Engen <dwight.engen@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 7e9acaf571479dce19aad5a2ab45a64db1d69c4a
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Nov 10 18:00:09 2014 +0100

    net: sctp: fix memory leak in auth key management
    
    [ Upstream commit 4184b2a79a7612a9272ce20d639934584a1f3786 ]
    
    A very minimal and simple user space application allocating an SCTP
    socket, setting SCTP_AUTH_KEY setsockopt(2) on it and then closing
    the socket again will leak the memory containing the authentication
    key from user space:
    
    unreferenced object 0xffff8800837047c0 (size 16):
      comm "a.out", pid 2789, jiffies 4296954322 (age 192.258s)
      hex dump (first 16 bytes):
        01 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<ffffffff816d7e8e>] kmemleak_alloc+0x4e/0xb0
        [<ffffffff811c88d8>] __kmalloc+0xe8/0x270
        [<ffffffffa0870c23>] sctp_auth_create_key+0x23/0x50 [sctp]
        [<ffffffffa08718b1>] sctp_auth_set_key+0xa1/0x140 [sctp]
        [<ffffffffa086b383>] sctp_setsockopt+0xd03/0x1180 [sctp]
        [<ffffffff815bfd94>] sock_common_setsockopt+0x14/0x20
        [<ffffffff815beb61>] SyS_setsockopt+0x71/0xd0
        [<ffffffff816e58a9>] system_call_fastpath+0x12/0x17
        [<ffffffffffffffff>] 0xffffffffffffffff
    
    This is bad because of two things, we can bring down a machine from
    user space when auth_enable=1, but also we would leave security sensitive
    keying material in memory without clearing it after use. The issue is
    that sctp_auth_create_key() already sets the refcount to 1, but after
    allocation sctp_auth_set_key() does an additional refcount on it, and
    thus leaving it around when we free the socket.
    
    Fixes: 65b07e5d0d0 ("[SCTP]: API updates to suport SCTP-AUTH extensions.")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Cc: Vlad Yasevich <vyasevich@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 4008f1dbe6fea8114e7f79ed2d238e369dc9138f
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Nov 10 17:54:26 2014 +0100

    net: sctp: fix NULL pointer dereference in af->from_addr_param on malformed packet
    
    [ Upstream commit e40607cbe270a9e8360907cb1e62ddf0736e4864 ]
    
    An SCTP server doing ASCONF will panic on malformed INIT ping-of-death
    in the form of:
    
      ------------ INIT[PARAM: SET_PRIMARY_IP] ------------>
    
    While the INIT chunk parameter verification dissects through many things
    in order to detect malformed input, it misses to actually check parameters
    inside of parameters. E.g. RFC5061, section 4.2.4 proposes a 'set primary
    IP address' parameter in ASCONF, which has as a subparameter an address
    parameter.
    
    So an attacker may send a parameter type other than SCTP_PARAM_IPV4_ADDRESS
    or SCTP_PARAM_IPV6_ADDRESS, param_type2af() will subsequently return 0
    and thus sctp_get_af_specific() returns NULL, too, which we then happily
    dereference unconditionally through af->from_addr_param().
    
    The trace for the log:
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000078
    IP: [<ffffffffa01e9c62>] sctp_process_init+0x492/0x990 [sctp]
    PGD 0
    Oops: 0000 [#1] SMP
    [...]
    Pid: 0, comm: swapper Not tainted 2.6.32-504.el6.x86_64 #1 Bochs Bochs
    RIP: 0010:[<ffffffffa01e9c62>]  [<ffffffffa01e9c62>] sctp_process_init+0x492/0x990 [sctp]
    [...]
    Call Trace:
     <IRQ>
     [<ffffffffa01f2add>] ? sctp_bind_addr_copy+0x5d/0xe0 [sctp]
     [<ffffffffa01e1fcb>] sctp_sf_do_5_1B_init+0x21b/0x340 [sctp]
     [<ffffffffa01e3751>] sctp_do_sm+0x71/0x1210 [sctp]
     [<ffffffffa01e5c09>] ? sctp_endpoint_lookup_assoc+0xc9/0xf0 [sctp]
     [<ffffffffa01e61f6>] sctp_endpoint_bh_rcv+0x116/0x230 [sctp]
     [<ffffffffa01ee986>] sctp_inq_push+0x56/0x80 [sctp]
     [<ffffffffa01fcc42>] sctp_rcv+0x982/0xa10 [sctp]
     [<ffffffffa01d5123>] ? ipt_local_in_hook+0x23/0x28 [iptable_filter]
     [<ffffffff8148bdc9>] ? nf_iterate+0x69/0xb0
     [<ffffffff81496d10>] ? ip_local_deliver_finish+0x0/0x2d0
     [<ffffffff8148bf86>] ? nf_hook_slow+0x76/0x120
     [<ffffffff81496d10>] ? ip_local_deliver_finish+0x0/0x2d0
    [...]
    
    A minimal way to address this is to check for NULL as we do on all
    other such occasions where we know sctp_get_af_specific() could
    possibly return with NULL.
    
    Fixes: d6de3097592b ("[SCTP]: Add the handling of "Set Primary IP Address" parameter to INIT")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Cc: Vlad Yasevich <vyasevich@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit b27471ba5de8c062caf9819a5ed26e429cde9869
Author: Marcelo Leitner <mleitner@redhat.com>
Date:   Thu Nov 13 14:43:08 2014 -0200

    vxlan: Do not reuse sockets for a different address family
    
    [ Upstream commit 19ca9fc1445b76b60d34148f7ff837b055f5dcf3 ]
    
    Currently, we only match against local port number in order to reuse
    socket. But if this new vxlan wants an IPv6 socket and a IPv4 one bound
    to that port, vxlan will reuse an IPv4 socket as IPv6 and a panic will
    follow. The following steps reproduce it:
    
       # ip link add vxlan6 type vxlan id 42 group 229.10.10.10 \
           srcport 5000 6000 dev eth0
       # ip link add vxlan7 type vxlan id 43 group ff0e::110 \
           srcport 5000 6000 dev eth0
       # ip link set vxlan6 up
       # ip link set vxlan7 up
       <panic>
    
    [    4.187481] BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
    ...
    [    4.188076] Call Trace:
    [    4.188085]  [<ffffffff81667c4a>] ? ipv6_sock_mc_join+0x3a/0x630
    [    4.188098]  [<ffffffffa05a6ad6>] vxlan_igmp_join+0x66/0xd0 [vxlan]
    [    4.188113]  [<ffffffff810a3430>] process_one_work+0x220/0x710
    [    4.188125]  [<ffffffff810a33c4>] ? process_one_work+0x1b4/0x710
    [    4.188138]  [<ffffffff810a3a3b>] worker_thread+0x11b/0x3a0
    [    4.188149]  [<ffffffff810a3920>] ? process_one_work+0x710/0x710
    
    So address family must also match in order to reuse a socket.
    
    Reported-by: Jean-Tsung Hsiao <jhsiao@redhat.com>
    Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 1efcf6b31e0d8fcef45693930735cd4a9a385356
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Mon Nov 3 09:19:30 2014 +0100

    gre6: Move the setting of dev->iflink into the ndo_init functions.
    
    [ Upstream commit f03eb128e3f4276f46442d14f3b8f864f3775821 ]
    
    Otherwise it gets overwritten by register_netdev().
    
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit e053cab2408920963e9e121a60f1ca949c269a96
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Mon Nov 3 09:19:29 2014 +0100

    sit: Use ipip6_tunnel_init as the ndo_init function.
    
    [ Upstream commit ebe084aafb7e93adf210e80043c9f69adf56820d ]
    
    ipip6_tunnel_init() sets the dev->iflink via a call to
    ipip6_tunnel_bind_dev(). After that, register_netdevice()
    sets dev->iflink = -1. So we loose the iflink configuration
    for ipv6 tunnels. Fix this by using ipip6_tunnel_init() as the
    ndo_init function. Then ipip6_tunnel_init() is called after
    dev->iflink is set to -1 from register_netdevice().
    
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit c024c280512fc4a76237b647218366bdef6f3fe4
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Mon Nov 3 09:19:27 2014 +0100

    ip6_tunnel: Use ip6_tnl_dev_init as the ndo_init function.
    
    [ Upstream commit 6c6151daaf2d8dc2046d9926539feed5f66bf74e ]
    
    ip6_tnl_dev_init() sets the dev->iflink via a call to
    ip6_tnl_link_config(). After that, register_netdevice()
    sets dev->iflink = -1. So we loose the iflink configuration
    for ipv6 tunnels. Fix this by using ip6_tnl_dev_init() as the
    ndo_init function. Then ip6_tnl_dev_init() is called after
    dev->iflink is set to -1 from register_netdevice().
    
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit f9a3dbb8fd1853c16930b2c95eefa34a324eca19
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Oct 6 10:55:49 2014 -0700

    Input: evdev - fix EVIOCG{type} ioctl
    
    commit 7c4f56070fde2367766fa1fb04852599b5e1ad35 upstream.
    
    The 'max' size passed into the function is measured in number of bits
    (KEY_MAX, LED_MAX, etc) so we need to convert it accordingly before trying
    to copy the data out, otherwise we will try copying too much and end up
    with up with a page fault.
    
    Reported-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
