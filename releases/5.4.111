commit a49e5ea5e0450a3feb1aaae2554dcbc3d20eee38
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Apr 10 13:34:32 2021 +0200

    Linux 5.4.111
    
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210409095302.894568462@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45f540622d5b5cfc68a2a577e48b061c865bd313
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Fri Mar 12 21:07:08 2021 -0800

    init/Kconfig: make COMPILE_TEST depend on HAS_IOMEM
    
    commit ea29b20a828511de3348334e529a3d046a180416 upstream.
    
    I read the commit log of the following two:
    
    - bc083a64b6c0 ("init/Kconfig: make COMPILE_TEST depend on !UML")
    - 334ef6ed06fa ("init/Kconfig: make COMPILE_TEST depend on !S390")
    
    Both are talking about HAS_IOMEM dependency missing in many drivers.
    
    So, 'depends on HAS_IOMEM' seems the direct, sensible solution to me.
    
    This does not change the behavior of UML. UML still cannot enable
    COMPILE_TEST because it does not provide HAS_IOMEM.
    
    The current dependency for S390 is too strong. Under the condition of
    CONFIG_PCI=y, S390 provides HAS_IOMEM, hence can enable COMPILE_TEST.
    
    I also removed the meaningless 'default n'.
    
    Link: https://lkml.kernel.org/r/20210224140809.1067582-1-masahiroy@kernel.org
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Arnd Bergmann <arnd@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: KP Singh <kpsingh@google.com>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Terrell <terrelln@fb.com>
    Cc: Quentin Perret <qperret@google.com>
    Cc: Valentin Schneider <valentin.schneider@arm.com>
    Cc: "Enrico Weigelt, metux IT consult" <lkml@metux.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43dd03f088191e6c85529e649ebb5c54994486ee
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Wed Nov 18 21:32:33 2020 +0100

    init/Kconfig: make COMPILE_TEST depend on !S390
    
    commit 334ef6ed06fa1a54e35296b77b693bcf6d63ee9e upstream.
    
    While allmodconfig and allyesconfig build for s390 there are also
    various bots running compile tests with randconfig, where PCI is
    disabled. This reveals that a lot of drivers should actually depend on
    HAS_IOMEM.
    Adding this to each device driver would be a never ending story,
    therefore just disable COMPILE_TEST for s390.
    
    The reasoning is more or less the same as described in
    commit bc083a64b6c0 ("init/Kconfig: make COMPILE_TEST depend on !UML").
    
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: Arnd Bergmann <arnd@kernel.org>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5eb7e12a75df45908d8d9399c3288fc29e61184
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Fri Apr 2 13:08:41 2021 -0700

    nvme-mpath: replace direct_make_request with generic_make_request
    
    The below patches caused a regression in a multipath setup:
    Fixes: 9f98772ba307 ("nvme-rdma: fix controller reset hang during traffic")
    Fixes: 2875b0aecabe ("nvme-tcp: fix controller reset hang during traffic")
    
    These patches on their own are correct because they fixed a controller reset
    regression.
    
    When we reset/teardown a controller, we must freeze and quiesce the namespaces
    request queues to make sure that we safely stop inflight I/O submissions.
    Freeze is mandatory because if our hctx map changed between reconnects,
    blk_mq_update_nr_hw_queues will immediately attempt to freeze the queue, and
    if it still has pending submissions (that are still quiesced) it will hang.
    This is what the above patches fixed.
    
    However, by freezing the namespaces request queues, and only unfreezing them
    when we successfully reconnect, inflight submissions that are running
    concurrently can now block grabbing the nshead srcu until either we successfully
    reconnect or ctrl_loss_tmo expired (or the user explicitly disconnected).
    
    This caused a deadlock [1] when a different controller (different path on the
    same subsystem) became live (i.e. optimized/non-optimized). This is because
    nvme_mpath_set_live needs to synchronize the nshead srcu before requeueing I/O
    in order to make sure that current_path is visible to future (re)submisions.
    However the srcu lock is taken by a blocked submission on a frozen request
    queue, and we have a deadlock.
    
    In recent kernels (v5.9+) direct_make_request was replaced by submit_bio_noacct
    which does not have this issue because it bio_list will be active when
    nvme-mpath calls submit_bio_noacct on the bottom device (because it was
    populated when submit_bio was triggered on it.
    
    Hence, we need to fix all the kernels that were before submit_bio_noacct was
    introduced.
    
    [1]:
    Workqueue: nvme-wq nvme_tcp_reconnect_ctrl_work [nvme_tcp]
    Call Trace:
     __schedule+0x293/0x730
     schedule+0x33/0xa0
     schedule_timeout+0x1d3/0x2f0
     wait_for_completion+0xba/0x140
     __synchronize_srcu.part.21+0x91/0xc0
     synchronize_srcu_expedited+0x27/0x30
     synchronize_srcu+0xce/0xe0
     nvme_mpath_set_live+0x64/0x130 [nvme_core]
     nvme_update_ns_ana_state+0x2c/0x30 [nvme_core]
     nvme_update_ana_state+0xcd/0xe0 [nvme_core]
     nvme_parse_ana_log+0xa1/0x180 [nvme_core]
     nvme_read_ana_log+0x76/0x100 [nvme_core]
     nvme_mpath_init+0x122/0x180 [nvme_core]
     nvme_init_identify+0x80e/0xe20 [nvme_core]
     nvme_tcp_setup_ctrl+0x359/0x660 [nvme_tcp]
     nvme_tcp_reconnect_ctrl_work+0x24/0x70 [nvme_tcp]
    
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cce3054805860573987efccea43d2d289be9f7b
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Apr 6 21:59:39 2021 +0100

    bpf, x86: Validate computation of branch displacements for x86-32
    
    commit 26f55a59dc65ff77cd1c4b37991e26497fc68049 upstream.
    
    The branch displacement logic in the BPF JIT compilers for x86 assumes
    that, for any generated branch instruction, the distance cannot
    increase between optimization passes.
    
    But this assumption can be violated due to how the distances are
    computed. Specifically, whenever a backward branch is processed in
    do_jit(), the distance is computed by subtracting the positions in the
    machine code from different optimization passes. This is because part
    of addrs[] is already updated for the current optimization pass, before
    the branch instruction is visited.
    
    And so the optimizer can expand blocks of machine code in some cases.
    
    This can confuse the optimizer logic, where it assumes that a fixed
    point has been reached for all machine code blocks once the total
    program size stops changing. And then the JIT compiler can output
    abnormal machine code containing incorrect branch displacements.
    
    To mitigate this issue, we assert that a fixed point is reached while
    populating the output image. This rejects any problematic programs.
    The issue affects both x86-32 and x86-64. We mitigate separately to
    ease backporting.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0b3927a07be0c4cedd69970e082a8c23c92eb72
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Mon Apr 5 22:52:15 2021 +0100

    bpf, x86: Validate computation of branch displacements for x86-64
    
    commit e4d4d456436bfb2fe412ee2cd489f7658449b098 upstream.
    
    The branch displacement logic in the BPF JIT compilers for x86 assumes
    that, for any generated branch instruction, the distance cannot
    increase between optimization passes.
    
    But this assumption can be violated due to how the distances are
    computed. Specifically, whenever a backward branch is processed in
    do_jit(), the distance is computed by subtracting the positions in the
    machine code from different optimization passes. This is because part
    of addrs[] is already updated for the current optimization pass, before
    the branch instruction is visited.
    
    And so the optimizer can expand blocks of machine code in some cases.
    
    This can confuse the optimizer logic, where it assumes that a fixed
    point has been reached for all machine code blocks once the total
    program size stops changing. And then the JIT compiler can output
    abnormal machine code containing incorrect branch displacements.
    
    To mitigate this issue, we assert that a fixed point is reached while
    populating the output image. This rejects any problematic programs.
    The issue affects both x86-32 and x86-64. We mitigate separately to
    ease backporting.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20c60bbc1c54684e03bf41ef92873440d8ad80d0
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Fri Mar 19 14:57:11 2021 +0100

    cifs: Silently ignore unknown oplock break handle
    
    [ Upstream commit 219481a8f90ec3a5eed9638fb35609e4b1aeece7 ]
    
    Make SMB2 not print out an error when an oplock break is received for an
    unknown handle, similar to SMB1.  The debug message which is printed for
    these unknown handles may also be misleading, so fix that too.
    
    The SMB2 lease break path is not affected by this patch.
    
    Without this, a program which writes to a file from one thread, and
    opens, reads, and writes the same file from another thread triggers the
    below errors several times a minute when run against a Samba server
    configured with "smb2 leases = no".
    
     CIFS: VFS: \\192.168.0.1 No task to wake, unknown frame received! NumMids 2
     00000000: 424d53fe 00000040 00000000 00000012  .SMB@...........
     00000010: 00000001 00000000 ffffffff ffffffff  ................
     00000020: 00000000 00000000 00000000 00000000  ................
     00000030: 00000000 00000000 00000000 00000000  ................
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Reviewed-by: Tom Talpey <tom@talpey.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 754c82a6bf488576304be9653e40caf3269c60e6
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Thu Mar 25 16:26:35 2021 +1000

    cifs: revalidate mapping when we open files for SMB1 POSIX
    
    [ Upstream commit cee8f4f6fcabfdf229542926128e9874d19016d5 ]
    
    RHBZ: 1933527
    
    Under SMB1 + POSIX, if an inode is reused on a server after we have read and
    cached a part of a file, when we then open the new file with the
    re-cycled inode there is a chance that we may serve the old data out of cache
    to the application.
    This only happens for SMB1 (deprecated) and when posix are used.
    The simplest solution to avoid this race is to force a revalidate
    on smb1-posix open.
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5991b4fcedb17fe41ee81abbbb7f9d871698e2d
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Wed Mar 24 21:37:41 2021 -0700

    ia64: fix format strings for err_inject
    
    [ Upstream commit 95d44a470a6814207d52dd6312203b0f4ef12710 ]
    
    Fix warning with %lx / u64 mismatch:
    
      arch/ia64/kernel/err_inject.c: In function 'show_resources':
      arch/ia64/kernel/err_inject.c:62:22: warning:
        format '%lx' expects argument of type 'long unsigned int',
        but argument 3 has type 'u64' {aka 'long long unsigned int'}
         62 |  return sprintf(buf, "%lx", name[cpu]);   \
            |                      ^~~~~~~
    
    Link: https://lkml.kernel.org/r/20210313104312.1548232-1-slyfox@gentoo.org
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e9292b398626cbcaaa7885113c0b5ba3ad04e89
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Wed Mar 24 21:37:38 2021 -0700

    ia64: mca: allocate early mca with GFP_ATOMIC
    
    [ Upstream commit f2a419cf495f95cac49ea289318b833477e1a0e2 ]
    
    The sleep warning happens at early boot right at secondary CPU
    activation bootup:
    
        smp: Bringing up secondary CPUs ...
        BUG: sleeping function called from invalid context at mm/page_alloc.c:4942
        in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 0, name: swapper/1
        CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.12.0-rc2-00007-g79e228d0b611-dirty #99
        ..
        Call Trace:
          show_stack+0x90/0xc0
          dump_stack+0x150/0x1c0
          ___might_sleep+0x1c0/0x2a0
          __might_sleep+0xa0/0x160
          __alloc_pages_nodemask+0x1a0/0x600
          alloc_page_interleave+0x30/0x1c0
          alloc_pages_current+0x2c0/0x340
          __get_free_pages+0x30/0xa0
          ia64_mca_cpu_init+0x2d0/0x3a0
          cpu_init+0x8b0/0x1440
          start_secondary+0x60/0x700
          start_ap+0x750/0x780
        Fixed BSP b0 value from CPU 1
    
    As I understand interrupts are not enabled yet and system has a lot of
    memory.  There is little chance to sleep and switch to GFP_ATOMIC should
    be a no-op.
    
    Link: https://lkml.kernel.org/r/20210315085045.204414-1-slyfox@gentoo.org
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b872bac1923134d40fca71a1171c13885814842
Author: Martin Wilck <mwilck@suse.com>
Date:   Tue Mar 23 22:24:31 2021 +0100

    scsi: target: pscsi: Clean up after failure in pscsi_map_sg()
    
    [ Upstream commit 36fa766faa0c822c860e636fe82b1affcd022974 ]
    
    If pscsi_map_sg() fails, make sure to drop references to already allocated
    bios.
    
    Link: https://lore.kernel.org/r/20210323212431.15306-2-mwilck@suse.com
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2db0e66139ae5d1fde7a75a59d616e0f3b93a99
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 23 13:48:36 2021 +0100

    x86/build: Turn off -fcf-protection for realmode targets
    
    [ Upstream commit 9fcb51c14da2953de585c5c6e50697b8a6e91a7b ]
    
    The new Ubuntu GCC packages turn on -fcf-protection globally,
    which causes a build failure in the x86 realmode code:
    
      cc1: error: ‘-fcf-protection’ is not compatible with this target
    
    Turn it off explicitly on compilers that understand this option.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20210323124846.1584944-1-arnd@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0465098898ef35149a1d26c24516a8dd371535ec
Author: Esteve Varela Colominas <esteve.varela@gmail.com>
Date:   Mon Mar 15 20:58:24 2021 +0100

    platform/x86: thinkpad_acpi: Allow the FnLock LED to change state
    
    [ Upstream commit 3d677f12ea3a2097a16ded570623567403dea959 ]
    
    On many recent ThinkPad laptops, there's a new LED next to the ESC key,
    that indicates the FnLock status.
    When the Fn+ESC combo is pressed, FnLock is toggled, which causes the
    Media Key functionality to change, making it so that the media keys
    either perform their media key function, or function as an F-key by
    default. The Fn key can be used the access the alternate function at any
    time.
    
    With the current linux kernel, the LED doens't change state if you press
    the Fn+ESC key combo. However, the media key functionality *does*
    change. This is annoying, since the LED will stay on if it was on during
    bootup, and it makes it hard to keep track what the current state of the
    FnLock is.
    
    This patch calls an ACPI function, that gets the current media key
    state, when the Fn+ESC key combo is pressed. Through testing it was
    discovered that this function causes the LED to update correctly to
    reflect the current state when this function is called.
    
    The relevant ACPI calls are the following:
    \_SB_.PCI0.LPC0.EC0_.HKEY.GMKS: Get media key state, returns 0x603 if the FnLock mode is enabled, and 0x602 if it's disabled.
    \_SB_.PCI0.LPC0.EC0_.HKEY.SMKS: Set media key state, sending a 1 will enable FnLock mode, and a 0 will disable it.
    
    Relevant discussion:
    https://bugzilla.kernel.org/show_bug.cgi?id=207841
    https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1881015
    
    Signed-off-by: Esteve Varela Colominas <esteve.varela@gmail.com>
    Link: https://lore.kernel.org/r/20210315195823.23212-1-esteve.varela@gmail.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a8c30e8acadb2f8a9fa4b1ad8b3b82d1dee4ff1
Author: Ludovic Senecaux <linuxludo@free.fr>
Date:   Thu Mar 4 04:10:50 2021 -0500

    netfilter: conntrack: Fix gre tunneling over ipv6
    
    [ Upstream commit 8b2030b4305951f44afef80225f1475618e25a73 ]
    
    This fix permits gre connections to be tracked within ip6tables rules
    
    Signed-off-by: Ludovic Senecaux <linuxludo@free.fr>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e84a795b8a0b8757243059b350b612c3e5158c6f
Author: Rob Clark <robdclark@chromium.org>
Date:   Wed Mar 17 09:40:38 2021 -0700

    drm/msm: Ratelimit invalid-fence message
    
    [ Upstream commit 7ad48d27a2846bfda29214fb454d001c3e02b9e7 ]
    
    We have seen a couple cases where low memory situations cause something
    bad to happen, followed by a flood of these messages obscuring the root
    cause.  Lets ratelimit the dmesg spam so that next time it happens we
    don't lose the kernel traces leading up to this.
    
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit daf5aaa8e6e021018ef8b6a7e0e84b59a8b5e827
Author: Konrad Dybcio <konrad.dybcio@somainline.org>
Date:   Sun Feb 28 13:36:51 2021 +0100

    drm/msm/adreno: a5xx_power: Don't apply A540 lm_setup to other GPUs
    
    [ Upstream commit 4a9d36b0610aa7034340e976652e5b43320dd7c5 ]
    
    While passing the A530-specific lm_setup func to A530 and A540
    to !A530 was fine back when only these two were supported, it
    certainly is not a good idea to send A540 specifics to smaller
    GPUs like A508 and friends.
    
    Signed-off-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6abe3dad0afed4c5f93d76cdc41e970f3ecbc1fa
Author: Karthikeyan Kathirvel <kathirve@codeaurora.org>
Date:   Thu Mar 11 10:59:07 2021 +0530

    mac80211: choose first enabled channel for monitor
    
    [ Upstream commit 041c881a0ba8a75f71118bd9766b78f04beed469 ]
    
    Even if the first channel from sband channel list is invalid
    or disabled mac80211 ends up choosing it as the default channel
    for monitor interfaces, making them not usable.
    
    Fix this by assigning the first available valid or enabled
    channel instead.
    
    Signed-off-by: Karthikeyan Kathirvel <kathirve@codeaurora.org>
    Link: https://lore.kernel.org/r/1615440547-7661-1-git-send-email-kathirve@codeaurora.org
    [reword commit message, comment, code cleanups]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37b51460b25a653e09bfb3879557fa3b3b6950b5
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Wed Mar 10 23:27:35 2021 -0500

    mISDN: fix crash in fritzpci
    
    [ Upstream commit a9f81244d2e33e6dfcef120fefd30c96b3f7cdb0 ]
    
    setup_fritz() in avmfritz.c might fail with -EIO and in this case the
    isac.type and isac.write_reg is not initialized and remains 0(NULL).
    A subsequent call to isac_release() will dereference isac->write_reg and
    crash.
    
    [    1.737444] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [    1.737809] #PF: supervisor instruction fetch in kernel mode
    [    1.738106] #PF: error_code(0x0010) - not-present page
    [    1.738378] PGD 0 P4D 0
    [    1.738515] Oops: 0010 [#1] SMP NOPTI
    [    1.738711] CPU: 0 PID: 180 Comm: systemd-udevd Not tainted 5.12.0-rc2+ #78
    [    1.739077] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-48-gd9c812dda519-p
    rebuilt.qemu.org 04/01/2014
    [    1.739664] RIP: 0010:0x0
    [    1.739807] Code: Unable to access opcode bytes at RIP 0xffffffffffffffd6.
    [    1.740200] RSP: 0018:ffffc9000027ba10 EFLAGS: 00010202
    [    1.740478] RAX: 0000000000000000 RBX: ffff888102f41840 RCX: 0000000000000027
    [    1.740853] RDX: 00000000000000ff RSI: 0000000000000020 RDI: ffff888102f41800
    [    1.741226] RBP: ffffc9000027ba20 R08: ffff88817bc18440 R09: ffffc9000027b808
    [    1.741600] R10: 0000000000000001 R11: 0000000000000001 R12: ffff888102f41840
    [    1.741976] R13: 00000000fffffffb R14: ffff888102f41800 R15: ffff8881008b0000
    [    1.742351] FS:  00007fda3a38a8c0(0000) GS:ffff88817bc00000(0000) knlGS:0000000000000000
    [    1.742774] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    1.743076] CR2: ffffffffffffffd6 CR3: 00000001021ec000 CR4: 00000000000006f0
    [    1.743452] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [    1.743828] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [    1.744206] Call Trace:
    [    1.744339]  isac_release+0xcc/0xe0 [mISDNipac]
    [    1.744582]  fritzpci_probe.cold+0x282/0x739 [avmfritz]
    [    1.744861]  local_pci_probe+0x48/0x80
    [    1.745063]  pci_device_probe+0x10f/0x1c0
    [    1.745278]  really_probe+0xfb/0x420
    [    1.745471]  driver_probe_device+0xe9/0x160
    [    1.745693]  device_driver_attach+0x5d/0x70
    [    1.745917]  __driver_attach+0x8f/0x150
    [    1.746123]  ? device_driver_attach+0x70/0x70
    [    1.746354]  bus_for_each_dev+0x7e/0xc0
    [    1.746560]  driver_attach+0x1e/0x20
    [    1.746751]  bus_add_driver+0x152/0x1f0
    [    1.746957]  driver_register+0x74/0xd0
    [    1.747157]  ? 0xffffffffc00d8000
    [    1.747334]  __pci_register_driver+0x54/0x60
    [    1.747562]  AVM_init+0x36/0x1000 [avmfritz]
    [    1.747791]  do_one_initcall+0x48/0x1d0
    [    1.747997]  ? __cond_resched+0x19/0x30
    [    1.748206]  ? kmem_cache_alloc_trace+0x390/0x440
    [    1.748458]  ? do_init_module+0x28/0x250
    [    1.748669]  do_init_module+0x62/0x250
    [    1.748870]  load_module+0x23ee/0x26a0
    [    1.749073]  __do_sys_finit_module+0xc2/0x120
    [    1.749307]  ? __do_sys_finit_module+0xc2/0x120
    [    1.749549]  __x64_sys_finit_module+0x1a/0x20
    [    1.749782]  do_syscall_64+0x38/0x90
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 901d39f7b2ce0f8c7843e8f7147ce6b451a920c5
Author: Pavel Andrianov <andrianov@ispras.ru>
Date:   Wed Mar 10 11:10:46 2021 +0300

    net: pxa168_eth: Fix a potential data race in pxa168_eth_remove
    
    [ Upstream commit 0571a753cb07982cc82f4a5115e0b321da89e1f3 ]
    
    pxa168_eth_remove() firstly calls unregister_netdev(),
    then cancels a timeout work. unregister_netdev() shuts down a device
    interface and removes it from the kernel tables. If the timeout occurs
    in parallel, the timeout work (pxa168_eth_tx_timeout_task) performs stop
    and open of the device. It may lead to an inconsistent state and memory
    leaks.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Pavel Andrianov <andrianov@ispras.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc7c4d30d6e0d0d1b03bbb58e074abe65ee82a9e
Author: Tariq Toukan <tariqt@nvidia.com>
Date:   Tue Jan 12 13:29:14 2021 +0200

    net/mlx5e: Enforce minimum value check for ICOSQ size
    
    [ Upstream commit 5115daa675ccf70497fe56e8916cf738d8212c10 ]
    
    The ICOSQ size should not go below MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE.
    Enforce this where it's missing.
    
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Reviewed-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0e2b3271236e99fe5cd38697fc375c7148cee8b
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Mar 8 17:56:47 2021 -0800

    bpf, x86: Use kvmalloc_array instead kmalloc_array in bpf_jit_comp
    
    [ Upstream commit de920fc64cbaa031f947e9be964bda05fd090380 ]
    
    x86 bpf_jit_comp.c used kmalloc_array to store jited addresses
    for each bpf insn. With a large bpf program, we have see the
    following allocation failures in our production server:
    
        page allocation failure: order:5, mode:0x40cc0(GFP_KERNEL|__GFP_COMP),
                                 nodemask=(null),cpuset=/,mems_allowed=0"
        Call Trace:
        dump_stack+0x50/0x70
        warn_alloc.cold.120+0x72/0xd2
        ? __alloc_pages_direct_compact+0x157/0x160
        __alloc_pages_slowpath+0xcdb/0xd00
        ? get_page_from_freelist+0xe44/0x1600
        ? vunmap_page_range+0x1ba/0x340
        __alloc_pages_nodemask+0x2c9/0x320
        kmalloc_order+0x18/0x80
        kmalloc_order_trace+0x1d/0xa0
        bpf_int_jit_compile+0x1e2/0x484
        ? kmalloc_order_trace+0x1d/0xa0
        bpf_prog_select_runtime+0xc3/0x150
        bpf_prog_load+0x480/0x720
        ? __mod_memcg_lruvec_state+0x21/0x100
        __do_sys_bpf+0xc31/0x2040
        ? close_pdeo+0x86/0xe0
        do_syscall_64+0x42/0x110
        entry_SYSCALL_64_after_hwframe+0x44/0xa9
        RIP: 0033:0x7f2f300f7fa9
        Code: Bad RIP value.
    
    Dumped assembly:
    
        ffffffff810b6d70 <bpf_int_jit_compile>:
        ; {
        ffffffff810b6d70: e8 eb a5 b4 00        callq   0xffffffff81c01360 <__fentry__>
        ffffffff810b6d75: 41 57                 pushq   %r15
        ...
        ffffffff810b6f39: e9 72 fe ff ff        jmp     0xffffffff810b6db0 <bpf_int_jit_compile+0x40>
        ;       addrs = kmalloc_array(prog->len + 1, sizeof(*addrs), GFP_KERNEL);
        ffffffff810b6f3e: 8b 45 0c              movl    12(%rbp), %eax
        ;       return __kmalloc(bytes, flags);
        ffffffff810b6f41: be c0 0c 00 00        movl    $3264, %esi
        ;       addrs = kmalloc_array(prog->len + 1, sizeof(*addrs), GFP_KERNEL);
        ffffffff810b6f46: 8d 78 01              leal    1(%rax), %edi
        ;       if (unlikely(check_mul_overflow(n, size, &bytes)))
        ffffffff810b6f49: 48 c1 e7 02           shlq    $2, %rdi
        ;       return __kmalloc(bytes, flags);
        ffffffff810b6f4d: e8 8e 0c 1d 00        callq   0xffffffff81287be0 <__kmalloc>
        ;       if (!addrs) {
        ffffffff810b6f52: 48 85 c0              testq   %rax, %rax
    
    Change kmalloc_array() to kvmalloc_array() to avoid potential
    allocation error for big bpf programs.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20210309015647.3657852-1-yhs@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5868baa1e3c9ede99bb787498ea4f6993d4f1ca
Author: Alban Bedel <albeu@free.fr>
Date:   Mon Feb 22 15:15:59 2021 +0100

    platform/x86: intel-hid: Support Lenovo ThinkPad X1 Tablet Gen 2
    
    [ Upstream commit 56678a5f44ef5f0ad9a67194bbee2280c6286534 ]
    
    Like a few other system the Lenovo ThinkPad X1 Tablet Gen 2 miss the
    HEBC method, which prevent the power button from working. Add a quirk
    to enable the button array on this system family and fix the power
    button.
    
    Signed-off-by: Alban Bedel <albeu@free.fr>
    Tested-by: Alexander Kobel <a-kobel@a-kobel.de>
    Link: https://lore.kernel.org/r/20210222141559.3775-1-albeu@free.fr
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 422c68101110ab29ab9bed723bb837c1a36ce3f4
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 18 13:06:57 2021 +0200

    bus: ti-sysc: Fix warning on unbind if reset is not deasserted
    
    [ Upstream commit a7b5d7c4969aba8d1f04c29048906abaa71fb6a9 ]
    
    We currently get thefollowing on driver unbind if a reset is configured
    and asserted:
    
    WARNING: CPU: 0 PID: 993 at drivers/reset/core.c:432 reset_control_assert
    ...
    (reset_control_assert) from [<c0fecda8>] (sysc_remove+0x190/0x1e4)
    (sysc_remove) from [<c0a2bb58>] (platform_remove+0x24/0x3c)
    (platform_remove) from [<c0a292fc>] (__device_release_driver+0x154/0x214)
    (__device_release_driver) from [<c0a2a210>] (device_driver_detach+0x3c/0x8c)
    (device_driver_detach) from [<c0a27d64>] (unbind_store+0x60/0xd4)
    (unbind_store) from [<c0546bec>] (kernfs_fop_write_iter+0x10c/0x1cc)
    
    Let's fix it by checking the reset status.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bec7103b04a9b9b843ecd88d6845bc4507d4b9e7
Author: Mans Rullgard <mans@mansr.com>
Date:   Thu Jan 28 15:56:44 2021 +0000

    ARM: dts: am33xx: add aliases for mmc interfaces
    
    [ Upstream commit 9bbce32a20d6a72c767a7f85fd6127babd1410ac ]
    
    Without DT aliases, the numbering of mmc interfaces is unpredictable.
    Adding them makes it possible to refer to devices consistently.  The
    popular suggestion to use UUIDs obviously doesn't work with a blank
    device fresh from the factory.
    
    See commit fa2d0aa96941 ("mmc: core: Allow setting slot index via
    device tree alias") for more discussion.
    
    Signed-off-by: Mans Rullgard <mans@mansr.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
