commit 98a661ea85a8b46aa3e4bff1d900e289011e2d2a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 23 08:17:07 2018 +0100

    Linux 4.19.4

commit 6b188783345f6a8acd1d30f1aa14bfdf43e8aa82
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 21 19:11:06 2018 +0100

    Revert "x86/speculation: Enable cross-hyperthread spectre v2 STIBP mitigation"
    
    This reverts commit 233b9d7df0e114c7e7c3674559fb0fc41ada3e8f which is
    commit 53c613fe6349994f023245519265999eed75957f upstream.
    
    It's not ready for the stable trees as there are major slowdowns
    involved with this patch.
    
    Reported-by: Jiri Kosina <jkosina@suse.cz>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc:  "WoodhouseDavid" <dwmw@amazon.co.uk>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc:  "SchauflerCasey" <casey.schaufler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 520d56492bb882094e1b39f155b876233fe5d4da
Author: Frieder Schrempf <frieder.schrempf@kontron.de>
Date:   Wed Oct 31 22:52:19 2018 +0100

    usbnet: smsc95xx: disable carrier check while suspending
    
    [ Upstream commit 7b900ead6cc66b2ee873cb042dfba169aa68b56c ]
    
    We need to make sure, that the carrier check polling is disabled
    while suspending. Otherwise we can end up with usbnet_read_cmd()
    being issued when only usbnet_read_cmd_nopm() is allowed. If this
    happens, read operations lock up.
    
    Fixes: d69d169493 ("usbnet: smsc95xx: fix link detection for disabled autonegotiation")
    Signed-off-by: Frieder Schrempf <frieder.schrempf@kontron.de>
    Reviewed-by: Raghuram Chary J <RaghuramChary.Jallipalli@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36b0575076d57aadf15feea1a249b6d3a353e5aa
Author: David Howells <dhowells@redhat.com>
Date:   Thu Nov 1 13:39:53 2018 +0000

    rxrpc: Fix lockup due to no error backoff after ack transmit error
    
    [ Upstream commit c7e86acfcee30794dc99a0759924bf7b9d43f1ca ]
    
    If the network becomes (partially) unavailable, say by disabling IPv6, the
    background ACK transmission routine can get itself into a tizzy by
    proposing immediate ACK retransmission.  Since we're in the call event
    processor, that happens immediately without returning to the workqueue
    manager.
    
    The condition should clear after a while when either the network comes back
    or the call times out.
    
    Fix this by:
    
     (1) When re-proposing an ACK on failed Tx, don't schedule it immediately.
         This will allow a certain amount of time to elapse before we try
         again.
    
     (2) Enforce a return to the workqueue manager after a certain number of
         iterations of the call processing loop.
    
     (3) Add a backoff delay that increases the delay on deferred ACKs by a
         jiffy per failed transmission to a limit of HZ.  The backoff delay is
         cleared on a successful return from kernel_sendmsg().
    
     (4) Cancel calls immediately if the opening sendmsg fails.  The layer
         above can arrange retransmission or rotate to another server.
    
    Fixes: 248f219cb8bc ("rxrpc: Rewrite the data and ack handling code")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75f75716355f6a79660a49fad5032941be822820
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Thu Nov 8 20:38:26 2018 +0100

    net: smsc95xx: Fix MTU range
    
    [ Upstream commit 85b18b0237ce9986a81a1b9534b5e2ee116f5504 ]
    
    The commit f77f0aee4da4 ("net: use core MTU range checking in USB NIC
    drivers") introduce a common MTU handling for usbnet. But it's missing
    the necessary changes for smsc95xx. So set the MTU range accordingly.
    
    This patch has been tested on a Raspberry Pi 3.
    
    Fixes: f77f0aee4da4 ("net: use core MTU range checking in USB NIC drivers")
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34863c74ad5bdf4fdb075795e062782c627f6eee
Author: Shalom Toledo <shalomt@mellanox.com>
Date:   Fri Nov 2 19:49:15 2018 +0000

    mlxsw: spectrum: Fix IP2ME CPU policer configuration
    
    [ Upstream commit 96801552f846460fe9ac10f1b189602992f004e1 ]
    
    The CPU policer used to police packets being trapped via a local route
    (IP2ME) was incorrectly configured to police based on bytes per second
    instead of packets per second.
    
    Change the policer to police based on packets per second and avoid
    packet loss under certain circumstances.
    
    Fixes: 9148e7cf73ce ("mlxsw: spectrum: Add policers for trap groups")
    Signed-off-by: Shalom Toledo <shalomt@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a886c278ad863c592fc83741fa736fd56635b001
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 18 21:59:49 2018 +0800

    sctp: not increase stream's incnt before sending addstrm_in request
    
    [ Upstream commit e1e46479847e66f78f79d8c24d5169a5954b3fc2 ]
    
    Different from processing the addstrm_out request, The receiver handles
    an addstrm_in request by sending back an addstrm_out request to the
    sender who will increase its stream's in and incnt later.
    
    Now stream->incnt has been increased since it sent out the addstrm_in
    request in sctp_send_add_streams(), with the wrong stream->incnt will
    even cause crash when copying stream info from the old stream's in to
    the new one's in sctp_process_strreset_addstrm_out().
    
    This patch is to fix it by simply removing the stream->incnt change
    from sctp_send_add_streams().
    
    Fixes: 242bd2d519d7 ("sctp: implement sender-side procedures for Add Incoming/Outgoing Streams Request Parameter")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79abb48af681fca84fda98874bf029bbe4602908
Author: Martin Schiller <ms@dev.tdt.de>
Date:   Fri Nov 16 08:38:36 2018 +0100

    net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs
    
    [ Upstream commit df5a8ec64eed7fe45b556cfff503acd6429ab817 ]
    
    Up until commit 7e5fbd1e0700 ("net: mdio-gpio: Convert to use gpiod
    functions where possible"), the _cansleep variants of the gpio_ API was
    used. After that commit and the change to gpiod_ API, the _cansleep()
    was dropped. This then results in WARN_ON() when used with GPIO
    devices which do sleep. Add back the _cansleep() to avoid this.
    
    Fixes: 7e5fbd1e0700 ("net: mdio-gpio: Convert to use gpiod functions where possible")
    Signed-off-by: Martin Schiller <ms@dev.tdt.de>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5811532fe8d1ddd95365a0893574fa8a859cc70a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Nov 3 13:59:45 2018 +0800

    sctp: fix strchange_flags name for Stream Change Event
    
    [ Upstream commit fd82d61ba142f0b83463e47064bf5460aac57b6e ]
    
    As defined in rfc6525#section-6.1.3, SCTP_STREAM_CHANGE_DENIED
    and SCTP_STREAM_CHANGE_FAILED should be used instead of
    SCTP_ASSOC_CHANGE_DENIED and SCTP_ASSOC_CHANGE_FAILED.
    
    To keep the compatibility, fix it by adding two macros.
    
    Fixes: b444153fb5a6 ("sctp: add support for generating add stream change event notification")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d72b5d3b1e50b7ddb679f14cf0b4c71072a31a0
Author: Tristram Ha <Tristram.Ha@microchip.com>
Date:   Fri Nov 2 19:23:41 2018 -0700

    net: dsa: microchip: initialize mutex before use
    
    [ Upstream commit 284fb78ed7572117846f8e1d1d8e3dbfd16880c2 ]
    
    Initialize mutex before use.  Avoid kernel complaint when
    CONFIG_DEBUG_LOCK_ALLOC is enabled.
    
    Fixes: b987e98e50ab90e5 ("dsa: add DSA switch driver for Microchip KSZ9477")
    Signed-off-by: Tristram Ha <Tristram.Ha@microchip.com>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab60e82f031a73af64f4a6b0ae59e8fcf4103ca8
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Fri Nov 9 18:56:27 2018 -0700

    net: qualcomm: rmnet: Fix incorrect assignment of real_dev
    
    [ Upstream commit d02854dc1999ed3e7fd79ec700c64ac23ac0c458 ]
    
    A null dereference was observed when a sysctl was being set
    from userspace and rmnet was stuck trying to complete some actions
    in the NETDEV_REGISTER callback. This is because the real_dev is set
    only after the device registration handler completes.
    
    sysctl call stack -
    
    <6> Unable to handle kernel NULL pointer dereference at
        virtual address 00000108
    <2> pc : rmnet_vnd_get_iflink+0x1c/0x28
    <2> lr : dev_get_iflink+0x2c/0x40
    <2>  rmnet_vnd_get_iflink+0x1c/0x28
    <2>  inet6_fill_ifinfo+0x15c/0x234
    <2>  inet6_ifinfo_notify+0x68/0xd4
    <2>  ndisc_ifinfo_sysctl_change+0x1b8/0x234
    <2>  proc_sys_call_handler+0xac/0x100
    <2>  proc_sys_write+0x3c/0x4c
    <2>  __vfs_write+0x54/0x14c
    <2>  vfs_write+0xcc/0x188
    <2>  SyS_write+0x60/0xc0
    <2>  el0_svc_naked+0x34/0x38
    
    device register call stack -
    
    <2>  notifier_call_chain+0x84/0xbc
    <2>  raw_notifier_call_chain+0x38/0x48
    <2>  call_netdevice_notifiers_info+0x40/0x70
    <2>  call_netdevice_notifiers+0x38/0x60
    <2>  register_netdevice+0x29c/0x3d8
    <2>  rmnet_vnd_newlink+0x68/0xe8
    <2>  rmnet_newlink+0xa0/0x160
    <2>  rtnl_newlink+0x57c/0x6c8
    <2>  rtnetlink_rcv_msg+0x1dc/0x328
    <2>  netlink_rcv_skb+0xac/0x118
    <2>  rtnetlink_rcv+0x24/0x30
    <2>  netlink_unicast+0x158/0x1f0
    <2>  netlink_sendmsg+0x32c/0x338
    <2>  sock_sendmsg+0x44/0x60
    <2>  SyS_sendto+0x150/0x1ac
    <2>  el0_svc_naked+0x34/0x38
    
    Fixes: b752eff5be24 ("net: qualcomm: rmnet: Implement ndo_get_iflink")
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc8d2e5309ecc32162e70a285748fca4c5bd052e
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Nov 3 14:01:31 2018 +0800

    sctp: define SCTP_SS_DEFAULT for Stream schedulers
    
    [ Upstream commit 12480e3b16982c4026de10dd8155823219cd6391 ]
    
    According to rfc8260#section-4.3.2, SCTP_SS_DEFAULT is required to
    defined as SCTP_SS_FCFS or SCTP_SS_RR.
    
    SCTP_SS_FCFS is used for SCTP_SS_DEFAULT's value in this patch.
    
    Fixes: 5bbbbe32a431 ("sctp: introduce stream scheduler foundations")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c87de86948832df11de0696e00ad2f668e933655
Author: Holger Hoffstätte <holger@applied-asynchrony.com>
Date:   Sun Nov 4 19:02:42 2018 +0100

    net: phy: realtek: fix RTL8201F sysfs name
    
    [ Upstream commit 0432e833191ad4d17b7fc2364941f91dad51db1a ]
    
    Since 4.19 the following error in sysfs has appeared when using the
    r8169 NIC driver:
    
    $cd /sys/module/realtek/drivers
    $ls -l
    ls: cannot access 'mdio_bus:RTL8201F 10/100Mbps Ethernet': No such file or directory
    [..garbled dir entries follow..]
    
    Apparently the forward slash in "10/100Mbps Ethernet" is interpreted
    as directory separator that leads nowhere, and was introduced in commit
    513588dd44b ("net: phy: realtek: add RTL8201F phy-id and functions").
    
    Fix this by removing the offending slash in the driver name.
    
    Other drivers in net/phy seem to have the same problem, but I cannot
    test/verify them.
    
    Fixes: 513588dd44b ("net: phy: realtek: add RTL8201F phy-id and functions")
    Signed-off-by: Holger Hoffstätte <holger@applied-asynchrony.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a043791f56147ab573ffcde7362edc01106dd639
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sun Nov 11 00:41:10 2018 +0100

    net: dsa: mv88e6xxx: Fix clearing of stats counters
    
    [ Upstream commit a9049ff9214da68df1179a7d5e36b43479abc9b8 ]
    
    The mv88e6161 would sometime fail to probe with a timeout waiting for
    the switch to complete an operation. This operation is supposed to
    clear the statistics counters. However, due to a read/modify/write,
    without the needed mask, the operation actually carried out was more
    random, with invalid parameters, resulting in the switch not
    responding. We need to preserve the histogram mode bits, so apply a
    mask to keep them.
    
    Reported-by: Chris Healy <Chris.Healy@zii.aero>
    Fixes: 40cff8fca9e3 ("net: dsa: mv88e6xxx: Fix stats histogram mode")
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b4beb0d8c30240938592f90caefd481b4270613
Author: Denis Drozdov <denisd@mellanox.com>
Date:   Thu Sep 27 14:17:54 2018 +0300

    net/mlx5e: IPoIB, Reset QP after channels are closed
    
    [ Upstream commit acf3766b36d8e59ecbc307894c6d05703ee48014 ]
    
    The mlx5e channels should be closed before mlx5i_uninit_underlay_qp
    puts the QP into RST (reset) state during mlx5i_close. Currently QP
    state incorrectly set to RST before channels got deactivated and closed,
    since mlx5_post_send request expects QP in RTS (Ready To Send) state.
    
    The fix is to keep QP in RTS state until mlx5e channels get closed
    and to reset QP afterwards.
    
    Also this fix is simply correct in order to keep the open/close flow
    symmetric, i.e mlx5i_init_underlay_qp() is called first thing at open,
    the correct thing to do is to call mlx5i_uninit_underlay_qp() last thing
    at close, which is exactly what this patch is doing.
    
    Fixes: dae37456c8ac ("net/mlx5: Support for attaching multiple underlay QPs to root flow table")
    Signed-off-by: Denis Drozdov <denisd@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7962f000f596c537b563a99bb6c88482a5f6396a
Author: Raed Salem <raeds@mellanox.com>
Date:   Thu Oct 18 08:55:21 2018 +0300

    net/mlx5: IPSec, Fix the SA context hash key
    
    [ Upstream commit f2b18732ee9863ac036759baf616ffa03c252ed5 ]
    
    The commit "net/mlx5: Refactor accel IPSec code" introduced a
    bug where asynchronous short time change in hash key value
    by create/release SA context might happen during an asynchronous
    hash resize operation this could cause a subsequent remove SA
    context operation to fail as the key value used during resize is
    not the same key value used when remove SA context operation is
    invoked.
    
    This commit fixes the bug by defining the SA context hash key
    such that it includes only fields that never change during the
    lifetime of the SA context object.
    
    Fixes: d6c4f0298cec ("net/mlx5: Refactor accel IPSec code")
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Aviad Yehezkel <aviadye@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79272fc2c124166ea9c0960241fc60cd47712ef3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Nov 13 01:08:25 2018 +0800

    l2tp: fix a sock refcnt leak in l2tp_tunnel_register
    
    [ Upstream commit f8504f4ca0a0e9f84546ef86e00b24d2ea9a0bd2 ]
    
    This issue happens when trying to add an existent tunnel. It
    doesn't call sock_put() before returning -EEXIST to release
    the sock refcnt that was held by calling sock_hold() before
    the existence check.
    
    This patch is to fix it by holding the sock after doing the
    existence check.
    
    Fixes: f6cd651b056f ("l2tp: fix race in duplicate tunnel detection")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 115973a608a1d99f8569496cb6f0f165be325f19
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 8 17:34:27 2018 -0800

    inet: frags: better deal with smp races
    
    [ Upstream commit 0d5b9311baf27bb545f187f12ecfd558220c607d ]
    
    Multiple cpus might attempt to insert a new fragment in rhashtable,
    if for example RPS is buggy, as reported by 배석진 in
    https://patchwork.ozlabs.org/patch/994601/
    
    We use rhashtable_lookup_get_insert_key() instead of
    rhashtable_insert_fast() to let cpus losing the race
    free their own inet_frag_queue and use the one that
    was inserted by another cpu.
    
    Fixes: 648700f76b03 ("inet: frags: use rhashtables for reassembly units")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: 배석진 <soukjin.bae@samsung.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 642e1d8a420907e526dc0cb351c66219cb174fee
Author: Shay Agroskin <shayag@mellanox.com>
Date:   Sun Oct 28 09:06:11 2018 +0200

    net/mlx5e: Removed unnecessary warnings in FEC caps query
    
    [ Upstream commit 64e283348458e2fd2fe41b60dfb6c30e88ee695f ]
    
    Querying interface FEC caps with 'ethtool [int]' after link reset
    throws warning regading link speed.
    This warning is not needed as there is already an indication in
    user space that the link is not up.
    
    Fixes: 0696d60853d5 ("net/mlx5e: Receive buffer configuration")
    Signed-off-by: Shay Agroskin <shayag@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb3255de882de4a92b401be130278a07f3b5ec4e
Author: Valentine Fatiev <valentinef@mellanox.com>
Date:   Wed Oct 17 11:45:07 2018 +0300

    net/mlx5e: Fix selftest for small MTUs
    
    [ Upstream commit 228c4cd04dfd0667eda182c91504b83c17d97584 ]
    
    Loopback test had fixed packet size, which can be bigger than configured
    MTU. Shorten the loopback packet size to be bigger than minimal MTU
    allowed by the device. Text field removed from struct 'mlx5ehdr'
    as redundant to allow send small packets as minimal allowed MTU.
    
    Fixes: d605d66 ("net/mlx5e: Add support for ethtool self diagnostics test")
    Signed-off-by: Valentine Fatiev <valentinef@mellanox.com>
    Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52ae8d6c80e293f03a2f7c55897246657a6b352d
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Sun Oct 28 12:27:29 2018 +0200

    net/mlx5e: Always use the match level enum when parsing TC rule match
    
    [ Upstream commit 83621b7df6a646e550fd3d36db2e301cf9a5096b ]
    
    We get the match level (none, l2, l3, l4) while going over the match
    dissectors of an offloaded tc rule. When doing this, the match level
    enum and the not min inline enum values should be used, fix that.
    
    This worked accidentally b/c both enums have the same numerical values.
    
    Fixes: d708f902989b ('net/mlx5e: Get the required HW match level while parsing TC flow matches')
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 004973021da1e3fb3bb46a246dbec94a61f23cdf
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 18 16:14:47 2018 +0800

    Revert "sctp: remove sctp_transport_pmtu_check"
    
    [ Upstream commit 69fec325a64383667b8a35df5d48d6ce52fb2782 ]
    
    This reverts commit 22d7be267eaa8114dcc28d66c1c347f667d7878a.
    
    The dst's mtu in transport can be updated by a non sctp place like
    in xfrm where the MTU information didn't get synced between asoc,
    transport and dst, so it is still needed to do the pmtu check
    in sctp_packet_config.
    
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fa9f2bdf848fc1ea88575f324fcac78c665677a
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Thu Oct 11 07:31:10 2018 +0300

    net/mlx5e: RX, verify received packet size in Linear Striding RQ
    
    [ Upstream commit 0073c8f72736b423aade8a817587a5f3e4df4ad8 ]
    
    In case of striding RQ, we use  MPWRQ (Multi Packet WQE RQ), which means
    that WQE (RX descriptor) can be used for many packets and so the WQE is
    much bigger than MTU.  In virtualization setups where the port mtu can
    be larger than the vf mtu, if received packet is bigger than MTU, it
    won't be dropped by HW on too small receive WQE. If we use linear SKB in
    striding RQ, since each stride has room for mtu size payload and skb
    info, an oversized packet can lead to crash for crossing allocated page
    boundary upon the call to build_skb. So driver needs to check packet
    size and drop it.
    
    Introduce new SW rx counter, rx_oversize_pkts_sw_drop, which counts the
    number of packets dropped by the driver for being too large.
    
    As a new field is added to the RQ struct, re-open the channels whenever
    this field is being used in datapath (i.e., in the case of linear
    Striding RQ).
    
    Fixes: 619a8f2a42f1 ("net/mlx5e: Use linear SKB in Striding RQ")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97cc2cc1190ba11a7a6e060cfc8ff50a31558cde
Author: Yuval Avnery <yuvalav@mellanox.com>
Date:   Tue Oct 16 15:20:20 2018 -0500

    net/mlx5e: Adjust to max number of channles when re-attaching
    
    [ Upstream commit a1f240f1801721f76bee734c50df2d9529da86e0 ]
    
    When core driver enters deattach/attach flow after pci reset,
    Number of logical CPUs may have changed.
    As a result we need to update the cpu affiliated resource tables.
            1. indirect rqt list
            2. eq table
    
    Reproduction (PowerPC):
            echo 1000 > /sys/kernel/debug/powerpc/eeh_max_freezes
            ppc64_cpu --smt=on
            # Restart driver
            modprobe -r ... ; modprobe ...
            # Link up
            ifconfig ...
            # Only physical CPUs
            ppc64_cpu --smt=off
            # Inject PCI errors so PCI will reset - calling the pci error handler
            echo 0x8000000000000000 > /sys/kernel/debug/powerpc/<PCI BUS>/err_injct_inboundA
    
    Call trace when trying to add non-existing rqs to an indirect rqt:
            mlx5e_redirect_rqt+0x84/0x260 [mlx5_core] (unreliable)
            mlx5e_redirect_rqts+0x188/0x190 [mlx5_core]
            mlx5e_activate_priv_channels+0x488/0x570 [mlx5_core]
            mlx5e_open_locked+0xbc/0x140 [mlx5_core]
            mlx5e_open+0x50/0x130 [mlx5_core]
            mlx5e_nic_enable+0x174/0x1b0 [mlx5_core]
            mlx5e_attach_netdev+0x154/0x290 [mlx5_core]
            mlx5e_attach+0x88/0xd0 [mlx5_core]
            mlx5_attach_device+0x168/0x1e0 [mlx5_core]
            mlx5_load_one+0x1140/0x1210 [mlx5_core]
            mlx5_pci_resume+0x6c/0xf0 [mlx5_core]
    
    Create cq will fail when trying to use non-existing EQ.
    
    Fixes: 89d44f0a6c73 ("net/mlx5_core: Add pci error handlers to mlx5_core driver")
    Signed-off-by: Yuval Avnery <yuvalav@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92a2f39fc374f47dbaa6d47fae10677620900bb0
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Thu Oct 18 12:31:27 2018 +0200

    net/mlx5e: Claim TC hw offloads support only under a proper build config
    
    [ Upstream commit 077ecd785d90c6cbba08d719faa4be8561aa0a1e ]
    
    Currently, we are only supporting tc hw offloads when the eswitch
    support is compiled in, but we are not gating the adevertizment
    of the NETIF_F_HW_TC feature on this config being set.
    
    Fix it, and while doing that, also avoid dealing with the feature
    on ethtool when the config is not set.
    
    Fixes: e8f887ac6a45 ('net/mlx5e: Introduce tc offload support')
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5351b859a6dd60787e78982ef5e1072704806b6d
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Thu Oct 25 15:41:58 2018 +0000

    net/mlx5e: Don't match on vlan non-existence if ethertype is wildcarded
    
    [ Upstream commit d3a80bb5a3eac311ddf28387402593977574460d ]
    
    For the "all" ethertype we should not care whether the packet has
    vlans. Besides being wrong, the way we did it caused FW error
    for rules such as:
    
    tc filter add dev eth0 protocol all parent ffff: \
            prio 1 flower skip_sw action drop
    
    b/c the matching meta-data (outer headers bit in struct mlx5_flow_spec)
    wasn't set. Fix that by matching on vlan non-existence only if we were
    also told to match on the ethertype.
    
    Fixes: cee26487620b ('net/mlx5e: Set vlan masks for all offloaded TC rules')
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reported-by: Slava Ovsiienko <viacheslavo@mellanox.com>
    Reviewed-by: Jianbo Liu <jianbol@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 961842dcc1fd7523acc8a4b2db5e9cacaa703af3
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Sat Nov 10 17:30:24 2018 -0500

    tipc: fix link re-establish failure
    
    [ Upstream commit 7ab412d33b4c7ff3e0148d3db25dd861edd1283d ]
    
    When a link failure is detected locally, the link is reset, the flag
    link->in_session is set to false, and a RESET_MSG with the 'stopping'
    bit set is sent to the peer.
    
    The purpose of this bit is to inform the peer that this endpoint just
    is going down, and that the peer should handle the reception of this
    particular RESET message as a local failure. This forces the peer to
    accept another RESET or ACTIVATE message from this endpoint before it
    can re-establish the link. This again is necessary to ensure that
    link session numbers are properly exchanged before the link comes up
    again.
    
    If a failure is detected locally at the same time at the peer endpoint
    this will do the same, which is also a correct behavior.
    
    However, when receiving such messages, the endpoints will not
    distinguish between 'stopping' RESETs and ordinary ones when it comes
    to updating session numbers. Both endpoints will copy the received
    session number and set their 'in_session' flags to true at the
    reception, while they are still expecting another RESET from the
    peer before they can go ahead and re-establish. This is contradictory,
    since, after applying the validation check referred to below, the
    'in_session' flag will cause rejection of all such messages, and the
    link will never come up again.
    
    We now fix this by not only handling received RESET/STOPPING messages
    as a local failure, but also by omitting to set a new session number
    and the 'in_session' flag in such cases.
    
    Fixes: 7ea817f4e832 ("tipc: check session number before accepting link protocol messages")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed25a2066e191b60a5352b2b07ffc46e69efa894
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Nov 9 21:06:26 2018 -0800

    net: sched: cls_flower: validate nested enc_opts_policy to avoid warning
    
    [ Upstream commit 63c82997f5c0f3e1b914af43d82f712a86bc5f3a ]
    
    TCA_FLOWER_KEY_ENC_OPTS and TCA_FLOWER_KEY_ENC_OPTS_MASK can only
    currently contain further nested attributes, which are parsed by
    hand, so the policy is never actually used resulting in a W=1
    build warning:
    
    net/sched/cls_flower.c:492:1: warning: ‘enc_opts_policy’ defined but not used [-Wunused-const-variable=]
     enc_opts_policy[TCA_FLOWER_KEY_ENC_OPTS_MAX + 1] = {
    
    Add the validation anyway to avoid potential bugs when other
    attributes are added and to make the attribute structure slightly
    more clear.  Validation will also set extact to point to bad
    attribute on error.
    
    Fixes: 0a6e77784f49 ("net/sched: allow flower to match tunnel options")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Simon Horman <simon.horman@netronome.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae06e2f9c1777592c13910dda9d25d9fd5c1381a
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Wed Nov 14 12:17:25 2018 +0100

    net/sched: act_pedit: fix memory leak when IDR allocation fails
    
    [ Upstream commit 19ab69107d3ecfb7cd3e38ad262a881be40c01a3 ]
    
    tcf_idr_check_alloc() can return a negative value, on allocation failures
    (-ENOMEM) or IDR exhaustion (-ENOSPC): don't leak keys_ex in these cases.
    
    Fixes: 0190c1d452a9 ("net: sched: atomically check-allocate action")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d6679c85a53bd2ce837bcb87bbddfc369b8cf2c
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Nov 1 15:55:38 2018 -0700

    net: systemport: Protect stop from timeout
    
    [ Upstream commit 7cb6a2a2c72c1ed8f42fb01f1a661281b568dead ]
    
    A timing hazard exists when the network interface is stopped that
    allows a watchdog timeout to be processed by a separate core in
    parallel. This creates the potential for the timeout handler to
    wake the queues while the driver is shutting down, or access
    registers after their clocks have been removed.
    
    The more common case is that the watchdog timeout will produce a
    warning message which doesn't lead to a crash. The chances of this
    are greatly increased by the fact that bcm_sysport_netif_stop stops
    the transmit queues which can easily precipitate a watchdog time-
    out because of stale trans_start data in the queues.
    
    This commit corrects the behavior by ensuring that the watchdog
    timeout is disabled before enterring bcm_sysport_netif_stop. There
    are currently only two users of the bcm_sysport_netif_stop function:
    close and suspend.
    
    The close case already handles the issue by exiting the RUNNING
    state before invoking the driver close service.
    
    The suspend case now performs the netif_device_detach to exit the
    PRESENT state before the call to bcm_sysport_netif_stop rather than
    after it.
    
    These behaviors prevent any future scheduling of the driver timeout
    service during the window. The netif_tx_stop_all_queues function
    in bcm_sysport_netif_stop is replaced with netif_tx_disable to ensure
    synchronization with any transmit or timeout threads that may
    already be executing on other cores.
    
    For symmetry, the netif_device_attach call upon resume is moved to
    after the call to bcm_sysport_netif_start. Since it wakes the transmit
    queues it is not necessary to invoke netif_tx_start_all_queues from
    bcm_sysport_netif_start so it is moved into the driver open service.
    
    Fixes: 40755a0fce17 ("net: systemport: add suspend and resume support")
    Fixes: 80105befdb4b ("net: systemport: add Broadcom SYSTEMPORT Ethernet MAC driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e8f5d550a75c9e35b9325a29fdf5b64304118f0
Author: Matthew Cover <werekraken@gmail.com>
Date:   Sun Nov 18 00:46:00 2018 -0700

    tuntap: fix multiqueue rx
    
    [ Upstream commit 8ebebcba559a1bfbaec7bbda64feb9870b9c58da ]
    
    When writing packets to a descriptor associated with a combined queue, the
    packets should end up on that queue.
    
    Before this change all packets written to any descriptor associated with a
    tap interface end up on rx-0, even when the descriptor is associated with a
    different queue.
    
    The rx traffic can be generated by either of the following.
      1. a simple tap program which spins up multiple queues and writes packets
         to each of the file descriptors
      2. tx from a qemu vm with a tap multiqueue netdev
    
    The queue for rx traffic can be observed by either of the following (done
    on the hypervisor in the qemu case).
      1. a simple netmap program which opens and reads from per-queue
         descriptors
      2. configuring RPS and doing per-cpu captures with rxtxcpu
    
    Alternatively, if you printk() the return value of skb_get_rx_queue() just
    before each instance of netif_receive_skb() in tun.c, you will get 65535
    for every skb.
    
    Calling skb_record_rx_queue() to set the rx queue to the queue_index fixes
    the association between descriptor and rx queue.
    
    Signed-off-by: Matthew Cover <matthew.cover@stackpath.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce209966357de80d4f391c975f5c84bd82fa326e
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Fri Nov 16 16:55:04 2018 -0500

    tipc: fix lockdep warning when reinitilaizing sockets
    
    [ Upstream commit adba75be0d23cca92a028749d92c60c8909bbdb3 ]
    
    We get the following warning:
    
    [   47.926140] 32-bit node address hash set to 2010a0a
    [   47.927202]
    [   47.927433] ================================
    [   47.928050] WARNING: inconsistent lock state
    [   47.928661] 4.19.0+ #37 Tainted: G            E
    [   47.929346] --------------------------------
    [   47.929954] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [   47.930116] swapper/3/0 [HC0[0]:SC1[3]:HE1:SE0] takes:
    [   47.930116] 00000000af8bc31e (&(&ht->lock)->rlock){+.?.}, at: rhashtable_walk_enter+0x36/0xb0
    [   47.930116] {SOFTIRQ-ON-W} state was registered at:
    [   47.930116]   _raw_spin_lock+0x29/0x60
    [   47.930116]   rht_deferred_worker+0x556/0x810
    [   47.930116]   process_one_work+0x1f5/0x540
    [   47.930116]   worker_thread+0x64/0x3e0
    [   47.930116]   kthread+0x112/0x150
    [   47.930116]   ret_from_fork+0x3a/0x50
    [   47.930116] irq event stamp: 14044
    [   47.930116] hardirqs last  enabled at (14044): [<ffffffff9a07fbba>] __local_bh_enable_ip+0x7a/0xf0
    [   47.938117] hardirqs last disabled at (14043): [<ffffffff9a07fb81>] __local_bh_enable_ip+0x41/0xf0
    [   47.938117] softirqs last  enabled at (14028): [<ffffffff9a0803ee>] irq_enter+0x5e/0x60
    [   47.938117] softirqs last disabled at (14029): [<ffffffff9a0804a5>] irq_exit+0xb5/0xc0
    [   47.938117]
    [   47.938117] other info that might help us debug this:
    [   47.938117]  Possible unsafe locking scenario:
    [   47.938117]
    [   47.938117]        CPU0
    [   47.938117]        ----
    [   47.938117]   lock(&(&ht->lock)->rlock);
    [   47.938117]   <Interrupt>
    [   47.938117]     lock(&(&ht->lock)->rlock);
    [   47.938117]
    [   47.938117]  *** DEADLOCK ***
    [   47.938117]
    [   47.938117] 2 locks held by swapper/3/0:
    [   47.938117]  #0: 0000000062c64f90 ((&d->timer)){+.-.}, at: call_timer_fn+0x5/0x280
    [   47.938117]  #1: 00000000ee39619c (&(&d->lock)->rlock){+.-.}, at: tipc_disc_timeout+0xc8/0x540 [tipc]
    [   47.938117]
    [   47.938117] stack backtrace:
    [   47.938117] CPU: 3 PID: 0 Comm: swapper/3 Tainted: G            E     4.19.0+ #37
    [   47.938117] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [   47.938117] Call Trace:
    [   47.938117]  <IRQ>
    [   47.938117]  dump_stack+0x5e/0x8b
    [   47.938117]  print_usage_bug+0x1ed/0x1ff
    [   47.938117]  mark_lock+0x5b5/0x630
    [   47.938117]  __lock_acquire+0x4c0/0x18f0
    [   47.938117]  ? lock_acquire+0xa6/0x180
    [   47.938117]  lock_acquire+0xa6/0x180
    [   47.938117]  ? rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  _raw_spin_lock+0x29/0x60
    [   47.938117]  ? rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  tipc_sk_reinit+0xb0/0x410 [tipc]
    [   47.938117]  ? mark_held_locks+0x6f/0x90
    [   47.938117]  ? __local_bh_enable_ip+0x7a/0xf0
    [   47.938117]  ? lockdep_hardirqs_on+0x20/0x1a0
    [   47.938117]  tipc_net_finalize+0xbf/0x180 [tipc]
    [   47.938117]  tipc_disc_timeout+0x509/0x540 [tipc]
    [   47.938117]  ? call_timer_fn+0x5/0x280
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  call_timer_fn+0xa1/0x280
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  run_timer_softirq+0x1f2/0x4d0
    [   47.938117]  __do_softirq+0xfc/0x413
    [   47.938117]  irq_exit+0xb5/0xc0
    [   47.938117]  smp_apic_timer_interrupt+0xac/0x210
    [   47.938117]  apic_timer_interrupt+0xf/0x20
    [   47.938117]  </IRQ>
    [   47.938117] RIP: 0010:default_idle+0x1c/0x140
    [   47.938117] Code: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 41 54 55 53 65 8b 2d d8 2b 74 65 0f 1f 44 00 00 e8 c6 2c 8b ff fb f4 <65> 8b 2d c5 2b 74 65 0f 1f 44 00 00 5b 5d 41 5c c3 65 8b 05 b4 2b
    [   47.938117] RSP: 0018:ffffaf6ac0207ec8 EFLAGS: 00000206 ORIG_RAX: ffffffffffffff13
    [   47.938117] RAX: ffff8f5b3735e200 RBX: 0000000000000003 RCX: 0000000000000001
    [   47.938117] RDX: 0000000000000001 RSI: 0000000000000001 RDI: ffff8f5b3735e200
    [   47.938117] RBP: 0000000000000003 R08: 0000000000000001 R09: 0000000000000000
    [   47.938117] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    [   47.938117] R13: 0000000000000000 R14: ffff8f5b3735e200 R15: ffff8f5b3735e200
    [   47.938117]  ? default_idle+0x1a/0x140
    [   47.938117]  do_idle+0x1bc/0x280
    [   47.938117]  cpu_startup_entry+0x19/0x20
    [   47.938117]  start_secondary+0x187/0x1c0
    [   47.938117]  secondary_startup_64+0xa4/0xb0
    
    The reason seems to be that tipc_net_finalize()->tipc_sk_reinit() is
    calling the function rhashtable_walk_enter() within a timer interrupt.
    We fix this by executing tipc_net_finalize() in work queue context.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaf1377231081b41a6761695fb410884e3426635
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Sat Nov 17 12:17:06 2018 -0500

    tipc: don't assume linear buffer when reading ancillary data
    
    [ Upstream commit 1c1274a56999fbdf9cf84e332b28448bb2d55221 ]
    
    The code for reading ancillary data from a received buffer is assuming
    the buffer is linear. To make this assumption true we have to linearize
    the buffer before message data is read.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 710c65c8c8551a24bf9b4bd761de65259bbe8d74
Author: Siva Reddy Kallam <siva.kallam@broadcom.com>
Date:   Tue Nov 20 10:04:04 2018 +0530

    tg3: Add PHY reset for 5717/5719/5720 in change ring and flow control paths
    
    [ Upstream commit 59663e42199c93d1d7314d1446f6782fc4b1eb81 ]
    
    This patch has the fix to avoid PHY lockup with 5717/5719/5720 in change
    ring and flow control paths. This patch solves the RX hang while doing
    continuous ring or flow control parameters with heavy traffic from peer.
    
    Signed-off-by: Siva Reddy Kallam <siva.kallam@broadcom.com>
    Acked-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e6782271fd832c5ae1e038147ede8e27195cc95
Author: Stephen Mallon <stephen.mallon@sydney.edu.au>
Date:   Tue Nov 20 19:15:02 2018 +1100

    tcp: Fix SOF_TIMESTAMPING_RX_HARDWARE to use the latest timestamp during TCP coalescing
    
    [ Upstream commit cadf9df27e7cf40e390e060a1c71bb86ecde798b ]
    
    During tcp coalescing ensure that the skb hardware timestamp refers to the
    highest sequence number data.
    Previously only the software timestamp was updated during coalescing.
    
    Signed-off-by: Stephen Mallon <stephen.mallon@sydney.edu.au>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e86081c985cd690414aa7d46d500abbd988f911
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 18 15:21:53 2018 +0800

    sctp: not allow to set asoc prsctp_enable by sockopt
    
    [ Upstream commit cc3ccf26f0649089b3a34a2781977755ea36e72c ]
    
    As rfc7496#section4.5 says about SCTP_PR_SUPPORTED:
    
       This socket option allows the enabling or disabling of the
       negotiation of PR-SCTP support for future associations.  For existing
       associations, it allows one to query whether or not PR-SCTP support
       was negotiated on a particular association.
    
    It means only sctp sock's prsctp_enable can be set.
    
    Note that for the limitation of SCTP_{CURRENT|ALL}_ASSOC, we will
    add it when introducing SCTP_{FUTURE|CURRENT|ALL}_ASSOC for linux
    sctp in another patchset.
    
    v1->v2:
      - drop the params.assoc_id check as Neil suggested.
    
    Fixes: 28aa4c26fce2 ("sctp: add SCTP_PR_SUPPORTED on sctp sockopt")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a21a82a9a3e5bdf12ee5cd4ff30d1fa6b30bc7a3
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Nov 17 21:57:02 2018 -0800

    net-gro: reset skb->pkt_type in napi_reuse_skb()
    
    [ Upstream commit 33d9a2c72f086cbf1087b2fd2d1a15aa9df14a7f ]
    
    eth_type_trans() assumes initial value for skb->pkt_type
    is PACKET_HOST.
    
    This is indeed the value right after a fresh skb allocation.
    
    However, it is possible that GRO merged a packet with a different
    value (like PACKET_OTHERHOST in case macvlan is used), so
    we need to make sure napi->skb will have pkt_type set back to
    PACKET_HOST.
    
    Otherwise, valid packets might be dropped by the stack because
    their pkt_type is not PACKET_HOST.
    
    napi_reuse_skb() was added in commit 96e93eab2033 ("gro: Add
    internal interfaces for VLAN"), but this bug always has
    been there.
    
    Fixes: 96e93eab2033 ("gro: Add internal interfaces for VLAN")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 852c280df5e3c4baee7b5787c918915bf32d8d72
Author: Doug Berger <opendmb@gmail.com>
Date:   Thu Nov 1 15:55:37 2018 -0700

    net: bcmgenet: protect stop from timeout
    
    A timing hazard exists when the network interface is stopped that
    allows a watchdog timeout to be processed by a separate core in
    parallel. This creates the potential for the timeout handler to
    wake the queues while the driver is shutting down, or access
    registers after their clocks have been removed.
    
    The more common case is that the watchdog timeout will produce a
    warning message which doesn't lead to a crash. The chances of this
    are greatly increased by the fact that bcmgenet_netif_stop stops
    the transmit queues which can easily precipitate a watchdog time-
    out because of stale trans_start data in the queues.
    
    This commit corrects the behavior by ensuring that the watchdog
    timeout is disabled before enterring bcmgenet_netif_stop. There
    are currently only two users of the bcmgenet_netif_stop function:
    close and suspend.
    
    The close case already handles the issue by exiting the RUNNING
    state before invoking the driver close service.
    
    The suspend case now performs the netif_device_detach to exit the
    PRESENT state before the call to bcmgenet_netif_stop rather than
    after it.
    
    These behaviors prevent any future scheduling of the driver timeout
    service during the window. The netif_tx_stop_all_queues function
    in bcmgenet_netif_stop is replaced with netif_tx_disable to ensure
    synchronization with any transmit or timeout threads that may
    already be executing on other cores.
    
    For symmetry, the netif_device_attach call upon resume is moved to
    after the call to bcmgenet_netif_start. Since it wakes the transmit
    queues it is not necessary to invoke netif_tx_start_all_queues from
    bcmgenet_netif_start so it is moved into the driver open service.
    
    [ Upstream commit 09e805d2570a3a94f13dd9c9ad2bcab23da76e09 ]
    
    Fixes: 1c1008c793fa ("net: bcmgenet: add main driver file")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bb115fb7d334d719e699924f7893bddcf5a51d3
Author: David Ahern <dsahern@gmail.com>
Date:   Sun Nov 18 10:45:30 2018 -0800

    ipv6: Fix PMTU updates for UDP/raw sockets in presence of VRF
    
    [ Upstream commit 7ddacfa564870cdd97275fd87decb6174abc6380 ]
    
    Preethi reported that PMTU discovery for UDP/raw applications is not
    working in the presence of VRF when the socket is not bound to a device.
    The problem is that ip6_sk_update_pmtu does not consider the L3 domain
    of the skb device if the socket is not bound. Update the function to
    set oif to the L3 master device if relevant.
    
    Fixes: ca254490c8df ("net: Add VRF support to IPv6 stack")
    Reported-by: Preethi Ramachandra <preethir@juniper.net>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b536dd802a36dd14e8d5e68201cecab46ccb9669
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Nov 14 00:48:28 2018 +0800

    ipv6: fix a dst leak when removing its exception
    
    [ Upstream commit 761f60261b4401aa368d71d431b4c218af0efcee ]
    
    These is no need to hold dst before calling rt6_remove_exception_rt().
    The call to dst_hold_safe() in ip6_link_failure() was for ip6_del_rt(),
    which has been removed in Commit 93531c674315 ("net/ipv6: separate
    handling of FIB entries from dst based routes"). Otherwise, it will
    cause a dst leak.
    
    This patch is to simply remove the dst_hold_safe() call before calling
    rt6_remove_exception_rt() and also do the same in ip6_del_cached_rt().
    It's safe, because the removal of the exception that holds its dst's
    refcnt is protected by rt6_exception_lock.
    
    Fixes: 93531c674315 ("net/ipv6: separate handling of FIB entries from dst based routes")
    Fixes: 23fb93a4d3f1 ("net/ipv6: Cleanup exception and cache route handling")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60258098e8e04fe5911090244e06558f4a4d24a7
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Nov 16 16:58:19 2018 +0100

    ip_tunnel: don't force DF when MTU is locked
    
    [ Upstream commit 16f7eb2b77b55da816c4e207f3f9440a8cafc00a ]
    
    The various types of tunnels running over IPv4 can ask to set the DF
    bit to do PMTU discovery. However, PMTU discovery is subject to the
    threshold set by the net.ipv4.route.min_pmtu sysctl, and is also
    disabled on routes with "mtu lock". In those cases, we shouldn't set
    the DF bit.
    
    This patch makes setting the DF bit conditional on the route's MTU
    locking state.
    
    This issue seems to be older than git history.
    
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6870825d555110115981e0d0a603dbe1c34cc8c
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Wed Nov 7 17:50:52 2018 +0100

    ibmvnic: fix accelerated VLAN handling
    
    [ Upstream commit e84b47941e15e6666afb8ee8b21d1c3fc1a013af ]
    
    Don't request tag insertion when it isn't present in outgoing skb.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad6dfbd1b567c8cf6b304fb0a6e7a2bc0599f75e
Author: 배석진 <soukjin.bae@samsung.com>
Date:   Fri Nov 9 16:53:06 2018 -0800

    flow_dissector: do not dissect l4 ports for fragments
    
    [ Upstream commit 62230715fd2453b3ba948c9d83cfb3ada9169169 ]
    
    Only first fragment has the sport/dport information,
    not the following ones.
    
    If we want consistent hash for all fragments, we need to
    ignore ports even for first fragment.
    
    This bug is visible for IPv6 traffic, if incoming fragments
    do not have a flow label, since skb_get_hash() will give
    different results for first fragment and following ones.
    
    It is also visible if any routing rule wants dissection
    and sport or dport.
    
    See commit 5e5d6fed3741 ("ipv6: route: dissect flow
    in input path if fib rules need it") for details.
    
    [edumazet] rewrote the changelog completely.
    
    Fixes: 06635a35d13d ("flow_dissect: use programable dissector in skb_flow_dissect and friends")
    Signed-off-by: 배석진 <soukjin.bae@samsung.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
