commit e52da3428a8bc736746ab41915a61b1af44cf79e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Sep 2 07:06:04 2017 +0200

    Linux 3.18.69

commit 19f07619faad29304c15331b531f59e4a0a5bd6d
Author: Hannes Reinecke <hare@suse.de>
Date:   Mon Apr 24 10:26:36 2017 +0200

    scsi: sg: reset 'res_in_use' after unlinking reserved array
    
    commit e791ce27c3f6a1d3c746fd6a8f8e36c9540ec6f9 upstream.
    
    Once the reserved page array is unused we can reset the 'res_in_use'
    state; here we can do a lazy update without holding the mutex as we only
    need to check against concurrent access, not concurrent release.
    
    [mkp: checkpatch]
    
    Fixes: 1bc0eb044615 ("scsi: sg: protect accesses to 'reserved' page array")
    Signed-off-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Todd Poynor <toddpoynor@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf0734de711d7542fb214b4cad312e256bb45318
Author: Hannes Reinecke <hare@suse.de>
Date:   Fri Apr 7 09:34:14 2017 +0200

    scsi: sg: protect accesses to 'reserved' page array
    
    commit 1bc0eb0446158cc76562176b80623aa119afee5b upstream.
    
    The 'reserved' page array is used as a short-cut for mapping data,
    saving us to allocate pages per request. However, the 'reserved' array
    is only capable of holding one request, so this patch introduces a mutex
    for protect 'sg_fd' against concurrent accesses.
    
    Signed-off-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Tested-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    [toddpoynor@google.com: backport to 3.18-4.9,  fixup for bad ioctl
    SG_SET_FORCE_LOW_DMA code removed in later versions and not modified by
    the original patch.]
    
    Signed-off-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Tested-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Todd Poynor <toddpoynor@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d58fc72c00ffce6bfe798dcc8f0289aacd09291
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri Mar 20 12:34:10 2015 +0100

    clk: si5351: Constify clock names and struct regmap_config
    
    commit 8234caed27f7bce141c9fb1f7e76c91a2a66d248 upstream.
    
    The regmap_config struct may be const because it is not modified by the
    driver and regmap_init() accepts pointer to const.
    
    Replace doubled const in the arrays of clock names with proper const
    pointer to const data. This fixes the warnings:
    
    drivers/clk/clk-si5351.c:71:25: warning: duplicate const
    drivers/clk/clk-si5351.c:74:25: warning: duplicate const
    drivers/clk/clk-si5351.c:77:25: warning: duplicate const
    drivers/clk/clk-si5351.c:80:25: warning: duplicate const
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b82e2aa8aaa7642bc5ca01e839b4e5881f067d05
Author: Markus Trippelsdorf <markus@trippelsdorf.de>
Date:   Thu Dec 15 13:45:13 2016 +0100

    x86/tools: Fix gcc-7 warning in relocs.c
    
    commit 7ebb916782949621ff6819acf373a06902df7679 upstream.
    
    gcc-7 warns:
    
    In file included from arch/x86/tools/relocs_64.c:17:0:
    arch/x86/tools/relocs.c: In function ‘process_64’:
    arch/x86/tools/relocs.c:953:2: warning: argument 1 null where non-null expected [-Wnonnull]
      qsort(r->offset, r->count, sizeof(r->offset[0]), cmp_relocs);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    In file included from arch/x86/tools/relocs.h:6:0,
                     from arch/x86/tools/relocs_64.c:1:
    /usr/include/stdlib.h:741:13: note: in a call to function ‘qsort’ declared here
     extern void qsort
    
    This happens because relocs16 is not used for ELF_BITS == 64,
    so there is no point in trying to sort it.
    
    Make the sort_relocs(&relocs16) call 32bit only.
    
    Signed-off-by: Markus Trippelsdorf <markus@trippelsdorf.de>
    Link: http://lkml.kernel.org/r/20161215124513.GA289@x4
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edb9d2d5e647e7a8521b0d35f8452deb02dfd138
Author: Jan Beulich <JBeulich@suse.com>
Date:   Tue Nov 4 08:50:18 2014 +0000

    x86-64: Handle PC-relative relocations on per-CPU data
    
    commit 6d24c5f72dfb26e5fa7f02fa9266dfdbae41adba upstream.
    
    This is in preparation of using RIP-relative addressing in many of the
    per-CPU accesses.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Link: http://lkml.kernel.org/r/5458A15A0200007800044A9A@mail.emea.novell.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67038f958ae0151cb2d2d6b452a1c0fcb5ba57a0
Author: Dave Martin <Dave.Martin@arm.com>
Date:   Fri Aug 18 16:57:01 2017 +0100

    arm64: fpsimd: Prevent registers leaking across exec
    
    commit 096622104e14d8a1db4860bd557717067a0515d2 upstream.
    
    There are some tricky dependencies between the different stages of
    flushing the FPSIMD register state during exec, and these can race
    with context switch in ways that can cause the old task's regs to
    leak across.  In particular, a context switch during the memset() can
    cause some of the task's old FPSIMD registers to reappear.
    
    Disabling preemption for this small window would be no big deal for
    performance: preemption is already disabled for similar scenarios
    like updating the FPSIMD registers in sigreturn.
    
    So, instead of rearranging things in ways that might swap existing
    subtle bugs for new ones, this patch just disables preemption
    around the FPSIMD state flushing so that races of this type can't
    occur here.  This brings fpsimd_flush_thread() into line with other
    code paths.
    
    Fixes: 674c242c9323 ("arm64: flush FP/SIMD state correctly after execve()")
    Reviewed-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Dave Martin <Dave.Martin@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5b150b99bf0aa09e0fabc36e599cae14eb5b66c
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Aug 27 07:12:33 2015 +0100

    arm64: flush FP/SIMD state correctly after execve()
    
    commit 674c242c9323d3c293fc4f9a3a3a619fe3063290 upstream.
    
    When a task calls execve(), its FP/SIMD state is flushed so that
    none of the original program state is observeable by the incoming
    program.
    
    However, since this flushing consists of setting the in-memory copy
    of the FP/SIMD state to all zeroes, the CPU field is set to CPU 0 as
    well, which indicates to the lazy FP/SIMD preserve/restore code that
    the FP/SIMD state does not need to be reread from memory if the task
    is scheduled again on CPU 0 without any other tasks having entered
    userland (or used the FP/SIMD in kernel mode) on the same CPU in the
    mean time. If this happens, the FP/SIMD state of the old program will
    still be present in the registers when the new program starts.
    
    So set the CPU field to the invalid value of NR_CPUS when performing
    the flush, by calling fpsimd_flush_task_state().
    
    Reported-by: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
    Reported-by: Janet Liu <janet.liu@spreadtrum.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2888dd24d315db4fc35cc610eb205d387904e69
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jul 19 14:53:02 2017 +0200

    x86/io: Add "memory" clobber to insb/insw/insl/outsb/outsw/outsl
    
    commit 7206f9bf108eb9513d170c73f151367a1bdf3dbf upstream.
    
    The x86 version of insb/insw/insl uses an inline assembly that does
    not have the target buffer listed as an output. This can confuse
    the compiler, leading it to think that a subsequent access of the
    buffer is uninitialized:
    
      drivers/net/wireless/wl3501_cs.c: In function ‘wl3501_mgmt_scan_confirm’:
      drivers/net/wireless/wl3501_cs.c:665:9: error: ‘sig.status’ is used uninitialized in this function [-Werror=uninitialized]
      drivers/net/wireless/wl3501_cs.c:668:12: error: ‘sig.cap_info’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
      drivers/net/sb1000.c: In function 'sb1000_rx':
      drivers/net/sb1000.c:775:9: error: 'st[0]' is used uninitialized in this function [-Werror=uninitialized]
      drivers/net/sb1000.c:776:10: error: 'st[1]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
      drivers/net/sb1000.c:784:11: error: 'st[1]' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    I tried to mark the exact input buffer as an output here, but couldn't
    figure it out. As suggested by Linus, marking all memory as clobbered
    however is good enough too. For the outs operations, I also add the
    memory clobber, to force the input to be written to local variables.
    This is probably already guaranteed by the "asm volatile", but it can't
    hurt to do this for symmetry.
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Link: http://lkml.kernel.org/r/20170719125310.2487451-5-arnd@arndb.de
    Link: https://lkml.org/lkml/2017/7/12/605
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0c8d9367c9232fa54e592bad095140f987031fd
Author: Rohit Vaswani <rvaswani@codeaurora.org>
Date:   Thu Oct 22 13:32:11 2015 -0700

    mm: cma: fix incorrect type conversion for size during dma allocation
    
    commit 67a2e213e7e937c41c52ab5bc46bf3f4de469f6e upstream.
    
    This was found during userspace fuzzing test when a large size dma cma
    allocation is made by driver(like ion) through userspace.
    
      show_stack+0x10/0x1c
      dump_stack+0x74/0xc8
      kasan_report_error+0x2b0/0x408
      kasan_report+0x34/0x40
      __asan_storeN+0x15c/0x168
      memset+0x20/0x44
      __dma_alloc_coherent+0x114/0x18c
    
    Signed-off-by: Rohit Vaswani <rvaswani@codeaurora.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Miles Chen <miles.chen@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30a847400ea9fba0c605256aa51f65d13cc1b01e
Author: Sasha Levin <sasha.levin@oracle.com>
Date:   Tue Apr 14 15:47:04 2015 -0700

    mm: cma: constify and use correct signness in mm/cma.c
    
    commit ac173824959adeb489f9fcf88858774c4535a241 upstream.
    
    Constify function parameters and use correct signness where needed.
    
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Cc: Michal Nazarewicz <mina86@mina86.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Acked-by: Gregory Fong <gregory.0xf0@gmail.com>
    Cc: Pintu Kumar <pintu.k@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97f9df9adb66045be4871c6c416b0c011d24c0cc
Author: Danesh Petigara <dpetigara@broadcom.com>
Date:   Thu Mar 12 16:25:57 2015 -0700

    mm: cma: fix CMA aligned offset calculation
    
    commit 850fc430f47aad52092deaaeb32b99f97f0e6aca upstream.
    
    The CMA aligned offset calculation is incorrect for non-zero order_per_bit
    values.
    
    For example, if cma->order_per_bit=1, cma->base_pfn= 0x2f800000 and
    align_order=12, the function returns a value of 0x17c00 instead of 0x400.
    
    This patch fixes the CMA aligned offset calculation.
    
    The previous calculation was wrong and would return too-large values for
    the offset, so that when cma_alloc looks for free pages in the bitmap with
    the requested alignment > order_per_bit, it starts too far into the bitmap
    and so CMA allocations will fail despite there actually being plenty of
    free pages remaining.  It will also probably have the wrong alignment.
    With this change, we will get the correct offset into the bitmap.
    
    One affected user is powerpc KVM, which has kvm_cma->order_per_bit set to
    KVM_CMA_CHUNK_ORDER - PAGE_SHIFT, or 18 - 12 = 6.
    
    [gregory.0xf0@gmail.com: changelog additions]
    Signed-off-by: Danesh Petigara <dpetigara@broadcom.com>
    Reviewed-by: Gregory Fong <gregory.0xf0@gmail.com>
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09cdf6969c4156f14b96e86353d30f768e3cbaae
Author: George G. Davis <ggdavisiv@gmail.com>
Date:   Wed Feb 11 15:26:27 2015 -0800

    mm: cma: fix totalcma_pages to include DT defined CMA regions
    
    commit 94737a85f332aee75255960eaa16e89ddfa4c75a upstream.
    
    The totalcma_pages variable is not updated to account for CMA regions
    defined via device tree reserved-memory sub-nodes.  Fix this omission by
    moving the calculation of totalcma_pages into cma_init_reserved_mem()
    instead of cma_declare_contiguous() such that it will include reserved
    memory used by all CMA regions.
    
    Signed-off-by: George G. Davis <george_davis@mentor.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b18dd1fefb657444405ebc6e5fc4f18ea9a96c6a
Author: Pintu Kumar <pintu.k@samsung.com>
Date:   Thu Dec 18 16:17:15 2014 -0800

    mm: cma: split cma-reserved in dmesg log
    
    commit e48322abb061d75096fe52d71886b237e7ae7bfb upstream.
    
    When the system boots up, in the dmesg logs we can see the memory
    statistics along with total reserved as below.  Memory: 458840k/458840k
    available, 65448k reserved, 0K highmem
    
    When CMA is enabled, still the total reserved memory remains the same.
    However, the CMA memory is not considered as reserved.  But, when we see
    /proc/meminfo, the CMA memory is part of free memory.  This creates
    confusion.  This patch corrects the problem by properly subtracting the
    CMA reserved memory from the total reserved memory in dmesg logs.
    
    Below is the dmesg snapshot from an arm based device with 512MB RAM and
    12MB single CMA region.
    
    Before this change:
      Memory: 458840k/458840k available, 65448k reserved, 0K highmem
    
    After this change:
      Memory: 458840k/458840k available, 53160k reserved, 12288k cma-reserved, 0K highmem
    
    Signed-off-by: Pintu Kumar <pintu.k@samsung.com>
    Signed-off-by: Vishnu Pratap Singh <vishnu.ps@samsung.com>
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Cc: Rafael Aquini <aquini@redhat.com>
    Cc: Jerome Marchand <jmarchan@redhat.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit feb52e785e1f2a1f591d0771f722261352c97abe
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Dec 12 16:58:31 2014 -0800

    mm/cma: make kmemleak ignore CMA regions
    
    commit 620951e2745750de1482128615adc15b74ee37ed upstream.
    
    kmemleak will add allocations as objects to a pool.  The memory allocated
    for each object in this pool is periodically searched for pointers to
    other allocated objects.  This only works for memory that is mapped into
    the kernel's virtual address space, which happens not to be the case for
    most CMA regions.
    
    Furthermore, CMA regions are typically used to store data transferred to
    or from a device and therefore don't contain pointers to other objects.
    
    Without this, the kernel crashes on the first execution of the
    scan_gray_list() because it tries to access highmem.  Perhaps a more
    appropriate fix would be to reject any object that can't map to a kernel
    virtual address?
    
    [akpm@linux-foundation.org: add comment]
    [akpm@linux-foundation.org: fix comment, per Catalin]
    [sfr@canb.auug.org.au: include linux/io.h for phys_to_virt()]
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Cc: Michal Nazarewicz <mina86@mina86.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c61cc0ec1c20f75f39fabe17ee2dd21dffe3435
Author: Gregory Fong <gregory.0xf0@gmail.com>
Date:   Fri Dec 12 16:54:48 2014 -0800

    mm: cma: align to physical address, not CMA region position
    
    commit b5be83e308f70e16c63c4e520ea7bb03ef57c46f upstream.
    
    The alignment in cma_alloc() was done w.r.t. the bitmap.  This is a
    problem when, for example:
    
    - a device requires 16M (order 12) alignment
    - the CMA region is not 16 M aligned
    
    In such a case, can result with the CMA region starting at, say,
    0x2f800000 but any allocation you make from there will be aligned from
    there.  Requesting an allocation of 32 M with 16 M alignment will result
    in an allocation from 0x2f800000 to 0x31800000, which doesn't work very
    well if your strange device requires 16M alignment.
    
    Change to use bitmap_find_next_zero_area_off() to account for the
    difference in alignment at reserve-time and alloc-time.
    
    Signed-off-by: Gregory Fong <gregory.0xf0@gmail.com>
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: Laura Abbott <lauraa@codeaurora.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa69da4573fe24e83c3a773069aae5651f6747c6
Author: Michal Nazarewicz <mina86@mina86.com>
Date:   Fri Dec 12 16:54:45 2014 -0800

    lib: bitmap: add alignment offset for bitmap_find_next_zero_area()
    
    commit 5e19b013f55a884c59a14391b22138899d1cc4cc upstream.
    
    Add a bitmap_find_next_zero_area_off() function which works like
    bitmap_find_next_zero_area() function except it allows an offset to be
    specified when alignment is checked.  This lets caller request a bit such
    that its number plus the offset is aligned according to the mask.
    
    [gregory.0xf0@gmail.com: Retrieved from https://patchwork.linuxtv.org/patch/6254/ and updated documentation]
    Signed-off-by: Michal Nazarewicz <mina86@mina86.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Gregory Fong <gregory.0xf0@gmail.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: Laura Abbott <lauraa@codeaurora.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9988d693927f6eaab2d4b763798839cca41a0ec8
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Tue Jul 11 15:19:22 2017 +0100

    arm64: mm: abort uaccess retries upon fatal signal
    
    commit 289d07a2dc6c6b6f3e4b8a62669320d99dbe6c3d upstream.
    
    When there's a fatal signal pending, arm64's do_page_fault()
    implementation returns 0. The intent is that we'll return to the
    faulting userspace instruction, delivering the signal on the way.
    
    However, if we take a fatal signal during fixing up a uaccess, this
    results in a return to the faulting kernel instruction, which will be
    instantly retried, resulting in the same fault being taken forever. As
    the task never reaches userspace, the signal is not delivered, and the
    task is left unkillable. While the task is stuck in this state, it can
    inhibit the forward progress of the system.
    
    To avoid this, we must ensure that when a fatal signal is pending, we
    apply any necessary fixup for a faulting kernel instruction. Thus we
    will return to an error path, and it is up to that code to make forward
    progress towards delivering the fatal signal.
    
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Reviewed-by: Steve Capper <steve.capper@arm.com>
    Tested-by: Steve Capper <steve.capper@arm.com>
    Reviewed-by: James Morse <james.morse@arm.com>
    Tested-by: James Morse <james.morse@arm.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 752cc3c3a84e602c729c79b9b70e24aaa9b48d78
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Oct 14 11:23:09 2016 +0200

    p54: memset(0) whole array
    
    commit 6f17581788206444cbbcdbc107498f85e9765e3d upstream.
    
    gcc 7 complains:
    drivers/net/wireless/intersil/p54/fwio.c: In function 'p54_scan':
    drivers/net/wireless/intersil/p54/fwio.c:491:4: warning: 'memset' used with length equal to number of elements without multiplication by element size [-Wmemset-elt-size]
    
    Fix that by passing the correct size to memset.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Christian Lamparter <chunkeey@googlemail.com>
    Cc: Kalle Valo <kvalo@codeaurora.org>
    Acked-by: Christian Lamparter <chunkeey@googlemail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7049cdd153017fb144ee20108d2b01f4324b739
Author: Martin Liska <mliska@suse.cz>
Date:   Fri May 12 15:46:35 2017 -0700

    gcov: support GCC 7.1
    
    commit 05384213436ab690c46d9dfec706b80ef8d671ab upstream.
    
    Starting from GCC 7.1, __gcov_exit is a new symbol expected to be
    implemented in a profiling runtime.
    
    [akpm@linux-foundation.org: coding-style fixes]
    [mliska@suse.cz: v2]
      Link: http://lkml.kernel.org/r/e63a3c59-0149-c97e-4084-20ca8f146b26@suse.cz
    Link: http://lkml.kernel.org/r/8c4084fa-3885-29fe-5fc4-0d4ca199c785@suse.cz
    Signed-off-by: Martin Liska <mliska@suse.cz>
    Acked-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42b7c430f81431c60b1c88a8ed848d7f14cea8bc
Author: Florian Meier <Florian.Meier@informatik.uni-erlangen.de>
Date:   Thu Jul 14 12:07:26 2016 -0700

    gcov: add support for gcc version >= 6
    
    commit d02038f972538b93011d78c068f44514fbde0a8c upstream.
    
    Link: http://lkml.kernel.org/r/20160701130914.GA23225@styxhp
    Signed-off-by: Florian Meier <Florian.Meier@informatik.uni-erlangen.de>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
    Tested-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b1e352de7098a157684aeef341fbafbd45d3372
Author: Lorenzo Stoakes <lstoakes@gmail.com>
Date:   Tue Jun 30 14:57:49 2015 -0700

    gcov: add support for GCC 5.1
    
    commit 3e44c471a2dab210f7e9b1e5f7d4d54d52df59eb upstream.
    
    Fix kernel gcov support for GCC 5.1.  Similar to commit a992bf836f9
    ("gcov: add support for GCC 4.9"), this patch takes into account the
    existence of a new gcov counter (see gcc's gcc/gcov-counter.def.)
    
    Firstly, it increments GCOV_COUNTERS (to 10), which makes the data
    structure struct gcov_info compatible with GCC 5.1.
    
    Secondly, a corresponding counter function __gcov_merge_icall_topn (Top N
    value tracking for indirect calls) is included in base.c with the other
    gcov counters unused for kernel profiling.
    
    Signed-off-by: Lorenzo Stoakes <lstoakes@gmail.com>
    Cc: Andrey Ryabinin <a.ryabinin@samsung.com>
    Cc: Yuan Pengfei <coolypf@qq.com>
    Tested-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 687417919d03454cc417cf6c90fc5a59d118d96e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 12 18:04:16 2016 +0200

    ALSA: au88x0: Fix zero clear of stream->resources
    
    commit 639db596165746ca87bbcb56559b094fd9042890 upstream.
    
    There are a few calls of memset() to stream->resources, but they all
    are called in a wrong size, sizeof(unsigned char) * VORTEX_RESOURCE_LAST,
    while this field is a u32 array.  This may leave the memories not
    zero-cleared.
    
    Fix it by replacing them with a simpler sizeof(stream->resources)
    instead.
    
    Reported-by: David Binderman <dcb314@hotmail.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8df251426dae53a74dd6b2d3f02503a2b270c2ef
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Nov 18 17:14:01 2016 +0100

    scsi: isci: avoid array subscript warning
    
    commit 5cfa2a3c7342bd0b50716c8bb32ee491af43c785 upstream.
    
    I'm getting a new warning with gcc-7:
    
    isci/remote_node_context.c: In function 'sci_remote_node_context_destruct':
    isci/remote_node_context.c:69:16: error: array subscript is above array bounds [-Werror=array-bounds]
    
    This is odd, since we clearly cover all values for enum
    scis_sds_remote_node_context_states here. Anyway, checking for an array
    overflow can't harm and it makes the warning go away.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
