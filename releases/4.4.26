commit 4ad454918b1a7e4cccb373d3b1034052c49f6105
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 20 10:01:03 2016 +0200

    Linux 4.4.26

commit 1294d355881cc5c3421d24fee512f16974addb6c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 13 13:07:36 2016 -0700

    mm: remove gup_flags FOLL_WRITE games from __get_user_pages()
    
    commit 19be0eaffa3ac7d8eb6784ad9bdbc7d67ed8e619 upstream.
    
    This is an ancient bug that was actually attempted to be fixed once
    (badly) by me eleven years ago in commit 4ceb5db9757a ("Fix
    get_user_pages() race for write access") but that was then undone due to
    problems on s390 by commit f33ea7f404e5 ("fix get_user_pages bug").
    
    In the meantime, the s390 situation has long been fixed, and we can now
    fix it by checking the pte_dirty() bit properly (and do it better).  The
    s390 dirty bit was implemented in abf09bed3cce ("s390/mm: implement
    software dirty bits") which made it into v3.9.  Earlier kernels will
    have to look at the page state itself.
    
    Also, the VM has become more scalable, and what used a purely
    theoretical race back then has become easier to trigger.
    
    To fix it, we introduce a new internal FOLL_COW flag to mark the "yes,
    we already did a COW" rather than play racy games with FOLL_WRITE that
    is very fundamental, and then use the pte dirty flag to validate that
    the FOLL_COW flag is still valid.
    
    Reported-and-tested-by: Phil "not Paul" Oester <kernel@linuxace.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Reviewed-by: Michal Hocko <mhocko@suse.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: Nick Piggin <npiggin@gmail.com>
    Cc: Greg Thelen <gthelen@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74a2862d963e1e84616c3c9feeda1caed9f72c19
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Wed Mar 16 20:04:35 2016 -0700

    x86/build: Build compressed x86 kernels as PIE
    
    commit 6d92bc9d483aa1751755a66fee8fb39dffb088c0 upstream.
    
    The 32-bit x86 assembler in binutils 2.26 will generate R_386_GOT32X
    relocation to get the symbol address in PIC.  When the compressed x86
    kernel isn't built as PIC, the linker optimizes R_386_GOT32X relocations
    to their fixed symbol addresses.  However, when the compressed x86
    kernel is loaded at a different address, it leads to the following
    load failure:
    
      Failed to allocate space for phdrs
    
    during the decompression stage.
    
    If the compressed x86 kernel is relocatable at run-time, it should be
    compiled with -fPIE, instead of -fPIC, if possible and should be built as
    Position Independent Executable (PIE) so that linker won't optimize
    R_386_GOT32X relocation to its fixed symbol address.
    
    Older linkers generate R_386_32 relocations against locally defined
    symbols, _bss, _ebss, _got and _egot, in PIE.  It isn't wrong, just less
    optimal than R_386_RELATIVE.  But the x86 kernel fails to properly handle
    R_386_32 relocations when relocating the kernel.  To generate
    R_386_RELATIVE relocations, we mark _bss, _ebss, _got and _egot as
    hidden in both 32-bit and 64-bit x86 kernels.
    
    To build a 64-bit compressed x86 kernel as PIE, we need to disable the
    relocation overflow check to avoid relocation overflow errors. We do
    this with a new linker command-line option, -z noreloc-overflow, which
    got added recently:
    
     commit 4c10bbaa0912742322f10d9d5bb630ba4e15dfa7
     Author: H.J. Lu <hjl.tools@gmail.com>
     Date:   Tue Mar 15 11:07:06 2016 -0700
    
        Add -z noreloc-overflow option to x86-64 ld
    
        Add -z noreloc-overflow command-line option to the x86-64 ELF linker to
        disable relocation overflow check.  This can be used to avoid relocation
        overflow check if there will be no dynamic relocation overflow at
        run-time.
    
    The 64-bit compressed x86 kernel is built as PIE only if the linker supports
    -z noreloc-overflow.  So far 64-bit relocatable compressed x86 kernel
    boots fine even when it is built as a normal executable.
    
    Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    [ Edited the changelog and comments. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Paul Bolle <pebolle@tiscali.nl>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
