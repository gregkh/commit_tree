commit a2fc8ee6676067f27d2f5c6e4d512adff3d9938c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Oct 11 18:36:59 2019 +0200

    Linux 5.3.6

commit 7853607312c6dfe8a17ac7c8099e171e87f57dce
Author: Dave Jiang <dave.jiang@intel.com>
Date:   Tue Sep 24 10:34:49 2019 -0700

    libnvdimm: prevent nvdimm from requesting key when security is disabled
    
    [ Upstream commit 674f31a352da5e9f621f757b9a89262f486533a0 ]
    
    Current implementation attempts to request keys from the keyring even when
    security is not enabled. Change behavior so when security is disabled it
    will skip key request.
    
    Error messages seen when no keys are installed and libnvdimm is loaded:
    
        request-key[4598]: Cannot find command to construct key 661489677
        request-key[4606]: Cannot find command to construct key 34713726
    
    Cc: stable@vger.kernel.org
    Fixes: 4c6926a23b76 ("acpi/nfit, libnvdimm: Add unlock of nvdimm support for Intel DIMMs")
    Signed-off-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/156934642272.30222.5230162488753445916.stgit@djiang5-desk3.ch.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b08e2536b13bf80eb52c08b9243b014409f8f81
Author: Gao Xiang <xiang@kernel.org>
Date:   Wed Oct 9 18:05:54 2019 +0800

    staging: erofs: detect potential multiref due to corrupted images
    
    commit e12a0ce2fa69798194f3a8628baf6edfbd5c548f upstream.
    
    As reported by erofs-utils fuzzer, currently, multiref
    (ondisk deduplication) hasn't been supported for now,
    we should forbid it properly.
    
    Fixes: 3883a79abd02 ("staging: erofs: introduce VLE decompression support")
    Cc: <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Link: https://lore.kernel.org/r/20190821140152.229648-1-gaoxiang25@huawei.com
    [ Gao Xiang: Since earlier kernels don't define EFSCORRUPTED,
                 let's use EIO instead. ]
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c87d287c62a6d44f9afbe86911730b44e8a5946
Author: Gao Xiang <xiang@kernel.org>
Date:   Wed Oct 9 18:05:53 2019 +0800

    staging: erofs: avoid endless loop of invalid lookback distance 0
    
    commit 598bb8913d015150b7734b55443c0e53e7189fc7 upstream.
    
    As reported by erofs-utils fuzzer, Lookback distance should
    be a positive number, so it should be actually looked back
    rather than spinning.
    
    Fixes: 02827e1796b3 ("staging: erofs: add erofs_map_blocks_iter")
    Cc: <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Link: https://lore.kernel.org/r/20190819103426.87579-7-gaoxiang25@huawei.com
    [ Gao Xiang: Since earlier kernels don't define EFSCORRUPTED,
                 let's use EIO instead. ]
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bb124e1d18e984901039bec4ff94dd40dea8858
Author: Gao Xiang <xiang@kernel.org>
Date:   Wed Oct 9 18:05:52 2019 +0800

    staging: erofs: add two missing erofs_workgroup_put for corrupted images
    
    commit 138e1a0990e80db486ab9f6c06bd5c01f9a97999 upstream.
    
    As reported by erofs-utils fuzzer, these error handling
    path will be entered to handle corrupted images.
    
    Lack of erofs_workgroup_puts will cause unmounting
    unsuccessfully.
    
    Fix these return values to EFSCORRUPTED as well.
    
    Fixes: 3883a79abd02 ("staging: erofs: introduce VLE decompression support")
    Cc: <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Link: https://lore.kernel.org/r/20190819103426.87579-4-gaoxiang25@huawei.com
    [ Gao Xiang: Older kernel versions don't have length validity check
                 and EFSCORRUPTED, thus backport pageofs check for now. ]
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f59a603cd9f614c7aaa49178fb875a925b39c1fb
Author: Gao Xiang <xiang@kernel.org>
Date:   Wed Oct 9 18:05:51 2019 +0800

    staging: erofs: some compressed cluster should be submitted for corrupted images
    
    commit ee45197c807895e156b2be0abcaebdfc116487c8 upstream.
    
    As reported by erofs_utils fuzzer, a logical page can belong
    to at most 2 compressed clusters, if one compressed cluster
    is corrupted, but the other has been ready in submitting chain.
    
    The chain needs to submit anyway in order to keep the page
    working properly (page unlocked with PG_error set, PG_uptodate
    not set).
    
    Let's fix it now.
    
    Fixes: 3883a79abd02 ("staging: erofs: introduce VLE decompression support")
    Cc: <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Link: https://lore.kernel.org/r/20190819103426.87579-2-gaoxiang25@huawei.com
    [ Gao Xiang: Manually backport to v5.3.y stable. ]
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0be5f7bde907f944aca39bec607c68296337d6e
Author: Gao Xiang <xiang@kernel.org>
Date:   Sun Aug 18 20:54:57 2019 +0800

    staging: erofs: fix an error handling in erofs_readdir()
    
    commit acb383f1dcb4f1e79b66d4be3a0b6f519a957b0d upstream.
    
    Richard observed a forever loop of erofs_read_raw_page() [1]
    which can be generated by forcely setting ->u.i_blkaddr
    to 0xdeadbeef (as my understanding block layer can
    handle access beyond end of device correctly).
    
    After digging into that, it seems the problem is highly
    related with directories and then I found the root cause
    is an improper error handling in erofs_readdir().
    
    Let's fix it now.
    
    [1] https://lore.kernel.org/r/1163995781.68824.1566084358245.JavaMail.zimbra@nod.at/
    
    Reported-by: Richard Weinberger <richard@nod.at>
    Fixes: 3aa8ec716e52 ("staging: erofs: add directory operations")
    Cc: <stable@vger.kernel.org> # 4.19+
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Link: https://lore.kernel.org/r/20190818125457.25906-1-hsiangkao@aol.com
    [ Gao Xiang: Since earlier kernels don't define EFSCORRUPTED,
                 let's use original error code instead. ]
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da7c4810efad9881649b80bdc93f24b0bf77cbc4
Author: Andrew Murray <amurray@thegoodpenguin.co.uk>
Date:   Thu Aug 29 14:28:35 2019 -0600

    coresight: etm4x: Use explicit barriers on enable/disable
    
    commit 1004ce4c255fc3eb3ad9145ddd53547d1b7ce327 upstream.
    
    Synchronization is recommended before disabling the trace registers
    to prevent any start or stop points being speculative at the point
    of disabling the unit (section 7.3.77 of ARM IHI 0064D).
    
    Synchronization is also recommended after programming the trace
    registers to ensure all updates are committed prior to normal code
    resuming (section 4.3.7 of ARM IHI 0064D).
    
    Let's ensure these syncronization points are present in the code
    and clearly commented.
    
    Note that we could rely on the barriers in CS_LOCK and
    coresight_disclaim_device_unlocked or the context switch to user
    space - however coresight may be of use in the kernel.
    
    On armv8 the mb macro is defined as dsb(sy) - Given that the etm4x is
    only used on armv8 let's directly use dsb(sy) instead of mb(). This
    removes some ambiguity and makes it easier to correlate the code with
    the TRM.
    
    Signed-off-by: Andrew Murray <andrew.murray@arm.com>
    Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    [Fixed capital letter for "use" in title]
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20190829202842.580-11-mathieu.poirier@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3081bbf664ba63a98eb406d7c56c43400b07ec78
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Wed Oct 2 16:17:54 2019 -0500

    vfs: Fix EOVERFLOW testing in put_compat_statfs64
    
    commit cc3a7bfe62b947b423fcb2cfe89fcba92bf48fa3 upstream.
    
    Today, put_compat_statfs64() disallows nearly any field value over
    2^32 if f_bsize is only 32 bits, but that makes no sense.
    compat_statfs64 is there for the explicit purpose of providing 64-bit
    fields for f_files, f_ffree, etc.  And f_bsize is always only 32 bits.
    
    As a result, 32-bit userspace gets -EOVERFLOW for i.e.  large file
    counts even with -D_FILE_OFFSET_BITS=64 set.
    
    In reality, only f_bsize and f_frsize can legitimately overflow
    (fields like f_type and f_namelen should never be large), so test
    only those fields.
    
    This bug was discussed at length some time ago, and this is the proposal
    Al suggested at https://lkml.org/lkml/2018/8/6/640.  It seemed to get
    dropped amid the discussion of other related changes, but this
    part seems obviously correct on its own, so I've picked it up and
    sent it, for expediency.
    
    Fixes: 64d2ab32efe3 ("vfs: fix put_compat_statfs64() does not handle errors")
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6274fb910012f1a7030e7d27fc5a5229757ddab4
Author: Vincent Chen <vincent.chen@sifive.com>
Date:   Mon Sep 16 16:47:41 2019 +0800

    riscv: Avoid interrupts being erroneously enabled in handle_exception()
    
    [ Upstream commit c82dd6d078a2bb29d41eda032bb96d05699a524d ]
    
    When the handle_exception function addresses an exception, the interrupts
    will be unconditionally enabled after finishing the context save. However,
    It may erroneously enable the interrupts if the interrupts are disabled
    before entering the handle_exception.
    
    For example, one of the WARN_ON() condition is satisfied in the scheduling
    where the interrupt is disabled and rq.lock is locked. The WARN_ON will
    trigger a break exception and the handle_exception function will enable the
    interrupts before entering do_trap_break function. During the procedure, if
    a timer interrupt is pending, it will be taken when interrupts are enabled.
    In this case, it may cause a deadlock problem if the rq.lock is locked
    again in the timer ISR.
    
    Hence, the handle_exception() can only enable interrupts when the state of
    sstatus.SPIE is 1.
    
    This patch is tested on HiFive Unleashed board.
    
    Signed-off-by: Vincent Chen <vincent.chen@sifive.com>
    Reviewed-by: Palmer Dabbelt <palmer@sifive.com>
    [paul.walmsley@sifive.com: updated to apply]
    Fixes: bcae803a21317 ("RISC-V: Enable IRQ during exception handling")
    Cc: David Abdurachmanov <david.abdurachmanov@sifive.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e98e7066030f8c3414af4e022af9eeccfc77176
Author: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Date:   Wed Sep 4 15:17:37 2019 +0530

    perf stat: Reset previous counts on repeat with interval
    
    [ Upstream commit b63fd11cced17fcb8e133def29001b0f6aaa5e06 ]
    
    When using 'perf stat' with repeat and interval option, it shows wrong
    values for events.
    
    The wrong values will be shown for the first interval on the second and
    subsequent repetitions.
    
    Without the fix:
    
      # perf stat -r 3 -I 2000 -e faults -e sched:sched_switch -a sleep 5
    
         2.000282489                 53      faults
         2.000282489                513      sched:sched_switch
         4.005478208              3,721      faults
         4.005478208              2,666      sched:sched_switch
         5.025470933                395      faults
         5.025470933              1,307      sched:sched_switch
         2.009602825 1,84,46,74,40,73,70,95,47,520      faults              <------
         2.009602825 1,84,46,74,40,73,70,95,49,568      sched:sched_switch  <------
         4.019612206              4,730      faults
         4.019612206              2,746      sched:sched_switch
         5.039615484              3,953      faults
         5.039615484              1,496      sched:sched_switch
         2.000274620 1,84,46,74,40,73,70,95,47,520      faults              <------
         2.000274620 1,84,46,74,40,73,70,95,47,520      sched:sched_switch  <------
         4.000480342              4,282      faults
         4.000480342              2,303      sched:sched_switch
         5.000916811              1,322      faults
         5.000916811              1,064      sched:sched_switch
      #
    
    prev_raw_counts is allocated when using intervals. This is used when
    calculating the difference in the counts of events when using interval.
    
    The current counts are stored in prev_raw_counts to calculate the
    differences in the next iteration.
    
    On the first interval of the second and subsequent repetitions,
    prev_raw_counts would be the values stored in the last interval of the
    previous repetitions, while the current counts will only be for the
    first interval of the current repetition.
    
    Hence there is a possibility of events showing up as big number.
    
    Fix this by resetting prev_raw_counts whenever perf stat repeats the
    command.
    
    With the fix:
    
      # perf stat -r 3 -I 2000 -e faults -e sched:sched_switch -a sleep 5
    
         2.019349347              2,597      faults
         2.019349347              2,753      sched:sched_switch
         4.019577372              3,098      faults
         4.019577372              2,532      sched:sched_switch
         5.019415481              1,879      faults
         5.019415481              1,356      sched:sched_switch
         2.000178813              8,468      faults
         2.000178813              2,254      sched:sched_switch
         4.000404621              7,440      faults
         4.000404621              1,266      sched:sched_switch
         5.040196079              2,458      faults
         5.040196079                556      sched:sched_switch
         2.000191939              6,870      faults
         2.000191939              1,170      sched:sched_switch
         4.000414103                541      faults
         4.000414103                902      sched:sched_switch
         5.000809863                450      faults
         5.000809863                364      sched:sched_switch
      #
    
    Committer notes:
    
    This was broken since the cset introducing the --interval feature, i.e.
    --repeat + --interval wasn't tested at that point, add the Fixes tag so
    that automatic scripts can pick this up.
    
    Fixes: 13370a9b5bb8 ("perf stat: Add interval printing")
    Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: stable@vger.kernel.org # v3.9+
    Link: http://lore.kernel.org/lkml/20190904094738.9558-2-srikar@linux.vnet.ibm.com
    [ Fixed up conflicts with libperf, i.e. some perf_{evsel,evlist} lost the 'perf' prefix ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91dbd8778f7fce438a16e1ae2b22c55e885bdff8
Author: Balasubramani Vivekanandan <balasubramani_vivekanandan@mentor.com>
Date:   Thu Sep 26 15:51:01 2019 +0200

    tick: broadcast-hrtimer: Fix a race in bc_set_next
    
    [ Upstream commit b9023b91dd020ad7e093baa5122b6968c48cc9e0 ]
    
    When a cpu requests broadcasting, before starting the tick broadcast
    hrtimer, bc_set_next() checks if the timer callback (bc_handler) is active
    using hrtimer_try_to_cancel(). But hrtimer_try_to_cancel() does not provide
    the required synchronization when the callback is active on other core.
    
    The callback could have already executed tick_handle_oneshot_broadcast()
    and could have also returned. But still there is a small time window where
    the hrtimer_try_to_cancel() returns -1. In that case bc_set_next() returns
    without doing anything, but the next_event of the tick broadcast clock
    device is already set to a timeout value.
    
    In the race condition diagram below, CPU #1 is running the timer callback
    and CPU #2 is entering idle state and so calls bc_set_next().
    
    In the worst case, the next_event will contain an expiry time, but the
    hrtimer will not be started which happens when the racing callback returns
    HRTIMER_NORESTART. The hrtimer might never recover if all further requests
    from the CPUs to subscribe to tick broadcast have timeout greater than the
    next_event of tick broadcast clock device. This leads to cascading of
    failures and finally noticed as rcu stall warnings
    
    Here is a depiction of the race condition
    
    CPU #1 (Running timer callback)                   CPU #2 (Enter idle
                                                      and subscribe to
                                                      tick broadcast)
    ---------------------                             ---------------------
    
    __run_hrtimer()                                   tick_broadcast_enter()
    
      bc_handler()                                      __tick_broadcast_oneshot_control()
    
        tick_handle_oneshot_broadcast()
    
          raw_spin_lock(&tick_broadcast_lock);
    
          dev->next_event = KTIME_MAX;                  //wait for tick_broadcast_lock
          //next_event for tick broadcast clock
          set to KTIME_MAX since no other cores
          subscribed to tick broadcasting
    
          raw_spin_unlock(&tick_broadcast_lock);
    
        if (dev->next_event == KTIME_MAX)
          return HRTIMER_NORESTART
        // callback function exits without
           restarting the hrtimer                      //tick_broadcast_lock acquired
                                                       raw_spin_lock(&tick_broadcast_lock);
    
                                                       tick_broadcast_set_event()
    
                                                         clockevents_program_event()
    
                                                           dev->next_event = expires;
    
                                                           bc_set_next()
    
                                                             hrtimer_try_to_cancel()
                                                             //returns -1 since the timer
                                                             callback is active. Exits without
                                                             restarting the timer
      cpu_base->running = NULL;
    
    The comment that hrtimer cannot be armed from within the callback is
    wrong. It is fine to start the hrtimer from within the callback. Also it is
    safe to start the hrtimer from the enter/exit idle code while the broadcast
    handler is active. The enter/exit idle code and the broadcast handler are
    synchronized using tick_broadcast_lock. So there is no need for the
    existing try to cancel logic. All this can be removed which will eliminate
    the race condition as well.
    
    Fixes: 5d1638acb9f6 ("tick: Introduce hrtimer based broadcast")
    Originally-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Balasubramani Vivekanandan <balasubramani_vivekanandan@mentor.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190926135101.12102-2-balasubramani_vivekanandan@mentor.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cf37ebc5a7afcdecf0db65a37bd159bf2ceb029
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Oct 1 09:21:23 2019 -0700

    KVM: nVMX: Fix consistency check on injected exception error code
    
    [ Upstream commit 567926cca99ba1750be8aae9c4178796bf9bb90b ]
    
    Current versions of Intel's SDM incorrectly state that "bits 31:15 of
    the VM-Entry exception error-code field" must be zero.  In reality, bits
    31:16 must be zero, i.e. error codes are 16-bit values.
    
    The bogus error code check manifests as an unexpected VM-Entry failure
    due to an invalid code field (error number 7) in L1, e.g. when injecting
    a #GP with error_code=0x9f00.
    
    Nadav previously reported the bug[*], both to KVM and Intel, and fixed
    the associated kvm-unit-test.
    
    [*] https://patchwork.kernel.org/patch/11124749/
    
    Reported-by: Nadav Amit <namit@vmware.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01dadc31ec1b8885ebc3a729b5748a0aaeba6fba
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 18 13:08:52 2019 +0100

    Btrfs: fix selftests failure due to uninitialized i_mode in test inodes
    
    [ Upstream commit 9f7fec0ba89108b9385f1b9fb167861224912a4a ]
    
    Some of the self tests create a test inode, setup some extents and then do
    calls to btrfs_get_extent() to test that the corresponding extent maps
    exist and are correct. However btrfs_get_extent(), since the 5.2 merge
    window, now errors out when it finds a regular or prealloc extent for an
    inode that does not correspond to a regular file (its ->i_mode is not
    S_IFREG). This causes the self tests to fail sometimes, specially when
    KASAN, slub_debug and page poisoning are enabled:
    
      $ modprobe btrfs
      modprobe: ERROR: could not insert 'btrfs': Invalid argument
    
      $ dmesg
      [ 9414.691648] Btrfs loaded, crc32c=crc32c-intel, debug=on, assert=on, integrity-checker=on, ref-verify=on
      [ 9414.692655] BTRFS: selftest: sectorsize: 4096  nodesize: 4096
      [ 9414.692658] BTRFS: selftest: running btrfs free space cache tests
      [ 9414.692918] BTRFS: selftest: running extent only tests
      [ 9414.693061] BTRFS: selftest: running bitmap only tests
      [ 9414.693366] BTRFS: selftest: running bitmap and extent tests
      [ 9414.696455] BTRFS: selftest: running space stealing from bitmap to extent tests
      [ 9414.697131] BTRFS: selftest: running extent buffer operation tests
      [ 9414.697133] BTRFS: selftest: running btrfs_split_item tests
      [ 9414.697564] BTRFS: selftest: running extent I/O tests
      [ 9414.697583] BTRFS: selftest: running find delalloc tests
      [ 9415.081125] BTRFS: selftest: running find_first_clear_extent_bit test
      [ 9415.081278] BTRFS: selftest: running extent buffer bitmap tests
      [ 9415.124192] BTRFS: selftest: running inode tests
      [ 9415.124195] BTRFS: selftest: running btrfs_get_extent tests
      [ 9415.127909] BTRFS: selftest: running hole first btrfs_get_extent test
      [ 9415.128343] BTRFS critical (device (efault)): regular/prealloc extent found for non-regular inode 256
      [ 9415.131428] BTRFS: selftest: fs/btrfs/tests/inode-tests.c:904 expected a real extent, got 0
    
    This happens because the test inodes are created without ever initializing
    the i_mode field of the inode, and neither VFS's new_inode() nor the btrfs
    callback btrfs_alloc_inode() initialize the i_mode. Initialization of the
    i_mode is done through the various callbacks used by the VFS to create
    new inodes (regular files, directories, symlinks, tmpfiles, etc), which
    all call btrfs_new_inode() which in turn calls inode_init_owner(), which
    sets the inode's i_mode. Since the tests only uses new_inode() to create
    the test inodes, the i_mode was never initialized.
    
    This always happens on a VM I used with kasan, slub_debug and many other
    debug facilities enabled. It also happened to someone who reported this
    on bugzilla (on a 5.3-rc).
    
    Fix this by setting i_mode to S_IFREG at btrfs_new_test_inode().
    
    Fixes: 6bf9e4bd6a2778 ("btrfs: inode: Verify inode mode to avoid NULL pointer dereference")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=204397
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bfa281e24055c6ecfc1617d678ddeeb74998b5b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Sep 7 22:32:38 2019 +0200

    drm/radeon: Bail earlier when radeon.cik_/si_support=0 is passed
    
    [ Upstream commit 9dbc88d013b79c62bd845cb9e7c0256e660967c5 ]
    
    Bail from the pci_driver probe function instead of from the drm_driver
    load function.
    
    This avoid /dev/dri/card0 temporarily getting registered and then
    unregistered again, sending unwanted add / remove udev events to
    userspace.
    
    Specifically this avoids triggering the (userspace) bug fixed by this
    plymouth merge-request:
    https://gitlab.freedesktop.org/plymouth/plymouth/merge_requests/59
    
    Note that despite that being an userspace bug, not sending unnecessary
    udev events is a good idea in general.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1490490
    Reviewed-by: Michel Dänzer <mdaenzer@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eab54b91ad373fc59c37acd22cc912cff98f41c7
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Sep 26 20:51:46 2019 -0500

    nfp: abm: fix memory leak in nfp_abm_u32_knode_replace
    
    [ Upstream commit 78beef629fd95be4ed853b2d37b832f766bd96ca ]
    
    In nfp_abm_u32_knode_replace if the allocation for match fails it should
    go to the error handling instead of returning. Updated other gotos to
    have correct errno returned, too.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44a7413724e916331a37b2b8f24fd7ee0e82e4e1
Author: Danielle Ratson <danieller@mellanox.com>
Date:   Thu Sep 26 14:43:40 2019 +0300

    mlxsw: spectrum_flower: Fail in case user specifies multiple mirror actions
    
    [ Upstream commit 52feb8b588f6d23673dd7cc2b44b203493b627f6 ]
    
    The ASIC can only mirror a packet to one port, but when user is trying
    to set more than one mirror action, it doesn't fail.
    
    Add a check if more than one mirror action was specified per rule and if so,
    fail for not being supported.
    
    Fixes: d0d13c1858a11 ("mlxsw: spectrum_acl: Add support for mirror action")
    Signed-off-by: Danielle Ratson <danieller@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbfd41bf39a5303cb2b5bc16ff2da79145046777
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Sep 26 14:36:48 2019 -0300

    perf unwind: Fix libunwind build failure on i386 systems
    
    [ Upstream commit 26acf400d2dcc72c7e713e1f55db47ad92010cc2 ]
    
    Naresh Kamboju reported, that on the i386 build pr_err()
    doesn't get defined properly due to header ordering:
    
      perf-in.o: In function `libunwind__x86_reg_id':
      tools/perf/util/libunwind/../../arch/x86/util/unwind-libunwind.c:109:
      undefined reference to `pr_err'
    
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6b8b9e651fc502542b61e067bb97aac3901828f
Author: Lee Jones <lee.jones@linaro.org>
Date:   Thu Sep 5 20:24:12 2019 +0100

    i2c: qcom-geni: Disable DMA processing on the Lenovo Yoga C630
    
    [ Upstream commit 127068abe85bf3dee50df51cb039a5a987a4a666 ]
    
    We have a production-level laptop (Lenovo Yoga C630) which is exhibiting
    a rather horrific bug.  When I2C HID devices are being scanned for at
    boot-time the QCom Geni based I2C (Serial Engine) attempts to use DMA.
    When it does, the laptop reboots and the user never sees the OS.
    
    Attempts are being made to debug the reason for the spontaneous reboot.
    No luck so far, hence the requirement for this hot-fix.  This workaround
    will be removed once we have a viable fix.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Tested-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b42143928e5beb2199017177ae12308e3ab1bfe
Author: Marek Vasut <marex@denx.de>
Date:   Thu Sep 26 00:08:42 2019 +0200

    net: dsa: microchip: Always set regmap stride to 1
    
    [ Upstream commit a3aa6e65beebf3780026753ebf39db19f4c92990 ]
    
    The regmap stride is set to 1 for regmap describing 8bit registers already.
    However, for 16/32/64bit registers, the stride is 2/4/8 respectively. This
    is not correct, as the switch protocol supports unaligned register reads
    and writes and the KSZ87xx even uses such unaligned register accesses to
    read e.g. MIB counter.
    
    This patch fixes MIB counter access on KSZ87xx.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: George McCollister <george.mccollister@gmail.com>
    Cc: Tristram Ha <Tristram.Ha@microchip.com>
    Cc: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
    Cc: Woojung Huh <woojung.huh@microchip.com>
    Fixes: 46558d601cb6 ("net: dsa: microchip: Initial SPI regmap support")
    Fixes: 255b59ad0db2 ("net: dsa: microchip: Factor out regmap config generation into common header")
    Reviewed-by: George McCollister <george.mccollister@gmail.com>
    Tested-by: George McCollister <george.mccollister@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7943c097dd0e9b955593a2cb538e75036e7a443a
Author: Allan Zhang <allanzhang@google.com>
Date:   Wed Sep 25 16:43:12 2019 -0700

    bpf: Fix bpf_event_output re-entry issue
    
    [ Upstream commit 768fb61fcc13b2acaca758275d54c09a65e2968b ]
    
    BPF_PROG_TYPE_SOCK_OPS program can reenter bpf_event_output because it
    can be called from atomic and non-atomic contexts since we don't have
    bpf_prog_active to prevent it happen.
    
    This patch enables 3 levels of nesting to support normal, irq and nmi
    context.
    
    We can easily reproduce the issue by running netperf crr mode with 100
    flows and 10 threads from netperf client side.
    
    Here is the whole stack dump:
    
    [  515.228898] WARNING: CPU: 20 PID: 14686 at kernel/trace/bpf_trace.c:549 bpf_event_output+0x1f9/0x220
    [  515.228903] CPU: 20 PID: 14686 Comm: tcp_crr Tainted: G        W        4.15.0-smp-fixpanic #44
    [  515.228904] Hardware name: Intel TBG,ICH10/Ikaria_QC_1b, BIOS 1.22.0 06/04/2018
    [  515.228905] RIP: 0010:bpf_event_output+0x1f9/0x220
    [  515.228906] RSP: 0018:ffff9a57ffc03938 EFLAGS: 00010246
    [  515.228907] RAX: 0000000000000012 RBX: 0000000000000001 RCX: 0000000000000000
    [  515.228907] RDX: 0000000000000000 RSI: 0000000000000096 RDI: ffffffff836b0f80
    [  515.228908] RBP: ffff9a57ffc039c8 R08: 0000000000000004 R09: 0000000000000012
    [  515.228908] R10: ffff9a57ffc1de40 R11: 0000000000000000 R12: 0000000000000002
    [  515.228909] R13: ffff9a57e13bae00 R14: 00000000ffffffff R15: ffff9a57ffc1e2c0
    [  515.228910] FS:  00007f5a3e6ec700(0000) GS:ffff9a57ffc00000(0000) knlGS:0000000000000000
    [  515.228910] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  515.228911] CR2: 0000537082664fff CR3: 000000061fed6002 CR4: 00000000000226f0
    [  515.228911] Call Trace:
    [  515.228913]  <IRQ>
    [  515.228919]  [<ffffffff82c6c6cb>] bpf_sockopt_event_output+0x3b/0x50
    [  515.228923]  [<ffffffff8265daee>] ? bpf_ktime_get_ns+0xe/0x10
    [  515.228927]  [<ffffffff8266fda5>] ? __cgroup_bpf_run_filter_sock_ops+0x85/0x100
    [  515.228930]  [<ffffffff82cf90a5>] ? tcp_init_transfer+0x125/0x150
    [  515.228933]  [<ffffffff82cf9159>] ? tcp_finish_connect+0x89/0x110
    [  515.228936]  [<ffffffff82cf98e4>] ? tcp_rcv_state_process+0x704/0x1010
    [  515.228939]  [<ffffffff82c6e263>] ? sk_filter_trim_cap+0x53/0x2a0
    [  515.228942]  [<ffffffff82d90d1f>] ? tcp_v6_inbound_md5_hash+0x6f/0x1d0
    [  515.228945]  [<ffffffff82d92160>] ? tcp_v6_do_rcv+0x1c0/0x460
    [  515.228947]  [<ffffffff82d93558>] ? tcp_v6_rcv+0x9f8/0xb30
    [  515.228951]  [<ffffffff82d737c0>] ? ip6_route_input+0x190/0x220
    [  515.228955]  [<ffffffff82d5f7ad>] ? ip6_protocol_deliver_rcu+0x6d/0x450
    [  515.228958]  [<ffffffff82d60246>] ? ip6_rcv_finish+0xb6/0x170
    [  515.228961]  [<ffffffff82d5fb90>] ? ip6_protocol_deliver_rcu+0x450/0x450
    [  515.228963]  [<ffffffff82d60361>] ? ipv6_rcv+0x61/0xe0
    [  515.228966]  [<ffffffff82d60190>] ? ipv6_list_rcv+0x330/0x330
    [  515.228969]  [<ffffffff82c4976b>] ? __netif_receive_skb_one_core+0x5b/0xa0
    [  515.228972]  [<ffffffff82c497d1>] ? __netif_receive_skb+0x21/0x70
    [  515.228975]  [<ffffffff82c4a8d2>] ? process_backlog+0xb2/0x150
    [  515.228978]  [<ffffffff82c4aadf>] ? net_rx_action+0x16f/0x410
    [  515.228982]  [<ffffffff830000dd>] ? __do_softirq+0xdd/0x305
    [  515.228986]  [<ffffffff8252cfdc>] ? irq_exit+0x9c/0xb0
    [  515.228989]  [<ffffffff82e02de5>] ? smp_call_function_single_interrupt+0x65/0x120
    [  515.228991]  [<ffffffff82e020e1>] ? call_function_single_interrupt+0x81/0x90
    [  515.228992]  </IRQ>
    [  515.228996]  [<ffffffff82a11ff0>] ? io_serial_in+0x20/0x20
    [  515.229000]  [<ffffffff8259c040>] ? console_unlock+0x230/0x490
    [  515.229003]  [<ffffffff8259cbaa>] ? vprintk_emit+0x26a/0x2a0
    [  515.229006]  [<ffffffff8259cbff>] ? vprintk_default+0x1f/0x30
    [  515.229008]  [<ffffffff8259d9f5>] ? vprintk_func+0x35/0x70
    [  515.229011]  [<ffffffff8259d4bb>] ? printk+0x50/0x66
    [  515.229013]  [<ffffffff82637637>] ? bpf_event_output+0xb7/0x220
    [  515.229016]  [<ffffffff82c6c6cb>] ? bpf_sockopt_event_output+0x3b/0x50
    [  515.229019]  [<ffffffff8265daee>] ? bpf_ktime_get_ns+0xe/0x10
    [  515.229023]  [<ffffffff82c29e87>] ? release_sock+0x97/0xb0
    [  515.229026]  [<ffffffff82ce9d6a>] ? tcp_recvmsg+0x31a/0xda0
    [  515.229029]  [<ffffffff8266fda5>] ? __cgroup_bpf_run_filter_sock_ops+0x85/0x100
    [  515.229032]  [<ffffffff82ce77c1>] ? tcp_set_state+0x191/0x1b0
    [  515.229035]  [<ffffffff82ced10e>] ? tcp_disconnect+0x2e/0x600
    [  515.229038]  [<ffffffff82cecbbb>] ? tcp_close+0x3eb/0x460
    [  515.229040]  [<ffffffff82d21082>] ? inet_release+0x42/0x70
    [  515.229043]  [<ffffffff82d58809>] ? inet6_release+0x39/0x50
    [  515.229046]  [<ffffffff82c1f32d>] ? __sock_release+0x4d/0xd0
    [  515.229049]  [<ffffffff82c1f3e5>] ? sock_close+0x15/0x20
    [  515.229052]  [<ffffffff8273b517>] ? __fput+0xe7/0x1f0
    [  515.229055]  [<ffffffff8273b66e>] ? ____fput+0xe/0x10
    [  515.229058]  [<ffffffff82547bf2>] ? task_work_run+0x82/0xb0
    [  515.229061]  [<ffffffff824086df>] ? exit_to_usermode_loop+0x7e/0x11f
    [  515.229064]  [<ffffffff82408171>] ? do_syscall_64+0x111/0x130
    [  515.229067]  [<ffffffff82e0007c>] ? entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Fixes: a5a3a828cd00 ("bpf: add perf event notificaton support for sock_ops")
    Signed-off-by: Allan Zhang <allanzhang@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Stanislav Fomichev <sdf@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20190925234312.94063-2-allanzhang@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50adc2232c0dccfea48af65c3cf852524c4dab2a
Author: Ming Lei <ming.lei@redhat.com>
Date:   Thu Sep 26 06:23:54 2019 +0800

    blk-mq: move lockdep_assert_held() into elevator_exit
    
    [ Upstream commit 284b94be1925dbe035ce5218d8b5c197321262c7 ]
    
    Commit c48dac137a62 ("block: don't hold q->sysfs_lock in elevator_init_mq")
    removes q->sysfs_lock from elevator_init_mq(), but forgot to deal with
    lockdep_assert_held() called in blk_mq_sched_free_requests() which is
    run in failure path of elevator_init_mq().
    
    blk_mq_sched_free_requests() is called in the following 3 functions:
    
            elevator_init_mq()
            elevator_exit()
            blk_cleanup_queue()
    
    In blk_cleanup_queue(), blk_mq_sched_free_requests() is followed exactly
    by 'mutex_lock(&q->sysfs_lock)'.
    
    So moving the lockdep_assert_held() from blk_mq_sched_free_requests()
    into elevator_exit() for fixing the report by syzbot.
    
    Reported-by: syzbot+da3b7677bb913dc1b737@syzkaller.appspotmail.com
    Fixed: c48dac137a62 ("block: don't hold q->sysfs_lock in elevator_init_mq")
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a36780616274b1ef0bfb0095e5a9af38f9fee8d6
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Sep 25 11:30:38 2019 -0700

    libbpf: fix false uninitialized variable warning
    
    [ Upstream commit aef70a1f44c0b570e6345c02c2d240471859f0a4 ]
    
    Some compilers emit warning for potential uninitialized next_id usage.
    The code is correct, but control flow is too complicated for some
    compilers to figure this out. Re-initialize next_id to satisfy
    compiler.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae0550c225d0919b47d5a19aa579df4b74cb73a5
Author: Valdis Kletnieks <valdis.kletnieks@vt.edu>
Date:   Wed Sep 25 16:45:59 2019 -0700

    kernel/elfcore.c: include proper prototypes
    
    [ Upstream commit 0f74914071ab7e7b78731ed62bf350e3a344e0a5 ]
    
    When building with W=1, gcc properly complains that there's no prototypes:
    
      CC      kernel/elfcore.o
    kernel/elfcore.c:7:17: warning: no previous prototype for 'elf_core_extra_phdrs' [-Wmissing-prototypes]
        7 | Elf_Half __weak elf_core_extra_phdrs(void)
          |                 ^~~~~~~~~~~~~~~~~~~~
    kernel/elfcore.c:12:12: warning: no previous prototype for 'elf_core_write_extra_phdrs' [-Wmissing-prototypes]
       12 | int __weak elf_core_write_extra_phdrs(struct coredump_params *cprm, loff_t offset)
          |            ^~~~~~~~~~~~~~~~~~~~~~~~~~
    kernel/elfcore.c:17:12: warning: no previous prototype for 'elf_core_write_extra_data' [-Wmissing-prototypes]
       17 | int __weak elf_core_write_extra_data(struct coredump_params *cprm)
          |            ^~~~~~~~~~~~~~~~~~~~~~~~~
    kernel/elfcore.c:22:15: warning: no previous prototype for 'elf_core_extra_data_size' [-Wmissing-prototypes]
       22 | size_t __weak elf_core_extra_data_size(void)
          |               ^~~~~~~~~~~~~~~~~~~~~~~~
    
    Provide the include file so gcc is happy, and we don't have potential code drift
    
    Link: http://lkml.kernel.org/r/29875.1565224705@turing-police
    Signed-off-by: Valdis Kletnieks <valdis.kletnieks@vt.edu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1991fd0e1a5bde98ff63dcd1aa91cb56d9c1ba10
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Sep 25 11:52:05 2019 -0700

    selftests/bpf: adjust strobemeta loop to satisfy latest clang
    
    [ Upstream commit 4670d68b9254710fdeaf794cad54d8b2c9929e0a ]
    
    Some recent changes in latest Clang started causing the following
    warning when unrolling strobemeta test case main loop:
    
      progs/strobemeta.h:416:2: warning: loop not unrolled: the optimizer was
      unable to perform the requested transformation; the transformation might
      be disabled or specified as part of an unsupported transformation
      ordering [-Wpass-failed=transform-warning]
    
    This patch simplifies loop's exit condition to depend only on constant
    max iteration number (STROBE_MAX_MAP_ENTRIES), while moving early
    termination logic inside the loop body. The changes are equivalent from
    program logic standpoint, but fixes the warning. It also appears to
    improve generated BPF code, as it fixes previously failing non-unrolled
    strobemeta test cases.
    
    Cc: Alexei Starovoitov <ast@fb.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 218913853423d30737936cc0dffb8c0bb8199bb5
Author: Qian Cai <cai@lca.pw>
Date:   Wed Sep 25 16:46:16 2019 -0700

    include/trace/events/writeback.h: fix -Wstringop-truncation warnings
    
    [ Upstream commit d1a445d3b86c9341ce7a0954c23be0edb5c9bec5 ]
    
    There are many of those warnings.
    
    In file included from ./arch/powerpc/include/asm/paca.h:15,
                     from ./arch/powerpc/include/asm/current.h:13,
                     from ./include/linux/thread_info.h:21,
                     from ./include/asm-generic/preempt.h:5,
                     from ./arch/powerpc/include/generated/asm/preempt.h:1,
                     from ./include/linux/preempt.h:78,
                     from ./include/linux/spinlock.h:51,
                     from fs/fs-writeback.c:19:
    In function 'strncpy',
        inlined from 'perf_trace_writeback_page_template' at
    ./include/trace/events/writeback.h:56:1:
    ./include/linux/string.h:260:9: warning: '__builtin_strncpy' specified
    bound 32 equals destination size [-Wstringop-truncation]
      return __builtin_strncpy(p, q, size);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Fix it by using the new strscpy_pad() which was introduced in "lib/string:
    Add strscpy_pad() function" and will always be NUL-terminated instead of
    strncpy().  Also, change strlcpy() to use strscpy_pad() in this file for
    consistency.
    
    Link: http://lkml.kernel.org/r/1564075099-27750-1-git-send-email-cai@lca.pw
    Fixes: 455b2864686d ("writeback: Initial tracing support")
    Fixes: 028c2dd184c0 ("writeback: Add tracing to balance_dirty_pages")
    Fixes: e84d0a4f8e39 ("writeback: trace event writeback_queue_io")
    Fixes: b48c104d2211 ("writeback: trace event bdi_dirty_ratelimit")
    Fixes: cc1676d917f3 ("writeback: Move requeueing when I_SYNC set to writeback_sb_inodes()")
    Fixes: 9fb0a7da0c52 ("writeback: add more tracepoints")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Tobin C. Harding <tobin@kernel.org>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Dave Chinner <dchinner@redhat.com>
    Cc: Fengguang Wu <fengguang.wu@intel.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Joe Perches <joe@perches.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Nitin Gote <nitin.r.gote@intel.com>
    Cc: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Cc: Stephen Kitt <steve@sk2.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67dcf7fa104f452297dc4f81a7ee48c7e70dc5fa
Author: Thomas Richter <tmricht@linux.ibm.com>
Date:   Mon Sep 9 13:41:16 2019 +0200

    perf build: Add detection of java-11-openjdk-devel package
    
    [ Upstream commit 815c1560bf8fd522b8d93a1d727868b910c1cc24 ]
    
    With Java 11 there is no seperate JRE anymore.
    
    Details:
    
      https://coderanch.com/t/701603/java/JRE-JDK
    
    Therefore the detection of the JRE needs to be adapted.
    
    This change works for s390 and x86.  I have not tested other platforms.
    
    Committer testing:
    
    Continues to work with the OpenJDK 8:
    
      $ rm -f ~acme/lib64/libperf-jvmti.so
      $ rpm -qa | grep jdk-devel
      java-1.8.0-openjdk-devel-1.8.0.222.b10-0.fc30.x86_64
      $ git log --oneline -1
      a51937170f33 (HEAD -> perf/core) perf build: Add detection of java-11-openjdk-devel package
      $ rm -rf /tmp/build/perf ; mkdir -p /tmp/build/perf ; make -C tools/perf O=/tmp/build/perf install > /dev/null 2>1
      $ ls -la ~acme/lib64/libperf-jvmti.so
      -rwxr-xr-x. 1 acme acme 230744 Sep 24 16:46 /home/acme/lib64/libperf-jvmti.so
      $
    
    Suggested-by: Andreas Krebbel <krebbel@linux.ibm.com>
    Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Hendrik Brueckner <brueckner@linux.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Link: http://lore.kernel.org/lkml/20190909114116.50469-4-tmricht@linux.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26185cb163824253549f7d5781569d7b50bdc011
Author: KeMeng Shi <shikemeng@huawei.com>
Date:   Mon Sep 16 06:53:28 2019 +0000

    sched/core: Fix migration to invalid CPU in __set_cpus_allowed_ptr()
    
    [ Upstream commit 714e501e16cd473538b609b3e351b2cc9f7f09ed ]
    
    An oops can be triggered in the scheduler when running qemu on arm64:
    
     Unable to handle kernel paging request at virtual address ffff000008effe40
     Internal error: Oops: 96000007 [#1] SMP
     Process migration/0 (pid: 12, stack limit = 0x00000000084e3736)
     pstate: 20000085 (nzCv daIf -PAN -UAO)
     pc : __ll_sc___cmpxchg_case_acq_4+0x4/0x20
     lr : move_queued_task.isra.21+0x124/0x298
     ...
     Call trace:
      __ll_sc___cmpxchg_case_acq_4+0x4/0x20
      __migrate_task+0xc8/0xe0
      migration_cpu_stop+0x170/0x180
      cpu_stopper_thread+0xec/0x178
      smpboot_thread_fn+0x1ac/0x1e8
      kthread+0x134/0x138
      ret_from_fork+0x10/0x18
    
    __set_cpus_allowed_ptr() will choose an active dest_cpu in affinity mask to
    migrage the process if process is not currently running on any one of the
    CPUs specified in affinity mask. __set_cpus_allowed_ptr() will choose an
    invalid dest_cpu (dest_cpu >= nr_cpu_ids, 1024 in my virtual machine) if
    CPUS in an affinity mask are deactived by cpu_down after cpumask_intersects
    check. cpumask_test_cpu() of dest_cpu afterwards is overflown and may pass if
    corresponding bit is coincidentally set. As a consequence, kernel will
    access an invalid rq address associate with the invalid CPU in
    migration_cpu_stop->__migrate_task->move_queued_task and the Oops occurs.
    
    The reproduce the crash:
    
      1) A process repeatedly binds itself to cpu0 and cpu1 in turn by calling
      sched_setaffinity.
    
      2) A shell script repeatedly does "echo 0 > /sys/devices/system/cpu/cpu1/online"
      and "echo 1 > /sys/devices/system/cpu/cpu1/online" in turn.
    
      3) Oops appears if the invalid CPU is set in memory after tested cpumask.
    
    Signed-off-by: KeMeng Shi <shikemeng@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/1568616808-16808-1-git-send-email-shikemeng@huawei.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 763b475db0e9f1ffa2ddca1cd7b2fcc3f1b6a63b
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Thu Sep 19 13:36:59 2019 -0400

    sched/membarrier: Fix private expedited registration check
    
    [ Upstream commit fc0d77387cb5ae883fd774fc559e056a8dde024c ]
    
    Fix a logic flaw in the way membarrier_register_private_expedited()
    handles ready state checks for private expedited sync core and private
    expedited registrations.
    
    If a private expedited membarrier registration is first performed, and
    then a private expedited sync_core registration is performed, the ready
    state check will skip the second registration when it really should not.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Chris Metcalf <cmetcalf@ezchip.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Kirill Tkhai <tkhai@yandex.ru>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Paul E. McKenney <paulmck@linux.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Russell King - ARM Linux admin <linux@armlinux.org.uk>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20190919173705.2181-2-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2bad3ca117ab47b12dc755c6a6d29046ebbe5ad
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Thu Sep 19 13:37:01 2019 -0400

    sched/membarrier: Call sync_core only before usermode for same mm
    
    [ Upstream commit 2840cf02fae627860156737e83326df354ee4ec6 ]
    
    When the prev and next task's mm change, switch_mm() provides the core
    serializing guarantees before returning to usermode. The only case
    where an explicit core serialization is needed is when the scheduler
    keeps the same mm for prev and next.
    
    Suggested-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Chris Metcalf <cmetcalf@ezchip.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Kirill Tkhai <tkhai@yandex.ru>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Paul E. McKenney <paulmck@linux.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Russell King - ARM Linux admin <linux@armlinux.org.uk>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20190919173705.2181-4-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7172cf29b782e32d3bd297985c54ca4680dcbdd
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Sep 17 21:21:49 2019 -0700

    libnvdimm/nfit_test: Fix acpi_handle redefinition
    
    [ Upstream commit 59f08896f058a92f03a0041b397a1a227c5e8529 ]
    
    After commit 62974fc389b3 ("libnvdimm: Enable unit test infrastructure
    compile checks"), clang warns:
    
    In file included from
    ../drivers/nvdimm/../../tools/testing/nvdimm/test/iomap.c:15:
    ../drivers/nvdimm/../../tools/testing/nvdimm/test/nfit_test.h:206:15:
    warning: redefinition of typedef 'acpi_handle' is a C11 feature
    [-Wtypedef-redefinition]
    typedef void *acpi_handle;
                  ^
    ../include/acpi/actypes.h:424:15: note: previous definition is here
    typedef void *acpi_handle;      /* Actually a ptr to a NS Node */
                  ^
    1 warning generated.
    
    The include chain:
    
    iomap.c ->
        linux/acpi.h ->
            acpi/acpi.h ->
                acpi/actypes.h
        nfit_test.h
    
    Avoid this by including linux/acpi.h in nfit_test.h, which allows us to
    remove both the typedef and the forward declaration of acpi_object.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/660
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Link: https://lore.kernel.org/r/20190918042148.77553-1-natechancellor@gmail.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 410d268aa9c47465a3d60df0ee4d260b58ac105a
Author: zhengbin <zhengbin13@huawei.com>
Date:   Wed Aug 14 15:59:09 2019 +0800

    fuse: fix memleak in cuse_channel_open
    
    [ Upstream commit 9ad09b1976c562061636ff1e01bfc3a57aebe56b ]
    
    If cuse_send_init fails, need to fuse_conn_put cc->fc.
    
    cuse_channel_open->fuse_conn_init->refcount_set(&fc->count, 1)
                     ->fuse_dev_alloc->fuse_conn_get
                     ->fuse_dev_free->fuse_conn_put
    
    Fixes: cc080e9e9be1 ("fuse: introduce per-instance fuse_dev structure")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: zhengbin <zhengbin13@huawei.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 247272bbc0911e3f583c688da5140e2fd51f16f9
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Fri Aug 9 13:17:26 2019 +0530

    libnvdimm: Fix endian conversion issues 
    
    [ Upstream commit 86aa66687442ef45909ff9814b82b4d2bb892294 ]
    
    nd_label->dpa issue was observed when trying to enable the namespace created
    with little-endian kernel on a big-endian kernel. That made me run
    `sparse` on the rest of the code and other changes are the result of that.
    
    Fixes: d9b83c756953 ("libnvdimm, btt: rework error clearing")
    Fixes: 9dedc73a4658 ("libnvdimm/btt: Fix LBA masking during 'free list' population")
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Link: https://lore.kernel.org/r/20190809074726.27815-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7af32ef05422bc5735a581087dd72a7280625b51
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Thu Sep 19 14:03:55 2019 +0530

    libnvdimm/region: Initialize bad block for volatile namespaces
    
    [ Upstream commit c42adf87e4e7ed77f6ffe288dc90f980d07d68df ]
    
    We do check for a bad block during namespace init and that use
    region bad block list. We need to initialize the bad block
    for volatile regions for this to work. We also observe a lockdep
    warning as below because the lock is not initialized correctly
    since we skip bad block init for volatile regions.
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
     CPU: 2 PID: 1 Comm: swapper/0 Not tainted 5.3.0-rc1-15699-g3dee241c937e #149
     Call Trace:
     [c0000000f95cb250] [c00000000147dd84] dump_stack+0xe8/0x164 (unreliable)
     [c0000000f95cb2a0] [c00000000022ccd8] register_lock_class+0x308/0xa60
     [c0000000f95cb3a0] [c000000000229cc0] __lock_acquire+0x170/0x1ff0
     [c0000000f95cb4c0] [c00000000022c740] lock_acquire+0x220/0x270
     [c0000000f95cb580] [c000000000a93230] badblocks_check+0xc0/0x290
     [c0000000f95cb5f0] [c000000000d97540] nd_pfn_validate+0x5c0/0x7f0
     [c0000000f95cb6d0] [c000000000d98300] nd_dax_probe+0xd0/0x1f0
     [c0000000f95cb760] [c000000000d9b66c] nd_pmem_probe+0x10c/0x160
     [c0000000f95cb790] [c000000000d7f5ec] nvdimm_bus_probe+0x10c/0x240
     [c0000000f95cb820] [c000000000d0f844] really_probe+0x254/0x4e0
     [c0000000f95cb8b0] [c000000000d0fdfc] driver_probe_device+0x16c/0x1e0
     [c0000000f95cb930] [c000000000d10238] device_driver_attach+0x68/0xa0
     [c0000000f95cb970] [c000000000d1040c] __driver_attach+0x19c/0x1c0
     [c0000000f95cb9f0] [c000000000d0c4c4] bus_for_each_dev+0x94/0x130
     [c0000000f95cba50] [c000000000d0f014] driver_attach+0x34/0x50
     [c0000000f95cba70] [c000000000d0e208] bus_add_driver+0x178/0x2f0
     [c0000000f95cbb00] [c000000000d117c8] driver_register+0x108/0x170
     [c0000000f95cbb70] [c000000000d7edb0] __nd_driver_register+0xe0/0x100
     [c0000000f95cbbd0] [c000000001a6baa4] nd_pmem_driver_init+0x34/0x48
     [c0000000f95cbbf0] [c0000000000106f4] do_one_initcall+0x1d4/0x4b0
     [c0000000f95cbcd0] [c0000000019f499c] kernel_init_freeable+0x544/0x65c
     [c0000000f95cbdb0] [c000000000010d6c] kernel_init+0x2c/0x180
     [c0000000f95cbe20] [c00000000000b954] ret_from_kernel_thread+0x5c/0x68
    
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Link: https://lore.kernel.org/r/20190919083355.26340-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eca33e99c3ad2e6d7bddb60f3d7a4acc8741d103
Author: Andrei Dulea <adulea@amazon.de>
Date:   Fri Sep 13 16:42:29 2019 +0200

    iommu/amd: Fix downgrading default page-sizes in alloc_pte()
    
    [ Upstream commit 6ccb72f8374e17d60b58a7bfd5570496332c54e2 ]
    
    Downgrading an existing large mapping to a mapping using smaller
    page-sizes works only for the mappings created with page-mode 7 (i.e.
    non-default page size).
    
    Treat large mappings created with page-mode 0 (i.e. default page size)
    like a non-present mapping and allow to overwrite it in alloc_pte().
    
    While around, make sure that we flush the TLB only if we change an
    existing mapping, otherwise we might end up acting on garbage PTEs.
    
    Fixes: 6d568ef9a622 ("iommu/amd: Allow downgrading page-sizes in alloc_pte()")
    Signed-off-by: Andrei Dulea <adulea@amazon.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4baa940f148bbeca90fb41bad58d3d6a6665f316
Author: Stefan Mavrodiev <stefan@olimex.com>
Date:   Fri Jul 26 16:32:36 2019 +0300

    thermal_hwmon: Sanitize thermal_zone type
    
    [ Upstream commit 8c7aa184281c01fc26f319059efb94725012921d ]
    
    When calling thermal_add_hwmon_sysfs(), the device type is sanitized by
    replacing '-' with '_'. However tz->type remains unsanitized. Thus
    calling thermal_hwmon_lookup_by_type() returns no device. And if there is
    no device, thermal_remove_hwmon_sysfs() fails with "hwmon device lookup
    failed!".
    
    The result is unregisted hwmon devices in the sysfs.
    
    Fixes: 409ef0bacacf ("thermal_hwmon: Sanitize attribute name passed to hwmon")
    
    Signed-off-by: Stefan Mavrodiev <stefan@olimex.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 427cc63503c4bd6cf2ac5b4d1021688a3040fbc9
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 10 13:14:52 2019 +0300

    thermal: Fix use-after-free when unregistering thermal zone device
    
    [ Upstream commit 1851799e1d2978f68eea5d9dff322e121dcf59c1 ]
    
    thermal_zone_device_unregister() cancels the delayed work that polls the
    thermal zone, but it does not wait for it to finish. This is racy with
    respect to the freeing of the thermal zone device, which can result in a
    use-after-free [1].
    
    Fix this by waiting for the delayed work to finish before freeing the
    thermal zone device. Note that thermal_zone_device_set_polling() is
    never invoked from an atomic context, so it is safe to call
    cancel_delayed_work_sync() that can block.
    
    [1]
    [  +0.002221] ==================================================================
    [  +0.000064] BUG: KASAN: use-after-free in __mutex_lock+0x1076/0x11c0
    [  +0.000016] Read of size 8 at addr ffff8881e48e0450 by task kworker/1:0/17
    
    [  +0.000023] CPU: 1 PID: 17 Comm: kworker/1:0 Not tainted 5.2.0-rc6-custom-02495-g8e73ca3be4af #1701
    [  +0.000010] Hardware name: Mellanox Technologies Ltd. MSN2100-CB2FO/SA001017, BIOS 5.6.5 06/07/2016
    [  +0.000016] Workqueue: events_freezable_power_ thermal_zone_device_check
    [  +0.000012] Call Trace:
    [  +0.000021]  dump_stack+0xa9/0x10e
    [  +0.000020]  print_address_description.cold.2+0x9/0x25e
    [  +0.000018]  __kasan_report.cold.3+0x78/0x9d
    [  +0.000016]  kasan_report+0xe/0x20
    [  +0.000016]  __mutex_lock+0x1076/0x11c0
    [  +0.000014]  step_wise_throttle+0x72/0x150
    [  +0.000018]  handle_thermal_trip+0x167/0x760
    [  +0.000019]  thermal_zone_device_update+0x19e/0x5f0
    [  +0.000019]  process_one_work+0x969/0x16f0
    [  +0.000017]  worker_thread+0x91/0xc40
    [  +0.000014]  kthread+0x33d/0x400
    [  +0.000015]  ret_from_fork+0x3a/0x50
    
    [  +0.000020] Allocated by task 1:
    [  +0.000015]  save_stack+0x19/0x80
    [  +0.000015]  __kasan_kmalloc.constprop.4+0xc1/0xd0
    [  +0.000014]  kmem_cache_alloc_trace+0x152/0x320
    [  +0.000015]  thermal_zone_device_register+0x1b4/0x13a0
    [  +0.000015]  mlxsw_thermal_init+0xc92/0x23d0
    [  +0.000014]  __mlxsw_core_bus_device_register+0x659/0x11b0
    [  +0.000013]  mlxsw_core_bus_device_register+0x3d/0x90
    [  +0.000013]  mlxsw_pci_probe+0x355/0x4b0
    [  +0.000014]  local_pci_probe+0xc3/0x150
    [  +0.000013]  pci_device_probe+0x280/0x410
    [  +0.000013]  really_probe+0x26a/0xbb0
    [  +0.000013]  driver_probe_device+0x208/0x2e0
    [  +0.000013]  device_driver_attach+0xfe/0x140
    [  +0.000013]  __driver_attach+0x110/0x310
    [  +0.000013]  bus_for_each_dev+0x14b/0x1d0
    [  +0.000013]  driver_register+0x1c0/0x400
    [  +0.000015]  mlxsw_sp_module_init+0x5d/0xd3
    [  +0.000014]  do_one_initcall+0x239/0x4dd
    [  +0.000013]  kernel_init_freeable+0x42b/0x4e8
    [  +0.000012]  kernel_init+0x11/0x18b
    [  +0.000013]  ret_from_fork+0x3a/0x50
    
    [  +0.000015] Freed by task 581:
    [  +0.000013]  save_stack+0x19/0x80
    [  +0.000014]  __kasan_slab_free+0x125/0x170
    [  +0.000013]  kfree+0xf3/0x310
    [  +0.000013]  thermal_release+0xc7/0xf0
    [  +0.000014]  device_release+0x77/0x200
    [  +0.000014]  kobject_put+0x1a8/0x4c0
    [  +0.000014]  device_unregister+0x38/0xc0
    [  +0.000014]  thermal_zone_device_unregister+0x54e/0x6a0
    [  +0.000014]  mlxsw_thermal_fini+0x184/0x35a
    [  +0.000014]  mlxsw_core_bus_device_unregister+0x10a/0x640
    [  +0.000013]  mlxsw_devlink_core_bus_device_reload+0x92/0x210
    [  +0.000015]  devlink_nl_cmd_reload+0x113/0x1f0
    [  +0.000014]  genl_family_rcv_msg+0x700/0xee0
    [  +0.000013]  genl_rcv_msg+0xca/0x170
    [  +0.000013]  netlink_rcv_skb+0x137/0x3a0
    [  +0.000012]  genl_rcv+0x29/0x40
    [  +0.000013]  netlink_unicast+0x49b/0x660
    [  +0.000013]  netlink_sendmsg+0x755/0xc90
    [  +0.000013]  __sys_sendto+0x3de/0x430
    [  +0.000013]  __x64_sys_sendto+0xe2/0x1b0
    [  +0.000013]  do_syscall_64+0xa4/0x4d0
    [  +0.000013]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [  +0.000017] The buggy address belongs to the object at ffff8881e48e0008
                   which belongs to the cache kmalloc-2k of size 2048
    [  +0.000012] The buggy address is located 1096 bytes inside of
                   2048-byte region [ffff8881e48e0008, ffff8881e48e0808)
    [  +0.000007] The buggy address belongs to the page:
    [  +0.000012] page:ffffea0007923800 refcount:1 mapcount:0 mapping:ffff88823680d0c0 index:0x0 compound_mapcount: 0
    [  +0.000020] flags: 0x200000000010200(slab|head)
    [  +0.000019] raw: 0200000000010200 ffffea0007682008 ffffea00076ab808 ffff88823680d0c0
    [  +0.000016] raw: 0000000000000000 00000000000d000d 00000001ffffffff 0000000000000000
    [  +0.000007] page dumped because: kasan: bad access detected
    
    [  +0.000012] Memory state around the buggy address:
    [  +0.000012]  ffff8881e48e0300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000012]  ffff8881e48e0380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000012] >ffff8881e48e0400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000008]                                                  ^
    [  +0.000012]  ffff8881e48e0480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000012]  ffff8881e48e0500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000007] ==================================================================
    
    Fixes: b1569e99c795 ("ACPI: move thermal trip handling to generic thermal layer")
    Reported-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec5ea51fb7369611fd80c63423adac3e1c7bdadd
Author: Sanjay R Mehta <sanju.mehta@amd.com>
Date:   Fri Mar 29 11:32:50 2019 +0000

    ntb: point to right memory window index
    
    [ Upstream commit ae89339b08f3fe02457ec9edd512ddc3d246d0f8 ]
    
    second parameter of ntb_peer_mw_get_addr is pointing to wrong memory
    window index by passing "peer gidx" instead of "local gidx".
    
    For ex, "local gidx" value is '0' and "peer gidx" value is '1', then
    
    on peer side ntb_mw_set_trans() api is used as below with gidx pointing to
    local side gidx which is '0', so memroy window '0' is chosen and XLAT '0'
    will be programmed by peer side.
    
        ntb_mw_set_trans(perf->ntb, peer->pidx, peer->gidx, peer->inbuf_xlat,
                        peer->inbuf_size);
    
    Now, on local side ntb_peer_mw_get_addr() is been used as below with gidx
    pointing to "peer gidx" which is '1', so pointing to memory window '1'
    instead of memory window '0'.
    
        ntb_peer_mw_get_addr(perf->ntb,  peer->gidx, &phys_addr,
                            &peer->outbuf_size);
    
    So this patch pass "local gidx" as parameter to ntb_peer_mw_get_addr().
    
    Signed-off-by: Sanjay R Mehta <sanju.mehta@amd.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c78a54a693b5b9b3d1db2844a278cfb9f79b6ce5
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Mon Sep 23 13:17:54 2019 -0400

    x86/purgatory: Disable the stackleak GCC plugin for the purgatory
    
    [ Upstream commit ca14c996afe7228ff9b480cf225211cc17212688 ]
    
    Since commit:
    
      b059f801a937 ("x86/purgatory: Use CFLAGS_REMOVE rather than reset KBUILD_CFLAGS")
    
    kexec breaks if GCC_PLUGIN_STACKLEAK=y is enabled, as the purgatory
    contains undefined references to stackleak_track_stack.
    
    Attempting to load a kexec kernel results in this failure:
    
      kexec: Undefined symbol: stackleak_track_stack
      kexec-bzImage64: Loading purgatory failed
    
    Fix this by disabling the stackleak plugin for the purgatory.
    
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: b059f801a937 ("x86/purgatory: Use CFLAGS_REMOVE rather than reset KBUILD_CFLAGS")
    Link: https://lkml.kernel.org/r/20190923171753.GA2252517@rani.riverdale.lan
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97b186b7f0153b5bc091a91d018bbceb5a43deac
Author: Tycho Andersen <tycho@tycho.ws>
Date:   Mon Aug 26 08:43:02 2019 -0600

    selftests/seccomp: fix build on older kernels
    
    [ Upstream commit 88282297fff00796e81f5e67734a6afdfb31fbc4 ]
    
    The seccomp selftest goes to some length to build against older kernel
    headers, viz. all the #ifdefs at the beginning of the file.
    
    Commit 201766a20e30 ("ptrace: add PTRACE_GET_SYSCALL_INFO request")
    introduces some additional macros, but doesn't do the #ifdef dance.
    Let's add that dance here to avoid:
    
    gcc -Wl,-no-as-needed -Wall  seccomp_bpf.c -lpthread -o seccomp_bpf
    In file included from seccomp_bpf.c:51:
    seccomp_bpf.c: In function ‘tracer_ptrace’:
    seccomp_bpf.c:1787:20: error: ‘PTRACE_EVENTMSG_SYSCALL_ENTRY’ undeclared (first use in this function); did you mean ‘PTRACE_EVENT_CLONE’?
      EXPECT_EQ(entry ? PTRACE_EVENTMSG_SYSCALL_ENTRY
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ../kselftest_harness.h:608:13: note: in definition of macro ‘__EXPECT’
      __typeof__(_expected) __exp = (_expected); \
                 ^~~~~~~~~
    seccomp_bpf.c:1787:2: note: in expansion of macro ‘EXPECT_EQ’
      EXPECT_EQ(entry ? PTRACE_EVENTMSG_SYSCALL_ENTRY
      ^~~~~~~~~
    seccomp_bpf.c:1787:20: note: each undeclared identifier is reported only once for each function it appears in
      EXPECT_EQ(entry ? PTRACE_EVENTMSG_SYSCALL_ENTRY
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ../kselftest_harness.h:608:13: note: in definition of macro ‘__EXPECT’
      __typeof__(_expected) __exp = (_expected); \
                 ^~~~~~~~~
    seccomp_bpf.c:1787:2: note: in expansion of macro ‘EXPECT_EQ’
      EXPECT_EQ(entry ? PTRACE_EVENTMSG_SYSCALL_ENTRY
      ^~~~~~~~~
    seccomp_bpf.c:1788:6: error: ‘PTRACE_EVENTMSG_SYSCALL_EXIT’ undeclared (first use in this function); did you mean ‘PTRACE_EVENT_EXIT’?
        : PTRACE_EVENTMSG_SYSCALL_EXIT, msg);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ../kselftest_harness.h:608:13: note: in definition of macro ‘__EXPECT’
      __typeof__(_expected) __exp = (_expected); \
                 ^~~~~~~~~
    seccomp_bpf.c:1787:2: note: in expansion of macro ‘EXPECT_EQ’
      EXPECT_EQ(entry ? PTRACE_EVENTMSG_SYSCALL_ENTRY
      ^~~~~~~~~
    make: *** [Makefile:12: seccomp_bpf] Error 1
    
    [skhan@linuxfoundation.org: Fix checkpatch error in commit log]
    Signed-off-by: Tycho Andersen <tycho@tycho.ws>
    Fixes: 201766a20e30 ("ptrace: add PTRACE_GET_SYSCALL_INFO request")
    Acked-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d731e3ab5bac97934ee1a00c63fa9ac879a14a6b
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Wed Sep 18 16:54:21 2019 +0200

    pwm: stm32-lp: Add check in case requested period cannot be achieved
    
    [ Upstream commit c91e3234c6035baf5a79763cb4fcd5d23ce75c2b ]
    
    LPTimer can use a 32KHz clock for counting. It depends on clock tree
    configuration. In such a case, PWM output frequency range is limited.
    Although unlikely, nothing prevents user from requesting a PWM frequency
    above counting clock (32KHz for instance):
    - This causes (prd - 1) = 0xffff to be written in ARR register later in
    the apply() routine.
    This results in badly configured PWM period (and also duty_cycle).
    Add a check to report an error is such a case.
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d461a1934873c231cc8c5333a208584dca40100
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Mon Sep 16 09:12:19 2019 -0400

    SUNRPC: Don't try to parse incomplete RPC messages
    
    [ Upstream commit 9ba828861c56a21d211d5d10f5643774b1ea330d ]
    
    If the copy of the RPC reply into our buffers did not complete, and
    we could end up with a truncated message. In that case, just resend
    the call.
    
    Fixes: a0584ee9aed80 ("SUNRPC: Use struct xdr_stream when decoding...")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 647d64dca599b25fa8982de75ff83a4b599ab897
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Fri Sep 20 07:23:40 2019 -0400

    pNFS: Ensure we do clear the return-on-close layout stateid on fatal errors
    
    [ Upstream commit 9c47b18cf722184f32148784189fca945a7d0561 ]
    
    IF the server rejected our layout return with a state error such as
    NFS4ERR_BAD_STATEID, or even a stale inode error, then we do want
    to clear out all the remaining layout segments and mark that stateid
    as invalid.
    
    Fixes: 1c5bd76d17cca ("pNFS: Enable layoutreturn operation for...")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4eae10e37d5876cc9764af6542719c54b6ddc73c
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Mon Sep 16 01:44:40 2019 +0900

    perf probe: Fix to clear tev->nargs in clear_probe_trace_event()
    
    [ Upstream commit 9e6124d9d635957b56717f85219a88701617253f ]
    
    Since add_probe_trace_event() can reuse tf->tevs[i] after calling
    clear_probe_trace_event(), this can make perf-probe crash if the 1st
    attempt of probe event finding fails to find an event argument, and the
    2nd attempt fails to find probe point.
    
    E.g.
      $ perf probe -D "task_pid_nr tsk"
      Failed to find 'tsk' in this function.
      Failed to get entry address of warn_bad_vsyscall
      Segmentation fault (core dumped)
    
    Committer testing:
    
    After the patch:
    
      $ perf probe -D "task_pid_nr tsk"
      Failed to find 'tsk' in this function.
      Failed to get entry address of warn_bad_vsyscall
      Failed to get entry address of signal_fault
      Failed to get entry address of show_signal
      Failed to get entry address of umip_printk
      Failed to get entry address of __bad_area_nosemaphore
      <SNIP>
      Failed to get entry address of sock_set_timeout
      Failed to get entry address of tcp_recvmsg
      Probe point 'task_pid_nr' not found.
        Error: Failed to add events.
      $
    
    Fixes: 092b1f0b5f9f ("perf probe: Clear probe_trace_event when add_probe_trace_event() fails")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: http://lore.kernel.org/lkml/156856587999.25775.5145779959474477595.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47ec3242a4391f80bd0ce289ccd34d1a2fec49f1
Author: Trek <trek00@inbox.ru>
Date:   Sat Aug 31 21:25:36 2019 +0200

    drm/amdgpu: Check for valid number of registers to read
    
    [ Upstream commit 73d8e6c7b841d9bf298c8928f228fb433676635c ]
    
    Do not try to allocate any amount of memory requested by the user.
    Instead limit it to 128 registers. Actually the longest series of
    consecutive allowed registers are 48, mmGB_TILE_MODE0-31 and
    mmGB_MACROTILE_MODE0-15 (0x2644-0x2673).
    
    Bug: https://bugs.freedesktop.org/show_bug.cgi?id=111273
    Signed-off-by: Trek <trek00@inbox.ru>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f56134fae6bef31b4aa3c51ff5a7e4b5e7d095e9
Author: Felix Kuehling <Felix.Kuehling@amd.com>
Date:   Thu Sep 5 19:22:02 2019 -0400

    drm/amdgpu: Fix KFD-related kernel oops on Hawaii
    
    [ Upstream commit dcafbd50f2e4d5cc964aae409fb5691b743fba23 ]
    
    Hawaii needs to flush caches explicitly, submitting an IB in a user
    VMID from kernel mode. There is no s_fence in this case.
    
    Fixes: eb3961a57424 ("drm/amdgpu: remove fence context from the job")
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27b43f4da75d9481fd279362b4f41dfcb810efb0
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Sep 19 16:56:44 2019 +0200

    netfilter: nf_tables: allow lookups in dynamic sets
    
    [ Upstream commit acab713177377d9e0889c46bac7ff0cfb9a90c4d ]
    
    This un-breaks lookups in sets that have the 'dynamic' flag set.
    Given this active example configuration:
    
    table filter {
      set set1 {
        type ipv4_addr
        size 64
        flags dynamic,timeout
        timeout 1m
      }
    
      chain input {
         type filter hook input priority 0; policy accept;
      }
    }
    
    ... this works:
    nft add rule ip filter input add @set1 { ip saddr }
    
    -> whenever rule is triggered, the source ip address is inserted
    into the set (if it did not exist).
    
    This won't work:
    nft add rule ip filter input ip saddr @set1 counter
    Error: Could not process rule: Operation not supported
    
    In other words, we can add entries to the set, but then can't make
    matching decision based on that set.
    
    That is just wrong -- all set backends support lookups (else they would
    not be very useful).
    The failure comes from an explicit rejection in nft_lookup.c.
    
    Looking at the history, it seems like NFT_SET_EVAL used to mean
    'set contains expressions' (aka. "is a meter"), for instance something like
    
     nft add rule ip filter input meter example { ip saddr limit rate 10/second }
     or
     nft add rule ip filter input meter example { ip saddr counter }
    
    The actual meaning of NFT_SET_EVAL however, is
    'set can be updated from the packet path'.
    
    'meters' and packet-path insertions into sets, such as
    'add @set { ip saddr }' use exactly the same kernel code (nft_dynset.c)
    and thus require a set backend that provides the ->update() function.
    
    The only set that provides this also is the only one that has the
    NFT_SET_EVAL feature flag.
    
    Removing the wrong check makes the above example work.
    While at it, also fix the flag check during set instantiation to
    allow supported combinations only.
    
    Fixes: 8aeff920dcc9b3f ("netfilter: nf_tables: add stateful object reference to set elements")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65ffeb46c06a2eb5b63b500bbdc355348ddfc630
Author: Ryan Chen <ryan_chen@aspeedtech.com>
Date:   Mon Aug 19 14:47:38 2019 +0930

    watchdog: aspeed: Add support for AST2600
    
    [ Upstream commit b3528b4874480818e38e4da019d655413c233e6a ]
    
    The ast2600 can be supported by the same code as the ast2500.
    
    Signed-off-by: Ryan Chen <ryan_chen@aspeedtech.com>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20190819051738.17370-3-joel@jms.id.au
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 516549223bac4757f506b3f66427bf845af1b0ca
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Thu Sep 12 08:06:51 2019 -0400

    SUNRPC: RPC level errors should always set task->tk_rpc_status
    
    [ Upstream commit 714fbc73888f59321854e7f6c2f224213923bcad ]
    
    Ensure that we set task->tk_rpc_status for all RPC level errors so that
    the caller can distinguish between those and server reply status errors.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bb82591a80826c9c9d84520b1da77f2e28ec3e4
Author: Erqi Chen <chenerqi@gmail.com>
Date:   Wed Aug 28 21:22:45 2019 +0800

    ceph: reconnect connection if session hang in opening state
    
    [ Upstream commit 71a228bc8d65900179e37ac309e678f8c523f133 ]
    
    If client mds session is evicted in CEPH_MDS_SESSION_OPENING state,
    mds won't send session msg to client, and delayed_work skip
    CEPH_MDS_SESSION_OPENING state session, the session hang forever.
    
    Allow ceph_con_keepalive to reconnect a session in OPENING to avoid
    session hang. Also, ensure that we skip sessions in RESTARTING and
    REJECTED states since those states can't be resurrected by issuing
    a keepalive.
    
    Link: https://tracker.ceph.com/issues/41551
    Signed-off-by: Erqi Chen chenerqi@gmail.com
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30a1ca18cbc46757939fd8e30bf9114ea7a55fcd
Author: Jeff Layton <jlayton@kernel.org>
Date:   Mon Jul 22 13:12:01 2019 -0400

    ceph: fetch cap_gen under spinlock in ceph_add_cap
    
    [ Upstream commit 606d102327a45a49d293557527802ee7fbfd7af1 ]
    
    It's protected by the s_gen_ttl_lock, so we should fetch under it
    and ensure that we're using the same generation in both places.
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9250e1786418432a88d37e4df4b90700efa3fe6f
Author: Luis Henriques <lhenriques@suse.com>
Date:   Tue Jul 23 16:50:20 2019 +0100

    ceph: fix directories inode i_blkbits initialization
    
    [ Upstream commit 750670341a24cb714e624e0fd7da30900ad93752 ]
    
    When filling an inode with info from the MDS, i_blkbits is being
    initialized using fl_stripe_unit, which contains the stripe unit in
    bytes.  Unfortunately, this doesn't make sense for directories as they
    have fl_stripe_unit set to '0'.  This means that i_blkbits will be set
    to 0xff, causing an UBSAN undefined behaviour in i_blocksize():
    
      UBSAN: Undefined behaviour in ./include/linux/fs.h:731:12
      shift exponent 255 is too large for 32-bit type 'int'
    
    Fix this by initializing i_blkbits to CEPH_BLOCK_SHIFT if fl_stripe_unit
    is zero.
    
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d78709c11d76dc7e1fbad99f939bed41672e5637
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Sep 12 14:28:13 2019 +0200

    fuse: fix request limit
    
    [ Upstream commit f22f812d5ce75a18b56073a7a63862e6ea764070 ]
    
    The size of struct fuse_req was reduced from 392B to 144B on a non-debug
    config, thus the sanitize_global_limit() helper was setting a larger
    default limit.  This doesn't really reflect reduction in the memory used by
    requests, since the fields removed from fuse_req were added to fuse_args
    derived structs; e.g. sizeof(struct fuse_writepages_args) is 248B, thus
    resulting in slightly more memory being used for writepage requests
    overalll (due to using 256B slabs).
    
    Make the calculatation ignore the size of fuse_req and use the old 392B
    value.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7430555cdaee008e6b38465c6eddf2e5057c6805
Author: Igor Druzhinin <igor.druzhinin@citrix.com>
Date:   Thu Sep 12 19:31:51 2019 +0100

    xen/pci: reserve MCFG areas earlier
    
    [ Upstream commit a4098bc6eed5e31e0391bcc068e61804c98138df ]
    
    If MCFG area is not reserved in E820, Xen by default will defer its usage
    until Dom0 registers it explicitly after ACPI parser recognizes it as
    a reserved resource in DSDT. Having it reserved in E820 is not
    mandatory according to "PCI Firmware Specification, rev 3.2" (par. 4.1.2)
    and firmware is free to keep a hole in E820 in that place. Xen doesn't know
    what exactly is inside this hole since it lacks full ACPI view of the
    platform therefore it's potentially harmful to access MCFG region
    without additional checks as some machines are known to provide
    inconsistent information on the size of the region.
    
    Now xen_mcfg_late() runs after acpi_init() which is too late as some basic
    PCI enumeration starts exactly there as well. Trying to register a device
    prior to MCFG reservation causes multiple problems with PCIe extended
    capability initializations in Xen (e.g. SR-IOV VF BAR sizing). There are
    no convenient hooks for us to subscribe to so register MCFG areas earlier
    upon the first invocation of xen_add_device(). It should be safe to do once
    since all the boot time buses must have their MCFG areas in MCFG table
    already and we don't support PCI bus hot-plug.
    
    Signed-off-by: Igor Druzhinin <igor.druzhinin@citrix.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1b2e32b7f689e3f86a852f7b70cf9e21ec3a1f3
Author: Chengguang Xu <cgxu519@zoho.com.cn>
Date:   Tue Aug 20 18:03:25 2019 +0800

    9p: avoid attaching writeback_fid on mmap with type PRIVATE
    
    [ Upstream commit c87a37ebd40b889178664c2c09cc187334146292 ]
    
    Currently on mmap cache policy, we always attach writeback_fid
    whether mmap type is SHARED or PRIVATE. However, in the use case
    of kata-container which combines 9p(Guest OS) with overlayfs(Host OS),
    this behavior will trigger overlayfs' copy-up when excute command
    inside container.
    
    Link: http://lkml.kernel.org/r/20190820100325.10313-1-cgxu519@zoho.com.cn
    Signed-off-by: Chengguang Xu <cgxu519@zoho.com.cn>
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1872fb8840f2bc1be55810f05563e2d8f5871af
Author: Lu Shuaibing <shuaibinglu@126.com>
Date:   Thu Jun 13 15:08:54 2019 +0800

    9p: Transport error uninitialized
    
    [ Upstream commit 0ce772fe79b68f83df40f07f28207b292785c677 ]
    
    The p9_tag_alloc() does not initialize the transport error t_err field.
    The struct p9_req_t *req is allocated and stored in a struct p9_client
    variable. The field t_err is never initialized before p9_conn_cancel()
    checks its value.
    
    KUMSAN(KernelUninitializedMemorySantizer, a new error detection tool)
    reports this bug.
    
    ==================================================================
    BUG: KUMSAN: use of uninitialized memory in p9_conn_cancel+0x2d9/0x3b0
    Read of size 4 at addr ffff88805f9b600c by task kworker/1:2/1216
    
    CPU: 1 PID: 1216 Comm: kworker/1:2 Not tainted 5.2.0-rc4+ #28
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    Workqueue: events p9_write_work
    Call Trace:
     dump_stack+0x75/0xae
     __kumsan_report+0x17c/0x3e6
     kumsan_report+0xe/0x20
     p9_conn_cancel+0x2d9/0x3b0
     p9_write_work+0x183/0x4a0
     process_one_work+0x4d1/0x8c0
     worker_thread+0x6e/0x780
     kthread+0x1ca/0x1f0
     ret_from_fork+0x35/0x40
    
    Allocated by task 1979:
     save_stack+0x19/0x80
     __kumsan_kmalloc.constprop.3+0xbc/0x120
     kmem_cache_alloc+0xa7/0x170
     p9_client_prepare_req.part.9+0x3b/0x380
     p9_client_rpc+0x15e/0x880
     p9_client_create+0x3d0/0xac0
     v9fs_session_init+0x192/0xc80
     v9fs_mount+0x67/0x470
     legacy_get_tree+0x70/0xd0
     vfs_get_tree+0x4a/0x1c0
     do_mount+0xba9/0xf90
     ksys_mount+0xa8/0x120
     __x64_sys_mount+0x62/0x70
     do_syscall_64+0x6d/0x1e0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 0:
    (stack is not available)
    
    The buggy address belongs to the object at ffff88805f9b6008
     which belongs to the cache p9_req_t of size 144
    The buggy address is located 4 bytes inside of
     144-byte region [ffff88805f9b6008, ffff88805f9b6098)
    The buggy address belongs to the page:
    page:ffffea00017e6d80 refcount:1 mapcount:0 mapping:ffff888068b63740 index:0xffff88805f9b7d90 compound_mapcount: 0
    flags: 0x100000000010200(slab|head)
    raw: 0100000000010200 ffff888068b66450 ffff888068b66450 ffff888068b63740
    raw: ffff88805f9b7d90 0000000000100001 00000001ffffffff 0000000000000000
    page dumped because: kumsan: bad access detected
    ==================================================================
    
    Link: http://lkml.kernel.org/r/20190613070854.10434-1-shuaibinglu@126.com
    Signed-off-by: Lu Shuaibing <shuaibinglu@126.com>
    [dominique.martinet@cea.fr: grouped the added init with the others]
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bae79b10a7d27a9a5474234ef32f423d94239f5
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Mon Aug 26 13:12:57 2019 -0400

    xprtrdma: Send Queue size grows after a reconnect
    
    [ Upstream commit 98ef77d1aaa7a2f4e1b2a721faa084222021fda7 ]
    
    Eli Dorfman reports that after a series of idle disconnects, an
    RPC/RDMA transport becomes unusable (rdma_create_qp returns
    -ENOMEM). Problem was tracked down to increasing Send Queue size
    after each reconnect.
    
    The rdma_create_qp() API does not promise to leave its @qp_init_attr
    parameter unaltered. In fact, some drivers do modify one or more of
    its fields. Thus our calls to rdma_create_qp must use a fresh copy
    of ib_qp_init_attr each time.
    
    This fix is appropriate for kernels dating back to late 2007, though
    it will have to be adapted, as the connect code has changed over the
    years.
    
    Reported-by: Eli Dorfman <eli@vastdata.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f5b6b8b328201dceb06d2d1c7546d052a63bed6
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Mon Aug 19 18:43:17 2019 -0400

    xprtrdma: Toggle XPRT_CONGESTED in xprtrdma's slot methods
    
    [ Upstream commit 395790566eec37706dedeb94779045adc3a7581e ]
    
    Commit 48be539dd44a ("xprtrdma: Introduce ->alloc_slot call-out for
    xprtrdma") added a separate alloc_slot and free_slot to the RPC/RDMA
    transport. Later, commit 75891f502f5f ("SUNRPC: Support for
    congestion control when queuing is enabled") modified the generic
    alloc/free_slot methods, but neglected the methods in xprtrdma.
    
    Found via code review.
    
    Fixes: 75891f502f5f ("SUNRPC: Support for congestion control ... ")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 902003c34a9dc1aa9a3177224879ef402426c5a3
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Fri Jul 26 15:48:53 2019 +0800

    fs: nfs: Fix possible null-pointer dereferences in encode_attrs()
    
    [ Upstream commit e2751463eaa6f9fec8fea80abbdc62dbc487b3c5 ]
    
    In encode_attrs(), there is an if statement on line 1145 to check
    whether label is NULL:
        if (label && (attrmask[2] & FATTR4_WORD2_SECURITY_LABEL))
    
    When label is NULL, it is used on lines 1178-1181:
        *p++ = cpu_to_be32(label->lfs);
        *p++ = cpu_to_be32(label->pi);
        *p++ = cpu_to_be32(label->len);
        p = xdr_encode_opaque_fixed(p, label->label, label->len);
    
    To fix these bugs, label is checked before being used.
    
    These bugs are found by a static analysis tool STCheck written by us.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 688965a58cb3ebf0d003ff9de5e1f03168b2b0ef
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue Jul 2 10:00:41 2019 +0200

    ima: fix freeing ongoing ahash_request
    
    [ Upstream commit 4ece3125f21b1d42b84896c5646dbf0e878464e1 ]
    
    integrity_kernel_read() can fail in which case we forward to call
    ahash_request_free() on a currently running request. We have to wait
    for its completion before we can free the request.
    
    This was observed by interrupting a "find / -type f -xdev -print0 | xargs -0
    cat 1>/dev/null" with ctrl-c on an IMA enabled filesystem.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4190c07973d61353936405c6577f5ed433070533
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Tue Jul 2 10:00:40 2019 +0200

    ima: always return negative code for error
    
    [ Upstream commit f5e1040196dbfe14c77ce3dfe3b7b08d2d961e88 ]
    
    integrity_kernel_read() returns the number of bytes read. If this is
    a short read then this positive value is returned from
    ima_calc_file_hash_atfm(). Currently this is only indirectly called from
    ima_calc_file_hash() and this function only tests for the return value
    being zero or nonzero and also doesn't forward the return value.
    Nevertheless there's no point in returning a positive value as an error,
    so translate a short read into -EINVAL.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6644bef4a122bff9500bb5e043af6577977a92f0
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Fri Aug 23 10:38:35 2019 +0100

    drivers: thermal: qcom: tsens: Fix memory leak from qfprom read
    
    [ Upstream commit 6b8249abb093551ef173d13a25ed0044d5dd33e0 ]
    
    memory returned as part of nvmem_read via qfprom_read should be
    freed by the consumer once done.
    Existing code is not doing it so fix it.
    
    Below memory leak detected by kmemleak
       [<ffffff80088b7658>] kmemleak_alloc+0x50/0x84
        [<ffffff80081df120>] __kmalloc+0xe8/0x168
        [<ffffff80086db350>] nvmem_cell_read+0x30/0x80
        [<ffffff8008632790>] qfprom_read+0x4c/0x7c
        [<ffffff80086335a4>] calibrate_v1+0x34/0x204
        [<ffffff8008632518>] tsens_probe+0x164/0x258
        [<ffffff80084e0a1c>] platform_drv_probe+0x80/0xa0
        [<ffffff80084de4f4>] really_probe+0x208/0x248
        [<ffffff80084de2c4>] driver_probe_device+0x98/0xc0
        [<ffffff80084dec54>] __device_attach_driver+0x9c/0xac
        [<ffffff80084dca74>] bus_for_each_drv+0x60/0x8c
        [<ffffff80084de634>] __device_attach+0x8c/0x100
        [<ffffff80084de6c8>] device_initial_probe+0x20/0x28
        [<ffffff80084dcbb8>] bus_probe_device+0x34/0x7c
        [<ffffff80084deb08>] deferred_probe_work_func+0x6c/0x98
        [<ffffff80080c3da8>] process_one_work+0x160/0x2f8
    
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Acked-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39ac36b43f0a4a5298544aa98c85b0e5932d54f4
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Sep 23 13:51:16 2019 +0200

    cfg80211: initialize on-stack chandefs
    
    commit f43e5210c739fe76a4b0ed851559d6902f20ceb1 upstream.
    
    In a few places we don't properly initialize on-stack chandefs,
    resulting in EDMG data to be non-zero, which broke things.
    
    Additionally, in a few places we rely on the driver to init the
    data completely, but perhaps we shouldn't as non-EDMG drivers
    may not initialize the EDMG data, also initialize it there.
    
    Cc: stable@vger.kernel.org
    Fixes: 2a38075cd0be ("nl80211: Add support for EDMG channels")
    Reported-by: Dmitry Osipenko <digetx@gmail.com>
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/1569239475-I2dcce394ecf873376c386a78f31c2ec8b538fa25@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66ab998269a11f906311005c8a16a65053580561
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Sep 20 21:54:18 2019 +0200

    cfg80211: validate SSID/MBSSID element ordering assumption
    
    commit 242b0931c1918c56cd1dc5563fd250a3c39b996d upstream.
    
    The code copying the data assumes that the SSID element is
    before the MBSSID element, but since the data is untrusted
    from the AP, this cannot be guaranteed.
    
    Validate that this is indeed the case and ignore the MBSSID
    otherwise, to avoid having to deal with both cases for the
    copy of data that should be between them.
    
    Cc: stable@vger.kernel.org
    Fixes: 0b8fb8235be8 ("cfg80211: Parsing of Multiple BSSID information in scanning")
    Link: https://lore.kernel.org/r/1569009255-I1673911f5eae02964e21bdc11b2bf58e5e207e59@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92d042bd3ff4375204b4681f3f4b3ed948d6f087
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Sep 20 21:54:17 2019 +0200

    nl80211: validate beacon head
    
    commit f88eb7c0d002a67ef31aeb7850b42ff69abc46dc upstream.
    
    We currently don't validate the beacon head, i.e. the header,
    fixed part and elements that are to go in front of the TIM
    element. This means that the variable elements there can be
    malformed, e.g. have a length exceeding the buffer size, but
    most downstream code from this assumes that this has already
    been checked.
    
    Add the necessary checks to the netlink policy.
    
    Cc: stable@vger.kernel.org
    Fixes: ed1b6cc7f80f ("cfg80211/nl80211: add beacon settings")
    Link: https://lore.kernel.org/r/1569009255-I7ac7fbe9436e9d8733439eab8acbbd35e55c74ef@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0c4e7054ce1e44cb7270af6d2d732314212cb07
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 19 14:12:34 2019 +0200

    ieee802154: atusb: fix use-after-free at disconnect
    
    commit 7fd25e6fc035f4b04b75bca6d7e8daa069603a76 upstream.
    
    The disconnect callback was accessing the hardware-descriptor private
    data after having having freed it.
    
    Fixes: 7490b008d123 ("ieee802154: add support for atusb transceiver")
    Cc: stable <stable@vger.kernel.org>     # 4.2
    Cc: Alexander Aring <alex.aring@gmail.com>
    Reported-by: syzbot+f4509a9138a1472e7e80@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56528e50a51d651b0e6f324f68745638d45bb758
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Oct 1 17:03:55 2019 +0200

    xen/xenbus: fix self-deadlock after killing user process
    
    commit a8fabb38525c51a094607768bac3ba46b3f4a9d5 upstream.
    
    In case a user process using xenbus has open transactions and is killed
    e.g. via ctrl-C the following cleanup of the allocated resources might
    result in a deadlock due to trying to end a transaction in the xenbus
    worker thread:
    
    [ 2551.474706] INFO: task xenbus:37 blocked for more than 120 seconds.
    [ 2551.492215]       Tainted: P           OE     5.0.0-29-generic #5
    [ 2551.510263] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [ 2551.528585] xenbus          D    0    37      2 0x80000080
    [ 2551.528590] Call Trace:
    [ 2551.528603]  __schedule+0x2c0/0x870
    [ 2551.528606]  ? _cond_resched+0x19/0x40
    [ 2551.528632]  schedule+0x2c/0x70
    [ 2551.528637]  xs_talkv+0x1ec/0x2b0
    [ 2551.528642]  ? wait_woken+0x80/0x80
    [ 2551.528645]  xs_single+0x53/0x80
    [ 2551.528648]  xenbus_transaction_end+0x3b/0x70
    [ 2551.528651]  xenbus_file_free+0x5a/0x160
    [ 2551.528654]  xenbus_dev_queue_reply+0xc4/0x220
    [ 2551.528657]  xenbus_thread+0x7de/0x880
    [ 2551.528660]  ? wait_woken+0x80/0x80
    [ 2551.528665]  kthread+0x121/0x140
    [ 2551.528667]  ? xb_read+0x1d0/0x1d0
    [ 2551.528670]  ? kthread_park+0x90/0x90
    [ 2551.528673]  ret_from_fork+0x35/0x40
    
    Fix this by doing the cleanup via a workqueue instead.
    
    Reported-by: James Dingwall <james@dingwall.me.uk>
    Fixes: fd8aa9095a95c ("xen: optimize xenbus driver for multiple concurrent xenstore accesses")
    Cc: <stable@vger.kernel.org> # 4.11
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a3b4722b5292bcdea52bdbd39263d883b34ae5a
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Sep 27 17:46:28 2019 +0200

    xen/balloon: Set pages PageOffline() in balloon_add_region()
    
    commit c5ad81eb029570c5ca5859539b0679f07a776d25 upstream.
    
    We are missing a __SetPageOffline(), which is why we can get
    !PageOffline() pages onto the balloon list, where
    alloc_xenballooned_pages() will complain:
    
    page:ffffea0003e7ffc0 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0xffffe00001000(reserved)
    raw: 000ffffe00001000 dead000000000100 dead000000000200 0000000000000000
    raw: 0000000000000000 0000000000000000 00000001ffffffff 0000000000000000
    page dumped because: VM_BUG_ON_PAGE(!PageOffline(page))
    ------------[ cut here ]------------
    kernel BUG at include/linux/page-flags.h:744!
    invalid opcode: 0000 [#1] SMP NOPTI
    
    Reported-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Tested-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Fixes: 77c4adf6a6df ("xen/balloon: mark inflated pages PG_offline")
    Cc: stable@vger.kernel.org # v5.1+
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b74c20f6e96528598958f6f5b74cb50ed9029691
Author: H. Nikolaus Schaller <hns@goldelico.com>
Date:   Fri Sep 20 18:11:15 2019 +0200

    DTS: ARM: gta04: introduce legacy spi-cs-high to make display work again
    
    commit f1f028ff89cb0d37db299d48e7b2ce19be040d52 upstream.
    
    commit 6953c57ab172 "gpio: of: Handle SPI chipselect legacy bindings"
    
    did introduce logic to centrally handle the legacy spi-cs-high property
    in combination with cs-gpios. This assumes that the polarity
    of the CS has to be inverted if spi-cs-high is missing, even
    and especially if non-legacy GPIO_ACTIVE_HIGH is specified.
    
    The DTS for the GTA04 was orginally introduced under the assumption
    that there is no need for spi-cs-high if the gpio is defined with
    proper polarity GPIO_ACTIVE_HIGH.
    
    This was not a problem until gpiolib changed the interpretation of
    GPIO_ACTIVE_HIGH and missing spi-cs-high.
    
    The effect is that the missing spi-cs-high is now interpreted as CS being
    low (despite GPIO_ACTIVE_HIGH) which turns off the SPI interface when the
    panel is to be programmed by the panel driver.
    
    Therefore, we have to add the redundant and legacy spi-cs-high property
    to properly activate CS.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17c952422eca1b43ab10353fc70c9eb5dfc2233c
Author: Seth Forshee <seth.forshee@canonical.com>
Date:   Tue Sep 17 09:18:53 2019 +0200

    sched: Add __ASSEMBLY__ guards around struct clone_args
    
    commit 61129dd29f7962f278b618a2a3e8fdb986a66dc8 upstream.
    
    The addition of struct clone_args to uapi/linux/sched.h is not protected
    by __ASSEMBLY__ guards, causing a failure to build from source for glibc
    on RISC-V. Add the guards to fix this.
    
    Fixes: 7f192e3cd316 ("fork: add clone3")
    Signed-off-by: Seth Forshee <seth.forshee@canonical.com>
    Cc: <stable@vger.kernel.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20190917071853.12385-1-seth.forshee@canonical.com
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d43ee0ed798e1983402ccad8af1ddc6285070cd2
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Tue Sep 10 11:58:25 2019 +0530

    libnvdimm/altmap: Track namespace boundaries in altmap
    
    commit cf387d9644d8c78721cf9b77af9f67bb5b04da16 upstream.
    
    With PFN_MODE_PMEM namespace, the memmap area is allocated from the device
    area. Some architectures map the memmap area with large page size. On
    architectures like ppc64, 16MB page for memap mapping can map 262144 pfns.
    This maps a namespace size of 16G.
    
    When populating memmap region with 16MB page from the device area,
    make sure the allocated space is not used to map resources outside this
    namespace. Such usage of device area will prevent a namespace destroy.
    
    Add resource end pnf in altmap and use that to check if the memmap area
    allocation can map pfn outside the namespace. On ppc64 in such case we fallback
    to allocation from memory.
    
    This fix kernel crash reported below:
    
    [  132.034989] WARNING: CPU: 13 PID: 13719 at mm/memremap.c:133 devm_memremap_pages_release+0x2d8/0x2e0
    [  133.464754] BUG: Unable to handle kernel data access at 0xc00c00010b204000
    [  133.464760] Faulting instruction address: 0xc00000000007580c
    [  133.464766] Oops: Kernel access of bad area, sig: 11 [#1]
    [  133.464771] LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
    .....
    [  133.464901] NIP [c00000000007580c] vmemmap_free+0x2ac/0x3d0
    [  133.464906] LR [c0000000000757f8] vmemmap_free+0x298/0x3d0
    [  133.464910] Call Trace:
    [  133.464914] [c000007cbfd0f7b0] [c0000000000757f8] vmemmap_free+0x298/0x3d0 (unreliable)
    [  133.464921] [c000007cbfd0f8d0] [c000000000370a44] section_deactivate+0x1a4/0x240
    [  133.464928] [c000007cbfd0f980] [c000000000386270] __remove_pages+0x3a0/0x590
    [  133.464935] [c000007cbfd0fa50] [c000000000074158] arch_remove_memory+0x88/0x160
    [  133.464942] [c000007cbfd0fae0] [c0000000003be8c0] devm_memremap_pages_release+0x150/0x2e0
    [  133.464949] [c000007cbfd0fb70] [c000000000738ea0] devm_action_release+0x30/0x50
    [  133.464955] [c000007cbfd0fb90] [c00000000073a5a4] release_nodes+0x344/0x400
    [  133.464961] [c000007cbfd0fc40] [c00000000073378c] device_release_driver_internal+0x15c/0x250
    [  133.464968] [c000007cbfd0fc80] [c00000000072fd14] unbind_store+0x104/0x110
    [  133.464973] [c000007cbfd0fcd0] [c00000000072ee24] drv_attr_store+0x44/0x70
    [  133.464981] [c000007cbfd0fcf0] [c0000000004a32bc] sysfs_kf_write+0x6c/0xa0
    [  133.464987] [c000007cbfd0fd10] [c0000000004a1dfc] kernfs_fop_write+0x17c/0x250
    [  133.464993] [c000007cbfd0fd60] [c0000000003c348c] __vfs_write+0x3c/0x70
    [  133.464999] [c000007cbfd0fd80] [c0000000003c75d0] vfs_write+0xd0/0x250
    
    djbw: Aneesh notes that this crash can likely be triggered in any kernel that
    supports 'papr_scm', so flagging that commit for -stable consideration.
    
    Fixes: b5beae5e224f ("powerpc/pseries: Add driver for PAPR SCM regions")
    Cc: <stable@vger.kernel.org>
    Reported-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Reviewed-by: Pankaj Gupta <pagupta@redhat.com>
    Tested-by: Santosh Sivaraj <santosh@fossix.org>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Link: https://lore.kernel.org/r/20190910062826.10041-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69d1d977c53c73b9d5116bd56a11ba77417986ec
Author: Wanpeng Li <wanpengli@tencent.com>
Date:   Mon Sep 9 09:40:28 2019 +0800

    Revert "locking/pvqspinlock: Don't wait if vCPU is preempted"
    
    commit 89340d0935c9296c7b8222b6eab30e67cb57ab82 upstream.
    
    This patch reverts commit 75437bb304b20 (locking/pvqspinlock: Don't
    wait if vCPU is preempted).  A large performance regression was caused
    by this commit.  on over-subscription scenarios.
    
    The test was run on a Xeon Skylake box, 2 sockets, 40 cores, 80 threads,
    with three VMs of 80 vCPUs each.  The score of ebizzy -M is reduced from
    13000-14000 records/s to 1700-1800 records/s:
    
              Host                Guest                score
    
    vanilla w/o kvm optimizations     upstream    1700-1800 records/s
    vanilla w/o kvm optimizations     revert      13000-14000 records/s
    vanilla w/ kvm optimizations      upstream    4500-5000 records/s
    vanilla w/ kvm optimizations      revert      14000-15500 records/s
    
    Exit from aggressive wait-early mechanism can result in premature yield
    and extra scheduling latency.
    
    Actually, only 6% of wait_early events are caused by vcpu_is_preempted()
    being true.  However, when one vCPU voluntarily releases its vCPU, all
    the subsequently waiters in the queue will do the same and the cascading
    effect leads to bad performance.
    
    kvm optimizations:
    [1] commit d73eb57b80b (KVM: Boost vCPUs that are delivering interrupts)
    [2] commit 266e85a5ec9 (KVM: X86: Boost queue head vCPU to mitigate lock waiter preemption)
    
    Tested-by: loobinliu@tencent.com
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Waiman Long <longman@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: loobinliu@tencent.com
    Cc: stable@vger.kernel.org
    Fixes: 75437bb304b20 (locking/pvqspinlock: Don't wait if vCPU is preempted)
    Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4befbbaf496f722d8472653dba600f3053ad4c2
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Sep 23 12:08:09 2019 +0200

    mmc: sdhci: Let drivers define their DMA mask
    
    commit 4ee7dde4c777f14cb0f98dd201491bf6cc15899b upstream.
    
    Add host operation ->set_dma_mask() so that drivers can define their own
    DMA masks.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Cc: stable@vger.kernel.org # v4.15 +
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f18dc60fa9043abed741a3ca818890cc876706f6
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sun Sep 22 11:26:58 2019 +0100

    mmc: sdhci-of-esdhc: set DMA snooping based on DMA coherence
    
    commit 121bd08b029e03404c451bb237729cdff76eafed upstream.
    
    We must not unconditionally set the DMA snoop bit; if the DMA API is
    assuming that the device is not DMA coherent, and the device snoops the
    CPU caches, the device can see stale cache lines brought in by
    speculative prefetch.
    
    This leads to the device seeing stale data, potentially resulting in
    corrupted data transfers.  Commonly, this results in a descriptor fetch
    error such as:
    
    mmc0: ADMA error
    mmc0: sdhci: ============ SDHCI REGISTER DUMP ===========
    mmc0: sdhci: Sys addr:  0x00000000 | Version:  0x00002202
    mmc0: sdhci: Blk size:  0x00000008 | Blk cnt:  0x00000001
    mmc0: sdhci: Argument:  0x00000000 | Trn mode: 0x00000013
    mmc0: sdhci: Present:   0x01f50008 | Host ctl: 0x00000038
    mmc0: sdhci: Power:     0x00000003 | Blk gap:  0x00000000
    mmc0: sdhci: Wake-up:   0x00000000 | Clock:    0x000040d8
    mmc0: sdhci: Timeout:   0x00000003 | Int stat: 0x00000001
    mmc0: sdhci: Int enab:  0x037f108f | Sig enab: 0x037f108b
    mmc0: sdhci: ACmd stat: 0x00000000 | Slot int: 0x00002202
    mmc0: sdhci: Caps:      0x35fa0000 | Caps_1:   0x0000af00
    mmc0: sdhci: Cmd:       0x0000333a | Max curr: 0x00000000
    mmc0: sdhci: Resp[0]:   0x00000920 | Resp[1]:  0x001d8a33
    mmc0: sdhci: Resp[2]:   0x325b5900 | Resp[3]:  0x3f400e00
    mmc0: sdhci: Host ctl2: 0x00000000
    mmc0: sdhci: ADMA Err:  0x00000009 | ADMA Ptr: 0x000000236d43820c
    mmc0: sdhci: ============================================
    mmc0: error -5 whilst initialising SD card
    
    but can lead to other errors, and potentially direct the SDHCI
    controller to read/write data to other memory locations (e.g. if a valid
    descriptor is visible to the device in a stale cache line.)
    
    Fix this by ensuring that the DMA snoop bit corresponds with the
    behaviour of the DMA API.  Since the driver currently only supports DT,
    use of_dma_is_coherent().  Note that device_get_dma_attr() can not be
    used as that risks re-introducing this bug if/when the driver is
    converted to ACPI.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa6dc0bc620724ef343814f02f060ca6fb2c2c5a
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sun Sep 22 11:26:53 2019 +0100

    mmc: sdhci: improve ADMA error reporting
    
    commit d1c536e3177390da43d99f20143b810c35433d1f upstream.
    
    ADMA errors are potentially data corrupting events; although we print
    the register state, we do not usefully print the ADMA descriptors.
    Worse than that, we print them by referencing their virtual address
    which is meaningless when the register state gives us the DMA address
    of the failing descriptor.
    
    Print the ADMA descriptors giving their DMA addresses rather than their
    virtual addresses, and print them using SDHCI_DUMP() rather than DBG().
    
    We also do not show the correct value of the interrupt status register;
    the register dump shows the current value, after we have cleared the
    pending interrupts we are going to service.  What is more useful is to
    print the interrupts that _were_ pending at the time the ADMA error was
    encountered.  Fix that too.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ebb0a70ffd23849694e0379ab1532a0de3739c3
Author: Nicolin Chen <nicoleotsuka@gmail.com>
Date:   Mon Sep 23 12:08:10 2019 +0200

    mmc: tegra: Implement ->set_dma_mask()
    
    commit b960bc448a252428bacca271f3416a8bda3b599b upstream.
    
    The SDHCI controller on Tegra186 supports 40-bit addressing, which is
    usually enough to address all of system memory. However, if the SDHCI
    controller is behind an IOMMU, the address space can go beyond. This
    happens on Tegra186 and later where the ARM SMMU has an input address
    space of 48 bits. If the DMA API is backed by this ARM SMMU, the top-
    down IOVA allocator will cause IOV addresses to be returned that the
    SDHCI controller cannot access.
    
    Unfortunately, prior to the introduction of the ->set_dma_mask() host
    operation, the SDHCI core would set either a 64-bit DMA mask if the
    controller claimed to support 64-bit addressing, or a 32-bit DMA mask
    otherwise.
    
    Since the full 64 bits cannot be addressed on Tegra, this had to be
    worked around in commit 68481a7e1c84 ("mmc: tegra: Mark 64 bit dma
    broken on Tegra186") by setting the SDHCI_QUIRK2_BROKEN_64_BIT_DMA
    quirk, which effectively restricts the DMA mask to 32 bits.
    
    One disadvantage of this is that dma_map_*() APIs will now try to use
    the swiotlb to bounce DMA to addresses beyond of the controller's DMA
    mask. This in turn caused degraded performance and can lead to
    situations where the swiotlb buffer is exhausted, which in turn leads
    to DMA transfers to fail.
    
    With the recent introduction of the ->set_dma_mask() host operation,
    this can now be properly fixed. For each generation of Tegra, the exact
    supported DMA mask can be configured. This kills two birds with one
    stone: it avoids the use of bounce buffers because system memory never
    exceeds the addressable memory range of the SDHCI controllers on these
    devices, and at the same time when an IOMMU is involved, it prevents
    IOV addresses from being allocated beyond the addressible range of the
    controllers.
    
    Since the DMA mask is now properly handled, the 64-bit DMA quirk can be
    removed.
    
    Signed-off-by: Nicolin Chen <nicoleotsuka@gmail.com>
    [treding@nvidia.com: provide more background in commit message]
    Tested-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Cc: stable@vger.kernel.org # v4.15 +
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71f15ccf758ad0a95ea2788012d993aff52003f4
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Oct 1 13:19:23 2019 +0200

    mac80211: keep BHs disabled while calling drv_tx_wake_queue()
    
    commit d8dec42b5c2d2b273bc30b0e073cfbe832d69902 upstream.
    
    Drivers typically expect this, as it's the case for almost all cases
    where this is called (i.e. from the TX path). Also, the code in mac80211
    itself (if the driver calls ieee80211_tx_dequeue()) expects this as it
    uses this_cpu_ptr() without additional protection.
    
    This should fix various reports of the problem:
    https://bugzilla.kernel.org/show_bug.cgi?id=204127
    https://lore.kernel.org/linux-wireless/CAN5HydrWb3o_FE6A1XDnP1E+xS66d5kiEuhHfiGKkLNQokx13Q@mail.gmail.com/
    https://lore.kernel.org/lkml/nycvar.YFH.7.76.1909111238470.473@cbobk.fhfr.pm/
    
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: Jiri Kosina <jkosina@suse.cz>
    Reported-by: Aaron Hill <aa1ronham@gmail.com>
    Reported-by: Lukas Redlinger <rel+kernel@agilox.net>
    Reported-by: Oleksii Shevchuk <alxchk@gmail.com>
    Fixes: 21a5d4c3a45c ("mac80211: add stop/start logic for software TXQs")
    Link: https://lore.kernel.org/r/1569928763-I3e8838c5ecad878e59d4a94eb069a90f6641461a@changeid
    Reviewed-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df3f69bae26018e9ee40ed65c69e6a5fa25d5367
Author: Xiaolin Zhang <xiaolin.zhang@intel.com>
Date:   Fri Aug 23 14:57:31 2019 +0800

    drm/i915: to make vgpu ppgtt notificaiton as atomic operation
    
    commit 9e77f5001b9833a6bdd3940df245053c2212a32b upstream.
    
    vgpu ppgtt notification was split into 2 steps, the first step is to
    update PVINFO's pdp register and then write PVINFO's g2v_notify register
    with action code to tirgger ppgtt notification to GVT side.
    
    currently these steps were not atomic operations due to no any protection,
    so it is easy to enter race condition state during the MTBF, stress and
    IGT test to cause GPU hang.
    
    the solution is to add a lock to make vgpu ppgtt notication as atomic
    operation.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiaolin Zhang <xiaolin.zhang@intel.com>
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/1566543451-13955-1-git-send-email-xiaolin.zhang@intel.com
    (cherry picked from commit 52988009843160c5b366b4082ed6df48041c655c)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4e2acde77e66342cbe62bf2090df4f745fd7140
Author: Xiaolin Zhang <xiaolin.zhang@intel.com>
Date:   Tue Aug 27 16:39:23 2019 +0800

    drm/i915/gvt: update vgpu workload head pointer correctly
    
    commit 0a3242bdb47713e09cb004a0ba4947d3edf82d8a upstream.
    
    when creating a vGPU workload, the guest context head pointer should
    be updated correctly by comparing with the exsiting workload in the
    guest worklod queue including the current running context.
    
    in some situation, there is a running context A and then received 2 new
    vGPU workload context B and A. in the new workload context A, it's head
    pointer should be updated with the running context A's tail.
    
    v2: walk through guest workload list in backward way.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiaolin Zhang <xiaolin.zhang@intel.com>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d86d2561272ef276c46723d12adf679dd934352
Author: Kevin Wang <kevin1.wang@amd.com>
Date:   Thu Sep 26 16:16:41 2019 +0800

    drm/amd/powerplay: change metrics update period from 1ms to 100ms
    
    commit e0e4a2ce7a059d051c66cd7c94314fef3cd91aea upstream.
    
    v2:
    change period from 10ms to 100ms (typo error)
    
    too high frequence to update mertrics table will cause smu firmware
    error,so change mertrics table update period from 1ms to 100ms
    (navi10, 12, 14)
    
    Signed-off-by: Kevin Wang <kevin1.wang@amd.com>
    Reviewed-by: Kenneth Feng <kenneth.feng@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.3.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83d26905540169b7989b66846b679c3e65d4627a
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Sep 13 18:03:50 2019 -0400

    drm/nouveau/kms/nv50-: Don't create MSTMs for eDP connectors
    
    commit 698c1aa9f83b618de79e9e5e19a58f70a4a6ae0f upstream.
    
    On the ThinkPad P71, we have one eDP connector exposed along with 5 DP
    connectors, resulting in a total of 11 TMDS encoders. Since the GPU on
    this system is also capable of MST, we create an additional 4 fake MST
    encoders for each DP port. Unfortunately, we also do this for the eDP
    port as well, resulting in:
    
      1 eDP port: +1 TMDS encoder
                  +4 DPMST encoders
      5 DP ports: +2 TMDS encoders
                  +4 DPMST encoders
                  *5 ports
                  == 35 encoders
    
    Which breaks things, since DRM has a hard coded limit of 32 encoders.
    So, fix this by not creating MSTMs for any eDP connectors. This brings
    us down to 31 encoders, although we can do better.
    
    This fixes driver probing for nouveau on the ThinkPad P71.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cca1123e3001785d17c75225834d885db2cb1f7
Author: Sean Paul <seanpaul@chromium.org>
Date:   Wed Aug 7 14:51:50 2019 -0400

    drm/msm/dsi: Fix return value check for clk_get_parent
    
    commit 5fb9b797d5ccf311ae4aba69e86080d47668b5f7 upstream.
    
    clk_get_parent returns an error pointer upon failure, not NULL. So the
    checks as they exist won't catch a failure. This patch changes the
    checks and the return values to properly handle an error pointer.
    
    Fixes: c4d8cfe516dc ("drm/msm/dsi: add implementation for helper functions")
    Cc: Sibi Sankar <sibis@codeaurora.org>
    Cc: Sean Paul <seanpaul@chromium.org>
    Cc: Rob Clark <robdclark@chromium.org>
    Cc: <stable@vger.kernel.org> # v4.19+
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f29fed2c039ebeba68dbb2468652decd07871a73
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Wed Oct 2 15:25:42 2019 +0300

    drm/omap: fix max fclk divider for omap36xx
    
    commit e2c4ed148cf3ec8669a1d90dc66966028e5fad70 upstream.
    
    The OMAP36xx and AM/DM37x TRMs say that the maximum divider for DSS fclk
    (in CM_CLKSEL_DSS) is 32. Experimentation shows that this is not
    correct, and using divider of 32 breaks DSS with a flood or underflows
    and sync losts. Dividers up to 31 seem to work fine.
    
    There is another patch to the DT files to limit the divider correctly,
    but as the DSS driver also needs to know the maximum divider to be able
    to iteratively find good rates, we also need to do the fix in the DSS
    driver.
    
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Adam Ford <aford173@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20191002122542.8449-1-tomi.valkeinen@ti.com
    Tested-by: Adam Ford <aford173@gmail.com>
    Reviewed-by: Jyri Sarha <jsarha@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3a374918cf15572dd94e0535530a7ecd3bfd2e8
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Tue Jul 30 17:30:56 2019 +0200

    drm: mali-dp: Mark expected switch fall-through
    
    commit 28ba1b1da49a20ba8fb767d6ddd7c521ec79a119 upstream.
    
    Now that -Wimplicit-fallthrough is passed to GCC by default, the
    following warnings shows up:
    
    ../drivers/gpu/drm/arm/malidp_hw.c: In function ‘malidp_format_get_bpp’:
    ../drivers/gpu/drm/arm/malidp_hw.c:387:8: warning: this statement may fall
     through [-Wimplicit-fallthrough=]
        bpp = 30;
        ~~~~^~~~
    ../drivers/gpu/drm/arm/malidp_hw.c:388:3: note: here
       case DRM_FORMAT_YUV420_10BIT:
       ^~~~
    ../drivers/gpu/drm/arm/malidp_hw.c: In function ‘malidp_se_irq’:
    ../drivers/gpu/drm/arm/malidp_hw.c:1311:4: warning: this statement may fall
     through [-Wimplicit-fallthrough=]
        drm_writeback_signal_completion(&malidp->mw_connector, 0);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ../drivers/gpu/drm/arm/malidp_hw.c:1313:3: note: here
       case MW_START:
       ^~~~
    
    Rework to add a 'break;' in a case that didn't have it so that
    the compiler doesn't warn about fall-through.
    
    Cc: stable@vger.kernel.org # v5.2+
    Fixes: b8207562abdd ("drm/arm/malidp: Specified the rotation memory requirements for AFBC YUV formats")
    Acked-by: Liviu Dudau <liviu.dudau@arm.com>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Liviu Dudau <Liviu.Dudau@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190730153056.3606-1-anders.roxell@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f26d84ba8efd38667ee33ddc11c8067f6d3b9f2
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Sep 5 20:53:18 2019 +0200

    drm/atomic: Take the atomic toys away from X
    
    commit 26b1d3b527e7bf3e24b814d617866ac5199ce68d upstream.
    
    The -modesetting ddx has a totally broken idea of how atomic works:
    - doesn't disable old connectors, assuming they get auto-disable like
      with the legacy setcrtc
    - assumes ASYNC_FLIP is wired through for the atomic ioctl
    - not a single call to TEST_ONLY
    
    Iow the implementation is a 1:1 translation of legacy ioctls to
    atomic, which is a) broken b) pointless.
    
    We already have bugs in both i915 and amdgpu-DC where this prevents us
    from enabling neat features.
    
    If anyone ever cares about atomic in X we can easily add a new atomic
    level (req->value == 2) for X to get back the shiny toys.
    
    Since these broken versions of -modesetting have been shipping,
    there's really no other way to get out of this bind.
    
    v2:
    - add an informational dmesg output (Rob, Ajax)
    - reorder after the DRIVER_ATOMIC check to avoid useless noise (Ilia)
    - allow req->value > 2 so that X can do another attempt at atomic in
      the future
    
    v3: Go with paranoid, insist that the X should be first (suggested by
    Rob)
    
    Cc: Ilia Mirkin <imirkin@alum.mit.edu>
    References: https://gitlab.freedesktop.org/xorg/xserver/issues/629
    References: https://gitlab.freedesktop.org/xorg/xserver/merge_requests/180
    References: abbc0697d5fb ("drm/fb: revert the i915 Actually configure untiled displays from master")
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> (v1)
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com> (v1)
    Cc: Michel Dänzer <michel@daenzer.net>
    Cc: Alex Deucher <alexdeucher@gmail.com>
    Cc: Adam Jackson <ajax@redhat.com>
    Acked-by: Adam Jackson <ajax@redhat.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Rob Clark <robdclark@gmail.com>
    Acked-by: Rob Clark <robdclark@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190905185318.31363-1-daniel.vetter@ffwll.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b48c4249aa66b95795ee77a5beaa58f7c547715
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue Sep 3 21:06:41 2019 +0200

    drm/atomic: Reject FLIP_ASYNC unconditionally
    
    commit f2cbda2dba11de868759cae9c0d2bab5b8411406 upstream.
    
    It's never been wired up. Only userspace that tried to use it (and
    didn't actually check whether anything works, but hey it builds) is
    the -modesetting atomic implementation. And we just shut that up.
    
    If there's anyone else then we need to silently accept this flag no
    matter what, and find a new one. Because once a flag is tainted, it's
    lost.
    
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Michel Dänzer <michel@daenzer.net>
    Cc: Alex Deucher <alexdeucher@gmail.com>
    Cc: Adam Jackson <ajax@redhat.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: David Airlie <airlied@linux.ie>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190903190642.32588-2-daniel.vetter@ffwll.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eddf7c9520172597f6acb68a32cd31fc9976df43
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed Sep 25 10:21:09 2019 +0200

    drm/i915/dp: Fix dsc bpp calculations, v5.
    
    commit cffb4c3ea37248c4fc2f4ce747e5c24af88aec76 upstream.
    
    There was a integer wraparound when mode_clock became too high,
    and we didn't correct for the FEC overhead factor when dividing,
    with the calculations breaking at HBR3.
    
    As a result our calculated bpp was way too high, and the link width
    limitation never came into effect.
    
    Print out the resulting bpp calcululations as a sanity check, just
    in case we ever have to debug it later on again.
    
    We also used the wrong factor for FEC. While bspec mentions 2.4%,
    all the calculations use 1/0.972261, and the same ratio should be
    applied to data M/N as well, so use it there when FEC is enabled.
    
    This fixes the FIFO underrun we are seeing with FEC enabled.
    
    Changes since v2:
    - Handle fec_enable in intel_link_compute_m_n, so only data M/N is adjusted. (Ville)
    - Fix initial hardware readout for FEC. (Ville)
    Changes since v3:
    - Remove bogus fec_to_mode_clock. (Ville)
    Changes since v4:
    - Use the correct register for icl. (Ville)
    - Split hw readout to a separate patch.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: d9218c8f6cf4 ("drm/i915/dp: Add helpers for Compressed BPP and Slice Count for DSC")
    Cc: <stable@vger.kernel.org> # v5.0+
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190925082110.17439-1-maarten.lankhorst@linux.intel.com
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    (cherry picked from commit ed06efb801bd291e935238d3fba46fa03d098f0e)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2064a3e2730be61918f7f6ac48c5db9e6affef5
Author: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Date:   Wed Sep 4 15:17:38 2019 +0530

    perf stat: Fix a segmentation fault when using repeat forever
    
    commit 443f2d5ba13d65ccfd879460f77941875159d154 upstream.
    
    Observe a segmentation fault when 'perf stat' is asked to repeat forever
    with the interval option.
    
    Without fix:
    
      # perf stat -r 0 -I 5000 -e cycles -a sleep 10
      #           time             counts unit events
           5.000211692  3,13,89,82,34,157      cycles
          10.000380119  1,53,98,52,22,294      cycles
          10.040467280       17,16,79,265      cycles
      Segmentation fault
    
    This problem was only observed when we use forever option aka -r 0 and
    works with limited repeats. Calling print_counter with ts being set to
    NULL, is not a correct option when interval is set. Hence avoid
    print_counter(NULL,..)  if interval is set.
    
    With fix:
    
      # perf stat -r 0 -I 5000 -e cycles -a sleep 10
       #           time             counts unit events
           5.019866622  3,15,14,43,08,697      cycles
          10.039865756  3,15,16,31,95,261      cycles
          10.059950628     1,26,05,47,158      cycles
           5.009902655  3,14,52,62,33,932      cycles
          10.019880228  3,14,52,22,89,154      cycles
          10.030543876       66,90,18,333      cycles
           5.009848281  3,14,51,98,25,437      cycles
          10.029854402  3,15,14,93,04,918      cycles
           5.009834177  3,14,51,95,92,316      cycles
    
    Committer notes:
    
    Did the 'git bisect' to find the cset introducing the problem to add the
    Fixes tag below, and at that time the problem reproduced as:
    
      (gdb) run stat -r0 -I500 sleep 1
      <SNIP>
      Program received signal SIGSEGV, Segmentation fault.
      print_interval (prefix=prefix@entry=0x7fffffffc8d0 "", ts=ts@entry=0x0) at builtin-stat.c:866
      866           sprintf(prefix, "%6lu.%09lu%s", ts->tv_sec, ts->tv_nsec, csv_sep);
      (gdb) bt
      #0  print_interval (prefix=prefix@entry=0x7fffffffc8d0 "", ts=ts@entry=0x0) at builtin-stat.c:866
      #1  0x000000000041860a in print_counters (ts=ts@entry=0x0, argc=argc@entry=2, argv=argv@entry=0x7fffffffd640) at builtin-stat.c:938
      #2  0x0000000000419a7f in cmd_stat (argc=2, argv=0x7fffffffd640, prefix=<optimized out>) at builtin-stat.c:1411
      #3  0x000000000045c65a in run_builtin (p=p@entry=0x6291b8 <commands+216>, argc=argc@entry=5, argv=argv@entry=0x7fffffffd640) at perf.c:370
      #4  0x000000000045c893 in handle_internal_command (argc=5, argv=0x7fffffffd640) at perf.c:429
      #5  0x000000000045c8f1 in run_argv (argcp=argcp@entry=0x7fffffffd4ac, argv=argv@entry=0x7fffffffd4a0) at perf.c:473
      #6  0x000000000045cac9 in main (argc=<optimized out>, argv=<optimized out>) at perf.c:588
      (gdb)
    
    Mostly the same as just before this patch:
    
      Program received signal SIGSEGV, Segmentation fault.
      0x00000000005874a7 in print_interval (config=0xa1f2a0 <stat_config>, evlist=0xbc9b90, prefix=0x7fffffffd1c0 "`", ts=0x0) at util/stat-display.c:964
      964           sprintf(prefix, "%6lu.%09lu%s", ts->tv_sec, ts->tv_nsec, config->csv_sep);
      (gdb) bt
      #0  0x00000000005874a7 in print_interval (config=0xa1f2a0 <stat_config>, evlist=0xbc9b90, prefix=0x7fffffffd1c0 "`", ts=0x0) at util/stat-display.c:964
      #1  0x0000000000588047 in perf_evlist__print_counters (evlist=0xbc9b90, config=0xa1f2a0 <stat_config>, _target=0xa1f0c0 <target>, ts=0x0, argc=2, argv=0x7fffffffd670)
          at util/stat-display.c:1172
      #2  0x000000000045390f in print_counters (ts=0x0, argc=2, argv=0x7fffffffd670) at builtin-stat.c:656
      #3  0x0000000000456bb5 in cmd_stat (argc=2, argv=0x7fffffffd670) at builtin-stat.c:1960
      #4  0x00000000004dd2e0 in run_builtin (p=0xa30e00 <commands+288>, argc=5, argv=0x7fffffffd670) at perf.c:310
      #5  0x00000000004dd54d in handle_internal_command (argc=5, argv=0x7fffffffd670) at perf.c:362
      #6  0x00000000004dd694 in run_argv (argcp=0x7fffffffd4cc, argv=0x7fffffffd4c0) at perf.c:406
      #7  0x00000000004dda11 in main (argc=5, argv=0x7fffffffd670) at perf.c:531
      (gdb)
    
    Fixes: d4f63a4741a8 ("perf stat: Introduce print_counters function")
    Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org # v4.2+
    Link: http://lore.kernel.org/lkml/20190904094738.9558-3-srikar@linux.vnet.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd74bb8f935c019c08e4b9fb4dc58044c4828e19
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Thu Sep 12 12:52:35 2019 +0200

    perf tools: Fix segfault in cpu_cache_level__read()
    
    commit 0216234c2eed1367a318daeb9f4a97d8217412a0 upstream.
    
    We release wrong pointer on error path in cpu_cache_level__read
    function, leading to segfault:
    
      (gdb) r record ls
      Starting program: /root/perf/tools/perf/perf record ls
      ...
      [ perf record: Woken up 1 times to write data ]
      double free or corruption (out)
    
      Thread 1 "perf" received signal SIGABRT, Aborted.
      0x00007ffff7463798 in raise () from /lib64/power9/libc.so.6
      (gdb) bt
      #0  0x00007ffff7463798 in raise () from /lib64/power9/libc.so.6
      #1  0x00007ffff7443bac in abort () from /lib64/power9/libc.so.6
      #2  0x00007ffff74af8bc in __libc_message () from /lib64/power9/libc.so.6
      #3  0x00007ffff74b92b8 in malloc_printerr () from /lib64/power9/libc.so.6
      #4  0x00007ffff74bb874 in _int_free () from /lib64/power9/libc.so.6
      #5  0x0000000010271260 in __zfree (ptr=0x7fffffffa0b0) at ../../lib/zalloc..
      #6  0x0000000010139340 in cpu_cache_level__read (cache=0x7fffffffa090, cac..
      #7  0x0000000010143c90 in build_caches (cntp=0x7fffffffa118, size=<optimiz..
      ...
    
    Releasing the proper pointer.
    
    Fixes: 720e98b5faf1 ("perf tools: Add perf data cache feature")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org: # v4.6+
    Link: http://lore.kernel.org/lkml/20190912105235.10689-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e927aa73a950cda43c09babff762e51de2057a1
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Mon Aug 12 15:13:56 2019 +0200

    watchdog: imx2_wdt: fix min() calculation in imx2_wdt_set_timeout
    
    commit 144783a80cd2cbc45c6ce17db649140b65f203dd upstream.
    
    Converting from ms to s requires dividing by 1000, not multiplying. So
    this is currently taking the smaller of new_timeout and 1.28e8,
    i.e. effectively new_timeout.
    
    The driver knows what it set max_hw_heartbeat_ms to, so use that
    value instead of doing a division at run-time.
    
    FWIW, this can easily be tested by booting into a busybox shell and
    doing "watchdog -t 5 -T 130 /dev/watchdog" - without this patch, the
    watchdog fires after 130&127 == 2 seconds.
    
    Fixes: b07e228eee69 "watchdog: imx2_wdt: Fix set_timeout for big timeout values"
    Cc: stable@vger.kernel.org # 5.2 plus anything the above got backported to
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20190812131356.23039-1-linux@rasmusvillemoes.dk
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db5d311b024613364b1a424a5796df642c2e4046
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Tue Sep 24 13:52:37 2019 -0600

    selftests: pidfd: Fix undefined reference to pthread_create()
    
    commit 3969e76909d3aa06715997896184ee684f68d164 upstream.
    
    Fix build failure:
    
    undefined reference to `pthread_create'
    collect2: error: ld returned 1 exit status
    
    Fix CFLAGS to include pthread correctly.
    
    Fixes: 740378dc7834 ("pidfd: add polling selftests")
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Reviewed-by: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190924195237.30519-1-skhan@linuxfoundation.org
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25d1ad2cc9ea717961b121bb1ba366c1a36230a8
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Tue Sep 10 21:11:37 2019 +0100

    selftests/tpm2: Add the missing TEST_FILES assignment
    
    commit 981c107cbb420ee028f8ecd155352cfd6351c246 upstream.
    
    The Python files required by the selftests are not packaged because of
    the missing assignment to TEST_FILES. Add the assignment.
    
    Cc: stable@vger.kernel.org
    Fixes: 6ea3dfe1e073 ("selftests: add TPM 2.0 tests")
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Reviewed-by: Petr Vorel <pvorel@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 213f1a534d7735cdc452ed848dd41ef67a48fe1d
Author: Sumit Saxena <sumit.saxena@broadcom.com>
Date:   Fri Jul 26 00:55:52 2019 +0530

    PCI: Restore Resizable BAR size bits correctly for 1MB BARs
    
    commit d2182b2d4b71ff0549a07f414d921525fade707b upstream.
    
    In a Resizable BAR Control Register, bits 13:8 control the size of the BAR.
    The encoded values of these bits are as follows (see PCIe r5.0, sec
    7.8.6.3):
    
      Value    BAR size
         0     1 MB (2^20 bytes)
         1     2 MB (2^21 bytes)
         2     4 MB (2^22 bytes)
       ...
        43     8 EB (2^63 bytes)
    
    Previously we incorrectly set the BAR size bits for a 1 MB BAR to 0x1f
    instead of 0, so devices that support that size, e.g., new megaraid_sas and
    mpt3sas adapters, fail to initialize during resume from S3 sleep.
    
    Correctly calculate the BAR size bits for Resizable BAR control registers.
    
    Link: https://lore.kernel.org/r/20190725192552.24295-1-sumit.saxena@broadcom.com
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203939
    Fixes: d3252ace0bc6 ("PCI: Restore resized BAR state on resume")
    Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Cc: stable@vger.kernel.org      # v4.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2dddde9ba15340e6ba34360d4becb5125342d7e
Author: Jon Derrick <jonathan.derrick@intel.com>
Date:   Mon Sep 16 07:54:35 2019 -0600

    PCI: vmd: Fix shadow offsets to reflect spec changes
    
    commit a1a30170138c9c5157bd514ccd4d76b47060f29b upstream.
    
    The shadow offset scratchpad was moved to 0x2000-0x2010. Update the
    location to get the correct shadow offset.
    
    Fixes: 6788958e4f3c ("PCI: vmd: Assign membar addresses from shadow registers")
    Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9c2b99057bbffd0c519280e5348fa2888ef33f5
Author: Dexuan Cui <decui@microsoft.com>
Date:   Fri Aug 2 22:50:20 2019 +0000

    PCI: hv: Avoid use of hv_pci_dev->pci_slot after freeing it
    
    commit 533ca1feed98b0bf024779a14760694c7cb4d431 upstream.
    
    The slot must be removed before the pci_dev is removed, otherwise a panic
    can happen due to use-after-free.
    
    Fixes: 15becc2b56c6 ("PCI: hv: Add hv_pci_remove_slots() when we unload the driver")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d87fee20c301afe00a2802a5156fa5b81df59176
Author: Jon Derrick <jonathan.derrick@intel.com>
Date:   Mon Sep 16 07:54:34 2019 -0600

    PCI: vmd: Fix config addressing when using bus offsets
    
    commit e3dffa4f6c3612dea337c9c59191bd418afc941b upstream.
    
    VMD maps child device config spaces to the VMD Config BAR linearly
    regardless of the starting bus offset. Because of this, the config
    address decode must ignore starting bus offsets when mapping the BDF to
    the config space address.
    
    Fixes: 2a5a9c9a20f9 ("PCI: vmd: Add offset to bus numbers if necessary")
    Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e7215d55cf377ffcf873f5879b3e497ffb5a6bc
Author: Li RongQing <lirongqing@baidu.com>
Date:   Thu Sep 19 20:04:47 2019 +0800

    timer: Read jiffies once when forwarding base clk
    
    commit e430d802d6a3aaf61bd3ed03d9404888a29b9bf9 upstream.
    
    The timer delayed for more than 3 seconds warning was triggered during
    testing.
    
      Workqueue: events_unbound sched_tick_remote
      RIP: 0010:sched_tick_remote+0xee/0x100
      ...
      Call Trace:
       process_one_work+0x18c/0x3a0
       worker_thread+0x30/0x380
       kthread+0x113/0x130
       ret_from_fork+0x22/0x40
    
    The reason is that the code in collect_expired_timers() uses jiffies
    unprotected:
    
        if (next_event > jiffies)
            base->clk = jiffies;
    
    As the compiler is allowed to reload the value base->clk can advance
    between the check and the store and in the worst case advance farther than
    next event. That causes the timer expiry to be delayed until the wheel
    pointer wraps around.
    
    Convert the code to use READ_ONCE()
    
    Fixes: 236968383cf5 ("timers: Optimize collect_expired_timers() for NOHZ")
    Signed-off-by: Li RongQing <lirongqing@baidu.com>
    Signed-off-by: Liang ZhiCheng <liangzhicheng@baidu.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1568894687-14499-1-git-send-email-lirongqing@baidu.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce5d0d7b1f4c5a5cca9b72b40935cf4beec9283e
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Sep 17 11:00:25 2019 -0700

    usercopy: Avoid HIGHMEM pfn warning
    
    commit 314eed30ede02fa925990f535652254b5bad6b65 upstream.
    
    When running on a system with >512MB RAM with a 32-bit kernel built with:
    
            CONFIG_DEBUG_VIRTUAL=y
            CONFIG_HIGHMEM=y
            CONFIG_HARDENED_USERCOPY=y
    
    all execve()s will fail due to argv copying into kmap()ed pages, and on
    usercopy checking the calls ultimately of virt_to_page() will be looking
    for "bad" kmap (highmem) pointers due to CONFIG_DEBUG_VIRTUAL=y:
    
     ------------[ cut here ]------------
     kernel BUG at ../arch/x86/mm/physaddr.c:83!
     invalid opcode: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC
     CPU: 1 PID: 1 Comm: swapper/0 Not tainted 5.3.0-rc8 #6
     Hardware name: Dell Inc. Inspiron 1318/0C236D, BIOS A04 01/15/2009
     EIP: __phys_addr+0xaf/0x100
     ...
     Call Trace:
      __check_object_size+0xaf/0x3c0
      ? __might_sleep+0x80/0xa0
      copy_strings+0x1c2/0x370
      copy_strings_kernel+0x2b/0x40
      __do_execve_file+0x4ca/0x810
      ? kmem_cache_alloc+0x1c7/0x370
      do_execve+0x1b/0x20
      ...
    
    The check is from arch/x86/mm/physaddr.c:
    
            VIRTUAL_BUG_ON((phys_addr >> PAGE_SHIFT) > max_low_pfn);
    
    Due to the kmap() in fs/exec.c:
    
                    kaddr = kmap(kmapped_page);
            ...
            if (copy_from_user(kaddr+offset, str, bytes_to_copy)) ...
    
    Now we can fetch the correct page to avoid the pfn check. In both cases,
    hardened usercopy will need to walk the page-span checker (if enabled)
    to do sanity checking.
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Tested-by: Randy Dunlap <rdunlap@infradead.org>
    Fixes: f5509cc18daa ("mm: Hardened usercopy")
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Link: https://lore.kernel.org/r/201909171056.7F2FFD17@keescook
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57b2ba362cdaca559908a0634518e2cdcb740379
Author: Tom Zanussi <zanussi@kernel.org>
Date:   Sun Sep 1 17:02:01 2019 -0500

    tracing: Make sure variable reference alias has correct var_ref_idx
    
    commit 17f8607a1658a8e70415eef67909f990d13017b5 upstream.
    
    Original changelog from Steve Rostedt (except last sentence which
    explains the problem, and the Fixes: tag):
    
    I performed a three way histogram with the following commands:
    
    echo 'irq_lat u64 lat pid_t pid' > synthetic_events
    echo 'wake_lat u64 lat u64 irqlat pid_t pid' >> synthetic_events
    echo 'hist:keys=common_pid:irqts=common_timestamp.usecs if function == 0xffffffff81200580' > events/timer/hrtimer_start/trigger
    echo 'hist:keys=common_pid:lat=common_timestamp.usecs-$irqts:onmatch(timer.hrtimer_start).irq_lat($lat,pid) if common_flags & 1' > events/sched/sched_waking/trigger
    echo 'hist:keys=pid:wakets=common_timestamp.usecs,irqlat=lat' > events/synthetic/irq_lat/trigger
    echo 'hist:keys=next_pid:lat=common_timestamp.usecs-$wakets,irqlat=$irqlat:onmatch(synthetic.irq_lat).wake_lat($lat,$irqlat,next_pid)' > events/sched/sched_switch/trigger
    echo 1 > events/synthetic/wake_lat/enable
    
    Basically I wanted to see:
    
     hrtimer_start (calling function tick_sched_timer)
    
    Note:
    
      # grep tick_sched_timer /proc/kallsyms
    ffffffff81200580 t tick_sched_timer
    
    And save the time of that, and then record sched_waking if it is called
    in interrupt context and with the same pid as the hrtimer_start, it
    will record the latency between that and the waking event.
    
    I then look at when the task that is woken is scheduled in, and record
    the latency between the wakeup and the task running.
    
    At the end, the wake_lat synthetic event will show the wakeup to
    scheduled latency, as well as the irq latency in from hritmer_start to
    the wakeup. The problem is that I found this:
    
              <idle>-0     [007] d...   190.485261: wake_lat: lat=27 irqlat=190485230 pid=698
              <idle>-0     [005] d...   190.485283: wake_lat: lat=40 irqlat=190485239 pid=10
              <idle>-0     [002] d...   190.488327: wake_lat: lat=56 irqlat=190488266 pid=335
              <idle>-0     [005] d...   190.489330: wake_lat: lat=64 irqlat=190489262 pid=10
              <idle>-0     [003] d...   190.490312: wake_lat: lat=43 irqlat=190490265 pid=77
              <idle>-0     [005] d...   190.493322: wake_lat: lat=54 irqlat=190493262 pid=10
              <idle>-0     [005] d...   190.497305: wake_lat: lat=35 irqlat=190497267 pid=10
              <idle>-0     [005] d...   190.501319: wake_lat: lat=50 irqlat=190501264 pid=10
    
    The irqlat seemed quite large! Investigating this further, if I had
    enabled the irq_lat synthetic event, I noticed this:
    
              <idle>-0     [002] d.s.   249.429308: irq_lat: lat=164968 pid=335
              <idle>-0     [002] d...   249.429369: wake_lat: lat=55 irqlat=249429308 pid=335
    
    Notice that the timestamp of the irq_lat "249.429308" is awfully
    similar to the reported irqlat variable. In fact, all instances were
    like this. It appeared that:
    
      irqlat=$irqlat
    
    Wasn't assigning the old $irqlat to the new irqlat variable, but
    instead was assigning the $irqts to it.
    
    The issue is that assigning the old $irqlat to the new irqlat variable
    creates a variable reference alias, but the alias creation code
    forgets to make sure the alias uses the same var_ref_idx to access the
    reference.
    
    Link: http://lkml.kernel.org/r/1567375321.5282.12.camel@kernel.org
    
    Cc: Linux Trace Devel <linux-trace-devel@vger.kernel.org>
    Cc: linux-rt-users <linux-rt-users@vger.kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 7e8b88a30b085 ("tracing: Add hist trigger support for variable reference aliases")
    Reported-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Tom Zanussi <zanussi@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24969c5523271d56f48994c6b5fe79b4ad58b095
Author: Michael Nosthoff <committed@heine.so>
Date:   Fri Aug 16 09:58:42 2019 +0200

    power: supply: sbs-battery: only return health when battery present
    
    commit fe55e770327363304c4111423e6f7ff3c650136d upstream.
    
    when the battery is set to sbs-mode and  no gpio detection is enabled
    "health" is always returning a value even when the battery is not present.
    All other fields return "not present".
    This leads to a scenario where the driver is constantly switching between
    "present" and "not present" state. This generates a lot of constant
    traffic on the i2c.
    
    This commit changes the response of "health" to an error when the battery
    is not responding leading to a consistent "not present" state.
    
    Fixes: 76b16f4cdfb8 ("power: supply: sbs-battery: don't assume MANUFACTURER_DATA formats")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Michael Nosthoff <committed@heine.so>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Tested-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24a6b4924f51bbe88b1538fe0c41b2dce733d9a3
Author: Michael Nosthoff <committed@heine.so>
Date:   Fri Aug 16 09:37:42 2019 +0200

    power: supply: sbs-battery: use correct flags field
    
    commit 99956a9e08251a1234434b492875b1eaff502a12 upstream.
    
    the type flag is stored in the chip->flags field not in the
    client->flags field. This currently leads to never using the ti
    specific health function as client->flags doesn't use that bit.
    So it's always falling back to the general one.
    
    Fixes: 76b16f4cdfb8 ("power: supply: sbs-battery: don't assume MANUFACTURER_DATA formats")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Michael Nosthoff <committed@heine.so>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bfe00820262ed9f1cd48fa9116604b9a29c6acd
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Wed May 29 16:42:59 2019 +0800

    MIPS: Treat Loongson Extensions as ASEs
    
    commit d2f965549006acb865c4638f1f030ebcefdc71f6 upstream.
    
    Recently, binutils had split Loongson-3 Extensions into four ASEs:
    MMI, CAM, EXT, EXT2. This patch do the samething in kernel and expose
    them in cpuinfo so applications can probe supported ASEs at runtime.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: Yunqiang Su <ysu@wavecomp.com>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bc113a84cf9a4aff56f444612af59d9ce2cc8e5
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Mon Jul 29 13:40:18 2019 +0300

    crypto: ccree - use the full crypt length value
    
    commit 7a4be6c113c1f721818d1e3722a9015fe393295c upstream.
    
    In case of AEAD decryption verifcation error we were using the
    wrong value to zero out the plaintext buffer leaving the end of
    the buffer with the false plaintext.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Fixes: ff27e85a85bb ("crypto: ccree - add AEAD support")
    CC: stable@vger.kernel.org # v4.17+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fdc737947b641d2a80edbef6499cd5da22bce3e
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Tue Jul 2 14:39:19 2019 +0300

    crypto: ccree - account for TEE not ready to report
    
    commit 76a95bd8f9e10cade9c4c8df93b5c20ff45dc0f5 upstream.
    
    When ccree driver runs it checks the state of the Trusted Execution
    Environment CryptoCell driver before proceeding. We did not account
    for cases where the TEE side is not ready or not available at all.
    Fix it by only considering TEE error state after sync with the TEE
    side driver.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Fixes: ab8ec9658f5a ("crypto: ccree - add FIPS support")
    CC: stable@vger.kernel.org # v4.17+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04debb1529fa59b1eefd7de6d448a5407b656df9
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Tue Jul 30 08:48:33 2019 +0300

    crypto: caam - fix concurrency issue in givencrypt descriptor
    
    commit 48f89d2a2920166c35b1c0b69917dbb0390ebec7 upstream.
    
    IV transfer from ofifo to class2 (set up at [29][30]) is not guaranteed
    to be scheduled before the data transfer from ofifo to external memory
    (set up at [38]:
    
    [29] 10FA0004           ld: ind-nfifo (len=4) imm
    [30] 81F00010               <nfifo_entry: ofifo->class2 type=msg len=16>
    [31] 14820004           ld: ccb2-datasz len=4 offs=0 imm
    [32] 00000010               data:0x00000010
    [33] 8210010D    operation: cls1-op aes cbc init-final enc
    [34] A8080B04         math: (seqin + math0)->vseqout len=4
    [35] 28000010    seqfifold: skip len=16
    [36] A8080A04         math: (seqin + math0)->vseqin len=4
    [37] 2F1E0000    seqfifold: both msg1->2-last2-last1 len=vseqinsz
    [38] 69300000   seqfifostr: msg len=vseqoutsz
    [39] 5C20000C      seqstr: ccb2 ctx len=12 offs=0
    
    If ofifo -> external memory transfer happens first, DECO will hang
    (issuing a Watchdog Timeout error, if WDOG is enabled) waiting for
    data availability in ofifo for the ofifo -> c2 ififo transfer.
    
    Make sure IV transfer happens first by waiting for all CAAM internal
    transfers to end before starting payload transfer.
    
    New descriptor with jump command inserted at [37]:
    
    [..]
    [36] A8080A04         math: (seqin + math0)->vseqin len=4
    [37] A1000401         jump: jsl1 all-match[!nfifopend] offset=[01] local->[38]
    [38] 2F1E0000    seqfifold: both msg1->2-last2-last1 len=vseqinsz
    [39] 69300000   seqfifostr: msg len=vseqoutsz
    [40] 5C20000C      seqstr: ccb2 ctx len=12 offs=0
    
    [Note: the issue is present in the descriptor from the very beginning
    (cf. Fixes tag). However I've marked it v4.19+ since it's the oldest
    maintained kernel that the patch applies clean against.]
    
    Cc: <stable@vger.kernel.org> # v4.19+
    Fixes: 1acebad3d8db8 ("crypto: caam - faster aead implementation")
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c93e0686446d937ec87c3c326e6a349f4b51ff3e
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Wed Jul 31 16:08:02 2019 +0300

    crypto: caam/qi - fix error handling in ERN handler
    
    commit 51fab3d73054ca5b06b26e20edac0486b052c6f4 upstream.
    
    ERN handler calls the caam/qi frontend "done" callback with a status
    of -EIO. This is incorrect, since the callback expects a status value
    meaningful for the crypto engine - hence the cryptic messages
    like the one below:
    platform caam_qi: 15: unknown error source
    
    Fix this by providing the callback with:
    -the status returned by the crypto engine (fd[status]) in case
    it contains an error, OR
    -a QI "No error" code otherwise; this will trigger the message:
    platform caam_qi: 50000000: Queue Manager Interface: No error
    which is fine, since QMan driver provides details about the cause of
    failure
    
    Cc: <stable@vger.kernel.org> # v5.1+
    Fixes: 67c2315def06 ("crypto: caam - add Queue Interface (QI) backend support")
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Reviewed-by: Iuliana Prodan <iuliana.prodan@nxp.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dfcca17448c306591f90f38a24e695f2d8ee151
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Sep 4 14:18:09 2019 +0000

    crypto: cavium/zip - Add missing single_release()
    
    commit c552ffb5c93d9d65aaf34f5f001c4e7e8484ced1 upstream.
    
    When using single_open() for opening, single_release() should be
    used instead of seq_release(), otherwise there is a memory leak.
    
    Fixes: 09ae5d37e093 ("crypto: zip - Add Compression/Decompression statistics")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d285f80973e9669d271fab98fbec2565bef7ca8
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Sep 6 13:13:06 2019 +1000

    crypto: skcipher - Unmap pages after an external error
    
    commit 0ba3c026e685573bd3534c17e27da7c505ac99c4 upstream.
    
    skcipher_walk_done may be called with an error by internal or
    external callers.  For those internal callers we shouldn't unmap
    pages but for external callers we must unmap any pages that are
    in use.
    
    This patch distinguishes between the two cases by checking whether
    walk->nbytes is zero or not.  For internal callers, we now set
    walk->nbytes to zero prior to the call.  For external callers,
    walk->nbytes has always been non-zero (as zero is used to indicate
    the termination of a walk).
    
    Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Fixes: 5cde0af2a982 ("[CRYPTO] cipher: Added block cipher type")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Tested-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1494470865db692040e5d270b0c4d234837cc383
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Tue Jul 23 07:24:01 2019 +0000

    crypto: qat - Silence smp_processor_id() warning
    
    commit 1b82feb6c5e1996513d0fb0bbb475417088b4954 upstream.
    
    It seems that smp_processor_id() is only used for a best-effort
    load-balancing, refer to qat_crypto_get_instance_node(). It's not feasible
    to disable preemption for the duration of the crypto requests. Therefore,
    just silence the warning. This commit is similar to e7a9b05ca4
    ("crypto: cavium - Fix smp_processor_id() warnings").
    
    Silences the following splat:
    BUG: using smp_processor_id() in preemptible [00000000] code: cryptomgr_test/2904
    caller is qat_alg_ablkcipher_setkey+0x300/0x4a0 [intel_qat]
    CPU: 1 PID: 2904 Comm: cryptomgr_test Tainted: P           O    4.14.69 #1
    ...
    Call Trace:
     dump_stack+0x5f/0x86
     check_preemption_disabled+0xd3/0xe0
     qat_alg_ablkcipher_setkey+0x300/0x4a0 [intel_qat]
     skcipher_setkey_ablkcipher+0x2b/0x40
     __test_skcipher+0x1f3/0xb20
     ? cpumask_next_and+0x26/0x40
     ? find_busiest_group+0x10e/0x9d0
     ? preempt_count_add+0x49/0xa0
     ? try_module_get+0x61/0xf0
     ? crypto_mod_get+0x15/0x30
     ? __kmalloc+0x1df/0x1f0
     ? __crypto_alloc_tfm+0x116/0x180
     ? crypto_skcipher_init_tfm+0xa6/0x180
     ? crypto_create_tfm+0x4b/0xf0
     test_skcipher+0x21/0xa0
     alg_test_skcipher+0x3f/0xa0
     alg_test.part.6+0x126/0x2a0
     ? finish_task_switch+0x21b/0x260
     ? __schedule+0x1e9/0x800
     ? __wake_up_common+0x8d/0x140
     cryptomgr_test+0x40/0x50
     kthread+0xff/0x130
     ? cryptomgr_notify+0x540/0x540
     ? kthread_create_on_node+0x70/0x70
     ret_from_fork+0x24/0x50
    
    Fixes: ed8ccaef52 ("crypto: qat - Add support for SRIOV")
    Cc: stable@vger.kernel.org
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b8b16da36f3929d49f79df4e7e9c6049e0a62fb
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Aug 28 15:05:28 2019 -0400

    tools lib traceevent: Do not free tep->cmdlines in add_new_comm() on failure
    
    commit b0215e2d6a18d8331b2d4a8b38ccf3eff783edb1 upstream.
    
    If the re-allocation of tep->cmdlines succeeds, then the previous
    allocation of tep->cmdlines will be freed. If we later fail in
    add_new_comm(), we must not free cmdlines, and also should assign
    tep->cmdlines to the new allocation. Otherwise when freeing tep, the
    tep->cmdlines will be pointing to garbage.
    
    Fixes: a6d2a61ac653a ("tools lib traceevent: Remove some die() calls")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: linux-trace-devel@vger.kernel.org
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20190828191819.970121417@goodmis.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed27a4f1019952c2981c2ddc0ecbb2e62b981614
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Aug 5 13:01:50 2019 -0400

    tools lib traceevent: Fix "robust" test of do_generate_dynamic_list_file
    
    commit 82a2f88458d70704be843961e10b5cef9a6e95d3 upstream.
    
    The tools/lib/traceevent/Makefile had a test added to it to detect a failure
    of the "nm" when making the dynamic list file (whatever that is). The
    problem is that the test sorts the values "U W w" and some versions of sort
    will place "w" ahead of "W" (even though it has a higher ASCII value, and
    break the test.
    
    Add 'tr "w" "W"' to merge the two and not worry about the ordering.
    
    Reported-by: Tzvetomir Stoyanov <tstoyanov@vmware.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: David Carrillo-Cisneros <davidcc@google.com>
    Cc: He Kuang <hekuang@huawei.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Michal rarek <mmarek@suse.com>
    Cc: Paul Turner <pjt@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Cc: Wang Nan <wangnan0@huawei.com>
    Cc: stable@vger.kernel.org
    Fixes: 6467753d61399 ("tools lib traceevent: Robustify do_generate_dynamic_list_file")
    Link: http://lkml.kernel.org/r/20190805130150.25acfeb1@gandalf.local.home
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e80c1c7a14c039f275391551fd439201c7c557b9
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Aug 13 16:01:02 2019 +0200

    can: mcp251x: mcp251x_hw_reset(): allow more time after a reset
    
    commit d84ea2123f8d27144e3f4d58cd88c9c6ddc799de upstream.
    
    Some boards take longer than 5ms to power up after a reset, so allow
    some retries attempts before giving up.
    
    Fixes: ff06d611a31c ("can: mcp251x: Improve mcp251x_hw_reset()")
    Cc: linux-stable <stable@vger.kernel.org>
    Tested-by: Sean Nyekjaer <sean@geanix.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 470d7abb74b23a33091471efd858f4dba48fcb97
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Tue Sep 24 09:22:53 2019 +0530

    powerpc/mm: Fixup tlbie vs mtpidr/mtlpidr ordering issue on POWER9
    
    commit 047e6575aec71d75b765c22111820c4776cd1c43 upstream.
    
    On POWER9, under some circumstances, a broadcast TLB invalidation will
    fail to invalidate the ERAT cache on some threads when there are
    parallel mtpidr/mtlpidr happening on other threads of the same core.
    This can cause stores to continue to go to a page after it's unmapped.
    
    The workaround is to force an ERAT flush using PID=0 or LPID=0 tlbie
    flush. This additional TLB flush will cause the ERAT cache
    invalidation. Since we are using PID=0 or LPID=0, we don't get
    filtered out by the TLB snoop filtering logic.
    
    We need to still follow this up with another tlbie to take care of
    store vs tlbie ordering issue explained in commit:
    a5d4b5891c2f ("powerpc/mm: Fixup tlbie vs store ordering issue on
    POWER9"). The presence of ERAT cache implies we can still get new
    stores and they may miss store queue marking flush.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190924035254.24612-3-aneesh.kumar@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3822dd8c102d11ada9d9ed8e04cad0b347a04689
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Wed Aug 21 10:20:11 2019 +0000

    powerpc/mm: Fix an Oops in kasan_mmu_init()
    
    commit cbd18991e24fea2c31da3bb117c83e4a3538cd11 upstream.
    
    Uncompressing Kernel Image ... OK
       Loading Device Tree to 01ff7000, end 01fff74f ... OK
    [    0.000000] printk: bootconsole [udbg0] enabled
    [    0.000000] BUG: Unable to handle kernel data access at 0xf818c000
    [    0.000000] Faulting instruction address: 0xc0013c7c
    [    0.000000] Thread overran stack, or stack corrupted
    [    0.000000] Oops: Kernel access of bad area, sig: 11 [#1]
    [    0.000000] BE PAGE_SIZE=16K PREEMPT
    [    0.000000] Modules linked in:
    [    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 5.3.0-rc4-s3k-dev-00743-g5abe4a3e8fd3-dirty #2080
    [    0.000000] NIP:  c0013c7c LR: c0013310 CTR: 00000000
    [    0.000000] REGS: c0c5ff38 TRAP: 0300   Not tainted  (5.3.0-rc4-s3k-dev-00743-g5abe4a3e8fd3-dirty)
    [    0.000000] MSR:  00001032 <ME,IR,DR,RI>  CR: 99033955  XER: 80002100
    [    0.000000] DAR: f818c000 DSISR: 82000000
    [    0.000000] GPR00: c0013310 c0c5fff0 c0ad6ac0 c0c600c0 f818c031 82000000 00000000 ffffffff
    [    0.000000] GPR08: 00000000 f1f1f1f1 c0013c2c c0013304 99033955 00400008 00000000 07ff9598
    [    0.000000] GPR16: 00000000 07ffb94c 00000000 00000000 00000000 00000000 00000000 f818cfb2
    [    0.000000] GPR24: 00000000 00000000 00001000 ffffffff 00000000 c07dbf80 00000000 f818c000
    [    0.000000] NIP [c0013c7c] do_page_fault+0x50/0x904
    [    0.000000] LR [c0013310] handle_page_fault+0xc/0x38
    [    0.000000] Call Trace:
    [    0.000000] Instruction dump:
    [    0.000000] be010080 91410014 553fe8fe 3d40c001 3d20f1f1 7d800026 394a3c2c 3fffe000
    [    0.000000] 6129f1f1 900100c4 9181007c 91410018 <913f0000> 3d2001f4 6129f4f4 913f0004
    
    Don't map the early shadow page read-only yet when creating the new
    page tables for the real shadow memory, otherwise the memblock
    allocations that immediately follows to create the real shadow pages
    that are about to replace the early shadow page trigger a page fault
    if they fall into the region being worked on at the moment.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 2edb16efc899 ("powerpc/32: Add KASAN support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/fe86886fb8db44360417cee0dc515ad47ca6ef72.1566382750.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e946a841a9b3adfb0024b3c7840b404200a5abd2
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Wed Aug 21 10:20:00 2019 +0000

    powerpc/mm: Add a helper to select PAGE_KERNEL_RO or PAGE_READONLY
    
    commit 4c0f5d1eb4072871c34530358df45f05ab80edd6 upstream.
    
    In a couple of places there is a need to select whether read-only
    protection of shadow pages is performed with PAGE_KERNEL_RO or with
    PAGE_READONLY.
    
    Add a helper to avoid duplicating the choice.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/9f33f44b9cd741c4a02b3dce7b8ef9438fe2cd2a.1566382750.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3b8b5c87fe13591a30ec577167e5ce33a354144
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Tue Sep 24 09:22:52 2019 +0530

    powerpc/book3s64/radix: Rename CPU_FTR_P9_TLBIE_BUG feature flag
    
    commit 09ce98cacd51fcd0fa0af2f79d1e1d3192f4cbb0 upstream.
    
    Rename the #define to indicate this is related to store vs tlbie
    ordering issue. In the next patch, we will be adding another feature
    flag that is used to handles ERAT flush vs tlbie ordering issue.
    
    Fixes: a5d4b5891c2f ("powerpc/mm: Fixup tlbie vs store ordering issue on POWER9")
    Cc: stable@vger.kernel.org # v4.16+
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190924035254.24612-2-aneesh.kumar@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2170b3ea4ff1c1cd79550c18051e78a74a0cfa3
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Tue Sep 24 09:22:51 2019 +0530

    powerpc/book3s64/mm: Don't do tlbie fixup for some hardware revisions
    
    commit 677733e296b5c7a37c47da391fc70a43dc40bd67 upstream.
    
    The store ordering vs tlbie issue mentioned in commit
    a5d4b5891c2f ("powerpc/mm: Fixup tlbie vs store ordering issue on
    POWER9") is fixed for Nimbus 2.3 and Cumulus 1.3 revisions. We don't
    need to apply the fixup if we are running on them
    
    We can only do this on PowerNV. On pseries guest with KVM we still
    don't support redoing the feature fixup after migration. So we should
    be enabling all the workarounds needed, because whe can possibly
    migrate between DD 2.3 and DD 2.2
    
    Fixes: a5d4b5891c2f ("powerpc/mm: Fixup tlbie vs store ordering issue on POWER9")
    Cc: stable@vger.kernel.org # v4.16+
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190924035254.24612-1-aneesh.kumar@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ce93076d8ee2a0fac3ad4adbd2e91b6197146db
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Aug 9 14:58:10 2019 +0000

    powerpc/kasan: Fix shadow area set up for modules.
    
    commit 663c0c9496a69f80011205ba3194049bcafd681d upstream.
    
    When loading modules, from time to time an Oops is encountered during
    the init of shadow area for globals. This is due to the last page not
    always being mapped depending on the exact distance between the start
    and the end of the shadow area and the alignment with the page
    addresses.
    
    Fix this by aligning the starting address with the page address.
    
    Fixes: 2edb16efc899 ("powerpc/32: Add KASAN support")
    Cc: stable@vger.kernel.org # v5.2+
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/4f887e9b77d0d725cbb52035c7ece485c1c5fc14.1565361881.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 131381f937479a1399c46ac4ba2ceec9ec32bce6
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Aug 9 14:58:09 2019 +0000

    powerpc/kasan: Fix parallel loading of modules.
    
    commit 45ff3c55958542c3b76075d59741297b8cb31cbb upstream.
    
    Parallel loading of modules may lead to bad setup of shadow page table
    entries.
    
    First, lets align modules so that two modules never share the same
    shadow page.
    
    Second, ensure that two modules cannot allocate two page tables for
    the same PMD entry at the same time. This is done by using
    init_mm.page_table_lock in the same way as __pte_alloc_kernel()
    
    Fixes: 2edb16efc899 ("powerpc/32: Add KASAN support")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/c97284f912128cbc3f2fe09d68e90e65fb3e6026.1565361876.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8db59e02dc297f539f2d89ade5020035d1784fc
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Thu Jul 18 15:11:36 2019 +1000

    powerpc/powernv/ioda: Fix race in TCE level allocation
    
    commit 56090a3902c80c296e822d11acdb6a101b322c52 upstream.
    
    pnv_tce() returns a pointer to a TCE entry and originally a TCE table
    would be pre-allocated. For the default case of 2GB window the table
    needs only a single level and that is fine. However if more levels are
    requested, it is possible to get a race when 2 threads want a pointer
    to a TCE entry from the same page of TCEs.
    
    This adds cmpxchg to handle the race. Note that once TCE is non-zero,
    it cannot become zero again.
    
    Fixes: a68bd1267b72 ("powerpc/powernv/ioda: Allocate indirect TCE levels on demand")
    CC: stable@vger.kernel.org # v4.19+
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190718051139.74787-2-aik@ozlabs.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a84bfc478ac57bd7ce418e9ae416f2dbe600e009
Author: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
Date:   Wed May 15 13:15:52 2019 +0530

    powerpc/pseries: Fix cpu_hotplug_lock acquisition in resize_hpt()
    
    commit c784be435d5dae28d3b03db31753dd7a18733f0c upstream.
    
    The calls to arch_add_memory()/arch_remove_memory() are always made
    with the read-side cpu_hotplug_lock acquired via memory_hotplug_begin().
    On pSeries, arch_add_memory()/arch_remove_memory() eventually call
    resize_hpt() which in turn calls stop_machine() which acquires the
    read-side cpu_hotplug_lock again, thereby resulting in the recursive
    acquisition of this lock.
    
    In the absence of CONFIG_PROVE_LOCKING, we hadn't observed a system
    lockup during a memory hotplug operation because cpus_read_lock() is a
    per-cpu rwsem read, which, in the fast-path (in the absence of the
    writer, which in our case is a CPU-hotplug operation) simply
    increments the read_count on the semaphore. Thus a recursive read in
    the fast-path doesn't cause any problems.
    
    However, we can hit this problem in practice if there is a concurrent
    CPU-Hotplug operation in progress which is waiting to acquire the
    write-side of the lock. This will cause the second recursive read to
    block until the writer finishes. While the writer is blocked since the
    first read holds the lock. Thus both the reader as well as the writers
    fail to make any progress thereby blocking both CPU-Hotplug as well as
    Memory Hotplug operations.
    
    Memory-Hotplug                          CPU-Hotplug
    CPU 0                                   CPU 1
    ------                                  ------
    
    1. down_read(cpu_hotplug_lock.rw_sem)
       [memory_hotplug_begin]
                                            2. down_write(cpu_hotplug_lock.rw_sem)
                                            [cpu_up/cpu_down]
    3. down_read(cpu_hotplug_lock.rw_sem)
       [stop_machine()]
    
    Lockdep complains as follows in these code-paths.
    
     swapper/0/1 is trying to acquire lock:
     (____ptrval____) (cpu_hotplug_lock.rw_sem){++++}, at: stop_machine+0x2c/0x60
    
    but task is already holding lock:
    (____ptrval____) (cpu_hotplug_lock.rw_sem){++++}, at: mem_hotplug_begin+0x20/0x50
    
     other info that might help us debug this:
      Possible unsafe locking scenario:
    
            CPU0
            ----
       lock(cpu_hotplug_lock.rw_sem);
       lock(cpu_hotplug_lock.rw_sem);
    
      *** DEADLOCK ***
    
      May be due to missing lock nesting notation
    
     3 locks held by swapper/0/1:
      #0: (____ptrval____) (&dev->mutex){....}, at: __driver_attach+0x12c/0x1b0
      #1: (____ptrval____) (cpu_hotplug_lock.rw_sem){++++}, at: mem_hotplug_begin+0x20/0x50
      #2: (____ptrval____) (mem_hotplug_lock.rw_sem){++++}, at: percpu_down_write+0x54/0x1a0
    
    stack backtrace:
     CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.0.0-rc5-58373-gbc99402235f3-dirty #166
     Call Trace:
       dump_stack+0xe8/0x164 (unreliable)
       __lock_acquire+0x1110/0x1c70
       lock_acquire+0x240/0x290
       cpus_read_lock+0x64/0xf0
       stop_machine+0x2c/0x60
       pseries_lpar_resize_hpt+0x19c/0x2c0
       resize_hpt_for_hotplug+0x70/0xd0
       arch_add_memory+0x58/0xfc
       devm_memremap_pages+0x5e8/0x8f0
       pmem_attach_disk+0x764/0x830
       nvdimm_bus_probe+0x118/0x240
       really_probe+0x230/0x4b0
       driver_probe_device+0x16c/0x1e0
       __driver_attach+0x148/0x1b0
       bus_for_each_dev+0x90/0x130
       driver_attach+0x34/0x50
       bus_add_driver+0x1a8/0x360
       driver_register+0x108/0x170
       __nd_driver_register+0xd0/0xf0
       nd_pmem_driver_init+0x34/0x48
       do_one_initcall+0x1e0/0x45c
       kernel_init_freeable+0x540/0x64c
       kernel_init+0x2c/0x160
       ret_from_kernel_thread+0x5c/0x68
    
    Fix this issue by
      1) Requiring all the calls to pseries_lpar_resize_hpt() be made
         with cpu_hotplug_lock held.
    
      2) In pseries_lpar_resize_hpt() invoke stop_machine_cpuslocked()
         as a consequence of 1)
    
      3) To satisfy 1), in hpt_order_set(), call mmu_hash_ops.resize_hpt()
         with cpu_hotplug_lock held.
    
    Fixes: dbcf929c0062 ("powerpc/pseries: Add support for hash table resizing")
    Cc: stable@vger.kernel.org # v4.11+
    Reported-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1557906352-29048-1-git-send-email-ego@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f32d42acbc5af94a8474f25b0cebceceddbcb8e5
Author: Andrew Donnellan <ajd@linux.ibm.com>
Date:   Fri May 3 17:52:53 2019 +1000

    powerpc/powernv: Restrict OPAL symbol map to only be readable by root
    
    commit e7de4f7b64c23e503a8c42af98d56f2a7462bd6d upstream.
    
    Currently the OPAL symbol map is globally readable, which seems bad as
    it contains physical addresses.
    
    Restrict it to root.
    
    Fixes: c8742f85125d ("powerpc/powernv: Expose OPAL firmware symbol map")
    Cc: stable@vger.kernel.org # v3.19+
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190503075253.22798-1-ajd@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd92d62c0717c6175ef0f638de5b285b1af3961d
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Wed Aug 14 12:36:09 2019 +0000

    powerpc/ptdump: Fix addresses display on PPC32
    
    commit 7c7a532ba3fc51bf9527d191fb410786c1fdc73c upstream.
    
    Commit 453d87f6a8ae ("powerpc/mm: Warn if W+X pages found on boot")
    wrongly changed KERN_VIRT_START from 0 to PAGE_OFFSET, leading to a
    shift in the displayed addresses.
    
    Lets revert that change to resync walk_pagetables()'s addr val and
    pgd_t pointer for PPC32.
    
    Fixes: 453d87f6a8ae ("powerpc/mm: Warn if W+X pages found on boot")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/eb4d626514e22f85814830012642329018ef6af9.1565786091.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1cae5635e2fe7d6be481968178cba3cc017f752
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Wed Aug 14 10:02:20 2019 +0000

    powerpc/32s: Fix boot failure with DEBUG_PAGEALLOC without KASAN.
    
    commit 9d6d712fbf7766f21c838940eebcd7b4d476c5e6 upstream.
    
    When KASAN is selected, the definitive hash table has to be
    set up later, but there is already an early temporary one.
    
    When KASAN is not selected, there is no early hash table,
    so the setup of the definitive hash table cannot be delayed.
    
    Fixes: 72f208c6a8f7 ("powerpc/32s: move hash code patching out of MMU_init_hw()")
    Cc: stable@vger.kernel.org # v5.2+
    Reported-by: Jonathan Neuschafer <j.neuschaefer@gmx.net>
    Tested-by: Jonathan Neuschafer <j.neuschaefer@gmx.net>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/b7860c5e1e784d6b96ba67edf47dd6cbc2e78ab6.1565776892.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 228b682353045a9fd6da77ff7cf957265fd0e542
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Mon Aug 19 06:40:25 2019 +0000

    powerpc/603: Fix handling of the DIRTY flag
    
    commit 415480dce2ef03bb8335deebd2f402f475443ce0 upstream.
    
    If a page is already mapped RW without the DIRTY flag, the DIRTY
    flag is never set and a TLB store miss exception is taken forever.
    
    This is easily reproduced with the following app:
    
    void main(void)
    {
            volatile char *ptr = mmap(0, 4096, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    
            *ptr = *ptr;
    }
    
    When DIRTY flag is not set, bail out of TLB miss handler and take
    a minor page fault which will set the DIRTY flag.
    
    Fixes: f8b58c64eaef ("powerpc/603: let's handle PAGE_DIRTY directly")
    Cc: stable@vger.kernel.org # v5.1+
    Reported-by: Doug Crawford <doug.crawford@intelight-its.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/80432f71194d7ee75b2f5043ecf1501cf1cca1f3.1566196646.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82090f2b9927f10114e3506652ae3852e3fe329d
Author: Santosh Sivaraj <santosh@fossix.org>
Date:   Tue Aug 20 13:43:46 2019 +0530

    powerpc/mce: Schedule work from irq_work
    
    commit b5bda6263cad9a927e1a4edb7493d542da0c1410 upstream.
    
    schedule_work() cannot be called from MCE exception context as MCE can
    interrupt even in interrupt disabled context.
    
    Fixes: 733e4a4c4467 ("powerpc/mce: hookup memory_failure for UE errors")
    Cc: stable@vger.kernel.org # v4.15+
    Reviewed-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
    Reviewed-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: Balbir Singh <bsingharora@gmail.com>
    Signed-off-by: Santosh Sivaraj <santosh@fossix.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190820081352.8641-2-santosh@fossix.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 309e354b90d76c555e8656a579e8129db349750e
Author: Balbir Singh <bsingharora@gmail.com>
Date:   Tue Aug 20 13:43:47 2019 +0530

    powerpc/mce: Fix MCE handling for huge pages
    
    commit 99ead78afd1128bfcebe7f88f3b102fb2da09aee upstream.
    
    The current code would fail on huge pages addresses, since the shift would
    be incorrect. Use the correct page shift value returned by
    __find_linux_pte() to get the correct physical address. The code is more
    generic and can handle both regular and compound pages.
    
    Fixes: ba41e1e1ccb9 ("powerpc/mce: Hookup derror (load/store) UE errors")
    Signed-off-by: Balbir Singh <bsingharora@gmail.com>
    [arbab@linux.ibm.com: Fixup pseries_do_memory_failure()]
    Signed-off-by: Reza Arbab <arbab@linux.ibm.com>
    Tested-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
    Signed-off-by: Santosh Sivaraj <santosh@fossix.org>
    Cc: stable@vger.kernel.org # v4.15+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190820081352.8641-3-santosh@fossix.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09f8a763e7884c5b5e26cbe4ce15aa73eed3541a
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Aug 13 20:06:48 2019 +1000

    powerpc/xive: Implement get_irqchip_state method for XIVE to fix shutdown race
    
    commit da15c03b047dca891d37b9f4ef9ca14d84a6484f upstream.
    
    Testing has revealed the existence of a race condition where a XIVE
    interrupt being shut down can be in one of the XIVE interrupt queues
    (of which there are up to 8 per CPU, one for each priority) at the
    point where free_irq() is called.  If this happens, can return an
    interrupt number which has been shut down.  This can lead to various
    symptoms:
    
    - irq_to_desc(irq) can be NULL.  In this case, no end-of-interrupt
      function gets called, resulting in the CPU's elevated interrupt
      priority (numerically lowered CPPR) never gets reset.  That then
      means that the CPU stops processing interrupts, causing device
      timeouts and other errors in various device drivers.
    
    - The irq descriptor or related data structures can be in the process
      of being freed as the interrupt code is using them.  This typically
      leads to crashes due to bad pointer dereferences.
    
    This race is basically what commit 62e0468650c3 ("genirq: Add optional
    hardware synchronization for shutdown", 2019-06-28) is intended to
    fix, given a get_irqchip_state() method for the interrupt controller
    being used.  It works by polling the interrupt controller when an
    interrupt is being freed until the controller says it is not pending.
    
    With XIVE, the PQ bits of the interrupt source indicate the state of
    the interrupt source, and in particular the P bit goes from 0 to 1 at
    the point where the hardware writes an entry into the interrupt queue
    that this interrupt is directed towards.  Normally, the code will then
    process the interrupt and do an end-of-interrupt (EOI) operation which
    will reset PQ to 00 (assuming another interrupt hasn't been generated
    in the meantime).  However, there are situations where the code resets
    P even though a queue entry exists (for example, by setting PQ to 01,
    which disables the interrupt source), and also situations where the
    code leaves P at 1 after removing the queue entry (for example, this
    is done for escalation interrupts so they cannot fire again until
    they are explicitly re-enabled).
    
    The code already has a 'saved_p' flag for the interrupt source which
    indicates that a queue entry exists, although it isn't maintained
    consistently.  This patch adds a 'stale_p' flag to indicate that
    P has been left at 1 after processing a queue entry, and adds code
    to set and clear saved_p and stale_p as necessary to maintain a
    consistent indication of whether a queue entry may or may not exist.
    
    With this, we can implement xive_get_irqchip_state() by looking at
    stale_p, saved_p and the ESB PQ bits for the interrupt.
    
    There is some additional code to handle escalation interrupts
    properly; because they are enabled and disabled in KVM assembly code,
    which does not have access to the xive_irq_data struct for the
    escalation interrupt.  Hence, stale_p may be incorrect when the
    escalation interrupt is freed in kvmppc_xive_{,native_}cleanup_vcpu().
    Fortunately, we can fix it up by looking at vcpu->arch.xive_esc_on,
    with some careful attention to barriers in order to ensure the correct
    result if xive_esc_irq() races with kvmppc_xive_cleanup_vcpu().
    
    Finally, this adds code to make noise on the console (pr_crit and
    WARN_ON(1)) if we find an interrupt queue entry for an interrupt
    which does not have a descriptor.  While this won't catch the race
    reliably, if it does get triggered it will be an indication that
    the race is occurring and needs to be debugged.
    
    Fixes: 243e25112d06 ("powerpc/xive: Native exploitation of the XIVE interrupt controller")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190813100648.GE9567@blackberry
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dabbd81e3764a81fb0e2f283153bcce60c1ea05
Author: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
Date:   Fri Jul 19 10:05:31 2019 +0000

    ASoC: sgtl5000: Improve VAG power and mute control
    
    commit b1f373a11d25fc9a5f7679c9b85799fe09b0dc4a upstream.
    
    VAG power control is improved to fit the manual [1]. This patch fixes as
    minimum one bug: if customer muxes Headphone to Line-In right after boot,
    the VAG power remains off that leads to poor sound quality from line-in.
    
    I.e. after boot:
      - Connect sound source to Line-In jack;
      - Connect headphone to HP jack;
      - Run following commands:
      $ amixer set 'Headphone' 80%
      $ amixer set 'Headphone Mux' LINE_IN
    
    Change VAG power on/off control according to the following algorithm:
      - turn VAG power ON on the 1st incoming event.
      - keep it ON if there is any active VAG consumer (ADC/DAC/HP/Line-In).
      - turn VAG power OFF when there is the latest consumer's pre-down event
        come.
      - always delay after VAG power OFF to avoid pop.
      - delay after VAG power ON if the initiative consumer is Line-In, this
        prevents pop during line-in muxing.
    
    According to the data sheet [1], to avoid any pops/clicks,
    the outputs should be muted during input/output
    routing changes.
    
    [1] https://www.nxp.com/docs/en/data-sheet/SGTL5000.pdf
    
    Cc: stable@vger.kernel.org
    Fixes: 9b34e6cc3bc2 ("ASoC: Add Freescale SGTL5000 codec support")
    Signed-off-by: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
    Reviewed-by: Marcel Ziswiler <marcel.ziswiler@toradex.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20190719100524.23300-3-oleksandr.suvorov@toradex.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2f3eaa1c7ae3f7de2febddc55135677be979088
Author: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
Date:   Fri Jul 19 10:05:30 2019 +0000

    ASoC: Define a set of DAPM pre/post-up events
    
    commit cfc8f568aada98f9608a0a62511ca18d647613e2 upstream.
    
    Prepare to use SND_SOC_DAPM_PRE_POST_PMU definition to
    reduce coming code size and make it more readable.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
    Reviewed-by: Marcel Ziswiler <marcel.ziswiler@toradex.com>
    Reviewed-by: Igor Opaniuk <igor.opaniuk@toradex.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Link: https://lore.kernel.org/r/20190719100524.23300-2-oleksandr.suvorov@toradex.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c52c90378b858389ff3bb12f2293b30344fbdb85
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Thu May 2 02:38:00 2019 +0300

    PM / devfreq: tegra: Fix kHz to Hz conversion
    
    commit 62bacb06b9f08965c4ef10e17875450490c948c0 upstream.
    
    The kHz to Hz is incorrectly converted in a few places in the code,
    this results in a wrong frequency being calculated because devfreq core
    uses OPP frequencies that are given in Hz to clamp the rate, while
    tegra-devfreq gives to the core value in kHz and then it also expects to
    receive value in kHz from the core. In a result memory freq is always set
    to a value which is close to ULONG_MAX because of the bug. Hence the EMC
    frequency is always capped to the maximum and the driver doesn't do
    anything useful. This patch was tested on Tegra30 and Tegra124 SoC's, EMC
    frequency scaling works properly now.
    
    Cc: <stable@vger.kernel.org> # 4.14+
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92ec11cccb7fc14331e000ab2337f60aa433433e
Author: Mike Christie <mchristi@redhat.com>
Date:   Sun Aug 4 14:10:06 2019 -0500

    nbd: fix max number of supported devs
    
    commit e9e006f5fcf2bab59149cb38a48a4817c1b538b4 upstream.
    
    This fixes a bug added in 4.10 with commit:
    
    commit 9561a7ade0c205bc2ee035a2ac880478dcc1a024
    Author: Josef Bacik <jbacik@fb.com>
    Date:   Tue Nov 22 14:04:40 2016 -0500
    
        nbd: add multi-connection support
    
    that limited the number of devices to 256. Before the patch we could
    create 1000s of devices, but the patch switched us from using our
    own thread to using a work queue which has a default limit of 256
    active works.
    
    The problem is that our recv_work function sits in a loop until
    disconnection but only handles IO for one connection. The work is
    started when the connection is started/restarted, but if we end up
    creating 257 or more connections, the queue_work call just queues
    connection257+'s recv_work and that waits for connection 1 - 256's
    recv_work to be disconnected and that work instance completing.
    
    Instead of reverting back to kthreads, this has us allocate a
    workqueue_struct per device, so we can block in the work.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f74d79a829f00346f41b20fb553e1e5879f6fe2
Author: Wanpeng Li <wanpengli@tencent.com>
Date:   Wed Sep 18 17:50:10 2019 +0800

    KVM: X86: Fix userspace set invalid CR4
    
    commit 3ca94192278ca8de169d78c085396c424be123b3 upstream.
    
    Reported by syzkaller:
    
            WARNING: CPU: 0 PID: 6544 at /home/kernel/data/kvm/arch/x86/kvm//vmx/vmx.c:4689 handle_desc+0x37/0x40 [kvm_intel]
            CPU: 0 PID: 6544 Comm: a.out Tainted: G           OE     5.3.0-rc4+ #4
            RIP: 0010:handle_desc+0x37/0x40 [kvm_intel]
            Call Trace:
             vmx_handle_exit+0xbe/0x6b0 [kvm_intel]
             vcpu_enter_guest+0x4dc/0x18d0 [kvm]
             kvm_arch_vcpu_ioctl_run+0x407/0x660 [kvm]
             kvm_vcpu_ioctl+0x3ad/0x690 [kvm]
             do_vfs_ioctl+0xa2/0x690
             ksys_ioctl+0x6d/0x80
             __x64_sys_ioctl+0x1a/0x20
             do_syscall_64+0x74/0x720
             entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    When CR4.UMIP is set, guest should have UMIP cpuid flag. Current
    kvm set_sregs function doesn't have such check when userspace inputs
    sregs values. SECONDARY_EXEC_DESC is enabled on writes to CR4.UMIP
    in vmx_set_cr4 though guest doesn't have UMIP cpuid flag. The testcast
    triggers handle_desc warning when executing ltr instruction since
    guest architectural CR4 doesn't set UMIP. This patch fixes it by
    adding valid CR4 and CPUID combination checking in __set_sregs.
    
    syzkaller source: https://syzkaller.appspot.com/x/repro.c?x=138efb99600000
    
    Reported-by: syzbot+0f1819555fbdce992df9@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1344c6c4054f64ce35ac48c357ef1b931aaeac2
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Aug 27 11:35:40 2019 +1000

    KVM: PPC: Book3S HV: Don't lose pending doorbell request on migration on P9
    
    commit ff42df49e75f053a8a6b4c2533100cdcc23afe69 upstream.
    
    On POWER9, when userspace reads the value of the DPDES register on a
    vCPU, it is possible for 0 to be returned although there is a doorbell
    interrupt pending for the vCPU.  This can lead to a doorbell interrupt
    being lost across migration.  If the guest kernel uses doorbell
    interrupts for IPIs, then it could malfunction because of the lost
    interrupt.
    
    This happens because a newly-generated doorbell interrupt is signalled
    by setting vcpu->arch.doorbell_request to 1; the DPDES value in
    vcpu->arch.vcore->dpdes is not updated, because it can only be updated
    when holding the vcpu mutex, in order to avoid races.
    
    To fix this, we OR in vcpu->arch.doorbell_request when reading the
    DPDES value.
    
    Cc: stable@vger.kernel.org # v4.13+
    Fixes: 579006944e0d ("KVM: PPC: Book3S HV: Virtualize doorbell facility on POWER9")
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6163ef31330bd7ad9345a40781c154f6fca50bf
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Aug 27 11:31:37 2019 +1000

    KVM: PPC: Book3S HV: Check for MMU ready on piggybacked virtual cores
    
    commit d28eafc5a64045c78136162af9d4ba42f8230080 upstream.
    
    When we are running multiple vcores on the same physical core, they
    could be from different VMs and so it is possible that one of the
    VMs could have its arch.mmu_ready flag cleared (for example by a
    concurrent HPT resize) when we go to run it on a physical core.
    We currently check the arch.mmu_ready flag for the primary vcore
    but not the flags for the other vcores that will be run alongside
    it.  This adds that check, and also a check when we select the
    secondary vcores from the preempted vcores list.
    
    Cc: stable@vger.kernel.org # v4.14+
    Fixes: 38c53af85306 ("KVM: PPC: Book3S HV: Fix exclusion between HPT resizing and other HPT updates")
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 815fb3292e50b5d961efb93eaf1220586fa8d46f
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Aug 13 20:03:49 2019 +1000

    KVM: PPC: Book3S HV: Fix race in re-enabling XIVE escalation interrupts
    
    commit 959c5d5134786b4988b6fdd08e444aa67d1667ed upstream.
    
    Escalation interrupts are interrupts sent to the host by the XIVE
    hardware when it has an interrupt to deliver to a guest VCPU but that
    VCPU is not running anywhere in the system.  Hence we disable the
    escalation interrupt for the VCPU being run when we enter the guest
    and re-enable it when the guest does an H_CEDE hypercall indicating
    it is idle.
    
    It is possible that an escalation interrupt gets generated just as we
    are entering the guest.  In that case the escalation interrupt may be
    using a queue entry in one of the interrupt queues, and that queue
    entry may not have been processed when the guest exits with an H_CEDE.
    The existing entry code detects this situation and does not clear the
    vcpu->arch.xive_esc_on flag as an indication that there is a pending
    queue entry (if the queue entry gets processed, xive_esc_irq() will
    clear the flag).  There is a comment in the code saying that if the
    flag is still set on H_CEDE, we have to abort the cede rather than
    re-enabling the escalation interrupt, lest we end up with two
    occurrences of the escalation interrupt in the interrupt queue.
    
    However, the exit code doesn't do that; it aborts the cede in the sense
    that vcpu->arch.ceded gets cleared, but it still enables the escalation
    interrupt by setting the source's PQ bits to 00.  Instead we need to
    set the PQ bits to 10, indicating that an interrupt has been triggered.
    We also need to avoid setting vcpu->arch.xive_esc_on in this case
    (i.e. vcpu->arch.xive_esc_on seen to be set on H_CEDE) because
    xive_esc_irq() will run at some point and clear it, and if we race with
    that we may end up with an incorrect result (i.e. xive_esc_on set when
    the escalation interrupt has just been handled).
    
    It is extremely unlikely that having two queue entries would cause
    observable problems; theoretically it could cause queue overflow, but
    the CPU would have to have thousands of interrupts targetted to it for
    that to be possible.  However, this fix will also make it possible to
    determine accurately whether there is an unhandled escalation
    interrupt in the queue, which will be needed by the following patch.
    
    Fixes: 9b9b13a6d153 ("KVM: PPC: Book3S HV: Keep XIVE escalation interrupt masked unless ceded")
    Cc: stable@vger.kernel.org # v4.16+
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190813100349.GD9567@blackberry
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c0546e35a6a95d3646c35a63b785f814ac37341
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Tue Aug 13 20:01:00 2019 +1000

    KVM: PPC: Book3S HV: Don't push XIVE context when not using XIVE device
    
    commit 8d4ba9c931bc384bcc6889a43915aaaf19d3e499 upstream.
    
    At present, when running a guest on POWER9 using HV KVM but not using
    an in-kernel interrupt controller (XICS or XIVE), for example if QEMU
    is run with the kernel_irqchip=off option, the guest entry code goes
    ahead and tries to load the guest context into the XIVE hardware, even
    though no context has been set up.
    
    To fix this, we check that the "CAM word" is non-zero before pushing
    it to the hardware.  The CAM word is initialized to a non-zero value
    in kvmppc_xive_connect_vcpu() and kvmppc_xive_native_connect_vcpu(),
    and is now cleared in kvmppc_xive_{,native_}cleanup_vcpu.
    
    Fixes: 5af50993850a ("KVM: PPC: Book3S HV: Native usage of the XIVE interrupt controller")
    Cc: stable@vger.kernel.org # v4.12+
    Reported-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190813100100.GC9567@blackberry
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df8c40ea49b1849f7f4e3ff9628a69f512c47571
Author: Cédric Le Goater <clg@kaod.org>
Date:   Tue Aug 6 19:25:38 2019 +0200

    KVM: PPC: Book3S HV: XIVE: Free escalation interrupts before disabling the VP
    
    commit 237aed48c642328ff0ab19b63423634340224a06 upstream.
    
    When a vCPU is brought done, the XIVE VP (Virtual Processor) is first
    disabled and then the event notification queues are freed. When freeing
    the queues, we check for possible escalation interrupts and free them
    also.
    
    But when a XIVE VP is disabled, the underlying XIVE ENDs also are
    disabled in OPAL. When an END (Event Notification Descriptor) is
    disabled, its ESB pages (ESn and ESe) are disabled and loads return all
    1s. Which means that any access on the ESB page of the escalation
    interrupt will return invalid values.
    
    When an interrupt is freed, the shutdown handler computes a 'saved_p'
    field from the value returned by a load in xive_do_source_set_mask().
    This value is incorrect for escalation interrupts for the reason
    described above.
    
    This has no impact on Linux/KVM today because we don't make use of it
    but we will introduce in future changes a xive_get_irqchip_state()
    handler. This handler will use the 'saved_p' field to return the state
    of an interrupt and 'saved_p' being incorrect, softlockup will occur.
    
    Fix the vCPU cleanup sequence by first freeing the escalation interrupts
    if any, then disable the XIVE VP and last free the queues.
    
    Fixes: 90c73795afa2 ("KVM: PPC: Book3S HV: Add a new KVM device for the XIVE native exploitation mode")
    Fixes: 5af50993850a ("KVM: PPC: Book3S HV: Native usage of the XIVE interrupt controller")
    Cc: stable@vger.kernel.org # v4.12+
    Signed-off-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190806172538.5087-1-clg@kaod.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 673a0842b66487ff04d11cd92464feec7b27ccfe
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Mon Aug 26 16:21:21 2019 +1000

    KVM: PPC: Book3S: Enable XIVE native capability only if OPAL has required functions
    
    commit 2ad7a27deaf6d78545d97ab80874584f6990360e upstream.
    
    There are some POWER9 machines where the OPAL firmware does not support
    the OPAL_XIVE_GET_QUEUE_STATE and OPAL_XIVE_SET_QUEUE_STATE calls.
    The impact of this is that a guest using XIVE natively will not be able
    to be migrated successfully.  On the source side, the get_attr operation
    on the KVM native device for the KVM_DEV_XIVE_GRP_EQ_CONFIG attribute
    will fail; on the destination side, the set_attr operation for the same
    attribute will fail.
    
    This adds tests for the existence of the OPAL get/set queue state
    functions, and if they are not supported, the XIVE-native KVM device
    is not created and the KVM_CAP_PPC_IRQ_XIVE capability returns false.
    Userspace can then either provide a software emulation of XIVE, or
    else tell the guest that it does not have a XIVE controller available
    to it.
    
    Cc: stable@vger.kernel.org # v5.2+
    Fixes: 3fab2d10588e ("KVM: PPC: Book3S HV: XIVE: Activate XIVE exploitation mode")
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05c89fa090544670989d2a11877cfaba3470794d
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Wed Oct 2 14:24:47 2019 +0200

    KVM: s390: fix __insn32_query() inline assembly
    
    commit b1c41ac3ce569b04644bb1e3fd28926604637da3 upstream.
    
    The inline assembly constraints of __insn32_query() tell the compiler
    that only the first byte of "query" is being written to. Intended was
    probably that 32 bytes are written to.
    
    Fix and simplify the code and just use a "memory" clobber.
    
    Fixes: d668139718a9 ("KVM: s390: provide query function for instructions returning 32 byte")
    Cc: stable@vger.kernel.org # v5.2+
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9efcfd272f9ed5e986fbf06f00f8541e4d7c10f
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Tue Oct 1 17:34:39 2019 +0200

    Revert "s390/dasd: Add discard support for ESE volumes"
    
    commit 964ce509e2ded52c1a61ad86044cc4d70abd9eb8 upstream.
    
    This reverts commit 7e64db1597fe114b83fe17d0ba96c6aa5fca419a.
    
    The thin provisioning feature introduces an IOCTL and the discard support
    to allow userspace tools and filesystems to release unused and previously
    allocated space respectively.
    
    During some internal performance improvements and further tests, the
    release of allocated space revealed some issues that may lead to data
    corruption in some configurations when filesystems are mounted with
    discard support enabled.
    
    While we're working on a fix and trying to clarify the situation,
    this commit reverts the discard support for ESE volumes to prevent
    potential data corruption.
    
    Cc: <stable@vger.kernel.org> # 5.3
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89489ba07f85187aef4cd30ffdb8c4fca828f7f0
Author: Jan Höppner <hoeppner@linux.ibm.com>
Date:   Tue Oct 1 17:34:38 2019 +0200

    s390/dasd: Fix error handling during online processing
    
    commit dd45483981ac62f432e073fea6e5e11200b9070d upstream.
    
    It is possible that the CCW commands for reading volume and extent pool
    information are not supported, either by the storage server (for
    dedicated DASDs) or by z/VM (for virtual devices, such as MDISKs).
    
    As a command reject will occur in such a case, the current error
    handling leads to a failing online processing and thus the DASD can't be
    used at all.
    
    Since the data being read is not essential for an fully operational
    DASD, the error handling can be removed. Information about the failing
    command is sent to the s390dbf debug feature.
    
    Fixes: c729696bcf8b ("s390/dasd: Recognise data for ESE volumes")
    Cc: <stable@vger.kernel.org> # 5.3
    Reported-by: Frank Heimes <frank.heimes@canonical.com>
    Signed-off-by: Jan Höppner <hoeppner@linux.ibm.com>
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c8c42c1cdd12260ae2f06bbd105148c8a5c2ebe
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Thu Sep 19 15:55:17 2019 +0200

    s390/cio: exclude subchannels with no parent from pseudo check
    
    commit ab5758848039de9a4b249d46e4ab591197eebaf2 upstream.
    
    ccw console is created early in start_kernel and used before css is
    initialized or ccw console subchannel is registered. Until then console
    subchannel does not have a parent. For that reason assume subchannels
    with no parent are not pseudo subchannels. This fixes the following
    kasan finding:
    
    BUG: KASAN: global-out-of-bounds in sch_is_pseudo_sch+0x8e/0x98
    Read of size 8 at addr 00000000000005e8 by task swapper/0/0
    
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.3.0-rc8-07370-g6ac43dd12538 #2
    Hardware name: IBM 2964 NC9 702 (z/VM 6.4.0)
    Call Trace:
    ([<000000000012cd76>] show_stack+0x14e/0x1e0)
     [<0000000001f7fb44>] dump_stack+0x1a4/0x1f8
     [<00000000007d7afc>] print_address_description+0x64/0x3c8
     [<00000000007d75f6>] __kasan_report+0x14e/0x180
     [<00000000018a2986>] sch_is_pseudo_sch+0x8e/0x98
     [<000000000189b950>] cio_enable_subchannel+0x1d0/0x510
     [<00000000018cac7c>] ccw_device_recognition+0x12c/0x188
     [<0000000002ceb1a8>] ccw_device_enable_console+0x138/0x340
     [<0000000002cf1cbe>] con3215_init+0x25e/0x300
     [<0000000002c8770a>] console_init+0x68a/0x9b8
     [<0000000002c6a3d6>] start_kernel+0x4fe/0x728
     [<0000000000100070>] startup_continue+0x70/0xd0
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Sebastian Ott <sebott@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c0671ff7ab10004b02f054369c40cf1b7185fd2
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Tue Sep 17 20:04:04 2019 +0200

    s390/cio: avoid calling strlen on null pointer
    
    commit ea298e6ee8b34b3ed4366be7eb799d0650ebe555 upstream.
    
    Fix the following kasan finding:
    BUG: KASAN: global-out-of-bounds in ccwgroup_create_dev+0x850/0x1140
    Read of size 1 at addr 0000000000000000 by task systemd-udevd.r/561
    
    CPU: 30 PID: 561 Comm: systemd-udevd.r Tainted: G    B
    Hardware name: IBM 3906 M04 704 (LPAR)
    Call Trace:
    ([<0000000231b3db7e>] show_stack+0x14e/0x1a8)
     [<0000000233826410>] dump_stack+0x1d0/0x218
     [<000000023216fac4>] print_address_description+0x64/0x380
     [<000000023216f5a8>] __kasan_report+0x138/0x168
     [<00000002331b8378>] ccwgroup_create_dev+0x850/0x1140
     [<00000002332b618a>] group_store+0x3a/0x50
     [<00000002323ac706>] kernfs_fop_write+0x246/0x3b8
     [<00000002321d409a>] vfs_write+0x132/0x450
     [<00000002321d47da>] ksys_write+0x122/0x208
     [<0000000233877102>] system_call+0x2a6/0x2c8
    
    Triggered by:
    openat(AT_FDCWD, "/sys/bus/ccwgroup/drivers/qeth/group",
                    O_WRONLY|O_CREAT|O_TRUNC|O_CLOEXEC, 0666) = 16
    write(16, "0.0.bd00,0.0.bd01,0.0.bd02", 26) = 26
    
    The problem is that __get_next_id in ccwgroup_create_dev might set "buf"
    buffer pointer to NULL and explicit check for that is required.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Sebastian Ott <sebott@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27990ee7ef08d27cdfb11ad592d81901e24ec255
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Tue Sep 17 22:59:03 2019 +0200

    s390/topology: avoid firing events before kobjs are created
    
    commit f3122a79a1b0a113d3aea748e0ec26f2cb2889de upstream.
    
    arch_update_cpu_topology is first called from:
    kernel_init_freeable->sched_init_smp->sched_init_domains
    
    even before cpus has been registered in:
    kernel_init_freeable->do_one_initcall->s390_smp_init
    
    Do not trigger kobject_uevent change events until cpu devices are
    actually created. Fixes the following kasan findings:
    
    BUG: KASAN: global-out-of-bounds in kobject_uevent_env+0xb40/0xee0
    Read of size 8 at addr 0000000000000020 by task swapper/0/1
    
    BUG: KASAN: global-out-of-bounds in kobject_uevent_env+0xb36/0xee0
    Read of size 8 at addr 0000000000000018 by task swapper/0/1
    
    CPU: 0 PID: 1 Comm: swapper/0 Tainted: G    B
    Hardware name: IBM 3906 M04 704 (LPAR)
    Call Trace:
    ([<0000000143c6db7e>] show_stack+0x14e/0x1a8)
     [<0000000145956498>] dump_stack+0x1d0/0x218
     [<000000014429fb4c>] print_address_description+0x64/0x380
     [<000000014429f630>] __kasan_report+0x138/0x168
     [<0000000145960b96>] kobject_uevent_env+0xb36/0xee0
     [<0000000143c7c47c>] arch_update_cpu_topology+0x104/0x108
     [<0000000143df9e22>] sched_init_domains+0x62/0xe8
     [<000000014644c94a>] sched_init_smp+0x3a/0xc0
     [<0000000146433a20>] kernel_init_freeable+0x558/0x958
     [<000000014599002a>] kernel_init+0x22/0x160
     [<00000001459a71d4>] ret_from_fork+0x28/0x30
     [<00000001459a71dc>] kernel_thread_starter+0x0/0x10
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 052d961280d5423fe5195195289e48e383f4da86
Author: Thomas Huth <thuth@redhat.com>
Date:   Thu Aug 29 14:25:17 2019 +0200

    KVM: s390: Test for bad access register and size at the start of S390_MEM_OP
    
    commit a13b03bbb4575b350b46090af4dfd30e735aaed1 upstream.
    
    If the KVM_S390_MEM_OP ioctl is called with an access register >= 16,
    then there is certainly a bug in the calling userspace application.
    We check for wrong access registers, but only if the vCPU was already
    in the access register mode before (i.e. the SIE block has recorded
    it). The check is also buried somewhere deep in the calling chain (in
    the function ar_translation()), so this is somewhat hard to find.
    
    It's better to always report an error to the userspace in case this
    field is set wrong, and it's safer in the KVM code if we block wrong
    values here early instead of relying on a check somewhere deep down
    the calling chain, so let's add another check to kvm_s390_guest_mem_op()
    directly.
    
    We also should check that the "size" is non-zero here (thanks to Janosch
    Frank for the hint!). If we do not check the size, we could call vmalloc()
    with this 0 value, and this will cause a kernel warning.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Link: https://lkml.kernel.org/r/20190829122517.31042-1-thuth@redhat.com
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b0f2cd95872650801f41c3154ac19be22fc7658
Author: Philipp Rudo <prudo@linux.ibm.com>
Date:   Thu Aug 29 15:38:37 2019 +0200

    s390/sclp: Fix bit checked for has_sipl
    
    commit 4df9a82549cfed5b52da21e7d007b79b2ea1769a upstream.
    
    Fixes: c9896acc7851 ("s390/ipl: Provide has_secure sysfs attribute")
    Cc: stable@vger.kernel.org # 5.2+
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Philipp Rudo <prudo@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab434660e2dc34905be30cab8eb76e545bdf2fbb
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Tue Aug 13 20:11:08 2019 +0200

    s390/process: avoid potential reading of freed stack
    
    commit 8769f610fe6d473e5e8e221709c3ac402037da6c upstream.
    
    With THREAD_INFO_IN_TASK (which is selected on s390) task's stack usage
    is refcounted and should always be protected by get/put when touching
    other task's stack to avoid race conditions with task's destruction code.
    
    Fixes: d5c352cdd022 ("s390: move thread_info into task_struct")
    Cc: stable@vger.kernel.org # v4.10+
    Acked-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
