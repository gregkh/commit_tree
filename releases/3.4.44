commit 306110aeadb661286548437f4e0f0e1323711cf0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue May 7 20:17:26 2013 -0700

    Linux 3.4.44

commit d82f013b8c36f6f4e6ff014aabf408bd483a83d3
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Tue Feb 19 11:51:22 2013 +0100

    mfd: adp5520: Restore mode bits on resume
    
    commit c6cc25fda58da8685ecef3f179adc7b99c8253b2 upstream.
    
    The adp5520 unfortunately also clears the BL_EN bit when the nSTNDBY bit is
    cleared. So we need to make sure to restore it during resume if it was set
    before suspend.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37f8417572877c7c8c58400d2779248f1f7d74ed
Author: Terry Barnaby <terry@beam.ltd.uk>
Date:   Mon Apr 8 12:05:47 2013 -0400

    mmc: atmel-mci: pio hang on block errors
    
    commit bdbc5d0c60f3e9de3eeccf1c1a18bdc11dca62cc upstream.
    
    The driver is doing, by default, multi-block reads. When a block error
    occurs, card/block.c instigates a single block read: "mmcblk0: retrying
    using single block read".  It leaves the sg chain intact and just changes
    the length attribute for the first sg entry and the overall sg_len
    parameter.  When atmci_read_data_pio is called to read the single block
    of data it ignores the sg_len and expects to read more than 512 bytes as
    it sees there are multiple items in the sg list. No more data comes as
    the controller has only been commanded to get one block.
    
    Signed-off-by: Terry Barnaby <terry@beam.ltd.uk>
    Acked-by: Ludovic Desroches <ludovic.desroches@atmel.com>
    Signed-off-by: Chris Ball <cjb@laptop.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 217fd3afce27de54b0b10fc33ce6268c999dbdb4
Author: Philip Rakity <prakity@yahoo.com>
Date:   Thu Apr 4 20:18:11 2013 +0100

    mmc: core: Fix bit width test failing on old eMMC cards
    
    commit 836dc2fe89c968c10cada87e0dfae6626f8f9da3 upstream.
    
    PARTITION_SUPPORT needs to be set before doing the compare on version
    number so the bit width test does not get invalid data.  Before this
    patch, a Sandisk iNAND eMMC card would detect 1-bit width although
    the hardware supports 4-bit.
    
    Only affects old emmc devices - pre 4.4 devices.
    
    Reported-by: Elad Yi <elad.yi@gmail.com>
    Signed-off-by: Philip Rakity <prakity@yahoo.com>
    Signed-off-by: Chris Ball <cjb@laptop.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a70589f1252c355961fb3d566d5074b7b046e0e
Author: Li Fei <fei.li@intel.com>
Date:   Fri Apr 26 20:50:11 2013 +0800

    x86: Eliminate irq_mis_count counted in arch_irq_stat
    
    commit f7b0e1055574ce06ab53391263b4e205bf38daf3 upstream.
    
    With the current implementation, kstat_cpu(cpu).irqs_sum is also
    increased in case of irq_mis_count increment.
    
    So there is no need to count irq_mis_count in arch_irq_stat,
    otherwise irq_mis_count will be counted twice in the sum of
    /proc/stat.
    
    Reported-by: Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    Acked-by: Liu Chuansheng <chuansheng.liu@intel.com>
    Cc: tomoki.sekiyama.qu@hitachi.com
    Cc: joe@perches.com
    Link: http://lkml.kernel.org/r/1366980611.32469.7.camel@fli24-HP-Compaq-8100-Elite-CMT-PC
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b5b30580218eae22609989546bac6e44d0eda6e
Author: Gleb Natapov <gleb@redhat.com>
Date:   Wed Apr 24 13:38:36 2013 +0300

    KVM: X86 emulator: fix source operand decoding for 8bit mov[zs]x instructions
    
    commit 660696d1d16a71e15549ce1bf74953be1592bcd3 upstream.
    
    Source operand for one byte mov[zs]x is decoded incorrectly if it is in
    high byte register. Fix that.
    
    Signed-off-by: Gleb Natapov <gleb@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb878b3019cb0b1d574bd88e30ce00ea6d6814f9
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Mar 13 17:11:59 2013 +0100

    mmc: at91/avr32/atmel-mci: fix DMA-channel leak on module unload
    
    commit 91cf54feecf815bec0b6a8d6d9dbd0e219f2f2cc upstream.
    
    Fix regression introduced by commit 796211b7953 ("mmc: atmel-mci: add
    pdc support and runtime capabilities detection") which removed the need
    for CONFIG_MMC_ATMELMCI_DMA but kept the Kconfig-entry as well as the
    compile guards around dma_release_channel() in remove(). Consequently,
    DMA is always enabled (if supported), but the DMA-channel is not
    released on module unload unless the DMA-config option is selected.
    
    Remove the no longer used CONFIG_MMC_ATMELMCI_DMA option completely.
    
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Acked-by: Ludovic Desroches <ludovic.desroches@atmel.com>
    Signed-off-by: Chris Ball <cjb@laptop.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 165628d13556a2ea833b3e13d706a252491dc1fc
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sun Apr 21 20:32:03 2013 -0400

    ext4: fix Kconfig documentation for CONFIG_EXT4_DEBUG
    
    commit 7f3e3c7cfcec148ccca9c0dd2dbfd7b00b7ac10f upstream.
    
    Fox the Kconfig documentation for CONFIG_EXT4_DEBUG to match the
    change made by commit a0b30c1229: ext4: use module parameters instead
    of debugfs for mballoc_debug
    
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e30abf7548990e6db146221664fc10c2a90ead6
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sun Apr 21 20:19:43 2013 -0400

    ext4: fix online resizing for ext3-compat file systems
    
    commit c5c72d814cf0f650010337c73638b25e6d14d2d4 upstream.
    
    Commit fb0a387dcdc restricts block allocations for indirect-mapped
    files to block groups less than s_blockfile_groups.  However, the
    online resizing code wasn't setting s_blockfile_groups, so the newly
    added block groups were not available for non-extent mapped files.
    
    Reported-by: Eric Sandeen <sandeen@redhat.com>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5b36426ea902c0000699024b9de3ace0ab48f39
Author: Dmitry Monakhov <dmonakhov@openvz.org>
Date:   Wed Apr 3 22:08:52 2013 -0400

    ext4: fix journal callback list traversal
    
    commit 5d3ee20855e28169d711b394857ee608a5023094 upstream.
    
    It is incorrect to use list_for_each_entry_safe() for journal callback
    traversial because ->next may be removed by other task:
    ->ext4_mb_free_metadata()
      ->ext4_mb_free_metadata()
        ->ext4_journal_callback_del()
    
    This results in the following issue:
    
    WARNING: at lib/list_debug.c:62 __list_del_entry+0x1c0/0x250()
    Hardware name:
    list_del corruption. prev->next should be ffff88019a4ec198, but was 6b6b6b6b6b6b6b6b
    Modules linked in: cpufreq_ondemand acpi_cpufreq freq_table mperf coretemp kvm_intel kvm crc32c_intel ghash_clmulni_intel microcode sg xhci_hcd button sd_mod crc_t10dif aesni_intel ablk_helper cryptd lrw aes_x86_64 xts gf128mul ahci libahci pata_acpi ata_generic dm_mirror dm_region_hash dm_log dm_mod
    Pid: 16400, comm: jbd2/dm-1-8 Tainted: G        W    3.8.0-rc3+ #107
    Call Trace:
     [<ffffffff8106fb0d>] warn_slowpath_common+0xad/0xf0
     [<ffffffff8106fc06>] warn_slowpath_fmt+0x46/0x50
     [<ffffffff813637e9>] ? ext4_journal_commit_callback+0x99/0xc0
     [<ffffffff8148cae0>] __list_del_entry+0x1c0/0x250
     [<ffffffff813637bf>] ext4_journal_commit_callback+0x6f/0xc0
     [<ffffffff813ca336>] jbd2_journal_commit_transaction+0x23a6/0x2570
     [<ffffffff8108aa42>] ? try_to_del_timer_sync+0x82/0xa0
     [<ffffffff8108b491>] ? del_timer_sync+0x91/0x1e0
     [<ffffffff813d3ecf>] kjournald2+0x19f/0x6a0
     [<ffffffff810ad630>] ? wake_up_bit+0x40/0x40
     [<ffffffff813d3d30>] ? bit_spin_lock+0x80/0x80
     [<ffffffff810ac6be>] kthread+0x10e/0x120
     [<ffffffff810ac5b0>] ? __init_kthread_worker+0x70/0x70
     [<ffffffff818ff6ac>] ret_from_fork+0x7c/0xb0
     [<ffffffff810ac5b0>] ? __init_kthread_worker+0x70/0x70
    
    This patch fix the issue as follows:
    - ext4_journal_commit_callback() make list truly traversial safe
      simply by always starting from list_head
    - fix race between two ext4_journal_callback_del() and
      ext4_journal_callback_try_del()
    
    Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 213116e53f9fde7896be9958e73d4e59bfea980b
Author: Dmitry Monakhov <dmonakhov@openvz.org>
Date:   Wed Apr 3 22:06:52 2013 -0400

    jbd2: fix race between jbd2_journal_remove_checkpoint and ->j_commit_callback
    
    commit 794446c6946513c684d448205fbd76fa35f38b72 upstream.
    
    The following race is possible:
    
    [kjournald2]                              other_task
    jbd2_journal_commit_transaction()
      j_state = T_FINISHED;
      spin_unlock(&journal->j_list_lock);
                                             ->jbd2_journal_remove_checkpoint()
                                               ->jbd2_journal_free_transaction();
                                                 ->kmem_cache_free(transaction)
      ->j_commit_callback(journal, transaction);
        -> USE_AFTER_FREE
    
    WARNING: at lib/list_debug.c:62 __list_del_entry+0x1c0/0x250()
    Hardware name:
    list_del corruption. prev->next should be ffff88019a4ec198, but was 6b6b6b6b6b6b6b6b
    Modules linked in: cpufreq_ondemand acpi_cpufreq freq_table mperf coretemp kvm_intel kvm crc32c_intel ghash_clmulni_intel microcode sg xhci_hcd button sd_mod crc_t10dif aesni_intel ablk_helper cryptd lrw aes_x86_64 xts gf128mul ahci libahci pata_acpi ata_generic dm_mirror dm_region_hash dm_log dm_mod
    Pid: 16400, comm: jbd2/dm-1-8 Tainted: G        W    3.8.0-rc3+ #107
    Call Trace:
     [<ffffffff8106fb0d>] warn_slowpath_common+0xad/0xf0
     [<ffffffff8106fc06>] warn_slowpath_fmt+0x46/0x50
     [<ffffffff813637e9>] ? ext4_journal_commit_callback+0x99/0xc0
     [<ffffffff8148cae0>] __list_del_entry+0x1c0/0x250
     [<ffffffff813637bf>] ext4_journal_commit_callback+0x6f/0xc0
     [<ffffffff813ca336>] jbd2_journal_commit_transaction+0x23a6/0x2570
     [<ffffffff8108aa42>] ? try_to_del_timer_sync+0x82/0xa0
     [<ffffffff8108b491>] ? del_timer_sync+0x91/0x1e0
     [<ffffffff813d3ecf>] kjournald2+0x19f/0x6a0
     [<ffffffff810ad630>] ? wake_up_bit+0x40/0x40
     [<ffffffff813d3d30>] ? bit_spin_lock+0x80/0x80
     [<ffffffff810ac6be>] kthread+0x10e/0x120
     [<ffffffff810ac5b0>] ? __init_kthread_worker+0x70/0x70
     [<ffffffff818ff6ac>] ret_from_fork+0x7c/0xb0
     [<ffffffff810ac5b0>] ? __init_kthread_worker+0x70/0x70
    
    In order to demonstrace this issue one should mount ext4 with mount -o
    discard option on SSD disk.  This makes callback longer and race
    window becomes wider.
    
    In order to fix this we should mark transaction as finished only after
    callbacks have completed
    
    Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e99e7562943ded071fbd77066b1e4aee1e3815c2
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Sat Mar 2 07:51:42 2013 +0000

    ixgbe: fix EICR write in ixgbe_msix_other
    
    commit d87d830720a1446403ed38bfc2da268be0d356d1 upstream.
    
    Previously, the ixgbe_msix_other was writing the full 32bits of the set
    interrupts, instead of only the ones which the ixgbe_msix_other is
    handling. This resulted in a loss of performance when the X540's PPS feature is
    enabled due to sometimes clearing queue interrupts which resulted in the driver
    not getting the interrupt for cleaning the q_vector rings often enough. The fix
    is to simply mask the lower 16bits off so that this handler does not write them
    in the EICR, which causes them to remain high and be properly handled by the
    clean_rings interrupt routine as normal.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d885f21da64b75066f42246da6968e3769b951
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd upstream.
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 131e3afd38ede147ad56179d352a9d7b8b3d966f
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Apr 16 14:32:26 2013 +0200

    wireless: regulatory: fix channel disabling race condition
    
    commit 990de49f74e772b6db5208457b7aa712a5f4db86 upstream.
    
    When a full scan 2.4 and 5 GHz scan is scheduled, but then the 2.4 GHz
    part of the scan disables a 5.2 GHz channel due to, e.g. receiving
    country or frequency information, that 5.2 GHz channel might already
    be in the list of channels to scan next. Then, when the driver checks
    if it should do a passive scan, that will return false and attempt an
    active scan. This is not only wrong but can also lead to the iwlwifi
    device firmware crashing since it checks regulatory as well.
    
    Fix this by not setting the channel flags to just disabled but rather
    OR'ing in the disabled flag. That way, even if the race happens, the
    channel will be scanned passively which is still (mostly) correct.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2111a77044c72a3eeda88415e39d094752bbf25a
Author: Bryan Schumaker <bjschuma@netapp.com>
Date:   Fri Apr 19 16:09:38 2013 -0400

    nfsd: Decode and send 64bit time values
    
    commit bf8d909705e9d9bac31d9b8eac6734d2b51332a7 upstream.
    
    The seconds field of an nfstime4 structure is 64bit, but we are assuming
    that the first 32bits are zero-filled.  So if the client tries to set
    atime to a value before the epoch (touch -t 196001010101), then the
    server will save the wrong value on disk.
    
    Signed-off-by: Bryan Schumaker <bjschuma@netapp.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f71ce17ff829f8bf9771f1c7b08daaddce40594f
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Mar 28 20:37:14 2013 -0400

    nfsd4: don't close read-write opens too soon
    
    commit 0c7c3e67ab91ec6caa44bdf1fc89a48012ceb0c5 upstream.
    
    Don't actually close any opens until we don't need them at all.
    
    This means being left with write access when it's not really necessary,
    but that's better than putting a file that might still have posix locks
    held on it, as we have been.
    
    Reported-by: Toralf Förster <toralf.foerster@gmx.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed9a34c5fc970e8371eb3a599db6ffc89bd56d9e
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Mon Apr 1 15:34:05 2013 -0400

    NFSv4: Handle NFS4ERR_DELAY and NFS4ERR_GRACE in nfs4_open_delegation_recall
    
    commit 8b6cc4d6f841d31f72fe7478453759166d366274 upstream.
    
    A server shouldn't normally return NFS4ERR_GRACE if the client holds a
    delegation, since no conflicting lock reclaims can be granted, however
    the spec does not require the server to grant the open in this
    instance
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cd670f0ff34d314b88b8b7cc1c1b45617f08a78
Author: NeilBrown <neilb@suse.de>
Date:   Wed Apr 24 11:42:44 2013 +1000

    md: bad block list should default to disabled.
    
    commit 486adf72ccc0c235754923d47a2270c5dcb0c98b upstream.
    
    Maintenance of a bad-block-list currently defaults to 'enabled'
    and is then disabled when it cannot be supported.
    This is backwards and causes problem for dm-raid which didn't know
    to disable it.
    
    So fix the defaults, and only enabled for v1.x metadata which
    explicitly has bad blocks enabled.
    
    The problem with dm-raid has been present since badblock support was
    added in v3.1, so this patch is suitable for any -stable from 3.1
    onwards.
    
    Reported-by: Jonathan Brassow <jbrassow@redhat.com>
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02d1a16d6d89faa6f78625ea17be9f0b995e44ab
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Sun Apr 21 18:01:06 2013 -0400

    LOCKD: Ensure that nlmclnt_block resets block->b_status after a server reboot
    
    commit 1dfd89af8697a299e7982ae740d4695ecd917eef upstream.
    
    After a server reboot, the reclaimer thread will recover all the existing
    locks. For locks that are blocked, however, it will change the value
    of block->b_status to nlm_lck_denied_grace_period in order to signal that
    they need to wake up and resend the original blocking lock request.
    
    Due to a bug, however, the block->b_status never gets reset after the
    blocked locks have been woken up, and so the process goes into an
    infinite loop of resends until the blocked lock is satisfied.
    
    Reported-by: Marc Eshel <eshel@us.ibm.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b51c8db5eb83b14921e6017aa9c67b82f80260b1
Author: Greg Thelen <gthelen@google.com>
Date:   Tue Apr 30 15:26:48 2013 -0700

    fs/dcache.c: add cond_resched() to shrink_dcache_parent()
    
    commit 421348f1ca0bf17769dee0aed4d991845ae0536d upstream.
    
    Call cond_resched() in shrink_dcache_parent() to maintain interactivity.
    
    Before this patch:
    
            void shrink_dcache_parent(struct dentry * parent)
            {
                    while ((found = select_parent(parent, &dispose)) != 0)
                            shrink_dentry_list(&dispose);
            }
    
    select_parent() populates the dispose list with dentries which
    shrink_dentry_list() then deletes.  select_parent() carefully uses
    need_resched() to avoid doing too much work at once.  But neither
    shrink_dcache_parent() nor its called functions call cond_resched().  So
    once need_resched() is set select_parent() will return single dentry
    dispose list which is then deleted by shrink_dentry_list().  This is
    inefficient when there are a lot of dentry to process.  This can cause
    softlockup and hurts interactivity on non preemptable kernels.
    
    This change adds cond_resched() in shrink_dcache_parent().  The benefit
    of this is that need_resched() is quickly cleared so that future calls
    to select_parent() are able to efficiently return a big batch of dentry.
    
    These additional cond_resched() do not seem to impact performance, at
    least for the workload below.
    
    Here is a program which can cause soft lockup if other system activity
    sets need_resched().
    
            int main()
            {
                    struct rlimit rlim;
                    int i;
                    int f[100000];
                    char buf[20];
                    struct timeval t1, t2;
                    double diff;
    
                    /* cleanup past run */
                    system("rm -rf x");
    
                    /* boost nfile rlimit */
                    rlim.rlim_cur = 200000;
                    rlim.rlim_max = 200000;
                    if (setrlimit(RLIMIT_NOFILE, &rlim))
                            err(1, "setrlimit");
    
                    /* make directory for files */
                    if (mkdir("x", 0700))
                            err(1, "mkdir");
    
                    if (gettimeofday(&t1, NULL))
                            err(1, "gettimeofday");
    
                    /* populate directory with open files */
                    for (i = 0; i < 100000; i++) {
                            snprintf(buf, sizeof(buf), "x/%d", i);
                            f[i] = open(buf, O_CREAT);
                            if (f[i] == -1)
                                    err(1, "open");
                    }
    
                    /* close some of the files */
                    for (i = 0; i < 85000; i++)
                            close(f[i]);
    
                    /* unlink all files, even open ones */
                    system("rm -rf x");
    
                    if (gettimeofday(&t2, NULL))
                            err(1, "gettimeofday");
    
                    diff = (((double)t2.tv_sec * 1000000 + t2.tv_usec) -
                            ((double)t1.tv_sec * 1000000 + t1.tv_usec));
    
                    printf("done: %g elapsed\n", diff/1e6);
                    return 0;
            }
    
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 357093a8b82c10e6fff37d3c772ccc0e3b0549c4
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 11:45:53 2013 +0200

    clockevents: Set dummy handler on CPU_DEAD shutdown
    
    commit 6f7a05d7018de222e40ca003721037a530979974 upstream.
    
    Vitaliy reported that a per cpu HPET timer interrupt crashes the
    system during hibernation. What happens is that the per cpu HPET timer
    gets shut down when the nonboot cpus are stopped. When the nonboot
    cpus are onlined again the HPET code sets up the MSI interrupt which
    fires before the clock event device is registered. The event handler
    is still set to hrtimer_interrupt, which then crashes the machine due
    to highres mode not being active.
    
    See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=700333
    
    There is no real good way to avoid that in the HPET code. The HPET
    code alrady has a mechanism to detect spurious interrupts when event
    handler == NULL for a similar reason.
    
    We can handle that in the clockevent/tick layer and replace the
    previous functional handler with a dummy handler like we do in
    tick_setup_new_device().
    
    The original clockevents code did this in clockevents_exchange_device(),
    but that got removed by commit 7c1e76897 (clockevents: prevent
    clockevent event_handler ending up handler_noop) which forgot to fix
    it up in tick_shutdown(). Same issue with the broadcast device.
    
    Reported-by: Vitaliy Fillipov <vitalif@yourcmc.ru>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Cc: 700333@bugs.debian.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97630ecdbda8138baf35a66b6e59dee940da05e1
Author: Li Zefan <lizefan@huawei.com>
Date:   Tue Mar 12 15:36:00 2013 -0700

    cgroup: fix an off-by-one bug which may trigger BUG_ON()
    
    commit 3ac1707a13a3da9cfc8f242a15b2fae6df2c5f88 upstream.
    
    The 3rd parameter of flex_array_prealloc() is the number of elements,
    not the index of the last element.
    
    The effect of the bug is, when opening cgroup.procs, a flex array will
    be allocated and all elements of the array is allocated with
    GFP_KERNEL flag, but the last one is GFP_ATOMIC, and if we fail to
    allocate memory for it, it'll trigger a BUG_ON().
    
    Signed-off-by: Li Zefan <lizefan@huawei.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b593b4dc6442a5fd8a569fdbcc8cb5fa2609d1b1
Author: Derek Basehore <dbasehore@chromium.org>
Date:   Mon Apr 29 16:20:23 2013 -0700

    drivers/rtc/rtc-cmos.c: don't disable hpet emulation on suspend
    
    commit e005715efaf674660ae59af83b13822567e3a758 upstream.
    
    There's a bug where rtc alarms are ignored after the rtc cmos suspends
    but before the system finishes suspend.  Since hpet emulation is
    disabled and it still handles the interrupts, a wake event is never
    registered which is done from the rtc layer.
    
    This patch reverts commit d1b2efa83fbf ("rtc: disable hpet emulation on
    suspend") which disabled hpet emulation.  To fix the problem mentioned
    in that commit, hpet_rtc_timer_init() is called directly on resume.
    
    Signed-off-by: Derek Basehore <dbasehore@chromium.org>
    Cc: Maxim Levitsky <maximlevitsky@gmail.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 194d30b3996940a012ed8265f3969f1f75ff7ec5
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Mon Apr 8 08:47:15 2013 -0400

    hrtimer: Add expiry time overflow check in hrtimer_interrupt
    
    commit 8f294b5a139ee4b75e890ad5b443c93d1e558a8b upstream.
    
    The settimeofday01 test in the LTP testsuite effectively does
    
            gettimeofday(current time);
            settimeofday(Jan 1, 1970 + 100 seconds);
            settimeofday(current time);
    
    This test causes a stack trace to be displayed on the console during the
    setting of timeofday to Jan 1, 1970 + 100 seconds:
    
    [  131.066751] ------------[ cut here ]------------
    [  131.096448] WARNING: at kernel/time/clockevents.c:209 clockevents_program_event+0x135/0x140()
    [  131.104935] Hardware name: Dinar
    [  131.108150] Modules linked in: sg nfsv3 nfs_acl nfsv4 auth_rpcgss nfs dns_resolver fscache lockd sunrpc nf_conntrack_netbios_ns nf_conntrack_broadcast ipt_MASQUERADE ip6table_mangle ip6t_REJECT nf_conntrack_ipv6 nf_defrag_ipv6 iptable_nat nf_nat_ipv4 nf_nat iptable_mangle ipt_REJECT nf_conntrack_ipv4 nf_defrag_ipv4 xt_conntrack nf_conntrack ebtable_filter ebtables ip6table_filter ip6_tables iptable_filter ip_tables kvm_amd kvm sp5100_tco bnx2 i2c_piix4 crc32c_intel k10temp fam15h_power ghash_clmulni_intel amd64_edac_mod pcspkr serio_raw edac_mce_amd edac_core microcode xfs libcrc32c sr_mod sd_mod cdrom ata_generic crc_t10dif pata_acpi radeon i2c_algo_bit drm_kms_helper ttm drm ahci pata_atiixp libahci libata usb_storage i2c_core dm_mirror dm_region_hash dm_log dm_mod
    [  131.176784] Pid: 0, comm: swapper/28 Not tainted 3.8.0+ #6
    [  131.182248] Call Trace:
    [  131.184684]  <IRQ>  [<ffffffff810612af>] warn_slowpath_common+0x7f/0xc0
    [  131.191312]  [<ffffffff8106130a>] warn_slowpath_null+0x1a/0x20
    [  131.197131]  [<ffffffff810b9fd5>] clockevents_program_event+0x135/0x140
    [  131.203721]  [<ffffffff810bb584>] tick_program_event+0x24/0x30
    [  131.209534]  [<ffffffff81089ab1>] hrtimer_interrupt+0x131/0x230
    [  131.215437]  [<ffffffff814b9600>] ? cpufreq_p4_target+0x130/0x130
    [  131.221509]  [<ffffffff81619119>] smp_apic_timer_interrupt+0x69/0x99
    [  131.227839]  [<ffffffff8161805d>] apic_timer_interrupt+0x6d/0x80
    [  131.233816]  <EOI>  [<ffffffff81099745>] ? sched_clock_cpu+0xc5/0x120
    [  131.240267]  [<ffffffff814b9ff0>] ? cpuidle_wrap_enter+0x50/0xa0
    [  131.246252]  [<ffffffff814b9fe9>] ? cpuidle_wrap_enter+0x49/0xa0
    [  131.252238]  [<ffffffff814ba050>] cpuidle_enter_tk+0x10/0x20
    [  131.257877]  [<ffffffff814b9c89>] cpuidle_idle_call+0xa9/0x260
    [  131.263692]  [<ffffffff8101c42f>] cpu_idle+0xaf/0x120
    [  131.268727]  [<ffffffff815f8971>] start_secondary+0x255/0x257
    [  131.274449] ---[ end trace 1151a50552231615 ]---
    
    When we change the system time to a low value like this, the value of
    timekeeper->offs_real will be a negative value.
    
    It seems that the WARN occurs because an hrtimer has been started in the time
    between the releasing of the timekeeper lock and the IPI call (via a call to
    on_each_cpu) in clock_was_set() in the do_settimeofday() code.  The end result
    is that a REALTIME_CLOCK timer has been added with softexpires = expires =
    KTIME_MAX.  The hrtimer_interrupt() fires/is called and the loop at
    kernel/hrtimer.c:1289 is executed.  In this loop the code subtracts the
    clock base's offset (which was set to timekeeper->offs_real in
    do_settimeofday()) from the current hrtimer_cpu_base->expiry value (which
    was KTIME_MAX):
    
            KTIME_MAX - (a negative value) = overflow
    
    A simple check for an overflow can resolve this problem.  Using KTIME_MAX
    instead of the overflow value will result in the hrtimer function being run,
    and the reprogramming of the timer after that.
    
    Reviewed-by: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    [jstultz: Tweaked commit subject]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86a640faa8585b60b2f2f78dd9769e2cc939208f
Author: David Engraf <david.engraf@sysgo.com>
Date:   Tue Mar 19 13:29:55 2013 +0100

    hrtimer: Fix ktime_add_ns() overflow on 32bit architectures
    
    commit 51fd36f3fad8447c487137ae26b9d0b3ce77bb25 upstream.
    
    One can trigger an overflow when using ktime_add_ns() on a 32bit
    architecture not supporting CONFIG_KTIME_SCALAR.
    
    When passing a very high value for u64 nsec, e.g. 7881299347898368000
    the do_div() function converts this value to seconds (7881299347) which
    is still to high to pass to the ktime_set() function as long. The result
    in is a negative value.
    
    The problem on my system occurs in the tick-sched.c,
    tick_nohz_stop_sched_tick() when time_delta is set to
    timekeeping_max_deferment(). The check for time_delta < KTIME_MAX is
    valid, thus ktime_add_ns() is called with a too large value resulting in
    a negative expire value. This leads to an endless loop in the ticker code:
    
    time_delta: 7881299347898368000
    expires = ktime_add_ns(last_update, time_delta)
    expires: negative value
    
    This fix caps the value to KTIME_MAX.
    
    This error doesn't occurs on 64bit or architectures supporting
    CONFIG_KTIME_SCALAR (e.g. ARM, x86-32).
    
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    [jstultz: Minor tweaks to commit message & header]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a91a9f1e121a879f742f4c1718d58ba94e046dee
Author: Dylan Reid <dgreid@chromium.org>
Date:   Tue Apr 16 20:02:34 2013 -0700

    ASoC: max98088: Fix logging of hardware revision.
    
    commit 98682063549bedd6e2d2b6b7222f150c6fbce68c upstream.
    
    The hardware revision of the codec is based at 0x40.  Subtract that
    before convering to ASCII.  The same as it is done for 98095.
    
    Signed-off-by: Dylan Reid <dgreid@chromium.org>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a70ddb052fe8b95e31d76a940e48838bc6dc991
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Apr 25 07:38:15 2013 +0200

    ALSA: usb-audio: Fix autopm error during probing
    
    commit 60af3d037eb8c670dcce31401501d1271e7c5d95 upstream.
    
    We've got strange errors in get_ctl_value() in mixer.c during
    probing, e.g. on Hercules RMX2 DJ Controller:
    
      ALSA mixer.c:352 cannot get ctl value: req = 0x83, wValue = 0x201, wIndex = 0xa00, type = 4
      ALSA mixer.c:352 cannot get ctl value: req = 0x83, wValue = 0x200, wIndex = 0xa00, type = 4
      ....
    
    It turned out that the culprit is autopm: snd_usb_autoresume() returns
    -ENODEV when called during card->probing = 1.
    
    Since the call itself during card->probing = 1 is valid, let's fix the
    return value of snd_usb_autoresume() as success.
    
    Reported-and-tested-by: Daniel Schürmann <daschuer@mixxx.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b01ae289a30eb22f54d64951032f2a2b1d6bd532
Author: Clemens Ladisch <clemens@ladisch.de>
Date:   Mon Apr 15 15:59:51 2013 +0200

    ALSA: usb-audio: disable autopm for MIDI devices
    
    commit cbc200bca4b51a8e2406d4b654d978f8503d430b upstream.
    
    Commit 88a8516a2128 (ALSA: usbaudio: implement USB autosuspend)
    introduced autopm for all USB audio/MIDI devices.  However, many MIDI
    devices, such as synthesizers, do not merely transmit MIDI messages but
    use their MIDI inputs to control other functions.  With autopm, these
    devices would get powered down as soon as the last MIDI port device is
    closed on the host.
    
    Even some plain MIDI interfaces could get broken: they automatically
    send Active Sensing messages while powered up, but as soon as these
    messages cease, the receiving device would interpret this as an
    accidental disconnection.
    
    Commit f5f165418cab (ALSA: usb-audio: Fix missing autopm for MIDI input)
    introduced another regression: some devices (e.g. the Roland GAIA SH-01)
    are self-powered but do a reset whenever the USB interface's power state
    changes.
    
    To work around all this, just disable autopm for all USB MIDI devices.
    
    Reported-by: Laurens Holst
    Signed-off-by: Clemens Ladisch <clemens@ladisch.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 919fa1da0caf8b0fd323124257262654589057b2
Author: Daniel Mack <zonque@gmail.com>
Date:   Wed Apr 24 19:38:42 2013 +0200

    ALSA: snd-usb: try harder to find USB_DT_CS_ENDPOINT
    
    commit ebfc594c02148b6a85c2f178cf167a44a3c3ce10 upstream.
    
    The USB_DT_CS_ENDPOINT class-specific endpoint descriptor is usually
    stuffed directly after the standard USB endpoint descriptor, and this is
    where the driver currently expects it to be.
    
    There are, however, devices in the wild that have it the other way
    around in their descriptor sets, so the USB_DT_CS_ENDPOINT comes
    *before* the standard enpoint. Devices known to implement it that way
    are "Sennheiser BTD-500" and Plantronics USB headsets.
    
    When the driver can't find the USB_DT_CS_ENDPOINT, it won't be able to
    change sample rates, as the bitmask for the validity of this command is
    storen in bmAttributes of that descriptor.
    
    Fix this by searching the entire interface instead of just the extra
    bytes of the first endpoint, in case the latter fails.
    
    Signed-off-by: Daniel Mack <zonque@gmail.com>
    Reported-and-tested-by: Torstein Hegge <hegge@resisty.net>
    Reported-and-tested-by: Yves G <alsa-user@vivigatt.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 273a82bee94d42ba58b264bc427cd75df65b81fc
Author: Hugh Dickins <hughd@google.com>
Date:   Mon Apr 29 15:07:44 2013 -0700

    mm: allow arch code to control the user page table ceiling
    
    commit 6ee8630e02be6dd89926ca0fbc21af68b23dc087 upstream.
    
    On architectures where a pgd entry may be shared between user and kernel
    (e.g.  ARM+LPAE), freeing page tables needs a ceiling other than 0.
    This patch introduces a generic USER_PGTABLES_CEILING that arch code can
    override.  It is the responsibility of the arch code setting the ceiling
    to ensure the complete freeing of the page tables (usually in
    pgd_free()).
    
    [catalin.marinas@arm.com: commit log; shift_arg_pages(), asm-generic/pgtables.h changes]
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ede49f3642cce1fe60ac81cb1953e7a8fd91e8ce
Author: Anurup m <anurup.m@huawei.com>
Date:   Mon Apr 29 15:05:52 2013 -0700

    fs/fscache/stats.c: fix memory leak
    
    commit ec686c9239b4d472052a271c505d04dae84214cc upstream.
    
    There is a kernel memory leak observed when the proc file
    /proc/fs/fscache/stats is read.
    
    The reason is that in fscache_stats_open, single_open is called and the
    respective release function is not called during release.  Hence fix
    with correct release function - single_release().
    
    Addresses https://bugzilla.kernel.org/show_bug.cgi?id=57101
    
    Signed-off-by: Anurup m <anurup.m@huawei.com>
    Cc: shyju pv <shyju.pv@huawei.com>
    Cc: Sanil kumar <sanil.kumar@huawei.com>
    Cc: Nataraj m <nataraj.m@huawei.com>
    Cc: Li Zefan <lizefan@huawei.com>
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9a0a8cd73178779c05df6d52a794b4ea432b413
Author: Stephan Schreiber <info@fs-driver.org>
Date:   Tue Mar 19 15:27:12 2013 -0700

    Wrong asm register contraints in the kvm implementation
    
    commit de53e9caa4c6149ef4a78c2f83d7f5b655848767 upstream.
    
    The Linux Kernel contains some inline assembly source code which has
    wrong asm register constraints in arch/ia64/kvm/vtlb.c.
    
    I observed this on Kernel 3.2.35 but it is also true on the most
    recent Kernel 3.9-rc1.
    
    File arch/ia64/kvm/vtlb.c:
    
    u64 guest_vhpt_lookup(u64 iha, u64 *pte)
    {
            u64 ret;
            struct thash_data *data;
    
            data = __vtr_lookup(current_vcpu, iha, D_TLB);
            if (data != NULL)
                    thash_vhpt_insert(current_vcpu, data->page_flags,
                            data->itir, iha, D_TLB);
    
            asm volatile (
                            "rsm psr.ic|psr.i;;"
                            "srlz.d;;"
                            "ld8.s r9=[%1];;"
                            "tnat.nz p6,p7=r9;;"
                            "(p6) mov %0=1;"
                            "(p6) mov r9=r0;"
                            "(p7) extr.u r9=r9,0,53;;"
                            "(p7) mov %0=r0;"
                            "(p7) st8 [%2]=r9;;"
                            "ssm psr.ic;;"
                            "srlz.d;;"
                            "ssm psr.i;;"
                            "srlz.d;;"
                            : "=r"(ret) : "r"(iha), "r"(pte):"memory");
    
            return ret;
    }
    
    The list of output registers is
                            : "=r"(ret) : "r"(iha), "r"(pte):"memory");
    The constraint "=r" means that the GCC has to maintain that these vars
    are in registers and contain valid info when the program flow leaves
    the assembly block (output registers).
    But "=r" also means that GCC can put them in registers that are used
    as input registers. Input registers are iha, pte on the example.
    If the predicate p7 is true, the 8th assembly instruction
                            "(p7) mov %0=r0;"
    is the first one which writes to a register which is maintained by the
    register constraints; it sets %0. %0 means the first register operand;
    it is ret here.
    This instruction might overwrite the %2 register (pte) which is needed
    by the next instruction:
                            "(p7) st8 [%2]=r9;;"
    Whether it really happens depends on how GCC decides what registers it
    uses and how it optimizes the code.
    
    The attached patch  fixes the register operand constraints in
    arch/ia64/kvm/vtlb.c.
    The register constraints should be
                            : "=&r"(ret) : "r"(iha), "r"(pte):"memory");
    The & means that GCC must not use any of the input registers to place
    this output register in.
    
    This is Debian bug#702639
    (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=702639).
    
    The patch is applicable on Kernel 3.9-rc1, 3.2.35 and many other versions.
    
    Signed-off-by: Stephan Schreiber <info@fs-driver.org>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f67f6d6dbc6e2ad71c56a1068e9370d73944c40
Author: Stephan Schreiber <info@fs-driver.org>
Date:   Tue Mar 19 15:22:27 2013 -0700

    Wrong asm register contraints in the futex implementation
    
    commit 136f39ddc53db3bcee2befbe323a56d4fbf06da8 upstream.
    
    The Linux Kernel contains some inline assembly source code which has
    wrong asm register constraints in arch/ia64/include/asm/futex.h.
    
    I observed this on Kernel 3.2.23 but it is also true on the most
    recent Kernel 3.9-rc1.
    
    File arch/ia64/include/asm/futex.h:
    
    static inline int
    futex_atomic_cmpxchg_inatomic(u32 *uval, u32 __user *uaddr,
                                  u32 oldval, u32 newval)
    {
            if (!access_ok(VERIFY_WRITE, uaddr, sizeof(u32)))
                    return -EFAULT;
    
            {
                    register unsigned long r8 __asm ("r8");
                    unsigned long prev;
                    __asm__ __volatile__(
                            "       mf;;                                    \n"
                            "       mov %0=r0                               \n"
                            "       mov ar.ccv=%4;;                         \n"
                            "[1:]   cmpxchg4.acq %1=[%2],%3,ar.ccv          \n"
                            "       .xdata4 \"__ex_table\", 1b-., 2f-.      \n"
                            "[2:]"
                            : "=r" (r8), "=r" (prev)
                            : "r" (uaddr), "r" (newval),
                              "rO" ((long) (unsigned) oldval)
                            : "memory");
                    *uval = prev;
                    return r8;
            }
    }
    
    The list of output registers is
                            : "=r" (r8), "=r" (prev)
    The constraint "=r" means that the GCC has to maintain that these vars
    are in registers and contain valid info when the program flow leaves
    the assembly block (output registers).
    But "=r" also means that GCC can put them in registers that are used
    as input registers. Input registers are uaddr, newval, oldval on the
    example.
    The second assembly instruction
                            "       mov %0=r0                               \n"
    is the first one which writes to a register; it sets %0 to 0. %0 means
    the first register operand; it is r8 here. (The r0 is read-only and
    always 0 on the Itanium; it can be used if an immediate zero value is
    needed.)
    This instruction might overwrite one of the other registers which are
    still needed.
    Whether it really happens depends on how GCC decides what registers it
    uses and how it optimizes the code.
    
    The objdump utility can give us disassembly.
    The futex_atomic_cmpxchg_inatomic() function is inline, so we have to
    look for a module that uses the funtion. This is the
    cmpxchg_futex_value_locked() function in
    kernel/futex.c:
    
    static int cmpxchg_futex_value_locked(u32 *curval, u32 __user *uaddr,
                                          u32 uval, u32 newval)
    {
            int ret;
    
            pagefault_disable();
            ret = futex_atomic_cmpxchg_inatomic(curval, uaddr, uval, newval);
            pagefault_enable();
    
            return ret;
    }
    
    Now the disassembly. At first from the Kernel package 3.2.23 which has
    been compiled with GCC 4.4, remeber this Kernel seemed to work:
    objdump -d linux-3.2.23/debian/build/build_ia64_none_mckinley/kernel/futex.o
    
    0000000000000230 <cmpxchg_futex_value_locked>:
          230:      0b 18 80 1b 18 21       [MMI]       adds r3=3168,r13;;
          236:      80 40 0d 00 42 00                   adds r8=40,r3
          23c:      00 00 04 00                         nop.i 0x0;;
          240:      0b 50 00 10 10 10       [MMI]       ld4 r10=[r8];;
          246:      90 08 28 00 42 00                   adds r9=1,r10
          24c:      00 00 04 00                         nop.i 0x0;;
          250:      09 00 00 00 01 00       [MMI]       nop.m 0x0
          256:      00 48 20 20 23 00                   st4 [r8]=r9
          25c:      00 00 04 00                         nop.i 0x0;;
          260:      08 10 80 06 00 21       [MMI]       adds r2=32,r3
          266:      00 00 00 02 00 00                   nop.m 0x0
          26c:      02 08 f1 52                         extr.u r16=r33,0,61
          270:      05 40 88 00 08 e0       [MLX]       addp4 r8=r34,r0
          276:      ff ff 0f 00 00 e0                   movl r15=0xfffffffbfff;;
          27c:      f1 f7 ff 65
          280:      09 70 00 04 18 10       [MMI]       ld8 r14=[r2]
          286:      00 00 00 02 00 c0                   nop.m 0x0
          28c:      f0 80 1c d0                         cmp.ltu p6,p7=r15,r16;;
          290:      08 40 fc 1d 09 3b       [MMI]       cmp.eq p8,p9=-1,r14
          296:      00 00 00 02 00 40                   nop.m 0x0
          29c:      e1 08 2d d0                         cmp.ltu p10,p11=r14,r33
          2a0:      56 01 10 00 40 10       [BBB] (p10) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2a6:      02 08 00 80 21 03             (p08) br.cond.dpnt.few 2b0
    <cmpxchg_futex_value_locked+0x80>
          2ac:      40 00 00 41                   (p06) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2b0:      0a 00 00 00 22 00       [MMI]       mf;;
          2b6:      80 00 00 00 42 00                   mov r8=r0
          2bc:      00 00 04 00                         nop.i 0x0
          2c0:      0b 00 20 40 2a 04       [MMI]       mov.m ar.ccv=r8;;
          2c6:      10 1a 85 22 20 00                   cmpxchg4.acq r33=[r33],r35,ar.ccv
          2cc:      00 00 04 00                         nop.i 0x0;;
          2d0:      10 00 84 40 90 11       [MIB]       st4 [r32]=r33
          2d6:      00 00 00 02 00 00                   nop.i 0x0
          2dc:      20 00 00 40                         br.few 2f0
    <cmpxchg_futex_value_locked+0xc0>
          2e0:      09 40 c8 f9 ff 27       [MMI]       mov r8=-14
          2e6:      00 00 00 02 00 00                   nop.m 0x0
          2ec:      00 00 04 00                         nop.i 0x0;;
          2f0:      0b 58 20 1a 19 21       [MMI]       adds r11=3208,r13;;
          2f6:      20 01 2c 20 20 00                   ld4 r18=[r11]
          2fc:      00 00 04 00                         nop.i 0x0;;
          300:      0b 88 fc 25 3f 23       [MMI]       adds r17=-1,r18;;
          306:      00 88 2c 20 23 00                   st4 [r11]=r17
          30c:      00 00 04 00                         nop.i 0x0;;
          310:      11 00 00 00 01 00       [MIB]       nop.m 0x0
          316:      00 00 00 02 00 80                   nop.i 0x0
          31c:      08 00 84 00                         br.ret.sptk.many b0;;
    
    The lines
          2b0:      0a 00 00 00 22 00       [MMI]       mf;;
          2b6:      80 00 00 00 42 00                   mov r8=r0
          2bc:      00 00 04 00                         nop.i 0x0
          2c0:      0b 00 20 40 2a 04       [MMI]       mov.m ar.ccv=r8;;
          2c6:      10 1a 85 22 20 00                   cmpxchg4.acq r33=[r33],r35,ar.ccv
          2cc:      00 00 04 00                         nop.i 0x0;;
    are the instructions of the assembly block.
    The line
          2b6:      80 00 00 00 42 00                   mov r8=r0
    sets the r8 register to 0 and after that
          2c0:      0b 00 20 40 2a 04       [MMI]       mov.m ar.ccv=r8;;
    prepares the 'oldvalue' for the cmpxchg but it takes it from r8. This
    is wrong.
    What happened here is what I explained above: An input register is
    overwritten which is still needed.
    The register operand constraints in futex.h are wrong.
    
    (The problem doesn't occur when the Kernel is compiled with GCC 4.6.)
    
    The attached patch fixes the register operand constraints in futex.h.
    The code after patching of it:
    
    static inline int
    futex_atomic_cmpxchg_inatomic(u32 *uval, u32 __user *uaddr,
                                  u32 oldval, u32 newval)
    {
            if (!access_ok(VERIFY_WRITE, uaddr, sizeof(u32)))
                    return -EFAULT;
    
            {
                    register unsigned long r8 __asm ("r8") = 0;
                    unsigned long prev;
                    __asm__ __volatile__(
                            "       mf;;                                    \n"
                            "       mov ar.ccv=%4;;                         \n"
                            "[1:]   cmpxchg4.acq %1=[%2],%3,ar.ccv          \n"
                            "       .xdata4 \"__ex_table\", 1b-., 2f-.      \n"
                            "[2:]"
                            : "+r" (r8), "=&r" (prev)
                            : "r" (uaddr), "r" (newval),
                              "rO" ((long) (unsigned) oldval)
                            : "memory");
                    *uval = prev;
                    return r8;
            }
    }
    
    I also initialized the 'r8' var with the C programming language.
    The _asm qualifier on the definition of the 'r8' var forces GCC to use
    the r8 processor register for it.
    I don't believe that we should use inline assembly for zeroing out a
    local variable.
    The constraint is
    "+r" (r8)
    what means that it is both an input register and an output register.
    Note that the page fault handler will modify the r8 register which
    will be the return value of the function.
    The real fix is
    "=&r" (prev)
    The & means that GCC must not use any of the input registers to place
    this output register in.
    
    Patched the Kernel 3.2.23 and compiled it with GCC4.4:
    
    0000000000000230 <cmpxchg_futex_value_locked>:
          230:      0b 18 80 1b 18 21       [MMI]       adds r3=3168,r13;;
          236:      80 40 0d 00 42 00                   adds r8=40,r3
          23c:      00 00 04 00                         nop.i 0x0;;
          240:      0b 50 00 10 10 10       [MMI]       ld4 r10=[r8];;
          246:      90 08 28 00 42 00                   adds r9=1,r10
          24c:      00 00 04 00                         nop.i 0x0;;
          250:      09 00 00 00 01 00       [MMI]       nop.m 0x0
          256:      00 48 20 20 23 00                   st4 [r8]=r9
          25c:      00 00 04 00                         nop.i 0x0;;
          260:      08 10 80 06 00 21       [MMI]       adds r2=32,r3
          266:      20 12 01 10 40 00                   addp4 r34=r34,r0
          26c:      02 08 f1 52                         extr.u r16=r33,0,61
          270:      05 40 00 00 00 e1       [MLX]       mov r8=r0
          276:      ff ff 0f 00 00 e0                   movl r15=0xfffffffbfff;;
          27c:      f1 f7 ff 65
          280:      09 70 00 04 18 10       [MMI]       ld8 r14=[r2]
          286:      00 00 00 02 00 c0                   nop.m 0x0
          28c:      f0 80 1c d0                         cmp.ltu p6,p7=r15,r16;;
          290:      08 40 fc 1d 09 3b       [MMI]       cmp.eq p8,p9=-1,r14
          296:      00 00 00 02 00 40                   nop.m 0x0
          29c:      e1 08 2d d0                         cmp.ltu p10,p11=r14,r33
          2a0:      56 01 10 00 40 10       [BBB] (p10) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2a6:      02 08 00 80 21 03             (p08) br.cond.dpnt.few 2b0
    <cmpxchg_futex_value_locked+0x80>
          2ac:      40 00 00 41                   (p06) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2b0:      0b 00 00 00 22 00       [MMI]       mf;;
          2b6:      00 10 81 54 08 00                   mov.m ar.ccv=r34
          2bc:      00 00 04 00                         nop.i 0x0;;
          2c0:      09 58 8c 42 11 10       [MMI]       cmpxchg4.acq r11=[r33],r35,ar.ccv
          2c6:      00 00 00 02 00 00                   nop.m 0x0
          2cc:      00 00 04 00                         nop.i 0x0;;
          2d0:      10 00 2c 40 90 11       [MIB]       st4 [r32]=r11
          2d6:      00 00 00 02 00 00                   nop.i 0x0
          2dc:      20 00 00 40                         br.few 2f0
    <cmpxchg_futex_value_locked+0xc0>
          2e0:      09 40 c8 f9 ff 27       [MMI]       mov r8=-14
          2e6:      00 00 00 02 00 00                   nop.m 0x0
          2ec:      00 00 04 00                         nop.i 0x0;;
          2f0:      0b 88 20 1a 19 21       [MMI]       adds r17=3208,r13;;
          2f6:      30 01 44 20 20 00                   ld4 r19=[r17]
          2fc:      00 00 04 00                         nop.i 0x0;;
          300:      0b 90 fc 27 3f 23       [MMI]       adds r18=-1,r19;;
          306:      00 90 44 20 23 00                   st4 [r17]=r18
          30c:      00 00 04 00                         nop.i 0x0;;
          310:      11 00 00 00 01 00       [MIB]       nop.m 0x0
          316:      00 00 00 02 00 80                   nop.i 0x0
          31c:      08 00 84 00                         br.ret.sptk.many b0;;
    
    Much better.
    There is a
          270:      05 40 00 00 00 e1       [MLX]       mov r8=r0
    which was generated by C code r8 = 0. Below
          2b6:      00 10 81 54 08 00                   mov.m ar.ccv=r34
    what means that oldval is no longer overwritten.
    
    This is Debian bug#702641
    (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=702641).
    
    The patch is applicable on Kernel 3.9-rc1, 3.2.23 and many other versions.
    
    Signed-off-by: Stephan Schreiber <info@fs-driver.org>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 076a5dc21f6251c02d351c0ecf640ff8721130c6
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Apr 12 13:58:17 2013 +0000

    PCI/PM: Fix fallback to PCI_D0 in pci_platform_power_transition()
    
    commit 769ba7212f2059ca9fe0c73371e3d415c8c1c529 upstream.
    
    Commit b51306c (PCI: Set device power state to PCI_D0 for device
    without native PM support) modified pci_platform_power_transition()
    by adding code causing dev->current_state for devices that don't
    support native PCI PM but are power-manageable by the platform to be
    changed to PCI_D0 regardless of the value returned by the preceding
    platform_pci_set_power_state().  In particular, that also is done
    if the platform_pci_set_power_state() has been successful, which
    causes the correct power state of the device set by
    pci_update_current_state() in that case to be overwritten by PCI_D0.
    
    Fix that mistake by making the fallback to PCI_D0 only happen if
    the platform_pci_set_power_state() has returned an error.
    
    [bhelgaas: folded in Yinghai's simplification, added URL & stable info]
    Reference: http://lkml.kernel.org/r/27806FC4E5928A408B78E88BBC67A2306F466BBA@ORSMSX101.amr.corp.intel.com
    Reported-by: Chris J. Benenati <chris.j.benenati@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e99b12d8c65add111c25a17ec49a3a496bdb6b1
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Thu Mar 28 04:28:58 2013 +0000

    PCI / ACPI: Don't query OSC support with all possible controls
    
    commit 545d6e189a41c94c11f55045a771118eccc9d9eb upstream.
    
    Found problem on system that firmware that could handle pci aer.
    Firmware get error reporting after pci injecting error, before os boots.
    But after os boots, firmware can not get report anymore, even pci=noaer
    is passed.
    
    Root cause: BIOS _OSC has problem with query bit checking.
    It turns out that BIOS vendor is copying example code from ACPI Spec.
    In ACPI Spec 5.0, page 290:
    
            If (Not(And(CDW1,1))) // Query flag clear?
            {       // Disable GPEs for features granted native control.
                    If (And(CTRL,0x01)) // Hot plug control granted?
                    {
                            Store(0,HPCE) // clear the hot plug SCI enable bit
                            Store(1,HPCS) // clear the hot plug SCI status bit
                    }
            ...
            }
    
    When Query flag is set, And(CDW1,1) will be 1, Not(1) will return 0xfffffffe.
    So it will get into code path that should be for control set only.
    BIOS acpi code should be changed to "If (LEqual(And(CDW1,1), 0)))"
    
    Current kernel code is using _OSC query to notify firmware about support
    from OS and then use _OSC to set control bits.
    During query support, current code is using all possible controls.
    So will execute code that should be only for control set stage.
    
    That will have problem when pci=noaer or aer firmware_first is used.
    As firmware have that control set for os aer already in query support stage,
    but later will not os aer handling.
    
    We should avoid passing all possible controls, just use osc_control_set
    instead.
    That should workaround BIOS bugs with affected systems on the field
    as more bios vendors are copying sample code from ACPI spec.
    
    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bf457bc84549a0f0a9a499bf9d823f222a5484f
Author: Tony Luck <tony.luck@intel.com>
Date:   Wed Mar 20 10:30:15 2013 -0700

    Fix initialization of CMCI/CMCP interrupts
    
    commit d303e9e98fce56cdb3c6f2ac92f626fc2bd51c77 upstream.
    
    Back 2010 during a revamp of the irq code some initializations
    were moved from ia64_mca_init() to ia64_mca_late_init() in
    
            commit c75f2aa13f5b268aba369b5dc566088b5194377c
            Cannot use register_percpu_irq() from ia64_mca_init()
    
    But this was hideously wrong. First of all these initializations
    are now down far too late. Specifically after all the other cpus
    have been brought up and initialized their own CMC vectors from
    smp_callin(). Also ia64_mca_late_init() may be called from any cpu
    so the line:
            ia64_mca_cmc_vector_setup();       /* Setup vector on BSP */
    is generally not executed on the BSP, and so the CMC vector isn't
    setup at all on that processor.
    
    Make use of the arch_early_irq_init() hook to get this code executed
    at just the right moment: not too early, not too late.
    
    Reported-by: Fred Hartnett <fred.hartnett@hp.com>
    Tested-by: Fred Hartnett <fred.hartnett@hp.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6615e6db12bf29ab3d1062c9144c4e0828d2c588
Author: Ming Lei <ming.lei@canonical.com>
Date:   Tue Apr 2 10:12:26 2013 +0800

    sysfs: fix use after free in case of concurrent read/write and readdir
    
    commit f7db5e7660b122142410dcf36ba903c73d473250 upstream.
    
    The inode->i_mutex isn't hold when updating filp->f_pos
    in read()/write(), so the filp->f_pos might be read as
    0 or 1 in readdir() when there is concurrent read()/write()
    on this same file, then may cause use after free in readdir().
    
    The bug can be reproduced with Li Zefan's test code on the
    link:
    
            https://patchwork.kernel.org/patch/2160771/
    
    This patch fixes the use after free under this situation.
    
    Reported-by: Li Zefan <lizefan@huawei.com>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e079960ed813d36aa7625da4c388ae0d6e9d320
Author: Steven A. Falco <sfalco@harris.com>
Date:   Mon Apr 22 09:34:39 2013 +0000

    i2c: xiic: must always write 16-bit words to TX_FIFO
    
    commit c39e8e4354ce4daf23336de5daa28a3b01f00aa6 upstream.
    
    The TX_FIFO register is 10 bits wide.  The lower 8 bits are the data to be
    written, while the upper two bits are flags to indicate stop/start.
    
    The driver apparently attempted to optimize write access, by only writing a
    byte in those cases where the stop/start bits are zero.  However, we have
    seen cases where the lower byte is duplicated onto the upper byte by the
    hardware, which causes inadvertent stop/starts.
    
    This patch changes the write access to the transmit FIFO to always be 16 bits
    wide.
    
    Signed off by: Steven A. Falco <sfalco@harris.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 761694a0bdc01817d1212b1127234dcaf828fde7
Author: Namhyung Kim <namhyung.kim@lge.com>
Date:   Thu Apr 11 16:01:38 2013 +0900

    tracing: Reset ftrace_graph_filter_enabled if count is zero
    
    commit 9f50afccfdc15d95d7331acddcb0f7703df089ae upstream.
    
    The ftrace_graph_count can be decreased with a "!" pattern, so that
    the enabled flag should be updated too.
    
    Link: http://lkml.kernel.org/r/1365663698-2413-1-git-send-email-namhyung@kernel.org
    
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Namhyung Kim <namhyung.kim@lge.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1672f4e2c9fb1231a6242ca1596806f123da3c5
Author: Namhyung Kim <namhyung.kim@lge.com>
Date:   Wed Apr 10 09:18:12 2013 +0900

    tracing: Check return value of tracing_init_dentry()
    
    commit ed6f1c996bfe4b6e520cf7a74b51cd6988d84420 upstream.
    
    Check return value and bail out if it's NULL.
    
    Link: http://lkml.kernel.org/r/1365553093-10180-2-git-send-email-namhyung@kernel.org
    
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Namhyung Kim <namhyung.kim@lge.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 226c8ea60cfc71732ff2212fae71077789718e51
Author: Namhyung Kim <namhyung.kim@lge.com>
Date:   Mon Apr 1 21:46:24 2013 +0900

    tracing: Fix off-by-one on allocating stat->pages
    
    commit 39e30cd1537937d3c00ef87e865324e981434e5b upstream.
    
    The first page was allocated separately, so no need to start from 0.
    
    Link: http://lkml.kernel.org/r/1364820385-32027-2-git-send-email-namhyung@kernel.org
    
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Namhyung Kim <namhyung.kim@lge.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4ca6ccafc266cefbd004e515695cbeb1e8b8411
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Wed Mar 13 23:34:22 2013 -0400

    tracing: Remove most or all of stack tracer stack size from stack_max_size
    
    commit 4df297129f622bdc18935c856f42b9ddd18f9f28 upstream.
    
    Currently, the depth reported in the stack tracer stack_trace file
    does not match the stack_max_size file. This is because the stack_max_size
    includes the overhead of stack tracer itself while the depth does not.
    
    The first time a max is triggered, a calculation is not performed that
    figures out the overhead of the stack tracer and subtracts it from
    the stack_max_size variable. The overhead is stored and is subtracted
    from the reported stack size for comparing for a new max.
    
    Now the stack_max_size corresponds to the reported depth:
    
     # cat stack_max_size
    4640
    
     # cat stack_trace
            Depth    Size   Location    (48 entries)
            -----    ----   --------
      0)     4640      32   _raw_spin_lock+0x18/0x24
      1)     4608     112   ____cache_alloc+0xb7/0x22d
      2)     4496      80   kmem_cache_alloc+0x63/0x12f
      3)     4416      16   mempool_alloc_slab+0x15/0x17
    [...]
    
    While testing against and older gcc on x86 that uses mcount instead
    of fentry, I found that pasing in ip + MCOUNT_INSN_SIZE let the
    stack trace show one more function deep which was missing before.
    
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af1860122000cf090868fb7f7fbba7417e4575bd
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Wed Mar 13 21:25:35 2013 -0400

    tracing: Fix stack tracer with fentry use
    
    commit d4ecbfc49b4b1d4b597fb5ba9e4fa25d62f105c5 upstream.
    
    When gcc 4.6 on x86 is used, the function tracer will use the new
    option -mfentry which does a call to "fentry" at every function
    instead of "mcount". The significance of this is that fentry is
    called as the first operation of the function instead of the mcount
    usage of being called after the stack.
    
    This causes the stack tracer to show some bogus results for the size
    of the last function traced, as well as showing "ftrace_call" instead
    of the function. This is due to the stack frame not being set up
    by the function that is about to be traced.
    
     # cat stack_trace
            Depth    Size   Location    (48 entries)
            -----    ----   --------
      0)     4824     216   ftrace_call+0x5/0x2f
      1)     4608     112   ____cache_alloc+0xb7/0x22d
      2)     4496      80   kmem_cache_alloc+0x63/0x12f
    
    The 216 size for ftrace_call includes both the ftrace_call stack
    (which includes the saving of registers it does), as well as the
    stack size of the parent.
    
    To fix this, if CC_USING_FENTRY is defined, then the stack_tracer
    will reserve the first item in stack_dump_trace[] array when
    calling save_stack_trace(), and it will fill it in with the parent ip.
    Then the code will look for the parent pointer on the stack and
    give the real size of the parent's stack pointer:
    
     # cat stack_trace
            Depth    Size   Location    (14 entries)
            -----    ----   --------
      0)     2640      48   update_group_power+0x26/0x187
      1)     2592     224   update_sd_lb_stats+0x2a5/0x4ac
      2)     2368     160   find_busiest_group+0x31/0x1f1
      3)     2208     256   load_balance+0xd9/0x662
    
    I'm Cc'ing stable, although it's not urgent, as it only shows bogus
    size for item #0, the rest of the trace is legit. It should still be
    corrected in previous stable releases.
    
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 893238186e35bdd59efde4572bcb6d0653c0ec65
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Wed Mar 13 20:43:57 2013 -0400

    tracing: Use stack of calling function for stack tracer
    
    commit 87889501d0adfae10e3b0f0e6f2d7536eed9ae84 upstream.
    
    Use the stack of stack_trace_call() instead of check_stack() as
    the test pointer for max stack size. It makes it a bit cleaner
    and a little more accurate.
    
    Adding stable, as a later fix depends on this patch.
    
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a393520aa653a5e1133e14a1984b5e5815e01cf6
Author: Mika Kuoppala <mika.kuoppala@linux.intel.com>
Date:   Mon Apr 22 14:19:26 2013 +0300

    fbcon: when font is freed, clear also vc_font.data
    
    commit e6637d5427d2af9f3f33b95447bfc5347e5ccd85 upstream.
    
    commit ae1287865f5361fa138d4d3b1b6277908b54eac9
    Author: Dave Airlie <airlied@redhat.com>
    Date:   Thu Jan 24 16:12:41 2013 +1000
    
        fbcon: don't lose the console font across generic->chip driver switch
    
    uses a pointer in vc->vc_font.data to load font into the new driver.
    However if the font is actually freed, we need to clear the data
    so that we don't reload font from dangling pointer.
    
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=892340
    Signed-off-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce5b62fd947369813666074f725aa0c1d819fc29
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 1 07:32:21 2013 -0700

    tty: fix up atime/mtime mess, take three
    
    commit b0b885657b6c8ef63a46bc9299b2a7715d19acde upstream.
    
    We first tried to avoid updating atime/mtime entirely (commit
    b0de59b5733d: "TTY: do not update atime/mtime on read/write"), and then
    limited it to only update it occasionally (commit 37b7f3c76595: "TTY:
    fix atime/mtime regression"), but it turns out that this was both
    insufficient and overkill.
    
    It was insufficient because we let people attach to the shared ptmx node
    to see activity without even reading atime/mtime, and it was overkill
    because the "only once a minute" means that you can't really tell an
    idle person from an active one with 'w'.
    
    So this tries to fix the problem properly.  It marks the shared ptmx
    node as un-notifiable, and it lowers the "only once a minute" to a few
    seconds instead - still long enough that you can't time individual
    keystrokes, but short enough that you can tell whether somebody is
    active or not.
    
    Reported-by: Simon Kirby <sim@hostway.ca>
    Acked-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8370884e1b78a1aa1c4c80872cea22c0269b93bd
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Mon Apr 22 19:42:16 2013 +0000

    gianfar: do not advertise any alarm capability.
    
    commit cd4baaaa04b4aaa3b0ec4d13a6f3d203b92eadbd upstream.
    
    An early draft of the PHC patch series included an alarm in the
    gianfar driver. During the review process, the alarm code was dropped,
    but the capability removal was overlooked. This patch fixes the issue
    by advertising zero alarms.
    
    This patch should be applied to every 3.x stable kernel.
    
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Reported-by: Chris LaRocque <clarocq@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0907fdff86010806099f872de9fff2b86d6b18fe
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Mon Apr 29 15:07:45 2013 -0700

    arm: set the page table freeing ceiling to TASK_SIZE
    
    commit 104ad3b32d7a71941c8ab2dee78eea38e8a23309 upstream.
    
    ARM processors with LPAE enabled use 3 levels of page tables, with an
    entry in the top level (pgd) covering 1GB of virtual space.  Because of
    the branch relocation limitations on ARM, the loadable modules are
    mapped 16MB below PAGE_OFFSET, making the corresponding 1GB pgd shared
    between kernel modules and user space.
    
    If free_pgtables() is called with the default ceiling 0,
    free_pgd_range() (and subsequently called functions) also frees the page
    table shared between user space and kernel modules (which is normally
    handled by the ARM-specific pgd_free() function).  This patch changes
    defines the ARM USER_PGTABLES_CEILING to TASK_SIZE when CONFIG_ARM_LPAE
    is enabled.
    
    Note that the pgd_free() function already checks the presence of the
    shared pmd page allocated by pgd_alloc() and frees it, though with
    ceiling 0 this wasn't necessary.
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be2300f0961d43c4d92f2a7aa716811383ebbeb2
Author: Federico Vaga <federico.vaga@gmail.com>
Date:   Mon Apr 15 16:01:07 2013 +0200

    serial_core.c: add put_device() after device_find_child()
    
    commit 5a65dcc04cda41f4122aacc37a5a348454645399 upstream.
    
    The serial core uses device_find_child() but does not drop the reference to
    the retrieved child after using it. This patch add the missing put_device().
    
    What I have done to test this issue.
    
    I used a machine with an AMBA PL011 serial driver. I tested the patch on
    next-20120408 because the last branch [next-20120415] does not boot on this
    board.
    
    For test purpose, I added some pr_info() messages to print the refcount
    after device_find_child() (lines: 1937,2009), and after put_device()
    (lines: 1947, 2021).
    
    Boot the machine *without* put_device(). Then:
    
    echo reboot > /sys/power/disk
    echo disk > /sys/power/state
    [   87.058575] uart_suspend_port:1937 refcount 4
    [   87.058582] uart_suspend_port:1947 refcount 4
    [   87.098083] uart_resume_port:2009refcount 5
    [   87.098088] uart_resume_port:2021 refcount 5
    
    echo disk > /sys/power/state
    [  103.055574] uart_suspend_port:1937 refcount 6
    [  103.055580] uart_suspend_port:1947 refcount 6
    [  103.095322] uart_resume_port:2009 refcount 7
    [  103.095327] uart_resume_port:2021 refcount 7
    
    echo disk > /sys/power/state
    [  252.459580] uart_suspend_port:1937 refcount 8
    [  252.459586] uart_suspend_port:1947 refcount 8
    [  252.499611] uart_resume_port:2009 refcount 9
    [  252.499616] uart_resume_port:2021 refcount 9
    
    The refcount continuously increased.
    
    Boot the machine *with* this patch. Then:
    
    echo reboot > /sys/power/disk
    echo disk > /sys/power/state
    [  159.333559] uart_suspend_port:1937 refcount 4
    [  159.333566] uart_suspend_port:1947 refcount 3
    [  159.372751] uart_resume_port:2009 refcount 4
    [  159.372755] uart_resume_port:2021 refcount 3
    
    echo disk > /sys/power/state
    [  185.713614] uart_suspend_port:1937 refcount 4
    [  185.713621] uart_suspend_port:1947 refcount 3
    [  185.752935] uart_resume_port:2009 refcount 4
    [  185.752940] uart_resume_port:2021 refcount 3
    
    echo disk > /sys/power/state
    [  207.458584] uart_suspend_port:1937 refcount 4
    [  207.458591] uart_suspend_port:1947 refcount 3
    [  207.498598] uart_resume_port:2009 refcount 4
    [  207.498605] uart_resume_port:2021 refcount 3
    
    The refcount correctly handled.
    
    Signed-off-by: Federico Vaga <federico.vaga@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c6ad85215e151e96a0af63f7012d6642c23e3bd
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Tue Apr 16 15:18:00 2013 -0400

    xen/time: Fix kasprintf splat when allocating timer%d IRQ line.
    
    commit 7918c92ae9638eb8a6ec18e2b4a0de84557cccc8 upstream.
    
    When we online the CPU, we get this splat:
    
    smpboot: Booting Node 0 Processor 1 APIC 0x2
    installing Xen timer for CPU 1
    BUG: sleeping function called from invalid context at /home/konrad/ssd/konrad/linux/mm/slab.c:3179
    in_atomic(): 1, irqs_disabled(): 0, pid: 0, name: swapper/1
    Pid: 0, comm: swapper/1 Not tainted 3.9.0-rc6upstream-00001-g3884fad #1
    Call Trace:
     [<ffffffff810c1fea>] __might_sleep+0xda/0x100
     [<ffffffff81194617>] __kmalloc_track_caller+0x1e7/0x2c0
     [<ffffffff81303758>] ? kasprintf+0x38/0x40
     [<ffffffff813036eb>] kvasprintf+0x5b/0x90
     [<ffffffff81303758>] kasprintf+0x38/0x40
     [<ffffffff81044510>] xen_setup_timer+0x30/0xb0
     [<ffffffff810445af>] xen_hvm_setup_cpu_clockevents+0x1f/0x30
     [<ffffffff81666d0a>] start_secondary+0x19c/0x1a8
    
    The solution to that is use kasprintf in the CPU hotplug path
    that 'online's the CPU. That is, do it in in xen_hvm_cpu_notify,
    and remove the call to in xen_hvm_setup_cpu_clockevents.
    
    Unfortunatly the later is not a good idea as the bootup path
    does not use xen_hvm_cpu_notify so we would end up never allocating
    timer%d interrupt lines when booting. As such add the check for
    atomic() to continue.
    
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 403e8ff46d44eab2c5e83acb4b15cf21a8a05c3e
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Thu Apr 25 10:03:15 2013 +0200

    s390/memory hotplug: prevent offline of active memory increments
    
    commit 94c163663fc1dcfc067a5fb3cc1446b9469975ce upstream.
    
    In case a machine supports memory hotplug all active memory increments
    present at IPL time have been initialized with a "usecount" of 1.
    This is wrong if the memory increment size is larger than the memory
    section size of the memory hotplug code. If that is the case the
    usecount must be initialized with the number of memory sections that
    fit into one memory increment.
    Otherwise it is possible to put a memory increment into standby state
    even if there are still active sections.
    Afterwards addressing exceptions might happen which cause the kernel
    to panic.
    However even worse, if a memory increment was put into standby state
    and afterwards into active state again, it's contents would have been
    zeroed, leading to memory corruption.
    
    This was only an issue for machines that support standby memory and
    have at least 256GB memory.
    
    This is broken since commit fdb1bb15 "[S390] sclp/memory hotplug: fix
    initial usecount of increments".
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7200993dd8d12775487157913b5e6ce866e642f
Author: Tormod Volden <debian.tormod@gmail.com>
Date:   Sat Apr 20 14:24:04 2013 +0200

    usb-storage: CY7C68300A chips do not support Cypress ATACB
    
    commit 671b4b2ba9266cbcfe7210a704e9ea487dcaa988 upstream.
    
    Many cards based on CY7C68300A/B/C use the USB ID 04b4:6830 but only the
    B and C variants (EZ-USB AT2LP) support the ATA Command Block
    functionality, according to the data sheets. The A variant (EZ-USB AT2)
    locks up if ATACB is attempted, until a typical 30 seconds timeout runs
    out and a USB reset is performed.
    
    https://bugs.launchpad.net/bugs/428469
    
    It seems that one way to spot a CY7C68300A (at least where the card
    manufacturer left Cypress' EEPROM default vaules, against Cypress'
    recommendations) is to look at the USB string descriptor indices.
    
    A http://media.digikey.com/pdf/Data%20Sheets/Cypress%20PDFs/CY7C68300A.pdf
    B http://www.farnell.com/datasheets/43456.pdf
    C http://www.cypress.com/?rID=14189
    
    Note that a CY7C68300B/C chip appears as CY7C68300A if it is running
    in Backward Compatibility Mode, and if ATACB would be supported in this
    case there is anyway no way to tell which chip it really is.
    
    For 5 years my external USB drive has been locking up for half a minute
    when plugged in and ata_id is run by udev, or anytime hdparm or similar
    is run on it.
    
    Finally looking at the /correct/ datasheet I think I found the reason. I
    am aware the quirk in this patch is a bit hacky, but the hardware
    manufacturers haven't made it easy for us.
    
    Signed-off-by: Tormod Volden <debian.tormod@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfec6f5f0ee497134df86b9e61314f5ff4c2fce2
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 16 11:08:33 2013 +0200

    usbfs: Always allow ctrl requests with USB_RECIP_ENDPOINT on the ctrl ep
    
    commit 1361bf4b9f9ef45e628a5b89e0fd9bedfdcb7104 upstream.
    
    When usbfs receives a ctrl-request from userspace it calls check_ctrlrecip,
    which for a request with USB_RECIP_ENDPOINT tries to map this to an interface
    to see if this interface is claimed, except for ctrl-requests with a type of
    USB_TYPE_VENDOR.
    
    When trying to use this device: http://www.akaipro.com/eiepro
    redirected to a Windows vm running on qemu on top of Linux.
    
    The windows driver makes a ctrl-req with USB_TYPE_CLASS and
    USB_RECIP_ENDPOINT with index 0, and the mapping of the endpoint (0) to
    the interface fails since ep 0 is the ctrl endpoint and thus never is
    part of an interface.
    
    This patch fixes this ctrl-req failing by skipping the checkintf call for
    USB_RECIP_ENDPOINT ctrl-reqs on the ctrl endpoint.
    
    Reported-by: Dave Stikkolorum <d.r.stikkolorum@hhs.nl>
    Tested-by: Dave Stikkolorum <d.r.stikkolorum@hhs.nl>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebd414a67ba32d17a53dd506b01720e08c88e455
Author: Adrian Thomasset <adrian.thomasset@st.com>
Date:   Tue Apr 23 12:46:29 2013 +0100

    USB: ftdi_sio: correct ST Micro Connect Lite PIDs
    
    commit 9f06d15f8db6946e41f73196a122b84a37938878 upstream.
    
    The current ST Micro Connect Lite uses the FT4232H hi-speed quad USB
    UART FTDI chip. It is also possible to drive STM reference targets
    populated with an on-board JTAG debugger based on the FT2232H chip with
    the same STMicroelectronics tools.
    
    For this reason, the ST Micro Connect Lite PIDs should be
    ST_STMCLT_2232_PID: 0x3746
    ST_STMCLT_4232_PID: 0x3747
    
    Signed-off-by: Adrian Thomasset <adrian.thomasset@st.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a185de0ef7d02c512175cf373435f0c7f1c640e1
Author: Stefani Seibold <stefani@seibold.net>
Date:   Sun Apr 7 12:08:55 2013 +0200

    USB: add ftdi_sio USB ID for GDM Boost V1.x
    
    commit 58f8b6c4fa5a13cb2ddb400e26e9e65766d71e38 upstream.
    
    This patch add a missing usb device id for the GDMBoost V1.x device
    
    The patch is against 3.9-rc5
    
    Signed-off-by: Stefani Seibold <stefani@seibold.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c868de9e852bcea3e2f52cf0e626316da4ffada7
Author: Ben Jencks <ben@bjencks.net>
Date:   Tue Apr 2 00:35:08 2013 -0400

    usb/misc/appledisplay: Add 24" LED Cinema display
    
    commit e7d3b6e22c871ba36d052ca99bc8ceca4d546a60 upstream.
    
    Add the Apple 24" LED Cinema display to the supported devices.
    
    Signed-off-by: Ben Jencks <ben@bjencks.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b174e3c05c191442e0675e8d9c329f2c42ee363a
Author: Yogesh Ashok Powar <yogeshp@marvell.com>
Date:   Tue Apr 23 16:49:48 2013 -0700

    mwifiex: Call pci_release_region after calling pci_disable_device
    
    commit 5b0d9b218b74042ff72bf4bfda6eeb2e4bf98397 upstream.
    
    "drivers should call pci_release_region() AFTER
    calling pci_disable_device()"
    
    Please refer section 3.2 Request MMIO/IOP resources
    in Documentation/PCI/pci.txt
    
    Signed-off-by: Avinash Patil <patila@marvell.com>
    Signed-off-by: Amitkumar Karwar <akarwar@marvell.com>
    Signed-off-by: Yogesh Ashok Powar <yogeshp@marvell.com>
    Signed-off-by: Bing Zhao <bzhao@marvell.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9758cfd231405b21f2244c9f4cc1fff89fcee3e0
Author: Yogesh Ashok Powar <yogeshp@marvell.com>
Date:   Tue Apr 23 16:49:47 2013 -0700

    mwifiex: Use pci_release_region() instead of a pci_release_regions()
    
    commit c380aafb77b7435d010698fe3ca6d3e1cd745fde upstream.
    
    PCI regions are associated with the device using
    pci_request_region() call. Hence use pci_release_region()
    instead of pci_release_regions().
    
    Signed-off-by: Yogesh Ashok Powar <yogeshp@marvell.com>
    Signed-off-by: Amitkumar Karwar <akarwar@marvell.com>
    Signed-off-by: Avinash Patil <patila@marvell.com>
    Signed-off-by: Bing Zhao <bzhao@marvell.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a7cdf1caa46fabd4661b65e72752506649b15ac
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Tue Apr 23 15:13:14 2013 +0000

    powerpc/spufs: Initialise inode->i_ino in spufs_new_inode()
    
    commit 6747e83235caecd30b186d1282e4eba7679f81b7 upstream.
    
    In commit 85fe402 (fs: do not assign default i_ino in new_inode), the
    initialisation of i_ino was removed from new_inode() and pushed down
    into the callers. However spufs_new_inode() was not updated.
    
    This exhibits as no files appearing in /spu, because all our dirents
    have a zero inode, which readdir() seems to dislike.
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59973aa09eaac7eb849badd597453ec0b4230ebf
Author: Michael Neuling <michael.neuling@au1.ibm.com>
Date:   Wed Apr 24 00:30:09 2013 +0000

    powerpc: Add isync to copy_and_flush
    
    commit 29ce3c5073057991217916abc25628e906911757 upstream.
    
    In __after_prom_start we copy the kernel down to zero in two calls to
    copy_and_flush.  After the first call (copy from 0 to copy_to_here:)
    we jump to the newly copied code soon after.
    
    Unfortunately there's no isync between the copy of this code and the
    jump to it.  Hence it's possible that stale instructions could still be
    in the icache or pipeline before we branch to it.
    
    We've seen this on real machines and it's results in no console output
    after:
      calling quiesce...
      returning from prom_init
    
    The below adds an isync to ensure that the copy and flushing has
    completed before any branching to the new instructions occurs.
    
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 635b15ddf03123c602a6bfb0505c01d0a0fb46a4
Author: Maxime Ripard <mripard@kernel.org>
Date:   Sat Mar 23 10:58:57 2013 +0100

    ARM: at91: Fix typo in restart code panic message
    
    commit e7619459d47a673af3433208a42f583af920e9db upstream.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Acked-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c61996dfded2b01a688be41df3cc97bd3cf9d23
Author: Bjørn Mork <bjorn@mork.no>
Date:   Tue Apr 9 11:26:02 2013 +0200

    USB: option: add a D-Link DWM-156 variant
    
    commit a2a2d6c7f93e160b52a4ad0164db1f43f743ae0f upstream.
    
    Adding support for a Mediatek based device labelled as
    D-Link Model: DWM-156, H/W Ver: A7
    
    Also adding two other device IDs found in the Debian(!)
    packages included on the embedded device driver CD.
    
    This is a composite MBIM + serial ports + card reader device:
    
    T:  Bus=04 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 14 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2001 ProdID=7d01 Rev= 3.00
    S:  Manufacturer=D-Link,Inc
    S:  Product=D-Link DWM-156
    C:* #Ifs= 7 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=125us
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=02 Prot=01 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=500us
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=usb-storage
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 976c850e9deae3e2cc783a2b2f055b4881df7bce
Author: Filippo Turato <nnj7585@gmail.com>
Date:   Sat Apr 20 15:04:08 2013 +0200

    USB: serial: option: Added support Olivetti Olicard 145
    
    commit d19bf5cedfd7d53854a3bd699c98b467b139833b upstream.
    
    This adds PID for Olivetti Olicard 145 in option.c
    
    Signed-off-by: Filippo Turato <nnj7585@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
