commit 99c5a856dcee7658ec7e250aa477a9afaab8cfc6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jan 22 20:54:23 2016 -0800

    Linux 4.1.16

commit b71567e6c9a2b15b7be9cb8ca695e9c990c0513b
Author: Yevgeny Pats <yevgeny@perception-point.io>
Date:   Tue Jan 19 22:09:04 2016 +0000

    KEYS: Fix keyring ref leak in join_session_keyring()
    
    commit 23567fd052a9abb6d67fe8e7a9ccdd9800a540f2 upstream.
    
    This fixes CVE-2016-0728.
    
    If a thread is asked to join as a session keyring the keyring that's already
    set as its session, we leak a keyring reference.
    
    This can be tested with the following program:
    
            #include <stddef.h>
            #include <stdio.h>
            #include <sys/types.h>
            #include <keyutils.h>
    
            int main(int argc, const char *argv[])
            {
                    int i = 0;
                    key_serial_t serial;
    
                    serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,
                                    "leaked-keyring");
                    if (serial < 0) {
                            perror("keyctl");
                            return -1;
                    }
    
                    if (keyctl(KEYCTL_SETPERM, serial,
                               KEY_POS_ALL | KEY_USR_ALL) < 0) {
                            perror("keyctl");
                            return -1;
                    }
    
                    for (i = 0; i < 100; i++) {
                            serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,
                                            "leaked-keyring");
                            if (serial < 0) {
                                    perror("keyctl");
                                    return -1;
                            }
                    }
    
                    return 0;
            }
    
    If, after the program has run, there something like the following line in
    /proc/keys:
    
    3f3d898f I--Q---   100 perm 3f3f0000     0     0 keyring   leaked-keyring: empty
    
    with a usage count of 100 * the number of times the program has been run,
    then the kernel is malfunctioning.  If leaked-keyring has zero usages or
    has been garbage collected, then the problem is fixed.
    
    Reported-by: Yevgeny Pats <yevgeny@perception-point.io>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Don Zickus <dzickus@redhat.com>
    Acked-by: Prarit Bhargava <prarit@redhat.com>
    Acked-by: Jarod Wilson <jarod@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98fec5a2034454f004ca6471de4df4ded2c5f79f
Author: David Howells <dhowells@redhat.com>
Date:   Fri Dec 18 01:34:26 2015 +0000

    KEYS: Fix race between read and revoke
    
    commit b4a1b4f5047e4f54e194681125c74c0aa64d637d upstream.
    
    This fixes CVE-2015-7550.
    
    There's a race between keyctl_read() and keyctl_revoke().  If the revoke
    happens between keyctl_read() checking the validity of a key and the key's
    semaphore being taken, then the key type read method will see a revoked key.
    
    This causes a problem for the user-defined key type because it assumes in
    its read method that there will always be a payload in a non-revoked key
    and doesn't check for a NULL pointer.
    
    Fix this by making keyctl_read() check the validity of a key after taking
    semaphore instead of before.
    
    I think the bug was introduced with the original keyrings code.
    
    This was discovered by a multithreaded test program generated by syzkaller
    (http://github.com/google/syzkaller).  Here's a cleaned up version:
    
            #include <sys/types.h>
            #include <keyutils.h>
            #include <pthread.h>
            void *thr0(void *arg)
            {
                    key_serial_t key = (unsigned long)arg;
                    keyctl_revoke(key);
                    return 0;
            }
            void *thr1(void *arg)
            {
                    key_serial_t key = (unsigned long)arg;
                    char buffer[16];
                    keyctl_read(key, buffer, 16);
                    return 0;
            }
            int main()
            {
                    key_serial_t key = add_key("user", "%", "foo", 3, KEY_SPEC_USER_KEYRING);
                    pthread_t th[5];
                    pthread_create(&th[0], 0, thr0, (void *)(unsigned long)key);
                    pthread_create(&th[1], 0, thr1, (void *)(unsigned long)key);
                    pthread_create(&th[2], 0, thr0, (void *)(unsigned long)key);
                    pthread_create(&th[3], 0, thr1, (void *)(unsigned long)key);
                    pthread_join(th[0], 0);
                    pthread_join(th[1], 0);
                    pthread_join(th[2], 0);
                    pthread_join(th[3], 0);
                    return 0;
            }
    
    Build as:
    
            cc -o keyctl-race keyctl-race.c -lkeyutils -lpthread
    
    Run as:
    
            while keyctl-race; do :; done
    
    as it may need several iterations to crash the kernel.  The crash can be
    summarised as:
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000010
            IP: [<ffffffff81279b08>] user_read+0x56/0xa3
            ...
            Call Trace:
             [<ffffffff81276aa9>] keyctl_read_key+0xb6/0xd7
             [<ffffffff81277815>] SyS_keyctl+0x83/0xe0
             [<ffffffff815dbb97>] entry_SYSCALL_64_fastpath+0x12/0x6f
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3366472496482e75a83db93846226b8a360ff911
Author: David Howells <dhowells@redhat.com>
Date:   Thu Oct 15 17:21:37 2015 +0100

    KEYS: Fix crash when attempt to garbage collect an uninstantiated keyring
    
    commit f05819df10d7b09f6d1eb6f8534a8f68e5a4fe61 upstream.
    
    The following sequence of commands:
    
        i=`keyctl add user a a @s`
        keyctl request2 keyring foo bar @t
        keyctl unlink $i @s
    
    tries to invoke an upcall to instantiate a keyring if one doesn't already
    exist by that name within the user's keyring set.  However, if the upcall
    fails, the code sets keyring->type_data.reject_error to -ENOKEY or some
    other error code.  When the key is garbage collected, the key destroy
    function is called unconditionally and keyring_destroy() uses list_empty()
    on keyring->type_data.link - which is in a union with reject_error.
    Subsequently, the kernel tries to unlink the keyring from the keyring names
    list - which oopses like this:
    
            BUG: unable to handle kernel paging request at 00000000ffffff8a
            IP: [<ffffffff8126e051>] keyring_destroy+0x3d/0x88
            ...
            Workqueue: events key_garbage_collector
            ...
            RIP: 0010:[<ffffffff8126e051>] keyring_destroy+0x3d/0x88
            RSP: 0018:ffff88003e2f3d30  EFLAGS: 00010203
            RAX: 00000000ffffff82 RBX: ffff88003bf1a900 RCX: 0000000000000000
            RDX: 0000000000000000 RSI: 000000003bfc6901 RDI: ffffffff81a73a40
            RBP: ffff88003e2f3d38 R08: 0000000000000152 R09: 0000000000000000
            R10: ffff88003e2f3c18 R11: 000000000000865b R12: ffff88003bf1a900
            R13: 0000000000000000 R14: ffff88003bf1a908 R15: ffff88003e2f4000
            ...
            CR2: 00000000ffffff8a CR3: 000000003e3ec000 CR4: 00000000000006f0
            ...
            Call Trace:
             [<ffffffff8126c756>] key_gc_unused_keys.constprop.1+0x5d/0x10f
             [<ffffffff8126ca71>] key_garbage_collector+0x1fa/0x351
             [<ffffffff8105ec9b>] process_one_work+0x28e/0x547
             [<ffffffff8105fd17>] worker_thread+0x26e/0x361
             [<ffffffff8105faa9>] ? rescuer_thread+0x2a8/0x2a8
             [<ffffffff810648ad>] kthread+0xf3/0xfb
             [<ffffffff810647ba>] ? kthread_create_on_node+0x1c2/0x1c2
             [<ffffffff815f2ccf>] ret_from_fork+0x3f/0x70
             [<ffffffff810647ba>] ? kthread_create_on_node+0x1c2/0x1c2
    
    Note the value in RAX.  This is a 32-bit representation of -ENOKEY.
    
    The solution is to only call ->destroy() if the key was successfully
    instantiated.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 868384ceda39e6e2f1cfd9f46430f4d8340c9e72
Author: David Howells <dhowells@redhat.com>
Date:   Fri Sep 25 16:30:08 2015 +0100

    KEYS: Fix race between key destruction and finding a keyring by name
    
    commit 94c4554ba07adbdde396748ee7ae01e86cf2d8d7 upstream.
    
    There appears to be a race between:
    
     (1) key_gc_unused_keys() which frees key->security and then calls
         keyring_destroy() to unlink the name from the name list
    
     (2) find_keyring_by_name() which calls key_permission(), thus accessing
         key->security, on a key before checking to see whether the key usage is 0
         (ie. the key is dead and might be cleaned up).
    
    Fix this by calling ->destroy() before cleaning up the core key data -
    including key->security.
    
    Reported-by: Petr Matousek <pmatouse@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac5966d165a9b4115744269a64ffd3d061b5efe2
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Wed Dec 16 16:45:54 2015 +0800

    rhashtable: Fix walker list corruption
    
    [ Upstream commit c6ff5268293ef98e48a99597e765ffc417e39fa5 ]
    
    The commit ba7c95ea3870fe7b847466d39a049ab6f156aa2c ("rhashtable:
    Fix sleeping inside RCU critical section in walk_stop") introduced
    a new spinlock for the walker list.  However, it did not convert
    all existing users of the list over to the new spin lock.  Some
    continued to use the old mutext for this purpose.  This obviously
    led to corruption of the list.
    
    The fix is to use the spin lock everywhere where we touch the list.
    
    This also allows us to do rcu_rad_lock before we take the lock in
    rhashtable_walk_start.  With the old mutex this would've deadlocked
    but it's safe with the new spin lock.
    
    Fixes: ba7c95ea3870 ("rhashtable: Fix sleeping inside RCU...")
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04f694ddd4f44f3174e59777bb94a85263741376
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 16 13:53:10 2015 -0800

    tcp: restore fastopen with no data in SYN packet
    
    [ Upstream commit 07e100f984975cb0417a7d5e626d0409efbad478 ]
    
    Yuchung tracked a regression caused by commit 57be5bdad759 ("ip: convert
    tcp_sendmsg() to iov_iter primitives") for TCP Fast Open.
    
    Some Fast Open users do not actually add any data in the SYN packet.
    
    Fixes: 57be5bdad759 ("ip: convert tcp_sendmsg() to iov_iter primitives")
    Reported-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc01a0aa28400e2fe92251edf8621e91402d51b4
Author: Rainer Weikusat <rweikusat@mobileactivedefense.com>
Date:   Wed Dec 16 20:09:25 2015 +0000

    af_unix: Revert 'lock_interruptible' in stream receive code
    
    [ Upstream commit 3822b5c2fc62e3de8a0f33806ff279fb7df92432 ]
    
    With b3ca9b02b00704053a38bfe4c31dbbb9c13595d0, the AF_UNIX SOCK_STREAM
    receive code was changed from using mutex_lock(&u->readlock) to
    mutex_lock_interruptible(&u->readlock) to prevent signals from being
    delayed for an indefinite time if a thread sleeping on the mutex
    happened to be selected for handling the signal. But this was never a
    problem with the stream receive code (as opposed to its datagram
    counterpart) as that never went to sleep waiting for new messages with the
    mutex held and thus, wouldn't cause secondary readers to block on the
    mutex waiting for the sleeping primary reader. As the interruptible
    locking makes the code more complicated in exchange for no benefit,
    change it back to using mutex_lock.
    
    Signed-off-by: Rainer Weikusat <rweikusat@mobileactivedefense.com>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bc1b5b3a634081d49dbb16aab2b55cec1eb55b9
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Tue Dec 15 21:01:53 2015 +0100

    fou: clean up socket with kfree_rcu
    
    [ Upstream commit 3036facbb7be3a169e35be3b271162b0fa564a2d ]
    
    fou->udp_offloads is managed by RCU. As it is actually included inside
    the fou sockets, we cannot let the memory go out of scope before a grace
    period. We either can synchronize_rcu or switch over to kfree_rcu to
    manage the sockets. kfree_rcu seems appropriate as it is used by vxlan
    and geneve.
    
    Fixes: 23461551c00628c ("fou: Support for foo-over-udp RX path")
    Cc: Tom Herbert <tom@herbertland.com>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78e1970233fd270349834bb8b7ca84c58c7c974c
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Wed Dec 16 18:13:14 2015 +0800

    rhashtable: Enforce minimum size on initial hash table
    
    [ Upstream commit 3a324606bbabfc30084ce9d08169910773ba9a92 ]
    
    William Hua <william.hua@canonical.com> wrote:
    >
    > I wasn't aware there was an enforced minimum size. I simply set the
    > nelem_hint in the rhastable_params struct to 1, expecting it to grow as
    > needed. This caused a segfault afterwards when trying to insert an
    > element.
    
    OK we're doing the size computation before we enforce the limit
    on min_size.
    
    ---8<---
    We need to do the initial hash table size computation after we
    have obtained the correct min_size/max_size parameters.  Otherwise
    we may end up with a hash table whose size is outside the allowed
    envelope.
    
    Fixes: a998f712f77e ("rhashtable: Round up/down min/max_size to...")
    Reported-by: William Hua <william.hua@canonical.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abf79193eb35f1786a3e22fda24cb6cd32b0083b
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Tue Dec 15 22:59:12 2015 +0100

    ipv6: automatically enable stable privacy mode if stable_secret set
    
    [ Upstream commit 9b29c6962b70f232cde4076b1020191e1be0889d ]
    
    Bjørn reported that while we switch all interfaces to privacy stable mode
    when setting the secret, we don't set this mode for new interfaces. This
    does not make sense, so change this behaviour.
    
    Fixes: 622c81d57b392cc ("ipv6: generation of stable privacy addresses for link-local and autoconf")
    Reported-by: Bjørn Mork <bjorn@mork.no>
    Cc: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c72e110be7f6860ccb4e226beb34e2c4537f6bb
Author: tadeusz.struk@intel.com <tadeusz.struk@intel.com>
Date:   Tue Dec 15 10:46:17 2015 -0800

    net: fix uninitialized variable issue
    
    [ Upstream commit 130ed5d105dde141e7fe60d5440aa53e0a84f13b ]
    
    msg_iocb needs to be initialized on the recv/recvfrom path.
    Otherwise afalg will wrongly interpret it as an async call.
    
    Cc: stable@vger.kernel.org
    Reported-by: Harald Freudenberger <freude@linux.vnet.ibm.com>
    Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1814295365a02ff174948159f1eececa55fe4f97
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Dec 15 15:39:08 2015 -0500

    bluetooth: Validate socket address length in sco_sock_bind().
    
    [ Upstream commit 5233252fce714053f0151680933571a2da9cbfb4 ]
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 262ee9759e5f7b0db137fd6ee5780f92e119ff6e
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Dec 15 09:43:12 2015 -0800

    net_sched: make qdisc_tree_decrease_qlen() work for non mq
    
    [ Upstream commit 225734de70cd0a9e0b978f3583a4a87939271d5e ]
    
    Stas Nichiporovich reported a regression in his HFSC qdisc setup
    on a non multi queue device.
    
    It turns out I mistakenly added a TCQ_F_NOPARENT flag on all qdisc
    allocated in qdisc_create() for non multi queue devices, which was
    rather buggy. I was clearly mislead by the TCQ_F_ONETXQUEUE that is
    also set here for no good reason, since it only matters for the root
    qdisc.
    
    Fixes: 4eaf3b84f288 ("net_sched: fix qdisc_tree_decrease_qlen() races")
    Reported-by: Stas Nichiporovich <stasn77@gmail.com>
    Tested-by: Stas Nichiporovich <stasn77@gmail.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd30c2ee7e5dc8258476801a2ec7039a47e2078e
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Wed Dec 16 23:39:04 2015 -0800

    net: check both type and procotol for tcp sockets
    
    [ Upstream commit ac5cc977991d2dce85fc734a6c71ddb33f6fe3c1 ]
    
    Dmitry reported the following out-of-bound access:
    
    Call Trace:
     [<ffffffff816cec2e>] __asan_report_load4_noabort+0x3e/0x40
    mm/kasan/report.c:294
     [<ffffffff84affb14>] sock_setsockopt+0x1284/0x13d0 net/core/sock.c:880
     [<     inline     >] SYSC_setsockopt net/socket.c:1746
     [<ffffffff84aed7ee>] SyS_setsockopt+0x1fe/0x240 net/socket.c:1729
     [<ffffffff85c18c76>] entry_SYSCALL_64_fastpath+0x16/0x7a
    arch/x86/entry/entry_64.S:185
    
    This is because we mistake a raw socket as a tcp socket.
    We should check both sk->sk_type and sk->sk_protocol to ensure
    it is a tcp socket.
    
    Willem points out __skb_complete_tx_timestamp() needs to fix as well.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2af7df8919a74e4567878b1415f4dd5edbb75163
Author: Vlad Yasevich <vyasevich@gmail.com>
Date:   Mon Dec 14 17:44:10 2015 -0500

    skbuff: Fix offset error in skb_reorder_vlan_header
    
    [ Upstream commit f654861569872d10dcb79d9d7ca219b316f94ff0 ]
    
    skb_reorder_vlan_header is called after the vlan header has
    been pulled.  As a result the offset of the begining of
    the mac header has been incrased by 4 bytes (VLAN_HLEN).
    When moving the mac addresses, include this incrase in
    the offset calcualation so that the mac addresses are
    copied correctly.
    
    Fixes: a6e18ff1117 (vlan: Fix untag operations of stacked vlans with REORDER_HEADER off)
    CC: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    CC: Patrick McHardy <kaber@trash.net>
    Signed-off-by: Vladislav Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdaa853b10bc9daebf001f365e1da9287c730f6a
Author: Vlad Yasevich <vyasevich@gmail.com>
Date:   Mon Nov 16 15:43:44 2015 -0500

    vlan: Fix untag operations of stacked vlans with REORDER_HEADER off
    
    [ Upstream commit a6e18ff111701b4ff6947605bfbe9594ec42a6e8 ]
    
    When we have multiple stacked vlan devices all of which have
    turned off REORDER_HEADER flag, the untag operation does not
    locate the ethernet addresses correctly for nested vlans.
    The reason is that in case of REORDER_HEADER flag being off,
    the outer vlan headers are put back and the mac_len is adjusted
    to account for the presense of the header.  Then, the subsequent
    untag operation, for the next level vlan, always use VLAN_ETH_HLEN
    to locate the begining of the ethernet header and that ends up
    being a multiple of 4 bytes short of the actuall beginning
    of the mac header (the multiple depending on the how many vlan
    encapsulations ethere are).
    
    As a reslult, if there are multiple levles of vlan devices
    with REODER_HEADER being off, the recevied packets end up
    being dropped.
    
    To solve this, we use skb->mac_len as the offset.  The value
    is always set on receive path and starts out as a ETH_HLEN.
    The value is also updated when the vlan header manupations occur
    so we know it will be correct.
    
    Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f167b6f4244fbc8d05fcc385b1bf8e70729c9e7c
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Mon Dec 14 13:48:36 2015 -0800

    pptp: verify sockaddr_len in pptp_bind() and pptp_connect()
    
    [ Upstream commit 09ccfd238e5a0e670d8178cf50180ea81ae09ae1 ]
    
    Reported-by: Dmitry Vyukov <dvyukov@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2dea635ac36ee66cae8a9c001694d0b72dd1d939
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Dec 14 14:08:53 2015 -0800

    net: fix IP early demux races
    
    [ Upstream commit 5037e9ef9454917b047f9f3a19b4dd179fbf7cd4 ]
    
    David Wilder reported crashes caused by dst reuse.
    
    <quote David>
      I am seeing a crash on a distro V4.2.3 kernel caused by a double
      release of a dst_entry.  In ipv4_dst_destroy() the call to
      list_empty() finds a poisoned next pointer, indicating the dst_entry
      has already been removed from the list and freed. The crash occurs
      18 to 24 hours into a run of a network stress exerciser.
    </quote>
    
    Thanks to his detailed report and analysis, we were able to understand
    the core issue.
    
    IP early demux can associate a dst to skb, after a lookup in TCP/UDP
    sockets.
    
    When socket cache is not properly set, we want to store into
    sk->sk_dst_cache the dst for future IP early demux lookups,
    by acquiring a stable refcount on the dst.
    
    Problem is this acquisition is simply using an atomic_inc(),
    which works well, unless the dst was queued for destruction from
    dst_release() noticing dst refcount went to zero, if DST_NOCACHE
    was set on dst.
    
    We need to make sure current refcount is not zero before incrementing
    it, or risk double free as David reported.
    
    This patch, being a stable candidate, adds two new helpers, and use
    them only from IP early demux problematic paths.
    
    It might be possible to merge in net-next skb_dst_force() and
    skb_dst_force_safe(), but I prefer having the smallest patch for stable
    kernels : Maybe some skb_dst_force() callers do not expect skb->dst
    can suddenly be cleared.
    
    Can probably be backported back to linux-3.6 kernels
    
    Reported-by: David J. Wilder <dwilder@us.ibm.com>
    Tested-by: David J. Wilder <dwilder@us.ibm.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fa4abd57ad4ef9b2ff9beda2eb29368ae10ae9e
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Fri Dec 4 01:45:40 2015 +0300

    sh_eth: fix kernel oops in skb_put()
    
    [ Upstream commit 248be83dcb3feb3f6332eb3d010a016402138484 ]
    
    In a low memory situation the following kernel oops occurs:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000050
    pgd = 8490c000
    [00000050] *pgd=4651e831, *pte=00000000, *ppte=00000000
    Internal error: Oops: 17 [#1] PREEMPT ARM
    Modules linked in:
    CPU: 0    Not tainted  (3.4-at16 #9)
    PC is at skb_put+0x10/0x98
    LR is at sh_eth_poll+0x2c8/0xa10
    pc : [<8035f780>]    lr : [<8028bf50>]    psr: 60000113
    sp : 84eb1a90  ip : 84eb1ac8  fp : 84eb1ac4
    r10: 0000003f  r9 : 000005ea  r8 : 00000000
    r7 : 00000000  r6 : 940453b0  r5 : 00030000  r4 : 9381b180
    r3 : 00000000  r2 : 00000000  r1 : 000005ea  r0 : 00000000
    Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
    Control: 10c53c7d  Table: 4248c059  DAC: 00000015
    Process klogd (pid: 2046, stack limit = 0x84eb02e8)
    [...]
    
    This is  because netdev_alloc_skb() fails and 'mdp->rx_skbuff[entry]' is left
    NULL but sh_eth_rx() later  uses it without checking.  Add such check...
    
    Reported-by: Yasushi SHOJI <yashi@atmark-techno.com>
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc8f79b522b57ca79a676615003d85b08162ff5a
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Mon Dec 14 22:03:39 2015 +0100

    net: add validation for the socket syscall protocol argument
    
    [ Upstream commit 79462ad02e861803b3840cc782248c7359451cd9 ]
    
    郭永刚 reported that one could simply crash the kernel as root by
    using a simple program:
    
            int socket_fd;
            struct sockaddr_in addr;
            addr.sin_port = 0;
            addr.sin_addr.s_addr = INADDR_ANY;
            addr.sin_family = 10;
    
            socket_fd = socket(10,3,0x40000000);
            connect(socket_fd , &addr,16);
    
    AF_INET, AF_INET6 sockets actually only support 8-bit protocol
    identifiers. inet_sock's skc_protocol field thus is sized accordingly,
    thus larger protocol identifiers simply cut off the higher bits and
    store a zero in the protocol fields.
    
    This could lead to e.g. NULL function pointer because as a result of
    the cut off inet_num is zero and we call down to inet_autobind, which
    is NULL for raw sockets.
    
    kernel: Call Trace:
    kernel:  [<ffffffff816db90e>] ? inet_autobind+0x2e/0x70
    kernel:  [<ffffffff816db9a4>] inet_dgram_connect+0x54/0x80
    kernel:  [<ffffffff81645069>] SYSC_connect+0xd9/0x110
    kernel:  [<ffffffff810ac51b>] ? ptrace_notify+0x5b/0x80
    kernel:  [<ffffffff810236d8>] ? syscall_trace_enter_phase2+0x108/0x200
    kernel:  [<ffffffff81645e0e>] SyS_connect+0xe/0x10
    kernel:  [<ffffffff81779515>] tracesys_phase2+0x84/0x89
    
    I found no particular commit which introduced this problem.
    
    CVE: CVE-2015-8543
    Cc: Cong Wang <cwang@twopensource.com>
    Reported-by: 郭永刚 <guoyonggang@360.cn>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 683f40ec958e669b0d376a0d83c0213783ee7f99
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 9 07:25:06 2015 -0800

    ipv6: sctp: clone options to avoid use after free
    
    [ Upstream commit 9470e24f35ab81574da54e69df90c1eb4a96b43f ]
    
    SCTP is lacking proper np->opt cloning at accept() time.
    
    TCP and DCCP use ipv6_dup_options() helper, do the same
    in SCTP.
    
    We might later factorize this code in a common helper to avoid
    future mistakes.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbc2d32fe4c0bb6ab3028ad986c42577ea059b6e
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Tue Dec 8 12:17:42 2015 +0100

    r8152: fix lockup when runtime PM is enabled
    
    [ Upstream commit 90186af404ada5a47b875bf3c16d0b02bb023ea0 ]
    
    When an interface is brought up which was previously suspended (via
    runtime PM), it would hang. This happens because napi_disable is called
    before napi_enable.
    
    Solve this by avoiding napi_enable in the resume during open function
    (netif_running is true when open is called, IFF_UP is set after a
    successful open; netif_running is false when close is called, but IFF_UP
    is then still set).
    
    While at it, remove WORK_ENABLE check from rtl8152_open (introduced with
    the original change) because it cannot happen:
    
     - After this patch, runtime resume will not set it during rtl8152_open.
     - When link is up, rtl8152_open is not called.
     - When link is down during system/auto suspend/resume, it is not set.
    
    Fixes: 41cec84cf285 ("r8152: don't enable napi before rx ready")
    Link: https://lkml.kernel.org/r/20151205105912.GA1766@al
    Signed-off-by: Peter Wu <peter@lekensteyn.nl>
    Acked-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8a3d39fea6c2ba60c15d61989436a36b3a42064
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Fri Dec 4 16:29:10 2015 +0100

    net: qca_spi: fix transmit queue timeout handling
    
    [ Upstream commit ed7d42e24effbd3681e909711a7a2119a85e9217 ]
    
    In case of a tx queue timeout every transmit is blocked until the
    QCA7000 resets himself and triggers a sync which makes the driver
    flushs the tx ring. So avoid this blocking situation by triggering
    the sync immediately after the timeout. Waking the queue doesn't
    make sense in this situation.
    
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Fixes: 291ab06ecf67 ("net: qualcomm: new Ethernet over SPI driver for QCA7000")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a03ee76fc125c1199a9e36fff031a7627a9fae1
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Fri Dec 4 15:14:05 2015 -0200

    sctp: also copy sk_tsflags when copying the socket
    
    [ Upstream commit 50a5ffb1ef535e3c6989711c51b5d61b543a3b45 ]
    
    As we are keeping timestamps on when copying the socket, we also have to
    copy sk_tsflags.
    
    This is needed since b9f40e21ef42 ("net-timestamp: move timestamp flags
    out of sk_flags").
    
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e2b937a300e338bbe6c131181a97af17a9eb15e
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Fri Dec 4 15:14:04 2015 -0200

    sctp: update the netstamp_needed counter when copying sockets
    
    [ Upstream commit 01ce63c90170283a9855d1db4fe81934dddce648 ]
    
    Dmitry Vyukov reported that SCTP was triggering a WARN on socket destroy
    related to disabling sock timestamp.
    
    When SCTP accepts an association or peel one off, it copies sock flags
    but forgot to call net_enable_timestamp() if a packet timestamping flag
    was copied, leading to extra calls to net_disable_timestamp() whenever
    such clones were closed.
    
    The fix is to call net_enable_timestamp() whenever we copy a sock with
    that flag on, like tcp does.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 497d78eab755c11adf31fbb3fdbaf27c16f758aa
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Fri Dec 4 15:14:03 2015 -0200

    sctp: use the same clock as if sock source timestamps were on
    
    [ Upstream commit cb5e173ed7c03a0d4630ce68a95a186cce3cc872 ]
    
    SCTP echoes a cookie o INIT ACK chunks that contains a timestamp, for
    detecting stale cookies. This cookie is echoed back to the server by the
    client and then that timestamp is checked.
    
    Thing is, if the listening socket is using packet timestamping, the
    cookie is encoded with ktime_get() value and checked against
    ktime_get_real(), as done by __net_timestamp().
    
    The fix is to sctp also use ktime_get_real(), so we can compare bananas
    with bananas later no matter if packet timestamping was enabled or not.
    
    Fixes: 52db882f3fc2 ("net: sctp: migrate cookie life from timeval to ktime")
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d599ae203c46fa6de7af4564c3fef8015f3012ca
Author: Jiri Benc <jbenc@redhat.com>
Date:   Fri Dec 4 13:54:03 2015 +0100

    vxlan: fix incorrect RCO bit in VXLAN header
    
    [ Upstream commit c5fb8caaf91ea6a92920cf24db10cfc94d58de0f ]
    
    Commit 3511494ce2f3d ("vxlan: Group Policy extension") changed definition of
    VXLAN_HF_RCO from 0x00200000 to BIT(24). This is obviously incorrect. It's
    also in violation with the RFC draft.
    
    Fixes: 3511494ce2f3d ("vxlan: Group Policy extension")
    Cc: Thomas Graf <tgraf@suug.ch>
    Cc: Tom Herbert <therbert@google.com>
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Acked-by: Tom Herbert <tom@herbertland.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7a97780df2c5d34f0ab7a9a748708dc5e98a087
Author: Bjørn Mork <bjorn@mork.no>
Date:   Fri Dec 4 14:15:08 2015 +0100

    ipv6: keep existing flags when setting IFA_F_OPTIMISTIC
    
    [ Upstream commit 9a1ec4612c9bfc94d4185e3459055a37a685e575 ]
    
    Commit 64236f3f3d74 ("ipv6: introduce IFA_F_STABLE_PRIVACY flag")
    failed to update the setting of the IFA_F_OPTIMISTIC flag, causing
    the IFA_F_STABLE_PRIVACY flag to be lost if IFA_F_OPTIMISTIC is set.
    
    Cc: Erik Kline <ek@google.com>
    Cc: Fernando Gont <fgont@si6networks.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: YOSHIFUJI Hideaki/吉藤英明 <hideaki.yoshifuji@miraclelinux.com>
    Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Fixes: 64236f3f3d74 ("ipv6: introduce IFA_F_STABLE_PRIVACY flag")
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4907d0a5567efbe2fe2e31d372a3e72d1f7f871
Author: Pavel Machek <pavel@ucw.cz>
Date:   Fri Dec 4 09:50:00 2015 +0100

    atl1c: Improve driver not to do order 4 GFP_ATOMIC allocation
    
    [ Upstream commit f2a3771ae8aca879c32336c76ad05a017629bae2 ]
    
    atl1c driver is doing order-4 allocation with GFP_ATOMIC
    priority. That often breaks  networking after resume. Switch to
    GFP_KERNEL. Still not ideal, but should be significantly better.
    
    atl1c_setup_ring_resources() is called from .open() function, and
    already uses GFP_KERNEL, so this change is safe.
    
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bb18eb6e464694ca851bd9b86d64ab747ecbcbd
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Thu Dec 3 17:21:50 2015 +0100

    gre6: allow to update all parameters via rtnl
    
    [ Upstream commit 6a61d4dbf4f54b5683e0f1e58d873cecca7cb977 ]
    
    Parameters were updated only if the kernel was unable to find the tunnel
    with the new parameters, ie only if core pamareters were updated (keys,
    addr, link, type).
    Now it's possible to update ttl, hoplimit, flowinfo and flags.
    
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e7b09211aaadac86fe3ae8e0a94566bfb2ac83d
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Thu Dec 3 16:49:32 2015 +0100

    pppoe: fix memory corruption in padt work structure
    
    [ Upstream commit fe53985aaac83d516b38358d4f39921d9942a0e2 ]
    
    pppoe_connect() mustn't touch the padt_work field of pppoe sockets
    because that work could be already pending.
    
    [   21.473147] BUG: unable to handle kernel NULL pointer dereference at 00000004
    [   21.474523] IP: [<c1043177>] process_one_work+0x29/0x31c
    [   21.475164] *pde = 00000000
    [   21.475513] Oops: 0000 [#1] SMP
    [   21.475910] Modules linked in: pppoe pppox ppp_generic slhc crc32c_intel aesni_intel virtio_net xts aes_i586 lrw gf128mul ablk_helper cryptd evdev acpi_cpufreq processor serio_raw button ext4 crc16 mbcache jbd2 virtio_blk virtio_pci virtio_ring virtio
    [   21.476168] CPU: 2 PID: 164 Comm: kworker/2:2 Not tainted 4.4.0-rc1 #1
    [   21.476168] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Debian-1.8.2-1 04/01/2014
    [   21.476168] task: f5f83c00 ti: f5e28000 task.ti: f5e28000
    [   21.476168] EIP: 0060:[<c1043177>] EFLAGS: 00010046 CPU: 2
    [   21.476168] EIP is at process_one_work+0x29/0x31c
    [   21.484082] EAX: 00000000 EBX: f678b2a0 ECX: 00000004 EDX: 00000000
    [   21.484082] ESI: f6c69940 EDI: f5e29ef0 EBP: f5e29f0c ESP: f5e29edc
    [   21.484082]  DS: 007b ES: 007b FS: 00d8 GS: 0000 SS: 0068
    [   21.484082] CR0: 80050033 CR2: 000000a4 CR3: 317ad000 CR4: 00040690
    [   21.484082] Stack:
    [   21.484082]  00000000 f6c69950 00000000 f6c69940 c0042338 f5e29f0c c1327945 00000000
    [   21.484082]  00000008 f678b2a0 f6c69940 f678b2b8 f5e29f30 c1043984 f5f83c00 f6c69970
    [   21.484082]  f678b2a0 c10437d3 f6775e80 f678b2a0 c10437d3 f5e29fac c1047059 f5e29f74
    [   21.484082] Call Trace:
    [   21.484082]  [<c1327945>] ? _raw_spin_lock_irq+0x28/0x30
    [   21.484082]  [<c1043984>] worker_thread+0x1b1/0x244
    [   21.484082]  [<c10437d3>] ? rescuer_thread+0x229/0x229
    [   21.484082]  [<c10437d3>] ? rescuer_thread+0x229/0x229
    [   21.484082]  [<c1047059>] kthread+0x8f/0x94
    [   21.484082]  [<c1327a32>] ? _raw_spin_unlock_irq+0x22/0x26
    [   21.484082]  [<c1327ee9>] ret_from_kernel_thread+0x21/0x38
    [   21.484082]  [<c1046fca>] ? kthread_parkme+0x19/0x19
    [   21.496082] Code: 5d c3 55 89 e5 57 56 53 89 c3 83 ec 24 89 d0 89 55 e0 8d 7d e4 e8 6c d8 ff ff b9 04 00 00 00 89 45 d8 8b 43 24 89 45 dc 8b 45 d8 <8b> 40 04 8b 80 e0 00 00 00 c1 e8 05 24 01 88 45 d7 8b 45 e0 8d
    [   21.496082] EIP: [<c1043177>] process_one_work+0x29/0x31c SS:ESP 0068:f5e29edc
    [   21.496082] CR2: 0000000000000004
    [   21.496082] ---[ end trace e362cc9cf10dae89 ]---
    
    Reported-by: Andrew <nitr0@seti.kr.ua>
    Fixes: 287f3a943fef ("pppoe: Use workqueue to die properly when a PADT is received")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2518cb2956c7774dcbf5f361bdd9c126ec32b310
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Wed Nov 18 02:01:21 2015 +0000

    usb: Use the USB_SS_MULT() macro to decode burst multiplier for log message
    
    commit 5377adb092664d336ac212499961cac5e8728794 upstream.
    
    usb_parse_ss_endpoint_companion() now decodes the burst multiplier
    correctly in order to check that it's <= 3, but still uses the wrong
    expression if warning that it's > 3.
    
    Fixes: ff30cbc8da42 ("usb: Use the USB_SS_MULT() macro to get the ...")
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c922602c0d2ae1f435d16b6124cfa1137ce83a7e
Author: Hans Yang <hansy@nvidia.com>
Date:   Tue Dec 1 16:54:59 2015 +0800

    usb: core : hub: Fix BOS 'NULL pointer' kernel panic
    
    commit 464ad8c43a9ead98c2b0eaed86bea727f2ad106e upstream.
    
    When a USB 3.0 mass storage device is disconnected in transporting
    state, storage device driver may handle it as a transport error and
    reset the device by invoking usb_reset_and_verify_device()
    and following could happen:
    
    in usb_reset_and_verify_device():
       udev->bos = NULL;
    
    For U1/U2 enabled devices, driver will disable LPM, and in some
    conditions:
       from usb_unlocked_disable_lpm()
        --> usb_disable_lpm()
        --> usb_enable_lpm()
            udev->bos->ss_cap->bU1devExitLat;
    
    And it causes 'NULL pointer' and 'kernel panic':
    
    [  157.976257] Unable to handle kernel NULL pointer dereference
    at virtual address 00000010
    ...
    [  158.026400] PC is at usb_enable_link_state+0x34/0x2e0
    [  158.031442] LR is at usb_enable_lpm+0x98/0xac
    ...
    [  158.137368] [<ffffffc0006a1cac>] usb_enable_link_state+0x34/0x2e0
    [  158.143451] [<ffffffc0006a1fec>] usb_enable_lpm+0x94/0xac
    [  158.148840] [<ffffffc0006a20e8>] usb_disable_lpm+0xa8/0xb4
    ...
    [  158.214954] Kernel panic - not syncing: Fatal exception
    
    This commit moves 'udev->bos = NULL' behind usb_unlocked_disable_lpm()
    to prevent from NULL pointer access.
    
    Issue can be reproduced by following setup:
    1) A SS pen drive behind a SS hub connected to the host.
    2) Transporting data between the pen drive and the host.
    3) Abruptly disconnect hub and pen drive from host.
    4) With a chance it crashes.
    
    Signed-off-by: Hans Yang <hansy@nvidia.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12ca1c84a29f68d215d60b1abc2960280176dac6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Nov 18 17:18:40 2015 +0100

    usb: musb: USB_TI_CPPI41_DMA requires dmaengine support
    
    commit 183e53e8ddf4165c3763181682189362d6b403f7 upstream.
    
    The CPPI-4.1 driver selects TI_CPPI41, which is a dmaengine
    driver and that may not be available when CONFIG_DMADEVICES
    is not set:
    
    warning: (USB_TI_CPPI41_DMA) selects TI_CPPI41 which has unmet direct dependencies (DMADEVICES && ARCH_OMAP)
    
    This adds an extra dependency to avoid generating warnings in randconfig
    builds. Ideally we'd remove the 'select' statement, but that has the
    potential to break defconfig files.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Fixes: 411dd19c682d ("usb: musb: Kconfig: Select the DMA driver if DMA mode of MUSB is enabled")
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21d6ff27bb30b461ab7a7cfb418d8c45b9ba6887
Author: Felipe Balbi <balbi@ti.com>
Date:   Wed Nov 18 17:06:00 2015 -0600

    usb: gadget: pxa27x: fix suspend callback
    
    commit 391e6dcb37857d5659b53def2f41e2f56850d33c upstream.
    
    pxa27x disconnects pullups on suspend but doesn't
    notify the gadget driver about it, so gadget driver
    can't disable the endpoints it was using.
    
    This causes problems on resume because gadget core
    will think endpoints are still enabled and just
    ignore the following usb_ep_enable().
    
    Fix this problem by calling
    gadget_driver->disconnect().
    
    Tested-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de04cf3c618b358d65c2b30340b5f9b0740d8cc8
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Nov 21 00:36:44 2015 +0300

    USB: whci-hcd: add check for dma mapping error
    
    commit f9fa1887dcf26bd346665a6ae3d3f53dec54cba1 upstream.
    
    qset_fill_page_list() do not check for dma mapping errors.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04db25a46b25ac5c29082a61f96067c8cd5984ad
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Dec 10 15:27:21 2015 -0500

    USB: add quirk for devices with broken LPM
    
    commit ad87e03213b552a5c33d5e1e7a19a73768397010 upstream.
    
    Some USB device / host controller combinations seem to have problems
    with Link Power Management.  For example, Steinar found that his xHCI
    controller wouldn't handle bandwidth calculations correctly for two
    video cards simultaneously when LPM was enabled, even though the bus
    had plenty of bandwidth available.
    
    This patch introduces a new quirk flag for devices that should remain
    disabled for LPM, and creates quirk entries for Steinar's devices.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Steinar H. Gunderson <sgunderson@bigfoot.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee10f5fe09105cc5495f00156f9a7914bbfa1c32
Author: Konstantin Shkolnyy <konstantin.shkolnyy@gmail.com>
Date:   Tue Nov 10 16:40:13 2015 -0600

    USB: cp210x: Remove CP2110 ID from compatibility list
    
    commit 7c90e610b60cd1ed6abafd806acfaedccbbe52d1 upstream.
    
    CP2110 ID (0x10c4, 0xea80) doesn't belong here because it's a HID
    and completely different from CP210x devices.
    
    Signed-off-by: Konstantin Shkolnyy <konstantin.shkolnyy@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7572562ef8dc36cb97e2d28fa9fd8f49ea6125f
Author: Dmitry Katsubo <dmitry.katsubo@gmail.com>
Date:   Fri Nov 20 01:30:44 2015 +0100

    usb-storage: Fix scsi-sd failure "Invalid field in cdb" for USB adapter JMicron
    
    commit 9fa62b1a31c96715aef34f25000e882ed4ac4876 upstream.
    
    The patch extends the family of SATA-to-USB JMicron adapters that need
    FUA to be disabled and applies the same policy for uas driver.
    See details in http://unix.stackexchange.com/questions/237204/
    
    Signed-off-by: Dmitry Katsubo <dmitry.katsubo@gmail.com>
    Tested-by: Dmitry Katsubo <dmitry.katsubo@gmail.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbe2ca0d54e997ce7ece0b97230b1f1d88124e5d
Author: Jonas Jonsson <jonas@ludd.ltu.se>
Date:   Sun Nov 22 11:47:18 2015 +0100

    USB: serial: Another Infineon flash loader USB ID
    
    commit a0e80fbd56b4573de997c9a088a33abbc1121400 upstream.
    
    The flash loader has been seen on a Telit UE910 modem. The flash loader
    is a bit special, it presents both an ACM and CDC Data interface but
    only the latter is useful. Unless a magic string is sent to the device
    it will disappear and the regular modem device appears instead.
    
    Signed-off-by: Jonas Jonsson <jonas@ludd.ltu.se>
    Tested-by: Daniele Palmas <dnlplm@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71cb018402c8363a4bd49b0b0057b32504ed9fd6
Author: Jonas Jonsson <jonas@ludd.ltu.se>
Date:   Sun Nov 22 11:47:17 2015 +0100

    USB: cdc_acm: Ignore Infineon Flash Loader utility
    
    commit f33a7f72e5fc033daccbb8d4753d7c5c41a4d67b upstream.
    
    Some modems, such as the Telit UE910, are using an Infineon Flash Loader
    utility. It has two interfaces, 2/2/0 (Abstract Modem) and 10/0/0 (CDC
    Data). The latter can be used as a serial interface to upgrade the
    firmware of the modem. However, that isn't possible when the cdc-acm
    driver takes control of the device.
    
    The following is an explanation of the behaviour by Daniele Palmas during
    discussion on linux-usb.
    
    "This is what happens when the device is turned on (without modifying
    the drivers):
    
    [155492.352031] usb 1-3: new high-speed USB device number 27 using ehci-pci
    [155492.485429] usb 1-3: config 1 interface 0 altsetting 0 endpoint 0x81 has an invalid bInterval 255, changing to 11
    [155492.485436] usb 1-3: New USB device found, idVendor=058b, idProduct=0041
    [155492.485439] usb 1-3: New USB device strings: Mfr=0, Product=0, SerialNumber=0
    [155492.485952] cdc_acm 1-3:1.0: ttyACM0: USB ACM device
    
    This is the flashing device that is caught by the cdc-acm driver. Once
    the ttyACM appears, the application starts sending a magic string
    (simple write on the file descriptor) to keep the device in flashing
    mode. If this magic string is not properly received in a certain time
    interval, the modem goes on in normal operative mode:
    
    [155493.748094] usb 1-3: USB disconnect, device number 27
    [155494.916025] usb 1-3: new high-speed USB device number 28 using ehci-pci
    [155495.059978] usb 1-3: New USB device found, idVendor=1bc7, idProduct=0021
    [155495.059983] usb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=3
    [155495.059986] usb 1-3: Product: 6 CDC-ACM + 1 CDC-ECM
    [155495.059989] usb 1-3: Manufacturer: Telit
    [155495.059992] usb 1-3: SerialNumber: 359658044004697
    [155495.138958] cdc_acm 1-3:1.0: ttyACM0: USB ACM device
    [155495.140832] cdc_acm 1-3:1.2: ttyACM1: USB ACM device
    [155495.142827] cdc_acm 1-3:1.4: ttyACM2: USB ACM device
    [155495.144462] cdc_acm 1-3:1.6: ttyACM3: USB ACM device
    [155495.145967] cdc_acm 1-3:1.8: ttyACM4: USB ACM device
    [155495.147588] cdc_acm 1-3:1.10: ttyACM5: USB ACM device
    [155495.154322] cdc_ether 1-3:1.12 wwan0: register 'cdc_ether' at usb-0000:00:1a.7-3, Mobile Broadband Network Device, 00:00:11:12:13:14
    
    Using the cdc-acm driver, the string, though being sent in the same way
    than using the usb-serial-simple driver (I can confirm that the data is
    passing properly since I used an hw usb sniffer), does not make the
    device to stay in flashing mode."
    
    Signed-off-by: Jonas Jonsson <jonas@ludd.ltu.se>
    Tested-by: Daniele Palmas <dnlplm@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f2052f205a8e35943afb4179b2b50f759ab6da2
Author: Azael Avalos <coproscefalo@gmail.com>
Date:   Wed Nov 4 09:28:26 2015 -0700

    toshiba_acpi: Initialize hotkey_event_type variable
    
    commit d2f20619942fe4618160a7fa3dbdcbac335cff59 upstream.
    
    Commit 53147b6cabee5e8d1997b5682fcc0c3b72ddf9c2 ("toshiba_acpi: Fix
    hotkeys registration on some toshiba models") fixed an issue on some
    laptops regarding hotkeys registration, however, if failed to address
    the initialization of the hotkey_event_type variable, and thus, it can
    lead to potential unwanted effects as the variable is being checked.
    
    This patch initializes such variable to avoid such unwanted effects.
    
    Signed-off-by: Azael Avalos <coproscefalo@gmail.com>
    Signed-off-by: Darren Hart <dvhart@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b675ad4441e6bb42291a6953843a1e487ba2752
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Tue Sep 29 00:32:19 2015 +0300

    tpm, tpm_tis: fix tpm_tis ACPI detection issue with TPM 2.0
    
    commit 399235dc6e95400a1322a9999e92073bc572f0c8 upstream.
    
    Both for FIFO and CRB interface TCG has decided to use the same HID
    MSFT0101. They can be differentiated by looking at the start method from
    TPM2 ACPI table. This patches makes necessary fixes to tpm_tis and
    tpm_crb modules in order to correctly detect, which module should be
    used.
    
    For MSFT0101 we must use struct acpi_driver because struct pnp_driver
    has a 7 character limitation.
    
    It turned out that the root cause in b371616b8 was not correct for
    https://bugzilla.kernel.org/show_bug.cgi?id=98181.
    
    v2:
    
    * One fixup was missing from v1: is_tpm2_fifo -> is_fifo
    
    v3:
    
    * Use pnp_driver for existing HIDs and acpi_driver only for MSFT0101 in
      order ensure backwards compatibility.
    
    v4:
    
    * Check for FIFO before doing *anything* in crb_acpi_add().
    * There was return immediately after acpi_bus_unregister_driver() in
      cleanup_tis(). This caused pnp_unregister_driver() not to be called.
    
    Reported-by: Michael Saunders <mick.saunders@gmail.com>
    Reported-by: Michael Marley <michael@michaelmarley.com>
    Reported-by: Jethro Beekman <kernel@jbeekman.nl>
    Reported-by: Matthew Garrett <mjg59@srcf.ucam.org>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Tested-by: Michael Marley <michael@michaelmarley.com>
    Tested-by: Mimi Zohar <zohar@linux.vnet.ibm.com> (on TPM 1.2)
    Reviewed-by: Peter Huewe <peterhuewe@gmx.de>
    Signed-off-by: Peter Huewe <peterhuewe@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
