commit a41ba30d9df20fe141c92aacbb56b6b077f19716
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed May 20 08:17:19 2020 +0200

    Linux 4.14.181

commit b7d6e8c2f7bbf1baa9fa6c88f8832650e77c54c7
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Tue Mar 17 00:07:18 2020 +0000

    Makefile: disallow data races on gcc-10 as well
    
    commit b1112139a103b4b1101d0d2d72931f2d33d8c978 upstream.
    
    gcc-10 will rename --param=allow-store-data-races=0
    to -fno-allow-store-data-races.
    
    The flag change happened at https://gcc.gnu.org/PR92046.
    
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    Acked-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Thomas Backlund <tmb@mageia.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53bbffd24f1273f03ec34e09040de24839ee93c7
Author: Jim Mattson <jmattson@google.com>
Date:   Mon May 11 15:56:16 2020 -0700

    KVM: x86: Fix off-by-one error in kvm_vcpu_ioctl_x86_setup_mce
    
    commit c4e0e4ab4cf3ec2b3f0b628ead108d677644ebd9 upstream.
    
    Bank_num is a one-based count of banks, not a zero-based index. It
    overflows the allocated space only when strictly greater than
    KVM_MAX_MCE_BANKS.
    
    Fixes: a9e38c3e01ad ("KVM: x86: Catch potential overrun in MCE setup")
    Signed-off-by: Jue Wang <juew@google.com>
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Reviewed-by: Peter Shier <pshier@google.com>
    Message-Id: <20200511225616.19557-1-jmattson@google.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d7305f2b31611f88ab61fb17c4553c10ca6aa91
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri May 8 11:59:18 2020 +0200

    ARM: dts: r8a7740: Add missing extal2 to CPG node
    
    commit e47cb97f153193d4b41ca8d48127da14513d54c7 upstream.
    
    The Clock Pulse Generator (CPG) device node lacks the extal2 clock.
    This may lead to a failure registering the "r" clock, or to a wrong
    parent for the "usb24s" clock, depending on MD_CK2 pin configuration and
    boot loader CPG_USBCKCR register configuration.
    
    This went unnoticed, as this does not affect the single upstream board
    configuration, which relies on the first clock input only.
    
    Fixes: d9ffd583bf345e2e ("ARM: shmobile: r8a7740: add SoC clocks to DTS")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Ulrich Hecht <uli+renesas@fpond.eu>
    Link: https://lore.kernel.org/r/20200508095918.6061-1-geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c174fac21ef3c099ef8d7a896ba459cfdba412a8
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Apr 8 11:09:26 2020 +0200

    ARM: dts: r8a73a4: Add missing CMT1 interrupts
    
    commit 0f739fdfe9e5ce668bd6d3210f310df282321837 upstream.
    
    The R-Mobile APE6 Compare Match Timer 1 generates 8 interrupts, one for
    each channel, but currently only 1 is described.
    Fix this by adding the missing interrupts.
    
    Fixes: f7b65230019b9dac ("ARM: shmobile: r8a73a4: Add CMT1 node")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200408090926.25201-1-geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2771f4106dbf7b6bc1f05dd0c21e6f0d352104bc
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Fri Mar 27 11:04:14 2020 +0800

    arm64: dts: rockchip: Rename dwc3 device nodes on rk3399 to make dtc happy
    
    commit 190c7f6fd43a776d4a6da1dac44408104649e9b7 upstream.
    
    The device tree compiler complains that the dwc3 nodes have regs
    properties but no matching unit addresses.
    
    Add the unit addresses to the device node name. While at it, also rename
    the nodes from "dwc3" to "usb", as guidelines require device nodes have
    generic names.
    
    Fixes: 7144224f2c2b ("arm64: dts: rockchip: support dwc3 USB for rk3399")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Link: https://lore.kernel.org/r/20200327030414.5903-7-wens@kernel.org
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85463971d71d8ae3bc70aa20ab15b819b3e12a34
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Fri Mar 27 11:04:10 2020 +0800

    arm64: dts: rockchip: Replace RK805 PMIC node name with "pmic" on rk3328 boards
    
    commit 83b994129fb4c18a8460fd395864a28740e5e7fb upstream.
    
    In some board device tree files, "rk805" was used for the RK805 PMIC's
    node name. However the policy for device trees is that generic names
    should be used.
    
    Replace the "rk805" node name with the generic "pmic" name.
    
    Fixes: 1e28037ec88e ("arm64: dts: rockchip: add rk805 node for rk3328-evb")
    Fixes: 955bebde057e ("arm64: dts: rockchip: add rk3328-rock64 board")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Link: https://lore.kernel.org/r/20200327030414.5903-3-wens@kernel.org
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc739d0b703e98790a0363cdd1f50a03f44a55a6
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sun May 3 23:24:46 2020 +0800

    Revert "ALSA: hda/realtek: Fix pop noise on ALC225"
    
    commit f41224efcf8aafe80ea47ac870c5e32f3209ffc8 upstream.
    
    This reverts commit 3b36b13d5e69d6f51ff1c55d1b404a74646c9757.
    
    Enable power save node breaks some systems with ACL225. Revert the patch
    and use a platform specific quirk for the original issue isntead.
    
    Fixes: 3b36b13d5e69 ("ALSA: hda/realtek: Fix pop noise on ALC225")
    BugLink: https://bugs.launchpad.net/bugs/1875916
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20200503152449.22761-1-kai.heng.feng@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4b37389c67b4b59fc33119c33c724caf1ed67cd
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu May 7 05:13:32 2020 +0000

    usb: gadget: legacy: fix error return code in cdc_bind()
    
    commit e8f7f9e3499a6d96f7f63a4818dc7d0f45a7783b upstream.
    
    If 'usb_otg_descriptor_alloc()' fails, we must return a
    negative error code -ENOMEM, not 0.
    
    Fixes: ab6796ae9833 ("usb: gadget: cdc2: allocate and init otg descriptor by otg capabilities")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f713df10b97ecd6caf0f69b98cbfd142078686dc
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu May 7 05:13:23 2020 +0000

    usb: gadget: legacy: fix error return code in gncm_bind()
    
    commit e27d4b30b71c66986196d8a1eb93cba9f602904a upstream.
    
    If 'usb_otg_descriptor_alloc()' fails, we must return a
    negative error code -ENOMEM, not 0.
    
    Fixes: 1156e91dd7cc ("usb: gadget: ncm: allocate and init otg descriptor by otg capabilities")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24b9d148562a57864bd47e057128c8a46508262c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun May 3 12:47:07 2020 +0200

    usb: gadget: audio: Fix a missing error return value in audio_bind()
    
    commit 19b94c1f9c9a16d41a8de3ccbdb8536cf1aecdbf upstream.
    
    If 'usb_otg_descriptor_alloc()' fails, we must return an error code, not 0.
    
    Fixes: 56023ce0fd70 ("usb: gadget: audio: allocate and init otg descriptor by otg capabilities")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4905cef75be5b999aaaf11e5937056be3b6d6245
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Apr 27 20:04:23 2020 +0200

    usb: gadget: net2272: Fix a memory leak in an error handling path in 'net2272_plat_probe()'
    
    commit ccaef7e6e354fb65758eaddd3eae8065a8b3e295 upstream.
    
    'dev' is allocated in 'net2272_probe_init()'. It must be freed in the error
    handling path, as already done in the remove function (i.e.
    'net2272_plat_remove()')
    
    Fixes: 90fccb529d24 ("usb: gadget: Gadget directory cleanup - group UDC drivers")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22721881fa69d9574cbbaeeda112a2b5f86c9759
Author: Justin Swartz <justin.swartz@risingedge.co.za>
Date:   Tue Jan 14 16:25:02 2020 +0000

    clk: rockchip: fix incorrect configuration of rk3228 aclk_gpu* clocks
    
    commit cec9d101d70a3509da9bd2e601e0b242154ce616 upstream.
    
    The following changes prevent the unrecoverable freezes and rcu_sched
    stall warnings experienced in each of my attempts to take advantage of
    lima.
    
    Replace the COMPOSITE_NOGATE definition of aclk_gpu_pre with a
    COMPOSITE that retains the selection of HDMIPHY as the PLL source, but
    instead makes uses of the aclk_gpu PLL source gate and parent names
    defined by mux_pll_src_4plls_p rather than mux_aclk_gpu_pre_p.
    
    Remove the now unused mux_aclk_gpu_pre_p and the four named but also
    unused definitions (cpll_gpu, gpll_gpu, hdmiphy_gpu and usb480m_gpu)
    of the aclk_gpu PLL source gate.
    
    Use the correct gate offset for aclk_gpu and aclk_gpu_noc.
    
    Fixes: 307a2e9ac524 ("clk: rockchip: add clock controller for rk3228")
    Cc: stable@vger.kernel.org
    Signed-off-by: Justin Swartz <justin.swartz@risingedge.co.za>
    [double-checked against SoC manual and added fixes tag]
    Link: https://lore.kernel.org/r/20200114162503.7548-1-justin.swartz@risingedge.co.za
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5768e0a147ccc03b297b22ec5f6f2ef00fc7a43
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Sat May 16 16:29:20 2020 -0500

    exec: Move would_dump into flush_old_exec
    
    commit f87d1c9559164294040e58f5e3b74a162bf7c6e8 upstream.
    
    I goofed when I added mm->user_ns support to would_dump.  I missed the
    fact that in the case of binfmt_loader, binfmt_em86, binfmt_misc, and
    binfmt_script bprm->file is reassigned.  Which made the move of
    would_dump from setup_new_exec to __do_execve_file before exec_binprm
    incorrect as it can result in would_dump running on the script instead
    of the interpreter of the script.
    
    The net result is that the code stopped making unreadable interpreters
    undumpable.  Which allows them to be ptraced and written to disk
    without special permissions.  Oops.
    
    The move was necessary because the call in set_new_exec was after
    bprm->mm was no longer valid.
    
    To correct this mistake move the misplaced would_dump from
    __do_execve_file into flos_old_exec, before exec_mmap is called.
    
    I tested and confirmed that without this fix I can attach with gdb to
    a script with an unreadable interpreter, and with this fix I can not.
    
    Cc: stable@vger.kernel.org
    Fixes: f84df2a6f268 ("exec: Ensure mm->user_ns contains the execed files")
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cb155717e521a93a43a8b4cd3f5d6d208d76efe
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu May 14 15:31:10 2020 -0500

    x86/unwind/orc: Fix error handling in __unwind_start()
    
    commit 71c95825289f585014fe9741b051d32a7a916680 upstream.
    
    The unwind_state 'error' field is used to inform the reliable unwinding
    code that the stack trace can't be trusted.  Set this field for all
    errors in __unwind_start().
    
    Also, move the zeroing out of the unwind_state struct to before the ORC
    table initialization check, to prevent the caller from reading
    uninitialized data if the ORC table is corrupted.
    
    Fixes: af085d9084b4 ("stacktrace/x86: add function for detecting reliable stack traces")
    Fixes: d3a09104018c ("x86/unwinder/orc: Dont bail on stack overflow")
    Fixes: 98d0c8ebf77e ("x86/unwind/orc: Prevent unwinding before ORC initialization")
    Reported-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/d6ac7215a84ca92b895fdd2e1aa546729417e6e6.1589487277.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e550fa72dd92d8ef757e1dff2cbdf73bf67fd4db
Author: Sriharsha Allenki <sallenki@codeaurora.org>
Date:   Thu May 14 14:04:31 2020 +0300

    usb: xhci: Fix NULL pointer dereference when enqueuing trbs from urb sg list
    
    commit 3c6f8cb92c9178fc0c66b580ea3df1fa3ac1155a upstream.
    
    On platforms with IOMMU enabled, multiple SGs can be coalesced into one
    by the IOMMU driver. In that case the SG list processing as part of the
    completion of a urb on a bulk endpoint can result into a NULL pointer
    dereference with the below stack dump.
    
    <6> Unable to handle kernel NULL pointer dereference at virtual address 0000000c
    <6> pgd = c0004000
    <6> [0000000c] *pgd=00000000
    <6> Internal error: Oops: 5 [#1] PREEMPT SMP ARM
    <2> PC is at xhci_queue_bulk_tx+0x454/0x80c
    <2> LR is at xhci_queue_bulk_tx+0x44c/0x80c
    <2> pc : [<c08907c4>]    lr : [<c08907bc>]    psr: 000000d3
    <2> sp : ca337c80  ip : 00000000  fp : ffffffff
    <2> r10: 00000000  r9 : 50037000  r8 : 00004000
    <2> r7 : 00000000  r6 : 00004000  r5 : 00000000  r4 : 00000000
    <2> r3 : 00000000  r2 : 00000082  r1 : c2c1a200  r0 : 00000000
    <2> Flags: nzcv  IRQs off  FIQs off  Mode SVC_32  ISA ARM  Segment none
    <2> Control: 10c0383d  Table: b412c06a  DAC: 00000051
    <6> Process usb-storage (pid: 5961, stack limit = 0xca336210)
    <snip>
    <2> [<c08907c4>] (xhci_queue_bulk_tx)
    <2> [<c0881b3c>] (xhci_urb_enqueue)
    <2> [<c0831068>] (usb_hcd_submit_urb)
    <2> [<c08350b4>] (usb_sg_wait)
    <2> [<c089f384>] (usb_stor_bulk_transfer_sglist)
    <2> [<c089f2c0>] (usb_stor_bulk_srb)
    <2> [<c089fe38>] (usb_stor_Bulk_transport)
    <2> [<c089f468>] (usb_stor_invoke_transport)
    <2> [<c08a11b4>] (usb_stor_control_thread)
    <2> [<c014a534>] (kthread)
    
    The above NULL pointer dereference is the result of block_len and the
    sent_len set to zero after the first SG of the list when IOMMU driver
    is enabled. Because of this the loop of processing the SGs has run
    more than num_sgs which resulted in a sg_next on the last SG of the
    list which has SG_END set.
    
    Fix this by check for the sg before any attributes of the sg are
    accessed.
    
    [modified reason for null pointer dereference in commit message subject -Mathias]
    Fixes: f9c589e142d04 ("xhci: TD-fragment, align the unsplittable case with a bounce buffer")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sriharsha Allenki <sallenki@codeaurora.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200514110432.25564-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d1e9fbbfb888ef59697766561e982524c0a6a03
Author: Kyungtae Kim <kt0755@gmail.com>
Date:   Sun May 10 05:43:34 2020 +0000

    USB: gadget: fix illegal array access in binding with UDC
    
    commit 15753588bcd4bbffae1cca33c8ced5722477fe1f upstream.
    
    FuzzUSB (a variant of syzkaller) found an illegal array access
    using an incorrect index while binding a gadget with UDC.
    
    Reference: https://www.spinics.net/lists/linux-usb/msg194331.html
    
    This bug occurs when a size variable used for a buffer
    is misused to access its strcpy-ed buffer.
    Given a buffer along with its size variable (taken from user input),
    from which, a new buffer is created using kstrdup().
    Due to the original buffer containing 0 value in the middle,
    the size of the kstrdup-ed buffer becomes smaller than that of the original.
    So accessing the kstrdup-ed buffer with the same size variable
    triggers memory access violation.
    
    The fix makes sure no zero value in the buffer,
    by comparing the strlen() of the orignal buffer with the size variable,
    so that the access to the kstrdup-ed buffer is safe.
    
    BUG: KASAN: slab-out-of-bounds in gadget_dev_desc_UDC_store+0x1ba/0x200
    drivers/usb/gadget/configfs.c:266
    Read of size 1 at addr ffff88806a55dd7e by task syz-executor.0/17208
    
    CPU: 2 PID: 17208 Comm: syz-executor.0 Not tainted 5.6.8 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xce/0x128 lib/dump_stack.c:118
     print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374
     __kasan_report+0x131/0x1b0 mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:641
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     gadget_dev_desc_UDC_store+0x1ba/0x200 drivers/usb/gadget/configfs.c:266
     flush_write_buffer fs/configfs/file.c:251 [inline]
     configfs_write_file+0x2f1/0x4c0 fs/configfs/file.c:283
     __vfs_write+0x85/0x110 fs/read_write.c:494
     vfs_write+0x1cd/0x510 fs/read_write.c:558
     ksys_write+0x18a/0x220 fs/read_write.c:611
     __do_sys_write fs/read_write.c:623 [inline]
     __se_sys_write fs/read_write.c:620 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:620
     do_syscall_64+0x9e/0x510 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Signed-off-by: Kyungtae Kim <kt0755@gmail.com>
    Reported-and-tested-by: Kyungtae Kim <kt0755@gmail.com>
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200510054326.GA19198@pizza01
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4901f9fcf71faad2f0876d482508dade8488da9
Author: Li Jun <jun.li@nxp.com>
Date:   Thu May 14 14:04:32 2020 +0300

    usb: host: xhci-plat: keep runtime active when removing host
    
    commit 1449cb2c2253d37d998c3714aa9b95416d16d379 upstream.
    
    While removing the host (e.g. for USB role switch from host to device),
    if runtime pm is enabled by user, below oops occurs on dwc3 and cdns3
    platforms.
    Keeping the xhci-plat device active during host removal, and disabling
    runtime pm before calling pm_runtime_set_suspended() fixes them.
    
    oops1:
    Unable to handle kernel NULL pointer dereference at virtual address
    0000000000000240
    Internal error: Oops: 96000004 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 0 PID: 5 Comm: kworker/0:0 Not tainted 5.4.3-00107-g64d454a-dirty
    Hardware name: FSL i.MX8MP EVK (DT)
    Workqueue: pm pm_runtime_work
    pstate: 60000005 (nZCv daif -PAN -UAO)
    pc : xhci_suspend+0x34/0x698
    lr : xhci_plat_runtime_suspend+0x2c/0x38
    sp : ffff800011ddbbc0
    Call trace:
     xhci_suspend+0x34/0x698
     xhci_plat_runtime_suspend+0x2c/0x38
     pm_generic_runtime_suspend+0x28/0x40
     __rpm_callback+0xd8/0x138
     rpm_callback+0x24/0x98
     rpm_suspend+0xe0/0x448
     rpm_idle+0x124/0x140
     pm_runtime_work+0xa0/0xf8
     process_one_work+0x1dc/0x370
     worker_thread+0x48/0x468
     kthread+0xf0/0x120
     ret_from_fork+0x10/0x1c
    
    oops2:
    usb 2-1: USB disconnect, device number 2
    xhci-hcd xhci-hcd.1.auto: remove, state 4
    usb usb2: USB disconnect, device number 1
    xhci-hcd xhci-hcd.1.auto: USB bus 2 deregistered
    xhci-hcd xhci-hcd.1.auto: remove, state 4
    usb usb1: USB disconnect, device number 1
    Unable to handle kernel NULL pointer dereference at virtual address
    0000000000000138
    Internal error: Oops: 96000004 [#1] PREEMPT SMP
    Modules linked in:
    CPU: 2 PID: 7 Comm: kworker/u8:0 Not tainted 5.6.0-rc4-next-20200304-03578
    Hardware name: Freescale i.MX8QXP MEK (DT)
    Workqueue: 1-0050 tcpm_state_machine_work
    pstate: 20000005 (nzCv daif -PAN -UAO)
    pc : xhci_free_dev+0x214/0x270
    lr : xhci_plat_runtime_resume+0x78/0x88
    sp : ffff80001006b5b0
    Call trace:
     xhci_free_dev+0x214/0x270
     xhci_plat_runtime_resume+0x78/0x88
     pm_generic_runtime_resume+0x30/0x48
     __rpm_callback+0x90/0x148
     rpm_callback+0x28/0x88
     rpm_resume+0x568/0x758
     rpm_resume+0x260/0x758
     rpm_resume+0x260/0x758
     __pm_runtime_resume+0x40/0x88
     device_release_driver_internal+0xa0/0x1c8
     device_release_driver+0x1c/0x28
     bus_remove_device+0xd4/0x158
     device_del+0x15c/0x3a0
     usb_disable_device+0xb0/0x268
     usb_disconnect+0xcc/0x300
     usb_remove_hcd+0xf4/0x1dc
     xhci_plat_remove+0x78/0xe0
     platform_drv_remove+0x30/0x50
     device_release_driver_internal+0xfc/0x1c8
     device_release_driver+0x1c/0x28
     bus_remove_device+0xd4/0x158
     device_del+0x15c/0x3a0
     platform_device_del.part.0+0x20/0x90
     platform_device_unregister+0x28/0x40
     cdns3_host_exit+0x20/0x40
     cdns3_role_stop+0x60/0x90
     cdns3_role_set+0x64/0xd8
     usb_role_switch_set_role.part.0+0x3c/0x68
     usb_role_switch_set_role+0x20/0x30
     tcpm_mux_set+0x60/0xf8
     tcpm_reset_port+0xa4/0xf0
     tcpm_detach.part.0+0x28/0x50
     tcpm_state_machine_work+0x12ac/0x2360
     process_one_work+0x1c8/0x470
     worker_thread+0x50/0x428
     kthread+0xfc/0x128
     ret_from_fork+0x10/0x18
    Code: c8037c02 35ffffa3 17ffe7c3 f9800011 (c85f7c01)
    ---[ end trace 45b1a173d2679e44 ]---
    
    [minor commit message cleanup  -Mathias]
    Cc: Baolin Wang <baolin.wang@linaro.org>
    Cc: <stable@vger.kernel.org>
    Fixes: b0c69b4bace3 ("usb: host: plat: Enable xHCI plat runtime PM")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Tested-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200514110432.25564-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9b2877ef5df73eef7a8e4c1aa6aa1bc8ccf4ee6
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Fri May 15 00:02:46 2020 +0200

    usb: core: hub: limit HUB_QUIRK_DISABLE_AUTOSUSPEND to USB5534B
    
    commit 76e1ef1d81a4129d7e2fb8c48c83b166d1c8e040 upstream.
    
    On Tue, May 12, 2020 at 09:36:07PM +0800, Kai-Heng Feng wrote [1]:
    > This patch prevents my Raven Ridge xHCI from getting runtime suspend.
    
    The problem described in v5.6 commit 1208f9e1d758c9 ("USB: hub: Fix the
    broken detection of USB3 device in SMSC hub") applies solely to the
    USB5534B hub [2] present on the Kingfisher Infotainment Carrier Board,
    manufactured by Shimafuji Electric Inc [3].
    
    Despite that, the aforementioned commit applied the quirk to _all_ hubs
    carrying vendor ID 0x424 (i.e. SMSC), of which there are more [4] than
    initially expected. Consequently, the quirk is now enabled on platforms
    carrying SMSC/Microchip hub models which potentially don't exhibit the
    original issue.
    
    To avoid reports like [1], further limit the quirk's scope to
    USB5534B [2], by employing both Vendor and Product ID checks.
    
    Tested on H3ULCB + Kingfisher rev. M05.
    
    [1] https://lore.kernel.org/linux-renesas-soc/73933975-6F0E-40F5-9584-D2B8F615C0F3@canonical.com/
    [2] https://www.microchip.com/wwwproducts/en/USB5534B
    [3] http://www.shimafuji.co.jp/wp/wp-content/uploads/2018/08/SBEV-RCAR-KF-M06Board_HWSpecificationEN_Rev130.pdf
    [4] https://devicehunt.com/search/type/usb/vendor/0424/device/any
    
    Fixes: 1208f9e1d758c9 ("USB: hub: Fix the broken detection of USB3 device in SMSC hub")
    Cc: stable@vger.kernel.org # v4.14+
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Hardik Gajjar <hgajjar@de.adit-jv.com>
    Cc: linux-renesas-soc@vger.kernel.org
    Cc: linux-usb@vger.kernel.org
    Reported-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Tested-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20200514220246.13290-1-erosca@de.adit-jv.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2807e40fe64393d691fbfc2b3a3762e9e8dd210
Author: Jesus Ramos <jesus-ramos@live.com>
Date:   Mon Apr 27 06:21:39 2020 -0700

    ALSA: usb-audio: Add control message quirk delay for Kingston HyperX headset
    
    commit 073919e09ca445d4486968e3f851372ff44cf2b5 upstream.
    
    Kingston HyperX headset with 0951:16ad also needs the same quirk for
    delaying the frequency controls.
    
    Signed-off-by: Jesus Ramos <jesus-ramos@live.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/BY5PR19MB3634BA68C7CCA23D8DF428E796AF0@BY5PR19MB3634.namprd19.prod.outlook.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60753dc8290192714003b0a38269e2f7342810c9
Author: Borislav Petkov <bp@suse.de>
Date:   Wed Apr 22 18:11:30 2020 +0200

    x86: Fix early boot crash on gcc-10, third try
    
    commit a9a3ed1eff3601b63aea4fb462d8b3b92c7c1e7e upstream.
    
    ... or the odyssey of trying to disable the stack protector for the
    function which generates the stack canary value.
    
    The whole story started with Sergei reporting a boot crash with a kernel
    built with gcc-10:
    
      Kernel panic — not syncing: stack-protector: Kernel stack is corrupted in: start_secondary
      CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.6.0-rc5—00235—gfffb08b37df9 #139
      Hardware name: Gigabyte Technology Co., Ltd. To be filled by O.E.M./H77M—D3H, BIOS F12 11/14/2013
      Call Trace:
        dump_stack
        panic
        ? start_secondary
        __stack_chk_fail
        start_secondary
        secondary_startup_64
      -—-[ end Kernel panic — not syncing: stack—protector: Kernel stack is corrupted in: start_secondary
    
    This happens because gcc-10 tail-call optimizes the last function call
    in start_secondary() - cpu_startup_entry() - and thus emits a stack
    canary check which fails because the canary value changes after the
    boot_init_stack_canary() call.
    
    To fix that, the initial attempt was to mark the one function which
    generates the stack canary with:
    
      __attribute__((optimize("-fno-stack-protector"))) ... start_secondary(void *unused)
    
    however, using the optimize attribute doesn't work cumulatively
    as the attribute does not add to but rather replaces previously
    supplied optimization options - roughly all -fxxx options.
    
    The key one among them being -fno-omit-frame-pointer and thus leading to
    not present frame pointer - frame pointer which the kernel needs.
    
    The next attempt to prevent compilers from tail-call optimizing
    the last function call cpu_startup_entry(), shy of carving out
    start_secondary() into a separate compilation unit and building it with
    -fno-stack-protector, was to add an empty asm("").
    
    This current solution was short and sweet, and reportedly, is supported
    by both compilers but we didn't get very far this time: future (LTO?)
    optimization passes could potentially eliminate this, which leads us
    to the third attempt: having an actual memory barrier there which the
    compiler cannot ignore or move around etc.
    
    That should hold for a long time, but hey we said that about the other
    two solutions too so...
    
    Reported-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Kalle Valo <kvalo@codeaurora.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200314164451.346497-1-slyfox@gentoo.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84f3ec45d59925c14484351668080cdba34e597b
Author: Fabio Estevam <festevam@gmail.com>
Date:   Fri Mar 27 10:36:24 2020 -0300

    ARM: dts: imx27-phytec-phycard-s-rdk: Fix the I2C1 pinctrl entries
    
    commit 0caf34350a25907515d929a9c77b9b206aac6d1e upstream.
    
    The I2C2 pins are already used and the following errors are seen:
    
    imx27-pinctrl 10015000.iomuxc: pin MX27_PAD_I2C2_SDA already requested by 10012000.i2c; cannot claim for 1001d000.i2c
    imx27-pinctrl 10015000.iomuxc: pin-69 (1001d000.i2c) status -22
    imx27-pinctrl 10015000.iomuxc: could not request pin 69 (MX27_PAD_I2C2_SDA) from group i2c2grp  on device 10015000.iomuxc
    imx-i2c 1001d000.i2c: Error applying setting, reverse things back
    imx-i2c: probe of 1001d000.i2c failed with error -22
    
    Fix it by adding the correct I2C1 IOMUX entries for the pinctrl_i2c1 group.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 61664d0b432a ("ARM: dts: imx27 phyCARD-S pinctrl")
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Stefan Riedmueller <s.riedmueller@phytec.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84c4cd40f425c186e6c50cce2d9ee31fb021909e
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Fri Apr 17 12:13:40 2020 +0530

    ARM: dts: dra7: Fix bus_dma_limit for PCIe
    
    commit 90d4d3f4ea45370d482fa609dbae4d2281b4074f upstream.
    
    Even though commit cfb5d65f2595 ("ARM: dts: dra7: Add bus_dma_limit
    for L3 bus") added bus_dma_limit for L3 bus, the PCIe controller
    gets incorrect value of bus_dma_limit.
    
    Fix it by adding empty dma-ranges property to axi@0 and axi@1
    (parent device tree node of PCIe controller).
    
    Cc: stable@kernel.org
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8645ac3684a70e4e8a21c7c407c07a1a4316beec
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 7 13:44:56 2020 +0200

    ALSA: rawmidi: Fix racy buffer resize under concurrent accesses
    
    commit c1f6e3c818dd734c30f6a7eeebf232ba2cf3181d upstream.
    
    The rawmidi core allows user to resize the runtime buffer via ioctl,
    and this may lead to UAF when performed during concurrent reads or
    writes: the read/write functions unlock the runtime lock temporarily
    during copying form/to user-space, and that's the race window.
    
    This patch fixes the hole by introducing a reference counter for the
    runtime buffer read/write access and returns -EBUSY error when the
    resize is performed concurrently against read/write.
    
    Note that the ref count field is a simple integer instead of
    refcount_t here, since the all contexts accessing the buffer is
    basically protected with a spinlock, hence we need no expensive atomic
    ops.  Also, note that this busy check is needed only against read /
    write functions, and not in receive/transmit callbacks; the race can
    happen only at the spinlock hole mentioned in the above, while the
    whole function is protected for receive / transmit callbacks.
    
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/CAFcO6XMWpUVK_yzzCpp8_XP7+=oUpQvuBeCbMffEDkpe8jWrfg@mail.gmail.com
    Link: https://lore.kernel.org/r/s5heerw3r5z.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8e3fcbc66f608d38a72fc716ff45e31b7f3d123
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Sep 3 15:16:43 2018 +0200

    ALSA: rawmidi: Initialize allocated buffers
    
    commit 5a7b44a8df822e0667fc76ed7130252523993bda upstream.
    
    syzbot reported the uninitialized value exposure in certain situations
    using virmidi loop.  It's likely a very small race at writing and
    reading, and the influence is almost negligible.  But it's safer to
    paper over this just by replacing the existing kvmalloc() with
    kvzalloc().
    
    Reported-by: syzbot+194dffdb8b22fc5d207a@syzkaller.appspotmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4971520cd762ce9e4cad5ce16b30098c3ee4c0af
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 14 18:05:33 2020 +0200

    ALSA: hda/realtek - Limit int mic boost for Thinkpad T530
    
    commit b590b38ca305d6d7902ec7c4f7e273e0069f3bcc upstream.
    
    Lenovo Thinkpad T530 seems to have a sensitive internal mic capture
    that needs to limit the mic boost like a few other Thinkpad models.
    Although we may change the quirk for ALC269_FIXUP_LENOVO_DOCK, this
    hits way too many other laptop models, so let's add a new fixup model
    that limits the internal mic boost on top of the existing quirk and
    apply to only T530.
    
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1171293
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200514160533.10337-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8df010e4c84d5b3518e698e1a89dc2b0a87f2be9
Author: Kelly Littlepage <kelly@onechronos.com>
Date:   Fri May 8 19:58:46 2020 +0000

    net: tcp: fix rx timestamp behavior for tcp_recvmsg
    
    [ Upstream commit cc4de047b33be247f9c8150d3e496743a49642b8 ]
    
    The stated intent of the original commit is to is to "return the timestamp
    corresponding to the highest sequence number data returned." The current
    implementation returns the timestamp for the last byte of the last fully
    read skb, which is not necessarily the last byte in the recv buffer. This
    patch converts behavior to the original definition, and to the behavior of
    the previous draft versions of commit 98aaa913b4ed ("tcp: Extend
    SOF_TIMESTAMPING_RX_SOFTWARE to TCP recvmsg") which also match this
    behavior.
    
    Fixes: 98aaa913b4ed ("tcp: Extend SOF_TIMESTAMPING_RX_SOFTWARE to TCP recvmsg")
    Co-developed-by: Iris Liu <iris@onechronos.com>
    Signed-off-by: Iris Liu <iris@onechronos.com>
    Signed-off-by: Kelly Littlepage <kelly@onechronos.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63682a8d551b1a4a50804a8f0bbb69ec051eaca7
Author: Zefan Li <lizefan@huawei.com>
Date:   Sat May 9 11:32:10 2020 +0800

    netprio_cgroup: Fix unlimited memory leak of v2 cgroups
    
    [ Upstream commit 090e28b229af92dc5b40786ca673999d59e73056 ]
    
    If systemd is configured to use hybrid mode which enables the use of
    both cgroup v1 and v2, systemd will create new cgroup on both the default
    root (v2) and netprio_cgroup hierarchy (v1) for a new session and attach
    task to the two cgroups. If the task does some network thing then the v2
    cgroup can never be freed after the session exited.
    
    One of our machines ran into OOM due to this memory leak.
    
    In the scenario described above when sk_alloc() is called
    cgroup_sk_alloc() thought it's in v2 mode, so it stores
    the cgroup pointer in sk->sk_cgrp_data and increments
    the cgroup refcnt, but then sock_update_netprioidx()
    thought it's in v1 mode, so it stores netprioidx value
    in sk->sk_cgrp_data, so the cgroup refcnt will never be freed.
    
    Currently we do the mode switch when someone writes to the ifpriomap
    cgroup control file. The easiest fix is to also do the switch when
    a task is attached to a new cgroup.
    
    Fixes: bd1060a1d671 ("sock, cgroup: add sock->sk_cgroup")
    Reported-by: Yang Yingliang <yangyingliang@huawei.com>
    Tested-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Zefan Li <lizefan@huawei.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 370c57bd4d5e85dbce4908ebb04163537fa849e2
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Fri May 8 19:28:34 2020 +0200

    net: ipv4: really enforce backoff for redirects
    
    [ Upstream commit 57644431a6c2faac5d754ebd35780cf43a531b1a ]
    
    In commit b406472b5ad7 ("net: ipv4: avoid mixed n_redirects and
    rate_tokens usage") I missed the fact that a 0 'rate_tokens' will
    bypass the backoff algorithm.
    
    Since rate_tokens is cleared after a redirect silence, and never
    incremented on redirects, if the host keeps receiving packets
    requiring redirect it will reply ignoring the backoff.
    
    Additionally, the 'rate_last' field will be updated with the
    cadence of the ingress packet requiring redirect. If that rate is
    high enough, that will prevent the host from generating any
    other kind of ICMP messages
    
    The check for a zero 'rate_tokens' value was likely a shortcut
    to avoid the more complex backoff algorithm after a redirect
    silence period. Address the issue checking for 'n_redirects'
    instead, which is incremented on successful redirect, and
    does not interfere with other ICMP replies.
    
    Fixes: b406472b5ad7 ("net: ipv4: avoid mixed n_redirects and rate_tokens usage")
    Reported-and-tested-by: Colin Walters <walters@redhat.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 608dc3c39402525e9bcc749fee23acf6ca96842c
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sat May 9 16:45:44 2020 -0700

    net: dsa: loop: Add module soft dependency
    
    [ Upstream commit 3047211ca11bf77b3ecbce045c0aa544d934b945 ]
    
    There is a soft dependency against dsa_loop_bdinfo.ko which sets up the
    MDIO device registration, since there are no symbols referenced by
    dsa_loop.ko, there is no automatic loading of dsa_loop_bdinfo.ko which
    is needed.
    
    Fixes: 98cd1552ea27 ("net: dsa: Mock-up driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6bbde923ab403ef71d746e7b902c5c5d736a4cd
Author: Luo bin <luobin9@huawei.com>
Date:   Sun May 10 19:01:08 2020 +0000

    hinic: fix a bug of ndo_stop
    
    [ Upstream commit e8a1b0efd632d1c9db7d4e93da66377c7b524862 ]
    
    if some function in ndo_stop interface returns failure because of
    hardware fault, must go on excuting rest steps rather than return
    failure directly, otherwise will cause memory leak.And bump the
    timeout for SET_FUNC_STATE to ensure that cmd won't return failure
    when hw is busy. Otherwise hw may stomp host memory if we free
    memory regardless of the return value of SET_FUNC_STATE.
    
    Fixes: 51ba902a16e6 ("net-next/hinic: Initialize hw interface")
    Signed-off-by: Luo bin <luobin9@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64e5621a15b6a9dde0780b7ceb018029f5cf1e03
Author: Maciej Żenczykowski <maze@google.com>
Date:   Tue May 5 11:57:23 2020 -0700

    Revert "ipv6: add mtu lock check in __ip6_rt_update_pmtu"
    
    [ Upstream commit 09454fd0a4ce23cb3d8af65066c91a1bf27120dd ]
    
    This reverts commit 19bda36c4299ce3d7e5bce10bebe01764a655a6d:
    
    | ipv6: add mtu lock check in __ip6_rt_update_pmtu
    |
    | Prior to this patch, ipv6 didn't do mtu lock check in ip6_update_pmtu.
    | It leaded to that mtu lock doesn't really work when receiving the pkt
    | of ICMPV6_PKT_TOOBIG.
    |
    | This patch is to add mtu lock check in __ip6_rt_update_pmtu just as ipv4
    | did in __ip_rt_update_pmtu.
    
    The above reasoning is incorrect.  IPv6 *requires* icmp based pmtu to work.
    There's already a comment to this effect elsewhere in the kernel:
    
      $ git grep -p -B1 -A3 'RTAX_MTU lock'
      net/ipv6/route.c=4813=
    
      static int rt6_mtu_change_route(struct fib6_info *f6i, void *p_arg)
      ...
        /* In IPv6 pmtu discovery is not optional,
           so that RTAX_MTU lock cannot disable it.
           We still use this lock to block changes
           caused by addrconf/ndisc.
        */
    
    This reverts to the pre-4.9 behaviour.
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Fixes: 19bda36c4299 ("ipv6: add mtu lock check in __ip6_rt_update_pmtu")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc0002eebde6d275ed381977a3e2210b67a84663
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Tue May 12 21:45:53 2020 +0200

    net: phy: fix aneg restart in phy_ethtool_set_eee
    
    [ Upstream commit 9de5d235b60a7cdfcdd5461e70c5663e713fde87 ]
    
    phy_restart_aneg() enables aneg in the PHY. That's not what we want
    if phydev->autoneg is disabled. In this case still update EEE
    advertisement register, but don't enable aneg and don't trigger an
    aneg restart.
    
    Fixes: f75abeb8338e ("net: phy: restart phy autonegotiation after EEE advertisment change")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f5ae0f5b2675e4e703b980221976a1c2d79dba9
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue May 12 14:43:14 2020 +0200

    netlabel: cope with NULL catmap
    
    [ Upstream commit eead1c2ea2509fd754c6da893a94f0e69e83ebe4 ]
    
    The cipso and calipso code can set the MLS_CAT attribute on
    successful parsing, even if the corresponding catmap has
    not been allocated, as per current configuration and external
    input.
    
    Later, selinux code tries to access the catmap if the MLS_CAT flag
    is present via netlbl_catmap_getlong(). That may cause null ptr
    dereference while processing incoming network traffic.
    
    Address the issue setting the MLS_CAT flag only if the catmap is
    really allocated. Additionally let netlbl_catmap_getlong() cope
    with NULL catmap.
    
    Reported-by: Matthew Sheets <matthew.sheets@gd-ms.com>
    Fixes: 4b8feff251da ("netlabel: fix the horribly broken catmap functions")
    Fixes: ceba1832b1b2 ("calipso: Set the calipso socket label to match the secattr.")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49c0e6a40e896f9f47bab1206f8490b9c72bc849
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu May 7 12:19:03 2020 -0700

    net: fix a potential recursive NETDEV_FEAT_CHANGE
    
    [ Upstream commit dd912306ff008891c82cd9f63e8181e47a9cb2fb ]
    
    syzbot managed to trigger a recursive NETDEV_FEAT_CHANGE event
    between bonding master and slave. I managed to find a reproducer
    for this:
    
      ip li set bond0 up
      ifenslave bond0 eth0
      brctl addbr br0
      ethtool -K eth0 lro off
      brctl addif br0 bond0
      ip li set br0 up
    
    When a NETDEV_FEAT_CHANGE event is triggered on a bonding slave,
    it captures this and calls bond_compute_features() to fixup its
    master's and other slaves' features. However, when syncing with
    its lower devices by netdev_sync_lower_features() this event is
    triggered again on slaves when the LRO feature fails to change,
    so it goes back and forth recursively until the kernel stack is
    exhausted.
    
    Commit 17b85d29e82c intentionally lets __netdev_update_features()
    return -1 for such a failure case, so we have to just rely on
    the existing check inside netdev_sync_lower_features() and skip
    NETDEV_FEAT_CHANGE event only for this specific failure case.
    
    Fixes: fd867d51f889 ("net/core: generic support for disabling netdev features down stack")
    Reported-by: syzbot+e73ceacfd8560cc8a3ca@syzkaller.appspotmail.com
    Reported-by: syzbot+c2fb6f9ddcea95ba49b5@syzkaller.appspotmail.com
    Cc: Jarod Wilson <jarod@redhat.com>
    Cc: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Jann Horn <jannh@google.com>
    Reviewed-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f7d62fdd8dd974808c4c4c5dcc35b908d92cb3b
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Mar 2 15:08:38 2018 -0800

    net: phy: micrel: Use strlcpy() for ethtool::get_strings
    
    commit 55f53567afe5f0cd2fd9e006b174c08c31c466f8 upstream.
    
    Our statistics strings are allocated at initialization without being
    bound to a specific size, yet, we would copy ETH_GSTRING_LEN bytes using
    memcpy() which would create out of bounds accesses, this was flagged by
    KASAN. Replace this with strlcpy() to make sure we are bound the source
    buffer size and we also always NUL-terminate strings.
    
    Fixes: 2b2427d06426 ("phy: micrel: Add ethtool statistics counters")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 200e0ef9492db39e87343d5d89ce24535347ea1e
Author: Jan Beulich <JBeulich@suse.com>
Date:   Mon Feb 26 04:11:51 2018 -0700

    x86/asm: Add instruction suffixes to bitops
    
    commit 22636f8c9511245cb3c8412039f1dd95afb3aa59 upstream.
    
    Omitting suffixes from instructions in AT&T mode is bad practice when
    operand size cannot be determined by the assembler from register
    operands, and is likely going to be warned about by upstream gas in the
    future (mine does already). Add the missing suffixes here. Note that for
    64-bit this means some operations change from being 32-bit to 64-bit.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/5A93F98702000078001ABACC@prv-mh.provo.novell.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 778e0dad72eb7f9ff3728fa9d99df7768a111307
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 15:58:04 2020 -0700

    gcc-10: avoid shadowing standard library 'free()' in crypto
    
    commit 1a263ae60b04de959d9ce9caea4889385eefcc7b upstream.
    
    gcc-10 has started warning about conflicting types for a few new
    built-in functions, particularly 'free()'.
    
    This results in warnings like:
    
       crypto/xts.c:325:13: warning: conflicting types for built-in function ‘free’; expected ‘void(void *)’ [-Wbuiltin-declaration-mismatch]
    
    because the crypto layer had its local freeing functions called
    'free()'.
    
    Gcc-10 is in the wrong here, since that function is marked 'static', and
    thus there is no chance of confusion with any standard library function
    namespace.
    
    But the simplest thing to do is to just use a different name here, and
    avoid this gcc mis-feature.
    
    [ Side note: gcc knowing about 'free()' is in itself not the
      mis-feature: the semantics of 'free()' are special enough that a
      compiler can validly do special things when seeing it.
    
      So the mis-feature here is that gcc thinks that 'free()' is some
      restricted name, and you can't shadow it as a local static function.
    
      Making the special 'free()' semantics be a function attribute rather
      than tied to the name would be the much better model ]
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eaeb85d649fb710488bb01e149b3274da14f8e66
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 15:45:21 2020 -0700

    gcc-10: disable 'restrict' warning for now
    
    commit adc71920969870dfa54e8f40dac8616284832d02 upstream.
    
    gcc-10 now warns about passing aliasing pointers to functions that take
    restricted pointers.
    
    That's actually a great warning, and if we ever start using 'restrict'
    in the kernel, it might be quite useful.  But right now we don't, and it
    turns out that the only thing this warns about is an idiom where we have
    declared a few functions to be "printf-like" (which seems to make gcc
    pick up the restricted pointer thing), and then we print to the same
    buffer that we also use as an input.
    
    And people do that as an odd concatenation pattern, with code like this:
    
        #define sysfs_show_gen_prop(buffer, fmt, ...) \
            snprintf(buffer, PAGE_SIZE, "%s"fmt, buffer, __VA_ARGS__)
    
    where we have 'buffer' as both the destination of the final result, and
    as the initial argument.
    
    Yes, it's a bit questionable.  And outside of the kernel, people do have
    standard declarations like
    
        int snprintf( char *restrict buffer, size_t bufsz,
                      const char *restrict format, ... );
    
    where that output buffer is marked as a restrict pointer that cannot
    alias with any other arguments.
    
    But in the context of the kernel, that 'use snprintf() to concatenate to
    the end result' does work, and the pattern shows up in multiple places.
    And we have not marked our own version of snprintf() as taking restrict
    pointers, so the warning is incorrect for now, and gcc picks it up on
    its own.
    
    If we do start using 'restrict' in the kernel (and it might be a good
    idea if people find places where it matters), we'll need to figure out
    how to avoid this issue for snprintf and friends.  But in the meantime,
    this warning is not useful.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0e84b91f15574fba1e2b0be6bb467bbd92e1338
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 15:40:52 2020 -0700

    gcc-10: disable 'stringop-overflow' warning for now
    
    commit 5a76021c2eff7fcf2f0918a08fd8a37ce7922921 upstream.
    
    This is the final array bounds warning removal for gcc-10 for now.
    
    Again, the warning is good, and we should re-enable all these warnings
    when we have converted all the legacy array declaration cases to
    flexible arrays. But in the meantime, it's just noise.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c29131adf93913676f554db31efd26723815550
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 14:52:44 2020 -0700

    gcc-10: disable 'array-bounds' warning for now
    
    commit 44720996e2d79e47d508b0abe99b931a726a3197 upstream.
    
    This is another fine warning, related to the 'zero-length-bounds' one,
    but hitting the same historical code in the kernel.
    
    Because C didn't historically support flexible array members, we have
    code that instead uses a one-sized array, the same way we have cases of
    zero-sized arrays.
    
    The one-sized arrays come from either not wanting to use the gcc
    zero-sized array extension, or from a slight convenience-feature, where
    particularly for strings, the size of the structure now includes the
    allocation for the final NUL character.
    
    So with a "char name[1];" at the end of a structure, you can do things
    like
    
           v = my_malloc(sizeof(struct vendor) + strlen(name));
    
    and avoid the "+1" for the terminator.
    
    Yes, the modern way to do that is with a flexible array, and using
    'offsetof()' instead of 'sizeof()', and adding the "+1" by hand.  That
    also technically gets the size "more correct" in that it avoids any
    alignment (and thus padding) issues, but this is another long-term
    cleanup thing that will not happen for 5.7.
    
    So disable the warning for now, even though it's potentially quite
    useful.  Having a slew of warnings that then hide more urgent new issues
    is not an improvement.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a99bcaa094d858bf90e67f4eff0e91797498018
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 14:30:29 2020 -0700

    gcc-10: disable 'zero-length-bounds' warning for now
    
    commit 5c45de21a2223fe46cf9488c99a7fbcf01527670 upstream.
    
    This is a fine warning, but we still have a number of zero-length arrays
    in the kernel that come from the traditional gcc extension.  Yes, they
    are getting converted to flexible arrays, but in the meantime the gcc-10
    warning about zero-length bounds is very verbose, and is hiding other
    issues.
    
    I missed one actual build failure because it was hidden among hundreds
    of lines of warning.  Thankfully I caught it on the second go before
    pushing things out, but it convinced me that I really need to disable
    the new warnings for now.
    
    We'll hopefully be all done with our conversion to flexible arrays in
    the not too distant future, and we can then re-enable this warning.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cdd5c0c6b134563e18d207a7212a01a715145ad
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 9 13:57:10 2020 -0700

    Stop the ad-hoc games with -Wno-maybe-initialized
    
    commit 78a5255ffb6a1af189a83e493d916ba1c54d8c75 upstream.
    
    We have some rather random rules about when we accept the
    "maybe-initialized" warnings, and when we don't.
    
    For example, we consider it unreliable for gcc versions < 4.9, but also
    if -O3 is enabled, or if optimizing for size.  And then various kernel
    config options disabled it, because they know that they trigger that
    warning by confusing gcc sufficiently (ie PROFILE_ALL_BRANCHES).
    
    And now gcc-10 seems to be introducing a lot of those warnings too, so
    it falls under the same heading as 4.9 did.
    
    At the same time, we have a very straightforward way to _enable_ that
    warning when wanted: use "W=2" to enable more warnings.
    
    So stop playing these ad-hoc games, and just disable that warning by
    default, with the known and straight-forward "if you want to work on the
    extra compiler warnings, use W=123".
    
    Would it be great to have code that is always so obvious that it never
    confuses the compiler whether a variable is used initialized or not?
    Yes, it would.  In a perfect world, the compilers would be smarter, and
    our source code would be simpler.
    
    That's currently not the world we live in, though.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 859ea9726dc27dd1210c556d9d78d92b1c832d10
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Feb 21 13:13:38 2019 +0900

    kbuild: compute false-positive -Wmaybe-uninitialized cases in Kconfig
    
    commit b303c6df80c9f8f13785aa83a0471fca7e38b24d upstream.
    
    Since -Wmaybe-uninitialized was introduced by GCC 4.7, we have patched
    various false positives:
    
     - commit e74fc973b6e5 ("Turn off -Wmaybe-uninitialized when building
       with -Os") turned off this option for -Os.
    
     - commit 815eb71e7149 ("Kbuild: disable 'maybe-uninitialized' warning
       for CONFIG_PROFILE_ALL_BRANCHES") turned off this option for
       CONFIG_PROFILE_ALL_BRANCHES
    
     - commit a76bcf557ef4 ("Kbuild: enable -Wmaybe-uninitialized warning
       for "make W=1"") turned off this option for GCC < 4.9
       Arnd provided more explanation in https://lkml.org/lkml/2017/3/14/903
    
    I think this looks better by shifting the logic from Makefile to Kconfig.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/350
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb477f9c8930a58140b930ecc41c27470bcfc68c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 4 09:16:37 2020 -0700

    gcc-10 warnings: fix low-hanging fruit
    
    commit 9d82973e032e246ff5663c9805fbb5407ae932e3 upstream.
    
    Due to a bug-report that was compiler-dependent, I updated one of my
    machines to gcc-10.  That shows a lot of new warnings.  Happily they
    seem to be mostly the valid kind, but it's going to cause a round of
    churn for getting rid of them..
    
    This is the really low-hanging fruit of removing a couple of zero-sized
    arrays in some core code.  We have had a round of these patches before,
    and we'll have many more coming, and there is nothing special about
    these except that they were particularly trivial, and triggered more
    warnings than most.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 294e9e42825aabe1de0a0baea6ae473fa7ec020b
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Tue Apr 14 12:10:50 2020 -0300

    pnp: Use list_for_each_entry() instead of open coding
    
    commit 01b2bafe57b19d9119413f138765ef57990921ce upstream.
    
    Aside from good practice, this avoids a warning from gcc 10:
    
    ./include/linux/kernel.h:997:3: warning: array subscript -31 is outside array bounds of ‘struct list_head[1]’ [-Warray-bounds]
      997 |  ((type *)(__mptr - offsetof(type, member))); })
          |  ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ./include/linux/list.h:493:2: note: in expansion of macro ‘container_of’
      493 |  container_of(ptr, type, member)
          |  ^~~~~~~~~~~~
    ./include/linux/pnp.h:275:30: note: in expansion of macro ‘list_entry’
      275 | #define global_to_pnp_dev(n) list_entry(n, struct pnp_dev, global_list)
          |                              ^~~~~~~~~~
    ./include/linux/pnp.h:281:11: note: in expansion of macro ‘global_to_pnp_dev’
      281 |  (dev) != global_to_pnp_dev(&pnp_global); \
          |           ^~~~~~~~~~~~~~~~~
    arch/x86/kernel/rtc.c:189:2: note: in expansion of macro ‘pnp_for_each_dev’
      189 |  pnp_for_each_dev(dev) {
    
    Because the common code doesn't cast the starting list_head to the
    containing struct.
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    [ rjw: Whitespace adjustments ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eb9f8e4a600c75f89bce300fa045f986422c535
Author: Samu Nuutamo <samu.nuutamo@vincit.fi>
Date:   Mon May 11 13:02:19 2020 +0200

    hwmon: (da9052) Synchronize access with mfd
    
    [ Upstream commit 333e22db228f0bd0c839553015a6a8d3db4ba569 ]
    
    When tsi-as-adc is configured it is possible for in7[0123]_input read to
    return an incorrect value if a concurrent read to in[456]_input is
    performed. This is caused by a concurrent manipulation of the mux
    channel without proper locking as hwmon and mfd use different locks for
    synchronization.
    
    Switch hwmon to use the same lock as mfd when accessing the TSI channel.
    
    Fixes: 4f16cab19a3d5 ("hwmon: da9052: Add support for TSI channel")
    Signed-off-by: Samu Nuutamo <samu.nuutamo@vincit.fi>
    [rebase to current master, reword commit message slightly]
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 593f585ffad95dd065b188f49336835a5a461488
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Sun Apr 26 10:59:21 2020 +0300

    IB/mlx4: Test return value of calls to ib_get_cached_pkey
    
    [ Upstream commit 6693ca95bd4330a0ad7326967e1f9bcedd6b0800 ]
    
    In the mlx4_ib_post_send() flow, some functions call ib_get_cached_pkey()
    without checking its return value. If ib_get_cached_pkey() returns an
    error code, these functions should return failure.
    
    Fixes: 1ffeb2eb8be9 ("IB/mlx4: SR-IOV IB context objects and proxy/tunnel SQP support")
    Fixes: 225c7b1feef1 ("IB/mlx4: Add a driver Mellanox ConnectX InfiniBand adapters")
    Fixes: e622f2f4ad21 ("IB: split struct ib_send_wr")
    Link: https://lore.kernel.org/r/20200426075921.130074-1-leon@kernel.org
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7addf56d9a45e8601b726a7efbcbe75713a15e91
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Apr 30 23:30:48 2020 +0200

    netfilter: conntrack: avoid gcc-10 zero-length-bounds warning
    
    [ Upstream commit 2c407aca64977ede9b9f35158e919773cae2082f ]
    
    gcc-10 warns around a suspicious access to an empty struct member:
    
    net/netfilter/nf_conntrack_core.c: In function '__nf_conntrack_alloc':
    net/netfilter/nf_conntrack_core.c:1522:9: warning: array subscript 0 is outside the bounds of an interior zero-length array 'u8[0]' {aka 'unsigned char[0]'} [-Wzero-length-bounds]
     1522 |  memset(&ct->__nfct_init_offset[0], 0,
          |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
    In file included from net/netfilter/nf_conntrack_core.c:37:
    include/net/netfilter/nf_conntrack.h:90:5: note: while referencing '__nfct_init_offset'
       90 |  u8 __nfct_init_offset[0];
          |     ^~~~~~~~~~~~~~~~~~
    
    The code is correct but a bit unusual. Rework it slightly in a way that
    does not trigger the warning, using an empty struct instead of an empty
    array. There are probably more elegant ways to do this, but this is the
    smallest change.
    
    Fixes: c41884ce0562 ("netfilter: conntrack: avoid zeroing timer")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bf3c3d83df394e6047d2c1fb8b2847736f4bfff
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 22 12:22:11 2020 +0300

    i40iw: Fix error handling in i40iw_manage_arp_cache()
    
    [ Upstream commit 37e31d2d26a4124506c24e95434e9baf3405a23a ]
    
    The i40iw_arp_table() function can return -EOVERFLOW if
    i40iw_alloc_resource() fails so we can't just test for "== -1".
    
    Fixes: 4e9042e647ff ("i40iw: add hw and utils files")
    Link: https://lore.kernel.org/r/20200422092211.GA195357@mwanda
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f92da331781716d296129fd932df827c9bbc4a55
Author: Grace Kao <grace.kao@intel.com>
Date:   Fri Apr 17 12:11:54 2020 +0800

    pinctrl: cherryview: Add missing spinlock usage in chv_gpio_irq_handler
    
    [ Upstream commit 69388e15f5078c961b9e5319e22baea4c57deff1 ]
    
    According to Braswell NDA Specification Update (#557593),
    concurrent read accesses may result in returning 0xffffffff and write
    instructions may be dropped. We have an established format for the
    commit references, i.e.
    cdca06e4e859 ("pinctrl: baytrail: Add missing spinlock usage in
    byt_gpio_irq_handler")
    
    Fixes: 0bd50d719b00 ("pinctrl: cherryview: prevent concurrent access to GPIO controllers")
    Signed-off-by: Grace Kao <grace.kao@intel.com>
    Reported-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07d342df5aad37a2a425491f901ec85f5ddcb569
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Dec 11 19:32:54 2019 +0200

    pinctrl: baytrail: Enable pin configuration setting for GPIO chip
    
    [ Upstream commit ccd025eaddaeb99e982029446197c544252108e2 ]
    
    It appears that pin configuration for GPIO chip hasn't been enabled yet
    due to absence of ->set_config() callback.
    
    Enable it here for Intel Baytrail.
    
    Fixes: c501d0b149de ("pinctrl: baytrail: Add pin control operations")
    Depends-on: 2956b5d94a76 ("pinctrl / gpio: Introduce .set_config() callback for GPIO chips")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c492a0a1202fdf36bc76062246523f1b537e5db
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Fri Aug 31 10:00:34 2018 -0500

    ipmi: Fix NULL pointer dereference in ssif_probe
    
    [ Upstream commit a8627cda7cfffe1792c199660c2b4f03ba2bd97b ]
    
    There is a potential execution path in which function ssif_info_find()
    returns NULL, hence there is a NULL pointer dereference when accessing
    pointer *addr_info*
    
    Fix this by null checking *addr_info* before dereferencing it.
    
    Addresses-Coverity-ID: 1473145 ("Explicit null dereferenced")
    Fixes: e333054a91d1 ("ipmi: Fix I2C client removal in the SSIF driver")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efd9381d628db54ea6b3bac5bd6b18e4124d3c60
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:01 2020 -0500

    x86/entry/64: Fix unwind hints in register clearing code
    
    [ Upstream commit 06a9750edcffa808494d56da939085c35904e618 ]
    
    The PUSH_AND_CLEAR_REGS macro zeroes each register immediately after
    pushing it.  If an NMI or exception hits after a register is cleared,
    but before the UNWIND_HINT_REGS annotation, the ORC unwinder will
    wrongly think the previous value of the register was zero.  This can
    confuse the unwinding process and cause it to exit early.
    
    Because ORC is simpler than DWARF, there are a limited number of unwind
    annotation states, so it's not possible to add an individual unwind hint
    after each push/clear combination.  Instead, the register clearing
    instructions need to be consolidated and moved to after the
    UNWIND_HINT_REGS annotation.
    
    Fixes: 3f01daecd545 ("x86/entry/64: Introduce the PUSH_AND_CLEAN_REGS macro")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/68fd3d0bc92ae2d62ff7879d15d3684217d51f08.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 336322e8b5b9cda41e7c075c0060ab5ff0e2b498
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Sun May 3 23:24:47 2020 +0800

    ALSA: hda/realtek - Fix S3 pop noise on Dell Wyse
    
    [ Upstream commit 52e4e36807aeac1cdd07b14e509c8a64101e1a09 ]
    
    Commit 317d9313925c ("ALSA: hda/realtek - Set default power save node to
    0") makes the ALC225 have pop noise on S3 resume and cold boot.
    
    The previous fix enable power save node universally for ALC225, however
    it makes some ALC225 systems unable to produce any sound.
    
    So let's only enable power save node for the affected Dell Wyse
    platform.
    
    Fixes: 317d9313925c ("ALSA: hda/realtek - Set default power save node to 0")
    BugLink: https://bugs.launchpad.net/bugs/1866357
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20200503152449.22761-2-kai.heng.feng@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6f2f8dc01f3efc147c0a43b18b5fe736798eb1a
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Wed May 13 17:50:48 2020 -0700

    ipc/util.c: sysvipc_find_ipc() incorrectly updates position index
    
    [ Upstream commit 5e698222c70257d13ae0816720dde57c56f81e15 ]
    
    Commit 89163f93c6f9 ("ipc/util.c: sysvipc_find_ipc() should increase
    position index") is causing this bug (seen on 5.6.8):
    
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
    
       # ipcmk -Q
       Message queue id: 0
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x82db8127 0          root       644        0            0
    
       # ipcmk -Q
       Message queue id: 1
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x82db8127 0          root       644        0            0
       0x76d1fb2a 1          root       644        0            0
    
       # ipcrm -q 0
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x76d1fb2a 1          root       644        0            0
       0x76d1fb2a 1          root       644        0            0
    
       # ipcmk -Q
       Message queue id: 2
       # ipcrm -q 2
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x76d1fb2a 1          root       644        0            0
       0x76d1fb2a 1          root       644        0            0
    
       # ipcmk -Q
       Message queue id: 3
       # ipcrm -q 1
       # ipcs -q
    
       ------ Message Queues --------
       key        msqid      owner      perms      used-bytes   messages
       0x7c982867 3          root       644        0            0
       0x7c982867 3          root       644        0            0
       0x7c982867 3          root       644        0            0
       0x7c982867 3          root       644        0            0
    
    Whenever an IPC item with a low id is deleted, the items with higher ids
    are duplicated, as if filling a hole.
    
    new_pos should jump through hole of unused ids, pos can be updated
    inside "for" cycle.
    
    Fixes: 89163f93c6f9 ("ipc/util.c: sysvipc_find_ipc() should increase position index")
    Reported-by: Andreas Schwab <schwab@suse.de>
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Waiman Long <longman@redhat.com>
    Cc: NeilBrown <neilb@suse.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Peter Oberparleiter <oberpar@linux.ibm.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/4921fe9b-9385-a2b4-1dc4-1099be6d2e39@virtuozzo.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 297c4c9655b211e16dd922cafcb8eab98d6e448a
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Wed Apr 29 12:34:36 2020 +0300

    drm/qxl: lost qxl_bo_kunmap_atomic_page in qxl_image_init_helper()
    
    [ Upstream commit 5b5703dbafae74adfbe298a56a81694172caf5e6 ]
    
    v2: removed TODO reminder
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/a4e0ae09-a73c-1c62-04ef-3f990d41bea9@virtuozzo.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2660b376c0142510cd97da4d953e4879fdb0f0ff
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Tue Apr 28 15:38:36 2020 +0300

    ALSA: hda/hdmi: fix race in monitor detection during probe
    
    [ Upstream commit ca76282b6faffc83601c25bd2a95f635c03503ef ]
    
    A race exists between build_pcms() and build_controls() phases of codec
    setup. Build_pcms() sets up notifier for jack events. If a monitor event
    is received before build_controls() is run, the initial jack state is
    lost and never reported via mixer controls.
    
    The problem can be hit at least with SOF as the controller driver. SOF
    calls snd_hda_codec_build_controls() in its workqueue-based probe and
    this can be delayed enough to hit the race condition.
    
    Fix the issue by invalidating the per-pin ELD information when
    build_controls() is called. The existing call to hdmi_present_sense()
    will update the ELD contents. This ensures initial monitor state is
    correctly reflected via mixer controls.
    
    BugLink: https://github.com/thesofproject/linux/issues/1687
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20200428123836.24512-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c043d52b2a21122e66936011e3c321effd8da06
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Apr 10 20:26:29 2020 +0100

    cpufreq: intel_pstate: Only mention the BIOS disabling turbo mode once
    
    [ Upstream commit 8c539776ac83c0857395e1ccc9c6b516521a2d32 ]
    
    Make a note of the first time we discover the turbo mode has been
    disabled by the BIOS, as otherwise we complain every time we try to
    update the mode.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69b6e27ca74bbdb0c4fb9bebd01058d9012fa656
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Sun Apr 19 18:49:09 2020 +0200

    dmaengine: mmp_tdma: Reset channel error on release
    
    [ Upstream commit 0c89446379218698189a47871336cb30286a7197 ]
    
    When a channel configuration fails, the status of the channel is set to
    DEV_ERROR so that an attempt to submit it fails. However, this status
    sticks until the heat end of the universe, making it impossible to
    recover from the error.
    
    Let's reset it when the channel is released so that further use of the
    channel with correct configuration is not impacted.
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Link: https://lore.kernel.org/r/20200419164912.670973-5-lkundrak@v3.sk
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8406dcbc916328114c4c2c7878455b314034866
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Thu Apr 16 11:53:35 2020 +0530

    dmaengine: pch_dma.c: Avoid data race between probe and irq handler
    
    [ Upstream commit 2e45676a4d33af47259fa186ea039122ce263ba9 ]
    
    pd->dma.dev is read in irq handler pd_irq().
    However, it is set to pdev->dev after request_irq().
    Therefore, set pd->dma.dev to pdev->dev before request_irq() to
    avoid data race between pch_dma_probe() and pd_irq().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Link: https://lore.kernel.org/r/20200416062335.29223-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f743dd319951491d005ea51470e180f6df9125e
Author: Wu Bo <wubo40@huawei.com>
Date:   Tue Apr 14 10:13:28 2020 +0800

    scsi: sg: add sg_remove_request in sg_write
    
    commit 83c6f2390040f188cc25b270b4befeb5628c1aee upstream.
    
    If the __copy_from_user function failed we need to call sg_remove_request
    in sg_write.
    
    Link: https://lore.kernel.org/r/610618d9-e983-fd56-ed0f-639428343af7@huawei.com
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    [groeck: Backport to v5.4.y and older kernels]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30f4ac2c49cafadfb9542a39a4810a395f3c3a17
Author: Stefan Hajnoczi <stefanha@redhat.com>
Date:   Thu Apr 30 15:04:42 2020 +0100

    virtio-blk: handle block_device_operations callbacks after hot unplug
    
    [ Upstream commit 90b5feb8c4bebc76c27fcaf3e1a0e5ca2d319e9e ]
    
    A userspace process holding a file descriptor to a virtio_blk device can
    still invoke block_device_operations after hot unplug.  This leads to a
    use-after-free accessing vblk->vdev in virtblk_getgeo() when
    ioctl(HDIO_GETGEO) is invoked:
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000090
      IP: [<ffffffffc00e5450>] virtio_check_driver_offered_feature+0x10/0x90 [virtio]
      PGD 800000003a92f067 PUD 3a930067 PMD 0
      Oops: 0000 [#1] SMP
      CPU: 0 PID: 1310 Comm: hdio-getgeo Tainted: G           OE  ------------   3.10.0-1062.el7.x86_64 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      task: ffff9be5fbfb8000 ti: ffff9be5fa890000 task.ti: ffff9be5fa890000
      RIP: 0010:[<ffffffffc00e5450>]  [<ffffffffc00e5450>] virtio_check_driver_offered_feature+0x10/0x90 [virtio]
      RSP: 0018:ffff9be5fa893dc8  EFLAGS: 00010246
      RAX: ffff9be5fc3f3400 RBX: ffff9be5fa893e30 RCX: 0000000000000000
      RDX: 0000000000000000 RSI: 0000000000000004 RDI: ffff9be5fbc10b40
      RBP: ffff9be5fa893dc8 R08: 0000000000000301 R09: 0000000000000301
      R10: 0000000000000000 R11: 0000000000000000 R12: ffff9be5fdc24680
      R13: ffff9be5fbc10b40 R14: ffff9be5fbc10480 R15: 0000000000000000
      FS:  00007f1bfb968740(0000) GS:ffff9be5ffc00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000090 CR3: 000000003a894000 CR4: 0000000000360ff0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       [<ffffffffc016ac37>] virtblk_getgeo+0x47/0x110 [virtio_blk]
       [<ffffffff8d3f200d>] ? handle_mm_fault+0x39d/0x9b0
       [<ffffffff8d561265>] blkdev_ioctl+0x1f5/0xa20
       [<ffffffff8d488771>] block_ioctl+0x41/0x50
       [<ffffffff8d45d9e0>] do_vfs_ioctl+0x3a0/0x5a0
       [<ffffffff8d45dc81>] SyS_ioctl+0xa1/0xc0
    
    A related problem is that virtblk_remove() leaks the vd_index_ida index
    when something still holds a reference to vblk->disk during hot unplug.
    This causes virtio-blk device names to be lost (vda, vdb, etc).
    
    Fix these issues by protecting vblk->vdev with a mutex and reference
    counting vblk so the vd_index_ida index can be removed in all cases.
    
    Fixes: 48e4043d4529 ("virtio: add virtio disk geometry feature")
    Reported-by: Lance Digby <ldigby@redhat.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Link: https://lore.kernel.org/r/20200430140442.171016-1-stefanha@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fdff50f58433feb179d3a07b7d5f8b67bdf3a1f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Apr 30 23:30:49 2020 +0200

    drop_monitor: work around gcc-10 stringop-overflow warning
    
    [ Upstream commit dc30b4059f6e2abf3712ab537c8718562b21c45d ]
    
    The current gcc-10 snapshot produces a false-positive warning:
    
    net/core/drop_monitor.c: In function 'trace_drop_common.constprop':
    cc1: error: writing 8 bytes into a region of size 0 [-Werror=stringop-overflow=]
    In file included from net/core/drop_monitor.c:23:
    include/uapi/linux/net_dropmon.h:36:8: note: at offset 0 to object 'entries' with size 4 declared here
       36 |  __u32 entries;
          |        ^~~~~~~
    
    I reported this in the gcc bugzilla, but in case it does not get
    fixed in the release, work around it by using a temporary variable.
    
    Fixes: 9a8afc8d3962 ("Network Drop Monitor: Adding drop monitor implementation & Netlink protocol")
    Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94881
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddbc1ac2fdbece54d84b5f5c6bb4296d6b0f5e09
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Apr 26 22:59:21 2020 +0200

    net: moxa: Fix a potential double 'free_irq()'
    
    [ Upstream commit ee8d2267f0e39a1bfd95532da3a6405004114b27 ]
    
    Should an irq requested with 'devm_request_irq' be released explicitly,
    it should be done by 'devm_free_irq()', not 'free_irq()'.
    
    Fixes: 6c821bd9edc9 ("net: Add MOXA ART SoCs ethernet driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2216157f8ef664170e4fe251716b782953c14885
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Apr 27 08:18:03 2020 +0200

    net/sonic: Fix a resource leak in an error handling path in 'jazz_sonic_probe()'
    
    [ Upstream commit 10e3cc180e64385edc9890c6855acf5ed9ca1339 ]
    
    A call to 'dma_alloc_coherent()' is hidden in 'sonic_alloc_descriptors()',
    called from 'sonic_probe1()'.
    
    This is correctly freed in the remove function, but not in the error
    handling path of the probe function.
    Fix it and add the missing 'dma_free_coherent()' call.
    
    While at it, rename a label in order to be slightly more informative.
    
    Fixes: efcce839360f ("[PATCH] macsonic/jazzsonic network drivers update")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bb1c0f27e8b3c83c1ccb249d812545a3b5cfc8b
Author: Hugh Dickins <hughd@google.com>
Date:   Mon Apr 20 18:14:14 2020 -0700

    shmem: fix possible deadlocks on shmlock_user_lock
    
    [ Upstream commit ea0dfeb4209b4eab954d6e00ed136bc6b48b380d ]
    
    Recent commit 71725ed10c40 ("mm: huge tmpfs: try to split_huge_page()
    when punching hole") has allowed syzkaller to probe deeper, uncovering a
    long-standing lockdep issue between the irq-unsafe shmlock_user_lock,
    the irq-safe xa_lock on mapping->i_pages, and shmem inode's info->lock
    which nests inside xa_lock (or tree_lock) since 4.8's shmem_uncharge().
    
    user_shm_lock(), servicing SysV shmctl(SHM_LOCK), wants
    shmlock_user_lock while its caller shmem_lock() holds info->lock with
    interrupts disabled; but hugetlbfs_file_setup() calls user_shm_lock()
    with interrupts enabled, and might be interrupted by a writeback endio
    wanting xa_lock on i_pages.
    
    This may not risk an actual deadlock, since shmem inodes do not take
    part in writeback accounting, but there are several easy ways to avoid
    it.
    
    Requiring interrupts disabled for shmlock_user_lock would be easy, but
    it's a high-level global lock for which that seems inappropriate.
    Instead, recall that the use of info->lock to guard info->flags in
    shmem_lock() dates from pre-3.1 days, when races with SHMEM_PAGEIN and
    SHMEM_TRUNCATE could occur: nowadays it serves no purpose, the only flag
    added or removed is VM_LOCKED itself, and calls to shmem_lock() an inode
    are already serialized by the caller.
    
    Take info->lock out of the chain and the possibility of deadlock or
    lockdep warning goes away.
    
    Fixes: 4595ef88d136 ("shmem: make shmem_inode_info::lock irq-safe")
    Reported-by: syzbot+c8a8197c8852f566b9d9@syzkaller.appspotmail.com
    Reported-by: syzbot+40b71e145e73f78f81ad@syzkaller.appspotmail.com
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: Yang Shi <yang.shi@linux.alibaba.com>
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2004161707410.16322@eggly.anvils
    Link: https://lore.kernel.org/lkml/000000000000e5838c05a3152f53@google.com/
    Link: https://lore.kernel.org/lkml/0000000000003712b305a331d3b1@google.com/
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d673c1e5e6fea22195d4197da231e52b63b26e35
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu May 24 16:09:07 2018 +0200

    net: stmmac: Use mutex instead of spinlock
    
    commit 29555fa3de865630570b5f53c847b953413daf1a upstream.
    
    Some drivers, such as DWC EQOS on Tegra, need to perform operations that
    can sleep under this lock (clk_set_rate() in tegra_eqos_fix_speed()) for
    proper operation. Since there is no need for this lock to be a spinlock,
    convert it to a mutex instead.
    
    Fixes: e6ea2d16fc61 ("net: stmmac: dwc-qos: Add Tegra186 support")
    Reported-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Bhadram Varka <vbhadram@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae811cecbbb231f11a84acaf74baca1283b964c7
Author: Randall Huang <huangrandall@google.com>
Date:   Fri Oct 18 14:56:22 2019 +0800

    f2fs: fix to avoid memory leakage in f2fs_listxattr
    
    commit 688078e7f36c293dae25b338ddc9e0a2790f6e06 upstream.
    
    In f2fs_listxattr, there is no boundary check before
    memcpy e_name to buffer.
    If the e_name_len is corrupted,
    unexpected memory contents may be returned to the buffer.
    
    Signed-off-by: Randall Huang <huangrandall@google.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    [bwh: Backported to 4.14: Use f2fs_msg() instead of f2fs_err()]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d295b32df866ea09aa8cc94500ed6e96e2ea09e
Author: Randall Huang <huangrandall@google.com>
Date:   Thu Apr 11 16:26:46 2019 +0800

    f2fs: fix to avoid accessing xattr across the boundary
    
    commit 2777e654371dd4207a3a7f4fb5fa39550053a080 upstream.
    
    When we traverse xattr entries via __find_xattr(),
    if the raw filesystem content is faked or any hardware failure occurs,
    out-of-bound error can be detected by KASAN.
    Fix the issue by introducing boundary check.
    
    [   38.402878] c7   1827 BUG: KASAN: slab-out-of-bounds in f2fs_getxattr+0x518/0x68c
    [   38.402891] c7   1827 Read of size 4 at addr ffffffc0b6fb35dc by task
    [   38.402935] c7   1827 Call trace:
    [   38.402952] c7   1827 [<ffffff900809003c>] dump_backtrace+0x0/0x6bc
    [   38.402966] c7   1827 [<ffffff9008090030>] show_stack+0x20/0x2c
    [   38.402981] c7   1827 [<ffffff900871ab10>] dump_stack+0xfc/0x140
    [   38.402995] c7   1827 [<ffffff9008325c40>] print_address_description+0x80/0x2d8
    [   38.403009] c7   1827 [<ffffff900832629c>] kasan_report_error+0x198/0x1fc
    [   38.403022] c7   1827 [<ffffff9008326104>] kasan_report_error+0x0/0x1fc
    [   38.403037] c7   1827 [<ffffff9008325000>] __asan_load4+0x1b0/0x1b8
    [   38.403051] c7   1827 [<ffffff90085fcc44>] f2fs_getxattr+0x518/0x68c
    [   38.403066] c7   1827 [<ffffff90085fc508>] f2fs_xattr_generic_get+0xb0/0xd0
    [   38.403080] c7   1827 [<ffffff9008395708>] __vfs_getxattr+0x1f4/0x1fc
    [   38.403096] c7   1827 [<ffffff9008621bd0>] inode_doinit_with_dentry+0x360/0x938
    [   38.403109] c7   1827 [<ffffff900862d6cc>] selinux_d_instantiate+0x2c/0x38
    [   38.403123] c7   1827 [<ffffff900861b018>] security_d_instantiate+0x68/0x98
    [   38.403136] c7   1827 [<ffffff9008377db8>] d_splice_alias+0x58/0x348
    [   38.403149] c7   1827 [<ffffff900858d16c>] f2fs_lookup+0x608/0x774
    [   38.403163] c7   1827 [<ffffff900835eacc>] lookup_slow+0x1e0/0x2cc
    [   38.403177] c7   1827 [<ffffff9008367fe0>] walk_component+0x160/0x520
    [   38.403190] c7   1827 [<ffffff9008369ef4>] path_lookupat+0x110/0x2b4
    [   38.403203] c7   1827 [<ffffff900835dd38>] filename_lookup+0x1d8/0x3a8
    [   38.403216] c7   1827 [<ffffff900835eeb0>] user_path_at_empty+0x54/0x68
    [   38.403229] c7   1827 [<ffffff9008395f44>] SyS_getxattr+0xb4/0x18c
    [   38.403241] c7   1827 [<ffffff9008084200>] el0_svc_naked+0x34/0x38
    
    Signed-off-by: Randall Huang <huangrandall@google.com>
    [Jaegeuk Kim: Fix wrong ending boundary]
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    [bwh: Backported to 4.14: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec236cd6a254da2192c35a65fa0011a0268d66b7
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Wed Dec 26 19:54:07 2018 -0800

    f2fs: sanity check of xattr entry size
    
    commit 64beba0558fce7b59e9a8a7afd77290e82a22163 upstream.
    
    There is a security report where f2fs_getxattr() has a hole to expose wrong
    memory region when the image is malformed like this.
    
    f2fs_getxattr: entry->e_name_len: 4, size: 12288, buffer_size: 16384, len: 4
    
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    [bwh: Backported to 4.14: Keep using kzalloc()]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88266a5413a892399272183ad29f9d228e9435d6
Author: Chao Yu <chao@kernel.org>
Date:   Mon Sep 4 18:58:03 2017 +0800

    f2fs: introduce read_xattr_block
    
    commit 63840695f68c20735df8861062343cf1faa3768d upstream.
    
    Commit ba38c27eb93e ("f2fs: enhance lookup xattr") introduces
    lookup_all_xattrs duplicating from read_all_xattrs, which leaves
    lots of similar codes in between them, so introduce new help
    read_xattr_block to clean up redundant codes.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a289f82f6a7e7751c03604d6efe63c5121a3ec0f
Author: Chao Yu <chao@kernel.org>
Date:   Mon Sep 4 18:58:02 2017 +0800

    f2fs: introduce read_inline_xattr
    
    commit a5f433f7410530ae6bb907ebc049547d9dce665b upstream.
    
    Commit ba38c27eb93e ("f2fs: enhance lookup xattr") introduces
    lookup_all_xattrs duplicating from read_all_xattrs, which leaves
    lots of similar codes in between them, so introduce new help
    read_inline_xattr to clean up redundant codes.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84a729bc71f7042b3b6aa51cba16965da0e5dad9
Author: Cengiz Can <cengiz@kernel.wtf>
Date:   Wed Mar 4 13:58:19 2020 +0300

    blktrace: fix dereference after null check
    
    commit 153031a301bb07194e9c37466cfce8eacb977621 upstream.
    
    There was a recent change in blktrace.c that added a RCU protection to
    `q->blk_trace` in order to fix a use-after-free issue during access.
    
    However the change missed an edge case that can lead to dereferencing of
    `bt` pointer even when it's NULL:
    
    Coverity static analyzer marked this as a FORWARD_NULL issue with CID
    1460458.
    
    ```
    /kernel/trace/blktrace.c: 1904 in sysfs_blk_trace_attr_store()
    1898            ret = 0;
    1899            if (bt == NULL)
    1900                    ret = blk_trace_setup_queue(q, bdev);
    1901
    1902            if (ret == 0) {
    1903                    if (attr == &dev_attr_act_mask)
    >>>     CID 1460458:  Null pointer dereferences  (FORWARD_NULL)
    >>>     Dereferencing null pointer "bt".
    1904                            bt->act_mask = value;
    1905                    else if (attr == &dev_attr_pid)
    1906                            bt->pid = value;
    1907                    else if (attr == &dev_attr_start_lba)
    1908                            bt->start_lba = value;
    1909                    else if (attr == &dev_attr_end_lba)
    ```
    
    Added a reassignment with RCU annotation to fix the issue.
    
    Fixes: c780e86dd48 ("blktrace: Protect q->blk_trace with RCU")
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bob Liu <bob.liu@oracle.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Cengiz Can <cengiz@kernel.wtf>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a35c8cbf2522e4f45d266dca95dacc71cf412ed
Author: Jan Kara <jack@suse.cz>
Date:   Thu Feb 6 15:28:12 2020 +0100

    blktrace: Protect q->blk_trace with RCU
    
    commit c780e86dd48ef6467a1146cf7d0fe1e05a635039 upstream.
    
    KASAN is reporting that __blk_add_trace() has a use-after-free issue
    when accessing q->blk_trace. Indeed the switching of block tracing (and
    thus eventual freeing of q->blk_trace) is completely unsynchronized with
    the currently running tracing and thus it can happen that the blk_trace
    structure is being freed just while __blk_add_trace() works on it.
    Protect accesses to q->blk_trace by RCU during tracing and make sure we
    wait for the end of RCU grace period when shutting down tracing. Luckily
    that is rare enough event that we can afford that. Note that postponing
    the freeing of blk_trace to an RCU callback should better be avoided as
    it could have unexpected user visible side-effects as debugfs files
    would be still existing for a short while block tracing has been shut
    down.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=205711
    CC: stable@vger.kernel.org
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reported-by: Tristan Madani <tristmd@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [bwh: Backported to 4.14: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7216a2ebed6492254ea0e72994289400ac86ce4
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Nov 19 11:52:55 2017 -0700

    blktrace: fix trace mutex deadlock
    
    commit 2967acbb257a6a9bf912f4778b727e00972eac9b upstream.
    
    A previous commit changed the locking around registration/cleanup,
    but direct callers of blk_trace_remove() were missed. This means
    that if we hit the error path in setup, we will deadlock on
    attempting to re-acquire the queue trace mutex.
    
    Fixes: 1f2cac107c59 ("blktrace: fix unlocked access to init/start-stop/teardown")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b390c22c0bc7582e2cd3ee9f3f85606e6ebc78fa
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Nov 5 09:13:48 2017 -0700

    blktrace: fix unlocked access to init/start-stop/teardown
    
    commit 1f2cac107c591c24b60b115d6050adc213d10fc0 upstream.
    
    sg.c calls into the blktrace functions without holding the proper queue
    mutex for doing setup, start/stop, or teardown.
    
    Add internal unlocked variants, and export the ones that do the proper
    locking.
    
    Fixes: 6da127ad0918 ("blktrace: Add blktrace ioctls to SCSI generic devices")
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ab8786f78c3fc930f9abf6d6d85e95567de4e1f
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed Dec 4 15:35:53 2019 +0100

    net: ipv6_stub: use ip6_dst_lookup_flow instead of ip6_dst_lookup
    
    commit 6c8991f41546c3c472503dff1ea9daaddf9331c2 upstream.
    
    ipv6_stub uses the ip6_dst_lookup function to allow other modules to
    perform IPv6 lookups. However, this function skips the XFRM layer
    entirely.
    
    All users of ipv6_stub->ip6_dst_lookup use ip_route_output_flow (via the
    ip_route_output_key and ip_route_output helpers) for their IPv4 lookups,
    which calls xfrm_lookup_route(). This patch fixes this inconsistent
    behavior by switching the stub to ip6_dst_lookup_flow, which also calls
    xfrm_lookup_route().
    
    This requires some changes in all the callers, as these two functions
    take different arguments and have different return types.
    
    Fixes: 5f81bd2e5d80 ("ipv6: export a stub for IPv6 symbols used by vxlan")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.14:
     - Drop change in lwt_bpf.c
     - Delete now-unused "ret" in mlx5e_route_lookup_ipv6()
     - Initialise "out_dev" in mlx5e_create_encap_header_ipv6() to avoid
       introducing a spurious "may be used uninitialised" warning
     - Adjust filenames, context, indentation]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 081363a22ecd72ea1287a4ff0b539ba536c1b646
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed Dec 4 15:35:52 2019 +0100

    net: ipv6: add net argument to ip6_dst_lookup_flow
    
    commit c4e85f73afb6384123e5ef1bba3315b2e3ad031e upstream.
    
    This will be used in the conversion of ipv6_stub to ip6_dst_lookup_flow,
    as some modules currently pass a net argument without a socket to
    ip6_dst_lookup. This is equivalent to commit 343d60aada5a ("ipv6: change
    ipv6_stub_impl.ipv6_dst_lookup to take net argument").
    
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.14: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcd70bdd48e52ee163ad72e6869fd42b162ba867
Author: Ivan Delalande <colona@arista.com>
Date:   Thu May 7 18:35:53 2020 -0700

    scripts/decodecode: fix trapping instruction formatting
    
    commit e08df079b23e2e982df15aa340bfbaf50f297504 upstream.
    
    If the trapping instruction contains a ':', for a memory access through
    segment registers for example, the sed substitution will insert the '*'
    marker in the middle of the instruction instead of the line address:
    
            2b:   65 48 0f c7 0f          cmpxchg16b %gs:*(%rdi)          <-- trapping instruction
    
    I started to think I had forgotten some quirk of the assembly syntax
    before noticing that it was actually coming from the script.  Fix it to
    add the address marker at the right place for these instructions:
    
            28:   49 8b 06                mov    (%r14),%rax
            2b:*  65 48 0f c7 0f          cmpxchg16b %gs:(%rdi)           <-- trapping instruction
            30:   0f 94 c0                sete   %al
    
    Fixes: 18ff44b189e2 ("scripts/decodecode: make faulting insn ptr more robust")
    Signed-off-by: Ivan Delalande <colona@arista.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/20200419223653.GA31248@visor
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93103550a5c183182710516e2d04bff5100e135b
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:00 2020 -0500

    objtool: Fix stack offset tracking for indirect CFAs
    
    commit d8dd25a461e4eec7190cb9d66616aceacc5110ad upstream.
    
    When the current frame address (CFA) is stored on the stack (i.e.,
    cfa->base == CFI_SP_INDIRECT), objtool neglects to adjust the stack
    offset when there are subsequent pushes or pops.  This results in bad
    ORC data at the end of the ENTER_IRQ_STACK macro, when it puts the
    previous stack pointer on the stack and does a subsequent push.
    
    This fixes the following unwinder warning:
    
      WARNING: can't dereference registers at 00000000f0a6bdba for ip interrupt_entry+0x9f/0xa0
    
    Fixes: 627fce14809b ("objtool: Add ORC unwind table generation")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Reported-by: Dave Jones <dsj@fb.com>
    Reported-by: Steven Rostedt <rostedt@goodmis.org>
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Reported-by: Joe Mario <jmario@redhat.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/853d5d691b29e250333332f09b8e27410b2d9924.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 900cbd7c947423565dfad86fc4a6c3f23158325d
Author: Guillaume Nault <gnault@redhat.com>
Date:   Tue Apr 21 02:42:19 2020 +0200

    netfilter: nat: never update the UDP checksum when it's 0
    
    commit ea64d8d6c675c0bb712689b13810301de9d8f77a upstream.
    
    If the UDP header of a local VXLAN endpoint is NAT-ed, and the VXLAN
    device has disabled UDP checksums and enabled Tx checksum offloading,
    then the skb passed to udp_manip_pkt() has hdr->check == 0 (outer
    checksum disabled) and skb->ip_summed == CHECKSUM_PARTIAL (inner packet
    checksum offloaded).
    
    Because of the ->ip_summed value, udp_manip_pkt() tries to update the
    outer checksum with the new address and port, leading to an invalid
    checksum sent on the wire, as the original null checksum obviously
    didn't take the old address and port into account.
    
    So, we can't take ->ip_summed into account in udp_manip_pkt(), as it
    might not refer to the checksum we're acting on. Instead, we can base
    the decision to update the UDP checksum entirely on the value of
    hdr->check, because it's null if and only if checksum is disabled:
    
      * A fully computed checksum can't be 0, since a 0 checksum is
        represented by the CSUM_MANGLED_0 value instead.
    
      * A partial checksum can't be 0, since the pseudo-header always adds
        at least one non-zero value (the UDP protocol type 0x11) and adding
        more values to the sum can't make it wrap to 0 as the carry is then
        added to the wrapped number.
    
      * A disabled checksum uses the special value 0.
    
    The problem seems to be there from day one, although it was probably
    not visible before UDP tunnels were implemented.
    
    Fixes: 5b1158e909ec ("[NETFILTER]: Add NAT support for nf_conntrack")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2645ac77ba05385d198e7f534b12c9f49b6ec150
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:06:13 2020 -0500

    x86/unwind/orc: Fix error path for bad ORC entry type
    
    commit a0f81bf26888048100bf017fadf438a5bdffa8d8 upstream.
    
    If the ORC entry type is unknown, nothing else can be done other than
    reporting an error.  Exit the function instead of breaking out of the
    switch statement.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/a7fa668ca6eabbe81ab18b2424f15adbbfdc810a.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5970988a8282fea634f7809226fd529c30b6124
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:08 2020 -0500

    x86/unwind/orc: Prevent unwinding before ORC initialization
    
    commit 98d0c8ebf77e0ba7c54a9ae05ea588f0e9e3f46e upstream.
    
    If the unwinder is called before the ORC data has been initialized,
    orc_find() returns NULL, and it tries to fall back to using frame
    pointers.  This can cause some unexpected warnings during boot.
    
    Move the 'orc_init' check from orc_find() to __unwind_init(), so that it
    doesn't even try to unwind from an uninitialized state.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/069d1499ad606d85532eb32ce39b2441679667d5.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73d90e8cd2420a054841dc748525714418a08d59
Author: Miroslav Benes <mbenes@suse.cz>
Date:   Sat Apr 25 05:03:07 2020 -0500

    x86/unwind/orc: Don't skip the first frame for inactive tasks
    
    commit f1d9a2abff66aa8156fbc1493abed468db63ea48 upstream.
    
    When unwinding an inactive task, the ORC unwinder skips the first frame
    by default.  If both the 'regs' and 'first_frame' parameters of
    unwind_start() are NULL, 'state->sp' and 'first_frame' are later
    initialized to the same value for an inactive task.  Given there is a
    "less than or equal to" comparison used at the end of __unwind_start()
    for skipping stack frames, the first frame is skipped.
    
    Drop the equal part of the comparison and make the behavior equivalent
    to the frame pointer unwinder.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/7f08db872ab59e807016910acdbe82f744de7065.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c458931308a4c61989e0dbe0bc6e30ea41eae07
Author: Jann Horn <jannh@google.com>
Date:   Sat Apr 25 05:03:04 2020 -0500

    x86/entry/64: Fix unwind hints in rewind_stack_do_exit()
    
    commit f977df7b7ca45a4ac4b66d30a8931d0434c394b1 upstream.
    
    The LEAQ instruction in rewind_stack_do_exit() moves the stack pointer
    directly below the pt_regs at the top of the task stack before calling
    do_exit(). Tell the unwinder to expect pt_regs.
    
    Fixes: 8c1f75587a18 ("x86/entry/64: Add unwind hint annotations")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/68c33e17ae5963854916a46f522624f8e1d264f2.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e62991b7aaddc060aa1903c2cbf58e6521a39c90
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:02 2020 -0500

    x86/entry/64: Fix unwind hints in kernel exit path
    
    commit 1fb143634a38095b641a3a21220774799772dc4c upstream.
    
    In swapgs_restore_regs_and_return_to_usermode, after the stack is
    switched to the trampoline stack, the existing UNWIND_HINT_REGS hint is
    no longer valid, which can result in the following ORC unwinder warning:
    
      WARNING: can't dereference registers at 000000003aeb0cdd for ip swapgs_restore_regs_and_return_to_usermode+0x93/0xa0
    
    For full correctness, we could try to add complicated unwind hints so
    the unwinder could continue to find the registers, but when when it's
    this close to kernel exit, unwind hints aren't really needed anymore and
    it's fine to just use an empty hint which tells the unwinder to stop.
    
    For consistency, also move the UNWIND_HINT_EMPTY in
    entry_SYSCALL_64_after_hwframe to a similar location.
    
    Fixes: 3e3b9293d392 ("x86/entry/64: Return to userspace from the trampoline stack")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Reported-by: Dave Jones <dsj@fb.com>
    Reported-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reported-by: Joe Mario <jmario@redhat.com>
    Reported-by: Jann Horn <jannh@google.com>
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/60ea8f562987ed2d9ace2977502fe481c0d7c9a0.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81f4be8be78d54b7c8db0ab4e1a6cef6281ca1f3
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Mon Apr 20 13:37:20 2020 +0800

    batman-adv: Fix refcnt leak in batadv_v_ogm_process
    
    commit 6f91a3f7af4186099dd10fa530dd7e0d9c29747d upstream.
    
    batadv_v_ogm_process() invokes batadv_hardif_neigh_get(), which returns
    a reference of the neighbor object to "hardif_neigh" with increased
    refcount.
    
    When batadv_v_ogm_process() returns, "hardif_neigh" becomes invalid, so
    the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling paths of
    batadv_v_ogm_process(). When batadv_v_ogm_orig_get() fails to get the
    orig node and returns NULL, the refcnt increased by
    batadv_hardif_neigh_get() is not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_v_ogm_orig_get()
    fails to get the orig node.
    
    Fixes: 9323158ef9f4 ("batman-adv: OGMv2 - implement originators logic")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bc6aa317fa8a1df52d62c8bca54da03fbf5a330
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:35:21 2020 +0800

    batman-adv: Fix refcnt leak in batadv_store_throughput_override
    
    commit 6107c5da0fca8b50b4d3215e94d619d38cc4a18c upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_store_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in one error path of
    batadv_store_throughput_override(). When batadv_parse_throughput()
    returns NULL, the refcnt increased by batadv_hardif_get_by_netdev() is
    not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_parse_throughput()
    returns NULL.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62c373550b16828b14c25241954322fcd7855f08
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:31:50 2020 +0800

    batman-adv: Fix refcnt leak in batadv_show_throughput_override
    
    commit f872de8185acf1b48b954ba5bd8f9bc0a0d14016 upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_show_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in the normal path of
    batadv_show_throughput_override(), which forgets to decrease the refcnt
    increased by batadv_hardif_get_by_netdev() before the function returns,
    causing a refcnt leak.
    
    Fix this issue by calling batadv_hardif_put() before the
    batadv_show_throughput_override() returns in the normal path.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8eacda58b60ca55ba6d8f507b364272b7bd3cb28
Author: George Spelvin <lkml@sdf.org>
Date:   Sun Mar 8 09:44:59 2020 -0400

    batman-adv: fix batadv_nc_random_weight_tq
    
    commit fd0c42c4dea54335967c5a86f15fc064235a2797 upstream.
    
    and change to pseudorandom numbers, as this is a traffic dithering
    operation that doesn't need crypto-grade.
    
    The previous code operated in 4 steps:
    
    1. Generate a random byte 0 <= rand_tq <= 255
    2. Multiply it by BATADV_TQ_MAX_VALUE - tq
    3. Divide by 255 (= BATADV_TQ_MAX_VALUE)
    4. Return BATADV_TQ_MAX_VALUE - rand_tq
    
    This would apperar to scale (BATADV_TQ_MAX_VALUE - tq) by a random
    value between 0/255 and 255/255.
    
    But!  The intermediate value between steps 3 and 4 is stored in a u8
    variable.  So it's truncated, and most of the time, is less than 255, after
    which the division produces 0.  Specifically, if tq is odd, the product is
    always even, and can never be 255.  If tq is even, there's exactly one
    random byte value that will produce a product byte of 255.
    
    Thus, the return value is 255 (511/512 of the time) or 254 (1/512
    of the time).
    
    If we assume that the truncation is a bug, and the code is meant to scale
    the input, a simpler way of looking at it is that it's returning a random
    value between tq and BATADV_TQ_MAX_VALUE, inclusive.
    
    Well, we have an optimized function for doing just that.
    
    Fixes: 3c12de9a5c75 ("batman-adv: network coding - code and transmit packets if possible")
    Signed-off-by: George Spelvin <lkml@sdf.org>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff6c4721758a3412a5f491e8bdeb79c4cf84fdc1
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Thu Apr 16 16:28:59 2020 +0000

    coredump: fix crash when umh is disabled
    
    commit 3740d93e37902b31159a82da2d5c8812ed825404 upstream.
    
    Commit 64e90a8acb859 ("Introduce STATIC_USERMODEHELPER to mediate
    call_usermodehelper()") added the optiont to disable all
    call_usermodehelper() calls by setting STATIC_USERMODEHELPER_PATH to
    an empty string. When this is done, and crashdump is triggered, it
    will crash on null pointer dereference, since we make assumptions
    over what call_usermodehelper_exec() did.
    
    This has been reported by Sergey when one triggers a a coredump
    with the following configuration:
    
    ```
    CONFIG_STATIC_USERMODEHELPER=y
    CONFIG_STATIC_USERMODEHELPER_PATH=""
    kernel.core_pattern = |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e
    ```
    
    The way disabling the umh was designed was that call_usermodehelper_exec()
    would just return early, without an error. But coredump assumes
    certain variables are set up for us when this happens, and calls
    ile_start_write(cprm.file) with a NULL file.
    
    [    2.819676] BUG: kernel NULL pointer dereference, address: 0000000000000020
    [    2.819859] #PF: supervisor read access in kernel mode
    [    2.820035] #PF: error_code(0x0000) - not-present page
    [    2.820188] PGD 0 P4D 0
    [    2.820305] Oops: 0000 [#1] SMP PTI
    [    2.820436] CPU: 2 PID: 89 Comm: a Not tainted 5.7.0-rc1+ #7
    [    2.820680] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS ?-20190711_202441-buildvm-armv7-10.arm.fedoraproject.org-2.fc31 04/01/2014
    [    2.821150] RIP: 0010:do_coredump+0xd80/0x1060
    [    2.821385] Code: e8 95 11 ed ff 48 c7 c6 cc a7 b4 81 48 8d bd 28 ff
    ff ff 89 c2 e8 70 f1 ff ff 41 89 c2 85 c0 0f 84 72 f7 ff ff e9 b4 fe ff
    ff <48> 8b 57 20 0f b7 02 66 25 00 f0 66 3d 00 8
    0 0f 84 9c 01 00 00 44
    [    2.822014] RSP: 0000:ffffc9000029bcb8 EFLAGS: 00010246
    [    2.822339] RAX: 0000000000000000 RBX: ffff88803f860000 RCX: 000000000000000a
    [    2.822746] RDX: 0000000000000009 RSI: 0000000000000282 RDI: 0000000000000000
    [    2.823141] RBP: ffffc9000029bde8 R08: 0000000000000000 R09: ffffc9000029bc00
    [    2.823508] R10: 0000000000000001 R11: ffff88803dec90be R12: ffffffff81c39da0
    [    2.823902] R13: ffff88803de84400 R14: 0000000000000000 R15: 0000000000000000
    [    2.824285] FS:  00007fee08183540(0000) GS:ffff88803e480000(0000) knlGS:0000000000000000
    [    2.824767] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    2.825111] CR2: 0000000000000020 CR3: 000000003f856005 CR4: 0000000000060ea0
    [    2.825479] Call Trace:
    [    2.825790]  get_signal+0x11e/0x720
    [    2.826087]  do_signal+0x1d/0x670
    [    2.826361]  ? force_sig_info_to_task+0xc1/0xf0
    [    2.826691]  ? force_sig_fault+0x3c/0x40
    [    2.826996]  ? do_trap+0xc9/0x100
    [    2.827179]  exit_to_usermode_loop+0x49/0x90
    [    2.827359]  prepare_exit_to_usermode+0x77/0xb0
    [    2.827559]  ? invalid_op+0xa/0x30
    [    2.827747]  ret_from_intr+0x20/0x20
    [    2.827921] RIP: 0033:0x55e2c76d2129
    [    2.828107] Code: 2d ff ff ff e8 68 ff ff ff 5d c6 05 18 2f 00 00 01
    c3 0f 1f 80 00 00 00 00 c3 0f 1f 80 00 00 00 00 e9 7b ff ff ff 55 48 89
    e5 <0f> 0b b8 00 00 00 00 5d c3 66 2e 0f 1f 84 0
    0 00 00 00 00 0f 1f 40
    [    2.828603] RSP: 002b:00007fffeba5e080 EFLAGS: 00010246
    [    2.828801] RAX: 000055e2c76d2125 RBX: 0000000000000000 RCX: 00007fee0817c718
    [    2.829034] RDX: 00007fffeba5e188 RSI: 00007fffeba5e178 RDI: 0000000000000001
    [    2.829257] RBP: 00007fffeba5e080 R08: 0000000000000000 R09: 00007fee08193c00
    [    2.829482] R10: 0000000000000009 R11: 0000000000000000 R12: 000055e2c76d2040
    [    2.829727] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    [    2.829964] CR2: 0000000000000020
    [    2.830149] ---[ end trace ceed83d8c68a1bf1 ]---
    ```
    
    Cc: <stable@vger.kernel.org> # v4.11+
    Fixes: 64e90a8acb85 ("Introduce STATIC_USERMODEHELPER to mediate call_usermodehelper()")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=199795
    Reported-by: Tony Vroon <chainsaw@gentoo.org>
    Reported-by: Sergey Kvachonok <ravenexp@gmail.com>
    Tested-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/20200416162859.26518-1-mcgrof@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8eb8d55de811420dd7cc4e103579413c10615437
Author: David Hildenbrand <david@redhat.com>
Date:   Thu May 7 18:35:46 2020 -0700

    mm/page_alloc: fix watchdog soft lockups during set_zone_contiguous()
    
    commit e84fe99b68ce353c37ceeecc95dce9696c976556 upstream.
    
    Without CONFIG_PREEMPT, it can happen that we get soft lockups detected,
    e.g., while booting up.
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [swapper/0:1]
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0-next-20200331+ #4
      Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
      RIP: __pageblock_pfn_to_page+0x134/0x1c0
      Call Trace:
       set_zone_contiguous+0x56/0x70
       page_alloc_init_late+0x166/0x176
       kernel_init_freeable+0xfa/0x255
       kernel_init+0xa/0x106
       ret_from_fork+0x35/0x40
    
    The issue becomes visible when having a lot of memory (e.g., 4TB)
    assigned to a single NUMA node - a system that can easily be created
    using QEMU.  Inside VMs on a hypervisor with quite some memory
    overcommit, this is fairly easy to trigger.
    
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Reviewed-by: Baoquan He <bhe@redhat.com>
    Reviewed-by: Shile Zhang <shile.zhang@linux.alibaba.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Shile Zhang <shile.zhang@linux.alibaba.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200416073417.5003-1-david@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91017f1ac3b6306cf0d10cbad0d6bbfd7e606873
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Apr 14 15:10:08 2020 +0100

    KVM: arm: vgic: Fix limit condition when writing to GICD_I[CS]ACTIVER
    
    commit 1c32ca5dc6d00012f0c964e5fdd7042fcc71efb1 upstream.
    
    When deciding whether a guest has to be stopped we check whether this
    is a private interrupt or not. Unfortunately, there's an off-by-one bug
    here, and we fail to recognize a whole range of interrupts as being
    global (GICv2 SPIs 32-63).
    
    Fix the condition from > to be >=.
    
    Cc: stable@vger.kernel.org
    Fixes: abd7229626b93 ("KVM: arm/arm64: Simplify active_change_prepare and plug race")
    Reported-by: André Przywara <andre.przywara@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d9c4f41d8bf5f2976ced0cc703acb2651259ca9
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed May 6 10:36:18 2020 -0400

    tracing: Add a vmalloc_sync_mappings() for safe measure
    
    commit 11f5efc3ab66284f7aaacc926e9351d658e2577b upstream.
    
    x86_64 lazily maps in the vmalloc pages, and the way this works with per_cpu
    areas can be complex, to say the least. Mappings may happen at boot up, and
    if nothing synchronizes the page tables, those page mappings may not be
    synced till they are used. This causes issues for anything that might touch
    one of those mappings in the path of the page fault handler. When one of
    those unmapped mappings is touched in the page fault handler, it will cause
    another page fault, which in turn will cause a page fault, and leave us in
    a loop of page faults.
    
    Commit 763802b53a42 ("x86/mm: split vmalloc_sync_all()") split
    vmalloc_sync_all() into vmalloc_sync_unmappings() and
    vmalloc_sync_mappings(), as on system exit, it did not need to do a full
    sync on x86_64 (although it still needed to be done on x86_32). By chance,
    the vmalloc_sync_all() would synchronize the page mappings done at boot up
    and prevent the per cpu area from being a problem for tracing in the page
    fault handler. But when that synchronization in the exit of a task became a
    nop, it caused the problem to appear.
    
    Link: https://lore.kernel.org/r/20200429054857.66e8e333@oasis.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 737223fbca3b1 ("tracing: Consolidate buffer allocation code")
    Reported-by: "Tzvetomir Stoyanov (VMware)" <tz.stoyanov@gmail.com>
    Suggested-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d5a1deb95a1ee00613360d52b7483db2e27664
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:03:04 2020 +0200

    USB: serial: garmin_gps: add sanity checking for data length
    
    commit e9b3c610a05c1cdf8e959a6d89c38807ff758ee6 upstream.
    
    We must not process packets shorter than a packet ID
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-and-tested-by: syzbot+d29e9263e13ce0b9f4fd@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cdab0743f843b2a5feabf42862fa7465fba0cee
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 29 17:52:18 2020 +0200

    USB: uas: add quirk for LaCie 2Big Quadra
    
    commit 9f04db234af691007bb785342a06abab5fb34474 upstream.
    
    This device needs US_FL_NO_REPORT_OPCODES to avoid going
    through prolonged error handling on enumeration.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: Julian Groß <julian.g@posteo.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200429155218.7308-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2079ed06852f392f7972b3c40dee8a5af05ddadf
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Apr 22 16:18:48 2020 -0400

    HID: usbhid: Fix race between usbhid_close() and usbhid_stop()
    
    commit 0ed08faded1da03eb3def61502b27f81aef2e615 upstream.
    
    The syzbot fuzzer discovered a bad race between in the usbhid driver
    between usbhid_stop() and usbhid_close().  In particular,
    usbhid_stop() does:
    
            usb_free_urb(usbhid->urbin);
            ...
            usbhid->urbin = NULL; /* don't mess up next start */
    
    and usbhid_close() does:
    
            usb_kill_urb(usbhid->urbin);
    
    with no mutual exclusion.  If the two routines happen to run
    concurrently so that usb_kill_urb() is called in between the
    usb_free_urb() and the NULL assignment, it will access the
    deallocated urb structure -- a use-after-free bug.
    
    This patch adds a mutex to the usbhid private structure and uses it to
    enforce mutual exclusion of the usbhid_start(), usbhid_stop(),
    usbhid_open() and usbhid_close() callbacks.
    
    Reported-and-tested-by: syzbot+7bf5a7b0f0a1f9446f4c@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 556bf5ffb401a22389c433a6688ebc7c18a3ea1c
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Thu Nov 23 11:27:24 2017 +0800

    geneve: only configure or fill UDP_ZERO_CSUM6_RX/TX info when CONFIG_IPV6
    
    commit f9094b7603c011d27db7ba109e69881c72fa611d upstream.
    
    Stefano pointed that configure or show UDP_ZERO_CSUM6_RX/TX info doesn't
    make sense if we haven't enabled CONFIG_IPV6. Fix it by adding
    if IS_ENABLED(CONFIG_IPV6) check.
    
    Fixes: abe492b4f50c ("geneve: UDP checksum configuration via netlink")
    Fixes: fd7eafd02121 ("geneve: fix fill_info when link down")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c5aafc7bfb99b8cc668de703497472ab0988192
Author: Jason Gerecke <jason.gerecke@wacom.com>
Date:   Wed Apr 1 14:23:29 2020 -0700

    HID: wacom: Read HID_DG_CONTACTMAX directly for non-generic devices
    
    commit 778fbf4179991e7652e97d7f1ca1f657ef828422 upstream.
    
    We've recently switched from extracting the value of HID_DG_CONTACTMAX
    at a fixed offset (which may not be correct for all tablets) to
    injecting the report into the driver for the generic codepath to handle.
    Unfortunately, this change was made for *all* tablets, even those which
    aren't generic. Because `wacom_wac_report` ignores reports from non-
    generic devices, the contact count never gets initialized. Ultimately
    this results in the touch device itself failing to probe, and thus the
    loss of touch input.
    
    This commit adds back the fixed-offset extraction for non-generic devices.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/155
    Fixes: 184eccd40389 ("HID: wacom: generic: read HID_DG_CONTACTMAX from any feature report")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    CC: stable@vger.kernel.org # 5.3+
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff1609631454696de6daebae765e8579c3b5d10b
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Aug 28 13:40:51 2018 +0200

    ipv6: fix cleanup ordering for ip6_mr failure
    
    commit afe49de44c27a89e8e9631c44b5ffadf6ace65e2 upstream.
    
    Commit 15e668070a64 ("ipv6: reorder icmpv6_init() and ip6_mr_init()")
    moved the cleanup label for ipmr_fail, but should have changed the
    contents of the cleanup labels as well. Now we can end up cleaning up
    icmpv6 even though it hasn't been initialized (jump to icmp_fail or
    ipmr_fail).
    
    Simply undo things in the reverse order of their initialization.
    
    Example of panic (triggered by faking a failure of icmpv6_init):
    
        kasan: GPF could be caused by NULL-ptr deref or user memory access
        general protection fault: 0000 [#1] PREEMPT SMP KASAN PTI
        [...]
        RIP: 0010:__list_del_entry_valid+0x79/0x160
        [...]
        Call Trace:
         ? lock_release+0x8a0/0x8a0
         unregister_pernet_operations+0xd4/0x560
         ? ops_free_list+0x480/0x480
         ? down_write+0x91/0x130
         ? unregister_pernet_subsys+0x15/0x30
         ? down_read+0x1b0/0x1b0
         ? up_read+0x110/0x110
         ? kmem_cache_create_usercopy+0x1b4/0x240
         unregister_pernet_subsys+0x1d/0x30
         icmpv6_cleanup+0x1d/0x30
         inet6_init+0x1b5/0x23f
    
    Fixes: 15e668070a64 ("ipv6: reorder icmpv6_init() and ip6_mr_init()")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0c23ec2171f98e401504bb6b789410f1646a686
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon May 4 12:48:54 2020 -0400

    net: stricter validation of untrusted gso packets
    
    [ Upstream commit 9274124f023b5c56dc4326637d4f787968b03607 ]
    
    Syzkaller again found a path to a kernel crash through bad gso input:
    a packet with transport header extending beyond skb_headlen(skb).
    
    Tighten validation at kernel entry:
    
    - Verify that the transport header lies within the linear section.
    
        To avoid pulling linux/tcp.h, verify just sizeof tcphdr.
        tcp_gso_segment will call pskb_may_pull (th->doff * 4) before use.
    
    - Match the gso_type against the ip_proto found by the flow dissector.
    
    Fixes: bfd5f4a3d605 ("packet: Add GSO/csum offload support.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51e8517b44afffbbfba9c3745388a3049d49aaf9
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:38 2020 -0400

    bnxt_en: Fix VF anti-spoof filter setup.
    
    [ Upstream commit c71c4e49afe173823a2a85b0cabc9b3f1176ffa2 ]
    
    Fix the logic that sets the enable/disable flag for the source MAC
    filter according to firmware spec 1.7.1.
    
    In the original firmware spec. before 1.7.1, the VF spoof check flags
    were not latched after making the HWRM_FUNC_CFG call, so there was a
    need to keep the func_flags so that subsequent calls would perserve
    the VF spoof check setting.  A change was made in the 1.7.1 spec
    so that the flags became latched.  So we now set or clear the anti-
    spoof setting directly without retrieving the old settings in the
    stored vf->func_flags which are no longer valid.  We also remove the
    unneeded vf->func_flags.
    
    Fixes: 8eb992e876a8 ("bnxt_en: Update firmware interface spec to 1.7.6.2.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7766a0a884ce4ec988df986b5a2f0f1ff4970cff
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:40 2020 -0400

    bnxt_en: Improve AER slot reset.
    
    [ Upstream commit bae361c54fb6ac6eba3b4762f49ce14beb73ef13 ]
    
    Improve the slot reset sequence by disabling the device to prevent bad
    DMAs if slot reset fails.  Return the proper result instead of always
    PCI_ERS_RESULT_RECOVERED to the caller.
    
    Fixes: 6316ea6db93d ("bnxt_en: Enable AER support.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c53246b7a0432a8e6469a75128e47e1c5b4de6b4
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Feb 23 03:27:41 2020 +0200

    net/mlx5: Fix command entry leak in Internal Error State
    
    [ Upstream commit cece6f432cca9f18900463ed01b97a152a03600a ]
    
    Processing commands by cmd_work_handler() while already in Internal
    Error State will result in entry leak, since the handler process force
    completion without doorbell. Forced completion doesn't release the entry
    and event completion will never arrive, so entry should be released.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50387588085e07f64e9c9b9f1f432c85167d51a5
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Jul 21 08:40:13 2019 +0300

    net/mlx5: Fix forced completion access non initialized command entry
    
    [ Upstream commit f3cb3cebe26ed4c8036adbd9448b372129d3c371 ]
    
    mlx5_cmd_flush() will trigger forced completions to all valid command
    entries. Triggered by an asynch event such as fast teardown it can
    happen at any stage of the command, including command initialization.
    It will trigger forced completion and that can lead to completion on an
    uninitialized command entry.
    
    Setting MLX5_CMD_ENT_STATE_PENDING_COMP only after command entry is
    initialized will ensure force completion is treated only if command
    entry is initialized.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20d19a13f8c84e9dbd0a3a6b4c6988d8a57073cc
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:42 2020 -0400

    bnxt_en: Fix VLAN acceleration handling in bnxt_fix_features().
    
    [ Upstream commit c72cb303aa6c2ae7e4184f0081c6d11bf03fb96b ]
    
    The current logic in bnxt_fix_features() will inadvertently turn on both
    CTAG and STAG VLAN offload if the user tries to disable both.  Fix it
    by checking that the user is trying to enable CTAG or STAG before
    enabling both.  The logic is supposed to enable or disable both CTAG and
    STAG together.
    
    Fixes: 5a9f6b238e59 ("bnxt_en: Enable and disable RX CTAG and RX STAG VLAN acceleration together.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9945949908fe11b27fa1127d2fc9e3182c218312
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 26 18:19:07 2020 -0700

    sch_sfq: validate silly quantum values
    
    [ Upstream commit df4953e4e997e273501339f607b77953772e3559 ]
    
    syzbot managed to set up sfq so that q->scaled_quantum was zero,
    triggering an infinite loop in sfq_dequeue()
    
    More generally, we must only accept quantum between 1 and 2^18 - 7,
    meaning scaled_quantum must be in [1, 0x7FFF] range.
    
    Otherwise, we also could have a loop in sfq_dequeue()
    if scaled_quantum happens to be 0x8000, since slot->allot
    could indefinitely switch between 0 and 0x8000.
    
    Fixes: eeaeb068f139 ("sch_sfq: allow big packets and be fair")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+0251e883fe39e7a0cb0a@syzkaller.appspotmail.com
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4836eb6b59657a383fa97d3d301da77581ec8f0c
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 15:19:51 2020 -0700

    sch_choke: avoid potential panic in choke_reset()
    
    [ Upstream commit 8738c85c72b3108c9b9a369a39868ba5f8e10ae0 ]
    
    If choke_init() could not allocate q->tab, we would crash later
    in choke_reset().
    
    BUG: KASAN: null-ptr-deref in memset include/linux/string.h:366 [inline]
    BUG: KASAN: null-ptr-deref in choke_reset+0x208/0x340 net/sched/sch_choke.c:326
    Write of size 8 at addr 0000000000000000 by task syz-executor822/7022
    
    CPU: 1 PID: 7022 Comm: syz-executor822 Not tainted 5.7.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     __kasan_report.cold+0x5/0x4d mm/kasan/report.c:515
     kasan_report+0x33/0x50 mm/kasan/common.c:625
     check_memory_region_inline mm/kasan/generic.c:187 [inline]
     check_memory_region+0x141/0x190 mm/kasan/generic.c:193
     memset+0x20/0x40 mm/kasan/common.c:85
     memset include/linux/string.h:366 [inline]
     choke_reset+0x208/0x340 net/sched/sch_choke.c:326
     qdisc_reset+0x6b/0x520 net/sched/sch_generic.c:910
     dev_deactivate_queue.constprop.0+0x13c/0x240 net/sched/sch_generic.c:1138
     netdev_for_each_tx_queue include/linux/netdevice.h:2197 [inline]
     dev_deactivate_many+0xe2/0xba0 net/sched/sch_generic.c:1195
     dev_deactivate+0xf8/0x1c0 net/sched/sch_generic.c:1233
     qdisc_graft+0xd25/0x1120 net/sched/sch_api.c:1051
     tc_modify_qdisc+0xbab/0x1a00 net/sched/sch_api.c:1670
     rtnetlink_rcv_msg+0x44e/0xad0 net/core/rtnetlink.c:5454
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
    
    Fixes: 77e62da6e60c ("sch_choke: drop all packets in queue during reset")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6c0e9ea1c807a862ef29a0b52677fceb23226e5
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:52:28 2020 +1000

    net: usb: qmi_wwan: add support for DW5816e
    
    [ Upstream commit 57c7f2bd758eed867295c81d3527fff4fab1ed74 ]
    
    Add support for Dell Wireless 5816e to drivers/net/usb/qmi_wwan.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d50559b5c8afb6c0969ce9d4e64e95870c09524
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon May 4 11:36:02 2020 +0300

    net/mlx4_core: Fix use of ENOSPC around mlx4_counter_alloc()
    
    [ Upstream commit 40e473071dbad04316ddc3613c3a3d1c75458299 ]
    
    When ENOSPC is set the idx is still valid and gets set to the global
    MLX4_SINK_COUNTER_INDEX.  However gcc's static analysis cannot tell that
    ENOSPC is impossible from mlx4_cmd_imm() and gives this warning:
    
    drivers/net/ethernet/mellanox/mlx4/main.c:2552:28: warning: 'idx' may be
    used uninitialized in this function [-Wmaybe-uninitialized]
     2552 |    priv->def_counter[port] = idx;
    
    Also, when ENOSPC is returned mlx4_allocate_default_counters should not
    fail.
    
    Fixes: 6de5f7f6a1fa ("net/mlx4_core: Allocate default counter per port")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93f18b82d5e4a70fa79ed6d0eacf3858ddb219b3
Author: Scott Dial <scott@scottdial.com>
Date:   Fri Apr 24 18:51:08 2020 -0400

    net: macsec: preserve ingress frame ordering
    
    [ Upstream commit ab046a5d4be4c90a3952a0eae75617b49c0cb01b ]
    
    MACsec decryption always occurs in a softirq context. Since
    the FPU may not be usable in the softirq context, the call to
    decrypt may be scheduled on the cryptd work queue. The cryptd
    work queue does not provide ordering guarantees. Therefore,
    preserving order requires masking out ASYNC implementations
    of gcm(aes).
    
    For instance, an Intel CPU with AES-NI makes available the
    generic-gcm-aesni driver from the aesni_intel module to
    implement gcm(aes). However, this implementation requires
    the FPU, so it is not always available to use from a softirq
    context, and will fallback to the cryptd work queue, which
    does not preserve frame ordering. With this change, such a
    system would select gcm_base(ctr(aes-aesni),ghash-generic).
    While the aes-aesni implementation prefers to use the FPU, it
    will fallback to the aes-asm implementation if unavailable.
    
    By using a synchronous version of gcm(aes), the decryption
    will complete before returning from crypto_aead_decrypt().
    Therefore, the macsec_decrypt_done() callback will be called
    before returning from macsec_decrypt(). Thus, the order of
    calls to macsec_post_decrypt() for the frames is preserved.
    
    While it's presumable that the pure AES-NI version of gcm(aes)
    is more performant, the hybrid solution is capable of gigabit
    speeds on modest hardware. Regardless, preserving the order
    of frames is paramount for many network protocols (e.g.,
    triggering TCP retries). Within the MACsec driver itself, the
    replay protection is tripped by the out-of-order frames, and
    can cause frames to be dropped.
    
    This bug has been present in this code since it was added in
    v4.6, however it may not have been noticed since not all CPUs
    have FPU offload available. Additionally, the bug manifests
    as occasional out-of-order packets that are easily
    misattributed to other network phenomena.
    
    When this code was added in v4.6, the crypto/gcm.c code did
    not restrict selection of the ghash function based on the
    ASYNC flag. For instance, x86 CPUs with PCLMULQDQ would
    select the ghash-clmulni driver instead of ghash-generic,
    which submits to the cryptd work queue if the FPU is busy.
    However, this bug was was corrected in v4.8 by commit
    b30bdfa86431afbafe15284a3ad5ac19b49b88e3, and was backported
    all the way back to the v3.14 stable branch, so this patch
    should be applicable back to the v4.6 stable branch.
    
    Signed-off-by: Scott Dial <scott@scottdial.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f72c9a9da12d72dec6ef946837b4e3d10335227
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 12:40:25 2020 -0700

    fq_codel: fix TCA_FQ_CODEL_DROP_BATCH_SIZE sanity checks
    
    [ Upstream commit 14695212d4cd8b0c997f6121b6df8520038ce076 ]
    
    My intent was to not let users set a zero drop_batch_size,
    it seems I once again messed with min()/max().
    
    Fixes: 9d18562a2278 ("fq_codel: add batch ability to fq_codel_drop()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21c3b07f6bc8659e4c91e0a1b2732c7bc3ed73f8
Author: Julia Lawall <Julia.Lawall@inria.fr>
Date:   Thu Apr 30 21:51:32 2020 +0200

    dp83640: reverse arguments to list_add_tail
    
    [ Upstream commit 865308373ed49c9fb05720d14cbf1315349b32a9 ]
    
    In this code, it appears that phyter_clocks is a list head, based on
    the previous list_for_each, and that clock->list is intended to be a
    list element, given that it has just been initialized in
    dp83640_clock_init.  Accordingly, switch the arguments to
    list_add_tail, which takes the list head as the second argument.
    
    Fixes: cb646e2b02b27 ("ptp: Added a clock driver for the National Semiconductor PHYTER.")
    Signed-off-by: Julia Lawall <Julia.Lawall@inria.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ceaceed21f75ae4248e717a334b2ec1425a0ac2f
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:03:47 2020 +1000

    USB: serial: qcserial: Add DW5816e support
    
    commit 78d6de3cfbd342918d31cf68d0d2eda401338aef upstream.
    
    Add support for Dell Wireless 5816e to drivers/usb/serial/qcserial.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
