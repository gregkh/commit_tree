commit 5821a5593fa9f28eb6fcc95c35d00454d9bb8624
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 14 07:59:28 2020 +0200

    Linux 5.6.13

commit b3c2ebf2530420af637dcb9e4db94fcfe3c74e7a
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Mar 19 17:10:16 2020 +0200

    fanotify: merge duplicate events on parent and child
    
    [ Upstream commit f367a62a7cad2447d835a9f14fc63997a9137246 ]
    
    With inotify, when a watch is set on a directory and on its child, an
    event on the child is reported twice, once with wd of the parent watch
    and once with wd of the child watch without the filename.
    
    With fanotify, when a watch is set on a directory and on its child, an
    event on the child is reported twice, but it has the exact same
    information - either an open file descriptor of the child or an encoded
    fid of the child.
    
    The reason that the two identical events are not merged is because the
    object id used for merging events in the queue is the child inode in one
    event and parent inode in the other.
    
    For events with path or dentry data, use the victim inode instead of the
    watched inode as the object id for event merging, so that the event
    reported on parent will be merged with the event reported on the child.
    
    Link: https://lore.kernel.org/r/20200319151022.31456-9-amir73il@gmail.com
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ca61ef0fd16a1873f205aa0c64aace0cab98701
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Mar 19 17:10:15 2020 +0200

    fsnotify: replace inode pointer with an object id
    
    [ Upstream commit dfc2d2594e4a79204a3967585245f00644b8f838 ]
    
    The event inode field is used only for comparison in queue merges and
    cannot be dereferenced after handle_event(), because it does not hold a
    refcount on the inode.
    
    Replace it with an abstract id to do the same thing.
    
    Link: https://lore.kernel.org/r/20200319151022.31456-8-amir73il@gmail.com
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2867b7fb74453620772efd34308f96413e27492
Author: Max Kellermann <mk@cm4all.com>
Date:   Thu May 7 14:56:15 2020 -0600

    io_uring: don't use 'fd' for openat/openat2/statx
    
    Based on commit 63ff822358b276137059520cf16e587e8073e80f upstream.
    
    If an operation's flag `needs_file` is set, the function
    io_req_set_file() calls io_file_get() to obtain a `struct file*`.
    
    This fails for `O_PATH` file descriptors, because io_file_get() calls
    fget(), which rejects `O_PATH` file descriptors.  To support `O_PATH`,
    fdget_raw() must be used (like path_init() in `fs/namei.c` does).
    This rejection causes io_req_set_file() to throw `-EBADF`.  This
    breaks the operations `openat`, `openat2` and `statx`, where `O_PATH`
    file descriptors are commonly used.
    
    This could be solved by adding support for `O_PATH` file descriptors
    with another `io_op_def` flag, but since those three operations don't
    need the `struct file*` but operate directly on the numeric file
    descriptors, the best solution here is to simply remove `needs_file`
    (and the accompanying flag `fd_non_reg`).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Max Kellermann <mk@cm4all.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6b41444275f6969408ceaad6790512526ccf1cf
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon May 4 14:47:56 2020 +0200

    bdi: add a ->dev_name field to struct backing_dev_info
    
    [ Upstream commit 6bd87eec23cbc9ed222bed0f5b5b02bf300e9a8d ]
    
    Cache a copy of the name for the life time of the backing_dev_info
    structure so that we can reference it even after unregistering.
    
    Fixes: 68f23b89067f ("memcg: fix a crash in wb_workfn when a device disappears")
    Reported-by: Yufen Yu <yuyufen@huawei.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2dc04099bedaca58031107897cad76592e1c5bd
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon May 4 14:47:54 2020 +0200

    bdi: move bdi_dev_name out of line
    
    [ Upstream commit eb7ae5e06bb6e6ac6bb86872d27c43ebab92f6b2 ]
    
    bdi_dev_name is not a fast path function, move it out of line.  This
    prepares for using it from modular callers without having to export
    an implementation detail like bdi_unknown_name.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 976d383cb017896d63be3d89b78fbf6390bb943c
Author: Yafang Shao <laoar.shao@gmail.com>
Date:   Thu May 7 18:35:43 2020 -0700

    mm, memcg: fix error return value of mem_cgroup_css_alloc()
    
    commit 11d6761218d19ca06ae5387f4e3692c4fa9e7493 upstream.
    
    When I run my memcg testcase which creates lots of memcgs, I found
    there're unexpected out of memory logs while there're still enough
    available free memory.  The error log is
    
      mkdir: cannot create directory 'foo.65533': Cannot allocate memory
    
    The reason is when we try to create more than MEM_CGROUP_ID_MAX memcgs,
    an -ENOMEM errno will be set by mem_cgroup_css_alloc(), but the right
    errno should be -ENOSPC "No space left on device", which is an
    appropriate errno for userspace's failed mkdir.
    
    As the errno really misled me, we should make it right.  After this
    patch, the error log will be
    
      mkdir: cannot create directory 'foo.65533': No space left on device
    
    [akpm@linux-foundation.org: s/EBUSY/ENOSPC/, per Michal]
    [akpm@linux-foundation.org: s/EBUSY/ENOSPC/, per Michal]
    Fixes: 73f576c04b94 ("mm: memcontrol: fix cgroup creation failure after many small jobs")
    Suggested-by: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@kernel.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Link: http://lkml.kernel.org/r/20200407063621.GA18914@dhcp22.suse.cz
    Link: http://lkml.kernel.org/r/1586192163-20099-1-git-send-email-laoar.shao@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d5f0187a0d472fe80daa270b300be403ea02413
Author: Ivan Delalande <colona@arista.com>
Date:   Thu May 7 18:35:53 2020 -0700

    scripts/decodecode: fix trapping instruction formatting
    
    commit e08df079b23e2e982df15aa340bfbaf50f297504 upstream.
    
    If the trapping instruction contains a ':', for a memory access through
    segment registers for example, the sed substitution will insert the '*'
    marker in the middle of the instruction instead of the line address:
    
            2b:   65 48 0f c7 0f          cmpxchg16b %gs:*(%rdi)          <-- trapping instruction
    
    I started to think I had forgotten some quirk of the assembly syntax
    before noticing that it was actually coming from the script.  Fix it to
    add the address marker at the right place for these instructions:
    
            28:   49 8b 06                mov    (%r14),%rax
            2b:*  65 48 0f c7 0f          cmpxchg16b %gs:(%rdi)           <-- trapping instruction
            30:   0f 94 c0                sete   %al
    
    Fixes: 18ff44b189e2 ("scripts/decodecode: make faulting insn ptr more robust")
    Signed-off-by: Ivan Delalande <colona@arista.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/20200419223653.GA31248@visor
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c130df79f77d19d94691b91dca366ace80f5c165
Author: Julia Lawall <Julia.Lawall@inria.fr>
Date:   Tue May 5 20:47:47 2020 +0200

    iommu/virtio: Reverse arguments to list_add
    
    commit fb3637a113349f53830f7d6ca45891b7192cd28f upstream.
    
    Elsewhere in the file, there is a list_for_each_entry with
    &vdev->resv_regions as the second argument, suggesting that
    &vdev->resv_regions is the list head.  So exchange the
    arguments on the list_add call to put the list head in the
    second argument.
    
    Fixes: 2a5a31487445 ("iommu/virtio: Add probe request")
    Signed-off-by: Julia Lawall <Julia.Lawall@inria.fr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Reviewed-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
    Link: https://lore.kernel.org/r/1588704467-13431-1-git-send-email-Julia.Lawall@inria.fr
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

commit af9e6058a354c6959e754e6f61727d7952d9504c
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:00 2020 -0500

    objtool: Fix stack offset tracking for indirect CFAs
    
    commit d8dd25a461e4eec7190cb9d66616aceacc5110ad upstream.
    
    When the current frame address (CFA) is stored on the stack (i.e.,
    cfa->base == CFI_SP_INDIRECT), objtool neglects to adjust the stack
    offset when there are subsequent pushes or pops.  This results in bad
    ORC data at the end of the ENTER_IRQ_STACK macro, when it puts the
    previous stack pointer on the stack and does a subsequent push.
    
    This fixes the following unwinder warning:
    
      WARNING: can't dereference registers at 00000000f0a6bdba for ip interrupt_entry+0x9f/0xa0
    
    Fixes: 627fce14809b ("objtool: Add ORC unwind table generation")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Reported-by: Dave Jones <dsj@fb.com>
    Reported-by: Steven Rostedt <rostedt@goodmis.org>
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Reported-by: Joe Mario <jmario@redhat.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/853d5d691b29e250333332f09b8e27410b2d9924.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78365618e3c80b73092fd7fbb0b14c6b0712e0f3
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 4 12:19:45 2020 -0400

    kvm: ioapic: Restrict lazy EOI update to edge-triggered interrupts
    
    commit 8be8f932e3db5fe4ed178b8892eeffeab530273a upstream.
    
    Commit f458d039db7e ("kvm: ioapic: Lazy update IOAPIC EOI") introduces
    the following infinite loop:
    
    BUG: stack guard page was hit at 000000008f595917 \
    (stack is 00000000bdefe5a4..00000000ae2b06f5)
    kernel stack overflow (double-fault): 0000 [#1] SMP NOPTI
    RIP: 0010:kvm_set_irq+0x51/0x160 [kvm]
    Call Trace:
     irqfd_resampler_ack+0x32/0x90 [kvm]
     kvm_notify_acked_irq+0x62/0xd0 [kvm]
     kvm_ioapic_update_eoi_one.isra.0+0x30/0x120 [kvm]
     ioapic_set_irq+0x20e/0x240 [kvm]
     kvm_ioapic_set_irq+0x5c/0x80 [kvm]
     kvm_set_irq+0xbb/0x160 [kvm]
     ? kvm_hv_set_sint+0x20/0x20 [kvm]
     irqfd_resampler_ack+0x32/0x90 [kvm]
     kvm_notify_acked_irq+0x62/0xd0 [kvm]
     kvm_ioapic_update_eoi_one.isra.0+0x30/0x120 [kvm]
     ioapic_set_irq+0x20e/0x240 [kvm]
     kvm_ioapic_set_irq+0x5c/0x80 [kvm]
     kvm_set_irq+0xbb/0x160 [kvm]
     ? kvm_hv_set_sint+0x20/0x20 [kvm]
    ....
    
    The re-entrancy happens because the irq state is the OR of
    the interrupt state and the resamplefd state.  That is, we don't
    want to show the state as 0 until we've had a chance to set the
    resamplefd.  But if the interrupt has _not_ gone low then
    ioapic_set_irq is invoked again, causing an infinite loop.
    
    This can only happen for a level-triggered interrupt, otherwise
    irqfd_inject would immediately set the KVM_USERSPACE_IRQ_SOURCE_ID high
    and then low.  Fortunately, in the case of level-triggered interrupts the VMEXIT already happens because
    TMR is set.  Thus, fix the bug by restricting the lazy invocation
    of the ack notifier to edge-triggered interrupts, the only ones that
    need it.
    
    Tested-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Reported-by: borisvk@bstnet.org
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Link: https://www.spinics.net/lists/kvm/msg213512.html
    Fixes: f458d039db7e ("kvm: ioapic: Lazy update IOAPIC EOI")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=207489
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 646e3be244c1237fb9eaf61e721363edc0bca5be
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 29 21:00:41 2020 +0200

    netfilter: nf_osf: avoid passing pointer to local var
    
    commit c165d57b552aaca607fa5daf3fb524a6efe3c5a3 upstream.
    
    gcc-10 points out that a code path exists where a pointer to a stack
    variable may be passed back to the caller:
    
    net/netfilter/nfnetlink_osf.c: In function 'nf_osf_hdr_ctx_init':
    cc1: warning: function may return address of local variable [-Wreturn-local-addr]
    net/netfilter/nfnetlink_osf.c:171:16: note: declared here
      171 |  struct tcphdr _tcph;
          |                ^~~~~
    
    I am not sure whether this can happen in practice, but moving the
    variable declaration into the callers avoids the problem.
    
    Fixes: 31a9c29210e2 ("netfilter: nf_osf: add struct nf_osf_hdr_ctx")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 381fc914ecab461f08c8cb369c2407ac3ae21641
Author: Guillaume Nault <gnault@redhat.com>
Date:   Tue Apr 21 02:42:19 2020 +0200

    netfilter: nat: never update the UDP checksum when it's 0
    
    commit ea64d8d6c675c0bb712689b13810301de9d8f77a upstream.
    
    If the UDP header of a local VXLAN endpoint is NAT-ed, and the VXLAN
    device has disabled UDP checksums and enabled Tx checksum offloading,
    then the skb passed to udp_manip_pkt() has hdr->check == 0 (outer
    checksum disabled) and skb->ip_summed == CHECKSUM_PARTIAL (inner packet
    checksum offloaded).
    
    Because of the ->ip_summed value, udp_manip_pkt() tries to update the
    outer checksum with the new address and port, leading to an invalid
    checksum sent on the wire, as the original null checksum obviously
    didn't take the old address and port into account.
    
    So, we can't take ->ip_summed into account in udp_manip_pkt(), as it
    might not refer to the checksum we're acting on. Instead, we can base
    the decision to update the UDP checksum entirely on the value of
    hdr->check, because it's null if and only if checksum is disabled:
    
      * A fully computed checksum can't be 0, since a 0 checksum is
        represented by the CSUM_MANGLED_0 value instead.
    
      * A partial checksum can't be 0, since the pseudo-header always adds
        at least one non-zero value (the UDP protocol type 0x11) and adding
        more values to the sum can't make it wrap to 0 as the carry is then
        added to the wrapped number.
    
      * A disabled checksum uses the special value 0.
    
    The problem seems to be there from day one, although it was probably
    not visible before UDP tunnels were implemented.
    
    Fixes: 5b1158e909ec ("[NETFILTER]: Add NAT support for nf_conntrack")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d91204c65195494cedadc89d507270a71f1380c2
Author: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
Date:   Thu May 7 18:35:56 2020 -0700

    arch/x86/kvm/svm/sev.c: change flag passed to GUP fast in sev_pin_memory()
    
    commit 996ed22c7a5251d76dcdfe5026ef8230e90066d9 upstream.
    
    When trying to lock read-only pages, sev_pin_memory() fails because
    FOLL_WRITE is used as the flag for get_user_pages_fast().
    
    Commit 73b0140bf0fe ("mm/gup: change GUP fast to use flags rather than a
    write 'bool'") updated the get_user_pages_fast() call sites to use
    flags, but incorrectly updated the call in sev_pin_memory().  As the
    original coding of this call was correct, revert the change made by that
    commit.
    
    Fixes: 73b0140bf0fe ("mm/gup: change GUP fast to use flags rather than a write 'bool'")
    Signed-off-by: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Sean Christopherson <sean.j.christopherson@intel.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: Wanpeng Li <wanpengli@tencent.com>
    Cc: Jim Mattson <jmattson@google.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: "H . Peter Anvin" <hpa@zytor.com>
    Cc: Mike Marshall <hubcap@omnibond.com>
    Cc: Brijesh Singh <brijesh.singh@amd.com>
    Link: http://lkml.kernel.org/r/20200423152419.87202-1-Janakarajan.Natarajan@amd.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61831aa9cf081f9b47486cb72c6e0208a9f2632b
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Tue Apr 7 01:13:09 2020 -0500

    KVM: x86: Fixes posted interrupt check for IRQs delivery modes
    
    commit 637543a8d61c6afe4e9be64bfb43c78701a83375 upstream.
    
    Current logic incorrectly uses the enum ioapic_irq_destination_types
    to check the posted interrupt destination types. However, the value was
    set using APIC_DM_XXX macros, which are left-shifted by 8 bits.
    
    Fixes by using the APIC_DM_FIXED and APIC_DM_LOWEST instead.
    
    Fixes: (fdcf75621375 'KVM: x86: Disable posted interrupts for non-standard IRQs delivery modes')
    Cc: Alexander Graf <graf@amazon.com>
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Message-Id: <1586239989-58305-1-git-send-email-suravee.suthikulpanit@amd.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Tested-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fd83bfd71a5f28b4ce0c813cb0bdc5a62af0774
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:06:14 2020 -0500

    x86/unwind/orc: Fix premature unwind stoppage due to IRET frames
    
    commit 81b67439d147677d844d492fcbd03712ea438f42 upstream.
    
    The following execution path is possible:
    
      fsnotify()
        [ realign the stack and store previous SP in R10 ]
        <IRQ>
          [ only IRET regs saved ]
          common_interrupt()
            interrupt_entry()
              <NMI>
                [ full pt_regs saved ]
                ...
                [ unwind stack ]
    
    When the unwinder goes through the NMI and the IRQ on the stack, and
    then sees fsnotify(), it doesn't have access to the value of R10,
    because it only has the five IRET registers.  So the unwind stops
    prematurely.
    
    However, because the interrupt_entry() code is careful not to clobber
    R10 before saving the full regs, the unwinder should be able to read R10
    from the previously saved full pt_regs associated with the NMI.
    
    Handle this case properly.  When encountering an IRET regs frame
    immediately after a full pt_regs frame, use the pt_regs as a backup
    which can be used to get the C register values.
    
    Also, note that a call frame resets the 'prev_regs' value, because a
    function is free to clobber the registers.  For this fix to work, the
    IRET and full regs frames must be adjacent, with no FUNC frames in
    between.  So replace the FUNC hint in interrupt_entry() with an
    IRET_REGS hint.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/97a408167cc09f1cfa0de31a7b70dd88868d743f.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58ed593e554f959ec3c3c8811578e41b748a8e6e
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:06:13 2020 -0500

    x86/unwind/orc: Fix error path for bad ORC entry type
    
    commit a0f81bf26888048100bf017fadf438a5bdffa8d8 upstream.
    
    If the ORC entry type is unknown, nothing else can be done other than
    reporting an error.  Exit the function instead of breaking out of the
    switch statement.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/a7fa668ca6eabbe81ab18b2424f15adbbfdc810a.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec90d36948aff1f89b59b256f53c32b940029ace
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:08 2020 -0500

    x86/unwind/orc: Prevent unwinding before ORC initialization
    
    commit 98d0c8ebf77e0ba7c54a9ae05ea588f0e9e3f46e upstream.
    
    If the unwinder is called before the ORC data has been initialized,
    orc_find() returns NULL, and it tries to fall back to using frame
    pointers.  This can cause some unexpected warnings during boot.
    
    Move the 'orc_init' check from orc_find() to __unwind_init(), so that it
    doesn't even try to unwind from an uninitialized state.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/069d1499ad606d85532eb32ce39b2441679667d5.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3ed6670d04a10d9c22c4dd851db1798ff0651e2
Author: Miroslav Benes <mbenes@suse.cz>
Date:   Sat Apr 25 05:03:07 2020 -0500

    x86/unwind/orc: Don't skip the first frame for inactive tasks
    
    commit f1d9a2abff66aa8156fbc1493abed468db63ea48 upstream.
    
    When unwinding an inactive task, the ORC unwinder skips the first frame
    by default.  If both the 'regs' and 'first_frame' parameters of
    unwind_start() are NULL, 'state->sp' and 'first_frame' are later
    initialized to the same value for an inactive task.  Given there is a
    "less than or equal to" comparison used at the end of __unwind_start()
    for skipping stack frames, the first frame is skipped.
    
    Drop the equal part of the comparison and make the behavior equivalent
    to the frame pointer unwinder.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/7f08db872ab59e807016910acdbe82f744de7065.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 531c4b24daa64328e0edda3394dd306d7eab5d79
Author: Jann Horn <jannh@google.com>
Date:   Sat Apr 25 05:03:04 2020 -0500

    x86/entry/64: Fix unwind hints in rewind_stack_do_exit()
    
    commit f977df7b7ca45a4ac4b66d30a8931d0434c394b1 upstream.
    
    The LEAQ instruction in rewind_stack_do_exit() moves the stack pointer
    directly below the pt_regs at the top of the task stack before calling
    do_exit(). Tell the unwinder to expect pt_regs.
    
    Fixes: 8c1f75587a18 ("x86/entry/64: Add unwind hint annotations")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/68c33e17ae5963854916a46f522624f8e1d264f2.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f2db3006858914d2691a157bdf90bb62a2c902f
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:03 2020 -0500

    x86/entry/64: Fix unwind hints in __switch_to_asm()
    
    commit 96c64806b4bf35f5edb465cafa6cec490e424a30 upstream.
    
    UNWIND_HINT_FUNC has some limitations: specifically, it doesn't reset
    all the registers to undefined.  This causes objtool to get confused
    about the RBP push in __switch_to_asm(), resulting in bad ORC data.
    
    While __switch_to_asm() does do some stack magic, it's otherwise a
    normal callable-from-C function, so just annotate it as a function,
    which makes objtool happy and allows it to produces the correct hints
    automatically.
    
    Fixes: 8c1f75587a18 ("x86/entry/64: Add unwind hint annotations")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/03d0411920d10f7418f2e909210d8e9a3b2ab081.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b45ffb761a9dbcbfcd6784dc8b636b484310cfdd
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:02 2020 -0500

    x86/entry/64: Fix unwind hints in kernel exit path
    
    commit 1fb143634a38095b641a3a21220774799772dc4c upstream.
    
    In swapgs_restore_regs_and_return_to_usermode, after the stack is
    switched to the trampoline stack, the existing UNWIND_HINT_REGS hint is
    no longer valid, which can result in the following ORC unwinder warning:
    
      WARNING: can't dereference registers at 000000003aeb0cdd for ip swapgs_restore_regs_and_return_to_usermode+0x93/0xa0
    
    For full correctness, we could try to add complicated unwind hints so
    the unwinder could continue to find the registers, but when when it's
    this close to kernel exit, unwind hints aren't really needed anymore and
    it's fine to just use an empty hint which tells the unwinder to stop.
    
    For consistency, also move the UNWIND_HINT_EMPTY in
    entry_SYSCALL_64_after_hwframe to a similar location.
    
    Fixes: 3e3b9293d392 ("x86/entry/64: Return to userspace from the trampoline stack")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Reported-by: Dave Jones <dsj@fb.com>
    Reported-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reported-by: Joe Mario <jmario@redhat.com>
    Reported-by: Jann Horn <jannh@google.com>
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/60ea8f562987ed2d9ace2977502fe481c0d7c9a0.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c5f624e816f5c823e6b0127ae5df5cff52c318b
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:01 2020 -0500

    x86/entry/64: Fix unwind hints in register clearing code
    
    commit 06a9750edcffa808494d56da939085c35904e618 upstream.
    
    The PUSH_AND_CLEAR_REGS macro zeroes each register immediately after
    pushing it.  If an NMI or exception hits after a register is cleared,
    but before the UNWIND_HINT_REGS annotation, the ORC unwinder will
    wrongly think the previous value of the register was zero.  This can
    confuse the unwinding process and cause it to exit early.
    
    Because ORC is simpler than DWARF, there are a limited number of unwind
    annotation states, so it's not possible to add an individual unwind hint
    after each push/clear combination.  Instead, the register clearing
    instructions need to be consolidated and moved to after the
    UNWIND_HINT_REGS annotation.
    
    Fixes: 3f01daecd545 ("x86/entry/64: Introduce the PUSH_AND_CLEAN_REGS macro")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/68fd3d0bc92ae2d62ff7879d15d3684217d51f08.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d023b36d24d0812c9b2954c5e4c8d2e36a3d6054
Author: Rick Edgecombe <rick.p.edgecombe@intel.com>
Date:   Wed Apr 22 20:13:55 2020 -0700

    x86/mm/cpa: Flush direct map alias during cpa
    
    commit ab5130186d7476dcee0d4e787d19a521ca552ce9 upstream.
    
    As an optimization, cpa_flush() was changed to optionally only flush
    the range in @cpa if it was small enough.  However, this range does
    not include any direct map aliases changed in cpa_process_alias(). So
    small set_memory_() calls that touch that alias don't get the direct
    map changes flushed. This situation can happen when the virtual
    address taking variants are passed an address in vmalloc or modules
    space.
    
    In these cases, force a full TLB flush.
    
    Note this issue does not extend to cases where the set_memory_() calls are
    passed a direct map address, or page array, etc, as the primary target. In
    those cases the direct map would be flushed.
    
    Fixes: 935f5839827e ("x86/mm/cpa: Optimize cpa_flush_array() TLB invalidation")
    Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200424105343.GA20730@hirez.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0f3ed270a533aff57588504ee02bd2516e965ef
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Mon Apr 20 13:37:20 2020 +0800

    batman-adv: Fix refcnt leak in batadv_v_ogm_process
    
    commit 6f91a3f7af4186099dd10fa530dd7e0d9c29747d upstream.
    
    batadv_v_ogm_process() invokes batadv_hardif_neigh_get(), which returns
    a reference of the neighbor object to "hardif_neigh" with increased
    refcount.
    
    When batadv_v_ogm_process() returns, "hardif_neigh" becomes invalid, so
    the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling paths of
    batadv_v_ogm_process(). When batadv_v_ogm_orig_get() fails to get the
    orig node and returns NULL, the refcnt increased by
    batadv_hardif_neigh_get() is not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_v_ogm_orig_get()
    fails to get the orig node.
    
    Fixes: 9323158ef9f4 ("batman-adv: OGMv2 - implement originators logic")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2dc1689b56c9f0874da7af6b1f4f9f31f3d0a4d9
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:35:21 2020 +0800

    batman-adv: Fix refcnt leak in batadv_store_throughput_override
    
    commit 6107c5da0fca8b50b4d3215e94d619d38cc4a18c upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_store_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in one error path of
    batadv_store_throughput_override(). When batadv_parse_throughput()
    returns NULL, the refcnt increased by batadv_hardif_get_by_netdev() is
    not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_parse_throughput()
    returns NULL.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ab2882b2e363611644d71de30e3a7549b8e2023
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:31:50 2020 +0800

    batman-adv: Fix refcnt leak in batadv_show_throughput_override
    
    commit f872de8185acf1b48b954ba5bd8f9bc0a0d14016 upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_show_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in the normal path of
    batadv_show_throughput_override(), which forgets to decrease the refcnt
    increased by batadv_hardif_get_by_netdev() before the function returns,
    causing a refcnt leak.
    
    Fix this issue by calling batadv_hardif_put() before the
    batadv_show_throughput_override() returns in the normal path.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92718c22ed3db00a08b5f19625da7d6bf3ab6978
Author: George Spelvin <lkml@sdf.org>
Date:   Sun Mar 8 09:44:59 2020 -0400

    batman-adv: fix batadv_nc_random_weight_tq
    
    commit fd0c42c4dea54335967c5a86f15fc064235a2797 upstream.
    
    and change to pseudorandom numbers, as this is a traffic dithering
    operation that doesn't need crypto-grade.
    
    The previous code operated in 4 steps:
    
    1. Generate a random byte 0 <= rand_tq <= 255
    2. Multiply it by BATADV_TQ_MAX_VALUE - tq
    3. Divide by 255 (= BATADV_TQ_MAX_VALUE)
    4. Return BATADV_TQ_MAX_VALUE - rand_tq
    
    This would apperar to scale (BATADV_TQ_MAX_VALUE - tq) by a random
    value between 0/255 and 255/255.
    
    But!  The intermediate value between steps 3 and 4 is stored in a u8
    variable.  So it's truncated, and most of the time, is less than 255, after
    which the division produces 0.  Specifically, if tq is odd, the product is
    always even, and can never be 255.  If tq is even, there's exactly one
    random byte value that will produce a product byte of 255.
    
    Thus, the return value is 255 (511/512 of the time) or 254 (1/512
    of the time).
    
    If we assume that the truncation is a bug, and the code is meant to scale
    the input, a simpler way of looking at it is that it's returning a random
    value between tq and BATADV_TQ_MAX_VALUE, inclusive.
    
    Well, we have an optimized function for doing just that.
    
    Fixes: 3c12de9a5c75 ("batman-adv: network coding - code and transmit packets if possible")
    Signed-off-by: George Spelvin <lkml@sdf.org>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c44725e4f1e77a59f00d6941c3dbc8d3a8c6dd4
Author: Tejun Heo <tj@kernel.org>
Date:   Mon May 4 19:27:54 2020 -0400

    iocost: protect iocg->abs_vdebt with iocg->waitq.lock
    
    commit 0b80f9866e6bbfb905140ed8787ff2af03652c0c upstream.
    
    abs_vdebt is an atomic_64 which tracks how much over budget a given cgroup
    is and controls the activation of use_delay mechanism. Once a cgroup goes
    over budget from forced IOs, it has to pay it back with its future budget.
    The progress guarantee on debt paying comes from the iocg being active -
    active iocgs are processed by the periodic timer, which ensures that as time
    passes the debts dissipate and the iocg returns to normal operation.
    
    However, both iocg activation and vdebt handling are asynchronous and a
    sequence like the following may happen.
    
    1. The iocg is in the process of being deactivated by the periodic timer.
    
    2. A bio enters ioc_rqos_throttle(), calls iocg_activate() which returns
       without anything because it still sees that the iocg is already active.
    
    3. The iocg is deactivated.
    
    4. The bio from #2 is over budget but needs to be forced. It increases
       abs_vdebt and goes over the threshold and enables use_delay.
    
    5. IO control is enabled for the iocg's subtree and now IOs are attributed
       to the descendant cgroups and the iocg itself no longer issues IOs.
    
    This leaves the iocg with stuck abs_vdebt - it has debt but inactive and no
    further IOs which can activate it. This can end up unduly punishing all the
    descendants cgroups.
    
    The usual throttling path has the same issue - the iocg must be active while
    throttled to ensure that future event will wake it up - and solves the
    problem by synchronizing the throttling path with a spinlock. abs_vdebt
    handling is another form of overage handling and shares a lot of
    characteristics including the fact that it isn't in the hottest path.
    
    This patch fixes the above and other possible races by strictly
    synchronizing abs_vdebt and use_delay handling with iocg->waitq.lock.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Vlad Dmitriev <vvd@fb.com>
    Cc: stable@vger.kernel.org # v5.4+
    Fixes: e1518f63f246 ("blk-iocost: Don't let merges push vtime into the future")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d80728a0a7eb613c61cf5da2d5e1c537b0fa6bd
Author: Vincent Chen <vincent.chen@sifive.com>
Date:   Mon Apr 27 14:59:24 2020 +0800

    riscv: set max_pfn to the PFN of the last page
    
    commit c749bb2d554825e007cbc43b791f54e124dadfce upstream.
    
    The current max_pfn equals to zero. In this case, I found it caused users
    cannot get some page information through /proc such as kpagecount in v5.6
    kernel because of new sanity checks. The following message is displayed by
    stress-ng test suite with the command "stress-ng --verbose --physpage 1 -t
    1" on HiFive unleashed board.
    
     # stress-ng --verbose --physpage 1 -t 1
     stress-ng: debug: [109] 4 processors online, 4 processors configured
     stress-ng: info: [109] dispatching hogs: 1 physpage
     stress-ng: debug: [109] cache allocate: reducing cache level from L3 (too high) to L0
     stress-ng: debug: [109] get_cpu_cache: invalid cache_level: 0
     stress-ng: info: [109] cache allocate: using built-in defaults as no suitable cache found
     stress-ng: debug: [109] cache allocate: default cache size: 2048K
     stress-ng: debug: [109] starting stressors
     stress-ng: debug: [109] 1 stressor spawned
     stress-ng: debug: [110] stress-ng-physpage: started [110] (instance 0)
     stress-ng: error: [110] stress-ng-physpage: cannot read page count for address 0x3fd34de000 in /proc/kpagecount, errno=0 (Success)
     stress-ng: error: [110] stress-ng-physpage: cannot read page count for address 0x3fd32db078 in /proc/kpagecount, errno=0 (Success)
     ...
     stress-ng: error: [110] stress-ng-physpage: cannot read page count for address 0x3fd32db078 in /proc/kpagecount, errno=0 (Success)
     stress-ng: debug: [110] stress-ng-physpage: exited [110] (instance 0)
     stress-ng: debug: [109] process [110] terminated
     stress-ng: info: [109] successful run completed in 1.00s
     #
    
    After applying this patch, the kernel can pass the test.
    
     # stress-ng --verbose --physpage 1 -t 1
     stress-ng: debug: [104] 4 processors online, 4 processors configured stress-ng: info: [104] dispatching hogs: 1 physpage
     stress-ng: info: [104] cache allocate: using defaults, can't determine cache details from sysfs
     stress-ng: debug: [104] cache allocate: default cache size: 2048K
     stress-ng: debug: [104] starting stressors
     stress-ng: debug: [104] 1 stressor spawned
     stress-ng: debug: [105] stress-ng-physpage: started [105] (instance 0) stress-ng: debug: [105] stress-ng-physpage: exited [105] (instance 0) stress-ng: debug: [104] process [105] terminated
     stress-ng: info: [104] successful run completed in 1.01s
     #
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Vincent Chen <vincent.chen@sifive.com>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Reviewed-by: Yash Shah <yash.shah@sifive.com>
    Tested-by: Yash Shah <yash.shah@sifive.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b75146a055f9716847e67fc80ca55efd5682f8b
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Thu Apr 16 16:28:59 2020 +0000

    coredump: fix crash when umh is disabled
    
    commit 3740d93e37902b31159a82da2d5c8812ed825404 upstream.
    
    Commit 64e90a8acb859 ("Introduce STATIC_USERMODEHELPER to mediate
    call_usermodehelper()") added the optiont to disable all
    call_usermodehelper() calls by setting STATIC_USERMODEHELPER_PATH to
    an empty string. When this is done, and crashdump is triggered, it
    will crash on null pointer dereference, since we make assumptions
    over what call_usermodehelper_exec() did.
    
    This has been reported by Sergey when one triggers a a coredump
    with the following configuration:
    
    ```
    CONFIG_STATIC_USERMODEHELPER=y
    CONFIG_STATIC_USERMODEHELPER_PATH=""
    kernel.core_pattern = |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e
    ```
    
    The way disabling the umh was designed was that call_usermodehelper_exec()
    would just return early, without an error. But coredump assumes
    certain variables are set up for us when this happens, and calls
    ile_start_write(cprm.file) with a NULL file.
    
    [    2.819676] BUG: kernel NULL pointer dereference, address: 0000000000000020
    [    2.819859] #PF: supervisor read access in kernel mode
    [    2.820035] #PF: error_code(0x0000) - not-present page
    [    2.820188] PGD 0 P4D 0
    [    2.820305] Oops: 0000 [#1] SMP PTI
    [    2.820436] CPU: 2 PID: 89 Comm: a Not tainted 5.7.0-rc1+ #7
    [    2.820680] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS ?-20190711_202441-buildvm-armv7-10.arm.fedoraproject.org-2.fc31 04/01/2014
    [    2.821150] RIP: 0010:do_coredump+0xd80/0x1060
    [    2.821385] Code: e8 95 11 ed ff 48 c7 c6 cc a7 b4 81 48 8d bd 28 ff
    ff ff 89 c2 e8 70 f1 ff ff 41 89 c2 85 c0 0f 84 72 f7 ff ff e9 b4 fe ff
    ff <48> 8b 57 20 0f b7 02 66 25 00 f0 66 3d 00 8
    0 0f 84 9c 01 00 00 44
    [    2.822014] RSP: 0000:ffffc9000029bcb8 EFLAGS: 00010246
    [    2.822339] RAX: 0000000000000000 RBX: ffff88803f860000 RCX: 000000000000000a
    [    2.822746] RDX: 0000000000000009 RSI: 0000000000000282 RDI: 0000000000000000
    [    2.823141] RBP: ffffc9000029bde8 R08: 0000000000000000 R09: ffffc9000029bc00
    [    2.823508] R10: 0000000000000001 R11: ffff88803dec90be R12: ffffffff81c39da0
    [    2.823902] R13: ffff88803de84400 R14: 0000000000000000 R15: 0000000000000000
    [    2.824285] FS:  00007fee08183540(0000) GS:ffff88803e480000(0000) knlGS:0000000000000000
    [    2.824767] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    2.825111] CR2: 0000000000000020 CR3: 000000003f856005 CR4: 0000000000060ea0
    [    2.825479] Call Trace:
    [    2.825790]  get_signal+0x11e/0x720
    [    2.826087]  do_signal+0x1d/0x670
    [    2.826361]  ? force_sig_info_to_task+0xc1/0xf0
    [    2.826691]  ? force_sig_fault+0x3c/0x40
    [    2.826996]  ? do_trap+0xc9/0x100
    [    2.827179]  exit_to_usermode_loop+0x49/0x90
    [    2.827359]  prepare_exit_to_usermode+0x77/0xb0
    [    2.827559]  ? invalid_op+0xa/0x30
    [    2.827747]  ret_from_intr+0x20/0x20
    [    2.827921] RIP: 0033:0x55e2c76d2129
    [    2.828107] Code: 2d ff ff ff e8 68 ff ff ff 5d c6 05 18 2f 00 00 01
    c3 0f 1f 80 00 00 00 00 c3 0f 1f 80 00 00 00 00 e9 7b ff ff ff 55 48 89
    e5 <0f> 0b b8 00 00 00 00 5d c3 66 2e 0f 1f 84 0
    0 00 00 00 00 0f 1f 40
    [    2.828603] RSP: 002b:00007fffeba5e080 EFLAGS: 00010246
    [    2.828801] RAX: 000055e2c76d2125 RBX: 0000000000000000 RCX: 00007fee0817c718
    [    2.829034] RDX: 00007fffeba5e188 RSI: 00007fffeba5e178 RDI: 0000000000000001
    [    2.829257] RBP: 00007fffeba5e080 R08: 0000000000000000 R09: 00007fee08193c00
    [    2.829482] R10: 0000000000000009 R11: 0000000000000000 R12: 000055e2c76d2040
    [    2.829727] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    [    2.829964] CR2: 0000000000000020
    [    2.830149] ---[ end trace ceed83d8c68a1bf1 ]---
    ```
    
    Cc: <stable@vger.kernel.org> # v4.11+
    Fixes: 64e90a8acb85 ("Introduce STATIC_USERMODEHELPER to mediate call_usermodehelper()")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=199795
    Reported-by: Tony Vroon <chainsaw@gentoo.org>
    Reported-by: Sergey Kvachonok <ravenexp@gmail.com>
    Tested-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/20200416162859.26518-1-mcgrof@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a81f2a4bf7961429cb35bc001558018a29c1e755
Author: Oscar Carter <oscar.carter@gmx.com>
Date:   Fri May 1 17:51:18 2020 +0200

    staging: gasket: Check the return value of gasket_get_bar_index()
    
    commit 769acc3656d93aaacada814939743361d284fd87 upstream.
    
    Check the return value of gasket_get_bar_index function as it can return
    a negative one (-EINVAL). If this happens, a negative index is used in
    the "gasket_dev->bar_data" array.
    
    Addresses-Coverity-ID: 1438542 ("Negative array index read")
    Fixes: 9a69f5087ccc2 ("drivers/staging: Gasket driver framework + Apex driver")
    Signed-off-by: Oscar Carter <oscar.carter@gmx.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Richard Yeh <rcy@google.com>
    Link: https://lore.kernel.org/r/20200501155118.13380-1-oscar.carter@gmx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f71f5a764f4c3490b9d15de62a761dd0d5fc7ca6
Author: Luis Henriques <lhenriques@suse.com>
Date:   Tue May 5 13:59:02 2020 +0100

    ceph: demote quotarealm lookup warning to a debug message
    
    commit 12ae44a40a1be891bdc6463f8c7072b4ede746ef upstream.
    
    A misconfigured cephx can easily result in having the kernel client
    flooding the logs with:
    
      ceph: Can't lookup inode 1 (err: -13)
    
    Change this message to debug level.
    
    Cc: stable@vger.kernel.org
    URL: https://tracker.ceph.com/issues/44546
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdd3516c2be4bdf8ec309b010e211991ed4947c7
Author: Jeff Layton <jlayton@kernel.org>
Date:   Tue Apr 28 08:10:22 2020 -0400

    ceph: fix endianness bug when handling MDS session feature bits
    
    commit 0fa8263367db9287aa0632f96c1a5f93cc478150 upstream.
    
    Eduard reported a problem mounting cephfs on s390 arch. The feature
    mask sent by the MDS is little-endian, so we need to convert it
    before storing and testing against it.
    
    Cc: stable@vger.kernel.org
    Reported-and-Tested-by: Eduard Shishkin <edward6@linux.ibm.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d588cbdeba1edceda1901b1f8593d749a6c46e7
Author: Henry Willard <henry.willard@oracle.com>
Date:   Thu May 7 18:36:27 2020 -0700

    mm: limit boost_watermark on small zones
    
    commit 14f69140ff9c92a0928547ceefb153a842e8492c upstream.
    
    Commit 1c30844d2dfe ("mm: reclaim small amounts of memory when an
    external fragmentation event occurs") adds a boost_watermark() function
    which increases the min watermark in a zone by at least
    pageblock_nr_pages or the number of pages in a page block.
    
    On Arm64, with 64K pages and 512M huge pages, this is 8192 pages or
    512M.  It does this regardless of the number of managed pages managed in
    the zone or the likelihood of success.
    
    This can put the zone immediately under water in terms of allocating
    pages from the zone, and can cause a small machine to fail immediately
    due to OoM.  Unlike set_recommended_min_free_kbytes(), which
    substantially increases min_free_kbytes and is tied to THP,
    boost_watermark() can be called even if THP is not active.
    
    The problem is most likely to appear on architectures such as Arm64
    where pageblock_nr_pages is very large.
    
    It is desirable to run the kdump capture kernel in as small a space as
    possible to avoid wasting memory.  In some architectures, such as Arm64,
    there are restrictions on where the capture kernel can run, and
    therefore, the space available.  A capture kernel running in 768M can
    fail due to OoM immediately after boost_watermark() sets the min in zone
    DMA32, where most of the memory is, to 512M.  It fails even though there
    is over 500M of free memory.  With boost_watermark() suppressed, the
    capture kernel can run successfully in 448M.
    
    This patch limits boost_watermark() to boosting a zone's min watermark
    only when there are enough pages that the boost will produce positive
    results.  In this case that is estimated to be four times as many pages
    as pageblock_nr_pages.
    
    Mel said:
    
    : There is no harm in marking it stable.  Clearly it does not happen very
    : often but it's not impossible.  32-bit x86 is a lot less common now
    : which would previously have been vulnerable to triggering this easily.
    : ppc64 has a larger base page size but typically only has one zone.
    : arm64 is likely the most vulnerable, particularly when CMA is
    : configured with a small movable zone.
    
    Fixes: 1c30844d2dfe ("mm: reclaim small amounts of memory when an external fragmentation event occurs")
    Signed-off-by: Henry Willard <henry.willard@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/1588294148-6586-1-git-send-email-henry.willard@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17a68145e058a80250515159bdf8d3a3a0adca65
Author: David Hildenbrand <david@redhat.com>
Date:   Thu May 7 18:35:46 2020 -0700

    mm/page_alloc: fix watchdog soft lockups during set_zone_contiguous()
    
    commit e84fe99b68ce353c37ceeecc95dce9696c976556 upstream.
    
    Without CONFIG_PREEMPT, it can happen that we get soft lockups detected,
    e.g., while booting up.
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [swapper/0:1]
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0-next-20200331+ #4
      Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
      RIP: __pageblock_pfn_to_page+0x134/0x1c0
      Call Trace:
       set_zone_contiguous+0x56/0x70
       page_alloc_init_late+0x166/0x176
       kernel_init_freeable+0xfa/0x255
       kernel_init+0xa/0x106
       ret_from_fork+0x35/0x40
    
    The issue becomes visible when having a lot of memory (e.g., 4TB)
    assigned to a single NUMA node - a system that can easily be created
    using QEMU.  Inside VMs on a hypervisor with quite some memory
    overcommit, this is fairly easy to trigger.
    
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Reviewed-by: Baoquan He <bhe@redhat.com>
    Reviewed-by: Shile Zhang <shile.zhang@linux.alibaba.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Shile Zhang <shile.zhang@linux.alibaba.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200416073417.5003-1-david@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64bf394bba26e8201079f5119c93d115d4a75f44
Author: Khazhismel Kumykov <khazhy@google.com>
Date:   Thu May 7 18:35:59 2020 -0700

    eventpoll: fix missing wakeup for ovflist in ep_poll_callback
    
    commit 0c54a6a44bf3d41e76ce3f583a6ece267618df2e upstream.
    
    In the event that we add to ovflist, before commit 339ddb53d373
    ("fs/epoll: remove unnecessary wakeups of nested epoll") we would be
    woken up by ep_scan_ready_list, and did no wakeup in ep_poll_callback.
    
    With that wakeup removed, if we add to ovflist here, we may never wake
    up.  Rather than adding back the ep_scan_ready_list wakeup - which was
    resulting in unnecessary wakeups, trigger a wake-up in ep_poll_callback.
    
    We noticed that one of our workloads was missing wakeups starting with
    339ddb53d373 and upon manual inspection, this wakeup seemed missing to me.
    With this patch added, we no longer see missing wakeups.  I haven't yet
    tried to make a small reproducer, but the existing kselftests in
    filesystem/epoll passed for me with this patch.
    
    [khazhy@google.com: use if/elif instead of goto + cleanup suggested by Roman]
      Link: http://lkml.kernel.org/r/20200424190039.192373-1-khazhy@google.com
    Fixes: 339ddb53d373 ("fs/epoll: remove unnecessary wakeups of nested epoll")
    Signed-off-by: Khazhismel Kumykov <khazhy@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Roman Penyaev <rpenyaev@suse.de>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Roman Penyaev <rpenyaev@suse.de>
    Cc: Heiher <r@hev.cc>
    Cc: Jason Baron <jbaron@akamai.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200424025057.118641-1-khazhy@google.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f1236c421cf5f6ab942ea17788fc4b65dadd056
Author: Roman Penyaev <rpenyaev@suse.de>
Date:   Thu May 7 18:36:16 2020 -0700

    epoll: atomically remove wait entry on wake up
    
    commit 412895f03cbf9633298111cb4dfde13b7720e2c5 upstream.
    
    This patch does two things:
    
     - fixes a lost wakeup introduced by commit 339ddb53d373 ("fs/epoll:
       remove unnecessary wakeups of nested epoll")
    
     - improves performance for events delivery.
    
    The description of the problem is the following: if N (>1) threads are
    waiting on ep->wq for new events and M (>1) events come, it is quite
    likely that >1 wakeups hit the same wait queue entry, because there is
    quite a big window between __add_wait_queue_exclusive() and the
    following __remove_wait_queue() calls in ep_poll() function.
    
    This can lead to lost wakeups, because thread, which was woken up, can
    handle not all the events in ->rdllist.  (in better words the problem is
    described here: https://lkml.org/lkml/2019/10/7/905)
    
    The idea of the current patch is to use init_wait() instead of
    init_waitqueue_entry().
    
    Internally init_wait() sets autoremove_wake_function as a callback,
    which removes the wait entry atomically (under the wq locks) from the
    list, thus the next coming wakeup hits the next wait entry in the wait
    queue, thus preventing lost wakeups.
    
    Problem is very well reproduced by the epoll60 test case [1].
    
    Wait entry removal on wakeup has also performance benefits, because
    there is no need to take a ep->lock and remove wait entry from the queue
    after the successful wakeup.  Here is the timing output of the epoll60
    test case:
    
      With explicit wakeup from ep_scan_ready_list() (the state of the
      code prior 339ddb53d373):
    
        real    0m6.970s
        user    0m49.786s
        sys     0m0.113s
    
     After this patch:
    
       real    0m5.220s
       user    0m36.879s
       sys     0m0.019s
    
    The other testcase is the stress-epoll [2], where one thread consumes
    all the events and other threads produce many events:
    
      With explicit wakeup from ep_scan_ready_list() (the state of the
      code prior 339ddb53d373):
    
        threads  events/ms  run-time ms
              8       5427         1474
             16       6163         2596
             32       6824         4689
             64       7060         9064
            128       6991        18309
    
     After this patch:
    
        threads  events/ms  run-time ms
              8       5598         1429
             16       7073         2262
             32       7502         4265
             64       7640         8376
            128       7634        16767
    
     (number of "events/ms" represents event bandwidth, thus higher is
      better; number of "run-time ms" represents overall time spent
      doing the benchmark, thus lower is better)
    
    [1] tools/testing/selftests/filesystems/epoll/epoll_wakeup_test.c
    [2] https://github.com/rouming/test-tools/blob/master/stress-epoll.c
    
    Signed-off-by: Roman Penyaev <rpenyaev@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Jason Baron <jbaron@akamai.com>
    Cc: Khazhismel Kumykov <khazhy@google.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Heiher <r@hev.cc>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200430130326.1368509-2-rpenyaev@suse.de
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09cbc41468267a18d813e856cbfc8594d6b6ac1d
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Thu May 7 18:35:39 2020 -0700

    ipc/mqueue.c: change __do_notify() to bypass check_kill_permission()
    
    commit b5f2006144c6ae941726037120fa1001ddede784 upstream.
    
    Commit cc731525f26a ("signal: Remove kernel interal si_code magic")
    changed the value of SI_FROMUSER(SI_MESGQ), this means that mq_notify() no
    longer works if the sender doesn't have rights to send a signal.
    
    Change __do_notify() to use do_send_sig_info() instead of kill_pid_info()
    to avoid check_kill_permission().
    
    This needs the additional notify.sigev_signo != 0 check, shouldn't we
    change do_mq_notify() to deny sigev_signo == 0 ?
    
    Test-case:
    
            #include <signal.h>
            #include <mqueue.h>
            #include <unistd.h>
            #include <sys/wait.h>
            #include <assert.h>
    
            static int notified;
    
            static void sigh(int sig)
            {
                    notified = 1;
            }
    
            int main(void)
            {
                    signal(SIGIO, sigh);
    
                    int fd = mq_open("/mq", O_RDWR|O_CREAT, 0666, NULL);
                    assert(fd >= 0);
    
                    struct sigevent se = {
                            .sigev_notify   = SIGEV_SIGNAL,
                            .sigev_signo    = SIGIO,
                    };
                    assert(mq_notify(fd, &se) == 0);
    
                    if (!fork()) {
                            assert(setuid(1) == 0);
                            mq_send(fd, "",1,0);
                            return 0;
                    }
    
                    wait(NULL);
                    mq_unlink("/mq");
                    assert(notified);
                    return 0;
            }
    
    [manfred@colorfullife.com: 1) Add self_exec_id evaluation so that the implementation matches do_notify_parent 2) use PIDTYPE_TGID everywhere]
    Fixes: cc731525f26a ("signal: Remove kernel interal si_code magic")
    Reported-by: Yoji <yoji.fujihar.min@gmail.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Markus Elfring <elfring@users.sourceforge.net>
    Cc: <1vier1@web.de>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/e2a782e4-eab9-4f5c-c749-c07a8f7a4e66@colorfullife.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f0d234dad15425d8e36d5f3e0af7f3f54f651a0
Author: Daniel Kolesa <daniel@octaforge.org>
Date:   Wed Apr 29 17:02:36 2020 +0200

    drm/amd/display: work around fp code being emitted outside of DC_FP_START/END
    
    commit 59dfb0c64d3853d20dc84f4561f28d4f5a2ddc7d upstream.
    
    The dcn20_validate_bandwidth function would have code touching the
    incorrect registers emitted outside of the boundaries of the
    DC_FP_START/END macros, at least on ppc64le. Work around the
    problem by wrapping the whole function instead.
    
    Signed-off-by: Daniel Kolesa <daniel@octaforge.org>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.6.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 772f7d23042ffd1daef349660bdaff72a4119555
Author: H. Nikolaus Schaller <hns@goldelico.com>
Date:   Mon May 4 08:35:12 2020 +0200

    drm: ingenic-drm: add MODULE_DEVICE_TABLE
    
    commit c59359a02d14a7256cd508a4886b7d2012df2363 upstream.
    
    so that the driver can load by matching the device tree
    if compiled as module.
    
    Cc: stable@vger.kernel.org # v5.3+
    Fixes: 90b86fcc47b4 ("DRM: Add KMS driver for the Ingenic JZ47xx SoCs")
    Signed-off-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/1694a29b7a3449b6b662cec33d1b33f2ee0b174a.1588574111.git.hns@goldelico.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64d795914663efc49109a763be80945394171674
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Wed Apr 29 00:12:00 2020 +0300

    mei: me: disable mei interface on LBG servers.
    
    commit d76bc8200f9cf8b6746e66b37317ba477eda25c4 upstream.
    
    Disable the MEI driver on LBG SPS (server) platforms, some corner
    flows such as recovery mode does not work, and the driver
    doesn't have working use cases.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20200428211200.12200-1-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4b8747205fc05c09ac29febe88c82e1df2bb4e3
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Apr 22 12:10:13 2020 +0200

    amba: Initialize dma_parms for amba devices
    
    commit f458488425f1cc9a396aa1d09bb00c48783936da upstream.
    
    It's currently the amba driver's responsibility to initialize the pointer,
    dma_parms, for its corresponding struct device. The benefit with this
    approach allows us to avoid the initialization and to not waste memory for
    the struct device_dma_parameters, as this can be decided on a case by case
    basis.
    
    However, it has turned out that this approach is not very practical. Not
    only does it lead to open coding, but also to real errors. In principle
    callers of dma_set_max_seg_size() doesn't check the error code, but just
    assumes it succeeds.
    
    For these reasons, let's do the initialization from the common amba bus at
    the device registration point. This also follows the way the PCI devices
    are being managed, see pci_device_add().
    
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: <stable@vger.kernel.org>
    Tested-by: Haibo Chen <haibo.chen@nxp.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20200422101013.31267-1-ulf.hansson@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51cedac68704abe10c8f5410678212c77ed8a033
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Apr 22 12:09:54 2020 +0200

    driver core: platform: Initialize dma_parms for platform devices
    
    commit 9495b7e92f716ab2bd6814fab5e97ab4a39adfdd upstream.
    
    It's currently the platform driver's responsibility to initialize the
    pointer, dma_parms, for its corresponding struct device. The benefit with
    this approach allows us to avoid the initialization and to not waste memory
    for the struct device_dma_parameters, as this can be decided on a case by
    case basis.
    
    However, it has turned out that this approach is not very practical.  Not
    only does it lead to open coding, but also to real errors. In principle
    callers of dma_set_max_seg_size() doesn't check the error code, but just
    assumes it succeeds.
    
    For these reasons, let's do the initialization from the common platform bus
    at the device registration point. This also follows the way the PCI devices
    are being managed, see pci_device_add().
    
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Cc: <stable@vger.kernel.org>
    Tested-by: Haibo Chen <haibo.chen@nxp.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20200422100954.31211-1-ulf.hansson@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cdbbb56fec54a893a536874b59d91f5a86bc9ec
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Tue May 5 13:59:30 2020 +0100

    arm64: hugetlb: avoid potential NULL dereference
    
    commit 027d0c7101f50cf03aeea9eebf484afd4920c8d3 upstream.
    
    The static analyzer in GCC 10 spotted that in huge_pte_alloc() we may
    pass a NULL pmdp into pte_alloc_map() when pmd_alloc() returns NULL:
    
    |   CC      arch/arm64/mm/pageattr.o
    |   CC      arch/arm64/mm/hugetlbpage.o
    |                  from arch/arm64/mm/hugetlbpage.c:10:
    | arch/arm64/mm/hugetlbpage.c: In function ‘huge_pte_alloc’:
    | ./arch/arm64/include/asm/pgtable-types.h:28:24: warning: dereference of NULL ‘pmdp’ [CWE-690] [-Wanalyzer-null-dereference]
    | ./arch/arm64/include/asm/pgtable.h:436:26: note: in expansion of macro ‘pmd_val’
    | arch/arm64/mm/hugetlbpage.c:242:10: note: in expansion of macro ‘pte_alloc_map’
    |     |arch/arm64/mm/hugetlbpage.c:232:10:
    |     |./arch/arm64/include/asm/pgtable-types.h:28:24:
    | ./arch/arm64/include/asm/pgtable.h:436:26: note: in expansion of macro ‘pmd_val’
    | arch/arm64/mm/hugetlbpage.c:242:10: note: in expansion of macro ‘pte_alloc_map’
    
    This can only occur when the kernel cannot allocate a page, and so is
    unlikely to happen in practice before other systems start failing.
    
    We can avoid this by bailing out if pmd_alloc() fails, as we do earlier
    in the function if pud_alloc() fails.
    
    Fixes: 66b3923a1a0f ("arm64: hugetlb: add support for PTE contiguous bit")
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reported-by: Kyrill Tkachov <kyrylo.tkachov@arm.com>
    Cc: <stable@vger.kernel.org> # 4.5.x-
    Cc: Will Deacon <will@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 743342cd1d65810bceb61f6a1bac1b76452fafc5
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Apr 29 11:21:55 2020 +0100

    KVM: arm64: Fix 32bit PC wrap-around
    
    commit 0225fd5e0a6a32af7af0aefac45c8ebf19dc5183 upstream.
    
    In the unlikely event that a 32bit vcpu traps into the hypervisor
    on an instruction that is located right at the end of the 32bit
    range, the emulation of that instruction is going to increment
    PC past the 32bit range. This isn't great, as userspace can then
    observe this value and get a bit confused.
    
    Conversly, userspace can do things like (in the context of a 64bit
    guest that is capable of 32bit EL0) setting PSTATE to AArch64-EL0,
    set PC to a 64bit value, change PSTATE to AArch32-USR, and observe
    that PC hasn't been truncated. More confusion.
    
    Fix both by:
    - truncating PC increments for 32bit guests
    - sanitizing all 32bit regs every time a core reg is changed by
      userspace, and that PSTATE indicates a 32bit mode.
    
    Cc: stable@vger.kernel.org
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddf16a3eab2bdfc0a4d79d81cb7412fda8b04419
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Apr 14 15:10:08 2020 +0100

    KVM: arm: vgic: Fix limit condition when writing to GICD_I[CS]ACTIVER
    
    commit 1c32ca5dc6d00012f0c964e5fdd7042fcc71efb1 upstream.
    
    When deciding whether a guest has to be stopped we check whether this
    is a private interrupt or not. Unfortunately, there's an off-by-one bug
    here, and we fail to recognize a whole range of interrupts as being
    global (GICv2 SPIs 32-63).
    
    Fix the condition from > to be >=.
    
    Cc: stable@vger.kernel.org
    Fixes: abd7229626b93 ("KVM: arm/arm64: Simplify active_change_prepare and plug race")
    Reported-by: André Przywara <andre.przywara@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99fa8af7ccf1542665b3aa501a005785d63e0cc5
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue May 5 20:53:55 2020 -0700

    KVM: VMX: Explicitly clear RFLAGS.CF and RFLAGS.ZF in VM-Exit RSB path
    
    commit c7cb2d650c9e78c03bd2d1c0db89891825f8c0f4 upstream.
    
    Clear CF and ZF in the VM-Exit path after doing __FILL_RETURN_BUFFER so
    that KVM doesn't interpret clobbered RFLAGS as a VM-Fail.  Filling the
    RSB has always clobbered RFLAGS, its current incarnation just happens
    clear CF and ZF in the processs.  Relying on the macro to clear CF and
    ZF is extremely fragile, e.g. commit 089dd8e53126e ("x86/speculation:
    Change FILL_RETURN_BUFFER to work with objtool") tweaks the loop such
    that the ZF flag is always set.
    
    Reported-by: Qian Cai <cai@lca.pw>
    Cc: Rick Edgecombe <rick.p.edgecombe@intel.com>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: f2fde6a5bcfcf ("KVM: VMX: Move RSB stuffing to before the first RET after VM-Exit")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200506035355.2242-1-sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f3f0910a86b1917ef191b75619a28c0aef6f92a
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Tue May 5 09:27:15 2020 +0200

    KVM: s390: Remove false WARN_ON_ONCE for the PQAP instruction
    
    commit 5615e74f48dcc982655543e979b6c3f3f877e6f6 upstream.
    
    In LPAR we will only get an intercept for FC==3 for the PQAP
    instruction. Running nested under z/VM can result in other intercepts as
    well as ECA_APIE is an effective bit: If one hypervisor layer has
    turned this bit off, the end result will be that we will get intercepts for
    all function codes. Usually the first one will be a query like PQAP(QCI).
    So the WARN_ON_ONCE is not right. Let us simply remove it.
    
    Cc: Pierre Morel <pmorel@linux.ibm.com>
    Cc: Tony Krowiak <akrowiak@linux.ibm.com>
    Cc: stable@vger.kernel.org # v5.3+
    Fixes: e5282de93105 ("s390: ap: kvm: add PQAP interception for AQIC")
    Link: https://lore.kernel.org/kvm/20200505083515.2720-1-borntraeger@de.ibm.com
    Reported-by: Qian Cai <cailca@icloud.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7b8447e1bbb4c9fd7e9441ab7a3ba4179c4edea
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Apr 22 17:18:53 2020 -0600

    crypto: arch/lib - limit simd usage to 4k chunks
    
    commit 706024a52c614b478b63f7728d202532ce6591a9 upstream.
    
    The initial Zinc patchset, after some mailing list discussion, contained
    code to ensure that kernel_fpu_enable would not be kept on for more than
    a 4k chunk, since it disables preemption. The choice of 4k isn't totally
    scientific, but it's not a bad guess either, and it's what's used in
    both the x86 poly1305, blake2s, and nhpoly1305 code already (in the form
    of PAGE_SIZE, which this commit corrects to be explicitly 4k for the
    former two).
    
    Ard did some back of the envelope calculations and found that
    at 5 cycles/byte (overestimate) on a 1ghz processor (pretty slow), 4k
    means we have a maximum preemption disabling of 20us, which Sebastian
    confirmed was probably a good limit.
    
    Unfortunately the chunking appears to have been left out of the final
    patchset that added the glue code. So, this commit adds it back in.
    
    Fixes: 84e03fa39fbe ("crypto: x86/chacha - expose SIMD ChaCha routine as library function")
    Fixes: b3aad5bad26a ("crypto: arm64/chacha - expose arm64 ChaCha routine as library function")
    Fixes: a44a3430d71b ("crypto: arm/chacha - expose ARM ChaCha routine as library function")
    Fixes: d7d7b8535662 ("crypto: x86/poly1305 - wire up faster implementations for kernel")
    Fixes: f569ca164751 ("crypto: arm64/poly1305 - incorporate OpenSSL/CRYPTOGAMS NEON implementation")
    Fixes: a6b803b3ddc7 ("crypto: arm/poly1305 - incorporate OpenSSL/CRYPTOGAMS NEON implementation")
    Fixes: ed0356eda153 ("crypto: blake2s - x86_64 SIMD implementation")
    Cc: Eric Biggers <ebiggers@google.com>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4487b633a37700d5c2bf39f9c1627dc6d8b69c8
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Apr 22 17:18:54 2020 -0600

    crypto: arch/nhpoly1305 - process in explicit 4k chunks
    
    commit a9a8ba90fa5857c2c8a0e32eef2159cec717da11 upstream.
    
    Rather than chunking via PAGE_SIZE, this commit changes the arch
    implementations to chunk in explicit 4k parts, so that calculations on
    maximum acceptable latency don't suddenly become invalid on platforms
    where PAGE_SIZE isn't 4k, such as arm64.
    
    Fixes: 0f961f9f670e ("crypto: x86/nhpoly1305 - add AVX2 accelerated NHPoly1305")
    Fixes: 012c82388c03 ("crypto: x86/nhpoly1305 - add SSE2 accelerated NHPoly1305")
    Fixes: a00fa0c88774 ("crypto: arm64/nhpoly1305 - add NEON-accelerated NHPoly1305")
    Fixes: 16aae3595a9d ("crypto: arm/nhpoly1305 - add NEON-accelerated NHPoly1305")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 088255a073ee730ca0c2c54aaadef24b34b4b976
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed May 6 10:36:18 2020 -0400

    tracing: Add a vmalloc_sync_mappings() for safe measure
    
    commit 11f5efc3ab66284f7aaacc926e9351d658e2577b upstream.
    
    x86_64 lazily maps in the vmalloc pages, and the way this works with per_cpu
    areas can be complex, to say the least. Mappings may happen at boot up, and
    if nothing synchronizes the page tables, those page mappings may not be
    synced till they are used. This causes issues for anything that might touch
    one of those mappings in the path of the page fault handler. When one of
    those unmapped mappings is touched in the page fault handler, it will cause
    another page fault, which in turn will cause a page fault, and leave us in
    a loop of page faults.
    
    Commit 763802b53a42 ("x86/mm: split vmalloc_sync_all()") split
    vmalloc_sync_all() into vmalloc_sync_unmappings() and
    vmalloc_sync_mappings(), as on system exit, it did not need to do a full
    sync on x86_64 (although it still needed to be done on x86_32). By chance,
    the vmalloc_sync_all() would synchronize the page mappings done at boot up
    and prevent the per cpu area from being a problem for tracing in the page
    fault handler. But when that synchronization in the exit of a task became a
    nop, it caused the problem to appear.
    
    Link: https://lore.kernel.org/r/20200429054857.66e8e333@oasis.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 737223fbca3b1 ("tracing: Consolidate buffer allocation code")
    Reported-by: "Tzvetomir Stoyanov (VMware)" <tz.stoyanov@gmail.com>
    Suggested-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13946ad1d908e05ca8a2ce61b33f64819c9dc8ea
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed May 6 10:20:10 2020 -0400

    tracing: Wait for preempt irq delay thread to finish
    
    commit d16a8c31077e75ecb9427fbfea59b74eed00f698 upstream.
    
    Running on a slower machine, it is possible that the preempt delay kernel
    thread may still be executing if the module was immediately removed after
    added, and this can cause the kernel to crash as the kernel thread might be
    executing after its code has been removed.
    
    There's no reason that the caller of the code shouldn't just wait for the
    delay thread to finish, as the thread can also be created by a trigger in
    the sysfs code, which also has the same issues.
    
    Link: http://lore.kernel.org/r/5EA2B0C8.2080706@cn.fujitsu.com
    
    Cc: stable@vger.kernel.org
    Fixes: 793937236d1ee ("lib: Add module for testing preemptoff/irqsoff latency tracers")
    Reported-by: Xiao Yang <yangx.jy@cn.fujitsu.com>
    Reviewed-by: Xiao Yang <yangx.jy@cn.fujitsu.com>
    Reviewed-by: Joel Fernandes <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8db9e7e13d5a1f251e2edb1c91862f8bd5ca3968
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Apr 25 14:49:26 2020 +0900

    tracing/kprobes: Reject new event if loc is NULL
    
    commit 5b4dcd2d201a395ad4054067bfae4a07554fbd65 upstream.
    
    Reject the new event which has NULL location for kprobes.
    For kprobes, user must specify at least the location.
    
    Link: http://lkml.kernel.org/r/158779376597.6082.1411212055469099461.stgit@devnote2
    
    Cc: Tom Zanussi <zanussi@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 2a588dd1d5d6 ("tracing: Add kprobe event command generation functions")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 419b6ef27860b28bb9a7c041478f974ba0fba457
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Apr 25 14:49:17 2020 +0900

    tracing/boottime: Fix kprobe event API usage
    
    commit da0f1f4167e3af69e1d8b32d6d65195ddd2bfb64 upstream.
    
    Fix boottime kprobe events to use API correctly for
    multiple events.
    
    For example, when we set a multiprobe kprobe events in
    bootconfig like below,
    
      ftrace.event.kprobes.myevent {
            probes = "vfs_read $arg1 $arg2", "vfs_write $arg1 $arg2"
      }
    
    This cause an error;
    
      trace_boot: Failed to add probe: p:kprobes/myevent (null)  vfs_read $arg1 $arg2  vfs_write $arg1 $arg2
    
    This shows the 1st argument becomes NULL and multiprobes
    are merged to 1 probe.
    
    Link: http://lkml.kernel.org/r/158779375766.6082.201939936008972838.stgit@devnote2
    
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 29a154810546 ("tracing: Change trace_boot to use kprobe_event interface")
    Reviewed-by: Tom Zanussi <zanussi@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baff4ba57c916c9c3a87a81708fb0672716d28fc
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:03:04 2020 +0200

    USB: serial: garmin_gps: add sanity checking for data length
    
    commit e9b3c610a05c1cdf8e959a6d89c38807ff758ee6 upstream.
    
    We must not process packets shorter than a packet ID
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-and-tested-by: syzbot+d29e9263e13ce0b9f4fd@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dbb165ddcc04d95259e9a8391e110615d0a4d6e
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Thu May 7 08:49:18 2020 +0800

    usb: chipidea: msm: Ensure proper controller reset using role switch API
    
    commit 91edf63d5022bd0464788ffb4acc3d5febbaf81d upstream.
    
    Currently we check to make sure there is no error state on the extcon
    handle for VBUS when writing to the HS_PHY_GENCONFIG_2 register. When using
    the USB role-switch API we still need to write to this register absent an
    extcon handle.
    
    This patch makes the appropriate update to ensure the write happens if
    role-switching is true.
    
    Fixes: 05559f10ed79 ("usb: chipidea: add role switch class support")
    Cc: stable <stable@vger.kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: linux-usb@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200507004918.25975-2-peter.chen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 911ddebbdd948169dfcba5607c2a0e30f5520e1b
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 29 17:52:18 2020 +0200

    USB: uas: add quirk for LaCie 2Big Quadra
    
    commit 9f04db234af691007bb785342a06abab5fb34474 upstream.
    
    This device needs US_FL_NO_REPORT_OPCODES to avoid going
    through prolonged error handling on enumeration.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: Julian Groß <julian.g@posteo.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200429155218.7308-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c921814c70069183f28925ca8f516f13d71803c4
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Apr 24 14:04:00 2020 -0700

    HID: wacom: Report 2nd-gen Intuos Pro S center button status over BT
    
    commit dcce8ef8f70a8e38e6c47c1bae8b312376c04420 upstream.
    
    The state of the center button was not reported to userspace for the
    2nd-gen Intuos Pro S when used over Bluetooth due to the pad handling
    code not being updated to support its reduced number of buttons. This
    patch uses the actual number of buttons present on the tablet to
    assemble a button state bitmap.
    
    Link: https://github.com/linuxwacom/xf86-input-wacom/issues/112
    Fixes: cd47de45b855 ("HID: wacom: Add 2nd gen Intuos Pro Small support")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Cc: stable@vger.kernel.org # v5.3+
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dc8fa096889cbb1c24020b246fc1d5853b2b9c3
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Apr 22 16:18:48 2020 -0400

    HID: usbhid: Fix race between usbhid_close() and usbhid_stop()
    
    commit 0ed08faded1da03eb3def61502b27f81aef2e615 upstream.
    
    The syzbot fuzzer discovered a bad race between in the usbhid driver
    between usbhid_stop() and usbhid_close().  In particular,
    usbhid_stop() does:
    
            usb_free_urb(usbhid->urbin);
            ...
            usbhid->urbin = NULL; /* don't mess up next start */
    
    and usbhid_close() does:
    
            usb_kill_urb(usbhid->urbin);
    
    with no mutual exclusion.  If the two routines happen to run
    concurrently so that usb_kill_urb() is called in between the
    usb_free_urb() and the NULL assignment, it will access the
    deallocated urb structure -- a use-after-free bug.
    
    This patch adds a mutex to the usbhid private structure and uses it to
    enforce mutual exclusion of the usbhid_start(), usbhid_stop(),
    usbhid_open() and usbhid_close() callbacks.
    
    Reported-and-tested-by: syzbot+7bf5a7b0f0a1f9446f4c@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b109811554e6ba4f684911170a6d9c05544ed073
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Wed Apr 8 07:58:37 2020 -0700

    Revert "HID: wacom: generic: read the number of expected touches on a per collection basis"
    
    commit b43f977dd281945960c26b3ef67bba0fa07d39d9 upstream.
    
    This reverts commit 15893fa40109f5e7c67eeb8da62267d0fdf0be9d.
    
    The referenced commit broke pen and touch input for a variety of devices
    such as the Cintiq Pro 32. Affected devices may appear to work normally
    for a short amount of time, but eventually loose track of actual touch
    state and can leave touch arbitration enabled which prevents the pen
    from working. The commit is not itself required for any currently-available
    Bluetooth device, and so we revert it to correct the behavior of broken
    devices.
    
    This breakage occurs due to a mismatch between the order of collections
    and the order of usages on some devices. This commit tries to read the
    contact count before processing events, but will fail if the contact
    count does not occur prior to the first logical finger collection. This
    is the case for devices like the Cintiq Pro 32 which place the contact
    count at the very end of the report.
    
    Without the contact count set, touches will only be partially processed.
    The `wacom_wac_finger_slot` function will not open any slots since the
    number of contacts seen is greater than the expectation of 0, but we will
    still end up calling `input_mt_sync_frame` for each finger anyway. This
    can cause problems for userspace separate from the issue currently taking
    place in the kernel. Only once all of the individual finger collections
    have been processed do we finally get to the enclosing collection which
    contains the contact count. The value ends up being used for the *next*
    report, however.
    
    This delayed use of the contact count can cause the driver to loose track
    of the actual touch state and believe that there are contacts down when
    there aren't. This leaves touch arbitration enabled and prevents the pen
    from working. It can also cause userspace to incorrectly treat single-
    finger input as gestures.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/146
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Fixes: 15893fa40109 ("HID: wacom: generic: read the number of expected touches on a per collection basis")
    Cc: stable@vger.kernel.org # 5.3+
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5ce8531ea508d270822b2bc6140c6198c8a2a7b
Author: Jere Leppänen <jere.leppanen@nokia.com>
Date:   Tue Apr 21 22:03:41 2020 +0300

    sctp: Fix bundling of SHUTDOWN with COOKIE-ACK
    
    commit 145cb2f7177d94bc54563ed26027e952ee0ae03c upstream.
    
    When we start shutdown in sctp_sf_do_dupcook_a(), we want to bundle
    the SHUTDOWN with the COOKIE-ACK to ensure that the peer receives them
    at the same time and in the correct order. This bundling was broken by
    commit 4ff40b86262b ("sctp: set chunk transport correctly when it's a
    new asoc"), which assigns a transport for the COOKIE-ACK, but not for
    the SHUTDOWN.
    
    Fix this by passing a reference to the COOKIE-ACK chunk as an argument
    to sctp_sf_do_9_2_start_shutdown() and onward to
    sctp_make_shutdown(). This way the SHUTDOWN chunk is assigned the same
    transport as the COOKIE-ACK chunk, which allows them to be bundled.
    
    In sctp_sf_do_9_2_start_shutdown(), the void *arg parameter was
    previously unused. Now that we're taking it into use, it must be a
    valid pointer to a chunk, or NULL. There is only one call site where
    it's not, in sctp_sf_autoclose_timer_expire(). Fix that too.
    
    Fixes: 4ff40b86262b ("sctp: set chunk transport correctly when it's a new asoc")
    Signed-off-by: Jere Leppänen <jere.leppanen@nokia.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05aa17c3bbd3ba4d46ed0736af559f7bc0215794
Author: Jason Gerecke <jason.gerecke@wacom.com>
Date:   Wed Apr 1 14:23:29 2020 -0700

    HID: wacom: Read HID_DG_CONTACTMAX directly for non-generic devices
    
    commit 778fbf4179991e7652e97d7f1ca1f657ef828422 upstream.
    
    We've recently switched from extracting the value of HID_DG_CONTACTMAX
    at a fixed offset (which may not be correct for all tablets) to
    injecting the report into the driver for the generic codepath to handle.
    Unfortunately, this change was made for *all* tablets, even those which
    aren't generic. Because `wacom_wac_report` ignores reports from non-
    generic devices, the contact count never gets initialized. Ultimately
    this results in the touch device itself failing to probe, and thus the
    loss of touch input.
    
    This commit adds back the fixed-offset extraction for non-generic devices.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/155
    Fixes: 184eccd40389 ("HID: wacom: generic: read HID_DG_CONTACTMAX from any feature report")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    CC: stable@vger.kernel.org # 5.3+
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8bd0fd53458419c37ace2d21174eebd867420c7
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed May 6 15:33:04 2020 -0600

    wireguard: send/receive: cond_resched() when processing worker ringbuffers
    
    [ Upstream commit 4005f5c3c9d006157ba716594e0d70c88a235c5e ]
    
    Users with pathological hardware reported CPU stalls on CONFIG_
    PREEMPT_VOLUNTARY=y, because the ringbuffers would stay full, meaning
    these workers would never terminate. That turned out not to be okay on
    systems without forced preemption, which Sultan observed. This commit
    adds a cond_resched() to the bottom of each loop iteration, so that
    these workers don't hog the core. Note that we don't need this on the
    napi poll worker, since that terminates after its budget is expended.
    
    Suggested-by: Sultan Alsawaf <sultan@kerneltoast.com>
    Reported-by: Wang Jian <larkwang@gmail.com>
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df364086a8c965a453b4a68f6cc2d6f981eda11a
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed May 6 15:33:03 2020 -0600

    wireguard: socket: remove errant restriction on looping to self
    
    [ Upstream commit b673e24aad36981f327a6570412ffa7754de8911 ]
    
    It's already possible to create two different interfaces and loop
    packets between them. This has always been possible with tunnels in the
    kernel, and isn't specific to wireguard. Therefore, the networking stack
    already needs to deal with that. At the very least, the packet winds up
    exceeding the MTU and is discarded at that point. So, since this is
    already something that happens, there's no need to forbid the not very
    exceptional case of routing a packet back to the same interface; this
    loop is no different than others, and we shouldn't special case it, but
    rather rely on generic handling of loops in general. This also makes it
    easier to do interesting things with wireguard such as onion routing.
    
    At the same time, we add a selftest for this, ensuring that both onion
    routing works and infinite routing loops do not crash the kernel. We
    also add a test case for wireguard interfaces nesting packets and
    sending traffic between each other, as well as the loop in this case
    too. We make sure to send some throughput-heavy traffic for this use
    case, to stress out any possible recursion issues with the locks around
    workqueues.
    
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea1bbba16a0b2cd32695bc4f0b60e17b84f17d0b
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Mon May 4 20:01:27 2020 +0800

    net: enetc: fix an issue about leak system resources
    
    [ Upstream commit d975cb7ea915e64a3ebcfef8a33051f3e6bf22a8 ]
    
    the related system resources were not released when enetc_hw_alloc()
    return error in the enetc_pci_mdio_probe(), add iounmap() for error
    handling label "err_hw_alloc" to fix it.
    
    Fixes: 6517798dd3432a ("enetc: Make MDIO accessors more generic and export to include/linux/fsl")
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52c05feadc64d82bf1bf65ab5c55dbbeadeb5a3b
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Wed Apr 29 14:59:22 2020 -0600

    wireguard: receive: use tunnel helpers for decapsulating ECN markings
    
    [ Upstream commit eebabcb26ea1e3295704477c6cd4e772c96a9559 ]
    
    WireGuard currently only propagates ECN markings on tunnel decap according
    to the old RFC3168 specification. However, the spec has since been updated
    in RFC6040 to recommend slightly different decapsulation semantics. This
    was implemented in the kernel as a set of common helpers for ECN
    decapsulation, so let's just switch over WireGuard to using those, so it
    can benefit from this enhancement and any future tweaks. We do not drop
    packets with invalid ECN marking combinations, because WireGuard is
    frequently used to work around broken ISPs, which could be doing that.
    
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Reported-by: Olivier Tilmans <olivier.tilmans@nokia-bell-labs.com>
    Cc: Dave Taht <dave.taht@gmail.com>
    Cc: Rodney W. Grimes <ietf@gndrsh.dnsmgr.net>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ffd4563be3417f80c46c01a881d9402ccff7ebb
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Apr 29 14:59:21 2020 -0600

    wireguard: queueing: cleanup ptr_ring in error path of packet_queue_init
    
    [ Upstream commit 130c58606171326c81841a49cc913cd354113dd9 ]
    
    Prior, if the alloc_percpu of packet_percpu_multicore_worker_alloc
    failed, the previously allocated ptr_ring wouldn't be freed. This commit
    adds the missing call to ptr_ring_cleanup in the error case.
    
    Reported-by: Sultan Alsawaf <sultan@kerneltoast.com>
    Fixes: e7096c131e51 ("net: WireGuard secure network tunnel")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58eea66cc0566abd5518fc91600591d298b3f1dd
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed May 6 13:16:56 2020 +0300

    net: mvpp2: cls: Prevent buffer overflow in mvpp2_ethtool_cls_rule_del()
    
    [ Upstream commit 722c0f00d4feea77475a5dc943b53d60824a1e4e ]
    
    The "info->fs.location" is a u32 that comes from the user via the
    ethtool_set_rxnfc() function.  We need to check for invalid values to
    prevent a buffer overflow.
    
    I copy and pasted this check from the mvpp2_ethtool_cls_rule_ins()
    function.
    
    Fixes: 90b509b39ac9 ("net: mvpp2: cls: Add Classification offload support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7e796eaf6ac0692aaef4b420287f37997d2913b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed May 6 13:16:22 2020 +0300

    net: mvpp2: prevent buffer overflow in mvpp22_rss_ctx()
    
    [ Upstream commit 39bd16df7c31bb8cf5dfd0c88e42abd5ae10029d ]
    
    The "rss_context" variable comes from the user via  ethtool_get_rxfh().
    It can be any u32 value except zero.  Eventually it gets passed to
    mvpp22_rss_ctx() and if it is over MVPP22_N_RSS_TABLES (8) then it
    results in an array overflow.
    
    Fixes: 895586d5dc32 ("net: mvpp2: cls: Use RSS contexts to handle RSS tables")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfdccd7b998c966622998d2cd5388881a30844fd
Author: Roi Dayan <roid@mellanox.com>
Date:   Thu Apr 23 12:37:21 2020 +0300

    net/mlx5e: Fix q counters on uplink representors
    
    [ Upstream commit 67b38de646894c9a94fe4d6d17719e70cc6028eb ]
    
    Need to allocate the q counters before init_rx which needs them
    when creating the rq.
    
    Fixes: 8520fa57a4e9 ("net/mlx5e: Create q counters on uplink representors")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2103909a6939c9c906a673b068fb9d09cccdc076
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Feb 23 03:27:41 2020 +0200

    net/mlx5: Fix command entry leak in Internal Error State
    
    [ Upstream commit cece6f432cca9f18900463ed01b97a152a03600a ]
    
    Processing commands by cmd_work_handler() while already in Internal
    Error State will result in entry leak, since the handler process force
    completion without doorbell. Forced completion doesn't release the entry
    and event completion will never arrive, so entry should be released.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5b4f1ae5e502107467d854078e4972e3acbbd59
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Jul 21 08:40:13 2019 +0300

    net/mlx5: Fix forced completion access non initialized command entry
    
    [ Upstream commit f3cb3cebe26ed4c8036adbd9448b372129d3c371 ]
    
    mlx5_cmd_flush() will trigger forced completions to all valid command
    entries. Triggered by an asynch event such as fast teardown it can
    happen at any stage of the command, including command initialization.
    It will trigger forced completion and that can lead to completion on an
    uninitialized command entry.
    
    Setting MLX5_CMD_ENT_STATE_PENDING_COMP only after command entry is
    initialized will ensure force completion is treated only if command
    entry is initialized.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da214fd1046572502d518a8a44a61c3bec7fd872
Author: Erez Shitrit <erezsh@mellanox.com>
Date:   Wed Mar 25 17:19:43 2020 +0200

    net/mlx5: DR, On creation set CQ's arm_db member to right value
    
    [ Upstream commit 8075411d93b6efe143d9f606f6531077795b7fbf ]
    
    In polling mode, set arm_db member to a value that will avoid CQ
    event recovery by the HW.
    Otherwise we might get event without completion function.
    In addition,empty completion function to was added to protect from
    unexpected events.
    
    Fixes: 297cccebdc5a ("net/mlx5: DR, Expose an internal API to issue RDMA operations")
    Signed-off-by: Erez Shitrit <erezsh@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e6f263cd0ef87e2e122352b81687bec192c74a5
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:42 2020 -0400

    bnxt_en: Fix VLAN acceleration handling in bnxt_fix_features().
    
    [ Upstream commit c72cb303aa6c2ae7e4184f0081c6d11bf03fb96b ]
    
    The current logic in bnxt_fix_features() will inadvertently turn on both
    CTAG and STAG VLAN offload if the user tries to disable both.  Fix it
    by checking that the user is trying to enable CTAG or STAG before
    enabling both.  The logic is supposed to enable or disable both CTAG and
    STAG together.
    
    Fixes: 5a9f6b238e59 ("bnxt_en: Enable and disable RX CTAG and RX STAG VLAN acceleration together.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b90ed93995415671bf66923898515db86d43120
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:41 2020 -0400

    bnxt_en: Return error when allocating zero size context memory.
    
    [ Upstream commit bbf211b1ecb891c7e0cc7888834504183fc8b534 ]
    
    bnxt_alloc_ctx_pg_tbls() should return error when the memory size of the
    context memory to set up is zero.  By returning success (0), the caller
    may proceed normally and may crash later when it tries to set up the
    memory.
    
    Fixes: 08fe9d181606 ("bnxt_en: Add Level 2 context memory paging support.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77c19d216631de3133fa379cd6df77babc553a5f
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:40 2020 -0400

    bnxt_en: Improve AER slot reset.
    
    [ Upstream commit bae361c54fb6ac6eba3b4762f49ce14beb73ef13 ]
    
    Improve the slot reset sequence by disabling the device to prevent bad
    DMAs if slot reset fails.  Return the proper result instead of always
    PCI_ERS_RESULT_RECOVERED to the caller.
    
    Fixes: 6316ea6db93d ("bnxt_en: Enable AER support.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baac8bc5bde34be81133597e8a15633294d32160
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sun Apr 26 16:24:39 2020 -0400

    bnxt_en: Reduce BNXT_MSIX_VEC_MAX value to supported CQs per PF.
    
    [ Upstream commit 9e68cb0359b20f99c7b070f1d3305e5e0a9fae6d ]
    
    Broadcom adapters support only maximum of 512 CQs per PF. If user sets
    MSIx vectors more than supported CQs, firmware is setting incorrect value
    for msix_vec_per_pf_max parameter. Fix it by reducing the BNXT_MSIX_VEC_MAX
    value to 512, even though the maximum # of MSIx vectors supported by adapter
    are 1280.
    
    Fixes: f399e8497826 ("bnxt_en: Use msix_vec_per_pf_max and msix_vec_per_pf_min devlink params.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b201e328fb24d02efd99e45bfee59d8fd58d4eda
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:38 2020 -0400

    bnxt_en: Fix VF anti-spoof filter setup.
    
    [ Upstream commit c71c4e49afe173823a2a85b0cabc9b3f1176ffa2 ]
    
    Fix the logic that sets the enable/disable flag for the source MAC
    filter according to firmware spec 1.7.1.
    
    In the original firmware spec. before 1.7.1, the VF spoof check flags
    were not latched after making the HWRM_FUNC_CFG call, so there was a
    need to keep the func_flags so that subsequent calls would perserve
    the VF spoof check setting.  A change was made in the 1.7.1 spec
    so that the flags became latched.  So we now set or clear the anti-
    spoof setting directly without retrieving the old settings in the
    stored vf->func_flags which are no longer valid.  We also remove the
    unneeded vf->func_flags.
    
    Fixes: 8eb992e876a8 ("bnxt_en: Update firmware interface spec to 1.7.6.2.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74720a3a1be739ff5c95eb483ca8f9de81c5aa39
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Apr 27 16:11:05 2020 +0200

    tunnel: Propagate ECT(1) when decapsulating as recommended by RFC6040
    
    [ Upstream commit b723748750ece7d844cdf2f52c01d37f83387208 ]
    
    RFC 6040 recommends propagating an ECT(1) mark from an outer tunnel header
    to the inner header if that inner header is already marked as ECT(0). When
    RFC 6040 decapsulation was implemented, this case of propagation was not
    added. This simply appears to be an oversight, so let's fix that.
    
    Fixes: eccc1bb8d4b4 ("tunnel: drop packet if ECN present with not-ECT")
    Reported-by: Bob Briscoe <ietf@bobbriscoe.net>
    Reported-by: Olivier Tilmans <olivier.tilmans@nokia-bell-labs.com>
    Cc: Dave Taht <dave.taht@gmail.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b0cef8193e433946e854a5c19e82a382f07185b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon May 4 11:15:54 2020 +0700

    tipc: fix partial topology connection closure
    
    [ Upstream commit 980d69276f3048af43a045be2925dacfb898a7be ]
    
    When an application connects to the TIPC topology server and subscribes
    to some services, a new connection is created along with some objects -
    'tipc_subscription' to store related data correspondingly...
    However, there is one omission in the connection handling that when the
    connection or application is orderly shutdown (e.g. via SIGQUIT, etc.),
    the connection is not closed in kernel, the 'tipc_subscription' objects
    are not freed too.
    This results in:
    - The maximum number of subscriptions (65535) will be reached soon, new
    subscriptions will be rejected;
    - TIPC module cannot be removed (unless the objects  are somehow forced
    to release first);
    
    The commit fixes the issue by closing the connection if the 'recvmsg()'
    returns '0' i.e. when the peer is shutdown gracefully. It also includes
    the other unexpected cases.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ee28b1c107cad5c6270dbab36591621199bc7d3
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 6 09:21:15 2020 -0700

    selftests: net: tcp_mmap: fix SO_RCVLOWAT setting
    
    [ Upstream commit a84724178bd7081cf3bd5b558616dd6a9a4ca63b ]
    
    Since chunk_size is no longer an integer, we can not
    use it directly as an argument of setsockopt().
    
    This patch should fix tcp_mmap for Big Endian kernels.
    
    Fixes: 597b01edafac ("selftests: net: avoid ptl lock contention in tcp_mmap")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Cc: Arjun Roy <arjunroy@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8c0bc59a7544d2b1e3d910a0622d2de836dfcba
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 5 20:51:06 2020 -0700

    selftests: net: tcp_mmap: clear whole tcp_zerocopy_receive struct
    
    [ Upstream commit bf5525f3a8e3248be5aa5defe5aaadd60e1c1ba1 ]
    
    We added fields in tcp_zerocopy_receive structure,
    so make sure to clear all fields to not pass garbage to the kernel.
    
    We were lucky because recent additions added 'out' parameters,
    still we need to clean our reference implementation, before folks
    copy/paste it.
    
    Fixes: c8856c051454 ("tcp-zerocopy: Return inq along with tcp receive zerocopy.")
    Fixes: 33946518d493 ("tcp-zerocopy: Return sk_err (if set) along with tcp receive zerocopy.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Arjun Roy <arjunroy@google.com>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2149c61b047f66241276f708b061b9cbfb097c4f
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 26 18:19:07 2020 -0700

    sch_sfq: validate silly quantum values
    
    [ Upstream commit df4953e4e997e273501339f607b77953772e3559 ]
    
    syzbot managed to set up sfq so that q->scaled_quantum was zero,
    triggering an infinite loop in sfq_dequeue()
    
    More generally, we must only accept quantum between 1 and 2^18 - 7,
    meaning scaled_quantum must be in [1, 0x7FFF] range.
    
    Otherwise, we also could have a loop in sfq_dequeue()
    if scaled_quantum happens to be 0x8000, since slot->allot
    could indefinitely switch between 0 and 0x8000.
    
    Fixes: eeaeb068f139 ("sch_sfq: allow big packets and be fair")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+0251e883fe39e7a0cb0a@syzkaller.appspotmail.com
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bebceac7977f8a9b4d4dc5ac333f08b39114955
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 15:19:51 2020 -0700

    sch_choke: avoid potential panic in choke_reset()
    
    [ Upstream commit 8738c85c72b3108c9b9a369a39868ba5f8e10ae0 ]
    
    If choke_init() could not allocate q->tab, we would crash later
    in choke_reset().
    
    BUG: KASAN: null-ptr-deref in memset include/linux/string.h:366 [inline]
    BUG: KASAN: null-ptr-deref in choke_reset+0x208/0x340 net/sched/sch_choke.c:326
    Write of size 8 at addr 0000000000000000 by task syz-executor822/7022
    
    CPU: 1 PID: 7022 Comm: syz-executor822 Not tainted 5.7.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     __kasan_report.cold+0x5/0x4d mm/kasan/report.c:515
     kasan_report+0x33/0x50 mm/kasan/common.c:625
     check_memory_region_inline mm/kasan/generic.c:187 [inline]
     check_memory_region+0x141/0x190 mm/kasan/generic.c:193
     memset+0x20/0x40 mm/kasan/common.c:85
     memset include/linux/string.h:366 [inline]
     choke_reset+0x208/0x340 net/sched/sch_choke.c:326
     qdisc_reset+0x6b/0x520 net/sched/sch_generic.c:910
     dev_deactivate_queue.constprop.0+0x13c/0x240 net/sched/sch_generic.c:1138
     netdev_for_each_tx_queue include/linux/netdevice.h:2197 [inline]
     dev_deactivate_many+0xe2/0xba0 net/sched/sch_generic.c:1195
     dev_deactivate+0xf8/0x1c0 net/sched/sch_generic.c:1233
     qdisc_graft+0xd25/0x1120 net/sched/sch_api.c:1051
     tc_modify_qdisc+0xbab/0x1a00 net/sched/sch_api.c:1670
     rtnetlink_rcv_msg+0x44e/0xad0 net/core/rtnetlink.c:5454
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
    
    Fixes: 77e62da6e60c ("sch_choke: drop all packets in queue during reset")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f883c51ba6abf83fa4c37b656e22c5dd34d19341
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat May 2 17:42:59 2020 -0500

    nfp: abm: fix a memory leak bug
    
    [ Upstream commit bd4af432cc71b5fbfe4833510359a6ad3ada250d ]
    
    In function nfp_abm_vnic_set_mac, pointer nsp is allocated by nfp_nsp_open.
    But when nfp_nsp_has_hwinfo_lookup fail, the pointer is not released,
    which can lead to a memory leak bug. Fix this issue by adding
    nfp_nsp_close(nsp) in the error path.
    
    Fixes: f6e71efdf9fb1 ("nfp: abm: look up MAC addresses via management FW")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Acked-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00b37d4c30697e3c664f14ede776790cd66fa5df
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:52:28 2020 +1000

    net: usb: qmi_wwan: add support for DW5816e
    
    [ Upstream commit 57c7f2bd758eed867295c81d3527fff4fab1ed74 ]
    
    Add support for Dell Wireless 5816e to drivers/net/usb/qmi_wwan.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af4a1df88c4b7a0c023bda1d311f2703734f53f0
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Sat Apr 25 21:10:23 2020 +0800

    net/tls: Fix sk_psock refcnt leak when in tls_data_ready()
    
    [ Upstream commit 62b4011fa7bef9fa00a6aeec26e69685dc1cc21e ]
    
    tls_data_ready() invokes sk_psock_get(), which returns a reference of
    the specified sk_psock object to "psock" with increased refcnt.
    
    When tls_data_ready() returns, local variable "psock" becomes invalid,
    so the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling path of
    tls_data_ready(). When "psock->ingress_msg" is empty but "psock" is not
    NULL, the function forgets to decrease the refcnt increased by
    sk_psock_get(), causing a refcnt leak.
    
    Fix this issue by calling sk_psock_put() on all paths when "psock" is
    not NULL.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e9a6cf22c260def60e7ba00927f564dd234f993
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Sat Apr 25 20:54:37 2020 +0800

    net/tls: Fix sk_psock refcnt leak in bpf_exec_tx_verdict()
    
    [ Upstream commit 095f5614bfe16e5b3e191b34ea41b10d6fdd4ced ]
    
    bpf_exec_tx_verdict() invokes sk_psock_get(), which returns a reference
    of the specified sk_psock object to "psock" with increased refcnt.
    
    When bpf_exec_tx_verdict() returns, local variable "psock" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling path of
    bpf_exec_tx_verdict(). When "policy" equals to NULL but "psock" is not
    NULL, the function forgets to decrease the refcnt increased by
    sk_psock_get(), causing a refcnt leak.
    
    Fix this issue by calling sk_psock_put() on this error path before
    bpf_exec_tx_verdict() returns.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86c9fc264744998824c95c884430c64d1bf7e3e1
Author: Anthony Felice <tony.felice@timesys.com>
Date:   Sun Apr 26 22:00:59 2020 -0400

    net: tc35815: Fix phydev supported/advertising mask
    
    [ Upstream commit 4b5b71f770e2edefbfe74203777264bfe6a9927c ]
    
    Commit 3c1bcc8614db ("net: ethernet: Convert phydev advertize and
    supported from u32 to link mode") updated ethernet drivers to use a
    linkmode bitmap. It mistakenly dropped a bitwise negation in the
    tc35815 ethernet driver on a bitmask to set the supported/advertising
    flags.
    
    Found by Anthony via code inspection, not tested as I do not have the
    required hardware.
    
    Fixes: 3c1bcc8614db ("net: ethernet: Convert phydev advertize and supported from u32 to link mode")
    Signed-off-by: Anthony Felice <tony.felice@timesys.com>
    Reviewed-by: Akshay Bhat <akshay.bhat@timesys.com>
    Reviewed-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87e0c4f6ad0e678310764dba8a0cf2418811ab1a
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon May 4 12:48:54 2020 -0400

    net: stricter validation of untrusted gso packets
    
    [ Upstream commit 9274124f023b5c56dc4326637d4f787968b03607 ]
    
    Syzkaller again found a path to a kernel crash through bad gso input:
    a packet with transport header extending beyond skb_headlen(skb).
    
    Tighten validation at kernel entry:
    
    - Verify that the transport header lies within the linear section.
    
        To avoid pulling linux/tcp.h, verify just sizeof tcphdr.
        tcp_gso_segment will call pskb_may_pull (th->doff * 4) before use.
    
    - Match the gso_type against the ip_proto found by the flow dissector.
    
    Fixes: bfd5f4a3d605 ("packet: Add GSO/csum offload support.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73090de570e22c1e41a87b507abc58ad286e100d
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat May 2 20:09:25 2020 -0700

    net_sched: sch_skbprio: add message validation to skbprio_change()
    
    [ Upstream commit 2761121af87de45951989a0adada917837d8fa82 ]
    
    Do not assume the attribute has the right size.
    
    Fixes: aea5f654e6b7 ("net/sched: add skbprio scheduler")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1aebe1c0fefadc860ab37c8db4eb355d9684de94
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Sun Apr 26 09:22:06 2020 +0300

    net: phy: marvell10g: fix temperature sensor on 2110
    
    [ Upstream commit c3e302edca2457bbd0c958c445a7538fbf6a6ac8 ]
    
    Read the temperature sensor register from the correct location for the
    88E2110 PHY. There is no enable/disable bit on 2110, so make
    mv3310_hwmon_config() run on 88X3310 only.
    
    Fixes: 62d01535474b61 ("net: phy: marvell10g: add support for the 88x2110 PHY")
    Cc: Maxime Chevallier <maxime.chevallier@bootlin.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Reviewed-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3544c992056036e617bba24cc5f16ad651022e03
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon May 4 11:36:02 2020 +0300

    net/mlx4_core: Fix use of ENOSPC around mlx4_counter_alloc()
    
    [ Upstream commit 40e473071dbad04316ddc3613c3a3d1c75458299 ]
    
    When ENOSPC is set the idx is still valid and gets set to the global
    MLX4_SINK_COUNTER_INDEX.  However gcc's static analysis cannot tell that
    ENOSPC is impossible from mlx4_cmd_imm() and gives this warning:
    
    drivers/net/ethernet/mellanox/mlx4/main.c:2552:28: warning: 'idx' may be
    used uninitialized in this function [-Wmaybe-uninitialized]
     2552 |    priv->def_counter[port] = idx;
    
    Also, when ENOSPC is returned mlx4_allocate_default_counters should not
    fail.
    
    Fixes: 6de5f7f6a1fa ("net/mlx4_core: Allocate default counter per port")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad3224f88eedea955d692327895f24ec8b69532d
Author: Scott Dial <scott@scottdial.com>
Date:   Fri Apr 24 18:51:08 2020 -0400

    net: macsec: preserve ingress frame ordering
    
    [ Upstream commit ab046a5d4be4c90a3952a0eae75617b49c0cb01b ]
    
    MACsec decryption always occurs in a softirq context. Since
    the FPU may not be usable in the softirq context, the call to
    decrypt may be scheduled on the cryptd work queue. The cryptd
    work queue does not provide ordering guarantees. Therefore,
    preserving order requires masking out ASYNC implementations
    of gcm(aes).
    
    For instance, an Intel CPU with AES-NI makes available the
    generic-gcm-aesni driver from the aesni_intel module to
    implement gcm(aes). However, this implementation requires
    the FPU, so it is not always available to use from a softirq
    context, and will fallback to the cryptd work queue, which
    does not preserve frame ordering. With this change, such a
    system would select gcm_base(ctr(aes-aesni),ghash-generic).
    While the aes-aesni implementation prefers to use the FPU, it
    will fallback to the aes-asm implementation if unavailable.
    
    By using a synchronous version of gcm(aes), the decryption
    will complete before returning from crypto_aead_decrypt().
    Therefore, the macsec_decrypt_done() callback will be called
    before returning from macsec_decrypt(). Thus, the order of
    calls to macsec_post_decrypt() for the frames is preserved.
    
    While it's presumable that the pure AES-NI version of gcm(aes)
    is more performant, the hybrid solution is capable of gigabit
    speeds on modest hardware. Regardless, preserving the order
    of frames is paramount for many network protocols (e.g.,
    triggering TCP retries). Within the MACsec driver itself, the
    replay protection is tripped by the out-of-order frames, and
    can cause frames to be dropped.
    
    This bug has been present in this code since it was added in
    v4.6, however it may not have been noticed since not all CPUs
    have FPU offload available. Additionally, the bug manifests
    as occasional out-of-order packets that are easily
    misattributed to other network phenomena.
    
    When this code was added in v4.6, the crypto/gcm.c code did
    not restrict selection of the ghash function based on the
    ASYNC flag. For instance, x86 CPUs with PCLMULQDQ would
    select the ghash-clmulni driver instead of ghash-generic,
    which submits to the cryptd work queue if the FPU is busy.
    However, this bug was was corrected in v4.8 by commit
    b30bdfa86431afbafe15284a3ad5ac19b49b88e3, and was backported
    all the way back to the v3.14 stable branch, so this patch
    should be applicable back to the v4.6 stable branch.
    
    Signed-off-by: Scott Dial <scott@scottdial.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d7ea7f0afd71e911cdc77c45ac8635bd9fde133
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Sun May 3 20:32:26 2020 +0800

    net: macb: fix an issue about leak related system resources
    
    [ Upstream commit b959c77dac09348955f344104c6a921ebe104753 ]
    
    A call of the function macb_init() can fail in the function
    fu540_c000_init. The related system resources were not released
    then. use devm_platform_ioremap_resource() to replace ioremap()
    to fix it.
    
    Fixes: c218ad559020ff9 ("macb: Add support for SiFive FU540-C000")
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Yash Shah <yash.shah@sifive.com>
    Suggested-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Suggested-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18ad8a2fe70e52704100472222d2ba6930b2df19
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sun May 3 20:50:57 2020 -0700

    net: dsa: Do not make user port errors fatal
    
    [ Upstream commit 86f8b1c01a0a537a73d2996615133be63cdf75db ]
    
    Prior to 1d27732f411d ("net: dsa: setup and teardown ports"), we would
    not treat failures to set-up an user port as fatal, but after this
    commit we would, which is a regression for some systems where interfaces
    may be declared in the Device Tree, but the underlying hardware may not
    be present (pluggable daughter cards for instance).
    
    Fixes: 1d27732f411d ("net: dsa: setup and teardown ports")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1ec21a6dac6ee3baa57b4797cea8dbd1f245eaa
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon May 4 13:18:06 2020 -0700

    net: dsa: Do not leave DSA master with NULL netdev_ops
    
    [ Upstream commit 050569fc8384c8056bacefcc246bcb2dfe574936 ]
    
    When ndo_get_phys_port_name() for the CPU port was added we introduced
    an early check for when the DSA master network device in
    dsa_master_ndo_setup() already implements ndo_get_phys_port_name(). When
    we perform the teardown operation in dsa_master_ndo_teardown() we would
    not be checking that cpu_dp->orig_ndo_ops was successfully allocated and
    non-NULL initialized.
    
    With network device drivers such as virtio_net, this leads to a NPD as
    soon as the DSA switch hanging off of it gets torn down because we are
    now assigning the virtio_net device's netdev_ops a NULL pointer.
    
    Fixes: da7b9e9b00d4 ("net: dsa: Add ndo_get_phys_port_name() for CPU port")
    Reported-by: Allen Pais <allen.pais@oracle.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Allen Pais <allen.pais@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da98475c7edafa5d80390cdf39041eb9e87eb1c2
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Apr 30 22:38:45 2020 +0300

    net: bridge: vlan: Add a schedule point during VLAN processing
    
    [ Upstream commit 7979457b1d3a069cd857f5bd69e070e30223dd0c ]
    
    User space can request to delete a range of VLANs from a bridge slave in
    one netlink request. For each deleted VLAN the FDB needs to be traversed
    in order to flush all the affected entries.
    
    If a large range of VLANs is deleted and the number of FDB entries is
    large or the FDB lock is contented, it is possible for the kernel to
    loop through the deleted VLANs for a long time. In case preemption is
    disabled, this can result in a soft lockup.
    
    Fix this by adding a schedule point after each VLAN is deleted to yield
    the CPU, if needed. This is safe because the VLANs are traversed in
    process context.
    
    Fixes: bdced7ef7838 ("bridge: support for multiple vlans and vlan ranges in setlink and dellink requests")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Stefan Priebe - Profihost AG <s.priebe@profihost.ag>
    Tested-by: Stefan Priebe - Profihost AG <s.priebe@profihost.ag>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b57cc37465ef89b7c18ef73cf544f05b39845921
Author: Roman Mashak <mrv@mojatatu.com>
Date:   Fri May 1 21:34:18 2020 -0400

    neigh: send protocol value in neighbor create notification
    
    [ Upstream commit 38212bb31fe923d0a2c6299bd2adfbb84cddef2a ]
    
    When a new neighbor entry has been added, event is generated but it does not
    include protocol, because its value is assigned after the event notification
    routine has run, so move protocol assignment code earlier.
    
    Fixes: df9b0e30d44c ("neighbor: Add protocol attribute")
    Cc: David Ahern <dsahern@gmail.com>
    Signed-off-by: Roman Mashak <mrv@mojatatu.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 871b1ca034ce6a9b3b3e0782ca8d38d185f762cd
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Mon Apr 27 18:05:47 2020 +0300

    mlxsw: spectrum_acl_tcam: Position vchunk in a vregion list properly
    
    [ Upstream commit 6ef4889fc0b3aa6ab928e7565935ac6f762cee6e ]
    
    Vregion helpers to get min and max priority depend on the correct
    ordering of vchunks in the vregion list. However, the current code
    always adds new chunk to the end of the list, no matter what the
    priority is. Fix this by finding the correct place in the list and put
    vchunk there.
    
    Fixes: 22a677661f56 ("mlxsw: spectrum: Introduce ACL core with simple TCAM implementation")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a6cc7d8af5f2e23ce177da1c0eaa9f605a422fc
Author: David Ahern <dsahern@kernel.org>
Date:   Fri May 1 08:53:08 2020 -0600

    ipv6: Use global sernum for dst validation with nexthop objects
    
    [ Upstream commit 8f34e53b60b337e559f1ea19e2780ff95ab2fa65 ]
    
    Nik reported a bug with pcpu dst cache when nexthop objects are
    used illustrated by the following:
        $ ip netns add foo
        $ ip -netns foo li set lo up
        $ ip -netns foo addr add 2001:db8:11::1/128 dev lo
        $ ip netns exec foo sysctl net.ipv6.conf.all.forwarding=1
        $ ip li add veth1 type veth peer name veth2
        $ ip li set veth1 up
        $ ip addr add 2001:db8:10::1/64 dev veth1
        $ ip li set dev veth2 netns foo
        $ ip -netns foo li set veth2 up
        $ ip -netns foo addr add 2001:db8:10::2/64 dev veth2
        $ ip -6 nexthop add id 100 via 2001:db8:10::2 dev veth1
        $ ip -6 route add 2001:db8:11::1/128 nhid 100
    
        Create a pcpu entry on cpu 0:
        $ taskset -a -c 0 ip -6 route get 2001:db8:11::1
    
        Re-add the route entry:
        $ ip -6 ro del 2001:db8:11::1
        $ ip -6 route add 2001:db8:11::1/128 nhid 100
    
        Route get on cpu 0 returns the stale pcpu:
        $ taskset -a -c 0 ip -6 route get 2001:db8:11::1
        RTNETLINK answers: Network is unreachable
    
        While cpu 1 works:
        $ taskset -a -c 1 ip -6 route get 2001:db8:11::1
        2001:db8:11::1 from :: via 2001:db8:10::2 dev veth1 src 2001:db8:10::1 metric 1024 pref medium
    
    Conversion of FIB entries to work with external nexthop objects
    missed an important difference between IPv4 and IPv6 - how dst
    entries are invalidated when the FIB changes. IPv4 has a per-network
    namespace generation id (rt_genid) that is bumped on changes to the FIB.
    Checking if a dst_entry is still valid means comparing rt_genid in the
    rtable to the current value of rt_genid for the namespace.
    
    IPv6 also has a per network namespace counter, fib6_sernum, but the
    count is saved per fib6_node. With the per-node counter only dst_entries
    based on fib entries under the node are invalidated when changes are
    made to the routes - limiting the scope of invalidations. IPv6 uses a
    reference in the rt6_info, 'from', to track the corresponding fib entry
    used to create the dst_entry. When validating a dst_entry, the 'from'
    is used to backtrack to the fib6_node and check the sernum of it to the
    cookie passed to the dst_check operation.
    
    With the inline format (nexthop definition inline with the fib6_info),
    dst_entries cached in the fib6_nh have a 1:1 correlation between fib
    entries, nexthop data and dst_entries. With external nexthops, IPv6
    looks more like IPv4 which means multiple fib entries across disparate
    fib6_nodes can all reference the same fib6_nh. That means validation
    of dst_entries based on external nexthops needs to use the IPv4 format
    - the per-network namespace counter.
    
    Add sernum to rt6_info and set it when creating a pcpu dst entry. Update
    rt6_get_cookie to return sernum if it is set and update dst_check for
    IPv6 to look for sernum set and based the check on it if so. Finally,
    rt6_get_pcpu_route needs to validate the cached entry before returning
    a pcpu entry (similar to the rt_cache_valid calls in __mkroute_input and
    __mkroute_output for IPv4).
    
    This problem only affects routes using the new, external nexthops.
    
    Thanks to the kbuild test robot for catching the IS_ENABLED needed
    around rt_genid_ipv6 before I sent this out.
    
    Fixes: 5b98324ebe29 ("ipv6: Allow routes to use nexthop objects")
    Reported-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Reviewed-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Tested-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 162a9f1cfc3bc0dcf52e4f1b7ffd63ab8020151d
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 12:40:25 2020 -0700

    fq_codel: fix TCA_FQ_CODEL_DROP_BATCH_SIZE sanity checks
    
    [ Upstream commit 14695212d4cd8b0c997f6121b6df8520038ce076 ]
    
    My intent was to not let users set a zero drop_batch_size,
    it seems I once again messed with min()/max().
    
    Fixes: 9d18562a2278 ("fq_codel: add batch ability to fq_codel_drop()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 046f1df74e4263e9f3611cc20fec20661bdf0997
Author: Julia Lawall <Julia.Lawall@inria.fr>
Date:   Thu Apr 30 21:51:32 2020 +0200

    dp83640: reverse arguments to list_add_tail
    
    [ Upstream commit 865308373ed49c9fb05720d14cbf1315349b32a9 ]
    
    In this code, it appears that phyter_clocks is a list head, based on
    the previous list_for_each, and that clock->list is intended to be a
    list element, given that it has just been initialized in
    dp83640_clock_init.  Accordingly, switch the arguments to
    list_add_tail, which takes the list head as the second argument.
    
    Fixes: cb646e2b02b27 ("ptp: Added a clock driver for the National Semiconductor PHYTER.")
    Signed-off-by: Julia Lawall <Julia.Lawall@inria.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb32f450a107df6432e1620bcbb6665efd658e54
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Apr 28 19:01:58 2020 -0700

    devlink: fix return value after hitting end in region read
    
    [ Upstream commit 610a9346c138b9c2c93d38bf5f3728e74ae9cbd5 ]
    
    Commit d5b90e99e1d5 ("devlink: report 0 after hitting end in region read")
    fixed region dump, but region read still returns a spurious error:
    
    $ devlink region read netdevsim/netdevsim1/dummy snapshot 0 addr 0 len 128
    0000000000000000 a6 f4 c4 1c 21 35 95 a6 9d 34 c3 5b 87 5b 35 79
    0000000000000010 f3 a0 d7 ee 4f 2f 82 7f c6 dd c4 f6 a5 c3 1b ae
    0000000000000020 a4 fd c8 62 07 59 48 03 70 3b c7 09 86 88 7f 68
    0000000000000030 6f 45 5d 6d 7d 0e 16 38 a9 d0 7a 4b 1e 1e 2e a6
    0000000000000040 e6 1d ae 06 d6 18 00 85 ca 62 e8 7e 11 7e f6 0f
    0000000000000050 79 7e f7 0f f3 94 68 bd e6 40 22 85 b6 be 6f b1
    0000000000000060 af db ef 5e 34 f0 98 4b 62 9a e3 1b 8b 93 fc 17
    devlink answers: Invalid argument
    0000000000000070 61 e8 11 11 66 10 a5 f7 b1 ea 8d 40 60 53 ed 12
    
    This is a minimal fix, I'll follow up with a restructuring
    so we don't have two checks for the same condition.
    
    Fixes: fdd41ec21e15 ("devlink: Return right error code in case of errors for region read")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 966880d62305c2026c6235b2957d89eb627c8f0a
Author: Aya Levin <ayal@mellanox.com>
Date:   Mon May 4 11:27:46 2020 +0300

    devlink: Fix reporter's recovery condition
    
    [ Upstream commit bea0c5c942d3b4e9fb6ed45f6a7de74c6b112437 ]
    
    Devlink health core conditions the reporter's recovery with the
    expiration of the grace period. This is not relevant for the first
    recovery. Explicitly demand that the grace period will only apply to
    recoveries other than the first.
    
    Fixes: c8e1da0bf923 ("devlink: Add health report functionality")
    Signed-off-by: Aya Levin <ayal@mellanox.com>
    Reviewed-by: Moshe Shemesh <moshe@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29ad780675bbe5730acb57379f4d11cb33885541
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Thu Apr 30 00:22:19 2020 +0530

    cxgb4: fix EOTID leak when disabling TC-MQPRIO offload
    
    [ Upstream commit 69422a7e5d578aab277091f4ebb7c1b387f3e355 ]
    
    Under heavy load, the EOTID termination FLOWC request fails to get
    enqueued to the end of the Tx ring due to lack of credits. This
    results in EOTID leak.
    
    When disabling TC-MQPRIO offload, the link is already brought down
    to cleanup EOTIDs. So, flush any pending enqueued skbs that can't be
    sent outside the wire, to make room for FLOWC request. Also, move the
    FLOWC descriptor consumption logic closer to when the FLOWC request is
    actually posted to hardware.
    
    Fixes: 0e395b3cb1fb ("cxgb4: add FLOWC based QoS offload")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d5056cedde2fa2643d5dcf9df67b006ac3678bb
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Apr 27 13:51:20 2020 +0300

    net: macb: Fix runtime PM refcounting
    
    [ Upstream commit 0ce205d4660c312cdeb4a81066616dcc6f3799c4 ]
    
    The commit e6a41c23df0d, while trying to fix an issue,
    
        ("net: macb: ensure interface is not suspended on at91rm9200")
    
    introduced a refcounting regression, because in error case refcounter
    must be balanced. Fix it by calling pm_runtime_put_noidle() in error case.
    
    While here, fix the same mistake in other couple of places.
    
    Fixes: e6a41c23df0d ("net: macb: ensure interface is not suspended on at91rm9200")
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0525002add3d82845985f7e1b644fe01e20a0fd
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Apr 25 14:49:09 2020 +0900

    tracing/kprobes: Fix a double initialization typo
    
    [ Upstream commit dcbd21c9fca5e954fd4e3d91884907eb6d47187e ]
    
    Fix a typo that resulted in an unnecessary double
    initialization to addr.
    
    Link: http://lkml.kernel.org/r/158779374968.6082.2337484008464939919.stgit@devnote2
    
    Cc: Tom Zanussi <zanussi@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: c7411a1a126f ("tracing/kprobe: Check whether the non-suffixed symbol is notrace")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e015f333892b802073a910ce1102140a29f4a099
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Wed May 6 15:44:02 2020 -0700

    nvme: fix possible hang when ns scanning fails during error recovery
    
    [ Upstream commit 59c7c3caaaf8750df4ec3255082f15eb4e371514 ]
    
    When the controller is reconnecting, the host fails I/O and admin
    commands as the host cannot reach the controller. ns scanning may
    revalidate namespaces during that period and it is wrong to remove
    namespaces due to these failures as we may hang (see 205da2434301).
    
    One command that may fail is nvme_identify_ns_descs. Since we return
    success due to having ns identify descriptor list optional, we continue
    to compare ns identifiers in nvme_revalidate_disk, obviously fail and
    return -ENODEV to nvme_validate_ns, which will remove the namespace.
    
    Exactly what we don't want to happen.
    
    Fixes: 22802bf742c2 ("nvme: Namepace identification descriptor list is optional")
    Tested-by: Anton Eidelman <anton@lightbitslabs.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 725758bb1a81b0b29c870bf7cdcf0ecb58d1aff7
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Mar 25 14:19:35 2020 +0100

    nvme: refactor nvme_identify_ns_descs error handling
    
    [ Upstream commit fb314eb0cbb2e11540d1ae1a7b28346397f621ef ]
    
    Move the handling of an error into the function from the caller, and
    only do it for an actual error on the admin command itself, not the
    command parsing, as that should be enough to deal with devices claiming
    a bogus version compliance.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0af71d4ddbc3c01d55e1d1a2eed7758cb556210
Author: Eric Whitney <enwlinux@gmail.com>
Date:   Thu Mar 19 11:00:28 2020 -0400

    ext4: disable dioread_nolock whenever delayed allocation is disabled
    
    [ Upstream commit c8980e1980ccdc2229aa2218d532ddc62e0aabe5 ]
    
    The patch "ext4: make dioread_nolock the default" (244adf6426ee) causes
    generic/422 to fail when run in kvm-xfstests' ext3conv test case.  This
    applies both the dioread_nolock and nodelalloc mount options, a
    combination not previously tested by kvm-xfstests.  The failure occurs
    because the dioread_nolock code path splits a previously fallocated
    multiblock extent into a series of single block extents when overwriting
    a portion of that extent.  That causes allocation of an extent tree leaf
    node and a reshuffling of extents.  Once writeback is completed, the
    individual extents are recombined into a single extent, the extent is
    moved again, and the leaf node is deleted.  The difference in block
    utilization before and after writeback due to the leaf node triggers the
    failure.
    
    The original reason for this behavior was to avoid ENOSPC when handling
    I/O completions during writeback in the dioread_nolock code paths when
    delayed allocation is disabled.  It may no longer be necessary, because
    code was added in the past to reserve extra space to solve this problem
    when delayed allocation is enabled, and this code may also apply when
    delayed allocation is disabled.  Until this can be verified, don't use
    the dioread_nolock code paths if delayed allocation is disabled.
    
    Signed-off-by: Eric Whitney <enwlinux@gmail.com>
    Link: https://lore.kernel.org/r/20200319150028.24592-1-enwlinux@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1c6b8b73003a585bf3eebd556716c7e62aee5e9
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Sat Mar 28 01:37:44 2020 +0530

    ext4: don't set dioread_nolock by default for blocksize < pagesize
    
    commit 626b035b816b61a7a7b4d2205a6807e2f11a18c1 upstream.
    
    Currently on calling echo 3 > drop_caches on host machine, we see
    FS corruption in the guest. This happens on Power machine where
    blocksize < pagesize.
    
    So as a temporary workaound don't enable dioread_nolock by default
    for blocksize < pagesize until we identify the root cause.
    
    Also emit a warning msg in case if this mount option is manually
    enabled for blocksize < pagesize.
    
    Reported-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Link: https://lore.kernel.org/r/20200327200744.12473-1-riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89a92b314b72f76a1ab30583bf872bcecf9c81f1
Author: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Date:   Mon May 4 16:27:28 2020 +0200

    tty: xilinx_uartps: Fix missing id assignment to the console
    
    [ Upstream commit 2ae11c46d5fdc46cb396e35911c713d271056d35 ]
    
    When serial console has been assigned to ttyPS1 (which is serial1 alias)
    console index is not updated property and pointing to index -1 (statically
    initialized) which ends up in situation where nothing has been printed on
    the port.
    
    The commit 18cc7ac8a28e ("Revert "serial: uartps: Register own uart console
    and driver structures"") didn't contain this line which was removed by
    accident.
    
    Fixes: 18cc7ac8a28e ("Revert "serial: uartps: Register own uart console and driver structures"")
    Signed-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Link: https://lore.kernel.org/r/ed3111533ef5bd342ee5ec504812240b870f0853.1588602446.git.michal.simek@xilinx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cce929e49a31360815a74c3f280c6c13c3c8c5c8
Author: Nicolas Pitre <nico@fluxnic.net>
Date:   Sat May 2 11:01:07 2020 -0400

    vt: fix unicode console freeing with a common interface
    
    [ Upstream commit 57d38f26d81e4275748b69372f31df545dcd9b71 ]
    
    By directly using kfree() in different places we risk missing one if
    it is switched to using vfree(), especially if the corresponding
    vmalloc() is hidden away within a common abstraction.
    
    Oh wait, that's exactly what happened here.
    
    So let's fix this by creating a common abstraction for the free case
    as well.
    
    Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
    Reported-by: syzbot+0bfda3ade1ee9288a1be@syzkaller.appspotmail.com
    Fixes: 9a98e7a80f95 ("vt: don't use kmalloc() for the unicode screen buffer")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://lore.kernel.org/r/nycvar.YSQ.7.76.2005021043110.2671@knanqh.ubzr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1ecb0a9efdac4ac7ef84abbdbf78196b0fccdf6
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Apr 24 15:36:22 2020 +0800

    drm/amdgpu: drop redundant cg/pg ungate on runpm enter
    
    [ Upstream commit f7b52890daba570bc8162d43c96b5583bbdd4edd ]
    
    CG/PG ungate is already performed in ip_suspend_phase1. Otherwise,
    the CG/PG ungate will be performed twice. That will cause gfxoff
    disablement is performed twice also on runpm enter while gfxoff
    enablemnt once on rump exit. That will put gfxoff into disabled
    state.
    
    Fixes: b2a7e9735ab286 ("drm/amdgpu: fix the hw hang during perform system reboot and reset")
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68adba5597a52943b3feb63dc53e75e0fc77fa4e
Author: Evan Quan <evan.quan@amd.com>
Date:   Fri Apr 24 15:32:41 2020 +0800

    drm/amdgpu: move kfd suspend after ip_suspend_phase1
    
    [ Upstream commit c457a273e118bb96e1db8d1825f313e6cafe4258 ]
    
    This sequence change should be safe as what did in ip_suspend_phase1
    is to suspend DCE only. And this is a prerequisite for coming
    redundant cg/pg ungate dropping.
    
    Fixes: 487eca11a321ef ("drm/amdgpu: fix gfx hang during suspend with video playback (v2)")
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98792c6e227bea72c39fedbc5205491ded553971
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:03:47 2020 +1000

    USB: serial: qcserial: Add DW5816e support
    
    commit 78d6de3cfbd342918d31cf68d0d2eda401338aef upstream.
    
    Add support for Dell Wireless 5816e to drivers/usb/serial/qcserial.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4af05950da09840043c52b73c11c9ba6170b5122
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Thu Apr 9 10:18:10 2020 +0300

    thunderbolt: Check return value of tb_sw_read() in usb4_switch_op()
    
    commit c3bf9930921b33edb31909006607e478751a6f5e upstream.
    
    The function misses checking return value of tb_sw_read() before it
    accesses the value that was read. Fix this by checking the return value
    first.
    
    Fixes: b04079837b20 ("thunderbolt: Add initial support for USB4")
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Yehezkel Bernat <yehezkelshb@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
