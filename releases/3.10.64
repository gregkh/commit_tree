commit 46a490cc58e717f8058b878635c11535583840d2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jan 8 09:58:30 2015 -0800

    Linux 3.10.64

commit 5f55aee3b8880bca80c64872eadbaea1632bd4ac
Author: Filipe Manana <fdmanana@suse.com>
Date:   Sun Dec 7 21:31:47 2014 +0000

    Btrfs: fix fs corruption on transaction abort if device supports discard
    
    commit 678886bdc6378c1cbd5072da2c5a3035000214e3 upstream.
    
    When we abort a transaction we iterate over all the ranges marked as dirty
    in fs_info->freed_extents[0] and fs_info->freed_extents[1], clear them
    from those trees, add them back (unpin) to the free space caches and, if
    the fs was mounted with "-o discard", perform a discard on those regions.
    Also, after adding the regions to the free space caches, a fitrim ioctl call
    can see those ranges in a block group's free space cache and perform a discard
    on the ranges, so the same issue can happen without "-o discard" as well.
    
    This causes corruption, affecting one or multiple btree nodes (in the worst
    case leaving the fs unmountable) because some of those ranges (the ones in
    the fs_info->pinned_extents tree) correspond to btree nodes/leafs that are
    referred by the last committed super block - breaking the rule that anything
    that was committed by a transaction is untouched until the next transaction
    commits successfully.
    
    I ran into this while running in a loop (for several hours) the fstest that
    I recently submitted:
    
      [PATCH] fstests: add btrfs test to stress chunk allocation/removal and fstrim
    
    The corruption always happened when a transaction aborted and then fsck complained
    like this:
    
       _check_btrfs_filesystem: filesystem on /dev/sdc is inconsistent
       *** fsck.btrfs output ***
       Check tree block failed, want=94945280, have=0
       Check tree block failed, want=94945280, have=0
       Check tree block failed, want=94945280, have=0
       Check tree block failed, want=94945280, have=0
       Check tree block failed, want=94945280, have=0
       read block failed check_tree_block
       Couldn't open file system
    
    In this case 94945280 corresponded to the root of a tree.
    Using frace what I observed was the following sequence of steps happened:
    
       1) transaction N started, fs_info->pinned_extents pointed to
          fs_info->freed_extents[0];
    
       2) node/eb 94945280 is created;
    
       3) eb is persisted to disk;
    
       4) transaction N commit starts, fs_info->pinned_extents now points to
          fs_info->freed_extents[1], and transaction N completes;
    
       5) transaction N + 1 starts;
    
       6) eb is COWed, and btrfs_free_tree_block() called for this eb;
    
       7) eb range (94945280 to 94945280 + 16Kb) is added to
          fs_info->pinned_extents (fs_info->freed_extents[1]);
    
       8) Something goes wrong in transaction N + 1, like hitting ENOSPC
          for example, and the transaction is aborted, turning the fs into
          readonly mode. The stack trace I got for example:
    
          [112065.253935]  [<ffffffff8140c7b6>] dump_stack+0x4d/0x66
          [112065.254271]  [<ffffffff81042984>] warn_slowpath_common+0x7f/0x98
          [112065.254567]  [<ffffffffa0325990>] ? __btrfs_abort_transaction+0x50/0x10b [btrfs]
          [112065.261674]  [<ffffffff810429e5>] warn_slowpath_fmt+0x48/0x50
          [112065.261922]  [<ffffffffa032949e>] ? btrfs_free_path+0x26/0x29 [btrfs]
          [112065.262211]  [<ffffffffa0325990>] __btrfs_abort_transaction+0x50/0x10b [btrfs]
          [112065.262545]  [<ffffffffa036b1d6>] btrfs_remove_chunk+0x537/0x58b [btrfs]
          [112065.262771]  [<ffffffffa033840f>] btrfs_delete_unused_bgs+0x1de/0x21b [btrfs]
          [112065.263105]  [<ffffffffa0343106>] cleaner_kthread+0x100/0x12f [btrfs]
          (...)
          [112065.264493] ---[ end trace dd7903a975a31a08 ]---
          [112065.264673] BTRFS: error (device sdc) in btrfs_remove_chunk:2625: errno=-28 No space left
          [112065.264997] BTRFS info (device sdc): forced readonly
    
       9) The clear kthread sees that the BTRFS_FS_STATE_ERROR bit is set in
          fs_info->fs_state and calls btrfs_cleanup_transaction(), which in
          turn calls btrfs_destroy_pinned_extent();
    
       10) Then btrfs_destroy_pinned_extent() iterates over all the ranges
           marked as dirty in fs_info->freed_extents[], and for each one
           it calls discard, if the fs was mounted with "-o discard", and
           adds the range to the free space cache of the respective block
           group;
    
       11) btrfs_trim_block_group(), invoked from the fitrim ioctl code path,
           sees the free space entries and performs a discard;
    
       12) After an umount and mount (or fsck), our eb's location on disk was full
           of zeroes, and it should have been untouched, because it was marked as
           dirty in the fs_info->pinned_extents tree, and therefore used by the
           trees that the last committed superblock points to.
    
    Fix this by not performing a discard and not adding the ranges to the free space
    caches - it's useless from this point since the fs is now in readonly mode and
    we won't write free space caches to disk anymore (otherwise we would leak space)
    nor any new superblock. By not adding the ranges to the free space caches, it
    prevents other code paths from allocating that space and write to it as well,
    therefore being safer and simpler.
    
    This isn't a new problem, as it's been present since 2011 (git commit
    acce952b0263825da32cf10489413dec78053347).
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Chris Mason <clm@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8bf9ec799b05f5a083e786894e276cdefea470a
Author: Josef Bacik <jbacik@fb.com>
Date:   Fri Nov 14 16:16:30 2014 -0500

    Btrfs: do not move em to modified list when unpinning
    
    commit a28046956c71985046474283fa3bcd256915fb72 upstream.
    
    We use the modified list to keep track of which extents have been modified so we
    know which ones are candidates for logging at fsync() time.  Newly modified
    extents are added to the list at modification time, around the same time the
    ordered extent is created.  We do this so that we don't have to wait for ordered
    extents to complete before we know what we need to log.  The problem is when
    something like this happens
    
    log extent 0-4k on inode 1
    copy csum for 0-4k from ordered extent into log
    sync log
    commit transaction
    log some other extent on inode 1
    ordered extent for 0-4k completes and adds itself onto modified list again
    log changed extents
    see ordered extent for 0-4k has already been logged
            at this point we assume the csum has been copied
    sync log
    crash
    
    On replay we will see the extent 0-4k in the log, drop the original 0-4k extent
    which is the same one that we are replaying which also drops the csum, and then
    we won't find the csum in the log for that bytenr.  This of course causes us to
    have errors about not having csums for certain ranges of our inode.  So remove
    the modified list manipulation in unpin_extent_cache, any modified extents
    should have been added well before now, and we don't want them re-logged.  This
    fixes my test that I could reliably reproduce this problem with.  Thanks,
    
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Chris Mason <clm@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66012982c8e3344b6fc94defba2909356c607a6d
Author: Michael Halcrow <mhalcrow@google.com>
Date:   Wed Nov 26 09:09:16 2014 -0800

    eCryptfs: Remove buggy and unnecessary write in file name decode routine
    
    commit 942080643bce061c3dd9d5718d3b745dcb39a8bc upstream.
    
    Dmitry Chernenkov used KASAN to discover that eCryptfs writes past the
    end of the allocated buffer during encrypted filename decoding. This
    fix corrects the issue by getting rid of the unnecessary 0 write when
    the current bit offset is 2.
    
    Signed-off-by: Michael Halcrow <mhalcrow@google.com>
    Reported-by: Dmitry Chernenkov <dmitryc@google.com>
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed775f3161684770d506e150073d9f271335d5d3
Author: Tyler Hicks <tyhicks@canonical.com>
Date:   Tue Oct 7 15:51:55 2014 -0500

    eCryptfs: Force RO mount when encrypted view is enabled
    
    commit 332b122d39c9cbff8b799007a825d94b2e7c12f2 upstream.
    
    The ecryptfs_encrypted_view mount option greatly changes the
    functionality of an eCryptfs mount. Instead of encrypting and decrypting
    lower files, it provides a unified view of the encrypted files in the
    lower filesystem. The presence of the ecryptfs_encrypted_view mount
    option is intended to force a read-only mount and modifying files is not
    supported when the feature is in use. See the following commit for more
    information:
    
      e77a56d [PATCH] eCryptfs: Encrypted passthrough
    
    This patch forces the mount to be read-only when the
    ecryptfs_encrypted_view mount option is specified by setting the
    MS_RDONLY flag on the superblock. Additionally, this patch removes some
    broken logic in ecryptfs_open() that attempted to prevent modifications
    of files when the encrypted view feature was in use. The check in
    ecryptfs_open() was not sufficient to prevent file modifications using
    system calls that do not operate on a file descriptor.
    
    Signed-off-by: Tyler Hicks <tyhicks@canonical.com>
    Reported-by: Priya Bansal <p.bansal@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fdeca1b0acd9790cdd5891a76bb6dfb707d2a1c
Author: Jan Kara <jack@suse.cz>
Date:   Fri Dec 19 12:21:47 2014 +0100

    udf: Verify symlink size before loading it
    
    commit a1d47b262952a45aae62bd49cfaf33dd76c11a2c upstream.
    
    UDF specification allows arbitrarily large symlinks. However we support
    only symlinks at most one block large. Check the length of the symlink
    so that we don't access memory beyond end of the symlink block.
    
    Reported-by: Carl Henrik Lunde <chlunde@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12279351a42d51638a21ede8a3f6c62aea26491e
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Wed Dec 10 15:55:25 2014 -0800

    exit: pidns: alloc_pid() leaks pid_namespace if child_reaper is exiting
    
    commit 24c037ebf5723d4d9ab0996433cee4f96c292a4d upstream.
    
    alloc_pid() does get_pid_ns() beforehand but forgets to put_pid_ns() if it
    fails because disable_pid_allocation() was called by the exiting
    child_reaper.
    
    We could simply move get_pid_ns() down to successful return, but this fix
    tries to be as trivial as possible.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Reviewed-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Aaron Tomlin <atomlin@redhat.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@ubuntu.com>
    Cc: Sterling Alexander <stalexan@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb22aba0ee2bc330033b85447b4d44b1501ee75f
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 10 15:52:22 2014 -0800

    ncpfs: return proper error from NCP_IOC_SETROOT ioctl
    
    commit a682e9c28cac152e6e54c39efcf046e0c8cfcf63 upstream.
    
    If some error happens in NCP_IOC_SETROOT ioctl, the appropriate error
    return value is then (in most cases) just overwritten before we return.
    This can result in reporting success to userspace although error happened.
    
    This bug was introduced by commit 2e54eb96e2c8 ("BKL: Remove BKL from
    ncpfs").  Propagate the errors correctly.
    
    Coverity id: 1226925.
    
    Fixes: 2e54eb96e2c80 ("BKL: Remove BKL from ncpfs")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Cc: Petr Vandrovec <petr@vandrovec.name>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d53f1f7166c4bc5e936155de143676bf5fc7b0c
Author: Rabin Vincent <rabin.vincent@axis.com>
Date:   Fri Dec 19 13:36:08 2014 +0100

    crypto: af_alg - fix backlog handling
    
    commit 7e77bdebff5cb1e9876c561f69710b9ab8fa1f7e upstream.
    
    If a request is backlogged, it's complete() handler will get called
    twice: once with -EINPROGRESS, and once with the final error code.
    
    af_alg's complete handler, unlike other users, does not handle the
    -EINPROGRESS but instead always completes the completion that recvmsg()
    is waiting on.  This can lead to a return to user space while the
    request is still pending in the driver.  If userspace closes the sockets
    before the requests are handled by the driver, this will lead to
    use-after-frees (and potential crashes) in the kernel due to the tfm
    having been freed.
    
    The crashes can be easily reproduced (for example) by reducing the max
    queue length in cryptod.c and running the following (from
    http://www.chronox.de/libkcapi.html) on AES-NI capable hardware:
    
     $ while true; do kcapi -x 1 -e -c '__ecb-aes-aesni' \
        -k 00000000000000000000000000000000 \
        -p 00000000000000000000000000000000 >/dev/null & done
    
    Signed-off-by: Rabin Vincent <rabin.vincent@axis.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3150a5ae1c08aac6aba8454cb536316a48eecc52
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue Dec 2 13:56:30 2014 -0600

    userns: Unbreak the unprivileged remount tests
    
    commit db86da7cb76f797a1a8b445166a15cb922c6ff85 upstream.
    
    A security fix in caused the way the unprivileged remount tests were
    using user namespaces to break.  Tweak the way user namespaces are
    being used so the test works again.
    
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afb5285388ce7e7623ab9ddb08f287551e70426f
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Dec 5 19:36:04 2014 -0600

    userns: Allow setting gid_maps without privilege when setgroups is disabled
    
    commit 66d2f338ee4c449396b6f99f5e75cd18eb6df272 upstream.
    
    Now that setgroups can be disabled and not reenabled, setting gid_map
    without privielge can now be enabled when setgroups is disabled.
    
    This restores most of the functionality that was lost when unprivileged
    setting of gid_map was removed.  Applications that use this functionality
    will need to check to see if they use setgroups or init_groups, and if they
    don't they can be fixed by simply disabling setgroups before writing to
    gid_map.
    
    Reviewed-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c587ee50ec44a2cf07cd160c214a683608b4d2c
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue Dec 2 12:27:26 2014 -0600

    userns: Add a knob to disable setgroups on a per user namespace basis
    
    commit 9cc46516ddf497ea16e8d7cb986ae03a0f6b92f8 upstream.
    
    - Expose the knob to user space through a proc file /proc/<pid>/setgroups
    
      A value of "deny" means the setgroups system call is disabled in the
      current processes user namespace and can not be enabled in the
      future in this user namespace.
    
      A value of "allow" means the segtoups system call is enabled.
    
    - Descendant user namespaces inherit the value of setgroups from
      their parents.
    
    - A proc file is used (instead of a sysctl) as sysctls currently do
      not allow checking the permissions at open time.
    
    - Writing to the proc file is restricted to before the gid_map
      for the user namespace is set.
    
      This ensures that disabling setgroups at a user namespace
      level will never remove the ability to call setgroups
      from a process that already has that ability.
    
      A process may opt in to the setgroups disable for itself by
      creating, entering and configuring a user namespace or by calling
      setns on an existing user namespace with setgroups disabled.
      Processes without privileges already can not call setgroups so this
      is a noop.  Prodcess with privilege become processes without
      privilege when entering a user namespace and as with any other path
      to dropping privilege they would not have the ability to call
      setgroups.  So this remains within the bounds of what is possible
      without a knob to disable setgroups permanently in a user namespace.
    
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eaab78729f4e689a86ce6bc4e33453ebff9625d
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue Dec 9 14:03:14 2014 -0600

    userns: Rename id_map_mutex to userns_state_mutex
    
    commit f0d62aec931e4ae3333c797d346dc4f188f454ba upstream.
    
    Generalize id_map_mutex so it can be used for more state of a user namespace.
    
    Reviewed-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1821391e5072029118857f6ebb27f3cf66b9f33
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Wed Nov 26 23:22:14 2014 -0600

    userns: Only allow the creator of the userns unprivileged mappings
    
    commit f95d7918bd1e724675de4940039f2865e5eec5fe upstream.
    
    If you did not create the user namespace and are allowed
    to write to uid_map or gid_map you should already have the necessary
    privilege in the parent user namespace to establish any mapping
    you want so this will not affect userspace in practice.
    
    Limiting unprivileged uid mapping establishment to the creator of the
    user namespace makes it easier to verify all credentials obtained with
    the uid mapping can be obtained without the uid mapping without
    privilege.
    
    Limiting unprivileged gid mapping establishment (which is temporarily
    absent) to the creator of the user namespace also ensures that the
    combination of uid and gid can already be obtained without privilege.
    
    This is part of the fix for CVE-2014-8989.
    
    Reviewed-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f028f2d73293b65a5e58ee7468a8683b39fd912c
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Dec 5 18:26:30 2014 -0600

    userns: Check euid no fsuid when establishing an unprivileged uid mapping
    
    commit 80dd00a23784b384ccea049bfb3f259d3f973b9d upstream.
    
    setresuid allows the euid to be set to any of uid, euid, suid, and
    fsuid.  Therefor it is safe to allow an unprivileged user to map
    their euid and use CAP_SETUID privileged with exactly that uid,
    as no new credentials can be obtained.
    
    I can not find a combination of existing system calls that allows setting
    uid, euid, suid, and fsuid from the fsuid making the previous use
    of fsuid for allowing unprivileged mappings a bug.
    
    This is part of a fix for CVE-2014-8989.
    
    Reviewed-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba0922adbd2ccffe444608298ae0506401eac4c3
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Dec 5 18:14:19 2014 -0600

    userns: Don't allow unprivileged creation of gid mappings
    
    commit be7c6dba2332cef0677fbabb606e279ae76652c3 upstream.
    
    As any gid mapping will allow and must allow for backwards
    compatibility dropping groups don't allow any gid mappings to be
    established without CAP_SETGID in the parent user namespace.
    
    For a small class of applications this change breaks userspace
    and removes useful functionality.  This small class of applications
    includes tools/testing/selftests/mount/unprivilged-remount-test.c
    
    Most of the removed functionality will be added back with the addition
    of a one way knob to disable setgroups.  Once setgroups is disabled
    setting the gid_map becomes as safe as setting the uid_map.
    
    For more common applications that set the uid_map and the gid_map
    with privilege this change will have no affect.
    
    This is part of a fix for CVE-2014-8989.
    
    Reviewed-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc9b65e3d7703e6d63875b0b233bbe26a4a513ba
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Dec 5 18:01:11 2014 -0600

    userns: Don't allow setgroups until a gid mapping has been setablished
    
    commit 273d2c67c3e179adb1e74f403d1e9a06e3f841b5 upstream.
    
    setgroups is unique in not needing a valid mapping before it can be called,
    in the case of setgroups(0, NULL) which drops all supplemental groups.
    
    The design of the user namespace assumes that CAP_SETGID can not actually
    be used until a gid mapping is established.  Therefore add a helper function
    to see if the user namespace gid mapping has been established and call
    that function in the setgroups permission check.
    
    This is part of the fix for CVE-2014-8989, being able to drop groups
    without privilege using user namespaces.
    
    Reviewed-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8a0441b542f6d6bd6fda46cc735ae71392cb845
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Dec 5 17:51:47 2014 -0600

    userns: Document what the invariant required for safe unprivileged mappings.
    
    commit 0542f17bf2c1f2430d368f44c8fcf2f82ec9e53e upstream.
    
    The rule is simple.  Don't allow anything that wouldn't be allowed
    without unprivileged mappings.
    
    It was previously overlooked that establishing gid mappings would
    allow dropping groups and potentially gaining permission to files and
    directories that had lesser permissions for a specific group than for
    all other users.
    
    This is the rule needed to fix CVE-2014-8989 and prevent any other
    security issues with new_idmap_permitted.
    
    The reason for this rule is that the unix permission model is old and
    there are programs out there somewhere that take advantage of every
    little corner of it.  So allowing a uid or gid mapping to be
    established without privielge that would allow anything that would not
    be allowed without that mapping will result in expectations from some
    code somewhere being violated.  Violated expectations about the
    behavior of the OS is a long way to say a security issue.
    
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4accc8c8e2dbb1f5ff3d8836244a9423bd5e11a9
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Dec 5 17:19:27 2014 -0600

    groups: Consolidate the setgroups permission checks
    
    commit 7ff4d90b4c24a03666f296c3d4878cd39001e81e upstream.
    
    Today there are 3 instances of setgroups and due to an oversight their
    permission checking has diverged.  Add a common function so that
    they may all share the same permission checking code.
    
    This corrects the current oversight in the current permission checks
    and adds a helper to avoid this in the future.
    
    A user namespace security fix will update this new helper, shortly.
    
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c65d3b05d20c15f4421f853cbd2d41b91a12185e
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Sat Oct 4 14:44:03 2014 -0700

    umount: Disallow unprivileged mount force
    
    commit b2f5d4dc38e034eecb7987e513255265ff9aa1cf upstream.
    
    Forced unmount affects not just the mount namespace but the underlying
    superblock as well.  Restrict forced unmount to the global root user
    for now.  Otherwise it becomes possible a user in a less privileged
    mount namespace to force the shutdown of a superblock of a filesystem
    in a more privileged mount namespace, allowing a DOS attack on root.
    
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 260cb8f431389643881f136d62838334de5fc327
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Aug 22 16:39:03 2014 -0500

    mnt: Update unprivileged remount test
    
    commit 4a44a19b470a886997d6647a77bb3e38dcbfa8c5 upstream.
    
    - MNT_NODEV should be irrelevant except when reading back mount flags,
      no longer specify MNT_NODEV on remount.
    
    - Test MNT_NODEV on devpts where it is meaningful even for unprivileged mounts.
    
    - Add a test to verify that remount of a prexisting mount with the same flags
      is allowed and does not change those flags.
    
    - Cleanup up the definitions of MS_REC, MS_RELATIME, MS_STRICTATIME that are used
      when the code is built in an environment without them.
    
    - Correct the test error messages when tests fail.  There were not 5 tests
      that tested MS_RELATIME.
    
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4be461b16020beb18a0cd680ec74ba63f83b677c
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Wed Aug 13 01:33:38 2014 -0700

    mnt: Implicitly add MNT_NODEV on remount when it was implicitly added by mount
    
    commit 3e1866410f11356a9fd869beb3e95983dc79c067 upstream.
    
    Now that remount is properly enforcing the rule that you can't remove
    nodev at least sandstorm.io is breaking when performing a remount.
    
    It turns out that there is an easy intuitive solution implicitly
    add nodev on remount when nodev was implicitly added on mount.
    
    Tested-by: Cedric Bosdonnat <cbosdonnat@suse.com>
    Tested-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f37daa4cbd955afb1eba2909bf24daea20fd37c
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Dec 17 13:55:49 2014 +0100

    mac80211: free management frame keys when removing station
    
    commit 28a9bc68124c319b2b3dc861e80828a8865fd1ba upstream.
    
    When writing the code to allow per-station GTKs, I neglected to
    take into account the management frame keys (index 4 and 5) when
    freeing the station and only added code to free the first four
    data frame keys.
    
    Fix this by iterating the array of keys over the right length.
    
    Fixes: e31b82136d1a ("cfg80211/mac80211: allow per-station GTKs")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47e60160ef39bea01a3eb5d3aa1da945400fa76c
Author: Andreas Müller <goo@stapelspeicher.org>
Date:   Fri Dec 12 12:11:11 2014 +0100

    mac80211: fix multicast LED blinking and counter
    
    commit d025933e29872cb1fe19fc54d80e4dfa4ee5779c upstream.
    
    As multicast-frames can't be fragmented, "dot11MulticastReceivedFrameCount"
    stopped being incremented after the use-after-free fix. Furthermore, the
    RX-LED will be triggered by every multicast frame (which wouldn't happen
    before) which wouldn't allow the LED to rest at all.
    
    Fixes https://bugzilla.kernel.org/show_bug.cgi?id=89431 which also had the
    patch.
    
    Fixes: b8fff407a180 ("mac80211: fix use-after-free in defragmentation")
    Signed-off-by: Andreas Müller <goo@stapelspeicher.org>
    [rewrite commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18b41bd86e6cdcdc3b4cef920a1f3d6f496634e3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Dec 4 18:25:19 2014 +0100

    KEYS: Fix stale key registration at error path
    
    commit b26bdde5bb27f3f900e25a95e33a0c476c8c2c48 upstream.
    
    When loading encrypted-keys module, if the last check of
    aes_get_sizes() in init_encrypted() fails, the driver just returns an
    error without unregistering its key type.  This results in the stale
    entry in the list.  In addition to memory leaks, this leads to a kernel
    crash when registering a new key type later.
    
    This patch fixes the problem by swapping the calls of aes_get_sizes()
    and register_key_type(), and releasing resources properly at the error
    paths.
    
    Bugzilla: https://bugzilla.opensuse.org/show_bug.cgi?id=908163
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 684f4c093f182756a1c1f582c415d3120cc7f5e8
Author: Jan Kara <jack@suse.cz>
Date:   Thu Dec 18 17:26:10 2014 +0100

    isofs: Fix unchecked printing of ER records
    
    commit 4e2024624e678f0ebb916e6192bd23c1f9fdf696 upstream.
    
    We didn't check length of rock ridge ER records before printing them.
    Thus corrupted isofs image can cause us to access and print some memory
    behind the buffer with obvious consequences.
    
    Reported-and-tested-by: Carl Henrik Lunde <chlunde@ping.uio.no>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d011d586b3f9f1b08f3deb080d8542f56963dc28
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Wed Dec 17 14:48:30 2014 -0800

    x86/tls: Don't validate lm in set_thread_area() after all
    
    commit 3fb2f4237bb452eb4e98f6a5dbd5a445b4fed9d0 upstream.
    
    It turns out that there's a lurking ABI issue.  GCC, when
    compiling this in a 32-bit program:
    
    struct user_desc desc = {
            .entry_number    = idx,
            .base_addr       = base,
            .limit           = 0xfffff,
            .seg_32bit       = 1,
            .contents        = 0, /* Data, grow-up */
            .read_exec_only  = 0,
            .limit_in_pages  = 1,
            .seg_not_present = 0,
            .useable         = 0,
    };
    
    will leave .lm uninitialized.  This means that anything in the
    kernel that reads user_desc.lm for 32-bit tasks is unreliable.
    
    Revert the .lm check in set_thread_area().  The value never did
    anything in the first place.
    
    Fixes: 0e58af4e1d21 ("x86/tls: Disallow unusual TLS segments")
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/d7875b60e28c512f6a6fc0baf5714d58e7eaadbb.1418856405.git.luto@amacapital.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81f250e1cf8048e4780e46d5219b0e7f943a336b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Nov 29 15:50:21 2014 +0300

    dm space map metadata: fix sm_bootstrap_get_nr_blocks()
    
    commit c1c6156fe4d4577444b769d7edd5dd503e57bbc9 upstream.
    
    This function isn't right and it causes a static checker warning:
    
            drivers/md/dm-thin.c:3016 maybe_resize_data_dev()
            error: potentially using uninitialized 'sb_data_size'.
    
    It should set "*count" and return zero on success the same as the
    sm_metadata_get_nr_blocks() function does earlier.
    
    Fixes: 3241b1d3e0aa ('dm: add persistent data library')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1102c5b030bb0f41bed2f9120695ce0b0165c13
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Tue Nov 25 17:45:15 2014 -0800

    dm bufio: fix memleak when using a dm_buffer's inline bio
    
    commit 445559cdcb98a141f5de415b94fd6eaccab87e6d upstream.
    
    When dm-bufio sets out to use the bio built into a struct dm_buffer to
    issue an IO, it needs to call bio_reset after it's done with the bio
    so that we can free things attached to the bio such as the integrity
    payload.  Therefore, inject our own endio callback to take care of
    the bio_reset after calling submit_io's end_io callback.
    
    Test case:
    1. modprobe scsi_debug delay=0 dif=1 dix=199 ato=1 dev_size_mb=300
    2. Set up a dm-bufio client, e.g. dm-verity, on the scsi_debug device
    3. Repeatedly read metadata and watch kmalloc-192 leak!
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f30d637d028b4a5344d4651f30c486f9daec6804
Author: Peng Tao <tao.peng@primarydata.com>
Date:   Mon Nov 17 11:05:17 2014 +0800

    nfs41: fix nfs4_proc_layoutget error handling
    
    commit 4bd5a980de87d2b5af417485bde97b8eb3d6cf6a upstream.
    
    nfs4_layoutget_release() drops layout hdr refcnt. Grab the refcnt
    early so that it is safe to call .release in case nfs4_alloc_pages
    fails.
    
    Signed-off-by: Peng Tao <tao.peng@primarydata.com>
    Fixes: a47970ff78147 ("NFSv4.1: Hold reference to layout hdr in layoutget")
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72f7a5c969dd7c3f5958e14eb97ee5022fe3dba5
Author: Sumit.Saxena@avagotech.com <Sumit.Saxena@avagotech.com>
Date:   Mon Nov 17 15:24:23 2014 +0530

    megaraid_sas: corrected return of wait_event from abort frame path
    
    commit 170c238701ec38b1829321b17c70671c101bac55 upstream.
    
    Corrected wait_event() call which was waiting for wrong completion
    status (0xFF).
    
    Signed-off-by: Sumit Saxena <sumit.saxena@avagotech.com>
    Signed-off-by: Kashyap Desai <kashyap.desai@avagotech.com>
    Reviewed-by: Tomas Henzl <thenzl@redhat.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d316a316386b92dc188b96ff8fc8013a0db4cc7
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Mon Sep 22 10:12:51 2014 +0300

    mmc: block: add newline to sysfs display of force_ro
    
    commit 0031a98a85e9fca282624bfc887f9531b2768396 upstream.
    
    Make force_ro consistent with other sysfs entries.
    
    Fixes: 371a689f64b0d ('mmc: MMC boot partitions support')
    Cc: Andrei Warkentin <andrey.warkentin@gmail.com>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e6845bed5e8b6b1938d509486e0fe0b953daa24
Author: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
Date:   Fri Oct 24 21:19:57 2014 +0400

    mfd: tc6393xb: Fail ohci suspend if full state restore is required
    
    commit 1a5fb99de4850cba710d91becfa2c65653048589 upstream.
    
    Some boards with TC6393XB chip require full state restore during system
    resume thanks to chip's VCC being cut off during suspend (Sharp SL-6000
    tosa is one of them). Failing to do so would result in ohci Oops on
    resume due to internal memory contentes being changed. Fail ohci suspend
    on tc6393xb is full state restore is required.
    
    Recommended workaround is to unbind tmio-ohci driver before suspend and
    rebind it after resume.
    
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15225559b32c87614b39713875f6d799df05c9b0
Author: NeilBrown <neilb@suse.de>
Date:   Tue Sep 9 14:13:51 2014 +1000

    md/bitmap: always wait for writes on unplug.
    
    commit 4b5060ddae2b03c5387321fafc089d242225697a upstream.
    
    If two threads call bitmap_unplug at the same time, then
    one might schedule all the writes, and the other might
    decide that it doesn't need to wait.  But really it does.
    
    It rarely hurts to wait when it isn't absolutely necessary,
    and the current code doesn't really focus on 'absolutely necessary'
    anyway.  So just wait always.
    
    This can potentially lead to data corruption if a crash happens
    at an awkward time and data was written before the bitmap was
    updated.  It is very unlikely, but this should go to -stable
    just to be safe.  Appropriate for any -stable.
    
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d2b6132e6963ccdfb15a4570984382425b96529
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Fri Dec 5 19:03:28 2014 -0800

    x86, kvm: Clear paravirt_enabled on KVM guests for espfix32's benefit
    
    commit 29fa6825463c97e5157284db80107d1bfac5d77b upstream.
    
    paravirt_enabled has the following effects:
    
     - Disables the F00F bug workaround warning.  There is no F00F bug
       workaround any more because Linux's standard IDT handling already
       works around the F00F bug, but the warning still exists.  This
       is only cosmetic, and, in any event, there is no such thing as
       KVM on a CPU with the F00F bug.
    
     - Disables 32-bit APM BIOS detection.  On a KVM paravirt system,
       there should be no APM BIOS anyway.
    
     - Disables tboot.  I think that the tboot code should check the
       CPUID hypervisor bit directly if it matters.
    
     - paravirt_enabled disables espfix32.  espfix32 should *not* be
       disabled under KVM paravirt.
    
    The last point is the purpose of this patch.  It fixes a leak of the
    high 16 bits of the kernel stack address on 32-bit KVM paravirt
    guests.  Fixes CVE-2014-8134.
    
    Suggested-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb7977a9a8f74fa555a893c052f82a826cc66231
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Mon Dec 8 13:55:20 2014 -0800

    x86_64, switch_to(): Load TLS descriptors before switching DS and ES
    
    commit f647d7c155f069c1a068030255c300663516420e upstream.
    
    Otherwise, if buggy user code points DS or ES into the TLS
    array, they would be corrupted after a context switch.
    
    This also significantly improves the comments and documents some
    gotchas in the code.
    
    Before this patch, the both tests below failed.  With this
    patch, the es test passes, although the gsbase test still fails.
    
     ----- begin es test -----
    
    /*
     * Copyright (c) 2014 Andy Lutomirski
     * GPL v2
     */
    
    static unsigned short GDT3(int idx)
    {
            return (idx << 3) | 3;
    }
    
    static int create_tls(int idx, unsigned int base)
    {
            struct user_desc desc = {
                    .entry_number    = idx,
                    .base_addr       = base,
                    .limit           = 0xfffff,
                    .seg_32bit       = 1,
                    .contents        = 0, /* Data, grow-up */
                    .read_exec_only  = 0,
                    .limit_in_pages  = 1,
                    .seg_not_present = 0,
                    .useable         = 0,
            };
    
            if (syscall(SYS_set_thread_area, &desc) != 0)
                    err(1, "set_thread_area");
    
            return desc.entry_number;
    }
    
    int main()
    {
            int idx = create_tls(-1, 0);
            printf("Allocated GDT index %d\n", idx);
    
            unsigned short orig_es;
            asm volatile ("mov %%es,%0" : "=rm" (orig_es));
    
            int errors = 0;
            int total = 1000;
            for (int i = 0; i < total; i++) {
                    asm volatile ("mov %0,%%es" : : "rm" (GDT3(idx)));
                    usleep(100);
    
                    unsigned short es;
                    asm volatile ("mov %%es,%0" : "=rm" (es));
                    asm volatile ("mov %0,%%es" : : "rm" (orig_es));
                    if (es != GDT3(idx)) {
                            if (errors == 0)
                                    printf("[FAIL]\tES changed from 0x%hx to 0x%hx\n",
                                           GDT3(idx), es);
                            errors++;
                    }
            }
    
            if (errors) {
                    printf("[FAIL]\tES was corrupted %d/%d times\n", errors, total);
                    return 1;
            } else {
                    printf("[OK]\tES was preserved\n");
                    return 0;
            }
    }
    
     ----- end es test -----
    
     ----- begin gsbase test -----
    
    /*
     * gsbase.c, a gsbase test
     * Copyright (c) 2014 Andy Lutomirski
     * GPL v2
     */
    
    static unsigned char *testptr, *testptr2;
    
    static unsigned char read_gs_testvals(void)
    {
            unsigned char ret;
            asm volatile ("movb %%gs:%1, %0" : "=r" (ret) : "m" (*testptr));
            return ret;
    }
    
    int main()
    {
            int errors = 0;
    
            testptr = mmap((void *)0x200000000UL, 1, PROT_READ | PROT_WRITE,
                           MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0);
            if (testptr == MAP_FAILED)
                    err(1, "mmap");
    
            testptr2 = mmap((void *)0x300000000UL, 1, PROT_READ | PROT_WRITE,
                           MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0);
            if (testptr2 == MAP_FAILED)
                    err(1, "mmap");
    
            *testptr = 0;
            *testptr2 = 1;
    
            if (syscall(SYS_arch_prctl, ARCH_SET_GS,
                        (unsigned long)testptr2 - (unsigned long)testptr) != 0)
                    err(1, "ARCH_SET_GS");
    
            usleep(100);
    
            if (read_gs_testvals() == 1) {
                    printf("[OK]\tARCH_SET_GS worked\n");
            } else {
                    printf("[FAIL]\tARCH_SET_GS failed\n");
                    errors++;
            }
    
            asm volatile ("mov %0,%%gs" : : "r" (0));
    
            if (read_gs_testvals() == 0) {
                    printf("[OK]\tWriting 0 to gs worked\n");
            } else {
                    printf("[FAIL]\tWriting 0 to gs failed\n");
                    errors++;
            }
    
            usleep(100);
    
            if (read_gs_testvals() == 0) {
                    printf("[OK]\tgsbase is still zero\n");
            } else {
                    printf("[FAIL]\tgsbase was corrupted\n");
                    errors++;
            }
    
            return errors == 0 ? 0 : 1;
    }
    
     ----- end gsbase test -----
    
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/509d27c9fec78217691c3dad91cec87e1006b34a.1418075657.git.luto@amacapital.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84f538365947a5575c6c9d1404fb62386ae994ba
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Thu Dec 4 16:48:17 2014 -0800

    x86/tls: Disallow unusual TLS segments
    
    commit 0e58af4e1d2166e9e33375a0f121e4867010d4f8 upstream.
    
    Users have no business installing custom code segments into the
    GDT, and segments that are not present but are otherwise valid
    are a historical source of interesting attacks.
    
    For completeness, block attempts to set the L bit.  (Prior to
    this patch, the L bit would have been silently dropped.)
    
    This is an ABI break.  I've checked glibc, musl, and Wine, and
    none of them look like they'll have any trouble.
    
    Note to stable maintainers: this is a hardening patch that fixes
    no known bugs.  Given the possibility of ABI issues, this
    probably shouldn't be backported quickly.
    
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    Acked-by: H. Peter Anvin <hpa@zytor.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 359d2d755e1924fc7231d8423696a7365eccd3e1
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Thu Dec 4 16:48:16 2014 -0800

    x86/tls: Validate TLS entries to protect espfix
    
    commit 41bdc78544b8a93a9c6814b8bbbfef966272abbe upstream.
    
    Installing a 16-bit RW data segment into the GDT defeats espfix.
    AFAICT this will not affect glibc, Wine, or dosemu at all.
    
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    Acked-by: H. Peter Anvin <hpa@zytor.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fe5620fcd6c2f0a4a927ee10c8e53196da392f3
Author: Jan Kara <jack@suse.cz>
Date:   Mon Dec 15 14:22:46 2014 +0100

    isofs: Fix infinite looping over CE entries
    
    commit f54e18f1b831c92f6512d2eedb224cd63d607d3d upstream.
    
    Rock Ridge extensions define so called Continuation Entries (CE) which
    define where is further space with Rock Ridge data. Corrupted isofs
    image can contain arbitrarily long chain of these, including a one
    containing loop and thus causing kernel to end in an infinite loop when
    traversing these entries.
    
    Limit the traversal to 32 entries which should be more than enough space
    to store all the Rock Ridge data.
    
    Reported-by: P J P <ppandit@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
