commit 8f843cf57202d0db77b31adb8d2ebb93690e91f2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 22 09:29:41 2021 +0100

    Linux 5.4.168
    
    Link: https://lore.kernel.org/r/20211220143025.683747691@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d99b3c6bd39a0a023e972d8f912fd47698bbbb8
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 30 08:36:12 2021 +0100

    xen/netback: don't queue unlimited number of packages
    
    commit be81992f9086b230623ae3ebbc85ecee4d00a3d3 upstream.
    
    In case a guest isn't consuming incoming network traffic as fast as it
    is coming in, xen-netback is buffering network packages in unlimited
    numbers today. This can result in host OOM situations.
    
    Commit f48da8b14d04ca8 ("xen-netback: fix unlimited guest Rx internal
    queue and carrier flapping") meant to introduce a mechanism to limit
    the amount of buffered data by stopping the Tx queue when reaching the
    data limit, but this doesn't work for cases like UDP.
    
    When hitting the limit don't queue further SKBs, but drop them instead.
    In order to be able to tell Rx packages have been dropped increment the
    rx_dropped statistics counter in this case.
    
    It should be noted that the old solution to continue queueing SKBs had
    the additional problem of an overflow of the 32-bit rx_queue_len value
    would result in intermittent Tx queue enabling.
    
    This is part of XSA-392
    
    Fixes: f48da8b14d04ca8 ("xen-netback: fix unlimited guest Rx internal queue and carrier flapping")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8bfcd0385211044627f93d170991da1ae5937245
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:25:12 2021 +0100

    xen/netback: fix rx queue stall detection
    
    commit 6032046ec4b70176d247a71836186d47b25d1684 upstream.
    
    Commit 1d5d48523900a4b ("xen-netback: require fewer guest Rx slots when
    not using GSO") introduced a security problem in netback, as an
    interface would only be regarded to be stalled if no slot is available
    in the rx queue ring page. In case the SKB at the head of the queued
    requests will need more than one rx slot and only one slot is free the
    stall detection logic will never trigger, as the test for that is only
    looking for at least one slot to be free.
    
    Fix that by testing for the needed number of slots instead of only one
    slot being available.
    
    In order to not have to take the rx queue lock that often, store the
    number of needed slots in the queue data. As all SKB dequeue operations
    happen in the rx queue kernel thread this is safe, as long as the
    number of needed slots is accessed via READ/WRITE_ONCE() only and
    updates are always done with the rx queue lock held.
    
    Add a small helper for obtaining the number of free slots.
    
    This is part of XSA-392
    
    Fixes: 1d5d48523900a4b ("xen-netback: require fewer guest Rx slots when not using GSO")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 560e64413b4a6d9bd6630e350d5f2e6a05f6ffe3
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/console: harden hvc_xen against event channel storms
    
    commit fe415186b43df0db1f17fa3a46275fd92107fe71 upstream.
    
    The Xen console driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using a lateeoi event
    channel.
    
    For the normal domU initial console this requires the introduction of
    bind_evtchn_to_irq_lateeoi() as there is no xenbus device available
    at the time the event channel is bound to the irq.
    
    As the decision whether an interrupt was spurious or not requires to
    test for bytes having been read from the backend, move sending the
    event into the if statement, as sending an event without having found
    any bytes to be read is making no sense at all.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e68d099f09c260a7dee28b99af02fe6977a9e66
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/netfront: harden netfront against event channel storms
    
    commit b27d47950e481f292c0a5ad57357edb9d95d03ba upstream.
    
    The Xen netfront driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using lateeoi event
    channels.
    
    For being able to detect the case of no rx responses being added while
    the carrier is down a new lock is needed in order to update and test
    rsp_cons and the number of seen unconsumed responses atomically.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ed9f5c511ce95cb8db05ff82026ea901f45fd76
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/blkfront: harden blkfront against event channel storms
    
    commit 0fd08a34e8e3b67ec9bd8287ac0facf8374b844a upstream.
    
    The Xen blkfront driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using lateeoi event
    channels.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 192fe5739571ec5c1b4928d5230b4d49172bc669
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Fri Dec 17 15:56:46 2021 +0100

    Revert "xsk: Do not sleep in poll() when need_wakeup set"
    
    commit 0706a78f31c4217ca144f630063ec9561a21548d upstream.
    
    This reverts commit bd0687c18e635b63233dc87f38058cd728802ab4.
    
    This patch causes a Tx only workload to go to sleep even when it does
    not have to, leading to misserable performance in skb mode. It fixed
    one rare problem but created a much worse one, so this need to be
    reverted while I try to craft a proper solution to the original
    problem.
    
    Fixes: bd0687c18e63 ("xsk: Do not sleep in poll() when need_wakeup set")
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20211217145646.26449-1-magnus.karlsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e281b71992368a3b13206c962793e66c43e51efb
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed Oct 14 11:56:42 2020 +0300

    net: sched: Fix suspicious RCU usage while accessing tcf_tunnel_info
    
    commit d086a1c65aabb5a4e1edc580ca583e2964c62b44 upstream.
    
    The access of tcf_tunnel_info() produces the following splat, so fix it
    by dereferencing the tcf_tunnel_key_params pointer with marker that
    internal tcfa_liock is held.
    
     =============================
     WARNING: suspicious RCU usage
     5.9.0+ #1 Not tainted
     -----------------------------
     include/net/tc_act/tc_tunnel_key.h:59 suspicious rcu_dereference_protected() usage!
     other info that might help us debug this:
    
     rcu_scheduler_active = 2, debug_locks = 1
     1 lock held by tc/34839:
      #0: ffff88828572c2a0 (&p->tcfa_lock){+...}-{2:2}, at: tc_setup_flow_action+0xb3/0x48b5
     stack backtrace:
     CPU: 1 PID: 34839 Comm: tc Not tainted 5.9.0+ #1
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
     Call Trace:
      dump_stack+0x9a/0xd0
      tc_setup_flow_action+0x14cb/0x48b5
      fl_hw_replace_filter+0x347/0x690 [cls_flower]
      fl_change+0x2bad/0x4875 [cls_flower]
      tc_new_tfilter+0xf6f/0x1ba0
      rtnetlink_rcv_msg+0x5f2/0x870
      netlink_rcv_skb+0x124/0x350
      netlink_unicast+0x433/0x700
      netlink_sendmsg+0x6f1/0xbd0
      sock_sendmsg+0xb0/0xe0
      ____sys_sendmsg+0x4fa/0x6d0
      ___sys_sendmsg+0x12e/0x1b0
      __sys_sendmsg+0xa4/0x120
      do_syscall_64+0x2d/0x40
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
     RIP: 0033:0x7f1f8cd4fe57
     Code: 0c 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 89 54 24 1c 48 89 74 24 10
     RSP: 002b:00007ffdc1e193b8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
     RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f1f8cd4fe57
     RDX: 0000000000000000 RSI: 00007ffdc1e19420 RDI: 0000000000000003
     RBP: 000000005f85aafa R08: 0000000000000001 R09: 00007ffdc1e1936c
     R10: 000000000040522d R11: 0000000000000246 R12: 0000000000000001
     R13: 0000000000000000 R14: 00007ffdc1e1d6f0 R15: 0000000000482420
    
    Fixes: 3ebaf6da0716 ("net: sched: Do not assume RTNL is held in tunnel key action helpers")
    Fixes: 7a47281439ba ("net: sched: lock action when translating it to flow_action infra")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96a1550a2b43f021a95084ccb136a208b4edcc2e
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Nov 24 10:40:24 2021 +0100

    mac80211: fix regression in SSN handling of addba tx
    
    commit 73111efacd3c6d9e644acca1d132566932be8af0 upstream.
    
    Some drivers that do their own sequence number allocation (e.g. ath9k) rely
    on being able to modify params->ssn on starting tx ampdu sessions.
    This was broken by a change that modified it to use sta->tid_seq[tid] instead.
    
    Cc: stable@vger.kernel.org
    Fixes: 31d8bb4e07f8 ("mac80211: agg-tx: refactor sending addba")
    Reported-by: Eneas U de Queiroz <cotequeiroz@gmail.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20211124094024.43222-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66aba15a144a41162502d1fbe6ec4b4d006d9ad3
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Jul 20 06:16:27 2021 -0700

    rcu: Mark accesses to rcu_state.n_force_qs
    
    commit 2431774f04d1050292054c763070021bade7b151 upstream.
    
    This commit marks accesses to the rcu_state.n_force_qs.  These data
    races are hard to make happen, but syzkaller was equal to the task.
    
    Reported-by: syzbot+e08a83a1940ec3846cd5@syzkaller.appspotmail.com
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b847ecff850719c46c95acd25a0d555dfd16e10d
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Thu Nov 18 14:03:28 2021 -0500

    scsi: scsi_debug: Sanity check block descriptor length in resp_mode_select()
    
    commit e0a2c28da11e2c2b963fc01d50acbf03045ac732 upstream.
    
    In resp_mode_select() sanity check the block descriptor len to avoid UAF.
    
    BUG: KASAN: use-after-free in resp_mode_select+0xa4c/0xb40 drivers/scsi/scsi_debug.c:2509
    Read of size 1 at addr ffff888026670f50 by task scsicmd/15032
    
    CPU: 1 PID: 15032 Comm: scsicmd Not tainted 5.15.0-01d0625 #15
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    Call Trace:
     <TASK>
     dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:107
     print_address_description.constprop.9+0x28/0x160 mm/kasan/report.c:257
     kasan_report.cold.14+0x7d/0x117 mm/kasan/report.c:443
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/report_generic.c:306
     resp_mode_select+0xa4c/0xb40 drivers/scsi/scsi_debug.c:2509
     schedule_resp+0x4af/0x1a10 drivers/scsi/scsi_debug.c:5483
     scsi_debug_queuecommand+0x8c9/0x1e70 drivers/scsi/scsi_debug.c:7537
     scsi_queue_rq+0x16b4/0x2d10 drivers/scsi/scsi_lib.c:1521
     blk_mq_dispatch_rq_list+0xb9b/0x2700 block/blk-mq.c:1640
     __blk_mq_sched_dispatch_requests+0x28f/0x590 block/blk-mq-sched.c:325
     blk_mq_sched_dispatch_requests+0x105/0x190 block/blk-mq-sched.c:358
     __blk_mq_run_hw_queue+0xe5/0x150 block/blk-mq.c:1762
     __blk_mq_delay_run_hw_queue+0x4f8/0x5c0 block/blk-mq.c:1839
     blk_mq_run_hw_queue+0x18d/0x350 block/blk-mq.c:1891
     blk_mq_sched_insert_request+0x3db/0x4e0 block/blk-mq-sched.c:474
     blk_execute_rq_nowait+0x16b/0x1c0 block/blk-exec.c:63
     sg_common_write.isra.18+0xeb3/0x2000 drivers/scsi/sg.c:837
     sg_new_write.isra.19+0x570/0x8c0 drivers/scsi/sg.c:775
     sg_ioctl_common+0x14d6/0x2710 drivers/scsi/sg.c:941
     sg_ioctl+0xa2/0x180 drivers/scsi/sg.c:1166
     __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:52
     do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:50
     entry_SYSCALL_64_after_hwframe+0x44/0xae arch/x86/entry/entry_64.S:113
    
    Link: https://lore.kernel.org/r/1637262208-28850-1-git-send-email-george.kennedy@oracle.com
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9f300a92297be8250547347fd52216ef0177ae0
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Nov 4 10:55:34 2021 +0100

    ovl: fix warning in ovl_create_real()
    
    commit 1f5573cfe7a7056e80a92c7a037a3e69f3a13d1c upstream.
    
    Syzbot triggered the following warning in ovl_workdir_create() ->
    ovl_create_real():
    
            if (!err && WARN_ON(!newdentry->d_inode)) {
    
    The reason is that the cgroup2 filesystem returns from mkdir without
    instantiating the new dentry.
    
    Weird filesystems such as this will be rejected by overlayfs at a later
    stage during setup, but to prevent such a warning, call ovl_mkdir_real()
    directly from ovl_workdir_create() and reject this case early.
    
    Reported-and-tested-by: syzbot+75eab84fd0af9e8bf66b@syzkaller.appspotmail.com
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba2a9d8f8ef139c5782579dc87058d71a0393c7e
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 22 17:03:01 2021 +0200

    fuse: annotate lock in fuse_reverse_inval_entry()
    
    commit bda9a71980e083699a0360963c0135657b73f47a upstream.
    
    Add missing inode lock annotatation; found by syzbot.
    
    Reported-and-tested-by: syzbot+9f747458f5990eaa8d43@syzkaller.appspotmail.com
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96f182c9f48b984447741f054ec301fdc8517035
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Thu Aug 19 12:42:21 2021 +0200

    media: mxl111sf: change mutex_init() location
    
    commit 44870a9e7a3c24acbb3f888b2a7cc22c9bdf7e7f upstream.
    
    Syzbot reported, that mxl111sf_ctrl_msg() uses uninitialized
    mutex. The problem was in wrong mutex_init() location.
    
    Previous mutex_init(&state->msg_lock) call was in ->init() function, but
    dvb_usbv2_init() has this order of calls:
    
            dvb_usbv2_init()
              dvb_usbv2_adapter_init()
                dvb_usbv2_adapter_frontend_init()
                  props->frontend_attach()
    
              props->init()
    
    Since mxl111sf_* devices call mxl111sf_ctrl_msg() in ->frontend_attach()
    internally we need to initialize state->msg_lock before
    frontend_attach(). To achieve it, ->probe() call added to all mxl111sf_*
    devices, which will simply initiaize mutex.
    
    Reported-and-tested-by: syzbot+5ca0bf339f13c4243001@syzkaller.appspotmail.com
    
    Fixes: 8572211842af ("[media] mxl111sf: convert to new DVB USB")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 095ad3969b628370ebef392a4f3158edcabcc0fe
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Tue Dec 14 11:26:07 2021 +0100

    xsk: Do not sleep in poll() when need_wakeup set
    
    commit bd0687c18e635b63233dc87f38058cd728802ab4 upstream.
    
    Do not sleep in poll() when the need_wakeup flag is set. When this
    flag is set, the application needs to explicitly wake up the driver
    with a syscall (poll, recvmsg, sendmsg, etc.) to guarantee that Rx
    and/or Tx processing will be processed promptly. But the current code
    in poll(), sleeps first then wakes up the driver. This means that no
    driver processing will occur (baring any interrupts) until the timeout
    has expired.
    
    Fix this by checking the need_wakeup flag first and if set, wake the
    driver and return to the application. Only if need_wakeup is not set
    should the process sleep if there is a timeout set in the poll() call.
    
    Fixes: 77cd0d7b3f25 ("xsk: add support for need_wakeup flag in AF_XDP rings")
    Reported-by: Keith Wiles <keith.wiles@intel.com>
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Link: https://lore.kernel.org/bpf/20211214102607.7677-1-magnus.karlsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29e9fdf7b681401253427860c334f0c3c132907b
Author: Fabio Estevam <festevam@gmail.com>
Date:   Wed Nov 24 15:45:41 2021 -0300

    ARM: dts: imx6ull-pinfunc: Fix CSI_DATA07__ESAI_TX0 pad name
    
    commit 737e65c7956795b3553781fb7bc82fce1c39503f upstream.
    
    According to the i.MX6ULL Reference Manual, pad CSI_DATA07 may
    have the ESAI_TX0 functionality, not ESAI_T0.
    
    Also, NXP's i.MX Config Tools 10.0 generates dtsi with the
    MX6ULL_PAD_CSI_DATA07__ESAI_TX0 naming, so fix it accordingly.
    
    There are no devicetree users in mainline that use the old name,
    so just remove the old entry.
    
    Fixes: c201369d4aa5 ("ARM: dts: imx6ull: add imx6ull support")
    Reported-by: George Makarov <georgemakarov1@gmail.com>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6e9e7be9b80f007e589b119bb9cdd5151ec217d
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Oct 15 13:13:06 2021 -0700

    Input: touchscreen - avoid bitwise vs logical OR warning
    
    commit a02dcde595f7cbd240ccd64de96034ad91cffc40 upstream.
    
    A new warning in clang points out a few places in this driver where a
    bitwise OR is being used with boolean types:
    
    drivers/input/touchscreen.c:81:17: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
            data_present = touchscreen_get_prop_u32(dev, "touchscreen-min-x",
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    This use of a bitwise OR is intentional, as bitwise operations do not
    short circuit, which allows all the calls to touchscreen_get_prop_u32()
    to happen so that the last parameter is initialized while coalescing the
    results of the calls to make a decision after they are all evaluated.
    
    To make this clearer to the compiler, use the '|=' operator to assign
    the result of each touchscreen_get_prop_u32() call to data_present,
    which keeps the meaning of the code the same but makes it obvious that
    every one of these calls is expected to happen.
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20211014205757.3474635-1-nathan@kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d45573dfb6ed2bfb0033e8efbb9c3bfd9dbe6bf
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Sep 1 00:08:34 2020 -0700

    mwifiex: Remove unnecessary braces from HostCmd_SET_SEQ_NO_BSS_INFO
    
    commit 6a953dc4dbd1c7057fb765a24f37a5e953c85fb0 upstream.
    
    A new warning in clang points out when macro expansion might result in a
    GNU C statement expression. There is an instance of this in the mwifiex
    driver:
    
    drivers/net/wireless/marvell/mwifiex/cmdevt.c:217:34: warning: '}' and
    ')' tokens terminating statement expression appear in different macro
    expansion contexts [-Wcompound-token-split-by-macro]
            host_cmd->seq_num = cpu_to_le16(HostCmd_SET_SEQ_NO_BSS_INFO
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    drivers/net/wireless/marvell/mwifiex/fw.h:519:46: note: expanded from
    macro 'HostCmd_SET_SEQ_NO_BSS_INFO'
            (((type) & 0x000f) << 12);                  }
                                                        ^
    
    This does not appear to be a real issue. Removing the braces and
    replacing them with parentheses will fix the warning and not change the
    meaning of the code.
    
    Fixes: 5e6e3a92b9a4 ("wireless: mwifiex: initial commit for Marvell mwifiex driver")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1146
    Reported-by: Andy Lavr <andy.lavr@gmail.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200901070834.1015754-1-natechancellor@gmail.com
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a19cf6844b509d44ecbd536f33d314d91ecdd2b5
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sat Dec 11 20:10:24 2021 +0100

    mac80211: validate extended element ID is present
    
    commit 768c0b19b50665e337c96858aa2b7928d6dcf756 upstream.
    
    Before attempting to parse an extended element, verify that
    the extended element ID is present.
    
    Fixes: 41cbb0f5a295 ("mac80211: add support for HE")
    Reported-by: syzbot+59bdff68edce82e393b6@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20211211201023.f30a1b128c07.I5cacc176da94ba316877c6e10fe3ceec8b4dbd7d@changeid
    Cc: stable@vger.kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e070c0c990d77476695d81a8ce71282f44505096
Author: Le Ma <le.ma@amd.com>
Date:   Sat Dec 4 18:59:08 2021 +0800

    drm/amdgpu: correct register access for RLC_JUMP_TABLE_RESTORE
    
    commit f3a8076eb28cae1553958c629aecec479394bbe2 upstream.
    
    should count on GC IP base address
    
    Signed-off-by: Le Ma <le.ma@amd.com>
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9ee8144e409ac4fc09cb382714736714b041703
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Tue Dec 14 09:45:10 2021 -0500

    libata: if T_LENGTH is zero, dma direction should be DMA_NONE
    
    commit 5da5231bb47864e5dd6c6731151e98b6ee498827 upstream.
    
    Avoid data corruption by rejecting pass-through commands where
    T_LENGTH is zero (No data is transferred) and the dma direction
    is not DMA_NONE.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: syzkaller<syzkaller@googlegroups.com>
    Signed-off-by: George Kennedy<george.kennedy@oracle.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62889094939c5fc0c43b207396e51bde905be1ca
Author: Yu Liao <liaoyu15@huawei.com>
Date:   Mon Dec 13 21:57:27 2021 +0800

    timekeeping: Really make sure wall_to_monotonic isn't positive
    
    commit 4e8c11b6b3f0b6a283e898344f154641eda94266 upstream.
    
    Even after commit e1d7ba873555 ("time: Always make sure wall_to_monotonic
    isn't positive") it is still possible to make wall_to_monotonic positive
    by running the following code:
    
        int main(void)
        {
            struct timespec time;
    
            clock_gettime(CLOCK_MONOTONIC, &time);
            time.tv_nsec = 0;
            clock_settime(CLOCK_REALTIME, &time);
            return 0;
        }
    
    The reason is that the second parameter of timespec64_compare(), ts_delta,
    may be unnormalized because the delta is calculated with an open coded
    substraction which causes the comparison of tv_sec to yield the wrong
    result:
    
      wall_to_monotonic = { .tv_sec = -10, .tv_nsec =  900000000 }
      ts_delta          = { .tv_sec =  -9, .tv_nsec = -900000000 }
    
    That makes timespec64_compare() claim that wall_to_monotonic < ts_delta,
    but actually the result should be wall_to_monotonic > ts_delta.
    
    After normalization, the result of timespec64_compare() is correct because
    the tv_sec comparison is not longer misleading:
    
      wall_to_monotonic = { .tv_sec = -10, .tv_nsec =  900000000 }
      ts_delta          = { .tv_sec = -10, .tv_nsec =  100000000 }
    
    Use timespec64_sub() to ensure that ts_delta is normalized, which fixes the
    issue.
    
    Fixes: e1d7ba873555 ("time: Always make sure wall_to_monotonic isn't positive")
    Signed-off-by: Yu Liao <liaoyu15@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211213135727.1656662-1-liaoyu15@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 241d36219aaa7af737959ce5bffe02efa6615c54
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Dec 10 11:07:14 2021 +0100

    USB: serial: option: add Telit FN990 compositions
    
    commit 2b503c8598d1b232e7fc7526bce9326d92331541 upstream.
    
    Add the following Telit FN990 compositions:
    
    0x1070: tty, adb, rmnet, tty, tty, tty, tty
    0x1071: tty, adb, mbim, tty, tty, tty, tty
    0x1072: rndis, tty, adb, tty, tty, tty, tty
    0x1073: tty, adb, ecm, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20211210100714.22587-1-dnlplm@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2bb4378e2bb9ea80dfba89cfc8ee8bdd3dfcd3e
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Nov 26 10:43:48 2021 +0100

    USB: serial: cp210x: fix CP2105 GPIO registration
    
    commit 83b67041f3eaf33f98a075249aa7f4c7617c2f85 upstream.
    
    When generalising GPIO support and adding support for CP2102N, the GPIO
    registration for some CP2105 devices accidentally broke. Specifically,
    when all the pins of a port are in "modem" mode, and thus unavailable
    for GPIO use, the GPIO chip would now be registered without having
    initialised the number of GPIO lines. This would in turn be rejected by
    gpiolib and some errors messages would be printed (but importantly probe
    would still succeed).
    
    Fix this by initialising the number of GPIO lines before registering the
    GPIO chip.
    
    Note that as for the other device types, and as when all CP2105 pins are
    muxed for LED function, the GPIO chip is registered also when no pins
    are available for GPIO use.
    
    Reported-by: Maarten Brock <m.brock@vanmierlo.com>
    Link: https://lore.kernel.org/r/5eb560c81d2ea1a2b4602a92d9f48a89@vanmierlo.com
    Fixes: c8acfe0aadbe ("USB: serial: cp210x: implement GPIO support for CP2102N")
    Cc: stable@vger.kernel.org      # 4.19
    Cc: Karoly Pados <pados@pados.hu>
    Link: https://lore.kernel.org/r/20211126094348.31698-1-johan@kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Tested-by: Maarten Brock <m.brock@vanmierlo.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bae7f0808202b20aad4a7aa15ae455fac6520520
Author: Nehal Bakulchandra Shah <Nehal-Bakulchandra.shah@amd.com>
Date:   Wed Dec 15 15:02:16 2021 +0530

    usb: xhci: Extend support for runtime power management for AMD's Yellow carp.
    
    commit f886d4fbb7c97b8f5f447c92d2dab99c841803c0 upstream.
    
    AMD's Yellow Carp platform has few more XHCI controllers,
    enable the runtime power management support for the same.
    
    Signed-off-by: Nehal Bakulchandra Shah <Nehal-Bakulchandra.shah@amd.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211215093216.1839065-1-Nehal-Bakulchandra.shah@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dc6b5f2a4d5d1482c2c56567a2ed5d73b4f4f9a
Author: Stefan Roese <sr@denx.de>
Date:   Tue Dec 14 12:49:32 2021 +0100

    PCI/MSI: Mask MSI-X vectors only on success
    
    commit 83dbf898a2d45289be875deb580e93050ba67529 upstream.
    
    Masking all unused MSI-X entries is done to ensure that a crash kernel
    starts from a clean slate, which correponds to the reset state of the
    device as defined in the PCI-E specificion 3.0 and later:
    
     Vector Control for MSI-X Table Entries
     --------------------------------------
    
     "00: Mask bit:  When this bit is set, the function is prohibited from
                     sending a message using this MSI-X Table entry.
                     ...
                     This bit’s state after reset is 1 (entry is masked)."
    
    A Marvell NVME device fails to deliver MSI interrupts after trying to
    enable MSI-X interrupts due to that masking. It seems to take the MSI-X
    mask bits into account even when MSI-X is disabled.
    
    While not specification compliant, this can be cured by moving the masking
    into the success path, so that the MSI-X table entries stay in device reset
    state when the MSI-X setup fails.
    
    [ tglx: Move it into the success path, add comment and amend changelog ]
    
    Fixes: aa8092c1d1f1 ("PCI/MSI: Mask all unused MSI-X entries")
    Signed-off-by: Stefan Roese <sr@denx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-pci@vger.kernel.org
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211210161025.3287927-1-sr@denx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c520e7cf82acd7667a5962205b008bd939533ecb
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Dec 14 12:42:14 2021 +0100

    PCI/MSI: Clear PCI_MSIX_FLAGS_MASKALL on error
    
    commit 94185adbfad56815c2c8401e16d81bdb74a79201 upstream.
    
    PCI_MSIX_FLAGS_MASKALL is set in the MSI-X control register at MSI-X
    interrupt setup time. It's cleared on success, but the error handling path
    only clears the PCI_MSIX_FLAGS_ENABLE bit.
    
    That's incorrect as the reset state of the PCI_MSIX_FLAGS_MASKALL bit is
    zero. That can be observed via lspci:
    
            Capabilities: [b0] MSI-X: Enable- Count=67 Masked+
    
    Clear the bit in the error path to restore the reset state.
    
    Fixes: 438553958ba1 ("PCI/MSI: Enable and mask MSI-X early")
    Reported-by: Stefan Roese <sr@denx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Stefan Roese <sr@denx.de>
    Cc: linux-pci@vger.kernel.org
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87tufevoqx.ffs@tglx
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed31692a9758e49174c2918eefc31ffae9e25623
Author: Jimmy Wang <wangjm221@gmail.com>
Date:   Tue Dec 14 09:26:50 2021 +0800

    USB: NO_LPM quirk Lenovo USB-C to Ethernet Adapher(RTL8153-04)
    
    commit 0ad3bd562bb91853b9f42bda145b5db6255aee90 upstream.
    
    This device doesn't work well with LPM, losing connectivity intermittently.
    Disable LPM to resolve the issue.
    
    Reviewed-by: <markpearson@lenovo.com>
    Signed-off-by: Jimmy Wang <wangjm221@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211214012652.4898-1-wangjm221@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aae3448b78d9d4d0b66b75253a0d5c10321ceec7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Dec 14 19:46:21 2021 +0100

    USB: gadget: bRequestType is a bitfield, not a enum
    
    [ Upstream commit f08adf5add9a071160c68bb2a61d697f39ab0758 ]
    
    Szymon rightly pointed out that the previous check for the endpoint
    direction in bRequestType was not looking at only the bit involved, but
    rather the whole value.  Normally this is ok, but for some request
    types, bits other than bit 8 could be set and the check for the endpoint
    length could not stall correctly.
    
    Fix that up by only checking the single bit.
    
    Fixes: 153a2d7e3350 ("USB: gadget: detect too-big endpoint 0 requests")
    Cc: Felipe Balbi <balbi@kernel.org>
    Reported-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Link: https://lore.kernel.org/r/20211214184621.385828-1-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad0ed314d6167b212939e3839428ba0c8bb16adb
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 16 03:17:41 2021 -0800

    sit: do not call ipip6_dev_free() from sit_init_net()
    
    [ Upstream commit e28587cc491ef0f3c51258fdc87fbc386b1d4c59 ]
    
    ipip6_dev_free is sit dev->priv_destructor, already called
    by register_netdevice() if something goes wrong.
    
    Alternative would be to make ipip6_dev_free() robust against
    multiple invocations, but other drivers do not implement this
    strategy.
    
    syzbot reported:
    
    dst_release underflow
    WARNING: CPU: 0 PID: 5059 at net/core/dst.c:173 dst_release+0xd8/0xe0 net/core/dst.c:173
    Modules linked in:
    CPU: 1 PID: 5059 Comm: syz-executor.4 Not tainted 5.16.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:dst_release+0xd8/0xe0 net/core/dst.c:173
    Code: 4c 89 f2 89 d9 31 c0 5b 41 5e 5d e9 da d5 44 f9 e8 1d 90 5f f9 c6 05 87 48 c6 05 01 48 c7 c7 80 44 99 8b 31 c0 e8 e8 67 29 f9 <0f> 0b eb 85 0f 1f 40 00 53 48 89 fb e8 f7 8f 5f f9 48 83 c3 a8 48
    RSP: 0018:ffffc9000aa5faa0 EFLAGS: 00010246
    RAX: d6894a925dd15a00 RBX: 00000000ffffffff RCX: 0000000000040000
    RDX: ffffc90005e19000 RSI: 000000000003ffff RDI: 0000000000040000
    RBP: 0000000000000000 R08: ffffffff816a1f42 R09: ffffed1017344f2c
    R10: ffffed1017344f2c R11: 0000000000000000 R12: 0000607f462b1358
    R13: 1ffffffff1bfd305 R14: ffffe8ffffcb1358 R15: dffffc0000000000
    FS:  00007f66c71a2700(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f88aaed5058 CR3: 0000000023e0f000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     dst_cache_destroy+0x107/0x1e0 net/core/dst_cache.c:160
     ipip6_dev_free net/ipv6/sit.c:1414 [inline]
     sit_init_net+0x229/0x550 net/ipv6/sit.c:1936
     ops_init+0x313/0x430 net/core/net_namespace.c:140
     setup_net+0x35b/0x9d0 net/core/net_namespace.c:326
     copy_net_ns+0x359/0x5c0 net/core/net_namespace.c:470
     create_new_namespaces+0x4ce/0xa00 kernel/nsproxy.c:110
     unshare_nsproxy_namespaces+0x11e/0x180 kernel/nsproxy.c:226
     ksys_unshare+0x57d/0xb50 kernel/fork.c:3075
     __do_sys_unshare kernel/fork.c:3146 [inline]
     __se_sys_unshare kernel/fork.c:3144 [inline]
     __x64_sys_unshare+0x34/0x40 kernel/fork.c:3144
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f66c882ce99
    Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f66c71a2168 EFLAGS: 00000246 ORIG_RAX: 0000000000000110
    RAX: ffffffffffffffda RBX: 00007f66c893ff60 RCX: 00007f66c882ce99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000048040200
    RBP: 00007f66c8886ff1 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fff6634832f R14: 00007f66c71a2300 R15: 0000000000022000
     </TASK>
    
    Fixes: cf124db566e6 ("net: Fix inconsistent teardown and release of private netdev state.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20211216111741.1387540-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c675256a7f131f5ba3f331efb715e8f31ea0e392
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Dec 15 12:24:49 2021 -0800

    net: systemport: Add global locking for descriptor lifecycle
    
    [ Upstream commit 8b8e6e782456f1ce02a7ae914bbd5b1053f0b034 ]
    
    The descriptor list is a shared resource across all of the transmit queues, and
    the locking mechanism used today only protects concurrency across a given
    transmit queue between the transmit and reclaiming. This creates an opportunity
    for the SYSTEMPORT hardware to work on corrupted descriptors if we have
    multiple producers at once which is the case when using multiple transmit
    queues.
    
    This was particularly noticeable when using multiple flows/transmit queues and
    it showed up in interesting ways in that UDP packets would get a correct UDP
    header checksum being calculated over an incorrect packet length. Similarly TCP
    packets would get an equally correct checksum computed by the hardware over an
    incorrect packet length.
    
    The SYSTEMPORT hardware maintains an internal descriptor list that it re-arranges
    when the driver produces a new descriptor anytime it writes to the
    WRITE_PORT_{HI,LO} registers, there is however some delay in the hardware to
    re-organize its descriptors and it is possible that concurrent TX queues
    eventually break this internal allocation scheme to the point where the
    length/status part of the descriptor gets used for an incorrect data buffer.
    
    The fix is to impose a global serialization for all TX queues in the short
    section where we are writing to the WRITE_PORT_{HI,LO} registers which solves
    the corruption even with multiple concurrent TX queues being used.
    
    Fixes: 80105befdb4b ("net: systemport: add Broadcom SYSTEMPORT Ethernet MAC driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20211215202450.4086240-1-f.fainelli@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bf888fa4a5c0aa8ca5a074a4199cb49a360ebce
Author: D. Wythe <alibuda@linux.alibaba.com>
Date:   Wed Dec 15 20:29:21 2021 +0800

    net/smc: Prevent smc_release() from long blocking
    
    [ Upstream commit 5c15b3123f65f8fbb1b445d9a7e8812e0e435df2 ]
    
    In nginx/wrk benchmark, there's a hung problem with high probability
    on case likes that: (client will last several minutes to exit)
    
    server: smc_run nginx
    
    client: smc_run wrk -c 10000 -t 1 http://server
    
    Client hangs with the following backtrace:
    
    0 [ffffa7ce8Of3bbf8] __schedule at ffffffff9f9eOd5f
    1 [ffffa7ce8Of3bc88] schedule at ffffffff9f9eløe6
    2 [ffffa7ce8Of3bcaO] schedule_timeout at ffffffff9f9e3f3c
    3 [ffffa7ce8Of3bd2O] wait_for_common at ffffffff9f9el9de
    4 [ffffa7ce8Of3bd8O] __flush_work at ffffffff9fOfeOl3
    5 [ffffa7ce8øf3bdfO] smc_release at ffffffffcO697d24 [smc]
    6 [ffffa7ce8Of3be2O] __sock_release at ffffffff9f8O2e2d
    7 [ffffa7ce8Of3be4ø] sock_close at ffffffff9f8ø2ebl
    8 [ffffa7ce8øf3be48] __fput at ffffffff9f334f93
    9 [ffffa7ce8Of3be78] task_work_run at ffffffff9flOlff5
    10 [ffffa7ce8Of3beaO] do_exit at ffffffff9fOe5Ol2
    11 [ffffa7ce8Of3bflO] do_group_exit at ffffffff9fOe592a
    12 [ffffa7ce8Of3bf38] __x64_sys_exit_group at ffffffff9fOe5994
    13 [ffffa7ce8Of3bf4O] do_syscall_64 at ffffffff9f9d4373
    14 [ffffa7ce8Of3bfsO] entry_SYSCALL_64_after_hwframe at ffffffff9fa0007c
    
    This issue dues to flush_work(), which is used to wait for
    smc_connect_work() to finish in smc_release(). Once lots of
    smc_connect_work() was pending or all executing work dangling,
    smc_release() has to block until one worker comes to free, which
    is equivalent to wait another smc_connnect_work() to finish.
    
    In order to fix this, There are two changes:
    
    1. For those idle smc_connect_work(), cancel it from the workqueue; for
       executing smc_connect_work(), waiting for it to finish. For that
       purpose, replace flush_work() with cancel_work_sync().
    
    2. Since smc_connect() hold a reference for passive closing, if
       smc_connect_work() has been cancelled, release the reference.
    
    Fixes: 24ac3a08e658 ("net/smc: rebuild nonblocking connect")
    Reported-by: Tony Lu <tonylu@linux.alibaba.com>
    Tested-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: D. Wythe <alibuda@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Link: https://lore.kernel.org/r/1639571361-101128-1-git-send-email-alibuda@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56a6ffea18c2b9ae2e4b0ae316fcbc78ff94374a
Author: Gal Pressman <gal@nvidia.com>
Date:   Thu Dec 16 11:28:25 2021 +0200

    net: Fix double 0x prefix print in SKB dump
    
    [ Upstream commit 8a03ef676ade55182f9b05115763aeda6dc08159 ]
    
    When printing netdev features %pNF already takes care of the 0x prefix,
    remove the explicit one.
    
    Fixes: 6413139dfc64 ("skbuff: increase verbosity when dumping skb data")
    Signed-off-by: Gal Pressman <gal@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 027a13973dadb64ef4f19db56c9b619ee82c3375
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Dec 15 09:39:37 2021 -0500

    net/packet: rx_owner_map depends on pg_vec
    
    [ Upstream commit ec6af094ea28f0f2dda1a6a33b14cd57e36a9755 ]
    
    Packet sockets may switch ring versions. Avoid misinterpreting state
    between versions, whose fields share a union. rx_owner_map is only
    allocated with a packet ring (pg_vec) and both are swapped together.
    If pg_vec is NULL, meaning no packet ring was allocated, then neither
    was rx_owner_map. And the field may be old state from a tpacket_v3.
    
    Fixes: 61fad6816fc1 ("net/packet: tpacket_rcv: avoid a producer race condition")
    Reported-by: Syzbot <syzbot+1ac0994a0a0c55151121@syzkaller.appspotmail.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20211215143937.106178-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 699e794c12a3cd79045ff135bc87a53b97024e43
Author: Haimin Zhang <tcs.kernel@gmail.com>
Date:   Wed Dec 15 19:15:30 2021 +0800

    netdevsim: Zero-initialize memory for new map's value in function nsim_bpf_map_alloc
    
    [ Upstream commit 481221775d53d6215a6e5e9ce1cce6d2b4ab9a46 ]
    
    Zero-initialize memory for new map's value in function nsim_bpf_map_alloc
    since it may cause a potential kernel information leak issue, as follows:
    1. nsim_bpf_map_alloc calls nsim_map_alloc_elem to allocate elements for
    a new map.
    2. nsim_map_alloc_elem uses kmalloc to allocate map's value, but doesn't
    zero it.
    3. A user application can use IOCTL BPF_MAP_LOOKUP_ELEM to get specific
    element's information in the map.
    4. The kernel function map_lookup_elem will call bpf_map_copy_value to get
    the information allocated at step-2, then use copy_to_user to copy to the
    user buffer.
    This can only leak information for an array map.
    
    Fixes: 395cacb5f1a0 ("netdevsim: bpf: support fake map offload")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Haimin Zhang <tcs.kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215111530.72103-1-tcs.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a97e7dd4b713621be28d957b8cb417c90e810248
Author: Cyril Novikov <cnovikov@lynx.com>
Date:   Mon Nov 1 18:39:36 2021 -0700

    ixgbe: set X550 MDIO speed before talking to PHY
    
    [ Upstream commit bf0a375055bd1afbbf02a0ef45f7655da7b71317 ]
    
    The MDIO bus speed must be initialized before talking to the PHY the first
    time in order to avoid talking to it using a speed that the PHY doesn't
    support.
    
    This fixes HW initialization error -17 (IXGBE_ERR_PHY_ADDR_INVALID) on
    Denverton CPUs (a.k.a. the Atom C3000 family) on ports with a 10Gb network
    plugged in. On those devices, HLREG0[MDCSPD] resets to 1, which combined
    with the 10Gb network results in a 24MHz MDIO speed, which is apparently
    too fast for the connected PHY. PHY register reads over MDIO bus return
    garbage, leading to initialization failure.
    
    Reproduced with Linux kernel 4.19 and 5.15-rc7. Can be reproduced using
    the following setup:
    
    * Use an Atom C3000 family system with at least one X552 LAN on the SoC
    * Disable PXE or other BIOS network initialization if possible
      (the interface must not be initialized before Linux boots)
    * Connect a live 10Gb Ethernet cable to an X550 port
    * Power cycle (not reset, doesn't always work) the system and boot Linux
    * Observe: ixgbe interfaces w/ 10GbE cables plugged in fail with error -17
    
    Fixes: e84db7272798 ("ixgbe: Introduce function to control MDIO speed")
    Signed-off-by: Cyril Novikov <cnovikov@lynx.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8addba6cab94ce01686ea2e80ed1530f9dc33a9a
Author: Letu Ren <fantasquex@gmail.com>
Date:   Sat Nov 13 11:42:34 2021 +0800

    igbvf: fix double free in `igbvf_probe`
    
    [ Upstream commit b6d335a60dc624c0d279333b22c737faa765b028 ]
    
    In `igbvf_probe`, if register_netdev() fails, the program will go to
    label err_hw_init, and then to label err_ioremap. In free_netdev() which
    is just below label err_ioremap, there is `list_for_each_entry_safe` and
    `netif_napi_del` which aims to delete all entries in `dev->napi_list`.
    The program has added an entry `adapter->rx_ring->napi` which is added by
    `netif_napi_add` in igbvf_alloc_queues(). However, adapter->rx_ring has
    been freed below label err_hw_init. So this a UAF.
    
    In terms of how to patch the problem, we can refer to igbvf_remove() and
    delete the entry before `adapter->rx_ring`.
    
    The KASAN logs are as follows:
    
    [   35.126075] BUG: KASAN: use-after-free in free_netdev+0x1fd/0x450
    [   35.127170] Read of size 8 at addr ffff88810126d990 by task modprobe/366
    [   35.128360]
    [   35.128643] CPU: 1 PID: 366 Comm: modprobe Not tainted 5.15.0-rc2+ #14
    [   35.129789] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    [   35.131749] Call Trace:
    [   35.132199]  dump_stack_lvl+0x59/0x7b
    [   35.132865]  print_address_description+0x7c/0x3b0
    [   35.133707]  ? free_netdev+0x1fd/0x450
    [   35.134378]  __kasan_report+0x160/0x1c0
    [   35.135063]  ? free_netdev+0x1fd/0x450
    [   35.135738]  kasan_report+0x4b/0x70
    [   35.136367]  free_netdev+0x1fd/0x450
    [   35.137006]  igbvf_probe+0x121d/0x1a10 [igbvf]
    [   35.137808]  ? igbvf_vlan_rx_add_vid+0x100/0x100 [igbvf]
    [   35.138751]  local_pci_probe+0x13c/0x1f0
    [   35.139461]  pci_device_probe+0x37e/0x6c0
    [   35.165526]
    [   35.165806] Allocated by task 366:
    [   35.166414]  ____kasan_kmalloc+0xc4/0xf0
    [   35.167117]  foo_kmem_cache_alloc_trace+0x3c/0x50 [igbvf]
    [   35.168078]  igbvf_probe+0x9c5/0x1a10 [igbvf]
    [   35.168866]  local_pci_probe+0x13c/0x1f0
    [   35.169565]  pci_device_probe+0x37e/0x6c0
    [   35.179713]
    [   35.179993] Freed by task 366:
    [   35.180539]  kasan_set_track+0x4c/0x80
    [   35.181211]  kasan_set_free_info+0x1f/0x40
    [   35.181942]  ____kasan_slab_free+0x103/0x140
    [   35.182703]  kfree+0xe3/0x250
    [   35.183239]  igbvf_probe+0x1173/0x1a10 [igbvf]
    [   35.184040]  local_pci_probe+0x13c/0x1f0
    
    Fixes: d4e0fe01a38a0 (igbvf: add new driver to support 82576 virtual functions)
    Reported-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Letu Ren <fantasquex@gmail.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36844e250a2ebea90cf3bdf6024a10c1e07eb2c0
Author: Karen Sornek <karen.sornek@intel.com>
Date:   Tue Aug 31 13:16:35 2021 +0200

    igb: Fix removal of unicast MAC filters of VFs
    
    [ Upstream commit 584af82154f56e6b2740160fcc84a2966d969e15 ]
    
    Move checking condition of VF MAC filter before clearing
    or adding MAC filter to VF to prevent potential blackout caused
    by removal of necessary and working VF's MAC filter.
    
    Fixes: 1b8b062a99dc ("igb: add VF trust infrastructure")
    Signed-off-by: Karen Sornek <karen.sornek@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bca4a53ea72c6e4a8b28e0723e7020dffc73218d
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Dec 10 09:55:29 2021 -0700

    soc/tegra: fuse: Fix bitwise vs. logical OR warning
    
    [ Upstream commit a7083763619f7485ccdade160deb81737cf2732f ]
    
    A new warning in clang points out two instances where boolean
    expressions are being used with a bitwise OR instead of logical OR:
    
    drivers/soc/tegra/fuse/speedo-tegra20.c:72:9: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
                    reg = tegra_fuse_read_spare(i) |
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
    drivers/soc/tegra/fuse/speedo-tegra20.c:72:9: note: cast one or both operands to int to silence this warning
    drivers/soc/tegra/fuse/speedo-tegra20.c:87:9: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
                    reg = tegra_fuse_read_spare(i) |
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
    drivers/soc/tegra/fuse/speedo-tegra20.c:87:9: note: cast one or both operands to int to silence this warning
    2 warnings generated.
    
    The motivation for the warning is that logical operations short circuit
    while bitwise operations do not.
    
    In this instance, tegra_fuse_read_spare() is not semantically returning
    a boolean, it is returning a bit value. Use u32 for its return type so
    that it can be used with either bitwise or boolean operators without any
    warnings.
    
    Fixes: 25cd5a391478 ("ARM: tegra: Add speedo-based process identification")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1488
    Suggested-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 166f0adf7e7525c87595ceadb21a91e2a9519a1e
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Tue Dec 14 18:46:59 2021 +0800

    rds: memory leak in __rds_conn_create()
    
    [ Upstream commit 5f9562ebe710c307adc5f666bf1a2162ee7977c0 ]
    
    __rds_conn_create() did not release conn->c_path when loop_trans != 0 and
    trans->t_prefer_loopback != 0 and is_outgoing == 0.
    
    Fixes: aced3ce57cd3 ("RDS tcp loopback connection can hang")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Sharath Srinivasan <sharath.srinivasan@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cb405ee533442a5072fddb52acd28b9019cf847
Author: Baowen Zheng <baowen.zheng@corigine.com>
Date:   Mon Dec 13 15:46:04 2021 +0100

    flow_offload: return EOPNOTSUPP for the unsupported mpls action type
    
    [ Upstream commit 166b6a46b78bf8b9559a6620c3032f9fe492e082 ]
    
    We need to return EOPNOTSUPP for the unsupported mpls action type when
    setup the flow action.
    
    In the original implement, we will return 0 for the unsupported mpls
    action type, actually we do not setup it and the following actions
    to the flow action entry.
    
    Fixes: 9838b20a7fb2 ("net: sched: take rtnl lock in tc_setup_flow_action()")
    Signed-off-by: Baowen Zheng <baowen.zheng@corigine.com>
    Signed-off-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 066a637d1ce7ae912e73bd87764c9843bc24abde
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Mon Feb 17 12:12:09 2020 +0200

    net: sched: lock action when translating it to flow_action infra
    
    [ Upstream commit 7a47281439ba00b11fc098f36695522184ce5a82 ]
    
    In order to remove dependency on rtnl lock, take action's tcfa_lock when
    constructing its representation as flow_action_entry structure.
    
    Refactor tcf_sample_get_group() to assume that caller holds tcf_lock and
    don't take it manually. This callback is only called from flow_action infra
    representation translator which now calls it with tcf_lock held, so this
    refactoring is necessary to prevent deadlock.
    
    Allocate memory with GFP_ATOMIC flag for ip_tunnel_info copy because
    tcf_tunnel_info_copy() is only called from flow_action representation infra
    code with tcf_lock spinlock taken.
    
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7660f9535ade84ea57aed1c55d102bfb23dd2ff
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 29 15:32:46 2021 +0200

    mac80211: fix lookup when adding AddBA extension element
    
    [ Upstream commit 511ab0c1dfb260a6b17b8771109e8d63474473a7 ]
    
    We should be doing the HE capabilities lookup based on the full
    interface type so if P2P doesn't have HE but client has it doesn't
    get confused. Fix that.
    
    Fixes: 2ab45876756f ("mac80211: add support for the ADDBA extension element")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211129152938.010fc1d61137.If3a468145f29d670cb00a693bed559d8290ba693@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f363af7c7045f68c2025d46879d0e01facbe24c9
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu May 28 21:34:44 2020 +0200

    mac80211: accept aggregation sessions on 6 GHz
    
    [ Upstream commit 93382a0d119b3ab95e3ebca51ea15aa87187b493 ]
    
    On 6 GHz, stations don't have ht_supported set, but they can
    still do aggregation since they must have HE, allow that.
    
    Link: https://lore.kernel.org/r/20200528213443.776d3c891b64.Ifa099d450617b50c691832b3c4aa08959fab520a@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e6526148149a207a89bc87f456a88318eb602c5
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Dec 2 15:26:25 2021 +0200

    mac80211: agg-tx: don't schedule_and_wake_txq() under sta->lock
    
    [ Upstream commit 06c41bda0ea14aa7fba932a9613c4ee239682cf0 ]
    
    When we call ieee80211_agg_start_txq(), that will in turn call
    schedule_and_wake_txq(). Called from ieee80211_stop_tx_ba_cb()
    this is done under sta->lock, which leads to certain circular
    lock dependencies, as reported by Chris Murphy:
    https://lore.kernel.org/r/CAJCQCtSXJ5qA4bqSPY=oLRMbv-irihVvP7A2uGutEbXQVkoNaw@mail.gmail.com
    
    In general, ieee80211_agg_start_txq() is usually not called
    with sta->lock held, only in this one place. But it's always
    called with sta->ampdu_mlme.mtx held, and that's therefore
    clearly sufficient.
    
    Change ieee80211_stop_tx_ba_cb() to also call it without the
    sta->lock held, by factoring it out of ieee80211_remove_tid_tx()
    (which is only called in this one place).
    
    This breaks the locking chain and makes it less likely that
    we'll have similar locking chain problems in the future.
    
    Fixes: ba8c3d6f16a1 ("mac80211: add an intermediate software queue implementation")
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211202152554.f519884c8784.I555fef8e67d93fff3d9a304886c4a9f8b322e591@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ceb30f48d81706c6400667eddb23d96b64c685dd
Author: Mordechay Goodstein <mordechay.goodstein@intel.com>
Date:   Thu Mar 26 15:09:37 2020 +0200

    mac80211: agg-tx: refactor sending addba
    
    [ Upstream commit 31d8bb4e07f80935ee9bf599a9d99de7ca90fc5a ]
    
    We move the actual arming the timer and sending ADDBA to a function
    for the use in different places calling the same logic.
    
    Signed-off-by: Mordechay Goodstein <mordechay.goodstein@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20200326150855.58a337eb90a1.I75934e6464535fbf43969acc796bc886291e79a5@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eeaf9c0609e02cacfe074255c2264866133e23ec
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Mon Dec 13 16:36:00 2021 +0800

    selftest/net/forwarding: declare NETIFS p9 p10
    
    [ Upstream commit 71da1aec215290e249d09c44c768df859f3a3bba ]
    
    The recent GRE selftests defined NUM_NETIFS=10. If the users copy
    forwarding.config.sample to forwarding.config directly, they will get
    error "Command line is not complete" when run the GRE tests, because
    create_netif_veth() failed with no interface name defined.
    
    Fix it by extending the NETIFS with p9 and p10.
    
    Fixes: 2800f2485417 ("selftests: forwarding: Test multipath hashing on inner IP pkts for GRE tunnel")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2252220d9ebbb66dc3b3c35225ce3632655eb56f
Author: Alyssa Ross <hi@alyssa.is>
Date:   Thu Nov 25 15:44:38 2021 +0000

    dmaengine: st_fdma: fix MODULE_ALIAS
    
    [ Upstream commit 822c9f2b833c53fc67e8adf6f63ecc3ea24d502c ]
    
    modprobe can't handle spaces in aliases.
    
    Fixes: 6b4cd727eaf1 ("dmaengine: st_fdma: Add STMicroelectronics FDMA engine driver support")
    Signed-off-by: Alyssa Ross <hi@alyssa.is>
    Link: https://lore.kernel.org/r/20211125154441.2626214-1-hi@alyssa.is
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18203fe176439d72829540820514d3d89fc74379
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 11:26:16 2021 -0700

    selftests: Fix IPv6 address bind tests
    
    [ Upstream commit 28a2686c185e84b6aa6a4d9c9a972360eb7ca266 ]
    
    IPv6 allows binding a socket to a device then binding to an address
    not on the device (__inet6_bind -> ipv6_chk_addr with strict flag
    not set). Update the bind tests to reflect legacy behavior.
    
    Fixes: 34d0302ab861 ("selftests: Add ipv6 address bind tests to fcnal-test")
    Reported-by: Li Zhijian <lizhijian@fujitsu.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b46f0afa74e756a31e4e61fe48a23449dca8a3a8
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 10:21:08 2021 -0700

    selftests: Fix raw socket bind tests with VRF
    
    [ Upstream commit 0f108ae4452025fef529671998f6c7f1c4526790 ]
    
    Commit referenced below added negative socket bind tests for VRF. The
    socket binds should fail since the address to bind to is in a VRF yet
    the socket is not bound to the VRF or a device within it. Update the
    expected return code to check for 1 (bind failure) so the test passes
    when the bind fails as expected. Add a 'show_hint' comment to explain
    why the bind is expected to fail.
    
    Fixes: 75b2b2b3db4c ("selftests: Add ipv4 address bind tests to fcnal-test")
    Reported-by: Li Zhijian <lizhijian@fujitsu.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b5596e531253ce84213d9daa7120b71c9d83198
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 9 10:50:58 2021 -0800

    inet_diag: fix kernel-infoleak for UDP sockets
    
    [ Upstream commit 71ddeac8cd1d217744a0e060ff520e147c9328d1 ]
    
    KMSAN reported a kernel-infoleak [1], that can exploited
    by unpriv users.
    
    After analysis it turned out UDP was not initializing
    r->idiag_expires. Other users of inet_sk_diag_fill()
    might make the same mistake in the future, so fix this
    in inet_sk_diag_fill().
    
    [1]
    BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:121 [inline]
    BUG: KMSAN: kernel-infoleak in copyout lib/iov_iter.c:156 [inline]
    BUG: KMSAN: kernel-infoleak in _copy_to_iter+0x69d/0x25c0 lib/iov_iter.c:670
     instrument_copy_to_user include/linux/instrumented.h:121 [inline]
     copyout lib/iov_iter.c:156 [inline]
     _copy_to_iter+0x69d/0x25c0 lib/iov_iter.c:670
     copy_to_iter include/linux/uio.h:155 [inline]
     simple_copy_to_iter+0xf3/0x140 net/core/datagram.c:519
     __skb_datagram_iter+0x2cb/0x1280 net/core/datagram.c:425
     skb_copy_datagram_iter+0xdc/0x270 net/core/datagram.c:533
     skb_copy_datagram_msg include/linux/skbuff.h:3657 [inline]
     netlink_recvmsg+0x660/0x1c60 net/netlink/af_netlink.c:1974
     sock_recvmsg_nosec net/socket.c:944 [inline]
     sock_recvmsg net/socket.c:962 [inline]
     sock_read_iter+0x5a9/0x630 net/socket.c:1035
     call_read_iter include/linux/fs.h:2156 [inline]
     new_sync_read fs/read_write.c:400 [inline]
     vfs_read+0x1631/0x1980 fs/read_write.c:481
     ksys_read+0x28c/0x520 fs/read_write.c:619
     __do_sys_read fs/read_write.c:629 [inline]
     __se_sys_read fs/read_write.c:627 [inline]
     __x64_sys_read+0xdb/0x120 fs/read_write.c:627
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was created at:
     slab_post_alloc_hook mm/slab.h:524 [inline]
     slab_alloc_node mm/slub.c:3251 [inline]
     __kmalloc_node_track_caller+0xe0c/0x1510 mm/slub.c:4974
     kmalloc_reserve net/core/skbuff.c:354 [inline]
     __alloc_skb+0x545/0xf90 net/core/skbuff.c:426
     alloc_skb include/linux/skbuff.h:1126 [inline]
     netlink_dump+0x3d5/0x16a0 net/netlink/af_netlink.c:2245
     __netlink_dump_start+0xd1c/0xee0 net/netlink/af_netlink.c:2370
     netlink_dump_start include/linux/netlink.h:254 [inline]
     inet_diag_handler_cmd+0x2e7/0x400 net/ipv4/inet_diag.c:1343
     sock_diag_rcv_msg+0x24a/0x620
     netlink_rcv_skb+0x447/0x800 net/netlink/af_netlink.c:2491
     sock_diag_rcv+0x63/0x80 net/core/sock_diag.c:276
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x1095/0x1360 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x16f3/0x1870 net/netlink/af_netlink.c:1916
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg net/socket.c:724 [inline]
     sock_write_iter+0x594/0x690 net/socket.c:1057
     do_iter_readv_writev+0xa7f/0xc70
     do_iter_write+0x52c/0x1500 fs/read_write.c:851
     vfs_writev fs/read_write.c:924 [inline]
     do_writev+0x63f/0xe30 fs/read_write.c:967
     __do_sys_writev fs/read_write.c:1040 [inline]
     __se_sys_writev fs/read_write.c:1037 [inline]
     __x64_sys_writev+0xe5/0x120 fs/read_write.c:1037
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Bytes 68-71 of 312 are uninitialized
    Memory access of size 312 starts at ffff88812ab54000
    Data copied to user address 0000000020001440
    
    CPU: 1 PID: 6365 Comm: syz-executor801 Not tainted 5.16.0-rc3-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 3c4d05c80567 ("inet_diag: Introduce the inet socket dumping routine")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20211209185058.53917-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c589cf07bd5fcee660a1205d1c62303d8ccea23
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Nov 5 14:11:50 2019 -0800

    inet_diag: use jiffies_delta_to_msecs()
    
    [ Upstream commit 3828a93f5cfdf5d8a4ff9dead741e9a2871ff57b ]
    
    Use jiffies_delta_to_msecs() to avoid reporting 'infinite'
    timeouts and to cleanup code.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d80462fbdcafd536dcad7569e65d3d14a7e9f2f
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 10 06:20:46 2021 -0800

    sch_cake: do not call cake_destroy() from cake_init()
    
    [ Upstream commit ab443c53916730862cec202078d36fd4008bea79 ]
    
    qdiscs are not supposed to call their own destroy() method
    from init(), because core stack already does that.
    
    syzbot was able to trigger use after free:
    
    DEBUG_LOCKS_WARN_ON(lock->magic != lock)
    WARNING: CPU: 0 PID: 21902 at kernel/locking/mutex.c:586 __mutex_lock_common kernel/locking/mutex.c:586 [inline]
    WARNING: CPU: 0 PID: 21902 at kernel/locking/mutex.c:586 __mutex_lock+0x9ec/0x12f0 kernel/locking/mutex.c:740
    Modules linked in:
    CPU: 0 PID: 21902 Comm: syz-executor189 Not tainted 5.16.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__mutex_lock_common kernel/locking/mutex.c:586 [inline]
    RIP: 0010:__mutex_lock+0x9ec/0x12f0 kernel/locking/mutex.c:740
    Code: 08 84 d2 0f 85 19 08 00 00 8b 05 97 38 4b 04 85 c0 0f 85 27 f7 ff ff 48 c7 c6 20 00 ac 89 48 c7 c7 a0 fe ab 89 e8 bf 76 ba ff <0f> 0b e9 0d f7 ff ff 48 8b 44 24 40 48 8d b8 c8 08 00 00 48 89 f8
    RSP: 0018:ffffc9000627f290 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff88802315d700 RSI: ffffffff815f1db8 RDI: fffff52000c4fe44
    RBP: ffff88818f28e000 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff815ebb5e R11: 0000000000000000 R12: 0000000000000000
    R13: dffffc0000000000 R14: ffffc9000627f458 R15: 0000000093c30000
    FS:  0000555556abc400(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fda689c3303 CR3: 000000001cfbb000 CR4: 0000000000350ef0
    Call Trace:
     <TASK>
     tcf_chain0_head_change_cb_del+0x2e/0x3d0 net/sched/cls_api.c:810
     tcf_block_put_ext net/sched/cls_api.c:1381 [inline]
     tcf_block_put_ext net/sched/cls_api.c:1376 [inline]
     tcf_block_put+0xbc/0x130 net/sched/cls_api.c:1394
     cake_destroy+0x3f/0x80 net/sched/sch_cake.c:2695
     qdisc_create.constprop.0+0x9da/0x10f0 net/sched/sch_api.c:1293
     tc_modify_qdisc+0x4c5/0x1980 net/sched/sch_api.c:1660
     rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5571
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2496
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x904/0xdf0 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:724
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2409
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2463
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2492
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f1bb06badb9
    Code: Unable to access opcode bytes at RIP 0x7f1bb06bad8f.
    RSP: 002b:00007fff3012a658 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f1bb06badb9
    RDX: 0000000000000000 RSI: 00000000200007c0 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 0000000000000003 R09: 0000000000000003
    R10: 0000000000000003 R11: 0000000000000246 R12: 00007fff3012a688
    R13: 00007fff3012a6a0 R14: 00007fff3012a6e0 R15: 00000000000013c2
     </TASK>
    
    Fixes: 046f6fd5daef ("sched: Add Common Applications Kept Enhanced (cake) qdisc")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Link: https://lore.kernel.org/r/20211210142046.698336-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fba53ccfb1b6ad59cb1c586e93e1d3d863551f6
Author: Philipp Rudo <prudo@redhat.com>
Date:   Wed Dec 8 14:07:41 2021 +0100

    s390/kexec_file: fix error handling when applying relocations
    
    [ Upstream commit 41967a37b8eedfee15b81406a9f3015be90d3980 ]
    
    arch_kexec_apply_relocations_add currently ignores all errors returned
    by arch_kexec_do_relocs. This means that every unknown relocation is
    silently skipped causing unpredictable behavior while the relocated code
    runs. Fix this by checking for errors and fail kexec_file_load if an
    unknown relocation type is encountered.
    
    The problem was found after gcc changed its behavior and used
    R_390_PLT32DBL relocations for brasl instruction and relied on ld to
    resolve the relocations in the final link in case direct calls are
    possible. As the purgatory code is only linked partially (option -r)
    ld didn't resolve the relocations leaving them for arch_kexec_do_relocs.
    But arch_kexec_do_relocs doesn't know how to handle R_390_PLT32DBL
    relocations so they were silently skipped. This ultimately caused an
    endless loop in the purgatory as the brasl instructions kept branching
    to itself.
    
    Fixes: 71406883fd35 ("s390/kexec_file: Add kexec_file_load system call")
    Reported-by: Tao Liu <ltao@redhat.com>
    Signed-off-by: Philipp Rudo <prudo@redhat.com>
    Link: https://lore.kernel.org/r/20211208130741.5821-3-prudo@redhat.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b380bf012d2bf624c8dbfa2320607736871d1078
Author: Jie2x Zhou <jie2x.zhou@intel.com>
Date:   Thu Dec 9 10:02:30 2021 +0800

    selftests: net: Correct ping6 expected rc from 2 to 1
    
    [ Upstream commit 92816e2629808726af015c7f5b14adc8e4f8b147 ]
    
    ./fcnal-test.sh -v -t ipv6_ping
    TEST: ping out, VRF bind - ns-B IPv6 LLA                                      [FAIL]
    TEST: ping out, VRF bind - multicast IP                                       [FAIL]
    
    ping6 is failing as it should.
    COMMAND: ip netns exec ns-A /bin/ping6 -c1 -w1 fe80::7c4c:bcff:fe66:a63a%red
    strace of ping6 shows it is failing with '1',
    so change the expected rc from 2 to 1.
    
    Fixes: c0644e71df33 ("selftests: Add ipv6 ping tests to fcnal-test")
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Jie2x Zhou <jie2x.zhou@intel.com>
    Link: https://lore.kernel.org/r/20211209020230.37270-1-jie2x.zhou@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec5c00be783695803345a6fcc3b6d23d252bc4ee
Author: Mike Tipton <quic_mdtipton@quicinc.com>
Date:   Mon Nov 8 20:34:38 2021 -0800

    clk: Don't parent clks until the parent is fully registered
    
    [ Upstream commit 54baf56eaa40aa5cdcd02b3c20d593e4e1211220 ]
    
    Before commit fc0c209c147f ("clk: Allow parents to be specified without
    string names") child clks couldn't find their parent until the parent
    clk was added to a list in __clk_core_init(). After that commit, child
    clks can reference their parent clks directly via a clk_hw pointer, or
    they can lookup that clk_hw pointer via DT if the parent clk is
    registered with an OF clk provider.
    
    The common clk framework treats hw->core being non-NULL as "the clk is
    registered" per the logic within clk_core_fill_parent_index():
    
            parent = entry->hw->core;
            /*
             * We have a direct reference but it isn't registered yet?
             * Orphan it and let clk_reparent() update the orphan status
             * when the parent is registered.
             */
            if (!parent)
    
    Therefore we need to be extra careful to not set hw->core until the clk
    is fully registered with the clk framework. Otherwise we can get into a
    situation where a child finds a parent clk and we move the child clk off
    the orphan list when the parent isn't actually registered, wrecking our
    enable accounting and breaking critical clks.
    
    Consider the following scenario:
    
      CPU0                                     CPU1
      ----                                     ----
      struct clk_hw clkBad;
      struct clk_hw clkA;
    
      clkA.init.parent_hws = { &clkBad };
    
      clk_hw_register(&clkA)                   clk_hw_register(&clkBad)
       ...                                      __clk_register()
                                                 hw->core = core
                                                 ...
       __clk_register()
        __clk_core_init()
         clk_prepare_lock()
         __clk_init_parent()
          clk_core_get_parent_by_index()
           clk_core_fill_parent_index()
            if (entry->hw) {
             parent = entry->hw->core;
    
    At this point, 'parent' points to clkBad even though clkBad hasn't been
    fully registered yet. Ouch! A similar problem can happen if a clk
    controller registers orphan clks that are referenced in the DT node of
    another clk controller.
    
    Let's fix all this by only setting the hw->core pointer underneath the
    clk prepare lock in __clk_core_init(). This way we know that
    clk_core_fill_parent_index() can't see hw->core be non-NULL until the
    clk is fully registered.
    
    Fixes: fc0c209c147f ("clk: Allow parents to be specified without string names")
    Signed-off-by: Mike Tipton <quic_mdtipton@quicinc.com>
    Link: https://lore.kernel.org/r/20211109043438.4639-1-quic_mdtipton@quicinc.com
    [sboyd@kernel.org: Reword commit text, update comment]
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f83ed203c822ee5c9e30a31c387714503d6603b3
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Nov 1 19:36:30 2021 -0500

    ARM: socfpga: dts: fix qspi node compatible
    
    [ Upstream commit cb25b11943cbcc5a34531129952870420f8be858 ]
    
    The QSPI flash node needs to have the required "jedec,spi-nor" in the
    compatible string.
    
    Fixes: 1df99da8953 ("ARM: dts: socfpga: Enable QSPI in Arria10 devkit")
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46b9e29db2012a4d2a40a26101862e002ccf387b
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 22 12:47:40 2021 +0100

    mac80211: track only QoS data frames for admission control
    
    [ Upstream commit d5e568c3a4ec2ddd23e7dc5ad5b0c64e4f22981a ]
    
    For admission control, obviously all of that only works for
    QoS data frames, otherwise we cannot even access the QoS
    field in the header.
    
    Syzbot reported (see below) an uninitialized value here due
    to a status of a non-QoS nullfunc packet, which isn't even
    long enough to contain the QoS header.
    
    Fix this to only do anything for QoS data packets.
    
    Reported-by: syzbot+614e82b88a1a4973e534@syzkaller.appspotmail.com
    Fixes: 02219b3abca5 ("mac80211: add WMM admission control support")
    Link: https://lore.kernel.org/r/20211122124737.dad29e65902a.Ieb04587afacb27c14e0de93ec1bfbefb238cc2a0@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6f18191c6c1d531907bbcb838d8959408f2fb53
Author: Alex Bee <knaerzche@gmail.com>
Date:   Wed Oct 27 16:37:25 2021 +0200

    arm64: dts: rockchip: fix audio-supply for Rock Pi 4
    
    [ Upstream commit 8240e87f16d17a9592c9d67857a3dcdbcb98f10d ]
    
    As stated in the schematics [1] and [2] P5 the APIO5 domain is supplied
    by RK808-D Buck4, which in our case vcc1v8_codec - i.e. a 1.8 V regulator.
    
    Currently only white noise comes from the ES8316's output, which - for
    whatever reason - came up only after the the correct switch from i2s0_8ch_bus
    to i2s0_2ch_bus for i2s0's pinctrl was done.
    
    Fix this by setting the correct regulator for audio-supply.
    
    [1] https://dl.radxa.com/rockpi4/docs/hw/rockpi4/rockpi4_v13_sch_20181112.pdf
    [2] https://dl.radxa.com/rockpi4/docs/hw/rockpi4/rockpi_4c_v12_sch_20200620.pdf
    
    Fixes: 1b5715c602fd ("arm64: dts: rockchip: add ROCK Pi 4 DTS support")
    Signed-off-by: Alex Bee <knaerzche@gmail.com>
    Link: https://lore.kernel.org/r/20211027143726.165809-1-knaerzche@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86f2789e3c153661822448546f3c96da75336267
Author: John Keeping <john@metanate.com>
Date:   Tue Nov 2 18:29:08 2021 +0000

    arm64: dts: rockchip: fix rk3399-leez-p710 vcc3v3-lan supply
    
    [ Upstream commit 2b454a90e2ccdd6e03f88f930036da4df577be76 ]
    
    Correct a typo in the vin-supply property.  The input supply is
    always-on, so this mistake doesn't affect whether the supply is actually
    enabled correctly.
    
    Fixes: fc702ed49a86 ("arm64: dts: rockchip: Add dts for Leez RK3399 P710 SBC")
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20211102182908.3409670-3-john@metanate.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bb01424330dd4de4647039ccc76532d081b4612
Author: Artem Lapkin <email2tema@gmail.com>
Date:   Mon Nov 15 16:33:21 2021 +0800

    arm64: dts: rockchip: remove mmc-hs400-enhanced-strobe from rk3399-khadas-edge
    
    [ Upstream commit 6dd0053683804427529ef3523f7872f473440a19 ]
    
    Remove mmc-hs400-enhanced-strobe from the rk3399-khadas-edge dts to
    improve compatibility with a wider range of eMMC chips.
    
    Before (BJTD4R 29.1 GiB):
    
    [    7.001493] mmc2: CQHCI version 5.10
    [    7.027971] mmc2: SDHCI controller on fe330000.mmc [fe330000.mmc] using ADMA
    .......
    [    7.207086] mmc2: mmc_select_hs400es failed, error -110
    [    7.207129] mmc2: error -110 whilst initialising MMC card
    [    7.308893] mmc2: mmc_select_hs400es failed, error -110
    [    7.308921] mmc2: error -110 whilst initialising MMC card
    [    7.427524] mmc2: mmc_select_hs400es failed, error -110
    [    7.427546] mmc2: error -110 whilst initialising MMC card
    [    7.590993] mmc2: mmc_select_hs400es failed, error -110
    [    7.591012] mmc2: error -110 whilst initialising MMC card
    
    After:
    
    [    6.960785] mmc2: CQHCI version 5.10
    [    6.984672] mmc2: SDHCI controller on fe330000.mmc [fe330000.mmc] using ADMA
    [    7.175021] mmc2: Command Queue Engine enabled
    [    7.175053] mmc2: new HS400 MMC card at address 0001
    [    7.175808] mmcblk2: mmc2:0001 BJTD4R 29.1 GiB
    [    7.176033] mmcblk2boot0: mmc2:0001 BJTD4R 4.00 MiB
    [    7.176245] mmcblk2boot1: mmc2:0001 BJTD4R 4.00 MiB
    [    7.176495] mmcblk2rpmb: mmc2:0001 BJTD4R 4.00 MiB, chardev (242:0)
    
    Fixes: c2aacceedc86 ("arm64: dts: rockchip: Add support for Khadas Edge/Edge-V/Captain boards")
    Signed-off-by: Artem Lapkin <art@khadas.com>
    Link: https://lore.kernel.org/r/20211115083321.2627461-1-art@khadas.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0759696de6851d7536efddfdd2dfed4c4df1f09
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Mon Nov 29 15:08:00 2021 -0500

    nfsd: fix use-after-free due to delegation race
    
    commit 548ec0805c399c65ed66c6641be467f717833ab5 upstream.
    
    A delegation break could arrive as soon as we've called vfs_setlease.  A
    delegation break runs a callback which immediately (in
    nfsd4_cb_recall_prepare) adds the delegation to del_recall_lru.  If we
    then exit nfs4_set_delegation without hashing the delegation, it will be
    freed as soon as the callback is done with it, without ever being
    removed from del_recall_lru.
    
    Symptoms show up later as use-after-free or list corruption warnings,
    usually in the laundromat thread.
    
    I suspect aba2072f4523 "nfsd: grant read delegations to clients holding
    writes" made this bug easier to hit, but I looked as far back as v3.0
    and it looks to me it already had the same problem.  So I'm not sure
    where the bug was introduced; it may have been there from the beginning.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    [Salvatore Bonaccorso: Backport for context changes to versions which do
    not have 20b7d86f29d3 ("nfsd: use boottime for lease expiry calculation")]
    Signed-off-by: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7243aa71509a83409bf5a086ea24f029afb7bb69
Author: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date:   Fri Oct 22 14:19:29 2021 +0200

    iio: adc: stm32: fix a current leak by resetting pcsel before disabling vdda
    
    commit f711f28e71e965c0d1141c830fa7131b41abbe75 upstream.
    
    Some I/Os are connected to ADC input channels, when the corresponding bit
    in PCSEL register are set on STM32H7 and STM32MP15. This is done in the
    prepare routine of stm32-adc driver.
    There are constraints here, as PCSEL shouldn't be set when VDDA supply
    is disabled. Enabling/disabling of VDDA supply in done via stm32-adc-core
    runtime PM routines (before/after ADC is enabled/disabled).
    
    Currently, PCSEL remains set when disabling ADC. Later on, PM runtime
    can disable the VDDA supply. This creates some conditions on I/Os that
    can start to leak current.
    So PCSEL needs to be cleared when disabling the ADC.
    
    Fixes: 95e339b6e85d ("iio: adc: stm32: add support for STM32H7")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
    Reviewed-by: Olivier Moysan <olivier.moysan@foss.st.com>
    Link: https://lore.kernel.org/r/1634905169-23762-1-git-send-email-fabrice.gasnier@foss.st.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d3277eabd542fb662be23696e5ec9f390d688e1
Author: Paul Moore <paul@paul-moore.com>
Date:   Thu Dec 9 11:46:07 2021 -0500

    audit: improve robustness of the audit queue handling
    
    commit f4b3ee3c85551d2d343a3ba159304066523f730f upstream.
    
    If the audit daemon were ever to get stuck in a stopped state the
    kernel's kauditd_thread() could get blocked attempting to send audit
    records to the userspace audit daemon.  With the kernel thread
    blocked it is possible that the audit queue could grow unbounded as
    certain audit record generating events must be exempt from the queue
    limits else the system enter a deadlock state.
    
    This patch resolves this problem by lowering the kernel thread's
    socket sending timeout from MAX_SCHEDULE_TIMEOUT to HZ/10 and tweaks
    the kauditd_send_queue() function to better manage the various audit
    queues when connection problems occur between the kernel and the
    audit daemon.  With this patch, the backlog may temporarily grow
    beyond the defined limits when the audit daemon is stopped and the
    system is under heavy audit pressure, but kauditd_thread() will
    continue to make progress and drain the queues as it would for other
    connection problems.  For example, with the audit daemon put into a
    stopped state and the system configured to audit every syscall it
    was still possible to shutdown the system without a kernel panic,
    deadlock, etc.; granted, the system was slow to shutdown but that is
    to be expected given the extreme pressure of recording every syscall.
    
    The timeout value of HZ/10 was chosen primarily through
    experimentation and this developer's "gut feeling".  There is likely
    no one perfect value, but as this scenario is limited in scope (root
    privileges would be needed to send SIGSTOP to the audit daemon), it
    is likely not worth exposing this as a tunable at present.  This can
    always be done at a later date if it proves necessary.
    
    Cc: stable@vger.kernel.org
    Fixes: 5b52330bbfe63 ("audit: fix auditd/kernel connection state tracking")
    Reported-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Tested-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 501ecd90efdc9b2edc6c28852ecd098a4adf8f00
Author: Joe Thornber <ejt@redhat.com>
Date:   Wed Nov 24 12:07:39 2021 -0500

    dm btree remove: fix use after free in rebalance_children()
    
    commit 1b8d2789dad0005fd5e7d35dab26a8e1203fb6da upstream.
    
    Move dm_tm_unlock() after dm_tm_dec().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b25e213522f6a9f6ba4215d8fe417afa5abf992f
Author: Jerome Marchand <jmarchan@redhat.com>
Date:   Fri Dec 10 10:38:27 2021 +0100

    recordmcount.pl: look for jgnop instruction as well as bcrl on s390
    
    commit 85bf17b28f97ca2749968d8786dc423db320d9c2 upstream.
    
    On s390, recordmcount.pl is looking for "bcrl 0,<xxx>" instructions in
    the objdump -d outpout. However since binutils 2.37, objdump -d
    display "jgnop <xxx>" for the same instruction. Update the
    mcount_regex so that it accepts both.
    
    Signed-off-by: Jerome Marchand <jmarchan@redhat.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211210093827.1623286-1-jmarchan@redhat.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0954f1010ad41d9c76ba92109f02265f0c44652
Author: Will Deacon <will@kernel.org>
Date:   Wed Dec 1 11:20:18 2021 +0000

    virtio_ring: Fix querying of maximum DMA mapping size for virtio device
    
    commit 817fc978b5a29b039db0418a91072b31c9aab152 upstream.
    
    virtio_max_dma_size() returns the maximum DMA mapping size of the virtio
    device by querying dma_max_mapping_size() for the device when the DMA
    API is in use for the vring. Unfortunately, the device passed is
    initialised by register_virtio_device() and does not inherit the DMA
    configuration from its parent, resulting in SWIOTLB errors when bouncing
    is enabled and the default 256K mapping limit (IO_TLB_SEGSIZE) is not
    respected:
    
      | virtio-pci 0000:00:01.0: swiotlb buffer is full (sz: 294912 bytes), total 1024 (slots), used 725 (slots)
    
    Follow the pattern used elsewhere in the virtio_ring code when calling
    into the DMA layer and pass the parent device to dma_max_mapping_size()
    instead.
    
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Quentin Perret <qperret@google.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20211201112018.25276-1-will@kernel.org
    Acked-by: Jason Wang <jasowang@redhat.com>
    Tested-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Fixes: e6d6dd6c875e ("virtio: Introduce virtio_max_dma_size()")
    Cc: Joerg Roedel <jroedel@suse.de>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Steven Price <steven.price@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 802a1a8501563714a5fe8824f4ed27fec04a0719
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Dec 9 12:04:56 2021 +0000

    firmware: arm_scpi: Fix string overflow in SCPI genpd driver
    
    commit 865ed67ab955428b9aa771d8b4f1e4fb7fd08945 upstream.
    
    Without the bound checks for scpi_pd->name, it could result in the buffer
    overflow when copying the SCPI device name from the corresponding device
    tree node as the name string is set at maximum size of 30.
    
    Let us fix it by using devm_kasprintf so that the string buffer is
    allocated dynamically.
    
    Fixes: 8bec4337ad40 ("firmware: scpi: add device power domain support using genpd")
    Reported-by: Pedro Batista <pedbap.g@gmail.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Cc: stable@vger.kernel.org
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20211209120456.696879-1-sudeep.holla@arm.com'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f0dfab3187ff46d6f4eb443f04e7406f1d63d8
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Dec 2 13:45:33 2021 +0100

    mac80211: send ADDBA requests using the tid/queue of the aggregation session
    
    commit 1fe98f5690c4219d419ea9cc190f94b3401cf324 upstream.
    
    Sending them out on a different queue can cause a race condition where a
    number of packets in the queue may be discarded by the receiver, because
    the ADDBA request is sent too early.
    This affects any driver with software A-MPDU setup which does not allocate
    packet seqno in hardware on tx, regardless of whether iTXQ is used or not.
    The only driver I've seen that explicitly deals with this issue internally
    is mwl8k.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20211202124533.80388-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 873e664a83efa21396056393299aaf8738515092
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 29 15:32:39 2021 +0200

    mac80211: mark TX-during-stop for TX in in_reconfig
    
    commit db7205af049d230e7e0abf61c1e74c1aab40f390 upstream.
    
    Mark TXQs as having seen transmit while they were stopped if
    we bail out of drv_wake_tx_queue() due to reconfig, so that
    the queue wake after this will make them catch up. This is
    particularly necessary for when TXQs are used for management
    packets since those TXQs won't see a lot of traffic that'd
    make them catch up later.
    
    Cc: stable@vger.kernel.org
    Fixes: 4856bfd23098 ("mac80211: do not call driver wake_tx_queue op during reconfig")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211129152938.4573a221c0e1.I0d1d5daea3089be3fc0dccc92991b0f8c5677f0c@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff3e3fdc737a69f12d33cc0e8c867f113f2b0249
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Tue Nov 23 14:59:53 2021 +0100

    KVM: selftests: Make sure kvm_create_max_vcpus test won't hit RLIMIT_NOFILE
    
    [ Upstream commit 908fa88e420f30dde6d80f092795a18ec72ca6d3 ]
    
    With the elevated 'KVM_CAP_MAX_VCPUS' value kvm_create_max_vcpus test
    may hit RLIMIT_NOFILE limits:
    
     # ./kvm_create_max_vcpus
     KVM_CAP_MAX_VCPU_ID: 4096
     KVM_CAP_MAX_VCPUS: 1024
     Testing creating 1024 vCPUs, with IDs 0...1023.
     /dev/kvm not available (errno: 24), skipping test
    
    Adjust RLIMIT_NOFILE limits to make sure KVM_CAP_MAX_VCPUS fds can be
    opened. Note, raising hard limit ('rlim_max') requires CAP_SYS_RESOURCE
    capability which is generally not needed to run kvm selftests (but without
    raising the limit the test is doomed to fail anyway).
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20211123135953.667434-1-vkuznets@redhat.com>
    [Skip the test if the hard limit can be raised. - Paolo]
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Tested-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
