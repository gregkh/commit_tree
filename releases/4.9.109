commit 8e52b94e19d82e2be4f3bf3699c8f39f4c6cc478
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jun 16 09:52:35 2018 +0200

    Linux 4.9.109

commit f09a7b0eead737b33d940bf5c2509ca1441e9590
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 14 15:23:19 2018 +0200

    perf: sync up x86/.../cpufeatures.h
    
    The x86 copy of cpufeatures.h is now out of sync, so fix that.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20f4d771b3098d5d559c0d7c65092f90da4352c1
Author: Bin Liu <b-liu@ti.com>
Date:   Tue Apr 17 14:53:13 2018 -0500

    crypto: omap-sham - fix memleak
    
    commit 9dbc8a0328efa485a6f5b68b867f9f523a3fbeff upstream.
    
    Fixes: 8043bb1ae03cb ("crypto: omap-sham - convert driver logic to use sgs for data xmit")
    
    The memory pages freed in omap_sham_finish_req() were less than those
    allocated in omap_sham_copy_sgs().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Acked-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef2aa9f3a78403cd4a50b0e7626b010ca0b71627
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 3 22:29:29 2018 +1000

    crypto: vmx - Remove overly verbose printk from AES init routines
    
    commit 1411b5218adbcf1d45ddb260db5553c52e8d917c upstream.
    
    In the vmx AES init routines we do a printk(KERN_INFO ...) to report
    the fallback implementation we're using.
    
    However with a slow console this can significantly affect the speed of
    crypto operations. Using 'cryptsetup benchmark' the removal of the
    printk() leads to a ~5x speedup for aes-cbc decryption.
    
    So remove them.
    
    Fixes: 8676590a1593 ("crypto: vmx - Adding AES routines for VMX module")
    Fixes: 8c755ace357c ("crypto: vmx - Adding CBC routines for VMX module")
    Fixes: 4f7f60d312b3 ("crypto: vmx - Adding CTR routines for VMX module")
    Fixes: cc333cd68dfa ("crypto: vmx - Adding GHASH routines for VMX module")
    Cc: stable@vger.kernel.org # v4.1+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05ca7fe5a78933444d46df221b16217713de5840
Author: Johannes Wienke <languitar@semipol.de>
Date:   Mon Jun 4 13:37:26 2018 -0700

    Input: elan_i2c - add ELAN0612 (Lenovo v330 14IKB) ACPI ID
    
    commit e6e7e9cd8eed0e18217c899843bffbe8c7dae564 upstream.
    
    Add ELAN0612 to the list of supported touchpads; this ID is used in Lenovo
    v330 14IKB devices.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199253
    Signed-off-by: Johannes Wienke <languitar@semipol.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78e7bbf60c181e0cfcc4e50695ac52bb84d3432a
Author: Ethan Lee <flibitijibibo@gmail.com>
Date:   Thu May 31 16:13:17 2018 -0700

    Input: goodix - add new ACPI id for GPD Win 2 touch screen
    
    commit 5ca4d1ae9bad0f59bd6f851c39b19f5366953666 upstream.
    
    GPD Win 2 Website: http://www.gpd.hk/gpdwin2.asp
    
    Tested on a unit from the first production run sent to Indiegogo backers
    
    Signed-off-by: Ethan Lee <flibitijibibo@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13d1c5b17d127afbd947210c5cdd80eaded5d9f4
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 17:38:09 2018 +0200

    kvm: x86: use correct privilege level for sgdt/sidt/fxsave/fxrstor access
    
    commit 3c9fa24ca7c9c47605672916491f79e8ccacb9e6 upstream.
    
    The functions that were used in the emulation of fxrstor, fxsave, sgdt and
    sidt were originally meant for task switching, and as such they did not
    check privilege levels.  This is very bad when the same functions are used
    in the emulation of unprivileged instructions.  This is CVE-2018-10853.
    
    The obvious fix is to add a new argument to ops->read_std and ops->write_std,
    which decides whether the access is a "system" access or should use the
    processor's CPL.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 018e5191c6e0b046bf0d2942f402627162c6b29a
Author: Dave Martin <Dave.Martin@arm.com>
Date:   Thu May 10 18:08:23 2018 +0100

    tty: pl011: Avoid spuriously stuck-off interrupts
    
    commit 4a7e625ce50412a7711efa0f2ef0b96ce3826759 upstream.
    
    Commit 9b96fbacda34 ("serial: PL011: clear pending interrupts")
    clears the RX and receive timeout interrupts on pl011 startup, to
    avoid a screaming-interrupt scenario that can occur when the
    firmware or bootloader leaves these interrupts asserted.
    
    This has been noted as an issue when running Linux on qemu [1].
    
    Unfortunately, the above fix seems to lead to potential
    misbehaviour if the RX FIFO interrupt is asserted _non_ spuriously
    on driver startup, if the RX FIFO is also already full to the
    trigger level.
    
    Clearing the RX FIFO interrupt does not change the FIFO fill level.
    In this scenario, because the interrupt is now clear and because
    the FIFO is already full to the trigger level, no new assertion of
    the RX FIFO interrupt can occur unless the FIFO is drained back
    below the trigger level.  This never occurs because the pl011
    driver is waiting for an RX FIFO interrupt to tell it that there is
    something to read, and does not read the FIFO at all until that
    interrupt occurs.
    
    Thus, simply clearing "spurious" interrupts on startup may be
    misguided, since there is no way to be sure that the interrupts are
    truly spurious, and things can go wrong if they are not.
    
    This patch instead clears the interrupt condition by draining the
    RX FIFO during UART startup, after clearing any potentially
    spurious interrupt.  This should ensure that an interrupt will
    definitely be asserted if the RX FIFO subsequently becomes
    sufficiently full.
    
    The drain is done at the point of enabling interrupts only.  This
    means that it will occur any time the UART is newly opened through
    the tty layer.  It will not apply to polled-mode use of the UART by
    kgdboc: since that scenario cannot use interrupts by design, this
    should not matter.  kgdboc will interact badly with "normal" use of
    the UART in any case: this patch makes no attempt to paper over
    such issues.
    
    This patch does not attempt to address the case where the RX FIFO
    fills faster than it can be drained: that is a pathological
    hardware design problem that is beyond the scope of the driver to
    work around.  As a failsafe, the number of poll iterations for
    draining the FIFO is limited to twice the FIFO size.  This will
    ensure that the kernel at least boots even if it is impossible to
    drain the FIFO for some reason.
    
    [1] [Qemu-devel] [Qemu-arm] [PATCH] pl011: do not put into fifo
    before enabled the interruption
    https://lists.gnu.org/archive/html/qemu-devel/2018-01/msg06446.html
    
    Reported-by: Wei Xu <xuwei5@hisilicon.com>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Fixes: 9b96fbacda34 ("serial: PL011: clear pending interrupts")
    Signed-off-by: Dave Martin <Dave.Martin@arm.com>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Wei Xu <xuwei5@hisilicon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9bc59c44d8990b69aafbff42717c2daa22ffb36
Author: Gil Kupfer <gilkup@gmail.com>
Date:   Fri Jun 1 00:47:47 2018 -0700

    vmw_balloon: fixing double free when batching mode is off
    
    commit b23220fe054e92f616b82450fae8cd3ab176cc60 upstream.
    
    The balloon.page field is used for two different purposes if batching is
    on or off. If batching is on, the field point to the page which is used
    to communicate with with the hypervisor. If it is off, balloon.page
    points to the page that is about to be (un)locked.
    
    Unfortunately, this dual-purpose of the field introduced a bug: when the
    balloon is popped (e.g., when the machine is reset or the balloon driver
    is explicitly removed), the balloon driver frees, unconditionally, the
    page that is held in balloon.page.  As a result, if batching is
    disabled, this leads to double freeing the last page that is sent to the
    hypervisor.
    
    The following error occurs during rmmod when kernel checkers are on, and
    the balloon is not empty:
    
    [   42.307653] ------------[ cut here ]------------
    [   42.307657] Kernel BUG at ffffffffba1e4b28 [verbose debug info unavailable]
    [   42.307720] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC
    [   42.312512] Modules linked in: vmw_vsock_vmci_transport vsock ppdev joydev vmw_balloon(-) input_leds serio_raw vmw_vmci parport_pc shpchp parport i2c_piix4 nfit mac_hid autofs4 vmwgfx drm_kms_helper hid_generic syscopyarea sysfillrect usbhid sysimgblt fb_sys_fops hid ttm mptspi scsi_transport_spi ahci mptscsih drm psmouse vmxnet3 libahci mptbase pata_acpi
    [   42.312766] CPU: 10 PID: 1527 Comm: rmmod Not tainted 4.12.0+ #5
    [   42.312803] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 09/30/2016
    [   42.313042] task: ffff9bf9680f8000 task.stack: ffffbfefc1638000
    [   42.313290] RIP: 0010:__free_pages+0x38/0x40
    [   42.313510] RSP: 0018:ffffbfefc163be98 EFLAGS: 00010246
    [   42.313731] RAX: 000000000000003e RBX: ffffffffc02b9720 RCX: 0000000000000006
    [   42.313972] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff9bf97e08e0a0
    [   42.314201] RBP: ffffbfefc163be98 R08: 0000000000000000 R09: 0000000000000000
    [   42.314435] R10: 0000000000000000 R11: 0000000000000000 R12: ffffffffc02b97e4
    [   42.314505] R13: ffffffffc02b9748 R14: ffffffffc02b9728 R15: 0000000000000200
    [   42.314550] FS:  00007f3af5fec700(0000) GS:ffff9bf97e080000(0000) knlGS:0000000000000000
    [   42.314599] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   42.314635] CR2: 00007f44f6f4ab24 CR3: 00000003a7d12000 CR4: 00000000000006e0
    [   42.314864] Call Trace:
    [   42.315774]  vmballoon_pop+0x102/0x130 [vmw_balloon]
    [   42.315816]  vmballoon_exit+0x42/0xd64 [vmw_balloon]
    [   42.315853]  SyS_delete_module+0x1e2/0x250
    [   42.315891]  entry_SYSCALL_64_fastpath+0x23/0xc2
    [   42.315924] RIP: 0033:0x7f3af5b0e8e7
    [   42.315949] RSP: 002b:00007fffe6ce0148 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [   42.315996] RAX: ffffffffffffffda RBX: 000055be676401e0 RCX: 00007f3af5b0e8e7
    [   42.316951] RDX: 000000000000000a RSI: 0000000000000800 RDI: 000055be67640248
    [   42.317887] RBP: 0000000000000003 R08: 0000000000000000 R09: 1999999999999999
    [   42.318845] R10: 0000000000000883 R11: 0000000000000206 R12: 00007fffe6cdf130
    [   42.319755] R13: 0000000000000000 R14: 0000000000000000 R15: 000055be676401e0
    [   42.320606] Code: c0 74 1c f0 ff 4f 1c 74 02 5d c3 85 f6 74 07 e8 0f d8 ff ff 5d c3 31 f6 e8 c6 fb ff ff 5d c3 48 c7 c6 c8 0f c5 ba e8 58 be 02 00 <0f> 0b 66 0f 1f 44 00 00 66 66 66 66 90 48 85 ff 75 01 c3 55 48
    [   42.323462] RIP: __free_pages+0x38/0x40 RSP: ffffbfefc163be98
    [   42.325735] ---[ end trace 872e008e33f81508 ]---
    
    To solve the bug, we eliminate the dual purpose of balloon.page.
    
    Fixes: f220a80f0c2e ("VMware balloon: add batching to the vmw_balloon.")
    Cc: stable@vger.kernel.org
    Reported-by: Oleksandr Natalenko <onatalen@redhat.com>
    Signed-off-by: Gil Kupfer <gilkup@gmail.com>
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Reviewed-by: Xavier Deguillard <xdeguillard@vmware.com>
    Tested-by: Oleksandr Natalenko <oleksandr@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6e6f0c5423ab4b92b11544a4a6dec29ebd9ade2
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri May 4 10:44:09 2018 -0700

    serial: 8250: omap: Fix idling of clocks for unused uarts
    
    commit 13dc04d0e5fdc25c8f713ad23fdce51cf2bf96ba upstream.
    
    I noticed that unused UARTs won't necessarily idle properly always
    unless at least one byte tx transfer is done first.
    
    After some debugging I narrowed down the problem to the scr register
    dma configuration bits that need to be set before softreset for the
    clocks to idle. Unless we do this, the module clkctrl idlest bits
    may be set to 1 instead of 3 meaning the clock will never idle and
    is blocking deeper idle states for the whole domain.
    
    This might be related to the configuration done by the bootloader
    or kexec booting where certain configurations cause the 8250 or
    the clkctrl clock to jam in a way where setting of the scr bits
    and reset is needed to clear it. I've tried diffing the 8250
    registers for the various modes, but did not see anything specific.
    So far I've only seen this on omap4 but I'm suspecting this might
    also happen on the other clkctrl using SoCs considering they
    already have a quirk enabled for UART_ERRATA_CLOCK_DISABLE.
    
    Let's fix the issue by configuring scr before reset for basic dma
    even if we don't use it. The scr register will be reset when we do
    softreset few lines after, and we restore scr on resume. We should
    do this for all the SoCs with UART_ERRATA_CLOCK_DISABLE quirk flag
    set since the ones with UART_ERRATA_CLOCK_DISABLE are all based
    using clkctrl similar to omap4.
    
    Looks like both OMAP_UART_SCR_DMAMODE_1 | OMAP_UART_SCR_DMAMODE_CTL
    bits are needed for the clkctrl to idle after a softreset.
    
    And we need to add omap4 to also use the UART_ERRATA_CLOCK_DISABLE
    for the related workaround to be enabled. This same compatible
    value will also be used for omap5.
    
    Fixes: cdb929e4452a ("serial: 8250_omap: workaround errata around idling UART after using DMA")
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Matthijs van Duin <matthijsvanduin@gmail.com>
    Cc: Sekhar Nori <nsekhar@ti.com>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b91ae57b5cb612ad68516e70d517b303dd604d1
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 10 08:41:13 2018 +0200

    serial: samsung: fix maxburst parameter for DMA transactions
    
    commit aa2f80e752c75e593b3820f42c416ed9458fa73e upstream.
    
    The best granularity of residue that DMA engine can report is in the BURST
    units, so the serial driver must use MAXBURST = 1 and DMA_SLAVE_BUSWIDTH_1_BYTE
    if it relies on exact number of bytes transferred by DMA engine.
    
    Fixes: 62c37eedb74c ("serial: samsung: add dma reqest/release functions")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41bdf9702caea0bfa9e578977f13a566e3fc428b
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon May 7 19:11:30 2018 +0200

    tty/serial: atmel: use port->name as name in request_irq()
    
    commit 9594b5be7ec110ed11acec58fa94f3f293668c85 upstream.
    
    I was puzzled while looking at /proc/interrupts and random things showed
    up between reboots. This occurred more often but I realised it later. The
    "correct" output should be:
    |38:      11861  atmel-aic5   2 Level     ttyS0
    
    but I saw sometimes
    |38:       6426  atmel-aic5   2 Level     tty1
    
    and accounted it wrongly as correct. This is use after free and the
    former example randomly got the "old" pointer which pointed to the same
    content. With SLAB_FREELIST_RANDOM and HARDENED I even got
    |38:       7067  atmel-aic5   2 Level     E=Started User Manager for UID 0
    
    or other nonsense.
    As it turns out the tty, pointer that is accessed in atmel_startup(), is
    freed() before atmel_shutdown(). It seems to happen quite often that the
    tty for ttyS0 is allocated and freed while ->shutdown is not invoked. I
    don't do anything special - just a systemd boot :)
    
    Use dev_name(&pdev->dev) as the IRQ name for request_irq(). This exists
    as long as the driver is loaded so no use-after-free here.
    
    Cc: stable@vger.kernel.org
    Fixes: 761ed4a94582 ("tty: serial_core: convert uart_close to use tty_port_close")
    Acked-by: Richard Genoud <richard.genoud@gmail.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70f0a59bbdb4f7dd46255fd17060213a32af6302
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Jun 1 11:28:21 2018 +0200

    serial: sh-sci: Stop using printk format %pCr
    
    commit d63c16f8e1ab761775275adcf54f4bef7c330295 upstream.
    
    Printk format "%pCr" will be removed soon, as clk_get_rate() must not be
    called in atomic context.
    
    Replace it by open-coding the operation.  This is safe here, as the code
    runs in task context.
    
    Link: http://lkml.kernel.org/r/1527845302-12159-4-git-send-email-geert+renesas@glider.be
    To: Jia-Ju Bai <baijiaju1990@gmail.com>
    To: Jonathan Corbet <corbet@lwn.net>
    To: Michael Turquette <mturquette@baylibre.com>
    To: Stephen Boyd <sboyd@kernel.org>
    To: Zhang Rui <rui.zhang@intel.com>
    To: Eduardo Valentin <edubezval@gmail.com>
    To: Eric Anholt <eric@anholt.net>
    To: Stefan Wahren <stefan.wahren@i2se.com>
    To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: linux-doc@vger.kernel.org
    Cc: linux-clk@vger.kernel.org
    Cc: linux-pm@vger.kernel.org
    Cc: linux-serial@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-renesas-soc@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: stable@vger.kernel.org # 4.5+
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc62b33d5fafde32ee1ad5e2d39152b3da7fdcda
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Apr 10 14:38:54 2018 +0900

    usb: gadget: udc: renesas_usb3: disable the controller's irqs for reconnecting
    
    commit bd6bce004d78b867ba0c6d3712f1c5b50398af9a upstream.
    
    This patch fixes an issue that reconnection is possible to fail
    because unexpected state handling happens by the irqs. To fix the issue,
    the driver disables the controller's irqs when disconnected.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Cc: <stable@vger.kernel.org> # v4.5+
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 244eb27f960004666813c75a324e35b26a30ecf7
Author: Alexander Kappner <agk@godking.net>
Date:   Fri May 18 21:50:16 2018 -0700

    usb-storage: Add compatibility quirk flags for G-Technologies G-Drive
    
    commit ca7d9515d0e6825351ce106066cea1f60e40b1c8 upstream.
    
    The "G-Drive" (sold by G-Technology) external USB 3.0 drive
     hangs on write access under UAS and usb-storage:
    
    [  136.079121] sd 15:0:0:0: [sdi] tag#0 FAILED Result: hostbyte=DID_OK driverbyte=DRIVER_SENSE
    [  136.079144] sd 15:0:0:0: [sdi] tag#0 Sense Key : Illegal Request [current]
    [  136.079152] sd 15:0:0:0: [sdi] tag#0 Add. Sense: Invalid field in cdb
    [  136.079176] sd 15:0:0:0: [sdi] tag#0 CDB: Write(16) 8a 08 00 00 00 00 00 00 00 00 00 00 00 08 00 00
    [  136.079180] print_req_error: critical target error, dev sdi, sector 0
    [  136.079183] Buffer I/O error on dev sdi, logical block 0, lost sync page write
    [  136.173148] EXT4-fs (sdi): mounted filesystem with ordered data mode. Opts: (null)
    [  140.583998] sd 15:0:0:0: [sdi] tag#0 FAILED Result: hostbyte=DID_OK driverbyte=DRIVER_SENSE
    [  140.584010] sd 15:0:0:0: [sdi] tag#0 Sense Key : Illegal Request [current]
    [  140.584016] sd 15:0:0:0: [sdi] tag#0 Add. Sense: Invalid field in cdb
    [  140.584022] sd 15:0:0:0: [sdi] tag#0 CDB: Write(16) 8a 08 00 00 00 00 e8 c4 00 18 00 00 00 08 00 00
    [  140.584025] print_req_error: critical target error, dev sdi, sector 3905159192
    [  140.584044] print_req_error: critical target error, dev sdi, sector 3905159192
    [  140.584052] Aborting journal on device sdi-8.
    
    The proposed patch adds compatibility quirks. Because the drive requires two
    quirks (one to work with UAS, and another to work with usb-storage), adding this
    under unusual_devs.h and not just unusual_uas.h so kernels compiled without UAS
    receive the quirk. With the patch, the drive works reliably on UAS and usb-
    storage.
    (tested on NEC Corporation uPD720200 USB 3.0 host controller).
    
    Signed-off-by: Alexander Kappner <agk@godking.net>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 187941e50587da64e5172d8d91e35b8ebfc26756
Author: Alexander Kappner <agk@godking.net>
Date:   Fri May 18 21:50:15 2018 -0700

    usb-storage: Add support for FL_ALWAYS_SYNC flag in the UAS driver
    
    commit 8c4e97ddfe73a0958bb0abf7e6a3bc4cc3e04936 upstream.
    
    The ALWAYS_SYNC flag is currently honored by the usb-storage driver but not UAS
    and is required to work around devices that become unstable upon being
    queried for cache. This code is taken straight from:
    drivers/usb/storage/scsiglue.c:284
    
    Signed-off-by: Alexander Kappner <agk@godking.net>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14450abb38eb72e5a37743cb0e67cd005173d9a0
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Fri May 18 20:13:42 2018 -0500

    usbip: vhci_sysfs: fix potential Spectre v1
    
    commit a0d6ec88090d7b1b008429c44532a388e29bb1bd upstream.
    
    pdev_nr and rhport can be controlled by user-space, hence leading to
    a potential exploitation of the Spectre variant 1 vulnerability.
    
    This issue was detected with the help of Smatch:
    drivers/usb/usbip/vhci_sysfs.c:238 detach_store() warn: potential spectre issue 'vhcis'
    drivers/usb/usbip/vhci_sysfs.c:328 attach_store() warn: potential spectre issue 'vhcis'
    drivers/usb/usbip/vhci_sysfs.c:338 attach_store() warn: potential spectre issue 'vhci->vhci_hcd_ss->vdev'
    drivers/usb/usbip/vhci_sysfs.c:340 attach_store() warn: potential spectre issue 'vhci->vhci_hcd_hs->vdev'
    
    Fix this by sanitizing pdev_nr and rhport before using them to index
    vhcis and vhci->vhci_hcd_ss->vdev respectively.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8da07ee9e433f3af74f126c5bfd1a1a44d0aaeef
Author: Laura Abbott <labbott@redhat.com>
Date:   Mon May 14 14:35:09 2018 -0700

    staging: android: ion: Switch to pr_warn_once in ion_buffer_destroy
    
    commit 45ad559a29629cb1c64ee636563c69b71524f077 upstream.
    
    Syzbot reported yet another warning with Ion:
    
    WARNING: CPU: 0 PID: 1467 at drivers/staging/android/ion/ion.c:122
    ion_buffer_destroy+0xd4/0x190 drivers/staging/android/ion/ion.c:122
    Kernel panic - not syncing: panic_on_warn set ...
    
    This is catching that a buffer was freed with an existing kernel mapping
    still present. This can be easily be triggered from userspace by calling
    DMA_BUF_SYNC_START without calling DMA_BUF_SYNC_END. Switch to a single
    pr_warn_once to indicate the error without being disruptive.
    
    Reported-by: syzbot+cd8bcd40cb049efa2770@syzkaller.appspotmail.com
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 838b0e900a7e16799dbecc031739de1ee40741af
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 17:37:49 2018 +0200

    KVM: x86: pass kvm_vcpu to kvm_read_guest_virt and kvm_write_guest_virt_system
    
    commit ce14e868a54edeb2e30cb7a7b104a2fc4b9d76ca upstream.
    
    Int the next patch the emulator's .read_std and .write_std callbacks will
    grow another argument, which is not needed in kvm_read_guest_virt and
    kvm_write_guest_virt_system's callers.  Since we have to make separate
    functions, let's give the currently existing names a nicer interface, too.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00b1391f9539711945e75b856230ee751a02b385
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 16:43:02 2018 +0200

    KVM: x86: introduce linear_{read,write}_system
    
    commit 79367a65743975e5cac8d24d08eccc7fdae832b0 upstream.
    
    Wrap the common invocation of ctxt->ops->read_std and ctxt->ops->write_std, so
    as to have a smaller patch when the functions grow another argument.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be1f605bea9557a85f717e2707bc7c0c22e7ad81
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jan 16 08:29:50 2018 +0100

    gpio: No NULL owner
    
    commit 7d18f0a14aa6a0d6bad39111c1fb655f07f71d59 upstream.
    
    Sometimes a GPIO is fetched with NULL as parent device, and
    that is just fine. So under these circumstances, avoid using
    dev_name() to provide a name for the GPIO line.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Daniel Rosenberg <drosen@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c4eb2a50e77109b3b89c57e80fce54a72f69fcf
Author: Martin Wilck <mwilck@suse.com>
Date:   Mon Aug 14 22:12:37 2017 +0200

    nvmet: don't overwrite identify sn/fr with 0-bytes
    
    commit 42819eb7a0957cc340ad4ed8bba736bab5ebc464 upstream.
    
    The merged version of my patch "nvmet: don't report 0-bytes in serial
    number" fails to remove two lines which should have been replaced,
    so that the space-padded strings are overwritten again with 0-bytes.
    Fix it.
    
    Fixes: 42de82a8b544 nvmet: don't report 0-bytes in serial number
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Reviewed-by: Sagi Grimberg <sagi@grimbeg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f43d8e4c8619c5ac15697ca63747737000441aca
Author: Martin Wilck <mwilck@suse.com>
Date:   Fri Jul 14 00:25:31 2017 +0200

    nvmet: don't report 0-bytes in serial number
    
    commit 42de82a8b544fa55670feef7d6f85085fba48fc0 upstream.
    
    The NVME standard mandates that the SN, MN, and FR fields of the Identify
    Controller Data Structure be "ASCII strings".  That means that they may
    not contain 0-bytes, not even string terminators.
    
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    [hch: fixed for the move of the serial field, updated description]
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e38f8e9864f2c52775743694f0517c6bd276d83
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Fri Jul 14 15:36:55 2017 +0200

    nvmet: Move serial number from controller to subsystem
    
    commit 2e7f5d2af2155084c6f7c86328d36e698cd84954 upstream.
    
    The NVMe specification defines the serial number as:
    
    "Serial Number (SN): Contains the serial number for the NVM subsystem
    that is assigned by the vendor as an ASCII string. Refer to section
    7.10 for unique identifier requirements. Refer to section 1.5 for ASCII
    string requirements"
    
    So move it from the controller to the subsystem, where it belongs.
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 077c9e26bb0b3ab72d987837d9297fefd7ec3cf4
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Oct 4 20:34:30 2016 -0400

    x86/crypto, x86/fpu: Remove X86_FEATURE_EAGER_FPU #ifdef from the crc32c code
    
    commit 02f39b2379fb81557ae864ec8f85421c0250c954 upstream.
    
    The crypto code was checking both use_eager_fpu() and
    defined(X86_FEATURE_EAGER_FPU).  The latter was nonsensical, so
    remove it.  This will avoid breakage when we remove
    X86_FEATURE_EAGER_FPU.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: pbonzini@redhat.com
    Link: http://lkml.kernel.org/r/1475627678-20788-2-git-send-email-riel@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 142b79aa0ba6522c95d80a5cb053e843c98e8ae3
Author: Kevin Easton <kevin@guarana.org>
Date:   Sat Apr 7 11:40:33 2018 -0400

    af_key: Always verify length of provided sadb_key
    
    commit 4b66af2d6356a00e94bcdea3e7fea324e8b5c6f4 upstream.
    
    Key extensions (struct sadb_key) include a user-specified number of key
    bits.  The kernel uses that number to determine how much key data to copy
    out of the message in pfkey_msg2xfrm_state().
    
    The length of the sadb_key message must be verified to be long enough,
    even in the case of SADB_X_AALG_NULL.  Furthermore, the sadb_key_len value
    must be long enough to include both the key data and the struct sadb_key
    itself.
    
    Introduce a helper function verify_key_len(), and call it from
    parse_exthdrs() where other exthdr types are similarly checked for
    correctness.
    
    Signed-off-by: Kevin Easton <kevin@guarana.org>
    Reported-by: syzbot+5022a34ca5a3d49b84223653fab632dfb7b4cf37@syzkaller.appspotmail.com
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b53761a18e71a5ce699c1e93d0f9a7c59b186f08
Author: Keith Busch <keith.busch@intel.com>
Date:   Thu Sep 14 13:54:39 2017 -0400

    nvme-pci: initialize queue memory before interrupts
    
    commit 161b8be2bd6abad250d4b3f674bdd5480f15beeb upstream.
    
    A spurious interrupt before the nvme driver has initialized the completion
    queue may inadvertently cause the driver to believe it has a completion
    to process. This may result in a NULL dereference since the nvmeq's tags
    are not set at this point.
    
    The patch initializes the host's CQ memory so that a spurious interrupt
    isn't mistaken for a real completion.
    
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae0c8eeb66045ea2e327b23d21788622ca510627
Author: Andreas Born <futur.andy@googlemail.com>
Date:   Thu Aug 10 06:41:44 2017 +0200

    bonding: require speed/duplex only for 802.3ad, alb and tlb
    
    commit ad729bc9acfb7c47112964b4877ef5404578ed13 upstream.
    
    The patch c4adfc822bf5 ("bonding: make speed, duplex setting consistent
    with link state") puts the link state to down if
    bond_update_speed_duplex() cannot retrieve speed and duplex settings.
    Assumably the patch was written with 802.3ad mode in mind which relies
    on link speed/duplex settings. For other modes like active-backup these
    settings are not required. Thus, only for these other modes, this patch
    reintroduces support for slaves that do not support reporting speed or
    duplex such as wireless devices. This fixes the regression reported in
    bug 196547 (https://bugzilla.kernel.org/show_bug.cgi?id=196547).
    
    Fixes: c4adfc822bf5 ("bonding: make speed, duplex setting consistent
    with link state")
    Signed-off-by: Andreas Born <futur.andy@googlemail.com>
    Acked-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Nate Clark <nate@neworld.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc5ad405837a9e89595cd603a8d329ec9d96dde9
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Mon Apr 3 18:38:39 2017 -0700

    bonding: fix active-backup transition
    
    commit 3f3c278c94dd994fe0d9f21679ae19b9c0a55292 upstream.
    
    Earlier patch c4adfc822bf5 ("bonding: make speed, duplex setting
    consistent with link state") made an attempt to keep slave state
    consistent with speed and duplex settings. Unfortunately link-state
    transition is used to change the active link especially when used
    in conjunction with mii-mon. The above mentioned patch broke that
    logic. Also when speed and duplex settings for a link are updated
    during a link-event, the link-status should not be changed to
    invoke correct transition logic.
    
    This patch fixes this issue by moving the link-state update outside
    of the bond_update_speed_duplex() fn and to the places where this fn
    is called and update link-state selectively.
    
    Fixes: c4adfc822bf5 ("bonding: make speed, duplex setting consistent
    with link state")
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Reviewed-by: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Nate Clark <nate@neworld.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5b9d36f1e702911ab9724022c8f6c97adc37427
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Mon Mar 27 11:37:37 2017 -0700

    bonding: correctly update link status during mii-commit phase
    
    commit b5bf0f5b16b9c316c34df9f31d4be8729eb86845 upstream.
    
    bond_miimon_commit() marks the link UP after attempting to get the speed
    and duplex settings for the link. There is a possibility that
    bond_update_speed_duplex() could fail. This is another place where it
    could result into an inconsistent bonding link state.
    
    With this patch the link will be marked UP only if the speed and duplex
    values retrieved have sane values and processed further.
    
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Nate Clark <nate@neworld.us>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47a6aa5975a0ea4e650091cd5105ff29ca353459
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Oct 4 20:34:31 2016 -0400

    x86/fpu: Hard-disable lazy FPU mode
    
    commit ca6938a1cd8a1c5e861a99b67f84ac166fc2b9e7 upstream.
    
    Since commit:
    
      58122bf1d856 ("x86/fpu: Default eagerfpu=on on all CPUs")
    
    ... in Linux 4.6, eager FPU mode has been the default on all x86
    systems, and no one has reported any regressions.
    
    This patch removes the ability to enable lazy mode: use_eager_fpu()
    becomes "return true" and all of the FPU mode selection machinery is
    removed.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: pbonzini@redhat.com
    Link: http://lkml.kernel.org/r/1475627678-20788-3-git-send-email-riel@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
