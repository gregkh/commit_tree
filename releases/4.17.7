commit 73bc05003e9b1aebd1c473c0b42e6e4d08d209d5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 17 11:48:36 2018 +0200

    Linux 4.17.7

commit 8d930a6f0a281a8012f6430aba62f81a0ddaaf56
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Tue Jul 3 06:24:20 2018 +0300

    ARM: dts: armada-38x: use the new thermal binding
    
    commit 568cc2f07c8ea5f71a0486464bd9703e4671045f upstream.
    
    Commit 2f28e4c24b10e (thermal: armada: Clarify control registers
    accesses) introduced the new thermal binding. The new binding extends
    the second registers field size to 8. Switch to the new binding to fix
    thermal reading values. Without this change the fix for errata #132698
    introduced in commit 8c0b888f661 (thermal: armada: Change sensors trim
    default value) has no effect.
    
    Cc: stable@vger.kernel.org # v4.16+
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 220672cd2d5595f8a881eff600daf6fef9418e88
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Tue Apr 24 21:34:05 2018 -0600

    f2fs: sanity check for total valid node blocks
    
    commit 8a29c1260e24e7c9c6ab138aa0017558d8b28208 upstream.
    
    This patch enhances sanity check for SIT entries.
    
    syzbot hit the following crash on upstream commit
    83beed7b2b26f232d782127792dd0cd4362fdc41 (Fri Apr 20 17:56:32 2018 +0000)
    Merge branch 'fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/evalenti/linux-soc-thermal
    syzbot dashboard link: https://syzkaller.appspot.com/bug?extid=bf9253040425feb155ad
    
    syzkaller reproducer: https://syzkaller.appspot.com/x/repro.syz?id=5692130282438656
    Raw console output: https://syzkaller.appspot.com/x/log.txt?id=5095924598571008
    Kernel config: https://syzkaller.appspot.com/x/.config?id=1808800213120130118
    compiler: gcc (GCC) 8.0.1 20180413 (experimental)
    
    IMPORTANT: if you fix the bug, please add the following tag to the commit:
    Reported-by: syzbot+bf9253040425feb155ad@syzkaller.appspotmail.com
    It will help syzbot understand when the bug is fixed. See footer for details.
    If you forward the report, please keep this part and the footer.
    
    F2FS-fs (loop0): invalid crc value
    F2FS-fs (loop0): Try to recover 1th superblock, ret: 0
    F2FS-fs (loop0): Mounted with checkpoint version = d
    F2FS-fs (loop0): Bitmap was wrongly cleared, blk:9740
    ------------[ cut here ]------------
    kernel BUG at fs/f2fs/segment.c:1884!
    invalid opcode: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 1 PID: 4508 Comm: syz-executor0 Not tainted 4.17.0-rc1+ #10
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:update_sit_entry+0x1215/0x1590 fs/f2fs/segment.c:1882
    RSP: 0018:ffff8801af526708 EFLAGS: 00010282
    RAX: ffffed0035ea4cc0 RBX: ffff8801ad454f90 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: ffffffff82eeb87e RDI: ffffed0035ea4cb6
    RBP: ffff8801af526760 R08: ffff8801ad4a2480 R09: ffffed003b5e4f90
    R10: ffffed003b5e4f90 R11: ffff8801daf27c87 R12: ffff8801adb8d380
    R13: 0000000000000001 R14: 0000000000000008 R15: 00000000ffffffff
    FS:  00000000014af940(0000) GS:ffff8801daf00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f06bc223000 CR3: 00000001adb02000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     allocate_data_block+0x66f/0x2050 fs/f2fs/segment.c:2663
     do_write_page+0x105/0x1b0 fs/f2fs/segment.c:2727
     write_node_page+0x129/0x350 fs/f2fs/segment.c:2770
     __write_node_page+0x7da/0x1370 fs/f2fs/node.c:1398
     sync_node_pages+0x18cf/0x1eb0 fs/f2fs/node.c:1652
     block_operations+0x429/0xa60 fs/f2fs/checkpoint.c:1088
     write_checkpoint+0x3ba/0x5380 fs/f2fs/checkpoint.c:1405
     f2fs_sync_fs+0x2fb/0x6a0 fs/f2fs/super.c:1077
     __sync_filesystem fs/sync.c:39 [inline]
     sync_filesystem+0x265/0x310 fs/sync.c:67
     generic_shutdown_super+0xd7/0x520 fs/super.c:429
     kill_block_super+0xa4/0x100 fs/super.c:1191
     kill_f2fs_super+0x9f/0xd0 fs/f2fs/super.c:3030
     deactivate_locked_super+0x97/0x100 fs/super.c:316
     deactivate_super+0x188/0x1b0 fs/super.c:347
     cleanup_mnt+0xbf/0x160 fs/namespace.c:1174
     __cleanup_mnt+0x16/0x20 fs/namespace.c:1181
     task_work_run+0x1e4/0x290 kernel/task_work.c:113
     tracehook_notify_resume include/linux/tracehook.h:191 [inline]
     exit_to_usermode_loop+0x2bd/0x310 arch/x86/entry/common.c:166
     prepare_exit_to_usermode arch/x86/entry/common.c:196 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:265 [inline]
     do_syscall_64+0x6ac/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457d97
    RSP: 002b:00007ffd46f9c8e8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000457d97
    RDX: 00000000014b09a3 RSI: 0000000000000002 RDI: 00007ffd46f9da50
    RBP: 00007ffd46f9da50 R08: 0000000000000000 R09: 0000000000000009
    R10: 0000000000000005 R11: 0000000000000246 R12: 00000000014b0940
    R13: 0000000000000000 R14: 0000000000000002 R15: 000000000000658e
    RIP: update_sit_entry+0x1215/0x1590 fs/f2fs/segment.c:1882 RSP: ffff8801af526708
    ---[ end trace f498328bb02610a2 ]---
    
    Reported-and-tested-by: syzbot+bf9253040425feb155ad@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+7d6d31d3bc702f566ce3@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+0a725420475916460f12@syzkaller.appspotmail.com
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a4c382c0724f82a846214a34b3b51edcb994986
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Tue Apr 24 15:44:16 2018 -0600

    f2fs: sanity check on sit entry
    
    commit b2ca374f33bd33fd822eb871876e4888cf79dc97 upstream.
    
    syzbot hit the following crash on upstream commit
    87ef12027b9b1dd0e0b12cf311fbcb19f9d92539 (Wed Apr 18 19:48:17 2018 +0000)
    Merge tag 'ceph-for-4.17-rc2' of git://github.com/ceph/ceph-client
    syzbot dashboard link: https://syzkaller.appspot.com/bug?extid=83699adeb2d13579c31e
    
    C reproducer: https://syzkaller.appspot.com/x/repro.c?id=5805208181407744
    syzkaller reproducer: https://syzkaller.appspot.com/x/repro.syz?id=6005073343676416
    Raw console output: https://syzkaller.appspot.com/x/log.txt?id=6555047731134464
    Kernel config: https://syzkaller.appspot.com/x/.config?id=1808800213120130118
    compiler: gcc (GCC) 8.0.1 20180413 (experimental)
    
    IMPORTANT: if you fix the bug, please add the following tag to the commit:
    Reported-by: syzbot+83699adeb2d13579c31e@syzkaller.appspotmail.com
    It will help syzbot understand when the bug is fixed. See footer for details.
    If you forward the report, please keep this part and the footer.
    
    F2FS-fs (loop0): Magic Mismatch, valid(0xf2f52010) - read(0x0)
    F2FS-fs (loop0): Can't find valid F2FS filesystem in 1th superblock
    F2FS-fs (loop0): invalid crc value
    BUG: unable to handle kernel paging request at ffffed006b2a50c0
    PGD 21ffee067 P4D 21ffee067 PUD 21fbeb067 PMD 0
    Oops: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 0 PID: 4514 Comm: syzkaller989480 Not tainted 4.17.0-rc1+ #8
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:build_sit_entries fs/f2fs/segment.c:3653 [inline]
    RIP: 0010:build_segment_manager+0x7ef7/0xbf70 fs/f2fs/segment.c:3852
    RSP: 0018:ffff8801b102e5b0 EFLAGS: 00010a06
    RAX: 1ffff1006b2a50c0 RBX: 0000000000000004 RCX: 0000000000000001
    RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8801ac74243e
    RBP: ffff8801b102f410 R08: ffff8801acbd46c0 R09: fffffbfff14d9af8
    R10: fffffbfff14d9af8 R11: ffff8801acbd46c0 R12: ffff8801ac742a80
    R13: ffff8801d9519100 R14: dffffc0000000000 R15: ffff880359528600
    FS:  0000000001e04880(0000) GS:ffff8801dae00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffed006b2a50c0 CR3: 00000001ac6ac000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     f2fs_fill_super+0x4095/0x7bf0 fs/f2fs/super.c:2803
     mount_bdev+0x30c/0x3e0 fs/super.c:1165
     f2fs_mount+0x34/0x40 fs/f2fs/super.c:3020
     mount_fs+0xae/0x328 fs/super.c:1268
     vfs_kern_mount.part.34+0xd4/0x4d0 fs/namespace.c:1037
     vfs_kern_mount fs/namespace.c:1027 [inline]
     do_new_mount fs/namespace.c:2517 [inline]
     do_mount+0x564/0x3070 fs/namespace.c:2847
     ksys_mount+0x12d/0x140 fs/namespace.c:3063
     __do_sys_mount fs/namespace.c:3077 [inline]
     __se_sys_mount fs/namespace.c:3074 [inline]
     __x64_sys_mount+0xbe/0x150 fs/namespace.c:3074
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x443d6a
    RSP: 002b:00007ffd312813c8 EFLAGS: 00000297 ORIG_RAX: 00000000000000a5
    RAX: ffffffffffffffda RBX: 0000000020000c00 RCX: 0000000000443d6a
    RDX: 0000000020000000 RSI: 0000000020000100 RDI: 00007ffd312813d0
    RBP: 0000000000000003 R08: 0000000020016a00 R09: 000000000000000a
    R10: 0000000000000000 R11: 0000000000000297 R12: 0000000000000004
    R13: 0000000000402c60 R14: 0000000000000000 R15: 0000000000000000
    RIP: build_sit_entries fs/f2fs/segment.c:3653 [inline] RSP: ffff8801b102e5b0
    RIP: build_segment_manager+0x7ef7/0xbf70 fs/f2fs/segment.c:3852 RSP: ffff8801b102e5b0
    CR2: ffffed006b2a50c0
    ---[ end trace a2034989e196ff17 ]---
    
    Reported-and-tested-by: syzbot+83699adeb2d13579c31e@syzkaller.appspotmail.com
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f9d71172a495ea640f02cbedaac8b1d588390fc
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Tue Apr 24 11:37:18 2018 -0600

    f2fs: avoid bug_on on corrupted inode
    
    commit 5d64600d4f337dc2bb89cd59da99f452f5e4f3c3 upstream.
    
    syzbot has tested the proposed patch but the reproducer still triggered crash:
    kernel BUG at fs/f2fs/inode.c:LINE!
    
    F2FS-fs (loop1): invalid crc value
    F2FS-fs (loop5): Magic Mismatch, valid(0xf2f52010) - read(0x0)
    F2FS-fs (loop5): Can't find valid F2FS filesystem in 1th superblock
    F2FS-fs (loop5): invalid crc value
    ------------[ cut here ]------------
    kernel BUG at fs/f2fs/inode.c:238!
    invalid opcode: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 1 PID: 4886 Comm: syz-executor1 Not tainted 4.17.0-rc1+ #1
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:do_read_inode fs/f2fs/inode.c:238 [inline]
    RIP: 0010:f2fs_iget+0x3307/0x3ca0 fs/f2fs/inode.c:313
    RSP: 0018:ffff8801c44a70e8 EFLAGS: 00010293
    RAX: ffff8801ce208040 RBX: ffff8801b3621080 RCX: ffffffff82eace18
    F2FS-fs (loop2): Magic Mismatch, valid(0xf2f52010) - read(0x0)
    RDX: 0000000000000000 RSI: ffffffff82eaf047 RDI: 0000000000000007
    RBP: ffff8801c44a7410 R08: ffff8801ce208040 R09: ffffed0039ee4176
    R10: ffffed0039ee4176 R11: ffff8801cf720bb7 R12: ffff8801c0efa000
    R13: 0000000000000003 R14: 0000000000000000 R15: 0000000000000000
    FS:  00007f753aa9d700(0000) GS:ffff8801daf00000(0000) knlGS:0000000000000000
    ------------[ cut here ]------------
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    kernel BUG at fs/f2fs/inode.c:238!
    CR2: 0000000001b03018 CR3: 00000001c8b74000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     f2fs_fill_super+0x4377/0x7bf0 fs/f2fs/super.c:2842
     mount_bdev+0x30c/0x3e0 fs/super.c:1165
     f2fs_mount+0x34/0x40 fs/f2fs/super.c:3020
     mount_fs+0xae/0x328 fs/super.c:1268
     vfs_kern_mount.part.34+0xd4/0x4d0 fs/namespace.c:1037
     vfs_kern_mount fs/namespace.c:1027 [inline]
     do_new_mount fs/namespace.c:2517 [inline]
     do_mount+0x564/0x3070 fs/namespace.c:2847
     ksys_mount+0x12d/0x140 fs/namespace.c:3063
     __do_sys_mount fs/namespace.c:3077 [inline]
     __se_sys_mount fs/namespace.c:3074 [inline]
     __x64_sys_mount+0xbe/0x150 fs/namespace.c:3074
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457daa
    RSP: 002b:00007f753aa9cba8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a5
    RAX: ffffffffffffffda RBX: 0000000020000000 RCX: 0000000000457daa
    RDX: 0000000020000000 RSI: 0000000020000100 RDI: 00007f753aa9cbf0
    RBP: 0000000000000064 R08: 0000000020016a00 R09: 0000000020000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000003
    R13: 0000000000000064 R14: 00000000006fcb80 R15: 0000000000000000
    RIP: do_read_inode fs/f2fs/inode.c:238 [inline] RSP: ffff8801c44a70e8
    RIP: f2fs_iget+0x3307/0x3ca0 fs/f2fs/inode.c:313 RSP: ffff8801c44a70e8
    invalid opcode: 0000 [#2] SMP KASAN
    ---[ end trace 1cbcbec2156680bc ]---
    
    Reported-and-tested-by: syzbot+41a1b341571f0952badb@syzkaller.appspotmail.com
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65fc06a33eec0415b906ad46b633a73acc3e2822
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Mon Apr 23 23:02:31 2018 -0600

    f2fs: give message and set need_fsck given broken node id
    
    commit a4f843bd004d775cbb360cd375969b8a479568a9 upstream.
    
    syzbot hit the following crash on upstream commit
    83beed7b2b26f232d782127792dd0cd4362fdc41 (Fri Apr 20 17:56:32 2018 +0000)
    Merge branch 'fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/evalenti/linux-soc-thermal
    syzbot dashboard link: https://syzkaller.appspot.com/bug?extid=d154ec99402c6f628887
    
    C reproducer: https://syzkaller.appspot.com/x/repro.c?id=5414336294027264
    syzkaller reproducer: https://syzkaller.appspot.com/x/repro.syz?id=5471683234234368
    Raw console output: https://syzkaller.appspot.com/x/log.txt?id=5436660795834368
    Kernel config: https://syzkaller.appspot.com/x/.config?id=1808800213120130118
    compiler: gcc (GCC) 8.0.1 20180413 (experimental)
    
    IMPORTANT: if you fix the bug, please add the following tag to the commit:
    Reported-by: syzbot+d154ec99402c6f628887@syzkaller.appspotmail.com
    It will help syzbot understand when the bug is fixed. See footer for details.
    If you forward the report, please keep this part and the footer.
    
    F2FS-fs (loop0): Magic Mismatch, valid(0xf2f52010) - read(0x0)
    F2FS-fs (loop0): Can't find valid F2FS filesystem in 1th superblock
    F2FS-fs (loop0): invalid crc value
    ------------[ cut here ]------------
    kernel BUG at fs/f2fs/node.c:1185!
    invalid opcode: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 1 PID: 4549 Comm: syzkaller704305 Not tainted 4.17.0-rc1+ #10
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__get_node_page+0xb68/0x16e0 fs/f2fs/node.c:1185
    RSP: 0018:ffff8801d960e820 EFLAGS: 00010293
    RAX: ffff8801d88205c0 RBX: 0000000000000003 RCX: ffffffff82f6cc06
    RDX: 0000000000000000 RSI: ffffffff82f6d5e8 RDI: 0000000000000004
    RBP: ffff8801d960ec30 R08: ffff8801d88205c0 R09: ffffed003b5e46c2
    R10: 0000000000000003 R11: 0000000000000003 R12: ffff8801a86e00c0
    R13: 0000000000000001 R14: ffff8801a86e0530 R15: ffff8801d9745240
    FS:  000000000072c880(0000) GS:ffff8801daf00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f3d403209b8 CR3: 00000001d8f3f000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     get_node_page fs/f2fs/node.c:1237 [inline]
     truncate_xattr_node+0x152/0x2e0 fs/f2fs/node.c:1014
     remove_inode_page+0x200/0xaf0 fs/f2fs/node.c:1039
     f2fs_evict_inode+0xe86/0x1710 fs/f2fs/inode.c:547
     evict+0x4a6/0x960 fs/inode.c:557
     iput_final fs/inode.c:1519 [inline]
     iput+0x62d/0xa80 fs/inode.c:1545
     f2fs_fill_super+0x5f4e/0x7bf0 fs/f2fs/super.c:2849
     mount_bdev+0x30c/0x3e0 fs/super.c:1164
     f2fs_mount+0x34/0x40 fs/f2fs/super.c:3020
     mount_fs+0xae/0x328 fs/super.c:1267
     vfs_kern_mount.part.34+0xd4/0x4d0 fs/namespace.c:1037
     vfs_kern_mount fs/namespace.c:1027 [inline]
     do_new_mount fs/namespace.c:2518 [inline]
     do_mount+0x564/0x3070 fs/namespace.c:2848
     ksys_mount+0x12d/0x140 fs/namespace.c:3064
     __do_sys_mount fs/namespace.c:3078 [inline]
     __se_sys_mount fs/namespace.c:3075 [inline]
     __x64_sys_mount+0xbe/0x150 fs/namespace.c:3075
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x443dea
    RSP: 002b:00007ffcc7882368 EFLAGS: 00000297 ORIG_RAX: 00000000000000a5
    RAX: ffffffffffffffda RBX: 0000000020000c00 RCX: 0000000000443dea
    RDX: 0000000020000000 RSI: 0000000020000100 RDI: 00007ffcc7882370
    RBP: 0000000000000003 R08: 0000000020016a00 R09: 000000000000000a
    R10: 0000000000000000 R11: 0000000000000297 R12: 0000000000000004
    R13: 0000000000402ce0 R14: 0000000000000000 R15: 0000000000000000
    RIP: __get_node_page+0xb68/0x16e0 fs/f2fs/node.c:1185 RSP: ffff8801d960e820
    ---[ end trace 4edbeb71f002bb76 ]---
    
    Reported-and-tested-by: syzbot+d154ec99402c6f628887@syzkaller.appspotmail.com
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65e044949dae058da0fe5373d8ff5ed3087e93dc
Author: Marc Orr <marcorr@google.com>
Date:   Wed Jun 20 17:21:29 2018 -0700

    kvm: vmx: Nested VM-entry prereqs for event inj.
    
    commit 0447378a4a793da008451fad50bc0f93e9675ae6 upstream.
    
    This patch extends the checks done prior to a nested VM entry.
    Specifically, it extends the check_vmentry_prereqs function with checks
    for fields relevant to the VM-entry event injection information, as
    described in the Intel SDM, volume 3.
    
    This patch is motivated by a syzkaller bug, where a bad VM-entry
    interruption information field is generated in the VMCS02, which causes
    the nested VM launch to fail. Then, KVM fails to resume L1.
    
    While KVM should be improved to correctly resume L1 execution after a
    failed nested launch, this change is justified because the existing code
    to resume L1 is flaky/ad-hoc and the test coverage for resuming L1 is
    sparse.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Marc Orr <marcorr@google.com>
    [Removed comment whose parts were describing previous revisions and the
     rest was obvious from function/variable naming. - Radim]
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e369cfc3858a08f0a8c9dd9dee7e45b73cfafa6
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri May 4 10:58:09 2018 -0600

    loop: remember whether sysfs_create_group() was done
    
    commit d3349b6b3c373ac1fbfb040b810fcee5e2adc7e0 upstream.
    
    syzbot is hitting WARN() triggered by memory allocation fault
    injection [1] because loop module is calling sysfs_remove_group()
    when sysfs_create_group() failed.
    Fix this by remembering whether sysfs_create_group() succeeded.
    
    [1] https://syzkaller.appspot.com/bug?id=3f86c0edf75c86d2633aeb9dd69eccc70bc7e90b
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+9f03168400f56df89dbc6f1751f4458fe739ff29@syzkaller.appspotmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Renamed sysfs_ready -> sysfs_inited.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a624d1cdb307f95786b228becab1e0633a53bccb
Author: Leon Romanovsky <leon@kernel.org>
Date:   Wed May 23 08:22:11 2018 +0300

    RDMA/ucm: Mark UCM interface as BROKEN
    
    commit 7a8690ed6f5346f6738971892205e91d39b6b901 upstream.
    
    In commit 357d23c811a7 ("Remove the obsolete libibcm library")
    in rdma-core [1], we removed obsolete library which used the
    /dev/infiniband/ucmX interface.
    
    Following multiple syzkaller reports about non-sanitized
    user input in the UCMA module, the short audit reveals the same
    issues in UCM module too.
    
    It is better to disable this interface in the kernel,
    before syzkaller team invests time and energy to harden
    this unused interface.
    
    [1] https://github.com/linux-rdma/rdma-core/pull/279
    
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08dee81491edf695db750ff28b8ed705757560e1
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat May 26 09:59:36 2018 +0900

    PM / hibernate: Fix oops at snapshot_write()
    
    commit fc14eebfc20854a38fd9f1d93a42b1783dad4d17 upstream.
    
    syzbot is reporting NULL pointer dereference at snapshot_write() [1].
    This is because data->handle is zero-cleared by ioctl(SNAPSHOT_FREE).
    Fix this by checking data_of(data->handle) != NULL before using it.
    
    [1] https://syzkaller.appspot.com/bug?id=828a3c71bd344a6de8b6a31233d51a72099f27fd
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+ae590932da6e45d6564d@syzkaller.appspotmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce597b5c7e16a10386f6205dcd39641f0e8f5156
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Thu May 24 08:54:59 2018 -0700

    xfs: fix inobt magic number check
    
    commit 2e050e648ad6c74a2f0a28f645155128be0626ca upstream.
    
    In commit a6a781a58befcbd467c ("xfs: have buffer verifier functions
    report failing address") the bad magic number return was ported
    incorrectly.
    
    Fixes: a6a781a58befcbd467ce843af4eaca3906aa1f08
    Reported-by: syzbot+08ab33be0178b76851c8@syzkaller.appspotmail.com
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Eric Sandeen <sandeen@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5f0b908ab50c94864f7ac9be0c6337d098ce600
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon May 7 11:37:58 2018 -0400

    loop: add recursion validation to LOOP_CHANGE_FD
    
    commit d2ac838e4cd7e5e9891ecc094d626734b0245c99 upstream.
    
    Refactor the validation code used in LOOP_SET_FD so it is also used in
    LOOP_CHANGE_FD.  Otherwise it is possible to construct a set of loop
    devices that all refer to each other.  This can lead to a infinite
    loop in starting with "while (is_loop_device(f)) .." in loop_set_fd().
    
    Fix this by refactoring out the validation code and using it for
    LOOP_CHANGE_FD as well as LOOP_SET_FD.
    
    Reported-by: syzbot+4349872271ece473a7c91190b68b4bac7c5dbc87@syzkaller.appspotmail.com
    Reported-by: syzbot+40bd32c4d9a3cc12a339@syzkaller.appspotmail.com
    Reported-by: syzbot+769c54e66f994b041be7@syzkaller.appspotmail.com
    Reported-by: syzbot+0a89a9ce473936c57065@syzkaller.appspotmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1b0fc33589179515e0f46eae938774a83dc21d2
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jun 7 21:34:43 2018 +0200

    netfilter: x_tables: initialise match/target check parameter struct
    
    commit c568503ef02030f169c9e19204def610a3510918 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in ebt_stp_mt_check+0x24b/0x450
     net/bridge/netfilter/ebt_stp.c:162
     ebt_stp_mt_check+0x24b/0x450 net/bridge/netfilter/ebt_stp.c:162
     xt_check_match+0x1438/0x1650 net/netfilter/x_tables.c:506
     ebt_check_match net/bridge/netfilter/ebtables.c:372 [inline]
     ebt_check_entry net/bridge/netfilter/ebtables.c:702 [inline]
    
    The uninitialised access is
       xt_mtchk_param->nft_compat
    
    ... which should be set to 0.
    Fix it by zeroing the struct beforehand, same for tgchk.
    
    ip(6)tables targetinfo uses c99-style initialiser, so no change
    needed there.
    
    Reported-by: syzbot+da4494182233c23a5fcf@syzkaller.appspotmail.com
    Fixes: 55917a21d0cc0 ("netfilter: x_tables: add context to know if extension runs from nft_compat")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ab61ab0a4b34f9310aef02992bbcd6d46f03a40
Author: Dmitry Vyukov <dvyukov@google.com>
Date:   Fri Jun 8 11:53:41 2018 +0200

    crypto: don't optimize keccakf()
    
    commit f044a84e040b85cd609851ac88ae8b54b2cc0b75 upstream.
    
    keccakf() is the only function in kernel that uses __optimize() macro.
    __optimize() breaks frame pointer unwinder as optimized code uses RBP,
    and amusingly this always lead to degraded performance as gcc does not
    inline across different optimizations levels, so keccakf() wasn't inlined
    into its callers and keccakf_round() wasn't inlined into keccakf().
    
    Drop __optimize() to resolve both problems.
    
    Signed-off-by: Dmitry Vyukov <dvyukov@google.com>
    Fixes: 83dee2ce1ae7 ("crypto: sha3-generic - rewrite KECCAK transform to help the compiler optimize")
    Reported-by: syzbot+37035ccfa9a0a017ffcf@syzkaller.appspotmail.com
    Reported-by: syzbot+e073e4740cfbb3ae200b@syzkaller.appspotmail.com
    Cc: linux-crypto@vger.kernel.org
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43eadcb460455a1567c4a1829f3fc233ddfa9202
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jun 13 09:13:39 2018 -0700

    netfilter: nf_queue: augment nfqa_cfg_policy
    
    commit ba062ebb2cd561d404e0fba8ee4b3f5ebce7cbfc upstream.
    
    Three attributes are currently not verified, thus can trigger KMSAN
    warnings such as :
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in nfqnl_recv_config+0x939/0x17d0 net/netfilter/nfnetlink_queue.c:1268
    CPU: 1 PID: 4521 Comm: syz-executor120 Not tainted 4.17.0+ #5
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x188/0x2a0 mm/kmsan/kmsan.c:1117
     __msan_warning_32+0x70/0xc0 mm/kmsan/kmsan_instr.c:620
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     nfqnl_recv_config+0x939/0x17d0 net/netfilter/nfnetlink_queue.c:1268
     nfnetlink_rcv_msg+0xb2e/0xc80 net/netfilter/nfnetlink.c:212
     netlink_rcv_skb+0x37e/0x600 net/netlink/af_netlink.c:2448
     nfnetlink_rcv+0x2fe/0x680 net/netfilter/nfnetlink.c:513
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0x1680/0x1750 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x104f/0x1350 net/netlink/af_netlink.c:1901
     sock_sendmsg_nosec net/socket.c:629 [inline]
     sock_sendmsg net/socket.c:639 [inline]
     ___sys_sendmsg+0xec8/0x1320 net/socket.c:2117
     __sys_sendmsg net/socket.c:2155 [inline]
     __do_sys_sendmsg net/socket.c:2164 [inline]
     __se_sys_sendmsg net/socket.c:2162 [inline]
     __x64_sys_sendmsg+0x331/0x460 net/socket.c:2162
     do_syscall_64+0x15b/0x230 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x43fd59
    RSP: 002b:00007ffde0e30d28 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fd59
    RDX: 0000000000000000 RSI: 0000000020000080 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 0000000000401680
    R13: 0000000000401710 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:279 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:189
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:315
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan.c:322
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2753 [inline]
     __kmalloc_node_track_caller+0xb35/0x11b0 mm/slub.c:4395
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cb/0x9e0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:988 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0x76e/0x1350 net/netlink/af_netlink.c:1876
     sock_sendmsg_nosec net/socket.c:629 [inline]
     sock_sendmsg net/socket.c:639 [inline]
     ___sys_sendmsg+0xec8/0x1320 net/socket.c:2117
     __sys_sendmsg net/socket.c:2155 [inline]
     __do_sys_sendmsg net/socket.c:2164 [inline]
     __se_sys_sendmsg net/socket.c:2162 [inline]
     __x64_sys_sendmsg+0x331/0x460 net/socket.c:2162
     do_syscall_64+0x15b/0x230 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: fdb694a01f1f ("netfilter: Add fail-open support")
    Fixes: 829e17a1a602 ("[NETFILTER]: nfnetlink_queue: allow changing queue length through netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95262c792d3782659184648794a184d25801a26a
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Fri May 18 18:27:39 2018 +0200

    uprobes/x86: Remove incorrect WARN_ON() in uprobe_init_insn()
    
    commit 90718e32e1dcc2479acfa208ccfc6442850b594c upstream.
    
    insn_get_length() has the side-effect of processing the entire instruction
    but only if it was decoded successfully, otherwise insn_complete() can fail
    and in this case we need to just return an error without warning.
    
    Reported-by: syzbot+30d675e3ca03c1c351e7@syzkaller.appspotmail.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: syzkaller-bugs@googlegroups.com
    Link: https://lkml.kernel.org/lkml/20180518162739.GA5559@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49c8ef6d52ed6dacbca5a731ebe253bfb44e0ea9
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat May 26 00:08:58 2018 -0700

    crypto: x86/salsa20 - remove x86 salsa20 implementations
    
    commit b7b73cd5d74694ed59abcdb4974dacb4ff8b2a2a upstream.
    
    The x86 assembly implementations of Salsa20 use the frame base pointer
    register (%ebp or %rbp), which breaks frame pointer convention and
    breaks stack traces when unwinding from an interrupt in the crypto code.
    Recent (v4.10+) kernels will warn about this, e.g.
    
    WARNING: kernel stack regs at 00000000a8291e69 in syzkaller047086:4677 has bad 'bp' value 000000001077994c
    [...]
    
    But after looking into it, I believe there's very little reason to still
    retain the x86 Salsa20 code.  First, these are *not* vectorized
    (SSE2/SSSE3/AVX2) implementations, which would be needed to get anywhere
    close to the best Salsa20 performance on any remotely modern x86
    processor; they're just regular x86 assembly.  Second, it's still
    unclear that anyone is actually using the kernel's Salsa20 at all,
    especially given that now ChaCha20 is supported too, and with much more
    efficient SSSE3 and AVX2 implementations.  Finally, in benchmarks I did
    on both Intel and AMD processors with both gcc 8.1.0 and gcc 4.9.4, the
    x86_64 salsa20-asm is actually slightly *slower* than salsa20-generic
    (~3% slower on Skylake, ~10% slower on Zen), while the i686 salsa20-asm
    is only slightly faster than salsa20-generic (~15% faster on Skylake,
    ~20% faster on Zen).  The gcc version made little difference.
    
    So, the x86_64 salsa20-asm is pretty clearly useless.  That leaves just
    the i686 salsa20-asm, which based on my tests provides a 15-20% speed
    boost.  But that's without updating the code to not use %ebp.  And given
    the maintenance cost, the small speed difference vs. salsa20-generic,
    the fact that few people still use i686 kernels, the doubt that anyone
    is even using the kernel's Salsa20 at all, and the fact that a SSE2
    implementation would almost certainly be much faster on any remotely
    modern x86 processor yet no one has cared enough to add one yet, I don't
    think it's worthwhile to keep.
    
    Thus, just remove both the x86_64 and i686 salsa20-asm implementations.
    
    Reported-by: syzbot+ffa3a158337bbc01ff09@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7632f0f4f4bbed33a0c21fd43a1b0a685c516218
Author: Tony Battersby <tonyb@cybernetics.com>
Date:   Wed Jul 11 10:46:03 2018 -0400

    bsg: fix bogus EINVAL on non-data commands
    
    commit 70dbcc2254fa2a9add74a122b9dac954c4736e01 upstream.
    
    Fix a regression introduced in Linux kernel 4.17 where sending a SCSI
    command that does not transfer data (such as TEST UNIT READY) via
    /dev/bsg/* results in EINVAL.
    
    Fixes: 17cb960f29c2 ("bsg: split handling of SCSI CDBs vs transport requeues")
    Cc: <stable@vger.kernel.org> # 4.17+
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Tony Battersby <tonyb@cybernetics.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d9399b13642eccaf40575f778ccd2fae59bebbc
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Jul 12 17:40:34 2018 +0200

    xen: setup pv irq ops vector earlier
    
    commit 0ce0bba4e5e0eb9b753bb821785de5d23c494392 upstream.
    
    Setting pv_irq_ops for Xen PV domains should be done as early as
    possible in order to support e.g. very early printk() usage.
    
    The same applies to xen_vcpu_info_reset(0), as it is needed for the
    pv irq ops.
    
    Move the call of xen_setup_machphys_mapping() after initializing the
    pv functions as it contains a WARN_ON(), too.
    
    Remove the no longer necessary conditional in xen_init_irq_ops()
    from PVH V1 times to make clear this is a PV only function.
    
    Cc: <stable@vger.kernel.org> # 4.14
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 029da06d0ebe7dc2b2c23c8c8fbf830d98b21cb0
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Jul 2 12:00:18 2018 +0200

    xen: remove global bit from __default_kernel_pte_mask for pv guests
    
    commit e69b5d308da72cbf4e7911c3979f9a46d28532af upstream.
    
    When removing the global bit from __supported_pte_mask do the same for
    __default_kernel_pte_mask in order to avoid the WARN_ONCE() in
    check_pgprot() when setting a kernel pte before having called
    init_mem_mapping().
    
    Cc: <stable@vger.kernel.org> # 4.17
    Reported-by: Michael Young <m.a.young@durham.ac.uk>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08f52afde2830c8deeb7fb6e97f049dd6b6f45f0
Author: Steve Wise <larrystevenwise@gmail.com>
Date:   Thu Jun 21 07:43:21 2018 -0700

    iw_cxgb4: correctly enforce the max reg_mr depth
    
    commit 7b72717a20bba8bdd01b14c0460be7d15061cd6b upstream.
    
    The code was mistakenly using the length of the page array memory instead
    of the depth of the page array.
    
    This would cause MR creation to fail in some cases.
    
    Fixes: 8376b86de7d3 ("iw_cxgb4: Support the new memory registration API")
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve Wise <swise@opengridcomputing.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b759455da890957416bf7d6e0a7099e589e7254
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Tue Jul 10 23:42:15 2018 +0200

    i2c: recovery: if possible send STOP with recovery pulses
    
    commit abe41184abac487264a4904bfcff2d5500dccce6 upstream.
    
    I2C clients may misunderstand recovery pulses if they can't read SDA to
    bail out early. In the worst case, as a write operation. To avoid that
    and if we can write SDA, try to send STOP to avoid the
    misinterpretation.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 173e89c1adb0ee07912ceb85018b5a78385ad970
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Tue Jul 3 09:55:43 2018 +0100

    i2c: tegra: Fix NACK error handling
    
    commit 54836e2d03e76d80aec3399368ffaf5b7caadd1b upstream.
    
    On Tegra30 Cardhu the PCA9546 I2C mux is not ACK'ing I2C commands on
    resume from suspend (which is caused by the reset signal for the I2C
    mux not being configured correctl). However, this NACK is causing the
    Tegra30 to hang on resuming from suspend which is not expected as we
    detect NACKs and handle them. The hang observed appears to occur when
    resetting the I2C controller to recover from the NACK.
    
    Commit 77821b4678f9 ("i2c: tegra: proper handling of error cases") added
    additional error handling for some error cases including NACK, however,
    it appears that this change conflicts with an early fix by commit
    f70893d08338 ("i2c: tegra: Add delay before resetting the controller
    after NACK"). After commit 77821b4678f9 was made we now disable 'packet
    mode' before the delay from commit f70893d08338 happens. Testing shows
    that moving the delay to before disabling 'packet mode' fixes the hang
    observed on Tegra30. The delay was added to give the I2C controller
    chance to send a stop condition and so it makes sense to move this to
    before we disable packet mode. Please note that packet mode is always
    enabled for Tegra.
    
    Fixes: 77821b4678f9 ("i2c: tegra: proper handling of error cases")
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5eb7b13988f6a381e74b60b2a597f6737693b085
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Wed Jun 20 09:29:08 2018 -0700

    IB/hfi1: Fix incorrect mixing of ERR_PTR and NULL return values
    
    commit b697d7d8c741f27b728a878fc55852b06d0f6f5e upstream.
    
    The __get_txreq() function can return a pointer, ERR_PTR(-EBUSY), or NULL.
    All of the relevant call sites look for IS_ERR, so the NULL return would
    lead to a NULL pointer exception.
    
    Do not use the ERR_PTR mechanism for this function.
    
    Update all call sites to handle the return value correctly.
    
    Clean up error paths to reflect return value.
    
    Fixes: 45842abbb292 ("staging/rdma/hfi1: move txreq header code")
    Cc: <stable@vger.kernel.org> # 4.9.x+
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Kamenee Arumugam <kamenee.arumugam@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0df3a8abfe1b35444b3973ec2bed0e4828f68fc2
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Tue Jun 5 19:00:22 2018 +0200

    tools build: fix # escaping in .cmd files for future Make
    
    commit 9feeb638cde083c737e295c0547f1b4f28e99583 upstream.
    
    In 2016 GNU Make made a backwards incompatible change to the way '#'
    characters were handled in Makefiles when used inside functions or
    macros:
    
    http://git.savannah.gnu.org/cgit/make.git/commit/?id=c6966b323811c37acedff05b57
    
    Due to this change, when attempting to run `make prepare' I get a
    spurious make syntax error:
    
        /home/earnest/linux/tools/objtool/.fixdep.o.cmd:1: *** missing separator.  Stop.
    
    When inspecting `.fixdep.o.cmd' it includes two lines which use
    unescaped comment characters at the top:
    
        \# cannot find fixdep (/home/earnest/linux/tools/objtool//fixdep)
        \# using basic dep data
    
    This is because `tools/build/Build.include' prints these '\#'
    characters:
    
        printf '\# cannot find fixdep (%s)\n' $(fixdep) > $(dot-target).cmd; \
        printf '\# using basic dep data\n\n' >> $(dot-target).cmd;           \
    
    This completes commit 9564a8cf422d ("Kbuild: fix # escaping in .cmd files
    for future Make").
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=197847
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 372c759fdc675be4a3903668e8f6fc476eba3075
Author: Yandong Zhao <yandong77520@gmail.com>
Date:   Wed Jul 11 19:06:28 2018 +0800

    arm64: neon: Fix function may_use_simd() return error status
    
    commit 2fd8eb4ad87104c54800ef3cea498c92eb15c78a upstream.
    
    It does not matter if the caller of may_use_simd() migrates to
    another cpu after the call, but it is still important that the
    kernel_neon_busy percpu instance that is read matches the cpu the
    task is running on at the time of the read.
    
    This means that raw_cpu_read() is not sufficient.  kernel_neon_busy
    may appear true if the caller migrates during the execution of
    raw_cpu_read() and the next task to be scheduled in on the initial
    cpu calls kernel_neon_begin().
    
    This patch replaces raw_cpu_read() with this_cpu_read() to protect
    against this race.
    
    Cc: <stable@vger.kernel.org>
    Fixes: cb84d11e1625 ("arm64: neon: Remove support for nested or hardirq kernel-mode NEON")
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Dave Martin <Dave.Martin@arm.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Yandong Zhao <yandong77520@gmail.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02a5363e98abf9838f74c67d1e867f3fb80c7117
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jul 5 14:58:49 2018 -0700

    acpi, nfit: Fix scrub idle detection
    
    commit 33cc2c9667561b224215e6dfb5bf98e8fa17914e upstream.
    
    The notification of scrub completion happens within the scrub workqueue.
    That can clearly race someone running scrub_show() and work_busy()
    before the workqueue has a chance to flush the recently completed work.
    Add a flag to reliably indicate the idle vs busy state. Without this
    change applications using poll(2) to wait for scrub-completion may
    falsely wakeup and read ARS as being busy even though the thread is
    going idle and then hang indefinitely.
    
    Fixes: bc6ba8085842 ("nfit, address-range-scrub: rework and simplify ARS...")
    Cc: <stable@vger.kernel.org>
    Reported-by: Vishal Verma <vishal.l.verma@intel.com>
    Tested-by: Vishal Verma <vishal.l.verma@intel.com>
    Reported-by: Lukasz Dorau <lukasz.dorau@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60eacd898c4d4525ec51ca9cc34d866fb5286d33
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Jul 4 12:59:16 2018 -0700

    kbuild: delete INSTALL_FW_PATH from kbuild documentation
    
    commit 3f9cdee5929b7d035e86302dcf08fbf3e80b0739 upstream.
    
    Removed Kbuild documentation for INSTALL_FW_PATH.
    
    The kbuild symbol INSTALL_FW_PATH was removed from Kbuild tools in
    September 2017 (for 4.14) but the symbol was not deleted from
    the kbuild documentation, so do that now.
    
    Fixes: 5620a0d1aacd ("firmware: delete in-kernel firmware")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: stable@vger.kernel.org # 4.14+
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 259698f202378f31df6e845002377c2fbae827ad
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Mon Jun 25 17:08:22 2018 -0700

    tracing: Reorder display of TGID to be after PID
    
    commit f8494fa3dd10b52eab47a9666a8bc34719a129aa upstream.
    
    Currently ftrace displays data in trace output like so:
    
                                           _-----=> irqs-off
                                          / _----=> need-resched
                                         | / _---=> hardirq/softirq
                                         || / _--=> preempt-depth
                                         ||| /     delay
                TASK-PID   CPU    TGID   ||||    TIMESTAMP  FUNCTION
                   | |       |      |    ||||       |         |
                bash-1091  [000] ( 1091) d..2    28.313544: sched_switch:
    
    However Android's trace visualization tools expect a slightly different
    format due to an out-of-tree patch patch that was been carried for a
    decade, notice that the TGID and CPU fields are reversed:
    
                                           _-----=> irqs-off
                                          / _----=> need-resched
                                         | / _---=> hardirq/softirq
                                         || / _--=> preempt-depth
                                         ||| /     delay
                TASK-PID    TGID   CPU   ||||    TIMESTAMP  FUNCTION
                   | |        |      |   ||||       |         |
                bash-1091  ( 1091) [002] d..2    64.965177: sched_switch:
    
    From kernel v4.13 onwards, during which TGID was introduced, tracing
    with systrace on all Android kernels will break (most Android kernels
    have been on 4.9 with Android patches, so this issues hasn't been seen
    yet). From v4.13 onwards things will break.
    
    The chrome browser's tracing tools also embed the systrace viewer which
    uses the legacy TGID format and updates to that are known to be
    difficult to make.
    
    Considering this, I suggest we make this change to the upstream kernel
    and backport it to all Android kernels. I believe this feature is merged
    recently enough into the upstream kernel that it shouldn't be a problem.
    Also logically, IMO it makes more sense to group the TGID with the
    TASK-PID and the CPU after these.
    
    Link: http://lkml.kernel.org/r/20180626000822.113931-1-joel@joelfernandes.org
    
    Cc: jreck@google.com
    Cc: tkjos@google.com
    Cc: stable@vger.kernel.org
    Fixes: 441dae8f2f29 ("tracing: Add support for display of tgid in trace output")
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5787d29e6488bad75f7b3874b4068a2620a8b213
Author: Michal Hocko <mhocko@suse.com>
Date:   Fri Jul 13 16:59:20 2018 -0700

    mm: do not bug_on on incorrect length in __mm_populate()
    
    commit bb177a732c4369bb58a1fe1df8f552b6f0f7db5f upstream.
    
    syzbot has noticed that a specially crafted library can easily hit
    VM_BUG_ON in __mm_populate
    
      kernel BUG at mm/gup.c:1242!
      invalid opcode: 0000 [#1] SMP
      CPU: 2 PID: 9667 Comm: a.out Not tainted 4.18.0-rc3 #644
      Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 05/19/2017
      RIP: 0010:__mm_populate+0x1e2/0x1f0
      Code: 55 d0 65 48 33 14 25 28 00 00 00 89 d8 75 21 48 83 c4 20 5b 41 5c 41 5d 41 5e 41 5f 5d c3 e8 75 18 f1 ff 0f 0b e8 6e 18 f1 ff <0f> 0b 31 db eb c9 e8 93 06 e0 ff 0f 1f 00 55 48 89 e5 53 48 89 fb
      Call Trace:
         vm_brk_flags+0xc3/0x100
         vm_brk+0x1f/0x30
         load_elf_library+0x281/0x2e0
         __ia32_sys_uselib+0x170/0x1e0
         do_fast_syscall_32+0xca/0x420
         entry_SYSENTER_compat+0x70/0x7f
    
    The reason is that the length of the new brk is not page aligned when we
    try to populate the it.  There is no reason to bug on that though.
    do_brk_flags already aligns the length properly so the mapping is
    expanded as it should.  All we need is to tell mm_populate about it.
    Besides that there is absolutely no reason to to bug_on in the first
    place.  The worst thing that could happen is that the last page wouldn't
    get populated and that is far from putting system into an inconsistent
    state.
    
    Fix the issue by moving the length sanitization code from do_brk_flags
    up to vm_brk_flags.  The only other caller of do_brk_flags is brk
    syscall entry and it makes sure to provide the proper length so t here
    is no need for sanitation and so we can use do_brk_flags without it.
    
    Also remove the bogus BUG_ONs.
    
    [osalvador@techadventures.net: fix up vm_brk_flags s@request@len@]
    Link: http://lkml.kernel.org/r/20180706090217.GI32658@dhcp22.suse.cz
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: syzbot <syzbot+5dcb560fe12aa5091c06@syzkaller.appspotmail.com>
    Tested-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: Zi Yan <zi.yan@cs.rutgers.edu>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: "Huang, Ying" <ying.huang@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ffb09757e4a8ce2304f16c9d77fab5ff7a78e82
Author: Oscar Salvador <osalvador@suse.de>
Date:   Fri Jul 13 16:59:13 2018 -0700

    fs, elf: make sure to page align bss in load_elf_library
    
    commit 24962af7e1041b7e50c1bc71d8d10dc678c556b5 upstream.
    
    The current code does not make sure to page align bss before calling
    vm_brk(), and this can lead to a VM_BUG_ON() in __mm_populate() due to
    the requested lenght not being correctly aligned.
    
    Let us make sure to align it properly.
    
    Kees: only applicable to CONFIG_USELIB kernels: 32-bit and configured
    for libc5.
    
    Link: http://lkml.kernel.org/r/20180705145539.9627-1-osalvador@techadventures.net
    Signed-off-by: Oscar Salvador <osalvador@suse.de>
    Reported-by: syzbot+5dcb560fe12aa5091c06@syzkaller.appspotmail.com
    Tested-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Nicolas Pitre <nicolas.pitre@linaro.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f09dcc110f61e4ca97f5563c9affe96161450e7
Author: Philipp Rudo <prudo@linux.ibm.com>
Date:   Fri Jul 13 16:59:09 2018 -0700

    x86/purgatory: add missing FORCE to Makefile target
    
    commit fa8cbda88db12e632a8987c94b66f5caf25bcec4 upstream.
    
    - Build the kernel without the fix
    - Add some flag to the purgatories KBUILD_CFLAGS,I used
      -fno-asynchronous-unwind-tables
    - Re-build the kernel
    
    When you look at makes output you see that sha256.o is not re-build in the
    last step.  Also readelf -S still shows the .eh_frame section for
    sha256.o.
    
    With the fix sha256.o is rebuilt in the last step.
    
    Without FORCE make does not detect changes only made to the command line
    options.  So object files might not be re-built even when they should be.
    Fix this by adding FORCE where it is missing.
    
    Link: http://lkml.kernel.org/r/20180704110044.29279-2-prudo@linux.ibm.com
    Fixes: df6f2801f511 ("kernel/kexec_file.c: move purgatories sha256 to common code")
    Signed-off-by: Philipp Rudo <prudo@linux.ibm.com>
    Acked-by: Dave Young <dyoung@redhat.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>    [4.17+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43c841b3f6eeba8743768ac98d4cb1b03d5cb6ba
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Fri Jul 13 16:58:56 2018 -0700

    fs/proc/task_mmu.c: fix Locked field in /proc/pid/smaps*
    
    commit e70cc2bd579e8a9d6d153762f0fe294d0e652ff0 upstream.
    
    Thomas reports:
     "While looking around in /proc on my v4.14.52 system I noticed that all
      processes got a lot of "Locked" memory in /proc/*/smaps. A lot more
      memory than a regular user can usually lock with mlock().
    
      Commit 493b0e9d945f (in v4.14-rc1) seems to have changed the behavior
      of "Locked".
    
      Before that commit the code was like this. Notice the VM_LOCKED check.
    
               (vma->vm_flags & VM_LOCKED) ?
                    (unsigned long)(mss.pss >> (10 + PSS_SHIFT)) : 0);
    
      After that commit Locked is now the same as Pss:
    
              (unsigned long)(mss->pss >> (10 + PSS_SHIFT)));
    
      This looks like a mistake."
    
    Indeed, the commit has added mss->pss_locked with the correct value that
    depends on VM_LOCKED, but forgot to actually use it.  Fix it.
    
    Link: http://lkml.kernel.org/r/ebf6c7fb-fec3-6a26-544f-710ed193c154@suse.cz
    Fixes: 493b0e9d945f ("mm: add /proc/pid/smaps_rollup")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Reported-by: Thomas Lindroth <thomas.lindroth@gmail.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Daniel Colascione <dancol@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04e51092df55ea5c8f6b6e97cc195b81c1d1f597
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Fri Jul 13 16:58:52 2018 -0700

    mm: do not drop unused pages when userfaultd is running
    
    commit bce73e4842390f7b7309c8e253e139db71288ac3 upstream.
    
    KVM guests on s390 can notify the host of unused pages.  This can result
    in pte_unused callbacks to be true for KVM guest memory.
    
    If a page is unused (checked with pte_unused) we might drop this page
    instead of paging it.  This can have side-effects on userfaultd, when
    the page in question was already migrated:
    
    The next access of that page will trigger a fault and a user fault
    instead of faulting in a new and empty zero page.  As QEMU does not
    expect a userfault on an already migrated page this migration will fail.
    
    The most straightforward solution is to ignore the pte_unused hint if a
    userfault context is active for this VMA.
    
    Link: http://lkml.kernel.org/r/20180703171854.63981-1-borntraeger@de.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Janosch Frank <frankja@linux.ibm.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Cornelia Huck <cohuck@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54fbeaaa2a51c2a5b76d42535f8eee00ebd81674
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Jun 27 07:25:32 2018 +0100

    ALSA: hda - Handle pm failure during hotplug
    
    commit aaa23f86001bdb82d2f937c5c7bce0a1e11a6c5b upstream.
    
    Obtaining the runtime pm wakeref can fail, especially in a hotplug
    scenario where i915.ko has been unloaded. If we do not catch the
    failure, we end up with an unbalanced pm.
    
    v2 additions by tiwai:
    hdmi_present_sense() checks the return value and handle only a
    negative error case and bails out only if it's really still suspended.
    Also, snd_hda_power_down() is called at the error path so that the
    refcount is balanced.
    
    Along with it, the spec->pcm_lock is taken outside
    hdmi_present_sense() in the caller side, so that it won't cause
    deadlock at reentrace via runtime resume.
    
    v3 fix by tiwai:
    Missing linux/pm_runtime.h is included.
    
    References: 222bde03881c ("ALSA: hda - Fix mutex deadlock at HDMI/DP hotplug")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7523c91e9f8e1d2e61b057f9898006b20b1df0db
Author: Hui Wang <hui.wang@canonical.com>
Date:   Fri Jul 6 15:14:11 2018 +0800

    ALSA: hda/realtek - two more lenovo models need fixup of MIC_LOCATION
    
    commit c6b17f1020d956f4113d478cae6171b9093817ba upstream.
    
    We have two new lenovo desktop models which need to apply the fixup of
    ALC294_FIXUP_LENOVO_MIC_LOCATION, and they have the same pin cfg as
    the machine with subsystem id:0x17aa3136, now use the pincfg table
    to apply the fixup for them.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ea45736209c8efd04ed793f81084925097f84ed
Author: Pavel Tatashin <pasha.tatashin@oracle.com>
Date:   Sat Jul 14 09:15:07 2018 -0400

    mm: zero unavailable pages before memmap init
    
    commit e181ae0c5db9544de9c53239eb22bc012ce75033 upstream.
    
    We must zero struct pages for memory that is not backed by physical
    memory, or kernel does not have access to.
    
    Recently, there was a change which zeroed all memmap for all holes in
    e820.  Unfortunately, it introduced a bug that is discussed here:
    
      https://www.spinics.net/lists/linux-mm/msg156764.html
    
    Linus, also saw this bug on his machine, and confirmed that reverting
    commit 124049decbb1 ("x86/e820: put !E820_TYPE_RAM regions into
    memblock.reserved") fixes the issue.
    
    The problem is that we incorrectly zero some struct pages after they
    were setup.
    
    The fix is to zero unavailable struct pages prior to initializing of
    struct pages.
    
    A more detailed fix should come later that would avoid double zeroing
    cases: one in __init_single_page(), the other one in
    zero_resv_unavail().
    
    Fixes: 124049decbb1 ("x86/e820: put !E820_TYPE_RAM regions into memblock.reserved")
    Signed-off-by: Pavel Tatashin <pasha.tatashin@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dcb24abc93cad1afb87b3f30fd5bf348b49d5a7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 3 17:10:19 2018 -0700

    Fix up non-directory creation in SGID directories
    
    commit 0fa3ecd87848c9c93c2c828ef4c3a8ca36ce46c7 upstream.
    
    sgid directories have special semantics, making newly created files in
    the directory belong to the group of the directory, and newly created
    subdirectories will also become sgid.  This is historically used for
    group-shared directories.
    
    But group directories writable by non-group members should not imply
    that such non-group members can magically join the group, so make sure
    to clear the sgid bit on non-directories for non-members (but remember
    that sgid without group execute means "mandatory locking", just to
    confuse things even more).
    
    Reported-by: Jann Horn <jannh@google.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b5d496c97a348ade1d69ea7117f654d96cd4653
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 4 12:48:53 2018 +0300

    xhci: xhci-mem: off by one in xhci_stream_id_to_ring()
    
    commit 313db3d6488bb03b61b99de9dbca061f1fd838e1 upstream.
    
    The > should be >= here so that we don't read one element beyond the end
    of the ep->stream_info->stream_rings[] array.
    
    Fixes: e9df17eb1408 ("USB: xhci: Correct assumptions about number of rings per endpoint.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3819252d58bd623168e7fd9dfbacae05450e7ec0
Author: Nico Sneck <snecknico@gmail.com>
Date:   Mon Jul 2 19:26:07 2018 +0300

    usb: quirks: add delay quirks for Corsair Strafe
    
    commit bba57eddadda936c94b5dccf73787cb9e159d0a5 upstream.
    
    Corsair Strafe appears to suffer from the same issues
    as the Corsair Strafe RGB.
    Apply the same quirks (control message delay and init delay)
    that the RGB version has to 1b1c:1b15.
    
    With these quirks in place the keyboard works correctly upon
    booting the system, and no longer requires reattaching the device.
    
    Signed-off-by: Nico Sneck <snecknico@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13c94467c25abca7f7e879d8edde36da3d494d1a
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 4 17:02:17 2018 +0200

    USB: serial: mos7840: fix status-register error handling
    
    commit 794744abfffef8b1f3c0c8a4896177d6d13d653d upstream.
    
    Add missing transfer-length sanity check to the status-register
    completion handler to avoid leaking bits of uninitialised slab data to
    user space.
    
    Fixes: 3f5429746d91 ("USB: Moschip 7840 USB-Serial Driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce6037ad83d4d1a27f11c352eb8fab10b1a4e97c
Author: Jann Horn <jannh@google.com>
Date:   Fri Jul 6 17:12:56 2018 +0200

    USB: yurex: fix out-of-bounds uaccess in read handler
    
    commit f1e255d60ae66a9f672ff9a207ee6cd8e33d2679 upstream.
    
    In general, accessing userspace memory beyond the length of the supplied
    buffer in VFS read/write handlers can lead to both kernel memory corruption
    (via kernel_read()/kernel_write(), which can e.g. be triggered via
    sys_splice()) and privilege escalation inside userspace.
    
    Fix it by using simple_read_from_buffer() instead of custom logic.
    
    Fixes: 6bc235a2e24a ("USB: add driver for Meywa-Denki & Kayac YUREX")
    Signed-off-by: Jann Horn <jannh@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 137d487b4660ea49863d81ed8d0ad2730698e72e
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 4 17:02:16 2018 +0200

    USB: serial: keyspan_pda: fix modem-status error handling
    
    commit 01b3cdfca263a17554f7b249d20a247b2a751521 upstream.
    
    Fix broken modem-status error handling which could lead to bits of slab
    data leaking to user space.
    
    Fixes: 3b36a8fd6777 ("usb: fix uninitialized variable warning in keyspan_pda")
    Cc: stable <stable@vger.kernel.org>     # 2.6.27
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bcb5a0f790f45244cd3f4a574f00ca4381567e1
Author: Olli Salonen <olli.salonen@iki.fi>
Date:   Wed Jul 4 14:07:42 2018 +0300

    USB: serial: cp210x: add another USB ID for Qivicon ZigBee stick
    
    commit 367b160fe4717c14a2a978b6f9ffb75a7762d3ed upstream.
    
    There are two versions of the Qivicon Zigbee stick in circulation. This
    adds the second USB ID to the cp210x driver.
    
    Signed-off-by: Olli Salonen <olli.salonen@iki.fi>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d35925d6eb482c2087a2941a515b37e8b6005975
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 4 12:29:38 2018 +0300

    USB: serial: ch341: fix type promotion bug in ch341_control_in()
    
    commit e33eab9ded328ccc14308afa51b5be7cbe78d30b upstream.
    
    The "r" variable is an int and "bufsize" is an unsigned int so the
    comparison is type promoted to unsigned.  If usb_control_msg() returns a
    negative that is treated as a high positive value and the error handling
    doesn't work.
    
    Fixes: 2d5a9c72d0c4 ("USB: serial: ch341: fix control-message error handling")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36567d0bba4f7386b9e204d5099c39b3b641015f
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Jun 26 14:46:35 2018 +0300

    thunderbolt: Notify userspace when boot_acl is changed
    
    commit 007a74907deeceefef9dc3ec4679fbd7921eaa51 upstream.
    
    The commit 9aaa3b8b4c56 ("thunderbolt: Add support for preboot ACL")
    introduced boot_acl attribute but missed the fact that now userspace
    needs to poll the attribute constantly to find out whether it has
    changed or not. Fix this by sending notification to the userspace
    whenever the boot_acl attribute is changed.
    
    Fixes: 9aaa3b8b4c56 ("thunderbolt: Add support for preboot ACL")
    Reported-and-tested-by: Christian Kellner <christian@kellner.me>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Christian Kellner <christian@kellner.me>
    Acked-by: Yehezkel Bernat <yehezkelshb@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66a1080d5ce4e851370613f8e556d6a59c92ea8d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Jul 1 12:15:46 2018 +0200

    ahci: Disable LPM on Lenovo 50 series laptops with a too old BIOS
    
    commit 240630e61870e62e39a97225048f9945848fa5f5 upstream.
    
    There have been several reports of LPM related hard freezes about once
    a day on multiple Lenovo 50 series models. Strange enough these reports
    where not disk model specific as LPM issues usually are and some users
    with the exact same disk + laptop where seeing them while other users
    where not seeing these issues.
    
    It turns out that enabling LPM triggers a firmware bug somewhere, which
    has been fixed in later BIOS versions.
    
    This commit adds a new ahci_broken_lpm() function and a new ATA_FLAG_NO_LPM
    for dealing with this.
    
    The ahci_broken_lpm() function contains DMI match info for the 4 models
    which are known to be affected by this and the DMI BIOS date field for
    known good BIOS versions. If the BIOS date is older then the one in the
    table LPM will be disabled and a warning will be printed.
    
    Note the BIOS dates are for known good versions, some older versions may
    work too, but we don't know for sure, the table is using dates from BIOS
    versions for which users have confirmed that upgrading to that version
    makes the problem go away.
    
    Unfortunately I've been unable to get hold of the reporter who reported
    that BIOS version 2.35 fixed the problems on the W541 for him. I've been
    able to verify the DMI_SYS_VENDOR and DMI_PRODUCT_VERSION from an older
    dmidecode, but I don't know the exact BIOS date as reported in the DMI.
    Lenovo keeps a changelog with dates in their release notes, but the
    dates there are the release dates not the build dates which are in DMI.
    So I've chosen to set the date to which we compare to one day past the
    release date of the 2.34 BIOS. I plan to fix this with a follow up
    commit once I've the necessary info.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ca653aaa0cf3efeff4f1c790e55ced74db1c155
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Jun 27 15:15:40 2018 +0300

    ahci: Add Intel Ice Lake LP PCI ID
    
    commit ba44579141f9e2c0229e6e7eeb00b5fa68f0f74a upstream.
    
    This should also be using the default LPM policy for mobile chipsets so
    add the PCI ID to the driver list of supported devices.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bac537f685877923604322e538be30a188e5ea6
Author: Nadav Amit <namit@vmware.com>
Date:   Mon Jul 2 19:27:13 2018 -0700

    vmw_balloon: fix inflation with batching
    
    commit 90d72ce079791399ac255c75728f3c9e747b093d upstream.
    
    Embarrassingly, the recent fix introduced worse problem than it solved,
    causing the balloon not to inflate. The VM informed the hypervisor that
    the pages for lock/unlock are sitting in the wrong address, as it used
    the page that is used the uninitialized page variable.
    
    Fixes: b23220fe054e9 ("vmw_balloon: fixing double free when batching mode is off")
    Cc: stable@vger.kernel.org
    Reviewed-by: Xavier Deguillard <xdeguillard@vmware.com>
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a82304704f66661aa88c05d335d726a0648bd7e
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Mon Jul 9 16:19:06 2018 +0200

    tracing/kprobe: Release kprobe print_fmt properly
    
    commit 0fc8c3581dd42bc8f530314ca86db2d861485731 upstream.
    
    We don't release tk->tp.call.print_fmt when destroying
    local uprobe. Also there's missing print_fmt kfree in
    create_local_trace_kprobe error path.
    
    Link: http://lkml.kernel.org/r/20180709141906.2390-1-jolsa@kernel.org
    
    Cc: stable@vger.kernel.org
    Fixes: e12f03d7031a ("perf/core: Implement the 'perf_kprobe' PMU")
    Acked-by: Song Liu <songliubraving@fb.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0786b525e1a7a2f5ee6541fb7d6615918f8389d6
Author: Vignesh R <vigneshr@ti.com>
Date:   Sat Jun 30 16:24:21 2018 +0530

    mtd: spi-nor: cadence-quadspi: Fix direct mode write timeouts
    
    commit aa7eee8a143a7e8b530eb1e75fb86cae793d1e21 upstream.
    
    Sometimes when writing large size files to flash in direct/memory mapped
    mode, it is seen that flash write enable command times out with error:
    [  503.146293] cadence-qspi 47040000.ospi: Flash command execution timed out.
    
    This is because, we need to make sure previous direct write operation
    is complete by polling for IDLE bit in CONFIG_REG before starting the
    next operation.
    
    Fix this by polling for IDLE bit after memory mapped write.
    
    Fixes: a27f2eaf2b27 ("mtd: spi-nor: cadence-quadspi: Add support for direct access mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Reviewed-by: Marek Vasut <marek.vasut@gmail.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ac3afe1341e20359c0d1f9e1f358d175e52bcf4
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Thu Jun 7 00:31:48 2018 +0300

    mei: discard messages from not connected client during power down.
    
    commit b7a020bff31318fc8785e6f96b1d38c1625cf1fb upstream.
    
    This fixes regression introduced by
    commit 8d52af6795c0 ("mei: speed up the power down flow")
    
    In power down or suspend flow a message can still be received
    from the FW because the clients fake disconnection.
    In normal case we interpret messages w/o destination as corrupted
    and link reset is performed in order to clean the channel,
    but during power down link reset is already in progress resulting
    in endless loop. To resolve the issue under power down flow we
    discard messages silently.
    
    Cc: <stable@vger.kernel.org> 4.16+
    Fixes: 8d52af6795c0 ("mei: speed up the power down flow")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199541
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28b37a9548267b0f891a497c4d79e18dc13bbdcd
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Tue Jun 26 20:56:55 2018 +0900

    ata: Fix ZBC_OUT all bit handling
    
    commit 6edf1d4cb0acde3a0a5dac849f33031bd7abb7b1 upstream.
    
    If the ALL bit is set in the ZBC_OUT command, the command zone ID field
    (block) should be ignored.
    
    Reported-by: David Butterfield <david.butterfield@wdc.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d24c77e726da253d1a4fb306ba23d3002c7b07ca
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Tue Jun 26 20:56:54 2018 +0900

    ata: Fix ZBC_OUT command block check
    
    commit b320a0a9f23c98f21631eb27bcbbca91c79b1c6e upstream.
    
    The block (LBA) specified must not exceed the last addressable LBA,
    which is dev->nr_sectors - 1. So fix the correct check is
    "if (block >= dev->n_sectors)" and not "if (block > dev->n_sectords)".
    
    Additionally, the asc/ascq to return for an LBA that is not a zone start
    LBA should be ILLEGAL REQUEST, regardless if the bad LBA is out of
    range.
    
    Reported-by: David Butterfield <david.butterfield@wdc.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fefbccbeb5cab7cae02363deede3f152de3c406
Author: Ping-Ke Shih <pkshih@realtek.com>
Date:   Fri Jul 6 13:44:35 2018 +0800

    staging: r8822be: Fix RTL8822be can't find any wireless AP
    
    commit d59d2f9995d28974877750f429e821324bd603c7 upstream.
    
    RTL8822be can't bring up properly on ASUS X530UN, and dmesg says:
    [ 8.591333] r8822be: module is from the staging directory, the quality
    is unknown, you have been warned.
    [ 8.593122] r8822be 0000:02:00.0: enabling device (0000 -> 0003)
    [ 8.669163] r8822be: Using firmware rtlwifi/rtl8822befw.bin
    [ 9.289939] r8822be: rtlwifi: wireless switch is on
    [ 10.056426] r8822be 0000:02:00.0 wlp2s0: renamed from wlan0
    ...
    [ 11.952534] r8822be: halmac_init_hal failed
    [ 11.955933] r8822be: halmac_init_hal failed
    [ 11.956227] r8822be: halmac_init_hal failed
    [ 22.007942] r8822be: halmac_init_hal failed
    
    Jian-Hong reported it works if turn off ASPM with module parameter aspm=0.
    In order to fix this problem kindly, this commit don't turn off aspm but
    enlarge ASPM L1 latency to 7.
    
    Reported-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Tested-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad7af60f0f7a1390446ec3b57249b634503e1cf0
Author: Murray McAllister <murray.mcallister@insomniasec.com>
Date:   Mon Jul 2 13:07:28 2018 +1200

    staging: rtl8723bs: Prevent an underflow in rtw_check_beacon_data().
    
    commit 920c92448839bd4f8eb87a92b08cad56d449caff upstream.
    
    Dan Carpenter reported an integer underflow issue in the rtl8188eu driver.
    This is also needed for the length (signed integer) in rtl8723bs, as it is
    later converted to an unsigned integer and used in a memcpy operation.
    
    Original issue is at https://patchwork.kernel.org/patch/9796371/
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Murray McAllister <murray.mcallister@insomniasec.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f96dd5fb7bbe57b910be9644276c4dd192605d1a
Author: Jann Horn <jannh@google.com>
Date:   Sat Jul 7 04:16:33 2018 +0200

    ibmasm: don't write out of bounds in read handler
    
    commit a0341fc1981a950c1e902ab901e98f60e0e243f3 upstream.
    
    This read handler had a lot of custom logic and wrote outside the bounds of
    the provided buffer. This could lead to kernel and userspace memory
    corruption. Just use simple_read_from_buffer() with a stack buffer.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78211c3b2eb0a041a81d9900ea294c2b81379da4
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Fri Jun 29 19:01:45 2018 +0900

    mmc: renesas_sdhi_internal_dmac: Cannot clear the RX_IN_USE in abort
    
    commit 25a98edd5795719c5187e16ea271e8de86e02809 upstream.
    
    This patch is fixes an issue that the SDHI_INTERNAL_DMAC_RX_IN_USE
    flag cannot be cleared because tmio_mmc_core sets the host->data
    to NULL before the tmio_mmc_core calls tmio_mmc_abort_dma().
    
    So, this patch clears the SDHI_INTERNAL_DMAC_RX_IN_USE in
    the renesas_sdhi_internal_dmac_abort_dma() anyway. This doesn't
    cause any side effects.
    
    Fixes: 0cbc94daa554 ("mmc: renesas_sdhi_internal_dmac: limit DMA RX for old SoCs")
    Cc: <stable@vger.kernel.org> # v4.17+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f74564e33f9373c2ecfc2973dea0260630c5c988
Author: x00270170 <xiaqing17@hisilicon.com>
Date:   Tue Jul 3 15:06:27 2018 +0800

    mmc: dw_mmc: fix card threshold control configuration
    
    commit 7a6b9f4d601dfce8cb68f0dcfd834270280e31e6 upstream.
    
    Card write threshold control is supposed to be set since controller
    version 2.80a for data write in HS400 mode and data read in
    HS200/HS400/SDR104 mode. However the current code returns without
    configuring it in the case of data writing in HS400 mode.
    Meanwhile the patch fixes that the current code goes to
    'disable' when doing data reading in HS400 mode.
    
    Fixes: 7e4bf1bc9543 ("mmc: dw_mmc: add the card write threshold for HS400 mode")
    Signed-off-by: Qing Xia <xiaqing17@hisilicon.com>
    Cc: stable@vger.kernel.org # v4.8+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 527c1ee291a03eadd07fbccb6c2cc5a04dcda39e
Author: Stefan Agner <stefan@agner.ch>
Date:   Wed Jul 4 17:07:45 2018 +0200

    mmc: sdhci-esdhc-imx: allow 1.8V modes without 100/200MHz pinctrl states
    
    commit 92748beac07c471d995fbec642b63572dc01b3dc upstream.
    
    If pinctrl nodes for 100/200MHz are missing, the controller should
    not select any mode which need signal frequencies 100MHz or higher.
    To prevent such speed modes the driver currently uses the quirk flag
    SDHCI_QUIRK2_NO_1_8_V. This works nicely for SD cards since 1.8V
    signaling is required for all faster modes and slower modes use 3.3V
    signaling only.
    
    However, there are eMMC modes which use 1.8V signaling and run below
    100MHz, e.g. DDR52 at 1.8V. With using SDHCI_QUIRK2_NO_1_8_V this
    mode is prevented. When using a fixed 1.8V regulator as vqmmc-supply
    the stack has no valid mode to use. In this tenuous situation the
    kernel continuously prints voltage switching errors:
      mmc1: Switching to 3.3V signalling voltage failed
    
    Avoid using SDHCI_QUIRK2_NO_1_8_V and prevent faster modes by
    altering the SDHCI capability register. With that the stack is able
    to select 1.8V modes even if no faster pinctrl states are available:
      # cat /sys/kernel/debug/mmc1/ios
      ...
      timing spec:    8 (mmc DDR52)
      signal voltage: 1 (1.80 V)
      ...
    
    Link: http://lkml.kernel.org/r/20180628081331.13051-1-stefan@agner.ch
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Fixes: ad93220de7da ("mmc: sdhci-esdhc-imx: change pinctrl state according
    to uhs mode")
    Cc: <stable@vger.kernel.org> # v4.13+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5abec3a59f007fc1b654a9af5e495f2f50587687
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Jul 9 11:01:07 2018 +0200

    ACPICA: Clear status of all events when entering S5
    
    commit fa85015c0d95884c8dc42f38e2f2d6137d436b67 upstream.
    
    After commit 18996f2db918 (ACPICA: Events: Stop unconditionally
    clearing ACPI IRQs during suspend/resume) the status of ACPI events
    is not cleared any more when entering the ACPI S5 system state (power
    off) which causes some systems to power up immediately after turing
    off power in certain situations.
    
    That is a functional regression, so address it by making the code
    clear the status of all ACPI events again when entering S5 (for
    system-wide suspend or hibernation the clearing of the status of all
    events is not desirable, as it might cause the kernel to miss wakeup
    events sometimes).
    
    Fixes: 18996f2db918 (ACPICA: Events: Stop unconditionally clearing ACPI IRQs during suspend/resume)
    Reported-by: Takashi Iwai <tiwai@suse.de>
    Tested-by: Thomas Hänig <haenig@cosifan.de>
    Cc: 4.17+ <stable@vger.kernel.org> # 4.17+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e48285b84017fc1f340e261e49302f2d8c884c9
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Wed Jun 27 15:58:13 2018 +0200

    drm/etnaviv: bring back progress check in job timeout handler
    
    commit 2c83a726d6fbb5d130d8f2edd82a258adb675ac3 upstream.
    
    When the hangcheck handler was replaced by the DRM scheduler timeout
    handling we dropped the forward progress check, as this might allow
    clients to hog the GPU for a long time with a big job.
    
    It turns out that even reasonably well behaved clients like the
    Armada Xorg driver occasionally trip over the 500ms timeout. Bring
    back the forward progress check to get rid of the userspace regression.
    
    We would still like to fix userspace to submit smaller batches
    if possible, but that is for another day.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 6d7a20c07760 (drm/etnaviv: replace hangcheck with scheduler timeout)
    Reported-by: Russell King <linux@armlinux.org.uk>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b163d99f432304de648cd2295cb8df28b2c081f0
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Wed Jun 27 10:07:46 2018 -0300

    drm/etnaviv: Fix driver unregistering
    
    commit bf6ba3aeb2962e5ee4a78e7535af579ecba630bb upstream.
    
    Russell King reported:
    
    "When removing and reloading the etnaviv module, the following splat
    occurs:
    
    sysfs: cannot create duplicate filename '/devices/platform/etnaviv'
    CPU: 0 PID: 1471 Comm: modprobe Not tainted 4.17.0+ #1608
    Hardware name: Marvell Dove (Cubox)
    Backtrace:
    [<c00157d4>] (dump_backtrace) from [<c0015b8c>] (show_stack+0x18/0x1c)
     r6:ef033e38 r5:ee07b340 r4:edb9d000 r3:00000000
    [<c0015b74>] (show_stack) from [<c0620784>] (dump_stack+0x20/0x28)
    [<c0620764>] (dump_stack) from [<c01bcd24>] (sysfs_warn_dup+0x5c/0x70)
    [<c01bccc8>] (sysfs_warn_dup) from [<c01bce14>] (sysfs_create_dir_ns+0x90/0x98)
    ..."
    
    Commit 246774d17fc0 ("drm/etnaviv: remove the need for a gpu-subsystem
    DT node") introduced DRM registration via
    platform_device_register_simple(), but missed to call
    platform_device_unregister() inside etnaviv_exit().
    
    Fix the problem by calling platform_device_unregister() inside
    etnaviv_exit(). While at it, also rearrange the function calls
    in the exit path to make them happen in the opposite order of
    registration.
    
    Tested on a imx6-sabresd board.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 246774d17fc0 ("drm/etnaviv: remove the need for a gpu-subsystem DT node")
    Reported-by: Russell King <linux@armlinux.org.uk>
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a69975dad25a735e322d0d20d55f9786d688e83
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Wed Jun 27 10:07:45 2018 -0300

    drm/etnaviv: Check for platform_device_register_simple() failure
    
    commit 45a0faaba9c8c5ba1e31a08a391aed0bad327167 upstream.
    
    platform_device_register_simple() may fail, so we should better
    check its return value and propagate it in the case of error.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 246774d17fc0 ("drm/etnaviv: remove the need for a gpu-subsystem DT node")
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c54c6ddd843d37f80406793b3a53bc7c844d8a1
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Jul 5 14:37:52 2018 -0700

    MIPS: Fix ioremap() RAM check
    
    commit 523402fa9101090c91d2033b7ebdfdcf65880488 upstream.
    
    We currently attempt to check whether a physical address range provided
    to __ioremap() may be in use by the page allocator by examining the
    value of PageReserved for each page in the region - lowmem pages not
    marked reserved are presumed to be in use by the page allocator, and
    requests to ioremap them fail.
    
    The way we check this has been broken since commit 92923ca3aace ("mm:
    meminit: only set page reserved in the memblock region"), because
    memblock will typically not have any knowledge of non-RAM pages and
    therefore those pages will not have the PageReserved flag set. Thus when
    we attempt to ioremap a region outside of RAM we incorrectly fail
    believing that the region is RAM that may be in use.
    
    In most cases ioremap() on MIPS will take a fast-path to use the
    unmapped kseg1 or xkphys virtual address spaces and never hit this path,
    so the only way to hit it is for a MIPS32 system to attempt to ioremap()
    an address range in lowmem with flags other than _CACHE_UNCACHED.
    Perhaps the most straightforward way to do this is using
    ioremap_uncached_accelerated(), which is how the problem was discovered.
    
    Fix this by making use of walk_system_ram_range() to test the address
    range provided to __ioremap() against only RAM pages, rather than all
    lowmem pages. This means that if we have a lowmem I/O region, which is
    very common for MIPS systems, we're free to ioremap() address ranges
    within it. A nice bonus is that the test is no longer limited to lowmem.
    
    The approach here matches the way x86 performed the same test after
    commit c81c8a1eeede ("x86, ioremap: Speed up check for RAM pages") until
    x86 moved towards a slightly more complicated check using walk_mem_res()
    for unrelated reasons with commit 0e4c12b45aa8 ("x86/mm, resource: Use
    PAGE_KERNEL protection for ioremap of memory pages").
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Serge Semin <fancer.lancer@gmail.com>
    Tested-by: Serge Semin <fancer.lancer@gmail.com>
    Fixes: 92923ca3aace ("mm: meminit: only set page reserved in the memblock region")
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.2+
    Patchwork: https://patchwork.linux-mips.org/patch/19786/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12cb64bd0eb395dbe13134c3de0c49ae280f5d88
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Jun 22 10:55:46 2018 -0700

    MIPS: Use async IPIs for arch_trigger_cpumask_backtrace()
    
    commit b63e132b6433a41cf311e8bc382d33fd2b73b505 upstream.
    
    The current MIPS implementation of arch_trigger_cpumask_backtrace() is
    broken because it attempts to use synchronous IPIs despite the fact that
    it may be run with interrupts disabled.
    
    This means that when arch_trigger_cpumask_backtrace() is invoked, for
    example by the RCU CPU stall watchdog, we may:
    
      - Deadlock due to use of synchronous IPIs with interrupts disabled,
        causing the CPU that's attempting to generate the backtrace output
        to hang itself.
    
      - Not succeed in generating the desired output from remote CPUs.
    
      - Produce warnings about this from smp_call_function_many(), for
        example:
    
        [42760.526910] INFO: rcu_sched detected stalls on CPUs/tasks:
        [42760.535755]  0-...!: (1 GPs behind) idle=ade/140000000000000/0 softirq=526944/526945 fqs=0
        [42760.547874]  1-...!: (0 ticks this GP) idle=e4a/140000000000000/0 softirq=547885/547885 fqs=0
        [42760.559869]  (detected by 2, t=2162 jiffies, g=266689, c=266688, q=33)
        [42760.568927] ------------[ cut here ]------------
        [42760.576146] WARNING: CPU: 2 PID: 1216 at kernel/smp.c:416 smp_call_function_many+0x88/0x20c
        [42760.587839] Modules linked in:
        [42760.593152] CPU: 2 PID: 1216 Comm: sh Not tainted 4.15.4-00373-gee058bb4d0c2 #2
        [42760.603767] Stack : 8e09bd20 8e09bd20 8e09bd20 fffffff0 00000007 00000006 00000000 8e09bca8
        [42760.616937]         95b2b379 95b2b379 807a0080 00000007 81944518 0000018a 00000032 00000000
        [42760.630095]         00000000 00000030 80000000 00000000 806eca74 00000009 8017e2b8 000001a0
        [42760.643169]         00000000 00000002 00000000 8e09baa4 00000008 808b8008 86d69080 8e09bca0
        [42760.656282]         8e09ad50 805e20aa 00000000 00000000 00000000 8017e2b8 00000009 801070ca
        [42760.669424]         ...
        [42760.673919] Call Trace:
        [42760.678672] [<27fde568>] show_stack+0x70/0xf0
        [42760.685417] [<84751641>] dump_stack+0xaa/0xd0
        [42760.692188] [<699d671c>] __warn+0x80/0x92
        [42760.698549] [<68915d41>] warn_slowpath_null+0x28/0x36
        [42760.705912] [<f7c76c1c>] smp_call_function_many+0x88/0x20c
        [42760.713696] [<6bbdfc2a>] arch_trigger_cpumask_backtrace+0x30/0x4a
        [42760.722216] [<f845bd33>] rcu_dump_cpu_stacks+0x6a/0x98
        [42760.729580] [<796e7629>] rcu_check_callbacks+0x672/0x6ac
        [42760.737476] [<059b3b43>] update_process_times+0x18/0x34
        [42760.744981] [<6eb94941>] tick_sched_handle.isra.5+0x26/0x38
        [42760.752793] [<478d3d70>] tick_sched_timer+0x1c/0x50
        [42760.759882] [<e56ea39f>] __hrtimer_run_queues+0xc6/0x226
        [42760.767418] [<e88bbcae>] hrtimer_interrupt+0x88/0x19a
        [42760.775031] [<6765a19e>] gic_compare_interrupt+0x2e/0x3a
        [42760.782761] [<0558bf5f>] handle_percpu_devid_irq+0x78/0x168
        [42760.790795] [<90c11ba2>] generic_handle_irq+0x1e/0x2c
        [42760.798117] [<1b6d462c>] gic_handle_local_int+0x38/0x86
        [42760.805545] [<b2ada1c7>] gic_irq_dispatch+0xa/0x14
        [42760.812534] [<90c11ba2>] generic_handle_irq+0x1e/0x2c
        [42760.820086] [<c7521934>] do_IRQ+0x16/0x20
        [42760.826274] [<9aef3ce6>] plat_irq_dispatch+0x62/0x94
        [42760.833458] [<6a94b53c>] except_vec_vi_end+0x70/0x78
        [42760.840655] [<22284043>] smp_call_function_many+0x1ba/0x20c
        [42760.848501] [<54022b58>] smp_call_function+0x1e/0x2c
        [42760.855693] [<ab9fc705>] flush_tlb_mm+0x2a/0x98
        [42760.862730] [<0844cdd0>] tlb_flush_mmu+0x1c/0x44
        [42760.869628] [<cb259b74>] arch_tlb_finish_mmu+0x26/0x3e
        [42760.877021] [<1aeaaf74>] tlb_finish_mmu+0x18/0x66
        [42760.883907] [<b3fce717>] exit_mmap+0x76/0xea
        [42760.890428] [<c4c8a2f6>] mmput+0x80/0x11a
        [42760.896632] [<a41a08f4>] do_exit+0x1f4/0x80c
        [42760.903158] [<ee01cef6>] do_group_exit+0x20/0x7e
        [42760.909990] [<13fa8d54>] __wake_up_parent+0x0/0x1e
        [42760.917045] [<46cf89d0>] smp_call_function_many+0x1a2/0x20c
        [42760.924893] [<8c21a93b>] syscall_common+0x14/0x1c
        [42760.931765] ---[ end trace 02aa09da9dc52a60 ]---
        [42760.938342] ------------[ cut here ]------------
        [42760.945311] WARNING: CPU: 2 PID: 1216 at kernel/smp.c:291 smp_call_function_single+0xee/0xf8
        ...
    
    This patch switches MIPS' arch_trigger_cpumask_backtrace() to use async
    IPIs & smp_call_function_single_async() in order to resolve this
    problem. We ensure use of the pre-allocated call_single_data_t
    structures is serialized by maintaining a cpumask indicating that
    they're busy, and refusing to attempt to send an IPI when a CPU's bit is
    set in this mask. This should only happen if a CPU hasn't responded to a
    previous backtrace IPI - ie. if it's hung - and we print a warning to
    the console in this case.
    
    I've marked this for stable branches as far back as v4.9, to which it
    applies cleanly. Strictly speaking the faulty MIPS implementation can be
    traced further back to commit 856839b76836 ("MIPS: Add
    arch_trigger_all_cpu_backtrace() function") in v3.19, but kernel
    versions v3.19 through v4.8 will require further work to backport due to
    the rework performed in commit 9a01c3ed5cdb ("nmi_backtrace: add more
    trigger_*_cpu_backtrace() methods").
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/19597/
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.9+
    Fixes: 856839b76836 ("MIPS: Add arch_trigger_all_cpu_backtrace() function")
    Fixes: 9a01c3ed5cdb ("nmi_backtrace: add more trigger_*_cpu_backtrace() methods")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60a4a2c37ed7b07cb5ad04ba43e4f313cb85059c
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Jun 22 10:55:45 2018 -0700

    MIPS: Call dump_stack() from show_regs()
    
    commit 5a267832c2ec47b2dad0fdb291a96bb5b8869315 upstream.
    
    The generic nmi_cpu_backtrace() function calls show_regs() when a struct
    pt_regs is available, and dump_stack() otherwise. If we were to make use
    of the generic nmi_cpu_backtrace() with MIPS' current implementation of
    show_regs() this would mean that we see only register data with no
    accompanying stack information, in contrast with our current
    implementation which calls dump_stack() regardless of whether register
    state is available.
    
    In preparation for making use of the generic nmi_cpu_backtrace() to
    implement arch_trigger_cpumask_backtrace(), have our implementation of
    show_regs() call dump_stack() and drop the explicit dump_stack() call in
    arch_dump_stack() which is invoked by arch_trigger_cpumask_backtrace().
    
    This will allow the output we produce to remain the same after a later
    patch switches to using nmi_cpu_backtrace(). It may mean that we produce
    extra stack output in other uses of show_regs(), but this:
    
      1) Seems harmless.
      2) Is good for consistency between arch_trigger_cpumask_backtrace()
         and other users of show_regs().
      3) Matches the behaviour of the ARM & PowerPC architectures.
    
    Marked for stable back to v4.9 as a prerequisite of the following patch
    "MIPS: Call dump_stack() from show_regs()".
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/19596/
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.9+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49fde2180b48cd15d6b2a51416bbf1c4be5d77a2
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Jun 7 17:40:03 2018 +0200

    bpf: reject passing modified ctx to helper functions
    
    commit 58990d1ff3f7896ee341030e9a7c2e4002570683 upstream.
    
    As commit 28e33f9d78ee ("bpf: disallow arithmetic operations on
    context pointer") already describes, f1174f77b50c ("bpf/verifier:
    rework value tracking") removed the specific white-listed cases
    we had previously where we would allow for pointer arithmetic in
    order to further generalize it, and allow e.g. context access via
    modified registers. While the dereferencing of modified context
    pointers had been forbidden through 28e33f9d78ee, syzkaller did
    recently manage to trigger several KASAN splats for slab out of
    bounds access and use after frees by simply passing a modified
    context pointer to a helper function which would then do the bad
    access since verifier allowed it in adjust_ptr_min_max_vals().
    
    Rejecting arithmetic on ctx pointer in adjust_ptr_min_max_vals()
    generally could break existing programs as there's a valid use
    case in tracing in combination with passing the ctx to helpers as
    bpf_probe_read(), where the register then becomes unknown at
    verification time due to adding a non-constant offset to it. An
    access sequence may look like the following:
    
      offset = args->filename;  /* field __data_loc filename */
      bpf_probe_read(&dst, len, (char *)args + offset); // args is ctx
    
    There are two options: i) we could special case the ctx and as
    soon as we add a constant or bounded offset to it (hence ctx type
    wouldn't change) we could turn the ctx into an unknown scalar, or
    ii) we generalize the sanity test for ctx member access into a
    small helper and assert it on the ctx register that was passed
    as a function argument. Fwiw, latter is more obvious and less
    complex at the same time, and one case that may potentially be
    legitimate in future for ctx member access at least would be for
    ctx to carry a const offset. Therefore, fix follows approach
    from ii) and adds test cases to BPF kselftests.
    
    Fixes: f1174f77b50c ("bpf/verifier: rework value tracking")
    Reported-by: syzbot+3d0b2441dbb71751615e@syzkaller.appspotmail.com
    Reported-by: syzbot+c8504affd4fdd0c1b626@syzkaller.appspotmail.com
    Reported-by: syzbot+e5190cb881d8660fb1a3@syzkaller.appspotmail.com
    Reported-by: syzbot+efae31b384d5badbd620@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
