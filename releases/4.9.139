commit 44caf8b34625267f5b7227391551a4064e5fa0f7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 23 08:20:39 2018 +0100

    Linux 4.9.139

commit 861f5387585e2dcf7e2e611e62751dd3fe1abecb
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:44:02 2018 -0500

    ARM: spectre-v1: mitigate user accesses
    
    Commit a3c0f84765bb429ba0fd23de1c57b5e1591c9389 upstream.
    
    Spectre variant 1 attacks are about this sequence of pseudo-code:
    
            index = load(user-manipulated pointer);
            access(base + index * stride);
    
    In order for the cache side-channel to work, the access() must me made
    to memory which userspace can detect whether cache lines have been
    loaded.  On 32-bit ARM, this must be either user accessible memory, or
    a kernel mapping of that same user accessible memory.
    
    The problem occurs when the load() speculatively loads privileged data,
    and the subsequent access() is made to user accessible memory.
    
    Any load() which makes use of a user-maniplated pointer is a potential
    problem if the data it has loaded is used in a subsequent access.  This
    also applies for the access() if the data loaded by that access is used
    by a subsequent access.
    
    Harden the get_user() accessors against Spectre attacks by forcing out
    of bounds addresses to a NULL pointer.  This prevents get_user() being
    used as the load() step above.  As a side effect, put_user() will also
    be affected even though it isn't implicated.
    
    Also harden copy_from_user() by redoing the bounds check within the
    arm_copy_from_user() code, and NULLing the pointer if out of bounds.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4438f29bfbd105a4208cf194cd7f1f3e01fd666
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:44:01 2018 -0500

    ARM: spectre-v1: use get_user() for __get_user()
    
    Commit b1cd0a14806321721aae45f5446ed83a3647c914 upstream.
    
    Fixing __get_user() for spectre variant 1 is not sane: we would have to
    add address space bounds checking in order to validate that the location
    should be accessed, and then zero the address if found to be invalid.
    
    Since __get_user() is supposed to avoid the bounds check, and this is
    exactly what get_user() does, there's no point having two different
    implementations that are doing the same thing.  So, when the Spectre
    workarounds are required, make __get_user() an alias of get_user().
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdf0f17e4e1103af74239cfea553b8ab3c4fd29f
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:44:00 2018 -0500

    ARM: use __inttype() in get_user()
    
    Commit d09fbb327d670737ab40fd8bbb0765ae06b8b739 upstream.
    
    Borrow the x86 implementation of __inttype() to use in get_user() to
    select an integer type suitable to temporarily hold the result value.
    This is necessary to avoid propagating the volatile nature of the
    result argument, which can cause the following warning:
    
    lib/iov_iter.c:413:5: warning: optimization may eliminate reads and/or writes to register variables [-Wvolatile-register-var]
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d609e4aa5086e2c20a7767f70401af0e2400989a
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:59 2018 -0500

    ARM: oabi-compat: copy semops using __copy_from_user()
    
    Commit 8c8484a1c18e3231648f5ba7cc5ffb7fd70b3ca4 upstream.
    
    __get_user_error() is used as a fast accessor to make copying structure
    members as efficient as possible.  However, with software PAN and the
    recent Spectre variant 1, the efficiency is reduced as these are no
    longer fast accessors.
    
    In the case of software PAN, it has to switch the domain register around
    each access, and with Spectre variant 1, it would have to repeat the
    access_ok() check for each access.
    
    Rather than using __get_user_error() to copy each semops element member,
    copy each semops element in full using __copy_from_user().
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c91b9687904d28ad29974ce9028bb6a6088527f
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:58 2018 -0500

    ARM: vfp: use __copy_from_user() when restoring VFP state
    
    Commit 42019fc50dfadb219f9e6ddf4c354f3837057d80 upstream.
    
    __get_user_error() is used as a fast accessor to make copying structure
    members in the signal handling path as efficient as possible.  However,
    with software PAN and the recent Spectre variant 1, the efficiency is
    reduced as these are no longer fast accessors.
    
    In the case of software PAN, it has to switch the domain register around
    each access, and with Spectre variant 1, it would have to repeat the
    access_ok() check for each access.
    
    Use __copy_from_user() rather than __get_user_err() for individual
    members when restoring VFP state.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50f032cc506a0f8c5a44c2f19950ae0f287b43db
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:57 2018 -0500

    ARM: signal: copy registers using __copy_from_user()
    
    Commit c32cd419d6650e42b9cdebb83c672ec945e6bd7e upstream.
    
    __get_user_error() is used as a fast accessor to make copying structure
    members in the signal handling path as efficient as possible.  However,
    with software PAN and the recent Spectre variant 1, the efficiency is
    reduced as these are no longer fast accessors.
    
    In the case of software PAN, it has to switch the domain register around
    each access, and with Spectre variant 1, it would have to repeat the
    access_ok() check for each access.
    
    It becomes much more efficient to use __copy_from_user() instead, so
    let's use this for the ARM integer registers.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49b853905b9afc4a6898ce37f4be8721273badc3
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:56 2018 -0500

    ARM: spectre-v1: fix syscall entry
    
    Commit 10573ae547c85b2c61417ff1a106cffbfceada35 upstream.
    
    Prevent speculation at the syscall table decoding by clamping the index
    used to zero on invalid system call numbers, and using the csdb
    speculative barrier.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a4ae2876f6c03e3def6fb1d438cc5f01932cdc1
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:55 2018 -0500

    ARM: spectre-v1: add array_index_mask_nospec() implementation
    
    Commit 1d4238c56f9816ce0f9c8dbe42d7f2ad81cb6613 upstream.
    
    Add an implementation of the array_index_mask_nospec() function for
    mitigating Spectre variant 1 throughout the kernel.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abdeed7e61be1b3a92c7dc02762b36f49d14d7fa
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:54 2018 -0500

    ARM: spectre-v1: add speculation barrier (csdb) macros
    
    Commit a78d156587931a2c3b354534aa772febf6c9e855 upstream.
    
    Add assembly and C macros for the new CSDB instruction.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3aa01740a26ec5b568f6b22a6fbced76cbf1db0f
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:53 2018 -0500

    ARM: KVM: report support for SMCCC_ARCH_WORKAROUND_1
    
    Commit add5609877c6785cc002c6ed7e008b1d61064439 upstream.
    
    Report support for SMCCC_ARCH_WORKAROUND_1 to KVM guests for affected
    CPUs.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8940544118bdcab5da92ca76f527784cab882ce
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:52 2018 -0500

    ARM: KVM: Add SMCCC_ARCH_WORKAROUND_1 fast handling
    
    Commit b800acfc70d9fb81fbd6df70f2cf5e20f70023d0 upstream.
    
    We want SMCCC_ARCH_WORKAROUND_1 to be fast. As fast as possible.
    So let's intercept it as early as we can by testing for the
    function call number as soon as we've identified a HVC call
    coming from the guest.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10c7b397cf5d35bdaf8a99a0e0dc4f02fdd05118
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:51 2018 -0500

    ARM: spectre-v2: KVM: invalidate icache on guest exit for Brahma B15
    
    Commit 3c908e16396d130608e831b7fac4b167a2ede6ba upstream.
    
    Include Brahma B15 in the Spectre v2 KVM workarounds.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7888c6a365aae8e7ac9974f514a776ef60c372d
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Nov 7 11:43:50 2018 -0500

    ARM: KVM: invalidate icache on guest exit for Cortex-A15
    
    Commit 0c47ac8cd157727e7a532d665d6fb1b5fd333977 upstream.
    
    In order to avoid aliasing attacks against the branch predictor
    on Cortex-A15, let's invalidate the BTB on guest exit, which can
    only be done by invalidating the icache (with ACTLR[0] being set).
    
    We use the same hack as for A12/A17 to perform the vector decoding.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51836963fa6f41d12a5baff7a01faea2a0ce7d90
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Nov 7 11:43:49 2018 -0500

    ARM: KVM: invalidate BTB on guest exit for Cortex-A12/A17
    
    Commit 3f7e8e2e1ebda787f156ce46e3f0a9ce2833fa4f upstream.
    
    In order to avoid aliasing attacks against the branch predictor,
    let's invalidate the BTB on guest exit. This is made complicated
    by the fact that we cannot take a branch before invalidating the
    BTB.
    
    We only apply this to A12 and A17, which are the only two ARM
    cores on which this useful.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47571a90791114c429eb71d070b168f6bdaf32b6
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:48 2018 -0500

    ARM: spectre-v2: warn about incorrect context switching functions
    
    Commit c44f366ea7c85e1be27d08f2f0880f4120698125 upstream.
    
    Warn at error level if the context switching function is not what we
    are expecting.  This can happen with big.Little systems, which we
    currently do not support.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf92464b7ede0ed578349137996506a39b79796b
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:47 2018 -0500

    ARM: spectre-v2: add firmware based hardening
    
    Commit 10115105cb3aa17b5da1cb726ae8dd5f6854bd93 upstream.
    Commit 6282e916f774e37845c65d1eae9f8c649004f033 upstream.
    
    Add firmware based hardening for cores that require more complex
    handling in firmware.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26892e74dfd9acba30b24dbf31e2f64fd5ae3b83
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:46 2018 -0500

    ARM: spectre-v2: harden user aborts in kernel space
    
    Commit f5fe12b1eaee220ce62ff9afb8b90929c396595f upstream.
    
    In order to prevent aliasing attacks on the branch predictor,
    invalidate the BTB or instruction cache on CPUs that are known to be
    affected when taking an abort on a address that is outside of a user
    task limit:
    
    Cortex A8, A9, A12, A17, A73, A75: flush BTB.
    Cortex A15, Brahma B15: invalidate icache.
    
    If the IBE bit is not set, then there is little point to enabling the
    workaround.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bc1ec1beb8c4e27c63485430f038d2584d45556
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:45 2018 -0500

    ARM: spectre-v2: add Cortex A8 and A15 validation of the IBE bit
    
    Commit e388b80288aade31135aca23d32eee93dd106795 upstream.
    
    When the branch predictor hardening is enabled, firmware must have set
    the IBE bit in the auxiliary control register.  If this bit has not
    been set, the Spectre workarounds will not be functional.
    
    Add validation that this bit is set, and print a warning at alert level
    if this is not the case.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33efd46a0c02047678dde378a756695003975905
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:44 2018 -0500

    ARM: spectre-v2: harden branch predictor on context switches
    
    Commit 06c23f5ffe7ad45b908d0fff604dae08a7e334b9 upstream.
    
    Required manual merge of arch/arm/mm/proc-v7.S.
    
    Harden the branch predictor against Spectre v2 attacks on context
    switches for ARMv7 and later CPUs.  We do this by:
    
    Cortex A9, A12, A17, A73, A75: invalidating the BTB.
    Cortex A15, Brahma B15: invalidating the instruction cache.
    
    Cortex A57 and Cortex A72 are not addressed in this patch.
    
    Cortex R7 and Cortex R8 are also not addressed as we do not enforce
    memory protection on these cores.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eed96a3ce0a3b9de900f4cfb8f3519c429ba8b28
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:43 2018 -0500

    ARM: spectre: add Kconfig symbol for CPUs vulnerable to Spectre
    
    Commit c58d237d0852a57fde9bc2c310972e8f4e3d155d upstream.
    
    Add a Kconfig symbol for CPUs which are vulnerable to the Spectre
    attacks.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 901e325f772f5e4cf9afc314f4bf70b8c9a97594
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:42 2018 -0500

    ARM: bugs: add support for per-processor bug checking
    
    Commit 9d3a04925deeabb97c8e26d940b501a2873e8af3 upstream.
    
    Add support for per-processor bug checking - each processor function
    descriptor gains a function pointer for this check, which must not be
    an __init function.  If non-NULL, this will be called whenever a CPU
    enters the kernel via which ever path (boot CPU, secondary CPU startup,
    CPU resuming, etc.)
    
    This allows processor specific bug checks to validate that workaround
    bits are properly enabled by firmware via all entry paths to the kernel.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35293cc54366e4a9e3c1c5186541383dd4bcc2ff
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:41 2018 -0500

    ARM: bugs: hook processor bug checking into SMP and suspend paths
    
    Commit 26602161b5ba795928a5a719fe1d5d9f2ab5c3ef upstream.
    
    Check for CPU bugs when secondary processors are being brought online,
    and also when CPUs are resuming from a low power mode.  This gives an
    opportunity to check that processor specific bug workarounds are
    correctly enabled for all paths that a CPU re-enters the kernel.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b26c3c4bcdadc709bd5161c553f590633ff972b7
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:40 2018 -0500

    ARM: bugs: prepare processor bug infrastructure
    
    Commit a5b9177f69329314721aa7022b7e69dab23fa1f0 upstream.
    
    Prepare the processor bug infrastructure so that it can be expanded to
    check for per-processor bugs.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 183a0d21e436d37184196b7c6e144aa56f9b3f23
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 7 11:43:39 2018 -0500

    ARM: add more CPU part numbers for Cortex and Brahma B15 CPUs
    
    Commit f5683e76f35b4ec5891031b6a29036efe0a1ff84 upstream.
    
    Add CPU part numbers for Cortex A53, A57, A72, A73, A75 and the
    Broadcom Brahma B15 CPU.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Boot-tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David A. Long <dave.long@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 134db5b955b8dfef54a9d319706f04093289d1e0
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed May 3 16:09:38 2017 +0100

    arm64: uaccess: suppress spurious clang warning
    
    commit d135b8b5060ea91dd751ff172d179eb4eab1e966 upstream.
    
    Clang tries to warn when there's a mismatch between an operand's size,
    and the size of the register it is held in, as this may indicate a bug.
    Specifically, clang warns when the operand's type is less than 64 bits
    wide, and the register is used unqualified (i.e. %N rather than %xN or
    %wN).
    
    Unfortunately clang can generate these warnings for unreachable code.
    For example, for code like:
    
    do {                                            \
            typeof(*(ptr)) __v = (v);               \
            switch(sizeof(*(ptr))) {                \
            case 1:                                 \
                    // assume __v is 1 byte wide    \
                    asm ("{op}b %w0" : : "r" (v));  \
                    break;                          \
            case 8:                                 \
                    // assume __v is 8 bytes wide   \
                    asm ("{op} %0" : : "r" (v));    \
                    break;                          \
            }
    while (0)
    
    ... if op() were passed a char value and pointer to char, clang may
    produce a warning for the unreachable case where sizeof(*(ptr)) is 8.
    
    For the same reasons, clang produces warnings when __put_user_err() is
    used for types that are less than 64 bits wide.
    
    We could avoid this with a cast to a fixed-width type in each of the
    cases. However, GCC will then warn that pointer types are being cast to
    mismatched integer sizes (in unreachable paths).
    
    Another option would be to use the same union trickery as we do for
    __smp_store_release() and __smp_load_acquire(), but this is fairly
    invasive.
    
    Instead, this patch suppresses the clang warning by using an x modifier
    in the assembly for the 8 byte case of __put_user_err(). No additional
    work is necessary as the value has been cast to typeof(*(ptr)), so the
    compiler will have performed any necessary extension for the reachable
    case.
    
    For consistency, __get_user_err() is also updated to use the x modifier
    for its 8 byte case.
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reported-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86e514306bfb147287ea7e597a0ef9d7039e8b5b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jul 26 15:36:23 2017 +0200

    Kbuild: use -fshort-wchar globally
    
    commit 8c97023cf0518f172b8cb7a9fffc28b89401abbf upstream.
    
    Commit 971a69db7dc0 ("Xen: don't warn about 2-byte wchar_t in efi")
    added the --no-wchar-size-warning to the Makefile to avoid this
    harmless warning:
    
    arm-linux-gnueabi-ld: warning: drivers/xen/efi.o uses 2-byte wchar_t yet the output is to use 4-byte wchar_t; use of wchar_t values across objects may fail
    
    Changing kbuild to use thin archives instead of recursive linking
    unfortunately brings the same warning back during the final link.
    
    The kernel does not use wchar_t string literals at this point, and
    xen does not use wchar_t at all (only efi_char16_t), so the flag
    has no effect, but as pointed out by Jan Beulich, adding a wchar_t
    string literal would be bad here.
    
    Since wchar_t is always defined as u16, independent of the toolchain
    default, always passing -fshort-wchar is correct and lets us
    remove the Xen specific hack along with fixing the warning.
    
    Link: https://patchwork.kernel.org/patch/9275217/
    Fixes: 971a69db7dc0 ("Xen: don't warn about 2-byte wchar_t in efi")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52c3adecfb2f5cf6e94b9bbe689fab20cae64d79
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Thu Aug 17 11:20:47 2017 -0700

    x86/build: Use cc-option to validate stack alignment parameter
    
    commit 9e8730b178a2472fca3123e909d6e69cc8127778 upstream.
    
    With the following commit:
    
      8f91869766c0 ("x86/build: Fix stack alignment for CLang")
    
    cc-option is only used to determine the name of the stack alignment option
    supported by the compiler, but not to verify that the actual parameter
    <option>=N is valid in combination with the other CFLAGS.
    
    This causes problems (as reported by the kbuild robot) with older GCC versions
    which only support stack alignment on a boundary of 16 bytes or higher.
    
    Also use (__)cc_option to add the stack alignment option to CFLAGS to
    make sure only valid options are added.
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Bernhard.Rosenkranzer@linaro.org
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Michael Davidson <md@google.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephen Hines <srhines@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: dianders@chromium.org
    Fixes: 8f91869766c0 ("x86/build: Fix stack alignment for CLang")
    Link: http://lkml.kernel.org/r/20170817182047.176752-1-mka@chromium.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f200e87ef3f14bbe272d0d140529c9f06b38699
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Wed Aug 16 17:47:40 2017 -0700

    x86/build: Fix stack alignment for CLang
    
    commit 8f91869766c00622b2eaa8ee567db4f333b78c1a upstream.
    
    Commit:
    
      d77698df39a5 ("x86/build: Specify stack alignment for clang")
    
    intended to use the same stack alignment for clang as with gcc.
    
    The two compilers use different options to configure the stack alignment
    (gcc: -mpreferred-stack-boundary=n, clang: -mstack-alignment=n).
    
    The above commit assumes that the clang option uses the same parameter
    type as gcc, i.e. that the alignment is specified as 2^n. However clang
    interprets the value of this option literally to use an alignment of n,
    in consequence the stack remains misaligned.
    
    Change the values used with -mstack-alignment to be the actual alignment
    instead of a power of two.
    
    cc-option isn't used here with the typical pattern of KBUILD_CFLAGS +=
    $(call cc-option ...). The reason is that older gcc versions don't
    support the -mpreferred-stack-boundary option, since cc-option doesn't
    verify whether the alternative option is valid it would incorrectly
    select the clang option -mstack-alignment..
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Bernhard.Rosenkranzer@linaro.org
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Michael Davidson <md@google.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephen Hines <srhines@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: dianders@chromium.org
    Link: http://lkml.kernel.org/r/20170817004740.170588-1-mka@chromium.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27b5ebf61818749b3568354c64a8ec2d9cd5ecca
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Aug 18 20:49:37 2017 +0100

    efi/libstub/arm64: Set -fpie when building the EFI stub
    
    commit 91ee5b21ee026c49e4e7483de69b55b8b47042be upstream.
    
    Clang may emit absolute symbol references when building in non-PIC mode,
    even when using the default 'small' code model, which is already mostly
    position independent to begin with, due to its use of adrp/add pairs
    that have a relative range of +/- 4 GB. The remedy is to pass the -fpie
    flag, which can be done safely now that the code has been updated to avoid
    GOT indirections (which may be emitted due to the compiler assuming that
    the PIC/PIE code may end up in a shared library that is subject to ELF
    symbol preemption)
    
    Passing -fpie when building code that needs to execute at an a priori
    unknown offset is arguably an improvement in any case, and given that
    the recent visibility changes allow the PIC build to pass with GCC as
    well, let's add -fpie for all arm64 builds rather than only for Clang.
    
    Tested-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20170818194947.19347-5-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b66b2d89e8dde45e92337f7e48e1677748a8c50
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jan 31 13:21:42 2017 +0000

    efi/libstub: Preserve .debug sections after absolute relocation check
    
    commit 696204faa6e8a318320ebb49d9fa69bc8275644d upstream.
    
    The build commands for the ARM and arm64 EFI stubs strip the .debug
    sections and other sections that may legally contain absolute relocations,
    in order to inspect the remaining sections for the presence of such
    relocations.
    
    This leaves us without debugging symbols in the stub for no good reason,
    considering that these sections are omitted from the kernel binary anyway,
    and that these relocations are thus only consumed by users of the ELF
    binary, such as debuggers.
    
    So move to 'strip' for performing the relocation check, and if it succeeds,
    invoke objcopy as before, but leaving the .debug sections in place. Note
    that these sections may refer to ksymtab/kcrctab contents, so leave those
    in place as well.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/1485868902-20401-11-git-send-email-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94c47d4190575403145cca7ef2080c8087ee7ca6
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Aug 18 20:49:36 2017 +0100

    efi/libstub/arm64: Force 'hidden' visibility for section markers
    
    commit 0426a4e68f18d75515414361de9e3e1445d2644e upstream.
    
    To prevent the compiler from emitting absolute references to the section
    markers when running in PIC mode, override the visibility to 'hidden' for
    all contents of asm/sections.h
    
    Tested-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20170818194947.19347-4-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61d920c3b21c9b3facacfc49aa73f6dc3fcf234c
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Aug 18 20:49:35 2017 +0100

    efi/libstub/arm64: Use hidden attribute for struct screen_info reference
    
    commit 760b61d76da6d6a99eb245ab61abf71ca5415cea upstream.
    
    To prevent the compiler from emitting absolute references to screen_info
    when building position independent code, redeclare the symbol with hidden
    visibility.
    
    Tested-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20170818194947.19347-3-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78e96f647d1082aecc3cd3ac42f0f75d98ba9b63
Author: Michael Davidson <md@google.com>
Date:   Mon Jul 24 16:51:55 2017 -0700

    x86/boot: #undef memcpy() et al in string.c
    
    commit 18d5e6c34a8eda438d5ad8b3b15f42dab01bf05d upstream.
    
    undef memcpy() and friends in boot/string.c so that the functions
    defined here will have the correct names, otherwise we end up
    up trying to redefine __builtin_memcpy() etc.
    
    Surprisingly, GCC allows this (and, helpfully, discards the
    __builtin_ prefix from the function name when compiling it),
    but clang does not.
    
    Adding these #undef's appears to preserve what I assume was
    the original intent of the code.
    
    Signed-off-by: Michael Davidson <md@google.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Acked-by: H. Peter Anvin <hpa@zytor.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Bernhard.Rosenkranzer@linaro.org
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20170724235155.79255-1-mka@chromium.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a953c058f7355c0077867d33cdfa7aa929f4b81
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Apr 26 17:11:32 2017 +0100

    crypto: arm64/sha - avoid non-standard inline asm tricks
    
    commit f4857f4c2ee9aa4e2aacac1a845352b00197fb57 upstream.
    
    Replace the inline asm which exports struct offsets as ELF symbols
    with proper const variables exposing the same values. This works
    around an issue with Clang which does not interpret the "i" (or "I")
    constraints in the same way as GCC.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Tested-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebcc69a97a2463271c20a0ea09906903c3295f3e
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Fri Apr 21 14:39:30 2017 -0700

    kbuild: clang: Disable 'address-of-packed-member' warning
    
    commit bfb38988c51e440fd7062ddf3157f7d8b1dd5d70 upstream.
    
    clang generates plenty of these warnings in different parts of the code,
    to an extent that the warnings are little more than noise. Disable the
    'address-of-packed-member' warning.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf42c0b73444ab27e37e7c125852aa99f441d621
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Wed Jun 21 16:28:05 2017 -0700

    x86/build: Specify stack alignment for clang
    
    commit d77698df39a512911586834d303275ea5fda74d0 upstream.
    
    For gcc stack alignment is configured with -mpreferred-stack-boundary=N,
    clang has the option -mstack-alignment=N for that purpose. Use the same
    alignment as with gcc.
    
    If the alignment is not specified clang assumes an alignment of
    16 bytes, as required by the standard ABI. However as mentioned in
    d9b0cde91c60 ("x86-64, gcc: Use -mpreferred-stack-boundary=3 if
    supported") the standard kernel entry on x86-64 leaves the stack
    on an 8-byte boundary, as a consequence clang will keep the stack
    misaligned.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dc4460a8364117d3806beac91a76843e32a09b8
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Wed Jun 21 16:28:04 2017 -0700

    x86/build: Use __cc-option for boot code compiler options
    
    commit 032a2c4f65a2f81c93e161a11197ba19bc14a909 upstream.
    
    cc-option is used to enable compiler options for the boot code if they
    are available. The macro uses KBUILD_CFLAGS and KBUILD_CPPFLAGS for the
    check, however these flags aren't used to build the boot code, in
    consequence cc-option can yield wrong results. For example
    -mpreferred-stack-boundary=2 is never set with a 64-bit compiler,
    since the setting is only valid for 16 and 32-bit binaries. This
    is also the case for 32-bit kernel builds, because the option -m32 is
    added to KBUILD_CFLAGS after the assignment of REALMODE_CFLAGS.
    
    Use __cc-option instead of cc-option for the boot mode options.
    The macro receives the compiler options as parameter instead of using
    KBUILD_C*FLAGS, for the boot code we pass REALMODE_CFLAGS.
    
    Also use separate statements for the __cc-option checks instead
    of performing them in the initial assignment of REALMODE_CFLAGS since
    the variable is an input of the macro.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0605d5ebde70db5bd184f3bcacb4d11de3914df1
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Wed Jun 21 16:28:03 2017 -0700

    kbuild: Add __cc-option macro
    
    commit 9f3f1fd299768782465cb32cdf0dd4528d11f26b upstream.
    
    cc-option uses KBUILD_CFLAGS and KBUILD_CPPFLAGS when it determines
    whether an option is supported or not. This is fine for options used to
    build the kernel itself, however some components like the x86 boot code
    use a different set of flags.
    
    Add the new macro __cc-option which is a more generic version of
    cc-option with additional parameters. One parameter is the compiler
    with which the check should be performed, the other the compiler options
    to be used instead KBUILD_C*FLAGS.
    
    Refactor cc-option and hostcc-option to use __cc-option and move
    hostcc-option to scripts/Kbuild.include.
    
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Michal Marek <mmarek@suse.com>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83e0e2f16c659e9873f5c66886363a1a7ba132c6
Author: Michael Davidson <md@google.com>
Date:   Wed Mar 15 15:36:00 2017 -0700

    crypto, x86: aesni - fix token pasting for clang
    
    commit fdb2726f4e61c5e3abc052f547d5a5f6c0dc5504 upstream.
    
    aes_ctrby8_avx-x86_64.S uses the C preprocessor for token pasting
    of character sequences that are not valid preprocessor tokens.
    While this is allowed when preprocessing assembler files it exposes
    an incompatibilty between the clang and gcc preprocessors where
    clang does not strip leading white space from macro parameters,
    leading to the CONCAT(%xmm, i) macro expansion on line 96 resulting
    in a token with a space character embedded in it.
    
    While this could be resolved by deleting the offending space character,
    the assembler is perfectly capable of doing the token pasting correctly
    for itself so we can just get rid of the preprocessor macros.
    
    Signed-off-by: Michael Davidson <md@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5819f2b08a73babd60455c5913c844e1b71bf11
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Thu Apr 13 10:26:09 2017 -0700

    x86/kbuild: Use cc-option to enable -falign-{jumps/loops}
    
    commit 2c4fd1ac3ff167c91272dc43c7bfd2269ef61557 upstream.
    
    clang currently does not support these optimizations, only enable them
    when they are available.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Michael Davidson <md@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: grundler@chromium.org
    Link: http://lkml.kernel.org/r/20170413172609.118122-1-mka@chromium.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e21538812d96eab9782116b514047947d69554b3
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Feb 1 18:00:14 2017 +0100

    modules: mark __inittest/__exittest as __maybe_unused
    
    commit 1f318a8bafcfba9f0d623f4870c4e890fd22e659 upstream.
    
    clang warns about unused inline functions by default:
    
    arch/arm/crypto/aes-cipher-glue.c:68:1: warning: unused function '__inittest' [-Wunused-function]
    arch/arm/crypto/aes-cipher-glue.c:69:1: warning: unused function '__exittest' [-Wunused-function]
    
    As these appear in every single module, let's just disable the warnings by marking the
    two functions as __maybe_unused.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: Jessica Yu <jeyu@redhat.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85ab13ffcc69fbe93c3a9d38857795cba79a4c35
Author: Vinícius Tinti <viniciustinti@gmail.com>
Date:   Mon Apr 24 13:04:58 2017 -0700

    kbuild: Add support to generate LLVM assembly files
    
    commit 433db3e260bc8134d4a46ddf20b3668937e12556 upstream.
    
    Add rules to kbuild in order to generate LLVM assembly files with the .ll
    extension when using clang.
    
      # from c code
      make CC=clang kernel/pid.ll
    
    Signed-off-by: Vinícius Tinti <viniciustinti@gmail.com>
    Signed-off-by: Behan Webster <behanw@converseincode.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d438cec0737451e3615c4665592b6df0858de41a
Author: Behan Webster <behanw@converseincode.com>
Date:   Mon Mar 27 18:19:09 2017 -0700

    kbuild: use -Oz instead of -Os when using clang
    
    commit 6748cb3c299de1ffbe56733647b01dbcc398c419 upstream.
    
    This generates smaller resulting object code when compiled with clang.
    
    Signed-off-by: Behan Webster <behanw@converseincode.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14635231f81c94c2a820349a7b96d032cdc02494
Author: Mark Charlebois <charlebm@gmail.com>
Date:   Fri Mar 31 22:38:13 2017 +0200

    kbuild, LLVMLinux: Add -Werror to cc-option to support clang
    
    commit c3f0d0bc5b01ad90c45276952802455750444b4f upstream.
    
    Clang will warn about unknown warnings but will not return false
    unless -Werror is set. GCC will return false if an unknown
    warning is passed.
    
    Adding -Werror make both compiler behave the same.
    
    [arnd: it turns out we need the same patch for testing whether -ffunction-sections
           works right with gcc. I've build tested extensively with this patch
           applied, so let's just merge this one now.]
    
    Signed-off-by: Mark Charlebois <charlebm@gmail.com>
    Signed-off-by: Behan Webster <behanw@converseincode.com>
    Reviewed-by: Jan-Simon Möller <dl9pf@gmx.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c466d17e3ab1044d6cfe4d682add5c1c199ae683
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Apr 13 07:25:21 2017 +0900

    kbuild: drop -Wno-unknown-warning-option from clang options
    
    commit a0ae981eba8f07dbc74bce38fd3a462b69a5bc8e upstream.
    
    Since commit c3f0d0bc5b01 ("kbuild, LLVMLinux: Add -Werror to
    cc-option to support clang"), cc-option and friends work nicely
    for clang.
    
    However, -Wno-unknown-warning-option makes clang happy with any
    unknown warning options even if -Werror is specified.
    
    Once -Wno-unknown-warning-option is added, any succeeding call of
    cc-disable-warning is evaluated positive, then unknown warning
    options are accepted.  This should be dropped.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b53c7372d667767420cf86a1f02708e7bacfdb12
Author: Jeroen Hofstee <jeroen@myspectrum.nl>
Date:   Fri Apr 21 15:21:11 2017 +0900

    kbuild: fix asm-offset generation to work with clang
    
    commit cf0c3e68aa81f992b0301f62e341b710d385bf68 upstream.
    
    KBuild abuses the asm statement to write to a file and
    clang chokes about these invalid asm statements. Hack it
    even more by fooling this is actual valid asm code.
    
    [masahiro:
     Import Jeroen's work for U-Boot:
     http://patchwork.ozlabs.org/patch/375026/
     Tweak sed script a little to avoid garbage '#' for GCC case, like
     #define NR_PAGEFLAGS 23 /* __NR_PAGEFLAGS       # */ ]
    
    Signed-off-by: Jeroen Hofstee <jeroen@myspectrum.nl>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Tested-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c36ae15ceb627305a063e60d005c592f46bc7806
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri Apr 21 15:21:10 2017 +0900

    kbuild: consolidate redundant sed script ASM offset generation
    
    commit 7dd47b95b0f54f2057d40af6e66d477e3fe95d13 upstream.
    
    This part ended up in redundant code after touched by multiple
    people.
    
    [1] Commit 3234282f33b2 ("x86, asm: Fix CFI macro invocations to
    deal with shortcomings in gas") added parentheses for defined
    expressions to support old gas for x86.
    
    [2] Commit a22dcdb0032c ("x86, asm: Fix ancient-GAS workaround")
    split the pattern into two to avoid parentheses for non-numeric
    expressions.
    
    [3] Commit 95a2f6f72d37 ("Partially revert patch that encloses
    asm-offset.h numbers in brackets") removed parentheses from numeric
    expressions as well because parentheses in MN10300 assembly have a
    special meaning (pointer access).
    
    Apparently, there is a conflict between [1] and [3].  After all,
    [3] took precedence, and a long time has passed since then.
    
    Now, merge the two patterns again because the first one is covered
    by the other.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89794183eea094b997271f677310cc2f658dbfb1
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Wed Apr 12 12:43:52 2017 -0700

    kbuild: Consolidate header generation from ASM offset information
    
    commit ebf003f0cfb3705e60d40dedc3ec949176c741af upstream.
    
    Largely redundant code is used in different places to generate C headers
    from offset information extracted from assembly language output.
    Consolidate the code in Makefile.lib and use this instead.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd9a7644a3ea1f7a3fe01e7db1fe728a66a123da
Author: Michael Davidson <md@google.com>
Date:   Tue Apr 25 15:47:35 2017 -0700

    kbuild: clang: add -no-integrated-as to KBUILD_[AC]FLAGS
    
    commit a37c45cd82e62a361706b9688a984a3a63957321 upstream.
    
    The Linux Kernel relies on GCC's acceptance of inline assembly as an
    opaque object which will not have any validation performed on the content.
    The current behaviour in LLVM is to perform validation of the contents by
    means of parsing the input if the MC layer can handle it.
    
    Disable clangs integrated assembler and use the GNU assembler instead.
    
    Wording-mostly-from: Saleem Abdulrasool <compnerd@compnerd.org>
    Signed-off-by: Michael Davidson <md@google.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7135c75e00ed4ab625330bc981e7eb4b7c0a28fc
Author: Behan Webster <behanw@converseincode.com>
Date:   Fri Apr 21 11:20:01 2017 -0700

    kbuild: Add better clang cross build support
    
    commit 785f11aa595bc3d4e74096cbd598ada54ecc0d81 upstream.
    
    Add cross target to CC if using clang. Also add custom gcc toolchain
    path for fallback gcc tools.
    
    Clang will fallback to using things like ld, as, and libgcc if
    (respectively) one of the llvm linkers isn't available, the integrated
    assembler is turned off, or an appropriately cross-compiled version of
    compiler-rt isn't available. To this end, you can specify the path to
    this fallback gcc toolchain with GCC_TOOLCHAIN.
    
    Signed-off-by: Behan Webster <behanw@converseincode.com>
    Reviewed-by: Jan-Simon Möller <dl9pf@gmx.de>
    Reviewed-by: Mark Charlebois <charlebm@gmail.com>
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d26b729ddb28e86bbbd8d89070f3af7699efb79
Author: David Ahern <dsahern@gmail.com>
Date:   Sun Nov 18 10:45:30 2018 -0800

    ipv6: Fix PMTU updates for UDP/raw sockets in presence of VRF
    
    [ Upstream commit 7ddacfa564870cdd97275fd87decb6174abc6380 ]
    
    Preethi reported that PMTU discovery for UDP/raw applications is not
    working in the presence of VRF when the socket is not bound to a device.
    The problem is that ip6_sk_update_pmtu does not consider the L3 domain
    of the skb device if the socket is not bound. Update the function to
    set oif to the L3 master device if relevant.
    
    Fixes: ca254490c8df ("net: Add VRF support to IPv6 stack")
    Reported-by: Preethi Ramachandra <preethir@juniper.net>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb18330f4d7aef3ff8f14ceba58fcad0e2eaadfb
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 8 17:34:27 2018 -0800

    inet: frags: better deal with smp races
    
    [ Upstream commit 0d5b9311baf27bb545f187f12ecfd558220c607d ]
    
    Multiple cpus might attempt to insert a new fragment in rhashtable,
    if for example RPS is buggy, as reported by 배석진 in
    https://patchwork.ozlabs.org/patch/994601/
    
    We use rhashtable_lookup_get_insert_key() instead of
    rhashtable_insert_fast() to let cpus losing the race
    free their own inet_frag_queue and use the one that
    was inserted by another cpu.
    
    Fixes: 648700f76b03 ("inet: frags: use rhashtables for reassembly units")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: 배석진 <soukjin.bae@samsung.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 262e7c9940e9d16543021b6f40084749f35d58a6
Author: Frieder Schrempf <frieder.schrempf@kontron.de>
Date:   Wed Oct 31 22:52:19 2018 +0100

    usbnet: smsc95xx: disable carrier check while suspending
    
    [ Upstream commit 7b900ead6cc66b2ee873cb042dfba169aa68b56c ]
    
    We need to make sure, that the carrier check polling is disabled
    while suspending. Otherwise we can end up with usbnet_read_cmd()
    being issued when only usbnet_read_cmd_nopm() is allowed. If this
    happens, read operations lock up.
    
    Fixes: d69d169493 ("usbnet: smsc95xx: fix link detection for disabled autonegotiation")
    Signed-off-by: Frieder Schrempf <frieder.schrempf@kontron.de>
    Reviewed-by: Raghuram Chary J <RaghuramChary.Jallipalli@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91d3ddb8cb5fd507048ed3fa4d7bba431fe038bc
Author: Siva Reddy Kallam <siva.kallam@broadcom.com>
Date:   Tue Nov 20 10:04:04 2018 +0530

    tg3: Add PHY reset for 5717/5719/5720 in change ring and flow control paths
    
    [ Upstream commit 59663e42199c93d1d7314d1446f6782fc4b1eb81 ]
    
    This patch has the fix to avoid PHY lockup with 5717/5719/5720 in change
    ring and flow control paths. This patch solves the RX hang while doing
    continuous ring or flow control parameters with heavy traffic from peer.
    
    Signed-off-by: Siva Reddy Kallam <siva.kallam@broadcom.com>
    Acked-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bab51ff62cea6c9e0455aa748cb097a4a4ccd0a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 18 15:21:53 2018 +0800

    sctp: not allow to set asoc prsctp_enable by sockopt
    
    [ Upstream commit cc3ccf26f0649089b3a34a2781977755ea36e72c ]
    
    As rfc7496#section4.5 says about SCTP_PR_SUPPORTED:
    
       This socket option allows the enabling or disabling of the
       negotiation of PR-SCTP support for future associations.  For existing
       associations, it allows one to query whether or not PR-SCTP support
       was negotiated on a particular association.
    
    It means only sctp sock's prsctp_enable can be set.
    
    Note that for the limitation of SCTP_{CURRENT|ALL}_ASSOC, we will
    add it when introducing SCTP_{FUTURE|CURRENT|ALL}_ASSOC for linux
    sctp in another patchset.
    
    v1->v2:
      - drop the params.assoc_id check as Neil suggested.
    
    Fixes: 28aa4c26fce2 ("sctp: add SCTP_PR_SUPPORTED on sctp sockopt")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a80b1feaee77c9108765cf696c1bc2196393126
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Nov 17 21:57:02 2018 -0800

    net-gro: reset skb->pkt_type in napi_reuse_skb()
    
    [ Upstream commit 33d9a2c72f086cbf1087b2fd2d1a15aa9df14a7f ]
    
    eth_type_trans() assumes initial value for skb->pkt_type
    is PACKET_HOST.
    
    This is indeed the value right after a fresh skb allocation.
    
    However, it is possible that GRO merged a packet with a different
    value (like PACKET_OTHERHOST in case macvlan is used), so
    we need to make sure napi->skb will have pkt_type set back to
    PACKET_HOST.
    
    Otherwise, valid packets might be dropped by the stack because
    their pkt_type is not PACKET_HOST.
    
    napi_reuse_skb() was added in commit 96e93eab2033 ("gro: Add
    internal interfaces for VLAN"), but this bug always has
    been there.
    
    Fixes: 96e93eab2033 ("gro: Add internal interfaces for VLAN")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5367cdf3e1587f1c58af0d5be98a1e9fb46eea68
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Nov 16 16:58:19 2018 +0100

    ip_tunnel: don't force DF when MTU is locked
    
    [ Upstream commit 16f7eb2b77b55da816c4e207f3f9440a8cafc00a ]
    
    The various types of tunnels running over IPv4 can ask to set the DF
    bit to do PMTU discovery. However, PMTU discovery is subject to the
    threshold set by the net.ipv4.route.min_pmtu sysctl, and is also
    disabled on routes with "mtu lock". In those cases, we shouldn't set
    the DF bit.
    
    This patch makes setting the DF bit conditional on the route's MTU
    locking state.
    
    This issue seems to be older than git history.
    
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a09bd930e90a5c13a9f7367da76af1fe0ee1f8ca
Author: 배석진 <soukjin.bae@samsung.com>
Date:   Fri Nov 9 16:53:06 2018 -0800

    flow_dissector: do not dissect l4 ports for fragments
    
    [ Upstream commit 62230715fd2453b3ba948c9d83cfb3ada9169169 ]
    
    Only first fragment has the sport/dport information,
    not the following ones.
    
    If we want consistent hash for all fragments, we need to
    ignore ports even for first fragment.
    
    This bug is visible for IPv6 traffic, if incoming fragments
    do not have a flow label, since skb_get_hash() will give
    different results for first fragment and following ones.
    
    It is also visible if any routing rule wants dissection
    and sport or dport.
    
    See commit 5e5d6fed3741 ("ipv6: route: dissect flow
    in input path if fib rules need it") for details.
    
    [edumazet] rewrote the changelog completely.
    
    Fixes: 06635a35d13d ("flow_dissect: use programable dissector in skb_flow_dissect and friends")
    Signed-off-by: 배석진 <soukjin.bae@samsung.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
