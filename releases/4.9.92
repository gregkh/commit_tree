commit f080bba272b1e3f9bbf0b6c1acef3efaf16b631d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Mar 31 18:11:36 2018 +0200

    Linux 4.9.92

commit a8f4be0168d5bf0c8838ca08301ae5341208dfba
Author: Yunsheng Lin <linyunsheng@huawei.com>
Date:   Thu Jul 6 10:22:00 2017 +0800

    net: hns: Fix a skb used after free bug
    
    commit 27463ad99f738ed93c7c8b3e2e5bc8c4853a2ff2 upstream.
    
    skb maybe freed in hns_nic_net_xmit_hw() and return NETDEV_TX_OK,
    which cause hns_nic_net_xmit to use a freed skb.
    
    BUG: KASAN: use-after-free in hns_nic_net_xmit_hw+0x62c/0x940...
            [17659.112635]      alloc_debug_processing+0x18c/0x1a0
            [17659.117208]      __slab_alloc+0x52c/0x560
            [17659.120909]      kmem_cache_alloc_node+0xac/0x2c0
            [17659.125309]      __alloc_skb+0x6c/0x260
            [17659.128837]      tcp_send_ack+0x8c/0x280
            [17659.132449]      __tcp_ack_snd_check+0x9c/0xf0
            [17659.136587]      tcp_rcv_established+0x5a4/0xa70
            [17659.140899]      tcp_v4_do_rcv+0x27c/0x620
            [17659.144687]      tcp_prequeue_process+0x108/0x170
            [17659.149085]      tcp_recvmsg+0x940/0x1020
            [17659.152787]      inet_recvmsg+0x124/0x180
            [17659.156488]      sock_recvmsg+0x64/0x80
            [17659.160012]      SyS_recvfrom+0xd8/0x180
            [17659.163626]      __sys_trace_return+0x0/0x4
            [17659.167506] INFO: Freed in kfree_skbmem+0xa0/0xb0 age=23 cpu=1 pid=13
            [17659.174000]      free_debug_processing+0x1d4/0x2c0
            [17659.178486]      __slab_free+0x240/0x390
            [17659.182100]      kmem_cache_free+0x24c/0x270
            [17659.186062]      kfree_skbmem+0xa0/0xb0
            [17659.189587]      __kfree_skb+0x28/0x40
            [17659.193025]      napi_gro_receive+0x168/0x1c0
            [17659.197074]      hns_nic_rx_up_pro+0x58/0x90
            [17659.201038]      hns_nic_rx_poll_one+0x518/0xbc0
            [17659.205352]      hns_nic_common_poll+0x94/0x140
            [17659.209576]      net_rx_action+0x458/0x5e0
            [17659.213363]      __do_softirq+0x1b8/0x480
            [17659.217062]      run_ksoftirqd+0x64/0x80
            [17659.220679]      smpboot_thread_fn+0x224/0x310
            [17659.224821]      kthread+0x150/0x170
            [17659.228084]      ret_from_fork+0x10/0x40
    
            BUG: KASAN: use-after-free in hns_nic_net_xmit+0x8c/0xc0...
            [17751.080490]      __slab_alloc+0x52c/0x560
            [17751.084188]      kmem_cache_alloc+0x244/0x280
            [17751.088238]      __build_skb+0x40/0x150
            [17751.091764]      build_skb+0x28/0x100
            [17751.095115]      __alloc_rx_skb+0x94/0x150
            [17751.098900]      __napi_alloc_skb+0x34/0x90
            [17751.102776]      hns_nic_rx_poll_one+0x180/0xbc0
            [17751.107097]      hns_nic_common_poll+0x94/0x140
            [17751.111333]      net_rx_action+0x458/0x5e0
            [17751.115123]      __do_softirq+0x1b8/0x480
            [17751.118823]      run_ksoftirqd+0x64/0x80
            [17751.122437]      smpboot_thread_fn+0x224/0x310
            [17751.126575]      kthread+0x150/0x170
            [17751.129838]      ret_from_fork+0x10/0x40
            [17751.133454] INFO: Freed in kfree_skbmem+0xa0/0xb0 age=19 cpu=7 pid=43
            [17751.139951]      free_debug_processing+0x1d4/0x2c0
            [17751.144436]      __slab_free+0x240/0x390
            [17751.148051]      kmem_cache_free+0x24c/0x270
            [17751.152014]      kfree_skbmem+0xa0/0xb0
            [17751.155543]      __kfree_skb+0x28/0x40
            [17751.159022]      napi_gro_receive+0x168/0x1c0
            [17751.163074]      hns_nic_rx_up_pro+0x58/0x90
            [17751.167041]      hns_nic_rx_poll_one+0x518/0xbc0
            [17751.171358]      hns_nic_common_poll+0x94/0x140
            [17751.175585]      net_rx_action+0x458/0x5e0
            [17751.179373]      __do_softirq+0x1b8/0x480
            [17751.183076]      run_ksoftirqd+0x64/0x80
            [17751.186691]      smpboot_thread_fn+0x224/0x310
            [17751.190826]      kthread+0x150/0x170
            [17751.194093]      ret_from_fork+0x10/0x40
    
    Fixes: 13ac695e7ea1 ("net:hns: Add support of Hip06 SoC to the Hislicon Network Subsystem")
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Signed-off-by: lipeng <lipeng321@huawei.com>
    Reported-by: Jun He <hjat2005@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Erick Reyes <erickreyes@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 406996f36e01b5da0685e8e205302448b29feba3
Author: Tom Herbert <tom@quantonium.net>
Date:   Tue Mar 13 12:01:43 2018 -0700

    kcm: lock lower socket in kcm_attach
    
    
    [ Upstream commit 2cc683e88c0c993ac3721d9b702cb0630abe2879 ]
    
    Need to lock lower socket in order to provide mutual exclusion
    with kcm_unattach.
    
    v2: Add Reported-by for syzbot
    
    Fixes: ab7ac4eb9832e32a09f4e804 ("kcm: Kernel Connection Multiplexor module")
    Reported-by: syzbot+ea75c0ffcd353d32515f064aaebefc5279e6161e@syzkaller.appspotmail.com
    Signed-off-by: Tom Herbert <tom@quantonium.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 002f45571f6b498d417ba1dcc91bd59d386303a2
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue Mar 13 14:45:07 2018 -0700

    net: systemport: Rewrite __bcm_sysport_tx_reclaim()
    
    
    [ Upstream commit 484d802d0f2f29c335563fcac2a8facf174a1bbc ]
    
    There is no need for complex checking between the last consumed index
    and current consumed index, a simple subtraction will do.
    
    This also eliminates the possibility of a permanent transmit queue stall
    under the following conditions:
    
    - one CPU bursts ring->size worth of traffic (up to 256 buffers), to the
      point where we run out of free descriptors, so we stop the transmit
      queue at the end of bcm_sysport_xmit()
    
    - because of our locking, we have the transmit process disable
      interrupts which means we can be blocking the TX reclamation process
    
    - when TX reclamation finally runs, we will be computing the difference
      between ring->c_index (last consumed index by SW) and what the HW
      reports through its register
    
    - this register is masked with (ring->size - 1) = 0xff, which will lead
      to stripping the upper bits of the index (register is 16-bits wide)
    
    - we will be computing last_tx_cn as 0, which means there is no work to
      be done, and we never wake-up the transmit queue, leaving it
      permanently disabled
    
    A practical example is e.g: ring->c_index aka last_c_index = 12, we
    pushed 256 entries, HW consumer index = 268, we mask it with 0xff = 12,
    so last_tx_cn == 0, nothing happens.
    
    Fixes: 80105befdb4b ("net: systemport: add Broadcom SYSTEMPORT Ethernet MAC driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4751804da25788691602663562bbadfa5f2cb9a1
Author: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Date:   Tue Mar 20 07:59:15 2018 +0100

    s390/qeth: on channel error, reject further cmd requests
    
    
    [ Upstream commit a6c3d93963e4b333c764fde69802c3ea9eaa9d5c ]
    
    When the IRQ handler determines that one of the cmd IO channels has
    failed and schedules recovery, block any further cmd requests from
    being submitted. The request would inevitably stall, and prevent the
    recovery from making progress until the request times out.
    
    This sort of error was observed after Live Guest Relocation, where
    the pending IO on the READ channel intentionally gets terminated to
    kick-start recovery. Simultaneously the guest executed SIOCETHTOOL,
    triggering qeth to issue a QUERY CARD INFO command. The command
    then stalled in the inoperabel WRITE channel.
    
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3426c365e7f92a538ec7b067134fc42839e75ca7
Author: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Date:   Tue Mar 20 07:59:14 2018 +0100

    s390/qeth: lock read device while queueing next buffer
    
    
    [ Upstream commit 17bf8c9b3d499d5168537c98b61eb7a1fcbca6c2 ]
    
    For calling ccw_device_start(), issue_next_read() needs to hold the
    device's ccwlock.
    This is satisfied for the IRQ handler path (where qeth_irq() gets called
    under the ccwlock), but we need explicit locking for the initial call by
    the MPC initialization.
    
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ff2636b3bbfcf4606d050fbbfa2f792ab566b93
Author: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Date:   Tue Mar 20 07:59:13 2018 +0100

    s390/qeth: when thread completes, wake up all waiters
    
    
    [ Upstream commit 1063e432bb45be209427ed3f1ca3908e4aa3c7d7 ]
    
    qeth_wait_for_threads() is potentially called by multiple users, make
    sure to notify all of them after qeth_clear_thread_running_bit()
    adjusted the thread_running_mask. With no timeout, callers would
    otherwise stall.
    
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4593b4c08262434e8f662f12c171a9b8c85dcec4
Author: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Date:   Tue Mar 20 07:59:12 2018 +0100

    s390/qeth: free netdevice when removing a card
    
    
    [ Upstream commit 6be687395b3124f002a653c1a50b3260222b3cd7 ]
    
    On removal, a qeth card's netdevice is currently not properly freed
    because the call chain looks as follows:
    
    qeth_core_remove_device(card)
            lx_remove_device(card)
                    unregister_netdev(card->dev)
                    card->dev = NULL                        !!!
            qeth_core_free_card(card)
                    if (card->dev)                          !!!
                            free_netdev(card->dev)
    
    Fix it by free'ing the netdev straight after unregistering. This also
    fixes the sysfs-driven layer switch case (qeth_dev_layer2_store()),
    where the need to free the current netdevice was not considered at all.
    
    Note that free_netdev() takes care of the netif_napi_del() for us too.
    
    Fixes: 4a71df50047f ("qeth: new qeth device driver")
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Reviewed-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a85c525bbff4d7467d7f0ab6fed8e2f787b073d6
Author: Madalin Bucur <madalin.bucur@nxp.com>
Date:   Wed Mar 14 08:37:28 2018 -0500

    soc/fsl/qbman: fix issue in qman_delete_cgr_safe()
    
    
    [ Upstream commit 96f413f47677366e0ae03797409bfcc4151dbf9e ]
    
    The wait_for_completion() call in qman_delete_cgr_safe()
    was triggering a scheduling while atomic bug, replacing the
    kthread with a smp_call_function_single() call to fix it.
    
    Signed-off-by: Madalin Bucur <madalin.bucur@nxp.com>
    Signed-off-by: Roy Pledge <roy.pledge@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b14031144e37fd5f53a6a4a1359d91b0210ca47f
Author: Arkadi Sharshevsky <arkadis@mellanox.com>
Date:   Thu Mar 8 12:42:10 2018 +0200

    team: Fix double free in error path
    
    
    [ Upstream commit cbcc607e18422555db569b593608aec26111cb0b ]
    
    The __send_and_alloc_skb() receives a skb ptr as a parameter but in
    case it fails the skb is not valid:
    - Send failed and released the skb internally.
    - Allocation failed.
    
    The current code tries to release the skb in case of failure which
    causes redundant freeing.
    
    Fixes: 9b00cf2d1024 ("team: implement multipart netlink messages for options transfers")
    Signed-off-by: Arkadi Sharshevsky <arkadis@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5862b05903c8b1f49dab92683872854581b9812
Author: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date:   Wed Mar 14 13:32:09 2018 -0700

    skbuff: Fix not waking applications when errors are enqueued
    
    
    [ Upstream commit 6e5d58fdc9bedd0255a8781b258f10bbdc63e975 ]
    
    When errors are enqueued to the error queue via sock_queue_err_skb()
    function, it is possible that the waiting application is not notified.
    
    Calling 'sk->sk_data_ready()' would not notify applications that
    selected only POLLERR events in poll() (for example).
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Randy E. Witt <randy.e.witt@intel.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f02dcec3653abb204cb23e25132f49eb314c84f
Author: David Ahern <dsahern@gmail.com>
Date:   Fri Feb 16 11:03:03 2018 -0800

    net: Only honor ifindex in IP_PKTINFO if non-0
    
    
    [ Upstream commit 2cbb4ea7de167b02ffa63e9cdfdb07a7e7094615 ]
    
    Only allow ifindex from IP_PKTINFO to override SO_BINDTODEVICE settings
    if the index is actually set in the message.
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 455fc99cb4e8222c40cf9ae97f4e5845bdcac17c
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Wed Mar 14 21:10:23 2018 +0100

    netlink: avoid a double skb free in genlmsg_mcast()
    
    
    [ Upstream commit 02a2385f37a7c6594c9d89b64c4a1451276f08eb ]
    
    nlmsg_multicast() consumes always the skb, thus the original skb must be
    freed only when this function is called with a clone.
    
    Fixes: cb9f7a9a5c96 ("netlink: ensure to loop over all netns in genlmsg_multicast_allns()")
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d91487e4319baddd7580df4993d1478ea86ece8
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Tue Mar 13 16:50:06 2018 +0100

    net/iucv: Free memory obtained by kzalloc
    
    
    [ Upstream commit fa6a91e9b907231d2e38ea5ed89c537b3525df3d ]
    
    Free memory by calling put_device(), if afiucv_iucv_init is not
    successful.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Ursula Braun <ursula.braun@de.ibm.com>
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3860a3855e4445d215279561c02a7426c344949
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sun Mar 18 12:49:51 2018 -0700

    net: fec: Fix unbalanced PM runtime calls
    
    
    [ Upstream commit a069215cf5985f3aa1bba550264907d6bd05c5f7 ]
    
    When unbinding/removing the driver, we will run into the following warnings:
    
    [  259.655198] fec 400d1000.ethernet: 400d1000.ethernet supply phy not found, using dummy regulator
    [  259.665065] fec 400d1000.ethernet: Unbalanced pm_runtime_enable!
    [  259.672770] fec 400d1000.ethernet (unnamed net_device) (uninitialized): Invalid MAC address: 00:00:00:00:00:00
    [  259.683062] fec 400d1000.ethernet (unnamed net_device) (uninitialized): Using random MAC address: f2:3e:93:b7:29:c1
    [  259.696239] libphy: fec_enet_mii_bus: probed
    
    Avoid these warnings by balancing the runtime PM calls during fec_drv_remove().
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f7a395708b3b061109440f23e42de683a0bcdbc
Author: SZ Lin (林上智) <sz.lin@moxa.com>
Date:   Fri Mar 16 00:56:01 2018 +0800

    net: ethernet: ti: cpsw: add check for in-band mode setting with RGMII PHY interface
    
    
    [ Upstream commit f9db50691db4a7d860fce985f080bb3fc23a7ede ]
    
    According to AM335x TRM[1] 14.3.6.2, AM437x TRM[2] 15.3.6.2 and
    DRA7 TRM[3] 24.11.4.8.7.3.3, in-band mode in EXT_EN(bit18) register is only
    available when PHY is configured in RGMII mode with 10Mbps speed. It will
    cause some networking issues without RGMII mode, such as carrier sense
    errors and low throughput. TI also mentioned this issue in their forum[4].
    
    This patch adds the check mechanism for PHY interface with RGMII interface
    type, the in-band mode can only be set in RGMII mode with 10Mbps speed.
    
    References:
    [1]: https://www.ti.com/lit/ug/spruh73p/spruh73p.pdf
    [2]: http://www.ti.com/lit/ug/spruhl7h/spruhl7h.pdf
    [3]: http://www.ti.com/lit/ug/spruic2b/spruic2b.pdf
    [4]: https://e2e.ti.com/support/arm/sitara_arm/f/791/p/640765/2392155
    
    Suggested-by: Holsety Chen (陳憲輝) <Holsety.Chen@moxa.com>
    Signed-off-by: SZ Lin (林上智) <sz.lin@moxa.com>
    Signed-off-by: Schuyler Patton <spatton@ti.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9f83a8b4aaba8f458c244c7455f8a4ea31e8a28
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Mar 18 23:59:36 2018 +0100

    net: ethernet: arc: Fix a potential memory leak if an optional regulator is deferred
    
    
    [ Upstream commit 00777fac28ba3e126b9e63e789a613e8bd2cab25 ]
    
    If the optional regulator is deferred, we must release some resources.
    They will be re-allocated when the probe function will be called again.
    
    Fixes: 6eacf31139bf ("ethernet: arc: Add support for Rockchip SoC layer device tree bindings")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84fc2d7c220324000afb3559d9b4a0cea7066004
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Mar 6 07:54:53 2018 -0800

    l2tp: do not accept arbitrary sockets
    
    
    [ Upstream commit 17cfe79a65f98abe535261856c5aef14f306dff7 ]
    
    syzkaller found an issue caused by lack of sufficient checks
    in l2tp_tunnel_create()
    
    RAW sockets can not be considered as UDP ones for instance.
    
    In another patch, we shall replace all pr_err() by less intrusive
    pr_debug() so that syzkaller can find other bugs faster.
    Acked-by: Guillaume Nault <g.nault@alphalink.fr>
    Acked-by: James Chapman <jchapman@katalix.com>
    
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in setup_udp_tunnel_sock+0x3ee/0x5f0 net/ipv4/udp_tunnel.c:69
    dst_release: dst:00000000d53d0d0f refcnt:-1
    Write of size 1 at addr ffff8801d013b798 by task syz-executor3/6242
    
    CPU: 1 PID: 6242 Comm: syz-executor3 Not tainted 4.16.0-rc2+ #253
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x24d lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report+0x23b/0x360 mm/kasan/report.c:412
     __asan_report_store1_noabort+0x17/0x20 mm/kasan/report.c:435
     setup_udp_tunnel_sock+0x3ee/0x5f0 net/ipv4/udp_tunnel.c:69
     l2tp_tunnel_create+0x1354/0x17f0 net/l2tp/l2tp_core.c:1596
     pppol2tp_connect+0x14b1/0x1dd0 net/l2tp/l2tp_ppp.c:707
     SYSC_connect+0x213/0x4a0 net/socket.c:1640
     SyS_connect+0x24/0x30 net/socket.c:1621
     do_syscall_64+0x280/0x940 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    Fixes: fd558d186df2 ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5e6439e71ace4fb5a123b962c03a00e08c41d50
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Thu Mar 8 17:00:02 2018 +0100

    ipv6: fix access to non-linear packet in ndisc_fill_redirect_hdr_option()
    
    
    [ Upstream commit 9f62c15f28b0d1d746734666d88a79f08ba1e43e ]
    
    Fix the following slab-out-of-bounds kasan report in
    ndisc_fill_redirect_hdr_option when the incoming ipv6 packet is not
    linear and the accessed data are not in the linear data region of orig_skb.
    
    [ 1503.122508] ==================================================================
    [ 1503.122832] BUG: KASAN: slab-out-of-bounds in ndisc_send_redirect+0x94e/0x990
    [ 1503.123036] Read of size 1184 at addr ffff8800298ab6b0 by task netperf/1932
    
    [ 1503.123220] CPU: 0 PID: 1932 Comm: netperf Not tainted 4.16.0-rc2+ #124
    [ 1503.123347] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.10.2-2.fc27 04/01/2014
    [ 1503.123527] Call Trace:
    [ 1503.123579]  <IRQ>
    [ 1503.123638]  print_address_description+0x6e/0x280
    [ 1503.123849]  kasan_report+0x233/0x350
    [ 1503.123946]  memcpy+0x1f/0x50
    [ 1503.124037]  ndisc_send_redirect+0x94e/0x990
    [ 1503.125150]  ip6_forward+0x1242/0x13b0
    [...]
    [ 1503.153890] Allocated by task 1932:
    [ 1503.153982]  kasan_kmalloc+0x9f/0xd0
    [ 1503.154074]  __kmalloc_track_caller+0xb5/0x160
    [ 1503.154198]  __kmalloc_reserve.isra.41+0x24/0x70
    [ 1503.154324]  __alloc_skb+0x130/0x3e0
    [ 1503.154415]  sctp_packet_transmit+0x21a/0x1810
    [ 1503.154533]  sctp_outq_flush+0xc14/0x1db0
    [ 1503.154624]  sctp_do_sm+0x34e/0x2740
    [ 1503.154715]  sctp_primitive_SEND+0x57/0x70
    [ 1503.154807]  sctp_sendmsg+0xaa6/0x1b10
    [ 1503.154897]  sock_sendmsg+0x68/0x80
    [ 1503.154987]  ___sys_sendmsg+0x431/0x4b0
    [ 1503.155078]  __sys_sendmsg+0xa4/0x130
    [ 1503.155168]  do_syscall_64+0x171/0x3f0
    [ 1503.155259]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ 1503.155436] Freed by task 1932:
    [ 1503.155527]  __kasan_slab_free+0x134/0x180
    [ 1503.155618]  kfree+0xbc/0x180
    [ 1503.155709]  skb_release_data+0x27f/0x2c0
    [ 1503.155800]  consume_skb+0x94/0xe0
    [ 1503.155889]  sctp_chunk_put+0x1aa/0x1f0
    [ 1503.155979]  sctp_inq_pop+0x2f8/0x6e0
    [ 1503.156070]  sctp_assoc_bh_rcv+0x6a/0x230
    [ 1503.156164]  sctp_inq_push+0x117/0x150
    [ 1503.156255]  sctp_backlog_rcv+0xdf/0x4a0
    [ 1503.156346]  __release_sock+0x142/0x250
    [ 1503.156436]  release_sock+0x80/0x180
    [ 1503.156526]  sctp_sendmsg+0xbb0/0x1b10
    [ 1503.156617]  sock_sendmsg+0x68/0x80
    [ 1503.156708]  ___sys_sendmsg+0x431/0x4b0
    [ 1503.156799]  __sys_sendmsg+0xa4/0x130
    [ 1503.156889]  do_syscall_64+0x171/0x3f0
    [ 1503.156980]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ 1503.157158] The buggy address belongs to the object at ffff8800298ab600
                    which belongs to the cache kmalloc-1024 of size 1024
    [ 1503.157444] The buggy address is located 176 bytes inside of
                    1024-byte region [ffff8800298ab600, ffff8800298aba00)
    [ 1503.157702] The buggy address belongs to the page:
    [ 1503.157820] page:ffffea0000a62a00 count:1 mapcount:0 mapping:0000000000000000 index:0x0 compound_mapcount: 0
    [ 1503.158053] flags: 0x4000000000008100(slab|head)
    [ 1503.158171] raw: 4000000000008100 0000000000000000 0000000000000000 00000001800e000e
    [ 1503.158350] raw: dead000000000100 dead000000000200 ffff880036002600 0000000000000000
    [ 1503.158523] page dumped because: kasan: bad access detected
    
    [ 1503.158698] Memory state around the buggy address:
    [ 1503.158816]  ffff8800298ab900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [ 1503.158988]  ffff8800298ab980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [ 1503.159165] >ffff8800298aba00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 1503.159338]                    ^
    [ 1503.159436]  ffff8800298aba80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1503.159610]  ffff8800298abb00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1503.159785] ==================================================================
    [ 1503.159964] Disabling lock debugging due to kernel taint
    
    The test scenario to trigger the issue consists of 4 devices:
    - H0: data sender, connected to LAN0
    - H1: data receiver, connected to LAN1
    - GW0 and GW1: routers between LAN0 and LAN1. Both of them have an
      ethernet connection on LAN0 and LAN1
    On H{0,1} set GW0 as default gateway while on GW0 set GW1 as next hop for
    data from LAN0 to LAN1.
    Moreover create an ip6ip6 tunnel between H0 and H1 and send 3 concurrent
    data streams (TCP/UDP/SCTP) from H0 to H1 through ip6ip6 tunnel (send
    buffer size is set to 16K). While data streams are active flush the route
    cache on HA multiple times.
    I have not been able to identify a given commit that introduced the issue
    since, using the reproducer described above, the kasan report has been
    triggered from 4.14 and I have not gone back further.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fdc00c1503f2164893454958cf62c3bf4eff8d6
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Tue Mar 6 22:57:01 2018 +0300

    dccp: check sk for closed state in dccp_sendmsg()
    
    
    [ Upstream commit 67f93df79aeefc3add4e4b31a752600f834236e2 ]
    
    dccp_disconnect() sets 'dp->dccps_hc_tx_ccid' tx handler to NULL,
    therefore if DCCP socket is disconnected and dccp_sendmsg() is
    called after it, it will cause a NULL pointer dereference in
    dccp_write_xmit().
    
    This crash and the reproducer was reported by syzbot. Looks like
    it is reproduced if commit 69c64866ce07 ("dccp: CVE-2017-8824:
    use-after-free in DCCP code") is applied.
    
    Reported-by: syzbot+f99ab3887ab65d70f816@syzkaller.appspotmail.com
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1562f147ac2b30c85ce09a86f7c480c740e6b37a
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Tue Mar 6 18:46:39 2018 +0300

    net: Fix hlist corruptions in inet_evict_bucket()
    
    
    [ Upstream commit a560002437d3646dafccecb1bf32d1685112ddda ]
    
    inet_evict_bucket() iterates global list, and
    several tasks may call it in parallel. All of
    them hash the same fq->list_evictor to different
    lists, which leads to list corruption.
    
    This patch makes fq be hashed to expired list
    only if this has not been made yet by another
    task. Since inet_frag_alloc() allocates fq
    using kmem_cache_zalloc(), we may rely on
    list_evictor is initially unhashed.
    
    The problem seems to exist before async
    pernet_operations, as there was possible to have
    exit method to be executed in parallel with
    inet_frags::frags_work, so I add two Fixes tags.
    This also may go to stable.
    
    Fixes: d1fe19444d82 "inet: frag: don't re-use chainlist for evictor"
    Fixes: f84c6821aa54 "net: Convert pernet_subsys, registered from inet_init()"
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28984ba0c4ec741da06fb4bb41bf7993193b27ea
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 14 09:04:16 2018 -0700

    net: use skb_to_full_sk() in skb_update_prio()
    
    
    [ Upstream commit 4dcb31d4649df36297296b819437709f5407059c ]
    
    Andrei Vagin reported a KASAN: slab-out-of-bounds error in
    skb_update_prio()
    
    Since SYNACK might be attached to a request socket, we need to
    get back to the listener socket.
    Since this listener is manipulated without locks, add const
    qualifiers to sock_cgroup_prioidx() so that the const can also
    be used in skb_update_prio()
    
    Also add the const qualifier to sock_cgroup_classid() for consistency.
    
    Fixes: ca6fb0651883 ("tcp: attach SYNACK messages to request sockets instead of listener")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Andrei Vagin <avagin@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7d7956673d986001c2a4e564133e0c4d2e3a082
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 5 08:51:03 2018 -0800

    ieee802154: 6lowpan: fix possible NULL deref in lowpan_device_event()
    
    
    [ Upstream commit ca0edb131bdf1e6beaeb2b8289fd6b374b74147d ]
    
    A tun device type can trivially be set to arbitrary value using
    TUNSETLINK ioctl().
    
    Therefore, lowpan_device_event() must really check that ieee802154_ptr
    is not NULL.
    
    Fixes: 2c88b5283f60d ("ieee802154: 6lowpan: remove check on null")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Alexander Aring <alex.aring@gmail.com>
    Cc: Stefan Schmidt <stefan@osg.samsung.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Stefan Schmidt <stefan@osg.samsung.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e927ffbf07c72d08d24a7eda9a1ede2d934a59fc
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Mon Mar 5 20:52:54 2018 +0300

    sch_netem: fix skb leak in netem_enqueue()
    
    
    [ Upstream commit 35d889d10b649fda66121891ec05eca88150059d ]
    
    When we exceed current packets limit and we have more than one
    segment in the list returned by skb_gso_segment(), netem drops
    only the first one, skipping the rest, hence kmemleak reports:
    
    unreferenced object 0xffff880b5d23b600 (size 1024):
      comm "softirq", pid 0, jiffies 4384527763 (age 2770.629s)
      hex dump (first 32 bytes):
        00 80 23 5d 0b 88 ff ff 00 00 00 00 00 00 00 00  ..#]............
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000d8a19b9d>] __alloc_skb+0xc9/0x520
        [<000000001709b32f>] skb_segment+0x8c8/0x3710
        [<00000000c7b9bb88>] tcp_gso_segment+0x331/0x1830
        [<00000000c921cba1>] inet_gso_segment+0x476/0x1370
        [<000000008b762dd4>] skb_mac_gso_segment+0x1f9/0x510
        [<000000002182660a>] __skb_gso_segment+0x1dd/0x620
        [<00000000412651b9>] netem_enqueue+0x1536/0x2590 [sch_netem]
        [<0000000005d3b2a9>] __dev_queue_xmit+0x1167/0x2120
        [<00000000fc5f7327>] ip_finish_output2+0x998/0xf00
        [<00000000d309e9d3>] ip_output+0x1aa/0x2c0
        [<000000007ecbd3a4>] tcp_transmit_skb+0x18db/0x3670
        [<0000000042d2a45f>] tcp_write_xmit+0x4d4/0x58c0
        [<0000000056a44199>] tcp_tasklet_func+0x3d9/0x540
        [<0000000013d06d02>] tasklet_action+0x1ca/0x250
        [<00000000fcde0b8b>] __do_softirq+0x1b4/0x5a3
        [<00000000e7ed027c>] irq_exit+0x1e2/0x210
    
    Fix it by adding the rest of the segments, if any, to skb 'to_free'
    list. Add new __qdisc_drop_all() and qdisc_drop_all() functions
    because they can be useful in the future if we need to drop segmented
    GSO packets in other places.
    
    Fixes: 6071bd1aa13e ("netem: Segment GSO packets on enqueue")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad6217049ef4262b7926f4339095a41aaa7844a5
Author: Paul Blakey <paulb@mellanox.com>
Date:   Sun Mar 4 17:29:48 2018 +0200

    rhashtable: Fix rhlist duplicates insertion
    
    
    [ Upstream commit d3dcf8eb615537526bd42ff27a081d46d337816e ]
    
    When inserting duplicate objects (those with the same key),
    current rhlist implementation messes up the chain pointers by
    updating the bucket pointer instead of prev next pointer to the
    newly inserted node. This causes missing elements on removal and
    travesal.
    
    Fix that by properly updating pprev pointer to point to
    the correct rhash_head next pointer.
    
    Issue: 1241076
    Change-Id: I86b2c140bcb4aeb10b70a72a267ff590bb2b17e7
    Fixes: ca26893f05e8 ('rhashtable: Add rhlist interface')
    Signed-off-by: Paul Blakey <paulb@mellanox.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe3627f6761c40a408d426488fb638bc3c6a8ab7
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Tue Mar 20 16:49:26 2018 +0100

    ppp: avoid loop in xmit recursion detection code
    
    
    [ Upstream commit 6d066734e9f09cdea4a3b9cb76136db3f29cfb02 ]
    
    We already detect situations where a PPP channel sends packets back to
    its upper PPP device. While this is enough to avoid deadlocking on xmit
    locks, this doesn't prevent packets from looping between the channel
    and the unit.
    
    The problem is that ppp_start_xmit() enqueues packets in ppp->file.xq
    before checking for xmit recursion. Therefore, __ppp_xmit_process()
    might dequeue a packet from ppp->file.xq and send it on the channel
    which, in turn, loops it back on the unit. Then ppp_start_xmit()
    queues the packet back to ppp->file.xq and __ppp_xmit_process() picks
    it up and sends it again through the channel. Therefore, the packet
    will loop between __ppp_xmit_process() and ppp_start_xmit() until some
    other part of the xmit path drops it.
    
    For L2TP, we rapidly fill the skb's headroom and pppol2tp_xmit() drops
    the packet after a few iterations. But PPTP reallocates the headroom
    if necessary, letting the loop run and exhaust the machine resources
    (as reported in https://bugzilla.kernel.org/show_bug.cgi?id=199109).
    
    Fix this by letting __ppp_xmit_process() enqueue the skb to
    ppp->file.xq, so that we can check for recursion before adding it to
    the queue. Now ppp_xmit_process() can drop the packet when recursion is
    detected.
    
    __ppp_channel_push() is a bit special. It calls __ppp_xmit_process()
    without having any actual packet to send. This is used by
    ppp_output_wakeup() to re-enable transmission on the parent unit (for
    implementations like ppp_async.c, where the .start_xmit() function
    might not consume the skb, leaving it in ppp->xmit_pending and
    disabling transmission).
    Therefore, __ppp_xmit_process() needs to handle the case where skb is
    NULL, dequeuing as many packets as possible from ppp->file.xq.
    
    Reported-by: xu heng <xuheng333@zoho.com>
    Fixes: 55454a565836 ("ppp: avoid dealock on recursive xmit")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f2f7a07dbe54458ae36c0d56fdd637f353d09b1
Author: Roman Mashak <mrv@mojatatu.com>
Date:   Mon Mar 12 16:20:58 2018 -0400

    net sched actions: return explicit error when tunnel_key mode is not specified
    
    
    [ Upstream commit 51d4740f88affd85d49c04e3c9cd129c0e33bcb9 ]
    
    If set/unset mode of the tunnel_key action is not provided, ->init() still
    returns 0, and the caller proceeds with bogus 'struct tc_action *' object,
    this results in crash:
    
    % tc actions add action tunnel_key src_ip 1.1.1.1 dst_ip 2.2.2.1 id 7 index 1
    
    [   35.805515] general protection fault: 0000 [#1] SMP PTI
    [   35.806161] Modules linked in: act_tunnel_key kvm_intel kvm irqbypass
    crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel aes_x86_64
    crypto_simd glue_helper cryptd serio_raw
    [   35.808233] CPU: 1 PID: 428 Comm: tc Not tainted 4.16.0-rc4+ #286
    [   35.808929] RIP: 0010:tcf_action_init+0x90/0x190
    [   35.809457] RSP: 0018:ffffb8edc068b9a0 EFLAGS: 00010206
    [   35.810053] RAX: 1320c000000a0003 RBX: 0000000000000001 RCX: 0000000000000000
    [   35.810866] RDX: 0000000000000070 RSI: 0000000000007965 RDI: ffffb8edc068b910
    [   35.811660] RBP: ffffb8edc068b9d0 R08: 0000000000000000 R09: ffffb8edc068b808
    [   35.812463] R10: ffffffffc02bf040 R11: 0000000000000040 R12: ffffb8edc068bb38
    [   35.813235] R13: 0000000000000000 R14: 0000000000000000 R15: ffffb8edc068b910
    [   35.814006] FS:  00007f3d0d8556c0(0000) GS:ffff91d1dbc40000(0000)
    knlGS:0000000000000000
    [   35.814881] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   35.815540] CR2: 000000000043f720 CR3: 0000000019248001 CR4: 00000000001606a0
    [   35.816457] Call Trace:
    [   35.817158]  tc_ctl_action+0x11a/0x220
    [   35.817795]  rtnetlink_rcv_msg+0x23d/0x2e0
    [   35.818457]  ? __slab_alloc+0x1c/0x30
    [   35.819079]  ? __kmalloc_node_track_caller+0xb1/0x2b0
    [   35.819544]  ? rtnl_calcit.isra.30+0xe0/0xe0
    [   35.820231]  netlink_rcv_skb+0xce/0x100
    [   35.820744]  netlink_unicast+0x164/0x220
    [   35.821500]  netlink_sendmsg+0x293/0x370
    [   35.822040]  sock_sendmsg+0x30/0x40
    [   35.822508]  ___sys_sendmsg+0x2c5/0x2e0
    [   35.823149]  ? pagecache_get_page+0x27/0x220
    [   35.823714]  ? filemap_fault+0xa2/0x640
    [   35.824423]  ? page_add_file_rmap+0x108/0x200
    [   35.825065]  ? alloc_set_pte+0x2aa/0x530
    [   35.825585]  ? finish_fault+0x4e/0x70
    [   35.826140]  ? __handle_mm_fault+0xbc1/0x10d0
    [   35.826723]  ? __sys_sendmsg+0x41/0x70
    [   35.827230]  __sys_sendmsg+0x41/0x70
    [   35.827710]  do_syscall_64+0x68/0x120
    [   35.828195]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    [   35.828859] RIP: 0033:0x7f3d0ca4da67
    [   35.829331] RSP: 002b:00007ffc9f284338 EFLAGS: 00000246 ORIG_RAX:
    000000000000002e
    [   35.830304] RAX: ffffffffffffffda RBX: 00007ffc9f284460 RCX: 00007f3d0ca4da67
    [   35.831247] RDX: 0000000000000000 RSI: 00007ffc9f2843b0 RDI: 0000000000000003
    [   35.832167] RBP: 000000005aa6a7a9 R08: 0000000000000001 R09: 0000000000000000
    [   35.833075] R10: 00000000000005f1 R11: 0000000000000246 R12: 0000000000000000
    [   35.833997] R13: 00007ffc9f2884c0 R14: 0000000000000001 R15: 0000000000674640
    [   35.834923] Code: 24 30 bb 01 00 00 00 45 31 f6 eb 5e 8b 50 08 83 c2 07 83 e2
    fc 83 c2 70 49 8b 07 48 8b 40 70 48 85 c0 74 10 48 89 14 24 4c 89 ff <ff> d0 48
    8b 14 24 48 01 c2 49 01 d6 45 85 ed 74 05 41 83 47 2c
    [   35.837442] RIP: tcf_action_init+0x90/0x190 RSP: ffffb8edc068b9a0
    [   35.838291] ---[ end trace a095c06ee4b97a26 ]---
    
    Fixes: d0f6dd8a914f ("net/sched: Introduce act_tunnel_key")
    Signed-off-by: Roman Mashak <mrv@mojatatu.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c9ca571a979cdd8adfb741d536916ece6a50bdf
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Mar 30 10:53:44 2018 +0200

    Revert "genirq: Use irqd_get_trigger_type to compare the trigger type for shared IRQs"
    
    This reverts commit f2596a9808acfd02ce1ee389f0e1c37e64aec5f6 which is
    commit 382bd4de61827dbaaf5fb4fb7b1f4be4a86505e7 upstream.
    
    It causes too many problems with the stable tree, and would require too
    many other things to be backported, so just revert it.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6505dd1f7f55b180439c15d788bc5dea244a4781
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Wed May 10 09:53:40 2017 +0200

    scsi: sg: don't return bogus Sg_requests
    
    commit 48ae8484e9fc324b4968d33c585e54bc98e44d61 upstream.
    
    If the list search in sg_get_rq_mark() fails to find a valid request, we
    return a bogus element. This then can later lead to a GPF in
    sg_remove_scat().
    
    So don't return bogus Sg_requests in sg_get_rq_mark() but NULL in case
    the list search doesn't find a valid request.
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Doug Gilbert <dgilbert@interlog.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Acked-by: Doug Gilbert <dgilbert@interlog.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Tony Battersby <tonyb@cybernetics.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
