commit 1d4bd2e4e1d26c5384d52ca4a1953cb0cfc934f1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 23 08:19:27 2018 +0100

    Linux 4.14.83

commit 004ef8f590a464bb1977f38d3848b18df225267e
Author: Chris Paterson <chris.paterson2@renesas.com>
Date:   Thu Dec 14 09:08:41 2017 +0000

    ARM: dts: r8a7793: Correct critical CPU temperature
    
    commit 1dfc65cef481ac6af64380f26186d5cc585b46eb upstream.
    
    The R-Car M2N hardware manual states that Tc = –40°C to +105°C. The
    thermal sensor has an accuracy of ±5°C and there can be a temperature
    difference of 1 or 2 degrees between Tjmax and the thermal sensor due
    to the location of the latter.
    
    This means that 95°C is a safer value to use.
    
    Fixes: 57f9156bc620ac56 ("ARM: dts: r8a7793: enable to use thermal-zone")
    Signed-off-by: Chris Paterson <chris.paterson2@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a1bd68b06ebc9fe5b20297c52a51c82fde744a6
Author: Chris Paterson <chris.paterson2@renesas.com>
Date:   Thu Dec 14 09:08:40 2017 +0000

    ARM: dts: r8a7791: Correct critical CPU temperature
    
    commit e4fdf59bcce3b490bbc7197145bcb9f9d5a18cd3 upstream.
    
    The R-Car M2W hardware manual states that Tc = –40°C to +105°C. The
    thermal sensor has an accuracy of ±5°C and there can be a temperature
    difference of 1 or 2 degrees between Tjmax and the thermal sensor due
    to the location of the latter.
    
    This means that 95°C is a safer value to use.
    
    Fixes: cac68a56e34b9810 ("ARM: dts: r8a7791: enable to use thermal-zone")
    Signed-off-by: Chris Paterson <chris.paterson2@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c33b5cc7076b9140d5d393a2d750475b08d8efad
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 21 19:11:06 2018 +0100

    Revert "x86/speculation: Enable cross-hyperthread spectre v2 STIBP mitigation"
    
    This reverts commit 8a13906ae519b3ed95cd0fb73f1098b46362f6c4 which is
    commit 53c613fe6349994f023245519265999eed75957f upstream.
    
    It's not ready for the stable trees as there are major slowdowns
    involved with this patch.
    
    Reported-by: Jiri Kosina <jkosina@suse.cz>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc:  "WoodhouseDavid" <dwmw@amazon.co.uk>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc:  "SchauflerCasey" <casey.schaufler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59b830bf4436bdac3eace160fe1a9d7eb9e37392
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 8 17:34:27 2018 -0800

    inet: frags: better deal with smp races
    
    [ Upstream commit 0d5b9311baf27bb545f187f12ecfd558220c607d ]
    
    Multiple cpus might attempt to insert a new fragment in rhashtable,
    if for example RPS is buggy, as reported by 배석진 in
    https://patchwork.ozlabs.org/patch/994601/
    
    We use rhashtable_lookup_get_insert_key() instead of
    rhashtable_insert_fast() to let cpus losing the race
    free their own inet_frag_queue and use the one that
    was inserted by another cpu.
    
    Fixes: 648700f76b03 ("inet: frags: use rhashtables for reassembly units")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: 배석진 <soukjin.bae@samsung.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 039df755bd84022be5b423fb866e871b87a34ad5
Author: Frieder Schrempf <frieder.schrempf@kontron.de>
Date:   Wed Oct 31 22:52:19 2018 +0100

    usbnet: smsc95xx: disable carrier check while suspending
    
    [ Upstream commit 7b900ead6cc66b2ee873cb042dfba169aa68b56c ]
    
    We need to make sure, that the carrier check polling is disabled
    while suspending. Otherwise we can end up with usbnet_read_cmd()
    being issued when only usbnet_read_cmd_nopm() is allowed. If this
    happens, read operations lock up.
    
    Fixes: d69d169493 ("usbnet: smsc95xx: fix link detection for disabled autonegotiation")
    Signed-off-by: Frieder Schrempf <frieder.schrempf@kontron.de>
    Reviewed-by: Raghuram Chary J <RaghuramChary.Jallipalli@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61c6bb13506f0bc14b0e511167a248ba703f4b0d
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Thu Nov 8 20:38:26 2018 +0100

    net: smsc95xx: Fix MTU range
    
    [ Upstream commit 85b18b0237ce9986a81a1b9534b5e2ee116f5504 ]
    
    The commit f77f0aee4da4 ("net: use core MTU range checking in USB NIC
    drivers") introduce a common MTU handling for usbnet. But it's missing
    the necessary changes for smsc95xx. So set the MTU range accordingly.
    
    This patch has been tested on a Raspberry Pi 3.
    
    Fixes: f77f0aee4da4 ("net: use core MTU range checking in USB NIC drivers")
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ada2e1b289f719ea2e6b0dc5331f6c40b0341a7
Author: Shalom Toledo <shalomt@mellanox.com>
Date:   Fri Nov 2 19:49:15 2018 +0000

    mlxsw: spectrum: Fix IP2ME CPU policer configuration
    
    [ Upstream commit 96801552f846460fe9ac10f1b189602992f004e1 ]
    
    The CPU policer used to police packets being trapped via a local route
    (IP2ME) was incorrectly configured to police based on bytes per second
    instead of packets per second.
    
    Change the policer to police based on packets per second and avoid
    packet loss under certain circumstances.
    
    Fixes: 9148e7cf73ce ("mlxsw: spectrum: Add policers for trap groups")
    Signed-off-by: Shalom Toledo <shalomt@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eebe064ce49c7ea3b730885183d6b109b1b17418
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 18 21:59:49 2018 +0800

    sctp: not increase stream's incnt before sending addstrm_in request
    
    [ Upstream commit e1e46479847e66f78f79d8c24d5169a5954b3fc2 ]
    
    Different from processing the addstrm_out request, The receiver handles
    an addstrm_in request by sending back an addstrm_out request to the
    sender who will increase its stream's in and incnt later.
    
    Now stream->incnt has been increased since it sent out the addstrm_in
    request in sctp_send_add_streams(), with the wrong stream->incnt will
    even cause crash when copying stream info from the old stream's in to
    the new one's in sctp_process_strreset_addstrm_out().
    
    This patch is to fix it by simply removing the stream->incnt change
    from sctp_send_add_streams().
    
    Fixes: 242bd2d519d7 ("sctp: implement sender-side procedures for Add Incoming/Outgoing Streams Request Parameter")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd2e5f8ae1183d8b4c8dd49a87535dc97057d258
Author: Martin Schiller <ms@dev.tdt.de>
Date:   Fri Nov 16 08:38:36 2018 +0100

    net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs
    
    [ Upstream commit df5a8ec64eed7fe45b556cfff503acd6429ab817 ]
    
    Up until commit 7e5fbd1e0700 ("net: mdio-gpio: Convert to use gpiod
    functions where possible"), the _cansleep variants of the gpio_ API was
    used. After that commit and the change to gpiod_ API, the _cansleep()
    was dropped. This then results in WARN_ON() when used with GPIO
    devices which do sleep. Add back the _cansleep() to avoid this.
    
    Fixes: 7e5fbd1e0700 ("net: mdio-gpio: Convert to use gpiod functions where possible")
    Signed-off-by: Martin Schiller <ms@dev.tdt.de>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56782f53537aaa10c1323c86236959e62bb75330
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Nov 3 13:59:45 2018 +0800

    sctp: fix strchange_flags name for Stream Change Event
    
    [ Upstream commit fd82d61ba142f0b83463e47064bf5460aac57b6e ]
    
    As defined in rfc6525#section-6.1.3, SCTP_STREAM_CHANGE_DENIED
    and SCTP_STREAM_CHANGE_FAILED should be used instead of
    SCTP_ASSOC_CHANGE_DENIED and SCTP_ASSOC_CHANGE_FAILED.
    
    To keep the compatibility, fix it by adding two macros.
    
    Fixes: b444153fb5a6 ("sctp: add support for generating add stream change event notification")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ae22cc948b00b12c18e2471ad32db366b113832
Author: Tristram Ha <Tristram.Ha@microchip.com>
Date:   Fri Nov 2 19:23:41 2018 -0700

    net: dsa: microchip: initialize mutex before use
    
    [ Upstream commit 284fb78ed7572117846f8e1d1d8e3dbfd16880c2 ]
    
    Initialize mutex before use.  Avoid kernel complaint when
    CONFIG_DEBUG_LOCK_ALLOC is enabled.
    
    Fixes: b987e98e50ab90e5 ("dsa: add DSA switch driver for Microchip KSZ9477")
    Signed-off-by: Tristram Ha <Tristram.Ha@microchip.com>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ecbb0cff18453398b13de638fec1b82ad53e14a
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Fri Nov 9 18:56:27 2018 -0700

    net: qualcomm: rmnet: Fix incorrect assignment of real_dev
    
    [ Upstream commit d02854dc1999ed3e7fd79ec700c64ac23ac0c458 ]
    
    A null dereference was observed when a sysctl was being set
    from userspace and rmnet was stuck trying to complete some actions
    in the NETDEV_REGISTER callback. This is because the real_dev is set
    only after the device registration handler completes.
    
    sysctl call stack -
    
    <6> Unable to handle kernel NULL pointer dereference at
        virtual address 00000108
    <2> pc : rmnet_vnd_get_iflink+0x1c/0x28
    <2> lr : dev_get_iflink+0x2c/0x40
    <2>  rmnet_vnd_get_iflink+0x1c/0x28
    <2>  inet6_fill_ifinfo+0x15c/0x234
    <2>  inet6_ifinfo_notify+0x68/0xd4
    <2>  ndisc_ifinfo_sysctl_change+0x1b8/0x234
    <2>  proc_sys_call_handler+0xac/0x100
    <2>  proc_sys_write+0x3c/0x4c
    <2>  __vfs_write+0x54/0x14c
    <2>  vfs_write+0xcc/0x188
    <2>  SyS_write+0x60/0xc0
    <2>  el0_svc_naked+0x34/0x38
    
    device register call stack -
    
    <2>  notifier_call_chain+0x84/0xbc
    <2>  raw_notifier_call_chain+0x38/0x48
    <2>  call_netdevice_notifiers_info+0x40/0x70
    <2>  call_netdevice_notifiers+0x38/0x60
    <2>  register_netdevice+0x29c/0x3d8
    <2>  rmnet_vnd_newlink+0x68/0xe8
    <2>  rmnet_newlink+0xa0/0x160
    <2>  rtnl_newlink+0x57c/0x6c8
    <2>  rtnetlink_rcv_msg+0x1dc/0x328
    <2>  netlink_rcv_skb+0xac/0x118
    <2>  rtnetlink_rcv+0x24/0x30
    <2>  netlink_unicast+0x158/0x1f0
    <2>  netlink_sendmsg+0x32c/0x338
    <2>  sock_sendmsg+0x44/0x60
    <2>  SyS_sendto+0x150/0x1ac
    <2>  el0_svc_naked+0x34/0x38
    
    Fixes: b752eff5be24 ("net: qualcomm: rmnet: Implement ndo_get_iflink")
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 136ff9cad44a5da95187e561f473a2969d658b7e
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Nov 1 15:55:38 2018 -0700

    net: systemport: Protect stop from timeout
    
    [ Upstream commit 7cb6a2a2c72c1ed8f42fb01f1a661281b568dead ]
    
    A timing hazard exists when the network interface is stopped that
    allows a watchdog timeout to be processed by a separate core in
    parallel. This creates the potential for the timeout handler to
    wake the queues while the driver is shutting down, or access
    registers after their clocks have been removed.
    
    The more common case is that the watchdog timeout will produce a
    warning message which doesn't lead to a crash. The chances of this
    are greatly increased by the fact that bcm_sysport_netif_stop stops
    the transmit queues which can easily precipitate a watchdog time-
    out because of stale trans_start data in the queues.
    
    This commit corrects the behavior by ensuring that the watchdog
    timeout is disabled before enterring bcm_sysport_netif_stop. There
    are currently only two users of the bcm_sysport_netif_stop function:
    close and suspend.
    
    The close case already handles the issue by exiting the RUNNING
    state before invoking the driver close service.
    
    The suspend case now performs the netif_device_detach to exit the
    PRESENT state before the call to bcm_sysport_netif_stop rather than
    after it.
    
    These behaviors prevent any future scheduling of the driver timeout
    service during the window. The netif_tx_stop_all_queues function
    in bcm_sysport_netif_stop is replaced with netif_tx_disable to ensure
    synchronization with any transmit or timeout threads that may
    already be executing on other cores.
    
    For symmetry, the netif_device_attach call upon resume is moved to
    after the call to bcm_sysport_netif_start. Since it wakes the transmit
    queues it is not necessary to invoke netif_tx_start_all_queues from
    bcm_sysport_netif_start so it is moved into the driver open service.
    
    Fixes: 40755a0fce17 ("net: systemport: add suspend and resume support")
    Fixes: 80105befdb4b ("net: systemport: add Broadcom SYSTEMPORT Ethernet MAC driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 453fcc4b536a6427829e0a89a41d605a2f29bc0e
Author: Matthew Cover <werekraken@gmail.com>
Date:   Sun Nov 18 00:46:00 2018 -0700

    tuntap: fix multiqueue rx
    
    [ Upstream commit 8ebebcba559a1bfbaec7bbda64feb9870b9c58da ]
    
    When writing packets to a descriptor associated with a combined queue, the
    packets should end up on that queue.
    
    Before this change all packets written to any descriptor associated with a
    tap interface end up on rx-0, even when the descriptor is associated with a
    different queue.
    
    The rx traffic can be generated by either of the following.
      1. a simple tap program which spins up multiple queues and writes packets
         to each of the file descriptors
      2. tx from a qemu vm with a tap multiqueue netdev
    
    The queue for rx traffic can be observed by either of the following (done
    on the hypervisor in the qemu case).
      1. a simple netmap program which opens and reads from per-queue
         descriptors
      2. configuring RPS and doing per-cpu captures with rxtxcpu
    
    Alternatively, if you printk() the return value of skb_get_rx_queue() just
    before each instance of netif_receive_skb() in tun.c, you will get 65535
    for every skb.
    
    Calling skb_record_rx_queue() to set the rx queue to the queue_index fixes
    the association between descriptor and rx queue.
    
    Signed-off-by: Matthew Cover <matthew.cover@stackpath.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e201ff7140a23ea154cad8d348d1e6e79cf0bc7
Author: Siva Reddy Kallam <siva.kallam@broadcom.com>
Date:   Tue Nov 20 10:04:04 2018 +0530

    tg3: Add PHY reset for 5717/5719/5720 in change ring and flow control paths
    
    [ Upstream commit 59663e42199c93d1d7314d1446f6782fc4b1eb81 ]
    
    This patch has the fix to avoid PHY lockup with 5717/5719/5720 in change
    ring and flow control paths. This patch solves the RX hang while doing
    continuous ring or flow control parameters with heavy traffic from peer.
    
    Signed-off-by: Siva Reddy Kallam <siva.kallam@broadcom.com>
    Acked-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7051eb3acbe0908f29fa56b464a6c79c067f93f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Nov 18 15:21:53 2018 +0800

    sctp: not allow to set asoc prsctp_enable by sockopt
    
    [ Upstream commit cc3ccf26f0649089b3a34a2781977755ea36e72c ]
    
    As rfc7496#section4.5 says about SCTP_PR_SUPPORTED:
    
       This socket option allows the enabling or disabling of the
       negotiation of PR-SCTP support for future associations.  For existing
       associations, it allows one to query whether or not PR-SCTP support
       was negotiated on a particular association.
    
    It means only sctp sock's prsctp_enable can be set.
    
    Note that for the limitation of SCTP_{CURRENT|ALL}_ASSOC, we will
    add it when introducing SCTP_{FUTURE|CURRENT|ALL}_ASSOC for linux
    sctp in another patchset.
    
    v1->v2:
      - drop the params.assoc_id check as Neil suggested.
    
    Fixes: 28aa4c26fce2 ("sctp: add SCTP_PR_SUPPORTED on sctp sockopt")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b9c0eb1ff03e9a026a9f3ca2996c03fc33af182
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Nov 17 21:57:02 2018 -0800

    net-gro: reset skb->pkt_type in napi_reuse_skb()
    
    [ Upstream commit 33d9a2c72f086cbf1087b2fd2d1a15aa9df14a7f ]
    
    eth_type_trans() assumes initial value for skb->pkt_type
    is PACKET_HOST.
    
    This is indeed the value right after a fresh skb allocation.
    
    However, it is possible that GRO merged a packet with a different
    value (like PACKET_OTHERHOST in case macvlan is used), so
    we need to make sure napi->skb will have pkt_type set back to
    PACKET_HOST.
    
    Otherwise, valid packets might be dropped by the stack because
    their pkt_type is not PACKET_HOST.
    
    napi_reuse_skb() was added in commit 96e93eab2033 ("gro: Add
    internal interfaces for VLAN"), but this bug always has
    been there.
    
    Fixes: 96e93eab2033 ("gro: Add internal interfaces for VLAN")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 590f89a7ee6b73c928f886010fe2d7a08384874e
Author: David Ahern <dsahern@gmail.com>
Date:   Sun Nov 18 10:45:30 2018 -0800

    ipv6: Fix PMTU updates for UDP/raw sockets in presence of VRF
    
    [ Upstream commit 7ddacfa564870cdd97275fd87decb6174abc6380 ]
    
    Preethi reported that PMTU discovery for UDP/raw applications is not
    working in the presence of VRF when the socket is not bound to a device.
    The problem is that ip6_sk_update_pmtu does not consider the L3 domain
    of the skb device if the socket is not bound. Update the function to
    set oif to the L3 master device if relevant.
    
    Fixes: ca254490c8df ("net: Add VRF support to IPv6 stack")
    Reported-by: Preethi Ramachandra <preethir@juniper.net>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbd5f23bd962198b298d4589565c5c5ada62e3b8
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Nov 16 16:58:19 2018 +0100

    ip_tunnel: don't force DF when MTU is locked
    
    [ Upstream commit 16f7eb2b77b55da816c4e207f3f9440a8cafc00a ]
    
    The various types of tunnels running over IPv4 can ask to set the DF
    bit to do PMTU discovery. However, PMTU discovery is subject to the
    threshold set by the net.ipv4.route.min_pmtu sysctl, and is also
    disabled on routes with "mtu lock". In those cases, we shouldn't set
    the DF bit.
    
    This patch makes setting the DF bit conditional on the route's MTU
    locking state.
    
    This issue seems to be older than git history.
    
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6e976571c9f844872ba357408c7cec868bbde4a
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Wed Nov 7 17:50:52 2018 +0100

    ibmvnic: fix accelerated VLAN handling
    
    [ Upstream commit e84b47941e15e6666afb8ee8b21d1c3fc1a013af ]
    
    Don't request tag insertion when it isn't present in outgoing skb.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ceb85d878ddce8f28394f91b2fcb26b1f8e8006e
Author: 배석진 <soukjin.bae@samsung.com>
Date:   Fri Nov 9 16:53:06 2018 -0800

    flow_dissector: do not dissect l4 ports for fragments
    
    [ Upstream commit 62230715fd2453b3ba948c9d83cfb3ada9169169 ]
    
    Only first fragment has the sport/dport information,
    not the following ones.
    
    If we want consistent hash for all fragments, we need to
    ignore ports even for first fragment.
    
    This bug is visible for IPv6 traffic, if incoming fragments
    do not have a flow label, since skb_get_hash() will give
    different results for first fragment and following ones.
    
    It is also visible if any routing rule wants dissection
    and sport or dport.
    
    See commit 5e5d6fed3741 ("ipv6: route: dissect flow
    in input path if fib rules need it") for details.
    
    [edumazet] rewrote the changelog completely.
    
    Fixes: 06635a35d13d ("flow_dissect: use programable dissector in skb_flow_dissect and friends")
    Signed-off-by: 배석진 <soukjin.bae@samsung.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
