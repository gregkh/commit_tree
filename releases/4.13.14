commit b1d6a6ff22862dfca8006afe2a6cdcb28c35b002
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Nov 18 11:30:40 2017 +0100

    Linux 4.13.14

commit 4c48b8472552f3a21ac767d42fafffa83281bd9e
Author: Adam Wallis <awallis@codeaurora.org>
Date:   Thu Nov 2 08:53:30 2017 -0400

    dmaengine: dmatest: warn user when dma test times out
    
    commit a9df21e34b422f79d9a9fa5c3eff8c2a53491be6 upstream.
    
    Commit adfa543e7314 ("dmatest: don't use set_freezable_with_signal()")
    introduced a bug (that is in fact documented by the patch commit text)
    that leaves behind a dangling pointer. Since the done_wait structure is
    allocated on the stack, future invocations to the DMATEST can produce
    undesirable results (e.g., corrupted spinlocks). Ideally, this would be
    cleaned up in the thread handler, but at the very least, the kernel
    is left in a very precarious scenario that can lead to some long debug
    sessions when the crash comes later.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=197605
    Signed-off-by: Adam Wallis <awallis@codeaurora.org>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 939f509d274541e32b1350ddc7f9d16d16617538
Author: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
Date:   Wed Sep 13 18:42:14 2017 +0800

    EDAC, sb_edac: Don't create a second memory controller if HA1 is not present
    
    commit 15cc3ae001873845b5d842e212478a6570c7d938 upstream.
    
    Yi Zhang reported the following failure on a 2-socket Haswell (E5-2603v3)
    server (DELL PowerEdge 730xd):
    
      EDAC sbridge: Some needed devices are missing
      EDAC MC: Removed device 0 for sb_edac.c Haswell SrcID#0_Ha#0: DEV 0000:7f:12.0
      EDAC MC: Removed device 1 for sb_edac.c Haswell SrcID#1_Ha#0: DEV 0000:ff:12.0
      EDAC sbridge: Couldn't find mci handler
      EDAC sbridge: Couldn't find mci handler
      EDAC sbridge: Failed to register device with error -19.
    
    The refactored sb_edac driver creates the IMC1 (the 2nd memory
    controller) if any IMC1 device is present. In this case only
    HA1_TA of IMC1 was present, but the driver expected to find
    HA1/HA1_TM/HA1_TAD[0-3] devices too, leading to the above failure.
    
    The document [1] says the 'E5-2603 v3' CPU has 4 memory channels max. Yi
    Zhang inserted one DIMM per channel for each CPU, and did random error
    address injection test with this patch:
    
          4024  addresses fell in TOLM hole area
         12715  addresses fell in CPU_SrcID#0_Ha#0_Chan#0_DIMM#0
         12774  addresses fell in CPU_SrcID#0_Ha#0_Chan#1_DIMM#0
         12798  addresses fell in CPU_SrcID#0_Ha#0_Chan#2_DIMM#0
         12913  addresses fell in CPU_SrcID#0_Ha#0_Chan#3_DIMM#0
         12674  addresses fell in CPU_SrcID#1_Ha#0_Chan#0_DIMM#0
         12686  addresses fell in CPU_SrcID#1_Ha#0_Chan#1_DIMM#0
         12882  addresses fell in CPU_SrcID#1_Ha#0_Chan#2_DIMM#0
         12934  addresses fell in CPU_SrcID#1_Ha#0_Chan#3_DIMM#0
        106400  addresses were injected totally.
    
    The test result shows that all the 4 channels belong to IMC0 per CPU, so
    the server really only has one IMC per CPU.
    
    In the 1st page of chapter 2 in datasheet [2], it also says 'E5-2600 v3'
    implements either one or two IMCs. For CPUs with one IMC, IMC1 is not
    used and should be ignored.
    
    Thus, do not create a second memory controller if the key HA1 is absent.
    
    [1] http://ark.intel.com/products/83349/Intel-Xeon-Processor-E5-2603-v3-15M-Cache-1_60-GHz
    [2] https://www.intel.com/content/dam/www/public/us/en/documents/datasheets/xeon-e5-v3-datasheet-vol-2.pdf
    
    Reported-and-tested-by: Yi Zhang <yizhan@redhat.com>
    Signed-off-by: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20170913104214.7325-1-qiuxu.zhuo@intel.com
    [ Massage commit message. ]
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf87b5de4473fdc0735c27ef719abb2e0a6964bb
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Sat Oct 7 11:07:47 2017 -0700

    Input: ims-psu - check if CDC union descriptor is sane
    
    commit ea04efee7635c9120d015dcdeeeb6988130cb67a upstream.
    
    Before trying to use CDC union descriptor, try to validate whether that it
    is sane by checking that intf->altsetting->extra is big enough and that
    descriptor bLength is not too big and not too small.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19ab6908533107d0a18048a7d8262eb74f5c05cb
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Sep 29 10:54:24 2017 -0400

    usb: usbtest: fix NULL pointer dereference
    
    commit 7c80f9e4a588f1925b07134bb2e3689335f6c6d8 upstream.
    
    If the usbtest driver encounters a device with an IN bulk endpoint but
    no OUT bulk endpoint, it will try to dereference a NULL pointer
    (out->desc.bEndpointAddress).  The problem can be solved by adding a
    missing test.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f086f306d1e3af9a43a1f5c188be0544d643ace
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Oct 24 21:12:13 2017 +0200

    mac80211: don't compare TKIP TX MIC key in reinstall prevention
    
    commit cfbb0d90a7abb289edc91833d0905931f8805f12 upstream.
    
    For the reinstall prevention, the code I had added compares the
    whole key. It turns out though that iwlwifi firmware doesn't
    provide the TKIP TX MIC key as it's not needed in client mode,
    and thus the comparison will always return false.
    
    For client mode, thus always zero out the TX MIC key part before
    doing the comparison in order to avoid accepting the reinstall
    of the key with identical encryption and RX MIC key, but not the
    same TX MIC key (since the supplicant provides the real one.)
    
    Fixes: fdf7cb4185b6 ("mac80211: accept key reinstall without changing anything")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 362cce4f4197826f371fd2876da576b75cccf7ea
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Oct 17 20:32:07 2017 +0200

    mac80211: use constant time comparison with keys
    
    commit 2bdd713b92a9cade239d3c7d15205a09f556624d upstream.
    
    Otherwise we risk leaking information via timing side channel.
    
    Fixes: fdf7cb4185b6 ("mac80211: accept key reinstall without changing anything")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9ab1b2e30e898440a22d7b1d7a5b0b7c6a8791f
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Sep 5 14:54:54 2017 +0200

    mac80211: accept key reinstall without changing anything
    
    commit fdf7cb4185b60c68e1a75e61691c4afdc15dea0e upstream.
    
    When a key is reinstalled we can reset the replay counters
    etc. which can lead to nonce reuse and/or replay detection
    being impossible, breaking security properties, as described
    in the "KRACK attacks".
    
    In particular, CVE-2017-13080 applies to GTK rekeying that
    happened in firmware while the host is in D3, with the second
    part of the attack being done after the host wakes up. In
    this case, the wpa_supplicant mitigation isn't sufficient
    since wpa_supplicant doesn't know the GTK material.
    
    In case this happens, simply silently accept the new key
    coming from userspace but don't take any action on it since
    it's the same key; this keeps the PN replay counters intact.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57e2d34901255401c84c7ba87108e58e0f9468ed
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 30 23:08:20 2017 -0700

    tcp: fix tcp_mtu_probe() vs highest_sack
    
    
    [ Upstream commit 2b7cda9c35d3b940eb9ce74b30bbd5eb30db493d ]
    
    Based on SNMP values provided by Roman, Yuchung made the observation
    that some crashes in tcp_sacktag_walk() might be caused by MTU probing.
    
    Looking at tcp_mtu_probe(), I found that when a new skb was placed
    in front of the write queue, we were not updating tcp highest sack.
    
    If one skb is freed because all its content was copied to the new skb
    (for MTU probing), then tp->highest_sack could point to a now freed skb.
    
    Bad things would then happen, including infinite loops.
    
    This patch renames tcp_highest_sack_combine() and uses it
    from tcp_mtu_probe() to fix the bug.
    
    Note that I also removed one test against tp->sacked_out,
    since we want to replace tp->highest_sack regardless of whatever
    condition, since keeping a stale pointer to freed skb is a recipe
    for disaster.
    
    Fixes: a47e5a988a57 ("[TCP]: Convert highest_sack to sk_buff to allow direct access")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
    Reported-by: Roman Gushchin <guro@fb.com>
    Reported-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54421e9a40999afe02711d6e870faff835fc94f4
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 30 22:47:09 2017 -0700

    ipv6: addrconf: increment ifp refcount before ipv6_del_addr()
    
    
    [ Upstream commit e669b86945478b3d90d2d87e3793a6eed06d332f ]
    
    In the (unlikely) event fixup_permanent_addr() returns a failure,
    addrconf_permanent_addr() calls ipv6_del_addr() without the
    mandatory call to in6_ifa_hold(), leading to a refcount error,
    spotted by syzkaller :
    
    WARNING: CPU: 1 PID: 3142 at lib/refcount.c:227 refcount_dec+0x4c/0x50
    lib/refcount.c:227
    Kernel panic - not syncing: panic_on_warn set ...
    
    CPU: 1 PID: 3142 Comm: ip Not tainted 4.14.0-rc4-next-20171009+ #33
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     panic+0x1e4/0x41c kernel/panic.c:181
     __warn+0x1c4/0x1e0 kernel/panic.c:544
     report_bug+0x211/0x2d0 lib/bug.c:183
     fixup_bug+0x40/0x90 arch/x86/kernel/traps.c:178
     do_trap_no_signal arch/x86/kernel/traps.c:212 [inline]
     do_trap+0x260/0x390 arch/x86/kernel/traps.c:261
     do_error_trap+0x120/0x390 arch/x86/kernel/traps.c:298
     do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:311
     invalid_op+0x18/0x20 arch/x86/entry/entry_64.S:905
    RIP: 0010:refcount_dec+0x4c/0x50 lib/refcount.c:227
    RSP: 0018:ffff8801ca49e680 EFLAGS: 00010286
    RAX: 000000000000002c RBX: ffff8801d07cfcdc RCX: 0000000000000000
    RDX: 000000000000002c RSI: 1ffff10039493c90 RDI: ffffed0039493cc4
    RBP: ffff8801ca49e688 R08: ffff8801ca49dd70 R09: 0000000000000000
    R10: ffff8801ca49df58 R11: 0000000000000000 R12: 1ffff10039493cd9
    R13: ffff8801ca49e6e8 R14: ffff8801ca49e7e8 R15: ffff8801d07cfcdc
     __in6_ifa_put include/net/addrconf.h:369 [inline]
     ipv6_del_addr+0x42b/0xb60 net/ipv6/addrconf.c:1208
     addrconf_permanent_addr net/ipv6/addrconf.c:3327 [inline]
     addrconf_notify+0x1c66/0x2190 net/ipv6/addrconf.c:3393
     notifier_call_chain+0x136/0x2c0 kernel/notifier.c:93
     __raw_notifier_call_chain kernel/notifier.c:394 [inline]
     raw_notifier_call_chain+0x2d/0x40 kernel/notifier.c:401
     call_netdevice_notifiers_info+0x32/0x60 net/core/dev.c:1697
     call_netdevice_notifiers net/core/dev.c:1715 [inline]
     __dev_notify_flags+0x15d/0x430 net/core/dev.c:6843
     dev_change_flags+0xf5/0x140 net/core/dev.c:6879
     do_setlink+0xa1b/0x38e0 net/core/rtnetlink.c:2113
     rtnl_newlink+0xf0d/0x1a40 net/core/rtnetlink.c:2661
     rtnetlink_rcv_msg+0x733/0x1090 net/core/rtnetlink.c:4301
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2408
     rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:4313
     netlink_unicast_kernel net/netlink/af_netlink.c:1273 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1299
     netlink_sendmsg+0xa4a/0xe70 net/netlink/af_netlink.c:1862
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     ___sys_sendmsg+0x75b/0x8a0 net/socket.c:2049
     __sys_sendmsg+0xe5/0x210 net/socket.c:2083
     SYSC_sendmsg net/socket.c:2094 [inline]
     SyS_sendmsg+0x2d/0x50 net/socket.c:2090
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x7fa9174d3320
    RSP: 002b:00007ffe302ae9e8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007ffe302b2ae0 RCX: 00007fa9174d3320
    RDX: 0000000000000000 RSI: 00007ffe302aea20 RDI: 0000000000000016
    RBP: 0000000000000082 R08: 0000000000000000 R09: 000000000000000f
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007ffe302b32a0
    R13: 0000000000000000 R14: 00007ffe302b2ab8 R15: 00007ffe302b32b8
    
    Fixes: f1705ec197e7 ("net: ipv6: Make address flushing on ifdown optional")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: David Ahern <dsahern@gmail.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46ddd03b989cede409b27ce6b0039df2113b6730
Author: Craig Gallek <kraig@google.com>
Date:   Mon Oct 30 18:50:11 2017 -0400

    tun/tap: sanitize TUNSETSNDBUF input
    
    
    [ Upstream commit 93161922c658c714715686cd0cf69b090cb9bf1d ]
    
    Syzkaller found several variants of the lockup below by setting negative
    values with the TUNSETSNDBUF ioctl.  This patch adds a sanity check
    to both the tun and tap versions of this ioctl.
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [repro:2389]
      Modules linked in:
      irq event stamp: 329692056
      hardirqs last  enabled at (329692055): [<ffffffff824b8381>] _raw_spin_unlock_irqrestore+0x31/0x75
      hardirqs last disabled at (329692056): [<ffffffff824b9e58>] apic_timer_interrupt+0x98/0xb0
      softirqs last  enabled at (35659740): [<ffffffff824bc958>] __do_softirq+0x328/0x48c
      softirqs last disabled at (35659731): [<ffffffff811c796c>] irq_exit+0xbc/0xd0
      CPU: 0 PID: 2389 Comm: repro Not tainted 4.14.0-rc7 #23
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      task: ffff880009452140 task.stack: ffff880006a20000
      RIP: 0010:_raw_spin_lock_irqsave+0x11/0x80
      RSP: 0018:ffff880006a27c50 EFLAGS: 00000282 ORIG_RAX: ffffffffffffff10
      RAX: ffff880009ac68d0 RBX: ffff880006a27ce0 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffff880006a27ce0 RDI: ffff880009ac6900
      RBP: ffff880006a27c60 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000001 R11: 000000000063ff00 R12: ffff880009ac6900
      R13: ffff880006a27cf8 R14: 0000000000000001 R15: ffff880006a27cf8
      FS:  00007f4be4838700(0000) GS:ffff88000cc00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000020101000 CR3: 0000000009616000 CR4: 00000000000006f0
      Call Trace:
       prepare_to_wait+0x26/0xc0
       sock_alloc_send_pskb+0x14e/0x270
       ? remove_wait_queue+0x60/0x60
       tun_get_user+0x2cc/0x19d0
       ? __tun_get+0x60/0x1b0
       tun_chr_write_iter+0x57/0x86
       __vfs_write+0x156/0x1e0
       vfs_write+0xf7/0x230
       SyS_write+0x57/0xd0
       entry_SYSCALL_64_fastpath+0x1f/0xbe
      RIP: 0033:0x7f4be4356df9
      RSP: 002b:00007ffc18101c08 EFLAGS: 00000293 ORIG_RAX: 0000000000000001
      RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f4be4356df9
      RDX: 0000000000000046 RSI: 0000000020101000 RDI: 0000000000000005
      RBP: 00007ffc18101c40 R08: 0000000000000001 R09: 0000000000000001
      R10: 0000000000000001 R11: 0000000000000293 R12: 0000559c75f64780
      R13: 00007ffc18101d30 R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: 33dccbb050bb ("tun: Limit amount of queued packets per device")
    Fixes: 20d29d7a916a ("net: macvtap driver")
    Signed-off-by: Craig Gallek <kraig@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b0abc895b7b3aa8717839fbd59d616258e7cd2d
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Mon Oct 30 17:58:58 2017 +0100

    l2tp: hold tunnel in pppol2tp_connect()
    
    
    [ Upstream commit f9e56baf03f9d36043a78f16e3e8b2cfd211e09e ]
    
    Use l2tp_tunnel_get() in pppol2tp_connect() to ensure the tunnel isn't
    going to disappear while processing the rest of the function.
    
    Fixes: fd558d186df2 ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 912a2fe3b2e70b110e25566e53b4d79caf10d8f3
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Oct 27 22:08:56 2017 -0700

    net_sched: avoid matching qdisc with zero handle
    
    
    [ Upstream commit 50317fce2cc70a2bbbc4b42c31bbad510382a53c ]
    
    Davide found the following script triggers a NULL pointer
    dereference:
    
    ip l a name eth0 type dummy
    tc q a dev eth0 parent :1 handle 1: htb
    
    This is because for a freshly created netdevice noop_qdisc
    is attached and when passing 'parent :1', kernel actually
    tries to match the major handle which is 0 and noop_qdisc
    has handle 0 so is matched by mistake. Commit 69012ae425d7
    tries to fix a similar bug but still misses this case.
    
    Handle 0 is not a valid one, should be just skipped. In
    fact, kernel uses it as TC_H_UNSPEC.
    
    Fixes: 69012ae425d7 ("net: sched: fix handling of singleton qdiscs with qdisc_hash")
    Fixes: 59cc1f61f09c ("net: sched:convert qdisc linked list to hashtable")
    Reported-by: Davide Caratti <dcaratti@redhat.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a796901e58ee4d6fc5e0f4c87845bf4b6c353680
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Oct 28 02:13:29 2017 +0800

    sctp: reset owner sk for data chunks on out queues when migrating a sock
    
    
    [ Upstream commit d04adf1b355181e737b6b1e23d801b07f0b7c4c0 ]
    
    Now when migrating sock to another one in sctp_sock_migrate(), it only
    resets owner sk for the data in receive queues, not the chunks on out
    queues.
    
    It would cause that data chunks length on the sock is not consistent
    with sk sk_wmem_alloc. When closing the sock or freeing these chunks,
    the old sk would never be freed, and the new sock may crash due to
    the overflow sk_wmem_alloc.
    
    syzbot found this issue with this series:
    
      r0 = socket$inet_sctp()
      sendto$inet(r0)
      listen(r0)
      accept4(r0)
      close(r0)
    
    Although listen() should have returned error when one TCP-style socket
    is in connecting (I may fix this one in another patch), it could also
    be reproduced by peeling off an assoc.
    
    This issue is there since very beginning.
    
    This patch is to reset owner sk for the chunks on out queues so that
    sk sk_wmem_alloc has correct value after accept one sock or peeloff
    an assoc to one sock.
    
    Note that when resetting owner sk for chunks on outqueue, it has to
    sctp_clear_owner_w/skb_orphan chunks before changing assoc->base.sk
    first and then sctp_set_owner_w them after changing assoc->base.sk,
    due to that sctp_wfree and it's callees are using assoc->base.sk.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa46a4aff8496ae3d7b067fb820830cb1326031f
Author: Julien Gomes <julien@arista.com>
Date:   Wed Oct 25 11:50:50 2017 -0700

    tun: allow positive return values on dev_get_valid_name() call
    
    
    [ Upstream commit 5c25f65fd1e42685f7ccd80e0621829c105785d9 ]
    
    If the name argument of dev_get_valid_name() contains "%d", it will try
    to assign it a unit number in __dev__alloc_name() and return either the
    unit number (>= 0) or an error code (< 0).
    Considering positive values as error values prevent tun device creations
    relying this mechanism, therefor we should only consider negative values
    as errors here.
    
    Signed-off-by: Julien Gomes <julien@arista.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8838e7ea8d532d226111f6be8e7467b0e9e23d54
Author: Girish Moodalbail <girish.moodalbail@oracle.com>
Date:   Fri Oct 27 00:00:16 2017 -0700

    tap: reference to KVA of an unloaded module causes kernel panic
    
    
    [ Upstream commit dea6e19f4ef746aa18b4c33d1a7fed54356796ed ]
    
    The commit 9a393b5d5988 ("tap: tap as an independent module") created a
    separate tap module that implements tap functionality and exports
    interfaces that will be used by macvtap and ipvtap modules to create
    create respective tap devices.
    
    However, that patch introduced a regression wherein the modules macvtap
    and ipvtap can be removed (through modprobe -r) while there are
    applications using the respective /dev/tapX devices. These applications
    cause kernel to hold reference to /dev/tapX through 'struct cdev
    macvtap_cdev' and 'struct cdev ipvtap_dev' defined in macvtap and ipvtap
    modules respectively. So,  when the application is later closed the
    kernel panics because we are referencing KVA that is present in the
    unloaded modules.
    
    ----------8<------- Example ----------8<----------
    $ sudo ip li add name mv0 link enp7s0 type macvtap
    $ sudo ip li show mv0 |grep mv0| awk -e '{print $1 $2}'
      14:mv0@enp7s0:
    $ cat /dev/tap14 &
    $ lsmod |egrep -i 'tap|vlan'
    macvtap                16384  0
    macvlan                24576  1 macvtap
    tap                    24576  3 macvtap
    $ sudo modprobe -r macvtap
    $ fg
    cat /dev/tap14
    ^C
    
    <...system panics...>
    BUG: unable to handle kernel paging request at ffffffffa038c500
    IP: cdev_put+0xf/0x30
    ----------8<-----------------8<----------
    
    The fix is to set cdev.owner to the module that creates the tap device
    (either macvtap or ipvtap). With this set, the operations (in
    fs/char_dev.c) on char device holds and releases the module through
    cdev_get() and cdev_put() and will not allow the module to unload
    prematurely.
    
    Fixes: 9a393b5d5988ea4e (tap: tap as an independent module)
    Signed-off-by: Girish Moodalbail <girish.moodalbail@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f79ee663ca8d163fb824859c016c14ee1970b8c5
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 26 21:21:40 2017 -0700

    tcp: refresh tp timestamp before tcp_mtu_probe()
    
    
    [ Upstream commit ee1836aec4f5a977c1699a311db4d9027ef21ac8 ]
    
    In the unlikely event tcp_mtu_probe() is sending a packet, we
    want tp->tcp_mstamp being as accurate as possible.
    
    This means we need to call tcp_mstamp_refresh() a bit earlier in
    tcp_write_xmit().
    
    Fixes: 385e20706fac ("tcp: use tp->tcp_mstamp in output path")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e46f100e9bc043664a5272b0451483dab4738a86
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Oct 26 19:27:17 2017 +0800

    ip6_gre: update dst pmtu if dev mtu has been updated by toobig in __gre6_xmit
    
    
    [ Upstream commit 8aec4959d832bae0889a8e2f348973b5e4abffef ]
    
    When receiving a Toobig icmpv6 packet, ip6gre_err would just set
    tunnel dev's mtu, that's not enough. For skb_dst(skb)'s pmtu may
    still be using the old value, it has no chance to be updated with
    tunnel dev's mtu.
    
    Jianlin found this issue by reducing route's mtu while running
    netperf, the performance went to 0.
    
    ip6ip6 and ip4ip6 tunnel can work well with this, as they lookup
    the upper dst and update_pmtu it's pmtu or icmpv6_send a Toobig
    to upper socket after setting tunnel dev's mtu.
    
    We couldn't do that for ip6_gre, as gre's inner packet could be
    any protocol, it's difficult to handle them (like lookup upper
    dst) in a good way.
    
    So this patch is to fix it by updating skb_dst(skb)'s pmtu when
    dev->mtu < skb_dst(skb)'s pmtu in tx path. It's safe to do this
    update there, as usually dev->mtu <= skb_dst(skb)'s pmtu and no
    performance regression can be caused by this.
    
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d54b7a13035925ebbf8dfcccc1e3f8481f44d5f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Oct 26 19:23:27 2017 +0800

    ip6_gre: only increase err_count for some certain type icmpv6 in ip6gre_err
    
    
    [ Upstream commit f8d20b46ce55cf40afb30dcef6d9288f7ef46d9b ]
    
    The similar fix in patch 'ipip: only increase err_count for some
    certain type icmp in ipip_err' is needed for ip6gre_err.
    
    In Jianlin's case, udp netperf broke even when receiving a TooBig
    icmpv6 packet.
    
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baffb7eecf945e96faaecdf156c23bc71efd304b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Oct 26 19:19:56 2017 +0800

    ipip: only increase err_count for some certain type icmp in ipip_err
    
    
    [ Upstream commit f3594f0a7ea36661d7fd942facd7f31a64245f1a ]
    
    t->err_count is used to count the link failure on tunnel and an err
    will be reported to user socket in tx path if t->err_count is not 0.
    udp socket could even return EHOSTUNREACH to users.
    
    Since commit fd58156e456d ("IPIP: Use ip-tunneling code.") removed
    the 'switch check' for icmp type in ipip_err(), err_count would be
    increased by the icmp packet with ICMP_EXC_FRAGTIME code. an link
    failure would be reported out due to this.
    
    In Jianlin's case, when receiving ICMP_EXC_FRAGTIME a icmp packet,
    udp netperf failed with the err:
      send_data: data send error: No route to host (errno 113)
    
    We expect this error reported from tunnel to socket when receiving
    some certain type icmp, but not ICMP_EXC_FRAGTIME, ICMP_SR_FAILED
    or ICMP_PARAMETERPROB ones.
    
    This patch is to bring 'switch check' for icmp type back to ipip_err
    so that it only reports link failure for the right type icmp, just as
    in ipgre_err() and ipip6_err().
    
    Fixes: fd58156e456d ("IPIP: Use ip-tunneling code.")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4e4e760e2265dc75cb245bb33fef09457dc849a
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Tue Oct 17 12:33:43 2017 +0200

    net/mlx5e: Properly deal with encap flows add/del under neigh update
    
    
    [ Upstream commit 3c37745ec614ff048d5dce38f976804b05d307ee ]
    
    Currently, the encap action offload is handled in the actions parse
    function and not in mlx5e_tc_add_fdb_flow() where we deal with all
    the other aspects of offloading actions (vlan, modify header) and
    the rule itself.
    
    When the neigh update code (mlx5e_tc_encap_flows_add()) recreates the
    encap entry and offloads the related flows, we wrongly call again into
    mlx5e_tc_add_fdb_flow(), this for itself would cause us to handle
    again the offloading of vlans and header re-write which puts things
    in non consistent state and step on freed memory (e.g the modify
    header parse buffer which is already freed).
    
    Since on error, mlx5e_tc_add_fdb_flow() detaches and may release the
    encap entry, it causes a corruption at the neigh update code which goes
    over the list of flows associated with this encap entry, or double free
    when the tc flow is later deleted by user-space.
    
    When neigh update (mlx5e_tc_encap_flows_del()) unoffloads the flows related
    to an encap entry which is now invalid, we do a partial repeat of the eswitch
    flow removal code which is wrong too.
    
    To fix things up we do the following:
    
    (1) handle the encap action offload in the eswitch flow add function
        mlx5e_tc_add_fdb_flow() as done for the other actions and the rule itself.
    
    (2) modify the neigh update code (mlx5e_tc_encap_flows_add/del) to only
        deal with the encap entry and rules delete/add and not with any of
        the other offloaded actions.
    
    Fixes: 232c001398ae ('net/mlx5e: Add support to neighbour update flow')
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reviewed-by: Paul Blakey <paulb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ed588a25d1efd800caaa4ebeee3cd1bff4fd198
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Thu Oct 19 14:14:29 2017 +0300

    net/mlx5: Fix health work queue spin lock to IRQ safe
    
    
    [ Upstream commit 6377ed0bbae6fa28853e1679d068a9106c8a8908 ]
    
    spin_lock/unlock of health->wq_lock should be IRQ safe.
    It was changed to spin_lock_irqsave since adding commit 0179720d6be2
    ("net/mlx5: Introduce trigger_health_work function") which uses
    spin_lock from asynchronous event (IRQ) context.
    Thus, all spin_lock/unlock of health->wq_lock should have been moved
    to IRQ safe mode.
    However, one occurrence on new code using this lock missed that
    change, resulting in possible deadlock:
      kernel: Possible unsafe locking scenario:
      kernel:       CPU0
      kernel:       ----
      kernel:  lock(&(&health->wq_lock)->rlock);
      kernel:  <Interrupt>
      kernel:    lock(&(&health->wq_lock)->rlock);
      kernel: #012 *** DEADLOCK ***
    
    Fixes: 2a0165a034ac ("net/mlx5: Cancel delayed recovery work when unloading the driver")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b7e3bdf361e1f21c02ba95ba1755079b23a0f09
Author: Girish Moodalbail <girish.moodalbail@oracle.com>
Date:   Wed Oct 25 00:23:04 2017 -0700

    tap: double-free in error path in tap_open()
    
    
    [ Upstream commit 78e0ea6791d7baafb8a0ca82b1bd0c7b3453c919 ]
    
    Double free of skb_array in tap module is causing kernel panic. When
    tap_set_queue() fails we free skb_array right away by calling
    skb_array_cleanup(). However, later on skb_array_cleanup() is called
    again by tap_sock_destruct through sock_put(). This patch fixes that
    issue.
    
    Fixes: 362899b8725b35e3 (macvtap: switch to use skb array)
    Signed-off-by: Girish Moodalbail <girish.moodalbail@oracle.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d71d310fc798dd6dc605b241ec69afff691db13
Author: Andrei Vagin <avagin@openvz.org>
Date:   Wed Oct 25 10:16:42 2017 -0700

    net/unix: don't show information about sockets from other namespaces
    
    
    [ Upstream commit 0f5da659d8f1810f44de14acf2c80cd6499623a0 ]
    
    socket_diag shows information only about sockets from a namespace where
    a diag socket lives.
    
    But if we request information about one unix socket, the kernel don't
    check that its netns is matched with a diag socket namespace, so any
    user can get information about any unix socket in a system. This looks
    like a bug.
    
    v2: add a Fixes tag
    
    Fixes: 51d7cccf0723 ("net: make sock diag per-namespace")
    Signed-off-by: Andrei Vagin <avagin@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ae86594f23b5e42960cf43110fbec9805aa6302
Author: Vivien Didelot <vivien.didelot@gmail.com>
Date:   Tue Oct 24 16:37:19 2017 -0400

    net: dsa: check master device before put
    
    
    [ Upstream commit 3eb8feeb1708c7dbfd2e97df92a2a407c116606e ]
    
    In the case of pdata, the dsa_cpu_parse function calls dev_put() before
    making sure it isn't NULL. Fix this.
    
    Fixes: 71e0bbde0d88 ("net: dsa: Add support for platform data")
    Signed-off-by: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66ae97b0c70e9340579971c13d2607caa6939bc1
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 24 08:20:31 2017 -0700

    tcp/dccp: fix other lockdep splats accessing ireq_opt
    
    
    [ Upstream commit 06f877d613be3621604c2520ec0351d9fbdca15f ]
    
    In my first attempt to fix the lockdep splat, I forgot we could
    enter inet_csk_route_req() with a freshly allocated request socket,
    for which refcount has not yet been elevated, due to complex
    SLAB_TYPESAFE_BY_RCU rules.
    
    We either are in rcu_read_lock() section _or_ we own a refcount on the
    request.
    
    Correct RCU verb to use here is rcu_dereference_check(), although it is
    not possible to prove we actually own a reference on a shared
    refcount :/
    
    In v2, I added ireq_opt_deref() helper and use in three places, to fix other
    possible splats.
    
    [   49.844590]  lockdep_rcu_suspicious+0xea/0xf3
    [   49.846487]  inet_csk_route_req+0x53/0x14d
    [   49.848334]  tcp_v4_route_req+0xe/0x10
    [   49.850174]  tcp_conn_request+0x31c/0x6a0
    [   49.851992]  ? __lock_acquire+0x614/0x822
    [   49.854015]  tcp_v4_conn_request+0x5a/0x79
    [   49.855957]  ? tcp_v4_conn_request+0x5a/0x79
    [   49.858052]  tcp_rcv_state_process+0x98/0xdcc
    [   49.859990]  ? sk_filter_trim_cap+0x2f6/0x307
    [   49.862085]  tcp_v4_do_rcv+0xfc/0x145
    [   49.864055]  ? tcp_v4_do_rcv+0xfc/0x145
    [   49.866173]  tcp_v4_rcv+0x5ab/0xaf9
    [   49.868029]  ip_local_deliver_finish+0x1af/0x2e7
    [   49.870064]  ip_local_deliver+0x1b2/0x1c5
    [   49.871775]  ? inet_del_offload+0x45/0x45
    [   49.873916]  ip_rcv_finish+0x3f7/0x471
    [   49.875476]  ip_rcv+0x3f1/0x42f
    [   49.876991]  ? ip_local_deliver_finish+0x2e7/0x2e7
    [   49.878791]  __netif_receive_skb_core+0x6d3/0x950
    [   49.880701]  ? process_backlog+0x7e/0x216
    [   49.882589]  __netif_receive_skb+0x1d/0x5e
    [   49.884122]  process_backlog+0x10c/0x216
    [   49.885812]  net_rx_action+0x147/0x3df
    
    Fixes: a6ca7abe53633 ("tcp/dccp: fix lockdep splat in inet_csk_route_req()")
    Fixes: c92e8c02fe66 ("tcp/dccp: fix ireq->opt races")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: kernel test robot <fengguang.wu@intel.com>
    Reported-by: Maciej Żenczykowski <maze@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65dc54caa562ca4655c33507db64ab47cea4091a
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Oct 22 12:33:57 2017 -0700

    tcp/dccp: fix lockdep splat in inet_csk_route_req()
    
    
    [ Upstream commit a6ca7abe53633d08eea1c6756cb49c9b2d4c90bf ]
    
    This patch fixes the following lockdep splat in inet_csk_route_req()
    
      lockdep_rcu_suspicious
      inet_csk_route_req
      tcp_v4_send_synack
      tcp_rtx_synack
      inet_rtx_syn_ack
      tcp_fastopen_synack_time
      tcp_retransmit_timer
      tcp_write_timer_handler
      tcp_write_timer
      call_timer_fn
    
    Thread running inet_csk_route_req() owns a reference on the request
    socket, so we have the guarantee ireq->ireq_opt wont be changed or
    freed.
    
    lockdep can enforce this invariant for us.
    
    Fixes: c92e8c02fe66 ("tcp/dccp: fix ireq->opt races")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 574475f09d984238580b85c070e6052f164c778e
Author: Laszlo Toth <laszlth@gmail.com>
Date:   Mon Oct 23 19:19:33 2017 +0200

    sctp: full support for ipv6 ip_nonlocal_bind & IP_FREEBIND
    
    
    [ Upstream commit b71d21c274eff20a9db8158882b545b141b73ab8 ]
    
    Commit 9b9742022888 ("sctp: support ipv6 nonlocal bind")
    introduced support for the above options as v4 sctp did,
    so patched sctp_v6_available().
    
    In the v4 implementation it's enough, because
    sctp_inet_bind_verify() just returns with sctp_v4_available().
    However sctp_inet6_bind_verify() has an extra check before that
    for link-local scope_id, which won't respect the above options.
    
    Added the checks before calling ipv6_chk_addr(), but
    not before the validation of scope_id.
    
    before (w/ both options):
     ./v6test fe80::10 sctp
     bind failed, errno: 99 (Cannot assign requested address)
     ./v6test fe80::10 tcp
     bind success, errno: 0 (Success)
    
    after (w/ both options):
     ./v6test fe80::10 sctp
     bind success, errno: 0 (Success)
    
    Signed-off-by: Laszlo Toth <laszlth@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9b6f439d879da4b7db31fa30b68ea954f328329
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Oct 21 12:26:23 2017 -0700

    ipv6: flowlabel: do not leave opt->tot_len with garbage
    
    
    [ Upstream commit 864e2a1f8aac05effac6063ce316b480facb46ff ]
    
    When syzkaller team brought us a C repro for the crash [1] that
    had been reported many times in the past, I finally could find
    the root cause.
    
    If FlowLabel info is merged by fl6_merge_options(), we leave
    part of the opt_space storage provided by udp/raw/l2tp with random value
    in opt_space.tot_len, unless a control message was provided at sendmsg()
    time.
    
    Then ip6_setup_cork() would use this random value to perform a kzalloc()
    call. Undefined behavior and crashes.
    
    Fix is to properly set tot_len in fl6_merge_options()
    
    At the same time, we can also avoid consuming memory and cpu cycles
    to clear it, if every option is copied via a kmemdup(). This is the
    change in ip6_setup_cork().
    
    [1]
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 0 PID: 6613 Comm: syz-executor0 Not tainted 4.14.0-rc4+ #127
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    task: ffff8801cb64a100 task.stack: ffff8801cc350000
    RIP: 0010:ip6_setup_cork+0x274/0x15c0 net/ipv6/ip6_output.c:1168
    RSP: 0018:ffff8801cc357550 EFLAGS: 00010203
    RAX: dffffc0000000000 RBX: ffff8801cc357748 RCX: 0000000000000010
    RDX: 0000000000000002 RSI: ffffffff842bd1d9 RDI: 0000000000000014
    RBP: ffff8801cc357620 R08: ffff8801cb17f380 R09: ffff8801cc357b10
    R10: ffff8801cb64a100 R11: 0000000000000000 R12: ffff8801cc357ab0
    R13: ffff8801cc357b10 R14: 0000000000000000 R15: ffff8801c3bbf0c0
    FS:  00007f9c5c459700(0000) GS:ffff8801db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020324000 CR3: 00000001d1cf2000 CR4: 00000000001406f0
    DR0: 0000000020001010 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000600
    Call Trace:
     ip6_make_skb+0x282/0x530 net/ipv6/ip6_output.c:1729
     udpv6_sendmsg+0x2769/0x3380 net/ipv6/udp.c:1340
     inet_sendmsg+0x11f/0x5e0 net/ipv4/af_inet.c:762
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     SYSC_sendto+0x358/0x5a0 net/socket.c:1750
     SyS_sendto+0x40/0x50 net/socket.c:1718
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4520a9
    RSP: 002b:00007f9c5c458c08 EFLAGS: 00000216 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004520a9
    RDX: 0000000000000001 RSI: 0000000020fd1000 RDI: 0000000000000016
    RBP: 0000000000000086 R08: 0000000020e0afe4 R09: 000000000000001c
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004bb1ee
    R13: 00000000ffffffff R14: 0000000000000016 R15: 0000000000000029
    Code: e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85 ea 0f 00 00 48 8d 79 04 48 b8 00 00 00 00 00 fc ff df 45 8b 74 24 04 48 89 fa 48 c1 ea 03 <0f> b6 14 02 48 89 f8 83 e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85
    RIP: ip6_setup_cork+0x274/0x15c0 net/ipv6/ip6_output.c:1168 RSP: ffff8801cc357550
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3212d077c679f189ac41c186f66f38591807d6f4
Author: Craig Gallek <kraig@google.com>
Date:   Thu Oct 19 15:00:29 2017 -0400

    soreuseport: fix initialization race
    
    
    [ Upstream commit 1b5f962e71bfad6284574655c406597535c3ea7a ]
    
    Syzkaller stumbled upon a way to trigger
    WARNING: CPU: 1 PID: 13881 at net/core/sock_reuseport.c:41
    reuseport_alloc+0x306/0x3b0 net/core/sock_reuseport.c:39
    
    There are two initialization paths for the sock_reuseport structure in a
    socket: Through the udp/tcp bind paths of SO_REUSEPORT sockets or through
    SO_ATTACH_REUSEPORT_[CE]BPF before bind.  The existing implementation
    assumedthat the socket lock protected both of these paths when it actually
    only protects the SO_ATTACH_REUSEPORT path.  Syzkaller triggered this
    double allocation by running these paths concurrently.
    
    This patch moves the check for double allocation into the reuseport_alloc
    function which is protected by a global spin lock.
    
    Fixes: e32ea7e74727 ("soreuseport: fast reuseport UDP socket selection")
    Fixes: c125e80b8868 ("soreuseport: fast reuseport TCP socket selection")
    Signed-off-by: Craig Gallek <kraig@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 318eb5ca5bbba6a7fb05fde69b0bcf9f67bfd45c
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Thu Oct 19 20:17:32 2017 +0300

    net: bridge: fix returning of vlan range op errors
    
    
    [ Upstream commit 66c54517540cedf5a22911c6b7f5c7d8b5d1e1be ]
    
    When vlan tunnels were introduced, vlan range errors got silently
    dropped and instead 0 was returned always. Restore the previous
    behaviour and return errors to user-space.
    
    Fixes: efa5356b0d97 ("bridge: per vlan dst_metadata netlink support")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Acked-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f13444e50126cd722bc720fae32650037ef90189
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Thu Oct 19 13:31:28 2017 +0200

    geneve: Fix function matching VNI and tunnel ID on big-endian
    
    
    [ Upstream commit 772e97b57a4aa00170ad505a40ffad31d987ce1d ]
    
    On big-endian machines, functions converting between tunnel ID
    and VNI use the three LSBs of tunnel ID storage to map VNI.
    
    The comparison function eq_tun_id_and_vni(), on the other hand,
    attempted to map the VNI from the three MSBs. Fix it by using
    the same check implemented on LE, which maps VNI from the three
    LSBs of tunnel ID.
    
    Fixes: 2e0b26e10352 ("geneve: Optimize geneve device lookup.")
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: Jakub Sitnicki <jkbs@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e186faf27b12f5466e060a5f3ea1a667f1b5bd04
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 18 16:14:52 2017 -0700

    packet: avoid panic in packet_getsockopt()
    
    
    [ Upstream commit 509c7a1ecc8601f94ffba8a00889fefb239c00c6 ]
    
    syzkaller got crashes in packet_getsockopt() processing
    PACKET_ROLLOVER_STATS command while another thread was managing
    to change po->rollover
    
    Using RCU will fix this bug. We might later add proper RCU annotations
    for sparse sake.
    
    In v2: I replaced kfree(rollover) in fanout_add() to kfree_rcu()
    variant, as spotted by John.
    
    Fixes: a9b6391814d5 ("packet: rollover statistics")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Cc: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d11a508f627abf7beac5bc680cb620cb0e94d200
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Oct 20 09:04:13 2017 -0700

    tcp/dccp: fix ireq->opt races
    
    
    [ Upstream commit c92e8c02fe664155ac4234516e32544bec0f113d ]
    
    syzkaller found another bug in DCCP/TCP stacks [1]
    
    For the reasons explained in commit ce1050089c96 ("tcp/dccp: fix
    ireq->pktopts race"), we need to make sure we do not access
    ireq->opt unless we own the request sock.
    
    Note the opt field is renamed to ireq_opt to ease grep games.
    
    [1]
    BUG: KASAN: use-after-free in ip_queue_xmit+0x1687/0x18e0 net/ipv4/ip_output.c:474
    Read of size 1 at addr ffff8801c951039c by task syz-executor5/3295
    
    CPU: 1 PID: 3295 Comm: syz-executor5 Not tainted 4.14.0-rc4+ #80
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x25b/0x340 mm/kasan/report.c:409
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/report.c:427
     ip_queue_xmit+0x1687/0x18e0 net/ipv4/ip_output.c:474
     tcp_transmit_skb+0x1ab7/0x3840 net/ipv4/tcp_output.c:1135
     tcp_send_ack.part.37+0x3bb/0x650 net/ipv4/tcp_output.c:3587
     tcp_send_ack+0x49/0x60 net/ipv4/tcp_output.c:3557
     __tcp_ack_snd_check+0x2c6/0x4b0 net/ipv4/tcp_input.c:5072
     tcp_ack_snd_check net/ipv4/tcp_input.c:5085 [inline]
     tcp_rcv_state_process+0x2eff/0x4850 net/ipv4/tcp_input.c:6071
     tcp_child_process+0x342/0x990 net/ipv4/tcp_minisocks.c:816
     tcp_v4_rcv+0x1827/0x2f80 net/ipv4/tcp_ipv4.c:1682
     ip_local_deliver_finish+0x2e2/0xba0 net/ipv4/ip_input.c:216
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_local_deliver+0x1ce/0x6e0 net/ipv4/ip_input.c:257
     dst_input include/net/dst.h:464 [inline]
     ip_rcv_finish+0x887/0x19a0 net/ipv4/ip_input.c:397
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_rcv+0xc3f/0x1820 net/ipv4/ip_input.c:493
     __netif_receive_skb_core+0x1a3e/0x34b0 net/core/dev.c:4476
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4514
     netif_receive_skb_internal+0x10b/0x670 net/core/dev.c:4587
     netif_receive_skb+0xae/0x390 net/core/dev.c:4611
     tun_rx_batched.isra.50+0x5ed/0x860 drivers/net/tun.c:1372
     tun_get_user+0x249c/0x36d0 drivers/net/tun.c:1766
     tun_chr_write_iter+0xbf/0x160 drivers/net/tun.c:1792
     call_write_iter include/linux/fs.h:1770 [inline]
     new_sync_write fs/read_write.c:468 [inline]
     __vfs_write+0x68a/0x970 fs/read_write.c:481
     vfs_write+0x18f/0x510 fs/read_write.c:543
     SYSC_write fs/read_write.c:588 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:580
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x40c341
    RSP: 002b:00007f469523ec10 EFLAGS: 00000293 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 000000000040c341
    RDX: 0000000000000037 RSI: 0000000020004000 RDI: 0000000000000015
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 00000000000f4240 R11: 0000000000000293 R12: 00000000004b7fd1
    R13: 00000000ffffffff R14: 0000000020000000 R15: 0000000000025000
    
    Allocated by task 3295:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     __do_kmalloc mm/slab.c:3725 [inline]
     __kmalloc+0x162/0x760 mm/slab.c:3734
     kmalloc include/linux/slab.h:498 [inline]
     tcp_v4_save_options include/net/tcp.h:1962 [inline]
     tcp_v4_init_req+0x2d3/0x3e0 net/ipv4/tcp_ipv4.c:1271
     tcp_conn_request+0xf6d/0x3410 net/ipv4/tcp_input.c:6283
     tcp_v4_conn_request+0x157/0x210 net/ipv4/tcp_ipv4.c:1313
     tcp_rcv_state_process+0x8ea/0x4850 net/ipv4/tcp_input.c:5857
     tcp_v4_do_rcv+0x55c/0x7d0 net/ipv4/tcp_ipv4.c:1482
     tcp_v4_rcv+0x2d10/0x2f80 net/ipv4/tcp_ipv4.c:1711
     ip_local_deliver_finish+0x2e2/0xba0 net/ipv4/ip_input.c:216
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_local_deliver+0x1ce/0x6e0 net/ipv4/ip_input.c:257
     dst_input include/net/dst.h:464 [inline]
     ip_rcv_finish+0x887/0x19a0 net/ipv4/ip_input.c:397
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_rcv+0xc3f/0x1820 net/ipv4/ip_input.c:493
     __netif_receive_skb_core+0x1a3e/0x34b0 net/core/dev.c:4476
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4514
     netif_receive_skb_internal+0x10b/0x670 net/core/dev.c:4587
     netif_receive_skb+0xae/0x390 net/core/dev.c:4611
     tun_rx_batched.isra.50+0x5ed/0x860 drivers/net/tun.c:1372
     tun_get_user+0x249c/0x36d0 drivers/net/tun.c:1766
     tun_chr_write_iter+0xbf/0x160 drivers/net/tun.c:1792
     call_write_iter include/linux/fs.h:1770 [inline]
     new_sync_write fs/read_write.c:468 [inline]
     __vfs_write+0x68a/0x970 fs/read_write.c:481
     vfs_write+0x18f/0x510 fs/read_write.c:543
     SYSC_write fs/read_write.c:588 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:580
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 3306:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kfree+0xca/0x250 mm/slab.c:3820
     inet_sock_destruct+0x59d/0x950 net/ipv4/af_inet.c:157
     __sk_destruct+0xfd/0x910 net/core/sock.c:1560
     sk_destruct+0x47/0x80 net/core/sock.c:1595
     __sk_free+0x57/0x230 net/core/sock.c:1603
     sk_free+0x2a/0x40 net/core/sock.c:1614
     sock_put include/net/sock.h:1652 [inline]
     inet_csk_complete_hashdance+0xd5/0xf0 net/ipv4/inet_connection_sock.c:959
     tcp_check_req+0xf4d/0x1620 net/ipv4/tcp_minisocks.c:765
     tcp_v4_rcv+0x17f6/0x2f80 net/ipv4/tcp_ipv4.c:1675
     ip_local_deliver_finish+0x2e2/0xba0 net/ipv4/ip_input.c:216
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_local_deliver+0x1ce/0x6e0 net/ipv4/ip_input.c:257
     dst_input include/net/dst.h:464 [inline]
     ip_rcv_finish+0x887/0x19a0 net/ipv4/ip_input.c:397
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_rcv+0xc3f/0x1820 net/ipv4/ip_input.c:493
     __netif_receive_skb_core+0x1a3e/0x34b0 net/core/dev.c:4476
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4514
     netif_receive_skb_internal+0x10b/0x670 net/core/dev.c:4587
     netif_receive_skb+0xae/0x390 net/core/dev.c:4611
     tun_rx_batched.isra.50+0x5ed/0x860 drivers/net/tun.c:1372
     tun_get_user+0x249c/0x36d0 drivers/net/tun.c:1766
     tun_chr_write_iter+0xbf/0x160 drivers/net/tun.c:1792
     call_write_iter include/linux/fs.h:1770 [inline]
     new_sync_write fs/read_write.c:468 [inline]
     __vfs_write+0x68a/0x970 fs/read_write.c:481
     vfs_write+0x18f/0x510 fs/read_write.c:543
     SYSC_write fs/read_write.c:588 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:580
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Fixes: e994b2f0fb92 ("tcp: do not lock listener to process SYN packets")
    Fixes: 079096f103fa ("tcp/dccp: install syn_recv requests into ehash table")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4519a59a502fbd9223e22660da60ddabae1127b7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 18 21:37:49 2017 +0800

    sctp: add the missing sock_owned_by_user check in sctp_icmp_redirect
    
    
    [ Upstream commit 1cc276cec9ec574d41cf47dfc0f51406b6f26ab4 ]
    
    Now sctp processes icmp redirect packet in sctp_icmp_redirect where
    it calls sctp_transport_dst_check in which tp->dst can be released.
    
    The problem is before calling sctp_transport_dst_check, it doesn't
    check sock_owned_by_user, which means tp->dst could be freed while
    a process is accessing it with owning the socket.
    
    An use-after-free issue could be triggered by this.
    
    This patch is to fix it by checking sock_owned_by_user before calling
    sctp_transport_dst_check in sctp_icmp_redirect, so that it would not
    release tp->dst if users still hold sock lock.
    
    Besides, the same issue fixed in commit 45caeaa5ac0b ("dccp/tcp: fix
    routing redirect race") on sctp also needs this check.
    
    Fixes: 55be7a9c6074 ("ipv4: Add redirect support to all protocol icmp error handlers")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9c2b9fd0a1efa1f14c0f5fc6fe656029a5fa3e5
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Oct 16 17:09:53 2017 +0200

    netlink: fix netlink_ack() extack race
    
    
    [ Upstream commit 48044eb490be71c203e14dd89e8bae87209eab52 ]
    
    It seems that it's possible to toggle NETLINK_F_EXT_ACK
    through setsockopt() while another thread/CPU is building
    a message inside netlink_ack(), which could then trigger
    the WARN_ON()s I added since if it goes from being turned
    off to being turned on between allocating and filling the
    message, the skb could end up being too small.
    
    Avoid this whole situation by storing the value of this
    flag in a separate variable and using that throughout the
    function instead.
    
    Fixes: 2d4bc93368f5 ("netlink: extended ACK reporting")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa9ab97c4d79b29727344f9c77d673743bbe35cb
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Oct 13 11:58:53 2017 -0700

    tun: call dev_get_valid_name() before register_netdevice()
    
    
    [ Upstream commit 0ad646c81b2182f7fa67ec0c8c825e0ee165696d ]
    
    register_netdevice() could fail early when we have an invalid
    dev name, in which case ->ndo_uninit() is not called. For tun
    device, this is a problem because a timer etc. are already
    initialized and it expects ->ndo_uninit() to clean them up.
    
    We could move these initializations into a ->ndo_init() so
    that register_netdevice() knows better, however this is still
    complicated due to the logic in tun_detach().
    
    Therefore, I choose to just call dev_get_valid_name() before
    register_netdevice(), which is quicker and much easier to audit.
    And for this specific case, it is already enough.
    
    Fixes: 96442e42429e ("tuntap: choose the txq based on rxq")
    Reported-by: Dmitry Alexeev <avekceeb@gmail.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4531b5b14d4104e70ae2ed1608e5373992bb6f14
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 13 19:22:35 2017 +0200

    l2tp: check ps->sock before running pppol2tp_session_ioctl()
    
    
    [ Upstream commit 5903f594935a3841137c86b9d5b75143a5b7121c ]
    
    When pppol2tp_session_ioctl() is called by pppol2tp_tunnel_ioctl(),
    the session may be unconnected. That is, it was created by
    pppol2tp_session_create() and hasn't been connected with
    pppol2tp_connect(). In this case, ps->sock is NULL, so we need to check
    for this case in order to avoid dereferencing a NULL pointer.
    
    Fixes: 309795f4bec2 ("l2tp: Add netlink control API for L2TP")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c00d860b1ec13caedd75b13a8fa6dbc4a0727402
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Oct 10 17:07:12 2017 +0200

    macsec: fix memory leaks when skb_to_sgvec fails
    
    
    [ Upstream commit 5aba2ba5030b66a6f8c93049b718556f9aacd7c6 ]
    
    Fixes: cda7ea690350 ("macsec: check return value of skb_to_sgvec always")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a74512a1739dfaee2397356451adf53b40798a94
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 10 19:12:33 2017 -0700

    net: call cgroup_sk_alloc() earlier in sk_clone_lock()
    
    
    [ Upstream commit c0576e3975084d4699b7bfef578613fb8e1144f6 ]
    
    If for some reason, the newly allocated child need to be freed,
    we will call cgroup_put() (via sk_free_unlock_clone()) while the
    corresponding cgroup_get() was not yet done, and we will free memory
    too soon.
    
    Fixes: d979a39d7242 ("cgroup: duplicate cgroup reference when cloning sockets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad1263b5ac01b65db6f9af996550be771dc9581f
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Oct 9 14:14:51 2017 +0200

    netlink: do not set cb_running if dump's start() errs
    
    
    [ Upstream commit 41c87425a1ac9b633e0fcc78eb1f19640c8fb5a0 ]
    
    It turns out that multiple places can call netlink_dump(), which means
    it's still possible to dereference partially initialized values in
    dump() that were the result of a faulty returned start().
    
    This fixes the issue by calling start() _before_ setting cb_running to
    true, so that there's no chance at all of hitting the dump() function
    through any indirect paths.
    
    It also moves the call to start() to be when the mutex is held. This has
    the nice side effect of serializing invocations to start(), which is
    likely desirable anyway. It also prevents any possible other races that
    might come out of this logic.
    
    In testing this with several different pieces of tricky code to trigger
    these issues, this commit fixes all avenues that I'm aware of.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Reviewed-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e7d97c9d60cf815dca22d4891c6982cd461cb84
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Mon Oct 9 08:39:43 2017 +0200

    ipv6: Fix traffic triggered IPsec connections.
    
    
    [ Upstream commit 62cf27e52b8c9a39066172ca6b6134cb5eaa9450 ]
    
    A recent patch removed the dst_free() on the allocated
    dst_entry in ipv6_blackhole_route(). The dst_free() marked
    the dst_entry as dead and added it to the gc list. I.e. it
    was setup for a one time usage. As a result we may now have
    a blackhole route cached at a socket on some IPsec scenarios.
    This makes the connection unusable.
    
    Fix this by marking the dst_entry directly at allocation time
    as 'dead', so it is used only once.
    
    Fixes: 587fea741134 ("ipv6: mark DST_NOGC and remove the operation of dst_free()")
    Reported-by: Tobias Brunner <tobias@strongswan.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dee46063c340b67b8272bf8c1ed21a4fae4afbe
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Mon Oct 9 08:43:55 2017 +0200

    ipv4: Fix traffic triggered IPsec connections.
    
    
    [ Upstream commit 6c0e7284d89995877740d8a26c3e99a937312a3c ]
    
    A recent patch removed the dst_free() on the allocated
    dst_entry in ipv4_blackhole_route(). The dst_free() marked the
    dst_entry as dead and added it to the gc list. I.e. it was setup
    for a one time usage. As a result we may now have a blackhole
    route cached at a socket on some IPsec scenarios. This makes the
    connection unusable.
    
    Fix this by marking the dst_entry directly at allocation time
    as 'dead', so it is used only once.
    
    Fixes: b838d5e1c5b6 ("ipv4: mark DST_NOGC and remove the operation of dst_free()")
    Reported-by: Tobias Brunner <tobias@strongswan.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11ea79dcd807033751ffb2806c03d21b3064aa54
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Fri Oct 6 19:02:35 2017 +0300

    gso: fix payload length when gso_size is zero
    
    
    [ Upstream commit 3d0241d57c7b25bb75ac9d7a62753642264fdbce ]
    
    When gso_size reset to zero for the tail segment in skb_segment(), later
    in ipv6_gso_segment(), __skb_udp_tunnel_segment() and gre_gso_segment()
    we will get incorrect results (payload length, pcsum) for that segment.
    inet_gso_segment() already has a check for gso_size before calculating
    payload.
    
    The issue was found with LTP vxlan & gre tests over ixgbe NIC.
    
    Fixes: 07b26c9454a2 ("gso: Support partial splitting at the frag_list pointer")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73df9233bfda94d30517ab423ca95696c72ff81b
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Oct 6 17:05:49 2017 +0200

    ppp: fix race in ppp device destruction
    
    
    [ Upstream commit 6151b8b37b119e8e3a8401b080d532520c95faf4 ]
    
    ppp_release() tries to ensure that netdevices are unregistered before
    decrementing the unit refcount and running ppp_destroy_interface().
    
    This is all fine as long as the the device is unregistered by
    ppp_release(): the unregister_netdevice() call, followed by
    rtnl_unlock(), guarantee that the unregistration process completes
    before rtnl_unlock() returns.
    
    However, the device may be unregistered by other means (like
    ppp_nl_dellink()). If this happens right before ppp_release() calling
    rtnl_lock(), then ppp_release() has to wait for the concurrent
    unregistration code to release the lock.
    But rtnl_unlock() releases the lock before completing the device
    unregistration process. This allows ppp_release() to proceed and
    eventually call ppp_destroy_interface() before the unregistration
    process completes. Calling free_netdev() on this partially unregistered
    device will BUG():
    
     ------------[ cut here ]------------
     kernel BUG at net/core/dev.c:8141!
     invalid opcode: 0000 [#1] SMP
    
     CPU: 1 PID: 1557 Comm: pppd Not tainted 4.14.0-rc2+ #4
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1.fc26 04/01/2014
    
     Call Trace:
      ppp_destroy_interface+0xd8/0xe0 [ppp_generic]
      ppp_disconnect_channel+0xda/0x110 [ppp_generic]
      ppp_unregister_channel+0x5e/0x110 [ppp_generic]
      pppox_unbind_sock+0x23/0x30 [pppox]
      pppoe_connect+0x130/0x440 [pppoe]
      SYSC_connect+0x98/0x110
      ? do_fcntl+0x2c0/0x5d0
      SyS_connect+0xe/0x10
      entry_SYSCALL_64_fastpath+0x1a/0xa5
    
     RIP: free_netdev+0x107/0x110 RSP: ffffc28a40573d88
     ---[ end trace ed294ff0cc40eeff ]---
    
    We could set the ->needs_free_netdev flag on PPP devices and move the
    ppp_destroy_interface() logic in the ->priv_destructor() callback. But
    that'd be quite intrusive as we'd first need to unlink from the other
    channels and units that depend on the device (the ones that used the
    PPPIOCCONNECT and PPPIOCATTACH ioctls).
    
    Instead, we can just let the netdevice hold a reference on its
    ppp_file. This reference is dropped in ->priv_destructor(), at the very
    end of the unregistration process, so that neither ppp_release() nor
    ppp_disconnect_channel() can call ppp_destroy_interface() in the interim.
    
    Reported-by: Beniamino Galvani <bgalvani@redhat.com>
    Fixes: 8cb775bc0a34 ("ppp: fix device unregistration upon netns deletion")
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
