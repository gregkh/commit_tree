commit 4f823316dac3de3463dfbea2be3812102a76e246
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 2 09:36:48 2017 +0100

    Linux 3.18.79

commit 5560a1cac11138fe3df5643c7819fd3c0d3755eb
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 9 12:51:27 2017 -0700

    ecryptfs: fix dereference of NULL user_key_payload
    
    commit f66665c09ab489a11ca490d6a82df57cfc1bea3e upstream.
    
    In eCryptfs, we failed to verify that the authentication token keys are
    not revoked before dereferencing their payloads, which is problematic
    because the payload of a revoked key is NULL.  request_key() *does* skip
    revoked keys, but there is still a window where the key can be revoked
    before we acquire the key semaphore.
    
    Fix it by updating ecryptfs_get_key_payload_data() to return
    -EKEYREVOKED if the key payload is NULL.  For completeness we check this
    for "encrypted" keys as well as "user" keys, although encrypted keys
    cannot be revoked currently.
    
    Alternatively we could use key_validate(), but since we'll also need to
    fix ecryptfs_get_key_payload_data() to validate the payload length, it
    seems appropriate to just check the payload pointer.
    
    Fixes: 237fead61998 ("[PATCH] ecryptfs: fs/Makefile and fs/Kconfig")
    Reviewed-by: James Morris <james.l.morris@oracle.com>
    Cc: Michael Halcrow <mhalcrow@google.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56621bc7d28c8023c020f0f38b5cf808f46ee5f9
Author: Jimmy Assarsson <jimmyassarsson@gmail.com>
Date:   Tue Oct 24 12:23:28 2017 +0200

    can: kvaser_usb: Correct return value in printout
    
    commit 8f65a923e6b628e187d5e791cf49393dd5e8c2f9 upstream.
    
    If the return value from kvaser_usb_send_simple_msg() was non-zero, the
    return value from kvaser_usb_flush_queue() was printed in the kernel
    warning.
    
    Signed-off-by: Jimmy Assarsson <jimmyassarsson@gmail.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7242605318a014abe6488de723fdadf7a6c2d7fe
Author: Ben Hutchings <ben.hutchings@codethink.co.uk>
Date:   Sun Oct 15 18:16:33 2017 +0100

    scsi: sg: Re-fix off by one in sg_fill_request_table()
    
    commit 587c3c9f286cee5c9cac38d28c8ae1875f4ec85b upstream.
    
    Commit 109bade9c625 ("scsi: sg: use standard lists for sg_requests")
    introduced an off-by-one error in sg_ioctl(), which was fixed by commit
    bd46fc406b30 ("scsi: sg: off by one in sg_ioctl()").
    
    Unfortunately commit 4759df905a47 ("scsi: sg: factor out
    sg_fill_request_table()") moved that code, and reintroduced the
    bug (perhaps due to a botched rebase).  Fix it again.
    
    Fixes: 4759df905a47 ("scsi: sg: factor out sg_fill_request_table()")
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16c847d66c10482a9290a886aa8556422027e916
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Fri Oct 13 15:40:07 2017 +0200

    scsi: zfcp: fix erp_action use-before-initialize in REC action trace
    
    commit ab31fd0ce65ec93828b617123792c1bb7c6dcc42 upstream.
    
    v4.10 commit 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN
    recovery") extended accessing parent pointer fields of struct
    zfcp_erp_action for tracing.  If an erp_action has never been enqueued
    before, these parent pointer fields are uninitialized and NULL. Examples
    are zfcp objects freshly added to the parent object's children list,
    before enqueueing their first recovery subsequently. In
    zfcp_erp_try_rport_unblock(), we iterate such list. Accessing erp_action
    fields can cause a NULL pointer dereference.  Since the kernel can read
    from lowcore on s390, it does not immediately cause a kernel page
    fault. Instead it can cause hangs on trying to acquire the wrong
    erp_action->adapter->dbf->rec_lock in zfcp_dbf_rec_action_lvl()
                          ^bogus^
    while holding already other locks with IRQs disabled.
    
    Real life example from attaching lots of LUNs in parallel on many CPUs:
    
    crash> bt 17723
    PID: 17723  TASK: ...               CPU: 25  COMMAND: "zfcperp0.0.1800"
     LOWCORE INFO:
      -psw      : 0x0404300180000000 0x000000000038e424
      -function : _raw_spin_lock_wait_flags at 38e424
    ...
     #0 [fdde8fc90] zfcp_dbf_rec_action_lvl at 3e0004e9862 [zfcp]
     #1 [fdde8fce8] zfcp_erp_try_rport_unblock at 3e0004dfddc [zfcp]
     #2 [fdde8fd38] zfcp_erp_strategy at 3e0004e0234 [zfcp]
     #3 [fdde8fda8] zfcp_erp_thread at 3e0004e0a12 [zfcp]
     #4 [fdde8fe60] kthread at 173550
     #5 [fdde8feb8] kernel_thread_starter at 10add2
    
    zfcp_adapter
     zfcp_port
      zfcp_unit <address>, 0x404040d600000000
      scsi_device NULL, returning early!
    zfcp_scsi_dev.status = 0x40000000
    0x40000000 ZFCP_STATUS_COMMON_RUNNING
    
    crash> zfcp_unit <address>
    struct zfcp_unit {
      erp_action = {
        adapter = 0x0,
        port = 0x0,
        unit = 0x0,
      },
    }
    
    zfcp_erp_action is always fully embedded into its container object. Such
    container object is never moved in its object tree (only add or delete).
    Hence, erp_action parent pointers can never change.
    
    To fix the issue, initialize the erp_action parent pointers before
    adding the erp_action container to any list and thus before it becomes
    accessible from outside of its initializing function.
    
    In order to also close the time window between zfcp_erp_setup_act()
    memsetting the entire erp_action to zero and setting the parent pointers
    again, drop the memset and instead explicitly initialize individually
    all erp_action fields except for parent pointers. To be extra careful
    not to introduce any other unintended side effect, even keep zeroing the
    erp_action fields for list and timer. Also double-check with
    WARN_ON_ONCE that erp_action parent pointers never change, so we get to
    know when we would deviate from previous behavior.
    
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: 6f2ce1c6af37 ("scsi: zfcp: fix rport unblock race with LUN recovery")
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38dc93fa84026ef8711827fb7063744e7197b887
Author: David Howells <dhowells@redhat.com>
Date:   Wed Oct 11 23:32:27 2017 +0100

    assoc_array: Fix a buggy node-splitting case
    
    commit ea6789980fdaa610d7eb63602c746bf6ec70cd2b upstream.
    
    This fixes CVE-2017-12193.
    
    Fix a case in the assoc_array implementation in which a new leaf is
    added that needs to go into a node that happens to be full, where the
    existing leaves in that node cluster together at that level to the
    exclusion of new leaf.
    
    What needs to happen is that the existing leaves get moved out to a new
    node, N1, at level + 1 and the existing node needs replacing with one,
    N0, that has pointers to the new leaf and to N1.
    
    The code that tries to do this gets this wrong in two ways:
    
     (1) The pointer that should've pointed from N0 to N1 is set to point
         recursively to N0 instead.
    
     (2) The backpointer from N0 needs to be set correctly in the case N0 is
         either the root node or reached through a shortcut.
    
    Fix this by removing this path and using the split_node path instead,
    which achieves the same end, but in a more general way (thanks to Eric
    Biggers for spotting the redundancy).
    
    The problem manifests itself as:
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000010
      IP: assoc_array_apply_edit+0x59/0xe5
    
    Fixes: 3cb989501c26 ("Add a generic associative array implementation.")
    Reported-and-tested-by: WU Fan <u3536072@connect.hku.hk>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c73743447f244eb0e7422a285dc907283d3630e
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Oct 23 16:46:00 2017 -0700

    Input: gtco - fix potential out-of-bound access
    
    commit a50829479f58416a013a4ccca791336af3c584c7 upstream.
    
    parse_hid_report_descriptor() has a while (i < length) loop, which
    only guarantees that there's at least 1 byte in the buffer, but the
    loop body can read multiple bytes which causes out-of-bounds access.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Reviewed-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7be20b0175f4d148a06224df0324b5810aadb99
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Oct 25 16:34:27 2017 +0200

    fuse: fix READDIRPLUS skipping an entry
    
    commit c6cdd51404b7ac12dd95173ddfc548c59ecf037f upstream.
    
    Marios Titas running a Haskell program noticed a problem with fuse's
    readdirplus: when it is interrupted by a signal, it skips one directory
    entry.
    
    The reason is that fuse erronously updates ctx->pos after a failed
    dir_emit().
    
    The issue originates from the patch adding readdirplus support.
    
    Reported-by: Jakob Unterwurzacher <jakobunt@gmail.com>
    Tested-by: Marios Titas <redneb@gmx.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 0b05b18381ee ("fuse: implement NFS-like readdirplus support")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 458a78ab7eb1ca036984ab7323a92dca87e73cec
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Sun Sep 10 20:29:45 2017 +0300

    spi: uapi: spidev: add missing ioctl header
    
    commit a2b4a79b88b24c49d98d45a06a014ffd22ada1a4 upstream.
    
    The SPI_IOC_MESSAGE() macro references _IOC_SIZEBITS. Add linux/ioctl.h
    to make sure this macro is defined. This fixes the following build
    failure of lcdproc with the musl libc:
    
    In file included from .../sysroot/usr/include/sys/ioctl.h:7:0,
                     from hd44780-spi.c:31:
    hd44780-spi.c: In function 'spi_transfer':
    hd44780-spi.c:89:24: error: '_IOC_SIZEBITS' undeclared (first use in this function)
      status = ioctl(p->fd, SPI_IOC_MESSAGE(1), &xfer);
                            ^
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaa7d1a5d9f1293b13e378a0e0606b9f1487a355
Author: Mayank Rana <mrana@codeaurora.org>
Date:   Fri Oct 6 17:45:30 2017 +0300

    usb: xhci: Handle error condition in xhci_stop_device()
    
    commit b3207c65dfafae27e7c492cb9188c0dc0eeaf3fd upstream.
    
    xhci_stop_device() calls xhci_queue_stop_endpoint() multiple times
    without checking the return value. xhci_queue_stop_endpoint() can
    return error if the HC is already halted or unable to queue commands.
    This can cause a deadlock condition as xhci_stop_device() would
    end up waiting indefinitely for a completion for the command that
    didn't get queued. Fix this by checking the return value and bailing
    out of xhci_stop_device() in case of error. This patch happens to fix
    potential memory leaks of the allocated command structures as well.
    
    Fixes: c311e391a7ef ("xhci: rework command timeout and cancellation,")
    Signed-off-by: Mayank Rana <mrana@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55d4aa12af57ea7782f0c8bbc3b01e44673b05ba
Author: Jeff Layton <jlayton@kernel.org>
Date:   Thu Oct 19 08:52:58 2017 -0400

    ceph: unlock dangling spinlock in try_flush_caps()
    
    commit 6c2838fbdedb9b72a81c931d49e56b229b6cdbca upstream.
    
    sparse warns:
    
      fs/ceph/caps.c:2042:9: warning: context imbalance in 'try_flush_caps' - wrong count at exit
    
    We need to exit this function with the lock unlocked, but a couple of
    cases leave it locked.
    
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
