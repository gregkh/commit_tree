commit 357668399cf70ccdc0ee8967bff3448d0f4f9ae1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Feb 11 04:34:19 2020 -0800

    Linux 4.19.103

commit 06748661c7dba8d8ab89ee3305e21c63218a734f
Author: David Howells <dhowells@redhat.com>
Date:   Thu Feb 6 13:55:01 2020 +0000

    rxrpc: Fix service call disconnection
    
    [ Upstream commit b39a934ec72fa2b5a74123891f25273a38378b90 ]
    
    The recent patch that substituted a flag on an rxrpc_call for the
    connection pointer being NULL as an indication that a call was disconnected
    puts the set_bit in the wrong place for service calls.  This is only a
    problem if a call is implicitly terminated by a new call coming in on the
    same connection channel instead of a terminating ACK packet.
    
    In such a case, rxrpc_input_implicit_end_call() calls
    __rxrpc_disconnect_call(), which is now (incorrectly) setting the
    disconnection bit, meaning that when rxrpc_release_call() is later called,
    it doesn't call rxrpc_disconnect_call() and so the call isn't removed from
    the peer's error distribution list and the list gets corrupted.
    
    KASAN finds the issue as an access after release on a call, but the
    position at which it occurs is confusing as it appears to be related to a
    different call (the call site is where the latter call is being removed
    from the error distribution list and either the next or pprev pointer
    points to a previously released call).
    
    Fix this by moving the setting of the flag from __rxrpc_disconnect_call()
    to rxrpc_disconnect_call() in the same place that the connection pointer
    was being cleared.
    
    Fixes: 5273a191dca6 ("rxrpc: Fix NULL pointer deref due to call->conn being cleared on disconnect")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3623db43a3c06538591370db955d85b80657e17
Author: Song Liu <songliubraving@fb.com>
Date:   Thu Jan 23 10:11:46 2020 -0800

    perf/core: Fix mlock accounting in perf_mmap()
    
    commit 003461559ef7a9bd0239bae35a22ad8924d6e9ad upstream.
    
    Decreasing sysctl_perf_event_mlock between two consecutive perf_mmap()s of
    a perf ring buffer may lead to an integer underflow in locked memory
    accounting. This may lead to the undesired behaviors, such as failures in
    BPF map creation.
    
    Address this by adjusting the accounting logic to take into account the
    possibility that the amount of already locked memory may exceed the
    current limit.
    
    Fixes: c4b75479741c ("perf/core: Make the mlock accounting simple again")
    Suggested-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: <stable@vger.kernel.org>
    Acked-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Link: https://lkml.kernel.org/r/20200123181146.2238074-1-songliubraving@fb.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6284d30e96ede11d9d434eebfacbe4b4625b6c87
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 032a2bf9787acdaef31369045ff0cb0b301eee61
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jan 31 15:26:52 2020 +0100

    x86/apic/msi: Plug non-maskable MSI affinity race
    
    commit 6f1a4891a5928a5969c87fa5a584844c983ec823 upstream.
    
    Evan tracked down a subtle race between the update of the MSI message and
    the device raising an interrupt internally on PCI devices which do not
    support MSI masking. The update of the MSI message is non-atomic and
    consists of either 2 or 3 sequential 32bit wide writes to the PCI config
    space.
    
       - Write address low 32bits
       - Write address high 32bits (If supported by device)
       - Write data
    
    When an interrupt is migrated then both address and data might change, so
    the kernel attempts to mask the MSI interrupt first. But for MSI masking is
    optional, so there exist devices which do not provide it. That means that
    if the device raises an interrupt internally between the writes then a MSI
    message is sent built from half updated state.
    
    On x86 this can lead to spurious interrupts on the wrong interrupt
    vector when the affinity setting changes both address and data. As a
    consequence the device interrupt can be lost causing the device to
    become stuck or malfunctioning.
    
    Evan tried to handle that by disabling MSI accross an MSI message
    update. That's not feasible because disabling MSI has issues on its own:
    
     If MSI is disabled the PCI device is routing an interrupt to the legacy
     INTx mechanism. The INTx delivery can be disabled, but the disablement is
     not working on all devices.
    
     Some devices lose interrupts when both MSI and INTx delivery are disabled.
    
    Another way to solve this would be to enforce the allocation of the same
    vector on all CPUs in the system for this kind of screwed devices. That
    could be done, but it would bring back the vector space exhaustion problems
    which got solved a few years ago.
    
    Fortunately the high address (if supported by the device) is only relevant
    when X2APIC is enabled which implies interrupt remapping. In the interrupt
    remapping case the affinity setting is happening at the interrupt remapping
    unit and the PCI MSI message is programmed only once when the PCI device is
    initialized.
    
    That makes it possible to solve it with a two step update:
    
      1) Target the MSI msg to the new vector on the current target CPU
    
      2) Target the MSI msg to the new vector on the new target CPU
    
    In both cases writing the MSI message is only changing a single 32bit word
    which prevents the issue of inconsistency.
    
    After writing the final destination it is necessary to check whether the
    device issued an interrupt while the intermediate state #1 (new vector,
    current CPU) was in effect.
    
    This is possible because the affinity change is always happening on the
    current target CPU. The code runs with interrupts disabled, so the
    interrupt can be detected by checking the IRR of the local APIC. If the
    vector is pending in the IRR then the interrupt is retriggered on the new
    target CPU by sending an IPI for the associated vector on the target CPU.
    
    This can cause spurious interrupts on both the local and the new target
    CPU.
    
     1) If the new vector is not in use on the local CPU and the device
        affected by the affinity change raised an interrupt during the
        transitional state (step #1 above) then interrupt entry code will
        ignore that spurious interrupt. The vector is marked so that the
        'No irq handler for vector' warning is supressed once.
    
     2) If the new vector is in use already on the local CPU then the IRR check
        might see an pending interrupt from the device which is using this
        vector. The IPI to the new target CPU will then invoke the handler of
        the device, which got the affinity change, even if that device did not
        issue an interrupt
    
     3) If the new vector is in use already on the local CPU and the device
        affected by the affinity change raised an interrupt during the
        transitional state (step #1 above) then the handler of the device which
        uses that vector on the local CPU will be invoked.
    
    expose issues in device driver interrupt handlers which are not prepared to
    handle a spurious interrupt correctly. This not a regression, it's just
    exposing something which was already broken as spurious interrupts can
    happen for a lot of reasons and all driver handlers need to be able to deal
    with them.
    
    Reported-by: Evan Green <evgreen@chromium.org>
    Debugged-by: Evan Green <evgreen@chromium.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Evan Green <evgreen@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87imkr4s7n.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71a47ed651c0077242f33c7de56a84c35a80becf
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Feb 5 11:08:01 2020 +1000

    cifs: fail i/o on soft mounts if sessionsetup errors out
    
    commit b0dd940e582b6a60296b9847a54012a4b080dc72 upstream.
    
    RHBZ: 1579050
    
    If we have a soft mount we should fail commands for session-setup
    failures (such as the password having changed/ account being deleted/ ...)
    and return an error back to the application.
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a69047d8235c60d88c6ca488d8dccc7c60d4d3c
Author: David Hildenbrand <david@redhat.com>
Date:   Mon Feb 3 17:33:48 2020 -0800

    mm/page_alloc.c: fix uninitialized memmaps on a partially populated last section
    
    [ Upstream commit e822969cab48b786b64246aad1a3ba2a774f5d23 ]
    
    Patch series "mm: fix max_pfn not falling on section boundary", v2.
    
    Playing with different memory sizes for a x86-64 guest, I discovered that
    some memmaps (highest section if max_mem does not fall on the section
    boundary) are marked as being valid and online, but contain garbage.  We
    have to properly initialize these memmaps.
    
    Looking at /proc/kpageflags and friends, I found some more issues,
    partially related to this.
    
    This patch (of 3):
    
    If max_pfn is not aligned to a section boundary, we can easily run into
    BUGs.  This can e.g., be triggered on x86-64 under QEMU by specifying a
    memory size that is not a multiple of 128MB (e.g., 4097MB, but also
    4160MB).  I was told that on real HW, we can easily have this scenario
    (esp., one of the main reasons sub-section hotadd of devmem was added).
    
    The issue is, that we have a valid memmap (pfn_valid()) for the whole
    section, and the whole section will be marked "online".
    pfn_to_online_page() will succeed, but the memmap contains garbage.
    
    E.g., doing a "./page-types -r -a 0x144001" when QEMU was started with "-m
    4160M" - (see tools/vm/page-types.c):
    
    [  200.476376] BUG: unable to handle page fault for address: fffffffffffffffe
    [  200.477500] #PF: supervisor read access in kernel mode
    [  200.478334] #PF: error_code(0x0000) - not-present page
    [  200.479076] PGD 59614067 P4D 59614067 PUD 59616067 PMD 0
    [  200.479557] Oops: 0000 [#4] SMP NOPTI
    [  200.479875] CPU: 0 PID: 603 Comm: page-types Tainted: G      D W         5.5.0-rc1-next-20191209 #93
    [  200.480646] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu4
    [  200.481648] RIP: 0010:stable_page_flags+0x4d/0x410
    [  200.482061] Code: f3 ff 41 89 c0 48 b8 00 00 00 00 01 00 00 00 45 84 c0 0f 85 cd 02 00 00 48 8b 53 08 48 8b 2b 48f
    [  200.483644] RSP: 0018:ffffb139401cbe60 EFLAGS: 00010202
    [  200.484091] RAX: fffffffffffffffe RBX: fffffbeec5100040 RCX: 0000000000000000
    [  200.484697] RDX: 0000000000000001 RSI: ffffffff9535c7cd RDI: 0000000000000246
    [  200.485313] RBP: ffffffffffffffff R08: 0000000000000000 R09: 0000000000000000
    [  200.485917] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000144001
    [  200.486523] R13: 00007ffd6ba55f48 R14: 00007ffd6ba55f40 R15: ffffb139401cbf08
    [  200.487130] FS:  00007f68df717580(0000) GS:ffff9ec77fa00000(0000) knlGS:0000000000000000
    [  200.487804] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  200.488295] CR2: fffffffffffffffe CR3: 0000000135d48000 CR4: 00000000000006f0
    [  200.488897] Call Trace:
    [  200.489115]  kpageflags_read+0xe9/0x140
    [  200.489447]  proc_reg_read+0x3c/0x60
    [  200.489755]  vfs_read+0xc2/0x170
    [  200.490037]  ksys_pread64+0x65/0xa0
    [  200.490352]  do_syscall_64+0x5c/0xa0
    [  200.490665]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    But it can be triggered much easier via "cat /proc/kpageflags > /dev/null"
    after cold/hot plugging a DIMM to such a system:
    
    [root@localhost ~]# cat /proc/kpageflags > /dev/null
    [  111.517275] BUG: unable to handle page fault for address: fffffffffffffffe
    [  111.517907] #PF: supervisor read access in kernel mode
    [  111.518333] #PF: error_code(0x0000) - not-present page
    [  111.518771] PGD a240e067 P4D a240e067 PUD a2410067 PMD 0
    
    This patch fixes that by at least zero-ing out that memmap (so e.g.,
    page_to_pfn() will not crash).  Commit 907ec5fca3dc ("mm: zero remaining
    unavailable struct pages") tried to fix a similar issue, but forgot to
    consider this special case.
    
    After this patch, there are still problems to solve.  E.g., not all of
    these pages falling into a memory hole will actually get initialized later
    and set PageReserved - they are only zeroed out - but at least the
    immediate crashes are gone.  A follow-up patch will take care of this.
    
    Link: http://lkml.kernel.org/r/20191211163201.17179-2-david@redhat.com
    Fixes: f7f99100d8d9 ("mm: stop zeroing memory during allocation in vmemmap")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Tested-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Pavel Tatashin <pasha.tatashin@oracle.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Steven Sistare <steven.sistare@oracle.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Bob Picco <bob.picco@oracle.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: <stable@vger.kernel.org>    [4.15+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f19a50c1e3ba9f58ca5a591a82ac4852da8bc4ee
Author: Pavel Tatashin <pavel.tatashin@microsoft.com>
Date:   Fri Oct 26 15:10:21 2018 -0700

    mm: return zero_resv_unavail optimization
    
    [ Upstream commit ec393a0f014eaf688a3dbe8c8a4cbb52d7f535f9 ]
    
    When checking for valid pfns in zero_resv_unavail(), it is not necessary
    to verify that pfns within pageblock_nr_pages ranges are valid, only the
    first one needs to be checked.  This is because memory for pages are
    allocated in contiguous chunks that contain pageblock_nr_pages struct
    pages.
    
    Link: http://lkml.kernel.org/r/20181002143821.5112-3-msys.mizuma@gmail.com
    Signed-off-by: Pavel Tatashin <pavel.tatashin@microsoft.com>
    Signed-off-by: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Reviewed-by: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Acked-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ac5917a1d28220981512c4f4c391c90a997e0c6
Author: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Date:   Fri Oct 26 15:10:15 2018 -0700

    mm: zero remaining unavailable struct pages
    
    [ Upstream commit 907ec5fca3dc38d37737de826f06f25b063aa08e ]
    
    Patch series "mm: Fix for movable_node boot option", v3.
    
    This patch series contains a fix for the movable_node boot option issue
    which was introduced by commit 124049decbb1 ("x86/e820: put !E820_TYPE_RAM
    regions into memblock.reserved").
    
    The commit breaks the option because it changed the memory gap range to
    reserved memblock.  So, the node is marked as Normal zone even if the SRAT
    has Hot pluggable affinity.
    
    First and second patch fix the original issue which the commit tried to
    fix, then revert the commit.
    
    This patch (of 3):
    
    There is a kernel panic that is triggered when reading /proc/kpageflags on
    the kernel booted with kernel parameter 'memmap=nn[KMG]!ss[KMG]':
    
      BUG: unable to handle kernel paging request at fffffffffffffffe
      PGD 9b20e067 P4D 9b20e067 PUD 9b210067 PMD 0
      Oops: 0000 [#1] SMP PTI
      CPU: 2 PID: 1728 Comm: page-types Not tainted 4.17.0-rc6-mm1-v4.17-rc6-180605-0816-00236-g2dfb086ef02c+ #160
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.fc28 04/01/2014
      RIP: 0010:stable_page_flags+0x27/0x3c0
      Code: 00 00 00 0f 1f 44 00 00 48 85 ff 0f 84 a0 03 00 00 41 54 55 49 89 fc 53 48 8b 57 08 48 8b 2f 48 8d 42 ff 83 e2 01 48 0f 44 c7 <48> 8b 00 f6 c4 01 0f 84 10 03 00 00 31 db 49 8b 54 24 08 4c 89 e7
      RSP: 0018:ffffbbd44111fde0 EFLAGS: 00010202
      RAX: fffffffffffffffe RBX: 00007fffffffeff9 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: 0000000000000202 RDI: ffffed1182fff5c0
      RBP: ffffffffffffffff R08: 0000000000000001 R09: 0000000000000001
      R10: ffffbbd44111fed8 R11: 0000000000000000 R12: ffffed1182fff5c0
      R13: 00000000000bffd7 R14: 0000000002fff5c0 R15: ffffbbd44111ff10
      FS:  00007efc4335a500(0000) GS:ffff93a5bfc00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: fffffffffffffffe CR3: 00000000b2a58000 CR4: 00000000001406e0
      Call Trace:
       kpageflags_read+0xc7/0x120
       proc_reg_read+0x3c/0x60
       __vfs_read+0x36/0x170
       vfs_read+0x89/0x130
       ksys_pread64+0x71/0x90
       do_syscall_64+0x5b/0x160
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7efc42e75e23
      Code: 09 00 ba 9f 01 00 00 e8 ab 81 f4 ff 66 2e 0f 1f 84 00 00 00 00 00 90 83 3d 29 0a 2d 00 00 75 13 49 89 ca b8 11 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 34 c3 48 83 ec 08 e8 db d3 01 00 48 89 04 24
    
    According to kernel bisection, this problem became visible due to commit
    f7f99100d8d9 which changes how struct pages are initialized.
    
    Memblock layout affects the pfn ranges covered by node/zone.  Consider
    that we have a VM with 2 NUMA nodes and each node has 4GB memory, and the
    default (no memmap= given) memblock layout is like below:
    
      MEMBLOCK configuration:
       memory size = 0x00000001fff75c00 reserved size = 0x000000000300c000
       memory.cnt  = 0x4
       memory[0x0]     [0x0000000000001000-0x000000000009efff], 0x000000000009e000 bytes on node 0 flags: 0x0
       memory[0x1]     [0x0000000000100000-0x00000000bffd6fff], 0x00000000bfed7000 bytes on node 0 flags: 0x0
       memory[0x2]     [0x0000000100000000-0x000000013fffffff], 0x0000000040000000 bytes on node 0 flags: 0x0
       memory[0x3]     [0x0000000140000000-0x000000023fffffff], 0x0000000100000000 bytes on node 1 flags: 0x0
       ...
    
    If you give memmap=1G!4G (so it just covers memory[0x2]),
    the range [0x100000000-0x13fffffff] is gone:
    
      MEMBLOCK configuration:
       memory size = 0x00000001bff75c00 reserved size = 0x000000000300c000
       memory.cnt  = 0x3
       memory[0x0]     [0x0000000000001000-0x000000000009efff], 0x000000000009e000 bytes on node 0 flags: 0x0
       memory[0x1]     [0x0000000000100000-0x00000000bffd6fff], 0x00000000bfed7000 bytes on node 0 flags: 0x0
       memory[0x2]     [0x0000000140000000-0x000000023fffffff], 0x0000000100000000 bytes on node 1 flags: 0x0
       ...
    
    This causes shrinking node 0's pfn range because it is calculated by the
    address range of memblock.memory.  So some of struct pages in the gap
    range are left uninitialized.
    
    We have a function zero_resv_unavail() which does zeroing the struct pages
    outside memblock.memory, but currently it covers only the reserved
    unavailable range (i.e.  memblock.memory && !memblock.reserved).  This
    patch extends it to cover all unavailable range, which fixes the reported
    issue.
    
    Link: http://lkml.kernel.org/r/20181002143821.5112-2-msys.mizuma@gmail.com
    Fixes: f7f99100d8d9 ("mm: stop zeroing memory during allocation in vmemmap")
    Signed-off-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Signed-off-by-by: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Tested-by: Oscar Salvador <osalvador@suse.de>
    Tested-by: Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>
    Reviewed-by: Pavel Tatashin <pavel.tatashin@microsoft.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21b70d9bc16e2d8377b61eb7913c047318a5a9be
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 8 12:24:38 2020 -0800

    KVM: Play nice with read-only memslots when querying host page size
    
    [ Upstream commit 42cde48b2d39772dba47e680781a32a6c4b7dc33 ]
    
    Avoid the "writable" check in __gfn_to_hva_many(), which will always fail
    on read-only memslots due to gfn_to_hva() assuming writes.  Functionally,
    this allows x86 to create large mappings for read-only memslots that
    are backed by HugeTLB mappings.
    
    Note, the changelog for commit 05da45583de9 ("KVM: MMU: large page
    support") states "If the largepage contains write-protected pages, a
    large pte is not used.", but "write-protected" refers to pages that are
    temporarily read-only, e.g. read-only memslots didn't even exist at the
    time.
    
    Fixes: 4d8b81abc47b ("KVM: introduce readonly memslot")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    [Redone using kvm_vcpu_gfn_to_memslot_prot. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dabf1a1096b2cb7c54eecbaee19367cae2aef0e3
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 8 12:24:37 2020 -0800

    KVM: Use vcpu-specific gva->hva translation when querying host page size
    
    [ Upstream commit f9b84e19221efc5f493156ee0329df3142085f28 ]
    
    Use kvm_vcpu_gfn_to_hva() when retrieving the host page size so that the
    correct set of memslots is used when handling x86 page faults in SMM.
    
    Fixes: 54bf36aac520 ("KVM: x86: use vcpu-specific functions to read/write/translate GFNs")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb2c9541bc2f155f873aefce70a51e34f9cbdd03
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Sat Dec 28 14:25:24 2019 +0800

    KVM: nVMX: vmread should not set rflags to specify success in case of #PF
    
    [ Upstream commit a4d956b9390418623ae5d07933e2679c68b6f83c ]
    
    In case writing to vmread destination operand result in a #PF, vmread
    should not call nested_vmx_succeed() to set rflags to specify success.
    Similar to as done in VMPTRST (See handle_vmptrst()).
    
    Reviewed-by: Liran Alon <liran.alon@oracle.com>
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57211b7366cc2abf784c35e537b256e7fcddc91e
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Dec 10 15:24:32 2019 -0800

    KVM: VMX: Add non-canonical check on writes to RTIT address MSRs
    
    [ Upstream commit fe6ed369fca98e99df55c932b85782a5687526b5 ]
    
    Reject writes to RTIT address MSRs if the data being written is a
    non-canonical address as the MSRs are subject to canonical checks, e.g.
    KVM will trigger an unchecked #GP when loading the values to hardware
    during pt_guest_enter().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b376cb650b457a8db88539c815947134bde100d
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Dec 6 15:57:14 2019 -0800

    KVM: x86: Use gpa_t for cr2/gpa to fix TDP support on 32-bit KVM
    
    [ Upstream commit 736c291c9f36b07f8889c61764c28edce20e715d ]
    
    Convert a plethora of parameters and variables in the MMU and page fault
    flows from type gva_t to gpa_t to properly handle TDP on 32-bit KVM.
    
    Thanks to PSE and PAE paging, 32-bit kernels can access 64-bit physical
    addresses.  When TDP is enabled, the fault address is a guest physical
    address and thus can be a 64-bit value, even when both KVM and its guest
    are using 32-bit virtual addressing, e.g. VMX's VMCS.GUEST_PHYSICAL is a
    64-bit field, not a natural width field.
    
    Using a gva_t for the fault address means KVM will incorrectly drop the
    upper 32-bits of the GPA.  Ditto for gva_to_gpa() when it is used to
    translate L2 GPAs to L1 GPAs.
    
    Opportunistically rename variables and parameters to better reflect the
    dual address modes, e.g. use "cr2_or_gpa" for fault addresses and plain
    "addr" instead of "vaddr" when the address may be either a GVA or an L2
    GPA.  Similarly, use "gpa" in the nonpaging_page_fault() flows to avoid
    a confusing "gpa_t gva" declaration; this also sets the stage for a
    future patch to combing nonpaging_page_fault() and tdp_page_fault() with
    minimal churn.
    
    Sprinkle in a few comments to document flows where an address is known
    to be a GVA and thus can be safely truncated to a 32-bit value.  Add
    WARNs in kvm_handle_page_fault() and FNAME(gva_to_gpa_nested)() to help
    document such cases and detect bugs.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2e29d0fe600a18f54ea22d69b3733f52fc6c59c
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Jan 7 16:12:10 2020 -0800

    KVM: x86/mmu: Apply max PA check for MMIO sptes to 32-bit KVM
    
    [ Upstream commit e30a7d623dccdb3f880fbcad980b0cb589a1da45 ]
    
    Remove the bogus 64-bit only condition from the check that disables MMIO
    spte optimization when the system supports the max PA, i.e. doesn't have
    any reserved PA bits.  32-bit KVM always uses PAE paging for the shadow
    MMU, and per Intel's SDM:
    
      PAE paging translates 32-bit linear addresses to 52-bit physical
      addresses.
    
    The kernel's restrictions on max physical addresses are limits on how
    much memory the kernel can reasonably use, not what physical addresses
    are supported by hardware.
    
    Fixes: ce88decffd17 ("KVM: MMU: mmio page fault support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 860473714cbe7fbedcf92bfe3eb6d69fae8c74ff
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Jan 23 15:33:02 2020 -0500

    btrfs: flush write bio if we loop in extent_write_cache_pages
    
    [ Upstream commit 96bf313ecb33567af4cb53928b0c951254a02759 ]
    
    There exists a deadlock with range_cyclic that has existed forever.  If
    we loop around with a bio already built we could deadlock with a writer
    who has the page locked that we're attempting to write but is waiting on
    a page in our bio to be written out.  The task traces are as follows
    
      PID: 1329874  TASK: ffff889ebcdf3800  CPU: 33  COMMAND: "kworker/u113:5"
       #0 [ffffc900297bb658] __schedule at ffffffff81a4c33f
       #1 [ffffc900297bb6e0] schedule at ffffffff81a4c6e3
       #2 [ffffc900297bb6f8] io_schedule at ffffffff81a4ca42
       #3 [ffffc900297bb708] __lock_page at ffffffff811f145b
       #4 [ffffc900297bb798] __process_pages_contig at ffffffff814bc502
       #5 [ffffc900297bb8c8] lock_delalloc_pages at ffffffff814bc684
       #6 [ffffc900297bb900] find_lock_delalloc_range at ffffffff814be9ff
       #7 [ffffc900297bb9a0] writepage_delalloc at ffffffff814bebd0
       #8 [ffffc900297bba18] __extent_writepage at ffffffff814bfbf2
       #9 [ffffc900297bba98] extent_write_cache_pages at ffffffff814bffbd
    
      PID: 2167901  TASK: ffff889dc6a59c00  CPU: 14  COMMAND:
      "aio-dio-invalid"
       #0 [ffffc9003b50bb18] __schedule at ffffffff81a4c33f
       #1 [ffffc9003b50bba0] schedule at ffffffff81a4c6e3
       #2 [ffffc9003b50bbb8] io_schedule at ffffffff81a4ca42
       #3 [ffffc9003b50bbc8] wait_on_page_bit at ffffffff811f24d6
       #4 [ffffc9003b50bc60] prepare_pages at ffffffff814b05a7
       #5 [ffffc9003b50bcd8] btrfs_buffered_write at ffffffff814b1359
       #6 [ffffc9003b50bdb0] btrfs_file_write_iter at ffffffff814b5933
       #7 [ffffc9003b50be38] new_sync_write at ffffffff8128f6a8
       #8 [ffffc9003b50bec8] vfs_write at ffffffff81292b9d
       #9 [ffffc9003b50bf00] ksys_pwrite64 at ffffffff81293032
    
    I used drgn to find the respective pages we were stuck on
    
    page_entry.page 0xffffea00fbfc7500 index 8148 bit 15 pid 2167901
    page_entry.page 0xffffea00f9bb7400 index 7680 bit 0 pid 1329874
    
    As you can see the kworker is waiting for bit 0 (PG_locked) on index
    7680, and aio-dio-invalid is waiting for bit 15 (PG_writeback) on index
    8148.  aio-dio-invalid has 7680, and the kworker epd looks like the
    following
    
      crash> struct extent_page_data ffffc900297bbbb0
      struct extent_page_data {
        bio = 0xffff889f747ed830,
        tree = 0xffff889eed6ba448,
        extent_locked = 0,
        sync_io = 0
      }
    
    Probably worth mentioning as well that it waits for writeback of the
    page to complete while holding a lock on it (at prepare_pages()).
    
    Using drgn I walked the bio pages looking for page
    0xffffea00fbfc7500 which is the one we're waiting for writeback on
    
      bio = Object(prog, 'struct bio', address=0xffff889f747ed830)
      for i in range(0, bio.bi_vcnt.value_()):
          bv = bio.bi_io_vec[i]
          if bv.bv_page.value_() == 0xffffea00fbfc7500:
              print("FOUND IT")
    
    which validated what I suspected.
    
    The fix for this is simple, flush the epd before we loop back around to
    the beginning of the file during writeout.
    
    Fixes: b293f02e1423 ("Btrfs: Add writepages support")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ecba33ec87e2fbc604c74a52cc5b763a4d91639
Author: Wayne Lin <Wayne.Lin@amd.com>
Date:   Thu Dec 5 17:00:43 2019 +0800

    drm/dp_mst: Remove VCPI while disabling topology mgr
    
    [ Upstream commit 64e62bdf04ab8529f45ed0a85122c703035dec3a ]
    
    [Why]
    
    This patch is trying to address the issue observed when hotplug DP
    daisy chain monitors.
    
    e.g.
    src-mstb-mstb-sst -> src (unplug) mstb-mstb-sst -> src-mstb-mstb-sst
    (plug in again)
    
    Once unplug a DP MST capable device, driver will call
    drm_dp_mst_topology_mgr_set_mst() to disable MST. In this function,
    it cleans data of topology manager while disabling mst_state. However,
    it doesn't clean up the proposed_vcpis of topology manager.
    If proposed_vcpi is not reset, once plug in MST daisy chain monitors
    later, code will fail at checking port validation while trying to
    allocate payloads.
    
    When MST capable device is plugged in again and try to allocate
    payloads by calling drm_dp_update_payload_part1(), this
    function will iterate over all proposed virtual channels to see if
    any proposed VCPI's num_slots is greater than 0. If any proposed
    VCPI's num_slots is greater than 0 and the port which the
    specific virtual channel directed to is not in the topology, code then
    fails at the port validation. Since there are stale VCPI allocations
    from the previous topology enablement in proposed_vcpi[], code will fail
    at port validation and reurn EINVAL.
    
    [How]
    
    Clean up the data of stale proposed_vcpi[] and reset mgr->proposed_vcpis
    to NULL while disabling mst in drm_dp_mst_topology_mgr_set_mst().
    
    Changes since v1:
    *Add on more details in commit message to describe the issue which the
    patch is trying to fix
    
    Signed-off-by: Wayne Lin <Wayne.Lin@amd.com>
    [added cc to stable]
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191205090043.7580-1-Wayne.Lin@amd.com
    Cc: <stable@vger.kernel.org> # v3.17+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f1611dc1fc0cf34b64e1d223a52e061cbf2a891
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Dec 18 14:28:25 2019 +0200

    drm: atmel-hlcdc: enable clock before configuring timing engine
    
    [ Upstream commit 2c1fb9d86f6820abbfaa38a6836157c76ccb4e7b ]
    
    Changing pixel clock source without having this clock source enabled
    will block the timing engine and the next operations after (in this case
    setting ATMEL_HLCDC_CFG(5) settings in atmel_hlcdc_crtc_mode_set_nofb()
    will fail). It is recomended (although in datasheet this is not present)
    to actually enabled pixel clock source before doing any changes on timing
    enginge (only SAM9X60 datasheet specifies that the peripheral clock and
    pixel clock must be enabled before using LCD controller).
    
    Fixes: 1a396789f65a ("drm: add Atmel HLCDC Display Controller support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Cc: Boris Brezillon <boris.brezillon@free-electrons.com>
    Cc: <stable@vger.kernel.org> # v4.0+
    Link: https://patchwork.freedesktop.org/patch/msgid/1576672109-22707-3-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 159db2ae36d617497aab08efe7e0d9edea23cc77
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Jan 21 09:17:06 2020 -0500

    btrfs: free block groups after free'ing fs trees
    
    [ Upstream commit 4e19443da1941050b346f8fc4c368aa68413bc88 ]
    
    Sometimes when running generic/475 we would trip the
    WARN_ON(cache->reserved) check when free'ing the block groups on umount.
    This is because sometimes we don't commit the transaction because of IO
    errors and thus do not cleanup the tree logs until at umount time.
    
    These blocks are still reserved until they are cleaned up, but they
    aren't cleaned up until _after_ we do the free block groups work.  Fix
    this by moving the free after free'ing the fs roots, that way all of the
    tree logs are cleaned up and we have a properly cleaned fs.  A bunch of
    loops of generic/475 confirmed this fixes the problem.
    
    CC: stable@vger.kernel.org # 4.9+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 381a16fa10def1352320b9c174f052e41966cc35
Author: Anand Jain <anand.jain@oracle.com>
Date:   Thu Oct 10 10:39:25 2019 +0800

    btrfs: use bool argument in free_root_pointers()
    
    [ Upstream commit 4273eaff9b8d5e141113a5bdf9628c02acf3afe5 ]
    
    We don't need int argument bool shall do in free_root_pointers().  And
    rename the argument as it confused two people.
    
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 987bb7a3fda122e8e5f98fcd8c01ae188fc27e1e
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Dec 31 12:11:49 2019 -0600

    ext4: fix deadlock allocating crypto bounce page from mempool
    
    [ Upstream commit 547c556f4db7c09447ecf5f833ab6aaae0c5ab58 ]
    
    ext4_writepages() on an encrypted file has to encrypt the data, but it
    can't modify the pagecache pages in-place, so it encrypts the data into
    bounce pages and writes those instead.  All bounce pages are allocated
    from a mempool using GFP_NOFS.
    
    This is not correct use of a mempool, and it can deadlock.  This is
    because GFP_NOFS includes __GFP_DIRECT_RECLAIM, which enables the "never
    fail" mode for mempool_alloc() where a failed allocation will fall back
    to waiting for one of the preallocated elements in the pool.
    
    But since this mode is used for all a bio's pages and not just the
    first, it can deadlock waiting for pages already in the bio to be freed.
    
    This deadlock can be reproduced by patching mempool_alloc() to pretend
    that pool->alloc() always fails (so that it always falls back to the
    preallocations), and then creating an encrypted file of size > 128 KiB.
    
    Fix it by only using GFP_NOFS for the first page in the bio.  For
    subsequent pages just use GFP_NOWAIT, and if any of those fail, just
    submit the bio and start a new one.
    
    This will need to be fixed in f2fs too, but that's less straightforward.
    
    Fixes: c9af28fdd449 ("ext4 crypto: don't let data integrity writebacks fail with ENOMEM")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20191231181149.47619-1-ebiggers@kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25a1729ea6f0c283c0355f7e6a9e11f65b5b8753
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Feb 6 11:07:45 2020 -0800

    net: dsa: b53: Always use dev->vlan_enabled in b53_configure_vlan()
    
    [ Upstream commit df373702bc0f8f2d83980ea441e71639fc1efcf8 ]
    
    b53_configure_vlan() is called by the bcm_sf2 driver upon setup and
    indirectly through resume as well. During the initial setup, we are
    guaranteed that dev->vlan_enabled is false, so there is no change in
    behavior, however during suspend, we may have enabled VLANs before, so we
    do want to restore that setting.
    
    Fixes: dad8d7c6452b ("net: dsa: b53: Properly account for VLAN filtering")
    Fixes: 967dd82ffc52 ("net: dsa: b53: Add support for Broadcom RoboSwitch")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62e5f512dd42587172dcfffb783388e1bc522fa9
Author: Harini Katakam <harini.katakam@xilinx.com>
Date:   Wed Feb 5 18:08:12 2020 +0530

    net: macb: Limit maximum GEM TX length in TSO
    
    [ Upstream commit f822e9c4ffa511a5c681cf866287d9383a3b6f1b ]
    
    GEM_MAX_TX_LEN currently resolves to 0x3FF8 for any IP version supporting
    TSO with full 14bits of length field in payload descriptor. But an IP
    errata causes false amba_error (bit 6 of ISR) when length in payload
    descriptors is specified above 16387. The error occurs because the DMA
    falsely concludes that there is not enough space in SRAM for incoming
    payload. These errors were observed continuously under stress of large
    packets using iperf on a version where SRAM was 16K for each queue. This
    errata will be documented shortly and affects all versions since TSO
    functionality was added. Hence limit the max length to 0x3FC0 (rounded).
    
    Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de784e74a0449dc386b870b7dade0a369d363bac
Author: Harini Katakam <harini.katakam@xilinx.com>
Date:   Wed Feb 5 18:08:11 2020 +0530

    net: macb: Remove unnecessary alignment check for TSO
    
    [ Upstream commit 41c1ef978c8d0259c6636e6d2d854777e92650eb ]
    
    The IP TSO implementation does NOT require the length to be a
    multiple of 8. That is only a requirement for UFO as per IP
    documentation. Hence, exit macb_features_check function in the
    beginning if the protocol is not UDP. Only when it is UDP,
    proceed further to the alignment checks. Update comments to
    reflect the same. Also remove dead code checking for protocol
    TCP when calculating header length.
    
    Fixes: 1629dd4f763c ("cadence: Add LSO support.")
    Signed-off-by: Harini Katakam <harini.katakam@xilinx.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16415cf7ce2fa94161304a1fb529e0634d85e0ef
Author: Raed Salem <raeds@mellanox.com>
Date:   Wed Oct 23 16:41:21 2019 +0300

    net/mlx5: IPsec, fix memory leak at mlx5_fpga_ipsec_delete_sa_ctx
    
    [ Upstream commit 08db2cf577487f5123aebcc2f913e0b8a2c14b43 ]
    
    SA context is allocated at mlx5_fpga_ipsec_create_sa_ctx,
    however the counterpart mlx5_fpga_ipsec_delete_sa_ctx function
    nullifies sa_ctx pointer without freeing the memory allocated,
    hence the memory leak.
    
    Fix by free SA context when the SA is released.
    
    Fixes: d6c4f0298cec ("net/mlx5: Refactor accel IPSec code")
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c893c6e6087ebab220ad18b16f319832821c1ae6
Author: Raed Salem <raeds@mellanox.com>
Date:   Tue Dec 24 09:54:45 2019 +0200

    net/mlx5: IPsec, Fix esp modify function attribute
    
    [ Upstream commit 0dc2c534f17c05bed0622b37a744bc38b48ca88a ]
    
    The function mlx5_fpga_esp_validate_xfrm_attrs is wrongly used
    with negative negation as zero value indicates success but it
    used as failure return value instead.
    
    Fix by remove the unary not negation operator.
    
    Fixes: 05564d0ae075 ("net/mlx5: Add flow-steering commands for FPGA IPSec implementation")
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b81a002bc03395c012624f8238dfb81a34915187
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Feb 5 12:32:04 2020 -0800

    net: systemport: Avoid RBUF stuck in Wake-on-LAN mode
    
    [ Upstream commit 263a425a482fc495d6d3f9a29b9103a664c38b69 ]
    
    After a number of suspend and resume cycles, it is possible for the RBUF
    to be stuck in Wake-on-LAN mode, despite the MPD enable bit being
    cleared which instructed the RBUF to exit that mode.
    
    Avoid creating that problematic condition by clearing the RX_EN and
    TX_EN bits in the UniMAC prior to disable the Magic Packet Detector
    logic which is guaranteed to make the RBUF exit Wake-on-LAN mode.
    
    Fixes: 83e82f4c706b ("net: systemport: add Wake-on-LAN support")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b3dbf958a1a6ec9e2ef0d3dd58cf0f7964ca8ba
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Feb 4 11:10:12 2020 -0800

    net_sched: fix a resource leak in tcindex_set_parms()
    
    [ Upstream commit 52b5ae501c045010aeeb1d5ac0373ff161a88291 ]
    
    Jakub noticed there is a potential resource leak in
    tcindex_set_parms(): when tcindex_filter_result_init() fails
    and it jumps to 'errout1' which doesn't release the memory
    and resources allocated by tcindex_alloc_perfect_hash().
    
    We should just jump to 'errout_alloc' which calls
    tcindex_free_perfect_hash().
    
    Fixes: b9a24bb76bf6 ("net_sched: properly handle failure case of tcf_exts_init()")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af746042b58d7b06ee910dec48fdb196b60d6180
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Thu Feb 6 10:14:39 2020 +0100

    net: mvneta: move rx_dropped and rx_errors in per-cpu stats
    
    [ Upstream commit c35947b8ff8acca33134ee39c31708233765c31a ]
    
    Move rx_dropped and rx_errors counters in mvneta_pcpu_stats in order to
    avoid possible races updating statistics
    
    Fixes: 562e2f467e71 ("net: mvneta: Improve the buffer allocation method for SWBM")
    Fixes: dc35a10f68d3 ("net: mvneta: bm: add support for hardware buffer management")
    Fixes: c5aff18204da ("net: mvneta: driver for Marvell Armada 370/XP network unit")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbd4c421b53a4b9128219d59e813e9f3015cf1ee
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Feb 6 11:23:52 2020 -0800

    net: dsa: bcm_sf2: Only 7278 supports 2Gb/sec IMP port
    
    [ Upstream commit de34d7084edd069dac5aa010cfe32bd8c4619fa6 ]
    
    The 7445 switch clocking profiles do not allow us to run the IMP port at
    2Gb/sec in a way that it is reliable and consistent. Make sure that the
    setting is only applied to the 7278 family.
    
    Fixes: 8f1880cbe8d0 ("net: dsa: bcm_sf2: Configure IMP port for 2Gb/sec")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6513fd0adb0cd1b1b9cd330590f9d04e72a85398
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Feb 4 19:26:05 2020 -0800

    bonding/alb: properly access headers in bond_alb_xmit()
    
    [ Upstream commit 38f88c45404293bbc027b956def6c10cbd45c616 ]
    
    syzbot managed to send an IPX packet through bond_alb_xmit()
    and af_packet and triggered a use-after-free.
    
    First, bond_alb_xmit() was using ipx_hdr() helper to reach
    the IPX header, but ipx_hdr() was using the transport offset
    instead of the network offset. In the particular syzbot
    report transport offset was 0xFFFF
    
    This patch removes ipx_hdr() since it was only (mis)used from bonding.
    
    Then we need to make sure IPv4/IPv6/IPX headers are pulled
    in skb->head before dereferencing anything.
    
    BUG: KASAN: use-after-free in bond_alb_xmit+0x153a/0x1590 drivers/net/bonding/bond_alb.c:1452
    Read of size 2 at addr ffff8801ce56dfff by task syz-executor.2/18108
     (if (ipx_hdr(skb)->ipx_checksum != IPX_NO_CHECKSUM) ...)
    
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     [<ffffffff8441fc42>] __dump_stack lib/dump_stack.c:17 [inline]
     [<ffffffff8441fc42>] dump_stack+0x14d/0x20b lib/dump_stack.c:53
     [<ffffffff81a7dec4>] print_address_description+0x6f/0x20b mm/kasan/report.c:282
     [<ffffffff81a7e0ec>] kasan_report_error mm/kasan/report.c:380 [inline]
     [<ffffffff81a7e0ec>] kasan_report mm/kasan/report.c:438 [inline]
     [<ffffffff81a7e0ec>] kasan_report.cold+0x8c/0x2a0 mm/kasan/report.c:422
     [<ffffffff81a7dc4f>] __asan_report_load_n_noabort+0xf/0x20 mm/kasan/report.c:469
     [<ffffffff82c8c00a>] bond_alb_xmit+0x153a/0x1590 drivers/net/bonding/bond_alb.c:1452
     [<ffffffff82c60c74>] __bond_start_xmit drivers/net/bonding/bond_main.c:4199 [inline]
     [<ffffffff82c60c74>] bond_start_xmit+0x4f4/0x1570 drivers/net/bonding/bond_main.c:4224
     [<ffffffff83baa558>] __netdev_start_xmit include/linux/netdevice.h:4525 [inline]
     [<ffffffff83baa558>] netdev_start_xmit include/linux/netdevice.h:4539 [inline]
     [<ffffffff83baa558>] xmit_one net/core/dev.c:3611 [inline]
     [<ffffffff83baa558>] dev_hard_start_xmit+0x168/0x910 net/core/dev.c:3627
     [<ffffffff83bacf35>] __dev_queue_xmit+0x1f55/0x33b0 net/core/dev.c:4238
     [<ffffffff83bae3a8>] dev_queue_xmit+0x18/0x20 net/core/dev.c:4278
     [<ffffffff84339189>] packet_snd net/packet/af_packet.c:3226 [inline]
     [<ffffffff84339189>] packet_sendmsg+0x4919/0x70b0 net/packet/af_packet.c:3252
     [<ffffffff83b1ac0c>] sock_sendmsg_nosec net/socket.c:673 [inline]
     [<ffffffff83b1ac0c>] sock_sendmsg+0x12c/0x160 net/socket.c:684
     [<ffffffff83b1f5a2>] __sys_sendto+0x262/0x380 net/socket.c:1996
     [<ffffffff83b1f700>] SYSC_sendto net/socket.c:2008 [inline]
     [<ffffffff83b1f700>] SyS_sendto+0x40/0x60 net/socket.c:2004
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e4013f92e7cb2a8a13ba0ddb18d1ba4dad1f084
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Jan 17 22:59:22 2020 +0100

    mfd: rn5t618: Mark ADC control register volatile
    
    commit 2f3dc25c0118de03a00ddc88b61f7216854f534d upstream.
    
    There is a bit which gets cleared after conversion.
    
    Fixes: 9bb9e29c78f8 ("mfd: Add Ricoh RN5T618 PMIC core driver")
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17d00207842387e8dd4ac559f2e7177f27771d79
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Wed Jan 8 10:57:02 2020 +0100

    mfd: da9062: Fix watchdog compatible string
    
    commit 1112ba02ff1190ca9c15a912f9269e54b46d2d82 upstream.
    
    The watchdog driver compatible is "dlg,da9062-watchdog" and not
    "dlg,da9062-wdt". Therefore the mfd-core can't populate the of_node and
    fwnode. As result the watchdog driver can't parse the devicetree.
    
    Fixes: 9b40b030c4ad ("mfd: da9062: Supply core driver")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9e9451c8ff79fd92b0b83f935a1450503529bd1
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jan 13 16:23:46 2020 +0300

    ubi: Fix an error pointer dereference in error handling code
    
    commit 5d3805af279c93ef49a64701f35254676d709622 upstream.
    
    If "seen_pebs = init_seen(ubi);" fails then "seen_pebs" is an error pointer
    and we try to kfree() it which results in an Oops.
    
    This patch re-arranges the error handling so now it only frees things
    which have been allocated successfully.
    
    Fixes: daef3dd1f0ae ("UBI: Fastmap: Add self check to detect absent PEBs")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fe3a95d2b094c778db751528f78f362287fa378
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Wed Oct 23 11:58:12 2019 +0200

    ubi: fastmap: Fix inverted logic in seen selfcheck
    
    commit ef5aafb6e4e9942a28cd300bdcda21ce6cbaf045 upstream.
    
    set_seen() sets the bit corresponding to the PEB number in the bitmap,
    so when self_check_seen() wants to find PEBs that haven't been seen we
    have to print the PEBs that have their bit cleared, not the ones which
    have it set.
    
    Fixes: 5d71afb00840 ("ubi: Use bitmaps in Fastmap self-check code")
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9939dffe7a5e83cfe97b41dde21507b7c7f7821e
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Tue Dec 17 12:33:33 2019 -0500

    nfsd: Return the correct number of bytes written to the file
    
    commit 09a80f2aef06b7c86143f5c14efd3485e0d2c139 upstream.
    
    We must allow for the fact that iov_iter_write() could have returned
    a short write (e.g. if there was an ENOSPC issue).
    
    Fixes: d890be159a71 "nfsd: Add I/O trace points in the NFSv4 write path"
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdbc75c7cb7535890b948b16d349bb7de0d37664
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 4 14:43:17 2019 +0100

    nfsd: fix jiffies/time_t mixup in LRU list
    
    commit 9594497f2c78993cb66b696122f7c65528ace985 upstream.
    
    The nfsd4_blocked_lock->nbl_time timestamp is recorded in jiffies,
    but then compared to a CLOCK_REALTIME timestamp later on, which makes
    no sense.
    
    For consistency with the other timestamps, change this to use a time_t.
    
    This is a change in behavior, which may cause regressions, but the
    current code is not sensible. On a system with CONFIG_HZ=1000,
    the 'time_after((unsigned long)nbl->nbl_time, (unsigned long)cutoff))'
    check is false for roughly the first 18 days of uptime and then true
    for the next 49 days.
    
    Fixes: 7919d0a27f1e ("nfsd: add a LRU list for blocked locks")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70b43a9da1e5c54e80528c7ed911a82cc78df1b7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Nov 3 22:32:20 2019 +0100

    nfsd: fix delay timer on 32-bit architectures
    
    commit 2561c92b12f4f4e386d453556685f75775c0938b upstream.
    
    The nfsd4_cb_layout_done() function takes a 'time_t' value,
    multiplied by NSEC_PER_SEC*2 to get a nanosecond value.
    
    This works fine on 64-bit architectures, but on 32-bit, any
    value over 1 second results in a signed integer overflow
    with unexpected results.
    
    Cast one input to a 64-bit type in order to produce the
    same result that we have on 64-bit architectures, regarless
    of the type of nfsd4_lease.
    
    Fixes: 6b9b21073d3b ("nfsd: give up on CB_LAYOUTRECALLs after two lease periods")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48d33701f6cf1d2925b5606eb7e7a0813d53b89c
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Sun Dec 22 14:46:48 2019 +0200

    IB/core: Fix ODP get user pages flow
    
    commit d07de8bd1709a80a282963ad7b2535148678a9e4 upstream.
    
    The nr_pages argument of get_user_pages_remote() should always be in terms
    of the system page size, not the MR page size. Use PAGE_SIZE instead of
    umem_odp->page_shift.
    
    Fixes: 403cd12e2cf7 ("IB/umem: Add contiguous ODP support")
    Link: https://lore.kernel.org/r/20191222124649.52300-3-leon@kernel.org
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Reviewed-by: Artemy Kovalyov <artemyko@mellanox.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d12e357f676b7b1f65daa1b0cea7a572f3626eee
Author: Prabhath Sajeepa <psajeepa@purestorage.com>
Date:   Thu Dec 12 17:11:29 2019 -0700

    IB/mlx5: Fix outstanding_pi index for GSI qps
    
    commit b5671afe5e39ed71e94eae788bacdcceec69db09 upstream.
    
    Commit b0ffeb537f3a ("IB/mlx5: Fix iteration overrun in GSI qps") changed
    the way outstanding WRs are tracked for the GSI QP. But the fix did not
    cover the case when a call to ib_post_send() fails and updates index to
    track outstanding.
    
    Since the prior commmit outstanding_pi should not be bounded otherwise the
    loop generate_completions() will fail.
    
    Fixes: b0ffeb537f3a ("IB/mlx5: Fix iteration overrun in GSI qps")
    Link: https://lore.kernel.org/r/1576195889-23527-1-git-send-email-psajeepa@purestorage.com
    Signed-off-by: Prabhath Sajeepa <psajeepa@purestorage.com>
    Acked-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d5bd969ddc6ef7817833551567a01ccb1aa6bc4
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 14:16:23 2019 -0700

    net: tulip: Adjust indentation in {dmfe, uli526x}_init_module
    
    commit fe06bf3d83ef0d92f35a24e03297172e92ce9ce3 upstream.
    
    Clang warns:
    
    ../drivers/net/ethernet/dec/tulip/uli526x.c:1812:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
            switch (mode) {
            ^
    ../drivers/net/ethernet/dec/tulip/uli526x.c:1809:2: note: previous
    statement is here
            if (cr6set)
            ^
    1 warning generated.
    
    ../drivers/net/ethernet/dec/tulip/dmfe.c:2217:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
            switch(mode) {
            ^
    ../drivers/net/ethernet/dec/tulip/dmfe.c:2214:2: note: previous
    statement is here
            if (cr6set)
            ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on these
    lines. Remove them so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    While we are here, adjust the default block in dmfe_init_module to have
    a proper break between the label and assignment and add a space between
    the switch and opening parentheses to avoid a checkpatch warning.
    
    Fixes: e1c3e5014040 ("[PATCH] initialisation cleanup for ULI526x-net-driver")
    Link: https://github.com/ClangBuiltLinux/linux/issues/795
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe96f9d072399faa6b58db7597c9467332a2b2bc
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 14:50:27 2019 -0700

    net: smc911x: Adjust indentation in smc911x_phy_configure
    
    commit 5c61e223004b3b5c3f1dd25718e979bc17a3b12d upstream.
    
    Clang warns:
    
    ../drivers/net/ethernet/smsc/smc911x.c:939:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             if (!lp->ctl_rfduplx)
             ^
    ../drivers/net/ethernet/smsc/smc911x.c:936:2: note: previous statement
    is here
            if (lp->ctl_rspeed != 100)
            ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: 0a0c72c9118c ("[PATCH] RE: [PATCH 1/1] net driver: Add support for SMSC LAN911x line of ethernet chips")
    Link: https://github.com/ClangBuiltLinux/linux/issues/796
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bde33e0a560dd7732c5807912d3ef69c2b3c732
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 15:38:59 2019 -0700

    ppp: Adjust indentation into ppp_async_input
    
    commit 08cbc75f96029d3092664213a844a5e25523aa35 upstream.
    
    Clang warns:
    
    ../drivers/net/ppp/ppp_async.c:877:6: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
                                    ap->rpkt = skb;
                                    ^
    ../drivers/net/ppp/ppp_async.c:875:5: note: previous statement is here
                                    if (!skb)
                                    ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on this
    line. Clean up this entire block's indentation so that it is consistent
    with the Linux kernel coding style and clang no longer warns.
    
    Fixes: 6722e78c9005 ("[PPP]: handle misaligned accesses")
    Link: https://github.com/ClangBuiltLinux/linux/issues/800
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c61d9c37814b3c44d69ef5bdd8c495e5924180b0
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:21:52 2019 -0700

    NFC: pn544: Adjust indentation in pn544_hci_check_presence
    
    commit 5080832627b65e3772a35d1dced68c64e2b24442 upstream.
    
    Clang warns
    
    ../drivers/nfc/pn544/pn544.c:696:4: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
                     return nfc_hci_send_cmd(hdev, NFC_HCI_RF_READER_A_GATE,
                     ^
    ../drivers/nfc/pn544/pn544.c:692:3: note: previous statement is here
                    if (target->nfcid1_len != 4 && target->nfcid1_len != 7 &&
                    ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: da052850b911 ("NFC: Add pn544 presence check for different targets")
    Link: https://github.com/ClangBuiltLinux/linux/issues/814
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f46f59a5e911277ba6dc165949b0c2c93e79efe
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 13:32:30 2019 -0700

    drm: msm: mdp4: Adjust indentation in mdp4_dsi_encoder_enable
    
    commit 251e3cb1418ff3f5061ee31335e346e852b16573 upstream.
    
    Clang warns:
    
    ../drivers/gpu/drm/msm/disp/mdp4/mdp4_dsi_encoder.c:124:3: warning:
    misleading indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             mdp4_crtc_set_config(encoder->crtc,
             ^
    ../drivers/gpu/drm/msm/disp/mdp4/mdp4_dsi_encoder.c:121:2: note:
    previous statement is here
            if (mdp4_dsi_encoder->enabled)
            ^
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: 776638e73a19 ("drm/msm/dsi: Add a mdp4 encoder for DSI")
    Link: https://github.com/ClangBuiltLinux/linux/issues/792
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ea8b55d8dbfc64f010377a652857c35c3d92d25
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 13:03:38 2019 -0700

    powerpc/44x: Adjust indentation in ibm4xx_denali_fixup_memsize
    
    commit c3aae14e5d468d18dbb5d7c0c8c7e2968cc14aad upstream.
    
    Clang warns:
    
    ../arch/powerpc/boot/4xx.c:231:3: warning: misleading indentation;
    statement is not part of the previous 'else' [-Wmisleading-indentation]
            val = SDRAM0_READ(DDR0_42);
            ^
    ../arch/powerpc/boot/4xx.c:227:2: note: previous statement is here
            else
            ^
    
    This is because there is a space at the beginning of this line; remove
    it so that the indentation is consistent according to the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: d23f5099297c ("[POWERPC] 4xx: Adds decoding of 440SPE memory size to boot wrapper library")
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://github.com/ClangBuiltLinux/linux/issues/780
    Link: https://lore.kernel.org/r/20191209200338.12546-1-natechancellor@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ad7791d49aefc5dc76bce16908bb0ccbcaddf4a
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 20:19:31 2019 -0700

    ext2: Adjust indentation in ext2_fill_super
    
    commit d9e9866803f7b6c3fdd35d345e97fb0b2908bbbc upstream.
    
    Clang warns:
    
    ../fs/ext2/super.c:1076:3: warning: misleading indentation; statement is
    not part of the previous 'if' [-Wmisleading-indentation]
            sbi->s_groups_count = ((le32_to_cpu(es->s_blocks_count) -
            ^
    ../fs/ext2/super.c:1074:2: note: previous statement is here
            if (EXT2_BLOCKS_PER_GROUP(sb) == 0)
            ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on this
    line. Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Fixes: 41f04d852e35 ("[PATCH] ext2: fix mounts at 16T")
    Link: https://github.com/ClangBuiltLinux/linux/issues/827
    Link: https://lore.kernel.org/r/20191218031930.31393-1-natechancellor@gmail.com
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0be2d490bfaff2434b0c88dd31146c34b0b06ff
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:36:37 2019 -0700

    phy: qualcomm: Adjust indentation in read_poll_timeout
    
    commit a89806c998ee123bb9c0f18526e55afd12c0c0ab upstream.
    
    Clang warns:
    
    ../drivers/phy/qualcomm/phy-qcom-apq8064-sata.c:83:4: warning:
    misleading indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
                     usleep_range(DELAY_INTERVAL_US, DELAY_INTERVAL_US + 50);
                     ^
    ../drivers/phy/qualcomm/phy-qcom-apq8064-sata.c:80:3: note: previous
    statement is here
                    if (readl_relaxed(addr) & mask)
                    ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this line.
    Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    Fixes: 1de990d8a169 ("phy: qcom: Add driver for QCOM APQ8064 SATA PHY")
    Link: https://github.com/ClangBuiltLinux/linux/issues/816
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 028a925c0540cea469c493814d86db6c4f3a014d
Author: Asutosh Das <asutoshd@codeaurora.org>
Date:   Mon Nov 25 22:53:30 2019 -0800

    scsi: ufs: Recheck bkops level if bkops is disabled
    
    commit 24366c2afbb0539fb14eff330d4e3a5db5c0a3ef upstream.
    
    bkops level should be rechecked upon receiving an exception.  Currently the
    level is being cached and never updated.
    
    Update bkops each time the level is checked.  Also do not use the cached
    bkops level value if it is disabled and then enabled.
    
    Fixes: afdfff59a0e0 (scsi: ufs: handle non spec compliant bkops behaviour by device)
    Link: https://lore.kernel.org/r/1574751214-8321-2-git-send-email-cang@qti.qualcomm.com
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Tested-by: Alim Akhtar <alim.akhtar@samsung.com>
    Signed-off-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa6a21d74d5e3f8d5f4df7aa07ac41eacdc8423b
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:52:52 2019 -0700

    scsi: qla4xxx: Adjust indentation in qla4xxx_mem_free
    
    commit aa8679736a82386551eb9f3ea0e6ebe2c0e99104 upstream.
    
    Clang warns:
    
    ../drivers/scsi/qla4xxx/ql4_os.c:4148:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             if (ha->fw_dump)
             ^
    ../drivers/scsi/qla4xxx/ql4_os.c:4144:2: note: previous statement is
    here
            if (ha->queues)
            ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this
    line.  Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Fixes: 068237c87c64 ("[SCSI] qla4xxx: Capture minidump for ISP82XX on firmware failure")
    Link: https://github.com/ClangBuiltLinux/linux/issues/819
    Link: https://lore.kernel.org/r/20191218015252.20890-1-natechancellor@gmail.com
    Acked-by: Manish Rangankar <mrangankar@marvell.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cfc6949965cce0336e5f6556d7a214146c48583
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:47:26 2019 -0700

    scsi: csiostor: Adjust indentation in csio_device_reset
    
    commit a808a04c861782e31fc30e342a619c144aaee14a upstream.
    
    Clang warns:
    
    ../drivers/scsi/csiostor/csio_scsi.c:1386:3: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
             csio_lnodes_exit(hw, 1);
             ^
    ../drivers/scsi/csiostor/csio_scsi.c:1382:2: note: previous statement is
    here
            if (*buf != '1')
            ^
    1 warning generated.
    
    This warning occurs because there is a space after the tab on this
    line.  Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Fixes: a3667aaed569 ("[SCSI] csiostor: Chelsio FCoE offload driver")
    Link: https://github.com/ClangBuiltLinux/linux/issues/818
    Link: https://lore.kernel.org/r/20191218014726.8455-1-natechancellor@gmail.com
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abfe137647d81870a2fe3c322dac4ce0758c375c
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Dec 18 16:49:05 2019 -0800

    scsi: qla2xxx: Fix the endianness of the qla82xx_get_fw_size() return type
    
    commit 3f5f7335e5e234e340b48ecb24c2aba98a61f934 upstream.
    
    Since qla82xx_get_fw_size() returns a number in CPU-endian format, change
    its return type from __le32 into u32. This patch does not change any
    functionality.
    
    Fixes: 9c2b297572bf ("[SCSI] qla2xxx: Support for loading Unified ROM Image (URI) format firmware file.")
    Cc: Himanshu Madhani <hmadhani@marvell.com>
    Cc: Quinn Tran <qutran@marvell.com>
    Cc: Martin Wilck <mwilck@suse.com>
    Cc: Daniel Wagner <dwagner@suse.de>
    Cc: Roman Bolshakov <r.bolshakov@yadro.com>
    Link: https://lore.kernel.org/r/20191219004905.39586-1-bvanassche@acm.org
    Reviewed-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5d0c3ff6553a2aabef438af6f16ad8a9cdd01ac
Author: Erdem Aktas <erdemaktas@google.com>
Date:   Fri Dec 13 13:31:46 2019 -0800

    percpu: Separate decrypted varaibles anytime encryption can be enabled
    
    commit 264b0d2bee148073c117e7bbbde5be7125a53be1 upstream.
    
    CONFIG_VIRTUALIZATION may not be enabled for memory encrypted guests.  If
    disabled, decrypted per-CPU variables may end up sharing the same page
    with variables that should be left encrypted.
    
    Always separate per-CPU variables that should be decrypted into their own
    page anytime memory encryption can be enabled in the guest rather than
    rely on any other config option that may not be enabled.
    
    Fixes: ac26963a1175 ("percpu: Introduce DEFINE_PER_CPU_DECRYPTED")
    Cc: stable@vger.kernel.org # 4.15+
    Signed-off-by: Erdem Aktas <erdemaktas@google.com>
    Signed-off-by: David Rientjes <rientjes@google.com>
    Signed-off-by: Dennis Zhou <dennis@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abc51506fcebee12183f98a30f0aa67b32ee8542
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Jan 24 14:10:46 2020 -0500

    drm/amd/dm/mst: Ignore payload update failures
    
    commit 58fe03d6dec908a1bec07eea7e94907af5c07eec upstream.
    
    Disabling a display on MST can potentially happen after the entire MST
    topology has been removed, which means that we can't communicate with
    the topology at all in this scenario. Likewise, this also means that we
    can't properly update payloads on the topology and as such, it's a good
    idea to ignore payload update failures when disabling displays.
    Currently, amdgpu makes the mistake of halting the payload update
    process when any payload update failures occur, resulting in leaving
    DC's local copies of the payload tables out of date.
    
    This ends up causing problems with hotplugging MST topologies, and
    causes modesets on the second hotplug to fail like so:
    
    [drm] Failed to updateMST allocation table forpipe idx:1
    ------------[ cut here ]------------
    WARNING: CPU: 5 PID: 1511 at
    drivers/gpu/drm/amd/amdgpu/../display/dc/core/dc_link.c:2677
    update_mst_stream_alloc_table+0x11e/0x130 [amdgpu]
    Modules linked in: cdc_ether usbnet fuse xt_conntrack nf_conntrack
    nf_defrag_ipv6 libcrc32c nf_defrag_ipv4 ipt_REJECT nf_reject_ipv4
    nft_counter nft_compat nf_tables nfnetlink tun bridge stp llc sunrpc
    vfat fat wmi_bmof uvcvideo snd_hda_codec_realtek snd_hda_codec_generic
    snd_hda_codec_hdmi videobuf2_vmalloc snd_hda_intel videobuf2_memops
    videobuf2_v4l2 snd_intel_dspcfg videobuf2_common crct10dif_pclmul
    snd_hda_codec videodev crc32_pclmul snd_hwdep snd_hda_core
    ghash_clmulni_intel snd_seq mc joydev pcspkr snd_seq_device snd_pcm
    sp5100_tco k10temp i2c_piix4 snd_timer thinkpad_acpi ledtrig_audio snd
    wmi soundcore video i2c_scmi acpi_cpufreq ip_tables amdgpu(O)
    rtsx_pci_sdmmc amd_iommu_v2 gpu_sched mmc_core i2c_algo_bit ttm
    drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops cec drm
    crc32c_intel serio_raw hid_multitouch r8152 mii nvme r8169 nvme_core
    rtsx_pci pinctrl_amd
    CPU: 5 PID: 1511 Comm: gnome-shell Tainted: G           O      5.5.0-rc7Lyude-Test+ #4
    Hardware name: LENOVO FA495SIT26/FA495SIT26, BIOS R12ET22W(0.22 ) 01/31/2019
    RIP: 0010:update_mst_stream_alloc_table+0x11e/0x130 [amdgpu]
    Code: 28 00 00 00 75 2b 48 8d 65 e0 5b 41 5c 41 5d 41 5e 5d c3 0f b6 06
    49 89 1c 24 41 88 44 24 08 0f b6 46 01 41 88 44 24 09 eb 93 <0f> 0b e9
    2f ff ff ff e8 a6 82 a3 c2 66 0f 1f 44 00 00 0f 1f 44 00
    RSP: 0018:ffffac428127f5b0 EFLAGS: 00010202
    RAX: 0000000000000002 RBX: ffff8d1e166eee80 RCX: 0000000000000000
    RDX: ffffac428127f668 RSI: ffff8d1e166eee80 RDI: ffffac428127f610
    RBP: ffffac428127f640 R08: ffffffffc03d94a8 R09: 0000000000000000
    R10: ffff8d1e24b02000 R11: ffffac428127f5b0 R12: ffff8d1e1b83d000
    R13: ffff8d1e1bea0b08 R14: 0000000000000002 R15: 0000000000000002
    FS:  00007fab23ffcd80(0000) GS:ffff8d1e28b40000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f151f1711e8 CR3: 00000005997c0000 CR4: 00000000003406e0
    Call Trace:
     ? mutex_lock+0xe/0x30
     dc_link_allocate_mst_payload+0x9a/0x210 [amdgpu]
     ? dm_read_reg_func+0x39/0xb0 [amdgpu]
     ? core_link_enable_stream+0x656/0x730 [amdgpu]
     core_link_enable_stream+0x656/0x730 [amdgpu]
     dce110_apply_ctx_to_hw+0x58e/0x5d0 [amdgpu]
     ? dcn10_verify_allow_pstate_change_high+0x1d/0x280 [amdgpu]
     ? dcn10_wait_for_mpcc_disconnect+0x3c/0x130 [amdgpu]
     dc_commit_state+0x292/0x770 [amdgpu]
     ? add_timer+0x101/0x1f0
     ? ttm_bo_put+0x1a1/0x2f0 [ttm]
     amdgpu_dm_atomic_commit_tail+0xb59/0x1ff0 [amdgpu]
     ? amdgpu_move_blit.constprop.0+0xb8/0x1f0 [amdgpu]
     ? amdgpu_bo_move+0x16d/0x2b0 [amdgpu]
     ? ttm_bo_handle_move_mem+0x118/0x570 [ttm]
     ? ttm_bo_validate+0x134/0x150 [ttm]
     ? dm_plane_helper_prepare_fb+0x1b9/0x2a0 [amdgpu]
     ? _cond_resched+0x15/0x30
     ? wait_for_completion_timeout+0x38/0x160
     ? _cond_resched+0x15/0x30
     ? wait_for_completion_interruptible+0x33/0x190
     commit_tail+0x94/0x130 [drm_kms_helper]
     drm_atomic_helper_commit+0x113/0x140 [drm_kms_helper]
     drm_atomic_helper_set_config+0x70/0xb0 [drm_kms_helper]
     drm_mode_setcrtc+0x194/0x6a0 [drm]
     ? _cond_resched+0x15/0x30
     ? mutex_lock+0xe/0x30
     ? drm_mode_getcrtc+0x180/0x180 [drm]
     drm_ioctl_kernel+0xaa/0xf0 [drm]
     drm_ioctl+0x208/0x390 [drm]
     ? drm_mode_getcrtc+0x180/0x180 [drm]
     amdgpu_drm_ioctl+0x49/0x80 [amdgpu]
     do_vfs_ioctl+0x458/0x6d0
     ksys_ioctl+0x5e/0x90
     __x64_sys_ioctl+0x16/0x20
     do_syscall_64+0x55/0x1b0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7fab2121f87b
    Code: 0f 1e fa 48 8b 05 0d 96 2c 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff
    ff ff c3 66 0f 1f 44 00 00 f3 0f 1e fa b8 10 00 00 00 0f 05 <48> 3d 01
    f0 ff ff 73 01 c3 48 8b 0d dd 95 2c 00 f7 d8 64 89 01 48
    RSP: 002b:00007ffd045f9068 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00007ffd045f90a0 RCX: 00007fab2121f87b
    RDX: 00007ffd045f90a0 RSI: 00000000c06864a2 RDI: 000000000000000b
    RBP: 00007ffd045f90a0 R08: 0000000000000000 R09: 000055dbd2985d10
    R10: 000055dbd2196280 R11: 0000000000000246 R12: 00000000c06864a2
    R13: 000000000000000b R14: 0000000000000000 R15: 000055dbd2196280
    ---[ end trace 6ea888c24d2059cd ]---
    
    Note as well, I have only been able to reproduce this on setups with 2
    MST displays.
    
    Changes since v1:
    * Don't return false when part 1 or part 2 of updating the payloads
      fails, we don't want to abort at any step of the process even if
      things fail
    
    Reviewed-by: Mikita Lipski <Mikita.Lipski@amd.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b984c4ad9000dfc2a65bd2da88c2939c96df9594
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Oct 3 14:50:30 2019 -0600

    clk: tegra: Mark fuse clock as critical
    
    commit bf83b96f87ae2abb1e535306ea53608e8de5dfbb upstream.
    
    For a little over a year, U-Boot on Tegra124 has configured the flow
    controller to perform automatic RAM re-repair on off->on power
    transitions of the CPU rail[1]. This is mandatory for correct operation
    of Tegra124. However, RAM re-repair relies on certain clocks, which the
    kernel must enable and leave running. The fuse clock is one of those
    clocks. Mark this clock as critical so that LP1 power mode (system
    suspend) operates correctly.
    
    [1] 3cc7942a4ae5 ARM: tegra: implement RAM repair
    
    Reported-by: Jonathan Hunter <jonathanh@nvidia.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1568e6370ba0a024e62827da45d92d3b68181b5
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Fri Jan 31 05:02:00 2020 -0500

    KVM: s390: do not clobber registers during guest reset/store status
    
    commit 55680890ea78be0df5e1384989f1be835043c084 upstream.
    
    The initial CPU reset clobbers the userspace fpc and the store status
    ioctl clobbers the guest acrs + fpr.  As these calls are only done via
    ioctl (and not via vcpu_run), no CPU context is loaded, so we can (and
    must) act directly on the sync regs, not on the thread context.
    
    Cc: stable@kernel.org
    Fixes: e1788bb995be ("KVM: s390: handle floating point registers in the run ioctl not in vcpu_put/load")
    Fixes: 31d8b8d41a7e ("KVM: s390: handle access registers in the run ioctl not in vcpu_put/load")
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
    Link: https://lore.kernel.org/r/20200131100205.74720-2-frankja@linux.ibm.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6bf858cb2db0dd4cce79bba43b0a192259699bc
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:54:48 2019 -0800

    KVM: x86: Free wbinvd_dirty_mask if vCPU creation fails
    
    commit 16be9ddea268ad841457a59109963fff8c9de38d upstream.
    
    Free the vCPU's wbinvd_dirty_mask if vCPU creation fails after
    kvm_arch_vcpu_init(), e.g. when installing the vCPU's file descriptor.
    Do the freeing by calling kvm_arch_vcpu_free() instead of open coding
    the freeing.  This adds a likely superfluous, but ultimately harmless,
    call to kvmclock_reset(), which only clears vcpu->arch.pv_time_enabled.
    Using kvm_arch_vcpu_free() allows for additional cleanup in the future.
    
    Fixes: f5f48ee15c2ee ("KVM: VMX: Execute WBINVD to keep data consistency with assigned devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 889a65ede085b37c073c47e98fa3a9bcabf02aff
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Tue Dec 10 14:44:13 2019 -0800

    KVM: x86: Don't let userspace set host-reserved cr4 bits
    
    commit b11306b53b2540c6ba068c4deddb6a17d9f8d95b upstream.
    
    Calculate the host-reserved cr4 bits at runtime based on the system's
    capabilities (using logic similar to __do_cpuid_func()), and use the
    dynamically generated mask for the reserved bit check in kvm_set_cr4()
    instead using of the static CR4_RESERVED_BITS define.  This prevents
    userspace from "enabling" features in cr4 that are not supported by the
    system, e.g. by ignoring KVM_GET_SUPPORTED_CPUID and specifying a bogus
    CPUID for the vCPU.
    
    Allowing userspace to set unsupported bits in cr4 can lead to a variety
    of undesirable behavior, e.g. failed VM-Enter, and in general increases
    KVM's attack surface.  A crafty userspace can even abuse CR4.LA57 to
    induce an unchecked #GP on a WRMSR.
    
    On a platform without LA57 support:
    
      KVM_SET_CPUID2 // CPUID_7_0_ECX.LA57 = 1
      KVM_SET_SREGS  // CR4.LA57 = 1
      KVM_SET_MSRS   // KERNEL_GS_BASE = 0x0004000000000000
      KVM_RUN
    
    leads to a #GP when writing KERNEL_GS_BASE into hardware:
    
      unchecked MSR access error: WRMSR to 0xc0000102 (tried to write 0x0004000000000000)
      at rIP: 0xffffffffa00f239a (vmx_prepare_switch_to_guest+0x10a/0x1d0 [kvm_intel])
      Call Trace:
       kvm_arch_vcpu_ioctl_run+0x671/0x1c70 [kvm]
       kvm_vcpu_ioctl+0x36b/0x5d0 [kvm]
       do_vfs_ioctl+0xa1/0x620
       ksys_ioctl+0x66/0x70
       __x64_sys_ioctl+0x16/0x20
       do_syscall_64+0x4c/0x170
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7fc08133bf47
    
    Note, the above sequence fails VM-Enter due to invalid guest state.
    Userspace can allow VM-Enter to succeed (after the WRMSR #GP) by adding
    a KVM_SET_SREGS w/ CR4.LA57=0 after KVM_SET_MSRS, in which case KVM will
    technically leak the host's KERNEL_GS_BASE into the guest.  But, as
    KERNEL_GS_BASE is a userspace-defined value/address, the leak is largely
    benign as a malicious userspace would simply be exposing its own data to
    the guest, and attacking a benevolent userspace would require multiple
    bugs in the userspace VMM.
    
    Cc: stable@vger.kernel.org
    Cc: Jun Nakajima <jun.nakajima@intel.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25a7898937f4a9f32ca2d1e9b7f5f07176af8037
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Wed Oct 30 19:01:31 2019 +0000

    x86/kvm: Be careful not to clear KVM_VCPU_FLUSH_TLB bit
    
    commit 8c6de56a42e0c657955e12b882a81ef07d1d073e upstream.
    
    kvm_steal_time_set_preempted() may accidentally clear KVM_VCPU_FLUSH_TLB
    bit if it is called more than once while VCPU is preempted.
    
    This is part of CVE-2019-3016.
    
    (This bug was also independently discovered by Jim Mattson
    <jmattson@google.com>)
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18eccafaa8b02370862f81e3be24dada581ab72f
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:54:47 2019 -0800

    KVM: PPC: Book3S PR: Free shared page if mmu initialization fails
    
    commit cb10bf9194f4d2c5d830eddca861f7ca0fecdbb4 upstream.
    
    Explicitly free the shared page if kvmppc_mmu_init() fails during
    kvmppc_core_vcpu_create(), as the page is freed only in
    kvmppc_core_vcpu_free(), which is not reached via kvm_vcpu_uninit().
    
    Fixes: 96bc451a15329 ("KVM: PPC: Introduce shared page")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Acked-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 863666fc1d7bdd5f55d458399d4b190df2388937
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:54:46 2019 -0800

    KVM: PPC: Book3S HV: Uninit vCPU if vcore creation fails
    
    commit 1a978d9d3e72ddfa40ac60d26301b154247ee0bc upstream.
    
    Call kvm_vcpu_uninit() if vcore creation fails to avoid leaking any
    resources allocated by kvm_vcpu_init(), i.e. the vcpu->run page.
    
    Fixes: 371fefd6f2dc4 ("KVM: PPC: Allow book3s_hv guests to use SMT processor modes")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Acked-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec0c9e769aaf23995e92e3cfd0d5626dd6ae5108
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Mon Dec 9 12:19:31 2019 -0800

    KVM: x86: Fix potential put_fpu() w/o load_fpu() on MPX platform
    
    commit f958bd2314d117f8c29f4821401bc1925bc2e5ef upstream.
    
    Unlike most state managed by XSAVE, MPX is initialized to zero on INIT.
    Because INITs are usually recognized in the context of a VCPU_RUN call,
    kvm_vcpu_reset() puts the guest's FPU so that the FPU state is resident
    in memory, zeros the MPX state, and reloads FPU state to hardware.  But,
    in the unlikely event that an INIT is recognized during
    kvm_arch_vcpu_ioctl_get_mpstate() via kvm_apic_accept_events(),
    kvm_vcpu_reset() will call kvm_put_guest_fpu() without a preceding
    kvm_load_guest_fpu() and corrupt the guest's FPU state (and possibly
    userspace's FPU state as well).
    
    Given that MPX is being removed from the kernel[*], fix the bug with the
    simple-but-ugly approach of loading the guest's FPU during
    KVM_GET_MP_STATE.
    
    [*] See commit f240652b6032b ("x86/mpx: Remove MPX APIs").
    
    Fixes: f775b13eedee2 ("x86,kvm: move qemu/guest FPU switching out to vcpu_run")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad5d618ffaf8892ef045c0233a21a241eca4d343
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:47 2019 -0800

    KVM: x86: Protect MSR-based index computations in fixed_msr_to_seg_unit() from Spectre-v1/L1TF attacks
    
    commit 25a5edea71b7c154b6a0b8cec14c711cafa31d26 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in fixed_msr_to_seg_unit().
    This function contains index computations based on the
    (attacker-controlled) MSR number.
    
    Fixes: de9aef5e1ad6 ("KVM: MTRR: introduce fixed_mtrr_segment table")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46155377884b637eae646895e51bed322fd2cb8a
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:41 2019 -0800

    KVM: x86: Protect x86_decode_insn from Spectre-v1/L1TF attacks
    
    commit 3c9053a2cae7ba2ba73766a34cea41baa70f57f7 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in x86_decode_insn().
    kvm_emulate_instruction() (an ancestor of x86_decode_insn()) is an exported
    symbol, so KVM should treat it conservatively from a security perspective.
    
    Fixes: 045a282ca415 ("KVM: emulator: implement fninit, fnstsw, fnstcw")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4599b98ce023f780d180838e6a34bdd7ae65ea77
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:49 2019 -0800

    KVM: x86: Protect MSR-based index computations from Spectre-v1/L1TF attacks in x86.c
    
    commit 6ec4c5eee1750d5d17951c4e1960d953376a0dda upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in set_msr_mce() and
    get_msr_mce().
    Both functions contain index computations based on the
    (attacker-controlled) MSR number.
    
    Fixes: 890ca9aefa78 ("KVM: Add MCE support")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13725c06f841fc7d2b761aa812bbcf6f36273fc9
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:44 2019 -0800

    KVM: x86: Protect ioapic_read_indirect() from Spectre-v1/L1TF attacks
    
    commit 8c86405f606ca8508b8d9280680166ca26723695 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in ioapic_read_indirect().
    This function contains index computations based on the
    (attacker-controlled) IOREGSEL register.
    
    Fixes: a2c118bfab8b ("KVM: Fix bounds checking in ioapic indirect register reads (CVE-2013-1798)")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb08d0fe31e958e95db9c9c03dcd357dbb57e3d0
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:48 2019 -0800

    KVM: x86: Protect MSR-based index computations in pmu.h from Spectre-v1/L1TF attacks
    
    commit 13c5183a4e643cc2b03a22d0e582c8e17bb7457d upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in the get_gp_pmc() and
    get_fixed_pmc() functions.
    They both contain index computations based on the (attacker-controlled)
    MSR number.
    
    Fixes: 25462f7f5295 ("KVM: x86/vPMU: Define kvm_pmu_ops to support vPMU function dispatch")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33c0002ccf84d6a2c9d39c864ea38c20ec0b2e5b
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:45 2019 -0800

    KVM: x86: Protect ioapic_write_indirect() from Spectre-v1/L1TF attacks
    
    commit 670564559ca35b439c8d8861fc399451ddf95137 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in ioapic_write_indirect().
    This function contains index computations based on the
    (attacker-controlled) IOREGSEL register.
    
    This patch depends on patch
    "KVM: x86: Protect ioapic_read_indirect() from Spectre-v1/L1TF attacks".
    
    Fixes: 70f93dae32ac ("KVM: Use temporary variable to shorten lines.")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65e366331d6ccd4063cd4d5d3fd7cd6a720c0c2e
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:42 2019 -0800

    KVM: x86: Protect kvm_hv_msr_[get|set]_crash_data() from Spectre-v1/L1TF attacks
    
    commit 8618793750071d66028584a83ed0b4fa7eb4f607 upstream.
    
    This fixes Spectre-v1/L1TF vulnerabilities in kvm_hv_msr_get_crash_data()
    and kvm_hv_msr_set_crash_data().
    These functions contain index computations that use the
    (attacker-controlled) MSR number.
    
    Fixes: e7d9513b60e8 ("kvm/x86: added hyper-v crash msrs into kvm hyperv context")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4ab9cc432bb1945820b5813cb7a37d9d802d2cd
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:46 2019 -0800

    KVM: x86: Protect kvm_lapic_reg_write() from Spectre-v1/L1TF attacks
    
    commit 4bf79cb089f6b1c6c632492c0271054ce52ad766 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in kvm_lapic_reg_write().
    This function contains index computations based on the
    (attacker-controlled) MSR number.
    
    Fixes: 0105d1a52640 ("KVM: x2apic interface to lapic")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db155131e332b706be673315280d1bfec4284873
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:52 2019 -0800

    KVM: x86: Protect DR-based index computations from Spectre-v1/L1TF attacks
    
    commit ea740059ecb37807ba47b84b33d1447435a8d868 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in __kvm_set_dr() and
    kvm_get_dr().
    Both kvm_get_dr() and kvm_set_dr() (a wrapper of __kvm_set_dr()) are
    exported symbols so KVM should tream them conservatively from a security
    perspective.
    
    Fixes: 020df0794f57 ("KVM: move DR register access handling into generic code")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eef3ed3f9fdb659eac709769716b7c8a2a83f75a
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:53 2019 -0800

    KVM: x86: Protect pmu_intel.c from Spectre-v1/L1TF attacks
    
    commit 66061740f1a487f4ed54fde75e724709f805da53 upstream.
    
    This fixes Spectre-v1/L1TF vulnerabilities in intel_find_fixed_event()
    and intel_rdpmc_ecx_to_pmc().
    kvm_rdpmc() (ancestor of intel_find_fixed_event()) and
    reprogram_fixed_counter() (ancestor of intel_rdpmc_ecx_to_pmc()) are
    exported symbols so KVM should treat them conservatively from a security
    perspective.
    
    Fixes: 25462f7f5295 ("KVM: x86/vPMU: Define kvm_pmu_ops to support vPMU function dispatch")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f85e7ff824e329735cc341ce8174c5f3fb4d5fa
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:50 2019 -0800

    KVM: x86: Refactor prefix decoding to prevent Spectre-v1/L1TF attacks
    
    commit 125ffc5e0a56a3eded608dc51e09d5ebf72cf652 upstream.
    
    This fixes Spectre-v1/L1TF vulnerabilities in
    vmx_read_guest_seg_selector(), vmx_read_guest_seg_base(),
    vmx_read_guest_seg_limit() and vmx_read_guest_seg_ar().  When
    invoked from emulation, these functions contain index computations
    based on the (attacker-influenced) segment value.  Using constants
    prevents the attack.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 882f294ad63336c110346da43af03a7517517312
Author: Marios Pomonis <pomonis@google.com>
Date:   Wed Dec 11 12:47:43 2019 -0800

    KVM: x86: Refactor picdev_write() to prevent Spectre-v1/L1TF attacks
    
    commit 14e32321f3606e4b0970200b6e5e47ee6f1e6410 upstream.
    
    This fixes a Spectre-v1/L1TF vulnerability in picdev_write().
    It replaces index computations based on the (attacked-controlled) port
    number with constants through a minor refactoring.
    
    Fixes: 85f455f7ddbe ("KVM: Add support for in-kernel PIC emulation")
    
    Signed-off-by: Nick Finco <nifi@google.com>
    Signed-off-by: Marios Pomonis <pomonis@google.com>
    Reviewed-by: Andrew Honig <ahonig@google.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d062d9826ae4659bc2f976f70b666b245d351650
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Feb 3 10:33:42 2020 -0700

    aio: prevent potential eventfd recursion on poll
    
    commit 01d7a356872eec22ef34a33a5f9cfa917d145468 upstream.
    
    If we have nested or circular eventfd wakeups, then we can deadlock if
    we run them inline from our poll waitqueue wakeup handler. It's also
    possible to have very long chains of notifications, to the extent where
    we could risk blowing the stack.
    
    Check the eventfd recursion count before calling eventfd_signal(). If
    it's non-zero, then punt the signaling to async context. This is always
    safe, as it takes us out-of-line in terms of stack and locking context.
    
    Cc: stable@vger.kernel.org # 4.19+
    Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eaef83c4c0cb8c82ab7cea99479d49d35a5cd25d
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sun Feb 2 08:23:03 2020 -0700

    eventfd: track eventfd_signal() recursion depth
    
    commit b5e683d5cab8cd433b06ae178621f083cabd4f63 upstream.
    
    eventfd use cases from aio and io_uring can deadlock due to circular
    or resursive calling, when eventfd_signal() tries to grab the waitqueue
    lock. On top of that, it's also possible to construct notification
    chains that are deep enough that we could blow the stack.
    
    Add a percpu counter that tracks the percpu recursion depth, warn if we
    exceed it. The counter is also exposed so that users of eventfd_signal()
    can do the right thing if it's non-zero in the context where it is
    called.
    
    Cc: stable@vger.kernel.org # 4.19+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e608cd92bac3a37436666b75e7272af968ebbbc5
Author: Coly Li <colyli@suse.de>
Date:   Sat Feb 1 22:42:33 2020 +0800

    bcache: add readahead cache policy options via sysfs interface
    
    commit 038ba8cc1bffc51250add4a9b9249d4331576d8f upstream.
    
    In year 2007 high performance SSD was still expensive, in order to
    save more space for real workload or meta data, the readahead I/Os
    for non-meta data was bypassed and not cached on SSD.
    
    In now days, SSD price drops a lot and people can find larger size
    SSD with more comfortable price. It is unncessary to alway bypass
    normal readahead I/Os to save SSD space for now.
    
    This patch adds options for readahead data cache policies via sysfs
    file /sys/block/bcache<N>/readahead_cache_policy, the options are,
    - "all": cache all readahead data I/Os.
    - "meta-only": only cache meta data, and bypass other regular I/Os.
    
    If users want to make bcache continue to only cache readahead request
    for metadata and bypass regular data readahead, please set "meta-only"
    to this sysfs file. By default, bcache will back to cache all read-
    ahead requests now.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Coly Li <colyli@suse.de>
    Acked-by: Eric Wheeler <bcache@linux.ewheeler.net>
    Cc: Michael Lyle <mlyle@lyle.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ca3742a9bba93977d9e7cae8ffdcaba03f93101
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Wed Jan 8 13:53:47 2020 +0100

    watchdog: fix UAF in reboot notifier handling in watchdog core code
    
    commit 69503e585192fdd84b240f18a0873d20e18a2e0a upstream.
    
    After the commit 44ea39420fc9 ("drivers/watchdog: make use of
    devm_register_reboot_notifier()") the struct notifier_block reboot_nb in
    the struct watchdog_device is removed from the reboot notifiers chain at
    the time watchdog's chardev is closed. But at least in i6300esb.c case
    reboot_nb is embedded in the struct esb_dev which can be freed on its
    device removal and before the chardev is closed, thus UAF at reboot:
    
    [    7.728581] esb_probe: esb_dev.watchdog_device ffff91316f91ab28
    ts# uname -r                            note the address ^^^
    5.5.0-rc5-ae6088-wdog
    ts# ./openwdog0 &
    [1] 696
    ts# opened /dev/watchdog0, sleeping 10s...
    ts# echo 1 > /sys/devices/pci0000\:00/0000\:00\:09.0/remove
    [  178.086079] devres:rel_nodes: dev ffff91317668a0b0 data ffff91316f91ab28
               esb_dev.watchdog_device.reboot_nb memory is freed here ^^^
    ts# ...woken up
    [  181.459010] devres:rel_nodes: dev ffff913171781000 data ffff913174a1dae8
    [  181.460195] devm_unreg_reboot_notifier: res ffff913174a1dae8 nb ffff91316f91ab78
                                         attempt to use memory already freed ^^^
    [  181.461063] devm_unreg_reboot_notifier: nb->call 6b6b6b6b6b6b6b6b
    [  181.461243] devm_unreg_reboot_notifier: nb->next 6b6b6b6b6b6b6b6b
                    freed memory is filled with a slub poison ^^^
    [1]+  Done                    ./openwdog0
    ts# reboot
    [  229.921862] systemd-shutdown[1]: Rebooting.
    [  229.939265] notifier_call_chain: nb ffffffff9c6c2f20 nb->next ffffffff9c6d50c0
    [  229.943080] notifier_call_chain: nb ffffffff9c6d50c0 nb->next 6b6b6b6b6b6b6b6b
    [  229.946054] notifier_call_chain: nb 6b6b6b6b6b6b6b6b INVAL
    [  229.957584] general protection fault: 0000 [#1] SMP
    [  229.958770] CPU: 0 PID: 1 Comm: systemd-shutdow Not tainted 5.5.0-rc5-ae6088-wdog
    [  229.960224] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), ...
    [  229.963288] RIP: 0010:notifier_call_chain+0x66/0xd0
    [  229.969082] RSP: 0018:ffffb20dc0013d88 EFLAGS: 00010246
    [  229.970812] RAX: 000000000000002e RBX: 6b6b6b6b6b6b6b6b RCX: 00000000000008b3
    [  229.972929] RDX: 0000000000000000 RSI: 0000000000000096 RDI: ffffffff9ccc46ac
    [  229.975028] RBP: 0000000000000001 R08: 0000000000000000 R09: 00000000000008b3
    [  229.977039] R10: 0000000000000001 R11: ffffffff9c26c740 R12: 0000000000000000
    [  229.979155] R13: 6b6b6b6b6b6b6b6b R14: 0000000000000000 R15: 00000000fffffffa
    ...   slub_debug=FZP poison ^^^
    [  229.989089] Call Trace:
    [  229.990157]  blocking_notifier_call_chain+0x43/0x59
    [  229.991401]  kernel_restart_prepare+0x14/0x30
    [  229.992607]  kernel_restart+0x9/0x30
    [  229.993800]  __do_sys_reboot+0x1d2/0x210
    [  230.000149]  do_syscall_64+0x3d/0x130
    [  230.001277]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  230.002639] RIP: 0033:0x7f5461bdd177
    [  230.016402] Modules linked in: i6300esb
    [  230.050261] Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Fix the crash by reverting 44ea39420fc9 so unregister_reboot_notifier()
    is called when watchdog device is removed. This also makes handling of
    the reboot notifier unified with the handling of the restart handler,
    which is freed with unregister_restart_handler() in the same place.
    
    Fixes: 44ea39420fc9 ("drivers/watchdog: make use of devm_register_reboot_notifier()")
    Cc: stable@vger.kernel.org # v4.15+
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200108125347.6067-1-vdronov@redhat.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a69878dfacaf051b76c76623e5a22a95a9da297
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Jan 17 14:49:31 2020 +0100

    xen/balloon: Support xend-based toolstack take two
    
    commit eda4eabf86fd6806eaabc23fb90dd056fdac037b upstream.
    
    Commit 3aa6c19d2f38be ("xen/balloon: Support xend-based toolstack")
    tried to fix a regression with running on rather ancient Xen versions.
    Unfortunately the fix was based on the assumption that xend would
    just use another Xenstore node, but in reality only some downstream
    versions of xend are doing that. The upstream xend does not write
    that Xenstore node at all, so the problem must be fixed in another
    way.
    
    The easiest way to achieve that is to fall back to the behavior
    before commit 96edd61dcf4436 ("xen/balloon: don't online new memory
    initially") in case the static memory maximum can't be read.
    
    This is achieved by setting static_max to the current number of
    memory pages known by the system resulting in target_diff becoming
    zero.
    
    Fixes: 3aa6c19d2f38be ("xen/balloon: Support xend-based toolstack")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: <stable@vger.kernel.org> # 4.13
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d85e2964a37c7f703b6ff7f95715ecc81356ebaa
Author: Gavin Shan <gshan@redhat.com>
Date:   Tue Dec 10 15:48:29 2019 +1100

    tools/kvm_stat: Fix kvm_exit filter name
    
    commit 5fcf3a55a62afb0760ccb6f391d62f20bce4a42f upstream.
    
    The filter name is fixed to "exit_reason" for some kvm_exit events, no
    matter what architect we have. Actually, the filter name ("exit_reason")
    is only applicable to x86, meaning it's broken on other architects
    including aarch64.
    
    This fixes the issue by providing various kvm_exit filter names, depending
    on architect we're on. Afterwards, the variable filter name is picked and
    applied through ioctl(fd, SET_FILTER).
    
    Reported-by: Andrew Jones <drjones@redhat.com>
    Signed-off-by: Gavin Shan <gshan@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3696eddd45944cfdb11a384e9d2849311d5cbc43
Author: Sean Young <sean@mess.org>
Date:   Thu Nov 21 11:10:47 2019 +0100

    media: rc: ensure lirc is initialized before registering input device
    
    commit 080d89f522e2baddb4fbbd1af4b67b5f92537ef8 upstream.
    
    Once rc_open is called on the input device, lirc events can be delivered.
    Ensure lirc is ready to do so else we might get this:
    
    Registered IR keymap rc-hauppauge
    rc rc0: Hauppauge WinTV PVR-350 as
    /devices/pci0000:00/0000:00:1e.0/0000:04:00.0/i2c-0/0-0018/rc/rc0
    input: Hauppauge WinTV PVR-350 as
    /devices/pci0000:00/0000:00:1e.0/0000:04:00.0/i2c-0/0-0018/rc/rc0/input9
    BUG: kernel NULL pointer dereference, address: 0000000000000038
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    CPU: 1 PID: 17 Comm: kworker/1:0 Not tainted 5.3.11-300.fc31.x86_64 #1
    Hardware name:  /DG43NB, BIOS NBG4310H.86A.0096.2009.0903.1845 09/03/2009
    Workqueue: events ir_work [ir_kbd_i2c]
    RIP: 0010:ir_lirc_scancode_event+0x3d/0xb0
    Code: a6 b4 07 00 00 49 81 c6 b8 07 00 00 55 53 e8 ba a7 9d ff 4c 89
    e7 49 89 45 00 e8 5e 7a 25 00 49 8b 1e 48 89 c5 4c 39 f3 74 58 <8b> 43
    38 8b 53 40 89 c1 2b 4b 3c 39 ca 72 41 21 d0 49 8b 7d 00 49
    RSP: 0018:ffffaae2000b3d88 EFLAGS: 00010017
    RAX: 0000000000000002 RBX: 0000000000000000 RCX: 0000000000000019
    RDX: 0000000000000001 RSI: 006e801b1f26ce6a RDI: ffff9e39797c37b4
    RBP: 0000000000000002 R08: 0000000000000001 R09: 0000000000000001
    R10: 0000000000000001 R11: 0000000000000001 R12: ffff9e39797c37b4
    R13: ffffaae2000b3db8 R14: ffff9e39797c37b8 R15: ffff9e39797c33d8
    FS:  0000000000000000(0000) GS:ffff9e397b680000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000038 CR3: 0000000035844000 CR4: 00000000000006e0
    Call Trace:
    ir_do_keydown+0x8e/0x2b0
    rc_keydown+0x52/0xc0
    ir_work+0xb8/0x130 [ir_kbd_i2c]
    process_one_work+0x19d/0x340
    worker_thread+0x50/0x3b0
    kthread+0xfb/0x130
    ? process_one_work+0x340/0x340
    ? kthread_park+0x80/0x80
    ret_from_fork+0x35/0x40
    Modules linked in: rc_hauppauge tuner msp3400 saa7127 saa7115 ivtv(+)
    tveeprom cx2341x v4l2_common videodev mc i2c_algo_bit ir_kbd_i2c
    ip_tables firewire_ohci e1000e serio_raw firewire_core ata_generic
    crc_itu_t pata_acpi pata_jmicron fuse
    CR2: 0000000000000038
    ---[ end trace c67c2697a99fa74b ]---
    RIP: 0010:ir_lirc_scancode_event+0x3d/0xb0
    Code: a6 b4 07 00 00 49 81 c6 b8 07 00 00 55 53 e8 ba a7 9d ff 4c 89
    e7 49 89 45 00 e8 5e 7a 25 00 49 8b 1e 48 89 c5 4c 39 f3 74 58 <8b> 43
    38 8b 53 40 89 c1 2b 4b 3c 39 ca 72 41 21 d0 49 8b 7d 00 49
    RSP: 0018:ffffaae2000b3d88 EFLAGS: 00010017
    RAX: 0000000000000002 RBX: 0000000000000000 RCX: 0000000000000019
    RDX: 0000000000000001 RSI: 006e801b1f26ce6a RDI: ffff9e39797c37b4
    RBP: 0000000000000002 R08: 0000000000000001 R09: 0000000000000001
    R10: 0000000000000001 R11: 0000000000000001 R12: ffff9e39797c37b4
    R13: ffffaae2000b3db8 R14: ffff9e39797c37b8 R15: ffff9e39797c33d8
    FS:  0000000000000000(0000) GS:ffff9e397b680000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000038 CR3: 0000000035844000 CR4: 00000000000006e0
    rc rc0: lirc_dev: driver ir_kbd_i2c registered at minor = 0, scancode
    receiver, no transmitter
    tuner-simple 0-0061: creating new instance
    tuner-simple 0-0061: type set to 2 (Philips NTSC (FI1236,FM1236 and
    compatibles))
    ivtv0: Registered device video0 for encoder MPG (4096 kB)
    ivtv0: Registered device video32 for encoder YUV (2048 kB)
    ivtv0: Registered device vbi0 for encoder VBI (1024 kB)
    ivtv0: Registered device video24 for encoder PCM (320 kB)
    ivtv0: Registered device radio0 for encoder radio
    ivtv0: Registered device video16 for decoder MPG (1024 kB)
    ivtv0: Registered device vbi8 for decoder VBI (64 kB)
    ivtv0: Registered device vbi16 for decoder VOUT
    ivtv0: Registered device video48 for decoder YUV (1024 kB)
    
    Cc: stable@vger.kernel.org
    Tested-by: Nick French <nickfrench@gmail.com>
    Reported-by: Nick French <nickfrench@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2c1ddb873f45522f95e01bd948ad4e9678ecf86
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 22 19:56:20 2019 +0200

    drm/rect: Avoid division by zero
    
    commit 433480c1afd44f3e1e664b85063d98cefeefa0ed upstream.
    
    Check for zero width/height destination rectangle in
    drm_rect_clip_scaled() to avoid a division by zero.
    
    Cc: stable@vger.kernel.org
    Fixes: f96bdf564f3e ("drm/rect: Handle rounding errors in drm_rect_clip_scaled, v3.")
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Testcase: igt/kms_selftest/drm_rect_clip_scaled_div_by_zero
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191122175623.13565-2-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b67a516c63d946cbfd4e87853f5fcc17e2536f0
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Tue Jan 14 17:12:18 2020 +0100

    gfs2: fix O_SYNC write handling
    
    commit 6e5e41e2dc4e4413296d5a4af54ac92d7cd52317 upstream.
    
    In gfs2_file_write_iter, for direct writes, the error checking in the buffered
    write fallback case is incomplete.  This can cause inode write errors to go
    undetected.  Fix and clean up gfs2_file_write_iter along the way.
    
    Based on a proposed fix by Christoph Hellwig <hch@lst.de>.
    
    Fixes: 967bcc91b044 ("gfs2: iomap direct I/O support")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e57e77e9321c453f220fdd19a24669c2a58a53be
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Jan 15 16:38:29 2020 +0100

    gfs2: move setting current->backing_dev_info
    
    commit 4c0e8dda608a51855225c611b5c6b442f95fbc56 upstream.
    
    Set current->backing_dev_info just around the buffered write calls to
    prepare for the next fix.
    
    Fixes: 967bcc91b044 ("gfs2: iomap direct I/O support")
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a90c2c5e8c01c50b6ba026742d0bfd3299b42d26
Author: Roberto Bergantinos Corpas <rbergant@redhat.com>
Date:   Tue Feb 4 11:32:56 2020 +0100

    sunrpc: expiry_time should be seconds not timeval
    
    commit 3d96208c30f84d6edf9ab4fac813306ac0d20c10 upstream.
    
    When upcalling gssproxy, cache_head.expiry_time is set as a
    timeval, not seconds since boot. As such, RPC cache expiry
    logic will not clean expired objects created under
    auth.rpcsec.context cache.
    
    This has proven to cause kernel memory leaks on field. Using
    64 bit variants of getboottime/timespec
    
    Expiration times have worked this way since 2010's c5b29f885afe "sunrpc:
    use seconds since boot in expiry cache".  The gssproxy code introduced
    in 2012 added gss_proxy_save_rsc and introduced the bug.  That's a while
    for this to lurk, but it required a bit of an extreme case to make it
    obvious.
    
    Signed-off-by: Roberto Bergantinos Corpas <rbergant@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 030d794bf498 "SUNRPC: Use gssproxy upcall for server..."
    Tested-By: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eab22172e982f34a37ef168fafcaa442fc05fffe
Author: Brian Norris <briannorris@chromium.org>
Date:   Mon Jan 6 14:42:12 2020 -0800

    mwifiex: fix unbalanced locking in mwifiex_process_country_ie()
    
    commit 65b1aae0d9d5962faccc06bdb8e91a2a0b09451c upstream.
    
    We called rcu_read_lock(), so we need to call rcu_read_unlock() before
    we return.
    
    Fixes: 3d94a4a8373b ("mwifiex: fix possible heap overflow in mwifiex_process_country_ie()")
    Cc: stable@vger.kernel.org
    Cc: huangwen <huangwenabc@gmail.com>
    Cc: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Acked-by: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d07acc5e16484f0355d4448fe39f1cf20edefcf9
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Fri Jan 31 15:45:25 2020 +0200

    iwlwifi: don't throw error when trying to remove IGTK
    
    commit 197288d5ba8a5289f22d3aeb4fca3824bfd9b4af upstream.
    
    The IGTK keys are only removed by mac80211 after it has already
    removed the AP station.  This causes the driver to throw an error
    because mac80211 is trying to remove the IGTK when the station doesn't
    exist anymore.
    
    The firmware is aware that the station has been removed and can deal
    with it the next time we try to add an IGTK for a station, so we
    shouldn't try to remove the key if the station ID is
    IWL_MVM_INVALID_STA.  Do this by removing the check for mvm_sta before
    calling iwl_mvm_send_sta_igtk() and check return from that function
    gracefully if the station ID is invalid.
    
    Cc: stable@vger.kernel.org # 4.12+
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ca9b9f345dc737b6c0648fde4668693eb5723ba
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Oct 3 14:50:31 2019 -0600

    ARM: tegra: Enable PLLP bypass during Tegra124 LP1
    
    commit 1a3388d506bf5b45bb283e6a4c4706cfb4897333 upstream.
    
    For a little over a year, U-Boot has configured the flow controller to
    perform automatic RAM re-repair on off->on power transitions of the CPU
    rail[1]. This is mandatory for correct operation of Tegra124. However,
    RAM re-repair relies on certain clocks, which the kernel must enable and
    leave running. PLLP is one of those clocks. This clock is shut down
    during LP1 in order to save power. Enable bypass (which I believe routes
    osc_div_clk, essentially the crystal clock, to the PLL output) so that
    this clock signal toggles even though the PLL is not active. This is
    required so that LP1 power mode (system suspend) operates correctly.
    
    The bypass configuration must then be undone when resuming from LP1, so
    that all peripheral clocks run at the expected rate. Without this, many
    peripherals won't work correctly; for example, the UART baud rate would
    be incorrect.
    
    NVIDIA's downstream kernel code only does this if not compiled for
    Tegra30, so the added code is made conditional upon the chip ID.
    NVIDIA's downstream code makes this change conditional upon the active
    CPU cluster. The upstream kernel currently doesn't support cluster
    switching, so this patch doesn't test the active CPU cluster ID.
    
    [1] 3cc7942a4ae5 ARM: tegra: implement RAM repair
    
    Reported-by: Jonathan Hunter <jonathanh@nvidia.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18d07e43e464f227b195c092752c1618d6073d0a
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Jan 22 12:23:20 2020 +0000

    Btrfs: fix race between adding and putting tree mod seq elements and nodes
    
    commit 7227ff4de55d931bbdc156c8ef0ce4f100c78a5b upstream.
    
    There is a race between adding and removing elements to the tree mod log
    list and rbtree that can lead to use-after-free problems.
    
    Consider the following example that explains how/why the problems happens:
    
    1) Task A has mod log element with sequence number 200. It currently is
       the only element in the mod log list;
    
    2) Task A calls btrfs_put_tree_mod_seq() because it no longer needs to
       access the tree mod log. When it enters the function, it initializes
       'min_seq' to (u64)-1. Then it acquires the lock 'tree_mod_seq_lock'
       before checking if there are other elements in the mod seq list.
       Since the list it empty, 'min_seq' remains set to (u64)-1. Then it
       unlocks the lock 'tree_mod_seq_lock';
    
    3) Before task A acquires the lock 'tree_mod_log_lock', task B adds
       itself to the mod seq list through btrfs_get_tree_mod_seq() and gets a
       sequence number of 201;
    
    4) Some other task, name it task C, modifies a btree and because there
       elements in the mod seq list, it adds a tree mod elem to the tree
       mod log rbtree. That node added to the mod log rbtree is assigned
       a sequence number of 202;
    
    5) Task B, which is doing fiemap and resolving indirect back references,
       calls btrfs get_old_root(), with 'time_seq' == 201, which in turn
       calls tree_mod_log_search() - the search returns the mod log node
       from the rbtree with sequence number 202, created by task C;
    
    6) Task A now acquires the lock 'tree_mod_log_lock', starts iterating
       the mod log rbtree and finds the node with sequence number 202. Since
       202 is less than the previously computed 'min_seq', (u64)-1, it
       removes the node and frees it;
    
    7) Task B still has a pointer to the node with sequence number 202, and
       it dereferences the pointer itself and through the call to
       __tree_mod_log_rewind(), resulting in a use-after-free problem.
    
    This issue can be triggered sporadically with the test case generic/561
    from fstests, and it happens more frequently with a higher number of
    duperemove processes. When it happens to me, it either freezes the VM or
    it produces a trace like the following before crashing:
    
      [ 1245.321140] general protection fault: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
      [ 1245.321200] CPU: 1 PID: 26997 Comm: pool Not tainted 5.5.0-rc6-btrfs-next-52 #1
      [ 1245.321235] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014
      [ 1245.321287] RIP: 0010:rb_next+0x16/0x50
      [ 1245.321307] Code: ....
      [ 1245.321372] RSP: 0018:ffffa151c4d039b0 EFLAGS: 00010202
      [ 1245.321388] RAX: 6b6b6b6b6b6b6b6b RBX: ffff8ae221363c80 RCX: 6b6b6b6b6b6b6b6b
      [ 1245.321409] RDX: 0000000000000001 RSI: 0000000000000000 RDI: ffff8ae221363c80
      [ 1245.321439] RBP: ffff8ae20fcc4688 R08: 0000000000000002 R09: 0000000000000000
      [ 1245.321475] R10: ffff8ae20b120910 R11: 00000000243f8bb1 R12: 0000000000000038
      [ 1245.321506] R13: ffff8ae221363c80 R14: 000000000000075f R15: ffff8ae223f762b8
      [ 1245.321539] FS:  00007fdee1ec7700(0000) GS:ffff8ae236c80000(0000) knlGS:0000000000000000
      [ 1245.321591] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [ 1245.321614] CR2: 00007fded4030c48 CR3: 000000021da16003 CR4: 00000000003606e0
      [ 1245.321642] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [ 1245.321668] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [ 1245.321706] Call Trace:
      [ 1245.321798]  __tree_mod_log_rewind+0xbf/0x280 [btrfs]
      [ 1245.321841]  btrfs_search_old_slot+0x105/0xd00 [btrfs]
      [ 1245.321877]  resolve_indirect_refs+0x1eb/0xc60 [btrfs]
      [ 1245.321912]  find_parent_nodes+0x3dc/0x11b0 [btrfs]
      [ 1245.321947]  btrfs_check_shared+0x115/0x1c0 [btrfs]
      [ 1245.321980]  ? extent_fiemap+0x59d/0x6d0 [btrfs]
      [ 1245.322029]  extent_fiemap+0x59d/0x6d0 [btrfs]
      [ 1245.322066]  do_vfs_ioctl+0x45a/0x750
      [ 1245.322081]  ksys_ioctl+0x70/0x80
      [ 1245.322092]  ? trace_hardirqs_off_thunk+0x1a/0x1c
      [ 1245.322113]  __x64_sys_ioctl+0x16/0x20
      [ 1245.322126]  do_syscall_64+0x5c/0x280
      [ 1245.322139]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [ 1245.322155] RIP: 0033:0x7fdee3942dd7
      [ 1245.322177] Code: ....
      [ 1245.322258] RSP: 002b:00007fdee1ec6c88 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [ 1245.322294] RAX: ffffffffffffffda RBX: 00007fded40210d8 RCX: 00007fdee3942dd7
      [ 1245.322314] RDX: 00007fded40210d8 RSI: 00000000c020660b RDI: 0000000000000004
      [ 1245.322337] RBP: 0000562aa89e7510 R08: 0000000000000000 R09: 00007fdee1ec6d44
      [ 1245.322369] R10: 0000000000000073 R11: 0000000000000246 R12: 00007fdee1ec6d48
      [ 1245.322390] R13: 00007fdee1ec6d40 R14: 00007fded40210d0 R15: 00007fdee1ec6d50
      [ 1245.322423] Modules linked in: ....
      [ 1245.323443] ---[ end trace 01de1e9ec5dff3cd ]---
    
    Fix this by ensuring that btrfs_put_tree_mod_seq() computes the minimum
    sequence number and iterates the rbtree while holding the lock
    'tree_mod_log_lock' in write mode. Also get rid of the 'tree_mod_seq_lock'
    lock, since it is now redundant.
    
    Fixes: bd989ba359f2ac ("Btrfs: add tree modification log functions")
    Fixes: 097b8a7c9e48e2 ("Btrfs: join tree mod log code with the code holding back delayed refs")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19ddbec7ff23270b3b70825dbfd06444108e0f7a
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Jan 17 08:57:51 2020 -0500

    btrfs: set trans->drity in btrfs_commit_transaction
    
    commit d62b23c94952e78211a383b7d90ef0afbd9a3717 upstream.
    
    If we abort a transaction we have the following sequence
    
    if (!trans->dirty && list_empty(&trans->new_bgs))
            return;
    WRITE_ONCE(trans->transaction->aborted, err);
    
    The idea being if we didn't modify anything with our trans handle then
    we don't really need to abort the whole transaction, maybe the other
    trans handles are fine and we can carry on.
    
    However in the case of create_snapshot we add a pending_snapshot object
    to our transaction and then commit the transaction.  We don't actually
    modify anything.  sync() behaves the same way, attach to an existing
    transaction and commit it.  This means that if we have an IO error in
    the right places we could abort the committing transaction with our
    trans->dirty being not set and thus not set transaction->aborted.
    
    This is a problem because in the create_snapshot() case we depend on
    pending->error being set to something, or btrfs_commit_transaction
    returning an error.
    
    If we are not the trans handle that gets to commit the transaction, and
    we're waiting on the commit to happen we get our return value from
    cur_trans->aborted.  If this was not set to anything because sync() hit
    an error in the transaction commit before it could modify anything then
    cur_trans->aborted would be 0.  Thus we'd return 0 from
    btrfs_commit_transaction() in create_snapshot.
    
    This is a problem because we then try to do things with
    pending_snapshot->snap, which will be NULL because we didn't create the
    snapshot, and then we'll get a NULL pointer dereference like the
    following
    
    "BUG: kernel NULL pointer dereference, address: 00000000000001f0"
    RIP: 0010:btrfs_orphan_cleanup+0x2d/0x330
    Call Trace:
     ? btrfs_mksubvol.isra.31+0x3f2/0x510
     btrfs_mksubvol.isra.31+0x4bc/0x510
     ? __sb_start_write+0xfa/0x200
     ? mnt_want_write_file+0x24/0x50
     btrfs_ioctl_snap_create_transid+0x16c/0x1a0
     btrfs_ioctl_snap_create_v2+0x11e/0x1a0
     btrfs_ioctl+0x1534/0x2c10
     ? free_debug_processing+0x262/0x2a3
     do_vfs_ioctl+0xa6/0x6b0
     ? do_sys_open+0x188/0x220
     ? syscall_trace_enter+0x1f8/0x330
     ksys_ioctl+0x60/0x90
     __x64_sys_ioctl+0x16/0x20
     do_syscall_64+0x4a/0x1b0
    
    In order to fix this we need to make sure anybody who calls
    commit_transaction has trans->dirty set so that they properly set the
    trans->transaction->aborted value properly so any waiters know bad
    things happened.
    
    This was found while I was running generic/475 with my modified
    fsstress, it reproduced within a few runs.  I ran with this patch all
    night and didn't see the problem again.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 587292a17365c189afdc72a98cc86703f681454f
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 19 12:07:33 2019 +0000

    Btrfs: fix missing hole after hole punching and fsync when using NO_HOLES
    
    commit 0e56315ca147b3e60c7bf240233a301d3c7fb508 upstream.
    
    When using the NO_HOLES feature, if we punch a hole into a file and then
    fsync it, there are cases where a subsequent fsync will miss the fact that
    a hole was punched, resulting in the holes not existing after replaying
    the log tree.
    
    Essentially these cases all imply that, tree-log.c:copy_items(), is not
    invoked for the leafs that delimit holes, because nothing changed those
    leafs in the current transaction. And it's precisely copy_items() where
    we currenly detect and log holes, which works as long as the holes are
    between file extent items in the input leaf or between the beginning of
    input leaf and the previous leaf or between the last item in the leaf
    and the next leaf.
    
    First example where we miss a hole:
    
      *) The extent items of the inode span multiple leafs;
    
      *) The punched hole covers a range that affects only the extent items of
         the first leaf;
    
      *) The fsync operation is done in full mode (BTRFS_INODE_NEEDS_FULL_SYNC
         is set in the inode's runtime flags).
    
      That results in the hole not existing after replaying the log tree.
    
      For example, if the fs/subvolume tree has the following layout for a
      particular inode:
    
          Leaf N, generation 10:
    
          [ ... INODE_ITEM INODE_REF EXTENT_ITEM (0 64K) EXTENT_ITEM (64K 128K) ]
    
          Leaf N + 1, generation 10:
    
          [ EXTENT_ITEM (128K 64K) ... ]
    
      If at transaction 11 we punch a hole coverting the range [0, 128K[, we end
      up dropping the two extent items from leaf N, but we don't touch the other
      leaf, so we end up in the following state:
    
          Leaf N, generation 11:
    
          [ ... INODE_ITEM INODE_REF ]
    
          Leaf N + 1, generation 10:
    
          [ EXTENT_ITEM (128K 64K) ... ]
    
      A full fsync after punching the hole will only process leaf N because it
      was modified in the current transaction, but not leaf N + 1, since it
      was not modified in the current transaction (generation 10 and not 11).
      As a result the fsync will not log any holes, because it didn't process
      any leaf with extent items.
    
    Second example where we will miss a hole:
    
      *) An inode as its items spanning 5 (or more) leafs;
    
      *) A hole is punched and it covers only the extents items of the 3rd
         leaf. This resulsts in deleting the entire leaf and not touching any
         of the other leafs.
    
      So the only leaf that is modified in the current transaction, when
      punching the hole, is the first leaf, which contains the inode item.
      During the full fsync, the only leaf that is passed to copy_items()
      is that first leaf, and that's not enough for the hole detection
      code in copy_items() to determine there's a hole between the last
      file extent item in the 2nd leaf and the first file extent item in
      the 3rd leaf (which was the 4th leaf before punching the hole).
    
    Fix this by scanning all leafs and punch holes as necessary when doing a
    full fsync (less common than a non-full fsync) when the NO_HOLES feature
    is enabled. The lack of explicit file extent items to mark holes makes it
    necessary to scan existing extents to determine if holes exist.
    
    A test case for fstests follows soon.
    
    Fixes: 16e7549f045d33 ("Btrfs: incompatible format change to remove hole extents")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68e81e14ddb897d5392cb4967ac398b52435adea
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 12:05:10 2020 +0300

    jbd2_seq_info_next should increase position index
    
    commit 1a8e9cf40c9a6a2e40b1e924b13ed303aeea4418 upstream.
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    Script below generates endless output
     $ q=;while read -r r;do echo "$((++q)) $r";done </proc/fs/jbd2/DEV/info
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    
    Fixes: 1f4aace60b0e ("fs/seq_file.c: simplify seq_file iteration code and interface")
    Cc: stable@kernel.org
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/d13805e5-695e-8ac3-b678-26ca2313629f@virtuozzo.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 729c1232c7f1c6427851d835d0d36c2d75f097bf
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Sun Feb 2 17:53:54 2020 -0500

    NFS: Directory page cache pages need to be locked when read
    
    commit 114de38225d9b300f027e2aec9afbb6e0def154b upstream.
    
    When a NFS directory page cache page is removed from the page cache,
    its contents are freed through a call to nfs_readdir_clear_array().
    To prevent the removal of the page cache entry until after we've
    finished reading it, we must take the page lock.
    
    Fixes: 11de3b11e08c ("NFS: Fix a memory leak in nfs_readdir")
    Cc: stable@vger.kernel.org # v2.6.37+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68b1724316b0f0b554bc4af15f5ab8f52d2b1bed
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Sun Feb 2 17:53:53 2020 -0500

    NFS: Fix memory leaks and corruption in readdir
    
    commit 4b310319c6a8ce708f1033d57145e2aa027a883c upstream.
    
    nfs_readdir_xdr_to_array() must not exit without having initialised
    the array, so that the page cache deletion routines can safely
    call nfs_readdir_clear_array().
    Furthermore, we should ensure that if we exit nfs_readdir_filler()
    with an error, we free up any page contents to prevent a leak
    if we try to fill the page again.
    
    Fixes: 11de3b11e08c ("NFS: Fix a memory leak in nfs_readdir")
    Cc: stable@vger.kernel.org # v2.6.37+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a33aeda848eb9f03227b554cdc12ca0520d84e2
Author: Arun Easi <aeasi@marvell.com>
Date:   Thu Jan 23 20:50:14 2020 -0800

    scsi: qla2xxx: Fix unbound NVME response length
    
    commit 00fe717ee1ea3c2979db4f94b1533c57aed8dea9 upstream.
    
    On certain cases when response length is less than 32, NVME response data
    is supplied inline in IOCB. This is indicated by some combination of state
    flags. There was an instance when a high, and incorrect, response length
    was indicated causing driver to overrun buffers. Fix this by checking and
    limiting the response payload length.
    
    Fixes: 7401bc18d1ee3 ("scsi: qla2xxx: Add FC-NVMe command handling")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200124045014.23554-1-hmadhani@marvell.com
    Signed-off-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 148c920ee5327d559d6856c1546015cfb4c96dfd
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Tue Dec 10 00:21:44 2019 +0800

    crypto: picoxcell - adjust the position of tasklet_init and fix missed tasklet_kill
    
    commit 7f8c36fe9be46862c4f3c5302f769378028a34fa upstream.
    
    Since tasklet is needed to be initialized before registering IRQ
    handler, adjust the position of tasklet_init to fix the wrong order.
    
    Besides, to fix the missed tasklet_kill, this patch adds a helper
    function and uses devm_add_action to kill the tasklet automatically.
    
    Fixes: ce92136843cb ("crypto: picoxcell - add support for the picoxcell crypto engines")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b0a3e013c1753b29cdfef99e3494b723cf59eb2
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Sat Dec 7 22:15:15 2019 +0800

    crypto: api - Fix race condition in crypto_spawn_alg
    
    commit 73669cc556462f4e50376538d77ee312142e8a8a upstream.
    
    The function crypto_spawn_alg is racy because it drops the lock
    before shooting the dying algorithm.  The algorithm could disappear
    altogether before we shoot it.
    
    This patch fixes it by moving the shooting into the locked section.
    
    Fixes: 6bfd48096ff8 ("[CRYPTO] api: Added spawns")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ede3b2392d527da83ef2bc76f0ff2b7795bfe21c
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Thu Dec 5 09:54:01 2019 +0000

    crypto: atmel-aes - Fix counter overflow in CTR mode
    
    commit 781a08d9740afa73357f1a60d45d7c93d7cca2dd upstream.
    
    32 bit counter is not supported by neither of our AES IPs, all implement
    a 16 bit block counter. Drop the 32 bit block counter logic.
    
    Fixes: fcac83656a3e ("crypto: atmel-aes - fix the counter overflow in CTR mode")
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c90aa32df0c3d1fe8adbb346185cdbbaf9eff571
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Nov 29 16:40:24 2019 +0800

    crypto: pcrypt - Do not clear MAY_SLEEP flag in original request
    
    commit e8d998264bffade3cfe0536559f712ab9058d654 upstream.
    
    We should not be modifying the original request's MAY_SLEEP flag
    upon completion.  It makes no sense to do so anyway.
    
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Fixes: 5068c7a883d1 ("crypto: pcrypt - Add pcrypt crypto...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Tested-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f28e641be5c217b9c9fb61477f96992975644528
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Nov 27 13:01:36 2019 +0100

    crypto: ccp - set max RSA modulus size for v3 platform devices as well
    
    commit 11548f5a5747813ff84bed6f2ea01100053b0d8d upstream.
    
    AMD Seattle incorporates a non-PCI version of the v3 CCP crypto
    accelerator, and this version was left behind when the maximum
    RSA modulus size was parameterized in order to support v5 hardware
    which supports larger moduli than v3 hardware does. Due to this
    oversight, RSA acceleration no longer works at all on these systems.
    
    Fix this by setting the .rsamax property to the appropriate value
    for v3 platform hardware.
    
    Fixes: e28c190db66830c0 ("csrypto: ccp - Expand RSA support for a v5 ccp")
    Cc: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Acked-by: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1e311beba942c7c2a1d76311f0fc25b17739767
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Jan 20 14:06:41 2020 +0100

    samples/bpf: Don't try to remove user's homedir on clean
    
    commit b2e5e93ae8af6a34bca536cdc4b453ab1e707b8b upstream.
    
    The 'clean' rule in the samples/bpf Makefile tries to remove backup
    files (ending in ~). However, if no such files exist, it will instead try
    to remove the user's home directory. While the attempt is mostly harmless,
    it does lead to a somewhat scary warning like this:
    
    rm: cannot remove '~': Is a directory
    
    Fix this by using find instead of shell expansion to locate any actual
    backup files that need to be removed.
    
    Fixes: b62a796c109c ("samples/bpf: allow make to be run from samples/bpf/ directory")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Link: https://lore.kernel.org/bpf/157952560126.1683545.7273054725976032511.stgit@toke.dk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0948d6294d7bb1957125b01adc2e8df75da52b98
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Feb 5 09:20:32 2020 -0500

    ftrace: Protect ftrace_graph_hash with ftrace_sync
    
    [ Upstream commit 54a16ff6f2e50775145b210bcd94d62c3c2af117 ]
    
    As function_graph tracer can run when RCU is not "watching", it can not be
    protected by synchronize_rcu() it requires running a task on each CPU before
    it can be freed. Calling schedule_on_each_cpu(ftrace_sync) needs to be used.
    
    Link: https://lore.kernel.org/r/20200205131110.GT2935@paulmck-ThinkPad-P72
    
    Cc: stable@vger.kernel.org
    Fixes: b9b0c831bed26 ("ftrace: Convert graph filter to use hash tables")
    Reported-by: "Paul E. McKenney" <paulmck@kernel.org>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c03d23598062175c450a646763c2c0045a7aa35e
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Feb 5 02:17:57 2020 -0500

    ftrace: Add comment to why rcu_dereference_sched() is open coded
    
    [ Upstream commit 16052dd5bdfa16dbe18d8c1d4cde2ddab9d23177 ]
    
    Because the function graph tracer can execute in sections where RCU is not
    "watching", the rcu_dereference_sched() for the has needs to be open coded.
    This is fine because the RCU "flavor" of the ftrace hash is protected by
    its own RCU handling (it does its own little synchronization on every CPU
    and does not rely on RCU sched).
    
    Acked-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30afa80b0f6e03134d8e7d66a1111d066403ad3f
Author: Amol Grover <frextrite@gmail.com>
Date:   Wed Feb 5 11:27:02 2020 +0530

    tracing: Annotate ftrace_graph_notrace_hash pointer with __rcu
    
    [ Upstream commit fd0e6852c407dd9aefc594f54ddcc21d84803d3b ]
    
    Fix following instances of sparse error
    kernel/trace/ftrace.c:5667:29: error: incompatible types in comparison
    kernel/trace/ftrace.c:5813:21: error: incompatible types in comparison
    kernel/trace/ftrace.c:5868:36: error: incompatible types in comparison
    kernel/trace/ftrace.c:5870:25: error: incompatible types in comparison
    
    Use rcu_dereference_protected to dereference the newly annotated pointer.
    
    Link: http://lkml.kernel.org/r/20200205055701.30195-1-frextrite@gmail.com
    
    Signed-off-by: Amol Grover <frextrite@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f144ad2e843435fed0c2945544594e223a9410cc
Author: Amol Grover <frextrite@gmail.com>
Date:   Sat Feb 1 12:57:04 2020 +0530

    tracing: Annotate ftrace_graph_hash pointer with __rcu
    
    [ Upstream commit 24a9729f831462b1d9d61dc85ecc91c59037243f ]
    
    Fix following instances of sparse error
    kernel/trace/ftrace.c:5664:29: error: incompatible types in comparison
    kernel/trace/ftrace.c:5785:21: error: incompatible types in comparison
    kernel/trace/ftrace.c:5864:36: error: incompatible types in comparison
    kernel/trace/ftrace.c:5866:25: error: incompatible types in comparison
    
    Use rcu_dereference_protected to access the __rcu annotated pointer.
    
    Link: http://lkml.kernel.org/r/20200201072703.17330-1-frextrite@gmail.com
    
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Amol Grover <frextrite@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc34710a7aba5207e7cb99d11588c04535b3c53d
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Nov 19 13:17:31 2019 +0800

    padata: Remove broken queue flushing
    
    [ Upstream commit 07928d9bfc81640bab36f5190e8725894d93b659 ]
    
    The function padata_flush_queues is fundamentally broken because
    it cannot force padata users to complete the request that is
    underway.  IOW padata has to passively wait for the completion
    of any outstanding work.
    
    As it stands flushing is used in two places.  Its use in padata_stop
    is simply unnecessary because nothing depends on the queues to
    be flushed afterwards.
    
    The other use in padata_replace is more substantial as we depend
    on it to free the old pd structure.  This patch instead uses the
    pd->refcnt to dynamically free the pd structure once all requests
    are complete.
    
    Fixes: 2b73b07ab8a4 ("padata: Flush the padata queues actively")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Reviewed-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a999296636fbbec86aa2af5025b89493532e907d
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Jan 8 10:46:05 2020 -0500

    dm writecache: fix incorrect flush sequence when doing SSD mode commit
    
    commit aa9509209c5ac2f0b35d01a922bf9ae072d0c2fc upstream.
    
    When committing state, the function writecache_flush does the following:
    1. write metadata (writecache_commit_flushed)
    2. flush disk cache (writecache_commit_flushed)
    3. wait for data writes to complete (writecache_wait_for_ios)
    4. increase superblock seq_count
    5. write the superblock
    6. flush disk cache
    
    It may happen that at step 3, when we wait for some write to finish, the
    disk may report the write as finished, but the write only hit the disk
    cache and it is not yet stored in persistent storage. At step 5 we write
    the superblock - it may happen that the superblock is written before the
    write that we waited for in step 3. If the machine crashes, it may result
    in incorrect data being returned after reboot.
    
    In order to fix the bug, we must swap steps 2 and 3 in the above sequence,
    so that we first wait for writes to complete and then flush the disk
    cache.
    
    Fixes: 48debafe4f2f ("dm: add writecache target")
    Cc: stable@vger.kernel.org # 4.18+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9eb75d69e924722c3b062359f266073935ae0cf0
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Mon Jan 27 14:07:23 2020 -0500

    dm: fix potential for q->make_request_fn NULL pointer
    
    commit 47ace7e012b9f7ad71d43ac9063d335ea3d6820b upstream.
    
    Move blk_queue_make_request() to dm.c:alloc_dev() so that
    q->make_request_fn is never NULL during the lifetime of a DM device
    (even one that is created without a DM table).
    
    Otherwise generic_make_request() will crash simply by doing:
      dmsetup create -n test
      mount /dev/dm-N /mnt
    
    While at it, move ->congested_data initialization out of
    dm.c:alloc_dev() and into the bio-based specific init method.
    
    Reported-by: Stefan Bader <stefan.bader@canonical.com>
    BugLink: https://bugs.launchpad.net/bugs/1860231
    Fixes: ff36ab34583a ("dm: remove request-based logic from make_request_fn wrapper")
    Depends-on: c12c9a3c3860c ("dm: various cleanups to md->queue initialization code")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 607d7cf285f75a5f57207b141398bec4888b3758
Author: Milan Broz <gmazyland@gmail.com>
Date:   Mon Jan 6 10:11:47 2020 +0100

    dm crypt: fix benbi IV constructor crash if used in authenticated mode
    
    commit 4ea9471fbd1addb25a4d269991dc724e200ca5b5 upstream.
    
    If benbi IV is used in AEAD construction, for example:
      cryptsetup luksFormat <device> --cipher twofish-xts-benbi --key-size 512 --integrity=hmac-sha256
    the constructor uses wrong skcipher function and crashes:
    
     BUG: kernel NULL pointer dereference, address: 00000014
     ...
     EIP: crypt_iv_benbi_ctr+0x15/0x70 [dm_crypt]
     Call Trace:
      ? crypt_subkey_size+0x20/0x20 [dm_crypt]
      crypt_ctr+0x567/0xfc0 [dm_crypt]
      dm_table_add_target+0x15f/0x340 [dm_mod]
    
    Fix this by properly using crypt_aead_blocksize() in this case.
    
    Fixes: ef43aa38063a6 ("dm crypt: add cryptographic data integrity protection (authenticated encryption)")
    Cc: stable@vger.kernel.org # v4.12+
    Link: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=941051
    Reported-by: Jerad Simpson <jbsimpson@gmail.com>
    Signed-off-by: Milan Broz <gmazyland@gmail.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fac9f574cd2536abcdd645ee23d35c0e819d7ec
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Jan 7 11:58:42 2020 +0000

    dm space map common: fix to ensure new block isn't already in use
    
    commit 4feaef830de7ffdd8352e1fe14ad3bf13c9688f8 upstream.
    
    The space-maps track the reference counts for disk blocks allocated by
    both the thin-provisioning and cache targets.  There are variants for
    tracking metadata blocks and data blocks.
    
    Transactionality is implemented by never touching blocks from the
    previous transaction, so we can rollback in the event of a crash.
    
    When allocating a new block we need to ensure the block is free (has
    reference count of 0) in both the current and previous transaction.
    Prior to this fix we were doing this by searching for a free block in
    the previous transaction, and relying on a 'begin' counter to track
    where the last allocation in the current transaction was.  This
    'begin' field was not being updated in all code paths (eg, increment
    of a data block reference count due to breaking sharing of a neighbour
    block in the same btree leaf).
    
    This fix keeps the 'begin' field, but now it's just a hint to speed up
    the search.  Instead the current transaction is searched for a free
    block, and then the old transaction is double checked to ensure it's
    free.  Much simpler.
    
    This fixes reports of sm_disk_new_block()'s BUG_ON() triggering when
    DM thin-provisioning's snapshots are heavily used.
    
    Reported-by: Eric Wheeler <dm-devel@lists.ewheeler.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ae8d3a5f3b47543fe90478b6707d1f03b966559
Author: Dmitry Fomichev <dmitry.fomichev@wdc.com>
Date:   Mon Dec 23 17:05:46 2019 -0800

    dm zoned: support zone sizes smaller than 128MiB
    
    commit b39962950339912978484cdac50069258545d753 upstream.
    
    dm-zoned is observed to log failed kernel assertions and not work
    correctly when operating against a device with a zone size smaller
    than 128MiB (e.g. 32768 bits per 4K block). The reason is that the
    bitmap size per zone is calculated as zero with such a small zone
    size. Fix this problem and also make the code related to zone bitmap
    management be able to handle per zone bitmaps smaller than a single
    block.
    
    A dm-zoned-tools patch is required to properly format dm-zoned devices
    with zone sizes smaller than 128MiB.
    
    Fixes: 3b1a94c88b79 ("dm zoned: drive-managed zoned block device target")
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Fomichev <dmitry.fomichev@wdc.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a7c008c64733dc94f9808cebbcb652342b9870e
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sun Jan 26 22:52:47 2020 +1100

    of: Add OF_DMA_DEFAULT_COHERENT & select it on powerpc
    
    commit dabf6b36b83a18d57e3d4b9d50544ed040d86255 upstream.
    
    There's an OF helper called of_dma_is_coherent(), which checks if a
    device has a "dma-coherent" property to see if the device is coherent
    for DMA.
    
    But on some platforms devices are coherent by default, and on some
    platforms it's not possible to update existing device trees to add the
    "dma-coherent" property.
    
    So add a Kconfig symbol to allow arch code to tell
    of_dma_is_coherent() that devices are coherent by default, regardless
    of the presence of the property.
    
    Select that symbol on powerpc when NOT_COHERENT_CACHE is not set, ie.
    when the system has a coherent cache.
    
    Fixes: 92ea637edea3 ("of: introduce of_dma_is_coherent() helper")
    Cc: stable@vger.kernel.org # v3.16+
    Reported-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Tested-by: Christian Zigotzky <chzigotzky@xenosoft.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76d587bd579a08ddcd51274c6d9fff4e885e184d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 23 00:11:24 2020 +0100

    PM: core: Fix handling of devices deleted during system-wide resume
    
    commit 0552e05fdfea191a2cf3a0abd33574b5ef9ca818 upstream.
    
    If a device is deleted by one of its system-wide resume callbacks
    (for example, because it does not appear to be present or accessible
    any more) along with its children, the resume of the children may
    continue leading to use-after-free errors and other issues
    (potentially).
    
    Namely, if the device's children are resumed asynchronously, their
    resume may have been scheduled already before the device's callback
    runs and so the device may be deleted while dpm_wait_for_superior()
    is being executed for them.  The memory taken up by the parent device
    object may be freed then while dpm_wait() is waiting for the parent's
    resume callback to complete, which leads to a use-after-free.
    Moreover, the resume of the children is really not expected to
    continue after they have been unregistered, so it must be terminated
    right away in that case.
    
    To address this problem, modify dpm_wait_for_superior() to check
    if the target device is still there in the system-wide PM list of
    devices and if so, to increment its parent's reference counter, both
    under dpm_list_mtx which prevents device_del() running for the child
    from dropping the parent's reference counter prematurely.
    
    If the device is not present in the system-wide PM list of devices
    any more, the resume of it cannot continue, so check that again after
    dpm_wait() returns, which means that the parent's callback has been
    completed, and pass the result of that check to the caller of
    dpm_wait_for_superior() to allow it to abort the device's resume
    if it is not there any more.
    
    Link: https://lore.kernel.org/linux-pm/1579568452-27253-1-git-send-email-chanho.min@lge.com
    Reported-by: Chanho Min <chanho.min@lge.com>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 487da4d9a3f9314669e0d2a4f09d5e184fdda557
Author: Chengguang Xu <cgxu519@mykernel.net>
Date:   Sat Jan 4 22:20:04 2020 +0800

    f2fs: code cleanup for f2fs_statfs_project()
    
    commit bf2cbd3c57159c2b639ee8797b52ab5af180bf83 upstream.
    
    Calling min_not_zero() to simplify complicated prjquota
    limit comparison in f2fs_statfs_project().
    
    Signed-off-by: Chengguang Xu <cgxu519@mykernel.net>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d38118184d0db5c509bd7fde800e632abad8c99e
Author: Chengguang Xu <cgxu519@mykernel.net>
Date:   Sat Jan 4 22:20:03 2020 +0800

    f2fs: fix miscounted block limit in f2fs_statfs_project()
    
    commit acdf2172172a511f97fa21ed0ee7609a6d3b3a07 upstream.
    
    statfs calculates Total/Used/Avail disk space in block unit,
    so we should translate soft/hard prjquota limit to block unit
    as well.
    
    Below testing result shows the block/inode numbers of
    Total/Used/Avail from df command are all correct afer
    applying this patch.
    
    [root@localhost quota-tools]\# ./repquota -P /dev/sdb1

commit e039a59365be06b974644f10ff57a61c8a4d2620
Author: Chengguang Xu <cgxu519@mykernel.net>
Date:   Mon Nov 25 11:20:36 2019 +0800

    f2fs: choose hardlimit when softlimit is larger than hardlimit in f2fs_statfs_project()
    
    commit 909110c060f22e65756659ec6fa957ae75777e00 upstream.
    
    Setting softlimit larger than hardlimit seems meaningless
    for disk quota but currently it is allowed. In this case,
    there may be a bit of comfusion for users when they run
    df comamnd to directory which has project quota.
    
    For example, we set 20M softlimit and 10M hardlimit of
    block usage limit for project quota of test_dir(project id 123).
    
    [root@hades f2fs]# repquota -P -a

commit 65a876ee848b23170708648a418fe260d4c7ae3a
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Sun Dec 22 22:47:54 2019 +0200

    ovl: fix wrong WARN_ON() in ovl_cache_update_ino()
    
    commit 4c37e71b713ecffe81f8e6273c6835e54306d412 upstream.
    
    The WARN_ON() that child entry is always on overlay st_dev became wrong
    when we allowed this function to update d_ino in non-samefs setup with xino
    enabled.
    
    It is not true in case of xino bits overflow on a non-dir inode.  Leave the
    WARN_ON() only for directories, where assertion is still true.
    
    Fixes: adbf4f7ea834 ("ovl: consistent d_ino for non-samefs with xino")
    Cc: <stable@vger.kernel.org> # v4.17+
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d12fbc55c1e9d293cdb73695377b7cd6421ca7d6
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Thu Sep 19 11:11:37 2019 -0400

    power: supply: ltc2941-battery-gauge: fix use-after-free
    
    commit a60ec78d306c6548d4adbc7918b587a723c555cc upstream.
    
    This driver's remove path calls cancel_delayed_work().
    However, that function does not wait until the work function
    finishes. This could mean that the work function is still
    running after the driver's remove function has finished,
    which would result in a use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which ensures that
    that the work is properly cancelled, no longer running, and
    unable to re-schedule itself.
    
    This issue was detected with the help of Coccinelle.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6b40467ea75bc374f6c4a3e202bbb3dbb1ae651
Author: Quinn Tran <qutran@marvell.com>
Date:   Tue Dec 17 14:06:16 2019 -0800

    scsi: qla2xxx: Fix mtcp dump collection failure
    
    commit 641e0efddcbde52461e017136acd3ce7f2ef0c14 upstream.
    
    MTCP dump failed due to MB Reg 10 was picking garbage data from stack
    memory.
    
    Fixes: 81178772b636a ("[SCSI] qla2xxx: Implemetation of mctp.")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191217220617.28084-14-hmadhani@marvell.com
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41b1306c006be8af0ba9ed148c62058ca2909597
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 27 10:31:07 2020 +0100

    scripts/find-unused-docs: Fix massive false positives
    
    commit 1630146db2111412e7524d05d812ff8f2c75977e upstream.
    
    scripts/find-unused-docs.sh invokes scripts/kernel-doc to find out if a
    source file contains kerneldoc or not.
    
    However, as it passes the no longer supported "-text" option to
    scripts/kernel-doc, the latter prints out its help text, causing all
    files to be considered containing kerneldoc.
    
    Get rid of these false positives by removing the no longer supported
    "-text" option from the scripts/kernel-doc invocation.
    
    Cc: stable@vger.kernel.org  # 4.16+
    Fixes: b05142675310d2ac ("scripts: kernel-doc: get rid of unused output formats")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200127093107.26401-1-geert+renesas@glider.be
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caca84c3bb7cf5ad5d65f3cfb513a6cb28900968
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:43 2020 +0200

    crypto: ccree - fix PM race condition
    
    commit 15fd2566bf54ee4d4781d8f170acfc9472a1541f upstream.
    
    The PM code was racy, possibly causing the driver to submit
    requests to a powered down device. Fix the race and while
    at it simplify the PM code.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Fixes: 1358c13a48c4 ("crypto: ccree - fix resume race condition on init")
    Cc: stable@kernel.org # v4.20
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1104fc044ffbffffe0a5ddf4a81e10addeed080c
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:40 2020 +0200

    crypto: ccree - fix pm wrongful error reporting
    
    commit cedca59fae5834af8445b403c66c9953754375d7 upstream.
    
    pm_runtime_get_sync() can return 1 as a valid (none error) return
    code. Treat it as such.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbff4f2f7ac0f7beaf4cf77198b5ba238ca6b1e6
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Wed Nov 27 10:49:08 2019 +0200

    crypto: ccree - fix backlog memory leak
    
    commit 4df2ef25b3b3618fd708ab484fe6239abd130fec upstream.
    
    Fix brown paper bag bug of not releasing backlog list item buffer
    when backlog was consumed causing a memory leak when backlog is
    used.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12fa296ad27e784d8a9201c953a3e3b2542a75b1
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Dec 6 13:55:17 2019 +0800

    crypto: api - Check spawn->alg under lock in crypto_drop_spawn
    
    commit 7db3b61b6bba4310f454588c2ca6faf2958ad79f upstream.
    
    We need to check whether spawn->alg is NULL under lock as otherwise
    the algorithm could be removed from under us after we have checked
    it and found it to be non-NULL.  This could cause us to remove the
    spawn from a non-existent list.
    
    Fixes: 7ede5a5ba55a ("crypto: api - Fix crypto_drop_spawn crash...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3f9cfca057af9635c23c31b38c1c3e6a34a5319
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Jan 4 19:24:08 2020 -0600

    mfd: axp20x: Mark AXP20X_VBUS_IPSOUT_MGMT as volatile
    
    commit dc91c3b6fe66a13ac76f6cb3b2100c0779cd3350 upstream.
    
    On AXP288 and newer PMICs, bit 7 of AXP20X_VBUS_IPSOUT_MGMT can be set
    to prevent using the VBUS input. However, when the VBUS unplugged and
    plugged back in, the bit automatically resets to zero.
    
    We need to set the register as volatile to prevent regmap from caching
    that bit. Otherwise, regcache will think the bit is already set and not
    write the register.
    
    Fixes: cd53216625a0 ("mfd: axp20x: Fix axp288 volatile ranges")
    Cc: stable@vger.kernel.org
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6c92036c2fe8424dce1ab6c388ba1cc29c29e66
Author: Tianyu Lan <Tianyu.Lan@microsoft.com>
Date:   Sat Jan 25 16:50:47 2020 -0500

    hv_balloon: Balloon up according to request page number
    
    commit d33c240d47dab4fd15123d9e73fc8810cbc6ed6a upstream.
    
    Current code has assumption that balloon request memory size aligns
    with 2MB. But actually Hyper-V doesn't guarantee such alignment. When
    balloon driver receives non-aligned balloon request, it produces warning
    and balloon up more memory than requested in order to keep 2MB alignment.
    Remove the warning and balloon up memory according to actual requested
    memory size.
    
    Fixes: f6712238471a ("hv: hv_balloon: avoid memory leak on alloc_error of 2MB memory block")
    Cc: stable@vger.kernel.org
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 329c6cf32f513c1c6cefb7f9551b56f8e40279a8
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Thu Jan 2 11:42:16 2020 +0100

    mmc: sdhci-of-at91: fix memleak on clk_get failure
    
    [ Upstream commit a04184ce777b46e92c2b3c93c6dcb2754cb005e1 ]
    
    sdhci_alloc_host() does its work not using managed infrastructure, so
    needs explicit free on error path. Add it where needed.
    
    Cc: <stable@vger.kernel.org>
    Fixes: bb5f8ea4d514 ("mmc: sdhci-of-at91: introduce driver for the Atmel SDMMC")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/b2a44d5be2e06ff075f32477e466598bb0f07b36.1577961679.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c659ea7b9d0750eb16fac6ab449055984fd6a24c
Author: Yurii Monakov <monakov.y@gmail.com>
Date:   Tue Dec 17 14:38:36 2019 +0300

    PCI: keystone: Fix link training retries initiation
    
    [ Upstream commit 6df19872d881641e6394f93ef2938cffcbdae5bb ]
    
    ks_pcie_stop_link() function does not clear LTSSM_EN_VAL bit so
    link training was not triggered more than once after startup.
    In configurations where link can be unstable during early boot,
    for example, under low temperature, it will never be established.
    
    Fixes: 0c4ffcfe1fbc ("PCI: keystone: Add TI Keystone PCIe driver")
    Signed-off-by: Yurii Monakov <monakov.y@gmail.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2554cdfa1d0369083bca97df2a5b121a276e11ad
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Oct 10 21:51:32 2019 -0700

    crypto: geode-aes - convert to skcipher API and make thread-safe
    
    commit 4549f7e5aa27ffc2cba63b5db8842a3b486f5688 upstream.
    
    The geode AES driver is heavily broken because it stores per-request
    state in the transform context.  So it will crash or produce the wrong
    result if used by any of the many places in the kernel that issue
    concurrent requests for the same transform object.
    
    This driver is also implemented using the deprecated blkcipher API,
    which makes it difficult to fix, and puts it among the drivers
    preventing that API from being removed.
    
    Convert this driver to use the skcipher API, and change it to not store
    per-request state in the transform context.
    
    Fixes: 9fe757b0cfce ("[PATCH] crypto: Add support for the Geode LX AES hardware")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Florian Bezdeka <florian@bezdeka.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81f076b88f032d54e30fbb3f64fc35077d31dcf9
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Sat Jan 11 17:50:36 2020 +0800

    ubifs: Fix deadlock in concurrent bulk-read and writepage
    
    commit f5de5b83303e61b1f3fb09bd77ce3ac2d7a475f2 upstream.
    
    In ubifs, concurrent execution of writepage and bulk read on the same file
    may cause ABBA deadlock, for example (Reproduce method see Link):
    
    Process A(Bulk-read starts from page4)         Process B(write page4 back)
      vfs_read                                       wb_workfn or fsync
      ...                                            ...
      generic_file_buffered_read                     write_cache_pages
        ubifs_readpage                                 LOCK(page4)
    
          ubifs_bulk_read                              ubifs_writepage
            LOCK(ui->ui_mutex)                           ubifs_write_inode
    
              ubifs_do_bulk_read                           LOCK(ui->ui_mutex)
                find_or_create_page(alloc page4)                  ↑
                  LOCK(page4)                   <--     ABBA deadlock occurs!
    
    In order to ensure the serialization execution of bulk read, we can't
    remove the big lock 'ui->ui_mutex' in ubifs_bulk_read(). Instead, we
    allow ubifs_do_bulk_read() to lock page failed by replacing
    find_or_create_page(FGP_LOCK) with
    pagecache_get_page(FGP_LOCK | FGP_NOWAIT).
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Suggested-by: zhangyi (F) <yi.zhang@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Fixes: 4793e7c5e1c ("UBIFS: add bulk-read facility")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206153
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4efec60cba3360f9a5eb313202811963f9c56aaf
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Dec 9 14:23:24 2019 -0800

    ubifs: Fix FS_IOC_SETFLAGS unexpectedly clearing encrypt flag
    
    commit 2b57067a7778484c10892fa191997bfda29fea13 upstream.
    
    UBIFS's implementation of FS_IOC_SETFLAGS fails to preserve existing
    inode flags that aren't settable by FS_IOC_SETFLAGS, namely the encrypt
    flag.  This causes the encrypt flag to be unexpectedly cleared.
    
    Fix it by preserving existing unsettable flags, like ext4 and f2fs do.
    
    Test case with kvm-xfstests shell:
    
        FSTYP=ubifs KEYCTL_PROG=keyctl
        . fs/ubifs/config
        . ~/xfstests/common/encrypt
        dev=$(__blkdev_to_ubi_volume /dev/vdc)
        ubiupdatevol -t $dev
        mount $dev /mnt -t ubifs
        k=$(_generate_session_encryption_key)
        mkdir /mnt/edir
        xfs_io -c "set_encpolicy $k" /mnt/edir
        echo contents > /mnt/edir/file
        chattr +i /mnt/edir/file
        chattr -i /mnt/edir/file
    
    With the bug, the following errors occur on the last command:
    
        [   18.081559] fscrypt (ubifs, inode 67): Inconsistent encryption context (parent directory: 65)
        chattr: Operation not permitted while reading flags on /mnt/edir/file
    
    Fixes: d475a507457b ("ubifs: Add skeleton for fscrypto")
    Cc: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03e032cb5607ed73df16709b91665078d08aa4df
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Jan 20 14:31:59 2020 -0800

    ubifs: don't trigger assertion on invalid no-key filename
    
    commit f0d07a98a070bb5e443df19c3aa55693cbca9341 upstream.
    
    If userspace provides an invalid fscrypt no-key filename which encodes a
    hash value with any of the UBIFS node type bits set (i.e. the high 3
    bits), gracefully report ENOENT rather than triggering ubifs_assert().
    
    Test case with kvm-xfstests shell:
    
        . fs/ubifs/config
        . ~/xfstests/common/encrypt
        dev=$(__blkdev_to_ubi_volume /dev/vdc)
        ubiupdatevol $dev -t
        mount $dev /mnt -t ubifs
        mkdir /mnt/edir
        xfs_io -c set_encpolicy /mnt/edir
        rm /mnt/edir/_,,,,,DAAAAAAAAAAAAAAAAAAAAAAAAAA
    
    With the bug, the following assertion fails on the 'rm' command:
    
        [   19.066048] UBIFS error (ubi0:0 pid 379): ubifs_assert_failed: UBIFS assert failed: !(hash & ~UBIFS_S_KEY_HASH_MASK), in fs/ubifs/key.h:170
    
    Fixes: f4f61d2cc6d8 ("ubifs: Implement encrypted filenames")
    Cc: <stable@vger.kernel.org> # v4.10+
    Link: https://lore.kernel.org/r/20200120223201.241390-5-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08ae5ec4be5a6d9e97bebb93d916d666e1763572
Author: Hou Tao <houtao1@huawei.com>
Date:   Sat Feb 9 16:54:20 2019 +0800

    ubifs: Reject unsupported ioctl flags explicitly
    
    commit 2fe8b2d5578d7d142982e3bf62e4c0caf8b8fe02 upstream.
    
    Reject unsupported ioctl flags explicitly, so the following command
    on a regular ubifs file will fail:
            chattr +d ubifs_file
    
    And xfstests generic/424 will pass.
    
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b522ff023e2daf109de25c94695b400bd217b3aa
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Thu Jan 9 07:59:07 2020 -0800

    alarmtimer: Unregister wakeup source when module get fails
    
    commit 6b6d188aae79a630957aefd88ff5c42af6553ee3 upstream.
    
    The alarmtimer_rtc_add_device() function creates a wakeup source and then
    tries to grab a module reference. If that fails the function returns early
    with an error code, but fails to remove the wakeup source.
    
    Cleanup this exit path so there is no dangling wakeup source, which is
    named 'alarmtime' left allocated which will conflict with another RTC
    device that may be registered later.
    
    Fixes: 51218298a25e ("alarmtimer: Ensure RTC module is not unloaded")
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200109155910.907-2-swboyd@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70435409cee45e60d70dbb961c0d88f88bfbb10d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 10 10:57:52 2019 +0100

    ACPI / battery: Deal better with neither design nor full capacity not being reported
    
    commit ff3154d1d89a2343fd5f82e65bc0cf1d4e6659b3 upstream.
    
    Commit b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on
    devices without full_charge_capacity") added support for some (broken)
    devices which always report 0 for both design_capacity and
    full_charge_capacity.
    
    Since the device that commit was written as a fix for is not reporting any
    form of "full" capacity we cannot calculate the value for the
    POWER_SUPPLY_PROP_CAPACITY, this is worked around by using an alternative
    array of available properties which does not contain this property.
    
    This is necessary because userspace (upower) treats us returning -ENODEV
    as 0 and then typically will trigger an emergency shutdown because of that.
    Userspace does not do this if the capacity sysfs attribute is not present
    at all.
    
    There are two potential problems with that commit:
     1) It assumes that both full_charge- and design-capacity are broken at the
        same time and only checks if full_charge- is broken.
     2) It assumes that this only ever happens for devices which report energy
        units rather then charge units.
    
    This commit fixes both issues by only using the alternative
    array of available properties if both full_charge- and design-capacity are
    broken and by also adding an alternative array of available properties for
    devices using mA units.
    
    Fixes: b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on devices without full_charge_capacity")
    Cc: 4.19+ <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a20180e04c26b676224793c95f6e6f796ec34169
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 10 10:57:51 2019 +0100

    ACPI / battery: Use design-cap for capacity calculations if full-cap is not available
    
    commit 5b74d1d16e2f5753fcbdecd6771b2d8370dda414 upstream.
    
    The ThunderSoft TS178 tablet's _BIX implementation reports design_capacity
    but not full_charge_capacity.
    
    Before this commit this would cause us to return -ENODEV for the capacity
    attribute, which userspace does not like. Specifically upower does this:
    
            if (sysfs_file_exists (native_path, "capacity")) {
                    percentage = sysfs_get_double (native_path, "capacity");
    
    Where the sysfs_get_double() helper returns 0 when we return -ENODEV,
    so the battery always reads 0% if we return -ENODEV.
    
    This commit fixes this by using the design-capacity instead of the
    full-charge-capacity when the full-charge-capacity is not available.
    
    Fixes: b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on devices without full_charge_capacity")
    Cc: 4.19+ <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52dbcdb2f2c962f3757e268231ea3a2ccec88860
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 10 10:57:50 2019 +0100

    ACPI / battery: Deal with design or full capacity being reported as -1
    
    commit cc99f0ad52467028cb1251160f23ad4bb65baf20 upstream.
    
    Commit b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design]
    on devices without full_charge_capacity") added support for some (broken)
    devices which always report 0 for both design- and full_charge-capacity.
    
    This assumes that if the capacity is not being reported it is 0. The
    ThunderSoft TS178 tablet's _BIX implementation falsifies this assumption.
    It reports ACPI_BATTERY_VALUE_UNKNOWN (-1) as full_charge_capacity, which
    we treat as a valid value which causes several problems.
    
    This commit fixes this by adding a new ACPI_BATTERY_CAPACITY_VALID() helper
    which checks that the value is not 0 and not -1; and using this whenever we
    need to test if either design_capacity or full_charge_capacity is valid.
    
    Fixes: b41901a2cf06 ("ACPI / battery: Do not export energy_full[_design] on devices without full_charge_capacity")
    Cc: 4.19+ <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7751179aa6c8321a74003bdcc8cac8d1ee38c526
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Dec 17 20:08:11 2019 +0100

    ACPI: video: Do not export a non working backlight interface on MSI MS-7721 boards
    
    commit d21a91629f4b8e794fc4c0e0c17c85cedf1d806c upstream.
    
    Despite our heuristics to not wrongly export a non working ACPI backlight
    interface on desktop machines, we still end up exporting one on desktops
    using a motherboard from the MSI MS-7721 series.
    
    I've looked at improving the heuristics, but in this case a quirk seems
    to be the only way to solve this.
    
    While at it also add a comment to separate the video_detect_force_none
    entries in the video_detect_dmi_table from other type of entries, as we
    already do for the other entry types.
    
    Cc: All applicable <stable@vger.kernel.org>
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1783786
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef23fb57605d1e1462c4bf51c032395129afa11d
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Dec 4 16:27:49 2019 +0100

    mmc: spi: Toggle SPI polarity, do not hardcode it
    
    commit af3ed119329cf9690598c5a562d95dfd128e91d6 upstream.
    
    The code in mmc_spi_initsequence() tries to send a burst with
    high chipselect and for this reason hardcodes the device into
    SPI_CS_HIGH.
    
    This is not good because the SPI_CS_HIGH flag indicates
    logical "asserted" CS not always the physical level. In
    some cases the signal is inverted in the GPIO library and
    in that case SPI_CS_HIGH is already set, and enforcing
    SPI_CS_HIGH again will actually drive it low.
    
    Instead of hard-coding this, toggle the polarity so if the
    default is LOW it goes high to assert chipselect but if it
    is already high then toggle it low instead.
    
    Cc: Phil Elwell <phil@raspberrypi.org>
    Reported-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20191204152749.12652-1-linus.walleij@linaro.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff949bbf163a3fe39d7c29e3815b0040f04ce958
Author: David Engraf <david.engraf@sysgo.com>
Date:   Mon Dec 16 12:18:25 2019 +0100

    PCI: tegra: Fix return value check of pm_runtime_get_sync()
    
    commit 885199148442f56b880995d703d2ed03b6481a3c upstream.
    
    pm_runtime_get_sync() returns the device's usage counter. This might
    be >0 if the device is already powered up or CONFIG_PM is disabled.
    
    Abort probe function on real error only.
    
    Fixes: da76ba50963b ("PCI: tegra: Add power management support")
    Link: https://lore.kernel.org/r/20191216111825.28136-1-david.engraf@sysgo.com
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org      # v4.17+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33da1cf0820df08d76cd16a409057b6f5fbb8e60
Author: Steve French <stfrench@microsoft.com>
Date:   Wed Sep 4 23:07:52 2019 -0500

    smb3: fix signing verification of large reads
    
    [ Upstream commit 46f17d17687e8140f2e4e517d7dfa65e62fcc5f4 ]
    
    Code cleanup in the 5.1 kernel changed the array
    passed into signing verification on large reads leading
    to warning messages being logged when copying files to local
    systems from remote.
    
       SMB signature verification returned error = -5
    
    This changeset fixes verification of SMB3 signatures of large
    reads.
    
    Suggested-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dac5dba68c30a708c73534fcc9e3c30145f664b4
Author: Pingfan Liu <kernelfans@gmail.com>
Date:   Fri Jan 10 12:54:02 2020 +0800

    powerpc/pseries: Advance pfn if section is not present in lmb_is_removable()
    
    commit fbee6ba2dca30d302efe6bddb3a886f5e964a257 upstream.
    
    In lmb_is_removable(), if a section is not present, it should continue
    to test the rest of the sections in the block. But the current code
    fails to do so.
    
    Fixes: 51925fb3c5c9 ("powerpc/pseries: Implement memory hotplug remove in the kernel")
    Cc: stable@vger.kernel.org # v4.1+
    Signed-off-by: Pingfan Liu <kernelfans@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1578632042-12415-1-git-send-email-kernelfans@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09f92d2cf1cd21e467619c6e9c9adbeec99648b6
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Mon Jan 6 13:50:02 2020 -0600

    powerpc/xmon: don't access ASDR in VMs
    
    commit c2a20711fc181e7f22ee5c16c28cb9578af84729 upstream.
    
    ASDR is HV-privileged and must only be accessed in HV-mode.
    Fixes a Program Check (0x700) when xmon in a VM dumps SPRs.
    
    Fixes: d1e1b351f50f ("powerpc/xmon: Add ISA v3.0 SPRs to SPR dump")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Reviewed-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200107021633.GB29843@us.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b7d98f1b6b8c47b8252594cae8cff28c741f427
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Thu Jan 16 19:59:04 2020 +0100

    s390/mm: fix dynamic pagetable upgrade for hugetlbfs
    
    commit 5f490a520bcb393389a4d44bec90afcb332eb112 upstream.
    
    Commit ee71d16d22bb ("s390/mm: make TASK_SIZE independent from the number
    of page table levels") changed the logic of TASK_SIZE and also removed the
    arch_mmap_check() implementation for s390. This combination has a subtle
    effect on how get_unmapped_area() for hugetlbfs pages works. It is now
    possible that a user process establishes a hugetlbfs mapping at an address
    above 4 TB, without triggering a dynamic pagetable upgrade from 3 to 4
    levels.
    
    This is because hugetlbfs mappings will not use mm->get_unmapped_area, but
    rather file->f_op->get_unmapped_area, which currently is the generic
    implementation of hugetlb_get_unmapped_area() that does not know about s390
    dynamic pagetable upgrades, but with the new definition of TASK_SIZE, it
    will now allow mappings above 4 TB.
    
    Subsequent access to such a mapped address above 4 TB will result in a page
    fault loop, because the CPU cannot translate such a large address with 3
    pagetable levels. The fault handler will try to map in a hugepage at the
    address, but due to the folded pagetable logic it will end up with creating
    entries in the 3 level pagetable, possibly overwriting existing mappings,
    and then it all repeats when the access is retried.
    
    Apart from the page fault loop, this can have various nasty effects, e.g.
    kernel panic from one of the BUG_ON() checks in memory management code,
    or even data loss if an existing mapping gets overwritten.
    
    Fix this by implementing HAVE_ARCH_HUGETLB_UNMAPPED_AREA support for s390,
    providing an s390 version for hugetlb_get_unmapped_area() with pagetable
    upgrade support similar to arch_get_unmapped_area(), which will then be
    used instead of the generic version.
    
    Fixes: ee71d16d22bb ("s390/mm: make TASK_SIZE independent from the number of page table levels")
    Cc: <stable@vger.kernel.org> # 4.12+
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d96a2441362d9b0cd14779e6b7b61be3ac29c96
Author: Alexander Lobakin <alobakin@dlink.ru>
Date:   Fri Jan 17 17:02:08 2020 +0300

    MIPS: boot: fix typo in 'vmlinux.lzma.its' target
    
    commit 16202c09577f3d0c533274c0410b7de05fb0d458 upstream.
    
    Commit 92b34a976348 ("MIPS: boot: add missing targets for vmlinux.*.its")
    fixed constant rebuild of *.its files on every make invocation, but due
    to typo ("lzmo") it made no sense for vmlinux.lzma.its.
    
    Fixes: 92b34a976348 ("MIPS: boot: add missing targets for vmlinux.*.its")
    Cc: <stable@vger.kernel.org> # v4.19+
    Signed-off-by: Alexander Lobakin <alobakin@dlink.ru>
    [paulburton@kernel.org: s/invokation/invocation/]
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d05ad27b0e491fc4a73af6ac6d57508852557c4c
Author: Alexander Lobakin <alobakin@dlink.ru>
Date:   Fri Jan 17 17:02:07 2020 +0300

    MIPS: fix indentation of the 'RELOCS' message
    
    commit a53998802e178451701d59d38e36f551422977ba upstream.
    
    quiet_cmd_relocs lacks a whitespace which results in:
    
      LD      vmlinux
      SORTEX  vmlinux
      SYSMAP  System.map
      RELOCS vmlinux
      Building modules, stage 2.
      MODPOST 64 modules
    
    After this patch:
    
      LD      vmlinux
      SORTEX  vmlinux
      SYSMAP  System.map
      RELOCS  vmlinux
      Building modules, stage 2.
      MODPOST 64 modules
    
    Typo is present in kernel tree since the introduction of relocatable
    kernel support in commit e818fac595ab ("MIPS: Generate relocation table
    when CONFIG_RELOCATABLE"), but the relocation scripts were moved to
    Makefile.postlink later with commit 44079d3509ae ("MIPS: Use
    Makefile.postlink to insert relocations into vmlinux").
    
    Fixes: 44079d3509ae ("MIPS: Use Makefile.postlink to insert relocations into vmlinux")
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Alexander Lobakin <alobakin@dlink.ru>
    [paulburton@kernel.org: Fixup commit references in commit message.]
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce94e646aa5275a7e41f46967fd0262aa7059a38
Author: Christoffer Dall <christoffer.dall@arm.com>
Date:   Thu Dec 12 20:50:55 2019 +0100

    KVM: arm64: Only sign-extend MMIO up to register width
    
    commit b6ae256afd32f96bec0117175b329d0dd617655e upstream.
    
    On AArch64 you can do a sign-extended load to either a 32-bit or 64-bit
    register, and we should only sign extend the register up to the width of
    the register as specified in the operation (by using the 32-bit Wn or
    64-bit Xn register specifier).
    
    As it turns out, the architecture provides this decoding information in
    the SF ("Sixty-Four" -- how cute...) bit.
    
    Let's take advantage of this with the usual 32-bit/64-bit header file
    dance and do the right thing on AArch64 hosts.
    
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20191212195055.5541-1-christoffer.dall@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1ed7347130c000552394fb53b5227d9a487df36
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 8 13:43:24 2020 +0000

    KVM: arm/arm64: Correct AArch32 SPSR on exception entry
    
    commit 1cfbb484de158e378e8971ac40f3082e53ecca55 upstream.
    
    Confusingly, there are three SPSR layouts that a kernel may need to deal
    with:
    
    (1) An AArch64 SPSR_ELx view of an AArch64 pstate
    (2) An AArch64 SPSR_ELx view of an AArch32 pstate
    (3) An AArch32 SPSR_* view of an AArch32 pstate
    
    When the KVM AArch32 support code deals with SPSR_{EL2,HYP}, it's either
    dealing with #2 or #3 consistently. On arm64 the PSR_AA32_* definitions
    match the AArch64 SPSR_ELx view, and on arm the PSR_AA32_* definitions
    match the AArch32 SPSR_* view.
    
    However, when we inject an exception into an AArch32 guest, we have to
    synthesize the AArch32 SPSR_* that the guest will see. Thus, an AArch64
    host needs to synthesize layout #3 from layout #2.
    
    This patch adds a new host_spsr_to_spsr32() helper for this, and makes
    use of it in the KVM AArch32 support code. For arm64 we need to shuffle
    the DIT bit around, and remove the SS bit, while for arm we can use the
    value as-is.
    
    I've open-coded the bit manipulation for now to avoid having to rework
    the existing PSR_* definitions into PSR64_AA32_* and PSR32_AA32_*
    definitions. I hope to perform a more thorough refactoring in future so
    that we can handle pstate view manipulation more consistently across the
    kernel tree.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200108134324.46500-4-mark.rutland@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a781ba151d70b24a4d5b156dddeaaa66c4a8d48
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 8 13:43:23 2020 +0000

    KVM: arm/arm64: Correct CPSR on exception entry
    
    commit 3c2483f15499b877ccb53250d88addb8c91da147 upstream.
    
    When KVM injects an exception into a guest, it generates the CPSR value
    from scratch, configuring CPSR.{M,A,I,T,E}, and setting all other
    bits to zero.
    
    This isn't correct, as the architecture specifies that some CPSR bits
    are (conditionally) cleared or set upon an exception, and others are
    unchanged from the original context.
    
    This patch adds logic to match the architectural behaviour. To make this
    simple to follow/audit/extend, documentation references are provided,
    and bits are configured in order of their layout in SPSR_EL2. This
    layout can be seen in the diagram on ARM DDI 0487E.a page C5-426.
    
    Note that this code is used by both arm and arm64, and is intended to
    fuction with the SPSR_EL2 and SPSR_HYP layouts.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200108134324.46500-3-mark.rutland@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fe86bd47451c4356b9f17db3cb442425de7b013
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 8 13:43:22 2020 +0000

    KVM: arm64: Correct PSTATE on exception entry
    
    commit a425372e733177eb0779748956bc16c85167af48 upstream.
    
    When KVM injects an exception into a guest, it generates the PSTATE
    value from scratch, configuring PSTATE.{M[4:0],DAIF}, and setting all
    other bits to zero.
    
    This isn't correct, as the architecture specifies that some PSTATE bits
    are (conditionally) cleared or set upon an exception, and others are
    unchanged from the original context.
    
    This patch adds logic to match the architectural behaviour. To make this
    simple to follow/audit/extend, documentation references are provided,
    and bits are configured in order of their layout in SPSR_EL2. This
    layout can be seen in the diagram on ARM DDI 0487E.a page C5-429.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200108134324.46500-2-mark.rutland@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c051725f28efc33f6257704e28865a5d8a5fb20
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Jan 25 19:10:21 2020 +0100

    ALSA: hda: Add Clevo W65_67SB the power_save blacklist
    
    commit d8feb6080bb0c9f4d799a423d9453048fdd06990 upstream.
    
    Using HDA power-saving on the Clevo W65_67SB causes the first 0.5
    seconds of audio to be missing every time audio starts playing.
    
    This commit adds the Clevo W65_67SB the power_save blacklist to avoid
    this issue.
    
    Cc: stable@vger.kernel.org
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1525104
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200125181021.70446-1-hdegoede@redhat.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17612b3c1de1f002134b0216e9ab6eaae6debd0b
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Jan 22 19:28:04 2020 +0300

    platform/x86: intel_scu_ipc: Fix interrupt support
    
    commit e48b72a568bbd641c91dad354138d3c17d03ee6f upstream.
    
    Currently the driver has disabled interrupt support for Tangier but
    actually interrupt works just fine if the command is not written twice
    in a row. Also we need to ack the interrupt in the handler.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f7d834cece26b4544f2eb4e6f46e70ec3caf7b2
Author: Kevin Hao <haokexin@gmail.com>
Date:   Mon Jan 20 12:35:47 2020 +0800

    irqdomain: Fix a memory leak in irq_domain_push_irq()
    
    commit 0f394daef89b38d58c91118a2b08b8a1b316703b upstream.
    
    Fix a memory leak reported by kmemleak:
    unreferenced object 0xffff000bc6f50e80 (size 128):
      comm "kworker/23:2", pid 201, jiffies 4294894947 (age 942.132s)
      hex dump (first 32 bytes):
        00 00 00 00 41 00 00 00 86 c0 03 00 00 00 00 00  ....A...........
        00 a0 b2 c6 0b 00 ff ff 40 51 fd 10 00 80 ff ff  ........@Q......
      backtrace:
        [<00000000e62d2240>] kmem_cache_alloc_trace+0x1a4/0x320
        [<00000000279143c9>] irq_domain_push_irq+0x7c/0x188
        [<00000000d9f4c154>] thunderx_gpio_probe+0x3ac/0x438
        [<00000000fd09ec22>] pci_device_probe+0xe4/0x198
        [<00000000d43eca75>] really_probe+0xdc/0x320
        [<00000000d3ebab09>] driver_probe_device+0x5c/0xf0
        [<000000005b3ecaa0>] __device_attach_driver+0x88/0xc0
        [<000000004e5915f5>] bus_for_each_drv+0x7c/0xc8
        [<0000000079d4db41>] __device_attach+0xe4/0x140
        [<00000000883bbda9>] device_initial_probe+0x18/0x20
        [<000000003be59ef6>] bus_probe_device+0x98/0xa0
        [<0000000039b03d3f>] deferred_probe_work_func+0x74/0xa8
        [<00000000870934ce>] process_one_work+0x1c8/0x470
        [<00000000e3cce570>] worker_thread+0x1f8/0x428
        [<000000005d64975e>] kthread+0xfc/0x128
        [<00000000f0eaa764>] ret_from_fork+0x10/0x18
    
    Fixes: 495c38d3001f ("irqdomain: Add irq_domain_{push,pop}_irq() functions")
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200120043547.22271-1-haokexin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 359cc3bca031d8b309c1d558119d0af9482be8d6
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Thu Jan 30 22:13:51 2020 -0800

    lib/test_kasan.c: fix memory leak in kmalloc_oob_krealloc_more()
    
    commit 3e21d9a501bf99aee2e5835d7f34d8c823f115b5 upstream.
    
    In case memory resources for _ptr2_ were allocated, release them before
    return.
    
    Notice that in case _ptr1_ happens to be NULL, krealloc() behaves
    exactly like kmalloc().
    
    Addresses-Coverity-ID: 1490594 ("Resource leak")
    Link: http://lkml.kernel.org/r/20200123160115.GA4202@embeddedor
    Fixes: 3f15801cdc23 ("lib: add kasan test module")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a81cdcdf056b4d9af84981f37ccb34d0c23143f8
Author: Helen Koike <helen.koike@collabora.com>
Date:   Tue Dec 17 21:00:22 2019 +0100

    media: v4l2-rect.h: fix v4l2_rect_map_inside() top/left adjustments
    
    commit f51e50db4c20d46930b33be3f208851265694f3e upstream.
    
    boundary->width and boundary->height are sizes relative to
    boundary->left and boundary->top coordinates, but they were not being
    taken into consideration to adjust r->left and r->top, leading to the
    following error:
    
    Consider the follow as initial values for boundary and r:
    
    struct v4l2_rect boundary = {
            .left = 100,
            .top = 100,
            .width = 800,
            .height = 600,
    }
    
    struct v4l2_rect r = {
            .left = 0,
            .top = 0,
            .width = 1920,
            .height = 960,
    }
    
    calling v4l2_rect_map_inside(&r, &boundary) was modifying r to:
    
    r = {
            .left = 0,
            .top = 0,
            .width = 800,
            .height = 600,
    }
    
    Which is wrongly outside the boundary rectangle, because:
    
            v4l2_rect_set_max_size(r, boundary); // r->width = 800, r->height = 600
            ...
            if (r->left + r->width > boundary->width) // true
                    r->left = boundary->width - r->width; // r->left = 800 - 800
            if (r->top + r->height > boundary->height) // true
                    r->top = boundary->height - r->height; // r->height = 600 - 600
    
    Fix this by considering top/left coordinates from boundary.
    
    Fixes: ac49de8c49d7 ("[media] v4l2-rect.h: new header with struct v4l2_rect helper functions")
    Signed-off-by: Helen Koike <helen.koike@collabora.com>
    Cc: <stable@vger.kernel.org>      # for v4.7 and up
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ea36671164e37cd9e853d6321550baa00339254
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 16 15:15:01 2019 +0100

    media: v4l2-core: compat: ignore native command codes
    
    commit 4a873f3fa5d6ca52e446d306dd7194dd86a09422 upstream.
    
    The do_video_ioctl() compat handler converts the compat command
    codes into the native ones before processing further, but this
    causes problems for 32-bit user applications that pass a command
    code that matches a 64-bit native number, which will then be
    handled the same way.
    
    Specifically, this breaks VIDIOC_DQEVENT_TIME from user space
    applications with 64-bit time_t, as the structure layout is
    the same as the native 64-bit layout on many architectures
    (x86 being the notable exception).
    
    Change the handler to use the converted command code only for
    passing into the native ioctl handler, not for deciding on the
    conversion, in order to make the compat behavior match the
    native behavior.
    
    Actual support for the 64-bit time_t version of VIDIOC_DQEVENT_TIME
    and other commands still needs to be added in a separate patch.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 166d83063233d372d983512b824bc5e5ae042351
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Thu Jan 30 22:12:50 2020 -0800

    media/v4l2-core: set pages dirty upon releasing DMA buffers
    
    commit 3c7470b6f68434acae459482ab920d1e3fabd1c7 upstream.
    
    After DMA is complete, and the device and CPU caches are synchronized,
    it's still required to mark the CPU pages as dirty, if the data was
    coming from the device.  However, this driver was just issuing a bare
    put_page() call, without any set_page_dirty*() call.
    
    Fix the problem, by calling set_page_dirty_lock() if the CPU pages were
    potentially receiving data from the device.
    
    Link: http://lkml.kernel.org/r/20200107224558.2362728-11-jhubbard@nvidia.com
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: <stable@vger.kernel.org>
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Cc: Björn Töpel <bjorn.topel@intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Kirill A. Shutemov <kirill@shutemov.name>
    Cc: Leon Romanovsky <leonro@mellanox.com>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0730292ca835bfe146307dfdbb6dae0b7eb71585
Author: Yang Shi <yang.shi@linux.alibaba.com>
Date:   Thu Jan 30 22:11:24 2020 -0800

    mm: move_pages: report the number of non-attempted pages
    
    commit 5984fabb6e82d9ab4e6305cb99694c85d46de8ae upstream.
    
    Since commit a49bd4d71637 ("mm, numa: rework do_pages_move"), the
    semantic of move_pages() has changed to return the number of
    non-migrated pages if they were result of a non-fatal reasons (usually a
    busy page).
    
    This was an unintentional change that hasn't been noticed except for LTP
    tests which checked for the documented behavior.
    
    There are two ways to go around this change.  We can even get back to
    the original behavior and return -EAGAIN whenever migrate_pages is not
    able to migrate pages due to non-fatal reasons.  Another option would be
    to simply continue with the changed semantic and extend move_pages
    documentation to clarify that -errno is returned on an invalid input or
    when migration simply cannot succeed (e.g.  -ENOMEM, -EBUSY) or the
    number of pages that couldn't have been migrated due to ephemeral
    reasons (e.g.  page is pinned or locked for other reasons).
    
    This patch implements the second option because this behavior is in
    place for some time without anybody complaining and possibly new users
    depending on it.  Also it allows to have a slightly easier error
    handling as the caller knows that it is worth to retry when err > 0.
    
    But since the new semantic would be aborted immediately if migration is
    failed due to ephemeral reasons, need include the number of
    non-attempted pages in the return value too.
    
    Link: http://lkml.kernel.org/r/1580160527-109104-1-git-send-email-yang.shi@linux.alibaba.com
    Fixes: a49bd4d71637 ("mm, numa: rework do_pages_move")
    Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>
    Suggested-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Wei Yang <richardw.yang@linux.intel.com>
    Cc: <stable@vger.kernel.org>    [4.17+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a6873a9868c4791b2d281319c7dbd3ae7dccba6
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jan 30 22:11:17 2020 -0800

    mm/memory_hotplug: fix remove_memory() lockdep splat
    
    commit f1037ec0cc8ac1a450974ad9754e991f72884f48 upstream.
    
    The daxctl unit test for the dax_kmem driver currently triggers the
    (false positive) lockdep splat below.  It results from the fact that
    remove_memory_block_devices() is invoked under the mem_hotplug_lock()
    causing lockdep entanglements with cpu_hotplug_lock() and sysfs (kernfs
    active state tracking).  It is a false positive because the sysfs
    attribute path triggering the memory remove is not the same attribute
    path associated with memory-block device.
    
    sysfs_break_active_protection() is not applicable since there is no real
    deadlock conflict, instead move memory-block device removal outside the
    lock.  The mem_hotplug_lock() is not needed to synchronize the
    memory-block device removal vs the page online state, that is already
    handled by lock_device_hotplug().  Specifically, lock_device_hotplug()
    is sufficient to allow try_remove_memory() to check the offline state of
    the memblocks and be assured that any in progress online attempts are
    flushed / blocked by kernfs_drain() / attribute removal.
    
    The add_memory() path safely creates memblock devices under the
    mem_hotplug_lock().  There is no kernfs active state synchronization in
    the memblock device_register() path, so nothing to fix there.
    
    This change is only possible thanks to the recent change that refactored
    memory block device removal out of arch_remove_memory() (commit
    4c4b7f9ba948 "mm/memory_hotplug: remove memory block devices before
    arch_remove_memory()"), and David's due diligence tracking down the
    guarantees afforded by kernfs_drain().  Not flagged for -stable since
    this only impacts ongoing development and lockdep validation, not a
    runtime issue.
    
        ======================================================
        WARNING: possible circular locking dependency detected
        5.5.0-rc3+ #230 Tainted: G           OE
        ------------------------------------------------------
        lt-daxctl/6459 is trying to acquire lock:
        ffff99c7f0003510 (kn->count#241){++++}, at: kernfs_remove_by_name_ns+0x41/0x80
    
        but task is already holding lock:
        ffffffffa76a5450 (mem_hotplug_lock.rw_sem){++++}, at: percpu_down_write+0x20/0xe0
    
        which lock already depends on the new lock.
    
        the existing dependency chain (in reverse order) is:
    
        -> #2 (mem_hotplug_lock.rw_sem){++++}:
               __lock_acquire+0x39c/0x790
               lock_acquire+0xa2/0x1b0
               get_online_mems+0x3e/0xb0
               kmem_cache_create_usercopy+0x2e/0x260
               kmem_cache_create+0x12/0x20
               ptlock_cache_init+0x20/0x28
               start_kernel+0x243/0x547
               secondary_startup_64+0xb6/0xc0
    
        -> #1 (cpu_hotplug_lock.rw_sem){++++}:
               __lock_acquire+0x39c/0x790
               lock_acquire+0xa2/0x1b0
               cpus_read_lock+0x3e/0xb0
               online_pages+0x37/0x300
               memory_subsys_online+0x17d/0x1c0
               device_online+0x60/0x80
               state_store+0x65/0xd0
               kernfs_fop_write+0xcf/0x1c0
               vfs_write+0xdb/0x1d0
               ksys_write+0x65/0xe0
               do_syscall_64+0x5c/0xa0
               entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
        -> #0 (kn->count#241){++++}:
               check_prev_add+0x98/0xa40
               validate_chain+0x576/0x860
               __lock_acquire+0x39c/0x790
               lock_acquire+0xa2/0x1b0
               __kernfs_remove+0x25f/0x2e0
               kernfs_remove_by_name_ns+0x41/0x80
               remove_files.isra.0+0x30/0x70
               sysfs_remove_group+0x3d/0x80
               sysfs_remove_groups+0x29/0x40
               device_remove_attrs+0x39/0x70
               device_del+0x16a/0x3f0
               device_unregister+0x16/0x60
               remove_memory_block_devices+0x82/0xb0
               try_remove_memory+0xb5/0x130
               remove_memory+0x26/0x40
               dev_dax_kmem_remove+0x44/0x6a [kmem]
               device_release_driver_internal+0xe4/0x1c0
               unbind_store+0xef/0x120
               kernfs_fop_write+0xcf/0x1c0
               vfs_write+0xdb/0x1d0
               ksys_write+0x65/0xe0
               do_syscall_64+0x5c/0xa0
               entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
        other info that might help us debug this:
    
        Chain exists of:
          kn->count#241 --> cpu_hotplug_lock.rw_sem --> mem_hotplug_lock.rw_sem
    
         Possible unsafe locking scenario:
    
               CPU0                    CPU1
               ----                    ----
          lock(mem_hotplug_lock.rw_sem);
                                       lock(cpu_hotplug_lock.rw_sem);
                                       lock(mem_hotplug_lock.rw_sem);
          lock(kn->count#241);
    
         *** DEADLOCK ***
    
    No fixes tag as this has been a long standing issue that predated the
    addition of kernfs lockdep annotations.
    
    Link: http://lkml.kernel.org/r/157991441887.2763922.4770790047389427325.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23efa4f9bbe4afc339480885be88125e25f4504a
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 1 09:05:30 2020 +0100

    ALSA: dummy: Fix PCM format loop in proc output
    
    commit 2acf25f13ebe8beb40e97a1bbe76f36277c64f1e upstream.
    
    The loop termination for iterating over all formats should contain
    SNDRV_PCM_FORMAT_LAST, not less than it.
    
    Fixes: 9b151fec139d ("ALSA: dummy - Add debug proc file")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200201080530.22390-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a46ebc21da8a3c5f52014f2808a04fa88bba8656
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 1 09:05:28 2020 +0100

    ALSA: usb-audio: Fix endianess in descriptor validation
    
    commit f8e5f90b3a53bb75f05124ed19156388379a337d upstream.
    
    I overlooked that some fields are words and need the converts from
    LE in the recently added USB descriptor validation code.
    This patch fixes those with the proper macro usages.
    
    Fixes: 57f8770620e9 ("ALSA: usb-audio: More validations of descriptor units")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200201080530.22390-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3ed79d11b2716aaca68ae9afdc79dddae53bdc9
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Thu Jan 9 13:17:22 2020 +0000

    usb: gadget: f_ecm: Use atomic_t to track in-flight request
    
    commit d710562e01c48d59be3f60d58b7a85958b39aeda upstream.
    
    Currently ecm->notify_req is used to flag when a request is in-flight.
    ecm->notify_req is set to NULL and when a request completes it is
    subsequently reset.
    
    This is fundamentally buggy in that the unbind logic of the ECM driver will
    unconditionally free ecm->notify_req leading to a NULL pointer dereference.
    
    Fixes: da741b8c56d6 ("usb ethernet gadget: split CDC Ethernet function")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1e5dcafca963f6c2386ea4f31323f51199a3794
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Thu Jan 9 13:17:21 2020 +0000

    usb: gadget: f_ncm: Use atomic_t to track in-flight request
    
    commit 5b24c28cfe136597dc3913e1c00b119307a20c7e upstream.
    
    Currently ncm->notify_req is used to flag when a request is in-flight.
    ncm->notify_req is set to NULL and when a request completes it is
    subsequently reset.
    
    This is fundamentally buggy in that the unbind logic of the NCM driver will
    unconditionally free ncm->notify_req leading to a NULL pointer dereference.
    
    Fixes: 40d133d7f542 ("usb: gadget: f_ncm: convert to new function interface with backward compatibility")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c26dfafbb815ebfdcc0de28e7e561f36918fade
Author: Roger Quadros <rogerq@ti.com>
Date:   Mon Dec 23 08:47:35 2019 +0200

    usb: gadget: legacy: set max_speed to super-speed
    
    commit 463f67aec2837f981b0a0ce8617721ff59685c00 upstream.
    
    These interfaces do support super-speed so let's not
    limit maximum speed to high-speed.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ee531e8048ebc03d08c9a0064930c8b1b541522
Author: Jun Li <jun.li@nxp.com>
Date:   Mon Jan 20 06:43:19 2020 +0000

    usb: typec: tcpci: mask event interrupts when remove driver
    
    commit 3ba76256fc4e2a0d7fb26cc95459041ea0e88972 upstream.
    
    This is to prevent any possible events generated while unregister
    tpcm port.
    
    Fixes: 74e656d6b055 ("staging: typec: Type-C Port Controller Interface driver (tcpci)")
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/1579502333-4145-1-git-send-email-jun.li@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0eb1a435635f5f55e8ed293a5d4114bb553e95d6
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sat Dec 14 19:51:14 2019 -0600

    brcmfmac: Fix memory leak in brcmf_usbdev_qinit
    
    commit 4282dc057d750c6a7dd92953564b15c26b54c22c upstream.
    
    In the implementation of brcmf_usbdev_qinit() the allocated memory for
    reqs is leaking if usb_alloc_urb() fails. Release reqs in the error
    handling path.
    
    Fixes: 71bb244ba2fd ("brcm80211: fmac: add USB support for bcm43235/6/8 chipsets")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00b13445f92180a4ac83c5fc1b7cce3ea5ed9a6d
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 9 14:21:54 2019 -0700

    rcu: Avoid data-race in rcu_gp_fqs_check_wake()
    
    commit 6935c3983b246d5fbfebd3b891c825e65c118f2d upstream.
    
    The rcu_gp_fqs_check_wake() function uses rcu_preempt_blocked_readers_cgp()
    to read ->gp_tasks while other cpus might overwrite this field.
    
    We need READ_ONCE()/WRITE_ONCE() pairs to avoid compiler
    tricks and KCSAN splats like the following :
    
    BUG: KCSAN: data-race in rcu_gp_fqs_check_wake / rcu_preempt_deferred_qs_irqrestore
    
    write to 0xffffffff85a7f190 of 8 bytes by task 7317 on cpu 0:
     rcu_preempt_deferred_qs_irqrestore+0x43d/0x580 kernel/rcu/tree_plugin.h:507
     rcu_read_unlock_special+0xec/0x370 kernel/rcu/tree_plugin.h:659
     __rcu_read_unlock+0xcf/0xe0 kernel/rcu/tree_plugin.h:394
     rcu_read_unlock include/linux/rcupdate.h:645 [inline]
     __ip_queue_xmit+0x3b0/0xa40 net/ipv4/ip_output.c:533
     ip_queue_xmit+0x45/0x60 include/net/ip.h:236
     __tcp_transmit_skb+0xdeb/0x1cd0 net/ipv4/tcp_output.c:1158
     __tcp_send_ack+0x246/0x300 net/ipv4/tcp_output.c:3685
     tcp_send_ack+0x34/0x40 net/ipv4/tcp_output.c:3691
     tcp_cleanup_rbuf+0x130/0x360 net/ipv4/tcp.c:1575
     tcp_recvmsg+0x633/0x1a30 net/ipv4/tcp.c:2179
     inet_recvmsg+0xbb/0x250 net/ipv4/af_inet.c:838
     sock_recvmsg_nosec net/socket.c:871 [inline]
     sock_recvmsg net/socket.c:889 [inline]
     sock_recvmsg+0x92/0xb0 net/socket.c:885
     sock_read_iter+0x15f/0x1e0 net/socket.c:967
     call_read_iter include/linux/fs.h:1864 [inline]
     new_sync_read+0x389/0x4f0 fs/read_write.c:414
    
    read to 0xffffffff85a7f190 of 8 bytes by task 10 on cpu 1:
     rcu_gp_fqs_check_wake kernel/rcu/tree.c:1556 [inline]
     rcu_gp_fqs_check_wake+0x93/0xd0 kernel/rcu/tree.c:1546
     rcu_gp_fqs_loop+0x36c/0x580 kernel/rcu/tree.c:1611
     rcu_gp_kthread+0x143/0x220 kernel/rcu/tree.c:1768
     kthread+0x1d4/0x200 drivers/block/aoe/aoecmd.c:1253
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:352
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 10 Comm: rcu_preempt Not tainted 5.3.0+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    [ paulmck:  Added another READ_ONCE() for RCU CPU stall warnings. ]
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62bfa26e4dc93ca9851eae9fb62eff8cb9534dd9
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Sat Aug 17 10:12:08 2019 -0400

    tracing: Fix sched switch start/stop refcount racy updates
    
    commit 64ae572bc7d0060429e40e1c8d803ce5eb31a0d6 upstream.
    
    Reading the sched_cmdline_ref and sched_tgid_ref initial state within
    tracing_start_sched_switch without holding the sched_register_mutex is
    racy against concurrent updates, which can lead to tracepoint probes
    being registered more than once (and thus trigger warnings within
    tracepoint.c).
    
    [ May be the fix for this bug ]
    Link: https://lore.kernel.org/r/000000000000ab6f84056c786b93@google.com
    
    Link: http://lkml.kernel.org/r/20190817141208.15226-1-mathieu.desnoyers@efficios.com
    
    Cc: stable@vger.kernel.org
    CC: Steven Rostedt (VMware) <rostedt@goodmis.org>
    CC: Joel Fernandes (Google) <joel@joelfernandes.org>
    CC: Peter Zijlstra <peterz@infradead.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Paul E. McKenney <paulmck@linux.ibm.com>
    Reported-by: syzbot+774fddf07b7ab29a1e55@syzkaller.appspotmail.com
    Fixes: d914ba37d7145 ("tracing: Add support for recording tgid of tasks")
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 078dd7328e21ef634c5d28f1dc21841f590f6a75
Author: Lu Shuaibing <shuaibinglu@126.com>
Date:   Mon Feb 3 17:34:46 2020 -0800

    ipc/msg.c: consolidate all xxxctl_down() functions
    
    commit 889b331724c82c11e15ba0a60979cf7bded0a26c upstream.
    
    A use of uninitialized memory in msgctl_down() because msqid64 in
    ksys_msgctl hasn't been initialized.  The local | msqid64 | is created in
    ksys_msgctl() and then passed into msgctl_down().  Along the way msqid64
    is never initialized before msgctl_down() checks msqid64->msg_qbytes.
    
    KUMSAN(KernelUninitializedMemorySantizer, a new error detection tool)
    reports:
    
    ==================================================================
    BUG: KUMSAN: use of uninitialized memory in msgctl_down+0x94/0x300
    Read of size 8 at addr ffff88806bb97eb8 by task syz-executor707/2022
    
    CPU: 0 PID: 2022 Comm: syz-executor707 Not tainted 5.2.0-rc4+ #63
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    Call Trace:
     dump_stack+0x75/0xae
     __kumsan_report+0x17c/0x3e6
     kumsan_report+0xe/0x20
     msgctl_down+0x94/0x300
     ksys_msgctl.constprop.14+0xef/0x260
     do_syscall_64+0x7e/0x1f0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x4400e9
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffd869e0598 EFLAGS: 00000246 ORIG_RAX: 0000000000000047
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 00000000004400e9
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 0000000000000000
    R10: 00000000ffffffff R11: 0000000000000246 R12: 0000000000401970
    R13: 0000000000401a00 R14: 0000000000000000 R15: 0000000000000000
    
    The buggy address belongs to the page:
    page:ffffea0001aee5c0 refcount:0 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0x100000000000000()
    raw: 0100000000000000 0000000000000000 ffffffff01ae0101 0000000000000000
    raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    page dumped because: kumsan: bad access detected
    ==================================================================
    
    Syzkaller reproducer:
    msgctl$IPC_RMID(0x0, 0x0)
    
    C reproducer:
    // autogenerated by syzkaller (https://github.com/google/syzkaller)
    
    int main(void)
    {
      syscall(__NR_mmap, 0x20000000, 0x1000000, 3, 0x32, -1, 0);
      syscall(__NR_msgctl, 0, 0, 0);
      return 0;
    }
    
    [natechancellor@gmail.com: adjust indentation in ksys_msgctl]
      Link: https://github.com/ClangBuiltLinux/linux/issues/829
      Link: http://lkml.kernel.org/r/20191218032932.37479-1-natechancellor@gmail.com
    Link: http://lkml.kernel.org/r/20190613014044.24234-1-shuaibinglu@126.com
    Signed-off-by: Lu Shuaibing <shuaibinglu@126.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: NeilBrown <neilb@suse.com>
    From: Andrew Morton <akpm@linux-foundation.org>
    Subject: ipc/msg.c: consolidate all xxxctl_down() functions
    
    Each line here overflows 80 cols by exactly one character.  Delete one tab
    per line to fix.
    
    Cc: Shaohua Li <shli@fb.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7d8f999fbae71d5e9b75810145a4ece4d922f86
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Nov 21 11:28:10 2019 +0100

    mfd: dln2: More sanity checking for endpoints
    
    commit 2b8bd606b1e60ca28c765f69c1eedd7d2a2e9dca upstream.
    
    It is not enough to check for the number of endpoints.
    The types must also be correct.
    
    Reported-and-tested-by: syzbot+48a2851be24583b864dc@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ceb3fcd6d1a6a65e7bf3873a63009d01ba4b05f
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 8 16:48:38 2019 +0100

    media: uvcvideo: Avoid cyclic entity chains due to malformed USB descriptors
    
    commit 68035c80e129c4cfec659aac4180354530b26527 upstream.
    
    Way back in 2017, fuzzing the 4.14-rc2 USB stack with syzkaller kicked
    up the following WARNING from the UVC chain scanning code:
    
      | list_add double add: new=ffff880069084010, prev=ffff880069084010,
      | next=ffff880067d22298.
      | ------------[ cut here ]------------
      | WARNING: CPU: 1 PID: 1846 at lib/list_debug.c:31 __list_add_valid+0xbd/0xf0
      | Modules linked in:
      | CPU: 1 PID: 1846 Comm: kworker/1:2 Not tainted
      | 4.14.0-rc2-42613-g1488251d1a98 #238
      | Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      | Workqueue: usb_hub_wq hub_event
      | task: ffff88006b01ca40 task.stack: ffff880064358000
      | RIP: 0010:__list_add_valid+0xbd/0xf0 lib/list_debug.c:29
      | RSP: 0018:ffff88006435ddd0 EFLAGS: 00010286
      | RAX: 0000000000000058 RBX: ffff880067d22298 RCX: 0000000000000000
      | RDX: 0000000000000058 RSI: ffffffff85a58800 RDI: ffffed000c86bbac
      | RBP: ffff88006435dde8 R08: 1ffff1000c86ba52 R09: 0000000000000000
      | R10: 0000000000000002 R11: 0000000000000000 R12: ffff880069084010
      | R13: ffff880067d22298 R14: ffff880069084010 R15: ffff880067d222a0
      | FS:  0000000000000000(0000) GS:ffff88006c900000(0000) knlGS:0000000000000000
      | CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      | CR2: 0000000020004ff2 CR3: 000000006b447000 CR4: 00000000000006e0
      | Call Trace:
      |  __list_add ./include/linux/list.h:59
      |  list_add_tail+0x8c/0x1b0 ./include/linux/list.h:92
      |  uvc_scan_chain_forward.isra.8+0x373/0x416
      | drivers/media/usb/uvc/uvc_driver.c:1471
      |  uvc_scan_chain drivers/media/usb/uvc/uvc_driver.c:1585
      |  uvc_scan_device drivers/media/usb/uvc/uvc_driver.c:1769
      |  uvc_probe+0x77f2/0x8f00 drivers/media/usb/uvc/uvc_driver.c:2104
    
    Looking into the output from usbmon, the interesting part is the
    following data packet:
    
      ffff880069c63e00 30710169 C Ci:1:002:0 0 143 = 09028f00 01030080
      00090403 00000e01 00000924 03000103 7c003328 010204db
    
    If we drop the lead configuration and interface descriptors, we're left
    with an output terminal descriptor describing a generic display:
    
      /* Output terminal descriptor */
      buf[0]        09
      buf[1]        24
      buf[2]        03      /* UVC_VC_OUTPUT_TERMINAL */
      buf[3]        00      /* ID */
      buf[4]        01      /* type == 0x0301 (UVC_OTT_DISPLAY) */
      buf[5]        03
      buf[6]        7c
      buf[7]        00      /* source ID refers to self! */
      buf[8]        33
    
    The problem with this descriptor is that it is self-referential: the
    source ID of 0 matches itself! This causes the 'struct uvc_entity'
    representing the display to be added to its chain list twice during
    'uvc_scan_chain()': once via 'uvc_scan_chain_entity()' when it is
    processed directly from the 'dev->entities' list and then again
    immediately afterwards when trying to follow the source ID in
    'uvc_scan_chain_forward()'
    
    Add a check before adding an entity to a chain list to ensure that the
    entity is not already part of a chain.
    
    Link: https://lore.kernel.org/linux-media/CAAeHK+z+Si69jUR+N-SjN9q4O+o5KFiNManqEa-PjUta7EOb7A@mail.gmail.com/
    
    Cc: <stable@vger.kernel.org>
    Fixes: c0efd232929c ("V4L/DVB (8145a): USB Video Class driver")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22779a273e5dfdadb0c53fd00a4a8ab62675caef
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:36 2020 +0000

    rxrpc: Fix NULL pointer deref due to call->conn being cleared on disconnect
    
    [ Upstream commit 5273a191dca65a675dc0bcf3909e59c6933e2831 ]
    
    When a call is disconnected, the connection pointer from the call is
    cleared to make sure it isn't used again and to prevent further attempted
    transmission for the call.  Unfortunately, there might be a daemon trying
    to use it at the same time to transmit a packet.
    
    Fix this by keeping call->conn set, but setting a flag on the call to
    indicate disconnection instead.
    
    Remove also the bits in the transmission functions where the conn pointer is
    checked and a ref taken under spinlock as this is now redundant.
    
    Fixes: 8d94aa381dab ("rxrpc: Calls shouldn't hold socket refs")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2562d424fde911cbeb7457e1be99a3a57f9b67f
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:36 2020 +0000

    rxrpc: Fix missing active use pinning of rxrpc_local object
    
    [ Upstream commit 04d36d748fac349b068ef621611f454010054c58 ]
    
    The introduction of a split between the reference count on rxrpc_local
    objects and the usage count didn't quite go far enough.  A number of kernel
    work items need to make use of the socket to perform transmission.  These
    also need to get an active count on the local object to prevent the socket
    from being closed.
    
    Fix this by getting the active count in those places.
    
    Also split out the raw active count get/put functions as these places tend
    to hold refs on the rxrpc_local object already, so getting and putting an
    extra object ref is just a waste of time.
    
    The problem can lead to symptoms like:
    
        BUG: kernel NULL pointer dereference, address: 0000000000000018
        ..
        CPU: 2 PID: 818 Comm: kworker/u9:0 Not tainted 5.5.0-fscache+ #51
        ...
        RIP: 0010:selinux_socket_sendmsg+0x5/0x13
        ...
        Call Trace:
         security_socket_sendmsg+0x2c/0x3e
         sock_sendmsg+0x1a/0x46
         rxrpc_send_keepalive+0x131/0x1ae
         rxrpc_peer_keepalive_worker+0x219/0x34b
         process_one_work+0x18e/0x271
         worker_thread+0x1a3/0x247
         kthread+0xe6/0xeb
         ret_from_fork+0x1f/0x30
    
    Fixes: 730c5fd42c1e ("rxrpc: Fix local endpoint refcounting")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dba85332fdba4ce3f94a9c8e1137b8b29b06facb
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:36 2020 +0000

    rxrpc: Fix insufficient receive notification generation
    
    [ Upstream commit f71dbf2fb28489a79bde0dca1c8adfb9cdb20a6b ]
    
    In rxrpc_input_data(), rxrpc_notify_socket() is called if the base sequence
    number of the packet is immediately following the hard-ack point at the end
    of the function.  However, this isn't sufficient, since the recvmsg side
    may have been advancing the window and then overrun the position in which
    we're adding - at which point rx_hard_ack >= seq0 and no notification is
    generated.
    
    Fix this by always generating a notification at the end of the input
    function.
    
    Without this, a long call may stall, possibly indefinitely.
    
    Fixes: 248f219cb8bc ("rxrpc: Rewrite the data and ack handling code")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85c45a480561e0dfc95d9707db2d71dfceac47bc
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 30 21:50:35 2020 +0000

    rxrpc: Fix use-after-free in rxrpc_put_local()
    
    [ Upstream commit fac20b9e738523fc884ee3ea5be360a321cd8bad ]
    
    Fix rxrpc_put_local() to not access local->debug_id after calling
    atomic_dec_return() as, unless that returned n==0, we no longer have the
    right to access the object.
    
    Fixes: 06d9532fa6b3 ("rxrpc: Fix read-after-free in rxrpc_queue_local()")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e23f798afdc70774fb5447d9db364da558eb457
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 10:44:50 2020 -0800

    tcp: clear tp->segs_{in|out} in tcp_disconnect()
    
    [ Upstream commit 784f8344de750a41344f4bbbebb8507a730fc99c ]
    
    tp->segs_in and tp->segs_out need to be cleared in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: 2efd055c53c0 ("tcp: add tcpi_segs_in and tcpi_segs_out to tcp_info")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Marcelo Ricardo Leitner <mleitner@redhat.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57542c0555f0fa0ae11f728054a50ee65fa073cf
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 10:32:41 2020 -0800

    tcp: clear tp->data_segs{in|out} in tcp_disconnect()
    
    [ Upstream commit db7ffee6f3eb3683cdcaeddecc0a630a14546fe3 ]
    
    tp->data_segs_in and tp->data_segs_out need to be cleared
    in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: a44d6eacdaf5 ("tcp: Add RFC4898 tcpEStatsPerfDataSegsOut/In")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d4bec3ba7af8f3529baf3262adfd65589cd93e8
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 10:22:47 2020 -0800

    tcp: clear tp->delivered in tcp_disconnect()
    
    [ Upstream commit 2fbdd56251b5c62f96589f39eded277260de7267 ]
    
    tp->delivered needs to be cleared in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: ddf1af6fa00e ("tcp: new delivery accounting")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4206e664b120c957af7df7a21fd192b9616078ea
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 09:14:47 2020 -0800

    tcp: clear tp->total_retrans in tcp_disconnect()
    
    [ Upstream commit c13c48c00a6bc1febc73902505bdec0967bd7095 ]
    
    total_retrans needs to be cleared in tcp_disconnect().
    
    tcp_disconnect() is rarely used, but it is worth fixing it.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: SeongJae Park <sjpark@amazon.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7ec10b4ea8f6dbc19e8377b1064f4be3f630f3e
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Feb 2 02:41:38 2020 -0500

    bnxt_en: Fix TC queue mapping.
    
    [ Upstream commit 18e4960c18f484ac288f41b43d0e6c4c88e6ea78 ]
    
    The driver currently only calls netdev_set_tc_queue when the number of
    TCs is greater than 1.  Instead, the comparison should be greater than
    or equal to 1.  Even with 1 TC, we need to set the queue mapping.
    
    This bug can cause warnings when the number of TCs is changed back to 1.
    
    Fixes: 7809592d3e2e ("bnxt_en: Enable MSIX early in bnxt_init_one().")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0529d1eac4dabb9228b4aeb49ddbcc189f48d163
Author: Nicolin Chen <nicoleotsuka@gmail.com>
Date:   Fri Jan 31 18:01:24 2020 -0800

    net: stmmac: Delete txtimer in suspend()
    
    [ Upstream commit 14b41a2959fbaa50932699d32ceefd6643abacc6 ]
    
    When running v5.5 with a rootfs on NFS, memory abort may happen in
    the system resume stage:
     Unable to handle kernel paging request at virtual address dead00000000012a
     [dead00000000012a] address between user and kernel address ranges
     pc : run_timer_softirq+0x334/0x3d8
     lr : run_timer_softirq+0x244/0x3d8
     x1 : ffff800011cafe80 x0 : dead000000000122
     Call trace:
      run_timer_softirq+0x334/0x3d8
      efi_header_end+0x114/0x234
      irq_exit+0xd0/0xd8
      __handle_domain_irq+0x60/0xb0
      gic_handle_irq+0x58/0xa8
      el1_irq+0xb8/0x180
      arch_cpu_idle+0x10/0x18
      do_idle+0x1d8/0x2b0
      cpu_startup_entry+0x24/0x40
      secondary_start_kernel+0x1b4/0x208
     Code: f9000693 a9400660 f9000020 b4000040 (f9000401)
     ---[ end trace bb83ceeb4c482071 ]---
     Kernel panic - not syncing: Fatal exception in interrupt
     SMP: stopping secondary CPUs
     SMP: failed to stop secondary CPUs 2-3
     Kernel Offset: disabled
     CPU features: 0x00002,2300aa30
     Memory Limit: none
     ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    It's found that stmmac_xmit() and stmmac_resume() sometimes might
    run concurrently, possibly resulting in a race condition between
    mod_timer() and setup_timer(), being called by stmmac_xmit() and
    stmmac_resume() respectively.
    
    Since the resume() runs setup_timer() every time, it'd be safer to
    have del_timer_sync() in the suspend() as the counterpart.
    
    Signed-off-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 478c4b2ffd44e5186c7e22ae7c38a86a5b9cfde5
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Feb 2 21:14:35 2020 -0800

    net_sched: fix an OOB access in cls_tcindex
    
    [ Upstream commit 599be01ee567b61f4471ee8078870847d0a11e8e ]
    
    As Eric noticed, tcindex_alloc_perfect_hash() uses cp->hash
    to compute the size of memory allocation, but cp->hash is
    set again after the allocation, this caused an out-of-bound
    access.
    
    So we have to move all cp->hash initialization and computation
    before the memory allocation. Move cp->mask and cp->shift together
    as cp->hash may need them for computation too.
    
    Reported-and-tested-by: syzbot+35d4dea36c387813ed31@syzkaller.appspotmail.com
    Fixes: 331b72922c5f ("net: sched: RCU cls_tcindex")
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5524d5a41f83e3d9b01415ef51a11fb1573ff0c
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Feb 3 10:15:07 2020 -0800

    net: hsr: fix possible NULL deref in hsr_handle_frame()
    
    [ Upstream commit 2b5b8251bc9fe2f9118411f037862ee17cf81e97 ]
    
    hsr_port_get_rcu() can return NULL, so we need to be careful.
    
    general protection fault, probably for non-canonical address 0xdffffc0000000006: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x0000000000000030-0x0000000000000037]
    CPU: 1 PID: 10249 Comm: syz-executor.5 Not tainted 5.5.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__read_once_size include/linux/compiler.h:199 [inline]
    RIP: 0010:hsr_addr_is_self+0x86/0x330 net/hsr/hsr_framereg.c:44
    Code: 04 00 f3 f3 f3 65 48 8b 04 25 28 00 00 00 48 89 45 d0 31 c0 e8 6b ff 94 f9 4c 89 f2 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 75 02 00 00 48 8b 43 30 49 39 c6 49 89 47 c0 0f
    RSP: 0018:ffffc90000da8a90 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff87e0cc33
    RDX: 0000000000000006 RSI: ffffffff87e035d5 RDI: 0000000000000000
    RBP: ffffc90000da8b20 R08: ffff88808e7de040 R09: ffffed1015d2707c
    R10: ffffed1015d2707b R11: ffff8880ae9383db R12: ffff8880a689bc5e
    R13: 1ffff920001b5153 R14: 0000000000000030 R15: ffffc90000da8af8
    FS:  00007fd7a42be700(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b32338000 CR3: 00000000a928c000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     hsr_handle_frame+0x1c5/0x630 net/hsr/hsr_slave.c:31
     __netif_receive_skb_core+0xfbc/0x30b0 net/core/dev.c:5099
     __netif_receive_skb_one_core+0xa8/0x1a0 net/core/dev.c:5196
     __netif_receive_skb+0x2c/0x1d0 net/core/dev.c:5312
     process_backlog+0x206/0x750 net/core/dev.c:6144
     napi_poll net/core/dev.c:6582 [inline]
     net_rx_action+0x508/0x1120 net/core/dev.c:6650
     __do_softirq+0x262/0x98c kernel/softirq.c:292
     do_softirq_own_stack+0x2a/0x40 arch/x86/entry/entry_64.S:1082
     </IRQ>
    
    Fixes: c5a759117210 ("net/hsr: Use list_head (and rcu) instead of array for slave devices.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0af9cd881bb359776352374d10abd0e8d5986cc
Author: Ridge Kennedy <ridge.kennedy@alliedtelesis.co.nz>
Date:   Tue Feb 4 12:24:00 2020 +1300

    l2tp: Allow duplicate session creation with UDP
    
    [ Upstream commit 0d0d9a388a858e271bb70e71e99e7fe2a6fd6f64 ]
    
    In the past it was possible to create multiple L2TPv3 sessions with the
    same session id as long as the sessions belonged to different tunnels.
    The resulting sessions had issues when used with IP encapsulated tunnels,
    but worked fine with UDP encapsulated ones. Some applications began to
    rely on this behaviour to avoid having to negotiate unique session ids.
    
    Some time ago a change was made to require session ids to be unique across
    all tunnels, breaking the applications making use of this "feature".
    
    This change relaxes the duplicate session id check to allow duplicates
    if both of the colliding sessions belong to UDP encapsulated tunnels.
    
    Fixes: dbdbc73b4478 ("l2tp: fix duplicate session creation")
    Signed-off-by: Ridge Kennedy <ridge.kennedy@alliedtelesis.co.nz>
    Acked-by: James Chapman <jchapman@katalix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2f39420c62273adb352cad29a1fac3d5e659255
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Tue Feb 4 03:24:59 2020 +0000

    gtp: use __GFP_NOWARN to avoid memalloc warning
    
    [ Upstream commit bd5cd35b782abf5437fbd01dfaee12437d20e832 ]
    
    gtp hashtable size is received by user-space.
    So, this hashtable size could be too large. If so, kmalloc will internally
    print a warning message.
    This warning message is actually not necessary for the gtp module.
    So, this patch adds __GFP_NOWARN to avoid this message.
    
    Splat looks like:
    [ 2171.200049][ T1860] WARNING: CPU: 1 PID: 1860 at mm/page_alloc.c:4713 __alloc_pages_nodemask+0x2f3/0x740
    [ 2171.238885][ T1860] Modules linked in: gtp veth openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv]
    [ 2171.262680][ T1860] CPU: 1 PID: 1860 Comm: gtp-link Not tainted 5.5.0+ #321
    [ 2171.263567][ T1860] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [ 2171.264681][ T1860] RIP: 0010:__alloc_pages_nodemask+0x2f3/0x740
    [ 2171.265332][ T1860] Code: 64 fe ff ff 65 48 8b 04 25 c0 0f 02 00 48 05 f0 12 00 00 41 be 01 00 00 00 49 89 47 0
    [ 2171.267301][ T1860] RSP: 0018:ffff8880b51af1f0 EFLAGS: 00010246
    [ 2171.268320][ T1860] RAX: ffffed1016a35e43 RBX: 0000000000000000 RCX: 0000000000000000
    [ 2171.269517][ T1860] RDX: 0000000000000000 RSI: 000000000000000b RDI: 0000000000000000
    [ 2171.270305][ T1860] RBP: 0000000000040cc0 R08: ffffed1018893109 R09: dffffc0000000000
    [ 2171.275973][ T1860] R10: 0000000000000001 R11: ffffed1018893108 R12: 1ffff11016a35e43
    [ 2171.291039][ T1860] R13: 000000000000000b R14: 000000000000000b R15: 00000000000f4240
    [ 2171.292328][ T1860] FS:  00007f53cbc83740(0000) GS:ffff8880da000000(0000) knlGS:0000000000000000
    [ 2171.293409][ T1860] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 2171.294586][ T1860] CR2: 000055f540014508 CR3: 00000000b49f2004 CR4: 00000000000606e0
    [ 2171.295424][ T1860] Call Trace:
    [ 2171.295756][ T1860]  ? mark_held_locks+0xa5/0xe0
    [ 2171.296659][ T1860]  ? __alloc_pages_slowpath+0x21b0/0x21b0
    [ 2171.298283][ T1860]  ? gtp_encap_enable_socket+0x13e/0x400 [gtp]
    [ 2171.298962][ T1860]  ? alloc_pages_current+0xc1/0x1a0
    [ 2171.299475][ T1860]  kmalloc_order+0x22/0x80
    [ 2171.299936][ T1860]  kmalloc_order_trace+0x1d/0x140
    [ 2171.300437][ T1860]  __kmalloc+0x302/0x3a0
    [ 2171.300896][ T1860]  gtp_newlink+0x293/0xba0 [gtp]
    [ ... ]
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cb578dc2411199fa608fde735576e4ede3a8fdc
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 31 15:27:04 2020 -0800

    cls_rsvp: fix rsvp_policy
    
    [ Upstream commit cb3c0e6bdf64d0d124e94ce43cbe4ccbb9b37f51 ]
    
    NLA_BINARY can be confusing, since .len value represents
    the max size of the blob.
    
    cls_rsvp really wants user space to provide long enough data
    for TCA_RSVP_DST and TCA_RSVP_SRC attributes.
    
    BUG: KMSAN: uninit-value in rsvp_get net/sched/cls_rsvp.h:258 [inline]
    BUG: KMSAN: uninit-value in gen_handle net/sched/cls_rsvp.h:402 [inline]
    BUG: KMSAN: uninit-value in rsvp_change+0x1ae9/0x4220 net/sched/cls_rsvp.h:572
    CPU: 1 PID: 13228 Comm: syz-executor.1 Not tainted 5.5.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     rsvp_get net/sched/cls_rsvp.h:258 [inline]
     gen_handle net/sched/cls_rsvp.h:402 [inline]
     rsvp_change+0x1ae9/0x4220 net/sched/cls_rsvp.h:572
     tc_new_tfilter+0x31fe/0x5010 net/sched/cls_api.c:2104
     rtnetlink_rcv_msg+0xcb7/0x1570 net/core/rtnetlink.c:5415
     netlink_rcv_skb+0x451/0x650 net/netlink/af_netlink.c:2477
     rtnetlink_rcv+0x50/0x60 net/core/rtnetlink.c:5442
     netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
     netlink_unicast+0xf9e/0x1100 net/netlink/af_netlink.c:1328
     netlink_sendmsg+0x1248/0x14d0 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:639 [inline]
     sock_sendmsg net/socket.c:659 [inline]
     ____sys_sendmsg+0x12b6/0x1350 net/socket.c:2330
     ___sys_sendmsg net/socket.c:2384 [inline]
     __sys_sendmsg+0x451/0x5f0 net/socket.c:2417
     __do_sys_sendmsg net/socket.c:2426 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2424
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2424
     do_syscall_64+0xb8/0x160 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45b349
    Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f269d43dc78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f269d43e6d4 RCX: 000000000045b349
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000075bfc8 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000000009c2 R14: 00000000004cb338 R15: 000000000075bfd4
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:144 [inline]
     kmsan_internal_poison_shadow+0x66/0xd0 mm/kmsan/kmsan.c:127
     kmsan_slab_alloc+0x8a/0xe0 mm/kmsan/kmsan_hooks.c:82
     slab_alloc_node mm/slub.c:2774 [inline]
     __kmalloc_node_track_caller+0xb40/0x1200 mm/slub.c:4382
     __kmalloc_reserve net/core/skbuff.c:141 [inline]
     __alloc_skb+0x2fd/0xac0 net/core/skbuff.c:209
     alloc_skb include/linux/skbuff.h:1049 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1174 [inline]
     netlink_sendmsg+0x7d3/0x14d0 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:639 [inline]
     sock_sendmsg net/socket.c:659 [inline]
     ____sys_sendmsg+0x12b6/0x1350 net/socket.c:2330
     ___sys_sendmsg net/socket.c:2384 [inline]
     __sys_sendmsg+0x451/0x5f0 net/socket.c:2417
     __do_sys_sendmsg net/socket.c:2426 [inline]
     __se_sys_sendmsg+0x97/0xb0 net/socket.c:2424
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2424
     do_syscall_64+0xb8/0x160 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 6fa8c0144b77 ("[NET_SCHED]: Use nla_policy for attribute validation in classifiers")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e1547524dc472d27cef252de1e60a91cd4a14d9
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 14 14:26:14 2020 +0100

    sparc32: fix struct ipc64_perm type definition
    
    [ Upstream commit 34ca70ef7d3a9fa7e89151597db5e37ae1d429b4 ]
    
    As discussed in the strace issue tracker, it appears that the sparc32
    sysvipc support has been broken for the past 11 years. It was however
    working in compat mode, which is how it must have escaped most of the
    regular testing.
    
    The problem is that a cleanup patch inadvertently changed the uid/gid
    fields in struct ipc64_perm from 32-bit types to 16-bit types in uapi
    headers.
    
    Both glibc and uclibc-ng still use the original types, so they should
    work fine with compat mode, but not natively.  Change the definitions
    to use __kernel_uid32_t and __kernel_gid32_t again.
    
    Fixes: 83c86984bff2 ("sparc: unify ipcbuf.h")
    Link: https://github.com/strace/strace/issues/116
    Cc: <stable@vger.kernel.org> # v2.6.29
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Cc: "Dmitry V . Levin" <ldv@altlinux.org>
    Cc: Rich Felker <dalias@libc.org>
    Cc: libc-alpha@sourceware.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9940e10dd2214959cdfa9dd81137147938715e97
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Mon Nov 25 13:21:58 2019 +0200

    iwlwifi: mvm: fix NVM check for 3168 devices
    
    [ Upstream commit b3f20e098293892388d6a0491d6bbb2efb46fbff ]
    
    We had a check on !NVM_EXT and then a check for NVM_SDP in the else
    block of this if.  The else block, obviously, could only be reached if
    using NVM_EXT, so it would never be NVM_SDP.
    
    Fix that by checking whether the nvm_type is IWL_NVM instead of
    checking for !IWL_NVM_EXT to solve this issue.
    
    Reported-by: Stefan Sperling <stsp@stsp.name>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8360063bfae53a765464aa39755b49cf736f1df0
Author: John Ogness <john.ogness@linutronix.de>
Date:   Thu Dec 19 12:59:22 2019 +0106

    printk: fix exclusive_console replaying
    
    [ Upstream commit def97da136515cb289a14729292c193e0a93bc64 ]
    
    Commit f92b070f2dc8 ("printk: Do not miss new messages when replaying
    the log") introduced a new variable @exclusive_console_stop_seq to
    store when an exclusive console should stop printing. It should be
    set to the @console_seq value at registration. However, @console_seq
    is previously set to @syslog_seq so that the exclusive console knows
    where to begin. This results in the exclusive console immediately
    reactivating all the other consoles and thus repeating the messages
    for those consoles.
    
    Set @console_seq after @exclusive_console_stop_seq has stored the
    current @console_seq value.
    
    Fixes: f92b070f2dc8 ("printk: Do not miss new messages when replaying the log")
    Link: http://lkml.kernel.org/r/20191219115322.31160-1-john.ogness@linutronix.de
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: John Ogness <john.ogness@linutronix.de>
    Acked-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97bc3b7d7a9c6443f6ec25fda06068a2ae2ffb93
Author: Jan Kara <jack@suse.cz>
Date:   Fri Jan 17 12:11:14 2020 +0100

    udf: Allow writing to 'Rewritable' partitions
    
    [ Upstream commit 15fb05fd286ac57a0802d71624daeb5c1c2d5b07 ]
    
    UDF 2.60 standard states in section 2.2.14.2:
    
        A partition with Access Type 3 (rewritable) shall define a Freed
        Space Bitmap or a Freed Space Table, see 2.3.3. All other partitions
        shall not define a Freed Space Bitmap or a Freed Space Table.
    
        Rewritable partitions are used on media that require some form of
        preprocessing before re-writing data (for example legacy MO). Such
        partitions shall use Access Type 3.
    
        Overwritable partitions are used on media that do not require
        preprocessing before overwriting data (for example: CD-RW, DVD-RW,
        DVD+RW, DVD-RAM, BD-RE, HD DVD-Rewritable). Such partitions shall
        use Access Type 4.
    
    however older versions of the standard didn't have this wording and
    there are tools out there that create UDF filesystems with rewritable
    partitions but that don't contain a Freed Space Bitmap or a Freed Space
    Table on media that does not require pre-processing before overwriting a
    block. So instead of forcing media with rewritable partition read-only,
    base this decision on presence of a Freed Space Bitmap or a Freed Space
    Table.
    
    Reported-by: Pali Rohár <pali.rohar@gmail.com>
    Reviewed-by: Pali Rohár <pali.rohar@gmail.com>
    Fixes: b085fbe2ef7f ("udf: Fix crash during mount")
    Link: https://lore.kernel.org/linux-fsdevel/20200112144735.hj2emsoy4uwsouxz@pali
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 218ab8f8862e44b87c2a7506b9dce278d65e3983
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Fri Jan 10 14:50:54 2020 -0800

    x86/cpu: Update cached HLE state on write to TSX_CTRL_CPUID_CLEAR
    
    [ Upstream commit 5efc6fa9044c3356d6046c6e1da6d02572dbed6b ]
    
    /proc/cpuinfo currently reports Hardware Lock Elision (HLE) feature to
    be present on boot cpu even if it was disabled during the bootup. This
    is because cpuinfo_x86->x86_capability HLE bit is not updated after TSX
    state is changed via the new MSR IA32_TSX_CTRL.
    
    Update the cached HLE bit also since it is expected to change after an
    update to CPUID_CLEAR bit in MSR IA32_TSX_CTRL.
    
    Fixes: 95c5824f75f3 ("x86/cpu: Add a "tsx=" cmdline option with TSX disabled by default")
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/2529b99546294c893dfa1c89e2b3e46da3369a59.1578685425.git.pawan.kumar.gupta@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e31057d4e9b5f58da07000a239af9922e7495769
Author: Gang He <GHe@suse.com>
Date:   Mon Feb 3 17:33:45 2020 -0800

    ocfs2: fix oops when writing cloned file
    
    [ Upstream commit 2d797e9ff95ecbcf0a83d657928ed20579444857 ]
    
    Writing a cloned file triggers a kernel oops and the user-space command
    process is also killed by the system.  The bug can be reproduced stably
    via:
    
    1) create a file under ocfs2 file system directory.
    
      journalctl -b > aa.txt
    
    2) create a cloned file for this file.
    
      reflink aa.txt bb.txt
    
    3) write the cloned file with dd command.
    
      dd if=/dev/zero of=bb.txt bs=512 count=1 conv=notrunc
    
    The dd command is killed by the kernel, then you can see the oops message
    via dmesg command.
    
    [  463.875404] BUG: kernel NULL pointer dereference, address: 0000000000000028
    [  463.875413] #PF: supervisor read access in kernel mode
    [  463.875416] #PF: error_code(0x0000) - not-present page
    [  463.875418] PGD 0 P4D 0
    [  463.875425] Oops: 0000 [#1] SMP PTI
    [  463.875431] CPU: 1 PID: 2291 Comm: dd Tainted: G           OE     5.3.16-2-default
    [  463.875433] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    [  463.875500] RIP: 0010:ocfs2_refcount_cow+0xa4/0x5d0 [ocfs2]
    [  463.875505] Code: 06 89 6c 24 38 89 eb f6 44 24 3c 02 74 be 49 8b 47 28
    [  463.875508] RSP: 0018:ffffa2cb409dfce8 EFLAGS: 00010202
    [  463.875512] RAX: ffff8b1ebdca8000 RBX: 0000000000000001 RCX: ffff8b1eb73a9df0
    [  463.875515] RDX: 0000000000056a01 RSI: 0000000000000000 RDI: 0000000000000000
    [  463.875517] RBP: 0000000000000001 R08: ffff8b1eb73a9de0 R09: 0000000000000000
    [  463.875520] R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000
    [  463.875522] R13: ffff8b1eb922f048 R14: 0000000000000000 R15: ffff8b1eb922f048
    [  463.875526] FS:  00007f8f44d15540(0000) GS:ffff8b1ebeb00000(0000) knlGS:0000000000000000
    [  463.875529] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  463.875532] CR2: 0000000000000028 CR3: 000000003c17a000 CR4: 00000000000006e0
    [  463.875546] Call Trace:
    [  463.875596]  ? ocfs2_inode_lock_full_nested+0x18b/0x960 [ocfs2]
    [  463.875648]  ocfs2_file_write_iter+0xaf8/0xc70 [ocfs2]
    [  463.875672]  new_sync_write+0x12d/0x1d0
    [  463.875688]  vfs_write+0xad/0x1a0
    [  463.875697]  ksys_write+0xa1/0xe0
    [  463.875710]  do_syscall_64+0x60/0x1f0
    [  463.875743]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  463.875758] RIP: 0033:0x7f8f4482ed44
    [  463.875762] Code: 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 80 00 00 00
    [  463.875765] RSP: 002b:00007fff300a79d8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [  463.875769] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f8f4482ed44
    [  463.875771] RDX: 0000000000000200 RSI: 000055f771b5c000 RDI: 0000000000000001
    [  463.875774] RBP: 0000000000000200 R08: 00007f8f44af9c78 R09: 0000000000000003
    [  463.875776] R10: 000000000000089f R11: 0000000000000246 R12: 000055f771b5c000
    [  463.875779] R13: 0000000000000200 R14: 0000000000000000 R15: 000055f771b5c000
    
    This regression problem was introduced by commit e74540b28556 ("ocfs2:
    protect extent tree in ocfs2_prepare_inode_for_write()").
    
    Link: http://lkml.kernel.org/r/20200121050153.13290-1-ghe@suse.com
    Fixes: e74540b28556 ("ocfs2: protect extent tree in ocfs2_prepare_inode_for_write()").
    Signed-off-by: Gang He <ghe@suse.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df3eb85b472fdbaa08e6712b8a64181d12470aad
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 3 17:35:13 2020 +0100

    media: iguanair: fix endpoint sanity check
    
    [ Upstream commit 1b257870a78b0a9ce98fdfb052c58542022ffb5b ]
    
    Make sure to use the current alternate setting, which need not be the
    first one by index, when verifying the endpoint descriptors and
    initialising the URBs.
    
    Failing to do so could cause the driver to misbehave or trigger a WARN()
    in usb_submit_urb() that kernels with panic_on_warn set would choke on.
    
    Fixes: 26ff63137c45 ("[media] Add support for the IguanaWorks USB IR Transceiver")
    Fixes: ab1cbdf159be ("media: iguanair: add sanity checks")
    Cc: stable <stable@vger.kernel.org>     # 3.6
    Cc: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdfaaf35ac49ef43d1f3a6ccf6f27b8e64f61828
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 28 19:54:55 2019 +0800

    kernel/module: Fix memleak in module_add_modinfo_attrs()
    
    [ Upstream commit f6d061d617124abbd55396a3bc37b9bf7d33233c ]
    
    In module_add_modinfo_attrs() if sysfs_create_file() fails
    on the first iteration of the loop (so i = 0), we forget to
    free the modinfo_attrs.
    
    Fixes: bc6f2a757d52 ("kernel/module: Fix mem leak in module_add_modinfo_attrs")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f98fe43cdaaeced34c2e6f6d1b76ed0d712bd2a
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Mon Feb 3 11:41:53 2020 +0100

    ovl: fix lseek overflow on 32bit
    
    [ Upstream commit a4ac9d45c0cd14a2adc872186431c79804b77dbf ]
    
    ovl_lseek() is using ssize_t to return the value from vfs_llseek().  On a
    32-bit kernel ssize_t is a 32-bit signed int, which overflows above 2 GB.
    
    Assign the return value of vfs_llseek() to loff_t to fix this.
    
    Reported-by: Boris Gjenero <boris.gjenero@gmail.com>
    Fixes: 9e46b840c705 ("ovl: support stacked SEEK_HOLE/SEEK_DATA")
    Cc: <stable@vger.kernel.org> # v4.19
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41be0c3295e23374882aa53b651a00515c4a032d
Author: Icenowy Zheng <icenowy@aosc.io>
Date:   Tue Oct 1 16:02:51 2019 +0800

    Revert "drm/sun4i: dsi: Change the start delay calculation"
    
    [ Upstream commit a00d17e0a71ae2e4fdaac46e1c12785d3346c3f2 ]
    
    This reverts commit da676c6aa6413d59ab0a80c97bbc273025e640b2.
    
    The original commit adds a start parameter to the calculation of the
    start delay according to some old BSP versions from Allwinner. However,
    there're two ways to add this delay -- add it in DSI controller or add
    it in the TCON. Add it in both controllers won't work.
    
    The code before this commit is picked from new versions of BSP kernel,
    which has a comment for the 1 that says "put start_delay to tcon". By
    checking the sun4i_tcon0_mode_set_cpu() in sun4i_tcon driver, it has
    already added this delay, so we shouldn't repeat to add the delay in DSI
    controller, otherwise the timing won't match.
    
    Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
    Reviewed-by: Jagan Teki <jagan@amarulasolutions.com>
    Signed-off-by: Maxime Ripard <mripard@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191001080253.6135-2-icenowy@aosc.io
    Signed-off-by: Sasha Levin <sashal@kernel.org>
