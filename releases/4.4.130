commit 34a220d573fcb5d66ad466611eb80f65b6af98d4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Apr 29 07:50:07 2018 +0200

    Linux 4.4.130

commit 36773797e9b466bcbe5a7672f5e4cbdba3e8ae15
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Mon Apr 16 12:22:24 2018 +0200

    s390/uprobes: implement arch_uretprobe_is_alive()
    
    commit 783c3b53b9506db3e05daacfe34e0287eebb09d8 upstream.
    
    Implement s390 specific arch_uretprobe_is_alive() to avoid SIGSEGVs
    observed with uretprobes in combination with setjmp/longjmp.
    
    See commit 2dea1d9c38e4 ("powerpc/uprobes: Implement
    arch_uretprobe_is_alive()") for more details.
    
    With this implemented all test cases referenced in the above commit
    pass.
    
    Reported-by: Ziqian SUN <zsun@redhat.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58f1678c43f2270092406518711bebb9f40a7854
Author: Sebastian Ott <sebott@linux.ibm.com>
Date:   Wed Apr 11 11:21:17 2018 +0200

    s390/cio: update chpid descriptor after resource accessibility event
    
    commit af2e460ade0b0180d0f3812ca4f4f59cc9597f3e upstream.
    
    Channel path descriptors have been seen as something stable (as
    long as the chpid is configured). Recent tests have shown that the
    descriptor can also be altered when the link state of a channel path
    changes. Thus it is necessary to update the descriptor during
    handling of resource accessibility events.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sebastian Ott <sebott@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e47611257d7b46bfdc70726a8a236881180cf990
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 18 12:51:31 2018 +0300

    cdrom: information leak in cdrom_ioctl_media_changed()
    
    commit 9de4ee40547fd315d4a0ed1dd15a2fa3559ad707 upstream.
    
    This cast is wrong.  "cdi->capacity" is an int and "arg" is an unsigned
    long.  The way the check is written now, if one of the high 32 bits is
    set then we could read outside the info->slots[] array.
    
    This bug is pretty old and it predates git.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0ffbef2003775400c14108ee38acbf69e611767
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Wed Apr 18 22:54:59 2018 -0400

    scsi: mptsas: Disable WRITE SAME
    
    commit 94e5395d2403c8bc2504a7cbe4c4caaacb7b8b84 upstream.
    
    First generation MPT Fusion controllers can not translate WRITE SAME
    when the attached device is a SATA drive. Disable WRITE SAME support.
    
    Reported-by: Nikola Ciprich <nikola.ciprich@linuxbox.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1785e844a02e770d3cb7458a6f15d2e7c1f927b
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 22 18:29:23 2018 -0700

    ipv6: add RTA_TABLE and RTA_PREFSRC to rtm_ipv6_policy
    
    
    [ Upstream commit aa8f8778493c85fff480cdf8b349b1e1dcb5f243 ]
    
    KMSAN reported use of uninit-value that I tracked to lack
    of proper size check on RTA_TABLE attribute.
    
    I also believe RTA_PREFSRC lacks a similar check.
    
    Fixes: 86872cb57925 ("[IPv6] route: FIB6 configuration using struct fib6_config")
    Fixes: c3968a857a6b ("ipv6: RTA_PREFSRC support for ipv6 route source address selection")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab3828313863194e445d439ce7eae65563b774bd
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 15 17:52:04 2018 -0700

    net: af_packet: fix race in PACKET_{R|T}X_RING
    
    
    [ Upstream commit 5171b37d959641bbc619781caf62e61f7b940871 ]
    
    In order to remove the race caught by syzbot [1], we need
    to lock the socket before using po->tp_version as this could
    change under us otherwise.
    
    This means lock_sock() and release_sock() must be done by
    packet_set_ring() callers.
    
    [1] :
    BUG: KMSAN: uninit-value in packet_set_ring+0x1254/0x3870 net/packet/af_packet.c:4249
    CPU: 0 PID: 20195 Comm: syzkaller707632 Not tainted 4.16.0+ #83
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:676
     packet_set_ring+0x1254/0x3870 net/packet/af_packet.c:4249
     packet_setsockopt+0x12c6/0x5a90 net/packet/af_packet.c:3662
     SYSC_setsockopt+0x4b8/0x570 net/socket.c:1849
     SyS_setsockopt+0x76/0xa0 net/socket.c:1828
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x449099
    RSP: 002b:00007f42b5307ce8 EFLAGS: 00000246 ORIG_RAX: 0000000000000036
    RAX: ffffffffffffffda RBX: 000000000070003c RCX: 0000000000449099
    RDX: 0000000000000005 RSI: 0000000000000107 RDI: 0000000000000003
    RBP: 0000000000700038 R08: 000000000000001c R09: 0000000000000000
    R10: 00000000200000c0 R11: 0000000000000246 R12: 0000000000000000
    R13: 000000000080eecf R14: 00007f42b53089c0 R15: 0000000000000001
    
    Local variable description: ----req_u@packet_setsockopt
    Variable was created at:
     packet_setsockopt+0x13f/0x5a90 net/packet/af_packet.c:3612
     SYSC_setsockopt+0x4b8/0x570 net/socket.c:1849
    
    Fixes: f6fb8f100b80 ("af-packet: TPACKET_V3 flexible buffer implementation.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8be2d38bb3579b3da34ff326e6c87e4cb0b740f4
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 11 14:36:28 2018 -0700

    tcp: md5: reject TCP_MD5SIG or TCP_MD5SIG_EXT on established sockets
    
    
    [ Upstream commit 7212303268918b9a203aebeacfdbd83b5e87b20d ]
    
    syzbot/KMSAN reported an uninit-value in tcp_parse_options() [1]
    
    I believe this was caused by a TCP_MD5SIG being set on live
    flow.
    
    This is highly unexpected, since TCP option space is limited.
    
    For instance, presence of TCP MD5 option automatically disables
    TCP TimeStamp option at SYN/SYNACK time, which we can not do
    once flow has been established.
    
    Really, adding/deleting an MD5 key only makes sense on sockets
    in CLOSE or LISTEN state.
    
    [1]
    BUG: KMSAN: uninit-value in tcp_parse_options+0xd74/0x1a30 net/ipv4/tcp_input.c:3720
    CPU: 1 PID: 6177 Comm: syzkaller192004 Not tainted 4.16.0+ #83
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:676
     tcp_parse_options+0xd74/0x1a30 net/ipv4/tcp_input.c:3720
     tcp_fast_parse_options net/ipv4/tcp_input.c:3858 [inline]
     tcp_validate_incoming+0x4f1/0x2790 net/ipv4/tcp_input.c:5184
     tcp_rcv_established+0xf60/0x2bb0 net/ipv4/tcp_input.c:5453
     tcp_v4_do_rcv+0x6cd/0xd90 net/ipv4/tcp_ipv4.c:1469
     sk_backlog_rcv include/net/sock.h:908 [inline]
     __release_sock+0x2d6/0x680 net/core/sock.c:2271
     release_sock+0x97/0x2a0 net/core/sock.c:2786
     tcp_sendmsg+0xd6/0x100 net/ipv4/tcp.c:1464
     inet_sendmsg+0x48d/0x740 net/ipv4/af_inet.c:764
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     SYSC_sendto+0x6c3/0x7e0 net/socket.c:1747
     SyS_sendto+0x8a/0xb0 net/socket.c:1715
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x448fe9
    RSP: 002b:00007fd472c64d38 EFLAGS: 00000216 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00000000006e5a30 RCX: 0000000000448fe9
    RDX: 000000000000029f RSI: 0000000020a88f88 RDI: 0000000000000004
    RBP: 00000000006e5a34 R08: 0000000020e68000 R09: 0000000000000010
    R10: 00000000200007fd R11: 0000000000000216 R12: 0000000000000000
    R13: 00007fff074899ef R14: 00007fd472c659c0 R15: 0000000000000009
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     tcp_send_ack+0x18c/0x910 net/ipv4/tcp_output.c:3624
     __tcp_ack_snd_check net/ipv4/tcp_input.c:5040 [inline]
     tcp_ack_snd_check net/ipv4/tcp_input.c:5053 [inline]
     tcp_rcv_established+0x2103/0x2bb0 net/ipv4/tcp_input.c:5469
     tcp_v4_do_rcv+0x6cd/0xd90 net/ipv4/tcp_ipv4.c:1469
     sk_backlog_rcv include/net/sock.h:908 [inline]
     __release_sock+0x2d6/0x680 net/core/sock.c:2271
     release_sock+0x97/0x2a0 net/core/sock.c:2786
     tcp_sendmsg+0xd6/0x100 net/ipv4/tcp.c:1464
     inet_sendmsg+0x48d/0x740 net/ipv4/af_inet.c:764
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     SYSC_sendto+0x6c3/0x7e0 net/socket.c:1747
     SyS_sendto+0x8a/0xb0 net/socket.c:1715
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Fixes: cfb6eeb4c860 ("[TCP]: MD5 Signature Option (RFC2385) support.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0eb338b22c800e27af7dc60812d82b76a27d1514
Author: Wolfgang Bumiller <w.bumiller@proxmox.com>
Date:   Thu Apr 12 10:46:55 2018 +0200

    net: fix deadlock while clearing neighbor proxy table
    
    
    [ Upstream commit 53b76cdf7e8fecec1d09e38aad2f8579882591a8 ]
    
    When coming from ndisc_netdev_event() in net/ipv6/ndisc.c,
    neigh_ifdown() is called with &nd_tbl, locking this while
    clearing the proxy neighbor entries when eg. deleting an
    interface. Calling the table's pndisc_destructor() with the
    lock still held, however, can cause a deadlock: When a
    multicast listener is available an IGMP packet of type
    ICMPV6_MGM_REDUCTION may be sent out. When reaching
    ip6_finish_output2(), if no neighbor entry for the target
    address is found, __neigh_create() is called with &nd_tbl,
    which it'll want to lock.
    
    Move the elements into their own list, then unlock the table
    and perform the destruction.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199289
    Fixes: 6fd6ce2056de ("ipv6: Do not depend on rt->n in ip6_finish_output2().")
    Signed-off-by: Wolfgang Bumiller <w.bumiller@proxmox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 761b54e09947ac15b0d688ab3ecf430c890b6bfe
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:42 2018 -0700

    tipc: add policy for TIPC_NLA_NET_ADDR
    
    
    [ Upstream commit ec518f21cb1a1b1f8a516499ea05c60299e04963 ]
    
    Before syzbot/KMSAN bites, add the missing policy for TIPC_NLA_NET_ADDR
    
    Fixes: 27c21416727a ("tipc: add net set to new netlink api")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50083b76de998479d45d3bd0f117a8d27d7b17af
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Apr 19 21:54:34 2018 -0700

    llc: fix NULL pointer deref for SOCK_ZAPPED
    
    
    [ Upstream commit 3a04ce7130a7e5dad4e78d45d50313747f8c830f ]
    
    For SOCK_ZAPPED socket, we don't need to care about llc->sap,
    so we should just skip these refcount functions in this case.
    
    Fixes: f7e43672683b ("llc: hold llc_sap before release_sock()")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddebd5d78238a78aac4051317f456e672308ce9f
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Apr 18 11:51:56 2018 -0700

    llc: hold llc_sap before release_sock()
    
    
    [ Upstream commit f7e43672683b097bb074a8fe7af9bc600a23f231 ]
    
    syzbot reported we still access llc->sap in llc_backlog_rcv()
    after it is freed in llc_sap_remove_socket():
    
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/report.c:430
     llc_conn_ac_send_sabme_cmd_p_set_x+0x3a8/0x460 net/llc/llc_c_ac.c:785
     llc_exec_conn_trans_actions net/llc/llc_conn.c:475 [inline]
     llc_conn_service net/llc/llc_conn.c:400 [inline]
     llc_conn_state_process+0x4e1/0x13a0 net/llc/llc_conn.c:75
     llc_backlog_rcv+0x195/0x1e0 net/llc/llc_conn.c:891
     sk_backlog_rcv include/net/sock.h:909 [inline]
     __release_sock+0x12f/0x3a0 net/core/sock.c:2335
     release_sock+0xa4/0x2b0 net/core/sock.c:2850
     llc_ui_release+0xc8/0x220 net/llc/af_llc.c:204
    
    llc->sap is refcount'ed and llc_sap_remove_socket() is paired
    with llc_sap_add_socket(). This can be amended by holding its refcount
    before llc_sap_remove_socket() and releasing it after release_sock().
    
    Reported-by: <syzbot+6e181fc95081c2cf9051@syzkaller.appspotmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14c81b811aae69641253ae86b83b8eba7677509c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Apr 12 14:24:31 2018 +0800

    sctp: do not check port in sctp_inet6_cmp_addr
    
    
    [ Upstream commit 1071ec9d453a38023579714b64a951a2fb982071 ]
    
    pf->cmp_addr() is called before binding a v6 address to the sock. It
    should not check ports, like in sctp_inet_cmp_addr.
    
    But sctp_inet6_cmp_addr checks the addr by invoking af(6)->cmp_addr,
    sctp_v6_cmp_addr where it also compares the ports.
    
    This would cause that setsockopt(SCTP_SOCKOPT_BINDX_ADD) could bind
    multiple duplicated IPv6 addresses after Commit 40b4f0fd74e4 ("sctp:
    lack the check for ports in sctp_v6_cmp_addr").
    
    This patch is to remove af->cmp_addr called in sctp_inet6_cmp_addr,
    but do the proper check for both v6 addrs and v4mapped addrs.
    
    v1->v2:
      - define __sctp_v6_cmp_addr to do the common address comparison
        used for both pf and af v6 cmp_addr.
    
    Fixes: 40b4f0fd74e4 ("sctp: lack the check for ports in sctp_v6_cmp_addr")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f74460e5b3333e49bc175ef3eab175cb42c0ce0
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Tue Apr 17 18:46:14 2018 +0900

    vlan: Fix reading memory beyond skb->tail in skb_vlan_tagged_multi
    
    
    [ Upstream commit 7ce2367254e84753bceb07327aaf5c953cfce117 ]
    
    Syzkaller spotted an old bug which leads to reading skb beyond tail by 4
    bytes on vlan tagged packets.
    This is caused because skb_vlan_tagged_multi() did not check
    skb_headlen.
    
    BUG: KMSAN: uninit-value in eth_type_vlan include/linux/if_vlan.h:283 [inline]
    BUG: KMSAN: uninit-value in skb_vlan_tagged_multi include/linux/if_vlan.h:656 [inline]
    BUG: KMSAN: uninit-value in vlan_features_check include/linux/if_vlan.h:672 [inline]
    BUG: KMSAN: uninit-value in dflt_features_check net/core/dev.c:2949 [inline]
    BUG: KMSAN: uninit-value in netif_skb_features+0xd1b/0xdc0 net/core/dev.c:3009
    CPU: 1 PID: 3582 Comm: syzkaller435149 Not tainted 4.16.0+ #82
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x185/0x1d0 lib/dump_stack.c:53
      kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
      __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:676
      eth_type_vlan include/linux/if_vlan.h:283 [inline]
      skb_vlan_tagged_multi include/linux/if_vlan.h:656 [inline]
      vlan_features_check include/linux/if_vlan.h:672 [inline]
      dflt_features_check net/core/dev.c:2949 [inline]
      netif_skb_features+0xd1b/0xdc0 net/core/dev.c:3009
      validate_xmit_skb+0x89/0x1320 net/core/dev.c:3084
      __dev_queue_xmit+0x1cb2/0x2b60 net/core/dev.c:3549
      dev_queue_xmit+0x4b/0x60 net/core/dev.c:3590
      packet_snd net/packet/af_packet.c:2944 [inline]
      packet_sendmsg+0x7c57/0x8a10 net/packet/af_packet.c:2969
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      sock_write_iter+0x3b9/0x470 net/socket.c:909
      do_iter_readv_writev+0x7bb/0x970 include/linux/fs.h:1776
      do_iter_write+0x30d/0xd40 fs/read_write.c:932
      vfs_writev fs/read_write.c:977 [inline]
      do_writev+0x3c9/0x830 fs/read_write.c:1012
      SYSC_writev+0x9b/0xb0 fs/read_write.c:1085
      SyS_writev+0x56/0x80 fs/read_write.c:1082
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43ffa9
    RSP: 002b:00007fff2cff3948 EFLAGS: 00000217 ORIG_RAX: 0000000000000014
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043ffa9
    RDX: 0000000000000001 RSI: 0000000020000080 RDI: 0000000000000003
    RBP: 00000000006cb018 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000217 R12: 00000000004018d0
    R13: 0000000000401960 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
      kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
      kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
      kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
      kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
      slab_post_alloc_hook mm/slab.h:445 [inline]
      slab_alloc_node mm/slub.c:2737 [inline]
      __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
      __kmalloc_reserve net/core/skbuff.c:138 [inline]
      __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
      alloc_skb include/linux/skbuff.h:984 [inline]
      alloc_skb_with_frags+0x1d4/0xb20 net/core/skbuff.c:5234
      sock_alloc_send_pskb+0xb56/0x1190 net/core/sock.c:2085
      packet_alloc_skb net/packet/af_packet.c:2803 [inline]
      packet_snd net/packet/af_packet.c:2894 [inline]
      packet_sendmsg+0x6444/0x8a10 net/packet/af_packet.c:2969
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      sock_write_iter+0x3b9/0x470 net/socket.c:909
      do_iter_readv_writev+0x7bb/0x970 include/linux/fs.h:1776
      do_iter_write+0x30d/0xd40 fs/read_write.c:932
      vfs_writev fs/read_write.c:977 [inline]
      do_writev+0x3c9/0x830 fs/read_write.c:1012
      SYSC_writev+0x9b/0xb0 fs/read_write.c:1085
      SyS_writev+0x56/0x80 fs/read_write.c:1082
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Fixes: 58e998c6d239 ("offloading: Force software GSO for multiple vlan tags.")
    Reported-and-tested-by: syzbot+0bbe42c764feafa82c5a@syzkaller.appspotmail.com
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dedf29a064e94fa5bf9dca8f91898f6152c86498
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Mon Apr 23 16:38:27 2018 +0200

    pppoe: check sockaddr length in pppoe_connect()
    
    
    [ Upstream commit a49e2f5d5fb141884452ddb428f551b123d436b5 ]
    
    We must validate sockaddr_len, otherwise userspace can pass fewer data
    than we expect and we end up accessing invalid data.
    
    Fixes: 224cf5ad14c0 ("ppp: Move the PPP drivers")
    Reported-by: syzbot+4f03bdf92fdf9ef5ddab@syzkaller.appspotmail.com
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 183f20fb01dcbc1e4b1d821c83e37d3fff144893
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Apr 23 17:37:03 2018 -0400

    packet: fix bitfield update race
    
    
    [ Upstream commit a6361f0ca4b25460f2cdf3235ebe8115f622901e ]
    
    Updates to the bitfields in struct packet_sock are not atomic.
    Serialize these read-modify-write cycles.
    
    Move po->running into a separate variable. Its writes are protected by
    po->bind_lock (except for one startup case at packet_create). Also
    replace a textual precondition warning with lockdep annotation.
    
    All others are set only in packet_setsockopt. Serialize these
    updates by holding the socket lock. Analogous to other field updates,
    also hold the lock when testing whether a ring is active (pg_vec).
    
    Fixes: 8dc419447415 ("[PACKET]: Add optional checksum computation for recvmsg")
    Reported-by: DaeRyong Jeong <threeearcat@gmail.com>
    Reported-by: Byoungyoung Lee <byoungyoung@purdue.edu>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3da49b83774683f8e78a1592170f76395d537c6
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Apr 24 14:33:37 2018 +0800

    team: fix netconsole setup over team
    
    
    [ Upstream commit 9cf2f437ca5b39828984064fad213e68fc17ef11 ]
    
    The same fix in Commit dbe173079ab5 ("bridge: fix netconsole
    setup over bridge") is also needed for team driver.
    
    While at it, remove the unnecessary parameter *team from
    team_port_enable_netpoll().
    
    v1->v2:
      - fix it in a better way, as does bridge.
    
    Fixes: 0fb52a27a04a ("team: cleanup netpoll clode")
    Reported-by: João Avelino Bellomo Filho <jbellomo@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e6805ab7822a6112e2ee230c55cc62ef532fca7
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Fri Apr 13 13:59:25 2018 +0200

    team: avoid adding twice the same option to the event list
    
    
    [ Upstream commit 4fb0534fb7bbc2346ba7d3a072b538007f4135a5 ]
    
    When parsing the options provided by the user space,
    team_nl_cmd_options_set() insert them in a temporary list to send
    multiple events with a single message.
    While each option's attribute is correctly validated, the code does
    not check for duplicate entries before inserting into the event
    list.
    
    Exploiting the above, the syzbot was able to trigger the following
    splat:
    
    kernel BUG at lib/list_debug.c:31!
    invalid opcode: 0000 [#1] SMP KASAN
    Dumping ftrace buffer:
        (ftrace buffer empty)
    Modules linked in:
    CPU: 0 PID: 4466 Comm: syzkaller556835 Not tainted 4.16.0+ #17
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__list_add_valid+0xaa/0xb0 lib/list_debug.c:29
    RSP: 0018:ffff8801b04bf248 EFLAGS: 00010286
    RAX: 0000000000000058 RBX: ffff8801c8fc7a90 RCX: 0000000000000000
    RDX: 0000000000000058 RSI: ffffffff815fbf41 RDI: ffffed0036097e3f
    RBP: ffff8801b04bf260 R08: ffff8801b0b2a700 R09: ffffed003b604f90
    R10: ffffed003b604f90 R11: ffff8801db027c87 R12: ffff8801c8fc7a90
    R13: ffff8801c8fc7a90 R14: dffffc0000000000 R15: 0000000000000000
    FS:  0000000000b98880(0000) GS:ffff8801db000000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000000043fc30 CR3: 00000001afe8e000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      __list_add include/linux/list.h:60 [inline]
      list_add include/linux/list.h:79 [inline]
      team_nl_cmd_options_set+0x9ff/0x12b0 drivers/net/team/team.c:2571
      genl_family_rcv_msg+0x889/0x1120 net/netlink/genetlink.c:599
      genl_rcv_msg+0xc6/0x170 net/netlink/genetlink.c:624
      netlink_rcv_skb+0x172/0x440 net/netlink/af_netlink.c:2448
      genl_rcv+0x28/0x40 net/netlink/genetlink.c:635
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0x58b/0x740 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x9f0/0xfa0 net/netlink/af_netlink.c:1901
      sock_sendmsg_nosec net/socket.c:629 [inline]
      sock_sendmsg+0xd5/0x120 net/socket.c:639
      ___sys_sendmsg+0x805/0x940 net/socket.c:2117
      __sys_sendmsg+0x115/0x270 net/socket.c:2155
      SYSC_sendmsg net/socket.c:2164 [inline]
      SyS_sendmsg+0x29/0x30 net/socket.c:2162
      do_syscall_64+0x29e/0x9d0 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x42/0xb7
    RIP: 0033:0x4458b9
    RSP: 002b:00007ffd1d4a7278 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 000000000000001b RCX: 00000000004458b9
    RDX: 0000000000000010 RSI: 0000000020000d00 RDI: 0000000000000004
    RBP: 00000000004a74ed R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000213 R12: 00007ffd1d4a7348
    R13: 0000000000402a60 R14: 0000000000000000 R15: 0000000000000000
    Code: 75 e8 eb a9 48 89 f7 48 89 75 e8 e8 d1 85 7b fe 48 8b 75 e8 eb bb 48
    89 f2 48 89 d9 4c 89 e6 48 c7 c7 a0 84 d8 87 e8 ea 67 28 fe <0f> 0b 0f 1f
    40 00 48 b8 00 00 00 00 00 fc ff df 55 48 89 e5 41
    RIP: __list_add_valid+0xaa/0xb0 lib/list_debug.c:29 RSP: ffff8801b04bf248
    
    This changeset addresses the avoiding list_add() if the current
    option is already present in the event list.
    
    Reported-and-tested-by: syzbot+4d4af685432dc0e56c91@syzkaller.appspotmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Fixes: 2fcdb2c9e659 ("team: allow to send multiple set events in one message")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09a37b3661f6d3cf701950dd6944f24d559449f7
Author: Jann Horn <jannh@google.com>
Date:   Fri Apr 20 15:57:30 2018 +0200

    tcp: don't read out-of-bounds opsize
    
    
    [ Upstream commit 7e5a206ab686f098367b61aca989f5cdfa8114a3 ]
    
    The old code reads the "opsize" variable from out-of-bounds memory (first
    byte behind the segment) if a broken TCP segment ends directly after an
    opcode that is neither EOL nor NOP.
    
    The result of the read isn't used for anything, so the worst thing that
    could theoretically happen is a pagefault; and since the physmap is usually
    mostly contiguous, even that seems pretty unlikely.
    
    The following C reproducer triggers the uninitialized read - however, you
    can't actually see anything happen unless you put something like a
    pr_warn() in tcp_parse_md5sig_option() to print the opsize.
    
    ====================================
    #define _GNU_SOURCE
    #include <arpa/inet.h>
    #include <stdlib.h>
    #include <errno.h>
    #include <stdarg.h>
    #include <net/if.h>
    #include <linux/if.h>
    #include <linux/ip.h>
    #include <linux/tcp.h>
    #include <linux/in.h>
    #include <linux/if_tun.h>
    #include <err.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>
    #include <string.h>
    #include <stdio.h>
    #include <unistd.h>
    #include <sys/ioctl.h>
    #include <assert.h>
    
    void systemf(const char *command, ...) {
      char *full_command;
      va_list ap;
      va_start(ap, command);
      if (vasprintf(&full_command, command, ap) == -1)
        err(1, "vasprintf");
      va_end(ap);
      printf("systemf: <<<%s>>>\n", full_command);
      system(full_command);
    }
    
    char *devname;
    
    int tun_alloc(char *name) {
      int fd = open("/dev/net/tun", O_RDWR);
      if (fd == -1)
        err(1, "open tun dev");
      static struct ifreq req = { .ifr_flags = IFF_TUN|IFF_NO_PI };
      strcpy(req.ifr_name, name);
      if (ioctl(fd, TUNSETIFF, &req))
        err(1, "TUNSETIFF");
      devname = req.ifr_name;
      printf("device name: %s\n", devname);
      return fd;
    }
    
    #define IPADDR(a,b,c,d) (((a)<<0)+((b)<<8)+((c)<<16)+((d)<<24))
    
    void sum_accumulate(unsigned int *sum, void *data, int len) {
      assert((len&2)==0);
      for (int i=0; i<len/2; i++) {
        *sum += ntohs(((unsigned short *)data)[i]);
      }
    }
    
    unsigned short sum_final(unsigned int sum) {
      sum = (sum >> 16) + (sum & 0xffff);
      sum = (sum >> 16) + (sum & 0xffff);
      return htons(~sum);
    }
    
    void fix_ip_sum(struct iphdr *ip) {
      unsigned int sum = 0;
      sum_accumulate(&sum, ip, sizeof(*ip));
      ip->check = sum_final(sum);
    }
    
    void fix_tcp_sum(struct iphdr *ip, struct tcphdr *tcp) {
      unsigned int sum = 0;
      struct {
        unsigned int saddr;
        unsigned int daddr;
        unsigned char pad;
        unsigned char proto_num;
        unsigned short tcp_len;
      } fakehdr = {
        .saddr = ip->saddr,
        .daddr = ip->daddr,
        .proto_num = ip->protocol,
        .tcp_len = htons(ntohs(ip->tot_len) - ip->ihl*4)
      };
      sum_accumulate(&sum, &fakehdr, sizeof(fakehdr));
      sum_accumulate(&sum, tcp, tcp->doff*4);
      tcp->check = sum_final(sum);
    }
    
    int main(void) {
      int tun_fd = tun_alloc("inject_dev%d");
      systemf("ip link set %s up", devname);
      systemf("ip addr add 192.168.42.1/24 dev %s", devname);
    
      struct {
        struct iphdr ip;
        struct tcphdr tcp;
        unsigned char tcp_opts[20];
      } __attribute__((packed)) syn_packet = {
        .ip = {
          .ihl = sizeof(struct iphdr)/4,
          .version = 4,
          .tot_len = htons(sizeof(syn_packet)),
          .ttl = 30,
          .protocol = IPPROTO_TCP,
          /* FIXUP check */
          .saddr = IPADDR(192,168,42,2),
          .daddr = IPADDR(192,168,42,1)
        },
        .tcp = {
          .source = htons(1),
          .dest = htons(1337),
          .seq = 0x12345678,
          .doff = (sizeof(syn_packet.tcp)+sizeof(syn_packet.tcp_opts))/4,
          .syn = 1,
          .window = htons(64),
          .check = 0 /*FIXUP*/
        },
        .tcp_opts = {
          /* INVALID: trailing MD5SIG opcode after NOPs */
          1, 1, 1, 1, 1,
          1, 1, 1, 1, 1,
          1, 1, 1, 1, 1,
          1, 1, 1, 1, 19
        }
      };
      fix_ip_sum(&syn_packet.ip);
      fix_tcp_sum(&syn_packet.ip, &syn_packet.tcp);
      while (1) {
        int write_res = write(tun_fd, &syn_packet, sizeof(syn_packet));
        if (write_res != sizeof(syn_packet))
          err(1, "packet write failed");
      }
    }
    ====================================
    
    Fixes: cfb6eeb4c860 ("[TCP]: MD5 Signature Option (RFC2385) support.")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ebd6a11b297191078aa86b6f563f65d7cb53993
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Apr 19 12:25:38 2018 -0700

    llc: delete timers synchronously in llc_sk_free()
    
    
    [ Upstream commit b905ef9ab90115d001c1658259af4b1c65088779 ]
    
    The connection timers of an llc sock could be still flying
    after we delete them in llc_sk_free(), and even possibly
    after we free the sock. We could just wait synchronously
    here in case of troubles.
    
    Note, I leave other call paths as they are, since they may
    not have to wait, at least we can change them to synchronously
    when needed.
    
    Also, move the code to net/llc/llc_conn.c, which is apparently
    a better place.
    
    Reported-by: <syzbot+f922284c18ea23a8e457@syzkaller.appspotmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6e78baf1df18ec01f7fea0c389600e2f5faad75
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 11 14:46:00 2018 -0700

    net: validate attribute sizes in neigh_dump_table()
    
    
    [ Upstream commit 7dd07c143a4b54d050e748bee4b4b9e94a7b1744 ]
    
    Since neigh_dump_table() calls nlmsg_parse() without giving policy
    constraints, attributes can have arbirary size that we must validate
    
    Reported by syzbot/KMSAN :
    
    BUG: KMSAN: uninit-value in neigh_master_filtered net/core/neighbour.c:2292 [inline]
    BUG: KMSAN: uninit-value in neigh_dump_table net/core/neighbour.c:2348 [inline]
    BUG: KMSAN: uninit-value in neigh_dump_info+0x1af0/0x2250 net/core/neighbour.c:2438
    CPU: 1 PID: 3575 Comm: syzkaller268891 Not tainted 4.16.0+ #83
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:676
     neigh_master_filtered net/core/neighbour.c:2292 [inline]
     neigh_dump_table net/core/neighbour.c:2348 [inline]
     neigh_dump_info+0x1af0/0x2250 net/core/neighbour.c:2438
     netlink_dump+0x9ad/0x1540 net/netlink/af_netlink.c:2225
     __netlink_dump_start+0x1167/0x12a0 net/netlink/af_netlink.c:2322
     netlink_dump_start include/linux/netlink.h:214 [inline]
     rtnetlink_rcv_msg+0x1435/0x1560 net/core/rtnetlink.c:4598
     netlink_rcv_skb+0x355/0x5f0 net/netlink/af_netlink.c:2447
     rtnetlink_rcv+0x50/0x60 net/core/rtnetlink.c:4653
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x1672/0x1750 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fed9
    RSP: 002b:00007ffddbee2798 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fed9
    RDX: 0000000000000000 RSI: 0000000020005000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 0000000000401800
    R13: 0000000000401890 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    Fixes: 21fdd092acc7 ("net: Add support for filtering neigh dump by master device")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: David Ahern <dsa@cumulusnetworks.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddecae8696b96cf56154692298fa4511bc7f70d5
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Mon Apr 23 16:15:14 2018 +0200

    l2tp: check sockaddr length in pppol2tp_connect()
    
    
    [ Upstream commit eb1c28c05894a4b1f6b56c5bf072205e64cfa280 ]
    
    Check sockaddr_len before dereferencing sp->sa_protocol, to ensure that
    it actually points to valid data.
    
    Fixes: fd558d186df2 ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Reported-by: syzbot+a70ac890b23b1bf29f5c@syzkaller.appspotmail.com
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 153e9cdb7e9277d63cf5eed5fb5c3694310f6ca9
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Apr 17 12:07:06 2018 -0700

    KEYS: DNS: limit the length of option strings
    
    
    [ Upstream commit 9c438d7a3a52dcc2b9ed095cb87d3a5e83cf7e60 ]
    
    Adding a dns_resolver key whose payload contains a very long option name
    resulted in that string being printed in full.  This hit the WARN_ONCE()
    in set_precision() during the printk(), because printk() only supports a
    precision of up to 32767 bytes:
    
        precision 1000000 too large
        WARNING: CPU: 0 PID: 752 at lib/vsprintf.c:2189 vsnprintf+0x4bc/0x5b0
    
    Fix it by limiting option strings (combined name + value) to a much more
    reasonable 128 bytes.  The exact limit is arbitrary, but currently the
    only recognized option is formatted as "dnserror=%lu" which fits well
    within this limit.
    
    Also ratelimit the printks.
    
    Reproducer:
    
        perl -e 'print "#", "A" x 1000000, "\x00"' | keyctl padd dns_resolver desc @s
    
    This bug was found using syzkaller.
    
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Fixes: 4a2d789267e0 ("DNS: If the DNS server returns an error, allow that to be cached [ver #2]")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 654fecaea1759bf3e48bd0322034b24b0d2adb6b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Apr 22 19:11:50 2018 +0800

    bonding: do not set slave_dev npinfo before slave_enable_netpoll in bond_enslave
    
    [ Upstream commit ddea788c63094f7c483783265563dd5b50052e28 ]
    
    After Commit 8a8efa22f51b ("bonding: sync netpoll code with bridge"), it
    would set slave_dev npinfo in slave_enable_netpoll when enslaving a dev
    if bond->dev->npinfo was set.
    
    However now slave_dev npinfo is set with bond->dev->npinfo before calling
    slave_enable_netpoll. With slave_dev npinfo set, __netpoll_setup called
    in slave_enable_netpoll will not call slave dev's .ndo_netpoll_setup().
    It causes that the lower dev of this slave dev can't set its npinfo.
    
    One way to reproduce it:
    
      # modprobe bonding
      # brctl addbr br0
      # brctl addif br0 eth1
      # ifconfig bond0 192.168.122.1/24 up
      # ifenslave bond0 eth2
      # systemctl restart netconsole
      # ifenslave bond0 br0
      # ifconfig eth2 down
      # systemctl restart netconsole
    
    The netpoll won't really work.
    
    This patch is to remove that slave_dev npinfo setting in bond_enslave().
    
    Fixes: 8a8efa22f51b ("bonding: sync netpoll code with bridge")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01d5df5443aae5cf99dae6d9563eba4fedcf67a5
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:37:02 2018 +0200

    s390: correct module section names for expoline code revert
    
    [ Upstream commit 6cf09958f32b9667bb3ebadf74367c791112771b ]
    
    The main linker script vmlinux.lds.S for the kernel image merges
    the expoline code patch tables into two section ".nospec_call_table"
    and ".nospec_return_table". This is *not* done for the modules,
    there the sections retain their original names as generated by gcc:
    ".s390_indirect_call", ".s390_return_mem" and ".s390_return_reg".
    
    The module_finalize code has to check for the compiler generated
    section names, otherwise no code patching is done. This slows down
    the module code in case of "spectre_v2=off".
    
    Cc: stable@vger.kernel.org # 4.16
    Fixes: f19fbd5ed6 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2d46e7be467d06ee217fad41261d999fee777fb
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:37:01 2018 +0200

    s390: correct nospec auto detection init order
    
    [ Upstream commit 6a3d1e81a434fc311f224b8be77258bafc18ccc6 ]
    
    With CONFIG_EXPOLINE_AUTO=y the call of spectre_v2_auto_early() via
    early_initcall is done *after* the early_param functions. This
    overwrites any settings done with the nobp/no_spectre_v2/spectre_v2
    parameters. The code patching for the kernel is done after the
    evaluation of the early parameters but before the early_initcall
    is done. The end result is a kernel image that is patched correctly
    but the kernel modules are not.
    
    Make sure that the nospec auto detection function is called before the
    early parameters are evaluated and before the code patching is done.
    
    Fixes: 6e179d64126b ("s390: add automatic detection of the spectre defense")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6aa300a00e7e6dfdbd4e914e7bbe4864d30a76b5
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:37:00 2018 +0200

    s390: add sysfs attributes for spectre
    
    [ Upstream commit d424986f1d6b16079b3231db0314923f4f8deed1 ]
    
    Set CONFIG_GENERIC_CPU_VULNERABILITIES and provide the two functions
    cpu_show_spectre_v1 and cpu_show_spectre_v2 to report the spectre
    mitigations.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fbb47b1f94ab8b7b0ed0ce3d2e709f45d422432
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:59 2018 +0200

    s390: report spectre mitigation via syslog
    
    [ Upstream commit bc035599718412cfba9249aa713f90ef13f13ee9 ]
    
    Add a boot message if either of the spectre defenses is active.
    The message is
        "Spectre V2 mitigation: execute trampolines."
    or  "Spectre V2 mitigation: limited branch prediction."
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 768da41f91799d8237aa07c8951e434b0b65ccd3
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:58 2018 +0200

    s390: add automatic detection of the spectre defense
    
    [ Upstream commit 6e179d64126b909f0b288fa63cdbf07c531e9b1d ]
    
    Automatically decide between nobp vs. expolines if the spectre_v2=auto
    kernel parameter is specified or CONFIG_EXPOLINE_AUTO=y is set.
    
    The decision made at boot time due to CONFIG_EXPOLINE_AUTO=y being set
    can be overruled with the nobp, nospec and spectre_v2 kernel parameters.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5298e6f9ed6ee427ccd5b53afee67a84ed216dc8
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:57 2018 +0200

    s390: move nobp parameter functions to nospec-branch.c
    
    [ Upstream commit b2e2f43a01bace1a25bdbae04c9f9846882b727a ]
    
    Keep the code for the nobp parameter handling with the code for
    expolines. Both are related to the spectre v2 mitigation.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec440c15314e9770b93bdf0c8f90add8dd04e716
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Fri Apr 27 07:36:56 2018 +0200

    s390/entry.S: fix spurious zeroing of r0
    
    [ Upstream commit d3f468963cd6fd6d2aa5e26aed8b24232096d0e1 ]
    
    when a system call is interrupted we might call the critical section
    cleanup handler that re-does some of the operations. When we are between
    .Lsysc_vtime and .Lsysc_do_svc we might also redo the saving of the
    problem state registers r0-r7:
    
    .Lcleanup_system_call:
    [...]
    0:      # update accounting time stamp
            mvc     __LC_LAST_UPDATE_TIMER(8),__LC_SYNC_ENTER_TIMER
            # set up saved register r11
            lg      %r15,__LC_KERNEL_STACK
            la      %r9,STACK_FRAME_OVERHEAD(%r15)
            stg     %r9,24(%r11)            # r11 pt_regs pointer
            # fill pt_regs
            mvc     __PT_R8(64,%r9),__LC_SAVE_AREA_SYNC
    --->    stmg    %r0,%r7,__PT_R0(%r9)
    
    The problem is now, that we might have already zeroed out r0.
    The fix is to move the zeroing of r0 after sysc_do_svc.
    
    Reported-by: Farhan Ali <alifm@linux.vnet.ibm.com>
    Fixes: 7041d28115e91 ("s390: scrub registers on kernel entry and KVM exit")
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbf89d7832ed4b94b7d689165f90dc38bba350ca
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:55 2018 +0200

    s390: do not bypass BPENTER for interrupt system calls
    
    [ Upstream commit d5feec04fe578c8dbd9e2e1439afc2f0af761ed4 ]
    
    The system call path can be interrupted before the switch back to the
    standard branch prediction with BPENTER has been done. The critical
    section cleanup code skips forward to .Lsysc_do_svc and bypasses the
    BPENTER. In this case the kernel and all subsequent code will run with
    the limited branch prediction.
    
    Fixes: eacf67eb9b32 ("s390: run user space and KVM guests with modified branch prediction")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3303788c0514ef43151b7272c7309740ed88dc8
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Fri Apr 27 07:36:54 2018 +0200

    s390: Replace IS_ENABLED(EXPOLINE_*) with IS_ENABLED(CONFIG_EXPOLINE_*)
    
    [ Upstream commit 2cb370d615e9fbed9e95ed222c2c8f337181aa90 ]
    
    I've accidentally stumbled upon the IS_ENABLED(EXPOLINE_*) lines, which
    obviously always evaluate to false. Fix this.
    
    Fixes: f19fbd5ed642 ("s390: introduce execute-trampolines for branches")
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6e925eca0f971476baf4def542580b37e0df80d
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:53 2018 +0200

    s390: introduce execute-trampolines for branches
    
    [ Upstream commit f19fbd5ed642dc31c809596412dab1ed56f2f156 ]
    
    Add CONFIG_EXPOLINE to enable the use of the new -mindirect-branch= and
    -mfunction_return= compiler options to create a kernel fortified against
    the specte v2 attack.
    
    With CONFIG_EXPOLINE=y all indirect branches will be issued with an
    execute type instruction. For z10 or newer the EXRL instruction will
    be used, for older machines the EX instruction. The typical indirect
    call
    
            basr    %r14,%r1
    
    is replaced with a PC relative call to a new thunk
    
            brasl   %r14,__s390x_indirect_jump_r1
    
    The thunk contains the EXRL/EX instruction to the indirect branch
    
    __s390x_indirect_jump_r1:
            exrl    0,0f
            j       .
    0:      br      %r1
    
    The detour via the execute type instruction has a performance impact.
    To get rid of the detour the new kernel parameter "nospectre_v2" and
    "spectre_v2=[on,off,auto]" can be used. If the parameter is specified
    the kernel and module code will be patched at runtime.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d863392f86b01ae0a578f72062ef8c5a27d651c
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:52 2018 +0200

    s390: run user space and KVM guests with modified branch prediction
    
    [ Upstream commit 6b73044b2b0081ee3dd1cd6eaab7dee552601efb ]
    
    Define TIF_ISOLATE_BP and TIF_ISOLATE_BP_GUEST and add the necessary
    plumbing in entry.S to be able to run user space and KVM guests with
    limited branch prediction.
    
    To switch a user space process to limited branch prediction the
    s390_isolate_bp() function has to be call, and to run a vCPU of a KVM
    guest associated with the current task with limited branch prediction
    call s390_isolate_bp_guest().
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76c45c1be03c60f9d983aed017182760dbd8bbf9
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:51 2018 +0200

    s390: add options to change branch prediction behaviour for the kernel
    
    [ Upstream commit d768bd892fc8f066cd3aa000eb1867bcf32db0ee ]
    
    Add the PPA instruction to the system entry and exit path to switch
    the kernel to a different branch prediction behaviour. The instructions
    are added via CPU alternatives and can be disabled with the "nospec"
    or the "nobp=0" kernel parameter. If the default behaviour selected
    with CONFIG_KERNEL_NOBP is set to "n" then the "nobp=1" parameter can be
    used to enable the changed kernel branch prediction.
    
    Acked-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc650e567c9997293ed6421a058517e270d77e4c
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:50 2018 +0200

    s390/alternative: use a copy of the facility bit mask
    
    [ Upstream commit cf1489984641369611556bf00c48f945c77bcf02 ]
    
    To be able to switch off specific CPU alternatives with kernel parameters
    make a copy of the facility bit mask provided by STFLE and use the copy
    for the decision to apply an alternative.
    
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf6bc919fa35e91dfc2055ad862ee8f68eafb1d9
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:49 2018 +0200

    s390: add optimized array_index_mask_nospec
    
    [ Upstream commit e2dd833389cc4069a96b57bdd24227b5f52288f5 ]
    
    Add an optimized version of the array_index_mask_nospec function for
    s390 based on a compare and a subtract with borrow.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e24d6c4b5e19d6c168d8ca34e1859c83b30189d5
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Apr 27 07:36:48 2018 +0200

    s390: scrub registers on kernel entry and KVM exit
    
    [ Upstream commit 7041d28115e91f2144f811ffe8a195c696b1e1d0 ]
    
    Clear all user space registers on entry to the kernel and all KVM guest
    registers on KVM guest exit if the register does not contain either a
    parameter or a result value.
    
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1482b96a97296bc2a0d738461c52eda957bc881e
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Fri Apr 27 07:36:47 2018 +0200

    KVM: s390: wire up bpb feature
    
    [ Upstream commit 35b3fde6203b932b2b1a5b53b3d8808abc9c4f60 ]
    
    The new firmware interfaces for branch prediction behaviour changes
    are transparently available for the guest. Nevertheless, there is
    new state attached that should be migrated and properly resetted.
    Provide a mechanism for handling reset, migration and VSIE.
    
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    [Changed capability number to 152. - Radim]
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 243f3abcfd64a5cfa774eb32aa0a349693bf6eaa
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Fri Apr 27 07:36:46 2018 +0200

    s390: enable CPU alternatives unconditionally
    
    [ Upstream commit 049a2c2d486e8cc82c5cd79fa479c5b105b109e9 ]
    
    Remove the CPU_ALTERNATIVES config option and enable the code
    unconditionally. The config option was only added to avoid a conflict
    with the named saved segment support. Since that code is gone there is
    no reason to keep the CPU_ALTERNATIVES config option.
    
    Just enable it unconditionally to also reduce the number of config
    options and make it less likely that something breaks.
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4eaf8dace704fb5392b330a01dbf579d3190b0b3
Author: Vasily Gorbik <gor@linux.vnet.ibm.com>
Date:   Fri Apr 27 07:36:45 2018 +0200

    s390: introduce CPU alternatives
    
    [ Upstream commit 686140a1a9c41d85a4212a1c26d671139b76404b ]
    
    Implement CPU alternatives, which allows to optionally patch newer
    instructions at runtime, based on CPU facilities availability.
    
    A new kernel boot parameter "noaltinstr" disables patching.
    
    Current implementation is derived from x86 alternatives. Although
    ideal instructions padding (when altinstr is longer then oldinstr)
    is added at compile time, and no oldinstr nops optimization has to be
    done at runtime. Also couple of compile time sanity checks are done:
    1. oldinstr and altinstr must be <= 254 bytes long,
    2. oldinstr and altinstr must not have an odd length.
    
    alternative(oldinstr, altinstr, facility);
    alternative_2(oldinstr, altinstr1, facility1, altinstr2, facility2);
    
    Both compile time and runtime padding consists of either 6/4/2 bytes nop
    or a jump (brcl) + 2 bytes nop filler if padding is longer then 6 bytes.
    
    .altinstructions and .altinstr_replacement sections are part of
    __init_begin : __init_end region and are freed after initialization.
    
    Signed-off-by: Vasily Gorbik <gor@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cd93573813bb6f00093ae826a457fbbddf393b8
Author: Karthikeyan Periyasamy <periyasa@codeaurora.org>
Date:   Tue Mar 27 11:25:29 2018 +0300

    Revert "ath10k: send (re)assoc peer command when NSS changed"
    
    commit 55cc11da69895a680940c1733caabc37be685f5e upstream.
    
    This reverts commit 55884c045d31a29cf69db8332d1064a1b61dd159.
    
    When Ath10k is in AP mode and an unassociated STA sends a VHT action frame
    (Operating Mode Notification for the NSS change) periodically to AP this causes
    ath10k to call ath10k_station_assoc() which sends WMI_PEER_ASSOC_CMDID during
    NSS update. Over the time (with a certain client it can happen within 15 mins
    when there are over 500 of these VHT action frames) continuous calls of
    WMI_PEER_ASSOC_CMDID cause firmware to assert due to resource exhaust.
    
    To my knowledge setting WMI_PEER_NSS peer param itself enough to handle NSS
    updates and no need to call ath10k_station_assoc(). So revert the original
    commit from 2014 as it's unclear why the change was really needed.
    Now the firmware assert doesn't happen anymore.
    
    Issue observed in QCA9984 platform with firmware version:10.4-3.5.3-00053.
    This Change tested in QCA9984 with firmware version: 10.4-3.5.3-00053 and
    QCA988x platform with firmware version: 10.2.4-1.0-00036.
    
    Firmware Assert log:
    
    ath10k_pci 0002:01:00.0: firmware crashed! (guid e61f1274-9acd-4c5b-bcca-e032ea6e723c)
    ath10k_pci 0002:01:00.0: qca9984/qca9994 hw1.0 target 0x01000000 chip_id 0x00000000 sub 168c:cafe
    ath10k_pci 0002:01:00.0: kconfig debug 1 debugfs 1 tracing 0 dfs 1 testmode 1
    ath10k_pci 0002:01:00.0: firmware ver 10.4-3.5.3-00053 api 5 features no-p2p,mfp,peer-flow-ctrl,btcoex-param,allows-mesh-bcast crc32 4c56a386
    ath10k_pci 0002:01:00.0: board_file api 2 bmi_id 0:4 crc32 c2271344
    ath10k_pci 0002:01:00.0: htt-ver 2.2 wmi-op 6 htt-op 4 cal otp max-sta 512 raw 0 hwcrypto 1
    ath10k_pci 0002:01:00.0: firmware register dump:
    ath10k_pci 0002:01:00.0: [00]: 0x0000000A 0x000015B3 0x00981E5F 0x00975B31
    ath10k_pci 0002:01:00.0: [04]: 0x00981E5F 0x00060530 0x00000011 0x00446C60
    ath10k_pci 0002:01:00.0: [08]: 0x0042F1FC 0x00458080 0x00000017 0x00000000
    ath10k_pci 0002:01:00.0: [12]: 0x00000009 0x00000000 0x00973ABC 0x00973AD2
    ath10k_pci 0002:01:00.0: [16]: 0x00973AB0 0x00960E62 0x009606CA 0x00000000
    ath10k_pci 0002:01:00.0: [20]: 0x40981E5F 0x004066DC 0x00400000 0x00981E34
    ath10k_pci 0002:01:00.0: [24]: 0x80983B48 0x0040673C 0x000000C0 0xC0981E5F
    ath10k_pci 0002:01:00.0: [28]: 0x80993DEB 0x0040676C 0x00431AB8 0x0045D0C4
    ath10k_pci 0002:01:00.0: [32]: 0x80993E5C 0x004067AC 0x004303C0 0x0045D0C4
    ath10k_pci 0002:01:00.0: [36]: 0x80994AAB 0x004067DC 0x00000000 0x0045D0C4
    ath10k_pci 0002:01:00.0: [40]: 0x809971A0 0x0040681C 0x004303C0 0x00441B00
    ath10k_pci 0002:01:00.0: [44]: 0x80991904 0x0040688C 0x004303C0 0x0045D0C4
    ath10k_pci 0002:01:00.0: [48]: 0x80963AD3 0x00406A7C 0x004303C0 0x009918FC
    ath10k_pci 0002:01:00.0: [52]: 0x80960E80 0x00406A9C 0x0000001F 0x00400000
    ath10k_pci 0002:01:00.0: [56]: 0x80960E51 0x00406ACC 0x00400000 0x00000000
    ath10k_pci 0002:01:00.0: Copy Engine register dump:
    ath10k_pci 0002:01:00.0: index: addr: sr_wr_idx: sr_r_idx: dst_wr_idx: dst_r_idx:
    ath10k_pci 0002:01:00.0: [00]: 0x0004a000 15 15 3 3
    ath10k_pci 0002:01:00.0: [01]: 0x0004a400 17 17 212 213
    ath10k_pci 0002:01:00.0: [02]: 0x0004a800 21 21 20 21
    ath10k_pci 0002:01:00.0: [03]: 0x0004ac00 25 25 27 25
    ath10k_pci 0002:01:00.0: [04]: 0x0004b000 515 515 144 104
    ath10k_pci 0002:01:00.0: [05]: 0x0004b400 28 28 155 156
    ath10k_pci 0002:01:00.0: [06]: 0x0004b800 12 12 12 12
    ath10k_pci 0002:01:00.0: [07]: 0x0004bc00 1 1 1 1
    ath10k_pci 0002:01:00.0: [08]: 0x0004c000 0 0 127 0
    ath10k_pci 0002:01:00.0: [09]: 0x0004c400 1 1 1 1
    ath10k_pci 0002:01:00.0: [10]: 0x0004c800 0 0 0 0
    ath10k_pci 0002:01:00.0: [11]: 0x0004cc00 0 0 0 0
    ath10k_pci 0002:01:00.0: CE[1] write_index 212 sw_index 213 hw_index 0 nentries_mask 0x000001ff
    ath10k_pci 0002:01:00.0: CE[2] write_index 20 sw_index 21 hw_index 0 nentries_mask 0x0000007f
    ath10k_pci 0002:01:00.0: CE[5] write_index 155 sw_index 156 hw_index 0 nentries_mask 0x000001ff
    ath10k_pci 0002:01:00.0: DMA addr: nbytes: meta data: byte swap: gather:
    ath10k_pci 0002:01:00.0: [455]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [456]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [457]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [458]: 0x594a0038 0 0 0 1
    ath10k_pci 0002:01:00.0: [459]: 0x580c0a42 0 0 0 0
    ath10k_pci 0002:01:00.0: [460]: 0x594a0060 0 0 0 1
    ath10k_pci 0002:01:00.0: [461]: 0x580c0c42 0 0 0 0
    ath10k_pci 0002:01:00.0: [462]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [463]: 0x580c0c42 0 0 0 0
    ath10k_pci 0002:01:00.0: [464]: 0x594a0038 0 0 0 1
    ath10k_pci 0002:01:00.0: [465]: 0x580c0a42 0 0 0 0
    ath10k_pci 0002:01:00.0: [466]: 0x594a0060 0 0 0 1
    ath10k_pci 0002:01:00.0: [467]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [468]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [469]: 0x580c1c42 0 0 0 0
    ath10k_pci 0002:01:00.0: [470]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [471]: 0x580c1c42 0 0 0 0
    ath10k_pci 0002:01:00.0: [472]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [473]: 0x580c1c42 0 0 0 0
    ath10k_pci 0002:01:00.0: [474]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [475]: 0x580c0642 0 0 0 0
    ath10k_pci 0002:01:00.0: [476]: 0x594a0038 0 0 0 1
    ath10k_pci 0002:01:00.0: [477]: 0x580c0842 0 0 0 0
    ath10k_pci 0002:01:00.0: [478]: 0x594a0060 0 0 0 1
    ath10k_pci 0002:01:00.0: [479]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [480]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [481]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [482]: 0x594a0038 0 0 0 1
    ath10k_pci 0002:01:00.0: [483]: 0x580c0842 0 0 0 0
    ath10k_pci 0002:01:00.0: [484]: 0x594a0060 0 0 0 1
    ath10k_pci 0002:01:00.0: [485]: 0x580c0642 0 0 0 0
    ath10k_pci 0002:01:00.0: [486]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [487]: 0x580c0642 0 0 0 0
    ath10k_pci 0002:01:00.0: [488]: 0x594a0038 0 0 0 1
    ath10k_pci 0002:01:00.0: [489]: 0x580c0842 0 0 0 0
    ath10k_pci 0002:01:00.0: [490]: 0x594a0060 0 0 0 1
    ath10k_pci 0002:01:00.0: [491]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [492]: 0x58174040 0 1 0 0
    ath10k_pci 0002:01:00.0: [493]: 0x5a946040 0 1 0 0
    ath10k_pci 0002:01:00.0: [494]: 0x59909040 0 1 0 0
    ath10k_pci 0002:01:00.0: [495]: 0x5ae5a040 0 1 0 0
    ath10k_pci 0002:01:00.0: [496]: 0x58096040 0 1 0 0
    ath10k_pci 0002:01:00.0: [497]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [498]: 0x580c0642 0 0 0 0
    ath10k_pci 0002:01:00.0: [499]: 0x5c1e0040 0 1 0 0
    ath10k_pci 0002:01:00.0: [500]: 0x58153040 0 1 0 0
    ath10k_pci 0002:01:00.0: [501]: 0x58129040 0 1 0 0
    ath10k_pci 0002:01:00.0: [502]: 0x5952f040 0 1 0 0
    ath10k_pci 0002:01:00.0: [503]: 0x59535040 0 1 0 0
    ath10k_pci 0002:01:00.0: [504]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [505]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [506]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [507]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [508]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [509]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [510]: 0x594a0010 0 0 0 1
    ath10k_pci 0002:01:00.0: [511]: 0x580c0042 0 0 0 0
    ath10k_pci 0002:01:00.0: [512]: 0x5adcc040 0 1 0 0
    ath10k_pci 0002:01:00.0: [513]: 0x5cf3d040 0 1 0 0
    ath10k_pci 0002:01:00.0: [514]: 0x5c1e9040 64 1 0 0
    ath10k_pci 0002:01:00.0: [515]: 0x00000000 0 0 0 0
    
    Signed-off-by: Karthikeyan Periyasamy <periyasa@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Cc: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87dfe99e129679c23bebda36b83cb223285afc2a
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Wed Feb 1 20:49:35 2017 -0500

    jbd2: fix use after free in kjournald2()
    
    commit dbfcef6b0f4012c57bc0b6e0e660d5ed12a5eaed upstream.
    
    Below is the synchronization issue between unmount and kjournald2
    contexts, which results into use after free issue in kjournald2().
    Fix this issue by using journal->j_state_lock to synchronize the
    wait_event() done in journal_kill_thread() and the wake_up() done
    in kjournald2().
    
    TASK 1:
    umount cmd:
       |--jbd2_journal_destroy() {
           |--journal_kill_thread() {
                write_lock(&journal->j_state_lock);
                journal->j_flags |= JBD2_UNMOUNT;
                ...
                write_unlock(&journal->j_state_lock);
                wake_up(&journal->j_wait_commit);      TASK 2 wakes up here:
                                                       kjournald2() {
                                                         ...
                                                         checks JBD2_UNMOUNT flag and calls goto end-loop;
                                                         ...
                                                         end_loop:
                                                           write_unlock(&journal->j_state_lock);
                                                           journal->j_task = NULL; --> If this thread gets
                                                           pre-empted here, then TASK 1 wait_event will
                                                           exit even before this thread is completely
                                                           done.
                wait_event(journal->j_wait_done_commit, journal->j_task == NULL);
                ...
                write_lock(&journal->j_state_lock);
                write_unlock(&journal->j_state_lock);
              }
           |--kfree(journal);
         }
    }
                                                           wake_up(&journal->j_wait_done_commit); --> this step
                                                           now results into use after free issue.
                                                       }
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9441c6de4d4af57c8f160b9f7f688bf0983ddd7f
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Feb 2 10:14:51 2017 +0100

    ath9k_hw: check if the chip failed to wake up
    
    commit a34d0a0da1abae46a5f6ebd06fb0ec484ca099d9 upstream.
    
    In an RFC patch, Sven Eckelmann and Simon Wunderlich reported:
    
    "QCA 802.11n chips (especially AR9330/AR9340) sometimes end up in a
    state in which a read of AR_CFG always returns 0xdeadbeef.
    This should not happen when when the power_mode of the device is
    ATH9K_PM_AWAKE."
    
    Include the check for the default register state in the existing MAC
    hang check.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
    Cc: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 666f5e34967960f3848a0b46926f1fc4da0a833a
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Sat Dec 10 22:56:21 2016 -0800

    Input: drv260x - fix initializing overdrive voltage
    
    commit 74c82dae6c474933f2be401976e1530b5f623221 upstream.
    
    We were accidentally initializing haptics->rated_voltage twice, and did not
    initialize overdrive voltage.
    
    Acked-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Cc: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79658ce8e820d037808a221f013e67aebcfa53e0
Author: Grant Grundler <grundler@chromium.org>
Date:   Thu Sep 28 11:35:00 2017 -0700

    r8152: add Linksys USB3GIGV1 id
    
    commit 90841047a01b452cc8c3f9b990698b264143334a upstream.
    
    This linksys dongle by default comes up in cdc_ether mode.
    This patch allows r8152 to claim the device:
       Bus 002 Device 002: ID 13b1:0041 Linksys
    
    Signed-off-by: Grant Grundler <grundler@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [krzk: Rebase on v4.4]
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1df9302a2f43b29312d0f6ccbde52f7211eca97
Author: Chen Feng <puck.chen@hisilicon.com>
Date:   Fri Jan 15 10:38:19 2016 +0800

    staging: ion : Donnot wakeup kswapd in ion system alloc
    
    commit 2ef230531ee171a475fc3ddad5516dd7e09a8a77 upstream.
    
    Since ion alloc can be called by userspace,eg gralloc.
    When it is called frequently, the efficiency of kswapd is
    to low. And the reclaimed memory is too lower. In this way,
    the kswapd can use to much cpu resources.
    
    With 3.5GB DMA Zone and 0.5 Normal Zone.
    
    pgsteal_kswapd_dma 9364140
    pgsteal_kswapd_normal 7071043
    pgscan_kswapd_dma 10428250
    pgscan_kswapd_normal 37840094
    
    With this change the reclaim ratio has greatly improved
    18.9% -> 72.5%
    
    Signed-off-by: Chen Feng <puck.chen@hisilicon.com>
    Signed-off-by: Lu bing <albert.lubing@hisilicon.com>
    Reviewed-by: Laura Abbott <labbott@redhat.com>
    Cc: Greg Hackmann <ghackmann@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 585af47e21ba3c2ac1f7a20fff17744b51af884f
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Sun Apr 15 11:23:50 2018 +0200

    perf: Return proper values for user stack errors
    
    commit 78b562fbfa2cf0a9fcb23c3154756b690f4905c1 upstream.
    
    Return immediately when we find issue in the user stack checks. The
    error value could get overwritten by following check for
    PERF_SAMPLE_REGS_INTR.
    
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: syzkaller-bugs@googlegroups.com
    Cc: x86@kernel.org
    Fixes: 60e2364e60e8 ("perf: Add ability to sample machine state on interrupt")
    Link: http://lkml.kernel.org/r/20180415092352.12403-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 624786b91e56fa9346935af25f97cd193a738a3c
Author: Xiaoming Gao <gxm.linux.kernel@gmail.com>
Date:   Fri Apr 13 17:48:08 2018 +0800

    x86/tsc: Prevent 32bit truncation in calc_hpet_ref()
    
    commit d3878e164dcd3925a237a20e879432400e369172 upstream.
    
    The TSC calibration code uses HPET as reference. The conversion normalizes
    the delta of two HPET timestamps:
    
        hpetref = ((tshpet1 - tshpet2) * HPET_PERIOD) / 1e6
    
    and then divides the normalized delta of the corresponding TSC timestamps
    by the result to calulate the TSC frequency.
    
        tscfreq = ((tstsc1 - tstsc2 ) * 1e6) / hpetref
    
    This uses do_div() which takes an u32 as the divisor, which worked so far
    because the HPET frequency was low enough that 'hpetref' never exceeded
    32bit.
    
    On Skylake machines the HPET frequency increased so 'hpetref' can exceed
    32bit. do_div() truncates the divisor, which causes the calibration to
    fail.
    
    Use div64_u64() to avoid the problem.
    
    [ tglx: Fixes whitespace mangled patch and rewrote changelog ]
    
    Signed-off-by: Xiaoming Gao <newtongao@tencent.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Cc: peterz@infradead.org
    Cc: hpa@zytor.com
    Link: https://lkml.kernel.org/r/38894564-4fc9-b8ec-353f-de702839e44e@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f3a3e86bede7d16c5e4250870402707be40a3fd
Author: Steve French <smfrench@gmail.com>
Date:   Fri Apr 20 12:19:07 2018 -0500

    cifs: do not allow creating sockets except with SMB1 posix exensions
    
    commit 1d0cffa674cfa7d185a302c8c6850fc50b893bed upstream.
    
    RHBZ: 1453123
    
    Since at least the 3.10 kernel and likely a lot earlier we have
    not been able to create unix domain sockets in a cifs share
    when mounted using the SFU mount option (except when mounted
    with the cifs unix extensions to Samba e.g.)
    Trying to create a socket, for example using the af_unix command from
    xfstests will cause :
    BUG: unable to handle kernel NULL pointer dereference at 00000000
    00000040
    
    Since no one uses or depends on being able to create unix domains sockets
    on a cifs share the easiest fix to stop this vulnerability is to simply
    not allow creation of any other special files than char or block devices
    when sfu is used.
    
    Added update to Ronnie's patch to handle a tcon link leak, and
    to address a buf leak noticed by Gustavo and Colin.
    
    Acked-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    CC:  Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reported-by: Eryu Guan <eguan@redhat.com>
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <smfrench@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
