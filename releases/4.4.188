commit d63f4f2588b2a87ac763de9a427816301c5b1caf
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Aug 6 18:28:29 2019 +0200

    Linux 4.4.188

commit 430c54323a3fb5286e356a5ec39c740a43fda3b5
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Jun 14 07:46:02 2019 +0200

    xen/swiotlb: fix condition for calling xen_destroy_contiguous_region()
    
    commit 50f6393f9654c561df4cdcf8e6cfba7260143601 upstream.
    
    The condition in xen_swiotlb_free_coherent() for deciding whether to
    call xen_destroy_contiguous_region() is wrong: in case the region to
    be freed is not contiguous calling xen_destroy_contiguous_region() is
    the wrong thing to do: it would result in inconsistent mappings of
    multiple PFNs to the same MFN. This will lead to various strange
    crashes or data corruption.
    
    Instead of calling xen_destroy_contiguous_region() in that case a
    warning should be issued as that situation should never occur.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Acked-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1a785b02384c04c34f535c528bb25fa6bfa9f9e
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Thu Aug 1 13:06:30 2019 +0200

    s390/dasd: fix endless loop after read unit address configuration
    
    commit 41995342b40c418a47603e1321256d2c4a2ed0fb upstream.
    
    After getting a storage server event that causes the DASD device driver
    to update its unit address configuration during a device shutdown there is
    the possibility of an endless loop in the device driver.
    
    In the system log there will be ongoing DASD error messages with RC: -19.
    
    The reason is that the loop starting the ruac request only terminates when
    the retry counter is decreased to 0. But in the sleep_on function there are
    early exit paths that do not decrease the retry counter.
    
    Prevent an endless loop by handling those cases separately.
    
    Remove the unnecessary do..while loop since the sleep_on function takes
    care of retries by itself.
    
    Fixes: 8e09f21574ea ("[S390] dasd: add hyper PAV support to DASD device driver, part 1")
    Cc: stable@vger.kernel.org # 2.6.25+
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b65cc16ce2a77793aab81b6fc29f6caf4ee3728a
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Thu Jul 25 12:52:43 2019 +0200

    selinux: fix memory leak in policydb_init()
    
    commit 45385237f65aeee73641f1ef737d7273905a233f upstream.
    
    Since roles_init() adds some entries to the role hash table, we need to
    destroy also its keys/values on error, otherwise we get a memory leak in
    the error path.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: syzbot+fee3a14d4cdf92646287@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1579cc8253b72f17fe56960c0f4a020c149870bd
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Jul 17 20:36:39 2019 -0500

    x86/kvm: Don't call kvm_spurious_fault() from .fixup
    
    [ Upstream commit 3901336ed9887b075531bffaeef7742ba614058b ]
    
    After making a change to improve objtool's sibling call detection, it
    started showing the following warning:
    
      arch/x86/kvm/vmx/nested.o: warning: objtool: .fixup+0x15: sibling call from callable instruction with modified stack frame
    
    The problem is the ____kvm_handle_fault_on_reboot() macro.  It does a
    fake call by pushing a fake RIP and doing a jump.  That tricks the
    unwinder into printing the function which triggered the exception,
    rather than the .fixup code.
    
    Instead of the hack to make it look like the original function made the
    call, just change the macro so that the original function actually does
    make the call.  This allows removal of the hack, and also makes objtool
    happy.
    
    I triggered a vmx instruction exception and verified that the stack
    trace is still sane:
    
      kernel BUG at arch/x86/kvm/x86.c:358!
      invalid opcode: 0000 [#1] SMP PTI
      CPU: 28 PID: 4096 Comm: qemu-kvm Not tainted 5.2.0+ #16
      Hardware name: Lenovo THINKSYSTEM SD530 -[7X2106Z000]-/-[7X2106Z000]-, BIOS -[TEE113Z-1.00]- 07/17/2017
      RIP: 0010:kvm_spurious_fault+0x5/0x10
      Code: 00 00 00 00 00 8b 44 24 10 89 d2 45 89 c9 48 89 44 24 10 8b 44 24 08 48 89 44 24 08 e9 d4 40 22 00 0f 1f 40 00 0f 1f 44 00 00 <0f> 0b 66 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 41 55 49 89 fd 41
      RSP: 0018:ffffbf91c683bd00 EFLAGS: 00010246
      RAX: 000061f040000000 RBX: ffff9e159c77bba0 RCX: ffff9e15a5c87000
      RDX: 0000000665c87000 RSI: ffff9e15a5c87000 RDI: ffff9e159c77bba0
      RBP: 0000000000000000 R08: 0000000000000000 R09: ffff9e15a5c87000
      R10: 0000000000000000 R11: fffff8f2d99721c0 R12: ffff9e159c77bba0
      R13: ffffbf91c671d960 R14: ffff9e159c778000 R15: 0000000000000000
      FS:  00007fa341cbe700(0000) GS:ffff9e15b7400000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007fdd38356804 CR3: 00000006759de003 CR4: 00000000007606e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      PKRU: 55555554
      Call Trace:
       loaded_vmcs_init+0x4f/0xe0
       alloc_loaded_vmcs+0x38/0xd0
       vmx_create_vcpu+0xf7/0x600
       kvm_vm_ioctl+0x5e9/0x980
       ? __switch_to_asm+0x40/0x70
       ? __switch_to_asm+0x34/0x70
       ? __switch_to_asm+0x40/0x70
       ? __switch_to_asm+0x34/0x70
       ? free_one_page+0x13f/0x4e0
       do_vfs_ioctl+0xa4/0x630
       ksys_ioctl+0x60/0x90
       __x64_sys_ioctl+0x16/0x20
       do_syscall_64+0x55/0x1c0
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7fa349b1ee5b
    
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/64a9b64d127e87b6920a97afde8e96ea76f6524e.1563413318.git.jpoimboe@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 793cbeb94830a660c9f7e29855b24d13d2122368
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Jul 16 16:30:21 2019 -0700

    ipc/mqueue.c: only perform resource calculation if user valid
    
    [ Upstream commit a318f12ed8843cfac53198390c74a565c632f417 ]
    
    Andreas Christoforou reported:
    
      UBSAN: Undefined behaviour in ipc/mqueue.c:414:49 signed integer overflow:
      9 * 2305843009213693951 cannot be represented in type 'long int'
      ...
      Call Trace:
        mqueue_evict_inode+0x8e7/0xa10 ipc/mqueue.c:414
        evict+0x472/0x8c0 fs/inode.c:558
        iput_final fs/inode.c:1547 [inline]
        iput+0x51d/0x8c0 fs/inode.c:1573
        mqueue_get_inode+0x8eb/0x1070 ipc/mqueue.c:320
        mqueue_create_attr+0x198/0x440 ipc/mqueue.c:459
        vfs_mkobj+0x39e/0x580 fs/namei.c:2892
        prepare_open ipc/mqueue.c:731 [inline]
        do_mq_open+0x6da/0x8e0 ipc/mqueue.c:771
    
    Which could be triggered by:
    
            struct mq_attr attr = {
                    .mq_flags = 0,
                    .mq_maxmsg = 9,
                    .mq_msgsize = 0x1fffffffffffffff,
                    .mq_curmsgs = 0,
            };
    
            if (mq_open("/testing", 0x40, 3, &attr) == (mqd_t) -1)
                    perror("mq_open");
    
    mqueue_get_inode() was correctly rejecting the giant mq_msgsize, and
    preparing to return -EINVAL.  During the cleanup, it calls
    mqueue_evict_inode() which performed resource usage tracking math for
    updating "user", before checking if there was a valid "user" at all
    (which would indicate that the calculations would be sane).  Instead,
    delay this check to after seeing a valid "user".
    
    The overflow was real, but the results went unused, so while the flaw is
    harmless, it's noisy for kernel fuzzers, so just fix it by moving the
    calculation under the non-NULL "user" where it actually gets used.
    
    Link: http://lkml.kernel.org/r/201906072207.ECB65450@keescook
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reported-by: Andreas Christoforou <andreaschristofo@gmail.com>
    Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df8a9e5c9a26d6ecc3f790f8cd4d4fa719a37055
Author: Mikko Rapeli <mikko.rapeli@iki.fi>
Date:   Tue Jul 16 16:28:10 2019 -0700

    uapi linux/coda_psdev.h: move upc_req definition from uapi to kernel side headers
    
    [ Upstream commit f90fb3c7e2c13ae829db2274b88b845a75038b8a ]
    
    Only users of upc_req in kernel side fs/coda/psdev.c and
    fs/coda/upcall.c already include linux/coda_psdev.h.
    
    Suggested by Jan Harkes <jaharkes@cs.cmu.edu> in
      https://lore.kernel.org/lkml/20150531111913.GA23377@cs.cmu.edu/
    
    Fixes these include/uapi/linux/coda_psdev.h compilation errors in userspace:
    
      linux/coda_psdev.h:12:19: error: field `uc_chain' has incomplete type
      struct list_head    uc_chain;
                       ^
      linux/coda_psdev.h:13:2: error: unknown type name `caddr_t'
      caddr_t             uc_data;
      ^
      linux/coda_psdev.h:14:2: error: unknown type name `u_short'
      u_short             uc_flags;
      ^
      linux/coda_psdev.h:15:2: error: unknown type name `u_short'
      u_short             uc_inSize;  /* Size is at most 5000 bytes */
      ^
      linux/coda_psdev.h:16:2: error: unknown type name `u_short'
      u_short             uc_outSize;
      ^
      linux/coda_psdev.h:17:2: error: unknown type name `u_short'
      u_short             uc_opcode;  /* copied from data to save lookup */
      ^
      linux/coda_psdev.h:19:2: error: unknown type name `wait_queue_head_t'
      wait_queue_head_t   uc_sleep;   /* process' wait queue */
      ^
    
    Link: http://lkml.kernel.org/r/9f99f5ce6a0563d5266e6cf7aa9585aac2cae971.1558117389.git.jaharkes@cs.cmu.edu
    Signed-off-by: Mikko Rapeli <mikko.rapeli@iki.fi>
    Signed-off-by: Jan Harkes <jaharkes@cs.cmu.edu>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Colin Ian King <colin.king@canonical.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Fabian Frederick <fabf@skynet.be>
    Cc: Sam Protsenko <semen.protsenko@linaro.org>
    Cc: Yann Droneaud <ydroneaud@opteya.com>
    Cc: Zhouyang Jia <jiazhouyang09@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6465186ac8435e4d0c2b5a9904c4b6176bedf2ae
Author: Sam Protsenko <semen.protsenko@linaro.org>
Date:   Tue Jul 16 16:28:20 2019 -0700

    coda: fix build using bare-metal toolchain
    
    [ Upstream commit b2a57e334086602be56b74958d9f29b955cd157f ]
    
    The kernel is self-contained project and can be built with bare-metal
    toolchain.  But bare-metal toolchain doesn't define __linux__.  Because
    of this u_quad_t type is not defined when using bare-metal toolchain and
    codafs build fails.  This patch fixes it by defining u_quad_t type
    unconditionally.
    
    Link: http://lkml.kernel.org/r/3cbb40b0a57b6f9923a9d67b53473c0b691a3eaa.1558117389.git.jaharkes@cs.cmu.edu
    Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
    Signed-off-by: Jan Harkes <jaharkes@cs.cmu.edu>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Colin Ian King <colin.king@canonical.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Fabian Frederick <fabf@skynet.be>
    Cc: Mikko Rapeli <mikko.rapeli@iki.fi>
    Cc: Yann Droneaud <ydroneaud@opteya.com>
    Cc: Zhouyang Jia <jiazhouyang09@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f000a5711e911ef003bba6c2e686de9ca227708f
Author: Zhouyang Jia <jiazhouyang09@gmail.com>
Date:   Tue Jul 16 16:28:13 2019 -0700

    coda: add error handling for fget
    
    [ Upstream commit 02551c23bcd85f0c68a8259c7b953d49d44f86af ]
    
    When fget fails, the lack of error-handling code may cause unexpected
    results.
    
    This patch adds error-handling code after calling fget.
    
    Link: http://lkml.kernel.org/r/2514ec03df9c33b86e56748513267a80dd8004d9.1558117389.git.jaharkes@cs.cmu.edu
    Signed-off-by: Zhouyang Jia <jiazhouyang09@gmail.com>
    Signed-off-by: Jan Harkes <jaharkes@cs.cmu.edu>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Colin Ian King <colin.king@canonical.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Fabian Frederick <fabf@skynet.be>
    Cc: Mikko Rapeli <mikko.rapeli@iki.fi>
    Cc: Sam Protsenko <semen.protsenko@linaro.org>
    Cc: Yann Droneaud <ydroneaud@opteya.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e48d7596650cc796a7b562c8675c0ea794d5456
Author: Doug Berger <opendmb@gmail.com>
Date:   Tue Jul 16 16:26:24 2019 -0700

    mm/cma.c: fail if fixed declaration can't be honored
    
    [ Upstream commit c633324e311243586675e732249339685e5d6faa ]
    
    The description of cma_declare_contiguous() indicates that if the
    'fixed' argument is true the reserved contiguous area must be exactly at
    the address of the 'base' argument.
    
    However, the function currently allows the 'base', 'size', and 'limit'
    arguments to be silently adjusted to meet alignment constraints.  This
    commit enforces the documented behavior through explicit checks that
    return an error if the region does not fit within a specified region.
    
    Link: http://lkml.kernel.org/r/1561422051-16142-1-git-send-email-opendmb@gmail.com
    Fixes: 5ea3b1b2f8ad ("cma: add placement specifier for "cma=" kernel parameter")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Cc: Yue Hu <huyue2@yulong.com>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Peng Fan <peng.fan@nxp.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d804b0f2df3c231656e784ae70b9043c33c6c04
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jul 12 11:08:05 2019 +0200

    x86: math-emu: Hide clang warnings for 16-bit overflow
    
    [ Upstream commit 29e7e9664aec17b94a9c8c5a75f8d216a206aa3a ]
    
    clang warns about a few parts of the math-emu implementation
    where a 16-bit integer becomes negative during assignment:
    
    arch/x86/math-emu/poly_tan.c:88:35: error: implicit conversion from 'int' to 'short' changes value from 49216 to -16320 [-Werror,-Wconstant-conversion]
                                          (0x41 + EXTENDED_Ebias) | SIGN_Negative);
                                          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
    arch/x86/math-emu/fpu_emu.h:180:58: note: expanded from macro 'setexponent16'
     #define setexponent16(x,y)  { (*(short *)&((x)->exp)) = (y); }
                                                          ~  ^
    arch/x86/math-emu/reg_constant.c:37:32: error: implicit conversion from 'int' to 'short' changes value from 49085 to -16451 [-Werror,-Wconstant-conversion]
    FPU_REG const CONST_PI2extra = MAKE_REG(NEG, -66,
                                   ^~~~~~~~~~~~~~~~~~
    arch/x86/math-emu/reg_constant.c:21:25: note: expanded from macro 'MAKE_REG'
                    ((EXTENDED_Ebias+(e)) | ((SIGN_##s != 0)*0x8000)) }
                     ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
    arch/x86/math-emu/reg_constant.c:48:28: error: implicit conversion from 'int' to 'short' changes value from 65535 to -1 [-Werror,-Wconstant-conversion]
    FPU_REG const CONST_QNaN = MAKE_REG(NEG, EXP_OVER, 0x00000000, 0xC0000000);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    arch/x86/math-emu/reg_constant.c:21:25: note: expanded from macro 'MAKE_REG'
                    ((EXTENDED_Ebias+(e)) | ((SIGN_##s != 0)*0x8000)) }
                     ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
    
    The code is correct as is, so add a typecast to shut up the warnings.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20190712090816.350668-1-arnd@arndb.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 178173632fd13af2e04f54a44142c5685ca309a2
Author: Qian Cai <cai@lca.pw>
Date:   Mon Jul 8 17:36:45 2019 -0400

    x86/apic: Silence -Wtype-limits compiler warnings
    
    [ Upstream commit ec6335586953b0df32f83ef696002063090c7aef ]
    
    There are many compiler warnings like this,
    
    In file included from ./arch/x86/include/asm/smp.h:13,
                     from ./arch/x86/include/asm/mmzone_64.h:11,
                     from ./arch/x86/include/asm/mmzone.h:5,
                     from ./include/linux/mmzone.h:969,
                     from ./include/linux/gfp.h:6,
                     from ./include/linux/mm.h:10,
                     from arch/x86/kernel/apic/io_apic.c:34:
    arch/x86/kernel/apic/io_apic.c: In function 'check_timer':
    ./arch/x86/include/asm/apic.h:37:11: warning: comparison of unsigned
    expression >= 0 is always true [-Wtype-limits]
       if ((v) <= apic_verbosity) \
               ^~
    arch/x86/kernel/apic/io_apic.c:2160:2: note: in expansion of macro
    'apic_printk'
      apic_printk(APIC_QUIET, KERN_INFO "..TIMER: vector=0x%02X "
      ^~~~~~~~~~~
    ./arch/x86/include/asm/apic.h:37:11: warning: comparison of unsigned
    expression >= 0 is always true [-Wtype-limits]
       if ((v) <= apic_verbosity) \
               ^~
    arch/x86/kernel/apic/io_apic.c:2207:4: note: in expansion of macro
    'apic_printk'
        apic_printk(APIC_QUIET, KERN_ERR "..MP-BIOS bug: "
        ^~~~~~~~~~~
    
    APIC_QUIET is 0, so silence them by making apic_verbosity type int.
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/1562621805-24789-1-git-send-email-cai@lca.pw
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85ba09a0da3e5abe711ad57143c632f0e2d1c5c7
Author: Benjamin Poirier <bpoirier@suse.com>
Date:   Tue Jul 16 17:16:55 2019 +0900

    be2net: Signal that the device cannot transmit during reconfiguration
    
    [ Upstream commit 7429c6c0d9cb086d8e79f0d2a48ae14851d2115e ]
    
    While changing the number of interrupt channels, be2net stops adapter
    operation (including netif_tx_disable()) but it doesn't signal that it
    cannot transmit. This may lead dev_watchdog() to falsely trigger during
    that time.
    
    Add the missing call to netif_carrier_off(), following the pattern used in
    many other drivers. netif_carrier_on() is already taken care of in
    be_open().
    
    Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a8b327b7e7b7d3817f20dccac82ad258fbefb8b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jul 12 11:01:21 2019 +0200

    ACPI: fix false-positive -Wuninitialized warning
    
    [ Upstream commit dfd6f9ad36368b8dbd5f5a2b2f0a4705ae69a323 ]
    
    clang gets confused by an uninitialized variable in what looks
    to it like a never executed code path:
    
    arch/x86/kernel/acpi/boot.c:618:13: error: variable 'polarity' is uninitialized when used here [-Werror,-Wuninitialized]
            polarity = polarity ? ACPI_ACTIVE_LOW : ACPI_ACTIVE_HIGH;
                       ^~~~~~~~
    arch/x86/kernel/acpi/boot.c:606:32: note: initialize the variable 'polarity' to silence this warning
            int rc, irq, trigger, polarity;
                                          ^
                                           = 0
    arch/x86/kernel/acpi/boot.c:617:12: error: variable 'trigger' is uninitialized when used here [-Werror,-Wuninitialized]
            trigger = trigger ? ACPI_LEVEL_SENSITIVE : ACPI_EDGE_SENSITIVE;
                      ^~~~~~~
    arch/x86/kernel/acpi/boot.c:606:22: note: initialize the variable 'trigger' to silence this warning
            int rc, irq, trigger, polarity;
                                ^
                                 = 0
    
    This is unfortunately a design decision in clang and won't be fixed.
    
    Changing the acpi_get_override_irq() macro to an inline function
    reliably avoids the issue.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad96d13da411e184a335ca11a97d025fc80365b8
Author: Benjamin Block <bblock@linux.ibm.com>
Date:   Tue Jul 2 23:02:02 2019 +0200

    scsi: zfcp: fix GCC compiler warning emitted with -Wmaybe-uninitialized
    
    [ Upstream commit 484647088826f2f651acbda6bcf9536b8a466703 ]
    
    GCC v9 emits this warning:
          CC      drivers/s390/scsi/zfcp_erp.o
        drivers/s390/scsi/zfcp_erp.c: In function 'zfcp_erp_action_enqueue':
        drivers/s390/scsi/zfcp_erp.c:217:26: warning: 'erp_action' may be used uninitialized in this function [-Wmaybe-uninitialized]
          217 |  struct zfcp_erp_action *erp_action;
              |                          ^~~~~~~~~~
    
    This is a possible false positive case, as also documented in the GCC
    documentations:
        https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wmaybe-uninitialized
    
    The actual code-sequence is like this:
        Various callers can invoke the function below with the argument "want"
        being one of:
        ZFCP_ERP_ACTION_REOPEN_ADAPTER,
        ZFCP_ERP_ACTION_REOPEN_PORT_FORCED,
        ZFCP_ERP_ACTION_REOPEN_PORT, or
        ZFCP_ERP_ACTION_REOPEN_LUN.
    
        zfcp_erp_action_enqueue(want, ...)
            ...
            need = zfcp_erp_required_act(want, ...)
                need = want
                ...
                maybe: need = ZFCP_ERP_ACTION_REOPEN_PORT
                maybe: need = ZFCP_ERP_ACTION_REOPEN_ADAPTER
                ...
                return need
            ...
            zfcp_erp_setup_act(need, ...)
                struct zfcp_erp_action *erp_action; // <== line 217
                ...
                switch(need) {
                case ZFCP_ERP_ACTION_REOPEN_LUN:
                        ...
                        erp_action = &zfcp_sdev->erp_action;
                        WARN_ON_ONCE(erp_action->port != port); // <== access
                        ...
                        break;
                case ZFCP_ERP_ACTION_REOPEN_PORT:
                case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:
                        ...
                        erp_action = &port->erp_action;
                        WARN_ON_ONCE(erp_action->port != port); // <== access
                        ...
                        break;
                case ZFCP_ERP_ACTION_REOPEN_ADAPTER:
                        ...
                        erp_action = &adapter->erp_action;
                        WARN_ON_ONCE(erp_action->port != NULL); // <== access
                        ...
                        break;
                }
                ...
                WARN_ON_ONCE(erp_action->adapter != adapter); // <== access
    
    When zfcp_erp_setup_act() is called, 'need' will never be anything else
    than one of the 4 possible enumeration-names that are used in the
    switch-case, and 'erp_action' is initialized for every one of them, before
    it is used. Thus the warning is a false positive, as documented.
    
    We introduce the extra if{} in the beginning to create an extra code-flow,
    so the compiler can be convinced that the switch-case will never see any
    other value.
    
    BUG_ON()/BUG() is intentionally not used to not crash anything, should
    this ever happen anyway - right now it's impossible, as argued above; and
    it doesn't introduce a 'default:' switch-case to retain warnings should
    'enum zfcp_erp_act_type' ever be extended and no explicit case be
    introduced. See also v5.0 commit 399b6c8bc9f7 ("scsi: zfcp: drop old
    default switch case which might paper over missing case").
    
    Signed-off-by: Benjamin Block <bblock@linux.ibm.com>
    Reviewed-by: Jens Remus <jremus@linux.ibm.com>
    Reviewed-by: Steffen Maier <maier@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d8583e7fbc60a5f421b07fd384ffc7f9b5efca8
Author: Andrea Parri <andrea.parri@amarulasolutions.com>
Date:   Mon May 20 19:23:58 2019 +0200

    ceph: fix improper use of smp_mb__before_atomic()
    
    [ Upstream commit 749607731e26dfb2558118038c40e9c0c80d23b5 ]
    
    This barrier only applies to the read-modify-write operations; in
    particular, it does not apply to the atomic64_set() primitive.
    
    Replace the barrier with an smp_mb().
    
    Fixes: fdd4e15838e59 ("ceph: rework dcache readdir")
    Reported-by: "Paul E. McKenney" <paulmck@linux.ibm.com>
    Reported-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9178a9dd43896482704c373ebabd95021670626a
Author: David Sterba <dsterba@suse.com>
Date:   Fri May 17 11:43:13 2019 +0200

    btrfs: fix minimum number of chunk errors for DUP
    
    [ Upstream commit 0ee5f8ae082e1f675a2fb6db601c31ac9958a134 ]
    
    The list of profiles in btrfs_chunk_max_errors lists DUP as a profile
    DUP able to tolerate 1 device missing. Though this profile is special
    with 2 copies, it still needs the device, unlike the others.
    
    Looking at the history of changes, thre's no clear reason why DUP is
    there, functions were refactored and blocks of code merged to one
    helper.
    
    d20983b40e828 Btrfs: fix writing data into the seed filesystem
      - factor code to a helper
    
    de11cc12df173 Btrfs: don't pre-allocate btrfs bio
      - unrelated change, DUP still in the list with max errors 1
    
    a236aed14ccb0 Btrfs: Deal with failed writes in mirrored configurations
      - introduced the max errors, leaves DUP and RAID1 in the same group
    
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a5e8659098aa8bc76ae056743f72c8df785c97ca
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue Jun 4 14:50:14 2019 +0100

    fs/adfs: super: fix use-after-free bug
    
    [ Upstream commit 5808b14a1f52554de612fee85ef517199855e310 ]
    
    Fix a use-after-free bug during filesystem initialisation, where we
    access the disc record (which is stored in a buffer) after we have
    released the buffer.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6aaace574aca86cfd79454c865abdbf8c7d890e8
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jun 24 14:38:18 2019 +0200

    dmaengine: rcar-dmac: Reject zero-length slave DMA requests
    
    [ Upstream commit 78efb76ab4dfb8f74f290ae743f34162cd627f19 ]
    
    While the .device_prep_slave_sg() callback rejects empty scatterlists,
    it still accepts single-entry scatterlists with a zero-length segment.
    These may happen if a driver calls dmaengine_prep_slave_single() with a
    zero len parameter.  The corresponding DMA request will never complete,
    leading to messages like:
    
        rcar-dmac e7300000.dma-controller: Channel Address Error happen
    
    and DMA timeouts.
    
    Although requesting a zero-length DMA request is a driver bug, rejecting
    it early eases debugging.  Note that the .device_prep_dma_memcpy()
    callback already rejects requests to copy zero bytes.
    
    Reported-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Analyzed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bd828014a4b6997820b058821598d0df1ed2f44
Author: Petr Cvek <petrcvekcz@gmail.com>
Date:   Thu Jun 20 23:39:37 2019 +0200

    MIPS: lantiq: Fix bitfield masking
    
    [ Upstream commit ba1bc0fcdeaf3bf583c1517bd2e3e29cf223c969 ]
    
    The modification of EXIN register doesn't clean the bitfield before
    the writing of a new value. After a few modifications the bitfield would
    accumulate only '1's.
    
    Signed-off-by: Petr Cvek <petrcvekcz@gmail.com>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: hauke@hauke-m.de
    Cc: john@phrozen.org
    Cc: linux-mips@vger.kernel.org
    Cc: openwrt-devel@lists.openwrt.org
    Cc: pakahmar@hotmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e505a100977c051221591e9c3382bade586fb68
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Wed May 29 07:26:25 2019 -0400

    kernel/module.c: Only return -EEXIST for modules that have finished loading
    
    [ Upstream commit 6e6de3dee51a439f76eb73c22ae2ffd2c9384712 ]
    
    Microsoft HyperV disables the X86_FEATURE_SMCA bit on AMD systems, and
    linux guests boot with repeated errors:
    
    amd64_edac_mod: Unknown symbol amd_unregister_ecc_decoder (err -2)
    amd64_edac_mod: Unknown symbol amd_register_ecc_decoder (err -2)
    amd64_edac_mod: Unknown symbol amd_report_gart_errors (err -2)
    amd64_edac_mod: Unknown symbol amd_unregister_ecc_decoder (err -2)
    amd64_edac_mod: Unknown symbol amd_register_ecc_decoder (err -2)
    amd64_edac_mod: Unknown symbol amd_report_gart_errors (err -2)
    
    The warnings occur because the module code erroneously returns -EEXIST
    for modules that have failed to load and are in the process of being
    removed from the module list.
    
    module amd64_edac_mod has a dependency on module edac_mce_amd.  Using
    modules.dep, systemd will load edac_mce_amd for every request of
    amd64_edac_mod.  When the edac_mce_amd module loads, the module has
    state MODULE_STATE_UNFORMED and once the module load fails and the state
    becomes MODULE_STATE_GOING.  Another request for edac_mce_amd module
    executes and add_unformed_module() will erroneously return -EEXIST even
    though the previous instance of edac_mce_amd has MODULE_STATE_GOING.
    Upon receiving -EEXIST, systemd attempts to load amd64_edac_mod, which
    fails because of unknown symbols from edac_mce_amd.
    
    add_unformed_module() must wait to return for any case other than
    MODULE_STATE_LIVE to prevent a race between multiple loads of
    dependent modules.
    
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    Signed-off-by: Barret Rhoden <brho@google.com>
    Cc: David Arcari <darcari@redhat.com>
    Cc: Jessica Yu <jeyu@kernel.org>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0073ed56028133df8d11b80949c15251ade6d00
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue May 21 16:49:33 2019 -0700

    ARM: dts: rockchip: Mark that the rk3288 timer might stop in suspend
    
    [ Upstream commit 8ef1ba39a9fa53d2205e633bc9b21840a275908e ]
    
    This is similar to commit e6186820a745 ("arm64: dts: rockchip: Arch
    counter doesn't tick in system suspend").  Specifically on the rk3288
    it can be seen that the timer stops ticking in suspend if we end up
    running through the "osc_disable" path in rk3288_slp_mode_set().  In
    that path the 24 MHz clock will turn off and the timer stops.
    
    To test this, I ran this on a Chrome OS filesystem:
      before=$(date); \
      suspend_stress_test -c1 --suspend_min=30 --suspend_max=31; \
      echo ${before}; date
    
    ...and I found that unless I plug in a device that requests USB wakeup
    to be active that the two calls to "date" would show that fewer than
    30 seconds passed.
    
    NOTE: deep suspend (where the 24 MHz clock gets disabled) isn't
    supported yet on upstream Linux so this was tested on a downstream
    kernel.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38d122a96cca089d70166f37667e75eda00bf6bd
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Thu May 2 17:19:18 2019 +0100

    ARM: riscpc: fix DMA
    
    [ Upstream commit ffd9a1ba9fdb7f2bd1d1ad9b9243d34e96756ba2 ]
    
    DMA got broken a while back in two different ways:
    1) a change in the behaviour of disable_irq() to wait for the interrupt
       to finish executing causes us to deadlock at the end of DMA.
    2) a change to avoid modifying the scatterlist left the first transfer
       uninitialised.
    
    DMA is only used with expansion cards, so has gone unnoticed.
    
    Fixes: fa4e99899932 ("[ARM] dma: RiscPC: don't modify DMA SG entries")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
