commit 258f0cf7ac3b788a14c0d01aab3c4aea02f8c86e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 14 07:57:23 2020 +0200

    Linux 4.19.123

commit c7eb87c8ba37794d47ba5e1dbd471c9f661be914
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Thu May 7 18:35:39 2020 -0700

    ipc/mqueue.c: change __do_notify() to bypass check_kill_permission()
    
    [ Upstream commit b5f2006144c6ae941726037120fa1001ddede784 ]
    
    Commit cc731525f26a ("signal: Remove kernel interal si_code magic")
    changed the value of SI_FROMUSER(SI_MESGQ), this means that mq_notify() no
    longer works if the sender doesn't have rights to send a signal.
    
    Change __do_notify() to use do_send_sig_info() instead of kill_pid_info()
    to avoid check_kill_permission().
    
    This needs the additional notify.sigev_signo != 0 check, shouldn't we
    change do_mq_notify() to deny sigev_signo == 0 ?
    
    Test-case:
    
            #include <signal.h>
            #include <mqueue.h>
            #include <unistd.h>
            #include <sys/wait.h>
            #include <assert.h>
    
            static int notified;
    
            static void sigh(int sig)
            {
                    notified = 1;
            }
    
            int main(void)
            {
                    signal(SIGIO, sigh);
    
                    int fd = mq_open("/mq", O_RDWR|O_CREAT, 0666, NULL);
                    assert(fd >= 0);
    
                    struct sigevent se = {
                            .sigev_notify   = SIGEV_SIGNAL,
                            .sigev_signo    = SIGIO,
                    };
                    assert(mq_notify(fd, &se) == 0);
    
                    if (!fork()) {
                            assert(setuid(1) == 0);
                            mq_send(fd, "",1,0);
                            return 0;
                    }
    
                    wait(NULL);
                    mq_unlink("/mq");
                    assert(notified);
                    return 0;
            }
    
    [manfred@colorfullife.com: 1) Add self_exec_id evaluation so that the implementation matches do_notify_parent 2) use PIDTYPE_TGID everywhere]
    Fixes: cc731525f26a ("signal: Remove kernel interal si_code magic")
    Reported-by: Yoji <yoji.fujihar.min@gmail.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Markus Elfring <elfring@users.sourceforge.net>
    Cc: <1vier1@web.de>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/e2a782e4-eab9-4f5c-c749-c07a8f7a4e66@colorfullife.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a3da00667cc450ece9ea4a368f171bc730e3c4e
Author: Ivan Delalande <colona@arista.com>
Date:   Thu May 7 18:35:53 2020 -0700

    scripts/decodecode: fix trapping instruction formatting
    
    commit e08df079b23e2e982df15aa340bfbaf50f297504 upstream.
    
    If the trapping instruction contains a ':', for a memory access through
    segment registers for example, the sed substitution will insert the '*'
    marker in the middle of the instruction instead of the line address:
    
            2b:   65 48 0f c7 0f          cmpxchg16b %gs:*(%rdi)          <-- trapping instruction
    
    I started to think I had forgotten some quirk of the assembly syntax
    before noticing that it was actually coming from the script.  Fix it to
    add the address marker at the right place for these instructions:
    
            28:   49 8b 06                mov    (%r14),%rax
            2b:*  65 48 0f c7 0f          cmpxchg16b %gs:(%rdi)           <-- trapping instruction
            30:   0f 94 c0                sete   %al
    
    Fixes: 18ff44b189e2 ("scripts/decodecode: make faulting insn ptr more robust")
    Signed-off-by: Ivan Delalande <colona@arista.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/20200419223653.GA31248@visor
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fbfc77d0f5e04a7434fa6d32112036e2a41bc6e
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:00 2020 -0500

    objtool: Fix stack offset tracking for indirect CFAs
    
    commit d8dd25a461e4eec7190cb9d66616aceacc5110ad upstream.
    
    When the current frame address (CFA) is stored on the stack (i.e.,
    cfa->base == CFI_SP_INDIRECT), objtool neglects to adjust the stack
    offset when there are subsequent pushes or pops.  This results in bad
    ORC data at the end of the ENTER_IRQ_STACK macro, when it puts the
    previous stack pointer on the stack and does a subsequent push.
    
    This fixes the following unwinder warning:
    
      WARNING: can't dereference registers at 00000000f0a6bdba for ip interrupt_entry+0x9f/0xa0
    
    Fixes: 627fce14809b ("objtool: Add ORC unwind table generation")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Reported-by: Dave Jones <dsj@fb.com>
    Reported-by: Steven Rostedt <rostedt@goodmis.org>
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Reported-by: Joe Mario <jmario@redhat.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/853d5d691b29e250333332f09b8e27410b2d9924.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 412cb7a3fb66792f8ec30ed80e126193ad073e56
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 29 21:00:41 2020 +0200

    netfilter: nf_osf: avoid passing pointer to local var
    
    commit c165d57b552aaca607fa5daf3fb524a6efe3c5a3 upstream.
    
    gcc-10 points out that a code path exists where a pointer to a stack
    variable may be passed back to the caller:
    
    net/netfilter/nfnetlink_osf.c: In function 'nf_osf_hdr_ctx_init':
    cc1: warning: function may return address of local variable [-Wreturn-local-addr]
    net/netfilter/nfnetlink_osf.c:171:16: note: declared here
      171 |  struct tcphdr _tcph;
          |                ^~~~~
    
    I am not sure whether this can happen in practice, but moving the
    variable declaration into the callers avoids the problem.
    
    Fixes: 31a9c29210e2 ("netfilter: nf_osf: add struct nf_osf_hdr_ctx")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efc97a1dec84a0f19ad3851014e54306597f2602
Author: Guillaume Nault <gnault@redhat.com>
Date:   Tue Apr 21 02:42:19 2020 +0200

    netfilter: nat: never update the UDP checksum when it's 0
    
    commit ea64d8d6c675c0bb712689b13810301de9d8f77a upstream.
    
    If the UDP header of a local VXLAN endpoint is NAT-ed, and the VXLAN
    device has disabled UDP checksums and enabled Tx checksum offloading,
    then the skb passed to udp_manip_pkt() has hdr->check == 0 (outer
    checksum disabled) and skb->ip_summed == CHECKSUM_PARTIAL (inner packet
    checksum offloaded).
    
    Because of the ->ip_summed value, udp_manip_pkt() tries to update the
    outer checksum with the new address and port, leading to an invalid
    checksum sent on the wire, as the original null checksum obviously
    didn't take the old address and port into account.
    
    So, we can't take ->ip_summed into account in udp_manip_pkt(), as it
    might not refer to the checksum we're acting on. Instead, we can base
    the decision to update the UDP checksum entirely on the value of
    hdr->check, because it's null if and only if checksum is disabled:
    
      * A fully computed checksum can't be 0, since a 0 checksum is
        represented by the CSUM_MANGLED_0 value instead.
    
      * A partial checksum can't be 0, since the pseudo-header always adds
        at least one non-zero value (the UDP protocol type 0x11) and adding
        more values to the sum can't make it wrap to 0 as the carry is then
        added to the wrapped number.
    
      * A disabled checksum uses the special value 0.
    
    The problem seems to be there from day one, although it was probably
    not visible before UDP tunnels were implemented.
    
    Fixes: 5b1158e909ec ("[NETFILTER]: Add NAT support for nf_conntrack")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12082f1ea9ea35e3dedf3ac0e58e97cada8a520c
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:06:14 2020 -0500

    x86/unwind/orc: Fix premature unwind stoppage due to IRET frames
    
    commit 81b67439d147677d844d492fcbd03712ea438f42 upstream.
    
    The following execution path is possible:
    
      fsnotify()
        [ realign the stack and store previous SP in R10 ]
        <IRQ>
          [ only IRET regs saved ]
          common_interrupt()
            interrupt_entry()
              <NMI>
                [ full pt_regs saved ]
                ...
                [ unwind stack ]
    
    When the unwinder goes through the NMI and the IRQ on the stack, and
    then sees fsnotify(), it doesn't have access to the value of R10,
    because it only has the five IRET registers.  So the unwind stops
    prematurely.
    
    However, because the interrupt_entry() code is careful not to clobber
    R10 before saving the full regs, the unwinder should be able to read R10
    from the previously saved full pt_regs associated with the NMI.
    
    Handle this case properly.  When encountering an IRET regs frame
    immediately after a full pt_regs frame, use the pt_regs as a backup
    which can be used to get the C register values.
    
    Also, note that a call frame resets the 'prev_regs' value, because a
    function is free to clobber the registers.  For this fix to work, the
    IRET and full regs frames must be adjacent, with no FUNC frames in
    between.  So replace the FUNC hint in interrupt_entry() with an
    IRET_REGS hint.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/97a408167cc09f1cfa0de31a7b70dd88868d743f.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e356bf888ca51f42ea8a7e9784a1ff2de1ba7e3f
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:06:13 2020 -0500

    x86/unwind/orc: Fix error path for bad ORC entry type
    
    commit a0f81bf26888048100bf017fadf438a5bdffa8d8 upstream.
    
    If the ORC entry type is unknown, nothing else can be done other than
    reporting an error.  Exit the function instead of breaking out of the
    switch statement.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/a7fa668ca6eabbe81ab18b2424f15adbbfdc810a.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01613edcbe93abb0292c9a24a641ef9bdb933145
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:08 2020 -0500

    x86/unwind/orc: Prevent unwinding before ORC initialization
    
    commit 98d0c8ebf77e0ba7c54a9ae05ea588f0e9e3f46e upstream.
    
    If the unwinder is called before the ORC data has been initialized,
    orc_find() returns NULL, and it tries to fall back to using frame
    pointers.  This can cause some unexpected warnings during boot.
    
    Move the 'orc_init' check from orc_find() to __unwind_init(), so that it
    doesn't even try to unwind from an uninitialized state.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/069d1499ad606d85532eb32ce39b2441679667d5.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5d78c242d1127806f0a848df81c5d44a7505d94
Author: Miroslav Benes <mbenes@suse.cz>
Date:   Sat Apr 25 05:03:07 2020 -0500

    x86/unwind/orc: Don't skip the first frame for inactive tasks
    
    commit f1d9a2abff66aa8156fbc1493abed468db63ea48 upstream.
    
    When unwinding an inactive task, the ORC unwinder skips the first frame
    by default.  If both the 'regs' and 'first_frame' parameters of
    unwind_start() are NULL, 'state->sp' and 'first_frame' are later
    initialized to the same value for an inactive task.  Given there is a
    "less than or equal to" comparison used at the end of __unwind_start()
    for skipping stack frames, the first frame is skipped.
    
    Drop the equal part of the comparison and make the behavior equivalent
    to the frame pointer unwinder.
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/7f08db872ab59e807016910acdbe82f744de7065.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff579b3cc63d7320dadb057a51d4a8957e9085da
Author: Jann Horn <jannh@google.com>
Date:   Sat Apr 25 05:03:04 2020 -0500

    x86/entry/64: Fix unwind hints in rewind_stack_do_exit()
    
    commit f977df7b7ca45a4ac4b66d30a8931d0434c394b1 upstream.
    
    The LEAQ instruction in rewind_stack_do_exit() moves the stack pointer
    directly below the pt_regs at the top of the task stack before calling
    do_exit(). Tell the unwinder to expect pt_regs.
    
    Fixes: 8c1f75587a18 ("x86/entry/64: Add unwind hint annotations")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/68c33e17ae5963854916a46f522624f8e1d264f2.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac069a960d357a7495fd2a1cde28d9b03250cace
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:02 2020 -0500

    x86/entry/64: Fix unwind hints in kernel exit path
    
    commit 1fb143634a38095b641a3a21220774799772dc4c upstream.
    
    In swapgs_restore_regs_and_return_to_usermode, after the stack is
    switched to the trampoline stack, the existing UNWIND_HINT_REGS hint is
    no longer valid, which can result in the following ORC unwinder warning:
    
      WARNING: can't dereference registers at 000000003aeb0cdd for ip swapgs_restore_regs_and_return_to_usermode+0x93/0xa0
    
    For full correctness, we could try to add complicated unwind hints so
    the unwinder could continue to find the registers, but when when it's
    this close to kernel exit, unwind hints aren't really needed anymore and
    it's fine to just use an empty hint which tells the unwinder to stop.
    
    For consistency, also move the UNWIND_HINT_EMPTY in
    entry_SYSCALL_64_after_hwframe to a similar location.
    
    Fixes: 3e3b9293d392 ("x86/entry/64: Return to userspace from the trampoline stack")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Reported-by: Dave Jones <dsj@fb.com>
    Reported-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reported-by: Joe Mario <jmario@redhat.com>
    Reported-by: Jann Horn <jannh@google.com>
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/60ea8f562987ed2d9ace2977502fe481c0d7c9a0.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8583f46330dea8d72e94a043172a8d11442677f5
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Sat Apr 25 05:03:01 2020 -0500

    x86/entry/64: Fix unwind hints in register clearing code
    
    commit 06a9750edcffa808494d56da939085c35904e618 upstream.
    
    The PUSH_AND_CLEAR_REGS macro zeroes each register immediately after
    pushing it.  If an NMI or exception hits after a register is cleared,
    but before the UNWIND_HINT_REGS annotation, the ORC unwinder will
    wrongly think the previous value of the register was zero.  This can
    confuse the unwinding process and cause it to exit early.
    
    Because ORC is simpler than DWARF, there are a limited number of unwind
    annotation states, so it's not possible to add an individual unwind hint
    after each push/clear combination.  Instead, the register clearing
    instructions need to be consolidated and moved to after the
    UNWIND_HINT_REGS annotation.
    
    Fixes: 3f01daecd545 ("x86/entry/64: Introduce the PUSH_AND_CLEAN_REGS macro")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Dave Jones <dsj@fb.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Link: https://lore.kernel.org/r/68fd3d0bc92ae2d62ff7879d15d3684217d51f08.1587808742.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 529fab2033a64eb29f9526c7951471591914b702
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Mon Apr 20 13:37:20 2020 +0800

    batman-adv: Fix refcnt leak in batadv_v_ogm_process
    
    commit 6f91a3f7af4186099dd10fa530dd7e0d9c29747d upstream.
    
    batadv_v_ogm_process() invokes batadv_hardif_neigh_get(), which returns
    a reference of the neighbor object to "hardif_neigh" with increased
    refcount.
    
    When batadv_v_ogm_process() returns, "hardif_neigh" becomes invalid, so
    the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in one exception handling paths of
    batadv_v_ogm_process(). When batadv_v_ogm_orig_get() fails to get the
    orig node and returns NULL, the refcnt increased by
    batadv_hardif_neigh_get() is not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_v_ogm_orig_get()
    fails to get the orig node.
    
    Fixes: 9323158ef9f4 ("batman-adv: OGMv2 - implement originators logic")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b50dee75473625765ba44c569c4bb0f51f55b614
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:35:21 2020 +0800

    batman-adv: Fix refcnt leak in batadv_store_throughput_override
    
    commit 6107c5da0fca8b50b4d3215e94d619d38cc4a18c upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_store_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in one error path of
    batadv_store_throughput_override(). When batadv_parse_throughput()
    returns NULL, the refcnt increased by batadv_hardif_get_by_netdev() is
    not decreased, causing a refcnt leak.
    
    Fix this issue by jumping to "out" label when batadv_parse_throughput()
    returns NULL.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2668caa9c5c35294caa07f5c5b4ff7ff2ec2175c
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:31:50 2020 +0800

    batman-adv: Fix refcnt leak in batadv_show_throughput_override
    
    commit f872de8185acf1b48b954ba5bd8f9bc0a0d14016 upstream.
    
    batadv_show_throughput_override() invokes batadv_hardif_get_by_netdev(),
    which gets a batadv_hard_iface object from net_dev with increased refcnt
    and its reference is assigned to a local pointer 'hard_iface'.
    
    When batadv_show_throughput_override() returns, "hard_iface" becomes
    invalid, so the refcount should be decreased to keep refcount balanced.
    
    The issue happens in the normal path of
    batadv_show_throughput_override(), which forgets to decrease the refcnt
    increased by batadv_hardif_get_by_netdev() before the function returns,
    causing a refcnt leak.
    
    Fix this issue by calling batadv_hardif_put() before the
    batadv_show_throughput_override() returns in the normal path.
    
    Fixes: 0b5ecc6811bd ("batman-adv: add throughput override attribute to hard_ifaces")
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba47355d79e18ba796ef01135eb53dd0b48ee320
Author: George Spelvin <lkml@sdf.org>
Date:   Sun Mar 8 09:44:59 2020 -0400

    batman-adv: fix batadv_nc_random_weight_tq
    
    commit fd0c42c4dea54335967c5a86f15fc064235a2797 upstream.
    
    and change to pseudorandom numbers, as this is a traffic dithering
    operation that doesn't need crypto-grade.
    
    The previous code operated in 4 steps:
    
    1. Generate a random byte 0 <= rand_tq <= 255
    2. Multiply it by BATADV_TQ_MAX_VALUE - tq
    3. Divide by 255 (= BATADV_TQ_MAX_VALUE)
    4. Return BATADV_TQ_MAX_VALUE - rand_tq
    
    This would apperar to scale (BATADV_TQ_MAX_VALUE - tq) by a random
    value between 0/255 and 255/255.
    
    But!  The intermediate value between steps 3 and 4 is stored in a u8
    variable.  So it's truncated, and most of the time, is less than 255, after
    which the division produces 0.  Specifically, if tq is odd, the product is
    always even, and can never be 255.  If tq is even, there's exactly one
    random byte value that will produce a product byte of 255.
    
    Thus, the return value is 255 (511/512 of the time) or 254 (1/512
    of the time).
    
    If we assume that the truncation is a bug, and the code is meant to scale
    the input, a simpler way of looking at it is that it's returning a random
    value between tq and BATADV_TQ_MAX_VALUE, inclusive.
    
    Well, we have an optimized function for doing just that.
    
    Fixes: 3c12de9a5c75 ("batman-adv: network coding - code and transmit packets if possible")
    Signed-off-by: George Spelvin <lkml@sdf.org>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52d5afedf3b2de252d758abdba111d0bb65e36bc
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Mon May 11 17:28:15 2020 -0700

    KVM: VMX: Mark RCX, RDX and RSI as clobbered in vmx_vcpu_run()'s asm blob
    
    Based on upstream commit f3689e3f17f064fd4cd5f0cb01ae2395c94f39d9.
    
    Save RCX, RDX and RSI to fake outputs to coerce the compiler into
    treating them as clobbered.  RCX in particular is likely to be reused by
    the compiler to dereference the 'struct vcpu_vmx' pointer, which will
    result in a null pointer dereference now that RCX is zeroed by the asm
    blob.
    
    Tag the asm() blob as volatile to prevent GCC from dropping the blob,
    which is possible now that the blob has output values, all of which are
    unused.
    
    Upstream commit f3689e3f17f06 ("KVM: VMX: Save RSI to an unused output
    in the vCPU-run asm blob") is not a direct equivalent of this patch. As
    its shortlog states, it only tagged RSI as clobbered, whereas here RCX
    and RDX are also clobbered.
    
    In upstream at the time of the offending commit (b4be98039a92 in 4.19,
    0e0ab73c9a024 upstream), the inline asm blob had previously been moved
    to a dedicated helper, __vmx_vcpu_run().  For unrelated reasons,
    __vmx_vcpu_run() was put into its own optimization unit, which for all
    intents and purposes made it impossible to consume clobbered registers
    because RCX, RDX and RSI are volatile and __vmx_vcpu_run() couldn't
    itself be inlined.  In other words, the bug existed but couldn't be hit.
    
    Similarly, the lack of "volatile" was also a bug in upstream that was
    hidden by an unrelated change that exists in upstream but not in 4.19.
    In this case, the asm blob also uses ASM_CALL_CONSTRAINT (marks RSP as
    being an input/output constraint) in upstream to play nice with objtool
    due the blob making a CALL.  In 4.19, there is no CALL and thus no
    ASM_CALL_CONSTRAINT.
    
    Furthermore, both of the lurking bugs were blasted away in upstream by
    commits 5e0781df1899 ("KVM: VMX: Move vCPU-run code to a proper assembly
    routine") and fc2ba5a27a1a ("KVM: VMX: Call vCPU-run asm sub-routine
    from C and remove clobbering"), i.e. these bugs will never be directly
    fixed in upstream.
    
    Reported-by: Tobias Urdin <tobias.urdin@binero.com>
    Fixes: b4be98039a92 ("KVM: VMX: Zero out *all* general purpose registers after VM-Exit")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0590bcdea7955384a1e8187c6898c31aa213b105
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Dec 20 12:25:16 2018 -0800

    KVM: VMX: Explicitly reference RCX as the vmx_vcpu pointer in asm blobs
    
    commit 051a2d3e59e51ae49fd56aef34e472832897ce46 upstream.
    
    Use '%% " _ASM_CX"' instead of '%0' to dereference RCX, i.e. the
    'struct vcpu_vmx' pointer, in the VM-Enter asm blobs of vmx_vcpu_run()
    and nested_vmx_check_vmentry_hw().  Using the symbolic name means that
    adding/removing an output parameter(s) requires "rewriting" almost all
    of the asm blob, which makes it nearly impossible to understand what's
    being changed in even the most minor patches.
    
    Opportunistically improve the code comments.
    
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3a6bc0d475f6711e606681e2f94e8baf72b7d30
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Thu Apr 16 16:28:59 2020 +0000

    coredump: fix crash when umh is disabled
    
    commit 3740d93e37902b31159a82da2d5c8812ed825404 upstream.
    
    Commit 64e90a8acb859 ("Introduce STATIC_USERMODEHELPER to mediate
    call_usermodehelper()") added the optiont to disable all
    call_usermodehelper() calls by setting STATIC_USERMODEHELPER_PATH to
    an empty string. When this is done, and crashdump is triggered, it
    will crash on null pointer dereference, since we make assumptions
    over what call_usermodehelper_exec() did.
    
    This has been reported by Sergey when one triggers a a coredump
    with the following configuration:
    
    ```
    CONFIG_STATIC_USERMODEHELPER=y
    CONFIG_STATIC_USERMODEHELPER_PATH=""
    kernel.core_pattern = |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e
    ```
    
    The way disabling the umh was designed was that call_usermodehelper_exec()
    would just return early, without an error. But coredump assumes
    certain variables are set up for us when this happens, and calls
    ile_start_write(cprm.file) with a NULL file.
    
    [    2.819676] BUG: kernel NULL pointer dereference, address: 0000000000000020
    [    2.819859] #PF: supervisor read access in kernel mode
    [    2.820035] #PF: error_code(0x0000) - not-present page
    [    2.820188] PGD 0 P4D 0
    [    2.820305] Oops: 0000 [#1] SMP PTI
    [    2.820436] CPU: 2 PID: 89 Comm: a Not tainted 5.7.0-rc1+ #7
    [    2.820680] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS ?-20190711_202441-buildvm-armv7-10.arm.fedoraproject.org-2.fc31 04/01/2014
    [    2.821150] RIP: 0010:do_coredump+0xd80/0x1060
    [    2.821385] Code: e8 95 11 ed ff 48 c7 c6 cc a7 b4 81 48 8d bd 28 ff
    ff ff 89 c2 e8 70 f1 ff ff 41 89 c2 85 c0 0f 84 72 f7 ff ff e9 b4 fe ff
    ff <48> 8b 57 20 0f b7 02 66 25 00 f0 66 3d 00 8
    0 0f 84 9c 01 00 00 44
    [    2.822014] RSP: 0000:ffffc9000029bcb8 EFLAGS: 00010246
    [    2.822339] RAX: 0000000000000000 RBX: ffff88803f860000 RCX: 000000000000000a
    [    2.822746] RDX: 0000000000000009 RSI: 0000000000000282 RDI: 0000000000000000
    [    2.823141] RBP: ffffc9000029bde8 R08: 0000000000000000 R09: ffffc9000029bc00
    [    2.823508] R10: 0000000000000001 R11: ffff88803dec90be R12: ffffffff81c39da0
    [    2.823902] R13: ffff88803de84400 R14: 0000000000000000 R15: 0000000000000000
    [    2.824285] FS:  00007fee08183540(0000) GS:ffff88803e480000(0000) knlGS:0000000000000000
    [    2.824767] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    2.825111] CR2: 0000000000000020 CR3: 000000003f856005 CR4: 0000000000060ea0
    [    2.825479] Call Trace:
    [    2.825790]  get_signal+0x11e/0x720
    [    2.826087]  do_signal+0x1d/0x670
    [    2.826361]  ? force_sig_info_to_task+0xc1/0xf0
    [    2.826691]  ? force_sig_fault+0x3c/0x40
    [    2.826996]  ? do_trap+0xc9/0x100
    [    2.827179]  exit_to_usermode_loop+0x49/0x90
    [    2.827359]  prepare_exit_to_usermode+0x77/0xb0
    [    2.827559]  ? invalid_op+0xa/0x30
    [    2.827747]  ret_from_intr+0x20/0x20
    [    2.827921] RIP: 0033:0x55e2c76d2129
    [    2.828107] Code: 2d ff ff ff e8 68 ff ff ff 5d c6 05 18 2f 00 00 01
    c3 0f 1f 80 00 00 00 00 c3 0f 1f 80 00 00 00 00 e9 7b ff ff ff 55 48 89
    e5 <0f> 0b b8 00 00 00 00 5d c3 66 2e 0f 1f 84 0
    0 00 00 00 00 0f 1f 40
    [    2.828603] RSP: 002b:00007fffeba5e080 EFLAGS: 00010246
    [    2.828801] RAX: 000055e2c76d2125 RBX: 0000000000000000 RCX: 00007fee0817c718
    [    2.829034] RDX: 00007fffeba5e188 RSI: 00007fffeba5e178 RDI: 0000000000000001
    [    2.829257] RBP: 00007fffeba5e080 R08: 0000000000000000 R09: 00007fee08193c00
    [    2.829482] R10: 0000000000000009 R11: 0000000000000000 R12: 000055e2c76d2040
    [    2.829727] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    [    2.829964] CR2: 0000000000000020
    [    2.830149] ---[ end trace ceed83d8c68a1bf1 ]---
    ```
    
    Cc: <stable@vger.kernel.org> # v4.11+
    Fixes: 64e90a8acb85 ("Introduce STATIC_USERMODEHELPER to mediate call_usermodehelper()")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=199795
    Reported-by: Tony Vroon <chainsaw@gentoo.org>
    Reported-by: Sergey Kvachonok <ravenexp@gmail.com>
    Tested-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Link: https://lore.kernel.org/r/20200416162859.26518-1-mcgrof@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67753cc6e253f5daa4b593ad63833ab48b7b6745
Author: Oscar Carter <oscar.carter@gmx.com>
Date:   Fri May 1 17:51:18 2020 +0200

    staging: gasket: Check the return value of gasket_get_bar_index()
    
    commit 769acc3656d93aaacada814939743361d284fd87 upstream.
    
    Check the return value of gasket_get_bar_index function as it can return
    a negative one (-EINVAL). If this happens, a negative index is used in
    the "gasket_dev->bar_data" array.
    
    Addresses-Coverity-ID: 1438542 ("Negative array index read")
    Fixes: 9a69f5087ccc2 ("drivers/staging: Gasket driver framework + Apex driver")
    Signed-off-by: Oscar Carter <oscar.carter@gmx.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Richard Yeh <rcy@google.com>
    Link: https://lore.kernel.org/r/20200501155118.13380-1-oscar.carter@gmx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfe810bd92be7a50f491abd381f5a742d9844675
Author: David Hildenbrand <david@redhat.com>
Date:   Thu May 7 18:35:46 2020 -0700

    mm/page_alloc: fix watchdog soft lockups during set_zone_contiguous()
    
    commit e84fe99b68ce353c37ceeecc95dce9696c976556 upstream.
    
    Without CONFIG_PREEMPT, it can happen that we get soft lockups detected,
    e.g., while booting up.
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [swapper/0:1]
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0-next-20200331+ #4
      Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
      RIP: __pageblock_pfn_to_page+0x134/0x1c0
      Call Trace:
       set_zone_contiguous+0x56/0x70
       page_alloc_init_late+0x166/0x176
       kernel_init_freeable+0xfa/0x255
       kernel_init+0xa/0x106
       ret_from_fork+0x35/0x40
    
    The issue becomes visible when having a lot of memory (e.g., 4TB)
    assigned to a single NUMA node - a system that can easily be created
    using QEMU.  Inside VMs on a hypervisor with quite some memory
    overcommit, this is fairly easy to trigger.
    
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Reviewed-by: Baoquan He <bhe@redhat.com>
    Reviewed-by: Shile Zhang <shile.zhang@linux.alibaba.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Shile Zhang <shile.zhang@linux.alibaba.com>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200416073417.5003-1-david@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66434c6037f028e99e7292bea92cae9f22d29b1c
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Tue May 5 13:59:30 2020 +0100

    arm64: hugetlb: avoid potential NULL dereference
    
    commit 027d0c7101f50cf03aeea9eebf484afd4920c8d3 upstream.
    
    The static analyzer in GCC 10 spotted that in huge_pte_alloc() we may
    pass a NULL pmdp into pte_alloc_map() when pmd_alloc() returns NULL:
    
    |   CC      arch/arm64/mm/pageattr.o
    |   CC      arch/arm64/mm/hugetlbpage.o
    |                  from arch/arm64/mm/hugetlbpage.c:10:
    | arch/arm64/mm/hugetlbpage.c: In function ‘huge_pte_alloc’:
    | ./arch/arm64/include/asm/pgtable-types.h:28:24: warning: dereference of NULL ‘pmdp’ [CWE-690] [-Wanalyzer-null-dereference]
    | ./arch/arm64/include/asm/pgtable.h:436:26: note: in expansion of macro ‘pmd_val’
    | arch/arm64/mm/hugetlbpage.c:242:10: note: in expansion of macro ‘pte_alloc_map’
    |     |arch/arm64/mm/hugetlbpage.c:232:10:
    |     |./arch/arm64/include/asm/pgtable-types.h:28:24:
    | ./arch/arm64/include/asm/pgtable.h:436:26: note: in expansion of macro ‘pmd_val’
    | arch/arm64/mm/hugetlbpage.c:242:10: note: in expansion of macro ‘pte_alloc_map’
    
    This can only occur when the kernel cannot allocate a page, and so is
    unlikely to happen in practice before other systems start failing.
    
    We can avoid this by bailing out if pmd_alloc() fails, as we do earlier
    in the function if pud_alloc() fails.
    
    Fixes: 66b3923a1a0f ("arm64: hugetlb: add support for PTE contiguous bit")
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Reported-by: Kyrill Tkachov <kyrylo.tkachov@arm.com>
    Cc: <stable@vger.kernel.org> # 4.5.x-
    Cc: Will Deacon <will@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4e52d72fe43420c7ee955428cabef8a91105ca1
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Apr 29 11:21:55 2020 +0100

    KVM: arm64: Fix 32bit PC wrap-around
    
    commit 0225fd5e0a6a32af7af0aefac45c8ebf19dc5183 upstream.
    
    In the unlikely event that a 32bit vcpu traps into the hypervisor
    on an instruction that is located right at the end of the 32bit
    range, the emulation of that instruction is going to increment
    PC past the 32bit range. This isn't great, as userspace can then
    observe this value and get a bit confused.
    
    Conversly, userspace can do things like (in the context of a 64bit
    guest that is capable of 32bit EL0) setting PSTATE to AArch64-EL0,
    set PC to a 64bit value, change PSTATE to AArch32-USR, and observe
    that PC hasn't been truncated. More confusion.
    
    Fix both by:
    - truncating PC increments for 32bit guests
    - sanitizing all 32bit regs every time a core reg is changed by
      userspace, and that PSTATE indicates a 32bit mode.
    
    Cc: stable@vger.kernel.org
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93adb6ec34083f934e544bc02c8a4acf5079bb31
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Apr 14 15:10:08 2020 +0100

    KVM: arm: vgic: Fix limit condition when writing to GICD_I[CS]ACTIVER
    
    commit 1c32ca5dc6d00012f0c964e5fdd7042fcc71efb1 upstream.
    
    When deciding whether a guest has to be stopped we check whether this
    is a private interrupt or not. Unfortunately, there's an off-by-one bug
    here, and we fail to recognize a whole range of interrupts as being
    global (GICv2 SPIs 32-63).
    
    Fix the condition from > to be >=.
    
    Cc: stable@vger.kernel.org
    Fixes: abd7229626b93 ("KVM: arm/arm64: Simplify active_change_prepare and plug race")
    Reported-by: André Przywara <andre.przywara@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e52aece8809be6f4d1d9873fad2a710fa746d929
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed May 6 10:36:18 2020 -0400

    tracing: Add a vmalloc_sync_mappings() for safe measure
    
    commit 11f5efc3ab66284f7aaacc926e9351d658e2577b upstream.
    
    x86_64 lazily maps in the vmalloc pages, and the way this works with per_cpu
    areas can be complex, to say the least. Mappings may happen at boot up, and
    if nothing synchronizes the page tables, those page mappings may not be
    synced till they are used. This causes issues for anything that might touch
    one of those mappings in the path of the page fault handler. When one of
    those unmapped mappings is touched in the page fault handler, it will cause
    another page fault, which in turn will cause a page fault, and leave us in
    a loop of page faults.
    
    Commit 763802b53a42 ("x86/mm: split vmalloc_sync_all()") split
    vmalloc_sync_all() into vmalloc_sync_unmappings() and
    vmalloc_sync_mappings(), as on system exit, it did not need to do a full
    sync on x86_64 (although it still needed to be done on x86_32). By chance,
    the vmalloc_sync_all() would synchronize the page mappings done at boot up
    and prevent the per cpu area from being a problem for tracing in the page
    fault handler. But when that synchronization in the exit of a task became a
    nop, it caused the problem to appear.
    
    Link: https://lore.kernel.org/r/20200429054857.66e8e333@oasis.local.home
    
    Cc: stable@vger.kernel.org
    Fixes: 737223fbca3b1 ("tracing: Consolidate buffer allocation code")
    Reported-by: "Tzvetomir Stoyanov (VMware)" <tz.stoyanov@gmail.com>
    Suggested-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1733fe42d94c70d5626854cace6db23674f24ca1
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 15 16:03:04 2020 +0200

    USB: serial: garmin_gps: add sanity checking for data length
    
    commit e9b3c610a05c1cdf8e959a6d89c38807ff758ee6 upstream.
    
    We must not process packets shorter than a packet ID
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-and-tested-by: syzbot+d29e9263e13ce0b9f4fd@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a05a6f1d2ee5dcdbba8e888098ff9bccae84879
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 29 17:52:18 2020 +0200

    USB: uas: add quirk for LaCie 2Big Quadra
    
    commit 9f04db234af691007bb785342a06abab5fb34474 upstream.
    
    This device needs US_FL_NO_REPORT_OPCODES to avoid going
    through prolonged error handling on enumeration.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: Julian Groß <julian.g@posteo.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200429155218.7308-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86762f6959cedb8c9353fadcd1985ed3e642ba86
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Apr 22 16:18:48 2020 -0400

    HID: usbhid: Fix race between usbhid_close() and usbhid_stop()
    
    commit 0ed08faded1da03eb3def61502b27f81aef2e615 upstream.
    
    The syzbot fuzzer discovered a bad race between in the usbhid driver
    between usbhid_stop() and usbhid_close().  In particular,
    usbhid_stop() does:
    
            usb_free_urb(usbhid->urbin);
            ...
            usbhid->urbin = NULL; /* don't mess up next start */
    
    and usbhid_close() does:
    
            usb_kill_urb(usbhid->urbin);
    
    with no mutual exclusion.  If the two routines happen to run
    concurrently so that usb_kill_urb() is called in between the
    usb_free_urb() and the NULL assignment, it will access the
    deallocated urb structure -- a use-after-free bug.
    
    This patch adds a mutex to the usbhid private structure and uses it to
    enforce mutual exclusion of the usbhid_start(), usbhid_stop(),
    usbhid_open() and usbhid_close() callbacks.
    
    Reported-and-tested-by: syzbot+7bf5a7b0f0a1f9446f4c@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db8bf823e70f239372c62f13e4eb6f08a1665e8c
Author: Jere Leppänen <jere.leppanen@nokia.com>
Date:   Tue Apr 21 22:03:41 2020 +0300

    sctp: Fix bundling of SHUTDOWN with COOKIE-ACK
    
    commit 145cb2f7177d94bc54563ed26027e952ee0ae03c upstream.
    
    When we start shutdown in sctp_sf_do_dupcook_a(), we want to bundle
    the SHUTDOWN with the COOKIE-ACK to ensure that the peer receives them
    at the same time and in the correct order. This bundling was broken by
    commit 4ff40b86262b ("sctp: set chunk transport correctly when it's a
    new asoc"), which assigns a transport for the COOKIE-ACK, but not for
    the SHUTDOWN.
    
    Fix this by passing a reference to the COOKIE-ACK chunk as an argument
    to sctp_sf_do_9_2_start_shutdown() and onward to
    sctp_make_shutdown(). This way the SHUTDOWN chunk is assigned the same
    transport as the COOKIE-ACK chunk, which allows them to be bundled.
    
    In sctp_sf_do_9_2_start_shutdown(), the void *arg parameter was
    previously unused. Now that we're taking it into use, it must be a
    valid pointer to a chunk, or NULL. There is only one call site where
    it's not, in sctp_sf_autoclose_timer_expire(). Fix that too.
    
    Fixes: 4ff40b86262b ("sctp: set chunk transport correctly when it's a new asoc")
    Signed-off-by: Jere Leppänen <jere.leppanen@nokia.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 525d7e73277b1d2388cdbf8e8a9177aa23ba2d7a
Author: Jason Gerecke <jason.gerecke@wacom.com>
Date:   Wed Apr 1 14:23:29 2020 -0700

    HID: wacom: Read HID_DG_CONTACTMAX directly for non-generic devices
    
    commit 778fbf4179991e7652e97d7f1ca1f657ef828422 upstream.
    
    We've recently switched from extracting the value of HID_DG_CONTACTMAX
    at a fixed offset (which may not be correct for all tablets) to
    injecting the report into the driver for the generic codepath to handle.
    Unfortunately, this change was made for *all* tablets, even those which
    aren't generic. Because `wacom_wac_report` ignores reports from non-
    generic devices, the contact count never gets initialized. Ultimately
    this results in the touch device itself failing to probe, and thus the
    loss of touch input.
    
    This commit adds back the fixed-offset extraction for non-generic devices.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/155
    Fixes: 184eccd40389 ("HID: wacom: generic: read HID_DG_CONTACTMAX from any feature report")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    CC: stable@vger.kernel.org # 5.3+
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f12aa513fe47e910bed3526e57ae1ce6c9412e24
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon May 4 12:48:54 2020 -0400

    net: stricter validation of untrusted gso packets
    
    [ Upstream commit 9274124f023b5c56dc4326637d4f787968b03607 ]
    
    Syzkaller again found a path to a kernel crash through bad gso input:
    a packet with transport header extending beyond skb_headlen(skb).
    
    Tighten validation at kernel entry:
    
    - Verify that the transport header lies within the linear section.
    
        To avoid pulling linux/tcp.h, verify just sizeof tcphdr.
        tcp_gso_segment will call pskb_may_pull (th->doff * 4) before use.
    
    - Match the gso_type against the ip_proto found by the flow dissector.
    
    Fixes: bfd5f4a3d605 ("packet: Add GSO/csum offload support.")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d79fe56f066acaecc41d691221ae6b8e72b7d29
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:38 2020 -0400

    bnxt_en: Fix VF anti-spoof filter setup.
    
    [ Upstream commit c71c4e49afe173823a2a85b0cabc9b3f1176ffa2 ]
    
    Fix the logic that sets the enable/disable flag for the source MAC
    filter according to firmware spec 1.7.1.
    
    In the original firmware spec. before 1.7.1, the VF spoof check flags
    were not latched after making the HWRM_FUNC_CFG call, so there was a
    need to keep the func_flags so that subsequent calls would perserve
    the VF spoof check setting.  A change was made in the 1.7.1 spec
    so that the flags became latched.  So we now set or clear the anti-
    spoof setting directly without retrieving the old settings in the
    stored vf->func_flags which are no longer valid.  We also remove the
    unneeded vf->func_flags.
    
    Fixes: 8eb992e876a8 ("bnxt_en: Update firmware interface spec to 1.7.6.2.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79949e8b03885bea15ab45286d819cc862cc7bf3
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:40 2020 -0400

    bnxt_en: Improve AER slot reset.
    
    [ Upstream commit bae361c54fb6ac6eba3b4762f49ce14beb73ef13 ]
    
    Improve the slot reset sequence by disabling the device to prevent bad
    DMAs if slot reset fails.  Return the proper result instead of always
    PCI_ERS_RESULT_RECOVERED to the caller.
    
    Fixes: 6316ea6db93d ("bnxt_en: Enable AER support.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ddb6aa96a57a4724b590b82ac6cebc0f08b78b6
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Feb 23 03:27:41 2020 +0200

    net/mlx5: Fix command entry leak in Internal Error State
    
    [ Upstream commit cece6f432cca9f18900463ed01b97a152a03600a ]
    
    Processing commands by cmd_work_handler() while already in Internal
    Error State will result in entry leak, since the handler process force
    completion without doorbell. Forced completion doesn't release the entry
    and event completion will never arrive, so entry should be released.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cbe666d58e36cb38ffe2a7c5e45b1dd7057bd1d
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Sun Jul 21 08:40:13 2019 +0300

    net/mlx5: Fix forced completion access non initialized command entry
    
    [ Upstream commit f3cb3cebe26ed4c8036adbd9448b372129d3c371 ]
    
    mlx5_cmd_flush() will trigger forced completions to all valid command
    entries. Triggered by an asynch event such as fast teardown it can
    happen at any stage of the command, including command initialization.
    It will trigger forced completion and that can lead to completion on an
    uninitialized command entry.
    
    Setting MLX5_CMD_ENT_STATE_PENDING_COMP only after command entry is
    initialized will ensure force completion is treated only if command
    entry is initialized.
    
    Fixes: 73dd3a4839c1 ("net/mlx5: Avoid using pending command interface slots")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b821138a30fcc4a9ddef228774fd3615d2cc40a8
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Apr 26 16:24:42 2020 -0400

    bnxt_en: Fix VLAN acceleration handling in bnxt_fix_features().
    
    [ Upstream commit c72cb303aa6c2ae7e4184f0081c6d11bf03fb96b ]
    
    The current logic in bnxt_fix_features() will inadvertently turn on both
    CTAG and STAG VLAN offload if the user tries to disable both.  Fix it
    by checking that the user is trying to enable CTAG or STAG before
    enabling both.  The logic is supposed to enable or disable both CTAG and
    STAG together.
    
    Fixes: 5a9f6b238e59 ("bnxt_en: Enable and disable RX CTAG and RX STAG VLAN acceleration together.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6233f3119c2bad7697938ee345ead8f321839009
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon May 4 11:15:54 2020 +0700

    tipc: fix partial topology connection closure
    
    [ Upstream commit 980d69276f3048af43a045be2925dacfb898a7be ]
    
    When an application connects to the TIPC topology server and subscribes
    to some services, a new connection is created along with some objects -
    'tipc_subscription' to store related data correspondingly...
    However, there is one omission in the connection handling that when the
    connection or application is orderly shutdown (e.g. via SIGQUIT, etc.),
    the connection is not closed in kernel, the 'tipc_subscription' objects
    are not freed too.
    This results in:
    - The maximum number of subscriptions (65535) will be reached soon, new
    subscriptions will be rejected;
    - TIPC module cannot be removed (unless the objects  are somehow forced
    to release first);
    
    The commit fixes the issue by closing the connection if the 'recvmsg()'
    returns '0' i.e. when the peer is shutdown gracefully. It also includes
    the other unexpected cases.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdacfbb66f96d77e9ceb394ce9a12551ae63d67c
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 26 18:19:07 2020 -0700

    sch_sfq: validate silly quantum values
    
    [ Upstream commit df4953e4e997e273501339f607b77953772e3559 ]
    
    syzbot managed to set up sfq so that q->scaled_quantum was zero,
    triggering an infinite loop in sfq_dequeue()
    
    More generally, we must only accept quantum between 1 and 2^18 - 7,
    meaning scaled_quantum must be in [1, 0x7FFF] range.
    
    Otherwise, we also could have a loop in sfq_dequeue()
    if scaled_quantum happens to be 0x8000, since slot->allot
    could indefinitely switch between 0 and 0x8000.
    
    Fixes: eeaeb068f139 ("sch_sfq: allow big packets and be fair")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+0251e883fe39e7a0cb0a@syzkaller.appspotmail.com
    Cc: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a67503a5a1cef0225e4f223d5f90c2ffc7cfc3b
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 15:19:51 2020 -0700

    sch_choke: avoid potential panic in choke_reset()
    
    [ Upstream commit 8738c85c72b3108c9b9a369a39868ba5f8e10ae0 ]
    
    If choke_init() could not allocate q->tab, we would crash later
    in choke_reset().
    
    BUG: KASAN: null-ptr-deref in memset include/linux/string.h:366 [inline]
    BUG: KASAN: null-ptr-deref in choke_reset+0x208/0x340 net/sched/sch_choke.c:326
    Write of size 8 at addr 0000000000000000 by task syz-executor822/7022
    
    CPU: 1 PID: 7022 Comm: syz-executor822 Not tainted 5.7.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     __kasan_report.cold+0x5/0x4d mm/kasan/report.c:515
     kasan_report+0x33/0x50 mm/kasan/common.c:625
     check_memory_region_inline mm/kasan/generic.c:187 [inline]
     check_memory_region+0x141/0x190 mm/kasan/generic.c:193
     memset+0x20/0x40 mm/kasan/common.c:85
     memset include/linux/string.h:366 [inline]
     choke_reset+0x208/0x340 net/sched/sch_choke.c:326
     qdisc_reset+0x6b/0x520 net/sched/sch_generic.c:910
     dev_deactivate_queue.constprop.0+0x13c/0x240 net/sched/sch_generic.c:1138
     netdev_for_each_tx_queue include/linux/netdevice.h:2197 [inline]
     dev_deactivate_many+0xe2/0xba0 net/sched/sch_generic.c:1195
     dev_deactivate+0xf8/0x1c0 net/sched/sch_generic.c:1233
     qdisc_graft+0xd25/0x1120 net/sched/sch_api.c:1051
     tc_modify_qdisc+0xbab/0x1a00 net/sched/sch_api.c:1670
     rtnetlink_rcv_msg+0x44e/0xad0 net/core/rtnetlink.c:5454
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
    
    Fixes: 77e62da6e60c ("sch_choke: drop all packets in queue during reset")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80cd2d3a3fae11160d91e92e41b4055a95d7adaf
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:52:28 2020 +1000

    net: usb: qmi_wwan: add support for DW5816e
    
    [ Upstream commit 57c7f2bd758eed867295c81d3527fff4fab1ed74 ]
    
    Add support for Dell Wireless 5816e to drivers/net/usb/qmi_wwan.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37e33f51a81677bad469294903fbdc812b4ae0c6
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat May 2 20:09:25 2020 -0700

    net_sched: sch_skbprio: add message validation to skbprio_change()
    
    [ Upstream commit 2761121af87de45951989a0adada917837d8fa82 ]
    
    Do not assume the attribute has the right size.
    
    Fixes: aea5f654e6b7 ("net/sched: add skbprio scheduler")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b350c15a291bb08c81c30bf949056d64a4ca1a8f
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon May 4 11:36:02 2020 +0300

    net/mlx4_core: Fix use of ENOSPC around mlx4_counter_alloc()
    
    [ Upstream commit 40e473071dbad04316ddc3613c3a3d1c75458299 ]
    
    When ENOSPC is set the idx is still valid and gets set to the global
    MLX4_SINK_COUNTER_INDEX.  However gcc's static analysis cannot tell that
    ENOSPC is impossible from mlx4_cmd_imm() and gives this warning:
    
    drivers/net/ethernet/mellanox/mlx4/main.c:2552:28: warning: 'idx' may be
    used uninitialized in this function [-Wmaybe-uninitialized]
     2552 |    priv->def_counter[port] = idx;
    
    Also, when ENOSPC is returned mlx4_allocate_default_counters should not
    fail.
    
    Fixes: 6de5f7f6a1fa ("net/mlx4_core: Allocate default counter per port")
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0899ff04c872463455f2749d13a5d311338021a3
Author: Scott Dial <scott@scottdial.com>
Date:   Fri Apr 24 18:51:08 2020 -0400

    net: macsec: preserve ingress frame ordering
    
    [ Upstream commit ab046a5d4be4c90a3952a0eae75617b49c0cb01b ]
    
    MACsec decryption always occurs in a softirq context. Since
    the FPU may not be usable in the softirq context, the call to
    decrypt may be scheduled on the cryptd work queue. The cryptd
    work queue does not provide ordering guarantees. Therefore,
    preserving order requires masking out ASYNC implementations
    of gcm(aes).
    
    For instance, an Intel CPU with AES-NI makes available the
    generic-gcm-aesni driver from the aesni_intel module to
    implement gcm(aes). However, this implementation requires
    the FPU, so it is not always available to use from a softirq
    context, and will fallback to the cryptd work queue, which
    does not preserve frame ordering. With this change, such a
    system would select gcm_base(ctr(aes-aesni),ghash-generic).
    While the aes-aesni implementation prefers to use the FPU, it
    will fallback to the aes-asm implementation if unavailable.
    
    By using a synchronous version of gcm(aes), the decryption
    will complete before returning from crypto_aead_decrypt().
    Therefore, the macsec_decrypt_done() callback will be called
    before returning from macsec_decrypt(). Thus, the order of
    calls to macsec_post_decrypt() for the frames is preserved.
    
    While it's presumable that the pure AES-NI version of gcm(aes)
    is more performant, the hybrid solution is capable of gigabit
    speeds on modest hardware. Regardless, preserving the order
    of frames is paramount for many network protocols (e.g.,
    triggering TCP retries). Within the MACsec driver itself, the
    replay protection is tripped by the out-of-order frames, and
    can cause frames to be dropped.
    
    This bug has been present in this code since it was added in
    v4.6, however it may not have been noticed since not all CPUs
    have FPU offload available. Additionally, the bug manifests
    as occasional out-of-order packets that are easily
    misattributed to other network phenomena.
    
    When this code was added in v4.6, the crypto/gcm.c code did
    not restrict selection of the ghash function based on the
    ASYNC flag. For instance, x86 CPUs with PCLMULQDQ would
    select the ghash-clmulni driver instead of ghash-generic,
    which submits to the cryptd work queue if the FPU is busy.
    However, this bug was was corrected in v4.8 by commit
    b30bdfa86431afbafe15284a3ad5ac19b49b88e3, and was backported
    all the way back to the v3.14 stable branch, so this patch
    should be applicable back to the v4.6 stable branch.
    
    Signed-off-by: Scott Dial <scott@scottdial.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d10f7717357dd5397878660af04aae3efe258e13
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 25 12:40:25 2020 -0700

    fq_codel: fix TCA_FQ_CODEL_DROP_BATCH_SIZE sanity checks
    
    [ Upstream commit 14695212d4cd8b0c997f6121b6df8520038ce076 ]
    
    My intent was to not let users set a zero drop_batch_size,
    it seems I once again messed with min()/max().
    
    Fixes: 9d18562a2278 ("fq_codel: add batch ability to fq_codel_drop()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9667042cbe58c57b41b66499de2149d41d249486
Author: Julia Lawall <Julia.Lawall@inria.fr>
Date:   Thu Apr 30 21:51:32 2020 +0200

    dp83640: reverse arguments to list_add_tail
    
    [ Upstream commit 865308373ed49c9fb05720d14cbf1315349b32a9 ]
    
    In this code, it appears that phyter_clocks is a list head, based on
    the previous list_for_each, and that clock->list is intended to be a
    list element, given that it has just been initialized in
    dp83640_clock_init.  Accordingly, switch the arguments to
    list_add_tail, which takes the list head as the second argument.
    
    Fixes: cb646e2b02b27 ("ptp: Added a clock driver for the National Semiconductor PHYTER.")
    Signed-off-by: Julia Lawall <Julia.Lawall@inria.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3da2984a40b2628d43a0b380e9b24d6fb74a76e
Author: Nicolas Pitre <nico@fluxnic.net>
Date:   Sat May 2 11:01:07 2020 -0400

    vt: fix unicode console freeing with a common interface
    
    [ Upstream commit 57d38f26d81e4275748b69372f31df545dcd9b71 ]
    
    By directly using kfree() in different places we risk missing one if
    it is switched to using vfree(), especially if the corresponding
    vmalloc() is hidden away within a common abstraction.
    
    Oh wait, that's exactly what happened here.
    
    So let's fix this by creating a common abstraction for the free case
    as well.
    
    Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
    Reported-by: syzbot+0bfda3ade1ee9288a1be@syzkaller.appspotmail.com
    Fixes: 9a98e7a80f95 ("vt: don't use kmalloc() for the unicode screen buffer")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://lore.kernel.org/r/nycvar.YSQ.7.76.2005021043110.2671@knanqh.ubzr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84a50dc4710fe40c2190ed74dc4eaa0241ef8c7a
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Apr 25 14:49:09 2020 +0900

    tracing/kprobes: Fix a double initialization typo
    
    [ Upstream commit dcbd21c9fca5e954fd4e3d91884907eb6d47187e ]
    
    Fix a typo that resulted in an unnecessary double
    initialization to addr.
    
    Link: http://lkml.kernel.org/r/158779374968.6082.2337484008464939919.stgit@devnote2
    
    Cc: Tom Zanussi <zanussi@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: c7411a1a126f ("tracing/kprobe: Check whether the non-suffixed symbol is notrace")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc441be4e890c234cce4b8fe9e4291230cd7e3e9
Author: Matt Jolly <Kangie@footclan.ninja>
Date:   Sun May 3 01:03:47 2020 +1000

    USB: serial: qcserial: Add DW5816e support
    
    commit 78d6de3cfbd342918d31cf68d0d2eda401338aef upstream.
    
    Add support for Dell Wireless 5816e to drivers/usb/serial/qcserial.c
    
    Signed-off-by: Matt Jolly <Kangie@footclan.ninja>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
