commit aea8526edf59da3ff5306ca408e13d8f6ab89b34
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 10 09:54:43 2019 +0200

    Linux 4.14.133

commit c875ac0a4339fb80e7c030b387c6be8c62e0f239
Author: Stanislaw Gruszka <sgruszka@redhat.com>
Date:   Mon Jul 8 14:01:34 2019 +0200

    stable/btrfs: fix backport bug in d819d97ea025 ("btrfs: honor path->skip_locking in backref code")
    
    Upstream commit 38e3eebff643 ("btrfs: honor path->skip_locking in
    backref code") was incorrectly backported to 4.14.y . It misses removal
    of two lines from original commit, what cause deadlock.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203993
    Reported-by: Olivier Mazouffre <olivier.mazouffre@ims-bordeaux.fr>
    Fixes: d819d97ea025 ("btrfs: honor path->skip_locking in backref code")
    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93ca6e2019f22098cac5a22b5042b096e1e3d506
Author: Robin Gong <yibin.gong@nxp.com>
Date:   Fri Jun 21 16:23:06 2019 +0800

    dmaengine: imx-sdma: remove BD_INTR for channel0
    
    commit 3f93a4f297961c12bb17aa16cb3a4d1291823cae upstream.
    
    It is possible for an irq triggered by channel0 to be received later
    after clks are disabled once firmware loaded during sdma probe. If
    that happens then clearing them by writing to SDMA_H_INTR won't work
    and the kernel will hang processing infinite interrupts. Actually,
    don't need interrupt triggered on channel0 since it's pollling
    SDMA_H_STATSTOP to know channel0 done rather than interrupt in
    current code, just clear BD_INTR to disable channel0 interrupt to
    avoid the above case.
    This issue was brought by commit 1d069bfa3c78 ("dmaengine: imx-sdma:
    ack channel 0 IRQ in the interrupt handler") which didn't take care
    the above case.
    
    Fixes: 1d069bfa3c78 ("dmaengine: imx-sdma: ack channel 0 IRQ in the interrupt handler")
    Cc: stable@vger.kernel.org #5.0+
    Signed-off-by: Robin Gong <yibin.gong@nxp.com>
    Reported-by: Sven Van Asbroeck <thesven73@gmail.com>
    Tested-by: Sven Van Asbroeck <thesven73@gmail.com>
    Reviewed-by: Michael Olbrich <m.olbrich@pengutronix.de>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 377bea40904ed4b21795f1c2613eccf62efdba39
Author: Dmitry Korotin <dkorotin@wavecomp.com>
Date:   Mon Jun 24 19:05:27 2019 +0000

    MIPS: Add missing EHB in mtc0 -> mfc0 sequence.
    
    commit 0b24cae4d535045f4c9e177aa228d4e97bad212c upstream.
    
    Add a missing EHB (Execution Hazard Barrier) in mtc0 -> mfc0 sequence.
    Without this execution hazard barrier it's possible for the value read
    back from the KScratch register to be the value from before the mtc0.
    
    Reproducible on P5600 & P6600.
    
    The hazard is documented in the MIPS Architecture Reference Manual Vol.
    III: MIPS32/microMIPS32 Privileged Resource Architecture (MD00088), rev
    6.03 table 8.1 which includes:
    
       Producer | Consumer | Hazard
      ----------|----------|----------------------------
       mtc0     | mfc0     | any coprocessor 0 register
    
    Signed-off-by: Dmitry Korotin <dkorotin@wavecomp.com>
    [paul.burton@mips.com:
      - Commit message tweaks.
      - Add Fixes tags.
      - Mark for stable back to v3.15 where P5600 support was introduced.]
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 3d8bfdd03072 ("MIPS: Use C0_KScratch (if present) to hold PGD pointer.")
    Fixes: 829dcc0a956a ("MIPS: Add MIPS P5600 probe support")
    Cc: linux-mips@vger.kernel.org
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e9c43e0dd3879ee7213cc4ce3bda3e3d61a42ad
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Mon Jun 17 00:30:39 2019 +0200

    MIPS: Fix bounds check virt_addr_valid
    
    commit d6ed083f5cc621e15c15b56c3b585fd524dbcb0f upstream.
    
    The bounds check used the uninitialized variable vaddr, it should use
    the given parameter kaddr instead. When using the uninitialized value
    the compiler assumed it to be 0 and optimized this function to just
    return 0 in all cases.
    
    This should make the function check the range of the given address and
    only do the page map check in case it is in the expected range of
    virtual addresses.
    
    Fixes: 074a1e1167af ("MIPS: Bounds check virt_addr_valid")
    Cc: stable@vger.kernel.org # v4.12+
    Cc: Paul Burton <paul.burton@mips.com>
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: ralf@linux-mips.org
    Cc: jhogan@kernel.org
    Cc: f4bug@amsat.org
    Cc: linux-mips@vger.kernel.org
    Cc: ysu@wavecomp.com
    Cc: jcristau@debian.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44b14046835bd8da66e96e610ece34c7f13cab1c
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Tue Jun 11 11:01:16 2019 -0400

    svcrdma: Ignore source port when computing DRC hash
    
    commit 1e091c3bbf51d34d5d96337a59ce5ab2ac3ba2cc upstream.
    
    The DRC appears to be effectively empty after an RPC/RDMA transport
    reconnect. The problem is that each connection uses a different
    source port, which defeats the DRC hash.
    
    Clients always have to disconnect before they send retransmissions
    to reset the connection's credit accounting, thus every retransmit
    on NFS/RDMA will miss the DRC.
    
    An NFS/RDMA client's IP source port is meaningless for RDMA
    transports. The transport layer typically sets the source port value
    on the connection to a random ephemeral port. The server already
    ignores it for the "secure port" check. See commit 16e4d93f6de7
    ("NFSD: Ignore client's source port on RDMA transports").
    
    The Linux NFS server's DRC resolves XID collisions from the same
    source IP address by using the checksum of the first 200 bytes of
    the RPC call header.
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd8819530dd5006b9cbe14f11ece53b2c94f3eb
Author: Wanpeng Li <wanpengli@tencent.com>
Date:   Tue Jul 2 17:25:02 2019 +0800

    KVM: LAPIC: Fix pending interrupt in IRR blocked by software disable LAPIC
    
    commit bb34e690e9340bc155ebed5a3d75fc63ff69e082 upstream.
    
    Thomas reported that:
    
     | Background:
     |
     |    In preparation of supporting IPI shorthands I changed the CPU offline
     |    code to software disable the local APIC instead of just masking it.
     |    That's done by clearing the APIC_SPIV_APIC_ENABLED bit in the APIC_SPIV
     |    register.
     |
     | Failure:
     |
     |    When the CPU comes back online the startup code triggers occasionally
     |    the warning in apic_pending_intr_clear(). That complains that the IRRs
     |    are not empty.
     |
     |    The offending vector is the local APIC timer vector who's IRR bit is set
     |    and stays set.
     |
     | It took me quite some time to reproduce the issue locally, but now I can
     | see what happens.
     |
     | It requires apicv_enabled=0, i.e. full apic emulation. With apicv_enabled=1
     | (and hardware support) it behaves correctly.
     |
     | Here is the series of events:
     |
     |     Guest CPU
     |
     |     goes down
     |
     |       native_cpu_disable()
     |
     |                      apic_soft_disable();
     |
     |     play_dead()
     |
     |     ....
     |
     |     startup()
     |
     |       if (apic_enabled())
     |         apic_pending_intr_clear()    <- Not taken
     |
     |      enable APIC
     |
     |         apic_pending_intr_clear()    <- Triggers warning because IRR is stale
     |
     | When this happens then the deadline timer or the regular APIC timer -
     | happens with both, has fired shortly before the APIC is disabled, but the
     | interrupt was not serviced because the guest CPU was in an interrupt
     | disabled region at that point.
     |
     | The state of the timer vector ISR/IRR bits:
     |
     |                              ISR     IRR
     | before apic_soft_disable()    0            1
     | after apic_soft_disable()     0            1
     |
     | On startup                            0            1
     |
     | Now one would assume that the IRR is cleared after the INIT reset, but this
     | happens only on CPU0.
     |
     | Why?
     |
     | Because our CPU0 hotplug is just for testing to make sure nothing breaks
     | and goes through an NMI wakeup vehicle because INIT would send it through
     | the boots-trap code which is not really working if that CPU was not
     | physically unplugged.
     |
     | Now looking at a real world APIC the situation in that case is:
     |
     |                              ISR     IRR
     | before apic_soft_disable()    0            1
     | after apic_soft_disable()     0            1
     |
     | On startup                            0            0
     |
     | Why?
     |
     | Once the dying CPU reenables interrupts the pending interrupt gets
     | delivered as a spurious interupt and then the state is clear.
     |
     | While that CPU0 hotplug test case is surely an esoteric issue, the APIC
     | emulation is still wrong, Even if the play_dead() code would not enable
     | interrupts then the pending IRR bit would turn into an ISR .. interrupt
     | when the APIC is reenabled on startup.
    
    From SDM 10.4.7.2 Local APIC State After It Has Been Software Disabled
    * Pending interrupts in the IRR and ISR registers are held and require
      masking or handling by the CPU.
    
    In Thomas's testing, hardware cpu will not respect soft disable LAPIC
    when IRR has already been set or APICv posted-interrupt is in flight,
    so we can skip soft disable APIC checking when clearing IRR and set ISR,
    continue to respect soft disable APIC when attempting to set IRR.
    
    Reported-by: Rong Chen <rong.a.chen@intel.com>
    Reported-by: Feng Tang <feng.tang@intel.com>
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Rong Chen <rong.a.chen@intel.com>
    Cc: Feng Tang <feng.tang@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b90c9801c063f6d500bd20ba9a60b127b888e2d
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 26 14:16:13 2019 +0200

    KVM: x86: degrade WARN to pr_warn_ratelimited
    
    commit 3f16a5c318392cbb5a0c7a3d19dff8c8ef3c38ee upstream.
    
    This warning can be triggered easily by userspace, so it should certainly not
    cause a panic if panic_on_warn is set.
    
    Reported-by: syzbot+c03f30b4f4c46bdf8575@syzkaller.appspotmail.com
    Suggested-by: Alexander Potapenko <glider@google.com>
    Acked-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b851f87ba20ee8825af227f846feee85856a1ec
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Dec 8 08:45:57 2017 -0800

    ARC: handle gcc generated __builtin_trap for older compiler
    
    commit af1be2e21203867cb958aaceed5366e2e24b88e8 upstream.
    
    ARC gcc prior to GNU 2018.03 release didn't have a target specific
    __builtin_trap() implementation, generating default abort() call.
    
    Implement the abort() call - emulating what newer gcc does for the same,
    as suggested by Arnd.
    
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a18b808faf19aebc3ed303ce91ebc31b4519824
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 6 11:28:23 2019 -0700

    tty: rocket: fix incorrect forward declaration of 'rp_init()'
    
    [ Upstream commit 423ea3255424b954947d167681b71ded1b8fca53 ]
    
    Make the forward declaration actually match the real function
    definition, something that previous versions of gcc had just ignored.
    
    This is another patch to fix new warnings from gcc-9 before I start the
    merge window pulls.  I don't want to miss legitimate new warnings just
    because my system update brought a new compiler with new warnings.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 011942d12cc28c58fdeb2ca77e745c4c370fc250
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri May 17 00:29:52 2019 -0400

    vhost: scsi: add weight support
    
    commit c1ea02f15ab5efb3e93fc3144d895410bf79fcf2 upstream.
    
    This patch will check the weight and exit the loop if we exceeds the
    weight. This is useful for preventing scsi kthread from hogging cpu
    which is guest triggerable.
    
    This addresses CVE-2019-3900.
    
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Stefan Hajnoczi <stefanha@redhat.com>
    Fixes: 057cbf49a1f0 ("tcm_vhost: Initial merge for vhost level target fabric driver")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46c7fce709dccb4b0e4a5a06bfacdf2bb1a4fc43
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri May 17 00:29:51 2019 -0400

    vhost: vsock: add weight support
    
    commit e79b431fb901ba1106670bcc80b9b617b25def7d upstream.
    
    This patch will check the weight and exit the loop if we exceeds the
    weight. This is useful for preventing vsock kthread from hogging cpu
    which is guest triggerable. The weight can help to avoid starving the
    request from on direction while another direction is being processed.
    
    The value of weight is picked from vhost-net.
    
    This addresses CVE-2019-3900.
    
    Cc: Stefan Hajnoczi <stefanha@redhat.com>
    Fixes: 433fc58e6bf2 ("VSOCK: Introduce vhost_vsock.ko")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae446749492d8bd23f1d0b81adba16e5739dc740
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri May 17 00:29:50 2019 -0400

    vhost_net: fix possible infinite loop
    
    commit e2412c07f8f3040593dfb88207865a3cd58680c0 upstream.
    
    When the rx buffer is too small for a packet, we will discard the vq
    descriptor and retry it for the next packet:
    
    while ((sock_len = vhost_net_rx_peek_head_len(net, sock->sk,
                                                  &busyloop_intr))) {
    ...
            /* On overrun, truncate and discard */
            if (unlikely(headcount > UIO_MAXIOV)) {
                    iov_iter_init(&msg.msg_iter, READ, vq->iov, 1, 1);
                    err = sock->ops->recvmsg(sock, &msg,
                                             1, MSG_DONTWAIT | MSG_TRUNC);
                    pr_debug("Discarded rx packet: len %zd\n", sock_len);
                    continue;
            }
    ...
    }
    
    This makes it possible to trigger a infinite while..continue loop
    through the co-opreation of two VMs like:
    
    1) Malicious VM1 allocate 1 byte rx buffer and try to slow down the
       vhost process as much as possible e.g using indirect descriptors or
       other.
    2) Malicious VM2 generate packets to VM1 as fast as possible
    
    Fixing this by checking against weight at the end of RX and TX
    loop. This also eliminate other similar cases when:
    
    - userspace is consuming the packets in the meanwhile
    - theoretical TOCTOU attack if guest moving avail index back and forth
      to hit the continue after vhost find guest just add new buffers
    
    This addresses CVE-2019-3900.
    
    Fixes: d8316f3991d20 ("vhost: fix total length when packets are too short")
    Fixes: 3a4d5c94e9593 ("vhost_net: a kernel-level virtio server")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>

commit c051fb9788281fa308ef614a7317f7fabadb8363
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri May 17 00:29:49 2019 -0400

    vhost: introduce vhost_exceeds_weight()
    
    commit e82b9b0727ff6d665fff2d326162b460dded554d upstream.
    
    We used to have vhost_exceeds_weight() for vhost-net to:
    
    - prevent vhost kthread from hogging the cpu
    - balance the time spent between TX and RX
    
    This function could be useful for vsock and scsi as well. So move it
    to vhost.c. Device must specify a weight which counts the number of
    requests, or it can also specific a byte_weight which counts the
    number of bytes that has been processed.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c4e518f1e46669558bafe6a02d9bfb078de09bd
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri Jul 20 08:15:15 2018 +0800

    vhost_net: introduce vhost_exceeds_weight()
    
    commit 272f35cba53d088085e5952fd81d7a133ab90789 upstream.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amzn.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9dac4ca993fbdd4e0992638b6cd9a8b1ce06db1
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Apr 24 10:34:36 2018 +0200

    vhost_net: use packet weight for rx handler, too
    
    commit db688c24eada63b1efe6d0d7d835e5c3bdd71fd3 upstream.
    
    Similar to commit a2ac99905f1e ("vhost-net: set packet weight of
    tx polling to 2 * vq size"), we need a packet-based limit for
    handler_rx, too - elsewhere, under rx flood with small packets,
    tx can be delayed for a very long time, even without busypolling.
    
    The pkt limit applied to handle_rx must be the same applied by
    handle_tx, or we will get unfair scheduling between rx and tx.
    Tying such limit to the queue length makes it less effective for
    large queue length values and can introduce large process
    scheduler latencies, so a constant valued is used - likewise
    the existing bytes limit.
    
    The selected limit has been validated with PVP[1] performance
    test with different queue sizes:
    
    queue size              256     512     1024
    
    baseline                366     354     362
    weight 128              715     723     670
    weight 256              740     745     733
    weight 512              600     460     583
    weight 1024             423     427     418
    
    A packet weight of 256 gives peek performances in under all the
    tested scenarios.
    
    No measurable regression in unidirectional performance tests has
    been detected.
    
    [1] https://developers.redhat.com/blog/2017/06/05/measuring-and-comparing-open-vswitch-performance/
    
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6416172c9408fad722a95c934cf0c6ef6fd1f19c
Author: haibinzhang(张海斌) <haibinzhang@tencent.com>
Date:   Mon Apr 9 07:22:17 2018 +0000

    vhost-net: set packet weight of tx polling to 2 * vq size
    
    commit a2ac99905f1ea8b15997a6ec39af69aa28a3653b upstream.
    
    handle_tx will delay rx for tens or even hundreds of milliseconds when tx busy
    polling udp packets with small length(e.g. 1byte udp payload), because setting
    VHOST_NET_WEIGHT takes into account only sent-bytes but no single packet length.
    
    Ping-Latencies shown below were tested between two Virtual Machines using
    netperf (UDP_STREAM, len=1), and then another machine pinged the client:
    
    vq size=256
    Packet-Weight   Ping-Latencies(millisecond)
                       min      avg       max
    Origin           3.319   18.489    57.303
    64               1.643    2.021     2.552
    128              1.825    2.600     3.224
    256              1.997    2.710     4.295
    512              1.860    3.171     4.631
    1024             2.002    4.173     9.056
    2048             2.257    5.650     9.688
    4096             2.093    8.508    15.943
    
    vq size=512
    Packet-Weight   Ping-Latencies(millisecond)
                       min      avg       max
    Origin           6.537   29.177    66.245
    64               2.798    3.614     4.403
    128              2.861    3.820     4.775
    256              3.008    4.018     4.807
    512              3.254    4.523     5.824
    1024             3.079    5.335     7.747
    2048             3.944    8.201    12.762
    4096             4.158   11.057    19.985
    
    Seems pretty consistent, a small dip at 2 VQ sizes.
    Ring size is a hint from device about a burst size it can tolerate. Based on
    benchmarks, set the weight to 2 * vq size.
    
    To evaluate this change, another tests were done using netperf(RR, TX) between
    two machines with Intel(R) Xeon(R) Gold 6133 CPU @ 2.50GHz, and vq size was
    tweaked through qemu. Results shown below does not show obvious changes.
    
    vq size=256 TCP_RR                vq size=512 TCP_RR
    size/sessions/+thu%/+normalize%   size/sessions/+thu%/+normalize%
       1/       1/  -7%/        -2%      1/       1/   0%/        -2%
       1/       4/  +1%/         0%      1/       4/  +1%/         0%
       1/       8/  +1%/        -2%      1/       8/   0%/        +1%
      64/       1/  -6%/         0%     64/       1/  +7%/        +3%
      64/       4/   0%/        +2%     64/       4/  -1%/        +1%
      64/       8/   0%/         0%     64/       8/  -1%/        -2%
     256/       1/  -3%/        -4%    256/       1/  -4%/        -2%
     256/       4/  +3%/        +4%    256/       4/  +1%/        +2%
     256/       8/  +2%/         0%    256/       8/  +1%/        -1%
    
    vq size=256 UDP_RR                vq size=512 UDP_RR
    size/sessions/+thu%/+normalize%   size/sessions/+thu%/+normalize%
       1/       1/  -5%/        +1%      1/       1/  -3%/        -2%
       1/       4/  +4%/        +1%      1/       4/  -2%/        +2%
       1/       8/  -1%/        -1%      1/       8/  -1%/         0%
      64/       1/  -2%/        -3%     64/       1/  +1%/        +1%
      64/       4/  -5%/        -1%     64/       4/  +2%/         0%
      64/       8/   0%/        -1%     64/       8/  -2%/        +1%
     256/       1/  +7%/        +1%    256/       1/  -7%/         0%
     256/       4/  +1%/        +1%    256/       4/  -3%/        -4%
     256/       8/  +2%/        +2%    256/       8/  +1%/        +1%
    
    vq size=256 TCP_STREAM            vq size=512 TCP_STREAM
    size/sessions/+thu%/+normalize%   size/sessions/+thu%/+normalize%
      64/       1/   0%/        -3%     64/       1/   0%/         0%
      64/       4/  +3%/        -1%     64/       4/  -2%/        +4%
      64/       8/  +9%/        -4%     64/       8/  -1%/        +2%
     256/       1/  +1%/        -4%    256/       1/  +1%/        +1%
     256/       4/  -1%/        -1%    256/       4/  -3%/         0%
     256/       8/  +7%/        +5%    256/       8/  -3%/         0%
     512/       1/  +1%/         0%    512/       1/  -1%/        -1%
     512/       4/  +1%/        -1%    512/       4/   0%/         0%
     512/       8/  +7%/        -5%    512/       8/  +6%/        -1%
    1024/       1/   0%/        -1%   1024/       1/   0%/        +1%
    1024/       4/  +3%/         0%   1024/       4/  +1%/         0%
    1024/       8/  +8%/        +5%   1024/       8/  -1%/         0%
    2048/       1/  +2%/        +2%   2048/       1/  -1%/         0%
    2048/       4/  +1%/         0%   2048/       4/   0%/        -1%
    2048/       8/  -2%/         0%   2048/       8/   5%/        -1%
    4096/       1/  -2%/         0%   4096/       1/  -2%/         0%
    4096/       4/  +2%/         0%   4096/       4/   0%/         0%
    4096/       8/  +9%/        -2%   4096/       8/  -5%/        -1%
    
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Haibin Zhang <haibinzhang@tencent.com>
    Signed-off-by: Yunfang Tai <yunfangtai@tencent.com>
    Signed-off-by: Lidong Chen <lidongchen@tencent.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Balbir Singh <sblbir@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7e678f2414724592067365a44684e9b18cf4d2d
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Fri May 17 10:44:25 2019 +0300

    btrfs: Ensure replaced device doesn't have pending chunk allocation
    
    commit debd1c065d2037919a7da67baf55cc683fee09f0 upstream.
    
    Recent FITRIM work, namely bbbf7243d62d ("btrfs: combine device update
    operations during transaction commit") combined the way certain
    operations are recoded in a transaction. As a result an ASSERT was added
    in dev_replace_finish to ensure the new code works correctly.
    Unfortunately I got reports that it's possible to trigger the assert,
    meaning that during a device replace it's possible to have an unfinished
    chunk allocation on the source device.
    
    This is supposed to be prevented by the fact that a transaction is
    committed before finishing the replace oepration and alter acquiring the
    chunk mutex. This is not sufficient since by the time the transaction is
    committed and the chunk mutex acquired it's possible to allocate a chunk
    depending on the workload being executed on the replaced device. This
    bug has been present ever since device replace was introduced but there
    was never code which checks for it.
    
    The correct way to fix is to ensure that there is no pending device
    modification operation when the chunk mutex is acquire and if there is
    repeat transaction commit. Unfortunately it's not possible to just
    exclude the source device from btrfs_fs_devices::dev_alloc_list since
    this causes ENOSPC to be hit in transaction commit.
    
    Fixing that in another way would need to add special cases to handle the
    last writes and forbid new ones. The looped transaction fix is more
    obvious, and can be easily backported. The runtime of dev-replace is
    long so there's no noticeable delay caused by that.
    
    Reported-by: David Sterba <dsterba@suse.com>
    Fixes: 391cd9df81ac ("Btrfs: fix unprotected alloc list insertion during the finishing procedure of replace")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 584810d3a02b6d9e5cd119d8e2048ea0112374da
Author: Shakeel Butt <shakeelb@google.com>
Date:   Thu Jul 4 15:14:42 2019 -0700

    mm/vmscan.c: prevent useless kswapd loops
    
    commit dffcac2cb88e4ec5906235d64a83d802580b119e upstream.
    
    In production we have noticed hard lockups on large machines running
    large jobs due to kswaps hoarding lru lock within isolate_lru_pages when
    sc->reclaim_idx is 0 which is a small zone.  The lru was couple hundred
    GiBs and the condition (page_zonenum(page) > sc->reclaim_idx) in
    isolate_lru_pages() was basically skipping GiBs of pages while holding
    the LRU spinlock with interrupt disabled.
    
    On further inspection, it seems like there are two issues:
    
    (1) If kswapd on the return from balance_pgdat() could not sleep (i.e.
        node is still unbalanced), the classzone_idx is unintentionally set
        to 0 and the whole reclaim cycle of kswapd will try to reclaim only
        the lowest and smallest zone while traversing the whole memory.
    
    (2) Fundamentally isolate_lru_pages() is really bad when the
        allocation has woken kswapd for a smaller zone on a very large machine
        running very large jobs.  It can hoard the LRU spinlock while skipping
        over 100s of GiBs of pages.
    
    This patch only fixes (1).  (2) needs a more fundamental solution.  To
    fix (1), in the kswapd context, if pgdat->kswapd_classzone_idx is
    invalid use the classzone_idx of the previous kswapd loop otherwise use
    the one the waker has requested.
    
    Link: http://lkml.kernel.org/r/20190701201847.251028-1-shakeelb@google.com
    Fixes: e716f2eb24de ("mm, vmscan: prevent kswapd sleeping prematurely due to mismatched classzone_idx")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Yang Shi <yang.shi@linux.alibaba.com>
    Acked-by: Mel Gorman <mgorman@techsingularity.net>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Roman Gushchin <guro@fb.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c0b54770189bde179b7fc55d4524f4ead20c3ee
Author: Petr Mladek <pmladek@suse.com>
Date:   Thu Jun 27 10:13:34 2019 +0200

    ftrace/x86: Remove possible deadlock between register_kprobe() and ftrace_run_update_code()
    
    commit d5b844a2cf507fc7642c9ae80a9d585db3065c28 upstream.
    
    The commit 9f255b632bf12c4dd7 ("module: Fix livepatch/ftrace module text
    permissions race") causes a possible deadlock between register_kprobe()
    and ftrace_run_update_code() when ftrace is using stop_machine().
    
    The existing dependency chain (in reverse order) is:
    
    -> #1 (text_mutex){+.+.}:
           validate_chain.isra.21+0xb32/0xd70
           __lock_acquire+0x4b8/0x928
           lock_acquire+0x102/0x230
           __mutex_lock+0x88/0x908
           mutex_lock_nested+0x32/0x40
           register_kprobe+0x254/0x658
           init_kprobes+0x11a/0x168
           do_one_initcall+0x70/0x318
           kernel_init_freeable+0x456/0x508
           kernel_init+0x22/0x150
           ret_from_fork+0x30/0x34
           kernel_thread_starter+0x0/0xc
    
    -> #0 (cpu_hotplug_lock.rw_sem){++++}:
           check_prev_add+0x90c/0xde0
           validate_chain.isra.21+0xb32/0xd70
           __lock_acquire+0x4b8/0x928
           lock_acquire+0x102/0x230
           cpus_read_lock+0x62/0xd0
           stop_machine+0x2e/0x60
           arch_ftrace_update_code+0x2e/0x40
           ftrace_run_update_code+0x40/0xa0
           ftrace_startup+0xb2/0x168
           register_ftrace_function+0x64/0x88
           klp_patch_object+0x1a2/0x290
           klp_enable_patch+0x554/0x980
           do_one_initcall+0x70/0x318
           do_init_module+0x6e/0x250
           load_module+0x1782/0x1990
           __s390x_sys_finit_module+0xaa/0xf0
           system_call+0xd8/0x2d0
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(text_mutex);
                                   lock(cpu_hotplug_lock.rw_sem);
                                   lock(text_mutex);
      lock(cpu_hotplug_lock.rw_sem);
    
    It is similar problem that has been solved by the commit 2d1e38f56622b9b
    ("kprobes: Cure hotplug lock ordering issues"). Many locks are involved.
    To be on the safe side, text_mutex must become a low level lock taken
    after cpu_hotplug_lock.rw_sem.
    
    This can't be achieved easily with the current ftrace design.
    For example, arm calls set_all_modules_text_rw() already in
    ftrace_arch_code_modify_prepare(), see arch/arm/kernel/ftrace.c.
    This functions is called:
    
      + outside stop_machine() from ftrace_run_update_code()
      + without stop_machine() from ftrace_module_enable()
    
    Fortunately, the problematic fix is needed only on x86_64. It is
    the only architecture that calls set_all_modules_text_rw()
    in ftrace path and supports livepatching at the same time.
    
    Therefore it is enough to move text_mutex handling from the generic
    kernel/trace/ftrace.c into arch/x86/kernel/ftrace.c:
    
       ftrace_arch_code_modify_prepare()
       ftrace_arch_code_modify_post_process()
    
    This patch basically reverts the ftrace part of the problematic
    commit 9f255b632bf12c4dd7 ("module: Fix livepatch/ftrace module
    text permissions race"). And provides x86_64 specific-fix.
    
    Some refactoring of the ftrace code will be needed when livepatching
    is implemented for arm or nds32. These architectures call
    set_all_modules_text_rw() and use stop_machine() at the same time.
    
    Link: http://lkml.kernel.org/r/20190627081334.12793-1-pmladek@suse.com
    
    Fixes: 9f255b632bf12c4dd7 ("module: Fix livepatch/ftrace module text permissions race")
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: Miroslav Benes <mbenes@suse.cz>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    [
      As reviewed by Miroslav Benes <mbenes@suse.cz>, removed return value of
      ftrace_run_update_code() as it is a void function.
    ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b50dc7b7d856e2d400ee7bb167b9158955f30b97
Author: Robert Beckett <bob.beckett@collabora.com>
Date:   Tue Jun 25 18:59:15 2019 +0100

    drm/imx: only send event on crtc disable if kept disabled
    
    commit 5aeab2bfc9ffa72d3ca73416635cb3785dfc076f upstream.
    
    The event will be sent as part of the vblank enable during the modeset
    if the crtc is not being kept disabled.
    
    Fixes: 5f2f911578fb ("drm/imx: atomic phase 3 step 1: Use atomic configuration")
    
    Signed-off-by: Robert Beckett <bob.beckett@collabora.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 207b888a03fbd19aa8f740dd8e49a64591d9e417
Author: Robert Beckett <bob.beckett@collabora.com>
Date:   Tue Jun 25 18:59:13 2019 +0100

    drm/imx: notify drm core before sending event during crtc disable
    
    commit 78c68e8f5cd24bd32ba4ca1cdfb0c30cf0642685 upstream.
    
    Notify drm core before sending pending events during crtc disable.
    This fixes the first event after disable having an old stale timestamp
    by having drm_crtc_vblank_off update the timestamp to now.
    
    This was seen while debugging weston log message:
    Warning: computed repaint delay is insane: -8212 msec
    
    This occurred due to:
    1. driver starts up
    2. fbcon comes along and restores fbdev, enabling vblank
    3. vblank_disable_fn fires via timer disabling vblank, keeping vblank
    seq number and time set at current value
    (some time later)
    4. weston starts and does a modeset
    5. atomic commit disables crtc while it does the modeset
    6. ipu_crtc_atomic_disable sends vblank with old seq number and time
    
    Fixes: a474478642d5 ("drm/imx: fix crtc vblank state regression")
    
    Signed-off-by: Robert Beckett <bob.beckett@collabora.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f6df3fd4715fd05424ad6f2ea4a78f9b3365db5
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jul 1 08:38:12 2019 -0500

    drm/amdgpu/gfx9: use reset default for PA_SC_FIFO_SIZE
    
    commit 25f09f858835b0e9a06213811031190a17d8ab78 upstream.
    
    Recommended by the hw team.
    
    Reviewed-and-Tested-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd5ca359a3fb654ca206e8217e47d7b03755787
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jun 25 19:08:54 2019 +0200

    arm64: kaslr: keep modules inside module region when KASAN is enabled
    
    commit 6f496a555d93db7a11d4860b9220d904822f586a upstream.
    
    When KASLR and KASAN are both enabled, we keep the modules where they
    are, and randomize the placement of the kernel so it is within 2 GB
    of the module region. The reason for this is that putting modules in
    the vmalloc region (like we normally do when KASLR is enabled) is not
    possible in this case, given that the entire vmalloc region is already
    backed by KASAN zero shadow pages, and so allocating dedicated KASAN
    shadow space as required by loaded modules is not possible.
    
    The default module allocation window is set to [_etext - 128MB, _etext]
    in kaslr.c, which is appropriate for KASLR kernels booted without a
    seed or with 'nokaslr' on the command line. However, as it turns out,
    it is not quite correct for the KASAN case, since it still intersects
    the vmalloc region at the top, where attempts to allocate shadow pages
    will collide with the KASAN zero shadow pages, causing a WARN() and all
    kinds of other trouble. So cap the top end to MODULES_END explicitly
    when running with KASAN.
    
    Cc: <stable@vger.kernel.org> # 4.9+
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Tested-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90b89546e36c6deed000a8f4b595795f4026987a
Author: Eiichi Tsukata <devel@etsukata.com>
Date:   Tue Jun 25 10:29:10 2019 +0900

    tracing/snapshot: Resize spare buffer if size changed
    
    commit 46cc0b44428d0f0e81f11ea98217fc0edfbeab07 upstream.
    
    Current snapshot implementation swaps two ring_buffers even though their
    sizes are different from each other, that can cause an inconsistency
    between the contents of buffer_size_kb file and the current buffer size.
    
    For example:
    
      # cat buffer_size_kb
      7 (expanded: 1408)
      # echo 1 > events/enable
      # grep bytes per_cpu/cpu0/stats
      bytes: 1441020
      # echo 1 > snapshot             // current:1408, spare:1408
      # echo 123 > buffer_size_kb     // current:123,  spare:1408
      # echo 1 > snapshot             // current:1408, spare:123
      # grep bytes per_cpu/cpu0/stats
      bytes: 1443700
      # cat buffer_size_kb
      123                             // != current:1408
    
    And also, a similar per-cpu case hits the following WARNING:
    
    Reproducer:
    
      # echo 1 > per_cpu/cpu0/snapshot
      # echo 123 > buffer_size_kb
      # echo 1 > per_cpu/cpu0/snapshot
    
    WARNING:
    
      WARNING: CPU: 0 PID: 1946 at kernel/trace/trace.c:1607 update_max_tr_single.part.0+0x2b8/0x380
      Modules linked in:
      CPU: 0 PID: 1946 Comm: bash Not tainted 5.2.0-rc6 #20
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-2.fc30 04/01/2014
      RIP: 0010:update_max_tr_single.part.0+0x2b8/0x380
      Code: ff e8 dc da f9 ff 0f 0b e9 88 fe ff ff e8 d0 da f9 ff 44 89 ee bf f5 ff ff ff e8 33 dc f9 ff 41 83 fd f5 74 96 e8 b8 da f9 ff <0f> 0b eb 8d e8 af da f9 ff 0f 0b e9 bf fd ff ff e8 a3 da f9 ff 48
      RSP: 0018:ffff888063e4fca0 EFLAGS: 00010093
      RAX: ffff888066214380 RBX: ffffffff99850fe0 RCX: ffffffff964298a8
      RDX: 0000000000000000 RSI: 00000000fffffff5 RDI: 0000000000000005
      RBP: 1ffff1100c7c9f96 R08: ffff888066214380 R09: ffffed100c7c9f9b
      R10: ffffed100c7c9f9a R11: 0000000000000003 R12: 0000000000000000
      R13: 00000000ffffffea R14: ffff888066214380 R15: ffffffff99851060
      FS:  00007f9f8173c700(0000) GS:ffff88806d000000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000714dc0 CR3: 0000000066fa6000 CR4: 00000000000006f0
      Call Trace:
       ? trace_array_printk_buf+0x140/0x140
       ? __mutex_lock_slowpath+0x10/0x10
       tracing_snapshot_write+0x4c8/0x7f0
       ? trace_printk_init_buffers+0x60/0x60
       ? selinux_file_permission+0x3b/0x540
       ? tracer_preempt_off+0x38/0x506
       ? trace_printk_init_buffers+0x60/0x60
       __vfs_write+0x81/0x100
       vfs_write+0x1e1/0x560
       ksys_write+0x126/0x250
       ? __ia32_sys_read+0xb0/0xb0
       ? do_syscall_64+0x1f/0x390
       do_syscall_64+0xc1/0x390
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    This patch adds resize_buffer_duplicate_size() to check if there is a
    difference between current/spare buffer sizes and resize a spare buffer
    if necessary.
    
    Link: http://lkml.kernel.org/r/20190625012910.13109-1-devel@etsukata.com
    
    Cc: stable@vger.kernel.org
    Fixes: ad909e21bbe69 ("tracing: Add internal tracing_snapshot() functions")
    Signed-off-by: Eiichi Tsukata <devel@etsukata.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fbe87fc25ad9b169505ab6ad282c7072b2d275e
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Jun 24 18:32:26 2019 +0800

    lib/mpi: Fix karactx leak in mpi_powm
    
    commit c8ea9fce2baf7b643384f36f29e4194fa40d33a6 upstream.
    
    Sometimes mpi_powm will leak karactx because a memory allocation
    failure causes a bail-out that skips the freeing of karactx.  This
    patch moves the freeing of karactx to the end of the function like
    everything else so that it can't be skipped.
    
    Reported-by: syzbot+f7baccc38dcc1e094e77@syzkaller.appspotmail.com
    Fixes: cdec9cb5167a ("crypto: GnuPG based MPI lib - source files...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Reviewed-by: Eric Biggers <ebiggers@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76cdeea3b1fdfbcbfbcf5c9c15d48639323be4e8
Author: Dennis Wassenberg <dennis.wassenberg@secunet.com>
Date:   Fri Jun 28 10:54:53 2019 +0200

    ALSA: hda/realtek - Change front mic location for Lenovo M710q
    
    commit bef33e19203dde434bcdf21c449e3fb4f06c2618 upstream.
    
    On M710q Lenovo ThinkCentre machine, there are two front mics,
    we change the location for one of them to avoid conflicts.
    
    Signed-off-by: Dennis Wassenberg <dennis.wassenberg@secunet.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a0a012c9826767a533c15223bbf37ca00d068a7
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jun 27 17:43:08 2019 +0100

    ALSA: usb-audio: fix sign unintended sign extension on left shifts
    
    commit 2acf5a3e6e9371e63c9e4ff54d84d08f630467a0 upstream.
    
    There are a couple of left shifts of unsigned 8 bit values that
    first get promoted to signed ints and hence get sign extended
    on the shift if the top bit of the 8 bit values are set. Fix
    this by casting the 8 bit values to unsigned ints to stop the
    unintentional sign extension.
    
    Addresses-Coverity: ("Unintended sign extension")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37eaa74451c1003a6bec548c957890c264559463
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jul 2 20:07:21 2019 +0200

    ALSA: line6: Fix write on zero-sized buffer
    
    commit 3450121997ce872eb7f1248417225827ea249710 upstream.
    
    LINE6 drivers allocate the buffers based on the value returned from
    usb_maxpacket() calls.  The manipulated device may return zero for
    this, and this results in the kmalloc() with zero size (and it may
    succeed) while the other part of the driver code writes the packet
    data with the fixed size -- which eventually overwrites.
    
    This patch adds a simple sanity check for the invalid buffer size for
    avoiding that problem.
    
    Reported-by: syzbot+219f00fb49874dcaea17@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a75995a7554c78ab77e01ef80714714e65834638
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Jul 1 23:43:53 2019 +0900

    ALSA: firewire-lib/fireworks: fix miss detection of received MIDI messages
    
    commit 7fbd1753b64eafe21cf842348a40a691d0dee440 upstream.
    
    In IEC 61883-6, 8 MIDI data streams are multiplexed into single
    MIDI conformant data channel. The index of stream is calculated by
    modulo 8 of the value of data block counter.
    
    In fireworks, the value of data block counter in CIP header has a quirk
    with firmware version v5.0.0, v5.7.3 and v5.8.0. This brings ALSA
    IEC 61883-1/6 packet streaming engine to miss detection of MIDI
    messages.
    
    This commit fixes the miss detection to modify the value of data block
    counter for the modulo calculation.
    
    For maintainers, this bug exists since a commit 18f5ed365d3f ("ALSA:
    fireworks/firewire-lib: add support for recent firmware quirk") in Linux
    kernel v4.2. There're many changes since the commit.  This fix can be
    backported to Linux kernel v4.4 or later. I tagged a base commit to the
    backport for your convenience.
    
    Besides, my work for Linux kernel v5.3 brings heavy code refactoring and
    some structure members are renamed in 'sound/firewire/amdtp-stream.h'.
    The content of this patch brings conflict when merging -rc tree with
    this patch and the latest tree. I request maintainers to solve the
    conflict to replace 'tx_first_dbc' with 'ctx_data.tx.first_dbc'.
    
    Fixes: df075feefbd3 ("ALSA: firewire-lib: complete AM824 data block processing layer")
    Cc: <stable@vger.kernel.org> # v4.4+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90a2692cf6371017f9185698f499431d5e76c6ea
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Jun 28 10:54:29 2019 +0100

    ALSA: seq: fix incorrect order of dest_client/dest_ports arguments
    
    commit c3ea60c231446663afd6ea1054da6b7f830855ca upstream.
    
    There are two occurrances of a call to snd_seq_oss_fill_addr where
    the dest_client and dest_port arguments are in the wrong order. Fix
    this by swapping them around.
    
    Addresses-Coverity: ("Arguments in wrong order")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a86c45d26c87c0434fb6e6805bc48ba160a08965
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Tue Jul 2 09:53:25 2019 +0200

    crypto: cryptd - Fix skcipher instance memory leak
    
    commit 1a0fad630e0b7cff38e7691b28b0517cfbb0633f upstream.
    
    cryptd_skcipher_free() fails to free the struct skcipher_instance
    allocated in cryptd_create_skcipher(), leading to a memory leak.  This
    is detected by kmemleak on bootup on ARM64 platforms:
    
     unreferenced object 0xffff80003377b180 (size 1024):
       comm "cryptomgr_probe", pid 822, jiffies 4294894830 (age 52.760s)
       backtrace:
         kmem_cache_alloc_trace+0x270/0x2d0
         cryptd_create+0x990/0x124c
         cryptomgr_probe+0x5c/0x1e8
         kthread+0x258/0x318
         ret_from_fork+0x10/0x1c
    
    Fixes: 4e0958d19bd8 ("crypto: cryptd - Add support for skcipher")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d06037bc128d646f0addca86a268205c0e3ad5d8
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Jul 2 14:17:00 2019 -0700

    crypto: user - prevent operating on larval algorithms
    
    commit 21d4120ec6f5b5992b01b96ac484701163917b63 upstream.
    
    Michal Suchanek reported [1] that running the pcrypt_aead01 test from
    LTP [2] in a loop and holding Ctrl-C causes a NULL dereference of
    alg->cra_users.next in crypto_remove_spawns(), via crypto_del_alg().
    The test repeatedly uses CRYPTO_MSG_NEWALG and CRYPTO_MSG_DELALG.
    
    The crash occurs when the instance that CRYPTO_MSG_DELALG is trying to
    unregister isn't a real registered algorithm, but rather is a "test
    larval", which is a special "algorithm" added to the algorithms list
    while the real algorithm is still being tested.  Larvals don't have
    initialized cra_users, so that causes the crash.  Normally pcrypt_aead01
    doesn't trigger this because CRYPTO_MSG_NEWALG waits for the algorithm
    to be tested; however, CRYPTO_MSG_NEWALG returns early when interrupted.
    
    Everything else in the "crypto user configuration" API has this same bug
    too, i.e. it inappropriately allows operating on larval algorithms
    (though it doesn't look like the other cases can cause a crash).
    
    Fix this by making crypto_alg_match() exclude larval algorithms.
    
    [1] https://lkml.kernel.org/r/20190625071624.27039-1-msuchanek@suse.de
    [2] https://github.com/linux-test-project/ltp/blob/20190517/testcases/kernel/crypto/pcrypt_aead01.c
    
    Reported-by: Michal Suchanek <msuchanek@suse.de>
    Fixes: a38f7907b926 ("crypto: Add userspace configuration API")
    Cc: <stable@vger.kernel.org> # v3.2+
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf71ef9655d25e8b275ec6ed649b6bd719231ddc
Author: Jann Horn <jannh@google.com>
Date:   Thu Jul 4 17:32:23 2019 +0200

    ptrace: Fix ->ptracer_cred handling for PTRACE_TRACEME
    
    commit 6994eefb0053799d2e07cd140df6c2ea106c41ee upstream.
    
    Fix two issues:
    
    When called for PTRACE_TRACEME, ptrace_link() would obtain an RCU
    reference to the parent's objective credentials, then give that pointer
    to get_cred().  However, the object lifetime rules for things like
    struct cred do not permit unconditionally turning an RCU reference into
    a stable reference.
    
    PTRACE_TRACEME records the parent's credentials as if the parent was
    acting as the subject, but that's not the case.  If a malicious
    unprivileged child uses PTRACE_TRACEME and the parent is privileged, and
    at a later point, the parent process becomes attacker-controlled
    (because it drops privileges and calls execve()), the attacker ends up
    with control over two processes with a privileged ptrace relationship,
    which can be abused to ptrace a suid binary and obtain root privileges.
    
    Fix both of these by always recording the credentials of the process
    that is requesting the creation of the ptrace relationship:
    current_cred() can't change under us, and current is the proper subject
    for access control.
    
    This change is theoretically userspace-visible, but I am not aware of
    any code that it will actually break.
    
    Fixes: 64b875f7ac8a ("ptrace: Capture the ptracer's creds not PT_PTRACE_CAP")
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a4db13ccc079b762123d04a7270d6d2cb3398d7
Author: Lucas De Marchi <lucas.demarchi@intel.com>
Date:   Tue Jul 2 12:23:04 2019 -0700

    drm/i915/dmc: protect against reading random memory
    
    commit bc7b488b1d1c71dc4c5182206911127bc6c410d6 upstream.
    
    While loading the DMC firmware we were double checking the headers made
    sense, but in no place we checked that we were actually reading memory
    we were supposed to. This could be wrong in case the firmware file is
    truncated or malformed.
    
    Before this patch:
            # ls -l /lib/firmware/i915/icl_dmc_ver1_07.bin
            -rw-r--r-- 1 root root  25716 Feb  1 12:26 icl_dmc_ver1_07.bin
            # truncate -s 25700 /lib/firmware/i915/icl_dmc_ver1_07.bin
            # modprobe i915
            # dmesg| grep -i dmc
            [drm:intel_csr_ucode_init [i915]] Loading i915/icl_dmc_ver1_07.bin
            [drm] Finished loading DMC firmware i915/icl_dmc_ver1_07.bin (v1.7)
    
    i.e. it loads random data. Now it fails like below:
            [drm:intel_csr_ucode_init [i915]] Loading i915/icl_dmc_ver1_07.bin
            [drm:csr_load_work_fn [i915]] *ERROR* Truncated DMC firmware, rejecting.
            i915 0000:00:02.0: Failed to load DMC firmware i915/icl_dmc_ver1_07.bin. Disabling runtime power management.
            i915 0000:00:02.0: DMC firmware homepage: https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/tree/i915
    
    Before reading any part of the firmware file, validate the input first.
    
    Fixes: eb805623d8b1 ("drm/i915/skl: Add support to load SKL CSR firmware.")
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190605235535.17791-1-lucas.demarchi@intel.com
    (cherry picked from commit bc7b488b1d1c71dc4c5182206911127bc6c410d6)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    [ Lucas: backported to 4.9+ adjusting the context ]
    Cc: stable@vger.kernel.org # v4.9+
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbcbf7dd12e652461fa9b50b99f21f7dc1012b80
Author: Paul Burton <paulburton@kernel.org>
Date:   Wed Aug 8 09:30:56 2018 -0700

    MIPS: netlogic: xlr: Remove erroneous check in nlm_fmn_send()
    
    [ Upstream commit 02eec6c9fc0cb13169cc97a6139771768791f92b ]
    
    In nlm_fmn_send() we have a loop which attempts to send a message
    multiple times in order to handle the transient failure condition of a
    lack of available credit. When examining the status register to detect
    the failure we check for a condition that can never be true, which falls
    foul of gcc 8's -Wtautological-compare:
    
      In file included from arch/mips/netlogic/common/irq.c:65:
      ./arch/mips/include/asm/netlogic/xlr/fmn.h: In function 'nlm_fmn_send':
      ./arch/mips/include/asm/netlogic/xlr/fmn.h:304:22: error: bitwise
        comparison always evaluates to false [-Werror=tautological-compare]
         if ((status & 0x2) == 1)
                            ^~
    
    If the path taken if this condition were true all we do is print a
    message to the kernel console. Since failures seem somewhat expected
    here (making the console message questionable anyway) and the condition
    has clearly never evaluated true we simply remove it, rather than
    attempting to fix it to check status correctly.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Patchwork: https://patchwork.linux-mips.org/patch/20174/
    Cc: Ganesan Ramalingam <ganesanr@broadcom.com>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Jayachandran C <jnair@caviumnetworks.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f68803160efe0b139e4c71e8a395f88cb4878a0b
Author: Wei Li <liwei391@huawei.com>
Date:   Thu Jun 6 11:17:54 2019 +0800

    ftrace: Fix NULL pointer dereference in free_ftrace_func_mapper()
    
    [ Upstream commit 04e03d9a616c19a47178eaca835358610e63a1dd ]
    
    The mapper may be NULL when called from register_ftrace_function_probe()
    with probe->data == NULL.
    
    This issue can be reproduced as follow (it may be covered by compiler
    optimization sometime):
    
    / # cat /sys/kernel/debug/tracing/set_ftrace_filter
    #### all functions enabled ####
    / # echo foo_bar:dump > /sys/kernel/debug/tracing/set_ftrace_filter
    [  206.949100] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
    [  206.952402] Mem abort info:
    [  206.952819]   ESR = 0x96000006
    [  206.955326]   Exception class = DABT (current EL), IL = 32 bits
    [  206.955844]   SET = 0, FnV = 0
    [  206.956272]   EA = 0, S1PTW = 0
    [  206.956652] Data abort info:
    [  206.957320]   ISV = 0, ISS = 0x00000006
    [  206.959271]   CM = 0, WnR = 0
    [  206.959938] user pgtable: 4k pages, 48-bit VAs, pgdp=0000000419f3a000
    [  206.960483] [0000000000000000] pgd=0000000411a87003, pud=0000000411a83003, pmd=0000000000000000
    [  206.964953] Internal error: Oops: 96000006 [#1] SMP
    [  206.971122] Dumping ftrace buffer:
    [  206.973677]    (ftrace buffer empty)
    [  206.975258] Modules linked in:
    [  206.976631] Process sh (pid: 281, stack limit = 0x(____ptrval____))
    [  206.978449] CPU: 10 PID: 281 Comm: sh Not tainted 5.2.0-rc1+ #17
    [  206.978955] Hardware name: linux,dummy-virt (DT)
    [  206.979883] pstate: 60000005 (nZCv daif -PAN -UAO)
    [  206.980499] pc : free_ftrace_func_mapper+0x2c/0x118
    [  206.980874] lr : ftrace_count_free+0x68/0x80
    [  206.982539] sp : ffff0000182f3ab0
    [  206.983102] x29: ffff0000182f3ab0 x28: ffff8003d0ec1700
    [  206.983632] x27: ffff000013054b40 x26: 0000000000000001
    [  206.984000] x25: ffff00001385f000 x24: 0000000000000000
    [  206.984394] x23: ffff000013453000 x22: ffff000013054000
    [  206.984775] x21: 0000000000000000 x20: ffff00001385fe28
    [  206.986575] x19: ffff000013872c30 x18: 0000000000000000
    [  206.987111] x17: 0000000000000000 x16: 0000000000000000
    [  206.987491] x15: ffffffffffffffb0 x14: 0000000000000000
    [  206.987850] x13: 000000000017430e x12: 0000000000000580
    [  206.988251] x11: 0000000000000000 x10: cccccccccccccccc
    [  206.988740] x9 : 0000000000000000 x8 : ffff000013917550
    [  206.990198] x7 : ffff000012fac2e8 x6 : ffff000012fac000
    [  206.991008] x5 : ffff0000103da588 x4 : 0000000000000001
    [  206.991395] x3 : 0000000000000001 x2 : ffff000013872a28
    [  206.991771] x1 : 0000000000000000 x0 : 0000000000000000
    [  206.992557] Call trace:
    [  206.993101]  free_ftrace_func_mapper+0x2c/0x118
    [  206.994827]  ftrace_count_free+0x68/0x80
    [  206.995238]  release_probe+0xfc/0x1d0
    [  206.995555]  register_ftrace_function_probe+0x4a8/0x868
    [  206.995923]  ftrace_trace_probe_callback.isra.4+0xb8/0x180
    [  206.996330]  ftrace_dump_callback+0x50/0x70
    [  206.996663]  ftrace_regex_write.isra.29+0x290/0x3a8
    [  206.997157]  ftrace_filter_write+0x44/0x60
    [  206.998971]  __vfs_write+0x64/0xf0
    [  206.999285]  vfs_write+0x14c/0x2f0
    [  206.999591]  ksys_write+0xbc/0x1b0
    [  206.999888]  __arm64_sys_write+0x3c/0x58
    [  207.000246]  el0_svc_common.constprop.0+0x408/0x5f0
    [  207.000607]  el0_svc_handler+0x144/0x1c8
    [  207.000916]  el0_svc+0x8/0xc
    [  207.003699] Code: aa0003f8 a9025bf5 aa0103f5 f946ea80 (f9400303)
    [  207.008388] ---[ end trace 7b6d11b5f542bdf1 ]---
    [  207.010126] Kernel panic - not syncing: Fatal exception
    [  207.011322] SMP: stopping secondary CPUs
    [  207.013956] Dumping ftrace buffer:
    [  207.014595]    (ftrace buffer empty)
    [  207.015632] Kernel Offset: disabled
    [  207.017187] CPU features: 0x002,20006008
    [  207.017985] Memory Limit: none
    [  207.019825] ---[ end Kernel panic - not syncing: Fatal exception ]---
    
    Link: http://lkml.kernel.org/r/20190606031754.10798-1-liwei391@huawei.com
    
    Signed-off-by: Wei Li <liwei391@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d1a946887cb873ff915f38acc6c3854628928a1
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Jun 13 20:07:22 2019 -0500

    module: Fix livepatch/ftrace module text permissions race
    
    [ Upstream commit 9f255b632bf12c4dd7fc31caee89aa991ef75176 ]
    
    It's possible for livepatch and ftrace to be toggling a module's text
    permissions at the same time, resulting in the following panic:
    
      BUG: unable to handle page fault for address: ffffffffc005b1d9
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0003) - permissions violation
      PGD 3ea0c067 P4D 3ea0c067 PUD 3ea0e067 PMD 3cc13067 PTE 3b8a1061
      Oops: 0003 [#1] PREEMPT SMP PTI
      CPU: 1 PID: 453 Comm: insmod Tainted: G           O  K   5.2.0-rc1-a188339ca5 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-20181126_142135-anatol 04/01/2014
      RIP: 0010:apply_relocate_add+0xbe/0x14c
      Code: fa 0b 74 21 48 83 fa 18 74 38 48 83 fa 0a 75 40 eb 08 48 83 38 00 74 33 eb 53 83 38 00 75 4e 89 08 89 c8 eb 0a 83 38 00 75 43 <89> 08 48 63 c1 48 39 c8 74 2e eb 48 83 38 00 75 32 48 29 c1 89 08
      RSP: 0018:ffffb223c00dbb10 EFLAGS: 00010246
      RAX: ffffffffc005b1d9 RBX: 0000000000000000 RCX: ffffffff8b200060
      RDX: 000000000000000b RSI: 0000004b0000000b RDI: ffff96bdfcd33000
      RBP: ffffb223c00dbb38 R08: ffffffffc005d040 R09: ffffffffc005c1f0
      R10: ffff96bdfcd33c40 R11: ffff96bdfcd33b80 R12: 0000000000000018
      R13: ffffffffc005c1f0 R14: ffffffffc005e708 R15: ffffffff8b2fbc74
      FS:  00007f5f447beba8(0000) GS:ffff96bdff900000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffffffffc005b1d9 CR3: 000000003cedc002 CR4: 0000000000360ea0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       klp_init_object_loaded+0x10f/0x219
       ? preempt_latency_start+0x21/0x57
       klp_enable_patch+0x662/0x809
       ? virt_to_head_page+0x3a/0x3c
       ? kfree+0x8c/0x126
       patch_init+0x2ed/0x1000 [livepatch_test02]
       ? 0xffffffffc0060000
       do_one_initcall+0x9f/0x1c5
       ? kmem_cache_alloc_trace+0xc4/0xd4
       ? do_init_module+0x27/0x210
       do_init_module+0x5f/0x210
       load_module+0x1c41/0x2290
       ? fsnotify_path+0x3b/0x42
       ? strstarts+0x2b/0x2b
       ? kernel_read+0x58/0x65
       __do_sys_finit_module+0x9f/0xc3
       ? __do_sys_finit_module+0x9f/0xc3
       __x64_sys_finit_module+0x1a/0x1c
       do_syscall_64+0x52/0x61
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The above panic occurs when loading two modules at the same time with
    ftrace enabled, where at least one of the modules is a livepatch module:
    
    CPU0                                    CPU1
    klp_enable_patch()
      klp_init_object_loaded()
        module_disable_ro()
                                            ftrace_module_enable()
                                              ftrace_arch_code_modify_post_process()
                                                set_all_modules_text_ro()
          klp_write_object_relocations()
            apply_relocate_add()
              *patches read-only code* - BOOM
    
    A similar race exists when toggling ftrace while loading a livepatch
    module.
    
    Fix it by ensuring that the livepatch and ftrace code patching
    operations -- and their respective permissions changes -- are protected
    by the text_mutex.
    
    Link: http://lkml.kernel.org/r/ab43d56ab909469ac5d2520c5d944ad6d4abd476.1560474114.git.jpoimboe@redhat.com
    
    Reported-by: Johannes Erdfelt <johannes@erdfelt.com>
    Fixes: 444d13ff10fb ("modules: add ro_after_init support")
    Acked-by: Jessica Yu <jeyu@kernel.org>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f847361edd2a25a2cf2ac494909ad78fba165cd4
Author: swkhack <swkhack@gmail.com>
Date:   Thu Jun 13 15:56:08 2019 -0700

    mm/mlock.c: change count_mm_mlocked_page_nr return type
    
    [ Upstream commit 0874bb49bb21bf24deda853e8bf61b8325e24bcb ]
    
    On a 64-bit machine the value of "vma->vm_end - vma->vm_start" may be
    negative when using 32 bit ints and the "count >> PAGE_SHIFT"'s result
    will be wrong.  So change the local variable and return value to
    unsigned long to fix the problem.
    
    Link: http://lkml.kernel.org/r/20190513023701.83056-1-swkhack@gmail.com
    Fixes: 0cf2f6f6dc60 ("mm: mlock: check against vma for actual mlock() size")
    Signed-off-by: swkhack <swkhack@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 793ff5efee9ff49fa633cfb1fdf58e7370af160c
Author: Manuel Traut <manut@linutronix.de>
Date:   Thu Jun 13 15:55:52 2019 -0700

    scripts/decode_stacktrace.sh: prefix addr2line with $CROSS_COMPILE
    
    [ Upstream commit c04e32e911653442fc834be6e92e072aeebe01a1 ]
    
    At least for ARM64 kernels compiled with the crosstoolchain from
    Debian/stretch or with the toolchain from kernel.org the line number is
    not decoded correctly by 'decode_stacktrace.sh':
    
      $ echo "[  136.513051]  f1+0x0/0xc [kcrash]" | \
        CROSS_COMPILE=/opt/gcc-8.1.0-nolibc/aarch64-linux/bin/aarch64-linux- \
       ./scripts/decode_stacktrace.sh /scratch/linux-arm64/vmlinux \
                                      /scratch/linux-arm64 \
                                      /nfs/debian/lib/modules/4.20.0-devel
      [  136.513051] f1 (/linux/drivers/staging/kcrash/kcrash.c:68) kcrash
    
    If addr2line from the toolchain is used the decoded line number is correct:
    
      [  136.513051] f1 (/linux/drivers/staging/kcrash/kcrash.c:57) kcrash
    
    Link: http://lkml.kernel.org/r/20190527083425.3763-1-manut@linutronix.de
    Signed-off-by: Manuel Traut <manut@linutronix.de>
    Acked-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 675a1a49dd914f1d707be93a29a7d8cb1beabaaa
Author: Joel Savitz <jsavitz@redhat.com>
Date:   Wed Jun 12 11:50:48 2019 -0400

    cpuset: restore sanity to cpuset_cpus_allowed_fallback()
    
    [ Upstream commit d477f8c202d1f0d4791ab1263ca7657bbe5cf79e ]
    
    In the case that a process is constrained by taskset(1) (i.e.
    sched_setaffinity(2)) to a subset of available cpus, and all of those are
    subsequently offlined, the scheduler will set tsk->cpus_allowed to
    the current value of task_cs(tsk)->effective_cpus.
    
    This is done via a call to do_set_cpus_allowed() in the context of
    cpuset_cpus_allowed_fallback() made by the scheduler when this case is
    detected. This is the only call made to cpuset_cpus_allowed_fallback()
    in the latest mainline kernel.
    
    However, this is not sane behavior.
    
    I will demonstrate this on a system running the latest upstream kernel
    with the following initial configuration:
    
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   ffffffff,fffffff
            Cpus_allowed_list:      0-63
    
    (Where cpus 32-63 are provided via smt.)
    
    If we limit our current shell process to cpu2 only and then offline it
    and reonline it:
    
            # taskset -p 4 $$
            pid 2272's current affinity mask: ffffffffffffffff
            pid 2272's new affinity mask: 4
    
            # echo off > /sys/devices/system/cpu/cpu2/online
            # dmesg | tail -3
            [ 2195.866089] process 2272 (bash) no longer affine to cpu2
            [ 2195.872700] IRQ 114: no longer affine to CPU2
            [ 2195.879128] smpboot: CPU 2 is now offline
    
            # echo on > /sys/devices/system/cpu/cpu2/online
            # dmesg | tail -1
            [ 2617.043572] smpboot: Booting Node 0 Processor 2 APIC 0x4
    
    We see that our current process now has an affinity mask containing
    every cpu available on the system _except_ the one we originally
    constrained it to:
    
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   ffffffff,fffffffb
            Cpus_allowed_list:      0-1,3-63
    
    This is not sane behavior, as the scheduler can now not only place the
    process on previously forbidden cpus, it can't even schedule it on
    the cpu it was originally constrained to!
    
    Other cases result in even more exotic affinity masks. Take for instance
    a process with an affinity mask containing only cpus provided by smt at
    the moment that smt is toggled, in a configuration such as the following:
    
            # taskset -p f000000000 $$
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   000000f0,00000000
            Cpus_allowed_list:      36-39
    
    A double toggle of smt results in the following behavior:
    
            # echo off > /sys/devices/system/cpu/smt/control
            # echo on > /sys/devices/system/cpu/smt/control
            # grep -i cpus /proc/$$/status
            Cpus_allowed:   ffffff00,ffffffff
            Cpus_allowed_list:      0-31,40-63
    
    This is even less sane than the previous case, as the new affinity mask
    excludes all smt-provided cpus with ids less than those that were
    previously in the affinity mask, as well as those that were actually in
    the mask.
    
    With this patch applied, both of these cases end in the following state:
    
            # grep -i cpu /proc/$$/status
            Cpus_allowed:   ffffffff,ffffffff
            Cpus_allowed_list:      0-63
    
    The original policy is discarded. Though not ideal, it is the simplest way
    to restore sanity to this fallback case without reinventing the cpuset
    wheel that rolls down the kernel just fine in cgroup v2. A user who wishes
    for the previous affinity mask to be restored in this fallback case can use
    that mechanism instead.
    
    This patch modifies scheduler behavior by instead resetting the mask to
    task_cs(tsk)->cpus_allowed by default, and cpu_possible mask in legacy
    mode. I tested the cases above on both modes.
    
    Note that the scheduler uses this fallback mechanism if and only if
    _every_ other valid avenue has been traveled, and it is the last resort
    before calling BUG().
    
    Suggested-by: Waiman Long <longman@redhat.com>
    Suggested-by: Phil Auld <pauld@redhat.com>
    Signed-off-by: Joel Savitz <jsavitz@redhat.com>
    Acked-by: Phil Auld <pauld@redhat.com>
    Acked-by: Waiman Long <longman@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e25d82d9d62341865cbb0c9d9baa1d12ccd9cb1
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Wed Jun 5 07:51:03 2019 +0000

    platform/x86: mlx-platform: Fix parent device in i2c-mux-reg device registration
    
    [ Upstream commit 160da20b254dd4bfc5828f12c208fa831ad4be6c ]
    
    Fix the issue found while running kernel with the option
    CONFIG_DEBUG_TEST_DRIVER_REMOVE.
    Driver 'mlx-platform' registers 'i2c_mlxcpld' device and then registers
    few underlying 'i2c-mux-reg' devices:
            priv->pdev_i2c = platform_device_register_simple("i2c_mlxcpld", nr,
                                                             NULL, 0);
            ...
            for (i = 0; i < ARRAY_SIZE(mlxplat_mux_data); i++) {
                    priv->pdev_mux[i] = platform_device_register_resndata(
                                                    &mlxplat_dev->dev,
                                                    "i2c-mux-reg", i, NULL,
                                                    0, &mlxplat_mux_data[i],
                                                    sizeof(mlxplat_mux_data[i]));
    
    But actual parent of "i2c-mux-reg" device is priv->pdev_i2c->dev and
    not mlxplat_dev->dev.
    Patch fixes parent device parameter in a call to
    platform_device_register_resndata() for "i2c-mux-reg".
    
    It solves the race during initialization flow while 'i2c_mlxcpld.1' is
    removing after probe, while 'i2c-mux-reg.0' is still in probing flow:
    'i2c_mlxcpld.1' flow:   probe -> remove -> probe.
    'i2c-mux-reg.0' flow:             probe -> ...
    
    [   12:621096] Registering platform device 'i2c_mlxcpld.1'. Parent at platform
    [   12:621117] device: 'i2c_mlxcpld.1': device_add
    [   12:621155] bus: 'platform': add device i2c_mlxcpld.1
    [   12:621384] Registering platform device 'i2c-mux-reg.0'. Parent at mlxplat
    [   12:621395] device: 'i2c-mux-reg.0': device_add
    [   12:621425] bus: 'platform': add device i2c-mux-reg.0
    [   12:621806] Registering platform device 'i2c-mux-reg.1'. Parent at mlxplat
    [   12:621828] device: 'i2c-mux-reg.1': device_add
    [   12:621892] bus: 'platform': add device i2c-mux-reg.1
    [   12:621906] bus: 'platform': add driver i2c_mlxcpld
    [   12:621996] bus: 'platform': driver_probe_device: matched device i2c_mlxcpld.1 with driver i2c_mlxcpld
    [   12:622003] bus: 'platform': really_probe: probing driver i2c_mlxcpld with device i2c_mlxcpld.1
    [   12:622100] i2c_mlxcpld i2c_mlxcpld.1: no default pinctrl state
    [   12:622293] device: 'i2c-1': device_add
    [   12:627280] bus: 'i2c': add device i2c-1
    [   12:627692] device: 'i2c-1': device_add
    [   12.629639] bus: 'platform': add driver i2c-mux-reg
    [   12.629718] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.0 with driver i2c-mux-reg
    [   12.629723] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.0
    [   12.629818] i2c-mux-reg i2c-mux-reg.0: no default pinctrl state
    [   12.629981] platform i2c-mux-reg.0: Driver i2c-mux-reg requests probe deferral
    [   12.629986] platform i2c-mux-reg.0: Added to deferred list
    [   12.629992] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.1 with driver i2c-mux-reg
    [   12.629997] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.1
    [   12.630091] i2c-mux-reg i2c-mux-reg.1: no default pinctrl state
    [   12.630247] platform i2c-mux-reg.1: Driver i2c-mux-reg requests probe deferral
    [   12.630252] platform i2c-mux-reg.1: Added to deferred list
    [   12.640892] devices_kset: Moving i2c-mux-reg.0 to end of list
    [   12.640900] platform i2c-mux-reg.0: Retrying from deferred list
    [   12.640911] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.0 with driver i2c-mux-reg
    [   12.640919] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.0
    [   12.640999] i2c-mux-reg i2c-mux-reg.0: no default pinctrl state
    [   12.641177] platform i2c-mux-reg.0: Driver i2c-mux-reg requests probe deferral
    [   12.641187] platform i2c-mux-reg.0: Added to deferred list
    [   12.641198] devices_kset: Moving i2c-mux-reg.1 to end of list
    [   12.641219] platform i2c-mux-reg.1: Retrying from deferred list
    [   12.641237] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.1 with driver i2c-mux-reg
    [   12.641247] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.1
    [   12.641331] i2c-mux-reg i2c-mux-reg.1: no default pinctrl state
    [   12.641465] platform i2c-mux-reg.1: Driver i2c-mux-reg requests probe deferral
    [   12.641469] platform i2c-mux-reg.1: Added to deferred list
    [   12.646427] device: 'i2c-1': device_add
    [   12.646647] bus: 'i2c': add device i2c-1
    [   12.647104] device: 'i2c-1': device_add
    [   12.669231] devices_kset: Moving i2c-mux-reg.0 to end of list
    [   12.669240] platform i2c-mux-reg.0: Retrying from deferred list
    [   12.669258] bus: 'platform': driver_probe_device: matched device i2c-mux-reg.0 with driver i2c-mux-reg
    [   12.669263] bus: 'platform': really_probe: probing driver i2c-mux-reg with device i2c-mux-reg.0
    [   12.669343] i2c-mux-reg i2c-mux-reg.0: no default pinctrl state
    [   12.669585] device: 'i2c-2': device_add
    [   12.669795] bus: 'i2c': add device i2c-2
    [   12.670201] device: 'i2c-2': device_add
    [   12.671427] i2c i2c-1: Added multiplexed i2c bus 2
    [   12.671514] device: 'i2c-3': device_add
    [   12.671724] bus: 'i2c': add device i2c-3
    [   12.672136] device: 'i2c-3': device_add
    [   12.673378] i2c i2c-1: Added multiplexed i2c bus 3
    [   12.673472] device: 'i2c-4': device_add
    [   12.673676] bus: 'i2c': add device i2c-4
    [   12.674060] device: 'i2c-4': device_add
    [   12.675861] i2c i2c-1: Added multiplexed i2c bus 4
    [   12.675941] device: 'i2c-5': device_add
    [   12.676150] bus: 'i2c': add device i2c-5
    [   12.676550] device: 'i2c-5': device_add
    [   12.678103] i2c i2c-1: Added multiplexed i2c bus 5
    [   12.678193] device: 'i2c-6': device_add
    [   12.678395] bus: 'i2c': add device i2c-6
    [   12.678774] device: 'i2c-6': device_add
    [   12.679969] i2c i2c-1: Added multiplexed i2c bus 6
    [   12.680065] device: 'i2c-7': device_add
    [   12.680275] bus: 'i2c': add device i2c-7
    [   12.680913] device: 'i2c-7': device_add
    [   12.682506] i2c i2c-1: Added multiplexed i2c bus 7
    [   12.682600] device: 'i2c-8': device_add
    [   12.682808] bus: 'i2c': add device i2c-8
    [   12.683189] device: 'i2c-8': device_add
    [   12.683907] device: 'i2c-1': device_unregister
    [   12.683945] device: 'i2c-1': device_unregister
    [   12.684387] device: 'i2c-1': device_create_release
    [   12.684536] bus: 'i2c': remove device i2c-1
    [   12.686019] i2c i2c-8: Failed to create compatibility class link
    [   12.686086] ------------[ cut here ]------------
    [   12.686087] can't create symlink to mux device
    [   12.686224] Workqueue: events deferred_probe_work_func
    [   12.686135] WARNING: CPU: 7 PID: 436 at drivers/i2c/i2c-mux.c:416 i2c_mux_add_adapter+0x729/0x7d0 [i2c_mux]
    [   12.686232] RIP: 0010:i2c_mux_add_adapter+0x729/0x7d0 [i2c_mux]
    [   0x190/0x190 [i2c_mux]
    [   12.686300]  ? i2c_mux_alloc+0xac/0x110 [i2c_mux]
    [   12.686306]  ? i2c_mux_reg_set+0x200/0x200 [i2c_mux_reg]
    [   12.686313]  i2c_mux_reg_probe+0x22c/0x731 [i2c_mux_reg]
    [   12.686322]  ? i2c_mux_reg_deselect+0x60/0x60 [i2c_mux_reg]
    [   12.686346]  platform_drv_probe+0xa8/0x110
    [   12.686351]  really_probe+0x185/0x720
    [   12.686358]  driver_probe_device+0xdf/0x1f0
    ...
    [   12.686522] i2c i2c-1: Added multiplexed i2c bus 8
    [   12.686621] device: 'i2c-9': device_add
    [   12.686626] kobject_add_internal failed for i2c-9 (error: -2 parent: i2c-1)
    [   12.694729] i2c-core: adapter 'i2c-1-mux (chan_id 8)': can't register device (-2)
    [   12.705726] i2c i2c-1: failed to add mux-adapter 8 as bus 9 (error=-2)
    [   12.714494] device: 'i2c-8': device_unregister
    [   12.714537] device: 'i2c-8': device_unregister
    
    Fixes: 6613d18e9038 ("platform/x86: mlx-platform: Move module from arch/x86")
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26566830cacb73fabed8f53d8aec256b789570a1
Author: Don Brace <don.brace@microsemi.com>
Date:   Mon Jun 3 16:43:29 2019 -0500

    scsi: hpsa: correct ioaccel2 chaining
    
    [ Upstream commit 625d7d3518875c4d303c652a198feaa13d9f52d9 ]
    
    - set ioaccel2_sg_element member 'chain_indicator' to IOACCEL2_LAST_SG for
      the last s/g element.
    
    - set ioaccel2_sg_element member 'chain_indicator' to IOACCEL2_CHAIN when
      chaining.
    
    Reviewed-by: Bader Ali - Saleh <bader.alisaleh@microsemi.com>
    Reviewed-by: Scott Teel <scott.teel@microsemi.com>
    Reviewed-by: Matt Perricone <matt.perricone@microsemi.com>
    Signed-off-by: Don Brace <don.brace@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3904ebeaf899354d57d66ab484e276b39d0a8682
Author: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Date:   Wed Jun 5 15:45:52 2019 +0200

    SoC: rt274: Fix internal jack assignment in set_jack callback
    
    [ Upstream commit 04268bf2757a125616b6c2140e6250f43b7b737a ]
    
    When we call snd_soc_component_set_jack(component, NULL, NULL) we should
    set rt274->jack to passed jack, so when interrupt is triggered it calls
    snd_soc_jack_report(rt274->jack, ...) with proper value.
    
    This fixes problem in machine where in register, we call
    snd_soc_register(component, &headset, NULL), which just calls
    rt274_mic_detect via callback.
    Now when machine driver is removed "headset" will be gone, so we
    need to tell codec driver that it's gone with:
    snd_soc_register(component, NULL, NULL), but we also need to be able
    to handle NULL jack argument here gracefully.
    If we don't set it to NULL, next time the rt274_irq runs it will call
    snd_soc_jack_report with first argument being invalid pointer and there
    will be Oops.
    
    Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b38688abdc2e68fac0c826e8d3391b3509003d8c
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed May 22 14:07:36 2019 +0200

    usb: gadget: udc: lpc32xx: allocate descriptor with GFP_ATOMIC
    
    [ Upstream commit fbc318afadd6e7ae2252d6158cf7d0c5a2132f7d ]
    
    Gadget drivers may queue request in interrupt context. This would lead to
    a descriptor allocation in that context. In that case we would hit
    BUG_ON(in_interrupt()) in __get_vm_area_node.
    
    Also remove the unnecessary cast.
    
    Acked-by: Sylvain Lemieux <slemieux.tyco@gmail.com>
    Tested-by: James Grant <jamesg@zaltys.org>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2342af2c05886ddb76a1ee9c460b4d95ebacf8ae
Author: Young Xiao <92siuyang@gmail.com>
Date:   Tue May 28 20:17:54 2019 +0800

    usb: gadget: fusb300_udc: Fix memory leak of fusb300->ep[i]
    
    [ Upstream commit 62fd0e0a24abeebe2c19fce49dd5716d9b62042d ]
    
    There is no deallocation of fusb300->ep[i] elements, allocated at
    fusb300_probe.
    
    The patch adds deallocation of fusb300->ep array elements.
    
    Signed-off-by: Young Xiao <92siuyang@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9196717808f91c7bfd127965bfe90784742941d
Author: Marcus Cooper <codekipper@gmail.com>
Date:   Mon Jun 3 19:47:28 2019 +0200

    ASoC: sun4i-i2s: Add offset to RX channel select
    
    [ Upstream commit f9927000cb35f250051f0f1878db12ee2626eea1 ]
    
    Whilst testing the capture functionality of the i2s on the newer
    SoCs it was noticed that the recording was somewhat distorted.
    This was due to the offset not being set correctly on the receiver
    side.
    
    Signed-off-by: Marcus Cooper <codekipper@gmail.com>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc28a31e3310a4b474b9d7b31fa6a5b992b79a7b
Author: Marcus Cooper <codekipper@gmail.com>
Date:   Mon Jun 3 19:47:27 2019 +0200

    ASoC: sun4i-i2s: Fix sun8i tx channel offset mask
    
    [ Upstream commit 7e46169a5f35762f335898a75d1b8a242f2ae0f5 ]
    
    Although not causing any noticeable issues, the mask for the
    channel offset is covering too many bits.
    
    Signed-off-by: Marcus Cooper <codekipper@gmail.com>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c930b3bca642c9dbc8a6077ebc82d9bbe96cc79f
Author: Yu-Hsuan Hsu <yuhsuan@chromium.org>
Date:   Tue Jun 4 18:49:09 2019 +0800

    ASoC: max98090: remove 24-bit format support if RJ is 0
    
    [ Upstream commit 5628c8979642a076f91ee86c3bae5ad251639af0 ]
    
    The supported formats are S16_LE and S24_LE now. However, by datasheet
    of max98090, S24_LE is only supported when it is in the right justified
    mode. We should remove 24-bit format if it is not in that mode to avoid
    triggering error.
    
    Signed-off-by: Yu-Hsuan Hsu <yuhsuan@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3421d820391ccb621522fafda575aa506832bc1c
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Thu May 30 17:18:47 2019 +0800

    drm/mediatek: call mtk_dsi_stop() after mtk_drm_crtc_atomic_disable()
    
    [ Upstream commit 2458d9d6d94be982b917e93c61a89b4426f32e31 ]
    
    mtk_dsi_stop() should be called after mtk_drm_crtc_atomic_disable(), which
    needs ovl irq for drm_crtc_wait_one_vblank(), since after mtk_dsi_stop() is
    called, ovl irq will be disabled. If drm_crtc_wait_one_vblank() is called
    after last irq, it will timeout with this message: "vblank wait timed out
    on crtc 0". This happens sometimes when turning off the screen.
    
    In drm_atomic_helper.c#disable_outputs(),
    the calling sequence when turning off the screen is:
    
    1. mtk_dsi_encoder_disable()
         --> mtk_output_dsi_disable()
           --> mtk_dsi_stop();  /* sometimes make vblank timeout in
                                   atomic_disable */
           --> mtk_dsi_poweroff();
    2. mtk_drm_crtc_atomic_disable()
         --> drm_crtc_wait_one_vblank();
         ...
           --> mtk_dsi_ddp_stop()
             --> mtk_dsi_poweroff();
    
    mtk_dsi_poweroff() has reference count design, change to make
    mtk_dsi_stop() called in mtk_dsi_poweroff() when refcount is 0.
    
    Fixes: 0707632b5bac ("drm/mediatek: update DSI sub driver flow for sending commands to panel")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4462499d5198909edab2bb914ac9ee3b4a1ec5e1
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:54 2019 +0800

    drm/mediatek: call drm_atomic_helper_shutdown() when unbinding driver
    
    [ Upstream commit cf49b24ffa62766f8f04cd1c4cf17b75d29b240a ]
    
    shutdown all CRTC when unbinding drm driver.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6042bfc5f38e33db0feb9873ec4d8e6ba044d251
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:52 2019 +0800

    drm/mediatek: fix unbind functions
    
    [ Upstream commit 8fd7a37b191f93737f6280a9b5de65f98acc12c9 ]
    
    detatch panel in mtk_dsi_destroy_conn_enc(), since .bind will try to
    attach it again.
    
    Fixes: 2e54c14e310f ("drm/mediatek: Add DSI sub driver")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4adcbc46469d40a9dd1904072b096ab9d1a18739
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu May 16 15:56:56 2019 +0800

    spi: bitbang: Fix NULL pointer dereference in spi_unregister_master
    
    [ Upstream commit 5caaf29af5ca82d5da8bc1d0ad07d9e664ccf1d8 ]
    
    If spi_register_master fails in spi_bitbang_start
    because device_add failure, We should return the
    error code other than 0, otherwise calling
    spi_bitbang_stop may trigger NULL pointer dereference
    like this:
    
    BUG: KASAN: null-ptr-deref in __list_del_entry_valid+0x45/0xd0
    Read of size 8 at addr 0000000000000000 by task syz-executor.0/3661
    
    CPU: 0 PID: 3661 Comm: syz-executor.0 Not tainted 5.1.0+ #28
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     dump_stack+0xa9/0x10e
     ? __list_del_entry_valid+0x45/0xd0
     ? __list_del_entry_valid+0x45/0xd0
     __kasan_report+0x171/0x18d
     ? __list_del_entry_valid+0x45/0xd0
     kasan_report+0xe/0x20
     __list_del_entry_valid+0x45/0xd0
     spi_unregister_controller+0x99/0x1b0
     spi_lm70llp_attach+0x3ae/0x4b0 [spi_lm70llp]
     ? 0xffffffffc1128000
     ? klist_next+0x131/0x1e0
     ? driver_detach+0x40/0x40 [parport]
     port_check+0x3b/0x50 [parport]
     bus_for_each_dev+0x115/0x180
     ? subsys_dev_iter_exit+0x20/0x20
     __parport_register_driver+0x1f0/0x210 [parport]
     ? 0xffffffffc1150000
     do_one_initcall+0xb9/0x3b5
     ? perf_trace_initcall_level+0x270/0x270
     ? kasan_unpoison_shadow+0x30/0x40
     ? kasan_unpoison_shadow+0x30/0x40
     do_init_module+0xe0/0x330
     load_module+0x38eb/0x4270
     ? module_frob_arch_sections+0x20/0x20
     ? kernel_read_file+0x188/0x3f0
     ? find_held_lock+0x6d/0xd0
     ? fput_many+0x1a/0xe0
     ? __do_sys_finit_module+0x162/0x190
     __do_sys_finit_module+0x162/0x190
     ? __ia32_sys_init_module+0x40/0x40
     ? __mutex_unlock_slowpath+0xb4/0x3f0
     ? wait_for_completion+0x240/0x240
     ? vfs_write+0x160/0x2a0
     ? lockdep_hardirqs_off+0xb5/0x100
     ? mark_held_locks+0x1a/0x90
     ? do_syscall_64+0x14/0x2a0
     do_syscall_64+0x72/0x2a0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 702a4879ec33 ("spi: bitbang: Let spi_bitbang_start() take a reference to master")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Axel Lin <axel.lin@ingics.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f0295c60dae6248570eda7b51d66c4b53148729
Author: Libin Yang <libin.yang@intel.com>
Date:   Wed May 8 10:32:41 2019 +0800

    ASoC: soc-pcm: BE dai needs prepare when pause release after resume
    
    [ Upstream commit 5087a8f17df868601cd7568299e91c28086d2b45 ]
    
    If playback/capture is paused and system enters S3, after system returns
    from suspend, BE dai needs to call prepare() callback when playback/capture
    is released from pause if RESUME_INFO flag is not set.
    
    Currently, the dpcm_be_dai_prepare() function will block calling prepare()
    if the pcm is in SND_SOC_DPCM_STATE_PAUSED state. This will cause the
    following test case fail if the pcm uses BE:
    
    playback -> pause -> S3 suspend -> S3 resume -> pause release
    
    The playback may exit abnormally when pause is released because the BE dai
    prepare() is not called.
    
    This patch allows dpcm_be_dai_prepare() to call dai prepare() callback in
    SND_SOC_DPCM_STATE_PAUSED state.
    
    Signed-off-by: Libin Yang <libin.yang@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9bfb7035a30c75596a58789b9956bc26c935f78
Author: Matt Flax <flatmax@flatmax.org>
Date:   Wed May 8 16:33:13 2019 +1000

    ASoC : cs4265 : readable register too low
    
    [ Upstream commit f3df05c805983427319eddc2411a2105ee1757cf ]
    
    The cs4265_readable_register function stopped short of the maximum
    register.
    
    An example bug is taken from :
    https://github.com/Audio-Injector/Ultra/issues/25
    
    Where alsactl store fails with :
    Cannot read control '2,0,0,C Data Buffer,0': Input/output error
    
    This patch fixes the bug by setting the cs4265 to have readable
    registers up to the maximum hardware register CS4265_MAX_REGISTER.
    
    Signed-off-by: Matt Flax <flatmax@flatmax.org>
    Reviewed-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05206de4e9ae033afd32f685c4a005cbc1dceb39
Author: Matias Karhumaa <matias.karhumaa@gmail.com>
Date:   Tue Jul 2 16:35:09 2019 +0200

    Bluetooth: Fix faulty expression for minimum encryption key size check
    
    commit eca94432934fe5f141d084f2e36ee2c0e614cc04 upstream.
    
    Fix minimum encryption key size check so that HCI_MIN_ENC_KEY_SIZE is
    also allowed as stated in the comment.
    
    This bug caused connection problems with devices having maximum
    encryption key size of 7 octets (56-bit).
    
    Fixes: 693cd8ce3f88 ("Bluetooth: Fix regression with minimum encryption key size alignment")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203997
    Signed-off-by: Matias Karhumaa <matias.karhumaa@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
