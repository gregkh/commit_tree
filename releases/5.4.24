commit cff670b3eb68257029e2977a6bfeac7d9b829e9a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 5 16:43:52 2020 +0100

    Linux 5.4.24

commit 6f9cff84dde800b4d9eab071810fbe284686601e
Author: Jan Kara <jack@suse.cz>
Date:   Thu Feb 6 15:28:12 2020 +0100

    blktrace: Protect q->blk_trace with RCU
    
    [ Upstream commit c780e86dd48ef6467a1146cf7d0fe1e05a635039 ]
    
    KASAN is reporting that __blk_add_trace() has a use-after-free issue
    when accessing q->blk_trace. Indeed the switching of block tracing (and
    thus eventual freeing of q->blk_trace) is completely unsynchronized with
    the currently running tracing and thus it can happen that the blk_trace
    structure is being freed just while __blk_add_trace() works on it.
    Protect accesses to q->blk_trace by RCU during tracing and make sure we
    wait for the end of RCU grace period when shutting down tracing. Luckily
    that is rare enough event that we can afford that. Note that postponing
    the freeing of blk_trace to an RCU callback should better be avoided as
    it could have unexpected user visible side-effects as debugfs files
    would be still existing for a short while block tracing has been shut
    down.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=205711
    CC: stable@vger.kernel.org
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reported-by: Tristan Madani <tristmd@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cad53d5e2e23d26aab0357040dc6e3393c3ba7f5
Author: Jim Mattson <jmattson@google.com>
Date:   Fri Dec 6 15:46:36 2019 -0800

    kvm: nVMX: VMWRITE checks unsupported field before read-only field
    
    commit 693e02cc24090c379217138719d9d84e50036b24 upstream.
    
    According to the SDM, VMWRITE checks to see if the secondary source
    operand corresponds to an unsupported VMCS field before it checks to
    see if the secondary source operand corresponds to a VM-exit
    information field and the processor does not support writing to
    VM-exit information fields.
    
    Fixes: 49f705c5324aa ("KVM: nVMX: Implement VMREAD and VMWRITE")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Peter Shier <pshier@google.com>
    Reviewed-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Jon Cargille <jcargill@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 119b1e588a761b1cf216553d49b027b191b10e84
Author: Jim Mattson <jmattson@google.com>
Date:   Fri Dec 6 15:46:35 2019 -0800

    kvm: nVMX: VMWRITE checks VMCS-link pointer before VMCS field
    
    commit dd2d6042b7f4a5440705b4ffc6c4c2dba81a43b7 upstream.
    
    According to the SDM, a VMWRITE in VMX non-root operation with an
    invalid VMCS-link pointer results in VMfailInvalid before the validity
    of the VMCS field in the secondary source operand is checked.
    
    For consistency, modify both handle_vmwrite and handle_vmread, even
    though there was no problem with the latter.
    
    Fixes: 6d894f498f5d1 ("KVM: nVMX: vmread/vmwrite: Use shadow vmcs12 if running L2")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Cc: Liran Alon <liran.alon@oracle.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Peter Shier <pshier@google.com>
    Reviewed-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Jon Cargille <jcargill@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bae7e7fac979d44b20e58509d6f141b26a9aa45
Author: David Rientjes <rientjes@google.com>
Date:   Thu Jan 30 22:14:48 2020 -0800

    mm, thp: fix defrag setting if newline is not used
    
    commit f42f25526502d851d0e3ca1e46297da8aafce8a7 upstream.
    
    If thp defrag setting "defer" is used and a newline is *not* used when
    writing to the sysfs file, this is interpreted as the "defer+madvise"
    option.
    
    This is because we do prefix matching and if five characters are written
    without a newline, the current code ends up comparing to the first five
    bytes of the "defer+madvise" option and using that instead.
    
    Use the more appropriate sysfs_streq() that handles the trailing newline
    for us.  Since this doubles as a nice cleanup, do it in enabled_store()
    as well.
    
    The current implementation relies on prefix matching: the number of
    bytes compared is either the number of bytes written or the length of
    the option being compared.  With a newline, "defer\n" does not match
    "defer+"madvise"; without a newline, however, "defer" is considered to
    match "defer+madvise" (prefix matching is only comparing the first five
    bytes).  End result is that writing "defer" is broken unless it has an
    additional trailing character.
    
    This means that writing "madv" in the past would match and set
    "madvise".  With strict checking, that no longer is the case but it is
    unlikely anybody is currently doing this.
    
    Link: http://lkml.kernel.org/r/alpine.DEB.2.21.2001171411020.56385@chino.kir.corp.google.com
    Fixes: 21440d7eb904 ("mm, thp: add new defer+madvise defrag option")
    Signed-off-by: David Rientjes <rientjes@google.com>
    Suggested-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0eb282cb1ff7c396844c005a6a8166ec77127e39
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Thu Jan 30 22:14:29 2020 -0800

    mm/huge_memory.c: use head to check huge zero page
    
    commit cb829624867b5ab10bc6a7036d183b1b82bfe9f8 upstream.
    
    The page could be a tail page, if this is the case, this BUG_ON will
    never be triggered.
    
    Link: http://lkml.kernel.org/r/20200110032610.26499-1-richardw.yang@linux.intel.com
    Fixes: e9b61f19858a ("thp: reintroduce split_huge_page()")
    
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cb5db61afa3561f29e8125d00dbc483ebd96ae0
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Thu Jan 30 22:12:43 2020 -0800

    mm/gup: allow FOLL_FORCE for get_user_pages_fast()
    
    commit f4000fdf435b8301a11cf85237c561047f8c4c72 upstream.
    
    Commit 817be129e6f2 ("mm: validate get_user_pages_fast flags") allowed
    only FOLL_WRITE and FOLL_LONGTERM to be passed to get_user_pages_fast().
    This, combined with the fact that get_user_pages_fast() falls back to
    "slow gup", which *does* accept FOLL_FORCE, leads to an odd situation:
    if you need FOLL_FORCE, you cannot call get_user_pages_fast().
    
    There does not appear to be any reason for filtering out FOLL_FORCE.
    There is nothing in the _fast() implementation that requires that we
    avoid writing to the pages.  So it appears to have been an oversight.
    
    Fix by allowing FOLL_FORCE to be set for get_user_pages_fast().
    
    Link: http://lkml.kernel.org/r/20200107224558.2362728-9-jhubbard@nvidia.com
    Fixes: 817be129e6f2 ("mm: validate get_user_pages_fast flags")
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Cc: Björn Töpel <bjorn.topel@intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Cc: Jason Gunthorpe <jgg@ziepe.ca>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Kirill A. Shutemov <kirill@shutemov.name>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bb9bfcde8b5453dc838cf597c6d6e54232e041b
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Jan 30 22:12:03 2020 -0800

    mm/debug.c: always print flags in dump_page()
    
    commit 5b57b8f22709f07c0ab5921c94fd66e8c59c3e11 upstream.
    
    Commit 76a1850e4572 ("mm/debug.c: __dump_page() prints an extra line")
    inadvertently removed printing of page flags for pages that are neither
    anon nor ksm nor have a mapping.  Fix that.
    
    Using pr_cont() again would be a solution, but the commit explicitly
    removed its use.  Avoiding the danger of mixing up split lines from
    multiple CPUs might be beneficial for near-panic dumps like this, so fix
    this without reintroducing pr_cont().
    
    Link: http://lkml.kernel.org/r/9f884d5c-ca60-dc7b-219c-c081c755fab6@suse.cz
    Fixes: 76a1850e4572 ("mm/debug.c: __dump_page() prints an extra line")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Reported-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Reported-by: Michal Hocko <mhocko@kernel.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Pavel Tatashin <pavel.tatashin@microsoft.com>
    Cc: Ralph Campbell <rcampbell@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2482da809fd30d9e31c2088937d545887ef3cd03
Author: Waiman Long <longman@redhat.com>
Date:   Wed Dec 11 16:31:39 2019 -0500

    locking/lockdep: Fix lockdep_stats indentation problem
    
    commit a030f9767da1a6bbcec840fc54770eb11c2414b6 upstream.
    
    It was found that two lines in the output of /proc/lockdep_stats have
    indentation problem:
    
      # cat /proc/lockdep_stats
         :
       in-process chains:                   25057
       stack-trace entries:                137827 [max: 524288]
       number of stack traces:        7973
       number of stack hash chains:   6355
       combined max dependencies:      1356414598
       hardirq-safe locks:                     57
       hardirq-unsafe locks:                 1286
         :
    
    All the numbers displayed in /proc/lockdep_stats except the two stack
    trace numbers are formatted with a field with of 11. To properly align
    all the numbers, a field width of 11 is now added to the two stack
    trace numbers.
    
    Fixes: 8c779229d0f4 ("locking/lockdep: Report more stack trace statistics")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Link: https://lkml.kernel.org/r/20191211213139.29934-1-longman@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d70361dec88c814665edffa34928735719364d3
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Jan 7 15:25:37 2020 -0800

    xfs: clear kernel only flags in XFS_IOC_ATTRMULTI_BY_HANDLE
    
    commit 953aa9d136f53e226448dbd801a905c28f8071bf upstream.
    
    Don't allow passing arbitrary flags as they change behavior including
    memory allocation that the call stack is not prepared for.
    
    Fixes: ddbca70cc45c ("xfs: allocate xattr buffer on demand")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7906e29efaf1fa1d2b482ba8dd955895947289fe
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Jun 20 21:21:59 2019 +0530

    bus: tegra-aconnect: Remove PM_CLK dependency
    
    commit 2f56acf818a08a9187ac8ec6e3d994fc13dc368d upstream.
    
    The ACONNECT bus driver does not use pm-clk interface anymore and hence
    the dependency can be removed from its Kconfig option.
    
    Fixes: 0d7dab926130 ("bus: tegra-aconnect: use devm_clk_*() helpers")
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd3fd6dec30cf7f8657dbc0170e8cc907b4dd1cc
Author: Matteo Croce <mcroce@redhat.com>
Date:   Thu Jan 30 20:10:19 2020 +0100

    netfilter: nf_flowtable: fix documentation
    
    commit 78e06cf430934fc3768c342cbebdd1013dcd6fa7 upstream.
    
    In the flowtable documentation there is a missing semicolon, the command
    as is would give this error:
    
        nftables.conf:5:27-33: Error: syntax error, unexpected devices, expecting newline or semicolon
                        hook ingress priority 0 devices = { br0, pppoe-data };
                                                ^^^^^^^
        nftables.conf:4:12-13: Error: invalid hook (null)
                flowtable ft {
                          ^^
    
    Fixes: 19b351f16fd9 ("netfilter: add flowtable documentation")
    Signed-off-by: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit beffc17b843c57a6fbf697d458d28d02b2cba095
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Dec 13 16:53:05 2019 +0800

    netfilter: nft_tunnel: no need to call htons() when dumping ports
    
    commit cf3e204a1ca5442190018a317d9ec181b4639bd6 upstream.
    
    info->key.tp_src and tp_dst are __be16, when using nla_put_be16()
    to dump them, htons() is not needed, so remove it in this patch.
    
    Fixes: af308b94a2a4 ("netfilter: nf_tables: add tunnel support")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 860a70e2a6f68e31b4bb3c4e34f198119d39f1f5
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue Jan 14 11:06:02 2020 -0800

    thermal: brcmstb_thermal: Do not use DT coefficients
    
    commit e1ff6fc22f19e2af8adbad618526b80067911d40 upstream.
    
    At the time the brcmstb_thermal driver and its binding were merged, the
    DT binding did not make the coefficients properties a mandatory one,
    therefore all users of the brcmstb_thermal driver out there have a non
    functional implementation with zero coefficients. Even if these
    properties were provided, the formula used for computation is incorrect.
    
    The coefficients are entirely process specific (right now, only 28nm is
    supported) and not board or SoC specific, it is therefore appropriate to
    hard code them in the driver given the compatibility string we are
    probed with which has to be updated whenever a new process is
    introduced.
    
    We remove the existing coefficients definition since subsequent patches
    are going to add support for a new process and will introduce new
    coefficients as well.
    
    Fixes: 9e03cf1b2dd5 ("thermal: add brcmstb AVS TMON driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200114190607.29339-2-f.fainelli@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c981ab6a1c086588fe80968ff44e80ffa1bb1c2a
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 19 08:46:50 2019 +0100

    thermal: db8500: Depromote debug print
    
    commit c56dcfa3d4d0f49f0c37cd24886aa86db7aa7f30 upstream.
    
    We are not interested in getting this debug print on our
    console all the time.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Stephan Gerhold <stephan@gerhold.net>
    Fixes: 6c375eccded4 ("thermal: db8500: Rewrite to be a pure OF sensor")
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Stephan Gerhold <stephan@gerhold.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191119074650.2664-1-linus.walleij@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e78726fb7e8559852f4cb27755e103af0ca025e
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Mon Jan 13 11:51:56 2020 +0100

    ubifs: Fix ino_t format warnings in orphan_delete()
    
    commit 155fc6ba488a8bdfd1d3be3d7ba98c9cec2b2429 upstream.
    
    On alpha and s390x:
    
        fs/ubifs/debug.h:158:11: warning: format ‘%lu’ expects argument of type ‘long unsigned int’, but argument 4 has type ‘ino_t {aka unsigned int}’ [-Wformat=]
        ...
        fs/ubifs/orphan.c:132:3: note: in expansion of macro ‘dbg_gen’
           dbg_gen("deleted twice ino %lu", orph->inum);
        ...
        fs/ubifs/orphan.c:140:3: note: in expansion of macro ‘dbg_gen’
           dbg_gen("delete later ino %lu", orph->inum);
    
    __kernel_ino_t is "unsigned long" on most architectures, but not on
    alpha and s390x, where it is "unsigned int".  Hence when printing an
    ino_t, it should always be cast to "unsigned long" first.
    
    Fix this by re-adding the recently removed casts.
    
    Fixes: 8009ce956c3d2802 ("ubifs: Don't leak orphans on memory during commit")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef0dcab6d21cc2e717ad8d9e4138646c8c7bd886
Author: Neeraj Upadhyay <neeraju@codeaurora.org>
Date:   Tue Nov 19 11:50:52 2019 -0800

    rcu: Allow only one expedited GP to run concurrently with wakeups
    
    commit 4bc6b745e5cbefed92c48071e28a5f41246d0470 upstream.
    
    The current expedited RCU grace-period code expects that a task
    requesting an expedited grace period cannot awaken until that grace
    period has reached the wakeup phase.  However, it is possible for a long
    preemption to result in the waiting task never sleeping.  For example,
    consider the following sequence of events:
    
    1.      Task A starts an expedited grace period by invoking
            synchronize_rcu_expedited().  It proceeds normally up to the
            wait_event() near the end of that function, and is then preempted
            (or interrupted or whatever).
    
    2.      The expedited grace period completes, and a kworker task starts
            the awaken phase, having incremented the counter and acquired
            the rcu_state structure's .exp_wake_mutex.  This kworker task
            is then preempted or interrupted or whatever.
    
    3.      Task A resumes and enters wait_event(), which notes that the
            expedited grace period has completed, and thus doesn't sleep.
    
    4.      Task B starts an expedited grace period exactly as did Task A,
            complete with the preemption (or whatever delay) just before
            the call to wait_event().
    
    5.      The expedited grace period completes, and another kworker
            task starts the awaken phase, having incremented the counter.
            However, it blocks when attempting to acquire the rcu_state
            structure's .exp_wake_mutex because step 2's kworker task has
            not yet released it.
    
    6.      Steps 4 and 5 repeat, resulting in overflow of the rcu_node
            structure's ->exp_wq[] array.
    
    In theory, this is harmless.  Tasks waiting on the various ->exp_wq[]
    array will just be spuriously awakened, but they will just sleep again
    on noting that the rcu_state structure's ->expedited_sequence value has
    not advanced far enough.
    
    In practice, this wastes CPU time and is an accident waiting to happen.
    This commit therefore moves the rcu_exp_gp_seq_end() call that officially
    ends the expedited grace period (along with associate tracing) until
    after the ->exp_wake_mutex has been acquired.  This prevents Task A from
    awakening prematurely, thus preventing more than one expedited grace
    period from being in flight during a previous expedited grace period's
    wakeup phase.
    
    Fixes: 3b5f668e715b ("rcu: Overlap wakeups with next expedited grace period")
    Signed-off-by: Neeraj Upadhyay <neeraju@codeaurora.org>
    [ paulmck: Added updated comment. ]
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2aa7abbdc2977f93447dc0935c202be37d3288dc
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:55:06 2019 -0800

    KVM: x86: Remove spurious clearing of async #PF MSR
    
    commit 208050dac5ef4de5cb83ffcafa78499c94d0b5ad upstream.
    
    Remove a bogus clearing of apf.msr_val from kvm_arch_vcpu_destroy().
    
    apf.msr_val is only set to a non-zero value by kvm_pv_enable_async_pf(),
    which is only reachable by kvm_set_msr_common(), i.e. by writing
    MSR_KVM_ASYNC_PF_EN.  KVM does not autonomously write said MSR, i.e.
    can only be written via KVM_SET_MSRS or KVM_RUN.  Since KVM_SET_MSRS and
    KVM_RUN are vcpu ioctls, they require a valid vcpu file descriptor.
    kvm_arch_vcpu_destroy() is only called if KVM_CREATE_VCPU fails, and KVM
    declares KVM_CREATE_VCPU successful once the vcpu fd is installed and
    thus visible to userspace.  Ergo, apf.msr_val cannot be non-zero when
    kvm_arch_vcpu_destroy() is called.
    
    Fixes: 344d9588a9df0 ("KVM: Add PV MSR to enable asynchronous page faults delivery.")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64521f9b2ca9c27d9ce1c2b4922818313c4946ad
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Dec 18 13:55:05 2019 -0800

    KVM: x86: Remove spurious kvm_mmu_unload() from vcpu destruction path
    
    commit 9d979c7e6ff43ca3200ffcb74f57415fd633a2da upstream.
    
    x86 does not load its MMU until KVM_RUN, which cannot be invoked until
    after vCPU creation succeeds.  Given that kvm_arch_vcpu_destroy() is
    called if and only if vCPU creation fails, it is impossible for the MMU
    to be loaded.
    
    Note, the bogus kvm_mmu_unload() call was added during an unrelated
    refactoring of vCPU allocation, i.e. was presumably added as an
    opportunstic "fix" for a perceived leak.
    
    Fixes: fb3f0f51d92d1 ("KVM: Dynamically allocate vcpus")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56671961b34d9f1f79a61ac7597f7acaed75b6f2
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Thu Dec 12 04:05:05 2019 +0800

    x86/resctrl: Check monitoring static key in the MBM overflow handler
    
    commit 536a0d8e79fb928f2735db37dda95682b6754f9a upstream.
    
    Currently, there are three static keys in the resctrl file system:
    rdt_mon_enable_key and rdt_alloc_enable_key indicate if the monitoring
    feature and the allocation feature are enabled, respectively. The
    rdt_enable_key is enabled when either the monitoring feature or the
    allocation feature is enabled.
    
    If no monitoring feature is present (either hardware doesn't support a
    monitoring feature or the feature is disabled by the kernel command line
    option "rdt="), rdt_enable_key is still enabled but rdt_mon_enable_key
    is disabled.
    
    MBM is a monitoring feature. The MBM overflow handler intends to
    check if the monitoring feature is not enabled for fast return.
    
    So check the rdt_mon_enable_key in it instead of the rdt_enable_key as
    former is the more accurate check.
    
     [ bp: Massage commit message. ]
    
    Fixes: e33026831bdb ("x86/intel_rdt/mbm: Handle counter overflow")
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/1576094705-13660-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d847804f8f8a8cd23f38e0b4fbd078d31850137b
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Mon Jan 13 11:43:57 2020 +0100

    perf ui gtk: Add missing zalloc object
    
    commit 604e2139a1026793b8c2172bd92c7e9d039a5cf0 upstream.
    
    When we moved zalloc.o to the library we missed gtk library which needs
    it compiled in, otherwise the missing __zfree symbol will cause the
    library to fail to load.
    
    Adding the zalloc object to the gtk library build.
    
    Fixes: 7f7c536f23e6 ("tools lib: Adopt zalloc()/zfree() from tools/perf")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jelle van der Waa <jelle@vdwaa.nl>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200113104358.123511-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27f7e492d8fe6a53a0a7afe0c989f2fe61417e90
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon Dec 16 13:22:33 2019 -0300

    perf hists browser: Restore ESC as "Zoom out" of DSO/thread/etc
    
    commit 3f7774033e6820d25beee5cf7aefa11d4968b951 upstream.
    
    We need to set actions->ms.map since 599a2f38a989 ("perf hists browser:
    Check sort keys before hot key actions"), as in that patch we bail out
    if map is NULL.
    
    Reviewed-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Fixes: 599a2f38a989 ("perf hists browser: Check sort keys before hot key actions")
    Link: https://lkml.kernel.org/n/tip-wp1ssoewy6zihwwexqpohv0j@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f68b6a015a811ffc072d61f3ba1ba32bbc018612
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 11 10:03:56 2019 +0100

    pwm: omap-dmtimer: put_device() after of_find_device_by_node()
    
    commit c7cb3a1dd53f63c64fb2b567d0be130b92a44d91 upstream.
    
    This was found by coccicheck:
    
            drivers/pwm/pwm-omap-dmtimer.c:304:2-8: ERROR: missing put_device;
            call of_find_device_by_node on line 255, but without a corresponding
            object release within this function.
    
    Reported-by: Markus Elfring <elfring@users.sourceforge.net>
    Fixes: 6604c6556db9 ("pwm: Add PWM driver for OMAP using dual-mode timers")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fabae5c846f2c14f98f7e96228caa0e871cf922
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 14 19:52:39 2020 +0100

    lib/vdso: Update coarse timekeeper unconditionally
    
    commit 9f24c540f7f8eb3a981528da9a9a636a5bdf5987 upstream.
    
    The low resolution parts of the VDSO, i.e.:
    
      clock_gettime(CLOCK_*_COARSE), clock_getres(), time()
    
    can be used even if there is no VDSO capable clocksource.
    
    But if an architecture opts out of the VDSO data update then this
    information becomes stale. This affects ARM when there is no architected
    timer available. The lack of update causes userspace to use stale data
    forever.
    
    Make the update of the low resolution parts unconditional and only skip
    the update of the high resolution parts if the architecture requests it.
    
    Fixes: 44f57d788e7d ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200114185946.765577901@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91ebef8618bf14eb335c58f4331c1c205e1ed424
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 14 19:52:38 2020 +0100

    lib/vdso: Make __arch_update_vdso_data() logic understandable
    
    commit 9a6b55ac4a44060bcb782baf002859b2a2c63267 upstream.
    
    The function name suggests that this is a boolean checking whether the
    architecture asks for an update of the VDSO data, but it works the other
    way round. To spare further confusion invert the logic.
    
    Fixes: 44f57d788e7d ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200114185946.656652824@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74c515e0491180e15b52f6b3acb2bc174095dbdd
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Nov 27 14:57:04 2019 +0900

    kprobes: Set unoptimized flag after unoptimizing code
    
    commit f66c0447cca1281116224d474cdb37d6a18e4b5b upstream.
    
    Set the unoptimized flag after confirming the code is completely
    unoptimized. Without this fix, when a kprobe hits the intermediate
    modified instruction (the first byte is replaced by an INT3, but
    later bytes can still be a jump address operand) while unoptimizing,
    it can return to the middle byte of the modified code, which causes
    an invalid instruction exception in the kernel.
    
    Usually, this is a rare case, but if we put a probe on the function
    call while text patching, it always causes a kernel panic as below:
    
     # echo p text_poke+5 > kprobe_events
     # echo 1 > events/kprobes/enable
     # echo 0 > events/kprobes/enable
    
    invalid opcode: 0000 [#1] PREEMPT SMP PTI
     RIP: 0010:text_poke+0x9/0x50
     Call Trace:
      arch_unoptimize_kprobe+0x22/0x28
      arch_unoptimize_kprobes+0x39/0x87
      kprobe_optimizer+0x6e/0x290
      process_one_work+0x2a0/0x610
      worker_thread+0x28/0x3d0
      ? process_one_work+0x610/0x610
      kthread+0x10d/0x130
      ? kthread_park+0x80/0x80
      ret_from_fork+0x3a/0x50
    
    text_poke() is used for patching the code in optprobes.
    
    This can happen even if we blacklist text_poke() and other functions,
    because there is a small time window during which we show the intermediate
    code to other CPUs.
    
     [ mingo: Edited the changelog. ]
    
    Tested-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: bristot@redhat.com
    Fixes: 6274de4984a6 ("kprobes: Support delayed unoptimizing")
    Link: https://lkml.kernel.org/r/157483422375.25881.13508326028469515760.stgit@devnote2
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8807eb1e688f25d35f127337360f70e9ac13f79
Author: Janne Karhunen <janne.karhunen@gmail.com>
Date:   Wed Jan 15 17:42:30 2020 +0200

    ima: ima/lsm policy rule loading logic bug fixes
    
    commit 483ec26eed42bf050931d9a5c5f9f0b5f2ad5f3b upstream.
    
    Keep the ima policy rules around from the beginning even if they appear
    invalid at the time of loading, as they may become active after an lsm
    policy load.  However, loading a custom IMA policy with unknown LSM
    labels is only safe after we have transitioned from the "built-in"
    policy rules to a custom IMA policy.
    
    Patch also fixes the rule re-use during the lsm policy reload and makes
    some prints a bit more human readable.
    
    Changelog:
    v4:
    - Do not allow the initial policy load refer to non-existing lsm rules.
    v3:
    - Fix too wide policy rule matching for non-initialized LSMs
    v2:
    - Fix log prints
    
    Fixes: b16942455193 ("ima: use the lsm policy update notifier")
    Cc: Casey Schaufler <casey@schaufler-ca.com>
    Reported-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Janne Karhunen <janne.karhunen@gmail.com>
    Signed-off-by: Konsta Karsisto <konsta.karsisto@gmail.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caadb4b91b41e0581ee94082d87ba3df7ed0ddaf
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Jan 26 11:44:29 2020 +0100

    drivers: net: xgene: Fix the order of the arguments of 'alloc_etherdev_mqs()'
    
    commit 5a44c71ccda60a50073c5d7fe3f694cdfa3ab0c2 upstream.
    
    'alloc_etherdev_mqs()' expects first 'tx', then 'rx'. The semantic here
    looks reversed.
    
    Reorder the arguments passed to 'alloc_etherdev_mqs()' in order to keep
    the correct semantic.
    
    In fact, this is a no-op because both XGENE_NUM_[RT]X_RING are 8.
    
    Fixes: 107dec2749fe ("drivers: net: xgene: Add support for multiple queues")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2e2f561d27f7437ad418d98e39435da5cb5eb05
Author: Lijun Ou <oulijun@huawei.com>
Date:   Thu Jan 9 20:10:52 2020 +0800

    RDMA/hns: Bugfix for posting a wqe with sge
    
    commit 468d020e2f02867b8ec561461a1689cd4365e493 upstream.
    
    Driver should first check whether the sge is valid, then fill the valid
    sge and the caculated total into hardware, otherwise invalid sges will
    cause an error.
    
    Fixes: 52e3b42a2f58 ("RDMA/hns: Filter for zero length of sge in hip08 kernel mode")
    Fixes: 7bdee4158b37 ("RDMA/hns: Fill sq wqe context of ud type in hip08")
    Link: https://lore.kernel.org/r/1578571852-13704-1-git-send-email-liweihang@huawei.com
    Signed-off-by: Lijun Ou <oulijun@huawei.com>
    Signed-off-by: Weihang Li <liweihang@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3065f57761bd35bae691e5e7a26ef9eb7acb4799
Author: Yixian Liu <liuyixian@huawei.com>
Date:   Tue Dec 10 20:45:02 2019 +0800

    RDMA/hns: Simplify the calculation and usage of wqe idx for post verbs
    
    commit 4768820243d71d49f1044b3f911ac3d52bdb79af upstream.
    
    Currently, the wqe idx is calculated repeatly everywhere it is used.  This
    patch defines wqe_idx and calculated it only once, then just use it as
    needed.
    
    Fixes: 2d40788825ac ("RDMA/hns: Add support for processing send wr and receive wr")
    Link: https://lore.kernel.org/r/1575981902-5274-1-git-send-email-liweihang@hisilicon.com
    Signed-off-by: Yixian Liu <liuyixian@huawei.com>
    Signed-off-by: Weihang Li <liweihang@hisilicon.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fd3329a4df08464342e2708633e7cc5255f556d
Author: Chao Yu <chao@kernel.org>
Date:   Fri Dec 27 18:44:56 2019 +0800

    f2fs: fix to add swap extent correctly
    
    commit 3e5e479a39ce9ed60cd63f7565cc1d9da77c2a4e upstream.
    
    As Youling reported in mailing list:
    
    https://www.linuxquestions.org/questions/linux-newbie-8/the-file-system-f2fs-is-broken-4175666043/
    
    https://www.linux.org/threads/the-file-system-f2fs-is-broken.26490/
    
    There is a test case can corrupt f2fs image:
    - dd if=/dev/zero of=/swapfile bs=1M count=4096
    - chmod 600 /swapfile
    - mkswap /swapfile
    - swapon --discard /swapfile
    
    The root cause is f2fs_swap_activate() intends to return zero value
    to setup_swap_extents() to enable SWP_FS mode (swap file goes through
    fs), in this flow, setup_swap_extents() setups swap extent with wrong
    block address range, result in discard_swap() erasing incorrect address.
    
    Because f2fs_swap_activate() has pinned swapfile, its data block
    address will not change, it's safe to let swap to handle IO through
    raw device, so we can get rid of SWAP_FS mode and initial swap extents
    inside f2fs_swap_activate(), by this way, later discard_swap() can trim
    in right address range.
    
    Fixes: 4969c06a0d83 ("f2fs: support swap file w/ DIO")
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a25ae553903d157f25abb71c3bdced0dac083d66
Author: Cheng Jian <cj.chengjian@huawei.com>
Date:   Fri Dec 13 10:45:30 2019 +0800

    sched/fair: Optimize select_idle_cpu
    
    commit 60588bfa223ff675b95f866249f90616613fbe31 upstream.
    
    select_idle_cpu() will scan the LLC domain for idle CPUs,
    it's always expensive. so the next commit :
    
            1ad3aaf3fcd2 ("sched/core: Implement new approach to scale select_idle_cpu()")
    
    introduces a way to limit how many CPUs we scan.
    
    But it consume some CPUs out of 'nr' that are not allowed
    for the task and thus waste our attempts. The function
    always return nr_cpumask_bits, and we can't find a CPU
    which our task is allowed to run.
    
    Cpumask may be too big, similar to select_idle_core(), use
    per_cpu_ptr 'select_idle_mask' to prevent stack overflow.
    
    Fixes: 1ad3aaf3fcd2 ("sched/core: Implement new approach to scale select_idle_cpu()")
    Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Link: https://lkml.kernel.org/r/20191213024530.28052-1-cj.chengjian@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea307804e4fcdb0d58493619e6ee627e32d62ab3
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Jan 9 15:56:18 2020 -0800

    KVM: Check for a bad hva before dropping into the ghc slow path
    
    commit fcfbc617547fc6d9552cb6c1c563b6a90ee98085 upstream.
    
    When reading/writing using the guest/host cache, check for a bad hva
    before checking for a NULL memslot, which triggers the slow path for
    handing cross-page accesses.  Because the memslot is nullified on error
    by __kvm_gfn_to_hva_cache_init(), if the bad hva is encountered after
    crossing into a new page, then the kvm_{read,write}_guest() slow path
    could potentially write/access the first chunk prior to detecting the
    bad hva.
    
    Arguably, performing a partial access is semantically correct from an
    architectural perspective, but that behavior is certainly not intended.
    In the original implementation, memslot was not explicitly nullified
    and therefore the partial access behavior varied based on whether the
    memslot itself was null, or if the hva was simply bad.  The current
    behavior was introduced as a seemingly unintentional side effect in
    commit f1b9dd5eb86c ("kvm: Disallow wraparound in
    kvm_gfn_to_hva_cache_init"), which justified the change with "since some
    callers don't check the return code from this function, it sit seems
    prudent to clear ghc->memslot in the event of an error".
    
    Regardless of intent, the partial access is dependent on _not_ checking
    the result of the cache initialization, which is arguably a bug in its
    own right, at best simply weird.
    
    Fixes: 8f964525a121 ("KVM: Allow cross page reads and writes from cached translations.")
    Cc: Jim Mattson <jmattson@google.com>
    Cc: Andrew Honig <ahonig@google.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 487113220d0b5ac4763accf2ba5a552f5e44cbd3
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Thu Jan 9 17:42:16 2020 -0600

    KVM: SVM: Override default MMIO mask if memory encryption is enabled
    
    commit 52918ed5fcf05d97d257f4131e19479da18f5d16 upstream.
    
    The KVM MMIO support uses bit 51 as the reserved bit to cause nested page
    faults when a guest performs MMIO. The AMD memory encryption support uses
    a CPUID function to define the encryption bit position. Given this, it is
    possible that these bits can conflict.
    
    Use svm_hardware_setup() to override the MMIO mask if memory encryption
    support is enabled. Various checks are performed to ensure that the mask
    is properly defined and rsvd_bits() is used to generate the new mask (as
    was done prior to the change that necessitated this patch).
    
    Fixes: 28a1f3ac1d0c ("kvm: x86: Set highest physical address bits in non-present/reserved SPTEs")
    Suggested-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4aa42ab64edd76af94f1cb32d00fafd19741ff94
Author: Brian Norris <briannorris@chromium.org>
Date:   Mon Dec 9 16:39:11 2019 -0800

    mwifiex: delete unused mwifiex_get_intf_num()
    
    commit 1c9f329b084b7b8ea6d60d91a202e884cdcf6aae upstream.
    
    Commit 7afb94da3cd8 ("mwifiex: update set_mac_address logic") fixed the
    only user of this function, partly because the author seems to have
    noticed that, as written, it's on the borderline between highly
    misleading and buggy.
    
    Anyway, no sense in keeping dead code around: let's drop it.
    
    Fixes: 7afb94da3cd8 ("mwifiex: update set_mac_address logic")
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d807dd3195526dad33bba15537c129e241d6475
Author: Brian Norris <briannorris@chromium.org>
Date:   Fri Dec 6 11:45:35 2019 -0800

    mwifiex: drop most magic numbers from mwifiex_process_tdls_action_frame()
    
    commit 70e5b8f445fd27fde0c5583460e82539a7242424 upstream.
    
    Before commit 1e58252e334d ("mwifiex: Fix heap overflow in
    mmwifiex_process_tdls_action_frame()"),
    mwifiex_process_tdls_action_frame() already had too many magic numbers.
    But this commit just added a ton more, in the name of checking for
    buffer overflows. That seems like a really bad idea.
    
    Let's make these magic numbers a little less magic, by
    (a) factoring out 'pos[1]' as 'ie_len'
    (b) using 'sizeof' on the appropriate source or destination fields where
        possible, instead of bare numbers
    (c) dropping redundant checks, per below.
    
    Regarding redundant checks: the beginning of the loop has this:
    
                    if (pos + 2 + pos[1] > end)
                            break;
    
    but then individual 'case's include stuff like this:
    
                            if (pos > end - 3)
                                    return;
                            if (pos[1] != 1)
                                    return;
    
    Note that the second 'return' (validating the length, pos[1]) combined
    with the above condition (ensuring 'pos + 2 + length' doesn't exceed
    'end'), makes the first 'return' (whose 'if' can be reworded as 'pos >
    end - pos[1] - 2') redundant. Rather than unwind the magic numbers
    there, just drop those conditions.
    
    Fixes: 1e58252e334d ("mwifiex: Fix heap overflow in mmwifiex_process_tdls_action_frame()")
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a7d7fa16150e66943383711817831eeb1b56e97
Author: Aleksa Sarai <cyphar@cyphar.com>
Date:   Sat Dec 7 01:13:26 2019 +1100

    namei: only return -ECHILD from follow_dotdot_rcu()
    
    commit 2b98149c2377bff12be5dd3ce02ae0506e2dd613 upstream.
    
    It's over-zealous to return hard errors under RCU-walk here, given that
    a REF-walk will be triggered for all other cases handling ".." under
    RCU.
    
    The original purpose of this check was to ensure that if a rename occurs
    such that a directory is moved outside of the bind-mount which the
    resolution started in, it would be detected and blocked to avoid being
    able to mess with paths outside of the bind-mount. However, triggering a
    new REF-walk is just as effective a solution.
    
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Fixes: 397d425dc26d ("vfs: Test for and handle paths that are unreachable from their mnt_root")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Aleksa Sarai <cyphar@cyphar.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c15a3d8f5eccc1f91a8dff7d0a282907e89e85a7
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon Nov 18 13:52:47 2019 +0900

    kbuild: make single target builds even faster
    
    commit b1fbfcb4a20949df08dd995927cdc5ad220c128d upstream.
    
    Commit 2dffd23f81a3 ("kbuild: make single target builds much faster")
    made the situation much better.
    
    To improve it even more, apply the similar idea to the top Makefile.
    Trim unrelated directories from build-dirs.
    
    The single build code must be moved above the 'descend' target.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Tested-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e54f93a3b9b4575c42aa6a1a1cbba40a890f688
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Wed Oct 16 14:12:15 2019 +0900

    kbuild: remove unneeded variable, single-all
    
    commit 35e046a203ee3bc8ba9ae3561b50de02646dfb81 upstream.
    
    When single-build is set, everything in $(MAKECMDGOALS) is a single
    target. You can use $(MAKECMDGOALS) to list out the single targets.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ecd77a3261ab58bb07bc00cf3ca57f052764be5b
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Nov 7 16:14:41 2019 +0900

    kbuild: move headers_check rule to usr/include/Makefile
    
    commit 7ecaf069da52e472d393f03e79d721aabd724166 upstream.
    
    Currently, some sanity checks for uapi headers are done by
    scripts/headers_check.pl, which is wired up to the 'headers_check'
    target in the top Makefile.
    
    It is true compiling headers has better test coverage, but there
    are still several headers excluded from the compile test. I like
    to keep headers_check.pl for a while, but we can delete a lot of
    code by moving the build rule to usr/include/Makefile.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef134d8b493c537b81e8cbd56704efff0b402d8a
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Nov 7 16:14:40 2019 +0900

    kbuild: remove header compile test
    
    commit fcbb8461fd2376ba3782b5b8bd440c929b8e4980 upstream.
    
    There are both positive and negative options about this feature.
    At first, I thought it was a good idea, but actually Linus stated a
    negative opinion (https://lkml.org/lkml/2019/9/29/227). I admit it
    is ugly and annoying.
    
    The baseline I'd like to keep is the compile-test of uapi headers.
    (Otherwise, kernel developers have no way to ensure the correctness
    of the exported headers.)
    
    I will maintain a small build rule in usr/include/Makefile.
    Remove the other header test functionality.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    [ added to 5.4.y due to start of build warnings from backported patches
      because of this feature - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20e559d8f74538269a0f47df814656c150fca858
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Feb 20 15:42:41 2020 +1100

    selftests: Install settings files to fix TIMEOUT failures
    
    commit b9167c8078c3527de6da241c8a1a75a9224ed90a upstream.
    
    Commit 852c8cbf34d3 ("selftests/kselftest/runner.sh: Add 45 second
    timeout per test") added a 45 second timeout for tests, and also added
    a way for tests to customise the timeout via a settings file.
    
    For example the ftrace tests take multiple minutes to run, so they
    were given longer in commit b43e78f65b1d ("tracing/selftests: Turn off
    timeout setting").
    
    This works when the tests are run from the source tree. However if the
    tests are installed with "make -C tools/testing/selftests install",
    the settings files are not copied into the install directory. When the
    tests are then run from the install directory the longer timeouts are
    not applied and the tests timeout incorrectly.
    
    So add the settings files to TEST_FILES of the appropriate Makefiles
    to cause the settings files to be installed using the existing install
    logic.
    
    Fixes: 852c8cbf34d3 ("selftests/kselftest/runner.sh: Add 45 second timeout per test")
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 483724e27eb58d9b2e69848f34574155a6bdee70
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:49 2020 +0000

    net: ena: make ena rxfh support ETH_RSS_HASH_NO_CHANGE
    
    commit 470793a78ce344bd53d31e0c2d537f71ba957547 upstream.
    
    As the name suggests ETH_RSS_HASH_NO_CHANGE is received upon changing
    the key or indirection table using ethtool while keeping the same hash
    function.
    
    Also add a function for retrieving the current hash function from
    the ena-com layer.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Saeed Bshara <saeedb@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21709608638e1f4745c762ebcbfe5c5a8336e88d
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Fri Feb 14 08:59:00 2020 +0100

    net/smc: no peer ID in CLC decline for SMCD
    
    commit 369537c97024dca99303a8d4d6ab38b4f54d3909 upstream.
    
    Just SMCR requires a CLC Peer ID, but not SMCD. The field should be
    zero for SMCD.
    
    Fixes: c758dfddc1b5 ("net/smc: add SMC-D support in CLC messages")
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10e0190f0b96586e34e1fbffd74440e5e5274a3b
Author: Dmitry Bogdanov <dbogdanov@marvell.com>
Date:   Fri Feb 14 18:44:58 2020 +0300

    net: atlantic: fix out of range usage of active_vlans array
    
    commit 5a292c89a84d49b598f8978f154bdda48b1072c0 upstream.
    
    fix static checker warning:
     drivers/net/ethernet/aquantia/atlantic/aq_filters.c:166 aq_check_approve_fvlan()
     error: passing untrusted data to 'test_bit()'
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 7975d2aff5af: ("net: aquantia: add support of rx-vlan-filter offload")
    Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10b2668cb3db16d8c196e56ee4a75e196b7b7234
Author: Pavel Belous <pbelous@marvell.com>
Date:   Fri Feb 14 18:44:56 2020 +0300

    net: atlantic: fix potential error handling
    
    commit 380ec5b9af7f0d57dbf6ac067fd9f33cff2fef71 upstream.
    
    Code inspection found that in case of mapping error we do return current
    'ret' value. But beside error, it is used to count number of descriptors
    allocated for the packet. In that case map_skb function could return '1'.
    
    Changing it to return zero (number of mapped descriptors for skb)
    
    Fixes: 018423e90bee ("net: ethernet: aquantia: Add ring support code")
    Signed-off-by: Pavel Belous <pbelous@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be96a355858a47b4374083c258374bd89af35370
Author: Pavel Belous <pbelous@marvell.com>
Date:   Fri Feb 14 18:44:55 2020 +0300

    net: atlantic: fix use after free kasan warn
    
    commit a4980919ad6a7be548d499bc5338015e1a9191c6 upstream.
    
    skb->len is used to calculate statistics after xmit invocation.
    
    Under a stress load it may happen that skb will be xmited,
    rx interrupt will come and skb will be freed, all before xmit function
    is even returned.
    
    Eventually, skb->len will access unallocated area.
    
    Moving stats calculation into tx_clean routine.
    
    Fixes: 018423e90bee ("net: ethernet: aquantia: Add ring support code")
    Reported-by: Christophe Vu-Brugier <cvubrugier@fastmail.fm>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Pavel Belous <pbelous@marvell.com>
    Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5306d0c41979d39bc53cdfa49801addb074d1d56
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Thu Feb 20 16:42:13 2020 +0200

    net: netlink: cap max groups which will be considered in netlink_bind()
    
    commit 3a20773beeeeadec41477a5ba872175b778ff752 upstream.
    
    Since nl_groups is a u32 we can't bind more groups via ->bind
    (netlink_bind) call, but netlink has supported more groups via
    setsockopt() for a long time and thus nlk->ngroups could be over 32.
    Recently I added support for per-vlan notifications and increased the
    groups to 33 for NETLINK_ROUTE which exposed an old bug in the
    netlink_bind() code causing out-of-bounds access on archs where unsigned
    long is 32 bits via test_bit() on a local variable. Fix this by capping the
    maximum groups in netlink_bind() to BITS_PER_TYPE(u32), effectively
    capping them at 32 which is the minimum of allocated groups and the
    maximum groups which can be bound via netlink_bind().
    
    CC: Christophe Leroy <christophe.leroy@c-s.fr>
    CC: Richard Guy Briggs <rgb@redhat.com>
    Fixes: 4f520900522f ("netlink: have netlink per-protocol bind function return an error code.")
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b04f396f00233d090e531222846edc14b7c76bd
Author: Alexandra Winter <wintera@linux.ibm.com>
Date:   Thu Feb 20 15:54:54 2020 +0100

    s390/qeth: vnicc Fix EOPNOTSUPP precedence
    
    commit 6f3846f0955308b6d1b219419da42b8de2c08845 upstream.
    
    When getting or setting VNICC parameters, the error code EOPNOTSUPP
    should have precedence over EBUSY.
    
    EBUSY is used because vnicc feature and bridgeport feature are mutually
    exclusive, which is a temporary condition.
    Whereas EOPNOTSUPP indicates that the HW does not support all or parts of
    the vnicc feature.
    This issue causes the vnicc sysfs params to show 'blocked by bridgeport'
    for HW that does not support VNICC at all.
    
    Fixes: caa1f0b10d18 ("s390/qeth: add VNICC enable/disable support")
    Signed-off-by: Alexandra Winter <wintera@linux.ibm.com>
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 567b108c942571f692563406644e53e71c1de5a6
Author: Bijan Mottahedeh <bijan.mottahedeh@oracle.com>
Date:   Wed Feb 26 18:53:43 2020 -0800

    nvme-pci: Hold cq_poll_lock while completing CQEs
    
    commit 9515743bfb39c61aaf3d4f3219a645c8d1fe9a0e upstream.
    
    Completions need to consumed in the same order the controller submitted
    them, otherwise future completion entries may overwrite ones we haven't
    handled yet. Hold the nvme queue's poll lock while completing new CQEs to
    prevent another thread from freeing command tags for reuse out-of-order.
    
    Fixes: dabcefab45d3 ("nvme: provide optimized poll function for separate poll queues")
    Signed-off-by: Bijan Mottahedeh <bijan.mottahedeh@oracle.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbc28154dec99975e79391357826325b197d25e2
Author: Peter Chen <peter.chen@nxp.com>
Date:   Sat Feb 1 14:13:44 2020 +0800

    usb: charger: assign specific number for enum value
    
    commit ca4b43c14cd88d28cfc6467d2fa075aad6818f1d upstream.
    
    To work properly on every architectures and compilers, the enum value
    needs to be specific numbers.
    
    Suggested-by: Greg KH <gregkh@linuxfoundation.org>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/1580537624-10179-1-git-send-email-peter.chen@nxp.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e653811113396d1b52350233e1323aea3648ede5
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Fri Feb 21 08:32:18 2020 -0800

    hv_netvsc: Fix unwanted wakeup in netvsc_attach()
    
    commit f6f13c125e05603f68f5bf31f045b95e6d493598 upstream.
    
    When netvsc_attach() is called by operations like changing MTU, etc.,
    an extra wakeup may happen while netvsc_attach() calling
    rndis_filter_device_add() which sends rndis messages when queue is
    stopped in netvsc_detach(). The completion message will wake up queue 0.
    
    We can reproduce the issue by changing MTU etc., then the wake_queue
    counter from "ethtool -S" will increase beyond stop_queue counter:
         stop_queue: 0
         wake_queue: 1
    The issue causes queue wake up, and counter increment, no other ill
    effects in current code. So we didn't see any network problem for now.
    
    To fix this, initialize tx_disable to true, and set it to false when
    the NIC is ready to be attached or registered.
    
    Fixes: 7b2ee50c0cd5 ("hv_netvsc: common detach logic")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5cfa47505ac4424e3d89843dddc522beb2bafe0
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Feb 23 04:04:31 2020 +0900

    kbuild: fix DT binding schema rule to detect command line changes
    
    commit 7a04960560640ac5b0b89461f7757322b57d0c7a upstream.
    
    This if_change_rule is not working properly; it cannot detect any
    command line change.
    
    The reason is because cmd-check in scripts/Kbuild.include compares
    $(cmd_$@) and $(cmd_$1), but cmd_dtc_dt_yaml does not exist here.
    
    For if_change_rule to work properly, the stem part of cmd_* and rule_*
    must match. Because this cmd_and_fixdep invokes cmd_dtc, this rule must
    be named rule_dtc.
    
    Fixes: 4f0e3a57d6eb ("kbuild: Add support for DT binding schema checks")
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2688e75376498abebc5b2afb20ee3349a1af6e8
Author: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
Date:   Fri Feb 21 10:47:20 2020 +0100

    mac80211: Remove a redundant mutex unlock
    
    commit 0daa63ed4c6c4302790ce67b7a90c0997ceb7514 upstream.
    
    The below-mentioned commit changed the code to unlock *inside*
    the function, but previously the unlock was *outside*. It failed
    to remove the outer unlock, however, leading to double unlock.
    
    Fix this.
    
    Fixes: 33483a6b88e4 ("mac80211: fix missing unlock on error in ieee80211_mark_sta_auth()")
    Signed-off-by: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
    Link: https://lore.kernel.org/r/20200221104719.cce4741cf6eb.I671567b185c8a4c2409377e483fd149ce590f56d@changeid
    [rewrite commit message to better explain what happened]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 813757b7821651ef13b4f38dd31070472d079bd7
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Feb 21 10:41:43 2020 +0100

    nl80211: fix potential leak in AP start
    
    commit 9951ebfcdf2b97dbb28a5d930458424341e61aa2 upstream.
    
    If nl80211_parse_he_obss_pd() fails, we leak the previously
    allocated ACL memory. Free it in this case.
    
    Fixes: 796e90f42b7e ("cfg80211: add support for parsing OBBS_PD attributes")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20200221104142.835aba4cdd14.I1923b55ba9989c57e13978f91f40bfdc45e60cbd@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8100d19dc0fb14f1136435fe11bf69cfa5cca579
Author: Tina Zhang <tina.zhang@intel.com>
Date:   Fri Feb 21 10:32:34 2020 +0800

    drm/i915/gvt: Separate display reset from ALL_ENGINES reset
    
    commit 3eb55e6f753a379e293395de8d5f3be28351a7f8 upstream.
    
    ALL_ENGINES reset doesn't clobber display with the current gvt-g
    supported platforms. Thus ALL_ENGINES reset shouldn't reset the
    display engine registers emulated by gvt-g.
    
    This fixes guest warning like
    
    [ 14.622026] [drm] Initialized i915 1.6.0 20200114 for 0000:00:03.0 on minor 0
    [ 14.967917] fbcon: i915drmfb (fb0) is primary device
    [ 25.100188] [drm:drm_atomic_helper_wait_for_dependencies [drm_kms_helper]] E RROR [CRTC:51:pipe A] flip_done timed out
    [ 25.100860] -----------[ cut here ]-----------
    [ 25.100861] pll on state mismatch (expected 0, found 1)
    [ 25.101024] WARNING: CPU: 1 PID: 30 at drivers/gpu/drm/i915/display/intel_dis play.c:14382 verify_single_dpll_state.isra.115+0x28f/0x320 [i915]
    [ 25.101025] Modules linked in: intel_rapl_msr intel_rapl_common kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul ghash_clmulni_intel i915 aesni_intel cr ypto_simd cryptd glue_helper cec rc_core video drm_kms_helper joydev drm input_l eds i2c_algo_bit serio_raw fb_sys_fops syscopyarea sysfillrect sysimgblt mac_hid qemu_fw_cfg sch_fq_codel parport_pc ppdev lp parport ip_tables x_tables autofs4 e1000 psmouse i2c_piix4 pata_acpi floppy
    [ 25.101052] CPU: 1 PID: 30 Comm: kworker/u4:1 Not tainted 5.5.0+ #1
    [ 25.101053] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1 .12.1-0-ga5cab58 04/01/2014
    [ 25.101055] Workqueue: events_unbound async_run_entry_fn
    [ 25.101092] RIP: 0010:verify_single_dpll_state.isra.115+0x28f/0x320 [i915]
    [ 25.101093] Code: e0 d9 ff e9 a3 fe ff ff 80 3d e9 c2 11 00 00 44 89 f6 48 c7 c7 c0 9d 88 c0 75 3b e8 eb df d9 ff e9 c7 fe ff ff e8 d1 e0 ae c4 <0f> 0b e9 7a fe ff ff 80 3d c0 c2 11 00 00 8d 71 41 89 c2 48 c7 c7
    [ 25.101093] RSP: 0018:ffffb1de80107878 EFLAGS: 00010286
    [ 25.101094] RAX: 0000000000000000 RBX: ffffb1de80107884 RCX: 0000000000000007
    [ 25.101095] RDX: 0000000000000000 RSI: 0000000000000002 RDI: ffff94fdfdd19740
    [ 25.101095] RBP: ffffb1de80107938 R08: 0000000d6bfdc7b4 R09: 000000000000002b
    [ 25.101096] R10: ffff94fdf82dc000 R11: 0000000000000225 R12: 00000000000001f8
    [ 25.101096] R13: ffff94fdb3ca6a90 R14: ffff94fdb3ca0000 R15: 0000000000000000
    [ 25.101097] FS: 0000000000000000(0000) GS:ffff94fdfdd00000(0000) knlGS:00000 00000000000
    [ 25.101098] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 25.101098] CR2: 00007fbc3e2be9c8 CR3: 000000003339a003 CR4: 0000000000360ee0
    [ 25.101101] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 25.101101] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 25.101102] Call Trace:
    [ 25.101139] intel_atomic_commit_tail+0xde4/0x1520 [i915]
    [ 25.101141] ? flush_workqueue_prep_pwqs+0xfa/0x130
    [ 25.101142] ? flush_workqueue+0x198/0x3c0
    [ 25.101174] intel_atomic_commit+0x2ad/0x320 [i915]
    [ 25.101209] drm_atomic_commit+0x4a/0x50 [drm]
    [ 25.101220] drm_client_modeset_commit_atomic+0x1c4/0x200 [drm]
    [ 25.101231] drm_client_modeset_commit_force+0x47/0x170 [drm]
    [ 25.101250] drm_fb_helper_restore_fbdev_mode_unlocked+0x4e/0xa0 [drm_kms_hel per]
    [ 25.101255] drm_fb_helper_set_par+0x2d/0x60 [drm_kms_helper]
    [ 25.101287] intel_fbdev_set_par+0x1a/0x40 [i915]
    [ 25.101289] ? con_is_visible+0x2e/0x60
    [ 25.101290] fbcon_init+0x378/0x600
    [ 25.101292] visual_init+0xd5/0x130
    [ 25.101296] do_bind_con_driver+0x217/0x430
    [ 25.101297] do_take_over_console+0x7d/0x1b0
    [ 25.101298] do_fbcon_takeover+0x5c/0xb0
    [ 25.101299] fbcon_fb_registered+0x199/0x1a0
    [ 25.101301] register_framebuffer+0x22c/0x330
    [ 25.101306] __drm_fb_helper_initial_config_and_unlock+0x31a/0x520 [drm_kms_h elper]
    [ 25.101311] drm_fb_helper_initial_config+0x35/0x40 [drm_kms_helper]
    [ 25.101341] intel_fbdev_initial_config+0x18/0x30 [i915]
    [ 25.101342] async_run_entry_fn+0x3c/0x150
    [ 25.101343] process_one_work+0x1fd/0x3f0
    [ 25.101344] worker_thread+0x34/0x410
    [ 25.101346] kthread+0x121/0x140
    [ 25.101346] ? process_one_work+0x3f0/0x3f0
    [ 25.101347] ? kthread_park+0x90/0x90
    [ 25.101350] ret_from_fork+0x35/0x40
    [ 25.101351] --[ end trace b5b47d44cd998ba1 ]--
    
    Fixes: 6294b61ba769 ("drm/i915/gvt: add missing display part reset for vGPU reset")
    Signed-off-by: Tina Zhang <tina.zhang@intel.com>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20200221023234.28635-1-tina.zhang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30b8a98a1ab30d3622d2fa34794dd3ef0e01eca2
Author: Tina Zhang <tina.zhang@intel.com>
Date:   Tue Feb 25 13:35:27 2020 +0800

    drm/i915/gvt: Fix orphan vgpu dmabuf_objs' lifetime
    
    commit b549c252b1292aea959cd9b83537fcb9384a6112 upstream.
    
    Deleting dmabuf item's list head after releasing its container can lead
    to KASAN-reported issue:
    
      BUG: KASAN: use-after-free in __list_del_entry_valid+0x15/0xf0
      Read of size 8 at addr ffff88818a4598a8 by task kworker/u8:3/13119
    
    So fix this issue by puting deleting dmabuf_objs ahead of releasing its
    container.
    
    Fixes: dfb6ae4e14bd6 ("drm/i915/gvt: Handle orphan dmabuf_objs")
    Signed-off-by: Tina Zhang <tina.zhang@intel.com>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20200225053527.8336-2-tina.zhang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55105073e43c2c94fe3cb668bb6e2a24506552c8
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Wed Feb 12 10:35:30 2020 +0100

    i2c: jz4780: silence log flood on txabrt
    
    commit 9e661cedcc0a072d91a32cb88e0515ea26e35711 upstream.
    
    The printout for txabrt is way too talkative and is highly annoying with
    scanning programs like 'i2cdetect'. Reduce it to the minimum, the rest
    can be gained by I2C core debugging and datasheet information. Also,
    make it a debug printout, it won't help the regular user.
    
    Fixes: ba92222ed63a ("i2c: jz4780: Add i2c bus controller driver for Ingenic JZ4780")
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Tested-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bda7565d4e15d35d42a5570218907e2007db9d53
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Feb 11 08:47:04 2020 -0600

    i2c: altera: Fix potential integer overflow
    
    commit 54498e8070e19e74498a72c7331348143e7e1f8c upstream.
    
    Factor out 100 from the equation and do 32-bit arithmetic (3 * clk_mhz / 10)
    instead of 64-bit.
    
    Notice that clk_mhz is MHz, so the multiplication will never wrap 32 bits
    and there is no need for div_u64().
    
    Addresses-Coverity: 1458369 ("Unintentional integer overflow")
    Fixes: 0560ad576268 ("i2c: altera: Add Altera I2C Controller driver")
    Suggested-by: David Laight <David.Laight@ACULAB.COM>
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Reviewed-by: Thor Thayer <thor.thayer@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cf412def885406f0948d037ef8869dd593ea236
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Feb 2 21:19:22 2020 +0100

    MIPS: VPE: Fix a double free and a memory leak in 'release_vpe()'
    
    commit bef8e2dfceed6daeb6ca3e8d33f9c9d43b926580 upstream.
    
    Pointer on the memory allocated by 'alloc_progmem()' is stored in
    'v->load_addr'. So this is this memory that should be freed by
    'release_progmem()'.
    
    'release_progmem()' is only a call to 'kfree()'.
    
    With the current code, there is both a double free and a memory leak.
    Fix it by passing the correct pointer to 'release_progmem()'.
    
    Fixes: e01402b115ccc ("More AP / SP bits for the 34K, the Malta bits and things. Still wants")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: ralf@linux-mips.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: kernel-janitors@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5684b0515fca7fe6bca1e5fb58b874add30c772
Author: dan.carpenter@oracle.com <dan.carpenter@oracle.com>
Date:   Wed Jan 15 20:46:28 2020 +0300

    HID: hiddev: Fix race in in hiddev_disconnect()
    
    commit 5c02c447eaeda29d3da121a2e17b97ccaf579b51 upstream.
    
    Syzbot reports that "hiddev" is used after it's free in hiddev_disconnect().
    The hiddev_disconnect() function sets "hiddev->exist = 0;" so
    hiddev_release() can free it as soon as we drop the "existancelock"
    lock.  This patch moves the mutex_unlock(&hiddev->existancelock) until
    after we have finished using it.
    
    Reported-by: syzbot+784ccb935f9900cc7c9e@syzkaller.appspotmail.com
    Fixes: 7f77897ef2b6 ("HID: hiddev: fix potential use-after-free")
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7c5c8fd532de4d32a02baab7e9f335f2b024b7d
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Dec 4 04:35:25 2019 +0100

    HID: alps: Fix an error handling path in 'alps_input_configured()'
    
    commit 8d2e77b39b8fecb794e19cd006a12f90b14dd077 upstream.
    
    They are issues:
       - if 'input_allocate_device()' fails and return NULL, there is no need
         to free anything and 'input_free_device()' call is a no-op. It can
         be axed.
       - 'ret' is known to be 0 at this point, so we must set it to a
         meaningful value before returning
    
    Fixes: 2562756dde55 ("HID: add Alps I2C HID Touchpad-Stick support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 782077bff3a68b5ed7e711d7c58792cb26e8c92c
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Feb 2 20:30:52 2020 -0800

    netfilter: xt_hashlimit: reduce hashlimit_mutex scope for htable_put()
    
    commit c4a3922d2d20c710f827d3a115ee338e8d0467df upstream.
    
    It is unnecessary to hold hashlimit_mutex for htable_destroy()
    as it is already removed from the global hashtable and its
    refcount is already zero.
    
    Also, switch hinfo->use to refcount_t so that we don't have
    to hold the mutex until it reaches zero in htable_put().
    
    Reported-and-tested-by: syzbot+adf6c6c2be1c3a718121@syzkaller.appspotmail.com
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c717726f341fd8f39a3ec2dcf5d98d9d28a2769
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Sat Feb 22 12:01:43 2020 +0100

    netfilter: ipset: Fix forceadd evaluation path
    
    commit 8af1c6fbd9239877998c7f5a591cb2c88d41fb66 upstream.
    
    When the forceadd option is enabled, the hash:* types should find and replace
    the first entry in the bucket with the new one if there are no reuseable
    (deleted or timed out) entries. However, the position index was just not set
    to zero and remained the invalid -1 if there were no reuseable entries.
    
    Reported-by: syzbot+6a86565c74ebe30aea18@syzkaller.appspotmail.com
    Fixes: 23c42a403a9c ("netfilter: ipset: Introduction of new commands and protocol version 7")
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f09fbb1175cffdbbb36b28e2ff7db96dcc90de08
Author: Eugenio Pérez <eperezma@redhat.com>
Date:   Fri Feb 21 12:06:56 2020 +0100

    vhost: Check docket sk_family instead of call getname
    
    commit 42d84c8490f9f0931786f1623191fcab397c3d64 upstream.
    
    Doing so, we save one call to get data we already have in the struct.
    
    Also, since there is no guarantee that getname use sockaddr_ll
    parameter beyond its size, we add a little bit of security here.
    It should do not do beyond MAX_ADDR_LEN, but syzbot found that
    ax25_getname writes more (72 bytes, the size of full_sockaddr_ax25,
    versus 20 + 32 bytes of sockaddr_ll + MAX_ADDR_LEN in syzbot repro).
    
    Fixes: 3a4d5c94e9593 ("vhost_net: a kernel-level virtio server")
    Reported-by: syzbot+f2a62d07a5198c819c7b@syzkaller.appspotmail.com
    Signed-off-by: Eugenio Pérez <eperezma@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68c601f2a2084aba734b29794e65e150e1a4346d
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Fri Feb 14 08:58:59 2020 +0100

    net/smc: transfer fasync_list in case of fallback
    
    commit 67f562e3e147750a02b2a91d21a163fc44a1d13e upstream.
    
    SMC does not work together with FASTOPEN. If sendmsg() is called with
    flag MSG_FASTOPEN in SMC_INIT state, the SMC-socket switches to
    fallback mode. To handle the previous ioctl FIOASYNC call correctly
    in this case, it is necessary to transfer the socket wait queue
    fasync_list to the internal TCP socket.
    
    Reported-by: syzbot+4b1fe8105f8044a26162@syzkaller.appspotmail.com
    Fixes: ee9dfbef02d18 ("net/smc: handle sockopts forcing fallback")
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5dd9488ae41070b69d2f4acb580f77db5705f9ca
Author: Jozsef Kadlecsik <kadlec@netfilter.org>
Date:   Tue Feb 11 23:20:43 2020 +0100

    netfilter: ipset: Fix "INFO: rcu detected stall in hash_xxx" reports
    
    commit f66ee0410b1c3481ee75e5db9b34547b4d582465 upstream.
    
    In the case of huge hash:* types of sets, due to the single spinlock of
    a set the processing of the whole set under spinlock protection could take
    too long.
    
    There were four places where the whole hash table of the set was processed
    from bucket to bucket under holding the spinlock:
    
    - During resizing a set, the original set was locked to exclude kernel side
      add/del element operations (userspace add/del is excluded by the
      nfnetlink mutex). The original set is actually just read during the
      resize, so the spinlocking is replaced with rcu locking of regions.
      However, thus there can be parallel kernel side add/del of entries.
      In order not to loose those operations a backlog is added and replayed
      after the successful resize.
    - Garbage collection of timed out entries was also protected by the spinlock.
      In order not to lock too long, region locking is introduced and a single
      region is processed in one gc go. Also, the simple timer based gc running
      is replaced with a workqueue based solution. The internal book-keeping
      (number of elements, size of extensions) is moved to region level due to
      the region locking.
    - Adding elements: when the max number of the elements is reached, the gc
      was called to evict the timed out entries. The new approach is that the gc
      is called just for the matching region, assuming that if the region
      (proportionally) seems to be full, then the whole set does. We could scan
      the other regions to check every entry under rcu locking, but for huge
      sets it'd mean a slowdown at adding elements.
    - Listing the set header data: when the set was defined with timeout
      support, the garbage collector was called to clean up timed out entries
      to get the correct element numbers and set size values. Now the set is
      scanned to check non-timed out entries, without actually calling the gc
      for the whole set.
    
    Thanks to Florian Westphal for helping me to solve the SOFTIRQ-safe ->
    SOFTIRQ-unsafe lock order issues during working on the patch.
    
    Reported-by: syzbot+4b0e9d4ff3cf117837e5@syzkaller.appspotmail.com
    Reported-by: syzbot+c27b8d5010f45c666ed1@syzkaller.appspotmail.com
    Reported-by: syzbot+68a806795ac89df3aa1c@syzkaller.appspotmail.com
    Fixes: 23c42a403a9c ("netfilter: ipset: Introduction of new commands and protocol version 7")
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7eaf718b83ffbec852c8485a4c433f14621cf9b5
Author: Jens Axboe <axboe@kernel.dk>
Date:   Thu Feb 27 14:17:49 2020 -0700

    io_uring: fix 32-bit compatability with sendmsg/recvmsg
    
    commit d876836204897b6d7d911f942084f69a1e9d5c4d upstream.
    
    We must set MSG_CMSG_COMPAT if we're in compatability mode, otherwise
    the iovec import for these commands will not do the right thing and fail
    the command with -EINVAL.
    
    Found by running the test suite compiled as 32-bit.
    
    Cc: stable@vger.kernel.org
    Fixes: aa1fa28fc73e ("io_uring: add support for recvmsg()")
    Fixes: 0fa03c624d8f ("io_uring: add support for sendmsg()")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9629f47d7d1c110fe22c617dc0a52acb23b3bdf0
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Feb 26 22:39:27 2020 +0100

    cpufreq: Fix policy initialization for internal governor drivers
    
    commit f5739cb0b56590d68d8df8a44659893b6d0084c3 upstream.
    
    Before commit 1e4f63aecb53 ("cpufreq: Avoid creating excessively
    large stack frames") the initial value of the policy field in struct
    cpufreq_policy set by the driver's ->init() callback was implicitly
    passed from cpufreq_init_policy() to cpufreq_set_policy() if the
    default governor was neither "performance" nor "powersave".  After
    that commit, however, cpufreq_init_policy() must take that case into
    consideration explicitly and handle it as appropriate, so make that
    happen.
    
    Fixes: 1e4f63aecb53 ("cpufreq: Avoid creating excessively large stack frames")
    Link: https://lore.kernel.org/linux-pm/39fb762880c27da110086741315ca8b111d781cd.camel@gmail.com/
    Reported-by: Artem Bityutskiy <dedekind1@gmail.com>
    Cc: 5.4+ <stable@vger.kernel.org> # 5.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 386a71f635b40a54c77e6977a9bf7fd930e7119c
Author: Shirish S <shirish.s@amd.com>
Date:   Mon Jan 27 16:35:24 2020 +0530

    amdgpu/gmc_v9: save/restore sdpif regs during S3
    
    commit a3ed353cf8015ba84a0407a5dc3ffee038166ab0 upstream.
    
    fixes S3 issue with IOMMU + S/G  enabled @ 64M VRAM.
    
    Suggested-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Shirish S <shirish.s@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e7ddaf759c622c24aa038afeac092e11140d8fc
Author: Orson Zhai <orson.unisoc@gmail.com>
Date:   Fri Feb 21 01:37:04 2020 +0800

    Revert "PM / devfreq: Modify the device name as devfreq(X) for sysfs"
    
    commit 66d0e797bf095d407479c89952d42b1d96ef0a7f upstream.
    
    This reverts commit 4585fbcb5331fc910b7e553ad3efd0dd7b320d14.
    
    The name changing as devfreq(X) breaks some user space applications,
    such as Android HAL from Unisoc and Hikey [1].
    The device name will be changed unexpectly after every boot depending
    on module init sequence. It will make trouble to setup some system
    configuration like selinux for Android.
    
    So we'd like to revert it back to old naming rule before any better
    way being found.
    
    [1] https://lkml.org/lkml/2018/5/8/1042
    
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Orson Zhai <orson.unisoc@gmail.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b20f83ef019aaa3336e34a1ba3cd5d0a1014a46c
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Feb 20 15:38:01 2020 -0500

    tracing: Disable trace_printk() on post poned tests
    
    commit 78041c0c9e935d9ce4086feeff6c569ed88ddfd4 upstream.
    
    The tracing seftests checks various aspects of the tracing infrastructure,
    and one is filtering. If trace_printk() is active during a self test, it can
    cause the filtering to fail, which will disable that part of the trace.
    
    To keep the selftests from failing because of trace_printk() calls,
    trace_printk() checks the variable tracing_selftest_running, and if set, it
    does not write to the tracing buffer.
    
    As some tracers were registered earlier in boot, the selftest they triggered
    would fail because not all the infrastructure was set up for the full
    selftest. Thus, some of the tests were post poned to when their
    infrastructure was ready (namely file system code). The postpone code did
    not set the tracing_seftest_running variable, and could fail if a
    trace_printk() was added and executed during their run.
    
    Cc: stable@vger.kernel.org
    Fixes: 9afecfbb95198 ("tracing: Postpone tracer start-up tests till the system is more robust")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 176cacef0119a441af14ccdfa125461635a1054d
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Tue Feb 25 15:12:29 2020 +0100

    macintosh: therm_windtunnel: fix regression when instantiating devices
    
    commit 38b17afb0ebb9ecd41418d3c08bcf9198af4349d upstream.
    
    Removing attach_adapter from this driver caused a regression for at
    least some machines. Those machines had the sensors described in their
    DT, too, so they didn't need manual creation of the sensor devices. The
    old code worked, though, because manual creation came first. Creation of
    DT devices then failed later and caused error logs, but the sensors
    worked nonetheless because of the manually created devices.
    
    When removing attach_adaper, manual creation now comes later and loses
    the race. The sensor devices were already registered via DT, yet with
    another binding, so the driver could not be bound to it.
    
    This fix refactors the code to remove the race and only manually creates
    devices if there are no DT nodes present. Also, the DT binding is updated
    to match both, the DT and manually created devices. Because we don't
    know which device creation will be used at runtime, the code to start
    the kthread is moved to do_probe() which will be called by both methods.
    
    Fixes: 3e7bed52719d ("macintosh: therm_windtunnel: drop using attach_adapter")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=201723
    Reported-by: Erhard Furtner <erhard_f@mailbox.org>
    Tested-by: Erhard Furtner <erhard_f@mailbox.org>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org # v4.19+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73c8048e277ed49765e89064dd5478a594975071
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sat Feb 22 18:54:32 2020 +0100

    drm/radeon: Inline drm_get_pci_dev
    
    commit eb12c957735b582607e5842a06d1f4c62e185c1d upstream.
    
    It's the last user, and more importantly, it's the last non-legacy
    user of anything in drm_pci.c.
    
    The only tricky bit is the agp initialization. But a close look shows
    that radeon does not use the drm_agp midlayer (the main use of that is
    drm_bufs for legacy drivers), and instead could use the agp subsystem
    directly (like nouveau does already). Hence we can just pull this in
    too.
    
    A further step would be to entirely drop the use of drm_device->agp,
    but feels like too much churn just for this patch.
    
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Christian König" <christian.koenig@amd.com>
    Cc: "David (ChunMing) Zhou" <David1.Zhou@amd.com>
    Cc: amd-gfx@lists.freedesktop.org
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Emil Velikov <emil.velikov@collabora.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 582ce26a7e24b5de3e11b46dd1e242bc9e641de8
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sat Feb 22 18:54:31 2020 +0100

    drm/amdgpu: Drop DRIVER_USE_AGP
    
    commit 8a3bddf67ce88b96531fb22c5a75d7f4dc41d155 upstream.
    
    This doesn't do anything except auto-init drm_agp support when you
    call drm_get_pci_dev(). Which amdgpu stopped doing with
    
    commit b58c11314a1706bf094c489ef5cb28f76478c704
    Author: Alex Deucher <alexander.deucher@amd.com>
    Date:   Fri Jun 2 17:16:31 2017 -0400
    
        drm/amdgpu: drop deprecated drm_get_pci_dev and drm_put_dev
    
    No idea whether this was intentional or accidental breakage, but I
    guess anyone who manages to boot a this modern gpu behind an agp
    bridge deserves a price. A price I never expect anyone to ever collect
    :-)
    
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: "Christian König" <christian.koenig@amd.com>
    Cc: Hawking Zhang <Hawking.Zhang@amd.com>
    Cc: Xiaojie Yuan <xiaojie.yuan@amd.com>
    Cc: Evan Quan <evan.quan@amd.com>
    Cc: "Tianci.Yin" <tianci.yin@amd.com>
    Cc: "Marek Olšák" <marek.olsak@amd.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Emil Velikov <emil.velikov@collabora.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d310188d4ef6d0f1a93a16ba60f44eae294d9bb8
Author: Johan Korsnes <jkorsnes@cisco.com>
Date:   Fri Jan 17 13:08:36 2020 +0100

    HID: core: increase HID report buffer size to 8KiB
    
    commit 84a4062632462c4320704fcdf8e99e89e94c0aba upstream.
    
    We have a HID touch device that reports its opens and shorts test
    results in HID buffers of size 8184 bytes. The maximum size of the HID
    buffer is currently set to 4096 bytes, causing probe of this device to
    fail. With this patch we increase the maximum size of the HID buffer to
    8192 bytes, making device probe and acquisition of said buffers succeed.
    
    Signed-off-by: Johan Korsnes <jkorsnes@cisco.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Armando Visconti <armando.visconti@st.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 819f8ab78a31298807bc37bf5ff4b32def0645ea
Author: Johan Korsnes <jkorsnes@cisco.com>
Date:   Fri Jan 17 13:08:35 2020 +0100

    HID: core: fix off-by-one memset in hid_report_raw_event()
    
    commit 5ebdffd25098898aff1249ae2f7dbfddd76d8f8f upstream.
    
    In case a report is greater than HID_MAX_BUFFER_SIZE, it is truncated,
    but the report-number byte is not correctly handled. This results in a
    off-by-one in the following memset, causing a kernel Oops and ensuing
    system crash.
    
    Note: With commit 8ec321e96e05 ("HID: Fix slab-out-of-bounds read in
    hid_field_extract") I no longer hit the kernel Oops as we instead fail
    "controlled" at probe if there is a report too long in the HID
    report-descriptor. hid_report_raw_event() is an exported symbol, so
    presumabely we cannot always rely on this being the case.
    
    Fixes: 966922f26c7f ("HID: fix a crash in hid_report_raw_event()
                         function.")
    Signed-off-by: Johan Korsnes <jkorsnes@cisco.com>
    Cc: Armando Visconti <armando.visconti@st.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a30a85e74dcd1f3647e6ca308c8dd57efe92c821
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Feb 1 12:56:48 2020 +0100

    HID: ite: Only bind to keyboard USB interface on Acer SW5-012 keyboard dock
    
    commit beae56192a2570578ae45050e73c5ff9254f63e6 upstream.
    
    Commit 8f18eca9ebc5 ("HID: ite: Add USB id match for Acer SW5-012 keyboard
    dock") added the USB id for the Acer SW5-012's keyboard dock to the
    hid-ite driver to fix the rfkill driver not working.
    
    Most keyboard docks with an ITE 8595 keyboard/touchpad controller have the
    "Wireless Radio Control" bits which need the special hid-ite driver on the
    second USB interface (the mouse interface) and their touchpad only supports
    mouse emulation, so using generic hid-input handling for anything but
    the "Wireless Radio Control" bits is fine. On these devices we simply bind
    to all USB interfaces.
    
    But unlike other ITE8595 using keyboard docks, the Acer Aspire Switch 10
    (SW5-012)'s touchpad not only does mouse emulation it also supports
    HID-multitouch and all the keys including the "Wireless Radio Control"
    bits have been moved to the first USB interface (the keyboard intf).
    
    So we need hid-ite to handle the first (keyboard) USB interface and have
    it NOT bind to the second (mouse) USB interface so that that can be
    handled by hid-multitouch.c and we get proper multi-touch support.
    
    This commit changes the hid_device_id for the SW5-012 keyboard dock to
    only match on hid devices from the HID_GROUP_GENERIC group, this way
    hid-ite will not bind the the mouse/multi-touch interface which has
    HID_GROUP_MULTITOUCH_WIN_8 as group.
    This fixes the regression to mouse-emulation mode introduced by adding
    the keyboard dock USB id.
    
    Cc: stable@vger.kernel.org
    Fixes: 8f18eca9ebc5 ("HID: ite: Add USB id match for Acer SW5-012 keyboard dock")
    Reported-by: Zdeněk Rampas <zdenda.rampas@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9154d430dcbd13ef000cbf72eba3075450ec46a3
Author: Oliver Upton <oupton@google.com>
Date:   Sat Feb 29 11:30:14 2020 -0800

    KVM: VMX: check descriptor table exits on instruction emulation
    
    commit 86f7e90ce840aa1db407d3ea6e9b3a52b2ce923c upstream.
    
    KVM emulates UMIP on hardware that doesn't support it by setting the
    'descriptor table exiting' VM-execution control and performing
    instruction emulation. When running nested, this emulation is broken as
    KVM refuses to emulate L2 instructions by default.
    
    Correct this regression by allowing the emulation of descriptor table
    instructions if L1 hasn't requested 'descriptor table exiting'.
    
    Fixes: 07721feee46b ("KVM: nVMX: Don't emulate instructions in guest mode")
    Reported-by: Jan Kiszka <jan.kiszka@web.de>
    Cc: stable@vger.kernel.org
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Jim Mattson <jmattson@google.com>
    Signed-off-by: Oliver Upton <oupton@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07fec9a84c15ab9cc74145a12f1b303ea8ac9237
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Feb 12 17:59:40 2020 +0300

    ACPI: watchdog: Fix gas->access_width usage
    
    commit 2ba33a4e9e22ac4dda928d3e9b5978a3a2ded4e0 upstream.
    
    ACPI Generic Address Structure (GAS) access_width field is not in bytes
    as the driver seems to expect in few places so fix this by using the
    newly introduced macro ACPI_ACCESS_BYTE_WIDTH().
    
    Fixes: b1abf6fc4982 ("ACPI / watchdog: Fix off-by-one error at resource assignment")
    Fixes: 058dfc767008 ("ACPI / watchdog: Add support for WDAT hardware watchdog")
    Reported-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Cc: 4.16+ <stable@vger.kernel.org> # 4.16+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b077e6fa7e2c0679982fd301c062943e4a05158
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Feb 12 17:59:39 2020 +0300

    ACPICA: Introduce ACPI_ACCESS_BYTE_WIDTH() macro
    
    commit 1dade3a7048ccfc675650cd2cf13d578b095e5fb upstream.
    
    Sometimes it is useful to find the access_width field value in bytes and
    not in bits so add a helper that can be used for this purpose.
    
    Suggested-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Cc: 4.16+ <stable@vger.kernel.org> # 4.16+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82a6cb7a8ade5232fb90e553b822327bdfae225c
Author: Paul Moore <paul@paul-moore.com>
Date:   Mon Feb 24 16:38:57 2020 -0500

    audit: always check the netlink payload length in audit_receive_msg()
    
    commit 756125289285f6e55a03861bf4b6257aa3d19a93 upstream.
    
    This patch ensures that we always check the netlink payload length
    in audit_receive_msg() before we take any action on the payload
    itself.
    
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+399c44bf1f43b8747403@syzkaller.appspotmail.com
    Reported-by: syzbot+e4b12d8d202701f08b6d@syzkaller.appspotmail.com
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37f4c2775267c6fea23172f4d0461eb42c8497a6
Author: Paul Moore <paul@paul-moore.com>
Date:   Sat Feb 22 20:36:47 2020 -0500

    audit: fix error handling in audit_data_to_entry()
    
    commit 2ad3e17ebf94b7b7f3f64c050ff168f9915345eb upstream.
    
    Commit 219ca39427bf ("audit: use union for audit_field values since
    they are mutually exclusive") combined a number of separate fields in
    the audit_field struct into a single union.  Generally this worked
    just fine because they are generally mutually exclusive.
    Unfortunately in audit_data_to_entry() the overlap can be a problem
    when a specific error case is triggered that causes the error path
    code to attempt to cleanup an audit_field struct and the cleanup
    involves attempting to free a stored LSM string (the lsm_str field).
    Currently the code always has a non-NULL value in the
    audit_field.lsm_str field as the top of the for-loop transfers a
    value into audit_field.val (both .lsm_str and .val are part of the
    same union); if audit_data_to_entry() fails and the audit_field
    struct is specified to contain a LSM string, but the
    audit_field.lsm_str has not yet been properly set, the error handling
    code will attempt to free the bogus audit_field.lsm_str value that
    was set with audit_field.val at the top of the for-loop.
    
    This patch corrects this by ensuring that the audit_field.val is only
    set when needed (it is cleared when the audit_field struct is
    allocated with kcalloc()).  It also corrects a few other issues to
    ensure that in case of error the proper error code is returned.
    
    Cc: stable@vger.kernel.org
    Fixes: 219ca39427bf ("audit: use union for audit_field values since they are mutually exclusive")
    Reported-by: syzbot+1f4d90ead370d72e450b@syzkaller.appspotmail.com
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e74ccd38e191de7b4cf11bd4132a8b5b645009a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Feb 28 12:22:56 2020 +0300

    ext4: potential crash on allocation error in ext4_alloc_flex_bg_array()
    
    commit 37b0b6b8b99c0e1c1f11abbe7cf49b6d03795b3f upstream.
    
    If sbi->s_flex_groups_allocated is zero and the first allocation fails
    then this code will crash.  The problem is that "i--" will set "i" to
    -1 but when we compare "i >= sbi->s_flex_groups_allocated" then the -1
    is type promoted to unsigned and becomes UINT_MAX.  Since UINT_MAX
    is more than zero, the condition is true so we call kvfree(new_groups[-1]).
    The loop will carry on freeing invalid memory until it crashes.
    
    Fixes: 7c990728b99e ("ext4: fix potential race between s_flex_groups online resizing and access")
    Reviewed-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20200228092142.7irbc44yaz3by7nb@kili.mountain
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d7477fabedbe3c24ff737e6d54eaa1f5cedc25
Author: Keith Busch <kbusch@kernel.org>
Date:   Thu Feb 13 01:41:05 2020 +0900

    nvme/pci: move cqe check after device shutdown
    
    [ Upstream commit fa46c6fb5d61b1f17b06d7c6ef75478b576304c7 ]
    
    Many users have reported nvme triggered irq_startup() warnings during
    shutdown. The driver uses the nvme queue's irq to synchronize scanning
    for completions, and enabling an interrupt affined to only offline CPUs
    triggers the alarming warning.
    
    Move the final CQE check to after disabling the device and all
    registered interrupts have been torn down so that we do not have any
    IRQ to synchronize.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206509
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1fd0e551eebb5435ff8c9efc42de3116b2e9099
Author: Nigel Kirkland <nigel.kirkland@broadcom.com>
Date:   Mon Feb 10 16:01:45 2020 -0800

    nvme: prevent warning triggered by nvme_stop_keep_alive
    
    [ Upstream commit 97b2512ad000a409b4073dd1a71e4157d76675cb ]
    
    Delayed keep alive work is queued on system workqueue and may be cancelled
    via nvme_stop_keep_alive from nvme_reset_wq, nvme_fc_wq or nvme_wq.
    
    Check_flush_dependency detects mismatched attributes between the work-queue
    context used to cancel the keep alive work and system-wq. Specifically
    system-wq does not have the WQ_MEM_RECLAIM flag, whereas the contexts used
    to cancel keep alive work have WQ_MEM_RECLAIM flag.
    
    Example warning:
    
      workqueue: WQ_MEM_RECLAIM nvme-reset-wq:nvme_fc_reset_ctrl_work [nvme_fc]
            is flushing !WQ_MEM_RECLAIM events:nvme_keep_alive_work [nvme_core]
    
    To avoid the flags mismatch, delayed keep alive work is queued on nvme_wq.
    
    However this creates a secondary concern where work and a request to cancel
    that work may be in the same work queue - namely err_work in the rdma and
    tcp transports, which will want to flush/cancel the keep alive work which
    will now be on nvme_wq.
    
    After reviewing the transports, it looks like err_work can be moved to
    nvme_reset_wq. In fact that aligns them better with transition into
    RESETTING and performing related reset work in nvme_reset_wq.
    
    Change nvme-rdma and nvme-tcp to perform err_work in nvme_reset_wq.
    
    Signed-off-by: Nigel Kirkland <nigel.kirkland@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4d26a5069da7e406f0e4956fe1eceb90689cf09
Author: Anton Eidelman <anton@lightbitslabs.com>
Date:   Mon Feb 10 10:37:18 2020 -0800

    nvme/tcp: fix bug on double requeue when send fails
    
    [ Upstream commit 2d570a7c0251c594489a2c16b82b14ae30345c03 ]
    
    When nvme_tcp_io_work() fails to send to socket due to
    connection close/reset, error_recovery work is triggered
    from nvme_tcp_state_change() socket callback.
    This cancels all the active requests in the tagset,
    which requeues them.
    
    The failed request, however, was ended and thus requeued
    individually as well unless send returned -EPIPE.
    Another return code to be treated the same way is -ECONNRESET.
    
    Double requeue caused BUG_ON(blk_queued_rq(rq))
    in blk_mq_requeue_request() from either the individual requeue
    of the failed request or the bulk requeue from
    blk_mq_tagset_busy_iter(, nvme_cancel_request, );
    
    Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b4cf3b98895c845d91d4260313bd081e53bc395
Author: Guangbin Huang <huangguangbin2@huawei.com>
Date:   Fri Feb 14 09:53:43 2020 +0800

    net: hns3: fix a copying IPv6 address error in hclge_fd_get_flow_tuples()
    
    [ Upstream commit 47327c9315b2f3ae4ab659457977a26669631f20 ]
    
    The IPv6 address defined in struct in6_addr is specified as
    big endian, but there is no specified endian in struct
    hclge_fd_rule_tuples, so it  will cause a problem if directly
    use memcpy() to copy ipv6 address between these two structures
    since this field in struct hclge_fd_rule_tuples is little endian.
    
    This patch fixes this problem by using be32_to_cpu() to convert
    endian of IPv6 address of struct in6_addr before copying.
    
    Fixes: d93ed94fbeaf ("net: hns3: add aRFS support for PF")
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87a5534a1ae44f6d052286e1287b3fe1f7aa0838
Author: Yufeng Mo <moyufeng@huawei.com>
Date:   Fri Feb 14 09:53:41 2020 +0800

    net: hns3: add management table after IMP reset
    
    [ Upstream commit d0db7ed397517c8b2be24a0d1abfa15df776908e ]
    
    In the current process, the management table is missing after the
    IMP reset. This patch adds the management table to the reset process.
    
    Fixes: f5aac71c0327 ("net: hns3: add manager table initialization for hardware")
    Signed-off-by: Yufeng Mo <moyufeng@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e98e13176e273629bbcd9aff3faa1a27ee366d6e
Author: Shay Bar <shay.bar@celeno.com>
Date:   Mon Feb 10 15:07:28 2020 +0200

    mac80211: fix wrong 160/80+80 MHz setting
    
    [ Upstream commit 33181ea7f5a62a17fbe55f0f73428ecb5e686be8 ]
    
    Before this patch, STA's would set new width of 160/80+80 MHz based on AP capability only.
    This is wrong because STA may not support > 80MHz BW.
    Fix is to verify STA has 160/80+80 MHz capability before increasing its width to > 80MHz.
    
    The "support_80_80" and "support_160" setting is based on:
    "Table 9-272 — Setting of the Supported Channel Width Set subfield and Extended NSS BW
    Support subfield at a STA transmitting the VHT Capabilities Information field"
    From "Draft P802.11REVmd_D3.0.pdf"
    
    Signed-off-by: Aviad Brikman <aviad.brikman@celeno.com>
    Signed-off-by: Shay Bar <shay.bar@celeno.com>
    Link: https://lore.kernel.org/r/20200210130728.23674-1-shay.bar@celeno.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0593f5b1b64d3e08c67ee756c4253080e52afb2
Author: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
Date:   Thu Feb 13 13:16:16 2020 +0000

    cfg80211: add missing policy for NL80211_ATTR_STATUS_CODE
    
    [ Upstream commit ea75080110a4c1fa011b0a73cb8f42227143ee3e ]
    
    The nl80211_policy is missing for NL80211_ATTR_STATUS_CODE attribute.
    As a result, for strictly validated commands, it's assumed to not be
    supported.
    
    Signed-off-by: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
    Link: https://lore.kernel.org/r/20200213131608.10541-2-sergey.matyukevich.os@quantenna.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99b2040d1b6b63462accb40f27c5e0a92de9805e
Author: Frank Sorenson <sorenson@redhat.com>
Date:   Wed Feb 12 15:31:48 2020 -0600

    cifs: Fix mode output in debugging statements
    
    [ Upstream commit f52aa79df43c4509146140de0241bc21a4a3b4c7 ]
    
    A number of the debug statements output file or directory mode
    in hex.  Change these to print using octal.
    
    Signed-off-by: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7072ad3b1d6ca7f8c4b9aa02bb2ebd21019016f6
Author: Bruce Allan <bruce.w.allan@intel.com>
Date:   Thu Feb 6 01:20:07 2020 -0800

    ice: update Unit Load Status bitmask to check after reset
    
    [ Upstream commit cf8fc2a0863f9ff27ebd2efcdb1f7d378b9fb8a6 ]
    
    After a reset the Unit Load Status bits in the GLNVM_ULD register to check
    for completion should be 0x7FF before continuing.  Update the mask to check
    (minus the three reserved bits that are always set).
    
    Signed-off-by: Bruce Allan <bruce.w.allan@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b81cc04e2aeffb1e68d93df4fc106211c9bfc15e
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:51 2020 +0000

    net: ena: ena-com.c: prevent NULL pointer dereference
    
    [ Upstream commit c207979f5ae10ed70aff1bb13f39f0736973de99 ]
    
    comp_ctx can be NULL in a very rare case when an admin command is executed
    during the execution of ena_remove().
    
    The bug scenario is as follows:
    
    * ena_destroy_device() sets the comp_ctx to be NULL
    * An admin command is executed before executing unregister_netdev(),
      this can still happen because our device can still receive callbacks
      from the netdev infrastructure such as ethtool commands.
    * When attempting to access the comp_ctx, the bug occurs since it's set
      to NULL
    
    Fix:
    Added a check that comp_ctx is not NULL
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d737658c9a1199cc243b04e566992ef32bd1d050
Author: Sameeh Jubran <sameehj@amazon.com>
Date:   Tue Feb 11 15:17:50 2020 +0000

    net: ena: ethtool: use correct value for crc32 hash
    
    [ Upstream commit 886d2089276e40d460731765083a741c5c762461 ]
    
    Up till kernel 4.11 there was no enum defined for crc32 hash in ethtool,
    thus the xor enum was used for supporting crc32.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7f8a4e82a416c2d8dd0e81baef564e00e53dbd5
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:48 2020 +0000

    net: ena: fix corruption of dev_idx_to_host_tbl
    
    [ Upstream commit e3f89f91e98ce07dc0f121a3b70d21aca749ba39 ]
    
    The function ena_com_ind_tbl_convert_from_device() has an overflow
    bug as explained below. Either way, this function is not needed at
    all since we don't retrieve the indirection table from the device
    at any point which means that this conversion is not needed.
    
    The bug:
    The for loop iterates over all io_sq_queues, when passing the actual
    number of used queues the io_sq_queues[i].idx equals 0 since they are
    uninitialized which results in the following code to be executed till
    the end of the loop:
    
    dev_idx_to_host_tbl[0] = i;
    
    This results dev_idx_to_host_tbl[0] in being equal to
    ENA_TOTAL_NUM_QUEUES - 1.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5408a8088d5981ecc14747a0b2ca97f636c44660
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:47 2020 +0000

    net: ena: fix incorrectly saving queue numbers when setting RSS indirection table
    
    [ Upstream commit 92569fd27f5cb0ccbdf7c7d70044b690e89a0277 ]
    
    The indirection table has the indices of the Rx queues. When we store it
    during set indirection operation, we convert the indices to our internal
    representation of the indices.
    
    Our internal representation of the indices is: even indices for Tx and
    uneven indices for Rx, where every Tx/Rx pair are in a consecutive order
    starting from 0. For example if the driver has 3 queues (3 for Tx and 3
    for Rx) then the indices are as follows:
    0  1  2  3  4  5
    Tx Rx Tx Rx Tx Rx
    
    The BUG:
    The issue is that when we satisfy a get request for the indirection
    table, we don't convert the indices back to the original representation.
    
    The FIX:
    Simply apply the inverse function for the indices of the indirection
    table after we set it.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdc142e4c28274c27cfc9b49008d89f7d3140de0
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:46 2020 +0000

    net: ena: rss: store hash function as values and not bits
    
    [ Upstream commit 4844470d472d660c26149ad764da2406adb13423 ]
    
    The device receives, stores and retrieves the hash function value as bits
    and not as their enum value.
    
    The bug:
    * In ena_com_set_hash_function() we set
      cmd.u.flow_hash_func.selected_func to the bit value of rss->hash_func.
     (1 << rss->hash_func)
    * In ena_com_get_hash_function() we retrieve the hash function and store
      it's bit value in rss->hash_func. (Now the bit value of rss->hash_func
      is stored in rss->hash_func instead of it's enum value)
    
    The fix:
    This commit fixes the issue by converting the retrieved hash function
    values from the device to the matching enum value of the set bit using
    ffs(). ffs() finds the first set bit's index in a word. Since the function
    returns 1 for the LSB's index, we need to subtract 1 from the returned
    value (note that BIT(0) is 1).
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb9b6ff1fd71857025ac29aacc745f38ad20e68b
Author: Sameeh Jubran <sameehj@amazon.com>
Date:   Tue Feb 11 15:17:45 2020 +0000

    net: ena: rss: fix failure to get indirection table
    
    [ Upstream commit 0c8923c0a64fb5d14bebb9a9065d2dc25ac5e600 ]
    
    On old hardware, getting / setting the hash function is not supported while
    gettting / setting the indirection table is.
    
    This commit enables us to still show the indirection table on older
    hardwares by setting the hash function and key to NULL.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ab7207ad11d677bcaab5a916b185bbfbfe9c5d3
Author: Sameeh Jubran <sameehj@amazon.com>
Date:   Tue Feb 11 15:17:44 2020 +0000

    net: ena: rss: do not allocate key when not supported
    
    [ Upstream commit 6a4f7dc82d1e3abd3feb0c60b5041056fcd9880c ]
    
    Currently we allocate the key whether the device supports setting the
    key or not. This commit adds a check to the allocation function and
    handles the error accordingly.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6f54019b9645feffafe31faafff422f49cff8fc
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:43 2020 +0000

    net: ena: fix incorrect default RSS key
    
    [ Upstream commit 0d1c3de7b8c78a5e44b74b62ede4a63629f5d811 ]
    
    Bug description:
    When running "ethtool -x <if_name>" the key shows up as all zeros.
    
    When we use "ethtool -X <if_name> hfunc toeplitz hkey <some:random:key>" to
    set the key and then try to retrieve it using "ethtool -x <if_name>" then
    we return the correct key because we return the one we saved.
    
    Bug cause:
    We don't fetch the key from the device but instead return the key
    that we have saved internally which is by default set to zero upon
    allocation.
    
    Fix:
    This commit fixes the issue by initializing the key to a random value
    using netdev_rss_key_fill().
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6088f3f70186f0c516ce38d7acc9496b3b475d48
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:42 2020 +0000

    net: ena: add missing ethtool TX timestamping indication
    
    [ Upstream commit cf6d17fde93bdda23c9b02dd5906a12bf8c55209 ]
    
    Current implementation of the driver calls skb_tx_timestamp()to add a
    software tx timestamp to the skb, however the software-transmit capability
    is not reported in ethtool -T.
    
    This commit updates the ethtool structure to report the software-transmit
    capability in ethtool -T using the standard ethtool_op_get_ts_info().
    This function reports all software timestamping capabilities (tx and rx),
    as well as setting phc_index = -1. phc_index is the index of the PTP
    hardware clock device that will be used for hardware timestamps. Since we
    don't have such a device in ENA, using the default -1 value is the correct
    setting.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Ezequiel Lara Gomez <ezegomez@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c27b8d64571ac9ec6ff587769e9fde063ce0667
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:41 2020 +0000

    net: ena: fix uses of round_jiffies()
    
    [ Upstream commit 2a6e5fa2f4c25b66c763428a3e65363214946931 ]
    
    >From the documentation of round_jiffies():
    "Rounds a time delta  in the future (in jiffies) up or down to
    (approximately) full seconds. This is useful for timers for which
    the exact time they fire does not matter too much, as long as
    they fire approximately every X seconds.
    By rounding these timers to whole seconds, all such timers will fire
    at the same time, rather than at various times spread out. The goal
    of this is to have the CPU wake up less, which saves power."
    
    There are 2 parts to this patch:
    ================================
    Part 1:
    -------
    In our case we need timer_service to be called approximately every
    X=1 seconds, and the exact time does not matter, so using round_jiffies()
    is the right way to go.
    
    Therefore we add round_jiffies() to the mod_timer() in ena_timer_service().
    
    Part 2:
    -------
    round_jiffies() is used in check_for_missing_keep_alive() when
    getting the jiffies of the expiration of the keep_alive timeout. Here it
    is actually a mistake to use round_jiffies() because we want the exact
    time when keep_alive should expire and not an approximate rounded time,
    which can cause early, false positive, timeouts.
    
    Therefore we remove round_jiffies() in the calculation of
    keep_alive_expired() in check_for_missing_keep_alive().
    
    Fixes: 82ef30f13be0 ("net: ena: add hardware hints capability to the driver")
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bc08766658f647923ea17af28083ceb61ff1f66
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:40 2020 +0000

    net: ena: fix potential crash when rxfh key is NULL
    
    [ Upstream commit 91a65b7d3ed8450f31ab717a65dcb5f9ceb5ab02 ]
    
    When ethtool -X is called without an hkey, ena_com_fill_hash_function()
    is called with key=NULL, which is passed to memcpy causing a crash.
    
    This commit fixes this issue by checking key is not NULL.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c17f8a738f59de0f46fbe14c2383afff5ff165ce
Author: Brett Creeley <brett.creeley@intel.com>
Date:   Mon Feb 10 10:59:18 2020 -0800

    i40e: Fix the conditional for i40e_vc_validate_vqs_bitmaps
    
    [ Upstream commit f27f37a04a69890ac85d9155f03ee2d23b678d8f ]
    
    Commit d9d6a9aed3f6 ("i40e: Fix virtchnl_queue_select bitmap
    validation") introduced a necessary change for verifying how queue
    bitmaps from the iavf driver get validated. Unfortunately, the
    conditional was reversed. Fix this.
    
    Fixes: d9d6a9aed3f6 ("i40e: Fix virtchnl_queue_select bitmap validation")
    Signed-off-by: Brett Creeley <brett.creeley@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1367028826915fde4e57d8afd95660887c5ddacc
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Feb 3 15:31:14 2020 +0100

    soc/tegra: fuse: Fix build with Tegra194 configuration
    
    [ Upstream commit 6f4ecbe284df5f22e386a640d9a4b32cede62030 ]
    
    If only Tegra194 support is enabled, the tegra30_fuse_read() and
    tegra30_fuse_init() function are not declared and cause a build failure.
    Add Tegra194 to the preprocessor guard to make sure these functions are
    available for Tegra194-only builds as well.
    
    Link: https://lore.kernel.org/r/20200203143114.3967295-1-thierry.reding@gmail.com
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c4b25053248dd7e01fa43189338fce0d2f01321
Author: Daniel Kolesa <daniel@octaforge.org>
Date:   Thu Feb 6 20:14:35 2020 +0100

    amdgpu: Prevent build errors regarding soft/hard-float FP ABI tags
    
    [ Upstream commit 416611d9b6eebaeae58ed26cc7d23131c69126b1 ]
    
    On PowerPC, the compiler will tag object files with whether they
    use hard or soft float FP ABI and whether they use 64 or 128-bit
    long double ABI. On systems with 64-bit long double ABI, a tag
    will get emitted whenever a double is used, as on those systems
    a long double is the same as a double. This will prevent linkage
    as other files are being compiled with hard-float.
    
    On ppc64, this code will never actually get used for the time
    being, as the only currently existing hardware using it are the
    Renoir APUs. Therefore, until this is testable and can be fixed
    properly, at least make sure the build will not fail.
    
    Signed-off-by: Daniel Kolesa <daniel@octaforge.org>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd32771da12cf5351e12936a721574c41dbe1f90
Author: Isabel Zhang <isabel.zhang@amd.com>
Date:   Mon Jan 27 10:57:16 2020 -0500

    drm/amd/display: Add initialitions for PLL2 clock source
    
    [ Upstream commit c134c3cabae46a56ab2e1f5e5fa49405e1758838 ]
    
    [Why]
    Starting from 14nm, the PLL is built into the PHY and the PLL is mapped
    to PHY on 1 to 1 basis. In the code, the DP port is mapped to a PLL that was not
    initialized. This causes DP to HDMI dongle to not light up the display.
    
    [How]
    Initializations added for PLL2 when creating resources.
    
    Signed-off-by: Isabel Zhang <isabel.zhang@amd.com>
    Reviewed-by: Eric Yang <eric.yang2@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 147fcd07ceba1e6fe3c3218387651656f4b6afe1
Author: Yongqiang Sun <yongqiang.sun@amd.com>
Date:   Thu Jan 23 16:30:15 2020 -0500

    drm/amd/display: Limit minimum DPPCLK to 100MHz.
    
    [ Upstream commit 6c81917a0485ee2a1be0dc23321ac10ecfd9578b ]
    
    [Why]
    Underflow is observed when plug in a 4K@60 monitor with
    1366x768 eDP due to DPPCLK is too low.
    
    [How]
    Limit minimum DPPCLK to 100MHz.
    
    Signed-off-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Reviewed-by: Eric Yang <eric.yang2@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e5154923c1f1f118cd88c8966b44aeb9117f1fe
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Tue Jan 21 22:50:13 2020 -0500

    drm/amd/display: Check engine is not NULL before acquiring
    
    [ Upstream commit 2b63d0ec0daf79ba503fa8bfa25e07dc3da274f3 ]
    
    [Why]
    Engine can be NULL in some cases, so we must not acquire it.
    
    [How]
    Check for NULL engine before acquiring.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb62f4c2eb9a0dc848e357351596f376e0d0c830
Author: Krishnamraju Eraparaju <krishna2@chelsio.com>
Date:   Fri Feb 7 19:44:29 2020 +0530

    RDMA/siw: Remove unwanted WARN_ON in siw_cm_llp_data_ready()
    
    [ Upstream commit 663218a3e715fd9339d143a3e10088316b180f4f ]
    
    Warnings like below can fill up the dmesg while disconnecting RDMA
    connections.
    Hence, remove the unwanted WARN_ON.
    
      WARNING: CPU: 6 PID: 0 at drivers/infiniband/sw/siw/siw_cm.c:1229 siw_cm_llp_data_ready+0xc1/0xd0 [siw]
      RIP: 0010:siw_cm_llp_data_ready+0xc1/0xd0 [siw]
      Call Trace:
       <IRQ>
       tcp_data_queue+0x226/0xb40
       tcp_rcv_established+0x220/0x620
       tcp_v4_do_rcv+0x12a/0x1e0
       tcp_v4_rcv+0xb05/0xc00
       ip_local_deliver_finish+0x69/0x210
       ip_local_deliver+0x6b/0xe0
       ip_rcv+0x273/0x362
       __netif_receive_skb_core+0xb35/0xc30
       netif_receive_skb_internal+0x3d/0xb0
       napi_gro_frags+0x13b/0x200
       t4_ethrx_handler+0x433/0x7d0 [cxgb4]
       process_responses+0x318/0x580 [cxgb4]
       napi_rx_handler+0x14/0x100 [cxgb4]
       net_rx_action+0x149/0x3b0
       __do_softirq+0xe3/0x30a
       irq_exit+0x100/0x110
       do_IRQ+0x7f/0xe0
       common_interrupt+0xf/0xf
       </IRQ>
    
    Link: https://lore.kernel.org/r/20200207141429.27927-1-krishna2@chelsio.com
    Signed-off-by: Krishnamraju Eraparaju <krishna2@chelsio.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 083afcaccb586998893a442e87072cfa4fa6403e
Author: Sung Lee <sung.lee@amd.com>
Date:   Wed Jan 15 11:55:06 2020 -0500

    drm/amd/display: Do not set optimized_require to false after plane disable
    
    [ Upstream commit df36f6cf23ada812930afa8ee76681d4ad307c61 ]
    
    [WHY]
    The optimized_require flag is needed to set watermarks and clocks lower
    in certain conditions. This flag is set to true and then set to false
    while programming front end in dcn20.
    
    [HOW]
    Do not set the flag to false while disabling plane.
    
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bf72abda2dcd9b42024cca9d29b76bcf8844685
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Mon Dec 16 11:08:47 2019 +0900

    ARM: dts: sti: fixup sound frame-inversion for stihxxx-b2120.dtsi
    
    [ Upstream commit f24667779b5348279e5e4328312a141a730a1fc7 ]
    
    frame-inversion is "flag" not "uint32".
    This patch fixup it.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Reviewed-by: Patrice Chotard <patrice.chotard@st.com>
    Signed-off-by: Patrice Chotard <patrice.chotard@st.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b520f78ba4286e9ac82ffdf45ec55112058e7891
Author: Xiubo Li <xiubli@redhat.com>
Date:   Mon Feb 3 21:28:25 2020 -0500

    ceph: do not execute direct write in parallel if O_APPEND is specified
    
    [ Upstream commit 8e4473bb50a1796c9c32b244e5dbc5ee24ead937 ]
    
    In O_APPEND & O_DIRECT mode, the data from different writers will
    be possibly overlapping each other since they take the shared lock.
    
    For example, both Writer1 and Writer2 are in O_APPEND and O_DIRECT
    mode:
    
              Writer1                         Writer2
    
         shared_lock()                   shared_lock()
         getattr(CAP_SIZE)               getattr(CAP_SIZE)
         iocb->ki_pos = EOF              iocb->ki_pos = EOF
         write(data1)
                                         write(data2)
         shared_unlock()                 shared_unlock()
    
    The data2 will overlap the data1 from the same file offset, the
    old EOF.
    
    Switch to exclusive lock instead when O_APPEND is specified.
    
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b0a0bd12963f0aa92195e674c139860098d631c
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Tue Jan 28 10:31:19 2020 -0800

    perf/x86/msr: Add Tremont support
    
    [ Upstream commit 0aa0e0d6b34b89649e6b5882a7e025a0eb9bd832 ]
    
    Tremont is Intel's successor to Goldmont Plus. SMI_COUNT MSR is also
    supported.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/1580236279-35492-3-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1fdeaf6e9fe341f3f8939c09b9007c6a53f1e4c
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Tue Jan 28 10:31:18 2020 -0800

    perf/x86/cstate: Add Tremont support
    
    [ Upstream commit ecf71fbccb9ac5cb964eb7de59bb9da3755b7885 ]
    
    Tremont is Intel's successor to Goldmont Plus. From the perspective of
    Intel cstate residency counters, there is nothing changed compared with
    Goldmont Plus and Goldmont.
    
    Share glm_cstates with Goldmont Plus and Goldmont.
    Update the comments for Tremont.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/1580236279-35492-2-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b1ca90fa4d78317fbd7fd000e5155e5b3090fb8
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Tue Jan 28 10:31:17 2020 -0800

    perf/x86/intel: Add Elkhart Lake support
    
    [ Upstream commit eda23b387f6c4bb2971ac7e874a09913f533b22c ]
    
    Elkhart Lake also uses Tremont CPU. From the perspective of Intel PMU,
    there is nothing changed compared with Jacobsville.
    Share the perf code with Jacobsville.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/1580236279-35492-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75061b865142e782c2450943a5f9f4dbfeb159ca
Author: John Garry <john.garry@huawei.com>
Date:   Tue Feb 11 00:50:17 2020 +0800

    perf/smmuv3: Use platform_get_irq_optional() for wired interrupt
    
    [ Upstream commit 0ca2c0319a7bce0e152b51b866979d62dc261e48 ]
    
    Even though a SMMUv3 PMCG implementation may use an MSI as the form of
    interrupt source, the kernel would still complain that it does not find
    the wired (GSIV) interrupt in this case:
    
    root@(none)$ dmesg | grep arm-smmu-v3-pmcg | grep "not found"
    [   59.237219] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.8.auto: IRQ index 0 not found
    [   59.322841] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.9.auto: IRQ index 0 not found
    [   59.422155] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.10.auto: IRQ index 0 not found
    [   59.539014] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.11.auto: IRQ index 0 not found
    [   59.640329] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.12.auto: IRQ index 0 not found
    [   59.743112] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.13.auto: IRQ index 0 not found
    [   59.880577] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.14.auto: IRQ index 0 not found
    [   60.017528] arm-smmu-v3-pmcg arm-smmu-v3-pmcg.15.auto: IRQ index 0 not found
    
    Use platform_get_irq_optional() to silence the warning.
    
    If neither interrupt source is found, then the driver will still warn that
    IRQ setup errored and the probe will fail.
    
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 862e4c3a4b0083da12667b155150afc9cdec66b2
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Wed Feb 5 09:01:53 2020 -0500

    NFSv4: Fix races between open and dentry revalidation
    
    [ Upstream commit cf5b4059ba7197d6cef9c0e024979d178ed8c8ec ]
    
    We want to make sure that we revalidate the dentry if and only if
    we've done an OPEN by filename.
    In order to avoid races with remote changes to the directory on the
    server, we want to save the verifier before calling OPEN. The exception
    is if the server returned a delegation with our OPEN, as we then
    know that the filename can't have changed on the server.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Reviewed-by: Benjamin Coddington <bcodding@gmail.com>
    Tested-by: Benjamin Coddington <bcodding@gmail.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6eceafad2fffdce6fb227ad88f6e3cad36acfa4e
Author: Bjørn Mork <bjorn@mork.no>
Date:   Sat Feb 8 16:55:04 2020 +0100

    qmi_wwan: unconditionally reject 2 ep interfaces
    
    [ Upstream commit 00516d13d4cfa56ce39da144db2dbf08b09b9357 ]
    
    We have been using the fact that the QMI and DIAG functions
    usually are the only ones with class/subclass/protocol being
    ff/ff/ff on Quectel modems. This has allowed us to match the
    QMI function without knowing the exact interface number,
    which can vary depending on firmware configuration.
    
    The ability to silently reject the DIAG function, which is
    usually handled by the option driver, is important for this
    method to work.  This is done based on the knowledge that it
    has exactly 2 bulk endpoints.  QMI function control interfaces
    will have either 3 or 1 endpoint. This rule is universal so
    the quirk condition can be removed.
    
    The fixed layouts known from the Gobi1k and Gobi2k modems
    have been gradually replaced by more dynamic layouts, and
    many vendors now use configurable layouts without changing
    device IDs.  Renaming the class/subclass/protocol matching
    macro makes it more obvious that this is now not Quectel
    specific anymore.
    
    Cc: Kristian Evensen <kristian.evensen@gmail.com>
    Cc: Aleksander Morgado <aleksander@aleksander.es>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5fe94e8dcfe06eb4efdc1bb8ae95f14daae0d71
Author: Bjørn Mork <bjorn@mork.no>
Date:   Sat Feb 8 15:50:36 2020 +0100

    qmi_wwan: re-add DW5821e pre-production variant
    
    [ Upstream commit 88bf54603f6f2c137dfee1abf6436ceac3528d2d ]
    
    Commit f25e1392fdb5 removed the support for the pre-production variant
    of the Dell DW5821e to avoid probing another USB interface unnecessarily.
    However, the pre-production samples are found in the wild, and this lack
    of support is causing problems for users of such samples.  It is therefore
    necessary to support both variants.
    
    Matching on both interfaces 0 and 1 is not expected to cause any problem
    with either variant, as only the QMI function will be probed successfully
    on either.  Interface 1 will be rejected based on the HID class for the
    production variant:
    
    T:  Bus=01 Lev=03 Prnt=04 Port=00 Cnt=01 Dev#= 16 Spd=480 MxCh= 0
    D:  Ver= 2.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  2
    P:  Vendor=413c ProdID=81d7 Rev=03.18
    S:  Manufacturer=DELL
    S:  Product=DW5821e Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#= 1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    And interface 0 will be rejected based on too few endpoints for the
    pre-production variant:
    
    T: Bus=01 Lev=02 Prnt=02 Port=03 Cnt=03 Dev#= 7 Spd=480 MxCh= 0
    D: Ver= 2.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs= 2
    P: Vendor=413c ProdID=81d7 Rev= 3.18
    S: Manufacturer=DELL
    S: Product=DW5821e Snapdragon X20 LTE
    S: SerialNumber=0123456789ABCDEF
    C: #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I: If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=
    I: If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I: If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I: If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I: If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    
    Fixes: f25e1392fdb5 ("qmi_wwan: fix interface number for DW5821e production firmware")
    Link: https://whrl.pl/Rf0vNk
    Reported-by: Lars Melin <larsm17@gmail.com>
    Cc: Aleksander Morgado <aleksander@aleksander.es>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1b2925e6bc80c1537b323f97c5c820274c4bae1
Author: Harald Freudenberger <freude@linux.ibm.com>
Date:   Fri Dec 20 16:02:54 2019 +0100

    s390/zcrypt: fix card and queue total counter wrap
    
    [ Upstream commit fcd98d4002539f1e381916fc1b6648938c1eac76 ]
    
    The internal statistic counters for the total number of
    requests processed per card and per queue used integers. So they do
    wrap after a rather huge amount of crypto requests processed. This
    patch introduces uint64 counters which should hold much longer but
    still may wrap. The sysfs attributes request_count for card and queue
    also used only %ld and now display the counter value with %llu.
    
    This is not a security relevant fix. The int overflow which happened
    is not in any way exploitable as a security breach.
    
    Signed-off-by: Harald Freudenberger <freude@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd206c770d4144027e5a48968f6b314fa5619950
Author: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
Date:   Mon Feb 3 10:56:50 2020 +0000

    cfg80211: check wiphy driver existence for drvinfo report
    
    [ Upstream commit bfb7bac3a8f47100ebe7961bd14e924c96e21ca7 ]
    
    When preparing ethtool drvinfo, check if wiphy driver is defined
    before dereferencing it. Driver may not exist, e.g. if wiphy is
    attached to a virtual platform device.
    
    Signed-off-by: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
    Link: https://lore.kernel.org/r/20200203105644.28875-1-sergey.matyukevich.os@quantenna.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d6df86cad5e7ca2cd2c34f089f4e47e2b2e877c
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 31 13:12:58 2020 +0200

    mac80211: consider more elements in parsing CRC
    
    [ Upstream commit a04564c99bb4a92f805a58e56b2d22cc4978f152 ]
    
    We only use the parsing CRC for checking if a beacon changed,
    and elements with an ID > 63 cannot be represented in the
    filter. Thus, like we did before with WMM and Cisco vendor
    elements, just statically add these forgotten items to the
    CRC:
     - WLAN_EID_VHT_OPERATION
     - WLAN_EID_OPMODE_NOTIF
    
    I guess that in most cases when VHT/HE operation change, the HT
    operation also changed, and so the change was picked up, but we
    did notice that pure operating mode notification changes were
    ignored.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/20200131111300.891737-22-luca@coelho.fi
    [restrict to VHT for the mac80211 branch]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb232821faf5fa92e0672e184af42199b6e6f721
Author: Jeff Moyer <jmoyer@redhat.com>
Date:   Wed Feb 5 14:15:58 2020 -0500

    dax: pass NOWAIT flag to iomap_apply
    
    [ Upstream commit 96222d53842dfe54869ec4e1b9d4856daf9105a2 ]
    
    fstests generic/471 reports a failure when run with MOUNT_OPTIONS="-o
    dax".  The reason is that the initial pwrite to an empty file with the
    RWF_NOWAIT flag set does not return -EAGAIN.  It turns out that
    dax_iomap_rw doesn't pass that flag through to iomap_apply.
    
    With this patch applied, generic/471 passes for me.
    
    Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/x49r1z86e1d.fsf@segfault.boston.devel.redhat.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36b5fcc140a73a20f265b994a3b27a902bd1b141
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Tue Jan 14 15:13:56 2020 +0100

    sched/fair: Prevent unlimited runtime on throttled group
    
    [ Upstream commit 2a4b03ffc69f2dedc6388e9a6438b5f4c133a40d ]
    
    When a running task is moved on a throttled task group and there is no
    other task enqueued on the CPU, the task can keep running using 100% CPU
    whatever the allocated bandwidth for the group and although its cfs rq is
    throttled. Furthermore, the group entity of the cfs_rq and its parents are
    not enqueued but only set as curr on their respective cfs_rqs.
    
    We have the following sequence:
    
    sched_move_task
      -dequeue_task: dequeue task and group_entities.
      -put_prev_task: put task and group entities.
      -sched_change_group: move task to new group.
      -enqueue_task: enqueue only task but not group entities because cfs_rq is
        throttled.
      -set_next_task : set task and group_entities as current sched_entity of
        their cfs_rq.
    
    Another impact is that the root cfs_rq runnable_load_avg at root rq stays
    null because the group_entities are not enqueued. This situation will stay
    the same until an "external" event triggers a reschedule. Let trigger it
    immediately instead.
    
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Ben Segall <bsegall@google.com>
    Link: https://lkml.kernel.org/r/1579011236-31256-1-git-send-email-vincent.guittot@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 166d6008fa2aba1cd1291590254eca8f2644d1a3
Author: Peter Zijlstra (Intel) <peterz@infradead.org>
Date:   Sat Jan 11 04:53:39 2020 -0500

    timers/nohz: Update NOHZ load in remote tick
    
    [ Upstream commit ebc0f83c78a2d26384401ecf2d2fa48063c0ee27 ]
    
    The way loadavg is tracked during nohz only pays attention to the load
    upon entering nohz.  This can be particularly noticeable if full nohz is
    entered while non-idle, and then the cpu goes idle and stays that way for
    a long time.
    
    Use the remote tick to ensure that full nohz cpus report their deltas
    within a reasonable time.
    
    [ swood: Added changelog and removed recheck of stopped tick. ]
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Scott Wood <swood@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lkml.kernel.org/r/1578736419-14628-3-git-send-email-swood@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a309e3bf1e8ffce76caf497e8b5889902c09398
Author: Scott Wood <swood@redhat.com>
Date:   Sat Jan 11 04:53:38 2020 -0500

    sched/core: Don't skip remote tick for idle CPUs
    
    [ Upstream commit 488603b815a7514c7009e6fc339d74ed4a30f343 ]
    
    This will be used in the next patch to get a loadavg update from
    nohz cpus.  The delta check is skipped because idle_sched_class
    doesn't update se.exec_start.
    
    Signed-off-by: Scott Wood <swood@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lkml.kernel.org/r/1578736419-14628-2-git-send-email-swood@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b855c6399c1f6cb5f5e05db0e7cd02f2558b420c
Author: Sean Paul <seanpaul@chromium.org>
Date:   Tue Jan 21 11:18:48 2020 -0800

    drm/msm: Set dma maximum segment size for mdss
    
    [ Upstream commit db735fc4036bbe1fbe606819b5f0ff26cc76cdff ]
    
    Turning on CONFIG_DMA_API_DEBUG_SG results in the following error:
    
    [   12.078665] msm ae00000.mdss: DMA-API: mapping sg segment longer than device claims to support [len=3526656] [max=65536]
    [   12.089870] WARNING: CPU: 6 PID: 334 at /mnt/host/source/src/third_party/kernel/v4.19/kernel/dma/debug.c:1301 debug_dma_map_sg+0x1dc/0x318
    [   12.102655] Modules linked in: joydev
    [   12.106442] CPU: 6 PID: 334 Comm: frecon Not tainted 4.19.0 #2
    [   12.112450] Hardware name: Google Cheza (rev3+) (DT)
    [   12.117566] pstate: 60400009 (nZCv daif +PAN -UAO)
    [   12.122506] pc : debug_dma_map_sg+0x1dc/0x318
    [   12.126995] lr : debug_dma_map_sg+0x1dc/0x318
    [   12.131487] sp : ffffff800cc3ba80
    [   12.134913] x29: ffffff800cc3ba80 x28: 0000000000000000
    [   12.140395] x27: 0000000000000004 x26: 0000000000000004
    [   12.145868] x25: ffffff8008e55b18 x24: 0000000000000000
    [   12.151337] x23: 00000000ffffffff x22: ffffff800921c000
    [   12.156809] x21: ffffffc0fa75b080 x20: ffffffc0f7195090
    [   12.162280] x19: ffffffc0f1c53280 x18: 0000000000000000
    [   12.167749] x17: 0000000000000000 x16: 0000000000000000
    [   12.173218] x15: 0000000000000000 x14: 0720072007200720
    [   12.178689] x13: 0720072007200720 x12: 0720072007200720
    [   12.184161] x11: 0720072007200720 x10: 0720072007200720
    [   12.189641] x9 : ffffffc0f1fc6b60 x8 : 0000000000000000
    [   12.195110] x7 : ffffff8008132ce0 x6 : 0000000000000000
    [   12.200585] x5 : 0000000000000000 x4 : ffffff8008134734
    [   12.206058] x3 : ffffff800cc3b830 x2 : ffffffc0f1fc6240
    [   12.211532] x1 : 25045a74f48a7400 x0 : 25045a74f48a7400
    [   12.217006] Call trace:
    [   12.219535]  debug_dma_map_sg+0x1dc/0x318
    [   12.223671]  get_pages+0x19c/0x20c
    [   12.227177]  msm_gem_fault+0x64/0xfc
    [   12.230874]  __do_fault+0x3c/0x140
    [   12.234383]  __handle_mm_fault+0x70c/0xdb8
    [   12.238603]  handle_mm_fault+0xac/0xc4
    [   12.242473]  do_page_fault+0x1bc/0x3d4
    [   12.246342]  do_translation_fault+0x54/0x88
    [   12.250652]  do_mem_abort+0x60/0xf0
    [   12.254250]  el0_da+0x20/0x24
    [   12.257317] irq event stamp: 67260
    [   12.260828] hardirqs last  enabled at (67259): [<ffffff8008132d0c>] console_unlock+0x214/0x608
    [   12.269693] hardirqs last disabled at (67260): [<ffffff8008080e0c>] do_debug_exception+0x5c/0x178
    [   12.278820] softirqs last  enabled at (67256): [<ffffff8008081664>] __do_softirq+0x4d4/0x520
    [   12.287510] softirqs last disabled at (67249): [<ffffff80080be574>] irq_exit+0xa8/0x100
    [   12.295742] ---[ end trace e63cfc40c313ffab ]---
    
    The root of the problem is that the default segment size for sgt is
    (UINT_MAX & PAGE_MASK), and the default segment size for device dma is
    64K. As such, if you compare the 2, you would deduce that the sg segment
    will overflow the device's capacity. In reality, the hardware can
    accommodate the larger sg segments, it's just not initializing its max
    segment properly. This patch initializes the max segment size for the
    mdss device, which gets rid of that pesky warning.
    
    Reported-by: Stephen Boyd <swboyd@chromium.org>
    Tested-by: Stephen Boyd <swboyd@chromium.org>
    Tested-by: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200121111813.REPOST.1.I92c66a35fb13f368095b05287bdabdbe88ca6922@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66bc95c1955abd8d096774f10ab5beefecdab2ec
Author: Corey Minyard <cminyard@mvista.com>
Date:   Mon Dec 23 10:42:19 2019 -0600

    ipmi:ssif: Handle a possible NULL pointer reference
    
    [ Upstream commit 6b8526d3abc02c08a2f888e8c20b7ac9e5776dfe ]
    
    In error cases a NULL can be passed to memcpy.  The length will always
    be zero, so it doesn't really matter, but go ahead and check for NULL,
    anyway, to be more precise and avoid static analysis errors.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8097108725c38560eca49b99f189915a2e55956d
Author: Benjamin Poirier <bpoirier@cumulusnetworks.com>
Date:   Wed Feb 12 10:41:07 2020 +0900

    ipv6: Fix nlmsg_flags when splitting a multipath route
    
    [ Upstream commit afecdb376bd81d7e16578f0cfe82a1aec7ae18f3 ]
    
    When splitting an RTA_MULTIPATH request into multiple routes and adding the
    second and later components, we must not simply remove NLM_F_REPLACE but
    instead replace it by NLM_F_CREATE. Otherwise, it may look like the netlink
    message was malformed.
    
    For example,
            ip route add 2001:db8::1/128 dev dummy0
            ip route change 2001:db8::1/128 nexthop via fe80::30:1 dev dummy0 \
                    nexthop via fe80::30:2 dev dummy0
    results in the following warnings:
    [ 1035.057019] IPv6: RTM_NEWROUTE with no NLM_F_CREATE or NLM_F_REPLACE
    [ 1035.057517] IPv6: NLM_F_CREATE should be set when creating new route
    
    This patch makes the nlmsg sequence look equivalent for __ip6_ins_rt() to
    what it would get if the multipath route had been added in multiple netlink
    operations:
            ip route add 2001:db8::1/128 dev dummy0
            ip route change 2001:db8::1/128 nexthop via fe80::30:1 dev dummy0
            ip route append 2001:db8::1/128 nexthop via fe80::30:2 dev dummy0
    
    Fixes: 27596472473a ("ipv6: fix ECMP route replacement")
    Signed-off-by: Benjamin Poirier <bpoirier@cumulusnetworks.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b3beff4e8f91e25895d6bcf467779057023eee0
Author: Benjamin Poirier <bpoirier@cumulusnetworks.com>
Date:   Wed Feb 12 10:41:06 2020 +0900

    ipv6: Fix route replacement with dev-only route
    
    [ Upstream commit e404b8c7cfb31654c9024d497cec58a501501692 ]
    
    After commit 27596472473a ("ipv6: fix ECMP route replacement") it is no
    longer possible to replace an ECMP-able route by a non ECMP-able route.
    For example,
            ip route add 2001:db8::1/128 via fe80::1 dev dummy0
            ip route replace 2001:db8::1/128 dev dummy0
    does not work as expected.
    
    Tweak the replacement logic so that point 3 in the log of the above commit
    becomes:
    3. If the new route is not ECMP-able, and no matching non-ECMP-able route
    exists, replace matching ECMP-able route (if any) or add the new route.
    
    We can now summarize the entire replace semantics to:
    When doing a replace, prefer replacing a matching route of the same
    "ECMP-able-ness" as the replace argument. If there is no such candidate,
    fallback to the first route found.
    
    Fixes: 27596472473a ("ipv6: fix ECMP route replacement")
    Signed-off-by: Benjamin Poirier <bpoirier@cumulusnetworks.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a908830e69bc8afee8fb92d86595a90d2b6cac2
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Feb 15 10:50:40 2020 +0000

    bonding: fix lockdep warning in bond_get_stats()
    
    [ Upstream commit b3e80d44f5b1b470dd9e2dbc6816e63a5c519709 ]
    
    In the "struct bonding", there is stats_lock.
    This lock protects "bond_stats" in the "struct bonding".
    bond_stats is updated in the bond_get_stats() and this function would be
    executed concurrently. So, the lock is needed.
    
    Bonding interfaces would be nested.
    So, either stats_lock should use dynamic lockdep class key or stats_lock
    should be used by spin_lock_nested(). In the current code, stats_lock is
    using a dynamic lockdep class key.
    But there is no updating stats_lock_key routine So, lockdep warning
    will occur.
    
    Test commands:
        ip link add bond0 type bond
        ip link add bond1 type bond
        ip link set bond0 master bond1
        ip link set bond0 nomaster
        ip link set bond1 master bond0
    
    Splat looks like:
    [   38.420603][  T957] 5.5.0+ #394 Not tainted
    [   38.421074][  T957] ------------------------------------------------------
    [   38.421837][  T957] ip/957 is trying to acquire lock:
    [   38.422399][  T957] ffff888063262cd8 (&bond->stats_lock_key#2){+.+.}, at: bond_get_stats+0x90/0x4d0 [bonding]
    [   38.423528][  T957]
    [   38.423528][  T957] but task is already holding lock:
    [   38.424526][  T957] ffff888065fd2cd8 (&bond->stats_lock_key){+.+.}, at: bond_get_stats+0x90/0x4d0 [bonding]
    [   38.426075][  T957]
    [   38.426075][  T957] which lock already depends on the new lock.
    [   38.426075][  T957]
    [   38.428536][  T957]
    [   38.428536][  T957] the existing dependency chain (in reverse order) is:
    [   38.429475][  T957]
    [   38.429475][  T957] -> #1 (&bond->stats_lock_key){+.+.}:
    [   38.430273][  T957]        _raw_spin_lock+0x30/0x70
    [   38.430812][  T957]        bond_get_stats+0x90/0x4d0 [bonding]
    [   38.431451][  T957]        dev_get_stats+0x1ec/0x270
    [   38.432088][  T957]        bond_get_stats+0x1a5/0x4d0 [bonding]
    [   38.432767][  T957]        dev_get_stats+0x1ec/0x270
    [   38.433322][  T957]        rtnl_fill_stats+0x44/0xbe0
    [   38.433866][  T957]        rtnl_fill_ifinfo+0xeb2/0x3720
    [   38.434474][  T957]        rtmsg_ifinfo_build_skb+0xca/0x170
    [   38.435081][  T957]        rtmsg_ifinfo_event.part.33+0x1b/0xb0
    [   38.436848][  T957]        rtnetlink_event+0xcd/0x120
    [   38.437455][  T957]        notifier_call_chain+0x90/0x160
    [   38.438067][  T957]        netdev_change_features+0x74/0xa0
    [   38.438708][  T957]        bond_compute_features.isra.45+0x4e6/0x6f0 [bonding]
    [   38.439522][  T957]        bond_enslave+0x3639/0x47b0 [bonding]
    [   38.440225][  T957]        do_setlink+0xaab/0x2ef0
    [   38.440786][  T957]        __rtnl_newlink+0x9c5/0x1270
    [   38.441463][  T957]        rtnl_newlink+0x65/0x90
    [   38.442075][  T957]        rtnetlink_rcv_msg+0x4a8/0x890
    [   38.442774][  T957]        netlink_rcv_skb+0x121/0x350
    [   38.443451][  T957]        netlink_unicast+0x42e/0x610
    [   38.444282][  T957]        netlink_sendmsg+0x65a/0xb90
    [   38.444992][  T957]        ____sys_sendmsg+0x5ce/0x7a0
    [   38.445679][  T957]        ___sys_sendmsg+0x10f/0x1b0
    [   38.446365][  T957]        __sys_sendmsg+0xc6/0x150
    [   38.447007][  T957]        do_syscall_64+0x99/0x4f0
    [   38.447668][  T957]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   38.448538][  T957]
    [   38.448538][  T957] -> #0 (&bond->stats_lock_key#2){+.+.}:
    [   38.449554][  T957]        __lock_acquire+0x2d8d/0x3de0
    [   38.450148][  T957]        lock_acquire+0x164/0x3b0
    [   38.450711][  T957]        _raw_spin_lock+0x30/0x70
    [   38.451292][  T957]        bond_get_stats+0x90/0x4d0 [bonding]
    [   38.451950][  T957]        dev_get_stats+0x1ec/0x270
    [   38.452425][  T957]        bond_get_stats+0x1a5/0x4d0 [bonding]
    [   38.453362][  T957]        dev_get_stats+0x1ec/0x270
    [   38.453825][  T957]        rtnl_fill_stats+0x44/0xbe0
    [   38.454390][  T957]        rtnl_fill_ifinfo+0xeb2/0x3720
    [   38.456257][  T957]        rtmsg_ifinfo_build_skb+0xca/0x170
    [   38.456998][  T957]        rtmsg_ifinfo_event.part.33+0x1b/0xb0
    [   38.459351][  T957]        rtnetlink_event+0xcd/0x120
    [   38.460086][  T957]        notifier_call_chain+0x90/0x160
    [   38.460829][  T957]        netdev_change_features+0x74/0xa0
    [   38.461752][  T957]        bond_compute_features.isra.45+0x4e6/0x6f0 [bonding]
    [   38.462705][  T957]        bond_enslave+0x3639/0x47b0 [bonding]
    [   38.463476][  T957]        do_setlink+0xaab/0x2ef0
    [   38.464141][  T957]        __rtnl_newlink+0x9c5/0x1270
    [   38.464897][  T957]        rtnl_newlink+0x65/0x90
    [   38.465522][  T957]        rtnetlink_rcv_msg+0x4a8/0x890
    [   38.466215][  T957]        netlink_rcv_skb+0x121/0x350
    [   38.466895][  T957]        netlink_unicast+0x42e/0x610
    [   38.467583][  T957]        netlink_sendmsg+0x65a/0xb90
    [   38.468285][  T957]        ____sys_sendmsg+0x5ce/0x7a0
    [   38.469202][  T957]        ___sys_sendmsg+0x10f/0x1b0
    [   38.469884][  T957]        __sys_sendmsg+0xc6/0x150
    [   38.470587][  T957]        do_syscall_64+0x99/0x4f0
    [   38.471245][  T957]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   38.472093][  T957]
    [   38.472093][  T957] other info that might help us debug this:
    [   38.472093][  T957]
    [   38.473438][  T957]  Possible unsafe locking scenario:
    [   38.473438][  T957]
    [   38.474898][  T957]        CPU0                    CPU1
    [   38.476234][  T957]        ----                    ----
    [   38.480171][  T957]   lock(&bond->stats_lock_key);
    [   38.480808][  T957]                                lock(&bond->stats_lock_key#2);
    [   38.481791][  T957]                                lock(&bond->stats_lock_key);
    [   38.482754][  T957]   lock(&bond->stats_lock_key#2);
    [   38.483416][  T957]
    [   38.483416][  T957]  *** DEADLOCK ***
    [   38.483416][  T957]
    [   38.484505][  T957] 3 locks held by ip/957:
    [   38.485048][  T957]  #0: ffffffffbccf6230 (rtnl_mutex){+.+.}, at: rtnetlink_rcv_msg+0x457/0x890
    [   38.486198][  T957]  #1: ffff888065fd2cd8 (&bond->stats_lock_key){+.+.}, at: bond_get_stats+0x90/0x4d0 [bonding]
    [   38.487625][  T957]  #2: ffffffffbc9254c0 (rcu_read_lock){....}, at: bond_get_stats+0x5/0x4d0 [bonding]
    [   38.488897][  T957]
    [   38.488897][  T957] stack backtrace:
    [   38.489646][  T957] CPU: 1 PID: 957 Comm: ip Not tainted 5.5.0+ #394
    [   38.490497][  T957] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   38.492810][  T957] Call Trace:
    [   38.493219][  T957]  dump_stack+0x96/0xdb
    [   38.493709][  T957]  check_noncircular+0x371/0x450
    [   38.494344][  T957]  ? lookup_address+0x60/0x60
    [   38.494923][  T957]  ? print_circular_bug.isra.35+0x310/0x310
    [   38.495699][  T957]  ? hlock_class+0x130/0x130
    [   38.496334][  T957]  ? __lock_acquire+0x2d8d/0x3de0
    [   38.496979][  T957]  __lock_acquire+0x2d8d/0x3de0
    [   38.497607][  T957]  ? register_lock_class+0x14d0/0x14d0
    [   38.498333][  T957]  ? check_chain_key+0x236/0x5d0
    [   38.499003][  T957]  lock_acquire+0x164/0x3b0
    [   38.499800][  T957]  ? bond_get_stats+0x90/0x4d0 [bonding]
    [   38.500706][  T957]  _raw_spin_lock+0x30/0x70
    [   38.501435][  T957]  ? bond_get_stats+0x90/0x4d0 [bonding]
    [   38.502311][  T957]  bond_get_stats+0x90/0x4d0 [bonding]
    [ ... ]
    
    But, there is another problem.
    The dynamic lockdep class key is protected by RTNL, but bond_get_stats()
    would be called outside of RTNL.
    So, it would use an invalid dynamic lockdep class key.
    
    In order to fix this issue, stats_lock uses spin_lock_nested() instead of
    a dynamic lockdep key.
    The bond_get_stats() calls bond_get_lowest_level_rcu() to get the correct
    nest level value, which will be used by spin_lock_nested().
    The "dev->lower_level" indicates lower nest level value, but this value
    is invalid outside of RTNL.
    So, bond_get_lowest_level_rcu() returns valid lower nest level value in
    the RCU critical section.
    bond_get_lowest_level_rcu() will be work only when LOCKDEP is enabled.
    
    Fixes: 089bca2caed0 ("bonding: use dynamic lockdep key instead of subclass")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97e5c947ad35e973f558a9155e948d53f013f6ca
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Feb 15 10:50:21 2020 +0000

    net: export netdev_next_lower_dev_rcu()
    
    [ Upstream commit 7151affeef8d527f50b4b68a871fd28bd660023f ]
    
    netdev_next_lower_dev_rcu() will be used to implement a function,
    which is to walk all lower interfaces.
    There are already functions that they walk their lower interface.
    (netdev_walk_all_lower_dev_rcu, netdev_walk_all_lower_dev()).
    But, there would be cases that couldn't be covered by given
    netdev_walk_all_lower_dev_{rcu}() function.
    So, some modules would want to implement own function,
    which is to walk all lower interfaces.
    
    In the next patch, netdev_next_lower_dev_rcu() will be used.
    In addition, this patch removes two unused prototypes in netdevice.h.
    
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d59a701d4cae5b634856c434f867ab237eea4fbc
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Feb 15 10:50:08 2020 +0000

    bonding: add missing netdev_update_lockdep_key()
    
    [ Upstream commit 064ff66e2bef84f1153087612032b5b9eab005bd ]
    
    After bond_release(), netdev_update_lockdep_key() should be called.
    But both ioctl path and attribute path don't call
    netdev_update_lockdep_key().
    This patch adds missing netdev_update_lockdep_key().
    
    Test commands:
        ip link add bond0 type bond
        ip link add bond1 type bond
        ifenslave bond0 bond1
        ifenslave -d bond0 bond1
        ifenslave bond1 bond0
    
    Splat looks like:
    [   29.501182][ T1046] WARNING: possible circular locking dependency detected
    [   29.501945][ T1039] hardirqs last disabled at (1962): [<ffffffffac6c807f>] handle_mm_fault+0x13f/0x700
    [   29.503442][ T1046] 5.5.0+ #322 Not tainted
    [   29.503447][ T1046] ------------------------------------------------------
    [   29.504277][ T1039] softirqs last  enabled at (1180): [<ffffffffade00678>] __do_softirq+0x678/0x981
    [   29.505443][ T1046] ifenslave/1046 is trying to acquire lock:
    [   29.505886][ T1039] softirqs last disabled at (1169): [<ffffffffac19c18a>] irq_exit+0x17a/0x1a0
    [   29.509997][ T1046] ffff88805d5da280 (&dev->addr_list_lock_key#3){+...}, at: dev_mc_sync_multiple+0x95/0x120
    [   29.511243][ T1046]
    [   29.511243][ T1046] but task is already holding lock:
    [   29.512192][ T1046] ffff8880460f2280 (&dev->addr_list_lock_key#4){+...}, at: bond_enslave+0x4482/0x47b0 [bonding]
    [   29.514124][ T1046]
    [   29.514124][ T1046] which lock already depends on the new lock.
    [   29.514124][ T1046]
    [   29.517297][ T1046]
    [   29.517297][ T1046] the existing dependency chain (in reverse order) is:
    [   29.518231][ T1046]
    [   29.518231][ T1046] -> #1 (&dev->addr_list_lock_key#4){+...}:
    [   29.519076][ T1046]        _raw_spin_lock+0x30/0x70
    [   29.519588][ T1046]        dev_mc_sync_multiple+0x95/0x120
    [   29.520208][ T1046]        bond_enslave+0x448d/0x47b0 [bonding]
    [   29.520862][ T1046]        bond_option_slaves_set+0x1a3/0x370 [bonding]
    [   29.521640][ T1046]        __bond_opt_set+0x1ff/0xbb0 [bonding]
    [   29.522438][ T1046]        __bond_opt_set_notify+0x2b/0xf0 [bonding]
    [   29.523251][ T1046]        bond_opt_tryset_rtnl+0x92/0xf0 [bonding]
    [   29.524082][ T1046]        bonding_sysfs_store_option+0x8a/0xf0 [bonding]
    [   29.524959][ T1046]        kernfs_fop_write+0x276/0x410
    [   29.525620][ T1046]        vfs_write+0x197/0x4a0
    [   29.526218][ T1046]        ksys_write+0x141/0x1d0
    [   29.526818][ T1046]        do_syscall_64+0x99/0x4f0
    [   29.527430][ T1046]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   29.528265][ T1046]
    [   29.528265][ T1046] -> #0 (&dev->addr_list_lock_key#3){+...}:
    [   29.529272][ T1046]        __lock_acquire+0x2d8d/0x3de0
    [   29.529935][ T1046]        lock_acquire+0x164/0x3b0
    [   29.530638][ T1046]        _raw_spin_lock+0x30/0x70
    [   29.531187][ T1046]        dev_mc_sync_multiple+0x95/0x120
    [   29.531790][ T1046]        bond_enslave+0x448d/0x47b0 [bonding]
    [   29.532451][ T1046]        bond_option_slaves_set+0x1a3/0x370 [bonding]
    [   29.533163][ T1046]        __bond_opt_set+0x1ff/0xbb0 [bonding]
    [   29.533789][ T1046]        __bond_opt_set_notify+0x2b/0xf0 [bonding]
    [   29.534595][ T1046]        bond_opt_tryset_rtnl+0x92/0xf0 [bonding]
    [   29.535500][ T1046]        bonding_sysfs_store_option+0x8a/0xf0 [bonding]
    [   29.536379][ T1046]        kernfs_fop_write+0x276/0x410
    [   29.537057][ T1046]        vfs_write+0x197/0x4a0
    [   29.537640][ T1046]        ksys_write+0x141/0x1d0
    [   29.538251][ T1046]        do_syscall_64+0x99/0x4f0
    [   29.538870][ T1046]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   29.539659][ T1046]
    [   29.539659][ T1046] other info that might help us debug this:
    [   29.539659][ T1046]
    [   29.540953][ T1046]  Possible unsafe locking scenario:
    [   29.540953][ T1046]
    [   29.541883][ T1046]        CPU0                    CPU1
    [   29.542540][ T1046]        ----                    ----
    [   29.543209][ T1046]   lock(&dev->addr_list_lock_key#4);
    [   29.543880][ T1046]                                lock(&dev->addr_list_lock_key#3);
    [   29.544873][ T1046]                                lock(&dev->addr_list_lock_key#4);
    [   29.545863][ T1046]   lock(&dev->addr_list_lock_key#3);
    [   29.546525][ T1046]
    [   29.546525][ T1046]  *** DEADLOCK ***
    [   29.546525][ T1046]
    [   29.547542][ T1046] 5 locks held by ifenslave/1046:
    [   29.548196][ T1046]  #0: ffff88806044c478 (sb_writers#5){.+.+}, at: vfs_write+0x3bb/0x4a0
    [   29.549248][ T1046]  #1: ffff88805af00890 (&of->mutex){+.+.}, at: kernfs_fop_write+0x1cf/0x410
    [   29.550343][ T1046]  #2: ffff88805b8b54b0 (kn->count#157){.+.+}, at: kernfs_fop_write+0x1f2/0x410
    [   29.551575][ T1046]  #3: ffffffffaecf4cf0 (rtnl_mutex){+.+.}, at: bond_opt_tryset_rtnl+0x5f/0xf0 [bonding]
    [   29.552819][ T1046]  #4: ffff8880460f2280 (&dev->addr_list_lock_key#4){+...}, at: bond_enslave+0x4482/0x47b0 [bonding]
    [   29.554175][ T1046]
    [   29.554175][ T1046] stack backtrace:
    [   29.554907][ T1046] CPU: 0 PID: 1046 Comm: ifenslave Not tainted 5.5.0+ #322
    [   29.555854][ T1046] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   29.557064][ T1046] Call Trace:
    [   29.557504][ T1046]  dump_stack+0x96/0xdb
    [   29.558054][ T1046]  check_noncircular+0x371/0x450
    [   29.558723][ T1046]  ? print_circular_bug.isra.35+0x310/0x310
    [   29.559486][ T1046]  ? hlock_class+0x130/0x130
    [   29.560100][ T1046]  ? __lock_acquire+0x2d8d/0x3de0
    [   29.560761][ T1046]  __lock_acquire+0x2d8d/0x3de0
    [   29.561366][ T1046]  ? register_lock_class+0x14d0/0x14d0
    [   29.562045][ T1046]  ? find_held_lock+0x39/0x1d0
    [   29.562641][ T1046]  lock_acquire+0x164/0x3b0
    [   29.563199][ T1046]  ? dev_mc_sync_multiple+0x95/0x120
    [   29.563872][ T1046]  _raw_spin_lock+0x30/0x70
    [   29.564464][ T1046]  ? dev_mc_sync_multiple+0x95/0x120
    [   29.565146][ T1046]  dev_mc_sync_multiple+0x95/0x120
    [   29.565793][ T1046]  bond_enslave+0x448d/0x47b0 [bonding]
    [   29.566487][ T1046]  ? bond_update_slave_arr+0x940/0x940 [bonding]
    [   29.567279][ T1046]  ? bstr_printf+0xc20/0xc20
    [   29.567857][ T1046]  ? stack_trace_consume_entry+0x160/0x160
    [   29.568614][ T1046]  ? deactivate_slab.isra.77+0x2c5/0x800
    [   29.569320][ T1046]  ? check_chain_key+0x236/0x5d0
    [   29.569939][ T1046]  ? sscanf+0x93/0xc0
    [   29.570442][ T1046]  ? vsscanf+0x1e20/0x1e20
    [   29.571003][ T1046]  bond_option_slaves_set+0x1a3/0x370 [bonding]
    [ ... ]
    
    Fixes: ab92d68fc22f ("net: core: add generic lockdep keys")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 177489edbe2444c28451532f1612f0a801626aed
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Thu Feb 20 17:26:35 2020 -0500

    bnxt_en: Issue PCIe FLR in kdump kernel to cleanup pending DMAs.
    
    [ Upstream commit 8743db4a9acfd51f805ac0c87bcaae92c42d1061 ]
    
    If crashed kernel does not shutdown the NIC properly, PCIe FLR
    is required in the kdump kernel in order to initialize all the
    functions properly.
    
    Fixes: d629522e1d66 ("bnxt_en: Reduce memory usage when running in kdump kernel.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7daf11d64b8a7dfeb1a47df7fcfd713b53f112bc
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Thu Feb 20 17:26:34 2020 -0500

    bnxt_en: Improve device shutdown method.
    
    [ Upstream commit 5567ae4a8d569d996d0d88d0eceb76205e4c7ce5 ]
    
    Especially when bnxt_shutdown() is called during kexec, we need to
    disable MSIX and disable Bus Master to completely quiesce the device.
    Make these 2 calls unconditionally in the shutdown method.
    
    Fixes: c20dc142dd7b ("bnxt_en: Disable bus master during PCI shutdown and driver unload.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c360e0530107ebf7423222c54f13b07e8c0283da
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Feb 18 12:07:53 2020 +0800

    sctp: move the format error check out of __sctp_sf_do_9_1_abort
    
    [ Upstream commit 245709ec8be89af46ea7ef0444c9c80913999d99 ]
    
    When T2 timer is to be stopped, the asoc should also be deleted,
    otherwise, there will be no chance to call sctp_association_free
    and the asoc could last in memory forever.
    
    However, in sctp_sf_shutdown_sent_abort(), after adding the cmd
    SCTP_CMD_TIMER_STOP for T2 timer, it may return error due to the
    format error from __sctp_sf_do_9_1_abort() and miss adding
    SCTP_CMD_ASSOC_FAILED where the asoc will be deleted.
    
    This patch is to fix it by moving the format error check out of
    __sctp_sf_do_9_1_abort(), and do it before adding the cmd
    SCTP_CMD_TIMER_STOP for T2 timer.
    
    Thanks Hangbin for reporting this issue by the fuzz testing.
    
    v1->v2:
      - improve the comment in the code as Marcelo's suggestion.
    
    Fixes: 96ca468b86b0 ("sctp: check invalid value of length parameter in error cause")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e72258bf6a579fd417dd9164a23c64ad5d940ceb
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Feb 19 14:16:32 2020 -0500

    udp: rehash on disconnect
    
    [ Upstream commit 303d0403b8c25e994e4a6e45389e173cf8706fb5 ]
    
    As of the below commit, udp sockets bound to a specific address can
    coexist with one bound to the any addr for the same port.
    
    The commit also phased out the use of socket hashing based only on
    port (hslot), in favor of always hashing on {addr, port} (hslot2).
    
    The change broke the following behavior with disconnect (AF_UNSPEC):
    
        server binds to 0.0.0.0:1337
        server connects to 127.0.0.1:80
        server disconnects
        client connects to 127.0.0.1:1337
        client sends "hello"
        server reads "hello"        // times out, packet did not find sk
    
    On connect the server acquires a specific source addr suitable for
    routing to its destination. On disconnect it reverts to the any addr.
    
    The connect call triggers a rehash to a different hslot2. On
    disconnect, add the same to return to the original hslot2.
    
    Skip this step if the socket is going to be unhashed completely.
    
    Fixes: 4cdeeee9252a ("net: udp: prefer listeners bound to an address")
    Reported-by: Pavel Roskin <plroskin@gmail.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63d5320a0c9b9867628a3a5a12e7f11d4cc109c2
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Feb 18 18:15:44 2020 +0100

    Revert "net: dev: introduce support for sch BYPASS for lockless qdisc"
    
    [ Upstream commit 379349e9bc3b42b8b2f8f7a03f64a97623fff323 ]
    
    This reverts commit ba27b4cdaaa66561aaedb2101876e563738d36fe
    
    Ahmed reported ouf-of-order issues bisected to commit ba27b4cdaaa6
    ("net: dev: introduce support for sch BYPASS for lockless qdisc").
    I can't find any working solution other than a plain revert.
    
    This will introduce some minor performance regressions for
    pfifo_fast qdisc. I plan to address them in net-next with more
    indirect call wrapper boilerplate for qdiscs.
    
    Reported-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Fixes: ba27b4cdaaa6 ("net: dev: introduce support for sch BYPASS for lockless qdisc")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 129a1e235cc90bb6c0aa05b71b335201dbf9f95e
Author: Michal Kalderon <michal.kalderon@marvell.com>
Date:   Mon Feb 17 13:37:18 2020 +0200

    qede: Fix race between rdma destroy workqueue and link change event
    
    [ Upstream commit af6565adb02d3129d3fae4d9d5da945abaf4417a ]
    
    If an event is added while the rdma workqueue is being destroyed
    it could lead to several races, list corruption, null pointer
    dereference during queue_work or init_queue.
    This fixes the race between the two flows which can occur during
    shutdown.
    
    A kref object and a completion object are added to the rdma_dev
    structure, these are initialized before the workqueue is created.
    The refcnt is used to indicate work is being added to the
    workqueue and ensures the cleanup flow won't start while we're in
    the middle of adding the event.
    Once the work is added, the refcnt is decreased and the cleanup flow
    is safe to run.
    
    Fixes: cee9fbd8e2e ("qede: Add qedr framework")
    Signed-off-by: Ariel Elior <ariel.elior@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45f0d4b401317050a78e2d041d768dd60f1b2887
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Wed Feb 19 18:01:22 2020 +0300

    nfc: pn544: Fix occasional HW initialization failure
    
    [ Upstream commit c3331d2fe3fd4d5e321f2467d01f72de7edfb5d0 ]
    
    The PN544 driver checks the "enable" polarity during of driver's probe and
    it's doing that by turning ON and OFF NFC with different polarities until
    enabling succeeds. It takes some time for the hardware to power-down, and
    thus, to deassert the IRQ that is raised by turning ON the hardware.
    Since the delay after last power-down of the polarity-checking process is
    missed in the code, the interrupt may trigger immediately after installing
    the IRQ handler (right after the checking is done), which results in IRQ
    handler trying to touch the disabled HW and ends with marking NFC as
    'DEAD' during of the driver's probe:
    
      pn544_hci_i2c 1-002a: NFC: nfc_en polarity : active high
      pn544_hci_i2c 1-002a: NFC: invalid len byte
      shdlc: llc_shdlc_recv_frame: NULL Frame -> link is dead
    
    This patch fixes the occasional NFC initialization failure on Nexus 7
    device.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3844aed8e860c0f86e7efb3817444571307cdaf
Author: Rohit Maheshwari <rohitm@chelsio.com>
Date:   Wed Feb 19 09:40:22 2020 +0530

    net/tls: Fix to avoid gettig invalid tls record
    
    [ Upstream commit 06f5201c6392f998a49ca9c9173e2930c8eb51d8 ]
    
    Current code doesn't check if tcp sequence number is starting from (/after)
    1st record's start sequnce number. It only checks if seq number is before
    1st record's end sequnce number. This problem will always be a possibility
    in re-transmit case. If a record which belongs to a requested seq number is
    already deleted, tls_get_record will start looking into list and as per the
    check it will look if seq number is before the end seq of 1st record, which
    will always be true and will return 1st record always, it should in fact
    return NULL.
    As part of the fix, start looking each record only if the sequence number
    lies in the list else return NULL.
    There is one more check added, driver look for the start marker record to
    handle tcp packets which are before the tls offload start sequence number,
    hence return 1st record if the record is tls start marker and seq number is
    before the 1st record's starting sequence number.
    
    Fixes: e8f69799810c ("net/tls: Add generic NIC offload infrastructure")
    Signed-off-by: Rohit Maheshwari <rohitm@chelsio.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50acd32ea7f682916b615103d32d2ccecf7e5fc8
Author: Jason Baron <jbaron@akamai.com>
Date:   Mon Feb 17 15:38:09 2020 -0500

    net: sched: correct flower port blocking
    
    [ Upstream commit 8a9093c79863b58cc2f9874d7ae788f0d622a596 ]
    
    tc flower rules that are based on src or dst port blocking are sometimes
    ineffective due to uninitialized stack data. __skb_flow_dissect() extracts
    ports from the skb for tc flower to match against. However, the port
    dissection is not done when when the FLOW_DIS_IS_FRAGMENT bit is set in
    key_control->flags. All callers of __skb_flow_dissect(), zero-out the
    key_control field except for fl_classify() as used by the flower
    classifier. Thus, the FLOW_DIS_IS_FRAGMENT may be set on entry to
    __skb_flow_dissect(), since key_control is allocated on the stack
    and may not be initialized.
    
    Since key_basic and key_control are present for all flow keys, let's
    make sure they are initialized.
    
    Fixes: 62230715fd24 ("flow_dissector: do not dissect l4 ports for fragments")
    Co-developed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jason Baron <jbaron@akamai.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd53844bc91eada833ced3d438b16aa8d762e1b7
Author: Arun Parameswaran <arun.parameswaran@broadcom.com>
Date:   Fri Feb 14 13:47:46 2020 -0800

    net: phy: restore mdio regs in the iproc mdio driver
    
    commit 6f08e98d62799e53c89dbf2c9a49d77e20ca648c upstream.
    
    The mii management register in iproc mdio block
    does not have a retention register so it is lost on suspend.
    Save and restore value of register while resuming from suspend.
    
    Fixes: bb1a619735b4 ("net: phy: Initialize mdio clock at probe function")
    Signed-off-by: Arun Parameswaran <arun.parameswaran@broadcom.com>
    Signed-off-by: Scott Branden <scott.branden@broadcom.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 248b7751391f43465b3eed5d002824f5d37c0599
Author: Horatiu Vultur <horatiu.vultur@microchip.com>
Date:   Mon Feb 17 09:31:33 2020 +0100

    net: mscc: fix in frame extraction
    
    [ Upstream commit a81541041ceb55bcec9a8bb8ad3482263f0a205a ]
    
    Each extracted frame on Ocelot has an IFH. The frame and IFH are extracted
    by reading chuncks of 4 bytes from a register.
    
    In case the IFH and frames were read corretly it would try to read the next
    frame. In case there are no more frames in the queue, it checks if there
    were any previous errors and in that case clear the queue. But this check
    will always succeed also when there are no errors. Because when extracting
    the IFH the error is checked against 4(number of bytes read) and then the
    error is set only if the extraction of the frame failed. So in a happy case
    where there are no errors the err variable is still 4. So it could be
    a case where after the check that there are no more frames in the queue, a
    frame will arrive in the queue but because the error is not reseted, it
    would try to flush the queue. So the frame will be lost.
    
    The fix consist in resetting the error after reading the IFH.
    
    Signed-off-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e99e2f59d9a26c2e6872cdde7312742fe113f80c
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed Feb 12 17:45:38 2020 +0100

    net: macb: ensure interface is not suspended on at91rm9200
    
    [ Upstream commit e6a41c23df0d5da01540d2abef41591589c0b4be ]
    
    Because of autosuspend, at91ether_start is called with clocks disabled.
    Ensure that pm_runtime doesn't suspend the interface as soon as it is
    opened as there is no pm_runtime support is the other relevant parts of the
    platform support for at91rm9200.
    
    Fixes: d54f89af6cc4 ("net: macb: Add pm runtime support")
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9310357f6151711df1e520bed95f4c0a8bd49bab
Author: Jethro Beekman <jethro@fortanix.com>
Date:   Wed Feb 12 16:43:41 2020 +0100

    net: fib_rules: Correctly set table field when table number exceeds 8 bits
    
    [ Upstream commit 540e585a79e9d643ede077b73bcc7aa2d7b4d919 ]
    
    In 709772e6e06564ed94ba740de70185ac3d792773, RT_TABLE_COMPAT was added to
    allow legacy software to deal with routing table numbers >= 256, but the
    same change to FIB rule queries was overlooked.
    
    Signed-off-by: Jethro Beekman <jethro@fortanix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59b5714c6779efd38355384213acf2e632442fac
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Feb 14 15:26:19 2020 -0800

    net: dsa: b53: Ensure the default VID is untagged
    
    [ Upstream commit d965a5432d4c3e6b9c3d2bc1d4a800013bbf76f6 ]
    
    We need to ensure that the default VID is untagged otherwise the switch
    will be sending tagged frames and the results can be problematic. This
    is especially true with b53 switches that use VID 0 as their default
    VLAN since VID 0 has a special meaning.
    
    Fixes: fea83353177a ("net: dsa: b53: Fix default VLAN ID")
    Fixes: 061f6a505ac3 ("net: dsa: Add ndo_vlan_rx_{add, kill}_vid implementation")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 728afb955b57c9ca56c87bdaf739341d9c7f0c6b
Author: Aristeu Rozanski <aris@redhat.com>
Date:   Wed Dec 4 16:23:25 2019 -0500

    EDAC: skx_common: downgrade message importance on missing PCI device
    
    [ Upstream commit 854bb48018d5da261d438b2232fa683bdb553979 ]
    
    Both skx_edac and i10nm_edac drivers are loaded based on the matching CPU being
    available which leads the module to be automatically loaded in virtual machines
    as well. That will fail due the missing PCI devices. In both drivers the first
    function to make use of the PCI devices is skx_get_hi_lo() will simply print
    
            EDAC skx: Can't get tolm/tohm
    
    for each CPU core, which is noisy. This patch makes it a debug message.
    
    Signed-off-by: Aristeu Rozanski <aris@redhat.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Link: https://lore.kernel.org/r/20191204212325.c4k47p5hrnn3vpb5@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cac68d12c531aa3010509a5a55a5dfd18dedaa80
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Feb 28 15:20:18 2020 -0700

    io_uring: grab ->fs as part of async offload
    
    [ Upstream commits 9392a27d88b9 and ff002b30181d ]
    
    Ensure that the async work grabs ->fs from the queueing task if the
    punted commands needs to do lookups.
    
    We don't have these two commits in 5.4-stable:
    
    ff002b30181d30cdfbca316dadd099c3ca0d739c
    9392a27d88b9707145d713654eb26f0c29789e50
    
    because they don't apply with the rework that was done in how io_uring
    handles offload. Since there's no io-wq in 5.4, it doesn't make sense to
    do two patches. I'm attaching my port of the two for 5.4-stable, it's
    been tested. Please queue it up for the next 5.4-stable, thanks!
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
