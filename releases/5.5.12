commit 7a5ab69495d1a1cd7489abccc7eb6855dba792a4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 25 08:27:11 2020 +0100

    Linux 5.5.12

commit cd83aedb8e75627f9d11ef8cff0f69fdcba792f2
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Tue Mar 10 19:12:50 2020 +0900

    int128: fix __uint128_t compiler test in Kconfig
    
    commit 3a7c733165a4799fa1beb262fe244bfbcdd1c163 upstream.
    
    The support for __uint128_t is dependent on the target bit size.
    
    GCC that defaults to the 32-bit can still build the 64-bit kernel
    with -m64 flag passed.
    
    However, $(cc-option,-D__SIZEOF_INT128__=0) is evaluated against the
    default machine bit, which may not match to the kernel it is building.
    
    Theoretically, this could be evaluated separately for 64BIT/32BIT.
    
      config CC_HAS_INT128
              bool
              default !$(cc-option,$(m64-flag) -D__SIZEOF_INT128__=0) if 64BIT
              default !$(cc-option,$(m32-flag) -D__SIZEOF_INT128__=0)
    
    I simplified it more because the 32-bit compiler is unlikely to support
    __uint128_t.
    
    Fixes: c12d3362a74b ("int128: move __uint128_t compiler test to Kconfig")
    Reported-by: George Spelvin <lkml@sdf.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Tested-by: George Spelvin <lkml@sdf.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2477befe448c49c9079d27141d213b546bdddf15
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Tue Mar 10 19:12:49 2020 +0900

    kconfig: introduce m32-flag and m64-flag
    
    commit 8cc4fd73501d9f1370c3eebb70cfe8cc9e24062b upstream.
    
    When a compiler supports multiple architectures, some compiler features
    can be dependent on the target architecture.
    
    This is typical for Clang, which supports multiple LLVM backends.
    Even for GCC, we need to take care of biarch compiler cases.
    
    It is not a problem when we evaluate cc-option in Makefiles because
    cc-option is tested against the flag in question + $(KBUILD_CFLAGS).
    
    The cc-option in Kconfig, on the other hand, does not accumulate
    tested flags. Due to this simplification, it could potentially test
    cc-option against a different target.
    
    At first, Kconfig always evaluated cc-option against the host
    architecture.
    
    Since commit e8de12fb7cde ("kbuild: Check for unknown options with
    cc-option usage in Kconfig and clang"), in case of cross-compiling
    with Clang, the target triple is correctly passed to Kconfig.
    
    The case with biarch GCC (and native build with Clang) is still not
    handled properly. We need to pass some flags to specify the target
    machine bit.
    
    Due to the design, all the macros in Kconfig are expanded in the
    parse stage, where we do not know the target bit size yet.
    
    For example, arch/x86/Kconfig allows a user to toggle CONFIG_64BIT.
    If a compiler flag -foo depends on the machine bit, it must be tested
    twice, one with -m32 and the other with -m64.
    
    However, -m32/-m64 are not always recognized. So, this commits adds
    m64-flag and m32-flag macros. They expand to -m32, -m64, respectively
    if supported. Or, they expand to an empty string if unsupported.
    
    The typical usage is like this:
    
      config FOO
              bool
              default $(cc-option,$(m64-flag) -foo) if 64BIT
              default $(cc-option,$(m32-flag) -foo)
    
    This is clumsy, but there is no elegant way to handle this in the
    current static macro expansion.
    
    There was discussion for static functions vs dynamic functions.
    The consensus was to go as far as possible with the static functions.
    (https://lkml.org/lkml/2018/3/2/22)
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Tested-by: George Spelvin <lkml@sdf.org>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41567c40897a3d7fce5fce5691af35149ddd0c4f
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 12 12:01:51 2020 +0100

    staging: greybus: loopback_test: fix potential path truncations
    
    commit ae62cf5eb2792d9a818c2d93728ed92119357017 upstream.
    
    Newer GCC warns about possible truncations of two generated path names as
    we're concatenating the configurable sysfs and debugfs path prefixes
    with a filename and placing the results in buffers of the same size as
    the maximum length of the prefixes.
    
            snprintf(d->name, MAX_STR_LEN, "gb_loopback%u", dev_id);
    
            snprintf(d->sysfs_entry, MAX_SYSFS_PATH, "%s%s/",
                     t->sysfs_prefix, d->name);
    
            snprintf(d->debugfs_entry, MAX_SYSFS_PATH, "%sraw_latency_%s",
                     t->debugfs_prefix, d->name);
    
    Fix this by separating the maximum path length from the maximum prefix
    length and reducing the latter enough to fit the generated strings.
    
    Note that we also need to reduce the device-name buffer size as GCC
    isn't smart enough to figure out that we ever only used MAX_STR_LEN
    bytes of it.
    
    Fixes: 6b0658f68786 ("greybus: tools: Add tools directory to greybus repo and add loopback")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200312110151.22028-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ada94c7871fcf076fd47eacaedc6adb4c6f55df
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 12 12:01:50 2020 +0100

    staging: greybus: loopback_test: fix potential path truncation
    
    commit f16023834863932f95dfad13fac3fc47f77d2f29 upstream.
    
    Newer GCC warns about a possible truncation of a generated sysfs path
    name as we're concatenating a directory path with a file name and
    placing the result in a buffer that is half the size of the maximum
    length of the directory path (which is user controlled).
    
    loopback_test.c: In function 'open_poll_files':
    loopback_test.c:651:31: warning: '%s' directive output may be truncated writing up to 511 bytes into a region of size 255 [-Wformat-truncation=]
      651 |   snprintf(buf, sizeof(buf), "%s%s", dev->sysfs_entry, "iteration_count");
          |                               ^~
    loopback_test.c:651:3: note: 'snprintf' output between 16 and 527 bytes into a destination of size 255
      651 |   snprintf(buf, sizeof(buf), "%s%s", dev->sysfs_entry, "iteration_count");
          |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Fix this by making sure the buffer is large enough the concatenated
    strings.
    
    Fixes: 6b0658f68786 ("greybus: tools: Add tools directory to greybus repo and add loopback")
    Fixes: 9250c0ee2626 ("greybus: Loopback_test: use poll instead of inotify")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200312110151.22028-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 955cdc7f4aa7bb7624b8fe126c25d70205f2e596
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Wed Mar 11 09:22:55 2020 -0700

    drm/i915: Handle all MCR ranges
    
    commit fe8b7085cac3b0db03cdbb26d9309bc27325df0a upstream.
    
    The bspec documents multiple MCR ranges; make sure they're all captured
    by the driver.
    
    Bspec: 13991, 52079
    Fixes: 592a7c5e082e ("drm/i915: Extend non readable mcr range")
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200311162300.1838847-2-matthew.d.roper@intel.com
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    (cherry picked from commit 415d1269975d3fc21c13a6ae8de7b5fe0e6febb1)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93d35bbd3b1a2868ee5812fe6e2d94fd3d977f2a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Mar 11 09:26:23 2020 +0000

    drm/i915/execlists: Track active elements during dequeue
    
    commit 9777d8b2d2a148bc5d46694ec4f2559282fec8cf upstream.
    
    Record the initial active element we use when building the next ELSP
    submission, so that we can compare against it latter to see if there's
    no change.
    
    Fixes: 44d0a9c05bc0 ("drm/i915/execlists: Skip redundant resubmission")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200311092624.10012-2-chris@chris-wilson.co.uk
    (cherry picked from commit 60ef5b7ac6a131f09d287a5f156c878c2c926a30)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64f78be824ffd96ac482a998b9025cc0244d28e7
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Thu Mar 5 00:25:09 2020 +0100

    drm/bridge: dw-hdmi: fix AVI frame colorimetry
    
    commit e8dca30f7118461d47e1c3510d0e31b277439151 upstream.
    
    CTA-861-F explicitly states that for RGB colorspace colorimetry should
    be set to "none". Fix that.
    
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Fixes: def23aa7e982 ("drm: bridge: dw-hdmi: Switch to V4L bus format and encodings")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200304232512.51616-2-jernej.skrabec@siol.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60b9516957255524c4970718888c3d222db06200
Author: Caz Yokoyama <caz.yokoyama@intel.com>
Date:   Wed Mar 4 14:13:59 2020 -0800

    Revert "drm/i915/tgl: Add extra hdc flush workaround"
    
    commit c09f6b4d0883dfb859c1ddcfb04c3260ef310ce0 upstream.
    
    This reverts commit 36a6b5d964d995b536b1925ec42052ee40ba92c4.
    
    The commit takes care Wa_1604544889 which was fixed on a0 stepping based on
    a0 replan. So no SW workaround is required on any stepping now.
    
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Caz Yokoyama <caz.yokoyama@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Fixes: 36a6b5d964d9 ("drm/i915/tgl: Add extra hdc flush workaround")
    Link: https://patchwork.freedesktop.org/patch/msgid/1c751032ce79c80c5485cae315f1a9904ce07cac.1583359940.git.caz.yokoyama@intel.com
    (cherry picked from commit 175c4d9b3b9a60b4ea0b8cd034011808c6a03b05)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e086846abd5203e395c58aaf32a5c8c1a6ff727f
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Mar 20 18:43:48 2020 +0000

    btrfs: fix removal of raid[56|1c34} incompat flags after removing block group
    
    commit d8e6fd5c7991033037842b32c9774370a038e902 upstream.
    
    We are incorrectly dropping the raid56 and raid1c34 incompat flags when
    there are still raid56 and raid1c34 block groups, not when we do not any
    of those anymore. The logic just got unintentionally broken after adding
    the support for the raid1c34 modes.
    
    Fix this by clear the flags only if we do not have block groups with the
    respective profiles.
    
    Fixes: 9c907446dce3 ("btrfs: drop incompat bit for raid1c34 after last block group is gone")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c325c96b4b15c00a74bd6aa3321e10c84a67ef35
Author: Xiao Yang <yangx.jy@cn.fujitsu.com>
Date:   Wed Mar 18 18:34:16 2020 +0800

    modpost: Get proper section index by get_secindex() instead of st_shndx
    
    commit 4b8a5cfb5fd375cf4c7502a18f0096ed2881be27 upstream.
    
    (uint16_t) st_shndx is limited to 65535(i.e. SHN_XINDEX) so sym_get_data() gets
    wrong section index by st_shndx if requested symbol contains extended section
    index that is more than 65535.  In this case, we need to get proper section index
    by .symtab_shndx section.
    
    Module.symvers generated by building kernel with "-ffunction-sections -fdata-sections"
    shows the issue.
    
    Fixes: 56067812d5b0 ("kbuild: modversions: add infrastructure for emitting relative CRCs")
    Fixes: e84f9fbbece1 ("modpost: refactor namespace_from_kstrtabns() to not hard-code section name")
    Signed-off-by: Xiao Yang <yangx.jy@cn.fujitsu.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 492b7e9392a4ef25ef6dff3614f32a7099cf69d8
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Thu Mar 12 16:06:38 2020 -0700

    nvmet-tcp: set MSG_MORE only if we actually have more to send
    
    commit 98fd5c723730f560e5bea919a64ac5b83d45eb72 upstream.
    
    When we send PDU data, we want to optimize the tcp stack
    operation if we have more data to send. So when we set MSG_MORE
    when:
    - We have more fragments coming in the batch, or
    - We have a more data to send in this PDU
    - We don't have a data digest trailer
    - We optimize with the SUCCESS flag and omit the NVMe completion
      (used if sq_head pointer update is disabled)
    
    This addresses a regression in QD=1 with SUCCESS flag optimization
    as we unconditionally set MSG_MORE when we didn't actually have
    more data to send.
    
    Fixes: 70583295388a ("nvmet-tcp: implement C2HData SUCCESS optimization")
    Reported-by: Mark Wunderlich <mark.wunderlich@intel.com>
    Tested-by: Mark Wunderlich <mark.wunderlich@intel.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ba16eaf2a1ebebbd63dcefecb6b97d0db1ab6e4
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Mar 11 17:12:45 2020 +0000

    arm64: smp: fix crash_smp_send_stop() behaviour
    
    commit f50b7dacccbab2b9e3ef18f52a6dcc18ed2050b9 upstream.
    
    On a system configured to trigger a crash_kexec() reboot, when only one CPU
    is online and another CPU panics while starting-up, crash_smp_send_stop()
    will fail to send any STOP message to the other already online core,
    resulting in fail to freeze and registers not properly saved.
    
    Moreover even if the proper messages are sent (case CPUs > 2)
    it will similarly fail to account for the booting CPU when executing
    the final stop wait-loop, so potentially resulting in some CPU not
    been waited for shutdown before rebooting.
    
    A tangible effect of this behaviour can be observed when, after a panic
    with kexec enabled and loaded, on the following reboot triggered by kexec,
    the cpu that could not be successfully stopped fails to come back online:
    
    [  362.291022] ------------[ cut here ]------------
    [  362.291525] kernel BUG at arch/arm64/kernel/cpufeature.c:886!
    [  362.292023] Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    [  362.292400] Modules linked in:
    [  362.292970] CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Not tainted 5.6.0-rc4-00003-gc780b890948a #105
    [  362.293136] Hardware name: Foundation-v8A (DT)
    [  362.293382] pstate: 200001c5 (nzCv dAIF -PAN -UAO)
    [  362.294063] pc : has_cpuid_feature+0xf0/0x348
    [  362.294177] lr : verify_local_elf_hwcaps+0x84/0xe8
    [  362.294280] sp : ffff800011b1bf60
    [  362.294362] x29: ffff800011b1bf60 x28: 0000000000000000
    [  362.294534] x27: 0000000000000000 x26: 0000000000000000
    [  362.294631] x25: 0000000000000000 x24: ffff80001189a25c
    [  362.294718] x23: 0000000000000000 x22: 0000000000000000
    [  362.294803] x21: ffff8000114aa018 x20: ffff800011156a00
    [  362.294897] x19: ffff800010c944a0 x18: 0000000000000004
    [  362.294987] x17: 0000000000000000 x16: 0000000000000000
    [  362.295073] x15: 00004e53b831ae3c x14: 00004e53b831ae3c
    [  362.295165] x13: 0000000000000384 x12: 0000000000000000
    [  362.295251] x11: 0000000000000000 x10: 00400032b5503510
    [  362.295334] x9 : 0000000000000000 x8 : ffff800010c7e204
    [  362.295426] x7 : 00000000410fd0f0 x6 : 0000000000000001
    [  362.295508] x5 : 00000000410fd0f0 x4 : 0000000000000000
    [  362.295592] x3 : 0000000000000000 x2 : ffff8000100939d8
    [  362.295683] x1 : 0000000000180420 x0 : 0000000000180480
    [  362.296011] Call trace:
    [  362.296257]  has_cpuid_feature+0xf0/0x348
    [  362.296350]  verify_local_elf_hwcaps+0x84/0xe8
    [  362.296424]  check_local_cpu_capabilities+0x44/0x128
    [  362.296497]  secondary_start_kernel+0xf4/0x188
    [  362.296998] Code: 52805001 72a00301 6b01001f 54000ec0 (d4210000)
    [  362.298652] SMP: stopping secondary CPUs
    [  362.300615] Starting crashdump kernel...
    [  362.301168] Bye!
    [    0.000000] Booting Linux on physical CPU 0x0000000003 [0x410fd0f0]
    [    0.000000] Linux version 5.6.0-rc4-00003-gc780b890948a (crimar01@e120937-lin) (gcc version 8.3.0 (GNU Toolchain for the A-profile Architecture 8.3-2019.03 (arm-rel-8.36))) #105 SMP PREEMPT Fri Mar 6 17:00:42 GMT 2020
    [    0.000000] Machine model: Foundation-v8A
    [    0.000000] earlycon: pl11 at MMIO 0x000000001c090000 (options '')
    [    0.000000] printk: bootconsole [pl11] enabled
    .....
    [    0.138024] rcu: Hierarchical SRCU implementation.
    [    0.153472] its@2f020000: unable to locate ITS domain
    [    0.154078] its@2f020000: Unable to locate ITS domain
    [    0.157541] EFI services will not be available.
    [    0.175395] smp: Bringing up secondary CPUs ...
    [    0.209182] psci: failed to boot CPU1 (-22)
    [    0.209377] CPU1: failed to boot: -22
    [    0.274598] Detected PIPT I-cache on CPU2
    [    0.278707] GICv3: CPU2: found redistributor 1 region 0:0x000000002f120000
    [    0.285212] CPU2: Booted secondary processor 0x0000000001 [0x410fd0f0]
    [    0.369053] Detected PIPT I-cache on CPU3
    [    0.372947] GICv3: CPU3: found redistributor 2 region 0:0x000000002f140000
    [    0.378664] CPU3: Booted secondary processor 0x0000000002 [0x410fd0f0]
    [    0.401707] smp: Brought up 1 node, 3 CPUs
    [    0.404057] SMP: Total of 3 processors activated.
    
    Make crash_smp_send_stop() account also for the online status of the
    calling CPU while evaluating how many CPUs are effectively online: this way
    the right number of STOPs is sent and all other stopped-cores's registers
    are properly saved.
    
    Fixes: 78fd584cdec05 ("arm64: kdump: implement machine_crash_shutdown()")
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b85d9a0e4e69fd4f36a3bc7694bed48582a221bc
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Mar 11 17:12:44 2020 +0000

    arm64: smp: fix smp_send_stop() behaviour
    
    commit d0bab0c39e32d39a8c5cddca72e5b4a3059fe050 upstream.
    
    On a system with only one CPU online, when another one CPU panics while
    starting-up, smp_send_stop() will fail to send any STOP message to the
    other already online core, resulting in a system still responsive and
    alive at the end of the panic procedure.
    
    [  186.700083] CPU3: shutdown
    [  187.075462] CPU2: shutdown
    [  187.162869] CPU1: shutdown
    [  188.689998] ------------[ cut here ]------------
    [  188.691645] kernel BUG at arch/arm64/kernel/cpufeature.c:886!
    [  188.692079] Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    [  188.692444] Modules linked in:
    [  188.693031] CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.6.0-rc4-00001-g338d25c35a98 #104
    [  188.693175] Hardware name: Foundation-v8A (DT)
    [  188.693492] pstate: 200001c5 (nzCv dAIF -PAN -UAO)
    [  188.694183] pc : has_cpuid_feature+0xf0/0x348
    [  188.694311] lr : verify_local_elf_hwcaps+0x84/0xe8
    [  188.694410] sp : ffff800011b1bf60
    [  188.694536] x29: ffff800011b1bf60 x28: 0000000000000000
    [  188.694707] x27: 0000000000000000 x26: 0000000000000000
    [  188.694801] x25: 0000000000000000 x24: ffff80001189a25c
    [  188.694905] x23: 0000000000000000 x22: 0000000000000000
    [  188.694996] x21: ffff8000114aa018 x20: ffff800011156a38
    [  188.695089] x19: ffff800010c944a0 x18: 0000000000000004
    [  188.695187] x17: 0000000000000000 x16: 0000000000000000
    [  188.695280] x15: 0000249dbde5431e x14: 0262cbe497efa1fa
    [  188.695371] x13: 0000000000000002 x12: 0000000000002592
    [  188.695472] x11: 0000000000000080 x10: 00400032b5503510
    [  188.695572] x9 : 0000000000000000 x8 : ffff800010c80204
    [  188.695659] x7 : 00000000410fd0f0 x6 : 0000000000000001
    [  188.695750] x5 : 00000000410fd0f0 x4 : 0000000000000000
    [  188.695836] x3 : 0000000000000000 x2 : ffff8000100939d8
    [  188.695919] x1 : 0000000000180420 x0 : 0000000000180480
    [  188.696253] Call trace:
    [  188.696410]  has_cpuid_feature+0xf0/0x348
    [  188.696504]  verify_local_elf_hwcaps+0x84/0xe8
    [  188.696591]  check_local_cpu_capabilities+0x44/0x128
    [  188.696666]  secondary_start_kernel+0xf4/0x188
    [  188.697150] Code: 52805001 72a00301 6b01001f 54000ec0 (d4210000)
    [  188.698639] ---[ end trace 3f12ca47652f7b72 ]---
    [  188.699160] Kernel panic - not syncing: Attempted to kill the idle task!
    [  188.699546] Kernel Offset: disabled
    [  188.699828] CPU features: 0x00004,20c02008
    [  188.700012] Memory Limit: none
    [  188.700538] ---[ end Kernel panic - not syncing: Attempted to kill the idle task! ]---
    
    [root@arch ~]# echo Helo
    Helo
    [root@arch ~]# cat /proc/cpuinfo | grep proce
    processor       : 0
    
    Make smp_send_stop() account also for the online status of the calling CPU
    while evaluating how many CPUs are effectively online: this way, the right
    number of STOPs is sent, so enforcing a proper freeze of the system at the
    end of panic even under the above conditions.
    
    Fixes: 08e875c16a16c ("arm64: SMP support")
    Reported-by: Dave Martin <Dave.Martin@arm.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8284d2fe7d12aca92b3a1e996ce5c79591530a0c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Mar 3 13:17:16 2020 +0300

    thunderbolt: Fix error code in tb_port_is_width_supported()
    
    commit e9d0e7511fda92a6511904996dd0aa57b6d7687a upstream.
    
    This function is type bool, and it's supposed to return true on success.
    Unfortunately, this path takes negative error codes and casts them to
    bool (true) so it's treated as success instead of failure.
    
    Fixes: 91c0c12080d0 ("thunderbolt: Add support for lane bonding")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2787247e8424ed267fe4cd428289b04d9c41c816
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Mar 11 14:13:28 2020 +0800

    ALSA: hda/realtek: Fix pop noise on ALC225
    
    commit 3b36b13d5e69d6f51ff1c55d1b404a74646c9757 upstream.
    
    Commit 317d9313925c ("ALSA: hda/realtek - Set default power save node to
    0") makes the ALC225 have pop noise on S3 resume and cold boot.
    
    So partially revert this commit for ALC225 to fix the regression.
    
    Fixes: 317d9313925c ("ALSA: hda/realtek - Set default power save node to 0")
    BugLink: https://bugs.launchpad.net/bugs/1866357
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20200311061328.17614-1-kai.heng.feng@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d635055cc8489383bfa1eae7fd166ec70fa0254b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Mar 8 19:07:17 2020 +0100

    futex: Unbreak futex hashing
    
    commit 8d67743653dce5a0e7aa500fcccb237cde7ad88e upstream.
    
    The recent futex inode life time fix changed the ordering of the futex key
    union struct members, but forgot to adjust the hash function accordingly,
    
    As a result the hashing omits the leading 64bit and even hashes beyond the
    futex key causing a bad hash distribution which led to a ~100% performance
    regression.
    
    Hand in the futex key pointer instead of a random struct member and make
    the size calculation based of the struct offset.
    
    Fixes: 8019ad13ef7f ("futex: Fix inode life-time issue")
    Reported-by: Rong Chen <rong.a.chen@intel.com>
    Decoded-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Rong Chen <rong.a.chen@intel.com>
    Link: https://lkml.kernel.org/r/87h7yy90ve.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55515c7d837d173393d25912b5593387eb0a4e25
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Mar 4 11:28:31 2020 +0100

    futex: Fix inode life-time issue
    
    commit 8019ad13ef7f64be44d4f892af9c840179009254 upstream.
    
    As reported by Jann, ihold() does not in fact guarantee inode
    persistence. And instead of making it so, replace the usage of inode
    pointers with a per boot, machine wide, unique inode identifier.
    
    This sequence number is global, but shared (file backed) futexes are
    rare enough that this should not become a performance issue.
    
    Reported-by: Jann Horn <jannh@google.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5044d07a5a80bb629f9bbb9d2aa93460117b0ad0
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Fri Mar 13 22:29:14 2020 +0300

    io_uring: NULL-deref for IOSQE_{ASYNC,DRAIN}
    
    [ Upstream commit f1d96a8fcbbbb22d4fbc1d69eaaa678bbb0ff6e2 ]
    
    Processing links, io_submit_sqe() prepares requests, drops sqes, and
    passes them with sqe=NULL to io_queue_sqe(). There IOSQE_DRAIN and/or
    IOSQE_ASYNC requests will go through the same prep, which doesn't expect
    sqe=NULL and fail with NULL pointer deference.
    
    Always do full prepare including io_alloc_async_ctx() for linked
    requests, and then it can skip the second preparation.
    
    Cc: stable@vger.kernel.org # 5.5
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 873f1841b0c807555dadbb6858070f4faec01aae
Author: Joerg Roedel <jroedel@suse.de>
Date:   Sat Mar 21 18:22:41 2020 -0700

    x86/mm: split vmalloc_sync_all()
    
    commit 763802b53a427ed3cbd419dbba255c414fdd9e7c upstream.
    
    Commit 3f8fd02b1bf1 ("mm/vmalloc: Sync unmappings in
    __purge_vmap_area_lazy()") introduced a call to vmalloc_sync_all() in
    the vunmap() code-path.  While this change was necessary to maintain
    correctness on x86-32-pae kernels, it also adds additional cycles for
    architectures that don't need it.
    
    Specifically on x86-64 with CONFIG_VMAP_STACK=y some people reported
    severe performance regressions in micro-benchmarks because it now also
    calls the x86-64 implementation of vmalloc_sync_all() on vunmap().  But
    the vmalloc_sync_all() implementation on x86-64 is only needed for newly
    created mappings.
    
    To avoid the unnecessary work on x86-64 and to gain the performance
    back, split up vmalloc_sync_all() into two functions:
    
            * vmalloc_sync_mappings(), and
            * vmalloc_sync_unmappings()
    
    Most call-sites to vmalloc_sync_all() only care about new mappings being
    synchronized.  The only exception is the new call-site added in the
    above mentioned commit.
    
    Shile Zhang directed us to a report of an 80% regression in reaim
    throughput.
    
    Fixes: 3f8fd02b1bf1 ("mm/vmalloc: Sync unmappings in __purge_vmap_area_lazy()")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Reported-by: Shile Zhang <shile.zhang@linux.alibaba.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Borislav Petkov <bp@suse.de>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>        [GHES]
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20191009124418.8286-1-joro@8bytes.org
    Link: https://lists.01.org/hyperkitty/list/lkp@lists.01.org/thread/4D3JPPHBNOSPFK2KEPC6KGKS6J25AIDB/
    Link: http://lkml.kernel.org/r/20191113095530.228959-1-shile.zhang@linux.alibaba.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit affc4edda907fee5b0af94afcf6bdb6c73add48e
Author: Qian Cai <cai@lca.pw>
Date:   Sat Mar 21 18:22:17 2020 -0700

    page-flags: fix a crash at SetPageError(THP_SWAP)
    
    commit d72520ad004a8ce18a6ba6cde317f0081b27365a upstream.
    
    Commit bd4c82c22c36 ("mm, THP, swap: delay splitting THP after swapped
    out") supported writing THP to a swap device but forgot to upgrade an
    older commit df8c94d13c7e ("page-flags: define behavior of FS/IO-related
    flags on compound pages") which could trigger a crash during THP
    swapping out with DEBUG_VM_PGFLAGS=y,
    
      kernel BUG at include/linux/page-flags.h:317!
    
      page dumped because: VM_BUG_ON_PAGE(1 && PageCompound(page))
      page:fffff3b2ec3a8000 refcount:512 mapcount:0 mapping:000000009eb0338c index:0x7f6e58200 head:fffff3b2ec3a8000 order:9 compound_mapcount:0 compound_pincount:0
      anon flags: 0x45fffe0000d8454(uptodate|lru|workingset|owner_priv_1|writeback|head|reclaim|swapbacked)
    
      end_swap_bio_write()
        SetPageError(page)
          VM_BUG_ON_PAGE(1 && PageCompound(page))
    
      <IRQ>
      bio_endio+0x297/0x560
      dec_pending+0x218/0x430 [dm_mod]
      clone_endio+0xe4/0x2c0 [dm_mod]
      bio_endio+0x297/0x560
      blk_update_request+0x201/0x920
      scsi_end_request+0x6b/0x4b0
      scsi_io_completion+0x509/0x7e0
      scsi_finish_command+0x1ed/0x2a0
      scsi_softirq_done+0x1c9/0x1d0
      __blk_mqnterrupt+0xf/0x20
      </IRQ>
    
    Fix by checking PF_NO_TAIL in those places instead.
    
    Fixes: bd4c82c22c36 ("mm, THP, swap: delay splitting THP after swapped out")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: "Huang, Ying" <ying.huang@intel.com>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200310235846.1319-1-cai@lca.pw
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 054ce4f1a704cc8722628ba420647f40ae9f29c6
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Sat Mar 21 18:22:37 2020 -0700

    mm, slub: prevent kmalloc_node crashes and memory leaks
    
    commit 0715e6c516f106ed553828a671d30ad9a3431536 upstream.
    
    Sachin reports [1] a crash in SLUB __slab_alloc():
    
      BUG: Kernel NULL pointer dereference on read at 0x000073b0
      Faulting instruction address: 0xc0000000003d55f4
      Oops: Kernel access of bad area, sig: 11 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Modules linked in:
      CPU: 19 PID: 1 Comm: systemd Not tainted 5.6.0-rc2-next-20200218-autotest #1
      NIP:  c0000000003d55f4 LR: c0000000003d5b94 CTR: 0000000000000000
      REGS: c0000008b37836d0 TRAP: 0300   Not tainted  (5.6.0-rc2-next-20200218-autotest)
      MSR:  8000000000009033 <SF,EE,ME,IR,DR,RI,LE>  CR: 24004844  XER: 00000000
      CFAR: c00000000000dec4 DAR: 00000000000073b0 DSISR: 40000000 IRQMASK: 1
      GPR00: c0000000003d5b94 c0000008b3783960 c00000000155d400 c0000008b301f500
      GPR04: 0000000000000dc0 0000000000000002 c0000000003443d8 c0000008bb398620
      GPR08: 00000008ba2f0000 0000000000000001 0000000000000000 0000000000000000
      GPR12: 0000000024004844 c00000001ec52a00 0000000000000000 0000000000000000
      GPR16: c0000008a1b20048 c000000001595898 c000000001750c18 0000000000000002
      GPR20: c000000001750c28 c000000001624470 0000000fffffffe0 5deadbeef0000122
      GPR24: 0000000000000001 0000000000000dc0 0000000000000002 c0000000003443d8
      GPR28: c0000008b301f500 c0000008bb398620 0000000000000000 c00c000002287180
      NIP ___slab_alloc+0x1f4/0x760
      LR __slab_alloc+0x34/0x60
      Call Trace:
        ___slab_alloc+0x334/0x760 (unreliable)
        __slab_alloc+0x34/0x60
        __kmalloc_node+0x110/0x490
        kvmalloc_node+0x58/0x110
        mem_cgroup_css_online+0x108/0x270
        online_css+0x48/0xd0
        cgroup_apply_control_enable+0x2ec/0x4d0
        cgroup_mkdir+0x228/0x5f0
        kernfs_iop_mkdir+0x90/0xf0
        vfs_mkdir+0x110/0x230
        do_mkdirat+0xb0/0x1a0
        system_call+0x5c/0x68
    
    This is a PowerPC platform with following NUMA topology:
    
      available: 2 nodes (0-1)
      node 0 cpus:
      node 0 size: 0 MB
      node 0 free: 0 MB
      node 1 cpus: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
      node 1 size: 35247 MB
      node 1 free: 30907 MB
      node distances:
      node   0   1
        0:  10  40
        1:  40  10
    
      possible numa nodes: 0-31
    
    This only happens with a mmotm patch "mm/memcontrol.c: allocate
    shrinker_map on appropriate NUMA node" [2] which effectively calls
    kmalloc_node for each possible node.  SLUB however only allocates
    kmem_cache_node on online N_NORMAL_MEMORY nodes, and relies on
    node_to_mem_node to return such valid node for other nodes since commit
    a561ce00b09e ("slub: fall back to node_to_mem_node() node if allocating
    on memoryless node").  This is however not true in this configuration
    where the _node_numa_mem_ array is not initialized for nodes 0 and 2-31,
    thus it contains zeroes and get_partial() ends up accessing
    non-allocated kmem_cache_node.
    
    A related issue was reported by Bharata (originally by Ramachandran) [3]
    where a similar PowerPC configuration, but with mainline kernel without
    patch [2] ends up allocating large amounts of pages by kmalloc-1k
    kmalloc-512.  This seems to have the same underlying issue with
    node_to_mem_node() not behaving as expected, and might probably also
    lead to an infinite loop with CONFIG_SLUB_CPU_PARTIAL [4].
    
    This patch should fix both issues by not relying on node_to_mem_node()
    anymore and instead simply falling back to NUMA_NO_NODE, when
    kmalloc_node(node) is attempted for a node that's not online, or has no
    usable memory.  The "usable memory" condition is also changed from
    node_present_pages() to N_NORMAL_MEMORY node state, as that is exactly
    the condition that SLUB uses to allocate kmem_cache_node structures.
    The check in get_partial() is removed completely, as the checks in
    ___slab_alloc() are now sufficient to prevent get_partial() being
    reached with an invalid node.
    
    [1] https://lore.kernel.org/linux-next/3381CD91-AB3D-4773-BA04-E7A072A63968@linux.vnet.ibm.com/
    [2] https://lore.kernel.org/linux-mm/fff0e636-4c36-ed10-281c-8cdb0687c839@virtuozzo.com/
    [3] https://lore.kernel.org/linux-mm/20200317092624.GB22538@in.ibm.com/
    [4] https://lore.kernel.org/linux-mm/088b5996-faae-8a56-ef9c-5b567125ae54@suse.cz/
    
    Fixes: a561ce00b09e ("slub: fall back to node_to_mem_node() node if allocating on memoryless node")
    Reported-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Reported-by: PUVICHAKRAVARTHY RAMACHANDRAN <puvichakravarthy@in.ibm.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Tested-by: Bharata B Rao <bharata@linux.ibm.com>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Christopher Lameter <cl@linux.com>
    Cc: linuxppc-dev@lists.ozlabs.org
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Nathan Lynch <nathanl@linux.ibm.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200320115533.9604-1-vbabka@suse.cz
    Debugged-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4334e4e3bc4d513ddb593b9e65aca31b36f87b83
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 17 11:04:09 2020 -0700

    mm: slub: be more careful about the double cmpxchg of freelist
    
    commit 5076190daded2197f62fe92cf69674488be44175 upstream.
    
    This is just a cleanup addition to Jann's fix to properly update the
    transaction ID for the slub slowpath in commit fd4d9c7d0c71 ("mm: slub:
    add missing TID bump..").
    
    The transaction ID is what protects us against any concurrent accesses,
    but we should really also make sure to make the 'freelist' comparison
    itself always use the same freelist value that we then used as the new
    next free pointer.
    
    Jann points out that if we do all of this carefully, we could skip the
    transaction ID update for all the paths that only remove entries from
    the lists, and only update the TID when adding entries (to avoid the ABA
    issue with cmpxchg and list handling re-adding a previously seen value).
    
    But this patch just does the "make sure to cmpxchg the same value we
    used" rather than then try to be clever.
    
    Acked-by: Jann Horn <jannh@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d436edfa63931fd10df995b0ac4f3d9971cca2d2
Author: Roman Penyaev <rpenyaev@suse.de>
Date:   Sat Mar 21 18:22:30 2020 -0700

    epoll: fix possible lost wakeup on epoll_ctl() path
    
    commit 1b53734bd0b2feed8e7761771b2e76fc9126ea0c upstream.
    
    This fixes possible lost wakeup introduced by commit a218cc491420.
    Originally modifications to ep->wq were serialized by ep->wq.lock, but
    in commit a218cc491420 ("epoll: use rwlock in order to reduce
    ep_poll_callback() contention") a new rw lock was introduced in order to
    relax fd event path, i.e. callers of ep_poll_callback() function.
    
    After the change ep_modify and ep_insert (both are called on epoll_ctl()
    path) were switched to ep->lock, but ep_poll (epoll_wait) was using
    ep->wq.lock on wqueue list modification.
    
    The bug doesn't lead to any wqueue list corruptions, because wake up
    path and list modifications were serialized by ep->wq.lock internally,
    but actual waitqueue_active() check prior wake_up() call can be
    reordered with modifications of ep ready list, thus wake up can be lost.
    
    And yes, can be healed by explicit smp_mb():
    
      list_add_tail(&epi->rdlink, &ep->rdllist);
      smp_mb();
      if (waitqueue_active(&ep->wq))
            wake_up(&ep->wp);
    
    But let's make it simple, thus current patch replaces ep->wq.lock with
    the ep->lock for wqueue modifications, thus wake up path always observes
    activeness of the wqueue correcty.
    
    Fixes: a218cc491420 ("epoll: use rwlock in order to reduce ep_poll_callback() contention")
    Reported-by: Max Neunhoeffer <max@arangodb.com>
    Signed-off-by: Roman Penyaev <rpenyaev@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Max Neunhoeffer <max@arangodb.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Christopher Kohlhoff <chris.kohlhoff@clearpool.io>
    Cc: Davidlohr Bueso <dbueso@suse.de>
    Cc: Jason Baron <jbaron@akamai.com>
    Cc: Jes Sorensen <jes.sorensen@gmail.com>
    Cc: <stable@vger.kernel.org>    [5.1+]
    Link: http://lkml.kernel.org/r/20200214170211.561524-1-rpenyaev@suse.de
    References: https://bugzilla.kernel.org/show_bug.cgi?id=205933
    Bisected-by: Max Neunhoeffer <max@arangodb.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba741d9e56d156e7c24d9783c5c502791bb92ea7
Author: Michal Hocko <mhocko@suse.com>
Date:   Sat Mar 21 18:22:26 2020 -0700

    mm: do not allow MADV_PAGEOUT for CoW pages
    
    commit 12e967fd8e4e6c3d275b4c69c890adc838891300 upstream.
    
    Jann has brought up a very interesting point [1].  While shared pages
    are excluded from MADV_PAGEOUT normally, CoW pages can be easily
    reclaimed that way.  This can lead to all sorts of hard to debug
    problems.  E.g.  performance problems outlined by Daniel [2].
    
    There are runtime environments where there is a substantial memory
    shared among security domains via CoW memory and a easy to reclaim way
    of that memory, which MADV_{COLD,PAGEOUT} offers, can lead to either
    performance degradation in for the parent process which might be more
    privileged or even open side channel attacks.
    
    The feasibility of the latter is not really clear to me TBH but there is
    no real reason for exposure at this stage.  It seems there is no real
    use case to depend on reclaiming CoW memory via madvise at this stage so
    it is much easier to simply disallow it and this is what this patch
    does.  Put it simply MADV_{PAGEOUT,COLD} can operate only on the
    exclusively owned memory which is a straightforward semantic.
    
    [1] http://lkml.kernel.org/r/CAG48ez0G3JkMq61gUmyQAaCq=_TwHbi1XKzWRooxZkv08PQKuw@mail.gmail.com
    [2] http://lkml.kernel.org/r/CAKOZueua_v8jHCpmEtTB6f3i9e2YnmX4mqdYVWhV4E=Z-n+zRQ@mail.gmail.com
    
    Fixes: 9c276cc65a58 ("mm: introduce MADV_COLD")
    Reported-by: Jann Horn <jannh@google.com>
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Daniel Colascione <dancol@google.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: "Joel Fernandes (Google)" <joel@joelfernandes.org>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200312082248.GS23944@dhcp22.suse.cz
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9c06770c08456d90527adefa56b982f7c40c4ab
Author: Baoquan He <bhe@redhat.com>
Date:   Sat Mar 21 18:22:13 2020 -0700

    mm/hotplug: fix hot remove failure in SPARSEMEM|!VMEMMAP case
    
    commit d41e2f3bd54699f85b3d6f45abd09fa24a222cb9 upstream.
    
    In section_deactivate(), pfn_to_page() doesn't work any more after
    ms->section_mem_map is resetting to NULL in SPARSEMEM|!VMEMMAP case.  It
    causes a hot remove failure:
    
      kernel BUG at mm/page_alloc.c:4806!
      invalid opcode: 0000 [#1] SMP PTI
      CPU: 3 PID: 8 Comm: kworker/u16:0 Tainted: G        W         5.5.0-next-20200205+ #340
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 0.0.0 02/06/2015
      Workqueue: kacpi_hotplug acpi_hotplug_work_fn
      RIP: 0010:free_pages+0x85/0xa0
      Call Trace:
       __remove_pages+0x99/0xc0
       arch_remove_memory+0x23/0x4d
       try_remove_memory+0xc8/0x130
       __remove_memory+0xa/0x11
       acpi_memory_device_remove+0x72/0x100
       acpi_bus_trim+0x55/0x90
       acpi_device_hotplug+0x2eb/0x3d0
       acpi_hotplug_work_fn+0x1a/0x30
       process_one_work+0x1a7/0x370
       worker_thread+0x30/0x380
       kthread+0x112/0x130
       ret_from_fork+0x35/0x40
    
    Let's move the ->section_mem_map resetting after
    depopulate_section_memmap() to fix it.
    
    [akpm@linux-foundation.org: remove unneeded initialization, per David]
    Fixes: ba72b4c8cf60 ("mm/sparsemem: support sub-section hotplug")
    Signed-off-by: Baoquan He <bhe@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Wei Yang <richardw.yang@linux.intel.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200307084229.28251-2-bhe@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7832c55a994b6c1fb7c58dd06253391f64bd9f4e
Author: Chris Down <chris@chrisdown.name>
Date:   Sat Mar 21 18:22:23 2020 -0700

    mm, memcg: throttle allocators based on ancestral memory.high
    
    commit e26733e0d0ec6798eca93daa300bc3f43616127f upstream.
    
    Prior to this commit, we only directly check the affected cgroup's
    memory.high against its usage.  However, it's possible that we are being
    reclaimed as a result of hitting an ancestor memory.high and should be
    penalised based on that, instead.
    
    This patch changes memory.high overage throttling to use the largest
    overage in its ancestors when considering how many penalty jiffies to
    charge.  This makes sure that we penalise poorly behaving cgroups in the
    same way regardless of at what level of the hierarchy memory.high was
    breached.
    
    Fixes: 0e4b01df8659 ("mm, memcg: throttle allocators when failing reclaim over memory.high")
    Reported-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Chris Down <chris@chrisdown.name>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: <stable@vger.kernel.org>    [5.4.x+]
    Link: http://lkml.kernel.org/r/8cd132f84bd7e16cdb8fde3378cdbf05ba00d387.1584036142.git.chris@chrisdown.name
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11c1164392f7f76146c07f7056cd6ed07adb4c8c
Author: Chris Down <chris@chrisdown.name>
Date:   Sat Mar 21 18:22:20 2020 -0700

    mm, memcg: fix corruption on 64-bit divisor in memory.high throttling
    
    commit d397a45fc741c80c32a14e2de008441e9976f50c upstream.
    
    Commit 0e4b01df8659 had a bunch of fixups to use the right division
    method.  However, it seems that after all that it still wasn't right --
    div_u64 takes a 32-bit divisor.
    
    The headroom is still large (2^32 pages), so on mundane systems you
    won't hit this, but this should definitely be fixed.
    
    Fixes: 0e4b01df8659 ("mm, memcg: throttle allocators when failing reclaim over memory.high")
    Reported-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Chris Down <chris@chrisdown.name>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Nathan Chancellor <natechancellor@gmail.com>
    Cc: <stable@vger.kernel.org>    [5.4.x+]
    Link: http://lkml.kernel.org/r/80780887060514967d414b3cd91f9a316a16ab98.1584036142.git.chris@chrisdown.name
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7585887fa357585ba51a07ad6d5f66002be53e30
Author: Chunguang Xu <brookxu@tencent.com>
Date:   Sat Mar 21 18:22:10 2020 -0700

    memcg: fix NULL pointer dereference in __mem_cgroup_usage_unregister_event
    
    commit 7d36665a5886c27ca4c4d0afd3ecc50b400f3587 upstream.
    
    An eventfd monitors multiple memory thresholds of the cgroup, closes them,
    the kernel deletes all events related to this eventfd.  Before all events
    are deleted, another eventfd monitors the memory threshold of this cgroup,
    leading to a crash:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000004
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0002) - not-present page
      PGD 800000033058e067 P4D 800000033058e067 PUD 3355ce067 PMD 0
      Oops: 0002 [#1] SMP PTI
      CPU: 2 PID: 14012 Comm: kworker/2:6 Kdump: loaded Not tainted 5.6.0-rc4 #3
      Hardware name: LENOVO 20AWS01K00/20AWS01K00, BIOS GLET70WW (2.24 ) 05/21/2014
      Workqueue: events memcg_event_remove
      RIP: 0010:__mem_cgroup_usage_unregister_event+0xb3/0x190
      RSP: 0018:ffffb47e01c4fe18 EFLAGS: 00010202
      RAX: 0000000000000001 RBX: ffff8bb223a8a000 RCX: 0000000000000001
      RDX: 0000000000000001 RSI: ffff8bb22fb83540 RDI: 0000000000000001
      RBP: ffffb47e01c4fe48 R08: 0000000000000000 R09: 0000000000000010
      R10: 000000000000000c R11: 071c71c71c71c71c R12: ffff8bb226aba880
      R13: ffff8bb223a8a480 R14: 0000000000000000 R15: 0000000000000000
      FS:  0000000000000000(0000) GS:ffff8bb242680000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000004 CR3: 000000032c29c003 CR4: 00000000001606e0
      Call Trace:
        memcg_event_remove+0x32/0x90
        process_one_work+0x172/0x380
        worker_thread+0x49/0x3f0
        kthread+0xf8/0x130
        ret_from_fork+0x35/0x40
      CR2: 0000000000000004
    
    We can reproduce this problem in the following ways:
    
    1. We create a new cgroup subdirectory and a new eventfd, and then we
       monitor multiple memory thresholds of the cgroup through this eventfd.
    
    2.  closing this eventfd, and __mem_cgroup_usage_unregister_event ()
       will be called multiple times to delete all events related to this
       eventfd.
    
    The first time __mem_cgroup_usage_unregister_event() is called, the
    kernel will clear all items related to this eventfd in thresholds->
    primary.
    
    Since there is currently only one eventfd, thresholds-> primary becomes
    empty, so the kernel will set thresholds-> primary and hresholds-> spare
    to NULL.  If at this time, the user creates a new eventfd and monitor
    the memory threshold of this cgroup, kernel will re-initialize
    thresholds-> primary.
    
    Then when __mem_cgroup_usage_unregister_event () is called for the
    second time, because thresholds-> primary is not empty, the system will
    access thresholds-> spare, but thresholds-> spare is NULL, which will
    trigger a crash.
    
    In general, the longer it takes to delete all events related to this
    eventfd, the easier it is to trigger this problem.
    
    The solution is to check whether the thresholds associated with the
    eventfd has been cleared when deleting the event.  If so, we do nothing.
    
    [akpm@linux-foundation.org: fix comment, per Kirill]
    Fixes: 907860ed381a ("cgroups: make cftype.unregister_event() void-returning")
    Signed-off-by: Chunguang Xu <brookxu@tencent.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/077a6f67-aefa-4591-efec-f2f3af2b0b02@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5213a2da81f83773fce4aac87d5cfdb97970e3e5
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Mar 17 08:22:11 2020 +0200

    stm class: sys-t: Fix the use of time_after()
    
    commit 283f87c0d5d32b4a5c22636adc559bca82196ed3 upstream.
    
    The operands of time_after() are in a wrong order in both instances in
    the sys-t driver. Fix that.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Fixes: 39f10239df75 ("stm class: p_sys-t: Add support for CLOCKSYNC packets")
    Fixes: d69d5e83110f ("stm class: Add MIPI SyS-T protocol support")
    Cc: stable@vger.kernel.org # v4.20+
    Link: https://lore.kernel.org/r/20200317062215.15598-3-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32bacc951ade4006c38f15136b37c90f5e07883e
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Wed Mar 18 15:53:50 2020 +0800

    drm/lease: fix WARNING in idr_destroy
    
    commit b216a8e7908cd750550c0480cf7d2b3a37f06954 upstream.
    
    drm_lease_create takes ownership of leases. And leases will be released
    by drm_master_put.
    
    drm_master_put
        ->drm_master_destroy
                ->idr_destroy
    
    So we needn't call idr_destroy again.
    
    Reported-and-tested-by: syzbot+05835159fe322770fe3d@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/1584518030-4173-1-git-send-email-hqjagain@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d32c72a26491f54d26220322cecb80d2376cd1ca
Author: Tom St Denis <tom.stdenis@amd.com>
Date:   Tue Mar 10 08:40:41 2020 -0400

    drm/amd/amdgpu: Fix GPR read from debugfs (v2)
    
    commit 5bbc6604a62814511c32f2e39bc9ffb2c1b92cbe upstream.
    
    The offset into the array was specified in bytes but should
    be in terms of 32-bit words.  Also prevent large reads that
    would also cause a buffer overread.
    
    v2:  Read from correct offset from internal storage buffer.
    
    Signed-off-by: Tom St Denis <tom.stdenis@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 409186c5549f7f562a893b2c3222b4f3acd264f2
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Mar 10 12:13:53 2020 +0000

    btrfs: fix log context list corruption after rename whiteout error
    
    commit 236ebc20d9afc5e9ff52f3cf3f365a91583aac10 upstream.
    
    During a rename whiteout, if btrfs_whiteout_for_rename() returns an error
    we can end up returning from btrfs_rename() with the log context object
    still in the root's log context list - this happens if 'sync_log' was
    set to true before we called btrfs_whiteout_for_rename() and it is
    dangerous because we end up with a corrupt linked list (root->log_ctxs)
    as the log context object was allocated on the stack.
    
    After btrfs_rename() returns, any task that is running btrfs_sync_log()
    concurrently can end up crashing because that linked list is traversed by
    btrfs_sync_log() (through btrfs_remove_all_log_ctxs()). That results in
    the same issue that commit e6c617102c7e4 ("Btrfs: fix log context list
    corruption after rename exchange operation") fixed.
    
    Fixes: d4682ba03ef618 ("Btrfs: sync log after logging new name")
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b3917c5870020a33f919cef28ee080d14ec9f75
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Mar 6 17:08:57 2020 +0200

    xhci: Do not open code __print_symbolic() in xhci trace events
    
    commit 045706bff837ee89c13f1ace173db71922c1c40b upstream.
    
    libtraceevent (used by perf and trace-cmd) failed to parse the
    xhci_urb_dequeue trace event. This is because the user space trace
    event format parsing is not a full C compiler. It can handle some basic
    logic, but is not meant to be able to handle everything C can do.
    
    In cases where a trace event field needs to be converted from a number
    to a string, there's the __print_symbolic() macro that should be used:
    
     See samples/trace_events/trace-events-sample.h
    
    Some xhci trace events open coded the __print_symbolic() causing the
    user spaces tools to fail to parse it. This has to be replaced with
    __print_symbolic() instead.
    
    CC: stable@vger.kernel.org
    Reported-by: Tzvetomir Stoyanov <tstoyanov@vmware.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=206531
    Fixes: 5abdc2e6e12ff ("usb: host: xhci: add urb_enqueue/dequeue/giveback tracers")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200306150858.21904-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da65f7402216890a90e9b30e68e683c2dc51d360
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Thu Mar 19 14:11:38 2020 +0000

    arm64: compat: Fix syscall number of compat_clock_getres
    
    commit 3568b88944fef28db3ee989b957da49ffc627ede upstream.
    
    The syscall number of compat_clock_getres was erroneously set to 247
    (__NR_io_cancel!) instead of 264. This causes the vDSO fallback of
    clock_getres() to land on the wrong syscall for compat tasks.
    
    Fix the numbering.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 53c489e1dfeb6 ("arm64: compat: Add missing syscall numbers")
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c34cfda1533231452951eaabb6750839d314cfae
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Wed Mar 18 15:26:49 2020 +0000

    rtc: max8907: add missing select REGMAP_IRQ
    
    commit 5d892919fdd0cefd361697472d4e1b174a594991 upstream.
    
    I have hit the following build error:
    
      armv7a-hardfloat-linux-gnueabi-ld: drivers/rtc/rtc-max8907.o: in function `max8907_rtc_probe':
      rtc-max8907.c:(.text+0x400): undefined reference to `regmap_irq_get_virq'
    
    max8907 should select REGMAP_IRQ
    
    Fixes: 94c01ab6d7544 ("rtc: add MAX8907 RTC driver")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b727f1c5394a56a84df14e3fcf250bce30db893
Author: Jessica Yu <jeyu@kernel.org>
Date:   Wed Mar 11 18:01:20 2020 +0100

    modpost: move the namespace field in Module.symvers last
    
    commit 5190044c2965514a973184ca68ef5fad57a24670 upstream.
    
    In order to preserve backwards compatability with kmod tools, we have to
    move the namespace field in Module.symvers last, as the depmod -e -E
    option looks at the first three fields in Module.symvers to check symbol
    versions (and it's expected they stay in the original order of crc,
    symbol, module).
    
    In addition, update an ancient comment above read_dump() in modpost that
    suggested that the export type field in Module.symvers was optional. I
    suspect that there were historical reasons behind that comment that are
    no longer accurate. We have been unconditionally printing the export
    type since 2.6.18 (commit bd5cbcedf44), which is over a decade ago now.
    
    Fix up read_dump() to treat each field as non-optional. I suspect the
    original read_dump() code treated the export field as optional in order
    to support pre <= 2.6.18 Module.symvers (which did not have the export
    type field). Note that although symbol namespaces are optional, the
    field will not be omitted from Module.symvers if a symbol does not have
    a namespace. In this case, the field will simply be empty and the next
    delimiter or end of line will follow.
    
    Cc: stable@vger.kernel.org
    Fixes: cb9b55d21fe0 ("modpost: add support for symbol namespaces")
    Tested-by: Matthias Maennich <maennich@google.com>
    Reviewed-by: Matthias Maennich <maennich@google.com>
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0efc75747072a3564fe33c3c89cdb6e865967392
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Mar 17 08:22:15 2020 +0200

    intel_th: pci: Add Elkhart Lake CPU support
    
    commit add492d2e9446a77ede9bb43699ec85ca8fc1aba upstream.
    
    This adds support for the Trace Hub in Elkhart Lake CPU.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200317062215.15598-7-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 320b28c11273e1fa8000e552194d542c7ff68638
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Mar 17 08:22:14 2020 +0200

    intel_th: Fix user-visible error codes
    
    commit ce666be89a8a09c5924ff08fc32e119f974bdab6 upstream.
    
    There are a few places in the driver that end up returning ENOTSUPP to
    the user, replace those with EINVAL.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Fixes: ba82664c134ef ("intel_th: Add Memory Storage Unit driver")
    Cc: stable@vger.kernel.org # v4.4+
    Link: https://lore.kernel.org/r/20200317062215.15598-6-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6164c989b2e28b23cddf0c34dcdc6705464e8d49
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Mar 17 08:22:13 2020 +0200

    intel_th: msu: Fix the unexpected state warning
    
    commit 885f123554bbdc1807ca25a374be6e9b3bddf4de upstream.
    
    The unexpected state warning should only warn on illegal state
    transitions. Fix that.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Fixes: 615c164da0eb4 ("intel_th: msu: Introduce buffer interface")
    Cc: stable@vger.kernel.org # v5.4+
    Link: https://lore.kernel.org/r/20200317062215.15598-5-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 317e45ac9d59d051ddcf51f606a1807eab41b093
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Fri Mar 6 01:30:47 2020 +0100

    staging/speakup: fix get_word non-space look-ahead
    
    commit 9d32c0cde4e2d1343dfb88a67b2ec6397705b32b upstream.
    
    get_char was erroneously given the address of the pointer to the text
    instead of the address of the text, thus leading to random crashes when
    the user requests speaking a word while the current position is on a space
    character and say_word_ctl is not enabled.
    
    Reported-on: https://github.com/bytefire/speakup/issues/1
    Reported-by: Kirk Reiser <kirk@reisers.ca>
    Reported-by: Janina Sajka <janina@rednote.net>
    Reported-by: Alexandr Epaneshnikov <aarnaarn2@gmail.com>
    Reported-by: Gregory Nowak <greg@gregn.net>
    Reported-by: deedra waters <deedra@the-brannons.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Tested-by: Alexandr Epaneshnikov <aarnaarn2@gmail.com>
    Tested-by: Gregory Nowak <greg@gregn.net>
    Tested-by: Michael Taboada <michael@michaels.world>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200306003047.thijtmqrnayd3dmw@function
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e59011354bf131f3f2ab6252e9f26b4922cd1b42
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 12 12:01:49 2020 +0100

    staging: greybus: loopback_test: fix poll-mask build breakage
    
    commit 8f3675be4bda33adbdc1dd2ab3b6c76a7599a79e upstream.
    
    A scripted conversion from userland POLL* to kernel EPOLL* constants
    mistakingly replaced the poll flags in the loopback_test tool, which
    therefore no longer builds.
    
    Fixes: a9a08845e9ac ("vfs: do bulk POLL* -> EPOLL* replacement")
    Cc: stable <stable@vger.kernel.org>     # 4.16
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200312110151.22028-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92eb8866c19184adef7c5dc11b844add50660c8a
Author: Michael Straube <straube.linux@gmail.com>
Date:   Thu Mar 12 10:36:52 2020 +0100

    staging: rtl8188eu: Add device id for MERCUSYS MW150US v2
    
    commit bb5786b9286c253557a0115bc8d21879e61b7b94 upstream.
    
    This device was added to the stand-alone driver on github.
    Add it to the staging driver as well.
    
    Link: https://github.com/lwfinger/rtl8188eu/commit/2141f244c3e7
    Signed-off-by: Michael Straube <straube.linux@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312093652.13918-1-straube.linux@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5478cc8d64b41c8326d65ef4766eba578c7dee7e
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Wed Mar 11 12:41:21 2020 -0700

    kbuild: Disable -Wpointer-to-enum-cast
    
    commit 82f2bc2fcc0160d6f82dd1ac64518ae0a4dd183f upstream.
    
    Clang's -Wpointer-to-int-cast deviates from GCC in that it warns when
    casting to enums. The kernel does this in certain places, such as device
    tree matches to set the version of the device being used, which allows
    the kernel to avoid using a gigantic union.
    
    https://elixir.bootlin.com/linux/v5.5.8/source/drivers/ata/ahci_brcm.c#L428
    https://elixir.bootlin.com/linux/v5.5.8/source/drivers/ata/ahci_brcm.c#L402
    https://elixir.bootlin.com/linux/v5.5.8/source/include/linux/mod_devicetable.h#L264
    
    To avoid a ton of false positive warnings, disable this particular part
    of the warning, which has been split off into a separate diagnostic so
    that the entire warning does not need to be turned off for clang. It
    will be visible under W=1 in case people want to go about fixing these
    easily and enabling the warning treewide.
    
    Cc: stable@vger.kernel.org
    Link: https://github.com/ClangBuiltLinux/linux/issues/887
    Link: https://github.com/llvm/llvm-project/commit/2a41b31fcdfcb67ab7038fc2ffb606fd50b83a84
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 482705329d51837c7d4bb83072870186a01b8a6d
Author: Murphy Zhou <jencce.kernel@gmail.com>
Date:   Sat Mar 14 11:38:31 2020 +0800

    CIFS: fiemap: do not return EINVAL if get nothing
    
    commit 979a2665eb6c603ddce0ab374041ab101827b2e7 upstream.
    
    If we call fiemap on a truncated file with none blocks allocated,
    it makes sense we get nothing from this call. No output means
    no blocks have been counted, but the call succeeded. It's a valid
    response.
    
    Simple example reproducer:
    xfs_io -f 'truncate 2M' -c 'fiemap -v' /cifssch/testfile
    xfs_io: ioctl(FS_IOC_FIEMAP) ["/cifssch/testfile"]: Invalid argument
    
    Signed-off-by: Murphy Zhou <jencce.kernel@gmail.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3973e942b5d096a8715bbd51b623aff7b26f124
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 16 19:47:53 2020 +0100

    mmc: sdhci-acpi: Disable write protect detection on Acer Aspire Switch 10 (SW5-012)
    
    commit 3397b251ea02003f47f0b1667f3fe30bb4f9ce90 upstream.
    
    On the Acer Aspire Switch 10 (SW5-012) microSD slot always reports the card
    being write-protected even though microSD cards do not have a write-protect
    switch at all.
    
    Add a new DMI_QUIRK_SD_NO_WRITE_PROTECT quirk which when set sets
    the MMC_CAP2_NO_WRITE_PROTECT flag on the controller for the external SD
    slot; and add a DMI quirk table entry which selects this quirk for the
    Acer SW5-012.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200316184753.393458-2-hdegoede@redhat.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3cade08de70037bda92aeb0b60ef33e1ea8c235
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 16 19:47:52 2020 +0100

    mmc: sdhci-acpi: Switch signal voltage back to 3.3V on suspend on external microSD on Lenovo Miix 320
    
    commit 84d49b3d08a1d33690cc159036f381c31c27c17b upstream.
    
    Based on a sample of 7 DSDTs from Cherry Trail devices using an AXP288
    PMIC depending on the design one of 2 possible LDOs on the PMIC is used
    for the MMC signalling voltage, either DLDO3 or GPIO1LDO (GPIO1 pin in
    low noise LDO mode).
    
    The Lenovo Miix 320-10ICR uses GPIO1LDO in the SHC1 ACPI device's DSM
    methods to set 3.3 or 1.8 signalling voltage and this appears to work
    as advertised, so presumably the device is actually using GPIO1LDO for
    the external microSD signalling voltage.
    
    But this device has a bug in the _PS0 method of the SHC1 ACPI device,
    the DSM remembers the last set signalling voltage and the _PS0 restores
    this after a (runtime) suspend-resume cycle, but it "restores" the voltage
    on DLDO3 instead of setting it on GPIO1LDO as the DSM method does. DLDO3
    is used for the LCD and setting it to 1.8V causes the LCD to go black.
    
    This commit works around this issue by calling the Intel DSM to reset the
    signal voltage to 3.3V after the host has been runtime suspended.
    This will make the _PS0 method reprogram the DLDO3 voltage to 3.3V, which
    leaves it at its original setting fixing the LCD going black.
    
    This commit adds and uses a DMI quirk mechanism to only trigger this
    workaround on the Lenovo Miix 320 while leaving the behavior of the
    driver unchanged on other devices.
    
    BugLink: https://bugs.freedesktop.org/show_bug.cgi?id=111294
    BugLink: https://gitlab.freedesktop.org/drm/intel/issues/355
    Reported-by: russianneuromancer <russianneuromancer@ya.ru>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200316184753.393458-1-hdegoede@redhat.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70e92643cb6c21927085d1bb51fbfc9e817c4fdc
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Mar 12 19:42:57 2020 +0900

    mmc: sdhci-cadence: set SDHCI_QUIRK2_PRESET_VALUE_BROKEN for UniPhier
    
    commit 18b587b45c13bb6a07ed0edac15f06892593d07a upstream.
    
    The SDHCI_PRESET_FOR_* registers are not set for the UniPhier platform
    integration. (They are all read as zeros).
    
    Set the SDHCI_QUIRK2_PRESET_VALUE_BROKEN quirk flag. Otherwise, the
    High Speed DDR mode on the eMMC controller (MMC_TIMING_MMC_DDR52)
    would not work.
    
    I split the platform data to give no impact to other platforms,
    although the UniPhier platform is currently only the upstream user
    of this IP.
    
    The SDHCI_QUIRK2_PRESET_VALUE_BROKEN flag is set if the compatible
    string matches to "socionext,uniphier-sd4hc".
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200312104257.21017-1-yamada.masahiro@socionext.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1c017b18639fca3c022da11b17806ace4c2e814
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Sun Mar 15 17:44:25 2020 +0100

    mmc: sdhci-of-at91: fix cd-gpios for SAMA5D2
    
    commit 53dd0a7cd65edc83b0c243d1c08377c8b876b2ee upstream.
    
    SAMA5D2x doesn't drive CMD line if GPIO is used as CD line (at least
    SAMA5D27 doesn't). Fix this by forcing card-detect in the module
    if module-controlled CD is not used.
    
    Fixed commit addresses the problem only for non-removable cards. This
    amends it to also cover gpio-cd case.
    
    Cc: stable@vger.kernel.org
    Fixes: 7a1e3f143176 ("mmc: sdhci-of-at91: force card detect value for non removable devices")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/8d10950d9940468577daef4772b82a071b204716.1584290561.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4c6f702a2a586cdc581b7eb42ed8d3bea1c910a
Author: Ricky Wu <ricky_wu@realtek.com>
Date:   Mon Mar 16 10:52:32 2020 +0800

    mmc: rtsx_pci: Fix support for speed-modes that relies on tuning
    
    commit 4686392c32361c97e8434adf9cc77ad7991bfa81 upstream.
    
    The TX/RX register should not be treated the same way to allow for better
    support of tuning. Fix this by using a default initial value for TX.
    
    Signed-off-by: Ricky Wu <ricky_wu@realtek.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200316025232.1167-1-ricky_wu@realtek.com
    [Ulf: Updated changelog]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7538f71cea3411f1638b553394d6322d854a5e72
Author: Tomas Novotny <tomas@novotny.cz>
Date:   Tue Feb 18 16:44:51 2020 +0100

    iio: light: vcnl4000: update sampling periods for vcnl4040
    
    commit 2ca5a8792d617b4035aacd0a8be527f667fbf912 upstream.
    
    Vishay has published a new version of "Designing the VCNL4200 Into an
    Application" application note in October 2019. The new version specifies
    that there is +-20% of part to part tolerance. Although the application
    note is related to vcnl4200, according to support the vcnl4040's "ASIC
    is quite similar to that one for the VCNL4200".
    
    So update the sampling periods (and comment), including the correct
    sampling period for proximity. Both sampling periods are lower. Users
    relying on the blocking behaviour of reading will get proximity
    measurements much earlier.
    
    Fixes: 5a441aade5b3 ("iio: light: vcnl4000 add support for the VCNL4040 proximity and light sensor")
    Reviewed-by: Guido Günther <agx@sigxcpu.org>
    Tested-by: Guido Günther <agx@sigxcpu.org>
    Signed-off-by: Tomas Novotny <tomas@novotny.cz>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a2563cc3b40be9f787d6c23b5a32dadf6b1b925
Author: Tomas Novotny <tomas@novotny.cz>
Date:   Tue Feb 18 16:44:50 2020 +0100

    iio: light: vcnl4000: update sampling periods for vcnl4200
    
    commit b42aa97ed5f1169cfd37175ef388ea62ff2dcf43 upstream.
    
    Vishay has published a new version of "Designing the VCNL4200 Into an
    Application" application note in October 2019. The new version specifies
    that there is +-20% of part to part tolerance. This explains the drift
    seen during experiments. The proximity pulse width is also changed from
    32us to 30us. According to the support, the tolerance also applies to
    ambient light.
    
    So update the sampling periods. As the reading is blocking, current
    users may notice slightly longer response time.
    
    Fixes: be38866fbb97 ("iio: vcnl4000: add support for VCNL4200")
    Reviewed-by: Guido Günther <agx@sigxcpu.org>
    Signed-off-by: Tomas Novotny <tomas@novotny.cz>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02e5cdd354fd9f00ed81de93466c920c355b44a4
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Tue Jan 28 12:57:39 2020 +0000

    iio: adc: at91-sama5d2_adc: fix differential channels in triggered mode
    
    commit a500f3bd787f8224341e44b238f318c407b10897 upstream.
    
    The differential channels require writing the channel offset register (COR).
    Otherwise they do not work in differential mode.
    The configuration of COR is missing in triggered mode.
    
    Fixes: 5e1a1da0f8c9 ("iio: adc: at91-sama5d2_adc: add hw trigger and buffer support")
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf3fdff4c33683c29eb017db309fc22f5e9208cf
Author: Olivier Moysan <olivier.moysan@st.com>
Date:   Tue Jan 21 12:02:56 2020 +0100

    iio: adc: stm32-dfsdm: fix sleep in atomic context
    
    commit e19ac9d9a978f8238a85a28ed624094a497d5ae6 upstream.
    
    This commit fixes the error message:
    "BUG: sleeping function called from invalid context at kernel/irq/chip.c"
    Suppress the trigger irq handler. Make the buffer transfers directly
    in DMA callback, instead.
    Push buffers without timestamps, as timestamps are not supported
    in DFSDM driver.
    
    Fixes: 11646e81d775 ("iio: adc: stm32-dfsdm: add support for buffer modes")
    
    Signed-off-by: Olivier Moysan <olivier.moysan@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c5572d7c8c204fdbc8642852de5d1ab9cc6c5c5
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Fri Feb 14 12:03:24 2020 +0100

    iio: magnetometer: ak8974: Fix negative raw values in sysfs
    
    commit b500c086e4110829a308c23e83a7cdc65b26228a upstream.
    
    At the moment, reading from in_magn_*_raw in sysfs tends to return
    large values around 65000, even though the output of ak8974 is actually
    limited to ±32768. This happens because the value is never converted
    to the signed 16-bit integer variant.
    
    Add an explicit cast to s16 to fix this.
    
    Fixes: 7c94a8b2ee8c ("iio: magn: add a driver for AK8974")
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Linus Waleij <linus.walleij@linaro.org>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4aba497b10ae778ad4fc8ee0ebc29d896a1d8161
Author: Alexandru Tachici <alexandru.tachici@analog.com>
Date:   Wed Feb 19 16:31:12 2020 +0200

    iio: accel: adxl372: Set iio_chan BE
    
    commit cb2116ff97859d34fda6cb561ac654415f4c6230 upstream.
    
    Data stored in the iio-buffer is BE and this
    should be specified in the iio_chan_spec struct.
    
    Fixes: f4f55ce38e5f8 ("iio:adxl372: Add FIFO and interrupts support")
    Signed-off-by: Alexandru Tachici <alexandru.tachici@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77586c39ce28c61bd5a6eb0ab7e9ab97095b5d1f
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Fri Feb 14 17:46:35 2020 +0100

    iio: trigger: stm32-timer: disable master mode when stopping
    
    commit 29e8c8253d7d5265f58122c0a7902e26df6c6f61 upstream.
    
    Master mode should be disabled when stopping. This mainly impacts
    possible other use-case after timer has been stopped. Currently,
    master mode remains set (from start routine).
    
    Fixes: 6fb34812c2a2 ("iio: stm32 trigger: Add support for TRGO2 triggers")
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee76a80444aadb955ca3af07da287d0e940031ff
Author: Wen-chien Jesse Sung <jesse.sung@canonical.com>
Date:   Mon Feb 24 17:54:26 2020 +0800

    iio: st_sensors: remap SMO8840 to LIS2DH12
    
    commit e43d110cdc206b6df4dd438cd10c81d1da910aad upstream.
    
    According to ST, the HID is for LIS2DH12.
    
    Fixes: 3d56e19815b3 ("iio: accel: st_accel: Add support for the SMO8840 ACPI id")
    Signed-off-by: Wen-chien Jesse Sung <jesse.sung@canonical.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 086a75a628463da837dd4adfaccc7596b97a8d97
Author: Petr Štetiar <ynezz@true.cz>
Date:   Thu Feb 27 17:27:34 2020 +0100

    iio: chemical: sps30: fix missing triggered buffer dependency
    
    commit 016a8845f6da65b2203f102f192046fbb624e250 upstream.
    
    SPS30 uses triggered buffer, but the dependency is not specified in the
    Kconfig file.  Fix this by selecting IIO_BUFFER and IIO_TRIGGERED_BUFFER
    config symbols.
    
    Cc: stable@vger.kernel.org
    Fixes: 232e0f6ddeae ("iio: chemical: add support for Sensirion SPS30 sensor")
    Signed-off-by: Petr Štetiar <ynezz@true.cz>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dac1e38a0fe739674e35699cd84a8816851307c
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Feb 24 10:20:44 2020 -0800

    tty: fix compat TIOCGSERIAL checking wrong function ptr
    
    commit 6e622cd8bd888c7fa3ee2b7dfb3514ab53b21570 upstream.
    
    Commit 77654350306a ("take compat TIOC[SG]SERIAL treatment into
    tty_compat_ioctl()") changed the compat version of TIOCGSERIAL to start
    checking for the presence of the ->set_serial function pointer rather
    than ->get_serial.  This appears to be a copy-and-paste error, since
    ->get_serial is the function pointer that is called as well as the
    pointer that is checked by the non-compat version of TIOCGSERIAL.
    
    Fix this by checking the correct function pointer.
    
    Fixes: 77654350306a ("take compat TIOC[SG]SERIAL treatment into tty_compat_ioctl()")
    Cc: <stable@vger.kernel.org> # v4.20+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20200224182044.234553-3-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8364dad5d775ab37213b28710715c0a7e61b941a
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Feb 24 10:20:43 2020 -0800

    tty: fix compat TIOCGSERIAL leaking uninitialized memory
    
    commit 17329563a97df3ba474eca5037c1336e46e14ff8 upstream.
    
    Commit 77654350306a ("take compat TIOC[SG]SERIAL treatment into
    tty_compat_ioctl()") changed the compat version of TIOCGSERIAL to start
    copying a whole 'serial_struct32' to userspace rather than individual
    fields, but failed to initialize all padding and fields -- namely the
    hole after the 'iomem_reg_shift' field, and the 'reserved' field.
    
    Fix this by initializing the struct to zero.
    
    [v2: use sizeof, and convert the adjacent line for consistency.]
    
    Reported-by: syzbot+8da9175e28eadcb203ce@syzkaller.appspotmail.com
    Fixes: 77654350306a ("take compat TIOC[SG]SERIAL treatment into tty_compat_ioctl()")
    Cc: <stable@vger.kernel.org> # v4.20+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20200224182044.234553-2-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 751e75fc007f8f2ca65262b291eb2ccf6003bb6c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Mar 12 16:57:30 2020 +0100

    ALSA: pcm: oss: Remove WARNING from snd_pcm_plug_alloc() checks
    
    commit 5461e0530c222129dfc941058be114b5cbc00837 upstream.
    
    The return value checks in snd_pcm_plug_alloc() are covered with
    snd_BUG_ON() macro that may trigger a kernel WARNING depending on the
    kconfig.  But since the error condition can be triggered by a weird
    user space parameter passed to OSS layer, we shouldn't give the kernel
    stack trace just for that.  As it's a normal error condition, let's
    remove snd_BUG_ON() macro usage there.
    
    Reported-by: syzbot+2a59ee7a9831b264f45e@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312155730.7520-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9905a1c5f26da699c169066cee8896704bd5554
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 9 09:21:48 2020 +0100

    ALSA: pcm: oss: Avoid plugin buffer overflow
    
    commit f2ecf903ef06eb1bbbfa969db9889643d487e73a upstream.
    
    Each OSS PCM plugins allocate its internal buffer per pre-calculation
    of the max buffer size through the chain of plugins (calling
    src_frames and dst_frames callbacks).  This works for most plugins,
    but the rate plugin might behave incorrectly.  The calculation in the
    rate plugin involves with the fractional position, i.e. it may vary
    depending on the input position.  Since the buffer size
    pre-calculation is always done with the offset zero, it may return a
    shorter size than it might be; this may result in the out-of-bound
    access as spotted by fuzzer.
    
    This patch addresses those possible buffer overflow accesses by simply
    setting the upper limit per the given buffer size for each plugin
    before src_frames() and after dst_frames() calls.
    
    Reported-by: syzbot+e1fe9f44fb8ecf4fb5dd@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/000000000000b25ea005a02bcf21@google.com
    Link: https://lore.kernel.org/r/20200309082148.19855-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f77ec1cdede0511d9ddb4beb994948069e26785b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 16 10:05:06 2020 +0100

    ALSA: seq: oss: Fix running status after receiving sysex
    
    commit 6c3171ef76a0bad892050f6959a7eac02fb16df7 upstream.
    
    This is a similar bug like the previous case for virmidi: the invalid
    running status is kept after receiving a sysex message.
    
    Again the fix is to clear the running status after handling the sysex.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3b4a4e0f232b7afbaf0a843f63d0e538e3029bfd.camel@domdv.de
    Link: https://lore.kernel.org/r/20200316090506.23966-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3359b2e2c38a92751263fc1776e0028ff59739fc
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 16 10:05:05 2020 +0100

    ALSA: seq: virmidi: Fix running status after receiving sysex
    
    commit 4384f167ce5fa7241b61bb0984d651bc528ddebe upstream.
    
    The virmidi driver handles sysex event exceptionally in a short-cut
    snd_seq_dump_var_event() call, but this missed the reset of the
    running status.  As a result, it may lead to an incomplete command
    right after the sysex when an event with the same running status was
    queued.
    
    Fix it by clearing the running status properly via alling
    snd_midi_event_reset_decode() for that code path.
    
    Reported-by: Andreas Steinmetz <ast@domdv.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3b4a4e0f232b7afbaf0a843f63d0e538e3029bfd.camel@domdv.de
    Link: https://lore.kernel.org/r/20200316090506.23966-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 241862a0a1d6032b4be2e9519f9b10dde3980dce
Author: Jian-Hong Pan <jian-hong@endlessm.com>
Date:   Tue Mar 17 16:28:09 2020 +0800

    ALSA: hda/realtek - Enable the headset of Acer N50-600 with ALC662
    
    commit a124458a127ccd7629e20cd7bae3e1f758ed32aa upstream.
    
    A headset on the desktop like Acer N50-600 does not work, until quirk
    ALC662_FIXUP_ACER_NITRO_HEADSET_MODE is applied.
    
    Signed-off-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200317082806.73194-3-jian-hong@endlessm.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2296aec302a8e8fdc3dc4bf028192359685748c
Author: Jian-Hong Pan <jian-hong@endlessm.com>
Date:   Tue Mar 17 16:28:07 2020 +0800

    ALSA: hda/realtek - Enable headset mic of Acer X2660G with ALC662
    
    commit d858c706bdca97698752bd26b60c21ec07ef04f2 upstream.
    
    The Acer desktop X2660G with ALC662 can't detect the headset microphone
    until ALC662_FIXUP_ACER_X2660G_HEADSET_MODE quirk applied.
    
    Signed-off-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200317082806.73194-2-jian-hong@endlessm.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03dfb41e318e2de75daeef257a21b64f3261d437
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 9 10:59:22 2020 +0100

    ALSA: line6: Fix endless MIDI read loop
    
    commit d683469b3c93d7e2afd39e6e1970f24700eb7a68 upstream.
    
    The MIDI input event parser of the LINE6 driver may enter into an
    endless loop when the unexpected data sequence is given, as it tries
    to continue the secondary bytes without termination.  Also, when the
    input data is too short, the parser returns a negative error, while
    the caller doesn't handle it properly.  This would lead to the
    unexpected behavior as well.
    
    This patch addresses those issues by checking the return value
    correctly and handling the one-byte event in the parser properly.
    
    The bug was reported by syzkaller.
    
    Reported-by: syzbot+cce32521ee0a824c21f7@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/000000000000033087059f8f8fa3@google.com
    Link: https://lore.kernel.org/r/20200309095922.30269-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06f41dd5daf90eaf53b8d52a08958c93773c7db6
Author: Anthony Mallet <anthony.mallet@laas.fr>
Date:   Thu Mar 12 14:31:01 2020 +0100

    USB: cdc-acm: fix rounding error in TIOCSSERIAL
    
    commit b401f8c4f492cbf74f3f59c9141e5be3071071bb upstream.
    
    By default, tty_port_init() initializes those parameters to a multiple
    of HZ. For instance in line 69 of tty_port.c:
       port->close_delay = (50 * HZ) / 100;
    https://github.com/torvalds/linux/blob/master/drivers/tty/tty_port.c#L69
    
    With e.g. CONFIG_HZ = 250 (as this is the case for Ubuntu 18.04
    linux-image-4.15.0-37-generic), the default setting for close_delay is
    thus 125.
    
    When ioctl(fd, TIOCGSERIAL, &s) is executed, the setting returned in
    user space is '12' (125/10). When ioctl(fd, TIOCSSERIAL, &s) is then
    executed with the same setting '12', the value is interpreted as '120'
    which is different from the current setting and a EPERM error may be
    raised by set_serial_info() if !CAP_SYS_ADMIN.
    https://github.com/torvalds/linux/blob/master/drivers/usb/class/cdc-acm.c#L919
    
    Fixes: ba2d8ce9db0a6 ("cdc-acm: implement TIOCSSERIAL to avoid blocking close(2)")
    Signed-off-by: Anthony Mallet <anthony.mallet@laas.fr>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312133101.7096-2-anthony.mallet@laas.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33017881545f102ab17d7c71b466757dd7afc877
Author: Anthony Mallet <anthony.mallet@laas.fr>
Date:   Thu Mar 12 14:31:00 2020 +0100

    USB: cdc-acm: fix close_delay and closing_wait units in TIOCSSERIAL
    
    commit 633e2b2ded739a34bd0fb1d8b5b871f7e489ea29 upstream.
    
    close_delay and closing_wait are specified in hundredth of a second but stored
    internally in jiffies. Use the jiffies_to_msecs() and msecs_to_jiffies()
    functions to convert from each other.
    
    Signed-off-by: Anthony Mallet <anthony.mallet@laas.fr>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312133101.7096-1-anthony.mallet@laas.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2842f2c062182d8b46892f28f78b0b6f023a7990
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Wed Mar 11 16:00:06 2020 +0300

    usb: typec: ucsi: displayport: Fix a potential race during registration
    
    commit 081da1325d351ea8804cf74e65263ea120834f33 upstream.
    
    Locking the connector in ucsi_register_displayport() to make
    sure that nothing can access the displayport alternate mode
    before the function has finished and the alternate mode is
    actually ready.
    
    Fixes: af8622f6a585 ("usb: typec: ucsi: Support for DisplayPort alt mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20200311130006.41288-3-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8faf1122f7294a6834b16c9a5093b5efe0b31390
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Wed Mar 11 16:00:05 2020 +0300

    usb: typec: ucsi: displayport: Fix NULL pointer dereference
    
    commit d16e7b62c5adcd13832c6b0ba364c3468d21b856 upstream.
    
    If the registration of the DisplayPort was not successful,
    or if the port does not support DisplayPort alt mode in the
    first place, the function ucsi_displayport_remove_partner()
    will fail with NULL pointer dereference when it attempts to
    access the driver data.
    
    Adding a check to the function to make sure there really is
    driver data for the device before modifying it.
    
    Fixes: af8622f6a585 ("usb: typec: ucsi: Support for DisplayPort alt mode")
    Reported-by: Andrea Gagliardi La Gala <andrea.lagala@gmail.com>
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=206365
    Cc: stable@vger.kernel.org
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20200311130006.41288-2-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afe493a13d5ad3d7bbb70f797440a18bcdf1cfca
Author: Alberto Mattea <alberto@mattea.info>
Date:   Fri Mar 6 17:08:58 2020 +0200

    usb: xhci: apply XHCI_SUSPEND_DELAY to AMD XHCI controller 1022:145c
    
    commit 16263abc12d09871156a1c8650fb651f0e552f5e upstream.
    
    This controller timeouts during suspend (S3) with
    [  240.521724] xhci_hcd 0000:30:00.3: WARN: xHC save state timeout
    [  240.521729] xhci_hcd 0000:30:00.3: ERROR mismatched command completion event
    thus preventing the system from entering S3.
    Moreover it remains in an undefined state where some connected devices stop
    working until a reboot.
    Apply the XHCI_SUSPEND_DELAY quirk to make it suspend properly.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Alberto Mattea <alberto@mattea.info>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200306150858.21904-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4eda8b10aa745fc5debf7d765fbc5e940dce7c60
Author: Scott Chen <scott@labau.com.tw>
Date:   Wed Mar 11 14:14:23 2020 +0800

    USB: serial: pl2303: add device-id for HP LD381
    
    commit cecc113c1af0dd41ccf265c1fdb84dbd05e63423 upstream.
    
    Add a device id for HP LD381 Display
    LD381:   03f0:0f7f
    
    Signed-off-by: Scott Chen <scott@labau.com.tw>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1e8d29df04c08ff2231013c85bfb951bd562115
Author: Ran Wang <ran.wang_1@nxp.com>
Date:   Fri Mar 6 17:23:28 2020 +0800

    usb: host: xhci-plat: add a shutdown
    
    commit b433e340e7565110b0ce9ca4b3e26f4b97a1decf upstream.
    
    When loading new kernel via kexec, we need to shutdown host controller to
    avoid any un-expected memory accessing during new kernel boot.
    
    Signed-off-by: Ran Wang <ran.wang_1@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200306092328.41253-1-ran.wang_1@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b965819442720217e1ff4f0cfe3e5c2ffe96b54
Author: Peter Chen <peter.chen@nxp.com>
Date:   Mon Mar 16 11:10:34 2020 +0800

    usb: chipidea: udc: fix sleeping function called from invalid context
    
    commit 7368760d1bcdabf515c41a502568b489de3da683 upstream.
    
    The code calls pm_runtime_get_sync with irq disabled, it causes below
    warning:
    
    BUG: sleeping function called from invalid context at
    wer/runtime.c:1075
    in_atomic(): 1, irqs_disabled(): 128, non_block: 0, pid:
    er/u8:1
    CPU: 1 PID: 37 Comm: kworker/u8:1 Not tainted
    20200304-00181-gbebfd2a5be98 #1588
    Hardware name: NVIDIA Tegra SoC (Flattened Device Tree)
    Workqueue: ci_otg ci_otg_work
    [<c010e8bd>] (unwind_backtrace) from [<c010a315>]
    1/0x14)
    [<c010a315>] (show_stack) from [<c0987d29>]
    5/0x94)
    [<c0987d29>] (dump_stack) from [<c013e77f>]
    +0xeb/0x118)
    [<c013e77f>] (___might_sleep) from [<c052fa1d>]
    esume+0x75/0x78)
    [<c052fa1d>] (__pm_runtime_resume) from [<c0627a33>]
    0x23/0x74)
    [<c0627a33>] (ci_udc_pullup) from [<c062fb93>]
    nect+0x2b/0xcc)
    [<c062fb93>] (usb_gadget_connect) from [<c062769d>]
    _connect+0x59/0x104)
    [<c062769d>] (ci_hdrc_gadget_connect) from [<c062778b>]
    ssion+0x43/0x48)
    [<c062778b>] (ci_udc_vbus_session) from [<c062f997>]
    s_connect+0x17/0x9c)
    [<c062f997>] (usb_gadget_vbus_connect) from [<c062634d>]
    bd/0x128)
    [<c062634d>] (ci_otg_work) from [<c0134719>]
    rk+0x149/0x404)
    [<c0134719>] (process_one_work) from [<c0134acb>]
    0xf7/0x3bc)
    [<c0134acb>] (worker_thread) from [<c0139433>]
    x118)
    [<c0139433>] (kthread) from [<c01010bd>]
    (ret_from_fork+0x11/0x34)
    
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Cc: <stable@vger.kernel.org> #v5.5
    Fixes: 72dc8df7920f ("usb: chipidea: udc: protect usb interrupt enable")
    Reported-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200316031034.17847-2-peter.chen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9cbc826018a7c761b1266516833128575b8e5dc
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Wed Mar 4 11:43:10 2020 +0100

    USB: serial: option: add ME910G1 ECM composition 0x110b
    
    commit 8e852a7953be2a6ee371449f7257fe15ace6a1fc upstream.
    
    Add ME910G1 ECM composition 0x110b: tty, tty, tty, ecm
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20200304104310.2938-1-dnlplm@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d456cb5a8c99c0536f2cfb480c5232fa5d10499
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Mar 13 13:07:08 2020 +0100

    usb: quirks: add NO_LPM quirk for RTL8153 based ethernet adapters
    
    commit 75d7676ead19b1fbb5e0ee934c9ccddcb666b68c upstream.
    
    We have been receiving bug reports that ethernet connections over
    RTL8153 based ethernet adapters stops working after a while with
    errors like these showing up in dmesg when the ethernet stops working:
    
    [12696.189484] r8152 6-1:1.0 enp10s0u1: Tx timeout
    [12702.333456] r8152 6-1:1.0 enp10s0u1: Tx timeout
    [12707.965422] r8152 6-1:1.0 enp10s0u1: Tx timeout
    
    This has been reported on Dell WD15 docks, Belkin USB-C Express Dock 3.1
    docks and with generic USB to ethernet dongles using the RTL8153
    chipsets. Some users have tried adding usbcore.quirks=0bda:8153:k to
    the kernel commandline and all users who have tried this report that
    this fixes this.
    
    Also note that we already have an existing NO_LPM quirk for the RTL8153
    used in the Microsoft Surface Dock (where it uses a different usb-id).
    
    This commit adds a NO_LPM quirk for the generic Realtek RTL8153
    0bda:8153 usb-id, fixing the Tx timeout errors on these devices.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=198931
    Cc: stable@vger.kernel.org
    Cc: russianneuromancer@ya.ru
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200313120708.100339-1-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9b5c04bc3943ccdb0353d4d0f31e329ae5c96ed
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Feb 5 19:26:33 2020 +0800

    USB: Disable LPM on WD19's Realtek Hub
    
    commit b63e48fb50e1ca71db301ca9082befa6f16c55c4 upstream.
    
    Realtek Hub (0bda:0x0487) used in Dell Dock WD19 sometimes drops off the
    bus when bringing underlying ports from U3 to U0.
    
    Disabling LPM on the hub during setting link state is not enough, so
    let's disable LPM completely for this hub.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200205112633.25995-3-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c90a11d342278cf06f7cea4ff40aca5721b9c821
Author: Sasha Levin <sashal@kernel.org>
Date:   Sun Mar 22 10:37:16 2020 -0400

    Revert "drm/fbdev: Fallback to non tiled mode if all tiles not present"
    
    [ Upstream commit f053c83ad5c88427644e06746bfddcefa409c27d ]
    
    This reverts commit f25c7a006cd1 ("drm/fbdev: Fallback to non tiled mode
    if all tiles not present"). The commit causes flip done timeouts in CI.
    
    Below are the sample errors thrown in logs:
    
    [IGT] core_getversion: executing
    [IGT] core_getversion: exiting, ret=0
    Setting dangerous option reset - tainting kernel
    drm:drm_atomic_helper_wait_for_dependencies] ERROR [CRTC:152:pipe B] flip_done timed out
    drm:drm_atomic_helper_wait_for_dependencies] ERROR [CONNECTOR:299:DP-2] flip_done timed out
    drm:drm_atomic_helper_wait_for_dependencies] ERROR [PLANE:92:plane 1B] flip_done timed out
    [drm:drm_atomic_helper_wait_for_flip_done] ERROR [CRTC:152:pipe B] flip_done timed out
    [drm:drm_atomic_helper_wait_for_dependencies] ERROR [CRTC:152:pipe B] flip_done timed out
    [drm:drm_atomic_helper_wait_for_dependencies] ERROR [CONNECTOR:299:DP-2] flip_done timed out
    [drm:drm_atomic_helper_wait_for_dependencies] ERROR [PLANE:92:plane 1B] flip_done timed out
    [drm:drm_atomic_helper_wait_for_flip_done] ERROR [CRTC:152:pipe B] flip_done timed out
    Console: switching to colour frame buffer device 480x135
    [drm:drm_atomic_helper_wait_for_dependencies] ERROR [CRTC:152:pipe B] flip_done timed out
    [drm:drm_atomic_helper_wait_for_dependencies] ERROR [CONNECTOR:299:DP-2] flip_done timed out
    
    Reverting the change for now to unblock CI execution.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Uma Shankar <uma.shankar@intel.com>
    Fixes: f25c7a006cd1 ("drm/fbdev: Fallback to non tiled mode if all tiles not present")
    Closes: https://gitlab.freedesktop.org/drm/intel/issues/6
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191123091840.32382-1-uma.shankar@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f982adfbc80414b4edf491d1e4558261e8d8edcc
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Wed Mar 11 11:53:09 2020 +0100

    binderfs: use refcount for binder control devices too
    
    [ Upstream commit 211b64e4b5b6bd5fdc19cd525c2cc9a90e6b0ec9 ]
    
    Binderfs binder-control devices are cleaned up via binderfs_evict_inode
    too() which will use refcount_dec_and_test(). However, we missed to set
    the refcount for binderfs binder-control devices and so we underflowed
    when the binderfs instance got unmounted. Pretty obvious oversight and
    should have been part of the more general UAF fix. The good news is that
    having test cases (suprisingly) helps.
    
    Technically, we could detect that we're about to cleanup the
    binder-control dentry in binderfs_evict_inode() and then simply clean it
    up. But that makes the assumption that the binder driver itself will
    never make use of a binderfs binder-control device after the binderfs
    instance it belongs to has been unmounted and the superblock for it been
    destroyed. While it is unlikely to ever come to this let's be on the
    safe side. Performance-wise this also really doesn't matter since the
    binder-control device is only every really when creating the binderfs
    filesystem or creating additional binder devices. Both operations are
    pretty rare.
    
    Fixes: f0fe2c0f050d ("binder: prevent UAF for binderfs devices II")
    Link: https://lore.kernel.org/r/CA+G9fYusdfg7PMfC9Xce-xLT7NiyKSbgojpK35GOm=Pf9jXXrA@mail.gmail.com
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Acked-by: Todd Kjos <tkjos@google.com>
    Link: https://lore.kernel.org/r/20200311105309.1742827-1-christian.brauner@ubuntu.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dff037622ed48aa443439e2219b5d3aa5d8db945
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Sat Mar 7 01:15:22 2020 +0300

    io_uring: fix lockup with timeouts
    
    [ Upstream commit f0e20b8943509d81200cef5e30af2adfddba0f5c ]
    
    There is a recipe to deadlock the kernel: submit a timeout sqe with a
    linked_timeout (e.g.  test_single_link_timeout_ception() from liburing),
    and SIGKILL the process.
    
    Then, io_kill_timeouts() takes @ctx->completion_lock, but the timeout
    isn't flagged with REQ_F_COMP_LOCKED, and will try to double grab it
    during io_put_free() to cancel the linked timeout. Probably, the same
    can happen with another io_kill_timeout() call site, that is
    io_commit_cqring().
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0159346800a2e2761732552c1c591b1def2909ae
Author: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
Date:   Fri Mar 6 23:13:11 2020 +0100

    parse-maintainers: Mark as executable
    
    [ Upstream commit 611d61f9ac99dc9e1494473fb90117a960a89dfa ]
    
    This makes the script more convenient to run.
    
    Signed-off-by: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b320bc2d596f3bd816d160860241c89041e171e
Author: Tycho Andersen <tycho@tycho.ws>
Date:   Sat Feb 8 08:18:17 2020 -0700

    riscv: fix seccomp reject syscall code path
    
    [ Upstream commit af33d2433b03d63ed31fcfda842f46676a5e1afc ]
    
    If secure_computing() rejected a system call, we were previously setting
    the system call number to -1, to indicate to later code that the syscall
    failed. However, if something (e.g. a user notification) was sleeping, and
    received a signal, we may set a0 to -ERESTARTSYS and re-try the system call
    again.
    
    In this case, seccomp "denies" the syscall (because of the signal), and we
    would set a7 to -1, thus losing the value of the system call we want to
    restart.
    
    Instead, let's return -1 from do_syscall_trace_enter() to indicate that the
    syscall was rejected, so we don't clobber the value in case of -ERESTARTSYS
    or whatever.
    
    This commit fixes the user_notification_signal seccomp selftest on riscv to
    no longer hang. That test expects the system call to be re-issued after the
    signal, and it wasn't due to the above bug. Now that it is, everything
    works normally.
    
    Note that in the ptrace (tracer) case, the tracer can set the register
    values to whatever they want, so we still need to keep the code that
    handles out-of-bounds syscalls. However, we can drop the comment.
    
    We can also drop syscall_set_nr(), since it is no longer used anywhere, and
    the code that re-loads the value in a7 because of it.
    
    Reported in: https://lore.kernel.org/bpf/CAEn-LTp=ss0Dfv6J00=rCAy+N78U2AmhqJNjfqjr2FDpPYjxEQ@mail.gmail.com/
    
    Reported-by: David Abdurachmanov <david.abdurachmanov@gmail.com>
    Signed-off-by: Tycho Andersen <tycho@tycho.ws>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 428292ec7ac83a2435f60f5375673005fd468883
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Tue Mar 3 14:14:23 2020 -0800

    xenbus: req->err should be updated before req->state
    
    [ Upstream commit 8130b9d5b5abf26f9927b487c15319a187775f34 ]
    
    This patch adds the barrier to guarantee that req->err is always updated
    before req->state.
    
    Otherwise, read_reply() would not return ERR_PTR(req->err) but
    req->body, when process_writes()->xb_write() is failed.
    
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Link: https://lore.kernel.org/r/20200303221423.21962-2-dongli.zhang@oracle.com
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb941a4fc7f4f8ad73c22098264d629ed78ff0eb
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Tue Mar 3 14:14:22 2020 -0800

    xenbus: req->body should be updated before req->state
    
    [ Upstream commit 1b6a51e86cce38cf4d48ce9c242120283ae2f603 ]
    
    The req->body should be updated before req->state is updated and the
    order should be guaranteed by a barrier.
    
    Otherwise, read_reply() might return req->body = NULL.
    
    Below is sample callstack when the issue is reproduced on purpose by
    reordering the updates of req->body and req->state and adding delay in
    code between updates of req->state and req->body.
    
    [   22.356105] general protection fault: 0000 [#1] SMP PTI
    [   22.361185] CPU: 2 PID: 52 Comm: xenwatch Not tainted 5.5.0xen+ #6
    [   22.366727] Hardware name: Xen HVM domU, BIOS ...
    [   22.372245] RIP: 0010:_parse_integer_fixup_radix+0x6/0x60
    ... ...
    [   22.392163] RSP: 0018:ffffb2d64023fdf0 EFLAGS: 00010246
    [   22.395933] RAX: 0000000000000000 RBX: 75746e7562755f6d RCX: 0000000000000000
    [   22.400871] RDX: 0000000000000000 RSI: ffffb2d64023fdfc RDI: 75746e7562755f6d
    [   22.405874] RBP: 0000000000000000 R08: 00000000000001e8 R09: 0000000000cdcdcd
    [   22.410945] R10: ffffb2d6402ffe00 R11: ffff9d95395eaeb0 R12: ffff9d9535935000
    [   22.417613] R13: ffff9d9526d4a000 R14: ffff9d9526f4f340 R15: ffff9d9537654000
    [   22.423726] FS:  0000000000000000(0000) GS:ffff9d953bc80000(0000) knlGS:0000000000000000
    [   22.429898] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   22.434342] CR2: 000000c4206a9000 CR3: 00000001ea3fc002 CR4: 00000000001606e0
    [   22.439645] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   22.444941] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   22.450342] Call Trace:
    [   22.452509]  simple_strtoull+0x27/0x70
    [   22.455572]  xenbus_transaction_start+0x31/0x50
    [   22.459104]  netback_changed+0x76c/0xcc1 [xen_netfront]
    [   22.463279]  ? find_watch+0x40/0x40
    [   22.466156]  xenwatch_thread+0xb4/0x150
    [   22.469309]  ? wait_woken+0x80/0x80
    [   22.472198]  kthread+0x10e/0x130
    [   22.474925]  ? kthread_park+0x80/0x80
    [   22.477946]  ret_from_fork+0x35/0x40
    [   22.480968] Modules linked in: xen_kbdfront xen_fbfront(+) xen_netfront xen_blkfront
    [   22.486783] ---[ end trace a9222030a747c3f7 ]---
    [   22.490424] RIP: 0010:_parse_integer_fixup_radix+0x6/0x60
    
    The virt_rmb() is added in the 'true' path of test_reply(). The "while"
    is changed to "do while" so that test_reply() is used as a read memory
    barrier.
    
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Link: https://lore.kernel.org/r/20200303221423.21962-1-dongli.zhang@oracle.com
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd6048c799f0f084b680a36dac501dcc2e387c8e
Author: Josip Pavic <Josip.Pavic@amd.com>
Date:   Fri Feb 21 12:26:19 2020 -0500

    drm/amd/display: fix dcc swath size calculations on dcn1
    
    [ Upstream commit a0275dfc82c9034eefbeffd556cca6dd239d7925 ]
    
    [Why]
    Swath sizes are being calculated incorrectly. The horizontal swath size
    should be the product of block height, viewport width, and bytes per
    element, but the calculation uses viewport height instead of width. The
    vertical swath size is similarly incorrectly calculated. The effect of
    this is that we report the wrong DCC caps.
    
    [How]
    Use viewport width in the horizontal swath size calculation and viewport
    height in the vertical swath size calculation.
    
    Signed-off-by: Josip Pavic <Josip.Pavic@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e369aa8ffca839ede8e2be01bfacaf0b63b3156e
Author: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
Date:   Thu Feb 20 11:16:14 2020 -0500

    drm/amd/display: Clear link settings on MST disable connector
    
    [ Upstream commit 5ac7fd2f597b88ee81f4748ee50cab06192a8dc3 ]
    
    [Why]
    If we have a single MST display and we disconnect it, we dont disable that
    link. This causes the old link settings to still exist
    
    Now on a replug for MST we think its a link loss and will try to reallocate
    mst payload which will fail, throwing warning below.
    
    [  129.374192] [drm] Failed to updateMST allocation table forpipe idx:0
    [  129.374206] ------------[ cut here ]------------
    [  129.374284] WARNING: CPU: 14 PID: 1710 at
    drivers/gpu/drm/amd/amdgpu/../dal-dev/dc/core/dc_link.c:3153
    dc_link_allocate_mst_payload+0x1f7/0x220 [amdgpu]
    
    [  129.374285] Modules linked in: amdgpu(OE) amd_iommu_v2 gpu_sched ttm
    drm_kms_helper drm fb_sys_fops syscopyarea sysfillrect sysimgblt
    binfmt_misc nls_iso8859_1 edac_mce_amd snd_hda_codec_realtek
    snd_hda_codec_generic ledtrig_audio kvm snd_hda_codec_hdmi snd_hda_intel
    snd_intel_nhlt snd_hda_codec irqbypass snd_hda_core snd_hwdep snd_pcm
    snd_seq_midi snd_seq_midi_event snd_rawmidi crct10dif_pclmul snd_seq
    crc32_pclmul ghash_clmulni_intel snd_seq_device snd_timer snd aesni_intel
    eeepc_wmi crypto_simd asus_wmi joydev cryptd sparse_keymap input_leds
    soundcore video glue_helper wmi_bmof mxm_wmi k10temp ccp mac_hid
    sch_fq_codel parport_pc ppdev lp parport ip_tables x_tables autofs4
    hid_generic usbhid hid igb i2c_algo_bit ahci dca i2c_piix4 libahci
    gpio_amdpt wmi gpio_generic
    
    [  129.374318] CPU: 14 PID: 1710 Comm: kworker/14:2 Tainted: G        W  OE     5.4.0-rc7bhawan+ #480
    [  129.374318] Hardware name: System manufacturer System Product Name/PRIME X370-PRO, BIOS 0515 03/30/2017
    [  129.374397] Workqueue: events dm_irq_work_func [amdgpu]
    [  129.374468] RIP: 0010:dc_link_allocate_mst_payload+0x1f7/0x220 [amdgpu]
    [  129.374470] Code: 52 20 e8 1c 63 ad f4 48 8b 5d d0 65 48 33 1c 25 28 00
    00 00 b8 01 00 00 00 75 16 48 8d 65 d8 5b 41 5c 41 5d 41 5e 41 5f 5d c3
    <0f> 0b e9 fa fe ff ff e8 ed 5b d6 f3 41 0f b6 b6 c4 02 00 00 48 c7
    [  129.374471] RSP: 0018:ffff9f9141e7fcc0 EFLAGS: 00010246
    [  129.374472] RAX: 0000000000000000 RBX: ffff91ef0762f800 RCX: 0000000000000000
    [  129.374473] RDX: 0000000000000005 RSI: ffffffffc0c4a988 RDI: 0000000000000004
    [  129.374474] RBP: ffff9f9141e7fd10 R08: 0000000000000005 R09: 0000000000000000
    [  129.374475] R10: 0000000000000002 R11: 0000000000000001 R12: ffff91eebd510c00
    [  129.374475] R13: ffff91eebd510e58 R14: ffff91ef052c01b8 R15: 0000000000000006
    [  129.374476] FS:  0000000000000000(0000) GS:ffff91ef0ef80000(0000) knlGS:0000000000000000
    [  129.374477] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  129.374478] CR2: 000055623ea01d50 CR3: 0000000408a8c000 CR4: 00000000003406e0
    [  129.374479] Call Trace:
    [  129.374550]  dc_link_reallocate_mst_payload+0x12e/0x150 [amdgpu]
    [  129.374617]  dc_link_handle_hpd_rx_irq+0x6d4/0x6e0 [amdgpu]
    [  129.374693]  handle_hpd_rx_irq+0x77/0x310 [amdgpu]
    [  129.374768]  dm_irq_work_func+0x53/0x70 [amdgpu]
    [  129.374774]  process_one_work+0x1fd/0x3f0
    [  129.374776]  worker_thread+0x255/0x410
    [  129.374778]  kthread+0x121/0x140
    [  129.374780]  ? process_one_work+0x3f0/0x3f0
    [  129.374781]  ? kthread_park+0x90/0x90
    [  129.374785]  ret_from_fork+0x22/0x40
    
    [How]
    when we disable MST we should clear the cur link settings (lane_count=0 is
    good enough). This will cause us to not reallocate payloads earlier than
    expected and not throw the warning
    
    Signed-off-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Reviewed-by: Hersen Wu <hersenxs.wu@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1baac0015218867969d8fdc4ae9f899457fb6b9c
Author: Yintian Tao <yttao@amd.com>
Date:   Fri Feb 28 14:24:42 2020 +0800

    drm/amdgpu: clean wptr on wb when gpu recovery
    
    [ Upstream commit 2ab7e274b86739f4ceed5d94b6879f2d07b2802f ]
    
    The TDR will be randomly failed due to compute ring
    test failure. If the compute ring wptr & 0x7ff(ring_buf_mask)
    is 0x100 then after map mqd the compute ring rptr will be
    synced with 0x100. And the ring test packet size is also 0x100.
    Then after invocation of amdgpu_ring_commit, the cp will not
    really handle the packet on the ring buffer because rptr is equal to wptr.
    
    Signed-off-by: Yintian Tao <yttao@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Monk Liu <Monk.Liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e04735cdf4c7ac5d3be912862b06c1e697bd82de
Author: Alexandre Ghiti <alex@ghiti.fr>
Date:   Mon Feb 17 00:28:47 2020 -0500

    riscv: Fix range looking for kernel image memblock
    
    [ Upstream commit a160eed4b783d7b250a32f7e5787c9867abc5686 ]
    
    When looking for the memblock where the kernel lives, we should check
    that the memory range associated to the memblock entirely comprises the
    kernel image and not only intersects with it.
    
    Signed-off-by: Alexandre Ghiti <alex@ghiti.fr>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90deb882c906e075acadbb3cc91ecf3783cc1ebf
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Wed Feb 12 19:34:24 2020 +0900

    riscv: Force flat memory model with no-mmu
    
    [ Upstream commit aa2734202acc506d09c8e641db4da161f902df27 ]
    
    Compilation errors trigger if ARCH_SPARSEMEM_ENABLE is enabled for
    a nommu kernel. Since the sparsemem model does not make sense anyway
    for the nommu case, do not allow selecting this option to always use
    the flatmem model.
    
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Reviewed-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a50f5264b26a30f6a28358d14481b762dc0513e0
Author: Aaro Koskinen <aaro.koskinen@nokia.com>
Date:   Wed Mar 4 13:17:40 2020 +0200

    spi: spi_register_controller(): free bus id on error paths
    
    [ Upstream commit f9981d4f50b475d7dbb70f3022b87a3c8bba9fd6 ]
    
    Some error paths leave the bus id allocated. As a result the IDR
    allocation will fail after a deferred probe. Fix by freeing the bus id
    always on error.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@nokia.com>
    Message-Id: <20200304111740.27915-1-aaro.koskinen@nokia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ab75b0342d2be5f5000a8a36604da04e686c1b3
Author: Olivier Moysan <olivier.moysan@st.com>
Date:   Wed Mar 4 11:24:06 2020 +0100

    ASoC: stm32: sai: manage rebind issue
    
    [ Upstream commit 0d6defc7e0e437a9fd53622f7fd85740f38d5693 ]
    
    The commit e894efef9ac7 ("ASoC: core: add support to card rebind")
    allows to rebind the sound card after a rebind of one of its component.
    With this commit, the sound card is actually rebound,
    but may be no more functional. The following problems have been seen
    with STM32 SAI driver.
    
    1) DMA channel is not requested:
    
    With the sound card rebind the simplified call sequence is:
    stm32_sai_sub_probe
            snd_soc_register_component
                    snd_soc_try_rebind_card
                            snd_soc_instantiate_card
            devm_snd_dmaengine_pcm_register
    
    The problem occurs because the pcm must be registered,
    before snd_soc_instantiate_card() is called.
    
    Modify SAI driver, to change the call sequence as follows:
    stm32_sai_sub_probe
            devm_snd_dmaengine_pcm_register
            snd_soc_register_component
                    snd_soc_try_rebind_card
    
    2) DMA channel is not released:
    
    dma_release_channel() is not called when
    devm_dmaengine_pcm_release() is executed.
    This occurs because SND_DMAENGINE_PCM_DRV_NAME component,
    has already been released through devm_component_release().
    
    devm_dmaengine_pcm_release() should be called before
    devm_component_release() to avoid this problem.
    
    Call snd_dmaengine_pcm_unregister() and snd_soc_unregister_component()
    explicitly from SAI driver, to have the right sequence.
    
    Signed-off-by: Olivier Moysan <olivier.moysan@st.com>
    Message-Id: <20200304102406.8093-1-olivier.moysan@st.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1a4ceb91d90f663fdc2e4a405fe8b577ad872e7
Author: Vincent Chen <vincent.chen@sifive.com>
Date:   Fri Feb 21 10:47:54 2020 +0800

    riscv: avoid the PIC offset of static percpu data in module beyond 2G limits
    
    [ Upstream commit 0cff8bff7af886af0923d5c91776cd51603e531f ]
    
    The compiler uses the PIC-relative method to access static variables
    instead of GOT when the code model is PIC. Therefore, the limitation of
    the access range from the instruction to the symbol address is +-2GB.
    Under this circumstance, the kernel cannot load a kernel module if this
    module has static per-CPU symbols declared by DEFINE_PER_CPU(). The reason
    is that kernel relocates the .data..percpu section of the kernel module to
    the end of kernel's .data..percpu. Hence, the distance between the per-CPU
    symbols and the instruction will exceed the 2GB limits. To solve this
    problem, the kernel should place the loaded module in the memory area
    [&_end-2G, VMALLOC_END].
    
    Signed-off-by: Vincent Chen <vincent.chen@sifive.com>
    Suggested-by: Alexandre Ghiti <alex@ghiti.fr>
    Suggested-by: Anup Patel <anup@brainfault.org>
    Tested-by: Alexandre Ghiti <alex@ghiti.fr>
    Tested-by: Carlos de Paula <me@carlosedp.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fbae540ed5af23bc0eb1ddf4ff32d493ee477b2
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Feb 28 18:11:53 2020 -0500

    dm integrity: use dm_bio_record and dm_bio_restore
    
    [ Upstream commit 248aa2645aa7fc9175d1107c2593cc90d4af5a4e ]
    
    In cases where dec_in_flight() has to requeue the integrity_bio_wait
    work to transfer the rest of the data, the bio's __bi_remaining might
    already have been decremented to 0, e.g.: if bio passed to underlying
    data device was split via blk_queue_split().
    
    Use dm_bio_{record,restore} rather than effectively open-coding them in
    dm-integrity -- these methods now manage __bi_remaining too.
    
    Depends-on: f7f0b057a9c1 ("dm bio record: save/restore bi_end_io and bi_integrity")
    Reported-by: Daniel Glöckner <dg@emlix.com>
    Suggested-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b86325bee43993c8abe0bd7986d55df098a40aa
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Feb 28 18:00:53 2020 -0500

    dm bio record: save/restore bi_end_io and bi_integrity
    
    [ Upstream commit 1b17159e52bb31f982f82a6278acd7fab1d3f67b ]
    
    Also, save/restore __bi_remaining in case the bio was used in a
    BIO_CHAIN (e.g. due to blk_queue_split).
    
    Suggested-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 467b43c8819b85454562d86a2c5013fd010e608c
Author: Daniel Axtens <dja@axtens.net>
Date:   Tue Feb 25 10:44:27 2020 -0800

    altera-stapl: altera_get_note: prevent write beyond end of 'key'
    
    [ Upstream commit 3745488e9d599916a0b40d45d3f30e3d4720288e ]
    
    altera_get_note is called from altera_init, where key is kzalloc(33).
    
    When the allocation functions are annotated to allow the compiler to see
    the sizes of objects, and with FORTIFY_SOURCE, we see:
    
    In file included from drivers/misc/altera-stapl/altera.c:14:0:
    In function ‘strlcpy’,
        inlined from ‘altera_init’ at drivers/misc/altera-stapl/altera.c:2189:5:
    include/linux/string.h:378:4: error: call to ‘__write_overflow’ declared with attribute error: detected write beyond size of object passed as 1st parameter
        __write_overflow();
        ^~~~~~~~~~~~~~~~~~
    
    That refers to this code in altera_get_note:
    
        if (key != NULL)
                strlcpy(key, &p[note_strings +
                                get_unaligned_be32(
                                &p[note_table + (8 * i)])],
                        length);
    
    The error triggers because the length of 'key' is 33, but the copy
    uses length supplied as the 'length' parameter, which is always
    256. Split the size parameter into key_len and val_len, and use the
    appropriate length depending on what is being copied.
    
    Detected by compiler error, only compile-tested.
    
    Cc: "Igor M. Liplianin" <liplianin@netup.ru>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Link: https://lore.kernel.org/r/20200120074344.504-2-dja@axtens.net
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/202002251042.D898E67AC@keescook
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 854354b65919f7caa1cf9b927d344bcc54c8a31f
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Sun Feb 23 14:02:56 2020 +0100

    ARM: bcm2835_defconfig: Explicitly restore CONFIG_DEBUG_FS
    
    [ Upstream commit 1bba60808404b873defa0f3560497eb2e8fe86b8 ]
    
    The commit 0e4a459f56c3 ("tracing: Remove unnecessary DEBUG_FS dependency")
    accidentally dropped the DEBUG FS support in bcm2835_defconfig. So
    restore the config as before the commit.
    
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Fixes: 0e4a459f56c3 ("tracing: Remove unnecessary DEBUG_FS dependency")
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54f10ea03eee3d60185421d77f39480f95eb38cd
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Sun Mar 1 19:18:19 2020 +0300

    io-wq: fix IO_WQ_WORK_NO_CANCEL cancellation
    
    [ Upstream commit fc04c39bae01a607454f7619665309870c60937a ]
    
    To cancel a work, io-wq sets IO_WQ_WORK_CANCEL and executes the
    callback. However, IO_WQ_WORK_NO_CANCEL works will just execute and may
    return next work, which will be ignored and lost.
    
    Cancel the whole link.
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cd298a88e812c7f46a9bd83637cb013adf6e7c6
Author: luanshi <zhangliguang@linux.alibaba.com>
Date:   Wed Feb 26 13:45:10 2020 +0800

    drivers/perf: arm_pmu_acpi: Fix incorrect checking of gicc pointer
    
    [ Upstream commit 3ba52ad55b533760a1f65836aa0ec9d35e36bb4f ]
    
    Fix bogus NULL checks on the return value of acpi_cpu_get_madt_gicc()
    by checking for a 0 'gicc->performance_interrupt' value instead.
    
    Signed-off-by: Liguang Zhang <zhangliguang@linux.alibaba.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbcacc9c06be2887dfee4c1af6707450171f52a7
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Tue Feb 25 20:56:43 2020 +0800

    drivers/perf: fsl_imx8_ddr: Correct the CLEAR bit definition
    
    [ Upstream commit 049d919168458ac54e7fad27cd156a958b042d2f ]
    
    When disabling a counter from ddr_perf_event_stop(), the counter value
    is reset to 0 at the same time.
    
    Preserve the counter value by performing a read-modify-write of the
    PMU register and clearing only the enable bit.
    
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79756d6e308837028f7144a950b20a2911127b26
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Feb 20 13:57:26 2020 +0100

    drm/exynos: hdmi: don't leak enable HDMI_EN regulator if probe fails
    
    [ Upstream commit 3b6a9b19ab652efac7ad4c392add6f1235019568 ]
    
    Move enabling and disabling HDMI_EN optional regulator to probe() function
    to keep track on the regulator status. This fixes following warning if
    probe() fails (for example when I2C DDC adapter cannot be yet gathered
    due to the missing driver). This fixes following warning observed on
    Arndale5250 board with multi_v7_defconfig:
    
    [drm] Failed to get ddc i2c adapter by node
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 214 at drivers/regulator/core.c:2051 _regulator_put+0x16c/0x184
    Modules linked in: ...
    CPU: 0 PID: 214 Comm: systemd-udevd Not tainted 5.6.0-rc2-next-20200219-00040-g38af1dfafdbb #7570
    Hardware name: Samsung Exynos (Flattened Device Tree)
    [<c0312258>] (unwind_backtrace) from [<c030cc10>] (show_stack+0x10/0x14)
    [<c030cc10>] (show_stack) from [<c0f0d3a0>] (dump_stack+0xcc/0xe0)
    [<c0f0d3a0>] (dump_stack) from [<c0346a58>] (__warn+0xe0/0xf8)
    [<c0346a58>] (__warn) from [<c0346b20>] (warn_slowpath_fmt+0xb0/0xb8)
    [<c0346b20>] (warn_slowpath_fmt) from [<c0893f58>] (_regulator_put+0x16c/0x184)
    [<c0893f58>] (_regulator_put) from [<c0893f8c>] (regulator_put+0x1c/0x2c)
    [<c0893f8c>] (regulator_put) from [<c09b2664>] (release_nodes+0x17c/0x200)
    [<c09b2664>] (release_nodes) from [<c09aebe8>] (really_probe+0x10c/0x350)
    [<c09aebe8>] (really_probe) from [<c09aefa8>] (driver_probe_device+0x60/0x1a0)
    [<c09aefa8>] (driver_probe_device) from [<c09af288>] (device_driver_attach+0x58/0x60)
    [<c09af288>] (device_driver_attach) from [<c09af310>] (__driver_attach+0x80/0xbc)
    [<c09af310>] (__driver_attach) from [<c09ace34>] (bus_for_each_dev+0x68/0xb4)
    [<c09ace34>] (bus_for_each_dev) from [<c09ae00c>] (bus_add_driver+0x130/0x1e8)
    [<c09ae00c>] (bus_add_driver) from [<c09afd98>] (driver_register+0x78/0x110)
    [<c09afd98>] (driver_register) from [<bf139558>] (exynos_drm_init+0xe8/0x11c [exynosdrm])
    [<bf139558>] (exynos_drm_init [exynosdrm]) from [<c0302fa8>] (do_one_initcall+0x50/0x220)
    [<c0302fa8>] (do_one_initcall) from [<c03dc02c>] (do_init_module+0x60/0x210)
    [<c03dc02c>] (do_init_module) from [<c03daf44>] (load_module+0x1c0c/0x2310)
    [<c03daf44>] (load_module) from [<c03db85c>] (sys_finit_module+0xac/0xbc)
    [<c03db85c>] (sys_finit_module) from [<c0301000>] (ret_fast_syscall+0x0/0x54)
    Exception stack(0xecca3fa8 to 0xecca3ff0)
    ...
    ---[ end trace 276c91214635905c ]---
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Andrzej Hajda <a.hajda@samsung.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fa949344585a061ac6e33432955f1e0d1f7a464
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Feb 20 13:30:12 2020 +0100

    drm/exynos: dsi: fix workaround for the legacy clock name
    
    [ Upstream commit c0fd99d659ba5582e09625c7a985d63fc2ca74b5 ]
    
    Writing to the built-in strings arrays doesn't work if driver is loaded
    as kernel module. This is also considered as a bad pattern. Fix this by
    adding a call to clk_get() with legacy clock name. This fixes following
    kernel oops if driver is loaded as module:
    
    Unable to handle kernel paging request at virtual address bf047978
     pgd = (ptrval)
     [bf047978] *pgd=59344811, *pte=5903c6df, *ppte=5903c65f
     Internal error: Oops: 80f [#1] SMP ARM
     Modules linked in: mc exynosdrm(+) analogix_dp rtc_s3c exynos_ppmu i2c_gpio
     CPU: 1 PID: 212 Comm: systemd-udevd Not tainted 5.6.0-rc2-next-20200219 #326
     videodev: Linux video capture interface: v2.00
     Hardware name: Samsung Exynos (Flattened Device Tree)
     PC is at exynos_dsi_probe+0x1f0/0x384 [exynosdrm]
     LR is at exynos_dsi_probe+0x1dc/0x384 [exynosdrm]
     ...
     Process systemd-udevd (pid: 212, stack limit = 0x(ptrval))
     ...
     [<bf03cf14>] (exynos_dsi_probe [exynosdrm]) from [<c09b1ca0>] (platform_drv_probe+0x6c/0xa4)
     [<c09b1ca0>] (platform_drv_probe) from [<c09afcb8>] (really_probe+0x210/0x350)
     [<c09afcb8>] (really_probe) from [<c09aff74>] (driver_probe_device+0x60/0x1a0)
     [<c09aff74>] (driver_probe_device) from [<c09b0254>] (device_driver_attach+0x58/0x60)
     [<c09b0254>] (device_driver_attach) from [<c09b02dc>] (__driver_attach+0x80/0xbc)
     [<c09b02dc>] (__driver_attach) from [<c09ade00>] (bus_for_each_dev+0x68/0xb4)
     [<c09ade00>] (bus_for_each_dev) from [<c09aefd8>] (bus_add_driver+0x130/0x1e8)
     [<c09aefd8>] (bus_add_driver) from [<c09b0d64>] (driver_register+0x78/0x110)
     [<c09b0d64>] (driver_register) from [<bf038558>] (exynos_drm_init+0xe8/0x11c [exynosdrm])
     [<bf038558>] (exynos_drm_init [exynosdrm]) from [<c0302fa8>] (do_one_initcall+0x50/0x220)
     [<c0302fa8>] (do_one_initcall) from [<c03dd02c>] (do_init_module+0x60/0x210)
     [<c03dd02c>] (do_init_module) from [<c03dbf44>] (load_module+0x1c0c/0x2310)
     [<c03dbf44>] (load_module) from [<c03dc85c>] (sys_finit_module+0xac/0xbc)
     [<c03dc85c>] (sys_finit_module) from [<c0301000>] (ret_fast_syscall+0x0/0x54)
     Exception stack(0xd979bfa8 to 0xd979bff0)
     ...
     ---[ end trace db16efe05faab470 ]---
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Andrzej Hajda <a.hajda@samsung.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a32cd1418c36024b01994dffe764c6f9778877c2
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Feb 27 08:06:37 2020 +0100

    drm/exynos: dsi: propagate error value and silence meaningless warning
    
    [ Upstream commit 0a9d1e3f3f038785ebc72d53f1c409d07f6b4ff5 ]
    
    Properly propagate error value from devm_regulator_bulk_get() and don't
    confuse user with meaningless warning about failure in getting regulators
    in case of deferred probe.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6970c8b64c4b7b70e7c9915cf689db74908545de
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Sun Feb 23 19:03:05 2020 +0100

    ARM: dts: bcm283x: Add missing properties to the PWR LED
    
    [ Upstream commit bff211bab301db890e38de872d43cbb459940daa ]
    
    This adds the missing properties to the PWR LED for the RPi 3 & 4 boards,
    which are already set for the other boards. Without them we will lose
    the LED state after suspend.
    
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Tested-by: Peter Robinson <pbrobinson@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c59eb3239010fad4041d9fa154f87199c5b23ee
Author: Thommy Jakobsson <thommyj@gmail.com>
Date:   Mon Feb 24 17:26:43 2020 +0100

    spi/zynqmp: remove entry that causes a cs glitch
    
    [ Upstream commit 5dd8304981ecffa77bb72b1c57c4be5dfe6cfae9 ]
    
    In the public interface for chipselect, there is always an entry
    commented as "Dummy generic FIFO entry" pushed down to the fifo right
    after the activate/deactivate command. The dummy entry is 0x0,
    irregardless if the intention was to activate or deactive the cs. This
    causes the cs line to glitch rather than beeing activated in the case
    when there was an activate command.
    
    This has been observed on oscilloscope, and have caused problems for at
    least one specific flash device type connected to the qspi port. After
    the change the glitch is gone and cs goes active when intended.
    
    The reason why this worked before (except for the glitch) was because
    when sending the actual data, the CS bits are once again set. Since
    most flashes uses mode 0, there is always a half clk period anyway for
    cs to clk active setup time. If someone would rely on timing from a
    chip_select call to a transfer_one, it would fail though.
    
    It is unknown why the dummy entry was there in the first place, git log
    seems to be of no help in this case. The reference manual gives no
    indication of the necessity of this. In fact the lower 8 bits are a
    setup (or hold in case of deactivate) time expressed in cycles. So this
    should not be needed to fulfill any setup/hold timings.
    
    Signed-off-by: Thommy Jakobsson <thommyj@gmail.com>
    Reviewed-by: Naga Sureshkumar Relli <naga.sureshkumar.relli@xilinx.com>
    Link: https://lore.kernel.org/r/20200224162643.29102-1-thommyj@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 547aa63591b9cc6fbe1138f300d61a1ccc4b49e3
Author: Evan Green <evgreen@chromium.org>
Date:   Tue Feb 11 14:37:00 2020 -0800

    spi: pxa2xx: Add CS control clock quirk
    
    [ Upstream commit 683f65ded66a9a7ff01ed7280804d2132ebfdf7e ]
    
    In some circumstances on Intel LPSS controllers, toggling the LPSS
    CS control register doesn't actually cause the CS line to toggle.
    This seems to be failure of dynamic clock gating that occurs after
    going through a suspend/resume transition, where the controller
    is sent through a reset transition. This ruins SPI transactions
    that either rely on delay_usecs, or toggle the CS line without
    sending data.
    
    Whenever CS is toggled, momentarily set the clock gating register
    to "Force On" to poke the controller into acting on CS.
    
    Signed-off-by: Rajat Jain <rajatja@google.com>
    Signed-off-by: Evan Green <evgreen@chromium.org>
    Link: https://lore.kernel.org/r/20200211223700.110252-1-rajatja@google.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e9f8d247716b35c3447db9367faa58786754f01
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Jan 28 12:11:47 2020 +0530

    ARM: dts: dra7: Add "dma-ranges" property to PCIe RC DT nodes
    
    [ Upstream commit 27f13774654ea6bd0b6fc9b97cce8d19e5735661 ]
    
    'dma-ranges' in a PCI bridge node does correctly set dma masks for PCI
    devices not described in the DT. Certain DRA7 platforms (e.g., DRA76)
    has RAM above 32-bit boundary (accessible with LPAE config) though the
    PCIe bridge will be able to access only 32-bits. Add 'dma-ranges'
    property in PCIe RC DT nodes to indicate the host bridge can access
    only 32 bits.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b033d9a38ab4450a13cc471a62364edf8ec059da
Author: Steve French <stfrench@microsoft.com>
Date:   Wed Feb 19 23:59:32 2020 -0600

    cifs: add missing mount option to /proc/mounts
    
    [ Upstream commit ec57010acd03428a749d2600bf09bd537eaae993 ]
    
    We were not displaying the mount option "signloosely" in /proc/mounts
    for cifs mounts which some users found confusing recently
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f620dd9f2c5c4993945bd94fb3e60eaaf1baf9ac
Author: Paulo Alcantara (SUSE) <pc@cjr.nz>
Date:   Thu Feb 20 19:49:35 2020 -0300

    cifs: fix potential mismatch of UNC paths
    
    [ Upstream commit 154255233830e1e4dd0d99ac929a5dce588c0b81 ]
    
    Ensure that full_path is an UNC path that contains '\\' as delimiter,
    which is required by cifs_build_devname().
    
    The build_path_from_dentry_optional_prefix() function may return a
    path with '/' as delimiter when using SMB1 UNIX extensions, for
    example.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Acked-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d3f814c8a0f7488225985bf160890a7525ce8bf
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Feb 20 17:01:32 2020 +0530

    powerpc: Include .BTF section
    
    [ Upstream commit cb0cc635c7a9fa8a3a0f75d4d896721819c63add ]
    
    Selecting CONFIG_DEBUG_INFO_BTF results in the below warning from ld:
      ld: warning: orphan section `.BTF' from `.btf.vmlinux.bin.o' being placed in section `.BTF'
    
    Include .BTF section in vmlinux explicitly to fix the same.
    
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200220113132.857132-1-naveen.n.rao@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94b248d0407c103786631cb825c0234d275fb7ce
Author: Yuji Sasaki <sasakiy@chromium.org>
Date:   Fri Feb 14 13:13:40 2020 +0530

    spi: qup: call spi_qup_pm_resume_runtime before suspending
    
    [ Upstream commit 136b5cd2e2f97581ae560cff0db2a3b5369112da ]
    
    spi_qup_suspend() will cause synchronous external abort when
    runtime suspend is enabled and applied, as it tries to
    access SPI controller register while clock is already disabled
    in spi_qup_pm_suspend_runtime().
    
    Signed-off-by: Yuji sasaki <sasakiy@chromium.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20200214074340.2286170-1-vkoul@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8caf7c2d7093d7e67ae994fd23d5863340885d9b
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Wed Feb 19 18:21:26 2020 +0200

    ARM: dts: dra7-l4: mark timer13-16 as pwm capable
    
    [ Upstream commit 00a39c92c8ab94727f021297d1748531af113fcd ]
    
    DMTimers 13 - 16 are PWM capable and also can be used for CPTS input
    signals generation. Hence, mark them as "ti,timer-pwm".
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c9f046a34cfa1bb01448f0dc9052766e430e177
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Fri Feb 14 21:08:01 2020 +0200

    phy: ti: gmii-sel: do not fail in case of gmii
    
    [ Upstream commit 58aa7729310db04ffcc022c98002dd8fcb486c58 ]
    
    The "gmii" PHY interface mode is supported on TI AM335x/437x/5xx SoCs, so
    don't fail if it's selected.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d43b887d9aa2458695a8356f5f76aa4b28c51bd6
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Fri Feb 14 21:08:00 2020 +0200

    phy: ti: gmii-sel: fix set of copy-paste errors
    
    [ Upstream commit eefed634eb61e4094b9fb8183cb8d43b26838517 ]
    
    - under PHY_INTERFACE_MODE_MII the 'mode' func parameter is assigned
    instead of 'gmii_sel_mode' and it's working only because the default value
    'gmii_sel_mode' is set to 0.
    
    - console outputs use 'rgmii_id' and 'mode' values to print PHY mode
    instead of using 'submode' value which is representing PHY interface mode
    now.
    
    This patch fixes above two cases.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b37dc36baa67f8534e3371d9ec8e89ef9f7cfe8b
Author: Sean Paul <seanpaul@chromium.org>
Date:   Thu Jan 30 14:24:55 2020 -0500

    drm/mediatek: Ensure the cursor plane is on top of other overlays
    
    [ Upstream commit 26d696192aa5f4fe9119d6d23f90ed535053abca ]
    
    Currently the cursor is placed on the first overlay plane, which means
    it will be at the bottom of the stack when the hw does the compositing
    with anything other than primary plane. Since mtk doesn't support plane
    zpos, change the cursor location to the top-most plane.
    
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48c04919f8f5b53c1ee08ac90feb330e4ba34df1
Author: Evan Benn <evanbenn@chromium.org>
Date:   Fri Feb 7 15:23:51 2020 +1100

    drm/mediatek: Find the cursor plane instead of hard coding it
    
    [ Upstream commit 318caac7c81cdf5806df30c3d72385659a5f0f53 ]
    
    The cursor and primary planes were hard coded.
    Now search for them for passing to drm_crtc_init_with_planes
    
    Signed-off-by: Evan Benn <evanbenn@chromium.org>
    Reviewed-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f284b482342f3e2385cf564cdc09dd9dbc7c8909
Author: Vignesh Raghavendra <vigneshr@ti.com>
Date:   Tue Feb 4 18:18:16 2020 +0530

    spi: spi-omap2-mcspi: Support probe deferral for DMA channels
    
    [ Upstream commit 32f2fc5dc3992b4b60cc6b1a6a31be605cc9c3a2 ]
    
    dma_request_channel() can return -EPROBE_DEFER, if DMA driver is not
    ready. Currently driver just falls back to PIO mode on probe deferral.
    Fix this by requesting all required channels during probe and
    propagating EPROBE_DEFER error code.
    
    Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20200204124816.16735-3-vigneshr@ti.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a42cea67491cedecaed7bfdf4e76ddce581f1fb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 18 07:52:21 2020 -0400

    locks: reinstate locks_delete_block optimization
    
    [ Upstream commit dcf23ac3e846ca0cf626c155a0e3fcbbcf4fae8a ]
    
    There is measurable performance impact in some synthetic tests due to
    commit 6d390e4b5d48 (locks: fix a potential use-after-free problem when
    wakeup a waiter). Fix the race condition instead by clearing the
    fl_blocker pointer after the wake_up, using explicit acquire/release
    semantics.
    
    This does mean that we can no longer use the clearing of fl_blocker as
    the wait condition, so switch the waiters over to checking whether the
    fl_blocked_member list_head is empty.
    
    Reviewed-by: yangerkun <yangerkun@huawei.com>
    Reviewed-by: NeilBrown <neilb@suse.de>
    Fixes: 6d390e4b5d48 (locks: fix a potential use-after-free problem when wakeup a waiter)
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e62fb2c5d44e82ee7fae8c7fe946c7116489281
Author: yangerkun <yangerkun@huawei.com>
Date:   Wed Mar 4 15:25:56 2020 +0800

    locks: fix a potential use-after-free problem when wakeup a waiter
    
    [ Upstream commit 6d390e4b5d48ec03bb87e63cf0a2bff5f4e116da ]
    
    '16306a61d3b7 ("fs/locks: always delete_block after waiting.")' add the
    logic to check waiter->fl_blocker without blocked_lock_lock. And it will
    trigger a UAF when we try to wakeup some waiter：
    
    Thread 1 has create a write flock a on file, and now thread 2 try to
    unlock and delete flock a, thread 3 try to add flock b on the same file.
    
    Thread2                         Thread3
                                    flock syscall(create flock b)
                                    ...flock_lock_inode_wait
                                        flock_lock_inode(will insert
                                        our fl_blocked_member list
                                        to flock a's fl_blocked_requests)
                                       sleep
    flock syscall(unlock)
    ...flock_lock_inode_wait
        locks_delete_lock_ctx
        ...__locks_wake_up_blocks
            __locks_delete_blocks(
            b->fl_blocker = NULL)
            ...
                                       break by a signal
                                       locks_delete_block
                                        b->fl_blocker == NULL &&
                                        list_empty(&b->fl_blocked_requests)
                                        success, return directly
                                     locks_free_lock b
            wake_up(&b->fl_waiter)
            trigger UAF
    
    Fix it by remove this logic, and this patch may also fix CVE-2019-19769.
    
    Cc: stable@vger.kernel.org
    Fixes: 16306a61d3b7 ("fs/locks: always delete_block after waiting.")
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
