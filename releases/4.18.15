commit 2724bf10255a5bd0fe578b4a4c7a0f7ab15f73cd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 18 09:18:20 2018 +0200

    Linux 4.18.15

commit 4a15f8a1de5912592045af0d30d1800f866837e3
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Thu Oct 4 14:51:11 2018 +1000

    KVM: PPC: Book3S HV: Avoid crash from THP collapse during radix page fault
    
    commit 6579804c431712d56956a63b1a01509441cc6800 upstream.
    
    Commit 71d29f43b633 ("KVM: PPC: Book3S HV: Don't use compound_order to
    determine host mapping size", 2018-09-11) added a call to
    __find_linux_pte() and a dereference of the returned PTE pointer to the
    radix page fault path in the common case where the page is normal
    system memory.  Previously, __find_linux_pte() was only called for
    mappings to physical addresses which don't have a page struct (e.g.
    memory-mapped I/O) or where the page struct is marked as reserved
    memory.
    
    This exposes us to the possibility that the returned PTE pointer
    could be NULL, for example in the case of a concurrent THP collapse
    operation.  Dereferencing the returned NULL pointer causes a host
    crash.
    
    To fix this, we check for NULL, and if it is NULL, we retry the
    operation by returning to the guest, with the expectation that it
    will generate the same page fault again (unless of course it has
    been fixed up by another CPU in the meantime).
    
    Fixes: 71d29f43b633 ("KVM: PPC: Book3S HV: Don't use compound_order to determine host mapping size")
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 726c11216e33f06762349153a0f4e0111dce869b
Author: Edgar Cherkasov <echerkasov@dev.rtsoft.ru>
Date:   Thu Sep 27 11:56:03 2018 +0300

    i2c: i2c-scmi: fix for i2c_smbus_write_block_data
    
    commit 08d9db00fe0e300d6df976e6c294f974988226dd upstream.
    
    The i2c-scmi driver crashes when the SMBus Write Block transaction is
    executed:
    
    WARNING: CPU: 9 PID: 2194 at mm/page_alloc.c:3931 __alloc_pages_slowpath+0x9db/0xec0
     Call Trace:
      ? get_page_from_freelist+0x49d/0x11f0
      ? alloc_pages_current+0x6a/0xe0
      ? new_slab+0x499/0x690
      __alloc_pages_nodemask+0x265/0x280
      alloc_pages_current+0x6a/0xe0
      kmalloc_order+0x18/0x40
      kmalloc_order_trace+0x24/0xb0
      ? acpi_ut_allocate_object_desc_dbg+0x62/0x10c
      __kmalloc+0x203/0x220
      acpi_os_allocate_zeroed+0x34/0x36
      acpi_ut_copy_eobject_to_iobject+0x266/0x31e
      acpi_evaluate_object+0x166/0x3b2
      acpi_smbus_cmi_access+0x144/0x530 [i2c_scmi]
      i2c_smbus_xfer+0xda/0x370
      i2cdev_ioctl_smbus+0x1bd/0x270
      i2cdev_ioctl+0xaa/0x250
      do_vfs_ioctl+0xa4/0x600
      SyS_ioctl+0x79/0x90
      do_syscall_64+0x73/0x130
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    ACPI Error: Evaluating _SBW: 4 (20170831/smbus_cmi-185)
    
    This problem occurs because the length of ACPI Buffer object is not
    defined/initialized in the code before a corresponding ACPI method is
    called. The obvious patch below fixes this issue.
    
    Signed-off-by: Edgar Cherkasov <echerkasov@dev.rtsoft.ru>
    Acked-by: Viktor Krasnov <vkrasnov@dev.rtsoft.ru>
    Acked-by: Michael Brunner <Michael.Brunner@kontron.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a249cdf8fc74b464fdbdbabd4d06e15a22ae22a2
Author: Jan Kara <jack@suse.cz>
Date:   Tue Oct 9 12:19:17 2018 +0200

    mm: Preserve _PAGE_DEVMAP across mprotect() calls
    
    commit 4628a64591e6cee181237060961e98c615c33966 upstream.
    
    Currently _PAGE_DEVMAP bit is not preserved in mprotect(2) calls. As a
    result we will see warnings such as:
    
    BUG: Bad page map in process JobWrk0013  pte:800001803875ea25 pmd:7624381067
    addr:00007f0930720000 vm_flags:280000f9 anon_vma:          (null) mapping:ffff97f2384056f0 index:0
    file:457-000000fe00000030-00000009-000000ca-00000001_2001.fileblock fault:xfs_filemap_fault [xfs] mmap:xfs_file_mmap [xfs] readpage:          (null)
    CPU: 3 PID: 15848 Comm: JobWrk0013 Tainted: G        W          4.12.14-2.g7573215-default #1 SLE12-SP4 (unreleased)
    Hardware name: Intel Corporation S2600WFD/S2600WFD, BIOS SE5C620.86B.01.00.0833.051120182255 05/11/2018
    Call Trace:
     dump_stack+0x5a/0x75
     print_bad_pte+0x217/0x2c0
     ? enqueue_task_fair+0x76/0x9f0
     _vm_normal_page+0xe5/0x100
     zap_pte_range+0x148/0x740
     unmap_page_range+0x39a/0x4b0
     unmap_vmas+0x42/0x90
     unmap_region+0x99/0xf0
     ? vma_gap_callbacks_rotate+0x1a/0x20
     do_munmap+0x255/0x3a0
     vm_munmap+0x54/0x80
     SyS_munmap+0x1d/0x30
     do_syscall_64+0x74/0x150
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    ...
    
    when mprotect(2) gets used on DAX mappings. Also there is a wide variety
    of other failures that can result from the missing _PAGE_DEVMAP flag
    when the area gets used by get_user_pages() later.
    
    Fix the problem by including _PAGE_DEVMAP in a set of flags that get
    preserved by mprotect(2).
    
    Fixes: 69660fd797c3 ("x86, mm: introduce _PAGE_DEVMAP")
    Fixes: ebd31197931d ("powerpc/mm: Add devmap support for ppc64")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7230bb7c98c10e8b7d44f2615003cad2af7d4b53
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Sat Oct 6 10:56:11 2018 -0700

    filesystem-dax: Fix dax_layout_busy_page() livelock
    
    commit d7782145e1ad537df4ce74e58c50f1f732a1462d upstream.
    
    In the presence of multi-order entries the typical
    pagevec_lookup_entries() pattern may loop forever:
    
            while (index < end && pagevec_lookup_entries(&pvec, mapping, index,
                                    min(end - index, (pgoff_t)PAGEVEC_SIZE),
                                    indices)) {
                    ...
                    for (i = 0; i < pagevec_count(&pvec); i++) {
                            index = indices[i];
                            ...
                    }
                    index++; /* BUG */
            }
    
    The loop updates 'index' for each index found and then increments to the
    next possible page to continue the lookup. However, if the last entry in
    the pagevec is multi-order then the next possible page index is more
    than 1 page away. Fix this locally for the filesystem-dax case by
    checking for dax-multi-order entries. Going forward new users of
    multi-order entries need to be similarly careful, or we need a generic
    way to report the page increment in the radix iterator.
    
    Fixes: 5fac7408d828 ("mm, fs, dax: handle layout changes to pinned dax...")
    Cc: <stable@vger.kernel.org>
    Cc: Ross Zwisler <zwisler@kernel.org>
    Cc: Matthew Wilcox <willy@infradead.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c3bb028a3b7d1e9bc710995b5b9bdbd6b6b7a66
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Oct 12 21:34:36 2018 -0700

    mm/thp: fix call to mmu_notifier in set_pmd_migration_entry() v2
    
    commit bfba8e5cf28f413aa05571af493871d74438979f upstream.
    
    Inside set_pmd_migration_entry() we are holding page table locks and thus
    we can not sleep so we can not call invalidate_range_start/end()
    
    So remove call to mmu_notifier_invalidate_range_start/end() because they
    are call inside the function calling set_pmd_migration_entry() (see
    try_to_unmap_one()).
    
    Link: http://lkml.kernel.org/r/20181012181056.7864-1-jglisse@redhat.com
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reported-by: Andrea Arcangeli <aarcange@redhat.com>
    Reviewed-by: Zi Yan <zi.yan@cs.rutgers.edu>
    Acked-by: Michal Hocko <mhocko@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Anshuman Khandual <khandual@linux.vnet.ibm.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: David Nellans <dnellans@nvidia.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffa4d6624e1abcbd6925412c1bbe70d7acf6f75c
Author: Jann Horn <jannh@google.com>
Date:   Fri Oct 12 21:34:32 2018 -0700

    mm/mmap.c: don't clobber partially overlapping VMA with MAP_FIXED_NOREPLACE
    
    commit 7aa867dd89526e9cfd9714d8b9b587c016eaea34 upstream.
    
    Daniel Micay reports that attempting to use MAP_FIXED_NOREPLACE in an
    application causes that application to randomly crash.  The existing check
    for handling MAP_FIXED_NOREPLACE looks up the first VMA that either
    overlaps or follows the requested region, and then bails out if that VMA
    overlaps *the start* of the requested region.  It does not bail out if the
    VMA only overlaps another part of the requested region.
    
    Fix it by checking that the found VMA only starts at or after the end of
    the requested region, in which case there is no overlap.
    
    Test case:
    
    user@debian:~$ cat mmap_fixed_simple.c
    #include <sys/mman.h>
    #include <errno.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    
    #ifndef MAP_FIXED_NOREPLACE
    #define MAP_FIXED_NOREPLACE 0x100000
    #endif
    
    int main(void) {
      char *p;
    
      errno = 0;
      p = mmap((void*)0x10001000, 0x4000, PROT_NONE,
    MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED_NOREPLACE, -1, 0);
      printf("p1=%p err=%m\n", p);
    
      errno = 0;
      p = mmap((void*)0x10000000, 0x2000, PROT_READ,
    MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED_NOREPLACE, -1, 0);
      printf("p2=%p err=%m\n", p);
    
      char cmd[100];
      sprintf(cmd, "cat /proc/%d/maps", getpid());
      system(cmd);
    
      return 0;
    }
    user@debian:~$ gcc -o mmap_fixed_simple mmap_fixed_simple.c
    user@debian:~$ ./mmap_fixed_simple
    p1=0x10001000 err=Success
    p2=0x10000000 err=Success
    10000000-10002000 r--p 00000000 00:00 0
    10002000-10005000 ---p 00000000 00:00 0
    564a9a06f000-564a9a070000 r-xp 00000000 fe:01 264004
      /home/user/mmap_fixed_simple
    564a9a26f000-564a9a270000 r--p 00000000 fe:01 264004
      /home/user/mmap_fixed_simple
    564a9a270000-564a9a271000 rw-p 00001000 fe:01 264004
      /home/user/mmap_fixed_simple
    564a9a54a000-564a9a56b000 rw-p 00000000 00:00 0                          [heap]
    7f8eba447000-7f8eba5dc000 r-xp 00000000 fe:01 405885
      /lib/x86_64-linux-gnu/libc-2.24.so
    7f8eba5dc000-7f8eba7dc000 ---p 00195000 fe:01 405885
      /lib/x86_64-linux-gnu/libc-2.24.so
    7f8eba7dc000-7f8eba7e0000 r--p 00195000 fe:01 405885
      /lib/x86_64-linux-gnu/libc-2.24.so
    7f8eba7e0000-7f8eba7e2000 rw-p 00199000 fe:01 405885
      /lib/x86_64-linux-gnu/libc-2.24.so
    7f8eba7e2000-7f8eba7e6000 rw-p 00000000 00:00 0
    7f8eba7e6000-7f8eba809000 r-xp 00000000 fe:01 405876
      /lib/x86_64-linux-gnu/ld-2.24.so
    7f8eba9e9000-7f8eba9eb000 rw-p 00000000 00:00 0
    7f8ebaa06000-7f8ebaa09000 rw-p 00000000 00:00 0
    7f8ebaa09000-7f8ebaa0a000 r--p 00023000 fe:01 405876
      /lib/x86_64-linux-gnu/ld-2.24.so
    7f8ebaa0a000-7f8ebaa0b000 rw-p 00024000 fe:01 405876
      /lib/x86_64-linux-gnu/ld-2.24.so
    7f8ebaa0b000-7f8ebaa0c000 rw-p 00000000 00:00 0
    7ffcc99fa000-7ffcc9a1b000 rw-p 00000000 00:00 0                          [stack]
    7ffcc9b44000-7ffcc9b47000 r--p 00000000 00:00 0                          [vvar]
    7ffcc9b47000-7ffcc9b49000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0
      [vsyscall]
    user@debian:~$ uname -a
    Linux debian 4.19.0-rc6+ #181 SMP Wed Oct 3 23:43:42 CEST 2018 x86_64 GNU/Linux
    user@debian:~$
    
    As you can see, the first page of the mapping at 0x10001000 was clobbered.
    
    Link: http://lkml.kernel.org/r/20181010152736.99475-1-jannh@google.com
    Fixes: a4ff8e8620d3 ("mm: introduce MAP_FIXED_NOREPLACE")
    Signed-off-by: Jann Horn <jannh@google.com>
    Reported-by: Daniel Micay <danielmicay@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: John Hubbard <jhubbard@nvidia.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53abe5164894259aa19a251a447843177a0aafa7
Author: Will Deacon <will@kernel.org>
Date:   Fri Oct 5 13:24:36 2018 +0100

    arm64: perf: Reject stand-alone CHAIN events for PMUv3
    
    commit ca2b497253ad01c80061a1f3ee9eb91b5d54a849 upstream.
    
    It doesn't make sense for a perf event to be configured as a CHAIN event
    in isolation, so extend the arm_pmu structure with a ->filter_match()
    function to allow the backend PMU implementation to reject CHAIN events
    early.
    
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59d9c7cba4bae5998de7b0b6c95c1d8dc3493956
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Tue Oct 2 10:06:46 2018 +0200

    pinctrl: mcp23s08: fix irq and irqchip setup order
    
    commit f259f896f2348f0302f6f88d4382378cf9d23a7e upstream.
    
    Since 'commit 02e389e63e35 ("pinctrl: mcp23s08: fix irq setup order")' the
    irq request isn't the last devm_* allocation. Without a deeper look at
    the irq and testing this isn't a good solution. Since this driver relies
    on the devm mechanism, requesting a interrupt should be the last thing
    to avoid memory corruptions during unbinding.
    
    'Commit 02e389e63e35 ("pinctrl: mcp23s08: fix irq setup order")' fixed the
    order for the interrupt-controller use case only. The
    mcp23s08_irq_setup() must be split into two to fix it for the
    interrupt-controller use case and to register the irq at last. So the
    irq will be freed first during unbind.
    
    Cc: stable@vger.kernel.org
    Cc: Jan Kundrát <jan.kundrat@cesnet.cz>
    Cc: Dmitry Mastykin <mastichi@gmail.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Fixes: 82039d244f87 ("pinctrl: mcp23s08: add pinconf support")
    Fixes: 02e389e63e35 ("pinctrl: mcp23s08: fix irq setup order")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Tested-by: Phil Reid <preid@electromag.com.au>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3df1331f63cd4cf5de66ca5a46ec61edacbe63e5
Author: Chris Boot <bootc@bootc.net>
Date:   Mon Oct 8 17:07:30 2018 +0200

    mmc: block: avoid multiblock reads for the last sector in SPI mode
    
    commit 41591b38f5f8f78344954b68582b5f00e56ffe61 upstream.
    
    On some SD cards over SPI, reading with the multiblock read command the last
    sector will leave the card in a bad state.
    
    Remove last sectors from the multiblock reading cmd.
    
    Signed-off-by: Chris Boot <bootc@bootc.net>
    Signed-off-by: Clément Péron <peron.clem@gmail.com>
    Cc: stable@vger.kernel.org # v4.10+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7088776eb06a8000c1a6360ccd47d6925ad0120d
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Sep 14 16:44:03 2018 -0400

    drm/nouveau/drm/nouveau: Grab runtime PM ref in nv50_mstc_detect()
    
    commit e46368cf77f2cb6304c51d9ff5f147cfb7dc0074 upstream.
    
    While we currently grab a runtime PM ref in nouveau's normal connector
    detection code, we apparently don't do this for MST. This means if we're
    in a scenario where the GPU is suspended and userspace attempts to do a
    connector probe on an MSTC connector, the probe will fail entirely due
    to the DP aux channel and GPU not being woken up:
    
    [  316.633489] nouveau 0000:01:00.0: i2c: aux 000a: begin idle timeout ffffffff
    [  316.635713] nouveau 0000:01:00.0: i2c: aux 000a: begin idle timeout ffffffff
    [  316.637785] nouveau 0000:01:00.0: i2c: aux 000a: begin idle timeout ffffffff
    ...
    
    So, grab a runtime PM ref here.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca45da09bc32fd1241fde1fa1e3b30dde48823e1
Author: Ramses Ramírez <ramzeto@gmail.com>
Date:   Fri Sep 28 16:59:26 2018 -0700

    Input: xpad - add support for Xbox1 PDP Camo series gamepad
    
    commit 9735082a7cbae572c2eabdc45acecc8c9fa0759b upstream.
    
    The "Xbox One PDP Wired Controller - Camo series" has a different
    product-id than the regular PDP controller and the PDP stealth series,
    but it uses the same initialization sequence. This patch adds the
    product-id of the camo series to the structures that handle the other
    PDP Xbox One controllers.
    
    Signed-off-by: Ramses Ramírez <ramzeto@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8408e8fc72078248b2cb87043217b46fcf56147
Author: Tejun Heo <tj@kernel.org>
Date:   Thu Oct 4 13:28:08 2018 -0700

    cgroup: Fix dom_cgrp propagation when enabling threaded mode
    
    commit 479adb89a97b0a33e5a9d702119872cc82ca21aa upstream.
    
    A cgroup which is already a threaded domain may be converted into a
    threaded cgroup if the prerequisite conditions are met.  When this
    happens, all threaded descendant should also have their ->dom_cgrp
    updated to the new threaded domain cgroup.  Unfortunately, this
    propagation was missing leading to the following failure.
    
      # cd /sys/fs/cgroup/unified
      # cat cgroup.subtree_control    # show that no controllers are enabled
    
      # mkdir -p mycgrp/a/b/c
      # echo threaded > mycgrp/a/b/cgroup.type
    
      At this point, the hierarchy looks as follows:
    
          mycgrp [d]
              a [dt]
                  b [t]
                      c [inv]
    
      Now let's make node "a" threaded (and thus "mycgrp" s made "domain threaded"):
    
      # echo threaded > mycgrp/a/cgroup.type
    
      By this point, we now have a hierarchy that looks as follows:
    
          mycgrp [dt]
              a [t]
                  b [t]
                      c [inv]
    
      But, when we try to convert the node "c" from "domain invalid" to
      "threaded", we get ENOTSUP on the write():
    
      # echo threaded > mycgrp/a/b/c/cgroup.type
      sh: echo: write error: Operation not supported
    
    This patch fixes the problem by
    
    * Moving the opencoded ->dom_cgrp save and restoration in
      cgroup_enable_threaded() into cgroup_{save|restore}_control() so
      that mulitple cgroups can be handled.
    
    * Updating all threaded descendants' ->dom_cgrp to point to the new
      dom_cgrp when enabling threaded mode.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-and-tested-by: "Michael Kerrisk (man-pages)" <mtk.manpages@gmail.com>
    Reported-by: Amin Jamali <ajamali@pivotal.io>
    Reported-by: Joao De Almeida Pereira <jpereira@pivotal.io>
    Link: https://lore.kernel.org/r/CAKgNAkhHYCMn74TCNiMJ=ccLd7DcmXSbvw3CbZ1YREeG7iJM5g@mail.gmail.com
    Fixes: 454000adaa2a ("cgroup: introduce cgroup->dom_cgrp and threaded css_set handling")
    Cc: stable@vger.kernel.org # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 012e6bceab53ecfebc4107e83ac3a69cde00bbfd
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Thu Oct 11 11:45:30 2018 +0900

    dm linear: fix linear_end_io conditional definition
    
    commit 118aa47c7072bce05fc39bd40a1c0a90caed72ab upstream.
    
    The dm-linear target is independent of the dm-zoned target. For code
    requiring support for zoned block devices, use CONFIG_BLK_DEV_ZONED
    instead of CONFIG_DM_ZONED.
    
    While at it, similarly to dm linear, also enable the DM_TARGET_ZONED_HM
    feature in dm-flakey only if CONFIG_BLK_DEV_ZONED is defined.
    
    Fixes: beb9caac211c1 ("dm linear: eliminate linear_end_io call if CONFIG_DM_ZONED disabled")
    Fixes: 0be12c1c7fce7 ("dm linear: add support for zoned block devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 996a427d8683754f03541bd9aeb5fe22ac0da90c
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Wed Oct 10 12:01:55 2018 -0400

    dm linear: eliminate linear_end_io call if CONFIG_DM_ZONED disabled
    
    commit beb9caac211c1be1bc118bb62d5cf09c4107e6a5 upstream.
    
    It is best to avoid any extra overhead associated with bio completion.
    DM core will indirectly call a DM target's .end_io if it is defined.
    In the case of DM linear, there is no need to do so (for every bio that
    completes) if CONFIG_DM_ZONED is not enabled.
    
    Avoiding an extra indirect call for every bio completion is very
    important for ensuring DM linear doesn't incur more overhead that
    further widens the performance gap between dm-linear and raw block
    devices.
    
    Fixes: 0be12c1c7fce7 ("dm linear: add support for zoned block devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 689ba84574c2aaee1f39480650975833ae1d67e3
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Tue Oct 9 14:24:31 2018 +0900

    dm: fix report zone remapping to account for partition offset
    
    commit 9864cd5dc54cade89fd4b0954c2e522841aa247c upstream.
    
    If dm-linear or dm-flakey are layered on top of a partition of a zoned
    block device, remapping of the start sector and write pointer position
    of the zones reported by a report zones BIO must be modified to account
    for the target table entry mapping (start offset within the device and
    entry mapping with the dm device).  If the target's backing device is a
    partition of a whole disk, the start sector on the physical device of
    the partition must also be accounted for when modifying the zone
    information.  However, dm_remap_zone_report() was not considering this
    last case, resulting in incorrect zone information remapping with
    targets using disk partitions.
    
    Fix this by calculating the target backing device start sector using
    the position of the completed report zones BIO and the unchanged
    position and size of the original report zone BIO. With this value
    calculated, the start sector and write pointer position of the target
    zones can be correctly remapped.
    
    Fixes: 10999307c14e ("dm: introduce dm_remap_zone_report()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e725141c0f4ea390bc835102707ea2ca35718716
Author: Shenghui Wang <shhuiw@foxmail.com>
Date:   Sun Oct 7 14:45:41 2018 +0800

    dm cache: destroy migration_cache if cache target registration failed
    
    commit c7cd55504a5b0fc826a2cd9540845979d24ae542 upstream.
    
    Commit 7e6358d244e47 ("dm: fix various targets to dm_register_target
    after module __init resources created") inadvertently introduced this
    bug when it moved dm_register_target() after the call to KMEM_CACHE().
    
    Fixes: 7e6358d244e47 ("dm: fix various targets to dm_register_target after module __init resources created")
    Cc: stable@vger.kernel.org
    Signed-off-by: Shenghui Wang <shhuiw@foxmail.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8e15b143e4d34e60e4cb91b4ed49453e236e6d8
Author: Eric Farman <farman@linux.ibm.com>
Date:   Tue Oct 2 03:02:35 2018 +0200

    s390/cio: Fix how vfio-ccw checks pinned pages
    
    commit 24abf2901b18bf941b9f21ea2ce5791f61097ae4 upstream.
    
    We have two nested loops to check the entries within the pfn_array_table
    arrays.  But we mistakenly use the outer array as an index in our check,
    and completely ignore the indexing performed by the inner loop.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Farman <farman@linux.ibm.com>
    Message-Id: <20181002010235.42483-1-farman@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b51943f088e5126d26306d9669fb404f0948ddb3
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Sep 11 14:45:04 2018 +0300

    perf script python: Fix export-to-sqlite.py sample columns
    
    commit d005efe18db0b4a123dd92ea8e77e27aee8f99fd upstream.
    
    With the "branches" export option, not all sample columns are exported.
    However the unwanted columns are not at the end of the tuple, as assumed
    by the code. Fix by taking the first 15 and last 3 values, instead of
    the first 18.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20180911114504.28516-3-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfb08fb1815f162350b2d7786eed14a6317ba36b
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Sep 11 14:45:03 2018 +0300

    perf script python: Fix export-to-postgresql.py occasional failure
    
    commit 25e11700b54c7b6b5ebfc4361981dae12299557b upstream.
    
    Occasional export failures were found to be caused by truncating 64-bit
    pointers to 32-bits. Fix by explicitly setting types for all ctype
    arguments and results.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20180911114504.28516-2-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37e64cb69f0fc65abdf5e3ad96a6d4fed627ca3a
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Sun Oct 7 11:31:51 2018 +0300

    percpu: stop leaking bitmap metadata blocks
    
    commit 6685b357363bfe295e3ae73665014db4aed62c58 upstream.
    
    The commit ca460b3c9627 ("percpu: introduce bitmap metadata blocks")
    introduced bitmap metadata blocks. These metadata blocks are allocated
    whenever a new chunk is created, but they are never freed. Fix it.
    
    Fixes: ca460b3c9627 ("percpu: introduce bitmap metadata blocks")
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dennis Zhou <dennis@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71cfcc667ffa1c8988321567321e7ef32f93ca07
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Oct 5 10:08:03 2018 -0400

    vsprintf: Fix off-by-one bug in bstr_printf() processing dereferenced pointers
    
    commit 62165600ae73ebd76e2d9b992b36360408d570d8 upstream.
    
    The functions vbin_printf() and bstr_printf() are used by trace_printk() to
    try to keep the overhead down during printing. trace_printk() uses
    vbin_printf() at the time of execution, as it only scans the fmt string to
    record the printf values into the buffer, and then uses vbin_printf() to do
    the conversions to print the string based on the format and the saved
    values in the buffer.
    
    This is an issue for dereferenced pointers, as before commit 841a915d20c7b,
    the processing of the pointer could happen some time after the pointer value
    was recorded (reading the trace buffer). This means the processing of the
    value at a later time could show different results, or even crash the
    system, if the pointer no longer existed.
    
    Commit 841a915d20c7b addressed this by processing dereferenced pointers at
    the time of execution and save the result in the ring buffer as a string.
    The bstr_printf() would then treat these pointers as normal strings, and
    print the value. But there was an off-by-one bug here, where after
    processing the argument, it move the pointer only "strlen(arg)" which made
    the arg pointer not point to the next argument in the ring buffer, but
    instead point to the nul character of the last argument. This causes any
    values after a dereferenced pointer to be corrupted.
    
    Cc: stable@vger.kernel.org
    Fixes: 841a915d20c7b ("vsprintf: Do not have bprintf dereference pointers")
    Reported-by: Nikolay Borisov <nborisov@suse.com>
    Tested-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 254754169d9d9cf4c67be93e3d4831489cf1f357
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Aug 17 15:19:37 2018 -0400

    mach64: detect the dot clock divider correctly on sparc
    
    commit 76ebebd2464c5c8a4453c98b6dbf9c95a599e810 upstream.
    
    On Sun Ultra 5, it happens that the dot clock is not set up properly for
    some videomodes. For example, if we set the videomode "r1024x768x60" in
    the firmware, Linux would incorrectly set a videomode with refresh rate
    180Hz when booting (suprisingly, my LCD monitor can display it, although
    display quality is very low).
    
    The reason is this: Older mach64 cards set the divider in the register
    VCLK_POST_DIV. The register has four 2-bit fields (the field that is
    actually used is specified in the lowest two bits of the register
    CLOCK_CNTL). The 2 bits select divider "1, 2, 4, 8". On newer mach64 cards,
    there's another bit added - the top four bits of PLL_EXT_CNTL extend the
    divider selection, so we have possible dividers "1, 2, 4, 8, 3, 5, 6, 12".
    The Linux driver clears the top four bits of PLL_EXT_CNTL and never sets
    them, so it can work regardless if the card supports them. However, the
    sparc64 firmware may set these extended dividers during boot - and the
    mach64 driver detects incorrect dot clock in this case.
    
    This patch makes the driver read the additional divider bit from
    PLL_EXT_CNTL and calculate the initial refresh rate properly.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Acked-by: David S. Miller <davem@davemloft.net>
    Reviewed-by: Ville Syrjälä <syrjala@sci.fi>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4882348eaa9f5f052cb21d2a5aa99a063e4308b
Author: Paul Burton <paulburton@kernel.org>
Date:   Tue Sep 25 15:51:26 2018 -0700

    MIPS: VDSO: Always map near top of user memory
    
    commit ea7e0480a4b695d0aa6b3fa99bd658a003122113 upstream.
    
    When using the legacy mmap layout, for example triggered using ulimit -s
    unlimited, get_unmapped_area() fills memory from bottom to top starting
    from a fairly low address near TASK_UNMAPPED_BASE.
    
    This placement is suboptimal if the user application wishes to allocate
    large amounts of heap memory using the brk syscall. With the VDSO being
    located low in the user's virtual address space, the amount of space
    available for access using brk is limited much more than it was prior to
    the introduction of the VDSO.
    
    For example:
    
      # ulimit -s unlimited; cat /proc/self/maps
      00400000-004ec000 r-xp 00000000 08:00 71436      /usr/bin/coreutils
      004fc000-004fd000 rwxp 000ec000 08:00 71436      /usr/bin/coreutils
      004fd000-0050f000 rwxp 00000000 00:00 0
      00cc3000-00ce4000 rwxp 00000000 00:00 0          [heap]
      2ab96000-2ab98000 r--p 00000000 00:00 0          [vvar]
      2ab98000-2ab99000 r-xp 00000000 00:00 0          [vdso]
      2ab99000-2ab9d000 rwxp 00000000 00:00 0
      ...
    
    Resolve this by adjusting STACK_TOP to reserve space for the VDSO &
    providing an address hint to get_unmapped_area() causing it to use this
    space even when using the legacy mmap layout.
    
    We reserve enough space for the VDSO, plus 1MB or 256MB for 32 bit & 64
    bit systems respectively within which we randomize the VDSO base
    address. Previously this randomization was taken care of by the mmap
    base address randomization performed by arch_mmap_rnd(). The 1MB & 256MB
    sizes are somewhat arbitrary but chosen such that we have some
    randomization without taking up too much of the user's virtual address
    space, which is often in short supply for 32 bit systems.
    
    With this the VDSO is always mapped at a high address, leaving lots of
    space for statically linked programs to make use of brk:
    
      # ulimit -s unlimited; cat /proc/self/maps
      00400000-004ec000 r-xp 00000000 08:00 71436      /usr/bin/coreutils
      004fc000-004fd000 rwxp 000ec000 08:00 71436      /usr/bin/coreutils
      004fd000-0050f000 rwxp 00000000 00:00 0
      00c28000-00c49000 rwxp 00000000 00:00 0          [heap]
      ...
      7f67c000-7f69d000 rwxp 00000000 00:00 0          [stack]
      7f7fc000-7f7fd000 rwxp 00000000 00:00 0
      7fcf1000-7fcf3000 r--p 00000000 00:00 0          [vvar]
      7fcf3000-7fcf4000 r-xp 00000000 00:00 0          [vdso]
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reported-by: Huacai Chen <chenhc@lemote.com>
    Fixes: ebb5e78cc634 ("MIPS: Initial implementation of a VDSO")
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baa63c6a5b113efdbcf983f34510c2840052bb4a
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Sep 27 22:59:18 2018 +0000

    MIPS: Fix CONFIG_CMDLINE handling
    
    commit 951d223c6c16ed5d2a71a4d1f13c1e65d6882156 upstream.
    
    Commit 8ce355cf2e38 ("MIPS: Setup boot_command_line before
    plat_mem_setup") fixed a problem for systems which have
    CONFIG_CMDLINE_BOOL=y & use a DT with a chosen node that has either no
    bootargs property or an empty one. In this configuration
    early_init_dt_scan_chosen() copies CONFIG_CMDLINE into
    boot_command_line, but the MIPS code doesn't know this so it appends
    CONFIG_CMDLINE (via builtin_cmdline) to boot_command_line again. The
    result is that boot_command_line contains the arguments from
    CONFIG_CMDLINE twice.
    
    That commit took the approach of simply setting up boot_command_line
    from the MIPS code before early_init_dt_scan_chosen() runs, causing it
    not to copy CONFIG_CMDLINE to boot_command_line if a chosen node with no
    bootargs property is found.
    
    Unfortunately this is problematic for systems which do have a non-empty
    bootargs property & CONFIG_CMDLINE_BOOL=y. There
    early_init_dt_scan_chosen() will overwrite boot_command_line with the
    arguments from DT, which means we lose those from CONFIG_CMDLINE
    entirely. This breaks CONFIG_MIPS_CMDLINE_DTB_EXTEND. If we have
    CONFIG_MIPS_CMDLINE_FROM_BOOTLOADER or
    CONFIG_MIPS_CMDLINE_BUILTIN_EXTEND selected and the DT has a bootargs
    property which we should ignore, it will instead be honoured breaking
    those configurations too.
    
    Fix this by reverting commit 8ce355cf2e38 ("MIPS: Setup
    boot_command_line before plat_mem_setup") to restore the former
    behaviour, and fixing the CONFIG_CMDLINE duplication issue by
    initializing boot_command_line to a non-empty string that
    early_init_dt_scan_chosen() will not overwrite with CONFIG_CMDLINE.
    
    This is a little ugly, but cleanup in this area is on its way. In the
    meantime this is at least easy to backport & contains the ugliness
    within arch/mips/.
    
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Fixes: 8ce355cf2e38 ("MIPS: Setup boot_command_line before plat_mem_setup")
    References: https://patchwork.linux-mips.org/patch/18804/
    Patchwork: https://patchwork.linux-mips.org/patch/20813/
    Cc: Frank Rowand <frowand.list@gmail.com>
    Cc: Jaedon Shin <jaedon.shin@gmail.com>
    Cc: Mathieu Malaterre <malat@debian.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org # v4.16+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84a3974781536af940b1aaa36cef22bfa20c4266
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 15 12:43:02 2018 +0100

    afs: Fix clearance of reply
    
    commit f0a7d1883d9f78ae7bf15fc258bf9a2b20f35b76 upstream.
    
    The recent patch to fix the afs_server struct leak didn't actually fix the
    bug, but rather fixed some of the symptoms.  The problem is that an
    asynchronous call that holds a resource pointed to by call->reply[0] will
    find the pointer cleared in the call destructor, thereby preventing the
    resource from being cleaned up.
    
    In the case of the server record leak, the afs_fs_get_capabilities()
    function in devel code sets up a call with reply[0] pointing at the server
    record that should be altered when the result is obtained, but this was
    being cleared before the destructor was called, so the put in the
    destructor does nothing and the record is leaked.
    
    Commit f014ffb025c1 removed the additional ref obtained by
    afs_install_server(), but the removal of this ref is actually used by the
    garbage collector to mark a server record as being defunct after the record
    has expired through lack of use.
    
    The offending clearance of call->reply[0] upon completion in
    afs_process_async_call() has been there from the origin of the code, but
    none of the asynchronous calls actually use that pointer currently, so it
    should be safe to remove (note that synchronous calls don't involve this
    function).
    
    Fix this by the following means:
    
     (1) Revert commit f014ffb025c1.
    
     (2) Remove the clearance of reply[0] from afs_process_async_call().
    
    Without this, afs_manage_servers() will suffer an assertion failure if it
    sees a server record that didn't get used because the usage count is not 1.
    
    Fixes: f014ffb025c1 ("afs: Fix afs_server struct leak")
    Fixes: 08e0e7c82eea ("[AF_RXRPC]: Make the in-kernel AFS filesystem use AF_RXRPC.")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b28b1a5f8653a0084b867923691545dd13672c80
Author: David Howells <dhowells@redhat.com>
Date:   Fri Oct 12 14:00:57 2018 +0100

    afs: Fix afs_server struct leak
    
    commit f014ffb025c159fd51d19af8af0022a991aaa4f8 upstream.
    
    Fix a leak of afs_server structs.  The routine that installs them in the
    various lookup lists and trees gets a ref on leaving the function, whether
    it added the server or a server already exists.  It shouldn't increment
    the refcount if it added the server.
    
    The effect of this that "rmmod kafs" will hang waiting for the leaked
    server to become unused.
    
    Fixes: d2ddc776a458 ("afs: Overhaul volume and server record caching and fileserver rotation")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04473bb7793ba2d3c1ec49081f9ec8c15c67794f
Author: Jann Horn <jannh@google.com>
Date:   Fri Oct 5 15:52:03 2018 -0700

    mm/vmstat.c: fix outdated vmstat_text
    
    commit 28e2c4bb99aa40f9d5f07ac130cbc4da0ea93079 upstream.
    
    7a9cdebdcc17 ("mm: get rid of vmacache_flush_all() entirely") removed the
    VMACACHE_FULL_FLUSHES statistics, but didn't remove the corresponding
    entry in vmstat_text.  This causes an out-of-bounds access in
    vmstat_show().
    
    Luckily this only affects kernels with CONFIG_DEBUG_VM_VMACACHE=y, which
    is probably very rare.
    
    Link: http://lkml.kernel.org/r/20181001143138.95119-1-jannh@google.com
    Fixes: 7a9cdebdcc17 ("mm: get rid of vmacache_flush_all() entirely")
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Christoph Lameter <clameter@sgi.com>
    Cc: Kemi Wang <kemi.wang@intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62aad93f09c1952ede86405894df1b22012fd5ab
Author: Roman Gushchin <guro@fb.com>
Date:   Thu Sep 20 12:22:46 2018 -0700

    mm: slowly shrink slabs with a relatively small number of objects
    
    [ Upstream commit 172b06c32b949759fe6313abec514bc4f15014f4 ]
    
    9092c71bb724 ("mm: use sc->priority for slab shrink targets") changed the
    way that the target slab pressure is calculated and made it
    priority-based:
    
        delta = freeable >> priority;
        delta *= 4;
        do_div(delta, shrinker->seeks);
    
    The problem is that on a default priority (which is 12) no pressure is
    applied at all, if the number of potentially reclaimable objects is less
    than 4096 (1<<12).
    
    This causes the last objects on slab caches of no longer used cgroups to
    (almost) never get reclaimed.  It's obviously a waste of memory.
    
    It can be especially painful, if these stale objects are holding a
    reference to a dying cgroup.  Slab LRU lists are reparented on memcg
    offlining, but corresponding objects are still holding a reference to the
    dying cgroup.  If we don't scan these objects, the dying cgroup can't go
    away.  Most likely, the parent cgroup hasn't any directly charged objects,
    only remaining objects from dying children cgroups.  So it can easily hold
    a reference to hundreds of dying cgroups.
    
    If there are no big spikes in memory pressure, and new memory cgroups are
    created and destroyed periodically, this causes the number of dying
    cgroups grow steadily, causing a slow-ish and hard-to-detect memory
    "leak".  It's not a real leak, as the memory can be eventually reclaimed,
    but it could not happen in a real life at all.  I've seen hosts with a
    steadily climbing number of dying cgroups, which doesn't show any signs of
    a decline in months, despite the host is loaded with a production
    workload.
    
    It is an obvious waste of memory, and to prevent it, let's apply a minimal
    pressure even on small shrinker lists.  E.g.  if there are freeable
    objects, let's scan at least min(freeable, scan_batch) objects.
    
    This fix significantly improves a chance of a dying cgroup to be
    reclaimed, and together with some previous patches stops the steady growth
    of the dying cgroups number on some of our hosts.
    
    Link: http://lkml.kernel.org/r/20180905230759.12236-1-guro@fb.com
    Fixes: 9092c71bb724 ("mm: use sc->priority for slab shrink targets")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Acked-by: Rik van Riel <riel@surriel.com>
    Cc: Josef Bacik <jbacik@fb.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3792c002b9ff85cd8551f36a8886d9ca0e3bcf8f
Author: Yong Zhao <Yong.Zhao@amd.com>
Date:   Wed Sep 12 21:42:20 2018 -0400

    drm/amdkfd: Fix ATS capablity was not reported correctly on some APUs
    
    [ Upstream commit 44d8cc6f1a905e4bb1d4221a898abb0d7e9d100a ]
    
    Because CRAT_CU_FLAGS_IOMMU_PRESENT was not set in some BIOS crat, we
    need to workaround this.
    
    For future compatibility, we also overwrite the bit in capability according
    to the value of needs_iommu_device.
    
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Yong Zhao <Yong.Zhao@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2fd5b21cbd9fc777fde1509a3e709450094b1ba
Author: Yong Zhao <yong.zhao@amd.com>
Date:   Wed Sep 12 21:42:19 2018 -0400

    drm/amdkfd: Change the control stack MTYPE from UC to NC on GFX9
    
    [ Upstream commit 15426dbb65c5b37680d27e84d58a1ed3b8532518 ]
    
    CWSR fails on Raven if the control stack is MTYPE_UC, which is used
    for regular GART mappings. As a workaround we map it using MTYPE_NC.
    
    The MEC firmware expects the control stack at one page offset from the
    start of the MQD so it is part of the MQD allocation on GFXv9. AMDGPU
    added a memory allocation flag just for this purpose.
    
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Yong Zhao <yong.zhao@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d3966dd95dc3213fac0d3a65525f624ad24296b
Author: Amber Lin <Amber.Lin@amd.com>
Date:   Wed Sep 12 21:42:18 2018 -0400

    drm/amdgpu: Fix SDMA HQD destroy error on gfx_v7
    
    [ Upstream commit caaa4c8a6be2a275bd14f2369ee364978ff74704 ]
    
    A wrong register bit was examinated for checking SDMA status so it reports
    false failures. This typo only appears on gfx_v7. gfx_v8 checks the correct
    bit.
    
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Amber Lin <Amber.Lin@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c9f357d3ebb7cc2cd91b5f80e0560e0cb854ff4
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Aug 2 17:08:16 2018 +0200

    x86/kvm/lapic: always disable MMIO interface in x2APIC mode
    
    [ Upstream commit d1766202779e81d0f2a94c4650a6ba31497d369d ]
    
    When VMX is used with flexpriority disabled (because of no support or
    if disabled with module parameter) MMIO interface to lAPIC is still
    available in x2APIC mode while it shouldn't be (kvm-unit-tests):
    
    PASS: apic_disable: Local apic enabled in x2APIC mode
    PASS: apic_disable: CPUID.1H:EDX.APIC[bit 9] is set
    FAIL: apic_disable: *0xfee00030: 50014
    
    The issue appears because we basically do nothing while switching to
    x2APIC mode when APIC access page is not used. apic_mmio_{read,write}
    only check if lAPIC is disabled before proceeding to actual write.
    
    When APIC access is virtualized we correctly manipulate with VMX controls
    in vmx_set_virtual_apic_mode() and we don't get vmexits from memory writes
    in x2APIC mode so there's no issue.
    
    Disabling MMIO interface seems to be easy. The question is: what do we
    do with these reads and writes? If we add apic_x2apic_mode() check to
    apic_mmio_in_range() and return -EOPNOTSUPP these reads and writes will
    go to userspace. When lAPIC is in kernel, Qemu uses this interface to
    inject MSIs only (see kvm_apic_mem_write() in hw/i386/kvm/apic.c). This
    somehow works with disabled lAPIC but when we're in xAPIC mode we will
    get a real injected MSI from every write to lAPIC. Not good.
    
    The simplest solution seems to be to just ignore writes to the region
    and return ~0 for all reads when we're in x2APIC mode. This is what this
    patch does. However, this approach is inconsistent with what currently
    happens when flexpriority is enabled: we allocate APIC access page and
    create KVM memory region so in x2APIC modes all reads and writes go to
    this pre-allocated page which is, btw, the same for all vCPUs.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d85d4e0e105ea0d68e7b9f2b76ed6f235c78635
Author: Simon Detheridge <s@sd.ai>
Date:   Sat Sep 15 22:15:18 2018 +0100

    pinctrl: cannonlake: Fix gpio base for GPP-E
    
    [ Upstream commit 8e2aac333785f91ff74e219a1e78e6bdc1ef2c41 ]
    
    The gpio base for GPP-E was set incorrectly to 258 instead of 256,
    preventing the touchpad working on my Tong Fang GK5CN5Z laptop.
    
    Buglink: https://bugzilla.kernel.org/show_bug.cgi?id=200787
    Signed-off-by: Simon Detheridge <s@sd.ai>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8318a1c50c77f20909b0f615ee4113d935e660
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Sep 12 11:34:56 2018 +0200

    clk: x86: Stop marking clocks as CLK_IS_CRITICAL
    
    [ Upstream commit 648e921888ad96ea3dc922739e96716ad3225d7f ]
    
    Commit d31fd43c0f9a ("clk: x86: Do not gate clocks enabled by the
    firmware"), which added the code to mark clocks as CLK_IS_CRITICAL, causes
    all unclaimed PMC clocks on Cherry Trail devices to be on all the time,
    resulting on the device not being able to reach S0i3 when suspended.
    
    The reason for this commit is that on some Bay Trail / Cherry Trail devices
    the r8169 ethernet controller uses pmc_plt_clk_4. Now that the clk-pmc-atom
    driver exports an "ether_clk" alias for pmc_plt_clk_4 and the r8169 driver
    has been modified to get and enable this clock (if present) the marking of
    the clocks as CLK_IS_CRITICAL is no longer necessary.
    
    This commit removes the CLK_IS_CRITICAL marking, fixing Cherry Trail
    devices not being able to reach S0i3 greatly decreasing their battery
    drain when suspended.
    
    Buglink: https://bugzilla.kernel.org/show_bug.cgi?id=193891#c102
    Buglink: https://bugzilla.kernel.org/show_bug.cgi?id=196861
    Cc: Johannes Stezenbach <js@sig21.net>
    Cc: Carlo Caione <carlo@endlessm.com>
    Reported-by: Johannes Stezenbach <js@sig21.net>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81b8b9dffca83fb812726e27ac7d10c95fc70f41
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Sep 12 11:34:54 2018 +0200

    clk: x86: add "ether_clk" alias for Bay Trail / Cherry Trail
    
    [ Upstream commit b1e3454d39f992e5409cd19f97782185950df6e7 ]
    
    Commit d31fd43c0f9a ("clk: x86: Do not gate clocks enabled by the
    firmware") causes all unclaimed PMC clocks on Cherry Trail devices to be on
    all the time, resulting on the device not being able to reach S0i2 or S0i3
    when suspended.
    
    The reason for this commit is that on some Bay Trail / Cherry Trail devices
    the ethernet controller uses pmc_plt_clk_4. This commit adds an "ether_clk"
    alias, so that the relevant ethernet drivers can try to (optionally) use
    this, without needing X86 specific code / hacks, thus fixing ethernet on
    these devices without breaking S0i3 support.
    
    This commit uses clkdev_hw_create() to create the alias, mirroring the code
    for the already existing "mclk" alias for pmc_plt_clk_3.
    
    Buglink: https://bugzilla.kernel.org/show_bug.cgi?id=193891#c102
    Buglink: https://bugzilla.kernel.org/show_bug.cgi?id=196861
    Cc: Johannes Stezenbach <js@sig21.net>
    Cc: Carlo Caione <carlo@endlessm.com>
    Reported-by: Johannes Stezenbach <js@sig21.net>
    Acked-by: Stephen Boyd <sboyd@kernel.org>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b25a8dd9895b8581d165565372343f0c79ab3415
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Fri Sep 14 12:54:56 2018 -0700

    PCI: hv: support reporting serial number as slot information
    
    [ Upstream commit a15f2c08c70811f120d99288d81f70d7f3d104f1 ]
    
    The Hyper-V host API for PCI provides a unique "serial number" which
    can be used as basis for sysfs PCI slot table. This can be useful
    for cases where userspace wants to find the PCI device based on
    serial number.
    
    When an SR-IOV NIC is added, the host sends an attach message
    with serial number. The kernel doesn't use the serial number, but
    it is useful when doing the same thing in a userspace driver such
    as the DPDK. By having /sys/bus/pci/slots/N it provides a direct
    way to find the matching PCI device.
    
    There maybe some cases where serial number is not unique such
    as when using GPU's. But the PCI slot infrastructure will handle
    that.
    
    This has a side effect which may also be useful. The common udev
    network device naming policy uses the slot information (rather
    than PCI address).
    
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aed5429279f833a0f7567be0efa292f86c0ee823
Author: Nicolas Ferre <nicolas.ferre@microchip.com>
Date:   Fri Sep 14 17:48:11 2018 +0200

    ARM: dts: at91: add new compatibility string for macb on sama5d3
    
    [ Upstream commit 321cc359d899a8e988f3725d87c18a628e1cc624 ]
    
    We need this new compatibility string as we experienced different behavior
    for this 10/100Mbits/s macb interface on this particular SoC.
    Backward compatibility is preserved as we keep the alternative strings.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee62a5d3ea8ad063aa59d18cde61996df2f959b0
Author: Nicolas Ferre <nicolas.ferre@microchip.com>
Date:   Fri Sep 14 17:48:10 2018 +0200

    net: macb: disable scatter-gather for macb on sama5d3
    
    [ Upstream commit eb4ed8e2d7fecb5f40db38e4498b9ee23cddf196 ]
    
    Create a new configuration for the sama5d3-macb new compatibility string.
    This configuration disables scatter-gather because we experienced lock down
    of the macb interface of this particular SoC under very high load.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53035808c2942841fce6f4eedf105fa90ade25af
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Fri Sep 14 11:20:07 2018 +0000

    net: ethernet: ti: add missing GENERIC_ALLOCATOR dependency
    
    [ Upstream commit f025571e96caa95ffc3c1792f762a584893de582 ]
    
    This patch mades TI_DAVINCI_CPDMA select GENERIC_ALLOCATOR.
    without that, the following sparc64 build failure happen
    
    drivers/net/ethernet/ti/davinci_cpdma.o: In function `cpdma_check_free_tx_desc':
    (.text+0x278): undefined reference to `gen_pool_avail'
    drivers/net/ethernet/ti/davinci_cpdma.o: In function `cpdma_chan_submit':
    (.text+0x340): undefined reference to `gen_pool_alloc'
    (.text+0x5c4): undefined reference to `gen_pool_free'
    drivers/net/ethernet/ti/davinci_cpdma.o: In function `__cpdma_chan_free':
    davinci_cpdma.c:(.text+0x64c): undefined reference to `gen_pool_free'
    drivers/net/ethernet/ti/davinci_cpdma.o: In function `cpdma_desc_pool_destroy.isra.6':
    davinci_cpdma.c:(.text+0x17ac): undefined reference to `gen_pool_size'
    davinci_cpdma.c:(.text+0x17b8): undefined reference to `gen_pool_avail'
    davinci_cpdma.c:(.text+0x1824): undefined reference to `gen_pool_size'
    davinci_cpdma.c:(.text+0x1830): undefined reference to `gen_pool_avail'
    drivers/net/ethernet/ti/davinci_cpdma.o: In function `cpdma_ctlr_create':
    (.text+0x19f8): undefined reference to `devm_gen_pool_create'
    (.text+0x1a90): undefined reference to `gen_pool_add_virt'
    Makefile:1011: recipe for target 'vmlinux' failed
    
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8be050c4011bb03c1156bcec77bc0fa993a895a2
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Mon Sep 17 05:23:58 2018 -0700

    hwmon: (nct6775) Use different register to get fan RPM for fan7
    
    [ Upstream commit 55066354285b36ee09dc50e2527f43a97c567177 ]
    
    The documented register to retrieve the fan RPM for fan7 is found
    to be unreliable at least with NCT6796D revision 3. Let's use
    register 0x4ce instead. This is undocumented for NCT6796D, but
    documented for NCT6797D and NCT6798D and known to be working.
    
    Reported-by: Robert Kern <ulteq@web.de>
    Cc: Robert Kern <ulteq@web.de>
    Fixes: 81820059a428 ("hwmon: (nct6775) Add support for NCT6796D")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d753e6892760015eb1cb71f67eb381bc3e7fd30
Author: Jongsung Kim <neidhard.kim@lge.com>
Date:   Thu Sep 13 18:32:21 2018 +0900

    stmmac: fix valid numbers of unicast filter entries
    
    [ Upstream commit edf2ef7242805e53ec2e0841db26e06d8bc7da70 ]
    
    Synopsys DWC Ethernet MAC can be configured to have 1..32, 64, or
    128 unicast filter entries. (Table 7-8 MAC Address Registers from
    databook) Fix dwmac1000_validate_ucast_entries() to accept values
    between 1 and 32 in addition.
    
    Signed-off-by: Jongsung Kim <neidhard.kim@lge.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8eeee24ced8ff023706ee0f7c049cd5e32bcdb6
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Sep 13 20:01:12 2018 -0700

    hwmon: (nct6775) Fix RPM output for fan7 on NCT6796D
    
    [ Upstream commit f6de298806d9cbc63a4907bca34a06162b9d7dce ]
    
    fan7 on NCT6796D does not have a fan count register; it only has an RPM
    register. Switch to using RPM registers to read the fan speed for all
    chips supporting it to solve the problem for good.
    
    Reported-by: Robert Kern <ulteq@web.de>
    Cc: Robert Kern <ulteq@web.de>
    Fixes: 81820059a428 ("hwmon: (nct6775) Add support for NCT6796D")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 510dc356ff2c5865297b72d8208881ecf12e789d
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Sep 13 19:43:58 2018 -0700

    hwmon: (nct6775) Fix virtual temperature sources for NCT6796D
    
    [ Upstream commit 37196ba4ae95a2077d78715eb12e879e57613d43 ]
    
    The following kernel log message is reported for the nct6775 driver
    on ASUS WS X299 SAGE.
    
    nct6775: Found NCT6796D or compatible chip at 0x2e:0x290
    nct6775 nct6775.656: Invalid temperature source 11 at index 0,
                            source register 0x100, temp register 0x73
    nct6775 nct6775.656: Invalid temperature source 11 at index 2,
                            source register 0x300, temp register 0x77
    nct6775 nct6775.656: Invalid temperature source 11 at index 3,
                            source register 0x800, temp register 0x79
    nct6775 nct6775.656: Invalid temperature source 11 at index 4,
                            source register 0x900, temp register 0x7b
    
    A recent version of the datasheet lists temperature source 11 as reserved.
    However, an older version of the datasheet lists temperature sources 10
    and 11 as supported virtual temperature sources. Apparently the older
    version of the datasheet is correct, so list those temperature sources
    as supported.
    
    Virtual temperature sources are different than other temperature sources:
    Values are not read from a temperature sensor, but written either from
    BIOS or an embedded controller. As such, each virtual temperature has to
    be reported. Since there is now more than one temperature source, we have
    to keep virtual temperature sources in a chip-specific mask and can no
    longer rely on the assumption that there is only one virtual temperature
    source with a fixed index. This accounts for most of the complexity of this
    patch.
    
    Reported-by: Robert Kern <ulteq@web.de>
    Cc: Robert Kern <ulteq@web.de>
    Fixes: 81820059a428 ("hwmon: (nct6775) Add support for NCT6796D")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dc76c13f297228e1c70eaf412093061335ee3a2
Author: Tushar Dave <tushar.n.dave@oracle.com>
Date:   Wed Sep 12 22:15:29 2018 +0200

    bpf: use __GFP_COMP while allocating page
    
    [ Upstream commit 4c3d795cb012a378855543a775408fba1ccff6f2 ]
    
    Helper bpg_msg_pull_data() can allocate multiple pages while
    linearizing multiple scatterlist elements into one shared page.
    However, if the shared page has size > PAGE_SIZE, using
    copy_page_to_iter() causes below warning.
    
    e.g.
    [ 6367.019832] WARNING: CPU: 2 PID: 7410 at lib/iov_iter.c:825
    page_copy_sane.part.8+0x0/0x8
    
    To avoid above warning, use __GFP_COMP while allocating multiple
    contiguous pages.
    
    Fixes: 015632bb30da ("bpf: sk_msg program helper bpf_sk_msg_pull_data")
    Signed-off-by: Tushar Dave <tushar.n.dave@oracle.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2440a0b06727aa19b2d9d937ff4754ec2f469be
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Wed Sep 12 10:29:11 2018 -0700

    bpf: btf: Fix end boundary calculation for type section
    
    [ Upstream commit 4b1c5d917d34f705096bb7dd8a2bd19b0881970e ]
    
    The end boundary math for type section is incorrect in
    btf_check_all_metas().  It just happens that hdr->type_off
    is always 0 for now because there are only two sections
    (type and string) and string section must be at the end (ensured
    in btf_parse_str_sec).
    
    However, type_off may not be 0 if a new section would be added later.
    This patch fixes it.
    
    Fixes: f80442a4cd18 ("bpf: btf: Change how section is supported in btf_header")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aeaca3563bea4d36b373949097e091f76505204f
Author: Yu Zhao <yuzhao@google.com>
Date:   Tue Sep 11 15:15:16 2018 -0600

    sound: don't call skl_init_chip() to reset intel skl soc
    
    [ Upstream commit 75383f8d39d4c0fb96083dd460b7b139fbdac492 ]
    
    Internally, skl_init_chip() calls snd_hdac_bus_init_chip() which
    1) sets bus->chip_init to prevent multiple entrances before device
    is stopped; 2) enables interrupt.
    
    We shouldn't use it for the purpose of resetting device only because
    1) when we really want to initialize device, we won't be able to do
    so; 2) we are ready to handle interrupt yet, and kernel crashes when
    interrupt comes in.
    
    Rename azx_reset() to snd_hdac_bus_reset_link(), and use it to reset
    device properly.
    
    Fixes: 60767abcea3d ("ASoC: Intel: Skylake: Reset the controller in probe")
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9761976f8e01594c4a4a01ce3ac172686495a94e
Author: Yu Zhao <yuzhao@google.com>
Date:   Tue Sep 11 15:14:04 2018 -0600

    sound: enable interrupt after dma buffer initialization
    
    [ Upstream commit b61749a89f826eb61fc59794d9e4697bd246eb61 ]
    
    In snd_hdac_bus_init_chip(), we enable interrupt before
    snd_hdac_bus_init_cmd_io() initializing dma buffers. If irq has
    been acquired and irq handler uses the dma buffer, kernel may crash
    when interrupt comes in.
    
    Fix the problem by postponing enabling irq after dma buffer
    initialization. And warn once on null dma buffer pointer during the
    initialization.
    
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1d77f9cd10a114b5810c70a43f5b07aa43aa1a0
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Sep 8 11:42:27 2018 +0300

    scsi: qla2xxx: Fix an endian bug in fcpcmd_is_corrupted()
    
    [ Upstream commit cbe3fd39d223f14b1c60c80fe9347a3dd08c2edb ]
    
    We should first do the le16_to_cpu endian conversion and then apply the
    FCP_CMD_LENGTH_MASK mask.
    
    Fixes: 5f35509db179 ("qla2xxx: Terminate exchange if corrupted")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Quinn Tran <Quinn.Tran@cavium.com>
    Acked-by: Himanshu Madhani <himanshu.madhani@cavium.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ac4572a73747f204633856e83108c6c8f710553
Author: Laura Abbott <labbott@redhat.com>
Date:   Tue Sep 4 11:47:40 2018 -0700

    scsi: iscsi: target: Don't use stack buffer for scatterlist
    
    [ Upstream commit 679fcae46c8b2352bba3485d521da070cfbe68e6 ]
    
    Fedora got a bug report of a crash with iSCSI:
    
    kernel BUG at include/linux/scatterlist.h:143!
    ...
    RIP: 0010:iscsit_do_crypto_hash_buf+0x154/0x180 [iscsi_target_mod]
    ...
     Call Trace:
      ? iscsi_target_tx_thread+0x200/0x200 [iscsi_target_mod]
      iscsit_get_rx_pdu+0x4cd/0xa90 [iscsi_target_mod]
      ? native_sched_clock+0x3e/0xa0
      ? iscsi_target_tx_thread+0x200/0x200 [iscsi_target_mod]
      iscsi_target_rx_thread+0x81/0xf0 [iscsi_target_mod]
      kthread+0x120/0x140
      ? kthread_create_worker_on_cpu+0x70/0x70
      ret_from_fork+0x3a/0x50
    
    This is a BUG_ON for using a stack buffer with a scatterlist.  There
    are two cases that trigger this bug. Switch to using a dynamically
    allocated buffer for one case and do not assign a NULL buffer in
    another case.
    
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 970f5df113b1a5ba12777f91c9e3896e44b27707
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Tue Sep 11 20:48:34 2018 +1000

    KVM: PPC: Book3S HV: Don't use compound_order to determine host mapping size
    
    [ Upstream commit 71d29f43b6332badc5598c656616a62575e83342 ]
    
    THP paths can defer splitting compound pages until after the actual
    remap and TLB flushes to split a huge PMD/PUD. This causes radix
    partition scope page table mappings to get out of synch with the host
    qemu page table mappings.
    
    This results in random memory corruption in the guest when running
    with THP. The easiest way to reproduce is use KVM balloon to free up
    a lot of memory in the guest and then shrink the balloon to give the
    memory back, while some work is being done in the guest.
    
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.ibm.com>
    Cc: kvm-ppc@vger.kernel.org
    Cc: linuxppc-dev@lists.ozlabs.org
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba73c6ed5010eeae91ed38ea171722be917359d4
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Apr 25 07:29:22 2018 -0700

    mfd: omap-usb-host: Fix dts probe of children
    
    [ Upstream commit 10492ee8ed9188d6d420e1f79b2b9bdbc0624e65 ]
    
    It currently only works if the parent bus uses "simple-bus". We
    currently try to probe children with non-existing compatible values.
    And we're missing .probe.
    
    I noticed this while testing devices configured to probe using ti-sysc
    interconnect target module driver. For that we also may want to rebind
    the driver, so let's remove __init and __exit.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7c4c41389ff62d3b52ac645db3358da8f5d4d7c
Author: Hermes Zhang <chenhuiz@axis.com>
Date:   Tue Aug 28 09:48:30 2018 +0800

    Bluetooth: hci_ldisc: Free rw_semaphore on close
    
    [ Upstream commit e6a57d22f787e73635ce0d29eef0abb77928b3e9 ]
    
    The percpu_rw_semaphore is not currently freed, and this leads to
    a crash when the stale rcu callback is invoked.  DEBUG_OBJECTS
    detects this.
    
     ODEBUG: free active (active state 1) object type: rcu_head hint: (null)
     ------------[ cut here ]------------
     WARNING: CPU: 1 PID: 2024 at debug_print_object+0xac/0xc8
     PC is at debug_print_object+0xac/0xc8
     LR is at debug_print_object+0xac/0xc8
     Call trace:
     [<ffffff80082e2c2c>] debug_print_object+0xac/0xc8
     [<ffffff80082e40b0>] debug_check_no_obj_freed+0x1e8/0x228
     [<ffffff8008191254>] kfree+0x1cc/0x250
     [<ffffff80083cc03c>] hci_uart_tty_close+0x54/0x108
     [<ffffff800832e118>] tty_ldisc_close.isra.1+0x40/0x58
     [<ffffff800832e14c>] tty_ldisc_kill+0x1c/0x40
     [<ffffff800832e3dc>] tty_ldisc_release+0x94/0x170
     [<ffffff8008325554>] tty_release_struct+0x1c/0x58
     [<ffffff8008326400>] tty_release+0x3b0/0x490
     [<ffffff80081a3fe8>] __fput+0x88/0x1d0
     [<ffffff80081a418c>] ____fput+0xc/0x18
     [<ffffff80080c0624>] task_work_run+0x9c/0xc0
     [<ffffff80080a9e24>] do_exit+0x24c/0x8a0
     [<ffffff80080aa4e0>] do_group_exit+0x38/0xa0
     [<ffffff80080aa558>] __wake_up_parent+0x0/0x28
     [<ffffff8008082c00>] el0_svc_naked+0x34/0x38
     ---[ end trace bfe08cbd89098cdf ]---
    
    Signed-off-by: Hermes Zhang <chenhuiz@axis.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d95a3d1fcf6c84c0d71d775011ec6d8a2b9640a
Author: Matias Karhumaa <matias.karhumaa@gmail.com>
Date:   Tue Sep 11 14:10:13 2018 +0300

    Bluetooth: Use correct tfm to generate OOB data
    
    [ Upstream commit 4ba5175f2c10affd412fa41855cecda02b66cd71 ]
    
    In case local OOB data was generated and other device initiated pairing
    claiming that it has got OOB data, following crash occurred:
    
    [  222.847853] general protection fault: 0000 [#1] SMP PTI
    [  222.848025] CPU: 1 PID: 42 Comm: kworker/u5:0 Tainted: G         C        4.18.0-custom #4
    [  222.848158] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  222.848307] Workqueue: hci0 hci_rx_work [bluetooth]
    [  222.848416] RIP: 0010:compute_ecdh_secret+0x5a/0x270 [bluetooth]
    [  222.848540] Code: 0c af f5 48 8b 3d 46 de f0 f6 ba 40 00 00 00 be c0 00 60 00 e8 b7 7b c5 f5 48 85 c0 0f 84 ea 01 00 00 48 89 c3 e8 16 0c af f5 <49> 8b 47 38 be c0 00 60 00 8b 78 f8 48 83 c7 48 e8 51 84 c5 f5 48
    [  222.848914] RSP: 0018:ffffb1664087fbc0 EFLAGS: 00010293
    [  222.849021] RAX: ffff8a5750d7dc00 RBX: ffff8a5671096780 RCX: ffffffffc08bc32a
    [  222.849111] RDX: 0000000000000000 RSI: 00000000006000c0 RDI: ffff8a5752003800
    [  222.849192] RBP: ffffb1664087fc60 R08: ffff8a57525280a0 R09: ffff8a5752003800
    [  222.849269] R10: ffffb1664087fc70 R11: 0000000000000093 R12: ffff8a5674396e00
    [  222.849350] R13: ffff8a574c2e79aa R14: ffff8a574c2e796a R15: 020e0e100d010101
    [  222.849429] FS:  0000000000000000(0000) GS:ffff8a5752500000(0000) knlGS:0000000000000000
    [  222.849518] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  222.849586] CR2: 000055856016a038 CR3: 0000000110d2c005 CR4: 00000000000606e0
    [  222.849671] Call Trace:
    [  222.849745]  ? sc_send_public_key+0x110/0x2a0 [bluetooth]
    [  222.849825]  ? sc_send_public_key+0x115/0x2a0 [bluetooth]
    [  222.849925]  smp_recv_cb+0x959/0x2490 [bluetooth]
    [  222.850023]  ? _cond_resched+0x19/0x40
    [  222.850105]  ? mutex_lock+0x12/0x40
    [  222.850202]  l2cap_recv_frame+0x109d/0x3420 [bluetooth]
    [  222.850315]  ? l2cap_recv_frame+0x109d/0x3420 [bluetooth]
    [  222.850426]  ? __switch_to_asm+0x34/0x70
    [  222.850515]  ? __switch_to_asm+0x40/0x70
    [  222.850625]  ? __switch_to_asm+0x34/0x70
    [  222.850724]  ? __switch_to_asm+0x40/0x70
    [  222.850786]  ? __switch_to_asm+0x34/0x70
    [  222.850846]  ? __switch_to_asm+0x40/0x70
    [  222.852581]  ? __switch_to_asm+0x34/0x70
    [  222.854976]  ? __switch_to_asm+0x40/0x70
    [  222.857475]  ? __switch_to_asm+0x40/0x70
    [  222.859775]  ? __switch_to_asm+0x34/0x70
    [  222.861218]  ? __switch_to_asm+0x40/0x70
    [  222.862327]  ? __switch_to_asm+0x34/0x70
    [  222.863758]  l2cap_recv_acldata+0x266/0x3c0 [bluetooth]
    [  222.865122]  hci_rx_work+0x1c9/0x430 [bluetooth]
    [  222.867144]  process_one_work+0x210/0x4c0
    [  222.868248]  worker_thread+0x41/0x4d0
    [  222.869420]  kthread+0x141/0x160
    [  222.870694]  ? process_one_work+0x4c0/0x4c0
    [  222.871668]  ? kthread_create_worker_on_cpu+0x90/0x90
    [  222.872896]  ret_from_fork+0x35/0x40
    [  222.874132] Modules linked in: algif_hash algif_skcipher af_alg rfcomm bnep btusb btrtl btbcm btintel snd_intel8x0 cmac intel_rapl_perf vboxvideo(C) snd_ac97_codec bluetooth ac97_bus joydev ttm snd_pcm ecdh_generic drm_kms_helper snd_timer snd input_leds drm serio_raw fb_sys_fops soundcore syscopyarea sysfillrect sysimgblt mac_hid sch_fq_codel ib_iser rdma_cm iw_cm ib_cm ib_core iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi ip_tables x_tables autofs4 btrfs zstd_compress raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor async_tx xor raid6_pq libcrc32c raid1 raid0 multipath linear hid_generic usbhid hid crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel aes_x86_64 crypto_simd cryptd glue_helper ahci psmouse libahci i2c_piix4 video e1000 pata_acpi
    [  222.883153] fbcon_switch: detected unhandled fb_set_par error, error code -16
    [  222.886774] fbcon_switch: detected unhandled fb_set_par error, error code -16
    [  222.890503] ---[ end trace 6504aa7a777b5316 ]---
    [  222.890541] RIP: 0010:compute_ecdh_secret+0x5a/0x270 [bluetooth]
    [  222.890551] Code: 0c af f5 48 8b 3d 46 de f0 f6 ba 40 00 00 00 be c0 00 60 00 e8 b7 7b c5 f5 48 85 c0 0f 84 ea 01 00 00 48 89 c3 e8 16 0c af f5 <49> 8b 47 38 be c0 00 60 00 8b 78 f8 48 83 c7 48 e8 51 84 c5 f5 48
    [  222.890555] RSP: 0018:ffffb1664087fbc0 EFLAGS: 00010293
    [  222.890561] RAX: ffff8a5750d7dc00 RBX: ffff8a5671096780 RCX: ffffffffc08bc32a
    [  222.890565] RDX: 0000000000000000 RSI: 00000000006000c0 RDI: ffff8a5752003800
    [  222.890571] RBP: ffffb1664087fc60 R08: ffff8a57525280a0 R09: ffff8a5752003800
    [  222.890576] R10: ffffb1664087fc70 R11: 0000000000000093 R12: ffff8a5674396e00
    [  222.890581] R13: ffff8a574c2e79aa R14: ffff8a574c2e796a R15: 020e0e100d010101
    [  222.890586] FS:  0000000000000000(0000) GS:ffff8a5752500000(0000) knlGS:0000000000000000
    [  222.890591] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  222.890594] CR2: 000055856016a038 CR3: 0000000110d2c005 CR4: 00000000000606e0
    
    This commit fixes a bug where invalid pointer to crypto tfm was used for
    SMP SC ECDH calculation when OOB was in use. Solution is to use same
    crypto tfm than when generating OOB material on generate_oob() function.
    
    This bug was introduced in commit c0153b0b901a ("Bluetooth: let the crypto
    subsystem generate the ecc privkey"). Bug was found by fuzzing kernel SMP
    implementation using Synopsys Defensics.
    
    Signed-off-by: Matias Karhumaa <matias.karhumaa@gmail.com>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3194c412f471473d00f89db240fec214e58ac219
Author: Johan Hedberg <johan.hedberg@intel.com>
Date:   Tue Sep 11 14:10:12 2018 +0300

    Bluetooth: SMP: Fix trying to use non-existent local OOB data
    
    [ Upstream commit 94f14e4728125f979629b2b020d31cd718191626 ]
    
    A remote device may claim that it has received our OOB data, even
    though we never geneated it. Add a new flag to track whether we
    actually have OOB data, and ignore the remote peer's flag if haven't
    generated OOB data.
    
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5421ce8b59bc4e668b610ec63ec759fbffad0039
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Sat Aug 4 18:49:27 2018 +0800

    drm/pl111: Make sure of_device_id tables are NULL terminated
    
    [ Upstream commit 7eb33224572636248d5b6cfa1a6b2472207be5c4 ]
    
    We prefer to of_device_id tables are NULL terminated. So make
    vexpress_muxfpga_match is NULL terminated.
    
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1533379767-15629-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0200873bc9c1bf193e126665a69e709d93bc987
Author: Akshu Agrawal <akshu.agrawal@amd.com>
Date:   Mon Sep 10 13:36:30 2018 +0530

    ASoC: AMD: Ensure reset bit is cleared before configuring
    
    [ Upstream commit 2a665dba016d5493c7d826fec82b0cb643b30d42 ]
    
    HW register descriptions says:
    "DMA Channel Reset...Software must confirm that this bit is
    cleared before reprogramming any of the channel configuration registers."
    There could be cases where dma stop errored out leaving dma channel
    in reset state. We need to ensure that before the start of another dma,
    channel is out of the reset state.
    
    Signed-off-by: Akshu Agrawal <akshu.agrawal@amd.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d1a5a5eed92811ed0d28708e06fbec5143645d1
Author: Jay Kamat <jgkamat@fb.com>
Date:   Fri Sep 7 14:34:04 2018 -0700

    Fix cg_read_strcmp()
    
    [ Upstream commit 48c2bb0b9cf863e0ed78e269f188ce65b73e0fd1 ]
    
    Fix a couple issues with cg_read_strcmp(), to improve correctness of
    cgroup tests
    - Fix cg_read_strcmp() always returning 0 for empty "needle" strings.
    Previously, this function read to a size = 1 buffer when comparing
    against empty strings, which would lead to cg_read_strcmp() comparing
    two empty strings.
    - Fix a memory leak in cg_read_strcmp()
    
    Fixes: 84092dbcf901 ("selftests: cgroup: add memory controller self-tests")
    
    Signed-off-by: Jay Kamat <jgkamat@fb.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 636dd45360094596e37102811e6e631ae06eaf38
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Sep 6 09:47:51 2018 -0700

    hwmon: (nct6775) Fix access to fan pulse registers
    
    [ Upstream commit c793279c77035053e67937f5743c6ebfc303e7c5 ]
    
    Not all fans have a fan pulse register. This can result in reading
    beyond the end of REG_FAN_PULSES and FAN_PULSE_SHIFT arrays,
    and was reported by smatch as possible error.
    
    1672          for (i = 0; i < ARRAY_SIZE(data->rpm); i++) {
                                  ^^^^^^^^^^^^^^^^^^^^^^^^
                                  This is a 7 element array.
    ...
    1685                  data->fan_pulses[i] =
    1686                    (nct6775_read_value(data, data->REG_FAN_PULSES[i])
    1687                          >> data->FAN_PULSE_SHIFT[i]) & 0x03;
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
                                     FAN_PULSE_SHIFT is either 5 or 6
                                     elements.
    
    To fix the problem, we have to ensure that all REG_FAN_PULSES and
    FAN_PULSE_SHIFT have the appropriate length, and that REG_FAN_PULSES
    is only read if the register actually exists.
    
    Fixes: 6c009501ff200 ("hwmon: (nct6775) Add support for NCT6102D/6106D")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59fcb2491ca0551a70f6954314a7c4c2912b09df
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Thu Sep 6 03:21:47 2018 +0000

    ASoC: rsnd: don't fallback to PIO mode when -EPROBE_DEFER
    
    [ Upstream commit 6c92d5a2744e27619a8fcc9d74b91ee9f1cdebd1 ]
    
    Current rsnd driver will fallback to PIO mode if it can't get DMA
    handler. But, DMA might return -EPROBE_DEFER when probe timing.
    This driver always fallback to PIO mode especially from
    commit ac6bbf0cdf4206c ("iommu: Remove IOMMU_OF_DECLARE") because
    of this reason.
    
    The DMA driver will be probed later, but sound driver might be
    probed as PIO mode in such case. This patch fixup this issue.
    Then, -EPROBE_DEFER is not error. Thus, let's don't indicate error
    message in such case.
    And it needs to call rsnd_adg_remove() individually if probe failed,
    because it registers clk which should be unregister.
    
    Maybe PIO fallback feature itself is not needed,
    but let's keep it so far.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee3953f7b81ca3bafa0f764e7da28dae8228cbc7
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Thu Sep 6 03:21:33 2018 +0000

    ASoC: rsnd: adg: care clock-frequency size
    
    [ Upstream commit 69235ccf491d2e26aefd465c0d3ccd1e3b2a9a9c ]
    
    ADG has buffer over flow bug if DT has more than 3 clock-frequency.
    This patch fixup this issue, and uses first 2 values.
    
            clock-frequency = <x y>;        /* this is OK */
            clock-frequency = <x y z>;      /* this is NG */
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Tested-by: Hiroyuki Yokoyama <hiroyuki.yokoyama.vx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7bad669da54e53587b7b3c9e7984eb59774f2c7
Author: Lei Yang <Lei.Yang@windriver.com>
Date:   Wed Sep 5 17:57:15 2018 +0800

    selftests: memory-hotplug: add required configs
    
    [ Upstream commit 4d85af102a66ee6aeefa596f273169e77fb2b48e ]
    
    add CONFIG_MEMORY_HOTREMOVE=y in config
    without this config, /sys/devices/system/memory/memory*/removable
    always return 0, I endup getting an early skip during test
    
    Signed-off-by: Lei Yang <Lei.Yang@windriver.com>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a90b9e380c5e1cd4e0b658b7f750ba1f473feaa
Author: Lei Yang <Lei.Yang@windriver.com>
Date:   Wed Sep 5 11:14:49 2018 +0800

    selftests/efivarfs: add required kernel configs
    
    [ Upstream commit 53cf59d6c0ad3edc4f4449098706a8f8986258b6 ]
    
    add config file
    
    Signed-off-by: Lei Yang <Lei.Yang@windriver.com>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40299ec565fa7158e3f11d963fdd0d3f02e50f88
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Tue Sep 4 12:47:21 2018 +0200

    selftests: add headers_install to lib.mk
    
    [ Upstream commit b2d35fa5fc80c27e868e393dcab4c94a0d71737f ]
    
    If the kernel headers aren't installed we can't build all the tests.
    Add a new make target rule 'khdr' in the file lib.mk to generate the
    kernel headers and that gets include for every test-dir Makefile that
    includes lib.mk If the testdir in turn have its own sub-dirs the
    top_srcdir needs to be set to the linux-rootdir to be able to generate
    the kernel headers.
    
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Reviewed-by: Fathi Boudra <fathi.boudra@linaro.org>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36a89768d19f554592392bbf7aa7eb0b7ef3b619
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Mon Sep 3 12:07:47 2018 +0100

    ASoC: q6routing: initialize data correctly
    
    [ Upstream commit 7aa09ff24301535491cd4de1b93107ee91449a12 ]
    
    Some of the router data fields are left as default zeros which are
    valid dai ids, so initialize these to invalid value of -1.
    
    Without intializing these correctly get_session_from_id() can return
    incorrect session resulting in not closing the opened copp and messing
    up with the copp ref count.
    
    Fixes: e3a33673e845 ("ASoC: qdsp6: q6routing: Add q6routing driver")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64458ca97124915cea2327766219f55ef846d2f9
Author: Danny Smith <danny.smith@axis.com>
Date:   Thu Aug 23 10:26:20 2018 +0200

    ASoC: sigmadsp: safeload should not have lower byte limit
    
    [ Upstream commit 5ea752c6efdf5aa8a57aed816d453a8f479f1b0a ]
    
    Fixed range in safeload conditional to allow safeload to up to 20 bytes,
    without a lower limit.
    
    Signed-off-by: Danny Smith <dannys@axis.com>
    Acked-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a7f15b6d5faca90558146b3f6a3b388ef16c5ea
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Aug 22 22:49:36 2018 -0500

    ASoC: wm8804: Add ACPI support
    
    [ Upstream commit 960cdd50ca9fdfeb82c2757107bcb7f93c8d7d41 ]
    
    HID made of either Wolfson/CirrusLogic PCI ID + 8804 identifier.
    
    This helps enumerate the HifiBerry Digi+ HAT boards on the Up2 platform.
    
    The scripts at https://github.com/thesofproject/acpi-scripts can be
    used to add the ACPI initrd overlays.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55261a2cddb5dc20a83f183e0bc9100e6725ebad
Author: Ryan Lee <ryans.lee@maximintegrated.com>
Date:   Thu Aug 23 18:37:08 2018 -0700

    ASoC: max98373: Added 10ms sleep after amp software reset
    
    [ Upstream commit ca917f9fe1a0fab3dde41bba4bbd173c5a3c5805 ]
    
    Signed-off-by: Ryan Lee <ryans.lee@maximintegrated.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 686da99baa283ac265e789c707a613ef36d29fdb
Author: Thiago Jung Bauermann <bauerman@linux.ibm.com>
Date:   Tue Jul 24 23:57:25 2018 -0300

    selftests: kselftest: Remove outdated comment
    
    [ Upstream commit c31d02d1290e1e82a08015199e408228e152991f ]
    
    Commit 3c07aaef6598 ("selftests: kselftest: change KSFT_SKIP=4 instead of
    KSFT_PASS") reverted commit 11867a77eb85 ("selftests: kselftest framework:
    change skip exit code to 0") but missed removing the comment which that
    commit added, so do that now.
    
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a4d1b70e323e71b9992d0fc8dfe97d2395a9bd3
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Fri Aug 24 14:49:41 2018 +0200

    selftests: android: move config up a level
    
    [ Upstream commit 88bc243a3f22b9938c0b53c577dee28025cdb920 ]
    
    'make kselftest-merge' assumes that the config files for the tests are
    located under the 'main' test dir, like tools/testing/selftests/android/
    and not in a subdir to android.
    
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 334411face5a0c04bbae4d80102a16d5c6590dd5
Author: Oder Chiou <oder_chiou@realtek.com>
Date:   Wed Aug 15 14:47:49 2018 +0800

    ASoC: rt5514: Fix the issue of the delay volume applied again
    
    [ Upstream commit 6f0a256253f48095ba2e5bcdfbed41f21643c105 ]
    
    After our evaluation, we need to modify the default values to make sure
    the volume applied immediately.
    
    Signed-off-by: Oder Chiou <oder_chiou@realtek.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4c577698c7c05107ec4a388d7cd326b2b78cd4a
Author: Ryan Lee <ryans.lee@maximintegrated.com>
Date:   Wed Aug 15 18:53:38 2018 -0700

    ASoC: max98373: Added speaker FS gain cotnrol register to volatile.
    
    [ Upstream commit 0d22825255f25adb6a609f130b42c752d3fd0f5d ]
    
    Signed-off-by: Ryan Lee <ryans.lee@maximintegrated.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e6b32ed04131df7882a834d1c0ab81b82a0fb25
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Wed Aug 15 13:11:35 2018 +0100

    ASoC: dapm: Fix NULL pointer deference on CODEC to CODEC DAIs
    
    [ Upstream commit 249dc49576fc953a7378b916c6a6d47ea81e4da2 ]
    
    Commit a655de808cbde ("ASoC: core: Allow topology to override
    machine driver FE DAI link config.") caused soc_dai_hw_params to
    be come dependent on the substream private_data being set with
    a pointer to the snd_soc_pcm_runtime. Currently, CODEC to CODEC
    links don't set this, which causes a NULL pointer dereference:
    
    [<4069de54>] (soc_dai_hw_params) from
    [<40694b68>] (snd_soc_dai_link_event+0x1a0/0x380)
    
    Since the ASoC core in general assumes that the substream
    private_data will be set to a pointer to the snd_soc_pcm_runtime,
    update the CODEC to CODEC links to respect this.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffac8fa2bee5cf63ee11666e5b60639b5f800007
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Wed Sep 26 10:35:42 2018 +0800

    vxlan: fill ttl inherit info
    
    [ Upstream commit 8fd780698745ba121530c5c20fd237aacde4c371 ]
    
    When add vxlan ttl inherit support, I forgot to fill it when dump
    vlxan info. Fix it now.
    
    Fixes: 72f6d71e491e6 ("vxlan: add ttl inherit support")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 241e5a13a5ad75fd0b5a47b583e098fa08917d5c
Author: Maciej S. Szmigiero <mail@maciej.szmigiero.name>
Date:   Thu Oct 11 16:02:10 2018 +0200

    r8169: set RX_MULTI_EN bit in RxConfig for 8168F-family chips
    
    [ Upstream commit 511cfd580f23b0e0fcd5659931ef14c6e2c062b0 ]
    
    It has been reported that since
    commit 05212ba8132b42 ("r8169: set RxConfig after tx/rx is enabled for RTL8169sb/8110sb devices")
    at least RTL_GIGA_MAC_VER_38 NICs work erratically after a resume from
    suspend.
    The problem has been traced to a missing RX_MULTI_EN bit in the RxConfig
    register.
    We already set this bit for RTL_GIGA_MAC_VER_35 NICs of the same 8168F
    chip family so let's do it also for its other siblings: RTL_GIGA_MAC_VER_36
    and RTL_GIGA_MAC_VER_38.
    
    Curiously, the NIC seems to work fine after a system boot without having
    this bit set as long as the system isn't suspended and resumed.
    
    Fixes: 05212ba8132b42 ("r8169: set RxConfig after tx/rx is enabled for RTL8169sb/8110sb devices")
    Reported-by: Chris Clayton <chris2553@googlemail.com>
    Signed-off-by: Maciej S. Szmigiero <mail@maciej.szmigiero.name>
    Reviewed-by: Heiner Kallweit <hkallweit1@gmail.com>
    Tested-by: Chris Clayton <chris2553@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87441df1e19ecc25a2f4f142da01239d66cf5e73
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Sep 28 23:51:54 2018 +0200

    r8169: fix network stalls due to missing bit TXCFG_AUTO_FIFO
    
    [ Upstream commit ad5f97faff4231e72b96bd96adbe1b6e977a9b86 ]
    
    Some of the chip-specific hw_start functions set bit TXCFG_AUTO_FIFO
    in register TxConfig. The original patch changed the order of some
    calls resulting in these changes being overwritten by
    rtl_set_tx_config_registers() in rtl_hw_start(). This eventually
    resulted in network stalls especially under high load.
    
    Analyzing the chip-specific hw_start functions all chip version from
    34, with the exception of version 39, need this bit set.
    This patch moves setting this bit to rtl_set_tx_config_registers().
    
    Fixes: 4fd48c4ac0a0 ("r8169: move common initializations to tp->hw_start")
    Reported-by: Ortwin Glück <odi@odi.ch>
    Reported-by: David Arendt <admin@prnet.org>
    Root-caused-by: Maciej S. Szmigiero <mail@maciej.szmigiero.name>
    Tested-by: Tony Atkinson <tatkinson@linux.com>
    Tested-by: David Arendt <admin@prnet.org>
    Tested-by: Ortwin Glück <odi@odi.ch>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 761ea5beff7115f437f9ed0f842ddf1a16338f8d
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@cavium.com>
Date:   Thu Sep 27 04:12:10 2018 -0700

    qed: Fix shmem structure inconsistency between driver and the mfw.
    
    [ Upstream commit 5f672090e44f4951084c5e1d6b0668a5fc422af8 ]
    
    The structure shared between driver and the management FW (mfw) differ in
    sizes. This would lead to issues when driver try to access the structure
    members which are not-aligned with the mfw copy e.g., data_ptr usage in the
    case of mfw_tlv request.
    Align the driver structure with mfw copy, add reserved field(s) to driver
    structure for the members not used by the driver.
    
    Fixes: dd006921d67f ("qed: Add MFW interfaces for TLV request support.)
    Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6133d8e499e6a88b9a938243e1b8a6aa1f79ec8c
Author: Antoine Tenart <antoine.tenart@bootlin.com>
Date:   Thu Sep 20 12:08:54 2018 +0200

    net: mscc: fix the frame extraction into the skb
    
    [ Upstream commit 652ef42c134da1bbb03bd4c9b4291dfaf8d7febb ]
    
    When extracting frames from the Ocelot switch, the frame check sequence
    (FCS) is present at the end of the data extracted. The FCS was put into
    the sk buffer which introduced some issues (as length related ones), as
    the FCS shouldn't be part of an Rx sk buffer.
    
    This patch fixes the Ocelot switch extraction behaviour by discarding
    the FCS.
    
    Fixes: a556c76adc05 ("net: mscc: Add initial Ocelot switch support")
    Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d29a558b56ee952e452969ac7c90d0a7bf2f58bb
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Tue Oct 9 07:02:01 2018 +0300

    net/ipv6: stop leaking percpu memory in fib6 info
    
    [ Upstream commit 7abab7b9b498650404800a08765f44929fee8f31 ]
    
    The fib6_info_alloc() function allocates percpu memory to hold per CPU
    pointers to rt6_info, but this memory is never freed. Fix it.
    
    Fixes: a64efe142f5e ("net/ipv6: introduce fib6_info struct and helpers")
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3827b9bc3ba2bcfe5eef2fa2d440d7e1734f362
Author: David Ahern <dsahern@gmail.com>
Date:   Wed Sep 26 17:35:14 2018 -0700

    net/ipv6: Remove extra call to ip6_convert_metrics for multipath case
    
    [ Upstream commit 36f19d5b4f99fa9fa8263877e5f8e669d7fddc14 ]
    
    The change to move metrics from the dst to rt6_info moved the call
    to ip6_convert_metrics from ip6_route_add to ip6_route_info_create. In
    doing so it makes the call in ip6_route_info_append redundant and
    actually leaks the metrics installed as part of the ip6_route_info_create.
    Remove the now unnecessary call.
    
    Fixes: d4ead6b34b67f ("net/ipv6: move metrics from dst to rt6_info")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47049f54f89db90ad5effb3100735950fc0dcee2
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Fri Oct 5 00:26:03 2018 -0400

    bnxt_en: get the reduced max_irqs by the ones used by RDMA
    
    [ Upstream commit c78fe058879bdea919d44f23e21da26f603e9166 ]
    
    When getting the max rings supported, get the reduced max_irqs
    by the ones used by RDMA.
    
    If the number MSIX is the limiting factor, this bug may cause the
    max ring count to be higher than it should be when RDMA driver is
    loaded and may result in ring allocation failures.
    
    Fixes: 30f529473ec9 ("bnxt_en: Do not modify max IRQ count after RDMA driver requests/frees IRQs.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dce53396b52db1646f93b3ff3a14f4a5a8cf9211
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Fri Oct 5 00:26:01 2018 -0400

    bnxt_en: Fix enables field in HWRM_QUEUE_COS2BW_CFG request
    
    [ Upstream commit 5db0e0969af6501ad45fe0494039d3b9c797822b ]
    
    In HWRM_QUEUE_COS2BW_CFG request, enables field should have the bits
    set only for the queue ids which are having the valid parameters.
    
    This causes firmware to return error when the TC to hardware CoS queue
    mapping is not 1:1 during DCBNL ETS setup.
    
    Fixes: 2e8ef77ee0ff ("bnxt_en: Add TC to hardware QoS queue mapping logic.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23631aa634ef6574a19757981530cabab3a6f44d
Author: Alaa Hleihel <alaa@mellanox.com>
Date:   Mon Sep 3 10:38:14 2018 +0300

    net/mlx5: Check for SQ and not RQ state when modifying hairpin SQ
    
    [ Upstream commit 6b359d5550a1ae7a1269c9dc1dd73dfdc4d6fe58 ]
    
    When modifying hairpin SQ, instead of checking if the next state equals
    to MLX5_SQC_STATE_RDY, we compare it against the MLX5_RQC_STATE_RDY enum
    value.
    
    The code worked since both of MLX5_RQC_STATE_RDY and MLX5_SQC_STATE_RDY
    have the same value today.
    
    This patch fixes this issue.
    
    Fixes: 18e568c390c6 ("net/mlx5: Hairpin pair core object setup")
    Change-Id: I6758aa7b4bd137966ae28206b70648c5bc223b46
    Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6691a126ed6310497add2bce33614d0707546035
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Oct 9 17:48:15 2018 +0200

    net: ipv4: don't let PMTU updates increase route MTU
    
    [ Upstream commit 28d35bcdd3925e7293408cdb8aa5f2aac5f0d6e3 ]
    
    When an MTU update with PMTU smaller than net.ipv4.route.min_pmtu is
    received, we must clamp its value. However, we can receive a PMTU
    exception with PMTU < old_mtu < ip_rt_min_pmtu, which would lead to an
    increase in PMTU.
    
    To fix this, take the smallest of the old MTU and ip_rt_min_pmtu.
    
    Before this patch, in case of an update, the exception's MTU would
    always change. Now, an exception can have only its lock flag updated,
    but not the MTU, so we need to add a check on locking to the following
    "is this exception getting updated, or close to expiring?" test.
    
    Fixes: d52e5a7e7ca4 ("ipv4: lock mtu in fnhe when received PMTU < net.ipv4.route.min_pmtu")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 530a9463cbe6b9f64ef11a23840c118f89aa7a64
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Fri Oct 5 00:26:00 2018 -0400

    bnxt_en: Fix VNIC reservations on the PF.
    
    [ Upstream commit dbe80d446c859873820eedfff4abc61c71f1927b ]
    
    The enables bit for VNIC was set wrong when calling the HWRM_FUNC_CFG
    firmware call to reserve VNICs.  This has the effect that the firmware
    will keep a large number of VNICs for the PF, and having very few for
    VFs.  DPDK driver running on the VFs, which requires more VNICs, may not
    work properly as a result.
    
    Fixes: 674f50a5b026 ("bnxt_en: Implement new method to reserve rings.")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d4fe8e6344bac8703046822685b3af217db683c
Author: David Ahern <dsahern@gmail.com>
Date:   Fri Sep 28 12:28:41 2018 -0700

    rtnetlink: Fail dump if target netnsid is invalid
    
    [ Upstream commit 893626d6a353d1356528f94e081246ecf233d77a ]
    
    Link dumps can return results from a target namespace. If the namespace id
    is invalid, then the dump request should fail if get_target_net fails
    rather than continuing with a dump of the current namespace.
    
    Fixes: 79e1ad148c844 ("rtnetlink: use netnsid to query interface")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36298c66d8dca213888f42181a87afb522381552
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Oct 4 20:24:13 2018 -0700

    net: dsa: b53: Keep CPU port as tagged in all VLANs
    
    [ Upstream commit ca8931948344c485569b04821d1f6bcebccd376b ]
    
    Commit c499696e7901 ("net: dsa: b53: Stop using dev->cpu_port
    incorrectly") was a bit too trigger happy in removing the CPU port from
    the VLAN membership because we rely on DSA to program the CPU port VLAN,
    which it does, except it does not bother itself with tagged/untagged and
    just usese untagged.
    
    Having the CPU port "follow" the user ports tagged/untagged is not great
    and does not allow for properly differentiating, so keep the CPU port
    tagged in all VLANs.
    
    Reported-by: Gerhard Wiesinger <lists@wiesinger.com>
    Fixes: c499696e7901 ("net: dsa: b53: Stop using dev->cpu_port incorrectly")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efef3f2073d166b7403380106eeeb2209cb65220
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 2 12:35:05 2018 -0700

    inet: make sure to grab rcu_read_lock before using ireq->ireq_opt
    
    [ Upstream commit 2ab2ddd301a22ca3c5f0b743593e4ad2953dfa53 ]
    
    Timer handlers do not imply rcu_read_lock(), so my recent fix
    triggered a LOCKDEP warning when SYNACK is retransmit.
    
    Lets add rcu_read_lock()/rcu_read_unlock() pairs around ireq->ireq_opt
    usages instead of guessing what is done by callers, since it is
    not worth the pain.
    
    Get rid of ireq_opt_deref() helper since it hides the logic
    without real benefit, since it is now a standard rcu_dereference().
    
    Fixes: 1ad98e9d1bdf ("tcp/dccp: fix lockdep issue when SYN is backlogged")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fd4b0122ac320382d0d259e47a80009cf71751d
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 1 15:02:26 2018 -0700

    tcp/dccp: fix lockdep issue when SYN is backlogged
    
    [ Upstream commit 1ad98e9d1bdf4724c0a8532fabd84bf3c457c2bc ]
    
    In normal SYN processing, packets are handled without listener
    lock and in RCU protected ingress path.
    
    But syzkaller is known to be able to trick us and SYN
    packets might be processed in process context, after being
    queued into socket backlog.
    
    In commit 06f877d613be ("tcp/dccp: fix other lockdep splats
    accessing ireq_opt") I made a very stupid fix, that happened
    to work mostly because of the regular path being RCU protected.
    
    Really the thing protecting ireq->ireq_opt is RCU read lock,
    and the pseudo request refcnt is not relevant.
    
    This patch extends what I did in commit 449809a66c1d ("tcp/dccp:
    block BH for SYN processing") by adding an extra rcu_read_{lock|unlock}
    pair in the paths that might be taken when processing SYN from
    socket backlog (thus possibly in process context)
    
    Fixes: 06f877d613be ("tcp/dccp: fix other lockdep splats accessing ireq_opt")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54d72415f8b2c3f1fbbc6c0ba637159e0951d628
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue Sep 18 16:48:53 2018 +0100

    sfp: fix oops with ethtool -m
    
    [ Upstream commit 126d6848ef13958e1cb959e96c21d19bc498ade9 ]
    
    If a network interface is created prior to the SFP socket being
    available, ethtool can request module information.  This unfortunately
    leads to an oops:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000008
    pgd = (ptrval)
    [00000008] *pgd=7c400831, *pte=00000000, *ppte=00000000
    Internal error: Oops: 17 [#1] SMP ARM
    Modules linked in:
    CPU: 0 PID: 1480 Comm: ethtool Not tainted 4.19.0-rc3 #138
    Hardware name: Broadcom Northstar Plus SoC
    PC is at sfp_get_module_info+0x8/0x10
    LR is at dev_ethtool+0x218c/0x2afc
    
    Fix this by not filling in the network device's SFP bus pointer until
    SFP is fully bound, thereby avoiding the core calling into the SFP bus
    code.
    
    Fixes: ce0aa27ff3f6 ("sfp: add sfp-bus to bridge between network devices and sfp cages")
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24205e4e62ddaf869b748dd06e052caefbf7f9de
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Wed Oct 3 19:04:49 2018 +0300

    net: phy: phylink: fix SFP interface autodetection
    
    [ Upstream commit 7e4183752735deb7543e179a44f4f4b44917cd6f ]
    
    When connecting SFP PHY to phylink use the detected interface.
    Otherwise, the link fails to come up when the configured 'phy-mode'
    differs from the SFP detected mode.
    
    Move most of phylink_connect_phy() into __phylink_connect_phy(), and
    leave phylink_connect_phy() as a wrapper. phylink_sfp_connect_phy() can
    now pass the SFP detected PHY interface to __phylink_connect_phy().
    
    This fixes 1GB SFP module link up on eth3 of the Macchiatobin board that
    is configured in the DT to "2500base-x" phy-mode.
    
    Fixes: 9525ae83959b6 ("phylink: add phylink infrastructure")
    Suggested-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37b309773a67675136a7c32f22d66dc7a1d19413
Author: Maciej Żenczykowski <maze@google.com>
Date:   Sat Sep 22 01:34:01 2018 -0700

    net-ethtool: ETHTOOL_GUFO did not and should not require CAP_NET_ADMIN
    
    [ Upstream commit 474ff2600889e16280dbc6ada8bfecb216169a70 ]
    
    So it should not fail with EPERM even though it is no longer implemented...
    
    This is a fix for:
      (userns)$ egrep ^Cap /proc/self/status
      CapInh: 0000003fffffffff
      CapPrm: 0000003fffffffff
      CapEff: 0000003fffffffff
      CapBnd: 0000003fffffffff
      CapAmb: 0000003fffffffff
    
      (userns)$ tcpdump -i usb_rndis0
      tcpdump: WARNING: usb_rndis0: SIOCETHTOOL(ETHTOOL_GUFO) ioctl failed: Operation not permitted
      Warning: Kernel filter failed: Bad file descriptor
      tcpdump: can't remove kernel filter: Bad file descriptor
    
    With this change it returns EOPNOTSUPP instead of EPERM.
    
    See also https://github.com/the-tcpdump-group/libpcap/issues/689
    
    Fixes: 08a00fea6de2 "net: Remove references to NETIF_F_UFO from ethtool."
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2402fbb7aa01b24487d57d95fe8a2f9d36d994c1
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Wed Sep 19 19:01:37 2018 +0200

    bnxt_en: don't try to offload VLAN 'modify' action
    
    [ Upstream commit 8c6ec3613e7b0aade20a3196169c0bab32ed3e3f ]
    
    bnxt offload code currently supports only 'push' and 'pop' operation: let
    .ndo_setup_tc() return -EOPNOTSUPP if VLAN 'modify' action is configured.
    
    Fixes: 2ae7408fedfe ("bnxt_en: bnxt: add TC flower filter offload support")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Acked-by: Sathya Perla <sathya.perla@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f219cd9712818244e1597818e1545fdbf53a07ca
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Oct 2 10:10:14 2018 -0700

    nfp: avoid soft lockups under control message storm
    
    [ Upstream commit ff58e2df62ce29d0552278c290ae494b30fe0c6f ]
    
    When FW floods the driver with control messages try to exit the cmsg
    processing loop every now and then to avoid soft lockups.  Cmsg
    processing is generally very lightweight so 512 seems like a reasonable
    budget, which should not be exceeded under normal conditions.
    
    Fixes: 77ece8d5f196 ("nfp: add control vNIC datapath")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Tested-by: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b4588d75b8992a0c6a242c0cbcd551bce92fff2
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Mon Sep 17 09:22:56 2018 +0100

    net: stmmac: Rework coalesce timer and fix multi-queue races
    
    [ Upstream commit 8fce3331702316d4bcfeb0771c09ac75d2192bbc ]
    
    This follows David Miller advice and tries to fix coalesce timer in
    multi-queue scenarios.
    
    We are now using per-queue coalesce values and per-queue TX timer.
    
    Coalesce timer default values was changed to 1ms and the coalesce frames
    to 25.
    
    Tested in B2B setup between XGMAC2 and GMAC5.
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Fixes:  ce736788e8a ("net: stmmac: adding multiple buffers for TX")
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Neil Armstrong <narmstrong@baylibre.com>
    Cc: Jerome Brunet <jbrunet@baylibre.com>
    Cc: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Joao Pinto <jpinto@synopsys.com>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f389cd37d10d1c041fba9a641cbcae43a54f924
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Tue Oct 2 12:14:34 2018 -0700

    bonding: fix warning message
    
    [ Upstream commit 0f3b914c9cfcd7bbedd445dc4ac5dd999fa213c2 ]
    
    RX queue config for bonding master could be different from its slave
    device(s). With the commit 6a9e461f6fe4 ("bonding: pass link-local
    packets to bonding master also."), the packet is reinjected into stack
    with skb->dev as bonding master. This potentially triggers the
    message:
    
       "bondX received packet on queue Y, but number of RX queues is Z"
    
    whenever the queue that packet is received on is higher than the
    numrxqueues on bonding master (Y > Z).
    
    Fixes: 6a9e461f6fe4 ("bonding: pass link-local packets to bonding master also.")
    Reported-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fb48fe95e417317a6b12ef38dfb743e604bbd4d
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Mon Sep 24 14:39:42 2018 -0700

    bonding: pass link-local packets to bonding master also.
    
    [ Upstream commit 6a9e461f6fe4434e6172304b69774daff9a3ac4c ]
    
    Commit b89f04c61efe ("bonding: deliver link-local packets with
    skb->dev set to link that packets arrived on") changed the behavior
    of how link-local-multicast packets are processed. The change in
    the behavior broke some legacy use cases where these packets are
    expected to arrive on bonding master device also.
    
    This patch passes the packet to the stack with the link it arrived
    on as well as passes to the bonding-master device to preserve the
    legacy use case.
    
    Fixes: b89f04c61efe ("bonding: deliver link-local packets with skb->dev set to link that packets arrived on")
    Reported-by: Michal Soltys <soltys@ziu.info>
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92a2a40c876fefea0e4fe9ef97bbf0b0daafeaa4
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Sun Sep 16 14:45:27 2018 +0300

    net/mlx5: E-Switch, Fix out of bound access when setting vport rate
    
    [ Upstream commit 11aa5800ed66ed0415b7509f02881c76417d212a ]
    
    The code that deals with eswitch vport bw guarantee was going beyond the
    eswitch vport array limit, fix that.  This was pointed out by the kernel
    address sanitizer (KASAN).
    
    The error from KASAN log:
    [2018-09-15 15:04:45] BUG: KASAN: slab-out-of-bounds in
    mlx5_eswitch_set_vport_rate+0x8c1/0xae0 [mlx5_core]
    
    Fixes: c9497c98901c ("net/mlx5: Add support for setting VF min rate")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02e16d375ee6b66819fe40b913a2fe60039d0677
Author: Friedemann Gerold <f.gerold@b-c-s.de>
Date:   Sat Sep 15 18:03:39 2018 +0300

    net: aquantia: memory corruption on jumbo frames
    
    [ Upstream commit d26ed6b0e5e23190d43ab34bc69cbecdc464a2cf ]
    
    This patch fixes skb_shared area, which will be corrupted
    upon reception of 4K jumbo packets.
    
    Originally build_skb usage purpose was to reuse page for skb to eliminate
    needs of extra fragments. But that logic does not take into account that
    skb_shared_info should be reserved at the end of skb data area.
    
    In case packet data consumes all the page (4K), skb_shinfo location
    overflows the page. As a consequence, __build_skb zeroed shinfo data above
    the allocated page, corrupting next page.
    
    The issue is rarely seen in real life because jumbo are normally larger
    than 4K and that causes another code path to trigger.
    But it 100% reproducible with simple scapy packet, like:
    
        sendp(IP(dst="192.168.100.3") / TCP(dport=443) \
              / Raw(RandString(size=(4096-40))), iface="enp1s0")
    
    Fixes: 018423e90bee ("net: ethernet: aquantia: Add ring support code")
    
    Reported-by: Friedemann Gerold <f.gerold@b-c-s.de>
    Reported-by: Michael Rauch <michael@rauch.be>
    Signed-off-by: Friedemann Gerold <f.gerold@b-c-s.de>
    Tested-by: Nikita Danilov <nikita.danilov@aquantia.com>
    Signed-off-by: Igor Russkikh <igor.russkikh@aquantia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6db3fc2839be61f7b897ef35085f2c7ee7dbf665
Author: Jianbo Liu <jianbol@mellanox.com>
Date:   Sat Aug 25 03:29:58 2018 +0000

    net/mlx5e: Set vlan masks for all offloaded TC rules
    
    [ Upstream commit cee26487620bc9bc3c7db21b6984d91f7bae12ae ]
    
    In flow steering, if asked to, the hardware matches on the first ethertype
    which is not vlan. It's possible to set a rule as follows, which is meant
    to match on untagged packet, but will match on a vlan packet:
        tc filter add dev eth0 parent ffff: protocol ip flower ...
    
    To avoid this for packets with single tag, we set vlan masks to tell
    hardware to check the tags for every matched packet.
    
    Fixes: 095b6cfd69ce ('net/mlx5e: Add TC vlan match parsing')
    Signed-off-by: Jianbo Liu <jianbol@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42296a1641967fffd643505415634972e47ace20
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue Oct 9 16:48:57 2018 -0700

    net: dsa: bcm_sf2: Fix unbind ordering
    
    [ Upstream commit bf3b452b7af787b8bf27de6490dc4eedf6f97599 ]
    
    The order in which we release resources is unfortunately leading to bus
    errors while dismantling the port. This is because we set
    priv->wol_ports_mask to 0 to tell bcm_sf2_sw_suspend() that it is now
    permissible to clock gate the switch. Later on, when dsa_slave_destroy()
    comes in from dsa_unregister_switch() and calls
    dsa_switch_ops::port_disable, we perform the same dismantling again, and
    this time we hit registers that are clock gated.
    
    Make sure that dsa_unregister_switch() is the first thing that happens,
    which takes care of releasing all user visible resources, then proceed
    with clock gating hardware. We still need to set priv->wol_ports_mask to
    0 to make sure that an enabled port properly gets disabled in case it
    was previously used as part of Wake-on-LAN.
    
    Fixes: d9338023fb8e ("net: dsa: bcm_sf2: Make it a real platform device driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53afeb0b222beabc386f3ae02c47a005e59ce0a7
Author: Jianfeng Tan <jianfeng.tan@linux.alibaba.com>
Date:   Sat Sep 29 15:41:27 2018 +0000

    net/packet: fix packet drop as of virtio gso
    
    [ Upstream commit 9d2f67e43b73e8af7438be219b66a5de0cfa8bd9 ]
    
    When we use raw socket as the vhost backend, a packet from virito with
    gso offloading information, cannot be sent out in later validaton at
    xmit path, as we did not set correct skb->protocol which is further used
    for looking up the gso function.
    
    To fix this, we set this field according to virito hdr information.
    
    Fixes: e858fae2b0b8f4 ("virtio_net: use common code for virtio_net_hdr and skb GSO conversion")
    Signed-off-by: Jianfeng Tan <jianfeng.tan@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75ebeb2e6a60156279c2e9aaeff93290543aefca
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Mon Sep 17 09:22:57 2018 +0100

    net: stmmac: Fixup the tail addr setting in xmit path
    
    [ Upstream commit 0431100b3d82c509729ece1ab22ada2484e209c1 ]
    
    Currently we are always setting the tail address of descriptor list to
    the end of the pre-allocated list.
    
    According to databook this is not correct. Tail address should point to
    the last available descriptor + 1, which means we have to update the
    tail address everytime we call the xmit function.
    
    This should make no impact in older versions of MAC but in newer
    versions there are some DMA features which allows the IP to fetch
    descriptors in advance and in a non sequential order so its critical
    that we set the tail address correctly.
    
    Signed-off-by: Jose Abreu <joabreu@synopsys.com>
    Fixes: f748be531d70 ("stmmac: support new GMAC4")
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Joao Pinto <jpinto@synopsys.com>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c5eff9c2cf2d7a3d9ce455269224a51e01f53a3
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 28 14:51:49 2018 -0700

    tun: napi flags belong to tfile
    
    [ Upstream commit af3fb24eecb2c59246e03c99386037fd5ad84ffd ]
    
    Since tun->flags might be shared by multiple tfile structures,
    it is better to make sure tun_get_user() is using the flags
    for the current tfile.
    
    Presence of the READ_ONCE() in tun_napi_frags_enabled() gave a hint
    of what could happen, but we need something stronger to please
    syzbot.
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 13647 Comm: syz-executor5 Not tainted 4.19.0-rc5+ #59
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:dev_gro_receive+0x132/0x2720 net/core/dev.c:5427
    Code: 48 c1 ea 03 80 3c 02 00 0f 85 6e 20 00 00 48 b8 00 00 00 00 00 fc ff df 4d 8b 6e 10 49 8d bd d0 00 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 59 20 00 00 4d 8b a5 d0 00 00 00 31 ff 41 81 e4
    RSP: 0018:ffff8801c400f410 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff8618d325
    RDX: 000000000000001a RSI: ffffffff86189f97 RDI: 00000000000000d0
    RBP: ffff8801c400f608 R08: ffff8801c8fb4300 R09: 0000000000000000
    R10: ffffed0038801ed7 R11: 0000000000000003 R12: ffff8801d327d358
    R13: 0000000000000000 R14: ffff8801c16dd8c0 R15: 0000000000000004
    FS:  00007fe003615700(0000) GS:ffff8801dac00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fe1f3c43db8 CR3: 00000001bebb2000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     napi_gro_frags+0x3f4/0xc90 net/core/dev.c:5715
     tun_get_user+0x31d5/0x42a0 drivers/net/tun.c:1922
     tun_chr_write_iter+0xb9/0x154 drivers/net/tun.c:1967
     call_write_iter include/linux/fs.h:1808 [inline]
     new_sync_write fs/read_write.c:474 [inline]
     __vfs_write+0x6b8/0x9f0 fs/read_write.c:487
     vfs_write+0x1fc/0x560 fs/read_write.c:549
     ksys_write+0x101/0x260 fs/read_write.c:598
     __do_sys_write fs/read_write.c:610 [inline]
     __se_sys_write fs/read_write.c:607 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:607
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457579
    Code: 1d b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 eb b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fe003614c78 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457579
    RDX: 0000000000000012 RSI: 0000000020000000 RDI: 000000000000000a
    RBP: 000000000072c040 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe0036156d4
    R13: 00000000004c5574 R14: 00000000004d8e98 R15: 00000000ffffffff
    Modules linked in:
    
    RIP: 0010:dev_gro_receive+0x132/0x2720 net/core/dev.c:5427
    Code: 48 c1 ea 03 80 3c 02 00 0f 85 6e 20 00 00 48 b8 00 00 00 00 00 fc ff df 4d 8b 6e 10 49 8d bd d0 00 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 59 20 00 00 4d 8b a5 d0 00 00 00 31 ff 41 81 e4
    RSP: 0018:ffff8801c400f410 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff8618d325
    RDX: 000000000000001a RSI: ffffffff86189f97 RDI: 00000000000000d0
    RBP: ffff8801c400f608 R08: ffff8801c8fb4300 R09: 0000000000000000
    R10: ffffed0038801ed7 R11: 0000000000000003 R12: ffff8801d327d358
    R13: 0000000000000000 R14: ffff8801c16dd8c0 R15: 0000000000000004
    FS:  00007fe003615700(0000) GS:ffff8801dac00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fe1f3c43db8 CR3: 00000001bebb2000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Fixes: 90e33d459407 ("tun: enable napi_gro_frags() for TUN/TAP driver")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d013c6b952f011c980bb4ebdc83e6511d3fa4358
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 28 14:51:48 2018 -0700

    tun: initialize napi_mutex unconditionally
    
    [ Upstream commit c7256f579f8302ce2c038181c30060d0b40017b2 ]
    
    This is the first part to fix following syzbot report :
    
    console output: https://syzkaller.appspot.com/x/log.txt?x=145378e6400000
    kernel config:  https://syzkaller.appspot.com/x/.config?x=443816db871edd66
    dashboard link: https://syzkaller.appspot.com/bug?extid=e662df0ac1d753b57e80
    
    Following patch is fixing the race condition, but it seems safer
    to initialize this mutex at tfile creation anyway.
    
    Fixes: 90e33d459407 ("tun: enable napi_gro_frags() for TUN/TAP driver")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+e662df0ac1d753b57e80@syzkaller.appspotmail.com
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d96410f397bbcaee3e1b81d50e37d35cfa6795c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 28 14:51:47 2018 -0700

    tun: remove unused parameters
    
    [ Upstream commit 06e55addd3f40b5294e448c2cb7605ca4f28c2e3 ]
    
    tun_napi_disable() and tun_napi_del() do not need
    a pointer to the tun_struct
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 095a5309c6c6dac7947a32a85b954b26517591a2
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Tue Oct 2 18:52:03 2018 -0600

    net: qualcomm: rmnet: Fix incorrect allocation flag in receive path
    
    [ Upstream commit ec405641e2b73160e26ef17580d0cf28565d146c ]
    
    The incoming skb needs to be reallocated in case the headroom
    is not sufficient to adjust the ethernet header. This allocation
    needs to be atomic otherwise it results in this splat
    
     [<600601bb>] ___might_sleep+0x185/0x1a3
     [<603f6314>] ? _raw_spin_unlock_irqrestore+0x0/0x27
     [<60069bb0>] ? __wake_up_common_lock+0x95/0xd1
     [<600602b0>] __might_sleep+0xd7/0xe2
     [<60065598>] ? enqueue_task_fair+0x112/0x209
     [<600eea13>] __kmalloc_track_caller+0x5d/0x124
     [<600ee9b6>] ? __kmalloc_track_caller+0x0/0x124
     [<602696d5>] __kmalloc_reserve.isra.34+0x30/0x7e
     [<603f629b>] ? _raw_spin_lock_irqsave+0x0/0x3d
     [<6026b744>] pskb_expand_head+0xbf/0x310
     [<6025ca6a>] rmnet_rx_handler+0x7e/0x16b
     [<6025c9ec>] ? rmnet_rx_handler+0x0/0x16b
     [<6027ad0c>] __netif_receive_skb_core+0x301/0x96f
     [<60033c17>] ? set_signals+0x0/0x40
     [<6027bbcb>] __netif_receive_skb+0x24/0x8e
    
    Fixes: 74692caf1b0b ("net: qualcomm: rmnet: Process packets over ethernet")
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9db5df4c92dd2f5e6fe7356a3115993729b6dc36
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Tue Oct 2 18:52:02 2018 -0600

    net: qualcomm: rmnet: Fix incorrect allocation flag in transmit
    
    [ Upstream commit 6392ff3c8e4c23d0a09b0ae9f94feb3effed490b ]
    
    The incoming skb needs to be reallocated in case the headroom
    is not sufficient to add the MAP header. This allocation needs to
    be atomic otherwise it results in the following splat
    
    [32805.801456] BUG: sleeping function called from invalid context
    [32805.841141] Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    [32805.904773] task: ffffffd7c5f62280 task.stack: ffffff80464a8000
    [32805.910851] pc : ___might_sleep+0x180/0x188
    [32805.915143] lr : ___might_sleep+0x180/0x188
    [32806.131520] Call trace:
    [32806.134041]  ___might_sleep+0x180/0x188
    [32806.137980]  __might_sleep+0x50/0x84
    [32806.141653]  __kmalloc_track_caller+0x80/0x3bc
    [32806.146215]  __kmalloc_reserve+0x3c/0x88
    [32806.150241]  pskb_expand_head+0x74/0x288
    [32806.154269]  rmnet_egress_handler+0xb0/0x1d8
    [32806.162239]  rmnet_vnd_start_xmit+0xc8/0x13c
    [32806.166627]  dev_hard_start_xmit+0x148/0x280
    [32806.181181]  sch_direct_xmit+0xa4/0x198
    [32806.185125]  __qdisc_run+0x1f8/0x310
    [32806.188803]  net_tx_action+0x23c/0x26c
    [32806.192655]  __do_softirq+0x220/0x408
    [32806.196420]  do_softirq+0x4c/0x70
    
    Fixes: ceed73a2cf4a ("drivers: net: ethernet: qualcomm: rmnet: Initial implementation")
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3283c92e91f736bebe6412f09f248b8dc55cf424
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Tue Oct 2 18:52:01 2018 -0600

    net: qualcomm: rmnet: Skip processing loopback packets
    
    [ Upstream commit a07f388e2cde2be74b263f85df6f672fea0305a1 ]
    
    RMNET RX handler was processing invalid packets that were
    originally sent on the real device and were looped back via
    dev_loopback_xmit(). This was detected using syzkaller.
    
    Fixes: ceed73a2cf4a ("drivers: net: ethernet: qualcomm: rmnet: Initial implementation")
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ab83c6a1fb490c66e7c41eb1d6266dec370e834
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Thu Oct 4 13:37:32 2018 +0200

    udp: Unbreak modules that rely on external __skb_recv_udp() availability
    
    [ Upstream commit 7e823644b60555f70f241274b8d0120dd919269a ]
    
    Commit 2276f58ac589 ("udp: use a separate rx queue for packet reception")
    turned static inline __skb_recv_udp() from being a trivial helper around
    __skb_recv_datagram() into a UDP specific implementaion, making it
    EXPORT_SYMBOL_GPL() at the same time.
    
    There are external modules that got broken by __skb_recv_udp() not being
    visible to them. Let's unbreak them by making __skb_recv_udp EXPORT_SYMBOL().
    
    Rationale (one of those) why this is actually "technically correct" thing
    to do: __skb_recv_udp() used to be an inline wrapper around
    __skb_recv_datagram(), which itself (still, and correctly so, I believe)
    is EXPORT_SYMBOL().
    
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Fixes: 2276f58ac589 ("udp: use a separate rx queue for packet reception")
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f6017d6ef53b05afa2f3e1323855e09a94c5c6b
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Sep 25 18:21:58 2018 +0200

    tipc: fix flow control accounting for implicit connect
    
    [ Upstream commit 92ef12b32feab8f277b69e9fb89ede2796777f4d ]
    
    In the case of implicit connect message with data > 1K, the flow
    control accounting is incorrect. At this state, the socket does not
    know the peer nodes capability and falls back to legacy flow control
    by return 1, however the receiver of this message will perform the
    new block accounting. This leads to a slack and eventually traffic
    disturbance.
    
    In this commit, we perform tipc_node_get_capabilities() at implicit
    connect and perform accounting based on the peer's capability.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0240ca1b11d39189adced65744af015cf5c1a6be
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Mon Oct 1 12:21:59 2018 +0300

    team: Forbid enslaving team device to itself
    
    [ Upstream commit 471b83bd8bbe4e89743683ef8ecb78f7029d8288 ]
    
    team's ndo_add_slave() acquires 'team->lock' and later tries to open the
    newly enslaved device via dev_open(). This emits a 'NETDEV_UP' event
    that causes the VLAN driver to add VLAN 0 on the team device. team's
    ndo_vlan_rx_add_vid() will also try to acquire 'team->lock' and
    deadlock.
    
    Fix this by checking early at the enslavement function that a team
    device is not being enslaved to itself.
    
    A similar check was added to the bond driver in commit 09a89c219baf
    ("bonding: disallow enslaving a bond to itself").
    
    WARNING: possible recursive locking detected
    4.18.0-rc7+ #176 Not tainted
    --------------------------------------------
    syz-executor4/6391 is trying to acquire lock:
    (____ptrval____) (&team->lock){+.+.}, at: team_vlan_rx_add_vid+0x3b/0x1e0 drivers/net/team/team.c:1868
    
    but task is already holding lock:
    (____ptrval____) (&team->lock){+.+.}, at: team_add_slave+0xdb/0x1c30 drivers/net/team/team.c:1947
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&team->lock);
      lock(&team->lock);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    2 locks held by syz-executor4/6391:
     #0: (____ptrval____) (rtnl_mutex){+.+.}, at: rtnl_lock net/core/rtnetlink.c:77 [inline]
     #0: (____ptrval____) (rtnl_mutex){+.+.}, at: rtnetlink_rcv_msg+0x412/0xc30 net/core/rtnetlink.c:4662
     #1: (____ptrval____) (&team->lock){+.+.}, at: team_add_slave+0xdb/0x1c30 drivers/net/team/team.c:1947
    
    stack backtrace:
    CPU: 1 PID: 6391 Comm: syz-executor4 Not tainted 4.18.0-rc7+ #176
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x2b4 lib/dump_stack.c:113
     print_deadlock_bug kernel/locking/lockdep.c:1765 [inline]
     check_deadlock kernel/locking/lockdep.c:1809 [inline]
     validate_chain kernel/locking/lockdep.c:2405 [inline]
     __lock_acquire.cold.64+0x1fb/0x486 kernel/locking/lockdep.c:3435
     lock_acquire+0x1e4/0x540 kernel/locking/lockdep.c:3924
     __mutex_lock_common kernel/locking/mutex.c:757 [inline]
     __mutex_lock+0x176/0x1820 kernel/locking/mutex.c:894
     mutex_lock_nested+0x16/0x20 kernel/locking/mutex.c:909
     team_vlan_rx_add_vid+0x3b/0x1e0 drivers/net/team/team.c:1868
     vlan_add_rx_filter_info+0x14a/0x1d0 net/8021q/vlan_core.c:210
     __vlan_vid_add net/8021q/vlan_core.c:278 [inline]
     vlan_vid_add+0x63e/0x9d0 net/8021q/vlan_core.c:308
     vlan_device_event.cold.12+0x2a/0x2f net/8021q/vlan.c:381
     notifier_call_chain+0x180/0x390 kernel/notifier.c:93
     __raw_notifier_call_chain kernel/notifier.c:394 [inline]
     raw_notifier_call_chain+0x2d/0x40 kernel/notifier.c:401
     call_netdevice_notifiers_info+0x3f/0x90 net/core/dev.c:1735
     call_netdevice_notifiers net/core/dev.c:1753 [inline]
     dev_open+0x173/0x1b0 net/core/dev.c:1433
     team_port_add drivers/net/team/team.c:1219 [inline]
     team_add_slave+0xa8b/0x1c30 drivers/net/team/team.c:1948
     do_set_master+0x1c9/0x220 net/core/rtnetlink.c:2248
     do_setlink+0xba4/0x3e10 net/core/rtnetlink.c:2382
     rtnl_setlink+0x2a9/0x400 net/core/rtnetlink.c:2636
     rtnetlink_rcv_msg+0x46e/0xc30 net/core/rtnetlink.c:4665
     netlink_rcv_skb+0x172/0x440 net/netlink/af_netlink.c:2455
     rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:4683
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x5a0/0x760 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0xa18/0xfd0 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:642 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:652
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2126
     __sys_sendmsg+0x11d/0x290 net/socket.c:2164
     __do_sys_sendmsg net/socket.c:2173 [inline]
     __se_sys_sendmsg net/socket.c:2171 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2171
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x456b29
    Code: fd b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f9706bf8c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f9706bf96d4 RCX: 0000000000456b29
    RDX: 0000000000000000 RSI: 0000000020000240 RDI: 0000000000000004
    RBP: 00000000009300a0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000004d3548 R14: 00000000004c8227 R15: 0000000000000000
    
    Fixes: 87002b03baab ("net: introduce vlan_vid_[add/del] and use them instead of direct [add/kill]_vid ndo calls")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-and-tested-by: syzbot+bd051aba086537515cdb@syzkaller.appspotmail.com
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 375c63d4a70ce5773428f35b4f52a4a90a8d9220
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Sep 20 17:27:28 2018 +0800

    sctp: update dst pmtu with the correct daddr
    
    [ Upstream commit d7ab5cdce54da631f0c8c11e506c974536a3581e ]
    
    When processing pmtu update from an icmp packet, it calls .update_pmtu
    with sk instead of skb in sctp_transport_update_pmtu.
    
    However for sctp, the daddr in the transport might be different from
    inet_sock->inet_daddr or sk->sk_v6_daddr, which is used to update or
    create the route cache. The incorrect daddr will cause a different
    route cache created for the path.
    
    So before calling .update_pmtu, inet_sock->inet_daddr/sk->sk_v6_daddr
    should be updated with the daddr in the transport, and update it back
    after it's done.
    
    The issue has existed since route exceptions introduction.
    
    Fixes: 4895c771c7f0 ("ipv4: Add FIB nexthop exceptions.")
    Reported-by: ian.periam@dialogic.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ac4b03c0fccfe5b466d14d2643282b84845a3a0
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Oct 2 15:47:35 2018 -0700

    rtnl: limit IFLA_NUM_TX_QUEUES and IFLA_NUM_RX_QUEUES to 4096
    
    [ Upstream commit 0e1d6eca5113858ed2caea61a5adc03c595f6096 ]
    
    We have an impressive number of syzkaller bugs that are linked
    to the fact that syzbot was able to create a networking device
    with millions of TX (or RX) queues.
    
    Let's limit the number of RX/TX queues to 4096, this really should
    cover all known cases.
    
    A separate patch will add various cond_resched() in the loops
    handling sysfs entries at device creation and dismantle.
    
    Tested:
    
    lpaa6:~# ip link add gre-4097 numtxqueues 4097 numrxqueues 4097 type ip6gretap
    RTNETLINK answers: Invalid argument
    
    lpaa6:~# time ip link add gre-4096 numtxqueues 4096 numrxqueues 4096 type ip6gretap
    
    real    0m0.180s
    user    0m0.000s
    sys     0m0.107s
    
    Fixes: 76ff5cc91935 ("rtnl: allow to specify number of rx and tx queues on device creation")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5369306f960f8dd4cfb098a65d3e2ba94a47d825
Author: Mauricio Faria de Oliveira <mfo@canonical.com>
Date:   Mon Oct 1 22:46:40 2018 -0300

    rtnetlink: fix rtnl_fdb_dump() for ndmsg header
    
    [ Upstream commit bd961c9bc66497f0c63f4ba1d02900bb85078366 ]
    
    Currently, rtnl_fdb_dump() assumes the family header is 'struct ifinfomsg',
    which is not always true -- 'struct ndmsg' is used by iproute2 ('ip neigh').
    
    The problem is, the function bails out early if nlmsg_parse() fails, which
    does occur for iproute2 usage of 'struct ndmsg' because the payload length
    is shorter than the family header alone (as 'struct ifinfomsg' is assumed).
    
    This breaks backward compatibility with userspace -- nothing is sent back.
    
    Some examples with iproute2 and netlink library for go [1]:
    
     1) $ bridge fdb show
        33:33:00:00:00:01 dev ens3 self permanent
        01:00:5e:00:00:01 dev ens3 self permanent
        33:33:ff:15:98:30 dev ens3 self permanent
    
          This one works, as it uses 'struct ifinfomsg'.
    
          fdb_show() @ iproute2/bridge/fdb.c
            """
            .n.nlmsg_len = NLMSG_LENGTH(sizeof(struct ifinfomsg)),
            ...
            if (rtnl_dump_request(&rth, RTM_GETNEIGH, [...]
            """
    
     2) $ ip --family bridge neigh
        RTNETLINK answers: Invalid argument
        Dump terminated
    
          This one fails, as it uses 'struct ndmsg'.
    
          do_show_or_flush() @ iproute2/ip/ipneigh.c
            """
            .n.nlmsg_type = RTM_GETNEIGH,
            .n.nlmsg_len = NLMSG_LENGTH(sizeof(struct ndmsg)),
            """
    
     3) $ ./neighlist
        < no output >
    
          This one fails, as it uses 'struct ndmsg'-based.
    
          neighList() @ netlink/neigh_linux.go
            """
            req := h.newNetlinkRequest(unix.RTM_GETNEIGH, [...]
            msg := Ndmsg{
            """
    
    The actual breakage was introduced by commit 0ff50e83b512 ("net: rtnetlink:
    bail out from rtnl_fdb_dump() on parse error"), because nlmsg_parse() fails
    if the payload length (with the _actual_ family header) is less than the
    family header length alone (which is assumed, in parameter 'hdrlen').
    This is true in the examples above with struct ndmsg, with size and payload
    length shorter than struct ifinfomsg.
    
    However, that commit just intends to fix something under the assumption the
    family header is indeed an 'struct ifinfomsg' - by preventing access to the
    payload as such (via 'ifm' pointer) if the payload length is not sufficient
    to actually contain it.
    
    The assumption was introduced by commit 5e6d24358799 ("bridge: netlink dump
    interface at par with brctl"), to support iproute2's 'bridge fdb' command
    (not 'ip neigh') which indeed uses 'struct ifinfomsg', thus is not broken.
    
    So, in order to unbreak the 'struct ndmsg' family headers and still allow
    'struct ifinfomsg' to continue to work, check for the known message sizes
    used with 'struct ndmsg' in iproute2 (with zero or one attribute which is
    not used in this function anyway) then do not parse the data as ifinfomsg.
    
    Same examples with this patch applied (or revert/before the original fix):
    
        $ bridge fdb show
        33:33:00:00:00:01 dev ens3 self permanent
        01:00:5e:00:00:01 dev ens3 self permanent
        33:33:ff:15:98:30 dev ens3 self permanent
    
        $ ip --family bridge neigh
        dev ens3 lladdr 33:33:00:00:00:01 PERMANENT
        dev ens3 lladdr 01:00:5e:00:00:01 PERMANENT
        dev ens3 lladdr 33:33:ff:15:98:30 PERMANENT
    
        $ ./neighlist
        netlink.Neigh{LinkIndex:2, Family:7, State:128, Type:0, Flags:2, IP:net.IP(nil), HardwareAddr:net.HardwareAddr{0x33, 0x33, 0x0, 0x0, 0x0, 0x1}, LLIPAddr:net.IP(nil), Vlan:0, VNI:0}
        netlink.Neigh{LinkIndex:2, Family:7, State:128, Type:0, Flags:2, IP:net.IP(nil), HardwareAddr:net.HardwareAddr{0x1, 0x0, 0x5e, 0x0, 0x0, 0x1}, LLIPAddr:net.IP(nil), Vlan:0, VNI:0}
        netlink.Neigh{LinkIndex:2, Family:7, State:128, Type:0, Flags:2, IP:net.IP(nil), HardwareAddr:net.HardwareAddr{0x33, 0x33, 0xff, 0x15, 0x98, 0x30}, LLIPAddr:net.IP(nil), Vlan:0, VNI:0}
    
    Tested on mainline (v4.19-rc6) and net-next (3bd09b05b068).
    
    References:
    
    [1] netlink library for go (test-case)
        https://github.com/vishvananda/netlink
    
        $ cat ~/go/src/neighlist/main.go
        package main
        import ("fmt"; "syscall"; "github.com/vishvananda/netlink")
        func main() {
            neighs, _ := netlink.NeighList(0, syscall.AF_BRIDGE)
            for _, neigh := range neighs { fmt.Printf("%#v\n", neigh) }
        }
    
        $ export GOPATH=~/go
        $ go get github.com/vishvananda/netlink
        $ go build neighlist
        $ ~/go/src/neighlist/neighlist
    
    Thanks to David Ahern for suggestions to improve this patch.
    
    Fixes: 0ff50e83b512 ("net: rtnetlink: bail out from rtnl_fdb_dump() on parse error")
    Fixes: 5e6d24358799 ("bridge: netlink dump interface at par with brctl")
    Reported-by: Aidan Obley <aobley@pivotal.io>
    Signed-off-by: Mauricio Faria de Oliveira <mfo@canonical.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f4a4fa5fa5810449611ff951535d43dde24528e
Author: Giacinto Cifelli <gciofono@gmail.com>
Date:   Wed Oct 10 20:05:53 2018 +0200

    qmi_wwan: Added support for Gemalto's Cinterion ALASxx WWAN interface
    
    [ Upstream commit 4f7617705bfff84d756fe4401a1f4f032f374984 ]
    
    Added support for Gemalto's Cinterion ALASxx WWAN interfaces
    by adding QMI_FIXED_INTF with Cinterion's VID and PID.
    
    Signed-off-by: Giacinto Cifelli <gciofono@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbf2e16dd7242214fac6fc17b21c3ec7053de6ae
Author: Shahed Shaikh <shahed.shaikh@cavium.com>
Date:   Wed Sep 26 12:41:10 2018 -0700

    qlcnic: fix Tx descriptor corruption on 82xx devices
    
    [ Upstream commit c333fa0c4f220f8f7ea5acd6b0ebf3bf13fd684d ]
    
    In regular NIC transmission flow, driver always configures MAC using
    Tx queue zero descriptor as a part of MAC learning flow.
    But with multi Tx queue supported NIC, regular transmission can occur on
    any non-zero Tx queue and from that context it uses
    Tx queue zero descriptor to configure MAC, at the same time TX queue
    zero could be used by another CPU for regular transmission
    which could lead to Tx queue zero descriptor corruption and cause FW
    abort.
    
    This patch fixes this in such a way that driver always configures
    learned MAC address from the same Tx queue which is used for
    regular transmission.
    
    Fixes: 7e2cf4feba05 ("qlcnic: change driver hardware interface mechanism")
    Signed-off-by: Shahed Shaikh <shahed.shaikh@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0993dc028ed2138e27def53be58076297b199634
Author: Yu Zhao <yuzhao@google.com>
Date:   Fri Sep 28 17:04:30 2018 -0600

    net/usb: cancel pending work when unbinding smsc75xx
    
    [ Upstream commit f7b2a56e1f3dcbdb4cf09b2b63e859ffe0e09df8 ]
    
    Cancel pending work before freeing smsc75xx private data structure
    during binding. This fixes the following crash in the driver:
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000050
    IP: mutex_lock+0x2b/0x3f
    <snipped>
    Workqueue: events smsc75xx_deferred_multicast_write [smsc75xx]
    task: ffff8caa83e85700 task.stack: ffff948b80518000
    RIP: 0010:mutex_lock+0x2b/0x3f
    <snipped>
    Call Trace:
     smsc75xx_deferred_multicast_write+0x40/0x1af [smsc75xx]
     process_one_work+0x18d/0x2fc
     worker_thread+0x1a2/0x269
     ? pr_cont_work+0x58/0x58
     kthread+0xfa/0x10a
     ? pr_cont_work+0x58/0x58
     ? rcu_read_unlock_sched_notrace+0x48/0x48
     ret_from_fork+0x22/0x40
    
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a308452e12c0439cb862d7be4e5bda06c72338a1
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue Oct 2 16:52:03 2018 -0700

    net: systemport: Fix wake-up interrupt race during resume
    
    [ Upstream commit 45ec318578c0c22a11f5b9927d064418e1ab1905 ]
    
    The AON_PM_L2 is normally used to trigger and identify the source of a
    wake-up event. Since the RX_SYS clock is no longer turned off, we also
    have an interrupt being sent to the SYSTEMPORT INTRL_2_0 controller, and
    that interrupt remains active up until the magic packet detector is
    disabled which happens much later during the driver resumption.
    
    The race happens if we have a CPU that is entering the SYSTEMPORT
    INTRL2_0 handler during resume, and another CPU has managed to clear the
    wake-up interrupt during bcm_sysport_resume_from_wol(). In that case, we
    have the first CPU stuck in the interrupt handler with an interrupt
    cause that has been cleared under its feet, and so we keep returning
    IRQ_NONE and we never make any progress.
    
    This was not a problem before because we would always turn off the
    RX_SYS clock during WoL, so the SYSTEMPORT INTRL2_0 would also be turned
    off as well, thus not latching the interrupt.
    
    The fix is to make sure we do not enable either the MPD or
    BRCM_TAG_MATCH interrupts since those are redundant with what the
    AON_PM_L2 interrupt controller already processes and they would cause
    such a race to occur.
    
    Fixes: bb9051a2b230 ("net: systemport: Add support for WAKE_FILTER")
    Fixes: 83e82f4c706b ("net: systemport: add Wake-on-LAN support")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6da1bd2d008fd0ce27e86e2e3c105c72c36fbd37
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sun Oct 7 07:40:17 2018 -0400

    net: sched: cls_u32: fix hnode refcounting
    
    [ Upstream commit 6d4c407744dd0338da5d5d76f40dce5adabfb30a ]
    
    cls_u32.c misuses refcounts for struct tc_u_hnode - it counts references
    via ->hlist and via ->tp_root together.  u32_destroy() drops the former
    and, in case when there had been links, leaves the sucker on the list.
    As the result, there's nothing to protect it from getting freed once links
    are dropped.
    That also makes the "is it busy" check incapable of catching the root
    hnode - it *is* busy (there's a reference from tp), but we don't see it as
    something separate.  "Is it our root?" check partially covers that, but
    the problem exists for others' roots as well.
    
    AFAICS, the minimal fix preserving the existing behaviour (where it doesn't
    include oopsen, that is) would be this:
            * count tp->root and tp_c->hlist as separate references.  I.e.
    have u32_init() set refcount to 2, not 1.
            * in u32_destroy() we always drop the former;
    in u32_destroy_hnode() - the latter.
    
            That way we have *all* references contributing to refcount.  List
    removal happens in u32_destroy_hnode() (called only when ->refcnt is 1)
    an in u32_destroy() in case of tc_u_common going away, along with
    everything reachable from it.  IOW, that way we know that
    u32_destroy_key() won't free something still on the list (or pointed to by
    someone's ->root).
    
    Reproducer:
    
    tc qdisc add dev eth0 ingress
    tc filter add dev eth0 parent ffff: protocol ip prio 100 handle 1: \
    u32 divisor 1
    tc filter add dev eth0 parent ffff: protocol ip prio 200 handle 2: \
    u32 divisor 1
    tc filter add dev eth0 parent ffff: protocol ip prio 100 \
    handle 1:0:11 u32 ht 1: link 801: offset at 0 mask 0f00 shift 6 \
    plus 0 eat match ip protocol 6 ff
    tc filter delete dev eth0 parent ffff: protocol ip prio 200
    tc filter change dev eth0 parent ffff: protocol ip prio 100 \
    handle 1:0:11 u32 ht 1: link 0: offset at 0 mask 0f00 shift 6 plus 0 \
    eat match ip protocol 6 ff
    tc filter delete dev eth0 parent ffff: protocol ip prio 100
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57ad6586fd57ab86820bf1332fd47710e8c35525
Author: David Ahern <dsahern@gmail.com>
Date:   Wed Oct 3 15:05:36 2018 -0700

    net: sched: Add policy validation for tc attributes
    
    [ Upstream commit 8b4c3cdd9dd8290343ce959a132d3b334062c5b9 ]
    
    A number of TC attributes are processed without proper validation
    (e.g., length checks). Add a tca policy for all input attributes and use
    when invoking nlmsg_parse.
    
    The 2 Fixes tags below cover the latest additions. The other attributes
    are a string (KIND), nested attribute (OPTIONS which does seem to have
    validation in most cases), for dumps only or a flag.
    
    Fixes: 5bc1701881e39 ("net: sched: introduce multichain support for filters")
    Fixes: d47a6b0e7c492 ("net: sched: introduce ingress/egress block index attributes for qdisc")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94d93e549eb1f23a4f5cfad6b473912935f51230
Author: Antoine Tenart <antoine.tenart@bootlin.com>
Date:   Tue Sep 18 16:58:47 2018 +0200

    net: mvpp2: fix a txq_done race condition
    
    [ Upstream commit 774268f3e51b53ed432a1ec516574fd5ba469398 ]
    
    When no Tx IRQ is available, the txq_done() routine (called from
    tx_done()) shouldn't be called from the polling function, as in such
    case it is already called in the Tx path thanks to an hrtimer. This
    mostly occurred when using PPv2.1, as the engine then do not have Tx
    IRQs.
    
    Fixes: edc660fa09e2 ("net: mvpp2: replace TX coalescing interrupts with hrtimer")
    Reported-by: Stefan Chulski <stefanc@marvell.com>
    Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac521a40054c66841a9424930e42b4e281cdb692
Author: Maxime Chevallier <maxime.chevallier@bootlin.com>
Date:   Fri Oct 5 09:04:40 2018 +0200

    net: mvpp2: Extract the correct ethtype from the skb for tx csum offload
    
    [ Upstream commit 35f3625c21852ad839f20c91c7d81c4c1101e207 ]
    
    When offloading the L3 and L4 csum computation on TX, we need to extract
    the l3_proto from the ethtype, independently of the presence of a vlan
    tag.
    
    The actual driver uses skb->protocol as-is, resulting in packets with
    the wrong L4 checksum being sent when there's a vlan tag in the packet
    header and checksum offloading is enabled.
    
    This commit makes use of vlan_protocol_get() to get the correct ethtype
    regardless the presence of a vlan tag.
    
    Fixes: 3f518509dedc ("ethernet: Add new driver for Marvell Armada 375 network unit")
    Signed-off-by: Maxime Chevallier <maxime.chevallier@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbbae2c0780935f45bbb9f2c233963b4d81de0a5
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Thu Sep 20 14:29:45 2018 -0600

    netlabel: check for IPV4MASK in addrinfo_get
    
    [ Upstream commit f88b4c01b97e09535505cf3c327fdbce55c27f00 ]
    
    netlbl_unlabel_addrinfo_get() assumes that if it finds the
    NLBL_UNLABEL_A_IPV4ADDR attribute, it must also have the
    NLBL_UNLABEL_A_IPV4MASK attribute as well. However, this is
    not necessarily the case as the current checks in
    netlbl_unlabel_staticadd() and friends are not sufficent to
    enforce this.
    
    If passed a netlink message with NLBL_UNLABEL_A_IPV4ADDR,
    NLBL_UNLABEL_A_IPV6ADDR, and NLBL_UNLABEL_A_IPV6MASK attributes,
    these functions will all call netlbl_unlabel_addrinfo_get() which
    will then attempt dereference NULL when fetching the non-existent
    NLBL_UNLABEL_A_IPV4MASK attribute:
    
    Unable to handle kernel NULL pointer dereference at virtual address 0
    Process unlab (pid: 31762, stack limit = 0xffffff80502d8000)
    Call trace:
            netlbl_unlabel_addrinfo_get+0x44/0xd8
            netlbl_unlabel_staticremovedef+0x98/0xe0
            genl_rcv_msg+0x354/0x388
            netlink_rcv_skb+0xac/0x118
            genl_rcv+0x34/0x48
            netlink_unicast+0x158/0x1f0
            netlink_sendmsg+0x32c/0x338
            sock_sendmsg+0x44/0x60
            ___sys_sendmsg+0x1d0/0x2a8
            __sys_sendmsg+0x64/0xb4
            SyS_sendmsg+0x34/0x4c
            el0_svc_naked+0x34/0x38
    Code: 51001149 7100113f 540000a0 f9401508 (79400108)
    ---[ end trace f6438a488e737143 ]---
    Kernel panic - not syncing: Fatal exception
    
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4a00db359243dbb8cb40a1ae5aab1981836f622
Author: Jeff Barnhill <0xeffeff@gmail.com>
Date:   Fri Sep 21 00:45:27 2018 +0000

    net/ipv6: Display all addresses in output of /proc/net/if_inet6
    
    [ Upstream commit 86f9bd1ff61c413a2a251fa736463295e4e24733 ]
    
    The backend handling for /proc/net/if_inet6 in addrconf.c doesn't properly
    handle starting/stopping the iteration.  The problem is that at some point
    during the iteration, an overflow is detected and the process is
    subsequently stopped.  The item being shown via seq_printf() when the
    overflow occurs is not actually shown, though.  When start() is
    subsequently called to resume iterating, it returns the next item, and
    thus the item that was being processed when the overflow occurred never
    gets printed.
    
    Alter the meaning of the private data member "offset".  Currently, when it
    is not 0 (which only happens at the very beginning), "offset" represents
    the next hlist item to be printed.  After this change, "offset" always
    represents the current item.
    
    This is also consistent with the private data member "bucket", which
    represents the current bucket, and also the use of "pos" as defined in
    seq_file.txt:
        The pos passed to start() will always be either zero, or the most
        recent pos used in the previous session.
    
    Signed-off-by: Jeff Barnhill <0xeffeff@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff34695ced21e2dfa04d0fa1c5f6c35011fa8117
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Oct 9 17:48:14 2018 +0200

    net: ipv4: update fnhe_pmtu when first hop's MTU changes
    
    [ Upstream commit af7d6cce53694a88d6a1bb60c9a239a6a5144459 ]
    
    Since commit 5aad1de5ea2c ("ipv4: use separate genid for next hop
    exceptions"), exceptions get deprecated separately from cached
    routes. In particular, administrative changes don't clear PMTU anymore.
    
    As Stefano described in commit e9fa1495d738 ("ipv6: Reflect MTU changes
    on PMTU of exceptions for MTU-less routes"), the PMTU discovered before
    the local MTU change can become stale:
     - if the local MTU is now lower than the PMTU, that PMTU is now
       incorrect
     - if the local MTU was the lowest value in the path, and is increased,
       we might discover a higher PMTU
    
    Similarly to what commit e9fa1495d738 did for IPv6, update PMTU in those
    cases.
    
    If the exception was locked, the discovered PMTU was smaller than the
    minimal accepted PMTU. In that case, if the new local MTU is smaller
    than the current PMTU, let PMTU discovery figure out if locking of the
    exception is still needed.
    
    To do this, we need to know the old link MTU in the NETDEV_CHANGEMTU
    notifier. By the time the notifier is called, dev->mtu has been
    changed. This patch adds the old MTU as additional information in the
    notifier structure, and a new call_netdevice_notifiers_u32() function.
    
    Fixes: 5aad1de5ea2c ("ipv4: use separate genid for next hop exceptions")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87d57bb87dd862740d05cd12758998df9716de80
Author: Yunsheng Lin <linyunsheng@huawei.com>
Date:   Tue Sep 25 10:21:55 2018 +0100

    net: hns: fix for unmapping problem when SMMU is on
    
    [ Upstream commit 2e9361efa707e186d91b938e44f9e326725259f7 ]
    
    If SMMU is on, there is more likely that skb_shinfo(skb)->frags[i]
    can not send by a single BD. when this happen, the
    hns_nic_net_xmit_hw function map the whole data in a frags using
    skb_frag_dma_map, but unmap each BD' data individually when tx is
    done, which causes problem when SMMU is on.
    
    This patch fixes this problem by ummapping the whole data in a
    frags when tx is done.
    
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Signed-off-by: Peng Li <lipeng321@huawei.com>
    Reviewed-by: Yisen Zhuang <yisen.zhuang@huawei.com>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ae21378ab435a754566b9bf3c6ea74a793506c1
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Tue Oct 9 16:48:58 2018 -0700

    net: dsa: bcm_sf2: Call setup during switch resume
    
    [ Upstream commit 54baca096386d862d19c10f58f34bf787c6b3cbe ]
    
    There is no reason to open code what the switch setup function does, in
    fact, because we just issued a switch reset, we would make all the
    register get their default values, including for instance, having unused
    port be enabled again and wasting power and leading to an inappropriate
    switch core clock being selected.
    
    Fixes: 8cfa94984c9c ("net: dsa: bcm_sf2: add suspend/resume callbacks")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08e8e22b6d3ae3689d8c1643d924063f5c93b901
Author: Wei Wang <weiwan@google.com>
Date:   Thu Oct 4 10:12:37 2018 -0700

    ipv6: take rcu lock in rawv6_send_hdrinc()
    
    [ Upstream commit a688caa34beb2fd2a92f1b6d33e40cde433ba160 ]
    
    In rawv6_send_hdrinc(), in order to avoid an extra dst_hold(), we
    directly assign the dst to skb and set passed in dst to NULL to avoid
    double free.
    However, in error case, we free skb and then do stats update with the
    dst pointer passed in. This causes use-after-free on the dst.
    Fix it by taking rcu read lock right before dst could get released to
    make sure dst does not get freed until the stats update is done.
    Note: we don't have this issue in ipv4 cause dst is not used for stats
    update in v4.
    
    Syzkaller reported following crash:
    BUG: KASAN: use-after-free in rawv6_send_hdrinc net/ipv6/raw.c:692 [inline]
    BUG: KASAN: use-after-free in rawv6_sendmsg+0x4421/0x4630 net/ipv6/raw.c:921
    Read of size 8 at addr ffff8801d95ba730 by task syz-executor0/32088
    
    CPU: 1 PID: 32088 Comm: syz-executor0 Not tainted 4.19.0-rc2+ #93
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c4/0x2b4 lib/dump_stack.c:113
     print_address_description.cold.8+0x9/0x1ff mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.9+0x242/0x309 mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     rawv6_send_hdrinc net/ipv6/raw.c:692 [inline]
     rawv6_sendmsg+0x4421/0x4630 net/ipv6/raw.c:921
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2114
     __sys_sendmsg+0x11d/0x280 net/socket.c:2152
     __do_sys_sendmsg net/socket.c:2161 [inline]
     __se_sys_sendmsg net/socket.c:2159 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2159
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457099
    Code: fd b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f83756edc78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f83756ee6d4 RCX: 0000000000457099
    RDX: 0000000000000000 RSI: 0000000020003840 RDI: 0000000000000004
    RBP: 00000000009300a0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000004d4b30 R14: 00000000004c90b1 R15: 0000000000000000
    
    Allocated by task 32088:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
     kmem_cache_alloc+0x12e/0x730 mm/slab.c:3554
     dst_alloc+0xbb/0x1d0 net/core/dst.c:105
     ip6_dst_alloc+0x35/0xa0 net/ipv6/route.c:353
     ip6_rt_cache_alloc+0x247/0x7b0 net/ipv6/route.c:1186
     ip6_pol_route+0x8f8/0xd90 net/ipv6/route.c:1895
     ip6_pol_route_output+0x54/0x70 net/ipv6/route.c:2093
     fib6_rule_lookup+0x277/0x860 net/ipv6/fib6_rules.c:122
     ip6_route_output_flags+0x2c5/0x350 net/ipv6/route.c:2121
     ip6_route_output include/net/ip6_route.h:88 [inline]
     ip6_dst_lookup_tail+0xe27/0x1d60 net/ipv6/ip6_output.c:951
     ip6_dst_lookup_flow+0xc8/0x270 net/ipv6/ip6_output.c:1079
     rawv6_sendmsg+0x12d9/0x4630 net/ipv6/raw.c:905
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2114
     __sys_sendmsg+0x11d/0x280 net/socket.c:2152
     __do_sys_sendmsg net/socket.c:2161 [inline]
     __se_sys_sendmsg net/socket.c:2159 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2159
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 5356:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kmem_cache_free+0x83/0x290 mm/slab.c:3756
     dst_destroy+0x267/0x3c0 net/core/dst.c:141
     dst_destroy_rcu+0x16/0x19 net/core/dst.c:154
     __rcu_reclaim kernel/rcu/rcu.h:236 [inline]
     rcu_do_batch kernel/rcu/tree.c:2576 [inline]
     invoke_rcu_callbacks kernel/rcu/tree.c:2880 [inline]
     __rcu_process_callbacks kernel/rcu/tree.c:2847 [inline]
     rcu_process_callbacks+0xf23/0x2670 kernel/rcu/tree.c:2864
     __do_softirq+0x30b/0xad8 kernel/softirq.c:292
    
    Fixes: 1789a640f556 ("raw: avoid two atomics in xmit")
    Signed-off-by: Wei Wang <weiwan@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18ea575f665d989b86a74a67ac83813daf01d33e
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Sep 30 11:33:39 2018 -0700

    ipv4: fix use-after-free in ip_cmsg_recv_dstaddr()
    
    [ Upstream commit 64199fc0a46ba211362472f7f942f900af9492fd ]
    
    Caching ip_hdr(skb) before a call to pskb_may_pull() is buggy,
    do not do it.
    
    Fixes: 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call pskb_may_pull")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa111ec2d2c596123ed818920d598cecfa041ca7
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Mon Sep 24 15:48:19 2018 +0200

    ip_tunnel: be careful when accessing the inner header
    
    [ Upstream commit ccfec9e5cb2d48df5a955b7bf47f7782157d3bc2]
    
    Cong noted that we need the same checks introduced by commit 76c0ddd8c3a6
    ("ip6_tunnel: be careful when accessing the inner header")
    even for ipv4 tunnels.
    
    Fixes: c54419321455 ("GRE: Refactor GRE tunneling code.")
    Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84b262a5a0084636ac6d1140b02cd4ccf0343367
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Sep 19 15:02:07 2018 +0200

    ip6_tunnel: be careful when accessing the inner header
    
    [ Upstream commit 76c0ddd8c3a683f6e2c6e60e11dc1a1558caf4bc ]
    
    the ip6 tunnel xmit ndo assumes that the processed skb always
    contains an ip[v6] header, but syzbot has found a way to send
    frames that fall short of this assumption, leading to the following splat:
    
    BUG: KMSAN: uninit-value in ip6ip6_tnl_xmit net/ipv6/ip6_tunnel.c:1307
    [inline]
    BUG: KMSAN: uninit-value in ip6_tnl_start_xmit+0x7d2/0x1ef0
    net/ipv6/ip6_tunnel.c:1390
    CPU: 0 PID: 4504 Comm: syz-executor558 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x185/0x1d0 lib/dump_stack.c:53
      kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
      __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
      ip6ip6_tnl_xmit net/ipv6/ip6_tunnel.c:1307 [inline]
      ip6_tnl_start_xmit+0x7d2/0x1ef0 net/ipv6/ip6_tunnel.c:1390
      __netdev_start_xmit include/linux/netdevice.h:4066 [inline]
      netdev_start_xmit include/linux/netdevice.h:4075 [inline]
      xmit_one net/core/dev.c:3026 [inline]
      dev_hard_start_xmit+0x5f1/0xc70 net/core/dev.c:3042
      __dev_queue_xmit+0x27ee/0x3520 net/core/dev.c:3557
      dev_queue_xmit+0x4b/0x60 net/core/dev.c:3590
      packet_snd net/packet/af_packet.c:2944 [inline]
      packet_sendmsg+0x7c70/0x8a30 net/packet/af_packet.c:2969
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmmsg+0x42d/0x800 net/socket.c:2136
      SYSC_sendmmsg+0xc4/0x110 net/socket.c:2167
      SyS_sendmmsg+0x63/0x90 net/socket.c:2162
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x441819
    RSP: 002b:00007ffe58ee8268 EFLAGS: 00000213 ORIG_RAX: 0000000000000133
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000441819
    RDX: 0000000000000002 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006cd018 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000402510
    R13: 00000000004025a0 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
      kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
      kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
      kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
      kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
      slab_post_alloc_hook mm/slab.h:445 [inline]
      slab_alloc_node mm/slub.c:2737 [inline]
      __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
      __kmalloc_reserve net/core/skbuff.c:138 [inline]
      __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
      alloc_skb include/linux/skbuff.h:984 [inline]
      alloc_skb_with_frags+0x1d4/0xb20 net/core/skbuff.c:5234
      sock_alloc_send_pskb+0xb56/0x1190 net/core/sock.c:2085
      packet_alloc_skb net/packet/af_packet.c:2803 [inline]
      packet_snd net/packet/af_packet.c:2894 [inline]
      packet_sendmsg+0x6454/0x8a30 net/packet/af_packet.c:2969
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmmsg+0x42d/0x800 net/socket.c:2136
      SYSC_sendmmsg+0xc4/0x110 net/socket.c:2167
      SyS_sendmmsg+0x63/0x90 net/socket.c:2162
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    This change addresses the issue adding the needed check before
    accessing the inner header.
    
    The ipv4 side of the issue is apparently there since the ipv4 over ipv6
    initial support, and the ipv6 side predates git history.
    
    Fixes: c4d3efafcc93 ("[IPV6] IP6TUNNEL: Add support to IPv4 over IPv6 tunnel.")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+3fde91d4d394747d6db4@syzkaller.appspotmail.com
    Tested-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b420a9999f08b1562b80c3a59cf285d98b968a5
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Mon Sep 24 14:40:11 2018 -0700

    bonding: avoid possible dead-lock
    
    [ Upstream commit d4859d749aa7090ffb743d15648adb962a1baeae ]
    
    Syzkaller reported this on a slightly older kernel but it's still
    applicable to the current kernel -
    
    ======================================================
    WARNING: possible circular locking dependency detected
    4.18.0-next-20180823+ #46 Not tainted
    ------------------------------------------------------
    syz-executor4/26841 is trying to acquire lock:
    00000000dd41ef48 ((wq_completion)bond_dev->name){+.+.}, at: flush_workqueue+0x2db/0x1e10 kernel/workqueue.c:2652
    
    but task is already holding lock:
    00000000768ab431 (rtnl_mutex){+.+.}, at: rtnl_lock net/core/rtnetlink.c:77 [inline]
    00000000768ab431 (rtnl_mutex){+.+.}, at: rtnetlink_rcv_msg+0x412/0xc30 net/core/rtnetlink.c:4708
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #2 (rtnl_mutex){+.+.}:
           __mutex_lock_common kernel/locking/mutex.c:925 [inline]
           __mutex_lock+0x171/0x1700 kernel/locking/mutex.c:1073
           mutex_lock_nested+0x16/0x20 kernel/locking/mutex.c:1088
           rtnl_lock+0x17/0x20 net/core/rtnetlink.c:77
           bond_netdev_notify drivers/net/bonding/bond_main.c:1310 [inline]
           bond_netdev_notify_work+0x44/0xd0 drivers/net/bonding/bond_main.c:1320
           process_one_work+0xc73/0x1aa0 kernel/workqueue.c:2153
           worker_thread+0x189/0x13c0 kernel/workqueue.c:2296
           kthread+0x35a/0x420 kernel/kthread.c:246
           ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:415
    
    -> #1 ((work_completion)(&(&nnw->work)->work)){+.+.}:
           process_one_work+0xc0b/0x1aa0 kernel/workqueue.c:2129
           worker_thread+0x189/0x13c0 kernel/workqueue.c:2296
           kthread+0x35a/0x420 kernel/kthread.c:246
           ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:415
    
    -> #0 ((wq_completion)bond_dev->name){+.+.}:
           lock_acquire+0x1e4/0x4f0 kernel/locking/lockdep.c:3901
           flush_workqueue+0x30a/0x1e10 kernel/workqueue.c:2655
           drain_workqueue+0x2a9/0x640 kernel/workqueue.c:2820
           destroy_workqueue+0xc6/0x9d0 kernel/workqueue.c:4155
           __alloc_workqueue_key+0xef9/0x1190 kernel/workqueue.c:4138
           bond_init+0x269/0x940 drivers/net/bonding/bond_main.c:4734
           register_netdevice+0x337/0x1100 net/core/dev.c:8410
           bond_newlink+0x49/0xa0 drivers/net/bonding/bond_netlink.c:453
           rtnl_newlink+0xef4/0x1d50 net/core/rtnetlink.c:3099
           rtnetlink_rcv_msg+0x46e/0xc30 net/core/rtnetlink.c:4711
           netlink_rcv_skb+0x172/0x440 net/netlink/af_netlink.c:2454
           rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:4729
           netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
           netlink_unicast+0x5a0/0x760 net/netlink/af_netlink.c:1343
           netlink_sendmsg+0xa18/0xfc0 net/netlink/af_netlink.c:1908
           sock_sendmsg_nosec net/socket.c:622 [inline]
           sock_sendmsg+0xd5/0x120 net/socket.c:632
           ___sys_sendmsg+0x7fd/0x930 net/socket.c:2115
           __sys_sendmsg+0x11d/0x290 net/socket.c:2153
           __do_sys_sendmsg net/socket.c:2162 [inline]
           __se_sys_sendmsg net/socket.c:2160 [inline]
           __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2160
           do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    other info that might help us debug this:
    
    Chain exists of:
      (wq_completion)bond_dev->name --> (work_completion)(&(&nnw->work)->work) --> rtnl_mutex
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(rtnl_mutex);
                                   lock((work_completion)(&(&nnw->work)->work));
                                   lock(rtnl_mutex);
      lock((wq_completion)bond_dev->name);
    
     *** DEADLOCK ***
    
    1 lock held by syz-executor4/26841:
    
    stack backtrace:
    CPU: 1 PID: 26841 Comm: syz-executor4 Not tainted 4.18.0-next-20180823+ #46
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x2b4 lib/dump_stack.c:113
     print_circular_bug.isra.34.cold.55+0x1bd/0x27d kernel/locking/lockdep.c:1222
     check_prev_add kernel/locking/lockdep.c:1862 [inline]
     check_prevs_add kernel/locking/lockdep.c:1975 [inline]
     validate_chain kernel/locking/lockdep.c:2416 [inline]
     __lock_acquire+0x3449/0x5020 kernel/locking/lockdep.c:3412
     lock_acquire+0x1e4/0x4f0 kernel/locking/lockdep.c:3901
     flush_workqueue+0x30a/0x1e10 kernel/workqueue.c:2655
     drain_workqueue+0x2a9/0x640 kernel/workqueue.c:2820
     destroy_workqueue+0xc6/0x9d0 kernel/workqueue.c:4155
     __alloc_workqueue_key+0xef9/0x1190 kernel/workqueue.c:4138
     bond_init+0x269/0x940 drivers/net/bonding/bond_main.c:4734
     register_netdevice+0x337/0x1100 net/core/dev.c:8410
     bond_newlink+0x49/0xa0 drivers/net/bonding/bond_netlink.c:453
     rtnl_newlink+0xef4/0x1d50 net/core/rtnetlink.c:3099
     rtnetlink_rcv_msg+0x46e/0xc30 net/core/rtnetlink.c:4711
     netlink_rcv_skb+0x172/0x440 net/netlink/af_netlink.c:2454
     rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:4729
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x5a0/0x760 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0xa18/0xfc0 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:622 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:632
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2115
     __sys_sendmsg+0x11d/0x290 net/socket.c:2153
     __do_sys_sendmsg net/socket.c:2162 [inline]
     __se_sys_sendmsg net/socket.c:2160 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2160
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457089
    Code: fd b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2df20a5c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f2df20a66d4 RCX: 0000000000457089
    RDX: 0000000000000000 RSI: 0000000020000180 RDI: 0000000000000003
    RBP: 0000000000930140 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000004d40b8 R14: 00000000004c8ad8 R15: 0000000000000001
    
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fc26dfba49de13e9253a0aba61a8dee4430490d
Author: Venkat Duvvuru <venkatkumar.duvvuru@broadcom.com>
Date:   Fri Oct 5 00:26:02 2018 -0400

    bnxt_en: free hwrm resources, if driver probe fails.
    
    [ Upstream commit a2bf74f4e1b82395dad2b08d2a911d9151db71c1 ]
    
    When the driver probe fails, all the resources that were allocated prior
    to the failure must be freed. However, hwrm dma response memory is not
    getting freed.
    
    This patch fixes the problem described above.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Venkat Duvvuru <venkatkumar.duvvuru@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f462adcb06381abdcf5bdea2a05429ca01fb8a9e
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed Sep 26 00:41:04 2018 -0400

    bnxt_en: Fix TX timeout during netpoll.
    
    [ Upstream commit 73f21c653f930f438d53eed29b5e4c65c8a0f906 ]
    
    The current netpoll implementation in the bnxt_en driver has problems
    that may miss TX completion events.  bnxt_poll_work() in effect is
    only handling at most 1 TX packet before exiting.  In addition,
    there may be in flight TX completions that ->poll() may miss even
    after we fix bnxt_poll_work() to handle all visible TX completions.
    netpoll may not call ->poll() again and HW may not generate IRQ
    because the driver does not ARM the IRQ when the budget (0 for netpoll)
    is reached.
    
    We fix it by handling all TX completions and to always ARM the IRQ
    when we exit ->poll() with 0 budget.
    
    Also, the logic to ACK the completion ring in case it is almost filled
    with TX completions need to be adjusted to take care of the 0 budget
    case, as discussed with Eric Dumazet <edumazet@google.com>
    
    Reported-by: Song Liu <songliubraving@fb.com>
    Reviewed-by: Song Liu <songliubraving@fb.com>
    Tested-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
