commit a324ad794566ae2ad2d5aa7f7e3c1825fb5cd5b7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 1 09:19:10 2021 +0100

    Linux 5.10.83
    
    Link: https://lore.kernel.org/r/20211129181711.642046348@linuxfoundation.org
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45b42cd05391197d5426a9097043d5e77bdbefc9
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Nov 18 14:50:37 2021 -0500

    drm/amdgpu/gfx9: switch to golden tsc registers for renoir+
    
    commit 53af98c091bc42fd9ec64cfabc40da4e5f3aae93 upstream.
    
    Renoir and newer gfx9 APUs have new TSC register that is
    not part of the gfxoff tile, so it can be read without
    needing to disable gfx off.
    
    Acked-by: Luben Tuikov <luben.tuikov@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98b02755d544ce26ac0a41ff52bf56f2bd79e4c0
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Thu Sep 9 17:23:22 2021 +0800

    net: stmmac: platform: fix build warning when with !CONFIG_PM_SLEEP
    
    commit 2a48d96fd58a666ae231c3dd6fe4a458798ac645 upstream.
    
    Use __maybe_unused for noirq_suspend()/noirq_resume() hooks to avoid
    build warning with !CONFIG_PM_SLEEP:
    
    >> drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c:796:12: error: 'stmmac_pltfr_noirq_resume' defined but not used [-Werror=unused-function]
         796 | static int stmmac_pltfr_noirq_resume(struct device *dev)
             |            ^~~~~~~~~~~~~~~~~~~~~~~~~
    >> drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c:775:12: error: 'stmmac_pltfr_noirq_suspend' defined but not used [-Werror=unused-function]
         775 | static int stmmac_pltfr_noirq_suspend(struct device *dev)
             |            ^~~~~~~~~~~~~~~~~~~~~~~~~~
       cc1: all warnings being treated as errors
    
    Fixes: 276aae377206 ("net: stmmac: fix system hang caused by eee_ctrl_timer during suspend/resume")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a15261d2a1214c9304d17d4b9b819255c7406de5
Author: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
Date:   Fri Nov 19 16:43:21 2021 -0800

    shm: extend forced shm destroy to support objects from several IPC nses
    
    commit 85b6d24646e4125c591639841169baa98a2da503 upstream.
    
    Currently, the exit_shm() function not designed to work properly when
    task->sysvshm.shm_clist holds shm objects from different IPC namespaces.
    
    This is a real pain when sysctl kernel.shm_rmid_forced = 1, because it
    leads to use-after-free (reproducer exists).
    
    This is an attempt to fix the problem by extending exit_shm mechanism to
    handle shm's destroy from several IPC ns'es.
    
    To achieve that we do several things:
    
    1. add a namespace (non-refcounted) pointer to the struct shmid_kernel
    
    2. during new shm object creation (newseg()/shmget syscall) we
       initialize this pointer by current task IPC ns
    
    3. exit_shm() fully reworked such that it traverses over all shp's in
       task->sysvshm.shm_clist and gets IPC namespace not from current task
       as it was before but from shp's object itself, then call
       shm_destroy(shp, ns).
    
    Note: We need to be really careful here, because as it was said before
    (1), our pointer to IPC ns non-refcnt'ed.  To be on the safe side we
    using special helper get_ipc_ns_not_zero() which allows to get IPC ns
    refcounter only if IPC ns not in the "state of destruction".
    
    Q/A
    
    Q: Why can we access shp->ns memory using non-refcounted pointer?
    A: Because shp object lifetime is always shorther than IPC namespace
       lifetime, so, if we get shp object from the task->sysvshm.shm_clist
       while holding task_lock(task) nobody can steal our namespace.
    
    Q: Does this patch change semantics of unshare/setns/clone syscalls?
    A: No. It's just fixes non-covered case when process may leave IPC
       namespace without getting task->sysvshm.shm_clist list cleaned up.
    
    Link: https://lkml.kernel.org/r/67bb03e5-f79c-1815-e2bf-949c67047418@colorfullife.com
    Link: https://lkml.kernel.org/r/20211109151501.4921-1-manfred@colorfullife.com
    Fixes: ab602f79915 ("shm: make exit_shm work proportional to task activity")
    Co-developed-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
    Cc: Vasily Averin <vvs@virtuozzo.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa20e966d8a1249754da934342cc3793f4638e7f
Author: David Hildenbrand <david@redhat.com>
Date:   Thu Sep 9 18:22:42 2021 +0200

    s390/mm: validate VMA in PGSTE manipulation functions
    
    commit fe3d10024073f06f04c74b9674bd71ccc1d787cf upstream.
    
    We should not walk/touch page tables outside of VMA boundaries when
    holding only the mmap sem in read mode. Evil user space can modify the
    VMA layout just before this function runs and e.g., trigger races with
    page table removal code since commit dd2283f2605e ("mm: mmap: zap pages
    with read mmap_sem in munmap"). gfn_to_hva() will only translate using
    KVM memory regions, but won't validate the VMA.
    
    Further, we should not allocate page tables outside of VMA boundaries: if
    evil user space decides to map hugetlbfs to these ranges, bad things will
    happen because we suddenly have PTE or PMD page tables where we
    shouldn't have them.
    
    Similarly, we have to check if we suddenly find a hugetlbfs VMA, before
    calling get_locked_pte().
    
    Fixes: 2d42f9477320 ("s390/kvm: Add PGSTE manipulation functions")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Acked-by: Heiko Carstens <hca@linux.ibm.com>
    Link: https://lore.kernel.org/r/20210909162248.14969-4-david@redhat.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a94e4a7b77edb1ae20f41c7c53677a9c6cee1fd8
Author: Juergen Gross <jgross@suse.com>
Date:   Wed Jul 7 11:10:45 2021 +0200

    tty: hvc: replace BUG_ON() with negative return value
    
    commit e679004dec37566f658a255157d3aed9d762a2b7 upstream.
    
    Xen frontends shouldn't BUG() in case of illegal data received from
    their backends. So replace the BUG_ON()s when reading illegal data from
    the ring page with negative return values.
    
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20210707091045.460-1-jgross@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c5f722a8fdf19d383112fb701525e1b6870d8ca
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Aug 24 12:28:09 2021 +0200

    xen/netfront: don't trust the backend response data blindly
    
    commit a884daa61a7d91650987e855464526aef219590f upstream.
    
    Today netfront will trust the backend to send only sane response data.
    In order to avoid privilege escalations or crashes in case of malicious
    backends verify the data to be within expected limits. Especially make
    sure that the response always references an outstanding request.
    
    Note that only the tx queue needs special id handling, as for the rx
    queue the id is equal to the index in the ring page.
    
    Introduce a new indicator for the device whether it is broken and let
    the device stop working when it is set. Set this indicator in case the
    backend sets any weird data.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 334b0f278761a65718324137e87efe722d536700
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Aug 24 12:28:08 2021 +0200

    xen/netfront: disentangle tx_skb_freelist
    
    commit 21631d2d741a64a073e167c27769e73bc7844a2f upstream.
    
    The tx_skb_freelist elements are in a single linked list with the
    request id used as link reference. The per element link field is in a
    union with the skb pointer of an in use request.
    
    Move the link reference out of the union in order to enable a later
    reuse of it for requests which need a populated skb pointer.
    
    Rename add_id_to_freelist() and get_id_from_freelist() to
    add_id_to_list() and get_id_from_list() in order to prepare using
    those for other lists as well. Define ~0 as value to indicate the end
    of a list and place that value into the link for a request not being
    on the list.
    
    When freeing a skb zero the skb pointer in the request. Use a NULL
    value of the skb pointer instead of skb_entry_is_link() for deciding
    whether a request has a skb linked to it.
    
    Remove skb_entry_set_link() and open code it instead as it is really
    trivial now.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e17ee047eea7122c1d4196ed39032e517dad4152
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Aug 24 12:28:07 2021 +0200

    xen/netfront: don't read data from request on the ring page
    
    commit 162081ec33c2686afa29d91bf8d302824aa846c7 upstream.
    
    In order to avoid a malicious backend being able to influence the local
    processing of a request build the request locally first and then copy
    it to the ring page. Any reading from the request influencing the
    processing in the frontend needs to be done on the local instance.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5e493709800243181e268ddbfae949d2cc37f0b
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Aug 24 12:28:06 2021 +0200

    xen/netfront: read response from backend only once
    
    commit 8446066bf8c1f9f7b7412c43fbea0fb87464d75b upstream.
    
    In order to avoid problems in case the backend is modifying a response
    on the ring page while the frontend has already seen it, just read the
    response into a local buffer in one go and then operate on that buffer
    only.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ffb20f0527dab03c17f0182ec6a63b9301af5f1
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Jul 30 12:38:54 2021 +0200

    xen/blkfront: don't trust the backend response data blindly
    
    commit b94e4b147fd1992ad450e1fea1fdaa3738753373 upstream.
    
    Today blkfront will trust the backend to send only sane response data.
    In order to avoid privilege escalations or crashes in case of malicious
    backends verify the data to be within expected limits. Especially make
    sure that the response always references an outstanding request.
    
    Introduce a new state of the ring BLKIF_STATE_ERROR which will be
    switched to in case an inconsistency is being detected. Recovering from
    this state is possible only via removing and adding the virtual device
    again (e.g. via a suspend/resume cycle).
    
    Make all warning messages issued due to valid error responses rate
    limited in order to avoid message floods being triggered by a malicious
    backend.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Link: https://lore.kernel.org/r/20210730103854.12681-4-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e147855fcf275f30dbc93e1a8f4031724e7ad13
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Jul 30 12:38:53 2021 +0200

    xen/blkfront: don't take local copy of a request from the ring page
    
    commit 8f5a695d99000fc3aa73934d7ced33cfc64dcdab upstream.
    
    In order to avoid a malicious backend being able to influence the local
    copy of a request build the request locally first and then copy it to
    the ring page instead of doing it the other way round as today.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Link: https://lore.kernel.org/r/20210730103854.12681-3-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 273f04d5d135c5a00f2b8666f51c2fe87b38bcb7
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Jul 30 12:38:52 2021 +0200

    xen/blkfront: read response from backend only once
    
    commit 71b66243f9898d0e54296b4e7035fb33cdcb0707 upstream.
    
    In order to avoid problems in case the backend is modifying a response
    on the ring page while the frontend has already seen it, just read the
    response into a local buffer in one go and then operate on that buffer
    only.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Link: https://lore.kernel.org/r/20210730103854.12681-2-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b98284aa3fc520e79e59753855c40f63b8c5389f
Author: Juergen Gross <jgross@suse.com>
Date:   Wed May 12 08:22:10 2021 +0200

    xen: sync include/xen/interface/io/ring.h with Xen's newest version
    
    commit 629a5d87e26fe96bcaab44cbb81f5866af6f7008 upstream.
    
    Sync include/xen/interface/io/ring.h with Xen's newest version in
    order to get the RING_COPY_RESPONSE() and RING_RESPONSE_PROD_OVERFLOW()
    macros.
    
    Note that this will correct the wrong license info by adding the
    missing original copyright notice.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 406f2d5fe368d440fd4e262188a6640f92804c5d
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Nov 26 13:35:26 2021 -0500

    tracing: Check pid filtering when creating events
    
    commit 6cb206508b621a9a0a2c35b60540e399225c8243 upstream.
    
    When pid filtering is activated in an instance, all of the events trace
    files for that instance has the PID_FILTER flag set. This determines
    whether or not pid filtering needs to be done on the event, otherwise the
    event is executed as normal.
    
    If pid filtering is enabled when an event is created (via a dynamic event
    or modules), its flag is not updated to reflect the current state, and the
    events are not filtered properly.
    
    Cc: stable@vger.kernel.org
    Fixes: 3fdaf80f4a836 ("tracing: Implement event pid filtering")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fd0ad08ee332d7b61e0fc7fabead1fb57554065
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon Nov 22 17:35:24 2021 +0100

    vhost/vsock: fix incorrect used length reported to the guest
    
    commit 49d8c5ffad07ca014cfae72a1b9b8c52b6ad9cb8 upstream.
    
    The "used length" reported by calling vhost_add_used() must be the
    number of bytes written by the device (using "in" buffers).
    
    In vhost_vsock_handle_tx_kick() the device only reads the guest
    buffers (they are all "out" buffers), without writing anything,
    so we must pass 0 as "used length" to comply virtio spec.
    
    Fixes: 433fc58e6bf2 ("VSOCK: Introduce vhost_vsock.ko")
    Cc: stable@vger.kernel.org
    Reported-by: Halil Pasic <pasic@linux.ibm.com>
    Suggested-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20211122163525.294024-2-sgarzare@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbc0514e1a343f82cfa7afa3aedda9007ccaac9b
Author: Joerg Roedel <jroedel@suse.de>
Date:   Tue Nov 23 11:55:07 2021 +0100

    iommu/amd: Clarify AMD IOMMUv2 initialization messages
    
    commit 717e88aad37befedfd531378b632e794e24e9afb upstream.
    
    The messages printed on the initialization of the AMD IOMMUv2 driver
    have caused some confusion in the past. Clarify the messages to lower
    the confusion in the future.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Link: https://lore.kernel.org/r/20211123105507.7654-3-joro@8bytes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5655b8bccb8a19a34c83225a1c7bf2adca50c2c3
Author: Steve French <stfrench@microsoft.com>
Date:   Wed Nov 10 01:47:48 2021 -0600

    smb3: do not error on fsync when readonly
    
    [ Upstream commit 71e6864eacbef0b2645ca043cdfbac272cb6cea3 ]
    
    Linux allows doing a flush/fsync on a file open for read-only,
    but the protocol does not allow that.  If the file passed in
    on the flush is read-only try to find a writeable handle for
    the same inode, if that is not possible skip sending the
    fsync call to the server to avoid breaking the apps.
    
    Reported-by: Julian Sikorski <belegdol@gmail.com>
    Tested-by: Julian Sikorski <belegdol@gmail.com>
    Suggested-by: Jeremy Allison <jra@samba.org>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c380062d0850d854578ef47ca714f135e6597a99
Author: Jeff Layton <jlayton@kernel.org>
Date:   Tue Oct 5 11:12:58 2021 -0400

    ceph: properly handle statfs on multifs setups
    
    [ Upstream commit 8cfc0c7ed34f7929ce7e5d7c6eecf4d01ba89a84 ]
    
    ceph_statfs currently stuffs the cluster fsid into the f_fsid field.
    This was fine when we only had a single filesystem per cluster, but now
    that we have multiples we need to use something that will vary between
    them.
    
    Change ceph_statfs to xor each 32-bit chunk of the fsid (aka cluster id)
    into the lower bits of the statfs->f_fsid. Change the lower bits to hold
    the fscid (filesystem ID within the cluster).
    
    That should give us a value that is guaranteed to be unique between
    filesystems within a cluster, and should minimize the chance of
    collisions between mounts of different clusters.
    
    URL: https://tracker.ceph.com/issues/52812
    Reported-by: Sachin Prabhu <sprabhu@redhat.com>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22423c966e02175a45bc010134d734e920b76cdf
Author: Weichao Guo <guoweichao@oppo.com>
Date:   Sat Sep 18 20:46:36 2021 +0800

    f2fs: set SBI_NEED_FSCK flag when inconsistent node block found
    
    [ Upstream commit 6663b138ded1a59e630c9e605e42aa7fde490cdc ]
    
    Inconsistent node block will cause a file fail to open or read,
    which could make the user process crashes or stucks. Let's mark
    SBI_NEED_FSCK flag to trigger a fix at next fsck time. After
    unlinking the corrupted file, the user process could regenerate
    a new one and work correctly.
    
    Signed-off-by: Weichao Guo <guoweichao@oppo.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6ee7abd6bfe559ad9989004b34c320fd638c526
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Tue Nov 23 11:40:47 2021 +0000

    sched/scs: Reset task stack state in bringup_cpu()
    
    [ Upstream commit dce1ca0525bfdc8a69a9343bc714fbc19a2f04b3 ]
    
    To hot unplug a CPU, the idle task on that CPU calls a few layers of C
    code before finally leaving the kernel. When KASAN is in use, poisoned
    shadow is left around for each of the active stack frames, and when
    shadow call stacks are in use. When shadow call stacks (SCS) are in use
    the task's saved SCS SP is left pointing at an arbitrary point within
    the task's shadow call stack.
    
    When a CPU is offlined than onlined back into the kernel, this stale
    state can adversely affect execution. Stale KASAN shadow can alias new
    stackframes and result in bogus KASAN warnings. A stale SCS SP is
    effectively a memory leak, and prevents a portion of the shadow call
    stack being used. Across a number of hotplug cycles the idle task's
    entire shadow call stack can become unusable.
    
    We previously fixed the KASAN issue in commit:
    
      e1b77c92981a5222 ("sched/kasan: remove stale KASAN poison after hotplug")
    
    ... by removing any stale KASAN stack poison immediately prior to
    onlining a CPU.
    
    Subsequently in commit:
    
      f1a0a376ca0c4ef1 ("sched/core: Initialize the idle task with preemption disabled")
    
    ... the refactoring left the KASAN and SCS cleanup in one-time idle
    thread initialization code rather than something invoked prior to each
    CPU being onlined, breaking both as above.
    
    We fixed SCS (but not KASAN) in commit:
    
      63acd42c0d4942f7 ("sched/scs: Reset the shadow stack when idle_task_exit")
    
    ... but as this runs in the context of the idle task being offlined it's
    potentially fragile.
    
    To fix these consistently and more robustly, reset the SCS SP and KASAN
    shadow of a CPU's idle task immediately before we online that CPU in
    bringup_cpu(). This ensures the idle task always has a consistent state
    when it is running, and removes the need to so so when exiting an idle
    task.
    
    Whenever any thread is created, dup_task_struct() will give the task a
    stack which is free of KASAN shadow, and initialize the task's SCS SP,
    so there's no need to specially initialize either for idle thread within
    init_idle(), as this was only necessary to handle hotplug cycles.
    
    I've tested this on arm64 with:
    
    * gcc 11.1.0, defconfig +KASAN_INLINE, KASAN_STACK
    * clang 12.0.0, defconfig +KASAN_INLINE, KASAN_STACK, SHADOW_CALL_STACK
    
    ... offlining and onlining CPUS with:
    
    | while true; do
    |   for C in /sys/devices/system/cpu/cpu*/online; do
    |     echo 0 > $C;
    |     echo 1 > $C;
    |   done
    | done
    
    Fixes: f1a0a376ca0c4ef1 ("sched/core: Initialize the idle task with preemption disabled")
    Reported-by: Qian Cai <quic_qiancai@quicinc.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Tested-by: Qian Cai <quic_qiancai@quicinc.com>
    Link: https://lore.kernel.org/lkml/20211115113310.35693-1-mark.rutland@arm.com/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71e38a0c7cf88c9ea672b8aa9cf978e01fdb17a3
Author: Arjun Roy <arjunroy@google.com>
Date:   Thu Dec 10 11:16:03 2020 -0800

    tcp: correctly handle increased zerocopy args struct size
    
    [ Upstream commit e0fecb289ad3fd2245cdc50bf450b97fcca39884 ]
    
    A prior patch increased the size of struct tcp_zerocopy_receive
    but did not update do_tcp_getsockopt() handling to properly account
    for this.
    
    This patch simply reintroduces content erroneously cut from the
    referenced prior patch that handles the new struct size.
    
    Fixes: 18fb76ed5386 ("net-zerocopy: Copy straggler unaligned data for TCP Rx. zerocopy.")
    Signed-off-by: Arjun Roy <arjunroy@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72f2117e450b631d269ad3a5372223febe487e13
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Nov 26 19:28:45 2021 +0200

    net: mscc: ocelot: correctly report the timestamping RX filters in ethtool
    
    [ Upstream commit c49a35eedfef08bffd46b53c25dbf9d6016a86ff ]
    
    The driver doesn't support RX timestamping for non-PTP packets, but it
    declares that it does. Restrict the reported RX filters to PTP v2 over
    L2 and over L4.
    
    Fixes: 4e3b0468e6d7 ("net: mscc: PTP Hardware Clock (PHC) support")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73115a2b38dd09ed28015a4d58b0587742fd7299
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Nov 26 19:28:41 2021 +0200

    net: mscc: ocelot: don't downgrade timestamping RX filters in SIOCSHWTSTAMP
    
    [ Upstream commit 8a075464d1e9317ffae0973dfe538a7511291a06 ]
    
    The ocelot driver, when asked to timestamp all receiving packets, 1588
    v1 or NTP, says "nah, here's 1588 v2 for you".
    
    According to this discussion:
    https://patchwork.kernel.org/project/netdevbpf/patch/20211104133204.19757-8-martin.kaistra@linutronix.de/#24577647
    drivers that downgrade from a wider request to a narrower response (or
    even a response where the intersection with the request is empty) are
    buggy, and should return -ERANGE instead. This patch fixes that.
    
    Fixes: 4e3b0468e6d7 ("net: mscc: PTP Hardware Clock (PHC) support")
    Suggested-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62343dadbb963cfaa9566795a9cb6ede00152a81
Author: Guangbin Huang <huangguangbin2@huawei.com>
Date:   Fri Nov 26 20:03:15 2021 +0800

    net: hns3: fix VF RSS failed problem after PF enable multi-TCs
    
    [ Upstream commit 8d2ad993aa05c0768f00c886c9d369cd97a337ac ]
    
    When PF is set to multi-TCs and configured mapping relationship between
    priorities and TCs, the hardware will active these settings for this PF
    and its VFs.
    
    In this case when VF just uses one TC and its rx packets contain priority,
    and if the priority is not mapped to TC0, as other TCs of VF is not valid,
    hardware always put this kind of packets to the queue 0. It cause this kind
    of packets of VF can not be used RSS function.
    
    To fix this problem, set tc mode of all unused TCs of VF to the setting of
    TC0, then rx packet with priority which map to unused TC will be direct to
    TC0.
    
    Fixes: e2cb1dec9779 ("net: hns3: Add HNS3 VF HCL(Hardware Compatibility Layer) Support")
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 215167df4512f2e7f3ace6b864a1697fcfeea03d
Author: Tony Lu <tonylu@linux.alibaba.com>
Date:   Fri Nov 26 10:41:35 2021 +0800

    net/smc: Don't call clcsock shutdown twice when smc shutdown
    
    [ Upstream commit bacb6c1e47691cda4a95056c21b5487fb7199fcc ]
    
    When applications call shutdown() with SHUT_RDWR in userspace,
    smc_close_active() calls kernel_sock_shutdown(), and it is called
    twice in smc_shutdown().
    
    This fixes this by checking sk_state before do clcsock shutdown, and
    avoids missing the application's call of smc_shutdown().
    
    Link: https://lore.kernel.org/linux-s390/1f67548e-cbf6-0dce-82b5-10288a4583bd@linux.ibm.com/
    Fixes: 606a63c9783a ("net/smc: Ensure the active closing peer first closes clcsock")
    Signed-off-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Wen Gu <guwen@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Link: https://lore.kernel.org/r/20211126024134.45693-1-tonylu@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e800ee43218a56acc93676bbb3d93b74779e555
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Fri Nov 26 09:59:42 2021 +0800

    net: vlan: fix underflow for the real_dev refcnt
    
    [ Upstream commit 01d9cc2dea3fde3bad6d27f464eff463496e2b00 ]
    
    Inject error before dev_hold(real_dev) in register_vlan_dev(),
    and execute the following testcase:
    
    ip link add dev dummy1 type dummy
    ip link add name dummy1.100 link dummy1 type vlan id 100
    ip link del dev dummy1
    
    When the dummy netdevice is removed, we will get a WARNING as following:
    
    =======================================================================
    refcount_t: decrement hit 0; leaking memory.
    WARNING: CPU: 2 PID: 0 at lib/refcount.c:31 refcount_warn_saturate+0xbf/0x1e0
    
    and an endless loop of:
    
    =======================================================================
    unregister_netdevice: waiting for dummy1 to become free. Usage count = -1073741824
    
    That is because dev_put(real_dev) in vlan_dev_free() be called without
    dev_hold(real_dev) in register_vlan_dev(). It makes the refcnt of real_dev
    underflow.
    
    Move the dev_hold(real_dev) to vlan_dev_init() which is the call-back of
    ndo_init(). That makes dev_hold() and dev_put() for vlan's real_dev
    symmetrical.
    
    Fixes: 563bcbae3ba2 ("net: vlan: fix a UAF in vlan_dev_real_dev()")
    Reported-by: Petr Machata <petrm@nvidia.com>
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Link: https://lore.kernel.org/r/20211126015942.2918542-1-william.xuanziyang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2659d2c670252759ee9c823c4e039c0e05a6f2
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Wed Nov 24 17:14:40 2021 +0100

    net/sched: sch_ets: don't peek at classes beyond 'nbands'
    
    [ Upstream commit de6d25924c2a8c2988c6a385990cafbe742061bf ]
    
    when the number of DRR classes decreases, the round-robin active list can
    contain elements that have already been freed in ets_qdisc_change(). As a
    consequence, it's possible to see a NULL dereference crash, caused by the
    attempt to call cl->qdisc->ops->peek(cl->qdisc) when cl->qdisc is NULL:
    
     BUG: kernel NULL pointer dereference, address: 0000000000000018
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 0 P4D 0
     Oops: 0000 [#1] PREEMPT SMP NOPTI
     CPU: 1 PID: 910 Comm: mausezahn Not tainted 5.16.0-rc1+ #475
     Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
     RIP: 0010:ets_qdisc_dequeue+0x129/0x2c0 [sch_ets]
     Code: c5 01 41 39 ad e4 02 00 00 0f 87 18 ff ff ff 49 8b 85 c0 02 00 00 49 39 c4 0f 84 ba 00 00 00 49 8b ad c0 02 00 00 48 8b 7d 10 <48> 8b 47 18 48 8b 40 38 0f ae e8 ff d0 48 89 c3 48 85 c0 0f 84 9d
     RSP: 0000:ffffbb36c0b5fdd8 EFLAGS: 00010287
     RAX: ffff956678efed30 RBX: 0000000000000000 RCX: 0000000000000000
     RDX: 0000000000000002 RSI: ffffffff9b938dc9 RDI: 0000000000000000
     RBP: ffff956678efed30 R08: e2f3207fe360129c R09: 0000000000000000
     R10: 0000000000000001 R11: 0000000000000001 R12: ffff956678efeac0
     R13: ffff956678efe800 R14: ffff956611545000 R15: ffff95667ac8f100
     FS:  00007f2aa9120740(0000) GS:ffff95667b800000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000018 CR3: 000000011070c000 CR4: 0000000000350ee0
     Call Trace:
      <TASK>
      qdisc_peek_dequeued+0x29/0x70 [sch_ets]
      tbf_dequeue+0x22/0x260 [sch_tbf]
      __qdisc_run+0x7f/0x630
      net_tx_action+0x290/0x4c0
      __do_softirq+0xee/0x4f8
      irq_exit_rcu+0xf4/0x130
      sysvec_apic_timer_interrupt+0x52/0xc0
      asm_sysvec_apic_timer_interrupt+0x12/0x20
     RIP: 0033:0x7f2aa7fc9ad4
     Code: b9 ff ff 48 8b 54 24 18 48 83 c4 08 48 89 ee 48 89 df 5b 5d e9 ed fc ff ff 0f 1f 00 66 2e 0f 1f 84 00 00 00 00 00 f3 0f 1e fa <53> 48 83 ec 10 48 8b 05 10 64 33 00 48 8b 00 48 85 c0 0f 85 84 00
     RSP: 002b:00007ffe5d33fab8 EFLAGS: 00000202
     RAX: 0000000000000002 RBX: 0000561f72c31460 RCX: 0000561f72c31720
     RDX: 0000000000000002 RSI: 0000561f72c31722 RDI: 0000561f72c31720
     RBP: 000000000000002a R08: 00007ffe5d33fa40 R09: 0000000000000014
     R10: 0000000000000000 R11: 0000000000000246 R12: 0000561f7187e380
     R13: 0000000000000000 R14: 0000000000000000 R15: 0000561f72c31460
      </TASK>
     Modules linked in: sch_ets sch_tbf dummy rfkill iTCO_wdt intel_rapl_msr iTCO_vendor_support intel_rapl_common joydev virtio_balloon lpc_ich i2c_i801 i2c_smbus pcspkr ip_tables xfs libcrc32c crct10dif_pclmul crc32_pclmul crc32c_intel ahci libahci ghash_clmulni_intel serio_raw libata virtio_blk virtio_console virtio_net net_failover failover sunrpc dm_mirror dm_region_hash dm_log dm_mod
     CR2: 0000000000000018
    
    Ensuring that 'alist' was never zeroed [1] was not sufficient, we need to
    remove from the active list those elements that are no more SP nor DRR.
    
    [1] https://lore.kernel.org/netdev/60d274838bf09777f0371253416e8af71360bc08.1633609148.git.dcaratti@redhat.com/
    
    v3: fix race between ets_qdisc_change() and ets_qdisc_dequeue() delisting
        DRR classes beyond 'nbands' in ets_qdisc_change() with the qdisc lock
        acquired, thanks to Cong Wang.
    
    v2: when a NULL qdisc is found in the DRR active list, try to dequeue skb
        from the next list item.
    
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Fixes: dcc68b4d8084 ("net: sch_ets: Add a new Qdisc")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Link: https://lore.kernel.org/r/7a5c496eed2d62241620bdbb83eb03fb9d571c99.1637762721.git.dcaratti@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3509feb46fa15680a9c8afbcb760e962349c1e2
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Nov 24 15:25:56 2021 -0800

    tls: fix replacing proto_ops
    
    [ Upstream commit f3911f73f51d1534f4db70b516cc1fcb6be05bae ]
    
    We replace proto_ops whenever TLS is configured for RX. But our
    replacement also overrides sendpage_locked, which will crash
    unless TX is also configured. Similarly we plug both of those
    in for TLS_HW (NIC crypto offload) even tho TLS_HW has a completely
    different implementation for TX.
    
    Last but not least we always plug in something based on inet_stream_ops
    even though a few of the callbacks differ for IPv6 (getname, release,
    bind).
    
    Use a callback building method similar to what we do for struct proto.
    
    Fixes: c46234ebb4d1 ("tls: RX path for ktls")
    Fixes: d4ffb02dee2f ("net/tls: enable sk_msg redirect to tls socket egress")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22156242b1042d5cce74f1bd20db541abdd2ecd7
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Nov 24 15:25:52 2021 -0800

    tls: splice_read: fix record type check
    
    [ Upstream commit 520493f66f6822551aef2879cd40207074fe6980 ]
    
    We don't support splicing control records. TLS 1.3 changes moved
    the record type check into the decrypt if(). The skb may already
    be decrypted and still be an alert.
    
    Note that decrypt_skb_update() is idempotent and updates ctx->decrypted
    so the if() is pointless.
    
    Reorder the check for decryption errors with the content type check
    while touching them. This part is not really a bug, because if
    decryption failed in TLS 1.3 content type will be DATA, and for
    TLS 1.2 it will be correct. Nevertheless its strange to touch output
    before checking if the function has failed.
    
    Fixes: fedf201e1296 ("net: tls: Refactor control message handling on recv")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b6c71c097daff9dd724cd306042045d18fd6b03
Author: Huang Pei <huangpei@loongson.cn>
Date:   Thu Nov 25 18:59:48 2021 +0800

    MIPS: use 3-level pgtable for 64KB page size on MIPS_VA_BITS_48
    
    [ Upstream commit 41ce097f714401e6ad8f3f5eb30d7f91b0b5e495 ]
    
    It hangup when booting Loongson 3A1000 with BOTH
    CONFIG_PAGE_SIZE_64KB and CONFIG_MIPS_VA_BITS_48, that it turn
    out to use 2-level pgtable instead of 3-level. 64KB page size
    with 2-level pgtable only cover 42 bits VA, use 3-level pgtable
    to cover all 48 bits VA(55 bits)
    
    Fixes: 1e321fa917fb ("MIPS64: Support of at least 48 bits of SEGBITS)
    Signed-off-by: Huang Pei <huangpei@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6a5d853f1e6b731d5c4709001f71b4a35c31f1b
Author: Huang Pei <huangpei@loongson.cn>
Date:   Thu Nov 25 18:59:49 2021 +0800

    MIPS: loongson64: fix FTLB configuration
    
    [ Upstream commit 7db5e9e9e5e6c10d7d26f8df7f8fd8841cb15ee7 ]
    
    It turns out that 'decode_configs' -> 'set_ftlb_enable' is called under
    c->cputype unset, which leaves FTLB disabled on BOTH 3A2000 and 3A3000
    
    Fix it by calling "decode_configs" after c->cputype is initialized
    
    Fixes: da1bd29742b1 ("MIPS: Loongson64: Probe CPU features via CPUCFG")
    Signed-off-by: Huang Pei <huangpei@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e823dbee23cc06712d6d39dc7bb38711f407ffc
Author: Jesse Brandeburg <jesse.brandeburg@intel.com>
Date:   Tue Nov 23 12:40:00 2021 -0800

    igb: fix netpoll exit with traffic
    
    [ Upstream commit eaeace60778e524a2820d0c0ad60bf80289e292c ]
    
    Oleksandr brought a bug report where netpoll causes trace
    messages in the log on igb.
    
    Danielle brought this back up as still occurring, so we'll try
    again.
    
    [22038.710800] ------------[ cut here ]------------
    [22038.710801] igb_poll+0x0/0x1440 [igb] exceeded budget in poll
    [22038.710802] WARNING: CPU: 12 PID: 40362 at net/core/netpoll.c:155 netpoll_poll_dev+0x18a/0x1a0
    
    As Alex suggested, change the driver to return work_done at the
    exit of napi_poll, which should be safe to do in this driver
    because it is not polling multiple queues in this single napi
    context (multiple queues attached to one MSI-X vector). Several
    other drivers contain the same simple sequence, so I hope
    this will not create new problems.
    
    Fixes: 16eb8815c235 ("igb: Refactor clean_rx_irq to reduce overhead and improve performance")
    Reported-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Reported-by: Danielle Ratson <danieller@nvidia.com>
    Suggested-by: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Tested-by: Danielle Ratson <danieller@nvidia.com>
    Link: https://lore.kernel.org/r/20211123204000.1597971-1-jesse.brandeburg@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2a58ff3e3ad6104fde2561407f35a1aba5a5b7b
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Mon Nov 22 11:08:27 2021 +0100

    nvmet: use IOCB_NOWAIT only if the filesystem supports it
    
    [ Upstream commit c024b226a417c4eb9353ff500b1c823165d4d508 ]
    
    Submit I/O requests with the IOCB_NOWAIT flag set only if
    the underlying filesystem supports it.
    
    Fixes: 50a909db36f2 ("nvmet: use IOCB_NOWAIT for file-ns buffered I/O")
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12ceb52f2cc49583394bad42a39468fde9d8e0cc
Author: Guo DaXing <guodaxing@huawei.com>
Date:   Wed Nov 24 13:32:38 2021 +0100

    net/smc: Fix loop in smc_listen
    
    [ Upstream commit 9ebb0c4b27a6158303b791b5b91e66d7665ee30e ]
    
    The kernel_listen function in smc_listen will fail when all the available
    ports are occupied.  At this point smc->clcsock->sk->sk_data_ready has
    been changed to smc_clcsock_data_ready.  When we call smc_listen again,
    now both smc->clcsock->sk->sk_data_ready and smc->clcsk_data_ready point
    to the smc_clcsock_data_ready function.
    
    The smc_clcsock_data_ready() function calls lsmc->clcsk_data_ready which
    now points to itself resulting in an infinite loop.
    
    This patch restores smc->clcsock->sk->sk_data_ready with the old value.
    
    Fixes: a60a2b1e0af1 ("net/smc: reduce active tcp_listen workers")
    Signed-off-by: Guo DaXing <guodaxing@huawei.com>
    Acked-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c94cbd262b6aa3b54d73a1ed1f9c0d19df57f4ff
Author: Karsten Graul <kgraul@linux.ibm.com>
Date:   Wed Nov 24 13:32:37 2021 +0100

    net/smc: Fix NULL pointer dereferencing in smc_vlan_by_tcpsk()
    
    [ Upstream commit 587acad41f1bc48e16f42bb2aca63bf323380be8 ]
    
    Coverity reports a possible NULL dereferencing problem:
    
    in smc_vlan_by_tcpsk():
    6. returned_null: netdev_lower_get_next returns NULL (checked 29 out of 30 times).
    7. var_assigned: Assigning: ndev = NULL return value from netdev_lower_get_next.
    1623                ndev = (struct net_device *)netdev_lower_get_next(ndev, &lower);
    CID 1468509 (#1 of 1): Dereference null return value (NULL_RETURNS)
    8. dereference: Dereferencing a pointer that might be NULL ndev when calling is_vlan_dev.
    1624                if (is_vlan_dev(ndev)) {
    
    Remove the manual implementation and use netdev_walk_all_lower_dev() to
    iterate over the lower devices. While on it remove an obsolete function
    parameter comment.
    
    Fixes: cb9d43f67754 ("net/smc: determine vlan_id of stacked net_device")
    Suggested-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d4937c6a328947f980ba0e7a7f03901a2ec2aa0
Author: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
Date:   Tue Nov 23 16:44:03 2021 +0100

    net: phylink: Force retrigger in case of latched link-fail indicator
    
    [ Upstream commit dbae3388ea9ca33bd1d5eabc3b0ef17e69c74677 ]
    
    On mv88e6xxx 1G/2.5G PCS, the SerDes register 4.2001.2 has the following
    description:
      This register bit indicates when link was lost since the last
      read. For the current link status, read this register
      back-to-back.
    
    Thus to get current link state, we need to read the register twice.
    
    But doing that in the link change interrupt handler would lead to
    potentially ignoring link down events, which we really want to avoid.
    
    Thus this needs to be solved in phylink's resolve, by retriggering
    another resolve in the event when PCS reports link down and previous
    link was up, and by re-reading PCS state if the previous link was down.
    
    The wrong value is read when phylink requests change from sgmii to
    2500base-x mode, and link won't come up. This fixes the bug.
    
    Fixes: 9525ae83959b ("phylink: add phylink infrastructure")
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50162ff3c80fe8db7cfff76ecf54b9e80c5923a3
Author: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
Date:   Tue Nov 23 16:44:02 2021 +0100

    net: phylink: Force link down and retrigger resolve on interface change
    
    [ Upstream commit 80662f4fd4771bc9c7cc4abdfbe866ebd1179621 ]
    
    On PHY state change the phylink_resolve() function can read stale
    information from the MAC and report incorrect link speed and duplex to
    the kernel message log.
    
    Example with a Marvell 88X3310 PHY connected to a SerDes port on Marvell
    88E6393X switch:
    - PHY driver triggers state change due to PHY interface mode being
      changed from 10gbase-r to 2500base-x due to copper change in speed
      from 10Gbps to 2.5Gbps, but the PHY itself either hasn't yet changed
      its interface to the host, or the interrupt about loss of SerDes link
      hadn't arrived yet (there can be a delay of several milliseconds for
      this), so we still think that the 10gbase-r mode is up
    - phylink_resolve()
      - phylink_mac_pcs_get_state()
        - this fills in speed=10g link=up
      - interface mode is updated to 2500base-x but speed is left at 10Gbps
      - phylink_major_config()
        - interface is changed to 2500base-x
      - phylink_link_up()
        - mv88e6xxx_mac_link_up()
          - .port_set_speed_duplex()
            - speed is set to 10Gbps
        - reports "Link is Up - 10Gbps/Full" to dmesg
    
    Afterwards when the interrupt finally arrives for mv88e6xxx, another
    resolve is forced in which we get the correct speed from
    phylink_mac_pcs_get_state(), but since the interface is not being
    changed anymore, we don't call phylink_major_config() but only
    phylink_mac_config(), which does not set speed/duplex anymore.
    
    To fix this, we need to force the link down and trigger another resolve
    on PHY interface change event.
    
    Fixes: 9525ae83959b ("phylink: add phylink infrastructure")
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95ba8f0d57ce1248eb105fa0a003d57ec98ab730
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Wed Nov 24 08:16:25 2021 +0100

    lan743x: fix deadlock in lan743x_phy_link_status_change()
    
    [ Upstream commit ddb826c2c92d461f290a7bab89e7c28696191875 ]
    
    Usage of phy_ethtool_get_link_ksettings() in the link status change
    handler isn't needed, and in combination with the referenced change
    it results in a deadlock. Simply remove the call and replace it with
    direct access to phydev->speed. The duplex argument of
    lan743x_phy_update_flowcontrol() isn't used and can be removed.
    
    Fixes: c10a485c3de5 ("phy: phy_ethtool_ksettings_get: Lock the phy for consistency")
    Reported-by: Alessandro B Maurici <abmaurici@gmail.com>
    Tested-by: Alessandro B Maurici <abmaurici@gmail.com>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/40e27f76-0ba3-dcef-ee32-a78b9df38b0f@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5e4316d9c02e926ed74f53ecd65a757dcbe0cd9
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Nov 23 12:25:35 2021 -0800

    tcp_cubic: fix spurious Hystart ACK train detections for not-cwnd-limited flows
    
    [ Upstream commit 4e1fddc98d2585ddd4792b5e44433dcee7ece001 ]
    
    While testing BIG TCP patch series, I was expecting that TCP_RR workloads
    with 80KB requests/answers would send one 80KB TSO packet,
    then being received as a single GRO packet.
    
    It turns out this was not happening, and the root cause was that
    cubic Hystart ACK train was triggering after a few (2 or 3) rounds of RPC.
    
    Hystart was wrongly setting CWND/SSTHRESH to 30, while my RPC
    needed a budget of ~20 segments.
    
    Ideally these TCP_RR flows should not exit slow start.
    
    Cubic Hystart should reset itself at each round, instead of assuming
    every TCP flow is a bulk one.
    
    Note that even after this patch, Hystart can still trigger, depending
    on scheduling artifacts, but at a higher CWND/SSTHRESH threshold,
    keeping optimal TSO packet sizes.
    
    Tested:
    
    ip link set dev eth0 gro_ipv6_max_size 131072 gso_ipv6_max_size 131072
    nstat -n; netperf -H ... -t TCP_RR  -l 5  -- -r 80000,80000 -K cubic; nstat|egrep "Ip6InReceives|Hystart|Ip6OutRequests"
    
    Before:
    
       8605
    Ip6InReceives                   87541              0.0
    Ip6OutRequests                  129496             0.0
    TcpExtTCPHystartTrainDetect     1                  0.0
    TcpExtTCPHystartTrainCwnd       30                 0.0
    
    After:
    
      8760
    Ip6InReceives                   88514              0.0
    Ip6OutRequests                  87975              0.0
    
    Fixes: ae27e98a5152 ("[TCP] CUBIC v2.3")
    Co-developed-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Link: https://lore.kernel.org/r/20211123202535.1843771-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3187623096091d8c60231de5ca0e020bfa5e6ee9
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Tue Nov 9 11:24:10 2021 -0500

    drm/amd/display: Set plane update flags for all planes in reset
    
    [ Upstream commit 21431f70f6014f81b0d118ff4fcee12b00b9dd70 ]
    
    [Why]
    We're only setting the flags on stream[0]'s planes so this logic fails
    if we have more than one stream in the state.
    
    This can cause a page flip timeout with multiple displays in the
    configuration.
    
    [How]
    Index into the stream_status array using the stream index - it's a 1:1
    mapping.
    
    Fixes: cdaae8371aa9 ("drm/amd/display: Handle GPU reset for DC block")
    
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f634c755a0ee16232a450406cbd6266f0f500d2d
Author: Thomas Zeitlhofer <thomas.zeitlhofer+lkml@ze-it.at>
Date:   Tue Nov 23 20:18:43 2021 +0100

    PM: hibernate: use correct mode for swsusp_close()
    
    [ Upstream commit cefcf24b4d351daf70ecd945324e200d3736821e ]
    
    Commit 39fbef4b0f77 ("PM: hibernate: Get block device exclusively in
    swsusp_check()") changed the opening mode of the block device to
    (FMODE_READ | FMODE_EXCL).
    
    In the corresponding calls to swsusp_close(), the mode is still just
    FMODE_READ which triggers the warning in blkdev_flush_mapping() on
    resume from hibernate.
    
    So, use the mode (FMODE_READ | FMODE_EXCL) also when closing the
    device.
    
    Fixes: 39fbef4b0f77 ("PM: hibernate: Get block device exclusively in swsusp_check()")
    Signed-off-by: Thomas Zeitlhofer <thomas.zeitlhofer+lkml@ze-it.at>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 440bd9faad298c3cb31dcc6713070dc718769d47
Author: Kumar Thangavel <kumarthangavel.hcl@gmail.com>
Date:   Mon Nov 22 22:08:18 2021 +0530

    net/ncsi : Add payload to be 32-bit aligned to fix dropped packets
    
    [ Upstream commit ac132852147ad303a938dda318970dd1bbdfda4e ]
    
    Update NC-SI command handler (both standard and OEM) to take into
    account of payload paddings in allocating skb (in case of payload
    size is not 32-bit aligned).
    
    The checksum field follows payload field, without taking payload
    padding into account can cause checksum being truncated, leading to
    dropped packets.
    
    Fixes: fb4ee67529ff ("net/ncsi: Add NCSI OEM command support")
    Signed-off-by: Kumar Thangavel <thangavel.k@hcl.com>
    Acked-by: Samuel Mendoza-Jonas <sam@mendozajonas.com>
    Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac88cb3c44b6cf2fa29cd76c09cf8717e7056685
Author: Varun Prakash <varun@chelsio.com>
Date:   Mon Nov 22 15:38:41 2021 +0530

    nvmet-tcp: fix incomplete data digest send
    
    [ Upstream commit 102110efdff6beedece6ab9b51664c32ac01e2db ]
    
    Current nvmet_try_send_ddgst() code does not check whether
    all data digest bytes are transmitted, fix this by returning
    -EAGAIN if all data digest bytes are not transmitted.
    
    Fixes: 872d26a391da ("nvmet-tcp: add NVMe over TCP target driver")
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8889ff80fde3461e24e25e1578b7f170c0bb9cab
Author: Marek Behún <kabel@kernel.org>
Date:   Mon Nov 22 21:08:34 2021 +0100

    net: marvell: mvpp2: increase MTU limit when XDP enabled
    
    [ Upstream commit 7b1b62bc1e6a7b2fd5ee7a4296268eb291d23aeb ]
    
    Currently mvpp2_xdp_setup won't allow attaching XDP program if
      mtu > ETH_DATA_LEN (1500).
    
    The mvpp2_change_mtu on the other hand checks whether
      MVPP2_RX_PKT_SIZE(mtu) > MVPP2_BM_LONG_PKT_SIZE.
    
    These two checks are semantically different.
    
    Moreover this limit can be increased to MVPP2_MAX_RX_BUF_SIZE, since in
    mvpp2_rx we have
      xdp.data = data + MVPP2_MH_SIZE + MVPP2_SKB_HEADROOM;
      xdp.frame_sz = PAGE_SIZE;
    
    Change the checks to check whether
      mtu > MVPP2_MAX_RX_BUF_SIZE
    
    Fixes: 07dd0a7aae7f ("mvpp2: add basic XDP support")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90d0736876c50ecde1a3275636a06b9ddb1cace9
Author: Amit Cohen <amcohen@nvidia.com>
Date:   Tue Nov 23 09:52:56 2021 +0200

    mlxsw: spectrum: Protect driver from buggy firmware
    
    [ Upstream commit 63b08b1f6834bbb0b4f7783bf63b80c8c8e9a047 ]
    
    When processing port up/down events generated by the device's firmware,
    the driver protects itself from events reported for non-existent local
    ports, but not the CPU port (local port 0), which exists, but lacks a
    netdev.
    
    This can result in a NULL pointer dereference when calling
    netif_carrier_{on,off}().
    
    Fix this by bailing early when processing an event reported for the CPU
    port. Problem was only observed when running on top of a buggy emulator.
    
    Fixes: 28b1987ef506 ("mlxsw: spectrum: Register CPU port with devlink")
    Signed-off-by: Amit Cohen <amcohen@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33d89128a9602c34d2875dbf7153d9bdbccd7511
Author: Danielle Ratson <danieller@nvidia.com>
Date:   Mon May 17 20:03:57 2021 +0300

    mlxsw: Verify the accessed index doesn't exceed the array length
    
    [ Upstream commit 837ec05cfea08284c575e8e834777b107da5ff9d ]
    
    There are few cases in which an array index queried from a fw register,
    is accessed without any validation that it doesn't exceed the array
    length.
    
    Add a proper length validation, so accessing memory past the end of an
    array will be forbidden.
    
    Signed-off-by: Danielle Ratson <danieller@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29e1b57347957a2be71af782ba5aeaadf544be29
Author: Tony Lu <tonylu@linux.alibaba.com>
Date:   Tue Nov 23 16:25:18 2021 +0800

    net/smc: Ensure the active closing peer first closes clcsock
    
    [ Upstream commit 606a63c9783a32a45bd2ef0eee393711d75b3284 ]
    
    The side that actively closed socket, it's clcsock doesn't enter
    TIME_WAIT state, but the passive side does it. It should show the same
    behavior as TCP sockets.
    
    Consider this, when client actively closes the socket, the clcsock in
    server enters TIME_WAIT state, which means the address is occupied and
    won't be reused before TIME_WAIT dismissing. If we restarted server, the
    service would be unavailable for a long time.
    
    To solve this issue, shutdown the clcsock in [A], perform the TCP active
    close progress first, before the passive closed side closing it. So that
    the actively closed side enters TIME_WAIT, not the passive one.
    
    Client                                            |  Server
    close() // client actively close                  |
      smc_release()                                   |
          smc_close_active() // PEERCLOSEWAIT1        |
              smc_close_final() // abort or closed = 1|
                  smc_cdc_get_slot_and_msg_send()     |
              [A]                                     |
                                                      |smc_cdc_msg_recv_action() // ACTIVE
                                                      |  queue_work(smc_close_wq, &conn->close_work)
                                                      |    smc_close_passive_work() // PROCESSABORT or APPCLOSEWAIT1
                                                      |      smc_close_passive_abort_received() // only in abort
                                                      |
                                                      |close() // server recv zero, close
                                                      |  smc_release() // PROCESSABORT or APPCLOSEWAIT1
                                                      |    smc_close_active()
                                                      |      smc_close_abort() or smc_close_final() // CLOSED
                                                      |        smc_cdc_get_slot_and_msg_send() // abort or closed = 1
    smc_cdc_msg_recv_action()                         |    smc_clcsock_release()
      queue_work(smc_close_wq, &conn->close_work)     |      sock_release(tcp) // actively close clc, enter TIME_WAIT
        smc_close_passive_work() // PEERCLOSEWAIT1    |    smc_conn_free()
          smc_close_passive_abort_received() // CLOSED|
          smc_conn_free()                             |
          smc_clcsock_release()                       |
            sock_release(tcp) // passive close clc    |
    
    Link: https://www.spinics.net/lists/netdev/msg780407.html
    Fixes: b38d732477e4 ("smc: socket closing and linkgroup cleanup")
    Signed-off-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Wen Gu <guwen@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77d9c2efa870c969b52a75aa50119752ae33dfd7
Author: Huang Jianan <huangjianan@oppo.com>
Date:   Thu Nov 18 21:58:44 2021 +0800

    erofs: fix deadlock when shrink erofs slab
    
    [ Upstream commit 57bbeacdbee72a54eb97d56b876cf9c94059fc34 ]
    
    We observed the following deadlock in the stress test under low
    memory scenario:
    
    Thread A                               Thread B
    - erofs_shrink_scan
     - erofs_try_to_release_workgroup
      - erofs_workgroup_try_to_freeze -- A
                                           - z_erofs_do_read_page
                                            - z_erofs_collection_begin
                                             - z_erofs_register_collection
                                              - erofs_insert_workgroup
                                               - xa_lock(&sbi->managed_pslots) -- B
                                               - erofs_workgroup_get
                                                - erofs_wait_on_workgroup_freezed -- A
      - xa_erase
       - xa_lock(&sbi->managed_pslots) -- B
    
    To fix this, it needs to hold xa_lock before freezing the workgroup
    since xarray will be touched then. So let's hold the lock before
    accessing each workgroup, just like what we did with the radix tree
    before.
    
    [ Gao Xiang: Jianhua Hao also reports this issue at
      https://lore.kernel.org/r/b10b85df30694bac8aadfe43537c897a@xiaomi.com ]
    
    Link: https://lore.kernel.org/r/20211118135844.3559-1-huangjianan@oppo.com
    Fixes: 64094a04414f ("erofs: convert workstn to XArray")
    Reviewed-by: Chao Yu <chao@kernel.org>
    Reviewed-by: Gao Xiang <hsiangkao@linux.alibaba.com>
    Signed-off-by: Huang Jianan <huangjianan@oppo.com>
    Reported-by: Jianhua Hao <haojianhua1@xiaomi.com>
    Signed-off-by: Gao Xiang <xiang@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f540c7ffb1e5be3b5d5607deabfda0dec0d0a2d
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Mon Nov 22 15:12:23 2021 +0900

    scsi: scsi_debug: Zero clear zones at reset write pointer
    
    [ Upstream commit 2d62253eb1b60f4ce8b39125eee282739b519297 ]
    
    When a reset is requested the position of the write pointer is updated but
    the data in the corresponding zone is not cleared. Instead scsi_debug
    returns any data written before the write pointer was reset. This is an
    error and prevents using scsi_debug for stale page cache testing of the
    BLKRESETZONE ioctl.
    
    Zero written data in the zone when resetting the write pointer.
    
    Link: https://lore.kernel.org/r/20211122061223.298890-1-shinichiro.kawasaki@wdc.com
    Fixes: f0d1cf9378bd ("scsi: scsi_debug: Add ZBC zone commands")
    Reviewed-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 725ba1289508e1940ddc43142ff6f91cbcf77ec4
Author: Mike Christie <michael.christie@oracle.com>
Date:   Sat Nov 20 10:49:17 2021 -0600

    scsi: core: sysfs: Fix setting device state to SDEV_RUNNING
    
    [ Upstream commit eb97545d6264b341b06ba7603f52ff6c0b2af6ea ]
    
    This fixes an issue added in commit 4edd8cd4e86d ("scsi: core: sysfs: Fix
    hang when device state is set via sysfs") where if userspace is requesting
    to set the device state to SDEV_RUNNING when the state is already
    SDEV_RUNNING, we return -EINVAL instead of count. The commmit above set ret
    to count for this case, when it should have set it to 0.
    
    Link: https://lore.kernel.org/r/20211120164917.4924-1-michael.christie@oracle.com
    Fixes: 4edd8cd4e86d ("scsi: core: sysfs: Fix hang when device state is set via sysfs")
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e65a8707b4cd756d26d246bb2b9fab06eebafac1
Author: Marta Plantykow <marta.a.plantykow@intel.com>
Date:   Tue Oct 26 18:47:19 2021 +0200

    ice: avoid bpf_prog refcount underflow
    
    [ Upstream commit f65ee535df775a13a1046c0a0b2d72db342f8a5b ]
    
    Ice driver has the routines for managing XDP resources that are shared
    between ndo_bpf op and VSI rebuild flow. The latter takes place for
    example when user changes queue count on an interface via ethtool's
    set_channels().
    
    There is an issue around the bpf_prog refcounting when VSI is being
    rebuilt - since ice_prepare_xdp_rings() is called with vsi->xdp_prog as
    an argument that is used later on by ice_vsi_assign_bpf_prog(), same
    bpf_prog pointers are swapped with each other. Then it is also
    interpreted as an 'old_prog' which in turn causes us to call
    bpf_prog_put on it that will decrement its refcount.
    
    Below splat can be interpreted in a way that due to zero refcount of a
    bpf_prog it is wiped out from the system while kernel still tries to
    refer to it:
    
    [  481.069429] BUG: unable to handle page fault for address: ffffc9000640f038
    [  481.077390] #PF: supervisor read access in kernel mode
    [  481.083335] #PF: error_code(0x0000) - not-present page
    [  481.089276] PGD 100000067 P4D 100000067 PUD 1001cb067 PMD 106d2b067 PTE 0
    [  481.097141] Oops: 0000 [#1] PREEMPT SMP PTI
    [  481.101980] CPU: 12 PID: 3339 Comm: sudo Tainted: G           OE     5.15.0-rc5+ #1
    [  481.110840] Hardware name: Intel Corp. GRANTLEY/GRANTLEY, BIOS GRRFCRB1.86B.0276.D07.1605190235 05/19/2016
    [  481.122021] RIP: 0010:dev_xdp_prog_id+0x25/0x40
    [  481.127265] Code: 80 00 00 00 00 0f 1f 44 00 00 89 f6 48 c1 e6 04 48 01 fe 48 8b 86 98 08 00 00 48 85 c0 74 13 48 8b 50 18 31 c0 48 85 d2 74 07 <48> 8b 42 38 8b 40 20 c3 48 8b 96 90 08 00 00 eb e8 66 2e 0f 1f 84
    [  481.148991] RSP: 0018:ffffc90007b63868 EFLAGS: 00010286
    [  481.155034] RAX: 0000000000000000 RBX: ffff889080824000 RCX: 0000000000000000
    [  481.163278] RDX: ffffc9000640f000 RSI: ffff889080824010 RDI: ffff889080824000
    [  481.171527] RBP: ffff888107af7d00 R08: 0000000000000000 R09: ffff88810db5f6e0
    [  481.179776] R10: 0000000000000000 R11: ffff8890885b9988 R12: ffff88810db5f4bc
    [  481.188026] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    [  481.196276] FS:  00007f5466d5bec0(0000) GS:ffff88903fb00000(0000) knlGS:0000000000000000
    [  481.205633] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  481.212279] CR2: ffffc9000640f038 CR3: 000000014429c006 CR4: 00000000003706e0
    [  481.220530] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  481.228771] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  481.237029] Call Trace:
    [  481.239856]  rtnl_fill_ifinfo+0x768/0x12e0
    [  481.244602]  rtnl_dump_ifinfo+0x525/0x650
    [  481.249246]  ? __alloc_skb+0xa5/0x280
    [  481.253484]  netlink_dump+0x168/0x3c0
    [  481.257725]  netlink_recvmsg+0x21e/0x3e0
    [  481.262263]  ____sys_recvmsg+0x87/0x170
    [  481.266707]  ? __might_fault+0x20/0x30
    [  481.271046]  ? _copy_from_user+0x66/0xa0
    [  481.275591]  ? iovec_from_user+0xf6/0x1c0
    [  481.280226]  ___sys_recvmsg+0x82/0x100
    [  481.284566]  ? sock_sendmsg+0x5e/0x60
    [  481.288791]  ? __sys_sendto+0xee/0x150
    [  481.293129]  __sys_recvmsg+0x56/0xa0
    [  481.297267]  do_syscall_64+0x3b/0xc0
    [  481.301395]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [  481.307238] RIP: 0033:0x7f5466f39617
    [  481.311373] Code: 0c 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb bd 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2f 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 89 54 24 1c 48 89 74 24 10
    [  481.342944] RSP: 002b:00007ffedc7f4308 EFLAGS: 00000246 ORIG_RAX: 000000000000002f
    [  481.361783] RAX: ffffffffffffffda RBX: 00007ffedc7f5460 RCX: 00007f5466f39617
    [  481.380278] RDX: 0000000000000000 RSI: 00007ffedc7f5360 RDI: 0000000000000003
    [  481.398500] RBP: 00007ffedc7f53f0 R08: 0000000000000000 R09: 000055d556f04d50
    [  481.416463] R10: 0000000000000077 R11: 0000000000000246 R12: 00007ffedc7f5360
    [  481.434131] R13: 00007ffedc7f5350 R14: 00007ffedc7f5344 R15: 0000000000000e98
    [  481.451520] Modules linked in: ice(OE) af_packet binfmt_misc nls_iso8859_1 ipmi_ssif intel_rapl_msr intel_rapl_common x86_pkg_temp_thermal intel_powerclamp mxm_wmi mei_me coretemp mei ipmi_si ipmi_msghandler wmi acpi_pad acpi_power_meter ip_tables x_tables autofs4 crct10dif_pclmul crc32_pclmul ghash_clmulni_intel aesni_intel ahci crypto_simd cryptd libahci lpc_ich [last unloaded: ice]
    [  481.528558] CR2: ffffc9000640f038
    [  481.542041] ---[ end trace d1f24c9ecf5b61c1 ]---
    
    Fix this by only calling ice_vsi_assign_bpf_prog() inside
    ice_prepare_xdp_rings() when current vsi->xdp_prog pointer is NULL.
    This way set_channels() flow will not attempt to swap the vsi->xdp_prog
    pointers with itself.
    
    Also, sprinkle around some comments that provide a reasoning about
    correlation between driver and kernel in terms of bpf_prog refcount.
    
    Fixes: efc2214b6047 ("ice: Add support for XDP")
    Reviewed-by: Alexander Lobakin <alexandr.lobakin@intel.com>
    Signed-off-by: Marta Plantykow <marta.a.plantykow@intel.com>
    Co-developed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Tested-by: Kiran Bhandare <kiranx.bhandare@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1eb5395add786613c7c5579d3947aa0b8f0ec241
Author: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Date:   Tue Oct 26 18:47:18 2021 +0200

    ice: fix vsi->txq_map sizing
    
    [ Upstream commit 792b2086584f25d84081a526beee80d103c2a913 ]
    
    The approach of having XDP queue per CPU regardless of user's setting
    exposed a hidden bug that could occur in case when Rx queue count differ
    from Tx queue count. Currently vsi->txq_map's size is equal to the
    doubled vsi->alloc_txq, which is not correct due to the fact that XDP
    rings were previously based on the Rx queue count. Below splat can be
    seen when ethtool -L is used and XDP rings are configured:
    
    [  682.875339] BUG: kernel NULL pointer dereference, address: 000000000000000f
    [  682.883403] #PF: supervisor read access in kernel mode
    [  682.889345] #PF: error_code(0x0000) - not-present page
    [  682.895289] PGD 0 P4D 0
    [  682.898218] Oops: 0000 [#1] PREEMPT SMP PTI
    [  682.903055] CPU: 42 PID: 2878 Comm: ethtool Tainted: G           OE     5.15.0-rc5+ #1
    [  682.912214] Hardware name: Intel Corp. GRANTLEY/GRANTLEY, BIOS GRRFCRB1.86B.0276.D07.1605190235 05/19/2016
    [  682.923380] RIP: 0010:devres_remove+0x44/0x130
    [  682.928527] Code: 49 89 f4 55 48 89 fd 4c 89 ff 53 48 83 ec 10 e8 92 b9 49 00 48 8b 9d a8 02 00 00 48 8d 8d a0 02 00 00 49 89 c2 48 39 cb 74 0f <4c> 3b 63 10 74 25 48 8b 5b 08 48 39 cb 75 f1 4c 89 ff 4c 89 d6 e8
    [  682.950237] RSP: 0018:ffffc90006a679f0 EFLAGS: 00010002
    [  682.956285] RAX: 0000000000000286 RBX: ffffffffffffffff RCX: ffff88908343a370
    [  682.964538] RDX: 0000000000000001 RSI: ffffffff81690d60 RDI: 0000000000000000
    [  682.972789] RBP: ffff88908343a0d0 R08: 0000000000000000 R09: 0000000000000000
    [  682.981040] R10: 0000000000000286 R11: 3fffffffffffffff R12: ffffffff81690d60
    [  682.989282] R13: ffffffff81690a00 R14: ffff8890819807a8 R15: ffff88908343a36c
    [  682.997535] FS:  00007f08c7bfa740(0000) GS:ffff88a03fd00000(0000) knlGS:0000000000000000
    [  683.006910] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  683.013557] CR2: 000000000000000f CR3: 0000001080a66003 CR4: 00000000003706e0
    [  683.021819] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  683.030075] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  683.038336] Call Trace:
    [  683.041167]  devm_kfree+0x33/0x50
    [  683.045004]  ice_vsi_free_arrays+0x5e/0xc0 [ice]
    [  683.050380]  ice_vsi_rebuild+0x4c8/0x750 [ice]
    [  683.055543]  ice_vsi_recfg_qs+0x9a/0x110 [ice]
    [  683.060697]  ice_set_channels+0x14f/0x290 [ice]
    [  683.065962]  ethnl_set_channels+0x333/0x3f0
    [  683.070807]  genl_family_rcv_msg_doit+0xea/0x150
    [  683.076152]  genl_rcv_msg+0xde/0x1d0
    [  683.080289]  ? channels_prepare_data+0x60/0x60
    [  683.085432]  ? genl_get_cmd+0xd0/0xd0
    [  683.089667]  netlink_rcv_skb+0x50/0xf0
    [  683.094006]  genl_rcv+0x24/0x40
    [  683.097638]  netlink_unicast+0x239/0x340
    [  683.102177]  netlink_sendmsg+0x22e/0x470
    [  683.106717]  sock_sendmsg+0x5e/0x60
    [  683.110756]  __sys_sendto+0xee/0x150
    [  683.114894]  ? handle_mm_fault+0xd0/0x2a0
    [  683.119535]  ? do_user_addr_fault+0x1f3/0x690
    [  683.134173]  __x64_sys_sendto+0x25/0x30
    [  683.148231]  do_syscall_64+0x3b/0xc0
    [  683.161992]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Fix this by taking into account the value that num_possible_cpus()
    yields in addition to vsi->alloc_txq instead of doubling the latter.
    
    Fixes: efc2214b6047 ("ice: Add support for XDP")
    Fixes: 22bf877e528f ("ice: introduce XDP_TX fallback path")
    Reviewed-by: Alexander Lobakin <alexandr.lobakin@intel.com>
    Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Tested-by: Kiran Bhandare <kiranx.bhandare@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26ed13d06422120dec22a01ae22c3d9fecd8cdef
Author: Nikolay Aleksandrov <nikolay@nvidia.com>
Date:   Mon Nov 22 17:15:13 2021 +0200

    net: nexthop: release IPv6 per-cpu dsts when replacing a nexthop group
    
    [ Upstream commit 1005f19b9357b81aa64e1decd08d6e332caaa284 ]
    
    When replacing a nexthop group, we must release the IPv6 per-cpu dsts of
    the removed nexthop entries after an RCU grace period because they
    contain references to the nexthop's net device and to the fib6 info.
    With specific series of events[1] we can reach net device refcount
    imbalance which is unrecoverable. IPv4 is not affected because dsts
    don't take a refcount on the route.
    
    [1]
     $ ip nexthop list
      id 200 via 2002:db8::2 dev bridge.10 scope link onlink
      id 201 via 2002:db8::3 dev bridge scope link onlink
      id 203 group 201/200
     $ ip -6 route
      2001:db8::10 nhid 203 metric 1024 pref medium
         nexthop via 2002:db8::3 dev bridge weight 1 onlink
         nexthop via 2002:db8::2 dev bridge.10 weight 1 onlink
    
    Create rt6_info through one of the multipath legs, e.g.:
     $ taskset -a -c 1  ./pkt_inj 24 bridge.10 2001:db8::10
     (pkt_inj is just a custom packet generator, nothing special)
    
    Then remove that leg from the group by replace (let's assume it is id
    200 in this case):
     $ ip nexthop replace id 203 group 201
    
    Now remove the IPv6 route:
     $ ip -6 route del 2001:db8::10/128
    
    The route won't be really deleted due to the stale rt6_info holding 1
    refcnt in nexthop id 200.
    At this point we have the following reference count dependency:
     (deleted) IPv6 route holds 1 reference over nhid 203
     nh 203 holds 1 ref over id 201
     nh 200 holds 1 ref over the net device and the route due to the stale
     rt6_info
    
    Now to create circular dependency between nh 200 and the IPv6 route, and
    also to get a reference over nh 200, restore nhid 200 in the group:
     $ ip nexthop replace id 203 group 201/200
    
    And now we have a permanent circular dependncy because nhid 203 holds a
    reference over nh 200 and 201, but the route holds a ref over nh 203 and
    is deleted.
    
    To trigger the bug just delete the group (nhid 203):
     $ ip nexthop del id 203
    
    It won't really be deleted due to the IPv6 route dependency, and now we
    have 2 unlinked and deleted objects that reference each other: the group
    and the IPv6 route. Since the group drops the reference it holds over its
    entries at free time (i.e. its own refcount needs to drop to 0) that will
    never happen and we get a permanent ref on them, since one of the entries
    holds a reference over the IPv6 route it will also never be released.
    
    At this point the dependencies are:
     (deleted, only unlinked) IPv6 route holds reference over group nh 203
     (deleted, only unlinked) group nh 203 holds reference over nh 201 and 200
     nh 200 holds 1 ref over the net device and the route due to the stale
     rt6_info
    
    This is the last point where it can be fixed by running traffic through
    nh 200, and specifically through the same CPU so the rt6_info (dst) will
    get released due to the IPv6 genid, that in turn will free the IPv6
    route, which in turn will free the ref count over the group nh 203.
    
    If nh 200 is deleted at this point, it will never be released due to the
    ref from the unlinked group 203, it will only be unlinked:
     $ ip nexthop del id 200
     $ ip nexthop
     $
    
    Now we can never release that stale rt6_info, we have IPv6 route with ref
    over group nh 203, group nh 203 with ref over nh 200 and 201, nh 200 with
    rt6_info (dst) with ref over the net device and the IPv6 route. All of
    these objects are only unlinked, and cannot be released, thus they can't
    release their ref counts.
    
     Message from syslogd@dev at Nov 19 14:04:10 ...
      kernel:[73501.828730] unregister_netdevice: waiting for bridge.10 to become free. Usage count = 3
     Message from syslogd@dev at Nov 19 14:04:20 ...
      kernel:[73512.068811] unregister_netdevice: waiting for bridge.10 to become free. Usage count = 3
    
    Fixes: 7bf4796dd099 ("nexthops: add support for replace")
    Signed-off-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c40584595f8175d5fd8acaac30479e16eeb8a82
Author: Nikolay Aleksandrov <nikolay@nvidia.com>
Date:   Mon Nov 22 17:15:12 2021 +0200

    net: ipv6: add fib6_nh_release_dsts stub
    
    [ Upstream commit 8837cbbf854246f5f4d565f21e6baa945d37aded ]
    
    We need a way to release a fib6_nh's per-cpu dsts when replacing
    nexthops otherwise we can end up with stale per-cpu dsts which hold net
    device references, so add a new IPv6 stub called fib6_nh_release_dsts.
    It must be used after an RCU grace period, so no new dsts can be created
    through a group's nexthop entry.
    Similar to fib6_nh_release it shouldn't be used if fib6_nh_init has failed
    so it doesn't need a dummy stub when IPv6 is not enabled.
    
    Fixes: 7bf4796dd099 ("nexthops: add support for replace")
    Signed-off-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc2f7e9d8d20c0c407054596509e3d4316e2c9f3
Author: Holger Assmann <h.assmann@pengutronix.de>
Date:   Sun Nov 21 19:57:04 2021 +0200

    net: stmmac: retain PTP clock time during SIOCSHWTSTAMP ioctls
    
    [ Upstream commit a6da2bbb0005e6b4909472962c9d0af29e75dd06 ]
    
    Currently, when user space emits SIOCSHWTSTAMP ioctl calls such as
    enabling/disabling timestamping or changing filter settings, the driver
    reads the current CLOCK_REALTIME value and programming this into the
    NIC's hardware clock. This might be necessary during system
    initialization, but at runtime, when the PTP clock has already been
    synchronized to a grandmaster, a reset of the timestamp settings might
    result in a clock jump. Furthermore, if the clock is also controlled by
    phc2sys in automatic mode (where the UTC offset is queried from ptp4l),
    that UTC-to-TAI offset (currently 37 seconds in 2021) would be
    temporarily reset to 0, and it would take a long time for phc2sys to
    readjust so that CLOCK_REALTIME and the PHC are apart by 37 seconds
    again.
    
    To address the issue, we introduce a new function called
    stmmac_init_tstamp_counter(), which gets called during ndo_open().
    It contains the code snippet moved from stmmac_hwtstamp_set() that
    manages the time synchronization. Besides, the sub second increment
    configuration is also moved here since the related values are hardware
    dependent and runtime invariant.
    
    Furthermore, the hardware clock must be kept running even when no time
    stamping mode is selected in order to retain the synchronized time base.
    That way, timestamping can be enabled again at any time only with the
    need to compensate the clock's natural drifting.
    
    As a side effect, this patch fixes the issue that ptp_clock_info::enable
    can be called before SIOCSHWTSTAMP and the driver (which looks at
    priv->systime_flags) was not prepared to handle that ordering.
    
    Fixes: 92ba6888510c ("stmmac: add the support for PTP hw clock driver")
    Reported-by: Michael Olbrich <m.olbrich@pengutronix.de>
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Signed-off-by: Holger Assmann <h.assmann@pengutronix.de>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79068e6b1cfba1a03e1016c2ccc520a27c351914
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Wed Sep 8 15:43:35 2021 +0800

    net: stmmac: fix system hang caused by eee_ctrl_timer during suspend/resume
    
    [ Upstream commit 276aae377206d60b9b7b7df4586cd9f2a813f5d0 ]
    
    commit 5f58591323bf ("net: stmmac: delete the eee_ctrl_timer after
    napi disabled"), this patch tries to fix system hang caused by eee_ctrl_timer,
    unfortunately, it only can resolve it for system reboot stress test. System
    hang also can be reproduced easily during system suspend/resume stess test
    when mount NFS on i.MX8MP EVK board.
    
    In stmmac driver, eee feature is combined to phylink framework. When do
    system suspend, phylink_stop() would queue delayed work, it invokes
    stmmac_mac_link_down(), where to deactivate eee_ctrl_timer synchronizly.
    In above commit, try to fix issue by deactivating eee_ctrl_timer obviously,
    but it is not enough. Looking into eee_ctrl_timer expire callback
    stmmac_eee_ctrl_timer(), it could enable hareware eee mode again. What is
    unexpected is that LPI interrupt (MAC_Interrupt_Enable.LPIEN bit) is always
    asserted. This interrupt has chance to be issued when LPI state entry/exit
    from the MAC, and at that time, clock could have been already disabled.
    The result is that system hang when driver try to touch register from
    interrupt handler.
    
    The reason why above commit can fix system hang issue in stmmac_release()
    is that, deactivate eee_ctrl_timer not just after napi disabled, further
    after irq freed.
    
    In conclusion, hardware would generate LPI interrupt when clock has been
    disabled during suspend or resume, since hardware is in eee mode and LPI
    interrupt enabled.
    
    Interrupts from MAC, MTL and DMA level are enabled and never been disabled
    when system suspend, so postpone clocks management from suspend stage to
    noirq suspend stage should be more safe.
    
    Fixes: 5f58591323bf ("net: stmmac: delete the eee_ctrl_timer after napi disabled")
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc301ad3120719b850d2adfa8bd0bdae08894c09
Author: Diana Wang <na.wang@corigine.com>
Date:   Fri Nov 19 14:38:03 2021 +0100

    nfp: checking parameter process for rx-usecs/tx-usecs is invalid
    
    [ Upstream commit 3bd6b2a838ba6a3b86d41b077f570b1b61174def ]
    
    Use nn->tlv_caps.me_freq_mhz instead of nn->me_freq_mhz to check whether
    rx-usecs/tx-usecs is valid.
    
    This is because nn->tlv_caps.me_freq_mhz represents the clock_freq (MHz) of
    the flow processing cores (FPC) on the NIC. While nn->me_freq_mhz is not
    be set.
    
    Fixes: ce991ab6662a ("nfp: read ME frequency from vNIC ctrl memory")
    Signed-off-by: Diana Wang <na.wang@corigine.com>
    Signed-off-by: Simon Horman <simon.horman@corigine.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b44cb67d387f08a99aee702c4cd54e587c6ba91
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 18 17:37:58 2021 -0800

    ipv6: fix typos in __ip6_finish_output()
    
    [ Upstream commit 19d36c5f294879949c9d6f57cb61d39cc4c48553 ]
    
    We deal with IPv6 packets, so we need to use IP6CB(skb)->flags and
    IP6SKB_REROUTED, instead of IPCB(skb)->flags and IPSKB_REROUTED
    
    Found by code inspection, please double check that fixing this bug
    does not surface other bugs.
    
    Fixes: 09ee9dba9611 ("ipv6: Reinject IPv6 packets if IPsec policy matches after SNAT")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tobias Brunner <tobias@strongswan.org>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: David Ahern <dsahern@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Tested-by: Tobias Brunner <tobias@strongswan.org>
    Acked-by: Tobias Brunner <tobias@strongswan.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d9e8dabd46faa2fdf5cc3c78b493a63de994340
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Fri Nov 19 15:39:01 2021 -0800

    firmware: smccc: Fix check for ARCH_SOC_ID not implemented
    
    [ Upstream commit e95d8eaee21cd0d117d34125d4cdc97489c1ab82 ]
    
    The ARCH_FEATURES function ID is a 32-bit SMC call, which returns
    a 32-bit result per the SMCCC spec.  Current code is doing a 64-bit
    comparison against -1 (SMCCC_RET_NOT_SUPPORTED) to detect that the
    feature is unimplemented.  That check doesn't work in a Hyper-V VM,
    where the upper 32-bits are zero as allowed by the spec.
    
    Cast the result as an 'int' so the comparison works. The change also
    makes the code consistent with other similar checks in this file.
    
    Fixes: 821b67fa4639 ("firmware: smccc: Add ARCH_SOC_ID support")
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbd1683e795cec80acc2e5107c3d29b9c3f49297
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Nov 19 15:27:54 2021 +0100

    mptcp: fix delack timer
    
    [ Upstream commit ee50e67ba0e17b1a1a8d76691d02eadf9e0f392c ]
    
    To compute the rtx timeout schedule_3rdack_retransmission() does multiple
    things in the wrong way: srtt_us is measured in usec/8 and the timeout
    itself is an absolute value.
    
    Fixes: ec3edaa7ca6ce02f ("mptcp: Add handling of outgoing MP_JOIN requests")
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Reviewed-by: Mat Martineau <mathew.j.martineau>@linux.intel.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 061542815af1a217486d715aaae35726f8c8af5b
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Oct 27 10:32:54 2021 +0800

    ALSA: intel-dsp-config: add quirk for JSL devices based on ES8336 codec
    
    [ Upstream commit fa9730b4f28b7bd183d28a0bf636ab7108de35d7 ]
    
    These devices are based on an I2C/I2S device, we need to force the use
    of the SOF driver otherwise the legacy HDaudio driver will be loaded -
    only HDMI will be supported.
    
    We previously added support for other Intel platforms but missed
    JasperLake.
    
    BugLink: https://github.com/thesofproject/linux/issues/3210
    Fixes: 9d36ceab9415 ('ALSA: intel-dsp-config: add quirk for APL/GLK/TGL devices based on ES8336 codec')
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20211027023254.24955-1-yung-chuan.liao@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5af2def7e05cbf739701f2c240b3267a03d76c0
Author: Nitesh B Venkatesh <nitesh.b.venkatesh@intel.com>
Date:   Fri Jun 4 09:53:31 2021 -0700

    iavf: Prevent changing static ITR values if adaptive moderation is on
    
    [ Upstream commit e792779e6b639c182df91b46ac1e5803460b0b15 ]
    
    Resolve being able to change static values on VF when adaptive interrupt
    moderation is enabled.
    
    This problem is fixed by checking the interrupt settings is not
    a combination of change of static value while adaptive interrupt
    moderation is turned on.
    
    Without this fix, the user would be able to change static values
    on VF with adaptive moderation enabled.
    
    Fixes: 65e87c0398f5 ("i40evf: support queue-specific settings for interrupt moderation")
    Signed-off-by: Nitesh B Venkatesh <nitesh.b.venkatesh@intel.com>
    Tested-by: George Kuruvinakunnel <george.kuruvinakunnel@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dca8eff4627315df98feec09fff9dfe3356325e
Author: Volodymyr Mytnyk <vmytnyk@marvell.com>
Date:   Thu Nov 18 21:51:40 2021 +0200

    net: marvell: prestera: fix double free issue on err path
    
    [ Upstream commit e8d032507cb7912baf1d3e0af54516f823befefd ]
    
    fix error path handling in prestera_bridge_port_join() that
    cases prestera driver to crash (see below).
    
     Trace:
       Internal error: Oops: 96000044 [#1] SMP
       Modules linked in: prestera_pci prestera uio_pdrv_genirq
       CPU: 1 PID: 881 Comm: ip Not tainted 5.15.0 #1
       pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
       pc : prestera_bridge_destroy+0x2c/0xb0 [prestera]
       lr : prestera_bridge_port_join+0x2cc/0x350 [prestera]
       sp : ffff800011a1b0f0
       ...
       x2 : ffff000109ca6c80 x1 : dead000000000100 x0 : dead000000000122
        Call trace:
       prestera_bridge_destroy+0x2c/0xb0 [prestera]
       prestera_bridge_port_join+0x2cc/0x350 [prestera]
       prestera_netdev_port_event.constprop.0+0x3c4/0x450 [prestera]
       prestera_netdev_event_handler+0xf4/0x110 [prestera]
       raw_notifier_call_chain+0x54/0x80
       call_netdevice_notifiers_info+0x54/0xa0
       __netdev_upper_dev_link+0x19c/0x380
    
    Fixes: e1189d9a5fbe ("net: marvell: prestera: Add Switchdev driver implementation")
    Signed-off-by: Volodymyr Mytnyk <vmytnyk@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b33c5c828144bb6794be72689ed8abd9f69a2e35
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Nov 18 14:14:16 2021 +0300

    drm/vc4: fix error code in vc4_create_object()
    
    [ Upstream commit 96c5f82ef0a145d3e56e5b26f2bf6dcd2ffeae1c ]
    
    The ->gem_create_object() functions are supposed to return NULL if there
    is an error.  None of the callers expect error pointers so returing one
    will lead to an Oops.  See drm_gem_vram_create(), for example.
    
    Fixes: c826a6e10644 ("drm/vc4: Add a BO cache.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211118111416.GC1147@kili
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bf9c5a5039c8f4b037236aed505e6a25c1d5f7b
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Wed Nov 17 16:19:09 2021 +0530

    scsi: mpt3sas: Fix kernel panic during drive powercycle test
    
    [ Upstream commit 0ee4ba13e09c9d9c1cb6abb59da8295d9952328b ]
    
    While looping over shost's sdev list it is possible that one
    of the drives is getting removed and its sas_target object is
    freed but its sdev object remains intact.
    
    Consequently, a kernel panic can occur while the driver is trying to access
    the sas_address field of sas_target object without also checking the
    sas_target object for NULL.
    
    Link: https://lore.kernel.org/r/20211117104909.2069-1-sreekanth.reddy@broadcom.com
    Fixes: f92363d12359 ("[SCSI] mpt3sas: add new driver supporting 12GB SAS")
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29ecb4c0f0d70a5472f6d3b41968caa8063469cd
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Nov 18 14:13:14 2021 +0300

    drm/nouveau/acr: fix a couple NULL vs IS_ERR() checks
    
    [ Upstream commit b371fd131fcec59f6165c80778bdc2cd1abd616b ]
    
    The nvkm_acr_lsfw_add() function never returns NULL.  It returns error
    pointers on error.
    
    Fixes: 22dcda45a3d1 ("drm/nouveau/acr: implement new subdev to replace "secure boot"")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211118111314.GB1147@kili
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0effb7f51b65840bb129f52ddc765105c48c87ba
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 18 15:25:08 2021 +0100

    ARM: socfpga: Fix crash with CONFIG_FORTIRY_SOURCE
    
    [ Upstream commit 187bea472600dcc8d2eb714335053264dd437172 ]
    
    When CONFIG_FORTIFY_SOURCE is set, memcpy() checks the potential
    buffer overflow and panics.  The code in sofcpga bootstrapping
    contains the memcpy() calls are mistakenly translated as the shorter
    size, hence it triggers a panic as if it were overflowing.
    
    This patch changes the secondary_trampoline and *_end definitions
    to arrays for avoiding the false-positive crash above.
    
    Fixes: 9c4566a117a6 ("ARM: socfpga: Enable SMP for socfpga")
    Suggested-by: Kees Cook <keescook@chromium.org>
    Buglink: https://bugzilla.suse.com/show_bug.cgi?id=1192473
    Link: https://lore.kernel.org/r/20211117193244.31162-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86c5adc7808384a504618d912fd4e956cac62cd7
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Nov 16 09:55:01 2021 -0500

    NFSv42: Don't fail clone() unless the OP_CLONE operation failed
    
    [ Upstream commit d3c45824ad65aebf765fcf51366d317a29538820 ]
    
    The failure to retrieve post-op attributes has no bearing on whether or
    not the clone operation itself was successful. We must therefore ignore
    the return value of decode_getfattr() when looking at the success or
    failure of nfs4_xdr_dec_clone().
    
    Fixes: 36022770de6c ("nfs42: add CLONE xdr functions")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9ba7864d3a2bfaabd9dca31b0ea8e914d3333d5
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Nov 16 14:42:27 2021 +0800

    firmware: arm_scmi: pm: Propagate return value to caller
    
    [ Upstream commit 1446fc6c678e8d8b31606a4b877abe205f344b38 ]
    
    of_genpd_add_provider_onecell may return error, so let's propagate
    its return value to caller
    
    Link: https://lore.kernel.org/r/20211116064227.20571-1-peng.fan@oss.nxp.com
    Fixes: 898216c97ed2 ("firmware: arm_scmi: add device power domain support using genpd")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8730a679c3cbfb65f1e65562473dec612a826407
Author: Alexander Aring <aahringo@redhat.com>
Date:   Thu Nov 11 22:09:16 2021 -0500

    net: ieee802154: handle iftypes as u32
    
    [ Upstream commit 451dc48c806a7ce9fbec5e7a24ccf4b2c936e834 ]
    
    This patch fixes an issue that an u32 netlink value is handled as a
    signed enum value which doesn't fit into the range of u32 netlink type.
    If it's handled as -1 value some BIT() evaluation ends in a
    shift-out-of-bounds issue. To solve the issue we set the to u32 max which
    is s32 "-1" value to keep backwards compatibility and let the followed enum
    values start counting at 0. This brings the compiler to never handle the
    enum as signed and a check if the value is above NL802154_IFTYPE_MAX should
    filter -1 out.
    
    Fixes: f3ea5e44231a ("ieee802154: add new interface command")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20211112030916.685793-1-aahringo@redhat.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2925aadd1f324e224e3a5cd4328121286981cc38
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Tue Nov 16 11:46:22 2021 +0000

    ASoC: codecs: wcd934x: return error code correctly from hw_params
    
    [ Upstream commit 006ea27c4e7037369085755c7b5389effa508c04 ]
    
    Error returned from wcd934x_slim_set_hw_params() are not passed to upper layer,
    this could be misleading to the user which can start sending stream leading
    to unnecessary errors.
    
    Fix this by properly returning the errors.
    
    Fixes: a61f3b4f476e ("ASoC: wcd934x: add support to wcd9340/wcd9341 codec")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20211116114623.11891-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a25def06de8061ade6006e4295fa83c14cee8e8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 16 08:18:12 2021 +0100

    ASoC: topology: Add missing rwsem around snd_ctl_remove() calls
    
    [ Upstream commit 7e567b5ae06315ef2d70666b149962e2bb4b97af ]
    
    snd_ctl_remove() has to be called with card->controls_rwsem held (when
    called after the card instantiation).  This patch add the missing
    rwsem calls around it.
    
    Fixes: 8a9782346dcc ("ASoC: topology: Add topology core")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20211116071812.18109-1-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a4f900e0415bfc0d97755882d9bf2ad94421cf8
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Tue Nov 16 11:47:19 2021 +0000

    ASoC: qdsp6: q6asm: fix q6asm_dai_prepare error handling
    
    [ Upstream commit 721a94b4352dc8e47bff90b549a0118c39776756 ]
    
    Error handling in q6asm_dai_prepare() seems to be completely broken,
    Fix this by handling it properly.
    
    Fixes: 2a9e92d371db ("ASoC: qdsp6: q6asm: Add q6asm dai driver")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20211116114721.12517-4-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9196a6858150a309f52c231515a6769dcd43a949
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Tue Nov 16 11:47:18 2021 +0000

    ASoC: qdsp6: q6routing: Conditionally reset FrontEnd Mixer
    
    [ Upstream commit 861afeac7990587588d057b2c0b3222331c3da29 ]
    
    Stream IDs are reused across multiple BackEnd mixers, do not reset the
    stream mixers if they are not already set for that particular FrontEnd.
    
    Ex:
    amixer cset iface=MIXER,name='SLIMBUS_0_RX Audio Mixer MultiMedia1' 1
    
    would set the MultiMedia1 steam for SLIMBUS_0_RX, however doing below
    command will reset previously setup MultiMedia1 stream, because both of them
    are using MultiMedia1 PCM stream.
    
    amixer cset iface=MIXER,name='SLIMBUS_2_RX Audio Mixer MultiMedia1' 0
    
    reset the FrontEnd Mixers conditionally to fix this issue.
    
    This is more noticeable in desktop setup, where in alsactl tries to restore
    the alsa state and overwriting the previous mixer settings.
    
    Fixes: e3a33673e845 ("ASoC: qdsp6: q6routing: Add q6routing driver")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20211116114721.12517-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2be17eca48aeb86584336308a6823caf5b982b29
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Oct 29 14:09:26 2021 -0700

    ARM: dts: bcm2711: Fix PCIe interrupts
    
    [ Upstream commit 98481f3d72fb88cb5b973153434061015f094925 ]
    
    The PCIe host bridge has two interrupt lines, one that goes towards it
    PCIE_INTR2 second level interrupt controller and one for its MSI second
    level interrupt controller. The first interrupt line is not currently
    managed by the driver, which is why it was not a functional problem.
    
    The interrupt-map property was also only listing the PCI_INTA interrupts
    when there are also the INTB, C and D.
    
    Reported-by: Jim Quinlan <jim2101024@gmail.com>
    Fixes: d5c8dc0d4c88 ("ARM: dts: bcm2711: Enable PCIe controller")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9db1d4a3c2700e1cc84c3d61199411d75c2a3ec6
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Oct 28 09:46:53 2021 -0700

    ARM: dts: BCM5301X: Add interrupt properties to GPIO node
    
    [ Upstream commit 40f7342f0587639e5ad625adaa15efdd3cffb18f ]
    
    The GPIO controller is also an interrupt controller provider and is
    currently missing the appropriate 'interrupt-controller' and
    '#interrupt-cells' properties to denote that.
    
    Fixes: fb026d3de33b ("ARM: BCM5301X: Add Broadcom's bus-axi to the DTS file")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2cd6fdcbe0a5cb44e4610a08cc58261d494a885
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Oct 27 12:37:29 2021 -0700

    ARM: dts: BCM5301X: Fix I2C controller interrupt
    
    [ Upstream commit 754c4050a00e802e122690112fc2c3a6abafa7e2 ]
    
    The I2C interrupt controller line is off by 32 because the datasheet
    describes interrupt inputs into the GIC which are for Shared Peripheral
    Interrupts and are starting at offset 32. The ARM GIC binding expects
    the SPI interrupts to be numbered from 0 relative to the SPI base.
    
    Fixes: bb097e3e0045 ("ARM: dts: BCM5301X: Add I2C support to the DT")
    Tested-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7ef25e8c27183bb24975a0f35fa2c3a0dd5fe81
Author: Will Mortensen <willmo@gmail.com>
Date:   Sat Nov 6 18:28:21 2021 -0700

    netfilter: flowtable: fix IPv6 tunnel addr match
    
    [ Upstream commit 39f6eed4cb209643f3f8633291854ed7375d7264 ]
    
    Previously the IPv6 addresses in the key were clobbered and the mask was
    left unset.
    
    I haven't tested this; I noticed it while skimming the code to
    understand an unrelated issue.
    
    Fixes: cfab6dbd0ecf ("netfilter: flowtable: add tunnel match offload support")
    Cc: wenxu <wenxu@ucloud.cn>
    Signed-off-by: Will Mortensen <willmo@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d689176e0e18adf43e57d85b04e41769b4fee3f4
Author: yangxingwu <xingwu.yang@gmail.com>
Date:   Thu Nov 4 03:10:29 2021 +0100

    netfilter: ipvs: Fix reuse connection if RS weight is 0
    
    [ Upstream commit c95c07836fa4c1767ed11d8eca0769c652760e32 ]
    
    We are changing expire_nodest_conn to work even for reused connections when
    conn_reuse_mode=0, just as what was done with commit dc7b3eb900aa ("ipvs:
    Fix reuse connection if real server is dead").
    
    For controlled and persistent connections, the new connection will get the
    needed real server depending on the rules in ip_vs_check_template().
    
    Fixes: d752c3645717 ("ipvs: allow rescheduling of new connections when port reuse is detected")
    Co-developed-by: Chuanqi Liu <legend050709@qq.com>
    Signed-off-by: Chuanqi Liu <legend050709@qq.com>
    Signed-off-by: yangxingwu <xingwu.yang@gmail.com>
    Acked-by: Simon Horman <horms@verge.net.au>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 994065f6efdcc6edcb5270b2aa0d72746f88705e
Author: Florent Fourcot <florent.fourcot@wifirst.fr>
Date:   Wed Nov 3 23:21:55 2021 +0100

    netfilter: ctnetlink: do not erase error code with EINVAL
    
    [ Upstream commit 77522ff02f333434612bd72df9b376f8d3836e4d ]
    
    And be consistent in error management for both orig/reply filtering
    
    Fixes: cb8aa9a3affb ("netfilter: ctnetlink: add kernel side filtering for dump")
    Signed-off-by: Florent Fourcot <florent.fourcot@wifirst.fr>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3d829e5f37590b768e2a0bef2f17ee1833ef2e9
Author: Florent Fourcot <florent.fourcot@wifirst.fr>
Date:   Wed Nov 3 23:21:54 2021 +0100

    netfilter: ctnetlink: fix filtering with CTA_TUPLE_REPLY
    
    [ Upstream commit ad81d4daf6a3f4769a346e635d5e1e967ca455d9 ]
    
    filter->orig_flags was used for a reply context.
    
    Fixes: cb8aa9a3affb ("netfilter: ctnetlink: add kernel side filtering for dump")
    Signed-off-by: Florent Fourcot <florent.fourcot@wifirst.fr>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8a917058faf4abaec9fb614bb6d5f8fe3529ec6
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Nov 19 16:43:58 2021 -0800

    proc/vmcore: fix clearing user buffer by properly using clear_user()
    
    commit c1e63117711977cc4295b2ce73de29dd17066c82 upstream.
    
    To clear a user buffer we cannot simply use memset, we have to use
    clear_user().  With a virtio-mem device that registers a vmcore_cb and
    has some logically unplugged memory inside an added Linux memory block,
    I can easily trigger a BUG by copying the vmcore via "cp":
    
      systemd[1]: Starting Kdump Vmcore Save Service...
      kdump[420]: Kdump is using the default log level(3).
      kdump[453]: saving to /sysroot/var/crash/127.0.0.1-2021-11-11-14:59:22/
      kdump[458]: saving vmcore-dmesg.txt to /sysroot/var/crash/127.0.0.1-2021-11-11-14:59:22/
      kdump[465]: saving vmcore-dmesg.txt complete
      kdump[467]: saving vmcore
      BUG: unable to handle page fault for address: 00007f2374e01000
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0003) - permissions violation
      PGD 7a523067 P4D 7a523067 PUD 7a528067 PMD 7a525067 PTE 800000007048f867
      Oops: 0003 [#1] PREEMPT SMP NOPTI
      CPU: 0 PID: 468 Comm: cp Not tainted 5.15.0+ #6
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.14.0-27-g64f37cc530f1-prebuilt.qemu.org 04/01/2014
      RIP: 0010:read_from_oldmem.part.0.cold+0x1d/0x86
      Code: ff ff ff e8 05 ff fe ff e9 b9 e9 7f ff 48 89 de 48 c7 c7 38 3b 60 82 e8 f1 fe fe ff 83 fd 08 72 3c 49 8d 7d 08 4c 89 e9 89 e8 <49> c7 45 00 00 00 00 00 49 c7 44 05 f8 00 00 00 00 48 83 e7 f81
      RSP: 0018:ffffc9000073be08 EFLAGS: 00010212
      RAX: 0000000000001000 RBX: 00000000002fd000 RCX: 00007f2374e01000
      RDX: 0000000000000001 RSI: 00000000ffffdfff RDI: 00007f2374e01008
      RBP: 0000000000001000 R08: 0000000000000000 R09: ffffc9000073bc50
      R10: ffffc9000073bc48 R11: ffffffff829461a8 R12: 000000000000f000
      R13: 00007f2374e01000 R14: 0000000000000000 R15: ffff88807bd421e8
      FS:  00007f2374e12140(0000) GS:ffff88807f000000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f2374e01000 CR3: 000000007a4aa000 CR4: 0000000000350eb0
      Call Trace:
       read_vmcore+0x236/0x2c0
       proc_reg_read+0x55/0xa0
       vfs_read+0x95/0x190
       ksys_read+0x4f/0xc0
       do_syscall_64+0x3b/0x90
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Some x86-64 CPUs have a CPU feature called "Supervisor Mode Access
    Prevention (SMAP)", which is used to detect wrong access from the kernel
    to user buffers like this: SMAP triggers a permissions violation on
    wrong access.  In the x86-64 variant of clear_user(), SMAP is properly
    handled via clac()+stac().
    
    To fix, properly use clear_user() when we're dealing with a user buffer.
    
    Link: https://lkml.kernel.org/r/20211112092750.6921-1-david@redhat.com
    Fixes: 997c136f518c ("fs/proc/vmcore.c: add hook to read_from_oldmem() to check for non-ram pages")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Acked-by: Baoquan He <bhe@redhat.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Vivek Goyal <vgoyal@redhat.com>
    Cc: Philipp Rudo <prudo@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f520a0d78fc0f5e847dd08cf8beccf16734191b
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Oct 5 20:09:50 2021 +0200

    PCI: aardvark: Fix link training
    
    commit f76b36d40beee0a13aa8f6aa011df0d7cbbb8a7f upstream.
    
    Fix multiple link training issues in aardvark driver. The main reason of
    these issues was misunderstanding of what certain registers do, since their
    names and comments were misleading: before commit 96be36dbffac ("PCI:
    aardvark: Replace custom macros by standard linux/pci_regs.h macros"), the
    pci-aardvark.c driver used custom macros for accessing standard PCIe Root
    Bridge registers, and misleading comments did not help to understand what
    the code was really doing.
    
    After doing more tests and experiments I've come to the conclusion that the
    SPEED_GEN register in aardvark sets the PCIe revision / generation
    compliance and forces maximal link speed. Both GEN3 and GEN2 values set the
    read-only PCI_EXP_FLAGS_VERS bits (PCIe capabilities version of Root
    Bridge) to value 2, while GEN1 value sets PCI_EXP_FLAGS_VERS to 1, which
    matches with PCI Express specifications revisions 3, 2 and 1 respectively.
    Changing SPEED_GEN also sets the read-only bits PCI_EXP_LNKCAP_SLS and
    PCI_EXP_LNKCAP2_SLS to corresponding speed.
    
    (Note that PCI Express rev 1 specification does not define PCI_EXP_LNKCAP2
     and PCI_EXP_LNKCTL2 registers and when SPEED_GEN is set to GEN1 (which
     also sets PCI_EXP_FLAGS_VERS set to 1), lspci cannot access
     PCI_EXP_LNKCAP2 and PCI_EXP_LNKCTL2 registers.)
    
    Changing PCIe link speed can be done via PCI_EXP_LNKCTL2_TLS bits of
    PCI_EXP_LNKCTL2 register. Armada 3700 Functional Specifications says that
    the default value of PCI_EXP_LNKCTL2_TLS is based on SPEED_GEN value, but
    tests showed that the default value is always 8.0 GT/s, independently of
    speed set by SPEED_GEN. So after setting SPEED_GEN, we must also set value
    in PCI_EXP_LNKCTL2 register via PCI_EXP_LNKCTL2_TLS bits.
    
    Triggering PCI_EXP_LNKCTL_RL bit immediately after setting LINK_TRAINING_EN
    bit actually doesn't do anything. Tests have shown that a delay is needed
    after enabling LINK_TRAINING_EN bit. As triggering PCI_EXP_LNKCTL_RL
    currently does nothing, remove it.
    
    Commit 43fc679ced18 ("PCI: aardvark: Improve link training") introduced
    code which sets SPEED_GEN register based on negotiated link speed from
    PCI_EXP_LNKSTA_CLS bits of PCI_EXP_LNKSTA register. This code was added to
    fix detection of Compex WLE900VX (Atheros QCA9880) WiFi GEN1 PCIe cards, as
    otherwise these cards were "invisible" on PCIe bus (probably because they
    crashed). But apparently more people reported the same issues with these
    cards also with other PCIe controllers [1] and I was able to reproduce this
    issue also with other "noname" WiFi cards based on Atheros QCA9890 chip
    (with the same PCI vendor/device ids as Atheros QCA9880). So this is not an
    issue in aardvark but rather an issue in Atheros QCA98xx chips. Also, this
    issue only exists if the kernel is compiled with PCIe ASPM support, and a
    generic workaround for this is to change PCIe Bridge to 2.5 GT/s link speed
    via PCI_EXP_LNKCTL2_TLS_2_5GT bits in PCI_EXP_LNKCTL2 register [2], before
    triggering PCI_EXP_LNKCTL_RL bit. This workaround also works when SPEED_GEN
    is set to value GEN2 (5 GT/s). So remove this hack completely in the
    aardvark driver and always set SPEED_GEN to value from 'max-link-speed' DT
    property. Fix for Atheros QCA98xx chips is handled separately by patch [2].
    
    These two things (code for triggering PCI_EXP_LNKCTL_RL bit and changing
    SPEED_GEN value) also explain why commit 6964494582f5 ("PCI: aardvark:
    Train link immediately after enabling training") somehow fixed detection of
    those problematic Compex cards with Atheros chips: if triggering link
    retraining (via PCI_EXP_LNKCTL_RL bit) was done immediately after enabling
    link training (via LINK_TRAINING_EN), it did nothing. If there was a
    specific delay, aardvark HW already initialized PCIe link and therefore
    triggering link retraining caused the above issue. Compex cards triggered
    link down event and disappeared from the PCIe bus.
    
    Commit f4c7d053d7f7 ("PCI: aardvark: Wait for endpoint to be ready before
    training link") added 100ms sleep before calling 'Start link training'
    command and explained that it is a requirement of PCI Express
    specification. But the code after this 100ms sleep was not doing 'Start
    link training', rather it triggered PCI_EXP_LNKCTL_RL bit via PCIe Root
    Bridge to put link into Recovery state.
    
    The required delay after fundamental reset is already done in function
    advk_pcie_wait_for_link() which also checks whether PCIe link is up.
    So after removing the code which triggers PCI_EXP_LNKCTL_RL bit on PCIe
    Root Bridge, there is no need to wait 100ms again. Remove the extra
    msleep() call and update comment about the delay required by the PCI
    Express specification.
    
    According to Marvell Armada 3700 Functional Specifications, Link training
    should be enabled via aardvark register LINK_TRAINING_EN after selecting
    PCIe generation and x1 lane. There is no need to disable it prior resetting
    card via PERST# signal. This disabling code was introduced in commit
    5169a9851daa ("PCI: aardvark: Issue PERST via GPIO") as a workaround for
    some Atheros cards. It turns out that this also is Atheros specific issue
    and affects any PCIe controller, not only aardvark. Moreover this Atheros
    issue was triggered by juggling with PCI_EXP_LNKCTL_RL, LINK_TRAINING_EN
    and SPEED_GEN bits interleaved with sleeps. Now, after removing triggering
    PCI_EXP_LNKCTL_RL, there is no need to explicitly disable LINK_TRAINING_EN
    bit. So remove this code too. The problematic Compex cards described in
    previous git commits are correctly detected in advk_pcie_train_link()
    function even after applying all these changes.
    
    Note that with this patch, and also prior this patch, some NVMe disks which
    support PCIe GEN3 with 8 GT/s speed are negotiated only at the lowest link
    speed 2.5 GT/s, independently of SPEED_GEN value. After manually triggering
    PCI_EXP_LNKCTL_RL bit (e.g. from userspace via setpci), these NVMe disks
    change link speed to 5 GT/s when SPEED_GEN was configured to GEN2. This
    issue first needs to be properly investigated. I will send a fix in the
    future.
    
    On the other hand, some other GEN2 PCIe cards with 5 GT/s speed are
    autonomously by HW autonegotiated at full 5 GT/s speed without need of any
    software interaction.
    
    Armada 3700 Functional Specifications describes the following steps for
    link training: set SPEED_GEN to GEN2, enable LINK_TRAINING_EN, poll until
    link training is complete, trigger PCI_EXP_LNKCTL_RL, poll until signal
    rate is 5 GT/s, poll until link training is complete, enable ASPM L0s.
    
    The requirement for triggering PCI_EXP_LNKCTL_RL can be explained by the
    need to achieve 5 GT/s speed (as changing link speed is done by throw to
    recovery state entered by PCI_EXP_LNKCTL_RL) or maybe as a part of enabling
    ASPM L0s (but in this case ASPM L0s should have been enabled prior
    PCI_EXP_LNKCTL_RL).
    
    It is unknown why the original pci-aardvark.c driver was triggering
    PCI_EXP_LNKCTL_RL bit before waiting for the link to be up. This does not
    align with neither PCIe base specifications nor with Armada 3700 Functional
    Specification. (Note that in older versions of aardvark, this bit was
    called incorrectly PCIE_CORE_LINK_TRAINING, so this may be the reason.)
    
    It is also unknown why Armada 3700 Functional Specification says that it is
    needed to trigger PCI_EXP_LNKCTL_RL for GEN2 mode, as according to PCIe
    base specification 5 GT/s speed negotiation is supposed to be entirely
    autonomous, even if initial speed is 2.5 GT/s.
    
    [1] - https://lore.kernel.org/linux-pci/87h7l8axqp.fsf@toke.dk/
    [2] - https://lore.kernel.org/linux-pci/20210326124326.21163-1-pali@kernel.org/
    
    Link: https://lore.kernel.org/r/20211005180952.6812-12-kabel@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aec0751f61f5097565820a0f0a546ae1a07f133e
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Oct 5 20:09:49 2021 +0200

    PCI: aardvark: Simplify initialization of rootcap on virtual bridge
    
    commit 454c53271fc11f3aa5e44e41fd99ca181bd32c62 upstream.
    
    PCIe config space can be initialized also before pci_bridge_emul_init()
    call, so move rootcap initialization after PCI config space initialization.
    
    This simplifies the function a little since it removes one if (ret < 0)
    check.
    
    Link: https://lore.kernel.org/r/20211005180952.6812-11-kabel@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df5748098878c5ca34798b39dbca09c6161eeb63
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Oct 5 20:09:48 2021 +0200

    PCI: aardvark: Implement re-issuing config requests on CRS response
    
    commit 223dec14a05337a4155f1deed46d2becce4d00fd upstream.
    
    Commit 43f5c77bcbd2 ("PCI: aardvark: Fix reporting CRS value") fixed
    handling of CRS response and when CRSSVE flag was not enabled it marked CRS
    response as failed transaction (due to simplicity).
    
    But pci-aardvark.c driver is already waiting up to the PIO_RETRY_CNT count
    for PIO config response and so we can with a small change implement
    re-issuing of config requests as described in PCIe base specification.
    
    This change implements re-issuing of config requests when response is CRS.
    Set upper bound of wait cycles to around PIO_RETRY_CNT, afterwards the
    transaction is marked as failed and an all-ones value is returned as
    before.
    
    We do this by returning appropriate error codes from function
    advk_pcie_check_pio_status(). On CRS we return -EAGAIN and caller then
    reissues transaction.
    
    Link: https://lore.kernel.org/r/20211005180952.6812-10-kabel@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7f2e2c758ea55df94356d5f0341874ab9179110
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Dec 2 19:46:59 2020 +0100

    PCI: aardvark: Update comment about disabling link training
    
    commit 1d1cd163d0de22a4041a6f1aeabcf78f80076539 upstream.
    
    According to PCI Express Base Specifications (rev 4.0, 6.6.1
    "Conventional reset"), after fundamental reset a 100ms delay is needed
    prior to enabling link training.
    
    Update comment in code to reflect this requirement.
    
    Link: https://lore.kernel.org/r/20201202184659.3795-1-pali@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b7bc1c4b2c835cd13a6173f448156b669f1c163
Author: Marek Behún <kabel@kernel.org>
Date:   Tue Oct 5 20:09:47 2021 +0200

    PCI: aardvark: Deduplicate code in advk_pcie_rd_conf()
    
    commit 67cb2a4c93499c2c22704998fd1fd2bc35194d8e upstream.
    
    Avoid code repetition in advk_pcie_rd_conf() by handling errors with
    goto jump, as is customary in kernel.
    
    Link: https://lore.kernel.org/r/20211005180952.6812-9-kabel@kernel.org
    Fixes: 43f5c77bcbd2 ("PCI: aardvark: Fix reporting CRS value")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfe906da9a1abebdebe8b15bb3e66a2578f6c4c7
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Thu Nov 18 10:39:53 2021 +0100

    powerpc/32: Fix hardlockup on vmap stack overflow
    
    commit 5bb60ea611db1e04814426ed4bd1c95d1487678e upstream.
    
    Since the commit c118c7303ad5 ("powerpc/32: Fix vmap stack - Do not
    activate MMU before reading task struct") a vmap stack overflow
    results in a hard lockup. This is because emergency_ctx is still
    addressed with its virtual address allthough data MMU is not active
    anymore at that time.
    
    Fix it by using a physical address instead.
    
    Fixes: c118c7303ad5 ("powerpc/32: Fix vmap stack - Do not activate MMU before reading task struct")
    Cc: stable@vger.kernel.org # v5.10+
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/ce30364fb7ccda489272af4a1612b6aa147e1d23.1637227521.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf00edd9e6c9d6f19bb3f7501de97e94e9a74b32
Author: Dylan Hung <dylan_hung@aspeedtech.com>
Date:   Thu Nov 25 10:44:32 2021 +0800

    mdio: aspeed: Fix "Link is Down" issue
    
    commit 9dbe33cf371bd70330858370bdbc35c7668f00c3 upstream.
    
    The issue happened randomly in runtime.  The message "Link is Down" is
    popped but soon it recovered to "Link is Up".
    
    The "Link is Down" results from the incorrect read data for reading the
    PHY register via MDIO bus.  The correct sequence for reading the data
    shall be:
    1. fire the command
    2. wait for command done (this step was missing)
    3. wait for data idle
    4. read data from data register
    
    Cc: stable@vger.kernel.org
    Fixes: f160e99462c6 ("net: phy: Add mdio-aspeed")
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Dylan Hung <dylan_hung@aspeedtech.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Link: https://lore.kernel.org/r/20211125024432.15809-1-dylan_hung@aspeedtech.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14c3ce30ddbd70a0b025202249dd8d83c6072592
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Nov 15 10:23:45 2021 +0200

    mmc: sdhci: Fix ADMA for PAGE_SIZE >= 64KiB
    
    commit 3d7c194b7c9ad414264935ad4f943a6ce285ebb1 upstream.
    
    The block layer forces a minimum segment size of PAGE_SIZE, so a segment
    can be too big for the ADMA table, if PAGE_SIZE >= 64KiB. Fix by writing
    multiple descriptors, noting that the ADMA table is sized for 4KiB chunks
    anyway, so it will be big enough.
    
    Reported-and-tested-by: Bough Chen <haibo.chen@nxp.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211115082345.802238-1-adrian.hunter@intel.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63195705b334fc8bf4b17f0b8ef655c81c9e21ec
Author: Tim Harvey <tharvey@gateworks.com>
Date:   Wed Nov 3 09:54:15 2021 -0700

    mmc: sdhci-esdhc-imx: disable CMDQ support
    
    commit adab993c25191b839b415781bdc7173a77315240 upstream.
    
    On IMX SoC's which support CMDQ the following can occur during high a
    high cpu load:
    
    mmc2: cqhci: ============ CQHCI REGISTER DUMP ===========
    mmc2: cqhci: Caps:      0x0000310a | Version:  0x00000510
    mmc2: cqhci: Config:    0x00001001 | Control:  0x00000000
    mmc2: cqhci: Int stat:  0x00000000 | Int enab: 0x00000006
    mmc2: cqhci: Int sig:   0x00000006 | Int Coal: 0x00000000
    mmc2: cqhci: TDL base:  0x8003f000 | TDL up32: 0x00000000
    mmc2: cqhci: Doorbell:  0xbf01dfff | TCN:      0x00000000
    mmc2: cqhci: Dev queue: 0x00000000 | Dev Pend: 0x08000000
    mmc2: cqhci: Task clr:  0x00000000 | SSC1:     0x00011000
    mmc2: cqhci: SSC2:      0x00000001 | DCMD rsp: 0x00000800
    mmc2: cqhci: RED mask:  0xfdf9a080 | TERRI:    0x00000000
    mmc2: cqhci: Resp idx:  0x0000000d | Resp arg: 0x00000000
    mmc2: sdhci: ============ SDHCI REGISTER DUMP ===========
    mmc2: sdhci: Sys addr:  0x7c722000 | Version:  0x00000002
    mmc2: sdhci: Blk size:  0x00000200 | Blk cnt:  0x00000020
    mmc2: sdhci: Argument:  0x00018000 | Trn mode: 0x00000023
    mmc2: sdhci: Present:   0x01f88008 | Host ctl: 0x00000030
    mmc2: sdhci: Power:     0x00000002 | Blk gap:  0x00000080
    mmc2: sdhci: Wake-up:   0x00000008 | Clock:    0x0000000f
    mmc2: sdhci: Timeout:   0x0000008f | Int stat: 0x00000000
    mmc2: sdhci: Int enab:  0x107f4000 | Sig enab: 0x107f4000
    mmc2: sdhci: ACmd stat: 0x00000000 | Slot int: 0x00000502
    mmc2: sdhci: Caps:      0x07eb0000 | Caps_1:   0x8000b407
    mmc2: sdhci: Cmd:       0x00000d1a | Max curr: 0x00ffffff
    mmc2: sdhci: Resp[0]:   0x00000000 | Resp[1]:  0xffc003ff
    mmc2: sdhci: Resp[2]:   0x328f5903 | Resp[3]:  0x00d07f01
    mmc2: sdhci: Host ctl2: 0x00000088
    mmc2: sdhci: ADMA Err:  0x00000000 | ADMA Ptr: 0xfe179020
    mmc2: sdhci-esdhc-imx: ========= ESDHC IMX DEBUG STATUS DUMP ====
    mmc2: sdhci-esdhc-imx: cmd debug status:  0x2120
    mmc2: sdhci-esdhc-imx: data debug status:  0x2200
    mmc2: sdhci-esdhc-imx: trans debug status:  0x2300
    mmc2: sdhci-esdhc-imx: dma debug status:  0x2400
    mmc2: sdhci-esdhc-imx: adma debug status:  0x2510
    mmc2: sdhci-esdhc-imx: fifo debug status:  0x2680
    mmc2: sdhci-esdhc-imx: async fifo debug status:  0x2750
    mmc2: sdhci: ============================================
    
    For now, disable CMDQ support on the imx8qm/imx8qxp/imx8mm until the
    issue is found and resolved.
    
    Fixes: bb6e358169bf6 ("mmc: sdhci-esdhc-imx: add CMDQ support")
    Fixes: cde5e8e9ff146 ("mmc: sdhci-esdhc-imx: Add an new esdhc_soc_data for i.MX8MM")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tim Harvey <tharvey@gateworks.com>
    Reviewed-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20211103165415.2016-1-tharvey@gateworks.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 092a58f0d9ef5013ad3c197a9a5ecf2d7f797a88
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Nov 26 17:34:42 2021 -0500

    tracing: Fix pid filtering when triggers are attached
    
    commit a55f224ff5f238013de8762c4287117e47b86e22 upstream.
    
    If a event is filtered by pid and a trigger that requires processing of
    the event to happen is a attached to the event, the discard portion does
    not take the pid filtering into account, and the event will then be
    recorded when it should not have been.
    
    Cc: stable@vger.kernel.org
    Fixes: 3fdaf80f4a836 ("tracing: Implement event pid filtering")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68fa6bf7f1798edd07fbfc9865a7e9b92dfbef4c
Author: Jiri Olsa <jolsa@redhat.com>
Date:   Tue Nov 23 15:28:01 2021 +0100

    tracing/uprobe: Fix uprobe_perf_open probes iteration
    
    commit 1880ed71ce863318c1ce93bf324876fb5f92854f upstream.
    
    Add missing 'tu' variable initialization in the probes loop,
    otherwise the head 'tu' is used instead of added probes.
    
    Link: https://lkml.kernel.org/r/20211123142801.182530-1-jolsa@kernel.org
    
    Cc: stable@vger.kernel.org
    Fixes: 99c9a923e97a ("tracing/uprobe: Fix double perf_event linking on multiprobe uprobe")
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b777c866aafc8fec2f79bf45dde7af044ad3c5ff
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 19 13:16:27 2021 +1000

    KVM: PPC: Book3S HV: Prevent POWER7/8 TLB flush flushing SLB
    
    commit cf0b0e3712f7af90006f8317ff27278094c2c128 upstream.
    
    The POWER9 ERAT flush instruction is a SLBIA with IH=7, which is a
    reserved value on POWER7/8. On POWER8 this invalidates the SLB entries
    above index 0, similarly to SLBIA IH=0.
    
    If the SLB entries are invalidated, and then the guest is bypassed, the
    host SLB does not get re-loaded, so the bolted entries above 0 will be
    lost. This can result in kernel stack access causing a SLB fault.
    
    Kernel stack access causing a SLB fault was responsible for the infamous
    mega bug (search "Fix SLB reload bug"). Although since commit
    48e7b7695745 ("powerpc/64s/hash: Convert SLB miss handlers to C") that
    starts using the kernel stack in the SLB miss handler, it might only
    result in an infinite loop of SLB faults. In any case it's a bug.
    
    Fix this by only executing the instruction on >= POWER9 where IH=7 is
    defined not to invalidate the SLB. POWER7/8 don't require this ERAT
    flush.
    
    Fixes: 500871125920 ("KVM: PPC: Book3S HV: Invalidate ERAT when flushing guest TLB entries")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Fabiano Rosas <farosas@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211119031627.577853-1-npiggin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfed9c2f2f2ed36b06ad9a9bedc9c47c0d92f10e
Author: Stefano Stabellini <stefano.stabellini@xilinx.com>
Date:   Tue Nov 23 13:07:48 2021 -0800

    xen: detect uninitialized xenbus in xenbus_init
    
    commit 36e8f60f0867d3b70d398d653c17108459a04efe upstream.
    
    If the xenstore page hasn't been allocated properly, reading the value
    of the related hvm_param (HVM_PARAM_STORE_PFN) won't actually return
    error. Instead, it will succeed and return zero. Instead of attempting
    to xen_remap a bad guest physical address, detect this condition and
    return early.
    
    Note that although a guest physical address of zero for
    HVM_PARAM_STORE_PFN is theoretically possible, it is not a good choice
    and zero has never been validly used in that capacity.
    
    Also recognize all bits set as an invalid value.
    
    For 32-bit Linux, any pfn above ULONG_MAX would get truncated. Pfns
    above ULONG_MAX should never be passed by the Xen tools to HVM guests
    anyway, so check for this condition and return early.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefano Stabellini <stefano.stabellini@xilinx.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Link: https://lore.kernel.org/r/20211123210748.1910236-1-sstabellini@kernel.org
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1d492c2751954202207d432ca7ac99b7973773c
Author: Stefano Stabellini <stefano.stabellini@xilinx.com>
Date:   Mon Nov 15 14:27:19 2021 -0800

    xen: don't continue xenstore initialization in case of errors
    
    commit 08f6c2b09ebd4b326dbe96d13f94fee8f9814c78 upstream.
    
    In case of errors in xenbus_init (e.g. missing xen_store_gfn parameter),
    we goto out_error but we forget to reset xen_store_domain_type to
    XS_UNKNOWN. As a consequence xenbus_probe_initcall and other initcalls
    will still try to initialize xenstore resulting into a crash at boot.
    
    [    2.479830] Call trace:
    [    2.482314]  xb_init_comms+0x18/0x150
    [    2.486354]  xs_init+0x34/0x138
    [    2.489786]  xenbus_probe+0x4c/0x70
    [    2.498432]  xenbus_probe_initcall+0x2c/0x7c
    [    2.503944]  do_one_initcall+0x54/0x1b8
    [    2.507358]  kernel_init_freeable+0x1ac/0x210
    [    2.511617]  kernel_init+0x28/0x130
    [    2.516112]  ret_from_fork+0x10/0x20
    
    Cc: <Stable@vger.kernel.org>
    Cc: jbeulich@suse.com
    Signed-off-by: Stefano Stabellini <stefano.stabellini@xilinx.com>
    Link: https://lore.kernel.org/r/20211115222719.2558207-1-sstabellini@kernel.org
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f4d0719f323e84f2ad9ce6b0fc62752abf2bbd4
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Nov 25 14:05:18 2021 +0100

    fuse: release pipe buf after last use
    
    commit 473441720c8616dfaf4451f9c7ea14f0eb5e5d65 upstream.
    
    Checking buf->flags should be done before the pipe_buf_release() is called
    on the pipe buffer, since releasing the buffer might modify the flags.
    
    This is exactly what page_cache_pipe_buf_release() does, and which results
    in the same VM_BUG_ON_PAGE(PageLRU(page)) that the original patch was
    trying to fix.
    
    Reported-by: Justin Forbes <jmforbes@linuxtx.org>
    Fixes: 712a951025c0 ("fuse: fix page stealing")
    Cc: <stable@vger.kernel.org> # v2.6.35
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d0163cec7de995f9eb9c3128c83fb84f0cb1c64
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Nov 17 10:20:16 2021 +0300

    staging: rtl8192e: Fix use after free in _rtl92e_pci_disconnect()
    
    commit b535917c51acc97fb0761b1edec85f1f3d02bda4 upstream.
    
    The free_rtllib() function frees the "dev" pointer so there is use
    after free on the next line.  Re-arrange things to avoid that.
    
    Fixes: 66898177e7e5 ("staging: rtl8192e: Fix unload/reload problem")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20211117072016.GA5237@kili
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bfed81b2ccd31f8c0ffdf582f27e2fd3a5e8066
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 16 08:20:27 2021 +0100

    staging: greybus: Add missing rwsem around snd_ctl_remove() calls
    
    commit ffcf7ae90f4489047d7b076539ba207024dea5f6 upstream.
    
    snd_ctl_remove() has to be called with card->controls_rwsem held (when
    called after the card instantiation).  This patch adds the missing
    rwsem calls around it.
    
    Fixes: 510e340efe0c ("staging: greybus: audio: Add helper APIs for dynamic audio modules")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20211116072027.18466-1-tiwai@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 146283f16b7e857d688b72f42e46d9567bef6e96
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Fri Nov 5 21:43:58 2021 +0100

    staging/fbtft: Fix backlight
    
    commit 7865dd24934ad580d1bcde8f63c39f324211a23b upstream.
    
    Commit b4a1ed0cd18b ("fbdev: make FB_BACKLIGHT a tristate") forgot to
    update fbtft breaking its backlight support when FB_BACKLIGHT is a module.
    
    Since FB_TFT selects FB_BACKLIGHT there's no need for this conditional
    so just remove it and we're good.
    
    Fixes: b4a1ed0cd18b ("fbdev: make FB_BACKLIGHT a tristate")
    Cc: <stable@vger.kernel.org>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Link: https://lore.kernel.org/r/20211105204358.2991-1-noralf@tronnes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fc5e3c7caccaf932dedee7fef8885a9673c65cd
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Nov 8 16:31:01 2021 -0800

    HID: wacom: Use "Confidence" flag to prevent reporting invalid contacts
    
    commit 7fb0413baa7f8a04caef0c504df9af7e0623d296 upstream.
    
    The HID descriptor of many of Wacom's touch input devices include a
    "Confidence" usage that signals if a particular touch collection contains
    useful data. The driver does not look at this flag, however, which causes
    even invalid contacts to be reported to userspace. A lucky combination of
    kernel event filtering and device behavior (specifically: contact ID 0 ==
    invalid, contact ID >0 == valid; and order all data so that all valid
    contacts are reported before any invalid contacts) spare most devices from
    any visibly-bad behavior.
    
    The DTH-2452 is one example of an unlucky device that misbehaves. It uses
    ID 0 for both the first valid contact and all invalid contacts. Because
    we report both the valid and invalid contacts, the kernel reports that
    contact 0 first goes down (valid) and then goes up (invalid) in every
    report. This causes ~100 clicks per second simply by touching the screen.
    
    This patch inroduces new `confidence` flag in our `hid_data` structure.
    The value is initially set to `true` at the start of a report and can be
    set to `false` if an invalid touch usage is seen.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/270
    Fixes: f8b6a74719b5 ("HID: wacom: generic: Support multiple tools per report")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Tested-by: Joshua Dickens <joshua.dickens@wacom.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ca32e2e776e6bd55a1d64b3bb32963832639193
Author: Helge Deller <deller@gmx.de>
Date:   Sun Nov 21 11:10:55 2021 +0100

    Revert "parisc: Fix backtrace to always include init funtion names"
    
    commit 98400ad75e95860e9a10ec78b0b90ab66184a2ce upstream.
    
    This reverts commit 279917e27edc293eb645a25428c6ab3f3bca3f86.
    
    With the CONFIG_HARDENED_USERCOPY option enabled, this patch triggers
    kernel bugs at runtime:
    
      usercopy: Kernel memory overwrite attempt detected to kernel text (offset 2084839, size 6)!
      kernel BUG at mm/usercopy.c:99!
     Backtrace:
      IAOQ[0]: usercopy_abort+0xc4/0xe8
      [<00000000406ed1c8>] __check_object_size+0x174/0x238
      [<00000000407086d4>] copy_strings.isra.0+0x3e8/0x708
      [<0000000040709a20>] do_execveat_common.isra.0+0x1bc/0x328
      [<000000004070b760>] compat_sys_execve+0x7c/0xb8
      [<0000000040303eb8>] syscall_exit+0x0/0x14
    
    The problem is, that we have an init section of at least 2MB size which
    starts at _stext and is freed after bootup.
    
    If then later some kernel data is (temporarily) stored in this free
    memory, check_kernel_text_object() will trigger a bug since the data
    appears to be inside the kernel text (>=_stext) area:
            if (overlaps(ptr, len, _stext, _etext))
                    usercopy_abort("kernel text");
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@kernel.org # 5.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a4aeb37a7a61740aa50d763697ebb88280cc37b
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Nov 2 12:24:26 2021 +0000

    media: cec: copy sequence field for the reply
    
    commit 13cbaa4c2b7bf9f8285e1164d005dbf08244ecd5 upstream.
    
    When the reply for a non-blocking transmit arrives, the sequence
    field for that reply was never filled in, so userspace would have no
    way of associating the reply to the original transmit.
    
    Copy the sequence field to ensure that this is now possible.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Fixes: 0dbacebede1e ([media] cec: move the CEC framework out of staging and to media)
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3798218a1af4ffb9ff10a3d86fa307dcf9dfb309
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 18 08:16:36 2021 +0100

    ALSA: hda/realtek: Fix LED on HP ProBook 435 G7
    
    commit 05ec7161084565365ecf267e9909a897a95f243a upstream.
    
    HP ProBook 435 G7 (SSID 103c:8735) needs the similar quirk as another
    HP ProBook for enabling the mute and the mic-mute LEDs.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=215021
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211118071636.14738-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60274e248e3d87d1a701b5fdc6856f6e6fb27a2b
Author: Werner Sembach <wse@tuxedocomputers.com>
Date:   Fri Nov 12 12:07:04 2021 +0100

    ALSA: hda/realtek: Add quirk for ASRock NUC Box 1100
    
    commit 174a7fb3859ae75b0f0e35ef852459d8882b55b5 upstream.
    
    This applies a SND_PCI_QUIRK(...) to the ASRock NUC Box 1100 series. This
    fixes the issue of the headphone jack not being detected unless warm
    rebooted from a certain other OS.
    
    When booting a certain other OS some coeff settings are changed that enable
    the audio jack. These settings are preserved on a warm reboot and can be
    easily dumped.
    
    The relevant indexes and values where gathered by naively diff-ing and
    reading a working and a non-working coeff dump.
    
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211112110704.1022501-1-wse@tuxedocomputers.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 172167bc8dac6aced27959a6912b18c4aef0cc7b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 18 22:57:29 2021 +0100

    ALSA: ctxfi: Fix out-of-range access
    
    commit 76c47183224c86e4011048b80f0e2d0d166f01c2 upstream.
    
    The master and next_conj of rcs_ops are used for iterating the
    resource list entries, and currently those are supposed to return the
    current value.  The problem is that next_conf may go over the last
    entry before the loop abort condition is evaluated, and it may return
    the "current" value that is beyond the array size.  It was caught
    recently as a GPF, for example.
    
    Those return values are, however, never actually evaluated, hence
    basically we don't have to consider the current value as the return at
    all.  By dropping those return values, the potential out-of-range
    access above is also fixed automatically.
    
    This patch changes the return type of master and next_conj callbacks
    to void and drop the superfluous code accordingly.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=214985
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211118215729.26257-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4402cf0402526f7c5befa97481be13b131797838
Author: Todd Kjos <tkjos@google.com>
Date:   Fri Nov 12 10:07:20 2021 -0800

    binder: fix test regression due to sender_euid change
    
    commit c21a80ca0684ec2910344d72556c816cb8940c01 upstream.
    
    This is a partial revert of commit
    29bc22ac5e5b ("binder: use euid from cred instead of using task").
    Setting sender_euid using proc->cred caused some Android system test
    regressions that need further investigation. It is a partial
    reversion because subsequent patches rely on proc->cred.
    
    Fixes: 29bc22ac5e5b ("binder: use euid from cred instead of using task")
    Cc: stable@vger.kernel.org # 4.4+
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Change-Id: I9b1769a3510fed250bb21859ef8beebabe034c66
    Link: https://lore.kernel.org/r/20211112180720.2858135-1-tkjos@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aea184ae6408c1783f74483bb47184e2b249e84d
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Tue Nov 23 12:16:56 2021 +0200

    usb: hub: Fix locking issues with address0_mutex
    
    commit 6cca13de26eea6d32a98d96d916a048d16a12822 upstream.
    
    Fix the circular lock dependency and unbalanced unlock of addess0_mutex
    introduced when fixing an address0_mutex enumeration retry race in commit
    ae6dc22d2d1 ("usb: hub: Fix usb enumeration issue due to address0 race")
    
    Make sure locking order between port_dev->status_lock and address0_mutex
    is correct, and that address0_mutex is not unlocked in hub_port_connect
    "done:" codepath which may be reached without locking address0_mutex
    
    Fixes: 6ae6dc22d2d1 ("usb: hub: Fix usb enumeration issue due to address0 race")
    Cc: <stable@vger.kernel.org>
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20211123101656.1113518-1-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bf3a0c7789e6fb4b1d9733a8cb62f407abf3c25
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Tue Nov 16 00:16:30 2021 +0200

    usb: hub: Fix usb enumeration issue due to address0 race
    
    commit 6ae6dc22d2d1ce6aa77a6da8a761e61aca216f8b upstream.
    
    xHC hardware can only have one slot in default state with address 0
    waiting for a unique address at a time, otherwise "undefined behavior
    may occur" according to xhci spec 5.4.3.4
    
    The address0_mutex exists to prevent this across both xhci roothubs.
    
    If hub_port_init() fails, it may unlock the mutex and exit with a xhci
    slot in default state. If the other xhci roothub calls hub_port_init()
    at this point we end up with two slots in default state.
    
    Make sure the address0_mutex protects the slot default state across
    hub_port_init() retries, until slot is addressed or disabled.
    
    Note, one known minor case is not fixed by this patch.
    If device needs to be reset during resume, but fails all hub_port_init()
    retries in usb_reset_and_verify_device(), then it's possible the slot is
    still left in default state when address0_mutex is unlocked.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 638139eb95d2 ("usb: hub: allow to process more usb hub events in parallel")
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20211115221630.871204-1-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00f1038c72f86d01e2c685b5d20b9e22eab72ecb
Author: Ondrej Jirman <megous@megous.com>
Date:   Mon Nov 8 11:28:32 2021 +0100

    usb: typec: fusb302: Fix masking of comparator and bc_lvl interrupts
    
    commit 362468830dd5bea8bf6ad5203b2ea61f8a4e8288 upstream.
    
    The code that enables either BC_LVL or COMP_CHNG interrupt in tcpm_set_cc
    wrongly assumes that the interrupt is unmasked by writing 1 to the apropriate
    bit in the mask register. In fact, interrupts are enabled when the mask
    is 0, so the tcpm_set_cc enables interrupt for COMP_CHNG when it expects
    BC_LVL interrupt to be enabled.
    
    This causes inability of the driver to recognize cable unplug events
    in host mode (unplug is recognized only via a COMP_CHNG interrupt).
    
    In device mode this bug was masked by simultaneous triggering of the VBUS
    change interrupt, because of loss of VBUS when the port peer is providing
    power.
    
    Fixes: 48242e30532b ("usb: typec: fusb302: Revert "Resolve fixed power role contract setup"")
    Cc: stable <stable@vger.kernel.org>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Ondrej Jirman <megous@megous.com>
    Link: https://lore.kernel.org/r/20211108102833.2793803-1-megous@megous.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56fbab4937e04c8d51a592dc78c2e17658af7f22
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Nov 17 10:49:23 2021 +0300

    usb: chipidea: ci_hdrc_imx: fix potential error pointer dereference in probe
    
    commit d4d2e5329ae9dfd6742c84d79f7d143d10410f1b upstream.
    
    If the first call to devm_usb_get_phy_by_phandle(dev, "fsl,usbphy", 0)
    fails with something other than -ENODEV then it leads to an error
    pointer dereference.  For those errors we should just jump directly to
    the error handling.
    
    Fixes: 8253a34bfae3 ("usb: chipidea: ci_hdrc_imx: Also search for 'phys' phandle")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20211117074923.GF5237@kili
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b70ff391deeec35cdd8a05f5f63f5fe28bc4f225
Author: Nikolay Aleksandrov <nikolay@nvidia.com>
Date:   Tue Nov 23 12:27:19 2021 +0200

    net: nexthop: fix null pointer dereference when IPv6 is not enabled
    
    commit 1c743127cc54b112b155f434756bd4b5fa565a99 upstream.
    
    When we try to add an IPv6 nexthop and IPv6 is not enabled
    (!CONFIG_IPV6) we'll hit a NULL pointer dereference[1] in the error path
    of nh_create_ipv6() due to calling ipv6_stub->fib6_nh_release. The bug
    has been present since the beginning of IPv6 nexthop gateway support.
    Commit 1aefd3de7bc6 ("ipv6: Add fib6_nh_init and release to stubs") tells
    us that only fib6_nh_init has a dummy stub because fib6_nh_release should
    not be called if fib6_nh_init returns an error, but the commit below added
    a call to ipv6_stub->fib6_nh_release in its error path. To fix it return
    the dummy stub's -EAFNOSUPPORT error directly without calling
    ipv6_stub->fib6_nh_release in nh_create_ipv6()'s error path.
    
    [1]
     Output is a bit truncated, but it clearly shows the error.
     BUG: kernel NULL pointer dereference, address: 000000000000000000
     #PF: supervisor instruction fetch in kernel modede
     #PF: error_code(0x0010) - not-present pagege
     PGD 0 P4D 0
     Oops: 0010 [#1] PREEMPT SMP NOPTI
     CPU: 4 PID: 638 Comm: ip Kdump: loaded Not tainted 5.16.0-rc1+ #446
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-4.fc34 04/01/2014
     RIP: 0010:0x0
     Code: Unable to access opcode bytes at RIP 0xffffffffffffffd6.
     RSP: 0018:ffff888109f5b8f0 EFLAGS: 00010286^Ac
     RAX: 0000000000000000 RBX: ffff888109f5ba28 RCX: 0000000000000000
     RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff8881008a2860
     RBP: ffff888109f5b9d8 R08: 0000000000000000 R09: 0000000000000000
     R10: ffff888109f5b978 R11: ffff888109f5b948 R12: 00000000ffffff9f
     R13: ffff8881008a2a80 R14: ffff8881008a2860 R15: ffff8881008a2840
     FS:  00007f98de70f100(0000) GS:ffff88822bf00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: ffffffffffffffd6 CR3: 0000000100efc000 CR4: 00000000000006e0
     Call Trace:
      <TASK>
      nh_create_ipv6+0xed/0x10c
      rtm_new_nexthop+0x6d7/0x13f3
      ? check_preemption_disabled+0x3d/0xf2
      ? lock_is_held_type+0xbe/0xfd
      rtnetlink_rcv_msg+0x23f/0x26a
      ? check_preemption_disabled+0x3d/0xf2
      ? rtnl_calcit.isra.0+0x147/0x147
      netlink_rcv_skb+0x61/0xb2
      netlink_unicast+0x100/0x187
      netlink_sendmsg+0x37f/0x3a0
      ? netlink_unicast+0x187/0x187
      sock_sendmsg_nosec+0x67/0x9b
      ____sys_sendmsg+0x19d/0x1f9
      ? copy_msghdr_from_user+0x4c/0x5e
      ? rcu_read_lock_any_held+0x2a/0x78
      ___sys_sendmsg+0x6c/0x8c
      ? asm_sysvec_apic_timer_interrupt+0x12/0x20
      ? lockdep_hardirqs_on+0xd9/0x102
      ? sockfd_lookup_light+0x69/0x99
      __sys_sendmsg+0x50/0x6e
      do_syscall_64+0xcb/0xf2
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7f98dea28914
     Code: 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b5 0f 1f 80 00 00 00 00 48 8d 05 e9 5d 0c 00 8b 00 85 c0 75 13 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 c3 0f 1f 00 41 54 41 89 d4 55 48 89 f5 53
     RSP: 002b:00007fff859f5e68 EFLAGS: 00000246 ORIG_RAX: 000000000000002e2e
     RAX: ffffffffffffffda RBX: 00000000619cb810 RCX: 00007f98dea28914
     RDX: 0000000000000000 RSI: 00007fff859f5ed0 RDI: 0000000000000003
     RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000008
     R10: fffffffffffffce6 R11: 0000000000000246 R12: 0000000000000001
     R13: 000055c0097ae520 R14: 000055c0097957fd R15: 00007fff859f63a0
     </TASK>
     Modules linked in: bridge stp llc bonding virtio_net
    
    Cc: stable@vger.kernel.org
    Fixes: 53010f991a9f ("nexthop: Add support for IPv6 gateways")
    Signed-off-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0755f3f32277b0860b10a09fcd28b66361b7fd4d
Author: Albert Wang <albertccwang@google.com>
Date:   Tue Nov 9 17:26:42 2021 +0800

    usb: dwc3: gadget: Fix null pointer exception
    
    commit 26288448120b28af1dfd85a6fa6b6d55a16c7f2f upstream.
    
    In the endpoint interrupt functions
    dwc3_gadget_endpoint_transfer_in_progress() and
    dwc3_gadget_endpoint_trbs_complete() will dereference the endpoint
    descriptor. But it could be cleared in __dwc3_gadget_ep_disable()
    when accessory disconnected. So we need to check whether it is null
    or not before dereferencing it.
    
    Fixes: f09ddcfcb8c5 ("usb: dwc3: gadget: Prevent EP queuing while stopping transfers")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Jack Pham <quic_jackp@quicinc.com>
    Signed-off-by: Albert Wang <albertccwang@google.com>
    Link: https://lore.kernel.org/r/20211109092642.3507692-1-albertccwang@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 140e2df472ba0014692c6202e6b44cc5e5161f79
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Oct 25 16:35:06 2021 -0700

    usb: dwc3: gadget: Check for L1/L2/U3 for Start Transfer
    
    commit 63c4c320ccf77074ffe9019ac596603133c1b517 upstream.
    
    The programming guide noted that the driver needs to verify if the link
    state is in U0 before executing the Start Transfer command. If it's not
    in U0, the driver needs to perform remote wakeup. This is not accurate.
    If the link state is in U1/U2, then the controller will not respond to
    link recovery request from DCTL.ULSTCHNGREQ. The Start Transfer command
    will trigger a link recovery if it is in U1/U2. A clarification will be
    added to the programming guide for all controller versions.
    
    The current implementation shouldn't cause any functional issue. It may
    occasionally report an invalid time out warning from failed link
    recovery request. The driver will still go ahead with the Start Transfer
    command if the remote wakeup fails. The new change only initiates remote
    wakeup where it is needed, which is when the link state is in L1/L2/U3.
    
    Fixes: c36d8e947a56 ("usb: dwc3: gadget: put link to U0 before Start Transfer")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/05b4a5fbfbd0863fc9b1d7af934a366219e3d0b4.1635204761.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3abf746e800b56077fabb3f128afa5929ea94eb9
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Oct 25 16:21:10 2021 -0700

    usb: dwc3: gadget: Ignore NoStream after End Transfer
    
    commit d74dc3e9f58c28689cef1faccf918e06587367d3 upstream.
    
    The End Transfer command from a stream endpoint will generate a NoStream
    event, and we should ignore it. Currently we set the flag
    DWC3_EP_IGNORE_NEXT_NOSTREAM to track this prior to sending the command,
    and it will be cleared on the next stream event. However, a stream event
    may be generated before the End Transfer command completion and
    prematurely clear the flag. Fix this by setting the flag on End Transfer
    completion instead.
    
    Fixes: 140ca4cfea8a ("usb: dwc3: gadget: Handle stream transfers")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/cee1253af4c3600edb878d11c9c08b040817ae23.1635203975.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b7ab82f51736a8550a3b4248054ca8042c57869
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Nov 5 07:58:03 2021 -0700

    usb: dwc2: hcd_queue: Fix use of floating point literal
    
    commit 310780e825f3ffd211b479b8f828885a6faedd63 upstream.
    
    A new commit in LLVM causes an error on the use of 'long double' when
    '-mno-x87' is used, which the kernel does through an alias,
    '-mno-80387' (see the LLVM commit below for more details around why it
    does this).
    
     drivers/usb/dwc2/hcd_queue.c:1744:25: error: expression requires  'long double' type support, but target 'x86_64-unknown-linux-gnu' does not support it
                             delay = ktime_set(0, DWC2_RETRY_WAIT_DELAY);
                                                 ^
     drivers/usb/dwc2/hcd_queue.c:62:34: note: expanded from macro 'DWC2_RETRY_WAIT_DELAY'
     #define DWC2_RETRY_WAIT_DELAY (1 * 1E6L)
                                     ^
     1 error generated.
    
    This happens due to the use of a 'long double' literal. The 'E6' part of
    '1E6L' causes the literal to be a 'double' then the 'L' suffix promotes
    it to 'long double'.
    
    There is no visible reason for a floating point value in this driver, as
    the value is only used as a parameter to a function that expects an
    integer type. Use NSEC_PER_MSEC, which is the same integer value as
    '1E6L', to avoid changing functionality but fix the error.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1497
    Link: https://github.com/llvm/llvm-project/commit/a8083d42b1c346e21623a1d36d1f0cadd7801d83
    Fixes: 6ed30a7d8ec2 ("usb: dwc2: host: use hrtimer for NAK retries")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: John Keeping <john@metanate.com>
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20211105145802.2520658-1-nathan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b18ccad9671cc1b645646f8d52cf213ac68a975
Author: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
Date:   Thu Nov 4 11:36:01 2021 +0400

    usb: dwc2: gadget: Fix ISOC flow for elapsed frames
    
    commit 7ad4a0b1d46b2612f4429a72afd8f137d7efa9a9 upstream.
    
    Added updating of request frame number for elapsed frames,
    otherwise frame number will remain as previous use of request.
    This will allow function driver to correctly track frames in
    case of Missed ISOC occurs.
    
    Added setting request actual length to 0 for elapsed frames.
    In Slave mode when pushing data to RxFIFO by dwords, request
    actual length incrementing accordingly. But before whole packet
    will be pushed into RxFIFO and send to host can occurs Missed
    ISOC and data will not send to host. So, in this case request
    actual length should be reset to 0.
    
    Fixes: 91bb163e1e4f ("usb: dwc2: gadget: Fix ISOC flow for BDMA and Slave")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: John Keeping <john@metanate.com>
    Signed-off-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Link: https://lore.kernel.org/r/c356baade6e9716d312d43df08d53ae557cb8037.1636011277.git.Minas.Harutyunyan@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16f1cac8f702a7755630186c7314d49fb89b0319
Author: Mingjie Zhang <superzmj@fibocom.com>
Date:   Tue Nov 23 21:37:57 2021 +0800

    USB: serial: option: add Fibocom FM101-GL variants
    
    commit 88459e3e42760abb2299bbf6cb1026491170e02a upstream.
    
    Update the USB serial option driver support for the Fibocom
    FM101-GL Cat.6
    LTE modules as there are actually several different variants.
    - VID:PID 2cb7:01a2, FM101-GL are laptop M.2 cards (with
      MBIM interfaces for /Linux/Chrome OS)
    - VID:PID 2cb7:01a4, FM101-GL for laptop debug M.2 cards(with adb
      interface for /Linux/Chrome OS)
    
    0x01a2: mbim, tty, tty, diag, gnss
    0x01a4: mbim, diag, tty, adb, gnss, gnss
    
    Here are the outputs of lsusb -v and usb-devices:
    
    T:  Bus=02 Lev=01 Prnt=01 Port=03 Cnt=01 Dev#= 86 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=01a2 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=673326ce
    C:* #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    
    Bus 002 Device 084: ID 2cb7:01a2 Fibocom Wireless Inc. Fibocom FM101-GL Module
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               3.20
      bDeviceClass            0
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0         9
      idVendor           0x2cb7
      idProduct          0x01a2
      bcdDevice            5.04
      iManufacturer           1 Fibocom Wireless Inc.
      iProduct                2 Fibocom FM101-GL Module
      iSerial                 3 673326ce
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x015d
        bNumInterfaces          6
        bConfigurationValue     1
        iConfiguration          4 MBIM_DUN_DUN_DIAG_NMEA
        bmAttributes         0xa0
          (Bus Powered)
          Remote Wakeup
        MaxPower              896mA
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         0
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass      14
          bFunctionProtocol       0
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass     14
          bInterfaceProtocol      0
          iInterface              5 Fibocom FM101-GL LTE Modem
          CDC Header:
            bcdCDC               1.10
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
          CDC MBIM:
            bcdMBIMVersion       1.00
            wMaxControlMessage   4096
            bNumberFilters       32
            bMaxFilterSize       128
            wMaxSegmentSize      2048
            bmNetworkCapabilities 0x20
              8-byte ntb input size
          CDC MBIM Extended:
            bcdMBIMExtendedVersion           1.00
            bMaxOutstandingCommandMessages     64
            wMTU                             1500
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               9
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           0
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       1
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              6 MBIM Data
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x8e  EP 14 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x0f  EP 15 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               2
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     48
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x88  EP 8 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
    
    T:  Bus=02 Lev=01 Prnt=01 Port=03 Cnt=01 Dev#= 85 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=01a4 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=673326ce
    C:* #Ifs= 7 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    I:* If#= 6 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    
    Bus 002 Device 085: ID 2cb7:01a4 Fibocom Wireless Inc. Fibocom FM101-GL Module
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               3.20
      bDeviceClass            0
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0         9
      idVendor           0x2cb7
      idProduct          0x01a4
      bcdDevice            5.04
      iManufacturer           1 Fibocom Wireless Inc.
      iProduct                2 Fibocom FM101-GL Module
      iSerial                 3 673326ce
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x0180
        bNumInterfaces          7
        bConfigurationValue     1
        iConfiguration          4 MBIM_DIAG_DUN_ADB_GNSS_GNSS
        bmAttributes         0xa0
          (Bus Powered)
          Remote Wakeup
        MaxPower              896mA
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         0
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass      14
          bFunctionProtocol       0
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass     14
          bInterfaceProtocol      0
          iInterface              5 Fibocom FM101-GL LTE Modem
          CDC Header:
            bcdCDC               1.10
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
          CDC MBIM:
            bcdMBIMVersion       1.00
            wMaxControlMessage   4096
            bNumberFilters       32
            bMaxFilterSize       128
            wMaxSegmentSize      2048
            bmNetworkCapabilities 0x20
              8-byte ntb input size
          CDC MBIM Extended:
            bcdMBIMExtendedVersion           1.00
            bMaxOutstandingCommandMessages     64
            wMTU                             1500
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               9
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           0
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       1
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              6 MBIM Data
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x8e  EP 14 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x0f  EP 15 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               2
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     48
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass     66
          bInterfaceProtocol      1
          iInterface              8 ADB Interface
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x89  EP 9 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x88  EP 8 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x05  EP 5 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
    
    Signed-off-by: Mingjie Zhang <superzmj@fibocom.com>
    Link: https://lore.kernel.org/r/20211123133757.37475-1-superzmj@fibocom.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff721286369e7a038b34ed09ac31af6817dd510a
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Nov 19 15:03:19 2021 +0100

    USB: serial: option: add Telit LE910S1 0x9200 composition
    
    commit e353f3e88720300c3d72f49a4bea54f42db1fa5e upstream.
    
    Add the following Telit LE910S1 composition:
    
    0x9200: tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20211119140319.10448-1-dnlplm@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 854c14b2a15c84eb04d17d4904f843ce0693bfe8
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Wed Nov 17 20:07:34 2021 +0200

    ACPI: Get acpi_device's parent from the parent field
    
    commit 9054fc6d57e80c27c0b0632966416144f2092c2b upstream.
    
    Printk modifier %pfw is used to print the full path of the device name.
    This is obtained device by device until a device no longer has a parent.
    
    On ACPI getting the parent fwnode is done by calling acpi_get_parent()
    which tries to down() a semaphore. But local IRQs are now disabled in
    vprintk_store() before the mutex is acquired. This is obviously a problem.
    
    Luckily struct device, embedded in struct acpi_device, has a parent field
    already. Use that field to get the parent instead of relying on
    acpi_get_parent().
    
    Fixes: 3bd32d6a2ee6 ("lib/vsprintf: Add %pfw conversion specifier for printing fwnode names")
    Cc: 5.5+ <stable@vger.kernel.org> # 5.5+
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33fe044f6a9e8977686a6a09f0bf33e5cc75257e
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Nov 9 18:48:08 2021 +0000

    bpf: Fix toctou on read-only map's constant scalar tracking
    
    commit 353050be4c19e102178ccc05988101887c25ae53 upstream.
    
    Commit a23740ec43ba ("bpf: Track contents of read-only maps as scalars") is
    checking whether maps are read-only both from BPF program side and user space
    side, and then, given their content is constant, reading out their data via
    map->ops->map_direct_value_addr() which is then subsequently used as known
    scalar value for the register, that is, it is marked as __mark_reg_known()
    with the read value at verification time. Before a23740ec43ba, the register
    content was marked as an unknown scalar so the verifier could not make any
    assumptions about the map content.
    
    The current implementation however is prone to a TOCTOU race, meaning, the
    value read as known scalar for the register is not guaranteed to be exactly
    the same at a later point when the program is executed, and as such, the
    prior made assumptions of the verifier with regards to the program will be
    invalid which can cause issues such as OOB access, etc.
    
    While the BPF_F_RDONLY_PROG map flag is always fixed and required to be
    specified at map creation time, the map->frozen property is initially set to
    false for the map given the map value needs to be populated, e.g. for global
    data sections. Once complete, the loader "freezes" the map from user space
    such that no subsequent updates/deletes are possible anymore. For the rest
    of the lifetime of the map, this freeze one-time trigger cannot be undone
    anymore after a successful BPF_MAP_FREEZE cmd return. Meaning, any new BPF_*
    cmd calls which would update/delete map entries will be rejected with -EPERM
    since map_get_sys_perms() removes the FMODE_CAN_WRITE permission. This also
    means that pending update/delete map entries must still complete before this
    guarantee is given. This corner case is not an issue for loaders since they
    create and prepare such program private map in successive steps.
    
    However, a malicious user is able to trigger this TOCTOU race in two different
    ways: i) via userfaultfd, and ii) via batched updates. For i) userfaultfd is
    used to expand the competition interval, so that map_update_elem() can modify
    the contents of the map after map_freeze() and bpf_prog_load() were executed.
    This works, because userfaultfd halts the parallel thread which triggered a
    map_update_elem() at the time where we copy key/value from the user buffer and
    this already passed the FMODE_CAN_WRITE capability test given at that time the
    map was not "frozen". Then, the main thread performs the map_freeze() and
    bpf_prog_load(), and once that had completed successfully, the other thread
    is woken up to complete the pending map_update_elem() which then changes the
    map content. For ii) the idea of the batched update is similar, meaning, when
    there are a large number of updates to be processed, it can increase the
    competition interval between the two. It is therefore possible in practice to
    modify the contents of the map after executing map_freeze() and bpf_prog_load().
    
    One way to fix both i) and ii) at the same time is to expand the use of the
    map's map->writecnt. The latter was introduced in fc9702273e2e ("bpf: Add mmap()
    support for BPF_MAP_TYPE_ARRAY") and further refined in 1f6cb19be2e2 ("bpf:
    Prevent re-mmap()'ing BPF map as writable for initially r/o mapping") with
    the rationale to make a writable mmap()'ing of a map mutually exclusive with
    read-only freezing. The counter indicates writable mmap() mappings and then
    prevents/fails the freeze operation. Its semantics can be expanded beyond
    just mmap() by generally indicating ongoing write phases. This would essentially
    span any parallel regular and batched flavor of update/delete operation and
    then also have map_freeze() fail with -EBUSY. For the check_mem_access() in
    the verifier we expand upon the bpf_map_is_rdonly() check ensuring that all
    last pending writes have completed via bpf_map_write_active() test. Once the
    map->frozen is set and bpf_map_write_active() indicates a map->writecnt of 0
    only then we are really guaranteed to use the map's data as known constants.
    For map->frozen being set and pending writes in process of still being completed
    we fall back to marking that register as unknown scalar so we don't end up
    making assumptions about it. With this, both TOCTOU reproducers from i) and
    ii) are fixed.
    
    Note that the map->writecnt has been converted into a atomic64 in the fix in
    order to avoid a double freeze_mutex mutex_{un,}lock() pair when updating
    map->writecnt in the various map update/delete BPF_* cmd flavors. Spanning
    the freeze_mutex over entire map update/delete operations in syscall side
    would not be possible due to then causing everything to be serialized.
    Similarly, something like synchronize_rcu() after setting map->frozen to wait
    for update/deletes to complete is not possible either since it would also
    have to span the user copy which can sleep. On the libbpf side, this won't
    break d66562fba1ce ("libbpf: Add BPF object skeleton support") as the
    anonymous mmap()-ed "map initialization image" is remapped as a BPF map-backed
    mmap()-ed memory where for .rodata it's non-writable.
    
    Fixes: a23740ec43ba ("bpf: Track contents of read-only maps as scalars")
    Reported-by: w1tcher.bupt@gmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    [fix conflict to call bpf_map_write_active_dec() in err_put block.
    fix conflict to insert new functions after find_and_alloc_map().]
    Reference: CVE-2021-4001
    Signed-off-by: Masami Ichikawa(CIP) <masami.ichikawa@cybertrust.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
