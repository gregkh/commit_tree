commit c5ae3a6aa1a3ff20830852ab0cd9b8c2fba56d4c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jan 10 09:27:15 2018 +0100

    Linux 4.4.111

commit 516fa79e77f7c4490ded10e7e1c36758482bde5a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jan 9 10:24:02 2018 +0100

    Fix build error in vma.c
    
    This fixes the following much-reported build issue:
    
    arch/x86/entry/vdso/vma.c: In function ‘map_vdso’:
    arch/x86/entry/vdso/vma.c:175:9: error:
            implicit declaration of function ‘pvclock_pvti_cpu0_va’
    
    on some arches and configurations.
    
    Thanks to Guenter for being persistent enough to get it fixed :)
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6dcf5491e01c3d1135497d0661bb5b35a126b9d8
Author: Borislav Petkov <bp@suse.de>
Date:   Thu Jan 4 17:42:45 2018 +0100

    Map the vsyscall page with _PAGE_USER
    
    This needs to happen early in kaiser_pagetable_walk(), before the
    hierarchy is established so that _PAGE_USER permission can be really
    set.
    
    A proper fix would be to teach kaiser_pagetable_walk() to update those
    permissions but the vsyscall page is the only exception here so ...
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90191f71d74901ff88cd10039c03b98ca8a66c08
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Fri Oct 7 17:02:14 2016 -0700

    proc: much faster /proc/vmstat
    
    commit 68ba0326b4e14988f9e0c24a6e12a85cf2acd1ca upstream.
    
    Every current KDE system has process named ksysguardd polling files
    below once in several seconds:
    
            $ strace -e trace=open -p $(pidof ksysguardd)
            Process 1812 attached
            open("/etc/mtab", O_RDONLY|O_CLOEXEC)   = 8
            open("/etc/mtab", O_RDONLY|O_CLOEXEC)   = 8
            open("/proc/net/dev", O_RDONLY)         = 8
            open("/proc/net/wireless", O_RDONLY)    = -1 ENOENT (No such file or directory)
            open("/proc/stat", O_RDONLY)            = 8
            open("/proc/vmstat", O_RDONLY)          = 8
    
    Hell knows what it is doing but speed up reading /proc/vmstat by 33%!
    
    Benchmark is open+read+close 1.000.000 times.
    
                            BEFORE
    $ perf stat -r 10 taskset -c 3 ./proc-vmstat
    
     Performance counter stats for 'taskset -c 3 ./proc-vmstat' (10 runs):
    
          13146.768464      task-clock (msec)         #    0.960 CPUs utilized            ( +-  0.60% )
                    15      context-switches          #    0.001 K/sec                    ( +-  1.41% )
                     1      cpu-migrations            #    0.000 K/sec                    ( +- 11.11% )
                   104      page-faults               #    0.008 K/sec                    ( +-  0.57% )
        45,489,799,349      cycles                    #    3.460 GHz                      ( +-  0.03% )
         9,970,175,743      stalled-cycles-frontend   #   21.92% frontend cycles idle     ( +-  0.10% )
         2,800,298,015      stalled-cycles-backend    #   6.16% backend cycles idle       ( +-  0.32% )
        79,241,190,850      instructions              #    1.74  insn per cycle
                                                      #    0.13  stalled cycles per insn  ( +-  0.00% )
        17,616,096,146      branches                  # 1339.956 M/sec                    ( +-  0.00% )
           176,106,232      branch-misses             #    1.00% of all branches          ( +-  0.18% )
    
          13.691078109 seconds time elapsed                                          ( +-  0.03% )
          ^^^^^^^^^^^^
    
                            AFTER
    $ perf stat -r 10 taskset -c 3 ./proc-vmstat
    
     Performance counter stats for 'taskset -c 3 ./proc-vmstat' (10 runs):
    
           8688.353749      task-clock (msec)         #    0.950 CPUs utilized            ( +-  1.25% )
                    10      context-switches          #    0.001 K/sec                    ( +-  2.13% )
                     1      cpu-migrations            #    0.000 K/sec
                   104      page-faults               #    0.012 K/sec                    ( +-  0.56% )
        30,384,010,730      cycles                    #    3.497 GHz                      ( +-  0.07% )
        12,296,259,407      stalled-cycles-frontend   #   40.47% frontend cycles idle     ( +-  0.13% )
         3,370,668,651      stalled-cycles-backend    #  11.09% backend cycles idle       ( +-  0.69% )
        28,969,052,879      instructions              #    0.95  insn per cycle
                                                      #    0.42  stalled cycles per insn  ( +-  0.01% )
         6,308,245,891      branches                  #  726.058 M/sec                    ( +-  0.00% )
           214,685,502      branch-misses             #    3.40% of all branches          ( +-  0.26% )
    
           9.146081052 seconds time elapsed                                          ( +-  0.07% )
           ^^^^^^^^^^^
    
    vsnprintf() is slow because:
    
    1. format_decode() is busy looking for format specifier: 2 branches
       per character (not in this case, but in others)
    
    2. approximately million branches while parsing format mini language
       and everywhere
    
    3.  just look at what string() does /proc/vmstat is good case because
       most of its content are strings
    
    Link: http://lkml.kernel.org/r/20160806125455.GA1187@p183.telecom.by
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c819a67f7ee9fafb4dca98c95e4dedfc80b985ad
Author: Libor Pechacek <lpechacek@suse.com>
Date:   Wed Apr 13 11:06:12 2016 +0930

    module: Issue warnings when tainting kernel
    
    commit 3205c36cf7d96024626f92d65f560035df1abcb2 upstream.
    
    While most of the locations where a kernel taint bit is set are accompanied
    with a warning message, there are two which set their bits silently.  If
    the tainting module gets unloaded later on, it is almost impossible to tell
    what was the reason for setting the flag.
    
    Signed-off-by: Libor Pechacek <lpechacek@suse.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e35bc655ec1981b95e0cc97a397c77d437e4eec
Author: Miroslav Benes <mbenes@suse.cz>
Date:   Thu Nov 26 13:18:06 2015 +1030

    module: keep percpu symbols in module's symtab
    
    commit e0224418516b4d8a6c2160574bac18447c354ef0 upstream.
    
    Currently, percpu symbols from .data..percpu ELF section of a module are
    not copied over and stored in final symtab array of struct module.
    Consequently such symbol cannot be returned via kallsyms API (for
    example kallsyms_lookup_name). This can be especially confusing when the
    percpu symbol is exported. Only its __ksymtab et al. are present in its
    symtab.
    
    The culprit is in layout_and_allocate() function where SHF_ALLOC flag is
    dropped for .data..percpu section. There is in fact no need to copy the
    section to final struct module, because kernel module loader allocates
    extra percpu section by itself. Unfortunately only symbols from
    SHF_ALLOC sections are copied due to a check in is_core_symbol().
    
    The patch changes is_core_symbol() function to copy over also percpu
    symbols (their st_shndx points to .data..percpu ELF section). We do it
    only if CONFIG_KALLSYMS_ALL is set to be consistent with the rest of the
    function (ELF section is SHF_ALLOC but !SHF_EXECINSTR). Finally
    elf_type() returns type 'a' for a percpu symbol because its address is
    absolute.
    
    Signed-off-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 104fd57d391a878cbdfbd43d9e8782350eb5b1ce
Author: Michal Marek <mmarek@suse.com>
Date:   Wed Dec 9 15:08:21 2015 +0100

    genksyms: Handle string literals with spaces in reference files
    
    commit a78f70e8d65e88b9f631d073f68cb26dcd746298 upstream.
    
    The reference files use spaces to separate tokens, however, we must
    preserve spaces inside string literals. Currently the only case in the
    tree is struct edac_raw_error_desc in <linux/edac.h>:
    
    $ KBUILD_SYMTYPES=1 make -s drivers/edac/amd64_edac.symtypes
    $ mv drivers/edac/amd64_edac.{symtypes,symref}
    $ KBUILD_SYMTYPES=1 make -s drivers/edac/amd64_edac.symtypes
    drivers/edac/amd64_edac.c:527: warning: amd64_get_dram_hole_info: modversion changed because of changes in struct edac_raw_error_desc
    
    Signed-off-by: Michal Marek <mmarek@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4c1c75373bf17f185edf3d8b2a64c50c500c785
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jan 4 22:19:04 2018 +0100

    x86/tlb: Drop the _GPL from the cpu_tlbstate export
    
    commit 1e5476815fd7f98b888e01a0f9522b63085f96c9 upstream.
    
    The recent changes for PTI touch cpu_tlbstate from various tlb_flush
    inlines. cpu_tlbstate is exported as GPL symbol, so this causes a
    regression when building out of tree drivers for certain graphics cards.
    
    Aside of that the export was wrong since it was introduced as it should
    have been EXPORT_PER_CPU_SYMBOL_GPL().
    
    Use the correct PER_CPU export and drop the _GPL to restore the previous
    state which allows users to utilize the cards they payed for.
    
    As always I'm really thrilled to make this kind of change to support the
    #friends (or however the hot hashtag of today is spelled) from that closet
    sauce graphics corp.
    
    Fixes: 1e02ce4cccdc ("x86: Store a per-cpu shadow copy of CR4")
    Fixes: 6fd166aae78c ("x86/mm: Use/Fix PCID to optimize user/kernel switches")
    Reported-by: Kees Cook <keescook@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Thomas Backlund <tmb@mageia.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5bbffc0501de51c1df62bb907bbeb3dfb378588
Author: Helge Deller <deller@gmx.de>
Date:   Tue Jan 2 20:36:44 2018 +0100

    parisc: Fix alignment of pa_tlb_lock in assembly on 32-bit SMP kernel
    
    commit 88776c0e70be0290f8357019d844aae15edaa967 upstream.
    
    Qemu for PARISC reported on a 32bit SMP parisc kernel strange failures
    about "Not-handled unaligned insn 0x0e8011d6 and 0x0c2011c9."
    
    Those opcodes evaluate to the ldcw() assembly instruction which requires
    (on 32bit) an alignment of 16 bytes to ensure atomicity.
    
    As it turns out, qemu is correct and in our assembly code in entry.S and
    pacache.S we don't pay attention to the required alignment.
    
    This patch fixes the problem by aligning the lock offset in assembly
    code in the same manner as we do in our C-code.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3db597feef0804f4b76f9425ded53d628f58bd32
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Thu Nov 30 16:46:40 2017 -0600

    x86/microcode/AMD: Add support for fam17h microcode loading
    
    commit f4e9b7af0cd58dd039a0fb2cd67d57cea4889abf upstream.
    
    The size for the Microcode Patch Block (MPB) for an AMD family 17h
    processor is 3200 bytes.  Add a #define for fam17h so that it does
    not default to 2048 bytes and fail a microcode load/update.
    
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Borislav Petkov <bp@alien8.de>
    Link: https://lkml.kernel.org/r/20171130224640.15391.40247.stgit@tlendack-t1.amdoffice.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Alice Ferrazzi <alicef@gentoo.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a99730ae0cce274030f916a24567ca1b7b05a0c
Author: Aaron Ma <aaron.ma@canonical.com>
Date:   Sat Nov 25 16:48:41 2017 -0800

    Input: elantech - add new icbody type 15
    
    commit 10d900303f1c3a821eb0bef4e7b7ece16768fba4 upstream.
    
    The touchpad of Lenovo Thinkpad L480 reports it's version as 15.
    
    Signed-off-by: Aaron Ma <aaron.ma@canonical.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30ce9c8dbc42c220f0562f687dbbbcec2f2a9c11
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Dec 8 08:26:58 2017 -0800

    ARC: uaccess: dont use "l" gcc inline asm constraint modifier
    
    commit 79435ac78d160e4c245544d457850a56f805ac0d upstream.
    
    This used to setup the LP_COUNT register automatically, but now has been
    removed.
    
    There was an earlier fix 3c7c7a2fc8811 which fixed instance in delay.h but
    somehow missed this one as gcc change had not made its way into
    production toolchains and was not pedantic as it is now !
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f1aa83c58aaeb36a2a69256a87c86a44edbd425
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Fri Nov 17 15:30:08 2017 -0800

    kernel/signal.c: remove the no longer needed SIGNAL_UNKILLABLE check in complete_signal()
    
    commit 426915796ccaf9c2bd9bb06dc5702225957bc2e5 upstream.
    
    complete_signal() checks SIGNAL_UNKILLABLE before it starts to destroy
    the thread group, today this is wrong in many ways.
    
    If nothing else, fatal_signal_pending() should always imply that the
    whole thread group (except ->group_exit_task if it is not NULL) is
    killed, this check breaks the rule.
    
    After the previous changes we can rely on sig_task_ignored();
    sig_fatal(sig) && SIGNAL_UNKILLABLE can only be true if we actually want
    to kill this task and sig == SIGKILL OR it is traced and debugger can
    intercept the signal.
    
    This should hopefully fix the problem reported by Dmitry.  This
    test-case
    
            static int init(void *arg)
            {
                    for (;;)
                            pause();
            }
    
            int main(void)
            {
                    char stack[16 * 1024];
    
                    for (;;) {
                            int pid = clone(init, stack + sizeof(stack)/2,
                                            CLONE_NEWPID | SIGCHLD, NULL);
                            assert(pid > 0);
    
                            assert(ptrace(PTRACE_ATTACH, pid, 0, 0) == 0);
                            assert(waitpid(-1, NULL, WSTOPPED) == pid);
    
                            assert(ptrace(PTRACE_DETACH, pid, 0, SIGSTOP) == 0);
                            assert(syscall(__NR_tkill, pid, SIGKILL) == 0);
                            assert(pid == wait(NULL));
                    }
            }
    
    triggers the WARN_ON_ONCE(!(task->jobctl & JOBCTL_STOP_PENDING)) in
    task_participate_group_stop().  do_signal_stop()->signal_group_exit()
    checks SIGNAL_GROUP_EXIT and return false, but task_set_jobctl_pending()
    checks fatal_signal_pending() and does not set JOBCTL_STOP_PENDING.
    
    And his should fix the minor security problem reported by Kyle,
    SECCOMP_RET_TRACE can miss fatal_signal_pending() the same way if the
    task is the root of a pid namespace.
    
    Link: http://lkml.kernel.org/r/20171103184246.GD21036@redhat.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: Kyle Huey <me@kylehuey.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Kyle Huey <me@kylehuey.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a7f54f8e390a696d147686fb2188d3ba93f6096
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Fri Nov 17 15:30:04 2017 -0800

    kernel/signal.c: protect the SIGNAL_UNKILLABLE tasks from !sig_kernel_only() signals
    
    commit ac25385089f673560867eb5179228a44ade0cfc1 upstream.
    
    Change sig_task_ignored() to drop the SIG_DFL && !sig_kernel_only()
    signals even if force == T.  This simplifies the next change and this
    matches the same check in get_signal() which will drop these signals
    anyway.
    
    Link: http://lkml.kernel.org/r/20171103184227.GC21036@redhat.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Tested-by: Kyle Huey <me@kylehuey.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be95f1308f794861877af032bbb5b6ea48ca66a5
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Fri Nov 17 15:30:01 2017 -0800

    kernel/signal.c: protect the traced SIGNAL_UNKILLABLE tasks from SIGKILL
    
    commit 628c1bcba204052d19b686b5bac149a644cdb72e upstream.
    
    The comment in sig_ignored() says "Tracers may want to know about even
    ignored signals" but SIGKILL can not be reported to debugger and it is
    just wrong to return 0 in this case: SIGKILL should only kill the
    SIGNAL_UNKILLABLE task if it comes from the parent ns.
    
    Change sig_ignored() to ignore ->ptrace if sig == SIGKILL and rely on
    sig_task_ignored().
    
    SISGTOP coming from within the namespace is not really right too but at
    least debugger can intercept it, and we can't drop it here because this
    will break "gdb -p 1": ptrace_attach() won't work.  Perhaps we will add
    another ->ptrace check later, we will see.
    
    Link: http://lkml.kernel.org/r/20171103184206.GB21036@redhat.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Tested-by: Kyle Huey <me@kylehuey.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58330ec2fecd1c3a6b8759b292f32f82dfd058ba
Author: Thiago Rafael Becker <thiago.becker@gmail.com>
Date:   Thu Dec 14 15:33:12 2017 -0800

    kernel: make groups_sort calling a responsibility group_info allocators
    
    commit bdcf0a423ea1c40bbb40e7ee483b50fc8aa3d758 upstream.
    
    In testing, we found that nfsd threads may call set_groups in parallel
    for the same entry cached in auth.unix.gid, racing in the call of
    groups_sort, corrupting the groups for that entry and leading to
    permission denials for the client.
    
    This patch:
     - Make groups_sort globally visible.
     - Move the call to groups_sort to the modifiers of group_info
     - Remove the call to groups_sort from set_groups
    
    Link: http://lkml.kernel.org/r/20171211151420.18655-1-thiago.becker@gmail.com
    Signed-off-by: Thiago Rafael Becker <thiago.becker@gmail.com>
    Reviewed-by: Matthew Wilcox <mawilcox@microsoft.com>
    Reviewed-by: NeilBrown <neilb@suse.com>
    Acked-by: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1698dc8a590119014dd2f893b7cefa3b301739e
Author: David Howells <dhowells@redhat.com>
Date:   Tue Jan 2 10:02:19 2018 +0000

    fscache: Fix the default for fscache_maybe_release_page()
    
    commit 98801506552593c9b8ac11021b0cdad12cab4f6b upstream.
    
    Fix the default for fscache_maybe_release_page() for when the cookie isn't
    valid or the page isn't cached.  It mustn't return false as that indicates
    the page cannot yet be freed.
    
    The problem with the default is that if, say, there's no cache, but a
    network filesystem's pages are using up almost all the available memory, a
    system can OOM because the filesystem ->releasepage() op will not allow
    them to be released as fscache_maybe_release_page() incorrectly prevents
    it.
    
    This can be tested by writing a sequence of 512MiB files to an AFS mount.
    It does not affect NFS or CIFS because both of those wrap the call in a
    check of PG_fscache and it shouldn't bother Ceph as that only has
    PG_private set whilst writeback is in progress.  This might be an issue for
    9P, however.
    
    Note that the pages aren't entirely stuck.  Removing a file or unmounting
    will clear things because that uses ->invalidatepage() instead.
    
    Fixes: 201a15428bd5 ("FS-Cache: Handle pages pending storage that get evicted under OOM conditions")
    Reported-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Tested-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cbb4a2305f85270c416a8a95478c07c3edc2beb
Author: Stefan Brüns <stefan.bruens@rwth-aachen.de>
Date:   Mon Nov 27 20:05:34 2017 +0100

    sunxi-rsb: Include OF based modalias in device uevent
    
    commit e2bf801ecd4e62222a46d1ba9e57e710171d29c1 upstream.
    
    Include the OF-based modalias in the uevent sent when registering devices
    on the sunxi RSB bus, so that user space has a chance to autoload the
    kernel module for the device.
    
    Fixes a regression caused by commit 3f241bfa60bd ("arm64: allwinner: a64:
    pine64: Use dcdc1 regulator for mmc0"). When the axp20x-rsb module for
    the AXP803 PMIC is built as a module, it is not loaded and the system
    ends up with an disfunctional MMC controller.
    
    Fixes: d787dcdb9c8f ("bus: sunxi-rsb: Add driver for Allwinner Reduced Serial Bus")
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Stefan Brüns <stefan.bruens@rwth-aachen.de>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ad85176e78d6671ede52eed588c3588d087b587
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Dec 20 14:28:25 2017 -0800

    crypto: pcrypt - fix freeing pcrypt instances
    
    commit d76c68109f37cb85b243a1cf0f40313afd2bae68 upstream.
    
    pcrypt is using the old way of freeing instances, where the ->free()
    method specified in the 'struct crypto_template' is passed a pointer to
    the 'struct crypto_instance'.  But the crypto_instance is being
    kfree()'d directly, which is incorrect because the memory was actually
    allocated as an aead_instance, which contains the crypto_instance at a
    nonzero offset.  Thus, the wrong pointer was being kfree()'d.
    
    Fix it by switching to the new way to free aead_instance's where the
    ->free() method is specified in the aead_instance itself.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Fixes: 0496f56065e0 ("crypto: pcrypt - Add support for new AEAD interface")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 869994e0bd2911ed07169e11362c479e4c98fd78
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Dec 11 12:15:17 2017 -0800

    crypto: chacha20poly1305 - validate the digest size
    
    commit e57121d08c38dabec15cf3e1e2ad46721af30cae upstream.
    
    If the rfc7539 template was instantiated with a hash algorithm with
    digest size larger than 16 bytes (POLY1305_DIGEST_SIZE), then the digest
    overran the 'tag' buffer in 'struct chachapoly_req_ctx', corrupting the
    subsequent memory, including 'cryptlen'.  This caused a crash during
    crypto_skcipher_decrypt().
    
    Fix it by, when instantiating the template, requiring that the
    underlying hash algorithm has the digest size expected for Poly1305.
    
    Reproducer:
    
        #include <linux/if_alg.h>
        #include <sys/socket.h>
        #include <unistd.h>
    
        int main()
        {
                int algfd, reqfd;
                struct sockaddr_alg addr = {
                        .salg_type = "aead",
                        .salg_name = "rfc7539(chacha20,sha256)",
                };
                unsigned char buf[32] = { 0 };
    
                algfd = socket(AF_ALG, SOCK_SEQPACKET, 0);
                bind(algfd, (void *)&addr, sizeof(addr));
                setsockopt(algfd, SOL_ALG, ALG_SET_KEY, buf, sizeof(buf));
                reqfd = accept(algfd, 0, 0);
                write(reqfd, buf, 16);
                read(reqfd, buf, 16);
        }
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Fixes: 71ebc4d1b27d ("crypto: chacha20poly1305 - Add a ChaCha20-Poly1305 AEAD construction, RFC7539")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b72e17dde6e2468dfed6ce2a558bc2fc806cd2f
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Tue Dec 19 19:09:07 2017 +0100

    crypto: n2 - cure use after free
    
    commit 203f45003a3d03eea8fa28d74cfc74c354416fdb upstream.
    
    queue_cache_init is first called for the Control Word Queue
    (n2_crypto_probe). At that time, queue_cache[0] is NULL and a new
    kmem_cache will be allocated. If the subsequent n2_register_algs call
    fails, the kmem_cache will be released in queue_cache_destroy, but
    queue_cache_init[0] is not set back to NULL.
    
    So when the Module Arithmetic Unit gets probed next (n2_mau_probe),
    queue_cache_init will not allocate a kmem_cache again, but leave it
    as its bogus value, causing a BUG() to trigger when queue_cache[0] is
    eventually passed to kmem_cache_zalloc:
    
            n2_crypto: Found N2CP at /virtual-devices@100/n2cp@7
            n2_crypto: Registered NCS HVAPI version 2.0
            called queue_cache_init
            n2_crypto: md5 alg registration failed
            n2cp f028687c: /virtual-devices@100/n2cp@7: Unable to register algorithms.
            called queue_cache_destroy
            n2cp: probe of f028687c failed with error -22
            n2_crypto: Found NCP at /virtual-devices@100/ncp@6
            n2_crypto: Registered NCS HVAPI version 2.0
            called queue_cache_init
            kernel BUG at mm/slab.c:2993!
            Call Trace:
             [0000000000604488] kmem_cache_alloc+0x1a8/0x1e0
                      (inlined) kmem_cache_zalloc
                      (inlined) new_queue
                      (inlined) spu_queue_setup
                      (inlined) handle_exec_unit
             [0000000010c61eb4] spu_mdesc_scan+0x1f4/0x460 [n2_crypto]
             [0000000010c62b80] n2_mau_probe+0x100/0x220 [n2_crypto]
             [000000000084b174] platform_drv_probe+0x34/0xc0
    
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83875f5825968bcab2dfd9f4531f1eb7e7eef05f
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Thu Jan 4 16:17:49 2018 -0800

    kernel/acct.c: fix the acct->needcheck check in check_free_space()
    
    commit 4d9570158b6260f449e317a5f9ed030c2504a615 upstream.
    
    As Tsukada explains, the time_is_before_jiffies(acct->needcheck) check
    is very wrong, we need time_is_after_jiffies() to make sys_acct() work.
    
    Ignoring the overflows, the code should "goto out" if needcheck >
    jiffies, while currently it checks "needcheck < jiffies" and thus in the
    likely case check_free_space() does nothing until jiffies overflow.
    
    In particular this means that sys_acct() is simply broken, acct_on()
    sets acct->needcheck = jiffies and expects that check_free_space()
    should set acct->active = 1 after the free-space check, but this won't
    happen if jiffies increments in between.
    
    This was broken by commit 32dc73086015 ("get rid of timer in
    kern/acct.c") in 2011, then another (correct) commit 795a2f22a8ea
    ("acct() should honour the limits from the very beginning") made the
    problem more visible.
    
    Link: http://lkml.kernel.org/r/20171213133940.GA6554@redhat.com
    Fixes: 32dc73086015 ("get rid of timer in kern/acct.c")
    Reported-by: TSUKADA Koutaro <tsukada@ascade.co.jp>
    Suggested-by: TSUKADA Koutaro <tsukada@ascade.co.jp>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b17b901f0fea8e4b39711841d095f50d41bb081e
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Mon Jan 11 15:51:19 2016 +0300

    x86/kasan: Write protect kasan zero shadow
    
    commit 063fb3e56f6dd29b2633b678b837e1d904200e6f upstream.
    
    After kasan_init() executed, no one is allowed to write to kasan_zero_page,
    so write protect it.
    
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Toshi Kani <toshi.kani@hp.com>
    Cc: linux-mm@kvack.org
    Link: http://lkml.kernel.org/r/1452516679-32040-3-git-send-email-aryabinin@virtuozzo.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
