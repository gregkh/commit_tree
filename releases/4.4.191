commit efbc4a364bd5469a616668127439e7cfca4c1d7b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Sep 6 10:18:17 2019 +0200

    Linux 4.4.191

commit 61263fbe574b0b74c50552983bdcc2bb9a409b1e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Sep 4 12:27:18 2019 +0200

    x86/ptrace: fix up botched merge of spectrev1 fix
    
    I incorrectly merged commit 31a2fbb390fe ("x86/ptrace: Fix possible
    spectre-v1 in ptrace_get_debugreg()") when backporting it, as was
    graciously pointed out at
    https://grsecurity.net/teardown_of_a_failed_linux_lts_spectre_fix.php
    
    Resolve the upstream difference with the stable kernel merge to properly
    protect things.
    
    Reported-by: Brad Spengler <spender@grsecurity.net>
    Cc: Dianzhang Chen <dianzhangchen0@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: <bp@alien8.de>
    Cc: <hpa@zytor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c0932cd8197d290195dc281ff6534e13d9d97e8
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Aug 1 09:30:33 2019 +0200

    mac80211: fix possible sta leak
    
    commit 5fd2f91ad483baffdbe798f8a08f1b41442d1e24 upstream.
    
    If TDLS station addition is rejected, the sta memory is leaked.
    Avoid this by moving the check before the allocation.
    
    Cc: stable@vger.kernel.org
    Fixes: 7ed5285396c2 ("mac80211: don't initiate TDLS connection if station is not associated to AP")
    Link: https://lore.kernel.org/r/20190801073033.7892-1-johannes@sipsolutions.net
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3161dea144dde71e8d8dd1cd8b736b6e431b7ee7
Author: Hodaszi, Robert <Robert.Hodaszi@digi.com>
Date:   Fri Jun 14 13:16:01 2019 +0000

    Revert "cfg80211: fix processing world regdomain when non modular"
    
    commit 0d31d4dbf38412f5b8b11b4511d07b840eebe8cb upstream.
    
    This reverts commit 96cce12ff6e0 ("cfg80211: fix processing world
    regdomain when non modular").
    
    Re-triggering a reg_process_hint with the last request on all events,
    can make the regulatory domain fail in case of multiple WiFi modules. On
    slower boards (espacially with mdev), enumeration of the WiFi modules
    can end up in an intersected regulatory domain, and user cannot set it
    with 'iw reg set' anymore.
    
    This is happening, because:
    - 1st module enumerates, queues up a regulatory request
    - request gets processed by __reg_process_hint_driver():
      - checks if previous was set by CORE -> yes
        - checks if regulator domain changed -> yes, from '00' to e.g. 'US'
          -> sends request to the 'crda'
    - 2nd module enumerates, queues up a regulator request (which triggers
      the reg_todo() work)
    - reg_todo() -> reg_process_pending_hints() sees, that the last request
      is not processed yet, so it tries to process it again.
      __reg_process_hint driver() will run again, and:
      - checks if the last request's initiator was the core -> no, it was
        the driver (1st WiFi module)
      - checks, if the previous initiator was the driver -> yes
        - checks if the regulator domain changed -> yes, it was '00' (set by
          core, and crda call did not return yet), and should be changed to 'US'
    
    ------> __reg_process_hint_driver calls an intersect
    
    Besides, the reg_process_hint call with the last request is meaningless
    since the crda call has a timeout work. If that timeout expires, the
    first module's request will lost.
    
    Cc: stable@vger.kernel.org
    Fixes: 96cce12ff6e0 ("cfg80211: fix processing world regdomain when non modular")
    Signed-off-by: Robert Hodaszi <robert.hodaszi@digi.com>
    Link: https://lore.kernel.org/r/20190614131600.GA13897@a1-hr
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16ab568881f8d2bc2e3b66dab55ab6ea72d9849b
Author: Nadav Amit <namit@vmware.com>
Date:   Tue Aug 20 13:26:38 2019 -0700

    VMCI: Release resource if the work is already queued
    
    commit ba03a9bbd17b149c373c0ea44017f35fc2cd0f28 upstream.
    
    Francois reported that VMware balloon gets stuck after a balloon reset,
    when the VMCI doorbell is removed. A similar error can occur when the
    balloon driver is removed with the following splat:
    
    [ 1088.622000] INFO: task modprobe:3565 blocked for more than 120 seconds.
    [ 1088.622035]       Tainted: G        W         5.2.0 #4
    [ 1088.622087] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [ 1088.622205] modprobe        D    0  3565   1450 0x00000000
    [ 1088.622210] Call Trace:
    [ 1088.622246]  __schedule+0x2a8/0x690
    [ 1088.622248]  schedule+0x2d/0x90
    [ 1088.622250]  schedule_timeout+0x1d3/0x2f0
    [ 1088.622252]  wait_for_completion+0xba/0x140
    [ 1088.622320]  ? wake_up_q+0x80/0x80
    [ 1088.622370]  vmci_resource_remove+0xb9/0xc0 [vmw_vmci]
    [ 1088.622373]  vmci_doorbell_destroy+0x9e/0xd0 [vmw_vmci]
    [ 1088.622379]  vmballoon_vmci_cleanup+0x6e/0xf0 [vmw_balloon]
    [ 1088.622381]  vmballoon_exit+0x18/0xcc8 [vmw_balloon]
    [ 1088.622394]  __x64_sys_delete_module+0x146/0x280
    [ 1088.622408]  do_syscall_64+0x5a/0x130
    [ 1088.622410]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [ 1088.622415] RIP: 0033:0x7f54f62791b7
    [ 1088.622421] Code: Bad RIP value.
    [ 1088.622421] RSP: 002b:00007fff2a949008 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [ 1088.622426] RAX: ffffffffffffffda RBX: 000055dff8b55d00 RCX: 00007f54f62791b7
    [ 1088.622426] RDX: 0000000000000000 RSI: 0000000000000800 RDI: 000055dff8b55d68
    [ 1088.622427] RBP: 000055dff8b55d00 R08: 00007fff2a947fb1 R09: 0000000000000000
    [ 1088.622427] R10: 00007f54f62f5cc0 R11: 0000000000000206 R12: 000055dff8b55d68
    [ 1088.622428] R13: 0000000000000001 R14: 000055dff8b55d68 R15: 00007fff2a94a3f0
    
    The cause for the bug is that when the "delayed" doorbell is invoked, it
    takes a reference on the doorbell entry and schedules work that is
    supposed to run the appropriate code and drop the doorbell entry
    reference. The code ignores the fact that if the work is already queued,
    it will not be scheduled to run one more time. As a result one of the
    references would not be dropped. When the code waits for the reference
    to get to zero, during balloon reset or module removal, it gets stuck.
    
    Fix it. Drop the reference if schedule_work() indicates that the work is
    already queued.
    
    Note that this bug got more apparent (or apparent at all) due to
    commit ce664331b248 ("vmw_balloon: VMCI_DOORBELL_SET does not check status").
    
    Fixes: 83e2ec765be03 ("VMCI: doorbell implementation.")
    Reported-by: Francois Rigault <rigault.francois@gmail.com>
    Cc: Jorgen Hansen <jhansen@vmware.com>
    Cc: Adit Ranadive <aditr@vmware.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Vishnu DASA <vdasa@vmware.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Link: https://lore.kernel.org/r/20190820202638.49003-1-namit@vmware.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c25b7d78f0e871b10a38a0da9dbc9c538217bef9
Author: Ding Xiang <dingxiang@cmss.chinamobile.com>
Date:   Wed Aug 21 10:49:52 2019 +0300

    stm class: Fix a double free of stm_source_device
    
    commit 961b6ffe0e2c403b09a8efe4a2e986b3c415391a upstream.
    
    In the error path of stm_source_register_device(), the kfree is
    unnecessary, as the put_device() before it ends up calling
    stm_source_device_release() to free stm_source_device, leading to
    a double free at the outer kfree() call. Remove it.
    
    Signed-off-by: Ding Xiang <dingxiang@cmss.chinamobile.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 7bd1d4093c2fa ("stm class: Introduce an abstraction for System Trace Module devices")
    Link: https://lore.kernel.org/linux-arm-kernel/1563354988-23826-1-git-send-email-dingxiang@cmss.chinamobile.com/
    Cc: stable@vger.kernel.org # v4.4+
    Link: https://lore.kernel.org/r/20190821074955.3925-2-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2f1509fca476d763d94eb0026b28c22ab110688
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Aug 27 10:10:43 2019 +0200

    mmc: core: Fix init of SD cards reporting an invalid VDD range
    
    commit 72741084d903e65e121c27bd29494d941729d4a1 upstream.
    
    The OCR register defines the supported range of VDD voltages for SD cards.
    However, it has turned out that some SD cards reports an invalid voltage
    range, for example having bit7 set.
    
    When a host supports MMC_CAP2_FULL_PWR_CYCLE and some of the voltages from
    the invalid VDD range, this triggers the core to run a power cycle of the
    card to try to initialize it at the lowest common supported voltage.
    Obviously this fails, since the card can't support it.
    
    Let's fix this problem, by clearing invalid bits from the read OCR register
    for SD cards, before proceeding with the VDD voltage negotiation.
    
    Cc: stable@vger.kernel.org
    Reported-by: Philip Langdale <philipl@overt.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Philip Langdale <philipl@overt.org>
    Tested-by: Philip Langdale <philipl@overt.org>
    Tested-by: Manuel Presnitz <mail@mpy.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12a897daa78b640bcdfd6422bf2d697c442549e1
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Thu Aug 8 08:35:40 2019 +0000

    mmc: sdhci-of-at91: add quirk for broken HS200
    
    commit 7871aa60ae0086fe4626abdf5ed13eeddf306c61 upstream.
    
    HS200 is not implemented in the driver, but the controller claims it
    through caps. Remove it via a quirk, to make sure the mmc core do not try
    to enable HS200, as it causes the eMMC initialization to fail.
    
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: bb5f8ea4d514 ("mmc: sdhci-of-at91: introduce driver for the Atmel SDMMC")
    Cc: stable@vger.kernel.org # v4.4+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d1a41682781c2a268160d15eb8adf63024c4e70
Author: Sebastian Mayr <me@sam.st>
Date:   Sun Jul 28 17:26:17 2019 +0200

    uprobes/x86: Fix detection of 32-bit user mode
    
    [ Upstream commit 9212ec7d8357ea630031e89d0d399c761421c83b ]
    
    32-bit processes running on a 64-bit kernel are not always detected
    correctly, causing the process to crash when uretprobes are installed.
    
    The reason for the crash is that in_ia32_syscall() is used to determine the
    process's mode, which only works correctly when called from a syscall.
    
    In the case of uretprobes, however, the function is called from a exception
    and always returns 'false' on a 64-bit kernel. In consequence this leads to
    corruption of the process's return address.
    
    Fix this by using user_64bit_mode() instead of in_ia32_syscall(), which
    is correct in any situation.
    
    [ tglx: Add a comment and the following historical info ]
    
    This should have been detected by the rename which happened in commit
    
      abfb9498ee13 ("x86/entry: Rename is_{ia32,x32}_task() to in_{ia32,x32}_syscall()")
    
    which states in the changelog:
    
        The is_ia32_task()/is_x32_task() function names are a big misnomer: they
        suggests that the compat-ness of a system call is a task property, which
        is not true, the compatness of a system call purely depends on how it
        was invoked through the system call layer.
        .....
    
    and then it went and blindly renamed every call site.
    
    Sadly enough this was already mentioned here:
    
       8faaed1b9f50 ("uprobes/x86: Introduce sizeof_long(), cleanup adjust_ret_addr() and
    arch_uretprobe_hijack_return_addr()")
    
    where the changelog says:
    
        TODO: is_ia32_task() is not what we actually want, TS_COMPAT does
        not necessarily mean 32bit. Fortunately syscall-like insns can't be
        probed so it actually works, but it would be better to rename and
        use is_ia32_frame().
    
    and goes all the way back to:
    
        0326f5a94dde ("uprobes/core: Handle breakpoint and singlestep exceptions")
    
    Oh well. 7+ years until someone actually tried a uretprobe on a 32bit
    process on a 64bit kernel....
    
    Fixes: 0326f5a94dde ("uprobes/core: Handle breakpoint and singlestep exceptions")
    Signed-off-by: Sebastian Mayr <me@sam.st>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Dmitry Safonov <dsafonov@virtuozzo.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190728152617.7308-1-me@sam.st
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6029fe64cefa148900b58596e5335ac70ffb570
Author: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date:   Fri Oct 27 13:25:30 2017 -0700

    ptrace,x86: Make user_64bit_mode() available to 32-bit builds
    
    [ Upstream commit e27c310af5c05cf876d9cad006928076c27f54d4 ]
    
    In its current form, user_64bit_mode() can only be used when CONFIG_X86_64
    is selected. This implies that code built with CONFIG_X86_64=n cannot use
    it. If a piece of code needs to be built for both CONFIG_X86_64=y and
    CONFIG_X86_64=n and wants to use this function, it needs to wrap it in
    an #ifdef/#endif; potentially, in multiple places.
    
    This can be easily avoided with a single #ifdef/#endif pair within
    user_64bit_mode() itself.
    
    Suggested-by: Borislav Petkov <bp@suse.de>
    Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: ricardo.neri@intel.com
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Huang Rui <ray.huang@amd.com>
    Cc: Qiaowei Ren <qiaowei.ren@intel.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: "Ravi V. Shankar" <ravi.v.shankar@intel.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Colin Ian King <colin.king@canonical.com>
    Cc: Chen Yucong <slaoub@gmail.com>
    Cc: Adam Buchbinder <adam.buchbinder@gmail.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Lorenzo Stoakes <lstoakes@gmail.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Thomas Garnier <thgarnie@google.com>
    Link: https://lkml.kernel.org/r/1509135945-13762-4-git-send-email-ricardo.neri-calderon@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4761474088761cd0705a80943dfafa0f723696d1
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Aug 28 01:34:50 2019 +0800

    USB: storage: ums-realtek: Whitelist auto-delink support
    
    commit 1902a01e2bcc3abd7c9a18dc05e78c7ab4a53c54 upstream.
    
    Auto-delink requires writing special registers to ums-realtek devices.
    Unconditionally enable auto-delink may break newer devices.
    
    So only enable auto-delink by default for the original three IDs,
    0x0138, 0x0158 and 0x0159.
    
    Realtek is working on a patch to properly support auto-delink for other
    IDs.
    
    BugLink: https://bugs.launchpad.net/bugs/1838886
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190827173450.13572-2-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00087c6e434e8705d97ef8c0f796b573894e981b
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Aug 28 01:34:49 2019 +0800

    USB: storage: ums-realtek: Update module parameter description for auto_delink_en
    
    commit f6445b6b2f2bb1745080af4a0926049e8bca2617 upstream.
    
    The option named "auto_delink_en" is a bit misleading, as setting it to
    false doesn't really disable auto-delink but let auto-delink be firmware
    controlled.
    
    Update the description to reflect the real usage of this parameter.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190827173450.13572-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb1ff5020b3e55f88be1f506042b003d9478cbfd
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Aug 27 12:51:50 2019 +0900

    usb: host: ohci: fix a race condition between shutdown and irq
    
    commit a349b95d7ca0cea71be4a7dac29830703de7eb62 upstream.
    
    This patch fixes an issue that the following error is
    possible to happen when ohci hardware causes an interruption
    and the system is shutting down at the same time.
    
    [   34.851754] usb 2-1: USB disconnect, device number 2
    [   35.166658] irq 156: nobody cared (try booting with the "irqpoll" option)
    [   35.173445] CPU: 0 PID: 22 Comm: kworker/0:1 Not tainted 5.3.0-rc5 #85
    [   35.179964] Hardware name: Renesas Salvator-X 2nd version board based on r8a77965 (DT)
    [   35.187886] Workqueue: usb_hub_wq hub_event
    [   35.192063] Call trace:
    [   35.194509]  dump_backtrace+0x0/0x150
    [   35.198165]  show_stack+0x14/0x20
    [   35.201475]  dump_stack+0xa0/0xc4
    [   35.204785]  __report_bad_irq+0x34/0xe8
    [   35.208614]  note_interrupt+0x2cc/0x318
    [   35.212446]  handle_irq_event_percpu+0x5c/0x88
    [   35.216883]  handle_irq_event+0x48/0x78
    [   35.220712]  handle_fasteoi_irq+0xb4/0x188
    [   35.224802]  generic_handle_irq+0x24/0x38
    [   35.228804]  __handle_domain_irq+0x5c/0xb0
    [   35.232893]  gic_handle_irq+0x58/0xa8
    [   35.236548]  el1_irq+0xb8/0x180
    [   35.239681]  __do_softirq+0x94/0x23c
    [   35.243253]  irq_exit+0xd0/0xd8
    [   35.246387]  __handle_domain_irq+0x60/0xb0
    [   35.250475]  gic_handle_irq+0x58/0xa8
    [   35.254130]  el1_irq+0xb8/0x180
    [   35.257268]  kernfs_find_ns+0x5c/0x120
    [   35.261010]  kernfs_find_and_get_ns+0x3c/0x60
    [   35.265361]  sysfs_unmerge_group+0x20/0x68
    [   35.269454]  dpm_sysfs_remove+0x2c/0x68
    [   35.273284]  device_del+0x80/0x370
    [   35.276683]  hid_destroy_device+0x28/0x60
    [   35.280686]  usbhid_disconnect+0x4c/0x80
    [   35.284602]  usb_unbind_interface+0x6c/0x268
    [   35.288867]  device_release_driver_internal+0xe4/0x1b0
    [   35.293998]  device_release_driver+0x14/0x20
    [   35.298261]  bus_remove_device+0x110/0x128
    [   35.302350]  device_del+0x148/0x370
    [   35.305832]  usb_disable_device+0x8c/0x1d0
    [   35.309921]  usb_disconnect+0xc8/0x2d0
    [   35.313663]  hub_event+0x6e0/0x1128
    [   35.317146]  process_one_work+0x1e0/0x320
    [   35.321148]  worker_thread+0x40/0x450
    [   35.324805]  kthread+0x124/0x128
    [   35.328027]  ret_from_fork+0x10/0x18
    [   35.331594] handlers:
    [   35.333862] [<0000000079300c1d>] usb_hcd_irq
    [   35.338126] [<0000000079300c1d>] usb_hcd_irq
    [   35.342389] Disabling IRQ #156
    
    ohci_shutdown() disables all the interrupt and rh_state is set to
    OHCI_RH_HALTED. In other hand, ohci_irq() is possible to enable
    OHCI_INTR_SF and OHCI_INTR_MIE on ohci_irq(). Note that OHCI_INTR_SF
    is possible to be set by start_ed_unlink() which is called:
     ohci_irq()
      -> process_done_list()
       -> takeback_td()
        -> start_ed_unlink()
    
    So, ohci_irq() has the following condition, the issue happens by
    &ohci->regs->intrenable = OHCI_INTR_MIE | OHCI_INTR_SF and
    ohci->rh_state = OHCI_RH_HALTED:
    
            /* interrupt for some other device? */
            if (ints == 0 || unlikely(ohci->rh_state == OHCI_RH_HALTED))
                    return IRQ_NOTMINE;
    
    To fix the issue, ohci_shutdown() holds the spin lock while disabling
    the interruption and changing the rh_state flag to prevent reenable
    the OHCI_INTR_MIE unexpectedly. Note that io_watchdog_func() also
    calls the ohci_shutdown() and it already held the spin lock, so that
    the patch makes a new function as _ohci_shutdown().
    
    This patch is inspired by a Renesas R-Car Gen3 BSP patch
    from Tho Vu.
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/1566877910-6020-1-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d743d816acea90068b76cf2294f2e3b88bdaa41
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Aug 27 12:34:36 2019 +0200

    USB: cdc-wdm: fix race between write and disconnect due to flag abuse
    
    commit 1426bd2c9f7e3126e2678e7469dca9fd9fc6dd3e upstream.
    
    In case of a disconnect an ongoing flush() has to be made fail.
    Nevertheless we cannot be sure that any pending URB has already
    finished, so although they will never succeed, they still must
    not be touched.
    The clean solution for this is to check for WDM_IN_USE
    and WDM_DISCONNECTED in flush(). There is no point in ever
    clearing WDM_IN_USE, as no further writes make sense.
    
    The issue is as old as the driver.
    
    Fixes: afba937e540c9 ("USB: CDC WDM driver")
    Reported-by: syzbot+d232cca6ec42c2edb3fc@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190827103436.21143-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f575b509cce81910666bdb0f4958cd01ab6d265
Author: Henk van der Laan <opensource@henkvdlaan.com>
Date:   Fri Aug 16 22:08:47 2019 +0200

    usb-storage: Add new JMS567 revision to unusual_devs
    
    commit 08d676d1685c2a29e4d0e1b0242324e564d4589e upstream.
    
    Revision 0x0117 suffers from an identical issue to earlier revisions,
    therefore it should be added to the quirks list.
    
    Signed-off-by: Henk van der Laan <opensource@henkvdlaan.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190816200847.21366-1-opensource@henkvdlaan.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bd0d83e2d5a5cc6e40e2d24020bfedb63b81995
Author: Bandan Das <bsd@redhat.com>
Date:   Mon Aug 26 06:15:13 2019 -0400

    x86/apic: Include the LDR when clearing out APIC registers
    
    commit 558682b5291937a70748d36fd9ba757fb25b99ae upstream.
    
    Although APIC initialization will typically clear out the LDR before
    setting it, the APIC cleanup code should reset the LDR.
    
    This was discovered with a 32-bit KVM guest jumping into a kdump
    kernel. The stale bits in the LDR triggered a bug in the KVM APIC
    implementation which caused the destination mapping for VCPUs to be
    corrupted.
    
    Note that this isn't intended to paper over the KVM APIC bug. The kernel
    has to clear the LDR when resetting the APIC registers except when X2APIC
    is enabled.
    
    This lacks a Fixes tag because missing to clear LDR goes way back into pre
    git history.
    
    [ tglx: Made x2apic_enabled a function call as required ]
    
    Signed-off-by: Bandan Das <bsd@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190826101513.5080-3-bsd@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26285030611e4b410c1e30afc2c9d1601fa7a128
Author: Bandan Das <bsd@redhat.com>
Date:   Mon Aug 26 06:15:12 2019 -0400

    x86/apic: Do not initialize LDR and DFR for bigsmp
    
    commit bae3a8d3308ee69a7dbdf145911b18dfda8ade0d upstream.
    
    Legacy apic init uses bigsmp for smp systems with 8 and more CPUs. The
    bigsmp APIC implementation uses physical destination mode, but it
    nevertheless initializes LDR and DFR. The LDR even ends up incorrectly with
    multiple bit being set.
    
    This does not cause a functional problem because LDR and DFR are ignored
    when physical destination mode is active, but it triggered a problem on a
    32-bit KVM guest which jumps into a kdump kernel.
    
    The multiple bits set unearthed a bug in the KVM APIC implementation. The
    code which creates the logical destination map for VCPUs ignores the
    disabled state of the APIC and ends up overwriting an existing valid entry
    and as a result, APIC calibration hangs in the guest during kdump
    initialization.
    
    Remove the bogus LDR/DFR initialization.
    
    This is not intended to work around the KVM APIC bug. The LDR/DFR
    ininitalization is wrong on its own.
    
    The issue goes back into the pre git history. The fixes tag is the commit
    in the bitkeeper import which introduced bigsmp support in 2003.
    
      git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
    
    Fixes: db7b9e9f26b8 ("[PATCH] Clustered APIC setup for >8 CPU systems")
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Bandan Das <bsd@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190826101513.5080-2-bsd@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fff074fc4aecfb437bfa8bb690b7847a7d7a4d2
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Aug 23 13:55:44 2019 -0700

    KVM: x86: Don't update RIP or do single-step on faulting emulation
    
    commit 75ee23b30dc712d80d2421a9a547e7ab6e379b44 upstream.
    
    Don't advance RIP or inject a single-step #DB if emulation signals a
    fault.  This logic applies to all state updates that are conditional on
    clean retirement of the emulation instruction, e.g. updating RFLAGS was
    previously handled by commit 38827dbd3fb85 ("KVM: x86: Do not update
    EFLAGS on faulting emulation").
    
    Not advancing RIP is likely a nop, i.e. ctxt->eip isn't updated with
    ctxt->_eip until emulation "retires" anyways.  Skipping #DB injection
    fixes a bug reported by Andy Lutomirski where a #UD on SYSCALL due to
    invalid state with EFLAGS.TF=1 would loop indefinitely due to emulation
    overwriting the #UD with #DB and thus restarting the bad SYSCALL over
    and over.
    
    Cc: Nadav Amit <nadav.amit@gmail.com>
    Cc: stable@vger.kernel.org
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Fixes: 663f4c61b803 ("KVM: x86: handle singlestep during emulation")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3abf92c855c9439f57880b89f1ae8267a99ab45
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Aug 25 09:21:44 2019 +0200

    ALSA: seq: Fix potential concurrent access to the deleted pool
    
    commit 75545304eba6a3d282f923b96a466dc25a81e359 upstream.
    
    The input pool of a client might be deleted via the resize ioctl, the
    the access to it should be covered by the proper locks.  Currently the
    only missing place is the call in snd_seq_ioctl_get_client_pool(), and
    this patch papers over it.
    
    Reported-by: syzbot+4a75454b9ca2777f35c7@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec1933594cbb1039f0341847d457c320a2b663a4
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 16 21:26:22 2019 -0700

    tcp: make sure EPOLLOUT wont be missed
    
    [ Upstream commit ef8d8ccdc216f797e66cb4a1372f5c4c285ce1e4 ]
    
    As Jason Baron explained in commit 790ba4566c1a ("tcp: set SOCK_NOSPACE
    under memory pressure"), it is crucial we properly set SOCK_NOSPACE
    when needed.
    
    However, Jason patch had a bug, because the 'nonblocking' status
    as far as sk_stream_wait_memory() is concerned is governed
    by MSG_DONTWAIT flag passed at sendmsg() time :
    
        long timeo = sock_sndtimeo(sk, flags & MSG_DONTWAIT);
    
    So it is very possible that tcp sendmsg() calls sk_stream_wait_memory(),
    and that sk_stream_wait_memory() returns -EAGAIN with SOCK_NOSPACE
    cleared, if sk->sk_sndtimeo has been set to a small (but not zero)
    value.
    
    This patch removes the 'noblock' variable since we must always
    set SOCK_NOSPACE if -EAGAIN is returned.
    
    It also renames the do_nonblock label since we might reach this
    code path even if we were in blocking mode.
    
    Fixes: 790ba4566c1a ("tcp: set SOCK_NOSPACE under memory pressure")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jason Baron <jbaron@akamai.com>
    Reported-by: Vladimir Rutsky  <rutsky@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Jason Baron <jbaron@akamai.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a485888b5189845f0b6c58ae89661a402a80402a
Author: Hui Peng <benquike@gmail.com>
Date:   Tue Aug 13 22:34:04 2019 -0400

    ALSA: usb-audio: Fix an OOB bug in parse_audio_mixer_unit
    
    commit daac07156b330b18eb5071aec4b3ddca1c377f2c upstream.
    
    The `uac_mixer_unit_descriptor` shown as below is read from the
    device side. In `parse_audio_mixer_unit`, `baSourceID` field is
    accessed from index 0 to `bNrInPins` - 1, the current implementation
    assumes that descriptor is always valid (the length  of descriptor
    is no shorter than 5 + `bNrInPins`). If a descriptor read from
    the device side is invalid, it may trigger out-of-bound memory
    access.
    
    ```
    struct uac_mixer_unit_descriptor {
            __u8 bLength;
            __u8 bDescriptorType;
            __u8 bDescriptorSubtype;
            __u8 bUnitID;
            __u8 bNrInPins;
            __u8 baSourceID[];
    }
    ```
    
    This patch fixes the bug by add a sanity check on the length of
    the descriptor.
    
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 735a16d1afc01320392669f4ea64c84d435faf1c
Author: Hui Peng <benquike@gmail.com>
Date:   Thu Aug 15 00:31:34 2019 -0400

    ALSA: usb-audio: Fix a stack buffer overflow bug in check_input_term
    
    commit 19bce474c45be69a284ecee660aa12d8f1e88f18 upstream.
    
    `check_input_term` recursively calls itself with input from
    device side (e.g., uac_input_terminal_descriptor.bCSourceID)
    as argument (id). In `check_input_term`, if `check_input_term`
    is called with the same `id` argument as the caller, it triggers
    endless recursive call, resulting kernel space stack overflow.
    
    This patch fixes the bug by adding a bitmap to `struct mixer_build`
    to keep track of the checked ids and stop the execution if some id
    has been checked (similar to how parse_audio_unit handles unitid
    argument).
    
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a48b39d1885a7a1fe92e96ada091b7b1ea6dd35
Author: Tim Froidcoeur <tim.froidcoeur@tessares.net>
Date:   Sat Aug 24 08:03:51 2019 +0200

    tcp: fix tcp_rtx_queue_tail in case of empty retransmit queue
    
    Commit 8c3088f895a0 ("tcp: be more careful in tcp_fragment()")
    triggers following stack trace:
    
    [25244.848046] kernel BUG at ./include/linux/skbuff.h:1406!
    [25244.859335] RIP: 0010:skb_queue_prev+0x9/0xc
    [25244.888167] Call Trace:
    [25244.889182]  <IRQ>
    [25244.890001]  tcp_fragment+0x9c/0x2cf
    [25244.891295]  tcp_write_xmit+0x68f/0x988
    [25244.892732]  __tcp_push_pending_frames+0x3b/0xa0
    [25244.894347]  tcp_data_snd_check+0x2a/0xc8
    [25244.895775]  tcp_rcv_established+0x2a8/0x30d
    [25244.897282]  tcp_v4_do_rcv+0xb2/0x158
    [25244.898666]  tcp_v4_rcv+0x692/0x956
    [25244.899959]  ip_local_deliver_finish+0xeb/0x169
    [25244.901547]  __netif_receive_skb_core+0x51c/0x582
    [25244.903193]  ? inet_gro_receive+0x239/0x247
    [25244.904756]  netif_receive_skb_internal+0xab/0xc6
    [25244.906395]  napi_gro_receive+0x8a/0xc0
    [25244.907760]  receive_buf+0x9a1/0x9cd
    [25244.909160]  ? load_balance+0x17a/0x7b7
    [25244.910536]  ? vring_unmap_one+0x18/0x61
    [25244.911932]  ? detach_buf+0x60/0xfa
    [25244.913234]  virtnet_poll+0x128/0x1e1
    [25244.914607]  net_rx_action+0x12a/0x2b1
    [25244.915953]  __do_softirq+0x11c/0x26b
    [25244.917269]  ? handle_irq_event+0x44/0x56
    [25244.918695]  irq_exit+0x61/0xa0
    [25244.919947]  do_IRQ+0x9d/0xbb
    [25244.921065]  common_interrupt+0x85/0x85
    [25244.922479]  </IRQ>
    
    tcp_rtx_queue_tail() (called by tcp_fragment()) can call
    tcp_write_queue_prev() on the first packet in the queue, which will trigger
    the BUG in tcp_write_queue_prev(), because there is no previous packet.
    
    This happens when the retransmit queue is empty, for example in case of a
    zero window.
    
    Commit 8c3088f895a0 ("tcp: be more careful in tcp_fragment()") was not a
    simple cherry-pick of the original one from master (b617158dc096)
    because there is a specific TCP rtx queue only since v4.15. For more
    details, please see the commit message of b617158dc096 ("tcp: be more
    careful in tcp_fragment()").
    
    The BUG() is hit due to the specific code added to versions older than
    v4.15. The comment in skb_queue_prev() (include/linux/skbuff.h:1406),
    just before the BUG_ON() somehow suggests to add a check before using
    it, what Tim did.
    
    In master, this code path causing the issue will not be taken because
    the implementation of tcp_rtx_queue_tail() is different:
    
        tcp_fragment() → tcp_rtx_queue_tail() → tcp_write_queue_prev() →
    skb_queue_prev() → BUG_ON()
    
    Fixes: 8c3088f895a0 ("tcp: be more careful in tcp_fragment()")
    Signed-off-by: Tim Froidcoeur <tim.froidcoeur@tessares.net>
    Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Reviewed-by: Christoph Paasch <cpaasch@apple.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59326db35268acf4a0adce8d02c2f48ca499cf63
Author: Stefan Wahren <wahrenst@gmx.net>
Date:   Wed May 15 19:14:18 2019 +0200

    watchdog: bcm2835_wdt: Fix module autoload
    
    [ Upstream commit 215e06f0d18d5d653d6ea269e4dfc684854d48bf ]
    
    The commit 5e6acc3e678e ("bcm2835-pm: Move bcm2835-watchdog's DT probe
    to an MFD.") broke module autoloading on Raspberry Pi. So add a
    module alias this fix this.
    
    Signed-off-by: Stefan Wahren <wahrenst@gmx.net>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 348e556cd7e634c96f4fda9447f2cb1ccfe629fe
Author: Adrian Vladu <avladu@cloudbasesolutions.com>
Date:   Mon May 6 16:50:58 2019 +0000

    tools: hv: fix KVP and VSS daemons exit code
    
    [ Upstream commit b0995156071b0ff29a5902964a9dc8cfad6f81c0 ]
    
    HyperV KVP and VSS daemons should exit with 0 when the '--help'
    or '-h' flags are used.
    
    Signed-off-by: Adrian Vladu <avladu@cloudbasesolutions.com>
    
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Alessandro Pilotti <apilotti@cloudbasesolutions.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cf3f1cd77bafef468e076ad5ca963dc49d30000
Author: Hans Ulli Kroll <ulli.kroll@googlemail.com>
Date:   Sat Aug 10 17:04:58 2019 +0200

    usb: host: fotg2: restart hcd after port reset
    
    [ Upstream commit 777758888ffe59ef754cc39ab2f275dc277732f4 ]
    
    On the Gemini SoC the FOTG2 stalls after port reset
    so restart the HCD after each port reset.
    
    Signed-off-by: Hans Ulli Kroll <ulli.kroll@googlemail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20190810150458.817-1-linus.walleij@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c66c6ac3ff15a7b3ec6986217a1f2c0ec2cac743
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Fri Jul 26 14:59:03 2019 +1000

    usb: gadget: composite: Clear "suspended" on reset/disconnect
    
    [ Upstream commit 602fda17c7356bb7ae98467d93549057481d11dd ]
    
    In some cases, one can get out of suspend with a reset or
    a disconnect followed by a reconnect. Previously we would
    leave a stale suspended flag set.
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4d31cf624a0b0a6e0be44824ecca21cece1831f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jul 12 11:13:30 2019 +0200

    dmaengine: ste_dma40: fix unneeded variable warning
    
    [ Upstream commit 5d6fb560729a5d5554e23db8d00eb57cd0021083 ]
    
    clang-9 points out that there are two variables that depending on the
    configuration may only be used in an ARRAY_SIZE() expression but not
    referenced:
    
    drivers/dma/ste_dma40.c:145:12: error: variable 'd40_backup_regs' is not needed and will not be emitted [-Werror,-Wunneeded-internal-declaration]
    static u32 d40_backup_regs[] = {
               ^
    drivers/dma/ste_dma40.c:214:12: error: variable 'd40_backup_regs_chan' is not needed and will not be emitted [-Werror,-Wunneeded-internal-declaration]
    static u32 d40_backup_regs_chan[] = {
    
    Mark these __maybe_unused to shut up the warning.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20190712091357.744515-1-arnd@arndb.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffb7396e3c996d13f2258f8a87e84dfb2a8571e8
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Aug 14 15:59:50 2019 +0300

    scsi: ufs: Fix NULL pointer dereference in ufshcd_config_vreg_hpm()
    
    [ Upstream commit 7c7cfdcf7f1777c7376fc9a239980de04b6b5ea1 ]
    
    Fix the following BUG:
    
      [ 187.065689] BUG: kernel NULL pointer dereference, address: 000000000000001c
      [ 187.065790] RIP: 0010:ufshcd_vreg_set_hpm+0x3c/0x110 [ufshcd_core]
      [ 187.065938] Call Trace:
      [ 187.065959] ufshcd_resume+0x72/0x290 [ufshcd_core]
      [ 187.065980] ufshcd_system_resume+0x54/0x140 [ufshcd_core]
      [ 187.065993] ? pci_pm_restore+0xb0/0xb0
      [ 187.066005] ufshcd_pci_resume+0x15/0x20 [ufshcd_pci]
      [ 187.066017] pci_pm_thaw+0x4c/0x90
      [ 187.066030] dpm_run_callback+0x5b/0x150
      [ 187.066043] device_resume+0x11b/0x220
    
    Voltage regulators are optional, so functions must check they exist
    before dereferencing.
    
    Note this issue is hidden if CONFIG_REGULATORS is not set, because the
    offending code is optimised away.
    
    Notes for stable:
    
    The issue first appears in commit 57d104c153d3 ("ufs: add UFS power
    management support") but is inadvertently fixed in commit 60f0187031c0
    ("scsi: ufs: disable vccq if it's not needed by UFS device") which in
    turn was reverted by commit 730679817d83 ("Revert "scsi: ufs: disable vccq
    if it's not needed by UFS device""). So fix applies v3.18 to v4.5 and
    v5.1+
    
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Fixes: 730679817d83 ("Revert "scsi: ufs: disable vccq if it's not needed by UFS device"")
    Cc: stable@vger.kernel.org
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 721a2f80a4cbe486e0a20b64a4e85b9092f2a10e
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Mon Aug 19 15:52:35 2019 +0000

    x86/CPU/AMD: Clear RDRAND CPUID bit on AMD family 15h/16h
    
    [ Upstream commit c49a0a80137c7ca7d6ced4c812c9e07a949f6f24 ]
    
    There have been reports of RDRAND issues after resuming from suspend on
    some AMD family 15h and family 16h systems. This issue stems from a BIOS
    not performing the proper steps during resume to ensure RDRAND continues
    to function properly.
    
    RDRAND support is indicated by CPUID Fn00000001_ECX[30]. This bit can be
    reset by clearing MSR C001_1004[62]. Any software that checks for RDRAND
    support using CPUID, including the kernel, will believe that RDRAND is
    not supported.
    
    Update the CPU initialization to clear the RDRAND CPUID bit for any family
    15h and 16h processor that supports RDRAND. If it is known that the family
    15h or family 16h system does not have an RDRAND resume issue or that the
    system will not be placed in suspend, the "rdrand=force" kernel parameter
    can be used to stop the clearing of the RDRAND CPUID bit.
    
    Additionally, update the suspend and resume path to save and restore the
    MSR C001_1004 value to ensure that the RDRAND CPUID setting remains in
    place after resuming from suspend.
    
    Note, that clearing the RDRAND CPUID bit does not prevent a processor
    that normally supports the RDRAND instruction from executing it. So any
    code that determined the support based on family and model won't #UD.
    
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andrew Cooper <andrew.cooper3@citrix.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Chen Yu <yu.c.chen@intel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "linux-doc@vger.kernel.org" <linux-doc@vger.kernel.org>
    Cc: "linux-pm@vger.kernel.org" <linux-pm@vger.kernel.org>
    Cc: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Cc: <stable@vger.kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "x86@kernel.org" <x86@kernel.org>
    Link: https://lkml.kernel.org/r/7543af91666f491547bd86cebb1e17c66824ab9f.1566229943.git.thomas.lendacky@amd.com
    [sl: adjust context in docs]
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0395f6e1100a0e963d40ef046281d0d694d6b31
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Wed Nov 25 01:03:41 2015 +0800

    x86/pm: Introduce quirk framework to save/restore extra MSR registers around suspend/resume
    
    [ Upstream commit 7a9c2dd08eadd5c6943115dbbec040c38d2e0822 ]
    
    A bug was reported that on certain Broadwell platforms, after
    resuming from S3, the CPU is running at an anomalously low
    speed.
    
    It turns out that the BIOS has modified the value of the
    THERM_CONTROL register during S3, and changed it from 0 to 0x10,
    thus enabled clock modulation(bit4), but with undefined CPU Duty
    Cycle(bit1:3) - which causes the problem.
    
    Here is a simple scenario to reproduce the issue:
    
     1. Boot up the system
     2. Get MSR 0x19a, it should be 0
     3. Put the system into sleep, then wake it up
     4. Get MSR 0x19a, it shows 0x10, while it should be 0
    
    Although some BIOSen want to change the CPU Duty Cycle during
    S3, in our case we don't want the BIOS to do any modification.
    
    Fix this issue by introducing a more generic x86 framework to
    save/restore specified MSR registers(THERM_CONTROL in this case)
    for suspend/resume. This allows us to fix similar bugs in a much
    simpler way in the future.
    
    When the kernel wants to protect certain MSRs during suspending,
    we simply add a quirk entry in msr_save_dmi_table, and customize
    the MSR registers inside the quirk callback, for example:
    
      u32 msr_id_need_to_save[] = {MSR_ID0, MSR_ID1, MSR_ID2...};
    
    and the quirk mechanism ensures that, once resumed from suspend,
    the MSRs indicated by these IDs will be restored to their
    original, pre-suspend values.
    
    Since both 64-bit and 32-bit kernels are affected, this patch
    covers the common 64/32-bit suspend/resume code path. And
    because the MSRs specified by the user might not be available or
    readable in any situation, we use rdmsrl_safe() to safely save
    these MSRs.
    
    Reported-and-tested-by: Marcin Kaszewski <marcin.kaszewski@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: bp@suse.de
    Cc: len.brown@intel.com
    Cc: linux@horizon.com
    Cc: luto@kernel.org
    Cc: rjw@rjwysocki.net
    Link: http://lkml.kernel.org/r/c9abdcbc173dd2f57e8990e304376f19287e92ba.1448382971.git.yu.c.chen@intel.com
    [ More edits to the naming of data structures. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5a3392464a9ff0a0f0bc33527687f1c4b04a98a
Author: Sasha Levin <sashal@kernel.org>
Date:   Tue Aug 27 22:58:51 2019 -0400

    Revert "perf test 6: Fix missing kvm module load for s390"
    
    This reverts commit 5f18429ae48faebefc00533cb24afdd01064754c.
    
    Which was upstream commit 53fe307dfd309e425b171f6272d64296a54f4dff.
    
    Ben Hutchings reports that this commit depends on new code added in
    v4.18, and so is irrelevant on older kernels, and breaks the build.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7a27ca75b432ee03a35bdc81e56a23ca84526b7
Author: Dirk Morris <dmorris@metaloft.com>
Date:   Wed Aug 28 00:11:19 2019 +0100

    netfilter: conntrack: Use consistent ct id hash calculation
    
    commit 656c8e9cc1badbc18eefe6ba01d33ebbcae61b9a upstream.
    
    Change ct id hash calculation to only use invariants.
    
    Currently the ct id hash calculation is based on some fields that can
    change in the lifetime on a conntrack entry in some corner cases. The
    current hash uses the whole tuple which contains an hlist pointer which
    will change when the conntrack is placed on the dying list resulting in
    a ct id change.
    
    This patch also removes the reply-side tuple and extension pointer from
    the hash calculation so that the ct id will will not change from
    initialization until confirmation.
    
    Fixes: 3c79107631db1f7 ("netfilter: ctnetlink: don't use conntrack/expect object addresses as id")
    Signed-off-by: Dirk Morris <dmorris@metaloft.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36bbd861a402a8c5bd8f0365a5967d34cc492f09
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Aug 28 00:11:12 2019 +0100

    netfilter: ctnetlink: don't use conntrack/expect object addresses as id
    
    commit 3c79107631db1f7fd32cf3f7368e4672004a3010 upstream.
    
    else, we leak the addresses to userspace via ctnetlink events
    and dumps.
    
    Compute an ID on demand based on the immutable parts of nf_conn struct.
    
    Another advantage compared to using an address is that there is no
    immediate re-use of the same ID in case the conntrack entry is freed and
    reallocated again immediately.
    
    Fixes: 3583240249ef ("[NETFILTER]: nf_conntrack_expect: kill unique ID")
    Fixes: 7f85f914721f ("[NETFILTER]: nf_conntrack: kill unique ID")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    [bwh: Backported to 4.4: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66f8c5ff8ed3d99dd21d8f24aac89410de7a4a05
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 28 00:11:06 2019 +0100

    inet: switch IP ID generator to siphash
    
    commit df453700e8d81b1bdafdf684365ee2b9431fb702 upstream.
    
    According to Amit Klein and Benny Pinkas, IP ID generation is too weak
    and might be used by attackers.
    
    Even with recent net_hash_mix() fix (netns: provide pure entropy for net_hash_mix())
    having 64bit key and Jenkins hash is risky.
    
    It is time to switch to siphash and its 128bit keys.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Amit Klein <aksecurity@gmail.com>
    Reported-by: Benny Pinkas <benny@pinkas.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.4: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71b951c85b3b36480260a31419126b81f27db733
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Aug 28 00:11:00 2019 +0100

    siphash: implement HalfSipHash1-3 for hash tables
    
    commit 1ae2324f732c9c4e2fa4ebd885fa1001b70d52e1 upstream.
    
    HalfSipHash, or hsiphash, is a shortened version of SipHash, which
    generates 32-bit outputs using a weaker 64-bit key. It has *much* lower
    security margins, and shouldn't be used for anything too sensitive, but
    it could be used as a hashtable key function replacement, if the output
    is never exposed, and if the security requirement is not too high.
    
    The goal is to make this something that performance-critical jhash users
    would be willing to use.
    
    On 64-bit machines, HalfSipHash1-3 is slower than SipHash1-3, so we alias
    SipHash1-3 to HalfSipHash1-3 on those systems.
    
    64-bit x86_64:
    [    0.509409] test_siphash:     SipHash2-4 cycles: 4049181
    [    0.510650] test_siphash:     SipHash1-3 cycles: 2512884
    [    0.512205] test_siphash: HalfSipHash1-3 cycles: 3429920
    [    0.512904] test_siphash:    JenkinsHash cycles:  978267
    So, we map hsiphash() -> SipHash1-3
    
    32-bit x86:
    [    0.509868] test_siphash:     SipHash2-4 cycles: 14812892
    [    0.513601] test_siphash:     SipHash1-3 cycles:  9510710
    [    0.515263] test_siphash: HalfSipHash1-3 cycles:  3856157
    [    0.515952] test_siphash:    JenkinsHash cycles:  1148567
    So, we map hsiphash() -> HalfSipHash1-3
    
    hsiphash() is roughly 3 times slower than jhash(), but comes with a
    considerable security improvement.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Jean-Philippe Aumasson <jeanphilippe.aumasson@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.4 to avoid regression for WireGuard with only half
     the siphash API present]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 994fcca7f1c93f4e78008d5806c68067d3b75487
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Aug 28 00:10:54 2019 +0100

    siphash: add cryptographically secure PRF
    
    commit 2c956a60778cbb6a27e0c7a8a52a91378c90e1d1 upstream.
    
    SipHash is a 64-bit keyed hash function that is actually a
    cryptographically secure PRF, like HMAC. Except SipHash is super fast,
    and is meant to be used as a hashtable keyed lookup function, or as a
    general PRF for short input use cases, such as sequence numbers or RNG
    chaining.
    
    For the first usage:
    
    There are a variety of attacks known as "hashtable poisoning" in which an
    attacker forms some data such that the hash of that data will be the
    same, and then preceeds to fill up all entries of a hashbucket. This is
    a realistic and well-known denial-of-service vector. Currently
    hashtables use jhash, which is fast but not secure, and some kind of
    rotating key scheme (or none at all, which isn't good). SipHash is meant
    as a replacement for jhash in these cases.
    
    There are a modicum of places in the kernel that are vulnerable to
    hashtable poisoning attacks, either via userspace vectors or network
    vectors, and there's not a reliable mechanism inside the kernel at the
    moment to fix it. The first step toward fixing these issues is actually
    getting a secure primitive into the kernel for developers to use. Then
    we can, bit by bit, port things over to it as deemed appropriate.
    
    While SipHash is extremely fast for a cryptographically secure function,
    it is likely a bit slower than the insecure jhash, and so replacements
    will be evaluated on a case-by-case basis based on whether or not the
    difference in speed is negligible and whether or not the current jhash usage
    poses a real security risk.
    
    For the second usage:
    
    A few places in the kernel are using MD5 or SHA1 for creating secure
    sequence numbers, syn cookies, port numbers, or fast random numbers.
    SipHash is a faster and more fitting, and more secure replacement for MD5
    in those situations. Replacing MD5 and SHA1 with SipHash for these uses is
    obvious and straight-forward, and so is submitted along with this patch
    series. There shouldn't be much of a debate over its efficacy.
    
    Dozens of languages are already using this internally for their hash
    tables and PRFs. Some of the BSDs already use this in their kernels.
    SipHash is a widely known high-speed solution to a widely known set of
    problems, and it's time we catch-up.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Reviewed-by: Jean-Philippe Aumasson <jeanphilippe.aumasson@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Eric Biggers <ebiggers3@gmail.com>
    Cc: David Laight <David.Laight@aculab.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.4 as dependency of commits df453700e8d8 "inet: switch
     IP ID generator to siphash" and 3c79107631db "netfilter: ctnetlink: don't
     use conntrack/expect object addresses as id":
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ca24361c2a4c28e69cac96b0bbe476043f5d866
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Aug 28 00:10:49 2019 +0100

    vhost: scsi: add weight support
    
    commit c1ea02f15ab5efb3e93fc3144d895410bf79fcf2 upstream.
    
    This patch will check the weight and exit the loop if we exceeds the
    weight. This is useful for preventing scsi kthread from hogging cpu
    which is guest triggerable.
    
    This addresses CVE-2019-3900.
    
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Stefan Hajnoczi <stefanha@redhat.com>
    Fixes: 057cbf49a1f0 ("tcm_vhost: Initial merge for vhost level target fabric driver")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    [bwh: Backported to 4.4:
     - Drop changes in vhost_scsi_ctl_handle_vq()
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb85b4cbd8f69cdea3a0caa9aa4edb1d4d7bc24f
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Aug 28 00:10:43 2019 +0100

    vhost_net: fix possible infinite loop
    
    commit e2412c07f8f3040593dfb88207865a3cd58680c0 upstream.
    
    When the rx buffer is too small for a packet, we will discard the vq
    descriptor and retry it for the next packet:
    
    while ((sock_len = vhost_net_rx_peek_head_len(net, sock->sk,
                                                  &busyloop_intr))) {
    ...
            /* On overrun, truncate and discard */
            if (unlikely(headcount > UIO_MAXIOV)) {
                    iov_iter_init(&msg.msg_iter, READ, vq->iov, 1, 1);
                    err = sock->ops->recvmsg(sock, &msg,
                                             1, MSG_DONTWAIT | MSG_TRUNC);
                    pr_debug("Discarded rx packet: len %zd\n", sock_len);
                    continue;
            }
    ...
    }
    
    This makes it possible to trigger a infinite while..continue loop
    through the co-opreation of two VMs like:
    
    1) Malicious VM1 allocate 1 byte rx buffer and try to slow down the
       vhost process as much as possible e.g using indirect descriptors or
       other.
    2) Malicious VM2 generate packets to VM1 as fast as possible
    
    Fixing this by checking against weight at the end of RX and TX
    loop. This also eliminate other similar cases when:
    
    - userspace is consuming the packets in the meanwhile
    - theoretical TOCTOU attack if guest moving avail index back and forth
      to hit the continue after vhost find guest just add new buffers
    
    This addresses CVE-2019-3900.
    
    Fixes: d8316f3991d20 ("vhost: fix total length when packets are too short")
    Fixes: 3a4d5c94e9593 ("vhost_net: a kernel-level virtio server")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    [bwh: Backported to 4.4:
     - Both Tx modes are handled in one loop in handle_tx()
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e0b3406326401f4f7f1ce84194a29a595dc7aa9
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Aug 28 00:10:37 2019 +0100

    vhost: introduce vhost_exceeds_weight()
    
    commit e82b9b0727ff6d665fff2d326162b460dded554d upstream.
    
    We used to have vhost_exceeds_weight() for vhost-net to:
    
    - prevent vhost kthread from hogging the cpu
    - balance the time spent between TX and RX
    
    This function could be useful for vsock and scsi as well. So move it
    to vhost.c. Device must specify a weight which counts the number of
    requests, or it can also specific a byte_weight which counts the
    number of bytes that has been processed.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    [bwh: Backported to 4.4:
     - Drop changes to vhost_vsock
     - In vhost_net, both Tx modes are handled in one loop in handle_tx()
     - Adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94291043ad329ffaac4b08244400a12f50fda62e
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Aug 28 00:10:30 2019 +0100

    vhost_net: introduce vhost_exceeds_weight()
    
    commit 272f35cba53d088085e5952fd81d7a133ab90789 upstream.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.4: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f3cfe5d32d8feb6063a03f5240ffcb02b5bb588
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Aug 28 00:10:23 2019 +0100

    vhost_net: use packet weight for rx handler, too
    
    commit db688c24eada63b1efe6d0d7d835e5c3bdd71fd3 upstream.
    
    Similar to commit a2ac99905f1e ("vhost-net: set packet weight of
    tx polling to 2 * vq size"), we need a packet-based limit for
    handler_rx, too - elsewhere, under rx flood with small packets,
    tx can be delayed for a very long time, even without busypolling.
    
    The pkt limit applied to handle_rx must be the same applied by
    handle_tx, or we will get unfair scheduling between rx and tx.
    Tying such limit to the queue length makes it less effective for
    large queue length values and can introduce large process
    scheduler latencies, so a constant valued is used - likewise
    the existing bytes limit.
    
    The selected limit has been validated with PVP[1] performance
    test with different queue sizes:
    
    queue size              256     512     1024
    
    baseline                366     354     362
    weight 128              715     723     670
    weight 256              740     745     733
    weight 512              600     460     583
    weight 1024             423     427     418
    
    A packet weight of 256 gives peek performances in under all the
    tested scenarios.
    
    No measurable regression in unidirectional performance tests has
    been detected.
    
    [1] https://developers.redhat.com/blog/2017/06/05/measuring-and-comparing-open-vswitch-performance/
    
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e44915de75599a66268e7aa2b9aef25c3fd33de0
Author: haibinzhang(张海斌) <haibinzhang@tencent.com>
Date:   Wed Aug 28 00:10:17 2019 +0100

    vhost-net: set packet weight of tx polling to 2 * vq size
    
    commit a2ac99905f1ea8b15997a6ec39af69aa28a3653b upstream.
    
    handle_tx will delay rx for tens or even hundreds of milliseconds when tx busy
    polling udp packets with small length(e.g. 1byte udp payload), because setting
    VHOST_NET_WEIGHT takes into account only sent-bytes but no single packet length.
    
    Ping-Latencies shown below were tested between two Virtual Machines using
    netperf (UDP_STREAM, len=1), and then another machine pinged the client:
    
    vq size=256
    Packet-Weight   Ping-Latencies(millisecond)
                       min      avg       max
    Origin           3.319   18.489    57.303
    64               1.643    2.021     2.552
    128              1.825    2.600     3.224
    256              1.997    2.710     4.295
    512              1.860    3.171     4.631
    1024             2.002    4.173     9.056
    2048             2.257    5.650     9.688
    4096             2.093    8.508    15.943
    
    vq size=512
    Packet-Weight   Ping-Latencies(millisecond)
                       min      avg       max
    Origin           6.537   29.177    66.245
    64               2.798    3.614     4.403
    128              2.861    3.820     4.775
    256              3.008    4.018     4.807
    512              3.254    4.523     5.824
    1024             3.079    5.335     7.747
    2048             3.944    8.201    12.762
    4096             4.158   11.057    19.985
    
    Seems pretty consistent, a small dip at 2 VQ sizes.
    Ring size is a hint from device about a burst size it can tolerate. Based on
    benchmarks, set the weight to 2 * vq size.
    
    To evaluate this change, another tests were done using netperf(RR, TX) between
    two machines with Intel(R) Xeon(R) Gold 6133 CPU @ 2.50GHz, and vq size was
    tweaked through qemu. Results shown below does not show obvious changes.
    
    vq size=256 TCP_RR                vq size=512 TCP_RR
    size/sessions/+thu%/+normalize%   size/sessions/+thu%/+normalize%
       1/       1/  -7%/        -2%      1/       1/   0%/        -2%
       1/       4/  +1%/         0%      1/       4/  +1%/         0%
       1/       8/  +1%/        -2%      1/       8/   0%/        +1%
      64/       1/  -6%/         0%     64/       1/  +7%/        +3%
      64/       4/   0%/        +2%     64/       4/  -1%/        +1%
      64/       8/   0%/         0%     64/       8/  -1%/        -2%
     256/       1/  -3%/        -4%    256/       1/  -4%/        -2%
     256/       4/  +3%/        +4%    256/       4/  +1%/        +2%
     256/       8/  +2%/         0%    256/       8/  +1%/        -1%
    
    vq size=256 UDP_RR                vq size=512 UDP_RR
    size/sessions/+thu%/+normalize%   size/sessions/+thu%/+normalize%
       1/       1/  -5%/        +1%      1/       1/  -3%/        -2%
       1/       4/  +4%/        +1%      1/       4/  -2%/        +2%
       1/       8/  -1%/        -1%      1/       8/  -1%/         0%
      64/       1/  -2%/        -3%     64/       1/  +1%/        +1%
      64/       4/  -5%/        -1%     64/       4/  +2%/         0%
      64/       8/   0%/        -1%     64/       8/  -2%/        +1%
     256/       1/  +7%/        +1%    256/       1/  -7%/         0%
     256/       4/  +1%/        +1%    256/       4/  -3%/        -4%
     256/       8/  +2%/        +2%    256/       8/  +1%/        +1%
    
    vq size=256 TCP_STREAM            vq size=512 TCP_STREAM
    size/sessions/+thu%/+normalize%   size/sessions/+thu%/+normalize%
      64/       1/   0%/        -3%     64/       1/   0%/         0%
      64/       4/  +3%/        -1%     64/       4/  -2%/        +4%
      64/       8/  +9%/        -4%     64/       8/  -1%/        +2%
     256/       1/  +1%/        -4%    256/       1/  +1%/        +1%
     256/       4/  -1%/        -1%    256/       4/  -3%/         0%
     256/       8/  +7%/        +5%    256/       8/  -3%/         0%
     512/       1/  +1%/         0%    512/       1/  -1%/        -1%
     512/       4/  +1%/        -1%    512/       4/   0%/         0%
     512/       8/  +7%/        -5%    512/       8/  +6%/        -1%
    1024/       1/   0%/        -1%   1024/       1/   0%/        +1%
    1024/       4/  +3%/         0%   1024/       4/  +1%/         0%
    1024/       8/  +8%/        +5%   1024/       8/  -1%/         0%
    2048/       1/  +2%/        +2%   2048/       1/  -1%/         0%
    2048/       4/  +1%/         0%   2048/       4/   0%/        -1%
    2048/       8/  -2%/         0%   2048/       8/   5%/        -1%
    4096/       1/  -2%/         0%   4096/       1/  -2%/         0%
    4096/       4/  +2%/         0%   4096/       4/   0%/         0%
    4096/       8/  +9%/        -2%   4096/       8/  -5%/        -1%
    
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Haibin Zhang <haibinzhang@tencent.com>
    Signed-off-by: Yunfang Tai <yunfangtai@tencent.com>
    Signed-off-by: Lidong Chen <lidongchen@tencent.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b31c9932f84ce06b08735884ae7e19eca2b6c80a
Author: Alexander Kochetkov <al.kochet@gmail.com>
Date:   Wed Aug 28 00:10:06 2019 +0100

    net: arc_emac: fix koops caused by sk_buff free
    
    commit c278c253f3d992c6994d08aa0efb2b6806ca396f upstream.
    
    There is a race between arc_emac_tx() and arc_emac_tx_clean().
    sk_buff got freed by arc_emac_tx_clean() while arc_emac_tx()
    submitting sk_buff.
    
    In order to free sk_buff arc_emac_tx_clean() checks:
        if ((info & FOR_EMAC) || !txbd->data)
            break;
        ...
        dev_kfree_skb_irq(skb);
    
    If condition false, arc_emac_tx_clean() free sk_buff.
    
    In order to submit txbd, arc_emac_tx() do:
        priv->tx_buff[*txbd_curr].skb = skb;
        ...
        priv->txbd[*txbd_curr].data = cpu_to_le32(addr);
        ...
        ...  <== arc_emac_tx_clean() check condition here
        ...  <== (info & FOR_EMAC) is false
        ...  <== !txbd->data is false
        ...
        *info = cpu_to_le32(FOR_EMAC | FIRST_OR_LAST_MASK | len);
    
    In order to reproduce the situation,
    run device:
        # iperf -s
    run on host:
        # iperf -t 600 -c <device-ip-addr>
    
    [   28.396284] ------------[ cut here ]------------
    [   28.400912] kernel BUG at .../net/core/skbuff.c:1355!
    [   28.414019] Internal error: Oops - BUG: 0 [#1] SMP ARM
    [   28.419150] Modules linked in:
    [   28.422219] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G    B           4.4.0+ #120
    [   28.429516] Hardware name: Rockchip (Device Tree)
    [   28.434216] task: c0665070 ti: c0660000 task.ti: c0660000
    [   28.439622] PC is at skb_put+0x10/0x54
    [   28.443381] LR is at arc_emac_poll+0x260/0x474
    [   28.447821] pc : [<c03af580>]    lr : [<c028fec4>]    psr: a0070113
    [   28.447821] sp : c0661e58  ip : eea68502  fp : ef377000
    [   28.459280] r10: 0000012c  r9 : f08b2000  r8 : eeb57100
    [   28.464498] r7 : 00000000  r6 : ef376594  r5 : 00000077  r4 : ef376000
    [   28.471015] r3 : 0030488b  r2 : ef13e880  r1 : 000005ee  r0 : eeb57100
    [   28.477534] Flags: NzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    [   28.484658] Control: 10c5387d  Table: 8eaf004a  DAC: 00000051
    [   28.490396] Process swapper/0 (pid: 0, stack limit = 0xc0660210)
    [   28.496393] Stack: (0xc0661e58 to 0xc0662000)
    [   28.500745] 1e40:                                                       00000002 00000000
    [   28.508913] 1e60: 00000000 ef376520 00000028 f08b23b8 00000000 ef376520 ef7b6900 c028fc64
    [   28.517082] 1e80: 2f158000 c0661ea8 c0661eb0 0000012c c065e900 c03bdeac ffff95e9 c0662100
    [   28.525250] 1ea0: c0663924 00000028 c0661ea8 c0661ea8 c0661eb0 c0661eb0 0000001e c0660000
    [   28.533417] 1ec0: 40000003 00000008 c0695a00 0000000a c066208c 00000100 c0661ee0 c0027410
    [   28.541584] 1ee0: ef0fb700 2f158000 00200000 ffff95e8 00000004 c0662100 c0662080 00000003
    [   28.549751] 1f00: 00000000 00000000 00000000 c065b45c 0000001e ef005000 c0647a30 00000000
    [   28.557919] 1f20: 00000000 c0027798 00000000 c005cf40 f0802100 c0662ffc c0661f60 f0803100
    [   28.566088] 1f40: c0661fb8 c00093bc c000ffb4 60070013 ffffffff c0661f94 c0661fb8 c00137d4
    [   28.574267] 1f60: 00000001 00000000 00000000 c001ffa0 00000000 c0660000 00000000 c065a364
    [   28.582441] 1f80: c0661fb8 c0647a30 00000000 00000000 00000000 c0661fb0 c000ffb0 c000ffb4
    [   28.590608] 1fa0: 60070013 ffffffff 00000051 00000000 00000000 c005496c c0662400 c061bc40
    [   28.598776] 1fc0: ffffffff ffffffff 00000000 c061b680 00000000 c0647a30 00000000 c0695294
    [   28.606943] 1fe0: c0662488 c0647a2c c066619c 6000406a 413fc090 6000807c 00000000 00000000
    [   28.615127] [<c03af580>] (skb_put) from [<ef376520>] (0xef376520)
    [   28.621218] Code: e5902054 e590c090 e3520000 0a000000 (e7f001f2)
    [   28.627307] ---[ end trace 4824734e2243fdb6 ]---
    
    [   34.377068] Internal error: Oops: 17 [#1] SMP ARM
    [   34.382854] Modules linked in:
    [   34.385947] CPU: 0 PID: 3 Comm: ksoftirqd/0 Not tainted 4.4.0+ #120
    [   34.392219] Hardware name: Rockchip (Device Tree)
    [   34.396937] task: ef02d040 ti: ef05c000 task.ti: ef05c000
    [   34.402376] PC is at __dev_kfree_skb_irq+0x4/0x80
    [   34.407121] LR is at arc_emac_poll+0x130/0x474
    [   34.411583] pc : [<c03bb640>]    lr : [<c028fd94>]    psr: 60030013
    [   34.411583] sp : ef05de68  ip : 0008e83c  fp : ef377000
    [   34.423062] r10: c001bec4  r9 : 00000000  r8 : f08b24c8
    [   34.428296] r7 : f08b2400  r6 : 00000075  r5 : 00000019  r4 : ef376000
    [   34.434827] r3 : 00060000  r2 : 00000042  r1 : 00000001  r0 : 00000000
    [   34.441365] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    [   34.448507] Control: 10c5387d  Table: 8f25c04a  DAC: 00000051
    [   34.454262] Process ksoftirqd/0 (pid: 3, stack limit = 0xef05c210)
    [   34.460449] Stack: (0xef05de68 to 0xef05e000)
    [   34.464827] de60:                   ef376000 c028fd94 00000000 c0669480 c0669480 ef376520
    [   34.473022] de80: 00000028 00000001 00002ae4 ef376520 ef7b6900 c028fc64 2f158000 ef05dec0
    [   34.481215] dea0: ef05dec8 0000012c c065e900 c03bdeac ffff983f c0662100 c0663924 00000028
    [   34.489409] dec0: ef05dec0 ef05dec0 ef05dec8 ef05dec8 ef7b6000 ef05c000 40000003 00000008
    [   34.497600] dee0: c0695a00 0000000a c066208c 00000100 ef05def8 c0027410 ef7b6000 40000000
    [   34.505795] df00: 04208040 ffff983e 00000004 c0662100 c0662080 00000003 ef05c000 ef027340
    [   34.513985] df20: ef05c000 c0666c2c 00000000 00000001 00000002 00000000 00000000 c0027568
    [   34.522176] df40: ef027340 c003ef48 ef027300 00000000 ef027340 c003edd4 00000000 00000000
    [   34.530367] df60: 00000000 c003c37c ffffff7f 00000001 00000000 ef027340 00000000 00030003
    [   34.538559] df80: ef05df80 ef05df80 00000000 00000000 ef05df90 ef05df90 ef05dfac ef027300
    [   34.546750] dfa0: c003c2a4 00000000 00000000 c000f578 00000000 00000000 00000000 00000000
    [   34.554939] dfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [   34.563129] dfe0: 00000000 00000000 00000000 00000000 00000013 00000000 ffffffff dfff7fff
    [   34.571360] [<c03bb640>] (__dev_kfree_skb_irq) from [<c028fd94>] (arc_emac_poll+0x130/0x474)
    [   34.579840] [<c028fd94>] (arc_emac_poll) from [<c03bdeac>] (net_rx_action+0xdc/0x28c)
    [   34.587712] [<c03bdeac>] (net_rx_action) from [<c0027410>] (__do_softirq+0xcc/0x1f8)
    [   34.595482] [<c0027410>] (__do_softirq) from [<c0027568>] (run_ksoftirqd+0x2c/0x50)
    [   34.603168] [<c0027568>] (run_ksoftirqd) from [<c003ef48>] (smpboot_thread_fn+0x174/0x18c)
    [   34.611466] [<c003ef48>] (smpboot_thread_fn) from [<c003c37c>] (kthread+0xd8/0xec)
    [   34.619075] [<c003c37c>] (kthread) from [<c000f578>] (ret_from_fork+0x14/0x3c)
    [   34.626317] Code: e8bd8010 e3a00000 e12fff1e e92d4010 (e59030a4)
    [   34.632572] ---[ end trace cca5a3d86a82249a ]---
    
    Signed-off-by: Alexander Kochetkov <al.kochet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d61e517e39149bff6be936c922f47af99d54509a
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Wed Aug 28 00:09:06 2019 +0100

    GFS2: don't set rgrp gl_object until it's inserted into rgrp tree
    
    commit 36e4ad0316c017d5b271378ed9a1c9a4b77fab5f upstream.
    
    Before this patch, function read_rindex_entry would set a rgrp
    glock's gl_object pointer to itself before inserting the rgrp into
    the rgrp rbtree. The problem is: if another process was also reading
    the rgrp in, and had already inserted its newly created rgrp, then
    the second call to read_rindex_entry would overwrite that value,
    then return a bad return code to the caller. Later, other functions
    would reference the now-freed rgrp memory by way of gl_object.
    In some cases, that could result in gfs2_rgrp_brelse being called
    twice for the same rgrp: once for the failed attempt and once for
    the "real" rgrp release. Eventually the kernel would panic.
    There are also a number of other things that could go wrong when
    a kernel module is accessing freed storage. For example, this could
    result in rgrp corruption because the fake rgrp would point to a
    fake bitmap in memory too, causing gfs2_inplace_reserve to search
    some random memory for free blocks, and find some, since we were
    never setting rgd->rd_bits to NULL before freeing it.
    
    This patch fixes the problem by not setting gl_object until we
    have successfully inserted the rgrp into the rbtree. Also, it sets
    rd_bits to NULL as it frees them, which will ensure any accidental
    access to the wrong rgrp will result in a kernel panic rather than
    file system corruption, which is preferred.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    [bwh: Backported to 4.4: adjust context]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d60df1c0892f1a36f63fb386824f8a688432c151
Author: Daniel Bristot de Oliveira <bristot@redhat.com>
Date:   Wed Jun 22 17:28:41 2016 -0300

    cgroup: Disable IRQs while holding css_set_lock
    
    commit 82d6489d0fed2ec8a8c48c19e8d8a04ac8e5bb26 upstream.
    
    While testing the deadline scheduler + cgroup setup I hit this
    warning.
    
    [  132.612935] ------------[ cut here ]------------
    [  132.612951] WARNING: CPU: 5 PID: 0 at kernel/softirq.c:150 __local_bh_enable_ip+0x6b/0x80
    [  132.612952] Modules linked in: (a ton of modules...)
    [  132.612981] CPU: 5 PID: 0 Comm: swapper/5 Not tainted 4.7.0-rc2 #2
    [  132.612981] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.8.2-20150714_191134- 04/01/2014
    [  132.612982]  0000000000000086 45c8bb5effdd088b ffff88013fd43da0 ffffffff813d229e
    [  132.612984]  0000000000000000 0000000000000000 ffff88013fd43de0 ffffffff810a652b
    [  132.612985]  00000096811387b5 0000000000000200 ffff8800bab29d80 ffff880034c54c00
    [  132.612986] Call Trace:
    [  132.612987]  <IRQ>  [<ffffffff813d229e>] dump_stack+0x63/0x85
    [  132.612994]  [<ffffffff810a652b>] __warn+0xcb/0xf0
    [  132.612997]  [<ffffffff810e76a0>] ? push_dl_task.part.32+0x170/0x170
    [  132.612999]  [<ffffffff810a665d>] warn_slowpath_null+0x1d/0x20
    [  132.613000]  [<ffffffff810aba5b>] __local_bh_enable_ip+0x6b/0x80
    [  132.613008]  [<ffffffff817d6c8a>] _raw_write_unlock_bh+0x1a/0x20
    [  132.613010]  [<ffffffff817d6c9e>] _raw_spin_unlock_bh+0xe/0x10
    [  132.613015]  [<ffffffff811388ac>] put_css_set+0x5c/0x60
    [  132.613016]  [<ffffffff8113dc7f>] cgroup_free+0x7f/0xa0
    [  132.613017]  [<ffffffff810a3912>] __put_task_struct+0x42/0x140
    [  132.613018]  [<ffffffff810e776a>] dl_task_timer+0xca/0x250
    [  132.613027]  [<ffffffff810e76a0>] ? push_dl_task.part.32+0x170/0x170
    [  132.613030]  [<ffffffff8111371e>] __hrtimer_run_queues+0xee/0x270
    [  132.613031]  [<ffffffff81113ec8>] hrtimer_interrupt+0xa8/0x190
    [  132.613034]  [<ffffffff81051a58>] local_apic_timer_interrupt+0x38/0x60
    [  132.613035]  [<ffffffff817d9b0d>] smp_apic_timer_interrupt+0x3d/0x50
    [  132.613037]  [<ffffffff817d7c5c>] apic_timer_interrupt+0x8c/0xa0
    [  132.613038]  <EOI>  [<ffffffff81063466>] ? native_safe_halt+0x6/0x10
    [  132.613043]  [<ffffffff81037a4e>] default_idle+0x1e/0xd0
    [  132.613044]  [<ffffffff810381cf>] arch_cpu_idle+0xf/0x20
    [  132.613046]  [<ffffffff810e8fda>] default_idle_call+0x2a/0x40
    [  132.613047]  [<ffffffff810e92d7>] cpu_startup_entry+0x2e7/0x340
    [  132.613048]  [<ffffffff81050235>] start_secondary+0x155/0x190
    [  132.613049] ---[ end trace f91934d162ce9977 ]---
    
    The warn is the spin_(lock|unlock)_bh(&css_set_lock) in the interrupt
    context. Converting the spin_lock_bh to spin_lock_irq(save) to avoid
    this problem - and other problems of sharing a spinlock with an
    interrupt.
    
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Li Zefan <lizefan@huawei.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Juri Lelli <juri.lelli@arm.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: cgroups@vger.kernel.org
    Cc: stable@vger.kernel.org # 4.5+
    Cc: linux-kernel@vger.kernel.org
    Reviewed-by: Rik van Riel <riel@redhat.com>
    Reviewed-by: "Luis Claudio R. Goncalves" <lgoncalv@redhat.com>
    Signed-off-by: Daniel Bristot de Oliveira <bristot@redhat.com>
    Acked-by: Zefan Li <lizefan@huawei.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f1d46fe5cc0a5bc1421158fd2fec29852999fe3
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Aug 23 09:54:09 2019 -0400

    dm table: fix invalid memory accesses with too high sector number
    
    commit 1cfd5d3399e87167b7f9157ef99daa0e959f395d upstream.
    
    If the sector number is too high, dm_table_find_target() should return a
    pointer to a zeroed dm_target structure (the caller should test it with
    dm_target_is_valid).
    
    However, for some table sizes, the code in dm_table_find_target() that
    performs btree lookup will access out of bound memory structures.
    
    Fix this bug by testing the sector number at the beginning of
    dm_table_find_target(). Also, add an "inline" keyword to the function
    dm_table_get_size() because this is a hot path.
    
    Fixes: 512875bd9661 ("dm: table detect io beyond device")
    Cc: stable@vger.kernel.org
    Reported-by: Zhang Tao <kontais@zoho.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77529c247cc212aea4600e8c552a063abf5f91e4
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Mon Aug 19 11:31:21 2019 +0800

    dm space map metadata: fix missing store of apply_bops() return value
    
    commit ae148243d3f0816b37477106c05a2ec7d5f32614 upstream.
    
    In commit 6096d91af0b6 ("dm space map metadata: fix occasional leak
    of a metadata block on resize"), we refactor the commit logic to a new
    function 'apply_bops'.  But when that logic was replaced in out() the
    return value was not stored.  This may lead out() returning a wrong
    value to the caller.
    
    Fixes: 6096d91af0b6 ("dm space map metadata: fix occasional leak of a metadata block on resize")
    Cc: stable@vger.kernel.org
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 063c4d18688b9e34c74327247a1292fe13745438
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Aug 17 13:32:40 2019 +0800

    dm btree: fix order of block initialization in btree_split_beneath
    
    commit e4f9d6013820d1eba1432d51dd1c5795759aa77f upstream.
    
    When btree_split_beneath() splits a node to two new children, it will
    allocate two blocks: left and right.  If right block's allocation
    failed, the left block will be unlocked and marked dirty.  If this
    happened, the left block'ss content is zero, because it wasn't
    initialized with the btree struct before the attempot to allocate the
    right block.  Upon return, when flushing the left block to disk, the
    validator will fail when check this block.  Then a BUG_ON is raised.
    
    Fix this by completely initializing the left block before allocating and
    initializing the right block.
    
    Fixes: 4dcb8b57df359 ("dm btree: fix leak of bufio-backed block in btree_split_beneath error path")
    Cc: stable@vger.kernel.org
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24a5ed6757d857bcbecd413ef592fb86f1c15231
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Wed Aug 21 12:25:13 2019 -0700

    x86/boot: Fix boot regression caused by bootparam sanitizing
    
    commit 7846f58fba964af7cb8cf77d4d13c33254725211 upstream.
    
    commit a90118c445cc ("x86/boot: Save fields explicitly, zero out everything
    else") had two errors:
    
        * It preserved boot_params.acpi_rsdp_addr, and
        * It failed to preserve boot_params.hdr
    
    Therefore, zero out acpi_rsdp_addr, and preserve hdr.
    
    Fixes: a90118c445cc ("x86/boot: Save fields explicitly, zero out everything else")
    Reported-by: Neil MacLeod <neil@nmacleod.com>
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Neil MacLeod <neil@nmacleod.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190821192513.20126-1-jhubbard@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41664b97f46e2c951c05313f4a9e9bb1fecc1439
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Tue Jul 30 22:46:27 2019 -0700

    x86/boot: Save fields explicitly, zero out everything else
    
    commit a90118c445cc7f07781de26a9684d4ec58bfcfd1 upstream.
    
    Recent gcc compilers (gcc 9.1) generate warnings about an out of bounds
    memset, if the memset goes accross several fields of a struct. This
    generated a couple of warnings on x86_64 builds in sanitize_boot_params().
    
    Fix this by explicitly saving the fields in struct boot_params
    that are intended to be preserved, and zeroing all the rest.
    
    [ tglx: Tagged for stable as it breaks the warning free build there as well ]
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Suggested-by: H. Peter Anvin <hpa@zytor.com>
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190731054627.5627-2-jhubbard@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0a0e3bf98fc3c0f13b669ea2a66995d677a2484
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Aug 9 14:54:07 2019 +0200

    x86/apic: Handle missing global clockevent gracefully
    
    commit f897e60a12f0b9146357780d317879bce2a877dc upstream.
    
    Some newer machines do not advertise legacy timers. The kernel can handle
    that situation if the TSC and the CPU frequency are enumerated by CPUID or
    MSRs and the CPU supports TSC deadline timer. If the CPU does not support
    TSC deadline timer the local APIC timer frequency has to be known as well.
    
    Some Ryzens machines do not advertize legacy timers, but there is no
    reliable way to determine the bus frequency which feeds the local APIC
    timer when the machine allows overclocking of that frequency.
    
    As there is no legacy timer the local APIC timer calibration crashes due to
    a NULL pointer dereference when accessing the not installed global clock
    event device.
    
    Switch the calibration loop to a non interrupt based one, which polls
    either TSC (if frequency is known) or jiffies. The latter requires a global
    clockevent. As the machines which do not have a global clockevent installed
    have a known TSC frequency this is a non issue. For older machines where
    TSC frequency is not known, there is no known case where the legacy timers
    do not exist as that would have been reported long ago.
    
    Reported-by: Daniel Drake <drake@endlessm.com>
    Reported-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Daniel Drake <drake@endlessm.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1908091443030.21433@nanos.tec.linutronix.de
    Link: http://bugzilla.opensuse.org/show_bug.cgi?id=1142926#c12
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35b67f4f1659a5fbbdf0d99447ae085de31a7a99
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Aug 22 14:11:22 2019 -0700

    x86/retpoline: Don't clobber RFLAGS during CALL_NOSPEC on i386
    
    commit b63f20a778c88b6a04458ed6ffc69da953d3a109 upstream.
    
    Use 'lea' instead of 'add' when adjusting %rsp in CALL_NOSPEC so as to
    avoid clobbering flags.
    
    KVM's emulator makes indirect calls into a jump table of sorts, where
    the destination of the CALL_NOSPEC is a small blob of code that performs
    fast emulation by executing the target instruction with fixed operands.
    
      adcb_al_dl:
         0x000339f8 <+0>:   adc    %dl,%al
         0x000339fa <+2>:   ret
    
    A major motiviation for doing fast emulation is to leverage the CPU to
    handle consumption and manipulation of arithmetic flags, i.e. RFLAGS is
    both an input and output to the target of CALL_NOSPEC.  Clobbering flags
    results in all sorts of incorrect emulation, e.g. Jcc instructions often
    take the wrong path.  Sans the nops...
    
      asm("push %[flags]; popf; " CALL_NOSPEC " ; pushf; pop %[flags]\n"
         0x0003595a <+58>:  mov    0xc0(%ebx),%eax
         0x00035960 <+64>:  mov    0x60(%ebx),%edx
         0x00035963 <+67>:  mov    0x90(%ebx),%ecx
         0x00035969 <+73>:  push   %edi
         0x0003596a <+74>:  popf
         0x0003596b <+75>:  call   *%esi
         0x000359a0 <+128>: pushf
         0x000359a1 <+129>: pop    %edi
         0x000359a2 <+130>: mov    %eax,0xc0(%ebx)
         0x000359b1 <+145>: mov    %edx,0x60(%ebx)
    
      ctxt->eflags = (ctxt->eflags & ~EFLAGS_MASK) | (flags & EFLAGS_MASK);
         0x000359a8 <+136>: mov    -0x10(%ebp),%eax
         0x000359ab <+139>: and    $0x8d5,%edi
         0x000359b4 <+148>: and    $0xfffff72a,%eax
         0x000359b9 <+153>: or     %eax,%edi
         0x000359bd <+157>: mov    %edi,0x4(%ebx)
    
    For the most part this has gone unnoticed as emulation of guest code
    that can trigger fast emulation is effectively limited to MMIO when
    running on modern hardware, and MMIO is rarely, if ever, accessed by
    instructions that affect or consume flags.
    
    Breakage is almost instantaneous when running with unrestricted guest
    disabled, in which case KVM must emulate all instructions when the guest
    has invalid state, e.g. when the guest is in Big Real Mode during early
    BIOS.
    
    Fixes: 776b043848fd2 ("x86/retpoline: Add initial retpoline support")
    Fixes: 1a29b5b7f347a ("KVM: x86: Make indirect calls in emulator speculation safe")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190822211122.27579-1-sean.j.christopherson@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 858cfbe83a441d1401195cda9d41784676405f8d
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Sat Aug 24 17:54:56 2019 -0700

    userfaultfd_release: always remove uffd flags and clear vm_userfaultfd_ctx
    
    commit 46d0b24c5ee10a15dfb25e20642f5a5ed59c5003 upstream.
    
    userfaultfd_release() should clear vm_flags/vm_userfaultfd_ctx even if
    mm->core_state != NULL.
    
    Otherwise a page fault can see userfaultfd_missing() == T and use an
    already freed userfaultfd_ctx.
    
    Link: http://lkml.kernel.org/r/20190820160237.GB4983@redhat.com
    Fixes: 04f5866e41fb ("coredump: fix race condition between mmget_not_zero()/get_task_mm() and core dumping")
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Reported-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Tested-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74c6926bf9884befde60a432b8322db4ee364c4e
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Thu Aug 8 05:40:04 2019 -0400

    Revert "dm bufio: fix deadlock with loop device"
    
    commit cf3591ef832915892f2499b7e54b51d4c578b28c upstream.
    
    Revert the commit bd293d071ffe65e645b4d8104f9d8fe15ea13862. The proper
    fix has been made available with commit d0a255e795ab ("loop: set
    PF_MEMALLOC_NOIO for the worker thread").
    
    Note that the fix offered by commit bd293d071ffe doesn't really prevent
    the deadlock from occuring - if we look at the stacktrace reported by
    Junxiao Bi, we see that it hangs in bit_wait_io and not on the mutex -
    i.e. it has already successfully taken the mutex. Changing the mutex
    from mutex_lock to mutex_trylock won't help with deadlocks that happen
    afterwards.
    
    PID: 474    TASK: ffff8813e11f4600  CPU: 10  COMMAND: "kswapd0"
       #0 [ffff8813dedfb938] __schedule at ffffffff8173f405
       #1 [ffff8813dedfb990] schedule at ffffffff8173fa27
       #2 [ffff8813dedfb9b0] schedule_timeout at ffffffff81742fec
       #3 [ffff8813dedfba60] io_schedule_timeout at ffffffff8173f186
       #4 [ffff8813dedfbaa0] bit_wait_io at ffffffff8174034f
       #5 [ffff8813dedfbac0] __wait_on_bit at ffffffff8173fec8
       #6 [ffff8813dedfbb10] out_of_line_wait_on_bit at ffffffff8173ff81
       #7 [ffff8813dedfbb90] __make_buffer_clean at ffffffffa038736f [dm_bufio]
       #8 [ffff8813dedfbbb0] __try_evict_buffer at ffffffffa0387bb8 [dm_bufio]
       #9 [ffff8813dedfbbd0] dm_bufio_shrink_scan at ffffffffa0387cc3 [dm_bufio]
      #10 [ffff8813dedfbc40] shrink_slab at ffffffff811a87ce
      #11 [ffff8813dedfbd30] shrink_zone at ffffffff811ad778
      #12 [ffff8813dedfbdc0] kswapd at ffffffff811ae92f
      #13 [ffff8813dedfbec0] kthread at ffffffff810a8428
      #14 [ffff8813dedfbf50] ret_from_fork at ffffffff81745242
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: bd293d071ffe ("dm bufio: fix deadlock with loop device")
    Depends-on: d0a255e795ab ("loop: set PF_MEMALLOC_NOIO for the worker thread")
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a19535e838d5a1e9872367ec5e80c46e850485e5
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Fri Aug 16 12:00:54 2019 -0700

    HID: wacom: correct misreported EKR ring values
    
    commit fcf887e7caaa813eea821d11bf2b7619a37df37a upstream.
    
    The EKR ring claims a range of 0 to 71 but actually reports
    values 1 to 72. The ring is used in relative mode so this
    change should not affect users.
    
    Signed-off-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Fixes: 72b236d60218f ("HID: wacom: Add support for Express Key Remote.")
    Cc: <stable@vger.kernel.org> # v4.3+
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a43b6e062d6966eb7dcd72e25ad041250e9f3b42
Author: Naresh Kamboju <naresh.kamboju () linaro ! org>
Date:   Wed Aug 7 13:58:14 2019 +0000

    selftests: kvm: Adding config fragments
    
    [ Upstream commit c096397c78f766db972f923433031f2dec01cae0 ]
    
    selftests kvm test cases need pre-required kernel configs for the test
    to get pass.
    
    Signed-off-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2b2a7dd72c6c6cb5bac6b96d8b6bb31ca227825
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Aug 7 12:23:57 2019 -0600

    libata: add SG safety checks in SFF pio transfers
    
    [ Upstream commit 752ead44491e8c91e14d7079625c5916b30921c5 ]
    
    Abort processing of a command if we run out of mapped data in the
    SG list. This should never happen, but a previous bug caused it to
    be possible. Play it safe and attempt to abort nicely if we don't
    have more SG segments left.
    
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 114bf652fbb64f77eb99fa5eb7d7b78d9963e6d3
Author: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
Date:   Sat Aug 3 20:31:41 2019 +0800

    net: hisilicon: Fix dma_map_single failed on arm64
    
    [ Upstream commit 96a50c0d907ac8f5c3d6b051031a19eb8a2b53e3 ]
    
    On the arm64 platform, executing "ifconfig eth0 up" will fail,
    returning "ifconfig: SIOCSIFFLAGS: Input/output error."
    
    ndev->dev is not initialized, dma_map_single->get_dma_ops->
    dummy_dma_ops->__dummy_map_page will return DMA_ERROR_CODE
    directly, so when we use dma_map_single, the first parameter
    is to use the device of platform_device.
    
    Signed-off-by: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3ae5d356fb608716555ac97ba1b37a52dc0b0d9
Author: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
Date:   Sat Aug 3 20:31:40 2019 +0800

    net: hisilicon: fix hip04-xmit never return TX_BUSY
    
    [ Upstream commit f2243b82785942be519016067ee6c55a063bbfe2 ]
    
    TX_DESC_NUM is 256, in tx_count, the maximum value of
    mod(TX_DESC_NUM - 1) is 254, the variable "count" in
    the hip04_mac_start_xmit function is never equal to
    (TX_DESC_NUM - 1), so hip04_mac_start_xmit never
    return NETDEV_TX_BUSY.
    
    tx_count is modified to mod(TX_DESC_NUM) so that
    the maximum value of tx_count can reach
    (TX_DESC_NUM - 1), then hip04_mac_start_xmit can reurn
    NETDEV_TX_BUSY.
    
    Signed-off-by: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47cadfd9715630479c1930756aed18713f8c0aba
Author: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
Date:   Sat Aug 3 20:31:39 2019 +0800

    net: hisilicon: make hip04_tx_reclaim non-reentrant
    
    [ Upstream commit 1a2c070ae805910a853b4a14818481ed2e17c727 ]
    
    If hip04_tx_reclaim is interrupted while it is running
    and then __napi_schedule continues to execute
    hip04_rx_poll->hip04_tx_reclaim, reentrancy occurs
    and oops is generated. So you need to mask the interrupt
    during the hip04_tx_reclaim run.
    
    The kernel oops exception stack is as follows:
    
    Unable to handle kernel NULL pointer dereference
    at virtual address 00000050
    pgd = c0003000
    [00000050] *pgd=80000000a04003, *pmd=00000000
    Internal error: Oops: 206 [#1] SMP ARM
    Modules linked in: hip04_eth mtdblock mtd_blkdevs mtd
    ohci_platform ehci_platform ohci_hcd ehci_hcd
    vfat fat sd_mod usb_storage scsi_mod usbcore usb_common
    CPU: 0 PID: 0 Comm: swapper/0 Tainted: G           O    4.4.185 #1
    Hardware name: Hisilicon A15
    task: c0a250e0 task.stack: c0a00000
    PC is at hip04_tx_reclaim+0xe0/0x17c [hip04_eth]
    LR is at hip04_tx_reclaim+0x30/0x17c [hip04_eth]
    pc : [<bf30c3a4>]    lr : [<bf30c2f4>]    psr: 600e0313
    sp : c0a01d88  ip : 00000000  fp : c0601f9c
    r10: 00000000  r9 : c3482380  r8 : 00000001
    r7 : 00000000  r6 : 000000e1  r5 : c3482000  r4 : 0000000c
    r3 : f2209800  r2 : 00000000  r1 : 00000000  r0 : 00000000
    Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel
    Control: 32c5387d  Table: 03d28c80  DAC: 55555555
    Process swapper/0 (pid: 0, stack limit = 0xc0a00190)
    Stack: (0xc0a01d88 to 0xc0a02000)
    [<bf30c3a4>] (hip04_tx_reclaim [hip04_eth]) from [<bf30d2e0>]
                                                    (hip04_rx_poll+0x88/0x368 [hip04_eth])
    [<bf30d2e0>] (hip04_rx_poll [hip04_eth]) from [<c04c2d9c>] (net_rx_action+0x114/0x34c)
    [<c04c2d9c>] (net_rx_action) from [<c021eed8>] (__do_softirq+0x218/0x318)
    [<c021eed8>] (__do_softirq) from [<c021f284>] (irq_exit+0x88/0xac)
    [<c021f284>] (irq_exit) from [<c0240090>] (msa_irq_exit+0x11c/0x1d4)
    [<c0240090>] (msa_irq_exit) from [<c02677e0>] (__handle_domain_irq+0x110/0x148)
    [<c02677e0>] (__handle_domain_irq) from [<c0201588>] (gic_handle_irq+0xd4/0x118)
    [<c0201588>] (gic_handle_irq) from [<c0551700>] (__irq_svc+0x40/0x58)
    Exception stack(0xc0a01f30 to 0xc0a01f78)
    1f20:                                     c0ae8b40 00000000 00000000 00000000
    1f40: 00000002 ffffe000 c0601f9c 00000000 ffffffff c0a2257c c0a22440 c0831a38
    1f60: c0a01ec4 c0a01f80 c0203714 c0203718 600e0213 ffffffff
    [<c0551700>] (__irq_svc) from [<c0203718>] (arch_cpu_idle+0x20/0x3c)
    [<c0203718>] (arch_cpu_idle) from [<c025bfd8>] (cpu_startup_entry+0x244/0x29c)
    [<c025bfd8>] (cpu_startup_entry) from [<c054b0d8>] (rest_init+0xc8/0x10c)
    [<c054b0d8>] (rest_init) from [<c0800c58>] (start_kernel+0x468/0x514)
    Code: a40599e5 016086e2 018088e2 7660efe6 (503090e5)
    ---[ end trace 1db21d6d09c49d74 ]---
    Kernel panic - not syncing: Fatal exception in interrupt
    CPU3: stopping
    CPU: 3 PID: 0 Comm: swapper/3 Tainted: G      D    O    4.4.185 #1
    
    Signed-off-by: Jiangfeng Xiao <xiaojiangfeng@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acd6061a2a02ea8cd3b5e139b37544fbc8ff62b1
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Aug 6 10:55:12 2019 +0200

    net: cxgb3_main: Fix a resource leak in a error path in 'init_one()'
    
    [ Upstream commit debea2cd3193ac868289e8893c3a719c265b0612 ]
    
    A call to 'kfree_skb()' is missing in the error handling path of
    'init_one()'.
    This is already present in 'remove_one()' but is missing here.
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d72eb7187dcb1c9ead351b39613a4c50347d304a
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sat Aug 3 10:11:27 2019 -0400

    NFSv4: Fix a potential sleep while atomic in nfs4_do_reclaim()
    
    [ Upstream commit c77e22834ae9a11891cb613bd9a551be1b94f2bc ]
    
    John Hubbard reports seeing the following stack trace:
    
    nfs4_do_reclaim
       rcu_read_lock /* we are now in_atomic() and must not sleep */
           nfs4_purge_state_owners
               nfs4_free_state_owner
                   nfs4_destroy_seqid_counter
                       rpc_destroy_wait_queue
                           cancel_delayed_work_sync
                               __cancel_work_timer
                                   __flush_work
                                       start_flush_work
                                           might_sleep:
                                            (kernel/workqueue.c:2975: BUG)
    
    The solution is to separate out the freeing of the state owners
    from nfs4_purge_state_owners(), and perform that outside the atomic
    context.
    
    Reported-by: John Hubbard <jhubbard@nvidia.com>
    Fixes: 0aaaf5c424c7f ("NFS: Cache state owners after files are closed")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f46dbe266aa22ab434ec59d7662489f7bd5593d
Author: Wang Xiayang <xywang.sjtu@sjtu.edu.cn>
Date:   Wed Jul 31 15:25:59 2019 +0800

    can: peak_usb: force the string buffer NULL-terminated
    
    [ Upstream commit e787f19373b8a5fa24087800ed78314fd17b984a ]
    
    strncpy() does not ensure NULL-termination when the input string size
    equals to the destination buffer size IFNAMSIZ. The output string is
    passed to dev_info() which relies on the NULL-termination.
    
    Use strlcpy() instead.
    
    This issue is identified by a Coccinelle script.
    
    Signed-off-by: Wang Xiayang <xywang.sjtu@sjtu.edu.cn>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 583354067975006d3583c26a8fe0cf104b2b3d19
Author: Wang Xiayang <xywang.sjtu@sjtu.edu.cn>
Date:   Wed Jul 31 15:31:14 2019 +0800

    can: sja1000: force the string buffer NULL-terminated
    
    [ Upstream commit cd28aa2e056cd1ea79fc5f24eed0ce868c6cab5c ]
    
    strncpy() does not ensure NULL-termination when the input string size
    equals to the destination buffer size IFNAMSIZ. The output string
    'name' is passed to dev_info which relies on NULL-termination.
    
    Use strlcpy() instead.
    
    This issue is identified by a Coccinelle script.
    
    Signed-off-by: Wang Xiayang <xywang.sjtu@sjtu.edu.cn>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2931cc0aa9121a772593befa522341023ac39508
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Thu Aug 1 16:26:42 2019 +0200

    perf bench numa: Fix cpu0 binding
    
    [ Upstream commit 6bbfe4e602691b90ac866712bd4c43c51e546a60 ]
    
    Michael reported an issue with perf bench numa failing with binding to
    cpu0 with '-0' option.
    
      # perf bench numa mem -p 3 -t 1 -P 512 -s 100 -zZcm0 --thp 1 -M 1 -ddd
      # Running 'numa/mem' benchmark:
    
       # Running main, "perf bench numa numa-mem -p 3 -t 1 -P 512 -s 100 -zZcm0 --thp 1 -M 1 -ddd"
      binding to node 0, mask: 0000000000000001 => -1
      perf: bench/numa.c:356: bind_to_memnode: Assertion `!(ret)' failed.
      Aborted (core dumped)
    
    This happens when the cpu0 is not part of node0, which is the benchmark
    assumption and we can see that's not the case for some powerpc servers.
    
    Using correct node for cpu0 binding.
    
    Reported-by: Michael Petlan <mpetlan@redhat.com>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
    Link: http://lkml.kernel.org/r/20190801142642.28004-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1f1bad0ac517937b4eabbb2484d62d7e012de6f
Author: Juliana Rodrigueiro <juliana.rodrigueiro@intra2net.com>
Date:   Wed Jul 31 15:17:23 2019 +0200

    isdn: hfcsusb: Fix mISDN driver crash caused by transfer buffer on the stack
    
    [ Upstream commit d8a1de3d5bb881507602bc02e004904828f88711 ]
    
    Since linux 4.9 it is not possible to use buffers on the stack for DMA transfers.
    
    During usb probe the driver crashes with "transfer buffer is on stack" message.
    
    This fix k-allocates a buffer to be used on "read_reg_atomic", which is a macro
    that calls "usb_control_msg" under the hood.
    
    Kernel 4.19 backtrace:
    
    usb_hcd_submit_urb+0x3e5/0x900
    ? sched_clock+0x9/0x10
    ? log_store+0x203/0x270
    ? get_random_u32+0x6f/0x90
    ? cache_alloc_refill+0x784/0x8a0
    usb_submit_urb+0x3b4/0x550
    usb_start_wait_urb+0x4e/0xd0
    usb_control_msg+0xb8/0x120
    hfcsusb_probe+0x6bc/0xb40 [hfcsusb]
    usb_probe_interface+0xc2/0x260
    really_probe+0x176/0x280
    driver_probe_device+0x49/0x130
    __driver_attach+0xa9/0xb0
    ? driver_probe_device+0x130/0x130
    bus_for_each_dev+0x5a/0x90
    driver_attach+0x14/0x20
    ? driver_probe_device+0x130/0x130
    bus_add_driver+0x157/0x1e0
    driver_register+0x51/0xe0
    usb_register_driver+0x5d/0x120
    ? 0xf81ed000
    hfcsusb_drv_init+0x17/0x1000 [hfcsusb]
    do_one_initcall+0x44/0x190
    ? free_unref_page_commit+0x6a/0xd0
    do_init_module+0x46/0x1c0
    load_module+0x1dc1/0x2400
    sys_init_module+0xed/0x120
    do_fast_syscall_32+0x7a/0x200
    entry_SYSENTER_32+0x6b/0xbe
    
    Signed-off-by: Juliana Rodrigueiro <juliana.rodrigueiro@intra2net.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95305808fcb29ef5e679d7a97f6e2013f237fa2f
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Fri Jul 26 16:27:36 2019 +0800

    isdn: mISDN: hfcsusb: Fix possible null-pointer dereferences in start_isoc_chain()
    
    [ Upstream commit a0d57a552b836206ad7705a1060e6e1ce5a38203 ]
    
    In start_isoc_chain(), usb_alloc_urb() on line 1392 may fail
    and return NULL. At this time, fifo->iso[i].urb is assigned to NULL.
    
    Then, fifo->iso[i].urb is used at some places, such as:
    LINE 1405:    fill_isoc_urb(fifo->iso[i].urb, ...)
                      urb->number_of_packets = num_packets;
                      urb->transfer_flags = URB_ISO_ASAP;
                      urb->actual_length = 0;
                      urb->interval = interval;
    LINE 1416:    fifo->iso[i].urb->...
    LINE 1419:    fifo->iso[i].urb->...
    
    Thus, possible null-pointer dereferences may occur.
    
    To fix these bugs, "continue" is added to avoid using fifo->iso[i].urb
    when it is NULL.
    
    These bugs are found by a static analysis tool STCheck written by us.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbfc4562e69fe7e6790137b37683e582d794ad5e
Author: Bob Ham <bob.ham@puri.sm>
Date:   Wed Jul 24 07:52:27 2019 -0700

    net: usb: qmi_wwan: Add the BroadMobi BM818 card
    
    [ Upstream commit 9a07406b00cdc6ec689dc142540739575c717f3c ]
    
    The BroadMobi BM818 M.2 card uses the QMI protocol
    
    Signed-off-by: Bob Ham <bob.ham@puri.sm>
    Signed-off-by: Angus Ainslie (Purism) <angus@akkea.ca>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25772b11f85e13a65dc429705a9e38f122709074
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Fri Jul 26 09:42:43 2019 +0300

    ASoC: ti: davinci-mcasp: Correct slot_width posed constraint
    
    [ Upstream commit 1e112c35e3c96db7c8ca6ddaa96574f00c06e7db ]
    
    The slot_width is a property for the bus while the constraint for
    SNDRV_PCM_HW_PARAM_SAMPLE_BITS is for the in memory format.
    
    Applying slot_width constraint to sample_bits works most of the time, but
    it will blacklist valid formats in some cases.
    
    With slot_width 24 we can support S24_3LE and S24_LE formats as they both
    look the same on the bus, but a a 24 constraint on sample_bits would not
    allow S24_LE as it is stored in 32bits in memory.
    
    Implement a simple hw_rule function to allow all formats which require less
    or equal number of bits on the bus as slot_width (if configured).
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Link: https://lore.kernel.org/r/20190726064244.3762-2-peter.ujfalusi@ti.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cdc11216827e32521674d572939a9d46c843081
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Tue Jul 23 17:11:51 2019 -0500

    st_nci_hci_connectivity_event_received: null check the allocation
    
    [ Upstream commit 3008e06fdf0973770370f97d5f1fba3701d8281d ]
    
    devm_kzalloc may fail and return NULL. So the null check is needed.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c697bfc26a4679e69f4ba9698468afbee3ea7bcd
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Tue Jul 23 17:04:30 2019 -0500

    st21nfca_connectivity_event_received: null check the allocation
    
    [ Upstream commit 9891d06836e67324c9e9c4675ed90fc8b8110034 ]
    
    devm_kzalloc may fail and return null. So the null check is needed.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc8438815624470629d0dd881708f19983d2f7c6
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Mon Jun 24 08:34:13 2019 +0000

    can: dev: call netif_carrier_off() in register_candev()
    
    [ Upstream commit c63845609c4700488e5eacd6ab4d06d5d420e5ef ]
    
    CONFIG_CAN_LEDS is deprecated. When trying to use the generic netdev
    trigger as suggested, there's a small inconsistency with the link
    property: The LED is on initially, stays on when the device is brought
    up, and then turns off (as expected) when the device is brought down.
    
    Make sure the LED always reflects the state of the CAN device.
    
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5927e91f5024c2316a29227162b540018aab006e
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Tue Jul 16 17:25:10 2019 -0500

    bonding: Force slave speed check after link state recovery for 802.3ad
    
    [ Upstream commit 12185dfe44360f814ac4ead9d22ad2af7511b2e9 ]
    
    The following scenario was encountered during testing of logical
    partition mobility on pseries partitions with bonded ibmvnic
    adapters in LACP mode.
    
    1. Driver receives a signal that the device has been
       swapped, and it needs to reset to initialize the new
       device.
    
    2. Driver reports loss of carrier and begins initialization.
    
    3. Bonding driver receives NETDEV_CHANGE notifier and checks
       the slave's current speed and duplex settings. Because these
       are unknown at the time, the bond sets its link state to
       BOND_LINK_FAIL and handles the speed update, clearing
       AD_PORT_LACP_ENABLE.
    
    4. Driver finishes recovery and reports that the carrier is on.
    
    5. Bond receives a new notification and checks the speed again.
       The speeds are valid but miimon has not altered the link
       state yet.  AD_PORT_LACP_ENABLE remains off.
    
    Because the slave's link state is still BOND_LINK_FAIL,
    no further port checks are made when it recovers. Though
    the slave devices are operational and have valid speed
    and duplex settings, the bond will not send LACPDU's. The
    simplest fix I can see is to force another speed check
    in bond_miimon_commit. This way the bond will update
    AD_PORT_LACP_ENABLE if needed when transitioning from
    BOND_LINK_FAIL to BOND_LINK_UP.
    
    CC: Jarod Wilson <jarod@redhat.com>
    CC: Jay Vosburgh <j.vosburgh@gmail.com>
    CC: Veaceslav Falico <vfalico@gmail.com>
    CC: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fd7fdc057e6368bb2606dbef675ec0efed546b7
Author: Wenwen Wang <wenwen@cs.uga.edu>
Date:   Sat Jul 20 07:22:45 2019 -0500

    netfilter: ebtables: fix a memory leak bug in compat
    
    [ Upstream commit 15a78ba1844a8e052c1226f930133de4cef4e7ad ]
    
    In compat_do_replace(), a temporary buffer is allocated through vmalloc()
    to hold entries copied from the user space. The buffer address is firstly
    saved to 'newinfo->entries', and later on assigned to 'entries_tmp'. Then
    the entries in this temporary buffer is copied to the internal kernel
    structure through compat_copy_entries(). If this copy process fails,
    compat_do_replace() should be terminated. However, the allocated temporary
    buffer is not freed on this path, leading to a memory leak.
    
    To fix the bug, free the buffer before returning from compat_do_replace().
    
    Signed-off-by: Wenwen Wang <wenwen@cs.uga.edu>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afbd69c7c6ce24af5a8165da74b41a7fcb00d0ef
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Mon May 13 13:47:25 2019 +0200

    MIPS: kernel: only use i8253 clocksource with periodic clockevent
    
    [ Upstream commit a07e3324538a989b7cdbf2c679be6a7f9df2544f ]
    
    i8253 clocksource needs a free running timer. This could only
    be used, if i8253 clockevent is set up as periodic.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4322f947c6f5a28cfb388a919a668ddf983080b4
Author: Ilya Trukhanov <lahvuun@gmail.com>
Date:   Tue Jul 2 13:37:16 2019 +0300

    HID: Add 044f:b320 ThrustMaster, Inc. 2 in 1 DT
    
    [ Upstream commit 65f11c72780fa9d598df88def045ccb6a885cf80 ]
    
    Enable force feedback for the Thrustmaster Dual Trigger 2 in 1 Rumble Force
    gamepad. Compared to other Thrustmaster devices, left and right rumble
    motors here are swapped.
    
    Signed-off-by: Ilya Trukhanov <lahvuun@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
