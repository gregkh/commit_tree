commit 88fd5f3bd7e7e20ef9455564ed26d757d1a55f09
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Mon May 13 15:02:45 2013 +0100

    Linux 3.2.45

commit 6af66ec5050bc0a5426192af0429240e8a87e9ca
Author: jerry.hoemann@hp.com <jerry.hoemann@hp.com>
Date:   Tue May 7 10:14:54 2013 -0600

    x86/mm: account for PGDIR_SIZE alignment
    
    Patch for 3.0-stable.  Function find_early_table_space removed upstream.
    
    Fixes panic in alloc_low_page due to pgt_buf overflow during
    init_memory_mapping.
    
    find_early_table_space sizes pgt_buf based upon the size of the
    memory being mapped, but it does not take into account the alignment
    of the memory.  When the region being mapped spans a 512GB (PGDIR_SIZE)
    alignment, a panic from alloc_low_pages occurs.
    
    kernel_physical_mapping_init takes into account PGDIR_SIZE alignment.
    This causes an extra call to alloc_low_page to be made.  This extra call
    isn't accounted for by find_early_table_space and causes a kernel panic.
    
    Change is to take into account PGDIR_SIZE alignment in find_early_table_space.
    
    Signed-off-by: Jerry Hoemann <jerry.hoemann@hp.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 88933df65d758f1568359393cae98b972e1559ff
Author: fran√ßois romieu <romieu@fr.zoreil.com>
Date:   Thu Jan 24 13:30:06 2013 +0000

    r8169: fix vlan tag read ordering.
    
    commit ce11ff5e5963e441feb591e76278528f876c332d upstream.
    
    Control of receive descriptor must not be returned to ethernet chipset
    before vlan tag processing is done.
    
    VLAN tag receive word is now reset both in normal and error path.
    
    Signed-off-by: Francois Romieu <romieu@fr.zoreil.com>
    Spotted-by: Timo Teras <timo.teras@iki.fi>
    Cc: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3abcaf2c9af435252f64c9b5512d38c89731a0b4
Author: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com>
Date:   Fri Mar 22 05:49:35 2013 +0000

    powerpc: fix numa distance for form0 device tree
    
    commit 7122beeee7bc1757682049780179d7c216dd1c83 upstream.
    
    The following commit breaks numa distance setup for old powerpc
    systems that use form0 encoding in device tree.
    
    commit 41eab6f88f24124df89e38067b3766b7bef06ddb
    powerpc/numa: Use form 1 affinity to setup node distance
    
    Device tree node /rtas/ibm,associativity-reference-points would
    index into /cpus/PowerPCxxxx/ibm,associativity based on form0 or
    form1 encoding detected by ibm,architecture-vec-5 property.
    
    All modern systems use form1 and current kernel code is correct.
    However, on older systems with form0 encoding, the numa distance
    will get hard coded as LOCAL_DISTANCE for all nodes.  This causes
    task scheduling anomaly since scheduler will skip building numa
    level domain (topmost domain with all cpus) if all numa distances
    are same.  (value of 'level' in sched_init_numa() will remain 0)
    
    Prior to the above commit:
    ((from) == (to) ? LOCAL_DISTANCE : REMOTE_DISTANCE)
    
    Restoring compatible behavior with this patch for old powerpc systems
    with device tree where numa distance are encoded as form0.
    
    Signed-off-by: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0e6f42bb651bb61744d529a9cfe540e292fad98a
Author: Chen Gang <gang.chen@asianux.com>
Date:   Mon Apr 29 15:05:19 2013 -0700

    kernel/audit_tree.c: tree will leak memory when failure occurs in audit_trim_trees()
    
    commit 12b2f117f3bf738c1a00a6f64393f1953a740bd4 upstream.
    
    audit_trim_trees() calls get_tree().  If a failure occurs we must call
    put_tree().
    
    [akpm@linux-foundation.org: run put_tree() before mutex_lock() for small scalability improvement]
    Signed-off-by: Chen Gang <gang.chen@asianux.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Eric Paris <eparis@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 449132d0c7163cdc82c29ae4eed3bf6ad6677274
Author: Benjamin Poirier <bpoirier@suse.de>
Date:   Fri Apr 6 07:20:21 2012 +0000

    ixgbe: add missing rtnl_lock in PM resume path
    
    commit 34948a947d1a576c10afee6d14792fd237549577 upstream.
    
    Upon resume from standby, ixgbe may trigger the ASSERT_RTNL() in
    netif_set_real_num_tx_queues(). The call stack is:
            netif_set_real_num_tx_queues
            ixgbe_set_num_queues
            ixgbe_init_interrupt_scheme
            ixgbe_resume
    
    Signed-off-by: Benjamin Poirier <bpoirier@suse.de>
    Tested-by: Stephen Ko <stephen.s.ko@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 53e587aa5ca81497d0ea6e340320ec5778d1f311
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Nov 15 11:32:18 2012 +0000

    drm/i915: Fix detection of base of stolen memory
    
    commit e12a2d53ae45a69aea499b64f75e7222cca0f12f upstream.
    
    The routine to query the base of stolen memory was using the wrong
    registers and the wrong encodings on virtually every platform.
    
    It was not until the G33 refresh, that a PCI config register was
    introduced that explicitly said where the stolen memory was. Prior to
    865G there was not even a register that said where the end of usable
    low memory was and where the stolen memory began (or ended depending
    upon chipset). Before then, one has to look at the BIOS memory maps to
    find the Top of Memory. Alas that is not exported by arch/x86 and so we
    have to resort to disabling stolen memory on gen2 for the time being.
    
    Then SandyBridge enlarged the PCI register to a full 32-bits and change
    the encoding of the address, so even though we happened to be querying
    the right register, we read the wrong bits and ended up using address 0
    for our stolen data, i.e. notably FBC.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    [bwh: Backported to 3.2: adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 03000102c151f4dab9a38aee831182df3be748d1
Author: Stefan Bader <stefan.bader@canonical.com>
Date:   Sat May 4 12:22:26 2013 +0200

    r8169: fix 8168evl frame padding.
    
    commit e5195c1f31f399289347e043d6abf3ffa80f0005 upstream.
    
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>
    Acked-by: Francois Romieu <romieu@fr.zoreil.com>
    Cc: hayeswang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8431bc6fb3dc3784973cc9471197e34b16f38b3b
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 19 17:26:26 2013 -0400

    sparc64: Fix race in TLB batch processing.
    
    [ Commits f36391d2790d04993f48da6a45810033a2cdf847 and
      f0af97070acbad5d6a361f485828223a4faaa0ee upstream. ]
    
    As reported by Dave Kleikamp, when we emit cross calls to do batched
    TLB flush processing we have a race because we do not synchronize on
    the sibling cpus completing the cross call.
    
    So meanwhile the TLB batch can be reset (tb->tlb_nr set to zero, etc.)
    and either flushes are missed or flushes will flush the wrong
    addresses.
    
    Fix this by using generic infrastructure to synchonize on the
    completion of the cross call.
    
    This first required getting the flush_tlb_pending() call out from
    switch_to() which operates with locks held and interrupts disabled.
    The problem is that smp_call_function_many() cannot be invoked with
    IRQs disabled and this is explicitly checked for with WARN_ON_ONCE().
    
    We get the batch processing outside of locked IRQ disabled sections by
    using some ideas from the powerpc port. Namely, we only batch inside
    of arch_{enter,leave}_lazy_mmu_mode() calls.  If we're not in such a
    region, we flush TLBs synchronously.
    
    1) Get rid of xcall_flush_tlb_pending and per-cpu type
       implementations.
    
    2) Do TLB batch cross calls instead via:
    
            smp_call_function_many()
                    tlb_pending_func()
                            __flush_tlb_pending()
    
    3) Batch only in lazy mmu sequences:
    
            a) Add 'active' member to struct tlb_batch
            b) Define __HAVE_ARCH_ENTER_LAZY_MMU_MODE
            c) Set 'active' in arch_enter_lazy_mmu_mode()
            d) Run batch and clear 'active' in arch_leave_lazy_mmu_mode()
            e) Check 'active' in tlb_batch_add_one() and do a synchronous
               flush if it's clear.
    
    4) Add infrastructure for synchronous TLB page flushes.
    
            a) Implement __flush_tlb_page and per-cpu variants, patch
               as needed.
            b) Likewise for xcall_flush_tlb_page.
            c) Implement smp_flush_tlb_page() to invoke the cross-call.
            d) Wire up global_flush_tlb_page() to the right routine based
               upon CONFIG_SMP
    
    5) It turns out that singleton batches are very common, 2 out of every
       3 batch flushes have only a single entry in them.
    
       The batch flush waiting is very expensive, both because of the poll
       on sibling cpu completeion, as well as because passing the tlb batch
       pointer to the sibling cpus invokes a shared memory dereference.
    
       Therefore, in flush_tlb_pending(), if there is only one entry in
       the batch perform a completely asynchronous global_flush_tlb_page()
       instead.
    
    Reported-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Acked-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 09cd035ccddd63f8e96c549d7bd80a19ecb822ef
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Apr 16 12:55:41 2013 +0000

    net: drop dst before queueing fragments
    
    [ Upstream commit 97599dc792b45b1669c3cdb9a4b365aad0232f65 ]
    
    Commit 4a94445c9a5c (net: Use ip_route_input_noref() in input path)
    added a bug in IP defragmentation handling, as non refcounted
    dst could escape an RCU protected section.
    
    Commit 64f3b9e203bd068 (net: ip_expire() must revalidate route) fixed
    the case of timeouts, but not the general problem.
    
    Tom Parkin noticed crashes in UDP stack and provided a patch,
    but further analysis permitted us to pinpoint the root cause.
    
    Before queueing a packet into a frag list, we must drop its dst,
    as this dst has limited lifetime (RCU protected)
    
    When/if a packet is finally reassembled, we use the dst of the very
    last skb, still protected by RCU and valid, as the dst of the
    reassembled packet.
    
    Use same logic in IPv6, as there is no need to hold dst references.
    
    Reported-by: Tom Parkin <tparkin@katalix.com>
    Tested-by: Tom Parkin <tparkin@katalix.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit aab74a81920693e6852b2adfdcec92411c7e10d7
Author: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
Date:   Tue Apr 9 10:07:19 2013 +0800

    netrom: fix invalid use of sizeof in nr_recvmsg()
    
    [ Upstream commit c802d759623acbd6e1ee9fbdabae89159a513913 ]
    
    sizeof() when applied to a pointer typed expression gives the size of the
    pointer, not that of the pointed data.
    Introduced by commit 3ce5ef(netrom: fix info leak via msg_name in nr_recvmsg)
    
    Signed-off-by: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1ae38900523eaf11a77c73827c096d7e7eade3a4
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:00 2013 +0000

    tipc: fix info leaks via msg_name in  recv_msg/recv_stream
    
    [ Upstream commit 60085c3d009b0df252547adb336d1ccca5ce52ec ]
    
    The code in set_orig_addr() does not initialize all of the members of
    struct sockaddr_tipc when filling the sockaddr info -- namely the union
    is only partly filled. This will make recv_msg() and recv_stream() --
    the only users of this function -- leak kernel stack memory as the
    msg_name member is a local variable in net/socket.c.
    
    Additionally to that both recv_msg() and recv_stream() fail to update
    the msg_namelen member to 0 while otherwise returning with 0, i.e.
    "success". This is the case for, e.g., non-blocking sockets. This will
    lead to a 128 byte kernel stack leak in net/socket.c.
    
    Fix the first issue by initializing the memory of the union with
    memset(0). Fix the second one by setting msg_namelen to 0 early as it
    will be updated later if we're going to fill the msg_name member.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f05503a9ef115c505b36fcd75f77b341811e9169
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:59 2013 +0000

    rose: fix info leak via msg_name in rose_recvmsg()
    
    [ Upstream commit 4a184233f21645cf0b719366210ed445d1024d72 ]
    
    The code in rose_recvmsg() does not initialize all of the members of
    struct sockaddr_rose/full_sockaddr_rose when filling the sockaddr info.
    Nor does it initialize the padding bytes of the structure inserted by
    the compiler for alignment. This will lead to leaking uninitialized
    kernel stack bytes in net/socket.c.
    
    Fix the issue by initializing the memory used for sockaddr info with
    memset(0).
    
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c0bf432a4c3e6870fc87debb9393cb93f638dcba
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:57 2013 +0000

    netrom: fix info leak via msg_name in nr_recvmsg()
    
    [ Upstream commits 3ce5efad47b62c57a4f5c54248347085a750ce0e and
      c802d759623acbd6e1ee9fbdabae89159a513913 ]
    
    In case msg_name is set the sockaddr info gets filled out, as
    requested, but the code fails to initialize the padding bytes of
    struct sockaddr_ax25 inserted by the compiler for alignment. Also
    the sax25_ndigis member does not get assigned, leaking four more
    bytes.
    
    Both issues lead to the fact that the code will leak uninitialized
    kernel stack bytes in net/socket.c.
    
    Fix both issues by initializing the memory with memset(0).
    
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit d0dd0a3d5d31807eea0d54bd561cf178c45a24ca
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:56 2013 +0000

    llc: Fix missing msg_namelen update in  llc_ui_recvmsg()
    
    [ Upstream commit c77a4b9cffb6215a15196ec499490d116dfad181 ]
    
    For stream sockets the code misses to update the msg_namelen member
    to 0 and therefore makes net/socket.c leak the local, uninitialized
    sockaddr_storage variable to userland -- 128 bytes of kernel stack
    memory. The msg_namelen update is also missing for datagram sockets
    in case the socket is shutting down during receive.
    
    Fix both issues by setting msg_namelen to 0 early. It will be
    updated later if we're going to fill the msg_name member.
    
    Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 40c157ba78681c45cc62dabde406b44ca3c76c2b
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:54 2013 +0000

    iucv: Fix missing msg_namelen update in  iucv_sock_recvmsg()
    
    [ Upstream commit a5598bd9c087dc0efc250a5221e5d0e6f584ee88 ]
    
    The current code does not fill the msg_name member in case it is set.
    It also does not set the msg_namelen member to 0 and therefore makes
    net/socket.c leak the local, uninitialized sockaddr_storage variable
    to userland -- 128 bytes of kernel stack memory.
    
    Fix that by simply setting msg_namelen to 0 as obviously nobody cared
    about iucv_sock_recvmsg() not filling the msg_name in case it was set.
    
    Cc: Ursula Braun <ursula.braun@de.ibm.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 402fb9f974f158d747e6c6944336cd9af7f349b2
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:53 2013 +0000

    irda: Fix missing msg_namelen update in  irda_recvmsg_dgram()
    
    [ Upstream commit 5ae94c0d2f0bed41d6718be743985d61b7f5c47d ]
    
    The current code does not fill the msg_name member in case it is set.
    It also does not set the msg_namelen member to 0 and therefore makes
    net/socket.c leak the local, uninitialized sockaddr_storage variable
    to userland -- 128 bytes of kernel stack memory.
    
    Fix that by simply setting msg_namelen to 0 as obviously nobody cared
    about irda_recvmsg_dgram() not filling the msg_name in case it was
    set.
    
    Cc: Samuel Ortiz <samuel@sortiz.org>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5bf0d2c0fe1a954f937be4ad1b3c63b34e08dc52
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:52 2013 +0000

    caif: Fix missing msg_namelen update in  caif_seqpkt_recvmsg()
    
    [ Upstream commit 2d6fbfe733f35c6b355c216644e08e149c61b271 ]
    
    The current code does not fill the msg_name member in case it is set.
    It also does not set the msg_namelen member to 0 and therefore makes
    net/socket.c leak the local, uninitialized sockaddr_storage variable
    to userland -- 128 bytes of kernel stack memory.
    
    Fix that by simply setting msg_namelen to 0 as obviously nobody cared
    about caif_seqpkt_recvmsg() not filling the msg_name in case it was
    set.
    
    Cc: Sjur Braendeland <sjur.brandeland@stericsson.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit bbad6f725f1d1b92e5eb3a7c6a8875eeec955747
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:50 2013 +0000

    Bluetooth: RFCOMM - Fix missing msg_namelen update in  rfcomm_sock_recvmsg()
    
    [ Upstream commit e11e0455c0d7d3d62276a0c55d9dfbc16779d691 ]
    
    If RFCOMM_DEFER_SETUP is set in the flags, rfcomm_sock_recvmsg() returns
    early with 0 without updating the possibly set msg_namelen member. This,
    in turn, leads to a 128 byte kernel stack leak in net/socket.c.
    
    Fix this by updating msg_namelen in this case. For all other cases it
    will be handled in bt_sock_stream_recvmsg().
    
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: Gustavo Padovan <gustavo@padovan.org>
    Cc: Johan Hedberg <johan.hedberg@gmail.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 95ee0fb7a014cdf80be37b329fa462ff3847f7c0
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:49 2013 +0000

    Bluetooth: fix possible info leak in bt_sock_recvmsg()
    
    [ Upstream commit 4683f42fde3977bdb4e8a09622788cc8b5313778 ]
    
    In case the socket is already shutting down, bt_sock_recvmsg() returns
    with 0 without updating msg_namelen leading to net/socket.c leaking the
    local, uninitialized sockaddr_storage variable to userland -- 128 bytes
    of kernel stack memory.
    
    Fix this by moving the msg_namelen assignment in front of the shutdown
    test.
    
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Cc: Gustavo Padovan <gustavo@padovan.org>
    Cc: Johan Hedberg <johan.hedberg@gmail.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit e72f86d5b6602c86efb08443c58086c40228b81b
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:48 2013 +0000

    ax25: fix info leak via msg_name in ax25_recvmsg()
    
    [ Upstream commit ef3313e84acbf349caecae942ab3ab731471f1a1 ]
    
    When msg_namelen is non-zero the sockaddr info gets filled out, as
    requested, but the code fails to initialize the padding bytes of struct
    sockaddr_ax25 inserted by the compiler for alignment. Additionally the
    msg_namelen value is updated to sizeof(struct full_sockaddr_ax25) but is
    not always filled up to this size.
    
    Both issues lead to the fact that the code will leak uninitialized
    kernel stack bytes in net/socket.c.
    
    Fix both issues by initializing the memory with memset(0).
    
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2a8c07b253bac436358adb9eb96a37dd223ef120
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:51:47 2013 +0000

    atm: update msg_namelen in vcc_recvmsg()
    
    [ Upstream commit 9b3e617f3df53822345a8573b6d358f6b9e5ed87 ]
    
    The current code does not fill the msg_name member in case it is set.
    It also does not set the msg_namelen member to 0 and therefore makes
    net/socket.c leak the local, uninitialized sockaddr_storage variable
    to userland -- 128 bytes of kernel stack memory.
    
    Fix that by simply setting msg_namelen to 0 as obviously nobody cared
    about vcc_recvmsg() not filling the msg_name in case it was set.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 60986f51c3db46081a9cb9fd469ad65cd1ccb833
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Apr 19 07:19:48 2013 +0000

    tcp: call tcp_replace_ts_recent() from tcp_ack()
    
    [ Upstream commit 12fb3dd9dc3c64ba7d64cec977cca9b5fb7b1d4e ]
    
    commit bd090dfc634d (tcp: tcp_replace_ts_recent() should not be called
    from tcp_validate_incoming()) introduced a TS ecr bug in slow path
    processing.
    
    1 A > B P. 1:10001(10000) ack 1 <nop,nop,TS val 1001 ecr 200>
    2 B < A . 1:1(0) ack 1 win 257 <sack 9001:10001,TS val 300 ecr 1001>
    3 A > B . 1:1001(1000) ack 1 win 227 <nop,nop,TS val 1002 ecr 200>
    4 A > B . 1001:2001(1000) ack 1 win 227 <nop,nop,TS val 1002 ecr 200>
    
    (ecr 200 should be ecr 300 in packets 3 & 4)
    
    Problem is tcp_ack() can trigger send of new packets (retransmits),
    reflecting the prior TSval, instead of the TSval contained in the
    currently processed incoming packet.
    
    Fix this by calling tcp_replace_ts_recent() from tcp_ack() after the
    checks, but before the actions.
    
    Reported-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9f5c2767c8c12861bafc76e1f33435af3f92f40f
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Feb 7 00:55:37 2013 +0000

    net: sctp: sctp_auth_key_put: use kzfree instead of  kfree
    
    [ Upstream commit 586c31f3bf04c290dc0a0de7fc91d20aa9a5ee53 ]
    
    For sensitive data like keying material, it is common practice to zero
    out keys before returning the memory back to the allocator. Thus, use
    kzfree instead of kfree.
    
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3932af2c9a664a2550debd923b3c6d050aed1bc4
Author: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
Date:   Sat Apr 13 15:49:03 2013 +0000

    esp4: fix error return code in esp_output()
    
    [ Upstream commit 06848c10f720cbc20e3b784c0df24930b7304b93 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as returned elsewhere in this function.
    
    Signed-off-by: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
    Acked-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0df4e84995c7f69103a3553d1a3dcb5da4caab79
Author: Dmitry Popov <dp@highloadlab.com>
Date:   Thu Apr 11 08:55:07 2013 +0000

    tcp: incoming connections might use wrong route under  synflood
    
    [ Upstream commit d66954a066158781ccf9c13c91d0316970fe57b6 ]
    
    There is a bug in cookie_v4_check (net/ipv4/syncookies.c):
            flowi4_init_output(&fl4, 0, sk->sk_mark, RT_CONN_FLAGS(sk),
                               RT_SCOPE_UNIVERSE, IPPROTO_TCP,
                               inet_sk_flowi_flags(sk),
                               (opt && opt->srr) ? opt->faddr : ireq->rmt_addr,
                               ireq->loc_addr, th->source, th->dest);
    
    Here we do not respect sk->sk_bound_dev_if, therefore wrong dst_entry may be
    taken. This dst_entry is used by new socket (get_cookie_sock ->
    tcp_v4_syn_recv_sock), so its packets may take the wrong path.
    
    Signed-off-by: Dmitry Popov <dp@highloadlab.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 666617d8dda49d71ff96fcf961852941c47fc13a
Author: Michael Riesch <michael.riesch@omicron.at>
Date:   Mon Apr 8 05:45:26 2013 +0000

    rtnetlink: Call nlmsg_parse() with correct header  length
    
    [ Upstream commit 88c5b5ce5cb57af6ca2a7cf4d5715fa320448ff9 ]
    
    Signed-off-by: Michael Riesch <michael.riesch@omicron.at>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Benc <jbenc@redhat.com>
    Cc: "Theodore Ts'o" <tytso@mit.edu>
    Cc: linux-kernel@vger.kernel.org
    Acked-by: Mark Rustad <mark.d.rustad@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 08d849ac4e7717d1d9ad4a442432d176df44ae43
Author: Patrick McHardy <kaber@trash.net>
Date:   Fri Apr 5 20:42:05 2013 +0200

    netfilter: don't reset nf_trace in nf_reset()
    
    [ Upstream commit 124dff01afbdbff251f0385beca84ba1b9adda68 ]
    
    Commit 130549fe ("netfilter: reset nf_trace in nf_reset") added code
    to reset nf_trace in nf_reset(). This is wrong and unnecessary.
    
    nf_reset() is used in the following cases:
    
    - when passing packets up the the socket layer, at which point we want to
      release all netfilter references that might keep modules pinned while
      the packet is queued. nf_trace doesn't matter anymore at this point.
    
    - when encapsulating or decapsulating IPsec packets. We want to continue
      tracing these packets after IPsec processing.
    
    - when passing packets through virtual network devices. Only devices on
      that encapsulate in IPv4/v6 matter since otherwise nf_trace is not
      used anymore. Its not entirely clear whether those packets should
      be traced after that, however we've always done that.
    
    - when passing packets through virtual network devices that make the
      packet cross network namespace boundaries. This is the only cases
      where we clearly want to reset nf_trace and is also what the
      original patch intended to fix.
    
    Add a new function nf_reset_trace() and use it in dev_forward_skb() to
    fix this properly.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 171a68064def4bf3cbd4cda16664bf1de515c649
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Wed Apr 3 16:14:47 2013 +0000

    af_unix: If we don't care about credentials coallesce  all messages
    
    [ Upstream commit 0e82e7f6dfeec1013339612f74abc2cdd29d43d2 ]
    
    It was reported that the following LSB test case failed
    https://lsbbugs.linuxfoundation.org/attachment.cgi?id=2144 because we
    were not coallescing unix stream messages when the application was
    expecting us to.
    
    The problem was that the first send was before the socket was accepted
    and thus sock->sk_socket was NULL in maybe_add_creds, and the second
    send after the socket was accepted had a non-NULL value for sk->socket
    and thus we could tell the credentials were not needed so we did not
    bother.
    
    The unnecessary credentials on the first message cause
    unix_stream_recvmsg to start verifying that all messages had the same
    credentials before coallescing and then the coallescing failed because
    the second message had no credentials.
    
    Ignoring credentials when we don't care in unix_stream_recvmsg fixes a
    long standing pessimization which would fail to coallesce messages when
    reading from a unix stream socket if the senders were different even if
    we did not care about their credentials.
    
    I have tested this and verified that the in the LSB test case mentioned
    above that the messages do coallesce now, while the were failing to
    coallesce without this change.
    
    Reported-by: Karel Srot <ksrot@redhat.com>
    Reported-by: Ding Tianhong <dingtianhong@huawei.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 70c560e9ec8ab16abcb2a7dc5d2e4ff21dec2f95
Author: nikolay@redhat.com <nikolay@redhat.com>
Date:   Thu Apr 11 09:18:56 2013 +0000

    bonding: IFF_BONDING is not stripped on enslave  failure
    
    [ Upstream commit b6a5a7b9a528a8b4c8bec940b607c5dd9102b8cc ]
    
    While enslaving a new device and after IFF_BONDING flag is set, in case
    of failure it is not stripped from the device's priv_flags while
    cleaning up, which could lead to other problems.
    Cleaning at err_close because the flag is set after dev_open().
    
    v2: no change
    
    Signed-off-by: Nikolay Aleksandrov <nikolay@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 12f7b44dbf5cfc5bfd4db7ce03998dbc5adf7d38
Author: nikolay@redhat.com <nikolay@redhat.com>
Date:   Sat Apr 6 00:54:38 2013 +0000

    bonding: fix bonding_masters race condition in bond  unloading
    
    [ Upstream commit 69b0216ac255f523556fa3d4ff030d857eaaa37f ]
    
    While the bonding module is unloading, it is considered that after
    rtnl_link_unregister all bond devices are destroyed but since no
    synchronization mechanism exists, a new bond device can be created
    via bonding_masters before unregister_pernet_subsys which would
    lead to multiple problems (e.g. NULL pointer dereference, wrong RIP,
    list corruption).
    
    This patch fixes the issue by removing any bond devices left in the
    netns after bonding_masters is removed from sysfs.
    
    Signed-off-by: Nikolay Aleksandrov <nikolay@redhat.com>
    Acked-by: Veaceslav Falico <vfalico@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7bc063015a9aa096f84c1049d80bccd4de0d6273
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Tue Apr 2 14:36:46 2013 +0000

    atl1e: limit gso segment size to prevent generation of  wrong ip length fields
    
    [ Upstream commit 31d1670e73f4911fe401273a8f576edc9c2b5fea ]
    
    The limit of 0x3c00 is taken from the windows driver.
    
    Suggested-by: Huang, Xiong <xiong@qca.qualcomm.com>
    Cc: Huang, Xiong <xiong@qca.qualcomm.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c8b2a1ad3630f35394bc23595cfa075d60c81f18
Author: Vlad Yasevich <vyasevic@redhat.com>
Date:   Tue Apr 2 17:10:07 2013 -0400

    net: count hw_addr syncs so that unsync works  properly.
    
    [ Upstream commit 4543fbefe6e06a9e40d9f2b28d688393a299f079 ]
    
    A few drivers use dev_uc_sync/unsync to synchronize the
    address lists from master down to slave/lower devices.  In
    some cases (bond/team) a single address list is synched down
    to multiple devices.  At the time of unsync, we have a leak
    in these lower devices, because "synced" is treated as a
    boolean and the address will not be unsynced for anything after
    the first device/call.
    
    Treat "synced" as a count (same as refcount) and allow all
    unsync calls to work.
    
    Signed-off-by: Vlad Yasevich <vyasevic@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c1e0fcf7ab8dfdec5a752482880900bcfd7b9527
Author: Balakumaran Kannan <kumaran.4353@gmail.com>
Date:   Tue Apr 2 16:15:05 2013 +0530

    net IPv6 : Fix broken IPv6 routing table after  loopback down-up
    
    [ Upstream commit 25fb6ca4ed9cad72f14f61629b68dc03c0d9713f ]
    
    IPv6 Routing table becomes broken once we do ifdown, ifup of the loopback(lo)
    interface. After down-up, routes of other interface's IPv6 addresses through
    'lo' are lost.
    
    IPv6 addresses assigned to all interfaces are routed through 'lo' for internal
    communication. Once 'lo' is down, those routing entries are removed from routing
    table. But those removed entries are not being re-created properly when 'lo' is
    brought up. So IPv6 addresses of other interfaces becomes unreachable from the
    same machine. Also this breaks communication with other machines because of
    NDISC packet processing failure.
    
    This patch fixes this issue by reading all interface's IPv6 addresses and adding
    them to IPv6 routing table while bringing up 'lo'.
    
    ==Testing==
    Before applying the patch:
    $ route -A inet6
    Kernel IPv6 routing table
    Destination                    Next Hop                   Flag Met Ref Use If
    2000::20/128                   ::                         U    256 0     0 eth0
    fe80::/64                      ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    ::1/128                        ::                         Un   0   1     0 lo
    2000::20/128                   ::                         Un   0   1     0 lo
    fe80::xxxx:xxxx:xxxx:xxxx/128  ::                         Un   0   1     0 lo
    ff00::/8                       ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    $ sudo ifdown lo
    $ sudo ifup lo
    $ route -A inet6
    Kernel IPv6 routing table
    Destination                    Next Hop                   Flag Met Ref Use If
    2000::20/128                   ::                         U    256 0     0 eth0
    fe80::/64                      ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    ::1/128                        ::                         Un   0   1     0 lo
    ff00::/8                       ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    $
    
    After applying the patch:
    $ route -A inet6
    Kernel IPv6 routing
    table
    Destination                    Next Hop                   Flag Met Ref Use If
    2000::20/128                   ::                         U    256 0     0 eth0
    fe80::/64                      ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    ::1/128                        ::                         Un   0   1     0 lo
    2000::20/128                   ::                         Un   0   1     0 lo
    fe80::xxxx:xxxx:xxxx:xxxx/128  ::                         Un   0   1     0 lo
    ff00::/8                       ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    $ sudo ifdown lo
    $ sudo ifup lo
    $ route -A inet6
    Kernel IPv6 routing table
    Destination                    Next Hop                   Flag Met Ref Use If
    2000::20/128                   ::                         U    256 0     0 eth0
    fe80::/64                      ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    ::1/128                        ::                         Un   0   1     0 lo
    2000::20/128                   ::                         Un   0   1     0 lo
    fe80::xxxx:xxxx:xxxx:xxxx/128  ::                         Un   0   1     0 lo
    ff00::/8                       ::                         U    256 0     0 eth0
    ::/0                           ::                         !n   -1  1     1 lo
    $
    
    Signed-off-by: Balakumaran Kannan <Balakumaran.Kannan@ap.sony.com>
    Signed-off-by: Maruthi Thotad <Maruthi.Thotad@ap.sony.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 30a9b2b0fe981f605914df96a8a5d397d64bf7ee
Author: Vasily Averin <vvs@parallels.com>
Date:   Mon Apr 1 03:01:32 2013 +0000

    cbq: incorrect processing of high limits
    
    [ Upstream commit f0f6ee1f70c4eaab9d52cf7d255df4bd89f8d1c2 ]
    
    currently cbq works incorrectly for limits > 10% real link bandwidth,
    and practically does not work for limits > 50% real link bandwidth.
    Below are results of experiments taken on 1 Gbit link
    
     In shaper | Actual Result
    -----------+---------------
      100M     | 108 Mbps
      200M     | 244 Mbps
      300M     | 412 Mbps
      500M     | 893 Mbps
    
    This happen because of q->now changes incorrectly in cbq_dequeue():
    when it is called before real end of packet transmitting,
    L2T is greater than real time delay, q_now gets an extra boost
    but never compensate it.
    
    To fix this problem we prevent change of q->now until its synchronization
    with real time.
    
    Signed-off-by: Vasily Averin <vvs@openvz.org>
    Reviewed-by: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 67831724738a1d49962631430f3609cb76eeb846
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 19 09:46:39 2013 -0700

    vm: convert HPET mmap to vm_iomap_memory() helper
    
    commit 2323036dfec8ce3ce6e1c86a49a31b039f3300d1 upstream.
    
    This is my example conversion of a few existing mmap users.  The HPET
    case is simple, widely available, and easy to test (Clemens Ladisch sent
    a trivial test-program for it).
    
    Test-program-by: Clemens Ladisch <clemens@ladisch.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit fc6b92e0aa98ec9547bf779f4e71c0f259f794f3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 19 09:57:35 2013 -0700

    vm: convert fb_mmap to vm_iomap_memory() helper
    
    commit fc9bbca8f650e5f738af8806317c0a041a48ae4a upstream.
    
    This is my example conversion of a few existing mmap users.  The
    fb_mmap() case is a good example because it is a bit more complicated
    than some: fb_mmap() mmaps one of two different memory areas depending
    on the page offset of the mmap (but happily there is never any mixing of
    the two, so the helper function still works).
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.2: fold in the relevant part of commit 314e51b9851b
     'mm: kill vma flag VM_RESERVED and mm->reserved_vm counter']
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit dfdc98ac7e4a90c07bc988ab1870fd1528bd2100
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 19 10:01:04 2013 -0700

    vm: convert snd_pcm_lib_mmap_iomem() to vm_iomap_memory() helper
    
    commit 0fe09a45c4848b5b5607b968d959fdc1821c161d upstream.
    
    This is my example conversion of a few existing mmap users.  The pcm
    mmap case is one of the more straightforward ones.
    
    Acked-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4d3c99057cd2c18272dbb730cd31f1cd817d7379
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 16 13:45:37 2013 -0700

    vm: add vm_iomap_memory() helper function
    
    commit b4cbb197c7e7a68dbad0d491242e3ca67420c13e upstream.
    
    Various drivers end up replicating the code to mmap() their memory
    buffers into user space, and our core memory remapping function may be
    very flexible but it is unnecessarily complicated for the common cases
    to use.
    
    Our internal VM uses pfn's ("page frame numbers") which simplifies
    things for the VM, and allows us to pass physical addresses around in a
    denser and more efficient format than passing a "phys_addr_t" around,
    and having to shift it up and down by the page size.  But it just means
    that drivers end up doing that shifting instead at the interface level.
    
    It also means that drivers end up mucking around with internal VM things
    like the vma details (vm_pgoff, vm_start/end) way more than they really
    need to.
    
    So this just exports a function to map a certain physical memory range
    into user space (using a phys_addr_t based interface that is much more
    natural for a driver) and hides all the complexity from the driver.
    Some drivers will still end up tweaking the vm_page_prot details for
    things like prefetching or cacheability etc, but that's actually
    relevant to the driver, rather than caring about what the page offset of
    the mapping is into the particular IO memory region.
    
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 782809063b0deaf76c8f9665b4b793516c39504d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 17 08:46:19 2013 -0700

    s390: move dummy io_remap_pfn_range() to asm/pgtable.h
    
    commit 4f2e29031e6c67802e7370292dd050fd62f337ee upstream.
    
    Commit b4cbb197c7e7 ("vm: add vm_iomap_memory() helper function") added
    a helper function wrapper around io_remap_pfn_range(), and every other
    architecture defined it in <asm/pgtable.h>.
    
    The s390 choice of <asm/io.h> may make sense, but is not very convenient
    for this case, and gratuitous differences like that cause unexpected errors like this:
    
       mm/memory.c: In function 'vm_iomap_memory':
       mm/memory.c:2439:2: error: implicit declaration of function 'io_remap_pfn_range' [-Werror=implicit-function-declaration]
    
    Glory be the kbuild test robot who noticed this, bisected it, and
    reported it to the guilty parties (ie me).
    
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.2: the macro was not defined, so this is an addition
     and not a move]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4fcd6db795fa0f317deb7b64cce89ca2502ff934
Author: Stephane Eranian <eranian@google.com>
Date:   Tue Apr 16 13:51:43 2013 +0200

    perf/x86: Fix offcore_rsp valid mask for SNB/IVB
    
    commit f1923820c447e986a9da0fc6bf60c1dccdf0408e upstream.
    
    The valid mask for both offcore_response_0 and
    offcore_response_1 was wrong for SNB/SNB-EP,
    IVB/IVB-EP. It was possible to write to
    reserved bit and cause a GP fault crashing
    the kernel.
    
    This patch fixes the problem by correctly marking the
    reserved bits in the valid mask for all the processors
    mentioned above.
    
    A distinction between desktop and server parts is introduced
    because bits 24-30 are only available on the server parts.
    
    This version of the  patch is just a rebase to perf/urgent tree
    and should apply to older kernels as well.
    
    Signed-off-by: Stephane Eranian <eranian@google.com>
    Cc: peterz@infradead.org
    Cc: jolsa@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: security@kernel.org
    Cc: ak@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    [bwh: Backported to 3.2: adjust context; drop the IVB case]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3fc8fc1cc2d585c1f695f7de914063258aafe50e
Author: Tommi Rantala <tt.rantala@gmail.com>
Date:   Sat Apr 13 22:49:14 2013 +0300

    perf: Treat attr.config as u64 in perf_swevent_init()
    
    commit 8176cced706b5e5d15887584150764894e94e02f upstream.
    
    Trinity discovered that we fail to check all 64 bits of
    attr.config passed by user space, resulting to out-of-bounds
    access of the perf_swevent_enabled array in
    sw_perf_event_destroy().
    
    Introduced in commit b0a873ebb ("perf: Register PMU
    implementations").
    
    Signed-off-by: Tommi Rantala <tt.rantala@gmail.com>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: davej@redhat.com
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
    Link: http://lkml.kernel.org/r/1365882554-30259-1-git-send-email-tt.rantala@gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4221c304a05e4279d9f378519e81c6c69bc6fc4d
Author: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
Date:   Fri Apr 12 11:05:54 2013 +0800

    perf: Fix error return code
    
    commit c481420248c6730246d2a1b1773d5d7007ae0835 upstream.
    
    Fix to return -ENOMEM in the allocation error case instead of 0
    (if pmu_bus_running == 1), as done elsewhere in this function.
    
    Signed-off-by: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
    Cc: a.p.zijlstra@chello.nl
    Cc: paulus@samba.org
    Cc: acme@ghostprotocols.net
    Link: http://lkml.kernel.org/r/CAPgLHd8j_fWcgqe%3DKLWjpBj%2B%3Do0Pw6Z-SEq%3DNTPU08c2w1tngQ@mail.gmail.com
    [ Tweaked the error code setting placement and the changelog. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit cd945654552d978b84c0825c7206b2d0667a1272
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 1 07:32:21 2013 -0700

    tty: fix up atime/mtime mess, take three
    
    commit b0b885657b6c8ef63a46bc9299b2a7715d19acde upstream.
    
    We first tried to avoid updating atime/mtime entirely (commit
    b0de59b5733d: "TTY: do not update atime/mtime on read/write"), and then
    limited it to only update it occasionally (commit 37b7f3c76595: "TTY:
    fix atime/mtime regression"), but it turns out that this was both
    insufficient and overkill.
    
    It was insufficient because we let people attach to the shared ptmx node
    to see activity without even reading atime/mtime, and it was overkill
    because the "only once a minute" means that you can't really tell an
    idle person from an active one with 'w'.
    
    So this tries to fix the problem properly.  It marks the shared ptmx
    node as un-notifiable, and it lowers the "only once a minute" to a few
    seconds instead - still long enough that you can't time individual
    keystrokes, but short enough that you can tell whether somebody is
    active or not.
    
    Reported-by: Simon Kirby <sim@hostway.ca>
    Acked-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0b28f5865ef23d2bcee122d75b4aea1e2f052624
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Apr 26 13:48:53 2013 +0200

    TTY: fix atime/mtime regression
    
    commit 37b7f3c76595e23257f61bd80b223de8658617ee upstream.
    
    In commit b0de59b5733d ("TTY: do not update atime/mtime on read/write")
    we removed timestamps from tty inodes to fix a security issue and waited
    if something breaks.  Well, 'w', the utility to find out logged users
    and their inactivity time broke.  It shows that users are inactive since
    the time they logged in.
    
    To revert to the old behaviour while still preventing attackers to
    guess the password length, we update the timestamps in one-minute
    intervals by this patch.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: For 3.2, use Greg's backported version]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c29ad805df8c54a9f5d74c66bf5d4a2d449bd99a
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Feb 15 15:25:05 2013 +0100

    TTY: do not update atime/mtime on read/write
    
    commit b0de59b5733d18b0d1974a060860a8b5c1b36a2e upstream.
    
    On http://vladz.devzero.fr/013_ptmx-timing.php, we can see how to find
    out length of a password using timestamps of /dev/ptmx. It is
    documented in "Timing Analysis of Keystrokes and Timing Attacks on
    SSH". To avoid that problem, do not update time when reading
    from/writing to a TTY.
    
    I am afraid of regressions as this is a behavior we have since 0.97
    and apps may expect the time to be current, e.g. for monitoring
    whether there was a change on the TTY. Now, there is no change. So
    this would better have a lot of testing before it goes upstream.
    
    References: CVE-2013-0160
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 268a8c92cb70b59d71e51c22c20f7aac45971391
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed May 1 14:34:54 2013 -0400

    drm/radeon: fix handling of v6 power tables
    
    commit 441e76ca83ac604eaf0f046def96d8e3a27eea28 upstream.
    
    The code was mis-handling variable sized arrays.
    
    Reported-by: Sylvain BERTRAND <sylware@legeek.net>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f5c4fe5510d29b522298770314d38ba8b8d3a5dd
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Apr 25 09:29:17 2013 -0400

    drm/radeon: fix possible segfault when parsing pm tables
    
    commit f8e6bfc2ce162855fa4f9822a45659f4b542c960 upstream.
    
    If we have a empty power table, bail early and allocate
    the default power state.
    
    Should fix:
    https://bugs.freedesktop.org/show_bug.cgi?id=63865
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3165e128201118ec46ece188ccd565497cfc1f73
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Apr 24 14:39:31 2013 -0400

    drm/radeon: fix endian bugs in atom_allocate_fb_scratch()
    
    commit beb71fc61c2cad64e347f164991b8ef476529e64 upstream.
    
    Reviwed-by: Michel D√§nzer <michel.daenzer@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5a467624b1c06db5a47bf2fe58e41347686af512
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd upstream.
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9a91027ba2368234da322cb32d5c13a41731dd2d
Author: Greg Thelen <gthelen@google.com>
Date:   Tue Apr 30 15:26:48 2013 -0700

    fs/dcache.c: add cond_resched() to shrink_dcache_parent()
    
    commit 421348f1ca0bf17769dee0aed4d991845ae0536d upstream.
    
    Call cond_resched() in shrink_dcache_parent() to maintain interactivity.
    
    Before this patch:
    
            void shrink_dcache_parent(struct dentry * parent)
            {
                    while ((found = select_parent(parent, &dispose)) != 0)
                            shrink_dentry_list(&dispose);
            }
    
    select_parent() populates the dispose list with dentries which
    shrink_dentry_list() then deletes.  select_parent() carefully uses
    need_resched() to avoid doing too much work at once.  But neither
    shrink_dcache_parent() nor its called functions call cond_resched().  So
    once need_resched() is set select_parent() will return single dentry
    dispose list which is then deleted by shrink_dentry_list().  This is
    inefficient when there are a lot of dentry to process.  This can cause
    softlockup and hurts interactivity on non preemptable kernels.
    
    This change adds cond_resched() in shrink_dcache_parent().  The benefit
    of this is that need_resched() is quickly cleared so that future calls
    to select_parent() are able to efficiently return a big batch of dentry.
    
    These additional cond_resched() do not seem to impact performance, at
    least for the workload below.
    
    Here is a program which can cause soft lockup if other system activity
    sets need_resched().
    
            int main()
            {
                    struct rlimit rlim;
                    int i;
                    int f[100000];
                    char buf[20];
                    struct timeval t1, t2;
                    double diff;
    
                    /* cleanup past run */
                    system("rm -rf x");
    
                    /* boost nfile rlimit */
                    rlim.rlim_cur = 200000;
                    rlim.rlim_max = 200000;
                    if (setrlimit(RLIMIT_NOFILE, &rlim))
                            err(1, "setrlimit");
    
                    /* make directory for files */
                    if (mkdir("x", 0700))
                            err(1, "mkdir");
    
                    if (gettimeofday(&t1, NULL))
                            err(1, "gettimeofday");
    
                    /* populate directory with open files */
                    for (i = 0; i < 100000; i++) {
                            snprintf(buf, sizeof(buf), "x/%d", i);
                            f[i] = open(buf, O_CREAT);
                            if (f[i] == -1)
                                    err(1, "open");
                    }
    
                    /* close some of the files */
                    for (i = 0; i < 85000; i++)
                            close(f[i]);
    
                    /* unlink all files, even open ones */
                    system("rm -rf x");
    
                    if (gettimeofday(&t2, NULL))
                            err(1, "gettimeofday");
    
                    diff = (((double)t2.tv_sec * 1000000 + t2.tv_usec) -
                            ((double)t1.tv_sec * 1000000 + t1.tv_usec));
    
                    printf("done: %g elapsed\n", diff/1e6);
                    return 0;
            }
    
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit acc2e42842f2b46c87b8ed63e2c4626a6832d5f5
Author: Zhao Hongjiang <zhaohongjiang@huawei.com>
Date:   Tue Apr 30 15:26:46 2013 -0700

    inotify: invalid mask should return a error number but not set it
    
    commit 04df32fa10ab9a6f0643db2949d42efc966bc844 upstream.
    
    When we run the crackerjack testsuite, the inotify_add_watch test is
    stalled.
    
    This is caused by the invalid mask 0 - the task is waiting for the event
    but it never comes.  inotify_add_watch() should return -EINVAL as it did
    before commit 676a0675cf92 ("inotify: remove broken mask checks causing
    unmount to be EINVAL").  That commit removes the invalid mask check, but
    that check is needed.
    
    Check the mask's ALL_INOTIFY_BITS before the inotify_arg_to_mask() call.
    If none are set, just return -EINVAL.
    
    Because IN_UNMOUNT is in ALL_INOTIFY_BITS, this change will not trigger
    the problem that above commit fixed.
    
    [akpm@linux-foundation.org: fix build]
    Signed-off-by: Zhao Hongjiang <zhaohongjiang@huawei.com>
    Acked-by: Jim Somerville <Jim.Somerville@windriver.com>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Jerome Marchand <jmarchan@redhat.com>
    Cc: Eric Paris <eparis@parisplace.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit b6e777b986dc9af7b0a28e8a32b80aec2296684a
Author: NeilBrown <neilb@suse.de>
Date:   Wed Apr 24 11:42:44 2013 +1000

    md: bad block list should default to disabled.
    
    commit 486adf72ccc0c235754923d47a2270c5dcb0c98b upstream.
    
    Maintenance of a bad-block-list currently defaults to 'enabled'
    and is then disabled when it cannot be supported.
    This is backwards and causes problem for dm-raid which didn't know
    to disable it.
    
    So fix the defaults, and only enabled for v1.x metadata which
    explicitly has bad blocks enabled.
    
    The problem with dm-raid has been present since badblock support was
    added in v3.1, so this patch is suitable for any -stable from 3.1
    onwards.
    
    Reported-by: Jonathan Brassow <jbrassow@redhat.com>
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 84c2c44393f9d054aa07e75e68743364f1ad7c2d
Author: Derek Basehore <dbasehore@chromium.org>
Date:   Mon Apr 29 16:20:23 2013 -0700

    drivers/rtc/rtc-cmos.c: don't disable hpet emulation on suspend
    
    commit e005715efaf674660ae59af83b13822567e3a758 upstream.
    
    There's a bug where rtc alarms are ignored after the rtc cmos suspends
    but before the system finishes suspend.  Since hpet emulation is
    disabled and it still handles the interrupts, a wake event is never
    registered which is done from the rtc layer.
    
    This patch reverts commit d1b2efa83fbf ("rtc: disable hpet emulation on
    suspend") which disabled hpet emulation.  To fix the problem mentioned
    in that commit, hpet_rtc_timer_init() is called directly on resume.
    
    Signed-off-by: Derek Basehore <dbasehore@chromium.org>
    Cc: Maxim Levitsky <maximlevitsky@gmail.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit cd5c88dffc0627e3de717ae8eaf748554d6f7bd9
Author: Anurup m <anurup.m@huawei.com>
Date:   Mon Apr 29 15:05:52 2013 -0700

    fs/fscache/stats.c: fix memory leak
    
    commit ec686c9239b4d472052a271c505d04dae84214cc upstream.
    
    There is a kernel memory leak observed when the proc file
    /proc/fs/fscache/stats is read.
    
    The reason is that in fscache_stats_open, single_open is called and the
    respective release function is not called during release.  Hence fix
    with correct release function - single_release().
    
    Addresses https://bugzilla.kernel.org/show_bug.cgi?id=57101
    
    Signed-off-by: Anurup m <anurup.m@huawei.com>
    Cc: shyju pv <shyju.pv@huawei.com>
    Cc: Sanil kumar <sanil.kumar@huawei.com>
    Cc: Nataraj m <nataraj.m@huawei.com>
    Cc: Li Zefan <lizefan@huawei.com>
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 17ae25f05e68f0caeddf3590a3e67102a847c8f5
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Apr 26 15:29:55 2013 +0200

    ARM: u300: fix ages old copy/paste bug
    
    commit 0259d9eb30d003af305626db2d8332805696e60d upstream.
    
    The UART1 is on the fast AHB bridge, not on the slow bus.
    
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 61578d6be0c28763af82aa3c137773ac455ee88b
Author: Yogesh Ashok Powar <yogeshp@marvell.com>
Date:   Tue Apr 23 16:49:48 2013 -0700

    mwifiex: Call pci_release_region after calling pci_disable_device
    
    commit 5b0d9b218b74042ff72bf4bfda6eeb2e4bf98397 upstream.
    
    "drivers should call pci_release_region() AFTER
    calling pci_disable_device()"
    
    Please refer section 3.2 Request MMIO/IOP resources
    in Documentation/PCI/pci.txt
    
    Signed-off-by: Avinash Patil <patila@marvell.com>
    Signed-off-by: Amitkumar Karwar <akarwar@marvell.com>
    Signed-off-by: Yogesh Ashok Powar <yogeshp@marvell.com>
    Signed-off-by: Bing Zhao <bzhao@marvell.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 60969a27662323da45acbbd10cfb9699fed7cd42
Author: Yogesh Ashok Powar <yogeshp@marvell.com>
Date:   Tue Apr 23 16:49:47 2013 -0700

    mwifiex: Use pci_release_region() instead of a pci_release_regions()
    
    commit c380aafb77b7435d010698fe3ca6d3e1cd745fde upstream.
    
    PCI regions are associated with the device using
    pci_request_region() call. Hence use pci_release_region()
    instead of pci_release_regions().
    
    Signed-off-by: Yogesh Ashok Powar <yogeshp@marvell.com>
    Signed-off-by: Amitkumar Karwar <akarwar@marvell.com>
    Signed-off-by: Avinash Patil <patila@marvell.com>
    Signed-off-by: Bing Zhao <bzhao@marvell.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c17c749a528d18d173fcf071243bc2e4204d65d5
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Thu Apr 25 10:03:15 2013 +0200

    s390/memory hotplug: prevent offline of active memory increments
    
    commit 94c163663fc1dcfc067a5fb3cc1446b9469975ce upstream.
    
    In case a machine supports memory hotplug all active memory increments
    present at IPL time have been initialized with a "usecount" of 1.
    This is wrong if the memory increment size is larger than the memory
    section size of the memory hotplug code. If that is the case the
    usecount must be initialized with the number of memory sections that
    fit into one memory increment.
    Otherwise it is possible to put a memory increment into standby state
    even if there are still active sections.
    Afterwards addressing exceptions might happen which cause the kernel
    to panic.
    However even worse, if a memory increment was put into standby state
    and afterwards into active state again, it's contents would have been
    zeroed, leading to memory corruption.
    
    This was only an issue for machines that support standby memory and
    have at least 256GB memory.
    
    This is broken since commit fdb1bb15 "[S390] sclp/memory hotplug: fix
    initial usecount of increments".
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 075d7822cf0b70d6e8e1d736ebc49f6df924d6cc
Author: Michael Neuling <michael.neuling@au1.ibm.com>
Date:   Wed Apr 24 00:30:09 2013 +0000

    powerpc: Add isync to copy_and_flush
    
    commit 29ce3c5073057991217916abc25628e906911757 upstream.
    
    In __after_prom_start we copy the kernel down to zero in two calls to
    copy_and_flush.  After the first call (copy from 0 to copy_to_here:)
    we jump to the newly copied code soon after.
    
    Unfortunately there's no isync between the copy of this code and the
    jump to it.  Hence it's possible that stale instructions could still be
    in the icache or pipeline before we branch to it.
    
    We've seen this on real machines and it's results in no console output
    after:
      calling quiesce...
      returning from prom_init
    
    The below adds an isync to ensure that the copy and flushing has
    completed before any branching to the new instructions occurs.
    
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ded197648dfd25c4c9b1a1a7ab60d82256da82a2
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Sat Mar 2 07:51:42 2013 +0000

    ixgbe: fix EICR write in ixgbe_msix_other
    
    commit d87d830720a1446403ed38bfc2da268be0d356d1 upstream.
    
    Previously, the ixgbe_msix_other was writing the full 32bits of the set
    interrupts, instead of only the ones which the ixgbe_msix_other is
    handling. This resulted in a loss of performance when the X540's PPS feature is
    enabled due to sometimes clearing queue interrupts which resulted in the driver
    not getting the interrupt for cleaning the q_vector rings often enough. The fix
    is to simply mask the lower 16bits off so that this handler does not write them
    in the EICR, which causes them to remain high and be properly handled by the
    clean_rings interrupt routine as normal.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7210dd24ee9e4dbb8f16cfe11d1d4319909bfe34
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 11:45:53 2013 +0200

    clockevents: Set dummy handler on CPU_DEAD shutdown
    
    commit 6f7a05d7018de222e40ca003721037a530979974 upstream.
    
    Vitaliy reported that a per cpu HPET timer interrupt crashes the
    system during hibernation. What happens is that the per cpu HPET timer
    gets shut down when the nonboot cpus are stopped. When the nonboot
    cpus are onlined again the HPET code sets up the MSI interrupt which
    fires before the clock event device is registered. The event handler
    is still set to hrtimer_interrupt, which then crashes the machine due
    to highres mode not being active.
    
    See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=700333
    
    There is no real good way to avoid that in the HPET code. The HPET
    code alrady has a mechanism to detect spurious interrupts when event
    handler == NULL for a similar reason.
    
    We can handle that in the clockevent/tick layer and replace the
    previous functional handler with a dummy handler like we do in
    tick_setup_new_device().
    
    The original clockevents code did this in clockevents_exchange_device(),
    but that got removed by commit 7c1e76897 (clockevents: prevent
    clockevent event_handler ending up handler_noop) which forgot to fix
    it up in tick_shutdown(). Same issue with the broadcast device.
    
    Reported-by: Vitaliy Fillipov <vitalif@yourcmc.ru>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Cc: 700333@bugs.debian.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 42c72c8c4efa25812f711c96b0f04f7a1091a2b9
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Apr 25 07:38:15 2013 +0200

    ALSA: usb-audio: Fix autopm error during probing
    
    commit 60af3d037eb8c670dcce31401501d1271e7c5d95 upstream.
    
    We've got strange errors in get_ctl_value() in mixer.c during
    probing, e.g. on Hercules RMX2 DJ Controller:
    
      ALSA mixer.c:352 cannot get ctl value: req = 0x83, wValue = 0x201, wIndex = 0xa00, type = 4
      ALSA mixer.c:352 cannot get ctl value: req = 0x83, wValue = 0x200, wIndex = 0xa00, type = 4
      ....
    
    It turned out that the culprit is autopm: snd_usb_autoresume() returns
    -ENODEV when called during card->probing = 1.
    
    Since the call itself during card->probing = 1 is valid, let's fix the
    return value of snd_usb_autoresume() as success.
    
    Reported-and-tested-by: Daniel Sch√ºrmann <daschuer@mixxx.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 25fd4d9121db99556a8c2bb0ba9ae93ac54c3a61
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Mon Apr 22 19:42:16 2013 +0000

    gianfar: do not advertise any alarm capability.
    
    commit cd4baaaa04b4aaa3b0ec4d13a6f3d203b92eadbd upstream.
    
    An early draft of the PHC patch series included an alarm in the
    gianfar driver. During the review process, the alarm code was dropped,
    but the capability removal was overlooked. This patch fixes the issue
    by advertising zero alarms.
    
    This patch should be applied to every 3.x stable kernel.
    
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Reported-by: Chris LaRocque <clarocq@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7b475d0e41f0979b8f8f475ae5fd3e026216e318
Author: Daniel Mack <zonque@gmail.com>
Date:   Wed Apr 24 19:38:42 2013 +0200

    ALSA: snd-usb: try harder to find USB_DT_CS_ENDPOINT
    
    commit ebfc594c02148b6a85c2f178cf167a44a3c3ce10 upstream.
    
    The USB_DT_CS_ENDPOINT class-specific endpoint descriptor is usually
    stuffed directly after the standard USB endpoint descriptor, and this is
    where the driver currently expects it to be.
    
    There are, however, devices in the wild that have it the other way
    around in their descriptor sets, so the USB_DT_CS_ENDPOINT comes
    *before* the standard enpoint. Devices known to implement it that way
    are "Sennheiser BTD-500" and Plantronics USB headsets.
    
    When the driver can't find the USB_DT_CS_ENDPOINT, it won't be able to
    change sample rates, as the bitmask for the validity of this command is
    storen in bmAttributes of that descriptor.
    
    Fix this by searching the entire interface instead of just the extra
    bytes of the first endpoint, in case the latter fails.
    
    Signed-off-by: Daniel Mack <zonque@gmail.com>
    Reported-and-tested-by: Torstein Hegge <hegge@resisty.net>
    Reported-and-tested-by: Yves G <alsa-user@vivigatt.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ae04c6d22a958d4879c4139ea57dee8a92243e42
Author: Adrian Thomasset <adrian.thomasset@st.com>
Date:   Wed Apr 24 11:37:35 2013 +0100

    USB: ftdi_sio: enable two UART ports on ST Microconnect Lite
    
    commit 71d9a2b95fc9c9474d46d764336efd7a5a805555 upstream.
    
    The FT4232H used in the ST Micro Connect Lite has four hi-speed UART ports.
    The first two ports are reserved for the JTAG interface.
    
    We enable by default ports 2 and 3 as UARTs (where port 2 is a
    conventional RS-232 UART)
    
    Signed-off-by: Adrian Thomasset <adrian.thomasset@st.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 19e7fbbc440d0f29605e74252b42f2428434200c
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Tue Apr 23 15:13:14 2013 +0000

    powerpc/spufs: Initialise inode->i_ino in spufs_new_inode()
    
    commit 6747e83235caecd30b186d1282e4eba7679f81b7 upstream.
    
    In commit 85fe402 (fs: do not assign default i_ino in new_inode), the
    initialisation of i_ino was removed from new_inode() and pushed down
    into the callers. However spufs_new_inode() was not updated.
    
    This exhibits as no files appearing in /spu, because all our dirents
    have a zero inode, which readdir() seems to dislike.
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3dfbb9098bb3fd1d51532dfd8cb78a041d4c76e1
Author: Mika Kuoppala <mika.kuoppala@linux.intel.com>
Date:   Mon Apr 22 14:19:26 2013 +0300

    fbcon: when font is freed, clear also vc_font.data
    
    commit e6637d5427d2af9f3f33b95447bfc5347e5ccd85 upstream.
    
    commit ae1287865f5361fa138d4d3b1b6277908b54eac9
    Author: Dave Airlie <airlied@redhat.com>
    Date:   Thu Jan 24 16:12:41 2013 +1000
    
        fbcon: don't lose the console font across generic->chip driver switch
    
    uses a pointer in vc->vc_font.data to load font into the new driver.
    However if the font is actually freed, we need to clear the data
    so that we don't reload font from dangling pointer.
    
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=892340
    Signed-off-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 48cb5f069117a32220b09f1a7897d75ea51d221c
Author: Bryan Schumaker <bjschuma@netapp.com>
Date:   Fri Apr 19 16:09:38 2013 -0400

    nfsd: Decode and send 64bit time values
    
    commit bf8d909705e9d9bac31d9b8eac6734d2b51332a7 upstream.
    
    The seconds field of an nfstime4 structure is 64bit, but we are assuming
    that the first 32bits are zero-filled.  So if the client tries to set
    atime to a value before the epoch (touch -t 196001010101), then the
    server will save the wrong value on disk.
    
    Signed-off-by: Bryan Schumaker <bjschuma@netapp.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 577e0ee41563bcdc776da7d84a65e1bac3c6a3eb
Author: Steven A. Falco <sfalco@harris.com>
Date:   Mon Apr 22 09:34:39 2013 +0000

    i2c: xiic: must always write 16-bit words to TX_FIFO
    
    commit c39e8e4354ce4daf23336de5daa28a3b01f00aa6 upstream.
    
    The TX_FIFO register is 10 bits wide.  The lower 8 bits are the data to be
    written, while the upper two bits are flags to indicate stop/start.
    
    The driver apparently attempted to optimize write access, by only writing a
    byte in those cases where the stop/start bits are zero.  However, we have
    seen cases where the lower byte is duplicated onto the upper byte by the
    hardware, which causes inadvertent stop/starts.
    
    This patch changes the write access to the transmit FIFO to always be 16 bits
    wide.
    
    Signed off by: Steven A. Falco <sfalco@harris.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5b5bbdf617dcfd3cf070c7a6e0d0162a48a8cc97
Author: Tormod Volden <debian.tormod@gmail.com>
Date:   Sat Apr 20 14:24:04 2013 +0200

    usb-storage: CY7C68300A chips do not support Cypress ATACB
    
    commit 671b4b2ba9266cbcfe7210a704e9ea487dcaa988 upstream.
    
    Many cards based on CY7C68300A/B/C use the USB ID 04b4:6830 but only the
    B and C variants (EZ-USB AT2LP) support the ATA Command Block
    functionality, according to the data sheets. The A variant (EZ-USB AT2)
    locks up if ATACB is attempted, until a typical 30 seconds timeout runs
    out and a USB reset is performed.
    
    https://bugs.launchpad.net/bugs/428469
    
    It seems that one way to spot a CY7C68300A (at least where the card
    manufacturer left Cypress' EEPROM default vaules, against Cypress'
    recommendations) is to look at the USB string descriptor indices.
    
    A http://media.digikey.com/pdf/Data%20Sheets/Cypress%20PDFs/CY7C68300A.pdf
    B http://www.farnell.com/datasheets/43456.pdf
    C http://www.cypress.com/?rID=14189
    
    Note that a CY7C68300B/C chip appears as CY7C68300A if it is running
    in Backward Compatibility Mode, and if ATACB would be supported in this
    case there is anyway no way to tell which chip it really is.
    
    For 5 years my external USB drive has been locking up for half a minute
    when plugged in and ata_id is run by udev, or anytime hdparm or similar
    is run on it.
    
    Finally looking at the /correct/ datasheet I think I found the reason. I
    am aware the quirk in this patch is a bit hacky, but the hardware
    manufacturers haven't made it easy for us.
    
    Signed-off-by: Tormod Volden <debian.tormod@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c8b88bf5a7a7b1c0733ac0c534c34f6f43ccefcf
Author: Filippo Turato <nnj7585@gmail.com>
Date:   Sat Apr 20 15:04:08 2013 +0200

    USB: serial: option: Added support Olivetti Olicard 145
    
    commit d19bf5cedfd7d53854a3bd699c98b467b139833b upstream.
    
    This adds PID for Olivetti Olicard 145 in option.c
    
    Signed-off-by: Filippo Turato <nnj7585@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4034f28929624789a5eb5b3b5e0ce71e34ed62dd
Author: Adrian Thomasset <adrian.thomasset@st.com>
Date:   Tue Apr 23 12:46:29 2013 +0100

    USB: ftdi_sio: correct ST Micro Connect Lite PIDs
    
    commit 9f06d15f8db6946e41f73196a122b84a37938878 upstream.
    
    The current ST Micro Connect Lite uses the FT4232H hi-speed quad USB
    UART FTDI chip. It is also possible to drive STM reference targets
    populated with an on-board JTAG debugger based on the FT2232H chip with
    the same STMicroelectronics tools.
    
    For this reason, the ST Micro Connect Lite PIDs should be
    ST_STMCLT_2232_PID: 0x3746
    ST_STMCLT_4232_PID: 0x3747
    
    Signed-off-by: Adrian Thomasset <adrian.thomasset@st.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 6b68bff8941033765899d76c981ff50f804a6257
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Apr 18 09:36:42 2013 -0400

    drm/radeon: fix hdmi mode enable on RS600/RS690/RS740
    
    commit dcb852905772416e322536ced5cb3c796d176af5 upstream.
    
    These chips were previously skipped since they are
    pre-R600.
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5d79e0087b1e527eb78bdf3c3d9a8b8f19cf5b61
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Sun Apr 21 20:32:03 2013 -0400

    ext4: fix Kconfig documentation for CONFIG_EXT4_DEBUG
    
    commit 7f3e3c7cfcec148ccca9c0dd2dbfd7b00b7ac10f upstream.
    
    Fox the Kconfig documentation for CONFIG_EXT4_DEBUG to match the
    change made by commit a0b30c1229: ext4: use module parameters instead
    of debugfs for mballoc_debug
    
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7d803dc3d974ba8e9e7781b30079d8dc7640e1f7
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Sun Apr 21 18:01:06 2013 -0400

    LOCKD: Ensure that nlmclnt_block resets block->b_status after a server reboot
    
    commit 1dfd89af8697a299e7982ae740d4695ecd917eef upstream.
    
    After a server reboot, the reclaimer thread will recover all the existing
    locks. For locks that are blocked, however, it will change the value
    of block->b_status to nlm_lck_denied_grace_period in order to signal that
    they need to wake up and resend the original blocking lock request.
    
    Due to a bug, however, the block->b_status never gets reset after the
    blocked locks have been woken up, and so the process goes into an
    infinite loop of resends until the blocked lock is satisfied.
    
    Reported-by: Marc Eshel <eshel@us.ibm.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit fcf565be6168313624ac7c0d34d64c92fc967a81
Author: David M√ºller (ELSOFT AG) <d.mueller@elsoft.ch>
Date:   Fri Apr 19 10:41:50 2013 +0200

    drm/i915: Fall back to bit banging mode for DVO transmitter detection
    
    commit e4bfff54ed3f5de88f5358504c78c2cb037813aa upstream.
    
    As discussed in this thread
    http://lists.freedesktop.org/archives/dri-devel/2013-April/037411.html
    GMBUS based DVO transmitter detection seems to be unreliable which could
    result in an unusable DVO port.
    
    The attached patch fixes this by falling back to bit banging mode for
    the time DVO transmitter detection is in progress.
    
    Signed-off-by: David M√ºller <d.mueller@elsoft.ch>
    Tested-by: David M√ºller <d.mueller@elsoft.ch>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit cf09126f9652a818733903e5ac7fdf6e67cf56ec
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Wed Apr 17 09:47:00 2013 +0300

    iwlwifi: dvm: don't send zeroed LQ cmd
    
    commit 63b77bf489881747c5118476918cc8c29378ee63 upstream.
    
    When the stations are being restored because of unassoc
    RXON, the LQ cmd may not have been initialized because it
    is initialized only after association.
    Sending zeroed LQ_CMD makes the fw unhappy: it raises
    SYSASSERT_2078.
    
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Reviewed-by: Johannes Berg <johannes.berg@intel.com>
    [move zero_lq and make static const]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    [bwh: Backported to 3.2: adjust filename]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 19c42ce9869ff30f43a08fb774d08f35b92b5ff6
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Fri Apr 12 15:18:38 2013 +0300

    drm/i915: ensure single initialization and cleanup of backlight device
    
    commit dc652f90e088798bfa31f496ba994ddadd5d5680 upstream.
    
    Backlight cleanup in the eDP connector destroy callback caused the
    backlight device to be removed on some systems that first initialized LVDS
    and then attempted to initialize eDP. Prevent multiple backlight
    initializations, and ensure backlight cleanup is only done once by moving
    it to modeset cleanup.
    
    A small wrinkle is the introduced asymmetry in backlight
    setup/cleanup. This could be solved by adding refcounting, but it seems
    overkill considering that there should only ever be one backlight device.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=55701
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Tested-by: Peter Verthez <peter.verthez@skynet.be>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    [bwh: Backported to 3.2:
     - Adjust context
     - s/dev_priv->backlight\.device/dev_priv->backlight/]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0bdb6ae5a6447214693e9de94df3611cea80357a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Apr 4 21:31:03 2013 +0100

    drm/i915: Workaround incoherence between fences and LLC across multiple CPUs
    
    commit 25ff1195f8a0b3724541ae7bbe331b4296de9c06 upstream.
    
    In order to fully serialize access to the fenced region and the update
    to the fence register we need to take extreme measures on SNB+, and
    manually flush writes to memory prior to writing the fence register in
    conjunction with the memory barriers placed around the register write.
    
    Fixes i-g-t/gem_fence_thrash
    
    v2: Bring a bigger gun
    v3: Switch the bigger gun for heavier bullets (Arjan van de Ven)
    v4: Remove changes for working generations.
    v5: Reduce to a per-cpu wbinvd() call prior to updating the fences.
    v6: Rewrite comments to ellide forgotten history.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=62191
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Jon Bloomfield <jon.bloomfield@intel.com>
    Tested-by: Jon Bloomfield <jon.bloomfield@intel.com> (v2)
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    [bwh: Backported to 3.2: insert the cache flush in i915_gem_object_get_fence()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0baf4af3258ded9adb9a73f351b59f3492042021
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 16 11:08:33 2013 +0200

    usbfs: Always allow ctrl requests with USB_RECIP_ENDPOINT on the ctrl ep
    
    commit 1361bf4b9f9ef45e628a5b89e0fd9bedfdcb7104 upstream.
    
    When usbfs receives a ctrl-request from userspace it calls check_ctrlrecip,
    which for a request with USB_RECIP_ENDPOINT tries to map this to an interface
    to see if this interface is claimed, except for ctrl-requests with a type of
    USB_TYPE_VENDOR.
    
    When trying to use this device: http://www.akaipro.com/eiepro
    redirected to a Windows vm running on qemu on top of Linux.
    
    The windows driver makes a ctrl-req with USB_TYPE_CLASS and
    USB_RECIP_ENDPOINT with index 0, and the mapping of the endpoint (0) to
    the interface fails since ep 0 is the ctrl endpoint and thus never is
    part of an interface.
    
    This patch fixes this ctrl-req failing by skipping the checkintf call for
    USB_RECIP_ENDPOINT ctrl-reqs on the ctrl endpoint.
    
    Reported-by: Dave Stikkolorum <d.r.stikkolorum@hhs.nl>
    Tested-by: Dave Stikkolorum <d.r.stikkolorum@hhs.nl>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 929628fcc44a4be40bb886f8558838324e63e833
Author: Dylan Reid <dgreid@chromium.org>
Date:   Tue Apr 16 20:02:34 2013 -0700

    ASoC: max98088: Fix logging of hardware revision.
    
    commit 98682063549bedd6e2d2b6b7222f150c6fbce68c upstream.
    
    The hardware revision of the codec is based at 0x40.  Subtract that
    before convering to ASCII.  The same as it is done for 98095.
    
    Signed-off-by: Dylan Reid <dgreid@chromium.org>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 0bd5ff02f874986f30455d41222d53bd1846aa0e
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Tue Apr 16 15:18:00 2013 -0400

    xen/time: Fix kasprintf splat when allocating timer%d IRQ line.
    
    commit 7918c92ae9638eb8a6ec18e2b4a0de84557cccc8 upstream.
    
    When we online the CPU, we get this splat:
    
    smpboot: Booting Node 0 Processor 1 APIC 0x2
    installing Xen timer for CPU 1
    BUG: sleeping function called from invalid context at /home/konrad/ssd/konrad/linux/mm/slab.c:3179
    in_atomic(): 1, irqs_disabled(): 0, pid: 0, name: swapper/1
    Pid: 0, comm: swapper/1 Not tainted 3.9.0-rc6upstream-00001-g3884fad #1
    Call Trace:
     [<ffffffff810c1fea>] __might_sleep+0xda/0x100
     [<ffffffff81194617>] __kmalloc_track_caller+0x1e7/0x2c0
     [<ffffffff81303758>] ? kasprintf+0x38/0x40
     [<ffffffff813036eb>] kvasprintf+0x5b/0x90
     [<ffffffff81303758>] kasprintf+0x38/0x40
     [<ffffffff81044510>] xen_setup_timer+0x30/0xb0
     [<ffffffff810445af>] xen_hvm_setup_cpu_clockevents+0x1f/0x30
     [<ffffffff81666d0a>] start_secondary+0x19c/0x1a8
    
    The solution to that is use kasprintf in the CPU hotplug path
    that 'online's the CPU. That is, do it in in xen_hvm_cpu_notify,
    and remove the call to in xen_hvm_setup_cpu_clockevents.
    
    Unfortunatly the later is not a good idea as the bootup path
    does not use xen_hvm_cpu_notify so we would end up never allocating
    timer%d interrupt lines when booting. As such add the check for
    atomic() to continue.
    
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit abfcdd7ef364708e54276e97041fe4dc1dd8dc12
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Tue Apr 16 14:08:50 2013 -0400

    xen/smp/spinlock: Fix leakage of the spinlock interrupt line for every CPU online/offline
    
    commit 66ff0fe9e7bda8aec99985b24daad03652f7304e upstream.
    
    While we don't use the spinlock interrupt line (see for details
    commit f10cd522c5fbfec9ae3cc01967868c9c2401ed23 -
    xen: disable PV spinlocks on HVM) - we should still do the proper
    init / deinit sequence. We did not do that correctly and for the
    CPU init for PVHVM guest we would allocate an interrupt line - but
    failed to deallocate the old interrupt line.
    
    This resulted in leakage of an irq_desc but more importantly this splat
    as we online an offlined CPU:
    
    genirq: Flags mismatch irq 71. 0002cc20 (spinlock1) vs. 0002cc20 (spinlock1)
    Pid: 2542, comm: init.late Not tainted 3.9.0-rc6upstream #1
    Call Trace:
     [<ffffffff811156de>] __setup_irq+0x23e/0x4a0
     [<ffffffff81194191>] ? kmem_cache_alloc_trace+0x221/0x250
     [<ffffffff811161bb>] request_threaded_irq+0xfb/0x160
     [<ffffffff8104c6f0>] ? xen_spin_trylock+0x20/0x20
     [<ffffffff813a8423>] bind_ipi_to_irqhandler+0xa3/0x160
     [<ffffffff81303758>] ? kasprintf+0x38/0x40
     [<ffffffff8104c6f0>] ? xen_spin_trylock+0x20/0x20
     [<ffffffff810cad35>] ? update_max_interval+0x15/0x40
     [<ffffffff816605db>] xen_init_lock_cpu+0x3c/0x78
     [<ffffffff81660029>] xen_hvm_cpu_notify+0x29/0x33
     [<ffffffff81676bdd>] notifier_call_chain+0x4d/0x70
     [<ffffffff810bb2a9>] __raw_notifier_call_chain+0x9/0x10
     [<ffffffff8109402b>] __cpu_notify+0x1b/0x30
     [<ffffffff8166834a>] _cpu_up+0xa0/0x14b
     [<ffffffff816684ce>] cpu_up+0xd9/0xec
     [<ffffffff8165f754>] store_online+0x94/0xd0
     [<ffffffff8141d15b>] dev_attr_store+0x1b/0x20
     [<ffffffff81218f44>] sysfs_write_file+0xf4/0x170
     [<ffffffff811a2864>] vfs_write+0xb4/0x130
     [<ffffffff811a302a>] sys_write+0x5a/0xa0
     [<ffffffff8167ada9>] system_call_fastpath+0x16/0x1b
    cpu 1 spinlock event irq -16
    smpboot: Booting Node 0 Processor 1 APIC 0x2
    
    And if one looks at the /proc/interrupts right after
    offlining (CPU1):
    
      70:          0          0  xen-percpu-ipi       spinlock0
      71:          0          0  xen-percpu-ipi       spinlock1
      77:          0          0  xen-percpu-ipi       spinlock2
    
    There is the oddity of the 'spinlock1' still being present.
    
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 20c4ec0f41d9be235c376c4cd5f5517ca31d7874
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Tue Apr 16 13:49:26 2013 -0400

    xen/smp: Fix leakage of timer interrupt line for every CPU online/offline.
    
    commit 888b65b4bc5e7fcbbb967023300cd5d44dba1950 upstream.
    
    In the PVHVM path when we do CPU online/offline path we would
    leak the timer%d IRQ line everytime we do a offline event. The
    online path (xen_hvm_setup_cpu_clockevents via
    x86_cpuinit.setup_percpu_clockev) would allocate a new interrupt
    line for the timer%d.
    
    But we would still use the old interrupt line leading to:
    
    kernel BUG at /home/konrad/ssd/konrad/linux/kernel/hrtimer.c:1261!
    invalid opcode: 0000 [#1] SMP
    RIP: 0010:[<ffffffff810b9e21>]  [<ffffffff810b9e21>] hrtimer_interrupt+0x261/0x270
    .. snip..
     <IRQ>
     [<ffffffff810445ef>] xen_timer_interrupt+0x2f/0x1b0
     [<ffffffff81104825>] ? stop_machine_cpu_stop+0xb5/0xf0
     [<ffffffff8111434c>] handle_irq_event_percpu+0x7c/0x240
     [<ffffffff811175b9>] handle_percpu_irq+0x49/0x70
     [<ffffffff813a74a3>] __xen_evtchn_do_upcall+0x1c3/0x2f0
     [<ffffffff813a760a>] xen_evtchn_do_upcall+0x2a/0x40
     [<ffffffff8167c26d>] xen_hvm_callback_vector+0x6d/0x80
     <EOI>
     [<ffffffff81666d01>] ? start_secondary+0x193/0x1a8
     [<ffffffff81666cfd>] ? start_secondary+0x18f/0x1a8
    
    There is also the oddity (timer1) in the /proc/interrupts after
    offlining CPU1:
    
      64:       1121          0  xen-percpu-virq      timer0
      78:          0          0  xen-percpu-virq      timer1
      84:          0       2483  xen-percpu-virq      timer2
    
    This patch fixes it.
    
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit fc79efcda21e30e47cdccb57ba5bd7e2093932a0
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Apr 16 14:32:26 2013 +0200

    wireless: regulatory: fix channel disabling race condition
    
    commit 990de49f74e772b6db5208457b7aa712a5f4db86 upstream.
    
    When a full scan 2.4 and 5 GHz scan is scheduled, but then the 2.4 GHz
    part of the scan disables a 5.2 GHz channel due to, e.g. receiving
    country or frequency information, that 5.2 GHz channel might already
    be in the list of channels to scan next. Then, when the driver checks
    if it should do a passive scan, that will return false and attempt an
    active scan. This is not only wrong but can also lead to the iwlwifi
    device firmware crashing since it checks regulatory as well.
    
    Fix this by not setting the channel flags to just disabled but rather
    OR'ing in the disabled flag. That way, even if the race happens, the
    channel will be scanned passively which is still (mostly) correct.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f1ea8a33954002821aaaf64bd7f2995543523538
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Apr 12 13:58:17 2013 +0000

    PCI/PM: Fix fallback to PCI_D0 in pci_platform_power_transition()
    
    commit 769ba7212f2059ca9fe0c73371e3d415c8c1c529 upstream.
    
    Commit b51306c (PCI: Set device power state to PCI_D0 for device
    without native PM support) modified pci_platform_power_transition()
    by adding code causing dev->current_state for devices that don't
    support native PCI PM but are power-manageable by the platform to be
    changed to PCI_D0 regardless of the value returned by the preceding
    platform_pci_set_power_state().  In particular, that also is done
    if the platform_pci_set_power_state() has been successful, which
    causes the correct power state of the device set by
    pci_update_current_state() in that case to be overwritten by PCI_D0.
    
    Fix that mistake by making the fallback to PCI_D0 only happen if
    the platform_pci_set_power_state() has returned an error.
    
    [bhelgaas: folded in Yinghai's simplification, added URL & stable info]
    Reference: http://lkml.kernel.org/r/27806FC4E5928A408B78E88BBC67A2306F466BBA@ORSMSX101.amr.corp.intel.com
    Reported-by: Chris J. Benenati <chris.j.benenati@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 392e49cb34a700ba50800075cef75e1de5f75ab8
Author: Federico Vaga <federico.vaga@gmail.com>
Date:   Mon Apr 15 16:01:07 2013 +0200

    serial_core.c: add put_device() after device_find_child()
    
    commit 5a65dcc04cda41f4122aacc37a5a348454645399 upstream.
    
    The serial core uses device_find_child() but does not drop the reference to
    the retrieved child after using it. This patch add the missing put_device().
    
    What I have done to test this issue.
    
    I used a machine with an AMBA PL011 serial driver. I tested the patch on
    next-20120408 because the last branch [next-20120415] does not boot on this
    board.
    
    For test purpose, I added some pr_info() messages to print the refcount
    after device_find_child() (lines: 1937,2009), and after put_device()
    (lines: 1947, 2021).
    
    Boot the machine *without* put_device(). Then:
    
    echo reboot > /sys/power/disk
    echo disk > /sys/power/state
    [   87.058575] uart_suspend_port:1937 refcount 4
    [   87.058582] uart_suspend_port:1947 refcount 4
    [   87.098083] uart_resume_port:2009refcount 5
    [   87.098088] uart_resume_port:2021 refcount 5
    
    echo disk > /sys/power/state
    [  103.055574] uart_suspend_port:1937 refcount 6
    [  103.055580] uart_suspend_port:1947 refcount 6
    [  103.095322] uart_resume_port:2009 refcount 7
    [  103.095327] uart_resume_port:2021 refcount 7
    
    echo disk > /sys/power/state
    [  252.459580] uart_suspend_port:1937 refcount 8
    [  252.459586] uart_suspend_port:1947 refcount 8
    [  252.499611] uart_resume_port:2009 refcount 9
    [  252.499616] uart_resume_port:2021 refcount 9
    
    The refcount continuously increased.
    
    Boot the machine *with* this patch. Then:
    
    echo reboot > /sys/power/disk
    echo disk > /sys/power/state
    [  159.333559] uart_suspend_port:1937 refcount 4
    [  159.333566] uart_suspend_port:1947 refcount 3
    [  159.372751] uart_resume_port:2009 refcount 4
    [  159.372755] uart_resume_port:2021 refcount 3
    
    echo disk > /sys/power/state
    [  185.713614] uart_suspend_port:1937 refcount 4
    [  185.713621] uart_suspend_port:1947 refcount 3
    [  185.752935] uart_resume_port:2009 refcount 4
    [  185.752940] uart_resume_port:2021 refcount 3
    
    echo disk > /sys/power/state
    [  207.458584] uart_suspend_port:1937 refcount 4
    [  207.458591] uart_suspend_port:1947 refcount 3
    [  207.498598] uart_resume_port:2009 refcount 4
    [  207.498605] uart_resume_port:2021 refcount 3
    
    The refcount correctly handled.
    
    Signed-off-by: Federico Vaga <federico.vaga@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4b8fefaee7a9d4ae9583328d03fd796e1933569e
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Apr 12 19:15:52 2013 -0400

    drm/radeon: cleanup properly if mmio mapping fails
    
    commit 0cd9cb76ae26a19df21abc6f94f5fff141e689c7 upstream.
    
    If we fail to map the mmio BAR, skip driver tear down
    that requires mmio.
    
    Should fix:
    https://bugzilla.kernel.org/show_bug.cgi?id=56541
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit fb0b82ae4ec8e67379b51ac4e5e34c90857298ad
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Thu Apr 11 12:45:34 2013 -0400

    drm/radeon/evergreen+: don't enable HPD interrupts on eDP/LVDS
    
    commit 2e97be73e5f74a317232740ae82eb8f95326a660 upstream.
    
    Avoids potential interrupt storms when the display is disabled.
    
    May fix:
    https://bugzilla.kernel.org/show_bug.cgi?id=56041
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7766cdc32e03471a00dec6dd4cb487ceca811501
Author: Clemens Ladisch <clemens@ladisch.de>
Date:   Mon Apr 15 15:59:51 2013 +0200

    ALSA: usb-audio: disable autopm for MIDI devices
    
    commit cbc200bca4b51a8e2406d4b654d978f8503d430b upstream.
    
    Commit 88a8516a2128 (ALSA: usbaudio: implement USB autosuspend)
    introduced autopm for all USB audio/MIDI devices.  However, many MIDI
    devices, such as synthesizers, do not merely transmit MIDI messages but
    use their MIDI inputs to control other functions.  With autopm, these
    devices would get powered down as soon as the last MIDI port device is
    closed on the host.
    
    Even some plain MIDI interfaces could get broken: they automatically
    send Active Sensing messages while powered up, but as soon as these
    messages cease, the receiving device would interpret this as an
    accidental disconnection.
    
    Commit f5f165418cab (ALSA: usb-audio: Fix missing autopm for MIDI input)
    introduced another regression: some devices (e.g. the Roland GAIA SH-01)
    are self-powered but do a reset whenever the USB interface's power state
    changes.
    
    To work around all this, just disable autopm for all USB MIDI devices.
    
    Reported-by: Laurens Holst
    Signed-off-by: Clemens Ladisch <clemens@ladisch.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 40de8047654debace75db0f04aebbbaace5bdd26
Author: Calvin Owens <jcalvinowens@gmail.com>
Date:   Fri Apr 12 22:33:59 2013 -0500

    ALSA: usb: Add quirk for 192KHz recording on E-Mu devices
    
    commit 1539d4f82ad534431cc67935e8e442ccf107d17d upstream.
    
    When recording at 176.2KHz or 192Khz, the device adds a 32-bit length
    header to the capture packets, which obviously needs to be ignored for
    recording to work properly.
    
    Userspace expected:  L0 L1 L2 R0 R1 R2
    ...but actually got: R2 L0 L1 L2 R0 R1
    
    Also, the last byte of the length header being interpreted as L0 of
    the first sample caused spikes every 0.5ms, resulting in a loud 16KHz
    tone (about the highest 'B' on a piano) being present throughout
    captures.
    
    Tested at all sample rates on an E-Mu 0404USB, and tested for
    regressions on a generic USB headset.
    
    Signed-off-by: Calvin Owens <jcalvinowens@gmail.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [bwh: Backported to 3.2: adjust filenames, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1b136c71e8858b068b7813fed270eb4668a217ca
Author: Namhyung Kim <namhyung.kim@lge.com>
Date:   Wed Apr 10 09:18:12 2013 +0900

    tracing: Check return value of tracing_init_dentry()
    
    commit ed6f1c996bfe4b6e520cf7a74b51cd6988d84420 upstream.
    
    Check return value and bail out if it's NULL.
    
    Link: http://lkml.kernel.org/r/1365553093-10180-2-git-send-email-namhyung@kernel.org
    
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Namhyung Kim <namhyung.kim@lge.com>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 64384570408351682ab7cd35a5f7c5b9c9c7856c
Author: Namhyung Kim <namhyung.kim@lge.com>
Date:   Thu Apr 11 16:01:38 2013 +0900

    tracing: Reset ftrace_graph_filter_enabled if count is zero
    
    commit 9f50afccfdc15d95d7331acddcb0f7703df089ae upstream.
    
    The ftrace_graph_count can be decreased with a "!" pattern, so that
    the enabled flag should be updated too.
    
    Link: http://lkml.kernel.org/r/1365663698-2413-1-git-send-email-namhyung@kernel.org
    
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Namhyung Kim <namhyung.kim@lge.com>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit bd2ff9f2704b8071192d4b6af6e12d066522c850
Author: Bj√∏rn Mork <bjorn@mork.no>
Date:   Tue Apr 9 11:26:02 2013 +0200

    USB: option: add a D-Link DWM-156 variant
    
    commit a2a2d6c7f93e160b52a4ad0164db1f43f743ae0f upstream.
    
    Adding support for a Mediatek based device labelled as
    D-Link Model: DWM-156, H/W Ver: A7
    
    Also adding two other device IDs found in the Debian(!)
    packages included on the embedded device driver CD.
    
    This is a composite MBIM + serial ports + card reader device:
    
    T:  Bus=04 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 14 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2001 ProdID=7d01 Rev= 3.00
    S:  Manufacturer=D-Link,Inc
    S:  Product=D-Link DWM-156
    C:* #Ifs= 7 Cfg#= 1 Atr=a0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=125us
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=02 Prot=01 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=500us
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=usb-storage
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Bj√∏rn Mork <bjorn@mork.no>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 223288e32d54c46939f03db32703bfad8830018b
Author: Namhyung Kim <namhyung.kim@lge.com>
Date:   Mon Apr 1 21:46:24 2013 +0900

    tracing: Fix off-by-one on allocating stat->pages
    
    commit 39e30cd1537937d3c00ef87e865324e981434e5b upstream.
    
    The first page was allocated separately, so no need to start from 0.
    
    Link: http://lkml.kernel.org/r/1364820385-32027-2-git-send-email-namhyung@kernel.org
    
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Namhyung Kim <namhyung.kim@lge.com>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit be80ab092cbb6f8141151b8cc2b34524fd0535f4
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Mar 28 20:37:14 2013 -0400

    nfsd4: don't close read-write opens too soon
    
    commit 0c7c3e67ab91ec6caa44bdf1fc89a48012ceb0c5 upstream.
    
    Don't actually close any opens until we don't need them at all.
    
    This means being left with write access when it's not really necessary,
    but that's better than putting a file that might still have posix locks
    held on it, as we have been.
    
    Reported-by: Toralf F√∂rster <toralf.foerster@gmx.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 75ebfaade87e49f132a90d93020ddebc13a8289e
Author: David Engraf <david.engraf@sysgo.com>
Date:   Tue Mar 19 13:29:55 2013 +0100

    hrtimer: Fix ktime_add_ns() overflow on 32bit architectures
    
    commit 51fd36f3fad8447c487137ae26b9d0b3ce77bb25 upstream.
    
    One can trigger an overflow when using ktime_add_ns() on a 32bit
    architecture not supporting CONFIG_KTIME_SCALAR.
    
    When passing a very high value for u64 nsec, e.g. 7881299347898368000
    the do_div() function converts this value to seconds (7881299347) which
    is still to high to pass to the ktime_set() function as long. The result
    in is a negative value.
    
    The problem on my system occurs in the tick-sched.c,
    tick_nohz_stop_sched_tick() when time_delta is set to
    timekeeping_max_deferment(). The check for time_delta < KTIME_MAX is
    valid, thus ktime_add_ns() is called with a too large value resulting in
    a negative expire value. This leads to an endless loop in the ticker code:
    
    time_delta: 7881299347898368000
    expires = ktime_add_ns(last_update, time_delta)
    expires: negative value
    
    This fix caps the value to KTIME_MAX.
    
    This error doesn't occurs on 64bit or architectures supporting
    CONFIG_KTIME_SCALAR (e.g. ARM, x86-32).
    
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    [jstultz: Minor tweaks to commit message & header]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 79d8ce897f2d73978e742334992da618a9fd839f
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Mon Apr 8 08:47:15 2013 -0400

    hrtimer: Add expiry time overflow check in hrtimer_interrupt
    
    commit 8f294b5a139ee4b75e890ad5b443c93d1e558a8b upstream.
    
    The settimeofday01 test in the LTP testsuite effectively does
    
            gettimeofday(current time);
            settimeofday(Jan 1, 1970 + 100 seconds);
            settimeofday(current time);
    
    This test causes a stack trace to be displayed on the console during the
    setting of timeofday to Jan 1, 1970 + 100 seconds:
    
    [  131.066751] ------------[ cut here ]------------
    [  131.096448] WARNING: at kernel/time/clockevents.c:209 clockevents_program_event+0x135/0x140()
    [  131.104935] Hardware name: Dinar
    [  131.108150] Modules linked in: sg nfsv3 nfs_acl nfsv4 auth_rpcgss nfs dns_resolver fscache lockd sunrpc nf_conntrack_netbios_ns nf_conntrack_broadcast ipt_MASQUERADE ip6table_mangle ip6t_REJECT nf_conntrack_ipv6 nf_defrag_ipv6 iptable_nat nf_nat_ipv4 nf_nat iptable_mangle ipt_REJECT nf_conntrack_ipv4 nf_defrag_ipv4 xt_conntrack nf_conntrack ebtable_filter ebtables ip6table_filter ip6_tables iptable_filter ip_tables kvm_amd kvm sp5100_tco bnx2 i2c_piix4 crc32c_intel k10temp fam15h_power ghash_clmulni_intel amd64_edac_mod pcspkr serio_raw edac_mce_amd edac_core microcode xfs libcrc32c sr_mod sd_mod cdrom ata_generic crc_t10dif pata_acpi radeon i2c_algo_bit drm_kms_helper ttm drm ahci pata_atiixp libahci libata usb_storage i2c_core dm_mirror dm_region_hash dm_log dm_mod
    [  131.176784] Pid: 0, comm: swapper/28 Not tainted 3.8.0+ #6
    [  131.182248] Call Trace:
    [  131.184684]  <IRQ>  [<ffffffff810612af>] warn_slowpath_common+0x7f/0xc0
    [  131.191312]  [<ffffffff8106130a>] warn_slowpath_null+0x1a/0x20
    [  131.197131]  [<ffffffff810b9fd5>] clockevents_program_event+0x135/0x140
    [  131.203721]  [<ffffffff810bb584>] tick_program_event+0x24/0x30
    [  131.209534]  [<ffffffff81089ab1>] hrtimer_interrupt+0x131/0x230
    [  131.215437]  [<ffffffff814b9600>] ? cpufreq_p4_target+0x130/0x130
    [  131.221509]  [<ffffffff81619119>] smp_apic_timer_interrupt+0x69/0x99
    [  131.227839]  [<ffffffff8161805d>] apic_timer_interrupt+0x6d/0x80
    [  131.233816]  <EOI>  [<ffffffff81099745>] ? sched_clock_cpu+0xc5/0x120
    [  131.240267]  [<ffffffff814b9ff0>] ? cpuidle_wrap_enter+0x50/0xa0
    [  131.246252]  [<ffffffff814b9fe9>] ? cpuidle_wrap_enter+0x49/0xa0
    [  131.252238]  [<ffffffff814ba050>] cpuidle_enter_tk+0x10/0x20
    [  131.257877]  [<ffffffff814b9c89>] cpuidle_idle_call+0xa9/0x260
    [  131.263692]  [<ffffffff8101c42f>] cpu_idle+0xaf/0x120
    [  131.268727]  [<ffffffff815f8971>] start_secondary+0x255/0x257
    [  131.274449] ---[ end trace 1151a50552231615 ]---
    
    When we change the system time to a low value like this, the value of
    timekeeper->offs_real will be a negative value.
    
    It seems that the WARN occurs because an hrtimer has been started in the time
    between the releasing of the timekeeper lock and the IPI call (via a call to
    on_each_cpu) in clock_was_set() in the do_settimeofday() code.  The end result
    is that a REALTIME_CLOCK timer has been added with softexpires = expires =
    KTIME_MAX.  The hrtimer_interrupt() fires/is called and the loop at
    kernel/hrtimer.c:1289 is executed.  In this loop the code subtracts the
    clock base's offset (which was set to timekeeper->offs_real in
    do_settimeofday()) from the current hrtimer_cpu_base->expiry value (which
    was KTIME_MAX):
    
            KTIME_MAX - (a negative value) = overflow
    
    A simple check for an overflow can resolve this problem.  Using KTIME_MAX
    instead of the overflow value will result in the hrtimer function being run,
    and the reprogramming of the timer after that.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rik van Riel <riel@redhat.com>
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    [jstultz: Tweaked commit subject]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 41d3bb1ff591daee6f33c3b34f1154a0b38fdcc7
Author: Stefani Seibold <stefani@seibold.net>
Date:   Sun Apr 7 12:08:55 2013 +0200

    USB: add ftdi_sio USB ID for GDM Boost V1.x
    
    commit 58f8b6c4fa5a13cb2ddb400e26e9e65766d71e38 upstream.
    
    This patch add a missing usb device id for the GDMBoost V1.x device
    
    The patch is against 3.9-rc5
    
    Signed-off-by: Stefani Seibold <stefani@seibold.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit d05fd48ac4d98b09ace5320a7b9f5bd52032007c
Author: Christian Lamparter <chunkeey@googlemail.com>
Date:   Wed Apr 3 14:34:11 2013 +0200

    drm/i915: Add no-lvds quirk for Fujitsu Esprimo Q900
    
    commit 9e9dd0e889c76c786e8f2e164c825c3c06dea30c upstream.
    
    The "Mobile Sandy Bridge CPUs" in the Fujitsu Esprimo Q900
    mini desktop PCs are probably misleading the LVDS detection
    code in intel_lvds_supported. Nothing is connected to the
    LVDS ports in these systems.
    
    Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3464fc47e51e73a67f3797bc91ccca894d52db98
Author: Dmitry Monakhov <dmonakhov@openvz.org>
Date:   Wed Apr 3 22:06:52 2013 -0400

    jbd2: fix race between jbd2_journal_remove_checkpoint and ->j_commit_callback
    
    commit 794446c6946513c684d448205fbd76fa35f38b72 upstream.
    
    The following race is possible:
    
    [kjournald2]                              other_task
    jbd2_journal_commit_transaction()
      j_state = T_FINISHED;
      spin_unlock(&journal->j_list_lock);
                                             ->jbd2_journal_remove_checkpoint()
                                               ->jbd2_journal_free_transaction();
                                                 ->kmem_cache_free(transaction)
      ->j_commit_callback(journal, transaction);
        -> USE_AFTER_FREE
    
    WARNING: at lib/list_debug.c:62 __list_del_entry+0x1c0/0x250()
    Hardware name:
    list_del corruption. prev->next should be ffff88019a4ec198, but was 6b6b6b6b6b6b6b6b
    Modules linked in: cpufreq_ondemand acpi_cpufreq freq_table mperf coretemp kvm_intel kvm crc32c_intel ghash_clmulni_intel microcode sg xhci_hcd button sd_mod crc_t10dif aesni_intel ablk_helper cryptd lrw aes_x86_64 xts gf128mul ahci libahci pata_acpi ata_generic dm_mirror dm_region_hash dm_log dm_mod
    Pid: 16400, comm: jbd2/dm-1-8 Tainted: G        W    3.8.0-rc3+ #107
    Call Trace:
     [<ffffffff8106fb0d>] warn_slowpath_common+0xad/0xf0
     [<ffffffff8106fc06>] warn_slowpath_fmt+0x46/0x50
     [<ffffffff813637e9>] ? ext4_journal_commit_callback+0x99/0xc0
     [<ffffffff8148cae0>] __list_del_entry+0x1c0/0x250
     [<ffffffff813637bf>] ext4_journal_commit_callback+0x6f/0xc0
     [<ffffffff813ca336>] jbd2_journal_commit_transaction+0x23a6/0x2570
     [<ffffffff8108aa42>] ? try_to_del_timer_sync+0x82/0xa0
     [<ffffffff8108b491>] ? del_timer_sync+0x91/0x1e0
     [<ffffffff813d3ecf>] kjournald2+0x19f/0x6a0
     [<ffffffff810ad630>] ? wake_up_bit+0x40/0x40
     [<ffffffff813d3d30>] ? bit_spin_lock+0x80/0x80
     [<ffffffff810ac6be>] kthread+0x10e/0x120
     [<ffffffff810ac5b0>] ? __init_kthread_worker+0x70/0x70
     [<ffffffff818ff6ac>] ret_from_fork+0x7c/0xb0
     [<ffffffff810ac5b0>] ? __init_kthread_worker+0x70/0x70
    
    In order to demonstrace this issue one should mount ext4 with mount -o
    discard option on SSD disk.  This makes callback longer and race
    window becomes wider.
    
    In order to fix this we should mark transaction as finished only after
    callbacks have completed
    
    Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    [bwh: Backported to 3.2: s/jbd2_journal_free_transaction/kfree/]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 164ed4383ca615f9a4f19673ac82372ccf96a33f
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Apr 3 22:02:52 2013 -0400

    ext4/jbd2: don't wait (forever) for stale tid caused by wraparound
    
    commit d76a3a77113db020d9bb1e894822869410450bd9 upstream.
    
    In the case where an inode has a very stale transaction id (tid) in
    i_datasync_tid or i_sync_tid, it's possible that after a very large
    (2**31) number of transactions, that the tid number space might wrap,
    causing tid_geq()'s calculations to fail.
    
    Commit deeeaf13 "jbd2: fix fsync() tid wraparound bug", later modified
    by commit e7b04ac0 "jbd2: don't wake kjournald unnecessarily",
    attempted to fix this problem, but it only avoided kjournald spinning
    forever by fixing the logic in jbd2_log_start_commit().
    
    Unfortunately, in the codepaths in fs/ext4/fsync.c and fs/ext4/inode.c
    that might call jbd2_log_start_commit() with a stale tid, those
    functions will subsequently call jbd2_log_wait_commit() with the same
    stale tid, and then wait for a very long time.  To fix this, we
    replace the calls to jbd2_log_start_commit() and
    jbd2_log_wait_commit() with a call to a new function,
    jbd2_complete_transaction(), which will correctly handle stale tid's.
    
    As a bonus, jbd2_complete_transaction() will avoid locking
    j_state_lock for writing unless a commit needs to be started.  This
    should have a small (but probably not measurable) improvement for
    ext4's scalability.
    
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Reported-by: Ben Hutchings <ben@decadent.org.uk>
    Reported-by: George Barnett <gbarnett@atlassian.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7e6c247f30c65913688850620e40b418223a5ff3
Author: fanchaoting <fanchaoting@cn.fujitsu.com>
Date:   Mon Apr 1 21:07:22 2013 +0800

    nfsd: don't run get_file if nfs4_preprocess_stateid_op return error
    
    commit b022032e195ffca83d7002d6b84297d796ed443b upstream.
    
    we should return error status directly when nfs4_preprocess_stateid_op
    return error.
    
    Signed-off-by: fanchaoting <fanchaoting@cn.fujitsu.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 792c71ab7ee87e0aeb0551f9c4f5e521ff582325
Author: Ben Jencks <ben@bjencks.net>
Date:   Tue Apr 2 00:35:08 2013 -0400

    usb/misc/appledisplay: Add 24" LED Cinema display
    
    commit e7d3b6e22c871ba36d052ca99bc8ceca4d546a60 upstream.
    
    Add the Apple 24" LED Cinema display to the supported devices.
    
    Signed-off-by: Ben Jencks <ben@bjencks.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3a8aad02f417b5aecafdc785c39c0e2259995c69
Author: Ming Lei <ming.lei@canonical.com>
Date:   Tue Apr 2 10:12:26 2013 +0800

    sysfs: fix use after free in case of concurrent read/write and readdir
    
    commit f7db5e7660b122142410dcf36ba903c73d473250 upstream.
    
    The inode->i_mutex isn't hold when updating filp->f_pos
    in read()/write(), so the filp->f_pos might be read as
    0 or 1 in readdir() when there is concurrent read()/write()
    on this same file, then may cause use after free in readdir().
    
    The bug can be reproduced with Li Zefan's test code on the
    link:
    
            https://patchwork.kernel.org/patch/2160771/
    
    This patch fixes the use after free under this situation.
    
    Reported-by: Li Zefan <lizefan@huawei.com>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [bwh: Backported to 3.2: file position is child inode number, not hash]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 893bee37f931a600f473801ee1c9c3e2030c2c86
Author: Tony Luck <tony.luck@intel.com>
Date:   Wed Mar 20 10:30:15 2013 -0700

    Fix initialization of CMCI/CMCP interrupts
    
    commit d303e9e98fce56cdb3c6f2ac92f626fc2bd51c77 upstream.
    
    Back 2010 during a revamp of the irq code some initializations
    were moved from ia64_mca_init() to ia64_mca_late_init() in
    
            commit c75f2aa13f5b268aba369b5dc566088b5194377c
            Cannot use register_percpu_irq() from ia64_mca_init()
    
    But this was hideously wrong. First of all these initializations
    are now down far too late. Specifically after all the other cpus
    have been brought up and initialized their own CMC vectors from
    smp_callin(). Also ia64_mca_late_init() may be called from any cpu
    so the line:
            ia64_mca_cmc_vector_setup();       /* Setup vector on BSP */
    is generally not executed on the BSP, and so the CMC vector isn't
    setup at all on that processor.
    
    Make use of the arch_early_irq_init() hook to get this code executed
    at just the right moment: not too early, not too late.
    
    Reported-by: Fred Hartnett <fred.hartnett@hp.com>
    Tested-by: Fred Hartnett <fred.hartnett@hp.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9ba240246fdb384fa1bd80a5b7528101e47d9bb8
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Apr 1 16:06:25 2013 -0400

    drm/radeon: use frac fb div on RS780/RS880
    
    commit 411678288d61ba17afe1f8afed92200be6bbc65d upstream.
    
    Monitors seem to prefer it.  Fixes:
    https://bugs.freedesktop.org/show_bug.cgi?id=37696
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [bwh: Backported to 3.2:
     - Adjust context
     - Add to pll->flags, not radeon_crtc->pll_flags]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c54fd985b53459023ef8205fdc09993b7badeedf
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Mar 18 17:12:50 2013 -0400

    drm/radeon: don't use get_engine_clock() on APUs
    
    commit bf05d9985111f85ed6922c134567b96eb789283b upstream.
    
    It doesn't work reliably.  Just report back the currently
    selected engine clock.
    
    Partially fixes:
    https://bugs.freedesktop.org/show_bug.cgi?id=62493
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c08f24e209c8d0dbd2274af9327195d9ec1c2a53
Author: Yinghai Lu <yinghai@kernel.org>
Date:   Thu Mar 28 04:28:58 2013 +0000

    PCI / ACPI: Don't query OSC support with all possible controls
    
    commit 545d6e189a41c94c11f55045a771118eccc9d9eb upstream.
    
    Found problem on system that firmware that could handle pci aer.
    Firmware get error reporting after pci injecting error, before os boots.
    But after os boots, firmware can not get report anymore, even pci=noaer
    is passed.
    
    Root cause: BIOS _OSC has problem with query bit checking.
    It turns out that BIOS vendor is copying example code from ACPI Spec.
    In ACPI Spec 5.0, page 290:
    
            If (Not(And(CDW1,1))) // Query flag clear?
            {       // Disable GPEs for features granted native control.
                    If (And(CTRL,0x01)) // Hot plug control granted?
                    {
                            Store(0,HPCE) // clear the hot plug SCI enable bit
                            Store(1,HPCS) // clear the hot plug SCI status bit
                    }
            ...
            }
    
    When Query flag is set, And(CDW1,1) will be 1, Not(1) will return 0xfffffffe.
    So it will get into code path that should be for control set only.
    BIOS acpi code should be changed to "If (LEqual(And(CDW1,1), 0)))"
    
    Current kernel code is using _OSC query to notify firmware about support
    from OS and then use _OSC to set control bits.
    During query support, current code is using all possible controls.
    So will execute code that should be only for control set stage.
    
    That will have problem when pci=noaer or aer firmware_first is used.
    As firmware have that control set for os aer already in query support stage,
    but later will not os aer handling.
    
    We should avoid passing all possible controls, just use osc_control_set
    instead.
    That should workaround BIOS bugs with affected systems on the field
    as more bios vendors are copying sample code from ACPI spec.
    
    Signed-off-by: Yinghai Lu <yinghai@kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f596ca6c42fc4a8bb8269684ad2b839d78f684eb
Author: Li Zefan <lizefan@huawei.com>
Date:   Tue Mar 12 15:36:00 2013 -0700

    cgroup: fix an off-by-one bug which may trigger BUG_ON()
    
    commit 3ac1707a13a3da9cfc8f242a15b2fae6df2c5f88 upstream.
    
    The 3rd parameter of flex_array_prealloc() is the number of elements,
    not the index of the last element.
    
    The effect of the bug is, when opening cgroup.procs, a flex array will
    be allocated and all elements of the array is allocated with
    GFP_KERNEL flag, but the last one is GFP_ATOMIC, and if we fail to
    allocate memory for it, it'll trigger a BUG_ON().
    
    Signed-off-by: Li Zefan <lizefan@huawei.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 6d895982c8155fca39e857dd9777171e4747d4da
Author: Stephan Schreiber <info@fs-driver.org>
Date:   Tue Mar 19 15:27:12 2013 -0700

    Wrong asm register contraints in the kvm implementation
    
    commit de53e9caa4c6149ef4a78c2f83d7f5b655848767 upstream.
    
    The Linux Kernel contains some inline assembly source code which has
    wrong asm register constraints in arch/ia64/kvm/vtlb.c.
    
    I observed this on Kernel 3.2.35 but it is also true on the most
    recent Kernel 3.9-rc1.
    
    File arch/ia64/kvm/vtlb.c:
    
    u64 guest_vhpt_lookup(u64 iha, u64 *pte)
    {
            u64 ret;
            struct thash_data *data;
    
            data = __vtr_lookup(current_vcpu, iha, D_TLB);
            if (data != NULL)
                    thash_vhpt_insert(current_vcpu, data->page_flags,
                            data->itir, iha, D_TLB);
    
            asm volatile (
                            "rsm psr.ic|psr.i;;"
                            "srlz.d;;"
                            "ld8.s r9=[%1];;"
                            "tnat.nz p6,p7=r9;;"
                            "(p6) mov %0=1;"
                            "(p6) mov r9=r0;"
                            "(p7) extr.u r9=r9,0,53;;"
                            "(p7) mov %0=r0;"
                            "(p7) st8 [%2]=r9;;"
                            "ssm psr.ic;;"
                            "srlz.d;;"
                            "ssm psr.i;;"
                            "srlz.d;;"
                            : "=r"(ret) : "r"(iha), "r"(pte):"memory");
    
            return ret;
    }
    
    The list of output registers is
                            : "=r"(ret) : "r"(iha), "r"(pte):"memory");
    The constraint "=r" means that the GCC has to maintain that these vars
    are in registers and contain valid info when the program flow leaves
    the assembly block (output registers).
    But "=r" also means that GCC can put them in registers that are used
    as input registers. Input registers are iha, pte on the example.
    If the predicate p7 is true, the 8th assembly instruction
                            "(p7) mov %0=r0;"
    is the first one which writes to a register which is maintained by the
    register constraints; it sets %0. %0 means the first register operand;
    it is ret here.
    This instruction might overwrite the %2 register (pte) which is needed
    by the next instruction:
                            "(p7) st8 [%2]=r9;;"
    Whether it really happens depends on how GCC decides what registers it
    uses and how it optimizes the code.
    
    The attached patch  fixes the register operand constraints in
    arch/ia64/kvm/vtlb.c.
    The register constraints should be
                            : "=&r"(ret) : "r"(iha), "r"(pte):"memory");
    The & means that GCC must not use any of the input registers to place
    this output register in.
    
    This is Debian bug#702639
    (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=702639).
    
    The patch is applicable on Kernel 3.9-rc1, 3.2.35 and many other versions.
    
    Signed-off-by: Stephan Schreiber <info@fs-driver.org>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit b5789c664092fce52ae3dcbf552969d4dd72a154
Author: Stephan Schreiber <info@fs-driver.org>
Date:   Tue Mar 19 15:22:27 2013 -0700

    Wrong asm register contraints in the futex implementation
    
    commit 136f39ddc53db3bcee2befbe323a56d4fbf06da8 upstream.
    
    The Linux Kernel contains some inline assembly source code which has
    wrong asm register constraints in arch/ia64/include/asm/futex.h.
    
    I observed this on Kernel 3.2.23 but it is also true on the most
    recent Kernel 3.9-rc1.
    
    File arch/ia64/include/asm/futex.h:
    
    static inline int
    futex_atomic_cmpxchg_inatomic(u32 *uval, u32 __user *uaddr,
                                  u32 oldval, u32 newval)
    {
            if (!access_ok(VERIFY_WRITE, uaddr, sizeof(u32)))
                    return -EFAULT;
    
            {
                    register unsigned long r8 __asm ("r8");
                    unsigned long prev;
                    __asm__ __volatile__(
                            "       mf;;                                    \n"
                            "       mov %0=r0                               \n"
                            "       mov ar.ccv=%4;;                         \n"
                            "[1:]   cmpxchg4.acq %1=[%2],%3,ar.ccv          \n"
                            "       .xdata4 \"__ex_table\", 1b-., 2f-.      \n"
                            "[2:]"
                            : "=r" (r8), "=r" (prev)
                            : "r" (uaddr), "r" (newval),
                              "rO" ((long) (unsigned) oldval)
                            : "memory");
                    *uval = prev;
                    return r8;
            }
    }
    
    The list of output registers is
                            : "=r" (r8), "=r" (prev)
    The constraint "=r" means that the GCC has to maintain that these vars
    are in registers and contain valid info when the program flow leaves
    the assembly block (output registers).
    But "=r" also means that GCC can put them in registers that are used
    as input registers. Input registers are uaddr, newval, oldval on the
    example.
    The second assembly instruction
                            "       mov %0=r0                               \n"
    is the first one which writes to a register; it sets %0 to 0. %0 means
    the first register operand; it is r8 here. (The r0 is read-only and
    always 0 on the Itanium; it can be used if an immediate zero value is
    needed.)
    This instruction might overwrite one of the other registers which are
    still needed.
    Whether it really happens depends on how GCC decides what registers it
    uses and how it optimizes the code.
    
    The objdump utility can give us disassembly.
    The futex_atomic_cmpxchg_inatomic() function is inline, so we have to
    look for a module that uses the funtion. This is the
    cmpxchg_futex_value_locked() function in
    kernel/futex.c:
    
    static int cmpxchg_futex_value_locked(u32 *curval, u32 __user *uaddr,
                                          u32 uval, u32 newval)
    {
            int ret;
    
            pagefault_disable();
            ret = futex_atomic_cmpxchg_inatomic(curval, uaddr, uval, newval);
            pagefault_enable();
    
            return ret;
    }
    
    Now the disassembly. At first from the Kernel package 3.2.23 which has
    been compiled with GCC 4.4, remeber this Kernel seemed to work:
    objdump -d linux-3.2.23/debian/build/build_ia64_none_mckinley/kernel/futex.o
    
    0000000000000230 <cmpxchg_futex_value_locked>:
          230:      0b 18 80 1b 18 21       [MMI]       adds r3=3168,r13;;
          236:      80 40 0d 00 42 00                   adds r8=40,r3
          23c:      00 00 04 00                         nop.i 0x0;;
          240:      0b 50 00 10 10 10       [MMI]       ld4 r10=[r8];;
          246:      90 08 28 00 42 00                   adds r9=1,r10
          24c:      00 00 04 00                         nop.i 0x0;;
          250:      09 00 00 00 01 00       [MMI]       nop.m 0x0
          256:      00 48 20 20 23 00                   st4 [r8]=r9
          25c:      00 00 04 00                         nop.i 0x0;;
          260:      08 10 80 06 00 21       [MMI]       adds r2=32,r3
          266:      00 00 00 02 00 00                   nop.m 0x0
          26c:      02 08 f1 52                         extr.u r16=r33,0,61
          270:      05 40 88 00 08 e0       [MLX]       addp4 r8=r34,r0
          276:      ff ff 0f 00 00 e0                   movl r15=0xfffffffbfff;;
          27c:      f1 f7 ff 65
          280:      09 70 00 04 18 10       [MMI]       ld8 r14=[r2]
          286:      00 00 00 02 00 c0                   nop.m 0x0
          28c:      f0 80 1c d0                         cmp.ltu p6,p7=r15,r16;;
          290:      08 40 fc 1d 09 3b       [MMI]       cmp.eq p8,p9=-1,r14
          296:      00 00 00 02 00 40                   nop.m 0x0
          29c:      e1 08 2d d0                         cmp.ltu p10,p11=r14,r33
          2a0:      56 01 10 00 40 10       [BBB] (p10) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2a6:      02 08 00 80 21 03             (p08) br.cond.dpnt.few 2b0
    <cmpxchg_futex_value_locked+0x80>
          2ac:      40 00 00 41                   (p06) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2b0:      0a 00 00 00 22 00       [MMI]       mf;;
          2b6:      80 00 00 00 42 00                   mov r8=r0
          2bc:      00 00 04 00                         nop.i 0x0
          2c0:      0b 00 20 40 2a 04       [MMI]       mov.m ar.ccv=r8;;
          2c6:      10 1a 85 22 20 00                   cmpxchg4.acq r33=[r33],r35,ar.ccv
          2cc:      00 00 04 00                         nop.i 0x0;;
          2d0:      10 00 84 40 90 11       [MIB]       st4 [r32]=r33
          2d6:      00 00 00 02 00 00                   nop.i 0x0
          2dc:      20 00 00 40                         br.few 2f0
    <cmpxchg_futex_value_locked+0xc0>
          2e0:      09 40 c8 f9 ff 27       [MMI]       mov r8=-14
          2e6:      00 00 00 02 00 00                   nop.m 0x0
          2ec:      00 00 04 00                         nop.i 0x0;;
          2f0:      0b 58 20 1a 19 21       [MMI]       adds r11=3208,r13;;
          2f6:      20 01 2c 20 20 00                   ld4 r18=[r11]
          2fc:      00 00 04 00                         nop.i 0x0;;
          300:      0b 88 fc 25 3f 23       [MMI]       adds r17=-1,r18;;
          306:      00 88 2c 20 23 00                   st4 [r11]=r17
          30c:      00 00 04 00                         nop.i 0x0;;
          310:      11 00 00 00 01 00       [MIB]       nop.m 0x0
          316:      00 00 00 02 00 80                   nop.i 0x0
          31c:      08 00 84 00                         br.ret.sptk.many b0;;
    
    The lines
          2b0:      0a 00 00 00 22 00       [MMI]       mf;;
          2b6:      80 00 00 00 42 00                   mov r8=r0
          2bc:      00 00 04 00                         nop.i 0x0
          2c0:      0b 00 20 40 2a 04       [MMI]       mov.m ar.ccv=r8;;
          2c6:      10 1a 85 22 20 00                   cmpxchg4.acq r33=[r33],r35,ar.ccv
          2cc:      00 00 04 00                         nop.i 0x0;;
    are the instructions of the assembly block.
    The line
          2b6:      80 00 00 00 42 00                   mov r8=r0
    sets the r8 register to 0 and after that
          2c0:      0b 00 20 40 2a 04       [MMI]       mov.m ar.ccv=r8;;
    prepares the 'oldvalue' for the cmpxchg but it takes it from r8. This
    is wrong.
    What happened here is what I explained above: An input register is
    overwritten which is still needed.
    The register operand constraints in futex.h are wrong.
    
    (The problem doesn't occur when the Kernel is compiled with GCC 4.6.)
    
    The attached patch fixes the register operand constraints in futex.h.
    The code after patching of it:
    
    static inline int
    futex_atomic_cmpxchg_inatomic(u32 *uval, u32 __user *uaddr,
                                  u32 oldval, u32 newval)
    {
            if (!access_ok(VERIFY_WRITE, uaddr, sizeof(u32)))
                    return -EFAULT;
    
            {
                    register unsigned long r8 __asm ("r8") = 0;
                    unsigned long prev;
                    __asm__ __volatile__(
                            "       mf;;                                    \n"
                            "       mov ar.ccv=%4;;                         \n"
                            "[1:]   cmpxchg4.acq %1=[%2],%3,ar.ccv          \n"
                            "       .xdata4 \"__ex_table\", 1b-., 2f-.      \n"
                            "[2:]"
                            : "+r" (r8), "=&r" (prev)
                            : "r" (uaddr), "r" (newval),
                              "rO" ((long) (unsigned) oldval)
                            : "memory");
                    *uval = prev;
                    return r8;
            }
    }
    
    I also initialized the 'r8' var with the C programming language.
    The _asm qualifier on the definition of the 'r8' var forces GCC to use
    the r8 processor register for it.
    I don't believe that we should use inline assembly for zeroing out a
    local variable.
    The constraint is
    "+r" (r8)
    what means that it is both an input register and an output register.
    Note that the page fault handler will modify the r8 register which
    will be the return value of the function.
    The real fix is
    "=&r" (prev)
    The & means that GCC must not use any of the input registers to place
    this output register in.
    
    Patched the Kernel 3.2.23 and compiled it with GCC4.4:
    
    0000000000000230 <cmpxchg_futex_value_locked>:
          230:      0b 18 80 1b 18 21       [MMI]       adds r3=3168,r13;;
          236:      80 40 0d 00 42 00                   adds r8=40,r3
          23c:      00 00 04 00                         nop.i 0x0;;
          240:      0b 50 00 10 10 10       [MMI]       ld4 r10=[r8];;
          246:      90 08 28 00 42 00                   adds r9=1,r10
          24c:      00 00 04 00                         nop.i 0x0;;
          250:      09 00 00 00 01 00       [MMI]       nop.m 0x0
          256:      00 48 20 20 23 00                   st4 [r8]=r9
          25c:      00 00 04 00                         nop.i 0x0;;
          260:      08 10 80 06 00 21       [MMI]       adds r2=32,r3
          266:      20 12 01 10 40 00                   addp4 r34=r34,r0
          26c:      02 08 f1 52                         extr.u r16=r33,0,61
          270:      05 40 00 00 00 e1       [MLX]       mov r8=r0
          276:      ff ff 0f 00 00 e0                   movl r15=0xfffffffbfff;;
          27c:      f1 f7 ff 65
          280:      09 70 00 04 18 10       [MMI]       ld8 r14=[r2]
          286:      00 00 00 02 00 c0                   nop.m 0x0
          28c:      f0 80 1c d0                         cmp.ltu p6,p7=r15,r16;;
          290:      08 40 fc 1d 09 3b       [MMI]       cmp.eq p8,p9=-1,r14
          296:      00 00 00 02 00 40                   nop.m 0x0
          29c:      e1 08 2d d0                         cmp.ltu p10,p11=r14,r33
          2a0:      56 01 10 00 40 10       [BBB] (p10) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2a6:      02 08 00 80 21 03             (p08) br.cond.dpnt.few 2b0
    <cmpxchg_futex_value_locked+0x80>
          2ac:      40 00 00 41                   (p06) br.cond.spnt.few 2e0
    <cmpxchg_futex_value_locked+0xb0>
          2b0:      0b 00 00 00 22 00       [MMI]       mf;;
          2b6:      00 10 81 54 08 00                   mov.m ar.ccv=r34
          2bc:      00 00 04 00                         nop.i 0x0;;
          2c0:      09 58 8c 42 11 10       [MMI]       cmpxchg4.acq r11=[r33],r35,ar.ccv
          2c6:      00 00 00 02 00 00                   nop.m 0x0
          2cc:      00 00 04 00                         nop.i 0x0;;
          2d0:      10 00 2c 40 90 11       [MIB]       st4 [r32]=r11
          2d6:      00 00 00 02 00 00                   nop.i 0x0
          2dc:      20 00 00 40                         br.few 2f0
    <cmpxchg_futex_value_locked+0xc0>
          2e0:      09 40 c8 f9 ff 27       [MMI]       mov r8=-14
          2e6:      00 00 00 02 00 00                   nop.m 0x0
          2ec:      00 00 04 00                         nop.i 0x0;;
          2f0:      0b 88 20 1a 19 21       [MMI]       adds r17=3208,r13;;
          2f6:      30 01 44 20 20 00                   ld4 r19=[r17]
          2fc:      00 00 04 00                         nop.i 0x0;;
          300:      0b 90 fc 27 3f 23       [MMI]       adds r18=-1,r19;;
          306:      00 90 44 20 23 00                   st4 [r17]=r18
          30c:      00 00 04 00                         nop.i 0x0;;
          310:      11 00 00 00 01 00       [MIB]       nop.m 0x0
          316:      00 00 00 02 00 80                   nop.i 0x0
          31c:      08 00 84 00                         br.ret.sptk.many b0;;
    
    Much better.
    There is a
          270:      05 40 00 00 00 e1       [MLX]       mov r8=r0
    which was generated by C code r8 = 0. Below
          2b6:      00 10 81 54 08 00                   mov.m ar.ccv=r34
    what means that oldval is no longer overwritten.
    
    This is Debian bug#702641
    (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=702641).
    
    The patch is applicable on Kernel 3.9-rc1, 3.2.23 and many other versions.
    
    Signed-off-by: Stephan Schreiber <info@fs-driver.org>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7462e0e257f20734786b2c04b6465ae23d565bd6
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Fri Mar 15 13:10:35 2013 -0400

    tracing: Fix ftrace_dump()
    
    commit 7fe70b579c9e3daba71635e31b6189394e7b79d3 upstream.
    
    ftrace_dump() had a lot of issues. What ftrace_dump() does, is when
    ftrace_dump_on_oops is set (via a kernel parameter or sysctl), it
    will dump out the ftrace buffers to the console when either a oops,
    panic, or a sysrq-z occurs.
    
    This was written a long time ago when ftrace was fragile to recursion.
    But it wasn't written well even for that.
    
    There's a possible deadlock that can occur if a ftrace_dump() is happening
    and an NMI triggers another dump. This is because it grabs a lock
    before checking if the dump ran.
    
    It also totally disables ftrace, and tracing for no good reasons.
    
    As the ring_buffer now checks if it is read via a oops or NMI, where
    there's a chance that the buffer gets corrupted, it will disable
    itself. No need to have ftrace_dump() do the same.
    
    ftrace_dump() is now cleaned up where it uses an atomic counter to
    make sure only one dump happens at a time. A simple atomic_inc_return()
    is enough that is needed for both other CPUs and NMIs. No need for
    a spinlock, as if one CPU is running the dump, no other CPU needs
    to do it too.
    
    The tracing_on variable is turned off and not turned on. The original
    code did this, but it wasn't pretty. By just disabling this variable
    we get the result of not seeing traces that happen between crashes.
    
    For sysrq-z, it doesn't get turned on, but the user can always write
    a '1' to the tracing_on file. If they are using sysrq-z, then they should
    know about tracing_on.
    
    The new code is much easier to read and less error prone. No more
    deadlock possibility when an NMI triggers here.
    
    Reported-by: zhangwei(Jovi) <jovi.zhangwei@huawei.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commit cde591b5c0694768bfbafe3f3ca32e2c20c5ebfe
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Wed Mar 13 23:34:22 2013 -0400

    tracing: Remove most or all of stack tracer stack size from stack_max_size
    
    commit 4df297129f622bdc18935c856f42b9ddd18f9f28 upstream.
    
    Currently, the depth reported in the stack tracer stack_trace file
    does not match the stack_max_size file. This is because the stack_max_size
    includes the overhead of stack tracer itself while the depth does not.
    
    The first time a max is triggered, a calculation is not performed that
    figures out the overhead of the stack tracer and subtracts it from
    the stack_max_size variable. The overhead is stored and is subtracted
    from the reported stack size for comparing for a new max.
    
    Now the stack_max_size corresponds to the reported depth:
    
     # cat stack_max_size
    4640
    
     # cat stack_trace
            Depth    Size   Location    (48 entries)
            -----    ----   --------
      0)     4640      32   _raw_spin_lock+0x18/0x24
      1)     4608     112   ____cache_alloc+0xb7/0x22d
      2)     4496      80   kmem_cache_alloc+0x63/0x12f
      3)     4416      16   mempool_alloc_slab+0x15/0x17
    [...]
    
    While testing against and older gcc on x86 that uses mcount instead
    of fentry, I found that pasing in ip + MCOUNT_INSN_SIZE let the
    stack trace show one more function deep which was missing before.
    
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1d2922feced76c60f850cbcd5d13f34b867d7935
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Wed Mar 13 21:25:35 2013 -0400

    tracing: Fix stack tracer with fentry use
    
    commit d4ecbfc49b4b1d4b597fb5ba9e4fa25d62f105c5 upstream.
    
    When gcc 4.6 on x86 is used, the function tracer will use the new
    option -mfentry which does a call to "fentry" at every function
    instead of "mcount". The significance of this is that fentry is
    called as the first operation of the function instead of the mcount
    usage of being called after the stack.
    
    This causes the stack tracer to show some bogus results for the size
    of the last function traced, as well as showing "ftrace_call" instead
    of the function. This is due to the stack frame not being set up
    by the function that is about to be traced.
    
     # cat stack_trace
            Depth    Size   Location    (48 entries)
            -----    ----   --------
      0)     4824     216   ftrace_call+0x5/0x2f
      1)     4608     112   ____cache_alloc+0xb7/0x22d
      2)     4496      80   kmem_cache_alloc+0x63/0x12f
    
    The 216 size for ftrace_call includes both the ftrace_call stack
    (which includes the saving of registers it does), as well as the
    stack size of the parent.
    
    To fix this, if CC_USING_FENTRY is defined, then the stack_tracer
    will reserve the first item in stack_dump_trace[] array when
    calling save_stack_trace(), and it will fill it in with the parent ip.
    Then the code will look for the parent pointer on the stack and
    give the real size of the parent's stack pointer:
    
     # cat stack_trace
            Depth    Size   Location    (14 entries)
            -----    ----   --------
      0)     2640      48   update_group_power+0x26/0x187
      1)     2592     224   update_sd_lb_stats+0x2a5/0x4ac
      2)     2368     160   find_busiest_group+0x31/0x1f1
      3)     2208     256   load_balance+0xd9/0x662
    
    I'm Cc'ing stable, although it's not urgent, as it only shows bogus
    size for item #0, the rest of the trace is legit. It should still be
    corrected in previous stable releases.
    
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f2547fe3bd47516904ec042f28b8e8d77ceec440
Author: Steven Rostedt (Red Hat) <rostedt@goodmis.org>
Date:   Wed Mar 13 20:43:57 2013 -0400

    tracing: Use stack of calling function for stack tracer
    
    commit 87889501d0adfae10e3b0f0e6f2d7536eed9ae84 upstream.
    
    Use the stack of stack_trace_call() instead of check_stack() as
    the test pointer for max stack size. It makes it a bit cleaner
    and a little more accurate.
    
    Adding stable, as a later fix depends on this patch.
    
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit bf0f91c05b5abf5fafa0b1118db4c33fc011fcd1
Author: Zhao Hongjiang <zhaohongjiang@huawei.com>
Date:   Fri Apr 26 11:03:53 2013 +0800

    aio: fix possible invalid memory access when DEBUG is enabled
    
    commit 91d80a84bbc8f28375cca7e65ec666577b4209ad upstream.
    
    dprintk() shouldn't access @ring after it's unmapped.
    
    Signed-off-by: Zhao Hongjiang <zhaohongjiang@huawei.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.2: keep the second argument to kunmap_atomic()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 419f4ba0f032c8d906153d24e017f4bee6df26f5
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 14:05:39 2013 +0200

    crypto: algif - suppress sending source address information in recvmsg
    
    commit 72a763d805a48ac8c0bf48fdb510e84c12de51fe upstream.
    
    The current code does not set the msg_namelen member to 0 and therefore
    makes net/socket.c leak the local sockaddr_storage variable to userland
    -- 128 bytes of kernel stack memory. Fix that.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
