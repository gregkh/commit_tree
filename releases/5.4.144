commit c6bf0ed9d1a727fcd98f6a52bbdd2afbdfb44924
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Sep 3 10:08:16 2021 +0200

    Linux 5.4.144
    
    Link: https://lore.kernel.org/r/20210901122253.388326997@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0634c0f91995da57435377cdb40f39d13aed0f16
Author: Richard Guy Briggs <rgb@redhat.com>
Date:   Mon Aug 23 22:04:09 2021 -0400

    audit: move put_tree() to avoid trim_trees refcount underflow and UAF
    
    commit 67d69e9d1a6c889d98951c1d74b19332ce0565af upstream.
    
    AUDIT_TRIM is expected to be idempotent, but multiple executions resulted
    in a refcount underflow and use-after-free.
    
    git bisect fingered commit fb041bb7c0a9 ("locking/refcount: Consolidate
    implementations of refcount_t") but this patch with its more thorough
    checking that wasn't in the x86 assembly code merely exposed a previously
    existing tree refcount imbalance in the case of tree trimming code that
    was refactored with prune_one() to remove a tree introduced in
    commit 8432c7006297 ("audit: Simplify locking around untag_chunk()")
    
    Move the put_tree() to cover only the prune_one() case.
    
    Passes audit-testsuite and 3 passes of "auditctl -t" with at least one
    directory watch.
    
    Cc: Jan Kara <jack@suse.cz>
    Cc: Will Deacon <will@kernel.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Seiji Nishikawa <snishika@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 8432c7006297 ("audit: Simplify locking around untag_chunk()")
    Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    [PM: reformatted/cleaned-up the commit description]
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cab0003311a06151c7074c857e710eecf0dc24fa
Author: Peter Collingbourne <pcc@google.com>
Date:   Thu Aug 26 12:46:01 2021 -0700

    net: don't unconditionally copy_from_user a struct ifreq for socket ioctls
    
    commit d0efb16294d145d157432feda83877ae9d7cdf37 upstream.
    
    A common implementation of isatty(3) involves calling a ioctl passing
    a dummy struct argument and checking whether the syscall failed --
    bionic and glibc use TCGETS (passing a struct termios), and musl uses
    TIOCGWINSZ (passing a struct winsize). If the FD is a socket, we will
    copy sizeof(struct ifreq) bytes of data from the argument and return
    -EFAULT if that fails. The result is that the isatty implementations
    may return a non-POSIX-compliant value in errno in the case where part
    of the dummy struct argument is inaccessible, as both struct termios
    and struct winsize are smaller than struct ifreq (at least on arm64).
    
    Although there is usually enough stack space following the argument
    on the stack that this did not present a practical problem up to now,
    with MTE stack instrumentation it's more likely for the copy to fail,
    as the memory following the struct may have a different tag.
    
    Fix the problem by adding an early check for whether the ioctl is a
    valid socket ioctl, and return -ENOTTY if it isn't.
    
    Fixes: 44c02a2c3dc5 ("dev_ioctl(): move copyin/copyout to callers")
    Link: https://linux-review.googlesource.com/id/I869da6cf6daabc3e4b7b82ac979683ba05e27d4d
    Signed-off-by: Peter Collingbourne <pcc@google.com>
    Cc: <stable@vger.kernel.org> # 4.19
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6752b3b0628e6a463b6a20f77357347ec9e42db4
Author: Helge Deller <deller@gmx.de>
Date:   Fri Aug 27 20:42:57 2021 +0200

    Revert "parisc: Add assembly implementations for memset, strlen, strcpy, strncpy and strcat"
    
    commit f6a3308d6feb351d9854eb8b3f6289a1ac163125 upstream.
    
    This reverts commit 83af58f8068ea3f7b3c537c37a30887bfa585069.
    
    It turns out that at least the assembly implementation for strncpy() was
    buggy.  Revert the whole commit and return back to the default coding.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.4+
    Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67871ada3a53895df959305b0bba84a91081a90e
Author: Denis Efremov <efremov@linux.com>
Date:   Sat Aug 7 10:37:02 2021 +0300

    Revert "floppy: reintroduce O_NDELAY fix"
    
    commit c7e9d0020361f4308a70cdfd6d5335e273eb8717 upstream.
    
    The patch breaks userspace implementations (e.g. fdutils) and introduces
    regressions in behaviour. Previously, it was possible to O_NDELAY open a
    floppy device with no media inserted or with write protected media without
    an error. Some userspace tools use this particular behavior for probing.
    
    It's not the first time when we revert this patch. Previous revert is in
    commit f2791e7eadf4 (Revert "floppy: refactor open() flags handling").
    
    This reverts commit 8a0c014cd20516ade9654fc13b51345ec58e7be8.
    
    Link: https://lore.kernel.org/linux-block/de10cb47-34d1-5a88-7751-225ca380f735@compro.net/
    Reported-by: Mark Hounschell <markh@compro.net>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Wim Osterholt <wim@djo.tudelft.nl>
    Cc: Kurt Garloff <kurt@garloff.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7f7eca72ecc08f0bb6897fda2290293fca63068
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Aug 6 18:24:15 2021 +0800

    btrfs: fix NULL pointer dereference when deleting device by invalid id
    
    commit e4571b8c5e9ffa1e85c0c671995bd4dcc5c75091 upstream.
    
    [BUG]
    It's easy to trigger NULL pointer dereference, just by removing a
    non-existing device id:
    
     # mkfs.btrfs -f -m single -d single /dev/test/scratch1 \
                                         /dev/test/scratch2
     # mount /dev/test/scratch1 /mnt/btrfs
     # btrfs device remove 3 /mnt/btrfs
    
    Then we have the following kernel NULL pointer dereference:
    
     BUG: kernel NULL pointer dereference, address: 0000000000000000
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 0 P4D 0
     Oops: 0000 [#1] PREEMPT SMP NOPTI
     CPU: 9 PID: 649 Comm: btrfs Not tainted 5.14.0-rc3-custom+ #35
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
     RIP: 0010:btrfs_rm_device+0x4de/0x6b0 [btrfs]
      btrfs_ioctl+0x18bb/0x3190 [btrfs]
      ? lock_is_held_type+0xa5/0x120
      ? find_held_lock.constprop.0+0x2b/0x80
      ? do_user_addr_fault+0x201/0x6a0
      ? lock_release+0xd2/0x2d0
      ? __x64_sys_ioctl+0x83/0xb0
      __x64_sys_ioctl+0x83/0xb0
      do_syscall_64+0x3b/0x90
      entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    [CAUSE]
    Commit a27a94c2b0c7 ("btrfs: Make btrfs_find_device_by_devspec return
    btrfs_device directly") moves the "missing" device path check into
    btrfs_rm_device().
    
    But btrfs_rm_device() itself can have case where it only receives
    @devid, with NULL as @device_path.
    
    In that case, calling strcmp() on NULL will trigger the NULL pointer
    dereference.
    
    Before that commit, we handle the "missing" case inside
    btrfs_find_device_by_devspec(), which will not check @device_path at all
    if @devid is provided, thus no way to trigger the bug.
    
    [FIX]
    Before calling strcmp(), also make sure @device_path is not NULL.
    
    Fixes: a27a94c2b0c7 ("btrfs: Make btrfs_find_device_by_devspec return btrfs_device directly")
    CC: stable@vger.kernel.org # 5.4+
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e644da7ace0fe391683ebc5e53cbb340bc923b09
Author: Petr Vorel <petr.vorel@gmail.com>
Date:   Thu Apr 15 21:39:13 2021 +0200

    arm64: dts: qcom: msm8994-angler: Fix gpio-reserved-ranges 85-88
    
    commit f890f89d9a80fffbfa7ca791b78927e5b8aba869 upstream.
    
    Reserve GPIO pins 85-88 as these aren't meant to be accessible from the
    application CPUs (causes reboot). Yet another fix similar to
    9134586715e3, 5f8d3ab136d0, which is needed to allow angler to boot after
    3edfb7bd76bd ("gpiolib: Show correct direction from the beginning").
    
    Fixes: feeaf56ac78d ("arm64: dts: msm8994 SoC and Huawei Angler (Nexus 6P) support")
    
    Signed-off-by: Petr Vorel <petr.vorel@gmail.com>
    Reviewed-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Link: https://lore.kernel.org/r/20210415193913.1836153-1-petr.vorel@gmail.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f76285f6df8ea44ac677c4c80853edff5be7a53
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Jun 22 10:56:47 2021 -0700

    KVM: x86/mmu: Treat NX as used (not reserved) for all !TDP shadow MMUs
    
    commit 112022bdb5bc372e00e6e43cb88ee38ea67b97bd upstream
    
    Mark NX as being used for all non-nested shadow MMUs, as KVM will set the
    NX bit for huge SPTEs if the iTLB mutli-hit mitigation is enabled.
    Checking the mitigation itself is not sufficient as it can be toggled on
    at any time and KVM doesn't reset MMU contexts when that happens.  KVM
    could reset the contexts, but that would require purging all SPTEs in all
    MMUs, for no real benefit.  And, KVM already forces EFER.NX=1 when TDP is
    disabled (for WP=0, SMEP=1, NX=0), so technically NX is never reserved
    for shadow MMUs.
    
    Fixes: b8e8c8303ff2 ("kvm: mmu: ITLB_MULTIHIT mitigation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210622175739.3610207-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [sudip: use old path]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 620681d7201a6795a485123e943a138d5c434414
Author: DENG Qingfang <dqfext@gmail.com>
Date:   Wed Aug 11 17:50:43 2021 +0800

    net: dsa: mt7530: fix VLAN traffic leaks again
    
    commit 7428022b50d0fbb4846dd0f00639ea09d36dff02 upstream.
    
    When a port leaves a VLAN-aware bridge, the current code does not clear
    other ports' matrix field bit. If the bridge is later set to VLAN-unaware
    mode, traffic in the bridge may leak to that port.
    
    Remove the VLAN filtering check in mt7530_port_bridge_leave.
    
    Fixes: 474a2ddaa192 ("net: dsa: mt7530: fix VLAN traffic leaks")
    Fixes: 83163f7dca56 ("net: dsa: mediatek: add VLAN support for MT7530")
    Signed-off-by: DENG Qingfang <dqfext@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38adbf21f37e2de03569c8bf5af294a5c8c9d233
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Fri Oct 11 10:20:53 2019 -0700

    bpf: Fix cast to pointer from integer of different size warning
    
    commit 2dedd7d2165565bafa89718eaadfc5d1a7865f66 upstream.
    
    Fix "warning: cast to pointer from integer of different size" when
    casting u64 addr to void *.
    
    Fixes: a23740ec43ba ("bpf: Track contents of read-only maps as scalars")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20191011172053.2980619-1-andriin@fb.com
    Cc: Rafael David Tinoco <rafaeldtinoco@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 812ee47ad76ec881ebde1e1764a0711e4b50db2e
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Wed Oct 9 13:14:57 2019 -0700

    bpf: Track contents of read-only maps as scalars
    
    commit a23740ec43ba022dbfd139d0fe3eff193216272b upstream.
    
    Maps that are read-only both from BPF program side and user space side
    have their contents constant, so verifier can track referenced values
    precisely and use that knowledge for dead code elimination, branch
    pruning, etc. This patch teaches BPF verifier how to do this.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20191009201458.2679171-2-andriin@fb.com
    Signed-off-by: Rafael David Tinoco <rafaeldtinoco@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4418015201bdca0cd4e28b363d88096206e4ad0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 30 08:55:18 2021 -0700

    vt_kdsetmode: extend console locking
    
    commit 2287a51ba822384834dafc1c798453375d1107c7 upstream.
    
    As per the long-suffering comment.
    
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a19e00450869eef921f22684ab9df268a359336
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Feb 23 12:08:48 2021 +0000

    btrfs: fix race between marking inode needs to be logged and log syncing
    
    commit bc0939fcfab0d7efb2ed12896b1af3d819954a14 upstream.
    
    We have a race between marking that an inode needs to be logged, either
    at btrfs_set_inode_last_trans() or at btrfs_page_mkwrite(), and between
    btrfs_sync_log(). The following steps describe how the race happens.
    
    1) We are at transaction N;
    
    2) Inode I was previously fsynced in the current transaction so it has:
    
        inode->logged_trans set to N;
    
    3) The inode's root currently has:
    
       root->log_transid set to 1
       root->last_log_commit set to 0
    
       Which means only one log transaction was committed to far, log
       transaction 0. When a log tree is created we set ->log_transid and
       ->last_log_commit of its parent root to 0 (at btrfs_add_log_tree());
    
    4) One more range of pages is dirtied in inode I;
    
    5) Some task A starts an fsync against some other inode J (same root), and
       so it joins log transaction 1.
    
       Before task A calls btrfs_sync_log()...
    
    6) Task B starts an fsync against inode I, which currently has the full
       sync flag set, so it starts delalloc and waits for the ordered extent
       to complete before calling btrfs_inode_in_log() at btrfs_sync_file();
    
    7) During ordered extent completion we have btrfs_update_inode() called
       against inode I, which in turn calls btrfs_set_inode_last_trans(),
       which does the following:
    
         spin_lock(&inode->lock);
         inode->last_trans = trans->transaction->transid;
         inode->last_sub_trans = inode->root->log_transid;
         inode->last_log_commit = inode->root->last_log_commit;
         spin_unlock(&inode->lock);
    
       So ->last_trans is set to N and ->last_sub_trans set to 1.
       But before setting ->last_log_commit...
    
    8) Task A is at btrfs_sync_log():
    
       - it increments root->log_transid to 2
       - starts writeback for all log tree extent buffers
       - waits for the writeback to complete
       - writes the super blocks
       - updates root->last_log_commit to 1
    
       It's a lot of slow steps between updating root->log_transid and
       root->last_log_commit;
    
    9) The task doing the ordered extent completion, currently at
       btrfs_set_inode_last_trans(), then finally runs:
    
         inode->last_log_commit = inode->root->last_log_commit;
         spin_unlock(&inode->lock);
    
       Which results in inode->last_log_commit being set to 1.
       The ordered extent completes;
    
    10) Task B is resumed, and it calls btrfs_inode_in_log() which returns
        true because we have all the following conditions met:
    
        inode->logged_trans == N which matches fs_info->generation &&
        inode->last_subtrans (1) <= inode->last_log_commit (1) &&
        inode->last_subtrans (1) <= root->last_log_commit (1) &&
        list inode->extent_tree.modified_extents is empty
    
        And as a consequence we return without logging the inode, so the
        existing logged version of the inode does not point to the extent
        that was written after the previous fsync.
    
    It should be impossible in practice for one task be able to do so much
    progress in btrfs_sync_log() while another task is at
    btrfs_set_inode_last_trans() right after it reads root->log_transid and
    before it reads root->last_log_commit. Even if kernel preemption is enabled
    we know the task at btrfs_set_inode_last_trans() can not be preempted
    because it is holding the inode's spinlock.
    
    However there is another place where we do the same without holding the
    spinlock, which is in the memory mapped write path at:
    
      vm_fault_t btrfs_page_mkwrite(struct vm_fault *vmf)
      {
         (...)
         BTRFS_I(inode)->last_trans = fs_info->generation;
         BTRFS_I(inode)->last_sub_trans = BTRFS_I(inode)->root->log_transid;
         BTRFS_I(inode)->last_log_commit = BTRFS_I(inode)->root->last_log_commit;
         (...)
    
    So with preemption happening after setting ->last_sub_trans and before
    setting ->last_log_commit, it is less of a stretch to have another task
    do enough progress at btrfs_sync_log() such that the task doing the memory
    mapped write ends up with ->last_sub_trans and ->last_log_commit set to
    the same value. It is still a big stretch to get there, as the task doing
    btrfs_sync_log() has to start writeback, wait for its completion and write
    the super blocks.
    
    So fix this in two different ways:
    
    1) For btrfs_set_inode_last_trans(), simply set ->last_log_commit to the
       value of ->last_sub_trans minus 1;
    
    2) For btrfs_page_mkwrite() only set the inode's ->last_sub_trans, just
       like we do for buffered and direct writes at btrfs_file_write_iter(),
       which is all we need to make sure multiple writes and fsyncs to an
       inode in the same transaction never result in an fsync missing that
       the inode changed and needs to be logged. Turn this into a helper
       function and use it both at btrfs_page_mkwrite() and at
       btrfs_file_write_iter() - this also fixes the problem that at
       btrfs_page_mkwrite() we were setting those fields without the
       protection of the inode's spinlock.
    
    This is an extremely unlikely race to happen in practice.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3a1ac258ebcb741e04623b2329bd9a9582d7fcf
Author: Gerd Rausch <gerd.rausch@oracle.com>
Date:   Tue Aug 17 10:04:37 2021 -0700

    net/rds: dma_map_sg is entitled to merge entries
    
    [ Upstream commit fb4b1373dcab086d0619c29310f0466a0b2ceb8a ]
    
    Function "dma_map_sg" is entitled to merge adjacent entries
    and return a value smaller than what was passed as "nents".
    
    Subsequently "ib_map_mr_sg" needs to work with this value ("sg_dma_len")
    rather than the original "nents" parameter ("sg_len").
    
    This old RDS bug was exposed and reliably causes kernel panics
    (using RDMA operations "rds-stress -D") on x86_64 starting with:
    commit c588072bba6b ("iommu/vt-d: Convert intel iommu driver to the iommu ops")
    
    Simply put: Linux 5.11 and later.
    
    Signed-off-by: Gerd Rausch <gerd.rausch@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Link: https://lore.kernel.org/r/60efc69f-1f35-529d-a7ef-da0549cad143@oracle.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad6a2bc7588ac0e217a72e2feedb5c0c360b2f96
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Mon Aug 9 16:40:48 2021 +1000

    drm/nouveau/disp: power down unused DP links during init
    
    [ Upstream commit 6eaa1f3c59a707332e921e32782ffcad49915c5e ]
    
    When booted with multiple displays attached, the EFI GOP driver on (at
    least) Ampere, can leave DP links powered up that aren't being used to
    display anything.  This confuses our tracking of SOR routing, with the
    likely result being a failed modeset and display engine hang.
    
    Fix this by (ab?)using the DisableLT IED script to power-down the link,
    restoring HW to a state the driver expects.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 689179c462d8cdccab32d0ffe58f2b433508d1aa
Author: Mark Yacoub <markyacoub@google.com>
Date:   Thu Aug 12 15:49:17 2021 -0400

    drm: Copy drm_wait_vblank to user before returning
    
    [ Upstream commit fa0b1ef5f7a694f48e00804a391245f3471aa155 ]
    
    [Why]
    Userspace should get back a copy of drm_wait_vblank that's been modified
    even when drm_wait_vblank_ioctl returns a failure.
    
    Rationale:
    drm_wait_vblank_ioctl modifies the request and expects the user to read
    it back. When the type is RELATIVE, it modifies it to ABSOLUTE and updates
    the sequence to become current_vblank_count + sequence (which was
    RELATIVE), but now it became ABSOLUTE.
    drmWaitVBlank (in libdrm) expects this to be the case as it modifies
    the request to be Absolute so it expects the sequence to would have been
    updated.
    
    The change is in compat_drm_wait_vblank, which is called by
    drm_compat_ioctl. This change of copying the data back regardless of the
    return number makes it en par with drm_ioctl, which always copies the
    data before returning.
    
    [How]
    Return from the function after everything has been copied to user.
    
    Fixes IGT:kms_flip::modeset-vs-vblank-race-interruptible
    Tested on ChromeOS Trogdor(msm)
    
    Reviewed-by: Michel Dänzer <mdaenzer@redhat.com>
    Signed-off-by: Mark Yacoub <markyacoub@chromium.org>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210812194917.1703356-1-markyacoub@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18ceb99f8483550fc4d964c3aa9a144383c4634b
Author: Shai Malin <smalin@marvell.com>
Date:   Sun Aug 15 14:06:39 2021 +0300

    qed: Fix null-pointer dereference in qed_rdma_create_qp()
    
    [ Upstream commit d33d19d313d3466abdf8b0428be7837aff767802 ]
    
    Fix a possible null-pointer dereference in qed_rdma_create_qp().
    
    Changes from V2:
    - Revert checkpatch fixes.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Shai Malin <smalin@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1a0db49abd5631b024cc47cf71364e389b1b1e4
Author: Shai Malin <smalin@marvell.com>
Date:   Sun Aug 15 14:05:08 2021 +0300

    qed: qed ll2 race condition fixes
    
    [ Upstream commit 37110237f31105d679fc0aa7b11cdec867750ea7 ]
    
    Avoiding qed ll2 race condition and NULL pointer dereference as part
    of the remove and recovery flows.
    
    Changes form V1:
    - Change (!p_rx->set_prod_addr).
    - qed_ll2.c checkpatch fixes.
    
    Change from V2:
    - Revert "qed_ll2.c checkpatch fixes".
    
    Signed-off-by: Ariel Elior <aelior@marvell.com>
    Signed-off-by: Shai Malin <smalin@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73ba9e4ece4bf6a241e3bbe48dc82a39999c108d
Author: Neeraj Upadhyay <neeraju@codeaurora.org>
Date:   Fri Jun 25 08:55:02 2021 +0530

    vringh: Use wiov->used to check for read/write desc order
    
    [ Upstream commit e74cfa91f42c50f7f649b0eca46aa049754ccdbd ]
    
    As __vringh_iov() traverses a descriptor chain, it populates
    each descriptor entry into either read or write vring iov
    and increments that iov's ->used member. So, as we iterate
    over a descriptor chain, at any point, (riov/wriov)->used
    value gives the number of descriptor enteries available,
    which are to be read or written by the device. As all read
    iovs must precede the write iovs, wiov->used should be zero
    when we are traversing a read descriptor. Current code checks
    for wiov->i, to figure out whether any previous entry in the
    current descriptor chain was a write descriptor. However,
    iov->i is only incremented, when these vring iovs are consumed,
    at a later point, and remain 0 in __vringh_iov(). So, correct
    the check for read and write descriptor order, to use
    wiov->used.
    
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Neeraj Upadhyay <neeraju@codeaurora.org>
    Link: https://lore.kernel.org/r/1624591502-4827-1-git-send-email-neeraju@codeaurora.org
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee52acae6fb5c6619981a030dcebf5c30b0c2773
Author: Parav Pandit <parav@nvidia.com>
Date:   Wed Jul 21 17:26:48 2021 +0300

    virtio_pci: Support surprise removal of virtio pci device
    
    [ Upstream commit 43bb40c5b92659966bdf4bfe584fde0a3575a049 ]
    
    When a virtio pci device undergo surprise removal (aka async removal in
    PCIe spec), mark the device as broken so that any upper layer drivers can
    abort any outstanding operation.
    
    When a virtio net pci device undergo surprise removal which is used by a
    NetworkManager, a below call trace was observed.
    
    kernel:watchdog: BUG: soft lockup - CPU#1 stuck for 26s! [kworker/1:1:27059]
    watchdog: BUG: soft lockup - CPU#1 stuck for 52s! [kworker/1:1:27059]
    CPU: 1 PID: 27059 Comm: kworker/1:1 Tainted: G S      W I  L    5.13.0-hotplug+ #8
    Hardware name: Dell Inc. PowerEdge R640/0H28RR, BIOS 2.9.4 11/06/2020
    Workqueue: events linkwatch_event
    RIP: 0010:virtnet_send_command+0xfc/0x150 [virtio_net]
    Call Trace:
     virtnet_set_rx_mode+0xcf/0x2a7 [virtio_net]
     ? __hw_addr_create_ex+0x85/0xc0
     __dev_mc_add+0x72/0x80
     igmp6_group_added+0xa7/0xd0
     ipv6_mc_up+0x3c/0x60
     ipv6_find_idev+0x36/0x80
     addrconf_add_dev+0x1e/0xa0
     addrconf_dev_config+0x71/0x130
     addrconf_notify+0x1f5/0xb40
     ? rtnl_is_locked+0x11/0x20
     ? __switch_to_asm+0x42/0x70
     ? finish_task_switch+0xaf/0x2c0
     ? raw_notifier_call_chain+0x3e/0x50
     raw_notifier_call_chain+0x3e/0x50
     netdev_state_change+0x67/0x90
     linkwatch_do_dev+0x3c/0x50
     __linkwatch_run_queue+0xd2/0x220
     linkwatch_event+0x21/0x30
     process_one_work+0x1c8/0x370
     worker_thread+0x30/0x380
     ? process_one_work+0x370/0x370
     kthread+0x118/0x140
     ? set_kthread_struct+0x40/0x40
     ret_from_fork+0x1f/0x30
    
    Hence, add the ability to abort the command on surprise removal
    which prevents infinite loop and system lockup.
    
    Signed-off-by: Parav Pandit <parav@nvidia.com>
    Link: https://lore.kernel.org/r/20210721142648.1525924-5-parav@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be9b79e84154074553f845b1a1a998f9a9290f82
Author: Parav Pandit <parav@nvidia.com>
Date:   Wed Jul 21 17:26:45 2021 +0300

    virtio: Improve vq->broken access to avoid any compiler optimization
    
    [ Upstream commit 60f0779862e4ab943810187752c462e85f5fa371 ]
    
    Currently vq->broken field is read by virtqueue_is_broken() in busy
    loop in one context by virtnet_send_command().
    
    vq->broken is set to true in other process context by
    virtio_break_device(). Reader and writer are accessing it without any
    synchronization. This may lead to a compiler optimization which may
    result to optimize reading vq->broken only once.
    
    Hence, force reading vq->broken on each invocation of
    virtqueue_is_broken() and also force writing it so that such
    update is visible to the readers.
    
    It is a theoretical fix that isn't yet encountered in the field.
    
    Signed-off-by: Parav Pandit <parav@nvidia.com>
    Link: https://lore.kernel.org/r/20210721142648.1525924-2-parav@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d4ba693db4884a54e0149ed7768d31256cd7dbb
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Mon Jul 26 10:30:56 2021 +0200

    opp: remove WARN when no valid OPPs remain
    
    [ Upstream commit 335ffab3ef864539e814b9a2903b0ae420c1c067 ]
    
    This WARN can be triggered per-core and the stack trace is not useful.
    Replace it with plain dev_err(). Fix a comment while at it.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit baf56a1d8199d7a86ecd43236fa2023335701773
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Jul 6 12:45:53 2021 +0100

    perf/x86/intel/uncore: Fix integer overflow on 23 bit left shift of a u32
    
    [ Upstream commit 0b3a8738b76fe2087f7bc2bd59f4c78504c79180 ]
    
    The u32 variable pci_dword is being masked with 0x1fffffff and then left
    shifted 23 places. The shift is a u32 operation,so a value of 0x200 or
    more in pci_dword will overflow the u32 and only the bottow 32 bits
    are assigned to addr. I don't believe this was the original intent.
    Fix this by casting pci_dword to a resource_size_t to ensure no
    overflow occurs.
    
    Note that the mask and 12 bit left shift operation does not need this
    because the mask SNR_IMC_MMIO_MEM0_MASK and shift is always a 32 bit
    value.
    
    Fixes: ee49532b38dd ("perf/x86/intel/uncore: Add IMC uncore support for Snow Ridge")
    Addresses-Coverity: ("Unintentional integer overflow")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
    Link: https://lore.kernel.org/r/20210706114553.28249-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ad96094ab90bb702ad33da7f552f2d0710b87cc
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Fri Aug 27 11:29:27 2021 +0200

    usb: gadget: u_audio: fix race condition on endpoint stop
    
    [ Upstream commit 068fdad20454f815e61e6f6eb9f051a8b3120e88 ]
    
    If the endpoint completion callback is call right after the ep_enabled flag
    is cleared and before usb_ep_dequeue() is call, we could do a double free
    on the request and the associated buffer.
    
    Fix this by clearing ep_enabled after all the endpoint requests have been
    dequeued.
    
    Fixes: 7de8681be2cd ("usb: gadget: u_audio: Free requests only after callback")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20210827092927.366482-1-jbrunet@baylibre.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5c2b4ca50350617cb12d1819c5c83908076dd30
Author: Matthew Brost <matthew.brost@intel.com>
Date:   Fri Jul 30 12:53:42 2021 -0700

    drm/i915: Fix syncmap memory leak
    
    [ Upstream commit a63bcf08f0efb5348105bb8e0e1e8c6671077753 ]
    
    A small race exists between intel_gt_retire_requests_timeout and
    intel_timeline_exit which could result in the syncmap not getting
    free'd. Rather than work to hard to seal this race, simply cleanup the
    syncmap on fini.
    
    unreferenced object 0xffff88813bc53b18 (size 96):
      comm "gem_close_race", pid 5410, jiffies 4294917818 (age 1105.600s)
      hex dump (first 32 bytes):
        01 00 00 00 00 00 00 00 00 00 00 00 0a 00 00 00  ................
        00 00 00 00 00 00 00 00 6b 6b 6b 6b 06 00 00 00  ........kkkk....
      backtrace:
        [<00000000120b863a>] __sync_alloc_leaf+0x1e/0x40 [i915]
        [<00000000042f6959>] __sync_set+0x1bb/0x240 [i915]
        [<0000000090f0e90f>] i915_request_await_dma_fence+0x1c7/0x400 [i915]
        [<0000000056a48219>] i915_request_await_object+0x222/0x360 [i915]
        [<00000000aaac4ee3>] i915_gem_do_execbuffer+0x1bd0/0x2250 [i915]
        [<000000003c9d830f>] i915_gem_execbuffer2_ioctl+0x405/0xce0 [i915]
        [<00000000fd7a8e68>] drm_ioctl_kernel+0xb0/0xf0 [drm]
        [<00000000e721ee87>] drm_ioctl+0x305/0x3c0 [drm]
        [<000000008b0d8986>] __x64_sys_ioctl+0x71/0xb0
        [<0000000076c362a4>] do_syscall_64+0x33/0x80
        [<00000000eb7a4831>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Signed-off-by: Matthew Brost <matthew.brost@intel.com>
    Fixes: 531958f6f357 ("drm/i915/gt: Track timeline activeness in enter/exit")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: John Harrison <John.C.Harrison@Intel.com>
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210730195342.110234-1-matthew.brost@intel.com
    (cherry picked from commit faf890985e30d5e88cc3a7c50c1bcad32f89ab7c)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f3cefa6abf0f0b70f412edfac3d127b20bd0082
Author: Guangbin Huang <huangguangbin2@huawei.com>
Date:   Thu Aug 26 19:22:01 2021 +0800

    net: hns3: fix get wrong pfc_en when query PFC configuration
    
    [ Upstream commit 8c1671e0d13d4a0ba4fb3a0da932bf3736d7ff73 ]
    
    Currently, when query PFC configuration by dcbtool, driver will return
    PFC enable status based on TC. As all priorities are mapped to TC0 by
    default, if TC0 is enabled, then all priorities mapped to TC0 will be
    shown as enabled status when query PFC setting, even though some
    priorities have never been set.
    
    for example:
    $ dcb pfc show dev eth0
    pfc-cap 4 macsec-bypass off delay 0
    prio-pfc 0:off 1:off 2:off 3:off 4:off 5:off 6:off 7:off
    $ dcb pfc set dev eth0 prio-pfc 0:on 1:on 2:on 3:on
    $ dcb pfc show dev eth0
    pfc-cap 4 macsec-bypass off delay 0
    prio-pfc 0:on 1:on 2:on 3:on 4:on 5:on 6:on 7:on
    
    To fix this problem, just returns user's PFC config parameter saved in
    driver.
    
    Fixes: cacde272dd00 ("net: hns3: Add hclge_dcb module for the support of DCB feature")
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f0c0b35e27713471ff5e84895e2bb3f03ba6763
Author: Guojia Liao <liaoguojia@huawei.com>
Date:   Thu Aug 26 19:21:58 2021 +0800

    net: hns3: fix duplicate node in VLAN list
    
    [ Upstream commit 94391fae82f71c98ecc7716a32611fcca73c74eb ]
    
    VLAN list should not be added duplicate VLAN node, otherwise it would
    cause "add failed" when restore VLAN from VLAN list, so this patch adds
    VLAN ID check before adding node into VLAN list.
    
    Fixes: c6075b193462 ("net: hns3: Record VF vlan tables")
    Signed-off-by: Guojia Liao <liaoguojia@huawei.com>
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 951805c23dff5866ff2f91c563d823666f7bcbe2
Author: Yufeng Mo <moyufeng@huawei.com>
Date:   Thu Aug 26 19:21:55 2021 +0800

    net: hns3: clear hardware resource when loading driver
    
    [ Upstream commit 1a6d281946c330cee2855f6d0cd796616e54601f ]
    
    If a PF is bonded to a virtual machine and the virtual machine exits
    unexpectedly, some hardware resource cannot be cleared. In this case,
    loading driver may cause exceptions. Therefore, the hardware resource
    needs to be cleared when the driver is loaded.
    
    Fixes: 46a3df9f9718 ("net: hns3: Add HNS3 Acceleration Engine & Compatibility Layer Support")
    Signed-off-by: Yufeng Mo <moyufeng@huawei.com>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08162f65642c51c9281d9207da4276f3c8d5b4d0
Author: Andrey Ignatov <rdna@fb.com>
Date:   Wed Aug 25 17:25:40 2021 -0700

    rtnetlink: Return correct error on changing device netns
    
    [ Upstream commit 96a6b93b69880b2c978e1b2be9cae6970b605008 ]
    
    Currently when device is moved between network namespaces using
    RTM_NEWLINK message type and one of netns attributes (FLA_NET_NS_PID,
    IFLA_NET_NS_FD, IFLA_TARGET_NETNSID) but w/o specifying IFLA_IFNAME, and
    target namespace already has device with same name, userspace will get
    EINVAL what is confusing and makes debugging harder.
    
    Fix it so that userspace gets more appropriate EEXIST instead what makes
    debugging much easier.
    
    Before:
    
      # ./ifname.sh
      + ip netns add ns0
      + ip netns exec ns0 ip link add l0 type dummy
      + ip netns exec ns0 ip link show l0
      8: l0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
          link/ether 66:90:b5:d5:78:69 brd ff:ff:ff:ff:ff:ff
      + ip link add l0 type dummy
      + ip link show l0
      10: l0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
          link/ether 6e:c6:1f:15:20:8d brd ff:ff:ff:ff:ff:ff
      + ip link set l0 netns ns0
      RTNETLINK answers: Invalid argument
    
    After:
    
      # ./ifname.sh
      + ip netns add ns0
      + ip netns exec ns0 ip link add l0 type dummy
      + ip netns exec ns0 ip link show l0
      8: l0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
          link/ether 1e:4a:72:e3:e3:8f brd ff:ff:ff:ff:ff:ff
      + ip link add l0 type dummy
      + ip link show l0
      10: l0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
          link/ether f2:fc:fe:2b:7d:a6 brd ff:ff:ff:ff:ff:ff
      + ip link set l0 netns ns0
      RTNETLINK answers: File exists
    
    The problem is that do_setlink() passes its `char *ifname` argument,
    that it gets from a caller, to __dev_change_net_namespace() as is (as
    `const char *pat`), but semantics of ifname and pat can be different.
    
    For example, __rtnl_newlink() does this:
    
    net/core/rtnetlink.c
        3270        char ifname[IFNAMSIZ];
         ...
        3286        if (tb[IFLA_IFNAME])
        3287                nla_strscpy(ifname, tb[IFLA_IFNAME], IFNAMSIZ);
        3288        else
        3289                ifname[0] = '\0';
         ...
        3364        if (dev) {
         ...
        3394                return do_setlink(skb, dev, ifm, extack, tb, ifname, status);
        3395        }
    
    , i.e. do_setlink() gets ifname pointer that is always valid no matter
    if user specified IFLA_IFNAME or not and then do_setlink() passes this
    ifname pointer as is to __dev_change_net_namespace() as pat argument.
    
    But the pat (pattern) in __dev_change_net_namespace() is used as:
    
    net/core/dev.c
       11198        err = -EEXIST;
       11199        if (__dev_get_by_name(net, dev->name)) {
       11200                /* We get here if we can't use the current device name */
       11201                if (!pat)
       11202                        goto out;
       11203                err = dev_get_valid_name(net, dev, pat);
       11204                if (err < 0)
       11205                        goto out;
       11206        }
    
    As the result the `goto out` path on line 11202 is neven taken and
    instead of returning EEXIST defined on line 11198,
    __dev_change_net_namespace() returns an error from dev_get_valid_name()
    and this, in turn, will be EINVAL for ifname[0] = '\0' set earlier.
    
    Fixes: d8a5ec672768 ("[NET]: netlink support for moving devices between network namespaces.")
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f58e42d1928cd071b880b425e1b31626f307179a
Author: Maxim Kiselev <bigunclemax@gmail.com>
Date:   Fri Aug 20 18:39:51 2021 +0300

    net: marvell: fix MVNETA_TX_IN_PRGRS bit number
    
    [ Upstream commit 359f4cdd7d78fdf8c098713b05fee950a730f131 ]
    
    According to Armada XP datasheet bit at 0 position is corresponding for
    TxInProg indication.
    
    Fixes: c5aff18204da ("net: mvneta: driver for Marvell Armada 370/XP network unit")
    Signed-off-by: Maxim Kiselev <bigunclemax@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45454400a647861a8711f3e3e117473f3b45beda
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Aug 21 09:35:23 2021 +0200

    xgene-v2: Fix a resource leak in the error handling path of 'xge_probe()'
    
    [ Upstream commit 5ed74b03eb4d08f5dd281dcb5f1c9bb92b363a8d ]
    
    A successful 'xge_mdio_config()' call should be balanced by a corresponding
    'xge_mdio_remove()' call in the error handling path of the probe, as
    already done in the remove function.
    
    Update the error handling path accordingly.
    
    Fixes: ea8ab16ab225 ("drivers: net: xgene-v2: Add MDIO support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53b480e68c1c2c778b620cc7f45a2ba5dff518ca
Author: Shreyansh Chouhan <chouhan.shreyansh630@gmail.com>
Date:   Sat Aug 21 12:44:24 2021 +0530

    ip_gre: add validation for csum_start
    
    [ Upstream commit 1d011c4803c72f3907eccfc1ec63caefb852fcbf ]
    
    Validate csum_start in gre_handle_offloads before we call _gre_xmit so
    that we do not crash later when the csum_start value is used in the
    lco_csum function call.
    
    This patch deals with ipv4 code.
    
    Fixes: c54419321455 ("GRE: Refactor GRE tunneling code.")
    Reported-by: syzbot+ff8e1b9f2f36481e2efc@syzkaller.appspotmail.com
    Signed-off-by: Shreyansh Chouhan <chouhan.shreyansh630@gmail.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb8ca7e2e67e1dce66bd4e605b35f9ee01e286b9
Author: Gal Pressman <galpress@amazon.com>
Date:   Wed Aug 11 18:11:28 2021 +0300

    RDMA/efa: Free IRQ vectors on error flow
    
    [ Upstream commit dbe986bdfd6dfe6ef24b833767fff4151e024357 ]
    
    Make sure to free the IRQ vectors in case the allocation doesn't return
    the expected number of IRQs.
    
    Fixes: b7f5e880f377 ("RDMA/efa: Add the efa module")
    Link: https://lore.kernel.org/r/20210811151131.39138-2-galpress@amazon.com
    Reviewed-by: Firas JahJah <firasj@amazon.com>
    Reviewed-by: Yossi Leybovich <sleybo@amazon.com>
    Signed-off-by: Gal Pressman <galpress@amazon.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e29565b4515ec97ff6b899981fbe6531d65248b1
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Sun Jul 4 10:11:41 2021 +0300

    e1000e: Fix the max snoop/no-snoop latency for 10M
    
    [ Upstream commit 44a13a5d99c71bf9e1676d9e51679daf4d7b3d73 ]
    
    We should decode the latency and the max_latency before directly compare.
    The latency should be presented as lat_enc = scale x value:
    lat_enc_d = (lat_enc & 0x0x3ff) x (1U << (5*((max_ltr_enc & 0x1c00)
    >> 10)))
    
    Fixes: cf8fb73c23aa ("e1000e: add support for LTR on I217/I218")
    Suggested-by: Yee Li <seven.yi.lee@gmail.com>
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Dvora Fuxbrumer <dvorax.fuxbrumer@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a21e84334ec338ac3476ef8bc368984aa5cc083
Author: Tuo Li <islituo@gmail.com>
Date:   Fri Aug 6 06:30:29 2021 -0700

    IB/hfi1: Fix possible null-pointer dereference in _extend_sdma_tx_descs()
    
    [ Upstream commit cbe71c61992c38f72c2b625b2ef25916b9f0d060 ]
    
    kmalloc_array() is called to allocate memory for tx->descp. If it fails,
    the function __sdma_txclean() is called:
      __sdma_txclean(dd, tx);
    
    However, in the function __sdma_txclean(), tx-descp is dereferenced if
    tx->num_desc is not zero:
      sdma_unmap_desc(dd, &tx->descp[0]);
    
    To fix this possible null-pointer dereference, assign the return value of
    kmalloc_array() to a local variable descp, and then assign it to tx->descp
    if it is not NULL. Otherwise, go to enomem.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Link: https://lore.kernel.org/r/20210806133029.194964-1-islituo@gmail.com
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Tuo Li <islituo@gmail.com>
    Tested-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Acked-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 944a50f56f1bb45dc529419fc9fea0880ac33d5c
Author: Naresh Kumar PBS <nareshkumar.pbs@broadcom.com>
Date:   Wed Aug 18 20:25:52 2021 -0700

    RDMA/bnxt_re: Add missing spin lock initialization
    
    [ Upstream commit 17f2569dce1848080825b8336e6b7c6900193b44 ]
    
    Add the missing initialization of srq lock.
    
    Fixes: 37cb11acf1f7 ("RDMA/bnxt_re: Add SRQ support for Broadcom adapters")
    Link: https://lore.kernel.org/r/1629343553-5843-3-git-send-email-selvin.xavier@broadcom.com
    Signed-off-by: Naresh Kumar PBS <nareshkumar.pbs@broadcom.com>
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28b18954102781a03583db5dcf985e94d3a03910
Author: Li Jinlin <lijinlin3@huawei.com>
Date:   Tue Aug 24 10:59:21 2021 +0800

    scsi: core: Fix hang of freezing queue between blocking and running device
    
    commit 02c6dcd543f8f051973ee18bfbc4dc3bd595c558 upstream.
    
    We found a hang, the steps to reproduce  are as follows:
    
      1. blocking device via scsi_device_set_state()
    
      2. dd if=/dev/sda of=/mnt/t.log bs=1M count=10
    
      3. echo none > /sys/block/sda/queue/scheduler
    
      4. echo "running" >/sys/block/sda/device/state
    
    Step 3 and 4 should complete after step 4, but they hang.
    
      CPU#0               CPU#1                CPU#2
      ---------------     ----------------     ----------------
                                               Step 1: blocking device
    
                                               Step 2: dd xxxx
                                                      ^^^^^^ get request
                                                             q_usage_counter++
    
                          Step 3: switching scheculer
                          elv_iosched_store
                            elevator_switch
                              blk_mq_freeze_queue
                                blk_freeze_queue
                                  > blk_freeze_queue_start
                                    ^^^^^^ mq_freeze_depth++
    
                                  > blk_mq_run_hw_queues
                                    ^^^^^^ can't run queue when dev blocked
    
                                  > blk_mq_freeze_queue_wait
                                    ^^^^^^ Hang here!!!
                                           wait q_usage_counter==0
    
      Step 4: running device
      store_state_field
        scsi_rescan_device
          scsi_attach_vpd
            scsi_vpd_inquiry
              __scsi_execute
                blk_get_request
                  blk_mq_alloc_request
                    blk_queue_enter
                    ^^^^^^ Hang here!!!
                           wait mq_freeze_depth==0
    
        blk_mq_run_hw_queues
        ^^^^^^ dispatch IO, q_usage_counter will reduce to zero
    
                                blk_mq_unfreeze_queue
                                ^^^^^ mq_freeze_depth--
    
    To fix this, we need to run queue before rescanning device when the device
    state changes to SDEV_RUNNING.
    
    Link: https://lore.kernel.org/r/20210824025921.3277629-1-lijinlin3@huawei.com
    Fixes: f0f82e2476f6 ("scsi: core: Fix capacity set to zero after offlinining device")
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Li Jinlin <lijinlin3@huawei.com>
    Signed-off-by: Qiu Laibin <qiulaibin@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 628c582854d305141540212357c2f93fe020bcdb
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Tue Aug 24 21:28:55 2021 -0700

    usb: dwc3: gadget: Stop EP0 transfers during pullup disable
    
    commit 4a1e25c0a029b97ea4a3d423a6392bfacc3b2e39 upstream.
    
    During a USB cable disconnect, or soft disconnect scenario, a pending
    SETUP transaction may not be completed, leading to the following
    error:
    
        dwc3 a600000.dwc3: timed out waiting for SETUP phase
    
    If this occurs, then the entire pullup disable routine is skipped and
    proper cleanup and halting of the controller does not complete.
    
    Instead of returning an error (which is ignored from the UDC
    perspective), allow the pullup disable routine to continue, which
    will also handle disabling of EP0/1.  This will end any active
    transfers as well.  Ensure to clear any delayed_status also, as the
    timeout could happen within the STATUS stage.
    
    Fixes: bb0147364850 ("usb: dwc3: gadget: don't clear RUN/STOP when it's invalid to do so")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/20210825042855.7977-1-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9da281c8f9e9a3f0e42089ffd3a5900e176d338
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Aug 19 03:17:03 2021 +0200

    usb: dwc3: gadget: Fix dwc3_calc_trbs_left()
    
    commit 51f1954ad853d01ba4dc2b35dee14d8490ee05a1 upstream.
    
    We can't depend on the TRB's HWO bit to determine if the TRB ring is
    "full". A TRB is only available when the driver had processed it, not
    when the controller consumed and relinquished the TRB's ownership to the
    driver. Otherwise, the driver may overwrite unprocessed TRBs. This can
    happen when many transfer events accumulate and the system is slow to
    process them and/or when there are too many small requests.
    
    If a request is in the started_list, that means there is one or more
    unprocessed TRBs remained. Check this instead of the TRB's HWO bit
    whether the TRB ring is full.
    
    Fixes: c4233573f6ee ("usb: dwc3: gadget: prepare TRBs on update transfers too")
    Cc: <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/e91e975affb0d0d02770686afc3a5b9eb84409f6.1629335416.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21880abf19ba1863aa892b99c21661d6a63efa0b
Author: Zhengjun Zhang <zhangzhengjun@aicrobo.com>
Date:   Mon Aug 9 21:35:53 2021 +0800

    USB: serial: option: add new VID/PID to support Fibocom FG150
    
    commit 2829a4e3cf3a6ac2fa3cdb681b37574630fb9c1a upstream.
    
    Fibocom FG150 is a 5G module based on Qualcomm SDX55 platform,
    support Sub-6G band.
    
    Here are the outputs of lsusb -v and usb-devices:
    
    > T:  Bus=02 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  2 Spd=5000 MxCh= 0
    > D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    > P:  Vendor=2cb7 ProdID=010b Rev=04.14
    > S:  Manufacturer=Fibocom
    > S:  Product=Fibocom Modem_SN:XXXXXXXX
    > S:  SerialNumber=XXXXXXXX
    > C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    > I:  If#=0x0 Alt= 0 #EPs= 1 Cls=ef(misc ) Sub=04 Prot=01 Driver=rndis_host
    > I:  If#=0x1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    > I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    > I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    > I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    
    > Bus 002 Device 002: ID 2cb7:010b Fibocom Fibocom Modem_SN:XXXXXXXX
    > Device Descriptor:
    >   bLength                18
    >   bDescriptorType         1
    >   bcdUSB               3.20
    >   bDeviceClass            0
    >   bDeviceSubClass         0
    >   bDeviceProtocol         0
    >   bMaxPacketSize0         9
    >   idVendor           0x2cb7 Fibocom
    >   idProduct          0x010b
    >   bcdDevice            4.14
    >   iManufacturer           1 Fibocom
    >   iProduct                2 Fibocom Modem_SN:XXXXXXXX
    >   iSerial                 3 XXXXXXXX
    >   bNumConfigurations      1
    >   Configuration Descriptor:
    >     bLength                 9
    >     bDescriptorType         2
    >     wTotalLength       0x00e6
    >     bNumInterfaces          5
    >     bConfigurationValue     1
    >     iConfiguration          4 RNDIS_DUN_DIAG_ADB
    >     bmAttributes         0xa0
    >       (Bus Powered)
    >       Remote Wakeup
    >     MaxPower              896mA
    >     Interface Association:
    >       bLength                 8
    >       bDescriptorType        11
    >       bFirstInterface         0
    >       bInterfaceCount         2
    >       bFunctionClass        239 Miscellaneous Device
    >       bFunctionSubClass       4
    >       bFunctionProtocol       1
    >       iFunction               7 RNDIS
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        0
    >       bAlternateSetting       0
    >       bNumEndpoints           1
    >       bInterfaceClass       239 Miscellaneous Device
    >       bInterfaceSubClass      4
    >       bInterfaceProtocol      1
    >       iInterface              0
    >       ** UNRECOGNIZED:  05 24 00 10 01
    >       ** UNRECOGNIZED:  05 24 01 00 01
    >       ** UNRECOGNIZED:  04 24 02 00
    >       ** UNRECOGNIZED:  05 24 06 00 01
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x81  EP 1 IN
    >         bmAttributes            3
    >           Transfer Type            Interrupt
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0008  1x 8 bytes
    >         bInterval               9
    >         bMaxBurst               0
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        1
    >       bAlternateSetting       0
    >       bNumEndpoints           2
    >       bInterfaceClass        10 CDC Data
    >       bInterfaceSubClass      0
    >       bInterfaceProtocol      0
    >       iInterface              0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x8e  EP 14 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               6
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x0f  EP 15 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               6
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        2
    >       bAlternateSetting       0
    >       bNumEndpoints           3
    >       bInterfaceClass       255 Vendor Specific Class
    >       bInterfaceSubClass      0
    >       bInterfaceProtocol      0
    >       iInterface              0
    >       ** UNRECOGNIZED:  05 24 00 10 01
    >       ** UNRECOGNIZED:  05 24 01 00 00
    >       ** UNRECOGNIZED:  04 24 02 02
    >       ** UNRECOGNIZED:  05 24 06 00 00
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x83  EP 3 IN
    >         bmAttributes            3
    >           Transfer Type            Interrupt
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x000a  1x 10 bytes
    >         bInterval               9
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x82  EP 2 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x01  EP 1 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        3
    >       bAlternateSetting       0
    >       bNumEndpoints           2
    >       bInterfaceClass       255 Vendor Specific Class
    >       bInterfaceSubClass    255 Vendor Specific Subclass
    >       bInterfaceProtocol     48
    >       iInterface              0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x84  EP 4 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x02  EP 2 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >     Interface Descriptor:
    >       bLength                 9
    >       bDescriptorType         4
    >       bInterfaceNumber        4
    >       bAlternateSetting       0
    >       bNumEndpoints           2
    >       bInterfaceClass       255 Vendor Specific Class
    >       bInterfaceSubClass     66
    >       bInterfaceProtocol      1
    >       iInterface              0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x03  EP 3 OUT
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    >       Endpoint Descriptor:
    >         bLength                 7
    >         bDescriptorType         5
    >         bEndpointAddress     0x85  EP 5 IN
    >         bmAttributes            2
    >           Transfer Type            Bulk
    >           Synch Type               None
    >           Usage Type               Data
    >         wMaxPacketSize     0x0400  1x 1024 bytes
    >         bInterval               0
    >         bMaxBurst               0
    > Binary Object Store Descriptor:
    >   bLength                 5
    >   bDescriptorType        15
    >   wTotalLength       0x0016
    >   bNumDeviceCaps          2
    >   USB 2.0 Extension Device Capability:
    >     bLength                 7
    >     bDescriptorType        16
    >     bDevCapabilityType      2
    >     bmAttributes   0x00000006
    >       BESL Link Power Management (LPM) Supported
    >   SuperSpeed USB Device Capability:
    >     bLength                10
    >     bDescriptorType        16
    >     bDevCapabilityType      3
    >     bmAttributes         0x00
    >     wSpeedsSupported   0x000f
    >       Device can operate at Low Speed (1Mbps)
    >       Device can operate at Full Speed (12Mbps)
    >       Device can operate at High Speed (480Mbps)
    >       Device can operate at SuperSpeed (5Gbps)
    >     bFunctionalitySupport   1
    >       Lowest fully-functional device speed is Full Speed (12Mbps)
    >     bU1DevExitLat           1 micro seconds
    >     bU2DevExitLat         500 micro seconds
    > Device Status:     0x0000
    >   (Bus Powered)
    
    Signed-off-by: Zhengjun Zhang <zhangzhengjun@aicrobo.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e098e91eeec782e58dcc543f6c600e347091973
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Aug 24 14:19:26 2021 +0200

    Revert "USB: serial: ch341: fix character loss at high transfer rates"
    
    commit df7b16d1c00ecb3da3a30c999cdb39f273c99a2f upstream.
    
    This reverts commit 3c18e9baee0ef97510dcda78c82285f52626764b.
    
    These devices do not appear to send a zero-length packet when the
    transfer size is a multiple of the bulk-endpoint max-packet size. This
    means that incoming data may not be processed by the driver until a
    short packet is received or the receive buffer is full.
    
    Revert back to using endpoint-sized receive buffers to avoid stalled
    reads.
    
    Reported-by: Paul Größel <pb.g@gmx.de>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=214131
    Fixes: 3c18e9baee0e ("USB: serial: ch341: fix character loss at high transfer rates")
    Cc: stable@vger.kernel.org
    Cc: Willy Tarreau <w@1wt.eu>
    Link: https://lore.kernel.org/r/20210824121926.19311-1-johan@kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16b281a70a1087a91cc9203c8937f4d31b0c947c
Author: Stefan Mätje <stefan.maetje@esd.eu>
Date:   Wed Aug 25 23:52:27 2021 +0200

    can: usb: esd_usb2: esd_usb2_rx_event(): fix the interchange of the CAN RX and TX error counters
    
    commit 044012b52029204900af9e4230263418427f4ba4 upstream.
    
    This patch fixes the interchanged fetch of the CAN RX and TX error
    counters from the ESD_EV_CAN_ERROR_EXT message. The RX error counter
    is really in struct rx_msg::data[2] and the TX error counter is in
    struct rx_msg::data[3].
    
    Fixes: 96d8e90382dc ("can: Add driver for esd CAN-USB/2 device")
    Link: https://lore.kernel.org/r/20210825215227.4947-2-stefan.maetje@esd.eu
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Mätje <stefan.maetje@esd.eu>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 765437d1f078bcc8ede0d248b6fc21f1bb7345a6
Author: Yafang Shao <laoar.shao@gmail.com>
Date:   Tue Aug 11 18:31:22 2020 -0700

    mm, oom: make the calculation of oom badness more accurate
    
    [ Upstream commit 9066e5cfb73cdbcdbb49e87999482ab615e9fc76 ]
    
    Recently we found an issue on our production environment that when memcg
    oom is triggered the oom killer doesn't chose the process with largest
    resident memory but chose the first scanned process.  Note that all
    processes in this memcg have the same oom_score_adj, so the oom killer
    should chose the process with largest resident memory.
    
    Bellow is part of the oom info, which is enough to analyze this issue.
    [7516987.983223] memory: usage 16777216kB, limit 16777216kB, failcnt 52843037
    [7516987.983224] memory+swap: usage 16777216kB, limit 9007199254740988kB, failcnt 0
    [7516987.983225] kmem: usage 301464kB, limit 9007199254740988kB, failcnt 0
    [...]
    [7516987.983293] [ pid ]   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name
    [7516987.983510] [ 5740]     0  5740      257        1    32768        0          -998 pause
    [7516987.983574] [58804]     0 58804     4594      771    81920        0          -998 entry_point.bas
    [7516987.983577] [58908]     0 58908     7089      689    98304        0          -998 cron
    [7516987.983580] [58910]     0 58910    16235     5576   163840        0          -998 supervisord
    [7516987.983590] [59620]     0 59620    18074     1395   188416        0          -998 sshd
    [7516987.983594] [59622]     0 59622    18680     6679   188416        0          -998 python
    [7516987.983598] [59624]     0 59624  1859266     5161   548864        0          -998 odin-agent
    [7516987.983600] [59625]     0 59625   707223     9248   983040        0          -998 filebeat
    [7516987.983604] [59627]     0 59627   416433    64239   774144        0          -998 odin-log-agent
    [7516987.983607] [59631]     0 59631   180671    15012   385024        0          -998 python3
    [7516987.983612] [61396]     0 61396   791287     3189   352256        0          -998 client
    [7516987.983615] [61641]     0 61641  1844642    29089   946176        0          -998 client
    [7516987.983765] [ 9236]     0  9236     2642      467    53248        0          -998 php_scanner
    [7516987.983911] [42898]     0 42898    15543      838   167936        0          -998 su
    [7516987.983915] [42900]  1000 42900     3673      867    77824        0          -998 exec_script_vr2
    [7516987.983918] [42925]  1000 42925    36475    19033   335872        0          -998 python
    [7516987.983921] [57146]  1000 57146     3673      848    73728        0          -998 exec_script_J2p
    [7516987.983925] [57195]  1000 57195   186359    22958   491520        0          -998 python2
    [7516987.983928] [58376]  1000 58376   275764    14402   290816        0          -998 rosmaster
    [7516987.983931] [58395]  1000 58395   155166     4449   245760        0          -998 rosout
    [7516987.983935] [58406]  1000 58406 18285584  3967322 37101568        0          -998 data_sim
    [7516987.984221] oom-kill:constraint=CONSTRAINT_MEMCG,nodemask=(null),cpuset=3aa16c9482ae3a6f6b78bda68a55d32c87c99b985e0f11331cddf05af6c4d753,mems_allowed=0-1,oom_memcg=/kubepods/podf1c273d3-9b36-11ea-b3df-246e9693c184,task_memcg=/kubepods/podf1c273d3-9b36-11ea-b3df-246e9693c184/1f246a3eeea8f70bf91141eeaf1805346a666e225f823906485ea0b6c37dfc3d,task=pause,pid=5740,uid=0
    [7516987.984254] Memory cgroup out of memory: Killed process 5740 (pause) total-vm:1028kB, anon-rss:4kB, file-rss:0kB, shmem-rss:0kB
    [7516988.092344] oom_reaper: reaped process 5740 (pause), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
    
    We can find that the first scanned process 5740 (pause) was killed, but
    its rss is only one page.  That is because, when we calculate the oom
    badness in oom_badness(), we always ignore the negtive point and convert
    all of these negtive points to 1.  Now as oom_score_adj of all the
    processes in this targeted memcg have the same value -998, the points of
    these processes are all negtive value.  As a result, the first scanned
    process will be killed.
    
    The oom_socre_adj (-998) in this memcg is set by kubelet, because it is a
    a Guaranteed pod, which has higher priority to prevent from being killed
    by system oom.
    
    To fix this issue, we should make the calculation of oom point more
    accurate.  We can achieve it by convert the chosen_point from 'unsigned
    long' to 'long'.
    
    [cai@lca.pw: reported a issue in the previous version]
    [mhocko@suse.com: fixed the issue reported by Cai]
    [mhocko@suse.com: add the comment in proc_oom_score()]
    [laoar.shao@gmail.com: v3]
      Link: http://lkml.kernel.org/r/1594396651-9931-1-git-send-email-laoar.shao@gmail.com
    
    Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Qian Cai <cai@lca.pw>
    Link: http://lkml.kernel.org/r/1594309987-9919-1-git-send-email-laoar.shao@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cccf5c03077c42fc861202948367e8f70a5a37b
Author: Shaik Sajida Bhanu <sbhanu@codeaurora.org>
Date:   Fri Jul 16 17:16:14 2021 +0530

    mmc: sdhci-msm: Update the software timeout value for sdhc
    
    [ Upstream commit 67b13f3e221ed81b46a657e2b499bf8b20162476 ]
    
    Whenever SDHC run at clock rate 50MHZ or below, the hardware data
    timeout value will be 21.47secs, which is approx. 22secs and we have
    a current software timeout value as 10secs. We have to set software
    timeout value more than the hardware data timeout value to avioid seeing
    the below register dumps.
    
    [  332.953670] mmc2: Timeout waiting for hardware interrupt.
    [  332.959608] mmc2: sdhci: ============ SDHCI REGISTER DUMP ===========
    [  332.966450] mmc2: sdhci: Sys addr:  0x00000000 | Version:  0x00007202
    [  332.973256] mmc2: sdhci: Blk size:  0x00000200 | Blk cnt:  0x00000001
    [  332.980054] mmc2: sdhci: Argument:  0x00000000 | Trn mode: 0x00000027
    [  332.986864] mmc2: sdhci: Present:   0x01f801f6 | Host ctl: 0x0000001f
    [  332.993671] mmc2: sdhci: Power:     0x00000001 | Blk gap:  0x00000000
    [  333.000583] mmc2: sdhci: Wake-up:   0x00000000 | Clock:    0x00000007
    [  333.007386] mmc2: sdhci: Timeout:   0x0000000e | Int stat: 0x00000000
    [  333.014182] mmc2: sdhci: Int enab:  0x03ff100b | Sig enab: 0x03ff100b
    [  333.020976] mmc2: sdhci: ACmd stat: 0x00000000 | Slot int: 0x00000000
    [  333.027771] mmc2: sdhci: Caps:      0x322dc8b2 | Caps_1:   0x0000808f
    [  333.034561] mmc2: sdhci: Cmd:       0x0000183a | Max curr: 0x00000000
    [  333.041359] mmc2: sdhci: Resp[0]:   0x00000900 | Resp[1]:  0x00000000
    [  333.048157] mmc2: sdhci: Resp[2]:   0x00000000 | Resp[3]:  0x00000000
    [  333.054945] mmc2: sdhci: Host ctl2: 0x00000000
    [  333.059657] mmc2: sdhci: ADMA Err:  0x00000000 | ADMA Ptr:
    0x0000000ffffff218
    [  333.067178] mmc2: sdhci_msm: ----------- VENDOR REGISTER DUMP
    -----------
    [  333.074343] mmc2: sdhci_msm: DLL sts: 0x00000000 | DLL cfg:
    0x6000642c | DLL cfg2: 0x0020a000
    [  333.083417] mmc2: sdhci_msm: DLL cfg3: 0x00000000 | DLL usr ctl:
    0x00000000 | DDR cfg: 0x80040873
    [  333.092850] mmc2: sdhci_msm: Vndr func: 0x00008a9c | Vndr func2 :
    0xf88218a8 Vndr func3: 0x02626040
    [  333.102371] mmc2: sdhci: ============================================
    
    So, set software timeout value more than hardware timeout value.
    
    Signed-off-by: Shaik Sajida Bhanu <sbhanu@codeaurora.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1626435974-14462-1-git-send-email-sbhanu@codeaurora.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aec1e470d906584d755d2b106017995e601abd12
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Aug 6 10:03:12 2021 +0200

    ovl: fix uninitialized pointer read in ovl_lookup_real_one()
    
    [ Upstream commit 580c610429b3994e8db24418927747cf28443cde ]
    
    One error path can result in release_dentry_name_snapshot() being called
    before "name" was initialized by take_dentry_name_snapshot().
    
    Fix by moving the release_dentry_name_snapshot() to immediately after the
    only use.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57bd5b59f1ce8052e916b0b8cd97daa8e763e2e0
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Fri Aug 6 16:21:24 2021 +0800

    once: Fix panic when module unload
    
    [ Upstream commit 1027b96ec9d34f9abab69bc1a4dc5b1ad8ab1349 ]
    
    DO_ONCE
    DEFINE_STATIC_KEY_TRUE(___once_key);
    __do_once_done
      once_disable_jump(once_key);
        INIT_WORK(&w->work, once_deferred);
        struct once_work *w;
        w->key = key;
        schedule_work(&w->work);                     module unload
                                                       //*the key is
    destroy*
    process_one_work
      once_deferred
        BUG_ON(!static_key_enabled(work->key));
           static_key_count((struct static_key *)x)    //*access key, crash*
    
    When module uses DO_ONCE mechanism, it could crash due to the above
    concurrency problem, we could reproduce it with link[1].
    
    Fix it by add/put module refcount in the once work process.
    
    [1] https://lore.kernel.org/netdev/eaa6c371-465e-57eb-6be9-f4b16b9d7cbf@huawei.com/
    
    Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Reported-by: Minmin chen <chenmingmin@huawei.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5892f910f401c1facfc410e0b042108f2827a77b
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Jul 27 00:29:19 2021 +0200

    netfilter: conntrack: collect all entries in one cycle
    
    [ Upstream commit 4608fdfc07e116f9fc0895beb40abad7cdb5ee3d ]
    
    Michal Kubecek reports that conntrack gc is responsible for frequent
    wakeups (every 125ms) on idle systems.
    
    On busy systems, timed out entries are evicted during lookup.
    The gc worker is only needed to remove entries after system becomes idle
    after a busy period.
    
    To resolve this, always scan the entire table.
    If the scan is taking too long, reschedule so other work_structs can run
    and resume from next bucket.
    
    After a completed scan, wait for 2 minutes before the next cycle.
    Heuristics for faster re-schedule are removed.
    
    GC_SCAN_INTERVAL could be exposed as a sysctl in the future to allow
    tuning this as-needed or even turn the gc worker off.
    
    Reported-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c95c89b6929e543e5a8f033889b094105ad3cd6
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sat Jul 10 07:50:33 2021 -0700

    ARC: Fix CONFIG_STACKDEPOT
    
    [ Upstream commit bf79167fd86f3b97390fe2e70231d383526bd9cc ]
    
    Enabling CONFIG_STACKDEPOT results in the following build error.
    
    arc-elf-ld: lib/stackdepot.o: in function `filter_irq_stacks':
    stackdepot.c:(.text+0x456): undefined reference to `__irqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x456): undefined reference to `__irqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x476): undefined reference to `__irqentry_text_end'
    arc-elf-ld: stackdepot.c:(.text+0x476): undefined reference to `__irqentry_text_end'
    arc-elf-ld: stackdepot.c:(.text+0x484): undefined reference to `__softirqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x484): undefined reference to `__softirqentry_text_start'
    arc-elf-ld: stackdepot.c:(.text+0x48c): undefined reference to `__softirqentry_text_end'
    arc-elf-ld: stackdepot.c:(.text+0x48c): undefined reference to `__softirqentry_text_end'
    
    Other architectures address this problem by adding IRQENTRY_TEXT and
    SOFTIRQENTRY_TEXT to the text segment, so do the same here.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6b049aeefa880a8bd7b1ae3a8804bda1e8b077e
Author: Xiaolong Huang <butterflyhuangxx@gmail.com>
Date:   Fri Aug 20 03:50:34 2021 +0800

    net: qrtr: fix another OOB Read in qrtr_endpoint_post
    
    commit 7e78c597c3ebfd0cb329aa09a838734147e4f117 upstream.
    
    This check was incomplete, did not consider size is 0:
    
            if (len != ALIGN(size, 4) + hdrlen)
                        goto err;
    
    if size from qrtr_hdr is 0, the result of ALIGN(size, 4)
    will be 0, In case of len == hdrlen and size == 0
    in header this check won't fail and
    
            if (cb->type == QRTR_TYPE_NEW_SERVER) {
                    /* Remote node endpoint can bridge other distant nodes */
                    const struct qrtr_ctrl_pkt *pkt = data + hdrlen;
    
                    qrtr_node_assign(node, le32_to_cpu(pkt->server.node));
            }
    
    will also read out of bound from data, which is hdrlen allocated block.
    
    Fixes: 194ccc88297a ("net: qrtr: Support decoding incoming v2 packets")
    Fixes: ad9d24c9429e ("net: qrtr: fix OOB Read in qrtr_endpoint_post")
    Signed-off-by: Xiaolong Huang <butterflyhuangxx@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
