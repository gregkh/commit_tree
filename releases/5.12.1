commit 9f29b08688ca35efcffe01b80f55fd2a4edf5796
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun May 2 11:10:27 2021 +0200

    Linux 5.12.1
    
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210430141910.899518186@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8413faeeb2bf489b3436ff3ea96da8a3f74c289a
Author: Tomas Winkler <tomas.winkler@intel.com>
Date:   Wed Apr 14 07:52:00 2021 +0300

    mei: me: add Alder Lake P device id.
    
    commit 0df74278faedf20f9696bf2755cf0ce34afa4c3a upstream.
    
    Add Alder Lake P device ID.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20210414045200.3498241-1-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e4f97122f3a9df870dfe9671994136448890768
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Apr 27 11:49:52 2021 +0200

    cfg80211: fix locking in netlink owner interface destruction
    
    commit ea6b2098dd02789f68770fd3d5a373732207be2f upstream.
    
    Harald Arnesen reported [1] a deadlock at reboot time, and after
    he captured a stack trace a picture developed of what's going on:
    
    The distribution he's using is using iwd (not wpa_supplicant) to
    manage wireless. iwd will usually use the "socket owner" option
    when it creates new interfaces, so that they're automatically
    destroyed when it quits (unexpectedly or otherwise). This is also
    done by wpa_supplicant, but it doesn't do it for the normal one,
    only for additional ones, which is different with iwd.
    
    Anyway, during shutdown, iwd quits while the netdev is still UP,
    i.e. IFF_UP is set. This causes the stack trace that Linus so
    nicely transcribed from the pictures:
    
    cfg80211_destroy_iface_wk() takes wiphy_lock
     -> cfg80211_destroy_ifaces()
      ->ieee80211_del_iface
        ->ieeee80211_if_remove
          ->cfg80211_unregister_wdev
            ->unregister_netdevice_queue
              ->dev_close_many
                ->__dev_close_many
                  ->raw_notifier_call_chain
                    ->cfg80211_netdev_notifier_call
    and that last call tries to take wiphy_lock again.
    
    In commit a05829a7222e ("cfg80211: avoid holding the RTNL when
    calling the driver") I had taken into account the possibility of
    recursing from cfg80211 into cfg80211_netdev_notifier_call() via
    the network stack, but only for NETDEV_UNREGISTER, not for what
    happens here, NETDEV_GOING_DOWN and NETDEV_DOWN notifications.
    
    Additionally, while this worked still back in commit 78f22b6a3a92
    ("cfg80211: allow userspace to take ownership of interfaces"), it
    missed another corner case: unregistering a netdev will cause
    dev_close() to be called, and thus stop wireless operations (e.g.
    disconnecting), but there are some types of virtual interfaces in
    wifi that don't have a netdev - for that we need an additional
    call to cfg80211_leave().
    
    So, to fix this mess, change cfg80211_destroy_ifaces() to not
    require the wiphy_lock(), but instead make it acquire it, but
    only after it has actually closed all the netdevs on the list,
    and then call cfg80211_leave() as well before removing them
    from the driver, to fix the second issue. The locking change in
    this requires modifying the nl80211 call to not get the wiphy
    lock passed in, but acquire it by itself after flushing any
    potentially pending destruction requests.
    
    [1] https://lore.kernel.org/r/09464e67-f3de-ac09-28a3-e27b7914ee7d@skogtun.org
    
    Cc: stable@vger.kernel.org # 5.12
    Reported-by: Harald Arnesen <harald@skogtun.org>
    Fixes: 776a39b8196d ("cfg80211: call cfg80211_destroy_ifaces() with wiphy lock held")
    Fixes: 78f22b6a3a92 ("cfg80211: allow userspace to take ownership of interfaces")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Tested-by: Harald Arnesen <harald@skogtun.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f935c64a0c87d86730efd6e1e168555460234d04
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Sat Apr 17 11:13:39 2021 +0200

    iwlwifi: Fix softirq/hardirq disabling in iwl_pcie_gen2_enqueue_hcmd()
    
    commit e7020bb068d8be50a92f48e36b236a1a1ef9282e upstream.
    
    Analogically to what we did in 2800aadc18a6 ("iwlwifi: Fix softirq/hardirq
    disabling in iwl_pcie_enqueue_hcmd()"), we must apply the same fix to
    iwl_pcie_gen2_enqueue_hcmd(), as it's being called from exactly the same
    contexts.
    
    Reported-by: Heiner Kallweit <hkallweit1@gmail.com
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/nycvar.YFH.7.76.2104171112390.18270@cbobk.fhfr.pm
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac4ebcbd87195c8781778bcd0f5e1eccce5f4936
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Apr 21 09:45:13 2021 +0200

    USB: CDC-ACM: fix poison/unpoison imbalance
    
    commit a8b3b519618f30a87a304c4e120267ce6f8dc68a upstream.
    
    suspend() does its poisoning conditionally, resume() does it
    unconditionally. On a device with combined interfaces this
    will balance, on a device with two interfaces the counter will
    go negative and resubmission will fail.
    
    Both actions need to be done conditionally.
    
    Fixes: 6069e3e927c8f ("USB: cdc-acm: untangle a circular dependency between callback and softint")
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210421074513.4327-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41c44e1f3112d7265dae522c026399b2a42d19ef
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Apr 26 10:11:49 2021 +0200

    net: hso: fix NULL-deref on disconnect regression
    
    commit 2ad5692db72874f02b9ad551d26345437ea4f7f3 upstream.
    
    Commit 8a12f8836145 ("net: hso: fix null-ptr-deref during tty device
    unregistration") fixed the racy minor allocation reported by syzbot, but
    introduced an unconditional NULL-pointer dereference on every disconnect
    instead.
    
    Specifically, the serial device table must no longer be accessed after
    the minor has been released by hso_serial_tty_unregister().
    
    Fixes: 8a12f8836145 ("net: hso: fix null-ptr-deref during tty device unregistration")
    Cc: stable@vger.kernel.org
    Cc: Anirudh Rayabharam <mail@anirudhrb.com>
    Reported-by: Leonardo Antoniazzi <leoanto@aruba.it>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Anirudh Rayabharam <mail@anirudhrb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
