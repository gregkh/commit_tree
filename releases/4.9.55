commit f82786d7a94f06a35ab273002cedc1385bae8e9f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 12 11:51:27 2017 +0200

    Linux 4.9.55

commit 922e562b2613ae713d661c4fc0f92662f4fe6c41
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 7 15:13:14 2017 +0200

    KVM: x86: fix singlestepping over syscall
    
    commit c8401dda2f0a00cd25c0af6a95ed50e478d25de4 upstream.
    
    TF is handled a bit differently for syscall and sysret, compared
    to the other instructions: TF is checked after the instruction completes,
    so that the OS can disable #DB at a syscall by adding TF to FMASK.
    When the sysret is executed the #DB is taken "as if" the syscall insn
    just completed.
    
    KVM emulates syscall so that it can trap 32-bit syscall on Intel processors.
    Fix the behavior, otherwise you could get #DB on a user stack which is not
    nice.  This does not affect Linux guests, as they use an IST or task gate
    for #DB.
    
    This fixes CVE-2017-7518.
    
    Cc: stable@vger.kernel.org
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    [bwh: Backported to 4.9:
     - kvm_vcpu_check_singlestep() sets some flags differently
     - Drop changes to kvm_skip_emulated_instruction()]
    Cc: Ben Hutchings <benh@debian.org>
    Cc: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec86c1ca8fbb3e6bfb6f67b3b3697600fa5bb0d7
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Wed Dec 28 17:31:15 2016 -0800

    f2fs: don't allow encrypted operations without keys
    
    commit 363fa4e078cbdc97a172c19d19dc04b41b52ebc8 upstream.
    
    This patch fixes the renaming bug on encrypted filenames, which was pointed by
    
     (ext4: don't allow encrypted operations without keys)
    
    Cc: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48d7b5a8879002aeea63201d8fab598848cce0dd
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Dec 28 00:22:52 2016 -0500

    ext4: don't allow encrypted operations without keys
    
    commit 173b8439e1ba362007315868928bf9d26e5cc5a6 upstream.
    
    While we allow deletes without the key, the following should not be
    permitted:
    
    # cd /vdc/encrypted-dir-without-key
    # ls -l
    total 4
    -rw-r--r-- 1 root root   0 Dec 27 22:35 6,LKNRJsp209FbXoSvJWzB
    -rw-r--r-- 1 root root 286 Dec 27 22:35 uRJ5vJh9gE7vcomYMqTAyD
    # mv uRJ5vJh9gE7vcomYMqTAyD  6,LKNRJsp209FbXoSvJWzB
    
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6007f0f7a47d2a92aa8122a12e7b08eb5cfe3d53
Author: Jan Kara <jack@suse.cz>
Date:   Sun Jul 30 23:33:01 2017 -0400

    ext4: Don't clear SGID when inheriting ACLs
    
    commit a3bb2d5587521eea6dab2d05326abb0afb460abd upstream.
    
    When new directory 'DIR1' is created in a directory 'DIR0' with SGID bit
    set, DIR1 is expected to have SGID bit set (and owning group equal to
    the owning group of 'DIR0'). However when 'DIR0' also has some default
    ACLs that 'DIR1' inherits, setting these ACLs will result in SGID bit on
    'DIR1' to get cleared if user is not member of the owning group.
    
    Fix the problem by moving posix_acl_update_mode() out of
    __ext4_set_acl() into ext4_set_acl(). That way the function will not be
    called when inheriting ACLs which is what we want as it prevents SGID
    bit clearing and the mode has been properly set by posix_acl_create()
    anyway.
    
    Fixes: 073931017b49d9458aa351605b43a7e34598caef
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d605d9188d64e7d2bd96b4ec5bf91434024a25a
Author: Jan Kara <jack@suse.cz>
Date:   Fri May 26 17:45:45 2017 -0400

    ext4: fix data corruption for mmap writes
    
    commit a056bdaae7a181f7dcc876cfab2f94538e508709 upstream.
    
    mpage_submit_page() can race with another process growing i_size and
    writing data via mmap to the written-back page. As mpage_submit_page()
    samples i_size too early, it may happen that ext4_bio_write_page()
    zeroes out too large tail of the page and thus corrupts user data.
    
    Fix the problem by sampling i_size only after the page has been
    write-protected in page tables by clear_page_dirty_for_io() call.
    
    Reported-by: Michael Zimmer <michael@swarm64.com>
    Fixes: cb20d5188366f04d96d2e07b1240cc92170ade40
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27db1f020373a0681d483cc2d304e018cbd15723
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Tue Jan 31 10:34:56 2017 +0200

    vfs: deny copy_file_range() for non regular files
    
    commit 11cbfb10775aa2a01cee966d118049ede9d0bdf2 upstream.
    
    There is no in-tree file system that implements copy_file_range()
    for non regular files.
    
    Deny an attempt to copy_file_range() a directory with EISDIR
    and any other non regualr file with EINVAL to conform with
    behavior of vfs_{clone,dedup}_file_range().
    
    This change is needed prior to converting sb_start_write()
    to  file_start_write() in the vfs helper.
    
    Cc: linux-api@vger.kernel.org
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba15518c2610e777f141b55363b75f410eda7822
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Sep 7 11:13:38 2017 +0200

    sched/cpuset/pm: Fix cpuset vs. suspend-resume bugs
    
    commit 50e76632339d4655859523a39249dd95ee5e93e7 upstream.
    
    Cpusets vs. suspend-resume is _completely_ broken. And it got noticed
    because it now resulted in non-cpuset usage breaking too.
    
    On suspend cpuset_cpu_inactive() doesn't call into
    cpuset_update_active_cpus() because it doesn't want to move tasks about,
    there is no need, all tasks are frozen and won't run again until after
    we've resumed everything.
    
    But this means that when we finally do call into
    cpuset_update_active_cpus() after resuming the last frozen cpu in
    cpuset_cpu_active(), the top_cpuset will not have any difference with
    the cpu_active_mask and this it will not in fact do _anything_.
    
    So the cpuset configuration will not be restored. This was largely
    hidden because we would unconditionally create identity domains and
    mobile users would not in fact use cpusets much. And servers what do use
    cpusets tend to not suspend-resume much.
    
    An addition problem is that we'd not in fact wait for the cpuset work to
    finish before resuming the tasks, allowing spurious migrations outside
    of the specified domains.
    
    Fix the rebuild by introducing cpuset_force_rebuild() and fix the
    ordering with cpuset_wait_for_hotplug().
    
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: deb7aa308ea2 ("cpuset: reorganize CPU / memory hotplug handling")
    Link: http://lkml.kernel.org/r/20170907091338.orwxrqkbfkki3c24@hirez.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9aaef32f32c46b05c4d3bb96fe70e7c4346846e
Author: Chanho Min <chanho.min@lge.com>
Date:   Tue Sep 26 09:03:40 2017 +0900

    mmc: core: add driver strength selection when selecting hs400es
    
    commit fb458864d9a78cc433fec7979acbe4078c82d7a8 upstream.
    
    The driver strength selection is missed and required when selecting
    hs400es. So, It is added here.
    
    Fixes: 81ac2af65793ecf ("mmc: core: implement enhanced strobe support")
    Signed-off-by: Hankyung Yu <hankyung.yu@lge.com>
    Signed-off-by: Chanho Min <chanho.min@lge.com>
    Reviewed-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c83bbed2341925c167b3b0560232e0d39333c692
Author: Christoph Hellwig <hch@lst.de>
Date:   Sun Oct 1 09:37:35 2017 +0200

    nvme-pci: Use PCI bus address for data/queues in CMB
    
    commit 8969f1f8291762c13147c1ba89d46238af01675b upstream.
    
    Currently, NVMe PCI host driver is programming CMB dma address as
    I/O SQs addresses. This results in failures on systems where 1:1
    outbound mapping is not used (example Broadcom iProc SOCs) because
    CMB BAR will be progammed with PCI bus address but NVMe PCI EP will
    try to access CMB using dma address.
    
    To have CMB working on systems without 1:1 outbound mapping, we
    program PCI bus address for I/O SQs instead of dma address. This
    approach will work on systems with/without 1:1 outbound mapping.
    
    Based on a report and previous patch from Abhishek Shah.
    
    Fixes: 8ffaadf7 ("NVMe: Use CMB for the IO SQes if available")
    Reported-by: Abhishek Shah <abhishek.shah@broadcom.com>
    Tested-by: Abhishek Shah <abhishek.shah@broadcom.com>
    Reviewed-by: Keith Busch <keith.busch@intel.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acf64334817ceded9810b4d45951fff4cf9fc661
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Sep 21 17:19:20 2017 +0300

    drm/i915/bios: ignore HDMI on port A
    
    commit 2ba7d7e0437127314864238f8bfcb8369d81075c upstream.
    
    The hardware state readout oopses after several warnings when trying to
    use HDMI on port A, if such a combination is configured in VBT. Filter
    the combo out already at the VBT parsing phase.
    
    v2: also ignore DVI (Ville)
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=102889
    Cc: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Daniel Drake <dan@reactivated.net>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170921141920.18172-1-jani.nikula@intel.com
    (cherry picked from commit d27ffc1d00327c29b3aa97f941b42f0949f9e99f)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54aa832c8744bc98021a139226c1c5ff2a172298
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Tue Sep 12 10:47:54 2017 +0200

    brcmfmac: setup passive scan if requested by user-space
    
    commit 35f62727df0ed8e5e4857e162d94fd46d861f1cf upstream.
    
    The driver was not properly configuring firmware with regard to the
    type of scan. It always performed an active scan even when user-space
    was requesting for passive scan, ie. the scan request was done without
    any SSIDs specified.
    
    Reported-by: Huang, Jiangyang <Jiangyang.Huang@itron.com>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d3132d97aa753104ee35722352a895750a0fca5
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Tue Sep 12 10:47:53 2017 +0200

    brcmfmac: add length check in brcmf_cfg80211_escan_handler()
    
    commit 17df6453d4be17910456e99c5a85025aa1b7a246 upstream.
    
    Upon handling the firmware notification for scans the length was
    checked properly and may result in corrupting kernel heap memory
    due to buffer overruns. This fix addresses CVE-2017-0786.
    
    Cc: Kevin Cernekee <cernekee@chromium.org>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12b182a35f459efdadeca230a2d365d938c5c510
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Wed Sep 27 21:38:59 2017 -0400

    scsi: sd: Do not override max_sectors_kb sysfs setting
    
    commit 77082ca503bed061f7fbda7cfd7c93beda967a41 upstream.
    
    A user may lower the max_sectors_kb setting in sysfs to accommodate
    certain workloads. Previously we would always set the max I/O size to
    either the block layer default or the optional preferred I/O size
    reported by the device.
    
    Keep the current heuristics for the initial setting of max_sectors_kb.
    For subsequent invocations, only update the current queue limit if it
    exceeds the capabilities of the hardware.
    
    Reported-by: Don Brace <don.brace@microsemi.com>
    Reviewed-by: Martin Wilck <mwilck@suse.com>
    Tested-by: Don Brace <don.brace@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aee20f321daf95f47183d4af8b0c3dcd0096fe25
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Tue Aug 15 20:48:41 2017 +0300

    iwlwifi: add workaround to disable wide channels in 5GHz
    
    commit 01a9c948a09348950515bf2abb6113ed83e696d8 upstream.
    
    The OTP in some SKUs have erroneously allowed 40MHz and 80MHz channels
    in the 5.2GHz band.  The firmware has been modified to not allow this
    in those SKUs, so the driver needs to do the same otherwise the
    firmware will assert when we try to use it.
    
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8895642cf8ec03af47bd7017ecf0b8ff28fe23e
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Fri Sep 1 17:59:15 2017 +0300

    iwlwifi: mvm: use IWL_HCMD_NOCOPY for MCAST_FILTER_CMD
    
    commit 97bce57bd7f96e1218751996f549a6e61f18cc8c upstream.
    
    The MCAST_FILTER_CMD can get quite large when we have many mcast
    addresses to set (we support up to 255).  So the command should be
    send as NOCOPY to prevent a warning caused by too-long commands:
    
    WARNING: CPU: 0 PID: 9700 at /root/iwlwifi/stack-dev/drivers/net/wireless/intel/iwlwifi/pcie/tx.c:1550 iwl_pcie_enqueue_hcmd+0x8c7/0xb40 [iwlwifi]
    Command MCAST_FILTER_CMD (0x1d0) is too large (328 bytes)
    
    This fixes: https://bugzilla.kernel.org/show_bug.cgi?id=196743
    
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a19bc44c63696db85309148609a963970ad9cc9
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Sep 22 23:29:19 2017 +0200

    netlink: fix nla_put_{u8,u16,u32} for KASAN
    
    commit b4391db42308c9940944b5d7be5ca4b78fb88dd0 upstream.
    
    When CONFIG_KASAN is enabled, the "--param asan-stack=1" causes rather large
    stack frames in some functions. This goes unnoticed normally because
    CONFIG_FRAME_WARN is disabled with CONFIG_KASAN by default as of commit
    3f181b4d8652 ("lib/Kconfig.debug: disable -Wframe-larger-than warnings with
    KASAN=y").
    
    The kernelci.org build bot however has the warning enabled and that led
    me to investigate it a little further, as every build produces these warnings:
    
    net/wireless/nl80211.c:4389:1: warning: the frame size of 2240 bytes is larger than 2048 bytes [-Wframe-larger-than=]
    net/wireless/nl80211.c:1895:1: warning: the frame size of 3776 bytes is larger than 2048 bytes [-Wframe-larger-than=]
    net/wireless/nl80211.c:1410:1: warning: the frame size of 2208 bytes is larger than 2048 bytes [-Wframe-larger-than=]
    net/bridge/br_netlink.c:1282:1: warning: the frame size of 2544 bytes is larger than 2048 bytes [-Wframe-larger-than=]
    
    Most of this problem is now solved in gcc-8, which can consolidate
    the stack slots for the inline function arguments. On older compilers
    we can add a workaround by declaring a local variable in each function
    to pass the inline function argument.
    
    Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57a77fffb0ffa8d9a56536ab8f6c1028abe83137
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Sep 22 23:29:18 2017 +0200

    rocker: fix rocker_tlv_put_* functions for KASAN
    
    commit 6098d7ddd62f532f80ee2a4b01aca500a8e4e9e4 upstream.
    
    Inlining these functions creates lots of stack variables that each take
    64 bytes when KASAN is enabled, leading to this warning about potential
    stack overflow:
    
    drivers/net/ethernet/rocker/rocker_ofdpa.c: In function 'ofdpa_cmd_flow_tbl_add':
    drivers/net/ethernet/rocker/rocker_ofdpa.c:621:1: error: the frame size of 2752 bytes is larger than 1536 bytes [-Werror=frame-larger-than=]
    
    gcc-8 can now consolidate the stack slots itself, but on older versions
    we get the same behavior by using a temporary variable that holds a
    copy of the inline function argument.
    
    Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50b27486ae8a3b3d9dddbfeaa6d6be843d414de4
Author: Ping Cheng <pinglinux@gmail.com>
Date:   Thu Aug 31 15:50:03 2017 -0700

    HID: wacom: bits shifted too much for 9th and 10th buttons
    
    commit ce06760ba46b66dae50f2519ae76bd15e89b5710 upstream.
    
    Cintiq 12 has 10 expresskey buttons. The bit shift for the last
    two buttons were off by 5.
    
    Fixes: c7f0522 ("HID: wacom: Slim down wacom_intuos_pad processing")
    
    Signed-off-by: Ping Cheng <ping.cheng@wacom.com>
    Tested-by: Matthieu Robin <matthieu@macolu.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Cc: Jason Gerecke <killertofu@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 953f5e7c6216d26d064baa3e0c5ed081a4ca552d
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Sep 18 09:27:42 2017 -0700

    HID: wacom: Always increment hdev refcount within wacom_get_hdev_data
    
    commit 2a5e597c6bb1b873e473e5f57147e9e5d2755430 upstream.
    
    The wacom_get_hdev_data function is used to find and return a reference to
    the "other half" of a Wacom device (i.e., the touch device associated with
    a pen, or vice-versa). To ensure these references are properly accounted
    for, the function is supposed to automatically increment the refcount before
    returning. This was not done, however, for devices which have pen & touch
    on different interfaces of the same USB device. This can lead to a WARNING
    ("refcount_t: underflow; use-after-free") when removing the module or device
    as we call kref_put() more times than kref_get(). Triggering an "actual" use-
    after-free would be difficult since both devices will disappear nearly-
    simultaneously. To silence this warning and prevent the potential error, we
    need to increment the refcount for all cases within wacom_get_hdev_data.
    
    Fixes: 41372d5d40 ("HID: wacom: Augment 'oVid' and 'oPid' with heuristics for HID_GENERIC")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04b54e8ff7d01b6e877f9a7915bc30be67dd5c39
Author: Aaron Armstrong Skomra <skomra@gmail.com>
Date:   Mon Aug 28 14:15:39 2017 -0700

    HID: wacom: leds: Don't try to control the EKR's read-only LEDs
    
    commit 74aebed6dc13425233f2224668353cff7a112776 upstream.
    
    Commit a50aac7193f1 introduces 'led.groups' and adds EKR support
    for these groups. However, unlike the other devices with LEDs,
    the EKR's LEDs are read-only and we shouldn't attempt to control
    them in wacom_led_control().
    
    See bug: https://sourceforge.net/p/linuxwacom/bugs/342/
    
    Fixes: a50aac7193f1 ("HID: wacom: leds: dynamically allocate LED groups")
    Signed-off-by: Aaron Armstrong Skomra <aaron.skomra@wacom.com>
    Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5abb9cd4ff92c03410679842ba0cf9be4162873b
Author: Adrian Salido <salidoa@google.com>
Date:   Fri Sep 8 10:55:27 2017 -0700

    HID: i2c-hid: allocate hid buffers for real worst case
    
    commit 8320caeeffdefec3b58b9d4a7ed8e1079492fe7b upstream.
    
    The buffer allocation is not currently accounting for an extra byte for
    the report id. This can cause an out of bounds access in function
    i2c_hid_set_or_send_report() with reportID > 15.
    
    Signed-off-by: Adrian Salido <salidoa@google.com>
    Reviewed-by: Benson Leung <bleung@chromium.org>
    Signed-off-by: Guenter Roeck <groeck@chromium.org>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3ec104976f799808c2c1d8b32005c67b0037adb
Author: Shu Wang <shuwang@redhat.com>
Date:   Tue Sep 12 10:14:54 2017 +0800

    ftrace: Fix kmemleak in unregister_ftrace_graph
    
    commit 2b0b8499ae75df91455bbeb7491d45affc384fb0 upstream.
    
    The trampoline allocated by function tracer was overwriten by function_graph
    tracer, and caused a memory leak. The save_global_trampoline should have
    saved the previous trampoline in register_ftrace_graph() and restored it in
    unregister_ftrace_graph(). But as it is implemented, save_global_trampoline was
    only used in unregister_ftrace_graph as default value 0, and it overwrote the
    previous trampoline's value. Causing the previous allocated trampoline to be
    lost.
    
    kmmeleak backtrace:
        kmemleak_vmalloc+0x77/0xc0
        __vmalloc_node_range+0x1b5/0x2c0
        module_alloc+0x7c/0xd0
        arch_ftrace_update_trampoline+0xb5/0x290
        ftrace_startup+0x78/0x210
        register_ftrace_function+0x8b/0xd0
        function_trace_init+0x4f/0x80
        tracing_set_tracer+0xe6/0x170
        tracing_set_trace_write+0x90/0xd0
        __vfs_write+0x37/0x170
        vfs_write+0xb2/0x1b0
        SyS_write+0x55/0xc0
        do_syscall_64+0x67/0x180
        return_from_SYSCALL_64+0x0/0x6a
    
    [
      Looking further into this, I found that this was left over from when the
      function and function graph tracers shared the same ftrace_ops. But in
      commit 5f151b2401 ("ftrace: Fix function_profiler and function tracer
      together"), the two were separated, and the save_global_trampoline no
      longer was necessary (and it may have been broken back then too).
      -- Steven Rostedt
    ]
    
    Link: http://lkml.kernel.org/r/20170912021454.5976-1-shuwang@redhat.com
    
    Fixes: 5f151b2401 ("ftrace: Fix function_profiler and function tracer together")
    Signed-off-by: Shu Wang <shuwang@redhat.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ff8bc813b1301ee1395b4629b5136559e3fc6ba
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Sep 19 18:47:40 2017 +0300

    stm class: Fix a use-after-free
    
    commit fd085bb1766d6a598f53af2308374a546a49775a upstream.
    
    For reasons unknown, the stm_source removal path uses device_destroy()
    to kill the underlying device object. Because device_destroy() uses
    devt to look for the device to destroy and the fact that stm_source
    devices don't have one (or all have the same one), it just picks the
    first device in the class, which may well be the wrong one.
    
    That is, loading stm_console and stm_heartbeat and then removing both
    will die in dereferencing a freed object.
    
    Since this should have been device_unregister() in the first place,
    use it instead of device_destroy().
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 7bd1d4093c2 ("stm class: Introduce an abstraction for System Trace Module devices")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c541aaad4ac7830c4ee3d14ed984c423b9e7e479
Author: Olaf Hering <olaf@aepfle.de>
Date:   Thu Sep 21 23:41:48 2017 -0700

    Drivers: hv: fcopy: restore correct transfer length
    
    commit 549e658a0919e355a2b2144dc380b3729bef7f3e upstream.
    
    Till recently the expected length of bytes read by the
    daemon did depend on the context. It was either hv_start_fcopy or
    hv_do_fcopy. The daemon had a buffer size of two pages, which was much
    larger than needed.
    
    Now the expected length of bytes read by the
    daemon changed slightly. For START_FILE_COPY it is still the size of
    hv_start_fcopy.  But for WRITE_TO_FILE and the other operations it is as
    large as the buffer that arrived via vmbus. In case of WRITE_TO_FILE
    that is slightly larger than a struct hv_do_fcopy. Since the buffer in
    the daemon was still larger everything was fine.
    
    Currently, the daemon reads only what is actually needed.
    The new buffer layout is as large as a struct hv_do_fcopy, for the
    WRITE_TO_FILE operation. Since the kernel expects a slightly larger
    size, hvt_op_read will return -EINVAL because the daemon will read
    slightly less than expected. Address this by restoring the expected
    buffer size in case of WRITE_TO_FILE.
    
    Fixes: 'c7e490fc23eb ("Drivers: hv: fcopy: convert to hv_utils_transport")'
    Fixes: '3f2baa8a7d2e ("Tools: hv: update buffer handling in hv_fcopy_daemon")'
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a97ca4f7801815753423985b7aa20cd661b7049f
Author: Nicolai Stange <nstange@suse.de>
Date:   Mon Sep 11 09:45:42 2017 +0200

    driver core: platform: Don't read past the end of "driver_override" buffer
    
    commit bf563b01c2895a4bfd1a29cc5abc67fe706ecffd upstream.
    
    When printing the driver_override parameter when it is 4095 and 4094 bytes
    long, the printing code would access invalid memory because we need count+1
    bytes for printing.
    
    Reject driver_override values of these lengths in driver_override_store().
    
    This is in close analogy to commit 4efe874aace5 ("PCI: Don't read past the
    end of sysfs "driver_override" buffer") from Sasha Levin.
    
    Fixes: 3d713e0e382e ("driver core: platform: add device binding path 'driver_override'")
    Signed-off-by: Nicolai Stange <nstange@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc3c67226acd0df7ae248749e13248477b483bf0
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Tue Sep 26 12:41:52 2017 +0100

    percpu: make this_cpu_generic_read() atomic w.r.t. interrupts
    
    commit e88d62cd4b2f0b1ae55e9008e79c2794b1fc914d upstream.
    
    As raw_cpu_generic_read() is a plain read from a raw_cpu_ptr() address,
    it's possible (albeit unlikely) that the compiler will split the access
    across multiple instructions.
    
    In this_cpu_generic_read() we disable preemption but not interrupts
    before calling raw_cpu_generic_read(). Thus, an interrupt could be taken
    in the middle of the split load instructions. If a this_cpu_write() or
    RMW this_cpu_*() op is made to the same variable in the interrupt
    handling path, this_cpu_read() will return a torn value.
    
    For native word types, we can avoid tearing using READ_ONCE(), but this
    won't work in all cases (e.g. 64-bit types on most 32-bit platforms).
    This patch reworks this_cpu_generic_read() to use READ_ONCE() where
    possible, otherwise falling back to disabling interrupts.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Pranith Kumar <bobby.prani@gmail.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-arch@vger.kernel.org
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a988259b1cbbde82d4e2d844b376a81e78c7a32
Author: Gustavo Romero <gromero@linux.vnet.ibm.com>
Date:   Tue Aug 22 17:20:09 2017 -0400

    powerpc/tm: Fix illegal TM state in signal handler
    
    commit 044215d145a7a8a60ffa8fdc859d110a795fa6ea upstream.
    
    Currently it's possible that on returning from the signal handler
    through the restore_tm_sigcontexts() code path (e.g. from a signal
    caught due to a `trap` instruction executed in the middle of an HTM
    block, or a deliberately constructed sigframe) an illegal TM state
    (like TS=10 TM=0, i.e. "T0") is set in SRR1 and when `rfid` sets
    implicitly the MSR register from SRR1 register on return to userspace
    it causes a TM Bad Thing exception.
    
    That illegal state can be set (a) by a malicious user that disables
    the TM bit by tweaking the bits in uc_mcontext before returning from
    the signal handler or (b) by a sufficient number of context switches
    occurring such that the load_tm counter overflows and TM is disabled
    whilst in the signal handler.
    
    This commit fixes the illegal TM state by ensuring that TM bit is
    always enabled before we return from restore_tm_sigcontexts(). A small
    comment correction is made as well.
    
    Fixes: 5d176f751ee3 ("powerpc: tm: Enable transactional memory (TM) lazily for userspace")
    Signed-off-by: Gustavo Romero <gromero@linux.vnet.ibm.com>
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Cyril Bur <cyrilbur@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afebf5ef60da6d15e75398e41ea2817c7a2bb283
Author: Cyril Bur <cyrilbur@gmail.com>
Date:   Thu Aug 17 20:42:26 2017 +1000

    powerpc/64s: Use emergency stack for kernel TM Bad Thing program checks
    
    commit 265e60a170d0a0ecfc2d20490134ed2c48dd45ab upstream.
    
    When using transactional memory (TM), the CPU can be in one of six
    states as far as TM is concerned, encoded in the Machine State
    Register (MSR). Certain state transitions are illegal and if attempted
    trigger a "TM Bad Thing" type program check exception.
    
    If we ever hit one of these exceptions it's treated as a bug, ie. we
    oops, and kill the process and/or panic, depending on configuration.
    
    One case where we can trigger a TM Bad Thing, is when returning to
    userspace after a system call or interrupt, using RFID. When this
    happens the CPU first restores the user register state, in particular
    r1 (the stack pointer) and then attempts to update the MSR. However
    the MSR update is not allowed and so we take the program check with
    the user register state, but the kernel MSR.
    
    This tricks the exception entry code into thinking we have a bad
    kernel stack pointer, because the MSR says we're coming from the
    kernel, but r1 is pointing to userspace.
    
    To avoid this we instead always switch to the emergency stack if we
    take a TM Bad Thing from the kernel. That way none of the user
    register values are used, other than for printing in the oops message.
    
    This is the fix for CVE-2017-1000255.
    
    Fixes: 5d176f751ee3 ("powerpc: tm: Enable transactional memory (TM) lazily for userspace")
    Signed-off-by: Cyril Bur <cyrilbur@gmail.com>
    [mpe: Rewrite change log & comments, tweak asm slightly]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02f7e4101092b88e57c73171174976c8a72a3eba
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 2 12:20:51 2017 -0700

    socket, bpf: fix possible use after free
    
    
    [ Upstream commit eefca20eb20c66b06cf5ed09b49b1a7caaa27b7b ]
    
    Starting from linux-4.4, 3WHS no longer takes the listener lock.
    
    Since this time, we might hit a use-after-free in sk_filter_charge(),
    if the filter we got in the memcpy() of the listener content
    just happened to be replaced by a thread changing listener BPF filter.
    
    To fix this, we need to make sure the filter refcount is not already
    zero before incrementing it again.
    
    Fixes: e994b2f0fb92 ("tcp: do not lock listener to process SYN packets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95206ea376b9ed43ff7cac7f944f654b4314f754
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Tue Oct 3 13:20:48 2017 +0300

    net: rtnetlink: fix info leak in RTM_GETSTATS call
    
    
    [ Upstream commit ce024f42c2e28b6bce4ecc1e891b42f57f753892 ]
    
    When RTM_GETSTATS was added the fields of its header struct were not all
    initialized when returning the result thus leaking 4 bytes of information
    to user-space per rtnl_fill_statsinfo call, so initialize them now. Thanks
    to Alexander Potapenko for the detailed report and bisection.
    
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: 10c9ead9f3c6 ("rtnetlink: add new RTM_GETSTATS message to dump link stats")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Acked-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58b1b8407a3121b7dc8b8612f7802647833b5069
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Sep 29 10:02:54 2017 +0200

    tipc: use only positive error codes in messages
    
    
    [ Upstream commit aad06212d36cf34859428a0a279e5c14ee5c9e26 ]
    
    In commit e3a77561e7d32 ("tipc: split up function tipc_msg_eval()"),
    we have updated the function tipc_msg_lookup_dest() to set the error
    codes to negative values at destination lookup failures. Thus when
    the function sets the error code to -TIPC_ERR_NO_NAME, its inserted
    into the 4 bit error field of the message header as 0xf instead of
    TIPC_ERR_NO_NAME (1). The value 0xf is an unknown error code.
    
    In this commit, we set only positive error code.
    
    Fixes: e3a77561e7d32 ("tipc: split up function tipc_msg_eval()")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09788d46b756a71313378b56d1a927a5ee64f7ce
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Sep 28 13:24:07 2017 +0800

    ip6_tunnel: update mtu properly for ARPHRD_ETHER tunnel device in tx path
    
    
    [ Upstream commit d41bb33ba33b8f8debe54ed36be6925eb496e354 ]
    
    Now when updating mtu in tx path, it doesn't consider ARPHRD_ETHER tunnel
    device, like ip6gre_tap tunnel, for which it should also subtract ether
    header to get the correct mtu.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab4da56f61bed798a833b8fd9cf64d88b1ba27a3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Sep 28 13:23:50 2017 +0800

    ip6_gre: ip6gre_tap device should keep dst
    
    
    [ Upstream commit 2d40557cc702ed8e5edd9bd422233f86652d932e ]
    
    The patch 'ip_gre: ipgre_tap device should keep dst' fixed
    a issue that ipgre_tap mtu couldn't be updated in tx path.
    
    The same fix is needed for ip6gre_tap as well.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4a119251f6b29fd06153a3e241fe2b85e9fb159
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Thu Sep 28 00:41:44 2017 +0200

    netlink: do not proceed if dump's start() errs
    
    
    [ Upstream commit fef0035c0f31322d417d1954bba5ab959bf91183 ]
    
    Drivers that use the start method for netlink dumping rely on dumpit not
    being called if start fails. For example, ila_xlat.c allocates memory
    and assigns it to cb->args[0] in its start() function. It might fail to
    do that and return -ENOMEM instead. However, even when returning an
    error, dumpit will be called, which, in the example above, quickly
    dereferences the memory in cb->args[0], which will OOPS the kernel. This
    is but one example of how this goes wrong.
    
    Since start() has always been a function with an int return type, it
    therefore makes sense to use it properly, rather than ignoring it. This
    patch thus returns early and does not call dumpit() when start() fails.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Reviewed-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf2eaf16ab284e3c5b057dff4c68516cfeae62ba
Author: Christoph Paasch <cpaasch@apple.com>
Date:   Tue Sep 26 17:38:50 2017 -0700

    net: Set sk_prot_creator when cloning sockets to the right proto
    
    
    [ Upstream commit 9d538fa60bad4f7b23193c89e843797a1cf71ef3 ]
    
    sk->sk_prot and sk->sk_prot_creator can differ when the app uses
    IPV6_ADDRFORM (transforming an IPv6-socket to an IPv4-one).
    Which is why sk_prot_creator is there to make sure that sk_prot_free()
    does the kmem_cache_free() on the right kmem_cache slab.
    
    Now, if such a socket gets transformed back to a listening socket (using
    connect() with AF_UNSPEC) we will allocate an IPv4 tcp_sock through
    sk_clone_lock() when a new connection comes in. But sk_prot_creator will
    still point to the IPv6 kmem_cache (as everything got copied in
    sk_clone_lock()). When freeing, we will thus put this
    memory back into the IPv6 kmem_cache although it was allocated in the
    IPv4 cache. I have seen memory corruption happening because of this.
    
    With slub-debugging and MEMCG_KMEM enabled this gives the warning
            "cache_from_obj: Wrong slab cache. TCPv6 but object is from TCP"
    
    A C-program to trigger this:
    
    void main(void)
    {
            int fd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
            int new_fd, newest_fd, client_fd;
            struct sockaddr_in6 bind_addr;
            struct sockaddr_in bind_addr4, client_addr1, client_addr2;
            struct sockaddr unsp;
            int val;
    
            memset(&bind_addr, 0, sizeof(bind_addr));
            bind_addr.sin6_family = AF_INET6;
            bind_addr.sin6_port = ntohs(42424);
    
            memset(&client_addr1, 0, sizeof(client_addr1));
            client_addr1.sin_family = AF_INET;
            client_addr1.sin_port = ntohs(42424);
            client_addr1.sin_addr.s_addr = inet_addr("127.0.0.1");
    
            memset(&client_addr2, 0, sizeof(client_addr2));
            client_addr2.sin_family = AF_INET;
            client_addr2.sin_port = ntohs(42421);
            client_addr2.sin_addr.s_addr = inet_addr("127.0.0.1");
    
            memset(&unsp, 0, sizeof(unsp));
            unsp.sa_family = AF_UNSPEC;
    
            bind(fd, (struct sockaddr *)&bind_addr, sizeof(bind_addr));
    
            listen(fd, 5);
    
            client_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            connect(client_fd, (struct sockaddr *)&client_addr1, sizeof(client_addr1));
            new_fd = accept(fd, NULL, NULL);
            close(fd);
    
            val = AF_INET;
            setsockopt(new_fd, SOL_IPV6, IPV6_ADDRFORM, &val, sizeof(val));
    
            connect(new_fd, &unsp, sizeof(unsp));
    
            memset(&bind_addr4, 0, sizeof(bind_addr4));
            bind_addr4.sin_family = AF_INET;
            bind_addr4.sin_port = ntohs(42421);
            bind(new_fd, (struct sockaddr *)&bind_addr4, sizeof(bind_addr4));
    
            listen(new_fd, 5);
    
            client_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            connect(client_fd, (struct sockaddr *)&client_addr2, sizeof(client_addr2));
    
            newest_fd = accept(new_fd, NULL, NULL);
            close(new_fd);
    
            close(client_fd);
            close(new_fd);
    }
    
    As far as I can see, this bug has been there since the beginning of the
    git-days.
    
    Signed-off-by: Christoph Paasch <cpaasch@apple.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24ee394a82d2cd92c92b617713a4d263131a902b
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Sep 26 12:20:17 2017 -0400

    packet: only test po->has_vnet_hdr once in packet_snd
    
    
    [ Upstream commit da7c9561015e93d10fe6aab73e9288e0d09d65a6 ]
    
    Packet socket option po->has_vnet_hdr can be updated concurrently with
    other operations if no ring is attached.
    
    Do not test the option twice in packet_snd, as the value may change in
    between calls. A race on setsockopt disable may cause a packet > mtu
    to be sent without having GSO options set.
    
    Fixes: bfd5f4a3d605 ("packet: Add GSO/csum offload support.")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f22167d3321a028c0b6edc2d5b2ab0e37a2ac53
Author: Willem de Bruijn <willemb@google.com>
Date:   Tue Sep 26 12:19:37 2017 -0400

    packet: in packet_do_bind, test fanout with bind_lock held
    
    
    [ Upstream commit 4971613c1639d8e5f102c4e797c3bf8f83a5a69e ]
    
    Once a socket has po->fanout set, it remains a member of the group
    until it is destroyed. The prot_hook must be constant and identical
    across sockets in the group.
    
    If fanout_add races with packet_do_bind between the test of po->fanout
    and taking the lock, the bind call may make type or dev inconsistent
    with that of the fanout group.
    
    Hold po->bind_lock when testing po->fanout to avoid this race.
    
    I had to introduce artificial delay (local_bh_enable) to actually
    observe the race.
    
    Fixes: dc99f600698d ("packet: Add fanout support.")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eab1f829417973122f235af002499d786a22023
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Sep 25 15:55:53 2017 -0700

    net: dsa: Fix network device registration order
    
    
    [ Upstream commit e804441cfe0b60f6c430901946a69c01eac09df1 ]
    
    We cannot be registering the network device first, then setting its
    carrier off and finally connecting it to a PHY, doing that leaves a
    window during which the carrier is at best inconsistent, and at worse
    the device is not usable without a down/up sequence since the network
    device is visible to user space with possibly no PHY device attached.
    
    Re-order steps so that they make logical sense. This fixes some devices
    where the port was not usable after e.g: an unbind then bind of the
    driver.
    
    Fixes: 0071f56e46da ("dsa: Register netdev before phy")
    Fixes: 91da11f870f0 ("net: Distributed Switch Architecture protocol support")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8990d2e77c6652c9318adc55f698ee4de5e3ee1
Author: Alexander Potapenko <glider@google.com>
Date:   Thu Sep 28 11:32:37 2017 +0200

    tun: bail out from tun_get_user() if the skb is empty
    
    
    [ Upstream commit 2580c4c17aee3ad58e9751012bad278dd074ccae ]
    
    KMSAN (https://github.com/google/kmsan) reported accessing uninitialized
    skb->data[0] in the case the skb is empty (i.e. skb->len is 0):
    
    ================================================
    BUG: KMSAN: use of uninitialized memory in tun_get_user+0x19ba/0x3770
    CPU: 0 PID: 3051 Comm: probe Not tainted 4.13.0+ #3140
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Call Trace:
    ...
     __msan_warning_32+0x66/0xb0 mm/kmsan/kmsan_instr.c:477
     tun_get_user+0x19ba/0x3770 drivers/net/tun.c:1301
     tun_chr_write_iter+0x19f/0x300 drivers/net/tun.c:1365
     call_write_iter ./include/linux/fs.h:1743
     new_sync_write fs/read_write.c:457
     __vfs_write+0x6c3/0x7f0 fs/read_write.c:470
     vfs_write+0x3e4/0x770 fs/read_write.c:518
     SYSC_write+0x12f/0x2b0 fs/read_write.c:565
     SyS_write+0x55/0x80 fs/read_write.c:557
     do_syscall_64+0x242/0x330 arch/x86/entry/common.c:284
     entry_SYSCALL64_slow_path+0x25/0x25 arch/x86/entry/entry_64.S:245
    ...
    origin:
    ...
     kmsan_poison_shadow+0x6e/0xc0 mm/kmsan/kmsan.c:211
     slab_alloc_node mm/slub.c:2732
     __kmalloc_node_track_caller+0x351/0x370 mm/slub.c:4351
     __kmalloc_reserve net/core/skbuff.c:138
     __alloc_skb+0x26a/0x810 net/core/skbuff.c:231
     alloc_skb ./include/linux/skbuff.h:903
     alloc_skb_with_frags+0x1d7/0xc80 net/core/skbuff.c:4756
     sock_alloc_send_pskb+0xabf/0xfe0 net/core/sock.c:2037
     tun_alloc_skb drivers/net/tun.c:1144
     tun_get_user+0x9a8/0x3770 drivers/net/tun.c:1274
     tun_chr_write_iter+0x19f/0x300 drivers/net/tun.c:1365
     call_write_iter ./include/linux/fs.h:1743
     new_sync_write fs/read_write.c:457
     __vfs_write+0x6c3/0x7f0 fs/read_write.c:470
     vfs_write+0x3e4/0x770 fs/read_write.c:518
     SYSC_write+0x12f/0x2b0 fs/read_write.c:565
     SyS_write+0x55/0x80 fs/read_write.c:557
     do_syscall_64+0x242/0x330 arch/x86/entry/common.c:284
     return_from_SYSCALL_64+0x0/0x6a arch/x86/entry/entry_64.S:245
    ================================================
    
    Make sure tun_get_user() doesn't touch skb->data[0] unless there is
    actual data.
    
    C reproducer below:
    ==========================
        // autogenerated by syzkaller (http://github.com/google/syzkaller)
    
        #define _GNU_SOURCE
    
        #include <fcntl.h>
        #include <linux/if_tun.h>
        #include <netinet/ip.h>
        #include <net/if.h>
        #include <string.h>
        #include <sys/ioctl.h>
    
        int main()
        {
          int sock = socket(PF_INET, SOCK_STREAM, IPPROTO_IP);
          int tun_fd = open("/dev/net/tun", O_RDWR);
          struct ifreq req;
          memset(&req, 0, sizeof(struct ifreq));
          strcpy((char*)&req.ifr_name, "gre0");
          req.ifr_flags = IFF_UP | IFF_MULTICAST;
          ioctl(tun_fd, TUNSETIFF, &req);
          ioctl(sock, SIOCSIFFLAGS, "gre0");
          write(tun_fd, "hi", 0);
          return 0;
        }
    ==========================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4a9b12d9a2c9bfae8eba546b9e29aea3bd69f9e
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Sep 26 16:16:43 2017 +0200

    l2tp: fix race condition in l2tp_tunnel_delete
    
    
    [ Upstream commit 62b982eeb4589b2e6d7c01a90590e3a4c2b2ca19 ]
    
    If we try to delete the same tunnel twice, the first delete operation
    does a lookup (l2tp_tunnel_get), finds the tunnel, calls
    l2tp_tunnel_delete, which queues it for deletion by
    l2tp_tunnel_del_work.
    
    The second delete operation also finds the tunnel and calls
    l2tp_tunnel_delete. If the workqueue has already fired and started
    running l2tp_tunnel_del_work, then l2tp_tunnel_delete will queue the
    same tunnel a second time, and try to free the socket again.
    
    Add a dead flag to prevent firing the workqueue twice. Then we can
    remove the check of queue_work's result that was meant to prevent that
    race but doesn't.
    
    Reproducer:
    
        ip l2tp add tunnel tunnel_id 3000 peer_tunnel_id 4000 local 192.168.0.2 remote 192.168.0.1 encap udp udp_sport 5000 udp_dport 6000
        ip l2tp add session name l2tp1 tunnel_id 3000 session_id 1000 peer_session_id 2000
        ip link set l2tp1 up
        ip l2tp del tunnel tunnel_id 3000
        ip l2tp del tunnel tunnel_id 3000
    
    Fixes: f8ccac0e4493 ("l2tp: put tunnel socket release on a workqueue")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Acked-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5941137f784ddfbbb14da152a4f8a930cb228f8
Author: Ridge Kennedy <ridge.kennedy@alliedtelesis.co.nz>
Date:   Wed Feb 22 14:59:49 2017 +1300

    l2tp: Avoid schedule while atomic in exit_net
    
    
    [ Upstream commit 12d656af4e3d2781b9b9f52538593e1717e7c979 ]
    
    While destroying a network namespace that contains a L2TP tunnel a
    "BUG: scheduling while atomic" can be observed.
    
    Enabling lockdep shows that this is happening because l2tp_exit_net()
    is calling l2tp_tunnel_closeall() (via l2tp_tunnel_delete()) from
    within an RCU critical section.
    
    l2tp_exit_net() takes rcu_read_lock_bh()
      << list_for_each_entry_rcu() >>
      l2tp_tunnel_delete()
        l2tp_tunnel_closeall()
          __l2tp_session_unhash()
            synchronize_rcu() << Illegal inside RCU critical section >>
    
    BUG: sleeping function called from invalid context
    in_atomic(): 1, irqs_disabled(): 0, pid: 86, name: kworker/u16:2
    INFO: lockdep is turned off.
    CPU: 2 PID: 86 Comm: kworker/u16:2 Tainted: G        W  O    4.4.6-at1 #2
    Hardware name: Xen HVM domU, BIOS 4.6.1-xs125300 05/09/2016
    Workqueue: netns cleanup_net
     0000000000000000 ffff880202417b90 ffffffff812b0013 ffff880202410ac0
     ffffffff81870de8 ffff880202417bb8 ffffffff8107aee8 ffffffff81870de8
     0000000000000c51 0000000000000000 ffff880202417be0 ffffffff8107b024
    Call Trace:
     [<ffffffff812b0013>] dump_stack+0x85/0xc2
     [<ffffffff8107aee8>] ___might_sleep+0x148/0x240
     [<ffffffff8107b024>] __might_sleep+0x44/0x80
     [<ffffffff810b21bd>] synchronize_sched+0x2d/0xe0
     [<ffffffff8109be6d>] ? trace_hardirqs_on+0xd/0x10
     [<ffffffff8105c7bb>] ? __local_bh_enable_ip+0x6b/0xc0
     [<ffffffff816a1b00>] ? _raw_spin_unlock_bh+0x30/0x40
     [<ffffffff81667482>] __l2tp_session_unhash+0x172/0x220
     [<ffffffff81667397>] ? __l2tp_session_unhash+0x87/0x220
     [<ffffffff8166888b>] l2tp_tunnel_closeall+0x9b/0x140
     [<ffffffff81668c74>] l2tp_tunnel_delete+0x14/0x60
     [<ffffffff81668dd0>] l2tp_exit_net+0x110/0x270
     [<ffffffff81668d5c>] ? l2tp_exit_net+0x9c/0x270
     [<ffffffff815001c3>] ops_exit_list.isra.6+0x33/0x60
     [<ffffffff81501166>] cleanup_net+0x1b6/0x280
     ...
    
    This bug can easily be reproduced with a few steps:
    
     $ sudo unshare -n bash  # Create a shell in a new namespace
     # ip link set lo up
     # ip addr add 127.0.0.1 dev lo
     # ip l2tp add tunnel remote 127.0.0.1 local 127.0.0.1 tunnel_id 1 \
        peer_tunnel_id 1 udp_sport 50000 udp_dport 50000
     # ip l2tp add session name foo tunnel_id 1 session_id 1 \
        peer_session_id 1
     # ip link set foo up
     # exit  # Exit the shell, in turn exiting the namespace
     $ dmesg
     ...
     [942121.089216] BUG: scheduling while atomic: kworker/u16:3/13872/0x00000200
     ...
    
    To fix this, move the call to l2tp_tunnel_closeall() out of the RCU
    critical section, and instead call it from l2tp_tunnel_del_work(), which
    is running from the l2tp_wq workqueue.
    
    Fixes: 2b551c6e7d5b ("l2tp: close sessions before initiating tunnel delete")
    Signed-off-by: Ridge Kennedy <ridge.kennedy@alliedtelesis.co.nz>
    Acked-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6689f8358681b375130867088ed86e7a3fccbdc1
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Tue Sep 26 15:14:29 2017 +0300

    vti: fix use after free in vti_tunnel_xmit/vti6_tnl_xmit
    
    
    [ Upstream commit 36f6ee22d2d66046e369757ec6bbe1c482957ba6 ]
    
    When running LTP IPsec tests, KASan might report:
    
    BUG: KASAN: use-after-free in vti_tunnel_xmit+0xeee/0xff0 [ip_vti]
    Read of size 4 at addr ffff880dc6ad1980 by task swapper/0/0
    ...
    Call Trace:
      <IRQ>
      dump_stack+0x63/0x89
      print_address_description+0x7c/0x290
      kasan_report+0x28d/0x370
      ? vti_tunnel_xmit+0xeee/0xff0 [ip_vti]
      __asan_report_load4_noabort+0x19/0x20
      vti_tunnel_xmit+0xeee/0xff0 [ip_vti]
      ? vti_init_net+0x190/0x190 [ip_vti]
      ? save_stack_trace+0x1b/0x20
      ? save_stack+0x46/0xd0
      dev_hard_start_xmit+0x147/0x510
      ? icmp_echo.part.24+0x1f0/0x210
      __dev_queue_xmit+0x1394/0x1c60
    ...
    Freed by task 0:
      save_stack_trace+0x1b/0x20
      save_stack+0x46/0xd0
      kasan_slab_free+0x70/0xc0
      kmem_cache_free+0x81/0x1e0
      kfree_skbmem+0xb1/0xe0
      kfree_skb+0x75/0x170
      kfree_skb_list+0x3e/0x60
      __dev_queue_xmit+0x1298/0x1c60
      dev_queue_xmit+0x10/0x20
      neigh_resolve_output+0x3a8/0x740
      ip_finish_output2+0x5c0/0xe70
      ip_finish_output+0x4ba/0x680
      ip_output+0x1c1/0x3a0
      xfrm_output_resume+0xc65/0x13d0
      xfrm_output+0x1e4/0x380
      xfrm4_output_finish+0x5c/0x70
    
    Can be fixed if we get skb->len before dst_output().
    
    Fixes: b9959fd3b0fa ("vti: switch to new ip tunnel code")
    Fixes: 22e1b23dafa8 ("vti6: Support inter address family tunneling.")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 852bdea5e379df029d19d7f9ae8b6d337bf0fc9d
Author: Timur Tabi <timur@codeaurora.org>
Date:   Fri Sep 22 15:32:44 2017 -0500

    net: qcom/emac: specify the correct size when mapping a DMA buffer
    
    
    [ Upstream commit a93ad944f4ff9a797abff17c73fc4b1e4a1d9141 ]
    
    When mapping the RX DMA buffers, the driver was accidentally specifying
    zero for the buffer length.  Under normal circumstances, SWIOTLB does not
    need to allocate a bounce buffer, so the address is just mapped without
    checking the size field.  This is why the error was not detected earlier.
    
    Fixes: b9b17debc69d ("net: emac: emac gigabit ethernet controller driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Timur Tabi <timur@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5600c7586ad9281dd2bf78cf46f8ad4353c75c9e
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Wed Sep 20 15:45:36 2017 +0300

    net_sched: always reset qdisc backlog in qdisc_reset()
    
    
    [ Upstream commit c8e1812960eeae42e2183154927028511c4bc566 ]
    
    SKB stored in qdisc->gso_skb also counted into backlog.
    
    Some qdiscs don't reset backlog to zero in ->reset(),
    for example sfq just dequeue and free all queued skb.
    
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Fixes: 2ccccf5fb43f ("net_sched: update hierarchical backlog too")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93eef2172d2352d6cff07008e689cc56d841f35a
Author: Meng Xu <mengxu.gatech@gmail.com>
Date:   Tue Sep 19 21:49:55 2017 -0400

    isdn/i4l: fetch the ppp_write buffer in one shot
    
    
    [ Upstream commit 02388bf87f72e1d47174cd8f81c34443920eb5a0 ]
    
    In isdn_ppp_write(), the header (i.e., protobuf) of the buffer is
    fetched twice from userspace. The first fetch is used to peek at the
    protocol of the message and reset the huptimer if necessary; while the
    second fetch copies in the whole buffer. However, given that buf resides
    in userspace memory, a user process can race to change its memory content
    across fetches. By doing so, we can either avoid resetting the huptimer
    for any type of packets (by first setting proto to PPP_LCP and later
    change to the actual type) or force resetting the huptimer for LCP
    packets.
    
    This patch changes this double-fetch behavior into two single fetches
    decided by condition (lp->isdn_device < 0 || lp->isdn_channel <0).
    A more detailed discussion can be found at
    https://marc.info/?l=linux-kernel&m=150586376926123&w=2
    
    Signed-off-by: Meng Xu <mengxu.gatech@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dee549f79121393e13efc0c2a05a98da00f3eda
Author: Yonghong Song <yhs@fb.com>
Date:   Mon Sep 18 16:38:36 2017 -0700

    bpf: one perf event close won't free bpf program attached by another perf event
    
    
    [ Upstream commit ec9dd352d591f0c90402ec67a317c1ed4fb2e638 ]
    
    This patch fixes a bug exhibited by the following scenario:
      1. fd1 = perf_event_open with attr.config = ID1
      2. attach bpf program prog1 to fd1
      3. fd2 = perf_event_open with attr.config = ID1
         <this will be successful>
      4. user program closes fd2 and prog1 is detached from the tracepoint.
      5. user program with fd1 does not work properly as tracepoint
         no output any more.
    
    The issue happens at step 4. Multiple perf_event_open can be called
    successfully, but only one bpf prog pointer in the tp_event. In the
    current logic, any fd release for the same tp_event will free
    the tp_event->prog.
    
    The fix is to free tp_event->prog only when the closing fd
    corresponds to the one which registered the program.
    
    Signed-off-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f7cdd4aa0a45f21edf6cb31236cd9d10c0d7992
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu Sep 14 17:14:41 2017 -0400

    packet: hold bind lock when rebinding to fanout hook
    
    
    [ Upstream commit 008ba2a13f2d04c947adc536d19debb8fe66f110 ]
    
    Packet socket bind operations must hold the po->bind_lock. This keeps
    po->running consistent with whether the socket is actually on a ptype
    list to receive packets.
    
    fanout_add unbinds a socket and its packet_rcv/tpacket_rcv call, then
    binds the fanout object to receive through packet_rcv_fanout.
    
    Make it hold the po->bind_lock when testing po->running and rebinding.
    Else, it can race with other rebind operations, such as that in
    packet_set_ring from packet_rcv to tpacket_rcv. Concurrent updates
    can result in a socket being added to a fanout group twice, causing
    use-after-free KASAN bug reports, among others.
    
    Reported independently by both trinity and syzkaller.
    Verified that the syzkaller reproducer passes after this patch.
    
    Fixes: dc99f600698d ("packet: Add fanout support.")
    Reported-by: nixioaming <nixiaoming@huawei.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eac2cd24bd97cb9eada99a01ee6022c573447de
Author: Christian Lamparter <chunkeey@googlemail.com>
Date:   Tue Sep 19 19:35:18 2017 +0200

    net: emac: Fix napi poll list corruption
    
    
    [ Upstream commit f55956065ec94e3e9371463d693a1029c4cc3007 ]
    
    This patch is pretty much a carbon copy of
    commit 3079c652141f ("caif: Fix napi poll list corruption")
    with "caif" replaced by "emac".
    
    The commit d75b1ade567f ("net: less interrupt masking in NAPI")
    breaks emac.
    
    It is now required that if the entire budget is consumed when poll
    returns, the napi poll_list must remain empty.  However, like some
    other drivers emac tries to do a last-ditch check and if there is
    more work it will call napi_reschedule and then immediately process
    some of this new work.  Should the entire budget be consumed while
    processing such new work then we will violate the new caller
    contract.
    
    This patch fixes this by not touching any work when we reschedule
    in emac.
    
    Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b463521db854a0b73a14b34d782c51d6f7c87a77
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Sep 19 10:05:57 2017 -0700

    tcp: fastopen: fix on syn-data transmit failure
    
    
    [ Upstream commit b5b7db8d680464b1d631fd016f5e093419f0bfd9 ]
    
    Our recent change exposed a bug in TCP Fastopen Client that syzkaller
    found right away [1]
    
    When we prepare skb with SYN+DATA, we attempt to transmit it,
    and we update socket state as if the transmit was a success.
    
    In socket RTX queue we have two skbs, one with the SYN alone,
    and a second one containing the DATA.
    
    When (malicious) ACK comes in, we now complain that second one had no
    skb_mstamp.
    
    The proper fix is to make sure that if the transmit failed, we do not
    pretend we sent the DATA skb, and make it our send_head.
    
    When 3WHS completes, we can now send the DATA right away, without having
    to wait for a timeout.
    
    [1]
    WARNING: CPU: 0 PID: 100189 at net/ipv4/tcp_input.c:3117 tcp_clean_rtx_queue+0x2057/0x2ab0 net/ipv4/tcp_input.c:3117()
    
     WARN_ON_ONCE(last_ackt == 0);
    
    Modules linked in:
    CPU: 0 PID: 100189 Comm: syz-executor1 Not tainted
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
     0000000000000000 ffff8800b35cb1d8 ffffffff81cad00d 0000000000000000
     ffffffff828a4347 ffff88009f86c080 ffffffff8316eb20 0000000000000d7f
     ffff8800b35cb220 ffffffff812c33c2 ffff8800baad2440 00000009d46575c0
    Call Trace:
     [<ffffffff81cad00d>] __dump_stack
     [<ffffffff81cad00d>] dump_stack+0xc1/0x124
     [<ffffffff812c33c2>] warn_slowpath_common+0xe2/0x150
     [<ffffffff812c361e>] warn_slowpath_null+0x2e/0x40
     [<ffffffff828a4347>] tcp_clean_rtx_queue+0x2057/0x2ab0 n
     [<ffffffff828ae6fd>] tcp_ack+0x151d/0x3930
     [<ffffffff828baa09>] tcp_rcv_state_process+0x1c69/0x4fd0
     [<ffffffff828efb7f>] tcp_v4_do_rcv+0x54f/0x7c0
     [<ffffffff8258aacb>] sk_backlog_rcv
     [<ffffffff8258aacb>] __release_sock+0x12b/0x3a0
     [<ffffffff8258ad9e>] release_sock+0x5e/0x1c0
     [<ffffffff8294a785>] inet_wait_for_connect
     [<ffffffff8294a785>] __inet_stream_connect+0x545/0xc50
     [<ffffffff82886f08>] tcp_sendmsg_fastopen
     [<ffffffff82886f08>] tcp_sendmsg+0x2298/0x35a0
     [<ffffffff82952515>] inet_sendmsg+0xe5/0x520
     [<ffffffff8257152f>] sock_sendmsg_nosec
     [<ffffffff8257152f>] sock_sendmsg+0xcf/0x110
    
    Fixes: 8c72c65b426b ("tcp: update skb->skb_mstamp more carefully")
    Fixes: 783237e8daf1 ("net-tcp: Fast Open client - sending SYN-data")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b13bc543b1e64edd5786dda8be614303f55b68f1
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Sat Sep 16 14:02:21 2017 +0200

    net/sched: cls_matchall: fix crash when used with classful qdisc
    
    
    [ Upstream commit 3ff4cbec87da48b0ec1f7b6196607b034de0c680 ]
    
    this script, edited from Linux Advanced Routing and Traffic Control guide
    
    tc q a dev en0 root handle 1: htb default a
    tc c a dev en0 parent 1:  classid 1:1 htb rate 6mbit burst 15k
    tc c a dev en0 parent 1:1 classid 1:a htb rate 5mbit ceil 6mbit burst 15k
    tc c a dev en0 parent 1:1 classid 1:b htb rate 1mbit ceil 6mbit burst 15k
    tc f a dev en0 parent 1:0 prio 1 $clsname $clsargs classid 1:b
    ping $address -c1
    tc -s c s dev en0
    
    classifies traffic to 1:b or 1:a, depending on whether the packet matches
    or not the pattern $clsargs of filter $clsname. However, when $clsname is
    'matchall', a systematic crash can be observed in htb_classify(). HTB and
    classful qdiscs don't assign initial value to struct tcf_result, but then
    they expect it to contain valid values after filters have been run. Thus,
    current 'matchall' ignores the TCA_MATCHALL_CLASSID attribute, configured
    by user, and makes HTB (and classful qdiscs) dereference random pointers.
    
    By assigning head->res to *res in mall_classify(), before the actions are
    invoked, we fix this crash and enable TCA_MATCHALL_CLASSID functionality,
    that had no effect on 'matchall' classifier since its first introduction.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1460213
    Reported-by: Jiri Benc <jbenc@redhat.com>
    Fixes: b87f7936a932 ("net/sched: introduce Match-all classifier")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Acked-by: Yotam Gigi <yotamg@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13c8bd7a21ed3612beb0f2ee02c84b49e883ea32
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Sep 15 15:58:33 2017 +0800

    ip6_tunnel: do not allow loading ip6_tunnel if ipv6 is disabled in cmdline
    
    
    [ Upstream commit 8c22dab03ad072e45060c299c70d02a4f6fc4aab ]
    
    If ipv6 has been disabled from cmdline since kernel started, it makes
    no sense to allow users to create any ip6 tunnel. Otherwise, it could
    some potential problem.
    
    Jianlin found a kernel crash caused by this in ip6_gre when he set
    ipv6.disable=1 in grub:
    
    [  209.588865] Unable to handle kernel paging request for data at address 0x00000080
    [  209.588872] Faulting instruction address: 0xc000000000a3aa6c
    [  209.588879] Oops: Kernel access of bad area, sig: 11 [#1]
    [  209.589062] NIP [c000000000a3aa6c] fib_rules_lookup+0x4c/0x260
    [  209.589071] LR [c000000000b9ad90] fib6_rule_lookup+0x50/0xb0
    [  209.589076] Call Trace:
    [  209.589097] fib6_rule_lookup+0x50/0xb0
    [  209.589106] rt6_lookup+0xc4/0x110
    [  209.589116] ip6gre_tnl_link_config+0x214/0x2f0 [ip6_gre]
    [  209.589125] ip6gre_newlink+0x138/0x3a0 [ip6_gre]
    [  209.589134] rtnl_newlink+0x798/0xb80
    [  209.589142] rtnetlink_rcv_msg+0xec/0x390
    [  209.589151] netlink_rcv_skb+0x138/0x150
    [  209.589159] rtnetlink_rcv+0x48/0x70
    [  209.589169] netlink_unicast+0x538/0x640
    [  209.589175] netlink_sendmsg+0x40c/0x480
    [  209.589184] ___sys_sendmsg+0x384/0x4e0
    [  209.589194] SyS_sendmsg+0xd4/0x140
    [  209.589201] SyS_socketcall+0x3e0/0x4f0
    [  209.589209] system_call+0x38/0xe0
    
    This patch is to return -EOPNOTSUPP in ip6_tunnel_init if ipv6 has been
    disabled from cmdline.
    
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc2fe7a06d6d3b6d9f3a0e1880b98fab0fa88341
Author: Fahad Kunnathadi <fahad.kunnathadi@dexceldesigns.com>
Date:   Fri Sep 15 12:01:58 2017 +0530

    net: phy: Fix mask value write on gmii2rgmii converter speed register
    
    
    [ Upstream commit f2654a4781318dc7ab8d6cde66f1fa39eab980a9 ]
    
    To clear Speed Selection in MDIO control register(0x10),
    ie, clear bits 6 and 13 to zero while keeping other bits same.
    Before AND operation,The Mask value has to be perform with bitwise NOT
    operation (ie, ~ operator)
    
    This patch clears current speed selection before writing the
    new speed settings to gmii2rgmii converter
    
    Fixes: f411a6160bd4 ("net: phy: Add gmiitorgmii converter support")
    
    Signed-off-by: Fahad Kunnathadi <fahad.kunnathadi@dexceldesigns.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e814bae39ad562608361b851ae79cc7edcc35bf7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Sep 15 12:00:07 2017 +0800

    ip6_gre: skb_push ipv6hdr before packing the header in ip6gre_header
    
    
    [ Upstream commit 76cc0d3282d4b933fa144fa41fbc5318e0fdca24 ]
    
    Now in ip6gre_header before packing the ipv6 header, it skb_push t->hlen
    which only includes encap_hlen + tun_hlen. It means greh and inner header
    would be over written by ipv6 stuff and ipv6h might have no chance to set
    up.
    
    Jianlin found this issue when using remote any on ip6_gre, the packets he
    captured on gre dev are truncated:
    
    22:50:26.210866 Out ethertype IPv6 (0x86dd), length 120: truncated-ip6 -\
    8128 bytes missing!(flowlabel 0x92f40, hlim 0, next-header Options (0)  \
    payload length: 8192) ::1:2000:0 > ::1:0:86dd: HBH [trunc] ip-proto-128 \
    8184
    
    It should also skb_push ipv6hdr so that ipv6h points to the right position
    to set ipv6 stuff up.
    
    This patch is to skb_push hlen + sizeof(*ipv6h) and also fix some indents
    in ip6gre_header.
    
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Reported-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0a5af78b530ab5616d6fcde79d28ad57ecaea3e
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Wed Sep 13 19:30:51 2017 -0600

    udpv6: Fix the checksum computation when HW checksum does not apply
    
    
    [ Upstream commit 63ecc3d9436f8012e49dc846d6cb0a85a3433517 ]
    
    While trying an ESP transport mode encryption for UDPv6 packets of
    datagram size 1436 with MTU 1500, checksum error was observed in
    the secondary fragment.
    
    This error occurs due to the UDP payload checksum being missed out
    when computing the full checksum for these packets in
    udp6_hwcsum_outgoing().
    
    Fixes: d39d938c8228 ("ipv6: Introduce udpv6_send_skb()")
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85908ccae5c2510aff7b9ef2e3e859ffa8f8824c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 15 16:47:42 2017 -0700

    tcp: fix data delivery rate
    
    
    [ Upstream commit fc22579917eb7e13433448a342f1cb1592920940 ]
    
    Now skb->mstamp_skb is updated later, we also need to call
    tcp_rate_skb_sent() after the update is done.
    
    Fixes: 8c72c65b426b ("tcp: update skb->skb_mstamp more carefully")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e159492b3c3edeffb9cbfb449efb5e7adfb719f7
Author: Edward Cree <ecree@solarflare.com>
Date:   Fri Sep 15 14:37:38 2017 +0100

    bpf/verifier: reject BPF_ALU64|BPF_END
    
    
    [ Upstream commit e67b8a685c7c984e834e3181ef4619cd7025a136 ]
    
    Neither ___bpf_prog_run nor the JITs accept it.
    Also adds a new test case.
    
    Fixes: 17a5267067f3 ("bpf: verifier (add verifier core)")
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 186a9c5e7038d7e6b39d2f6c96f71056b1bacd8d
Author: Eric Dumazet <edumazet@googl.com>
Date:   Wed Sep 13 20:30:39 2017 -0700

    tcp: update skb->skb_mstamp more carefully
    
    
    [ Upstream commit 8c72c65b426b47b3c166a8fef0d8927fe5e8a28d ]
    
    liujian reported a problem in TCP_USER_TIMEOUT processing with a patch
    in tcp_probe_timer() :
          https://www.spinics.net/lists/netdev/msg454496.html
    
    After investigations, the root cause of the problem is that we update
    skb->skb_mstamp of skbs in write queue, even if the attempt to send a
    clone or copy of it failed. One reason being a routing problem.
    
    This patch prevents this, solving liujian issue.
    
    It also removes a potential RTT miscalculation, since
    __tcp_retransmit_skb() is not OR-ing TCP_SKB_CB(skb)->sacked with
    TCPCB_EVER_RETRANS if a failure happens, but skb->skb_mstamp has
    been changed.
    
    A future ACK would then lead to a very small RTT sample and min_rtt
    would then be lowered to this too small value.
    
    Tested:
    
    # cat user_timeout.pkt
    --local_ip=192.168.102.64
    
        0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
       +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
       +0 bind(3, ..., ...) = 0
       +0 listen(3, 1) = 0
    
       +0 `ifconfig tun0 192.168.102.64/16; ip ro add 192.0.2.1 dev tun0`
    
       +0 < S 0:0(0) win 0 <mss 1460>
       +0 > S. 0:0(0) ack 1 <mss 1460>
    
      +.1 < . 1:1(0) ack 1 win 65530
       +0 accept(3, ..., ...) = 4
    
       +0 setsockopt(4, SOL_TCP, TCP_USER_TIMEOUT, [3000], 4) = 0
       +0 write(4, ..., 24) = 24
       +0 > P. 1:25(24) ack 1 win 29200
       +.1 < . 1:1(0) ack 25 win 65530
    
    //change the ipaddress
       +1 `ifconfig tun0 192.168.0.10/16`
    
       +1 write(4, ..., 24) = 24
       +1 write(4, ..., 24) = 24
       +1 write(4, ..., 24) = 24
       +1 write(4, ..., 24) = 24
    
       +0 `ifconfig tun0 192.168.102.64/16`
       +0 < . 1:2(1) ack 25 win 65530
       +0 `ifconfig tun0 192.168.0.10/16`
    
       +3 write(4, ..., 24) = -1
    
    # ./packetdrill user_timeout.pkt
    
    Signed-off-by: Eric Dumazet <edumazet@googl.com>
    Reported-by: liujian <liujian56@huawei.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b70bb9bb7277aa396eafab6a313ee829c7957587
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Sep 14 02:00:54 2017 +0300

    sctp: potential read out of bounds in sctp_ulpevent_type_enabled()
    
    
    [ Upstream commit fa5f7b51fc3080c2b195fa87c7eca7c05e56f673 ]
    
    This code causes a static checker warning because Smatch doesn't trust
    anything that comes from skb->data.  I've reviewed this code and I do
    think skb->data can be controlled by the user here.
    
    The sctp_event_subscribe struct has 13 __u8 fields and we want to see
    if ours is non-zero.  sn_type can be any value in the 0-USHRT_MAX range.
    We're subtracting SCTP_SN_TYPE_BASE which is 1 << 15 so we could read
    either before the start of the struct or after the end.
    
    This is a very old bug and it's surprising that it would go undetected
    for so long but my theory is that it just doesn't have a big impact so
    it would be hard to notice.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f86d3b1a28a7271774fe4e8a9a028f6b209e1fd3
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Wed Sep 13 17:32:37 2017 +0200

    net: sched: fix use-after-free in tcf_action_destroy and tcf_del_walker
    
    
    [ Upstream commit 255cd50f207ae8ec7b22663246c833407744e634 ]
    
    Recent commit d7fb60b9cafb ("net_sched: get rid of tcfa_rcu") removed
    freeing in call_rcu, which changed already existing hard-to-hit
    race condition into 100% hit:
    
    [  598.599825] BUG: unable to handle kernel NULL pointer dereference at 0000000000000030
    [  598.607782] IP: tcf_action_destroy+0xc0/0x140
    
    Or:
    
    [   40.858924] BUG: unable to handle kernel NULL pointer dereference at 0000000000000030
    [   40.862840] IP: tcf_generic_walker+0x534/0x820
    
    Fix this by storing the ops and use them directly for module_put call.
    
    Fixes: a85a970af265 ("net_sched: move tc_action into tcf_common")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f860ca549de4670e95516d6e7cbbc733a69c63db
Author: Yuval Mintz <yuvalm@mellanox.com>
Date:   Tue Sep 12 08:50:53 2017 +0200

    mlxsw: spectrum: Prevent mirred-related crash on removal
    
    
    [ Upstream commit 6399ebcccffa12e65bc15eda039d37673264ebce ]
    
    When removing the offloading of mirred actions under
    matchall classifiers, mlxsw would find the destination port
    associated with the offloaded action and utilize it for undoing
    the configuration.
    
    Depending on the order by which ports are removed, it's possible that
    the destination port would get removed before the source port.
    In such a scenario, when actions would be flushed for the source port
    mlxsw would perform an illegal dereference as the destination port is
    no longer listed.
    
    Since the only item necessary for undoing the configuration on the
    destination side is the port-id and that in turn is already maintained
    by mlxsw on the source-port, simply stop trying to access the
    destination port and use the port-id directly instead.
    
    Fixes: 763b4b70af ("mlxsw: spectrum: Add support in matchall mirror TC offloading")
    Signed-off-by: Yuval Mintz <yuvalm@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 065af12fd1393cdbfebf735d7a7bcce03e84d807
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 2 14:06:43 2017 +0200

    ALSA: usx2y: Suppress kernel warning at page allocation failures
    
    commit 7682e399485fe19622b6fd82510b1f4551e48a25 upstream.
    
    The usx2y driver allocates the stream read/write buffers in continuous
    pages depending on the stream setup, and this may spew the kernel
    warning messages with a stack trace like:
      WARNING: CPU: 1 PID: 1846 at mm/page_alloc.c:3883
      __alloc_pages_slowpath+0x1ef2/0x2d70
      Modules linked in:
      CPU: 1 PID: 1846 Comm: kworker/1:2 Not tainted
      ....
    
    It may confuse user as if it were any serious error, although this is
    no fatal error and the driver handles the error case gracefully.
    Since the driver has already some sanity check of the given size (128
    and 256 pages), it can't pass any crazy value.  So it's merely page
    fragmentation.
    
    This patch adds __GFP_NOWARN to each caller for suppressing such
    kernel warnings.  The original issue was spotted by syzkaller.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40e219327fd42981dafe817bd1ae88679bea20e7
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Sep 26 09:11:49 2017 +0900

    Revert "ALSA: echoaudio: purge contradictions between dimension matrix members and total number of members"
    
    commit 51db452df07bb4c5754b73789253ba21681d9dc2 upstream.
    
    This reverts commit 275353bb684e to fix a regression which can abort
    'alsactl' program in alsa-utils due to assertion in alsa-lib.
    
    alsactl: control.c:2513: snd_ctl_elem_value_get_integer: Assertion `idx < sizeof(obj->value.integer.value) / sizeof(obj->value.integer.value[0])' failed.
    
    alsactl: control.c:2976: snd_ctl_elem_value_get_integer: Assertion `idx < ARRAY_SIZE(obj->value.integer.value)' failed.
    
    This commit is a band-aid. In a point of usage of ALSA control interface,
    the drivers still bring an issue that they prevent userspace applications
    to have a consistent way to parse each levels of the dimension information
    via ALSA control interface.
    
    Let me investigate this issue. Current implementation of the drivers
    have three control element sets with dimension information:
     * 'Monitor Mixer Volume' (type: integer)
     * 'VMixer Volume' (type: integer)
     * 'VU-meters' (type: boolean)
    
    Although the number of elements named as 'Monitor Mixer Volume' differs
    depending on drivers in this group, it can be calculated by macros
    defined by each driver (= (BX_NUM - BX_ANALOG_IN) * BX_ANALOG_IN). Each
    of the elements has one member for value and has dimension information
    with 2 levels (= BX_ANALOG_IN * (BX_NUM - BX_ANALOG_IN)). For these
    elements, userspace applications are expected to handle the dimension
    information so that all of the elements construct a matrix where the
    number of rows and columns are represented by the dimension information.
    
    The same way is applied to elements named as 'VMixer Volume'. The number
    of these elements can also be calculated by macros defined by each
    drivers (= PX_ANALOG_IN * BX_ANALOG_IN). Each of the element has one
    member for value and has dimension information with 2 levels
    (= BX_ANALOG_IN * PX_ANALOG_IN). All of the elements construct a matrix
    with the dimension information.
    
    An element named as 'VU-meters' gets a different way in a point of
    dimension information. The element includes 96 members for value. The
    element has dimension information with 3 levels (= 3 or 2 * 16 * 2). For
    this element, userspace applications are expected to handle the dimension
    information so that all of the members for value construct a matrix
    where the number of rows and columns are represented by the dimension
    information. This is different from the way for the former.
    
    As a summary, the drivers were not designed to produce a consistent way to
    parse the dimension information. This makes it hard for general userspace
    applications such as amixer to parse the information by a consistent way,
    and actually no userspace applications except for 'echomixer' utilize the
    dimension information. Additionally, no drivers excluding this group use
    the information.
    
    The reverted commit was written based on the latter way. A commit
    860c1994a70a ('ALSA: control: add dimension validator for userspace
    elements') is written based on the latter way, too. The patch should be
    reconsider too in the same time to re-define a consistent way to parse the
    dimension information.
    
    Reported-by: Mark Hills <mark@xwax.org>
    Reported-by: S. Christian Collins <s.chriscollins@gmail.com>
    Fixes: 275353bb684e ('ALSA: echoaudio: purge contradictions between dimension matrix members and total number of members')
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 984b6c96f1e2bf2ccfc7c8755e936185c68f4054
Author: Guneshwor Singh <guneshwor.o.singh@intel.com>
Date:   Thu Sep 14 17:49:40 2017 +0530

    ALSA: compress: Remove unused variable
    
    commit a931b9ce93841a5b66b709ba5a244276e345e63b upstream.
    
    Commit 04c5d5a430fc ("ALSA: compress: Embed struct device") removed
    the statement that used 'str' but didn't remove the variable itself.
    So remove it.
    
    [Adding stable to Cc since pr_debug() may refer to the uninitialized
     buffer -- tiwai]
    
    Fixes: 04c5d5a430fc ("ALSA: compress: Embed struct device")
    Signed-off-by: Guneshwor Singh <guneshwor.o.singh@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88c195d638d3f84e560ea4283b364499e9acb95b
Author: Casey Schaufler <casey@schaufler-ca.com>
Date:   Tue Sep 19 09:39:08 2017 -0700

    lsm: fix smack_inode_removexattr and xattr_getsecurity memleak
    
    commit 57e7ba04d422c3d41c8426380303ec9b7533ded9 upstream.
    
    security_inode_getsecurity() provides the text string value
    of a security attribute. It does not provide a "secctx".
    The code in xattr_getsecurity() that calls security_inode_getsecurity()
    and then calls security_release_secctx() happened to work because
    SElinux and Smack treat the attribute and the secctx the same way.
    It fails for cap_inode_getsecurity(), because that module has no
    secctx that ever needs releasing. It turns out that Smack is the
    one that's doing things wrong by not allocating memory when instructed
    to do so by the "alloc" parameter.
    
    The fix is simple enough. Change the security_release_secctx() to
    kfree() because it isn't a secctx being returned by
    security_inode_getsecurity(). Change Smack to allocate the string when
    told to do so.
    
    Note: this also fixes memory leaks for LSMs which implement
    inode_getsecurity but not release_secctx, such as capabilities.
    
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Reported-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: James Morris <james.l.morris@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c0891295a5a49f63ccb38f9aeed664ce63eb404
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Tue Oct 3 16:16:45 2017 -0700

    lib/ratelimit.c: use deferred printk() version
    
    commit 656d61ce9666209c4c4a13c71902d3ee70d1ff6f upstream.
    
    printk_ratelimit() invokes ___ratelimit() which may invoke a normal
    printk() (pr_warn() in this particular case) to warn about suppressed
    output.  Given that printk_ratelimit() may be called from anywhere, that
    pr_warn() is dangerous - it may end up deadlocking the system.  Fix
    ___ratelimit() by using deferred printk().
    
    Sasha reported the following lockdep error:
    
     : Unregister pv shared memory for cpu 8
     : select_fallback_rq: 3 callbacks suppressed
     : process 8583 (trinity-c78) no longer affine to cpu8
     :
     : ======================================================
     : WARNING: possible circular locking dependency detected
     : 4.14.0-rc2-next-20170927+ #252 Not tainted
     : ------------------------------------------------------
     : migration/8/62 is trying to acquire lock:
     : (&port_lock_key){-.-.}, at: serial8250_console_write()
     :
     : but task is already holding lock:
     : (&rq->lock){-.-.}, at: sched_cpu_dying()
     :
     : which lock already depends on the new lock.
     :
     :
     : the existing dependency chain (in reverse order) is:
     :
     : -> #3 (&rq->lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock()
     : task_fork_fair()
     : sched_fork()
     : copy_process.part.31()
     : _do_fork()
     : kernel_thread()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #2 (&p->pi_lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : try_to_wake_up()
     : default_wake_function()
     : woken_wake_function()
     : __wake_up_common()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #1 (&tty->write_wait){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #0 (&port_lock_key){-.-.}:
     : check_prev_add()
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : serial8250_console_write()
     : univ8250_console_write()
     : console_unlock()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : cpuhp_invoke_callback()
     : take_cpu_down()
     : multi_cpu_stop()
     : cpu_stopper_thread()
     : smpboot_thread_fn()
     : kthread()
     : ret_from_fork()
     :
     : other info that might help us debug this:
     :
     : Chain exists of:
     :   &port_lock_key --> &p->pi_lock --> &rq->lock
     :
     :  Possible unsafe locking scenario:
     :
     :        CPU0                    CPU1
     :        ----                    ----
     :   lock(&rq->lock);
     :                                lock(&p->pi_lock);
     :                                lock(&rq->lock);
     :   lock(&port_lock_key);
     :
     :  *** DEADLOCK ***
     :
     : 4 locks held by migration/8/62:
     : #0: (&p->pi_lock){-.-.}, at: sched_cpu_dying()
     : #1: (&rq->lock){-.-.}, at: sched_cpu_dying()
     : #2: (printk_ratelimit_state.lock){....}, at: ___ratelimit()
     : #3: (console_lock){+.+.}, at: vprintk_emit()
     :
     : stack backtrace:
     : CPU: 8 PID: 62 Comm: migration/8 Not tainted 4.14.0-rc2-next-20170927+ #252
     : Call Trace:
     : dump_stack()
     : print_circular_bug()
     : check_prev_add()
     : ? add_lock_to_list.isra.26()
     : ? check_usage()
     : ? kvm_clock_read()
     : ? kvm_sched_clock_read()
     : ? sched_clock()
     : ? check_preemption_disabled()
     : __lock_acquire()
     : ? __lock_acquire()
     : ? add_lock_to_list.isra.26()
     : ? debug_check_no_locks_freed()
     : ? memcpy()
     : lock_acquire()
     : ? serial8250_console_write()
     : _raw_spin_lock_irqsave()
     : ? serial8250_console_write()
     : serial8250_console_write()
     : ? serial8250_start_tx()
     : ? lock_acquire()
     : ? memcpy()
     : univ8250_console_write()
     : console_unlock()
     : ? __down_trylock_console_sem()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ? show_regs_print_info()
     : ? lock_acquire()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : ? sched_cpu_starting()
     : ? rcutree_dying_cpu()
     : ? sched_cpu_starting()
     : cpuhp_invoke_callback()
     : ? cpu_disable_common()
     : take_cpu_down()
     : ? trace_hardirqs_off_caller()
     : ? cpuhp_invoke_callback()
     : multi_cpu_stop()
     : ? __this_cpu_preempt_check()
     : ? cpu_stop_queue_work()
     : cpu_stopper_thread()
     : ? cpu_stop_create()
     : smpboot_thread_fn()
     : ? sort_range()
     : ? schedule()
     : ? __kthread_parkme()
     : kthread()
     : ? sort_range()
     : ? kthread_create_on_node()
     : ret_from_fork()
     : process 9121 (trinity-c78) no longer affine to cpu8
     : smpboot: CPU 8 is now offline
    
    Link: http://lkml.kernel.org/r/20170928120405.18273-1-sergey.senozhatsky@gmail.com
    Fixes: 6b1d174b0c27b ("ratelimit: extend to print suppressed messages on release")
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reported-by: Sasha Levin <levinsasha928@gmail.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b8197073a0f2c5d14c4e3ed5934b8f6e51eeeb7
Author: Michal Hocko <mhocko@suse.com>
Date:   Tue Oct 3 16:14:50 2017 -0700

    mm, oom_reaper: skip mm structs with mmu notifiers
    
    commit 4d4bbd8526a8fbeb2c090ea360211fceff952383 upstream.
    
    Andrea has noticed that the oom_reaper doesn't invalidate the range via
    mmu notifiers (mmu_notifier_invalidate_range_start/end) and that can
    corrupt the memory of the kvm guest for example.
    
    tlb_flush_mmu_tlbonly already invokes mmu notifiers but that is not
    sufficient as per Andrea:
    
     "mmu_notifier_invalidate_range cannot be used in replacement of
      mmu_notifier_invalidate_range_start/end. For KVM
      mmu_notifier_invalidate_range is a noop and rightfully so. A MMU
      notifier implementation has to implement either ->invalidate_range
      method or the invalidate_range_start/end methods, not both. And if you
      implement invalidate_range_start/end like KVM is forced to do, calling
      mmu_notifier_invalidate_range in common code is a noop for KVM.
    
      For those MMU notifiers that can get away only implementing
      ->invalidate_range, the ->invalidate_range is implicitly called by
      mmu_notifier_invalidate_range_end(). And only those secondary MMUs
      that share the same pagetable with the primary MMU (like AMD iommuv2)
      can get away only implementing ->invalidate_range"
    
    As the callback is allowed to sleep and the implementation is out of
    hand of the MM it is safer to simply bail out if there is an mmu
    notifier registered.  In order to not fail too early make the
    mm_has_notifiers check under the oom_lock and have a little nap before
    failing to give the current oom victim some more time to exit.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Link: http://lkml.kernel.org/r/20170913113427.2291-1-mhocko@kernel.org
    Fixes: aac453635549 ("mm, oom: introduce oom reaper")
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reported-by: Andrea Arcangeli <aarcange@redhat.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a056a1152707567ecfe6a6f26b8414606150936
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Sun Sep 3 19:06:31 2017 +0200

    staging: vchiq_2835_arm: Fix NULL ptr dereference in free_pagelist
    
    commit 974d4d03fc020af4fa4e9e72a86f0fefa37803c5 upstream.
    
    This fixes a NULL pointer dereference on RPi 2 with multi_v7_defconfig.
    The function page_address() could return NULL with enabled CONFIG_HIGHMEM.
    So fix this by using kmap() instead.
    
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Fixes: 71bad7f08641 ("staging: add bcm2708 vchiq driver")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8928c5b2d318cd591d499c94ed4dd5c920f5016f
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Sep 14 16:52:59 2017 +0200

    uwb: ensure that endpoint is interrupt
    
    commit 70e743e4cec3733dc13559f6184b35d358b9ef3f upstream.
    
    hwarc_neep_init() assumes that endpoint 0 is interrupt, but there's no
    check for that, which results in a WARNING in USB core code, when a bad
    USB descriptor is provided from a device:
    
    usb 1-1: BOGUS urb xfer, pipe 1 != type 3
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 3 at drivers/usb/core/urb.c:449 usb_submit_urb+0xf8a/0x11d0
    Modules linked in:
    CPU: 0 PID: 3 Comm: kworker/0:0 Not tainted 4.13.0+ #111
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Workqueue: usb_hub_wq hub_event
    task: ffff88006bdc1a00 task.stack: ffff88006bde8000
    RIP: 0010:usb_submit_urb+0xf8a/0x11d0 drivers/usb/core/urb.c:448
    RSP: 0018:ffff88006bdee3c0 EFLAGS: 00010282
    RAX: 0000000000000029 RBX: ffff8800672a7200 RCX: 0000000000000000
    RDX: 0000000000000029 RSI: ffff88006c815c78 RDI: ffffed000d7bdc6a
    RBP: ffff88006bdee4c0 R08: fffffbfff0fe00ff R09: fffffbfff0fe00ff
    R10: 0000000000000018 R11: fffffbfff0fe00fe R12: 1ffff1000d7bdc7f
    R13: 0000000000000003 R14: 0000000000000001 R15: ffff88006b02cc90
    FS:  0000000000000000(0000) GS:ffff88006c800000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fe4daddf000 CR3: 000000006add6000 CR4: 00000000000006f0
    Call Trace:
     hwarc_neep_init+0x4ce/0x9c0 drivers/uwb/hwa-rc.c:710
     uwb_rc_add+0x2fb/0x730 drivers/uwb/lc-rc.c:361
     hwarc_probe+0x34e/0x9b0 drivers/uwb/hwa-rc.c:858
     usb_probe_interface+0x351/0x8d0 drivers/usb/core/driver.c:361
     really_probe drivers/base/dd.c:385
     driver_probe_device+0x610/0xa00 drivers/base/dd.c:529
     __device_attach_driver+0x230/0x290 drivers/base/dd.c:625
     bus_for_each_drv+0x15e/0x210 drivers/base/bus.c:463
     __device_attach+0x269/0x3c0 drivers/base/dd.c:682
     device_initial_probe+0x1f/0x30 drivers/base/dd.c:729
     bus_probe_device+0x1da/0x280 drivers/base/bus.c:523
     device_add+0xcf9/0x1640 drivers/base/core.c:1703
     usb_set_configuration+0x1064/0x1890 drivers/usb/core/message.c:1932
     generic_probe+0x73/0xe0 drivers/usb/core/generic.c:174
     usb_probe_device+0xaf/0xe0 drivers/usb/core/driver.c:266
     really_probe drivers/base/dd.c:385
     driver_probe_device+0x610/0xa00 drivers/base/dd.c:529
     __device_attach_driver+0x230/0x290 drivers/base/dd.c:625
     bus_for_each_drv+0x15e/0x210 drivers/base/bus.c:463
     __device_attach+0x269/0x3c0 drivers/base/dd.c:682
     device_initial_probe+0x1f/0x30 drivers/base/dd.c:729
     bus_probe_device+0x1da/0x280 drivers/base/bus.c:523
     device_add+0xcf9/0x1640 drivers/base/core.c:1703
     usb_new_device+0x7b8/0x1020 drivers/usb/core/hub.c:2457
     hub_port_connect drivers/usb/core/hub.c:4890
     hub_port_connect_change drivers/usb/core/hub.c:4996
     port_event drivers/usb/core/hub.c:5102
     hub_event+0x23c8/0x37c0 drivers/usb/core/hub.c:5182
     process_one_work+0x9fb/0x1570 kernel/workqueue.c:2097
     worker_thread+0x1e4/0x1350 kernel/workqueue.c:2231
     kthread+0x324/0x3f0 kernel/kthread.c:231
     ret_from_fork+0x25/0x30 arch/x86/entry/entry_64.S:425
    Code: 48 8b 85 30 ff ff ff 48 8d b8 98 00 00 00 e8 8e 93 07 ff 45 89
    e8 44 89 f1 4c 89 fa 48 89 c6 48 c7 c7 a0 e5 55 86 e8 20 08 8f fd <0f>
    ff e9 9b f7 ff ff e8 4a 04 d6 fd e9 80 f7 ff ff e8 60 11 a6
    ---[ end trace 55d741234124cfc3 ]---
    
    Check that endpoint is interrupt.
    
    Found by syzkaller.
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ff7adb930d4a62f43dfc76220a988a043c510ff
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Sep 14 14:30:55 2017 +0200

    uwb: properly check kthread_run return value
    
    commit bbf26183b7a6236ba602f4d6a2f7cade35bba043 upstream.
    
    uwbd_start() calls kthread_run() and checks that the return value is
    not NULL. But the return value is not NULL in case kthread_run() fails,
    it takes the form of ERR_PTR(-EINTR).
    
    Use IS_ERR() instead.
    
    Also add a check to uwbd_stop().
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec8a7153bbf3742658ca71ab536505254d04cabd
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue Aug 22 15:33:00 2017 +0200

    iio: adc: mcp320x: Fix oops on module unload
    
    commit 0964e40947a630a2a6f724e968246992f97bcf1c upstream.
    
    The driver calls spi_get_drvdata() in its ->remove hook even though it
    has never called spi_set_drvdata().  Stack trace for posterity:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000220
    Internal error: Oops: 5 [#1] SMP ARM
    [<8072f564>] (mutex_lock) from [<7f1400d0>] (iio_device_unregister+0x24/0x7c [industrialio])
    [<7f1400d0>] (iio_device_unregister [industrialio]) from [<7f15e020>] (mcp320x_remove+0x20/0x30 [mcp320x])
    [<7f15e020>] (mcp320x_remove [mcp320x]) from [<8055a8cc>] (spi_drv_remove+0x2c/0x44)
    [<8055a8cc>] (spi_drv_remove) from [<805087bc>] (__device_release_driver+0x98/0x134)
    [<805087bc>] (__device_release_driver) from [<80509180>] (driver_detach+0xdc/0xe0)
    [<80509180>] (driver_detach) from [<8050823c>] (bus_remove_driver+0x5c/0xb0)
    [<8050823c>] (bus_remove_driver) from [<80509ab0>] (driver_unregister+0x38/0x58)
    [<80509ab0>] (driver_unregister) from [<7f15e69c>] (mcp320x_driver_exit+0x14/0x1c [mcp320x])
    [<7f15e69c>] (mcp320x_driver_exit [mcp320x]) from [<801a78d0>] (SyS_delete_module+0x184/0x1d0)
    [<801a78d0>] (SyS_delete_module) from [<80108100>] (ret_fast_syscall+0x0/0x1c)
    
    Fixes: f5ce4a7a9291 ("iio: adc: add driver for MCP3204/08 12-bit ADC")
    Cc: Oskar Andero <oskar.andero@gmail.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1daa7c5aba21b63bb0a6135b0cb4213ef383658e
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue Aug 22 15:33:00 2017 +0200

    iio: adc: mcp320x: Fix readout of negative voltages
    
    commit e6f4794371ee7cce1339e7ca9542f1e703c5f84a upstream.
    
    Commit f686a36b4b79 ("iio: adc: mcp320x: Add support for mcp3301")
    returns a signed voltage from mcp320x_adc_conversion() but neglects that
    the caller interprets a negative return value as failure.  Only mcp3301
    (and the upcoming mcp3550/1/3) is affected as the other chips are
    incapable of measuring negative voltages.
    
    Fix and while at it, add mcp3301 to the list of supported chips at the
    top of the file.
    
    Fixes: f686a36b4b79 ("iio: adc: mcp320x: Add support for mcp3301")
    Cc: Andrea Galbusera <gizero@gmail.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b97d5b67e9ee4394d52a7b63086a4400d7dbf5a
Author: Dragos Bogdan <dragos.bogdan@analog.com>
Date:   Tue Sep 5 15:16:13 2017 +0300

    iio: ad7793: Fix the serial interface reset
    
    commit 7ee3b7ebcb74714df6d94c8f500f307e1ee5dda5 upstream.
    
    The serial interface can be reset by writing 32 consecutive 1s to the device.
    'ret' was initialized correctly but its value was overwritten when
    ad7793_check_platform_data() was called. Since a dedicated reset function
    is present now, it should be used instead.
    
    Fixes: 2edb769d246e ("iio:ad7793: Add support for the ad7798 and ad7799")
    Signed-off-by: Dragos Bogdan <dragos.bogdan@analog.com>
    Acked-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0865d60f3a54bd66356026c83cfa9ec564b18e3
Author: Colin Parker <colin.parker@aclima.io>
Date:   Mon Aug 28 16:21:39 2017 -0700

    IIO: BME280: Updates to Humidity readings need ctrl_reg write!
    
    commit 4b1f0c31f96c45e8521dd84aae50f2aa4aecfb7b upstream.
    
    The ctrl_reg register needs to be written after any write to
    the humidity registers. The value written to the ctrl_reg register
    does not necessarily need to change, but a write operation must
    occur.
    
    The regmap_update_bits functions will not write to a register
    if the register value matches the value to be written. This saves
    unnecessary bus operations.  The change in this patch forces a bus
    write during the chip_config operation by switching to
    regmap_write_bits.
    
    This will fix issues where the Humidity Sensor Oversampling bits
    are not updated after initialization.
    
    Signed-off-by: Colin Parker <colin.parker@aclima.io>
    Acked-by: Andreas Klinger <ak@it-klinger.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9af1bd5e705a5a9dbeff42bab077afe3ba881968
Author: Matt Fornero <matt.fornero@mathworks.com>
Date:   Tue Sep 5 16:34:10 2017 +0200

    iio: core: Return error for failed read_reg
    
    commit 3d62c78a6eb9a7d67bace9622b66ad51e81c5f9b upstream.
    
    If an IIO device returns an error code for a read access via debugfs, it
    is currently ignored by the IIO core (other than emitting an error
    message). Instead, return this error code to user space, so upper layers
    can detect it correctly.
    
    Signed-off-by: Matt Fornero <matt.fornero@mathworks.com>
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8edd1ce3e56b4a383d60273d008d35d70e367956
Author: Stefan Popa <stefan.popa@analog.com>
Date:   Thu Sep 14 16:50:28 2017 +0300

    staging: iio: ad7192: Fix - use the dedicated reset function avoiding dma from stack.
    
    commit f790923f146140a261ad211e5baf75d169f16fb2 upstream.
    
    Depends on: 691c4b95d1 ("iio: ad_sigma_delta: Implement a dedicated reset function")
    
    SPI host drivers can use DMA to transfer data, so the buffer should be properly allocated.
    Keeping it on the stack could cause an undefined behavior.
    
    The dedicated reset function solves this issue.
    
    Signed-off-by: Stefan Popa <stefan.popa@analog.com>
    Acked-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f266a130329fb1bcc61fbffeb7dfe847c157f4b
Author: Dragos Bogdan <dragos.bogdan@analog.com>
Date:   Tue Sep 5 15:14:45 2017 +0300

    iio: ad_sigma_delta: Implement a dedicated reset function
    
    commit 7fc10de8d49a748c476532c9d8e8fe19e548dd67 upstream.
    
    Since most of the SD ADCs have the option of reseting the serial
    interface by sending a number of SCLKs with CS = 0 and DIN = 1,
    a dedicated function that can do this is usefull.
    
    Needed for the patch:  iio: ad7793: Fix the serial interface reset
    Signed-off-by: Dragos Bogdan <dragos.bogdan@analog.com>
    Acked-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2002c92ffb3c378e4d0066d3fddb045acd939b9
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Sep 23 08:06:19 2017 +0200

    iio: adc: twl4030: Disable the vusb3v1 rugulator in the error handling path of 'twl4030_madc_probe()'
    
    commit 7f70be6e4025db0551e6863e7eb9cca07122695c upstream.
    
    Commit 7cc97d77ee8a has introduced a call to 'regulator_disable()' in the
    .remove function.
    So we should also have such a call in the .probe function in case of
    error after a successful 'regulator_enable()' call.
    
    Add a new label for that and use it.
    
    Fixes: 7cc97d77ee8a ("iio: adc: twl4030: Fix ADC[3:6] readings")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab67661467857103cfd44b6c750d3dc9fb355cad
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Sep 23 08:06:18 2017 +0200

    iio: adc: twl4030: Fix an error handling path in 'twl4030_madc_probe()'
    
    commit 245a396a9b1a67ac5c3228737c261b3e48708a2a upstream.
    
    If 'devm_regulator_get()' fails, we should go through the existing error
    handling path instead of returning directly, as done is all the other
    error handling paths in this function.
    
    Fixes: 7cc97d77ee8a ("iio: adc: twl4030: Fix ADC[3:6] readings")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a13481f8cdca4e3f08d950e230f49742d95fc70c
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Mon Sep 18 17:39:19 2017 +0300

    Revert "xhci: Limit USB2 port wake support for AMD Promontory hosts"
    
    commit bcd6a7aa13800afc1418e6b29d944d882214939a upstream.
    
    This reverts commit dec08194ffeccfa1cf085906b53d301930eae18f.
    
    Commit dec08194ffec ("xhci: Limit USB2 port wake support for AMD Promontory
    hosts") makes all high speed USB ports on ASUS PRIME B350M-A cease to
    function after enabling runtime PM.
    
    All boards with this chipsets will be affected, so revert the commit.
    
    The original patch was added to stable 4.9, 4.11 and 4.12 and needs
    to reverted from there as well
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f77615db8ae850ef196843502b1d0aaae8e173d2
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon Sep 18 17:39:18 2017 +0300

    xhci: set missing SuperSpeedPlus Link Protocol bit in roothub descriptor
    
    commit 7bea22b124d77845c85a62eaa29a85ba6cc2f899 upstream.
    
    A SuperSpeedPlus roothub needs to have the Link Protocol (LP) bit set in
    the bmSublinkSpeedAttr[] entry of a SuperSpeedPlus descriptor.
    
    If the xhci controller has an optional Protocol Speed ID (PSI) table then
    that will be used as a base to create the roothub SuperSpeedPlus
    descriptor.
    The PSI table does not however necessary contain the LP bit so we need
    to set it manually.
    
    Check the psi speed and set LP bit if speed is 10Gbps or higher.
    We're not setting it for 5 to 10Gbps as USB 3.1 specification always
    mention SuperSpeedPlus for 10Gbps or higher, and some SSIC USB 3.0 speeds
    can be over 5Gbps, such as SSIC-G3B-L1 at 5830 Mbps
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1a04773d773900cd2f670b18c20c86a4218420f
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon Sep 18 17:39:17 2017 +0300

    xhci: Fix sleeping with spin_lock_irq() held in ASmedia 1042A workaround
    
    commit 4ec1cd3eeeee7ccc35681270da028dbc29ca7bbd upstream.
    
    The flow control workaround for ASM1042A xHC hosts sleeps between
    register polling. The workaround gets called in several places, among
    them with spin_lock_irq() held when xHC host is resumed or hoplug removed.
    
    This was noticed as kernel panics at resume on a Dell XPS15 9550 with
    TB16 thunderbolt dock.
    
    Avoid sleeping with spin_lock_irq() held, use udelay() instead
    
    The original workaround was added to 4.9 and 4.12 stable releases,
    this patch needs to be applied to those as well.
    
    Fixes: 9da5a1092b13 ("xhci: Bad Ethernet performance plugged in ASM1042A host")
    Reported-by: Jose Marino <marinoj@nso.edu>
    Tested-by: Jose Marino <marinoj@nso.edu>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67e752e1d60f9f40b8391dad48f7c842bdba6ec4
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon Sep 18 17:39:13 2017 +0300

    xhci: fix finding correct bus_state structure for USB 3.1 hosts
    
    commit 5a838a13c9b4e5dd188b7a6eaeb894e9358ead0c upstream.
    
    xhci driver keeps a bus_state structure for each hcd (usb2 and usb3)
    
    The structure is picked based on hcd speed, but driver only compared
    for HCD_USB3 speed, returning the wrong bus_state for HCD_USB31 hosts.
    
    This caused null pointer dereference errors in bus_resume function.
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6d4ce2e8b653ff7facde0d0051663fa4cf57b78
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Sep 19 15:07:17 2017 +0200

    USB: fix out-of-bounds in usb_set_configuration
    
    commit bd7a3fe770ebd8391d1c7d072ff88e9e76d063eb upstream.
    
    Andrey Konovalov reported a possible out-of-bounds problem for a USB interface
    association descriptor.  He writes:
            It seems there's no proper size check of a USB_DT_INTERFACE_ASSOCIATION
            descriptor. It's only checked that the size is >= 2 in
            usb_parse_configuration(), so find_iad() might do out-of-bounds access
            to intf_assoc->bInterfaceCount.
    
    And he's right, we don't check for crazy descriptors of this type very well, so
    resolve this problem.  Yet another issue found by syzkaller...
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43feb29db4c5233fd77eedd57b4f2a53c9db9eff
Author: Dmitry Fleytman <dmitry@daynix.com>
Date:   Tue Sep 5 11:40:56 2017 +0300

    usb: Increase quirk delay for USB devices
    
    commit b2a542bbb3081dbd64acc8929c140d196664c406 upstream.
    
    Commit e0429362ab15
    ("usb: Add device quirk for Logitech HD Pro Webcams C920 and C930e")
    introduced quirk to workaround an issue with some Logitech webcams.
    
    The workaround is introducing delay for some USB operations.
    
    According to our testing, delay introduced by original commit
    is not long enough and in rare cases we still see issues described
    by the aforementioned commit.
    
    This patch increases delays introduced by original commit.
    Having this patch applied we do not see those problems anymore.
    
    Signed-off-by: Dmitry Fleytman <dmitry@daynix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 767f7a2cf33a135fe3f57010b51c3f6e92d7677d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Sep 21 16:58:48 2017 +0200

    USB: core: harden cdc_parse_cdc_header
    
    commit 2e1c42391ff2556387b3cb6308b24f6f65619feb upstream.
    
    Andrey Konovalov reported a possible out-of-bounds problem for the
    cdc_parse_cdc_header function.  He writes:
            It looks like cdc_parse_cdc_header() doesn't validate buflen
            before accessing buffer[1], buffer[2] and so on. The only check
            present is while (buflen > 0).
    
    So fix this issue up by properly validating the buffer length matches
    what the descriptor says it is.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d77606e93d819ad4b8f57511ff61a629ced49750
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Sep 22 11:56:49 2017 -0400

    USB: uas: fix bug in handling of alternate settings
    
    commit 786de92b3cb26012d3d0f00ee37adf14527f35c4 upstream.
    
    The uas driver has a subtle bug in the way it handles alternate
    settings.  The uas_find_uas_alt_setting() routine returns an
    altsetting value (the bAlternateSetting number in the descriptor), but
    uas_use_uas_driver() then treats that value as an index to the
    intf->altsetting array, which it isn't.
    
    Normally this doesn't cause any problems because the various
    alternate settings have bAlternateSetting values 0, 1, 2, ..., so the
    value is equal to the index in the array.  But this is not guaranteed,
    and Andrey Konovalov used the syzkaller fuzzer with KASAN to get a
    slab-out-of-bounds error by violating this assumption.
    
    This patch fixes the bug by making uas_find_uas_alt_setting() return a
    pointer to the altsetting entry rather than either the value or the
    index.  Pointers are less subject to misinterpretation.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    CC: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da785bb64fa661f5081b5c0351b798396b6071a6
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 13:22:00 2017 -0400

    USB: g_mass_storage: Fix deadlock when driver is unbound
    
    commit 1fbbb78f25d1291274f320462bf6908906f538db upstream.
    
    As a holdover from the old g_file_storage gadget, the g_mass_storage
    legacy gadget driver attempts to unregister itself when its main
    operating thread terminates (if it hasn't been unregistered already).
    This is not strictly necessary; it was never more than an attempt to
    have the gadget fail cleanly if something went wrong and the main
    thread was killed.
    
    However, now that the UDC core manages gadget drivers independently of
    UDC drivers, this scheme doesn't work any more.  A simple test:
    
            modprobe dummy-hcd
            modprobe g-mass-storage file=...
            rmmod dummy-hcd
    
    ends up in a deadlock with the following backtrace:
    
     sysrq: SysRq : Show Blocked State
       task                PC stack   pid father
     file-storage    D    0  1130      2 0x00000000
     Call Trace:
      __schedule+0x53e/0x58c
      schedule+0x6e/0x77
      schedule_preempt_disabled+0xd/0xf
      __mutex_lock.isra.1+0x129/0x224
      ? _raw_spin_unlock_irqrestore+0x12/0x14
      __mutex_lock_slowpath+0x12/0x14
      mutex_lock+0x28/0x2b
      usb_gadget_unregister_driver+0x29/0x9b [udc_core]
      usb_composite_unregister+0x10/0x12 [libcomposite]
      msg_cleanup+0x1d/0x20 [g_mass_storage]
      msg_thread_exits+0xd/0xdd7 [g_mass_storage]
      fsg_main_thread+0x1395/0x13d6 [usb_f_mass_storage]
      ? __schedule+0x573/0x58c
      kthread+0xd9/0xdb
      ? do_set_interface+0x25c/0x25c [usb_f_mass_storage]
      ? init_completion+0x1e/0x1e
      ret_from_fork+0x19/0x24
     rmmod           D    0  1155    683 0x00000000
     Call Trace:
      __schedule+0x53e/0x58c
      schedule+0x6e/0x77
      schedule_timeout+0x26/0xbc
      ? __schedule+0x573/0x58c
      do_wait_for_common+0xb3/0x128
      ? usleep_range+0x81/0x81
      ? wake_up_q+0x3f/0x3f
      wait_for_common+0x2e/0x45
      wait_for_completion+0x17/0x19
      fsg_common_put+0x34/0x81 [usb_f_mass_storage]
      fsg_free_inst+0x13/0x1e [usb_f_mass_storage]
      usb_put_function_instance+0x1a/0x25 [libcomposite]
      msg_unbind+0x2a/0x42 [g_mass_storage]
      __composite_unbind+0x4a/0x6f [libcomposite]
      composite_unbind+0x12/0x14 [libcomposite]
      usb_gadget_remove_driver+0x4f/0x77 [udc_core]
      usb_del_gadget_udc+0x52/0xcc [udc_core]
      dummy_udc_remove+0x27/0x2c [dummy_hcd]
      platform_drv_remove+0x1d/0x31
      device_release_driver_internal+0xe9/0x16d
      device_release_driver+0x11/0x13
      bus_remove_device+0xd2/0xe2
      device_del+0x19f/0x221
      ? selinux_capable+0x22/0x27
      platform_device_del+0x21/0x63
      platform_device_unregister+0x10/0x1a
      cleanup+0x20/0x817 [dummy_hcd]
      SyS_delete_module+0x10c/0x197
      ? ____fput+0xd/0xf
      ? task_work_run+0x55/0x62
      ? prepare_exit_to_usermode+0x65/0x75
      do_fast_syscall_32+0x86/0xc3
      entry_SYSENTER_32+0x4e/0x7c
    
    What happens is that removing the dummy-hcd driver causes the UDC core
    to unbind the gadget driver, which it does while holding the udc_lock
    mutex.  The unbind routine in g_mass_storage tells the main thread to
    exit and waits for it to terminate.
    
    But as mentioned above, when the main thread exits it tries to
    unregister the mass-storage function driver.  Via the composite
    framework this ends up calling usb_gadget_unregister_driver(), which
    tries to acquire the udc_lock mutex.  The result is deadlock.
    
    The simplest way to fix the problem is not to be so clever: The main
    thread doesn't have to unregister the function driver.  The side
    effects won't be so terrible; if the gadget is still attached to a USB
    host when the main thread is killed, it will appear to the host as
    though the gadget's firmware has crashed -- a reasonably accurate
    interpretation, and an all-too-common occurrence for USB mass-storage
    devices.
    
    In fact, the code to unregister the driver when the main thread exits
    is specific to g-mass-storage; it is not used when f-mass-storage is
    included as a function in a larger composite device.  Therefore the
    entire mechanism responsible for this (the fsg_operations structure
    with its ->thread_exits method, the fsg_common_set_ops() routine, and
    the msg_thread_exits() callback routine) can all be eliminated.  Even
    the msg_registered bitflag can be removed, because now the driver is
    unregistered in only one place rather than in two places.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b5c7b95ea36521e7cb4f93be546a8be5fd9d667
Author: Li Jun <jun.li@nxp.com>
Date:   Fri Apr 14 19:12:07 2017 +0800

    usb: gadget: mass_storage: set msg_registered after msg registered
    
    commit 8e55d30322c6a0ef746c256a1beda9c73ecb27a6 upstream.
    
    If there is no UDC available, the msg register will fail and this
    flag will not be set, but the driver is already added into pending
    driver list, then the module removal modprobe -r can not remove
    the driver from the pending list.
    
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77a4be89599c587f8b1ac6256ad7dc11a8ce28fa
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Sep 22 23:43:46 2017 +0300

    USB: devio: Don't corrupt user memory
    
    commit fa1ed74eb1c233be6131ec92df21ab46499a15b6 upstream.
    
    The user buffer has "uurb->buffer_length" bytes.  If the kernel has more
    information than that, we should truncate it instead of writing past
    the end of the user's buffer.  I added a WARN_ONCE() to help the user
    debug the issue.
    
    Reported-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e39b17143a5b5aac81f066d455e5d3a9877eb3ae
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 26 15:15:49 2017 -0400

    USB: dummy-hcd: Fix erroneous synchronization change
    
    commit 7dbd8f4cabd96db5a50513de9d83a8105a5ffc81 upstream.
    
    A recent change to the synchronization in dummy-hcd was incorrect.
    The issue was that dummy_udc_stop() contained no locking and therefore
    could race with various gadget driver callbacks, and the fix was to
    add locking and issue the callbacks with the private spinlock held.
    
    UDC drivers aren't supposed to do this.  Gadget driver callback
    routines are allowed to invoke functions in the UDC driver, and these
    functions will generally try to acquire the private spinlock.  This
    would deadlock the driver.
    
    The correct solution is to drop the spinlock before issuing callbacks,
    and avoid races by emulating the synchronize_irq() call that all real
    UDC drivers must perform in their ->udc_stop() routines after
    disabling interrupts.  This involves adding a flag to dummy-hcd's
    private structure to keep track of whether interrupts are supposed to
    be enabled, and adding a counter to keep track of ongoing callbacks so
    that dummy_udc_stop() can wait for them all to finish.
    
    A real UDC driver won't receive disconnect, reset, suspend, resume, or
    setup events once it has disabled interrupts.  dummy-hcd will receive
    them but won't try to issue any gadget driver callbacks, which should
    be just as good.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: f16443a034c7 ("USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks")
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 795f5501b95cf1898d9fc831fef7d451d7cfea8f
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 26 15:15:40 2017 -0400

    USB: dummy-hcd: fix infinite-loop resubmission bug
    
    commit 0173a68bfb0ad1c72a6ee39cc485aa2c97540b98 upstream.
    
    The dummy-hcd HCD/UDC emulator tries not to do too much work during
    each timer interrupt.  But it doesn't try very hard; currently all
    it does is limit the total amount of bulk data transferred.  Other
    transfer types aren't limited, and URBs that transfer no data (because
    of an error, perhaps) don't count toward the limit, even though on a
    real USB bus they would consume at least a minimum overhead.
    
    This means it's possible to get the driver stuck in an infinite loop,
    for example, if the host class driver resubmits an URB every time it
    completes (which is common for interrupt URBs).  Each time the URB is
    resubmitted it gets added to the end of the pending-URBs list, and
    dummy-hcd doesn't stop until that list is empty.  Andrey Konovalov was
    able to trigger this failure mode using the syzkaller fuzzer.
    
    This patch fixes the infinite-loop problem by restricting the URBs
    handled during each timer interrupt to those that were already on the
    pending list when the interrupt routine started.  Newly added URBs
    won't be processed until the next timer interrupt.  The problem of
    properly accounting for non-bulk bandwidth (as well as packet and
    transaction overhead) is not addressed here.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5effe995310e8c291769661600ec1488a35b66e2
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Sep 26 15:15:22 2017 -0400

    USB: dummy-hcd: fix connection failures (wrong speed)
    
    commit fe659bcc9b173bcfdd958ce2aec75e47651e74e1 upstream.
    
    The dummy-hcd UDC driver is not careful about the way it handles
    connection speeds.  It ignores the module parameter that is supposed
    to govern the maximum connection speed and it doesn't set the HCD
    flags properly for the case where it ends up running at full speed.
    
    The result is that in many cases, gadget enumeration over dummy-hcd
    fails because the bMaxPacketSize byte in the device descriptor is set
    incorrectly.  For example, the default settings call for a high-speed
    connection, but the maxpacket value for ep0 ends up being set for a
    Super-Speed connection.
    
    This patch fixes the problem by initializing the gadget's max_speed
    and the HCD flags correctly.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12071de6c37d04803531638adf32d270410b7cb7
Author: Bjørn Mork <bjorn@mork.no>
Date:   Fri Sep 22 22:18:18 2017 +0200

    USB: cdc-wdm: ignore -EPIPE from GetEncapsulatedResponse
    
    commit 8fec9355a968ad240f3a2e9ad55b823cf1cc52ff upstream.
    
    The driver will forward errors to userspace after turning most of them
    into -EIO. But all status codes are not equal. The -EPIPE (stall) in
    particular can be seen more as a result of normal USB signaling than
    an actual error. The state is automatically cleared by the USB core
    without intervention from either driver or userspace.
    
    And most devices and firmwares will never trigger a stall as a result
    of GetEncapsulatedResponse. This is in fact a requirement for CDC WDM
    devices. Quoting from section 7.1 of the CDC WMC spec revision 1.1:
    
      The function shall not return STALL in response to
      GetEncapsulatedResponse.
    
    But this driver is also handling GetEncapsulatedResponse on behalf of
    the qmi_wwan and cdc_mbim drivers. Unfortunately the relevant specs
    are not as clear wrt stall. So some QMI and MBIM devices *will*
    occasionally stall, causing the GetEncapsulatedResponse to return an
    -EPIPE status. Translating this into -EIO for userspace has proven to
    be harmful. Treating it as an empty read is safer, making the driver
    behave as if the device was conforming to the CDC WDM spec.
    
    There have been numerous reports of issues related to -EPIPE errors
    from some newer CDC MBIM devices in particular, like for example the
    Fibocom L831-EAU.  Testing on this device has shown that the issues
    go away if we simply ignore the -EPIPE status.  Similar handling of
    -EPIPE is already known from e.g. usb_get_string()
    
    The -EPIPE log message is still kept to let us track devices with this
    unexpected behaviour, hoping that it attracts attention from firmware
    developers.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=100938
    Reported-and-tested-by: Christian Ehrig <christian.ehrig@mediamarktsaturn-bt.com>
    Reported-and-tested-by: Patrick Chilton <chpatrick@gmail.com>
    Reported-and-tested-by: Andreas Böhler <news@aboehler.at>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b104f92ed217a2e47a832928f23dd807eeebcd6
Author: Jim Dickerson <jim.dickerson@hpe.com>
Date:   Mon Sep 18 17:39:14 2017 +0300

    usb: pci-quirks.c: Corrected timeout values used in handshake
    
    commit 114ec3a6f9096d211a4aff4277793ba969a62c73 upstream.
    
    Servers were emitting failed handoff messages but were not
    waiting the full 1 second as designated in section 4.22.1 of
    the eXtensible Host Controller Interface specifications. The
    handshake was using wrong units so calls were made with milliseconds
    not microseconds. Comments referenced 5 seconds not 1 second as
    in specs.
    
    The wrong units were also corrected in a second handshake call.
    
    Signed-off-by: Jim Dickerson <jim.dickerson@hpe.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37b6d898388e78d92a13a8ab50c960d507c968d1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Sep 22 16:18:53 2017 +0200

    ALSA: usb-audio: Check out-of-bounds access by corrupted buffer descriptor
    
    commit bfc81a8bc18e3c4ba0cbaa7666ff76be2f998991 upstream.
    
    When a USB-audio device receives a maliciously adjusted or corrupted
    buffer descriptor, the USB-audio driver may access an out-of-bounce
    value at its parser.  This was detected by syzkaller, something like:
    
      BUG: KASAN: slab-out-of-bounds in usb_audio_probe+0x27b2/0x2ab0
      Read of size 1 at addr ffff88006b83a9e8 by task kworker/0:1/24
      CPU: 0 PID: 24 Comm: kworker/0:1 Not tainted 4.14.0-rc1-42251-gebb2c2437d80 #224
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      Workqueue: usb_hub_wq hub_event
      Call Trace:
       __dump_stack lib/dump_stack.c:16
       dump_stack+0x292/0x395 lib/dump_stack.c:52
       print_address_description+0x78/0x280 mm/kasan/report.c:252
       kasan_report_error mm/kasan/report.c:351
       kasan_report+0x22f/0x340 mm/kasan/report.c:409
       __asan_report_load1_noabort+0x19/0x20 mm/kasan/report.c:427
       snd_usb_create_streams sound/usb/card.c:248
       usb_audio_probe+0x27b2/0x2ab0 sound/usb/card.c:605
       usb_probe_interface+0x35d/0x8e0 drivers/usb/core/driver.c:361
       really_probe drivers/base/dd.c:413
       driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
       __device_attach_driver+0x230/0x290 drivers/base/dd.c:653
       bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
       __device_attach+0x26e/0x3d0 drivers/base/dd.c:710
       device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
       bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
       device_add+0xd0b/0x1660 drivers/base/core.c:1835
       usb_set_configuration+0x104e/0x1870 drivers/usb/core/message.c:1932
       generic_probe+0x73/0xe0 drivers/usb/core/generic.c:174
       usb_probe_device+0xaf/0xe0 drivers/usb/core/driver.c:266
       really_probe drivers/base/dd.c:413
       driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
       __device_attach_driver+0x230/0x290 drivers/base/dd.c:653
       bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
       __device_attach+0x26e/0x3d0 drivers/base/dd.c:710
       device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
       bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
       device_add+0xd0b/0x1660 drivers/base/core.c:1835
       usb_new_device+0x7b8/0x1020 drivers/usb/core/hub.c:2457
       hub_port_connect drivers/usb/core/hub.c:4903
       hub_port_connect_change drivers/usb/core/hub.c:5009
       port_event drivers/usb/core/hub.c:5115
       hub_event+0x194d/0x3740 drivers/usb/core/hub.c:5195
       process_one_work+0xc7f/0x1db0 kernel/workqueue.c:2119
       worker_thread+0x221/0x1850 kernel/workqueue.c:2253
       kthread+0x3a1/0x470 kernel/kthread.c:231
       ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    
    This patch adds the checks of out-of-bounce accesses at appropriate
    places and bails out when it goes out of the given buffer.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb5df140ca299b3492327ba015b1f231399a1b1f
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Sep 27 18:47:13 2017 +0900

    usb: renesas_usbhs: fix usbhsf_fifo_clear() for RX direction
    
    commit 0a2ce62b61f2c76d0213edf4e37aaf54a8ddf295 upstream.
    
    This patch fixes an issue that the usbhsf_fifo_clear() is possible
    to cause 10 msec delay if the pipe is RX direction and empty because
    the FRDY bit will never be set to 1 in such case.
    
    Fixes: e8d548d54968 ("usb: renesas_usbhs: fifo became independent from pipe.")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4661c9b526c3801827c9456a635671fd98c8e7ed
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Sep 27 18:47:12 2017 +0900

    usb: renesas_usbhs: fix the BCLR setting condition for non-DCP pipe
    
    commit 6124607acc88fffeaadf3aacfeb3cc1304c87387 upstream.
    
    This patch fixes an issue that the driver sets the BCLR bit of
    {C,Dn}FIFOCTR register to 1 even when it's non-DCP pipe and
    the FRDY bit of {C,Dn}FIFOCTR register is set to 1.
    
    Fixes: e8d548d54968 ("usb: renesas_usbhs: fifo became independent from pipe.")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 760d0f10410aa41d228d4dd580d4892ca902dff0
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 16:02:05 2017 -0400

    usb-storage: fix bogus hardware error messages for ATA pass-thru devices
    
    commit a4fd4a724d6c30ad671046d83be2e9be2f11d275 upstream.
    
    Ever since commit a621bac3044e ("scsi_lib: correctly retry failed zero
    length REQ_TYPE_FS commands"), people have been getting bogus error
    messages for USB disk drives using ATA pass-thru.  For example:
    
    [ 1344.880193] sd 6:0:0:0: [sdb] Attached SCSI disk
    [ 1345.069152] sd 6:0:0:0: [sdb] tag#0 FAILED Result: hostbyte=DID_ERROR driverbyte=DRIVER_SENSE
    [ 1345.069159] sd 6:0:0:0: [sdb] tag#0 Sense Key : Hardware Error [current] [descriptor]
    [ 1345.069162] sd 6:0:0:0: [sdb] tag#0 Add. Sense: No additional sense information
    [ 1345.069168] sd 6:0:0:0: [sdb] tag#0 CDB: ATA command pass through(16) 85 06 20 00 00 00 00 00 00 00 00 00 00 00 e5 00
    [ 1345.172252] sd 6:0:0:0: [sdb] tag#0 FAILED Result: hostbyte=DID_ERROR driverbyte=DRIVER_SENSE
    [ 1345.172258] sd 6:0:0:0: [sdb] tag#0 Sense Key : Hardware Error [current] [descriptor]
    [ 1345.172261] sd 6:0:0:0: [sdb] tag#0 Add. Sense: No additional sense information
    [ 1345.172266] sd 6:0:0:0: [sdb] tag#0 CDB: ATA command pass through(12)/Blank a1 06 20 da 00 00 4f c2 00 b0 00 00
    
    These messages can be quite annoying, because programs like udisks2
    provoke them every 10 minutes or so.  Other programs can also have
    this effect, such as those in smartmontools.
    
    I don't fully understand how that commit induced the SCSI core to log
    these error messages, but the underlying cause for them is code added
    to usb-storage by commit f1a0743bc0e7 ("USB: storage: When a device
    returns no sense data, call it a Hardware Error").  At the time it was
    necessary to do this, in order to prevent an infinite retry loop with
    some not-so-great mass storage devices.
    
    However, the ATA pass-thru protocol uses SCSI sense data to return
    command status values, and some devices always report Check Condition
    status for ATA pass-thru commands to ensure that the host retrieves
    the sense data, even if the command succeeded.  This violates the USB
    mass-storage protocol (Check Condition status is supposed to mean the
    command failed), but we can't help that.
    
    This patch attempts to mitigate the problem of these bogus error
    reports by changing usb-storage.  The HARDWARE ERROR sense key will be
    inserted only for commands that aren't ATA pass-thru.
    
    Thanks to Ewan Milne for pointing out that this mechanism was present
    in usb-storage.  8 years after writing it, I had completely forgotten
    its existence.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Tested-by: Kris Lindgren <kris.lindgren@gmail.com>
    Ref: https://bugzilla.redhat.com/show_bug.cgi?id=1351305
    CC: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd52953f6c48e19e8c6755b2b428ceace3573ef4
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 15:59:30 2017 -0400

    usb-storage: unusual_devs entry to fix write-access regression for Seagate external drives
    
    commit 113f6eb6d50cfa5e2a1cdcf1678b12661fa272ab upstream.
    
    Kris Lindgren reports that without the NO_WP_DETECT flag, his Seagate
    external disk drive fails all write accesses.  This regresssion dates
    back approximately to the start of the 4.x kernel releases.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Kris Lindgren <kris.lindgren@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d21653d09a0b5f93cbfdcbec5701665a3d3c9feb
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Sep 25 17:01:25 2017 +0900

    usb: gadget: udc: renesas_usb3: Fix return value of usb3_write_pipe()
    
    commit 447b8a01b84f048d93d43bfe1fcaa4fcc56595cc upstream.
    
    This patch fixes an issue that this driver cannot go status stage
    in control read when the req.zero is set to 1 and the len in
    usb3_write_pipe() is set to 0. Otherwise, if we use g_ncm driver,
    usb enumeration takes long time (5 seconds or more).
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db73b389775a6a43ae5bea5b95ade16d5557c3e2
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Sep 25 17:01:24 2017 +0900

    usb: gadget: udc: renesas_usb3: fix Pn_RAMMAP.Pn_MPKT value
    
    commit 73f2f5745f18b4ccfe9484deac4e84a1378d19fd upstream.
    
    According to the datasheet of R-Car Gen3, the Pn_RAMMAP.Pn_MPKT should
    be set to one of 8, 16, 32, 64, 512 and 1024. Otherwise, when a gadget
    driver uses an interrupt endpoint, unexpected behavior happens. So,
    this patch fixes it.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25533678e58068487ffaa1b21b392cbfbc07bde5
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Sep 25 17:01:23 2017 +0900

    usb: gadget: udc: renesas_usb3: fix for no-data control transfer
    
    commit 4dcf4bab4a409e81284b8202137e4a85b96b34de upstream.
    
    When bRequestType & USB_DIR_IN is false and req.length is 0 in control
    transfer, since it means non-data, this driver should not set the mode
    as control write. So, this patch fixes it.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 744f9e1da2a59881e9e5bdc5e264c47b69f56ed5
Author: Nicolas Ferre <nicolas.ferre@microchip.com>
Date:   Thu Aug 31 14:51:40 2017 +0200

    usb: gadget: udc: atmel: set vbus irqflags explicitly
    
    commit 6baeda120d90aa637b08f7604de104ab00ce9126 upstream.
    
    The driver triggers actions on both edges of the vbus signal.
    
    The former PIO controller was triggering IRQs on both falling and rising edges
    by default. Newer PIO controller don't, so it's better to set it explicitly to
    IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING.
    
    Without this patch we may trigger the connection with host but only on some
    bouncing signal conditions and thus lose connecting events.
    
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f850036134c491361e5297dde8762ac79934a83
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 16:12:01 2017 -0400

    USB: gadgetfs: fix copy_to_user while holding spinlock
    
    commit 6e76c01e71551cb221c1f3deacb9dcd9a7346784 upstream.
    
    The gadgetfs driver as a long-outstanding FIXME, regarding a call of
    copy_to_user() made while holding a spinlock.  This patch fixes the
    issue by dropping the spinlock and using the dev->udc_usage mechanism
    introduced by another recent patch to guard against status changes
    while the lock isn't held.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd5336c0d1e35dfac610a5b81484f017cdc3b250
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Sep 21 13:23:58 2017 -0400

    USB: gadgetfs: Fix crash caused by inadequate synchronization
    
    commit 520b72fc64debf8a86c3853b8e486aa5982188f0 upstream.
    
    The gadgetfs driver (drivers/usb/gadget/legacy/inode.c) was written
    before the UDC and composite frameworks were adopted; it is a legacy
    driver.  As such, it expects that once bound to a UDC controller, it
    will not be unbound until it unregisters itself.
    
    However, the UDC framework does unbind function drivers while they are
    still registered.  When this happens, it can cause the gadgetfs driver
    to misbehave or crash.  For example, userspace can cause a crash by
    opening the device file and doing an ioctl call before setting up a
    configuration (found by Andrey Konovalov using the syzkaller fuzzer).
    
    This patch adds checks and synchronization to prevent these bad
    behaviors.  It adds a udc_usage counter that the driver increments at
    times when it is using a gadget interface without holding the private
    spinlock.  The unbind routine waits for this counter to go to 0 before
    returning, thereby ensuring that the UDC is no longer in use.
    
    The patch also adds a check in the dev_ioctl() routine to make sure
    the driver is bound to a UDC before dereferencing the gadget pointer,
    and it makes destroy_ep_files() synchronize with the endpoint I/O
    routines, to prevent the user from accessing an endpoint data
    structure after it has been removed.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
