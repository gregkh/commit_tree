commit d183c8e2647a7d45202c14a33631f6c09020f8ac
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jan 23 08:21:39 2020 +0100

    Linux 4.19.98

commit fbab36985981c873aa3d21a884b52979fe56114c
Author: Eddie James <eajames@linux.ibm.com>
Date:   Wed Nov 6 14:01:05 2019 -0600

    hwmon: (pmbus/ibm-cffps) Switch LEDs to blocking brightness call
    
    commit 9861ff954c7e83e2f738ce16fbe15f8a1e121771 upstream.
    
    Since i2c_smbus functions can sleep, the brightness setting function
    for this driver must be the blocking version to avoid scheduling while
    atomic.
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Link: https://lore.kernel.org/r/20191106200106.29519-2-eajames@linux.ibm.com
    Fixes: ef9e1cdf419a3 ("hwmon: (pmbus/cffps) Add led class device for power supply fault led")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b7cd89c95b9132e339912322812765f06cad9ff
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Wed Nov 6 18:31:25 2019 +0100

    regulator: ab8500: Remove SYSCLKREQ from enum ab8505_regulator_id
    
    commit 458ea3ad033fc86e291712ce50cbe60c3428cf30 upstream.
    
    Those regulators are not actually supported by the AB8500 regulator
    driver. There is no ab8500_regulator_info for them and no entry in
    ab8505_regulator_match.
    
    As such, they cannot be registered successfully, and looking them
    up in ab8505_regulator_match causes an out-of-bounds array read.
    
    Fixes: 547f384f33db ("regulator: ab8500: add support for ab8505")
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20191106173125.14496-2-stephan@gerhold.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e94de44ea748e6ea2b7e922b3203fd6b8403102
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Tue Oct 8 15:41:38 2019 +0800

    clk: sprd: Use IS_ERR() to validate the return value of syscon_regmap_lookup_by_phandle()
    
    commit 9629dbdabd1983ef53f125336e1d62d77b1620f9 upstream.
    
    The syscon_regmap_lookup_by_phandle() will never return NULL, thus use
    IS_ERR() to validate the return value instead of IS_ERR_OR_NULL().
    
    Fixes: d41f59fd92f2 ("clk: sprd: Add common infrastructure")
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Link: https://lkml.kernel.org/r/1995139bee5248ff3e9d46dc715968f212cfc4cc.1570520268.git.baolin.wang@linaro.org
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eaac3dc7be7b0931d07b8f0238bdd870b1d65a67
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Oct 25 17:46:25 2019 +0900

    perf probe: Fix wrong address verification
    
    commit 07d369857808b7e8e471bbbbb0074a6718f89b31 upstream.
    
    Since there are some DIE which has only ranges instead of the
    combination of entrypc/highpc, address verification must use
    dwarf_haspc() instead of dwarf_entrypc/dwarf_highpc.
    
    Also, the ranges only DIE will have a partial code in different section
    (e.g. unlikely code will be in text.unlikely as "FUNC.cold" symbol). In
    that case, we can not use dwarf_entrypc() or die_entrypc(), because the
    offset from original DIE can be a minus value.
    
    Instead, this simply gets the symbol and offset from symtab.
    
    Without this patch;
    
      # perf probe -D clear_tasks_mm_cpumask:1
      Failed to get entry address of clear_tasks_mm_cpumask
        Error: Failed to add events.
    
    And with this patch:
    
      # perf probe -D clear_tasks_mm_cpumask:1
      p:probe/clear_tasks_mm_cpumask clear_tasks_mm_cpumask+0
      p:probe/clear_tasks_mm_cpumask_1 clear_tasks_mm_cpumask+5
      p:probe/clear_tasks_mm_cpumask_2 clear_tasks_mm_cpumask+8
      p:probe/clear_tasks_mm_cpumask_3 clear_tasks_mm_cpumask+16
      p:probe/clear_tasks_mm_cpumask_4 clear_tasks_mm_cpumask+82
    
    Committer testing:
    
    I managed to reproduce the above:
    
      [root@quaco ~]# perf probe -D clear_tasks_mm_cpumask:1
      p:probe/clear_tasks_mm_cpumask _text+919968
      p:probe/clear_tasks_mm_cpumask_1 _text+919973
      p:probe/clear_tasks_mm_cpumask_2 _text+919976
      [root@quaco ~]#
    
    But then when trying to actually put the probe in place, it fails if I
    use :0 as the offset:
    
      [root@quaco ~]# perf probe -L clear_tasks_mm_cpumask | head -5
      <clear_tasks_mm_cpumask@/usr/src/debug/kernel-5.2.fc30/linux-5.2.18-200.fc30.x86_64/kernel/cpu.c:0>
            0  void clear_tasks_mm_cpumask(int cpu)
            1  {
            2       struct task_struct *p;
    
      [root@quaco ~]# perf probe clear_tasks_mm_cpumask:0
      Probe point 'clear_tasks_mm_cpumask' not found.
        Error: Failed to add events.
      [root@quaco
    
    The next patch is needed to fix this case.
    
    Fixes: 576b523721b7 ("perf probe: Fix probing symbols with optimization suffix")
    Reported-by: Arnaldo Carvalho de Melo <acme@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: http://lore.kernel.org/lkml/157199318513.8075.10463906803299647907.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 223dfefed32b5caa605d77c04fe7c037e2cac854
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Nov 1 14:14:47 2019 -0700

    scsi: core: scsi_trace: Use get_unaligned_be*()
    
    commit b1335f5b0486f61fb66b123b40f8e7a98e49605d upstream.
    
    This patch fixes an unintended sign extension on left shifts. From Colin
    King: "Shifting a u8 left will cause the value to be promoted to an
    integer. If the top bit of the u8 is set then the following conversion to
    an u64 will sign extend the value causing the upper 32 bits to be set in
    the result."
    
    Fix this by using get_unaligned_be*() instead.
    
    Fixes: bf8162354233 ("[SCSI] add scsi trace core functions and put trace points")
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Douglas Gilbert <dgilbert@interlog.com>
    Link: https://lore.kernel.org/r/20191101211447.187151-1-bvanassche@acm.org
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f78f18c34ef66d2032c2ac22176e09e13bfdac63
Author: Martin Wilck <mwilck@suse.com>
Date:   Fri Nov 22 22:19:22 2019 +0000

    scsi: qla2xxx: fix rports not being mark as lost in sync fabric scan
    
    commit d341e9a8f2cffe4000c610225c629f62c7489c74 upstream.
    
    In qla2x00_find_all_fabric_devs(), fcport->flags & FCF_LOGIN_NEEDED is a
    necessary condition for logging into new rports, but not for dropping lost
    ones.
    
    Fixes: 726b85487067 ("qla2xxx: Add framework for async fabric discovery")
    Link: https://lore.kernel.org/r/20191122221912.20100-2-martin.wilck@suse.com
    Tested-by: David Bond <dbond@suse.com>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 216e517ca88d288e06144c6a82f994cd1d24f8d6
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Nov 21 13:40:47 2019 +0800

    scsi: qla2xxx: Fix qla2x00_request_irqs() for MSI
    
    commit 45dc8f2d9c94ed74a5e31e63e9136a19a7e16081 upstream.
    
    Commit 4fa183455988 ("scsi: qla2xxx: Utilize pci_alloc_irq_vectors/
    pci_free_irq_vectors calls.") use pci_alloc_irq_vectors() to replace
    pci_enable_msi() but it didn't handle the return value correctly. This bug
    make qla2x00 always fail to setup MSI if MSI-X fail, so fix it.
    
    BTW, improve the log message of return value in qla2x00_request_irqs() to
    avoid confusion.
    
    Fixes: 4fa183455988 ("scsi: qla2xxx: Utilize pci_alloc_irq_vectors/pci_free_irq_vectors calls.")
    Cc: Michael Hernandez <michael.hernandez@cavium.com>
    Link: https://lore.kernel.org/r/1574314847-14280-1-git-send-email-chenhc@lemote.com
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d27b78caf39d0e68a1ce022114be9903beac2a68
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Nov 7 13:55:25 2019 -0800

    scsi: target: core: Fix a pr_debug() argument
    
    commit c941e0d172605731de9b4628bd4146d35cf2e7d6 upstream.
    
    Print the string for which conversion failed instead of printing the
    function name twice.
    
    Fixes: 2650d71e244f ("target: move transport ID handling to the core")
    Cc: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20191107215525.64415-1-bvanassche@acm.org
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 295a863b91fa6772c2dee311063adecff4e80359
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 6 20:32:21 2019 +0800

    scsi: bnx2i: fix potential use after free
    
    commit 29d28f2b8d3736ac61c28ef7e20fda63795b74d9 upstream.
    
    The member hba->pcidev may be used after its reference is dropped. Move the
    put function to where it is never used to avoid potential use after free
    issues.
    
    Fixes: a77171806515 ("[SCSI] bnx2i: Removed the reference to the netdev->base_addr")
    Link: https://lore.kernel.org/r/1573043541-19126-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3c9310b6655611b1b3bddd57106b8dcd396b844
Author: Pan Bian <bianpan2016@163.com>
Date:   Tue Nov 5 17:25:27 2019 +0800

    scsi: qla4xxx: fix double free bug
    
    commit 3fe3d2428b62822b7b030577cd612790bdd8c941 upstream.
    
    The variable init_fw_cb is released twice, resulting in a double free
    bug. The call to the function dma_free_coherent() before goto is removed to
    get rid of potential double free.
    
    Fixes: 2a49a78ed3c8 ("[SCSI] qla4xxx: added IPv6 support.")
    Link: https://lore.kernel.org/r/1572945927-27796-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Acked-by: Manish Rangankar <mrangankar@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 097f5dfc96ce8ce27d91ae5af6fc8ea45b62b501
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Oct 22 13:23:24 2019 +0300

    scsi: esas2r: unlock on error in esas2r_nvram_read_direct()
    
    commit 906ca6353ac09696c1bf0892513c8edffff5e0a6 upstream.
    
    This error path is missing an unlock.
    
    Fixes: 26780d9e12ed ("[SCSI] esas2r: ATTO Technology ExpressSAS 6G SAS/SATA RAID Adapter Driver")
    Link: https://lore.kernel.org/r/20191022102324.GA27540@mwanda
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d28d607908c7a7ab428872fa50871b9bb5bd3450
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Wed Jan 15 13:00:59 2020 -0500

    reiserfs: fix handling of -EOPNOTSUPP in reiserfs_for_each_xattr
    
    commit 394440d469413fa9b74f88a11f144d76017221f2 upstream.
    
    Commit 60e4cf67a58 (reiserfs: fix extended attributes on the root
    directory) introduced a regression open_xa_root started returning
    -EOPNOTSUPP but it was not handled properly in reiserfs_for_each_xattr.
    
    When the reiserfs module is built without CONFIG_REISERFS_FS_XATTR,
    deleting an inode would result in a warning and chowning an inode
    would also result in a warning and then fail to complete.
    
    With CONFIG_REISERFS_FS_XATTR enabled, the xattr root would always be
    present for read-write operations.
    
    This commit handles -EOPNOSUPP in the same way -ENODATA is handled.
    
    Fixes: 60e4cf67a582 ("reiserfs: fix extended attributes on the root directory")
    CC: stable@vger.kernel.org      # Commit 60e4cf67a58 was picked up by stable
    Link: https://lore.kernel.org/r/20200115180059.6935-1-jeffm@suse.com
    Reported-by: Michael Brunnbauer <brunni@netestate.de>
    Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b88ac504746972c6a0ad99d017311f4a4251ab0
Author: Jon Derrick <jonathan.derrick@intel.com>
Date:   Fri Mar 15 18:05:18 2019 -0600

    drm/nouveau/mmu: qualify vmm during dtor
    
    commit 15516bf9abaa41421a6ded79a5a2fee86f9594e5 upstream.
    
    If the BAR initialization failed it may leave the vmm structure in an
    unitialized state, leading to a null-pointer-dereference when the vmm is
    dereferenced during teardown.
    
    Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sushma Kalakota <sushmax.kalakota@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3579293f6bace77815ca2ebe47d98ad73b469c95
Author: Jon Derrick <jonathan.derrick@intel.com>
Date:   Fri Mar 15 18:05:17 2019 -0600

    drm/nouveau/bar/gf100: ensure BAR is mapped
    
    commit 12e08beb32d64b6070b718630490db83dd321c8c upstream.
    
    If the BAR is zero size, it indicates it was never successfully mapped.
    Ensure that the BAR is valid during initialization before attempting to
    use it.
    
    Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sushma Kalakota <sushmax.kalakota@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9f3e2ef01140ab2dd3f5db51ca37db91134dfff
Author: Jon Derrick <jonathan.derrick@intel.com>
Date:   Fri Mar 15 18:05:15 2019 -0600

    drm/nouveau/bar/nv50: check bar1 vmm return value
    
    commit 307a312df9c43fdea286ad17f748aaf777cc434a upstream.
    
    Check bar1's new vmm creation return value for errors.
    
    Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sushma Kalakota <sushmax.kalakota@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bebd8dbc52154060bebe29da81abccfc25aa2cd
Author: Angelo Dureghello <angelo.dureghello@timesys.com>
Date:   Wed Oct 30 12:39:57 2019 +0100

    mtd: devices: fix mchp23k256 read and write
    
    commit 14f89e088155314d311e4d4dd9f2b4ccaeef92b2 upstream.
    
    Due to the use of sizeof(), command size set for the spi transfer
    was wrong. Driver was sending and receiving always 1 byte less
    and especially on write, it was hanging.
    
    echo -n -e "\\x1\\x2\\x3\\x4" > /dev/mtd1
    
    And read part too now works as expected.
    
    hexdump -C -n16 /dev/mtd1
    00000000  01 02 03 04 ab f3 ad c2  ab e3 f4 36 dd 38 04 15
    00000010
    
    Fixes: 4379075a870b ("mtd: mchp23k256: Add support for mchp23lcv1024")
    Signed-off-by: Angelo Dureghello <angelo.dureghello@timesys.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5278ac54c19874e1a320c4876655b8052ac51eb
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Nov 28 15:33:57 2019 +0000

    Revert "arm64: dts: juno: add dma-ranges property"
    
    commit 54fb3fe0f211d4729a2551cf9497bd612189af9d upstream.
    
    This reverts commit 193d00a2b35ee3353813b4006a18131122087205.
    
    Commit 951d48855d86 ("of: Make of_dma_get_range() work on bus nodes")
    reworked the logic such that of_dma_get_range() works correctly
    starting from a bus node containing "dma-ranges".
    
    Since on Juno we don't have a SoC level bus node and "dma-ranges" is
    present only in the root node, we get the following error:
    
    OF: translation of DMA address(0) to CPU address failed node(/sram@2e000000)
    OF: translation of DMA address(0) to CPU address failed node(/uart@7ff80000)
    ...
    OF: translation of DMA address(0) to CPU address failed node(/mhu@2b1f0000)
    OF: translation of DMA address(0) to CPU address failed node(/iommu@2b600000)
    OF: translation of DMA address(0) to CPU address failed node(/iommu@2b600000)
    OF: translation of DMA address(0) to CPU address failed node(/iommu@2b600000)
    
    So let's fix it by dropping the "dma-ranges" property for now. This
    should be fine since it doesn't represent any kind of device-visible
    restriction; it was only there for completeness, and we've since given
    in to the assumption that missing "dma-ranges" implies a 1:1 mapping
    anyway.
    
    We can add it later with a proper SoC bus node and moving all the
    devices that belong there along with the "dma-ranges" if required.
    
    Fixes: 193d00a2b35e ("arm64: dts: juno: add dma-ranges property")
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Liviu Dudau <liviu.dudau@arm.com>
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e4efdd31e3d2f767e3a9bd90060caa45306a698
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Fri Oct 4 16:27:28 2019 +0200

    arm64: dts: marvell: Fix CP110 NAND controller node multi-line comment alignment
    
    commit 2bc26088ba37d4f2a4b8bd813ee757992522d082 upstream.
    
    Fix this tiny typo before renaming/changing this file.
    
    Fixes: 72a3713fadfd ("arm64: dts: marvell: de-duplicate CP110 description")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a31889a691a4dc084f159d4f184a20be1d8ca1bb
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 4 20:56:19 2019 -0800

    tick/sched: Annotate lockless access to last_jiffies_update
    
    commit de95a991bb72e009f47e0c4bbc90fc5f594588d5 upstream.
    
    syzbot (KCSAN) reported a data-race in tick_do_update_jiffies64():
    
    BUG: KCSAN: data-race in tick_do_update_jiffies64 / tick_do_update_jiffies64
    
    write to 0xffffffff8603d008 of 8 bytes by interrupt on cpu 1:
     tick_do_update_jiffies64+0x100/0x250 kernel/time/tick-sched.c:73
     tick_sched_do_timer+0xd4/0xe0 kernel/time/tick-sched.c:138
     tick_sched_timer+0x43/0xe0 kernel/time/tick-sched.c:1292
     __run_hrtimer kernel/time/hrtimer.c:1514 [inline]
     __hrtimer_run_queues+0x274/0x5f0 kernel/time/hrtimer.c:1576
     hrtimer_interrupt+0x22a/0x480 kernel/time/hrtimer.c:1638
     local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1110 [inline]
     smp_apic_timer_interrupt+0xdc/0x280 arch/x86/kernel/apic/apic.c:1135
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
     arch_local_irq_restore arch/x86/include/asm/paravirt.h:756 [inline]
     kcsan_setup_watchpoint+0x1d4/0x460 kernel/kcsan/core.c:436
     check_access kernel/kcsan/core.c:466 [inline]
     __tsan_read1 kernel/kcsan/core.c:593 [inline]
     __tsan_read1+0xc2/0x100 kernel/kcsan/core.c:593
     kallsyms_expand_symbol.constprop.0+0x70/0x160 kernel/kallsyms.c:79
     kallsyms_lookup_name+0x7f/0x120 kernel/kallsyms.c:170
     insert_report_filterlist kernel/kcsan/debugfs.c:155 [inline]
     debugfs_write+0x14b/0x2d0 kernel/kcsan/debugfs.c:256
     full_proxy_write+0xbd/0x100 fs/debugfs/file.c:225
     __vfs_write+0x67/0xc0 fs/read_write.c:494
     vfs_write fs/read_write.c:558 [inline]
     vfs_write+0x18a/0x390 fs/read_write.c:542
     ksys_write+0xd5/0x1b0 fs/read_write.c:611
     __do_sys_write fs/read_write.c:623 [inline]
     __se_sys_write fs/read_write.c:620 [inline]
     __x64_sys_write+0x4c/0x60 fs/read_write.c:620
     do_syscall_64+0xcc/0x370 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    read to 0xffffffff8603d008 of 8 bytes by task 0 on cpu 0:
     tick_do_update_jiffies64+0x2b/0x250 kernel/time/tick-sched.c:62
     tick_nohz_update_jiffies kernel/time/tick-sched.c:505 [inline]
     tick_nohz_irq_enter kernel/time/tick-sched.c:1257 [inline]
     tick_irq_enter+0x139/0x1c0 kernel/time/tick-sched.c:1274
     irq_enter+0x4f/0x60 kernel/softirq.c:354
     entering_irq arch/x86/include/asm/apic.h:517 [inline]
     entering_ack_irq arch/x86/include/asm/apic.h:523 [inline]
     smp_apic_timer_interrupt+0x55/0x280 arch/x86/kernel/apic/apic.c:1133
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
     native_safe_halt+0xe/0x10 arch/x86/include/asm/irqflags.h:60
     arch_cpu_idle+0xa/0x10 arch/x86/kernel/process.c:571
     default_idle_call+0x1e/0x40 kernel/sched/idle.c:94
     cpuidle_idle_call kernel/sched/idle.c:154 [inline]
     do_idle+0x1af/0x280 kernel/sched/idle.c:263
     cpu_startup_entry+0x1b/0x20 kernel/sched/idle.c:355
     rest_init+0xec/0xf6 init/main.c:452
     arch_call_rest_init+0x17/0x37
     start_kernel+0x838/0x85e init/main.c:786
     x86_64_start_reservations+0x29/0x2b arch/x86/kernel/head64.c:490
     x86_64_start_kernel+0x72/0x76 arch/x86/kernel/head64.c:471
     secondary_startup_64+0xa4/0xb0 arch/x86/kernel/head_64.S:241
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.4.0-rc7+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Use READ_ONCE() and WRITE_ONCE() to annotate this expected race.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20191205045619.204946-1-edumazet@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2284ce1535e52173db31b65dee56d6395aaf86f
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Jan 13 12:53:59 2020 +0100

    cfg80211: check for set_wiphy_params
    
    commit 24953de0a5e31dcca7e82c8a3c79abc2dfe8fb6e upstream.
    
    Check if set_wiphy_params is assigned and return an error if not,
    some drivers (e.g. virt_wifi where syzbot reported it) don't have
    it.
    
    Reported-by: syzbot+e8a797964a4180eb57d5@syzkaller.appspotmail.com
    Reported-by: syzbot+34b582cf32c1db008f8e@syzkaller.appspotmail.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20200113125358.ac07f276efff.Ibd85ee1b12e47b9efb00a2adc5cd3fac50da791a@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9086713d34d8d7744b4de6b7b2dfe95217e90c6b
Author: Christian Hewitt <christianshewitt@gmail.com>
Date:   Mon Sep 9 19:01:22 2019 +0400

    arm64: dts: meson-gxl-s905x-khadas-vim: fix gpio-keys-polled node
    
    commit d5f6fa904ecbadbb8e9fa6302b0fc165bec0559a upstream.
    
    Fix DTC warnings:
    
    arch/arm/dts/meson-gxl-s905x-khadas-vim.dtb: Warning (avoid_unnecessary_addr_size):
       /gpio-keys-polled: unnecessary #address-cells/#size-cells
          without "ranges" or child "reg" property
    
    Fixes: e15d2774b8c0 ("ARM64: dts: meson-gxl: add support for the Khadas VIM board")
    Signed-off-by: Christian Hewitt <christianshewitt@gmail.com>
    Reviewed-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec421a05e26e56c6bad6cfb49dc7be105174c51c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Oct 1 14:45:01 2019 +0300

    cw1200: Fix a signedness bug in cw1200_load_firmware()
    
    commit 4a50d454502f1401171ff061a5424583f91266db upstream.
    
    The "priv->hw_type" is an enum and in this context GCC will treat it
    as an unsigned int so the error handling will never trigger.
    
    Fixes: a910e4a94f69 ("cw1200: add driver for the ST-E CW1100 & CW1200 WLAN chipsets")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39ff82331d69e90a2fdf720c116a9795ebc74f49
Author: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
Date:   Wed Oct 2 16:44:52 2019 +0200

    irqchip: Place CONFIG_SIFIVE_PLIC into the menu
    
    commit 0149385537e6d36f535fcd83cfcabf83a32f0836 upstream.
    
    Somehow CONFIG_SIFIVE_PLIC ended up outside of the "IRQ chip support"
    menu.
    
    Fixes: 8237f8bc4f6e ("irqchip: add a SiFive PLIC driver")
    Signed-off-by: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Palmer Dabbelt <palmer@sifive.com>
    Acked-by: Palmer Dabbelt <palmer@sifive.com>
    Link: https://lore.kernel.org/r/20191002144452.10178-1-j.neuschaefer@gmx.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b23477d818a63f13412b55655cf2defa3a8e3e85
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 12 12:55:31 2019 -0800

    tcp: refine rule to allow EPOLLOUT generation under mem pressure
    
    commit 216808c6ba6d00169fd2aa928ec3c0e63bef254f upstream.
    
    At the time commit ce5ec440994b ("tcp: ensure epoll edge trigger
    wakeup when write queue is empty") was added to the kernel,
    we still had a single write queue, combining rtx and write queues.
    
    Once we moved the rtx queue into a separate rb-tree, testing
    if sk_write_queue is empty has been suboptimal.
    
    Indeed, if we have packets in the rtx queue, we probably want
    to delay the EPOLLOUT generation at the time incoming packets
    will free them, making room, but more importantly avoiding
    flooding application with EPOLLOUT events.
    
    Solution is to use tcp_rtx_and_write_queues_empty() helper.
    
    Fixes: 75c119afe14f ("tcp: implement rb-tree based retransmit queue")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jason Baron <jbaron@akamai.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 041497b65eb0f2a320ada2207b83c2a240d44728
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Dec 9 13:14:44 2019 -0700

    xen/blkfront: Adjust indentation in xlvbd_alloc_gendisk
    
    commit 589b72894f53124a39d1bb3c0cecaf9dcabac417 upstream.
    
    Clang warns:
    
    ../drivers/block/xen-blkfront.c:1117:4: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
                    nr_parts = PARTS_PER_DISK;
                    ^
    ../drivers/block/xen-blkfront.c:1115:3: note: previous statement is here
                    if (err)
                    ^
    
    This is because there is a space at the beginning of this line; remove
    it so that the indentation is consistent according to the Linux kernel
    coding style and clang no longer warns.
    
    While we are here, the previous line has some trailing whitespace; clean
    that up as well.
    
    Fixes: c80a420995e7 ("xen-blkfront: handle Xen major numbers other than XENVBD")
    Link: https://github.com/ClangBuiltLinux/linux/issues/791
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fd18873a740d6266780fe67ca26c1cdc28de4cc
Author: Petr Machata <petrm@mellanox.com>
Date:   Wed Jan 15 13:53:49 2020 +0200

    mlxsw: spectrum_qdisc: Include MC TCs in Qdisc counters
    
    commit 85005b82e59fa7bb7388b12594ab2067bf73d66c upstream.
    
    mlxsw configures Spectrum in such a way that BUM traffic is passed not
    through its nominal traffic class TC, but through its MC counterpart TC+8.
    However, when collecting statistics, Qdiscs only look at the nominal TC and
    ignore the MC TC.
    
    Add two helpers to compute the value for logical TC from the constituents,
    one for backlog, the other for tail drops. Use them throughout instead of
    going through the xstats pointer directly.
    
    Counters for TX bytes and packets are deduced from packet priority
    counters, and therefore already include BUM traffic. wred_drop counter is
    irrelevant on MC TCs, because RED is not enabled on them.
    
    Fixes: 7b8195306694 ("mlxsw: spectrum: Configure MC-aware mode on mlxsw ports")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 565389fc18ebe7c54569f1630a320a3c5dc2cdae
Author: Petr Machata <petrm@mellanox.com>
Date:   Wed Jan 15 13:53:48 2020 +0200

    mlxsw: spectrum: Wipe xstats.backlog of down ports
    
    commit ca7609ff3680c51d6c29897f3117aa2ad904f92a upstream.
    
    Per-port counter cache used by Qdiscs is updated periodically, unless the
    port is down. The fact that the cache is not updated for down ports is no
    problem for most counters, which are relative in nature. However, backlog
    is absolute in nature, and if there is a non-zero value in the cache around
    the time that the port goes down, that value just stays there. This value
    then leaks to offloaded Qdiscs that report non-zero backlog even if
    there (obviously) is no traffic.
    
    The HW does not keep backlog of a downed port, so do likewise: as the port
    goes down, wipe the backlog value from xstats.
    
    Fixes: 075ab8adaf4e ("mlxsw: spectrum: Collect tclass related stats periodically")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd0d69bb3287f703a6d3f9083722f7516ea3e607
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Wed Jan 8 23:42:42 2020 +0300

    sh_eth: check sh_eth_cpu_data::dual_port when dumping registers
    
    commit 3249b1e442a1be1a6b9f1026785b519d1443f807 upstream.
    
    When adding the sh_eth_cpu_data::dual_port flag I forgot to add the flag
    checks to __sh_eth_get_regs(), causing the non-existing TSU registers to
    be dumped by 'ethtool' on the single port Ether controllers having TSU...
    
    Fixes: a94cf2a614f8 ("sh_eth: fix TSU init on SH7734/R8A7740")
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34e855f998f76169e685c7e3c790b0ee0eed2a75
Author: Pengcheng Yang <yangpc@wangsu.com>
Date:   Tue Jan 14 17:23:40 2020 +0800

    tcp: fix marked lost packets not being retransmitted
    
    [ Upstream commit e176b1ba476cf36f723cfcc7a9e57f3cb47dec70 ]
    
    When the packet pointed to by retransmit_skb_hint is unlinked by ACK,
    retransmit_skb_hint will be set to NULL in tcp_clean_rtx_queue().
    If packet loss is detected at this time, retransmit_skb_hint will be set
    to point to the current packet loss in tcp_verify_retransmit_hint(),
    then the packets that were previously marked lost but not retransmitted
    due to the restriction of cwnd will be skipped and cannot be
    retransmitted.
    
    To fix this, when retransmit_skb_hint is NULL, retransmit_skb_hint can
    be reset only after all marked lost packets are retransmitted
    (retrans_out >= lost_out), otherwise we need to traverse from
    tcp_rtx_queue_head in tcp_xmit_retransmit_queue().
    
    Packetdrill to demonstrate:
    
    // Disable RACK and set max_reordering to keep things simple
        0 `sysctl -q net.ipv4.tcp_recovery=0`
       +0 `sysctl -q net.ipv4.tcp_max_reordering=3`
    
    // Establish a connection
       +0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
       +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
       +0 bind(3, ..., ...) = 0
       +0 listen(3, 1) = 0
    
      +.1 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
       +0 > S. 0:0(0) ack 1 <...>
     +.01 < . 1:1(0) ack 1 win 257
       +0 accept(3, ..., ...) = 4
    
    // Send 8 data segments
       +0 write(4, ..., 8000) = 8000
       +0 > P. 1:8001(8000) ack 1
    
    // Enter recovery and 1:3001 is marked lost
     +.01 < . 1:1(0) ack 1 win 257 <sack 3001:4001,nop,nop>
       +0 < . 1:1(0) ack 1 win 257 <sack 5001:6001 3001:4001,nop,nop>
       +0 < . 1:1(0) ack 1 win 257 <sack 5001:7001 3001:4001,nop,nop>
    
    // Retransmit 1:1001, now retransmit_skb_hint points to 1001:2001
       +0 > . 1:1001(1000) ack 1
    
    // 1001:2001 was ACKed causing retransmit_skb_hint to be set to NULL
     +.01 < . 1:1(0) ack 2001 win 257 <sack 5001:8001 3001:4001,nop,nop>
    // Now retransmit_skb_hint points to 4001:5001 which is now marked lost
    
    // BUG: 2001:3001 was not retransmitted
       +0 > . 2001:3001(1000) ack 1
    
    Signed-off-by: Pengcheng Yang <yangpc@wangsu.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Tested-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0fa9c75631f0c53835c2e08a36c926f6de8c164
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jan 14 09:27:29 2020 +0100

    r8152: add missing endpoint sanity check
    
    [ Upstream commit 86f3f4cd53707ceeec079b83205c8d3c756eca93 ]
    
    Add missing endpoint sanity check to probe in order to prevent a
    NULL-pointer dereference (or slab out-of-bounds access) when retrieving
    the interrupt-endpoint bInterval on ndo_open() in case a device lacks
    the expected endpoints.
    
    Fixes: 40a82917b1d3 ("net/usb/r8152: enable interrupt transfer")
    Cc: hayeswang <hayeswang@realtek.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dea9548290b77e1eaac1b9d1ab72415af5a295b
Author: Vladis Dronov <vdronov@redhat.com>
Date:   Mon Jan 13 14:00:09 2020 +0100

    ptp: free ptp device pin descriptors properly
    
    [ Upstream commit 75718584cb3c64e6269109d4d54f888ac5a5fd15 ]
    
    There is a bug in ptp_clock_unregister(), where ptp_cleanup_pin_groups()
    first frees ptp->pin_{,dev_}attr, but then posix_clock_unregister() needs
    them to destroy a related sysfs device.
    
    These functions can not be just swapped, as posix_clock_unregister() frees
    ptp which is needed in the ptp_cleanup_pin_groups(). Fix this by calling
    ptp_cleanup_pin_groups() in ptp_clock_release(), right before ptp is freed.
    
    This makes this patch fix an UAF bug in a patch which fixes an UAF bug.
    
    Reported-by: Antti Laakso <antti.laakso@intel.com>
    Fixes: a33121e5487b ("ptp: fix the race between the release of ptp_clock and cdev")
    Link: https://lore.kernel.org/netdev/3d2bd09735dbdaf003585ca376b7c1e5b69a19bd.camel@intel.com/
    Signed-off-by: Vladis Dronov <vdronov@redhat.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c91e8519c67d0e20894751abdb11f8e4dc77ec21
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Jan 14 14:54:48 2020 +0000

    net/wan/fsl_ucc_hdlc: fix out of bounds write on array utdm_info
    
    [ Upstream commit ddf420390526ede3b9ff559ac89f58cb59d9db2f ]
    
    Array utdm_info is declared as an array of MAX_HDLC_NUM (4) elements
    however up to UCC_MAX_NUM (8) elements are potentially being written
    to it.  Currently we have an array out-of-bounds write error on the
    last 4 elements. Fix this by making utdm_info UCC_MAX_NUM elements in
    size.
    
    Addresses-Coverity: ("Out-of-bounds write")
    Fixes: c19b6d246a35 ("drivers/net: support hdlc function for QE-UCC")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6dc2025f3cd9fd65986e0cdf9705a653e05ad486
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 13 09:27:11 2020 -0800

    net: usb: lan78xx: limit size of local TSO packets
    
    [ Upstream commit f8d7408a4d7f60f8b2df0f81decdc882dd9c20dc ]
    
    lan78xx_tx_bh() makes sure to not exceed MAX_SINGLE_PACKET_SIZE
    bytes in the aggregated packets it builds, but does
    nothing to prevent large GSO packets being submitted.
    
    Pierre-Francois reported various hangs when/if TSO is enabled.
    
    For localy generated packets, we can use netif_set_gso_max_size()
    to limit the size of TSO packets.
    
    Note that forwarded packets could still hit the issue,
    so a complete fix might require implementing .ndo_features_check
    for this driver, forcing a software segmentation if the size
    of the TSO packet exceeds MAX_SINGLE_PACKET_SIZE.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: RENARD Pierre-Francois <pfrenard@gmail.com>
    Tested-by: RENARD Pierre-Francois <pfrenard@gmail.com>
    Cc: Stefan Wahren <stefan.wahren@i2se.com>
    Cc: Woojung Huh <woojung.huh@microchip.com>
    Cc: Microchip Linux Driver Support <UNGLinuxDriver@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11235a3d7bfcb19a1bb60092e282d8da5567f30f
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Thu Jan 16 15:41:17 2020 +0800

    net: hns: fix soft lockup when there is not enough memory
    
    [ Upstream commit 49edd6a2c456150870ddcef5b7ed11b21d849e13 ]
    
    When there is not enough memory and napi_alloc_skb() return NULL,
    the HNS driver will print error message, and than try again, if
    the memory is not enough for a while, huge error message and the
    retry operation will cause soft lockup.
    
    When napi_alloc_skb() return NULL because of no memory, we can
    get a warn_alloc() call trace, so this patch deletes the error
    message. We already use polling mode to handle irq, but the
    retry operation will render the polling weight inactive, this
    patch just return budget when the rx is not completed to avoid
    dead loop.
    
    Fixes: 36eedfde1a36 ("net: hns: Optimize hns_nic_common_poll for better performance")
    Fixes: b5996f11ea54 ("net: add Hisilicon Network Subsystem basic ethernet support")
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0eb8f098a2126f6ed09e4c1ee3bfcfe64eaab7d1
Author: Alexander Lobakin <alobakin@dlink.ru>
Date:   Wed Jan 15 11:56:52 2020 +0300

    net: dsa: tag_qca: fix doubled Tx statistics
    
    [ Upstream commit bd5874da57edd001b35cf28ae737779498c16a56 ]
    
    DSA subsystem takes care of netdev statistics since commit 4ed70ce9f01c
    ("net: dsa: Refactor transmit path to eliminate duplication"), so
    any accounting inside tagger callbacks is redundant and can lead to
    messing up the stats.
    This bug is present in Qualcomm tagger since day 0.
    
    Fixes: cafdc45c949b ("net-next: dsa: add Qualcomm tag RX/TX handler")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Alexander Lobakin <alobakin@dlink.ru>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 794e629c739d2ac2889cd293460b0d7226d88692
Author: Mohammed Gamal <mgamal@redhat.com>
Date:   Tue Jan 14 15:09:50 2020 +0200

    hv_netvsc: Fix memory leak when removing rndis device
    
    [ Upstream commit 536dc5df2808efbefc5acee334d3c4f701790ec0 ]
    
    kmemleak detects the following memory leak when hot removing
    a network device:
    
    unreferenced object 0xffff888083f63600 (size 256):
      comm "kworker/0:1", pid 12, jiffies 4294831717 (age 1113.676s)
      hex dump (first 32 bytes):
        00 40 c7 33 80 88 ff ff 00 00 00 00 10 00 00 00  .@.3............
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
      backtrace:
        [<00000000d4a8f5be>] rndis_filter_device_add+0x117/0x11c0 [hv_netvsc]
        [<000000009c02d75b>] netvsc_probe+0x5e7/0xbf0 [hv_netvsc]
        [<00000000ddafce23>] vmbus_probe+0x74/0x170 [hv_vmbus]
        [<00000000046e64f1>] really_probe+0x22f/0xb50
        [<000000005cc35eb7>] driver_probe_device+0x25e/0x370
        [<0000000043c642b2>] bus_for_each_drv+0x11f/0x1b0
        [<000000005e3d09f0>] __device_attach+0x1c6/0x2f0
        [<00000000a72c362f>] bus_probe_device+0x1a6/0x260
        [<0000000008478399>] device_add+0x10a3/0x18e0
        [<00000000cf07b48c>] vmbus_device_register+0xe7/0x1e0 [hv_vmbus]
        [<00000000d46cf032>] vmbus_add_channel_work+0x8ab/0x1770 [hv_vmbus]
        [<000000002c94bb64>] process_one_work+0x919/0x17d0
        [<0000000096de6781>] worker_thread+0x87/0xb40
        [<00000000fbe7397e>] kthread+0x333/0x3f0
        [<000000004f844269>] ret_from_fork+0x3a/0x50
    
    rndis_filter_device_add() allocates an instance of struct rndis_device
    which never gets deallocated as rndis_filter_device_remove() sets
    net_device->extension which points to the rndis_device struct to NULL,
    leaving the rndis_device dangling.
    
    Since net_device->extension is eventually freed in free_netvsc_device(),
    we refrain from setting it to NULL inside rndis_filter_device_remove()
    
    Signed-off-by: Mohammed Gamal <mgamal@redhat.com>
    Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37cf279748c759d62609738538b79f44879f6687
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 14 13:00:35 2020 -0800

    macvlan: use skb_reset_mac_header() in macvlan_queue_xmit()
    
    [ Upstream commit 1712b2fff8c682d145c7889d2290696647d82dab ]
    
    I missed the fact that macvlan_broadcast() can be used both
    in RX and TX.
    
    skb_eth_hdr() makes only sense in TX paths, so we can not
    use it blindly in macvlan_broadcast()
    
    Fixes: 96cc4b69581d ("macvlan: do not assume mac_header is set in macvlan_broadcast()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Jurgen Van Ham <juvanham@gmail.com>
    Tested-by: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da319f060b853a2cf4df3bc6119083813aaa1976
Author: Sven Eckelmann <sven@narfation.org>
Date:   Thu Nov 28 12:25:45 2019 +0100

    batman-adv: Fix DAT candidate selection on little endian systems
    
    commit 4cc4a1708903f404d2ca0dfde30e71e052c6cbc9 upstream.
    
    The distributed arp table is using a DHT to store and retrieve MAC address
    information for an IP address. This is done using unicast messages to
    selected peers. The potential peers are looked up using the IP address and
    the VID.
    
    While the IP address is always stored in big endian byte order, this is not
    the case of the VID. It can (depending on the host system) either be big
    endian or little endian. The host must therefore always convert it to big
    endian to ensure that all devices calculate the same peers for the same
    lookup data.
    
    Fixes: be1db4f6615b ("batman-adv: make the Distributed ARP Table vlan aware")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c043fc7ce7e2e1ddba611e934442e068f6a58d24
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 13 18:23:58 2020 +0100

    NFC: pn533: fix bulk-message timeout
    
    commit a112adafcb47760feff959ee1ecd10b74d2c5467 upstream.
    
    The driver was doing a synchronous uninterruptible bulk-transfer without
    using a timeout. This could lead to the driver hanging on probe due to a
    malfunctioning (or malicious) device until the device is physically
    disconnected. While sleeping in probe the driver prevents other devices
    connected to the same hub from being added to (or removed from) the bus.
    
    An arbitrary limit of five seconds should be more than enough.
    
    Fixes: dbafc28955fa ("NFC: pn533: don't send USB data off of the stack")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8260ce5aeee4d7c4a6305e469edeae1066de2800
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jan 16 12:03:01 2020 +0100

    netfilter: nf_tables: fix flowtable list del corruption
    
    commit 335178d5429c4cee61b58f4ac80688f556630818 upstream.
    
    syzbot reported following crash:
    
      list_del corruption, ffff88808c9bb000->prev is LIST_POISON2 (dead000000000122)
      [..]
      Call Trace:
       __list_del_entry include/linux/list.h:131 [inline]
       list_del_rcu include/linux/rculist.h:148 [inline]
       nf_tables_commit+0x1068/0x3b30 net/netfilter/nf_tables_api.c:7183
       [..]
    
    The commit transaction list has:
    
    NFT_MSG_NEWTABLE
    NFT_MSG_NEWFLOWTABLE
    NFT_MSG_DELFLOWTABLE
    NFT_MSG_DELTABLE
    
    A missing generation check during DELTABLE processing causes it to queue
    the DELFLOWTABLE operation a second time, so we corrupt the list here:
    
      case NFT_MSG_DELFLOWTABLE:
         list_del_rcu(&nft_trans_flowtable(trans)->list);
         nf_tables_flowtable_notify(&trans->ctx,
    
    because we have two different DELFLOWTABLE transactions for the same
    flowtable.  We then call list_del_rcu() twice for the same flowtable->list.
    
    The object handling seems to suffer from the same bug so add a generation
    check too and only queue delete transactions for flowtables/objects that
    are still active in the next generation.
    
    Reported-by: syzbot+37a6804945a3a13b1572@syzkaller.appspotmail.com
    Fixes: 3b49e2e94e6eb ("netfilter: nf_tables: add flow table netlink frontend")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ed065bd8a20f8348af3098508ae9a11f02bf258
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Jan 13 18:09:58 2020 +0100

    netfilter: nf_tables: store transaction list locally while requesting module
    
    commit ec7470b834fe7b5d7eff11b6677f5d7fdf5e9a91 upstream.
    
    This patch fixes a WARN_ON in nft_set_destroy() due to missing
    set reference count drop from the preparation phase. This is triggered
    by the module autoload path. Do not exercise the abort path from
    nft_request_module() while preparation phase cleaning up is still
    pending.
    
     WARNING: CPU: 3 PID: 3456 at net/netfilter/nf_tables_api.c:3740 nft_set_destroy+0x45/0x50 [nf_tables]
     [...]
     CPU: 3 PID: 3456 Comm: nft Not tainted 5.4.6-arch3-1 #1
     RIP: 0010:nft_set_destroy+0x45/0x50 [nf_tables]
     Code: e8 30 eb 83 c6 48 8b 85 80 00 00 00 48 8b b8 90 00 00 00 e8 dd 6b d7 c5 48 8b 7d 30 e8 24 dd eb c5 48 89 ef 5d e9 6b c6 e5 c5 <0f> 0b c3 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 8b 7f 10 e9 52
     RSP: 0018:ffffac4f43e53700 EFLAGS: 00010202
     RAX: 0000000000000001 RBX: ffff99d63a154d80 RCX: 0000000001f88e03
     RDX: 0000000001f88c03 RSI: ffff99d6560ef0c0 RDI: ffff99d63a101200
     RBP: ffff99d617721de0 R08: 0000000000000000 R09: 0000000000000318
     R10: 00000000f0000000 R11: 0000000000000001 R12: ffffffff880fabf0
     R13: dead000000000122 R14: dead000000000100 R15: ffff99d63a154d80
     FS:  00007ff3dbd5b740(0000) GS:ffff99d6560c0000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00001cb5de6a9000 CR3: 000000016eb6a004 CR4: 00000000001606e0
     Call Trace:
      __nf_tables_abort+0x3e3/0x6d0 [nf_tables]
      nft_request_module+0x6f/0x110 [nf_tables]
      nft_expr_type_request_module+0x28/0x50 [nf_tables]
      nf_tables_expr_parse+0x198/0x1f0 [nf_tables]
      nft_expr_init+0x3b/0xf0 [nf_tables]
      nft_dynset_init+0x1e2/0x410 [nf_tables]
      nf_tables_newrule+0x30a/0x930 [nf_tables]
      nfnetlink_rcv_batch+0x2a0/0x640 [nfnetlink]
      nfnetlink_rcv+0x125/0x171 [nfnetlink]
      netlink_unicast+0x179/0x210
      netlink_sendmsg+0x208/0x3d0
      sock_sendmsg+0x5e/0x60
      ____sys_sendmsg+0x21b/0x290
    
    Update comment on the code to describe the new behaviour.
    
    Reported-by: Marco Oliverio <marco.oliverio@tanaza.com>
    Fixes: 452238e8d5ff ("netfilter: nf_tables: add and use helper for module autoload")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1632efb3553b7e79ffc666ff5291705b4b87eb6c
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jan 16 09:06:50 2020 +0100

    netfilter: nf_tables: remove WARN and add NLA_STRING upper limits
    
    commit 9332d27d7918182add34e8043f6a754530fdd022 upstream.
    
    This WARN can trigger because some of the names fed to the module
    autoload function can be of arbitrary length.
    
    Remove the WARN and add limits for all NLA_STRING attributes.
    
    Reported-by: syzbot+0e63ae76d117ae1c3a01@syzkaller.appspotmail.com
    Fixes: 452238e8d5ffd8 ("netfilter: nf_tables: add and use helper for module autoload")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6de941ce70cd5c6d672f8af2d0a6dc83039a283c
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jan 16 08:44:11 2020 +0100

    netfilter: nft_tunnel: fix null-attribute check
    
    commit 1c702bf902bd37349f6d91cd7f4b372b1e46d0ed upstream.
    
    else we get null deref when one of the attributes is missing, both
    must be non-null.
    
    Reported-by: syzbot+76d0b80493ac881ff77b@syzkaller.appspotmail.com
    Fixes: aaecfdb5c5dd8ba ("netfilter: nf_tables: match on tunnel metadata")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3282417b91c09af9e327238edfd11deb887b83a
Author: Florian Westphal <fw@strlen.de>
Date:   Sat Jan 11 23:19:53 2020 +0100

    netfilter: arp_tables: init netns pointer in xt_tgdtor_param struct
    
    commit 212e7f56605ef9688d0846db60c6c6ec06544095 upstream.
    
    An earlier commit (1b789577f655060d98d20e,
    "netfilter: arp_tables: init netns pointer in xt_tgchk_param struct")
    fixed missing net initialization for arptables, but turns out it was
    incomplete.  We can get a very similar struct net NULL deref during
    error unwinding:
    
    general protection fault: 0000 [#1] PREEMPT SMP KASAN
    RIP: 0010:xt_rateest_put+0xa1/0x440 net/netfilter/xt_RATEEST.c:77
     xt_rateest_tg_destroy+0x72/0xa0 net/netfilter/xt_RATEEST.c:175
     cleanup_entry net/ipv4/netfilter/arp_tables.c:509 [inline]
     translate_table+0x11f4/0x1d80 net/ipv4/netfilter/arp_tables.c:587
     do_replace net/ipv4/netfilter/arp_tables.c:981 [inline]
     do_arpt_set_ctl+0x317/0x650 net/ipv4/netfilter/arp_tables.c:1461
    
    Also init the netns pointer in xt_tgdtor_param struct.
    
    Fixes: add67461240c1d ("netfilter: add struct net * to target parameters")
    Reported-by: syzbot+91bdd8eece0f6629ec8b@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcefdeff4de8a95f546455a25bc9ea328b778230
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Jan 10 11:53:08 2020 -0800

    netfilter: fix a use-after-free in mtype_destroy()
    
    commit c120959387efa51479056fd01dc90adfba7a590c upstream.
    
    map->members is freed by ip_set_free() right before using it in
    mtype_ext_cleanup() again. So we just have to move it down.
    
    Reported-by: syzbot+4c3cc6dbe7259dbf9054@syzkaller.appspotmail.com
    Fixes: 40cd63bf33b2 ("netfilter: ipset: Support extensions which need a per data destroy function")
    Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec4234e5dd66f326931b2e30e40bcc29002b1478
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon Jan 13 19:21:07 2020 +0100

    cfg80211: fix page refcount issue in A-MSDU decap
    
    commit 81c044fc3bdc5b7be967cd3682528ea94b58c06a upstream.
    
    The fragments attached to a skb can be part of a compound page. In that case,
    page_ref_inc will increment the refcount for the wrong page. Fix this by
    using get_page instead, which calls page_ref_inc on the compound head and
    also checks for overflow.
    
    Fixes: 2b67f944f88c ("cfg80211: reuse existing page fragments in A-MSDU rx")
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20200113182107.20461-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d6b96555fd839f704bffdeaeb2749cd807a1d43
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Jan 8 18:06:30 2020 +0100

    cfg80211: fix memory leak in cfg80211_cqm_rssi_update
    
    commit df16737d438f534d0cc9948c7c5158f1986c5c87 upstream.
    
    The per-tid statistics need to be released after the call to rdev_get_station
    
    Cc: stable@vger.kernel.org
    Fixes: 8689c051a201 ("cfg80211: dynamically allocate per-tid stats for station info")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20200108170630.33680-2-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5205825195a1af8d98ef2d2e3eb083f2f1bb4724
Author: Markus Theil <markus.theil@tu-ilmenau.de>
Date:   Wed Jan 8 12:55:36 2020 +0100

    cfg80211: fix deadlocks in autodisconnect work
    
    commit 5a128a088a2ab0b5190eeb232b5aa0b1017a0317 upstream.
    
    Use methods which do not try to acquire the wdev lock themselves.
    
    Cc: stable@vger.kernel.org
    Fixes: 37b1c004685a3 ("cfg80211: Support all iftypes in autodisconnect_wk")
    Signed-off-by: Markus Theil <markus.theil@tu-ilmenau.de>
    Link: https://lore.kernel.org/r/20200108115536.2262-1-markus.theil@tu-ilmenau.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 042a3a6d938481da53f04299bbfd43401c42d41b
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Jan 15 21:47:33 2020 +0100

    bpf: Fix incorrect verifier simulation of ARSH under ALU32
    
    commit 0af2ffc93a4b50948f9dad2786b7f1bd253bf0b9 upstream.
    
    Anatoly has been fuzzing with kBdysch harness and reported a hang in one
    of the outcomes:
    
      0: R1=ctx(id=0,off=0,imm=0) R10=fp0
      0: (85) call bpf_get_socket_cookie#46
      1: R0_w=invP(id=0) R10=fp0
      1: (57) r0 &= 808464432
      2: R0_w=invP(id=0,umax_value=808464432,var_off=(0x0; 0x30303030)) R10=fp0
      2: (14) w0 -= 810299440
      3: R0_w=invP(id=0,umax_value=4294967295,var_off=(0xcf800000; 0x3077fff0)) R10=fp0
      3: (c4) w0 s>>= 1
      4: R0_w=invP(id=0,umin_value=1740636160,umax_value=2147221496,var_off=(0x67c00000; 0x183bfff8)) R10=fp0
      4: (76) if w0 s>= 0x30303030 goto pc+216
      221: R0_w=invP(id=0,umin_value=1740636160,umax_value=2147221496,var_off=(0x67c00000; 0x183bfff8)) R10=fp0
      221: (95) exit
      processed 6 insns (limit 1000000) [...]
    
    Taking a closer look, the program was xlated as follows:
    
      # ./bpftool p d x i 12
      0: (85) call bpf_get_socket_cookie#7800896
      1: (bf) r6 = r0
      2: (57) r6 &= 808464432
      3: (14) w6 -= 810299440
      4: (c4) w6 s>>= 1
      5: (76) if w6 s>= 0x30303030 goto pc+216
      6: (05) goto pc-1
      7: (05) goto pc-1
      8: (05) goto pc-1
      [...]
      220: (05) goto pc-1
      221: (05) goto pc-1
      222: (95) exit
    
    Meaning, the visible effect is very similar to f54c7898ed1c ("bpf: Fix
    precision tracking for unbounded scalars"), that is, the fall-through
    branch in the instruction 5 is considered to be never taken given the
    conclusion from the min/max bounds tracking in w6, and therefore the
    dead-code sanitation rewrites it as goto pc-1. However, real-life input
    disagrees with verification analysis since a soft-lockup was observed.
    
    The bug sits in the analysis of the ARSH. The definition is that we shift
    the target register value right by K bits through shifting in copies of
    its sign bit. In adjust_scalar_min_max_vals(), we do first coerce the
    register into 32 bit mode, same happens after simulating the operation.
    However, for the case of simulating the actual ARSH, we don't take the
    mode into account and act as if it's always 64 bit, but location of sign
    bit is different:
    
      dst_reg->smin_value >>= umin_val;
      dst_reg->smax_value >>= umin_val;
      dst_reg->var_off = tnum_arshift(dst_reg->var_off, umin_val);
    
    Consider an unknown R0 where bpf_get_socket_cookie() (or others) would
    for example return 0xffff. With the above ARSH simulation, we'd see the
    following results:
    
      [...]
      1: R1=ctx(id=0,off=0,imm=0) R2_w=invP65535 R10=fp0
      1: (85) call bpf_get_socket_cookie#46
      2: R0_w=invP(id=0) R10=fp0
      2: (57) r0 &= 808464432
        -> R0_runtime = 0x3030
      3: R0_w=invP(id=0,umax_value=808464432,var_off=(0x0; 0x30303030)) R10=fp0
      3: (14) w0 -= 810299440
        -> R0_runtime = 0xcfb40000
      4: R0_w=invP(id=0,umax_value=4294967295,var_off=(0xcf800000; 0x3077fff0)) R10=fp0
                                  (0xffffffff)
      4: (c4) w0 s>>= 1
        -> R0_runtime = 0xe7da0000
      5: R0_w=invP(id=0,umin_value=1740636160,umax_value=2147221496,var_off=(0x67c00000; 0x183bfff8)) R10=fp0
                                  (0x67c00000)           (0x7ffbfff8)
      [...]
    
    In insn 3, we have a runtime value of 0xcfb40000, which is '1100 1111 1011
    0100 0000 0000 0000 0000', the result after the shift has 0xe7da0000 that
    is '1110 0111 1101 1010 0000 0000 0000 0000', where the sign bit is correctly
    retained in 32 bit mode. In insn4, the umax was 0xffffffff, and changed into
    0x7ffbfff8 after the shift, that is, '0111 1111 1111 1011 1111 1111 1111 1000'
    and means here that the simulation didn't retain the sign bit. With above
    logic, the updates happen on the 64 bit min/max bounds and given we coerced
    the register, the sign bits of the bounds are cleared as well, meaning, we
    need to force the simulation into s32 space for 32 bit alu mode.
    
    Verification after the fix below. We're first analyzing the fall-through branch
    on 32 bit signed >= test eventually leading to rejection of the program in this
    specific case:
    
      0: R1=ctx(id=0,off=0,imm=0) R10=fp0
      0: (b7) r2 = 808464432
      1: R1=ctx(id=0,off=0,imm=0) R2_w=invP808464432 R10=fp0
      1: (85) call bpf_get_socket_cookie#46
      2: R0_w=invP(id=0) R10=fp0
      2: (bf) r6 = r0
      3: R0_w=invP(id=0) R6_w=invP(id=0) R10=fp0
      3: (57) r6 &= 808464432
      4: R0_w=invP(id=0) R6_w=invP(id=0,umax_value=808464432,var_off=(0x0; 0x30303030)) R10=fp0
      4: (14) w6 -= 810299440
      5: R0_w=invP(id=0) R6_w=invP(id=0,umax_value=4294967295,var_off=(0xcf800000; 0x3077fff0)) R10=fp0
      5: (c4) w6 s>>= 1
      6: R0_w=invP(id=0) R6_w=invP(id=0,umin_value=3888119808,umax_value=4294705144,var_off=(0xe7c00000; 0x183bfff8)) R10=fp0
                                                  (0x67c00000)          (0xfffbfff8)
      6: (76) if w6 s>= 0x30303030 goto pc+216
      7: R0_w=invP(id=0) R6_w=invP(id=0,umin_value=3888119808,umax_value=4294705144,var_off=(0xe7c00000; 0x183bfff8)) R10=fp0
      7: (30) r0 = *(u8 *)skb[808464432]
      BPF_LD_[ABS|IND] uses reserved fields
      processed 8 insns (limit 1000000) [...]
    
    Fixes: 9cbe1f5a32dc ("bpf/verifier: improve register value range tracking with ARSH")
    Reported-by: Anatoly Trosinenko <anatoly.trosinenko@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200115204733.16648-1-daniel@iogearbox.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85ec3591a500ffc5f87bebff7c1fbb137113cfef
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Wed Nov 20 09:15:17 2019 -0600

    arm64: dts: agilex/stratix10: fix pmu interrupt numbers
    
    [ Upstream commit 210de0e996aee8e360ccc9e173fe7f0a7ed2f695 ]
    
    Fix up the correct interrupt numbers for the PMU unit on Agilex
    and Stratix10.
    
    Fixes: 78cd6a9d8e15 ("arm64: dts: Add base stratix 10 dtsi")
    Cc: linux-stable <stable@vger.kernel.org>
    Reported-by: Meng Li <Meng.Li@windriver.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee342a5b42c33dcace9f3fb556988c333565cd2c
Author: Kirill A. Shutemov <kirill@shutemov.name>
Date:   Mon Jan 13 16:29:10 2020 -0800

    mm/huge_memory.c: thp: fix conflict of above-47bit hint address and PMD alignment
    
    [ Upstream commit 97d3d0f9a1cf132c63c0b8b8bd497b8a56283dd9 ]
    
    Patch series "Fix two above-47bit hint address vs.  THP bugs".
    
    The two get_unmapped_area() implementations have to be fixed to provide
    THP-friendly mappings if above-47bit hint address is specified.
    
    This patch (of 2):
    
    Filesystems use thp_get_unmapped_area() to provide THP-friendly
    mappings.  For DAX in particular.
    
    Normally, the kernel doesn't create userspace mappings above 47-bit,
    even if the machine allows this (such as with 5-level paging on x86-64).
    Not all user space is ready to handle wide addresses.  It's known that
    at least some JIT compilers use higher bits in pointers to encode their
    information.
    
    Userspace can ask for allocation from full address space by specifying
    hint address (with or without MAP_FIXED) above 47-bits.  If the
    application doesn't need a particular address, but wants to allocate
    from whole address space it can specify -1 as a hint address.
    
    Unfortunately, this trick breaks thp_get_unmapped_area(): the function
    would not try to allocate PMD-aligned area if *any* hint address
    specified.
    
    Modify the routine to handle it correctly:
    
     - Try to allocate the space at the specified hint address with length
       padding required for PMD alignment.
     - If failed, retry without length padding (but with the same hint
       address);
     - If the returned address matches the hint address return it.
     - Otherwise, align the address as required for THP and return.
    
    The user specified hint address is passed down to get_unmapped_area() so
    above-47bit hint address will be taken into account without breaking
    alignment requirements.
    
    Link: http://lkml.kernel.org/r/20191220142548.7118-2-kirill.shutemov@linux.intel.com
    Fixes: b569bab78d8d ("x86/mm: Prepare to expose larger address space to userspace")
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reported-by: Thomas Willhalm <thomas.willhalm@intel.com>
    Tested-by: Dan Williams <dan.j.williams@intel.com>
    Cc: "Aneesh Kumar K . V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: "Bruggeman, Otto G" <otto.g.bruggeman@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4765814bc1869fac17192f9b77e0e57bed3b8c27
Author: Bharath Vedartham <linux.bhar@gmail.com>
Date:   Mon May 13 17:23:17 2019 -0700

    mm/huge_memory.c: make __thp_get_unmapped_area static
    
    [ Upstream commit b3b07077b01ecbbd98efede778c195567de25b71 ]
    
    __thp_get_unmapped_area is only used in mm/huge_memory.c.  Make it static.
    Tested by building and booting the kernel.
    
    Link: http://lkml.kernel.org/r/20190504102353.GA22525@bharath12345-Inspiron-5559
    Signed-off-by: Bharath Vedartham <linux.bhar@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 140e63d7fc48fb751fe73ca6be5d39d650cf3a43
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Wed Dec 18 11:17:42 2019 +0100

    net: stmmac: Enable 16KB buffer size
    
    commit b2f3a481c4cd62f78391b836b64c0a6e72b503d2 upstream.
    
    XGMAC supports maximum MTU that can go to 16KB. Lets add this check in
    the calculation of RX buffer size.
    
    Fixes: 7ac6653a085b ("stmmac: Move the STMicroelectronics driver")
    Signed-off-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76a8497e126bfbe9c21434ba258a92bf0c0bbaa3
Author: Jose Abreu <Jose.Abreu@synopsys.com>
Date:   Wed Dec 18 11:17:41 2019 +0100

    net: stmmac: 16KB buffer must be 16 byte aligned
    
    commit 8605131747e7e1fd8f6c9f97a00287aae2b2c640 upstream.
    
    The 16KB RX Buffer must also be 16 byte aligned. Fix it.
    
    Fixes: 7ac6653a085b ("stmmac: Move the STMicroelectronics driver")
    Signed-off-by: Jose Abreu <Jose.Abreu@synopsys.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c49df9177f0502e546738ae30f9d2e4ce137a92
Author: Marcel Ziswiler <marcel.ziswiler@toradex.com>
Date:   Wed Jan 8 17:12:31 2020 +0100

    ARM: dts: imx7: Fix Toradex Colibri iMX7S 256MB NAND flash support
    
    commit 4b0b97e651ecf29f20248420b52b6864fbd40bc2 upstream.
    
    Turns out when introducing the eMMC version the gpmi node required for
    NAND flash support got enabled exclusively on Colibri iMX7D 512MB.
    
    Fixes: f928a4a377e4 ("ARM: dts: imx7: add Toradex Colibri iMX7D 1GB (eMMC) support")
    Signed-off-by: Marcel Ziswiler <marcel.ziswiler@toradex.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e37de85277ac8359e0b02bb48aa299e1c75dc299
Author: Jagan Teki <jagan@amarulasolutions.com>
Date:   Mon Dec 30 17:30:19 2019 +0530

    ARM: dts: imx6q-icore-mipi: Use 1.5 version of i.Core MX6DL
    
    commit 4a132f60808ae3a751e107a373f8572012352d3c upstream.
    
    The EDIMM STARTER KIT i.Core 1.5 MIPI Evaluation is based on
    the 1.5 version of the i.Core MX6 cpu module. The 1.5 version
    differs from the original one for a few details, including the
    ethernet PHY interface clock provider.
    
    With this commit, the ethernet interface works properly:
    SMSC LAN8710/LAN8720 2188000.ethernet-1:00: attached PHY driver
    
    While before using the 1.5 version, ethernet failed to startup
    do to un-clocked PHY interface:
    fec 2188000.ethernet eth0: could not attach to PHY
    
    Similar fix has merged for i.Core MX6Q but missed to update for DL.
    
    Fixes: a8039f2dd089 ("ARM: dts: imx6dl: Add Engicam i.CoreM6 1.5 Quad/Dual MIPI starter kit support")
    Cc: Jacopo Mondi <jacopo@jmondi.org>
    Signed-off-by: Michael Trimarchi <michael@amarulasolutions.com>
    Signed-off-by: Jagan Teki <jagan@amarulasolutions.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16ba1ad0b9e8ce0e32a725ceb15573117f20af16
Author: Jacopo Mondi <jacopo@jmondi.org>
Date:   Tue Aug 14 15:21:45 2018 +0200

    ARM: dts: imx6qdl: Add Engicam i.Core 1.5 MX6
    
    commit 37c045d25e90038682b845de0a1db43c8301694d upstream.
    
    The 1.5 version of Engicam's i.Core MX6 CPU module features a different clock
    provider for the ethernet's PHY interface. Adjust the FEC ptp clock to
    reference CLK_ENET_REF clock source, and set SION bit of
    MX6QDL_PAD_GPIO_16__ENET_REF_CLK to adjust the input path of that pin.
    
    The newly introduced imx6ql-icore-1.5.dtsi allows to collect in a single
    place differences between version '1.0' and '1.5' of the module.
    
    Reviewed-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Jacopo Mondi <jacopo@jmondi.org>
    Cc: Daniel Díaz <daniel.diaz@linaro.org>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff86c5b68d6226e7e06c34f18e4397bd1a9a5560
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Mon Jan 13 16:29:23 2020 -0800

    mm/page-writeback.c: avoid potential division by zero in wb_min_max_ratio()
    
    commit 6d9e8c651dd979aa666bee15f086745f3ea9c4b3 upstream.
    
    Patch series "use div64_ul() instead of div_u64() if the divisor is
    unsigned long".
    
    We were first inspired by commit b0ab99e7736a ("sched: Fix possible divide
    by zero in avg_atom () calculation"), then refer to the recently analyzed
    mm code, we found this suspicious place.
    
     201                 if (min) {
     202                         min *= this_bw;
     203                         do_div(min, tot_bw);
     204                 }
    
    And we also disassembled and confirmed it:
    
      /usr/src/debug/kernel-4.9.168-016.ali3000/linux-4.9.168-016.ali3000.alios7.x86_64/mm/page-writeback.c: 201
      0xffffffff811c37da <__wb_calc_thresh+234>:      xor    %r10d,%r10d
      0xffffffff811c37dd <__wb_calc_thresh+237>:      test   %rax,%rax
      0xffffffff811c37e0 <__wb_calc_thresh+240>:      je 0xffffffff811c3800 <__wb_calc_thresh+272>
      /usr/src/debug/kernel-4.9.168-016.ali3000/linux-4.9.168-016.ali3000.alios7.x86_64/mm/page-writeback.c: 202
      0xffffffff811c37e2 <__wb_calc_thresh+242>:      imul   %r8,%rax
      /usr/src/debug/kernel-4.9.168-016.ali3000/linux-4.9.168-016.ali3000.alios7.x86_64/mm/page-writeback.c: 203
      0xffffffff811c37e6 <__wb_calc_thresh+246>:      mov    %r9d,%r10d    ---> truncates it to 32 bits here
      0xffffffff811c37e9 <__wb_calc_thresh+249>:      xor    %edx,%edx
      0xffffffff811c37eb <__wb_calc_thresh+251>:      div    %r10
      0xffffffff811c37ee <__wb_calc_thresh+254>:      imul   %rbx,%rax
      0xffffffff811c37f2 <__wb_calc_thresh+258>:      shr    $0x2,%rax
      0xffffffff811c37f6 <__wb_calc_thresh+262>:      mul    %rcx
      0xffffffff811c37f9 <__wb_calc_thresh+265>:      shr    $0x2,%rdx
      0xffffffff811c37fd <__wb_calc_thresh+269>:      mov    %rdx,%r10
    
    This series uses div64_ul() instead of div_u64() if the divisor is
    unsigned long, to avoid truncation to 32-bit on 64-bit platforms.
    
    This patch (of 3):
    
    The variables 'min' and 'max' are unsigned long and do_div truncates
    them to 32 bits, which means it can test non-zero and be truncated to
    zero for division.  Fix this issue by using div64_ul() instead.
    
    Link: http://lkml.kernel.org/r/20200102081442.8273-2-wenyang@linux.alibaba.com
    Fixes: 693108a8a667 ("writeback: make bdi->min/max_ratio handling cgroup writeback aware")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bff4167f637b94b386419303fe480a6584ceb5c
Author: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Date:   Wed Jan 8 21:07:32 2020 +0900

    btrfs: fix memory leak in qgroup accounting
    
    commit 26ef8493e1ab771cb01d27defca2fa1315dc3980 upstream.
    
    When running xfstests on the current btrfs I get the following splat from
    kmemleak:
    
    unreferenced object 0xffff88821b2404e0 (size 32):
      comm "kworker/u4:7", pid 26663, jiffies 4295283698 (age 8.776s)
      hex dump (first 32 bytes):
        01 00 00 00 00 00 00 00 10 ff fd 26 82 88 ff ff  ...........&....
        10 ff fd 26 82 88 ff ff 20 ff fd 26 82 88 ff ff  ...&.... ..&....
      backtrace:
        [<00000000f94fd43f>] ulist_alloc+0x25/0x60 [btrfs]
        [<00000000fd023d99>] btrfs_find_all_roots_safe+0x41/0x100 [btrfs]
        [<000000008f17bd32>] btrfs_find_all_roots+0x52/0x70 [btrfs]
        [<00000000b7660afb>] btrfs_qgroup_rescan_worker+0x343/0x680 [btrfs]
        [<0000000058e66778>] btrfs_work_helper+0xac/0x1e0 [btrfs]
        [<00000000f0188930>] process_one_work+0x1cf/0x350
        [<00000000af5f2f8e>] worker_thread+0x28/0x3c0
        [<00000000b55a1add>] kthread+0x109/0x120
        [<00000000f88cbd17>] ret_from_fork+0x35/0x40
    
    This corresponds to:
    
      (gdb) l *(btrfs_find_all_roots_safe+0x41)
      0x8d7e1 is in btrfs_find_all_roots_safe (fs/btrfs/backref.c:1413).
      1408
      1409            tmp = ulist_alloc(GFP_NOFS);
      1410            if (!tmp)
      1411                    return -ENOMEM;
      1412            *roots = ulist_alloc(GFP_NOFS);
      1413            if (!*roots) {
      1414                    ulist_free(tmp);
      1415                    return -ENOMEM;
      1416            }
      1417
    
    Following the lifetime of the allocated 'roots' ulist, it gets freed
    again in btrfs_qgroup_account_extent().
    
    But this does not happen if the function is called with the
    'BTRFS_FS_QUOTA_ENABLED' flag cleared, then btrfs_qgroup_account_extent()
    does a short leave and directly returns.
    
    Instead of directly returning we should jump to the 'out_free' in order to
    free all resources as expected.
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    [ add comment ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b5a4a18a762824998c6f962c5168ea9a0d61923
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Dec 18 17:20:29 2019 -0500

    btrfs: do not delete mismatched root refs
    
    commit 423a716cd7be16fb08690760691befe3be97d3fc upstream.
    
    btrfs_del_root_ref() will simply WARN_ON() if the ref doesn't match in
    any way, and then continue to delete the reference.  This shouldn't
    happen, we have these values because there's more to the reference than
    the original root and the sub root.  If any of these checks fail, return
    -ENOENT.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d110e93beb13bc9172f9137687bb2e533af487d8
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Dec 18 17:20:28 2019 -0500

    btrfs: fix invalid removal of root ref
    
    commit d49d3287e74ffe55ae7430d1e795e5f9bf7359ea upstream.
    
    If we have the following sequence of events
    
      btrfs sub create A
      btrfs sub create A/B
      btrfs sub snap A C
      mkdir C/foo
      mv A/B C/foo
      rm -rf *
    
    We will end up with a transaction abort.
    
    The reason for this is because we create a root ref for B pointing to A.
    When we create a snapshot of C we still have B in our tree, but because
    the root ref points to A and not C we will make it appear to be empty.
    
    The problem happens when we move B into C.  This removes the root ref
    for B pointing to A and adds a ref of B pointing to C.  When we rmdir C
    we'll see that we have a ref to our root and remove the root ref,
    despite not actually matching our reference name.
    
    Now btrfs_del_root_ref() allowing this to work is a bug as well, however
    we know that this inode does not actually point to a root ref in the
    first place, so we shouldn't be calling btrfs_del_root_ref() in the
    first place and instead simply look up our dir index for this item and
    do the rest of the removal.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dab7dd712e3ce5a11f821e0e5a9febaf48aec441
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Dec 18 17:20:27 2019 -0500

    btrfs: rework arguments of btrfs_unlink_subvol
    
    [ Upstream commit 045d3967b6920b663fc010ad414ade1b24143bd1 ]
    
    btrfs_unlink_subvol takes the name of the dentry and the root objectid
    based on what kind of inode this is, either a real subvolume link or a
    empty one that we inherited as a snapshot.  We need to fix how we unlink
    in the case for BTRFS_EMPTY_SUBVOL_DIR_OBJECTID in the future, so rework
    btrfs_unlink_subvol to just take the dentry and handle getting the right
    objectid given the type of inode this is.  There is no functional change
    here, simply pushing the work into btrfs_unlink_subvol() proper.
    
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc6030569ce1096cbb0a5fbd9ee75c74b155cdbc
Author: Adrian Huang <ahuang12@lenovo.com>
Date:   Mon Jan 13 16:29:32 2020 -0800

    mm: memcg/slab: call flush_memcg_workqueue() only if memcg workqueue is valid
    
    commit 2fe20210fc5f5e62644678b8f927c49f2c6f42a7 upstream.
    
    When booting with amd_iommu=off, the following WARNING message
    appears:
    
      AMD-Vi: AMD IOMMU disabled on kernel command-line
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 0 at kernel/workqueue.c:2772 flush_workqueue+0x42e/0x450
      Modules linked in:
      CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.5.0-rc3-amd-iommu #6
      Hardware name: Lenovo ThinkSystem SR655-2S/7D2WRCZ000, BIOS D8E101L-1.00 12/05/2019
      RIP: 0010:flush_workqueue+0x42e/0x450
      Code: ff 0f 0b e9 7a fd ff ff 4d 89 ef e9 33 fe ff ff 0f 0b e9 7f fd ff ff 0f 0b e9 bc fd ff ff 0f 0b e9 a8 fd ff ff e8 52 2c fe ff <0f> 0b 31 d2 48 c7 c6 e0 88 c5 95 48 c7 c7 d8 ad f0 95 e8 19 f5 04
      Call Trace:
       kmem_cache_destroy+0x69/0x260
       iommu_go_to_state+0x40c/0x5ab
       amd_iommu_prepare+0x16/0x2a
       irq_remapping_prepare+0x36/0x5f
       enable_IR_x2apic+0x21/0x172
       default_setup_apic_routing+0x12/0x6f
       apic_intr_mode_init+0x1a1/0x1f1
       x86_late_time_init+0x17/0x1c
       start_kernel+0x480/0x53f
       secondary_startup_64+0xb6/0xc0
      ---[ end trace 30894107c3749449 ]---
      x2apic: IRQ remapping doesn't support X2APIC mode
      x2apic disabled
    
    The warning is caused by the calling of 'kmem_cache_destroy()'
    in free_iommu_resources(). Here is the call path:
    
      free_iommu_resources
        kmem_cache_destroy
          flush_memcg_workqueue
            flush_workqueue
    
    The root cause is that the IOMMU subsystem runs before the workqueue
    subsystem, which the variable 'wq_online' is still 'false'.  This leads
    to the statement 'if (WARN_ON(!wq_online))' in flush_workqueue() is
    'true'.
    
    Since the variable 'memcg_kmem_cache_wq' is not allocated during the
    time, it is unnecessary to call flush_memcg_workqueue().  This prevents
    the WARNING message triggered by flush_workqueue().
    
    Link: http://lkml.kernel.org/r/20200103085503.1665-1-ahuang12@lenovo.com
    Fixes: 92ee383f6daab ("mm: fix race between kmem_cache destroy, create and deactivate")
    Signed-off-by: Adrian Huang <ahuang12@lenovo.com>
    Reported-by: Xiaochun Lee <lixc17@lenovo.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Joerg Roedel <jroedel@suse.de>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3071de25fbe1bc02146963ae753a0f2b9a85335
Author: Kirill A. Shutemov <kirill@shutemov.name>
Date:   Mon Jan 13 16:29:13 2020 -0800

    mm/shmem.c: thp, shmem: fix conflict of above-47bit hint address and PMD alignment
    
    commit 991589974d9c9ecb24ee3799ec8c415c730598a2 upstream.
    
    Shmem/tmpfs tries to provide THP-friendly mappings if huge pages are
    enabled.  But it doesn't work well with above-47bit hint address.
    
    Normally, the kernel doesn't create userspace mappings above 47-bit,
    even if the machine allows this (such as with 5-level paging on x86-64).
    Not all user space is ready to handle wide addresses.  It's known that
    at least some JIT compilers use higher bits in pointers to encode their
    information.
    
    Userspace can ask for allocation from full address space by specifying
    hint address (with or without MAP_FIXED) above 47-bits.  If the
    application doesn't need a particular address, but wants to allocate
    from whole address space it can specify -1 as a hint address.
    
    Unfortunately, this trick breaks THP alignment in shmem/tmp:
    shmem_get_unmapped_area() would not try to allocate PMD-aligned area if
    *any* hint address specified.
    
    This can be fixed by requesting the aligned area if the we failed to
    allocated at user-specified hint address.  The request with inflated
    length will also take the user-specified hint address.  This way we will
    not lose an allocation request from the full address space.
    
    [kirill@shutemov.name: fold in a fixup]
      Link: http://lkml.kernel.org/r/20191223231309.t6bh5hkbmokihpfu@box
    Link: http://lkml.kernel.org/r/20191220142548.7118-3-kirill.shutemov@linux.intel.com
    Fixes: b569bab78d8d ("x86/mm: Prepare to expose larger address space to userspace")
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: "Willhalm, Thomas" <thomas.willhalm@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: "Bruggeman, Otto G" <otto.g.bruggeman@intel.com>
    Cc: "Aneesh Kumar K . V" <aneesh.kumar@linux.vnet.ibm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8caa8b36f845f053d5f725fd3eb1fa9db5377f6e
Author: Jin Yao <yao.jin@linux.intel.com>
Date:   Fri Dec 20 09:37:19 2019 +0800

    perf report: Fix incorrectly added dimensions as switch perf data file
    
    commit 0feba17bd7ee3b7e03d141f119049dcc23efa94e upstream.
    
    We observed an issue that was some extra columns displayed after switching
    perf data file in browser. The steps to reproduce:
    
    1. perf record -a -e cycles,instructions -- sleep 3
    2. perf report --group
    3. In browser, we use hotkey 's' to switch to another perf.data
    4. Now in browser, the extra columns 'Self' and 'Children' are displayed.
    
    The issue is setup_sorting() executed again after repeat path, so dimensions
    are added again.
    
    This patch checks the last key returned from __cmd_report(). If it's
    K_SWITCH_INPUT_DATA, skips the setup_sorting().
    
    Fixes: ad0de0971b7f ("perf report: Enable the runtime switching of perf data file")
    Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Feng Tang <feng.tang@intel.com>
    Cc: Jin Yao <yao.jin@intel.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20191220013722.20592-1-yao.jin@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e4d65dede490e8697a8f3f468158d4ac0945b04
Author: Yuya Fujita <fujita.yuya@fujitsu.com>
Date:   Thu Dec 19 08:08:32 2019 +0000

    perf hists: Fix variable name's inconsistency in hists__for_each() macro
    
    commit 55347ec340af401437680fd0e88df6739a967f9f upstream.
    
    Variable names are inconsistent in hists__for_each macro().
    
    Due to this inconsistency, the macro replaces its second argument with
    "fmt" regardless of its original name.
    
    So far it works because only "fmt" is passed to the second argument.
    However, this behavior is not expected and should be fixed.
    
    Fixes: f0786af536bb ("perf hists: Introduce hists__for_each_format macro")
    Fixes: aa6f50af822a ("perf hists: Introduce hists__for_each_sort_list macro")
    Signed-off-by: Yuya Fujita <fujita.yuya@fujitsu.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/OSAPR01MB1588E1C47AC22043175DE1B2E8520@OSAPR01MB1588.jpnprd01.prod.outlook.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb8e8f427f63632be055460d40088cd26c7ca905
Author: Shakeel Butt <shakeelb@google.com>
Date:   Thu Jan 2 08:58:44 2020 -0800

    x86/resctrl: Fix potential memory leak
    
    commit ab6a2114433a3b5b555983dcb9b752a85255f04b upstream.
    
    set_cache_qos_cfg() is leaking memory when the given level is not
    RDT_RESOURCE_L3 or RDT_RESOURCE_L2. At the moment, this function is
    called with only valid levels but move the allocation after the valid
    level checks in order to make it more robust and future proof.
    
     [ bp: Massage commit message. ]
    
    Fixes: 99adde9b370de ("x86/intel_rdt: Enable L2 CDP in MSR IA32_L2_QOS_CFG")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Reinette Chatre <reinette.chatre@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20200102165844.133133-1-shakeelb@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 107fb2906db14ac9fc14f780f2a92418974a0c66
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Jan 7 21:50:14 2020 +0800

    drm/i915: Add missing include file <linux/math64.h>
    
    commit ea38aa2ea5b0969776f0a47f174ce928a22be803 upstream.
    
    Fix build error:
    ./drivers/gpu/drm/i915/selftests/i915_random.h: In function i915_prandom_u32_max_state:
    ./drivers/gpu/drm/i915/selftests/i915_random.h:48:23: error:
     implicit declaration of function mul_u32_u32; did you mean mul_u64_u32_div? [-Werror=implicit-function-declaration]
      return upper_32_bits(mul_u32_u32(prandom_u32_state(state), ep_ro));
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 7ce5b6850b47 ("drm/i915/selftests: Use mul_u32_u32() for 32b x 32b -> 64b result")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200107135014.36472-1-yuehaibing@huawei.com
    (cherry picked from commit 62bf5465b26d1f502430b9c654be7d16bf2e242d)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 820ea0e533c2592e921dcc5bb73ee72116d68920
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Dec 24 14:29:09 2019 +0100

    x86/efistub: Disable paging at mixed mode entry
    
    commit 4911ee401b7ceff8f38e0ac597cbf503d71e690c upstream.
    
    The EFI mixed mode entry code goes through the ordinary startup_32()
    routine before jumping into the kernel's EFI boot code in 64-bit
    mode. The 32-bit startup code must be entered with paging disabled,
    but this is not documented as a requirement for the EFI handover
    protocol, and so we should disable paging explicitly when entering
    the kernel from 32-bit EFI firmware.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: <stable@vger.kernel.org>
    Cc: Arvind Sankar <nivedita@alum.mit.edu>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20191224132909.102540-4-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d83975502f358ff718b4860d3c70dc912cdd3c9
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Wed Jan 15 16:05:16 2020 -0600

    x86/CPU/AMD: Ensure clearing of SME/SEV features is maintained
    
    commit a006483b2f97af685f0e60f3a547c9ad4c9b9e94 upstream.
    
    If the SME and SEV features are present via CPUID, but memory encryption
    support is not enabled (MSR 0xC001_0010[23]), the feature flags are cleared
    using clear_cpu_cap(). However, if get_cpu_cap() is later called, these
    feature flags will be reset back to present, which is not desired.
    
    Change from using clear_cpu_cap() to setup_clear_cpu_cap() so that the
    clearing of the flags is maintained.
    
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org> # 4.16.x-
    Link: https://lkml.kernel.org/r/226de90a703c3c0be5a49565047905ac4e94e8f3.1579125915.git.thomas.lendacky@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e22f494a9ebe24d8b2fa1d191e1fe6a469c7ad0
Author: Qian Cai <cai@lca.pw>
Date:   Tue Dec 10 22:30:42 2019 -0500

    x86/resctrl: Fix an imbalance in domain_remove_cpu()
    
    commit e278af89f1ba0a9ef20947db6afc2c9afa37e85b upstream.
    
    A system that supports resource monitoring may have multiple resources
    while not all of these resources are capable of monitoring. Monitoring
    related state is initialized only for resources that are capable of
    monitoring and correspondingly this state should subsequently only be
    removed from these resources that are capable of monitoring.
    
    domain_add_cpu() calls domain_setup_mon_state() only when r->mon_capable
    is true where it will initialize d->mbm_over. However,
    domain_remove_cpu() calls cancel_delayed_work(&d->mbm_over) without
    checking r->mon_capable resulting in an attempt to cancel d->mbm_over on
    all resources, even those that never initialized d->mbm_over because
    they are not capable of monitoring. Hence, it triggers a debugobjects
    warning when offlining CPUs because those timer debugobjects are never
    initialized:
    
      ODEBUG: assert_init not available (active state 0) object type:
      timer_list hint: 0x0
      WARNING: CPU: 143 PID: 789 at lib/debugobjects.c:484
      debug_print_object
      Hardware name: HP Synergy 680 Gen9/Synergy 680 Gen9 Compute Module, BIOS I40 05/23/2018
      RIP: 0010:debug_print_object
      Call Trace:
      debug_object_assert_init
      del_timer
      try_to_grab_pending
      cancel_delayed_work
      resctrl_offline_cpu
      cpuhp_invoke_callback
      cpuhp_thread_fun
      smpboot_thread_fn
      kthread
      ret_from_fork
    
    Fixes: e33026831bdb ("x86/intel_rdt/mbm: Handle counter overflow")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Reinette Chatre <reinette.chatre@intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: john.stultz@linaro.org
    Cc: sboyd@kernel.org
    Cc: <stable@vger.kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: tj@kernel.org
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Vikas Shivappa <vikas.shivappa@linux.intel.com>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/20191211033042.2188-1-cai@lca.pw
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ecd8db998718a42a3be460f1163ee00858480a43
Author: Keiya Nobuta <nobuta.keiya@fujitsu.com>
Date:   Thu Jan 9 14:14:48 2020 +0900

    usb: core: hub: Improved device recognition on remote wakeup
    
    commit 9c06ac4c83df6d6fbdbf7488fbad822b4002ba19 upstream.
    
    If hub_activate() is called before D+ has stabilized after remote
    wakeup, the following situation might occur:
    
             __      ___________________
            /  \    /
    D+   __/    \__/
    
    Hub  _______________________________
              |  ^   ^           ^
              |  |   |           |
    Host _____v__|___|___________|______
              |  |   |           |
              |  |   |           \-- Interrupt Transfer (*3)
              |  |    \-- ClearPortFeature (*2)
              |   \-- GetPortStatus (*1)
              \-- Host detects remote wakeup
    
    - D+ goes high, Host starts running by remote wakeup
    - D+ is not stable, goes low
    - Host requests GetPortStatus at (*1) and gets the following hub status:
      - Current Connect Status bit is 0
      - Connect Status Change bit is 1
    - D+ stabilizes, goes high
    - Host requests ClearPortFeature and thus Connect Status Change bit is
      cleared at (*2)
    - After waiting 100 ms, Host starts the Interrupt Transfer at (*3)
    - Since the Connect Status Change bit is 0, Hub returns NAK.
    
    In this case, port_event() is not called in hub_event() and Host cannot
    recognize device. To solve this issue, flag change_bits even if only
    Connect Status Change bit is 1 when got in the first GetPortStatus.
    
    This issue occurs rarely because it only if D+ changes during a very
    short time between GetPortStatus and ClearPortFeature. However, it is
    fatal if it occurs in embedded system.
    
    Signed-off-by: Keiya Nobuta <nobuta.keiya@fujitsu.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200109051448.28150-1-nobuta.keiya@fujitsu.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21cd79a27ab400b4cad037856288001c8230cf21
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Wed Jan 15 14:42:34 2020 +0100

    ptrace: reintroduce usage of subjective credentials in ptrace_has_cap()
    
    commit 6b3ad6649a4c75504edeba242d3fd36b3096a57f upstream.
    
    Commit 69f594a38967 ("ptrace: do not audit capability check when outputing /proc/pid/stat")
    introduced the ability to opt out of audit messages for accesses to various
    proc files since they are not violations of policy.  While doing so it
    somehow switched the check from ns_capable() to
    has_ns_capability{_noaudit}(). That means it switched from checking the
    subjective credentials of the task to using the objective credentials. This
    is wrong since. ptrace_has_cap() is currently only used in
    ptrace_may_access() And is used to check whether the calling task (subject)
    has the CAP_SYS_PTRACE capability in the provided user namespace to operate
    on the target task (object). According to the cred.h comments this would
    mean the subjective credentials of the calling task need to be used.
    This switches ptrace_has_cap() to use security_capable(). Because we only
    call ptrace_has_cap() in ptrace_may_access() and in there we already have a
    stable reference to the calling task's creds under rcu_read_lock() there's
    no need to go through another series of dereferences and rcu locking done
    in ns_capable{_noaudit}().
    
    As one example where this might be particularly problematic, Jann pointed
    out that in combination with the upcoming IORING_OP_OPENAT feature, this
    bug might allow unprivileged users to bypass the capability checks while
    asynchronously opening files like /proc/*/mem, because the capability
    checks for this would be performed against kernel credentials.
    
    To illustrate on the former point about this being exploitable: When
    io_uring creates a new context it records the subjective credentials of the
    caller. Later on, when it starts to do work it creates a kernel thread and
    registers a callback. The callback runs with kernel creds for
    ktask->real_cred and ktask->cred. To prevent this from becoming a
    full-blown 0-day io_uring will call override_cred() and override
    ktask->cred with the subjective credentials of the creator of the io_uring
    instance. With ptrace_has_cap() currently looking at ktask->real_cred this
    override will be ineffective and the caller will be able to open arbitray
    proc files as mentioned above.
    Luckily, this is currently not exploitable but will turn into a 0-day once
    IORING_OP_OPENAT{2} land in v5.6. Fix it now!
    
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Eric Paris <eparis@redhat.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Serge Hallyn <serge@hallyn.com>
    Reviewed-by: Jann Horn <jannh@google.com>
    Fixes: 69f594a38967 ("ptrace: do not audit capability check when outputing /proc/pid/stat")
    Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87ca9aaf0c0042f526452e3baa95317f9049613f
Author: Micah Morton <mortonm@chromium.org>
Date:   Mon Jan 7 16:10:53 2019 -0800

    LSM: generalize flag passing to security_capable
    
    [ Upstream commit c1a85a00ea66cb6f0bd0f14e47c28c2b0999799f ]
    
    This patch provides a general mechanism for passing flags to the
    security_capable LSM hook. It replaces the specific 'audit' flag that is
    used to tell security_capable whether it should log an audit message for
    the given capability check. The reason for generalizing this flag
    passing is so we can add an additional flag that signifies whether
    security_capable is being called by a setid syscall (which is needed by
    the proposed SafeSetID LSM).
    
    Signed-off-by: Micah Morton <mortonm@chromium.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: James Morris <james.morris@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 991d8c73d53bb4f05b54d2cffdbd7285aaba3d77
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Dec 17 14:21:23 2019 +0530

    ARM: dts: am571x-idk: Fix gpios property to have the correct gpio number
    
    commit 0c4eb2a6b3c6b0facd0a3bccda5db22e7b3b6f96 upstream.
    
    commit d23f3839fe97d8dce03d ("ARM: dts: DRA7: Add pcie1 dt node for
    EP mode") while adding the dt node for EP mode for DRA7 platform,
    added rc node for am571x-idk and populated gpios property with
    "gpio3 23". However the GPIO_PCIE_SWRST line is actually connected
    to "gpio5 18". Fix it here. (The patch adding "gpio3 23" was tested
    with another am57x board in EP mode which doesn't rely on reset from
    host).
    
    Cc: stable <stable@vger.kernel.org> # 4.14+
    Fixes: d23f3839fe97d8dce03d ("ARM: dts: DRA7: Add pcie1 dt node for EP mode")
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7f79052d1afc2a80a81f45e15e0d741ba15dc2b
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Jan 15 08:35:25 2020 -0500

    block: fix an integer overflow in logical block size
    
    commit ad6bf88a6c19a39fb3b0045d78ea880325dfcf15 upstream.
    
    Logical block size has type unsigned short. That means that it can be at
    most 32768. However, there are architectures that can run with 64k pages
    (for example arm64) and on these architectures, it may be possible to
    create block devices with 64k block size.
    
    For exmaple (run this on an architecture with 64k pages):
    
    Mount will fail with this error because it tries to read the superblock using 2-sector
    access:
      device-mapper: writecache: I/O is not aligned, sector 2, size 1024, block size 65536
      EXT4-fs (dm-0): unable to read superblock
    
    This patch changes the logical block size from unsigned short to unsigned
    int to avoid the overflow.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d9fd1f4aee052b031b9cc03a645991ab190b2cc
Author: Jari Ruusu <jari.ruusu@gmail.com>
Date:   Sun Jan 12 15:00:53 2020 +0200

    Fix built-in early-load Intel microcode alignment
    
    commit f5ae2ea6347a308cfe91f53b53682ce635497d0d upstream.
    
    Intel Software Developer's Manual, volume 3, chapter 9.11.6 says:
    
     "Note that the microcode update must be aligned on a 16-byte boundary
      and the size of the microcode update must be 1-KByte granular"
    
    When early-load Intel microcode is loaded from initramfs, userspace tool
    'iucode_tool' has already 16-byte aligned those microcode bits in that
    initramfs image.  Image that was created something like this:
    
     iucode_tool --write-earlyfw=FOO.cpio microcode-files...
    
    However, when early-load Intel microcode is loaded from built-in
    firmware BLOB using CONFIG_EXTRA_FIRMWARE= kernel config option, that
    16-byte alignment is not guaranteed.
    
    Fix this by forcing all built-in firmware BLOBs to 16-byte alignment.
    
    [ If we end up having other firmware with much bigger alignment
      requirements, we might need to introduce some method for the firmware
      to specify it, this is the minimal "just increase the alignment a bit
      to account for this one special case" patch    - Linus ]
    
    Signed-off-by: Jari Ruusu <jari.ruusu@gmail.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7d4d1ad9fbc8c8a5f5ffa154b6fb23bbca724eb
Author: Stefan Mavrodiev <stefan@olimex.com>
Date:   Fri Nov 29 13:39:41 2019 +0200

    arm64: dts: allwinner: a64: olinuxino: Fix SDIO supply regulator
    
    commit 3d615c2fc2d111b51d2e20516b920138d4ae29a2 upstream.
    
    A64-OLinuXino uses DCDC1 (VCC-IO) for MMC1 supply. In commit 916b68cfe4b5
    ("arm64: dts: a64-olinuxino: Enable RTL8723BS WiFi") ALDO2 is set, which is
    VCC-PL. Since DCDC1 is always present, the boards are working without a
    problem.
    
    This patch sets the correct regulator.
    
    Fixes: 916b68cfe4b5 ("arm64: dts: a64-olinuxino: Enable RTL8723BS WiFi")
    Cc: stable@vger.kernel.org # v4.16+
    Signed-off-by: Stefan Mavrodiev <stefan@olimex.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa7e8db2b0d12e3f117428caecb6c1451409cb97
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jan 14 09:39:53 2020 +0100

    ALSA: usb-audio: fix sync-ep altsetting sanity check
    
    commit 5d1b71226dc4d44b4b65766fa9d74492f9d4587b upstream.
    
    The altsetting sanity check in set_sync_ep_implicit_fb_quirk() was
    checking for there to be at least one altsetting but then went on to
    access the second one, which may not exist.
    
    This could lead to random slab data being used to initialise the sync
    endpoint in snd_usb_add_endpoint().
    
    Fixes: c75a8a7ae565 ("ALSA: snd-usb: add support for implicit feedback")
    Fixes: ca10a7ebdff1 ("ALSA: usb-audio: FT C400 sync playback EP to capture EP")
    Fixes: 5e35dc0338d8 ("ALSA: usb-audio: add implicit fb quirk for Behringer UFX1204")
    Fixes: 17f08b0d9aaf ("ALSA: usb-audio: add implicit fb quirk for Axe-Fx II")
    Fixes: 103e9625647a ("ALSA: usb-audio: simplify set_sync_ep_implicit_fb_quirk")
    Cc: stable <stable@vger.kernel.org>     # 3.5
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200114083953.1106-1-johan@kernel.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20f2e4c228c712158113583947f4e16691e951f6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jan 15 21:37:33 2020 +0100

    ALSA: seq: Fix racy access for queue timer in proc read
    
    commit 60adcfde92fa40fcb2dbf7cc52f9b096e0cd109a upstream.
    
    snd_seq_info_timer_read() reads the information of the timer assigned
    for each queue, but it's done in a racy way which may lead to UAF as
    spotted by syzkaller.
    
    This patch applies the missing q->timer_mutex lock while accessing the
    timer object as well as a slight code change to adapt the standard
    coding style.
    
    Reported-by: syzbot+2b2ef983f973e5c40943@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200115203733.26530-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e68bc5ef7dcb69fbd3009914129e2c1ddda58a6b
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Jan 13 17:46:28 2020 +0900

    ALSA: dice: fix fallback from protocol extension into limited functionality
    
    commit 3e2dc6bdb56893bc28257e482e1dbe5d39f313df upstream.
    
    At failure of attempt to detect protocol extension, ALSA dice driver
    should be fallback to limited functionality. However it's not.
    
    This commit fixes it.
    
    Cc: <stable@vger.kernel.org> # v4.18+
    Fixes: 58579c056c1c9 ("ALSA: dice: use extended protocol to detect available stream formats")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200113084630.14305-2-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a75df0c648dff084d889d99dd186f96dce2f976
Author: Marek Vasut <marex@denx.de>
Date:   Fri Dec 20 10:11:24 2019 +0100

    ARM: dts: imx6q-dhcom: Fix SGTL5000 VDDIO regulator connection
    
    commit fe6a6689d1815b63528796886853890d8ee7f021 upstream.
    
    The SGTL5000 VDDIO is connected to the PMIC SW2 output, not to
    a fixed 3V3 rail. Describe this correctly in the DT.
    
    Fixes: 52c7a088badd ("ARM: dts: imx6q: Add support for the DHCOM iMX6 SoM and PDK2")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Ludwig Zenz <lzenz@dh-electronics.com>
    Cc: NXP Linux Team <linux-imx@nxp.com>
    To: linux-arm-kernel@lists.infradead.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 095fa8925029567351e1adc8ac9c0d9bc63b49a6
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Sat Jan 11 17:40:04 2020 +0100

    ASoC: msm8916-wcd-analog: Fix MIC BIAS Internal1
    
    commit 057efcf9faea4769cf1020677d93d040db9b23f3 upstream.
    
    MIC BIAS Internal1 is broken at the moment because we always
    enable the internal rbias resistor to the TX2 line (connected to
    the headset microphone), rather than enabling the resistor connected
    to TX1.
    
    Move the RBIAS code to pm8916_wcd_analog_enable_micbias_int1/2()
    to fix this.
    
    Fixes: 585e881e5b9e ("ASoC: codecs: Add msm8916-wcd analog codec")
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20200111164006.43074-3-stephan@gerhold.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e3df2d7f188e833d408897749dca839dde2a4ac
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Sat Jan 11 17:40:03 2020 +0100

    ASoC: msm8916-wcd-analog: Fix selected events for MIC BIAS External1
    
    commit e0beec88397b163c7c4ea6fcfb67e8e07a2671dc upstream.
    
    MIC BIAS External1 sets pm8916_wcd_analog_enable_micbias_ext1()
    as event handler, which ends up in pm8916_wcd_analog_enable_micbias_ext().
    
    But pm8916_wcd_analog_enable_micbias_ext() only handles the POST_PMU
    event, which is not specified in the event flags for MIC BIAS External1.
    This means that the code in the event handler is never actually run.
    
    Set SND_SOC_DAPM_POST_PMU as the only event for the handler to fix this.
    
    Fixes: 585e881e5b9e ("ASoC: codecs: Add msm8916-wcd analog codec")
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20200111164006.43074-2-stephan@gerhold.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dae5041c65545ac65d610375b4ac30b00f174a3
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jan 14 15:34:14 2020 +0300

    scsi: mptfusion: Fix double fetch bug in ioctl
    
    commit 28d76df18f0ad5bcf5fa48510b225f0ed262a99b upstream.
    
    Tom Hatskevich reported that we look up "iocp" then, in the called
    functions we do a second copy_from_user() and look it up again.
    The problem that could cause is:
    
    drivers/message/fusion/mptctl.c
       674          /* All of these commands require an interrupt or
       675           * are unknown/illegal.
       676           */
       677          if ((ret = mptctl_syscall_down(iocp, nonblock)) != 0)
                                                   ^^^^
    We take this lock.
    
       678                  return ret;
       679
       680          if (cmd == MPTFWDOWNLOAD)
       681                  ret = mptctl_fw_download(arg);
                                                     ^^^
    Then the user memory changes and we look up "iocp" again but a different
    one so now we are holding the incorrect lock and have a race condition.
    
       682          else if (cmd == MPTCOMMAND)
       683                  ret = mptctl_mpt_command(arg);
    
    The security impact of this bug is not as bad as it could have been
    because these operations are all privileged and root already has
    enormous destructive power.  But it's still worth fixing.
    
    This patch passes the "iocp" pointer to the functions to avoid the
    second lookup.  That deletes 100 lines of code from the driver so
    it's a nice clean up as well.
    
    Link: https://lore.kernel.org/r/20200114123414.GA7957@kadam
    Reported-by: Tom Hatskevich <tom2001tom.23@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac13a00acd3f108179ee944e7805643f4410c35c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 7 21:15:49 2020 +0100

    scsi: fnic: fix invalid stack access
    
    commit 42ec15ceaea74b5f7a621fc6686cbf69ca66c4cf upstream.
    
    gcc -O3 warns that some local variables are not properly initialized:
    
    drivers/scsi/fnic/vnic_dev.c: In function 'fnic_dev_hang_notify':
    drivers/scsi/fnic/vnic_dev.c:511:16: error: 'a0' is used uninitialized in this function [-Werror=uninitialized]
      vdev->args[0] = *a0;
      ~~~~~~~~~~~~~~^~~~~
    drivers/scsi/fnic/vnic_dev.c:691:6: note: 'a0' was declared here
      u64 a0, a1;
          ^~
    drivers/scsi/fnic/vnic_dev.c:512:16: error: 'a1' is used uninitialized in this function [-Werror=uninitialized]
      vdev->args[1] = *a1;
      ~~~~~~~~~~~~~~^~~~~
    drivers/scsi/fnic/vnic_dev.c:691:10: note: 'a1' was declared here
      u64 a0, a1;
              ^~
    drivers/scsi/fnic/vnic_dev.c: In function 'fnic_dev_mac_addr':
    drivers/scsi/fnic/vnic_dev.c:512:16: error: 'a1' is used uninitialized in this function [-Werror=uninitialized]
      vdev->args[1] = *a1;
      ~~~~~~~~~~~~~~^~~~~
    drivers/scsi/fnic/vnic_dev.c:698:10: note: 'a1' was declared here
      u64 a0, a1;
              ^~
    
    Apparently the code relies on the local variables occupying adjacent memory
    locations in the same order, but this is of course not guaranteed.
    
    Use an array of two u64 variables where needed to make it work correctly.
    
    I suspect there is also an endianness bug here, but have not digged in deep
    enough to be sure.
    
    Fixes: 5df6d737dd4b ("[SCSI] fnic: Add new Cisco PCI-Express FCoE HBA")
    Fixes: mmtom ("init/Kconfig: enable -O3 for all arches")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200107201602.4096790-1-arnd@arndb.de
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 392950d7a9aecfcf091338c42f348ef3e01e2425
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 17 15:35:26 2020 +0100

    USB: serial: quatech2: handle unbound ports
    
    commit 9715a43eea77e42678a1002623f2d9a78f5b81a1 upstream.
    
    Check for NULL port data in the modem- and line-status handlers to avoid
    dereferencing a NULL pointer in the unlikely case where a port device
    isn't bound to a driver (e.g. after an allocation failure on port
    probe).
    
    Note that the other (stubbed) event handlers qt2_process_xmit_empty()
    and qt2_process_flush() would need similar sanity checks in case they
    are ever implemented.
    
    Fixes: f7a33e608d9a ("USB: serial: add quatech2 usb to serial driver")
    Cc: stable <stable@vger.kernel.org>     # 3.5
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 655e0b391a03bb0057eb0b0d06f3ca089f82a026
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 17 10:50:25 2020 +0100

    USB: serial: keyspan: handle unbound ports
    
    commit 3018dd3fa114b13261e9599ddb5656ef97a1fa17 upstream.
    
    Check for NULL port data in the control URB completion handlers to avoid
    dereferencing a NULL pointer in the unlikely case where a port device
    isn't bound to a driver (e.g. after an allocation failure on port
    probe()).
    
    Fixes: 0ca1268e109a ("USB Serial Keyspan: add support for USA-49WG & USA-28XG")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5f7cbcd3b5d77a38a8ff209d0152b13e895172e
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 17 10:50:24 2020 +0100

    USB: serial: io_edgeport: add missing active-port sanity check
    
    commit 1568c58d11a7c851bd09341aeefd6a1c308ac40d upstream.
    
    The driver receives the active port number from the device, but never
    made sure that the port number was valid. This could lead to a
    NULL-pointer dereference or memory corruption in case a device sends
    data for an invalid port.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dbc5ed3b0bfc4b0c0e77e8e6f9aeb90c421a528
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 17 10:50:23 2020 +0100

    USB: serial: io_edgeport: handle unbound ports on URB completion
    
    commit e37d1aeda737a20b1846a91a3da3f8b0f00cf690 upstream.
    
    Check for NULL port data in the shared interrupt and bulk completion
    callbacks to avoid dereferencing a NULL pointer in case a device sends
    data for a port device which isn't bound to a driver (e.g. due to a
    malicious device having unexpected endpoints or after an allocation
    failure on port probe).
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b057d1268f27f96d9290e184b47c21308c3f92b
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 17 10:50:22 2020 +0100

    USB: serial: ch341: handle unbound port at reset_resume
    
    commit 4d5ef53f75c22d28f490bcc5c771fcc610a9afa4 upstream.
    
    Check for NULL port data in reset_resume() to avoid dereferencing a NULL
    pointer in case the port device isn't bound to a driver (e.g. after a
    failed control request at port probe).
    
    Fixes: 1ded7ea47b88 ("USB: ch341 serial: fix port number changed after resume")
    Cc: stable <stable@vger.kernel.org>     # 2.6.30
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b86caef6d48e16f25dea661bae41f199598f359
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Jan 16 17:07:05 2020 +0100

    USB: serial: suppress driver bind attributes
    
    commit fdb838efa31e1ed9a13ae6ad0b64e30fdbd00570 upstream.
    
    USB-serial drivers must not be unbound from their ports before the
    corresponding USB driver is unbound from the parent interface so
    suppress the bind and unbind attributes.
    
    Unbinding a serial driver while it's port is open is a sure way to
    trigger a crash as any driver state is released on unbind while port
    hangup is handled on the parent USB interface level. Drivers for
    multiport devices where ports share a resource such as an interrupt
    endpoint also generally cannot handle individual ports going away.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 845c8f493c12b112a8252491ddf2fb4e21414f8d
Author: Reinhard Speyerer <rspmn@arcor.de>
Date:   Tue Jan 14 14:29:23 2020 +0100

    USB: serial: option: add support for Quectel RM500Q in QDL mode
    
    commit f3eaabbfd093c93d791eb930cc68d9b15246a65e upstream.
    
    Add support for Quectel RM500Q in QDL mode.
    
    T:  Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 24 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0800 Rev= 0.00
    S:  Manufacturer=Qualcomm CDMA Technologies MSM
    S:  Product=QUSB_BULK_SN:xxxxxxxx
    S:  SerialNumber=xxxxxxxx
    C:* #Ifs= 1 Cfg#= 1 Atr=a0 MxPwr=  2mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=10 Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    It is assumed that the ZLP flag required for other Qualcomm-based
    5G devices also applies to Quectel RM500Q.
    
    Signed-off-by: Reinhard Speyerer <rspmn@arcor.de>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfb62fbcd8db36032e2cb8bf3c1e21d07b9067bf
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 13 18:22:13 2020 +0100

    USB: serial: opticon: fix control-message timeouts
    
    commit 5e28055f340275a8616eee88ef19186631b4d136 upstream.
    
    The driver was issuing synchronous uninterruptible control requests
    without using a timeout. This could lead to the driver hanging
    on open() or tiocmset() due to a malfunctioning (or malicious) device
    until the device is physically disconnected.
    
    The USB upper limit of five seconds per request should be more than
    enough.
    
    Fixes: 309a057932ab ("USB: opticon: add rts and cts support")
    Cc: stable <stable@vger.kernel.org>     # 2.6.39
    Cc: Martin Jansen <martin.jansen@opticon.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 805083d10ace7df8ec2d822b73a314d62aed7f1e
Author: Kristian Evensen <kristian.evensen@gmail.com>
Date:   Mon Jan 13 15:14:05 2020 +0100

    USB: serial: option: Add support for Quectel RM500Q
    
    commit accf227de4d211b52c830a58b2df00d5739f2389 upstream.
    
    RM500Q is a 5G module from Quectel, supporting both standalone and
    non-standalone modes. Unlike other recent Quectel modems, it is possible
    to identify the diagnostic interface (bInterfaceProtocol is unique).
    Thus, there is no need to check for the number of endpoints or reserve
    interfaces. The interface number is still dynamic though, so matching on
    interface number is not possible and two entries have to be added to the
    table.
    
    Output from usb-devices with all interfaces enabled (order is diag,
    nmea, at_port, modem, rmnet and adb):
    
    Bus 004 Device 007: ID 2c7c:0800 Quectel Wireless Solutions Co., Ltd.
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               3.20
      bDeviceClass            0 (Defined at Interface level)
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0         9
      idVendor           0x2c7c Quectel Wireless Solutions Co., Ltd.
      idProduct          0x0800
      bcdDevice            4.14
      iManufacturer           1 Quectel
      iProduct                2 LTE-A Module
      iSerial                 3 40046d60
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength          328
        bNumInterfaces          6
        bConfigurationValue     1
        iConfiguration          4 DIAG_SER_RMNET
        bmAttributes         0xa0
          (Bus Powered)
          Remote Wakeup
        MaxPower              224mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     48
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol    255 Vendor Specific Protocol
          iInterface              5 CDEV Serial
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x88  EP 8 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0008  1x 8 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x8e  EP 14 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x0f  EP 15 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               2
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass     66
          bInterfaceProtocol      1
          iInterface              6 ADB Interface
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x05  EP 5 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x89  EP 9 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
    Binary Object Store Descriptor:
      bLength                 5
      bDescriptorType        15
      wTotalLength           42
      bNumDeviceCaps          3
      USB 2.0 Extension Device Capability:
        bLength                 7
        bDescriptorType        16
        bDevCapabilityType      2
        bmAttributes   0x00000006
          Link Power Management (LPM) Supported
      SuperSpeed USB Device Capability:
        bLength                10
        bDescriptorType        16
        bDevCapabilityType      3
        bmAttributes         0x00
        wSpeedsSupported   0x000f
          Device can operate at Low Speed (1Mbps)
          Device can operate at Full Speed (12Mbps)
          Device can operate at High Speed (480Mbps)
          Device can operate at SuperSpeed (5Gbps)
        bFunctionalitySupport   1
          Lowest fully-functional device speed is Full Speed (12Mbps)
        bU1DevExitLat           1 micro seconds
        bU2DevExitLat         500 micro seconds
      ** UNRECOGNIZED:  14 10 0a 00 01 00 00 00 00 11 00 00 30 40 0a 00 b0 40 0a 00
    Device Status:     0x0000
      (Bus Powered)
    
    Signed-off-by: Kristian Evensen <kristian.evensen@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69874bf1faf47ea32470e7535fbdd6280bee217d
Author: Jerónimo Borque <jeronimo@borque.com.ar>
Date:   Thu Jan 9 12:23:34 2020 -0300

    USB: serial: simple: Add Motorola Solutions TETRA MTP3xxx and MTP85xx
    
    commit 260e41ac4dd3e5acb90be624c03ba7f019615b75 upstream.
    
    Add device-ids for the Motorola Solutions TETRA radios MTP3xxx series
    and MTP85xx series
    
    $ lsusb -vd 0cad:
    
    Bus 001 Device 009: ID 0cad:9015 Motorola CGISS TETRA PEI interface
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass            0
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0        64
      idVendor           0x0cad Motorola CGISS
      idProduct          0x9015
      bcdDevice           24.16
      iManufacturer           1
      iProduct                2
      iSerial                 0
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x0037
        bNumInterfaces          2
        bConfigurationValue     1
        iConfiguration          3
        bmAttributes         0x80
          (Bus Powered)
        MaxPower              500mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               0
    
    Bus 001 Device 010: ID 0cad:9013 Motorola CGISS TETRA PEI interface
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass            0
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0        64
      idVendor           0x0cad Motorola CGISS
      idProduct          0x9013
      bcdDevice           24.16
      iManufacturer           1
      iProduct                2
      iSerial                 0
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x0037
        bNumInterfaces          2
        bConfigurationValue     1
        iConfiguration          3
        bmAttributes         0x80
          (Bus Powered)
        MaxPower              500mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
    
    Signed-off-by: Jerónimo Borque <jeronimo@borque.com.ar>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5d1fe944803f619dc3b2a93584c8f935a86f507
Author: Lars Möllendorf <lars.moellendorf@plating.de>
Date:   Fri Dec 13 14:50:55 2019 +0100

    iio: buffer: align the size of scan bytes to size of the largest element
    
    commit 883f616530692d81cb70f8a32d85c0d2afc05f69 upstream.
    
    Previous versions of `iio_compute_scan_bytes` only aligned each element
    to its own length (i.e. its own natural alignment). Because multiple
    consecutive sets of scan elements are buffered this does not work in
    case the computed scan bytes do not align with the natural alignment of
    the first scan element in the set.
    
    This commit fixes this by aligning the scan bytes to the natural
    alignment of the largest scan element in the set.
    
    Fixes: 959d2952d124 ("staging:iio: make iio_sw_buffer_preenable much more general.")
    Signed-off-by: Lars Möllendorf <lars.moellendorf@plating.de>
    Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7acabcf1a541ad8b3ec15a1b91fd0b1c7df48aeb
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Sun Jan 5 11:27:53 2020 +0100

    ASoC: msm8916-wcd-digital: Reset RX interpolation path after use
    
    commit 85578bbd642f65065039b1765ebe1a867d5435b0 upstream.
    
    For some reason, attempting to route audio through QDSP6 on MSM8916
    causes the RX interpolation path to get "stuck" after playing audio
    a few times. In this situation, the analog codec part is still working,
    but the RX path in the digital codec stops working, so you only hear
    the analog parts powering up. After a reboot everything works again.
    
    So far I was not able to reproduce the problem when using lpass-cpu.
    
    The downstream kernel driver avoids this by resetting the RX
    interpolation path after use. In mainline we do something similar
    for the TX decimator (LPASS_CDC_CLK_TX_RESET_B1_CTL), but the
    interpolator reset (LPASS_CDC_CLK_RX_RESET_CTL) got lost when the
    msm8916-wcd driver was split into analog and digital.
    
    Fix this problem by adding the reset to
    msm8916_wcd_digital_enable_interpolator().
    
    Fixes: 150db8c5afa1 ("ASoC: codecs: Add msm8916-wcd digital codec")
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20200105102753.83108-1-stephan@gerhold.net
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f047e38c60c43ca46b798d2a54fda7a2c19f64c
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Dec 25 08:34:29 2019 -0800

    clk: Don't try to enable critical clocks if prepare failed
    
    commit 12ead77432f2ce32dea797742316d15c5800cb32 upstream.
    
    The following traceback is seen if a critical clock fails to prepare.
    
    bcm2835-clk 3f101000.cprman: plld: couldn't lock PLL
    ------------[ cut here ]------------
    Enabling unprepared plld_per
    WARNING: CPU: 1 PID: 1 at drivers/clk/clk.c:1014 clk_core_enable+0xcc/0x2c0
    ...
    Call trace:
     clk_core_enable+0xcc/0x2c0
     __clk_register+0x5c4/0x788
     devm_clk_hw_register+0x4c/0xb0
     bcm2835_register_pll_divider+0xc0/0x150
     bcm2835_clk_probe+0x134/0x1e8
     platform_drv_probe+0x50/0xa0
     really_probe+0xd4/0x308
     driver_probe_device+0x54/0xe8
     device_driver_attach+0x6c/0x78
     __driver_attach+0x54/0xd8
    ...
    
    Check return values from clk_core_prepare() and clk_core_enable() and
    bail out if any of those functions returns an error.
    
    Cc: Jerome Brunet <jbrunet@baylibre.com>
    Fixes: 99652a469df1 ("clk: migrate the count of orphaned clocks at init")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lkml.kernel.org/r/20191225163429.29694-1-linux@roeck-us.net
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e1d9fc94960bde3aea5f9b5c458905a3dfa8bc9
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Dec 13 00:08:14 2019 +0100

    ARM: dts: imx6q-dhcom: fix rtc compatible
    
    commit 7d7778b1396bc9e2a3875009af522beb4ea9355a upstream.
    
    The only correct and documented compatible string for the rv3029 is
    microcrystal,rv3029. Fix it up.
    
    Fixes: 52c7a088badd ("ARM: dts: imx6q: Add support for the DHCOM iMX6 SoM and PDK2")
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 097145777c495f9a927ea4a176998ec530afcffc
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Nov 30 19:53:37 2019 +0100

    dt-bindings: reset: meson8b: fix duplicate reset IDs
    
    commit 4881873f4cc1460f63d85fa81363d56be328ccdc upstream.
    
    According to the public S805 datasheet the RESET2 register uses the
    following bits for the PIC_DC, PSC and NAND reset lines:
    - PIC_DC is at bit 3 (meaning: RESET_VD_RMEM + 3)
    - PSC is at bit 4 (meaning: RESET_VD_RMEM + 4)
    - NAND is at bit 5 (meaning: RESET_VD_RMEM + 4)
    
    Update the reset IDs of these three reset lines so they don't conflict
    with PIC_DC and map to the actual hardware reset lines.
    
    Fixes: 79795e20a184eb ("dt-bindings: reset: Add bindings for the Meson SoC Reset Controller")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8a82587f62d48c622533ed92be2545e52784c5e
Author: Georgi Djakov <georgi.djakov@linaro.org>
Date:   Tue Nov 26 17:34:37 2019 +0200

    clk: qcom: gcc-sdm845: Add missing flag to votable GDSCs
    
    commit 5e82548e26ef62e257dc2ff37c11acb5eb72728e upstream.
    
    On sdm845 devices, during boot we see the following warnings (unless we
    have added 'pd_ignore_unused' to the kernel command line):
            hlos1_vote_mmnoc_mmu_tbu_sf_gdsc status stuck at 'on'
            hlos1_vote_mmnoc_mmu_tbu_hf1_gdsc status stuck at 'on'
            hlos1_vote_mmnoc_mmu_tbu_hf0_gdsc status stuck at 'on'
            hlos1_vote_aggre_noc_mmu_tbu2_gdsc status stuck at 'on'
            hlos1_vote_aggre_noc_mmu_tbu1_gdsc status stuck at 'on'
            hlos1_vote_aggre_noc_mmu_pcie_tbu_gdsc status stuck at 'on'
            hlos1_vote_aggre_noc_mmu_audio_tbu_gdsc status stuck at 'on'
    
    As the name of these GDSCs suggests, they are "votable" and in downstream
    DT, they all have the property "qcom,no-status-check-on-disable", which
    means that we should not poll the status bit when we disable them.
    
    Luckily the VOTABLE flag already exists and it does exactly what we need,
    so let's make use of it to make the warnings disappear.
    
    Fixes: 06391eddb60a ("clk: qcom: Add Global Clock controller (GCC) driver for SDM845")
    Reported-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
    Link: https://lkml.kernel.org/r/20191126153437.11808-1-georgi.djakov@linaro.org
    Tested-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3adc34ef8d47511f033c3072fadfd5a814a048b6
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sun Nov 17 16:41:54 2019 +0100

    ARM: dts: meson8: fix the size of the PMU registers
    
    commit 46c9585ed4af688ff1be6d4e76d7ed2f04de4fba upstream.
    
    The PMU registers are at least 0x18 bytes wide. Meson8b already uses a
    size of 0x18. The structure of the PMU registers on Meson8 and Meson8b
    is similar but not identical.
    
    Meson8 and Meson8b have the following registers in common (starting at
    AOBUS + 0xe0):
      #define AO_RTI_PWR_A9_CNTL0 0xe0 (0x38 << 2)
      #define AO_RTI_PWR_A9_CNTL1 0xe4 (0x39 << 2)
      #define AO_RTI_GEN_PWR_SLEEP0 0xe8 (0x3a << 2)
      #define AO_RTI_GEN_PWR_ISO0 0x4c (0x3b << 2)
    
    Meson8b additionally has these three registers:
      #define AO_RTI_GEN_PWR_ACK0 0xf0 (0x3c << 2)
      #define AO_RTI_PWR_A9_MEM_PD0 0xf4 (0x3d << 2)
      #define AO_RTI_PWR_A9_MEM_PD1 0xf8 (0x3e << 2)
    
    Thus we can assume that the register size of the PMU IP blocks is
    identical on both SoCs (and Meson8 just contains some reserved registers
    in that area) because the CEC registers start right after the PMU
    (AO_RTI_*) registers at AOBUS + 0x100 (0x40 << 2).
    
    The upcoming power domain driver will need to read and write the
    AO_RTI_GEN_PWR_SLEEP0 and AO_RTI_GEN_PWR_ISO0 registers, so the updated
    size is needed for that driver to work.
    
    Fixes: 4a5a27116b447d ("ARM: dts: meson8: add support for booting the secondary CPU cores")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
