commit 6e282ba6ff6bb52afa545d4a29a45bd2eb8a7f4c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Sep 16 08:23:24 2019 +0200

    Linux 5.2.15

commit e86a7794620a589212636e0f370c98c451c7f065
Author: yongduan <yongduan@tencent.com>
Date:   Wed Sep 11 17:44:24 2019 +0800

    vhost: make sure log_num < in_num
    
    commit 060423bfdee3f8bc6e2c1bac97de24d5415e2bc4 upstream.
    
    The code assumes log_num < in_num everywhere, and that is true as long as
    in_num is incremented by descriptor iov count, and log_num by 1. However
    this breaks if there's a zero sized descriptor.
    
    As a result, if a malicious guest creates a vring desc with desc.len = 0,
    it may cause the host kernel to crash by overflowing the log array. This
    bug can be triggered during the VM migration.
    
    There's no need to log when desc.len = 0, so just don't increment log_num
    in this case.
    
    Fixes: 3a4d5c94e959 ("vhost_net: a kernel-level virtio server")
    Cc: stable@vger.kernel.org
    Reviewed-by: Lidong Chen <lidongchen@tencent.com>
    Signed-off-by: ruippan <ruippan@tencent.com>
    Signed-off-by: yongduan <yongduan@tencent.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6b72d0920f4beec34d28e72874515ce3c3b1571
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 11 17:42:00 2019 +0100

    Btrfs: fix unwritten extent buffers and hangs on future writeback attempts
    
    commit 18dfa7117a3f379862dcd3f67cadd678013bb9dd upstream.
    
    The lock_extent_buffer_io() returns 1 to the caller to tell it everything
    went fine and the callers needs to start writeback for the extent buffer
    (submit a bio, etc), 0 to tell the caller everything went fine but it does
    not need to start writeback for the extent buffer, and a negative value if
    some error happened.
    
    When it's about to return 1 it tries to lock all pages, and if a try lock
    on a page fails, and we didn't flush any existing bio in our "epd", it
    calls flush_write_bio(epd) and overwrites the return value of 1 to 0 or
    an error. The page might have been locked elsewhere, not with the goal
    of starting writeback of the extent buffer, and even by some code other
    than btrfs, like page migration for example, so it does not mean the
    writeback of the extent buffer was already started by some other task,
    so returning a 0 tells the caller (btree_write_cache_pages()) to not
    start writeback for the extent buffer. Note that epd might currently have
    either no bio, so flush_write_bio() returns 0 (success) or it might have
    a bio for another extent buffer with a lower index (logical address).
    
    Since we return 0 with the EXTENT_BUFFER_WRITEBACK bit set on the
    extent buffer and writeback is never started for the extent buffer,
    future attempts to writeback the extent buffer will hang forever waiting
    on that bit to be cleared, since it can only be cleared after writeback
    completes. Such hang is reported with a trace like the following:
    
      [49887.347053] INFO: task btrfs-transacti:1752 blocked for more than 122 seconds.
      [49887.347059]       Not tainted 5.2.13-gentoo #2
      [49887.347060] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
      [49887.347062] btrfs-transacti D    0  1752      2 0x80004000
      [49887.347064] Call Trace:
      [49887.347069]  ? __schedule+0x265/0x830
      [49887.347071]  ? bit_wait+0x50/0x50
      [49887.347072]  ? bit_wait+0x50/0x50
      [49887.347074]  schedule+0x24/0x90
      [49887.347075]  io_schedule+0x3c/0x60
      [49887.347077]  bit_wait_io+0x8/0x50
      [49887.347079]  __wait_on_bit+0x6c/0x80
      [49887.347081]  ? __lock_release.isra.29+0x155/0x2d0
      [49887.347083]  out_of_line_wait_on_bit+0x7b/0x80
      [49887.347084]  ? var_wake_function+0x20/0x20
      [49887.347087]  lock_extent_buffer_for_io+0x28c/0x390
      [49887.347089]  btree_write_cache_pages+0x18e/0x340
      [49887.347091]  do_writepages+0x29/0xb0
      [49887.347093]  ? kmem_cache_free+0x132/0x160
      [49887.347095]  ? convert_extent_bit+0x544/0x680
      [49887.347097]  filemap_fdatawrite_range+0x70/0x90
      [49887.347099]  btrfs_write_marked_extents+0x53/0x120
      [49887.347100]  btrfs_write_and_wait_transaction.isra.4+0x38/0xa0
      [49887.347102]  btrfs_commit_transaction+0x6bb/0x990
      [49887.347103]  ? start_transaction+0x33e/0x500
      [49887.347105]  transaction_kthread+0x139/0x15c
    
    So fix this by not overwriting the return value (ret) with the result
    from flush_write_bio(). We also need to clear the EXTENT_BUFFER_WRITEBACK
    bit in case flush_write_bio() returns an error, otherwise it will hang
    any future attempts to writeback the extent buffer, and undo all work
    done before (set back EXTENT_BUFFER_DIRTY, etc).
    
    This is a regression introduced in the 5.2 kernel.
    
    Fixes: 2e3c25136adfb ("btrfs: extent_io: add proper error handling to lock_extent_buffer_for_io()")
    Fixes: f4340622e0226 ("btrfs: extent_io: Move the BUG_ON() in flush_write_bio() one level up")
    Reported-by: Zdenek Sojka <zsojka@seznam.cz>
    Link: https://lore.kernel.org/linux-btrfs/GpO.2yos.3WGDOLpx6t%7D.1TUDYM@seznam.cz/T/#u
    Reported-by: Stefan Priebe - Profihost AG <s.priebe@profihost.ag>
    Link: https://lore.kernel.org/linux-btrfs/5c4688ac-10a7-fb07-70e8-c5d31a3fbb38@profihost.ag/T/#t
    Reported-by: Drazen Kacar <drazen.kacar@oradian.com>
    Link: https://lore.kernel.org/linux-btrfs/DB8PR03MB562876ECE2319B3E579590F799C80@DB8PR03MB5628.eurprd03.prod.outlook.com/
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=204377
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 051d85e1b2d32cdf5dd9b723c8b9dea220a43f3b
Author: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
Date:   Fri Jun 28 15:07:20 2019 +0300

    drm/i915/icl: whitelist PS_(DEPTH|INVOCATION)_COUNT
    
    [ Upstream commit cf8f9aa1eda7d916bd23f6b8c226404deb11690c ]
    
    The same tests failing on CFL+ platforms are also failing on ICL.
    Documentation doesn't list the
    WaAllowPMDepthAndInvocationCountAccessFromUMD workaround for ICL but
    applying it fixes the same tests as CFL.
    
    v2: Use only one whitelist entry (Lionel)
    
    Signed-off-by: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
    Tested-by: Anuj Phogat <anuj.phogat@gmail.com>
    Cc: stable@vger.kernel.org # 6883eab27481: drm/i915: Support flags in whitlist WAs
    Cc: stable@vger.kernel.org
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190628120720.21682-4-lionel.g.landwerlin@intel.com
    (cherry picked from commit 3fe0107e45ab396342497e06b8924cdd485cde3b)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b50b2beafe72117580ee1157d093138e2161774
Author: John Harrison <John.C.Harrison@Intel.com>
Date:   Mon Jun 17 18:01:07 2019 -0700

    drm/i915: Add whitelist workarounds for ICL
    
    [ Upstream commit 7b3d406310983a89ed7a1ecdd115efbe12b0ded5 ]
    
    Updated whitelist table for ICL.
    
    v2: Reduce changes to just those required for media driver until
    the selftest can be updated to support the new features of the
    other entries.
    
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Signed-off-by: Robert M. Fosha <robert.m.fosha@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190618010108.27499-4-John.C.Harrison@Intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a22fc7cea6afb8901210e23a08e1350a589f0f39
Author: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
Date:   Fri Jun 28 15:07:19 2019 +0300

    drm/i915: whitelist PS_(DEPTH|INVOCATION)_COUNT
    
    [ Upstream commit 6ce5bfe936ac31d5c52c4b1328d0bfda5f97e7ca ]
    
    CFL:C0+ changed the status of those registers which are now
    blacklisted by default.
    
    This is breaking a number of CTS tests on GL & Vulkan :
    
      KHR-GL45.pipeline_statistics_query_tests_ARB.functional_fragment_shader_invocations (GL)
    
      dEQP-VK.query_pool.statistics_query.fragment_shader_invocations.* (Vulkan)
    
    v2: Only use one whitelist entry (Lionel)
    
    Bspec: 14091
    Signed-off-by: Lionel Landwerlin <lionel.g.landwerlin@intel.com>
    Cc: stable@vger.kernel.org # 6883eab27481: drm/i915: Support flags in whitlist WAs
    Cc: stable@vger.kernel.org
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190628120720.21682-3-lionel.g.landwerlin@intel.com
    (cherry picked from commit 2c903da50f5a9522b134e488bd0f92646c46f3c0)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abb4c8b10fc7cfba06acf3869345ebed7dc27088
Author: John Harrison <John.C.Harrison@Intel.com>
Date:   Mon Jun 17 18:01:06 2019 -0700

    drm/i915: Support whitelist workarounds on all engines
    
    [ Upstream commit ebd2de47a19f1c17ae47f8331aae3cd436766663 ]
    
    Newer hardware requires setting up whitelists on engines other than
    render. So, extend the whitelist code to support all engines.
    
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Signed-off-by: Robert M. Fosha <robert.m.fosha@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190618010108.27499-3-John.C.Harrison@Intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d05cba91e1ded34321cb0c9f7062e1621d524b91
Author: John Harrison <John.C.Harrison@Intel.com>
Date:   Mon Jun 17 18:01:05 2019 -0700

    drm/i915: Support flags in whitlist WAs
    
    [ Upstream commit 6883eab274813d158bfcfb499aa225ece61c0f29 ]
    
    Newer hardware adds flags to the whitelist work-around register. These
    allow per access direction privileges and ranges.
    
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Signed-off-by: Robert M. Fosha <robert.m.fosha@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190618010108.27499-2-John.C.Harrison@Intel.com
    (cherry picked from commit 5380d0b781c491d94b4f4690ecf9762c1946c4ec)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b1bac380cdc11e0d9f2b2374dd560d35d69d794
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Tue Jul 23 17:11:01 2019 +0200

    virtio/s390: fix race on airq_areas[]
    
    [ Upstream commit 4f419eb14272e0698e8c55bb5f3f266cc2a21c81 ]
    
    The access to airq_areas was racy ever since the adapter interrupts got
    introduced to virtio-ccw, but since commit 39c7dcb15892 ("virtio/s390:
    make airq summary indicators DMA") this became an issue in practice as
    well. Namely before that commit the airq_info that got overwritten was
    still functional. After that commit however the two infos share a
    summary_indicator, which aggravates the situation. Which means
    auto-online mechanism occasionally hangs the boot with virtio_blk.
    
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Reported-by: Marc Hartmayer <mhartmay@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 96b14536d935 ("virtio-ccw: virtio-ccw adapter interrupt support.")
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8db034bb05b16bfbfe3c685df2e384fb747aedae
Author: André Draszik <git@andred.net>
Date:   Sat Aug 10 16:07:58 2019 +0100

    usb: chipidea: imx: fix EPROBE_DEFER support during driver probe
    
    If driver probe needs to be deferred, e.g. because ci_hdrc_add_device()
    isn't ready yet, this driver currently misbehaves badly:
        a) success is still reported to the driver core (meaning a 2nd
           probe attempt will never be done), leaving the driver in
           a dysfunctional state and the hardware unusable
    
        b) driver remove / shutdown OOPSes:
        [  206.786916] Unable to handle kernel paging request at virtual address fffffdff
        [  206.794148] pgd = 880b9f82
        [  206.796890] [fffffdff] *pgd=abf5e861, *pte=00000000, *ppte=00000000
        [  206.803179] Internal error: Oops: 37 [#1] PREEMPT SMP ARM
        [  206.808581] Modules linked in: wl18xx evbug
        [  206.813308] CPU: 1 PID: 1 Comm: systemd-shutdow Not tainted 4.19.35+gf345c93b4195 #1
        [  206.821053] Hardware name: Freescale i.MX7 Dual (Device Tree)
        [  206.826813] PC is at ci_hdrc_remove_device+0x4/0x20
        [  206.831699] LR is at ci_hdrc_imx_remove+0x20/0xe8
        [  206.836407] pc : [<805cd4b0>]    lr : [<805d62cc>]    psr: 20000013
        [  206.842678] sp : a806be40  ip : 00000001  fp : 80adbd3c
        [  206.847906] r10: 80b1b794  r9 : 80d5dfe0  r8 : a8192c44
        [  206.853136] r7 : 80db93a0  r6 : a8192c10  r5 : a8192c00  r4 : a93a4a00
        [  206.859668] r3 : 00000000  r2 : a8192ce4  r1 : ffffffff  r0 : fffffdfb
        [  206.866201] Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
        [  206.873341] Control: 10c5387d  Table: a9e0c06a  DAC: 00000051
        [  206.879092] Process systemd-shutdow (pid: 1, stack limit = 0xb271353c)
        [  206.885624] Stack: (0xa806be40 to 0xa806c000)
        [  206.889992] be40: a93a4a00 805d62cc a8192c1c a8170e10 a8192c10 8049a490 80d04d08 00000000
        [  206.898179] be60: 00000000 80d0da2c fee1dead 00000000 a806a000 00000058 00000000 80148b08
        [  206.906366] be80: 01234567 80148d8c a9858600 00000000 00000000 00000000 00000000 80d04d08
        [  206.914553] bea0: 00000000 00000000 a82741e0 a9858600 00000024 00000002 a9858608 00000005
        [  206.922740] bec0: 0000001e 8022c058 00000000 00000000 a806bf14 a9858600 00000000 a806befc
        [  206.930927] bee0: a806bf78 00000000 7ee12c30 8022c18c a806bef8 a806befc 00000000 00000001
        [  206.939115] bf00: 00000000 00000024 a806bf14 00000005 7ee13b34 7ee12c68 00000004 7ee13f20
        [  206.947302] bf20: 00000010 7ee12c7c 00000005 7ee12d04 0000000a 76e7dc00 00000001 80d0f140
        [  206.955490] bf40: ab637880 a974de40 60000013 80d0f140 ab6378a0 80d04d08 a8080470 a9858600
        [  206.963677] bf60: a9858600 00000000 00000000 8022c24c 00000000 80144310 00000000 00000000
        [  206.971864] bf80: 80101204 80d04d08 00000000 80d04d08 00000000 00000000 00000003 00000058
        [  206.980051] bfa0: 80101204 80101000 00000000 00000000 fee1dead 28121969 01234567 00000000
        [  206.988237] bfc0: 00000000 00000000 00000003 00000058 00000000 00000000 00000000 00000000
        [  206.996425] bfe0: 0049ffb0 7ee13d58 0048a84b 76f245a6 60000030 fee1dead 00000000 00000000
        [  207.004622] [<805cd4b0>] (ci_hdrc_remove_device) from [<805d62cc>] (ci_hdrc_imx_remove+0x20/0xe8)
        [  207.013509] [<805d62cc>] (ci_hdrc_imx_remove) from [<8049a490>] (device_shutdown+0x16c/0x218)
        [  207.022050] [<8049a490>] (device_shutdown) from [<80148b08>] (kernel_restart+0xc/0x50)
        [  207.029980] [<80148b08>] (kernel_restart) from [<80148d8c>] (sys_reboot+0xf4/0x1f0)
        [  207.037648] [<80148d8c>] (sys_reboot) from [<80101000>] (ret_fast_syscall+0x0/0x54)
        [  207.045308] Exception stack(0xa806bfa8 to 0xa806bff0)
        [  207.050368] bfa0:                   00000000 00000000 fee1dead 28121969 01234567 00000000
        [  207.058554] bfc0: 00000000 00000000 00000003 00000058 00000000 00000000 00000000 00000000
        [  207.066737] bfe0: 0049ffb0 7ee13d58 0048a84b 76f245a6
        [  207.071799] Code: ebffffa8 e3a00000 e8bd8010 e92d4010 (e5904004)
        [  207.078021] ---[ end trace be47424e3fd46e9f ]---
        [  207.082647] Kernel panic - not syncing: Fatal exception
        [  207.087894] ---[ end Kernel panic - not syncing: Fatal exception ]---
    
        c) the error path in combination with driver removal causes
           imbalanced calls to the clk_*() and pm_()* APIs
    
    a) happens because the original intended return value is
       overwritten (with 0) by the return code of
       regulator_disable() in ci_hdrc_imx_probe()'s error path
    b) happens because ci_pdev is -EPROBE_DEFER, which causes
       ci_hdrc_remove_device() to OOPS
    
    Fix a) by being more careful in ci_hdrc_imx_probe()'s error
    path and not overwriting the real error code
    
    Fix b) by calling the respective cleanup functions during
    remove only when needed (when ci_pdev != NULL, i.e. when
    everything was initialised correctly). This also has the
    side effect of not causing imbalanced clk_*() and pm_*()
    API calls as part of the error code path.
    
    Fixes: 7c8e8909417e ("usb: chipidea: imx: add HSIC support")
    Signed-off-by: André Draszik <git@andred.net>
    Cc: stable <stable@vger.kernel.org>
    CC: Peter Chen <Peter.Chen@nxp.com>
    CC: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    CC: Shawn Guo <shawnguo@kernel.org>
    CC: Sascha Hauer <s.hauer@pengutronix.de>
    CC: Pengutronix Kernel Team <kernel@pengutronix.de>
    CC: Fabio Estevam <festevam@gmail.com>
    CC: NXP Linux Team <linux-imx@nxp.com>
    CC: linux-usb@vger.kernel.org
    CC: linux-arm-kernel@lists.infradead.org
    CC: linux-kernel@vger.kernel.org
    Link: https://lore.kernel.org/r/20190810150758.17694-1-git@andred.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7bc0c0aeb770dd662ba0a0c54f08f9fd1961111
Author: Peter Chen <peter.chen@nxp.com>
Date:   Sun Apr 28 10:35:31 2019 +0800

    usb: chipidea: imx: add imx7ulp support
    
    In this commit, we add CI_HDRC_PMQOS to avoid system entering idle,
    at imx7ulp, if the system enters idle, the DMA will stop, so the USB
    transfer can't work at this case.
    
    Signed-off-by: Peter Chen <peter.chen@nxp.com>

commit cb77c43fa0bb9c2ff4167b2a162c7c237fe73e7f
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Thu Jul 25 11:14:22 2019 +0800

    mmc: sdhci-sprd: Fix the incorrect soft reset operation when runtime resuming
    
    [ Upstream commit c6303c5d52d5ec3e5bce2e6a5480fa2a1baa45e6 ]
    
    The SD host controller specification defines 3 types software reset:
    software reset for data line, software reset for command line and software
    reset for all. Software reset for all means this reset affects the entire
    Host controller except for the card detection circuit.
    
    In sdhci_runtime_resume_host() we always do a software "reset for all",
    which causes the Spreadtrum variant controller to work abnormally after
    resuming. To fix the problem, let's do a software reset for the data and
    the command part, rather than "for all".
    
    However, as sdhci_runtime_resume() is a common sdhci function and we don't
    want to change the behaviour for other variants, let's introduce a new
    in-parameter for it. This enables the caller to decide if a "reset for all"
    shall be done or not.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Fixes: fb8bd90f83c4 ("mmc: sdhci-sprd: Add Spreadtrum's initial host controller")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0e2dbd7d7070efc8540a1a44d4540d44fdbfd97
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jul 17 14:45:36 2019 +0300

    drm/i915: Make sure cdclk is high enough for DP audio on VLV/CHV
    
    [ Upstream commit a8f196a0fa6391a436f63f360a1fb57031fdf26c ]
    
    On VLV/CHV there is some kind of linkage between the cdclk frequency
    and the DP link frequency. The spec says:
    "For DP audio configuration, cdclk frequency shall be set to
     meet the following requirements:
     DP Link Frequency(MHz) | Cdclk frequency(MHz)
     270                    | 320 or higher
     162                    | 200 or higher"
    
    I suspect that would more accurately be expressed as
    "cdclk >= DP link clock", and in any case we can express it like
    that in the code because of the limited set of cdclk (200, 266,
    320, 400 MHz) and link frequencies (162 and 270 MHz) we support.
    
    Without this we can end up in a situation where the cdclk
    is too low and enabling DP audio will kill the pipe. Happens
    eg. with 2560x1440 modes where the 266MHz cdclk is sufficient
    to pump the pixels (241.5 MHz dotclock) but is too low for
    the DP audio due to the link frequency being 270 MHz.
    
    v2: Spell out the cdclk and link frequencies we actually support
    
    Cc: stable@vger.kernel.org
    Tested-by: Stefan Gottwald <gottwald@igel.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=111149
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190717114536.22937-1-ville.syrjala@linux.intel.com
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    (cherry picked from commit bffb31f73b29a60ef693842d8744950c2819851d)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07c37f641842fb6676e925b4747702ad8e84ce94
Author: Kenneth Graunke <kenneth@whitecape.org>
Date:   Tue Jun 25 10:06:55 2019 +0100

    drm/i915: Disable SAMPLER_STATE prefetching on all Gen11 steppings.
    
    [ Upstream commit 248f883db61283b4f5a1c92a5e27277377b09f16 ]
    
    The Demand Prefetch workaround (binding table prefetching) only applies
    to Icelake A0/B0.  But the Sampler Prefetch workaround needs to be
    applied to all Gen11 steppings, according to a programming note in the
    SARCHKMD documentation.
    
    Using the Intel Gallium driver, I have seen intermittent failures in
    the dEQP-GLES31.functional.copy_image.non_compressed.* tests.  After
    applying this workaround, the tests reliably pass.
    
    v2: Remove the overlap with a pre-production w/a
    
    BSpec: 9663
    Signed-off-by: Kenneth Graunke <kenneth@whitecape.org>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@vger.kernel.org
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190625090655.19220-1-chris@chris-wilson.co.uk
    (cherry picked from commit f9a393875d3af13cc3267477746608dadb7f17c1)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c31f3dc4e07536c7cf0034684be6a847f26b8197
Author: Kaike Wan <kaike.wan@intel.com>
Date:   Mon Jul 15 12:45:28 2019 -0400

    IB/hfi1: Unreserve a flushed OPFN request
    
    When an OPFN request is flushed, the request is completed without
    unreserving itself from the send queue. Subsequently, when a new
    request is post sent, the following warning will be triggered:
    
    WARNING: CPU: 4 PID: 8130 at rdmavt/qp.c:1761 rvt_post_send+0x72a/0x880 [rdmavt]
    Call Trace:
    [<ffffffffbbb61e41>] dump_stack+0x19/0x1b
    [<ffffffffbb497688>] __warn+0xd8/0x100
    [<ffffffffbb4977cd>] warn_slowpath_null+0x1d/0x20
    [<ffffffffc01c941a>] rvt_post_send+0x72a/0x880 [rdmavt]
    [<ffffffffbb4dcabe>] ? account_entity_dequeue+0xae/0xd0
    [<ffffffffbb61d645>] ? __kmalloc+0x55/0x230
    [<ffffffffc04e1a4c>] ib_uverbs_post_send+0x37c/0x5d0 [ib_uverbs]
    [<ffffffffc04e5e36>] ? rdma_lookup_put_uobject+0x26/0x60 [ib_uverbs]
    [<ffffffffc04dbce6>] ib_uverbs_write+0x286/0x460 [ib_uverbs]
    [<ffffffffbb6f9457>] ? security_file_permission+0x27/0xa0
    [<ffffffffbb641650>] vfs_write+0xc0/0x1f0
    [<ffffffffbb64246f>] SyS_write+0x7f/0xf0
    [<ffffffffbbb74ddb>] system_call_fastpath+0x22/0x27
    
    This patch fixes the problem by moving rvt_qp_wqe_unreserve() into
    rvt_qp_complete_swqe() to simplify the code and make it less
    error-prone.
    
    Fixes: ca95f802ef51 ("IB/hfi1: Unreserve a reserved request when it is completed")
    Link: https://lore.kernel.org/r/20190715164528.74174.31364.stgit@awfm-01.aw.intel.com
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit bef755d188f5482221c5253ba3a515e8e93bc944
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Thu Jun 13 08:30:52 2019 -0400

    IB/{rdmavt, qib, hfi1}: Convert to new completion API
    
    Convert all completions to use the new completion routine that
    fixes a race between post send and completion where fields from
    a SWQE can be read after SWQE has been freed.
    
    This patch also addresses issues reported in
    https://marc.info/?l=linux-kernel&m=155656897409107&w=2.
    
    The reserved operation path has no need for any barrier.
    
    The barrier for the other path is addressed by the
    smp_load_acquire() barrier.
    
    Cc: Andrea Parri <andrea.parri@amarulasolutions.com>
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit 9d3d11319bd20c7d8935f9368dc5566867b5e203
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Thu Jun 13 08:30:44 2019 -0400

    IB/rdmavt: Add new completion inline
    
    There is opencoded send completion logic all over all
    the drivers.
    
    We need to convert to this routine to enforce ordering
    issues for completions.  This routine fixes an ordering
    issue where the read of the SWQE fields necessary for creating
    the completion can race with a post send if the post send catches
    a send queue at the edge of being full.  Is is possible in that situation
    to read SWQE fields that are being written.
    
    This new routine insures that SWQE fields are read prior to advancing
    the index that post send uses to determine queue fullness.
    
    Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit 16d2d609ff0f1aded31913e4ff887007961085f8
Author: Coly Li <colyli@suse.de>
Date:   Fri Jun 28 19:59:58 2019 +0800

    bcache: fix race in btree_flush_write()
    
    There is a race between mca_reap(), btree_node_free() and journal code
    btree_flush_write(), which results very rare and strange deadlock or
    panic and are very hard to reproduce.
    
    Let me explain how the race happens. In btree_flush_write() one btree
    node with oldest journal pin is selected, then it is flushed to cache
    device, the select-and-flush is a two steps operation. Between these two
    steps, there are something may happen inside the race window,
    - The selected btree node was reaped by mca_reap() and allocated to
      other requesters for other btree node.
    - The slected btree node was selected, flushed and released by mca
      shrink callback bch_mca_scan().
    When btree_flush_write() tries to flush the selected btree node, firstly
    b->write_lock is held by mutex_lock(). If the race happens and the
    memory of selected btree node is allocated to other btree node, if that
    btree node's write_lock is held already, a deadlock very probably
    happens here. A worse case is the memory of the selected btree node is
    released, then all references to this btree node (e.g. b->write_lock)
    will trigger NULL pointer deference panic.
    
    This race was introduced in commit cafe56359144 ("bcache: A block layer
    cache"), and enlarged by commit c4dc2497d50d ("bcache: fix high CPU
    occupancy during journal"), which selected 128 btree nodes and flushed
    them one-by-one in a quite long time period.
    
    Such race is not easy to reproduce before. On a Lenovo SR650 server with
    48 Xeon cores, and configure 1 NVMe SSD as cache device, a MD raid0
    device assembled by 3 NVMe SSDs as backing device, this race can be
    observed around every 10,000 times btree_flush_write() gets called. Both
    deadlock and kernel panic all happened as aftermath of the race.
    
    The idea of the fix is to add a btree flag BTREE_NODE_journal_flush. It
    is set when selecting btree nodes, and cleared after btree nodes
    flushed. Then when mca_reap() selects a btree node with this bit set,
    this btree node will be skipped. Since mca_reap() only reaps btree node
    without BTREE_NODE_journal_flush flag, such race is avoided.
    
    Once corner case should be noticed, that is btree_node_free(). It might
    be called in some error handling code path. For example the following
    code piece from btree_split(),
            2149 err_free2:
            2150         bkey_put(b->c, &n2->key);
            2151         btree_node_free(n2);
            2152         rw_unlock(true, n2);
            2153 err_free1:
            2154         bkey_put(b->c, &n1->key);
            2155         btree_node_free(n1);
            2156         rw_unlock(true, n1);
    At line 2151 and 2155, the btree node n2 and n1 are released without
    mac_reap(), so BTREE_NODE_journal_flush also needs to be checked here.
    If btree_node_free() is called directly in such error handling path,
    and the selected btree node has BTREE_NODE_journal_flush bit set, just
    delay for 1 us and retry again. In this case this btree node won't
    be skipped, just retry until the BTREE_NODE_journal_flush bit cleared,
    and free the btree node memory.
    
    Fixes: cafe56359144 ("bcache: A block layer cache")
    Signed-off-by: Coly Li <colyli@suse.de>
    Reported-and-tested-by: kbuild test robot <lkp@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 9138558777944599716f90163b8d2b192cfe59cf
Author: Coly Li <colyli@suse.de>
Date:   Fri Jun 28 19:59:56 2019 +0800

    bcache: add comments for mutex_lock(&b->write_lock)
    
    When accessing or modifying BTREE_NODE_dirty bit, it is not always
    necessary to acquire b->write_lock. In bch_btree_cache_free() and
    mca_reap() acquiring b->write_lock is necessary, and this patch adds
    comments to explain why mutex_lock(&b->write_lock) is necessary for
    checking or clearing BTREE_NODE_dirty bit there.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit b622ba2bcd4edf70a307db16e94f2292563bdc8d
Author: Coly Li <colyli@suse.de>
Date:   Fri Jun 28 19:59:55 2019 +0800

    bcache: only clear BTREE_NODE_dirty bit when it is set
    
    In bch_btree_cache_free() and btree_node_free(), BTREE_NODE_dirty is
    always set no matter btree node is dirty or not. The code looks like
    this,
            if (btree_node_dirty(b))
                    btree_complete_write(b, btree_current_write(b));
            clear_bit(BTREE_NODE_dirty, &b->flags);
    
    Indeed if btree_node_dirty(b) returns false, it means BTREE_NODE_dirty
    bit is cleared, then it is unnecessary to clear the bit again.
    
    This patch only clears BTREE_NODE_dirty when btree_node_dirty(b) is
    true (the bit is set), to save a few CPU cycles.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit bb70b2729b7a425f840e01c64348ed5c63699de2
Author: Sven Eckelmann <sven@narfation.org>
Date:   Thu Aug 22 08:55:36 2019 +0200

    batman-adv: Only read OGM tvlv_len after buffer len check
    
    commit a15d56a60760aa9dbe26343b9a0ac5228f35d445 upstream.
    
    Multiple batadv_ogm_packet can be stored in an skbuff. The functions
    batadv_iv_ogm_send_to_if()/batadv_iv_ogm_receive() use
    batadv_iv_ogm_aggr_packet() to check if there is another additional
    batadv_ogm_packet in the skb or not before they continue processing the
    packet.
    
    The length for such an OGM is BATADV_OGM_HLEN +
    batadv_ogm_packet->tvlv_len. The check must first check that at least
    BATADV_OGM_HLEN bytes are available before it accesses tvlv_len (which is
    part of the header. Otherwise it might try read outside of the currently
    available skbuff to get the content of tvlv_len.
    
    Fixes: ef26157747d4 ("batman-adv: tvlv - basic infrastructure")
    Reported-by: syzbot+355cab184197dbbfa384@syzkaller.appspotmail.com
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Acked-by: Antonio Quartulli <a@unstable.cc>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2b3974bc4ab353290531934b2b80cff10816fb6
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Aug 12 04:57:27 2019 -0700

    batman-adv: fix uninit-value in batadv_netlink_get_ifindex()
    
    commit 3ee1bb7aae97324ec9078da1f00cb2176919563f upstream.
    
    batadv_netlink_get_ifindex() needs to make sure user passed
    a correct u32 attribute.
    
    syzbot reported :
    BUG: KMSAN: uninit-value in batadv_netlink_dump_hardif+0x70d/0x880 net/batman-adv/netlink.c:968
    CPU: 1 PID: 11705 Comm: syz-executor888 Not tainted 5.1.0+ #1
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x191/0x1f0 lib/dump_stack.c:113
     kmsan_report+0x130/0x2a0 mm/kmsan/kmsan.c:622
     __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:310
     batadv_netlink_dump_hardif+0x70d/0x880 net/batman-adv/netlink.c:968
     genl_lock_dumpit+0xc6/0x130 net/netlink/genetlink.c:482
     netlink_dump+0xa84/0x1ab0 net/netlink/af_netlink.c:2253
     __netlink_dump_start+0xa3a/0xb30 net/netlink/af_netlink.c:2361
     genl_family_rcv_msg net/netlink/genetlink.c:550 [inline]
     genl_rcv_msg+0xfc1/0x1a40 net/netlink/genetlink.c:627
     netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2486
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:638
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x127e/0x12f0 net/netlink/af_netlink.c:1926
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:661 [inline]
     ___sys_sendmsg+0xcc6/0x1200 net/socket.c:2260
     __sys_sendmsg net/socket.c:2298 [inline]
     __do_sys_sendmsg net/socket.c:2307 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2305
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2305
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440209
    
    Fixes: b60620cf567b ("batman-adv: netlink: hardif query")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 398f2c8277f2de2299fb92e38d9982afc780329b
Author: Gustavo Romero <gromero@linux.ibm.com>
Date:   Wed Sep 4 00:55:28 2019 -0400

    powerpc/tm: Fix restoring FP/VMX facility incorrectly on interrupts
    
    commit a8318c13e79badb92bc6640704a64cc022a6eb97 upstream.
    
    When in userspace and MSR FP=0 the hardware FP state is unrelated to
    the current process. This is extended for transactions where if tbegin
    is run with FP=0, the hardware checkpoint FP state will also be
    unrelated to the current process. Due to this, we need to ensure this
    hardware checkpoint is updated with the correct state before we enable
    FP for this process.
    
    Unfortunately we get this wrong when returning to a process from a
    hardware interrupt. A process that starts a transaction with FP=0 can
    take an interrupt. When the kernel returns back to that process, we
    change to FP=1 but with hardware checkpoint FP state not updated. If
    this transaction is then rolled back, the FP registers now contain the
    wrong state.
    
    The process looks like this:
       Userspace:                      Kernel
    
                   Start userspace
                    with MSR FP=0 TM=1
                      < -----
       ...
       tbegin
       bne
                   Hardware interrupt
                       ---- >
                                        <do_IRQ...>
                                        ....
                                        ret_from_except
                                          restore_math()
                                            /* sees FP=0 */
                                            restore_fp()
                                              tm_active_with_fp()
                                                /* sees FP=1 (Incorrect) */
                                              load_fp_state()
                                            FP = 0 -> 1
                      < -----
                   Return to userspace
                     with MSR TM=1 FP=1
                     with junk in the FP TM checkpoint
       TM rollback
       reads FP junk
    
    When returning from the hardware exception, tm_active_with_fp() is
    incorrectly making restore_fp() call load_fp_state() which is setting
    FP=1.
    
    The fix is to remove tm_active_with_fp().
    
    tm_active_with_fp() is attempting to handle the case where FP state
    has been changed inside a transaction. In this case the checkpointed
    and transactional FP state is different and hence we must restore the
    FP state (ie. we can't do lazy FP restore inside a transaction that's
    used FP). It's safe to remove tm_active_with_fp() as this case is
    handled by restore_tm_state(). restore_tm_state() detects if FP has
    been using inside a transaction and will set load_fp and call
    restore_math() to ensure the FP state (checkpoint and transaction) is
    restored.
    
    This is a data integrity problem for the current process as the FP
    registers are corrupted. It's also a security problem as the FP
    registers from one process may be leaked to another.
    
    Similarly for VMX.
    
    A simple testcase to replicate this will be posted to
    tools/testing/selftests/powerpc/tm/tm-poison.c
    
    This fixes CVE-2019-15031.
    
    Fixes: a7771176b439 ("powerpc: Don't enable FP/Altivec if not checkpointed")
    Cc: stable@vger.kernel.org # 4.15+
    Signed-off-by: Gustavo Romero <gromero@linux.ibm.com>
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190904045529.23002-2-gromero@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f20c56c0b7a79e310ed6b4bf13bc009f339529a
Author: Gustavo Romero <gromero@linux.ibm.com>
Date:   Wed Sep 4 00:55:27 2019 -0400

    powerpc/tm: Fix FP/VMX unavailable exceptions inside a transaction
    
    commit 8205d5d98ef7f155de211f5e2eb6ca03d95a5a60 upstream.
    
    When we take an FP unavailable exception in a transaction we have to
    account for the hardware FP TM checkpointed registers being
    incorrect. In this case for this process we know the current and
    checkpointed FP registers must be the same (since FP wasn't used
    inside the transaction) hence in the thread_struct we copy the current
    FP registers to the checkpointed ones.
    
    This copy is done in tm_reclaim_thread(). We use thread->ckpt_regs.msr
    to determine if FP was on when in userspace. thread->ckpt_regs.msr
    represents the state of the MSR when exiting userspace. This is setup
    by check_if_tm_restore_required().
    
    Unfortunatley there is an optimisation in giveup_all() which returns
    early if tsk->thread.regs->msr (via local variable `usermsr`) has
    FP=VEC=VSX=SPE=0. This optimisation means that
    check_if_tm_restore_required() is not called and hence
    thread->ckpt_regs.msr is not updated and will contain an old value.
    
    This can happen if due to load_fp=255 we start a userspace process
    with MSR FP=1 and then we are context switched out. In this case
    thread->ckpt_regs.msr will contain FP=1. If that same process is then
    context switched in and load_fp overflows, MSR will have FP=0. If that
    process now enters a transaction and does an FP instruction, the FP
    unavailable will not update thread->ckpt_regs.msr (the bug) and MSR
    FP=1 will be retained in thread->ckpt_regs.msr.  tm_reclaim_thread()
    will then not perform the required memcpy and the checkpointed FP regs
    in the thread struct will contain the wrong values.
    
    The code path for this happening is:
    
           Userspace:                      Kernel
                       Start userspace
                        with MSR FP/VEC/VSX/SPE=0 TM=1
                          < -----
           ...
           tbegin
           bne
           fp instruction
                       FP unavailable
                           ---- >
                                            fp_unavailable_tm()
                                              tm_reclaim_current()
                                                tm_reclaim_thread()
                                                  giveup_all()
                                                    return early since FP/VMX/VSX=0
                                                    /* ckpt MSR not updated (Incorrect) */
                                                  tm_reclaim()
                                                    /* thread_struct ckpt FP regs contain junk (OK) */
                                                  /* Sees ckpt MSR FP=1 (Incorrect) */
                                                  no memcpy() performed
                                                    /* thread_struct ckpt FP regs not fixed (Incorrect) */
                                              tm_recheckpoint()
                                                 /* Put junk in hardware checkpoint FP regs */
                                             ....
                          < -----
                       Return to userspace
                         with MSR TM=1 FP=1
                         with junk in the FP TM checkpoint
           TM rollback
           reads FP junk
    
    This is a data integrity problem for the current process as the FP
    registers are corrupted. It's also a security problem as the FP
    registers from one process may be leaked to another.
    
    This patch moves up check_if_tm_restore_required() in giveup_all() to
    ensure thread->ckpt_regs.msr is updated correctly.
    
    A simple testcase to replicate this will be posted to
    tools/testing/selftests/powerpc/tm/tm-poison.c
    
    Similarly for VMX.
    
    This fixes CVE-2019-15030.
    
    Fixes: f48e91e87e67 ("powerpc/tm: Fix FP and VMX register corruption")
    Cc: stable@vger.kernel.org # 4.12+
    Signed-off-by: Gustavo Romero <gromero@linux.vnet.ibm.com>
    Signed-off-by: Michael Neuling <mikey@neuling.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190904045529.23002-1-gromero@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12c6a777668007ab8183c5cc3948ace0b8542281
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Thu Aug 8 12:48:26 2019 +0000

    powerpc/64e: Drop stale call to smp_processor_id() which hangs SMP startup
    
    commit b9ee5e04fd77898208c51b1395fa0b5e8536f9b6 upstream.
    
    Commit ebb9d30a6a74 ("powerpc/mm: any thread in one core can be the
    first to setup TLB1") removed the need to know the cpu_id in
    early_init_this_mmu(), but the call to smp_processor_id() which was
    marked __maybe_used remained.
    
    Since commit ed1cd6deb013 ("powerpc: Activate CONFIG_THREAD_INFO_IN_TASK")
    thread_info cannot be reached before MMU is properly set up.
    
    Drop this stale call to smp_processor_id() which makes SMP hang when
    CONFIG_PREEMPT is set.
    
    Fixes: ebb9d30a6a74 ("powerpc/mm: any thread in one core can be the first to setup TLB1")
    Fixes: ed1cd6deb013 ("powerpc: Activate CONFIG_THREAD_INFO_IN_TASK")
    Cc: stable@vger.kernel.org # v5.1+
    Reported-by: Chris Packham <Chris.Packham@alliedtelesis.co.nz>
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Tested-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/bef479514f4c08329fa649f67735df8918bc0976.1565268248.git.christophe.leroy@c-s.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6890ea590cb787ebdfc873c3532c7be2b31a9b6e
Author: Tiwei Bie <tiwei.bie@intel.com>
Date:   Wed Aug 28 13:37:00 2019 +0800

    vhost/test: fix build for vhost test - again
    
    commit 264b563b8675771834419057cbe076c1a41fb666 upstream.
    
    Since vhost_exceeds_weight() was introduced, callers need to specify
    the packet weight and byte weight in vhost_dev_init(). Note that, the
    packet weight isn't counted in this patch to keep the original behavior
    unchanged.
    
    Fixes: e82b9b0727ff ("vhost: introduce vhost_exceeds_weight()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tiwei Bie <tiwei.bie@intel.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 478e21d516d2750d1cf5a9479cc15a7818737894
Author: Tiwei Bie <tiwei.bie@intel.com>
Date:   Wed Aug 28 13:36:59 2019 +0800

    vhost/test: fix build for vhost test
    
    commit 93d2c4de8d8129b97ee1e1a222aedb0719d2fcd9 upstream.
    
    Since below commit, callers need to specify the iov_limit in
    vhost_dev_init() explicitly.
    
    Fixes: b46a0bf78ad7 ("vhost: fix OOB in get_rx_bufs()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tiwei Bie <tiwei.bie@intel.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9844e52dd977a68f348a6caffadea05a474fba3b
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Mon Sep 2 16:33:22 2019 +1000

    drm/nouveau/sec2/gp102: add missing MODULE_FIRMWAREs
    
    commit 55f7e5c364dce20e691fda329fb2a6cc3cbb63b6 upstream.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Cc: stable@vger.kernel.org [v5.2+]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee116fa6327210a0fef8830d21882768c800e168
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Aug 15 11:30:50 2019 +0300

    drm/vmwgfx: Fix double free in vmw_recv_msg()
    
    commit 08b0c891605acf727e43e3e03a25857d3e789b61 upstream.
    
    We recently added a kfree() after the end of the loop:
    
            if (retries == RETRIES) {
                    kfree(reply);
                    return -EINVAL;
            }
    
    There are two problems.  First the test is wrong and because retries
    equals RETRIES if we succeed on the last iteration through the loop.
    Second if we fail on the last iteration through the loop then the kfree
    is a double free.
    
    When you're reading this code, please note the break statement at the
    end of the while loop.  This patch changes the loop so that if it's not
    successful then "reply" is NULL and we can test for that afterward.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 6b7c3b86f0b6 ("drm/vmwgfx: fix memory leak when too many retries have occurred")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f570399e490b25c868a35ad5163ee4c4d403c91
Author: Liangyan <liangyan.peng@linux.alibaba.com>
Date:   Mon Aug 26 20:16:33 2019 +0800

    sched/fair: Don't assign runtime for throttled cfs_rq
    
    commit 5e2d2cc2588bd3307ce3937acbc2ed03c830a861 upstream.
    
    do_sched_cfs_period_timer() will refill cfs_b runtime and call
    distribute_cfs_runtime to unthrottle cfs_rq, sometimes cfs_b->runtime
    will allocate all quota to one cfs_rq incorrectly, then other cfs_rqs
    attached to this cfs_b can't get runtime and will be throttled.
    
    We find that one throttled cfs_rq has non-negative
    cfs_rq->runtime_remaining and cause an unexpetced cast from s64 to u64
    in snippet:
    
      distribute_cfs_runtime() {
        runtime = -cfs_rq->runtime_remaining + 1;
      }
    
    The runtime here will change to a large number and consume all
    cfs_b->runtime in this cfs_b period.
    
    According to Ben Segall, the throttled cfs_rq can have
    account_cfs_rq_runtime called on it because it is throttled before
    idle_balance, and the idle_balance calls update_rq_clock to add time
    that is accounted to the task.
    
    This commit prevents cfs_rq to be assgined new runtime if it has been
    throttled until that distribute_cfs_runtime is called.
    
    Signed-off-by: Liangyan <liangyan.peng@linux.alibaba.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Reviewed-by: Ben Segall <bsegall@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: shanpeic@linux.alibaba.com
    Cc: stable@vger.kernel.org
    Cc: xlpang@linux.alibaba.com
    Fixes: d3d9dc330236 ("sched: Throttle entities exceeding their allowed bandwidth")
    Link: https://lkml.kernel.org/r/20190826121633.6538-1-liangyan.peng@linux.alibaba.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f43cf5ff54a2074685b6a590324c0a97a7f852e6
Author: Hui Wang <hui.wang@canonical.com>
Date:   Wed Sep 4 13:53:27 2019 +0800

    ALSA: hda/realtek - Fix the problem of two front mics on a ThinkCentre
    
    commit 2a36c16efab254dd6017efeb35ad88ecc96f2328 upstream.
    
    This ThinkCentre machine has a new realtek codec alc222, it is not
    in the support list, we add it in the realtek.c then this machine
    can apply FIXUPs for the realtek codec.
    
    And this machine has two front mics which can't be handled
    by PA so far, it uses the pin 0x18 and 0x19 as the front mics, as
    a result the existing FIXUP ALC294_FIXUP_LENOVO_MIC_LOCATION doesn't
    work on this machine. Fortunately another FIXUP
    ALC283_FIXUP_HEADSET_MIC also can change the location for one of the
    two mics on this machine.
    
    Link: https://lore.kernel.org/r/20190904055327.9883-1-hui.wang@canonical.com
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b305db85076af8023e8a562aa5ffb275434c8835
Author: Jian-Hong Pan <jian-hong@endlessm.com>
Date:   Mon Sep 2 18:00:56 2019 +0800

    ALSA: hda/realtek - Enable internal speaker & headset mic of ASUS UX431FL
    
    commit 60083f9e94b2f28047d71ed778adf89357c1a8fb upstream.
    
    Original pin node values of ASUS UX431FL with ALC294:
    
    0x12 0xb7a60140
    0x13 0x40000000
    0x14 0x90170110
    0x15 0x411111f0
    0x16 0x411111f0
    0x17 0x90170111
    0x18 0x411111f0
    0x19 0x411111f0
    0x1a 0x411111f0
    0x1b 0x411111f0
    0x1d 0x4066852d
    0x1e 0x411111f0
    0x1f 0x411111f0
    0x21 0x04211020
    
    1. Has duplicated internal speakers (0x14 & 0x17) which makes the output
       route become confused. So, the output volume cannot be changed by
       setting.
    2. Misses the headset mic pin node.
    
    This patch disables the confusing speaker (NID 0x14) and enables the
    headset mic (NID 0x19).
    
    Link: https://lore.kernel.org/r/20190902100054.6941-1-jian-hong@endlessm.com
    Signed-off-by: Jian-Hong Pan <jian-hong@endlessm.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6157216e86f3e9c50301ca4deb05242ff60cc214
Author: Sam Bazley <sambazley@fastmail.com>
Date:   Sun Sep 1 03:31:30 2019 +0100

    ALSA: hda/realtek - Add quirk for HP Pavilion 15
    
    commit d33cd42d86671bed870827aa399aeb9f1da74119 upstream.
    
    HP Pavilion 15 (AMD Ryzen-based model) with 103c:84e7 needs the same
    quirk like HP Envy/Spectre x360 for enabling the mute LED over Mic3 pin.
    
    [ rearranged in the SSID number order by tiwai ]
    
    Signed-off-by: Sam Bazley <sambazley@fastmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfdf3c29f72a973f8d696ccf0b226dbc0cb79486
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Aug 30 12:03:38 2019 +0200

    ALSA: hda/realtek - Fix overridden device-specific initialization
    
    commit 89781d0806c2c4f29072d3f00cb2dd4274aabc3d upstream.
    
    The recent change to shuffle the codec initialization procedure for
    Realtek via commit 607ca3bd220f ("ALSA: hda/realtek - EAPD turn on
    later") caused the silent output on some machines.  This change was
    supposed to be safe, but it isn't actually; some devices have quirk
    setups to override the EAPD via COEF or BTL in the additional verb
    table, which is applied at the beginning of snd_hda_gen_init().  And
    this EAPD setup is again overridden in alc_auto_init_amp().
    
    For recovering from the regression, tell snd_hda_gen_init() not to
    apply the verbs there by a new flag, then apply the verbs in
    alc_init().
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=204727
    Fixes: 607ca3bd220f ("ALSA: hda/realtek - EAPD turn on later")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a413713ee1641c08f36f4399a9f033c205fde31
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Aug 29 09:52:02 2019 +0200

    ALSA: hda - Fix potential endless loop at applying quirks
    
    commit 333f31436d3db19f4286f8862a00ea1d8d8420a1 upstream.
    
    Since the chained quirks via chained_before flag is applied before the
    depth check, it may lead to the endless recursive calls, when the
    chain were set up incorrectly.  Fix it by moving the depth check at
    the beginning of the loop.
    
    Fixes: 1f57825077dc ("ALSA: hda - Add chained_before flag to the fixup entry")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d89e8b4684f193a5661968c492e08639c965d23b
Author: David Jander <david@protonic.nl>
Date:   Tue Aug 27 06:46:29 2019 +0000

    gpio: pca953x: use pca953x_read_regs instead of regmap_bulk_read
    
    commit 438b6c20e6161a1a7542490baa093c86732f77d6 upstream.
    
    The register number needs to be translated for chips with more than 8
    ports. This patch fixes a bug causing all chips with more than 8 GPIO pins
    to not work correctly.
    
    Fixes: 0f25fda840a9 ("gpio: pca953x: Zap ad-hoc reg_direction cache")
    Cc: Cc: <stable@vger.kernel.org>
    Signed-off-by: David Jander <david@protonic.nl>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3a1644a19a7f186880472a1e81ba3b1d276b32f
Author: David Jander <david@protonic.nl>
Date:   Tue Aug 27 06:46:28 2019 +0000

    gpio: pca953x: correct type of reg_direction
    
    commit bc624a06f0c5190bc37fec7d22cd82b43a579698 upstream.
    
    The type of reg_direction needs to match the type of the regmap, which
    is u8.
    
    Fixes: 0f25fda840a9 ("gpio: pca953x: Zap ad-hoc reg_direction cache")
    Cc: Cc: <stable@vger.kernel.org>
    Signed-off-by: David Jander <david@protonic.nl>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
