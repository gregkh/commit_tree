commit c01d4d1b885d96a7c8c27d629abeb918ca897dbe
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 8 08:46:56 2021 +0100

    Linux 4.14.257
    
    Link: https://lore.kernel.org/r/20211206145555.386095297@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b70e39bd68fe2f9795552f363f11c0c15db8cfa
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    commit afdb4a5b1d340e4afffc65daa21cc71890d7d589 upstream.
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e74d9663fd57640fc3394abb5c76fa95b9cc2f2e
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Nov 8 09:54:31 2021 +0100

    serial: core: fix transmit-buffer reset and memleak
    
    commit 00de977f9e0aa9760d9a79d1e41ff780f74e3424 upstream.
    
    Commit 761ed4a94582 ("tty: serial_core: convert uart_close to use
    tty_port_close") converted serial core to use tty_port_close() but
    failed to notice that the transmit buffer still needs to be freed on
    final close.
    
    Not freeing the transmit buffer means that the buffer is no longer
    cleared on next open so that any ioctl() waiting for the buffer to drain
    might wait indefinitely (e.g. on termios changes) or that stale data can
    end up being transmitted in case tx is restarted.
    
    Furthermore, the buffer of any port that has been opened would leak on
    driver unbind.
    
    Note that the port lock is held when clearing the buffer pointer due to
    the ldisc race worked around by commit a5ba1d95e46e ("uart: fix race
    between uart_put_char() and uart_shutdown()").
    
    Also note that the tty-port shutdown() callback is not called for
    console ports so it is not strictly necessary to free the buffer page
    after releasing the lock (cf. d72402145ace ("tty/serial: do not free
    trasnmit buffer page under port lock")).
    
    Link: https://lore.kernel.org/r/319321886d97c456203d5c6a576a5480d07c3478.1635781688.git.baruch@tkos.co.il
    Fixes: 761ed4a94582 ("tty: serial_core: convert uart_close to use tty_port_close")
    Cc: stable@vger.kernel.org      # 4.9
    Cc: Rob Herring <robh@kernel.org>
    Reported-by: Baruch Siach <baruch@tkos.co.il>
    Tested-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211108085431.12637-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 983c32a920cdc1132a60d3aeec9a62edd3262bbf
Author: Pierre Gondois <Pierre.Gondois@arm.com>
Date:   Tue Nov 9 17:22:48 2021 +0000

    serial: pl011: Add ACPI SBSA UART match id
    
    commit ac442a077acf9a6bf1db4320ec0c3f303be092b3 upstream.
    
    The document 'ACPI for Arm Components 1.0' defines the following
    _HID mappings:
    -'Prime cell UART (PL011)': ARMH0011
    -'SBSA UART': ARMHB000
    
    Use the sbsa-uart driver when a device is described with
    the 'ARMHB000' _HID.
    
    Note:
    PL011 devices currently use the sbsa-uart driver instead of the
    uart-pl011 driver. Indeed, PL011 devices are not bound to a clock
    in ACPI. It is not possible to change their baudrate.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pierre Gondois <Pierre.Gondois@arm.com>
    Link: https://lore.kernel.org/r/20211109172248.19061-1-Pierre.Gondois@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc9250d951d1aaf95da437b2b684f7d5a8145ac4
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Nov 13 13:10:50 2021 +0100

    tty: serial: msm_serial: Deactivate RX DMA for polling support
    
    commit 7492ffc90fa126afb67d4392d56cb4134780194a upstream.
    
    The CONSOLE_POLLING mode is used for tools like k(g)db. In this kind of
    setup, it is often sharing a serial device with the normal system console.
    This is usually no problem because the polling helpers can consume input
    values directly (when in kgdb context) and the normal Linux handlers can
    only consume new input values after kgdb switched back.
    
    This is not true anymore when RX DMA is enabled for UARTDM controllers.
    Single input values can no longer be received correctly. Instead following
    seems to happen:
    
    * on 1. input, some old input is read (continuously)
    * on 2. input, two old inputs are read (continuously)
    * on 3. input, three old input values are read (continuously)
    * on 4. input, 4 previous inputs are received
    
    This repeats then for each group of 4 input values.
    
    This behavior changes slightly depending on what state the controller was
    when the first input was received. But this makes working with kgdb
    basically impossible because control messages are always corrupted when
    kgdboc tries to parse them.
    
    RX DMA should therefore be off when CONSOLE_POLLING is enabled to avoid
    these kind of problems. No such problem was noticed for TX DMA.
    
    Fixes: 99693945013a ("tty: serial: msm: Add RX DMA support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Link: https://lore.kernel.org/r/20211113121050.7266-1-sven@narfation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05df735dc2bc7faeada5763197bbd912ebbfebf1
Author: Joerg Roedel <jroedel@suse.de>
Date:   Thu Dec 2 16:32:26 2021 +0100

    x86/64/mm: Map all kernel memory into trampoline_pgd
    
    commit 51523ed1c26758de1af7e58730a656875f72f783 upstream.
    
    The trampoline_pgd only maps the 0xfffffff000000000-0xffffffffffffffff
    range of kernel memory (with 4-level paging). This range contains the
    kernel's text+data+bss mappings and the module mapping space but not the
    direct mapping and the vmalloc area.
    
    This is enough to get the application processors out of real-mode, but
    for code that switches back to real-mode the trampoline_pgd is missing
    important parts of the address space. For example, consider this code
    from arch/x86/kernel/reboot.c, function machine_real_restart() for a
    64-bit kernel:
    
      #ifdef CONFIG_X86_32
            load_cr3(initial_page_table);
      #else
            write_cr3(real_mode_header->trampoline_pgd);
    
            /* Exiting long mode will fail if CR4.PCIDE is set. */
            if (boot_cpu_has(X86_FEATURE_PCID))
                    cr4_clear_bits(X86_CR4_PCIDE);
      #endif
    
            /* Jump to the identity-mapped low memory code */
      #ifdef CONFIG_X86_32
            asm volatile("jmpl *%0" : :
                         "rm" (real_mode_header->machine_real_restart_asm),
                         "a" (type));
      #else
            asm volatile("ljmpl *%0" : :
                         "m" (real_mode_header->machine_real_restart_asm),
                         "D" (type));
      #endif
    
    The code switches to the trampoline_pgd, which unmaps the direct mapping
    and also the kernel stack. The call to cr4_clear_bits() will find no
    stack and crash the machine. The real_mode_header pointer below points
    into the direct mapping, and dereferencing it also causes a crash.
    
    The reason this does not crash always is only that kernel mappings are
    global and the CR3 switch does not flush those mappings. But if theses
    mappings are not in the TLB already, the above code will crash before it
    can jump to the real-mode stub.
    
    Extend the trampoline_pgd to contain all kernel mappings to prevent
    these crashes and to make code which runs on this page-table more
    robust.
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20211202153226.22946-5-joro@8bytes.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81d1e51dffd47f4b354f4106cde249763afcf810
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Mon Nov 29 16:18:25 2021 -0800

    usb: typec: tcpm: Wait in SNK_DEBOUNCED until disconnect
    
    commit fbcd13df1e78eb2ba83a3c160eefe2d6f574beaf upstream.
    
    Stub from the spec:
    "4.5.2.2.4.2 Exiting from AttachWait.SNK State
    A Sink shall transition to Unattached.SNK when the state of both
    the CC1 and CC2 pins is SNK.Open for at least tPDDebounce.
    A DRP shall transition to Unattached.SRC when the state of both
    the CC1 and CC2 pins is SNK.Open for at least tPDDebounce."
    
    This change makes TCPM to wait in SNK_DEBOUNCED state until
    CC1 and CC2 pins is SNK.Open for at least tPDDebounce. Previously,
    TCPM resets the port if vbus is not present in PD_T_PS_SOURCE_ON.
    This causes TCPM to loop continuously when connected to a
    faulty power source that does not present vbus. Waiting in
    SNK_DEBOUNCED also ensures that TCPM is adherant to
    "4.5.2.2.4.2 Exiting from AttachWait.SNK State" requirements.
    
    [ 6169.280751] CC1: 0 -> 0, CC2: 0 -> 5 [state TOGGLING, polarity 0, connected]
    [ 6169.280759] state change TOGGLING -> SNK_ATTACH_WAIT [rev2 NONE_AMS]
    [ 6169.280771] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @ 170 ms [rev2 NONE_AMS]
    [ 6169.282427] CC1: 0 -> 0, CC2: 5 -> 5 [state SNK_ATTACH_WAIT, polarity 0, connected]
    [ 6169.450825] state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED [delayed 170 ms]
    [ 6169.450834] pending state change SNK_DEBOUNCED -> PORT_RESET @ 480 ms [rev2 NONE_AMS]
    [ 6169.930892] state change SNK_DEBOUNCED -> PORT_RESET [delayed 480 ms]
    [ 6169.931296] disable vbus discharge ret:0
    [ 6169.931301] Setting usb_comm capable false
    [ 6169.932783] Setting voltage/current limit 0 mV 0 mA
    [ 6169.932802] polarity 0
    [ 6169.933706] Requesting mux state 0, usb-role 0, orientation 0
    [ 6169.936689] cc:=0
    [ 6169.936812] pending state change PORT_RESET -> PORT_RESET_WAIT_OFF @ 100 ms [rev2 NONE_AMS]
    [ 6169.937157] CC1: 0 -> 0, CC2: 5 -> 0 [state PORT_RESET, polarity 0, disconnected]
    [ 6170.036880] state change PORT_RESET -> PORT_RESET_WAIT_OFF [delayed 100 ms]
    [ 6170.036890] state change PORT_RESET_WAIT_OFF -> SNK_UNATTACHED [rev2 NONE_AMS]
    [ 6170.036896] Start toggling
    [ 6170.041412] CC1: 0 -> 0, CC2: 0 -> 0 [state TOGGLING, polarity 0, disconnected]
    [ 6170.042973] CC1: 0 -> 0, CC2: 0 -> 5 [state TOGGLING, polarity 0, connected]
    [ 6170.042976] state change TOGGLING -> SNK_ATTACH_WAIT [rev2 NONE_AMS]
    [ 6170.042981] pending state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED @ 170 ms [rev2 NONE_AMS]
    [ 6170.213014] state change SNK_ATTACH_WAIT -> SNK_DEBOUNCED [delayed 170 ms]
    [ 6170.213019] pending state change SNK_DEBOUNCED -> PORT_RESET @ 480 ms [rev2 NONE_AMS]
    [ 6170.693068] state change SNK_DEBOUNCED -> PORT_RESET [delayed 480 ms]
    [ 6170.693304] disable vbus discharge ret:0
    [ 6170.693308] Setting usb_comm capable false
    [ 6170.695193] Setting voltage/current limit 0 mV 0 mA
    [ 6170.695210] polarity 0
    [ 6170.695990] Requesting mux state 0, usb-role 0, orientation 0
    [ 6170.701896] cc:=0
    [ 6170.702181] pending state change PORT_RESET -> PORT_RESET_WAIT_OFF @ 100 ms [rev2 NONE_AMS]
    [ 6170.703343] CC1: 0 -> 0, CC2: 5 -> 0 [state PORT_RESET, polarity 0, disconnected]
    
    Fixes: f0690a25a140b8 ("staging: typec: USB Type-C Port Manager (tcpm)")
    Cc: stable@vger.kernel.org
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Link: https://lore.kernel.org/r/20211130001825.3142830-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e31a18f3c1f57974b919ae5ed36ed616467f93b3
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Nov 26 14:23:40 2021 +0200

    xhci: Fix commad ring abort, write all 64 bits to CRCR register.
    
    commit 09f736aa95476631227d2dc0e6b9aeee1ad7ed58 upstream.
    
    Turns out some xHC controllers require all 64 bits in the CRCR register
    to be written to execute a command abort.
    
    The lower 32 bits containing the command abort bit is written first.
    In case the command ring stops before we write the upper 32 bits then
    hardware may use these upper bits to set the commnd ring dequeue pointer.
    
    Solve this by making sure the upper 32 bits contain a valid command
    ring dequeue pointer.
    
    The original patch that only wrote the first 32 to stop the ring went
    to stable, so this fix should go there as well.
    
    Fixes: ff0e50d3564f ("xhci: Fix command ring pointer corruption while aborting a command")
    Cc: stable@vger.kernel.org
    Tested-by: Pavankumar Kondeti <quic_pkondeti@quicinc.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20211126122340.1193239-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 033471485b03cae4c9e2b84c1604d00d29bcf2bc
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Tue Oct 26 00:26:22 2021 +0200

    vgacon: Propagate console boot parameters before calling `vc_resize'
    
    commit 3dfac26e2ef29ff2abc2a75aa4cd48fce25a2c4b upstream.
    
    Fix a division by zero in `vgacon_resize' with a backtrace like:
    
    vgacon_resize
    vc_do_resize
    vgacon_init
    do_bind_con_driver
    do_unbind_con_driver
    fbcon_fb_unbind
    do_unregister_framebuffer
    do_register_framebuffer
    register_framebuffer
    __drm_fb_helper_initial_config_and_unlock
    drm_helper_hpd_irq_event
    dw_hdmi_irq
    irq_thread
    kthread
    
    caused by `c->vc_cell_height' not having been initialized.  This has
    only started to trigger with commit 860dafa90259 ("vt: Fix character
    height handling with VT_RESIZEX"), however the ultimate offender is
    commit 50ec42edd978 ("[PATCH] Detaching fbcon: fix vgacon to allow
    retaking of the console").
    
    Said commit has added a call to `vc_resize' whenever `vgacon_init' is
    called with the `init' argument set to 0, which did not happen before.
    And the call is made before a key vgacon boot parameter retrieved in
    `vgacon_startup' has been propagated in `vgacon_init' for `vc_resize' to
    use to the console structure being worked on.  Previously the parameter
    was `c->vc_font.height' and now it is `c->vc_cell_height'.
    
    In this particular scenario the registration of fbcon has failed and vt
    resorts to vgacon.  Now fbcon does have initialized `c->vc_font.height'
    somehow, unlike `c->vc_cell_height', which is why this code did not
    crash before, but either way the boot parameters should have been copied
    to the console structure ahead of the call to `vc_resize' rather than
    afterwards, so that first the call has a chance to use them and second
    they do not change the console structure to something possibly different
    from what was used by `vc_resize'.
    
    Move the propagation of the vgacon boot parameters ahead of the call to
    `vc_resize' then.  Adjust the comment accordingly.
    
    Fixes: 50ec42edd978 ("[PATCH] Detaching fbcon: fix vgacon to allow retaking of the console")
    Cc: stable@vger.kernel.org # v2.6.18+
    Reported-by: Wim Osterholt <wim@djo.tudelft.nl>
    Reported-by: Pavel V. Panteleev <panteleev_p@mcst.ru>
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2110252317110.58149@angie.orcam.me.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b830a8921f90421a856c65775a3bf770539f910
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:14:40 2021 +0100

    parisc: Fix "make install" on newer debian releases
    
    commit 0f9fee4cdebfbe695c297e5b603a275e2557c1cc upstream.
    
    On newer debian releases the debian-provided "installkernel" script is
    installed in /usr/sbin. Fix the kernel install.sh script to look for the
    script in this directory as well.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v3.13+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a32c07316f28712ab4caccaa91a82264ee553e4e
Author: Helge Deller <deller@gmx.de>
Date:   Fri Nov 26 22:35:45 2021 +0100

    parisc: Fix KBUILD_IMAGE for self-extracting kernel
    
    commit 1d7c29b77725d05faff6754d2f5e7c147aedcf93 upstream.
    
    Default KBUILD_IMAGE to $(boot)/bzImage if a self-extracting
    (CONFIG_PARISC_SELF_EXTRACT=y) kernel is to be built.
    This fixes the bindeb-pkg make target.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42dafeb5da5b9424a3a3f45ed33b2e56ca37b030
Author: Tony Lu <tonylu@linux.alibaba.com>
Date:   Wed Dec 1 14:42:16 2021 +0800

    net/smc: Keep smc_close_final rc during active close
    
    commit 00e158fb91dfaff3f94746f260d11f1a4853506e upstream.
    
    When smc_close_final() returns error, the return code overwrites by
    kernel_sock_shutdown() in smc_close_active(). The return code of
    smc_close_final() is more important than kernel_sock_shutdown(), and it
    will pass to userspace directly.
    
    Fix it by keeping both return codes, if smc_close_final() raises an
    error, return it or kernel_sock_shutdown()'s.
    
    Link: https://lore.kernel.org/linux-s390/1f67548e-cbf6-0dce-82b5-10288a4583bd@linux.ibm.com/
    Fixes: 606a63c9783a ("net/smc: Ensure the active closing peer first closes clcsock")
    Suggested-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Wen Gu <guwen@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 179bbee46177422de32d83d9307d98d6e823af19
Author: William Kucharski <william.kucharski@oracle.com>
Date:   Wed Dec 1 07:45:22 2021 -0700

    net/rds: correct socket tunable error in rds_tcp_tune()
    
    commit 19f36edf14bcdb783aef3af8217df96f76a8ce34 upstream.
    
    Correct an error where setting /proc/sys/net/rds/tcp/rds_tcp_rcvbuf would
    instead modify the socket's sk_sndbuf and would leave sk_rcvbuf untouched.
    
    Fixes: c6a58ffed536 ("RDS: TCP: Add sysctl tunables for sndbuf/rcvbuf on rds-tcp socket")
    Signed-off-by: William Kucharski <william.kucharski@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7380ca6ad354a88624f88fe6742367498a68932f
Author: Sven Schuchmann <schuchmann@schleissheimer.de>
Date:   Sat Nov 27 11:47:07 2021 +0100

    net: usb: lan78xx: lan78xx_phy_init(): use PHY_POLL instead of "0" if no IRQ is available
    
    commit 817b653160db9852d5a0498a31f047e18ce27e5b upstream.
    
    On most systems request for IRQ 0 will fail, phylib will print an error message
    and fall back to polling. To fix this set the phydev->irq to PHY_POLL if no IRQ
    is available.
    
    Fixes: cc89c323a30e ("lan78xx: Use irq_domain for phy interrupt from USB Int. EP")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Sven Schuchmann <schuchmann@schleissheimer.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be12572c5ddc8ad7453bada4eec8fa46967dc757
Author: Zhou Qingyang <zhou1615@umn.edu>
Date:   Wed Dec 1 00:44:38 2021 +0800

    net/mlx4_en: Fix an use-after-free bug in mlx4_en_try_alloc_resources()
    
    commit addad7643142f500080417dd7272f49b7a185570 upstream.
    
    In mlx4_en_try_alloc_resources(), mlx4_en_copy_priv() is called and
    tmp->tx_cq will be freed on the error path of mlx4_en_copy_priv().
    After that mlx4_en_alloc_resources() is called and there is a dereference
    of &tmp->tx_cq[t][i] in mlx4_en_alloc_resources(), which could lead to
    a use after free problem on failure of mlx4_en_copy_priv().
    
    Fix this bug by adding a check of mlx4_en_copy_priv()
    
    This bug was found by a static analyzer. The analysis employs
    differential checking to identify inconsistent security operations
    (e.g., checks or kfrees) between two code paths and confirms that the
    inconsistent operations are not recovered in the current function or
    the callers, so they constitute bugs.
    
    Note that, as a bug found by static analysis, it can be a false
    positive or hard to trigger. Multiple researchers have cross-reviewed
    the bug.
    
    Builds with CONFIG_MLX4_EN=m show no new warnings,
    and our static analyzer no longer warns about this code.
    
    Fixes: ec25bc04ed8e ("net/mlx4_en: Add resilience in low memory systems")
    Signed-off-by: Zhou Qingyang <zhou1615@umn.edu>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20211130164438.190591-1-zhou1615@umn.edu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1cd494e04e1466ab61662c0045b66a7a6eb7023
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 29 10:39:29 2021 -0500

    siphash: use _unaligned version by default
    
    commit f7e5b9bfa6c8820407b64eabc1f29c9a87e8993d upstream.
    
    On ARM v6 and later, we define CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS
    because the ordinary load/store instructions (ldr, ldrh, ldrb) can
    tolerate any misalignment of the memory address. However, load/store
    double and load/store multiple instructions (ldrd, ldm) may still only
    be used on memory addresses that are 32-bit aligned, and so we have to
    use the CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS macro with care, or we
    may end up with a severe performance hit due to alignment traps that
    require fixups by the kernel. Testing shows that this currently happens
    with clang-13 but not gcc-11. In theory, any compiler version can
    produce this bug or other problems, as we are dealing with undefined
    behavior in C99 even on architectures that support this in hardware,
    see also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100363.
    
    Fortunately, the get_unaligned() accessors do the right thing: when
    building for ARMv6 or later, the compiler will emit unaligned accesses
    using the ordinary load/store instructions (but avoid the ones that
    require 32-bit alignment). When building for older ARM, those accessors
    will emit the appropriate sequence of ldrb/mov/orr instructions. And on
    architectures that can truly tolerate any kind of misalignment, the
    get_unaligned() accessors resolve to the leXX_to_cpup accessors that
    operate on aligned addresses.
    
    Since the compiler will in fact emit ldrd or ldm instructions when
    building this code for ARM v6 or later, the solution is to use the
    unaligned accessors unconditionally on architectures where this is
    known to be fast. The _aligned version of the hash function is
    however still needed to get the best performance on architectures
    that cannot do any unaligned access in hardware.
    
    This new version avoids the undefined behavior and should produce
    the fastest hash on all architectures we support.
    
    Link: https://lore.kernel.org/linux-arm-kernel/20181008211554.5355-4-ard.biesheuvel@linaro.org/
    Link: https://lore.kernel.org/linux-crypto/CAK8P3a2KfmmGDbVHULWevB0hv71P2oi2ZCHEAqT=8dQfa0=cqQ@mail.gmail.com/
    Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Fixes: 2c956a60778c ("siphash: add cryptographically secure PRF")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0ff618f2b3fdccde8da541f53ac72f8e547ee8a
Author: Benjamin Poirier <bpoirier@nvidia.com>
Date:   Mon Nov 29 15:15:05 2021 +0900

    net: mpls: Fix notifications when deleting a device
    
    commit 7d4741eacdefa5f0475431645b56baf00784df1f upstream.
    
    There are various problems related to netlink notifications for mpls route
    changes in response to interfaces being deleted:
    * delete interface of only nexthop
            DELROUTE notification is missing RTA_OIF attribute
    * delete interface of non-last nexthop
            NEWROUTE notification is missing entirely
    * delete interface of last nexthop
            DELROUTE notification is missing nexthop
    
    All of these problems stem from the fact that existing routes are modified
    in-place before sending a notification. Restructure mpls_ifdown() to avoid
    changing the route in the DELROUTE cases and to create a copy in the
    NEWROUTE case.
    
    Fixes: f8efb73c97e2 ("mpls: multipath route support")
    Signed-off-by: Benjamin Poirier <bpoirier@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 550658a2d61e4eaf522c8ebc7fad76dc376bfb45
Author: Zhou Qingyang <zhou1615@umn.edu>
Date:   Tue Nov 30 19:08:48 2021 +0800

    net: qlogic: qlcnic: Fix a NULL pointer dereference in qlcnic_83xx_add_rings()
    
    commit e2dabc4f7e7b60299c20a36d6a7b24ed9bf8e572 upstream.
    
    In qlcnic_83xx_add_rings(), the indirect function of
    ahw->hw_ops->alloc_mbx_args will be called to allocate memory for
    cmd.req.arg, and there is a dereference of it in qlcnic_83xx_add_rings(),
    which could lead to a NULL pointer dereference on failure of the
    indirect function like qlcnic_83xx_alloc_mbx_args().
    
    Fix this bug by adding a check of alloc_mbx_args(), this patch
    imitates the logic of mbx_cmd()'s failure handling.
    
    This bug was found by a static analyzer. The analysis employs
    differential checking to identify inconsistent security operations
    (e.g., checks or kfrees) between two code paths and confirms that the
    inconsistent operations are not recovered in the current function or
    the callers, so they constitute bugs.
    
    Note that, as a bug found by static analysis, it can be a false
    positive or hard to trigger. Multiple researchers have cross-reviewed
    the bug.
    
    Builds with CONFIG_QLCNIC=m show no new warnings, and our
    static analyzer no longer warns about this code.
    
    Fixes: 7f9664525f9c ("qlcnic: 83xx memory map and HW access routine")
    Signed-off-by: Zhou Qingyang <zhou1615@umn.edu>
    Link: https://lore.kernel.org/r/20211130110848.109026-1-zhou1615@umn.edu
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f923b04e484eb1f649b3863871ced695388fab39
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Nov 29 22:39:47 2021 -0800

    natsemi: xtensa: fix section mismatch warnings
    
    commit b0f38e15979fa8851e88e8aa371367f264e7b6e9 upstream.
    
    Fix section mismatch warnings in xtsonic. The first one appears to be
    bogus and after fixing the second one, the first one is gone.
    
    WARNING: modpost: vmlinux.o(.text+0x529adc): Section mismatch in reference from the function sonic_get_stats() to the function .init.text:set_reset_devices()
    The function sonic_get_stats() references
    the function __init set_reset_devices().
    This is often because sonic_get_stats lacks a __init
    annotation or the annotation of set_reset_devices is wrong.
    
    WARNING: modpost: vmlinux.o(.text+0x529b3b): Section mismatch in reference from the function xtsonic_probe() to the function .init.text:sonic_probe1()
    The function xtsonic_probe() references
    the function __init sonic_probe1().
    This is often because xtsonic_probe lacks a __init
    annotation or the annotation of sonic_probe1 is wrong.
    
    Fixes: 74f2a5f0ef64 ("xtensa: Add support for the Sonic Ethernet device for the XT2000 board.")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Cc: Finn Thain <fthain@telegraphics.com.au>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: linux-xtensa@linux-xtensa.org
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Acked-by: Max Filippov <jcmvbkbc@gmail.com>
    Link: https://lore.kernel.org/r/20211130063947.7529-1-rdunlap@infradead.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98548c3a9882a1ea993a103be7c1b499f3b88202
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 1 10:06:14 2021 -0800

    fget: check that the fd still exists after getting a ref to it
    
    commit 054aa8d439b9185d4f5eb9a90282d1ce74772969 upstream.
    
    Jann Horn points out that there is another possible race wrt Unix domain
    socket garbage collection, somewhat reminiscent of the one fixed in
    commit cbcf01128d0a ("af_unix: fix garbage collect vs MSG_PEEK").
    
    See the extended comment about the garbage collection requirements added
    to unix_peek_fds() by that commit for details.
    
    The race comes from how we can locklessly look up a file descriptor just
    as it is in the process of being closed, and with the right artificial
    timing (Jann added a few strategic 'mdelay(500)' calls to do that), the
    Unix domain socket garbage collector could see the reference count
    decrement of the close() happen before fget() took its reference to the
    file and the file was attached onto a new file descriptor.
    
    This is all (intentionally) correct on the 'struct file *' side, with
    RCU lookups and lockless reference counting very much part of the
    design.  Getting that reference count out of order isn't a problem per
    se.
    
    But the garbage collector can get confused by seeing this situation of
    having seen a file not having any remaining external references and then
    seeing it being attached to an fd.
    
    In commit cbcf01128d0a ("af_unix: fix garbage collect vs MSG_PEEK") the
    fix was to serialize the file descriptor install with the garbage
    collector by taking and releasing the unix_gc_lock.
    
    That's not really an option here, but since this all happens when we are
    in the process of looking up a file descriptor, we can instead simply
    just re-check that the file hasn't been closed in the meantime, and just
    re-do the lookup if we raced with a concurrent close() of the same file
    descriptor.
    
    Reported-and-tested-by: Jann Horn <jannh@google.com>
    Acked-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d8e40836044aeff3192f072425ea19f5c5807eb
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Nov 21 10:32:39 2018 -0700

    fs: add fget_many() and fput_many()
    
    commit 091141a42e15fe47ada737f3996b317072afcefb upstream.
    
    Some uses cases repeatedly get and put references to the same file, but
    the only exposed interface is doing these one at the time. As each of
    these entail an atomic inc or dec on a shared structure, that cost can
    add up.
    
    Add fget_many(), which works just like fget(), except it takes an
    argument for how many references to get on the file. Ditto fput_many(),
    which can drop an arbitrary number of references to a file.
    
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b63ee2febedce876d31baa2bf345850e3b00b5ee
Author: Baokun Li <libaokun1@huawei.com>
Date:   Fri Nov 26 10:03:07 2021 +0800

    sata_fsl: fix warning in remove_proc_entry when rmmod sata_fsl
    
    commit 6f48394cf1f3e8486591ad98c11cdadb8f1ef2ad upstream.
    
    Trying to remove the fsl-sata module in the PPC64 GNU/Linux
    leads to the following warning:
     ------------[ cut here ]------------
     remove_proc_entry: removing non-empty directory 'irq/69',
       leaking at least 'fsl-sata[ff0221000.sata]'
     WARNING: CPU: 3 PID: 1048 at fs/proc/generic.c:722
       .remove_proc_entry+0x20c/0x220
     IRQMASK: 0
     NIP [c00000000033826c] .remove_proc_entry+0x20c/0x220
     LR [c000000000338268] .remove_proc_entry+0x208/0x220
     Call Trace:
      .remove_proc_entry+0x208/0x220 (unreliable)
      .unregister_irq_proc+0x104/0x140
      .free_desc+0x44/0xb0
      .irq_free_descs+0x9c/0xf0
      .irq_dispose_mapping+0x64/0xa0
      .sata_fsl_remove+0x58/0xa0 [sata_fsl]
      .platform_drv_remove+0x40/0x90
      .device_release_driver_internal+0x160/0x2c0
      .driver_detach+0x64/0xd0
      .bus_remove_driver+0x70/0xf0
      .driver_unregister+0x38/0x80
      .platform_driver_unregister+0x14/0x30
      .fsl_sata_driver_exit+0x18/0xa20 [sata_fsl]
     ---[ end trace 0ea876d4076908f5 ]---
    
    The driver creates the mapping by calling irq_of_parse_and_map(),
    so it also has to dispose the mapping. But the easy way out is to
    simply use platform_get_irq() instead of irq_of_parse_map(). Also
    we should adapt return value checking and propagate error values.
    
    In this case the mapping is not managed by the device but by
    the of core, so the device has not to dispose the mapping.
    
    Fixes: faf0b2e5afe7 ("drivers/ata: add support to Freescale 3.0Gbps SATA Controller")
    Cc: stable@vger.kernel.org
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 325ea49fc43cbc03a5e1e37de8f0ca6357ced4b1
Author: Baokun Li <libaokun1@huawei.com>
Date:   Fri Nov 26 10:03:06 2021 +0800

    sata_fsl: fix UAF in sata_fsl_port_stop when rmmod sata_fsl
    
    commit 6c8ad7e8cf29eb55836e7a0215f967746ab2b504 upstream.
    
    When the `rmmod sata_fsl.ko` command is executed in the PPC64 GNU/Linux,
    a bug is reported:
     ==================================================================
     BUG: Unable to handle kernel data access on read at 0x80000800805b502c
     Oops: Kernel access of bad area, sig: 11 [#1]
     NIP [c0000000000388a4] .ioread32+0x4/0x20
     LR [80000000000c6034] .sata_fsl_port_stop+0x44/0xe0 [sata_fsl]
     Call Trace:
      .free_irq+0x1c/0x4e0 (unreliable)
      .ata_host_stop+0x74/0xd0 [libata]
      .release_nodes+0x330/0x3f0
      .device_release_driver_internal+0x178/0x2c0
      .driver_detach+0x64/0xd0
      .bus_remove_driver+0x70/0xf0
      .driver_unregister+0x38/0x80
      .platform_driver_unregister+0x14/0x30
      .fsl_sata_driver_exit+0x18/0xa20 [sata_fsl]
      .__se_sys_delete_module+0x1ec/0x2d0
      .system_call_exception+0xfc/0x1f0
      system_call_common+0xf8/0x200
     ==================================================================
    
    The triggering of the BUG is shown in the following stack:
    
    driver_detach
      device_release_driver_internal
        __device_release_driver
          drv->remove(dev) --> platform_drv_remove/platform_remove
            drv->remove(dev) --> sata_fsl_remove
              iounmap(host_priv->hcr_base);                 <---- unmap
              kfree(host_priv);                             <---- free
          devres_release_all
            release_nodes
              dr->node.release(dev, dr->data) --> ata_host_stop
                ap->ops->port_stop(ap) --> sata_fsl_port_stop
                    ioread32(hcr_base + HCONTROL)           <---- UAF
                host->ops->host_stop(host)
    
    The iounmap(host_priv->hcr_base) and kfree(host_priv) functions should
    not be executed in drv->remove. These functions should be executed in
    host_stop after port_stop. Therefore, we move these functions to the
    new function sata_fsl_host_stop and bind the new function to host_stop.
    
    Fixes: faf0b2e5afe7 ("drivers/ata: add support to Freescale 3.0Gbps SATA Controller")
    Cc: stable@vger.kernel.org
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f16a42930c06e87807663dde2e9b3a77f5da6c8
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Dec 1 23:45:50 2021 +0900

    kprobes: Limit max data_size of the kretprobe instances
    
    commit 6bbfa44116689469267f1a6e3d233b52114139d2 upstream.
    
    The 'kprobe::data_size' is unsigned, thus it can not be negative.  But if
    user sets it enough big number (e.g. (size_t)-8), the result of 'data_size
    + sizeof(struct kretprobe_instance)' becomes smaller than sizeof(struct
    kretprobe_instance) or zero. In result, the kretprobe_instance are
    allocated without enough memory, and kretprobe accesses outside of
    allocated memory.
    
    To avoid this issue, introduce a max limitation of the
    kretprobe::data_size. 4KB per instance should be OK.
    
    Link: https://lkml.kernel.org/r/163836995040.432120.10322772773821182925.stgit@devnote2
    
    Cc: stable@vger.kernel.org
    Fixes: f47cd9b553aa ("kprobes: kretprobe user entry-handler")
    Reported-by: zhangyue <zhangyue1@kylinos.cn>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95d61f9fd20fbab3c06bb78e3a9d31f28a444c2a
Author: Stephen Suryaputra <ssuryaextr@gmail.com>
Date:   Tue Nov 30 11:26:37 2021 -0500

    vrf: Reset IPCB/IP6CB when processing outbound pkts in vrf dev xmit
    
    commit ee201011c1e1563c114a55c86eb164b236f18e84 upstream.
    
    IPCB/IP6CB need to be initialized when processing outbound v4 or v6 pkts
    in the codepath of vrf device xmit function so that leftover garbage
    doesn't cause futher code that uses the CB to incorrectly process the
    pkt.
    
    One occasion of the issue might occur when MPLS route uses the vrf
    device as the outgoing device such as when the route is added using "ip
    -f mpls route add <label> dev <vrf>" command.
    
    The problems seems to exist since day one. Hence I put the day one
    commits on the Fixes tags.
    
    Fixes: 193125dbd8eb ("net: Introduce VRF device driver")
    Fixes: 35402e313663 ("net: Add IPv6 support to VRF device")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephen Suryaputra <ssuryaextr@gmail.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/20211130162637.3249-1-ssuryaextr@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5c8a26c0dc69a400553245e92d741fe55f91095
Author: Ian Rogers <irogers@google.com>
Date:   Wed Nov 17 23:12:47 2021 -0800

    perf hist: Fix memory leak of a perf_hpp_fmt
    
    [ Upstream commit 0ca1f534a776cc7d42f2c33da4732b74ec2790cd ]
    
    perf_hpp__column_unregister() removes an entry from a list but doesn't
    free the memory causing a memory leak spotted by leak sanitizer.
    
    Add the free while at the same time reducing the scope of the function
    to static.
    
    Signed-off-by: Ian Rogers <irogers@google.com>
    Reviewed-by: Kajol Jain <kjain@linux.ibm.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lore.kernel.org/lkml/20211118071247.2140392-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae3c30ca1894ead38e39576289e5a8346621450f
Author: Teng Qi <starmiku1207184332@gmail.com>
Date:   Thu Nov 18 15:01:18 2021 +0800

    net: ethernet: dec: tulip: de4x5: fix possible array overflows in type3_infoblock()
    
    [ Upstream commit 0fa68da72c3be09e06dd833258ee89c33374195f ]
    
    The definition of macro MOTO_SROM_BUG is:
      #define MOTO_SROM_BUG    (lp->active == 8 && (get_unaligned_le32(
      dev->dev_addr) & 0x00ffffff) == 0x3e0008)
    
    and the if statement
      if (MOTO_SROM_BUG) lp->active = 0;
    
    using this macro indicates lp->active could be 8. If lp->active is 8 and
    the second comparison of this macro is false. lp->active will remain 8 in:
      lp->phy[lp->active].gep = (*p ? p : NULL); p += (2 * (*p) + 1);
      lp->phy[lp->active].rst = (*p ? p : NULL); p += (2 * (*p) + 1);
      lp->phy[lp->active].mc  = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].ana = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].fdx = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].ttm = get_unaligned_le16(p); p += 2;
      lp->phy[lp->active].mci = *p;
    
    However, the length of array lp->phy is 8, so array overflows can occur.
    To fix these possible array overflows, we first check lp->active and then
    return -EINVAL if it is greater or equal to ARRAY_SIZE(lp->phy) (i.e. 8).
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Teng Qi <starmiku1207184332@gmail.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3dedaa5a601107cfedda087209772c76e364d58
Author: zhangyue <zhangyue1@kylinos.cn>
Date:   Thu Nov 18 13:46:32 2021 +0800

    net: tulip: de4x5: fix the problem that the array 'lp->phy[8]' may be out of bound
    
    [ Upstream commit 61217be886b5f7402843677e4be7e7e83de9cb41 ]
    
    In line 5001, if all id in the array 'lp->phy[8]' is not 0, when the
    'for' end, the 'k' is 8.
    
    At this time, the array 'lp->phy[8]' may be out of bound.
    
    Signed-off-by: zhangyue <zhangyue1@kylinos.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abbd5faa0748d0aa95d5191d56ff7a17a6275bd1
Author: Teng Qi <starmiku1207184332@gmail.com>
Date:   Wed Nov 17 11:44:53 2021 +0800

    ethernet: hisilicon: hns: hns_dsaf_misc: fix a possible array overflow in hns_dsaf_ge_srst_by_port()
    
    [ Upstream commit a66998e0fbf213d47d02813b9679426129d0d114 ]
    
    The if statement:
      if (port >= DSAF_GE_NUM)
            return;
    
    limits the value of port less than DSAF_GE_NUM (i.e., 8).
    However, if the value of port is 6 or 7, an array overflow could occur:
      port_rst_off = dsaf_dev->mac_cb[port]->port_rst_off;
    
    because the length of dsaf_dev->mac_cb is DSAF_MAX_PORT_NUM (i.e., 6).
    
    To fix this possible array overflow, we first check port and if it is
    greater than or equal to DSAF_MAX_PORT_NUM, the function returns.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Teng Qi <starmiku1207184332@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e618c6171bccebc6bcb07eaa29812ec4669a534
Author: Mike Christie <michael.christie@oracle.com>
Date:   Fri Nov 5 17:10:47 2021 -0500

    scsi: iscsi: Unblock session then wake up error handler
    
    [ Upstream commit a0c2f8b6709a9a4af175497ca65f93804f57b248 ]
    
    We can race where iscsi_session_recovery_timedout() has woken up the error
    handler thread and it's now setting the devices to offline, and
    session_recovery_timedout()'s call to scsi_target_unblock() is also trying
    to set the device's state to transport-offline. We can then get a mix of
    states.
    
    For the case where we can't relogin we want the devices to be in
    transport-offline so when we have repaired the connection
    __iscsi_unblock_session() can set the state back to running.
    
    Set the device state then call into libiscsi to wake up the error handler.
    
    Link: https://lore.kernel.org/r/20211105221048.6541-2-michael.christie@oracle.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad4d6cd6a2e3bcf409868f25be250c7b319e8a2c
Author: Manaf Meethalavalappu Pallikunhi <manafm@codeaurora.org>
Date:   Wed Nov 3 01:30:40 2021 +0530

    thermal: core: Reset previous low and high trip during thermal zone init
    
    [ Upstream commit 99b63316c39988039965693f5f43d8b4ccb1c86c ]
    
    During the suspend is in process, thermal_zone_device_update bails out
    thermal zone re-evaluation for any sensor trip violation without
    setting next valid trip to that sensor. It assumes during resume
    it will re-evaluate same thermal zone and update trip. But when it is
    in suspend temperature goes down and on resume path while updating
    thermal zone if temperature is less than previously violated trip,
    thermal zone set trip function evaluates the same previous high and
    previous low trip as new high and low trip. Since there is no change
    in high/low trip, it bails out from thermal zone set trip API without
    setting any trip. It leads to a case where sensor high trip or low
    trip is disabled forever even though thermal zone has a valid high
    or low trip.
    
    During thermal zone device init, reset thermal zone previous high
    and low trip. It resolves above mentioned scenario.
    
    Signed-off-by: Manaf Meethalavalappu Pallikunhi <manafm@codeaurora.org>
    Reviewed-by: Thara Gopinath <thara.gopinath@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4e7b95df3e224ff2a1f9c7bc25c5e2fa81ce7d8
Author: Wang Yugui <wangyugui@e16-tech.com>
Date:   Thu Oct 28 06:32:54 2021 +0800

    btrfs: check-integrity: fix a warning on write caching disabled disk
    
    [ Upstream commit a91cf0ffbc244792e0b3ecf7d0fddb2f344b461f ]
    
    When a disk has write caching disabled, we skip submission of a bio with
    flush and sync requests before writing the superblock, since it's not
    needed. However when the integrity checker is enabled, this results in
    reports that there are metadata blocks referred by a superblock that
    were not properly flushed. So don't skip the bio submission only when
    the integrity checker is enabled for the sake of simplicity, since this
    is a debug tool and not meant for use in non-debug builds.
    
    fstests/btrfs/220 trigger a check-integrity warning like the following
    when CONFIG_BTRFS_FS_CHECK_INTEGRITY=y and the disk with WCE=0.
    
      btrfs: attempt to write superblock which references block M @5242880 (sdb2/5242880/0) which is not flushed out of disk's write cache (block flush_gen=1, dev->flush_gen=0)!
      ------------[ cut here ]------------
      WARNING: CPU: 28 PID: 843680 at fs/btrfs/check-integrity.c:2196 btrfsic_process_written_superblock+0x22a/0x2a0 [btrfs]
      CPU: 28 PID: 843680 Comm: umount Not tainted 5.15.0-0.rc5.39.el8.x86_64 #1
      Hardware name: Dell Inc. Precision T7610/0NK70N, BIOS A18 09/11/2019
      RIP: 0010:btrfsic_process_written_superblock+0x22a/0x2a0 [btrfs]
      RSP: 0018:ffffb642afb47940 EFLAGS: 00010246
      RAX: 0000000000000000 RBX: 0000000000000002 RCX: 0000000000000000
      RDX: 00000000ffffffff RSI: ffff8b722fc97d00 RDI: ffff8b722fc97d00
      RBP: ffff8b5601c00000 R08: 0000000000000000 R09: c0000000ffff7fff
      R10: 0000000000000001 R11: ffffb642afb476f8 R12: ffffffffffffffff
      R13: ffffb642afb47974 R14: ffff8b5499254c00 R15: 0000000000000003
      FS:  00007f00a06d4080(0000) GS:ffff8b722fc80000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007fff5cff5ff0 CR3: 00000001c0c2a006 CR4: 00000000001706e0
      Call Trace:
       btrfsic_process_written_block+0x2f7/0x850 [btrfs]
       __btrfsic_submit_bio.part.19+0x310/0x330 [btrfs]
       ? bio_associate_blkg_from_css+0xa4/0x2c0
       btrfsic_submit_bio+0x18/0x30 [btrfs]
       write_dev_supers+0x81/0x2a0 [btrfs]
       ? find_get_pages_range_tag+0x219/0x280
       ? pagevec_lookup_range_tag+0x24/0x30
       ? __filemap_fdatawait_range+0x6d/0xf0
       ? __raw_callee_save___native_queued_spin_unlock+0x11/0x1e
       ? find_first_extent_bit+0x9b/0x160 [btrfs]
       ? __raw_callee_save___native_queued_spin_unlock+0x11/0x1e
       write_all_supers+0x1b3/0xa70 [btrfs]
       ? __raw_callee_save___native_queued_spin_unlock+0x11/0x1e
       btrfs_commit_transaction+0x59d/0xac0 [btrfs]
       close_ctree+0x11d/0x339 [btrfs]
       generic_shutdown_super+0x71/0x110
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0xb8/0x140
       task_work_run+0x6d/0xb0
       exit_to_user_mode_prepare+0x1f0/0x200
       syscall_exit_to_user_mode+0x12/0x30
       do_syscall_64+0x46/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xae
      RIP: 0033:0x7f009f711dfb
      RSP: 002b:00007fff5cff7928 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 000055b68c6c9970 RCX: 00007f009f711dfb
      RDX: 0000000000000001 RSI: 0000000000000000 RDI: 000055b68c6c9b50
      RBP: 0000000000000000 R08: 000055b68c6ca900 R09: 00007f009f795580
      R10: 0000000000000000 R11: 0000000000000246 R12: 000055b68c6c9b50
      R13: 00007f00a04bf184 R14: 0000000000000000 R15: 00000000ffffffff
      ---[ end trace 2c4b82abcef9eec4 ]---
      S-65536(sdb2/65536/1)
       -->
      M-1064960(sdb2/1064960/1)
    
    Reviewed-by: Filipe Manana <fdmanana@gmail.com>
    Signed-off-by: Wang Yugui <wangyugui@e16-tech.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5291b6599f0aad21936e80d15bd6788368836df3
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Thu Oct 14 13:38:17 2021 +0200

    s390/setup: avoid using memblock_enforce_memory_limit
    
    [ Upstream commit 5dbc4cb4667457b0c53bcd7bff11500b3c362975 ]
    
    There is a difference in how architectures treat "mem=" option. For some
    that is an amount of online memory, for s390 and x86 this is the limiting
    max address. Some memblock api like memblock_enforce_memory_limit()
    take limit argument and explicitly treat it as the size of online memory,
    and use __find_max_addr to convert it to an actual max address. Current
    s390 usage:
    
    memblock_enforce_memory_limit(memblock_end_of_DRAM());
    
    yields different results depending on presence of memory holes (offline
    memory blocks in between online memory). If there are no memory holes
    limit == max_addr in memblock_enforce_memory_limit() and it does trim
    online memory and reserved memory regions. With memory holes present it
    actually does nothing.
    
    Since we already use memblock_remove() explicitly to trim online memory
    regions to potential limit (think mem=, kdump, addressing limits, etc.)
    drop the usage of memblock_enforce_memory_limit() altogether. Trimming
    reserved regions should not be required, since we now use
    memblock_set_current_limit() to limit allocations and any explicit memory
    reservations above the limit is an actual problem we should not hide.
    
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 705616ecff4ce578bafe187a74c648d3069dc3e5
Author: Slark Xiao <slark_xiao@163.com>
Date:   Mon Nov 8 14:06:48 2021 +0800

    platform/x86: thinkpad_acpi: Fix WWAN device disabled issue after S3 deep
    
    [ Upstream commit 39f53292181081d35174a581a98441de5da22bc9 ]
    
    When WWAN device wake from S3 deep, under thinkpad platform,
    WWAN would be disabled. This disable status could be checked
    by command 'nmcli r wwan' or 'rfkill list'.
    
    Issue analysis as below:
      When host resume from S3 deep, thinkpad_acpi driver would
    call hotkey_resume() function. Finnaly, it will use
    wan_get_status to check the current status of WWAN device.
    During this resume progress, wan_get_status would always
    return off even WWAN boot up completely.
      In patch V2, Hans said 'sw_state should be unchanged
    after a suspend/resume. It's better to drop the
    tpacpi_rfk_update_swstate call all together from the
    resume path'.
      And it's confimed by Lenovo that GWAN is no longer
     available from WHL generation because the design does not
     match with current pin control.
    
    Signed-off-by: Slark Xiao <slark_xiao@163.com>
    Link: https://lore.kernel.org/r/20211108060648.8212-1-slark_xiao@163.com
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ce4633f9b446aa772d0788e3e9194f75c1a4ac5
Author: liuguoqiang <liuguoqiang@uniontech.com>
Date:   Mon Nov 15 16:14:48 2021 +0800

    net: return correct error code
    
    [ Upstream commit 6def480181f15f6d9ec812bca8cbc62451ba314c ]
    
    When kmemdup called failed and register_net_sysctl return NULL, should
    return ENOMEM instead of ENOBUFS
    
    Signed-off-by: liuguoqiang <liuguoqiang@uniontech.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b0ac11742b0d6383472b869bd3633be175d7d9e
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Fri Oct 5 15:51:33 2018 -0700

    hugetlb: take PMD sharing into account when flushing tlb/caches
    
    commit dff11abe280b47c21b804a8ace318e0638bb9a49 upstream.
    
    When fixing an issue with PMD sharing and migration, it was discovered via
    code inspection that other callers of huge_pmd_unshare potentially have an
    issue with cache and tlb flushing.
    
    Use the routine adjust_range_if_pmd_sharing_possible() to calculate worst
    case ranges for mmu notifiers.  Ensure that this range is flushed if
    huge_pmd_unshare succeeds and unmaps a PUD_SUZE area.
    
    Link: http://lkml.kernel.org/r/20180823205917.16297-3-mike.kravetz@oracle.com
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2387ff2f17501a208ef3524001a1df6cc151e26e
Author: Benjamin Coddington <bcodding@redhat.com>
Date:   Tue Nov 16 10:48:13 2021 -0500

    NFSv42: Fix pagecache invalidation after COPY/CLONE
    
    commit 3f015d89a47cd8855cd92f71fff770095bd885a1 upstream.
    
    The mechanism in use to allow the client to see the results of COPY/CLONE
    is to drop those pages from the pagecache.  This forces the client to read
    those pages once more from the server.  However, truncate_pagecache_range()
    zeros out partial pages instead of dropping them.  Let us instead use
    invalidate_inode_pages2_range() with full-page offsets to ensure the client
    properly sees the results of COPY/CLONE operations.
    
    Cc: <stable@vger.kernel.org> # v4.7+
    Fixes: 2e72448b07dc ("NFS: Add COPY nfs operation")
    Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c537846f7270e5754324046c594a017c5f268b32
Author: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
Date:   Fri Nov 19 16:43:18 2021 -0800

    ipc: WARN if trying to remove ipc object which is absent
    
    commit 126e8bee943e9926238c891e2df5b5573aee76bc upstream.
    
    Patch series "shm: shm_rmid_forced feature fixes".
    
    Some time ago I met kernel crash after CRIU restore procedure,
    fortunately, it was CRIU restore, so, I had dump files and could do
    restore many times and crash reproduced easily.  After some
    investigation I've constructed the minimal reproducer.  It was found
    that it's use-after-free and it happens only if sysctl
    kernel.shm_rmid_forced = 1.
    
    The key of the problem is that the exit_shm() function not handles shp's
    object destroy when task->sysvshm.shm_clist contains items from
    different IPC namespaces.  In most cases this list will contain only
    items from one IPC namespace.
    
    How can this list contain object from different namespaces? The
    exit_shm() function is designed to clean up this list always when
    process leaves IPC namespace.  But we made a mistake a long time ago and
    did not add a exit_shm() call into the setns() syscall procedures.
    
    The first idea was just to add this call to setns() syscall but it
    obviously changes semantics of setns() syscall and that's
    userspace-visible change.  So, I gave up on this idea.
    
    The first real attempt to address the issue was just to omit forced
    destroy if we meet shp object not from current task IPC namespace [1].
    But that was not the best idea because task->sysvshm.shm_clist was
    protected by rwsem which belongs to current task IPC namespace.  It
    means that list corruption may occur.
    
    Second approach is just extend exit_shm() to properly handle shp's from
    different IPC namespaces [2].  This is really non-trivial thing, I've
    put a lot of effort into that but not believed that it's possible to
    make it fully safe, clean and clear.
    
    Thanks to the efforts of Manfred Spraul working an elegant solution was
    designed.  Thanks a lot, Manfred!
    
    Eric also suggested the way to address the issue in ("[RFC][PATCH] shm:
    In shm_exit destroy all created and never attached segments") Eric's
    idea was to maintain a list of shm_clists one per IPC namespace, use
    lock-less lists.  But there is some extra memory consumption-related
    concerns.
    
    An alternative solution which was suggested by me was implemented in
    ("shm: reset shm_clist on setns but omit forced shm destroy").  The idea
    is pretty simple, we add exit_shm() syscall to setns() but DO NOT
    destroy shm segments even if sysctl kernel.shm_rmid_forced = 1, we just
    clean up the task->sysvshm.shm_clist list.
    
    This chages semantics of setns() syscall a little bit but in comparision
    to the "naive" solution when we just add exit_shm() without any special
    exclusions this looks like a safer option.
    
    [1] https://lkml.org/lkml/2021/7/6/1108
    [2] https://lkml.org/lkml/2021/7/14/736
    
    This patch (of 2):
    
    Let's produce a warning if we trying to remove non-existing IPC object
    from IPC namespace kht/idr structures.
    
    This allows us to catch possible bugs when the ipc_rmid() function was
    called with inconsistent struct ipc_ids*, struct kern_ipc_perm*
    arguments.
    
    Link: https://lkml.kernel.org/r/20211027224348.611025-1-alexander.mikhalitsyn@virtuozzo.com
    Link: https://lkml.kernel.org/r/20211027224348.611025-2-alexander.mikhalitsyn@virtuozzo.com
    Co-developed-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
    Cc: Vasily Averin <vvs@virtuozzo.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8619236d939f19fc8e177b17e8365a3ff16f9b0e
Author: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
Date:   Fri Nov 19 16:43:21 2021 -0800

    shm: extend forced shm destroy to support objects from several IPC nses
    
    commit 85b6d24646e4125c591639841169baa98a2da503 upstream.
    
    Currently, the exit_shm() function not designed to work properly when
    task->sysvshm.shm_clist holds shm objects from different IPC namespaces.
    
    This is a real pain when sysctl kernel.shm_rmid_forced = 1, because it
    leads to use-after-free (reproducer exists).
    
    This is an attempt to fix the problem by extending exit_shm mechanism to
    handle shm's destroy from several IPC ns'es.
    
    To achieve that we do several things:
    
    1. add a namespace (non-refcounted) pointer to the struct shmid_kernel
    
    2. during new shm object creation (newseg()/shmget syscall) we
       initialize this pointer by current task IPC ns
    
    3. exit_shm() fully reworked such that it traverses over all shp's in
       task->sysvshm.shm_clist and gets IPC namespace not from current task
       as it was before but from shp's object itself, then call
       shm_destroy(shp, ns).
    
    Note: We need to be really careful here, because as it was said before
    (1), our pointer to IPC ns non-refcnt'ed.  To be on the safe side we
    using special helper get_ipc_ns_not_zero() which allows to get IPC ns
    refcounter only if IPC ns not in the "state of destruction".
    
    Q/A
    
    Q: Why can we access shp->ns memory using non-refcounted pointer?
    A: Because shp object lifetime is always shorther than IPC namespace
       lifetime, so, if we get shp object from the task->sysvshm.shm_clist
       while holding task_lock(task) nobody can steal our namespace.
    
    Q: Does this patch change semantics of unshare/setns/clone syscalls?
    A: No. It's just fixes non-covered case when process may leave IPC
       namespace without getting task->sysvshm.shm_clist list cleaned up.
    
    Link: https://lkml.kernel.org/r/67bb03e5-f79c-1815-e2bf-949c67047418@colorfullife.com
    Link: https://lkml.kernel.org/r/20211109151501.4921-1-manfred@colorfullife.com
    Fixes: ab602f79915 ("shm: make exit_shm work proportional to task activity")
    Co-developed-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
    Cc: Vasily Averin <vvs@virtuozzo.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 875475219ef95135e212f5fb902246cefa9fee15
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 12:25:57 2021 +0100

    tty: hvc: replace BUG_ON() with negative return value
    
    commit e679004dec37566f658a255157d3aed9d762a2b7 upstream.
    
    Xen frontends shouldn't BUG() in case of illegal data received from
    their backends. So replace the BUG_ON()s when reading illegal data from
    the ring page with negative return values.
    
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/20210707091045.460-1-jgross@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db954a52438db8d8d3c7431c6ebd37f6aa771f63
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 12:25:17 2021 +0100

    xen/netfront: don't trust the backend response data blindly
    
    commit a884daa61a7d91650987e855464526aef219590f upstream.
    
    Today netfront will trust the backend to send only sane response data.
    In order to avoid privilege escalations or crashes in case of malicious
    backends verify the data to be within expected limits. Especially make
    sure that the response always references an outstanding request.
    
    Note that only the tx queue needs special id handling, as for the rx
    queue the id is equal to the index in the ring page.
    
    Introduce a new indicator for the device whether it is broken and let
    the device stop working when it is set. Set this indicator in case the
    backend sets any weird data.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82ab9e01d4158e128cece4ab3c6b04ba436c7b28
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 12:24:32 2021 +0100

    xen/netfront: disentangle tx_skb_freelist
    
    commit 21631d2d741a64a073e167c27769e73bc7844a2f upstream.
    
    The tx_skb_freelist elements are in a single linked list with the
    request id used as link reference. The per element link field is in a
    union with the skb pointer of an in use request.
    
    Move the link reference out of the union in order to enable a later
    reuse of it for requests which need a populated skb pointer.
    
    Rename add_id_to_freelist() and get_id_from_freelist() to
    add_id_to_list() and get_id_from_list() in order to prepare using
    those for other lists as well. Define ~0 as value to indicate the end
    of a list and place that value into the link for a request not being
    on the list.
    
    When freeing a skb zero the skb pointer in the request. Use a NULL
    value of the skb pointer instead of skb_entry_is_link() for deciding
    whether a request has a skb linked to it.
    
    Remove skb_entry_set_link() and open code it instead as it is really
    trivial now.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c010e30c398a5e73600bc40b006dc9d924ef3495
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 12:23:51 2021 +0100

    xen/netfront: don't read data from request on the ring page
    
    commit 162081ec33c2686afa29d91bf8d302824aa846c7 upstream.
    
    In order to avoid a malicious backend being able to influence the local
    processing of a request build the request locally first and then copy
    it to the ring page. Any reading from the request influencing the
    processing in the frontend needs to be done on the local instance.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae52bcd3ec46c24c9a222edc5da6be4158cb7b5
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 12:22:53 2021 +0100

    xen/netfront: read response from backend only once
    
    commit 8446066bf8c1f9f7b7412c43fbea0fb87464d75b upstream.
    
    In order to avoid problems in case the backend is modifying a response
    on the ring page while the frontend has already seen it, just read the
    response into a local buffer in one go and then operate on that buffer
    only.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bded27ef14c7488682068f3dc4ba1dd5a90789b
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 11:05:28 2021 +0100

    xen/blkfront: don't trust the backend response data blindly
    
    commit b94e4b147fd1992ad450e1fea1fdaa3738753373 upstream.
    
    Today blkfront will trust the backend to send only sane response data.
    In order to avoid privilege escalations or crashes in case of malicious
    backends verify the data to be within expected limits. Especially make
    sure that the response always references an outstanding request.
    
    Introduce a new state of the ring BLKIF_STATE_ERROR which will be
    switched to in case an inconsistency is being detected. Recovering from
    this state is possible only via removing and adding the virtual device
    again (e.g. via a suspend/resume cycle).
    
    Make all warning messages issued due to valid error responses rate
    limited in order to avoid message floods being triggered by a malicious
    backend.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Link: https://lore.kernel.org/r/20210730103854.12681-4-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5406c3ba1b8e4a7edda4a3b2ca3d8e4db6f2cbe
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 08:45:38 2021 +0100

    xen/blkfront: don't take local copy of a request from the ring page
    
    commit 8f5a695d99000fc3aa73934d7ced33cfc64dcdab upstream.
    
    In order to avoid a malicious backend being able to influence the local
    copy of a request build the request locally first and then copy it to
    the ring page instead of doing it the other way round as today.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Link: https://lore.kernel.org/r/20210730103854.12681-3-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ef991a05c00c59c7829b08e8a2be8f79dc6b1b1
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 08:41:07 2021 +0100

    xen/blkfront: read response from backend only once
    
    commit 71b66243f9898d0e54296b4e7035fb33cdcb0707 upstream.
    
    In order to avoid problems in case the backend is modifying a response
    on the ring page while the frontend has already seen it, just read the
    response into a local buffer in one go and then operate on that buffer
    only.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Link: https://lore.kernel.org/r/20210730103854.12681-2-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f705764dfa6347331624214b8147361ac0fa0dfe
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Nov 29 08:36:21 2021 +0100

    xen: sync include/xen/interface/io/ring.h with Xen's newest version
    
    commit 629a5d87e26fe96bcaab44cbb81f5866af6f7008 upstream.
    
    Sync include/xen/interface/io/ring.h with Xen's newest version in
    order to get the RING_COPY_RESPONSE() and RING_RESPONSE_PROD_OVERFLOW()
    macros.
    
    Note that this will correct the wrong license info by adding the
    missing original copyright notice.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89f4bb06cdeab8e503812170524099e5e48b2998
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Nov 25 14:05:18 2021 +0100

    fuse: release pipe buf after last use
    
    commit 473441720c8616dfaf4451f9c7ea14f0eb5e5d65 upstream.
    
    Checking buf->flags should be done before the pipe_buf_release() is called
    on the pipe buffer, since releasing the buffer might modify the flags.
    
    This is exactly what page_cache_pipe_buf_release() does, and which results
    in the same VM_BUG_ON_PAGE(PageLRU(page)) that the original patch was
    trying to fix.
    
    Reported-by: Justin Forbes <jmforbes@linuxtx.org>
    Fixes: 712a951025c0 ("fuse: fix page stealing")
    Cc: <stable@vger.kernel.org> # v2.6.35
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8937bfa226d4001875d8539ae811fce6d3df4c96
Author: Lin Ma <linma@zju.edu.cn>
Date:   Tue Nov 16 23:27:32 2021 +0800

    NFC: add NCI_UNREG flag to eliminate the race
    
    commit 48b71a9e66c2eab60564b1b1c85f4928ed04e406 upstream.
    
    There are two sites that calls queue_work() after the
    destroy_workqueue() and lead to possible UAF.
    
    The first site is nci_send_cmd(), which can happen after the
    nci_close_device as below
    
    nfcmrvl_nci_unregister_dev   |  nfc_genl_dev_up
      nci_close_device           |
        flush_workqueue          |
        del_timer_sync           |
      nci_unregister_device      |    nfc_get_device
        destroy_workqueue        |    nfc_dev_up
        nfc_unregister_device    |      nci_dev_up
          device_del             |        nci_open_device
                                 |          __nci_request
                                 |            nci_send_cmd
                                 |              queue_work !!!
    
    Another site is nci_cmd_timer, awaked by the nci_cmd_work from the
    nci_send_cmd.
    
      ...                        |  ...
      nci_unregister_device      |  queue_work
        destroy_workqueue        |
        nfc_unregister_device    |  ...
          device_del             |  nci_cmd_work
                                 |  mod_timer
                                 |  ...
                                 |  nci_cmd_timer
                                 |    queue_work !!!
    
    For the above two UAF, the root cause is that the nfc_dev_up can race
    between the nci_unregister_device routine. Therefore, this patch
    introduce NCI_UNREG flag to easily eliminate the possible race. In
    addition, the mutex_lock in nci_close_device can act as a barrier.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Fixes: 6a2968aaf50c ("NFC: basic NCI protocol implementation")
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20211116152732.19238-1-linma@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99d348b82bcb36171f24411d3f1a15706a2a937a
Author: David Hildenbrand <david@redhat.com>
Date:   Fri Nov 19 16:43:58 2021 -0800

    proc/vmcore: fix clearing user buffer by properly using clear_user()
    
    commit c1e63117711977cc4295b2ce73de29dd17066c82 upstream.
    
    To clear a user buffer we cannot simply use memset, we have to use
    clear_user().  With a virtio-mem device that registers a vmcore_cb and
    has some logically unplugged memory inside an added Linux memory block,
    I can easily trigger a BUG by copying the vmcore via "cp":
    
      systemd[1]: Starting Kdump Vmcore Save Service...
      kdump[420]: Kdump is using the default log level(3).
      kdump[453]: saving to /sysroot/var/crash/127.0.0.1-2021-11-11-14:59:22/
      kdump[458]: saving vmcore-dmesg.txt to /sysroot/var/crash/127.0.0.1-2021-11-11-14:59:22/
      kdump[465]: saving vmcore-dmesg.txt complete
      kdump[467]: saving vmcore
      BUG: unable to handle page fault for address: 00007f2374e01000
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0003) - permissions violation
      PGD 7a523067 P4D 7a523067 PUD 7a528067 PMD 7a525067 PTE 800000007048f867
      Oops: 0003 [#1] PREEMPT SMP NOPTI
      CPU: 0 PID: 468 Comm: cp Not tainted 5.15.0+ #6
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.14.0-27-g64f37cc530f1-prebuilt.qemu.org 04/01/2014
      RIP: 0010:read_from_oldmem.part.0.cold+0x1d/0x86
      Code: ff ff ff e8 05 ff fe ff e9 b9 e9 7f ff 48 89 de 48 c7 c7 38 3b 60 82 e8 f1 fe fe ff 83 fd 08 72 3c 49 8d 7d 08 4c 89 e9 89 e8 <49> c7 45 00 00 00 00 00 49 c7 44 05 f8 00 00 00 00 48 83 e7 f81
      RSP: 0018:ffffc9000073be08 EFLAGS: 00010212
      RAX: 0000000000001000 RBX: 00000000002fd000 RCX: 00007f2374e01000
      RDX: 0000000000000001 RSI: 00000000ffffdfff RDI: 00007f2374e01008
      RBP: 0000000000001000 R08: 0000000000000000 R09: ffffc9000073bc50
      R10: ffffc9000073bc48 R11: ffffffff829461a8 R12: 000000000000f000
      R13: 00007f2374e01000 R14: 0000000000000000 R15: ffff88807bd421e8
      FS:  00007f2374e12140(0000) GS:ffff88807f000000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f2374e01000 CR3: 000000007a4aa000 CR4: 0000000000350eb0
      Call Trace:
       read_vmcore+0x236/0x2c0
       proc_reg_read+0x55/0xa0
       vfs_read+0x95/0x190
       ksys_read+0x4f/0xc0
       do_syscall_64+0x3b/0x90
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Some x86-64 CPUs have a CPU feature called "Supervisor Mode Access
    Prevention (SMAP)", which is used to detect wrong access from the kernel
    to user buffers like this: SMAP triggers a permissions violation on
    wrong access.  In the x86-64 variant of clear_user(), SMAP is properly
    handled via clac()+stac().
    
    To fix, properly use clear_user() when we're dealing with a user buffer.
    
    Link: https://lkml.kernel.org/r/20211112092750.6921-1-david@redhat.com
    Fixes: 997c136f518c ("fs/proc/vmcore.c: add hook to read_from_oldmem() to check for non-ram pages")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Acked-by: Baoquan He <bhe@redhat.com>
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Vivek Goyal <vgoyal@redhat.com>
    Cc: Philipp Rudo <prudo@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bf1f5cb5150b1a53f6ccaadc0bc77f8f33206c8
Author: Nadav Amit <namit@vmware.com>
Date:   Sun Nov 21 12:40:07 2021 -0800

    hugetlbfs: flush TLBs correctly after huge_pmd_unshare
    
    commit a4a118f2eead1d6c49e00765de89878288d4b890 upstream.
    
    When __unmap_hugepage_range() calls to huge_pmd_unshare() succeed, a TLB
    flush is missing.  This TLB flush must be performed before releasing the
    i_mmap_rwsem, in order to prevent an unshared PMDs page from being
    released and reused before the TLB flush took place.
    
    Arguably, a comprehensive solution would use mmu_gather interface to
    batch the TLB flushes and the PMDs page release, however it is not an
    easy solution: (1) try_to_unmap_one() and try_to_migrate_one() also call
    huge_pmd_unshare() and they cannot use the mmu_gather interface; and (2)
    deferring the release of the page reference for the PMDs page until
    after i_mmap_rwsem is dropeed can confuse huge_pmd_unshare() into
    thinking PMDs are shared when they are not.
    
    Fix __unmap_hugepage_range() by adding the missing TLB flush, and
    forcing a flush when unshare is successful.
    
    Fixes: 24669e58477e ("hugetlb: use mmu_gather instead of a temporary linked list for accumulating pages)" # 3.6
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c755a93aa05e6e4ccdd3a5e921c0dd36f5c22c8b
Author: Marek Behún <kabel@kernel.org>
Date:   Wed Nov 24 23:49:33 2021 +0100

    arm64: dts: marvell: armada-37xx: Set pcie_reset_pin to gpio function
    
    commit 715878016984b2617f6c1f177c50039e12e7bd5b upstream.
    
    We found out that we are unable to control the PERST# signal via the
    default pin dedicated to be PERST# pin (GPIO2[3] pin) on A3700 SOC when
    this pin is in EP_PCIE1_Resetn mode. There is a register in the PCIe
    register space called PERSTN_GPIO_EN (D0088004[3]), but changing the
    value of this register does not change the pin output when measuring
    with voltmeter.
    
    We do not know if this is a bug in the SOC, or if it works only when
    PCIe controller is in a certain state.
    
    Commit f4c7d053d7f7 ("PCI: aardvark: Wait for endpoint to be ready
    before training link") says that when this pin changes pinctrl mode
    from EP_PCIE1_Resetn to GPIO, the PERST# signal is asserted for a brief
    moment.
    
    So currently the situation is that on A3700 boards the PERST# signal is
    asserted in U-Boot (because the code in U-Boot issues reset via this pin
    via GPIO mode), and then in Linux by the obscure and undocumented
    mechanism described by the above mentioned commit.
    
    We want to issue PERST# signal in a known way, therefore this patch
    changes the pcie_reset_pin function from "pcie" to "gpio" and adds the
    reset-gpios property to the PCIe node in device tree files of
    EspressoBin and Armada 3720 Dev Board (Turris Mox device tree already
    has this property and uDPU does not have a PCIe port).
    
    Signed-off-by: Marek Behún <marek.behun@nic.cz>
    Cc: Remi Pommarel <repk@triplefau.lt>
    Tested-by: Tomasz Maciej Nowak <tmn505@gmail.com>
    Acked-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c70a0e82efd7df2807a0cb2ccf2290354f26e0ab
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Wed Nov 24 23:49:32 2021 +0100

    arm64: dts: marvell: armada-37xx: declare PCIe reset pin
    
    commit a5470af981a0cc14a650af8da5186668971a4fc8 upstream.
    
    One pin can be muxed as PCIe endpoint card reset.
    
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f84aa271aeb793144ebd3be6720b4d9651e90563
Author: Marek Behún <kabel@kernel.org>
Date:   Wed Nov 24 23:49:31 2021 +0100

    pinctrl: armada-37xx: Correct PWM pins definitions
    
    commit baf8d6899b1e8906dc076ef26cc633e96a8bb0c3 upstream.
    
    The PWM pins on North Bridge on Armada 37xx can be configured into PWM
    or GPIO functions. When in PWM function, each pin can also be configured
    to drive low on 0 and tri-state on 1 (LED mode).
    
    The current definitions handle this by declaring two pin groups for each
    pin:
    - group "pwmN" with functions "pwm" and "gpio"
    - group "ledN_od" ("od" for open drain) with functions "led" and "gpio"
    
    This is semantically incorrect. The correct definition for each pin
    should be one group with three functions: "pwm", "led" and "gpio".
    
    Change the "pwmN" groups to support "led" function.
    
    Remove "ledN_od" groups. This cannot break backwards compatibility with
    older device trees: no device tree uses it since there is no PWM driver
    for this SOC yet. Also "ledN_od" groups are not even documented.
    
    Fixes: b835d6953009 ("pinctrl: armada-37xx: swap polarity on LED group")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20210719112938.27594-1-kabel@kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e7acda63318607278d446a8e07f2172973a6de8
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Wed Nov 24 23:49:30 2021 +0100

    pinctrl: armada-37xx: add missing pin: PCIe1 Wakeup
    
    commit 4d98fbaacd79a82f408febb66a9c42fe42361b16 upstream.
    
    Declare the PCIe1 Wakeup which was initially missing.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Tested-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15d3bc71e322c9591e65ae555de40669fe957f8a
Author: Marek Behún <kabel@kernel.org>
Date:   Wed Nov 24 23:49:29 2021 +0100

    pinctrl: armada-37xx: Correct mpp definitions
    
    commit 823868fceae3bac07cf5eccb128d6916e7a5ae9d upstream.
    
    This is a cleanup and fix of the patch by Ken Ma <make@marvell.com>.
    
    Fix the mpp definitions according to newest revision of the
    specification:
      - northbridge:
        fix pmic1 gpio number to 7
        fix pmic0 gpio number to 6
      - southbridge
        split pcie1 group bit mask to BIT(5) and  BIT(9)
        fix ptp group bit mask to BIT(11) | BIT(12) | BIT(13)
        add smi group with bit mask BIT(4)
    
    [gregory: split the pcie group in 2, as at hardware level they can be
    configured separately]
    Signed-off-by: Marek Behún <marek.behun@nic.cz>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Tested-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d490f96f86837d7216480f6e07bf550bacf69255
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:28 2021 +0100

    PCI: aardvark: Fix checking for link up via LTSSM state
    
    commit 661c399a651c11aaf83c45cbfe0b4a1fb7bc3179 upstream.
    
    Current implementation of advk_pcie_link_up() is wrong as it marks also
    link disabled or hot reset states as link up.
    
    Fix it by marking link up only to those states which are defined in PCIe
    Base specification 3.0, Table 4-14: Link Status Mapped to the LTSSM.
    
    To simplify implementation, Define macros for every LTSSM state which
    aardvark hardware can return in CFG_REG register.
    
    Fix also checking for link training according to the same Table 4-14.
    Define a new function advk_pcie_link_training() for this purpose.
    
    Link: https://lore.kernel.org/r/20211005180952.6812-13-kabel@kernel.org
    Fixes: 8c39d710363c ("PCI: aardvark: Add Aardvark PCI host controller driver")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Cc: stable@vger.kernel.org
    Cc: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edefd87df15a667ba383f9e255f3808e24cf1e6f
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:27 2021 +0100

    PCI: aardvark: Fix link training
    
    commit f76b36d40beee0a13aa8f6aa011df0d7cbbb8a7f upstream.
    
    Fix multiple link training issues in aardvark driver. The main reason of
    these issues was misunderstanding of what certain registers do, since their
    names and comments were misleading: before commit 96be36dbffac ("PCI:
    aardvark: Replace custom macros by standard linux/pci_regs.h macros"), the
    pci-aardvark.c driver used custom macros for accessing standard PCIe Root
    Bridge registers, and misleading comments did not help to understand what
    the code was really doing.
    
    After doing more tests and experiments I've come to the conclusion that the
    SPEED_GEN register in aardvark sets the PCIe revision / generation
    compliance and forces maximal link speed. Both GEN3 and GEN2 values set the
    read-only PCI_EXP_FLAGS_VERS bits (PCIe capabilities version of Root
    Bridge) to value 2, while GEN1 value sets PCI_EXP_FLAGS_VERS to 1, which
    matches with PCI Express specifications revisions 3, 2 and 1 respectively.
    Changing SPEED_GEN also sets the read-only bits PCI_EXP_LNKCAP_SLS and
    PCI_EXP_LNKCAP2_SLS to corresponding speed.
    
    (Note that PCI Express rev 1 specification does not define PCI_EXP_LNKCAP2
     and PCI_EXP_LNKCTL2 registers and when SPEED_GEN is set to GEN1 (which
     also sets PCI_EXP_FLAGS_VERS set to 1), lspci cannot access
     PCI_EXP_LNKCAP2 and PCI_EXP_LNKCTL2 registers.)
    
    Changing PCIe link speed can be done via PCI_EXP_LNKCTL2_TLS bits of
    PCI_EXP_LNKCTL2 register. Armada 3700 Functional Specifications says that
    the default value of PCI_EXP_LNKCTL2_TLS is based on SPEED_GEN value, but
    tests showed that the default value is always 8.0 GT/s, independently of
    speed set by SPEED_GEN. So after setting SPEED_GEN, we must also set value
    in PCI_EXP_LNKCTL2 register via PCI_EXP_LNKCTL2_TLS bits.
    
    Triggering PCI_EXP_LNKCTL_RL bit immediately after setting LINK_TRAINING_EN
    bit actually doesn't do anything. Tests have shown that a delay is needed
    after enabling LINK_TRAINING_EN bit. As triggering PCI_EXP_LNKCTL_RL
    currently does nothing, remove it.
    
    Commit 43fc679ced18 ("PCI: aardvark: Improve link training") introduced
    code which sets SPEED_GEN register based on negotiated link speed from
    PCI_EXP_LNKSTA_CLS bits of PCI_EXP_LNKSTA register. This code was added to
    fix detection of Compex WLE900VX (Atheros QCA9880) WiFi GEN1 PCIe cards, as
    otherwise these cards were "invisible" on PCIe bus (probably because they
    crashed). But apparently more people reported the same issues with these
    cards also with other PCIe controllers [1] and I was able to reproduce this
    issue also with other "noname" WiFi cards based on Atheros QCA9890 chip
    (with the same PCI vendor/device ids as Atheros QCA9880). So this is not an
    issue in aardvark but rather an issue in Atheros QCA98xx chips. Also, this
    issue only exists if the kernel is compiled with PCIe ASPM support, and a
    generic workaround for this is to change PCIe Bridge to 2.5 GT/s link speed
    via PCI_EXP_LNKCTL2_TLS_2_5GT bits in PCI_EXP_LNKCTL2 register [2], before
    triggering PCI_EXP_LNKCTL_RL bit. This workaround also works when SPEED_GEN
    is set to value GEN2 (5 GT/s). So remove this hack completely in the
    aardvark driver and always set SPEED_GEN to value from 'max-link-speed' DT
    property. Fix for Atheros QCA98xx chips is handled separately by patch [2].
    
    These two things (code for triggering PCI_EXP_LNKCTL_RL bit and changing
    SPEED_GEN value) also explain why commit 6964494582f5 ("PCI: aardvark:
    Train link immediately after enabling training") somehow fixed detection of
    those problematic Compex cards with Atheros chips: if triggering link
    retraining (via PCI_EXP_LNKCTL_RL bit) was done immediately after enabling
    link training (via LINK_TRAINING_EN), it did nothing. If there was a
    specific delay, aardvark HW already initialized PCIe link and therefore
    triggering link retraining caused the above issue. Compex cards triggered
    link down event and disappeared from the PCIe bus.
    
    Commit f4c7d053d7f7 ("PCI: aardvark: Wait for endpoint to be ready before
    training link") added 100ms sleep before calling 'Start link training'
    command and explained that it is a requirement of PCI Express
    specification. But the code after this 100ms sleep was not doing 'Start
    link training', rather it triggered PCI_EXP_LNKCTL_RL bit via PCIe Root
    Bridge to put link into Recovery state.
    
    The required delay after fundamental reset is already done in function
    advk_pcie_wait_for_link() which also checks whether PCIe link is up.
    So after removing the code which triggers PCI_EXP_LNKCTL_RL bit on PCIe
    Root Bridge, there is no need to wait 100ms again. Remove the extra
    msleep() call and update comment about the delay required by the PCI
    Express specification.
    
    According to Marvell Armada 3700 Functional Specifications, Link training
    should be enabled via aardvark register LINK_TRAINING_EN after selecting
    PCIe generation and x1 lane. There is no need to disable it prior resetting
    card via PERST# signal. This disabling code was introduced in commit
    5169a9851daa ("PCI: aardvark: Issue PERST via GPIO") as a workaround for
    some Atheros cards. It turns out that this also is Atheros specific issue
    and affects any PCIe controller, not only aardvark. Moreover this Atheros
    issue was triggered by juggling with PCI_EXP_LNKCTL_RL, LINK_TRAINING_EN
    and SPEED_GEN bits interleaved with sleeps. Now, after removing triggering
    PCI_EXP_LNKCTL_RL, there is no need to explicitly disable LINK_TRAINING_EN
    bit. So remove this code too. The problematic Compex cards described in
    previous git commits are correctly detected in advk_pcie_train_link()
    function even after applying all these changes.
    
    Note that with this patch, and also prior this patch, some NVMe disks which
    support PCIe GEN3 with 8 GT/s speed are negotiated only at the lowest link
    speed 2.5 GT/s, independently of SPEED_GEN value. After manually triggering
    PCI_EXP_LNKCTL_RL bit (e.g. from userspace via setpci), these NVMe disks
    change link speed to 5 GT/s when SPEED_GEN was configured to GEN2. This
    issue first needs to be properly investigated. I will send a fix in the
    future.
    
    On the other hand, some other GEN2 PCIe cards with 5 GT/s speed are
    autonomously by HW autonegotiated at full 5 GT/s speed without need of any
    software interaction.
    
    Armada 3700 Functional Specifications describes the following steps for
    link training: set SPEED_GEN to GEN2, enable LINK_TRAINING_EN, poll until
    link training is complete, trigger PCI_EXP_LNKCTL_RL, poll until signal
    rate is 5 GT/s, poll until link training is complete, enable ASPM L0s.
    
    The requirement for triggering PCI_EXP_LNKCTL_RL can be explained by the
    need to achieve 5 GT/s speed (as changing link speed is done by throw to
    recovery state entered by PCI_EXP_LNKCTL_RL) or maybe as a part of enabling
    ASPM L0s (but in this case ASPM L0s should have been enabled prior
    PCI_EXP_LNKCTL_RL).
    
    It is unknown why the original pci-aardvark.c driver was triggering
    PCI_EXP_LNKCTL_RL bit before waiting for the link to be up. This does not
    align with neither PCIe base specifications nor with Armada 3700 Functional
    Specification. (Note that in older versions of aardvark, this bit was
    called incorrectly PCIE_CORE_LINK_TRAINING, so this may be the reason.)
    
    It is also unknown why Armada 3700 Functional Specification says that it is
    needed to trigger PCI_EXP_LNKCTL_RL for GEN2 mode, as according to PCIe
    base specification 5 GT/s speed negotiation is supposed to be entirely
    autonomous, even if initial speed is 2.5 GT/s.
    
    [1] - https://lore.kernel.org/linux-pci/87h7l8axqp.fsf@toke.dk/
    [2] - https://lore.kernel.org/linux-pci/20210326124326.21163-1-pali@kernel.org/
    
    Link: https://lore.kernel.org/r/20211005180952.6812-12-kabel@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8e76f849aed353347c5f08df575125324847834
Author: Frederick Lawler <fred@fredlawl.com>
Date:   Wed Nov 24 23:49:26 2021 +0100

    PCI: Add PCI_EXP_LNKCTL2_TLS* macros
    
    commit c80851f6ce63a6e313f8c7b4b6eb82c67aa4497b upstream.
    
    The Link Control 2 register is missing macros for Target Link Speeds.  Add
    those in.
    
    Signed-off-by: Frederick Lawler <fred@fredlawl.com>
    [bhelgaas: use "GT" instead of "GB"]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59e36d8f3418ca2ff48cb1dbcd310c0d3d3d9d56
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:25 2021 +0100

    PCI: aardvark: Fix PCIe Max Payload Size setting
    
    commit a4e17d65dafdd3513042d8f00404c9b6068a825c upstream.
    
    Change PCIe Max Payload Size setting in PCIe Device Control register to 512
    bytes to align with PCIe Link Initialization sequence as defined in Marvell
    Armada 3700 Functional Specification. According to the specification,
    maximal Max Payload Size supported by this device is 512 bytes.
    
    Without this kernel prints suspicious line:
    
        pci 0000:01:00.0: Upstream bridge's Max Payload Size set to 256 (was 16384, max 512)
    
    With this change it changes to:
    
        pci 0000:01:00.0: Upstream bridge's Max Payload Size set to 256 (was 512, max 512)
    
    Link: https://lore.kernel.org/r/20211005180952.6812-3-kabel@kernel.org
    Fixes: 8c39d710363c ("PCI: aardvark: Add Aardvark PCI host controller driver")
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4c0cd553ac9ca26300c07bbdd5168d1cacc4428
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:24 2021 +0100

    PCI: aardvark: Configure PCIe resources from 'ranges' DT property
    
    commit 64f160e19e9264a7f6d89c516baae1473b6f8359 upstream.
    
    In commit 6df6ba974a55 ("PCI: aardvark: Remove PCIe outbound window
    configuration") was removed aardvark PCIe outbound window configuration and
    commit description said that was recommended solution by HW designers.
    
    But that commit completely removed support for configuring PCIe IO
    resources without removing PCIe IO 'ranges' from DTS files. After that
    commit PCIe IO space started to be treated as PCIe MEM space and accessing
    it just caused kernel crash.
    
    Moreover implementation of PCIe outbound windows prior that commit was
    incorrect. It completely ignored offset between CPU address and PCIe bus
    address and expected that in DTS is CPU address always same as PCIe bus
    address without doing any checks. Also it completely ignored size of every
    PCIe resource specified in 'ranges' DTS property and expected that every
    PCIe resource has size 128 MB (also for PCIe IO range). Again without any
    check. Apparently none of PCIe resource has in DTS specified size of 128
    MB. So it was completely broken and thanks to how aardvark mask works,
    configuration was completely ignored.
    
    This patch reverts back support for PCIe outbound window configuration but
    implementation is a new without issues mentioned above. PCIe outbound
    window is required when DTS specify in 'ranges' property non-zero offset
    between CPU and PCIe address space. To address recommendation by HW
    designers as specified in commit description of 6df6ba974a55, set default
    outbound parameters as PCIe MEM access without translation and therefore
    for this PCIe 'ranges' it is not needed to configure PCIe outbound window.
    For PCIe IO space is needed to configure aardvark PCIe outbound window.
    
    This patch fixes kernel crash when trying to access PCIe IO space.
    
    Link: https://lore.kernel.org/r/20210624215546.4015-2-pali@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org # 6df6ba974a55 ("PCI: aardvark: Remove PCIe outbound window configuration")
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f06d6a0875f02513da06dd9dbc43da0449806850
Author: Evan Wang <xswang@marvell.com>
Date:   Wed Nov 24 23:49:23 2021 +0100

    PCI: aardvark: Remove PCIe outbound window configuration
    
    commit 6df6ba974a55678a2c7d9a0c06eb15cde0c4b184 upstream.
    
    Outbound window is used to translate CPU space addresses to PCIe space
    addresses when the CPU initiates PCIe transactions.
    
    According to the suggestion of the HW designers, the recommended
    solution is to use the default outbound parameters, even though the
    current outbound window setting does not cause any known functional
    issue.
    
    This patch doesn't address any known functional issue, but aligns to
    HW design guidelines, and removes code that isn't needed.
    
    Signed-off-by: Evan Wang <xswang@marvell.com>
    [Thomas: tweak commit log.]
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    [lorenzo.pieralisi@arm.com: handled host->controller dir move]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Victor Gu <xigu@marvell.com>
    Reviewed-by: Nadav Haklai <nadavh@marvell.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14910c1f4ff475031bb4114a399d742074340f04
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:22 2021 +0100

    PCI: aardvark: Update comment about disabling link training
    
    commit 1d1cd163d0de22a4041a6f1aeabcf78f80076539 upstream.
    
    According to PCI Express Base Specifications (rev 4.0, 6.6.1
    "Conventional reset"), after fundamental reset a 100ms delay is needed
    prior to enabling link training.
    
    Update comment in code to reflect this requirement.
    
    Link: https://lore.kernel.org/r/20201202184659.3795-1-pali@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e81c76e62410f707363215ce1695ce0c92dfa6a
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:21 2021 +0100

    PCI: aardvark: Move PCIe reset card code to advk_pcie_train_link()
    
    commit d0c6a3475b033960e85ae2bf176b14cab0a627d2 upstream.
    
    Move code which belongs to link training (delays and resets) into
    advk_pcie_train_link() function, so everything related to link training,
    including timings is at one place.
    
    After experiments it can be observed that link training in aardvark
    hardware is very sensitive to timings and delays, so it is a good idea to
    have this code at the same place as link training calls.
    
    This patch does not change behavior of aardvark initialization.
    
    Link: https://lore.kernel.org/r/20200907111038.5811-6-pali@kernel.org
    Tested-by: Marek Behún <marek.behun@nic.cz>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 140ce57705f33744cf7e47ba2fb15e3460ef19ea
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:20 2021 +0100

    PCI: aardvark: Fix compilation on s390
    
    commit b32c012e4b98f0126aa327be2d1f409963057643 upstream.
    
    Include linux/gpio/consumer.h instead of linux/gpio.h, as is said in the
    latter file.
    
    This was reported by kernel test bot when compiling for s390.
    
      drivers/pci/controller/pci-aardvark.c:350:2: error: implicit declaration of function 'gpiod_set_value_cansleep' [-Werror,-Wimplicit-function-declaration]
      drivers/pci/controller/pci-aardvark.c:1074:21: error: implicit declaration of function 'devm_gpiod_get_from_of_node' [-Werror,-Wimplicit-function-declaration]
      drivers/pci/controller/pci-aardvark.c:1076:14: error: use of undeclared identifier 'GPIOD_OUT_LOW'
    
    Link: https://lore.kernel.org/r/202006211118.LxtENQfl%25lkp@intel.com
    Link: https://lore.kernel.org/r/20200907111038.5811-2-pali@kernel.org
    Fixes: 5169a9851daa ("PCI: aardvark: Issue PERST via GPIO")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Marek Behún <marek.behun@nic.cz>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d6c2a50576c8cb59c9a5529b03089959c749bf9
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:19 2021 +0100

    PCI: aardvark: Don't touch PCIe registers if no card connected
    
    commit 70e380250c3621c55ff218cbaf2272830d9dbb1d upstream.
    
    When there is no PCIe card connected and advk_pcie_rd_conf() or
    advk_pcie_wr_conf() is called for PCI bus which doesn't belong to emulated
    root bridge, the aardvark driver throws the following error message:
    
      advk-pcie d0070000.pcie: config read/write timed out
    
    Obviously accessing PCIe registers of disconnected card is not possible.
    
    Extend check in advk_pcie_valid_device() function for validating
    availability of PCIe bus. If PCIe link is down, then the device is marked
    as Not Found and the driver does not try to access these registers.
    
    This is just an optimization to prevent accessing PCIe registers when card
    is disconnected. Trying to access PCIe registers of disconnected card does
    not cause any crash, kernel just needs to wait for a timeout. So if card
    disappear immediately after checking for PCIe link (before accessing PCIe
    registers), it does not cause any problems.
    
    Link: https://lore.kernel.org/r/20200702083036.12230-1-pali@kernel.org
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 320dd7a99bd22aad20765577c17b4baa07a19f2c
Author: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date:   Wed Nov 24 23:49:18 2021 +0100

    PCI: aardvark: Introduce an advk_pcie_valid_device() helper
    
    commit 248d4e59616c632f37f04c233eec6d5008384926 upstream.
    
    In other to mimic other PCIe host controller drivers, introduce an
    advk_pcie_valid_device() helper, used in the configuration read/write
    functions.
    
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    [lorenzo.pieralisi@arm.com: updated host->controller dir move]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eaf5b04bbb6e40562872877558e08dc7422ad452
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:17 2021 +0100

    PCI: aardvark: Indicate error in 'val' when config read fails
    
    commit b1bd5714472cc72e14409f5659b154c765a76c65 upstream.
    
    Most callers of config read do not check for return value. But most of the
    ones that do, checks for error indication in 'val' variable.
    
    This patch updates error handling in advk_pcie_rd_conf() function. If PIO
    transfer fails then 'val' variable is set to 0xffffffff which indicates
    failture.
    
    Link: https://lore.kernel.org/r/20200528162604.GA323482@bjorn-Precision-5520
    Link: https://lore.kernel.org/r/20200601130315.18895-1-pali@kernel.org
    Reported-by: Bjorn Helgaas <helgaas@kernel.org>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d6c809c2b1a620b7fc0e370fc13af59cbdb0c5
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:16 2021 +0100

    PCI: aardvark: Replace custom macros by standard linux/pci_regs.h macros
    
    commit 96be36dbffacea0aa9e6ec4839583e79faa141a1 upstream.
    
    PCI-E capability macros are already defined in linux/pci_regs.h.
    Remove their reimplementation in pcie-aardvark.
    
    Link: https://lore.kernel.org/r/20200430080625.26070-9-pali@kernel.org
    Tested-by: Tomasz Maciej Nowak <tmn505@gmail.com>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Acked-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6cd6f85942377a29ca7250d7c8ac9ebdeaa9324
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:15 2021 +0100

    PCI: aardvark: Issue PERST via GPIO
    
    commit 5169a9851daaa2782a7bd2bb83d5b1bd224b2879 upstream.
    
    Add support for issuing PERST via GPIO specified in 'reset-gpios'
    property (as described in PCI device tree bindings).
    
    Some buggy cards (e.g. Compex WLE900VX or WLE1216) are not detected
    after reboot when PERST is not issued during driver initialization.
    
    If bootloader already enabled link training then issuing PERST has no
    effect for some buggy cards (e.g. Compex WLE900VX) and these cards are
    not detected. We therefore clear the LINK_TRAINING_EN register before.
    
    It was observed that Compex WLE900VX card needs to be in PERST reset
    for at least 10ms if bootloader enabled link training.
    
    Tested on Turris MOX.
    
    Link: https://lore.kernel.org/r/20200430080625.26070-6-pali@kernel.org
    Tested-by: Tomasz Maciej Nowak <tmn505@gmail.com>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62a3dc9b65a2b24800fc4267b8cf590fad135034
Author: Marek Behún <kabel@kernel.org>
Date:   Wed Nov 24 23:49:14 2021 +0100

    PCI: aardvark: Improve link training
    
    commit 43fc679ced18006b12d918d7a8a4af392b7fbfe7 upstream.
    
    Currently the aardvark driver trains link in PCIe gen2 mode. This may
    cause some buggy gen1 cards (such as Compex WLE900VX) to be unstable or
    even not detected. Moreover when ASPM code tries to retrain link second
    time, these cards may stop responding and link goes down. If gen1 is
    used this does not happen.
    
    Unconditionally forcing gen1 is not a good solution since it may have
    performance impact on gen2 cards.
    
    To overcome this, read 'max-link-speed' property (as defined in PCI
    device tree bindings) and use this as max gen mode. Then iteratively try
    link training at this mode or lower until successful. After successful
    link training choose final controller gen based on Negotiated Link Speed
    from Link Status register, which should match card speed.
    
    Link: https://lore.kernel.org/r/20200430080625.26070-5-pali@kernel.org
    Tested-by: Tomasz Maciej Nowak <tmn505@gmail.com>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Marek Behún <marek.behun@nic.cz>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Acked-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22244438e33075d6f64e819ef1f8eb0ca43d1e5d
Author: Pali Rohár <pali@kernel.org>
Date:   Wed Nov 24 23:49:13 2021 +0100

    PCI: aardvark: Train link immediately after enabling training
    
    commit 6964494582f56a3882c2c53b0edbfe99eb32b2e1 upstream.
    
    Adding even 100ms (PCI_PM_D3COLD_WAIT) delay between enabling link
    training and starting link training causes detection issues with some
    buggy cards (such as Compex WLE900VX).
    
    Move the code which enables link training immediately before the one
    which starts link traning.
    
    This fixes detection issues of Compex WLE900VX card on Turris MOX after
    cold boot.
    
    Link: https://lore.kernel.org/r/20200430080625.26070-2-pali@kernel.org
    Fixes: f4c7d053d7f7 ("PCI: aardvark: Wait for endpoint to be ready...")
    Tested-by: Tomasz Maciej Nowak <tmn505@gmail.com>
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd8c33fb825038bdafbc638ba492500319a472f8
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Wed Nov 24 23:49:12 2021 +0100

    PCI: aardvark: Wait for endpoint to be ready before training link
    
    commit f4c7d053d7f77cd5c1a1ba7c7ce085ddba13d1d7 upstream.
    
    When configuring pcie reset pin from gpio (e.g. initially set by
    u-boot) to pcie function this pin goes low for a brief moment
    asserting the PERST# signal. Thus connected device enters fundamental
    reset process and link configuration can only begin after a minimal
    100ms delay (see [1]).
    
    Because the pin configuration comes from the "default" pinctrl it is
    implicitly configured before the probe callback is called:
    
    driver_probe_device()
      really_probe()
        ...
        pinctrl_bind_pins() /* Here pin goes from gpio to PCIE reset
                               function and PERST# is asserted */
        ...
        drv->probe()
    
    [1] "PCI Express Base Specification", REV. 4.0
        PCI Express, February 19 2014, 6.6.1 Conventional Reset
    
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db70da46ea1e158912dbf4759b48a07a89645b89
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Wed Nov 24 23:49:11 2021 +0100

    PCI: aardvark: Fix a leaked reference by adding missing of_node_put()
    
    commit 3842f5166bf1ef286fe7a39f262b5c9581308366 upstream.
    
    The call to of_get_next_child() returns a node pointer with refcount
    incremented thus it must be explicitly decremented after the last
    usage.
    
    irq_domain_add_linear() also calls of_node_get() to increase refcount,
    so irq_domain will not be affected when it is released.
    
    Detected by coccinelle with the following warnings:
      ./drivers/pci/controller/pci-aardvark.c:826:1-7: ERROR: missing of_node_put; acquired a node pointer with refcount incremented on line 798, but without a corresponding object release within this function.
    
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: linux-pci@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 109a830c7624de534daa7a2fcc12b511f8819d09
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Wed Nov 24 23:49:10 2021 +0100

    PCI: aardvark: Fix I/O space page leak
    
    commit 1df3e5b3feebf29a3ecfa0c0f06f79544ca573e4 upstream.
    
    When testing the R-Car PCIe driver on the Condor board, if the PCIe PHY
    driver was left disabled, the kernel crashed with this BUG:
    
      kernel BUG at lib/ioremap.c:72!
      Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
      Modules linked in:
      CPU: 0 PID: 39 Comm: kworker/0:1 Not tainted 4.17.0-dirty #1092
      Hardware name: Renesas Condor board based on r8a77980 (DT)
      Workqueue: events deferred_probe_work_func
      pstate: 80000005 (Nzcv daif -PAN -UAO)
      pc : ioremap_page_range+0x370/0x3c8
      lr : ioremap_page_range+0x40/0x3c8
      sp : ffff000008da39e0
      x29: ffff000008da39e0 x28: 00e8000000000f07
      x27: ffff7dfffee00000 x26: 0140000000000000
      x25: ffff7dfffef00000 x24: 00000000000fe100
      x23: ffff80007b906000 x22: ffff000008ab8000
      x21: ffff000008bb1d58 x20: ffff7dfffef00000
      x19: ffff800009c30fb8 x18: 0000000000000001
      x17: 00000000000152d0 x16: 00000000014012d0
      x15: 0000000000000000 x14: 0720072007200720
      x13: 0720072007200720 x12: 0720072007200720
      x11: 0720072007300730 x10: 00000000000000ae
      x9 : 0000000000000000 x8 : ffff7dffff000000
      x7 : 0000000000000000 x6 : 0000000000000100
      x5 : 0000000000000000 x4 : 000000007b906000
      x3 : ffff80007c61a880 x2 : ffff7dfffeefffff
      x1 : 0000000040000000 x0 : 00e80000fe100f07
      Process kworker/0:1 (pid: 39, stack limit = 0x        (ptrval))
      Call trace:
       ioremap_page_range+0x370/0x3c8
       pci_remap_iospace+0x7c/0xac
       pci_parse_request_of_pci_ranges+0x13c/0x190
       rcar_pcie_probe+0x4c/0xb04
       platform_drv_probe+0x50/0xbc
       driver_probe_device+0x21c/0x308
       __device_attach_driver+0x98/0xc8
       bus_for_each_drv+0x54/0x94
       __device_attach+0xc4/0x12c
       device_initial_probe+0x10/0x18
       bus_probe_device+0x90/0x98
       deferred_probe_work_func+0xb0/0x150
       process_one_work+0x12c/0x29c
       worker_thread+0x200/0x3fc
       kthread+0x108/0x134
       ret_from_fork+0x10/0x18
      Code: f9004ba2 54000080 aa0003fb 17ffff48 (d4210000)
    
    It turned out that pci_remap_iospace() wasn't undone when the driver's
    probe failed, and since devm_phy_optional_get() returned -EPROBE_DEFER,
    the probe was retried, finally causing the BUG due to trying to remap
    already remapped pages.
    
    The Aardvark PCI controller driver has the same issue.
    Replace pci_remap_iospace() with its devm_ managed version to fix the bug.
    
    Fixes: 8c39d710363c ("PCI: aardvark: Add Aardvark PCI host controller driver")
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    [lorenzo.pieralisi@arm.com: updated the commit log]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79f7c6ba9cb0b7a6d7722bf42818d58c110ed929
Author: David Hildenbrand <david@redhat.com>
Date:   Thu Sep 9 18:22:42 2021 +0200

    s390/mm: validate VMA in PGSTE manipulation functions
    
    commit fe3d10024073f06f04c74b9674bd71ccc1d787cf upstream.
    
    We should not walk/touch page tables outside of VMA boundaries when
    holding only the mmap sem in read mode. Evil user space can modify the
    VMA layout just before this function runs and e.g., trigger races with
    page table removal code since commit dd2283f2605e ("mm: mmap: zap pages
    with read mmap_sem in munmap"). gfn_to_hva() will only translate using
    KVM memory regions, but won't validate the VMA.
    
    Further, we should not allocate page tables outside of VMA boundaries: if
    evil user space decides to map hugetlbfs to these ranges, bad things will
    happen because we suddenly have PTE or PMD page tables where we
    shouldn't have them.
    
    Similarly, we have to check if we suddenly find a hugetlbfs VMA, before
    calling get_locked_pte().
    
    Fixes: 2d42f9477320 ("s390/kvm: Add PGSTE manipulation functions")
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Acked-by: Heiko Carstens <hca@linux.ibm.com>
    Link: https://lore.kernel.org/r/20210909162248.14969-4-david@redhat.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5b0fbafba14c0ca82661a10896544eac32eb593
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Nov 26 13:35:26 2021 -0500

    tracing: Check pid filtering when creating events
    
    commit 6cb206508b621a9a0a2c35b60540e399225c8243 upstream.
    
    When pid filtering is activated in an instance, all of the events trace
    files for that instance has the PID_FILTER flag set. This determines
    whether or not pid filtering needs to be done on the event, otherwise the
    event is executed as normal.
    
    If pid filtering is enabled when an event is created (via a dynamic event
    or modules), its flag is not updated to reflect the current state, and the
    events are not filtered properly.
    
    Cc: stable@vger.kernel.org
    Fixes: 3fdaf80f4a836 ("tracing: Implement event pid filtering")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c98267b4fa1feeb9f60637bb48dc75baafbd9622
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon Nov 22 17:35:24 2021 +0100

    vhost/vsock: fix incorrect used length reported to the guest
    
    commit 49d8c5ffad07ca014cfae72a1b9b8c52b6ad9cb8 upstream.
    
    The "used length" reported by calling vhost_add_used() must be the
    number of bytes written by the device (using "in" buffers).
    
    In vhost_vsock_handle_tx_kick() the device only reads the guest
    buffers (they are all "out" buffers), without writing anything,
    so we must pass 0 as "used length" to comply virtio spec.
    
    Fixes: 433fc58e6bf2 ("VSOCK: Introduce vhost_vsock.ko")
    Cc: stable@vger.kernel.org
    Reported-by: Halil Pasic <pasic@linux.ibm.com>
    Suggested-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20211122163525.294024-2-sgarzare@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e8f9087f65a5121bc19943dffa30b6677fa0b82
Author: Tony Lu <tonylu@linux.alibaba.com>
Date:   Fri Nov 26 10:41:35 2021 +0800

    net/smc: Don't call clcsock shutdown twice when smc shutdown
    
    [ Upstream commit bacb6c1e47691cda4a95056c21b5487fb7199fcc ]
    
    When applications call shutdown() with SHUT_RDWR in userspace,
    smc_close_active() calls kernel_sock_shutdown(), and it is called
    twice in smc_shutdown().
    
    This fixes this by checking sk_state before do clcsock shutdown, and
    avoids missing the application's call of smc_shutdown().
    
    Link: https://lore.kernel.org/linux-s390/1f67548e-cbf6-0dce-82b5-10288a4583bd@linux.ibm.com/
    Fixes: 606a63c9783a ("net/smc: Ensure the active closing peer first closes clcsock")
    Signed-off-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Wen Gu <guwen@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Link: https://lore.kernel.org/r/20211126024134.45693-1-tonylu@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa0255f14ae773af8248fa764c888bce6bd49799
Author: Huang Pei <huangpei@loongson.cn>
Date:   Thu Nov 25 18:59:48 2021 +0800

    MIPS: use 3-level pgtable for 64KB page size on MIPS_VA_BITS_48
    
    [ Upstream commit 41ce097f714401e6ad8f3f5eb30d7f91b0b5e495 ]
    
    It hangup when booting Loongson 3A1000 with BOTH
    CONFIG_PAGE_SIZE_64KB and CONFIG_MIPS_VA_BITS_48, that it turn
    out to use 2-level pgtable instead of 3-level. 64KB page size
    with 2-level pgtable only cover 42 bits VA, use 3-level pgtable
    to cover all 48 bits VA(55 bits)
    
    Fixes: 1e321fa917fb ("MIPS64: Support of at least 48 bits of SEGBITS)
    Signed-off-by: Huang Pei <huangpei@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63e8aabe1fa8a294c6cec8fcd1f7f3e4b529511d
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Nov 23 12:25:35 2021 -0800

    tcp_cubic: fix spurious Hystart ACK train detections for not-cwnd-limited flows
    
    [ Upstream commit 4e1fddc98d2585ddd4792b5e44433dcee7ece001 ]
    
    While testing BIG TCP patch series, I was expecting that TCP_RR workloads
    with 80KB requests/answers would send one 80KB TSO packet,
    then being received as a single GRO packet.
    
    It turns out this was not happening, and the root cause was that
    cubic Hystart ACK train was triggering after a few (2 or 3) rounds of RPC.
    
    Hystart was wrongly setting CWND/SSTHRESH to 30, while my RPC
    needed a budget of ~20 segments.
    
    Ideally these TCP_RR flows should not exit slow start.
    
    Cubic Hystart should reset itself at each round, instead of assuming
    every TCP flow is a bulk one.
    
    Note that even after this patch, Hystart can still trigger, depending
    on scheduling artifacts, but at a higher CWND/SSTHRESH threshold,
    keeping optimal TSO packet sizes.
    
    Tested:
    
    ip link set dev eth0 gro_ipv6_max_size 131072 gso_ipv6_max_size 131072
    nstat -n; netperf -H ... -t TCP_RR  -l 5  -- -r 80000,80000 -K cubic; nstat|egrep "Ip6InReceives|Hystart|Ip6OutRequests"
    
    Before:
    
       8605
    Ip6InReceives                   87541              0.0
    Ip6OutRequests                  129496             0.0
    TcpExtTCPHystartTrainDetect     1                  0.0
    TcpExtTCPHystartTrainCwnd       30                 0.0
    
    After:
    
      8760
    Ip6InReceives                   88514              0.0
    Ip6OutRequests                  87975              0.0
    
    Fixes: ae27e98a5152 ("[TCP] CUBIC v2.3")
    Co-developed-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Link: https://lore.kernel.org/r/20211123202535.1843771-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8881d8087500a5de9433f17bde2565285686394e
Author: Thomas Zeitlhofer <thomas.zeitlhofer+lkml@ze-it.at>
Date:   Tue Nov 23 20:18:43 2021 +0100

    PM: hibernate: use correct mode for swsusp_close()
    
    [ Upstream commit cefcf24b4d351daf70ecd945324e200d3736821e ]
    
    Commit 39fbef4b0f77 ("PM: hibernate: Get block device exclusively in
    swsusp_check()") changed the opening mode of the block device to
    (FMODE_READ | FMODE_EXCL).
    
    In the corresponding calls to swsusp_close(), the mode is still just
    FMODE_READ which triggers the warning in blkdev_flush_mapping() on
    resume from hibernate.
    
    So, use the mode (FMODE_READ | FMODE_EXCL) also when closing the
    device.
    
    Fixes: 39fbef4b0f77 ("PM: hibernate: Get block device exclusively in swsusp_check()")
    Signed-off-by: Thomas Zeitlhofer <thomas.zeitlhofer+lkml@ze-it.at>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 107b4338ce2f96e930ec9dbd079a9c22f866bbcf
Author: Tony Lu <tonylu@linux.alibaba.com>
Date:   Tue Nov 23 16:25:18 2021 +0800

    net/smc: Ensure the active closing peer first closes clcsock
    
    [ Upstream commit 606a63c9783a32a45bd2ef0eee393711d75b3284 ]
    
    The side that actively closed socket, it's clcsock doesn't enter
    TIME_WAIT state, but the passive side does it. It should show the same
    behavior as TCP sockets.
    
    Consider this, when client actively closes the socket, the clcsock in
    server enters TIME_WAIT state, which means the address is occupied and
    won't be reused before TIME_WAIT dismissing. If we restarted server, the
    service would be unavailable for a long time.
    
    To solve this issue, shutdown the clcsock in [A], perform the TCP active
    close progress first, before the passive closed side closing it. So that
    the actively closed side enters TIME_WAIT, not the passive one.
    
    Client                                            |  Server
    close() // client actively close                  |
      smc_release()                                   |
          smc_close_active() // PEERCLOSEWAIT1        |
              smc_close_final() // abort or closed = 1|
                  smc_cdc_get_slot_and_msg_send()     |
              [A]                                     |
                                                      |smc_cdc_msg_recv_action() // ACTIVE
                                                      |  queue_work(smc_close_wq, &conn->close_work)
                                                      |    smc_close_passive_work() // PROCESSABORT or APPCLOSEWAIT1
                                                      |      smc_close_passive_abort_received() // only in abort
                                                      |
                                                      |close() // server recv zero, close
                                                      |  smc_release() // PROCESSABORT or APPCLOSEWAIT1
                                                      |    smc_close_active()
                                                      |      smc_close_abort() or smc_close_final() // CLOSED
                                                      |        smc_cdc_get_slot_and_msg_send() // abort or closed = 1
    smc_cdc_msg_recv_action()                         |    smc_clcsock_release()
      queue_work(smc_close_wq, &conn->close_work)     |      sock_release(tcp) // actively close clc, enter TIME_WAIT
        smc_close_passive_work() // PEERCLOSEWAIT1    |    smc_conn_free()
          smc_close_passive_abort_received() // CLOSED|
          smc_conn_free()                             |
          smc_clcsock_release()                       |
            sock_release(tcp) // passive close clc    |
    
    Link: https://www.spinics.net/lists/netdev/msg780407.html
    Fixes: b38d732477e4 ("smc: socket closing and linkgroup cleanup")
    Signed-off-by: Tony Lu <tonylu@linux.alibaba.com>
    Reviewed-by: Wen Gu <guwen@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba503f46b94396a0330a7766b33d166b9daf3df4
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 18 17:37:58 2021 -0800

    ipv6: fix typos in __ip6_finish_output()
    
    [ Upstream commit 19d36c5f294879949c9d6f57cb61d39cc4c48553 ]
    
    We deal with IPv6 packets, so we need to use IP6CB(skb)->flags and
    IP6SKB_REROUTED, instead of IPCB(skb)->flags and IPSKB_REROUTED
    
    Found by code inspection, please double check that fixing this bug
    does not surface other bugs.
    
    Fixes: 09ee9dba9611 ("ipv6: Reinject IPv6 packets if IPsec policy matches after SNAT")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tobias Brunner <tobias@strongswan.org>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: David Ahern <dsahern@kernel.org>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Tested-by: Tobias Brunner <tobias@strongswan.org>
    Acked-by: Tobias Brunner <tobias@strongswan.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93cadd96c500cef7f638f652b46ee8dfe3a53c06
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Nov 18 14:14:16 2021 +0300

    drm/vc4: fix error code in vc4_create_object()
    
    [ Upstream commit 96c5f82ef0a145d3e56e5b26f2bf6dcd2ffeae1c ]
    
    The ->gem_create_object() functions are supposed to return NULL if there
    is an error.  None of the callers expect error pointers so returing one
    will lead to an Oops.  See drm_gem_vram_create(), for example.
    
    Fixes: c826a6e10644 ("drm/vc4: Add a BO cache.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211118111416.GC1147@kili
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd035ca0e7a142870a970d46b1d19276cfe2bc8c
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Wed Nov 17 16:19:09 2021 +0530

    scsi: mpt3sas: Fix kernel panic during drive powercycle test
    
    [ Upstream commit 0ee4ba13e09c9d9c1cb6abb59da8295d9952328b ]
    
    While looping over shost's sdev list it is possible that one
    of the drives is getting removed and its sas_target object is
    freed but its sdev object remains intact.
    
    Consequently, a kernel panic can occur while the driver is trying to access
    the sas_address field of sas_target object without also checking the
    sas_target object for NULL.
    
    Link: https://lore.kernel.org/r/20211117104909.2069-1-sreekanth.reddy@broadcom.com
    Fixes: f92363d12359 ("[SCSI] mpt3sas: add new driver supporting 12GB SAS")
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25bd60b9f6e820e317c0c4fb6a2451a748d6ef58
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 18 15:25:08 2021 +0100

    ARM: socfpga: Fix crash with CONFIG_FORTIRY_SOURCE
    
    [ Upstream commit 187bea472600dcc8d2eb714335053264dd437172 ]
    
    When CONFIG_FORTIFY_SOURCE is set, memcpy() checks the potential
    buffer overflow and panics.  The code in sofcpga bootstrapping
    contains the memcpy() calls are mistakenly translated as the shorter
    size, hence it triggers a panic as if it were overflowing.
    
    This patch changes the secondary_trampoline and *_end definitions
    to arrays for avoiding the false-positive crash above.
    
    Fixes: 9c4566a117a6 ("ARM: socfpga: Enable SMP for socfpga")
    Suggested-by: Kees Cook <keescook@chromium.org>
    Buglink: https://bugzilla.suse.com/show_bug.cgi?id=1192473
    Link: https://lore.kernel.org/r/20211117193244.31162-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b54bc6719a71ea7f0fa82398f9468a2ca833636
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Nov 16 09:55:01 2021 -0500

    NFSv42: Don't fail clone() unless the OP_CLONE operation failed
    
    [ Upstream commit d3c45824ad65aebf765fcf51366d317a29538820 ]
    
    The failure to retrieve post-op attributes has no bearing on whether or
    not the clone operation itself was successful. We must therefore ignore
    the return value of decode_getfattr() when looking at the success or
    failure of nfs4_xdr_dec_clone().
    
    Fixes: 36022770de6c ("nfs42: add CLONE xdr functions")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec2fe9e2217339435e3ceea68f9310251c4ed3b5
Author: Alexander Aring <aahringo@redhat.com>
Date:   Thu Nov 11 22:09:16 2021 -0500

    net: ieee802154: handle iftypes as u32
    
    [ Upstream commit 451dc48c806a7ce9fbec5e7a24ccf4b2c936e834 ]
    
    This patch fixes an issue that an u32 netlink value is handled as a
    signed enum value which doesn't fit into the range of u32 netlink type.
    If it's handled as -1 value some BIT() evaluation ends in a
    shift-out-of-bounds issue. To solve the issue we set the to u32 max which
    is s32 "-1" value to keep backwards compatibility and let the followed enum
    values start counting at 0. This brings the compiler to never handle the
    enum as signed and a check if the value is above NL802154_IFTYPE_MAX should
    filter -1 out.
    
    Fixes: f3ea5e44231a ("ieee802154: add new interface command")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Link: https://lore.kernel.org/r/20211112030916.685793-1-aahringo@redhat.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab6db10bde978a61345bdf40c04f5255358560cb
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Nov 16 08:18:12 2021 +0100

    ASoC: topology: Add missing rwsem around snd_ctl_remove() calls
    
    [ Upstream commit 7e567b5ae06315ef2d70666b149962e2bb4b97af ]
    
    snd_ctl_remove() has to be called with card->controls_rwsem held (when
    called after the card instantiation).  This patch add the missing
    rwsem calls around it.
    
    Fixes: 8a9782346dcc ("ASoC: topology: Add topology core")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20211116071812.18109-1-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a12e248cc0586e272758c3aaba9c139c2a9cc3bd
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Oct 28 09:46:53 2021 -0700

    ARM: dts: BCM5301X: Add interrupt properties to GPIO node
    
    [ Upstream commit 40f7342f0587639e5ad625adaa15efdd3cffb18f ]
    
    The GPIO controller is also an interrupt controller provider and is
    currently missing the appropriate 'interrupt-controller' and
    '#interrupt-cells' properties to denote that.
    
    Fixes: fb026d3de33b ("ARM: BCM5301X: Add Broadcom's bus-axi to the DTS file")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e18bfe139285952b747c18a1a522a4487f45305
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Oct 27 12:37:29 2021 -0700

    ARM: dts: BCM5301X: Fix I2C controller interrupt
    
    [ Upstream commit 754c4050a00e802e122690112fc2c3a6abafa7e2 ]
    
    The I2C interrupt controller line is off by 32 because the datasheet
    describes interrupt inputs into the GIC which are for Shared Peripheral
    Interrupts and are starting at offset 32. The ARM GIC binding expects
    the SPI interrupts to be numbered from 0 relative to the SPI base.
    
    Fixes: bb097e3e0045 ("ARM: dts: BCM5301X: Add I2C support to the DT")
    Tested-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c46d0975c8d7aabb79cc2d2be393be60eda8f916
Author: yangxingwu <xingwu.yang@gmail.com>
Date:   Thu Nov 4 03:10:29 2021 +0100

    netfilter: ipvs: Fix reuse connection if RS weight is 0
    
    [ Upstream commit c95c07836fa4c1767ed11d8eca0769c652760e32 ]
    
    We are changing expire_nodest_conn to work even for reused connections when
    conn_reuse_mode=0, just as what was done with commit dc7b3eb900aa ("ipvs:
    Fix reuse connection if real server is dead").
    
    For controlled and persistent connections, the new connection will get the
    needed real server depending on the rules in ip_vs_check_template().
    
    Fixes: d752c3645717 ("ipvs: allow rescheduling of new connections when port reuse is detected")
    Co-developed-by: Chuanqi Liu <legend050709@qq.com>
    Signed-off-by: Chuanqi Liu <legend050709@qq.com>
    Signed-off-by: yangxingwu <xingwu.yang@gmail.com>
    Acked-by: Simon Horman <horms@verge.net.au>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dae065e34596dab0011fff546db3171cd4b45de0
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Nov 26 17:34:42 2021 -0500

    tracing: Fix pid filtering when triggers are attached
    
    commit a55f224ff5f238013de8762c4287117e47b86e22 upstream.
    
    If a event is filtered by pid and a trigger that requires processing of
    the event to happen is a attached to the event, the discard portion does
    not take the pid filtering into account, and the event will then be
    recorded when it should not have been.
    
    Cc: stable@vger.kernel.org
    Fixes: 3fdaf80f4a836 ("tracing: Implement event pid filtering")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12dd397a6bcdb3997c0cbdf23228dde7107896e5
Author: Stefano Stabellini <stefano.stabellini@xilinx.com>
Date:   Tue Nov 23 13:07:48 2021 -0800

    xen: detect uninitialized xenbus in xenbus_init
    
    commit 36e8f60f0867d3b70d398d653c17108459a04efe upstream.
    
    If the xenstore page hasn't been allocated properly, reading the value
    of the related hvm_param (HVM_PARAM_STORE_PFN) won't actually return
    error. Instead, it will succeed and return zero. Instead of attempting
    to xen_remap a bad guest physical address, detect this condition and
    return early.
    
    Note that although a guest physical address of zero for
    HVM_PARAM_STORE_PFN is theoretically possible, it is not a good choice
    and zero has never been validly used in that capacity.
    
    Also recognize all bits set as an invalid value.
    
    For 32-bit Linux, any pfn above ULONG_MAX would get truncated. Pfns
    above ULONG_MAX should never be passed by the Xen tools to HVM guests
    anyway, so check for this condition and return early.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefano Stabellini <stefano.stabellini@xilinx.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Link: https://lore.kernel.org/r/20211123210748.1910236-1-sstabellini@kernel.org
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dc1d3451f99ca690ebd3ef21783c2e69400fbc2
Author: Stefano Stabellini <stefano.stabellini@xilinx.com>
Date:   Mon Nov 15 14:27:19 2021 -0800

    xen: don't continue xenstore initialization in case of errors
    
    commit 08f6c2b09ebd4b326dbe96d13f94fee8f9814c78 upstream.
    
    In case of errors in xenbus_init (e.g. missing xen_store_gfn parameter),
    we goto out_error but we forget to reset xen_store_domain_type to
    XS_UNKNOWN. As a consequence xenbus_probe_initcall and other initcalls
    will still try to initialize xenstore resulting into a crash at boot.
    
    [    2.479830] Call trace:
    [    2.482314]  xb_init_comms+0x18/0x150
    [    2.486354]  xs_init+0x34/0x138
    [    2.489786]  xenbus_probe+0x4c/0x70
    [    2.498432]  xenbus_probe_initcall+0x2c/0x7c
    [    2.503944]  do_one_initcall+0x54/0x1b8
    [    2.507358]  kernel_init_freeable+0x1ac/0x210
    [    2.511617]  kernel_init+0x28/0x130
    [    2.516112]  ret_from_fork+0x10/0x20
    
    Cc: <Stable@vger.kernel.org>
    Cc: jbeulich@suse.com
    Signed-off-by: Stefano Stabellini <stefano.stabellini@xilinx.com>
    Link: https://lore.kernel.org/r/20211115222719.2558207-1-sstabellini@kernel.org
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 017fc242d6ce52e16e00ffdfddf95ed75316d678
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Tue Nov 2 11:10:37 2021 +0100

    fuse: fix page stealing
    
    commit 712a951025c0667ff00b25afc360f74e639dfabe upstream.
    
    It is possible to trigger a crash by splicing anon pipe bufs to the fuse
    device.
    
    The reason for this is that anon_pipe_buf_release() will reuse buf->page if
    the refcount is 1, but that page might have already been stolen and its
    flags modified (e.g. PG_lru added).
    
    This happens in the unlikely case of fuse_dev_splice_write() getting around
    to calling pipe_buf_release() after a page has been stolen, added to the
    page cache and removed from the page cache.
    
    Fix by calling pipe_buf_release() right after the page was inserted into
    the page cache.  In this case the page has an elevated refcount so any
    release function will know that the page isn't reusable.
    
    Reported-by: Frank Dinoff <fdinoff@google.com>
    Link: https://lore.kernel.org/r/CAAmZXrsGg2xsP1CK+cbuEMumtrqdvD-NKnWzhNcvn71RV3c1yw@mail.gmail.com/
    Fixes: dd3bb14f44a6 ("fuse: support splice() writing to fuse device")
    Cc: <stable@vger.kernel.org> # v2.6.35
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0ef0e75a858cbd8618b473f22fbca36106dcf82
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Nov 17 10:20:16 2021 +0300

    staging: rtl8192e: Fix use after free in _rtl92e_pci_disconnect()
    
    commit b535917c51acc97fb0761b1edec85f1f3d02bda4 upstream.
    
    The free_rtllib() function frees the "dev" pointer so there is use
    after free on the next line.  Re-arrange things to avoid that.
    
    Fixes: 66898177e7e5 ("staging: rtl8192e: Fix unload/reload problem")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20211117072016.GA5237@kili
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dde64487284dabcb33efe2e7764aa0fb0be5c67a
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Nov 8 16:31:01 2021 -0800

    HID: wacom: Use "Confidence" flag to prevent reporting invalid contacts
    
    commit 7fb0413baa7f8a04caef0c504df9af7e0623d296 upstream.
    
    The HID descriptor of many of Wacom's touch input devices include a
    "Confidence" usage that signals if a particular touch collection contains
    useful data. The driver does not look at this flag, however, which causes
    even invalid contacts to be reported to userspace. A lucky combination of
    kernel event filtering and device behavior (specifically: contact ID 0 ==
    invalid, contact ID >0 == valid; and order all data so that all valid
    contacts are reported before any invalid contacts) spare most devices from
    any visibly-bad behavior.
    
    The DTH-2452 is one example of an unlucky device that misbehaves. It uses
    ID 0 for both the first valid contact and all invalid contacts. Because
    we report both the valid and invalid contacts, the kernel reports that
    contact 0 first goes down (valid) and then goes up (invalid) in every
    report. This causes ~100 clicks per second simply by touching the screen.
    
    This patch inroduces new `confidence` flag in our `hid_data` structure.
    The value is initially set to `true` at the start of a report and can be
    set to `false` if an invalid touch usage is seen.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/270
    Fixes: f8b6a74719b5 ("HID: wacom: generic: Support multiple tools per report")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Tested-by: Joshua Dickens <joshua.dickens@wacom.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e070ab1b06f80d5445ebbafb59bfe32db0a6a9da
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Nov 2 12:24:26 2021 +0000

    media: cec: copy sequence field for the reply
    
    commit 13cbaa4c2b7bf9f8285e1164d005dbf08244ecd5 upstream.
    
    When the reply for a non-blocking transmit arrives, the sequence
    field for that reply was never filled in, so userspace would have no
    way of associating the reply to the original transmit.
    
    Copy the sequence field to ensure that this is now possible.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Fixes: 0dbacebede1e ([media] cec: move the CEC framework out of staging and to media)
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcf9e1df5a5fcdf6df8840c7f376629ffd2713a0
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 18 22:57:29 2021 +0100

    ALSA: ctxfi: Fix out-of-range access
    
    commit 76c47183224c86e4011048b80f0e2d0d166f01c2 upstream.
    
    The master and next_conj of rcs_ops are used for iterating the
    resource list entries, and currently those are supposed to return the
    current value.  The problem is that next_conf may go over the last
    entry before the loop abort condition is evaluated, and it may return
    the "current" value that is beyond the array size.  It was caught
    recently as a GPF, for example.
    
    Those return values are, however, never actually evaluated, hence
    basically we don't have to consider the current value as the return at
    all.  By dropping those return values, the potential out-of-range
    access above is also fixed automatically.
    
    This patch changes the return type of master and next_conj callbacks
    to void and drop the superfluous code accordingly.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=214985
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211118215729.26257-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db918af2a64a892aa8eba7f9f34da3e3c96e76f3
Author: Todd Kjos <tkjos@google.com>
Date:   Fri Nov 12 10:07:20 2021 -0800

    binder: fix test regression due to sender_euid change
    
    commit c21a80ca0684ec2910344d72556c816cb8940c01 upstream.
    
    This is a partial revert of commit
    29bc22ac5e5b ("binder: use euid from cred instead of using task").
    Setting sender_euid using proc->cred caused some Android system test
    regressions that need further investigation. It is a partial
    reversion because subsequent patches rely on proc->cred.
    
    Fixes: 29bc22ac5e5b ("binder: use euid from cred instead of using task")
    Cc: stable@vger.kernel.org # 4.4+
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Change-Id: I9b1769a3510fed250bb21859ef8beebabe034c66
    Link: https://lore.kernel.org/r/20211112180720.2858135-1-tkjos@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12eaaa639015c950fd8dc2a84e0a707ef946d76c
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Tue Nov 23 12:16:56 2021 +0200

    usb: hub: Fix locking issues with address0_mutex
    
    commit 6cca13de26eea6d32a98d96d916a048d16a12822 upstream.
    
    Fix the circular lock dependency and unbalanced unlock of addess0_mutex
    introduced when fixing an address0_mutex enumeration retry race in commit
    ae6dc22d2d1 ("usb: hub: Fix usb enumeration issue due to address0 race")
    
    Make sure locking order between port_dev->status_lock and address0_mutex
    is correct, and that address0_mutex is not unlocked in hub_port_connect
    "done:" codepath which may be reached without locking address0_mutex
    
    Fixes: 6ae6dc22d2d1 ("usb: hub: Fix usb enumeration issue due to address0 race")
    Cc: <stable@vger.kernel.org>
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20211123101656.1113518-1-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25481ba05861953aad492217925d898aa46286c2
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Tue Nov 16 00:16:30 2021 +0200

    usb: hub: Fix usb enumeration issue due to address0 race
    
    commit 6ae6dc22d2d1ce6aa77a6da8a761e61aca216f8b upstream.
    
    xHC hardware can only have one slot in default state with address 0
    waiting for a unique address at a time, otherwise "undefined behavior
    may occur" according to xhci spec 5.4.3.4
    
    The address0_mutex exists to prevent this across both xhci roothubs.
    
    If hub_port_init() fails, it may unlock the mutex and exit with a xhci
    slot in default state. If the other xhci roothub calls hub_port_init()
    at this point we end up with two slots in default state.
    
    Make sure the address0_mutex protects the slot default state across
    hub_port_init() retries, until slot is addressed or disabled.
    
    Note, one known minor case is not fixed by this patch.
    If device needs to be reset during resume, but fails all hub_port_init()
    retries in usb_reset_and_verify_device(), then it's possible the slot is
    still left in default state when address0_mutex is unlocked.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 638139eb95d2 ("usb: hub: allow to process more usb hub events in parallel")
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20211115221630.871204-1-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc6dc7ed75448eca39f05267fbb088faaaac5336
Author: Mingjie Zhang <superzmj@fibocom.com>
Date:   Tue Nov 23 21:37:57 2021 +0800

    USB: serial: option: add Fibocom FM101-GL variants
    
    commit 88459e3e42760abb2299bbf6cb1026491170e02a upstream.
    
    Update the USB serial option driver support for the Fibocom
    FM101-GL Cat.6
    LTE modules as there are actually several different variants.
    - VID:PID 2cb7:01a2, FM101-GL are laptop M.2 cards (with
      MBIM interfaces for /Linux/Chrome OS)
    - VID:PID 2cb7:01a4, FM101-GL for laptop debug M.2 cards(with adb
      interface for /Linux/Chrome OS)
    
    0x01a2: mbim, tty, tty, diag, gnss
    0x01a4: mbim, diag, tty, adb, gnss, gnss
    
    Here are the outputs of lsusb -v and usb-devices:
    
    T:  Bus=02 Lev=01 Prnt=01 Port=03 Cnt=01 Dev#= 86 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=01a2 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=673326ce
    C:* #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    
    Bus 002 Device 084: ID 2cb7:01a2 Fibocom Wireless Inc. Fibocom FM101-GL Module
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               3.20
      bDeviceClass            0
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0         9
      idVendor           0x2cb7
      idProduct          0x01a2
      bcdDevice            5.04
      iManufacturer           1 Fibocom Wireless Inc.
      iProduct                2 Fibocom FM101-GL Module
      iSerial                 3 673326ce
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x015d
        bNumInterfaces          6
        bConfigurationValue     1
        iConfiguration          4 MBIM_DUN_DUN_DIAG_NMEA
        bmAttributes         0xa0
          (Bus Powered)
          Remote Wakeup
        MaxPower              896mA
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         0
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass      14
          bFunctionProtocol       0
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass     14
          bInterfaceProtocol      0
          iInterface              5 Fibocom FM101-GL LTE Modem
          CDC Header:
            bcdCDC               1.10
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
          CDC MBIM:
            bcdMBIMVersion       1.00
            wMaxControlMessage   4096
            bNumberFilters       32
            bMaxFilterSize       128
            wMaxSegmentSize      2048
            bmNetworkCapabilities 0x20
              8-byte ntb input size
          CDC MBIM Extended:
            bcdMBIMExtendedVersion           1.00
            bMaxOutstandingCommandMessages     64
            wMTU                             1500
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               9
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           0
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       1
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              6 MBIM Data
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x8e  EP 14 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x0f  EP 15 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               2
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     48
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x88  EP 8 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
    
    T:  Bus=02 Lev=01 Prnt=01 Port=03 Cnt=01 Dev#= 85 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=01a4 Rev= 5.04
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom FM101-GL Module
    S:  SerialNumber=673326ce
    C:* #Ifs= 7 Cfg#= 1 Atr=a0 MxPwr=896mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0e Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=(none)
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    I:* If#= 6 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=(none)
    
    Bus 002 Device 085: ID 2cb7:01a4 Fibocom Wireless Inc. Fibocom FM101-GL Module
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               3.20
      bDeviceClass            0
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0         9
      idVendor           0x2cb7
      idProduct          0x01a4
      bcdDevice            5.04
      iManufacturer           1 Fibocom Wireless Inc.
      iProduct                2 Fibocom FM101-GL Module
      iSerial                 3 673326ce
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x0180
        bNumInterfaces          7
        bConfigurationValue     1
        iConfiguration          4 MBIM_DIAG_DUN_ADB_GNSS_GNSS
        bmAttributes         0xa0
          (Bus Powered)
          Remote Wakeup
        MaxPower              896mA
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         0
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass      14
          bFunctionProtocol       0
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass     14
          bInterfaceProtocol      0
          iInterface              5 Fibocom FM101-GL LTE Modem
          CDC Header:
            bcdCDC               1.10
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
          CDC MBIM:
            bcdMBIMVersion       1.00
            wMaxControlMessage   4096
            bNumberFilters       32
            bMaxFilterSize       128
            wMaxSegmentSize      2048
            bmNetworkCapabilities 0x20
              8-byte ntb input size
          CDC MBIM Extended:
            bcdMBIMExtendedVersion           1.00
            bMaxOutstandingCommandMessages     64
            wMTU                             1500
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               9
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           0
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       1
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0
          bInterfaceProtocol      2
          iInterface              6 MBIM Data
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x8e  EP 14 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x0f  EP 15 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               2
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     48
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass     66
          bInterfaceProtocol      1
          iInterface              8 ADB Interface
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      0
          bInterfaceProtocol     64
          iInterface              0
          ** UNRECOGNIZED:  05 24 00 10 01
          ** UNRECOGNIZED:  05 24 01 00 00
          ** UNRECOGNIZED:  04 24 02 02
          ** UNRECOGNIZED:  05 24 06 00 00
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x89  EP 9 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x000a  1x 10 bytes
            bInterval               9
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x88  EP 8 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x05  EP 5 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0400  1x 1024 bytes
            bInterval               0
            bMaxBurst               0
    
    Signed-off-by: Mingjie Zhang <superzmj@fibocom.com>
    Link: https://lore.kernel.org/r/20211123133757.37475-1-superzmj@fibocom.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 285ae26716d39411eadebecef8dcd462942a8892
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Nov 19 15:03:19 2021 +0100

    USB: serial: option: add Telit LE910S1 0x9200 composition
    
    commit e353f3e88720300c3d72f49a4bea54f42db1fa5e upstream.
    
    Add the following Telit LE910S1 composition:
    
    0x9200: tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20211119140319.10448-1-dnlplm@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
