commit 5f9f3b0057d5c5782985784ba0159b05b4083055
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Nov 12 14:28:26 2021 +0100

    Linux 4.14.255
    
    Link: https://lore.kernel.org/r/20211110182002.666244094@linuxfoundation.org
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57bf5755bf719fc00ad277eca971118ad6f08c13
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 14:05:22 2021 +0200

    rsi: fix control-message timeout
    
    commit 541fd20c3ce5b0bc39f0c6a52414b6b92416831c upstream.
    
    USB control-message timeouts are specified in milliseconds and should
    specifically not vary with CONFIG_HZ.
    
    Use the common control-message timeout define for the five-second
    timeout.
    
    Fixes: dad0d04fa7ba ("rsi: Add RS9113 wireless driver")
    Cc: stable@vger.kernel.org      # 3.15
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20211025120522.6045-5-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3edfebf2a8888d32126e17f89fb626d2afa9138
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 14:09:09 2021 +0200

    staging: rtl8192u: fix control-message timeouts
    
    commit 4cfa36d312d6789448b59a7aae770ac8425017a3 upstream.
    
    USB control-message timeouts are specified in milliseconds and should
    specifically not vary with CONFIG_HZ.
    
    Fixes: 8fc8598e61f6 ("Staging: Added Realtek rtl8192u driver to staging")
    Cc: stable@vger.kernel.org      # 2.6.33
    Acked-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211025120910.6339-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41759b44175ec820987c08f8404b79916246e530
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 14:09:10 2021 +0200

    staging: r8712u: fix control-message timeout
    
    commit ce4940525f36ffdcf4fa623bcedab9c2a6db893a upstream.
    
    USB control-message timeouts are specified in milliseconds and should
    specifically not vary with CONFIG_HZ.
    
    Fixes: 2865d42c78a9 ("staging: r8712u: Add the new driver to the mainline kernel")
    Cc: stable@vger.kernel.org      # 2.6.37
    Acked-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211025120910.6339-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f5894ad390695c4ce29455afc5fc079bc78021e
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 13:45:32 2021 +0200

    comedi: vmk80xx: fix bulk and interrupt message timeouts
    
    commit a56d3e40bda460edf3f8d6aac00ec0b322b4ab83 upstream.
    
    USB bulk and interrupt message timeouts are specified in milliseconds
    and should specifically not vary with CONFIG_HZ.
    
    Note that the bulk-out transfer timeout was set to the endpoint
    bInterval value, which should be ignored for bulk endpoints and is
    typically set to zero. This meant that a failing bulk-out transfer
    would never time out.
    
    Assume that the 10 second timeout used for all other transfers is more
    than enough also for the bulk-out endpoint.
    
    Fixes: 985cafccbf9b ("Staging: Comedi: vmk80xx: Add k8061 support")
    Fixes: 951348b37738 ("staging: comedi: vmk80xx: wait for URBs to complete")
    Cc: stable@vger.kernel.org      # 2.6.31
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20211025114532.4599-6-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0866dcaa828c21bc2f94dac00e086078f11b5772
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 13:45:31 2021 +0200

    comedi: vmk80xx: fix bulk-buffer overflow
    
    commit 78cdfd62bd54af615fba9e3ca1ba35de39d3871d upstream.
    
    The driver is using endpoint-sized buffers but must not assume that the
    tx and rx buffers are of equal size or a malicious device could overflow
    the slab-allocated receive buffer when doing bulk transfers.
    
    Fixes: 985cafccbf9b ("Staging: Comedi: vmk80xx: Add k8061 support")
    Cc: stable@vger.kernel.org      # 2.6.31
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20211025114532.4599-5-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40d2a7e278e2e7c0a5fd7e997e7eb63945bf93f7
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 25 13:45:30 2021 +0200

    comedi: vmk80xx: fix transfer-buffer overflows
    
    commit a23461c47482fc232ffc9b819539d1f837adf2b1 upstream.
    
    The driver uses endpoint-sized USB transfer buffers but up until
    recently had no sanity checks on the sizes.
    
    Commit e1f13c879a7c ("staging: comedi: check validity of wMaxPacketSize
    of usb endpoints found") inadvertently fixed NULL-pointer dereferences
    when accessing the transfer buffers in case a malicious device has a
    zero wMaxPacketSize.
    
    Make sure to allocate buffers large enough to handle also the other
    accesses that are done without a size check (e.g. byte 18 in
    vmk80xx_cnt_insn_read() for the VMK8061_MODEL) to avoid writing beyond
    the buffers, for example, when doing descriptor fuzzing.
    
    The original driver was for a low-speed device with 8-byte buffers.
    Support was later added for a device that uses bulk transfers and is
    presumably a full-speed device with a maximum 64-byte wMaxPacketSize.
    
    Fixes: 985cafccbf9b ("Staging: Comedi: vmk80xx: Add k8061 support")
    Cc: stable@vger.kernel.org      # 2.6.31
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20211025114532.4599-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df7b1238f3b599a0b9284249772cdfd1ea83a632
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 27 11:35:28 2021 +0200

    comedi: ni_usb6501: fix NULL-deref in command paths
    
    commit 907767da8f3a925b060c740e0b5c92ea7dbec440 upstream.
    
    The driver uses endpoint-sized USB transfer buffers but had no sanity
    checks on the sizes. This can lead to zero-size-pointer dereferences or
    overflowed transfer buffers in ni6501_port_command() and
    ni6501_counter_command() if a (malicious) device has smaller max-packet
    sizes than expected (or when doing descriptor fuzz testing).
    
    Add the missing sanity checks to probe().
    
    Fixes: a03bb00e50ab ("staging: comedi: add NI USB-6501 support")
    Cc: stable@vger.kernel.org      # 3.18
    Cc: Luca Ellero <luca.ellero@brickedbrain.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211027093529.30896-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a52bc480992c7c9da3ebfea456af731f50a4b97
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 27 11:35:29 2021 +0200

    comedi: dt9812: fix DMA buffers on stack
    
    commit 536de747bc48262225889a533db6650731ab25d3 upstream.
    
    USB transfer buffers are typically mapped for DMA and must not be
    allocated on the stack or transfers will fail.
    
    Allocate proper transfer buffers in the various command helpers and
    return an error on short transfers instead of acting on random stack
    data.
    
    Note that this also fixes a stack info leak on systems where DMA is not
    used as 32 bytes are always sent to the device regardless of how short
    the command is.
    
    Fixes: 63274cd7d38a ("Staging: comedi: add usb dt9812 driver")
    Cc: stable@vger.kernel.org      # 2.6.29
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20211027093529.30896-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afbd40f425227e661d991757e11cc4db024e761f
Author: Jan Kara <jack@suse.cz>
Date:   Mon Oct 18 12:37:41 2021 +0200

    isofs: Fix out of bound access for corrupted isofs image
    
    commit e96a1866b40570b5950cda8602c2819189c62a48 upstream.
    
    When isofs image is suitably corrupted isofs_read_inode() can read data
    beyond the end of buffer. Sanity-check the directory entry length before
    using it.
    
    Reported-and-tested-by: syzbot+6fc7fb214625d82af7d1@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0e6e429d99a27ccf63d9e474ece8583bccc4fcc
Author: Petr Mladek <pmladek@suse.com>
Date:   Wed Nov 11 14:54:50 2020 +0100

    printk/console: Allow to disable console output by using console="" or console=null
    
    commit 3cffa06aeef7ece30f6b5ac0ea51f264e8fea4d0 upstream.
    
    The commit 48021f98130880dd74 ("printk: handle blank console arguments
    passed in.") prevented crash caused by empty console= parameter value.
    
    Unfortunately, this value is widely used on Chromebooks to disable
    the console output. The above commit caused performance regression
    because the messages were pushed on slow console even though nobody
    was watching it.
    
    Use ttynull driver explicitly for console="" and console=null
    parameters. It has been created for exactly this purpose.
    
    It causes that preferred_console is set. As a result, ttySX and ttyX
    are not used as a fallback. And only ttynull console gets registered by
    default.
    
    It still allows to register other consoles either by additional console=
    parameters or SPCR. It prevents regression because it worked this way even
    before. Also it is a sane semantic. Preventing output on all consoles
    should be done another way, for example, by introducing mute_console
    parameter.
    
    Link: https://lore.kernel.org/r/20201006025935.GA597@jagdpanzerIV.localdomain
    Suggested-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Link: https://lore.kernel.org/r/20201111135450.11214-3-pmladek@suse.com
    Cc: Yi Fan <yfa@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1fed34d6f8941056f78e0f0b1ad69801f598068
Author: James Buren <braewoods+lkml@braewoods.net>
Date:   Wed Oct 13 20:55:04 2021 -0500

    usb-storage: Add compatibility quirk flags for iODD 2531/2541
    
    commit 05c8f1b67e67dcd786ae3fe44492bbc617b4bd12 upstream.
    
    These drive enclosures have firmware bugs that make it impossible to mount
    a new virtual ISO image after Linux ejects the old one if the device is
    locked by Linux. Windows bypasses this problem by the fact that they do
    not lock the device. Add a quirk to disable device locking for these
    drive enclosures.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: James Buren <braewoods+lkml@braewoods.net>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211014015504.2695089-1-braewoods+lkml@braewoods.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13a76b8447dabef08c8b354bfa4c347da23fb4fc
Author: Viraj Shah <viraj.shah@linutronix.de>
Date:   Thu Oct 21 11:36:44 2021 +0200

    usb: musb: Balance list entry in musb_gadget_queue
    
    commit 21b5fcdccb32ff09b6b63d4a83c037150665a83f upstream.
    
    musb_gadget_queue() adds the passed request to musb_ep::req_list. If the
    endpoint is idle and it is the first request then it invokes
    musb_queue_resume_work(). If the function returns an error then the
    error is passed to the caller without any clean-up and the request
    remains enqueued on the list. If the caller enqueues the request again
    then the list corrupts.
    
    Remove the request from the list on error.
    
    Fixes: ea2f35c01d5ea ("usb: musb: Fix sleeping function called from invalid context for hdrc glue")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Viraj Shah <viraj.shah@linutronix.de>
    Link: https://lore.kernel.org/r/20211021093644.4734-1-viraj.shah@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a8852a3f3f60fd8d5c694ff7694ece691589271
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Wed Oct 27 10:08:49 2021 +0200

    usb: gadget: Mark USB_FSL_QE broken on 64-bit
    
    commit a0548b26901f082684ad1fb3ba397d2de3a1406a upstream.
    
    On 64-bit:
    
        drivers/usb/gadget/udc/fsl_qe_udc.c: In function ‘qe_ep0_rx’:
        drivers/usb/gadget/udc/fsl_qe_udc.c:842:13: error: cast from pointer to integer of different size [-Werror=pointer-to-int-cast]
          842 |     vaddr = (u32)phys_to_virt(in_be32(&bd->buf));
              |             ^
        In file included from drivers/usb/gadget/udc/fsl_qe_udc.c:41:
        drivers/usb/gadget/udc/fsl_qe_udc.c:843:28: error: cast to pointer from integer of different size [-Werror=int-to-pointer-cast]
          843 |     frame_set_data(pframe, (u8 *)vaddr);
              |                            ^
    
    The driver assumes physical and virtual addresses are 32-bit, hence it
    cannot work on 64-bit platforms.
    
    Acked-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Link: https://lore.kernel.org/r/20211027080849.3276289-1-geert@linux-m68k.org
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b41c1f765cb5a99fd0d69cf01b5b0dffc170d2c6
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Sep 13 15:57:43 2021 +0200

    Revert "x86/kvm: fix vcpu-id indexed array sizes"
    
    commit 1e254d0d86a0f2efd4190a89d5204b37c18c6381 upstream.
    
    This reverts commit 76b4f357d0e7d8f6f0013c733e6cba1773c266d3.
    
    The commit has the wrong reasoning, as KVM_MAX_VCPU_ID is not defining the
    maximum allowed vcpu-id as its name suggests, but the number of vcpu-ids.
    So revert this patch again.
    
    Suggested-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210913135745.13944-2-jgross@suse.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 783336f916a6d07535305ad2f96064d1200a2ad4
Author: Ming Lei <ming.lei@redhat.com>
Date:   Fri Feb 15 19:13:10 2019 +0800

    block: introduce multi-page bvec helpers
    
    commit 3d75ca0adef4280650c6690a0c4702a74a6f3c95 upstream.
    
    This patch introduces helpers of 'mp_bvec_iter_*' for multi-page bvec
    support.
    
    The introduced helpers treate one bvec as real multi-page segment,
    which may include more than one pages.
    
    The existed helpers of bvec_iter_* are interfaces for supporting current
    bvec iterator which is thought as single-page by drivers, fs, dm and
    etc. These introduced helpers will build single-page bvec in flight, so
    this way won't break current bio/bvec users, which needn't any change.
    
    Follows some multi-page bvec background:
    
    - bvecs stored in bio->bi_io_vec is always multi-page style
    
    - bvec(struct bio_vec) represents one physically contiguous I/O
      buffer, now the buffer may include more than one page after
      multi-page bvec is supported, and all these pages represented
      by one bvec is physically contiguous. Before multi-page bvec
      support, at most one page is included in one bvec, we call it
      single-page bvec.
    
    - .bv_page of the bvec points to the 1st page in the multi-page bvec
    
    - .bv_offset of the bvec is the offset of the buffer in the bvec
    
    The effect on the current drivers/filesystem/dm/bcache/...:
    
    - almost everyone supposes that one bvec only includes one single
      page, so we keep the sp interface not changed, for example,
      bio_for_each_segment() still returns single-page bvec
    
    - bio_for_each_segment_all() will return single-page bvec too
    
    - during iterating, iterator variable(struct bvec_iter) is always
      updated in multi-page bvec style, and bvec_iter_advance() is kept
      not changed
    
    - returned(copied) single-page bvec is built in flight by bvec
      helpers from the stored multi-page bvec
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60833707b968d5ae02a75edb7886dcd4a957cf0d
Author: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
Date:   Tue Oct 12 13:55:19 2021 -0400

    IB/qib: Protect from buffer overflow in struct qib_user_sdma_pkt fields
    
    commit d39bf40e55e666b5905fdbd46a0dced030ce87be upstream.
    
    Overflowing either addrlimit or bytes_togo can allow userspace to trigger
    a buffer overflow of kernel memory. Check for overflows in all the places
    doing math on user controlled buffers.
    
    Fixes: f931551bafe1 ("IB/qib: Add new qib driver for QLogic PCIe InfiniBand adapters")
    Link: https://lore.kernel.org/r/20211012175519.7298.77738.stgit@awfm-01.cornelisnetworks.com
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aac6f16d6d952e068a5717be64e432ae79ec70d1
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed May 29 10:13:26 2019 -0500

    IB/qib: Use struct_size() helper
    
    commit 829ca44ecf60e9b6f83d0161a6ef10c1304c5060 upstream.
    
    Make use of the struct_size() helper instead of an open-coded version
    in order to avoid any potential type mistakes, in particular in the
    context in which this code is being used.
    
    So, replace the following form:
    
    sizeof(*pkt) + sizeof(pkt->addr[0])*n
    
    with:
    
    struct_size(pkt, addr, n)
    
    Also, notice that variable size is unnecessary, hence it is removed.
    
    This code was detected with the help of Coccinelle.
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30286fecf109fe8a433fd3854ec06b02d17aa85e
Author: Wang Kefeng <wangkefeng.wang@huawei.com>
Date:   Mon Aug 23 10:41:42 2021 +0100

    ARM: 9120/1: Revert "amba: make use of -1 IRQs warn"
    
    commit eb4f756915875b0ea0757751cd29841f0504d547 upstream.
    
    After commit 77a7300abad7 ("of/irq: Get rid of NO_IRQ usage"),
    no irq case has been removed, irq_of_parse_and_map() will return
    0 in all cases when get error from parse and map an interrupt into
    linux virq space.
    
    amba_device_register() is only used on no-DT initialization, see
      s3c64xx_pl080_init()          arch/arm/mach-s3c/pl080.c
      ep93xx_init_devices()         arch/arm/mach-ep93xx/core.c
    
    They won't set -1 to irq[0], so no need the warn.
    
    This reverts commit 2eac58d5026e4ec8b17ff8b62877fea9e1d2f1b3.
    
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0bbc417605572e44f8fd7a0fe133f111ee74dfc
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Nov 3 13:57:04 2021 -0700

    arch: pgtable: define MAX_POSSIBLE_PHYSMEM_BITS where needed
    
    [ Upstream commit cef397038167ac15d085914493d6c86385773709 ]
    
    Stefan Agner reported a bug when using zsram on 32-bit Arm machines
    with RAM above the 4GB address boundary:
    
      Unable to handle kernel NULL pointer dereference at virtual address 00000000
      pgd = a27bd01c
      [00000000] *pgd=236a0003, *pmd=1ffa64003
      Internal error: Oops: 207 [#1] SMP ARM
      Modules linked in: mdio_bcm_unimac(+) brcmfmac cfg80211 brcmutil raspberrypi_hwmon hci_uart crc32_arm_ce bcm2711_thermal phy_generic genet
      CPU: 0 PID: 123 Comm: mkfs.ext4 Not tainted 5.9.6 #1
      Hardware name: BCM2711
      PC is at zs_map_object+0x94/0x338
      LR is at zram_bvec_rw.constprop.0+0x330/0xa64
      pc : [<c0602b38>]    lr : [<c0bda6a0>]    psr: 60000013
      sp : e376bbe0  ip : 00000000  fp : c1e2921c
      r10: 00000002  r9 : c1dda730  r8 : 00000000
      r7 : e8ff7a00  r6 : 00000000  r5 : 02f9ffa0  r4 : e3710000
      r3 : 000fdffe  r2 : c1e0ce80  r1 : ebf979a0  r0 : 00000000
      Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
      Control: 30c5383d  Table: 235c2a80  DAC: fffffffd
      Process mkfs.ext4 (pid: 123, stack limit = 0x495a22e6)
      Stack: (0xe376bbe0 to 0xe376c000)
    
    As it turns out, zsram needs to know the maximum memory size, which
    is defined in MAX_PHYSMEM_BITS when CONFIG_SPARSEMEM is set, or in
    MAX_POSSIBLE_PHYSMEM_BITS on the x86 architecture.
    
    The same problem will be hit on all 32-bit architectures that have a
    physical address space larger than 4GB and happen to not enable sparsemem
    and include asm/sparsemem.h from asm/pgtable.h.
    
    After the initial discussion, I suggested just always defining
    MAX_POSSIBLE_PHYSMEM_BITS whenever CONFIG_PHYS_ADDR_T_64BIT is
    set, or provoking a build error otherwise. This addresses all
    configurations that can currently have this runtime bug, but
    leaves all other configurations unchanged.
    
    I looked up the possible number of bits in source code and
    datasheets, here is what I found:
    
     - on ARC, CONFIG_ARC_HAS_PAE40 controls whether 32 or 40 bits are used
     - on ARM, CONFIG_LPAE enables 40 bit addressing, without it we never
       support more than 32 bits, even though supersections in theory allow
       up to 40 bits as well.
     - on MIPS, some MIPS32r1 or later chips support 36 bits, and MIPS32r5
       XPA supports up to 60 bits in theory, but 40 bits are more than
       anyone will ever ship
     - On PowerPC, there are three different implementations of 36 bit
       addressing, but 32-bit is used without CONFIG_PTE_64BIT
     - On RISC-V, the normal page table format can support 34 bit
       addressing. There is no highmem support on RISC-V, so anything
       above 2GB is unused, but it might be useful to eventually support
       CONFIG_ZRAM for high pages.
    
    Fixes: 61989a80fb3a ("staging: zsmalloc: zsmalloc memory allocation library")
    Fixes: 02390b87a945 ("mm/zsmalloc: Prepare to variable MAX_PHYSMEM_BITS")
    Acked-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Reviewed-by: Stefan Agner <stefan@agner.ch>
    Tested-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Mike Rapoport <rppt@linux.ibm.com>
    Link: https://lore.kernel.org/linux-mm/bdfa44bf1c570b05d6c70898e2bbb0acf234ecdf.1604762181.git.stefan@agner.ch/
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    [florian: patch arch/powerpc/include/asm/pte-common.h for 4.14.y
    removed arch/riscv/include/asm/pgtable.h which does not exist]
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4307f706a2be9008e4565d14352c771bb429f836
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Wed Nov 3 13:57:03 2021 -0700

    mm/zsmalloc: Prepare to variable MAX_PHYSMEM_BITS
    
    commit 02390b87a9459937cdb299e6b34ff33992512ec7 upstream
    
    With boot-time switching between paging mode we will have variable
    MAX_PHYSMEM_BITS.
    
    Let's use the maximum variable possible for CONFIG_X86_5LEVEL=y
    configuration to define zsmalloc data structures.
    
    The patch introduces MAX_POSSIBLE_PHYSMEM_BITS to cover such case.
    It also suits well to handle PAE special case.
    
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reviewed-by: Nitin Gupta <ngupta@vflare.org>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mm@kvack.org
    Link: http://lkml.kernel.org/r/20180214111656.88514-3-kirill.shutemov@linux.intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d6c05da808f8351db844b69a9d6ce7f295214bb
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jun 7 17:23:48 2021 +0200

    media: firewire: firedtv-avc: fix a buffer overflow in avc_ca_pmt()
    
    commit 35d2969ea3c7d32aee78066b1f3cf61a0d935a4e upstream.
    
    The bounds checking in avc_ca_pmt() is not strict enough.  It should
    be checking "read_pos + 4" because it's reading 5 bytes.  If the
    "es_info_length" is non-zero then it reads a 6th byte so there needs to
    be an additional check for that.
    
    I also added checks for the "write_pos".  I don't think these are
    required because "read_pos" and "write_pos" are tied together so
    checking one ought to be enough.  But they make the code easier to
    understand for me.  The check on write_pos is:
    
            if (write_pos + 4 >= sizeof(c->operand) - 4) {
    
    The first "+ 4" is because we're writing 5 bytes and the last " - 4"
    is to leave space for the CRC.
    
    The other problem is that "length" can be invalid.  It comes from
    "data_length" in fdtv_ca_pmt().
    
    Cc: stable@vger.kernel.org
    Reported-by: Luo Likang <luolikang@nsfocus.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61a0faa89f21861d1f8d059123b5c285a5d9ffee
Author: Ming Lei <ming.lei@redhat.com>
Date:   Fri Oct 8 13:01:18 2021 +0800

    scsi: core: Put LLD module refcnt after SCSI device is released
    
    commit f2b85040acec9a928b4eb1b57a989324e8e38d3f upstream.
    
    SCSI host release is triggered when SCSI device is freed. We have to make
    sure that the low-level device driver module won't be unloaded before SCSI
    host instance is released because shost->hostt is required in the release
    handler.
    
    Make sure to put LLD module refcnt after SCSI device is released.
    
    Fixes a kernel panic of 'BUG: unable to handle page fault for address'
    reported by Changhui and Yi.
    
    Link: https://lore.kernel.org/r/20211008050118.1440686-1-ming.lei@redhat.com
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reported-by: Changhui Zhong <czhong@redhat.com>
    Reported-by: Yi Zhang <yi.zhang@redhat.com>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
