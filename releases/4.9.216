commit 19c646f01e4ace1e5e5b3de2749de25bc86b79a1
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 11 07:53:14 2020 +0100

    Linux 4.9.216

commit a30df8fd7a9fe33268da96f2d933f22c1744fca1
Author: yangerkun <yangerkun@huawei.com>
Date:   Thu Mar 5 16:57:55 2020 +0800

    crypto: algif_skcipher - use ZERO_OR_NULL_PTR in skcipher_recvmsg_async
    
    Nowdays, we trigger a oops:
    ...
    kasan: GPF could be caused by NULL-ptr deref or user memory accessgeneral protection fault: 0000 [#1] SMP KASAN
    ...
    Call Trace:
     [<ffffffff81a26fb1>] skcipher_recvmsg_async+0x3f1/0x1400 x86/../crypto/algif_skcipher.c:543
     [<ffffffff81a28053>] skcipher_recvmsg+0x93/0x7f0 x86/../crypto/algif_skcipher.c:723
     [<ffffffff823e43a4>] sock_recvmsg_nosec x86/../net/socket.c:702 [inline]
     [<ffffffff823e43a4>] sock_recvmsg x86/../net/socket.c:710 [inline]
     [<ffffffff823e43a4>] sock_recvmsg+0x94/0xc0 x86/../net/socket.c:705
     [<ffffffff823e464b>] sock_read_iter+0x27b/0x3a0 x86/../net/socket.c:787
     [<ffffffff817f479b>] aio_run_iocb+0x21b/0x7a0 x86/../fs/aio.c:1520
     [<ffffffff817f57c9>] io_submit_one x86/../fs/aio.c:1630 [inline]
     [<ffffffff817f57c9>] do_io_submit+0x6b9/0x10b0 x86/../fs/aio.c:1688
     [<ffffffff817f902d>] SYSC_io_submit x86/../fs/aio.c:1713 [inline]
     [<ffffffff817f902d>] SyS_io_submit+0x2d/0x40 x86/../fs/aio.c:1710
     [<ffffffff828b33c3>] tracesys_phase2+0x90/0x95
    
    In skcipher_recvmsg_async, we use '!sreq->tsg' to determine does we
    calloc fail. However, kcalloc may return ZERO_SIZE_PTR, and with this,
    the latter sg_init_table will trigger the bug. Fix it be use ZERO_OF_NULL_PTR.
    
    This function was introduced with ' commit a596999b7ddf ("crypto:
    algif - change algif_skcipher to be asynchronous")', and has been removed
    with 'commit e870456d8e7c ("crypto: algif_skcipher - overhaul memory
    management")'.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4afa0856f0c94c6b6cd5d8c5e8554e460e5a9f75
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Feb 19 10:25:45 2020 -0500

    dm cache: fix a crash due to incorrect work item cancelling
    
    commit 7cdf6a0aae1cccf5167f3f04ecddcf648b78e289 upstream.
    
    The crash can be reproduced by running the lvm2 testsuite test
    lvconvert-thin-external-cache.sh for several minutes, e.g.:
      while :; do make check T=shell/lvconvert-thin-external-cache.sh; done
    
    The crash happens in this call chain:
    do_waker -> policy_tick -> smq_tick -> end_hotspot_period -> clear_bitset
    -> memset -> __memset -- which accesses an invalid pointer in the vmalloc
    area.
    
    The work entry on the workqueue is executed even after the bitmap was
    freed. The problem is that cancel_delayed_work doesn't wait for the
    running work item to finish, so the work item can continue running and
    re-submitting itself even after cache_postsuspend. In order to make sure
    that the work item won't be running, we must use cancel_delayed_work_sync.
    
    Also, change flush_workqueue to drain_workqueue, so that if some work item
    submits itself or another work item, we are properly waiting for both of
    them.
    
    Fixes: c6b4fcbad044 ("dm: add cache target")
    Cc: stable@vger.kernel.org # v3.9
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 728802730843fe2d76a45767564bad987e9cd3ec
Author: Desnes A. Nunes do Rosario <desnesn@linux.ibm.com>
Date:   Thu Feb 27 10:47:15 2020 -0300

    powerpc: fix hardware PMU exception bug on PowerVM compatibility mode systems
    
    commit fc37a1632d40c80c067eb1bc235139f5867a2667 upstream.
    
    PowerVM systems running compatibility mode on a few Power8 revisions are
    still vulnerable to the hardware defect that loses PMU exceptions arriving
    prior to a context switch.
    
    The software fix for this issue is enabled through the CPU_FTR_PMAO_BUG
    cpu_feature bit, nevertheless this bit also needs to be set for PowerVM
    compatibility mode systems.
    
    Fixes: 68f2f0d431d9ea4 ("powerpc: Add a cpu feature CPU_FTR_PMAO_BUG")
    Signed-off-by: Desnes A. Nunes do Rosario <desnesn@linux.ibm.com>
    Reviewed-by: Leonardo Bras <leonardo@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200227134715.9715-1-desnesn@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8d0b1a4288240fbf96cbfaa1a7784ffdd8a7c74
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Feb 17 17:40:50 2020 +0300

    dmaengine: coh901318: Fix a double lock bug in dma_tc_handle()
    
    commit 36d5d22090d13fd3a7a8c9663a711cbe6970aac8 upstream.
    
    The caller is already holding the lock so this will deadlock.
    
    Fixes: 0b58828c923e ("DMAENGINE: COH 901 318 remove irq counting")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20200217144050.3i4ymbytogod4ijn@kili.mountain
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 367a1fd259a87bf703baa025d20b8196c97be7ac
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Mar 3 13:16:08 2020 +0300

    hwmon: (adt7462) Fix an error return in ADT7462_REG_VOLT()
    
    commit 44f2f882909fedfc3a56e4b90026910456019743 upstream.
    
    This is only called from adt7462_update_device().  The caller expects it
    to return zero on error.  I fixed a similar issue earlier in commit
    a4bf06d58f21 ("hwmon: (adt7462) ADT7462_REG_VOLT_MAX() should return 0")
    but I missed this one.
    
    Fixes: c0b4e3ab0c76 ("adt7462: new hwmon driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Link: https://lore.kernel.org/r/20200303101608.kqjwfcazu2ylhi2a@kili.mountain
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ed93bd0360ebe3f1c0bd1fe991e9f2e852fbc68
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Thu Jan 16 15:18:49 2020 +0100

    ARM: imx: build v7_cpu_resume() unconditionally
    
    commit 512a928affd51c2dc631401e56ad5ee5d5dd68b6 upstream.
    
    This function is not only needed by the platform suspend code, but is also
    reused as the CPU resume function when the ARM cores can be powered down
    completely in deep idle, which is the case on i.MX6SX and i.MX6UL(L).
    
    Providing the static inline stub whenever CONFIG_SUSPEND is disabled means
    that those platforms will hang on resume from cpuidle if suspend is disabled.
    
    So there are two problems:
    
      - The static inline stub masks the linker error
      - The function is not available where needed
    
    Fix both by just building the function unconditionally, when
    CONFIG_SOC_IMX6 is enabled. The actual code is three instructions long,
    so it's arguably ok to just leave it in for all i.MX6 kernel configurations.
    
    Fixes: 05136f0897b5 ("ARM: imx: support arm power off in cpuidle for i.mx6sx")
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d4a32972c791d008bbe742bd285a43496a42379
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Fri Feb 21 15:20:26 2020 +0000

    RMDA/cm: Fix missing ib_cm_destroy_id() in ib_cm_insert_listen()
    
    commit c14dfddbd869bf0c2bafb7ef260c41d9cebbcfec upstream.
    
    The algorithm pre-allocates a cm_id since allocation cannot be done while
    holding the cm.lock spinlock, however it doesn't free it on one error
    path, leading to a memory leak.
    
    Fixes: 067b171b8679 ("IB/cm: Share listening CM IDs")
    Link: https://lore.kernel.org/r/20200221152023.GA8680@ziepe.ca
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c4fef9cfcfbebb342bdb51a4e6a1fa18050171d
Author: Bernard Metzler <bmt@zurich.ibm.com>
Date:   Mon Mar 2 19:16:14 2020 +0100

    RDMA/iwcm: Fix iwcm work deallocation
    
    commit 810dbc69087b08fd53e1cdd6c709f385bc2921ad upstream.
    
    The dealloc_work_entries() function must update the work_free_list pointer
    while freeing its entries, since potentially called again on same list. A
    second iteration of the work list caused system crash. This happens, if
    work allocation fails during cma_iw_listen() and free_cm_id() tries to
    free the list again during cleanup.
    
    Fixes: 922a8e9fb2e0 ("RDMA: iWARP Connection Manager.")
    Link: https://lore.kernel.org/r/20200302181614.17042-1-bmt@zurich.ibm.com
    Reported-by: syzbot+cb0c054eabfba4342146@syzkaller.appspotmail.com
    Signed-off-by: Bernard Metzler <bmt@zurich.ibm.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28881f90f53c61187289277ce8596db7e4e3965f
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Fri Feb 28 15:31:45 2020 +0000

    ASoC: dapm: Correct DAPM handling of active widgets during shutdown
    
    commit 9b3193089e77d3b59b045146ff1c770dd899acb1 upstream.
    
    commit c2caa4da46a4 ("ASoC: Fix widget powerdown on shutdown") added a
    set of the power state during snd_soc_dapm_shutdown to ensure the
    widgets powered off. However, when commit 39eb5fd13dff
    ("ASoC: dapm: Delay w->power update until the changes are written")
    added the new_power member of the widget structure, to differentiate
    between the current power state and the target power state, it did not
    update the shutdown to use the new_power member.
    
    As new_power has not updated it will be left in the state set by the
    last DAPM sequence, ie. 1 for active widgets. So as the DAPM sequence
    for the shutdown proceeds it will turn the widgets on (despite them
    already being on) rather than turning them off.
    
    Fixes: 39eb5fd13dff ("ASoC: dapm: Delay w->power update until the changes are written")
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200228153145.21013-1-ckeepax@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a918c8a16f1f9a7feb77703170528619f354a6a8
Author: Matthias Reichl <hias@horus.com>
Date:   Thu Feb 20 21:29:56 2020 +0100

    ASoC: pcm512x: Fix unbalanced regulator enable call in probe error path
    
    commit ac0a68997935c4acb92eaae5ad8982e0bb432d56 upstream.
    
    When we get a clock error during probe we have to call
    regulator_bulk_disable before bailing out, otherwise we trigger
    a warning in regulator_put.
    
    Fix this by using "goto err" like in the error cases above.
    
    Fixes: 5a3af1293194d ("ASoC: pcm512x: Add PCM512x driver")
    Signed-off-by: Matthias Reichl <hias@horus.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200220202956.29233-1-hias@horus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ba52d08b86eaf8bc231e9c9aada9205777a3665
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Feb 18 12:17:37 2020 +0100

    ASoC: pcm: Fix possible buffer overflow in dpcm state sysfs output
    
    commit 6c89ffea60aa3b2a33ae7987de1e84bfb89e4c9e upstream.
    
    dpcm_show_state() invokes multiple snprintf() calls to concatenate
    formatted strings on the fixed size buffer.  The usage of snprintf()
    is supposed for avoiding the buffer overflow, but it doesn't work as
    expected because snprintf() doesn't return the actual output size but
    the size to be written.
    
    Fix this bug by replacing all snprintf() calls with scnprintf()
    calls.
    
    Fixes: f86dcef87b77 ("ASoC: dpcm: Add debugFS support for DPCM")
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Acked-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20200218111737.14193-4-tiwai@suse.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8da2859e80e61836341676525e160019b8874b9
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Sun Jan 26 21:49:50 2020 +0200

    ARM: dts: ls1021a: Restore MDIO compatible to gianfar
    
    commit 7155c44624d061692b4c13aa8343f119c67d4fc0 upstream.
    
    The difference between "fsl,etsec2-mdio" and "gianfar" has to do with
    the .get_tbipa function, which calculates the address of the TBIPA
    register automatically, if not explicitly specified. [ see
    drivers/net/ethernet/freescale/fsl_pq_mdio.c ]. On LS1021A, the TBIPA
    register is at offset 0x30 within the port register block, which is what
    the "gianfar" method of calculating addresses actually does.
    
    Luckily, the bad "compatible" is inconsequential for ls1021a.dtsi,
    because the TBIPA register is explicitly specified via the second "reg"
    (<0x0 0x2d10030 0x0 0x4>), so the "get_tbipa" function is dead code.
    Nonetheless it's good to restore it to its correct value.
    
    Background discussion:
    https://www.spinics.net/lists/stable/msg361156.html
    
    Fixes: c7861adbe37f ("ARM: dts: ls1021: Fix SGMII PCS link remaining down after PHY disconnect")
    Reported-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40db8f468fe0895daf042f3f718c6034d02b5ca6
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Feb 9 19:33:39 2020 +0300

    dmaengine: tegra-apb: Prevent race conditions of tasklet vs free list
    
    commit c33ee1301c393a241d6424e36eff1071811b1064 upstream.
    
    The interrupt handler puts a half-completed DMA descriptor on a free list
    and then schedules tasklet to process bottom half of the descriptor that
    executes client's callback, this creates possibility to pick up the busy
    descriptor from the free list. Thus, let's disallow descriptor's re-use
    until it is fully processed.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200209163356.6439-3-digetx@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d764b388b1aa5192f722b181ddf5ae8b0cc39d54
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Feb 9 19:33:38 2020 +0300

    dmaengine: tegra-apb: Fix use-after-free
    
    commit 94788af4ed039476ff3527b0e6a12c1dc42cb022 upstream.
    
    I was doing some experiments with I2C and noticed that Tegra APB DMA
    driver crashes sometime after I2C DMA transfer termination. The crash
    happens because tegra_dma_terminate_all() bails out immediately if pending
    list is empty, and thus, it doesn't release the half-completed descriptors
    which are getting re-used before ISR tasklet kicks-in.
    
     tegra-i2c 7000c400.i2c: DMA transfer timeout
     elants_i2c 0-0010: elants_i2c_irq: failed to read data: -110
     ------------[ cut here ]------------
     WARNING: CPU: 0 PID: 142 at lib/list_debug.c:45 __list_del_entry_valid+0x45/0xac
     list_del corruption, ddbaac44->next is LIST_POISON1 (00000100)
     Modules linked in:
     CPU: 0 PID: 142 Comm: kworker/0:2 Not tainted 5.5.0-rc2-next-20191220-00175-gc3605715758d-dirty #538
     Hardware name: NVIDIA Tegra SoC (Flattened Device Tree)
     Workqueue: events_freezable_power_ thermal_zone_device_check
     [<c010e5c5>] (unwind_backtrace) from [<c010a1c5>] (show_stack+0x11/0x14)
     [<c010a1c5>] (show_stack) from [<c0973925>] (dump_stack+0x85/0x94)
     [<c0973925>] (dump_stack) from [<c011f529>] (__warn+0xc1/0xc4)
     [<c011f529>] (__warn) from [<c011f7e9>] (warn_slowpath_fmt+0x61/0x78)
     [<c011f7e9>] (warn_slowpath_fmt) from [<c042497d>] (__list_del_entry_valid+0x45/0xac)
     [<c042497d>] (__list_del_entry_valid) from [<c047a87f>] (tegra_dma_tasklet+0x5b/0x154)
     [<c047a87f>] (tegra_dma_tasklet) from [<c0124799>] (tasklet_action_common.constprop.0+0x41/0x7c)
     [<c0124799>] (tasklet_action_common.constprop.0) from [<c01022ab>] (__do_softirq+0xd3/0x2a8)
     [<c01022ab>] (__do_softirq) from [<c0124683>] (irq_exit+0x7b/0x98)
     [<c0124683>] (irq_exit) from [<c0168c19>] (__handle_domain_irq+0x45/0x80)
     [<c0168c19>] (__handle_domain_irq) from [<c043e429>] (gic_handle_irq+0x45/0x7c)
     [<c043e429>] (gic_handle_irq) from [<c0101aa5>] (__irq_svc+0x65/0x94)
     Exception stack(0xde2ebb90 to 0xde2ebbd8)
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200209163356.6439-2-digetx@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8305780a3e1aeb3123a38daababdbd5294efeddd
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Feb 26 15:16:15 2020 -0800

    x86/pkeys: Manually set X86_FEATURE_OSPKE to preserve existing changes
    
    commit 735a6dd02222d8d070c7bb748f25895239ca8c92 upstream.
    
    Explicitly set X86_FEATURE_OSPKE via set_cpu_cap() instead of calling
    get_cpu_cap() to pull the feature bit from CPUID after enabling CR4.PKE.
    Invoking get_cpu_cap() effectively wipes out any {set,clear}_cpu_cap()
    changes that were made between this_cpu->c_init() and setup_pku(), as
    all non-synthetic feature words are reinitialized from the CPU's CPUID
    values.
    
    Blasting away capability updates manifests most visibility when running
    on a VMX capable CPU, but with VMX disabled by BIOS.  To indicate that
    VMX is disabled, init_ia32_feat_ctl() clears X86_FEATURE_VMX, using
    clear_cpu_cap() instead of setup_clear_cpu_cap() so that KVM can report
    which CPU is misconfigured (KVM needs to probe every CPU anyways).
    Restoring X86_FEATURE_VMX from CPUID causes KVM to think VMX is enabled,
    ultimately leading to an unexpected #GP when KVM attempts to do VMXON.
    
    Arguably, init_ia32_feat_ctl() should use setup_clear_cpu_cap() and let
    KVM figure out a different way to report the misconfigured CPU, but VMX
    is not the only feature bit that is affected, i.e. there is precedent
    that tweaking feature bits via {set,clear}_cpu_cap() after ->c_init()
    is expected to work.  Most notably, x86_init_rdrand()'s clearing of
    X86_FEATURE_RDRAND when RDRAND malfunctions is also overwritten.
    
    Fixes: 0697694564c8 ("x86/mm/pkeys: Actually enable Memory Protection Keys in the CPU")
    Reported-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Tested-by: Jacob Keller <jacob.e.keller@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200226231615.13664-1-sean.j.christopherson@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5be0e24ffc7f5783a3864b5b958088ed15be9e8
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Feb 28 12:54:06 2020 +0100

    vt: selection, push sel_lock up
    
    commit e8c75a30a23c6ba63f4ef6895cbf41fd42f21aa2 upstream.
    
    sel_lock cannot nest in the console lock. Thanks to syzkaller, the
    kernel states firmly:
    
    > WARNING: possible circular locking dependency detected
    > 5.6.0-rc3-syzkaller #0 Not tainted
    > ------------------------------------------------------
    > syz-executor.4/20336 is trying to acquire lock:
    > ffff8880a2e952a0 (&tty->termios_rwsem){++++}, at: tty_unthrottle+0x22/0x100 drivers/tty/tty_ioctl.c:136
    >
    > but task is already holding lock:
    > ffffffff89462e70 (sel_lock){+.+.}, at: paste_selection+0x118/0x470 drivers/tty/vt/selection.c:374
    >
    > which lock already depends on the new lock.
    >
    > the existing dependency chain (in reverse order) is:
    >
    > -> #2 (sel_lock){+.+.}:
    >        mutex_lock_nested+0x1b/0x30 kernel/locking/mutex.c:1118
    >        set_selection_kernel+0x3b8/0x18a0 drivers/tty/vt/selection.c:217
    >        set_selection_user+0x63/0x80 drivers/tty/vt/selection.c:181
    >        tioclinux+0x103/0x530 drivers/tty/vt/vt.c:3050
    >        vt_ioctl+0x3f1/0x3a30 drivers/tty/vt/vt_ioctl.c:364
    
    This is ioctl(TIOCL_SETSEL).
    Locks held on the path: console_lock -> sel_lock
    
    > -> #1 (console_lock){+.+.}:
    >        console_lock+0x46/0x70 kernel/printk/printk.c:2289
    >        con_flush_chars+0x50/0x650 drivers/tty/vt/vt.c:3223
    >        n_tty_write+0xeae/0x1200 drivers/tty/n_tty.c:2350
    >        do_tty_write drivers/tty/tty_io.c:962 [inline]
    >        tty_write+0x5a1/0x950 drivers/tty/tty_io.c:1046
    
    This is write().
    Locks held on the path: termios_rwsem -> console_lock
    
    > -> #0 (&tty->termios_rwsem){++++}:
    >        down_write+0x57/0x140 kernel/locking/rwsem.c:1534
    >        tty_unthrottle+0x22/0x100 drivers/tty/tty_ioctl.c:136
    >        mkiss_receive_buf+0x12aa/0x1340 drivers/net/hamradio/mkiss.c:902
    >        tty_ldisc_receive_buf+0x12f/0x170 drivers/tty/tty_buffer.c:465
    >        paste_selection+0x346/0x470 drivers/tty/vt/selection.c:389
    >        tioclinux+0x121/0x530 drivers/tty/vt/vt.c:3055
    >        vt_ioctl+0x3f1/0x3a30 drivers/tty/vt/vt_ioctl.c:364
    
    This is ioctl(TIOCL_PASTESEL).
    Locks held on the path: sel_lock -> termios_rwsem
    
    > other info that might help us debug this:
    >
    > Chain exists of:
    >   &tty->termios_rwsem --> console_lock --> sel_lock
    
    Clearly. From the above, we have:
     console_lock -> sel_lock
     sel_lock -> termios_rwsem
     termios_rwsem -> console_lock
    
    Fix this by reversing the console_lock -> sel_lock dependency in
    ioctl(TIOCL_SETSEL). First, lock sel_lock, then console_lock.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Reported-by: syzbot+26183d9746e62da329b8@syzkaller.appspotmail.com
    Fixes: 07e6124a1a46 ("vt: selection, close sel_buffer race")
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200228115406.5735-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccd35863147dd447110b726a0d4911ab686aade9
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Feb 28 12:54:05 2020 +0100

    vt: selection, push console lock down
    
    commit 4b70dd57a15d2f4685ac6e38056bad93e81e982f upstream.
    
    We need to nest the console lock in sel_lock, so we have to push it down
    a bit. Fortunately, the callers of set_selection_* just lock the console
    lock around the function call. So moving it down is easy.
    
    In the next patch, we switch the order.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Fixes: 07e6124a1a46 ("vt: selection, close sel_buffer race")
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200228115406.5735-1-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 290a9381ccc16131c6ccc19940589141985db6b1
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Feb 10 09:11:31 2020 +0100

    vt: selection, close sel_buffer race
    
    commit 07e6124a1a46b4b5a9b3cacc0c306b50da87abf5 upstream.
    
    syzkaller reported this UAF:
    BUG: KASAN: use-after-free in n_tty_receive_buf_common+0x2481/0x2940 drivers/tty/n_tty.c:1741
    Read of size 1 at addr ffff8880089e40e9 by task syz-executor.1/13184
    
    CPU: 0 PID: 13184 Comm: syz-executor.1 Not tainted 5.4.7 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
    ...
     kasan_report+0xe/0x20 mm/kasan/common.c:634
     n_tty_receive_buf_common+0x2481/0x2940 drivers/tty/n_tty.c:1741
     tty_ldisc_receive_buf+0xac/0x190 drivers/tty/tty_buffer.c:461
     paste_selection+0x297/0x400 drivers/tty/vt/selection.c:372
     tioclinux+0x20d/0x4e0 drivers/tty/vt/vt.c:3044
     vt_ioctl+0x1bcf/0x28d0 drivers/tty/vt/vt_ioctl.c:364
     tty_ioctl+0x525/0x15a0 drivers/tty/tty_io.c:2657
     vfs_ioctl fs/ioctl.c:47 [inline]
    
    It is due to a race between parallel paste_selection (TIOCL_PASTESEL)
    and set_selection_user (TIOCL_SETSEL) invocations. One uses sel_buffer,
    while the other frees it and reallocates a new one for another
    selection. Add a mutex to close this race.
    
    The mutex takes care properly of sel_buffer and sel_buffer_lth only. The
    other selection global variables (like sel_start, sel_end, and sel_cons)
    are protected only in set_selection_user. The other functions need quite
    some more work to close the races of the variables there. This is going
    to happen later.
    
    This likely fixes (I am unsure as there is no reproducer provided) bug
    206361 too. It was marked as CVE-2020-8648.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Reported-by: syzbot+59997e8d5cbdc486e6f6@syzkaller.appspotmail.com
    References: https://bugzilla.kernel.org/show_bug.cgi?id=206361
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200210081131.23572-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91747d2468eda8049971dc773ce89d3cc692f847
Author: tangbin <tangbin@cmss.chinamobile.com>
Date:   Thu Mar 5 09:38:23 2020 +0800

    tty:serial:mvebu-uart:fix a wrong return
    
    commit 4a3e208474204e879d22a310b244cb2f39e5b1f8 upstream.
    
    in this place, the function should return a
    negative value and the PTR_ERR already returns
    a negative,so return -PTR_ERR() is wrong.
    
    Signed-off-by: tangbin <tangbin@cmss.chinamobile.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20200305013823.20976-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efca312804f82001903d5f44d3765a482b211e14
Author: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
Date:   Thu Mar 5 22:28:36 2020 -0800

    fat: fix uninit-memory access for partial initialized inode
    
    commit bc87302a093f0eab45cd4e250c2021299f712ec6 upstream.
    
    When get an error in the middle of reading an inode, some fields in the
    inode might be still not initialized.  And then the evict_inode path may
    access those fields via iput().
    
    To fix, this makes sure that inode fields are initialized.
    
    Reported-by: syzbot+9d82b8de2992579da5d0@syzkaller.appspotmail.com
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/871rqnreqx.fsf@mail.parknet.co.jp
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f04adb4d691ed703b1fbc55d99f622b96cedecc
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Wed Mar 4 10:24:29 2020 +0800

    vgacon: Fix a UAF in vgacon_invert_region
    
    commit 513dc792d6060d5ef572e43852683097a8420f56 upstream.
    
    When syzkaller tests, there is a UAF:
      BUG: KASan: use after free in vgacon_invert_region+0x9d/0x110 at addr
        ffff880000100000
      Read of size 2 by task syz-executor.1/16489
      page:ffffea0000004000 count:0 mapcount:-127 mapping:          (null)
      index:0x0
      page flags: 0xfffff00000000()
      page dumped because: kasan: bad access detected
      CPU: 1 PID: 16489 Comm: syz-executor.1 Not tainted
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
      rel-1.9.3-0-ge2fc41e-prebuilt.qemu-project.org 04/01/2014
      Call Trace:
        [<ffffffffb119f309>] dump_stack+0x1e/0x20
        [<ffffffffb04af957>] kasan_report+0x577/0x950
        [<ffffffffb04ae652>] __asan_load2+0x62/0x80
        [<ffffffffb090f26d>] vgacon_invert_region+0x9d/0x110
        [<ffffffffb0a39d95>] invert_screen+0xe5/0x470
        [<ffffffffb0a21dcb>] set_selection+0x44b/0x12f0
        [<ffffffffb0a3bfae>] tioclinux+0xee/0x490
        [<ffffffffb0a1d114>] vt_ioctl+0xff4/0x2670
        [<ffffffffb0a0089a>] tty_ioctl+0x46a/0x1a10
        [<ffffffffb052db3d>] do_vfs_ioctl+0x5bd/0xc40
        [<ffffffffb052e2f2>] SyS_ioctl+0x132/0x170
        [<ffffffffb11c9b1b>] system_call_fastpath+0x22/0x27
        Memory state around the buggy address:
         ffff8800000fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00
         00 00
         ffff8800000fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00
         00 00 00
        >ffff880000100000: ff ff ff ff ff ff ff ff ff ff ff ff ff
         ff ff ff
    
    It can be reproduce in the linux mainline by the program:
      #include <stdio.h>
      #include <stdlib.h>
      #include <unistd.h>
      #include <fcntl.h>
      #include <sys/types.h>
      #include <sys/stat.h>
      #include <sys/ioctl.h>
      #include <linux/vt.h>
    
      struct tiocl_selection {
        unsigned short xs;      /* X start */
        unsigned short ys;      /* Y start */
        unsigned short xe;      /* X end */
        unsigned short ye;      /* Y end */
        unsigned short sel_mode; /* selection mode */
      };
    
      #define TIOCL_SETSEL    2
      struct tiocl {
        unsigned char type;
        unsigned char pad;
        struct tiocl_selection sel;
      };
    
      int main()
      {
        int fd = 0;
        const char *dev = "/dev/char/4:1";
    
        struct vt_consize v = {0};
        struct tiocl tioc = {0};
    
        fd = open(dev, O_RDWR, 0);
    
        v.v_rows = 3346;
        ioctl(fd, VT_RESIZEX, &v);
    
        tioc.type = TIOCL_SETSEL;
        ioctl(fd, TIOCLINUX, &tioc);
    
        return 0;
      }
    
    When resize the screen, update the 'vc->vc_size_row' to the new_row_size,
    but when 'set_origin' in 'vgacon_set_origin', vgacon use 'vga_vram_base'
    for 'vc_origin' and 'vc_visible_origin', not 'vc_screenbuf'. It maybe
    smaller than 'vc_screenbuf'. When TIOCLINUX, use the new_row_size to calc
    the offset, it maybe larger than the vga_vram_size in vgacon driver, then
    bad access.
    Also, if set an larger screenbuf firstly, then set an more larger
    screenbuf, when copy old_origin to new_origin, a bad access may happen.
    
    So, If the screen size larger than vga_vram, resize screen should be
    failed. This alse fix CVE-2020-8649 and CVE-2020-8647.
    
    Linus pointed out that overflow checking seems absent. We're saved by
    the existing bounds checks in vc_do_resize() with rather strict
    limits:
    
            if (cols > VC_RESIZE_MAXCOL || lines > VC_RESIZE_MAXROW)
                    return -EINVAL;
    
    Fixes: 0aec4867dca14 ("[PATCH] SVGATextMode fix")
    Reference: CVE-2020-8647 and CVE-2020-8649
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    [danvet: augment commit message to point out overflow safety]
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200304022429.37738-1-zhangxiaoxu5@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 480dc952d20a7c6d23a602fdae33a7e1b7812fa7
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Wed Feb 26 18:50:36 2020 +0100

    usb: core: port: do error out if usb_autopm_get_interface() fails
    
    commit 1f8b39bc99a31759e97a0428a5c3f64802c1e61d upstream.
    
    Reviewing a fresh portion of coverity defects in USB core
    (specifically CID 1458999), Alan Stern noted below in [1]:
    
    On Tue, Feb 25, 2020 at 02:39:23PM -0500, Alan Stern wrote:
     > A revised search finds line 997 in drivers/usb/core/hub.c and lines
     > 216, 269 in drivers/usb/core/port.c.  (I didn't try looking in any
     > other directories.)  AFAICT all three of these should check the
     > return value, although a error message in the kernel log probably
     > isn't needed.
    
    Factor out the usb_port_runtime_{resume,suspend}() changes into a
    standalone patch to allow conflict-free porting on top of stable v3.9+.
    
    [1] https://lore.kernel.org/lkml/Pine.LNX.4.44L0.2002251419120.1485-100000@iolanthe.rowland.org
    
    Fixes: 971fcd492cebf5 ("usb: add runtime pm support for usb port device")
    Cc: stable@vger.kernel.org # v3.9+
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200226175036.14946-3-erosca@de.adit-jv.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efccc9c0f73e7110fcf9f2a1c66bd35a783613cb
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Wed Feb 26 18:50:35 2020 +0100

    usb: core: hub: do error out if usb_autopm_get_interface() fails
    
    commit 60e3f6e4ac5b0fda43dad01c32e09409ec710045 upstream.
    
    Reviewing a fresh portion of coverity defects in USB core
    (specifically CID 1458999), Alan Stern noted below in [1]:
    
    On Tue, Feb 25, 2020 at 02:39:23PM -0500, Alan Stern wrote:
     > A revised search finds line 997 in drivers/usb/core/hub.c and lines
     > 216, 269 in drivers/usb/core/port.c.  (I didn't try looking in any
     > other directories.)  AFAICT all three of these should check the
     > return value, although a error message in the kernel log probably
     > isn't needed.
    
    Factor out the usb_remove_device() change into a standalone patch to
    allow conflict-free integration on top of the earliest stable branches.
    
    [1] https://lore.kernel.org/lkml/Pine.LNX.4.44L0.2002251419120.1485-100000@iolanthe.rowland.org
    
    Fixes: 253e05724f9230 ("USB: add a "remove hardware" sysfs attribute")
    Cc: stable@vger.kernel.org # v2.6.33+
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200226175036.14946-2-erosca@de.adit-jv.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b90e297c21276841f7af2bd8ebb4c73e9b2538c
Author: Dan Lazewatsky <dlaz@chromium.org>
Date:   Wed Feb 26 14:34:38 2020 +0000

    usb: quirks: add NO_LPM quirk for Logitech Screen Share
    
    commit b96ed52d781a2026d0c0daa5787c6f3d45415862 upstream.
    
    LPM on the device appears to cause xHCI host controllers to claim
    that there isn't enough bandwidth to support additional devices.
    
    Signed-off-by: Dan Lazewatsky <dlaz@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.com>
    Link: https://lore.kernel.org/r/20200226143438.1445-1-gustavo.padovan@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0106c6b7c7aa476f7ee7a36197d160447ae87261
Author: Jim Lin <jilin@nvidia.com>
Date:   Mon Mar 2 22:21:35 2020 +0800

    usb: storage: Add quirk for Samsung Fit flash
    
    commit 86d92f5465958752481269348d474414dccb1552 upstream.
    
    Current driver has 240 (USB2.0) and 2048 (USB3.0) as max_sectors,
    e.g., /sys/bus/scsi/devices/0:0:0:0/max_sectors
    
    If data access times out, driver error handling will issue a port
    reset.
    Sometimes Samsung Fit (090C:1000) flash disk will not respond to
    later Set Address or Get Descriptor command.
    
    Adding this quirk to limit max_sectors to 64 sectors to avoid issue
    occurring.
    
    Signed-off-by: Jim Lin <jilin@nvidia.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1583158895-31342-1-git-send-email-jilin@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c089287cecad0d10791fd849b185293f22182f7
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Feb 19 06:01:03 2020 +1000

    cifs: don't leak -EAGAIN for stat() during reconnect
    
    commit fc513fac56e1b626ae48a74d7551d9c35c50129e upstream.
    
    If from cifs_revalidate_dentry_attr() the SMB2/QUERY_INFO call fails with an
    error, such as STATUS_SESSION_EXPIRED, causing the session to be reconnected
    it is possible we will leak -EAGAIN back to the application even for
    system calls such as stat() where this is not a valid error.
    
    Fix this by re-trying the operation from within cifs_revalidate_dentry_attr()
    if cifs_get_inode_info*() returns -EAGAIN.
    
    This fixes stat() and possibly also other system calls that uses
    cifs_revalidate_dentry*().
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfbd8af0ad0cd3f7159fadd8e4302bcd449feee7
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Jan 24 08:48:55 2020 +0300

    s390/cio: cio_ignore_proc_seq_next should increase position index
    
    [ Upstream commit 8b101a5e14f2161869636ff9cb4907b7749dc0c2 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Link: https://lore.kernel.org/r/d44c53a7-9bc1-15c7-6d4a-0c10cb9dffce@virtuozzo.com
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d430867c2df0250bfa4ff260ae9687982c7b1f93
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Mon Jan 20 10:17:29 2020 +0100

    watchdog: da9062: do not ping the hw during stop()
    
    [ Upstream commit e9a0e65eda3f78d0b04ec6136c591c000cbc3b76 ]
    
    The da9062 hw has a minimum ping cool down phase of at least 200ms. The
    driver takes that into account by setting the min_hw_heartbeat_ms to
    300ms and the core guarantees that the hw limit is observed for the
    ping() calls. But the core can't guarantee the required minimum ping
    cool down phase if a stop() command is send immediately after the ping()
    command. So it is not allowed to ping the watchdog within the stop()
    command as the driver does. Remove the ping can be done without doubts
    because the watchdog gets disabled anyway and a (re)start resets the
    watchdog counter too.
    
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200120091729.16256-1-m.felsch@pengutronix.de
    [groeck: Updated description]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75a526e91b83ed70f83a774fbae63a20e020a5ad
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 15 17:54:19 2020 +0100

    net: ks8851-ml: Fix 16-bit IO operation
    
    [ Upstream commit 58292104832fef6cb4a89f736012c0e0724c3442 ]
    
    The Micrel KSZ8851-16MLLI datasheet DS00002357B page 12 states that
    BE[3:0] signals are active high. This contradicts the measurements
    of the behavior of the actual chip, where these signals behave as
    active low. For example, to read the CIDER register, the bus must
    expose 0xc0c0 during the address phase, which means BE[3:0]=4'b1100.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Petr Stetiar <ynezz@true.cz>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af23cdf4a49c6264d48db9cb83e52fd807b16591
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 15 17:54:18 2020 +0100

    net: ks8851-ml: Fix 16-bit data access
    
    [ Upstream commit edacb098ea9c31589276152f09b4439052c0f2b1 ]
    
    The packet data written to and read from Micrel KSZ8851-16MLLI must be
    byte-swapped in 16-bit mode, add this byte-swapping.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Petr Stetiar <ynezz@true.cz>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2db02153e99bdd65ca0e3734d23921ec8d3612ed
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 15 17:54:17 2020 +0100

    net: ks8851-ml: Remove 8-bit bus accessors
    
    [ Upstream commit 69233bba6543a37755158ca3382765387b8078df ]
    
    This driver is mixing 8-bit and 16-bit bus accessors for reasons unknown,
    however the speculation is that this was some sort of attempt to support
    the 8-bit bus mode.
    
    As per the KS8851-16MLL documentation, all two registers accessed via the
    8-bit accessors are internally 16-bit registers, so reading them using
    16-bit accessors is fine. The KS_CCR read can be converted to 16-bit read
    outright, as it is already a concatenation of two 8-bit reads of that
    register. The KS_RXQCR accesses are 8-bit only, however writing the top
    8 bits of the register is OK as well, since the driver caches the entire
    16-bit register value anyway.
    
    Finally, the driver is not used by any hardware in the kernel right now.
    The only hardware available to me is one with 16-bit bus, so I have no
    way to test the 8-bit bus mode, however it is unlikely this ever really
    worked anyway. If the 8-bit bus mode is ever required, it can be easily
    added by adjusting the 16-bit accessors to do 2 consecutive accesses,
    which is how this should have been done from the beginning.
    
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Petr Stetiar <ynezz@true.cz>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2febe5789d24ba0a7ba4e7a7244721f58b272349
Author: Harigovindan P <harigovi@codeaurora.org>
Date:   Thu Feb 6 14:26:15 2020 +0530

    drm/msm/dsi: save pll state before dsi host is powered off
    
    [ Upstream commit a1028dcfd0dd97884072288d0c8ed7f30399b528 ]
    
    Save pll state before dsi host is powered off. Without this change
    some register values gets resetted.
    
    Signed-off-by: Harigovindan P <harigovi@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1dc13168b6282b83dd176838bff3cb321e695801
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Jan 29 20:12:44 2020 +0000

    drm: msm: Fix return type of dsi_mgr_connector_mode_valid for kCFI
    
    [ Upstream commit 7fd2dfc3694922eb7ace4801b7208cf9f62ebc7d ]
    
    I was hitting kCFI crashes when building with clang, and after
    some digging finally narrowed it down to the
    dsi_mgr_connector_mode_valid() function being implemented as
    returning an int, instead of an enum drm_mode_status.
    
    This patch fixes it, and appeases the opaque word of the kCFI
    gods (seriously, clang inlining everything makes the kCFI
    backtraces only really rough estimates of where things went
    wrong).
    
    Thanks as always to Sami for his help narrowing this down.
    
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: Sami Tolvanen <samitolvanen@google.com>
    Cc: Todd Kjos <tkjos@google.com>
    Cc: Alistair Delva <adelva@google.com>
    Cc: Amit Pundir <amit.pundir@linaro.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: freedreno@lists.freedesktop.org
    Cc: clang-built-linux@googlegroups.com
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd75e3d87256f42cdcc65c2d51a6a106dc721729
Author: Sergey Organov <sorganov@gmail.com>
Date:   Wed Jan 29 14:21:46 2020 +0300

    usb: gadget: serial: fix Tx stall after buffer overflow
    
    [ Upstream commit e4bfded56cf39b8d02733c1e6ef546b97961e18a ]
    
    Symptom: application opens /dev/ttyGS0 and starts sending (writing) to
    it while either USB cable is not connected, or nobody listens on the
    other side of the cable. If driver circular buffer overflows before
    connection is established, no data will be written to the USB layer
    until/unless /dev/ttyGS0 is closed and re-opened again by the
    application (the latter besides having no means of being notified about
    the event of establishing of the connection.)
    
    Fix: on open and/or connect, kick Tx to flush circular buffer data to
    USB layer.
    
    Signed-off-by: Sergey Organov <sorganov@gmail.com>
    Reviewed-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0db53e7241446b58f6fd868287e9b128eeced21
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Thu Jan 16 15:29:01 2020 +0200

    usb: gadget: ffs: ffs_aio_cancel(): Save/restore IRQ flags
    
    [ Upstream commit 43d565727a3a6fd24e37c7c2116475106af71806 ]
    
    ffs_aio_cancel() can be called from both interrupt and thread context. Make
    sure that the current IRQ state is saved and restored by using
    spin_{un,}lock_irq{save,restore}().
    
    Otherwise undefined behavior might occur.
    
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6596754b90c5bc4ec33c2d68bf95ecabf5167b16
Author: Jack Pham <jackp@codeaurora.org>
Date:   Thu Jan 30 19:10:36 2020 -0800

    usb: gadget: composite: Support more than 500mA MaxPower
    
    [ Upstream commit a2035411fa1d1206cea7d5dfe833e78481844a76 ]
    
    USB 3.x SuperSpeed peripherals can draw up to 900mA of VBUS power
    when in configured state. However, if a configuration wanting to
    take advantage of this is added with MaxPower greater than 500
    (currently possible if using a ConfigFS gadget) the composite
    driver fails to accommodate this for a couple reasons:
    
     - usb_gadget_vbus_draw() when called from set_config() and
       composite_resume() will be passed the MaxPower value without
       regard for the current connection speed, resulting in a
       violation for USB 2.0 since the max is 500mA.
    
     - the bMaxPower of the configuration descriptor would be
       incorrectly encoded, again if the connection speed is only
       at USB 2.0 or below, likely wrapping around U8_MAX since
       the 2mA multiplier corresponds to a maximum of 510mA.
    
    Fix these by adding checks against the current gadget->speed
    when the c->MaxPower value is used (set_config() and
    composite_resume()) and appropriately limit based on whether
    it is currently at a low-/full-/high- or super-speed connection.
    
    Because 900 is not divisible by 8, with the round-up division
    currently used in encode_bMaxPower() a MaxPower of 900mA will
    result in an encoded value of 0x71. When a host stack (including
    Linux and Windows) enumerates this on a single port root hub, it
    reads this value back and decodes (multiplies by 8) to get 904mA
    which is strictly greater than 900mA that is typically budgeted
    for that port, causing it to reject the configuration. Instead,
    we should be using the round-down behavior of normal integral
    division so that 900 / 8 -> 0x70 or 896mA to stay within range.
    And we might as well change it for the high/full/low case as well
    for consistency.
    
    N.B. USB 3.2 Gen N x 2 allows for up to 1500mA but there doesn't
    seem to be any any peripheral controller supported by Linux that
    does two lane operation, so for now keeping the clamp at 900
    should be fine.
    
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab52ebab35c1cf90539e3e86e14e25472fc78e58
Author: Daniel Golle <daniel@makrotopia.org>
Date:   Fri Feb 7 11:53:35 2020 +0200

    serial: ar933x_uart: set UART_CS_{RX,TX}_READY_ORIDE
    
    [ Upstream commit 87c5cbf71ecbb9e289d60a2df22eb686c70bf196 ]
    
    On AR934x this UART is usually not initialized by the bootloader
    as it is only used as a secondary serial port while the primary
    UART is a newly introduced NS16550-compatible.
    In order to make use of the ar933x-uart on AR934x without RTS/CTS
    hardware flow control, one needs to set the
    UART_CS_{RX,TX}_READY_ORIDE bits as other than on AR933x where this
    UART is used as primary/console, the bootloader on AR934x typically
    doesn't set those bits.
    Setting them explicitely on AR933x should not do any harm, so just
    set them unconditionally.
    
    Tested-by: Chuanhong Guo <gch981213@gmail.com>
    Signed-off-by: Daniel Golle <daniel@makrotopia.org>
    Link: https://lore.kernel.org/r/20200207095335.GA179836@makrotopia.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f574e92e4474f1b33425c4ee9ba48cd4fbe7d75
Author: Eugenio Pérez <eperezma@redhat.com>
Date:   Thu Mar 5 17:30:05 2020 +0100

    vhost: Check docket sk_family instead of call getname
    
    [ Upstream commit 42d84c8490f9f0931786f1623191fcab397c3d64 ]
    
    Doing so, we save one call to get data we already have in the struct.
    
    Also, since there is no guarantee that getname use sockaddr_ll
    parameter beyond its size, we add a little bit of security here.
    It should do not do beyond MAX_ADDR_LEN, but syzbot found that
    ax25_getname writes more (72 bytes, the size of full_sockaddr_ax25,
    versus 20 + 32 bytes of sockaddr_ll + MAX_ADDR_LEN in syzbot repro).
    
    Fixes: 3a4d5c94e9593 ("vhost_net: a kernel-level virtio server")
    Reported-by: syzbot+f2a62d07a5198c819c7b@syzkaller.appspotmail.com
    Signed-off-by: Eugenio Pérez <eperezma@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eef128dd4dcdb96b3ca0ae64ad9f752008066844
Author: Paul Moore <paul@paul-moore.com>
Date:   Mon Feb 24 16:38:57 2020 -0500

    audit: always check the netlink payload length in audit_receive_msg()
    
    [ Upstream commit 756125289285f6e55a03861bf4b6257aa3d19a93 ]
    
    This patch ensures that we always check the netlink payload length
    in audit_receive_msg() before we take any action on the payload
    itself.
    
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+399c44bf1f43b8747403@syzkaller.appspotmail.com
    Reported-by: syzbot+e4b12d8d202701f08b6d@syzkaller.appspotmail.com
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b259672e3ae1699b3b91423505afa19ebd98c59d
Author: Wei Yang <richardw.yang@linux.intel.com>
Date:   Thu Jan 30 22:14:29 2020 -0800

    mm/huge_memory.c: use head to check huge zero page
    
    commit cb829624867b5ab10bc6a7036d183b1b82bfe9f8 upstream.
    
    The page could be a tail page, if this is the case, this BUG_ON will
    never be triggered.
    
    Link: http://lkml.kernel.org/r/20200110032610.26499-1-richardw.yang@linux.intel.com
    Fixes: e9b61f19858a ("thp: reintroduce split_huge_page()")
    
    Signed-off-by: Wei Yang <richardw.yang@linux.intel.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c628c4674d5912946aa2af6f68dcab52a9de49cd
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon Dec 16 13:22:33 2019 -0300

    perf hists browser: Restore ESC as "Zoom out" of DSO/thread/etc
    
    commit 3f7774033e6820d25beee5cf7aefa11d4968b951 upstream.
    
    We need to set actions->ms.map since 599a2f38a989 ("perf hists browser:
    Check sort keys before hot key actions"), as in that patch we bail out
    if map is NULL.
    
    Reviewed-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Fixes: 599a2f38a989 ("perf hists browser: Check sort keys before hot key actions")
    Link: https://lkml.kernel.org/n/tip-wp1ssoewy6zihwwexqpohv0j@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd34f48c2e93493c420ad6c80b792c580e6e2dd0
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Jan 26 11:44:29 2020 +0100

    drivers: net: xgene: Fix the order of the arguments of 'alloc_etherdev_mqs()'
    
    commit 5a44c71ccda60a50073c5d7fe3f694cdfa3ab0c2 upstream.
    
    'alloc_etherdev_mqs()' expects first 'tx', then 'rx'. The semantic here
    looks reversed.
    
    Reorder the arguments passed to 'alloc_etherdev_mqs()' in order to keep
    the correct semantic.
    
    In fact, this is a no-op because both XGENE_NUM_[RT]X_RING are 8.
    
    Fixes: 107dec2749fe ("drivers: net: xgene: Add support for multiple queues")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37f6b35b59a0922f44da8bf23c2eccbfe777d769
Author: Jason Wang <jasowang@redhat.com>
Date:   Tue May 22 14:21:04 2018 +0800

    tuntap: correctly set SOCKWQ_ASYNC_NOSPACE
    
    commit 2f3ab6221e4c87960347d65c7cab9bd917d1f637 upstream.
    
    When link is down, writes to the device might fail with
    -EIO. Userspace needs an indication when the status is resolved.  As a
    fix, tun_net_open() attempts to wake up writers - but that is only
    effective if SOCKWQ_ASYNC_NOSPACE has been set in the past. This is
    not the case of vhost_net which only poll for EPOLLOUT after it meets
    errors during sendmsg().
    
    This patch fixes this by making sure SOCKWQ_ASYNC_NOSPACE is set when
    socket is not writable or device is down to guarantee EPOLLOUT will be
    raised in either tun_chr_poll() or tun_sock_write_space() after device
    is up.
    
    Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Cc: Eric Dumazet <edumazet@google.com>
    Fixes: 1bd4978a88ac2 ("tun: honor IFF_UP in tun_get_user()")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>

commit e7fe43afa869bc5931d046707b872fdc19946bf3
Author: yangerkun <yangerkun@huawei.com>
Date:   Fri Feb 28 21:40:48 2020 +0800

    slip: stop double free sl->dev in slip_open
    
    After include 3b5a39979daf ("slip: Fix memory leak in slip_open error path")
    and e58c19124189 ("slip: Fix use-after-free Read in slip_open") with 4.4.y/4.9.y.
    We will trigger a bug since we can double free sl->dev in slip_open. Actually,
    we should backport cf124db566e6 ("net: Fix inconsistent teardown and release
    of private netdev state.") too since it has delete free_netdev from sl_free_netdev.
    Fix it by delete free_netdev from slip_open.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24d85373578acb9566852a0e094ff33e71b5a924
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Jan 9 15:56:18 2020 -0800

    KVM: Check for a bad hva before dropping into the ghc slow path
    
    commit fcfbc617547fc6d9552cb6c1c563b6a90ee98085 upstream.
    
    When reading/writing using the guest/host cache, check for a bad hva
    before checking for a NULL memslot, which triggers the slow path for
    handing cross-page accesses.  Because the memslot is nullified on error
    by __kvm_gfn_to_hva_cache_init(), if the bad hva is encountered after
    crossing into a new page, then the kvm_{read,write}_guest() slow path
    could potentially write/access the first chunk prior to detecting the
    bad hva.
    
    Arguably, performing a partial access is semantically correct from an
    architectural perspective, but that behavior is certainly not intended.
    In the original implementation, memslot was not explicitly nullified
    and therefore the partial access behavior varied based on whether the
    memslot itself was null, or if the hva was simply bad.  The current
    behavior was introduced as a seemingly unintentional side effect in
    commit f1b9dd5eb86c ("kvm: Disallow wraparound in
    kvm_gfn_to_hva_cache_init"), which justified the change with "since some
    callers don't check the return code from this function, it sit seems
    prudent to clear ghc->memslot in the event of an error".
    
    Regardless of intent, the partial access is dependent on _not_ checking
    the result of the cache initialization, which is arguably a bug in its
    own right, at best simply weird.
    
    Fixes: 8f964525a121 ("KVM: Allow cross page reads and writes from cached translations.")
    Cc: Jim Mattson <jmattson@google.com>
    Cc: Andrew Honig <ahonig@google.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2739e5a9a41f75ea2e3793c1fbe328ae0c9d714e
Author: Aleksa Sarai <cyphar@cyphar.com>
Date:   Sat Dec 7 01:13:26 2019 +1100

    namei: only return -ECHILD from follow_dotdot_rcu()
    
    commit 2b98149c2377bff12be5dd3ce02ae0506e2dd613 upstream.
    
    It's over-zealous to return hard errors under RCU-walk here, given that
    a REF-walk will be triggered for all other cases handling ".." under
    RCU.
    
    The original purpose of this check was to ensure that if a rename occurs
    such that a directory is moved outside of the bind-mount which the
    resolution started in, it would be detected and blocked to avoid being
    able to mess with paths outside of the bind-mount. However, triggering a
    new REF-walk is just as effective a solution.
    
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Fixes: 397d425dc26d ("vfs: Test for and handle paths that are unreachable from their mnt_root")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Aleksa Sarai <cyphar@cyphar.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41df68570b7ea89a537e5bd9c77cc4d7e2491cf9
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:49 2020 +0000

    net: ena: make ena rxfh support ETH_RSS_HASH_NO_CHANGE
    
    commit 470793a78ce344bd53d31e0c2d537f71ba957547 upstream.
    
    As the name suggests ETH_RSS_HASH_NO_CHANGE is received upon changing
    the key or indirection table using ethtool while keeping the same hash
    function.
    
    Also add a function for retrieving the current hash function from
    the ena-com layer.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Saeed Bshara <saeedb@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cf7fd81746977436b82a94dd897ecd85fb47a71
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Thu Feb 20 16:42:13 2020 +0200

    net: netlink: cap max groups which will be considered in netlink_bind()
    
    commit 3a20773beeeeadec41477a5ba872175b778ff752 upstream.
    
    Since nl_groups is a u32 we can't bind more groups via ->bind
    (netlink_bind) call, but netlink has supported more groups via
    setsockopt() for a long time and thus nlk->ngroups could be over 32.
    Recently I added support for per-vlan notifications and increased the
    groups to 33 for NETLINK_ROUTE which exposed an old bug in the
    netlink_bind() code causing out-of-bounds access on archs where unsigned
    long is 32 bits via test_bit() on a local variable. Fix this by capping the
    maximum groups in netlink_bind() to BITS_PER_TYPE(u32), effectively
    capping them at 32 which is the minimum of allocated groups and the
    maximum groups which can be bound via netlink_bind().
    
    CC: Christophe Leroy <christophe.leroy@c-s.fr>
    CC: Richard Guy Briggs <rgb@redhat.com>
    Fixes: 4f520900522f ("netlink: have netlink per-protocol bind function return an error code.")
    Reported-by: Erhard F. <erhard_f@mailbox.org>
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 366d368729d65e9ebb7bf0e113560a2f496a5935
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Aug 21 21:57:03 2018 -0700

    include/linux/bitops.h: introduce BITS_PER_TYPE
    
    commit 9144d75e22cad3c89e6b2ccab551db9ee28d250a upstream.
    
    net_dim.h has a rather useful extension to BITS_PER_BYTE to compute the
    number of bits in a type (BITS_PER_BYTE * sizeof(T)), so promote the macro
    to bitops.h, alongside BITS_PER_BYTE, for wider usage.
    
    Link: http://lkml.kernel.org/r/20180706094458.14116-1-chris@chris-wilson.co.uk
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Andy Gospodarek <gospo@broadcom.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [only take the bitops.h portion for stable kernels - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2fda493540a1ecf272e9641e88c5585933af68a
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Tue Feb 11 15:55:59 2020 +0200

    serial: 8250: Check UPF_IRQ_SHARED in advance
    
    commit 7febbcbc48fc92e3f33863b32ed715ba4aff18c4 upstream.
    
    The commit 54e53b2e8081
      ("tty: serial: 8250: pass IRQ shared flag to UART ports")
    nicely explained the problem:
    
    ---8<---8<---
    
    On some systems IRQ lines between multiple UARTs might be shared. If so, the
    irqflags have to be configured accordingly. The reason is: The 8250 port startup
    code performs IRQ tests *before* the IRQ handler for that particular port is
    registered. This is performed in serial8250_do_startup(). This function checks
    whether IRQF_SHARED is configured and only then disables the IRQ line while
    testing.
    
    This test is performed upon each open() of the UART device. Imagine two UARTs
    share the same IRQ line: On is already opened and the IRQ is active. When the
    second UART is opened, the IRQ line has to be disabled while performing IRQ
    tests. Otherwise an IRQ might handler might be invoked, but the IRQ itself
    cannot be handled, because the corresponding handler isn't registered,
    yet. That's because the 8250 code uses a chain-handler and invokes the
    corresponding port's IRQ handling routines himself.
    
    Unfortunately this IRQF_SHARED flag isn't configured for UARTs probed via device
    tree even if the IRQs are shared. This way, the actual and shared IRQ line isn't
    disabled while performing tests and the kernel correctly detects a spurious
    IRQ. So, adding this flag to the DT probe solves the issue.
    
    Note: The UPF_SHARE_IRQ flag is configured unconditionally. Therefore, the
    IRQF_SHARED flag can be set unconditionally as well.
    
    Example stack trace by performing `echo 1 > /dev/ttyS2` on a non-patched system:
    
    |irq 85: nobody cared (try booting with the "irqpoll" option)
    | [...]
    |handlers:
    |[<ffff0000080fc628>] irq_default_primary_handler threaded [<ffff00000855fbb8>] serial8250_interrupt
    |Disabling IRQ #85
    
    ---8<---8<---
    
    But unfortunately didn't fix the root cause. Let's try again here by moving
    IRQ flag assignment from serial_link_irq_chain() to serial8250_do_startup().
    
    This should fix the similar issue reported for 8250_pnp case.
    
    Since this change we don't need to have custom solutions in 8250_aspeed_vuart
    and 8250_of drivers, thus, drop them.
    
    Fixes: 1c2f04937b3e ("serial: 8250: add IRQ trigger support")
    Reported-by: Li RongQing <lirongqing@baidu.com>
    Cc: Kurt Kanzenbach <kurt@linutronix.de>
    Cc: Vikram Pandita <vikram.pandita@ti.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Kurt Kanzenbach <kurt@linutronix.de>
    Link: https://lore.kernel.org/r/20200211135559.85960-1-andriy.shevchenko@linux.intel.com
    [Kurt: Backport to v4.9]
    Signed-off-by: Kurt Kanzenbach <kurt@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fc0da550f0c114e588248b813436285aca0e9a1
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Mon Mar 2 13:39:13 2020 -0700

    ecryptfs: Fix up bad backport of fe2e082f5da5b4a0a92ae32978f81507ef37ec66
    
    When doing the 4.9 merge into certain Android trees, I noticed a warning
    from Android's deprecated GCC 4.9.4, which causes a build failure in
    those trees due to basically -Werror:
    
    fs/ecryptfs/keystore.c: In function 'ecryptfs_parse_packet_set':
    fs/ecryptfs/keystore.c:1357:2: warning: 'auth_tok_list_item' may be used
    uninitialized in this function [-Wmaybe-uninitialized]
      memset(auth_tok_list_item, 0,
      ^
    fs/ecryptfs/keystore.c:1260:38: note: 'auth_tok_list_item' was declared
    here
      struct ecryptfs_auth_tok_list_item *auth_tok_list_item;
                                          ^
    
    GCC 9.2.0 was not able to pick up this warning when I tested it.
    
    Turns out that Clang warns as well when -Wuninitialized is used, which
    is not the case in older stable trees at the moment (but shows value in
    potentially backporting the various warning fixes currently in upstream
    to get more coverage).
    
    fs/ecryptfs/keystore.c:1284:6: warning: variable 'auth_tok_list_item' is
    used uninitialized whenever 'if' condition is true
    [-Wsometimes-uninitialized]
            if (data[(*packet_size)++] != ECRYPTFS_TAG_1_PACKET_TYPE) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    fs/ecryptfs/keystore.c:1360:4: note: uninitialized use occurs here
                            auth_tok_list_item);
                            ^~~~~~~~~~~~~~~~~~
    fs/ecryptfs/keystore.c:1284:2: note: remove the 'if' if its condition is
    always false
            if (data[(*packet_size)++] != ECRYPTFS_TAG_1_PACKET_TYPE) {
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    fs/ecryptfs/keystore.c:1260:56: note: initialize the variable
    'auth_tok_list_item' to silence this warning
            struct ecryptfs_auth_tok_list_item *auth_tok_list_item;
                                                                  ^
                                                                   = NULL
    1 warning generated.
    
    Somehow, commit fe2e082f5da5 ("ecryptfs: fix a memory leak bug in
    parse_tag_1_packet()") upstream was not applied in the correct if block
    in 4.4.215, 4.9.215, and 4.14.172, which will indeed lead to use of
    uninitialized memory. Fix it up by undoing the bad backport in those
    trees then reapplying the patch in the proper location.
    
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c456be6e14e2db2d612d25a9e5e75cee37fca88
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Wed Feb 12 10:35:30 2020 +0100

    i2c: jz4780: silence log flood on txabrt
    
    commit 9e661cedcc0a072d91a32cb88e0515ea26e35711 upstream.
    
    The printout for txabrt is way too talkative and is highly annoying with
    scanning programs like 'i2cdetect'. Reduce it to the minimum, the rest
    can be gained by I2C core debugging and datasheet information. Also,
    make it a debug printout, it won't help the regular user.
    
    Fixes: ba92222ed63a ("i2c: jz4780: Add i2c bus controller driver for Ingenic JZ4780")
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Tested-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 228b98315e6fd66beae05a95729b837838b4a75b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Feb 2 21:19:22 2020 +0100

    MIPS: VPE: Fix a double free and a memory leak in 'release_vpe()'
    
    commit bef8e2dfceed6daeb6ca3e8d33f9c9d43b926580 upstream.
    
    Pointer on the memory allocated by 'alloc_progmem()' is stored in
    'v->load_addr'. So this is this memory that should be freed by
    'release_progmem()'.
    
    'release_progmem()' is only a call to 'kfree()'.
    
    With the current code, there is both a double free and a memory leak.
    Fix it by passing the correct pointer to 'release_progmem()'.
    
    Fixes: e01402b115ccc ("More AP / SP bits for the 34K, the Malta bits and things. Still wants")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: ralf@linux-mips.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: kernel-janitors@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d2c5b15b81e3b4b1425e836b1e743e31f54a0ae
Author: dan.carpenter@oracle.com <dan.carpenter@oracle.com>
Date:   Wed Jan 15 20:46:28 2020 +0300

    HID: hiddev: Fix race in in hiddev_disconnect()
    
    commit 5c02c447eaeda29d3da121a2e17b97ccaf579b51 upstream.
    
    Syzbot reports that "hiddev" is used after it's free in hiddev_disconnect().
    The hiddev_disconnect() function sets "hiddev->exist = 0;" so
    hiddev_release() can free it as soon as we drop the "existancelock"
    lock.  This patch moves the mutex_unlock(&hiddev->existancelock) until
    after we have finished using it.
    
    Reported-by: syzbot+784ccb935f9900cc7c9e@syzkaller.appspotmail.com
    Fixes: 7f77897ef2b6 ("HID: hiddev: fix potential use-after-free")
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3adb1f8cbfa6addf70ac9fa2f8dc94abf0c5e4b4
Author: Johan Korsnes <jkorsnes@cisco.com>
Date:   Fri Jan 17 13:08:36 2020 +0100

    HID: core: increase HID report buffer size to 8KiB
    
    commit 84a4062632462c4320704fcdf8e99e89e94c0aba upstream.
    
    We have a HID touch device that reports its opens and shorts test
    results in HID buffers of size 8184 bytes. The maximum size of the HID
    buffer is currently set to 4096 bytes, causing probe of this device to
    fail. With this patch we increase the maximum size of the HID buffer to
    8192 bytes, making device probe and acquisition of said buffers succeed.
    
    Signed-off-by: Johan Korsnes <jkorsnes@cisco.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Armando Visconti <armando.visconti@st.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e63e7efc68e1ace5bcb08d919809513bc2095f1b
Author: Johan Korsnes <jkorsnes@cisco.com>
Date:   Fri Jan 17 13:08:35 2020 +0100

    HID: core: fix off-by-one memset in hid_report_raw_event()
    
    commit 5ebdffd25098898aff1249ae2f7dbfddd76d8f8f upstream.
    
    In case a report is greater than HID_MAX_BUFFER_SIZE, it is truncated,
    but the report-number byte is not correctly handled. This results in a
    off-by-one in the following memset, causing a kernel Oops and ensuing
    system crash.
    
    Note: With commit 8ec321e96e05 ("HID: Fix slab-out-of-bounds read in
    hid_field_extract") I no longer hit the kernel Oops as we instead fail
    "controlled" at probe if there is a report too long in the HID
    report-descriptor. hid_report_raw_event() is an exported symbol, so
    presumabely we cannot always rely on this being the case.
    
    Fixes: 966922f26c7f ("HID: fix a crash in hid_report_raw_event()
                         function.")
    Signed-off-by: Johan Korsnes <jkorsnes@cisco.com>
    Cc: Armando Visconti <armando.visconti@st.com>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5d99f3c01f62cfed781ee07552bfdfffd716a2f
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Feb 12 17:59:40 2020 +0300

    ACPI: watchdog: Fix gas->access_width usage
    
    commit 2ba33a4e9e22ac4dda928d3e9b5978a3a2ded4e0 upstream.
    
    ACPI Generic Address Structure (GAS) access_width field is not in bytes
    as the driver seems to expect in few places so fix this by using the
    newly introduced macro ACPI_ACCESS_BYTE_WIDTH().
    
    Fixes: b1abf6fc4982 ("ACPI / watchdog: Fix off-by-one error at resource assignment")
    Fixes: 058dfc767008 ("ACPI / watchdog: Add support for WDAT hardware watchdog")
    Reported-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Cc: 4.16+ <stable@vger.kernel.org> # 4.16+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba7e258550e2fd5387181f30538b137381904eb3
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Wed Feb 12 17:59:39 2020 +0300

    ACPICA: Introduce ACPI_ACCESS_BYTE_WIDTH() macro
    
    commit 1dade3a7048ccfc675650cd2cf13d578b095e5fb upstream.
    
    Sometimes it is useful to find the access_width field value in bytes and
    not in bits so add a helper that can be used for this purpose.
    
    Suggested-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Cc: 4.16+ <stable@vger.kernel.org> # 4.16+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 145bd64d35822a62c4570bc75c5285acb1820fb3
Author: Paul Moore <paul@paul-moore.com>
Date:   Sat Feb 22 20:36:47 2020 -0500

    audit: fix error handling in audit_data_to_entry()
    
    commit 2ad3e17ebf94b7b7f3f64c050ff168f9915345eb upstream.
    
    Commit 219ca39427bf ("audit: use union for audit_field values since
    they are mutually exclusive") combined a number of separate fields in
    the audit_field struct into a single union.  Generally this worked
    just fine because they are generally mutually exclusive.
    Unfortunately in audit_data_to_entry() the overlap can be a problem
    when a specific error case is triggered that causes the error path
    code to attempt to cleanup an audit_field struct and the cleanup
    involves attempting to free a stored LSM string (the lsm_str field).
    Currently the code always has a non-NULL value in the
    audit_field.lsm_str field as the top of the for-loop transfers a
    value into audit_field.val (both .lsm_str and .val are part of the
    same union); if audit_data_to_entry() fails and the audit_field
    struct is specified to contain a LSM string, but the
    audit_field.lsm_str has not yet been properly set, the error handling
    code will attempt to free the bogus audit_field.lsm_str value that
    was set with audit_field.val at the top of the for-loop.
    
    This patch corrects this by ensuring that the audit_field.val is only
    set when needed (it is cleared when the audit_field struct is
    allocated with kcalloc()).  It also corrects a few other issues to
    ensure that in case of error the proper error code is returned.
    
    Cc: stable@vger.kernel.org
    Fixes: 219ca39427bf ("audit: use union for audit_field values since they are mutually exclusive")
    Reported-by: syzbot+1f4d90ead370d72e450b@syzkaller.appspotmail.com
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4bb8b151d2b5e7fb2ac04a9381892908df18604
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Feb 28 12:22:56 2020 +0300

    ext4: potential crash on allocation error in ext4_alloc_flex_bg_array()
    
    commit 37b0b6b8b99c0e1c1f11abbe7cf49b6d03795b3f upstream.
    
    If sbi->s_flex_groups_allocated is zero and the first allocation fails
    then this code will crash.  The problem is that "i--" will set "i" to
    -1 but when we compare "i >= sbi->s_flex_groups_allocated" then the -1
    is type promoted to unsigned and becomes UINT_MAX.  Since UINT_MAX
    is more than zero, the condition is true so we call kvfree(new_groups[-1]).
    The loop will carry on freeing invalid memory until it crashes.
    
    Fixes: 7c990728b99e ("ext4: fix potential race between s_flex_groups online resizing and access")
    Reviewed-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20200228092142.7irbc44yaz3by7nb@kili.mountain
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 259384b9b2c27b63ed94851932b4c5bac7f9046c
Author: Jason Baron <jbaron@akamai.com>
Date:   Mon Feb 17 15:38:09 2020 -0500

    net: sched: correct flower port blocking
    
    [ Upstream commit 8a9093c79863b58cc2f9874d7ae788f0d622a596 ]
    
    tc flower rules that are based on src or dst port blocking are sometimes
    ineffective due to uninitialized stack data. __skb_flow_dissect() extracts
    ports from the skb for tc flower to match against. However, the port
    dissection is not done when when the FLOW_DIS_IS_FRAGMENT bit is set in
    key_control->flags. All callers of __skb_flow_dissect(), zero-out the
    key_control field except for fl_classify() as used by the flower
    classifier. Thus, the FLOW_DIS_IS_FRAGMENT may be set on entry to
    __skb_flow_dissect(), since key_control is allocated on the stack
    and may not be initialized.
    
    Since key_basic and key_control are present for all flow keys, let's
    make sure they are initialized.
    
    Fixes: 62230715fd24 ("flow_dissector: do not dissect l4 ports for fragments")
    Co-developed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jason Baron <jbaron@akamai.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35ce64ab81e9323af94f425f82e4c9f07a0fd6e1
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Wed Feb 19 18:01:22 2020 +0300

    nfc: pn544: Fix occasional HW initialization failure
    
    [ Upstream commit c3331d2fe3fd4d5e321f2467d01f72de7edfb5d0 ]
    
    The PN544 driver checks the "enable" polarity during of driver's probe and
    it's doing that by turning ON and OFF NFC with different polarities until
    enabling succeeds. It takes some time for the hardware to power-down, and
    thus, to deassert the IRQ that is raised by turning ON the hardware.
    Since the delay after last power-down of the polarity-checking process is
    missed in the code, the interrupt may trigger immediately after installing
    the IRQ handler (right after the checking is done), which results in IRQ
    handler trying to touch the disabled HW and ends with marking NFC as
    'DEAD' during of the driver's probe:
    
      pn544_hci_i2c 1-002a: NFC: nfc_en polarity : active high
      pn544_hci_i2c 1-002a: NFC: invalid len byte
      shdlc: llc_shdlc_recv_frame: NULL Frame -> link is dead
    
    This patch fixes the occasional NFC initialization failure on Nexus 7
    device.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 548e23fcab6d8a777bbddc60d937faa893e4aba5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Feb 18 12:07:53 2020 +0800

    sctp: move the format error check out of __sctp_sf_do_9_1_abort
    
    [ Upstream commit 245709ec8be89af46ea7ef0444c9c80913999d99 ]
    
    When T2 timer is to be stopped, the asoc should also be deleted,
    otherwise, there will be no chance to call sctp_association_free
    and the asoc could last in memory forever.
    
    However, in sctp_sf_shutdown_sent_abort(), after adding the cmd
    SCTP_CMD_TIMER_STOP for T2 timer, it may return error due to the
    format error from __sctp_sf_do_9_1_abort() and miss adding
    SCTP_CMD_ASSOC_FAILED where the asoc will be deleted.
    
    This patch is to fix it by moving the format error check out of
    __sctp_sf_do_9_1_abort(), and do it before adding the cmd
    SCTP_CMD_TIMER_STOP for T2 timer.
    
    Thanks Hangbin for reporting this issue by the fuzz testing.
    
    v1->v2:
      - improve the comment in the code as Marcelo's suggestion.
    
    Fixes: 96ca468b86b0 ("sctp: check invalid value of length parameter in error cause")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f78daa328964d26fded9aeb8e1aa3b9f96e3dc3
Author: Benjamin Poirier <bpoirier@cumulusnetworks.com>
Date:   Wed Feb 12 10:41:06 2020 +0900

    ipv6: Fix route replacement with dev-only route
    
    [ Upstream commit e404b8c7cfb31654c9024d497cec58a501501692 ]
    
    After commit 27596472473a ("ipv6: fix ECMP route replacement") it is no
    longer possible to replace an ECMP-able route by a non ECMP-able route.
    For example,
            ip route add 2001:db8::1/128 via fe80::1 dev dummy0
            ip route replace 2001:db8::1/128 dev dummy0
    does not work as expected.
    
    Tweak the replacement logic so that point 3 in the log of the above commit
    becomes:
    3. If the new route is not ECMP-able, and no matching non-ECMP-able route
    exists, replace matching ECMP-able route (if any) or add the new route.
    
    We can now summarize the entire replace semantics to:
    When doing a replace, prefer replacing a matching route of the same
    "ECMP-able-ness" as the replace argument. If there is no such candidate,
    fallback to the first route found.
    
    Fixes: 27596472473a ("ipv6: fix ECMP route replacement")
    Signed-off-by: Benjamin Poirier <bpoirier@cumulusnetworks.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07c103e3209f27b601e4c2ae44f77921c4492105
Author: Benjamin Poirier <bpoirier@cumulusnetworks.com>
Date:   Wed Feb 12 10:41:07 2020 +0900

    ipv6: Fix nlmsg_flags when splitting a multipath route
    
    [ Upstream commit afecdb376bd81d7e16578f0cfe82a1aec7ae18f3 ]
    
    When splitting an RTA_MULTIPATH request into multiple routes and adding the
    second and later components, we must not simply remove NLM_F_REPLACE but
    instead replace it by NLM_F_CREATE. Otherwise, it may look like the netlink
    message was malformed.
    
    For example,
            ip route add 2001:db8::1/128 dev dummy0
            ip route change 2001:db8::1/128 nexthop via fe80::30:1 dev dummy0 \
                    nexthop via fe80::30:2 dev dummy0
    results in the following warnings:
    [ 1035.057019] IPv6: RTM_NEWROUTE with no NLM_F_CREATE or NLM_F_REPLACE
    [ 1035.057517] IPv6: NLM_F_CREATE should be set when creating new route
    
    This patch makes the nlmsg sequence look equivalent for __ip6_ins_rt() to
    what it would get if the multipath route had been added in multiple netlink
    operations:
            ip route add 2001:db8::1/128 dev dummy0
            ip route change 2001:db8::1/128 nexthop via fe80::30:1 dev dummy0
            ip route append 2001:db8::1/128 nexthop via fe80::30:2 dev dummy0
    
    Fixes: 27596472473a ("ipv6: fix ECMP route replacement")
    Signed-off-by: Benjamin Poirier <bpoirier@cumulusnetworks.com>
    Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6381b47f1c86abd75b9d666c12bea3949b47ddf9
Author: Arun Parameswaran <arun.parameswaran@broadcom.com>
Date:   Fri Feb 14 13:47:46 2020 -0800

    net: phy: restore mdio regs in the iproc mdio driver
    
    commit 6f08e98d62799e53c89dbf2c9a49d77e20ca648c upstream.
    
    The mii management register in iproc mdio block
    does not have a retention register so it is lost on suspend.
    Save and restore value of register while resuming from suspend.
    
    Fixes: bb1a619735b4 ("net: phy: Initialize mdio clock at probe function")
    Signed-off-by: Arun Parameswaran <arun.parameswaran@broadcom.com>
    Signed-off-by: Scott Branden <scott.branden@broadcom.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 804bbdff9abda1ea17baa2ea711b0f4a48e59c61
Author: Jethro Beekman <jethro@fortanix.com>
Date:   Wed Feb 12 16:43:41 2020 +0100

    net: fib_rules: Correctly set table field when table number exceeds 8 bits
    
    [ Upstream commit 540e585a79e9d643ede077b73bcc7aa2d7b4d919 ]
    
    In 709772e6e06564ed94ba740de70185ac3d792773, RT_TABLE_COMPAT was added to
    allow legacy software to deal with routing table numbers >= 256, but the
    same change to FIB rule queries was overlooked.
    
    Signed-off-by: Jethro Beekman <jethro@fortanix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efe041b6efd9a76c92f58c5b513a3bb24c9e2096
Author: Petr Mladek <pmladek@suse.com>
Date:   Fri Jan 11 17:20:37 2019 +0100

    sysrq: Remove duplicated sysrq message
    
    commit c3fee60908db4a8594f2e4a2131998384b8fa006 upstream.
    
    The commit 97f5f0cd8cd0a0544 ("Input: implement SysRq as a separate input
    handler") added pr_fmt() definition. It caused a duplicated message
    prefix in the sysrq header messages, for example:
    
    [  177.053931] sysrq: SysRq : Show backtrace of all active CPUs
    [  742.864776] sysrq: SysRq : HELP : loglevel(0-9) reboot(b) crash(c)
    
    Fixes: 97f5f0cd8cd0a05 ("Input: implement SysRq as a separate input handler")
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Tommi Rantala  <tommi.t.rantala@nokia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 625628b3a67179beecf3f43134277e5f0b4580ca
Author: Petr Mladek <pmladek@suse.com>
Date:   Fri Jan 11 13:45:15 2019 +0100

    sysrq: Restore original console_loglevel when sysrq disabled
    
    commit 075e1a0c50f59ea210561d0d0fedbd945615df78 upstream.
    
    The sysrq header line is printed with an increased loglevel
    to provide users some positive feedback.
    
    The original loglevel is not restored when the sysrq operation
    is disabled. This bug was introduced in 2.6.12 (pre-git-history)
    by the commit ("Allow admin to enable only some of the Magic-Sysrq
    functions").
    
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d284a7a2ce3cbe918a9c1fac0679574a40fa7c8
Author: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
Date:   Thu Feb 13 13:16:16 2020 +0000

    cfg80211: add missing policy for NL80211_ATTR_STATUS_CODE
    
    [ Upstream commit ea75080110a4c1fa011b0a73cb8f42227143ee3e ]
    
    The nl80211_policy is missing for NL80211_ATTR_STATUS_CODE attribute.
    As a result, for strictly validated commands, it's assumed to not be
    supported.
    
    Signed-off-by: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
    Link: https://lore.kernel.org/r/20200213131608.10541-2-sergey.matyukevich.os@quantenna.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccfae499161e602237cf1290e23103501487a6a1
Author: Frank Sorenson <sorenson@redhat.com>
Date:   Wed Feb 12 15:31:48 2020 -0600

    cifs: Fix mode output in debugging statements
    
    [ Upstream commit f52aa79df43c4509146140de0241bc21a4a3b4c7 ]
    
    A number of the debug statements output file or directory mode
    in hex.  Change these to print using octal.
    
    Signed-off-by: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e1ad0d312f8fc04773dafb3a7f264bcba85a2d6
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:51 2020 +0000

    net: ena: ena-com.c: prevent NULL pointer dereference
    
    [ Upstream commit c207979f5ae10ed70aff1bb13f39f0736973de99 ]
    
    comp_ctx can be NULL in a very rare case when an admin command is executed
    during the execution of ena_remove().
    
    The bug scenario is as follows:
    
    * ena_destroy_device() sets the comp_ctx to be NULL
    * An admin command is executed before executing unregister_netdev(),
      this can still happen because our device can still receive callbacks
      from the netdev infrastructure such as ethtool commands.
    * When attempting to access the comp_ctx, the bug occurs since it's set
      to NULL
    
    Fix:
    Added a check that comp_ctx is not NULL
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 400fc78a643c653d4cd6d004643748ad8a6c31fd
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:47 2020 +0000

    net: ena: fix incorrectly saving queue numbers when setting RSS indirection table
    
    [ Upstream commit 92569fd27f5cb0ccbdf7c7d70044b690e89a0277 ]
    
    The indirection table has the indices of the Rx queues. When we store it
    during set indirection operation, we convert the indices to our internal
    representation of the indices.
    
    Our internal representation of the indices is: even indices for Tx and
    uneven indices for Rx, where every Tx/Rx pair are in a consecutive order
    starting from 0. For example if the driver has 3 queues (3 for Tx and 3
    for Rx) then the indices are as follows:
    0  1  2  3  4  5
    Tx Rx Tx Rx Tx Rx
    
    The BUG:
    The issue is that when we satisfy a get request for the indirection
    table, we don't convert the indices back to the original representation.
    
    The FIX:
    Simply apply the inverse function for the indices of the indirection
    table after we set it.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d98027b13c36dcfe5dfb3ae4f85473ce0e05ca91
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:46 2020 +0000

    net: ena: rss: store hash function as values and not bits
    
    [ Upstream commit 4844470d472d660c26149ad764da2406adb13423 ]
    
    The device receives, stores and retrieves the hash function value as bits
    and not as their enum value.
    
    The bug:
    * In ena_com_set_hash_function() we set
      cmd.u.flow_hash_func.selected_func to the bit value of rss->hash_func.
     (1 << rss->hash_func)
    * In ena_com_get_hash_function() we retrieve the hash function and store
      it's bit value in rss->hash_func. (Now the bit value of rss->hash_func
      is stored in rss->hash_func instead of it's enum value)
    
    The fix:
    This commit fixes the issue by converting the retrieved hash function
    values from the device to the matching enum value of the set bit using
    ffs(). ffs() finds the first set bit's index in a word. Since the function
    returns 1 for the LSB's index, we need to subtract 1 from the returned
    value (note that BIT(0) is 1).
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd8f138d66181fd0ae3aba4bc62743fe81ebf407
Author: Sameeh Jubran <sameehj@amazon.com>
Date:   Tue Feb 11 15:17:45 2020 +0000

    net: ena: rss: fix failure to get indirection table
    
    [ Upstream commit 0c8923c0a64fb5d14bebb9a9065d2dc25ac5e600 ]
    
    On old hardware, getting / setting the hash function is not supported while
    gettting / setting the indirection table is.
    
    This commit enables us to still show the indirection table on older
    hardwares by setting the hash function and key to NULL.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b705e254c94f9225b3aa0e92534c9d4f34e9d6e
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:43 2020 +0000

    net: ena: fix incorrect default RSS key
    
    [ Upstream commit 0d1c3de7b8c78a5e44b74b62ede4a63629f5d811 ]
    
    Bug description:
    When running "ethtool -x <if_name>" the key shows up as all zeros.
    
    When we use "ethtool -X <if_name> hfunc toeplitz hkey <some:random:key>" to
    set the key and then try to retrieve it using "ethtool -x <if_name>" then
    we return the correct key because we return the one we saved.
    
    Bug cause:
    We don't fetch the key from the device but instead return the key
    that we have saved internally which is by default set to zero upon
    allocation.
    
    Fix:
    This commit fixes the issue by initializing the key to a random value
    using netdev_rss_key_fill().
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eae5100bae0ead4c494bc78b95a5eb4bbedfed18
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:42 2020 +0000

    net: ena: add missing ethtool TX timestamping indication
    
    [ Upstream commit cf6d17fde93bdda23c9b02dd5906a12bf8c55209 ]
    
    Current implementation of the driver calls skb_tx_timestamp()to add a
    software tx timestamp to the skb, however the software-transmit capability
    is not reported in ethtool -T.
    
    This commit updates the ethtool structure to report the software-transmit
    capability in ethtool -T using the standard ethtool_op_get_ts_info().
    This function reports all software timestamping capabilities (tx and rx),
    as well as setting phc_index = -1. phc_index is the index of the PTP
    hardware clock device that will be used for hardware timestamps. Since we
    don't have such a device in ENA, using the default -1 value is the correct
    setting.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Ezequiel Lara Gomez <ezegomez@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb5408619bc38431a55ef0e9227c6667ccb0a6c9
Author: Arthur Kiyanovski <akiyano@amazon.com>
Date:   Tue Feb 11 15:17:40 2020 +0000

    net: ena: fix potential crash when rxfh key is NULL
    
    [ Upstream commit 91a65b7d3ed8450f31ab717a65dcb5f9ceb5ab02 ]
    
    When ethtool -X is called without an hkey, ena_com_fill_hash_function()
    is called with key=NULL, which is passed to memcpy causing a crash.
    
    This commit fixes this issue by checking key is not NULL.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6165558340431e1d125dec3dfaa5a11c7d736500
Author: Bjørn Mork <bjorn@mork.no>
Date:   Sat Feb 8 15:50:36 2020 +0100

    qmi_wwan: re-add DW5821e pre-production variant
    
    [ Upstream commit 88bf54603f6f2c137dfee1abf6436ceac3528d2d ]
    
    Commit f25e1392fdb5 removed the support for the pre-production variant
    of the Dell DW5821e to avoid probing another USB interface unnecessarily.
    However, the pre-production samples are found in the wild, and this lack
    of support is causing problems for users of such samples.  It is therefore
    necessary to support both variants.
    
    Matching on both interfaces 0 and 1 is not expected to cause any problem
    with either variant, as only the QMI function will be probed successfully
    on either.  Interface 1 will be rejected based on the HID class for the
    production variant:
    
    T:  Bus=01 Lev=03 Prnt=04 Port=00 Cnt=01 Dev#= 16 Spd=480 MxCh= 0
    D:  Ver= 2.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  2
    P:  Vendor=413c ProdID=81d7 Rev=03.18
    S:  Manufacturer=DELL
    S:  Product=DW5821e Snapdragon X20 LTE
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#= 1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    I:  If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    And interface 0 will be rejected based on too few endpoints for the
    pre-production variant:
    
    T: Bus=01 Lev=02 Prnt=02 Port=03 Cnt=03 Dev#= 7 Spd=480 MxCh= 0
    D: Ver= 2.10 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs= 2
    P: Vendor=413c ProdID=81d7 Rev= 3.18
    S: Manufacturer=DELL
    S: Product=DW5821e Snapdragon X20 LTE
    S: SerialNumber=0123456789ABCDEF
    C: #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I: If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=
    I: If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I: If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I: If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I: If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    
    Fixes: f25e1392fdb5 ("qmi_wwan: fix interface number for DW5821e production firmware")
    Link: https://whrl.pl/Rf0vNk
    Reported-by: Lars Melin <larsm17@gmail.com>
    Cc: Aleksander Morgado <aleksander@aleksander.es>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 415a1e41eddfafe0b99825fa3f9f6fde05fab60d
Author: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
Date:   Mon Feb 3 10:56:50 2020 +0000

    cfg80211: check wiphy driver existence for drvinfo report
    
    [ Upstream commit bfb7bac3a8f47100ebe7961bd14e924c96e21ca7 ]
    
    When preparing ethtool drvinfo, check if wiphy driver is defined
    before dereferencing it. Driver may not exist, e.g. if wiphy is
    attached to a virtual platform device.
    
    Signed-off-by: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
    Link: https://lore.kernel.org/r/20200203105644.28875-1-sergey.matyukevich.os@quantenna.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ecf7f0e09477a424026f8bdf279b20a5965f7e4
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 31 13:12:58 2020 +0200

    mac80211: consider more elements in parsing CRC
    
    [ Upstream commit a04564c99bb4a92f805a58e56b2d22cc4978f152 ]
    
    We only use the parsing CRC for checking if a beacon changed,
    and elements with an ID > 63 cannot be represented in the
    filter. Thus, like we did before with WMM and Cisco vendor
    elements, just statically add these forgotten items to the
    CRC:
     - WLAN_EID_VHT_OPERATION
     - WLAN_EID_OPMODE_NOTIF
    
    I guess that in most cases when VHT/HE operation change, the HT
    operation also changed, and so the change was picked up, but we
    did notice that pure operating mode notification changes were
    ignored.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/20200131111300.891737-22-luca@coelho.fi
    [restrict to VHT for the mac80211 branch]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccbbea9eaa860a8b63e6006ea32cd2436a35461c
Author: Sean Paul <seanpaul@chromium.org>
Date:   Tue Jan 21 11:18:48 2020 -0800

    drm/msm: Set dma maximum segment size for mdss
    
    [ Upstream commit db735fc4036bbe1fbe606819b5f0ff26cc76cdff ]
    
    Turning on CONFIG_DMA_API_DEBUG_SG results in the following error:
    
    [   12.078665] msm ae00000.mdss: DMA-API: mapping sg segment longer than device claims to support [len=3526656] [max=65536]
    [   12.089870] WARNING: CPU: 6 PID: 334 at /mnt/host/source/src/third_party/kernel/v4.19/kernel/dma/debug.c:1301 debug_dma_map_sg+0x1dc/0x318
    [   12.102655] Modules linked in: joydev
    [   12.106442] CPU: 6 PID: 334 Comm: frecon Not tainted 4.19.0 #2
    [   12.112450] Hardware name: Google Cheza (rev3+) (DT)
    [   12.117566] pstate: 60400009 (nZCv daif +PAN -UAO)
    [   12.122506] pc : debug_dma_map_sg+0x1dc/0x318
    [   12.126995] lr : debug_dma_map_sg+0x1dc/0x318
    [   12.131487] sp : ffffff800cc3ba80
    [   12.134913] x29: ffffff800cc3ba80 x28: 0000000000000000
    [   12.140395] x27: 0000000000000004 x26: 0000000000000004
    [   12.145868] x25: ffffff8008e55b18 x24: 0000000000000000
    [   12.151337] x23: 00000000ffffffff x22: ffffff800921c000
    [   12.156809] x21: ffffffc0fa75b080 x20: ffffffc0f7195090
    [   12.162280] x19: ffffffc0f1c53280 x18: 0000000000000000
    [   12.167749] x17: 0000000000000000 x16: 0000000000000000
    [   12.173218] x15: 0000000000000000 x14: 0720072007200720
    [   12.178689] x13: 0720072007200720 x12: 0720072007200720
    [   12.184161] x11: 0720072007200720 x10: 0720072007200720
    [   12.189641] x9 : ffffffc0f1fc6b60 x8 : 0000000000000000
    [   12.195110] x7 : ffffff8008132ce0 x6 : 0000000000000000
    [   12.200585] x5 : 0000000000000000 x4 : ffffff8008134734
    [   12.206058] x3 : ffffff800cc3b830 x2 : ffffffc0f1fc6240
    [   12.211532] x1 : 25045a74f48a7400 x0 : 25045a74f48a7400
    [   12.217006] Call trace:
    [   12.219535]  debug_dma_map_sg+0x1dc/0x318
    [   12.223671]  get_pages+0x19c/0x20c
    [   12.227177]  msm_gem_fault+0x64/0xfc
    [   12.230874]  __do_fault+0x3c/0x140
    [   12.234383]  __handle_mm_fault+0x70c/0xdb8
    [   12.238603]  handle_mm_fault+0xac/0xc4
    [   12.242473]  do_page_fault+0x1bc/0x3d4
    [   12.246342]  do_translation_fault+0x54/0x88
    [   12.250652]  do_mem_abort+0x60/0xf0
    [   12.254250]  el0_da+0x20/0x24
    [   12.257317] irq event stamp: 67260
    [   12.260828] hardirqs last  enabled at (67259): [<ffffff8008132d0c>] console_unlock+0x214/0x608
    [   12.269693] hardirqs last disabled at (67260): [<ffffff8008080e0c>] do_debug_exception+0x5c/0x178
    [   12.278820] softirqs last  enabled at (67256): [<ffffff8008081664>] __do_softirq+0x4d4/0x520
    [   12.287510] softirqs last disabled at (67249): [<ffffff80080be574>] irq_exit+0xa8/0x100
    [   12.295742] ---[ end trace e63cfc40c313ffab ]---
    
    The root of the problem is that the default segment size for sgt is
    (UINT_MAX & PAGE_MASK), and the default segment size for device dma is
    64K. As such, if you compare the 2, you would deduce that the sg segment
    will overflow the device's capacity. In reality, the hardware can
    accommodate the larger sg segments, it's just not initializing its max
    segment properly. This patch initializes the max segment size for the
    mdss device, which gets rid of that pesky warning.
    
    Reported-by: Stephen Boyd <swboyd@chromium.org>
    Tested-by: Stephen Boyd <swboyd@chromium.org>
    Tested-by: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200121111813.REPOST.1.I92c66a35fb13f368095b05287bdabdbe88ca6922@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcbb950c78f81d0822723b453cee240b1f94c7de
Author: Corey Minyard <cminyard@mvista.com>
Date:   Mon Dec 23 10:42:19 2019 -0600

    ipmi:ssif: Handle a possible NULL pointer reference
    
    [ Upstream commit 6b8526d3abc02c08a2f888e8c20b7ac9e5776dfe ]
    
    In error cases a NULL can be passed to memcpy.  The length will always
    be zero, so it doesn't really matter, but go ahead and check for NULL,
    anyway, to be more precise and avoid static analysis errors.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96f599646c68278a5d9575304f085ad8e79ba3e2
Author: Suraj Jitindar Singh <surajjs@amazon.com>
Date:   Tue Feb 18 19:08:50 2020 -0800

    ext4: fix potential race between s_group_info online resizing and access
    
    [ Upstream commit df3da4ea5a0fc5d115c90d5aa6caa4dd433750a7 ]
    
    During an online resize an array of pointers to s_group_info gets replaced
    so it can get enlarged. If there is a concurrent access to the array in
    ext4_get_group_info() and this memory has been reused then this can lead to
    an invalid memory access.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206443
    Link: https://lore.kernel.org/r/20200221053458.730016-3-tytso@mit.edu
    Signed-off-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Balbir Singh <sblbir@amazon.com>
    Cc: stable@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 277bc96a920a02613cf1364ff8c933f7b721a3e2
Author: Suraj Jitindar Singh <surajjs@amazon.com>
Date:   Fri Feb 28 16:51:19 2020 -0800

    ext4: fix potential race between s_flex_groups online resizing and access
    
    commit 7c990728b99ed6fbe9c75fc202fce1172d9916da upstream.
    
    During an online resize an array of s_flex_groups structures gets replaced
    so it can get enlarged. If there is a concurrent access to the array and
    this memory has been reused then this can lead to an invalid memory access.
    
    The s_flex_group array has been converted into an array of pointers rather
    than an array of structures. This is to ensure that the information
    contained in the structures cannot get out of sync during a resize due to
    an accessor updating the value in the old structure after it has been
    copied but before the array pointer is updated. Since the structures them-
    selves are no longer copied but only the pointers to them this case is
    mitigated.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206443
    Link: https://lore.kernel.org/r/20200221053458.730016-4-tytso@mit.edu
    Signed-off-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org # 4.4.x
    Cc: stable@kernel.org # 4.9.x
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9f47eac046a0a016893a10b18e0167a2dfd5cad
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Fri Feb 28 16:51:17 2020 -0800

    ext4: fix potential race between online resizing and write operations
    
    commit 1d0c3924a92e69bfa91163bda83c12a994b4d106 upstream.
    
    During an online resize an array of pointers to buffer heads gets
    replaced so it can get enlarged.  If there is a racing block
    allocation or deallocation which uses the old array, and the old array
    has gotten reused this can lead to a GPF or some other random kernel
    memory getting modified.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206443
    Link: https://lore.kernel.org/r/20200221053458.730016-2-tytso@mit.edu
    Reported-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org # 4.4.x
    Cc: stable@kernel.org # 4.9.x
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35c4725efddd669307d7c047cb385becc9c08bf3
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sat Feb 29 04:54:54 2020 +0530

    iwlwifi: pcie: fix rb_allocator workqueue allocation
    
    commit 8188a18ee2e48c9a7461139838048363bfce3fef upstream
    
    We don't handle failures in the rb_allocator workqueue allocation
    correctly. To fix that, move the code earlier so the cleanup is
    easier and we don't have to undo all the interrupt allocations in
    this case.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    [Ajay: Rewrote this patch for v4.9.y, as 4.9.y codebase is different from mainline]
    Signed-off-by: Ajay Kaher <akaher@vmware.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
