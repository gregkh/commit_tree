commit f25804f389846835535db255e7ba80eeed967ed7
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Feb 24 08:34:54 2020 +0100

    Linux 4.19.106

commit b75aaa6449b33c21b9b00c743fa90a012acf09da
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Jan 28 14:39:45 2020 -0500

    drm/amdgpu/display: handle multiple numbers of fclks in dcn_calcs.c (v2)
    
    [ Upstream commit c37243579d6c881c575dcfb54cf31c9ded88f946 ]
    
    We might get different numbers of clocks from powerplay depending
    on what the OEM has populated.
    
    v2: add assert for at least one level
    
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/963
    Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22fa9aa084f041c8036b5d9eee725e43ea63b6e1
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Fri Feb 7 19:26:28 2020 +0200

    mlxsw: spectrum_dpipe: Add missing error path
    
    [ Upstream commit 3a99cbb6fa7bca1995586ec2dc21b0368aad4937 ]
    
    In case devlink_dpipe_entry_ctx_prepare() failed, release RTNL that was
    previously taken and free the memory allocated by
    mlxsw_sp_erif_entry_prepare().
    
    Fixes: 2ba5999f009d ("mlxsw: spectrum: Add Support for erif table entries access")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55c549ea283cc3d681b41e9dd42b969cb480eeb9
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Thu Feb 6 02:40:58 2020 -0500

    virtio_balloon: prevent pfn array overflow
    
    [ Upstream commit 6e9826e77249355c09db6ba41cd3f84e89f4b614 ]
    
    Make sure, at build time, that pfn array is big enough to hold a single
    page.  It happens to be true since the PAGE_SHIFT value at the moment is
    20, which is 1M - exactly 256 4K balloon pages.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3edf85591fb5d2738ed5daa3c8cc16332bb87eb9
Author: Steve French <stfrench@microsoft.com>
Date:   Wed Feb 5 16:52:11 2020 -0600

    cifs: log warning message (once) if out of disk space
    
    [ Upstream commit d6fd41905ec577851734623fb905b1763801f5ef ]
    
    We ran into a confusing problem where an application wasn't checking
    return code on close and so user didn't realize that the application
    ran out of disk space.  log a warning message (once) in these
    cases. For example:
    
      [ 8407.391909] Out of space writing to \\oleg-server\small-share
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reported-by: Oleg Kravtsov <oleg@tuxera.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3c539fbfa566b04f75ef728c1b1af3eb880c7dd
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Jan 24 09:10:47 2020 +0300

    help_next should increase position index
    
    [ Upstream commit 9f198a2ac543eaaf47be275531ad5cbd50db3edf ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47f44085e01f7f68450d7a1a46369a6252505223
Author: Wenwen Wang <wenwen@cs.uga.edu>
Date:   Mon Feb 3 03:47:53 2020 +0000

    NFS: Fix memory leaks
    
    [ Upstream commit 123c23c6a7b7ecd2a3d6060bea1d94019f71fd66 ]
    
    In _nfs42_proc_copy(), 'res->commit_res.verf' is allocated through
    kzalloc() if 'args->sync' is true. In the following code, if
    'res->synchronous' is false, handle_async_copy() will be invoked. If an
    error occurs during the invocation, the following code will not be executed
    and the error will be returned . However, the allocated
    'res->commit_res.verf' is not deallocated, leading to a memory leak. This
    is also true if the invocation of process_copy_commit() returns an error.
    
    To fix the above leaks, redirect the execution to the 'out' label if an
    error is encountered.
    
    Signed-off-by: Wenwen Wang <wenwen@cs.uga.edu>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 283a7289413b661981a73b28ceb39f458fed8e84
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jan 29 12:42:57 2020 -0500

    drm/amdgpu/smu10: fix smu10_get_clock_by_type_with_voltage
    
    [ Upstream commit 1064ad4aeef94f51ca230ac639a9e996fb7867a0 ]
    
    Cull out 0 clocks to avoid a warning in DC.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/963
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70e1e529159b93cfc9aa866e9412fac1a945f26f
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Jan 28 13:19:51 2020 -0500

    drm/amdgpu/smu10: fix smu10_get_clock_by_type_with_latency
    
    [ Upstream commit 4d0a72b66065dd7e274bad6aa450196d42fd8f84 ]
    
    Only send non-0 clocks to DC for validation.  This mirrors
    what the windows driver does.
    
    Bug: https://gitlab.freedesktop.org/drm/amd/issues/963
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ed1f476e7097b0a81f55f380bc294dcd17b3a19
Author: Zhiqiang Liu <liuzhiqiang26@huawei.com>
Date:   Tue Feb 4 19:30:20 2020 +0800

    brd: check and limit max_part par
    
    [ Upstream commit c8ab422553c81a0eb070329c63725df1cd1425bc ]
    
    In brd_init func, rd_nr num of brd_device are firstly allocated
    and add in brd_devices, then brd_devices are traversed to add each
    brd_device by calling add_disk func. When allocating brd_device,
    the disk->first_minor is set to i * max_part, if rd_nr * max_part
    is larger than MINORMASK, two different brd_device may have the same
    devt, then only one of them can be successfully added.
    when rmmod brd.ko, it will cause oops when calling brd_exit.
    
    Follow those steps:
      # modprobe brd rd_nr=3 rd_size=102400 max_part=1048576
      # rmmod brd
    then, the oops will appear.
    
    Oops log:
    [  726.613722] Call trace:
    [  726.614175]  kernfs_find_ns+0x24/0x130
    [  726.614852]  kernfs_find_and_get_ns+0x44/0x68
    [  726.615749]  sysfs_remove_group+0x38/0xb0
    [  726.616520]  blk_trace_remove_sysfs+0x1c/0x28
    [  726.617320]  blk_unregister_queue+0x98/0x100
    [  726.618105]  del_gendisk+0x144/0x2b8
    [  726.618759]  brd_exit+0x68/0x560 [brd]
    [  726.619501]  __arm64_sys_delete_module+0x19c/0x2a0
    [  726.620384]  el0_svc_common+0x78/0x130
    [  726.621057]  el0_svc_handler+0x38/0x78
    [  726.621738]  el0_svc+0x8/0xc
    [  726.622259] Code: aa0203f6 aa0103f7 aa1e03e0 d503201f (7940e260)
    
    Here, we add brd_check_and_reset_par func to check and limit max_part par.
    
    --
    V5->V6:
     - remove useless code
    
    V4->V5:(suggested by Ming Lei)
     - make sure max_part is not larger than DISK_MAX_PARTS
    
    V3->V4:(suggested by Ming Lei)
     - remove useless change
     - add one limit of max_part
    
    V2->V3: (suggested by Ming Lei)
     - clear .minors when running out of consecutive minor space in brd_alloc
     - remove limit of rd_nr
    
    V1->V2:
     - add more checks in brd_check_par_valid as suggested by Ming Lei.
    
    Signed-off-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Reviewed-by: Bob Liu <bob.liu@oracle.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9598feb0859f891574dd36ec42b799347a6b71f5
Author: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
Date:   Sat Jan 11 18:44:34 2020 +0530

    microblaze: Prevent the overflow of the start
    
    [ Upstream commit 061d2c1d593076424c910cb1b64ecdb5c9a6923f ]
    
    In case the start + cache size is more than the max int the
    start overflows.
    Prevent the same.
    
    Signed-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af9be1a3b46eacded3cbc0dfeaca484dacebefd5
Author: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
Date:   Fri Jan 31 15:45:24 2020 +0200

    iwlwifi: mvm: Fix thermal zone registration
    
    [ Upstream commit baa6cf8450b72dcab11f37c47efce7c5b9b8ad0f ]
    
    Use a unique name when registering a thermal zone. Otherwise, with
    multiple NICS, we hit the following warning during the unregistration.
    
    WARNING: CPU: 2 PID: 3525 at fs/sysfs/group.c:255
     RIP: 0010:sysfs_remove_group+0x80/0x90
     Call Trace:
      dpm_sysfs_remove+0x57/0x60
      device_del+0x5a/0x350
      ? sscanf+0x4e/0x70
      device_unregister+0x1a/0x60
      hwmon_device_unregister+0x4a/0xa0
      thermal_remove_hwmon_sysfs+0x175/0x1d0
      thermal_zone_device_unregister+0x188/0x1e0
      iwl_mvm_thermal_exit+0xe7/0x100 [iwlmvm]
      iwl_op_mode_mvm_stop+0x27/0x180 [iwlmvm]
      _iwl_op_mode_stop.isra.3+0x2b/0x50 [iwlwifi]
      iwl_opmode_deregister+0x90/0xa0 [iwlwifi]
      __exit_compat+0x10/0x2c7 [iwlmvm]
      __x64_sys_delete_module+0x13f/0x270
      do_syscall_64+0x5a/0x110
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Signed-off-by: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76afc6e5075b7e0f592e5d5f39d6eecd222af673
Author: Zenghui Yu <yuzenghui@huawei.com>
Date:   Mon Dec 2 15:10:21 2019 +0800

    irqchip/gic-v3-its: Reference to its_invall_cmd descriptor when building INVALL
    
    [ Upstream commit 107945227ac5d4c37911c7841b27c64b489ce9a9 ]
    
    It looks like an obvious mistake to use its_mapc_cmd descriptor when
    building the INVALL command block. It so far worked by luck because
    both its_mapc_cmd.col and its_invall_cmd.col sit at the same offset of
    the ITS command descriptor, but we should not rely on it.
    
    Fixes: cc2d3216f53c ("irqchip: GICv3: ITS command queue")
    Signed-off-by: Zenghui Yu <yuzenghui@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20191202071021.1251-1-yuzenghui@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a5649a421a3ba25a22cc15ec257314cb53e0d9f
Author: Coly Li <colyli@suse.de>
Date:   Sat Feb 1 22:42:32 2020 +0800

    bcache: explicity type cast in bset_bkey_last()
    
    [ Upstream commit 7c02b0055f774ed9afb6e1c7724f33bf148ffdc0 ]
    
    In bset.h, macro bset_bkey_last() is defined as,
        bkey_idx((struct bkey *) (i)->d, (i)->keys)
    
    Parameter i can be variable type of data structure, the macro always
    works once the type of struct i has member 'd' and 'keys'.
    
    bset_bkey_last() is also used in macro csum_set() to calculate the
    checksum of a on-disk data structure. When csum_set() is used to
    calculate checksum of on-disk bcache super block, the parameter 'i'
    data type is struct cache_sb_disk. Inside struct cache_sb_disk (also in
    struct cache_sb) the member keys is __u16 type. But bkey_idx() expects
    unsigned int (a 32bit width), so there is problem when sending
    parameters via stack to call bkey_idx().
    
    Sparse tool from Intel 0day kbuild system reports this incompatible
    problem. bkey_idx() is part of user space API, so the simplest fix is
    to cast the (i)->keys to unsigned int type in macro bset_bkey_last().
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42cdf18d72e4cf43516119b478400d00836d9765
Author: Yunfeng Ye <yeyunfeng@huawei.com>
Date:   Thu Jan 30 22:17:26 2020 -0800

    reiserfs: prevent NULL pointer dereference in reiserfs_insert_item()
    
    [ Upstream commit aacee5446a2a1aa35d0a49dab289552578657fb4 ]
    
    The variable inode may be NULL in reiserfs_insert_item(), but there is
    no check before accessing the member of inode.
    
    Fix this by adding NULL pointer check before calling reiserfs_debug().
    
    Link: http://lkml.kernel.org/r/79c5135d-ff25-1cc9-4e99-9f572b88cc00@huawei.com
    Signed-off-by: Yunfeng Ye <yeyunfeng@huawei.com>
    Cc: zhengbin <zhengbin13@huawei.com>
    Cc: Hu Shiyuan <hushiyuan@huawei.com>
    Cc: Feilong Lin <linfeilong@huawei.com>
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acaf62810c91f2a733f784e62b126466ec7950a7
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Jan 30 22:16:37 2020 -0800

    lib/scatterlist.c: adjust indentation in __sg_alloc_table
    
    [ Upstream commit 4e456fee215677584cafa7f67298a76917e89c64 ]
    
    Clang warns:
    
      ../lib/scatterlist.c:314:5: warning: misleading indentation; statement
      is not part of the previous 'if' [-Wmisleading-indentation]
                              return -ENOMEM;
                              ^
      ../lib/scatterlist.c:311:4: note: previous statement is here
                              if (prv)
                              ^
      1 warning generated.
    
    This warning occurs because there is a space before the tab on this
    line.  Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Link: http://lkml.kernel.org/r/20191218033606.11942-1-natechancellor@gmail.com
    Link: https://github.com/ClangBuiltLinux/linux/issues/830
    Fixes: edce6820a9fd ("scatterlist: prevent invalid free when alloc fails")
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4720fb09d5c0211ca2380bfa0f6300c18039bbab
Author: wangyan <wangyan122@huawei.com>
Date:   Thu Jan 30 22:11:50 2020 -0800

    ocfs2: fix a NULL pointer dereference when call ocfs2_update_inode_fsync_trans()
    
    [ Upstream commit 9f16ca48fc818a17de8be1f75d08e7f4addc4497 ]
    
    I found a NULL pointer dereference in ocfs2_update_inode_fsync_trans(),
    handle->h_transaction may be NULL in this situation:
    
    ocfs2_file_write_iter
      ->__generic_file_write_iter
          ->generic_perform_write
            ->ocfs2_write_begin
              ->ocfs2_write_begin_nolock
                ->ocfs2_write_cluster_by_desc
                  ->ocfs2_write_cluster
                    ->ocfs2_mark_extent_written
                      ->ocfs2_change_extent_flag
                        ->ocfs2_split_extent
                          ->ocfs2_try_to_merge_extent
                            ->ocfs2_extend_rotate_transaction
                              ->ocfs2_extend_trans
                                ->jbd2_journal_restart
                                  ->jbd2__journal_restart
                                    // handle->h_transaction is NULL here
                                    ->handle->h_transaction = NULL;
                                    ->start_this_handle
                                      /* journal aborted due to storage
                                         network disconnection, return error */
                                      ->return -EROFS;
                             /* line 3806 in ocfs2_try_to_merge_extent (),
                                it will ignore ret error. */
                            ->ret = 0;
            ->...
            ->ocfs2_write_end
              ->ocfs2_write_end_nolock
                ->ocfs2_update_inode_fsync_trans
                  // NULL pointer dereference
                  ->oi->i_sync_tid = handle->h_transaction->t_tid;
    
    The information of NULL pointer dereference as follows:
        JBD2: Detected IO errors while flushing file data on dm-11-45
        Aborting journal on device dm-11-45.
        JBD2: Error -5 detected when updating journal superblock for dm-11-45.
        (dd,22081,3):ocfs2_extend_trans:474 ERROR: status = -30
        (dd,22081,3):ocfs2_try_to_merge_extent:3877 ERROR: status = -30
        Unable to handle kernel NULL pointer dereference at
        virtual address 0000000000000008
        Mem abort info:
          ESR = 0x96000004
          Exception class = DABT (current EL), IL = 32 bits
          SET = 0, FnV = 0
          EA = 0, S1PTW = 0
        Data abort info:
          ISV = 0, ISS = 0x00000004
          CM = 0, WnR = 0
        user pgtable: 4k pages, 48-bit VAs, pgdp = 00000000e74e1338
        [0000000000000008] pgd=0000000000000000
        Internal error: Oops: 96000004 [#1] SMP
        Process dd (pid: 22081, stack limit = 0x00000000584f35a9)
        CPU: 3 PID: 22081 Comm: dd Kdump: loaded
        Hardware name: Huawei TaiShan 2280 V2/BC82AMDD, BIOS 0.98 08/25/2019
        pstate: 60400009 (nZCv daif +PAN -UAO)
        pc : ocfs2_write_end_nolock+0x2b8/0x550 [ocfs2]
        lr : ocfs2_write_end_nolock+0x2a0/0x550 [ocfs2]
        sp : ffff0000459fba70
        x29: ffff0000459fba70 x28: 0000000000000000
        x27: ffff807ccf7f1000 x26: 0000000000000001
        x25: ffff807bdff57970 x24: ffff807caf1d4000
        x23: ffff807cc79e9000 x22: 0000000000001000
        x21: 000000006c6cd000 x20: ffff0000091d9000
        x19: ffff807ccb239db0 x18: ffffffffffffffff
        x17: 000000000000000e x16: 0000000000000007
        x15: ffff807c5e15bd78 x14: 0000000000000000
        x13: 0000000000000000 x12: 0000000000000000
        x11: 0000000000000000 x10: 0000000000000001
        x9 : 0000000000000228 x8 : 000000000000000c
        x7 : 0000000000000fff x6 : ffff807a308ed6b0
        x5 : ffff7e01f10967c0 x4 : 0000000000000018
        x3 : d0bc661572445600 x2 : 0000000000000000
        x1 : 000000001b2e0200 x0 : 0000000000000000
        Call trace:
         ocfs2_write_end_nolock+0x2b8/0x550 [ocfs2]
         ocfs2_write_end+0x4c/0x80 [ocfs2]
         generic_perform_write+0x108/0x1a8
         __generic_file_write_iter+0x158/0x1c8
         ocfs2_file_write_iter+0x668/0x950 [ocfs2]
         __vfs_write+0x11c/0x190
         vfs_write+0xac/0x1c0
         ksys_write+0x6c/0xd8
         __arm64_sys_write+0x24/0x30
         el0_svc_common+0x78/0x130
         el0_svc_handler+0x38/0x78
         el0_svc+0x8/0xc
    
    To prevent NULL pointer dereference in this situation, we use
    is_handle_aborted() before using handle->h_transaction->t_tid.
    
    Link: http://lkml.kernel.org/r/03e750ab-9ade-83aa-b000-b9e81e34e539@huawei.com
    Signed-off-by: Yan Wang <wangyan122@huawei.com>
    Reviewed-by: Jun Piao <piaojun@huawei.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Joseph Qi <jiangqi903@gmail.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1b8859e8db0c47184ad383720a086ee7f892a59
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue Jan 28 17:09:52 2020 +0100

    radeon: insert 10ms sleep in dce5_crtc_load_lut
    
    [ Upstream commit ec3d65082d7dabad6fa8f66a8ef166f2d522d6b2 ]
    
    Per at least one tester this is enough magic to recover the regression
    introduced for some people (but not all) in
    
    commit b8e2b0199cc377617dc238f5106352c06dcd3fa2
    Author: Peter Rosin <peda@axentia.se>
    Date:   Tue Jul 4 12:36:57 2017 +0200
    
        drm/fb-helper: factor out pseudo-palette
    
    which for radeon had the side-effect of refactoring out a seemingly
    redudant writing of the color palette.
    
    10ms in a fairly slow modeset path feels like an acceptable form of
    duct-tape, so maybe worth a shot and see what sticks.
    
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Michel Dänzer <michel.daenzer@amd.com>
    References: https://bugzilla.kernel.org/show_bug.cgi?id=198123
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ed840b756da8a3239cec082682ff70ffe9a5f22
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Jan 24 10:03:06 2020 +0300

    trigger_next should increase position index
    
    [ Upstream commit 6722b23e7a2ace078344064a9735fb73e554e9ef ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    Without patch:
     # dd bs=30 skip=1 if=/sys/kernel/tracing/events/sched/sched_switch/trigger
     dd: /sys/kernel/tracing/events/sched/sched_switch/trigger: cannot skip to specified offset
     n traceoff snapshot stacktrace enable_event disable_event enable_hist disable_hist hist
     # Available triggers:
     # traceon traceoff snapshot stacktrace enable_event disable_event enable_hist disable_hist hist
     6+1 records in
     6+1 records out
     206 bytes copied, 0.00027916 s, 738 kB/s
    
    Notice the printing of "# Available triggers:..." after the line.
    
    With the patch:
     # dd bs=30 skip=1 if=/sys/kernel/tracing/events/sched/sched_switch/trigger
     dd: /sys/kernel/tracing/events/sched/sched_switch/trigger: cannot skip to specified offset
     n traceoff snapshot stacktrace enable_event disable_event enable_hist disable_hist hist
     2+1 records in
     2+1 records out
     88 bytes copied, 0.000526867 s, 167 kB/s
    
    It only prints the end of the file, and does not restart.
    
    Link: http://lkml.kernel.org/r/3c35ee24-dd3a-8119-9c19-552ed253388a@virtuozzo.com
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddb005d906726d139b983f28d07a370b62df40a6
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Fri Jan 24 10:02:56 2020 +0300

    ftrace: fpid_next() should increase position index
    
    [ Upstream commit e4075e8bdffd93a9b6d6e1d52fabedceeca5a91b ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    Without patch:
     # dd bs=4 skip=1 if=/sys/kernel/tracing/set_ftrace_pid
     dd: /sys/kernel/tracing/set_ftrace_pid: cannot skip to specified offset
     id
     no pid
     2+1 records in
     2+1 records out
     10 bytes copied, 0.000213285 s, 46.9 kB/s
    
    Notice the "id" followed by "no pid".
    
    With the patch:
     # dd bs=4 skip=1 if=/sys/kernel/tracing/set_ftrace_pid
     dd: /sys/kernel/tracing/set_ftrace_pid: cannot skip to specified offset
     id
     0+1 records in
     0+1 records out
     3 bytes copied, 0.000202112 s, 14.8 kB/s
    
    Notice that it only prints "id" and not the "no pid" afterward.
    
    Link: http://lkml.kernel.org/r/4f87c6ad-f114-30bb-8506-c32274ce2992@virtuozzo.com
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2f1cd6a3aa4745255ab0eb5bf264f9bd89ee6c
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Tue Jan 28 14:39:26 2020 +1000

    drm/nouveau/disp/nv50-: prevent oops when no channel method map provided
    
    [ Upstream commit 0e6176c6d286316e9431b4f695940cfac4ffe6c2 ]
    
    The implementations for most channel types contains a map of methods to
    priv registers in order to provide debugging info when a disp exception
    has been raised.
    
    This info is missing from the implementation of PIO channels as they're
    rather simplistic already, however, if an exception is raised by one of
    them, we'd end up triggering a NULL-pointer deref.  Not ideal...
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=206299
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60f3843b695b9bccaff70a46d5975613d5386c7d
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon Dec 16 11:24:57 2019 +0000

    irqchip/gic-v3: Only provision redistributors that are enabled in ACPI
    
    [ Upstream commit 926b5dfa6b8dc666ff398044af6906b156e1d949 ]
    
    We currently allocate redistributor region structures for
    individual redistributors when ACPI doesn't present us with
    compact MMIO regions covering multiple redistributors.
    
    It turns out that we allocate these structures even when
    the redistributor is flagged as disabled by ACPI. It works
    fine until someone actually tries to tarse one of these
    structures, and access the corresponding MMIO region.
    
    Instead, track the number of enabled redistributors, and
    only allocate what is required. This makes sure that there
    is no invalid data to misuse.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reported-by: Heyi Guo <guoheyi@huawei.com>
    Tested-by: Heyi Guo <guoheyi@huawei.com>
    Link: https://lore.kernel.org/r/20191216062745.63397-1-guoheyi@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 138ed22777b48332712220e2ea57ef4dafe1dab6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 7 22:01:04 2020 +0100

    rbd: work around -Wuninitialized warning
    
    [ Upstream commit a55e601b2f02df5db7070e9a37bd655c9c576a52 ]
    
    gcc -O3 warns about a dummy variable that is passed
    down into rbd_img_fill_nodata without being initialized:
    
    drivers/block/rbd.c: In function 'rbd_img_fill_nodata':
    drivers/block/rbd.c:2573:13: error: 'dummy' is used uninitialized in this function [-Werror=uninitialized]
      fctx->iter = *fctx->pos;
    
    Since this is a dummy, I assume the warning is harmless, but
    it's better to initialize it anyway and avoid the warning.
    
    Fixes: mmtom ("init/Kconfig: enable -O3 for all arches")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68983ba2c746eeaff7192948ed63377d359df5fb
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Dec 10 20:29:40 2019 -0500

    ceph: check availability of mds cluster on mount after wait timeout
    
    [ Upstream commit 97820058fb2831a4b203981fa2566ceaaa396103 ]
    
    If all the MDS daemons are down for some reason, then the first mount
    attempt will fail with EIO after the mount request times out.  A mount
    attempt will also fail with EIO if all of the MDS's are laggy.
    
    This patch changes the code to return -EHOSTUNREACH in these situations
    and adds a pr_info error message to help the admin determine the cause.
    
    URL: https://tracker.ceph.com/issues/4386
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca2b45936522f128c6b7b26399fb316be2f35af1
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Sat Jan 25 12:10:02 2020 +0300

    bpf: map_seq_next should always increase position index
    
    [ Upstream commit 90435a7891a2259b0f74c5a1bc5600d0d64cba8f ]
    
    If seq_file .next fuction does not change position index,
    read after some lseek can generate an unexpected output.
    
    See also: https://bugzilla.kernel.org/show_bug.cgi?id=206283
    
    v1 -> v2: removed missed increment in end of function
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/eca84fdd-c374-a154-d874-6c7b55fc3bc4@virtuozzo.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35c9bcb672e36fc64b84b1b7b3b8ff93c8b6cc49
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Jan 22 11:07:56 2020 +1000

    cifs: fix NULL dereference in match_prepath
    
    [ Upstream commit fe1292686333d1dadaf84091f585ee903b9ddb84 ]
    
    RHBZ: 1760879
    
    Fix an oops in match_prepath() by making sure that the prepath string is not
    NULL before we pass it into strcmp().
    
    This is similar to other checks we make for example in cifs_root_iget()
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d84a6da925fa9462a088f4af21c39722b419f9b3
Author: Colin Ian King <colin.king@canonical.com>
Date:   Sun Jan 26 00:09:54 2020 +0000

    iwlegacy: ensure loop counter addr does not wrap and cause an infinite loop
    
    [ Upstream commit c2f9a4e4a5abfc84c01b738496b3fd2d471e0b18 ]
    
    The loop counter addr is a u16 where as the upper limit of the loop
    is an int. In the unlikely event that the il->cfg->eeprom_size is
    greater than 64K then we end up with an infinite loop since addr will
    wrap around an never reach upper loop limit. Fix this by making addr
    an int.
    
    Addresses-Coverity: ("Infinite loop")
    Fixes: be663ab67077 ("iwlwifi: split the drivers for agn and legacy devices 3945/4965")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Stanislaw Gruszka <stf_xl@wp.pl>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c298c4e77e298ec41b56b86eed07f9e451f43fe
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:15:46 2019 -0700

    hostap: Adjust indentation in prism2_hostapd_add_sta
    
    [ Upstream commit b61156fba74f659d0bc2de8f2dbf5bad9f4b8faf ]
    
    Clang warns:
    
    ../drivers/net/wireless/intersil/hostap/hostap_ap.c:2511:3: warning:
    misleading indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
            if (sta->tx_supp_rates & WLAN_RATE_5M5)
            ^
    ../drivers/net/wireless/intersil/hostap/hostap_ap.c:2509:2: note:
    previous statement is here
            if (sta->tx_supp_rates & WLAN_RATE_2M)
            ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on this
    line. Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    Fixes: ff1d2767d5a4 ("Add HostAP wireless driver.")
    Link: https://github.com/ClangBuiltLinux/linux/issues/813
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43266deb775f6cb8b3b596f72743e3cc87f492f5
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Jan 10 13:37:59 2020 +0100

    ARM: 8951/1: Fix Kexec compilation issue.
    
    [ Upstream commit 76950f7162cad51d2200ebd22c620c14af38f718 ]
    
    To perform the reserve_crashkernel() operation kexec uses SECTION_SIZE to
    find a memblock in a range.
    SECTION_SIZE is not defined for nommu systems. Trying to compile kexec in
    these conditions results in a build error:
    
      linux/arch/arm/kernel/setup.c: In function ‘reserve_crashkernel’:
      linux/arch/arm/kernel/setup.c:1016:25: error: ‘SECTION_SIZE’ undeclared
         (first use in this function); did you mean ‘SECTIONS_WIDTH’?
                 crash_size, SECTION_SIZE);
                             ^~~~~~~~~~~~
                             SECTIONS_WIDTH
      linux/arch/arm/kernel/setup.c:1016:25: note: each undeclared identifier
         is reported only once for each function it appears in
      linux/scripts/Makefile.build:265: recipe for target 'arch/arm/kernel/setup.o'
         failed
    
    Make KEXEC depend on MMU to fix the compilation issue.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 267e902d6c9ef88af4d0ba452d02d18297f06204
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Dec 4 20:46:13 2019 +0800

    jbd2: make sure ESHUTDOWN to be recorded in the journal superblock
    
    [ Upstream commit 0e98c084a21177ef136149c6a293b3d1eb33ff92 ]
    
    Commit fb7c02445c49 ("ext4: pass -ESHUTDOWN code to jbd2 layer") want
    to allow jbd2 layer to distinguish shutdown journal abort from other
    error cases. So the ESHUTDOWN should be taken precedence over any other
    errno which has already been recoded after EXT4_FLAGS_SHUTDOWN is set,
    but it only update errno in the journal suoerblock now if the old errno
    is 0.
    
    Fixes: fb7c02445c49 ("ext4: pass -ESHUTDOWN code to jbd2 layer")
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20191204124614.45424-4-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d61ce1d0cd37742258fbb3a86b3d5abfb60d2864
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Dec 4 20:46:11 2019 +0800

    jbd2: switch to use jbd2_journal_abort() when failed to submit the commit record
    
    [ Upstream commit d0a186e0d3e7ac05cc77da7c157dae5aa59f95d9 ]
    
    We invoke jbd2_journal_abort() to abort the journal and record errno
    in the jbd2 superblock when committing journal transaction besides the
    failure on submitting the commit record. But there is no need for the
    case and we can also invoke jbd2_journal_abort() instead of
    __jbd2_journal_abort_hard().
    
    Fixes: 818d276ceb83a ("ext4: Add the journal checksum feature")
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20191204124614.45424-2-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 634efb750435d0a489dc58477d4fcb88b2692942
Author: Lorenz Bauer <lmb@cloudflare.com>
Date:   Fri Jan 24 11:27:54 2020 +0000

    selftests: bpf: Reset global state between reuseport test runs
    
    [ Upstream commit 51bad0f05616c43d6d34b0a19bcc9bdab8e8fb39 ]
    
    Currently, there is a lot of false positives if a single reuseport test
    fails. This is because expected_results and the result map are not cleared.
    
    Zero both after individual test runs, which fixes the mentioned false
    positives.
    
    Fixes: 91134d849a0e ("bpf: Test BPF_PROG_TYPE_SK_REUSEPORT")
    Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/20200124112754.19664-5-lmb@cloudflare.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbf6515718c55329147848d98a4e94db2180d4cd
Author: Lu Baolu <baolu.lu@linux.intel.com>
Date:   Thu Jan 16 09:52:36 2020 +0800

    iommu/vt-d: Remove unnecessary WARN_ON_ONCE()
    
    [ Upstream commit 857f081426e5aa38313426c13373730f1345fe95 ]
    
    Address field in device TLB invalidation descriptor is qualified
    by the S field. If S field is zero, a single page at page address
    specified by address [63:12] is requested to be invalidated. If S
    field is set, the least significant bit in the address field with
    value 0b (say bit N) indicates the invalidation address range. The
    spec doesn't require the address [N - 1, 0] to be cleared, hence
    remove the unnecessary WARN_ON_ONCE().
    
    Otherwise, the caller might set "mask = MAX_AGAW_PFN_WIDTH" in order
    to invalidating all the cached mappings on an endpoint, and below
    overflow error will be triggered.
    
    [...]
    UBSAN: Undefined behaviour in drivers/iommu/dmar.c:1354:3
    shift exponent 64 is too large for 64-bit type 'long long unsigned int'
    [...]
    
    Reported-and-tested-by: Frank <fgndev@posteo.de>
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fdf57e5dd38194dbb98c9d9b7254a71742aca6a
Author: Liang Chen <liangchen.linux@gmail.com>
Date:   Fri Jan 24 01:01:26 2020 +0800

    bcache: cached_dev_free needs to put the sb page
    
    [ Upstream commit e8547d42095e58bee658f00fef8e33d2a185c927 ]
    
    Same as cache device, the buffer page needs to be put while
    freeing cached_dev.  Otherwise a page would be leaked every
    time a cached_dev is stopped.
    
    Signed-off-by: Liang Chen <liangchen.linux@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit daa58bde67a2e8d6e03ed0fb27adf6fe00847063
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Wed Aug 21 16:26:53 2019 +1000

    powerpc/sriov: Remove VF eeh_dev state when disabling SR-IOV
    
    [ Upstream commit 1fb4124ca9d456656a324f1ee29b7bf942f59ac8 ]
    
    When disabling virtual functions on an SR-IOV adapter we currently do not
    correctly remove the EEH state for the now-dead virtual functions. When
    removing the pci_dn that was created for the VF when SR-IOV was enabled
    we free the corresponding eeh_dev without removing it from the child device
    list of the eeh_pe that contained it. This can result in crashes due to the
    use-after-free.
    
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Sam Bobroff <sbobroff@linux.ibm.com>
    Tested-by: Sam Bobroff <sbobroff@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190821062655.19735-1-oohall@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab45b8e036b1ebd6315f54097ba62c0f72e99f25
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Thu Jan 23 08:23:06 2020 +1000

    drm/nouveau/mmu: fix comptag memory leak
    
    [ Upstream commit 35e4909b6a2b4005ced3c4238da60d926b78fdea ]
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4de4c0ccc08f81fc4f140ad910a3cabf2d39d08
Author: Peter Große <pegro@friiks.de>
Date:   Wed Jan 22 19:01:06 2020 +0100

    ALSA: hda - Add docking station support for Lenovo Thinkpad T420s
    
    [ Upstream commit ef7d84caa5928b40b1c93a26dbe5a3f12737c6ab ]
    
    Lenovo Thinkpad T420s uses the same codec as T420, so apply the
    same quirk to enable audio output on a docking station.
    
    Signed-off-by: Peter Große <pegro@friiks.de>
    Link: https://lore.kernel.org/r/20200122180106.9351-1-pegro@friiks.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef728d20156b9272e3673e33599ce3b602838d59
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jan 16 17:57:58 2020 +0000

    driver core: platform: fix u32 greater or equal to zero comparison
    
    [ Upstream commit 0707cfa5c3ef58effb143db9db6d6e20503f9dec ]
    
    Currently the check that a u32 variable i is >= 0 is always true because
    the unsigned variable will never be negative, causing the loop to run
    forever.  Fix this by changing the pre-decrement check to a zero check on
    i followed by a decrement of i.
    
    Addresses-Coverity: ("Unsigned compared against 0")
    Fixes: 39cc539f90d0 ("driver core: platform: Prevent resouce overflow from causing infinite loops")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Link: https://lore.kernel.org/r/20200116175758.88396-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 149412daa253bd38ac4c213dc2de1ddfb7839d80
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Tue Dec 10 14:33:39 2019 +0100

    s390/ftrace: generate traced function stack frame
    
    [ Upstream commit 45f7a0da600d3c409b5ad8d5ddddacd98ddc8840 ]
    
    Currently backtrace from ftraced function does not contain ftraced
    function itself. e.g. for "path_openat":
    
    arch_stack_walk+0x15c/0x2d8
    stack_trace_save+0x50/0x68
    stack_trace_call+0x15e/0x3d8
    ftrace_graph_caller+0x0/0x1c <-- ftrace code
    do_filp_open+0x7c/0xe8 <-- ftraced function caller
    do_open_execat+0x76/0x1b8
    open_exec+0x52/0x78
    load_elf_binary+0x180/0x1160
    search_binary_handler+0x8e/0x288
    load_script+0x2a8/0x2b8
    search_binary_handler+0x8e/0x288
    __do_execve_file.isra.39+0x6fa/0xb40
    __s390x_sys_execve+0x56/0x68
    system_call+0xdc/0x2d8
    
    Ftraced function is expected in the backtrace by ftrace kselftests, which
    are now failing. It would also be nice to have it for clarity reasons.
    
    "ftrace_caller" itself is called without stack frame allocated for it
    and does not store its caller (ftraced function). Instead it simply
    allocates a stack frame for "ftrace_trace_function" and sets backchain
    to point to ftraced function stack frame (which contains ftraced function
    caller in saved r14).
    
    To fix this issue make "ftrace_caller" allocate a stack frame
    for itself just to store ftraced function for the stack unwinder.
    As a result backtrace looks like the following:
    
    arch_stack_walk+0x15c/0x2d8
    stack_trace_save+0x50/0x68
    stack_trace_call+0x15e/0x3d8
    ftrace_graph_caller+0x0/0x1c <-- ftrace code
    path_openat+0x6/0xd60  <-- ftraced function
    do_filp_open+0x7c/0xe8 <-- ftraced function caller
    do_open_execat+0x76/0x1b8
    open_exec+0x52/0x78
    load_elf_binary+0x180/0x1160
    search_binary_handler+0x8e/0x288
    load_script+0x2a8/0x2b8
    search_binary_handler+0x8e/0x288
    __do_execve_file.isra.39+0x6fa/0xb40
    __s390x_sys_execve+0x56/0x68
    system_call+0xdc/0x2d8
    
    Reported-by: Sven Schnelle <sven.schnelle@ibm.com>
    Tested-by: Sven Schnelle <sven.schnelle@ibm.com>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29a8e429bade0966ff89389d0b0928b424481ce9
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Wed Jan 8 14:46:00 2020 +0100

    s390: adjust -mpacked-stack support check for clang 10
    
    [ Upstream commit 253b3c4b2920e07ce9e2b18800b9b65245e2fafa ]
    
    clang 10 introduces -mpacked-stack compiler option implementation. At the
    same time currently it does not support a combination of -mpacked-stack
    and -mbackchain. This leads to the following build error:
    
    clang: error: unsupported option '-mpacked-stack with -mbackchain' for
    target 's390x-ibm-linux'
    
    If/when clang adds support for a combination of -mpacked-stack and
    -mbackchain it would also require -msoft-float (like gcc does). According
    to Ulrich Weigand "stack slot assigned to the kernel backchain overlaps
    the stack slot assigned to the FPR varargs (both are required to be
    placed immediately after the saved r15 slot if present)."
    
    Extend -mpacked-stack compiler option support check to include all 3
    options -mpacked-stack -mbackchain -msoft-float which must present to
    support -mpacked-stack with -mbackchain.
    
    Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f965d5a895b85fc11ffee219763834a548427a9d
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Jan 22 13:11:54 2020 +0900

    x86/decoder: Add TEST opcode to Group3-2
    
    [ Upstream commit 8b7e20a7ba54836076ff35a28349dabea4cec48f ]
    
    Add TEST opcode to Group3-2 reg=001b as same as Group3-1 does.
    
    Commit
    
      12a78d43de76 ("x86/decoder: Add new TEST instruction pattern")
    
    added a TEST opcode assignment to f6 XX/001/XXX (Group 3-1), but did
    not add f7 XX/001/XXX (Group 3-2).
    
    Actually, this TEST opcode variant (ModRM.reg /1) is not described in
    the Intel SDM Vol2 but in AMD64 Architecture Programmer's Manual Vol.3,
    Appendix A.2 Table A-6. ModRM.reg Extensions for the Primary Opcode Map.
    
    Without this fix, Randy found a warning by insn_decoder_test related
    to this issue as below.
    
        HOSTCC  arch/x86/tools/insn_decoder_test
        HOSTCC  arch/x86/tools/insn_sanity
        TEST    posttest
      arch/x86/tools/insn_decoder_test: warning: Found an x86 instruction decoder bug, please report this.
      arch/x86/tools/insn_decoder_test: warning: ffffffff81000bf1:  f7 0b 00 01 08 00       testl  $0x80100,(%rbx)
      arch/x86/tools/insn_decoder_test: warning: objdump says 6 bytes, but insn_get_length() says 2
      arch/x86/tools/insn_decoder_test: warning: Decoded and checked 11913894 instructions with 1 failures
        TEST    posttest
      arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x871ce29c)
    
    To fix this error, add the TEST opcode according to AMD64 APM Vol.3.
    
     [ bp: Massage commit message. ]
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Tested-by: Randy Dunlap <rdunlap@infradead.org>
    Link: https://lkml.kernel.org/r/157966631413.9580.10311036595431878351.stgit@devnote2
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4feefb5cd5859dfcd9e4ce1e6dd7265052c2da04
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sat Jan 18 02:14:35 2020 +0900

    kbuild: use -S instead of -E for precise cc-option test in Kconfig
    
    [ Upstream commit 3bed1b7b9d79ca40e41e3af130931a3225e951a3 ]
    
    Currently, -E (stop after the preprocessing stage) is used to check
    whether the given compiler flag is supported.
    
    While it is faster than -S (or -c), it can be false-positive. You need
    to run the compilation proper to check the flag more precisely.
    
    For example, -E and -S disagree about the support of
    "--param asan-instrument-allocas=1".
    
    $ gcc -Werror --param asan-instrument-allocas=1 -E -x c /dev/null -o /dev/null
    $ echo $?
    0
    
    $ gcc -Werror --param asan-instrument-allocas=1 -S -x c /dev/null -o /dev/null
    cc1: error: invalid --param name ‘asan-instrument-allocas’; did you mean ‘asan-instrument-writes’?
    $ echo $?
    1
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afdf4de910986e50567c92b9e4ff901606013978
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Mon Jan 20 18:01:17 2020 +0200

    ALSA: hda/hdmi - add retry logic to parse_intel_hdmi()
    
    [ Upstream commit 2928fa0a97ebb9549cb877fdc99aed9b95438c3a ]
    
    The initial snd_hda_get_sub_node() can fail on certain
    devices (e.g. some Chromebook models using Intel GLK).
    The failure rate is very low, but as this is is part of
    the probe process, end-user impact is high.
    
    In observed cases, related hardware status registers have
    expected values, but the node query still fails. Retrying
    the node query does seem to help, so fix the problem by
    adding retry logic to the query. This does not impact
    non-Intel platforms.
    
    BugLink: https://github.com/thesofproject/linux/issues/1642
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Link: https://lore.kernel.org/r/20200120160117.29130-4-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5286e2dfb08245dbdbf5475deed7edd707f18ee4
Author: John Garry <john.garry@huawei.com>
Date:   Fri Jan 17 01:38:43 2020 +0800

    irqchip/mbigen: Set driver .suppress_bind_attrs to avoid remove problems
    
    [ Upstream commit d6152e6ec9e2171280436f7b31a571509b9287e1 ]
    
    The following crash can be seen for setting
    CONFIG_DEBUG_TEST_DRIVER_REMOVE=y for DT FW (which some people still use):
    
    Hisilicon MBIGEN-V2 60080000.interrupt-controller: Failed to create mbi-gen irqdomain
    Hisilicon MBIGEN-V2: probe of 60080000.interrupt-controller failed with error -12
    
    [...]
    
    Unable to handle kernel paging request at virtual address 0000000000005008
     Mem abort info:
       ESR = 0x96000004
       EC = 0x25: DABT (current EL), IL = 32 bits
       SET = 0, FnV = 0
       EA = 0, S1PTW = 0
     Data abort info:
       ISV = 0, ISS = 0x00000004
       CM = 0, WnR = 0
     user pgtable: 4k pages, 48-bit VAs, pgdp=0000041fb9990000
     [0000000000005008] pgd=0000000000000000
     Internal error: Oops: 96000004 [#1] PREEMPT SMP
     Modules linked in:
     CPU: 7 PID: 1 Comm: swapper/0 Not tainted 5.5.0-rc6-00002-g3fc42638a506-dirty #1622
     Hardware name: Huawei Taishan 2280 /D05, BIOS Hisilicon D05 IT21 Nemo 2.0 RC0 04/18/2018
     pstate: 40000085 (nZcv daIf -PAN -UAO)
     pc : mbigen_set_type+0x38/0x60
     lr : __irq_set_trigger+0x6c/0x188
     sp : ffff800014b4b400
     x29: ffff800014b4b400 x28: 0000000000000007
     x27: 0000000000000000 x26: 0000000000000000
     x25: ffff041fd83bd0d4 x24: ffff041fd83bd188
     x23: 0000000000000000 x22: ffff80001193ce00
     x21: 0000000000000004 x20: 0000000000000000
     x19: ffff041fd83bd000 x18: ffffffffffffffff
     x17: 0000000000000000 x16: 0000000000000000
     x15: ffff8000119098c8 x14: ffff041fb94ec91c
     x13: ffff041fb94ec1a1 x12: 0000000000000030
     x11: 0101010101010101 x10: 0000000000000040
     x9 : 0000000000000000 x8 : ffff041fb98c6680
     x7 : ffff800014b4b380 x6 : ffff041fd81636c8
     x5 : 0000000000000000 x4 : 000000000000025f
     x3 : 0000000000005000 x2 : 0000000000005008
     x1 : 0000000000000004 x0 : 0000000080000000
     Call trace:
      mbigen_set_type+0x38/0x60
      __setup_irq+0x744/0x900
      request_threaded_irq+0xe0/0x198
      pcie_pme_probe+0x98/0x118
      pcie_port_probe_service+0x38/0x78
      really_probe+0xa0/0x3e0
      driver_probe_device+0x58/0x100
      __device_attach_driver+0x90/0xb0
      bus_for_each_drv+0x64/0xc8
      __device_attach+0xd8/0x138
      device_initial_probe+0x10/0x18
      bus_probe_device+0x90/0x98
      device_add+0x4c4/0x770
      device_register+0x1c/0x28
      pcie_port_device_register+0x1e4/0x4f0
      pcie_portdrv_probe+0x34/0xd8
      local_pci_probe+0x3c/0xa0
      pci_device_probe+0x128/0x1c0
      really_probe+0xa0/0x3e0
      driver_probe_device+0x58/0x100
      __device_attach_driver+0x90/0xb0
      bus_for_each_drv+0x64/0xc8
      __device_attach+0xd8/0x138
      device_attach+0x10/0x18
      pci_bus_add_device+0x4c/0xb8
      pci_bus_add_devices+0x38/0x88
      pci_host_probe+0x3c/0xc0
      pci_host_common_probe+0xf0/0x208
      hisi_pcie_almost_ecam_probe+0x24/0x30
      platform_drv_probe+0x50/0xa0
      really_probe+0xa0/0x3e0
      driver_probe_device+0x58/0x100
      device_driver_attach+0x6c/0x90
      __driver_attach+0x84/0xc8
      bus_for_each_dev+0x74/0xc8
      driver_attach+0x20/0x28
      bus_add_driver+0x148/0x1f0
      driver_register+0x60/0x110
      __platform_driver_register+0x40/0x48
      hisi_pcie_almost_ecam_driver_init+0x1c/0x24
    
    The specific problem here is that the mbigen driver real probe has failed
    as the mbigen_of_create_domain()->of_platform_device_create() call fails,
    the reason for that being that we never destroyed the platform device
    created during the remove test dry run and there is some conflict.
    
    Since we generally would never want to unbind this driver, and to save
    adding a driver tear down path for that, just set the driver
    .suppress_bind_attrs member to avoid this possibility.
    
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Link: https://lore.kernel.org/r/1579196323-180137-1-git-send-email-john.garry@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf03695ce94291731385101ea2fb1ee21eab83e5
Author: Brandon Maier <brandon.maier@rockwellcollins.com>
Date:   Thu May 30 17:52:23 2019 -0500

    remoteproc: Initialize rproc_class before use
    
    [ Upstream commit a8f40111d184098cd2b3dc0c7170c42250a5fa09 ]
    
    The remoteproc_core and remoteproc drivers all initialize with module_init().
    However remoteproc drivers need the rproc_class during their probe. If one of
    the remoteproc drivers runs init and gets through probe before
    remoteproc_init() runs, a NULL pointer access of rproc_class's `glue_dirs`
    spinlock occurs.
    
    > Unable to handle kernel NULL pointer dereference at virtual address 000000dc
    > pgd = c0004000
    > [000000dc] *pgd=00000000
    > Internal error: Oops: 5 [#1] PREEMPT ARM
    > Modules linked in:
    > CPU: 0 PID: 1 Comm: swapper Tainted: G        W       4.14.106-rt56 #1
    > Hardware name: Generic OMAP36xx (Flattened Device Tree)
    > task: c6050000 task.stack: c604a000
    > PC is at rt_spin_lock+0x40/0x6c
    > LR is at rt_spin_lock+0x28/0x6c
    > pc : [<c0523c90>]    lr : [<c0523c78>]    psr: 60000013
    > sp : c604bdc0  ip : 00000000  fp : 00000000
    > r10: 00000000  r9 : c61c7c10  r8 : c6269c20
    > r7 : c0905888  r6 : c6269c20  r5 : 00000000  r4 : 000000d4
    > r3 : 000000dc  r2 : c6050000  r1 : 00000002  r0 : 000000d4
    > Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    ...
    > [<c0523c90>] (rt_spin_lock) from [<c03b65a4>] (get_device_parent+0x54/0x17c)
    > [<c03b65a4>] (get_device_parent) from [<c03b6bec>] (device_add+0xe0/0x5b4)
    > [<c03b6bec>] (device_add) from [<c042adf4>] (rproc_add+0x18/0xd8)
    > [<c042adf4>] (rproc_add) from [<c01110e4>] (my_rproc_probe+0x158/0x204)
    > [<c01110e4>] (my_rproc_probe) from [<c03bb6b8>] (platform_drv_probe+0x34/0x70)
    > [<c03bb6b8>] (platform_drv_probe) from [<c03b9dd4>] (driver_probe_device+0x2c8/0x420)
    > [<c03b9dd4>] (driver_probe_device) from [<c03ba02c>] (__driver_attach+0x100/0x11c)
    > [<c03ba02c>] (__driver_attach) from [<c03b7d08>] (bus_for_each_dev+0x7c/0xc0)
    > [<c03b7d08>] (bus_for_each_dev) from [<c03b910c>] (bus_add_driver+0x1cc/0x264)
    > [<c03b910c>] (bus_add_driver) from [<c03ba714>] (driver_register+0x78/0xf8)
    > [<c03ba714>] (driver_register) from [<c010181c>] (do_one_initcall+0x100/0x190)
    > [<c010181c>] (do_one_initcall) from [<c0800de8>] (kernel_init_freeable+0x130/0x1d0)
    > [<c0800de8>] (kernel_init_freeable) from [<c051eee8>] (kernel_init+0x8/0x114)
    > [<c051eee8>] (kernel_init) from [<c01175b0>] (ret_from_fork+0x14/0x24)
    > Code: e2843008 e3c2203f f5d3f000 e5922010 (e193cf9f)
    > ---[ end trace 0000000000000002 ]---
    
    Signed-off-by: Brandon Maier <brandon.maier@rockwellcollins.com>
    Link: https://lore.kernel.org/r/20190530225223.136420-1-brandon.maier@rockwellcollins.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c371b1e41f1392bb7a054712a412bd0a484fbed0
Author: Jessica Yu <jeyu@kernel.org>
Date:   Fri Jan 17 13:32:21 2020 +0100

    module: avoid setting info->name early in case we can fall back to info->mod->name
    
    [ Upstream commit 708e0ada1916be765b7faa58854062f2bc620bbf ]
    
    In setup_load_info(), info->name (which contains the name of the module,
    mostly used for early logging purposes before the module gets set up)
    gets unconditionally assigned if .modinfo is missing despite the fact
    that there is an if (!info->name) check near the end of the function.
    Avoid assigning a placeholder string to info->name if .modinfo doesn't
    exist, so that we can fall back to info->mod->name later on.
    
    Fixes: 5fdc7db6448a ("module: setup load info before module_sig_check()")
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f60d37409adab0034941b8670703e7560cde3660
Author: Anand Jain <anand.jain@oracle.com>
Date:   Fri Jan 10 12:26:34 2020 +0800

    btrfs: device stats, log when stats are zeroed
    
    [ Upstream commit a69976bc69308aa475d0ba3b8b3efd1d013c0460 ]
    
    We had a report indicating that some read errors aren't reported by the
    device stats in the userland. It is important to have the errors
    reported in the device stat as user land scripts might depend on it to
    take the reasonable corrective actions. But to debug these issue we need
    to be really sure that request to reset the device stat did not come
    from the userland itself. So log an info message when device error reset
    happens.
    
    For example:
     BTRFS info (device sdc): device stats zeroed by btrfs(9223)
    
    Reported-by: philip@philip-seeger.de
    Link: https://www.spinics.net/lists/linux-btrfs/msg96528.html
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c8b2ec55983559ba49ab3d273f3748811f6e607
Author: David Sterba <dsterba@suse.com>
Date:   Wed Jan 8 15:29:53 2020 +0100

    btrfs: safely advance counter when looking up bio csums
    
    [ Upstream commit 4babad10198fa73fe73239d02c2e99e3333f5f5c ]
    
    Dan's smatch tool reports
    
      fs/btrfs/file-item.c:295 btrfs_lookup_bio_sums()
      warn: should this be 'count == -1'
    
    which points to the while (count--) loop. With count == 0 the check
    itself could decrement it to -1. There's a WARN_ON a few lines below
    that has never been seen in practice though.
    
    It turns out that the value of page_bytes_left matches the count (by
    sectorsize multiples). The loop never reaches the state where count
    would go to -1, because page_bytes_left == 0 is found first and this
    breaks out.
    
    For clarity, use only plain check on count (and only for positive
    value), decrement safely inside the loop. Any other discrepancy after
    the whole bio list processing should be reported by the exising
    WARN_ON_ONCE as well.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 957ec72d9e5dd91b6716b301ec5ff6ce3a7b469c
Author: Johannes Thumshirn <jth@kernel.org>
Date:   Thu Dec 5 14:19:57 2019 +0100

    btrfs: fix possible NULL-pointer dereference in integrity checks
    
    [ Upstream commit 3dbd351df42109902fbcebf27104149226a4fcd9 ]
    
    A user reports a possible NULL-pointer dereference in
    btrfsic_process_superblock(). We are assigning state->fs_info to a local
    fs_info variable and afterwards checking for the presence of state.
    
    While we would BUG_ON() a NULL state anyways, we can also just remove
    the local fs_info copy, as fs_info is only used once as the first
    argument for btrfs_num_copies(). There we can just pass in
    state->fs_info as well.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=205003
    Signed-off-by: Johannes Thumshirn <jth@kernel.org>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 221912e3f8c51cb206e5ae87a373d90779691e99
Author: yu kuai <yukuai3@huawei.com>
Date:   Mon Jan 20 19:51:43 2020 +0800

    pwm: Remove set but not set variable 'pwm'
    
    [ Upstream commit 9871abffc81048e20f02e15d6aa4558a44ad53ea ]
    
    Fixes gcc '-Wunused-but-set-variable' warning:
    
            drivers/pwm/pwm-pca9685.c: In function ‘pca9685_pwm_gpio_free’:
            drivers/pwm/pwm-pca9685.c:162:21: warning: variable ‘pwm’ set but not used [-Wunused-but-set-variable]
    
    It is never used, and so can be removed. In that case, hold and release
    the lock 'pca->lock' can be removed since nothing will be done between
    them.
    
    Fixes: e926b12c611c ("pwm: Clear chip_data in pwm_put()")
    Signed-off-by: yu kuai <yukuai3@huawei.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7f0e2b3971c5af2c80a14117d28815b85139d3b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jan 7 16:06:07 2020 +0300

    ide: serverworks: potential overflow in svwks_set_pio_mode()
    
    [ Upstream commit ce1f31b4c0b9551dd51874dd5364654ed4ca13ae ]
    
    The "drive->dn" variable is a u8 controlled by root.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aeca4e33904532a6959aadc87a1de59d1e67664c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jan 7 16:04:41 2020 +0300

    cmd64x: potential buffer overflow in cmd64x_program_timings()
    
    [ Upstream commit 117fcc3053606d8db5cef8821dca15022ae578bb ]
    
    The "drive->dn" value is a u8 and it is controlled by root only, but
    it could be out of bounds here so let's check.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97cca37c9b3ffdb7629d9ad4c136e41c50ed19f3
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 11 10:03:54 2019 +0100

    pwm: omap-dmtimer: Remove PWM chip in .remove before making it unfunctional
    
    [ Upstream commit 43efdc8f0e6d7088ec61bd55a73bf853f002d043 ]
    
    In the old code (e.g.) mutex_destroy() was called before
    pwmchip_remove(). Between these two calls it is possible that a PWM
    callback is used which tries to grab the mutex.
    
    Fixes: 6604c6556db9 ("pwm: Add PWM driver for OMAP using dual-mode timers")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3827efdb99124cad83ad30d4896bb43f1389b33c
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Jan 13 18:22:36 2020 +0100

    x86/mm: Fix NX bit clearing issue in kernel_map_pages_in_pgd
    
    [ Upstream commit 75fbef0a8b6b4bb19b9a91b5214f846c2dc5139e ]
    
    The following commit:
    
      15f003d20782 ("x86/mm/pat: Don't implicitly allow _PAGE_RW in kernel_map_pages_in_pgd()")
    
    modified kernel_map_pages_in_pgd() to manage writable permissions
    of memory mappings in the EFI page table in a different way, but
    in the process, it removed the ability to clear NX attributes from
    read-only mappings, by clobbering the clear mask if _PAGE_RW is not
    being requested.
    
    Failure to remove the NX attribute from read-only mappings is
    unlikely to be a security issue, but it does prevent us from
    tightening the permissions in the EFI page tables going forward,
    so let's fix it now.
    
    Fixes: 15f003d20782 ("x86/mm/pat: Don't implicitly allow _PAGE_RW in kernel_map_pages_in_pgd()
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20200113172245.27925-5-ardb@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc5fa2ca305ffa73b5b82a06990e6af15f4e76f9
Author: Chao Yu <chao@kernel.org>
Date:   Mon Dec 30 17:41:41 2019 +0800

    f2fs: fix memleak of kobject
    
    [ Upstream commit fe396ad8e7526f059f7b8c7290d33a1b84adacab ]
    
    If kobject_init_and_add() failed, caller needs to invoke kobject_put()
    to release kobject explicitly.
    
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2913e2c506fa02deb1ef948a6ec3e744f75c57b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jan 16 19:17:02 2020 +0100

    watchdog/softlockup: Enforce that timestamp is valid on boot
    
    [ Upstream commit 11e31f608b499f044f24b20be73f1dcab3e43f8a ]
    
    Robert reported that during boot the watchdog timestamp is set to 0 for one
    second which is the indicator for a watchdog reset.
    
    The reason for this is that the timestamp is in seconds and the time is
    taken from sched clock and divided by ~1e9. sched clock starts at 0 which
    means that for the first second during boot the watchdog timestamp is 0,
    i.e. reset.
    
    Use ULONG_MAX as the reset indicator value so the watchdog works correctly
    right from the start. ULONG_MAX would only conflict with a real timestamp
    if the system reaches an uptime of 136 years on 32bit and almost eternity
    on 64bit.
    
    Reported-by: Robert Richter <rrichter@marvell.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/87o8v3uuzl.fsf@nanos.tec.linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f2a2c738bbb3a456bc2225ec77175095877a441
Author: Jun Lei <Jun.Lei@amd.com>
Date:   Wed Dec 18 14:40:56 2019 -0500

    drm/amd/display: fixup DML dependencies
    
    [ Upstream commit 34ad0230062c39cdcba564d16d122c0fb467a7d6 ]
    
    [why]
    Need to fix DML portability issues to enable SW unit testing around DML
    
    [how]
    Move calcs into dc include folder since multiple components reference it
    Remove relative paths to external dependencies
    
    Signed-off-by: Jun Lei <Jun.Lei@amd.com>
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cdb44ab266ae5f85256768fc2f19e699e19da4e
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Thu Oct 31 12:46:52 2019 -0700

    arm64: fix alternatives with LLVM's integrated assembler
    
    [ Upstream commit c54f90c2627cc316d365e3073614731e17dbc631 ]
    
    LLVM's integrated assembler fails with the following error when
    building KVM:
    
      <inline asm>:12:6: error: expected absolute expression
       .if kvm_update_va_mask == 0
           ^
      <inline asm>:21:6: error: expected absolute expression
       .if kvm_update_va_mask == 0
           ^
      <inline asm>:24:2: error: unrecognized instruction mnemonic
              NOT_AN_INSTRUCTION
              ^
      LLVM ERROR: Error parsing inline asm
    
    These errors come from ALTERNATIVE_CB and __ALTERNATIVE_CFG,
    which test for the existence of the callback parameter in inline
    assembly using the following expression:
    
      " .if " __stringify(cb) " == 0\n"
    
    This works with GNU as, but isn't supported by LLVM. This change
    splits __ALTERNATIVE_CFG and ALTINSTR_ENTRY into separate macros
    to fix the LLVM build.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/472
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60ddc2b2342cc1839e1db535cdf5d693a01c9844
Author: Nick Black <nlb@google.com>
Date:   Thu Dec 26 15:31:48 2019 -0500

    scsi: iscsi: Don't destroy session if there are outstanding connections
    
    [ Upstream commit 54155ed4199c7aa3fd20866648024ab63c96d579 ]
    
    A faulty userspace that calls destroy_session() before destroying the
    connections can trigger the failure.  This patch prevents the issue by
    refusing to destroy the session if there are outstanding connections.
    
    ------------[ cut here ]------------
    kernel BUG at mm/slub.c:306!
    invalid opcode: 0000 [#1] SMP PTI
    CPU: 1 PID: 1224 Comm: iscsid Not tainted 5.4.0-rc2.iscsi+ #7
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    RIP: 0010:__slab_free+0x181/0x350
    [...]
    [ 1209.686056] RSP: 0018:ffffa93d4074fae0 EFLAGS: 00010246
    [ 1209.686694] RAX: ffff934efa5ad800 RBX: 000000008010000a RCX: ffff934efa5ad800
    [ 1209.687651] RDX: ffff934efa5ad800 RSI: ffffeb4041e96b00 RDI: ffff934efd402c40
    [ 1209.688582] RBP: ffffa93d4074fb80 R08: 0000000000000001 R09: ffffffffbb5dfa26
    [ 1209.689425] R10: ffff934efa5ad800 R11: 0000000000000001 R12: ffffeb4041e96b00
    [ 1209.690285] R13: ffff934efa5ad800 R14: ffff934efd402c40 R15: 0000000000000000
    [ 1209.691213] FS:  00007f7945dfb540(0000) GS:ffff934efda80000(0000) knlGS:0000000000000000
    [ 1209.692316] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1209.693013] CR2: 000055877fd3da80 CR3: 0000000077384000 CR4: 00000000000006e0
    [ 1209.693897] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1209.694773] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 1209.695631] Call Trace:
    [ 1209.695957]  ? __wake_up_common_lock+0x8a/0xc0
    [ 1209.696712]  iscsi_pool_free+0x26/0x40
    [ 1209.697263]  iscsi_session_teardown+0x2f/0xf0
    [ 1209.698117]  iscsi_sw_tcp_session_destroy+0x45/0x60
    [ 1209.698831]  iscsi_if_rx+0xd88/0x14e0
    [ 1209.699370]  netlink_unicast+0x16f/0x200
    [ 1209.699932]  netlink_sendmsg+0x21a/0x3e0
    [ 1209.700446]  sock_sendmsg+0x4f/0x60
    [ 1209.700902]  ___sys_sendmsg+0x2ae/0x320
    [ 1209.701451]  ? cp_new_stat+0x150/0x180
    [ 1209.701922]  __sys_sendmsg+0x59/0xa0
    [ 1209.702357]  do_syscall_64+0x52/0x160
    [ 1209.702812]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [ 1209.703419] RIP: 0033:0x7f7946433914
    [...]
    [ 1209.706084] RSP: 002b:00007fffb99f2378 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    [ 1209.706994] RAX: ffffffffffffffda RBX: 000055bc869eac20 RCX: 00007f7946433914
    [ 1209.708082] RDX: 0000000000000000 RSI: 00007fffb99f2390 RDI: 0000000000000005
    [ 1209.709120] RBP: 00007fffb99f2390 R08: 000055bc84fe9320 R09: 00007fffb99f1f07
    [ 1209.710110] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000038
    [ 1209.711085] R13: 000055bc8502306e R14: 0000000000000000 R15: 0000000000000000
     Modules linked in:
     ---[ end trace a2d933ede7f730d8 ]---
    
    Link: https://lore.kernel.org/r/20191226203148.2172200-1-krisman@collabora.com
    Signed-off-by: Nick Black <nlb@google.com>
    Co-developed-by: Salman Qazi <sqazi@google.com>
    Signed-off-by: Salman Qazi <sqazi@google.com>
    Co-developed-by: Junho Ryu <jayr@google.com>
    Signed-off-by: Junho Ryu <jayr@google.com>
    Co-developed-by: Khazhismel Kumykov <khazhy@google.com>
    Signed-off-by: Khazhismel Kumykov <khazhy@google.com>
    Co-developed-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68c59096a44555fb9fc264c2ceb9ed3116c5d8d5
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Fri Dec 13 18:32:16 2019 -0800

    f2fs: free sysfs kobject
    
    [ Upstream commit 820d366736c949ffe698d3b3fe1266a91da1766d ]
    
    Detected kmemleak.
    
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e6d27f186d98a5f3342b627ee8d92262225fbb3
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Fri Dec 6 16:59:58 2019 -0800

    f2fs: set I_LINKABLE early to avoid wrong access by vfs
    
    [ Upstream commit 5b1dbb082f196278f82b6a15a13848efacb9ff11 ]
    
    This patch moves setting I_LINKABLE early in rename2(whiteout) to avoid the
    below warning.
    
    [ 3189.163385] WARNING: CPU: 3 PID: 59523 at fs/inode.c:358 inc_nlink+0x32/0x40
    [ 3189.246979] Call Trace:
    [ 3189.248707]  f2fs_init_inode_metadata+0x2d6/0x440 [f2fs]
    [ 3189.251399]  f2fs_add_inline_entry+0x162/0x8c0 [f2fs]
    [ 3189.254010]  f2fs_add_dentry+0x69/0xe0 [f2fs]
    [ 3189.256353]  f2fs_do_add_link+0xc5/0x100 [f2fs]
    [ 3189.258774]  f2fs_rename2+0xabf/0x1010 [f2fs]
    [ 3189.261079]  vfs_rename+0x3f8/0xaa0
    [ 3189.263056]  ? tomoyo_path_rename+0x44/0x60
    [ 3189.265283]  ? do_renameat2+0x49b/0x550
    [ 3189.267324]  do_renameat2+0x49b/0x550
    [ 3189.269316]  __x64_sys_renameat2+0x20/0x30
    [ 3189.271441]  do_syscall_64+0x5a/0x230
    [ 3189.273410]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 3189.275848] RIP: 0033:0x7f270b4d9a49
    
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b571787a50aabfb8b1e8ff9892aecc82b3b1df9a
Author: Will Deacon <will@kernel.org>
Date:   Wed Jan 15 15:21:47 2020 +0000

    iommu/arm-smmu-v3: Use WRITE_ONCE() when changing validity of an STE
    
    [ Upstream commit d71e01716b3606a6648df7e5646ae12c75babde4 ]
    
    If, for some bizarre reason, the compiler decided to split up the write
    of STE DWORD 0, we could end up making a partial structure valid.
    
    Although this probably won't happen, follow the example of the
    context-descriptor code and use WRITE_ONCE() to ensure atomicity of the
    write.
    
    Reported-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8194a638d4914a489f868d2644302ad45196a4cd
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Jan 15 07:25:26 2020 -0600

    usb: musb: omap2430: Get rid of musb .set_vbus for omap2430 glue
    
    [ Upstream commit 91b6dec32e5c25fbdbb564d1e5af23764ec17ef1 ]
    
    We currently have musb_set_vbus() called from two different paths. Mostly
    it gets called from the USB PHY via omap_musb_set_mailbox(), but in some
    cases it can get also called from musb_stage0_irq() rather via .set_vbus:
    
    (musb_set_host [musb_hdrc])
    (omap2430_musb_set_vbus [omap2430])
    (musb_stage0_irq [musb_hdrc])
    (musb_interrupt [musb_hdrc])
    (omap2430_musb_interrupt [omap2430])
    
    This is racy and will not work with introducing generic helper functions
    for musb_set_host() and musb_set_peripheral(). We want to get rid of the
    busy loops in favor of usleep_range().
    
    Let's just get rid of .set_vbus for omap2430 glue layer and let the PHY
    code handle VBUS with musb_set_vbus(). Note that in the follow-up patch
    we can completely remove omap2430_musb_set_vbus(), but let's do it in a
    separate patch as this change may actually turn out to be needed as a
    fix.
    
    Reported-by: Pavel Machek <pavel@ucw.cz>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Link: https://lore.kernel.org/r/20200115132547.364-5-b-liu@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97e780b7db2a1e50f987eca42f05156abbc06334
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Tue Sep 24 23:37:58 2019 -0500

    drm/vmwgfx: prevent memory leak in vmw_cmdbuf_res_add
    
    [ Upstream commit 40efb09a7f53125719e49864da008495e39aaa1e ]
    
    In vmw_cmdbuf_res_add if drm_ht_insert_item fails the allocated memory
    for cres should be released.
    
    Fixes: 18e4a4669c50 ("drm/vmwgfx: Fix compat shader namespace")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c628e435c7b278b4b4c0a30a2215f731599db0bc
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 15 06:34:21 2020 +1000

    drm/nouveau/fault/gv100-: fix memory leak on module unload
    
    [ Upstream commit 633cc9beeb6f9b5fa2f17a2a9d0e2790cb6c3de7 ]
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d291d1c938808e2d867a5d5351cefe9fe72149e9
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Jan 10 15:28:37 2020 +0800

    drm/nouveau/drm/ttm: Remove set but not used variable 'mem'
    
    [ Upstream commit 2e4534a22794746b11a794b2229b8d58797eccce ]
    
    drivers/gpu/drm/nouveau/nouveau_ttm.c: In function nouveau_vram_manager_new:
    drivers/gpu/drm/nouveau/nouveau_ttm.c:66:22: warning: variable mem set but not used [-Wunused-but-set-variable]
    drivers/gpu/drm/nouveau/nouveau_ttm.c: In function nouveau_gart_manager_new:
    drivers/gpu/drm/nouveau/nouveau_ttm.c:106:22: warning: variable mem set but not used [-Wunused-but-set-variable]
    
    They are not used any more, so remove it.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e50ebd96fa124431ab4bdb6ea867be54f625732
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Jan 10 14:32:01 2020 +0800

    drm/nouveau: Fix copy-paste error in nouveau_fence_wait_uevent_handler
    
    [ Upstream commit 1eb013473bff5f95b6fe1ca4dd7deda47257b9c2 ]
    
    Like other cases, it should use rcu protected 'chan' rather
    than 'fence->channel' in nouveau_fence_wait_uevent_handler.
    
    Fixes: 0ec5f02f0e2c ("drm/nouveau: prevent stale fence->channel pointers, and protect with rcu")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a20047854bc345237442d12e3c149af0cd0c0c7
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Thu Jan 9 11:46:15 2020 +1000

    drm/nouveau/gr/gk20a,gm200-: add terminators to method lists read from fw
    
    [ Upstream commit 7adc77aa0e11f25b0e762859219c70852cd8d56f ]
    
    Method init is typically ordered by class in the FW image as ThreeD,
    TwoD, Compute.
    
    Due to a bug in parsing the FW into our internal format, we've been
    accidentally sending Twod + Compute methods to the ThreeD class, as
    well as Compute methods to the TwoD class - oops.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4653672d2b8b792b4e078d4ae91fa0bee90a62ef
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jan 8 08:46:01 2020 +0300

    drm/nouveau/secboot/gm20b: initialize pointer in gm20b_secboot_new()
    
    [ Upstream commit 3613a9bea95a1470dd42e4ed1cc7d86ebe0a2dc0 ]
    
    We accidentally set "psb" which is a no-op instead of "*psb" so it
    generates a static checker warning.  We should probably set it before
    the first error return so that it's always initialized.
    
    Fixes: 923f1bd27bf1 ("drm/nouveau/secboot/gm20b: add secure boot support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ca41215c6ea47fe0e7023655835c2cb09e34260
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 7 21:05:43 2020 +0100

    vme: bridges: reduce stack usage
    
    [ Upstream commit 7483e7a939c074d887450ef1c4d9ccc5909405f8 ]
    
    With CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3, the stack usage in vme_fake
    grows above the warning limit:
    
    drivers/vme/bridges/vme_fake.c: In function 'fake_master_read':
    drivers/vme/bridges/vme_fake.c:610:1: error: the frame size of 1160 bytes is larger than 1024 bytes [-Werror=frame-larger-than=]
    drivers/vme/bridges/vme_fake.c: In function 'fake_master_write':
    drivers/vme/bridges/vme_fake.c:797:1: error: the frame size of 1160 bytes is larger than 1024 bytes [-Werror=frame-larger-than=]
    
    The problem is that in some configurations, each call to
    fake_vmereadX() puts another variable on the stack.
    
    Reduce the amount of inlining to get back to the previous state,
    with no function using more than 200 bytes each.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20200107200610.3482901-1-arnd@arndb.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bb30a41da8e9bd50b2418cfe539261f1222a7ad
Author: Li RongQing <lirongqing@baidu.com>
Date:   Fri Jan 10 09:04:37 2020 +0800

    bpf: Return -EBADRQC for invalid map type in __bpf_tx_xdp_map
    
    [ Upstream commit 0a29275b6300f39f78a87f2038bbfe5bdbaeca47 ]
    
    A negative value should be returned if map->map_type is invalid
    although that is impossible now, but if we run into such situation
    in future, then xdpbuff could be leaked.
    
    Daniel Borkmann suggested:
    
    -EBADRQC should be returned to stay consistent with generic XDP
    for the tracepoint output and not to be confused with -EOPNOTSUPP
    from other locations like dev_map_enqueue() when ndo_xdp_xmit is
    missing and such.
    
    Suggested-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Li RongQing <lirongqing@baidu.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/1578618277-18085-1-git-send-email-lirongqing@baidu.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73504f095df344ad50be94c760d7c6188ad68c15
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Dec 6 14:22:19 2019 +0100

    driver core: Print device when resources present in really_probe()
    
    [ Upstream commit 7c35e699c88bd60734277b26962783c60e04b494 ]
    
    If a device already has devres items attached before probing, a warning
    backtrace is printed.  However, this backtrace does not reveal the
    offending device, leaving the user uninformed.  Furthermore, using
    WARN_ON() causes systems with panic-on-warn to reboot.
    
    Fix this by replacing the WARN_ON() by a dev_crit() message.
    Abort probing the device, to prevent doing more damage to the device's
    resources.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20191206132219.28908-1-geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc2edd3023eb4036998a89e02ae2ce039b3dd439
Author: Simon Schwartz <kern.simon@theschwartz.xyz>
Date:   Tue Dec 10 17:41:37 2019 -0500

    driver core: platform: Prevent resouce overflow from causing infinite loops
    
    [ Upstream commit 39cc539f90d035a293240c9443af50be55ee81b8 ]
    
    num_resources in the platform_device struct is declared as a u32.  The
    for loops that iterate over num_resources use an int as the counter,
    which can cause infinite loops on architectures with smaller ints.
    Change the loop counters to u32.
    
    Signed-off-by: Simon Schwartz <kern.simon@theschwartz.xyz>
    Link: https://lore.kernel.org/r/2201ce63a2a171ffd2ed14e867875316efcf71db.camel@theschwartz.xyz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ee8f8ecbf5763dd4ab46a671a86963bc7e9abc0
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 7 21:29:40 2020 +0100

    visorbus: fix uninitialized variable access
    
    [ Upstream commit caf82f727e69b647f09d57a1fc56e69d22a5f483 ]
    
    The setup_crash_devices_work_queue function only partially initializes
    the message it sends to chipset_init, leading to undefined behavior:
    
    drivers/visorbus/visorchipset.c: In function 'setup_crash_devices_work_queue':
    drivers/visorbus/visorchipset.c:333:6: error: '((unsigned char*)&msg.hdr.flags)[0]' is used uninitialized in this function [-Werror=uninitialized]
      if (inmsg->hdr.flags.response_expected)
    
    Set up the entire structure, zero-initializing the 'response_expected'
    flag.
    
    This was apparently found by the patch that added the -O3 build option
    in Kconfig.
    
    Fixes: 12e364b9f08a ("staging: visorchipset driver to provide registration and other services")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20200107202950.782951-1-arnd@arndb.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c2b47b2fd75dae5a412c018f45ed1e64b7e0a4f
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 19:39:13 2019 -0700

    tty: synclink_gt: Adjust indentation in several functions
    
    [ Upstream commit 446e76873b5e4e70bdee5db2f2a894d5b4a7d081 ]
    
    Clang warns:
    
    ../drivers/tty/synclink_gt.c:1337:3: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
            if (C_CRTSCTS(tty)) {
            ^
    ../drivers/tty/synclink_gt.c:1335:2: note: previous statement is here
            if (I_IXOFF(tty))
            ^
    ../drivers/tty/synclink_gt.c:2563:3: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
            if (I_BRKINT(info->port.tty) || I_PARMRK(info->port.tty))
            ^
    ../drivers/tty/synclink_gt.c:2561:2: note: previous statement is here
            if (I_INPCK(info->port.tty))
            ^
    ../drivers/tty/synclink_gt.c:3221:3: warning: misleading indentation;
    statement is not part of the previous 'else' [-Wmisleading-indentation]
            set_signals(info);
            ^
    ../drivers/tty/synclink_gt.c:3219:2: note: previous statement is here
            else
            ^
    3 warnings generated.
    
    The indentation on these lines is not at all consistent, tabs and spaces
    are mixed together. Convert to just using tabs to be consistent with the
    Linux kernel coding style and eliminate these warnings from clang.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/822
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lore.kernel.org/r/20191218023912.13827-1-natechancellor@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c0f2d939f8affc4dc50e427c335f06ffebba116
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 19:47:20 2019 -0700

    tty: synclinkmp: Adjust indentation in several functions
    
    [ Upstream commit 1feedf61e7265128244f6993f23421f33dd93dbc ]
    
    Clang warns:
    
    ../drivers/tty/synclinkmp.c:1456:3: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
            if (C_CRTSCTS(tty)) {
            ^
    ../drivers/tty/synclinkmp.c:1453:2: note: previous statement is here
            if (I_IXOFF(tty))
            ^
    ../drivers/tty/synclinkmp.c:2473:8: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
                                                    info->port.tty->hw_stopped = 0;
                                                    ^
    ../drivers/tty/synclinkmp.c:2471:7: note: previous statement is here
                                                    if ( debug_level >= DEBUG_LEVEL_ISR )
                                                    ^
    ../drivers/tty/synclinkmp.c:2482:8: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
                                                    info->port.tty->hw_stopped = 1;
                                                    ^
    ../drivers/tty/synclinkmp.c:2480:7: note: previous statement is here
                                                    if ( debug_level >= DEBUG_LEVEL_ISR )
                                                    ^
    ../drivers/tty/synclinkmp.c:2809:3: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
            if (I_BRKINT(info->port.tty) || I_PARMRK(info->port.tty))
            ^
    ../drivers/tty/synclinkmp.c:2807:2: note: previous statement is here
            if (I_INPCK(info->port.tty))
            ^
    ../drivers/tty/synclinkmp.c:3246:3: warning: misleading indentation;
    statement is not part of the previous 'else' [-Wmisleading-indentation]
            set_signals(info);
            ^
    ../drivers/tty/synclinkmp.c:3244:2: note: previous statement is here
            else
            ^
    5 warnings generated.
    
    The indentation on these lines is not at all consistent, tabs and spaces
    are mixed together. Convert to just using tabs to be consistent with the
    Linux kernel coding style and eliminate these warnings from clang.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/823
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lore.kernel.org/r/20191218024720.3528-1-natechancellor@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a12df6191ddaab0424f553967b645610849dd900
Author: Chen Zhou <chenzhou10@huawei.com>
Date:   Mon Jan 13 21:32:42 2020 +0800

    ASoC: atmel: fix build error with CONFIG_SND_ATMEL_SOC_DMA=m
    
    [ Upstream commit 8fea78029f5e6ed734ae1957bef23cfda1af4354 ]
    
    If CONFIG_SND_ATMEL_SOC_DMA=m, build error:
    
    sound/soc/atmel/atmel_ssc_dai.o: In function `atmel_ssc_set_audio':
    (.text+0x7cd): undefined reference to `atmel_pcm_dma_platform_register'
    
    Function atmel_pcm_dma_platform_register is defined under
    CONFIG SND_ATMEL_SOC_DMA, so select SND_ATMEL_SOC_DMA in
    CONFIG SND_ATMEL_SOC_SSC, same to CONFIG_SND_ATMEL_SOC_PDC.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Chen Zhou <chenzhou10@huawei.com>
    Link: https://lore.kernel.org/r/20200113133242.144550-1-chenzhou10@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab32de6917fab76752a9ab8ad53c3f82bb140cf6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 12 13:04:42 2020 +0100

    wan: ixp4xx_hss: fix compile-testing on 64-bit
    
    [ Upstream commit 504c28c853ec5c626900b914b5833daf0581a344 ]
    
    Change the driver to use portable integer types to avoid
    warnings during compile testing:
    
    drivers/net/wan/ixp4xx_hss.c:863:21: error: cast to 'u32 *' (aka 'unsigned int *') from smaller integer type 'int' [-Werror,-Wint-to-pointer-cast]
            memcpy_swab32(mem, (u32 *)((int)skb->data & ~3), bytes / 4);
                               ^
    drivers/net/wan/ixp4xx_hss.c:979:12: error: incompatible pointer types passing 'u32 *' (aka 'unsigned int *') to parameter of type 'dma_addr_t *' (aka 'unsigned long long *') [-Werror,-Wincompatible-pointer-types]
                                                  &port->desc_tab_phys)))
                                                  ^~~~~~~~~~~~~~~~~~~~
    include/linux/dmapool.h:27:20: note: passing argument to parameter 'handle' here
                         dma_addr_t *handle);
                                     ^
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35dbd024bcbb4fa19fd384f4a3c2a82fac151a7d
Author: Changbin Du <changbin.du@intel.com>
Date:   Sat Jan 11 20:54:27 2020 +0800

    x86/nmi: Remove irq_work from the long duration NMI handler
    
    [ Upstream commit 248ed51048c40d36728e70914e38bffd7821da57 ]
    
    First, printk() is NMI-context safe now since the safe printk() has been
    implemented and it already has an irq_work to make NMI-context safe.
    
    Second, this NMI irq_work actually does not work if a NMI handler causes
    panic by watchdog timeout. It has no chance to run in such case, while
    the safe printk() will flush its per-cpu buffers before panicking.
    
    While at it, repurpose the irq_work callback into a function which
    concentrates the NMI duration checking and makes the code easier to
    follow.
    
     [ bp: Massage. ]
    
    Signed-off-by: Changbin Du <changbin.du@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200111125427.15662-1-changbin.du@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45a6f48eebf8a4ae1419de0e9c52365a490b787a
Author: Philipp Zabel <p.zabel@pengutronix.de>
Date:   Thu Jan 9 17:03:21 2020 -0800

    Input: edt-ft5x06 - work around first register access error
    
    [ Upstream commit e112324cc0422c046f1cf54c56f333d34fa20885 ]
    
    The EP0700MLP1 returns bogus data on the first register read access
    (reading the threshold parameter from register 0x00):
    
        edt_ft5x06 2-0038: crc error: 0xfc expected, got 0x40
    
    It ignores writes until then. This patch adds a dummy read after which
    the number of sensors and parameter read/writes work correctly.
    
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Tested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60a449170552a9ee35840342888a53e61e1253b2
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Sat Nov 9 09:42:13 2019 -0800

    rcu: Use WRITE_ONCE() for assignments to ->pprev for hlist_nulls
    
    [ Upstream commit 860c8802ace14c646864795e057349c9fb2d60ad ]
    
    Eric Dumazet supplied a KCSAN report of a bug that forces use
    of hlist_unhashed_lockless() from sk_unhashed():
    
    ------------------------------------------------------------------------
    
    BUG: KCSAN: data-race in inet_unhash / inet_unhash
    
    write to 0xffff8880a69a0170 of 8 bytes by interrupt on cpu 1:
     __hlist_nulls_del include/linux/list_nulls.h:88 [inline]
     hlist_nulls_del_init_rcu include/linux/rculist_nulls.h:36 [inline]
     __sk_nulls_del_node_init_rcu include/net/sock.h:676 [inline]
     inet_unhash+0x38f/0x4a0 net/ipv4/inet_hashtables.c:612
     tcp_set_state+0xfa/0x3e0 net/ipv4/tcp.c:2249
     tcp_done+0x93/0x1e0 net/ipv4/tcp.c:3854
     tcp_write_err+0x7e/0xc0 net/ipv4/tcp_timer.c:56
     tcp_retransmit_timer+0x9b8/0x16d0 net/ipv4/tcp_timer.c:479
     tcp_write_timer_handler+0x42d/0x510 net/ipv4/tcp_timer.c:599
     tcp_write_timer+0xd1/0xf0 net/ipv4/tcp_timer.c:619
     call_timer_fn+0x5f/0x2f0 kernel/time/timer.c:1404
     expire_timers kernel/time/timer.c:1449 [inline]
     __run_timers kernel/time/timer.c:1773 [inline]
     __run_timers kernel/time/timer.c:1740 [inline]
     run_timer_softirq+0xc0c/0xcd0 kernel/time/timer.c:1786
     __do_softirq+0x115/0x33f kernel/softirq.c:292
     invoke_softirq kernel/softirq.c:373 [inline]
     irq_exit+0xbb/0xe0 kernel/softirq.c:413
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0xe6/0x280 arch/x86/kernel/apic/apic.c:1137
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
     native_safe_halt+0xe/0x10 arch/x86/kernel/paravirt.c:71
     arch_cpu_idle+0x1f/0x30 arch/x86/kernel/process.c:571
     default_idle_call+0x1e/0x40 kernel/sched/idle.c:94
     cpuidle_idle_call kernel/sched/idle.c:154 [inline]
     do_idle+0x1af/0x280 kernel/sched/idle.c:263
     cpu_startup_entry+0x1b/0x20 kernel/sched/idle.c:355
     start_secondary+0x208/0x260 arch/x86/kernel/smpboot.c:264
     secondary_startup_64+0xa4/0xb0 arch/x86/kernel/head_64.S:241
    
    read to 0xffff8880a69a0170 of 8 bytes by interrupt on cpu 0:
     sk_unhashed include/net/sock.h:607 [inline]
     inet_unhash+0x3d/0x4a0 net/ipv4/inet_hashtables.c:592
     tcp_set_state+0xfa/0x3e0 net/ipv4/tcp.c:2249
     tcp_done+0x93/0x1e0 net/ipv4/tcp.c:3854
     tcp_write_err+0x7e/0xc0 net/ipv4/tcp_timer.c:56
     tcp_retransmit_timer+0x9b8/0x16d0 net/ipv4/tcp_timer.c:479
     tcp_write_timer_handler+0x42d/0x510 net/ipv4/tcp_timer.c:599
     tcp_write_timer+0xd1/0xf0 net/ipv4/tcp_timer.c:619
     call_timer_fn+0x5f/0x2f0 kernel/time/timer.c:1404
     expire_timers kernel/time/timer.c:1449 [inline]
     __run_timers kernel/time/timer.c:1773 [inline]
     __run_timers kernel/time/timer.c:1740 [inline]
     run_timer_softirq+0xc0c/0xcd0 kernel/time/timer.c:1786
     __do_softirq+0x115/0x33f kernel/softirq.c:292
     invoke_softirq kernel/softirq.c:373 [inline]
     irq_exit+0xbb/0xe0 kernel/softirq.c:413
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0xe6/0x280 arch/x86/kernel/apic/apic.c:1137
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:830
     native_safe_halt+0xe/0x10 arch/x86/kernel/paravirt.c:71
     arch_cpu_idle+0x1f/0x30 arch/x86/kernel/process.c:571
     default_idle_call+0x1e/0x40 kernel/sched/idle.c:94
     cpuidle_idle_call kernel/sched/idle.c:154 [inline]
     do_idle+0x1af/0x280 kernel/sched/idle.c:263
     cpu_startup_entry+0x1b/0x20 kernel/sched/idle.c:355
     rest_init+0xec/0xf6 init/main.c:452
     arch_call_rest_init+0x17/0x37
     start_kernel+0x838/0x85e init/main.c:786
     x86_64_start_reservations+0x29/0x2b arch/x86/kernel/head64.c:490
     x86_64_start_kernel+0x72/0x76 arch/x86/kernel/head64.c:471
     secondary_startup_64+0xa4/0xb0 arch/x86/kernel/head_64.S:241
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.4.0-rc6+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine,
    BIOS Google 01/01/2011
    
    ------------------------------------------------------------------------
    
    This commit therefore replaces C-language assignments with WRITE_ONCE()
    in include/linux/list_nulls.h and include/linux/rculist_nulls.h.
    
    Reported-by: Eric Dumazet <edumazet@google.com> # For KCSAN
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f24e9fc5b0020985abe1473ef1ff4a51123cb113
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Jan 3 12:39:46 2020 +0100

    efi/x86: Don't panic or BUG() on non-critical error conditions
    
    [ Upstream commit e2d68a955e49d61fd0384f23e92058dc9b79be5e ]
    
    The logic in __efi_enter_virtual_mode() does a number of steps in
    sequence, all of which may fail in one way or the other. In most
    cases, we simply print an error and disable EFI runtime services
    support, but in some cases, we BUG() or panic() and bring down the
    system when encountering conditions that we could easily handle in
    the same way.
    
    While at it, replace a pointless page-to-virt-phys conversion with
    one that goes straight from struct page to physical.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Arvind Sankar <nivedita@alum.mit.edu>
    Cc: Matthew Garrett <mjg59@google.com>
    Cc: linux-efi@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200103113953.9571-14-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60d0a8877c12e15af91f9406766eb19528952c9e
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Wed Dec 18 21:23:03 2019 +0300

    soc/tegra: fuse: Correct straps' address for older Tegra124 device trees
    
    [ Upstream commit 2d9ea1934f8ef0dfb862d103389562cc28b4fc03 ]
    
    Trying to read out Chip ID before APBMISC registers are mapped won't
    succeed, in a result Tegra124 gets a wrong address for the HW straps
    register if machine uses an old outdated device tree.
    
    Fixes: 297c4f3dcbff ("soc/tegra: fuse: Restrict legacy code to 32-bit ARM")
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10cb13169bfe75c17d65bdefae4b79f77356bead
Author: Mike Marciniszyn <mike.marciniszyn@intel.com>
Date:   Mon Jan 6 08:42:28 2020 -0500

    IB/hfi1: Add software counter for ctxt0 seq drop
    
    [ Upstream commit 5ffd048698ea5139743acd45e8ab388a683642b8 ]
    
    All other code paths increment some form of drop counter.
    
    This was missed in the original implementation.
    
    Fixes: 82c2611daaf0 ("staging/rdma/hfi1: Handle packets with invalid RHF on context 0")
    Link: https://lore.kernel.org/r/20200106134228.119356.96828.stgit@awfm-01.aw.intel.com
    Reviewed-by: Kaike Wan <kaike.wan@intel.com>
    Signed-off-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54ea0441a47fd42e62437370dd6f8bbaf317c1dd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sat Jan 4 22:48:21 2020 +0100

    staging: rtl8188: avoid excessive stack usage
    
    [ Upstream commit c497ae2077c055b85c1bf04f3d182a84bd8f365b ]
    
    The rtl8188 copy of the os_dep support code causes a
    warning about a very significant stack usage in the translate_scan()
    function:
    
    drivers/staging/rtl8188eu/os_dep/ioctl_linux.c: In function 'translate_scan':
    drivers/staging/rtl8188eu/os_dep/ioctl_linux.c:306:1: error: the frame size of 1560 bytes is larger than 1400 bytes [-Werror=frame-larger-than=]
    
    Use the same trick as in the rtl8723bs copy of the same function, and
    allocate it dynamically.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20200104214832.558198-1-arnd@arndb.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53e47add44ca16584a33380777c5ed3347d5bde2
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jan 7 16:36:49 2020 +0100

    udf: Fix free space reporting for metadata and virtual partitions
    
    [ Upstream commit a4a8b99ec819ca60b49dc582a4287ef03411f117 ]
    
    Free space on filesystems with metadata or virtual partition maps
    currently gets misreported. This is because these partitions are just
    remapped onto underlying real partitions from which keep track of free
    blocks. Take this remapping into account when counting free blocks as
    well.
    
    Reviewed-by: Pali Rohár <pali.rohar@gmail.com>
    Reported-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b957a310c92b33d6a3ccb3cc43f6b48fb592324e
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Wed Jan 8 18:24:16 2020 -0700

    usbip: Fix unsafe unaligned pointer usage
    
    [ Upstream commit 585c91f40d201bc564d4e76b83c05b3b5363fe7e ]
    
    Fix unsafe unaligned pointer usage in usbip network interfaces. usbip tool
    build fails with new gcc -Werror=address-of-packed-member checks.
    
    usbip_network.c: In function ‘usbip_net_pack_usb_device’:
    usbip_network.c:79:32: error: taking address of packed member of ‘struct usbip_usb_device’ may result in an unaligned pointer value [-Werror=address-of-packed-member]
       79 |  usbip_net_pack_uint32_t(pack, &udev->busnum);
    
    Fix with minor changes to pass by value instead of by address.
    
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200109012416.2875-1-skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26259921a2a0b08651b278ee0d88e5fc45935a24
Author: Benjamin Gaignard <benjamin.gaignard@st.com>
Date:   Wed Jan 8 14:26:47 2020 +0100

    ARM: dts: stm32: Add power-supply for DSI panel on stm32f469-disco
    
    [ Upstream commit 0ff15a86d0c5a3f004fee2e92d65b88e56a3bc58 ]
    
    Add a fixed regulator and use it as power supply for DSI panel.
    
    Fixes: 18c8866266 ("ARM: dts: stm32: Add display support on stm32f469-disco")
    
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Alexandre Torgue <alexandre.torgue@st.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0127ee523692cc041099d6f36b4bbefc1faa643
Author: Dingchen Zhang <dingchen.zhang@amd.com>
Date:   Mon Jun 10 09:47:51 2019 -0400

    drm: remove the newline for CRC source name.
    
    [ Upstream commit 72a848f5c46bab4c921edc9cbffd1ab273b2be17 ]
    
    userspace may transfer a newline, and this terminating newline
    is replaced by a '\0' to avoid followup issues.
    
    'len-1' is the index to replace the newline of CRC source name.
    
    v3: typo fix (Sam)
    
    v2: update patch subject, body and format. (Sam)
    
    Cc: Leo Li <sunpeng.li@amd.com>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Dingchen Zhang <dingchen.zhang@amd.com>
    Reviewed-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190610134751.14356-1-dingchen.zhang@amd.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 401003f5d28cbe41b7d89315dec9f0020bb3b6c6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sat Jan 4 22:51:44 2020 +0100

    mlx5: work around high stack usage with gcc
    
    [ Upstream commit 42ae1a5c76691928ed217c7e40269db27f5225e9 ]
    
    In some configurations, gcc tries too hard to optimize this code:
    
    drivers/net/ethernet/mellanox/mlx5/core/en_stats.c: In function 'mlx5e_grp_sw_update_stats':
    drivers/net/ethernet/mellanox/mlx5/core/en_stats.c:302:1: error: the frame size of 1336 bytes is larger than 1024 bytes [-Werror=frame-larger-than=]
    
    As was stated in the bug report, the reason is that gcc runs into a corner
    case in the register allocator that is rather hard to fix in a good way.
    
    As there is an easy way to work around it, just add a comment and the
    barrier that stops gcc from trying to overoptimize the function.
    
    Link: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92657
    Cc: Adhemerval Zanella <adhemerval.zanella@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41fa0e32ea9a09e2e9bad16289090b70bffca172
Author: Jason Ekstrand <jason@jlekstrand.net>
Date:   Thu Jan 2 14:27:54 2020 -0600

    ACPI: button: Add DMI quirk for Razer Blade Stealth 13 late 2019 lid switch
    
    [ Upstream commit 0528904926aab19bffb2068879aa44db166c6d5f ]
    
    Running evemu-record on the lid switch event shows that the lid reports
    the first "close" but then never reports an "open".  This causes systemd
    to continuously re-suspend the laptop every 30s.  Resetting the _LID to
    "open" fixes the issue.
    
    Signed-off-by: Jason Ekstrand <jason@jlekstrand.net>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bad8bb7a593beb6df24b6eb5076fbd8da537a0fd
Author: Andrey Zhizhikin <andrey.z@gmail.com>
Date:   Wed Dec 11 08:01:09 2019 +0000

    tools lib api fs: Fix gcc9 stringop-truncation compilation error
    
    [ Upstream commit 6794200fa3c9c3e6759dae099145f23e4310f4f7 ]
    
    GCC9 introduced string hardening mechanisms, which exhibits the error
    during fs api compilation:
    
    error: '__builtin_strncpy' specified bound 4096 equals destination size
    [-Werror=stringop-truncation]
    
    This comes when the length of copy passed to strncpy is is equal to
    destination size, which could potentially lead to buffer overflow.
    
    There is a need to mitigate this potential issue by limiting the size of
    destination by 1 and explicitly terminate the destination with NULL.
    
    Signed-off-by: Andrey Zhizhikin <andrey.zhizhikin@leica-geosystems.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Andrii Nakryiko <andriin@fb.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: bpf@vger.kernel.org
    Cc: netdev@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20191211080109.18765-1-andrey.zhizhikin@leica-geosystems.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a59c64fa27f4ffc8b4ebf5ba17d34b8bca0076d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Jan 5 15:48:23 2020 +0100

    ALSA: sh: Fix compile warning wrt const
    
    [ Upstream commit f1dd4795b1523fbca7ab4344dd5a8bb439cc770d ]
    
    A long-standing compile warning was seen during build test:
      sound/sh/aica.c: In function 'load_aica_firmware':
      sound/sh/aica.c:521:25: warning: passing argument 2 of 'spu_memload' discards 'const' qualifier from pointer target type [-Wdiscarded-qualifiers]
    
    Fixes: 198de43d758c ("[ALSA] Add ALSA support for the SEGA Dreamcast PCM device")
    Link: https://lore.kernel.org/r/20200105144823.29547-69-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aec48d8d0e6e291f61d0a0741bef2f8cc0712584
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Dec 27 10:42:05 2019 +0900

    clk: uniphier: Add SCSSI clock gate for each channel
    
    [ Upstream commit 1ec09a2ec67a0baa46a3ccac041dbcdbc6db2cb9 ]
    
    SCSSI has clock gates for each channel in the SoCs newer than Pro4,
    so this adds missing clock gates for channel 1, 2 and 3. And more, this
    moves MCSSI clock ID after SCSSI.
    
    Fixes: ff388ee36516 ("clk: uniphier: add clock frequency support for SPI")
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Acked-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Link: https://lkml.kernel.org/r/1577410925-22021-1-git-send-email-hayashi.kunihiko@socionext.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4c1f72b72e140ed14a1f825916e918c144e0dfe
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Jan 4 12:00:57 2020 +0100

    ALSA: sh: Fix unused variable warnings
    
    [ Upstream commit 5da116f164ce265e397b8f59af5c39e4a61d61a5 ]
    
    Remove unused variables that are left over after the conversion of new
    PCM ops:
      sound/sh/sh_dac_audio.c:166:26: warning: unused variable 'runtime'
      sound/sh/sh_dac_audio.c:186:26: warning: unused variable 'runtime'
      sound/sh/sh_dac_audio.c:205:26: warning: unused variable 'runtime'
    
    Fixes: 1cc2f8ba0b3e ("ALSA: sh: Convert to the new PCM ops")
    Link: https://lore.kernel.org/r/20200104110057.13875-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34143dfc95577cd11ebb91283fb39f5d5294845b
Author: Icenowy Zheng <icenowy@aosc.io>
Date:   Fri Jan 3 22:35:03 2020 -0800

    clk: sunxi-ng: add mux and pll notifiers for A64 CPU clock
    
    [ Upstream commit ec97faff743b398e21f74a54c81333f3390093aa ]
    
    The A64 PLL_CPU clock has the same instability if some factor changed
    without the PLL gated like other SoCs with sun6i-style CCU, e.g. A33,
    H3.
    
    Add the mux and pll notifiers for A64 CPU clock to workaround the
    problem.
    
    Fixes: c6a0637460c2 ("clk: sunxi-ng: Add A64 clocks")
    Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
    Signed-off-by: Vasily Khoruzhick <anarsoul@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a0ea3b872f8408cad3e9187958d6ea0e848a11e
Author: Jiewei Ke <kejiewei.cn@gmail.com>
Date:   Fri Dec 27 19:36:13 2019 +0800

    RDMA/rxe: Fix error type of mmap_offset
    
    [ Upstream commit 6ca18d8927d468c763571f78c9a7387a69ffa020 ]
    
    The type of mmap_offset should be u64 instead of int to match the type of
    mminfo.offset. If otherwise, after we create several thousands of CQs, it
    will run into overflow issues.
    
    Link: https://lore.kernel.org/r/20191227113613.5020-1-kejiewei.cn@gmail.com
    Signed-off-by: Jiewei Ke <kejiewei.cn@gmail.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14e843570f05168ae1b915cc43dae75d692dda8e
Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
Date:   Fri Nov 29 13:19:19 2019 +0900

    reset: uniphier: Add SCSSI reset control for each channel
    
    [ Upstream commit f4aec227e985e31d2fdc5608daf48e3de19157b7 ]
    
    SCSSI has reset controls for each channel in the SoCs newer than Pro4,
    so this adds missing reset controls for channel 1, 2 and 3. And more, this
    moves MCSSI reset ID after SCSSI.
    
    Fixes: 6b39fd590aeb ("reset: uniphier: add reset control support for SPI")
    Signed-off-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
    Acked-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81b956cebb5dd7b0bf2966ac98ac461e83e163fc
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Dec 18 20:48:10 2019 +0100

    pinctrl: sh-pfc: sh7269: Fix CAN function GPIOs
    
    [ Upstream commit 02aeb2f21530c98fc3ca51028eda742a3fafbd9f ]
    
    pinmux_func_gpios[] contains a hole due to the missing function GPIO
    definition for the "CTX0&CTX1" signal, which is the logical "AND" of the
    first two CAN outputs.
    
    A closer look reveals other issues:
      - Some functionality is available on alternative pins, but the
        PINMUX_DATA() entries is using the wrong marks,
      - Several configurations are missing.
    
    Fix this by:
      - Renaming CTX0CTX1CTX2_MARK, CRX0CRX1_PJ22_MARK, and
        CRX0CRX1CRX2_PJ20_MARK to CTX0_CTX1_CTX2_MARK, CRX0_CRX1_PJ22_MARK,
        resp. CRX0_CRX1_CRX2_PJ20_MARK for consistency with the
        corresponding enum IDs,
      - Adding all missing enum IDs and marks,
      - Use the right (*_PJ2x) variants for alternative pins,
      - Adding all missing configurations to pinmux_data[],
      - Adding all missing function GPIO definitions to pinmux_func_gpios[].
    
    See SH7268 Group, SH7269 Group User’s Manual: Hardware, Rev. 2.00:
      [1] Table 1.4 List of Pins
      [2] Figure 23.29 Connection Example when Using Channels 0 and 1 as One
          Channel (64 Mailboxes × 1 Channel) and Channel 2 as One Channel
          (32 Mailboxes × 1 Channel),
      [3] Figure 23.30 Connection Example when Using Channels 0, 1, and 2 as
          One Channel (96 Mailboxes × 1 Channel),
      [4] Table 48.3 Multiplexed Pins (Port B),
      [5] Table 48.4 Multiplexed Pins (Port C),
      [6] Table 48.10 Multiplexed Pins (Port J),
      [7] Section 48.2.4 Port B Control Registers 0 to 5 (PBCR0 to PBCR5).
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20191218194812.12741-5-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f6ca0c7842e36ad158e9c3a7d52f2c269a698a4
Author: Chanwoo Choi <cw00.choi@samsung.com>
Date:   Thu Dec 12 11:20:30 2019 +0900

    PM / devfreq: rk3399_dmc: Add COMPILE_TEST and HAVE_ARM_SMCCC dependency
    
    [ Upstream commit eff5d31f7407fa9d31fb840106f1593399457298 ]
    
    To build test, add COMPILE_TEST depedency to both ARM_RK3399_DMC_DEVFREQ
    and DEVFREQ_EVENT_ROCKCHIP_DFI configuration. And ARM_RK3399_DMC_DEVFREQ
    used the SMCCC interface so that add HAVE_ARM_SMCCC dependency to prevent
    the build break.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 622c5caed0e602c907d4847151d79686d40961d1
Author: Valdis Kletnieks <valdis.kletnieks@vt.edu>
Date:   Thu Dec 5 21:36:07 2019 -0500

    x86/vdso: Provide missing include file
    
    [ Upstream commit bff47c2302cc249bcd550b17067f8dddbd4b6f77 ]
    
    When building with C=1, sparse issues a warning:
    
      CHECK   arch/x86/entry/vdso/vdso32-setup.c
      arch/x86/entry/vdso/vdso32-setup.c:28:28: warning: symbol 'vdso32_enabled' was not declared. Should it be static?
    
    Provide the missing header file.
    
    Signed-off-by: Valdis Kletnieks <valdis.kletnieks@vt.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86-ml <x86@kernel.org>
    Link: https://lkml.kernel.org/r/36224.1575599767@turing-police
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71027d56194a79d2aee4bd34489fd0c84f1c9fbf
Author: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
Date:   Thu Dec 19 16:21:48 2019 +0530

    crypto: chtls - Fixed memory leak
    
    [ Upstream commit 93e23eb2ed6c11b4f483c8111ac155ec2b1f3042 ]
    
    Freed work request skbs when connection terminates.
    enqueue_wr()/ dequeue_wr() is shared between softirq
    and application contexts, should be protected by socket
    lock. Moved dequeue_wr() to appropriate file.
    
    Signed-off-by: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af8eca600b408a0e59d2848dfcfad60413f626a9
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Mon Dec 16 11:53:28 2019 +0100

    dmaengine: imx-sdma: Fix memory leak
    
    [ Upstream commit 02939cd167095f16328a1bd5cab5a90b550606df ]
    
    The current descriptor is not on any list of the virtual DMA channel.
    Once sdma_terminate_all() is called when a descriptor is currently
    in flight then this one is forgotten to be freed. We have to call
    vchan_terminate_vdesc() on this descriptor to re-add it to the lists.
    Now that we also free the currently running descriptor we can (and
    actually have to) remove the current descriptor from its list also
    for the cyclic case.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Reviewed-by: Robin Gong <yibin.gong@nxp.com>
    Tested-by: Robin Gong <yibin.gong@nxp.com>
    Link: https://lore.kernel.org/r/20191216105328.15198-10-s.hauer@pengutronix.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 219b3d29532582df5b55aa3c3552820fdac1d4a3
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Mon Dec 16 12:01:16 2019 -0700

    dmaengine: Store module owner in dma_device struct
    
    [ Upstream commit dae7a589c18a4d979d5f14b09374e871b995ceb1 ]
    
    dma_chan_to_owner() dereferences the driver from the struct device to
    obtain the owner and call module_[get|put](). However, if the backing
    device is unbound before the dma_device is unregistered, the driver
    will be cleared and this will cause a NULL pointer dereference.
    
    Instead, store a pointer to the owner module in the dma_device struct
    so the module reference can be properly put when the channel is put, even
    if the backing device was destroyed first.
    
    This change helps to support a safer unbind of DMA engines.
    If the dma_device is unregistered in the driver's remove function,
    there's no guarantee that there are no existing clients and a users
    action may trigger the WARN_ONCE in dma_async_device_unregister()
    which is unlikely to leave the system in a consistent state.
    Instead, a better approach is to allow the backing driver to go away
    and fail any subsequent requests to it.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Link: https://lore.kernel.org/r/20191216190120.21374-2-logang@deltatee.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7742c3e9db41b1add4570c146b4bb429ce8ee610
Author: Jaihind Yadav <jaihindyadav@codeaurora.org>
Date:   Tue Dec 17 17:25:47 2019 +0530

    selinux: ensure we cleanup the internal AVC counters on error in avc_update()
    
    [ Upstream commit 030b995ad9ece9fa2d218af4429c1c78c2342096 ]
    
    In AVC update we don't call avc_node_kill() when avc_xperms_populate()
    fails, resulting in the avc->avc_cache.active_nodes counter having a
    false value.  In last patch this changes was missed , so correcting it.
    
    Fixes: fa1aa143ac4a ("selinux: extended permissions for ioctls")
    Signed-off-by: Jaihind Yadav <jaihindyadav@codeaurora.org>
    Signed-off-by: Ravi Kumar Siddojigari <rsiddoji@codeaurora.org>
    [PM: merge fuzz, minor description cleanup]
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69941019d9dd0af7d440b108fbdf44c6f7c0a2f0
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Dec 11 14:52:21 2019 +0100

    ARM: dts: r8a7779: Add device node for ARM global timer
    
    [ Upstream commit 8443ffd1bbd5be74e9b12db234746d12e8ea93e2 ]
    
    Add a device node for the global timer, which is part of the Cortex-A9
    MPCore.
    
    The global timer can serve as an accurate (4 ns) clock source for
    scheduling and delay loops.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20191211135222.26770-4-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1899747eb793003fb08fae448b5f86ab2d13598a
Author: Bibby Hsieh <bibby.hsieh@mediatek.com>
Date:   Tue Dec 10 13:05:21 2019 +0800

    drm/mediatek: handle events when enabling/disabling crtc
    
    [ Upstream commit 411f5c1eacfebb1f6e40b653d29447cdfe7282aa ]
    
    The driver currently handles vblank events only when updating planes on
    an already enabled CRTC. The atomic update API however allows requesting
    an event when enabling or disabling a CRTC. This currently leads to
    event objects being leaked in the kernel and to events not being sent
    out. Fix it.
    
    Signed-off-by: Bibby Hsieh <bibby.hsieh@mediatek.com>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1b69d786373d0b07f0157535b43dee39c7057b5
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 18:42:20 2019 -0700

    scsi: aic7xxx: Adjust indentation in ahc_find_syncrate
    
    [ Upstream commit 4dbc96ad65c45cdd4e895ed7ae4c151b780790c5 ]
    
    Clang warns:
    
    ../drivers/scsi/aic7xxx/aic7xxx_core.c:2317:5: warning: misleading
    indentation; statement is not part of the previous 'if'
    [-Wmisleading-indentation]
                            if ((syncrate->sxfr_u2 & ST_SXFR) != 0)
                            ^
    ../drivers/scsi/aic7xxx/aic7xxx_core.c:2310:4: note: previous statement
    is here
                            if (syncrate == &ahc_syncrates[maxsync])
                            ^
    1 warning generated.
    
    This warning occurs because there is a space amongst the tabs on this
    line. Remove it so that the indentation is consistent with the Linux kernel
    coding style and clang no longer warns.
    
    This has been a problem since the beginning of git history hence no fixes
    tag.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/817
    Link: https://lore.kernel.org/r/20191218014220.52746-1-natechancellor@gmail.com
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d381d3c5fc77ca5cdf0cb53a14c147d19ba2b5cf
Author: Can Guo <cang@codeaurora.org>
Date:   Mon Nov 25 22:53:33 2019 -0800

    scsi: ufs: Complete pending requests in host reset and restore path
    
    [ Upstream commit 2df74b6985b51e77756e2e8faa16c45ca3ba53c5 ]
    
    In UFS host reset and restore path, before probe, we stop and start the
    host controller once. After host controller is stopped, the pending
    requests, if any, are cleared from the doorbell, but no completion IRQ
    would be raised due to the hba is stopped.  These pending requests shall be
    completed along with the first NOP_OUT command (as it is the first command
    which can raise a transfer completion IRQ) sent during probe.  Since the
    OCSs of these pending requests are not SUCCESS (because they are not yet
    literally finished), their UPIUs shall be dumped. When there are multiple
    pending requests, the UPIU dump can be overwhelming and may lead to
    stability issues because it is in atomic context.  Therefore, before probe,
    complete these pending requests right after host controller is stopped and
    silence the UPIU dump from them.
    
    Link: https://lore.kernel.org/r/1574751214-8321-5-git-send-email-cang@qti.qualcomm.com
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Tested-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be62f427b52305fa860d43625a0a4dd79d93174a
Author: Erik Kaneda <erik.kaneda@intel.com>
Date:   Tue Dec 17 11:35:20 2019 -0800

    ACPICA: Disassembler: create buffer fields in ACPI_PARSE_LOAD_PASS1
    
    [ Upstream commit 5ddbd77181dfca61b16d2e2222382ea65637f1b9 ]
    
    ACPICA commit 29cc8dbc5463a93625bed87d7550a8bed8913bf4
    
    create_buffer_field is a deferred op that is typically processed in
    load pass 2. However, disassembly of control method contents walk the
    parse tree with ACPI_PARSE_LOAD_PASS1 and AML_CREATE operators are
    processed in a later walk. This is a problem when there is a control
    method that has the same name as the AML_CREATE object. In this case,
    any use of the name segment will be detected as a method call rather
    than a reference to a buffer field. If this is detected as a method
    call, it can result in a mal-formed parse tree if the control methods
    have parameters.
    
    This change in processing AML_CREATE ops earlier solves this issue by
    inserting the named object in the ACPI namespace so that references
    to this name would be detected as a name string rather than a method
    call.
    
    Link: https://github.com/acpica/acpica/commit/29cc8dbc
    Reported-by: Elia Geretto <elia.f.geretto@gmail.com>
    Tested-by: Elia Geretto <elia.f.geretto@gmail.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f96316a11e20153a3d30a96f1e8d338709abacd
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sun Dec 15 13:58:58 2019 -0600

    orinoco: avoid assertion in case of NULL pointer
    
    [ Upstream commit c705f9fc6a1736dcf6ec01f8206707c108dca824 ]
    
    In ezusb_init, if upriv is NULL, the code crashes. However, the caller
    in ezusb_probe can handle the error and print the failure message.
    The patch replaces the BUG_ON call to error return.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d915684105b9215ee4fc22b00b8d621b24cc99d
Author: Phong Tran <tranmanphong@gmail.com>
Date:   Wed Nov 27 00:55:29 2019 +0700

    rtlwifi: rtl_pci: Fix -Wcast-function-type
    
    [ Upstream commit cb775c88da5d48a85d99d95219f637b6fad2e0e9 ]
    
    correct usage prototype of callback in tasklet_init().
    Report by https://github.com/KSPP/linux/issues/20
    
    Signed-off-by: Phong Tran <tranmanphong@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b33327e505dd19a65689b21848da48a08c4a6832
Author: Phong Tran <tranmanphong@gmail.com>
Date:   Wed Nov 27 00:55:28 2019 +0700

    iwlegacy: Fix -Wcast-function-type
    
    [ Upstream commit da5e57e8a6a3e69dac2937ba63fa86355628fbb2 ]
    
    correct usage prototype of callback in tasklet_init().
    Report by https://github.com/KSPP/linux/issues/20
    
    Signed-off-by: Phong Tran <tranmanphong@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bfca57ef2e005b18a81a310006cfa5468a3c791
Author: Phong Tran <tranmanphong@gmail.com>
Date:   Wed Nov 27 00:55:27 2019 +0700

    ipw2x00: Fix -Wcast-function-type
    
    [ Upstream commit ebd77feb27e91bb5fe35a7818b7c13ea7435fb98 ]
    
    correct usage prototype of callback in tasklet_init().
    Report by https://github.com/KSPP/linux/issues/20
    
    Signed-off-by: Phong Tran <tranmanphong@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b213d7453a911d77f8f717849cf3429af05bd71e
Author: Phong Tran <tranmanphong@gmail.com>
Date:   Wed Nov 27 00:55:26 2019 +0700

    b43legacy: Fix -Wcast-function-type
    
    [ Upstream commit 475eec112e4267232d10f4afe2f939a241692b6c ]
    
    correct usage prototype of callback in tasklet_init().
    Report by https://github.com/KSPP/linux/issues/20
    
    Tested-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Phong Tran <tranmanphong@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c6632f3a5934cace3d207bf6534854c95e2be2a
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Dec 17 20:42:57 2019 -0700

    ALSA: usx2y: Adjust indentation in snd_usX2Y_hwdep_dsp_status
    
    [ Upstream commit df4654bd6e42125d9b85ce3a26eaca2935290b98 ]
    
    Clang warns:
    
    ../sound/usb/usx2y/usX2Yhwdep.c:122:3: warning: misleading indentation;
    statement is not part of the previous 'if' [-Wmisleading-indentation]
            info->version = USX2Y_DRIVER_VERSION;
            ^
    ../sound/usb/usx2y/usX2Yhwdep.c:120:2: note: previous statement is here
            if (us428->chip_status & USX2Y_STAT_CHIP_INIT)
            ^
    1 warning generated.
    
    This warning occurs because there is a space before the tab on this
    line. Remove it so that the indentation is consistent with the Linux
    kernel coding style and clang no longer warns.
    
    This was introduced before the beginning of git history so no fixes tag.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/831
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lore.kernel.org/r/20191218034257.54535-1-natechancellor@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6a5ba48c87425dfb861b1150b169a82cddd3091
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Dec 13 16:53:06 2019 +0800

    netfilter: nft_tunnel: add the missing ERSPAN_VERSION nla_policy
    
    [ Upstream commit 0705f95c332081036d85f26691e9d3cd7d901c31 ]
    
    ERSPAN_VERSION is an attribute parsed in kernel side, nla_policy
    type should be added for it, like other attributes.
    
    Fixes: af308b94a2a4 ("netfilter: nf_tables: add tunnel support")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a3bc6e31b2b40f5c8f20ba355c34203ea21abd0
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sun Dec 15 10:14:51 2019 -0600

    fore200e: Fix incorrect checks of NULL pointer dereference
    
    [ Upstream commit bbd20c939c8aa3f27fa30e86691af250bf92973a ]
    
    In fore200e_send and fore200e_close, the pointers from the arguments
    are dereferenced in the variable declaration block and then checked
    for NULL. The patch fixes these issues by avoiding NULL pointer
    dereferences.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85a19b0e31e256e77fd4124804b9cec10619de5e
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Dec 13 16:53:37 2019 +0100

    r8169: check that Realtek PHY driver module is loaded
    
    [ Upstream commit f325937735498afb054a0195291bbf68d0b60be5 ]
    
    Some users complained about problems with r8169 and it turned out that
    the generic PHY driver was used instead instead of the dedicated one.
    In all cases reason was that r8169.ko was in initramfs, but realtek.ko
    not. Manually adding realtek.ko to initramfs fixed the issues.
    Root cause seems to be that tools like dracut and genkernel don't
    consider softdeps. Add a check for loaded Realtek PHY driver module
    and provide the user with a hint if it's not loaded.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef3d73fe8836192410cbc2d2a15b2946e26a45d1
Author: Jan Kara <jack@suse.cz>
Date:   Thu Dec 12 11:35:58 2019 +0100

    reiserfs: Fix spurious unlock in reiserfs_fill_super() error handling
    
    [ Upstream commit 4d5c1adaf893b8aa52525d2b81995e949bcb3239 ]
    
    When we fail to allocate string for journal device name we jump to
    'error' label which tries to unlock reiserfs write lock which is not
    held. Jump to 'error_unlocked' instead.
    
    Fixes: f32485be8397 ("reiserfs: delay reiserfs lock until journal initialization")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a238031d0240a4780a0942dec152c4e8b1a37b0b
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Sun Dec 8 22:11:40 2019 +0100

    media: v4l2-device.h: Explicitly compare grp{id,mask} to zero in v4l2_device macros
    
    [ Upstream commit afb34781620274236bd9fc9246e22f6963ef5262 ]
    
    When building with Clang + -Wtautological-constant-compare, several of
    the ivtv and cx18 drivers warn along the lines of:
    
     drivers/media/pci/cx18/cx18-driver.c:1005:21: warning: converting the
     result of '<<' to a boolean always evaluates to true
     [-Wtautological-constant-compare]
                             cx18_call_hw(cx, CX18_HW_GPIO_RESET_CTRL,
                                             ^
     drivers/media/pci/cx18/cx18-cards.h:18:37: note: expanded from macro
     'CX18_HW_GPIO_RESET_CTRL'
     #define CX18_HW_GPIO_RESET_CTRL         (1 << 6)
                                               ^
     1 warning generated.
    
    This warning happens because the shift operation is implicitly converted
    to a boolean in v4l2_device_mask_call_all before being negated. This can
    be solved by just comparing the mask result to 0 explicitly so that
    there is no boolean conversion. The ultimate goal is to enable
    -Wtautological-compare globally because there are several subwarnings
    that would be helpful to have.
    
    For visual consistency and avoidance of these warnings in the future,
    all of the implicitly boolean conversions in the v4l2_device macros
    are converted to explicit ones as well.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/752
    
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06ec9de03203a2683a42985023f02f87810c36cd
Author: Daniel Drake <drake@endlessm.com>
Date:   Wed Nov 27 13:38:36 2019 +0800

    PCI: Increase D3 delay for AMD Ryzen5/7 XHCI controllers
    
    [ Upstream commit 3030df209aa8cf831b9963829bd9f94900ee8032 ]
    
    On Asus UX434DA (AMD Ryzen7 3700U) and Asus X512DK (AMD Ryzen5 3500U), the
    XHCI controller fails to resume from runtime suspend or s2idle, and USB
    becomes unusable from that point.
    
      xhci_hcd 0000:03:00.4: Refused to change power state, currently in D3
      xhci_hcd 0000:03:00.4: enabling device (0000 -> 0002)
      xhci_hcd 0000:03:00.4: WARN: xHC restore state timeout
      xhci_hcd 0000:03:00.4: PCI post-resume error -110!
      xhci_hcd 0000:03:00.4: HC died; cleaning up
    
    During suspend, a transition to D3cold is attempted, however the affected
    platforms do not seem to cut the power to the PCI device when in this
    state, so the device stays in D3hot.
    
    Upon resume, the D3hot-to-D0 transition is successful only if the D3 delay
    is increased to 20ms. The transition failure does not appear to be
    detectable as a CRS condition. Add a PCI quirk to increase the delay on the
    affected hardware.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=205587
    Link: http://lkml.kernel.org/r/CAD8Lp47Vh69gQjROYG69=waJgL7hs1PwnLonL9+27S_TcRhixA@mail.gmail.com
    Link: https://lore.kernel.org/r/20191127053836.31624-2-drake@endlessm.com
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3931158181bf85bfc2c4873a7465e47ad1c6d0b1
Author: Daniel Drake <drake@endlessm.com>
Date:   Wed Nov 27 13:38:35 2019 +0800

    PCI: Add generic quirk for increasing D3hot delay
    
    [ Upstream commit 62fe23df067715a21c4aef44068efe7ceaa8f627 ]
    
    Separate the D3 delay increase functionality out of quirk_radeon_pm() into
    its own function so that it can be shared with other quirks, including the
    AMD Ryzen XHCI quirk that will be introduced in a followup commit.
    
    Tweak the function name and message to indicate more clearly that the delay
    relates to a D3hot-to-D0 transition.
    
    Link: https://lore.kernel.org/r/20191127053836.31624-1-drake@endlessm.com
    Signed-off-by: Daniel Drake <drake@endlessm.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0674762c9cc7f25ea4d993dd92f822785286f51f
Author: Forest Crossman <cyrozap@gmail.com>
Date:   Sat Nov 16 23:38:40 2019 +0100

    media: cx23885: Add support for AVerMedia CE310B
    
    [ Upstream commit dc4cac67e13515835ed8081d510aa507aacb013b ]
    
    The AVerMedia CE310B is a simple composite + S-Video + stereo audio
    capture card, and uses only the CX23888 to perform all of these
    functions.
    
    I've tested both video inputs and the audio interface and confirmed that
    they're all working. However, there are some issues:
    
    * Sometimes when I switch inputs the video signal turns black and can't
      be recovered until the system is rebooted. I haven't been able to
      determine the cause of this behavior, nor have I found a solution to
      fix it or any workarounds other than rebooting.
    * The card sometimes seems to have trouble syncing to the video signal,
      and some of the VBI data appears as noise at the top of the frame, but
      I assume that to be a result of my very noisy RF environment and the
      card's unshielded input traces rather than a configuration issue.
    
    Signed-off-by: Forest Crossman <cyrozap@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8422f39cc393c71afc630fabe588ea4482b62de4
Author: Wei Liu <wei.liu@kernel.org>
Date:   Wed Dec 11 17:45:11 2019 +0000

    PCI: iproc: Apply quirk_paxc_bridge() for module as well as built-in
    
    [ Upstream commit 574f29036fce385e28617547955dd6911d375025 ]
    
    Previously quirk_paxc_bridge() was applied when the iproc driver was
    built-in, but not when it was compiled as a module.
    
    This happened because it was under #ifdef CONFIG_PCIE_IPROC_PLATFORM:
    PCIE_IPROC_PLATFORM=y causes CONFIG_PCIE_IPROC_PLATFORM to be defined, but
    PCIE_IPROC_PLATFORM=m causes CONFIG_PCIE_IPROC_PLATFORM_MODULE to be
    defined.
    
    Move quirk_paxc_bridge() to pcie-iproc.c and drop the #ifdef so the quirk
    is always applied, whether iproc is built-in or a module.
    
    [bhelgaas: commit log, move to pcie-iproc.c, not pcie-iproc-platform.c]
    Link: https://lore.kernel.org/r/20191211174511.89713-1-wei.liu@kernel.org
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86c8e8a64f88edc4b2bd6ac2594af727e97326ae
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Mon Dec 9 08:50:18 2019 -0800

    ARM: dts: imx6: rdu2: Limit USBH1 to Full Speed
    
    [ Upstream commit 6bb1e09c4c375db29770444f689f35f5cbe696bc ]
    
    Cabling used to connect devices to USBH1 on RDU2 does not meet USB
    spec cable quality and cable length requirements to operate at High
    Speed, so limit the port to Full Speed only.
    
    Reported-by: Chris Healy <cphealy@gmail.com>
    Reviewed-by: Chris Healy <cphealy@gmail.com>
    Reviewed-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3aeb6bc9a72ef3b532f63f7687d5934102bceb9f
Author: Andrey Smirnov <andrew.smirnov@gmail.com>
Date:   Mon Dec 9 08:50:17 2019 -0800

    ARM: dts: imx6: rdu2: Disable WP for USDHC2 and USDHC3
    
    [ Upstream commit cd58a174e58649426fb43d7456e5f7d7eab58af1 ]
    
    RDU2 production units come with resistor connecting WP pin to
    correpsonding GPIO DNPed for both SD card slots. Drop any WP related
    configuration and mark both slots with "disable-wp".
    
    Reported-by: Chris Healy <cphealy@gmail.com>
    Reviewed-by: Chris Healy <cphealy@gmail.com>
    Reviewed-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Fabio Estevam <festevam@gmail.com>
    Cc: Lucas Stach <l.stach@pengutronix.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1dca9e9371928f213d1e6b569488f44f4cbda55a
Author: Manu Gautam <mgautam@codeaurora.org>
Date:   Mon Dec 9 16:15:01 2019 +0100

    arm64: dts: qcom: msm8996: Disable USB2 PHY suspend by core
    
    [ Upstream commit d026c96b25b7ce5df89526aad2df988d553edb4d ]
    
    QUSB2 PHY on msm8996 doesn't work well when autosuspend by
    dwc3 core using USB2PHYCFG register is enabled. One of the
    issue seen is that PHY driver reports PLL lock failure and
    fails phy_init() if dwc3 core has USB2 PHY suspend enabled.
    Fix this by using quirks to disable USB2 PHY LPM/suspend and
    dwc3 core already takes care of explicitly suspending PHY
    during suspend if quirks are specified.
    
    Signed-off-by: Manu Gautam <mgautam@codeaurora.org>
    Signed-off-by: Paolo Pisati <p.pisati@gmail.com>
    Link: https://lore.kernel.org/r/20191209151501.26993-1-p.pisati@gmail.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0d7b3faa62731f8f5fb5be2c7b8265b8e2e41a8
Author: Paul Moore <paul@paul-moore.com>
Date:   Mon Dec 9 20:39:46 2019 -0500

    selinux: ensure we cleanup the internal AVC counters on error in avc_insert()
    
    [ Upstream commit d8db60cb23e49a92cf8cada3297395c7fa50fdf8 ]
    
    Fix avc_insert() to call avc_node_kill() if we've already allocated
    an AVC node and the code fails to insert the node in the cache.
    
    Fixes: fa1aa143ac4a ("selinux: extended permissions for ioctls")
    Reported-by: rsiddoji@codeaurora.org
    Suggested-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9df95ddb8bc50395957fb8232690006ca9625a7
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Nov 21 01:18:35 2019 +0000

    arm: dts: allwinner: H3: Add PMU node
    
    [ Upstream commit 0388a110747bec0c9d9de995842bb2a03a26aae1 ]
    
    Add the Performance Monitoring Unit (PMU) device tree node to the H3
    .dtsi, which tells DT users which interrupts are triggered by PMU
    overflow events on each core. The numbers come from the manual and have
    been checked in U-Boot and with perf in Linux.
    
    Tested with perf record and taskset on an OrangePi Zero.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f1046b33f1bf36a2a55104296ab076d1aab3455
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Thu Nov 21 01:18:33 2019 +0000

    arm64: dts: allwinner: H6: Add PMU mode
    
    [ Upstream commit 7aa9b9eb7d6a8fde7acbe0446444f7e3fae1fe3b ]
    
    Add the Performance Monitoring Unit (PMU) device tree node to the H6
    .dtsi, which tells DT users which interrupts are triggered by PMU
    overflow events on each core. The numbers come from the manual and have
    been checked in U-Boot and with perf in Linux.
    
    Tested with perf record and taskset on a Pine H64.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efd5ce8b23a838f6577ecb8f28cd36568b4f49df
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Fri Nov 22 12:22:45 2019 -0500

    selinux: fall back to ref-walk if audit is required
    
    [ Upstream commit 0188d5c025ca8fe756ba3193bd7d150139af5a88 ]
    
    commit bda0be7ad994 ("security: make inode_follow_link RCU-walk aware")
    passed down the rcu flag to the SELinux AVC, but failed to adjust the
    test in slow_avc_audit() to also return -ECHILD on LSM_AUDIT_DATA_DENTRY.
    Previously, we only returned -ECHILD if generating an audit record with
    LSM_AUDIT_DATA_INODE since this was only relevant from inode_permission.
    Move the handling of MAY_NOT_BLOCK to avc_audit() and its inlined
    equivalent in selinux_inode_permission() immediately after we determine
    that audit is required, and always fall back to ref-walk in this case.
    
    Fixes: bda0be7ad994 ("security: make inode_follow_link RCU-walk aware")
    Reported-by: Will Deacon <will@kernel.org>
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec0237cb3621974af9ffe5aef452d1dbc4103ef8
Author: Mao Wenan <maowenan@huawei.com>
Date:   Mon Dec 9 21:08:45 2019 +0800

    NFC: port100: Convert cpu_to_le16(le16_to_cpu(E1) + E2) to use le16_add_cpu().
    
    [ Upstream commit 718eae277e62a26e5862eb72a830b5e0fe37b04a ]
    
    Convert cpu_to_le16(le16_to_cpu(frame->datalen) + len) to
    use le16_add_cpu(), which is more concise and does the same thing.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 354704ede9b6a193adfe87a915d578976dfedd97
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Thu Nov 28 15:55:51 2019 +0100

    net/wan/fsl_ucc_hdlc: reject muram offsets above 64K
    
    [ Upstream commit 148587a59f6b85831695e0497d9dd1af5f0495af ]
    
    Qiang Zhao points out that these offsets get written to 16-bit
    registers, and there are some QE platforms with more than 64K
    muram. So it is possible that qe_muram_alloc() gives us an allocation
    that can't actually be used by the hardware, so detect and reject
    that.
    
    Reported-by: Qiang Zhao <qiang.zhao@nxp.com>
    Reviewed-by: Timur Tabi <timur@kernel.org>
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad763354847a89fefd43421c723fa076d06a1f12
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue Dec 3 17:47:09 2019 +0100

    regulator: rk808: Lower log level on optional GPIOs being not available
    
    [ Upstream commit b8a039d37792067c1a380dc710361905724b9b2f ]
    
    RK808 can leverage a couple of GPIOs to tweak the ramp rate during DVS
    (Dynamic Voltage Scaling). These GPIOs are entirely optional but a
    dev_warn() appeared when cleaning this driver to use a more up-to-date
    gpiod API. At least reduce the log level to 'info' as it is totally
    fine to not populate these GPIO on a hardware design.
    
    This change is trivial but it is worth not polluting the logs during
    bringup phase by having real warnings and errors sorted out
    correctly.
    
    Fixes: a13eaf02e2d6 ("regulator: rk808: make better use of the gpiod API")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/r/20191203164709.11127-1-miquel.raynal@bootlin.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a882dcd9fd487eca8f019dd9814cacb7fb82b2c4
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Sat Nov 23 12:23:36 2019 -0700

    drm/amdgpu: Ensure ret is always initialized when using SOC15_WAIT_ON_RREG
    
    [ Upstream commit a63141e31764f8daf3f29e8e2d450dcf9199d1c8 ]
    
    Commit b0f3cd3191cd ("drm/amdgpu: remove unnecessary JPEG2.0 code from
    VCN2.0") introduced a new clang warning in the vcn_v2_0_stop function:
    
    ../drivers/gpu/drm/amd/amdgpu/vcn_v2_0.c:1082:2: warning: variable 'r'
    is used uninitialized whenever 'while' loop exits because its condition
    is false [-Wsometimes-uninitialized]
            SOC15_WAIT_ON_RREG(VCN, 0, mmUVD_STATUS, UVD_STATUS__IDLE, 0x7, r);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15_common.h:55:10: note:
    expanded from macro 'SOC15_WAIT_ON_RREG'
                    while ((tmp_ & (mask)) != (expected_value)) {   \
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ../drivers/gpu/drm/amd/amdgpu/vcn_v2_0.c:1083:6: note: uninitialized use
    occurs here
            if (r)
                ^
    ../drivers/gpu/drm/amd/amdgpu/vcn_v2_0.c:1082:2: note: remove the
    condition if it is always true
            SOC15_WAIT_ON_RREG(VCN, 0, mmUVD_STATUS, UVD_STATUS__IDLE, 0x7, r);
            ^
    ../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15_common.h:55:10: note:
    expanded from macro 'SOC15_WAIT_ON_RREG'
                    while ((tmp_ & (mask)) != (expected_value)) {   \
                           ^
    ../drivers/gpu/drm/amd/amdgpu/vcn_v2_0.c:1072:7: note: initialize the
    variable 'r' to silence this warning
            int r;
                 ^
                  = 0
    1 warning generated.
    
    To prevent warnings like this from happening in the future, make the
    SOC15_WAIT_ON_RREG macro initialize its ret variable before the while
    loop that can time out. This macro's return value is always checked so
    it should set ret in both the success and fail path.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/776
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b367528f6d23b696048adc3593bc267d431663bf
Author: yu kuai <yukuai3@huawei.com>
Date:   Mon Nov 4 21:27:20 2019 +0800

    drm/amdgpu: remove 4 set but not used variable in amdgpu_atombios_get_connector_info_from_object_table
    
    [ Upstream commit bae028e3e521e8cb8caf2cc16a455ce4c55f2332 ]
    
    Fixes gcc '-Wunused-but-set-variable' warning:
    
    drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c: In function
    'amdgpu_atombios_get_connector_info_from_object_table':
    drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c:376:26: warning: variable
    'grph_obj_num' set but not used [-Wunused-but-set-variable]
    drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c:376:13: warning: variable
    'grph_obj_id' set but not used [-Wunused-but-set-variable]
    drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c:341:37: warning: variable
    'con_obj_type' set but not used [-Wunused-but-set-variable]
    drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c:341:24: warning: variable
    'con_obj_num' set but not used [-Wunused-but-set-variable]
    
    They are never used, so can be removed.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Signed-off-by: yu kuai <yukuai3@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 087f8bf4c612008069fbf946e3085d25f1d1c070
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon Feb 3 10:31:34 2020 -0800

    clk: qcom: rcg2: Don't crash if our parent can't be found; return an error
    
    [ Upstream commit 908b050114d8fefdddc57ec9fbc213c3690e7f5f ]
    
    When I got my clock parenting slightly wrong I ended up with a crash
    that looked like this:
    
      Unable to handle kernel NULL pointer dereference at virtual
      address 0000000000000000
      ...
      pc : clk_hw_get_rate+0x14/0x44
      ...
      Call trace:
       clk_hw_get_rate+0x14/0x44
       _freq_tbl_determine_rate+0x94/0xfc
       clk_rcg2_determine_rate+0x2c/0x38
       clk_core_determine_round_nolock+0x4c/0x88
       clk_core_round_rate_nolock+0x6c/0xa8
       clk_core_round_rate_nolock+0x9c/0xa8
       clk_core_set_rate_nolock+0x70/0x180
       clk_set_rate+0x3c/0x6c
       of_clk_set_defaults+0x254/0x360
       platform_drv_probe+0x28/0xb0
       really_probe+0x120/0x2dc
       driver_probe_device+0x64/0xfc
       device_driver_attach+0x4c/0x6c
       __driver_attach+0xac/0xc0
       bus_for_each_dev+0x84/0xcc
       driver_attach+0x2c/0x38
       bus_add_driver+0xfc/0x1d0
       driver_register+0x64/0xf8
       __platform_driver_register+0x4c/0x58
       msm_drm_register+0x5c/0x60
       ...
    
    It turned out that clk_hw_get_parent_by_index() was returning NULL and
    we weren't checking.  Let's check it so that we don't crash.
    
    Fixes: ac269395cdd8 ("clk: qcom: Convert to clk_hw based provider APIs")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Link: https://lkml.kernel.org/r/20200203103049.v4.1.I7487325fe8e701a68a07d3be8a6a4b571eca9cfa@changeid
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 296372fbd4cf7aab8d139b565d08705cc5499e11
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sat Feb 1 14:03:11 2020 +0900

    kconfig: fix broken dependency in randconfig-generated .config
    
    [ Upstream commit c8fb7d7e48d11520ad24808cfce7afb7b9c9f798 ]
    
    Running randconfig on arm64 using KCONFIG_SEED=0x40C5E904 (e.g. on v5.5)
    produces the .config with CONFIG_EFI=y and CONFIG_CPU_BIG_ENDIAN=y,
    which does not meet the !CONFIG_CPU_BIG_ENDIAN dependency.
    
    This is because the user choice for CONFIG_CPU_LITTLE_ENDIAN vs
    CONFIG_CPU_BIG_ENDIAN is set by randomize_choice_values() after the
    value of CONFIG_EFI is calculated.
    
    When this happens, the has_changed flag should be set.
    
    Currently, it takes the result from the last iteration. It should
    accumulate all the results of the loop.
    
    Fixes: 3b9a19e08960 ("kconfig: loop as long as we changed some symbols in randconfig")
    Reported-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fe69d2ba08f516ace6496d40ac47fe33d3d4ec7
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Thu Dec 5 07:40:43 2019 -0500

    KVM: s390: ENOTSUPP -> EOPNOTSUPP fixups
    
    [ Upstream commit c611990844c28c61ca4b35ff69d3a2ae95ccd486 ]
    
    There is no ENOTSUPP for userspace.
    
    Reported-by: Julian Wiedmann <jwi@linux.ibm.com>
    Fixes: 519783935451 ("KVM: s390: introduce ais mode modify function")
    Fixes: 2c1a48f2e5ed ("KVM: S390: add new group for flic")
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ce9e00a4a1dc570e3ac7d83fe9cc4f8a3fadbf7
Author: Sun Ke <sunke32@huawei.com>
Date:   Wed Jan 22 11:18:57 2020 +0800

    nbd: add a flush_workqueue in nbd_start_device
    
    [ Upstream commit 5c0dd228b5fc30a3b732c7ae2657e0161ec7ed80 ]
    
    When kzalloc fail, may cause trying to destroy the
    workqueue from inside the workqueue.
    
    If num_connections is m (2 < m), and NO.1 ~ NO.n
    (1 < n < m) kzalloc are successful. The NO.(n + 1)
    failed. Then, nbd_start_device will return ENOMEM
    to nbd_start_device_ioctl, and nbd_start_device_ioctl
    will return immediately without running flush_workqueue.
    However, we still have n recv threads. If nbd_release
    run first, recv threads may have to drop the last
    config_refs and try to destroy the workqueue from
    inside the workqueue.
    
    To fix it, add a flush_workqueue in nbd_start_device.
    
    Fixes: e9e006f5fcf2 ("nbd: fix max number of supported devs")
    Signed-off-by: Sun Ke <sunke32@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff19c8c6eab246a5011ce5d8f97ce826352f5fe6
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Tue Jan 21 16:12:45 2020 -0500

    drm/amd/display: Retrain dongles when SINK_COUNT becomes non-zero
    
    [ Upstream commit 3eb6d7aca53d81ce888624f09cd44dc0302161e8 ]
    
    [WHY]
    Two years ago the patch referenced by the Fixes tag stopped running
    dp_verify_link_cap_with_retries during DP detection when the reason
    for the detection was a short-pulse interrupt. This effectively meant
    that we were no longer doing the verify_link_cap training on active
    dongles when their SINK_COUNT changed from 0 to 1.
    
    A year ago this was partly remedied with:
    commit 80adaebd2d41 ("drm/amd/display: Don't skip link training for empty dongle")
    
    This made sure that we trained the dongle on initial hotplug (without
    connected downstream devices).
    
    This is all fine and dandy if it weren't for the fact that there are
    some dongles on the market that don't like link training when SINK_COUNT
    is 0 These dongles will in fact indicate a SINK_COUNT of 0 immediately
    after hotplug, even when a downstream device is connected, and then
    trigger a shortpulse interrupt indicating a SINK_COUNT change to 1.
    
    In order to play nicely we will need our policy to not link train an
    active DP dongle when SINK_COUNT is 0 but ensure we train it when the
    SINK_COUNT changes to 1.
    
    [HOW]
    Call dp_verify_link_cap_with_retries on detection even when the detection
    is triggered from a short pulse interrupt.
    
    With this change we can also revert this commit which we'll do in a separate
    follow-up change:
    commit 80adaebd2d41 ("drm/amd/display: Don't skip link training for empty dongle")
    
    Fixes: 0301ccbaf67d ("drm/amd/display: DP Compliance 400.1.1 failure")
    Suggested-by: Louis Li <Ching-shih.Li@amd.com>
    Tested-by: Louis Li <Ching-shih.Li@amd.com>
    Cc: Wenjing Liu <Wenjing.Liu@amd.com>
    Cc: Hersen Wu <hersenxs.wu@amd.com>
    Cc: Eric Yang <Eric.Yang2@amd.com>
    Reviewed-by: Wenjing Liu <Wenjing.Liu@amd.com>
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a044ba370b9bfe9de0d18c475ade0307ef3014f
Author: Rakesh Pillai <pillair@codeaurora.org>
Date:   Tue Jan 21 12:42:28 2020 +0530

    ath10k: Correct the DMA direction for management tx buffers
    
    [ Upstream commit 6ba8b3b6bd772f575f7736c8fd893c6981fcce16 ]
    
    The management packets, send to firmware via WMI, are
    mapped using the direction DMA_TO_DEVICE. Currently in
    case of wmi cleanup, these buffers are being unmapped
    using an incorrect DMA direction. This can cause unwanted
    behavior when the host driver is handling a restart
    of the wlan firmware.
    
    We might see a trace like below
    
    [<ffffff8008098b18>] __dma_inv_area+0x28/0x58
    [<ffffff8001176734>] ath10k_wmi_mgmt_tx_clean_up_pending+0x60/0xb0 [ath10k_core]
    [<ffffff80088c7c50>] idr_for_each+0x78/0xe4
    [<ffffff80011766a4>] ath10k_wmi_detach+0x4c/0x7c [ath10k_core]
    [<ffffff8001163d7c>] ath10k_core_stop+0x58/0x68 [ath10k_core]
    [<ffffff800114fb74>] ath10k_halt+0xec/0x13c [ath10k_core]
    [<ffffff8001165110>] ath10k_core_restart+0x11c/0x1a8 [ath10k_core]
    [<ffffff80080c36bc>] process_one_work+0x16c/0x31c
    
    Fix the incorrect DMA direction during the wmi
    management tx buffer cleanup.
    
    Tested HW: WCN3990
    Tested FW: WLAN.HL.3.1-00784-QCAHLSWMTPLZ-1
    
    Fixes: dc405152bb6 ("ath10k: handle mgmt tx completion event")
    Signed-off-by: Rakesh Pillai <pillair@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5e7ba4ec90f2aaa7ea87a13d47eb60e4702e46d
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Dec 4 20:46:12 2019 +0800

    ext4, jbd2: ensure panic when aborting with zero errno
    
    [ Upstream commit 51f57b01e4a3c7d7bdceffd84de35144e8c538e7 ]
    
    JBD2_REC_ERR flag used to indicate the errno has been updated when jbd2
    aborted, and then __ext4_abort() and ext4_handle_error() can invoke
    panic if ERRORS_PANIC is specified. But if the journal has been aborted
    with zero errno, jbd2_journal_abort() didn't set this flag so we can
    no longer panic. Fix this by always record the proper errno in the
    journal superblock.
    
    Fixes: 4327ba52afd03 ("ext4, jbd2: ensure entering into panic after recording an error in superblock")
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20191204124614.45424-3-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0deae0a26f6d2514e41080e5b8d833fce1eb258
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Jan 10 13:39:26 2020 +0100

    ARM: 8952/1: Disable kmemleak on XIP kernels
    
    [ Upstream commit bc420c6ceefbb86cbbc8c00061bd779c17fa6997 ]
    
    Kmemleak relies on specific symbols to register the read only data
    during init (e.g. __start_ro_after_init).
    Trying to build an XIP kernel on arm results in the linking error
    reported below because when this option is selected read only data
    after init are not allowed since .data is read only (.rodata).
    
      arm-linux-gnueabihf-ld: mm/kmemleak.o: in function `kmemleak_init':
      kmemleak.c:(.init.text+0x148): undefined reference to `__end_ro_after_init'
      arm-linux-gnueabihf-ld: kmemleak.c:(.init.text+0x14c):
         undefined reference to `__end_ro_after_init'
      arm-linux-gnueabihf-ld: kmemleak.c:(.init.text+0x150):
         undefined reference to `__start_ro_after_init'
      arm-linux-gnueabihf-ld: kmemleak.c:(.init.text+0x156):
         undefined reference to `__start_ro_after_init'
      arm-linux-gnueabihf-ld: kmemleak.c:(.init.text+0x162):
         undefined reference to `__start_ro_after_init'
      arm-linux-gnueabihf-ld: kmemleak.c:(.init.text+0x16a):
         undefined reference to `__start_ro_after_init'
      linux/Makefile:1078: recipe for target 'vmlinux' failed
    
    Fix the issue enabling kmemleak only on non XIP kernels.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56d3793229244cd3e0de200c8b605cb5393eaf0d
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Jan 24 17:47:49 2020 -0500

    tracing: Fix very unlikely race of registering two stat tracers
    
    [ Upstream commit dfb6cd1e654315168e36d947471bd2a0ccd834ae ]
    
    Looking through old emails in my INBOX, I came across a patch from Luis
    Henriques that attempted to fix a race of two stat tracers registering the
    same stat trace (extremely unlikely, as this is done in the kernel, and
    probably doesn't even exist). The submitted patch wasn't quite right as it
    needed to deal with clean up a bit better (if two stat tracers were the
    same, it would have the same files).
    
    But to make the code cleaner, all we needed to do is to keep the
    all_stat_sessions_mutex held for most of the registering function.
    
    Link: http://lkml.kernel.org/r/1410299375-20068-1-git-send-email-luis.henriques@canonical.com
    
    Fixes: 002bb86d8d42f ("tracing/ftrace: separate events tracing and stats tracing engine")
    Reported-by: Luis Henriques <luis.henriques@canonical.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb0085070a92cef5f389bdf1592baffa3723cc3f
Author: Luis Henriques <luis.henriques@canonical.com>
Date:   Tue Sep 9 22:49:41 2014 +0100

    tracing: Fix tracing_stat return values in error handling paths
    
    [ Upstream commit afccc00f75bbbee4e4ae833a96c2d29a7259c693 ]
    
    tracing_stat_init() was always returning '0', even on the error paths.  It
    now returns -ENODEV if tracing_init_dentry() fails or -ENOMEM if it fails
    to created the 'trace_stat' debugfs directory.
    
    Link: http://lkml.kernel.org/r/1410299381-20108-1-git-send-email-luis.henriques@canonical.com
    
    Fixes: ed6f1c996bfe4 ("tracing: Check return value of tracing_init_dentry()")
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>
    [ Pulled from the archeological digging of my INBOX ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c401178d62c3ef67ba951406f682a3700d2cb41
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Fri Jan 10 18:02:05 2020 +1100

    powerpc/iov: Move VF pdev fixup into pcibios_fixup_iov()
    
    [ Upstream commit 965c94f309be58fbcc6c8d3e4f123376c5970d79 ]
    
    An ioda_pe for each VF is allocated in pnv_pci_sriov_enable() before
    the pci_dev for the VF is created. We need to set the pe->pdev pointer
    at some point after the pci_dev is created. Currently we do that in:
    
    pcibios_bus_add_device()
            pnv_pci_dma_dev_setup() (via phb->ops.dma_dev_setup)
                    /* fixup is done here */
                    pnv_pci_ioda_dma_dev_setup() (via pnv_phb->dma_dev_setup)
    
    The fixup needs to be done before setting up DMA for for the VF's PE,
    but there's no real reason to delay it until this point. Move the
    fixup into pnv_pci_ioda_fixup_iov() so the ordering is:
    
            pcibios_add_device()
                    pnv_pci_ioda_fixup_iov() (via ppc_md.pcibios_fixup_sriov)
    
            pcibios_bus_add_device()
                    ...
    
    This isn't strictly required, but it's a slightly more logical place
    to do the fixup and it simplifies pnv_pci_dma_dev_setup().
    
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200110070207.439-4-oohall@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 034a6635cdbf1b904e520f34a16c6590b1c5cb04
Author: Niklas Schnelle <schnelle@linux.ibm.com>
Date:   Thu Dec 19 09:16:59 2019 +0100

    s390/pci: Fix possible deadlock in recover_store()
    
    [ Upstream commit 576c75e36c689bec6a940e807bae27291ab0c0de ]
    
    With zpci_disable() working, lockdep detected a potential deadlock
    (lockdep output at the end).
    
    The deadlock is between recovering a PCI function via the
    
    /sys/bus/pci/devices/<dev>/recover
    
    attribute vs powering it off via
    
    /sys/bus/pci/slots/<slot>/power.
    
    The fix is analogous to the changes in commit 0ee223b2e1f6 ("scsi: core:
    Avoid that SCSI device removal through sysfs triggers a deadlock")
    that fixed a potential deadlock on removing a SCSI device via sysfs.
    
    [  204.830107] ======================================================
    [  204.830109] WARNING: possible circular locking dependency detected
    [  204.830111] 5.5.0-rc2-06072-gbc03ecc9a672 #6 Tainted: G        W
    [  204.830112] ------------------------------------------------------
    [  204.830113] bash/1034 is trying to acquire lock:
    [  204.830115] 0000000192a1a610 (kn->count#200){++++}, at: kernfs_remove_by_name_ns+0x5c/0xa8
    [  204.830122]
                   but task is already holding lock:
    [  204.830123] 00000000c16134a8 (pci_rescan_remove_lock){+.+.}, at: pci_stop_and_remove_bus_device_locked+0x26/0x48
    [  204.830128]
                   which lock already depends on the new lock.
    
    [  204.830129]
                   the existing dependency chain (in reverse order) is:
    [  204.830130]
                   -> #1 (pci_rescan_remove_lock){+.+.}:
    [  204.830134]        validate_chain+0x93a/0xd08
    [  204.830136]        __lock_acquire+0x4ae/0x9d0
    [  204.830137]        lock_acquire+0x114/0x280
    [  204.830140]        __mutex_lock+0xa2/0x960
    [  204.830142]        mutex_lock_nested+0x32/0x40
    [  204.830145]        recover_store+0x4c/0xa8
    [  204.830147]        kernfs_fop_write+0xe6/0x218
    [  204.830151]        vfs_write+0xb0/0x1b8
    [  204.830152]        ksys_write+0x6c/0xf8
    [  204.830154]        system_call+0xd8/0x2d8
    [  204.830155]
                   -> #0 (kn->count#200){++++}:
    [  204.830187]        check_noncircular+0x1e6/0x240
    [  204.830189]        check_prev_add+0xfc/0xdb0
    [  204.830190]        validate_chain+0x93a/0xd08
    [  204.830192]        __lock_acquire+0x4ae/0x9d0
    [  204.830193]        lock_acquire+0x114/0x280
    [  204.830194]        __kernfs_remove.part.0+0x2e4/0x360
    [  204.830196]        kernfs_remove_by_name_ns+0x5c/0xa8
    [  204.830198]        remove_files.isra.0+0x4c/0x98
    [  204.830199]        sysfs_remove_group+0x66/0xc8
    [  204.830201]        sysfs_remove_groups+0x46/0x68
    [  204.830204]        device_remove_attrs+0x52/0x90
    [  204.830207]        device_del+0x182/0x418
    [  204.830208]        pci_remove_bus_device+0x8a/0x130
    [  204.830210]        pci_stop_and_remove_bus_device_locked+0x3a/0x48
    [  204.830212]        disable_slot+0x68/0x100
    [  204.830213]        power_write_file+0x7c/0x130
    [  204.830215]        kernfs_fop_write+0xe6/0x218
    [  204.830217]        vfs_write+0xb0/0x1b8
    [  204.830218]        ksys_write+0x6c/0xf8
    [  204.830220]        system_call+0xd8/0x2d8
    [  204.830221]
                   other info that might help us debug this:
    
    [  204.830223]  Possible unsafe locking scenario:
    
    [  204.830224]        CPU0                    CPU1
    [  204.830225]        ----                    ----
    [  204.830226]   lock(pci_rescan_remove_lock);
    [  204.830227]                                lock(kn->count#200);
    [  204.830229]                                lock(pci_rescan_remove_lock);
    [  204.830231]   lock(kn->count#200);
    [  204.830233]
                    *** DEADLOCK ***
    
    [  204.830234] 4 locks held by bash/1034:
    [  204.830235]  #0: 00000001b6fbc498 (sb_writers#4){.+.+}, at: vfs_write+0x158/0x1b8
    [  204.830239]  #1: 000000018c9f5090 (&of->mutex){+.+.}, at: kernfs_fop_write+0xaa/0x218
    [  204.830242]  #2: 00000001f7da0810 (kn->count#235){.+.+}, at: kernfs_fop_write+0xb6/0x218
    [  204.830245]  #3: 00000000c16134a8 (pci_rescan_remove_lock){+.+.}, at: pci_stop_and_remove_bus_device_locked+0x26/0x48
    [  204.830248]
                   stack backtrace:
    [  204.830250] CPU: 2 PID: 1034 Comm: bash Tainted: G        W         5.5.0-rc2-06072-gbc03ecc9a672 #6
    [  204.830252] Hardware name: IBM 8561 T01 703 (LPAR)
    [  204.830253] Call Trace:
    [  204.830257]  [<00000000c05e10c0>] show_stack+0x88/0xf0
    [  204.830260]  [<00000000c112dca4>] dump_stack+0xa4/0xe0
    [  204.830261]  [<00000000c0694c06>] check_noncircular+0x1e6/0x240
    [  204.830263]  [<00000000c0695bec>] check_prev_add+0xfc/0xdb0
    [  204.830264]  [<00000000c06971da>] validate_chain+0x93a/0xd08
    [  204.830266]  [<00000000c06994c6>] __lock_acquire+0x4ae/0x9d0
    [  204.830267]  [<00000000c069867c>] lock_acquire+0x114/0x280
    [  204.830269]  [<00000000c09ca15c>] __kernfs_remove.part.0+0x2e4/0x360
    [  204.830270]  [<00000000c09cb5c4>] kernfs_remove_by_name_ns+0x5c/0xa8
    [  204.830272]  [<00000000c09cee14>] remove_files.isra.0+0x4c/0x98
    [  204.830274]  [<00000000c09cf2ae>] sysfs_remove_group+0x66/0xc8
    [  204.830276]  [<00000000c09cf356>] sysfs_remove_groups+0x46/0x68
    [  204.830278]  [<00000000c0e3dfe2>] device_remove_attrs+0x52/0x90
    [  204.830280]  [<00000000c0e40382>] device_del+0x182/0x418
    [  204.830281]  [<00000000c0dcfd7a>] pci_remove_bus_device+0x8a/0x130
    [  204.830283]  [<00000000c0dcfe92>] pci_stop_and_remove_bus_device_locked+0x3a/0x48
    [  204.830285]  [<00000000c0de7190>] disable_slot+0x68/0x100
    [  204.830286]  [<00000000c0de6514>] power_write_file+0x7c/0x130
    [  204.830288]  [<00000000c09cc846>] kernfs_fop_write+0xe6/0x218
    [  204.830290]  [<00000000c08f3480>] vfs_write+0xb0/0x1b8
    [  204.830291]  [<00000000c08f378c>] ksys_write+0x6c/0xf8
    [  204.830293]  [<00000000c1154374>] system_call+0xd8/0x2d8
    [  204.830294] INFO: lockdep is turned off.
    
    Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be9cc6c5d444fa25f1fdc6c0fb8ee93682b0c315
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 11 10:03:55 2019 +0100

    pwm: omap-dmtimer: Simplify error handling
    
    [ Upstream commit c4cf7aa57eb83b108d2d9c6c37c143388fee2a4d ]
    
    Instead of doing error handling in the middle of ->probe(), move error
    handling and freeing the reference to timer to the end.
    
    This fixes a resource leak as dm_timer wasn't freed when allocating
    *omap failed.
    
    Implementation note: The put: label was never reached without a goto and
    ret being unequal to 0, so the removed return statement is fine.
    
    Fixes: 6604c6556db9 ("pwm: Add PWM driver for OMAP using dual-mode timers")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ef2661de7a5ef0dd3a70a89b796d2d13fdfbc3e
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Tue Jan 7 18:04:10 2020 -0500

    x86/sysfb: Fix check for bad VRAM size
    
    [ Upstream commit dacc9092336be20b01642afe1a51720b31f60369 ]
    
    When checking whether the reported lfb_size makes sense, the height
    * stride result is page-aligned before seeing whether it exceeds the
    reported size.
    
    This doesn't work if height * stride is not an exact number of pages.
    For example, as reported in the kernel bugzilla below, an 800x600x32 EFI
    framebuffer gets skipped because of this.
    
    Move the PAGE_ALIGN to after the check vs size.
    
    Reported-by: Christopher Head <chead@chead.ca>
    Tested-by: Christopher Head <chead@chead.ca>
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206051
    Link: https://lkml.kernel.org/r/20200107230410.2291947-1-nivedita@alum.mit.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d8a471188d10ff24442b17358815fa01e470ea5
Author: Kai Li <li.kai4@h3c.com>
Date:   Sat Jan 11 10:25:42 2020 +0800

    jbd2: clear JBD2_ABORT flag before journal_reset to update log tail info when load journal
    
    [ Upstream commit a09decff5c32060639a685581c380f51b14e1fc2 ]
    
    If the journal is dirty when the filesystem is mounted, jbd2 will replay
    the journal but the journal superblock will not be updated by
    journal_reset() because JBD2_ABORT flag is still set (it was set in
    journal_init_common()). This is problematic because when a new transaction
    is then committed, it will be recorded in block 1 (journal->j_tail was set
    to 1 in journal_reset()). If unclean shutdown happens again before the
    journal superblock is updated, the new recorded transaction will not be
    replayed during the next mount (because of stale sb->s_start and
    sb->s_sequence values) which can lead to filesystem corruption.
    
    Fixes: 85e0c4e89c1b ("jbd2: if the journal is aborted then don't allow update of the log tail")
    Signed-off-by: Kai Li <li.kai4@h3c.com>
    Link: https://lore.kernel.org/r/20200111022542.5008-1-li.kai4@h3c.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ee2c886d66018ec3eba0bfd24ff071b652190e6
Author: Siddhesh Poyarekar <siddhesh@gotplt.org>
Date:   Mon Jan 13 22:11:58 2020 +0530

    kselftest: Minimise dependency of get_size on C library interfaces
    
    [ Upstream commit 6b64a650f0b2ae3940698f401732988699eecf7a ]
    
    It was observed[1] on arm64 that __builtin_strlen led to an infinite
    loop in the get_size selftest.  This is because __builtin_strlen (and
    other builtins) may sometimes result in a call to the C library
    function.  The C library implementation of strlen uses an IFUNC
    resolver to load the most efficient strlen implementation for the
    underlying machine and hence has a PLT indirection even for static
    binaries.  Because this binary avoids the C library startup routines,
    the PLT initialization never happens and hence the program gets stuck
    in an infinite loop.
    
    On x86_64 the __builtin_strlen just happens to expand inline and avoid
    the call but that is not always guaranteed.
    
    Further, while testing on x86_64 (Fedora 31), it was observed that the
    test also failed with a segfault inside write() because the generated
    code for the write function in glibc seems to access TLS before the
    syscall (probably due to the cancellation point check) and fails
    because TLS is not initialised.
    
    To mitigate these problems, this patch reduces the interface with the
    C library to just the syscall function.  The syscall function still
    sets errno on failure, which is undesirable but for now it only
    affects cases where syscalls fail.
    
    [1] https://bugs.linaro.org/show_bug.cgi?id=5479
    
    Signed-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>
    Reported-by: Masami Hiramatsu <masami.hiramatsu@linaro.org>
    Tested-by: Masami Hiramatsu <masami.hiramatsu@linaro.org>
    Reviewed-by: Tim Bird <tim.bird@sony.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be1777babb9447c307d1ac9f1401e0bf1ec3d405
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Dec 19 21:32:46 2019 +0000

    clocksource/drivers/bcm2835_timer: Fix memory leak of timer
    
    [ Upstream commit 2052d032c06761330bca4944bb7858b00960e868 ]
    
    Currently when setup_irq fails the error exit path will leak the
    recently allocated timer structure.  Originally the code would
    throw a panic but a later commit changed the behaviour to return
    via the err_iounmap path and hence we now have a memory leak. Fix
    this by adding a err_timer_free error path that kfree's timer.
    
    Addresses-Coverity: ("Resource Leak")
    Fixes: 524a7f08983d ("clocksource/drivers/bcm2835_timer: Convert init function to return error")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191219213246.34437-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39a80bbf577864ff28bb42b0dbc5086b4206c587
Author: John Keeping <john@metanate.com>
Date:   Thu Dec 19 11:34:31 2019 +0000

    usb: dwc2: Fix IN FIFO allocation
    
    [ Upstream commit 644139f8b64d818f6345351455f14471510879a5 ]
    
    On chips with fewer FIFOs than endpoints (for example RK3288 which has 9
    endpoints, but only 6 which are cabable of input), the DPTXFSIZN
    registers above the FIFO count may return invalid values.
    
    With logging added on startup, I see:
    
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=1 sz=256
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=2 sz=128
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=3 sz=128
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=4 sz=64
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=5 sz=64
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=6 sz=32
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=7 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=8 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=9 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=10 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=11 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=12 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=13 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=14 sz=0
            dwc2 ff580000.usb: dwc2_hsotg_init_fifo: ep=15 sz=0
    
    but:
    
            # cat /sys/kernel/debug/ff580000.usb/fifo
            Non-periodic FIFOs:
            RXFIFO: Size 275
            NPTXFIFO: Size 16, Start 0x00000113
    
            Periodic TXFIFOs:
                    DPTXFIFO 1: Size 256, Start 0x00000123
                    DPTXFIFO 2: Size 128, Start 0x00000223
                    DPTXFIFO 3: Size 128, Start 0x000002a3
                    DPTXFIFO 4: Size 64, Start 0x00000323
                    DPTXFIFO 5: Size 64, Start 0x00000363
                    DPTXFIFO 6: Size 32, Start 0x000003a3
                    DPTXFIFO 7: Size 0, Start 0x000003e3
                    DPTXFIFO 8: Size 0, Start 0x000003a3
                    DPTXFIFO 9: Size 256, Start 0x00000123
    
    so it seems that FIFO 9 is mirroring FIFO 1.
    
    Fix the allocation by using the FIFO count instead of the endpoint count
    when selecting a FIFO for an endpoint.
    
    Acked-by: Minas Harutyunyan <hminas@synopsys.com>
    Signed-off-by: John Keeping <john@metanate.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c0538252a19b9f4699a30a45cb265c316507e02
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Wed Dec 18 11:43:49 2019 +0800

    usb: gadget: udc: fix possible sleep-in-atomic-context bugs in gr_probe()
    
    [ Upstream commit 9c1ed62ae0690dfe5d5e31d8f70e70a95cb48e52 ]
    
    The driver may sleep while holding a spinlock.
    The function call path (from bottom to top) in Linux 4.19 is:
    
    drivers/usb/gadget/udc/core.c, 1175:
            kzalloc(GFP_KERNEL) in usb_add_gadget_udc_release
    drivers/usb/gadget/udc/core.c, 1272:
            usb_add_gadget_udc_release in usb_add_gadget_udc
    drivers/usb/gadget/udc/gr_udc.c, 2186:
            usb_add_gadget_udc in gr_probe
    drivers/usb/gadget/udc/gr_udc.c, 2183:
            spin_lock in gr_probe
    
    drivers/usb/gadget/udc/core.c, 1195:
            mutex_lock in usb_add_gadget_udc_release
    drivers/usb/gadget/udc/core.c, 1272:
            usb_add_gadget_udc_release in usb_add_gadget_udc
    drivers/usb/gadget/udc/gr_udc.c, 2186:
            usb_add_gadget_udc in gr_probe
    drivers/usb/gadget/udc/gr_udc.c, 2183:
            spin_lock in gr_probe
    
    drivers/usb/gadget/udc/gr_udc.c, 212:
            debugfs_create_file in gr_probe
    drivers/usb/gadget/udc/gr_udc.c, 2197:
            gr_dfs_create in gr_probe
    drivers/usb/gadget/udc/gr_udc.c, 2183:
        spin_lock in gr_probe
    
    drivers/usb/gadget/udc/gr_udc.c, 2114:
            devm_request_threaded_irq in gr_request_irq
    drivers/usb/gadget/udc/gr_udc.c, 2202:
            gr_request_irq in gr_probe
    drivers/usb/gadget/udc/gr_udc.c, 2183:
        spin_lock in gr_probe
    
    kzalloc(GFP_KERNEL), mutex_lock(), debugfs_create_file() and
    devm_request_threaded_irq() can sleep at runtime.
    
    To fix these possible bugs, usb_add_gadget_udc(), gr_dfs_create() and
    gr_request_irq() are called without handling the spinlock.
    
    These bugs are found by a static analysis tool STCheck written by myself.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea6b7b1d58790ffb36bace723f6e62a1c8595c77
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Wed Dec 18 17:44:05 2019 +0800

    uio: fix a sleep-in-atomic-context bug in uio_dmem_genirq_irqcontrol()
    
    [ Upstream commit b74351287d4bd90636c3f48bc188c2f53824c2d4 ]
    
    The driver may sleep while holding a spinlock.
    The function call path (from bottom to top) in Linux 4.19 is:
    
    kernel/irq/manage.c, 523:
            synchronize_irq in disable_irq
    drivers/uio/uio_dmem_genirq.c, 140:
            disable_irq in uio_dmem_genirq_irqcontrol
    drivers/uio/uio_dmem_genirq.c, 134:
            _raw_spin_lock_irqsave in uio_dmem_genirq_irqcontrol
    
    synchronize_irq() can sleep at runtime.
    
    To fix this bug, disable_irq() is called without holding the spinlock.
    
    This bug is found by a static analysis tool STCheck written by myself.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Link: https://lore.kernel.org/r/20191218094405.6009-1-baijiaju1990@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73a1803c7e35bd8316fea1d2cf94cb415cb71463
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Jan 12 00:07:42 2020 -0800

    sparc: Add .exit.data section.
    
    [ Upstream commit 548f0b9a5f4cffa0cecf62eb12aa8db682e4eee6 ]
    
    This fixes build errors of all sorts.
    
    Also, emit .exit.text unconditionally.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ebbbc9bf1f8689e1cb12554cff9b9e49d1a0c43
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Fri Jan 10 09:30:42 2020 +0800

    MIPS: Loongson: Fix potential NULL dereference in loongson3_platform_init()
    
    [ Upstream commit 72d052e28d1d2363f9107be63ef3a3afdea6143c ]
    
    If kzalloc fails, it should return -ENOMEM, otherwise may trigger a NULL
    pointer dereference.
    
    Fixes: 3adeb2566b9b ("MIPS: Loongson: Improve LEFI firmware interface")
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Huacai Chen <chenhc@lemote.com>
    Cc: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf8938b1dd94cb36eb7ab320807a60bc01718042
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Fri Jan 3 12:39:37 2020 +0100

    efi/x86: Map the entire EFI vendor string before copying it
    
    [ Upstream commit ffc2760bcf2dba0dbef74013ed73eea8310cc52c ]
    
    Fix a couple of issues with the way we map and copy the vendor string:
    - we map only 2 bytes, which usually works since you get at least a
      page, but if the vendor string happens to cross a page boundary,
      a crash will result
    - only call early_memunmap() if early_memremap() succeeded, or we will
      call it with a NULL address which it doesn't like,
    - while at it, switch to early_memremap_ro(), and array indexing rather
      than pointer dereferencing to read the CHAR16 characters.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Arvind Sankar <nivedita@alum.mit.edu>
    Cc: Matthew Garrett <mjg59@google.com>
    Cc: linux-efi@vger.kernel.org
    Fixes: 5b83683f32b1 ("x86: EFI runtime service support")
    Link: https://lkml.kernel.org/r/20200103113953.9571-5-ardb@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a8a859fdb75624c39d56115dcd0f32ca789f22c
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Dec 28 00:04:47 2019 +0100

    pinctrl: baytrail: Do not clear IRQ flags on direct-irq enabled pins
    
    [ Upstream commit a23680594da7a9e2696dbcf4f023e9273e2fa40b ]
    
    Suspending Goodix touchscreens requires changing the interrupt pin to
    output before sending them a power-down command. Followed by wiggling
    the interrupt pin to wake the device up, after which it is put back
    in input mode.
    
    On Bay Trail devices with a Goodix touchscreen direct-irq mode is used
    in combination with listing the pin as a normal GpioIo resource.
    
    This works fine, until the goodix driver gets rmmod-ed and then insmod-ed
    again. In this case byt_gpio_disable_free() calls
    byt_gpio_clear_triggering() which clears the IRQ flags and after that the
    (direct) IRQ no longer triggers.
    
    This commit fixes this by adding a check for the BYT_DIRECT_IRQ_EN flag
    to byt_gpio_clear_triggering().
    
    Note that byt_gpio_clear_triggering() only gets called from
    byt_gpio_disable_free() for direct-irq enabled pins, as these are excluded
    from the irq_valid mask by byt_init_irq_valid_mask().
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47505a7debe76f07c81071c009f2c05bb7f99959
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Thu Dec 19 11:34:01 2019 +0100

    media: sti: bdisp: fix a possible sleep-in-atomic-context bug in bdisp_device_run()
    
    [ Upstream commit bb6d42061a05d71dd73f620582d9e09c8fbf7f5b ]
    
    The driver may sleep while holding a spinlock.
    The function call path (from bottom to top) in Linux 4.19 is:
    
    drivers/media/platform/sti/bdisp/bdisp-hw.c, 385:
        msleep in bdisp_hw_reset
    drivers/media/platform/sti/bdisp/bdisp-v4l2.c, 341:
        bdisp_hw_reset in bdisp_device_run
    drivers/media/platform/sti/bdisp/bdisp-v4l2.c, 317:
        _raw_spin_lock_irqsave in bdisp_device_run
    
    To fix this bug, msleep() is replaced with udelay().
    
    This bug is found by a static analysis tool STCheck written by myself.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15341b1dd409749fa5625e4b632013b6ba81609b
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Wed Nov 13 16:16:25 2019 -0500

    char/random: silence a lockdep splat with printk()
    
    [ Upstream commit 1b710b1b10eff9d46666064ea25f079f70bc67a8 ]
    
    Sergey didn't like the locking order,
    
    uart_port->lock  ->  tty_port->lock
    
    uart_write (uart_port->lock)
      __uart_start
        pl011_start_tx
          pl011_tx_chars
            uart_write_wakeup
              tty_port_tty_wakeup
                tty_port_default
                  tty_port_tty_get (tty_port->lock)
    
    but those code is so old, and I have no clue how to de-couple it after
    checking other locks in the splat. There is an onging effort to make all
    printk() as deferred, so until that happens, workaround it for now as a
    short-term fix.
    
    LTP: starting iogen01 (export LTPROOT; rwtest -N iogen01 -i 120s -s
    read,write -Da -Dv -n 2 500b:$TMPDIR/doio.f1.$$
    1000b:$TMPDIR/doio.f2.$$)
    WARNING: possible circular locking dependency detected
    ------------------------------------------------------
    doio/49441 is trying to acquire lock:
    ffff008b7cff7290 (&(&zone->lock)->rlock){..-.}, at: rmqueue+0x138/0x2050
    
    but task is already holding lock:
    60ff000822352818 (&pool->lock/1){-.-.}, at: start_flush_work+0xd8/0x3f0
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #4 (&pool->lock/1){-.-.}:
           lock_acquire+0x320/0x360
           _raw_spin_lock+0x64/0x80
           __queue_work+0x4b4/0xa10
           queue_work_on+0xac/0x11c
           tty_schedule_flip+0x84/0xbc
           tty_flip_buffer_push+0x1c/0x28
           pty_write+0x98/0xd0
           n_tty_write+0x450/0x60c
           tty_write+0x338/0x474
           __vfs_write+0x88/0x214
           vfs_write+0x12c/0x1a4
           redirected_tty_write+0x90/0xdc
           do_loop_readv_writev+0x140/0x180
           do_iter_write+0xe0/0x10c
           vfs_writev+0x134/0x1cc
           do_writev+0xbc/0x130
           __arm64_sys_writev+0x58/0x8c
           el0_svc_handler+0x170/0x240
           el0_sync_handler+0x150/0x250
           el0_sync+0x164/0x180
    
      -> #3 (&(&port->lock)->rlock){-.-.}:
           lock_acquire+0x320/0x360
           _raw_spin_lock_irqsave+0x7c/0x9c
           tty_port_tty_get+0x24/0x60
           tty_port_default_wakeup+0x1c/0x3c
           tty_port_tty_wakeup+0x34/0x40
           uart_write_wakeup+0x28/0x44
           pl011_tx_chars+0x1b8/0x270
           pl011_start_tx+0x24/0x70
           __uart_start+0x5c/0x68
           uart_write+0x164/0x1c8
           do_output_char+0x33c/0x348
           n_tty_write+0x4bc/0x60c
           tty_write+0x338/0x474
           redirected_tty_write+0xc0/0xdc
           do_loop_readv_writev+0x140/0x180
           do_iter_write+0xe0/0x10c
           vfs_writev+0x134/0x1cc
           do_writev+0xbc/0x130
           __arm64_sys_writev+0x58/0x8c
           el0_svc_handler+0x170/0x240
           el0_sync_handler+0x150/0x250
           el0_sync+0x164/0x180
    
      -> #2 (&port_lock_key){-.-.}:
           lock_acquire+0x320/0x360
           _raw_spin_lock+0x64/0x80
           pl011_console_write+0xec/0x2cc
           console_unlock+0x794/0x96c
           vprintk_emit+0x260/0x31c
           vprintk_default+0x54/0x7c
           vprintk_func+0x218/0x254
           printk+0x7c/0xa4
           register_console+0x734/0x7b0
           uart_add_one_port+0x734/0x834
           pl011_register_port+0x6c/0xac
           sbsa_uart_probe+0x234/0x2ec
           platform_drv_probe+0xd4/0x124
           really_probe+0x250/0x71c
           driver_probe_device+0xb4/0x200
           __device_attach_driver+0xd8/0x188
           bus_for_each_drv+0xbc/0x110
           __device_attach+0x120/0x220
           device_initial_probe+0x20/0x2c
           bus_probe_device+0x54/0x100
           device_add+0xae8/0xc2c
           platform_device_add+0x278/0x3b8
           platform_device_register_full+0x238/0x2ac
           acpi_create_platform_device+0x2dc/0x3a8
           acpi_bus_attach+0x390/0x3cc
           acpi_bus_attach+0x108/0x3cc
           acpi_bus_attach+0x108/0x3cc
           acpi_bus_attach+0x108/0x3cc
           acpi_bus_scan+0x7c/0xb0
           acpi_scan_init+0xe4/0x304
           acpi_init+0x100/0x114
           do_one_initcall+0x348/0x6a0
           do_initcall_level+0x190/0x1fc
           do_basic_setup+0x34/0x4c
           kernel_init_freeable+0x19c/0x260
           kernel_init+0x18/0x338
           ret_from_fork+0x10/0x18
    
      -> #1 (console_owner){-...}:
           lock_acquire+0x320/0x360
           console_lock_spinning_enable+0x6c/0x7c
           console_unlock+0x4f8/0x96c
           vprintk_emit+0x260/0x31c
           vprintk_default+0x54/0x7c
           vprintk_func+0x218/0x254
           printk+0x7c/0xa4
           get_random_u64+0x1c4/0x1dc
           shuffle_pick_tail+0x40/0xac
           __free_one_page+0x424/0x710
           free_one_page+0x70/0x120
           __free_pages_ok+0x61c/0xa94
           __free_pages_core+0x1bc/0x294
           memblock_free_pages+0x38/0x48
           __free_pages_memory+0xcc/0xfc
           __free_memory_core+0x70/0x78
           free_low_memory_core_early+0x148/0x18c
           memblock_free_all+0x18/0x54
           mem_init+0xb4/0x17c
           mm_init+0x14/0x38
           start_kernel+0x19c/0x530
    
      -> #0 (&(&zone->lock)->rlock){..-.}:
           validate_chain+0xf6c/0x2e2c
           __lock_acquire+0x868/0xc2c
           lock_acquire+0x320/0x360
           _raw_spin_lock+0x64/0x80
           rmqueue+0x138/0x2050
           get_page_from_freelist+0x474/0x688
           __alloc_pages_nodemask+0x3b4/0x18dc
           alloc_pages_current+0xd0/0xe0
           alloc_slab_page+0x2b4/0x5e0
           new_slab+0xc8/0x6bc
           ___slab_alloc+0x3b8/0x640
           kmem_cache_alloc+0x4b4/0x588
           __debug_object_init+0x778/0x8b4
           debug_object_init_on_stack+0x40/0x50
           start_flush_work+0x16c/0x3f0
           __flush_work+0xb8/0x124
           flush_work+0x20/0x30
           xlog_cil_force_lsn+0x88/0x204 [xfs]
           xfs_log_force_lsn+0x128/0x1b8 [xfs]
           xfs_file_fsync+0x3c4/0x488 [xfs]
           vfs_fsync_range+0xb0/0xd0
           generic_write_sync+0x80/0xa0 [xfs]
           xfs_file_buffered_aio_write+0x66c/0x6e4 [xfs]
           xfs_file_write_iter+0x1a0/0x218 [xfs]
           __vfs_write+0x1cc/0x214
           vfs_write+0x12c/0x1a4
           ksys_write+0xb0/0x120
           __arm64_sys_write+0x54/0x88
           el0_svc_handler+0x170/0x240
           el0_sync_handler+0x150/0x250
           el0_sync+0x164/0x180
    
           other info that might help us debug this:
    
     Chain exists of:
       &(&zone->lock)->rlock --> &(&port->lock)->rlock --> &pool->lock/1
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&pool->lock/1);
                                   lock(&(&port->lock)->rlock);
                                   lock(&pool->lock/1);
      lock(&(&zone->lock)->rlock);
    
                    *** DEADLOCK ***
    
    4 locks held by doio/49441:
     #0: a0ff00886fc27408 (sb_writers#8){.+.+}, at: vfs_write+0x118/0x1a4
     #1: 8fff00080810dfe0 (&xfs_nondir_ilock_class){++++}, at:
    xfs_ilock+0x2a8/0x300 [xfs]
     #2: ffff9000129f2390 (rcu_read_lock){....}, at:
    rcu_lock_acquire+0x8/0x38
     #3: 60ff000822352818 (&pool->lock/1){-.-.}, at:
    start_flush_work+0xd8/0x3f0
    
                   stack backtrace:
    CPU: 48 PID: 49441 Comm: doio Tainted: G        W
    Hardware name: HPE Apollo 70             /C01_APACHE_MB         , BIOS
    L50_5.13_1.11 06/18/2019
    Call trace:
     dump_backtrace+0x0/0x248
     show_stack+0x20/0x2c
     dump_stack+0xe8/0x150
     print_circular_bug+0x368/0x380
     check_noncircular+0x28c/0x294
     validate_chain+0xf6c/0x2e2c
     __lock_acquire+0x868/0xc2c
     lock_acquire+0x320/0x360
     _raw_spin_lock+0x64/0x80
     rmqueue+0x138/0x2050
     get_page_from_freelist+0x474/0x688
     __alloc_pages_nodemask+0x3b4/0x18dc
     alloc_pages_current+0xd0/0xe0
     alloc_slab_page+0x2b4/0x5e0
     new_slab+0xc8/0x6bc
     ___slab_alloc+0x3b8/0x640
     kmem_cache_alloc+0x4b4/0x588
     __debug_object_init+0x778/0x8b4
     debug_object_init_on_stack+0x40/0x50
     start_flush_work+0x16c/0x3f0
     __flush_work+0xb8/0x124
     flush_work+0x20/0x30
     xlog_cil_force_lsn+0x88/0x204 [xfs]
     xfs_log_force_lsn+0x128/0x1b8 [xfs]
     xfs_file_fsync+0x3c4/0x488 [xfs]
     vfs_fsync_range+0xb0/0xd0
     generic_write_sync+0x80/0xa0 [xfs]
     xfs_file_buffered_aio_write+0x66c/0x6e4 [xfs]
     xfs_file_write_iter+0x1a0/0x218 [xfs]
     __vfs_write+0x1cc/0x214
     vfs_write+0x12c/0x1a4
     ksys_write+0xb0/0x120
     __arm64_sys_write+0x54/0x88
     el0_svc_handler+0x170/0x240
     el0_sync_handler+0x150/0x250
     el0_sync+0x164/0x180
    
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Signed-off-by: Qian Cai <cai@lca.pw>
    Link: https://lore.kernel.org/r/1573679785-21068-1-git-send-email-cai@lca.pw
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4802b257d352e48a0b10886b2d1a12b366a17c48
Author: Jacob Pan <jacob.jun.pan@linux.intel.com>
Date:   Thu Jan 2 08:18:07 2020 +0800

    iommu/vt-d: Fix off-by-one in PASID allocation
    
    [ Upstream commit 39d630e332144028f56abba83d94291978e72df1 ]
    
    PASID allocator uses IDR which is exclusive for the end of the
    allocation range. There is no need to decrement pasid_max.
    
    Fixes: af39507305fb ("iommu/vt-d: Apply global PASID in SVA")
    Reported-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 442b50c0af3575e082832a6228533477bcaa6a16
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Wed Dec 18 21:26:05 2019 +0800

    gpio: gpio-grgpio: fix possible sleep-in-atomic-context bugs in grgpio_irq_map/unmap()
    
    [ Upstream commit e36eaf94be8f7bc4e686246eed3cf92d845e2ef8 ]
    
    The driver may sleep while holding a spinlock.
    The function call path (from bottom to top) in Linux 4.19 is:
    
    drivers/gpio/gpio-grgpio.c, 261:
            request_irq in grgpio_irq_map
    drivers/gpio/gpio-grgpio.c, 255:
            _raw_spin_lock_irqsave in grgpio_irq_map
    
    drivers/gpio/gpio-grgpio.c, 318:
            free_irq in grgpio_irq_unmap
    drivers/gpio/gpio-grgpio.c, 299:
            _raw_spin_lock_irqsave in grgpio_irq_unmap
    
    request_irq() and free_irq() can sleep at runtime.
    
    To fix these bugs, request_irq() and free_irq() are called without
    holding the spinlock.
    
    These bugs are found by a static analysis tool STCheck written by myself.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Link: https://lore.kernel.org/r/20191218132605.10594-1-baijiaju1990@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67f7f0c7e9f4a6c5215e78728261b1d4ab57dcc6
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Mon Oct 28 19:54:22 2019 +1100

    powerpc/powernv/iov: Ensure the pdn for VFs always contains a valid PE number
    
    [ Upstream commit 3b5b9997b331e77ce967eba2c4bc80dc3134a7fe ]
    
    On pseries there is a bug with adding hotplugged devices to an IOMMU
    group. For a number of dumb reasons fixing that bug first requires
    re-working how VFs are configured on PowerNV. For background, on
    PowerNV we use the pcibios_sriov_enable() hook to do two things:
    
      1. Create a pci_dn structure for each of the VFs, and
      2. Configure the PHB's internal BARs so the MMIO range for each VF
         maps to a unique PE.
    
    Roughly speaking a PE is the hardware counterpart to a Linux IOMMU
    group since all the devices in a PE share the same IOMMU table. A PE
    also defines the set of devices that should be isolated in response to
    a PCI error (i.e. bad DMA, UR/CA, AER events, etc). When isolated all
    MMIO and DMA traffic to and from devicein the PE is blocked by the
    root complex until the PE is recovered by the OS.
    
    The requirement to block MMIO causes a giant headache because the P8
    PHB generally uses a fixed mapping between MMIO addresses and PEs. As
    a result we need to delay configuring the IOMMU groups for device
    until after MMIO resources are assigned. For physical devices (i.e.
    non-VFs) the PE assignment is done in pcibios_setup_bridge() which is
    called immediately after the MMIO resources for downstream
    devices (and the bridge's windows) are assigned. For VFs the setup is
    more complicated because:
    
      a) pcibios_setup_bridge() is not called again when VFs are activated, and
      b) The pci_dev for VFs are created by generic code which runs after
         pcibios_sriov_enable() is called.
    
    The work around for this is a two step process:
    
      1. A fixup in pcibios_add_device() is used to initialised the cached
         pe_number in pci_dn, then
      2. A bus notifier then adds the device to the IOMMU group for the PE
         specified in pci_dn->pe_number.
    
    A side effect fixing the pseries bug mentioned in the first paragraph
    is moving the fixup out of pcibios_add_device() and into
    pcibios_bus_add_device(), which is called much later. This results in
    step 2. failing because pci_dn->pe_number won't be initialised when
    the bus notifier is run.
    
    We can fix this by removing the need for the fixup. The PE for a VF is
    known before the VF is even scanned so we can initialise
    pci_dn->pe_number pcibios_sriov_enable() instead. Unfortunately,
    moving the initialisation causes two problems:
    
      1. We trip the WARN_ON() in the current fixup code, and
      2. The EEH core clears pdn->pe_number when recovering a VF and
         relies on the fixup to correctly re-set it.
    
    The only justification for either of these is a comment in
    eeh_rmv_device() suggesting that pdn->pe_number *must* be set to
    IODA_INVALID_PE in order for the VF to be scanned. However, this
    comment appears to have no basis in reality. Both bugs can be fixed by
    just deleting the code.
    
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191028085424.12006-1-oohall@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03ac6ed43fa282fab72e2b26818f5563eb58a13a
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Thu Nov 21 08:55:24 2019 +0100

    media: i2c: mt9v032: fix enum mbus codes and frame sizes
    
    [ Upstream commit 1451d5ae351d938a0ab1677498c893f17b9ee21d ]
    
    This driver supports both the mt9v032 (color) and the mt9v022 (mono)
    sensors. Depending on which sensor is used, the format from the sensor is
    different. The format.code inside the dev struct holds this information.
    The enum mbus and enum frame sizes need to take into account both type of
    sensors, not just the color one. To solve this, use the format.code in
    these functions instead of the hardcoded bayer color format (which is only
    used for mt9v032).
    
    [Sakari Ailus: rewrapped commit message]
    
    Suggested-by: Wenyou Yang <wenyou.yang@microchip.com>
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cc5aa5ce61a3c137b14c01fc9c342ba5371a38b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Aug 31 12:00:24 2019 +0200

    pxa168fb: Fix the function used to release some memory in an error handling path
    
    [ Upstream commit 3c911fe799d1c338d94b78e7182ad452c37af897 ]
    
    In the probe function, some resources are allocated using 'dma_alloc_wc()',
    they should be released with 'dma_free_wc()', not 'dma_free_coherent()'.
    
    We already use 'dma_free_wc()' in the remove function, but not in the
    error handling path of the probe function.
    
    Also, remove a useless 'PAGE_ALIGN()'. 'info->fix.smem_len' is already
    PAGE_ALIGNed.
    
    Fixes: 638772c7553f ("fb: add support of LCD display controller on pxa168/910 (base layer)")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Lubomir Rintel <lkundrak@v3.sk>
    CC: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190831100024.3248-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5c8d49b9be04080f5aab67ea36ac65a30758442
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Dec 18 20:48:09 2019 +0100

    pinctrl: sh-pfc: sh7264: Fix CAN function GPIOs
    
    [ Upstream commit 55b1cb1f03ad5eea39897d0c74035e02deddcff2 ]
    
    pinmux_func_gpios[] contains a hole due to the missing function GPIO
    definition for the "CTX0&CTX1" signal, which is the logical "AND" of the
    two CAN outputs.
    
    Fix this by:
      - Renaming CRX0_CRX1_MARK to CTX0_CTX1_MARK, as PJ2MD[2:0]=010
        configures the combined "CTX0&CTX1" output signal,
      - Renaming CRX0X1_MARK to CRX0_CRX1_MARK, as PJ3MD[1:0]=10 configures
        the shared "CRX0/CRX1" input signal, which is fed to both CAN
        inputs,
      - Adding the missing function GPIO definition for "CTX0&CTX1" to
        pinmux_func_gpios[],
      - Moving all CAN enums next to each other.
    
    See SH7262 Group, SH7264 Group User's Manual: Hardware, Rev. 4.00:
      [1] Figure 1.2 (3) (Pin Assignment for the SH7264 Group (1-Mbyte
          Version),
      [2] Figure 1.2 (4) Pin Assignment for the SH7264 Group (640-Kbyte
          Version,
      [3] Table 1.4 List of Pins,
      [4] Figure 20.29 Connection Example when Using This Module as 1-Channel
          Module (64 Mailboxes x 1 Channel),
      [5] Table 32.10 Multiplexed Pins (Port J),
      [6] Section 32.2.30 (3) Port J Control Register 0 (PJCR0).
    
    Note that the last 2 disagree about PJ2MD[2:0], which is probably the
    root cause of this bug.  But considering [4], "CTx0&CTx1" in [5] must
    be correct, and "CRx0&CRx1" in [6] must be wrong.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20191218194812.12741-4-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 195e54e6864049fc0583b5edfcdd93ed905c6b52
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Sat Dec 28 15:30:45 2019 +0200

    gianfar: Fix TX timestamping with a stacked DSA driver
    
    [ Upstream commit c26a2c2ddc0115eb088873f5c309cf46b982f522 ]
    
    The driver wrongly assumes that it is the only entity that can set the
    SKBTX_IN_PROGRESS bit of the current skb. Therefore, in the
    gfar_clean_tx_ring function, where the TX timestamp is collected if
    necessary, the aforementioned bit is used to discriminate whether or not
    the TX timestamp should be delivered to the socket's error queue.
    
    But a stacked driver such as a DSA switch can also set the
    SKBTX_IN_PROGRESS bit, which is actually exactly what it should do in
    order to denote that the hardware timestamping process is undergoing.
    
    Therefore, gianfar would misinterpret the "in progress" bit as being its
    own, and deliver a second skb clone in the socket's error queue,
    completely throwing off a PTP process which is not expecting to receive
    it, _even though_ TX timestamping is not enabled for gianfar.
    
    There have been discussions [0] as to whether non-MAC drivers need or
    not to set SKBTX_IN_PROGRESS at all (whose purpose is to avoid sending 2
    timestamps, a sw and a hw one, to applications which only expect one).
    But as of this patch, there are at least 2 PTP drivers that would break
    in conjunction with gianfar: the sja1105 DSA switch and the felix
    switch, by way of its ocelot core driver.
    
    So regardless of that conclusion, fix the gianfar driver to not do stuff
    based on flags set by others and not intended for it.
    
    [0]: https://www.spinics.net/lists/netdev/msg619699.html
    
    Fixes: f0ee7acfcdd4 ("gianfar: Add hardware TX timestamping support")
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dbae70b0e43f6bdac741b52c5b3005f4cf7daaf
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon Dec 23 18:33:47 2019 +0900

    ALSA: ctl: allow TLV read operation for callback type of element in locked case
    
    [ Upstream commit d61fe22c2ae42d9fd76c34ef4224064cca4b04b0 ]
    
    A design of ALSA control core allows applications to execute three
    operations for TLV feature; read, write and command. Furthermore, it
    allows driver developers to process the operations by two ways; allocated
    array or callback function. In the former, read operation is just allowed,
    thus developers uses the latter when device driver supports variety of
    models or the target model is expected to dynamically change information
    stored in TLV container.
    
    The core also allows applications to lock any element so that the other
    applications can't perform write operation to the element for element
    value and TLV information. When the element is locked, write and command
    operation for TLV information are prohibited as well as element value.
    Any read operation should be allowed in the case.
    
    At present, when an element has callback function for TLV information,
    TLV read operation returns EPERM if the element is locked. On the
    other hand, the read operation is success when an element has allocated
    array for TLV information. In both cases, read operation is success for
    element value expectedly.
    
    This commit fixes the bug. This change can be backported to v4.14
    kernel or later.
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Link: https://lore.kernel.org/r/20191223093347.15279-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 428bb08aed38d08bd78a0b8a69afa97094b46b53
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Thu Dec 12 11:25:55 2019 +0530

    ext4: fix ext4_dax_read/write inode locking sequence for IOCB_NOWAIT
    
    [ Upstream commit f629afe3369e9885fd6e9cc7a4f514b6a65cf9e9 ]
    
    Apparently our current rwsem code doesn't like doing the trylock, then
    lock for real scheme.  So change our dax read/write methods to just do the
    trylock for the RWF_NOWAIT case.
    This seems to fix AIM7 regression in some scalable filesystems upto ~25%
    in some cases. Claimed in commit 942491c9e6d6 ("xfs: fix AIM7 regression")
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Matthew Bobrowski <mbobrowski@mbobrowski.org>
    Tested-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Link: https://lore.kernel.org/r/20191212055557.11151-2-riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44d748f2abda27c6a7efc5cb3dccd9ed56a61c45
Author: Zahari Petkov <zahari@balena.io>
Date:   Mon Nov 18 23:02:55 2019 +0200

    leds: pca963x: Fix open-drain initialization
    
    [ Upstream commit 697529091ac7a0a90ca349b914bb30641c13c753 ]
    
    Before commit bb29b9cccd95 ("leds: pca963x: Add bindings to invert
    polarity") Mode register 2 was initialized directly with either 0x01
    or 0x05 for open-drain or totem pole (push-pull) configuration.
    
    Afterwards, MODE2 initialization started using bitwise operations on
    top of the default MODE2 register value (0x05). Using bitwise OR for
    setting OUTDRV with 0x01 and 0x05 does not produce correct results.
    When open-drain is used, instead of setting OUTDRV to 0, the driver
    keeps it as 1:
    
    Open-drain: 0x05 | 0x01 -> 0x05 (0b101 - incorrect)
    Totem pole: 0x05 | 0x05 -> 0x05 (0b101 - correct but still wrong)
    
    Now OUTDRV setting uses correct bitwise operations for initialization:
    
    Open-drain: 0x05 & ~0x04 -> 0x01 (0b001 - correct)
    Totem pole: 0x05 | 0x04 -> 0x05 (0b101 - correct)
    
    Additional MODE2 register definitions are introduced now as well.
    
    Fixes: bb29b9cccd95 ("leds: pca963x: Add bindings to invert polarity")
    Signed-off-by: Zahari Petkov <zahari@balena.io>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ead1cee889039126789307fe3f56c47deb31b0f8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Dec 3 12:58:55 2019 +0300

    brcmfmac: Fix use after free in brcmf_sdio_readframes()
    
    [ Upstream commit 216b44000ada87a63891a8214c347e05a4aea8fe ]
    
    The brcmu_pkt_buf_free_skb() function frees "pkt" so it leads to a
    static checker warning:
    
        drivers/net/wireless/broadcom/brcm80211/brcmfmac/sdio.c:1974 brcmf_sdio_readframes()
        error: dereferencing freed memory 'pkt'
    
    It looks like there was supposed to be a continue after we free "pkt".
    
    Fixes: 4754fceeb9a6 ("brcmfmac: streamline SDIO read frame routine")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9dc4d61b5c2d8ea289087f57898426017431391
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Dec 10 09:34:54 2019 +0100

    cpu/hotplug, stop_machine: Fix stop_machine vs hotplug order
    
    [ Upstream commit 45178ac0cea853fe0e405bf11e101bdebea57b15 ]
    
    Paul reported a very sporadic, rcutorture induced, workqueue failure.
    When the planets align, the workqueue rescuer's self-migrate fails and
    then triggers a WARN for running a work on the wrong CPU.
    
    Tejun then figured that set_cpus_allowed_ptr()'s stop_one_cpu() call
    could be ignored! When stopper->enabled is false, stop_machine will
    insta complete the work, without actually doing the work. Worse, it
    will not WARN about this (we really should fix this).
    
    It turns out there is a small window where a freshly online'ed CPU is
    marked 'online' but doesn't yet have the stopper task running:
    
            BP                              AP
    
            bringup_cpu()
              __cpu_up(cpu, idle)    -->    start_secondary()
                                            ...
                                            cpu_startup_entry()
              bringup_wait_for_ap()
                wait_for_ap_thread() <--      cpuhp_online_idle()
                                              while (1)
                                                do_idle()
    
                                            ... available to run kthreads ...
    
                stop_machine_unpark()
                  stopper->enable = true;
    
    Close this by moving the stop_machine_unpark() into
    cpuhp_online_idle(), such that the stopper thread is ready before we
    start the idle loop and schedule.
    
    Reported-by: "Paul E. McKenney" <paulmck@kernel.org>
    Debugged-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: "Paul E. McKenney" <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d358e7e2bcd03505766a1b48c661c241f75d117
Author: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
Date:   Thu Nov 7 16:30:48 2019 +0100

    drm/gma500: Fixup fbdev stolen size usage evaluation
    
    [ Upstream commit fd1a5e521c3c083bb43ea731aae0f8b95f12b9bd ]
    
    psbfb_probe performs an evaluation of the required size from the stolen
    GTT memory, but gets it wrong in two distinct ways:
    - The resulting size must be page-size-aligned;
    - The size to allocate is derived from the surface dimensions, not the fb
      dimensions.
    
    When two connectors are connected with different modes, the smallest will
    be stored in the fb dimensions, but the size that needs to be allocated must
    match the largest (surface) dimensions. This is what is used in the actual
    allocation code.
    
    Fix this by correcting the evaluation to conform to the two points above.
    It allows correctly switching to 16bpp when one connector is e.g. 1920x1080
    and the other is 1024x768.
    
    Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Signed-off-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191107153048.843881-1-paul.kocialkowski@bootlin.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2130de7d5e1ab1d5725b2e2c923fb6238a471131
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Fri Feb 7 09:37:41 2020 -0800

    KVM: nVMX: Use correct root level for nested EPT shadow page tables
    
    [ Upstream commit 148d735eb55d32848c3379e460ce365f2c1cbe4b ]
    
    Hardcode the EPT page-walk level for L2 to be 4 levels, as KVM's MMU
    currently also hardcodes the page walk level for nested EPT to be 4
    levels.  The L2 guest is all but guaranteed to soft hang on its first
    instruction when L1 is using EPT, as KVM will construct 4-level page
    tables and then tell hardware to use 5-level page tables.
    
    Fixes: 855feb673640 ("KVM: MMU: Add 5 level EPT & Shadow page table support.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c270ce33da574a3738cc19376e7e5fdb223d7df
Author: Sasha Levin <sashal@kernel.org>
Date:   Thu Feb 20 06:54:12 2020 -0500

    Revert "KVM: VMX: Add non-canonical check on writes to RTIT address MSRs"
    
    This reverts commit 57211b7366cc2abf784c35e537b256e7fcddc91e.
    
    This patch isn't needed on 4.19 and older.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 249387d71931e6ce1c4e8f6869ec47e4af0fdbf2
Author: Sasha Levin <sashal@kernel.org>
Date:   Thu Feb 20 06:54:06 2020 -0500

    Revert "KVM: nVMX: Use correct root level for nested EPT shadow page tables"
    
    This reverts commit 740d876bd9565857a695ce7c05efda4eba5bc585.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2eb6f22ac0e58dcc40970ccf56d418a5f7ccea4
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Tue Feb 11 19:33:40 2020 +0100

    net/sched: flower: add missing validation of TCA_FLOWER_FLAGS
    
    [ Upstream commit e2debf0852c4d66ba1a8bde12869b196094c70a7 ]
    
    unlike other classifiers that can be offloaded (i.e. users can set flags
    like 'skip_hw' and 'skip_sw'), 'cls_flower' doesn't validate the size of
    netlink attribute 'TCA_FLOWER_FLAGS' provided by user: add a proper entry
    to fl_policy.
    
    Fixes: 5b33f48842fa ("net/flower: Introduce hardware offload support")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6752ae607d145809ab1cc063b6b0fee46fd104bf
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Tue Feb 11 19:33:39 2020 +0100

    net/sched: matchall: add missing validation of TCA_MATCHALL_FLAGS
    
    [ Upstream commit 1afa3cc90f8fb745c777884d79eaa1001d6927a6 ]
    
    unlike other classifiers that can be offloaded (i.e. users can set flags
    like 'skip_hw' and 'skip_sw'), 'cls_matchall' doesn't validate the size
    of netlink attribute 'TCA_MATCHALL_FLAGS' provided by user: add a proper
    entry to mall_policy.
    
    Fixes: b87f7936a932 ("net/sched: Add match-all classifier hw offloading.")
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1e0f10e92bae5dd05d5e970d584d510e5973bb2
Author: Per Forlin <per.forlin@axis.com>
Date:   Thu Feb 13 15:37:09 2020 +0100

    net: dsa: tag_qca: Make sure there is headroom for tag
    
    [ Upstream commit 04fb91243a853dbde216d829c79d9632e52aa8d9 ]
    
    Passing tag size to skb_cow_head will make sure
    there is enough headroom for the tag data.
    This change does not introduce any overhead in case there
    is already available headroom for tag.
    
    Signed-off-by: Per Forlin <perfn@axis.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 421ab4119eb5d9cd1bf4d59069c7e15752c7c417
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Feb 10 11:36:13 2020 -0800

    net/smc: fix leak of kernel memory to user space
    
    [ Upstream commit 457fed775c97ac2c0cd1672aaf2ff2c8a6235e87 ]
    
    As nlmsg_put() does not clear the memory that is reserved,
    it this the caller responsability to make sure all of this
    memory will be written, in order to not reveal prior content.
    
    While we are at it, we can provide the socket cookie even
    if clsock is not set.
    
    syzbot reported :
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in __swab32p include/uapi/linux/swab.h:179 [inline]
    BUG: KMSAN: uninit-value in __be32_to_cpup include/uapi/linux/byteorder/little_endian.h:82 [inline]
    BUG: KMSAN: uninit-value in get_unaligned_be32 include/linux/unaligned/access_ok.h:30 [inline]
    BUG: KMSAN: uninit-value in ____bpf_skb_load_helper_32 net/core/filter.c:240 [inline]
    BUG: KMSAN: uninit-value in ____bpf_skb_load_helper_32_no_cache net/core/filter.c:255 [inline]
    BUG: KMSAN: uninit-value in bpf_skb_load_helper_32_no_cache+0x14a/0x390 net/core/filter.c:252
    CPU: 1 PID: 5262 Comm: syz-executor.5 Not tainted 5.5.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:215
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     __swab32p include/uapi/linux/swab.h:179 [inline]
     __be32_to_cpup include/uapi/linux/byteorder/little_endian.h:82 [inline]
     get_unaligned_be32 include/linux/unaligned/access_ok.h:30 [inline]
     ____bpf_skb_load_helper_32 net/core/filter.c:240 [inline]
     ____bpf_skb_load_helper_32_no_cache net/core/filter.c:255 [inline]
     bpf_skb_load_helper_32_no_cache+0x14a/0x390 net/core/filter.c:252
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:144 [inline]
     kmsan_internal_poison_shadow+0x66/0xd0 mm/kmsan/kmsan.c:127
     kmsan_kmalloc_large+0x73/0xc0 mm/kmsan/kmsan_hooks.c:128
     kmalloc_large_node_hook mm/slub.c:1406 [inline]
     kmalloc_large_node+0x282/0x2c0 mm/slub.c:3841
     __kmalloc_node_track_caller+0x44b/0x1200 mm/slub.c:4368
     __kmalloc_reserve net/core/skbuff.c:141 [inline]
     __alloc_skb+0x2fd/0xac0 net/core/skbuff.c:209
     alloc_skb include/linux/skbuff.h:1049 [inline]
     netlink_dump+0x44b/0x1ab0 net/netlink/af_netlink.c:2224
     __netlink_dump_start+0xbb2/0xcf0 net/netlink/af_netlink.c:2352
     netlink_dump_start include/linux/netlink.h:233 [inline]
     smc_diag_handler_dump+0x2ba/0x300 net/smc/smc_diag.c:242
     sock_diag_rcv_msg+0x211/0x610 net/core/sock_diag.c:256
     netlink_rcv_skb+0x451/0x650 net/netlink/af_netlink.c:2477
     sock_diag_rcv+0x63/0x80 net/core/sock_diag.c:275
     netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
     netlink_unicast+0xf9e/0x1100 net/netlink/af_netlink.c:1328
     netlink_sendmsg+0x1248/0x14d0 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:639 [inline]
     sock_sendmsg net/socket.c:659 [inline]
     kernel_sendmsg+0x433/0x440 net/socket.c:679
     sock_no_sendpage+0x235/0x300 net/core/sock.c:2740
     kernel_sendpage net/socket.c:3776 [inline]
     sock_sendpage+0x1e1/0x2c0 net/socket.c:937
     pipe_to_sendpage+0x38c/0x4c0 fs/splice.c:458
     splice_from_pipe_feed fs/splice.c:512 [inline]
     __splice_from_pipe+0x539/0xed0 fs/splice.c:636
     splice_from_pipe fs/splice.c:671 [inline]
     generic_splice_sendpage+0x1d5/0x2d0 fs/splice.c:844
     do_splice_from fs/splice.c:863 [inline]
     do_splice fs/splice.c:1170 [inline]
     __do_sys_splice fs/splice.c:1447 [inline]
     __se_sys_splice+0x2380/0x3350 fs/splice.c:1427
     __x64_sys_splice+0x6e/0x90 fs/splice.c:1427
     do_syscall_64+0xb8/0x160 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: f16a7dd5cf27 ("smc: netlink interface for SMC sockets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Ursula Braun <ubraun@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 150f8c56be029594f820ad8714903a6c6c94a42a
Author: Firo Yang <firo.yang@suse.com>
Date:   Wed Feb 12 06:09:17 2020 +0100

    enic: prevent waking up stopped tx queues over watchdog reset
    
    [ Upstream commit 0f90522591fd09dd201065c53ebefdfe3c6b55cb ]
    
    Recent months, our customer reported several kernel crashes all
    preceding with following message:
    NETDEV WATCHDOG: eth2 (enic): transmit queue 0 timed out
    Error message of one of those crashes:
    BUG: unable to handle kernel paging request at ffffffffa007e090
    
    After analyzing severl vmcores, I found that most of crashes are
    caused by memory corruption. And all the corrupted memory areas
    are overwritten by data of network packets. Moreover, I also found
    that the tx queues were enabled over watchdog reset.
    
    After going through the source code, I found that in enic_stop(),
    the tx queues stopped by netif_tx_disable() could be woken up over
    a small time window between netif_tx_disable() and the
    napi_disable() by the following code path:
    napi_poll->
      enic_poll_msix_wq->
         vnic_cq_service->
            enic_wq_service->
               netif_wake_subqueue(enic->netdev, q_number)->
                  test_and_clear_bit(__QUEUE_STATE_DRV_XOFF, &txq->state)
    In turn, upper netowrk stack could queue skb to ENIC NIC though
    enic_hard_start_xmit(). And this might introduce some race condition.
    
    Our customer comfirmed that this kind of kernel crash doesn't occur over
    90 days since they applied this patch.
    
    Signed-off-by: Firo Yang <firo.yang@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce754a314994c902d1a481288ff249401fdffe21
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Mon Feb 10 17:10:46 2020 +0100

    core: Don't skip generic XDP program execution for cloned SKBs
    
    [ Upstream commit ad1e03b2b3d4430baaa109b77bc308dc73050de3 ]
    
    The current generic XDP handler skips execution of XDP programs entirely if
    an SKB is marked as cloned. This leads to some surprising behaviour, as
    packets can end up being cloned in various ways, which will make an XDP
    program not see all the traffic on an interface.
    
    This was discovered by a simple test case where an XDP program that always
    returns XDP_DROP is installed on a veth device. When combining this with
    the Scapy packet sniffer (which uses an AF_PACKET) socket on the sending
    side, SKBs reliably end up in the cloned state, causing them to be passed
    through to the receiving interface instead of being dropped. A minimal
    reproducer script for this is included below.
    
    This patch fixed the issue by simply triggering the existing linearisation
    code for cloned SKBs instead of skipping the XDP program execution. This
    behaviour is in line with the behaviour of the native XDP implementation
    for the veth driver, which will reallocate and copy the SKB data if the SKB
    is marked as shared.
    
    Reproducer Python script (requires BCC and Scapy):
    
    from scapy.all import TCP, IP, Ether, sendp, sniff, AsyncSniffer, Raw, UDP
    from bcc import BPF
    import time, sys, subprocess, shlex
    
    SKB_MODE = (1 << 1)
    DRV_MODE = (1 << 2)
    PYTHON=sys.executable
    
    def client():
        time.sleep(2)
        # Sniffing on the sender causes skb_cloned() to be set
        s = AsyncSniffer()
        s.start()
    
        for p in range(10):
            sendp(Ether(dst="aa:aa:aa:aa:aa:aa", src="cc:cc:cc:cc:cc:cc")/IP()/UDP()/Raw("Test"),
                  verbose=False)
            time.sleep(0.1)
    
        s.stop()
        return 0
    
    def server(mode):
        prog = BPF(text="int dummy_drop(struct xdp_md *ctx) {return XDP_DROP;}")
        func = prog.load_func("dummy_drop", BPF.XDP)
        prog.attach_xdp("a_to_b", func, mode)
    
        time.sleep(1)
    
        s = sniff(iface="a_to_b", count=10, timeout=15)
        if len(s):
            print(f"Got {len(s)} packets - should have gotten 0")
            return 1
        else:
            print("Got no packets - as expected")
            return 0
    
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <skb|drv>")
        sys.exit(1)
    
    if sys.argv[1] == "client":
        sys.exit(client())
    elif sys.argv[1] == "server":
        mode = SKB_MODE if sys.argv[2] == 'skb' else DRV_MODE
        sys.exit(server(mode))
    else:
        try:
            mode = sys.argv[1]
            if mode not in ('skb', 'drv'):
                print(f"Usage: {sys.argv[0]} <skb|drv>")
                sys.exit(1)
            print(f"Running in {mode} mode")
    
            for cmd in [
                    'ip netns add netns_a',
                    'ip netns add netns_b',
                    'ip -n netns_a link add a_to_b type veth peer name b_to_a netns netns_b',
                    # Disable ipv6 to make sure there's no address autoconf traffic
                    'ip netns exec netns_a sysctl -qw net.ipv6.conf.a_to_b.disable_ipv6=1',
                    'ip netns exec netns_b sysctl -qw net.ipv6.conf.b_to_a.disable_ipv6=1',
                    'ip -n netns_a link set dev a_to_b address aa:aa:aa:aa:aa:aa',
                    'ip -n netns_b link set dev b_to_a address cc:cc:cc:cc:cc:cc',
                    'ip -n netns_a link set dev a_to_b up',
                    'ip -n netns_b link set dev b_to_a up']:
                subprocess.check_call(shlex.split(cmd))
    
            server = subprocess.Popen(shlex.split(f"ip netns exec netns_a {PYTHON} {sys.argv[0]} server {mode}"))
            client = subprocess.Popen(shlex.split(f"ip netns exec netns_b {PYTHON} {sys.argv[0]} client"))
    
            client.wait()
            server.wait()
            sys.exit(server.returncode)
    
        finally:
            subprocess.run(shlex.split("ip netns delete netns_a"))
            subprocess.run(shlex.split("ip netns delete netns_b"))
    
    Fixes: d445516966dc ("net: xdp: support xdp generic on virtual devices")
    Reported-by: Stepan Horacek <shoracek@redhat.com>
    Suggested-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
