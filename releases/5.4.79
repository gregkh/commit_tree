commit fc8334619167ce90b6d3f76e3dce9284dbe14fa2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Nov 22 10:14:12 2020 +0100

    Linux 5.4.79
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201120104541.058449969@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26c7d2883851c70c854a98934ae27379286de8bb
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Sat Nov 7 00:49:39 2020 -0800

    ACPI: GED: fix -Wformat
    
    commit 9debfb81e7654fe7388a49f45bc4d789b94c1103 upstream.
    
    Clang is more aggressive about -Wformat warnings when the format flag
    specifies a type smaller than the parameter. It turns out that gsi is an
    int. Fixes:
    
    drivers/acpi/evged.c:105:48: warning: format specifies type 'unsigned
    char' but the argument has type 'unsigned int' [-Wformat]
    trigger == ACPI_EDGE_SENSITIVE ? 'E' : 'L', gsi);
                                                ^~~
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/378
    Fixes: ea6f3af4c5e6 ("ACPI: GED: add support for _Exx / _Lxx handler methods")
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 087c857e0131c2a045b29401b9f99d9265f8bcd5
Author: David Edmondson <david.edmondson@oracle.com>
Date:   Tue Nov 3 12:04:00 2020 +0000

    KVM: x86: clflushopt should be treated as a no-op by emulation
    
    commit 51b958e5aeb1e18c00332e0b37c5d4e95a3eff84 upstream.
    
    The instruction emulator ignores clflush instructions, yet fails to
    support clflushopt. Treat both similarly.
    
    Fixes: 13e457e0eebf ("KVM: x86: Emulator does not decode clflush well")
    Signed-off-by: David Edmondson <david.edmondson@oracle.com>
    Message-Id: <20201103120400.240882-1-david.edmondson@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ae6f2df438d71e30ecbedabd055aa2bfba2ba4d
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Tue Jul 14 14:44:50 2020 +0800

    can: proc: can_remove_proc(): silence remove_proc_entry warning
    
    commit 3accbfdc36130282f5ae9e6eecfdf820169fedce upstream.
    
    If can_init_proc() fail to create /proc/net/can directory, can_remove_proc()
    will trigger a warning:
    
    WARNING: CPU: 6 PID: 7133 at fs/proc/generic.c:672 remove_proc_entry+0x17b0
    Kernel panic - not syncing: panic_on_warn set ...
    
    Fix to return early from can_remove_proc() if can proc_dir does not exists.
    
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/r/1594709090-3203-1-git-send-email-zhangchangzhong@huawei.com
    Fixes: 8e8cda6d737d ("can: initial support for network namespaces")
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1527ab7859b2b3231f33eaf594e7aa28eda148ff
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Oct 9 14:17:11 2020 +0200

    mac80211: always wind down STA state
    
    commit dcd479e10a0510522a5d88b29b8f79ea3467d501 upstream.
    
    When (for example) an IBSS station is pre-moved to AUTHORIZED
    before it's inserted, and then the insertion fails, we don't
    clean up the fast RX/TX states that might already have been
    created, since we don't go through all the state transitions
    again on the way down.
    
    Do that, if it hasn't been done already, when the station is
    freed. I considered only freeing the fast TX/RX state there,
    but we might add more state so it's more robust to wind down
    the state properly.
    
    Note that we warn if the station was ever inserted, it should
    have been properly cleaned up in that case, and the driver
    will probably not like things happening out of order.
    
    Reported-by: syzbot+2e293dbd67de2836ba42@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20201009141710.7223b322a955.I95bd08b9ad0e039c034927cce0b75beea38e059b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df33054114475477b5e7810aa0efb26916220474
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Oct 26 13:36:17 2020 -0700

    Input: sunkbd - avoid use-after-free in teardown paths
    
    commit 77e70d351db7de07a46ac49b87a6c3c7a60fca7e upstream.
    
    We need to make sure we cancel the reinit work before we tear down the
    driver structures.
    
    Reported-by: Bodong Zhao <nopitydays@gmail.com>
    Tested-by: Bodong Zhao <nopitydays@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd61f14592df1054eda1dfcee6dafd248d07c1b8
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Tue Sep 22 23:41:12 2020 +0200

    net: lantiq: Add locking for TX DMA channel
    
    commit f9317ae5523f99999fb54c513ebabbb2bc887ddf upstream.
    
    The TX DMA channel data is accessed by the xrx200_start_xmit() and the
    xrx200_tx_housekeeping() function from different threads. Make sure the
    accesses are synchronized by acquiring the netif_tx_lock() in the
    xrx200_tx_housekeeping() function too. This lock is acquired by the
    kernel before calling xrx200_start_xmit().
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cad37eb129f9374bfcc5552a84a28db4e9daccc
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Oct 12 08:54:31 2020 +0000

    powerpc/8xx: Always fault when _PAGE_ACCESSED is not set
    
    commit 29daf869cbab69088fe1755d9dd224e99ba78b56 upstream.
    
    The kernel expects pte_young() to work regardless of CONFIG_SWAP.
    
    Make sure a minor fault is taken to set _PAGE_ACCESSED when it
    is not already set, regardless of the selection of CONFIG_SWAP.
    
    This adds at least 3 instructions to the TLB miss exception
    handlers fast path. Following patch will reduce this overhead.
    
    Also update the rotation instruction to the correct number of bits
    to reflect all changes done to _PAGE_ACCESSED over time.
    
    Fixes: d069cb4373fe ("powerpc/8xx: Don't touch ACCESSED when no SWAP.")
    Fixes: 5f356497c384 ("powerpc/8xx: remove unused _PAGE_WRITETHRU")
    Fixes: e0a8e0d90a9f ("powerpc/8xx: Handle PAGE_USER via APG bits")
    Fixes: 5b2753fc3e8a ("powerpc/8xx: Implementation of PAGE_EXEC")
    Fixes: a891c43b97d3 ("powerpc/8xx: Prepare handlers for _PAGE_HUGE for 512k pages.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/af834e8a0f1fa97bfae65664950f0984a70c4750.1602492856.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b57c75956e79e6fb526c3e71ea63f2ffb6eb8435
Author: Eran Ben Elisha <eranbe@nvidia.com>
Date:   Mon Aug 31 15:04:35 2020 +0300

    net/mlx5: Add retry mechanism to the command entry index allocation
    
    commit 410bd754cd73c4a2ac3856d9a03d7b08f9c906bf upstream.
    
    It is possible that new command entry index allocation will temporarily
    fail. The new command holds the semaphore, so it means that a free entry
    should be ready soon. Add one second retry mechanism before returning an
    error.
    
    Patch "net/mlx5: Avoid possible free of command entry while timeout comp
    handler" increase the possibility to bump into this temporarily failure
    as it delays the entry index release for non-callback commands.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Eran Ben Elisha <eranbe@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Cc: Timo Rothenpieler <timo@rothenpieler.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7db82a5a4c15b89fa800ce2cf5d04cc0ae30279c
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Wed Mar 18 21:44:32 2020 +0200

    net/mlx5: Fix a race when moving command interface to events mode
    
    commit d43b7007dbd1195a5b6b83213e49b1516aaf6f5e upstream.
    
    After driver creates (via FW command) an EQ for commands, the driver will
    be informed on new commands completion by EQE. However, due to a race in
    driver's internal command mode metadata update, some new commands will
    still be miss-handled by driver as if we are in polling mode. Such commands
    can get two non forced completion, leading to already freed command entry
    access.
    
    CREATE_EQ command, that maps EQ to the command queue must be posted to the
    command queue while it is empty and no other command should be posted.
    
    Add SW mechanism that once the CREATE_EQ command is about to be executed,
    all other commands will return error without being sent to the FW. Allow
    sending other commands only after successfully changing the driver's
    internal command mode metadata.
    We can safely return error to all other commands while creating the command
    EQ, as all other commands might be sent from the user/application during
    driver load. Application can rerun them later after driver's load was
    finished.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Cc: Timo Rothenpieler <timo@rothenpieler.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fa9daaccce8c83444a5610f3b2c55c4cebd5ecb
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Tue Jul 21 10:25:52 2020 +0300

    net/mlx5: poll cmd EQ in case of command timeout
    
    commit 1d5558b1f0de81f54ddee05f3793acc5260d107f upstream.
    
    Once driver detects a command interface command timeout, it warns the
    user and returns timeout error to the caller. In such case, the entry of
    the command is not evacuated (because only real event interrupt is allowed
    to clear command interface entry). If the HW event interrupt
    of this entry will never arrive, this entry will be left unused forever.
    Command interface entries are limited and eventually we can end up without
    the ability to post a new command.
    
    In addition, if driver will not consume the EQE of the lost interrupt and
    rearm the EQ, no new interrupts will arrive for other commands.
    
    Add a resiliency mechanism for manually polling the command EQ in case of
    a command timeout. In case resiliency mechanism will find non-handled EQE,
    it will consume it, and the command interface will be fully functional
    again. Once the resiliency flow finished, wait another 5 seconds for the
    command interface to complete for this command entry.
    
    Define mlx5_cmd_eq_recover() to manage the cmd EQ polling resiliency flow.
    Add an async EQ spinlock to avoid races between resiliency flows and real
    interrupts that might run simultaneously.
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Cc: Timo Rothenpieler <timo@rothenpieler.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42bb7b7b9654ef45f5e6611714f724fdeb8adf5f
Author: Parav Pandit <parav@mellanox.com>
Date:   Fri Dec 6 15:13:41 2019 -0600

    net/mlx5: Use async EQ setup cleanup helpers for multiple EQs
    
    commit 3ed879965cc4ea13fe0908468b653c4ff2cb1309 upstream.
    
    Use helper routines to setup and teardown multiple EQs and reuse the
    code in setup, cleanup and error unwinding flows.
    
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Cc: Timo Rothenpieler <timo@rothenpieler.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33905dc1ce55e5af610ba83d122a5b1da22c0b9
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Thu Nov 19 10:26:33 2020 +0000

    MIPS: PCI: Fix MIPS build
    
    While backporting 37640adbefd6 ("MIPS: PCI: remember nasid changed by
    set interrupt affinity") something went wrong and an extra 'n' was added.
    So 'data->nasid' became 'data->nnasid' and the MIPS builds started failing.
    
    This is only needed for 5.4-stable tree.
    
    Fixes: 957978aa56f1 ("MIPS: PCI: remember nasid changed by set interrupt affinity")
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01474e8cc3421cc55f55c5a0c6e1aef40efa43ab
Author: Daniel Axtens <dja@axtens.net>
Date:   Fri Nov 20 10:35:16 2020 +1100

    selftests/powerpc: entry flush test
    
    commit 89a83a0c69c81a25ce91002b90ca27ed86132a0a upstream.
    
    Add a test modelled on the RFI flush test which counts the number
    of L1D misses doing a simple syscall with the entry flush on and off.
    
    For simplicity of backporting, this test duplicates a lot of code from
    the upstream rfi_flush. This is cleaned up upstream, but we don't clean
    it up here because it would involve bringing in even more commits.
    
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb37345ed224c579b0a1b0e9bd72b788122ae91d
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Nov 20 10:35:15 2020 +1100

    powerpc: Only include kup-radix.h for 64-bit Book3S
    
    commit 178d52c6e89c38d0553b0ac8b99927b11eb995b0 upstream.
    
    In kup.h we currently include kup-radix.h for all 64-bit builds, which
    includes Book3S and Book3E. The latter doesn't make sense, Book3E
    never uses the Radix MMU.
    
    This has worked up until now, but almost by accident, and the recent
    uaccess flush changes introduced a build breakage on Book3E because of
    the bad structure of the code.
    
    So disentangle things so that we only use kup-radix.h for Book3S. This
    requires some more stubs in kup.h.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09495b5f7aab84cf41ef54259cfea4da86a7df98
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:35:14 2020 +1100

    powerpc/64s: flush L1D after user accesses
    
    commit 9a32a7e78bd0cd9a9b6332cbdc345ee5ffd0c5de upstream.
    
    IBM Power9 processors can speculatively operate on data in the L1 cache
    before it has been completely validated, via a way-prediction mechanism. It
    is not possible for an attacker to determine the contents of impermissible
    memory using this method, since these systems implement a combination of
    hardware and software security measures to prevent scenarios where
    protected data could be leaked.
    
    However these measures don't address the scenario where an attacker induces
    the operating system to speculatively execute instructions using data that
    the attacker controls. This can be used for example to speculatively bypass
    "kernel user access prevention" techniques, as discovered by Anthony
    Steinhauser of Google's Safeside Project. This is not an attack by itself,
    but there is a possibility it could be used in conjunction with
    side-channels or other weaknesses in the privileged code to construct an
    attack.
    
    This issue can be mitigated by flushing the L1 cache between privilege
    boundaries of concern. This patch flushes the L1 cache after user accesses.
    
    This is part of the fix for CVE-2020-4788.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b65458b6be8032c5179d4f562038575d7b3a6be3
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:35:13 2020 +1100

    powerpc/64s: flush L1D on kernel entry
    
    commit f79643787e0a0762d2409b7b8334e83f22d85695 upstream.
    
    [backporting note: we need to mark some exception handlers as out-of-line
     because the flushing makes them take too much space -- dja]
    
    IBM Power9 processors can speculatively operate on data in the L1 cache
    before it has been completely validated, via a way-prediction mechanism. It
    is not possible for an attacker to determine the contents of impermissible
    memory using this method, since these systems implement a combination of
    hardware and software security measures to prevent scenarios where
    protected data could be leaked.
    
    However these measures don't address the scenario where an attacker induces
    the operating system to speculatively execute instructions using data that
    the attacker controls. This can be used for example to speculatively bypass
    "kernel user access prevention" techniques, as discovered by Anthony
    Steinhauser of Google's Safeside Project. This is not an attack by itself,
    but there is a possibility it could be used in conjunction with
    side-channels or other weaknesses in the privileged code to construct an
    attack.
    
    This issue can be mitigated by flushing the L1 cache between privilege
    boundaries of concern. This patch flushes the L1 cache on kernel entry.
    
    This is part of the fix for CVE-2020-4788.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcf7f2d3fcec8a47ddfee6d8801ab57162922480
Author: Russell Currey <ruscur@russell.cc>
Date:   Fri Nov 20 10:35:12 2020 +1100

    selftests/powerpc: rfi_flush: disable entry flush if present
    
    commit fcb48454c23c5679d1a2e252f127642e91b05cbe upstream.
    
    We are about to add an entry flush. The rfi (exit) flush test measures
    the number of L1D flushes over a syscall with the RFI flush enabled and
    disabled. But if the entry flush is also enabled, the effect of enabling
    and disabling the RFI flush is masked.
    
    If there is a debugfs entry for the entry flush, disable it during the RFI
    flush and restore it later.
    
    Reported-by: Spoorthy S <spoorts2@in.ibm.com>
    Signed-off-by: Russell Currey <ruscur@russell.cc>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
