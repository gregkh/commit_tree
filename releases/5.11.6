commit 0985dc528812f818fa94366354b9031a2aebc306
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 11 14:19:18 2021 +0100

    Linux 5.11.6
    
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Ross Schmidt <ross.schm.dev@gmail.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20210310132320.510840709@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8511323669e5b80160acf546361ae10a17d8b3cd
Author: Pascal Terjan <pterjan@google.com>
Date:   Tue Feb 23 22:10:46 2021 +0000

    nvme-pci: add quirks for Lexar 256GB SSD
    
    [ Upstream commit 6e6a6828c517fb6819479bf5187df5f39084eb9e ]
    
    Add the NVME_QUIRK_NO_NS_DESC_LIST and NVME_QUIRK_IGNORE_DEV_SUBNQN
    quirks for this buggy device.
    
    Reported and tested in https://bugs.mageia.org/show_bug.cgi?id=28417
    
    Signed-off-by: Pascal Terjan <pterjan@google.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 076dbdf150101878b25ddcc41247fdba2db728e0
Author: Julian Einwag <jeinwag-nvme@marcapo.com>
Date:   Tue Feb 16 13:25:43 2021 +0100

    nvme-pci: mark Seagate Nytro XM1440 as QUIRK_NO_NS_DESC_LIST.
    
    [ Upstream commit 5e112d3fb89703a4981ded60561b5647db3693bf ]
    
    The kernel fails to fully detect these SSDs, only the character devices
    are present:
    
    [   10.785605] nvme nvme0: pci function 0000:04:00.0
    [   10.876787] nvme nvme1: pci function 0000:81:00.0
    [   13.198614] nvme nvme0: missing or invalid SUBNQN field.
    [   13.198658] nvme nvme1: missing or invalid SUBNQN field.
    [   13.206896] nvme nvme0: Shutdown timeout set to 20 seconds
    [   13.215035] nvme nvme1: Shutdown timeout set to 20 seconds
    [   13.225407] nvme nvme0: 16/0/0 default/read/poll queues
    [   13.233602] nvme nvme1: 16/0/0 default/read/poll queues
    [   13.239627] nvme nvme0: Identify Descriptors failed (8194)
    [   13.246315] nvme nvme1: Identify Descriptors failed (8194)
    
    Adding the NVME_QUIRK_NO_NS_DESC_LIST fixes this problem.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205679
    Signed-off-by: Julian Einwag <jeinwag-nvme@marcapo.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d035ddc749e83deb54d2d3f249a5002bccd24d1
Author: Babu Moger <babu.moger@amd.com>
Date:   Tue Mar 2 12:51:31 2021 -0600

    KVM: SVM: Clear the CR4 register on reset
    
    [ Upstream commit 9e46f6c6c959d9bb45445c2e8f04a75324a0dfd0 ]
    
    This problem was reported on a SVM guest while executing kexec.
    Kexec fails to load the new kernel when the PCID feature is enabled.
    
    When kexec starts loading the new kernel, it starts the process by
    resetting the vCPU's and then bringing each vCPU online one by one.
    The vCPU reset is supposed to reset all the register states before the
    vCPUs are brought online. However, the CR4 register is not reset during
    this process. If this register is already setup during the last boot,
    all the flags can remain intact. The X86_CR4_PCIDE bit can only be
    enabled in long mode. So, it must be enabled much later in SMP
    initialization.  Having the X86_CR4_PCIDE bit set during SMP boot can
    cause a boot failures.
    
    Fix the issue by resetting the CR4 register in init_vmcb().
    
    Signed-off-by: Babu Moger <babu.moger@amd.com>
    Message-Id: <161471109108.30811.6392805173629704166.stgit@bmoger-ubuntu>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfd8f29f6398dd24daf04a987d3757970c65e629
Author: Avri Altman <avri.altman@wdc.com>
Date:   Thu Feb 11 12:46:38 2021 +0200

    scsi: ufs: Fix a duplicate dev quirk number
    
    [ Upstream commit 9599a1cf23330008d90b7c232efe95de7510ff29 ]
    
    Fixes: 2b2bfc8aa519 ("scsi: ufs: Introduce a quirk to allow only page-aligned sg entries")
    Link: https://lore.kernel.org/r/20210211104638.292499-1-avri.altman@wdc.com
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b65f581b7eaa04e700cfbf7baf39ad05ba88984
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Feb 8 17:33:28 2021 -0600

    ASoC: Intel: sof_sdw: add quirk for HP Spectre x360 convertible
    
    [ Upstream commit d92e279dee56b4b65c1af21f972413f172a9734a ]
    
    This set of devices has SoundWire support along with DMICs.
    The DMI information was provided by users for 3 separate skus.
    
    BugLink: https://github.com/thesofproject/linux/issues/2700
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20210208233336.59449-4-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0331b427107a10b04f131a0e8bc2fbeb7a004fa
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Feb 8 17:33:26 2021 -0600

    ASoC: Intel: sof_sdw: reorganize quirks by generation
    
    [ Upstream commit 3d09cf8d0d791a41a75123e135f604d59f4aa870 ]
    
    The quirk table is a mess, let's reorganize it by generation before
    making sure that the quirks are consistent for each generation.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20210208233336.59449-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f346d8075207684924bb13198199e4b4348ca737
Author: Nadeem Athani <nadeem@cadence.com>
Date:   Tue Feb 9 15:46:21 2021 +0100

    PCI: cadence: Retrain Link to work around Gen2 training defect
    
    [ Upstream commit 4740b969aaf58adeca6829947a3ad8da423976cf ]
    
    Cadence controller will not initiate autonomous speed change if strapped
    as Gen2. The Retrain Link bit is set as quirk to enable this speed change.
    
    Link: https://lore.kernel.org/r/20210209144622.26683-3-nadeem@cadence.com
    Signed-off-by: Nadeem Athani <nadeem@cadence.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 517efb9f1d2948bd95bb62a7d3f036f5211171b4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Feb 6 21:53:27 2021 +0100

    HID: ite: Enable QUIRK_TOUCHPAD_ON_OFF_REPORT on Acer Aspire Switch 10E
    
    [ Upstream commit b7c20f3815985570ac71c39b1a3e68c201109578 ]
    
    The Acer Aspire Switch 10E (SW3-016)'s keyboard-dock uses the same USB-ids
    as the Acer One S1003 keyboard-dock. Yet they are not entirely the same:
    
    1. The S1003 keyboard-dock has the same report descriptors as the
    S1002 keyboard-dock (which has different USB-ids)
    
    2. The Acer Aspire Switch 10E's keyboard-dock has different
    report descriptors from the S1002/S1003 keyboard docks and it
    sends 0x00880078 / 0x00880079 usage events when the touchpad is
    toggled on/off (which is handled internally).
    
    This means that all Acer kbd-docks handled by the hid-ite.c drivers
    report their touchpad being toggled on/off through these custom
    usage-codes with the exception of the S1003 dock, which likely is
    a bug of that dock.
    
    Add a QUIRK_TOUCHPAD_ON_OFF_REPORT quirk for the Aspire Switch 10E / S1003
    usb-id so that the touchpad toggling will get reported to userspace on
    the Aspire Switch 10E.
    
    Since the Aspire Switch 10E's kbd-dock has different report-descriptors,
    this also requires adding support for fixing those to ite_report_fixup().
    
    Setting the quirk will also cause ite_report_fixup() to hit the
    S1002/S1003 descriptors path on the S1003. Since the S1003 kbd-dock
    never generates any input-reports for the fixed up part of the
    descriptors this does not matter; and if there are versions out there
    which do actually send input-reports for the touchpad-toggle then the
    fixup should actually help to make things work.
    
    This was tested on both an Acer Aspire Switch 10E and on an Acer One S1003.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7be0b33ed78f56f466dafdc27d51233dffdec419
Author: Fabian Lesniak <fabian@lesniak-it.de>
Date:   Fri Feb 5 22:51:16 2021 +0100

    ALSA: usb-audio: add mixer quirks for Pioneer DJM-900NXS2
    
    [ Upstream commit fee03efc69345344c8851596d74d93199b175bfe ]
    
    This commit adds mixer quirks for the Pioneer DJM-900NXS2 mixer. This
    device has 6 capture channels, 5 of them allow setting the signal
    source. This adds controls for these, similar to the DJM-250Mk2.
    However, playpack channels are not controllable via software like on the
    250Mk2, as they can only be set manually on the mixing console.
    Read-only controls showing the currently selected playback channels are
    omitted.
    
    Signed-off-by: Fabian Lesniak <fabian@lesniak-it.de>
    Link: https://lore.kernel.org/r/20210205215116.258724-2-fabian@lesniak-it.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac808f0ad4cdaec22b678191771ec6d1f94dfe9c
Author: Olivia Mackintosh <livvy@base.nu>
Date:   Fri Feb 5 18:42:56 2021 +0000

    ALSA: usb-audio: Add DJM750 to Pioneer mixer quirk
    
    [ Upstream commit a07df82c799013236aa90a140785775eda9f9523 ]
    
    This allows for N different devices to use the pioneer mixer quirk for
    setting capture/record type and recording level. The impementation has
    not changed much with the exception of an additional mask on
    private_value to allow storing of a device index:
            DEVICE MASK     0xff000000
            GROUP_MASK      0x00ff0000
            VALUE_MASK      0x0000ffff
    
    This could be improved by changing the arrays of wValues for each
    channel to contain named definitions (e.g. SND_DJM_CAP_LINE). It would
    improve readability and perhaps would allow using the same array for
    multiple channels. The channel number can be specified on the control
    next to the wIndex.
    
    Feedback is very much appreciated as I'm not the most proficient C
    programmer but am learning as I go.
    
    Signed-off-by: Olivia Mackintosh <livvy@base.nu>
    Link: https://lore.kernel.org/r/20210205184256.10201-2-livvy@base.nu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2ff31ea6dd7a16a8ed9fe364e8e3d995dc08d81
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Jan 30 21:33:23 2021 +0100

    HID: i2c-hid: Add I2C_HID_QUIRK_NO_IRQ_AFTER_RESET for ITE8568 EC on Voyo Winpad A15
    
    [ Upstream commit fc6a31b00739356809dd566e16f2c4325a63285d ]
    
    The ITE8568 EC on the Voyo Winpad A15 presents itself as an I2C-HID
    attached keyboard and mouse (which seems to never send any events).
    
    This needs the I2C_HID_QUIRK_NO_IRQ_AFTER_RESET quirk, otherwise we get
    the following errors:
    
    [ 3688.770850] i2c_hid i2c-ITE8568:00: failed to reset device.
    [ 3694.915865] i2c_hid i2c-ITE8568:00: failed to reset device.
    [ 3701.059717] i2c_hid i2c-ITE8568:00: failed to reset device.
    [ 3707.205944] i2c_hid i2c-ITE8568:00: failed to reset device.
    [ 3708.227940] i2c_hid i2c-ITE8568:00: can't add hid device: -61
    [ 3708.236518] i2c_hid: probe of i2c-ITE8568:00 failed with error -61
    
    Which leads to a significant boot delay.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 753123d6610c50c114c3f6a526534155916c2dcc
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Thu Dec 10 16:55:10 2020 +0800

    mmc: sdhci-of-dwcmshc: set SDHCI_QUIRK2_PRESET_VALUE_BROKEN
    
    [ Upstream commit 5f7dfda4f2cec580c135fd81d96a05006651c128 ]
    
    The SDHCI_PRESET_FOR_* registers are not set(all read as zeros), so
    set the quirk.
    
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Link: https://lore.kernel.org/r/20201210165510.76b917e5@xhacker.debian
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cc6803cfe2dc95725c5d6ecc3e1cc10426cd0eb
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
Date:   Wed Jan 13 19:33:33 2021 +0100

    drm/msm/a5xx: Remove overwriting A5XX_PC_DBG_ECO_CNTL register
    
    [ Upstream commit 8f03c30cb814213e36032084a01f49a9e604a3e3 ]
    
    The PC_DBG_ECO_CNTL register on the Adreno A5xx family gets
    programmed to some different values on a per-model basis.
    At least, this is what we intend to do here;
    
    Unfortunately, though, this register is being overwritten with a
    static magic number, right after applying the GPU-specific
    configuration (including the GPU-specific quirks) and that is
    effectively nullifying the efforts.
    
    Let's remove the redundant and wrong write to the PC_DBG_ECO_CNTL
    register in order to retain the wanted configuration for the
    target GPU.
    
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
    Reviewed-by: Jordan Crouse <jcrouse@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ac89093f76f2a5aa5fe506f389721b052367162
Author: Kiwoong Kim <kwmad.kim@samsung.com>
Date:   Tue Jan 19 12:33:42 2021 +0900

    scsi: ufs: ufs-exynos: Use UFSHCD_QUIRK_ALIGN_SG_WITH_PAGE_SIZE
    
    [ Upstream commit f1ef9047aaab036edb39261b0a7a6bdcf3010b87 ]
    
    Exynos needs scatterlist entries aligned to page size because it isn't
    capable of transferring data contained in one DATA IN operation to seversal
    areas in memory.
    
    Link: https://lore.kernel.org/r/80d7e27d6ec537e650a6bd74897b6c60618efcdc.1611026909.git.kwmad.kim@samsung.com
    Signed-off-by: Kiwoong Kim <kwmad.kim@samsung.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 826918c9540903c57bebb29a971cbd3bdfe717c6
Author: Kiwoong Kim <kwmad.kim@samsung.com>
Date:   Mon Dec 21 10:24:41 2020 +0900

    scsi: ufs: ufs-exynos: Apply vendor-specific values for three timeouts
    
    [ Upstream commit a967ddb22d94eb476ccef983b5f2730fa4d184d0 ]
    
    Set optimized values for the following timeouts:
    
     - FC0_PROTECTION_TIMER
     - TC0_REPLAY_TIMER
     - AFC0_REQUEST_TIMER
    
    Exynos doesn't yet use traffic class #1.
    
    Link: https://lore.kernel.org/r/a0ff44f665a4f31d2f945fd71de03571204c576c.1608513782.git.kwmad.kim@samsung.com
    Signed-off-by: Kiwoong Kim <kwmad.kim@samsung.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a1798c2c66de28b6f0ab6ed7ae1a07e1c33f6ce
Author: Kiwoong Kim <kwmad.kim@samsung.com>
Date:   Tue Jan 19 12:33:41 2021 +0900

    scsi: ufs: Introduce a quirk to allow only page-aligned sg entries
    
    [ Upstream commit 2b2bfc8aa519f696087475ed8e8c61850c673272 ]
    
    Some SoCs require a single scatterlist entry for smaller than page size,
    i.e. 4KB. When dispatching commands with more than one scatterlist entry
    under 4KB in size the following behavior is observed:
    
    A command to read a block range is dispatched with two scatterlist entries
    that are named AAA and BBB. After dispatching, the host builds two PRDT
    entries and during transmission, device sends just one DATA IN because
    device doesn't care about host DMA. The host then transfers the combined
    amount of data from start address of the area named AAA. As a consequence,
    the area that follows AAA in memory would be corrupted.
    
        |<------------->|
        +-------+------------         +-------+
        +  AAA  + (corrupted)   ...   +  BBB  +
        +-------+------------         +-------+
    
    To avoid this we need to enforce page size alignment for sg entries.
    
    Link: https://lore.kernel.org/r/56dddef94f60bd9466fd77e69f64bbbd657ed2a1.1611026909.git.kwmad.kim@samsung.com
    Signed-off-by: Kiwoong Kim <kwmad.kim@samsung.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e7f1f2029449d375a257130788a6e158d1ca01e
Author: Aswath Govindraju <a-govindraju@ti.com>
Date:   Tue Jan 5 16:28:12 2021 +0530

    misc: eeprom_93xx46: Add quirk to support Microchip 93LC46B eeprom
    
    [ Upstream commit f6f1f8e6e3eea25f539105d48166e91f0ab46dd1 ]
    
    A dummy zero bit is sent preceding the data during a read transfer by the
    Microchip 93LC46B eeprom (section 2.7 of[1]). This results in right shift
    of data during a read. In order to ignore this bit a quirk can be added to
    send an extra zero bit after the read address.
    
    Add a quirk to ignore the zero bit sent before data by adding a zero bit
    after the read address.
    
    [1] - https://www.mouser.com/datasheet/2/268/20001749K-277859.pdf
    
    Signed-off-by: Aswath Govindraju <a-govindraju@ti.com>
    Link: https://lore.kernel.org/r/20210105105817.17644-3-a-govindraju@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9576543c8a201a565224e60d109145f418779e4d
Author: Kiwoong Kim <kwmad.kim@samsung.com>
Date:   Mon Dec 21 10:24:40 2020 +0900

    scsi: ufs: Add a quirk to permit overriding UniPro defaults
    
    [ Upstream commit b1d0d2eb89d4e3a25b212a9d836587503537067e ]
    
    The UniPro specification states that attribute IDs of the following
    parameters are vendor-specific so some SoCs could have no regions at the
    defined addresses:
    
     - DME_LocalFC0ProtectionTimeOutVal
     - DME_LocalTC0ReplayTimeOutVal
     - DME_LocalAFC0ReqTimeOutVal
    
    In addition, the following parameters should be set considering the
    compatibility between host and device.
    
     - PA_PWRMODEUSERDATA0
     - PA_PWRMODEUSERDATA1
     - PA_PWRMODEUSERDATA2
     - PA_PWRMODEUSERDATA3
     - PA_PWRMODEUSERDATA4
     - PA_PWRMODEUSERDATA5
    
    Introduce a quirk to allow vendor drivers to override the UniPro defaults.
    
    Link: https://lore.kernel.org/r/1fedd3dea0ccc980913a5995a10510d86a5b01b9.1608513782.git.kwmad.kim@samsung.com
    Acked-by: Avri Altman <Avri.Altman@wdc.com>
    Signed-off-by: Kiwoong Kim <kwmad.kim@samsung.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a72c496e5f475d8842cffddcf38b9a6531c0a06
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Tue Dec 22 15:29:28 2020 +0800

    scsi: ufs-mediatek: Enable UFSHCI_QUIRK_SKIP_MANUAL_WB_FLUSH_CTRL
    
    [ Upstream commit 46ec9592ffd679fa26142dcb9e5119aad7e60b55 ]
    
    Flush during hibern8 is sufficient on MediaTek platforms, thus enable
    UFSHCI_QUIRK_SKIP_MANUAL_WB_FLUSH_CTRL to skip enabling
    fWriteBoosterBufferFlush during WriteBooster initialization.
    
    Link: https://lore.kernel.org/r/20201222072928.32328-1-stanley.chu@mediatek.com
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1172c4008d0c3347699b6beeba032e49602e23a8
Author: Andrey Ryabinin <arbn@yandex-team.com>
Date:   Wed Feb 17 17:30:04 2021 +0300

    iommu/amd: Fix sleeping in atomic in increase_address_space()
    
    commit 140456f994195b568ecd7fc2287a34eadffef3ca upstream.
    
    increase_address_space() calls get_zeroed_page(gfp) under spin_lock with
    disabled interrupts. gfp flags passed to increase_address_space() may allow
    sleeping, so it comes to this:
    
     BUG: sleeping function called from invalid context at mm/page_alloc.c:4342
     in_atomic(): 1, irqs_disabled(): 1, pid: 21555, name: epdcbbf1qnhbsd8
    
     Call Trace:
      dump_stack+0x66/0x8b
      ___might_sleep+0xec/0x110
      __alloc_pages_nodemask+0x104/0x300
      get_zeroed_page+0x15/0x40
      iommu_map_page+0xdd/0x3e0
      amd_iommu_map+0x50/0x70
      iommu_map+0x106/0x220
      vfio_iommu_type1_ioctl+0x76e/0x950 [vfio_iommu_type1]
      do_vfs_ioctl+0xa3/0x6f0
      ksys_ioctl+0x66/0x70
      __x64_sys_ioctl+0x16/0x20
      do_syscall_64+0x4e/0x100
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fix this by moving get_zeroed_page() out of spin_lock/unlock section.
    
    Fixes: 754265bcab ("iommu/amd: Fix race in increase_address_space()")
    Signed-off-by: Andrey Ryabinin <arbn@yandex-team.com>
    Acked-by: Will Deacon <will@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210217143004.19165-1-arbn@yandex-team.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Andrey Ryabinin <arbn@yandex-team.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f204261088c1c4e8528809c57cb6838c13a3999
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Mon Feb 22 18:40:44 2021 +0200

    btrfs: don't flush from btrfs_delayed_inode_reserve_metadata
    
    commit 4d14c5cde5c268a2bc26addecf09489cb953ef64 upstream
    
    Calling btrfs_qgroup_reserve_meta_prealloc from
    btrfs_delayed_inode_reserve_metadata can result in flushing delalloc
    while holding a transaction and delayed node locks. This is deadlock
    prone. In the past multiple commits:
    
     * ae5e070eaca9 ("btrfs: qgroup: don't try to wait flushing if we're
    already holding a transaction")
    
     * 6f23277a49e6 ("btrfs: qgroup: don't commit transaction when we already
     hold the handle")
    
    Tried to solve various aspects of this but this was always a
    whack-a-mole game. Unfortunately those 2 fixes don't solve a deadlock
    scenario involving btrfs_delayed_node::mutex. Namely, one thread
    can call btrfs_dirty_inode as a result of reading a file and modifying
    its atime:
    
      PID: 6963   TASK: ffff8c7f3f94c000  CPU: 2   COMMAND: "test"
      #0  __schedule at ffffffffa529e07d
      #1  schedule at ffffffffa529e4ff
      #2  schedule_timeout at ffffffffa52a1bdd
      #3  wait_for_completion at ffffffffa529eeea             <-- sleeps with delayed node mutex held
      #4  start_delalloc_inodes at ffffffffc0380db5
      #5  btrfs_start_delalloc_snapshot at ffffffffc0393836
      #6  try_flush_qgroup at ffffffffc03f04b2
      #7  __btrfs_qgroup_reserve_meta at ffffffffc03f5bb6     <-- tries to reserve space and starts delalloc inodes.
      #8  btrfs_delayed_update_inode at ffffffffc03e31aa      <-- acquires delayed node mutex
      #9  btrfs_update_inode at ffffffffc0385ba8
     #10  btrfs_dirty_inode at ffffffffc038627b               <-- TRANSACTIION OPENED
     #11  touch_atime at ffffffffa4cf0000
     #12  generic_file_read_iter at ffffffffa4c1f123
     #13  new_sync_read at ffffffffa4ccdc8a
     #14  vfs_read at ffffffffa4cd0849
     #15  ksys_read at ffffffffa4cd0bd1
     #16  do_syscall_64 at ffffffffa4a052eb
     #17  entry_SYSCALL_64_after_hwframe at ffffffffa540008c
    
    This will cause an asynchronous work to flush the delalloc inodes to
    happen which can try to acquire the same delayed_node mutex:
    
      PID: 455    TASK: ffff8c8085fa4000  CPU: 5   COMMAND: "kworker/u16:30"
      #0  __schedule at ffffffffa529e07d
      #1  schedule at ffffffffa529e4ff
      #2  schedule_preempt_disabled at ffffffffa529e80a
      #3  __mutex_lock at ffffffffa529fdcb                    <-- goes to sleep, never wakes up.
      #4  btrfs_delayed_update_inode at ffffffffc03e3143      <-- tries to acquire the mutex
      #5  btrfs_update_inode at ffffffffc0385ba8              <-- this is the same inode that pid 6963 is holding
      #6  cow_file_range_inline.constprop.78 at ffffffffc0386be7
      #7  cow_file_range at ffffffffc03879c1
      #8  btrfs_run_delalloc_range at ffffffffc038894c
      #9  writepage_delalloc at ffffffffc03a3c8f
     #10  __extent_writepage at ffffffffc03a4c01
     #11  extent_write_cache_pages at ffffffffc03a500b
     #12  extent_writepages at ffffffffc03a6de2
     #13  do_writepages at ffffffffa4c277eb
     #14  __filemap_fdatawrite_range at ffffffffa4c1e5bb
     #15  btrfs_run_delalloc_work at ffffffffc0380987         <-- starts running delayed nodes
     #16  normal_work_helper at ffffffffc03b706c
     #17  process_one_work at ffffffffa4aba4e4
     #18  worker_thread at ffffffffa4aba6fd
     #19  kthread at ffffffffa4ac0a3d
     #20  ret_from_fork at ffffffffa54001ff
    
    To fully address those cases the complete fix is to never issue any
    flushing while holding the transaction or the delayed node lock. This
    patch achieves it by calling qgroup_reserve_meta directly which will
    either succeed without flushing or will fail and return -EDQUOT. In the
    latter case that return value is going to be propagated to
    btrfs_dirty_inode which will fallback to start a new transaction. That's
    fine as the majority of time we expect the inode will have
    BTRFS_DELAYED_NODE_INODE_DIRTY flag set which will result in directly
    copying the in-memory state.
    
    Fixes: c53e9653605d ("btrfs: qgroup: try to flush qgroup space when we get -EDQUOT")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86faf1cd057442bf330fb05e5d3c13d9417bf039
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Mon Feb 22 18:40:43 2021 +0200

    btrfs: export and rename qgroup_reserve_meta
    
    commit 80e9baed722c853056e0c5374f51524593cb1031 upstream
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6906efd77748fd932f4d284dfe5e36de46ec27c2
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Mon Feb 8 17:57:20 2021 -0700

    arm64: Make CPU_BIG_ENDIAN depend on ld.bfd or ld.lld 13.0.0+
    
    commit e9c6deee00e9197e75cd6aa0d265d3d45bd7cc28 upstream
    
    Similar to commit 28187dc8ebd9 ("ARM: 9025/1: Kconfig: CPU_BIG_ENDIAN
    depends on !LD_IS_LLD"), ld.lld prior to 13.0.0 does not properly
    support aarch64 big endian, leading to the following build error when
    CONFIG_CPU_BIG_ENDIAN is selected:
    
    ld.lld: error: unknown emulation: aarch64linuxb
    
    This has been resolved in LLVM 13. To avoid errors like this, only allow
    CONFIG_CPU_BIG_ENDIAN to be selected if using ld.bfd or ld.lld 13.0.0
    and newer.
    
    While we are here, the indentation of this symbol used spaces since its
    introduction in commit a872013d6d03 ("arm64: kconfig: allow
    CPU_BIG_ENDIAN to be selected"). Change it to tabs to be consistent with
    kernel coding style.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/380
    Link: https://github.com/ClangBuiltLinux/linux/issues/1288
    Link: https://github.com/llvm/llvm-project/commit/7605a9a009b5fa3bdac07e3131c8d82f6d08feb7
    Link: https://github.com/llvm/llvm-project/commit/eea34aae2e74e9b6fbdd5b95f479bc7f397bf387
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20210209005719.803608-1-nathan@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de26d073a4b7c4d36c0f6fd47a942145053a6a0f
Author: Helge Deller <deller@gmx.de>
Date:   Tue Mar 2 21:07:07 2021 +0100

    parisc: Enable -mlong-calls gcc option with CONFIG_COMPILE_TEST
    
    commit 778e45d7720d663811352943dd515b41f6849637 upstream
    
    The kernel test robot reported multiple linkage problems like this:
    
        hppa64-linux-ld: init/main.o(.init.text+0x56c): cannot reach printk
        init/main.o: in function `unknown_bootoption':
        (.init.text+0x56c): relocation truncated to fit: R_PARISC_PCREL22F against
            symbol `printk' defined in .text.unlikely section in kernel/printk/printk.o
    
    There are two ways to solve it:
    a) Enable the -mlong-call compiler option (CONFIG_MLONGCALLS),
    b) Add long branch stub support in 64-bit linker.
    
    While b) is the long-term solution, this patch works around the issue by
    automatically enabling the CONFIG_MLONGCALLS option when
    CONFIG_COMPILE_TEST is set, which indicates that a non-production kernel
    (e.g. 0-day kernel) is built.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: 00e35f2b0e8a ("parisc: Enable -mlong-calls gcc option by default when !CONFIG_MODULES")
    Cc: stable@vger.kernel.org # v5.6+
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36fcd155c8426b7e1834bcd2b781bf345376a2c2
Author: Zoltán Böszörményi <zboszor@gmail.com>
Date:   Sun Feb 21 06:12:16 2021 +0100

    nvme-pci: mark Kingston SKC2000 as not supporting the deepest power state
    
    commit dc22c1c058b5c4fe967a20589e36f029ee42a706 upstream
    
    My 2TB SKC2000 showed the exact same symptoms that were provided
    in 538e4a8c57 ("nvme-pci: avoid the deepest sleep state on
    Kingston A2000 SSDs"), i.e. a complete NVME lockup that needed
    cold boot to get it back.
    
    According to some sources, the A2000 is simply a rebadged
    SKC2000 with a slightly optimized firmware.
    
    Adding the SKC2000 PCI ID to the quirk list with the same workaround
    as the A2000 made my laptop survive a 5 hours long Yocto bootstrap
    buildfest which reliably triggered the SSD lockup previously.
    
    Signed-off-by: Zoltán Böszörményi <zboszor@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d251991b9ff2b02fdbcdd3fc83dbcca7de82845
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Wed Dec 23 12:06:58 2020 +0100

    media: cedrus: Remove checking for required controls
    
    commit 7072db89572135f28cad65f15877bf7e67cf2ff8 upstream.
    
    According to v4l2 request api specifications, it's allowed to skip
    control if its content isn't changed for performance reasons. Cedrus
    driver predates that, so it has implemented mechanism to check if all
    required controls are included in one request.
    
    Conform to specifications with removing that mechanism.
    
    Note that this mechanism with static required flag isn't very good
    anyway because need for control is usually signaled in other controls.
    
    Fixes: 50e761516f2b ("media: platform: Add Cedrus VPU decoder driver")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e38abe94cc16932c334873c2fc7b20c7cce75728
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Mar 10 11:30:45 2021 +0000

    io_uring: don't take uring_lock during iowq cancel
    
    commit 792bb6eb862333658bf1bd2260133f0507e2da8d upstream
    
    [   97.866748] a.out/2890 is trying to acquire lock:
    [   97.867829] ffff8881046763e8 (&ctx->uring_lock){+.+.}-{3:3}, at:
    io_wq_submit_work+0x155/0x240
    [   97.869735]
    [   97.869735] but task is already holding lock:
    [   97.871033] ffff88810dfe0be8 (&ctx->uring_lock){+.+.}-{3:3}, at:
    __x64_sys_io_uring_enter+0x3f0/0x5b0
    [   97.873074]
    [   97.873074] other info that might help us debug this:
    [   97.874520]  Possible unsafe locking scenario:
    [   97.874520]
    [   97.875845]        CPU0
    [   97.876440]        ----
    [   97.877048]   lock(&ctx->uring_lock);
    [   97.877961]   lock(&ctx->uring_lock);
    [   97.878881]
    [   97.878881]  *** DEADLOCK ***
    [   97.878881]
    [   97.880341]  May be due to missing lock nesting notation
    [   97.880341]
    [   97.881952] 1 lock held by a.out/2890:
    [   97.882873]  #0: ffff88810dfe0be8 (&ctx->uring_lock){+.+.}-{3:3}, at:
    __x64_sys_io_uring_enter+0x3f0/0x5b0
    [   97.885108]
    [   97.885108] stack backtrace:
    [   97.890457] Call Trace:
    [   97.891121]  dump_stack+0xac/0xe3
    [   97.891972]  __lock_acquire+0xab6/0x13a0
    [   97.892940]  lock_acquire+0x2c3/0x390
    [   97.894894]  __mutex_lock+0xae/0x9f0
    [   97.901101]  io_wq_submit_work+0x155/0x240
    [   97.902112]  io_wq_cancel_cb+0x162/0x490
    [   97.904126]  io_async_find_and_cancel+0x3b/0x140
    [   97.905247]  io_issue_sqe+0x86d/0x13e0
    [   97.909122]  __io_queue_sqe+0x10b/0x550
    [   97.913971]  io_queue_sqe+0x235/0x470
    [   97.914894]  io_submit_sqes+0xcce/0xf10
    [   97.917872]  __x64_sys_io_uring_enter+0x3fb/0x5b0
    [   97.921424]  do_syscall_64+0x2d/0x40
    [   97.922329]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    While holding uring_lock, e.g. from inline execution, async cancel
    request may attempt cancellations through io_wq_submit_work, which may
    try to grab a lock. Delay it to task_work, so we do it from a clean
    context and don't have to worry about locking.
    
    Cc: <stable@vger.kernel.org> # 5.5+
    Fixes: c07e6719511e ("io_uring: hold uring_lock while completing failed polled io in io_wq_submit_work()")
    Reported-by: Abaci <abaci@linux.alibaba.com>
    Reported-by: Hao Xu <haoxu@linux.alibaba.com>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 597d08666ac76cd5d82e227985b1fc723c14e4a2
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Mar 10 11:30:44 2021 +0000

    io_uring/io-wq: return 2-step work swap scheme
    
    commit 5280f7e530f71ba85baf90169393196976ad0e52 upstream
    
    Saving one lock/unlock for io-wq is not super important, but adds some
    ugliness in the code. More important, atomic decs not turning it to zero
    for some archs won't give the right ordering/barriers so the
    io_steal_work() may pretty easily get subtly and completely broken.
    
    Return back 2-step io-wq work exchange and clean it up.
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 811c86bcc67eecfed970a293e13e9a57398e832d
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Mar 10 11:30:43 2021 +0000

    io_uring/io-wq: kill off now unused IO_WQ_WORK_NO_CANCEL
    
    commit 4014d943cb62db892eb023d385a966a3fce5ee4c upstream
    
    It's no longer used as IORING_OP_CLOSE got rid for the need of flagging
    it as uncancelable, kill it of.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21eba814af427b0901811acdfce415c4b8b7c844
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Mar 10 11:30:42 2021 +0000

    io_uring: get rid of intermediate IORING_OP_CLOSE stage
    
    commit 9eac1904d3364254d622bf2c771c4f85cd435fc2 upstream
    
    We currently split the close into two, in case we have a ->flush op
    that we can't safely handle from non-blocking context. This requires
    us to flag the op as uncancelable if we do need to punt it async, and
    that means special handling for just this op type.
    
    Use __close_fd_get_file() and grab the files lock so we can get the file
    and check if we need to go async in one atomic operation. That gets rid
    of the need for splitting this into two steps, and hence the need for
    IO_WQ_WORK_NO_CANCEL.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 799c227794482b83e8577ce4c6ce3f77e2a6c563
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Mar 10 11:30:41 2021 +0000

    fs: provide locked helper variant of close_fd_get_file()
    
    commit 53dec2ea74f2ef360e8455439be96a780baa6097 upstream
    
    Assumes current->files->file_lock is already held on invocation. Helps
    the caller check the file before removing the fd, if it needs to.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9673ff441e70b5edbaf25e6b6760d9fdbd2c4ecb
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Mar 10 11:30:40 2021 +0000

    io_uring: deduplicate failing task_work_add
    
    commit eab30c4d20dc761d463445e5130421863ff81505 upstream
    
    When io_req_task_work_add() fails, the request will be cancelled by
    enqueueing via task_works of io-wq. Extract a function for that.
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24fcea38c908b62194aa4699a69f50bb4dd584e8
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Mar 10 11:30:39 2021 +0000

    io_uring: unpark SQPOLL thread for cancelation
    
    commit 34343786ecc5ff493ca4d1f873b4386759ba52ee upstream
    
    We park SQPOLL task before going into io_uring_cancel_files(), so the
    task won't run task_works including those that might be important for
    the cancellation passes. In this case it's io_poll_remove_one(), which
    frees requests via io_put_req_deferred().
    
    Unpark it for while waiting, it's ok as we disable submissions
    beforehand, so no new requests will be generated.
    
    INFO: task syz-executor893:8493 blocked for more than 143 seconds.
    Call Trace:
     context_switch kernel/sched/core.c:4327 [inline]
     __schedule+0x90c/0x21a0 kernel/sched/core.c:5078
     schedule+0xcf/0x270 kernel/sched/core.c:5157
     io_uring_cancel_files fs/io_uring.c:8912 [inline]
     io_uring_cancel_task_requests+0xe70/0x11a0 fs/io_uring.c:8979
     __io_uring_files_cancel+0x110/0x1b0 fs/io_uring.c:9067
     io_uring_files_cancel include/linux/io_uring.h:51 [inline]
     do_exit+0x2fe/0x2ae0 kernel/exit.c:780
     do_group_exit+0x125/0x310 kernel/exit.c:922
     __do_sys_exit_group kernel/exit.c:933 [inline]
     __se_sys_exit_group kernel/exit.c:931 [inline]
     __x64_sys_exit_group+0x3a/0x50 kernel/exit.c:931
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Cc: stable@vger.kernel.org # 5.5+
    Reported-by: syzbot+695b03d82fa8e4901b06@syzkaller.appspotmail.com
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52eeaea8453e27d76cea550521d04ac4d79c69ee
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Mar 10 11:30:38 2021 +0000

    io_uring: deduplicate core cancellations sequence
    
    commit 9936c7c2bc76a0b2276f6d19de6d1d92f03deeab upstream
    
    Files and task cancellations go over same steps trying to cancel
    requests in io-wq, poll, etc. Deduplicate it with a helper.
    
    note: new io_uring_try_cancel_requests() is former
    __io_uring_cancel_task_requests() with files passed as an agrument and
    flushing overflowed requests.
    
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 567c81912cec641db75ac6cb64c63f8367c97d19
Author: Pavel Begunkov <asml.silence@gmail.com>
Date:   Wed Mar 10 11:30:37 2021 +0000

    io_uring: fix inconsistent lock state
    
    commin 9ae1f8dd372e0e4c020b345cf9e09f519265e981 upstream
    
    WARNING: inconsistent lock state
    
    inconsistent {HARDIRQ-ON-W} -> {IN-HARDIRQ-W} usage.
    syz-executor217/8450 [HC1[1]:SC0[0]:HE0:SE1] takes:
    ffff888023d6e620 (&fs->lock){?.+.}-{2:2}, at: spin_lock include/linux/spinlock.h:354 [inline]
    ffff888023d6e620 (&fs->lock){?.+.}-{2:2}, at: io_req_clean_work fs/io_uring.c:1398 [inline]
    ffff888023d6e620 (&fs->lock){?.+.}-{2:2}, at: io_dismantle_req+0x66f/0xf60 fs/io_uring.c:2029
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&fs->lock);
      <Interrupt>
        lock(&fs->lock);
    
     *** DEADLOCK ***
    
    1 lock held by syz-executor217/8450:
     #0: ffff88802417c3e8 (&ctx->uring_lock){+.+.}-{3:3}, at: __do_sys_io_uring_enter+0x1071/0x1f30 fs/io_uring.c:9442
    
    stack backtrace:
    CPU: 1 PID: 8450 Comm: syz-executor217 Not tainted 5.11.0-rc5-next-20210129-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
    [...]
     _raw_spin_lock+0x2a/0x40 kernel/locking/spinlock.c:151
     spin_lock include/linux/spinlock.h:354 [inline]
     io_req_clean_work fs/io_uring.c:1398 [inline]
     io_dismantle_req+0x66f/0xf60 fs/io_uring.c:2029
     __io_free_req+0x3d/0x2e0 fs/io_uring.c:2046
     io_free_req fs/io_uring.c:2269 [inline]
     io_double_put_req fs/io_uring.c:2392 [inline]
     io_put_req+0xf9/0x570 fs/io_uring.c:2388
     io_link_timeout_fn+0x30c/0x480 fs/io_uring.c:6497
     __run_hrtimer kernel/time/hrtimer.c:1519 [inline]
     __hrtimer_run_queues+0x609/0xe40 kernel/time/hrtimer.c:1583
     hrtimer_interrupt+0x334/0x940 kernel/time/hrtimer.c:1645
     local_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1085 [inline]
     __sysvec_apic_timer_interrupt+0x146/0x540 arch/x86/kernel/apic/apic.c:1102
     asm_call_irq_on_stack+0xf/0x20
     </IRQ>
     __run_sysvec_on_irqstack arch/x86/include/asm/irq_stack.h:37 [inline]
     run_sysvec_on_irqstack_cond arch/x86/include/asm/irq_stack.h:89 [inline]
     sysvec_apic_timer_interrupt+0xbd/0x100 arch/x86/kernel/apic/apic.c:1096
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:629
    RIP: 0010:__raw_spin_unlock_irq include/linux/spinlock_api_smp.h:169 [inline]
    RIP: 0010:_raw_spin_unlock_irq+0x25/0x40 kernel/locking/spinlock.c:199
     spin_unlock_irq include/linux/spinlock.h:404 [inline]
     io_queue_linked_timeout+0x194/0x1f0 fs/io_uring.c:6525
     __io_queue_sqe+0x328/0x1290 fs/io_uring.c:6594
     io_queue_sqe+0x631/0x10d0 fs/io_uring.c:6639
     io_queue_link_head fs/io_uring.c:6650 [inline]
     io_submit_sqe fs/io_uring.c:6697 [inline]
     io_submit_sqes+0x19b5/0x2720 fs/io_uring.c:6960
     __do_sys_io_uring_enter+0x107d/0x1f30 fs/io_uring.c:9443
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Don't free requests from under hrtimer context (softirq) as it may sleep
    or take spinlocks improperly (e.g. non-irq versions).
    
    Cc: stable@vger.kernel.org # 5.6+
    Reported-by: syzbot+81d17233a2b02eafba33@syzkaller.appspotmail.com
    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92782f4d29042eabf8b7d6755918660cbfc723e9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Feb 18 15:17:07 2021 -0800

    ACPICA: Fix race in generic_serial_bus (I2C) and GPIO op_region parameter handling
    
    commit c27f3d011b08540e68233cf56274fdc34bebb9b5 upstream.
    
    ACPICA commit c9e0116952363b0fa815143dca7e9a2eb4fefa61
    
    The handling of the generic_serial_bus (I2C) and GPIO op_regions in
    acpi_ev_address_space_dispatch() passes a number of extra parameters
    to the address-space handler through the address-space Context pointer
    (instead of using more function parameters).
    
    The Context is shared between threads, so if multiple threads try to
    call the handler for the same address-space at the same time, then
    a second thread could change the parameters of a first thread while
    the handler is running for the first thread.
    
    An example of this race hitting is the Lenovo Yoga Tablet2 1015L,
    where there are both attrib_bytes accesses and attrib_byte accesses
    to the same address-space. The attrib_bytes access stores the number
    of bytes to transfer in Context->access_length. Where as for the
    attrib_byte access the number of bytes to transfer is always 1 and
    field_obj->Field.access_length is unused (so 0). Both types of
    accesses racing from different threads leads to the following problem:
    
     1. Thread a. starts an attrib_bytes access, stores a non 0 value
        from field_obj->Field.access_length in Context->access_length
    
     2. Thread b. starts an attrib_byte access, stores 0 in
        Context->access_length
    
     3. Thread a. calls i2c_acpi_space_handler() (under Linux). Which
        sees that the access-type is ACPI_GSB_ACCESS_ATTRIB_MULTIBYTE
        and calls acpi_gsb_i2c_read_bytes(..., Context->access_length)
    
     4. At this point Context->access_length is 0 (set by thread b.)
    
    rather then the field_obj->Field.access_length value from thread a.
    This 0 length reads leads to the following errors being logged:
    
     i2c i2c-0: adapter quirk: no zero length (addr 0x0078, size 0, read)
     i2c i2c-0: i2c read 0 bytes from client@0x78 starting at reg 0x0 failed, error: -95
    
    Note this is just an example of the problems which this race can cause.
    
    There are likely many more (sporadic) problems caused by this race.
    
    This commit adds a new context_mutex to struct acpi_object_addr_handler
    and makes acpi_ev_address_space_dispatch() take that mutex when
    using the shared Context to pass extra parameters to an address-space
    handler, fixing this race.
    
    Note the new mutex must be taken *after* exiting the interpreter,
    therefor the existing acpi_ex_exit_interpreter() call is moved to above
    the code which stores the extra parameters in the Context.
    
    Link: https://github.com/acpica/acpica/commit/c9e01169
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
