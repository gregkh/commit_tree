commit ec9c6b417e271ee76d1430d2b197794858238d3b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 10 12:37:34 2020 +0100

    Linux 5.4.76
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201109125022.614792961@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3d60c695712781268addd7c6bbdb953744c98a9
Author: Pali Rohár <pali@kernel.org>
Date:   Mon Sep 7 13:27:17 2020 +0200

    arm64: dts: marvell: espressobin: Add ethernet switch aliases
    
    commit b64d814257b027e29a474bcd660f6372490138c7 upstream.
    
    Espressobin boards have 3 ethernet ports and some of them got assigned more
    then one MAC address. MAC addresses are stored in U-Boot environment.
    
    Since commit a2c7023f7075c ("net: dsa: read mac address from DT for slave
    device") kernel can use MAC addresses from DT for particular DSA port.
    
    Currently Espressobin DTS file contains alias just for ethernet0.
    
    This patch defines additional ethernet aliases in Espressobin DTS files, so
    bootloader can fill correct MAC address for DSA switch ports if more MAC
    addresses were specified.
    
    DT alias ethernet1 is used for wan port, DT aliases ethernet2 and ethernet3
    are used for lan ports for both Espressobin revisions (V5 and V7).
    
    Fixes: 5253cb8c00a6f ("arm64: dts: marvell: espressobin: add ethernet alias")
    Cc: <stable@vger.kernel.org> # a2c7023f7075c: dsa: read mac address
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Andre Heider <a.heider@gmail.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    [pali: Backported Espressobin rev V5 changes to 5.4 and 4.19 versions]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7f7474b392194530d1ec07203c8668e81b7fdb9
Author: kiyin(尹亮) <kiyin@tencent.com>
Date:   Wed Nov 4 08:23:22 2020 +0300

    perf/core: Fix a memory leak in perf_event_parse_addr_filter()
    
    commit 7bdb157cdebbf95a1cd94ed2e01b338714075d00 upstream.
    
    As shown through runtime testing, the "filename" allocation is not
    always freed in perf_event_parse_addr_filter().
    
    There are three possible ways that this could happen:
    
     - It could be allocated twice on subsequent iterations through the loop,
     - or leaked on the success path,
     - or on the failure path.
    
    Clean up the code flow to make it obvious that 'filename' is always
    freed in the reallocation path and in the two return paths as well.
    
    We rely on the fact that kfree(NULL) is NOP and filename is initialized
    with NULL.
    
    This fixes the leak. No other side effects expected.
    
    [ Dan Carpenter: cleaned up the code flow & added a changelog. ]
    [ Ingo Molnar: updated the changelog some more. ]
    
    Fixes: 375637bc5249 ("perf/core: Introduce address range filtering")
    Signed-off-by: "kiyin(尹亮)" <kiyin@tencent.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: "Srivatsa S. Bhat" <srivatsa@csail.mit.edu>
    Cc: Anthony Liguori <aliguori@amazon.com>
    --
     kernel/events/core.c |   12 +++++-------
     1 file changed, 5 insertions(+), 7 deletions(-)
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21ab13af8c507b36ccea18d8d1f1c731ee623a9a
Author: Andy Strohman <astroh@amazon.com>
Date:   Thu Nov 5 20:28:50 2020 +0000

    xfs: flush for older, xfs specific ioctls
    
    837a6e7f5cdb ("fs: add generic UNRESVSP and ZERO_RANGE ioctl handlers") changed
    ioctls XFS_IOC_UNRESVSP XFS_IOC_UNRESVSP64 and XFS_IOC_ZERO_RANGE to be generic
    instead of xfs specific.
    
    Because of this change, 36f11775da75 ("xfs: properly serialise fallocate against
    AIO+DIO") needed adaptation, as 5.4 still uses the xfs specific ioctls.
    
    Without this, xfstests xfs/242 and xfs/290 fail. Both of these tests test
    XFS_IOC_ZERO_RANGE.
    
    Fixes: 36f11775da75 ("xfs: properly serialise fallocate against AIO+DIO")
    Tested-by: Andy Strohman <astroh@amazon.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258d01b1577e98feda9cb3d4f141aa318e59b715
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Oct 22 17:38:22 2020 +0200

    PM: runtime: Resume the device earlier in __device_release_driver()
    
    commit 9226c504e364158a17a68ff1fe9d67d266922f50 upstream.
    
    Since the device is resumed from runtime-suspend in
    __device_release_driver() anyway, it is better to do that before
    looking for busy managed device links from it to consumers, because
    if there are any, device_links_unbind_consumers() will be called
    and it will cause the consumer devices' drivers to unbind, so the
    consumer devices will be runtime-resumed.  In turn, resuming each
    consumer device will cause the supplier to be resumed and when the
    runtime PM references from the given consumer to it are dropped, it
    may be suspended.  Then, the runtime-resume of the next consumer
    will cause the supplier to resume again and so on.
    
    Update the code accordingly.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Fixes: 9ed9895370ae ("driver core: Functional dependencies tracking support")
    Cc: All applicable <stable@vger.kernel.org> # All applicable
    Tested-by: Xiang Chen <chenxiang66@hisilicon.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37f75c6aa8ddfea0bb9d6823c24b0da398a649d0
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Oct 21 21:13:10 2020 +0200

    PM: runtime: Drop pm_runtime_clean_up_links()
    
    commit d6e36668598154820177bfd78c1621d8e6c580a2 upstream.
    
    After commit d12544fb2aa9 ("PM: runtime: Remove link state checks in
    rpm_get/put_supplier()") nothing prevents the consumer device's
    runtime PM from acquiring additional references to the supplier
    device after pm_runtime_clean_up_links() has run (or even while it
    is running), so calling this function from __device_release_driver()
    may be pointless (or even harmful).
    
    Moreover, it ignores stateless device links, so the runtime PM
    handling of managed and stateless device links is inconsistent
    because of it, so better get rid of it entirely.
    
    Fixes: d12544fb2aa9 ("PM: runtime: Remove link state checks in rpm_get/put_supplier()")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Tested-by: Xiang Chen <chenxiang66@hisilicon.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 874dfb5c6aa3001b8528eb5b0ac57cdabc6a41e8
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Oct 21 21:12:15 2020 +0200

    PM: runtime: Drop runtime PM references to supplier on link removal
    
    commit e0e398e204634db8fb71bd89cf2f6e3e5bd09b51 upstream.
    
    While removing a device link, drop the supplier device's runtime PM
    usage counter as many times as needed to drop all of the runtime PM
    references to it from the consumer in addition to dropping the
    consumer's link count.
    
    Fixes: baa8809f6097 ("PM / runtime: Optimize the use of device links")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Tested-by: Xiang Chen <chenxiang66@hisilicon.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbfca92c7840db5f4a980b111789ab0a7af745ef
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue Oct 27 15:01:17 2020 -0700

    ARC: stack unwinding: avoid indefinite looping
    
    commit 328d2168ca524d501fc4b133d6be076142bd305c upstream.
    
    Currently stack unwinder is a while(1) loop which relies on the dwarf
    unwinder to signal termination, which in turn relies on dwarf info to do
    so. This in theory could cause an infinite loop if the dwarf info was
    somehow messed up or the register contents were etc.
    
    This fix thus detects the excessive looping and breaks the loop.
    
    | Mem: 26184K used, 1009136K free, 0K shrd, 0K buff, 14416K cached
    | CPU:  0.0% usr 72.8% sys  0.0% nic 27.1% idle  0.0% io  0.0% irq  0.0% sirq
    | Load average: 4.33 2.60 1.11 2/74 139
    |   PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND
    |   133     2 root     SWN      0  0.0   3 22.9 [rcu_torture_rea]
    |   132     2 root     SWN      0  0.0   0 22.0 [rcu_torture_rea]
    |   131     2 root     SWN      0  0.0   3 21.5 [rcu_torture_rea]
    |   126     2 root     RW       0  0.0   2  5.4 [rcu_torture_wri]
    |   129     2 root     SWN      0  0.0   0  0.2 [rcu_torture_fak]
    |   137     2 root     SW       0  0.0   0  0.2 [rcu_torture_cbf]
    |   127     2 root     SWN      0  0.0   0  0.1 [rcu_torture_fak]
    |   138   115 root     R     1464  0.1   2  0.1 top
    |   130     2 root     SWN      0  0.0   0  0.1 [rcu_torture_fak]
    |   128     2 root     SWN      0  0.0   0  0.1 [rcu_torture_fak]
    |   115     1 root     S     1472  0.1   1  0.0 -/bin/sh
    |   104     1 root     S     1464  0.1   0  0.0 inetd
    |     1     0 root     S     1456  0.1   2  0.0 init
    |    78     1 root     S     1456  0.1   0  0.0 syslogd -O /var/log/messages
    |   134     2 root     SW       0  0.0   2  0.0 [rcu_torture_sta]
    |    10     2 root     IW       0  0.0   1  0.0 [rcu_preempt]
    |    88     2 root     IW       0  0.0   1  0.0 [kworker/1:1-eve]
    |    66     2 root     IW       0  0.0   2  0.0 [kworker/2:2-eve]
    |    39     2 root     IW       0  0.0   2  0.0 [kworker/2:1-eve]
    | unwinder looping too long, aborting !
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d61edc06002f6448b863bfa8d164c5fbc64de509
Author: Boris Brezillon <boris.brezillon@collabora.com>
Date:   Sun Nov 1 18:40:16 2020 +0100

    drm/panfrost: Fix a deadlock between the shrinker and madvise path
    
    commit 7d2d6d01293e6d9b42a6cb410be4158571f7fe9d upstream.
    
    panfrost_ioctl_madvise() and panfrost_gem_purge() acquire the mappings
    and shmem locks in different orders, thus leading to a potential
    the mappings lock first.
    
    Fixes: bdefca2d8dc0 ("drm/panfrost: Add the panfrost_gem_mapping concept")
    Cc: <stable@vger.kernel.org>
    Cc: Christian Hewitt <christianshewitt@gmail.com>
    Reported-by: Christian Hewitt <christianshewitt@gmail.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201101174016.839110-1-boris.brezillon@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9d91fa921642581ef749f4f6ee2b90f0dba9710
Author: Macpaul Lin <macpaul.lin@mediatek.com>
Date:   Fri Nov 6 13:54:29 2020 +0800

    usb: mtu3: fix panic in mtu3_gadget_stop()
    
    commit 20914919ad31849ee2b9cfe0428f4a20335c9e2a upstream.
    
    This patch fixes a possible issue when mtu3_gadget_stop()
    already assigned NULL to mtu->gadget_driver during mtu_gadget_disconnect().
    
    [<ffffff9008161974>] notifier_call_chain+0xa4/0x128
    [<ffffff9008161fd4>] __atomic_notifier_call_chain+0x84/0x138
    [<ffffff9008162ec0>] notify_die+0xb0/0x120
    [<ffffff900809e340>] die+0x1f8/0x5d0
    [<ffffff90080d03b4>] __do_kernel_fault+0x19c/0x280
    [<ffffff90080d04dc>] do_bad_area+0x44/0x140
    [<ffffff90080d0f9c>] do_translation_fault+0x4c/0x90
    [<ffffff9008080a78>] do_mem_abort+0xb8/0x258
    [<ffffff90080849d0>] el1_da+0x24/0x3c
    [<ffffff9009bde01c>] mtu3_gadget_disconnect+0xac/0x128
    [<ffffff9009bd576c>] mtu3_irq+0x34c/0xc18
    [<ffffff90082ac03c>] __handle_irq_event_percpu+0x2ac/0xcd0
    [<ffffff90082acae0>] handle_irq_event_percpu+0x80/0x138
    [<ffffff90082acc44>] handle_irq_event+0xac/0x148
    [<ffffff90082b71cc>] handle_fasteoi_irq+0x234/0x568
    [<ffffff90082a8708>] generic_handle_irq+0x48/0x68
    [<ffffff90082a96ac>] __handle_domain_irq+0x264/0x1740
    [<ffffff90080819f4>] gic_handle_irq+0x14c/0x250
    [<ffffff9008084cec>] el1_irq+0xec/0x194
    [<ffffff90085b985c>] dma_pool_alloc+0x6e4/0xae0
    [<ffffff9008d7f890>] cmdq_mbox_pool_alloc_impl+0xb0/0x238
    [<ffffff9008d80904>] cmdq_pkt_alloc_buf+0x2dc/0x7c0
    [<ffffff9008d80f60>] cmdq_pkt_add_cmd_buffer+0x178/0x270
    [<ffffff9008d82320>] cmdq_pkt_perf_begin+0x108/0x148
    [<ffffff9008d824d8>] cmdq_pkt_create+0x178/0x1f0
    [<ffffff9008f96230>] mtk_crtc_config_default_path+0x328/0x7a0
    [<ffffff90090246cc>] mtk_drm_idlemgr_kick+0xa6c/0x1460
    [<ffffff9008f9bbb4>] mtk_drm_crtc_atomic_begin+0x1a4/0x1a68
    [<ffffff9008e8df9c>] drm_atomic_helper_commit_planes+0x154/0x878
    [<ffffff9008f2fb70>] mtk_atomic_complete.isra.16+0xe80/0x19c8
    [<ffffff9008f30910>] mtk_atomic_commit+0x258/0x898
    [<ffffff9008ef142c>] drm_atomic_commit+0xcc/0x108
    [<ffffff9008ef7cf0>] drm_mode_atomic_ioctl+0x1c20/0x2580
    [<ffffff9008ebc768>] drm_ioctl_kernel+0x118/0x1b0
    [<ffffff9008ebcde8>] drm_ioctl+0x5c0/0x920
    [<ffffff900863b030>] do_vfs_ioctl+0x188/0x1820
    [<ffffff900863c754>] SyS_ioctl+0x8c/0xa0
    
    Fixes: df2069acb005 ("usb: Add MediaTek USB3 DRD driver")
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Acked-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1604642069-20961-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0d03a1bdb3cd35d483eea25f860b688f906ffb1
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Nov 2 09:58:21 2020 -0500

    USB: Add NO_LPM quirk for Kingston flash drive
    
    commit afaa2e745a246c5ab95103a65b1ed00101e1bc63 upstream.
    
    In Bugzilla #208257, Julien Humbert reports that a 32-GB Kingston
    flash drive spontaneously disconnects and reconnects, over and over.
    Testing revealed that disabling Link Power Management for the drive
    fixed the problem.
    
    This patch adds a quirk entry for that drive to turn off LPM permanently.
    
    CC: Hans de Goede <jwrdegoede@fedoraproject.org>
    CC: <stable@vger.kernel.org>
    Reported-and-tested-by: Julien Humbert <julroy67@gmail.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201102145821.GA1478741@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 290fcf3e0c0c825cf89101f4b2c0c2d9717f0ca8
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Oct 22 15:44:59 2020 -0700

    usb: dwc3: ep0: Fix delay status handling
    
    commit fa27e2f6c5e674f3f1225f9ca7a7821faaf393bb upstream.
    
    If we want to send a control status on our own time (through
    delayed_status), make sure to handle a case where we may queue the
    delayed status before the host requesting for it (when XferNotReady
    is generated). Otherwise, the driver won't send anything because it's
    not EP0_STATUS_PHASE yet. To resolve this, regardless whether
    dwc->ep0state is EP0_STATUS_PHASE, make sure to clear the
    dwc->delayed_status flag if dwc3_ep0_send_delayed_status() is called.
    The control status can be sent when the host requests it later.
    
    Cc: <stable@vger.kernel.org>
    Fixes: d97c78a1908e ("usb: dwc3: gadget: END_TRANSFER before CLEAR_STALL command")
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86875e1d6426ac1308c969abd1eb0eaf24ab40b4
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Oct 23 04:34:29 2020 +0300

    tty: serial: fsl_lpuart: LS1021A has a FIFO size of 16 words, like LS1028A
    
    commit c97f2a6fb3dfbfbbc88edc8ea62ef2b944e18849 upstream.
    
    Prior to the commit that this one fixes, the FIFO size was derived from
    the read-only register LPUARTx_FIFO[TXFIFOSIZE] using the following
    formula:
    
    TX FIFO size = 2 ^ (LPUARTx_FIFO[TXFIFOSIZE] - 1)
    
    The documentation for LS1021A is a mess. Under chapter 26.1.3 LS1021A
    LPUART module special consideration, it mentions TXFIFO_SZ and RXFIFO_SZ
    being equal to 4, and in the register description for LPUARTx_FIFO, it
    shows the out-of-reset value of TXFIFOSIZE and RXFIFOSIZE fields as "011",
    even though these registers read as "101" in reality.
    
    And when LPUART on LS1021A was working, the "101" value did correspond
    to "16 datawords", by applying the formula above, even though the
    documentation is wrong again (!!!!) and says that "101" means 64 datawords
    (hint: it doesn't).
    
    So the "new" formula created by commit f77ebb241ce0 has all the premises
    of being wrong for LS1021A, because it relied only on false data and no
    actual experimentation.
    
    Interestingly, in commit c2f448cff22a ("tty: serial: fsl_lpuart: add
    LS1028A support"), Michael Walle applied a workaround to this by manually
    setting the FIFO widths for LS1028A. It looks like the same values are
    used by LS1021A as well, in fact.
    
    When the driver thinks that it has a deeper FIFO than it really has,
    getty (user space) output gets truncated.
    
    Many thanks to Michael for pointing out where to look.
    
    Fixes: f77ebb241ce0 ("tty: serial: fsl_lpuart: correct the FIFO depth size")
    Suggested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Link: https://lore.kernel.org/r/20201023013429.3551026-1-vladimir.oltean@nxp.com
    Reviewed-by：Fugang Duan <fugang.duan@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8febdfb5973db600c998b5e65d7cdf3cd250de39
Author: Michael Walle <michael@walle.cc>
Date:   Fri Mar 6 22:44:32 2020 +0100

    tty: serial: fsl_lpuart: add LS1028A support
    
    commit c2f448cff22a7ed09281f02bde084b0ce3bc61ed upstream.
    
    The LS1028A uses little endian register access and has a different FIFO
    size encoding.
    
    Signed-off-by: Michael Walle <michael@walle.cc>
    Link: https://lore.kernel.org/r/20200306214433.23215-4-michael@walle.cc
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5d3cca9d61f518e3c031fb7908291e76d7e4a1f
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Tue Nov 3 13:44:25 2020 +0100

    USB: serial: option: add Telit FN980 composition 0x1055
    
    commit db0362eeb22992502764e825c79b922d7467e0eb upstream.
    
    Add the following Telit FN980 composition:
    
    0x1055: tty, adb, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20201103124425.12940-1-dnlplm@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f7be9341b860608d20acaa4e1402e316b000e91
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Sat Oct 31 23:54:58 2020 +0100

    USB: serial: option: add LE910Cx compositions 0x1203, 0x1230, 0x1231
    
    commit 489979b4aab490b6b917c11dc02d81b4b742784a upstream.
    
    Add following Telit LE910Cx compositions:
    
    0x1203: rndis, tty, adb, tty, tty, tty, tty
    0x1230: tty, adb, rmnet, audio, tty, tty, tty, tty
    0x1231: rndis, tty, adb, audio, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20201031225458.10512-1-dnlplm@gmail.com
    [ johan: add comments after entries ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7f74775c2bb7037b811cf531235acf1ecacd4fb
Author: Ziyi Cao <kernel@septs.pw>
Date:   Tue Oct 20 00:08:06 2020 +0800

    USB: serial: option: add Quectel EC200T module support
    
    commit a46b973bced1ba57420752bf38426acd9f6cbfa6 upstream.
    
    Add usb product id of the Quectel EC200T module.
    
    Signed-off-by: Ziyi Cao <kernel@septs.pw>
    Link: https://lore.kernel.org/r/17f8a2a3-ce0f-4be7-8544-8fdf286907d0@www.fastmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d34dbab6ef4cd3494b8127d8883100f67e0e4a9
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 26 09:25:48 2020 +0100

    USB: serial: cyberjack: fix write-URB completion race
    
    commit 985616f0457d9f555fff417d0da56174f70cc14f upstream.
    
    The write-URB busy flag was being cleared before the completion handler
    was done with the URB, something which could lead to corrupt transfers
    due to a racing write request if the URB is resubmitted.
    
    Fixes: 507ca9bc0476 ("[PATCH] USB: add ability for usb-serial drivers to determine if their write urb is currently being used.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62c4b2b21e3b6dcfc3659c8c22027a8888dd0814
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Nov 3 16:49:42 2020 +0800

    serial: txx9: add missing platform_driver_unregister() on error in serial_txx9_init
    
    commit 0c5fc92622ed5531ff324b20f014e9e3092f0187 upstream.
    
    Add the missing platform_driver_unregister() before return
    from serial_txx9_init in the error handling case when failed
    to register serial_txx9_pci_driver with macro ENABLE_SERIAL_TXX9_PCI
    defined.
    
    Fixes: ab4382d27412 ("tty: move drivers/serial/ to drivers/tty/serial/")
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Link: https://lore.kernel.org/r/20201103084942.109076-1-miaoqinglang@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 085fc4784e4bf7799eb23a6ed202d14fb5b75029
Author: Claire Chang <tientzu@chromium.org>
Date:   Mon Nov 2 20:07:49 2020 +0800

    serial: 8250_mtk: Fix uart_get_baud_rate warning
    
    commit 912ab37c798770f21b182d656937072b58553378 upstream.
    
    Mediatek 8250 port supports speed higher than uartclk / 16. If the baud
    rates in both the new and the old termios setting are higher than
    uartclk / 16, the WARN_ON in uart_get_baud_rate() will be triggered.
    Passing NULL as the old termios so uart_get_baud_rate() will use
    uartclk / 16 - 1 as the new baud rate which will be replaced by the
    original baud rate later by tty_termios_encode_baud_rate() in
    mtk8250_set_termios().
    
    Fixes: 551e553f0d4a ("serial: 8250_mtk: Fix high-speed baud rates clamping")
    Signed-off-by: Claire Chang <tientzu@chromium.org>
    Link: https://lore.kernel.org/r/20201102120749.374458-1-tientzu@chromium.org
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33a1039564c1052032e6ab27d35af13dc4ec7e0
Author: Harald Freudenberger <freude@linux.ibm.com>
Date:   Tue Sep 15 11:00:17 2020 +0200

    s390/pkey: fix paes selftest failure with paes and pkey static build
    
    commit 5b35047eb467c8cdd38a31beb9ac109221777843 upstream.
    
    When both the paes and the pkey kernel module are statically build
    into the kernel, the paes cipher selftests run before the pkey
    kernel module is initialized. So a static variable set in the pkey
    init function and used in the pkey_clr2protkey function is not
    initialized when the paes cipher's selftests request to call pckmo for
    transforming a clear key value into a protected key.
    
    This patch moves the initial setup of the static variable into
    the function pck_clr2protkey. So it's possible, to use the function
    for transforming a clear to a protected key even before the pkey
    init function has been called and the paes selftests may run
    successful.
    
    Reported-by: Alexander Egorenkov <Alexander.Egorenkov@ibm.com>
    Cc: <stable@vger.kernel.org> # 4.20
    Fixes: f822ad2c2c03 ("s390/pkey: move pckmo subfunction available checks away from module init")
    Signed-off-by: Harald Freudenberger <freude@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit beeb658cfd3544ceca894375c36b6572e4ae7a5f
Author: Eddy Wu <itseddy0402@gmail.com>
Date:   Sat Nov 7 14:47:22 2020 +0800

    fork: fix copy_process(CLONE_PARENT) race with the exiting ->real_parent
    
    commit b4e00444cab4c3f3fec876dc0cccc8cbb0d1a948 upstream.
    
    current->group_leader->exit_signal may change during copy_process() if
    current->real_parent exits.
    
    Move the assignment inside tasklist_lock to avoid the race.
    
    Signed-off-by: Eddy Wu <eddy_wu@trendmicro.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 642181fe3567419d84d2457b58f262c37467f525
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Nov 8 16:38:06 2020 +0100

    vt: Disable KD_FONT_OP_COPY
    
    commit 3c4e0dff2095c579b142d5a0693257f1c58b4804 upstream.
    
    It's buggy:
    
    On Fri, Nov 06, 2020 at 10:30:08PM +0800, Minh Yuan wrote:
    > We recently discovered a slab-out-of-bounds read in fbcon in the latest
    > kernel ( v5.10-rc2 for now ).  The root cause of this vulnerability is that
    > "fbcon_do_set_font" did not handle "vc->vc_font.data" and
    > "vc->vc_font.height" correctly, and the patch
    > <https://lkml.org/lkml/2020/9/27/223> for VT_RESIZEX can't handle this
    > issue.
    >
    > Specifically, we use KD_FONT_OP_SET to set a small font.data for tty6, and
    > use  KD_FONT_OP_SET again to set a large font.height for tty1. After that,
    > we use KD_FONT_OP_COPY to assign tty6's vc_font.data to tty1's vc_font.data
    > in "fbcon_do_set_font", while tty1 retains the original larger
    > height. Obviously, this will cause an out-of-bounds read, because we can
    > access a smaller vc_font.data with a larger vc_font.height.
    
    Further there was only one user ever.
    - Android's loadfont, busybox and console-tools only ever use OP_GET
      and OP_SET
    - fbset documentation only mentions the kernel cmdline font: option,
      not anything else.
    - systemd used OP_COPY before release 232 published in Nov 2016
    
    Now unfortunately the crucial report seems to have gone down with
    gmane, and the commit message doesn't say much. But the pull request
    hints at OP_COPY being broken
    
    https://github.com/systemd/systemd/pull/3651
    
    So in other words, this never worked, and the only project which
    foolishly every tried to use it, realized that rather quickly too.
    
    Instead of trying to fix security issues here on dead code by adding
    missing checks, fix the entire thing by removing the functionality.
    
    Note that systemd code using the OP_COPY function ignored the return
    value, so it doesn't matter what we're doing here really - just in
    case a lone server somewhere happens to be extremely unlucky and
    running an affected old version of systemd. The relevant code from
    font_copy_to_all_vcs() in systemd was:
    
            /* copy font from active VT, where the font was uploaded to */
            cfo.op = KD_FONT_OP_COPY;
            cfo.height = vcs.v_active-1; /* tty1 == index 0 */
            (void) ioctl(vcfd, KDFONTOP, &cfo);
    
    Note this just disables the ioctl, garbage collecting the now unused
    callbacks is left for -next.
    
    v2: Tetsuo found the old mail, which allowed me to find it on another
    archive. Add the link too.
    
    Acked-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    References: https://lists.freedesktop.org/archives/systemd-devel/2016-June/036935.html
    References: https://github.com/systemd/systemd/pull/3651
    Cc: Greg KH <greg@kroah.com>
    Cc: Peilin Ye <yepeilin.cs@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: https://lore.kernel.org/r/20201108153806.3140315-1-daniel.vetter@ffwll.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfd9d7137759127d67adf5b1f9a7b171a1bac52f
Author: Sasha Levin <sashal@kernel.org>
Date:   Sun Nov 8 08:28:09 2020 -0500

    Revert "coresight: Make sysfs functional on topologies with per core sink"
    
    This reverts commit 8fd52a21ab570e80f84f39e12affce42a5300e91.
    
    Guenter Roeck <linux@roeck-us.net> writes:
    
    I get the following build warning in v5.4.75.
    
    drivers/hwtracing/coresight/coresight-etm-perf.c: In function 'etm_setup_aux':
    drivers/hwtracing/coresight/coresight-etm-perf.c:226:37: warning:
                            passing argument 1 of 'coresight_get_enabled_sink' makes pointer from integer without a cast
    
    Actually, the warning is fatal, since the call is
            sink = coresight_get_enabled_sink(true);
    However, the argument to coresight_get_enabled_sink() is now a pointer.
    The parameter change was introduced with commit 8fd52a21ab57
    ("coresight: Make sysfs functional on topologies with per core sink").
    
    In the upstream kernel, the call is removed with commit bb1860efc817
    ("coresight: etm: perf: Sink selection using sysfs is deprecated").
    That commit alone would, however, likely not solve the problem.
    It looks like at least two more commits would be needed.
    
    716f5652a131 coresight: etm: perf: Fix warning caused by etm_setup_aux failure
    8e264c52e1da coresight: core: Allow the coresight core driver to be built as a module
    39a7661dcf65 coresight: Fix uninitialised pointer bug in etm_setup_aux()
    
    Looking into the coresight code, I see several additional commits affecting
    the sysfs interface since v5.4. I have no idea what would actually be needed
    for stable code in v5.4.y, short of applying them all.
    
    With all this in mind, I would suggest to revert commit 8fd52a21ab57
    ("coresight: Make sysfs functional on topologies with per core sink")
    from v5.4.y, especially since it is not marked as bug fix or for stable.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ee6a0f25457605e4f2c72dddebd1f73f7140fab
Author: Qian Cai <cai@redhat.com>
Date:   Wed Oct 28 14:26:14 2020 -0400

    arm64/smp: Move rcu_cpu_starting() earlier
    
    [ Upstream commit ce3d31ad3cac765484463b4f5a0b6b1f8f1a963e ]
    
    The call to rcu_cpu_starting() in secondary_start_kernel() is not early
    enough in the CPU-hotplug onlining process, which results in lockdep
    splats as follows:
    
     WARNING: suspicious RCU usage
     -----------------------------
     kernel/locking/lockdep.c:3497 RCU-list traversed in non-reader section!!
    
     other info that might help us debug this:
    
     RCU used illegally from offline CPU!
     rcu_scheduler_active = 1, debug_locks = 1
     no locks held by swapper/1/0.
    
     Call trace:
      dump_backtrace+0x0/0x3c8
      show_stack+0x14/0x60
      dump_stack+0x14c/0x1c4
      lockdep_rcu_suspicious+0x134/0x14c
      __lock_acquire+0x1c30/0x2600
      lock_acquire+0x274/0xc48
      _raw_spin_lock+0xc8/0x140
      vprintk_emit+0x90/0x3d0
      vprintk_default+0x34/0x40
      vprintk_func+0x378/0x590
      printk+0xa8/0xd4
      __cpuinfo_store_cpu+0x71c/0x868
      cpuinfo_store_cpu+0x2c/0xc8
      secondary_start_kernel+0x244/0x318
    
    This is avoided by moving the call to rcu_cpu_starting up near the
    beginning of the secondary_start_kernel() function.
    
    Signed-off-by: Qian Cai <cai@redhat.com>
    Acked-by: Paul E. McKenney <paulmck@kernel.org>
    Link: https://lore.kernel.org/lkml/160223032121.7002.1269740091547117869.tip-bot2@tip-bot2/
    Link: https://lore.kernel.org/r/20201028182614.13655-1-cai@redhat.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eceb94287dbf239848f18875429eaa0a076ff146
Author: Karol Herbst <kherbst@redhat.com>
Date:   Wed Oct 7 00:08:09 2020 +0200

    drm/nouveau/gem: fix "refcount_t: underflow; use-after-free"
    
    [ Upstream commit 925681454d7b557d404b5d28ef4469fac1b2e105 ]
    
    we can't use nouveau_bo_ref here as no ttm object was allocated and
    nouveau_bo_ref mainly deals with that. Simply deallocate the object.
    
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d0de6f87257187495b17d31591959262ebe6b7e
Author: Ralph Campbell <rcampbell@nvidia.com>
Date:   Mon Aug 31 13:31:11 2020 -0700

    drm/nouveau/nouveau: fix the start/end range for migration
    
    [ Upstream commit cfa736f5a6f31ca8a05459b5720aac030247ad1b ]
    
    The user level OpenCL code shouldn't have to align start and end
    addresses to a page boundary. That is better handled in the nouveau
    driver. The npages field is also redundant since it can be computed
    from the start and end addresses.
    
    Signed-off-by: Ralph Campbell <rcampbell@nvidia.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dab0fd40323f55c94c2377cf29aaac1b4408176
Author: Peter Chen <peter.chen@nxp.com>
Date:   Thu Oct 22 08:55:03 2020 +0800

    usb: cdns3: gadget: suspicious implicit sign extension
    
    [ Upstream commit 5fca3f062879f8e5214c56f3e3e2be6727900f5d ]
    
    The code:
    trb->length = cpu_to_le32(TRB_BURST_LEN(priv_ep->trb_burst_size)
                    | TRB_LEN(length));
    
    TRB_BURST_LEN(priv_ep->trb_burst_size) may be overflow for int 32 if
    priv_ep->trb_burst_size is equal or larger than 0x80;
    
    Below is the Coverity warning:
    sign_extension: Suspicious implicit sign extension: priv_ep->trb_burst_size
    with type u8 (8 bits, unsigned) is promoted in priv_ep->trb_burst_size << 24
    to type int (32 bits, signed), then sign-extended to type unsigned long
    (64 bits, unsigned). If priv_ep->trb_burst_size << 24 is greater than 0x7FFFFFFF,
    the upper bits of the result will all be 1.
    
    To fix it, it needs to add an explicit cast to unsigned int type for ((p) << 24).
    
    Reviewed-by: Jun Li <jun.li@nxp.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 937753df482c57b7e761411bcb257a5f0e410d16
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Oct 27 21:49:01 2020 +0800

    ACPI: NFIT: Fix comparison to '-ENXIO'
    
    [ Upstream commit 85f971b65a692b68181438e099b946cc06ed499b ]
    
    Initial value of rc is '-ENXIO', and we should
    use the initial value to check it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    [ rjw: Subject edit ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16476c2b26caf75bf64d558e4f511fef0c67b8e9
Author: Hoegeun Kwon <hoegeun.kwon@samsung.com>
Date:   Tue Oct 27 13:14:42 2020 +0900

    drm/vc4: drv: Add error handding for bind
    
    [ Upstream commit 9ce0af3e9573fb84c4c807183d13ea2a68271e4b ]
    
    There is a problem that if vc4_drm bind fails, a memory leak occurs on
    the drm_property_create side. Add error handding for drm_mode_config.
    
    Signed-off-by: Hoegeun Kwon <hoegeun.kwon@samsung.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201027041442.30352-2-hoegeun.kwon@samsung.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a04cec1dd2937880895364a0ccade0e5e4d51683
Author: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date:   Thu Oct 22 16:58:21 2020 -0700

    nvmet: fix a NULL pointer dereference when tracing the flush command
    
    [ Upstream commit 3c3751f2daf6675f6b5bee83b792354c272f5bd2 ]
    
    When target side trace in turned on and flush command is issued from the
    host it results in the following Oops.
    
    [  856.789724] BUG: kernel NULL pointer dereference, address: 0000000000000068
    [  856.790686] #PF: supervisor read access in kernel mode
    [  856.791262] #PF: error_code(0x0000) - not-present page
    [  856.791863] PGD 6d7110067 P4D 6d7110067 PUD 66f0ad067 PMD 0
    [  856.792527] Oops: 0000 [#1] SMP NOPTI
    [  856.792950] CPU: 15 PID: 7034 Comm: nvme Tainted: G           OE     5.9.0nvme-5.9+ #71
    [  856.793790] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e3214
    [  856.794956] RIP: 0010:trace_event_raw_event_nvmet_req_init+0x13e/0x170 [nvmet]
    [  856.795734] Code: 41 5c 41 5d c3 31 d2 31 f6 e8 4e 9b b8 e0 e9 0e ff ff ff 49 8b 55 00 48 8b 38 8b 0
    [  856.797740] RSP: 0018:ffffc90001be3a60 EFLAGS: 00010246
    [  856.798375] RAX: 0000000000000000 RBX: ffff8887e7d2c01c RCX: 0000000000000000
    [  856.799234] RDX: 0000000000000020 RSI: 0000000057e70ea2 RDI: ffff8887e7d2c034
    [  856.800088] RBP: ffff88869f710578 R08: ffff888807500d40 R09: 00000000fffffffe
    [  856.800951] R10: 0000000064c66670 R11: 00000000ef955201 R12: ffff8887e7d2c034
    [  856.801807] R13: ffff88869f7105c8 R14: 0000000000000040 R15: ffff88869f710440
    [  856.802667] FS:  00007f6a22bd8780(0000) GS:ffff888813a00000(0000) knlGS:0000000000000000
    [  856.803635] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  856.804367] CR2: 0000000000000068 CR3: 00000006d73e0000 CR4: 00000000003506e0
    [  856.805283] Call Trace:
    [  856.805613]  nvmet_req_init+0x27c/0x480 [nvmet]
    [  856.806200]  nvme_loop_queue_rq+0xcb/0x1d0 [nvme_loop]
    [  856.806862]  blk_mq_dispatch_rq_list+0x123/0x7b0
    [  856.807459]  ? kvm_sched_clock_read+0x14/0x30
    [  856.808025]  __blk_mq_sched_dispatch_requests+0xc7/0x170
    [  856.808708]  blk_mq_sched_dispatch_requests+0x30/0x60
    [  856.809372]  __blk_mq_run_hw_queue+0x70/0x100
    [  856.809935]  __blk_mq_delay_run_hw_queue+0x156/0x170
    [  856.810574]  blk_mq_run_hw_queue+0x86/0xe0
    [  856.811104]  blk_mq_sched_insert_request+0xef/0x160
    [  856.811733]  blk_execute_rq+0x69/0xc0
    [  856.812212]  ? blk_mq_rq_ctx_init+0xd0/0x230
    [  856.812784]  nvme_execute_passthru_rq+0x57/0x130 [nvme_core]
    [  856.813461]  nvme_submit_user_cmd+0xeb/0x300 [nvme_core]
    [  856.814099]  nvme_user_cmd.isra.82+0x11e/0x1a0 [nvme_core]
    [  856.814752]  blkdev_ioctl+0x1dc/0x2c0
    [  856.815197]  block_ioctl+0x3f/0x50
    [  856.815606]  __x64_sys_ioctl+0x84/0xc0
    [  856.816074]  do_syscall_64+0x33/0x40
    [  856.816533]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  856.817168] RIP: 0033:0x7f6a222ed107
    [  856.817617] Code: 44 00 00 48 8b 05 81 cd 2c 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 2e 8
    [  856.819901] RSP: 002b:00007ffca848f058 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
    [  856.820846] RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f6a222ed107
    [  856.821726] RDX: 00007ffca848f060 RSI: 00000000c0484e43 RDI: 0000000000000003
    [  856.822603] RBP: 0000000000000003 R08: 000000000000003f R09: 0000000000000005
    [  856.823478] R10: 00007ffca848ece0 R11: 0000000000000202 R12: 00007ffca84912d3
    [  856.824359] R13: 00007ffca848f4d0 R14: 0000000000000002 R15: 000000000067e900
    [  856.825236] Modules linked in: nvme_loop(OE) nvmet(OE) nvme_fabrics(OE) null_blk nvme(OE) nvme_corel
    
    Move the nvmet_req_init() tracepoint after we parse the command in
    nvmet_req_init() so that we can get rid of the duplicate
    nvmet_find_namespace() call.
    Rename __assign_disk_name() ->  __assign_req_name(). Now that we call
    tracepoint after parsing the command simplify the newly added
    __assign_req_name() which fixes this bug.
    
    Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c9c03432500dbeac952dcf806f1f7caa348363b
Author: zhenwei pi <pizhenwei@bytedance.com>
Date:   Sun Oct 25 19:51:24 2020 +0800

    nvme-rdma: handle unexpected nvme completion data length
    
    [ Upstream commit 25c1ca6ecaba3b751d3f7ff92d5cddff3b05f8d0 ]
    
    Receiving a zero length message leads to the following warnings because
    the CQE is processed twice:
    
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 0 PID: 0 at lib/refcount.c:28
    
    RIP: 0010:refcount_warn_saturate+0xd9/0xe0
    Call Trace:
     <IRQ>
     nvme_rdma_recv_done+0xf3/0x280 [nvme_rdma]
     __ib_process_cq+0x76/0x150 [ib_core]
     ...
    
    Sanity check the received data length, to avoids this.
    
    Thanks to Chao Leng & Sagi for suggestions.
    
    Signed-off-by: zhenwei pi <pizhenwei@bytedance.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fd9e60760ef30243c883c2556f86bc7e04d18b9
Author: Jeff Vander Stoep <jeffv@google.com>
Date:   Fri Oct 23 16:37:57 2020 +0200

    vsock: use ns_capable_noaudit() on socket create
    
    [ Upstream commit af545bb5ee53f5261db631db2ac4cde54038bdaf ]
    
    During __vsock_create() CAP_NET_ADMIN is used to determine if the
    vsock_sock->trusted should be set to true. This value is used later
    for determing if a remote connection should be allowed to connect
    to a restricted VM. Unfortunately, if the caller doesn't have
    CAP_NET_ADMIN, an audit message such as an selinux denial is
    generated even if the caller does not want a trusted socket.
    
    Logging errors on success is confusing. To avoid this, switch the
    capable(CAP_NET_ADMIN) check to the noaudit version.
    
    Reported-by: Roman Kiryanov <rkir@google.com>
    https://android-review.googlesource.com/c/device/generic/goldfish/+/1468545/
    Signed-off-by: Jeff Vander Stoep <jeffv@google.com>
    Reviewed-by: James Morris <jamorris@linux.microsoft.com>
    Link: https://lore.kernel.org/r/20201023143757.377574-1-jeffv@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2149aa583068d7bc6d9dc05132a8062dc0cfd209
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Sat Oct 24 19:13:55 2020 -0500

    scsi: ibmvscsi: Fix potential race after loss of transport
    
    [ Upstream commit 665e0224a3d76f36da40bd9012270fa629aa42ed ]
    
    After a loss of transport due to an adapter migration or crash/disconnect
    from the host partner there is a tiny window where we can race adjusting
    the request_limit of the adapter. The request limit is atomically
    increased/decreased to track the number of inflight requests against the
    allowed limit of our VIOS partner.
    
    After a transport loss we set the request_limit to zero to reflect this
    state.  However, there is a window where the adapter may attempt to queue a
    command because the transport loss event hasn't been fully processed yet
    and request_limit is still greater than zero.  The hypercall to send the
    event will fail and the error path will increment the request_limit as a
    result.  If the adapter processes the transport event prior to this
    increment the request_limit becomes out of sync with the adapter state and
    can result in SCSI commands being submitted on the now reset connection
    prior to an SRP Login resulting in a protocol violation.
    
    Fix this race by protecting request_limit with the host lock when changing
    the value via atomic_set() to indicate no transport.
    
    Link: https://lore.kernel.org/r/20201025001355.4527-1-tyreld@linux.ibm.com
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1247f4e291888c18f4cd65047c888287206fdc0a
Author: Tianci.Yin <tianci.yin@amd.com>
Date:   Wed Oct 14 17:05:50 2020 +0800

    drm/amdgpu: add DID for navi10 blockchain SKU
    
    [ Upstream commit 8942881144a7365143f196f5eafed24783a424a3 ]
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Guchun Chen <guchun.chen@amd.com>
    Signed-off-by: Tianci.Yin <tianci.yin@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd4fb5080725142dea7b9f88fffec162eae9a5f1
Author: Ming Lei <ming.lei@redhat.com>
Date:   Sat Oct 10 11:25:39 2020 +0800

    scsi: core: Don't start concurrent async scan on same host
    
    [ Upstream commit 831e3405c2a344018a18fcc2665acc5a38c3a707 ]
    
    The current scanning mechanism is supposed to fall back to a synchronous
    host scan if an asynchronous scan is in progress. However, this rule isn't
    strictly respected, scsi_prep_async_scan() doesn't hold scan_mutex when
    checking shost->async_scan. When scsi_scan_host() is called concurrently,
    two async scans on same host can be started and a hang in do_scan_async()
    is observed.
    
    Fixes this issue by checking & setting shost->async_scan atomically with
    shost->scan_mutex.
    
    Link: https://lore.kernel.org/r/20201010032539.426615-1-ming.lei@redhat.com
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Ewan D. Milne <emilne@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c52715ceaaecca7ad4ae0647dc789126890f5cd
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Thu Oct 22 16:58:42 2020 -0400

    blk-cgroup: Pre-allocate tree node on blkg_conf_prep
    
    [ Upstream commit f255c19b3ab46d3cad3b1b2e1036f4c926cb1d0c ]
    
    Similarly to commit 457e490f2b741 ("blkcg: allocate struct blkcg_gq
    outside request queue spinlock"), blkg_create can also trigger
    occasional -ENOMEM failures at the radix insertion because any
    allocation inside blkg_create has to be non-blocking, making it more
    likely to fail.  This causes trouble for userspace tools trying to
    configure io weights who need to deal with this condition.
    
    This patch reduces the occurrence of -ENOMEMs on this path by preloading
    the radix tree element on a GFP_KERNEL context, such that we guarantee
    the later non-blocking insertion won't fail.
    
    A similar solution exists in blkcg_init_queue for the same situation.
    
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f77756ea6641fdb84301c75bcc7434715028628c
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Thu Oct 22 16:58:41 2020 -0400

    blk-cgroup: Fix memleak on error path
    
    [ Upstream commit 52abfcbd57eefdd54737fc8c2dc79d8f46d4a3e5 ]
    
    If new_blkg allocation raced with blk_policy change and
    blkg_lookup_check fails, new_blkg is leaked.
    
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 914fc55242614caf63427fdfae21368ea8cfca32
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Thu Oct 15 11:36:42 2020 +0200

    drm/sun4i: frontend: Fix the scaler phase on A33
    
    [ Upstream commit e3190b5e9462067714d267c40d8c8c1d0463dda3 ]
    
    The A33 has a different phase parameter in the Allwinner BSP on the
    channel1 than the one currently applied. Fix this.
    
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201015093642.261440-3-maxime@cerno.tech
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f743f73f42a77deb4832ec76a2403452429067f2
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Thu Oct 15 11:36:41 2020 +0200

    drm/sun4i: frontend: Reuse the ch0 phase for RGB formats
    
    [ Upstream commit 2db9ef9d9e6ea89a9feb5338f58d1f8f83875577 ]
    
    When using the scaler on the A10-like frontend with single-planar formats,
    the current code will setup the channel 0 filter (used for the R or Y
    component) with a different phase parameter than the channel 1 filter (used
    for the G/B or U/V components).
    
    This creates a bleed out that keeps repeating on of the last line of the
    RGB plane across the rest of the display. The Allwinner BSP either applies
    the same phase parameter over both channels or use a separate one, the
    condition being whether the input format is YUV420 or not.
    
    Since YUV420 is both subsampled and multi-planar, and since YUYV is
    subsampled but single-planar, we can rule out the subsampling and assume
    that the condition is actually whether the format is single or
    multi-planar. And it looks like applying the same phase parameter over both
    channels for single-planar formats fixes our issue, while we keep the
    multi-planar formats working properly.
    
    Reported-by: Taras Galchenko <tpgalchenko@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201015093642.261440-2-maxime@cerno.tech
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d7b41a67687ba3691c7f5057f254743258f4205
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Thu Oct 15 11:36:40 2020 +0200

    drm/sun4i: frontend: Rework a bit the phase data
    
    [ Upstream commit 84c971b356379c621df595bd00c3114579dfa59f ]
    
    The scaler filter phase setup in the allwinner kernel has two different
    cases for setting up the scaler filter, the first one using different phase
    parameters for the two channels, and the second one reusing the first
    channel parameters on the second channel.
    
    The allwinner kernel has a third option where the horizontal phase of the
    second channel will be set to a different value than the vertical one (and
    seems like it's the same value than one used on the first channel).
    However, that code path seems to never be taken, so we can ignore it for
    now, and it's essentially what we're doing so far as well.
    
    Since we will have always the same values across each components of the
    filter setup for a given channel, we can simplify a bit our frontend
    structure by only storing the phase value we want to apply to a given
    channel.
    
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201015093642.261440-1-maxime@cerno.tech
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 147e3743cf7a97d1ccbb941e39b14649f916086c
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Wed Oct 21 11:53:59 2020 +0200

    of: Fix reserved-memory overlap detection
    
    [ Upstream commit ca05f33316559a04867295dd49f85aeedbfd6bfd ]
    
    The reserved-memory overlap detection code fails to detect overlaps if
    either of the regions starts at address 0x0.  The code explicitly checks
    for and ignores such regions, apparently in order to ignore dynamically
    allocated regions which have an address of 0x0 at this point.  These
    dynamically allocated regions also have a size of 0x0 at this point, so
    fix this by removing the check and sorting the dynamically allocated
    regions ahead of any static regions at address 0x0.
    
    For example, there are two overlaps in this case but they are not
    currently reported:
    
            foo@0 {
                    reg = <0x0 0x2000>;
            };
    
            bar@0 {
                    reg = <0x0 0x1000>;
            };
    
            baz@1000 {
                    reg = <0x1000 0x1000>;
            };
    
            quux {
                    size = <0x1000>;
            };
    
    but they are after this patch:
    
     OF: reserved mem: OVERLAP DETECTED!
     bar@0 (0x00000000--0x00001000) overlaps with foo@0 (0x00000000--0x00002000)
     OF: reserved mem: OVERLAP DETECTED!
     foo@0 (0x00000000--0x00002000) overlaps with baz@1000 (0x00001000--0x00002000)
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Link: https://lore.kernel.org/r/ded6fd6b47b58741aabdcc6967f73eca6a3f311e.1603273666.git-series.vincent.whitchurch@axis.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e02c29e4ac45b7b18854d988915a129a3014371
Author: Kairui Song <kasong@redhat.com>
Date:   Wed Oct 14 17:24:28 2020 +0800

    x86/kexec: Use up-to-dated screen_info copy to fill boot params
    
    [ Upstream commit afc18069a2cb7ead5f86623a5f3d4ad6e21f940d ]
    
    kexec_file_load() currently reuses the old boot_params.screen_info,
    but if drivers have change the hardware state, boot_param.screen_info
    could contain invalid info.
    
    For example, the video type might be no longer VGA, or the frame buffer
    address might be changed. If the kexec kernel keeps using the old screen_info,
    kexec'ed kernel may attempt to write to an invalid framebuffer
    memory region.
    
    There are two screen_info instances globally available, boot_params.screen_info
    and screen_info. Later one is a copy, and is updated by drivers.
    
    So let kexec_file_load use the updated copy.
    
    [ mingo: Tidied up the changelog. ]
    
    Signed-off-by: Kairui Song <kasong@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20201014092429.1415040-2-kasong@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3283d4d78412e9097c6fa3cfad34876bc26f52b2
Author: Scott K Logan <logans@cottsay.net>
Date:   Fri Sep 25 01:43:53 2020 -0700

    arm64: dts: meson: add missing g12 rng clock
    
    [ Upstream commit a1afbbb0285797e01313779c71287d936d069245 ]
    
    This adds the missing perpheral clock for the RNG for Amlogic G12. As
    stated in amlogic,meson-rng.yaml, this isn't always necessary for the
    RNG to function, but is better to have in case the clock is disabled for
    some reason prior to loading.
    
    Signed-off-by: Scott K Logan <logans@cottsay.net>
    Suggested-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Link: https://lore.kernel.org/r/520a1a8ec7a958b3d918d89563ec7e93a4100a45.camel@cottsay.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69e0e917c7c85e88cd63954a9b6366e7c157c727
Author: Clément Péron <peron.clem@gmail.com>
Date:   Sat Oct 3 12:03:32 2020 +0200

    ARM: dts: sun4i-a10: fix cpu_alert temperature
    
    [ Upstream commit dea252fa41cd8ce332d148444e4799235a8a03ec ]
    
    When running dtbs_check thermal_zone warn about the
    temperature declared.
    
    thermal-zones: cpu-thermal:trips:cpu-alert0:temperature:0:0: 850000 is greater than the maximum of 200000
    
    It's indeed wrong the real value is 85°C and not 850°C.
    
    Signed-off-by: Clément Péron <peron.clem@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20201003100332.431178-1-peron.clem@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2716e78a6486814537df95a82efec4e9e4e081d9
Author: Mike Galbraith <efault@gmx.de>
Date:   Wed Nov 4 16:12:44 2020 +0100

    futex: Handle transient "ownerless" rtmutex state correctly
    
    commit 9f5d1c336a10c0d24e83e40b4c1b9539f7dba627 upstream.
    
    Gratian managed to trigger the BUG_ON(!newowner) in fixup_pi_state_owner().
    This is one possible chain of events leading to this:
    
    Task Prio       Operation
    T1   120        lock(F)
    T2   120        lock(F)   -> blocks (top waiter)
    T3   50 (RT)    lock(F)   -> boosts T1 and blocks (new top waiter)
    XX              timeout/  -> wakes T2
                    signal
    T1   50         unlock(F) -> wakes T3 (rtmutex->owner == NULL, waiter bit is set)
    T2   120        cleanup   -> try_to_take_mutex() fails because T3 is the top waiter
                                 and the lower priority T2 cannot steal the lock.
                              -> fixup_pi_state_owner() sees newowner == NULL -> BUG_ON()
    
    The comment states that this is invalid and rt_mutex_real_owner() must
    return a non NULL owner when the trylock failed, but in case of a queued
    and woken up waiter rt_mutex_real_owner() == NULL is a valid transient
    state. The higher priority waiter has simply not yet managed to take over
    the rtmutex.
    
    The BUG_ON() is therefore wrong and this is just another retry condition in
    fixup_pi_state_owner().
    
    Drop the locks, so that T3 can make progress, and then try the fixup again.
    
    Gratian provided a great analysis, traces and a reproducer. The analysis is
    to the point, but it confused the hell out of that tglx dude who had to
    page in all the futex horrors again. Condensed version is above.
    
    [ tglx: Wrote comment and changelog ]
    
    Fixes: c1e2f0eaf015 ("futex: Avoid violating the 10th rule of futex")
    Reported-by: Gratian Crisan <gratian.crisan@ni.com>
    Signed-off-by: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87a6w6x7bb.fsf@ni.com
    Link: https://lore.kernel.org/r/87sg9pkvf7.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec5f524e0293e19d2bf89219d7d589e1fb654e87
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Fri Oct 30 00:19:05 2020 +0800

    tracing: Fix out of bounds write in get_trace_buf
    
    commit c1acb4ac1a892cf08d27efcb964ad281728b0545 upstream.
    
    The nesting count of trace_printk allows for 4 levels of nesting. The
    nesting counter starts at zero and is incremented before being used to
    retrieve the current context's buffer. But the index to the buffer uses the
    nesting counter after it was incremented, and not its original number,
    which in needs to do.
    
    Link: https://lkml.kernel.org/r/20201029161905.4269-1-hqjagain@gmail.com
    
    Cc: stable@vger.kernel.org
    Fixes: 3d9622c12c887 ("tracing: Add barrier to trace_printk() buffer nesting modification")
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f6883fce69454809f6105041be02d2e71dc358a
Author: Martin Hundebøll <martin@geanix.com>
Date:   Wed Oct 14 11:02:30 2020 +0200

    spi: bcm2835: fix gpio cs level inversion
    
    commit 5e31ba0c0543a04483b53151eb5b7413efece94c upstream.
    
    The work on improving gpio chip-select in spi core, and the following
    fixes, has caused the bcm2835 spi driver to use wrong levels. Fix this
    by simply removing level handling in the bcm2835 driver, and let the
    core do its work.
    
    Fixes: 3e5ec1db8bfe ("spi: Fix SPI_CS_HIGH setting when using native and GPIO CS")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Martin Hundebøll <martin@geanix.com>
    Link: https://lore.kernel.org/r/20201014090230.2706810-1-martin@geanix.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f352cca84625b49c170dba841b60791dee737357
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Mon Nov 2 22:27:27 2020 +0100

    regulator: defer probe when trying to get voltage from unresolved supply
    
    commit cf1ad559a20d1930aa7b47a52f54e1f8718de301 upstream.
    
    regulator_get_voltage_rdev() is called in regulator probe() when
    applying machine constraints.  The "fixed" commit exposed the problem
    that non-bypassed regulators can forward the request to its parent
    (like bypassed ones) supply. Return -EPROBE_DEFER when the supply
    is expected but not resolved yet.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Cc: stable@vger.kernel.org
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Reported-by: Ondřej Jirman <megous@megous.com>
    Reported-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Tested-by: Ondřej Jirman <megous@megous.com>
    Link: https://lore.kernel.org/r/a9041d68b4d35e4a2dd71629c8a6422662acb5ee.1604351936.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a69af5baed80d918bcc10f7b0a86069558ae642e
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Oct 29 19:35:08 2020 -0400

    ftrace: Handle tracing when switching between context
    
    commit 726b3d3f141fba6f841d715fc4d8a4a84f02c02a upstream.
    
    When an interrupt or NMI comes in and switches the context, there's a delay
    from when the preempt_count() shows the update. As the preempt_count() is
    used to detect recursion having each context have its own bit get set when
    tracing starts, and if that bit is already set, it is considered a recursion
    and the function exits. But if this happens in that section where context
    has changed but preempt_count() has not been updated, this will be
    incorrectly flagged as a recursion.
    
    To handle this case, create another bit call TRANSITION and test it if the
    current context bit is already set. Flag the call as a recursion if the
    TRANSITION bit is already set, and if not, set it and continue. The
    TRANSITION bit will be cleared normally on the return of the function that
    set it, or if the current context bit is clear, set it and clear the
    TRANSITION bit to allow for another transition between the current context
    and an even higher one.
    
    Cc: stable@vger.kernel.org
    Fixes: edc15cafcbfa3 ("tracing: Avoid unnecessary multiple recursion checks")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3058420f40fbae3707d4e82748f487b23e219238
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Oct 29 17:31:45 2020 -0400

    ftrace: Fix recursion check for NMI test
    
    commit ee11b93f95eabdf8198edd4668bf9102e7248270 upstream.
    
    The code that checks recursion will work to only do the recursion check once
    if there's nested checks. The top one will do the check, the other nested
    checks will see recursion was already checked and return zero for its "bit".
    On the return side, nothing will be done if the "bit" is zero.
    
    The problem is that zero is returned for the "good" bit when in NMI context.
    This will set the bit for NMIs making it look like *all* NMI tracing is
    recursing, and prevent tracing of anything in NMI context!
    
    The simple fix is to return "bit + 1" and subtract that bit on the end to
    get the real bit.
    
    Cc: stable@vger.kernel.org
    Fixes: edc15cafcbfa3 ("tracing: Avoid unnecessary multiple recursion checks")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfaf010cf34527d683e1f82fedb42438a84e329c
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Mon Oct 5 10:48:03 2020 +0200

    mtd: spi-nor: Don't copy self-pointing struct around
    
    commit 69a8eed58cc09aea3b01a64997031dd5d3c02c07 upstream.
    
    spi_nor_parse_sfdp() modifies the passed structure so that it points to
    itself (params.erase_map.regions to params.erase_map.uniform_region). This
    makes it impossible to copy the local struct anywhere else.
    
    Therefore only use memcpy() in backup-restore scenario. The bug may show up
    like below:
    
    BUG: unable to handle page fault for address: ffffc90000b377f8
    Oops: 0000 [#1] PREEMPT SMP NOPTI
    CPU: 4 PID: 3500 Comm: flashcp Tainted: G           O      5.4.53-... #1
    ...
    RIP: 0010:spi_nor_erase+0x8e/0x5c0
    Code: 64 24 18 89 db 4d 8b b5 d0 04 00 00 4c 89 64 24 18 4c 89 64 24 20 eb 12 a8 10 0f 85 59 02 00 00 49 83 c6 10 0f 84 4f 02 00 00 <49> 8b 06 48 89 c2 48 83 e2 c0 48 89 d1 49 03 4e 08 48 39 cb 73 d8
    RSP: 0018:ffffc9000217fc48 EFLAGS: 00010206
    RAX: 0000000000740000 RBX: 0000000000000000 RCX: 0000000000740000
    RDX: ffff8884550c9980 RSI: ffff88844f9c0bc0 RDI: ffff88844ede7bb8
    RBP: 0000000000740000 R08: ffffffff815bfbe0 R09: ffff88844f9c0bc0
    R10: 0000000000000000 R11: 0000000000000000 R12: ffffc9000217fc60
    R13: ffff88844ede7818 R14: ffffc90000b377f8 R15: 0000000000000000
    FS:  00007f4699780500(0000) GS:ffff88846ff00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffffc90000b377f8 CR3: 00000004538ee000 CR4: 0000000000340fe0
    Call Trace:
     part_erase+0x27/0x50
     mtdchar_ioctl+0x831/0xba0
     ? filemap_map_pages+0x186/0x3d0
     ? do_filp_open+0xad/0x110
     ? _copy_to_user+0x22/0x30
     ? cp_new_stat+0x150/0x180
     mtdchar_unlocked_ioctl+0x2a/0x40
     do_vfs_ioctl+0xa0/0x630
     ? __do_sys_newfstat+0x3c/0x60
     ksys_ioctl+0x70/0x80
     __x64_sys_ioctl+0x16/0x20
     do_syscall_64+0x6a/0x200
     ? prepare_exit_to_usermode+0x50/0xd0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7f46996b6817
    
    Cc: stable@vger.kernel.org
    Fixes: c46872170a54 ("mtd: spi-nor: Move erase_map to 'struct spi_nor_flash_parameter'")
    Co-developed-by: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Signed-off-by: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
    Tested-by: Baurzhan Ismagulov <ibr@radix50.net>
    Reviewed-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Link: https://lore.kernel.org/r/20201005084803.23460-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aef59b5e5bdfc800f0e7aec7e74a33e98bf142c0
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Nov 2 15:31:27 2020 -0500

    ring-buffer: Fix recursion protection transitions between interrupt context
    
    commit b02414c8f045ab3b9afc816c3735bc98c5c3d262 upstream.
    
    The recursion protection of the ring buffer depends on preempt_count() to be
    correct. But it is possible that the ring buffer gets called after an
    interrupt comes in but before it updates the preempt_count(). This will
    trigger a false positive in the recursion code.
    
    Use the same trick from the ftrace function callback recursion code which
    uses a "transition" bit that gets set, to allow for a single recursion for
    to handle transitions between contexts.
    
    Cc: stable@vger.kernel.org
    Fixes: 567cd4da54ff4 ("ring-buffer: User context bit recursion checking")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cd71743e7fff055bc9382b50f924e289b1dc740
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Oct 26 10:52:29 2020 -0400

    gfs2: Wake up when sd_glock_disposal becomes zero
    
    commit da7d554f7c62d0c17c1ac3cc2586473c2d99f0bd upstream.
    
    Commit fc0e38dae645 ("GFS2: Fix glock deallocation race") fixed a
    sd_glock_disposal accounting bug by adding a missing atomic_dec
    statement, but it failed to wake up sd_glock_wait when that decrement
    causes sd_glock_disposal to reach zero.  As a consequence,
    gfs2_gl_hash_clear can now run into a 10-minute timeout instead of
    being woken up.  Add the missing wakeup.
    
    Fixes: fc0e38dae645 ("GFS2: Fix glock deallocation race")
    Cc: stable@vger.kernel.org # v2.6.39+
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2286457bd838e78f6e12a6f4a0d99aa64dc2cc0
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Sun Nov 1 17:08:00 2020 -0800

    mm: always have io_remap_pfn_range() set pgprot_decrypted()
    
    commit f8f6ae5d077a9bdaf5cbf2ac960a5d1a04b47482 upstream.
    
    The purpose of io_remap_pfn_range() is to map IO memory, such as a
    memory mapped IO exposed through a PCI BAR.  IO devices do not
    understand encryption, so this memory must always be decrypted.
    Automatically call pgprot_decrypted() as part of the generic
    implementation.
    
    This fixes a bug where enabling AMD SME causes subsystems, such as RDMA,
    using io_remap_pfn_range() to expose BAR pages to user space to fail.
    The CPU will encrypt access to those BAR pages instead of passing
    unencrypted IO directly to the device.
    
    Places not mapping IO should use remap_pfn_range().
    
    Fixes: aca20d546214 ("x86/mm: Add support to make use of Secure Memory Encryption")
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brijesh Singh <brijesh.singh@amd.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: "Dave Young" <dyoung@redhat.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Larry Woodman <lwoodman@redhat.com>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Toshimitsu Kani <toshi.kani@hpe.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/0-v1-025d64bdf6c4+e-amd_sme_fix_jgg@nvidia.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b8490d6b809c56a95287c3ec3e2bb6a358763e7
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Sun Nov 1 17:07:53 2020 -0800

    kthread_worker: prevent queuing delayed work from timer_fn when it is being canceled
    
    commit 6993d0fdbee0eb38bfac350aa016f65ad11ed3b1 upstream.
    
    There is a small race window when a delayed work is being canceled and
    the work still might be queued from the timer_fn:
    
            CPU0                                            CPU1
    kthread_cancel_delayed_work_sync()
       __kthread_cancel_work_sync()
         __kthread_cancel_work()
            work->canceling++;
                                                  kthread_delayed_work_timer_fn()
                                                       kthread_insert_work();
    
    BUG: kthread_insert_work() should not get called when work->canceling is
    set.
    
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201014083030.16895-1-qiang.zhang@windriver.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1d16be4f2f4a6cbdc5ff1dddc8917fad11d3623
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Sun Nov 1 17:07:47 2020 -0800

    lib/crc32test: remove extra local_irq_disable/enable
    
    commit aa4e460f0976351fddd2f5ac6e08b74320c277a1 upstream.
    
    Commit 4d004099a668 ("lockdep: Fix lockdep recursion") uncovered the
    following issue in lib/crc32test reported on s390:
    
      BUG: using __this_cpu_read() in preemptible [00000000] code: swapper/0/1
      caller is lockdep_hardirqs_on_prepare+0x48/0x270
      CPU: 6 PID: 1 Comm: swapper/0 Not tainted 5.9.0-next-20201015-15164-g03d992bd2de6 #19
      Hardware name: IBM 3906 M04 704 (LPAR)
      Call Trace:
        lockdep_hardirqs_on_prepare+0x48/0x270
        trace_hardirqs_on+0x9c/0x1b8
        crc32_test.isra.0+0x170/0x1c0
        crc32test_init+0x1c/0x40
        do_one_initcall+0x40/0x130
        do_initcalls+0x126/0x150
        kernel_init_freeable+0x1f6/0x230
        kernel_init+0x22/0x150
        ret_from_fork+0x24/0x2c
      no locks held by swapper/0/1.
    
    Remove extra local_irq_disable/local_irq_enable helpers calls.
    
    Fixes: 5fb7f87408f1 ("lib: add module support to crc32 tests")
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lkml.kernel.org/r/patch.git-4369da00c06e.your-ad-here.call-01602859837-ext-1679@work.hours
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1f729c7dec0df04d62550d981af849f970a660d
Author: Shijie Luo <luoshijie1@huawei.com>
Date:   Sun Nov 1 17:07:40 2020 -0800

    mm: mempolicy: fix potential pte_unmap_unlock pte error
    
    commit 3f08842098e842c51e3b97d0dcdebf810b32558e upstream.
    
    When flags in queue_pages_pte_range don't have MPOL_MF_MOVE or
    MPOL_MF_MOVE_ALL bits, code breaks and passing origin pte - 1 to
    pte_unmap_unlock seems like not a good idea.
    
    queue_pages_pte_range can run in MPOL_MF_MOVE_ALL mode which doesn't
    migrate misplaced pages but returns with EIO when encountering such a
    page.  Since commit a7f40cfe3b7a ("mm: mempolicy: make mbind() return
    -EIO when MPOL_MF_STRICT is specified") and early break on the first pte
    in the range results in pte_unmap_unlock on an underflow pte.  This can
    lead to lockups later on when somebody tries to lock the pte resp.
    page_table_lock again..
    
    Fixes: a7f40cfe3b7a ("mm: mempolicy: make mbind() return -EIO when MPOL_MF_STRICT is specified")
    Signed-off-by: Shijie Luo <luoshijie1@huawei.com>
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Feilong Lin <linfeilong@huawei.com>
    Cc: Shijie Luo <luoshijie1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201019074853.50856-1-luoshijie1@huawei.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7c2913d606b37f1dd8b76647cb11172fcfac988
Author: Geoffrey D. Bennett <g@b4.vu>
Date:   Wed Nov 4 22:37:05 2020 +1030

    ALSA: usb-audio: Add implicit feedback quirk for MODX
    
    commit 26201ddc1373c99b2a67c5774da2f0eecd749b93 upstream.
    
    This patch fixes audio distortion on playback for the Yamaha MODX.
    
    Signed-off-by: Geoffrey D. Bennett <g@b4.vu>
    Tested-by: Frank Slotta <frank.slotta@posteo.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201104120705.GA19126@b4.vu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26a871cf86cb277fdd815f1df1e437f23d7eb144
Author: Geoffrey D. Bennett <g@b4.vu>
Date:   Wed Nov 4 22:27:17 2020 +1030

    ALSA: usb-audio: Add implicit feedback quirk for Qu-16
    
    commit 0938ecae432e7ac8b01080c35dd81d50a1e43033 upstream.
    
    This patch fixes audio distortion on playback for the Allen&Heath
    Qu-16.
    
    Signed-off-by: Geoffrey D. Bennett <g@b4.vu>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201104115717.GA19046@b4.vu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a46e830d017ee1b85d2a215fdd4202bf38582989
Author: Artem Lapkin <art@khadas.com>
Date:   Tue Nov 3 18:08:09 2020 +0800

    ALSA: usb-audio: add usb vendor id as DSD-capable for Khadas devices
    
    commit 07815a2b3501adeaae6384a25b9c4a9c81dae59f upstream.
    
    Khadas audio devices ( USB_ID_VENDOR 0x3353 )
    have DSD-capable implementations from XMOS
    need add new usb vendor id for recognition
    
    Signed-off-by: Artem Lapkin <art@khadas.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201103103311.5435-1-art@khadas.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65457e345f3c658e9a6d0c3f2e446d61eb377718
Author: Keith Winstein <keithw@cs.stanford.edu>
Date:   Sun Oct 25 22:05:47 2020 -0700

    ALSA: usb-audio: Add implicit feedback quirk for Zoom UAC-2
    
    commit f15cfca818d756dd1c9492530091dfd583359db3 upstream.
    
    The Zoom UAC-2 USB audio interface provides an async playback endpoint
    ("1 OUT (ASYNC)") and capture endpoint ("2 IN (ASYNC)"), both with
    2-channel S32_LE in 44.1, 48, 88.2, 96, 176.4, or 192
    kilosamples/s. The device provides explicit feedback to adjust the
    host's playback rate, but the feedback appears unstable and biased
    relative to the device's capture rate.
    
    "alsaloop -t 1000" experiences playback underruns and tries to
    resample the captured audio to match the varying playback
    rate. Forcing the kernel to use implicit feedback appears to
    produce more stable results. This causes the host to transmit one
    playback sample for each capture sample received. (Zoom North America
    has been notified of this change.)
    
    Signed-off-by: Keith Winstein <keithw@cs.stanford.edu>
    Tested-by: Keith Winstein <keithw@cs.stanford.edu>
    Cc: <stable@vger.kernel.org>
    BugLink: https://lore.kernel.org/r/20201027071841.GA164525@trolley.csail.mit.edu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72ce616ed55adbae313e4711efc048ab532b8213
Author: Kailang Yang <kailang@realtek.com>
Date:   Tue Nov 3 15:40:35 2020 +0800

    ALSA: hda/realtek - Enable headphone for ASUS TM420
    
    commit ef9ce66fab959c66d270bbee7ca79b92ee957893 upstream.
    
    ASUS TM420 had depop circuit for headphone.
    It need to turn on by COEF bit.
    
    [ fixed the missing enum definition by tiwai ]
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3d6177d7023b4783bf2793861c577ada@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7d0f72424058ee224ba66e10a5bd84b84ce7607
Author: Kailang Yang <kailang@realtek.com>
Date:   Tue Oct 27 16:46:38 2020 +0800

    ALSA: hda/realtek - Fixed HP headset Mic can't be detected
    
    commit 8a8de09cb2adc119104f35044d1a840dd47aa9d8 upstream.
    
    System boot with plugged headset. It will not detect headset Mic.
    It will happen on cold boot restart resume state.
    Quirk by SSID change to quirk by pin verb.
    
    Fixes: 13468bfa8c58 ("ALSA: hda/realtek - set mic to auto detect on a HP AIO machine")
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/f42ae1ede1cf47029ae2bef1a42caf03@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61402d61a2afd49b3be2e447bd8f15340b43f0bb
Author: Lee Jones <lee.jones@linaro.org>
Date:   Mon Nov 2 13:32:42 2020 -0500

    Fonts: Replace discarded const qualifier
    
    commit 9522750c66c689b739e151fcdf895420dc81efc0 upstream.
    
    Commit 6735b4632def ("Fonts: Support FONT_EXTRA_WORDS macros for built-in
    fonts") introduced the following error when building rpc_defconfig (only
    this build appears to be affected):
    
     `acorndata_8x8' referenced in section `.text' of arch/arm/boot/compressed/ll_char_wr.o:
        defined in discarded section `.data' of arch/arm/boot/compressed/font.o
     `acorndata_8x8' referenced in section `.data.rel.ro' of arch/arm/boot/compressed/font.o:
        defined in discarded section `.data' of arch/arm/boot/compressed/font.o
     make[3]: *** [/scratch/linux/arch/arm/boot/compressed/Makefile:191: arch/arm/boot/compressed/vmlinux] Error 1
     make[2]: *** [/scratch/linux/arch/arm/boot/Makefile:61: arch/arm/boot/compressed/vmlinux] Error 2
     make[1]: *** [/scratch/linux/arch/arm/Makefile:317: zImage] Error 2
    
    The .data section is discarded at link time.  Reinstating acorndata_8x8 as
    const ensures it is still available after linking.  Do the same for the
    other 12 built-in fonts as well, for consistency purposes.
    
    Cc: <stable@vger.kernel.org>
    Cc: Russell King <linux@armlinux.org.uk>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Fixes: 6735b4632def ("Fonts: Support FONT_EXTRA_WORDS macros for built-in fonts")
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Co-developed-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201102183242.2031659-1-yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5ea79bb19f8f8ff57abb14ce20bfad7d1531935
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Oct 31 11:10:53 2020 +0800

    sfp: Fix error handing in sfp_probe()
    
    [ Upstream commit 9621618130bf7e83635367c13b9a6ee53935bb37 ]
    
    gpiod_to_irq() never return 0, but returns negative in
    case of error, check it and set gpio_irq to 0.
    
    Fixes: 73970055450e ("sfp: add SFP module support")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20201031031053.25264-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b5458effeeefa503dab92fc397bb9d0230c8db1
Author: Petr Malat <oss@malat.biz>
Date:   Fri Oct 30 14:26:33 2020 +0100

    sctp: Fix COMM_LOST/CANT_STR_ASSOC err reporting on big-endian platforms
    
    [ Upstream commit b6df8c81412190fbd5eaa3cec7f642142d9c16cd ]
    
    Commit 978aa0474115 ("sctp: fix some type cast warnings introduced since
    very beginning")' broke err reading from sctp_arg, because it reads the
    value as 32-bit integer, although the value is stored as 16-bit integer.
    Later this value is passed to the userspace in 16-bit variable, thus the
    user always gets 0 on big-endian platforms. Fix it by reading the __u16
    field of sctp_arg union, as reading err field would produce a sparse
    warning.
    
    Fixes: 978aa0474115 ("sctp: fix some type cast warnings introduced since very beginning")
    Signed-off-by: Petr Malat <oss@malat.biz>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Link: https://lore.kernel.org/r/20201030132633.7045-1-oss@malat.biz
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26ffb891605967304c6f5cc28b88c0c319b738fc
Author: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
Date:   Fri Oct 30 10:07:11 2020 -0700

    powerpc/vnic: Extend "failover pending" window
    
    [ Upstream commit 1d8504937478fdc2f3ef2174a816fd3302eca882 ]
    
    Commit 5a18e1e0c193b introduced the 'failover_pending' state to track
    the "failover pending window" - where we wait for the partner to become
    ready (after a transport event) before actually attempting to failover.
    i.e window is between following two events:
    
            a. we get a transport event due to a FAILOVER
    
            b. later, we get CRQ_INITIALIZED indicating the partner is
               ready  at which point we schedule a FAILOVER reset.
    
    and ->failover_pending is true during this window.
    
    If during this window, we attempt to open (or close) a device, we pretend
    that the operation succeded and let the FAILOVER reset path complete the
    operation.
    
    This is fine, except if the transport event ("a" above) occurs during the
    open and after open has already checked whether a failover is pending. If
    that happens, we fail the open, which can cause the boot scripts to leave
    the interface down requiring administrator to manually bring up the device.
    
    This fix "extends" the failover pending window till we are _actually_
    ready to perform the failover reset (i.e until after we get the RTNL
    lock). Since open() holds the RTNL lock, we can be sure that we either
    finish the open or if the open() fails due to the failover pending window,
    we can again pretend that open is done and let the failover complete it.
    
    We could try and block the open until failover is completed but a) that
    could still timeout the application and b) Existing code "pretends" that
    failover occurred "just after" open succeeded, so marks the open successful
    and lets the failover complete the open. So, mark the open successful even
    if the transport event occurs before we actually start the open.
    
    Fixes: 5a18e1e0c193 ("ibmvnic: Fix failover case for non-redundant configuration")
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.ibm.com>
    Acked-by: Dany Madden <drt@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201030170711.1562994-1-sukadev@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92e65059bedadea4aa4c5e7078f17011c2523d13
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Mon Nov 2 12:01:08 2020 +0100

    net: usb: qmi_wwan: add Telit LE910Cx 0x1230 composition
    
    [ Upstream commit 5fd8477ed8ca77e64b93d44a6dae4aa70c191396 ]
    
    Add support for Telit LE910Cx 0x1230 composition:
    
    0x1230: tty, adb, rmnet, audio, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20201102110108.17244-1-dnlplm@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e3c047f814bf1f28449893613b7f5ae5f7e9674
Author: wenxu <wenxu@ucloud.cn>
Date:   Fri Oct 30 11:32:08 2020 +0800

    ip_tunnel: fix over-mtu packet send fail without TUNNEL_DONT_FRAGMENT flags
    
    [ Upstream commit 20149e9eb68c003eaa09e7c9a49023df40779552 ]
    
    The tunnel device such as vxlan, bareudp and geneve in the lwt mode set
    the outer df only based TUNNEL_DONT_FRAGMENT.
    And this was also the behavior for gre device before switching to use
    ip_md_tunnel_xmit in commit 962924fa2b7a ("ip_gre: Refactor collect
    metatdata mode tunnel xmit to ip_md_tunnel_xmit")
    
    When the ip_gre in lwt mode xmit with ip_md_tunnel_xmi changed the rule and
    make the discrepancy between handling of DF by different tunnels. So in the
    ip_md_tunnel_xmit should follow the same rule like other tunnels.
    
    Fixes: cfc7381b3002 ("ip_tunnel: add collect_md mode to IPIP tunnel")
    Signed-off-by: wenxu <wenxu@ucloud.cn>
    Link: https://lore.kernel.org/r/1604028728-31100-1-git-send-email-wenxu@ucloud.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac343efb572c55f6a237a5fd37f44efd58fe7194
Author: Shannon Nelson <snelson@pensando.io>
Date:   Wed Nov 4 11:56:06 2020 -0800

    ionic: check port ptr before use
    
    [ Upstream commit 2bcbf42add911ef63a6d90e92001dc2bcb053e68 ]
    
    Check for corner case of port_init failure before using
    the port_info pointer.
    
    Fixes: 4d03e00a2140 ("ionic: Add initial ethtool support")
    Signed-off-by: Shannon Nelson <snelson@pensando.io>
    Link: https://lore.kernel.org/r/20201104195606.61184-1-snelson@pensando.io
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ef3bcc25a3e85c1325398c3f605123715814b98
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Tue Oct 20 20:36:05 2020 +0300

    gianfar: Account for Tx PTP timestamp in the skb headroom
    
    [ Upstream commit d6a076d68c6b5d6a5800f3990a513facb7016dea ]
    
    When PTP timestamping is enabled on Tx, the controller
    inserts the Tx timestamp at the beginning of the frame
    buffer, between SFD and the L2 frame header. This means
    that the skb provided by the stack is required to have
    enough headroom otherwise a new skb needs to be created
    by the driver to accommodate the timestamp inserted by h/w.
    Up until now the driver was relying on the second option,
    using skb_realloc_headroom() to create a new skb to accommodate
    PTP frames. Turns out that this method is not reliable, as
    reallocation of skbs for PTP frames along with the required
    overhead (skb_set_owner_w, consume_skb) is causing random
    crashes in subsequent skb_*() calls, when multiple concurrent
    TCP streams are run at the same time on the same device
    (as seen in James' report).
    Note that these crashes don't occur with a single TCP stream,
    nor with multiple concurrent UDP streams, but only when multiple
    TCP streams are run concurrently with the PTP packet flow
    (doing skb reallocation).
    This patch enforces the first method, by requesting enough
    headroom from the stack to accommodate PTP frames, and so avoiding
    skb_realloc_headroom() & co, and the crashes no longer occur.
    There's no reason not to set needed_headroom to a large enough
    value to accommodate PTP frames, so in this regard this patch
    is a fix.
    
    Reported-by: James Jurack <james.jurack@ametek.com>
    Fixes: bee9e58c9e98 ("gianfar:don't add FCB length to hard_header_len")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Link: https://lore.kernel.org/r/20201020173605.1173-1-claudiu.manoil@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b66a5b6a9e239d1d1f84b74539f745d72d00f16
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Thu Oct 29 10:10:56 2020 +0200

    gianfar: Replace skb_realloc_headroom with skb_cow_head for PTP
    
    [ Upstream commit d145c9031325fed963a887851d9fa42516efd52b ]
    
    When PTP timestamping is enabled on Tx, the controller
    inserts the Tx timestamp at the beginning of the frame
    buffer, between SFD and the L2 frame header.  This means
    that the skb provided by the stack is required to have
    enough headroom otherwise a new skb needs to be created
    by the driver to accommodate the timestamp inserted by h/w.
    Up until now the driver was relying on skb_realloc_headroom()
    to create new skbs to accommodate PTP frames.  Turns out that
    this method is not reliable in this context at least, as
    skb_realloc_headroom() for PTP frames can cause random crashes,
    mostly in subsequent skb_*() calls, when multiple concurrent
    TCP streams are run at the same time with the PTP flow
    on the same device (as seen in James' report).  I also noticed
    that when the system is loaded by sending multiple TCP streams,
    the driver receives cloned skbs in large numbers.
    skb_cow_head() instead proves to be stable in this scenario,
    and not only handles cloned skbs too but it's also more efficient
    and widely used in other drivers.
    The commit introducing skb_realloc_headroom in the driver
    goes back to 2009, commit 93c1285c5d92
    ("gianfar: reallocate skb when headroom is not enough for fcb").
    For practical purposes I'm referencing a newer commit (from 2012)
    that brings the code to its current structure (and fixes the PTP
    case).
    
    Fixes: 9c4886e5e63b ("gianfar: Fix invalid TX frames returned on error queue when time stamping")
    Reported-by: James Jurack <james.jurack@ametek.com>
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Link: https://lore.kernel.org/r/20201029081057.8506-1-claudiu.manoil@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bf7b7c385a145221a37c81d485baa37fea901a0
Author: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
Date:   Mon Nov 2 23:09:10 2020 +0530

    chelsio/chtls: fix always leaking ctrl_skb
    
    [ Upstream commit dbfe394dad33f99cf8458be50483ec40a5d29c34 ]
    
    Correct skb refcount in alloc_ctrl_skb(), causing skb memleak
    when chtls_send_abort() called with NULL skb.
    it was always leaking the skb, correct it by incrementing skb
    refs by one.
    
    Fixes: cc35c88ae4db ("crypto : chtls - CPL handler definition")
    Signed-off-by: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
    Link: https://lore.kernel.org/r/20201102173909.24826-1-vinay.yadav@chelsio.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14d755a4815ee7c168cf6b839d4b312f166a2e37
Author: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
Date:   Mon Nov 2 23:06:51 2020 +0530

    chelsio/chtls: fix memory leaks caused by a race
    
    [ Upstream commit 8080b462b6aa856ae05ea010441a702599e579f2 ]
    
    race between user context and softirq causing memleak,
    consider the call sequence scenario
    
    chtls_setkey()         //user context
    chtls_peer_close()
    chtls_abort_req_rss()
    chtls_setkey()         //user context
    
    work request skb queued in chtls_setkey() won't be freed
    because resources are already cleaned for this connection,
    fix it by not queuing work request while socket is closing.
    
    v1->v2:
    - fix W=1 warning.
    
    v2->v3:
    - separate it out from another memleak fix.
    
    Fixes: cc35c88ae4db ("crypto : chtls - CPL handler definition")
    Signed-off-by: Vinay Kumar Yadav <vinay.yadav@chelsio.com>
    Link: https://lore.kernel.org/r/20201102173650.24754-1-vinay.yadav@chelsio.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57bb59f9d8fb6d32a5f22aa0708a1419d311e25c
Author: Mark Deneen <mdeneen@saucontech.com>
Date:   Fri Oct 30 15:58:14 2020 +0000

    cadence: force nonlinear buffers to be cloned
    
    [ Upstream commit 403dc16796f5516acf23d94a1cd9eba564d03210 ]
    
    In my test setup, I had a SAMA5D27 device configured with ip forwarding, and
    second device with usb ethernet (r8152) sending ICMP packets.  If the packet
    was larger than about 220 bytes, the SAMA5 device would "oops" with the
    following trace:
    
    kernel BUG at net/core/skbuff.c:1863!
    Internal error: Oops - BUG: 0 [#1] ARM
    Modules linked in: xt_MASQUERADE ppp_async ppp_generic slhc iptable_nat xt_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 can_raw can bridge stp llc ipt_REJECT nf_reject_ipv4 sd_mod cdc_ether usbnet usb_storage r8152 scsi_mod mii o
    ption usb_wwan usbserial micrel macb at91_sama5d2_adc phylink gpio_sama5d2_piobu m_can_platform m_can industrialio_triggered_buffer kfifo_buf of_mdio can_dev fixed_phy sdhci_of_at91 sdhci_pltfm libphy sdhci mmc_core ohci_at91 ehci_atmel o
    hci_hcd iio_rescale industrialio sch_fq_codel spidev prox2_hal(O)
    CPU: 0 PID: 0 Comm: swapper Tainted: G           O      5.9.1-prox2+ #1
    Hardware name: Atmel SAMA5
    PC is at skb_put+0x3c/0x50
    LR is at macb_start_xmit+0x134/0xad0 [macb]
    pc : [<c05258cc>]    lr : [<bf0ea5b8>]    psr: 20070113
    sp : c0d01a60  ip : c07232c0  fp : c4250000
    r10: c0d03cc8  r9 : 00000000  r8 : c0d038c0
    r7 : 00000000  r6 : 00000008  r5 : c59b66c0  r4 : 0000002a
    r3 : 8f659eff  r2 : c59e9eea  r1 : 00000001  r0 : c59b66c0
    Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    Control: 10c53c7d  Table: 2640c059  DAC: 00000051
    Process swapper (pid: 0, stack limit = 0x75002d81)
    
    <snipped stack>
    
    [<c05258cc>] (skb_put) from [<bf0ea5b8>] (macb_start_xmit+0x134/0xad0 [macb])
    [<bf0ea5b8>] (macb_start_xmit [macb]) from [<c053e504>] (dev_hard_start_xmit+0x90/0x11c)
    [<c053e504>] (dev_hard_start_xmit) from [<c0571180>] (sch_direct_xmit+0x124/0x260)
    [<c0571180>] (sch_direct_xmit) from [<c053eae4>] (__dev_queue_xmit+0x4b0/0x6d0)
    [<c053eae4>] (__dev_queue_xmit) from [<c05a5650>] (ip_finish_output2+0x350/0x580)
    [<c05a5650>] (ip_finish_output2) from [<c05a7e24>] (ip_output+0xb4/0x13c)
    [<c05a7e24>] (ip_output) from [<c05a39d0>] (ip_forward+0x474/0x500)
    [<c05a39d0>] (ip_forward) from [<c05a13d8>] (ip_sublist_rcv_finish+0x3c/0x50)
    [<c05a13d8>] (ip_sublist_rcv_finish) from [<c05a19b8>] (ip_sublist_rcv+0x11c/0x188)
    [<c05a19b8>] (ip_sublist_rcv) from [<c05a2494>] (ip_list_rcv+0xf8/0x124)
    [<c05a2494>] (ip_list_rcv) from [<c05403c4>] (__netif_receive_skb_list_core+0x1a0/0x20c)
    [<c05403c4>] (__netif_receive_skb_list_core) from [<c05405c4>] (netif_receive_skb_list_internal+0x194/0x230)
    [<c05405c4>] (netif_receive_skb_list_internal) from [<c0540684>] (gro_normal_list.part.0+0x14/0x28)
    [<c0540684>] (gro_normal_list.part.0) from [<c0541280>] (napi_complete_done+0x16c/0x210)
    [<c0541280>] (napi_complete_done) from [<bf14c1c0>] (r8152_poll+0x684/0x708 [r8152])
    [<bf14c1c0>] (r8152_poll [r8152]) from [<c0541424>] (net_rx_action+0x100/0x328)
    [<c0541424>] (net_rx_action) from [<c01012ec>] (__do_softirq+0xec/0x274)
    [<c01012ec>] (__do_softirq) from [<c012d6d4>] (irq_exit+0xcc/0xd0)
    [<c012d6d4>] (irq_exit) from [<c0160960>] (__handle_domain_irq+0x58/0xa4)
    [<c0160960>] (__handle_domain_irq) from [<c0100b0c>] (__irq_svc+0x6c/0x90)
    Exception stack(0xc0d01ef0 to 0xc0d01f38)
    1ee0:                                     00000000 0000003d 0c31f383 c0d0fa00
    1f00: c0d2eb80 00000000 c0d2e630 4dad8c49 4da967b0 0000003d 0000003d 00000000
    1f20: fffffff5 c0d01f40 c04e0f88 c04e0f8c 30070013 ffffffff
    [<c0100b0c>] (__irq_svc) from [<c04e0f8c>] (cpuidle_enter_state+0x7c/0x378)
    [<c04e0f8c>] (cpuidle_enter_state) from [<c04e12c4>] (cpuidle_enter+0x28/0x38)
    [<c04e12c4>] (cpuidle_enter) from [<c014f710>] (do_idle+0x194/0x214)
    [<c014f710>] (do_idle) from [<c014fa50>] (cpu_startup_entry+0xc/0x14)
    [<c014fa50>] (cpu_startup_entry) from [<c0a00dc8>] (start_kernel+0x46c/0x4a0)
    Code: e580c054 8a000002 e1a00002 e8bd8070 (e7f001f2)
    ---[ end trace 146c8a334115490c ]---
    
    The solution was to force nonlinear buffers to be cloned.  This was previously
    reported by Klaus Doth (https://www.spinics.net/lists/netdev/msg556937.html)
    but never formally submitted as a patch.
    
    This is the third revision, hopefully the formatting is correct this time!
    
    Suggested-by: Klaus Doth <krnl@doth.eu>
    Fixes: 653e92a9175e ("net: macb: add support for padding and fcs computation")
    Signed-off-by: Mark Deneen <mdeneen@saucontech.com>
    Link: https://lore.kernel.org/r/20201030155814.622831-1-mdeneen@saucontech.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1695fca8a923df8ec971bada7e3dce5ff74099c4
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Sun Nov 1 17:07:44 2020 -0800

    ptrace: fix task_join_group_stop() for the case when current is traced
    
    commit 7b3c36fc4c231ca532120bbc0df67a12f09c1d96 upstream.
    
    This testcase
    
            #include <stdio.h>
            #include <unistd.h>
            #include <signal.h>
            #include <sys/ptrace.h>
            #include <sys/wait.h>
            #include <pthread.h>
            #include <assert.h>
    
            void *tf(void *arg)
            {
                    return NULL;
            }
    
            int main(void)
            {
                    int pid = fork();
                    if (!pid) {
                            kill(getpid(), SIGSTOP);
    
                            pthread_t th;
                            pthread_create(&th, NULL, tf, NULL);
    
                            return 0;
                    }
    
                    waitpid(pid, NULL, WSTOPPED);
    
                    ptrace(PTRACE_SEIZE, pid, 0, PTRACE_O_TRACECLONE);
                    waitpid(pid, NULL, 0);
    
                    ptrace(PTRACE_CONT, pid, 0,0);
                    waitpid(pid, NULL, 0);
    
                    int status;
                    int thread = waitpid(-1, &status, 0);
                    assert(thread > 0 && thread != pid);
                    assert(status == 0x80137f);
    
                    return 0;
            }
    
    fails and triggers WARN_ON_ONCE(!signr) in do_jobctl_trap().
    
    This is because task_join_group_stop() has 2 problems when current is traced:
    
            1. We can't rely on the "JOBCTL_STOP_PENDING" check, a stopped tracee
               can be woken up by debugger and it can clone another thread which
               should join the group-stop.
    
               We need to check group_stop_count || SIGNAL_STOP_STOPPED.
    
            2. If SIGNAL_STOP_STOPPED is already set, we should not increment
               sig->group_stop_count and add JOBCTL_STOP_CONSUME. The new thread
               should stop without another do_notify_parent_cldstop() report.
    
    To clarify, the problem is very old and we should blame
    ptrace_init_task().  But now that we have task_join_group_stop() it makes
    more sense to fix this helper to avoid the code duplication.
    
    Reported-by: syzbot+3485e3773f7da290eecc@syzkaller.appspotmail.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Christian Brauner <christian@brauner.io>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201019134237.GA18810@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76e5bba75a631602d10399eba4b38a791bc8a1ec
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca16a42f5f0da332a1756e7b48b228b6d3bcf24b
Author: Fangrui Song <maskray@google.com>
Date:   Thu Oct 29 11:19:51 2020 -0700

    arm64: Change .weak to SYM_FUNC_START_WEAK_PI for arch/arm64/lib/mem*.S
    
    commit ec9d78070de986ecf581ea204fd322af4d2477ec upstream.
    
    Commit 39d114ddc682 ("arm64: add KASAN support") added .weak directives to
    arch/arm64/lib/mem*.S instead of changing the existing SYM_FUNC_START_PI
    macros. This can lead to the assembly snippet `.weak memcpy ... .globl
    memcpy` which will produce a STB_WEAK memcpy with GNU as but STB_GLOBAL
    memcpy with LLVM's integrated assembler before LLVM 12. LLVM 12 (since
    https://reviews.llvm.org/D90108) will error on such an overridden symbol
    binding.
    
    Use the appropriate SYM_FUNC_START_WEAK_PI instead.
    
    Fixes: 39d114ddc682 ("arm64: add KASAN support")
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Fangrui Song <maskray@google.com>
    Tested-by: Sami Tolvanen <samitolvanen@google.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201029181951.1866093-1-maskray@google.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Cc: Jian Cai <jiancai@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d94589900d98a20ea28324a7ae4568edb5db77fd
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 6 19:58:17 2020 +0000

    arm64: lib: Use modern annotations for assembly functions
    
    commit 3ac0f4526dfb80625f5c2365bccd85be68db93ef upstream.
    
    In an effort to clarify and simplify the annotation of assembly functions
    in the kernel new macros have been introduced. These replace ENTRY and
    ENDPROC and also add a new annotation for static functions which previously
    had no ENTRY equivalent. Update the annotations in the library code to the
    new macros.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [will: Use SYM_FUNC_START_WEAK_PI]
    Signed-off-by: Will Deacon <will@kernel.org>
    Cc: Jian Cai <jiancai@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e7050661d954c470e1896bd394f4b5ecf2c7681
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jan 6 19:58:16 2020 +0000

    arm64: asm: Add new-style position independent function annotations
    
    commit 35e61c77ef386555f3df1bc2057098c6997ca10b upstream.
    
    As part of an effort to make the annotations in assembly code clearer and
    more consistent new macros have been introduced, including replacements
    for ENTRY() and ENDPROC().
    
    On arm64 we have ENDPIPROC(), a custom version of ENDPROC() which is
    used for code that will need to run in position independent environments
    like EFI, it creates an alias for the function with the prefix __pi_ and
    then emits the standard ENDPROC. Add new-style macros to replace this
    which expand to the standard SYM_FUNC_*() and SYM_FUNC_ALIAS_*(),
    resulting in the same object code. These are added in linkage.h for
    consistency with where the generic assembler code has its macros.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [will: Rename 'WEAK' macro, use ';' instead of ASM_NL, deprecate ENDPIPROC]
    Signed-off-by: Will Deacon <will@kernel.org>
    Cc: Jian Cai <jiancai@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 840d8c9b3e5f51d1005256e6c63eab4f81cbebfb
Author: Jiri Slaby <jirislaby@kernel.org>
Date:   Fri Oct 11 13:50:41 2019 +0200

    linkage: Introduce new macros for assembler symbols
    
    commit ffedeeb780dc554eff3d3b16e6a462a26a41d7ec upstream.
    
    Introduce new C macros for annotations of functions and data in
    assembly. There is a long-standing mess in macros like ENTRY, END,
    ENDPROC and similar. They are used in different manners and sometimes
    incorrectly.
    
    So introduce macros with clear use to annotate assembly as follows:
    
    a) Support macros for the ones below
       SYM_T_FUNC -- type used by assembler to mark functions
       SYM_T_OBJECT -- type used by assembler to mark data
       SYM_T_NONE -- type used by assembler to mark entries of unknown type
    
       They are defined as STT_FUNC, STT_OBJECT, and STT_NOTYPE
       respectively. According to the gas manual, this is the most portable
       way. I am not sure about other assemblers, so this can be switched
       back to %function and %object if this turns into a problem.
       Architectures can also override them by something like ", @function"
       if they need.
    
       SYM_A_ALIGN, SYM_A_NONE -- align the symbol?
       SYM_L_GLOBAL, SYM_L_WEAK, SYM_L_LOCAL -- linkage of symbols
    
    b) Mostly internal annotations, used by the ones below
       SYM_ENTRY -- use only if you have to (for non-paired symbols)
       SYM_START -- use only if you have to (for paired symbols)
       SYM_END -- use only if you have to (for paired symbols)
    
    c) Annotations for code
       SYM_INNER_LABEL_ALIGN -- only for labels in the middle of code
       SYM_INNER_LABEL -- only for labels in the middle of code
    
       SYM_FUNC_START_LOCAL_ALIAS -- use where there are two local names for
            one function
       SYM_FUNC_START_ALIAS -- use where there are two global names for one
            function
       SYM_FUNC_END_ALIAS -- the end of LOCAL_ALIASed or ALIASed function
    
       SYM_FUNC_START -- use for global functions
       SYM_FUNC_START_NOALIGN -- use for global functions, w/o alignment
       SYM_FUNC_START_LOCAL -- use for local functions
       SYM_FUNC_START_LOCAL_NOALIGN -- use for local functions, w/o
            alignment
       SYM_FUNC_START_WEAK -- use for weak functions
       SYM_FUNC_START_WEAK_NOALIGN -- use for weak functions, w/o alignment
       SYM_FUNC_END -- the end of SYM_FUNC_START_LOCAL, SYM_FUNC_START,
            SYM_FUNC_START_WEAK, ...
    
       For functions with special (non-C) calling conventions:
       SYM_CODE_START -- use for non-C (special) functions
       SYM_CODE_START_NOALIGN -- use for non-C (special) functions, w/o
            alignment
       SYM_CODE_START_LOCAL -- use for local non-C (special) functions
       SYM_CODE_START_LOCAL_NOALIGN -- use for local non-C (special)
            functions, w/o alignment
       SYM_CODE_END -- the end of SYM_CODE_START_LOCAL or SYM_CODE_START
    
    d) For data
       SYM_DATA_START -- global data symbol
       SYM_DATA_START_LOCAL -- local data symbol
       SYM_DATA_END -- the end of the SYM_DATA_START symbol
       SYM_DATA_END_LABEL -- the labeled end of SYM_DATA_START symbol
       SYM_DATA -- start+end wrapper around simple global data
       SYM_DATA_LOCAL -- start+end wrapper around simple local data
    
    ==========
    
    The macros allow to pair starts and ends of functions and mark functions
    correctly in the output ELF objects.
    
    All users of the old macros in x86 are converted to use these in further
    patches.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: linux-arch@vger.kernel.org
    Cc: linux-doc@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-pm@vger.kernel.org
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will@kernel.org>
    Cc: x86-ml <x86@kernel.org>
    Cc: xen-devel@lists.xenproject.org
    Link: https://lkml.kernel.org/r/20191011115108.12392-2-jslaby@suse.cz
    Cc: Jian Cai <jiancai@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ca84322ab5b963b9381a1048e3b3e950b9b5398
Author: Mateusz Gorski <mateusz.gorski@linux.intel.com>
Date:   Mon Apr 27 15:27:25 2020 +0200

    ASoC: Intel: Skylake: Add alternative topology binary name
    
    commit 1b290ef023b3eeb4f4688b582fecb773915ef937 upstream.
    
    Add alternative topology binary file name based on used machine driver
    and fallback to use this name after failed attempt to load topology file
    with name based on NHLT.
    This change addresses multiple issues with current mechanism, for
    example - there are devices without NHLT table, and that currently
    results in tplg_name being empty.
    
    Signed-off-by: Mateusz Gorski <mateusz.gorski@linux.intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427132727.24942-2-mateusz.gorski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e05dfcff26e94ded9049b3130860445a257ee095
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Aug 11 10:25:32 2020 +0100

    drm/i915: Drop runtime-pm assert from vgpu io accessors
    
    commit 5c6c13cd1102caf92d006a3cf4591c0229019daf upstream.
    
    The "mmio" writes into vgpu registers are simple memory traps from the
    guest into the host. We do not need to assert in the guest that the
    device is awake for the io as we do not write to the device itself.
    
    However, over time we have refactored all the mmio accessors with the
    result that the vgpu reuses the gen2 accessors and so inherits the
    assert for runtime-pm of the native device. The assert though has
    actually been there since commit 3be0bf5acca6 ("drm/i915: Create vGPU
    specific MMIO operations to reduce traps").
    
    References: 3be0bf5acca6 ("drm/i915: Create vGPU specific MMIO operations to reduce traps")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Yan Zhao <yan.y.zhao@intel.com>
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20200811092532.13753-1-chris@chris-wilson.co.uk
    (cherry picked from commit 0e65ce24a33c1d37da4bf43c34e080334ec6cb60)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d321f127eb51ac533b473e56a21b6c65fc9a974a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Oct 15 20:50:23 2020 +0100

    drm/i915/gt: Delay execlist processing for tgl
    
    commit 9b99e5ba3e5d68039bd6b657e4bbe520a3521f4c upstream.
    
    When running gem_exec_nop, it floods the system with many requests (with
    the goal of userspace submitting faster than the HW can process a single
    empty batch). This causes the driver to continually resubmit new
    requests onto the end of an active context, a flood of lite-restore
    preemptions. If we time this just right, Tigerlake hangs.
    
    Inserting a small delay between the processing of CS events and
    submitting the next context, prevents the hang. Naturally it does not
    occur with debugging enabled. The suspicion then is that this is related
    to the issues with the CS event buffer, and inserting an mmio read of
    the CS pointer status appears to be very successful in preventing the
    hang. Other registers, or uncached reads, or plain mb, do not prevent
    the hang, suggesting that register is key -- but that the hang can be
    prevented by a simple udelay, suggests it is just a timing issue like
    that encountered by commit 233c1ae3c83f ("drm/i915/gt: Wait for CSB
    entries on Tigerlake"). Also note that the hang is not prevented by
    applying CTX_DESC_FORCE_RESTORE, or by inserting a delay on the GPU
    between requests.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Bruce Chang <yu.bruce.chang@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Acked-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201015195023.32346-1-chris@chris-wilson.co.uk
    (cherry picked from commit 6ca7217dffaf1abba91558e67a2efb655ac91405)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bcd18bf80827702243d868314068be7a50128ea
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Sep 16 10:00:58 2020 +0100

    drm/i915: Break up error capture compression loops with cond_resched()
    
    commit 7d5553147613b50149238ac1385c60e5c7cacb34 upstream.
    
    As the error capture will compress user buffers as directed to by the
    user, it can take an arbitrary amount of time and space. Break up the
    compression loops with a call to cond_resched(), that will allow other
    processes to schedule (avoiding the soft lockups) and also serve as a
    warning should we try to make this loop atomic in the future.
    
    Testcase: igt/gem_exec_capture/many-*
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200916090059.3189-2-chris@chris-wilson.co.uk
    (cherry picked from commit 293f43c80c0027ff9299036c24218ac705ce584e)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
