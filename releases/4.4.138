commit 0bd2bedb3501db249b347e5acbfd3415bd7667a5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jun 16 09:54:27 2018 +0200

    Linux 4.4.138

commit 5635242c85b23dc289cdc4b0a28b443c7ffe23c1
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 3 22:29:29 2018 +1000

    crypto: vmx - Remove overly verbose printk from AES init routines
    
    commit 1411b5218adbcf1d45ddb260db5553c52e8d917c upstream.
    
    In the vmx AES init routines we do a printk(KERN_INFO ...) to report
    the fallback implementation we're using.
    
    However with a slow console this can significantly affect the speed of
    crypto operations. Using 'cryptsetup benchmark' the removal of the
    printk() leads to a ~5x speedup for aes-cbc decryption.
    
    So remove them.
    
    Fixes: 8676590a1593 ("crypto: vmx - Adding AES routines for VMX module")
    Fixes: 8c755ace357c ("crypto: vmx - Adding CBC routines for VMX module")
    Fixes: 4f7f60d312b3 ("crypto: vmx - Adding CTR routines for VMX module")
    Fixes: cc333cd68dfa ("crypto: vmx - Adding GHASH routines for VMX module")
    Cc: stable@vger.kernel.org # v4.1+
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47d1aa22304853cfc24f2e6a2b589713e65d99ad
Author: Johannes Wienke <languitar@semipol.de>
Date:   Mon Jun 4 13:37:26 2018 -0700

    Input: elan_i2c - add ELAN0612 (Lenovo v330 14IKB) ACPI ID
    
    commit e6e7e9cd8eed0e18217c899843bffbe8c7dae564 upstream.
    
    Add ELAN0612 to the list of supported touchpads; this ID is used in Lenovo
    v330 14IKB devices.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199253
    Signed-off-by: Johannes Wienke <languitar@semipol.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 646dbf05a86e52f9c5a532fd83a42d3195a2ebac
Author: Ethan Lee <flibitijibibo@gmail.com>
Date:   Thu May 31 16:13:17 2018 -0700

    Input: goodix - add new ACPI id for GPD Win 2 touch screen
    
    commit 5ca4d1ae9bad0f59bd6f851c39b19f5366953666 upstream.
    
    GPD Win 2 Website: http://www.gpd.hk/gpdwin2.asp
    
    Tested on a unit from the first production run sent to Indiegogo backers
    
    Signed-off-by: Ethan Lee <flibitijibibo@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25bdf0807b52fc99c3e7a6b424a9e847510dab15
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 17:38:09 2018 +0200

    kvm: x86: use correct privilege level for sgdt/sidt/fxsave/fxrstor access
    
    commit 3c9fa24ca7c9c47605672916491f79e8ccacb9e6 upstream.
    
    The functions that were used in the emulation of fxrstor, fxsave, sgdt and
    sidt were originally meant for task switching, and as such they did not
    check privilege levels.  This is very bad when the same functions are used
    in the emulation of unprivileged instructions.  This is CVE-2018-10853.
    
    The obvious fix is to add a new argument to ops->read_std and ops->write_std,
    which decides whether the access is a "system" access or should use the
    processor's CPL.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b13b60e88ce8a72ed6267b4c653b58761530791f
Author: Gil Kupfer <gilkup@gmail.com>
Date:   Fri Jun 1 00:47:47 2018 -0700

    vmw_balloon: fixing double free when batching mode is off
    
    commit b23220fe054e92f616b82450fae8cd3ab176cc60 upstream.
    
    The balloon.page field is used for two different purposes if batching is
    on or off. If batching is on, the field point to the page which is used
    to communicate with with the hypervisor. If it is off, balloon.page
    points to the page that is about to be (un)locked.
    
    Unfortunately, this dual-purpose of the field introduced a bug: when the
    balloon is popped (e.g., when the machine is reset or the balloon driver
    is explicitly removed), the balloon driver frees, unconditionally, the
    page that is held in balloon.page.  As a result, if batching is
    disabled, this leads to double freeing the last page that is sent to the
    hypervisor.
    
    The following error occurs during rmmod when kernel checkers are on, and
    the balloon is not empty:
    
    [   42.307653] ------------[ cut here ]------------
    [   42.307657] Kernel BUG at ffffffffba1e4b28 [verbose debug info unavailable]
    [   42.307720] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC
    [   42.312512] Modules linked in: vmw_vsock_vmci_transport vsock ppdev joydev vmw_balloon(-) input_leds serio_raw vmw_vmci parport_pc shpchp parport i2c_piix4 nfit mac_hid autofs4 vmwgfx drm_kms_helper hid_generic syscopyarea sysfillrect usbhid sysimgblt fb_sys_fops hid ttm mptspi scsi_transport_spi ahci mptscsih drm psmouse vmxnet3 libahci mptbase pata_acpi
    [   42.312766] CPU: 10 PID: 1527 Comm: rmmod Not tainted 4.12.0+ #5
    [   42.312803] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 09/30/2016
    [   42.313042] task: ffff9bf9680f8000 task.stack: ffffbfefc1638000
    [   42.313290] RIP: 0010:__free_pages+0x38/0x40
    [   42.313510] RSP: 0018:ffffbfefc163be98 EFLAGS: 00010246
    [   42.313731] RAX: 000000000000003e RBX: ffffffffc02b9720 RCX: 0000000000000006
    [   42.313972] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff9bf97e08e0a0
    [   42.314201] RBP: ffffbfefc163be98 R08: 0000000000000000 R09: 0000000000000000
    [   42.314435] R10: 0000000000000000 R11: 0000000000000000 R12: ffffffffc02b97e4
    [   42.314505] R13: ffffffffc02b9748 R14: ffffffffc02b9728 R15: 0000000000000200
    [   42.314550] FS:  00007f3af5fec700(0000) GS:ffff9bf97e080000(0000) knlGS:0000000000000000
    [   42.314599] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   42.314635] CR2: 00007f44f6f4ab24 CR3: 00000003a7d12000 CR4: 00000000000006e0
    [   42.314864] Call Trace:
    [   42.315774]  vmballoon_pop+0x102/0x130 [vmw_balloon]
    [   42.315816]  vmballoon_exit+0x42/0xd64 [vmw_balloon]
    [   42.315853]  SyS_delete_module+0x1e2/0x250
    [   42.315891]  entry_SYSCALL_64_fastpath+0x23/0xc2
    [   42.315924] RIP: 0033:0x7f3af5b0e8e7
    [   42.315949] RSP: 002b:00007fffe6ce0148 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [   42.315996] RAX: ffffffffffffffda RBX: 000055be676401e0 RCX: 00007f3af5b0e8e7
    [   42.316951] RDX: 000000000000000a RSI: 0000000000000800 RDI: 000055be67640248
    [   42.317887] RBP: 0000000000000003 R08: 0000000000000000 R09: 1999999999999999
    [   42.318845] R10: 0000000000000883 R11: 0000000000000206 R12: 00007fffe6cdf130
    [   42.319755] R13: 0000000000000000 R14: 0000000000000000 R15: 000055be676401e0
    [   42.320606] Code: c0 74 1c f0 ff 4f 1c 74 02 5d c3 85 f6 74 07 e8 0f d8 ff ff 5d c3 31 f6 e8 c6 fb ff ff 5d c3 48 c7 c6 c8 0f c5 ba e8 58 be 02 00 <0f> 0b 66 0f 1f 44 00 00 66 66 66 66 90 48 85 ff 75 01 c3 55 48
    [   42.323462] RIP: __free_pages+0x38/0x40 RSP: ffffbfefc163be98
    [   42.325735] ---[ end trace 872e008e33f81508 ]---
    
    To solve the bug, we eliminate the dual purpose of balloon.page.
    
    Fixes: f220a80f0c2e ("VMware balloon: add batching to the vmw_balloon.")
    Cc: stable@vger.kernel.org
    Reported-by: Oleksandr Natalenko <onatalen@redhat.com>
    Signed-off-by: Gil Kupfer <gilkup@gmail.com>
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Reviewed-by: Xavier Deguillard <xdeguillard@vmware.com>
    Tested-by: Oleksandr Natalenko <oleksandr@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ffaa6e0f361e1bb20bd54c5f7df6daa381ecd7c
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 10 08:41:13 2018 +0200

    serial: samsung: fix maxburst parameter for DMA transactions
    
    commit aa2f80e752c75e593b3820f42c416ed9458fa73e upstream.
    
    The best granularity of residue that DMA engine can report is in the BURST
    units, so the serial driver must use MAXBURST = 1 and DMA_SLAVE_BUSWIDTH_1_BYTE
    if it relies on exact number of bytes transferred by DMA engine.
    
    Fixes: 62c37eedb74c ("serial: samsung: add dma reqest/release functions")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 326908105f21d20eba5d8887a040ebc56bda8af3
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 17:37:49 2018 +0200

    KVM: x86: pass kvm_vcpu to kvm_read_guest_virt and kvm_write_guest_virt_system
    
    commit ce14e868a54edeb2e30cb7a7b104a2fc4b9d76ca upstream.
    
    Int the next patch the emulator's .read_std and .write_std callbacks will
    grow another argument, which is not needed in kvm_read_guest_virt and
    kvm_write_guest_virt_system's callers.  Since we have to make separate
    functions, let's give the currently existing names a nicer interface, too.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8417244a3aac8dd083dd1cb4407f1e1e77b2bd24
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 6 16:43:02 2018 +0200

    KVM: x86: introduce linear_{read,write}_system
    
    commit 79367a65743975e5cac8d24d08eccc7fdae832b0 upstream.
    
    Wrap the common invocation of ctxt->ops->read_std and ctxt->ops->write_std, so
    as to have a smaller patch when the functions grow another argument.
    
    Fixes: 129a72a0d3c8 ("KVM: x86: Introduce segmented_write_std", 2017-01-12)
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09b20d9a7c862d6161b0260b235c10e9ae596590
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 27 12:12:25 2017 -0700

    Clarify (and fix) MAX_LFS_FILESIZE macros
    
    commit 0cc3b0ec23ce4c69e1e890ed2b8d2fa932b14aad upstream.
    
    We have a MAX_LFS_FILESIZE macro that is meant to be filled in by
    filesystems (and other IO targets) that know they are 64-bit clean and
    don't have any 32-bit limits in their IO path.
    
    It turns out that our 32-bit value for that limit was bogus.  On 32-bit,
    the VM layer is limited by the page cache to only 32-bit index values,
    but our logic for that was confusing and actually wrong.  We used to
    define that value to
    
            (((loff_t)PAGE_SIZE << (BITS_PER_LONG-1))-1)
    
    which is actually odd in several ways: it limits the index to 31 bits,
    and then it limits files so that they can't have data in that last byte
    of a page that has the highest 31-bit index (ie page index 0x7fffffff).
    
    Neither of those limitations make sense.  The index is actually the full
    32 bit unsigned value, and we can use that whole full page.  So the
    maximum size of the file would logically be "PAGE_SIZE << BITS_PER_LONG".
    
    However, we do wan tto avoid the maximum index, because we have code
    that iterates over the page indexes, and we don't want that code to
    overflow.  So the maximum size of a file on a 32-bit host should
    actually be one page less than the full 32-bit index.
    
    So the actual limit is ULONG_MAX << PAGE_SHIFT.  That means that we will
    not actually be using the page of that last index (ULONG_MAX), but we
    can grow a file up to that limit.
    
    The wrong value of MAX_LFS_FILESIZE actually caused problems for Doug
    Nazar, who was still using a 32-bit host, but with a 9.7TB 2 x RAID5
    volume.  It turns out that our old MAX_LFS_FILESIZE was 8TiB (well, one
    byte less), but the actual true VM limit is one page less than 16TiB.
    
    This was invisible until commit c2a9737f45e2 ("vfs,mm: fix a dead loop
    in truncate_inode_pages_range()"), which started applying that
    MAX_LFS_FILESIZE limit to block devices too.
    
    NOTE! On 64-bit, the page index isn't a limiter at all, and the limit is
    actually just the offset type itself (loff_t), which is signed.  But for
    clarity, on 64-bit, just use the maximum signed value, and don't make
    people have to count the number of 'f' characters in the hex constant.
    
    So just use LLONG_MAX for the 64-bit case.  That was what the value had
    been before too, just written out as a hex constant.
    
    Fixes: c2a9737f45e2 ("vfs,mm: fix a dead loop in truncate_inode_pages_range()")
    Reported-and-tested-by: Doug Nazar <nazard@nazar.ca>
    Cc: Andreas Dilger <adilger@dilger.ca>
    Cc: Mark Fasheh <mfasheh@versity.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Dave Kleikamp <shaggy@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Rafael Tinoco <rafael.tinoco@linaro.org>
    [backported to 4.4.y due to requests of failed LTP tests - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4f78b5732bc1392dea7ce401c7fedb91f14e1b9
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jan 16 08:29:50 2018 +0100

    gpio: No NULL owner
    
    commit 7d18f0a14aa6a0d6bad39111c1fb655f07f71d59 upstream.
    
    Sometimes a GPIO is fetched with NULL as parent device, and
    that is just fine. So under these circumstances, avoid using
    dev_name() to provide a name for the GPIO line.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Daniel Rosenberg <drosen@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81613ccd7935cc8f9068c6d9bfdd4f75ca43f8f6
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Oct 4 20:34:30 2016 -0400

    x86/crypto, x86/fpu: Remove X86_FEATURE_EAGER_FPU #ifdef from the crc32c code
    
    commit 02f39b2379fb81557ae864ec8f85421c0250c954 upstream.
    
    The crypto code was checking both use_eager_fpu() and
    defined(X86_FEATURE_EAGER_FPU).  The latter was nonsensical, so
    remove it.  This will avoid breakage when we remove
    X86_FEATURE_EAGER_FPU.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: pbonzini@redhat.com
    Link: http://lkml.kernel.org/r/1475627678-20788-2-git-send-email-riel@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 702b477de1db146435a9f56deabeabb515972c04
Author: Kevin Easton <kevin@guarana.org>
Date:   Sat Apr 7 11:40:33 2018 -0400

    af_key: Always verify length of provided sadb_key
    
    commit 4b66af2d6356a00e94bcdea3e7fea324e8b5c6f4 upstream.
    
    Key extensions (struct sadb_key) include a user-specified number of key
    bits.  The kernel uses that number to determine how much key data to copy
    out of the message in pfkey_msg2xfrm_state().
    
    The length of the sadb_key message must be verified to be long enough,
    even in the case of SADB_X_AALG_NULL.  Furthermore, the sadb_key_len value
    must be long enough to include both the key data and the struct sadb_key
    itself.
    
    Introduce a helper function verify_key_len(), and call it from
    parse_exthdrs() where other exthdr types are similarly checked for
    correctness.
    
    Signed-off-by: Kevin Easton <kevin@guarana.org>
    Reported-by: syzbot+5022a34ca5a3d49b84223653fab632dfb7b4cf37@syzkaller.appspotmail.com
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85191ed0a2280a6fb9cd622ac7c99c23914dd422
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Jan 24 14:38:06 2016 -0800

    x86/fpu: Fix math emulation in eager fpu mode
    
    commit 4ecd16ec7059390b430af34bd8bc3ca2b5dcef9a upstream.
    
    Systems without an FPU are generally old and therefore use lazy FPU
    switching. Unsurprisingly, math emulation in eager FPU mode is a
    bit buggy. Fix it.
    
    There were two bugs involving kernel code trying to use the FPU
    registers in eager mode even if they didn't exist and one BUG_ON()
    that was incorrect.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/b4b8d112436bd6fab866e1b4011131507e8d7fbe.1453675014.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2dd28441a3cffab0f66b4e3f5c6681b93cb3ad7
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Jan 24 14:38:07 2016 -0800

    x86/fpu: Fix FNSAVE usage in eagerfpu mode
    
    commit 5ed73f40735c68d8a656b46d09b1885d3b8740ae upstream.
    
    In eager fpu mode, having deactivated FPU without immediately
    reloading some other context is illegal.  Therefore, to recover from
    FNSAVE, we can't just deactivate the state -- we need to reload it
    if we're not actively context switching.
    
    We had this wrong in fpu__save() and fpu__copy().  Fix both.
    __kernel_fpu_begin() was fine -- add a comment.
    
    This fixes a warning triggerable with nofxsr eagerfpu=on.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/60662444e13c76f06e23c15c5dcdba31b4ac3d67.1453675014.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c3adb3c7ec4285c1958b42846684924d0be3d58
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Oct 4 20:34:31 2016 -0400

    x86/fpu: Hard-disable lazy FPU mode
    
    commit ca6938a1cd8a1c5e861a99b67f84ac166fc2b9e7 upstream.
    
    Since commit:
    
      58122bf1d856 ("x86/fpu: Default eagerfpu=on on all CPUs")
    
    ... in Linux 4.6, eager FPU mode has been the default on all x86
    systems, and no one has reported any regressions.
    
    This patch removes the ability to enable lazy mode: use_eager_fpu()
    becomes "return true" and all of the FPU mode selection machinery is
    removed.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: pbonzini@redhat.com
    Link: http://lkml.kernel.org/r/1475627678-20788-3-git-send-email-riel@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8edb1d7e567fc2eb0a4f083de6997f1e9b30123b
Author: Borislav Petkov <bp@alien8.de>
Date:   Fri Mar 11 12:32:06 2016 +0100

    x86/fpu: Fix eager-FPU handling on legacy FPU machines
    
    commit 6e6867093de35141f0a76b66ac13f9f2e2c8e77a upstream.
    
    i486 derived cores like Intel Quark support only the very old,
    legacy x87 FPU (FSAVE/FRSTOR, CPUID bit FXSR is not set), and
    our FPU code wasn't handling the saving and restoring there
    properly in the 'eagerfpu' case.
    
    So after we made eagerfpu the default for all CPU types:
    
      58122bf1d856 x86/fpu: Default eagerfpu=on on all CPUs
    
    these old FPU designs broke. First, Andy Shevchenko reported a splat:
    
      WARNING: CPU: 0 PID: 823 at arch/x86/include/asm/fpu/internal.h:163 fpu__clear+0x8c/0x160
    
    which was us trying to execute FXRSTOR on those machines even though
    they don't support it.
    
    After taking care of that, Bryan O'Donoghue reported that a simple FPU
    test still failed because we weren't initializing the FPU state properly
    on those machines.
    
    Take care of all that.
    
    Reported-and-tested-by: Bryan O'Donoghue <pure.logic@nexus-software.ie>
    Reported-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Yu-cheng <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/20160311113206.GD4312@pd.tnic
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93deddfd9b249d7fe5daf5eee59b071ecd333b8d
Author: Yu-cheng Yu <yu-cheng.yu@intel.com>
Date:   Wed Mar 9 16:28:54 2016 -0800

    x86/fpu: Revert ("x86/fpu: Disable AVX when eagerfpu is off")
    
    commit a65050c6f17e52442716138d48d0a47301a8344b upstream.
    
    Leonid Shatz noticed that the SDM interpretation of the following
    recent commit:
    
      394db20ca240741 ("x86/fpu: Disable AVX when eagerfpu is off")
    
    ... is incorrect and that the original behavior of the FPU code was correct.
    
    Because AVX is not stated in CR0 TS bit description, it was mistakenly
    believed to be not supported for lazy context switch. This turns out
    to be false:
    
      Intel Software Developer's Manual Vol. 3A, Sec. 2.5 Control Registers:
    
       'TS Task Switched bit (bit 3 of CR0) -- Allows the saving of the x87 FPU/
        MMX/SSE/SSE2/SSE3/SSSE3/SSE4 context on a task switch to be delayed until
        an x87 FPU/MMX/SSE/SSE2/SSE3/SSSE3/SSE4 instruction is actually executed
        by the new task.'
    
      Intel Software Developer's Manual Vol. 2A, Sec. 2.4 Instruction Exception
      Specification:
    
       'AVX instructions refer to exceptions by classes that include #NM
        "Device Not Available" exception for lazy context switch.'
    
    So revert the commit.
    
    Reported-by: Leonid Shatz <leonid.shatz@ravellosystems.com>
    Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1457569734-3785-1-git-send-email-yu-cheng.yu@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e005aa5597ca9759954ea8131fe139f2f53c1f6
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Jan 21 15:24:31 2016 -0800

    x86/fpu: Fix 'no387' regression
    
    commit f363938c70a04e6bc99023a5e0c44ef7879b903f upstream.
    
    After fixing FPU option parsing, we now parse the 'no387' boot option
    too early: no387 clears X86_FEATURE_FPU before it's even probed, so
    the boot CPU promptly re-enables it.
    
    I suspect it gets even more confused on SMP.
    
    Fix the probing code to leave X86_FEATURE_FPU off if it's been
    disabled by setup_clear_cpu_cap().
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Fixes: 4f81cbafcce2 ("x86/fpu: Fix early FPU command-line parsing")
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d9af7dc0cd4d46bc34ac8656373188d8991f13c
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Jan 24 14:38:10 2016 -0800

    x86/fpu: Default eagerfpu=on on all CPUs
    
    commit 58122bf1d856a4ea9581d62a07c557d997d46a19 upstream.
    
    We have eager and lazy FPU modes, introduced in:
    
      304bceda6a18 ("x86, fpu: use non-lazy fpu restore for processors supporting xsave")
    
    The result is rather messy.  There are two code paths in almost all
    of the FPU code, and only one of them (the eager case) is tested
    frequently, since most kernel developers have new enough hardware
    that we use eagerfpu.
    
    It seems that, on any remotely recent hardware, eagerfpu is a win:
    glibc uses SSE2, so laziness is probably overoptimistic, and, in any
    case, manipulating TS is far slower that saving and restoring the
    full state.  (Stores to CR0.TS are serializing and are poorly
    optimized.)
    
    To try to shake out any latent issues on old hardware, this changes
    the default to eager on all CPUs.  If no performance or functionality
    problems show up, a subsequent patch could remove lazy mode entirely.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/ac290de61bf08d9cfc2664a4f5080257ffc1075a.1453675014.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 747fd4e679fc692448b80c627b46517e841afee3
Author: yu-cheng yu <yu-cheng.yu@intel.com>
Date:   Wed Jan 6 14:24:54 2016 -0800

    x86/fpu: Disable AVX when eagerfpu is off
    
    commit 394db20ca240741a08d472173db13d6f6a6e5a28 upstream.
    
    When "eagerfpu=off" is given as a command-line input, the kernel
    should disable AVX support.
    
    The Task Switched bit used for lazy context switching does not
    support AVX. If AVX is enabled without eagerfpu context
    switching, one task's AVX state could become corrupted or leak
    to other tasks. This is a bug and has bad security implications.
    
    This only affects systems that have AVX/AVX2/AVX512 and this
    issue will be found only when one actually uses AVX/AVX2/AVX512
    _AND_ does eagerfpu=off.
    
    Reference: Intel Software Developer's Manual Vol. 3A
    
    Sec. 2.5 Control Registers:
    TS Task Switched bit (bit 3 of CR0) -- Allows the saving of the
    x87 FPU/ MMX/SSE/SSE2/SSE3/SSSE3/SSE4 context on a task switch
    to be delayed until an x87 FPU/MMX/SSE/SSE2/SSE3/SSSE3/SSE4
    instruction is actually executed by the new task.
    
    Sec. 13.4.1 Using the TS Flag to Control the Saving of the X87
    FPU and SSE State
    When the TS flag is set, the processor monitors the instruction
    stream for x87 FPU, MMX, SSE instructions. When the processor
    detects one of these instructions, it raises a
    device-not-available exeception (#NM) prior to executing the
    instruction.
    
    Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/1452119094-7252-5-git-send-email-yu-cheng.yu@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63b20af859e04863e8fd96f3a691882271782bab
Author: yu-cheng yu <yu-cheng.yu@intel.com>
Date:   Wed Jan 6 14:24:53 2016 -0800

    x86/fpu: Disable MPX when eagerfpu is off
    
    commit a5fe93a549c54838063d2952dd9643b0b18aa67f upstream.
    
    This issue is a fallout from the command-line parsing move.
    
    When "eagerfpu=off" is given as a command-line input, the kernel
    should disable MPX support. The decision for turning off MPX was
    made in fpu__init_system_ctx_switch(), which is after the
    selection of the XSAVE format. This patch fixes it by getting
    that decision done earlier in fpu__init_system_xstate().
    
    Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/1452119094-7252-4-git-send-email-yu-cheng.yu@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 082efbb0481166d69ddd53c661153cf8d636910b
Author: Borislav Petkov <bp@suse.de>
Date:   Mon Dec 7 10:39:41 2015 +0100

    x86/cpufeature: Remove unused and seldomly used cpu_has_xx macros
    
    commit 362f924b64ba0f4be2ee0cb697690c33d40be721 upstream.
    
    Those are stupid and code should use static_cpu_has_safe() or
    boot_cpu_has() instead. Kill the least used and unused ones.
    
    The remaining ones need more careful inspection before a conversion can
    happen. On the TODO.
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/1449481182-27541-4-git-send-email-bp@alien8.de
    Cc: David Sterba <dsterba@suse.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Matt Mackall <mpm@selenic.com>
    Cc: Chris Mason <clm@fb.com>
    Cc: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3de8b83b0d02a32ae5315d56a258bc18058c6797
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 17 13:05:43 2015 +0100

    x86: Remove unused function cpu_has_ht_siblings()
    
    commit ed29210cd6a67425026e78aa298fa434e11a74e3 upstream.
    
    It is used nowhere.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Link: http://lkml.kernel.org/r/1447761943-770-1-git-send-email-jgross@suse.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1e6f6d18c80627415b399572c93e5ac5429f254
Author: yu-cheng yu <yu-cheng.yu@intel.com>
Date:   Wed Jan 6 14:24:51 2016 -0800

    x86/fpu: Fix early FPU command-line parsing
    
    commit 4f81cbafcce2c603db7865e9d0e461f7947d77d4 upstream.
    
    The function fpu__init_system() is executed before
    parse_early_param(). This causes wrong FPU configuration. This
    patch fixes this issue by parsing boot_command_line in the
    beginning of fpu__init_system().
    
    With all four patches in this series, each parameter disables
    features as the following:
    
    eagerfpu=off: eagerfpu, avx, avx2, avx512, mpx
    no387: fpu
    nofxsr: fxsr, fxsropt, xmm
    noxsave: xsave, xsaveopt, xsaves, xsavec, avx, avx2, avx512,
    mpx, xgetbv1 noxsaveopt: xsaveopt
    noxsaves: xsaves
    
    Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/1452119094-7252-2-git-send-email-yu-cheng.yu@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
