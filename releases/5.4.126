commit ffe4d2a0684d4e6aa6ff066b1cd8663a62f2888c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jun 16 11:59:46 2021 +0200

    Linux 5.4.126
    
    Link: https://lore.kernel.org/r/20210614102646.341387537@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f8837070136db088ad7ff647fbdda85472e6b56
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jun 15 09:26:19 2021 -0700

    proc: only require mm_struct for writing
    
    commit 94f0b2d4a1d0c52035aef425da5e022bd2cb1c71 upstream.
    
    Commit 591a22c14d3f ("proc: Track /proc/$pid/attr/ opener mm_struct") we
    started using __mem_open() to track the mm_struct at open-time, so that
    we could then check it for writes.
    
    But that also ended up making the permission checks at open time much
    stricter - and not just for writes, but for reads too.  And that in turn
    caused a regression for at least Fedora 29, where NIC interfaces fail to
    start when using NetworkManager.
    
    Since only the write side wanted the mm_struct test, ignore any failures
    by __mem_open() at open time, leaving reads unaffected.  The write()
    time verification of the mm_struct pointer will then catch the failure
    case because a NULL pointer will not match a valid 'current->mm'.
    
    Link: https://lore.kernel.org/netdev/YMjTlp2FSJYvoyFa@unreal/
    Fixes: 591a22c14d3f ("proc: Track /proc/$pid/attr/ opener mm_struct")
    Reported-and-tested-by: Leon Romanovsky <leon@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d63f00ec908b3be635ead5d6029cc94246e1f38d
Author: Liangyan <liangyan.peng@linux.alibaba.com>
Date:   Mon Jun 7 20:57:34 2021 +0800

    tracing: Correct the length check which causes memory corruption
    
    commit 3e08a9f9760f4a70d633c328a76408e62d6f80a3 upstream.
    
    We've suffered from severe kernel crashes due to memory corruption on
    our production environment, like,
    
    Call Trace:
    [1640542.554277] general protection fault: 0000 [#1] SMP PTI
    [1640542.554856] CPU: 17 PID: 26996 Comm: python Kdump: loaded Tainted:G
    [1640542.556629] RIP: 0010:kmem_cache_alloc+0x90/0x190
    [1640542.559074] RSP: 0018:ffffb16faa597df8 EFLAGS: 00010286
    [1640542.559587] RAX: 0000000000000000 RBX: 0000000000400200 RCX:
    0000000006e931bf
    [1640542.560323] RDX: 0000000006e931be RSI: 0000000000400200 RDI:
    ffff9a45ff004300
    [1640542.560996] RBP: 0000000000400200 R08: 0000000000023420 R09:
    0000000000000000
    [1640542.561670] R10: 0000000000000000 R11: 0000000000000000 R12:
    ffffffff9a20608d
    [1640542.562366] R13: ffff9a45ff004300 R14: ffff9a45ff004300 R15:
    696c662f65636976
    [1640542.563128] FS:  00007f45d7c6f740(0000) GS:ffff9a45ff840000(0000)
    knlGS:0000000000000000
    [1640542.563937] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [1640542.564557] CR2: 00007f45d71311a0 CR3: 000000189d63e004 CR4:
    00000000003606e0
    [1640542.565279] DR0: 0000000000000000 DR1: 0000000000000000 DR2:
    0000000000000000
    [1640542.566069] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7:
    0000000000000400
    [1640542.566742] Call Trace:
    [1640542.567009]  anon_vma_clone+0x5d/0x170
    [1640542.567417]  __split_vma+0x91/0x1a0
    [1640542.567777]  do_munmap+0x2c6/0x320
    [1640542.568128]  vm_munmap+0x54/0x70
    [1640542.569990]  __x64_sys_munmap+0x22/0x30
    [1640542.572005]  do_syscall_64+0x5b/0x1b0
    [1640542.573724]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [1640542.575642] RIP: 0033:0x7f45d6e61e27
    
    James Wang has reproduced it stably on the latest 4.19 LTS.
    After some debugging, we finally proved that it's due to ftrace
    buffer out-of-bound access using a debug tool as follows:
    [   86.775200] BUG: Out-of-bounds write at addr 0xffff88aefe8b7000
    [   86.780806]  no_context+0xdf/0x3c0
    [   86.784327]  __do_page_fault+0x252/0x470
    [   86.788367]  do_page_fault+0x32/0x140
    [   86.792145]  page_fault+0x1e/0x30
    [   86.795576]  strncpy_from_unsafe+0x66/0xb0
    [   86.799789]  fetch_memory_string+0x25/0x40
    [   86.804002]  fetch_deref_string+0x51/0x60
    [   86.808134]  kprobe_trace_func+0x32d/0x3a0
    [   86.812347]  kprobe_dispatcher+0x45/0x50
    [   86.816385]  kprobe_ftrace_handler+0x90/0xf0
    [   86.820779]  ftrace_ops_assist_func+0xa1/0x140
    [   86.825340]  0xffffffffc00750bf
    [   86.828603]  do_sys_open+0x5/0x1f0
    [   86.832124]  do_syscall_64+0x5b/0x1b0
    [   86.835900]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    commit b220c049d519 ("tracing: Check length before giving out
    the filter buffer") adds length check to protect trace data
    overflow introduced in 0fc1b09ff1ff, seems that this fix can't prevent
    overflow entirely, the length check should also take the sizeof
    entry->array[0] into account, since this array[0] is filled the
    length of trace data and occupy addtional space and risk overflow.
    
    Link: https://lkml.kernel.org/r/20210607125734.1770447-1-liangyan.peng@linux.alibaba.com
    
    Cc: stable@vger.kernel.org
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Xunlei Pang <xlpang@linux.alibaba.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Fixes: b220c049d519 ("tracing: Check length before giving out the filter buffer")
    Reviewed-by: Xunlei Pang <xlpang@linux.alibaba.com>
    Reviewed-by: yinbinbin <yinbinbin@alibabacloud.com>
    Reviewed-by: Wetp Zhang <wetp.zy@linux.alibaba.com>
    Tested-by: James Wang <jnwang@linux.alibaba.com>
    Signed-off-by: Liangyan <liangyan.peng@linux.alibaba.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e4e824b109f1d41ccf223fbb0565d877d6223a2
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Jun 7 21:39:08 2021 -0400

    ftrace: Do not blindly read the ip address in ftrace_bug()
    
    commit 6c14133d2d3f768e0a35128faac8aa6ed4815051 upstream.
    
    It was reported that a bug on arm64 caused a bad ip address to be used for
    updating into a nop in ftrace_init(), but the error path (rightfully)
    returned -EINVAL and not -EFAULT, as the bug caused more than one error to
    occur. But because -EINVAL was returned, the ftrace_bug() tried to report
    what was at the location of the ip address, and read it directly. This
    caused the machine to panic, as the ip was not pointing to a valid memory
    address.
    
    Instead, read the ip address with copy_from_kernel_nofault() to safely
    access the memory, and if it faults, report that the address faulted,
    otherwise report what was in that location.
    
    Link: https://lore.kernel.org/lkml/20210607032329.28671-1-mark-pk.tsai@mediatek.com/
    
    Cc: stable@vger.kernel.org
    Fixes: 05736a427f7e1 ("ftrace: warn on failure to disable mcount callers")
    Reported-by: Mark-PK Tsai <mark-pk.tsai@mediatek.com>
    Tested-by: Mark-PK Tsai <mark-pk.tsai@mediatek.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74430f3f6149f6d9c6655773606cc24a71a0c43b
Author: Ming Lei <ming.lei@redhat.com>
Date:   Wed Jun 2 21:30:29 2021 +0800

    scsi: core: Only put parent device if host state differs from SHOST_CREATED
    
    commit 1e0d4e6225996f05271de1ebcb1a7c9381af0b27 upstream.
    
    get_device(shost->shost_gendev.parent) is called after host state has
    switched to SHOST_RUNNING. scsi_host_dev_release() shouldn't release the
    parent device if host state is still SHOST_CREATED.
    
    Link: https://lore.kernel.org/r/20210602133029.2864069-5-ming.lei@redhat.com
    Cc: Bart Van Assche <bvanassche@acm.org>
    Cc: John Garry <john.garry@huawei.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Tested-by: John Garry <john.garry@huawei.com>
    Reviewed-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e694ddc8f3dea68491bda88e90592f63041d398f
Author: Ming Lei <ming.lei@redhat.com>
Date:   Wed Jun 2 21:30:28 2021 +0800

    scsi: core: Put .shost_dev in failure path if host state changes to RUNNING
    
    commit 11714026c02d613c30a149c3f4c4a15047744529 upstream.
    
    scsi_host_dev_release() only frees dev_name when host state is
    SHOST_CREATED. After host state has changed to SHOST_RUNNING,
    scsi_host_dev_release() no longer cleans up.
    
    Fix this by doing a put_device(&shost->shost_dev) in the failure path when
    host state is SHOST_RUNNING. Move get_device(&shost->shost_gendev) before
    device_add(&shost->shost_dev) so that scsi_host_cls_release() can do a put
    on this reference.
    
    Link: https://lore.kernel.org/r/20210602133029.2864069-4-ming.lei@redhat.com
    Cc: Bart Van Assche <bvanassche@acm.org>
    Cc: Hannes Reinecke <hare@suse.de>
    Reported-by: John Garry <john.garry@huawei.com>
    Tested-by: John Garry <john.garry@huawei.com>
    Reviewed-by: John Garry <john.garry@huawei.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe7bcd794a533d35197cd8bad3e6b622f9f73f81
Author: Ming Lei <ming.lei@redhat.com>
Date:   Wed Jun 2 21:30:27 2021 +0800

    scsi: core: Fix failure handling of scsi_add_host_with_dma()
    
    commit 3719f4ff047e20062b8314c23ec3cab84d74c908 upstream.
    
    When scsi_add_host_with_dma() returns failure, the caller will call
    scsi_host_put(shost) to release everything allocated for this host
    instance. Consequently we can't also free allocated stuff in
    scsi_add_host_with_dma(), otherwise we will end up with a double free.
    
    Strictly speaking, host resource allocations should have been done in
    scsi_host_alloc(). However, the allocations may need information which is
    not yet provided by the driver when that function is called. So leave the
    allocations where they are but rely on host device's release handler to
    free resources.
    
    Link: https://lore.kernel.org/r/20210602133029.2864069-3-ming.lei@redhat.com
    Cc: Bart Van Assche <bvanassche@acm.org>
    Cc: John Garry <john.garry@huawei.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Tested-by: John Garry <john.garry@huawei.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: John Garry <john.garry@huawei.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79296e292d67fa7b5fb8d8c27343683e823872c8
Author: Ming Lei <ming.lei@redhat.com>
Date:   Wed Jun 2 21:30:26 2021 +0800

    scsi: core: Fix error handling of scsi_host_alloc()
    
    commit 66a834d092930cf41d809c0e989b13cd6f9ca006 upstream.
    
    After device is initialized via device_initialize(), or its name is set via
    dev_set_name(), the device has to be freed via put_device().  Otherwise
    device name will be leaked because it is allocated dynamically in
    dev_set_name().
    
    Fix the leak by replacing kfree() with put_device(). Since
    scsi_host_dev_release() properly handles IDA and kthread removal, remove
    special-casing these from the error handling as well.
    
    Link: https://lore.kernel.org/r/20210602133029.2864069-2-ming.lei@redhat.com
    Cc: Bart Van Assche <bvanassche@acm.org>
    Cc: John Garry <john.garry@huawei.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Tested-by: John Garry <john.garry@huawei.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: John Garry <john.garry@huawei.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c9400c4855e3b2b24f5f3e12d13b2a93414a840
Author: Dai Ngo <dai.ngo@oracle.com>
Date:   Wed May 19 17:15:10 2021 -0400

    NFSv4: nfs4_proc_set_acl needs to restore NFS_CAP_UIDGID_NOMAP on error.
    
    commit f8849e206ef52b584cd9227255f4724f0cc900bb upstream.
    
    Currently if __nfs4_proc_set_acl fails with NFS4ERR_BADOWNER it
    re-enables the idmapper by clearing NFS_CAP_UIDGID_NOMAP before
    retrying again. The NFS_CAP_UIDGID_NOMAP remains cleared even if
    the retry fails. This causes problem for subsequent setattr
    requests for v4 server that does not have idmapping configured.
    
    This patch modifies nfs4_proc_set_acl to detect NFS4ERR_BADOWNER
    and NFS4ERR_BADNAME and skips the retry, since the kernel isn't
    involved in encoding the ACEs, and return -EINVAL.
    
    Steps to reproduce the problem:
    
     # mount -o vers=4.1,sec=sys server:/export/test /tmp/mnt
     # touch /tmp/mnt/file1
     # chown 99 /tmp/mnt/file1
     # nfs4_setfacl -a A::unknown.user@xyz.com:wrtncy /tmp/mnt/file1
     Failed setxattr operation: Invalid argument
     # chown 99 /tmp/mnt/file1
     chown: changing ownership of ‘/tmp/mnt/file1’: Invalid argument
     # umount /tmp/mnt
     # mount -o vers=4.1,sec=sys server:/export/test /tmp/mnt
     # chown 99 /tmp/mnt/file1
     #
    
    v2: detect NFS4ERR_BADOWNER and NFS4ERR_BADNAME and skip retry
           in nfs4_proc_set_acl.
    Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86377b239e04211ac5eb29bfc420d2a9f300d6d8
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Jun 1 11:35:56 2021 -0400

    NFSv4: Fix second deadlock in nfs4_evict_inode()
    
    commit c3aba897c6e67fa464ec02b1f17911577d619713 upstream.
    
    If the inode is being evicted but has to return a layout first, then
    that too can cause a deadlock in the corner case where the server
    reboots.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e3c7ebbfac152d08be75c92802a64a1f6471a15
Author: Anna Schumaker <Anna.Schumaker@Netapp.com>
Date:   Wed Jun 2 14:31:20 2021 -0400

    NFS: Fix use-after-free in nfs4_init_client()
    
    commit 476bdb04c501fc64bf3b8464ffddefc8dbe01577 upstream.
    
    KASAN reports a use-after-free when attempting to mount two different
    exports through two different NICs that belong to the same server.
    
    Olga was able to hit this with kernels starting somewhere between 5.7
    and 5.10, but I traced the patch that introduced the clear_bit() call to
    4.13. So something must have changed in the refcounting of the clp
    pointer to make this call to nfs_put_client() the very last one.
    
    Fixes: 8dcbec6d20 ("NFSv41: Handle EXCHID4_FLAG_CONFIRMED_R during NFSv4.1 migration")
    Cc: stable@vger.kernel.org # 4.13+
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83668ab1dbbf064c24d6dc090987b3d359551447
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 9 01:49:13 2021 -0400

    kvm: fix previous commit for 32-bit builds
    
    commit 4422829e8053068e0225e4d0ef42dc41ea7c9ef5 upstream.
    
    array_index_nospec does not work for uint64_t on 32-bit builds.
    However, the size of a memory slot must be less than 20 bits wide
    on those system, since the memory slot must fit in the user
    address space.  So just store it in an unsigned long.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0147af30925a27ca21c2041b9f4b327762346d5e
Author: Leo Yan <leo.yan@linaro.org>
Date:   Sat Jun 5 13:29:57 2021 +0800

    perf session: Correct buffer copying when peeking events
    
    [ Upstream commit 197eecb6ecae0b04bd694432f640ff75597fed9c ]
    
    When peeking an event, it has a short path and a long path.  The short
    path uses the session pointer "one_mmap_addr" to directly fetch the
    event; and the long path needs to read out the event header and the
    following event data from file and fill into the buffer pointer passed
    through the argument "buf".
    
    The issue is in the long path that it copies the event header and event
    data into the same destination address which pointer "buf", this means
    the event header is overwritten.  We are just lucky to run into the
    short path in most cases, so we don't hit the issue in the long path.
    
    This patch adds the offset "hdr_sz" to the pointer "buf" when copying
    the event data, so that it can reserve the event header which can be
    used properly by its caller.
    
    Fixes: 5a52f33adf02 ("perf session: Add perf_session__peek_event()")
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20210605052957.1070720-1-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34769f17e47cd09ec309a6e6638f84f65df253c9
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Tue Jun 1 11:10:05 2021 -0400

    NFSv4: Fix deadlock between nfs4_evict_inode() and nfs4_opendata_get_inode()
    
    [ Upstream commit dfe1fe75e00e4c724ede7b9e593f6f680e446c5f ]
    
    If the inode is being evicted, but has to return a delegation first,
    then it can cause a deadlock in the corner case where the server reboots
    before the delegreturn completes, but while the call to iget5_locked() in
    nfs4_opendata_get_inode() is waiting for the inode free to complete.
    Since the open call still holds a session slot, the reboot recovery
    cannot proceed.
    
    In order to break the logjam, we can turn the delegation return into a
    privileged operation for the case where we're evicting the inode. We
    know that in that case, there can be no other state recovery operation
    that conflicts.
    
    Reported-by: zhangxiaoxu (A) <zhangxiaoxu5@huawei.com>
    Fixes: 5fcdfacc01f3 ("NFSv4: Return delegations synchronously in evict_inode")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0057ecef9f324007c0ba5fcca4ddd131178ce78b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jun 3 15:37:53 2021 +0300

    NFS: Fix a potential NULL dereference in nfs_get_client()
    
    [ Upstream commit 09226e8303beeec10f2ff844d2e46d1371dc58e0 ]
    
    None of the callers are expecting NULL returns from nfs_get_client() so
    this code will lead to an Oops.  It's better to return an error
    pointer.  I expect that this is dead code so hopefully no one is
    affected.
    
    Fixes: 31434f496abb ("nfs: check hostname in nfs_get_client")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3ecd9c09fcc10cf6b2bc67e2990c397c40a8c26
Author: Alaa Hleihel <alaa@nvidia.com>
Date:   Thu Jun 10 10:34:27 2021 +0300

    IB/mlx5: Fix initializing CQ fragments buffer
    
    commit 2ba0aa2feebda680ecfc3c552e867cf4d1b05a3a upstream.
    
    The function init_cq_frag_buf() can be called to initialize the current CQ
    fragments buffer cq->buf, or the temporary cq->resize_buf that is filled
    during CQ resize operation.
    
    However, the offending commit started to use function get_cqe() for
    getting the CQEs, the issue with this change is that get_cqe() always
    returns CQEs from cq->buf, which leads us to initialize the wrong buffer,
    and in case of enlarging the CQ we try to access elements beyond the size
    of the current cq->buf and eventually hit a kernel panic.
    
     [exception RIP: init_cq_frag_buf+103]
      [ffff9f799ddcbcd8] mlx5_ib_resize_cq at ffffffffc0835d60 [mlx5_ib]
      [ffff9f799ddcbdb0] ib_resize_cq at ffffffffc05270df [ib_core]
      [ffff9f799ddcbdc0] llt_rdma_setup_qp at ffffffffc0a6a712 [llt]
      [ffff9f799ddcbe10] llt_rdma_cc_event_action at ffffffffc0a6b411 [llt]
      [ffff9f799ddcbe98] llt_rdma_client_conn_thread at ffffffffc0a6bb75 [llt]
      [ffff9f799ddcbec8] kthread at ffffffffa66c5da1
      [ffff9f799ddcbf50] ret_from_fork_nospec_begin at ffffffffa6d95ddd
    
    Fix it by getting the needed CQE by calling mlx5_frag_buf_get_wqe() that
    takes the correct source buffer as a parameter.
    
    Fixes: 388ca8be0037 ("IB/mlx5: Implement fragmented completion queue (CQ)")
    Link: https://lore.kernel.org/r/90a0e8c924093cfa50a482880ad7e7edb73dc19a.1623309971.git.leonro@nvidia.com
    Signed-off-by: Alaa Hleihel <alaa@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 796d3bd4ac9316e70c181189318cd2bd98af34bc
Author: Sean Christopherson <seanjc@google.com>
Date:   Mon Jun 7 10:57:48 2021 -0700

    KVM: x86: Ensure liveliness of nested VM-Enter fail tracepoint message
    
    commit f31500b0d437a2464ca5972d8f5439e156b74960 upstream.
    
    Use the __string() machinery provided by the tracing subystem to make a
    copy of the string literals consumed by the "nested VM-Enter failed"
    tracepoint.  A complete copy is necessary to ensure that the tracepoint
    can't outlive the data/memory it consumes and deference stale memory.
    
    Because the tracepoint itself is defined by kvm, if kvm-intel and/or
    kvm-amd are built as modules, the memory holding the string literals
    defined by the vendor modules will be freed when the module is unloaded,
    whereas the tracepoint and its data in the ring buffer will live until
    kvm is unloaded (or "indefinitely" if kvm is built-in).
    
    This bug has existed since the tracepoint was added, but was recently
    exposed by a new check in tracing to detect exactly this type of bug.
    
      fmt: '%s%s
      ' current_buffer: ' vmx_dirty_log_t-140127  [003] ....  kvm_nested_vmenter_failed: '
      WARNING: CPU: 3 PID: 140134 at kernel/trace/trace.c:3759 trace_check_vprintf+0x3be/0x3e0
      CPU: 3 PID: 140134 Comm: less Not tainted 5.13.0-rc1-ce2e73ce600a-req #184
      Hardware name: ASUS Q87M-E/Q87M-E, BIOS 1102 03/03/2014
      RIP: 0010:trace_check_vprintf+0x3be/0x3e0
      Code: <0f> 0b 44 8b 4c 24 1c e9 a9 fe ff ff c6 44 02 ff 00 49 8b 97 b0 20
      RSP: 0018:ffffa895cc37bcb0 EFLAGS: 00010282
      RAX: 0000000000000000 RBX: ffffa895cc37bd08 RCX: 0000000000000027
      RDX: 0000000000000027 RSI: 00000000ffffdfff RDI: ffff9766cfad74f8
      RBP: ffffffffc0a041d4 R08: ffff9766cfad74f0 R09: ffffa895cc37bad8
      R10: 0000000000000001 R11: 0000000000000001 R12: ffffffffc0a041d4
      R13: ffffffffc0f4dba8 R14: 0000000000000000 R15: ffff976409f2c000
      FS:  00007f92fa200740(0000) GS:ffff9766cfac0000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000559bd11b0000 CR3: 000000019fbaa002 CR4: 00000000001726e0
      Call Trace:
       trace_event_printf+0x5e/0x80
       trace_raw_output_kvm_nested_vmenter_failed+0x3a/0x60 [kvm]
       print_trace_line+0x1dd/0x4e0
       s_show+0x45/0x150
       seq_read_iter+0x2d5/0x4c0
       seq_read+0x106/0x150
       vfs_read+0x98/0x180
       ksys_read+0x5f/0xe0
       do_syscall_64+0x40/0xb0
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Fixes: 380e0055bc7e ("KVM: nVMX: trace nested VM-Enter failures detected by H/W")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Message-Id: <20210607175748.674002-1-seanjc@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71c751cbb9e88839dc28eef4366828aa70a45f32
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Thu May 27 14:29:16 2021 +0200

    sched/fair: Make sure to update tg contrib for blocked load
    
    commit 02da26ad5ed6ea8680e5d01f20661439611ed776 upstream.
    
    During the update of fair blocked load (__update_blocked_fair()), we
    update the contribution of the cfs in tg->load_avg if cfs_rq's pelt
    has decayed.  Nevertheless, the pelt values of a cfs_rq could have
    been recently updated while propagating the change of a child. In this
    case, cfs_rq's pelt will not decayed because it has already been
    updated and we don't update tg->load_avg.
    
    __update_blocked_fair
      ...
      for_each_leaf_cfs_rq_safe: child cfs_rq
        update cfs_rq_load_avg() for child cfs_rq
        ...
        update_load_avg(cfs_rq_of(se), se, 0)
          ...
          update cfs_rq_load_avg() for parent cfs_rq
                    -propagation of child's load makes parent cfs_rq->load_sum
                     becoming null
            -UPDATE_TG is not set so it doesn't update parent
                     cfs_rq->tg_load_avg_contrib
      ..
      for_each_leaf_cfs_rq_safe: parent cfs_rq
        update cfs_rq_load_avg() for parent cfs_rq
          - nothing to do because parent cfs_rq has already been updated
                    recently so cfs_rq->tg_load_avg_contrib is not updated
        ...
        parent cfs_rq is decayed
          list_del_leaf_cfs_rq parent cfs_rq
              - but it still contibutes to tg->load_avg
    
    we must set UPDATE_TG flags when propagting pending load to the parent
    
    Fixes: 039ae8bcf7a5 ("sched/fair: Fix O(nr_cgroups) in the load balancing path")
    Reported-by: Odin Ugedal <odin@uged.al>
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Odin Ugedal <odin@uged.al>
    Link: https://lkml.kernel.org/r/20210527122916.27683-3-vincent.guittot@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26ab08df86565cde5cdfcdc3c81660ef2dca0ad4
Author: Marco Elver <elver@google.com>
Date:   Thu May 27 12:47:11 2021 +0200

    perf: Fix data race between pin_count increment/decrement
    
    commit 6c605f8371159432ec61cbb1488dcf7ad24ad19a upstream.
    
    KCSAN reports a data race between increment and decrement of pin_count:
    
      write to 0xffff888237c2d4e0 of 4 bytes by task 15740 on cpu 1:
       find_get_context             kernel/events/core.c:4617
       __do_sys_perf_event_open     kernel/events/core.c:12097 [inline]
       __se_sys_perf_event_open     kernel/events/core.c:11933
       ...
      read to 0xffff888237c2d4e0 of 4 bytes by task 15743 on cpu 0:
       perf_unpin_context           kernel/events/core.c:1525 [inline]
       __do_sys_perf_event_open     kernel/events/core.c:12328 [inline]
       __se_sys_perf_event_open     kernel/events/core.c:11933
       ...
    
    Because neither read-modify-write here is atomic, this can lead to one
    of the operations being lost, resulting in an inconsistent pin_count.
    Fix it by adding the missing locking in the CPU-event case.
    
    Fixes: fe4b04fa31a6 ("perf: Cure task_oncpu_function_call() races")
    Reported-by: syzbot+142c9018f5962db69c7e@syzkaller.appspotmail.com
    Signed-off-by: Marco Elver <elver@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210527104711.2671610-1-elver@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8aeb339571c6a7f2637a35320e411a2abed7e758
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Wed May 5 17:14:11 2021 -0700

    vmlinux.lds.h: Avoid orphan section with !SMP
    
    commit d4c6399900364facd84c9e35ce1540b6046c345f upstream.
    
    With x86_64_defconfig and the following configs, there is an orphan
    section warning:
    
    CONFIG_SMP=n
    CONFIG_AMD_MEM_ENCRYPT=y
    CONFIG_HYPERVISOR_GUEST=y
    CONFIG_KVM=y
    CONFIG_PARAVIRT=y
    
    ld: warning: orphan section `.data..decrypted' from `arch/x86/kernel/cpu/vmware.o' being placed in section `.data..decrypted'
    ld: warning: orphan section `.data..decrypted' from `arch/x86/kernel/kvm.o' being placed in section `.data..decrypted'
    
    These sections are created with DEFINE_PER_CPU_DECRYPTED, which
    ultimately turns into __PCPU_ATTRS, which in turn has a section
    attribute with a value of PER_CPU_BASE_SECTION + the section name. When
    CONFIG_SMP is not set, the base section is .data and that is not
    currently handled in any linker script.
    
    Add .data..decrypted to PERCPU_DECRYPTED_SECTION, which is included in
    PERCPU_INPUT -> PERCPU_SECTION, which is include in the x86 linker
    script when either CONFIG_X86_64 or CONFIG_SMP is unset, taking care of
    the warning.
    
    Fixes: ac26963a1175 ("percpu: Introduce DEFINE_PER_CPU_DECRYPTED")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1360
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com> # build
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20210506001410.1026691-1-nathan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc57713afaca68efb1692f0156d7def53f149914
Author: Shay Drory <shayd@nvidia.com>
Date:   Thu Jun 3 16:19:39 2021 +0300

    RDMA/mlx4: Do not map the core_clock page to user space unless enabled
    
    commit 404e5a12691fe797486475fe28cc0b80cb8bef2c upstream.
    
    Currently when mlx4 maps the hca_core_clock page to the user space there
    are read-modifiable registers, one of which is semaphore, on this page as
    well as the clock counter. If user reads the wrong offset, it can modify
    the semaphore and hang the device.
    
    Do not map the hca_core_clock page to the user space unless the device has
    been put in a backwards compatibility mode to support this feature.
    
    After this patch, mlx4 core_clock won't be mapped to user space on the
    majority of existing devices and the uverbs device time feature in
    ibv_query_rt_values_ex() will be disabled.
    
    Fixes: 52033cfb5aab ("IB/mlx4: Add mmap call to map the hardware clock")
    Link: https://lore.kernel.org/r/9632304e0d6790af84b3b706d8c18732bc0d5e27.1622726305.git.leonro@nvidia.com
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64f1fb6acc2ab95982fc4334f351d7576c26f313
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Tue May 25 18:01:34 2021 +0300

    RDMA/ipoib: Fix warning caused by destroying non-initial netns
    
    commit a3e74fb9247cd530dca246699d5eb5a691884d32 upstream.
    
    After the commit 5ce2dced8e95 ("RDMA/ipoib: Set rtnl_link_ops for ipoib
    interfaces"), if the IPoIB device is moved to non-initial netns,
    destroying that netns lets the device vanish instead of moving it back to
    the initial netns, This is happening because default_device_exit() skips
    the interfaces due to having rtnl_link_ops set.
    
    Steps to reporoduce:
      ip netns add foo
      ip link set mlx5_ib0 netns foo
      ip netns delete foo
    
    WARNING: CPU: 1 PID: 704 at net/core/dev.c:11435 netdev_exit+0x3f/0x50
    Modules linked in: xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT
    nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack
    nf_defrag_ipv6 nf_defrag_ipv4 nf_tables nfnetlink tun d
     fuse
    CPU: 1 PID: 704 Comm: kworker/u64:3 Tainted: G S      W  5.13.0-rc1+ #1
    Hardware name: Dell Inc. PowerEdge R630/02C2CP, BIOS 2.1.5 04/11/2016
    Workqueue: netns cleanup_net
    RIP: 0010:netdev_exit+0x3f/0x50
    Code: 48 8b bb 30 01 00 00 e8 ef 81 b1 ff 48 81 fb c0 3a 54 a1 74 13 48
    8b 83 90 00 00 00 48 81 c3 90 00 00 00 48 39 d8 75 02 5b c3 <0f> 0b 5b
    c3 66 66 2e 0f 1f 84 00 00 00 00 00 66 90 0f 1f 44 00
    RSP: 0018:ffffb297079d7e08 EFLAGS: 00010206
    RAX: ffff8eb542c00040 RBX: ffff8eb541333150 RCX: 000000008010000d
    RDX: 000000008010000e RSI: 000000008010000d RDI: ffff8eb440042c00
    RBP: ffffb297079d7e48 R08: 0000000000000001 R09: ffffffff9fdeac00
    R10: ffff8eb5003be000 R11: 0000000000000001 R12: ffffffffa1545620
    R13: ffffffffa1545628 R14: 0000000000000000 R15: ffffffffa1543b20
    FS:  0000000000000000(0000) GS:ffff8ed37fa00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00005601b5f4c2e8 CR3: 0000001fc8c10002 CR4: 00000000003706e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     ops_exit_list.isra.9+0x36/0x70
     cleanup_net+0x234/0x390
     process_one_work+0x1cb/0x360
     ? process_one_work+0x360/0x360
     worker_thread+0x30/0x370
     ? process_one_work+0x360/0x360
     kthread+0x116/0x130
     ? kthread_park+0x80/0x80
     ret_from_fork+0x22/0x30
    
    To avoid the above warning and later on the kernel panic that could happen
    on shutdown due to a NULL pointer dereference, make sure to set the
    netns_refund flag that was introduced by commit 3a5ca857079e ("can: dev:
    Move device back to init netns on owning netns delete") to properly
    restore the IPoIB interfaces to the initial netns.
    
    Fixes: 5ce2dced8e95 ("RDMA/ipoib: Set rtnl_link_ops for ipoib interfaces")
    Link: https://lore.kernel.org/r/20210525150134.139342-1-kamalheib1@gmail.com
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0828219185dbfd3950e3d3d9ee6916722c140b1
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Wed Jun 9 17:21:32 2021 -0700

    usb: typec: mux: Fix copy-paste mistake in typec_mux_match
    
    commit 142d0b24c1b17139f1aaaacae7542a38aa85640f upstream.
    
    Fix the copy-paste mistake in the return path of typec_mux_match(),
    where dev is considered a member of struct typec_switch rather than
    struct typec_mux.
    
    The two structs are identical in regards to having the struct device as
    the first entry, so this provides no functional change.
    
    Fixes: 3370db35193b ("usb: typec: Registering real device entries for the muxes")
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20210610002132.3088083-1-bjorn.andersson@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 139af3b2192cee6c7213879f648a21786aa98751
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon May 24 01:42:42 2021 +0300

    regulator: max77620: Use device_set_of_node_from_dev()
    
    commit 6f55c5dd1118b3076d11d9cb17f5c5f4bc3a1162 upstream.
    
    The MAX77620 driver fails to re-probe on deferred probe because driver
    core tries to claim resources that are already claimed by the PINCTRL
    device. Use device_set_of_node_from_dev() helper which marks OF node as
    reused, skipping erroneous execution of pinctrl_bind_pins() for the PMIC
    device on the re-probe.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20210523224243.13219-2-digetx@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4e10f92c31983d7da0a9f9a281ece1c3da501c1
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Thu May 20 01:12:23 2021 +0300

    regulator: core: resolve supply for boot-on/always-on regulators
    
    commit 98e48cd9283dbac0e1445ee780889f10b3d1db6a upstream.
    
    For the boot-on/always-on regulators the set_machine_constrainst() is
    called before resolving rdev->supply. Thus the code would try to enable
    rdev before enabling supplying regulator. Enforce resolving supply
    regulator before enabling rdev.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20210519221224.2868496-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ef23506695b01d5d56a13a092a97f2478069d75
Author: Maciej Żenczykowski <maze@google.com>
Date:   Tue Jun 8 19:44:59 2021 -0700

    usb: fix various gadget panics on 10gbps cabling
    
    commit 032e288097a553db5653af552dd8035cd2a0ba96 upstream.
    
    usb_assign_descriptors() is called with 5 parameters,
    the last 4 of which are the usb_descriptor_header for:
      full-speed (USB1.1 - 12Mbps [including USB1.0 low-speed @ 1.5Mbps),
      high-speed (USB2.0 - 480Mbps),
      super-speed (USB3.0 - 5Gbps),
      super-speed-plus (USB3.1 - 10Gbps).
    
    The differences between full/high/super-speed descriptors are usually
    substantial (due to changes in the maximum usb block size from 64 to 512
    to 1024 bytes and other differences in the specs), while the difference
    between 5 and 10Gbps descriptors may be as little as nothing
    (in many cases the same tuning is simply good enough).
    
    However if a gadget driver calls usb_assign_descriptors() with
    a NULL descriptor for super-speed-plus and is then used on a max 10gbps
    configuration, the kernel will crash with a null pointer dereference,
    when a 10gbps capable device port + cable + host port combination shows up.
    (This wouldn't happen if the gadget max-speed was set to 5gbps, but
    it of course defaults to the maximum, and there's no real reason to
    artificially limit it)
    
    The fix is to simply use the 5gbps descriptor as the 10gbps descriptor,
    if a 10gbps descriptor wasn't provided.
    
    Obviously this won't fix the problem if the 5gbps descriptor is also
    NULL, but such cases can't be so trivially solved (and any such gadgets
    are unlikely to be used with USB3 ports any way).
    
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210609024459.1126080-1-zenczykowski@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4903f7fdc484628d0b8022daf86e2439d3ab4db
Author: Maciej Żenczykowski <maze@google.com>
Date:   Mon Jun 7 21:41:41 2021 -0700

    usb: fix various gadgets null ptr deref on 10gbps cabling.
    
    commit 90c4d05780d47e14a50e11a7f17373104cd47d25 upstream.
    
    This avoids a null pointer dereference in
    f_{ecm,eem,hid,loopback,printer,rndis,serial,sourcesink,subset,tcm}
    by simply reusing the 5gbps config for 10gbps.
    
    Fixes: eaef50c76057 ("usb: gadget: Update usb_assign_descriptors for SuperSpeedPlus")
    Cc: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: Gustavo A. R. Silva <gustavoars@kernel.org>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Michael R Sweet <msweet@msweet.org>
    Cc: Mike Christie <michael.christie@oracle.com>
    Cc: Pawel Laszczak <pawell@cadence.com>
    Cc: Peter Chen <peter.chen@nxp.com>
    Cc: Sudhakar Panneerselvam <sudhakar.panneerselvam@oracle.com>
    Cc: Wei Ming Chen <jj251510319013@gmail.com>
    Cc: Will McVicker <willmcvicker@google.com>
    Cc: Zqiang <qiang.zhang@windriver.com>
    Reviewed-By: Lorenzo Colitti <lorenzo@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Link: https://lore.kernel.org/r/20210608044141.3898496-1-zenczykowski@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 191144bcfe3a78b93bc4fd6b960d2bc488575c73
Author: Linyu Yuan <linyyuan@codeaurora.com>
Date:   Wed Jun 9 07:35:47 2021 +0800

    usb: gadget: eem: fix wrong eem header operation
    
    commit 305f670846a31a261462577dd0b967c4fa796871 upstream.
    
    when skb_clone() or skb_copy_expand() fail,
    it should pull skb with lengh indicated by header,
    or not it will read network data and check it as header.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Linyu Yuan <linyyuan@codeaurora.com>
    Link: https://lore.kernel.org/r/20210608233547.3767-1-linyyuan@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc40404bd0dd1ccaffd8c94dc30404271d50cbd8
Author: Stefan Agner <stefan@agner.ch>
Date:   Fri May 28 22:39:31 2021 +0200

    USB: serial: cp210x: fix alternate function for CP2102N QFN20
    
    commit 6f7ec77cc8b64ff5037c1945e4650c65c458037d upstream.
    
    The QFN20 part has a different GPIO/port function assignment. The
    configuration struct bit field ordered as TX/RX/RS485/WAKEUP/CLK
    which exactly matches GPIO0-3 for QFN24/28. However, QFN20 has a
    different GPIO to primary function assignment.
    
    Special case QFN20 to follow to properly detect which GPIOs are
    available.
    
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Link: https://lore.kernel.org/r/51830b2b24118eb0f77c5c9ac64ffb2f519dbb1d.1622218300.git.stefan@agner.ch
    Fixes: c8acfe0aadbe ("USB: serial: cp210x: implement GPIO support for CP2102N")
    Cc: stable@vger.kernel.org      # 4.19
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02fafcf74cde2503295f7da86329c41226975278
Author: Johan Hovold <johan@kernel.org>
Date:   Mon May 24 11:17:05 2021 +0200

    USB: serial: quatech2: fix control-request directions
    
    commit eb8dbe80326c3d44c1e38ee4f40e0d8d3e06f2d0 upstream.
    
    The direction of the pipe argument must match the request-type direction
    bit or control requests may fail depending on the host-controller-driver
    implementation.
    
    Fix the three requests which erroneously used usb_rcvctrlpipe().
    
    Fixes: f7a33e608d9a ("USB: serial: add quatech2 usb to serial driver")
    Cc: stable@vger.kernel.org      # 3.5
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eedd4b494538dfe27e100ff4a7f85fdc010164c7
Author: Alexandre GRIVEAUX <agriveaux@deutnet.info>
Date:   Sun May 23 18:35:21 2021 +0200

    USB: serial: omninet: add device id for Zyxel Omni 56K Plus
    
    commit fc0b3dc9a11771c3919eaaaf9d649138b095aa0f upstream.
    
    Add device id for Zyxel Omni 56K Plus modem, this modem include:
    
    USB chip:
    NetChip
    NET2888
    
    Main chip:
    901041A
    F721501APGF
    
    Another modem using the same chips is the Zyxel Omni 56K DUO/NEO,
    could be added with the right USB ID.
    
    Signed-off-by: Alexandre GRIVEAUX <agriveaux@deutnet.info>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2119ad276f1f2da18c088f3dcfdf5c74a085a68
Author: George McCollister <george.mccollister@gmail.com>
Date:   Thu Jun 3 19:32:08 2021 -0500

    USB: serial: ftdi_sio: add NovaTech OrionMX product ID
    
    commit bc96c72df33ee81b24d87eab953c73f7bcc04f29 upstream.
    
    Add PID for the NovaTech OrionMX so it can be automatically detected.
    
    Signed-off-by: George McCollister <george.mccollister@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28b9764eb568253d35efa7b7e1e5948ca6630d88
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Fri May 21 17:44:21 2021 -0700

    usb: gadget: f_fs: Ensure io_completion_wq is idle during unbind
    
    commit 6fc1db5e6211e30fbb1cee8d7925d79d4ed2ae14 upstream.
    
    During unbind, ffs_func_eps_disable() will be executed, resulting in
    completion callbacks for any pending USB requests.  When using AIO,
    irrespective of the completion status, io_data work is queued to
    io_completion_wq to evaluate and handle the completed requests.  Since
    work runs asynchronously to the unbind() routine, there can be a
    scenario where the work runs after the USB gadget has been fully
    removed, resulting in accessing of a resource which has been already
    freed. (i.e. usb_ep_free_request() accessing the USB ep structure)
    
    Explicitly drain the io_completion_wq, instead of relying on the
    destroy_workqueue() (in ffs_data_put()) to make sure no pending
    completion work items are running.
    
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1621644261-1236-1-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fe7635a245b1b70809e3d35b64f244e440eb257
Author: Mayank Rana <mrana@codeaurora.org>
Date:   Wed Jun 9 00:35:35 2021 -0700

    usb: typec: ucsi: Clear PPM capability data in ucsi_init() error path
    
    commit f247f0a82a4f8c3bfed178d8fd9e069d1424ee4e upstream.
    
    If ucsi_init() fails for some reason (e.g. ucsi_register_port()
    fails or general communication failure to the PPM), particularly at
    any point after the GET_CAPABILITY command had been issued, this
    results in unwinding the initialization and returning an error.
    However the ucsi structure's ucsi_capability member retains its
    current value, including likely a non-zero num_connectors.
    And because ucsi_init() itself is done in a workqueue a UCSI
    interface driver will be unaware that it failed and may think the
    ucsi_register() call was completely successful.  Later, if
    ucsi_unregister() is called, due to this stale ucsi->cap value it
    would try to access the items in the ucsi->connector array which
    might not be in a proper state or not even allocated at all and
    results in NULL or invalid pointer dereference.
    
    Fix this by clearing the ucsi->cap value to 0 during the error
    path of ucsi_init() in order to prevent a later ucsi_unregister()
    from entering the connector cleanup loop.
    
    Fixes: c1b0bc2dabfa ("usb: typec: Add support for UCSI interface")
    Cc: stable@vger.kernel.org
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Mayank Rana <mrana@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Link: https://lore.kernel.org/r/20210609073535.5094-1-jackp@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9523c42be98633ffaa4acb525befb7d0ba1c70b8
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Jun 9 20:22:02 2021 +0300

    usb: typec: wcove: Use LE to CPU conversion when accessing msg->header
    
    commit d5ab95da2a41567440097c277c5771ad13928dad upstream.
    
    As LKP noticed the Sparse is not happy about strict type handling:
       .../typec/tcpm/wcove.c:380:50: sparse:     expected unsigned short [usertype] header
       .../typec/tcpm/wcove.c:380:50: sparse:     got restricted __le16 const [usertype] header
    
    Fix this by switching to use pd_header_cnt_le() instead of pd_header_cnt()
    in the affected code.
    
    Fixes: ae8a2ca8a221 ("usb: typec: Group all TCPCI/TCPM code together")
    Fixes: 3c4fb9f16921 ("usb: typec: wcove: start using tcpm for USB PD support")
    Reported-by: kernel test robot <lkp@intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210609172202.83377-1-andriy.shevchenko@linux.intel.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e8ca8c79f748bf01acd854935eaaedcc4e45b8a
Author: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
Date:   Fri May 28 16:04:46 2021 +0200

    usb: musb: fix MUSB_QUIRK_B_DISCONNECT_99 handling
    
    commit b65ba0c362be665192381cc59e3ac3ef6f0dd1e1 upstream.
    
    In commit 92af4fc6ec33 ("usb: musb: Fix suspend with devices
    connected for a64"), the logic to support the
    MUSB_QUIRK_B_DISCONNECT_99 quirk was modified to only conditionally
    schedule the musb->irq_work delayed work.
    
    This commit badly breaks ECM Gadget on AM335X. Indeed, with this
    commit, one can observe massive packet loss:
    
    $ ping 192.168.0.100
    ...
    15 packets transmitted, 3 received, 80% packet loss, time 14316ms
    
    Reverting this commit brings back a properly functioning ECM
    Gadget. An analysis of the commit seems to indicate that a mistake was
    made: the previous code was not falling through into the
    MUSB_QUIRK_B_INVALID_VBUS_91, but now it is, unless the condition is
    taken.
    
    Changing the logic to be as it was before the problematic commit *and*
    only conditionally scheduling musb->irq_work resolves the regression:
    
    $ ping 192.168.0.100
    ...
    64 packets transmitted, 64 received, 0% packet loss, time 64475ms
    
    Fixes: 92af4fc6ec33 ("usb: musb: Fix suspend with devices connected for a64")
    Cc: stable@vger.kernel.org
    Tested-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Tested-by: Drew Fustini <drew@beagleboard.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
    Link: https://lore.kernel.org/r/20210528140446.278076-1-thomas.petazzoni@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 366369b89bedd59b1425386e8d4a18a466e420e4
Author: Marian-Cristian Rotariu <marian.c.rotariu@gmail.com>
Date:   Tue Jun 8 19:26:50 2021 +0300

    usb: dwc3: ep0: fix NULL pointer exception
    
    commit d00889080ab60051627dab1d85831cd9db750e2a upstream.
    
    There is no validation of the index from dwc3_wIndex_to_dep() and we might
    be referring a non-existing ep and trigger a NULL pointer exception. In
    certain configurations we might use fewer eps and the index might wrongly
    indicate a larger ep index than existing.
    
    By adding this validation from the patch we can actually report a wrong
    index back to the caller.
    
    In our usecase we are using a composite device on an older kernel, but
    upstream might use this fix also. Unfortunately, I cannot describe the
    hardware for others to reproduce the issue as it is a proprietary
    implementation.
    
    [   82.958261] Unable to handle kernel NULL pointer dereference at virtual address 00000000000000a4
    [   82.966891] Mem abort info:
    [   82.969663]   ESR = 0x96000006
    [   82.972703]   Exception class = DABT (current EL), IL = 32 bits
    [   82.978603]   SET = 0, FnV = 0
    [   82.981642]   EA = 0, S1PTW = 0
    [   82.984765] Data abort info:
    [   82.987631]   ISV = 0, ISS = 0x00000006
    [   82.991449]   CM = 0, WnR = 0
    [   82.994409] user pgtable: 4k pages, 39-bit VAs, pgdp = 00000000c6210ccc
    [   83.000999] [00000000000000a4] pgd=0000000053aa5003, pud=0000000053aa5003, pmd=0000000000000000
    [   83.009685] Internal error: Oops: 96000006 [#1] PREEMPT SMP
    [   83.026433] Process irq/62-dwc3 (pid: 303, stack limit = 0x000000003985154c)
    [   83.033470] CPU: 0 PID: 303 Comm: irq/62-dwc3 Not tainted 4.19.124 #1
    [   83.044836] pstate: 60000085 (nZCv daIf -PAN -UAO)
    [   83.049628] pc : dwc3_ep0_handle_feature+0x414/0x43c
    [   83.054558] lr : dwc3_ep0_interrupt+0x3b4/0xc94
    
    ...
    
    [   83.141788] Call trace:
    [   83.144227]  dwc3_ep0_handle_feature+0x414/0x43c
    [   83.148823]  dwc3_ep0_interrupt+0x3b4/0xc94
    [   83.181546] ---[ end trace aac6b5267d84c32f ]---
    
    Signed-off-by: Marian-Cristian Rotariu <marian.c.rotariu@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210608162650.58426-1-marian.c.rotariu@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c469c8dddc7d99627ae0426298e3abbc773fc75d
Author: Kyle Tso <kyletso@google.com>
Date:   Fri May 28 16:16:13 2021 +0800

    usb: pd: Set PD_T_SINK_WAIT_CAP to 310ms
    
    commit 6490fa565534fa83593278267785a694fd378a2b upstream.
    
    Current timer PD_T_SINK_WAIT_CAP is set to 240ms which will violate the
    SinkWaitCapTimer (tTypeCSinkWaitCap 310 - 620 ms) defined in the PD
    Spec if the port is faster enough when running the state machine. Set it
    to the lower bound 310ms to ensure the timeout is in Spec.
    
    Fixes: f0690a25a140 ("staging: typec: USB Type-C Port Manager (tcpm)")
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kyle Tso <kyletso@google.com>
    Link: https://lore.kernel.org/r/20210528081613.730661-1-kyletso@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32c2e6c2e4ebb9146949681528716b89b17364d0
Author: Maciej Żenczykowski <maze@google.com>
Date:   Tue Jun 8 01:54:38 2021 -0700

    usb: f_ncm: only first packet of aggregate needs to start timer
    
    commit 1958ff5ad2d4908b44a72bcf564dfe67c981e7fe upstream.
    
    The reasoning for this change is that if we already had
    a packet pending, then we also already had a pending timer,
    and as such there is no need to reschedule it.
    
    This also prevents packets getting delayed 60 ms worst case
    under a tiny packet every 290us transmit load, by keeping the
    timeout always relative to the first queued up packet.
    (300us delay * 16KB max aggregation / 80 byte packet =~ 60 ms)
    
    As such the first packet is now at most delayed by 300us.
    
    Under low transmit load, this will simply result in us sending
    a shorter aggregate, as originally intended.
    
    This patch has the benefit of greatly reducing (by ~10 factor
    with 1500 byte frames aggregated into 16 kiB) the number of
    (potentially pretty costly) updates to the hrtimer.
    
    Cc: Brooke Basile <brookebasile@gmail.com>
    Cc: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Link: https://lore.kernel.org/r/20210608085438.813960-1-zenczykowski@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c05a8bc0e768f8f83979f0e886a1256cc3434e9
Author: Maciej Żenczykowski <maze@google.com>
Date:   Mon Jun 7 17:53:44 2021 -0700

    USB: f_ncm: ncm_bitrate (speed) is unsigned
    
    commit 3370139745853f7826895293e8ac3aec1430508e upstream.
    
    [  190.544755] configfs-gadget gadget: notify speed -44967296
    
    This is because 4250000000 - 2**32 is -44967296.
    
    Fixes: 9f6ce4240a2b ("usb: gadget: f_ncm.c added")
    Cc: Brooke Basile <brookebasile@gmail.com>
    Cc: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: Yauheni Kaliuta <yauheni.kaliuta@nokia.com>
    Cc: Linux USB Mailing List <linux-usb@vger.kernel.org>
    Acked-By: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210608005344.3762668-1-zenczykowski@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d14a82ef1122cbee07e111e9df90f8365d0dbc2
Author: Alexander Kuznetsov <wwfq@yandex-team.ru>
Date:   Wed Jun 9 10:17:19 2021 +0300

    cgroup1: don't allow '\n' in renaming
    
    commit b7e24eb1caa5f8da20d405d262dba67943aedc42 upstream.
    
    cgroup_mkdir() have restriction on newline usage in names:
    $ mkdir $'/sys/fs/cgroup/cpu/test\ntest2'
    mkdir: cannot create directory
    '/sys/fs/cgroup/cpu/test\ntest2': Invalid argument
    
    But in cgroup1_rename() such check is missed.
    This allows us to make /proc/<pid>/cgroup unparsable:
    $ mkdir /sys/fs/cgroup/cpu/test
    $ mv /sys/fs/cgroup/cpu/test $'/sys/fs/cgroup/cpu/test\ntest2'
    $ echo $$ > $'/sys/fs/cgroup/cpu/test\ntest2'
    $ cat /proc/self/cgroup
    11:pids:/
    10:freezer:/
    9:hugetlb:/
    8:cpuset:/
    7:blkio:/user.slice
    6:memory:/user.slice
    5:net_cls,net_prio:/
    4:perf_event:/
    3:devices:/user.slice
    2:cpu,cpuacct:/test
    test2
    1:name=systemd:/
    0::/
    
    Signed-off-by: Alexander Kuznetsov <wwfq@yandex-team.ru>
    Reported-by: Andrey Krasichkov <buglloc@yandex-team.ru>
    Acked-by: Dmitry Yakunin <zeil@yandex-team.ru>
    Cc: stable@vger.kernel.org
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 298499d73d2dd380adb1da4e0e94b36122eb1171
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Mon May 31 12:26:01 2021 +0300

    btrfs: promote debugging asserts to full-fledged checks in validate_super
    
    commit aefd7f7065567a4666f42c0fc8cdb379d2e036bf upstream.
    
    Syzbot managed to trigger this assert while performing its fuzzing.
    Turns out it's better to have those asserts turned into full-fledged
    checks so that in case buggy btrfs images are mounted the users gets
    an error and mounting is stopped. Alternatively with CONFIG_BTRFS_ASSERT
    disabled such image would have been erroneously allowed to be mounted.
    
    Reported-by: syzbot+a6bf271c02e4fe66b4e4@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ add uuids to the messages ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4b047651fb182fa25b3d21d499787c085f3e02f
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Sun May 30 20:24:05 2021 +0530

    btrfs: return value from btrfs_mark_extent_written() in case of error
    
    commit e7b2ec3d3d4ebeb4cff7ae45cf430182fa6a49fb upstream.
    
    We always return 0 even in case of an error in btrfs_mark_extent_written().
    Fix it to return proper error value in case of a failure. All callers
    handle it.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dccd575337ac9949378b096603764743c08f1d59
Author: Wenli Looi <wlooi@ucalgary.ca>
Date:   Mon Jun 7 23:46:20 2021 -0700

    staging: rtl8723bs: Fix uninitialized variables
    
    commit 43c85d770db80cb135f576f8fde6ff1a08e707a4 upstream.
    
    The sinfo.pertid and sinfo.generation variables are not initialized and
    it causes a crash when we use this as a wireless access point.
    
    [  456.873025] ------------[ cut here ]------------
    [  456.878198] kernel BUG at mm/slub.c:3968!
    [  456.882680] Internal error: Oops - BUG: 0 [#1] PREEMPT SMP ARM
    
      [ snip ]
    
    [  457.271004] Backtrace:
    [  457.273733] [<c02b7ee4>] (kfree) from [<c0e2a470>] (nl80211_send_station+0x954/0xfc4)
    [  457.282481]  r9:eccca0c0 r8:e8edfec0 r7:00000000 r6:00000011 r5:e80a9480 r4:e8edfe00
    [  457.291132] [<c0e29b1c>] (nl80211_send_station) from [<c0e2b18c>] (cfg80211_new_sta+0x90/0x1cc)
    [  457.300850]  r10:e80a9480 r9:e8edfe00 r8:ea678cca r7:00000a20 r6:00000000 r5:ec46d000
    [  457.309586]  r4:ec46d9e0
    [  457.312433] [<c0e2b0fc>] (cfg80211_new_sta) from [<bf086684>] (rtw_cfg80211_indicate_sta_assoc+0x80/0x9c [r8723bs])
    [  457.324095]  r10:00009930 r9:e85b9d80 r8:bf091050 r7:00000000 r6:00000000 r5:0000001c
    [  457.332831]  r4:c1606788
    [  457.335692] [<bf086604>] (rtw_cfg80211_indicate_sta_assoc [r8723bs]) from [<bf03df38>] (rtw_stassoc_event_callback+0x1c8/0x1d4 [r8723bs])
    [  457.349489]  r7:ea678cc0 r6:000000a1 r5:f1225f84 r4:f086b000
    [  457.355845] [<bf03dd70>] (rtw_stassoc_event_callback [r8723bs]) from [<bf048e4c>] (mlme_evt_hdl+0x8c/0xb4 [r8723bs])
    [  457.367601]  r7:c1604900 r6:f086c4b8 r5:00000000 r4:f086c000
    [  457.373959] [<bf048dc0>] (mlme_evt_hdl [r8723bs]) from [<bf03693c>] (rtw_cmd_thread+0x198/0x3d8 [r8723bs])
    [  457.384744]  r5:f086e000 r4:f086c000
    [  457.388754] [<bf0367a4>] (rtw_cmd_thread [r8723bs]) from [<c014a214>] (kthread+0x170/0x174)
    [  457.398083]  r10:ed7a57e8 r9:bf0367a4 r8:f086b000 r7:e8ede000 r6:00000000 r5:e9975200
    [  457.406828]  r4:e8369900
    [  457.409653] [<c014a0a4>] (kthread) from [<c01010e8>] (ret_from_fork+0x14/0x2c)
    [  457.417718] Exception stack(0xe8edffb0 to 0xe8edfff8)
    [  457.423356] ffa0:                                     00000000 00000000 00000000 00000000
    [  457.432492] ffc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [  457.441618] ffe0: 00000000 00000000 00000000 00000000 00000013 00000000
    [  457.449006]  r10:00000000 r9:00000000 r8:00000000 r7:00000000 r6:00000000 r5:c014a0a4
    [  457.457750]  r4:e9975200
    [  457.460574] Code: 1a000003 e5953004 e3130001 1a000000 (e7f001f2)
    [  457.467381] ---[ end trace 4acbc8c15e9e6aa7 ]---
    
    Link: https://forum.armbian.com/topic/14727-wifi-ap-kernel-bug-in-kernel-5444/
    Fixes: 8689c051a201 ("cfg80211: dynamically allocate per-tid stats for station info")
    Fixes: f5ea9120be2e ("nl80211: add generation number to all dumps")
    Signed-off-by: Wenli Looi <wlooi@ucalgary.ca>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210608064620.74059-1-wlooi@ucalgary.ca
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bff1fbf0cf0712686f1df59a83fba6e31d2746a0
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 8 15:31:42 2021 -0400

    kvm: avoid speculation-based attacks from out-of-range memslot accesses
    
    commit da27a83fd6cc7780fea190e1f5c19e87019da65c upstream.
    
    KVM's mechanism for accessing guest memory translates a guest physical
    address (gpa) to a host virtual address using the right-shifted gpa
    (also known as gfn) and a struct kvm_memory_slot.  The translation is
    performed in __gfn_to_hva_memslot using the following formula:
    
          hva = slot->userspace_addr + (gfn - slot->base_gfn) * PAGE_SIZE
    
    It is expected that gfn falls within the boundaries of the guest's
    physical memory.  However, a guest can access invalid physical addresses
    in such a way that the gfn is invalid.
    
    __gfn_to_hva_memslot is called from kvm_vcpu_gfn_to_hva_prot, which first
    retrieves a memslot through __gfn_to_memslot.  While __gfn_to_memslot
    does check that the gfn falls within the boundaries of the guest's
    physical memory or not, a CPU can speculate the result of the check and
    continue execution speculatively using an illegal gfn. The speculation
    can result in calculating an out-of-bounds hva.  If the resulting host
    virtual address is used to load another guest physical address, this
    is effectively a Spectre gadget consisting of two consecutive reads,
    the second of which is data dependent on the first.
    
    Right now it's not clear if there are any cases in which this is
    exploitable.  One interesting case was reported by the original author
    of this patch, and involves visiting guest page tables on x86.  Right
    now these are not vulnerable because the hva read goes through get_user(),
    which contains an LFENCE speculation barrier.  However, there are
    patches in progress for x86 uaccess.h to mask kernel addresses instead of
    using LFENCE; once these land, a guest could use speculation to read
    from the VMM's ring 3 address space.  Other architectures such as ARM
    already use the address masking method, and would be susceptible to
    this same kind of data-dependent access gadgets.  Therefore, this patch
    proactively protects from these attacks by masking out-of-bounds gfns
    in __gfn_to_hva_memslot, which blocks speculation of invalid hvas.
    
    Sean Christopherson noted that this patch does not cover
    kvm_read_guest_offset_cached.  This however is limited to a few bytes
    past the end of the cache, and therefore it is unlikely to be useful in
    the context of building a chain of data dependent accesses.
    
    Reported-by: Artemiy Margaritov <artemiy.margaritov@gmail.com>
    Co-developed-by: Artemiy Margaritov <artemiy.margaritov@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 977d11df793280fe592a68896a8e00b9f813e75c
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Wed Jun 9 17:21:19 2021 +0800

    drm: Lock pointer access in drm_master_release()
    
    commit c336a5ee984708db4826ef9e47d184e638e29717 upstream.
    
    This patch eliminates the following smatch warning:
    drivers/gpu/drm/drm_auth.c:320 drm_master_release() warn: unlocked access 'master' (line 318) expected lock '&dev->master_mutex'
    
    The 'file_priv->master' field should be protected by the mutex lock to
    '&dev->master_mutex'. This is because other processes can concurrently
    modify this field and free the current 'file_priv->master'
    pointer. This could result in a use-after-free error when 'master' is
    dereferenced in subsequent function calls to
    'drm_legacy_lock_master_cleanup()' or to 'drm_lease_revoke()'.
    
    An example of a scenario that would produce this error can be seen
    from a similar bug in 'drm_getunique()' that was reported by Syzbot:
    https://syzkaller.appspot.com/bug?id=148d2f1dfac64af52ffd27b661981a540724f803
    
    In the Syzbot report, another process concurrently acquired the
    device's master mutex in 'drm_setmaster_ioctl()', then overwrote
    'fpriv->master' in 'drm_new_set_master()'. The old value of
    'fpriv->master' was subsequently freed before the mutex was unlocked.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210609092119.173590-1-desmondcheongzx@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b246b4c70c1250e7814f409b243000f9c0bf79a3
Author: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
Date:   Tue Jun 8 19:04:36 2021 +0800

    drm: Fix use-after-free read in drm_getunique()
    
    commit b436acd1cf7fac0ba987abd22955d98025c80c2b upstream.
    
    There is a time-of-check-to-time-of-use error in drm_getunique() due
    to retrieving file_priv->master prior to locking the device's master
    mutex.
    
    An example can be seen in the crash report of the use-after-free error
    found by Syzbot:
    https://syzkaller.appspot.com/bug?id=148d2f1dfac64af52ffd27b661981a540724f803
    
    In the report, the master pointer was used after being freed. This is
    because another process had acquired the device's master mutex in
    drm_setmaster_ioctl(), then overwrote fpriv->master in
    drm_new_set_master(). The old value of fpriv->master was subsequently
    freed before the mutex was unlocked.
    
    To fix this, we lock the device's master mutex before retrieving the
    pointer from from fpriv->master. This patch passes the Syzbot
    reproducer test.
    
    Reported-by: syzbot+c3a706cec1ea99e1c693@syzkaller.appspotmail.com
    Signed-off-by: Desmond Cheong Zhi Xi <desmondcheongzx@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210608110436.239583-1-desmondcheongzx@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5502580cf958b094f3b69dfe4eece90eae01fbc
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat May 22 19:49:50 2021 +0200

    spi: bcm2835: Fix out-of-bounds access with more than 4 slaves
    
    commit 13817d466eb8713a1ffd254f537402f091d48444 upstream.
    
    Commit 571e31fa60b3 ("spi: bcm2835: Cache CS register value for
    ->prepare_message()") limited the number of slaves to 3 at compile-time.
    The limitation was necessitated by a statically-sized array prepare_cs[]
    in the driver private data which contains a per-slave register value.
    
    The commit sought to enforce the limitation at run-time by setting the
    controller's num_chipselect to 3:  Slaves with a higher chipselect are
    rejected by spi_add_device().
    
    However the commit neglected that num_chipselect only limits the number
    of *native* chipselects.  If GPIO chipselects are specified in the
    device tree for more than 3 slaves, num_chipselect is silently raised by
    of_spi_get_gpio_numbers() and the result are out-of-bounds accesses to
    the statically-sized array prepare_cs[].
    
    As a bandaid fix which is backportable to stable, raise the number of
    allowed slaves to 24 (which "ought to be enough for anybody"), enforce
    the limitation on slave ->setup and revert num_chipselect to 3 (which is
    the number of native chipselects supported by the controller).
    An upcoming for-next commit will allow an arbitrary number of slaves.
    
    Fixes: 571e31fa60b3 ("spi: bcm2835: Cache CS register value for ->prepare_message()")
    Reported-by: Joe Burmeister <joe.burmeister@devtank.co.uk>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v5.4+
    Cc: Phil Elwell <phil@raspberrypi.com>
    Link: https://lore.kernel.org/r/75854affc1923309fde05e47494263bde73e5592.1621703210.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a225ee1fe41c536ad06e4df8cbdefffdf6e4087d
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Fri Jul 31 16:07:48 2020 -0700

    x86/boot: Add .text.* to setup.ld
    
    commit 2e7a858ba843d2e6ceab1ba996805411de51b340 upstream.
    
    GCC puts the main function into .text.startup when compiled with -Os (or
    -O2). This results in arch/x86/boot/main.c having a .text.startup
    section which is currently not included explicitly in the linker script
    setup.ld in the same directory.
    
    The BFD linker places this orphan section immediately after .text, so
    this still works. However, LLD git, since [1], is choosing to place it
    immediately after the .bstext section instead (this is the first code
    section). This plays havoc with the section layout that setup.elf
    requires to create the setup header, for eg on 64-bit:
    
        LD      arch/x86/boot/setup.elf
      ld.lld: error: section .text.startup file range overlaps with .header
      >>> .text.startup range is [0x200040, 0x2001FE]
      >>> .header range is [0x2001EF, 0x20026B]
    
      ld.lld: error: section .header file range overlaps with .bsdata
      >>> .header range is [0x2001EF, 0x20026B]
      >>> .bsdata range is [0x2001FF, 0x200398]
    
      ld.lld: error: section .bsdata file range overlaps with .entrytext
      >>> .bsdata range is [0x2001FF, 0x200398]
      >>> .entrytext range is [0x20026C, 0x2002D3]
    
      ld.lld: error: section .text.startup virtual address range overlaps
      with .header
      >>> .text.startup range is [0x40, 0x1FE]
      >>> .header range is [0x1EF, 0x26B]
    
      ld.lld: error: section .header virtual address range overlaps with
      .bsdata
      >>> .header range is [0x1EF, 0x26B]
      >>> .bsdata range is [0x1FF, 0x398]
    
      ld.lld: error: section .bsdata virtual address range overlaps with
      .entrytext
      >>> .bsdata range is [0x1FF, 0x398]
      >>> .entrytext range is [0x26C, 0x2D3]
    
      ld.lld: error: section .text.startup load address range overlaps with
      .header
      >>> .text.startup range is [0x40, 0x1FE]
      >>> .header range is [0x1EF, 0x26B]
    
      ld.lld: error: section .header load address range overlaps with
      .bsdata
      >>> .header range is [0x1EF, 0x26B]
      >>> .bsdata range is [0x1FF, 0x398]
    
      ld.lld: error: section .bsdata load address range overlaps with
      .entrytext
      >>> .bsdata range is [0x1FF, 0x398]
      >>> .entrytext range is [0x26C, 0x2D3]
    
    Add .text.* to the .text output section to fix this, and also prevent
    any future surprises if the compiler decides to create other such
    sections.
    
    [1] https://reviews.llvm.org/D75225
    
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Fangrui Song <maskray@google.com>
    Link: https://lore.kernel.org/r/20200731230820.1742553-5-keescook@chromium.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c2c1db4f2e4d25b7656b70bc14198cd1bba3ae5
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Wed May 12 09:20:52 2021 +1200

    i2c: mpc: implement erratum A-004447 workaround
    
    [ Upstream commit 8f0cdec8b5fd94135d643662506ee94ae9e98785 ]
    
    The P2040/P2041 has an erratum where the normal i2c recovery mechanism
    does not work. Implement the alternative recovery mechanism documented
    in the P2040 Chip Errata Rev Q.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7f0393a370e556135d9c08959310addd1f597d5
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon Mar 29 14:52:03 2021 +1300

    i2c: mpc: Make use of i2c_recover_bus()
    
    [ Upstream commit 65171b2df15eb7545431d75c2729b5062da89b43 ]
    
    Move the existing calls of mpc_i2c_fixup() to a recovery function
    registered via bus_recovery_info. This makes it more obvious that
    recovery is supported and allows for a future where recovery is
    triggered by the i2c core.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cdbefdd31462461c6b554a361d414c7b9033405
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu May 27 23:10:56 2021 +0200

    spi: Cleanup on failure of initial setup
    
    [ Upstream commit 2ec6f20b33eb4f62ab90bdcd620436c883ec3af6 ]
    
    Commit c7299fea6769 ("spi: Fix spi device unregister flow") changed the
    SPI core's behavior if the ->setup() hook returns an error upon adding
    an spi_device:  Before, the ->cleanup() hook was invoked to free any
    allocations that were made by ->setup().  With the commit, that's no
    longer the case, so the ->setup() hook is expected to free the
    allocations itself.
    
    I've identified 5 drivers which depend on the old behavior and am fixing
    them up hereinafter: spi-bitbang.c spi-fsl-spi.c spi-omap-uwire.c
    spi-omap2-mcspi.c spi-pxa2xx.c
    
    Importantly, ->setup() is not only invoked on spi_device *addition*:
    It may subsequently be called to *change* SPI parameters.  If changing
    these SPI parameters fails, freeing memory allocations would be wrong.
    That should only be done if the spi_device is finally destroyed.
    I am therefore using a bool "initial_setup" in 4 of the affected drivers
    to differentiate between the invocation on *adding* the spi_device and
    any subsequent invocations: spi-bitbang.c spi-fsl-spi.c spi-omap-uwire.c
    spi-omap2-mcspi.c
    
    In spi-pxa2xx.c, it seems the ->setup() hook can only fail on spi_device
    addition, not any subsequent calls.  It therefore doesn't need the bool.
    
    It's worth noting that 5 other drivers already perform a cleanup if the
    ->setup() hook fails.  Before c7299fea6769, they caused a double-free
    if ->setup() failed on spi_device addition.  Since the commit, they're
    fine.  These drivers are: spi-mpc512x-psc.c spi-pl022.c spi-s3c64xx.c
    spi-st-ssc4.c spi-tegra114.c
    
    (spi-pxa2xx.c also already performs a cleanup, but only in one of
    several error paths.)
    
    Fixes: c7299fea6769 ("spi: Fix spi device unregister flow")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: Saravana Kannan <saravanak@google.com>
    Acked-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com> # pxa2xx
    Link: https://lore.kernel.org/r/f76a0599469f265b69c371538794101fa37b5536.1622149321.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85a7998e72110ecabc343fbf14ac63a5a97e80da
Author: Saravana Kannan <saravanak@google.com>
Date:   Wed May 5 09:47:34 2021 -0700

    spi: Don't have controller clean up spi device before driver unbind
    
    [ Upstream commit 27e7db56cf3dffd302bd7ddfacb1d405cf671a2a ]
    
    When a spi device is unregistered and triggers a driver unbind, the
    driver might need to access the spi device. So, don't have the
    controller clean up the spi device before the driver is unbound. Clean
    up the spi device after the driver is unbound.
    
    Fixes: c7299fea6769 ("spi: Fix spi device unregister flow")
    Reported-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    Tested-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20210505164734.175546-1-saravanak@google.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92350839d329841a4120c9796c4340f298679636
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Wed May 12 09:20:51 2021 +1200

    powerpc/fsl: set fsl,i2c-erratum-a004447 flag for P1010 i2c controllers
    
    [ Upstream commit 19ae697a1e4edf1d755b413e3aa38da65e2db23b ]
    
    The i2c controllers on the P1010 have an erratum where the documented
    scheme for i2c bus recovery will not work (A-004447). A different
    mechanism is needed which is documented in the P1010 Chip Errata Rev L.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96cea4843b8f128efa60af28d54e2419eec75fcf
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Wed May 12 09:20:50 2021 +1200

    powerpc/fsl: set fsl,i2c-erratum-a004447 flag for P2041 i2c controllers
    
    [ Upstream commit 7adc7b225cddcfd0f346d10144fd7a3d3d9f9ea7 ]
    
    The i2c controllers on the P2040/P2041 have an erratum where the
    documented scheme for i2c bus recovery will not work (A-004447). A
    different mechanism is needed which is documented in the P2040 Chip
    Errata Rev Q (latest available at the time of writing).
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e9aa125f69c0006d10f101898932acedc942b59
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Fri May 21 14:51:15 2021 -0700

    nvme-tcp: remove incorrect Kconfig dep in BLK_DEV_NVME
    
    [ Upstream commit 042a3eaad6daeabcfaf163aa44da8ea3cf8b5496 ]
    
    We need to select NVME_CORE.
    
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Max Gurtovoy <mgurtovoy@nvidia.com>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c385af145eb4b1c56c128adb1c948438144152c6
Author: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
Date:   Tue May 25 19:00:12 2021 +0800

    bnx2x: Fix missing error code in bnx2x_iov_init_one()
    
    [ Upstream commit 65161c35554f7135e6656b3df1ce2c500ca0bdcf ]
    
    Eliminate the follow smatch warning:
    
    drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c:1227
    bnx2x_iov_init_one() warn: missing error code 'err'.
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ece8ad75e31856f429b90cba30c8c6ff6a82e0dd
Author: John Keeping <john@metanate.com>
Date:   Wed May 12 12:14:21 2021 +0100

    dm verity: fix require_signatures module_param permissions
    
    [ Upstream commit 0c1f3193b1cdd21e7182f97dc9bca7d284d18a15 ]
    
    The third parameter of module_param() is permissions for the sysfs node
    but it looks like it is being used as the initial value of the parameter
    here.  In fact, false here equates to omitting the file from sysfs and
    does not affect the value of require_signatures.
    
    Making the parameter writable is not simple because going from
    false->true is fine but it should not be possible to remove the
    requirement to verify a signature.  But it can be useful to inspect the
    value of this parameter from userspace, so change the permissions to
    make a read-only file in sysfs.
    
    Signed-off-by: John Keeping <john@metanate.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a450b5b6c01dff86db32d90e339cbf1ebd142731
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Sat May 15 19:02:01 2021 +0800

    MIPS: Fix kernel hang under FUNCTION_GRAPH_TRACER and PREEMPT_TRACER
    
    [ Upstream commit 78cf0eb926cb1abeff2106bae67752e032fe5f3e ]
    
    When update the latest mainline kernel with the following three configs,
    the kernel hangs during startup:
    
    (1) CONFIG_FUNCTION_GRAPH_TRACER=y
    (2) CONFIG_PREEMPT_TRACER=y
    (3) CONFIG_FTRACE_STARTUP_TEST=y
    
    When update the latest mainline kernel with the above two configs (1)
    and (2), the kernel starts normally, but it still hangs when execute
    the following command:
    
    echo "function_graph" > /sys/kernel/debug/tracing/current_tracer
    
    Without CONFIG_PREEMPT_TRACER=y, the above two kinds of kernel hangs
    disappeared, so it seems that CONFIG_PREEMPT_TRACER has some influences
    with function_graph tracer at the first glance.
    
    I use ejtag to find out the epc address is related with preempt_enable()
    in the file arch/mips/lib/mips-atomic.c, because function tracing can
    trace the preempt_{enable,disable} calls that are traced, replace them
    with preempt_{enable,disable}_notrace to prevent function tracing from
    going into an infinite loop, and then it can fix the kernel hang issue.
    
    By the way, it seems that this commit is a complement and improvement of
    commit f93a1a00f2bd ("MIPS: Fix crash that occurs when function tracing
    is enabled").
    
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb5c4794b79e56c5527977dfd86e5a210052a9a0
Author: Hannes Reinecke <hare@suse.de>
Date:   Fri May 21 10:23:46 2021 +0200

    nvme-fabrics: decode host pathing error for connect
    
    [ Upstream commit 4d9442bf263ac45d495bb7ecf75009e59c0622b2 ]
    
    Add an additional decoding for 'host pathing error' during connect.
    
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70036fb61ea8dd9740d9670fbd3a523b82ba8564
Author: George McCollister <george.mccollister@gmail.com>
Date:   Mon May 24 15:29:53 2021 -0500

    net: dsa: microchip: enable phy errata workaround on 9567
    
    [ Upstream commit 8c42a49738f16af0061f9ae5c2f5a955f268d9e3 ]
    
    Also enable phy errata workaround on 9567 since has the same errata as
    the 9477 according to the manufacture's documentation.
    
    Signed-off-by: George McCollister <george.mccollister@gmail.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 128bb4b0e5d2a623572e750db8c7517c52bb0516
Author: Saubhik Mukherjee <saubhik.mukherjee@gmail.com>
Date:   Mon May 24 19:07:12 2021 +0530

    net: appletalk: cops: Fix data race in cops_probe1
    
    [ Upstream commit a4dd4fc6105e54393d637450a11d4cddb5fabc4f ]
    
    In cops_probe1(), there is a write to dev->base_addr after requesting an
    interrupt line and registering the interrupt handler cops_interrupt().
    The handler might be called in parallel to handle an interrupt.
    cops_interrupt() tries to read dev->base_addr leading to a potential
    data race. So write to dev->base_addr before calling request_irq().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Saubhik Mukherjee <saubhik.mukherjee@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19e14481cc7d6e874b6d72cced1a5b1c2b8769e2
Author: Zong Li <zong.li@sifive.com>
Date:   Sat May 22 17:16:11 2021 +0800

    net: macb: ensure the device is available before accessing GEMGXL control registers
    
    [ Upstream commit 5eff1461a6dec84f04fafa9128548bad51d96147 ]
    
    If runtime power menagement is enabled, the gigabit ethernet PLL would
    be disabled after macb_probe(). During this period of time, the system
    would hang up if we try to access GEMGXL control registers.
    
    We can't put runtime_pm_get/runtime_pm_put/ there due to the issue of
    sleep inside atomic section (7fa2955ff70ce453 ("sh_eth: Fix sleeping
    function called from invalid context"). Add netif_running checking to
    ensure the device is available before accessing GEMGXL device.
    
    Changed in v2:
     - Use netif_running instead of its own flag
    
    Signed-off-by: Zong Li <zong.li@sifive.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd05e1a61a05a615deff33bb4a060e8b35e3da55
Author: Dmitry Bogdanov <d.bogdanov@yadro.com>
Date:   Thu Apr 15 23:35:54 2021 +0300

    scsi: target: qla2xxx: Wait for stop_phase1 at WWN removal
    
    [ Upstream commit 2ef7665dfd88830f15415ba007c7c9a46be7acd8 ]
    
    Target de-configuration panics at high CPU load because TPGT and WWPN can
    be removed on separate threads.
    
    TPGT removal requests a reset HBA on a separate thread and waits for reset
    complete (phase1). Due to high CPU load that HBA reset can be delayed for
    some time.
    
    WWPN removal does qlt_stop_phase2(). There it is believed that phase1 has
    already completed and thus tgt.tgt_ops is subsequently cleared. However,
    tgt.tgt_ops is needed to process incoming traffic and therefore this will
    cause one of the following panics:
    
    NIP qlt_reset+0x7c/0x220 [qla2xxx]
    LR  qlt_reset+0x68/0x220 [qla2xxx]
    Call Trace:
    0xc000003ffff63a78 (unreliable)
    qlt_handle_imm_notify+0x800/0x10c0 [qla2xxx]
    qlt_24xx_atio_pkt+0x208/0x590 [qla2xxx]
    qlt_24xx_process_atio_queue+0x33c/0x7a0 [qla2xxx]
    qla83xx_msix_atio_q+0x54/0x90 [qla2xxx]
    
    or
    
    NIP qlt_24xx_handle_abts+0xd0/0x2a0 [qla2xxx]
    LR  qlt_24xx_handle_abts+0xb4/0x2a0 [qla2xxx]
    Call Trace:
    qlt_24xx_handle_abts+0x90/0x2a0 [qla2xxx] (unreliable)
    qlt_24xx_process_atio_queue+0x500/0x7a0 [qla2xxx]
    qla83xx_msix_atio_q+0x54/0x90 [qla2xxx]
    
    or
    
    NIP qlt_create_sess+0x90/0x4e0 [qla2xxx]
    LR  qla24xx_do_nack_work+0xa8/0x180 [qla2xxx]
    Call Trace:
    0xc0000000348fba30 (unreliable)
    qla24xx_do_nack_work+0xa8/0x180 [qla2xxx]
    qla2x00_do_work+0x674/0xbf0 [qla2xxx]
    qla2x00_iocb_work_fn
    
    The patch fixes the issue by serializing qlt_stop_phase1() and
    qlt_stop_phase2() functions to make WWPN removal wait for phase1
    completion.
    
    Link: https://lore.kernel.org/r/20210415203554.27890-1-d.bogdanov@yadro.com
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Dmitry Bogdanov <d.bogdanov@yadro.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e773147692c6f8c472f4122c1f62593e09e383fe
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed May 19 21:05:19 2021 +0800

    scsi: hisi_sas: Drop free_irq() of devm_request_irq() allocated irq
    
    [ Upstream commit 7907a021e4bbfa29cccacd2ba2dade894d9a7d4c ]
    
    irqs allocated with devm_request_irq() should not be freed using
    free_irq(). Doing so causes a dangling pointer and a subsequent double
    free.
    
    Link: https://lore.kernel.org/r/20210519130519.2661938-1-yangyingliang@huawei.com
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Acked-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e209effe36cbf0a939844bcf9defd3fe1e2f593
Author: Matt Wang <wwentao@vmware.com>
Date:   Wed May 19 09:49:32 2021 +0000

    scsi: vmw_pvscsi: Set correct residual data length
    
    [ Upstream commit e662502b3a782d479e67736a5a1c169a703d853a ]
    
    Some commands (such as INQUIRY) may return less data than the initiator
    requested. To avoid conducting useless information, set the right residual
    count to make upper layer aware of this.
    
    Before (INQUIRY PAGE 0xB0 with 128B buffer):
    
    $ sg_raw -r 128 /dev/sda 12 01 B0 00 80 00
    SCSI Status: Good
    
    Received 128 bytes of data:
     00 00 b0 00 3c 01 00 00 00 00 00 00 00 00 00 00 00 ...<............
     10 00 00 00 00 00 01 00 00 00 00 00 40 00 00 08 00 ...........@....
     20 80 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 .......... .....
     30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
     40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
     50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
     60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
     70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
    
    After:
    
    $ sg_raw -r 128 /dev/sda 12 01 B0 00 80 00
    SCSI Status: Good
    
    Received 64 bytes of data:
    00 00 b0 00 3c 01 00 00 00 00 00 00 00 00 00 00 00 ...<............
    10 00 00 00 00 00 01 00 00 00 00 00 40 00 00 08 00 ...........@....
    20 80 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 .......... .....
    30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
    
    [mkp: clarified description]
    
    Link: https://lore.kernel.org/r/03C41093-B62E-43A2-913E-CFC92F1C70C3@vmware.com
    Signed-off-by: Matt Wang <wwentao@vmware.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90476c1bfff006fc0275f8f9c57c4c8cfb039bdc
Author: Javed Hasan <jhasan@marvell.com>
Date:   Tue May 18 23:14:16 2021 -0700

    scsi: bnx2fc: Return failure if io_req is already in ABTS processing
    
    [ Upstream commit 122c81c563b0c1c6b15ff76a9159af5ee1f21563 ]
    
    Return failure from bnx2fc_eh_abort() if io_req is already in ABTS
    processing.
    
    Link: https://lore.kernel.org/r/20210519061416.19321-1-jhasan@marvell.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3842219a69d23d3b7cc72274af1beb51434449a
Author: Rao Shoaib <rao.shoaib@oracle.com>
Date:   Fri May 21 11:08:06 2021 -0700

    RDS tcp loopback connection can hang
    
    [ Upstream commit aced3ce57cd37b5ca332bcacd370d01f5a8c5371 ]
    
    When TCP is used as transport and a program on the
    system connects to RDS port 16385, connection is
    accepted but denied per the rules of RDS. However,
    RDS connections object is left in the list. Next
    loopback connection will select that connection
    object as it is at the head of list. The connection
    attempt will hang as the connection object is set
    to connect over TCP which is not allowed
    
    The issue can be reproduced easily, use rds-ping
    to ping a local IP address. After that use any
    program like ncat to connect to the same IP
    address and port 16385. This will hang so ctrl-c out.
    Now try rds-ping, it will hang.
    
    To fix the issue this patch adds checks to disallow
    the connection object creation and destroys the
    connection object.
    
    Signed-off-by: Rao Shoaib <rao.shoaib@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e324774411dc94282e166a301af822d75741263
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Thu May 20 12:32:36 2021 +0000

    net/qla3xxx: fix schedule while atomic in ql_sem_spinlock
    
    [ Upstream commit 13a6f3153922391e90036ba2267d34eed63196fc ]
    
    When calling the 'ql_sem_spinlock', the driver has already acquired the
    spin lock, so the driver should not call 'ssleep' in atomic context.
    
    This bug can be fixed by using 'mdelay' instead of 'ssleep'.
    
    The KASAN's log reveals it:
    
    [    3.238124 ] BUG: scheduling while atomic: swapper/0/1/0x00000002
    [    3.238748 ] 2 locks held by swapper/0/1:
    [    3.239151 ]  #0: ffff88810177b240 (&dev->mutex){....}-{3:3}, at:
    __device_driver_lock+0x41/0x60
    [    3.240026 ]  #1: ffff888107c60e28 (&qdev->hw_lock){....}-{2:2}, at:
    ql3xxx_probe+0x2aa/0xea0
    [    3.240873 ] Modules linked in:
    [    3.241187 ] irq event stamp: 460854
    [    3.241541 ] hardirqs last  enabled at (460853): [<ffffffff843051bf>]
    _raw_spin_unlock_irqrestore+0x4f/0x70
    [    3.242245 ] hardirqs last disabled at (460854): [<ffffffff843058ca>]
    _raw_spin_lock_irqsave+0x2a/0x70
    [    3.242245 ] softirqs last  enabled at (446076): [<ffffffff846002e4>]
    __do_softirq+0x2e4/0x4b1
    [    3.242245 ] softirqs last disabled at (446069): [<ffffffff811ba5e0>]
    irq_exit_rcu+0x100/0x110
    [    3.242245 ] Preemption disabled at:
    [    3.242245 ] [<ffffffff828ca5ba>] ql3xxx_probe+0x2aa/0xea0
    [    3.242245 ] Kernel panic - not syncing: scheduling while atomic
    [    3.242245 ] CPU: 2 PID: 1 Comm: swapper/0 Not tainted
    5.13.0-rc1-00145
    -gee7dc339169-dirty #16
    [    3.242245 ] Call Trace:
    [    3.242245 ]  dump_stack+0xba/0xf5
    [    3.242245 ]  ? ql3xxx_probe+0x1f0/0xea0
    [    3.242245 ]  panic+0x15a/0x3f2
    [    3.242245 ]  ? vprintk+0x76/0x150
    [    3.242245 ]  ? ql3xxx_probe+0x2aa/0xea0
    [    3.242245 ]  __schedule_bug+0xae/0xe0
    [    3.242245 ]  __schedule+0x72e/0xa00
    [    3.242245 ]  schedule+0x43/0xf0
    [    3.242245 ]  schedule_timeout+0x28b/0x500
    [    3.242245 ]  ? del_timer_sync+0xf0/0xf0
    [    3.242245 ]  ? msleep+0x2f/0x70
    [    3.242245 ]  msleep+0x59/0x70
    [    3.242245 ]  ql3xxx_probe+0x307/0xea0
    [    3.242245 ]  ? _raw_spin_unlock_irqrestore+0x3a/0x70
    [    3.242245 ]  ? pci_device_remove+0x110/0x110
    [    3.242245 ]  local_pci_probe+0x45/0xa0
    [    3.242245 ]  pci_device_probe+0x12b/0x1d0
    [    3.242245 ]  really_probe+0x2a9/0x610
    [    3.242245 ]  driver_probe_device+0x90/0x1d0
    [    3.242245 ]  ? mutex_lock_nested+0x1b/0x20
    [    3.242245 ]  device_driver_attach+0x68/0x70
    [    3.242245 ]  __driver_attach+0x124/0x1b0
    [    3.242245 ]  ? device_driver_attach+0x70/0x70
    [    3.242245 ]  bus_for_each_dev+0xbb/0x110
    [    3.242245 ]  ? rdinit_setup+0x45/0x45
    [    3.242245 ]  driver_attach+0x27/0x30
    [    3.242245 ]  bus_add_driver+0x1eb/0x2a0
    [    3.242245 ]  driver_register+0xa9/0x180
    [    3.242245 ]  __pci_register_driver+0x82/0x90
    [    3.242245 ]  ? yellowfin_init+0x25/0x25
    [    3.242245 ]  ql3xxx_driver_init+0x23/0x25
    [    3.242245 ]  do_one_initcall+0x7f/0x3d0
    [    3.242245 ]  ? rdinit_setup+0x45/0x45
    [    3.242245 ]  ? rcu_read_lock_sched_held+0x4f/0x80
    [    3.242245 ]  kernel_init_freeable+0x2aa/0x301
    [    3.242245 ]  ? rest_init+0x2c0/0x2c0
    [    3.242245 ]  kernel_init+0x18/0x190
    [    3.242245 ]  ? rest_init+0x2c0/0x2c0
    [    3.242245 ]  ? rest_init+0x2c0/0x2c0
    [    3.242245 ]  ret_from_fork+0x1f/0x30
    [    3.242245 ] Dumping ftrace buffer:
    [    3.242245 ]    (ftrace buffer empty)
    [    3.242245 ] Kernel Offset: disabled
    [    3.242245 ] Rebooting in 1 seconds.
    
    Reported-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9e7a38d148eb660dbcfad40bfb60dcc16997b15
Author: Sergey Senozhatsky <senozhatsky@chromium.org>
Date:   Thu May 20 19:14:22 2021 +0900

    wq: handle VM suspension in stall detection
    
    [ Upstream commit 940d71c6462e8151c78f28e4919aa8882ff2054e ]
    
    If VCPU is suspended (VM suspend) in wq_watchdog_timer_fn() then
    once this VCPU resumes it will see the new jiffies value, while it
    may take a while before IRQ detects PVCLOCK_GUEST_STOPPED on this
    VCPU and updates all the watchdogs via pvclock_touch_watchdogs().
    There is a small chance of misreported WQ stalls in the meantime,
    because new jiffies is time_after() old 'ts + thresh'.
    
    wq_watchdog_timer_fn()
    {
            for_each_pool(pool, pi) {
                    if (time_after(jiffies, ts + thresh)) {
                            pr_emerg("BUG: workqueue lockup - pool");
                    }
            }
    }
    
    Save jiffies at the beginning of this function and use that value
    for stall detection. If VM gets suspended then we continue using
    "old" jiffies value and old WQ touch timestamps. If IRQ at some
    point restarts the stall detection cycle (pvclock_touch_watchdogs())
    then old jiffies will always be before new 'ts + thresh'.
    
    Signed-off-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92215c1f24c0c6929bcf4e8b2ad58b66b16c893d
Author: Shakeel Butt <shakeelb@google.com>
Date:   Wed May 12 13:19:46 2021 -0700

    cgroup: disable controllers at parse time
    
    [ Upstream commit 45e1ba40837ac2f6f4d4716bddb8d44bd7e4a251 ]
    
    This patch effectively reverts the commit a3e72739b7a7 ("cgroup: fix
    too early usage of static_branch_disable()"). The commit 6041186a3258
    ("init: initialize jump labels before command line option parsing") has
    moved the jump_label_init() before parse_args() which has made the
    commit a3e72739b7a7 unnecessary. On the other hand there are
    consequences of disabling the controllers later as there are subsystems
    doing the controller checks for different decisions. One such incident
    is reported [1] regarding the memory controller and its impact on memory
    reclaim code.
    
    [1] https://lore.kernel.org/linux-mm/921e53f3-4b13-aab8-4a9e-e83ff15371e4@nec.com
    
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reported-by: NOMURA JUNICHI(野村　淳一) <junichi.nomura@nec.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Tested-by: Jun'ichi Nomura <junichi.nomura@nec.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e29d22371de8fad5cadb4820a35ca5fe3f1917e1
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon May 17 12:04:13 2021 +0300

    net: mdiobus: get rid of a BUG_ON()
    
    [ Upstream commit 1dde47a66d4fb181830d6fa000e5ea86907b639e ]
    
    We spotted a bug recently during a review where a driver was
    unregistering a bus that wasn't registered, which would trigger this
    BUG_ON().  Let's handle that situation more gracefully, and just print
    a warning and return.
    
    Reported-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21df0c2e7d195de4a3c650de9361b3037fa6c59a
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon May 17 16:38:09 2021 +0200

    netlink: disable IRQs for netlink_lock_table()
    
    [ Upstream commit 1d482e666b8e74c7555dbdfbfb77205eeed3ff2d ]
    
    Syzbot reports that in mac80211 we have a potential deadlock
    between our "local->stop_queue_reasons_lock" (spinlock) and
    netlink's nl_table_lock (rwlock). This is because there's at
    least one situation in which we might try to send a netlink
    message with this spinlock held while it is also possible to
    take the spinlock from a hardirq context, resulting in the
    following deadlock scenario reported by lockdep:
    
           CPU0                    CPU1
           ----                    ----
      lock(nl_table_lock);
                                   local_irq_disable();
                                   lock(&local->queue_stop_reason_lock);
                                   lock(nl_table_lock);
      <Interrupt>
        lock(&local->queue_stop_reason_lock);
    
    This seems valid, we can take the queue_stop_reason_lock in
    any kind of context ("CPU0"), and call ieee80211_report_ack_skb()
    with the spinlock held and IRQs disabled ("CPU1") in some
    code path (ieee80211_do_stop() via ieee80211_free_txskb()).
    
    Short of disallowing netlink use in scenarios like these
    (which would be rather complex in mac80211's case due to
    the deep callchain), it seems the only fix for this is to
    disable IRQs while nl_table_lock is held to avoid hitting
    this scenario, this disallows the "CPU0" portion of the
    reported deadlock.
    
    Note that the writer side (netlink_table_grab()) already
    disables IRQs for this lock.
    
    Unfortunately though, this seems like a huge hammer, and
    maybe the whole netlink table locking should be reworked.
    
    Reported-by: syzbot+69ff9dff50dcfe14ddd4@syzkaller.appspotmail.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0172831c61a7684ff63160c22a627747e6c5268
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon May 17 16:13:35 2021 +0200

    bonding: init notify_work earlier to avoid uninitialized use
    
    [ Upstream commit 35d96e631860226d5dc4de0fad0a415362ec2457 ]
    
    If bond_kobj_init() or later kzalloc() in bond_alloc_slave() fail,
    then we call kobject_put() on the slave->kobj. This in turn calls
    the release function slave_kobj_release() which will always try to
    cancel_delayed_work_sync(&slave->notify_work), which shouldn't be
    done on an uninitialized work struct.
    
    Always initialize the work struct earlier to avoid problems here.
    
    Syzbot bisected this down to a completely pointless commit, some
    fault injection may have been at work here that caused the alloc
    failure in the first place, which may interact badly with bisect.
    
    Reported-by: syzbot+bfda097c12a00c8cae67@syzkaller.appspotmail.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d7d4649dc1c53acf76df260fd519db698ed20d7
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Sun May 16 07:11:40 2021 +0000

    isdn: mISDN: netjet: Fix crash in nj_probe:
    
    [ Upstream commit 9f6f852550d0e1b7735651228116ae9d300f69b3 ]
    
    'nj_setup' in netjet.c might fail with -EIO and in this case
    'card->irq' is initialized and is bigger than zero. A subsequent call to
    'nj_release' will free the irq that has not been requested.
    
    Fix this bug by deleting the previous assignment to 'card->irq' and just
    keep the assignment before 'request_irq'.
    
    The KASAN's log reveals it:
    
    [    3.354615 ] WARNING: CPU: 0 PID: 1 at kernel/irq/manage.c:1826
    free_irq+0x100/0x480
    [    3.355112 ] Modules linked in:
    [    3.355310 ] CPU: 0 PID: 1 Comm: swapper/0 Not tainted
    5.13.0-rc1-00144-g25a1298726e #13
    [    3.355816 ] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
    rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    [    3.356552 ] RIP: 0010:free_irq+0x100/0x480
    [    3.356820 ] Code: 6e 08 74 6f 4d 89 f4 e8 5e ac 09 00 4d 8b 74 24 18
    4d 85 f6 75 e3 e8 4f ac 09 00 8b 75 c8 48 c7 c7 78 c1 2e 85 e8 e0 cf f5
    ff <0f> 0b 48 8b 75 c0 4c 89 ff e8 72 33 0b 03 48 8b 43 40 4c 8b a0 80
    [    3.358012 ] RSP: 0000:ffffc90000017b48 EFLAGS: 00010082
    [    3.358357 ] RAX: 0000000000000000 RBX: ffff888104dc8000 RCX:
    0000000000000000
    [    3.358814 ] RDX: ffff8881003c8000 RSI: ffffffff8124a9e6 RDI:
    00000000ffffffff
    [    3.359272 ] RBP: ffffc90000017b88 R08: 0000000000000000 R09:
    0000000000000000
    [    3.359732 ] R10: ffffc900000179f0 R11: 0000000000001d04 R12:
    0000000000000000
    [    3.360195 ] R13: ffff888107dc6000 R14: ffff888107dc6928 R15:
    ffff888104dc80a8
    [    3.360652 ] FS:  0000000000000000(0000) GS:ffff88817bc00000(0000)
    knlGS:0000000000000000
    [    3.361170 ] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    3.361538 ] CR2: 0000000000000000 CR3: 000000000582e000 CR4:
    00000000000006f0
    [    3.362003 ] DR0: 0000000000000000 DR1: 0000000000000000 DR2:
    0000000000000000
    [    3.362175 ] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7:
    0000000000000400
    [    3.362175 ] Call Trace:
    [    3.362175 ]  nj_release+0x51/0x1e0
    [    3.362175 ]  nj_probe+0x450/0x950
    [    3.362175 ]  ? pci_device_remove+0x110/0x110
    [    3.362175 ]  local_pci_probe+0x45/0xa0
    [    3.362175 ]  pci_device_probe+0x12b/0x1d0
    [    3.362175 ]  really_probe+0x2a9/0x610
    [    3.362175 ]  driver_probe_device+0x90/0x1d0
    [    3.362175 ]  ? mutex_lock_nested+0x1b/0x20
    [    3.362175 ]  device_driver_attach+0x68/0x70
    [    3.362175 ]  __driver_attach+0x124/0x1b0
    [    3.362175 ]  ? device_driver_attach+0x70/0x70
    [    3.362175 ]  bus_for_each_dev+0xbb/0x110
    [    3.362175 ]  ? rdinit_setup+0x45/0x45
    [    3.362175 ]  driver_attach+0x27/0x30
    [    3.362175 ]  bus_add_driver+0x1eb/0x2a0
    [    3.362175 ]  driver_register+0xa9/0x180
    [    3.362175 ]  __pci_register_driver+0x82/0x90
    [    3.362175 ]  ? w6692_init+0x38/0x38
    [    3.362175 ]  nj_init+0x36/0x38
    [    3.362175 ]  do_one_initcall+0x7f/0x3d0
    [    3.362175 ]  ? rdinit_setup+0x45/0x45
    [    3.362175 ]  ? rcu_read_lock_sched_held+0x4f/0x80
    [    3.362175 ]  kernel_init_freeable+0x2aa/0x301
    [    3.362175 ]  ? rest_init+0x2c0/0x2c0
    [    3.362175 ]  kernel_init+0x18/0x190
    [    3.362175 ]  ? rest_init+0x2c0/0x2c0
    [    3.362175 ]  ? rest_init+0x2c0/0x2c0
    [    3.362175 ]  ret_from_fork+0x1f/0x30
    [    3.362175 ] Kernel panic - not syncing: panic_on_warn set ...
    [    3.362175 ] CPU: 0 PID: 1 Comm: swapper/0 Not tainted
    5.13.0-rc1-00144-g25a1298726e #13
    [    3.362175 ] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
    rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    [    3.362175 ] Call Trace:
    [    3.362175 ]  dump_stack+0xba/0xf5
    [    3.362175 ]  ? free_irq+0x100/0x480
    [    3.362175 ]  panic+0x15a/0x3f2
    [    3.362175 ]  ? __warn+0xf2/0x150
    [    3.362175 ]  ? free_irq+0x100/0x480
    [    3.362175 ]  __warn+0x108/0x150
    [    3.362175 ]  ? free_irq+0x100/0x480
    [    3.362175 ]  report_bug+0x119/0x1c0
    [    3.362175 ]  handle_bug+0x3b/0x80
    [    3.362175 ]  exc_invalid_op+0x18/0x70
    [    3.362175 ]  asm_exc_invalid_op+0x12/0x20
    [    3.362175 ] RIP: 0010:free_irq+0x100/0x480
    [    3.362175 ] Code: 6e 08 74 6f 4d 89 f4 e8 5e ac 09 00 4d 8b 74 24 18
    4d 85 f6 75 e3 e8 4f ac 09 00 8b 75 c8 48 c7 c7 78 c1 2e 85 e8 e0 cf f5
    ff <0f> 0b 48 8b 75 c0 4c 89 ff e8 72 33 0b 03 48 8b 43 40 4c 8b a0 80
    [    3.362175 ] RSP: 0000:ffffc90000017b48 EFLAGS: 00010082
    [    3.362175 ] RAX: 0000000000000000 RBX: ffff888104dc8000 RCX:
    0000000000000000
    [    3.362175 ] RDX: ffff8881003c8000 RSI: ffffffff8124a9e6 RDI:
    00000000ffffffff
    [    3.362175 ] RBP: ffffc90000017b88 R08: 0000000000000000 R09:
    0000000000000000
    [    3.362175 ] R10: ffffc900000179f0 R11: 0000000000001d04 R12:
    0000000000000000
    [    3.362175 ] R13: ffff888107dc6000 R14: ffff888107dc6928 R15:
    ffff888104dc80a8
    [    3.362175 ]  ? vprintk+0x76/0x150
    [    3.362175 ]  ? free_irq+0x100/0x480
    [    3.362175 ]  nj_release+0x51/0x1e0
    [    3.362175 ]  nj_probe+0x450/0x950
    [    3.362175 ]  ? pci_device_remove+0x110/0x110
    [    3.362175 ]  local_pci_probe+0x45/0xa0
    [    3.362175 ]  pci_device_probe+0x12b/0x1d0
    [    3.362175 ]  really_probe+0x2a9/0x610
    [    3.362175 ]  driver_probe_device+0x90/0x1d0
    [    3.362175 ]  ? mutex_lock_nested+0x1b/0x20
    [    3.362175 ]  device_driver_attach+0x68/0x70
    [    3.362175 ]  __driver_attach+0x124/0x1b0
    [    3.362175 ]  ? device_driver_attach+0x70/0x70
    [    3.362175 ]  bus_for_each_dev+0xbb/0x110
    [    3.362175 ]  ? rdinit_setup+0x45/0x45
    [    3.362175 ]  driver_attach+0x27/0x30
    [    3.362175 ]  bus_add_driver+0x1eb/0x2a0
    [    3.362175 ]  driver_register+0xa9/0x180
    [    3.362175 ]  __pci_register_driver+0x82/0x90
    [    3.362175 ]  ? w6692_init+0x38/0x38
    [    3.362175 ]  nj_init+0x36/0x38
    [    3.362175 ]  do_one_initcall+0x7f/0x3d0
    [    3.362175 ]  ? rdinit_setup+0x45/0x45
    [    3.362175 ]  ? rcu_read_lock_sched_held+0x4f/0x80
    [    3.362175 ]  kernel_init_freeable+0x2aa/0x301
    [    3.362175 ]  ? rest_init+0x2c0/0x2c0
    [    3.362175 ]  kernel_init+0x18/0x190
    [    3.362175 ]  ? rest_init+0x2c0/0x2c0
    [    3.362175 ]  ? rest_init+0x2c0/0x2c0
    [    3.362175 ]  ret_from_fork+0x1f/0x30
    [    3.362175 ] Dumping ftrace buffer:
    [    3.362175 ]    (ftrace buffer empty)
    [    3.362175 ] Kernel Offset: disabled
    [    3.362175 ] Rebooting in 1 seconds..
    
    Reported-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77b9f527731e88f0217ffbe7b1c7d42bd26d0937
Author: Chunyan Zhang <chunyan.zhang@unisoc.com>
Date:   Wed May 12 17:35:34 2021 +0800

    spi: sprd: Add missing MODULE_DEVICE_TABLE
    
    [ Upstream commit 7907cad7d07e0055789ec0c534452f19dfe1fc80 ]
    
    MODULE_DEVICE_TABLE is used to extract the device information out of the
    driver and builds a table when being compiled. If using this macro,
    kernel can find the driver if available when the device is plugged in,
    and then loads that driver and initializes the device.
    
    Signed-off-by: Chunyan Zhang <chunyan.zhang@unisoc.com>
    Link: https://lore.kernel.org/r/20210512093534.243040-1-zhang.lyra@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbeee4ccc1c70f1bedeb7cb04a8cbba273c65346
Author: Zou Wei <zou_wei@huawei.com>
Date:   Wed May 12 11:12:25 2021 +0800

    ASoC: sti-sas: add missing MODULE_DEVICE_TABLE
    
    [ Upstream commit e072b2671606c77538d6a4dd5dda80b508cb4816 ]
    
    This patch adds missing MODULE_DEVICE_TABLE definition which generates
    correct modalias for automatic loading of this driver when it is built
    as an external module.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Link: https://lore.kernel.org/r/1620789145-14936-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 575ad4ab20579fae4e3ab48f17bcfbac2baa822b
Author: Eric Farman <farman@linux.ibm.com>
Date:   Tue May 11 21:56:31 2021 +0200

    vfio-ccw: Serialize FSM IDLE state with I/O completion
    
    [ Upstream commit 2af7a834a435460d546f0cf0a8b8e4d259f1d910 ]
    
    Today, the stacked call to vfio_ccw_sch_io_todo() does three things:
    
      1) Update a solicited IRB with CP information, and release the CP
         if the interrupt was the end of a START operation.
      2) Copy the IRB data into the io_region, under the protection of
         the io_mutex
      3) Reset the vfio-ccw FSM state to IDLE to acknowledge that
         vfio-ccw can accept more work.
    
    The trouble is that step 3 is (A) invoked for both solicited and
    unsolicited interrupts, and (B) sitting after the mutex for step 2.
    This second piece becomes a problem if it processes an interrupt
    for a CLEAR SUBCHANNEL while another thread initiates a START,
    thus allowing the CP and FSM states to get out of sync. That is:
    
        CPU 1                           CPU 2
        fsm_do_clear()
        fsm_irq()
                                        fsm_io_request()
        vfio_ccw_sch_io_todo()
                                        fsm_io_helper()
    
    Since the FSM state and CP should be kept in sync, let's make a
    note when the CP is released, and rely on that as an indication
    that the FSM should also be reset at the end of this routine and
    open up the device for more work.
    
    Signed-off-by: Eric Farman <farman@linux.ibm.com>
    Acked-by: Matthew Rosato <mjrosato@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Message-Id: <20210511195631.3995081-4-farman@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02d3f4f0aadbc3cd0faa2ea447dba19c6f23746d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat May 8 17:01:46 2021 +0200

    ASoC: Intel: bytcr_rt5640: Add quirk for the Lenovo Miix 3-830 tablet
    
    [ Upstream commit f0353e1f53f92f7b3da91e6669f5d58ee222ebe8 ]
    
    The Lenovo Miix 3-830 tablet has only 1 speaker, has an internal analog
    mic on IN1 and uses JD2 for jack-detect, add a quirk to automatically
    apply these settings on Lenovo Miix 3-830 tablets.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210508150146.28403-2-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a9478cfb21bc29cc82ece5626a2d378f0bea9fa
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat May 8 17:01:45 2021 +0200

    ASoC: Intel: bytcr_rt5640: Add quirk for the Glavey TM800A550L tablet
    
    [ Upstream commit 28c268d3acdd4cbcd2ac320b85609e77f84e74a7 ]
    
    Add a quirk for the Glavey TM800A550L tablet, this BYTCR tablet has no CHAN
    package in its ACPI tables and uses SSP0-AIF1 rather then SSP0-AIF2 which
    is the default for BYTCR devices.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20210508150146.28403-1-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02851cb0cae3de498e3cd4bca9593692e1e8cb00
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Apr 12 13:49:07 2021 +0800

    usb: cdns3: Fix runtime PM imbalance on error
    
    [ Upstream commit e5b913496099527abe46e175e5e2c844367bded0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3ed12af6bbbaf79eddb0ae14656b8ecacea74f0
Author: Jeimon <jjjinmeng.zhou@gmail.com>
Date:   Sat May 8 11:52:30 2021 +0800

    net/nfc/rawsock.c: fix a permission check bug
    
    [ Upstream commit 8ab78863e9eff11910e1ac8bcf478060c29b379e ]
    
    The function rawsock_create() calls a privileged function sk_alloc(), which requires a ns-aware check to check net->user_ns, i.e., ns_capable(). However, the original code checks the init_user_ns using capable(). So we replace the capable() with ns_capable().
    
    Signed-off-by: Jeimon <jjjinmeng.zhou@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e7c190475d98099231ee8ae486d31b1e2e7535a
Author: Saravana Kannan <saravanak@google.com>
Date:   Mon Apr 26 16:56:38 2021 -0700

    spi: Fix spi device unregister flow
    
    [ Upstream commit c7299fea67696db5bd09d924d1f1080d894f92ef ]
    
    When an SPI device is unregistered, the spi->controller->cleanup() is
    called in the device's release callback. That's wrong for a couple of
    reasons:
    
    1. spi_dev_put() can be called before spi_add_device() is called. And
       it's spi_add_device() that calls spi_setup(). This will cause clean()
       to get called without the spi device ever being setup.
    
    2. There's no guarantee that the controller's driver would be present by
       the time the spi device's release function gets called.
    
    3. It also causes "sleeping in atomic context" stack dump[1] when device
       link deletion code does a put_device() on the spi device.
    
    Fix these issues by simply moving the cleanup from the device release
    callback to the actual spi_unregister_device() function.
    
    [1] - https://lore.kernel.org/lkml/CAHp75Vc=FCGcUyS0v6fnxme2YJ+qD+Y-hQDQLa2JhWNON9VmsQ@mail.gmail.com/
    
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    Link: https://lore.kernel.org/r/20210426235638.1285530-1-saravanak@google.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f9ad67183aabb29339b7f8b040d284c34eb1764
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Fri Apr 23 15:54:02 2021 +0200

    ASoC: max98088: fix ni clock divider calculation
    
    [ Upstream commit 6c9762a78c325107dc37d20ee21002b841679209 ]
    
    The ni1/ni2 ratio formula [1] uses the pclk which is the prescaled mclk.
    The max98088 datasheet [2] has no such formula but table-12 equals so
    we can assume that it is the same for both devices.
    
    While on it make use of DIV_ROUND_CLOSEST_ULL().
    
    [1] https://datasheets.maximintegrated.com/en/ds/MAX98089.pdf; page 86
    [2] https://datasheets.maximintegrated.com/en/ds/MAX98088.pdf; page 82
    
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Link: https://lore.kernel.org/r/20210423135402.32105-1-m.felsch@pengutronix.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9002013ffe0098e959c411afd71c3e62921a2ac
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Jun 8 10:12:21 2021 -0700

    proc: Track /proc/$pid/attr/ opener mm_struct
    
    commit 591a22c14d3f45cc38bd1931c593c221df2f1881 upstream.
    
    Commit bfb819ea20ce ("proc: Check /proc/$pid/attr/ writes against file opener")
    tried to make sure that there could not be a confusion between the opener of
    a /proc/$pid/attr/ file and the writer. It used struct cred to make sure
    the privileges didn't change. However, there were existing cases where a more
    privileged thread was passing the opened fd to a differently privileged thread
    (during container setup). Instead, use mm_struct to track whether the opener
    and writer are still the same process. (This is what several other proc files
    already do, though for different reasons.)
    
    Reported-by: Christian Brauner <christian.brauner@ubuntu.com>
    Reported-by: Andrea Righi <andrea.righi@canonical.com>
    Tested-by: Andrea Righi <andrea.righi@canonical.com>
    Fixes: bfb819ea20ce ("proc: Check /proc/$pid/attr/ writes against file opener")
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
