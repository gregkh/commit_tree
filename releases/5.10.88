commit 856f88f27bbc4d3b4b88ce6fe23964ffe60ea649
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 22 09:31:00 2021 +0100

    Linux 5.10.88
    
    Link: https://lore.kernel.org/r/20211220143029.352940568@linuxfoundation.org
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88f20cccbeec9a5e83621df5cc2453b5081454dc
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 30 08:36:12 2021 +0100

    xen/netback: don't queue unlimited number of packages
    
    commit be81992f9086b230623ae3ebbc85ecee4d00a3d3 upstream.
    
    In case a guest isn't consuming incoming network traffic as fast as it
    is coming in, xen-netback is buffering network packages in unlimited
    numbers today. This can result in host OOM situations.
    
    Commit f48da8b14d04ca8 ("xen-netback: fix unlimited guest Rx internal
    queue and carrier flapping") meant to introduce a mechanism to limit
    the amount of buffered data by stopping the Tx queue when reaching the
    data limit, but this doesn't work for cases like UDP.
    
    When hitting the limit don't queue further SKBs, but drop them instead.
    In order to be able to tell Rx packages have been dropped increment the
    rx_dropped statistics counter in this case.
    
    It should be noted that the old solution to continue queueing SKBs had
    the additional problem of an overflow of the 32-bit rx_queue_len value
    would result in intermittent Tx queue enabling.
    
    This is part of XSA-392
    
    Fixes: f48da8b14d04ca8 ("xen-netback: fix unlimited guest Rx internal queue and carrier flapping")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 525875c410df5d876b9615c44885ca7640aed6f2
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:25:12 2021 +0100

    xen/netback: fix rx queue stall detection
    
    commit 6032046ec4b70176d247a71836186d47b25d1684 upstream.
    
    Commit 1d5d48523900a4b ("xen-netback: require fewer guest Rx slots when
    not using GSO") introduced a security problem in netback, as an
    interface would only be regarded to be stalled if no slot is available
    in the rx queue ring page. In case the SKB at the head of the queued
    requests will need more than one rx slot and only one slot is free the
    stall detection logic will never trigger, as the test for that is only
    looking for at least one slot to be free.
    
    Fix that by testing for the needed number of slots instead of only one
    slot being available.
    
    In order to not have to take the rx queue lock that often, store the
    number of needed slots in the queue data. As all SKB dequeue operations
    happen in the rx queue kernel thread this is safe, as long as the
    number of needed slots is accessed via READ/WRITE_ONCE() only and
    updates are always done with the rx queue lock held.
    
    Add a small helper for obtaining the number of free slots.
    
    This is part of XSA-392
    
    Fixes: 1d5d48523900a4b ("xen-netback: require fewer guest Rx slots when not using GSO")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fa3a370cc2af858a9ba662ca4f2bd0917550563
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/console: harden hvc_xen against event channel storms
    
    commit fe415186b43df0db1f17fa3a46275fd92107fe71 upstream.
    
    The Xen console driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using a lateeoi event
    channel.
    
    For the normal domU initial console this requires the introduction of
    bind_evtchn_to_irq_lateeoi() as there is no xenbus device available
    at the time the event channel is bound to the irq.
    
    As the decision whether an interrupt was spurious or not requires to
    test for bytes having been read from the backend, move sending the
    event into the if statement, as sending an event without having found
    any bytes to be read is making no sense at all.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d31b3379179d64724d3bbfa87bd4ada94e3237de
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/netfront: harden netfront against event channel storms
    
    commit b27d47950e481f292c0a5ad57357edb9d95d03ba upstream.
    
    The Xen netfront driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using lateeoi event
    channels.
    
    For being able to detect the case of no rx responses being added while
    the carrier is down a new lock is needed in order to update and test
    rsp_cons and the number of seen unconsumed responses atomically.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ac3b6ee7c9ff2df7c99624bb1235e2e55623825
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Dec 16 08:24:08 2021 +0100

    xen/blkfront: harden blkfront against event channel storms
    
    commit 0fd08a34e8e3b67ec9bd8287ac0facf8374b844a upstream.
    
    The Xen blkfront driver is still vulnerable for an attack via excessive
    number of events sent by the backend. Fix that by using lateeoi event
    channels.
    
    This is part of XSA-391
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76ec7fe2d866b1299f759e0eb87443b03fced0ad
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Fri Dec 17 15:56:46 2021 +0100

    Revert "xsk: Do not sleep in poll() when need_wakeup set"
    
    commit 0706a78f31c4217ca144f630063ec9561a21548d upstream.
    
    This reverts commit bd0687c18e635b63233dc87f38058cd728802ab4.
    
    This patch causes a Tx only workload to go to sleep even when it does
    not have to, leading to misserable performance in skb mode. It fixed
    one rare problem but created a much worse one, so this need to be
    reverted while I try to craft a proper solution to the original
    problem.
    
    Fixes: bd0687c18e63 ("xsk: Do not sleep in poll() when need_wakeup set")
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20211217145646.26449-1-magnus.karlsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e24fc8983025565e24f9438d3d514c280fecb0b7
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Oct 6 08:38:09 2021 +0300

    bus: ti-sysc: Fix variable set but not used warning for reinit_modules
    
    commit 1b1da99b845337362a3dafe0f7b49927ab4ae041 upstream.
    
    Fix drivers/bus/ti-sysc.c:2494:13: error: variable 'error' set but not
    used introduced by commit 9d881361206e ("bus: ti-sysc: Add quirk handling
    for reinit on context lost").
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70692b06208c09c3cc2a0de2aaef63f4f139970a
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue Jul 20 06:16:27 2021 -0700

    rcu: Mark accesses to rcu_state.n_force_qs
    
    commit 2431774f04d1050292054c763070021bade7b151 upstream.
    
    This commit marks accesses to the rcu_state.n_force_qs.  These data
    races are hard to make happen, but syzkaller was equal to the task.
    
    Reported-by: syzbot+e08a83a1940ec3846cd5@syzkaller.appspotmail.com
    Acked-by: Marco Elver <elver@google.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9078e791426c2cbbdf28a320c3670f6e0a611e6
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Thu Nov 18 14:03:28 2021 -0500

    scsi: scsi_debug: Sanity check block descriptor length in resp_mode_select()
    
    commit e0a2c28da11e2c2b963fc01d50acbf03045ac732 upstream.
    
    In resp_mode_select() sanity check the block descriptor len to avoid UAF.
    
    BUG: KASAN: use-after-free in resp_mode_select+0xa4c/0xb40 drivers/scsi/scsi_debug.c:2509
    Read of size 1 at addr ffff888026670f50 by task scsicmd/15032
    
    CPU: 1 PID: 15032 Comm: scsicmd Not tainted 5.15.0-01d0625 #15
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    Call Trace:
     <TASK>
     dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:107
     print_address_description.constprop.9+0x28/0x160 mm/kasan/report.c:257
     kasan_report.cold.14+0x7d/0x117 mm/kasan/report.c:443
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/report_generic.c:306
     resp_mode_select+0xa4c/0xb40 drivers/scsi/scsi_debug.c:2509
     schedule_resp+0x4af/0x1a10 drivers/scsi/scsi_debug.c:5483
     scsi_debug_queuecommand+0x8c9/0x1e70 drivers/scsi/scsi_debug.c:7537
     scsi_queue_rq+0x16b4/0x2d10 drivers/scsi/scsi_lib.c:1521
     blk_mq_dispatch_rq_list+0xb9b/0x2700 block/blk-mq.c:1640
     __blk_mq_sched_dispatch_requests+0x28f/0x590 block/blk-mq-sched.c:325
     blk_mq_sched_dispatch_requests+0x105/0x190 block/blk-mq-sched.c:358
     __blk_mq_run_hw_queue+0xe5/0x150 block/blk-mq.c:1762
     __blk_mq_delay_run_hw_queue+0x4f8/0x5c0 block/blk-mq.c:1839
     blk_mq_run_hw_queue+0x18d/0x350 block/blk-mq.c:1891
     blk_mq_sched_insert_request+0x3db/0x4e0 block/blk-mq-sched.c:474
     blk_execute_rq_nowait+0x16b/0x1c0 block/blk-exec.c:63
     sg_common_write.isra.18+0xeb3/0x2000 drivers/scsi/sg.c:837
     sg_new_write.isra.19+0x570/0x8c0 drivers/scsi/sg.c:775
     sg_ioctl_common+0x14d6/0x2710 drivers/scsi/sg.c:941
     sg_ioctl+0xa2/0x180 drivers/scsi/sg.c:1166
     __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:52
     do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:50
     entry_SYSCALL_64_after_hwframe+0x44/0xae arch/x86/entry/entry_64.S:113
    
    Link: https://lore.kernel.org/r/1637262208-28850-1-git-send-email-george.kennedy@oracle.com
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdb854f134b964528fa543e0351022eb45bd7346
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Tue Nov 9 13:57:27 2021 -0500

    scsi: scsi_debug: Fix type in min_t to avoid stack OOB
    
    commit 36e07d7ede88a1f1ef8f0f209af5b7612324ac2c upstream.
    
    Change min_t() to use type "u32" instead of type "int" to avoid stack out
    of bounds. With min_t() type "int" the values get sign extended and the
    larger value gets used causing stack out of bounds.
    
    BUG: KASAN: stack-out-of-bounds in memcpy include/linux/fortify-string.h:191 [inline]
    BUG: KASAN: stack-out-of-bounds in sg_copy_buffer+0x1de/0x240 lib/scatterlist.c:976
    Read of size 127 at addr ffff888072607128 by task syz-executor.7/18707
    
    CPU: 1 PID: 18707 Comm: syz-executor.7 Not tainted 5.15.0-syzk #1
    Hardware name: Red Hat KVM, BIOS 1.13.0-2
    Call Trace:
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:106
     print_address_description.constprop.9+0x28/0x160 mm/kasan/report.c:256
     __kasan_report mm/kasan/report.c:442 [inline]
     kasan_report.cold.14+0x7d/0x117 mm/kasan/report.c:459
     check_region_inline mm/kasan/generic.c:183 [inline]
     kasan_check_range+0x1a3/0x210 mm/kasan/generic.c:189
     memcpy+0x23/0x60 mm/kasan/shadow.c:65
     memcpy include/linux/fortify-string.h:191 [inline]
     sg_copy_buffer+0x1de/0x240 lib/scatterlist.c:976
     sg_copy_from_buffer+0x33/0x40 lib/scatterlist.c:1000
     fill_from_dev_buffer.part.34+0x82/0x130 drivers/scsi/scsi_debug.c:1162
     fill_from_dev_buffer drivers/scsi/scsi_debug.c:1888 [inline]
     resp_readcap16+0x365/0x3b0 drivers/scsi/scsi_debug.c:1887
     schedule_resp+0x4d8/0x1a70 drivers/scsi/scsi_debug.c:5478
     scsi_debug_queuecommand+0x8c9/0x1ec0 drivers/scsi/scsi_debug.c:7533
     scsi_dispatch_cmd drivers/scsi/scsi_lib.c:1520 [inline]
     scsi_queue_rq+0x16b0/0x2d40 drivers/scsi/scsi_lib.c:1699
     blk_mq_dispatch_rq_list+0xb9b/0x2700 block/blk-mq.c:1639
     __blk_mq_sched_dispatch_requests+0x28f/0x590 block/blk-mq-sched.c:325
     blk_mq_sched_dispatch_requests+0x105/0x190 block/blk-mq-sched.c:358
     __blk_mq_run_hw_queue+0xe5/0x150 block/blk-mq.c:1761
     __blk_mq_delay_run_hw_queue+0x4f8/0x5c0 block/blk-mq.c:1838
     blk_mq_run_hw_queue+0x18d/0x350 block/blk-mq.c:1891
     blk_mq_sched_insert_request+0x3db/0x4e0 block/blk-mq-sched.c:474
     blk_execute_rq_nowait+0x16b/0x1c0 block/blk-exec.c:62
     sg_common_write.isra.18+0xeb3/0x2000 drivers/scsi/sg.c:836
     sg_new_write.isra.19+0x570/0x8c0 drivers/scsi/sg.c:774
     sg_ioctl_common+0x14d6/0x2710 drivers/scsi/sg.c:939
     sg_ioctl+0xa2/0x180 drivers/scsi/sg.c:1165
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl fs/ioctl.c:860 [inline]
     __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Link: https://lore.kernel.org/r/1636484247-21254-1-git-send-email-george.kennedy@oracle.com
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa1f912712a109b6306746133de7e5343f016b26
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Thu Nov 4 15:06:37 2021 -0500

    scsi: scsi_debug: Don't call kcalloc() if size arg is zero
    
    commit 3344b58b53a76199dae48faa396e9fc37bf86992 upstream.
    
    If the size arg to kcalloc() is zero, it returns ZERO_SIZE_PTR.  Because of
    that, for a following NULL pointer check to work on the returned pointer,
    kcalloc() must not be called with the size arg equal to zero. Return early
    without error before the kcalloc() call if size arg is zero.
    
    BUG: KASAN: null-ptr-deref in memcpy include/linux/fortify-string.h:191 [inline]
    BUG: KASAN: null-ptr-deref in sg_copy_buffer+0x138/0x240 lib/scatterlist.c:974
    Write of size 4 at addr 0000000000000010 by task syz-executor.1/22789
    
    CPU: 1 PID: 22789 Comm: syz-executor.1 Not tainted 5.15.0-syzk #1
    Hardware name: Red Hat KVM, BIOS 1.13.0-2
    Call Trace:
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0x89/0xb5 lib/dump_stack.c:106
     __kasan_report mm/kasan/report.c:446 [inline]
     kasan_report.cold.14+0x112/0x117 mm/kasan/report.c:459
     check_region_inline mm/kasan/generic.c:183 [inline]
     kasan_check_range+0x1a3/0x210 mm/kasan/generic.c:189
     memcpy+0x3b/0x60 mm/kasan/shadow.c:66
     memcpy include/linux/fortify-string.h:191 [inline]
     sg_copy_buffer+0x138/0x240 lib/scatterlist.c:974
     do_dout_fetch drivers/scsi/scsi_debug.c:2954 [inline]
     do_dout_fetch drivers/scsi/scsi_debug.c:2946 [inline]
     resp_verify+0x49e/0x930 drivers/scsi/scsi_debug.c:4276
     schedule_resp+0x4d8/0x1a70 drivers/scsi/scsi_debug.c:5478
     scsi_debug_queuecommand+0x8c9/0x1ec0 drivers/scsi/scsi_debug.c:7533
     scsi_dispatch_cmd drivers/scsi/scsi_lib.c:1520 [inline]
     scsi_queue_rq+0x16b0/0x2d40 drivers/scsi/scsi_lib.c:1699
     blk_mq_dispatch_rq_list+0xb9b/0x2700 block/blk-mq.c:1639
     __blk_mq_sched_dispatch_requests+0x28f/0x590 block/blk-mq-sched.c:325
     blk_mq_sched_dispatch_requests+0x105/0x190 block/blk-mq-sched.c:358
     __blk_mq_run_hw_queue+0xe5/0x150 block/blk-mq.c:1761
     __blk_mq_delay_run_hw_queue+0x4f8/0x5c0 block/blk-mq.c:1838
     blk_mq_run_hw_queue+0x18d/0x350 block/blk-mq.c:1891
     blk_mq_sched_insert_request+0x3db/0x4e0 block/blk-mq-sched.c:474
     blk_execute_rq_nowait+0x16b/0x1c0 block/blk-exec.c:62
     blk_execute_rq+0xdb/0x360 block/blk-exec.c:102
     sg_scsi_ioctl drivers/scsi/scsi_ioctl.c:621 [inline]
     scsi_ioctl+0x8bb/0x15c0 drivers/scsi/scsi_ioctl.c:930
     sg_ioctl_common+0x172d/0x2710 drivers/scsi/sg.c:1112
     sg_ioctl+0xa2/0x180 drivers/scsi/sg.c:1165
     vfs_ioctl fs/ioctl.c:51 [inline]
     __do_sys_ioctl fs/ioctl.c:874 [inline]
     __se_sys_ioctl fs/ioctl.c:860 [inline]
     __x64_sys_ioctl+0x19d/0x220 fs/ioctl.c:860
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3a/0x80 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Link: https://lore.kernel.org/r/1636056397-13151-1-git-send-email-george.kennedy@oracle.com
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6859985a2fbda5d1586bf44538853e1be69e85f7
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Nov 4 10:55:34 2021 +0100

    ovl: fix warning in ovl_create_real()
    
    commit 1f5573cfe7a7056e80a92c7a037a3e69f3a13d1c upstream.
    
    Syzbot triggered the following warning in ovl_workdir_create() ->
    ovl_create_real():
    
            if (!err && WARN_ON(!newdentry->d_inode)) {
    
    The reason is that the cgroup2 filesystem returns from mkdir without
    instantiating the new dentry.
    
    Weird filesystems such as this will be rejected by overlayfs at a later
    stage during setup, but to prevent such a warning, call ovl_mkdir_real()
    directly from ovl_workdir_create() and reject this case early.
    
    Reported-and-tested-by: syzbot+75eab84fd0af9e8bf66b@syzkaller.appspotmail.com
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fd7d62daa241f0d5c6d25b29b2ba4bba48872cb
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 22 17:03:01 2021 +0200

    fuse: annotate lock in fuse_reverse_inval_entry()
    
    commit bda9a71980e083699a0360963c0135657b73f47a upstream.
    
    Add missing inode lock annotatation; found by syzbot.
    
    Reported-and-tested-by: syzbot+9f747458f5990eaa8d43@syzkaller.appspotmail.com
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b99bdf127af91d53919e96292c05f737c45ea59a
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Thu Aug 19 12:42:21 2021 +0200

    media: mxl111sf: change mutex_init() location
    
    commit 44870a9e7a3c24acbb3f888b2a7cc22c9bdf7e7f upstream.
    
    Syzbot reported, that mxl111sf_ctrl_msg() uses uninitialized
    mutex. The problem was in wrong mutex_init() location.
    
    Previous mutex_init(&state->msg_lock) call was in ->init() function, but
    dvb_usbv2_init() has this order of calls:
    
            dvb_usbv2_init()
              dvb_usbv2_adapter_init()
                dvb_usbv2_adapter_frontend_init()
                  props->frontend_attach()
    
              props->init()
    
    Since mxl111sf_* devices call mxl111sf_ctrl_msg() in ->frontend_attach()
    internally we need to initialize state->msg_lock before
    frontend_attach(). To achieve it, ->probe() call added to all mxl111sf_*
    devices, which will simply initiaize mutex.
    
    Reported-and-tested-by: syzbot+5ca0bf339f13c4243001@syzkaller.appspotmail.com
    
    Fixes: 8572211842af ("[media] mxl111sf: convert to new DVB USB")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0413f7a1a53306bc7a0b7e4d6f5dbf94761db406
Author: Magnus Karlsson <magnus.karlsson@intel.com>
Date:   Tue Dec 14 11:26:07 2021 +0100

    xsk: Do not sleep in poll() when need_wakeup set
    
    commit bd0687c18e635b63233dc87f38058cd728802ab4 upstream.
    
    Do not sleep in poll() when the need_wakeup flag is set. When this
    flag is set, the application needs to explicitly wake up the driver
    with a syscall (poll, recvmsg, sendmsg, etc.) to guarantee that Rx
    and/or Tx processing will be processed promptly. But the current code
    in poll(), sleeps first then wakes up the driver. This means that no
    driver processing will occur (baring any interrupts) until the timeout
    has expired.
    
    Fix this by checking the need_wakeup flag first and if set, wake the
    driver and return to the application. Only if need_wakeup is not set
    should the process sleep if there is a timeout set in the poll() call.
    
    Fixes: 77cd0d7b3f25 ("xsk: add support for need_wakeup flag in AF_XDP rings")
    Reported-by: Keith Wiles <keith.wiles@intel.com>
    Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Link: https://lore.kernel.org/bpf/20211214102607.7677-1-magnus.karlsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b8d8ecdd980ce54fb7a51b0a0f8e3ad4ef577aa
Author: Fabio Estevam <festevam@gmail.com>
Date:   Wed Nov 24 15:45:41 2021 -0300

    ARM: dts: imx6ull-pinfunc: Fix CSI_DATA07__ESAI_TX0 pad name
    
    commit 737e65c7956795b3553781fb7bc82fce1c39503f upstream.
    
    According to the i.MX6ULL Reference Manual, pad CSI_DATA07 may
    have the ESAI_TX0 functionality, not ESAI_T0.
    
    Also, NXP's i.MX Config Tools 10.0 generates dtsi with the
    MX6ULL_PAD_CSI_DATA07__ESAI_TX0 naming, so fix it accordingly.
    
    There are no devicetree users in mainline that use the old name,
    so just remove the old entry.
    
    Fixes: c201369d4aa5 ("ARM: dts: imx6ull: add imx6ull support")
    Reported-by: George Makarov <georgemakarov1@gmail.com>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8affa1b68db647f854c2026fab6283673e94579f
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Oct 15 13:13:06 2021 -0700

    Input: touchscreen - avoid bitwise vs logical OR warning
    
    commit a02dcde595f7cbd240ccd64de96034ad91cffc40 upstream.
    
    A new warning in clang points out a few places in this driver where a
    bitwise OR is being used with boolean types:
    
    drivers/input/touchscreen.c:81:17: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
            data_present = touchscreen_get_prop_u32(dev, "touchscreen-min-x",
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    This use of a bitwise OR is intentional, as bitwise operations do not
    short circuit, which allows all the calls to touchscreen_get_prop_u32()
    to happen so that the last parameter is initialized while coalescing the
    results of the calls to make a decision after they are all evaluated.
    
    To make this clearer to the compiler, use the '|=' operator to assign
    the result of each touchscreen_get_prop_u32() call to data_present,
    which keeps the meaning of the code the same but makes it obvious that
    every one of these calls is expected to happen.
    
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20211014205757.3474635-1-nathan@kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aec5897b277b13acd8f913d777654d4d092a24f1
Author: Le Ma <le.ma@amd.com>
Date:   Sat Dec 4 18:59:08 2021 +0800

    drm/amdgpu: correct register access for RLC_JUMP_TABLE_RESTORE
    
    commit f3a8076eb28cae1553958c629aecec479394bbe2 upstream.
    
    should count on GC IP base address
    
    Signed-off-by: Le Ma <le.ma@amd.com>
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1d519263ded9a51560420e6c4a42fb02cc8c478
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Tue Dec 14 09:45:10 2021 -0500

    libata: if T_LENGTH is zero, dma direction should be DMA_NONE
    
    commit 5da5231bb47864e5dd6c6731151e98b6ee498827 upstream.
    
    Avoid data corruption by rejecting pass-through commands where
    T_LENGTH is zero (No data is transferred) and the dma direction
    is not DMA_NONE.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: syzkaller<syzkaller@googlegroups.com>
    Signed-off-by: George Kennedy<george.kennedy@oracle.com>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9f2c6af5a601a2e2bf40e5561bedc87a44d9649
Author: Yu Liao <liaoyu15@huawei.com>
Date:   Mon Dec 13 21:57:27 2021 +0800

    timekeeping: Really make sure wall_to_monotonic isn't positive
    
    commit 4e8c11b6b3f0b6a283e898344f154641eda94266 upstream.
    
    Even after commit e1d7ba873555 ("time: Always make sure wall_to_monotonic
    isn't positive") it is still possible to make wall_to_monotonic positive
    by running the following code:
    
        int main(void)
        {
            struct timespec time;
    
            clock_gettime(CLOCK_MONOTONIC, &time);
            time.tv_nsec = 0;
            clock_settime(CLOCK_REALTIME, &time);
            return 0;
        }
    
    The reason is that the second parameter of timespec64_compare(), ts_delta,
    may be unnormalized because the delta is calculated with an open coded
    substraction which causes the comparison of tv_sec to yield the wrong
    result:
    
      wall_to_monotonic = { .tv_sec = -10, .tv_nsec =  900000000 }
      ts_delta          = { .tv_sec =  -9, .tv_nsec = -900000000 }
    
    That makes timespec64_compare() claim that wall_to_monotonic < ts_delta,
    but actually the result should be wall_to_monotonic > ts_delta.
    
    After normalization, the result of timespec64_compare() is correct because
    the tv_sec comparison is not longer misleading:
    
      wall_to_monotonic = { .tv_sec = -10, .tv_nsec =  900000000 }
      ts_delta          = { .tv_sec = -10, .tv_nsec =  100000000 }
    
    Use timespec64_sub() to ensure that ts_delta is normalized, which fixes the
    issue.
    
    Fixes: e1d7ba873555 ("time: Always make sure wall_to_monotonic isn't positive")
    Signed-off-by: Yu Liao <liaoyu15@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211213135727.1656662-1-liaoyu15@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6471ebcd6f15ee9decf9d2f4acc49073215933e0
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Dec 15 15:58:35 2021 +0800

    serial: 8250_fintek: Fix garbled text for console
    
    commit 6c33ff728812aa18792afffaf2c9873b898e7512 upstream.
    
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    introduced support to use high baudrate with Fintek SuperIO UARTs. It'll
    change clocksources when the UART probed.
    
    But when user add kernel parameter "console=ttyS0,115200 console=tty0" to make
    the UART as console output, the console will output garbled text after the
    following kernel message.
    
    [    3.681188] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
    
    The issue is occurs in following step:
            probe_setup_port() -> fintek_8250_goto_highspeed()
    
    It change clocksource from 115200 to 921600 with wrong time, it should change
    clocksource in set_termios() not in probed. The following 3 patches are
    implemented change clocksource in fintek_8250_set_termios().
    
    Commit 58178914ae5b ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H")
    Commit 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Commit 423d9118c624 ("serial: 8250_fintek: Add F81966 Support")
    
    Due to the high baud rate had implemented above 3 patches and the patch
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    is bugged, So this patch will remove it.
    
    Fixes: fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215075835.2072-1-hpeter+linux_kernel@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7c80674538f15f85d68138240aae440b8039519
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Dec 13 14:14:43 2021 -1000

    iocost: Fix divide-by-zero on donation from low hweight cgroup
    
    commit edaa26334c117a584add6053f48d63a988d25a6e upstream.
    
    The donation calculation logic assumes that the donor has non-zero
    after-donation hweight, so the lowest active hweight a donating cgroup can
    have is 2 so that it can donate 1 while keeping the other 1 for itself.
    Earlier, we only donated from cgroups with sizable surpluses so this
    condition was always true. However, with the precise donation algorithm
    implemented, f1de2439ec43 ("blk-iocost: revamp donation amount
    determination") made the donation amount calculation exact enabling even low
    hweight cgroups to donate.
    
    This means that in rare occasions, a cgroup with active hweight of 1 can
    enter donation calculation triggering the following warning and then a
    divide-by-zero oops.
    
     WARNING: CPU: 4 PID: 0 at block/blk-iocost.c:1928 transfer_surpluses.cold+0x0/0x53 [884/94867]
     ...
     RIP: 0010:transfer_surpluses.cold+0x0/0x53
     Code: 92 ff 48 c7 c7 28 d1 ab b5 65 48 8b 34 25 00 ae 01 00 48 81 c6 90 06 00 00 e8 8b 3f fe ff 48 c7 c0 ea ff ff ff e9 95 ff 92 ff <0f> 0b 48 c7 c7 30 da ab b5 e8 71 3f fe ff 4c 89 e8 4d 85 ed 74 0
    4
     ...
     Call Trace:
      <IRQ>
      ioc_timer_fn+0x1043/0x1390
      call_timer_fn+0xa1/0x2c0
      __run_timers.part.0+0x1ec/0x2e0
      run_timer_softirq+0x35/0x70
     ...
     iocg: invalid donation weights in /a/b: active=1 donating=1 after=0
    
    Fix it by excluding cgroups w/ active hweight < 2 from donating. Excluding
    these extreme low hweight donations shouldn't affect work conservation in
    any meaningful way.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: f1de2439ec43 ("blk-iocost: revamp donation amount determination")
    Cc: stable@vger.kernel.org # v5.10+
    Link: https://lore.kernel.org/r/Ybfh86iSvpWKxhVM@slm.duckdns.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcebb8eb1948c412189f087c0d0d073bc8f960d9
Author: Naohiro Aota <naohiro.aota@wdc.com>
Date:   Fri Dec 17 15:15:45 2021 +0900

    zonefs: add MODULE_ALIAS_FS
    
    commit 8ffea2599f63fdbee968b894eab78170abf3ec2c upstream.
    
    Add MODULE_ALIAS_FS() to load the module automatically when you do "mount
    -t zonefs".
    
    Fixes: 8dcc1a9d90c1 ("fs: New zonefs file system")
    Cc: stable <stable@vger.kernel.org> # 5.6+
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Reviewed-by: Johannes Thumshirn <jth@kernel.org>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c414ff63b2ddb2e4125ce071ddf87e0ec03de46
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Dec 10 19:02:18 2021 +0000

    btrfs: fix double free of anon_dev after failure to create subvolume
    
    commit 33fab972497ae66822c0b6846d4f9382938575b6 upstream.
    
    When creating a subvolume, at create_subvol(), we allocate an anonymous
    device and later call btrfs_get_new_fs_root(), which in turn just calls
    btrfs_get_root_ref(). There we call btrfs_init_fs_root() which assigns
    the anonymous device to the root, but if after that call there's an error,
    when we jump to 'fail' label, we call btrfs_put_root(), which frees the
    anonymous device and then returns an error that is propagated back to
    create_subvol(). Than create_subvol() frees the anonymous device again.
    
    When this happens, if the anonymous device was not reallocated after
    the first time it was freed with btrfs_put_root(), we get a kernel
    message like the following:
    
      (...)
      [13950.282466] BTRFS: error (device dm-0) in create_subvol:663: errno=-5 IO failure
      [13950.283027] ida_free called for id=65 which is not allocated.
      [13950.285974] BTRFS info (device dm-0): forced readonly
      (...)
    
    If the anonymous device gets reallocated by another btrfs filesystem
    or any other kernel subsystem, then bad things can happen.
    
    So fix this by setting the root's anonymous device to 0 at
    btrfs_get_root_ref(), before we call btrfs_put_root(), if an error
    happened.
    
    Fixes: 2dfb1e43f57dd3 ("btrfs: preallocate anon block device at first phase of snapshot creation")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 005d9292b5b2e71a009f911bd85d755009b37242
Author: Jianglei Nie <niejianglei2021@163.com>
Date:   Thu Dec 9 14:56:31 2021 +0800

    btrfs: fix memory leak in __add_inode_ref()
    
    commit f35838a6930296fc1988764cfa54cb3f705c0665 upstream.
    
    Line 1169 (#3) allocates a memory chunk for victim_name by kmalloc(),
    but  when the function returns in line 1184 (#4) victim_name allocated
    by line 1169 (#3) is not freed, which will lead to a memory leak.
    There is a similar snippet of code in this function as allocating a memory
    chunk for victim_name in line 1104 (#1) as well as releasing the memory
    in line 1116 (#2).
    
    We should kfree() victim_name when the return value of backref_in_log()
    is less than zero and before the function returns in line 1184 (#4).
    
    1057 static inline int __add_inode_ref(struct btrfs_trans_handle *trans,
    1058                              struct btrfs_root *root,
    1059                              struct btrfs_path *path,
    1060                              struct btrfs_root *log_root,
    1061                              struct btrfs_inode *dir,
    1062                              struct btrfs_inode *inode,
    1063                              u64 inode_objectid, u64 parent_objectid,
    1064                              u64 ref_index, char *name, int namelen,
    1065                              int *search_done)
    1066 {
    
    1104    victim_name = kmalloc(victim_name_len, GFP_NOFS);
            // #1: kmalloc (victim_name-1)
    1105    if (!victim_name)
    1106            return -ENOMEM;
    
    1112    ret = backref_in_log(log_root, &search_key,
    1113                    parent_objectid, victim_name,
    1114                    victim_name_len);
    1115    if (ret < 0) {
    1116            kfree(victim_name); // #2: kfree (victim_name-1)
    1117            return ret;
    1118    } else if (!ret) {
    
    1169    victim_name = kmalloc(victim_name_len, GFP_NOFS);
            // #3: kmalloc (victim_name-2)
    1170    if (!victim_name)
    1171            return -ENOMEM;
    
    1180    ret = backref_in_log(log_root, &search_key,
    1181                    parent_objectid, victim_name,
    1182                    victim_name_len);
    1183    if (ret < 0) {
    1184            return ret; // #4: missing kfree (victim_name-2)
    1185    } else if (!ret) {
    
    1241    return 0;
    1242 }
    
    Fixes: d3316c8233bb ("btrfs: Properly handle backref_in_log retval")
    CC: stable@vger.kernel.org # 5.10+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Jianglei Nie <niejianglei2021@163.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd98cb5216a01f13296f759f790a1310c648d4c9
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Dec 10 11:07:14 2021 +0100

    USB: serial: option: add Telit FN990 compositions
    
    commit 2b503c8598d1b232e7fc7526bce9326d92331541 upstream.
    
    Add the following Telit FN990 compositions:
    
    0x1070: tty, adb, rmnet, tty, tty, tty, tty
    0x1071: tty, adb, mbim, tty, tty, tty, tty
    0x1072: rndis, tty, adb, tty, tty, tty, tty
    0x1073: tty, adb, ecm, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20211210100714.22587-1-dnlplm@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c93584d9a2fd7e9e4238868c754b5eb0acf5452
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Nov 26 10:43:48 2021 +0100

    USB: serial: cp210x: fix CP2105 GPIO registration
    
    commit 83b67041f3eaf33f98a075249aa7f4c7617c2f85 upstream.
    
    When generalising GPIO support and adding support for CP2102N, the GPIO
    registration for some CP2105 devices accidentally broke. Specifically,
    when all the pins of a port are in "modem" mode, and thus unavailable
    for GPIO use, the GPIO chip would now be registered without having
    initialised the number of GPIO lines. This would in turn be rejected by
    gpiolib and some errors messages would be printed (but importantly probe
    would still succeed).
    
    Fix this by initialising the number of GPIO lines before registering the
    GPIO chip.
    
    Note that as for the other device types, and as when all CP2105 pins are
    muxed for LED function, the GPIO chip is registered also when no pins
    are available for GPIO use.
    
    Reported-by: Maarten Brock <m.brock@vanmierlo.com>
    Link: https://lore.kernel.org/r/5eb560c81d2ea1a2b4602a92d9f48a89@vanmierlo.com
    Fixes: c8acfe0aadbe ("USB: serial: cp210x: implement GPIO support for CP2102N")
    Cc: stable@vger.kernel.org      # 4.19
    Cc: Karoly Pados <pados@pados.hu>
    Link: https://lore.kernel.org/r/20211126094348.31698-1-johan@kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Tested-by: Maarten Brock <m.brock@vanmierlo.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f207f12630bc52221accb8f89957425e27bcfa0
Author: Nehal Bakulchandra Shah <Nehal-Bakulchandra.shah@amd.com>
Date:   Wed Dec 15 15:02:16 2021 +0530

    usb: xhci: Extend support for runtime power management for AMD's Yellow carp.
    
    commit f886d4fbb7c97b8f5f447c92d2dab99c841803c0 upstream.
    
    AMD's Yellow Carp platform has few more XHCI controllers,
    enable the runtime power management support for the same.
    
    Signed-off-by: Nehal Bakulchandra Shah <Nehal-Bakulchandra.shah@amd.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211215093216.1839065-1-Nehal-Bakulchandra.shah@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5949933f313c9e2c30ba05b977a047148b5e38c
Author: Stefan Roese <sr@denx.de>
Date:   Tue Dec 14 12:49:32 2021 +0100

    PCI/MSI: Mask MSI-X vectors only on success
    
    commit 83dbf898a2d45289be875deb580e93050ba67529 upstream.
    
    Masking all unused MSI-X entries is done to ensure that a crash kernel
    starts from a clean slate, which correponds to the reset state of the
    device as defined in the PCI-E specificion 3.0 and later:
    
     Vector Control for MSI-X Table Entries
     --------------------------------------
    
     "00: Mask bit:  When this bit is set, the function is prohibited from
                     sending a message using this MSI-X Table entry.
                     ...
                     This bit’s state after reset is 1 (entry is masked)."
    
    A Marvell NVME device fails to deliver MSI interrupts after trying to
    enable MSI-X interrupts due to that masking. It seems to take the MSI-X
    mask bits into account even when MSI-X is disabled.
    
    While not specification compliant, this can be cured by moving the masking
    into the success path, so that the MSI-X table entries stay in device reset
    state when the MSI-X setup fails.
    
    [ tglx: Move it into the success path, add comment and amend changelog ]
    
    Fixes: aa8092c1d1f1 ("PCI/MSI: Mask all unused MSI-X entries")
    Signed-off-by: Stefan Roese <sr@denx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-pci@vger.kernel.org
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211210161025.3287927-1-sr@denx.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8aa09186c3068478133dcd129a2f3ba39e104af
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Dec 14 12:42:14 2021 +0100

    PCI/MSI: Clear PCI_MSIX_FLAGS_MASKALL on error
    
    commit 94185adbfad56815c2c8401e16d81bdb74a79201 upstream.
    
    PCI_MSIX_FLAGS_MASKALL is set in the MSI-X control register at MSI-X
    interrupt setup time. It's cleared on success, but the error handling path
    only clears the PCI_MSIX_FLAGS_ENABLE bit.
    
    That's incorrect as the reset state of the PCI_MSIX_FLAGS_MASKALL bit is
    zero. That can be observed via lspci:
    
            Capabilities: [b0] MSI-X: Enable- Count=67 Masked+
    
    Clear the bit in the error path to restore the reset state.
    
    Fixes: 438553958ba1 ("PCI/MSI: Enable and mask MSI-X early")
    Reported-by: Stefan Roese <sr@denx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Stefan Roese <sr@denx.de>
    Cc: linux-pci@vger.kernel.org
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Marek Vasut <marex@denx.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87tufevoqx.ffs@tglx
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d17c5a389768eb658b6a36eab3c25326813d46b1
Author: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date:   Tue Dec 7 13:45:10 2021 +0100

    usb: dwc2: fix STM ID/VBUS detection startup delay in dwc2_driver_probe
    
    commit fac6bf87c55f7f0733efb0375565fb6a50cf2caf upstream.
    
    When activate_stm_id_vb_detection is enabled, ID and Vbus detection relies
    on sensing comparators. This detection needs time to stabilize.
    A delay was already applied in dwc2_resume() when reactivating the
    detection, but it wasn't done in dwc2_probe().
    This patch adds delay after enabling STM ID/VBUS detection. Then, ID state
    is good when initializing gadget and host, and avoid to get a wrong
    Connector ID Status Change interrupt.
    
    Fixes: a415083a11cc ("usb: dwc2: add support for STM32MP15 SoCs USB OTG HS and FS")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
    Link: https://lore.kernel.org/r/20211207124510.268841-1-amelie.delaunay@foss.st.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b2edc8fc5a8b4a5ff953a395f8aeeb5413299b6
Author: Jimmy Wang <wangjm221@gmail.com>
Date:   Tue Dec 14 09:26:50 2021 +0800

    USB: NO_LPM quirk Lenovo USB-C to Ethernet Adapher(RTL8153-04)
    
    commit 0ad3bd562bb91853b9f42bda145b5db6255aee90 upstream.
    
    This device doesn't work well with LPM, losing connectivity intermittently.
    Disable LPM to resolve the issue.
    
    Reviewed-by: <markpearson@lenovo.com>
    Signed-off-by: Jimmy Wang <wangjm221@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211214012652.4898-1-wangjm221@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd623e16b2ff83ce8579f1ce11ad5f2debeabfbb
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Wed Dec 15 20:52:40 2021 +0900

    tty: n_hdlc: make n_hdlc_tty_wakeup() asynchronous
    
    commit 1ee33b1ca2b8dabfcc17198ffd049a6b55674a86 upstream.
    
    syzbot is reporting that an unprivileged user who logged in from tty
    console can crash the system using a reproducer shown below [1], for
    n_hdlc_tty_wakeup() is synchronously calling n_hdlc_send_frames().
    
    ----------
      #include <sys/ioctl.h>
      #include <unistd.h>
    
      int main(int argc, char *argv[])
      {
        const int disc = 0xd;
    
        ioctl(1, TIOCSETD, &disc);
        while (1) {
          ioctl(1, TCXONC, 0);
          write(1, "", 1);
          ioctl(1, TCXONC, 1); /* Kernel panic - not syncing: scheduling while atomic */
        }
      }
    ----------
    
    Linus suspected that "struct tty_ldisc"->ops->write_wakeup() must not
    sleep, and Jiri confirmed it from include/linux/tty_ldisc.h. Thus, defer
    n_hdlc_send_frames() from n_hdlc_tty_wakeup() to a WQ context like
    net/nfc/nci/uart.c does.
    
    Link: https://syzkaller.appspot.com/bug?extid=5f47a8cea6a12b77a876 [1]
    Reported-by: syzbot <syzbot+5f47a8cea6a12b77a876@syzkaller.appspotmail.com>
    Cc: stable <stable@vger.kernel.org>
    Analyzed-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Confirmed-by: Jiri Slaby <jirislaby@kernel.org>
    Reviewed-by: Fabio M. De Francesco <fmdefrancesco@gmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Link: https://lore.kernel.org/r/40de8b7e-a3be-4486-4e33-1b1d1da452f8@i-love.sakura.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9439fabfc349c3e8eacfb6b0856d6739de129969
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Dec 16 17:52:13 2021 +0100

    KVM: x86: Drop guest CPUID check for host initiated writes to MSR_IA32_PERF_CAPABILITIES
    
    [ Upstream commit 1aa2abb33a419090c7c87d4ae842a6347078ee12 ]
    
    The ability to write to MSR_IA32_PERF_CAPABILITIES from the host should
    not depend on guest visible CPUID entries, even if just to allow
    creating/restoring guest MSRs and CPUIDs in any sequence.
    
    Fixes: 27461da31089 ("KVM: x86/pmu: Support full width counting")
    Suggested-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20211216165213.338923-3-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fe305c6d485e55f964f5b60923234cedf24d57a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 17 16:24:30 2021 +0100

    Revert "usb: early: convert to readl_poll_timeout_atomic()"
    
    [ Upstream commit c4d936efa46d8ea183df16c0f3fa4423327da51d ]
    
    This reverts commit 796eed4b2342c9d6b26c958e92af91253a2390e1.
    
    This change causes boot lockups when using "arlyprintk=xdbc" because
    ktime can not be used at this point in time in the boot process.  Also,
    it is not needed for very small delays like this.
    
    Reported-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Reported-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Fixes: 796eed4b2342 ("usb: early: convert to readl_poll_timeout_atomic()")
    Link: https://lore.kernel.org/r/c2b5c9bb-1b75-bf56-3754-b5b18812d65e@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b54f485f2c193100ed92d3c9a95dc6f0f27c620
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Dec 14 19:46:21 2021 +0100

    USB: gadget: bRequestType is a bitfield, not a enum
    
    [ Upstream commit f08adf5add9a071160c68bb2a61d697f39ab0758 ]
    
    Szymon rightly pointed out that the previous check for the endpoint
    direction in bRequestType was not looking at only the bit involved, but
    rather the whole value.  Normally this is ok, but for some request
    types, bits other than bit 8 could be set and the check for the endpoint
    length could not stall correctly.
    
    Fix that up by only checking the single bit.
    
    Fixes: 153a2d7e3350 ("USB: gadget: detect too-big endpoint 0 requests")
    Cc: Felipe Balbi <balbi@kernel.org>
    Reported-by: Szymon Heidrich <szymon.heidrich@gmail.com>
    Link: https://lore.kernel.org/r/20211214184621.385828-1-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 151ffac3ac277ad7c2a5f201b566b56d97ed3a99
Author: Xiaoming Ni <nixiaoming@huawei.com>
Date:   Fri Nov 26 12:11:53 2021 +0800

    powerpc/85xx: Fix oops when CONFIG_FSL_PMC=n
    
    [ Upstream commit 3dc709e518b47386e6af937eaec37bb36539edfd ]
    
    When CONFIG_FSL_PMC is set to n, no value is assigned to cpu_up_prepare
    in the mpc85xx_pm_ops structure. As a result, oops is triggered in
    smp_85xx_start_cpu().
    
      smp: Bringing up secondary CPUs ...
      kernel tried to execute user page (0) - exploit attempt? (uid: 0)
      BUG: Unable to handle kernel instruction fetch (NULL pointer?)
      Faulting instruction address: 0x00000000
      Oops: Kernel access of bad area, sig: 11 [#1]
      ...
      NIP [00000000] 0x0
      LR [c0021d2c] smp_85xx_kick_cpu+0xe8/0x568
      Call Trace:
      [c1051da8] [c0021cb8] smp_85xx_kick_cpu+0x74/0x568 (unreliable)
      [c1051de8] [c0011460] __cpu_up+0xc0/0x228
      [c1051e18] [c0031bbc] bringup_cpu+0x30/0x224
      [c1051e48] [c0031f3c] cpu_up.constprop.0+0x180/0x33c
      [c1051e88] [c00322e8] bringup_nonboot_cpus+0x88/0xc8
      [c1051eb8] [c07e67bc] smp_init+0x30/0x78
      [c1051ed8] [c07d9e28] kernel_init_freeable+0x118/0x2a8
      [c1051f18] [c00032d8] kernel_init+0x14/0x124
      [c1051f38] [c0010278] ret_from_kernel_thread+0x14/0x1c
    
    Fixes: c45361abb918 ("powerpc/85xx: fix timebase sync issue when CONFIG_HOTPLUG_CPU=n")
    Reported-by: Martin Kennedy <hurricos@gmail.com>
    Signed-off-by: Xiaoming Ni <nixiaoming@huawei.com>
    Tested-by: Martin Kennedy <hurricos@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211126041153.16926-1-nixiaoming@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcf9194d366c5c2e903c4f0f594d6bffbd92da8e
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Thu Dec 16 11:16:30 2021 -0800

    bpf, selftests: Fix racing issue in btf_skc_cls_ingress test
    
    [ Upstream commit c2fcbf81c332b42382a0c439bfe2414a241e4f5b ]
    
    The libbpf CI reported occasional failure in btf_skc_cls_ingress:
    
      test_syncookie:FAIL:Unexpected syncookie states gen_cookie:80326634 recv_cookie:0
      bpf prog error at line 97
    
    "error at line 97" means the bpf prog cannot find the listening socket
    when the final ack is received.  It then skipped processing
    the syncookie in the final ack which then led to "recv_cookie:0".
    
    The problem is the userspace program did not do accept() and went
    ahead to close(listen_fd) before the kernel (and the bpf prog) had
    a chance to process the final ack.
    
    The fix is to add accept() call so that the userspace will wait for
    the kernel to finish processing the final ack first before close()-ing
    everything.
    
    Fixes: 9a856cae2217 ("bpf: selftest: Add test_btf_skc_cls_ingress")
    Reported-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20211216191630.466151-1-kafai@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f46c59e60b64620d5d386c8ee2eaa11ebe3b595
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 16 03:17:41 2021 -0800

    sit: do not call ipip6_dev_free() from sit_init_net()
    
    [ Upstream commit e28587cc491ef0f3c51258fdc87fbc386b1d4c59 ]
    
    ipip6_dev_free is sit dev->priv_destructor, already called
    by register_netdevice() if something goes wrong.
    
    Alternative would be to make ipip6_dev_free() robust against
    multiple invocations, but other drivers do not implement this
    strategy.
    
    syzbot reported:
    
    dst_release underflow
    WARNING: CPU: 0 PID: 5059 at net/core/dst.c:173 dst_release+0xd8/0xe0 net/core/dst.c:173
    Modules linked in:
    CPU: 1 PID: 5059 Comm: syz-executor.4 Not tainted 5.16.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:dst_release+0xd8/0xe0 net/core/dst.c:173
    Code: 4c 89 f2 89 d9 31 c0 5b 41 5e 5d e9 da d5 44 f9 e8 1d 90 5f f9 c6 05 87 48 c6 05 01 48 c7 c7 80 44 99 8b 31 c0 e8 e8 67 29 f9 <0f> 0b eb 85 0f 1f 40 00 53 48 89 fb e8 f7 8f 5f f9 48 83 c3 a8 48
    RSP: 0018:ffffc9000aa5faa0 EFLAGS: 00010246
    RAX: d6894a925dd15a00 RBX: 00000000ffffffff RCX: 0000000000040000
    RDX: ffffc90005e19000 RSI: 000000000003ffff RDI: 0000000000040000
    RBP: 0000000000000000 R08: ffffffff816a1f42 R09: ffffed1017344f2c
    R10: ffffed1017344f2c R11: 0000000000000000 R12: 0000607f462b1358
    R13: 1ffffffff1bfd305 R14: ffffe8ffffcb1358 R15: dffffc0000000000
    FS:  00007f66c71a2700(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f88aaed5058 CR3: 0000000023e0f000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     dst_cache_destroy+0x107/0x1e0 net/core/dst_cache.c:160
     ipip6_dev_free net/ipv6/sit.c:1414 [inline]
     sit_init_net+0x229/0x550 net/ipv6/sit.c:1936
     ops_init+0x313/0x430 net/core/net_namespace.c:140
     setup_net+0x35b/0x9d0 net/core/net_namespace.c:326
     copy_net_ns+0x359/0x5c0 net/core/net_namespace.c:470
     create_new_namespaces+0x4ce/0xa00 kernel/nsproxy.c:110
     unshare_nsproxy_namespaces+0x11e/0x180 kernel/nsproxy.c:226
     ksys_unshare+0x57d/0xb50 kernel/fork.c:3075
     __do_sys_unshare kernel/fork.c:3146 [inline]
     __se_sys_unshare kernel/fork.c:3144 [inline]
     __x64_sys_unshare+0x34/0x40 kernel/fork.c:3144
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f66c882ce99
    Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f66c71a2168 EFLAGS: 00000246 ORIG_RAX: 0000000000000110
    RAX: ffffffffffffffda RBX: 00007f66c893ff60 RCX: 00007f66c882ce99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000048040200
    RBP: 00007f66c8886ff1 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fff6634832f R14: 00007f66c71a2300 R15: 0000000000022000
     </TASK>
    
    Fixes: cf124db566e6 ("net: Fix inconsistent teardown and release of private netdev state.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20211216111741.1387540-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e1011cd183faae8daff275c72444edcdfe0d473
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Dec 15 12:24:49 2021 -0800

    net: systemport: Add global locking for descriptor lifecycle
    
    [ Upstream commit 8b8e6e782456f1ce02a7ae914bbd5b1053f0b034 ]
    
    The descriptor list is a shared resource across all of the transmit queues, and
    the locking mechanism used today only protects concurrency across a given
    transmit queue between the transmit and reclaiming. This creates an opportunity
    for the SYSTEMPORT hardware to work on corrupted descriptors if we have
    multiple producers at once which is the case when using multiple transmit
    queues.
    
    This was particularly noticeable when using multiple flows/transmit queues and
    it showed up in interesting ways in that UDP packets would get a correct UDP
    header checksum being calculated over an incorrect packet length. Similarly TCP
    packets would get an equally correct checksum computed by the hardware over an
    incorrect packet length.
    
    The SYSTEMPORT hardware maintains an internal descriptor list that it re-arranges
    when the driver produces a new descriptor anytime it writes to the
    WRITE_PORT_{HI,LO} registers, there is however some delay in the hardware to
    re-organize its descriptors and it is possible that concurrent TX queues
    eventually break this internal allocation scheme to the point where the
    length/status part of the descriptor gets used for an incorrect data buffer.
    
    The fix is to impose a global serialization for all TX queues in the short
    section where we are writing to the WRITE_PORT_{HI,LO} registers which solves
    the corruption even with multiple concurrent TX queues being used.
    
    Fixes: 80105befdb4b ("net: systemport: add Broadcom SYSTEMPORT Ethernet MAC driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20211215202450.4086240-1-f.fainelli@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1765f984c99df2260bea3d924810bff1a9fa93c
Author: D. Wythe <alibuda@linux.alibaba.com>
Date:   Wed Dec 15 20:29:21 2021 +0800

    net/smc: Prevent smc_release() from long blocking
    
    [ Upstream commit 5c15b3123f65f8fbb1b445d9a7e8812e0e435df2 ]
    
    In nginx/wrk benchmark, there's a hung problem with high probability
    on case likes that: (client will last several minutes to exit)
    
    server: smc_run nginx
    
    client: smc_run wrk -c 10000 -t 1 http://server
    
    Client hangs with the following backtrace:
    
    0 [ffffa7ce8Of3bbf8] __schedule at ffffffff9f9eOd5f
    1 [ffffa7ce8Of3bc88] schedule at ffffffff9f9eløe6
    2 [ffffa7ce8Of3bcaO] schedule_timeout at ffffffff9f9e3f3c
    3 [ffffa7ce8Of3bd2O] wait_for_common at ffffffff9f9el9de
    4 [ffffa7ce8Of3bd8O] __flush_work at ffffffff9fOfeOl3
    5 [ffffa7ce8øf3bdfO] smc_release at ffffffffcO697d24 [smc]
    6 [ffffa7ce8Of3be2O] __sock_release at ffffffff9f8O2e2d
    7 [ffffa7ce8Of3be4ø] sock_close at ffffffff9f8ø2ebl
    8 [ffffa7ce8øf3be48] __fput at ffffffff9f334f93
    9 [ffffa7ce8Of3be78] task_work_run at ffffffff9flOlff5
    10 [ffffa7ce8Of3beaO] do_exit at ffffffff9fOe5Ol2
    11 [ffffa7ce8Of3bflO] do_group_exit at ffffffff9fOe592a
    12 [ffffa7ce8Of3bf38] __x64_sys_exit_group at ffffffff9fOe5994
    13 [ffffa7ce8Of3bf4O] do_syscall_64 at ffffffff9f9d4373
    14 [ffffa7ce8Of3bfsO] entry_SYSCALL_64_after_hwframe at ffffffff9fa0007c
    
    This issue dues to flush_work(), which is used to wait for
    smc_connect_work() to finish in smc_release(). Once lots of
    smc_connect_work() was pending or all executing work dangling,
    smc_release() has to block until one worker comes to free, which
    is equivalent to wait another smc_connnect_work() to finish.
    
    In order to fix this, There are two changes:
    
    1. For those idle smc_connect_work(), cancel it from the workqueue; for
       executing smc_connect_work(), waiting for it to finish. For that
       purpose, replace flush_work() with cancel_work_sync().
    
    2. Since smc_connect() hold a reference for passive closing, if
       smc_connect_work() has been cancelled, release the reference.
    
    Fixes: 24ac3a08e658 ("net/smc: rebuild nonblocking connect")
    Reported-by: Tony Lu <tonylu@linux.alibaba.com>
    Tested-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Dust Li <dust.li@linux.alibaba.com>
    Reviewed-by: Tony Lu <tonylu@linux.alibaba.com>
    Signed-off-by: D. Wythe <alibuda@linux.alibaba.com>
    Acked-by: Karsten Graul <kgraul@linux.ibm.com>
    Link: https://lore.kernel.org/r/1639571361-101128-1-git-send-email-alibuda@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 337bb7bf7c31e7a4a883054775db169e20e3723b
Author: Gal Pressman <gal@nvidia.com>
Date:   Thu Dec 16 11:28:25 2021 +0200

    net: Fix double 0x prefix print in SKB dump
    
    [ Upstream commit 8a03ef676ade55182f9b05115763aeda6dc08159 ]
    
    When printing netdev features %pNF already takes care of the 0x prefix,
    remove the explicit one.
    
    Fixes: 6413139dfc64 ("skbuff: increase verbosity when dumping skb data")
    Signed-off-by: Gal Pressman <gal@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 734a3f3106053ee41cecae2a995b3d4d0c246764
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 15 22:37:31 2021 +0800

    sfc_ef100: potential dereference of null pointer
    
    [ Upstream commit 407ecd1bd726f240123f704620d46e285ff30dd9 ]
    
    The return value of kmalloc() needs to be checked.
    To avoid use in efx_nic_update_stats() in case of the failure of alloc.
    
    Fixes: b593b6f1b492 ("sfc_ef100: statistics gathering")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7da349f07e457cad135df0920a3f670e423fb5e9
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Dec 15 09:39:37 2021 -0500

    net/packet: rx_owner_map depends on pg_vec
    
    [ Upstream commit ec6af094ea28f0f2dda1a6a33b14cd57e36a9755 ]
    
    Packet sockets may switch ring versions. Avoid misinterpreting state
    between versions, whose fields share a union. rx_owner_map is only
    allocated with a packet ring (pg_vec) and both are swapped together.
    If pg_vec is NULL, meaning no packet ring was allocated, then neither
    was rx_owner_map. And the field may be old state from a tpacket_v3.
    
    Fixes: 61fad6816fc1 ("net/packet: tpacket_rcv: avoid a producer race condition")
    Reported-by: Syzbot <syzbot+1ac0994a0a0c55151121@syzkaller.appspotmail.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20211215143937.106178-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a34fb9e2bf3029f7c0882069d67ff69cbd645d8
Author: Haimin Zhang <tcs.kernel@gmail.com>
Date:   Wed Dec 15 19:15:30 2021 +0800

    netdevsim: Zero-initialize memory for new map's value in function nsim_bpf_map_alloc
    
    [ Upstream commit 481221775d53d6215a6e5e9ce1cce6d2b4ab9a46 ]
    
    Zero-initialize memory for new map's value in function nsim_bpf_map_alloc
    since it may cause a potential kernel information leak issue, as follows:
    1. nsim_bpf_map_alloc calls nsim_map_alloc_elem to allocate elements for
    a new map.
    2. nsim_map_alloc_elem uses kmalloc to allocate map's value, but doesn't
    zero it.
    3. A user application can use IOCTL BPF_MAP_LOOKUP_ELEM to get specific
    element's information in the map.
    4. The kernel function map_lookup_elem will call bpf_map_copy_value to get
    the information allocated at step-2, then use copy_to_user to copy to the
    user buffer.
    This can only leak information for an array map.
    
    Fixes: 395cacb5f1a0 ("netdevsim: bpf: support fake map offload")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Haimin Zhang <tcs.kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215111530.72103-1-tcs.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3e1f54508f1cc2a0d82f37cb2b301b7dcc4f5bb
Author: Cyril Novikov <cnovikov@lynx.com>
Date:   Mon Nov 1 18:39:36 2021 -0700

    ixgbe: set X550 MDIO speed before talking to PHY
    
    [ Upstream commit bf0a375055bd1afbbf02a0ef45f7655da7b71317 ]
    
    The MDIO bus speed must be initialized before talking to the PHY the first
    time in order to avoid talking to it using a speed that the PHY doesn't
    support.
    
    This fixes HW initialization error -17 (IXGBE_ERR_PHY_ADDR_INVALID) on
    Denverton CPUs (a.k.a. the Atom C3000 family) on ports with a 10Gb network
    plugged in. On those devices, HLREG0[MDCSPD] resets to 1, which combined
    with the 10Gb network results in a 24MHz MDIO speed, which is apparently
    too fast for the connected PHY. PHY register reads over MDIO bus return
    garbage, leading to initialization failure.
    
    Reproduced with Linux kernel 4.19 and 5.15-rc7. Can be reproduced using
    the following setup:
    
    * Use an Atom C3000 family system with at least one X552 LAN on the SoC
    * Disable PXE or other BIOS network initialization if possible
      (the interface must not be initialized before Linux boots)
    * Connect a live 10Gb Ethernet cable to an X550 port
    * Power cycle (not reset, doesn't always work) the system and boot Linux
    * Observe: ixgbe interfaces w/ 10GbE cables plugged in fail with error -17
    
    Fixes: e84db7272798 ("ixgbe: Introduce function to control MDIO speed")
    Signed-off-by: Cyril Novikov <cnovikov@lynx.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48e01e38818275a48a3e4e73d70fb2a418accc28
Author: Robert Schlabbach <robert_s@gmx.net>
Date:   Tue Oct 26 02:24:48 2021 +0200

    ixgbe: Document how to enable NBASE-T support
    
    [ Upstream commit 271225fd57c2f1e0b3f8826df51be6c634affefe ]
    
    Commit a296d665eae1 ("ixgbe: Add ethtool support to enable 2.5 and 5.0
    Gbps support") introduced suppression of the advertisement of NBASE-T
    speeds by default, according to Todd Fujinaka to accommodate customers
    with network switches which could not cope with advertised NBASE-T
    speeds, as posted in the E1000-devel mailing list:
    
    https://sourceforge.net/p/e1000/mailman/message/37106269/
    
    However, the suppression was not documented at all, nor was how to
    enable NBASE-T support.
    
    Properly document the NBASE-T suppression and how to enable NBASE-T
    support.
    
    Fixes: a296d665eae1 ("ixgbe: Add ethtool support to enable 2.5 and 5.0 Gbps support")
    Reported-by: Robert Schlabbach <robert_s@gmx.net>
    Signed-off-by: Robert Schlabbach <robert_s@gmx.net>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 776ed8b36697e586f3e0187cb65d27e7f3ca7f47
Author: Sasha Neftin <sasha.neftin@intel.com>
Date:   Tue Nov 2 09:20:06 2021 +0200

    igc: Fix typo in i225 LTR functions
    
    [ Upstream commit 0182d1f3fa640888a2ed7e3f6df2fdb10adee7c8 ]
    
    The LTR maximum value was incorrectly written using the scale from
    the LTR minimum value. This would cause incorrect values to be sent,
    in cases where the initial calculation lead to different min/max scales.
    
    Fixes: 707abf069548 ("igc: Add initial LTR support")
    Suggested-by: Dima Ruinskiy <dima.ruinskiy@intel.com>
    Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Nechama Kraus <nechamax.kraus@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74a16e062b23332d8db017ff4a41e16279c44411
Author: Letu Ren <fantasquex@gmail.com>
Date:   Sat Nov 13 11:42:34 2021 +0800

    igbvf: fix double free in `igbvf_probe`
    
    [ Upstream commit b6d335a60dc624c0d279333b22c737faa765b028 ]
    
    In `igbvf_probe`, if register_netdev() fails, the program will go to
    label err_hw_init, and then to label err_ioremap. In free_netdev() which
    is just below label err_ioremap, there is `list_for_each_entry_safe` and
    `netif_napi_del` which aims to delete all entries in `dev->napi_list`.
    The program has added an entry `adapter->rx_ring->napi` which is added by
    `netif_napi_add` in igbvf_alloc_queues(). However, adapter->rx_ring has
    been freed below label err_hw_init. So this a UAF.
    
    In terms of how to patch the problem, we can refer to igbvf_remove() and
    delete the entry before `adapter->rx_ring`.
    
    The KASAN logs are as follows:
    
    [   35.126075] BUG: KASAN: use-after-free in free_netdev+0x1fd/0x450
    [   35.127170] Read of size 8 at addr ffff88810126d990 by task modprobe/366
    [   35.128360]
    [   35.128643] CPU: 1 PID: 366 Comm: modprobe Not tainted 5.15.0-rc2+ #14
    [   35.129789] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    [   35.131749] Call Trace:
    [   35.132199]  dump_stack_lvl+0x59/0x7b
    [   35.132865]  print_address_description+0x7c/0x3b0
    [   35.133707]  ? free_netdev+0x1fd/0x450
    [   35.134378]  __kasan_report+0x160/0x1c0
    [   35.135063]  ? free_netdev+0x1fd/0x450
    [   35.135738]  kasan_report+0x4b/0x70
    [   35.136367]  free_netdev+0x1fd/0x450
    [   35.137006]  igbvf_probe+0x121d/0x1a10 [igbvf]
    [   35.137808]  ? igbvf_vlan_rx_add_vid+0x100/0x100 [igbvf]
    [   35.138751]  local_pci_probe+0x13c/0x1f0
    [   35.139461]  pci_device_probe+0x37e/0x6c0
    [   35.165526]
    [   35.165806] Allocated by task 366:
    [   35.166414]  ____kasan_kmalloc+0xc4/0xf0
    [   35.167117]  foo_kmem_cache_alloc_trace+0x3c/0x50 [igbvf]
    [   35.168078]  igbvf_probe+0x9c5/0x1a10 [igbvf]
    [   35.168866]  local_pci_probe+0x13c/0x1f0
    [   35.169565]  pci_device_probe+0x37e/0x6c0
    [   35.179713]
    [   35.179993] Freed by task 366:
    [   35.180539]  kasan_set_track+0x4c/0x80
    [   35.181211]  kasan_set_free_info+0x1f/0x40
    [   35.181942]  ____kasan_slab_free+0x103/0x140
    [   35.182703]  kfree+0xe3/0x250
    [   35.183239]  igbvf_probe+0x1173/0x1a10 [igbvf]
    [   35.184040]  local_pci_probe+0x13c/0x1f0
    
    Fixes: d4e0fe01a38a0 (igbvf: add new driver to support 82576 virtual functions)
    Reported-by: Zheyu Ma <zheyuma97@gmail.com>
    Signed-off-by: Letu Ren <fantasquex@gmail.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddac50d04f348d880386d6f6f7639da6935ab907
Author: Karen Sornek <karen.sornek@intel.com>
Date:   Tue Aug 31 13:16:35 2021 +0200

    igb: Fix removal of unicast MAC filters of VFs
    
    [ Upstream commit 584af82154f56e6b2740160fcc84a2966d969e15 ]
    
    Move checking condition of VF MAC filter before clearing
    or adding MAC filter to VF to prevent potential blackout caused
    by removal of necessary and working VF's MAC filter.
    
    Fixes: 1b8b062a99dc ("igb: add VF trust infrastructure")
    Signed-off-by: Karen Sornek <karen.sornek@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12c1938870dcc0fc7906492b8f44d9bc54fda0b5
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Dec 10 09:55:29 2021 -0700

    soc/tegra: fuse: Fix bitwise vs. logical OR warning
    
    [ Upstream commit a7083763619f7485ccdade160deb81737cf2732f ]
    
    A new warning in clang points out two instances where boolean
    expressions are being used with a bitwise OR instead of logical OR:
    
    drivers/soc/tegra/fuse/speedo-tegra20.c:72:9: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
                    reg = tegra_fuse_read_spare(i) |
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
    drivers/soc/tegra/fuse/speedo-tegra20.c:72:9: note: cast one or both operands to int to silence this warning
    drivers/soc/tegra/fuse/speedo-tegra20.c:87:9: warning: use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]
                    reg = tegra_fuse_read_spare(i) |
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
                                                   ||
    drivers/soc/tegra/fuse/speedo-tegra20.c:87:9: note: cast one or both operands to int to silence this warning
    2 warnings generated.
    
    The motivation for the warning is that logical operations short circuit
    while bitwise operations do not.
    
    In this instance, tegra_fuse_read_spare() is not semantically returning
    a boolean, it is returning a bit value. Use u32 for its return type so
    that it can be used with either bitwise or boolean operators without any
    warnings.
    
    Fixes: 25cd5a391478 ("ARM: tegra: Add speedo-based process identification")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1488
    Suggested-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 451f1eded7f56e93aaf52eb547ba97742d9c0e97
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Dec 14 15:16:02 2021 -0800

    mptcp: clear 'kern' flag from fallback sockets
    
    [ Upstream commit d6692b3b97bdc165d150f4c1505751a323a80717 ]
    
    The mptcp ULP extension relies on sk->sk_sock_kern being set correctly:
    It prevents setsockopt(fd, IPPROTO_TCP, TCP_ULP, "mptcp", 6); from
    working for plain tcp sockets (any userspace-exposed socket).
    
    But in case of fallback, accept() can return a plain tcp sk.
    In such case, sk is still tagged as 'kernel' and setsockopt will work.
    
    This will crash the kernel, The subflow extension has a NULL ctx->conn
    mptcp socket:
    
    BUG: KASAN: null-ptr-deref in subflow_data_ready+0x181/0x2b0
    Call Trace:
     tcp_data_ready+0xf8/0x370
     [..]
    
    Fixes: cf7da0d66cc1 ("mptcp: Create SUBFLOW socket for incoming connections")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 222cebd995cdf11fe0d502749560f65e64990e55
Author: Lang Yu <lang.yu@amd.com>
Date:   Tue Dec 14 15:25:54 2021 +0800

    drm/amd/pm: fix a potential gpu_metrics_table memory leak
    
    [ Upstream commit aa464957f7e660abd554f2546a588f6533720e21 ]
    
    Memory is allocated for gpu_metrics_table in renoir_init_smc_tables(),
    but not freed in int smu_v12_0_fini_smc_tables(). Free it!
    
    Fixes: 95868b85764a ("drm/amd/powerplay: add Renoir support for gpu metrics export")
    
    Signed-off-by: Lang Yu <lang.yu@amd.com>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74dc97dfb276542f12746d706abef63364d816bb
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Tue Dec 14 18:46:59 2021 +0800

    rds: memory leak in __rds_conn_create()
    
    [ Upstream commit 5f9562ebe710c307adc5f666bf1a2162ee7977c0 ]
    
    __rds_conn_create() did not release conn->c_path when loop_trans != 0 and
    trans->t_prefer_loopback != 0 and is_outgoing == 0.
    
    Fixes: aced3ce57cd3 ("RDS tcp loopback connection can hang")
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Sharath Srinivasan <sharath.srinivasan@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67f4362ae286eb7a87d18d24f585c85bf9c7d694
Author: Baowen Zheng <baowen.zheng@corigine.com>
Date:   Mon Dec 13 15:46:04 2021 +0100

    flow_offload: return EOPNOTSUPP for the unsupported mpls action type
    
    [ Upstream commit 166b6a46b78bf8b9559a6620c3032f9fe492e082 ]
    
    We need to return EOPNOTSUPP for the unsupported mpls action type when
    setup the flow action.
    
    In the original implement, we will return 0 for the unsupported mpls
    action type, actually we do not setup it and the following actions
    to the flow action entry.
    
    Fixes: 9838b20a7fb2 ("net: sched: take rtnl lock in tc_setup_flow_action()")
    Signed-off-by: Baowen Zheng <baowen.zheng@corigine.com>
    Signed-off-by: Simon Horman <simon.horman@corigine.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03fd6ca05601820351d6d7304f24c26ff73b7dfd
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 29 15:32:46 2021 +0200

    mac80211: fix lookup when adding AddBA extension element
    
    [ Upstream commit 511ab0c1dfb260a6b17b8771109e8d63474473a7 ]
    
    We should be doing the HE capabilities lookup based on the full
    interface type so if P2P doesn't have HE but client has it doesn't
    get confused. Fix that.
    
    Fixes: 2ab45876756f ("mac80211: add support for the ADDBA extension element")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211129152938.010fc1d61137.If3a468145f29d670cb00a693bed559d8290ba693@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bef59d6a83d35613d0da7e02ee17954931c52f44
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Dec 2 15:26:25 2021 +0200

    mac80211: agg-tx: don't schedule_and_wake_txq() under sta->lock
    
    [ Upstream commit 06c41bda0ea14aa7fba932a9613c4ee239682cf0 ]
    
    When we call ieee80211_agg_start_txq(), that will in turn call
    schedule_and_wake_txq(). Called from ieee80211_stop_tx_ba_cb()
    this is done under sta->lock, which leads to certain circular
    lock dependencies, as reported by Chris Murphy:
    https://lore.kernel.org/r/CAJCQCtSXJ5qA4bqSPY=oLRMbv-irihVvP7A2uGutEbXQVkoNaw@mail.gmail.com
    
    In general, ieee80211_agg_start_txq() is usually not called
    with sta->lock held, only in this one place. But it's always
    called with sta->ampdu_mlme.mtx held, and that's therefore
    clearly sufficient.
    
    Change ieee80211_stop_tx_ba_cb() to also call it without the
    sta->lock held, by factoring it out of ieee80211_remove_tid_tx()
    (which is only called in this one place).
    
    This breaks the locking chain and makes it less likely that
    we'll have similar locking chain problems in the future.
    
    Fixes: ba8c3d6f16a1 ("mac80211: add an intermediate software queue implementation")
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211202152554.f519884c8784.I555fef8e67d93fff3d9a304886c4a9f8b322e591@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96bc86cac0a959ca59ed4f4594b298bb110f98ac
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Tue Dec 14 09:41:26 2021 +0800

    drm/ast: potential dereference of null pointer
    
    [ Upstream commit fea3fdf975dd9f3e5248afaab8fe023db313f005 ]
    
    The return value of kzalloc() needs to be checked.
    To avoid use of null pointer '&ast_state->base' in case of the
    failure of alloc.
    
    Fixes: f0adbc382b8b ("drm/ast: Allocate initial CRTC state of the correct size")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211214014126.2211535-1-jiasheng@iscas.ac.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cac0fd4b9bd385b96b6548dcda7e22e03d2694b2
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Mon Dec 13 16:36:00 2021 +0800

    selftest/net/forwarding: declare NETIFS p9 p10
    
    [ Upstream commit 71da1aec215290e249d09c44c768df859f3a3bba ]
    
    The recent GRE selftests defined NUM_NETIFS=10. If the users copy
    forwarding.config.sample to forwarding.config directly, they will get
    error "Command line is not complete" when run the GRE tests, because
    create_netif_veth() failed with no interface name defined.
    
    Fix it by extending the NETIFS with p9 and p10.
    
    Fixes: 2800f2485417 ("selftests: forwarding: Test multipath hashing on inner IP pkts for GRE tunnel")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81fbdd45652d8605a029e78ef14a6aaa529c4e72
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Fri Dec 10 17:42:47 2021 +0100

    net/sched: sch_ets: don't remove idle classes from the round-robin list
    
    [ Upstream commit c062f2a0b04d86c5b8c9d973bea43493eaca3d32 ]
    
    Shuang reported that the following script:
    
     1) tc qdisc add dev ddd0 handle 10: parent 1: ets bands 8 strict 4 priomap 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
     2) mausezahn ddd0  -A 10.10.10.1 -B 10.10.10.2 -c 0 -a own -b 00:c1:a0:c1:a0:00 -t udp &
     3) tc qdisc change dev ddd0 handle 10: ets bands 4 strict 2 quanta 2500 2500 priomap 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
    
    crashes systematically when line 2) is commented:
    
     list_del corruption, ffff8e028404bd30->next is LIST_POISON1 (dead000000000100)
     ------------[ cut here ]------------
     kernel BUG at lib/list_debug.c:47!
     invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
     CPU: 0 PID: 954 Comm: tc Not tainted 5.16.0-rc4+ #478
     Hardware name: Red Hat KVM, BIOS 1.11.1-4.module+el8.1.0+4066+0f1aadab 04/01/2014
     RIP: 0010:__list_del_entry_valid.cold.1+0x12/0x47
     Code: fe ff 0f 0b 48 89 c1 4c 89 c6 48 c7 c7 08 42 1b 87 e8 1d c5 fe ff 0f 0b 48 89 fe 48 89 c2 48 c7 c7 98 42 1b 87 e8 09 c5 fe ff <0f> 0b 48 c7 c7 48 43 1b 87 e8 fb c4 fe ff 0f 0b 48 89 f2 48 89 fe
     RSP: 0018:ffffae46807a3888 EFLAGS: 00010246
     RAX: 000000000000004e RBX: 0000000000000007 RCX: 0000000000000202
     RDX: 0000000000000000 RSI: ffffffff871ac536 RDI: 00000000ffffffff
     RBP: ffffae46807a3a10 R08: 0000000000000000 R09: c0000000ffff7fff
     R10: 0000000000000001 R11: ffffae46807a36a8 R12: ffff8e028404b800
     R13: ffff8e028404bd30 R14: dead000000000100 R15: ffff8e02fafa2400
     FS:  00007efdc92e4480(0000) GS:ffff8e02fb600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000682f48 CR3: 00000001058be000 CR4: 0000000000350ef0
     Call Trace:
      <TASK>
      ets_qdisc_change+0x58b/0xa70 [sch_ets]
      tc_modify_qdisc+0x323/0x880
      rtnetlink_rcv_msg+0x169/0x4a0
      netlink_rcv_skb+0x50/0x100
      netlink_unicast+0x1a5/0x280
      netlink_sendmsg+0x257/0x4d0
      sock_sendmsg+0x5b/0x60
      ____sys_sendmsg+0x1f2/0x260
      ___sys_sendmsg+0x7c/0xc0
      __sys_sendmsg+0x57/0xa0
      do_syscall_64+0x3a/0x80
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7efdc8031338
     Code: 89 02 48 c7 c0 ff ff ff ff eb b5 0f 1f 80 00 00 00 00 f3 0f 1e fa 48 8d 05 25 43 2c 00 8b 00 85 c0 75 17 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 58 c3 0f 1f 80 00 00 00 00 41 54 41 89 d4 55
     RSP: 002b:00007ffdf1ce9828 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
     RAX: ffffffffffffffda RBX: 0000000061b37a97 RCX: 00007efdc8031338
     RDX: 0000000000000000 RSI: 00007ffdf1ce9890 RDI: 0000000000000003
     RBP: 0000000000000000 R08: 0000000000000001 R09: 000000000078a940
     R10: 000000000000000c R11: 0000000000000246 R12: 0000000000000001
     R13: 0000000000688880 R14: 0000000000000000 R15: 0000000000000000
      </TASK>
     Modules linked in: sch_ets sch_tbf dummy rfkill iTCO_wdt iTCO_vendor_support intel_rapl_msr intel_rapl_common joydev pcspkr i2c_i801 virtio_balloon i2c_smbus lpc_ich ip_tables xfs libcrc32c crct10dif_pclmul crc32_pclmul crc32c_intel serio_raw ghash_clmulni_intel ahci libahci libata virtio_blk virtio_console virtio_net net_failover failover sunrpc dm_mirror dm_region_hash dm_log dm_mod [last unloaded: sch_ets]
     ---[ end trace f35878d1912655c2 ]---
     RIP: 0010:__list_del_entry_valid.cold.1+0x12/0x47
     Code: fe ff 0f 0b 48 89 c1 4c 89 c6 48 c7 c7 08 42 1b 87 e8 1d c5 fe ff 0f 0b 48 89 fe 48 89 c2 48 c7 c7 98 42 1b 87 e8 09 c5 fe ff <0f> 0b 48 c7 c7 48 43 1b 87 e8 fb c4 fe ff 0f 0b 48 89 f2 48 89 fe
     RSP: 0018:ffffae46807a3888 EFLAGS: 00010246
     RAX: 000000000000004e RBX: 0000000000000007 RCX: 0000000000000202
     RDX: 0000000000000000 RSI: ffffffff871ac536 RDI: 00000000ffffffff
     RBP: ffffae46807a3a10 R08: 0000000000000000 R09: c0000000ffff7fff
     R10: 0000000000000001 R11: ffffae46807a36a8 R12: ffff8e028404b800
     R13: ffff8e028404bd30 R14: dead000000000100 R15: ffff8e02fafa2400
     FS:  00007efdc92e4480(0000) GS:ffff8e02fb600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000682f48 CR3: 00000001058be000 CR4: 0000000000350ef0
     Kernel panic - not syncing: Fatal exception in interrupt
     Kernel Offset: 0x4e00000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
     ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    we can remove 'q->classes[i].alist' only if DRR class 'i' was part of the
    active list. In the ETS scheduler DRR classes belong to that list only if
    the queue length is greater than zero: we need to test for non-zero value
    of 'q->classes[i].qdisc->q.qlen' before removing from the list, similarly
    to what has been done elsewhere in the ETS code.
    
    Fixes: de6d25924c2a ("net/sched: sch_ets: don't peek at classes beyond 'nbands'")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be32c8a788871b9668e559630ccadd8d2cc54068
Author: Alyssa Ross <hi@alyssa.is>
Date:   Thu Nov 25 15:44:38 2021 +0000

    dmaengine: st_fdma: fix MODULE_ALIAS
    
    [ Upstream commit 822c9f2b833c53fc67e8adf6f63ecc3ea24d502c ]
    
    modprobe can't handle spaces in aliases.
    
    Fixes: 6b4cd727eaf1 ("dmaengine: st_fdma: Add STMicroelectronics FDMA engine driver support")
    Signed-off-by: Alyssa Ross <hi@alyssa.is>
    Link: https://lore.kernel.org/r/20211125154441.2626214-1-hi@alyssa.is
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfff1d5e85fff5702f7b28a8a18a26f88d3e6883
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 11:26:16 2021 -0700

    selftests: Fix IPv6 address bind tests
    
    [ Upstream commit 28a2686c185e84b6aa6a4d9c9a972360eb7ca266 ]
    
    IPv6 allows binding a socket to a device then binding to an address
    not on the device (__inet6_bind -> ipv6_chk_addr with strict flag
    not set). Update the bind tests to reflect legacy behavior.
    
    Fixes: 34d0302ab861 ("selftests: Add ipv6 address bind tests to fcnal-test")
    Reported-by: Li Zhijian <lizhijian@fujitsu.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08896ecfffc33eaffabe8f01ec7ba9ae219b3b5d
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 10:21:08 2021 -0700

    selftests: Fix raw socket bind tests with VRF
    
    [ Upstream commit 0f108ae4452025fef529671998f6c7f1c4526790 ]
    
    Commit referenced below added negative socket bind tests for VRF. The
    socket binds should fail since the address to bind to is in a VRF yet
    the socket is not bound to the VRF or a device within it. Update the
    expected return code to check for 1 (bind failure) so the test passes
    when the bind fails as expected. Add a 'show_hint' comment to explain
    why the bind is expected to fail.
    
    Fixes: 75b2b2b3db4c ("selftests: Add ipv4 address bind tests to fcnal-test")
    Reported-by: Li Zhijian <lizhijian@fujitsu.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ba4dfb8b8a19d55811c399b9def7ffecfef559b
Author: David Ahern <dsahern@kernel.org>
Date:   Sat Dec 11 10:11:30 2021 -0700

    selftests: Add duplicate config only for MD5 VRF tests
    
    [ Upstream commit 7e0147592b5c4f9e2eb8c54a7857a56d4863f74e ]
    
    Commit referenced below added configuration in the default VRF that
    duplicates a VRF to check MD5 passwords are properly used and fail
    when expected. That config should not be added all the time as it
    can cause tests to pass that should not (by matching on default VRF
    setup when it should not). Move the duplicate setup to a function
    that is only called for the MD5 tests and add a cleanup function
    to remove it after the MD5 tests.
    
    Fixes: 5cad8bce26e0 ("fcnal-test: Add TCP MD5 tests for VRF")
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12512bc8f25b8ba9795dfbae0e9ca57ff13fd542
Author: Jie Wang <wangjie125@huawei.com>
Date:   Fri Dec 10 21:09:33 2021 +0800

    net: hns3: fix use-after-free bug in hclgevf_send_mbx_msg
    
    [ Upstream commit 27cbf64a766e86f068ce6214f04c00ceb4db1af4 ]
    
    Currently, the hns3_remove function firstly uninstall client instance,
    and then uninstall acceletion engine device. The netdevice is freed in
    client instance uninstall process, but acceletion engine device uninstall
    process still use it to trace runtime information. This causes a use after
    free problem.
    
    So fixes it by check the instance register state to avoid use after free.
    
    Fixes: d8355240cf8f ("net: hns3: add trace event support for PF/VF mailbox")
    Signed-off-by: Jie Wang <wangjie125@huawei.com>
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a4f6dba1eb98101abc012ef968a8b10dac1ce50
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 9 10:50:58 2021 -0800

    inet_diag: fix kernel-infoleak for UDP sockets
    
    [ Upstream commit 71ddeac8cd1d217744a0e060ff520e147c9328d1 ]
    
    KMSAN reported a kernel-infoleak [1], that can exploited
    by unpriv users.
    
    After analysis it turned out UDP was not initializing
    r->idiag_expires. Other users of inet_sk_diag_fill()
    might make the same mistake in the future, so fix this
    in inet_sk_diag_fill().
    
    [1]
    BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:121 [inline]
    BUG: KMSAN: kernel-infoleak in copyout lib/iov_iter.c:156 [inline]
    BUG: KMSAN: kernel-infoleak in _copy_to_iter+0x69d/0x25c0 lib/iov_iter.c:670
     instrument_copy_to_user include/linux/instrumented.h:121 [inline]
     copyout lib/iov_iter.c:156 [inline]
     _copy_to_iter+0x69d/0x25c0 lib/iov_iter.c:670
     copy_to_iter include/linux/uio.h:155 [inline]
     simple_copy_to_iter+0xf3/0x140 net/core/datagram.c:519
     __skb_datagram_iter+0x2cb/0x1280 net/core/datagram.c:425
     skb_copy_datagram_iter+0xdc/0x270 net/core/datagram.c:533
     skb_copy_datagram_msg include/linux/skbuff.h:3657 [inline]
     netlink_recvmsg+0x660/0x1c60 net/netlink/af_netlink.c:1974
     sock_recvmsg_nosec net/socket.c:944 [inline]
     sock_recvmsg net/socket.c:962 [inline]
     sock_read_iter+0x5a9/0x630 net/socket.c:1035
     call_read_iter include/linux/fs.h:2156 [inline]
     new_sync_read fs/read_write.c:400 [inline]
     vfs_read+0x1631/0x1980 fs/read_write.c:481
     ksys_read+0x28c/0x520 fs/read_write.c:619
     __do_sys_read fs/read_write.c:629 [inline]
     __se_sys_read fs/read_write.c:627 [inline]
     __x64_sys_read+0xdb/0x120 fs/read_write.c:627
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was created at:
     slab_post_alloc_hook mm/slab.h:524 [inline]
     slab_alloc_node mm/slub.c:3251 [inline]
     __kmalloc_node_track_caller+0xe0c/0x1510 mm/slub.c:4974
     kmalloc_reserve net/core/skbuff.c:354 [inline]
     __alloc_skb+0x545/0xf90 net/core/skbuff.c:426
     alloc_skb include/linux/skbuff.h:1126 [inline]
     netlink_dump+0x3d5/0x16a0 net/netlink/af_netlink.c:2245
     __netlink_dump_start+0xd1c/0xee0 net/netlink/af_netlink.c:2370
     netlink_dump_start include/linux/netlink.h:254 [inline]
     inet_diag_handler_cmd+0x2e7/0x400 net/ipv4/inet_diag.c:1343
     sock_diag_rcv_msg+0x24a/0x620
     netlink_rcv_skb+0x447/0x800 net/netlink/af_netlink.c:2491
     sock_diag_rcv+0x63/0x80 net/core/sock_diag.c:276
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x1095/0x1360 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x16f3/0x1870 net/netlink/af_netlink.c:1916
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg net/socket.c:724 [inline]
     sock_write_iter+0x594/0x690 net/socket.c:1057
     do_iter_readv_writev+0xa7f/0xc70
     do_iter_write+0x52c/0x1500 fs/read_write.c:851
     vfs_writev fs/read_write.c:924 [inline]
     do_writev+0x63f/0xe30 fs/read_write.c:967
     __do_sys_writev fs/read_write.c:1040 [inline]
     __se_sys_writev fs/read_write.c:1037 [inline]
     __x64_sys_writev+0xe5/0x120 fs/read_write.c:1037
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Bytes 68-71 of 312 are uninitialized
    Memory access of size 312 starts at ffff88812ab54000
    Data copied to user address 0000000020001440
    
    CPU: 1 PID: 6365 Comm: syz-executor801 Not tainted 5.16.0-rc3-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    
    Fixes: 3c4d05c80567 ("inet_diag: Introduce the inet socket dumping routine")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20211209185058.53917-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20ad1ef02f9ad5e1dda9eeb113e4c158b4806986
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 10 06:20:46 2021 -0800

    sch_cake: do not call cake_destroy() from cake_init()
    
    [ Upstream commit ab443c53916730862cec202078d36fd4008bea79 ]
    
    qdiscs are not supposed to call their own destroy() method
    from init(), because core stack already does that.
    
    syzbot was able to trigger use after free:
    
    DEBUG_LOCKS_WARN_ON(lock->magic != lock)
    WARNING: CPU: 0 PID: 21902 at kernel/locking/mutex.c:586 __mutex_lock_common kernel/locking/mutex.c:586 [inline]
    WARNING: CPU: 0 PID: 21902 at kernel/locking/mutex.c:586 __mutex_lock+0x9ec/0x12f0 kernel/locking/mutex.c:740
    Modules linked in:
    CPU: 0 PID: 21902 Comm: syz-executor189 Not tainted 5.16.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__mutex_lock_common kernel/locking/mutex.c:586 [inline]
    RIP: 0010:__mutex_lock+0x9ec/0x12f0 kernel/locking/mutex.c:740
    Code: 08 84 d2 0f 85 19 08 00 00 8b 05 97 38 4b 04 85 c0 0f 85 27 f7 ff ff 48 c7 c6 20 00 ac 89 48 c7 c7 a0 fe ab 89 e8 bf 76 ba ff <0f> 0b e9 0d f7 ff ff 48 8b 44 24 40 48 8d b8 c8 08 00 00 48 89 f8
    RSP: 0018:ffffc9000627f290 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff88802315d700 RSI: ffffffff815f1db8 RDI: fffff52000c4fe44
    RBP: ffff88818f28e000 R08: 0000000000000000 R09: 0000000000000000
    R10: ffffffff815ebb5e R11: 0000000000000000 R12: 0000000000000000
    R13: dffffc0000000000 R14: ffffc9000627f458 R15: 0000000093c30000
    FS:  0000555556abc400(0000) GS:ffff8880b9c00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fda689c3303 CR3: 000000001cfbb000 CR4: 0000000000350ef0
    Call Trace:
     <TASK>
     tcf_chain0_head_change_cb_del+0x2e/0x3d0 net/sched/cls_api.c:810
     tcf_block_put_ext net/sched/cls_api.c:1381 [inline]
     tcf_block_put_ext net/sched/cls_api.c:1376 [inline]
     tcf_block_put+0xbc/0x130 net/sched/cls_api.c:1394
     cake_destroy+0x3f/0x80 net/sched/sch_cake.c:2695
     qdisc_create.constprop.0+0x9da/0x10f0 net/sched/sch_api.c:1293
     tc_modify_qdisc+0x4c5/0x1980 net/sched/sch_api.c:1660
     rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5571
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2496
     netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1345
     netlink_sendmsg+0x904/0xdf0 net/netlink/af_netlink.c:1921
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:724
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2409
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2463
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2492
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    RIP: 0033:0x7f1bb06badb9
    Code: Unable to access opcode bytes at RIP 0x7f1bb06bad8f.
    RSP: 002b:00007fff3012a658 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f1bb06badb9
    RDX: 0000000000000000 RSI: 00000000200007c0 RDI: 0000000000000003
    RBP: 0000000000000000 R08: 0000000000000003 R09: 0000000000000003
    R10: 0000000000000003 R11: 0000000000000246 R12: 00007fff3012a688
    R13: 00007fff3012a6a0 R14: 00007fff3012a6e0 R15: 00000000000013c2
     </TASK>
    
    Fixes: 046f6fd5daef ("sched: Add Common Applications Kept Enhanced (cake) qdisc")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Link: https://lore.kernel.org/r/20211210142046.698336-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1208b445a497bf3bb5ca74bea873186b92cb7277
Author: Philipp Rudo <prudo@redhat.com>
Date:   Wed Dec 8 14:07:41 2021 +0100

    s390/kexec_file: fix error handling when applying relocations
    
    [ Upstream commit 41967a37b8eedfee15b81406a9f3015be90d3980 ]
    
    arch_kexec_apply_relocations_add currently ignores all errors returned
    by arch_kexec_do_relocs. This means that every unknown relocation is
    silently skipped causing unpredictable behavior while the relocated code
    runs. Fix this by checking for errors and fail kexec_file_load if an
    unknown relocation type is encountered.
    
    The problem was found after gcc changed its behavior and used
    R_390_PLT32DBL relocations for brasl instruction and relied on ld to
    resolve the relocations in the final link in case direct calls are
    possible. As the purgatory code is only linked partially (option -r)
    ld didn't resolve the relocations leaving them for arch_kexec_do_relocs.
    But arch_kexec_do_relocs doesn't know how to handle R_390_PLT32DBL
    relocations so they were silently skipped. This ultimately caused an
    endless loop in the purgatory as the brasl instructions kept branching
    to itself.
    
    Fixes: 71406883fd35 ("s390/kexec_file: Add kexec_file_load system call")
    Reported-by: Tao Liu <ltao@redhat.com>
    Signed-off-by: Philipp Rudo <prudo@redhat.com>
    Link: https://lore.kernel.org/r/20211208130741.5821-3-prudo@redhat.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c058c544e73acabc527bf72ec1ccbb2a2581c291
Author: Jie2x Zhou <jie2x.zhou@intel.com>
Date:   Thu Dec 9 10:02:30 2021 +0800

    selftests: net: Correct ping6 expected rc from 2 to 1
    
    [ Upstream commit 92816e2629808726af015c7f5b14adc8e4f8b147 ]
    
    ./fcnal-test.sh -v -t ipv6_ping
    TEST: ping out, VRF bind - ns-B IPv6 LLA                                      [FAIL]
    TEST: ping out, VRF bind - multicast IP                                       [FAIL]
    
    ping6 is failing as it should.
    COMMAND: ip netns exec ns-A /bin/ping6 -c1 -w1 fe80::7c4c:bcff:fe66:a63a%red
    strace of ping6 shows it is failing with '1',
    so change the expected rc from 2 to 1.
    
    Fixes: c0644e71df33 ("selftests: Add ipv6 ping tests to fcnal-test")
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: Jie2x Zhou <jie2x.zhou@intel.com>
    Link: https://lore.kernel.org/r/20211209020230.37270-1-jie2x.zhou@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9983425c203bf2b3198535c0361aaca2f25a9a61
Author: Wei Wang <wei.w.wang@intel.com>
Date:   Thu Nov 25 20:18:23 2021 -0500

    virtio/vsock: fix the transport to work with VMADDR_CID_ANY
    
    [ Upstream commit 1db8f5fc2e5c66a5c51e1f6488e0ba7d45c29ae4 ]
    
    The VMADDR_CID_ANY flag used by a socket means that the socket isn't bound
    to any specific CID. For example, a host vsock server may want to be bound
    with VMADDR_CID_ANY, so that a guest vsock client can connect to the host
    server with CID=VMADDR_CID_HOST (i.e. 2), and meanwhile, a host vsock
    client can connect to the same local server with CID=VMADDR_CID_LOCAL
    (i.e. 1).
    
    The current implementation sets the destination socket's svm_cid to a
    fixed CID value after the first client's connection, which isn't an
    expected operation. For example, if the guest client first connects to the
    host server, the server's svm_cid gets set to VMADDR_CID_HOST, then other
    host clients won't be able to connect to the server anymore.
    
    Reproduce steps:
    1. Run the host server:
       socat VSOCK-LISTEN:1234,fork -
    2. Run a guest client to connect to the host server:
       socat - VSOCK-CONNECT:2:1234
    3. Run a host client to connect to the host server:
       socat - VSOCK-CONNECT:1:1234
    
    Without this patch, step 3. above fails to connect, and socat complains
    "socat[1720] E connect(5, AF=40 cid:1 port:1234, 16): Connection
    reset by peer".
    With this patch, the above works well.
    
    Fixes: c0cfa2d8a788 ("vsock: add multi-transports support")
    Signed-off-by: Wei Wang <wei.w.wang@intel.com>
    Link: https://lore.kernel.org/r/20211126011823.1760-1-wei.w.wang@intel.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94a01e6fb2d89a9df915c4b4839e39a8622858e1
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Mon Dec 6 12:38:28 2021 +0100

    soc: imx: Register SoC device only on i.MX boards
    
    [ Upstream commit 4ebd29f91629e69da7d57390cdc953772eee03ab ]
    
    At the moment, using the ARM32 multi_v7_defconfig always results in two
    SoCs being exposed in sysfs. This is wrong, as far as I'm aware the
    Qualcomm DragonBoard 410c does not actually make use of a i.MX SoC. :)
    
      qcom-db410c:/sys/devices/soc0$ grep . *
      family:Freescale i.MX
      machine:Qualcomm Technologies, Inc. APQ 8016 SBC
      revision:0.0
      serial_number:0000000000000000
      soc_id:Unknown
    
      qcom-db410c:/sys/devices/soc1$ grep . *
      family:Snapdragon
      machine:APQ8016
      ...
    
    This happens because imx_soc_device_init() registers the soc device
    unconditionally, even when running on devices that do not make use of i.MX.
    Arnd already reported this more than a year ago and even suggested a fix
    similar to this commit, but for some reason it was never submitted.
    
    Fix it by checking if the "__mxc_cpu_type" variable was actually
    initialized by earlier platform code. On devices without i.MX it will
    simply stay 0.
    
    Cc: Peng Fan <peng.fan@nxp.com>
    Fixes: d2199b34871b ("ARM: imx: use device_initcall for imx_soc_device_init")
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/CAK8P3a0hxO1TmK6oOMQ70AHSWJnP_CAq57YMOutrxkSYNjFeuw@mail.gmail.com/
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc426a91d3842092cb7bf2d490b50c4519b622a0
Author: Mike Tipton <quic_mdtipton@quicinc.com>
Date:   Mon Nov 8 20:34:38 2021 -0800

    clk: Don't parent clks until the parent is fully registered
    
    [ Upstream commit 54baf56eaa40aa5cdcd02b3c20d593e4e1211220 ]
    
    Before commit fc0c209c147f ("clk: Allow parents to be specified without
    string names") child clks couldn't find their parent until the parent
    clk was added to a list in __clk_core_init(). After that commit, child
    clks can reference their parent clks directly via a clk_hw pointer, or
    they can lookup that clk_hw pointer via DT if the parent clk is
    registered with an OF clk provider.
    
    The common clk framework treats hw->core being non-NULL as "the clk is
    registered" per the logic within clk_core_fill_parent_index():
    
            parent = entry->hw->core;
            /*
             * We have a direct reference but it isn't registered yet?
             * Orphan it and let clk_reparent() update the orphan status
             * when the parent is registered.
             */
            if (!parent)
    
    Therefore we need to be extra careful to not set hw->core until the clk
    is fully registered with the clk framework. Otherwise we can get into a
    situation where a child finds a parent clk and we move the child clk off
    the orphan list when the parent isn't actually registered, wrecking our
    enable accounting and breaking critical clks.
    
    Consider the following scenario:
    
      CPU0                                     CPU1
      ----                                     ----
      struct clk_hw clkBad;
      struct clk_hw clkA;
    
      clkA.init.parent_hws = { &clkBad };
    
      clk_hw_register(&clkA)                   clk_hw_register(&clkBad)
       ...                                      __clk_register()
                                                 hw->core = core
                                                 ...
       __clk_register()
        __clk_core_init()
         clk_prepare_lock()
         __clk_init_parent()
          clk_core_get_parent_by_index()
           clk_core_fill_parent_index()
            if (entry->hw) {
             parent = entry->hw->core;
    
    At this point, 'parent' points to clkBad even though clkBad hasn't been
    fully registered yet. Ouch! A similar problem can happen if a clk
    controller registers orphan clks that are referenced in the DT node of
    another clk controller.
    
    Let's fix all this by only setting the hw->core pointer underneath the
    clk prepare lock in __clk_core_init(). This way we know that
    clk_core_fill_parent_index() can't see hw->core be non-NULL until the
    clk is fully registered.
    
    Fixes: fc0c209c147f ("clk: Allow parents to be specified without string names")
    Signed-off-by: Mike Tipton <quic_mdtipton@quicinc.com>
    Link: https://lore.kernel.org/r/20211109043438.4639-1-quic_mdtipton@quicinc.com
    [sboyd@kernel.org: Reword commit text, update comment]
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 429bb01e4dda3c9b544928a1fae465ff9b2be231
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Nov 1 19:36:30 2021 -0500

    ARM: socfpga: dts: fix qspi node compatible
    
    [ Upstream commit cb25b11943cbcc5a34531129952870420f8be858 ]
    
    The QSPI flash node needs to have the required "jedec,spi-nor" in the
    compatible string.
    
    Fixes: 1df99da8953 ("ARM: dts: socfpga: Enable QSPI in Arria10 devkit")
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b4cc168d9ca3eb004969b413c0e0bd08a1fef4d
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Nov 30 19:20:34 2021 +0800

    ceph: initialize pathlen variable in reconnect_caps_cb
    
    [ Upstream commit ee2a095d3b24f300a5e11944d208801e928f108c ]
    
    The smatch static checker warned about an uninitialized symbol usage in
    this function, in the case where ceph_mdsc_build_path returns an error.
    
    It turns out that that case is harmless, but it just looks sketchy.
    Initialize the variable at declaration time, and remove the unneeded
    setting of it later.
    
    Fixes: a33f6432b3a6 ("ceph: encode inodes' parent/d_name in cap reconnect message")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0f06c32afb24d6bcb024334ff8c392221a312e2
Author: Hu Weiwen <sehuww@mail.scut.edu.cn>
Date:   Mon Nov 22 22:22:12 2021 +0800

    ceph: fix duplicate increment of opened_inodes metric
    
    [ Upstream commit 973e5245637accc4002843f6b888495a6a7762bc ]
    
    opened_inodes is incremented twice when the same inode is opened twice
    with O_RDONLY and O_WRONLY respectively.
    
    To reproduce, run this python script, then check the metrics:
    
    import os
    for _ in range(10000):
        fd_r = os.open('a', os.O_RDONLY)
        fd_w = os.open('a', os.O_WRONLY)
        os.close(fd_r)
        os.close(fd_w)
    
    Fixes: 1dd8d4708136 ("ceph: metrics for opened files, pinned caps and opened inodes")
    Signed-off-by: Hu Weiwen <sehuww@mail.scut.edu.cn>
    Reviewed-by: Xiubo Li <xiubli@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 640e28d618e82be78fb43b4bf5113bc90d6aa442
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Nov 24 17:54:04 2021 +0300

    tee: amdtee: fix an IS_ERR() vs NULL bug
    
    [ Upstream commit 9d7482771fac8d8e38e763263f2ca0ca12dd22c6 ]
    
    The __get_free_pages() function does not return error pointers it returns
    NULL so fix this condition to avoid a NULL dereference.
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eed897a22230e3231a740eddd7d6d95ba476625f
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 22 12:47:40 2021 +0100

    mac80211: track only QoS data frames for admission control
    
    [ Upstream commit d5e568c3a4ec2ddd23e7dc5ad5b0c64e4f22981a ]
    
    For admission control, obviously all of that only works for
    QoS data frames, otherwise we cannot even access the QoS
    field in the header.
    
    Syzbot reported (see below) an uninitialized value here due
    to a status of a non-QoS nullfunc packet, which isn't even
    long enough to contain the QoS header.
    
    Fix this to only do anything for QoS data packets.
    
    Reported-by: syzbot+614e82b88a1a4973e534@syzkaller.appspotmail.com
    Fixes: 02219b3abca5 ("mac80211: add WMM admission control support")
    Link: https://lore.kernel.org/r/20211122124737.dad29e65902a.Ieb04587afacb27c14e0de93ec1bfbefb238cc2a0@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24983f750881b57f7476c51a3d07b08e017f425c
Author: Alex Bee <knaerzche@gmail.com>
Date:   Wed Oct 27 16:37:25 2021 +0200

    arm64: dts: rockchip: fix audio-supply for Rock Pi 4
    
    [ Upstream commit 8240e87f16d17a9592c9d67857a3dcdbcb98f10d ]
    
    As stated in the schematics [1] and [2] P5 the APIO5 domain is supplied
    by RK808-D Buck4, which in our case vcc1v8_codec - i.e. a 1.8 V regulator.
    
    Currently only white noise comes from the ES8316's output, which - for
    whatever reason - came up only after the the correct switch from i2s0_8ch_bus
    to i2s0_2ch_bus for i2s0's pinctrl was done.
    
    Fix this by setting the correct regulator for audio-supply.
    
    [1] https://dl.radxa.com/rockpi4/docs/hw/rockpi4/rockpi4_v13_sch_20181112.pdf
    [2] https://dl.radxa.com/rockpi4/docs/hw/rockpi4/rockpi_4c_v12_sch_20200620.pdf
    
    Fixes: 1b5715c602fd ("arm64: dts: rockchip: add ROCK Pi 4 DTS support")
    Signed-off-by: Alex Bee <knaerzche@gmail.com>
    Link: https://lore.kernel.org/r/20211027143726.165809-1-knaerzche@gmail.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49bd597719bf89afef55e13d2a580f5591f1de6e
Author: John Keeping <john@metanate.com>
Date:   Tue Nov 2 18:29:08 2021 +0000

    arm64: dts: rockchip: fix rk3399-leez-p710 vcc3v3-lan supply
    
    [ Upstream commit 2b454a90e2ccdd6e03f88f930036da4df577be76 ]
    
    Correct a typo in the vin-supply property.  The input supply is
    always-on, so this mistake doesn't affect whether the supply is actually
    enabled correctly.
    
    Fixes: fc702ed49a86 ("arm64: dts: rockchip: Add dts for Leez RK3399 P710 SBC")
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20211102182908.3409670-3-john@metanate.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fcdbbf3964d5448e95a90006abb90ffc4e5b869
Author: John Keeping <john@metanate.com>
Date:   Tue Nov 2 18:29:07 2021 +0000

    arm64: dts: rockchip: fix rk3308-roc-cc vcc-sd supply
    
    [ Upstream commit 772fb46109f635dd75db20c86b7eaf48efa46cef ]
    
    Correct a typo in the vin-supply property.  The input supply is
    always-on, so this mistake doesn't affect whether the supply is actually
    enabled correctly.
    
    Fixes: 4403e1237be3 ("arm64: dts: rockchip: Add devicetree for board roc-rk3308-cc")
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20211102182908.3409670-2-john@metanate.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba866840b240a3f7c4ab7c980e18e78deb6132c3
Author: Artem Lapkin <email2tema@gmail.com>
Date:   Mon Nov 15 16:33:21 2021 +0800

    arm64: dts: rockchip: remove mmc-hs400-enhanced-strobe from rk3399-khadas-edge
    
    [ Upstream commit 6dd0053683804427529ef3523f7872f473440a19 ]
    
    Remove mmc-hs400-enhanced-strobe from the rk3399-khadas-edge dts to
    improve compatibility with a wider range of eMMC chips.
    
    Before (BJTD4R 29.1 GiB):
    
    [    7.001493] mmc2: CQHCI version 5.10
    [    7.027971] mmc2: SDHCI controller on fe330000.mmc [fe330000.mmc] using ADMA
    .......
    [    7.207086] mmc2: mmc_select_hs400es failed, error -110
    [    7.207129] mmc2: error -110 whilst initialising MMC card
    [    7.308893] mmc2: mmc_select_hs400es failed, error -110
    [    7.308921] mmc2: error -110 whilst initialising MMC card
    [    7.427524] mmc2: mmc_select_hs400es failed, error -110
    [    7.427546] mmc2: error -110 whilst initialising MMC card
    [    7.590993] mmc2: mmc_select_hs400es failed, error -110
    [    7.591012] mmc2: error -110 whilst initialising MMC card
    
    After:
    
    [    6.960785] mmc2: CQHCI version 5.10
    [    6.984672] mmc2: SDHCI controller on fe330000.mmc [fe330000.mmc] using ADMA
    [    7.175021] mmc2: Command Queue Engine enabled
    [    7.175053] mmc2: new HS400 MMC card at address 0001
    [    7.175808] mmcblk2: mmc2:0001 BJTD4R 29.1 GiB
    [    7.176033] mmcblk2boot0: mmc2:0001 BJTD4R 4.00 MiB
    [    7.176245] mmcblk2boot1: mmc2:0001 BJTD4R 4.00 MiB
    [    7.176495] mmcblk2rpmb: mmc2:0001 BJTD4R 4.00 MiB, chardev (242:0)
    
    Fixes: c2aacceedc86 ("arm64: dts: rockchip: Add support for Khadas Edge/Edge-V/Captain boards")
    Signed-off-by: Artem Lapkin <art@khadas.com>
    Link: https://lore.kernel.org/r/20211115083321.2627461-1-art@khadas.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3516bc149223a4d48b0cf0beb6a15fcb147b51a1
Author: Fabio Estevam <festevam@gmail.com>
Date:   Thu Mar 18 08:13:30 2021 -0300

    arm64: dts: imx8mp-evk: Improve the Ethernet PHY description
    
    commit 798a1807ab13a38e21c6fecd8d22a513d6786e2d upstream.
    
    According to the datasheet RTL8211, it must be asserted low for at least
    10ms and at least 72ms "for internal circuits settling time" before
    accessing the PHY registers.
    
    Add properties to describe such requirements.
    
    Reported-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Tested-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Cc: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06294e7e341a5e537ba0d4630e211a7acae818ee
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Sat Jan 16 16:44:28 2021 +0800

    arm64: dts: imx8m: correct assigned clocks for FEC
    
    commit 70eacf42a93aff6589a8b91279bbfe5f73c4ca3d upstream.
    
    CLK_ENET_TIMER assigned clocks twice, should be a typo, correct to
    CLK_ENET_PHY_REF clock.
    
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Cc: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cc6badff97f74d0fce65f9784b5df3b64e4250b
Author: Paul Moore <paul@paul-moore.com>
Date:   Thu Dec 9 11:46:07 2021 -0500

    audit: improve robustness of the audit queue handling
    
    commit f4b3ee3c85551d2d343a3ba159304066523f730f upstream.
    
    If the audit daemon were ever to get stuck in a stopped state the
    kernel's kauditd_thread() could get blocked attempting to send audit
    records to the userspace audit daemon.  With the kernel thread
    blocked it is possible that the audit queue could grow unbounded as
    certain audit record generating events must be exempt from the queue
    limits else the system enter a deadlock state.
    
    This patch resolves this problem by lowering the kernel thread's
    socket sending timeout from MAX_SCHEDULE_TIMEOUT to HZ/10 and tweaks
    the kauditd_send_queue() function to better manage the various audit
    queues when connection problems occur between the kernel and the
    audit daemon.  With this patch, the backlog may temporarily grow
    beyond the defined limits when the audit daemon is stopped and the
    system is under heavy audit pressure, but kauditd_thread() will
    continue to make progress and drain the queues as it would for other
    connection problems.  For example, with the audit daemon put into a
    stopped state and the system configured to audit every syscall it
    was still possible to shutdown the system without a kernel panic,
    deadlock, etc.; granted, the system was slow to shutdown but that is
    to be expected given the extreme pressure of recording every syscall.
    
    The timeout value of HZ/10 was chosen primarily through
    experimentation and this developer's "gut feeling".  There is likely
    no one perfect value, but as this scenario is limited in scope (root
    privileges would be needed to send SIGSTOP to the audit daemon), it
    is likely not worth exposing this as a tunable at present.  This can
    always be done at a later date if it proves necessary.
    
    Cc: stable@vger.kernel.org
    Fixes: 5b52330bbfe63 ("audit: fix auditd/kernel connection state tracking")
    Reported-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Tested-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e21e6cd5eebfc929ac5fa3b97ca2d4ace3cb6a3
Author: Joe Thornber <ejt@redhat.com>
Date:   Wed Nov 24 12:07:39 2021 -0500

    dm btree remove: fix use after free in rebalance_children()
    
    commit 1b8d2789dad0005fd5e7d35dab26a8e1203fb6da upstream.
    
    Move dm_tm_unlock() after dm_tm_dec().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5187a9d52ae3235772fd49530a8276dbefd2a7b
Author: Jerome Marchand <jmarchan@redhat.com>
Date:   Fri Dec 10 10:38:27 2021 +0100

    recordmcount.pl: look for jgnop instruction as well as bcrl on s390
    
    commit 85bf17b28f97ca2749968d8786dc423db320d9c2 upstream.
    
    On s390, recordmcount.pl is looking for "bcrl 0,<xxx>" instructions in
    the objdump -d outpout. However since binutils 2.37, objdump -d
    display "jgnop <xxx>" for the same instruction. Update the
    mcount_regex so that it accepts both.
    
    Signed-off-by: Jerome Marchand <jmarchan@redhat.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211210093827.1623286-1-jmarchan@redhat.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51f6302f81d243772047a74ffeceddfb11c964d5
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 8 13:33:37 2021 +0300

    vdpa: check that offsets are within bounds
    
    commit 3ed21c1451a14d139e1ceb18f2fa70865ce3195a upstream.
    
    In this function "c->off" is a u32 and "size" is a long.  On 64bit systems
    if "c->off" is greater than "size" then "size - c->off" is a negative and
    we always return -E2BIG.  But on 32bit systems the subtraction is type
    promoted to a high positive u32 value and basically any "c->len" is
    accepted.
    
    Fixes: 4c8cf31885f6 ("vhost: introduce vDPA-based backend")
    Reported-by: Xie Yongji <xieyongji@bytedance.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20211208103337.GA4047@kili
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3a1ab5aea4c55c4dd69514fcd322c5f8e2b0148
Author: Will Deacon <will@kernel.org>
Date:   Wed Dec 1 11:20:18 2021 +0000

    virtio_ring: Fix querying of maximum DMA mapping size for virtio device
    
    commit 817fc978b5a29b039db0418a91072b31c9aab152 upstream.
    
    virtio_max_dma_size() returns the maximum DMA mapping size of the virtio
    device by querying dma_max_mapping_size() for the device when the DMA
    API is in use for the vring. Unfortunately, the device passed is
    initialised by register_virtio_device() and does not inherit the DMA
    configuration from its parent, resulting in SWIOTLB errors when bouncing
    is enabled and the default 256K mapping limit (IO_TLB_SEGSIZE) is not
    respected:
    
      | virtio-pci 0000:00:01.0: swiotlb buffer is full (sz: 294912 bytes), total 1024 (slots), used 725 (slots)
    
    Follow the pattern used elsewhere in the virtio_ring code when calling
    into the DMA layer and pass the parent device to dma_max_mapping_size()
    instead.
    
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Quentin Perret <qperret@google.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20211201112018.25276-1-will@kernel.org
    Acked-by: Jason Wang <jasowang@redhat.com>
    Tested-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Fixes: e6d6dd6c875e ("virtio: Introduce virtio_max_dma_size()")
    Cc: Joerg Roedel <jroedel@suse.de>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Steven Price <steven.price@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0612679e48d0f9c8723c94feae3309550dcf2edf
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Dec 15 23:48:54 2021 +0000

    bpf, selftests: Add test case trying to taint map value pointer
    
    commit b1a7288dedc6caf9023f2676b4f5ed34cf0d4029 upstream.
    
    Add a test case which tries to taint map value pointer arithmetic into a
    unknown scalar with subsequent export through the map.
    
    Before fix:
    
      # ./test_verifier 1186
      #1186/u map access: trying to leak tained dst reg FAIL
      Unexpected success to load!
      verification time 24 usec
      stack depth 8
      processed 15 insns (limit 1000000) max_states_per_insn 0 total_states 1 peak_states 1 mark_read 1
      #1186/p map access: trying to leak tained dst reg FAIL
      Unexpected success to load!
      verification time 8 usec
      stack depth 8
      processed 15 insns (limit 1000000) max_states_per_insn 0 total_states 1 peak_states 1 mark_read 1
      Summary: 0 PASSED, 0 SKIPPED, 2 FAILED
    
    After fix:
    
      # ./test_verifier 1186
      #1186/u map access: trying to leak tained dst reg OK
      #1186/p map access: trying to leak tained dst reg OK
      Summary: 2 PASSED, 0 SKIPPED, 0 FAILED
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 279e0bf80d95184666c9d41361b1625c045d1dcb
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Dec 15 22:28:48 2021 +0000

    bpf: Make 32->64 bounds propagation slightly more robust
    
    commit e572ff80f05c33cd0cb4860f864f5c9c044280b6 upstream.
    
    Make the bounds propagation in __reg_assign_32_into_64() slightly more
    robust and readable by aligning it similarly as we did back in the
    __reg_combine_64_into_32() counterpart. Meaning, only propagate or
    pessimize them as a smin/smax pair.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2aad0b5f2cbf71a31d00ce7bb4dee948adff5a9
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Dec 15 22:02:19 2021 +0000

    bpf: Fix signed bounds propagation after mov32
    
    commit 3cf2b61eb06765e27fec6799292d9fb46d0b7e60 upstream.
    
    For the case where both s32_{min,max}_value bounds are positive, the
    __reg_assign_32_into_64() directly propagates them to their 64 bit
    counterparts, otherwise it pessimises them into [0,u32_max] universe and
    tries to refine them later on by learning through the tnum as per comment
    in mentioned function. However, that does not always happen, for example,
    in mov32 operation we call zext_32_to_64(dst_reg) which invokes the
    __reg_assign_32_into_64() as is without subsequent bounds update as
    elsewhere thus no refinement based on tnum takes place.
    
    Thus, not calling into the __update_reg_bounds() / __reg_deduce_bounds() /
    __reg_bound_offset() triplet as we do, for example, in case of ALU ops via
    adjust_scalar_min_max_vals(), will lead to more pessimistic bounds when
    dumping the full register state:
    
    Before fix:
    
      0: (b4) w0 = -1
      1: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=4294967295,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
      1: (bc) w0 = w0
      2: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=0,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
    Technically, the smin_value=0 and smax_value=4294967295 bounds are not
    incorrect, but given the register is still a constant, they break assumptions
    about const scalars that smin_value == smax_value and umin_value == umax_value.
    
    After fix:
    
      0: (b4) w0 = -1
      1: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=4294967295,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
      1: (bc) w0 = w0
      2: R0_w=invP4294967295
         (id=0,imm=ffffffff,
          smin_value=4294967295,smax_value=4294967295,
          umin_value=4294967295,umax_value=4294967295,
          var_off=(0xffffffff; 0x0),
          s32_min_value=-1,s32_max_value=-1,
          u32_min_value=-1,u32_max_value=-1)
    
    Without the smin_value == smax_value and umin_value == umax_value invariant
    being intact for const scalars, it is possible to leak out kernel pointers
    from unprivileged user space if the latter is enabled. For example, when such
    registers are involved in pointer arithmtics, then adjust_ptr_min_max_vals()
    will taint the destination register into an unknown scalar, and the latter
    can be exported and stored e.g. into a BPF map value.
    
    Fixes: 3f50f132d840 ("bpf: Verifier, do explicit ALU32 bounds tracking")
    Reported-by: Kuee K1r0a <liulin063@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0f484714f35d24ffa0ecb4afe3df1c5b225411d
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Dec 9 12:04:56 2021 +0000

    firmware: arm_scpi: Fix string overflow in SCPI genpd driver
    
    commit 865ed67ab955428b9aa771d8b4f1e4fb7fd08945 upstream.
    
    Without the bound checks for scpi_pd->name, it could result in the buffer
    overflow when copying the SCPI device name from the corresponding device
    tree node as the name string is set at maximum size of 30.
    
    Let us fix it by using devm_kasprintf so that the string buffer is
    allocated dynamically.
    
    Fixes: 8bec4337ad40 ("firmware: scpi: add device power domain support using genpd")
    Reported-by: Pedro Batista <pedbap.g@gmail.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Cc: stable@vger.kernel.org
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20211209120456.696879-1-sudeep.holla@arm.com'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fd214fc7f2ee3a89f91e717e3cfad55f5a27045
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sat Dec 11 20:10:24 2021 +0100

    mac80211: validate extended element ID is present
    
    commit 768c0b19b50665e337c96858aa2b7928d6dcf756 upstream.
    
    Before attempting to parse an extended element, verify that
    the extended element ID is present.
    
    Fixes: 41cbb0f5a295 ("mac80211: add support for HE")
    Reported-by: syzbot+59bdff68edce82e393b6@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20211211201023.f30a1b128c07.I5cacc176da94ba316877c6e10fe3ceec8b4dbd7d@changeid
    Cc: stable@vger.kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bb50470f1e09169887fe8509ca38e51e432f308
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Dec 2 13:45:33 2021 +0100

    mac80211: send ADDBA requests using the tid/queue of the aggregation session
    
    commit 1fe98f5690c4219d419ea9cc190f94b3401cf324 upstream.
    
    Sending them out on a different queue can cause a race condition where a
    number of packets in the queue may be discarded by the receiver, because
    the ADDBA request is sent too early.
    This affects any driver with software A-MPDU setup which does not allocate
    packet seqno in hardware on tx, regardless of whether iTXQ is used or not.
    The only driver I've seen that explicitly deals with this issue internally
    is mwl8k.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20211202124533.80388-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29bb131dbbb5c0447b06d9d015cab1bd480ab274
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 29 15:32:39 2021 +0200

    mac80211: mark TX-during-stop for TX in in_reconfig
    
    commit db7205af049d230e7e0abf61c1e74c1aab40f390 upstream.
    
    Mark TXQs as having seen transmit while they were stopped if
    we bail out of drv_wake_tx_queue() due to reconfig, so that
    the queue wake after this will make them catch up. This is
    particularly necessary for when TXQs are used for management
    packets since those TXQs won't see a lot of traffic that'd
    make them catch up later.
    
    Cc: stable@vger.kernel.org
    Fixes: 4856bfd23098 ("mac80211: do not call driver wake_tx_queue op during reconfig")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20211129152938.4573a221c0e1.I0d1d5daea3089be3fc0dccc92991b0f8c5677f0c@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15640e40e3bbb8714afadab4655e606944f69a9f
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Nov 24 10:40:24 2021 +0100

    mac80211: fix regression in SSN handling of addba tx
    
    commit 73111efacd3c6d9e644acca1d132566932be8af0 upstream.
    
    Some drivers that do their own sequence number allocation (e.g. ath9k) rely
    on being able to modify params->ssn on starting tx ampdu sessions.
    This was broken by a change that modified it to use sta->tid_seq[tid] instead.
    
    Cc: stable@vger.kernel.org
    Fixes: 31d8bb4e07f8 ("mac80211: agg-tx: refactor sending addba")
    Reported-by: Eneas U de Queiroz <cotequeiroz@gmail.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20211124094024.43222-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49b7e496928e5c5b8c2917a42d9d532a36028a14
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 22 18:24:01 2021 -0500

    KVM: downgrade two BUG_ONs to WARN_ON_ONCE
    
    [ Upstream commit 5f25e71e311478f9bb0a8ef49e7d8b95316491d7 ]
    
    This is not an unrecoverable situation.  Users of kvm_read_guest_offset_cached
    and kvm_write_guest_offset_cached must expect the read/write to fail, and
    therefore it is possible to just return early with an error value.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d0f56c2ed716d5db716893bda5e9250a9a7f2ee
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Tue Nov 23 14:59:53 2021 +0100

    KVM: selftests: Make sure kvm_create_max_vcpus test won't hit RLIMIT_NOFILE
    
    [ Upstream commit 908fa88e420f30dde6d80f092795a18ec72ca6d3 ]
    
    With the elevated 'KVM_CAP_MAX_VCPUS' value kvm_create_max_vcpus test
    may hit RLIMIT_NOFILE limits:
    
     # ./kvm_create_max_vcpus
     KVM_CAP_MAX_VCPU_ID: 4096
     KVM_CAP_MAX_VCPUS: 1024
     Testing creating 1024 vCPUs, with IDs 0...1023.
     /dev/kvm not available (errno: 24), skipping test
    
    Adjust RLIMIT_NOFILE limits to make sure KVM_CAP_MAX_VCPUS fds can be
    opened. Note, raising hard limit ('rlim_max') requires CAP_SYS_RESOURCE
    capability which is generally not needed to run kvm selftests (but without
    raising the limit the test is doomed to fail anyway).
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20211123135953.667434-1-vkuznets@redhat.com>
    [Skip the test if the hard limit can be raised. - Paolo]
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Tested-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
