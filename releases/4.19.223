commit 7139b4fa767396e52716f3bc970d2c78195786f5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 29 12:20:49 2021 +0100

    Linux 4.19.223
    
    Link: https://lore.kernel.org/r/20211227151319.379265346@linuxfoundation.org
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 982b6ba1ce626ef87e5c29f26f2401897554f235
Author: Rémi Denis-Courmont <remi@remlab.net>
Date:   Sun Dec 19 19:03:39 2021 +0200

    phonet/pep: refuse to enable an unbound pipe
    
    commit 75a2f31520095600f650597c0ac41f48b5ba0068 upstream.
    
    This ioctl() implicitly assumed that the socket was already bound to
    a valid local socket name, i.e. Phonet object. If the socket was not
    bound, two separate problems would occur:
    
    1) We'd send an pipe enablement request with an invalid source object.
    2) Later socket calls could BUG on the socket unexpectedly being
       connected yet not bound to a valid object.
    
    Reported-by: syzbot+2dc91e7fc3dea88b1e8a@syzkaller.appspotmail.com
    Signed-off-by: Rémi Denis-Courmont <remi@remlab.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b68f41c6320b2b7fbb54a95f07a69f3dc7e56c59
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Dec 17 10:13:56 2021 +0800

    hamradio: improve the incomplete fix to avoid NPD
    
    commit b2f37aead1b82a770c48b5d583f35ec22aabb61e upstream.
    
    The previous commit 3e0588c291d6 ("hamradio: defer ax25 kfree after
    unregister_netdev") reorder the kfree operations and unregister_netdev
    operation to prevent UAF.
    
    This commit improves the previous one by also deferring the nullify of
    the ax->tty pointer. Otherwise, a NULL pointer dereference bug occurs.
    Partial of the stack trace is shown below.
    
    BUG: kernel NULL pointer dereference, address: 0000000000000538
    RIP: 0010:ax_xmit+0x1f9/0x400
    ...
    Call Trace:
     dev_hard_start_xmit+0xec/0x320
     sch_direct_xmit+0xea/0x240
     __qdisc_run+0x166/0x5c0
     __dev_queue_xmit+0x2c7/0xaf0
     ax25_std_establish_data_link+0x59/0x60
     ax25_connect+0x3a0/0x500
     ? security_socket_connect+0x2b/0x40
     __sys_connect+0x96/0xc0
     ? __hrtimer_init+0xc0/0xc0
     ? common_nsleep+0x2e/0x50
     ? switch_fpu_return+0x139/0x1a0
     __x64_sys_connect+0x11/0x20
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The crash point is shown as below
    
    static void ax_encaps(...) {
      ...
      set_bit(TTY_DO_WRITE_WAKEUP, &ax->tty->flags); // ax->tty = NULL!
      ...
    }
    
    By placing the nullify action after the unregister_netdev, the ax->tty
    pointer won't be assigned as NULL net_device framework layer is well
    synchronized.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 896193a02a2981e60c40d4614fd095ce92135ccd
Author: Lin Ma <linma@zju.edu.cn>
Date:   Mon Nov 8 18:37:21 2021 +0800

    hamradio: defer ax25 kfree after unregister_netdev
    
    commit 3e0588c291d6ce225f2b891753ca41d45ba42469 upstream.
    
    There is a possible race condition (use-after-free) like below
    
     (USE)                       |  (FREE)
    ax25_sendmsg                 |
     ax25_queue_xmit             |
      dev_queue_xmit             |
       __dev_queue_xmit          |
        __dev_xmit_skb           |
         sch_direct_xmit         | ...
          xmit_one               |
           netdev_start_xmit     | tty_ldisc_kill
            __netdev_start_xmit  |  mkiss_close
             ax_xmit             |   kfree
              ax_encaps          |
                                 |
    
    Even though there are two synchronization primitives before the kfree:
    1. wait_for_completion(&ax->dead). This can prevent the race with
    routines from mkiss_ioctl. However, it cannot stop the routine coming
    from upper layer, i.e., the ax25_sendmsg.
    
    2. netif_stop_queue(ax->dev). It seems that this line of code aims to
    halt the transmit queue but it fails to stop the routine that already
    being xmit.
    
    This patch reorder the kfree after the unregister_netdev to avoid the
    possible UAF as the unregister_netdev() is well synchronized and won't
    return if there is a running routine.
    
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd05a8f1b7368ef4f7845548312fc61ab4fa63ce
Author: Lin Ma <linma@zju.edu.cn>
Date:   Fri Dec 17 10:29:41 2021 +0800

    ax25: NPD bug when detaching AX25 device
    
    commit 1ade48d0c27d5da1ccf4b583d8c5fc8b534a3ac8 upstream.
    
    The existing cleanup routine implementation is not well synchronized
    with the syscall routine. When a device is detaching, below race could
    occur.
    
    static int ax25_sendmsg(...) {
      ...
      lock_sock()
      ax25 = sk_to_ax25(sk);
      if (ax25->ax25_dev == NULL) // CHECK
      ...
      ax25_queue_xmit(skb, ax25->ax25_dev->dev); // USE
      ...
    }
    
    static void ax25_kill_by_device(...) {
      ...
      if (s->ax25_dev == ax25_dev) {
        s->ax25_dev = NULL;
        ...
    }
    
    Other syscall functions like ax25_getsockopt, ax25_getname,
    ax25_info_show also suffer from similar races. To fix them, this patch
    introduce lock_sock() into ax25_kill_by_device in order to guarantee
    that the nullify action in cleanup routine cannot proceed when another
    socket request is pending.
    
    Signed-off-by: Hanjie Wu <nagi@zju.edu.cn>
    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3d4efca11d7bcc93b7f4243528d4b6beb886b0b
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Fri Dec 3 13:42:22 2021 -0800

    hwmon: (lm90) Do not report 'busy' status bit as alarm
    
    commit cdc5287acad9ede121924a9c9313544b80d15842 upstream.
    
    Bit 7 of the status register indicates that the chip is busy
    doing a conversion. It does not indicate an alarm status.
    Stop reporting it as alarm status bit.
    
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d372494388f4bfaeb0e2dd17e51f4af8a3c1542
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Dec 7 19:30:05 2021 +0000

    KVM: VMX: Fix stale docs for kvm-intel.emulate_invalid_guest_state
    
    commit 0ff29701ffad9a5d5a24344d8b09f3af7b96ffda upstream.
    
    Update the documentation for kvm-intel's emulate_invalid_guest_state to
    rectify the description of KVM's default behavior, and to document that
    the behavior and thus parameter only applies to L1.
    
    Fixes: a27685c33acc ("KVM: VMX: Emulate invalid guest state by default")
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20211207193006.120997-4-seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b54abdbb314d34a5766eaefa95c1ad47277f18a7
Author: Marian Postevca <posteuca@mutex.one>
Date:   Sat Dec 4 23:49:12 2021 +0200

    usb: gadget: u_ether: fix race in setting MAC address in setup phase
    
    commit 890d5b40908bfd1a79be018d2d297cf9df60f4ee upstream.
    
    When listening for notifications through netlink of a new interface being
    registered, sporadically, it is possible for the MAC to be read as zero.
    The zero MAC address lasts a short period of time and then switches to a
    valid random MAC address.
    
    This causes problems for netd in Android, which assumes that the interface
    is malfunctioning and will not use it.
    
    In the good case we get this log:
    InterfaceController::getCfg() ifName usb0
     hwAddr 92:a8:f0:73:79:5b ipv4Addr 0.0.0.0 flags 0x1002
    
    In the error case we get these logs:
    InterfaceController::getCfg() ifName usb0
     hwAddr 00:00:00:00:00:00 ipv4Addr 0.0.0.0 flags 0x1002
    
    netd : interfaceGetCfg("usb0")
    netd : interfaceSetCfg() -> ServiceSpecificException
     (99, "[Cannot assign requested address] : ioctl() failed")
    
    The reason for the issue is the order in which the interface is setup,
    it is first registered through register_netdev() and after the MAC
    address is set.
    
    Fixed by first setting the MAC address of the net_device and after that
    calling register_netdev().
    
    Fixes: bcd4a1c40bee885e ("usb: gadget: u_ether: construct with default values and add setters/getters")
    Cc: stable@vger.kernel.org
    Signed-off-by: Marian Postevca <posteuca@mutex.one>
    Link: https://lore.kernel.org/r/20211204214912.17627-1-posteuca@mutex.one
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9dfa44be0fb5e8426183a70f69a246cf5827f49
Author: Chao Yu <chao@kernel.org>
Date:   Sun Dec 12 17:16:30 2021 +0800

    f2fs: fix to do sanity check on last xattr entry in __f2fs_setxattr()
    
    commit 5598b24efaf4892741c798b425d543e4bed357a1 upstream.
    
    As Wenqing Liu reported in bugzilla:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=215235
    
    - Overview
    page fault in f2fs_setxattr() when mount and operate on corrupted image
    
    - Reproduce
    tested on kernel 5.16-rc3, 5.15.X under root
    
    1. unzip tmp7.zip
    2. ./single.sh f2fs 7
    
    Sometimes need to run the script several times
    
    - Kernel dump
    loop0: detected capacity change from 0 to 131072
    F2FS-fs (loop0): Found nat_bits in checkpoint
    F2FS-fs (loop0): Mounted with checkpoint version = 7548c2ee
    BUG: unable to handle page fault for address: ffffe47bc7123f48
    RIP: 0010:kfree+0x66/0x320
    Call Trace:
     __f2fs_setxattr+0x2aa/0xc00 [f2fs]
     f2fs_setxattr+0xfa/0x480 [f2fs]
     __f2fs_set_acl+0x19b/0x330 [f2fs]
     __vfs_removexattr+0x52/0x70
     __vfs_removexattr_locked+0xb1/0x140
     vfs_removexattr+0x56/0x100
     removexattr+0x57/0x80
     path_removexattr+0xa3/0xc0
     __x64_sys_removexattr+0x17/0x20
     do_syscall_64+0x37/0xb0
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    The root cause is in __f2fs_setxattr(), we missed to do sanity check on
    last xattr entry, result in out-of-bound memory access during updating
    inconsistent xattr data of target inode.
    
    After the fix, it can detect such xattr inconsistency as below:
    
    F2FS-fs (loop11): inode (7) has invalid last xattr entry, entry_size: 60676
    F2FS-fs (loop11): inode (8) has corrupted xattr
    F2FS-fs (loop11): inode (8) has corrupted xattr
    F2FS-fs (loop11): inode (8) has invalid last xattr entry, entry_size: 47736
    
    Cc: stable@vger.kernel.org
    Reported-by: Wenqing Liu <wenqingliu0120@gmail.com>
    Signed-off-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    [delete f2fs_err() call as it's not in older kernels - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cf8d9c6bdaa7339a679227e5a0b82290ea591fc
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Dec 15 09:31:36 2021 +0100

    ARM: 9169/1: entry: fix Thumb2 bug in iWMMXt exception handling
    
    commit 8536a5ef886005bc443c2da9b842d69fd3d7647f upstream.
    
    The Thumb2 version of the FP exception handling entry code treats the
    register holding the CP number (R8) differently, resulting in the iWMMXT
    CP number check to be incorrect.
    
    Fix this by unifying the ARM and Thumb2 code paths, and switch the
    order of the additions of the TI_USED_CP offset and the shifted CP
    index.
    
    Cc: <stable@vger.kernel.org>
    Fixes: b86040a59feb ("Thumb-2: Implementation of the unified start-up and exceptions code")
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a30a4d516b62ba1c453a873e6a299a1196dc892b
Author: Fabien Dessenne <fabien.dessenne@foss.st.com>
Date:   Wed Dec 15 10:58:08 2021 +0100

    pinctrl: stm32: consider the GPIO offset to expose all the GPIO lines
    
    commit b67210cc217f9ca1c576909454d846970c13dfd4 upstream.
    
    Consider the GPIO controller offset (from "gpio-ranges") to compute the
    maximum GPIO line number.
    This fixes an issue where gpio-ranges uses a non-null offset.
      e.g.: gpio-ranges = <&pinctrl 6 86 10>
            In that case the last valid GPIO line is not 9 but 15 (6 + 10 - 1)
    
    Cc: stable@vger.kernel.org
    Fixes: 67e2996f72c7 ("pinctrl: stm32: fix the reported number of GPIO lines per bank")
    Reported-by: Christoph Fritz <chf.fritz@googlemail.com>
    Signed-off-by: Fabien Dessenne <fabien.dessenne@foss.st.com>
    Link: https://lore.kernel.org/r/20211215095808.621716-1-fabien.dessenne@foss.st.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94cc1e8331973ee7a2b4336f7ba67f48c2877d0a
Author: Andrew Cooper <andrew.cooper3@citrix.com>
Date:   Thu Dec 16 00:08:56 2021 +0000

    x86/pkey: Fix undefined behaviour with PKRU_WD_BIT
    
    commit 57690554abe135fee81d6ac33cc94d75a7e224bb upstream.
    
    Both __pkru_allows_write() and arch_set_user_pkey_access() shift
    PKRU_WD_BIT (a signed constant) by up to 30 bits, hitting the
    sign bit.
    
    Use unsigned constants instead.
    
    Clearly pkey 15 has not been used in combination with UBSAN yet.
    
    Noticed by code inspection only.  I can't actually provoke the
    compiler into generating incorrect logic as far as this shift is
    concerned.
    
    [
      dhansen: add stable@ tag, plus minor changelog massaging,
    
               For anyone doing backports, these #defines were in
               arch/x86/include/asm/pgtable.h before 784a46618f6.
    ]
    
    Fixes: 33a709b25a76 ("mm/gup, x86/mm/pkeys: Check VMAs and PTEs for protection keys")
    Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20211216000856.4480-1-andrew.cooper3@citrix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ceeeb3a197463950827a81b41443ed30e6e82002
Author: John David Anglin <dave.anglin@bell.net>
Date:   Tue Dec 21 13:21:22 2021 -0500

    parisc: Correct completer in lws start
    
    commit 8f66fce0f46560b9e910787ff7ad0974441c4f9c upstream.
    
    The completer in the "or,ev %r1,%r30,%r30" instruction is reversed, so we are
    not clipping the LWS number when we are called from a 32-bit process (W=0).
    We need to nulify the following depdi instruction when the least-significant
    bit of %r30 is 1.
    
    If the %r20 register is not clipped, a user process could perform a LWS call
    that would branch to an undefined location in the kernel and potentially crash
    the machine.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # 4.19+
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb84855d3e8799b67cdbadc7a5c53997cbfc3580
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Dec 17 12:44:10 2021 -0300

    ipmi: fix initialization when workqueue allocation fails
    
    commit 75d70d76cb7b927cace2cb34265d68ebb3306b13 upstream.
    
    If the workqueue allocation fails, the driver is marked as not initialized,
    and timer and panic_notifier will be left registered.
    
    Instead of removing those when workqueue allocation fails, do the workqueue
    initialization before doing it, and cleanup srcu_struct if it fails.
    
    Fixes: 1d49eb91e86e ("ipmi: Move remove_work to dedicated workqueue")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: Ioanna Alifieraki <ioanna-maria.alifieraki@canonical.com>
    Cc: stable@vger.kernel.org
    Message-Id: <20211217154410.1228673-2-cascardo@canonical.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db0d90490674c297a2e15a1ca3e40cd6975c30dc
Author: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
Date:   Fri Dec 17 12:44:09 2021 -0300

    ipmi: bail out if init_srcu_struct fails
    
    commit 2b5160b12091285c5aca45980f100a9294af7b04 upstream.
    
    In case, init_srcu_struct fails (because of memory allocation failure), we
    might proceed with the driver initialization despite srcu_struct not being
    entirely initialized.
    
    Fixes: 913a89f009d9 ("ipmi: Don't initialize anything in the core until something uses it")
    Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Cc: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org
    Message-Id: <20211217154410.1228673-1-cascardo@canonical.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f29fe79e02fcc0458c56553ee925ac93bed71e6e
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Sun Dec 12 21:01:49 2021 -0800

    Input: atmel_mxt_ts - fix double free in mxt_read_info_block
    
    commit 12f247ab590a08856441efdbd351cf2cc8f60a2d upstream.
    
    The "id_buf" buffer is stored in "data->raw_info_block" and freed by
    "mxt_free_object_table" in case of error.
    
    Return instead of jumping to avoid a double free.
    
    Addresses-Coverity-ID: 1474582 ("Double free")
    Fixes: 068bdb67ef74 ("Input: atmel_mxt_ts - fix the firmware update")
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Link: https://lore.kernel.org/r/20211212194257.68879-1-jose.exposito89@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8daff52b344d729ccecce07df66e2aad33a76a
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Sun Dec 12 17:20:25 2021 +0000

    ALSA: drivers: opl3: Fix incorrect use of vp->state
    
    commit 2dee54b289fbc810669a1b2b8a0887fa1c9a14d7 upstream.
    
    Static analysis with scan-build has found an assignment to vp2 that is
    never used. It seems that the check on vp->state > 0 should be actually
    on vp2->state instead. Fix this.
    
    This dates back to 2002, I found the offending commit from the git
    history git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git,
    commit 91e39521bbf6 ("[PATCH] ALSA patch for 2.5.4")
    
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20211212172025.470367-1-colin.i.king@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86e1ad26cb4b93ac5061d3fdbdc459b4e6561f9d
Author: Xiaoke Wang <xkernel.wang@foxmail.com>
Date:   Mon Dec 13 15:39:31 2021 +0800

    ALSA: jack: Check the return value of kstrdup()
    
    commit c01c1db1dc632edafb0dff32d40daf4f9c1a4e19 upstream.
    
    kstrdup() can return NULL, it is better to check the return value of it.
    
    Signed-off-by: Xiaoke Wang <xkernel.wang@foxmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/tencent_094816F3522E0DC704056C789352EBBF0606@qq.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afeaba7157864e1423c14dcdfbb2d962faf39289
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sat Nov 6 10:02:44 2021 -0700

    hwmon: (lm90) Fix usage of CONFIG2 register in detect function
    
    [ Upstream commit fce15c45d3fbd9fc1feaaf3210d8e3f8b33dfd3a ]
    
    The detect function had a comment "Make compiler happy" when id did not
    read the second configuration register. As it turns out, the code was
    checking the contents of this register for manufacturer ID 0xA1 (NXP
    Semiconductor/Philips), but never actually read the register. So it
    wasn't surprising that the compiler complained, and it indeed had a point.
    Fix the code to read the register contents for manufacturer ID 0xa1.
    
    At the same time, the code was reading the register for manufacturer ID
    0x41 (Analog Devices), but it was not using the results. In effect it was
    just checking if reading the register returned an error. That doesn't
    really add much if any value, so stop doing that.
    
    Fixes: f90be42fb383 ("hwmon: (lm90) Refactor reading of config2 register")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4271046124c5329e76b6d3fa7a4c72336779f4be
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Mon Dec 20 22:03:44 2021 +0800

    sfc: falcon: Check null pointer of rx_queue->page_ring
    
    [ Upstream commit 9b8bdd1eb5890aeeab7391dddcf8bd51f7b07216 ]
    
    Because of the possible failure of the kcalloc, it should be better to
    set rx_queue->page_ptr_mask to 0 when it happens in order to maintain
    the consistency.
    
    Fixes: 5a6681e22c14 ("sfc: separate out SFC4000 ("Falcon") support into new sfc-falcon driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Link: https://lore.kernel.org/r/20211220140344.978408-1-jiasheng@iscas.ac.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01b0153b921a8c48556c17f3ea97a0983e77c174
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 22 15:41:12 2021 +0800

    drivers: net: smc911x: Check for error irq
    
    [ Upstream commit cb93b3e11d405f20a405a07482d01147ef4934a3 ]
    
    Because platform_get_irq() could fail and return error irq.
    Therefore, it might be better to check it if order to avoid the use of
    error irq.
    
    Fixes: ae150435b59e ("smsc: Move the SMC (SMSC) drivers")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dddc12cba9663e4936cb2fff255cdcf4646eb2c9
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Wed Dec 22 15:12:07 2021 +0800

    fjes: Check for error irq
    
    [ Upstream commit db6d6afe382de5a65d6ccf51253ab48b8e8336c3 ]
    
    I find that platform_get_irq() will not always succeed.
    It will return error irq in case of the failure.
    Therefore, it might be better to check it if order to avoid the use of
    error irq.
    
    Fixes: 658d439b2292 ("fjes: Introduce FUJITSU Extended Socket Network Device driver")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e4591490f8a930e11131514db4cce4201ffc8a5
Author: Fernando Fernandez Mancera <ffmancera@riseup.net>
Date:   Tue Dec 21 12:13:45 2021 +0100

    bonding: fix ad_actor_system option setting to default
    
    [ Upstream commit 1c15b05baea71a5ff98235783e3e4ad227760876 ]
    
    When 802.3ad bond mode is configured the ad_actor_system option is set to
    "00:00:00:00:00:00". But when trying to set the all-zeroes MAC as actors'
    system address it was failing with EINVAL.
    
    An all-zeroes ethernet address is valid, only multicast addresses are not
    valid values.
    
    Fixes: 171a42c38c6e ("bonding: add netlink support for sys prio, actor sys mac, and port key")
    Signed-off-by: Fernando Fernandez Mancera <ffmancera@riseup.net>
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Link: https://lore.kernel.org/r/20211221111345.2462-1-ffmancera@riseup.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 925229d552724e1bba1abf01d3a0b1318539b012
Author: Wu Bo <wubo40@huawei.com>
Date:   Tue Dec 21 15:00:34 2021 +0800

    ipmi: Fix UAF when uninstall ipmi_si and ipmi_msghandler module
    
    [ Upstream commit ffb76a86f8096a8206be03b14adda6092e18e275 ]
    
    Hi,
    
    When testing install and uninstall of ipmi_si.ko and ipmi_msghandler.ko,
    the system crashed.
    
    The log as follows:
    [  141.087026] BUG: unable to handle kernel paging request at ffffffffc09b3a5a
    [  141.087241] PGD 8fe4c0d067 P4D 8fe4c0d067 PUD 8fe4c0f067 PMD 103ad89067 PTE 0
    [  141.087464] Oops: 0010 [#1] SMP NOPTI
    [  141.087580] CPU: 67 PID: 668 Comm: kworker/67:1 Kdump: loaded Not tainted 4.18.0.x86_64 #47
    [  141.088009] Workqueue: events 0xffffffffc09b3a40
    [  141.088009] RIP: 0010:0xffffffffc09b3a5a
    [  141.088009] Code: Bad RIP value.
    [  141.088009] RSP: 0018:ffffb9094e2c3e88 EFLAGS: 00010246
    [  141.088009] RAX: 0000000000000000 RBX: ffff9abfdb1f04a0 RCX: 0000000000000000
    [  141.088009] RDX: 0000000000000000 RSI: 0000000000000246 RDI: 0000000000000246
    [  141.088009] RBP: 0000000000000000 R08: ffff9abfffee3cb8 R09: 00000000000002e1
    [  141.088009] R10: ffffb9094cb73d90 R11: 00000000000f4240 R12: ffff9abfffee8700
    [  141.088009] R13: 0000000000000000 R14: ffff9abfdb1f04a0 R15: ffff9abfdb1f04a8
    [  141.088009] FS:  0000000000000000(0000) GS:ffff9abfffec0000(0000) knlGS:0000000000000000
    [  141.088009] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  141.088009] CR2: ffffffffc09b3a30 CR3: 0000008fe4c0a001 CR4: 00000000007606e0
    [  141.088009] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  141.088009] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  141.088009] PKRU: 55555554
    [  141.088009] Call Trace:
    [  141.088009]  ? process_one_work+0x195/0x390
    [  141.088009]  ? worker_thread+0x30/0x390
    [  141.088009]  ? process_one_work+0x390/0x390
    [  141.088009]  ? kthread+0x10d/0x130
    [  141.088009]  ? kthread_flush_work_fn+0x10/0x10
    [  141.088009]  ? ret_from_fork+0x35/0x40] BUG: unable to handle kernel paging request at ffffffffc0b28a5a
    [  200.223240] PGD 97fe00d067 P4D 97fe00d067 PUD 97fe00f067 PMD a580cbf067 PTE 0
    [  200.223464] Oops: 0010 [#1] SMP NOPTI
    [  200.223579] CPU: 63 PID: 664 Comm: kworker/63:1 Kdump: loaded Not tainted 4.18.0.x86_64 #46
    [  200.224008] Workqueue: events 0xffffffffc0b28a40
    [  200.224008] RIP: 0010:0xffffffffc0b28a5a
    [  200.224008] Code: Bad RIP value.
    [  200.224008] RSP: 0018:ffffbf3c8e2a3e88 EFLAGS: 00010246
    [  200.224008] RAX: 0000000000000000 RBX: ffffa0799ad6bca0 RCX: 0000000000000000
    [  200.224008] RDX: 0000000000000000 RSI: 0000000000000246 RDI: 0000000000000246
    [  200.224008] RBP: 0000000000000000 R08: ffff9fe43fde3cb8 R09: 00000000000000d5
    [  200.224008] R10: ffffbf3c8cb53d90 R11: 00000000000f4240 R12: ffff9fe43fde8700
    [  200.224008] R13: 0000000000000000 R14: ffffa0799ad6bca0 R15: ffffa0799ad6bca8
    [  200.224008] FS:  0000000000000000(0000) GS:ffff9fe43fdc0000(0000) knlGS:0000000000000000
    [  200.224008] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  200.224008] CR2: ffffffffc0b28a30 CR3: 00000097fe00a002 CR4: 00000000007606e0
    [  200.224008] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  200.224008] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  200.224008] PKRU: 55555554
    [  200.224008] Call Trace:
    [  200.224008]  ? process_one_work+0x195/0x390
    [  200.224008]  ? worker_thread+0x30/0x390
    [  200.224008]  ? process_one_work+0x390/0x390
    [  200.224008]  ? kthread+0x10d/0x130
    [  200.224008]  ? kthread_flush_work_fn+0x10/0x10
    [  200.224008]  ? ret_from_fork+0x35/0x40
    [  200.224008] kernel fault(0x1) notification starting on CPU 63
    [  200.224008] kernel fault(0x1) notification finished on CPU 63
    [  200.224008] CR2: ffffffffc0b28a5a
    [  200.224008] ---[ end trace c82a412d93f57412 ]---
    
    The reason is as follows:
    T1: rmmod ipmi_si.
        ->ipmi_unregister_smi()
            -> ipmi_bmc_unregister()
                -> __ipmi_bmc_unregister()
                    -> kref_put(&bmc->usecount, cleanup_bmc_device);
                        -> schedule_work(&bmc->remove_work);
    
    T2: rmmod ipmi_msghandler.
        ipmi_msghander module uninstalled, and the module space
        will be freed.
    
    T3: bmc->remove_work doing cleanup the bmc resource.
        -> cleanup_bmc_work()
            -> platform_device_unregister(&bmc->pdev);
                -> platform_device_del(pdev);
                    -> device_del(&pdev->dev);
                        -> kobject_uevent(&dev->kobj, KOBJ_REMOVE);
                            -> kobject_uevent_env()
                                -> dev_uevent()
                                    -> if (dev->type && dev->type->name)
    
       'dev->type'(bmc_device_type) pointer space has freed when uninstall
        ipmi_msghander module, 'dev->type->name' cause the system crash.
    
    drivers/char/ipmi/ipmi_msghandler.c:
    2820 static const struct device_type bmc_device_type = {
    2821         .groups         = bmc_dev_attr_groups,
    2822 };
    
    Steps to reproduce:
    Add a time delay in cleanup_bmc_work() function,
    and uninstall ipmi_si and ipmi_msghandler module.
    
    2910 static void cleanup_bmc_work(struct work_struct *work)
    2911 {
    2912         struct bmc_device *bmc = container_of(work, struct bmc_device,
    2913                                               remove_work);
    2914         int id = bmc->pdev.id; /* Unregister overwrites id */
    2915
    2916         msleep(3000);   <---
    2917         platform_device_unregister(&bmc->pdev);
    2918         ida_simple_remove(&ipmi_bmc_ida, id);
    2919 }
    
    Use 'remove_work_wq' instead of 'system_wq' to solve this issues.
    
    Fixes: b2cfd8ab4add ("ipmi: Rework device id and guid handling to catch changing BMCs")
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Message-Id: <1640070034-56671-1-git-send-email-wubo40@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fefa884a55bd5995e77f4fdd89f0400f42b39f7
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Dec 20 09:50:27 2021 -0500

    net: skip virtio_net_hdr_set_proto if protocol already set
    
    [ Upstream commit 1ed1d592113959f00cc552c3b9f47ca2d157768f ]
    
    virtio_net_hdr_set_proto infers skb->protocol from the virtio_net_hdr
    gso_type, to avoid packets getting dropped for lack of a proto type.
    
    Its protocol choice is a guess, especially in the case of UFO, where
    the single VIRTIO_NET_HDR_GSO_UDP label covers both UFOv4 and UFOv6.
    
    Skip this best effort if the field is already initialized. Whether
    explicitly from userspace, or implicitly based on an earlier call to
    dev_parse_header_protocol (which is more robust, but was introduced
    after this patch).
    
    Fixes: 9d2f67e43b73 ("net/packet: fix packet drop as of virtio gso")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20211220145027.2784293-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c6159ee8fc9de7fd77793bde37922cb0c1a5db0
Author: Willem de Bruijn <willemb@google.com>
Date:   Mon Dec 20 09:49:01 2021 -0500

    net: accept UFOv6 packages in virtio_net_hdr_to_skb
    
    [ Upstream commit 7e5cced9ca84df52d874aca6b632f930b3dc5bc6 ]
    
    Skb with skb->protocol 0 at the time of virtio_net_hdr_to_skb may have
    a protocol inferred from virtio_net_hdr with virtio_net_hdr_set_proto.
    
    Unlike TCP, UDP does not have separate types for IPv4 and IPv6. Type
    VIRTIO_NET_HDR_GSO_UDP is guessed to be IPv4/UDP. As of the below
    commit, UFOv6 packets are dropped due to not matching the protocol as
    obtained from dev_parse_header_protocol.
    
    Invert the test to take that L2 protocol field as starting point and
    pass both UFOv4 and UFOv6 for VIRTIO_NET_HDR_GSO_UDP.
    
    Fixes: 924a9bc362a5 ("net: check if protocol extracted by virtio_net_hdr_set_proto is correct")
    Link: https://lore.kernel.org/netdev/CABcq3pG9GRCYqFDBAJ48H1vpnnX=41u+MhQnayF1ztLH4WX0Fw@mail.gmail.com/
    Reported-by: Andrew Melnichenko <andrew@daynix.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20211220144901.2784030-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f840dfd0d6e9359d5a64047d5d50c5d6e9d02f10
Author: Jiasheng Jiang <jiasheng@iscas.ac.cn>
Date:   Fri Dec 17 17:39:11 2021 +0800

    qlcnic: potential dereference null pointer of rx_queue->page_ring
    
    [ Upstream commit 60ec7fcfe76892a1479afab51ff17a4281923156 ]
    
    The return value of kcalloc() needs to be checked.
    To avoid dereference of null pointer in case of the failure of alloc.
    Therefore, it might be better to change the return type of
    qlcnic_sriov_alloc_vlans() and return -ENOMEM when alloc fails and
    return 0 the others.
    Also, qlcnic_sriov_set_guest_vlan_mode() and __qlcnic_pci_sriov_enable()
    should deal with the return value of qlcnic_sriov_alloc_vlans().
    
    Fixes: 154d0c810c53 ("qlcnic: VLAN enhancement for 84XX adapters")
    Signed-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ba90f19c05cb39519148d5763bff319762420b9
Author: Ignacy Gawędzki <ignacy.gawedzki@green-communications.fr>
Date:   Fri Dec 10 16:31:27 2021 +0100

    netfilter: fix regression in looped (broad|multi)cast's MAC handling
    
    [ Upstream commit ebb966d3bdfed581ecccbb4a7432341baf7619b4 ]
    
    In commit 5648b5e1169f ("netfilter: nfnetlink_queue: fix OOB when mac
    header was cleared"), the test for non-empty MAC header introduced in
    commit 2c38de4c1f8da7 ("netfilter: fix looped (broad|multi)cast's MAC
    handling") has been replaced with a test for a set MAC header.
    
    This breaks the case when the MAC header has been reset (using
    skb_reset_mac_header), as is the case with looped-back multicast
    packets.  As a result, the packets ending up in NFQUEUE get a bogus
    hwaddr interpreted from the first bytes of the IP header.
    
    This patch adds a test for a non-empty MAC header in addition to the
    test for a set MAC header.  The same two tests are also implemented in
    nfnetlink_log.c, where the initial code of commit 2c38de4c1f8da7
    ("netfilter: fix looped (broad|multi)cast's MAC handling") has not been
    touched, but where supposedly the same situation may happen.
    
    Fixes: 5648b5e1169f ("netfilter: nfnetlink_queue: fix OOB when mac header was cleared")
    Signed-off-by: Ignacy Gawędzki <ignacy.gawedzki@green-communications.fr>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0aaec9c5f60754b56f84460ea439b8c5e91f4caa
Author: José Expósito <jose.exposito89@gmail.com>
Date:   Wed Dec 8 18:52:38 2021 +0100

    IB/qib: Fix memory leak in qib_user_sdma_queue_pkts()
    
    [ Upstream commit bee90911e0138c76ee67458ac0d58b38a3190f65 ]
    
    The wrong goto label was used for the error case and missed cleanup of the
    pkt allocation.
    
    Fixes: d39bf40e55e6 ("IB/qib: Protect from buffer overflow in struct qib_user_sdma_pkt fields")
    Link: https://lore.kernel.org/r/20211208175238.29983-1-jose.exposito89@gmail.com
    Addresses-Coverity-ID: 1493352 ("Resource leak")
    Signed-off-by: José Expósito <jose.exposito89@gmail.com>
    Acked-by: Mike Marciniszyn <mike.marciniszyn@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab381351f9ba585ccac85d4f7e2625017547d846
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Mon Dec 6 18:19:31 2021 +0800

    spi: change clk_disable_unprepare to clk_unprepare
    
    [ Upstream commit db6689b643d8653092f5853751ea2cdbc299f8d3 ]
    
    The corresponding API for clk_prepare is clk_unprepare, other than
    clk_disable_unprepare.
    
    Fix this by changing clk_disable_unprepare to clk_unprepare.
    
    Fixes: 5762ab71eb24 ("spi: Add support for Armada 3700 SPI Controller")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Link: https://lore.kernel.org/r/20211206101931.2816597-1-mudongliangabcd@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8044451ac443b71a5ef4a332221556e5a1b5169e
Author: Robert Marko <robert.marko@sartura.hr>
Date:   Wed Nov 17 15:02:22 2021 +0100

    arm64: dts: allwinner: orangepi-zero-plus: fix PHY mode
    
    [ Upstream commit 08d2061ff9c5319a07bf9ca6bbf11fdec68f704a ]
    
    Orange Pi Zero Plus uses a Realtek RTL8211E RGMII Gigabit PHY, but its
    currently set to plain RGMII mode meaning that it doesn't introduce
    delays.
    
    With this setup, TX packets are completely lost and changing the mode to
    RGMII-ID so the PHY will add delays internally fixes the issue.
    
    Fixes: a7affb13b271 ("arm64: allwinner: H5: Add Xunlong Orange Pi Zero Plus")
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Tested-by: Ron Goossens <rgoossens@gmail.com>
    Tested-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Robert Marko <robert.marko@sartura.hr>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20211117140222.43692-1-robert.marko@sartura.hr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ccda28dff03db196b2122566765d03737fea6b2
Author: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Date:   Mon Dec 20 10:51:20 2021 +0100

    HID: holtek: fix mouse probing
    
    commit 93a2207c254ca102ebbdae47b00f19bbfbfa7ecd upstream.
    
    An overlook from the previous commit: we don't even parse or start the
    device, meaning that the device is not presented to user space.
    
    Fixes: 93020953d0fa ("HID: check for valid USB device for many HID drivers")
    Cc: stable@vger.kernel.org
    Link: https://bugs.archlinux.org/task/73048
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=215341
    Link: https://lore.kernel.org/r/e4efbf13-bd8d-0370-629b-6c80c0044b15@leemhuis.info/
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57f93eaff49df848d0534de9d5ade19a7212ab2d
Author: Paolo Valente <paolo.valente@linaro.org>
Date:   Tue Dec 21 19:38:49 2021 +0800

    block, bfq: fix use after free in bfq_bfqq_expire
    
    commit eed47d19d9362bdd958e4ab56af480b9dbf6b2b6 upstream.
    
    The function bfq_bfqq_expire() invokes the function
    __bfq_bfqq_expire(), and the latter may free the in-service bfq-queue.
    If this happens, then no other instruction of bfq_bfqq_expire() must
    be executed, or a use-after-free will occur.
    
    Basing on the assumption that __bfq_bfqq_expire() invokes
    bfq_put_queue() on the in-service bfq-queue exactly once, the queue is
    assumed to be freed if its refcounter is equal to one right before
    invoking __bfq_bfqq_expire().
    
    But, since commit 9dee8b3b057e ("block, bfq: fix queue removal from
    weights tree") this assumption is false. __bfq_bfqq_expire() may also
    invoke bfq_weights_tree_remove() and, since commit 9dee8b3b057e
    ("block, bfq: fix queue removal from weights tree"), also
    the latter function may invoke bfq_put_queue(). So __bfq_bfqq_expire()
    may invoke bfq_put_queue() twice, and this is the actual case where
    the in-service queue may happen to be freed.
    
    To address this issue, this commit moves the check on the refcounter
    of the queue right around the last bfq_put_queue() that may be invoked
    on the queue.
    
    Fixes: 9dee8b3b057e ("block, bfq: fix queue removal from weights tree")
    Reported-by: Dmitrii Tcvetkov <demfloro@demfloro.ru>
    Reported-by: Douglas Anderson <dianders@chromium.org>
    Tested-by: Dmitrii Tcvetkov <demfloro@demfloro.ru>
    Tested-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99ada24490c3464b372e534fcdf3d641e912327d
Author: Paolo Valente <paolo.valente@linaro.org>
Date:   Tue Dec 21 19:38:48 2021 +0800

    block, bfq: fix queue removal from weights tree
    
    commit 9dee8b3b057e1da26f85f1842f2aaf3bb200fb94 upstream.
    
    bfq maintains an ordered list, through a red-black tree, of unique
    weights of active bfq_queues. This list is used to detect whether there
    are active queues with differentiated weights. The weight of a queue is
    removed from the list when both the following two conditions become
    true:
    
    (1) the bfq_queue is flagged as inactive
    (2) the has no in-flight request any longer;
    
    Unfortunately, in the rare cases where condition (2) becomes true before
    condition (1), the removal fails, because the function to remove the
    weight of the queue (bfq_weights_tree_remove) is rightly invoked in the
    path that deactivates the bfq_queue, but mistakenly invoked *before* the
    function that actually performs the deactivation (bfq_deactivate_bfqq).
    
    This commits moves the invocation of bfq_weights_tree_remove for
    condition (1) to after bfq_deactivate_bfqq. As a consequence of this
    move, it is necessary to add a further reference to the queue when the
    weight of a queue is added, because the queue might otherwise be freed
    before bfq_weights_tree_remove is invoked. This commit adds this
    reference and makes all related modifications.
    
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d0efcc69c75adb98fce47c7ddd4135b99a71392
Author: Paolo Valente <paolo.valente@linaro.org>
Date:   Tue Dec 21 19:38:47 2021 +0800

    block, bfq: fix decrement of num_active_groups
    
    commit ba7aeae5539c7a7cccc4cf07a2bc61281a93c50e upstream.
    
    Since commit '2d29c9f89fcd ("block, bfq: improve asymmetric scenarios
    detection")', if there are process groups with I/O requests waiting for
    completion, then BFQ tags the scenario as 'asymmetric'. This detection
    is needed for preserving service guarantees (for details, see comments
    on the computation * of the variable asymmetric_scenario in the
    function bfq_better_to_idle).
    
    Unfortunately, commit '2d29c9f89fcd ("block, bfq: improve asymmetric
    scenarios detection")' contains an error exactly in the updating of
    the number of groups with I/O requests waiting for completion: if a
    group has more than one descendant process, then the above number of
    groups, which is renamed from num_active_groups to a more appropriate
    num_groups_with_pending_reqs by this commit, may happen to be wrongly
    decremented multiple times, namely every time one of the descendant
    processes gets all its pending I/O requests completed.
    
    A correct, complete solution should work as follows. Consider a group
    that is inactive, i.e., that has no descendant process with pending
    I/O inside BFQ queues. Then suppose that num_groups_with_pending_reqs
    is still accounting for this group, because the group still has some
    descendant process with some I/O request still in
    flight. num_groups_with_pending_reqs should be decremented when the
    in-flight request of the last descendant process is finally completed
    (assuming that nothing else has changed for the group in the meantime,
    in terms of composition of the group and active/inactive state of
    child groups and processes). To accomplish this, an additional
    pending-request counter must be added to entities, and must be
    updated correctly.
    
    To avoid this additional field and operations, this commit resorts to
    the following tradeoff between simplicity and accuracy: for an
    inactive group that is still counted in num_groups_with_pending_reqs,
    this commit decrements num_groups_with_pending_reqs when the first
    descendant process of the group remains with no request waiting for
    completion.
    
    This simplified scheme provides a fix to the unbalanced decrements
    introduced by 2d29c9f89fcd. Since this error was also caused by lack
    of comments on this non-trivial issue, this commit also adds related
    comments.
    
    Fixes: 2d29c9f89fcd ("block, bfq: improve asymmetric scenarios detection")
    Reported-by: Steven Barrett <steven@liquorix.net>
    Tested-by: Steven Barrett <steven@liquorix.net>
    Tested-by: Lucjan Lucjanov <lucjan.lucjanov@gmail.com>
    Reviewed-by: Federico Motta <federico@willer.it>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e867d620470af7a2a1366240fbec1e0f82152853
Author: Federico Motta <federico@willer.it>
Date:   Tue Dec 21 19:38:46 2021 +0800

    block, bfq: fix asymmetric scenarios detection
    
    commit 98fa7a3e001b21fb47c08af4304f40a3b0535cbd upstream.
    
    Since commit 2d29c9f89fcd ("block, bfq: improve asymmetric scenarios
    detection"), a scenario is defined asymmetric when one of the
    following conditions holds:
    - active bfq_queues have different weights
    - one or more group of entities (bfq_queue or other groups of entities)
      are active
    bfq grants fairness and low latency also in such asymmetric scenarios,
    by plugging the dispatching of I/O if the bfq_queue in service happens
    to be temporarily idle. This plugging may lower throughput, so it is
    important to do it only when strictly needed.
    
    By mistake, in commit '2d29c9f89fcd' ("block, bfq: improve asymmetric
    scenarios detection") the num_active_groups counter was firstly
    incremented and subsequently decremented at any entity (group or
    bfq_queue) weight change.
    
    This is useless, because only transitions from active to inactive and
    vice versa matter for that counter. Unfortunately this is also
    incorrect in the following case: the entity at issue is a bfq_queue
    and it is under weight raising. In fact in this case there is a
    spurious increment of the num_active_groups counter.
    
    This spurious increment may cause scenarios to be wrongly detected as
    asymmetric, thus causing useless plugging and loss of throughput.
    
    This commit fixes this issue by simply removing the above useless and
    wrong increments and decrements.
    
    Fixes: 2d29c9f89fcd ("block, bfq: improve asymmetric scenarios detection")
    Tested-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Signed-off-by: Federico Motta <federico@willer.it>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4cd53c650bef54766bb1453f95313a9360679fc
Author: Federico Motta <federico@willer.it>
Date:   Tue Dec 21 19:38:45 2021 +0800

    block, bfq: improve asymmetric scenarios detection
    
    commit 2d29c9f89fcd9bf408fcdaaf515c90a169f22ecd upstream.
    
    bfq defines as asymmetric a scenario where an active entity, say E
    (representing either a single bfq_queue or a group of other entities),
    has a higher weight than some other entities.  If the entity E does sync
    I/O in such a scenario, then bfq plugs the dispatch of the I/O of the
    other entities in the following situation: E is in service but
    temporarily has no pending I/O request.  In fact, without this plugging,
    all the times that E stops being temporarily idle, it may find the
    internal queues of the storage device already filled with an
    out-of-control number of extra requests, from other entities. So E may
    have to wait for the service of these extra requests, before finally
    having its own requests served. This may easily break service
    guarantees, with E getting less than its fair share of the device
    throughput.  Usually, the end result is that E gets the same fraction of
    the throughput as the other entities, instead of getting more, according
    to its higher weight.
    
    Yet there are two other more subtle cases where E, even if its weight is
    actually equal to or even lower than the weight of any other active
    entities, may get less than its fair share of the throughput in case the
    above I/O plugging is not performed:
    1. other entities issue larger requests than E;
    2. other entities contain more active child entities than E (or in
       general tend to have more backlog than E).
    
    In the first case, other entities may get more service than E because
    they get larger requests, than those of E, served during the temporary
    idle periods of E.  In the second case, other entities get more service
    because, by having many child entities, they have many requests ready
    for dispatching while E is temporarily idle.
    
    This commit addresses this issue by extending the definition of
    asymmetric scenario: a scenario is asymmetric when
    - active entities representing bfq_queues have differentiated weights,
      as in the original definition
    or (inclusive)
    - one or more entities representing groups of entities are active.
    
    This broader definition makes sure that I/O plugging will be performed
    in all the above cases, provided that there is at least one active
    group.  Of course, this definition is very coarse, so it will trigger
    I/O plugging also in cases where it is not needed, such as, e.g.,
    multiple active entities with just one child each, and all with the same
    I/O-request size.  The reason for this coarse definition is just that a
    finer-grained definition would be rather heavy to compute.
    
    On the opposite end, even this new definition does not trigger I/O
    plugging in all cases where there is no active group, and all bfq_queues
    have the same weight.  So, in these cases some unfairness may occur if
    there are asymmetries in I/O-request sizes.  We made this choice because
    I/O plugging may lower throughput, and probably a user that has not
    created any group cares more about throughput than about perfect
    fairness.  At any rate, as for possible applications that may care about
    service guarantees, bfq already guarantees a high responsiveness and a
    low latency to soft real-time applications automatically.
    
    Signed-off-by: Federico Motta <federico@willer.it>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a4cd34959d7b278f7d76df92ae75fb124c969e6
Author: Greg Jesionowski <jesionowskigreg@gmail.com>
Date:   Tue Dec 14 15:10:27 2021 -0700

    net: usb: lan78xx: add Allied Telesis AT29M2-AF
    
    commit ef8a0f6eab1ca5d1a75c242c5c7b9d386735fa0a upstream.
    
    This adds the vendor and product IDs for the AT29M2-AF which is a
    lan7801-based device.
    
    Signed-off-by: Greg Jesionowski <jesionowskigreg@gmail.com>
    Link: https://lore.kernel.org/r/20211214221027.305784-1-jesionowskigreg@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
