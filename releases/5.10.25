commit 3ba56f490c7ab26974806f8c2f14fc49652efe10
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Mar 20 10:43:44 2021 +0100

    Linux 5.10.25
    
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210319121745.112612545@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd0b7edb779466e29c375b04ff1a2b19d929e70f
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Feb 22 14:30:10 2021 -0800

    net: dsa: b53: Support setting learning on port
    
    commit f9b3827ee66cfcf297d0acd6ecf33653a5f297ef upstream.
    
    Add support for being able to set the learning attribute on port, and
    make sure that the standalone ports start up with learning disabled.
    
    We can remove the code in bcm_sf2 that configured the ports learning
    attribute because we want the standalone ports to have learning disabled
    by default and port 7 cannot be bridged, so its learning attribute will
    not change past its initial configuration.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f6cab2350d5d5cc26daa8c2321d069ec874c3c6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Feb 6 21:30:52 2021 +0100

    ALSA: usb-audio: Don't avoid stopping the stream at disconnection
    
    commit 257d2d7e9e798305d65825cb82b0a7d1c0511e89 upstream
    
    In the later patch, we're going to issue the PCM sync_stop calls at
    disconnection.  But currently the USB-audio driver can't handle it
    because it has a check of shutdown flag for stopping the URBs.  This
    is basically superfluous (the stopping URBs are safe at disconnection
    state), so let's drop the check.
    
    Fixes: dc5eafe7787c ("ALSA: usb-audio: Support PCM sync_stop")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210206203052.15606-4-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df8596f5774387f92133e0e5b7e05808ff6595d7
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Mon Mar 8 10:52:29 2021 -0500

    Revert "nfsd4: a client's own opens needn't prevent delegations"
    
    commit 6ee65a773096ab3f39d9b00311ac983be5bdeb7c upstream.
    
    This reverts commit 94415b06eb8aed13481646026dc995f04a3a534a.
    
    That commit claimed to allow a client to get a read delegation when it
    was the only writer.  Actually it allowed a client to get a read
    delegation when *any* client has a write open!
    
    The main problem is that it's depending on nfs4_clnt_odstate structures
    that are actually only maintained for pnfs exports.
    
    This causes clients to miss writes performed by other clients, even when
    there have been intervening closes and opens, violating close-to-open
    cache consistency.
    
    We can do this a different way, but first we should just revert this.
    
    I've added pynfs 4.1 test DELEG19 to test for this, as I should have
    done originally!
    
    Cc: stable@vger.kernel.org
    Reported-by: Timo Rothenpieler <timo@rothenpieler.org>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 894ecf0cb505561b9f37b302b7479eea939b0790
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Mon Mar 8 10:51:51 2021 -0500

    Revert "nfsd4: remove check_conflicting_opens warning"
    
    commit 4aa5e002034f0701c3335379fd6c22d7f3338cce upstream.
    
    This reverts commit 50747dd5e47b "nfsd4: remove check_conflicting_opens
    warning", as a prerequisite for reverting 94415b06eb8a, which has a
    serious bug.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d955f13ea2120269319d6133d0dd82b66d1eeca3
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Thu Mar 4 11:09:12 2021 +0200

    fuse: fix live lock in fuse_iget()
    
    commit 775c5033a0d164622d9d10dd0f0a5531639ed3ed upstream.
    
    Commit 5d069dbe8aaf ("fuse: fix bad inode") replaced make_bad_inode()
    in fuse_iget() with a private implementation fuse_make_bad().
    
    The private implementation fails to remove the bad inode from inode
    cache, so the retry loop with iget5_locked() finds the same bad inode
    and marks it bad forever.
    
    kmsg snip:
    
    [ ] rcu: INFO: rcu_sched self-detected stall on CPU
    ...
    [ ]  ? bit_wait_io+0x50/0x50
    [ ]  ? fuse_init_file_inode+0x70/0x70
    [ ]  ? find_inode.isra.32+0x60/0xb0
    [ ]  ? fuse_init_file_inode+0x70/0x70
    [ ]  ilookup5_nowait+0x65/0x90
    [ ]  ? fuse_init_file_inode+0x70/0x70
    [ ]  ilookup5.part.36+0x2e/0x80
    [ ]  ? fuse_init_file_inode+0x70/0x70
    [ ]  ? fuse_inode_eq+0x20/0x20
    [ ]  iget5_locked+0x21/0x80
    [ ]  ? fuse_inode_eq+0x20/0x20
    [ ]  fuse_iget+0x96/0x1b0
    
    Fixes: 5d069dbe8aaf ("fuse: fix bad inode")
    Cc: stable@vger.kernel.org # 5.10+
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d7888b2c4cd531e3c6593ffcb3d5160ebc1f52c
Author: Nicolas Morey-Chaisemartin <nmoreychaisemartin@suse.com>
Date:   Fri Feb 5 09:14:28 2021 +0100

    RDMA/srp: Fix support for unpopulated and unbalanced NUMA nodes
    
    commit 2b5715fc17386a6223490d5b8f08d031999b0c0b upstream.
    
    The current code computes a number of channels per SRP target and spreads
    them equally across all online NUMA nodes.  Each channel is then assigned
    a CPU within this node.
    
    In the case of unbalanced, or even unpopulated nodes, some channels do not
    get a CPU associated and thus do not get connected.  This causes the SRP
    connection to fail.
    
    This patch solves the issue by rewriting channel computation and
    allocation:
    
    - Drop channel to node/CPU association as it had no real effect on
      locality but added unnecessary complexity.
    
    - Tweak the number of channels allocated to reduce CPU contention when
      possible:
      - Up to one channel per CPU (instead of up to 4 by node)
      - At least 4 channels per node, unless ch_count module parameter is
        used.
    
    Link: https://lore.kernel.org/r/9cb4d9d3-30ad-2276-7eff-e85f7ddfb411@suse.com
    Signed-off-by: Nicolas Morey-Chaisemartin <nmoreychaisemartin@suse.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Cc: Yi Zhang <yi.zhang@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3672c3ce622e039d9469e5c875a2cbf2f59b93ba
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 11:44:42 2021 +0100

    bpf, selftests: Fix up some test_verifier cases for unprivileged
    
    commit 0a13e3537ea67452d549a6a80da3776d6b7dedb3 upstream.
    
    Fix up test_verifier error messages for the case where the original error
    message changed, or for the case where pointer alu errors differ between
    privileged and unprivileged tests. Also, add alternative tests for keeping
    coverage of the original verifier rejection error message (fp alu), and
    newly reject map_ptr += rX where rX == 0 given we now forbid alu on these
    types for unprivileged. All test_verifier cases pass after the change. The
    test case fixups were kept separate to ease backporting of core changes.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1010f17aaa78837bfe411aeb89343e648fb79f60
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 09:47:02 2021 +0100

    bpf: Add sanity check for upper ptr_limit
    
    commit 1b1597e64e1a610c7a96710fc4717158e98a08b3 upstream.
    
    Given we know the max possible value of ptr_limit at the time of retrieving
    the latter, add basic assertions, so that the verifier can bail out if
    anything looks odd and reject the program. Nothing triggered this so far,
    but it also does not hurt to have these.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a3504bf4006dd903eac93d37cdbad45726272b1
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 08:26:25 2021 +0100

    bpf: Simplify alu_limit masking for pointer arithmetic
    
    commit b5871dca250cd391885218b99cc015aca1a51aea upstream.
    
    Instead of having the mov32 with aux->alu_limit - 1 immediate, move this
    operation to retrieve_ptr_limit() instead to simplify the logic and to
    allow for subsequent sanity boundary checks inside retrieve_ptr_limit().
    This avoids in future that at the time of the verifier masking rewrite
    we'd run into an underflow which would not sign extend due to the nature
    of mov32 instruction.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac1b87a18c1ffbe3d093000b762121b5aae0a3f9
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 08:20:16 2021 +0100

    bpf: Fix off-by-one for area size in creating mask to left
    
    commit 10d2bb2e6b1d8c4576c56a748f697dbeb8388899 upstream.
    
    retrieve_ptr_limit() computes the ptr_limit for registers with stack and
    map_value type. ptr_limit is the size of the memory area that is still
    valid / in-bounds from the point of the current position and direction
    of the operation (add / sub). This size will later be used for masking
    the operation such that attempting out-of-bounds access in the speculative
    domain is redirected to remain within the bounds of the current map value.
    
    When masking to the right the size is correct, however, when masking to
    the left, the size is off-by-one which would lead to an incorrect mask
    and thus incorrect arithmetic operation in the non-speculative domain.
    Piotr found that if the resulting alu_limit value is zero, then the
    BPF_MOV32_IMM() from the fixup_bpf_calls() rewrite will end up loading
    0xffffffff into AX instead of sign-extending to the full 64 bit range,
    and as a result, this allows abuse for executing speculatively out-of-
    bounds loads against 4GB window of address space and thus extracting the
    contents of kernel memory via side-channel.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4d37eea1c641a9319baf34253cc373abb39d3e1
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 09:47:02 2021 +0100

    bpf: Prohibit alu ops for pointer types not defining ptr_limit
    
    commit f232326f6966cf2a1d1db7bc917a4ce5f9f55f76 upstream.
    
    The purpose of this patch is to streamline error propagation and in particular
    to propagate retrieve_ptr_limit() errors for pointer types that are not defining
    a ptr_limit such that register-based alu ops against these types can be rejected.
    
    The main rationale is that a gap has been identified by Piotr in the existing
    protection against speculatively out-of-bounds loads, for example, in case of
    ctx pointers, unprivileged programs can still perform pointer arithmetic. This
    can be abused to execute speculatively out-of-bounds loads without restrictions
    and thus extract contents of kernel memory.
    
    Fix this by rejecting unprivileged programs that attempt any pointer arithmetic
    on unprotected pointer types. The two affected ones are pointer to ctx as well
    as pointer to map. Field access to a modified ctx' pointer is rejected at a
    later point in time in the verifier, and 7c6967326267 ("bpf: Permit map_ptr
    arithmetic with opcode add and offset 0") only relevant for root-only use cases.
    Risk of unprivileged program breakage is considered very low.
    
    Fixes: 7c6967326267 ("bpf: Permit map_ptr arithmetic with opcode add and offset 0")
    Fixes: b2157399cc98 ("bpf: prevent out-of-bounds speculation")
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf93113d46f8556efe53fd386057fc892d79c4af
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Dec 31 17:41:54 2020 +0100

    crypto: x86/aes-ni-xts - use direct calls to and 4-way stride
    
    [ Upstream commit 86ad60a65f29dd862a11c22bb4b5be28d6c5cef1 ]
    
    The XTS asm helper arrangement is a bit odd: the 8-way stride helper
    consists of back-to-back calls to the 4-way core transforms, which
    are called indirectly, based on a boolean that indicates whether we
    are performing encryption or decryption.
    
    Given how costly indirect calls are on x86, let's switch to direct
    calls, and given how the 8-way stride doesn't really add anything
    substantial, use a 4-way stride instead, and make the asm core
    routine deal with any multiple of 4 blocks. Since 512 byte sectors
    or 4 KB blocks are the typical quantities XTS operates on, increase
    the stride exported to the glue helper to 512 bytes as well.
    
    As a result, the number of indirect calls is reduced from 3 per 64 bytes
    of in/output to 1 per 512 bytes of in/output, which produces a 65% speedup
    when operating on 1 KB blocks (measured on a Intel(R) Core(TM) i7-8650U CPU)
    
    Fixes: 9697fa39efd3f ("x86/retpoline/crypto: Convert crypto assembler indirect jumps")
    Tested-by: Eric Biggers <ebiggers@google.com> # x86_64
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcfab1a9aa40bda4bb401a58946e30bb77a6c371
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Fri Nov 27 10:44:52 2020 +0100

    crypto: aesni - Use TEST %reg,%reg instead of CMP $0,%reg
    
    [ Upstream commit 032d049ea0f45b45c21f3f02b542aa18bc6b6428 ]
    
    CMP $0,%reg can't set overflow flag, so we can use shorter TEST %reg,%reg
    instruction when only zero and sign flags are checked (E,L,LE,G,GE conditions).
    
    Signed-off-by: Uros Bizjak <ubizjak@gmail.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
