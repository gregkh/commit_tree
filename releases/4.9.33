commit 050639ef5810e8ad17fb6a426eff3c63e616350c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jun 17 06:43:47 2017 +0200

    Linux 4.9.33

commit bdc9a03fd9ce07caa7319e463db8cce0d76a4856
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Nov 25 14:03:55 2016 +0300

    sparc64: make string buffers large enough
    
    commit b5c3206190f1fddd100b3060eb15f0d775ffeab8 upstream.
    
    My static checker complains that if "lvl" is ULONG_MAX (this is 64 bit)
    then some of the strings will overflow.  I don't know if that's possible
    but it seems simple enough to make the buffers slightly larger.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Waldemar Brodkorb <wbx@openadk.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 933b9b11f7ca7153137ed8afccd4d32a5b73499f
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed May 31 17:42:36 2017 +0200

    drm/i915: Always recompute watermarks when distrust_bios_wm is set, v2.
    
    commit 4e3aed844547f63614363a386de126e6304e55fb upstream.
    
    On some systems there can be a race condition in which no crtc state is
    added to the first atomic commit. This results in all crtc's having a
    null DDB allocation, causing a FIFO underrun on any update until the
    first modeset.
    
    Changes since v1:
    - Do not take the connection_mutex, this is already done below.
    
    Reported-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Inspired-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: 98d39494d375 ("drm/i915/gen9: Compute DDB allocation at atomic
    check time (v4)")
    Cc: Mahesh Kumar <mahesh1.kumar@intel.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170531154236.27180-1-maarten.lankhorst@linux.intel.com
    Reviewed-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    (cherry picked from commit 367d73d2806085bb507ab44c1f532640917fd5ca)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 4f59a7a895c4658af84a8f7e88438973940e2a54
Author: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Date:   Thu Dec 15 19:47:34 2016 +0200

    drm/i915: Workaround VLV/CHV DSI scanline counter hardware fail
    
    commit 8f4d38099b3098eae75f7755e1801931f8141350 upstream.
    
    The scanline counter is bonkers on VLV/CHV DSI. The scanline counter
    increment is not lined up with the start of vblank like it is on
    every other platform and output type. This causes problems for
    both the vblank timestamping and atomic update vblank evasion.
    
    On my FFRD8 machine at least, the scanline counter increment
    happens about 1/3 of a scanline ahead of the start of vblank (which
    is where all register latching happens still). That means we can't
    trust the scanline counter to tell us whether we're in vblank or not
    while we're on that particular line. In order to keep vblank
    timestamping in working condition when called from the vblank irq,
    we'll leave scanline_offset at one, which means that the entire
    line containing the start of vblank is considered to be inside
    the vblank.
    
    For the vblank evasion we'll need to consider that entire line
    to be bad, since we can't tell whether the registers already
    got latched or not. And we can't actually use the start of vblank
    interrupt to get us past that line as the interrupt would fire
    too soon, and then we'd up waiting for the next start of vblank
    instead. One way around that would using the frame start
    interrupt instead since that wouldn't fire until the next
    scanline, but that would require some bigger changes in the
    interrupt code. So for simplicity we'll just poll until we get
    past the bad line.
    
    v2: Adjust the comments a bit
    
    Cc: Jonas Aaberg <cja@gmx.net>
    Tested-by: Jonas Aaberg <cja@gmx.net>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=99086
    Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20161215174734.28779-1-ville.syrjala@linux.intel.com
    Tested-by: Mika Kahola <mika.kahola@intel.com>
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>
    (cherry picked from commit ec1b4ee2834e66884e5b0d3d465f347ff212e372)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e1a4006ff9218057f2e47d3bf5415bdcdbcd3b6
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Mon May 15 14:11:03 2017 +0200

    s390/kvm: do not rely on the ILC on kvm host protection fauls
    
    commit c0e7bb38c07cbd8269549ee0a0566021a3c729de upstream.
    
    For most cases a protection exception in the host (e.g. copy
    on write or dirty tracking) on the sie instruction will indicate
    an instruction length of 4. Turns out that there are some corner
    cases (e.g. runtime instrumentation) where this is not necessarily
    true and the ILC is unpredictable.
    
    Let's replace our 4 byte rewind_pad with 3 byte nops to prepare for
    all possible ILCs.
    
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2f68276822cd3a09ed9ae23e5c5e1cd8259af65
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Jun 5 02:43:51 2017 -0700

    xtensa: don't use linux IRQ #0
    
    commit e5c86679d5e864947a52fb31e45a425dea3e7fa9 upstream.
    
    Linux IRQ #0 is reserved for error reporting and may not be used.
    Increase NR_IRQS for one additional slot and increase
    irq_domain_add_legacy parameter first_irq value to 1, so that linux
    IRQ #0 is not associated with hardware IRQ #0 in legacy IRQ domains.
    Introduce macro XTENSA_PIC_LINUX_IRQ for static translation of xtensa
    PIC hardware IRQ # to linux IRQ #. Use this macro in XTFPGA platform
    data definitions.
    
    This fixes inability to use hardware IRQ #0 in configurations that don't
    use device tree and allows for non-identity mapping between linux IRQ #
    and hardware IRQ #.
    
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57211e84dda0583b85326c07909c442ba950e0f0
Author: Ram Amrani <Ram.Amrani@Cavium.com>
Date:   Tue Jan 24 13:50:35 2017 +0200

    RDMA/qedr: Return max inline data in QP query result
    
    
    [ Upstream commit 59e8970b3798e4cbe575ed9cf4d53098760a2a86 ]
    
    Return the maximum supported amount of inline data, not the qp's current
    configured inline data size, when filling out the results of a query
    qp call.
    
    Signed-off-by: Ram Amrani <Ram.Amrani@cavium.com>
    Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5ea7aa57e2420725a283d2df893a2bbe54c5cfc
Author: Ram Amrani <Ram.Amrani@Cavium.com>
Date:   Tue Jan 24 13:50:37 2017 +0200

    RDMA/qedr: Don't spam dmesg if QP is in error state
    
    
    [ Upstream commit c78c31496111f497b4a03f955c100091185da8b6 ]
    
    It is normal to flush CQEs if the QP is in error state. Hence there's no
    use in printing a message per CQE to dmesg.
    
    Signed-off-by: Ram Amrani <Ram.Amrani@cavium.com>
    Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13a87589af5f9d85493917048f4243691d35f89c
Author: Ram Amrani <Ram.Amrani@Cavium.com>
Date:   Tue Jan 24 13:50:38 2017 +0200

    RDMA/qedr: Don't reset QP when queues aren't flushed
    
    
    [ Upstream commit 933e6dcaa0f65eb2f624ad760274020874a1f35e ]
    
    Fail QP state transition from error to reset if SQ/RQ are not empty
    and still in the process of flushing out the queued work entries.
    
    Signed-off-by: Ram Amrani <Ram.Amrani@cavium.com>
    Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbf61096e42c18e51b8e72a6dd4ceb276610c48c
Author: Ram Amrani <Ram.Amrani@Cavium.com>
Date:   Tue Jan 24 13:51:42 2017 +0200

    RDMA/qedr: Fix and simplify memory leak in PD alloc
    
    
    [ Upstream commit 9c1e0228ab35e52d30abf4b5629c28350833fbcb ]
    
    Free the PD if no internal resources were available. Move userspace
    code under the relevant 'if'.
    
    Signed-off-by: Ram Amrani <Ram.Amrani@cavium.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@cavium.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4fa249385b6db208032a5445cea05891001b7b4
Author: Ram Amrani <Ram.Amrani@Cavium.com>
Date:   Tue Jan 24 13:51:43 2017 +0200

    RDMA/qedr: Dispatch port active event from qedr_add
    
    
    [ Upstream commit f449c7a2d822c2d81b5bcb2c50eec80796766726 ]
    
    Relying on qede to trigger qedr on startup is problematic. When probing
    both if qedr loads slowly then qede can assume qedr is missing and not
    trigger it. This patch adds a triggering from qedr and protects against
    a race via an atomic bit.
    
    Signed-off-by: Ram Amrani <Ram.Amrani@cavium.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@cavium.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c47538f610160c8f9e3bd3e6816a624d28220b0c
Author: Liping Zhang <zlpnobody@gmail.com>
Date:   Sun Jan 22 22:10:32 2017 +0800

    netfilter: nft_log: restrict the log prefix length to 127
    
    
    [ Upstream commit 5ce6b04ce96896e8a79e6f60740ced911eaac7a4 ]
    
    First, log prefix will be truncated to NF_LOG_PREFIXLEN-1, i.e. 127,
    at nf_log_packet(), so the extra part is useless.
    
    Second, after adding a log rule with a very very long prefix, we will
    fail to dump the nft rules after this _special_ one, but acctually,
    they do exist. For example:
      # name_65000=$(printf "%0.sQ" {1..65000})
      # nft add rule filter output log prefix "$name_65000"
      # nft add rule filter output counter
      # nft add rule filter output counter
      # nft list chain filter output
      table ip filter {
          chain output {
              type filter hook output priority 0; policy accept;
          }
      }
    
    So now, restrict the log prefix length to NF_LOG_PREFIXLEN-1.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Liping Zhang <zlpnobody@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fefdd79403e89b0c673965343b92e2e01e2713a8
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Tue Jan 24 00:51:32 2017 +0100

    netfilter: nf_tables: fix set->nelems counting with no NLM_F_EXCL
    
    
    [ Upstream commit 35d0ac9070ef619e3bf44324375878a1c540387b ]
    
    If the element exists and no NLM_F_EXCL is specified, do not bump
    set->nelems, otherwise we leak one set element slot. This problem
    amplifies if the set is full since the abort path always decrements the
    counter for the -ENFILE case too, giving one spare extra slot.
    
    Fix this by moving set->nelems update to nft_add_set_elem() after
    successful element insertion. Moreover, remove the element if the set is
    full so there is no need to rely on the abort path to undo things
    anymore.
    
    Fixes: c016c7e45ddf ("netfilter: nf_tables: honor NLM_F_EXCL flag in set element insertion")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f68a45776a62fce560e4e28f89c5009895066ae1
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:43 2017 +0100

    tipc: fix nametbl_lock soft lockup at node/link events
    
    
    [ Upstream commit 93f955aad4bacee5acebad141d1a03cd51f27b4e ]
    
    We trigger a soft lockup as we grab nametbl_lock twice if the node
    has a pending node up/down or link up/down event while:
    - we process an incoming named message in tipc_named_rcv() and
      perform an tipc_update_nametbl().
    - we have pending backlog items in the name distributor queue
      during a nametable update using tipc_nametbl_publish() or
      tipc_nametbl_withdraw().
    
    The following are the call chain associated:
    tipc_named_rcv() Grabs nametbl_lock
       tipc_update_nametbl() (publish/withdraw)
         tipc_node_subscribe()/unsubscribe()
           tipc_node_write_unlock()
              << lockup occurs if an outstanding node/link event
                 exits, as we grabs nametbl_lock again >>
    
    tipc_nametbl_withdraw() Grab nametbl_lock
      tipc_named_process_backlog()
        tipc_update_nametbl()
          << rest as above >>
    
    The function tipc_node_write_unlock(), in addition to releasing the
    lock processes the outstanding node/link up/down events. To do this,
    we need to grab the nametbl_lock again leading to the lockup.
    
    In this commit we fix the soft lockup by introducing a fast variant of
    node_unlock(), where we just release the lock. We adapt the
    node_subscribe()/node_unsubscribe() to use the fast variants.
    
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d6e36d730ed6a328f793da1ac907c8d80ca2eb0
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:44 2017 +0100

    tipc: add subscription refcount to avoid invalid delete
    
    
    [ Upstream commit d094c4d5f5c7e1b225e94227ca3f007be3adc4e8 ]
    
    Until now, the subscribers keep track of the subscriptions using
    reference count at subscriber level. At subscription cancel or
    subscriber delete, we delete the subscription only if the timer
    was pending for the subscription. This approach is incorrect as:
    1. del_timer() is not SMP safe, if on CPU0 the check for pending
       timer returns true but CPU1 might schedule the timer callback
       thereby deleting the subscription. Thus when CPU0 is scheduled,
       it deletes an invalid subscription.
    2. We export tipc_subscrp_report_overlap(), which accesses the
       subscription pointer multiple times. Meanwhile the subscription
       timer can expire thereby freeing the subscription and we might
       continue to access the subscription pointer leading to memory
       violations.
    
    In this commit, we introduce subscription refcount to avoid deleting
    an invalid subscription.
    
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8df4f86a3fa3ca546955f696d7b602fc1eb3d6
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:45 2017 +0100

    tipc: fix connection refcount error
    
    
    [ Upstream commit fc0adfc8fd18b61b6f7a3f28b429e134d6f3a008 ]
    
    Until now, the generic server framework maintains the connection
    id's per subscriber in server's conn_idr. At tipc_close_conn, we
    remove the connection id from the server list, but the connection is
    valid until we call the refcount cleanup. Hence we have a window
    where the server allocates the same connection to an new subscriber
    leading to inconsistent reference count. We have another refcount
    warning we grab the refcount in tipc_conn_lookup() for connections
    with flag with CF_CONNECTED not set. This usually occurs at shutdown
    when the we stop the topology server and withdraw TIPC_CFG_SRV
    publication thereby triggering a withdraw message to subscribers.
    
    In this commit, we:
    1. remove the connection from the server list at recount cleanup.
    2. grab the refcount for a connection only if CF_CONNECTED is set.
    
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7a552e771cccacf4da117b93088e3cf25b1e038
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:47 2017 +0100

    tipc: ignore requests when the connection state is not CONNECTED
    
    
    [ Upstream commit 4c887aa65d38633885010277f3482400681be719 ]
    
    In tipc_conn_sendmsg(), we first queue the request to the outqueue
    followed by the connection state check. If the connection is not
    connected, we should not queue this message.
    
    In this commit, we reject the messages if the connection state is
    not CF_CONNECTED.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2552e2c11575c72114a2f8902a7488c810c41691
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue Jun 21 14:24:33 2016 +0530

    ARCv2: smp-boot: wake_flag polling by non-Masters needs to be uncached
    
    
    [ Upstream commit 78f824d4312a8944f5340c6b161bba3bf2c81096 ]
    
    This is needed on HS38 cores, for setting up IO-Coherency aperture properly
    
    The polling could perturb the caches and coherecy fabric which could be
    wrong in the small window when Master is setting up IOC aperture etc
    in arc_cache_init()
    
    We do it only for ARCv2 based builds to not affect EZChip ARCompact
    based platform.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cb6045ec40d90d8074dd072c2ec9d0fc7b91956
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Jan 12 14:30:29 2017 -0800

    ARC: smp-boot: Decouple Non masters waiting API from jump to entry point
    
    
    [ Upstream commit bf02454a741b58682a82c314a9a46bed930ed2f7 ]
    
    For run-on-reset SMP configs, non master cores call a routine which
    waits until Master gives it a "go" signal (currently using a shared
    mem flag). The same routine then jumps off the well known entry point of
    all non Master cores i.e. @first_lines_of_secondary
    
    This patch moves out the last part into one single place in early boot
    code.
    
    This is better in terms of absraction (the wait API only waits) and
    returns, leaving out the "jump off to" part.
    
    In actual implementation this requires some restructuring of the early
    boot code as well as Master now jumps to BSS setup explicitly,
    vs. falling thru into it before.
    
    Technically this patch doesn't cause any functional change, it just
    moves the ugly #ifdef'ry from assembly code to "C"
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae36f6a65af6f4eaca01cc5b68d8ecb266dbcc17
Author: Stefan Hajnoczi <stefanha@redhat.com>
Date:   Thu Jan 19 10:43:53 2017 +0000

    vhost/vsock: handle vhost_vq_init_access() error
    
    
    [ Upstream commit 0516ffd88fa0d006ee80389ce14a9ca5ae45e845 ]
    
    Propagate the error when vhost_vq_init_access() fails and set
    vq->private_data to NULL.
    
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b13b3b706a9dc03dd1a1c31f8268cd5193c1858c
Author: Don Zickus <dzickus@redhat.com>
Date:   Tue Jan 24 15:17:53 2017 -0800

    kernel/watchdog: prevent false hardlockup on overloaded system
    
    
    [ Upstream commit b94f51183b0617e7b9b4fb4137d4cf1cab7547c2 ]
    
    On an overloaded system, it is possible that a change in the watchdog
    threshold can be delayed long enough to trigger a false positive.
    
    This can easily be achieved by having a cpu spinning indefinitely on a
    task, while another cpu updates watchdog threshold.
    
    What happens is while trying to park the watchdog threads, the hrtimers
    on the other cpus trigger and reprogram themselves with the new slower
    watchdog threshold.  Meanwhile, the nmi watchdog is still programmed
    with the old faster threshold.
    
    Because the one cpu is blocked, it prevents the thread parking on the
    other cpus from completing, which is needed to shutdown the nmi watchdog
    and reprogram it correctly.  As a result, a false positive from the nmi
    watchdog is reported.
    
    Fix this by setting a park_in_progress flag to block all lockups until
    the parking is complete.
    
    Fix provided by Ulrich Obergfell.
    
    [akpm@linux-foundation.org: s/park_in_progress/watchdog_park_in_progress/]
    Link: http://lkml.kernel.org/r/1481041033-192236-1-git-send-email-dzickus@redhat.com
    Signed-off-by: Don Zickus <dzickus@redhat.com>
    Reviewed-by: Aaron Tomlin <atomlin@redhat.com>
    Cc: Ulrich Obergfell <uobergfe@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ce66ee6aec12f38ab6992233e92b9960b55e0c6
Author: Babu Moger <babu.moger@oracle.com>
Date:   Wed Dec 14 15:06:21 2016 -0800

    kernel/watchdog.c: move shared definitions to nmi.h
    
    
    [ Upstream commit 249e52e35580fcfe5dad53a7dcd7c1252788749c ]
    
    Patch series "Clean up watchdog handlers", v2.
    
    This is an attempt to cleanup watchdog handlers.  Right now,
    kernel/watchdog.c implements both softlockup and hardlockup detectors.
    Softlockup code is generic.  Hardlockup code is arch specific.  Some
    architectures don't use hardlockup detectors.  They use their own
    watchdog detectors.  To make both these combination work, we have
    numerous #ifdefs in kernel/watchdog.c.
    
    We are trying here to make these handlers independent of each other.
    Also provide an interface for architectures to implement their own
    handlers.  watchdog_nmi_enable and watchdog_nmi_disable will be defined
    as weak such that architectures can override its definitions.
    
    Thanks to Don Zickus for his suggestions.
    Here are our previous discussions
    http://www.spinics.net/lists/sparclinux/msg16543.html
    http://www.spinics.net/lists/sparclinux/msg16441.html
    
    This patch (of 3):
    
    Move shared macros and definitions to nmi.h so that watchdog.c, new file
    watchdog_hld.c or any other architecture specific handler can use those
    definitions.
    
    Link: http://lkml.kernel.org/r/1478034826-43888-2-git-send-email-babu.moger@oracle.com
    Signed-off-by: Babu Moger <babu.moger@oracle.com>
    Acked-by: Don Zickus <dzickus@redhat.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Yaowei Bai <baiyaowei@cmss.chinamobile.com>
    Cc: Aaron Tomlin <atomlin@redhat.com>
    Cc: Ulrich Obergfell <uobergfe@redhat.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
    Cc: Josh Hunt <johunt@akamai.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b969a240448bfd8e6b0fb180a405e5cc881bf503
Author: Babu Moger <babu.moger@oracle.com>
Date:   Wed Dec 14 15:06:24 2016 -0800

    kernel/watchdog.c: move hardlockup detector to separate file
    
    
    [ Upstream commit 73ce0511c43686095efd2f65ef564aab952e07bc ]
    
    Separate hardlockup code from watchdog.c and move it to watchdog_hld.c.
    It is mostly straight forward.  Remove everything inside
    CONFIG_HARDLOCKUP_DETECTORS.  This code will go to file watchdog_hld.c.
    Also update the makefile accordigly.
    
    Link: http://lkml.kernel.org/r/1478034826-43888-3-git-send-email-babu.moger@oracle.com
    Signed-off-by: Babu Moger <babu.moger@oracle.com>
    Acked-by: Don Zickus <dzickus@redhat.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Yaowei Bai <baiyaowei@cmss.chinamobile.com>
    Cc: Aaron Tomlin <atomlin@redhat.com>
    Cc: Ulrich Obergfell <uobergfe@redhat.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
    Cc: Josh Hunt <johunt@akamai.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbd9eee1aaaf2cb40b2bc7b794d4a6f7afc7870a
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Tue Jan 24 15:17:59 2017 -0800

    userfaultfd: fix SIGBUS resulting from false rwsem wakeups
    
    
    [ Upstream commit 15a77c6fe494f4b1757d30cd137fe66ab06a38c3 ]
    
    With >=32 CPUs the userfaultfd selftest triggered a graceful but
    unexpected SIGBUS because VM_FAULT_RETRY was returned by
    handle_userfault() despite the UFFDIO_COPY wasn't completed.
    
    This seems caused by rwsem waking the thread blocked in
    handle_userfault() and we can't run up_read() before the wait_event
    sequence is complete.
    
    Keeping the wait_even sequence identical to the first one, would require
    running userfaultfd_must_wait() again to know if the loop should be
    repeated, and it would also require retaking the rwsem and revalidating
    the whole vma status.
    
    It seems simpler to wait the targeted wakeup so that if false wakeups
    materialize we still wait for our specific wakeup event, unless of
    course there are signals or the uffd was released.
    
    Debug code collecting the stack trace of the wakeup showed this:
    
      $ ./userfaultfd 100 99999
      nr_pages: 25600, nr_pages_per_cpu: 800
      bounces: 99998, mode: racing ver poll, userfaults: 32 35 90 232 30 138 69 82 34 30 139 40 40 31 20 19 43 13 15 28 27 38 21 43 56 22 1 17 31 8 4 2
      bounces: 99997, mode: rnd ver poll, Bus error (core dumped)
    
        save_stack_trace+0x2b/0x50
        try_to_wake_up+0x2a6/0x580
        wake_up_q+0x32/0x70
        rwsem_wake+0xe0/0x120
        call_rwsem_wake+0x1b/0x30
        up_write+0x3b/0x40
        vm_mmap_pgoff+0x9c/0xc0
        SyS_mmap_pgoff+0x1a9/0x240
        SyS_mmap+0x22/0x30
        entry_SYSCALL_64_fastpath+0x1f/0xbd
        0xffffffffffffffff
        FAULT_FLAG_ALLOW_RETRY missing 70
      CPU: 24 PID: 1054 Comm: userfaultfd Tainted: G        W       4.8.0+ #30
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.3-0-ge2fc41e-prebuilt.qemu-project.org 04/01/2014
      Call Trace:
        dump_stack+0xb8/0x112
        handle_userfault+0x572/0x650
        handle_mm_fault+0x12cb/0x1520
        __do_page_fault+0x175/0x500
        trace_do_page_fault+0x61/0x270
        do_async_page_fault+0x19/0x90
        async_page_fault+0x25/0x30
    
    This always happens when the main userfault selftest thread is running
    clone() while glibc runs either mprotect or mmap (both taking mmap_sem
    down_write()) to allocate the thread stack of the background threads,
    while locking/userfault threads already run at full throttle and are
    susceptible to false wakeups that may cause handle_userfault() to return
    before than expected (which results in graceful SIGBUS at the next
    attempt).
    
    This was reproduced only with >=32 CPUs because the loop to start the
    thread where clone() is too quick with fewer CPUs, while with 32 CPUs
    there's already significant activity on ~32 locking and userfault
    threads when the last background threads are started with clone().
    
    This >=32 CPUs SMP race condition is likely reproducible only with the
    selftest because of the much heavier userfault load it generates if
    compared to real apps.
    
    We'll have to allow "one more" VM_FAULT_RETRY for the WP support and a
    patch floating around that provides it also hidden this problem but in
    reality only is successfully at hiding the problem.
    
    False wakeups could still happen again the second time
    handle_userfault() is invoked, even if it's a so rare race condition
    that getting false wakeups twice in a row is impossible to reproduce.
    This full fix is needed for correctness, the only alternative would be
    to allow VM_FAULT_RETRY to be returned infinitely.  With this fix the WP
    support can stick to a strict "one more" VM_FAULT_RETRY logic (no need
    of returning it infinite times to avoid the SIGBUS).
    
    Link: http://lkml.kernel.org/r/20170111005535.13832-2-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-by: Shubham Kumar Sharma <shubham.kumar.sharma@oracle.com>
    Tested-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Michael Rapoport <RAPOPORT@il.ibm.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9618fba264999372c641b5cb3db777c6a216caa5
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 24 15:18:07 2017 -0800

    proc: add a schedule point in proc_pid_readdir()
    
    
    [ Upstream commit 3ba4bceef23206349d4130ddf140819b365de7c8 ]
    
    We have seen proc_pid_readdir() invocations holding cpu for more than 50
    ms.  Add a cond_resched() to be gentle with other tasks.
    
    [akpm@linux-foundation.org: coding style fix]
    Link: http://lkml.kernel.org/r/1484238380.15816.42.camel@edumazet-glaptop3.roam.corp.google.com
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e23b1c05a50ffc7cabe12b9bc4fdfa55e32d9614
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Tue Jan 24 15:18:43 2017 -0800

    frv: add missing atomic64 operations
    
    
    [ Upstream commit 4180c4c170a5a33b9987b314d248a9d572d89ab0 ]
    
    Some more atomic64 operations were missing and as a result frv
    allmodconfig was failing.  Add the missing operations.
    
    Link: http://lkml.kernel.org/r/1485193844-12850-1-git-send-email-sudip.mukherjee@codethink.co.uk
    Signed-off-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 918684681dc207da5de3344b17814a2b50d677f9
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Tue Jan 24 15:18:21 2017 -0800

    frv: add atomic64_add_unless()
    
    
    [ Upstream commit 545d58f677b21401f6de1ac12c25cc109f903ace ]
    
    The build of frv allmodconfig was failing with the error:
    lib/atomic64_test.c:209:9: error:
    
            implicit declaration of function 'atomic64_add_unless'
    
    All the atomic64 operations were defined in frv, but
    atomic64_add_unless() was not done.
    
    Implement atomic64_add_unless() as done in other arches.
    
    Link: http://lkml.kernel.org/r/1484781236-6698-1-git-send-email-sudipm.mukherjee@gmail.com
    Signed-off-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Cc: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 013bbbc3e9025411e1327e825e736a501ba044f3
Author: Coly Li <colyli@suse.de>
Date:   Tue Jan 24 15:18:46 2017 -0800

    romfs: use different way to generate fsid for BLOCK or MTD
    
    
    [ Upstream commit f598f82e204ec0b17797caaf1b0311c52d43fb9a ]
    
    Commit 8a59f5d25265 ("fs/romfs: return f_fsid for statfs(2)") generates
    a 64bit id from sb->s_bdev->bd_dev.  This is only correct when romfs is
    defined with CONFIG_ROMFS_ON_BLOCK.  If romfs is only defined with
    CONFIG_ROMFS_ON_MTD, sb->s_bdev is NULL, referencing sb->s_bdev->bd_dev
    will triger an oops.
    
    Richard Weinberger points out that when CONFIG_ROMFS_BACKED_BY_BOTH=y,
    both CONFIG_ROMFS_ON_BLOCK and CONFIG_ROMFS_ON_MTD are defined.
    Therefore when calling huge_encode_dev() to generate a 64bit id, I use
    the follow order to choose parameter,
    
    - CONFIG_ROMFS_ON_BLOCK defined
      use sb->s_bdev->bd_dev
    - CONFIG_ROMFS_ON_BLOCK undefined and CONFIG_ROMFS_ON_MTD defined
      use sb->s_dev when,
    - both CONFIG_ROMFS_ON_BLOCK and CONFIG_ROMFS_ON_MTD undefined
      leave id as 0
    
    When CONFIG_ROMFS_ON_MTD is defined and sb->s_mtd is not NULL, sb->s_dev
    is set to a device ID generated by MTD_BLOCK_MAJOR and mtd index,
    otherwise sb->s_dev is 0.
    
    This is a try-best effort to generate a uniq file system ID, if all the
    above conditions are not meet, f_fsid of this romfs instance will be 0.
    Generally only one romfs can be built on single MTD block device, this
    method is enough to identify multiple romfs instances in a computer.
    
    Link: http://lkml.kernel.org/r/1482928596-115155-1-git-send-email-colyli@suse.de
    Signed-off-by: Coly Li <colyli@suse.de>
    Reported-by: Nong Li <nongli1031@gmail.com>
    Tested-by: Nong Li <nongli1031@gmail.com>
    Cc: Richard Weinberger <richard.weinberger@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 093d494c6d1db5d8bda26b64212edac62cb7d49a
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Jan 24 15:18:49 2017 -0800

    mn10300: fix build error of missing fpu_save()
    
    
    [ Upstream commit 3705ccfdd1e8b539225ce20e3925a945cc788d67 ]
    
    When CONFIG_FPU is not enabled on arch/mn10300, <asm/switch_to.h> causes
    a build error with a call to fpu_save():
    
      kernel/built-in.o: In function `.L410':
      core.c:(.sched.text+0x28a): undefined reference to `fpu_save'
    
    Fix this by including <asm/fpu.h> in <asm/switch_to.h> so that an empty
    static inline fpu_save() is defined.
    
    Link: http://lkml.kernel.org/r/dc421c4f-4842-4429-1b99-92865c2f24b6@infradead.org
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Reviewed-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e4cafca06bfc6477b237161b7ddea7d14228803
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jan 24 09:18:58 2017 -0600

    usb: musb: Fix external abort on non-linefetch for musb_irq_work()
    
    
    [ Upstream commit 3ba7b7795b7e8889af1377904c55c7fae9e0c775 ]
    
    While testing musb host mode cable plugging on a BeagleBone, I came across this
    error:
    
    Unhandled fault: external abort on non-linefetch (0x1008) at 0xd1dcfc60
    ...
    [<bf668390>] (musb_default_readb [musb_hdrc]) from [<bf668578>] (musb_irq_work+0x1c/0x180 [musb_hdrc])
    [<bf668578>] (musb_irq_work [musb_hdrc]) from [<c0156554>] (process_one_work+0x2b4/0x808)
    [<c0156554>] (process_one_work) from [<c015767c>] (worker_thread+0x3c/0x550)
    [<c015767c>] (worker_thread) from [<c015d568>] (kthread+0x104/0x148)
    [<c015d568>] (kthread) from [<c01078d0>] (ret_from_fork+0x14/0x24)
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb72eca1333c374e6eefff7f6e99917c44c4f231
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 24 14:01:53 2017 +0800

    sctp: sctp_addr_id2transport should verify the addr before looking up assoc
    
    
    [ Upstream commit 6f29a130613191d3c6335169febe002cba00edf5 ]
    
    sctp_addr_id2transport is a function for sockopt to look up assoc by
    address. As the address is from userspace, it can be a v4-mapped v6
    address. But in sctp protocol stack, it always handles a v4-mapped
    v6 address as a v4 address. So it's necessary to convert it to a v4
    address before looking up assoc by address.
    
    This patch is to fix it by calling sctp_verify_addr in which it can do
    this conversion before calling sctp_endpoint_lookup_assoc, just like
    what sctp_sendmsg and __sctp_connect do for the address from users.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf812fe92683cd52581824dc2c6767cbf04a72fb
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jan 24 14:05:16 2017 +0800

    sctp: sctp gso should set feature with NETIF_F_SG when calling skb_segment
    
    
    [ Upstream commit 5207f3996338e1db71363fe381c81aaf1e54e4e3 ]
    
    Now sctp gso puts segments into skb's frag_list, then processes these
    segments in skb_segment. But skb_segment handles them only when gs is
    enabled, as it's in the same branch with skb's frags.
    
    Although almost all the NICs support sg other than some old ones, but
    since commit 1e16aa3ddf86 ("net: gso: use feature flag argument in all
    protocol gso handlers"), features &= skb->dev->hw_enc_features, and
    xfrm_output_gso call skb_segment with features = 0, which means sctp
    gso would call skb_segment with sg = 0, and skb_segment would not work
    as expected.
    
    This patch is to fix it by setting features param with NETIF_F_SG when
    calling skb_segment so that it can go the right branch to process the
    skb's frag_list.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12a583ddf02a976080f36f75139a9167a9975e68
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed Jan 25 02:55:09 2017 -0500

    bnxt_en: Fix RTNL lock usage on bnxt_get_port_module_status().
    
    
    [ Upstream commit 90c694bb71819fb5bd3501ac397307d7e41ddeca ]
    
    bnxt_get_port_module_status() calls bnxt_update_link() which expects
    RTNL to be held.  In bnxt_sp_task() that does not hold RTNL, we need to
    call it with a prior call to bnxt_rtnl_lock_sp() and the call needs to
    be moved to the end of bnxt_sp_task().
    
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66deb409251c6e88de9cdffc5a952670fe544410
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed Jan 25 02:55:08 2017 -0500

    bnxt_en: Fix RTNL lock usage on bnxt_update_link().
    
    
    [ Upstream commit 0eaa24b971ae251ae9d3be23f77662a655532063 ]
    
    bnxt_update_link() is called from multiple code paths.  Most callers,
    such as open, ethtool, already hold RTNL.  Only the caller bnxt_sp_task()
    does not.  So it is a bug to take RTNL inside bnxt_update_link().
    
    Fix it by removing the RTNL inside bnxt_update_link().  The function
    now expects the caller to always hold RTNL.
    
    In bnxt_sp_task(), call bnxt_rtnl_lock_sp() before calling
    bnxt_update_link().  We also need to move the call to the end of
    bnxt_sp_task() since it will be clearing the BNXT_STATE_IN_SP_TASK bit.
    
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e89ffe41e9a67901034accd1d19dbeefb390fafb
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed Nov 16 21:13:08 2016 -0500

    bnxt_en: Enhance autoneg support.
    
    
    [ Upstream commit 286ef9d64ea7435a1e323d12b44a309e15cbff0e ]
    
    On some dual port NICs, the speed setting on one port can affect the
    available speed on the other port.  Add logic to detect these changes
    and adjust the advertised speed settings when necessary.
    
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 710ea9b028de2c5cd0565407d31b633972074182
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Wed Jan 25 02:55:07 2017 -0500

    bnxt_en: Fix bnxt_reset() in the slow path task.
    
    
    [ Upstream commit a551ee94ea723b4af9b827c7460f108bc13425ee ]
    
    In bnxt_sp_task(), we set a bit BNXT_STATE_IN_SP_TASK so that bnxt_close()
    will synchronize and wait for bnxt_sp_task() to finish.  Some functions
    in bnxt_sp_task() require us to clear BNXT_STATE_IN_SP_TASK and then
    acquire rtnl_lock() to prevent race conditions.
    
    There are some bugs related to this logic. This patch refactors the code
    to have common bnxt_rtnl_lock_sp() and bnxt_rtnl_unlock_sp() to handle
    the RTNL and the clearing/setting of the bit.  Multiple functions will
    need the same logic.  We also need to move bnxt_reset() to the end of
    bnxt_sp_task().  Functions that clear BNXT_STATE_IN_SP_TASK must be the
    last functions to be called in bnxt_sp_task().  The common scheme will
    handle the condition properly.
    
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb7188295d18dcfbca1586d176f88113e2eae7f5
Author: John Crispin <john@phrozen.org>
Date:   Wed Jan 25 09:20:55 2017 +0100

    net-next: ethernet: mediatek: change the compatible string
    
    
    [ Upstream commit 8b901f6bbcf12a20e43105d161bedde093431e61 ]
    
    When the binding was defined, I was not aware that mt2701 was an earlier
    version of the SoC. For sake of consistency, the ethernet driver should
    use mt2701 inside the compat string as this is the earliest SoC with the
    ethernet core.
    
    The ethernet driver is currently of no real use until we finish and
    upstream the DSA driver. There are no users of this binding yet. It should
    be safe to fix this now before it is too late and we need to provide
    backward compatibility for the mt7623-eth compat string.
    
    Reported-by: Sean Wang <sean.wang@mediatek.com>
    Signed-off-by: John Crispin <john@phrozen.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9ace99c4bb097a44b20b3e6d356e4dd9b5f0c02
Author: hayeswang <hayeswang@realtek.com>
Date:   Thu Jan 26 09:38:32 2017 +0800

    r8152: avoid start_xmit to schedule napi when napi is disabled
    
    
    [ Upstream commit de9bf29dd6e4a8a874cb92f8901aed50a9d0b1d3 ]
    
    Stop the tx when the napi is disabled to prevent napi_schedule() is
    called.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1a7106b3b0149c263998d801619f3023af03234
Author: hayeswang <hayeswang@realtek.com>
Date:   Fri Jan 20 14:33:55 2017 +0800

    r8152: fix rtl8152_post_reset function
    
    
    [ Upstream commit 2c561b2b728ca4013e76d6439bde2c137503745e ]
    
    The rtl8152_post_reset() should sumbit rx urb and interrupt transfer,
    otherwise the rx wouldn't work and the linking change couldn't be
    detected.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9507910ca46d5b549198a6bf1787e3db5b3a651b
Author: hayeswang <hayeswang@realtek.com>
Date:   Thu Jan 26 09:38:33 2017 +0800

    r8152: re-schedule napi for tx
    
    
    [ Upstream commit 248b213ad908b88db15941202ef7cb7eb137c1a0 ]
    
    Re-schedule napi after napi_complete() for tx, if it is necessay.
    
    In r8152_poll(), if the tx is completed after tx_bottom() and before
    napi_complete(), the scheduling of napi would be lost. Then, no
    one handles the next tx until the next napi_schedule() is called.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4242f0bce47e744d28b3c98c34f5c792fefb62ef
Author: hayeswang <hayeswang@realtek.com>
Date:   Thu Jan 26 09:38:34 2017 +0800

    r8152: check rx after napi is enabled
    
    
    [ Upstream commit 7489bdadb7d17d3c81e39b85688500f700beb790 ]
    
    Schedule the napi after napi_enable() for rx, if it is necessary.
    
    If the rx is completed when napi is disabled, the sheduling of napi
    would be lost. Then, no one handles the rx packet until next napi
    is scheduled.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 993ba7ffcf6e0aa5e4b3ed193a99fc8f4e073325
Author: hayeswang <hayeswang@realtek.com>
Date:   Thu Jan 26 09:38:31 2017 +0800

    r8152: avoid start_xmit to call napi_schedule during autosuspend
    
    
    [ Upstream commit 26afec39306926654e9cd320f19bbf3685bb0997 ]
    
    Adjust the setting of the flag of SELECTIVE_SUSPEND to prevent start_xmit()
    from calling napi_schedule() directly during runtime suspend.
    
    After calling napi_disable() or clearing the flag of WORK_ENABLE,
    scheduling the napi is useless.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6149abe7f4042e5720544d4e5675d7a45a827ce7
Author: Parav Pandit <parav@mellanox.com>
Date:   Thu Jan 19 09:55:08 2017 -0600

    nvmet-rdma: Fix missing dma sync to nvme data structures
    
    
    [ Upstream commit 748ff8408f8e208f279ba221e5c12612fbb4dddb ]
    
    This patch performs dma sync operations on nvme_command
    and nvme_completion.
    
    nvme_command is synced
    (a) on receiving of the recv queue completion for cpu access.
    (b) before posting recv wqe back to rdma adapter for device access.
    
    nvme_completion is synced
    (a) on receiving of the recv queue completion of associated
    nvme_command for cpu access.
    (b) before posting send wqe to rdma adapter for device access.
    
    This patch is generated for git://git.infradead.org/nvme-fabrics.git
    Branch: nvmf-4.10
    
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a0d41409b4dbfb50243ddee7a8b62ba838c5295
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Thu Jan 26 15:14:52 2017 -0500

    nfs: Fix "Don't increment lock sequence ID after NFS4ERR_MOVED"
    
    
    [ Upstream commit 406dab8450ec76eca88a1af2fc15d18a2b36ca49 ]
    
    Lock sequence IDs are bumped in decode_lock by calling
    nfs_increment_seqid(). nfs_increment_sequid() does not use the
    seqid_mutating_err() function fixed in commit 059aa7348241 ("Don't
    increment lock sequence ID after NFS4ERR_MOVED").
    
    Fixes: 059aa7348241 ("Don't increment lock sequence ID after ...")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Tested-by: Xuan Qi <xuan.qi@oracle.com>
    Cc: stable@vger.kernel.org # v3.7+
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1626825968346dc975640cff8f823a5fc92a6c6
Author: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Date:   Thu Jan 26 14:29:27 2017 +0100

    ravb: unmap descriptors when freeing rings
    
    
    [ Upstream commit a47b70ea86bdeb3091341f5ae3ef580f1a1ad822 ]
    
    "swiotlb buffer is full" errors occur after repeated initialisation of a
    device - f.e. suspend/resume or ip link set up/down. This is because memory
    mapped using dma_map_single() in ravb_ring_format() and ravb_start_xmit()
    is not released.  Resolve this problem by unmapping descriptors when
    freeing rings.
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    [simon: reworked]
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Acked-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47c362f147aaee88c7da3fdce6e99212376bbe44
Author: Y.C. Chen <yc_chen@aspeedtech.com>
Date:   Thu Jan 26 09:45:40 2017 +0800

    drm/ast: Fixed system hanged if disable P2A
    
    
    [ Upstream commit 6c971c09f38704513c426ba6515f22fb3d6c87d5 ]
    
    The original ast driver will access some BMC configuration through P2A bridge
    that can be disabled since AST2300 and after.
    It will cause system hanged if P2A bridge is disabled.
    Here is the update to fix it.
    
    Signed-off-by: Y.C. Chen <yc_chen@aspeedtech.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfa4d2e461dab77476f4570bf9ac0213b6cbe484
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Mon May 15 12:04:31 2017 +0300

    drm/nouveau: Fix drm poll_helper handling
    
    
    [ Upstream commit 9a2eba337cacefc95b97c2726e3efdd435b3460e ]
    
    Commit cae9ff036eea effectively disabled the drm poll_helper by checking
    the wrong flag to see if the driver should enable the poll or not:
    mode_config.poll_enabled is only set to true by poll_init and it is not
    indicating if the poll is enabled or not.
    nouveau_display_create() will initialize the poll and going to disable it
    right away. After poll_init() the mode_config.poll_enabled will be true,
    but the poll itself is disabled.
    
    To avoid the race caused by calling the poll_enable() from different paths,
    this patch will enable the poll from one place, in the
    nouveau_display_hpd_work().
    
    In case the pm_runtime is disabled we will enable the poll in
    nouveau_drm_load() once.
    
    Fixes: cae9ff036eea ("drm/nouveau: Don't enabling polling twice on runtime resume")
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Reviewed-by: Lyude <lyude@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c94e2edacea7f3f3567e14d5cb8bee58ffc536d9
Author: Lyude Paul <lyude@redhat.com>
Date:   Wed Jan 11 21:25:23 2017 -0500

    drm/nouveau: Don't enabling polling twice on runtime resume
    
    
    [ Upstream commit cae9ff036eea577856d5b12860b4c79c5e71db4a ]
    
    As it turns out, on cards that actually have CRTCs on them we're already
    calling drm_kms_helper_poll_enable(drm_dev) from
    nouveau_display_resume() before we call it in
    nouveau_pmops_runtime_resume(). This leads us to accidentally trying to
    enable polling twice, which results in a potential deadlock between the
    RPM locks and drm_dev->mode_config.mutex if we end up trying to enable
    polling the second time while output_poll_execute is running and holding
    the mode_config lock. As such, make sure we only enable polling in
    nouveau_pmops_runtime_resume() if we need to.
    
    This fixes hangs observed on the ThinkPad W541
    
    Signed-off-by: Lyude <lyude@redhat.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Kilian Singer <kilian.singer@quantumtechnology.info>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: David Airlie <airlied@redhat.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7a29cf6c34a7873eb8e92b9a60b1a863ea72f6d
Author: Lyude Paul <lyude@redhat.com>
Date:   Wed Jan 11 21:25:24 2017 -0500

    drm/nouveau: Handle fbcon suspend/resume in seperate worker
    
    
    [ Upstream commit 15266ae38fe09dae07bd8812cb7a7717b1e1d992 ]
    
    Resuming from RPM can happen while already holding
    dev->mode_config.mutex. This means we can't actually handle fbcon in
    any RPM resume workers, since restoring fbcon requires grabbing
    dev->mode_config.mutex again. So move the fbcon suspend/resume code into
    it's own worker, and rely on that instead to avoid deadlocking.
    
    This fixes more deadlocks for runtime suspending the GPU on the ThinkPad
    W541. Reproduction recipe:
    
     - Get a machine with both optimus and a nvidia card with connectors
       attached to it
     - Wait for the nvidia GPU to suspend
     - Attempt to manually reprobe any of the connectors on the nvidia GPU
       using sysfs
     - *deadlock*
    
    [airlied: use READ_ONCE to address Hans's comment]
    
    Signed-off-by: Lyude <lyude@redhat.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Kilian Singer <kilian.singer@quantumtechnology.info>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: David Airlie <airlied@redhat.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2beb1a9dd824bcf442e025cbf7fd1e3b4cf8db2
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 21 17:50:54 2016 +0100

    drm/nouveau: Rename acpi_work to hpd_work
    
    
    [ Upstream commit 81280d0e24e76c35f40f997af26c779bcb10b04d ]
    
    We need to call drm_helper_hpd_irq_event() on resume to properly detect
    monitor connection / disconnection on some laptops. For runtime-resume
    (which gets called on resume from normal suspend too) we must call
    drm_helper_hpd_irq_event() from a workqueue to avoid a deadlock.
    
    Rename acpi_work to hpd_work, and move it out of the #ifdef CONFIG_ACPI
    blocks to make it suitable for generic work.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef66745a1bd231a2c53639de27e4d6bcd00be4cc
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Nov 9 18:17:44 2016 +0100

    drm/nouveau: Intercept ACPI_VIDEO_NOTIFY_PROBE
    
    
    [ Upstream commit 3a6536c51d5db3adf58dcd466a3aee6233b58544 ]
    
    Various notebooks with nvidia GPUs generate an ACPI_VIDEO_NOTIFY_PROBE
    acpi-video event when an external device gets plugged in (and again on
    modesets on that connector), the default behavior in the acpi-video
    driver for this is to send a KEY_SWITCHVIDEOMODE evdev event, which
    causes e.g. gnome-settings-daemon to ask us to rescan the connectors
    (good), but also causes g-s-d to switch to mirror mode on a newly plugged
    monitor rather then using the monitor to extend the desktop (bad)
    as KEY_SWITCHVIDEOMODE is supposed to switch between extend the desktop
    vs mirror mode.
    
    More troublesome are the repeated ACPI_VIDEO_NOTIFY_PROBE events on
    changing the mode on the connector, which cause g-s-d to switch
    between mirror/extend mode, which causes a new ACPI_VIDEO_NOTIFY_PROBE
    event and we end up with an endless loop.
    
    This commit fixes this by adding an acpi notifier block handler to
    nouveau_display.c to intercept ACPI_VIDEO_NOTIFY_PROBE and:
    
    1) Wake-up runtime suspended GPUs and call drm_helper_hpd_irq_event()
       on them, this is necessary in some cases for the GPU to detect connector
       hotplug events while runtime suspended
    2) Return NOTIFY_BAD to stop acpi-video from emitting a bogus
       KEY_SWITCHVIDEOMODE key-press event
    
    There already is another acpi notifier block handler registered in
    drivers/gpu/drm/nouveau/nvkm/engine/device/acpi.c, but that is not
    suitable since that one gets unregistered on runtime suspend, and
    we also want to intercept ACPI_VIDEO_NOTIFY_PROBE when runtime suspended.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb846414674ce1accb0e64fff88287f541422312
Author: Andreas Schultz <aschultz@tpip.net>
Date:   Fri Jan 27 10:40:56 2017 +0100

    gtp: add genl family modules alias
    
    
    [ Upstream commit ab729823ec16aef384f09fd2cffe0b3d3f6e6cba ]
    
    Auto-load the module when userspace asks for the gtp netlink
    family.
    
    Signed-off-by: Andreas Schultz <aschultz@tpip.net>
    Acked-by: Harald Welte <laforge@netfilter.org>
    Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dddbfcd96e265bc6e28d456d48e9fab4c57b232
Author: Sean Nyekjaer <sean@geanix.com>
Date:   Fri Jan 27 08:46:23 2017 +0100

    net: phy: micrel: add support for KSZ8795
    
    
    [ Upstream commit 9d162ed69f51cbd9ee5a0c7e82aba7acc96362ff ]
    
    This is adds support for the PHYs in the KSZ8795 5port managed switch.
    
    It will allow to detect the link between the switch and the soc
    and uses the same read_status functions as the KSZ8873MLL switch.
    
    Signed-off-by: Sean Nyekjaer <sean.nyekjaer@prevas.dk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f970b437e86a13c13b958d5fefdfc256fa7266a
Author: Helge Deller <deller@gmx.de>
Date:   Tue Jan 3 22:55:50 2017 +0100

    parisc, parport_gsc: Fixes for printk continuation lines
    
    
    [ Upstream commit 83b5d1e3d3013dbf90645a5d07179d018c8243fa ]
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4038524f7fef3beb83d61c54b428a4fd3b2d4388
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Thu Jan 12 13:04:01 2017 +0200

    net/mlx5: Return EOPNOTSUPP when failing to get steering name-space
    
    
    [ Upstream commit eff596da48784316ccb83bef82bc1213b512d5e0 ]
    
    When we fail to retrieve a hardware steering name-space, the returned error
    code should say that this operation is not supported. Align the various
    places in the driver where this call is made to this convention.
    
    Also, make sure to warn when we fail to retrieve a SW (ANCHOR) name-space.
    
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b445ecbdff838e534077a62133f1e9b6354b3840
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Wed Jan 11 19:39:42 2017 +0200

    net/mlx5: E-Switch, Err when retrieving steering name-space fails
    
    
    [ Upstream commit 5403dc703ff277f8a2a12a83ac820750485f13b3 ]
    
    Make sure to return error when we failed retrieving the FDB steering
    name space. Also, while around, correctly print the error when mode
    change revert fails in the warning message.
    
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reported-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bcbe747629e2b1ec7f162878d8969613a1c65c6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 29 13:50:06 2017 -0800

    drm/i915: Check for NULL i915_vma in intel_unpin_fb_obj()
    
    
    [ Upstream commit 39cb2c9a316e77f6dfba96c543e55b6672d5a37e ]
    
    I've seen this trigger twice now, where the i915_gem_object_to_ggtt()
    call in intel_unpin_fb_obj() returns NULL, resulting in an oops
    immediately afterwards as the (inlined) call to i915_vma_unpin_fence()
    tries to dereference it.
    
    It seems to be some race condition where the object is going away at
    shutdown time, since both times happened when shutting down the X
    server.  The call chains were different:
    
     - VT ioctl(KDSETMODE, KD_TEXT):
    
        intel_cleanup_plane_fb+0x5b/0xa0 [i915]
        drm_atomic_helper_cleanup_planes+0x6f/0x90 [drm_kms_helper]
        intel_atomic_commit_tail+0x749/0xfe0 [i915]
        intel_atomic_commit+0x3cb/0x4f0 [i915]
        drm_atomic_commit+0x4b/0x50 [drm]
        restore_fbdev_mode+0x14c/0x2a0 [drm_kms_helper]
        drm_fb_helper_restore_fbdev_mode_unlocked+0x34/0x80 [drm_kms_helper]
        drm_fb_helper_set_par+0x2d/0x60 [drm_kms_helper]
        intel_fbdev_set_par+0x18/0x70 [i915]
        fb_set_var+0x236/0x460
        fbcon_blank+0x30f/0x350
        do_unblank_screen+0xd2/0x1a0
        vt_ioctl+0x507/0x12a0
        tty_ioctl+0x355/0xc30
        do_vfs_ioctl+0xa3/0x5e0
        SyS_ioctl+0x79/0x90
        entry_SYSCALL_64_fastpath+0x13/0x94
    
     - i915 unpin_work workqueue:
    
        intel_unpin_work_fn+0x58/0x140 [i915]
        process_one_work+0x1f1/0x480
        worker_thread+0x48/0x4d0
        kthread+0x101/0x140
    
    and this patch purely papers over the issue by adding a NULL pointer
    check and a WARN_ON_ONCE() to avoid the oops that would then generally
    make the machine unresponsive.
    
    Other callers of i915_gem_object_to_ggtt() seem to also check for the
    returned pointer being NULL and warn about it, so this clearly has
    happened before in other places.
    
    [ Reported it originally to the i915 developers on Jan 8, applying the
      ugly workaround on my own now after triggering the problem for the
      second time with no feedback.
    
      This is likely to be the same bug reported as
    
         https://bugs.freedesktop.org/show_bug.cgi?id=98829
         https://bugs.freedesktop.org/show_bug.cgi?id=99134
    
      which has a patch for the underlying problem, but it hasn't gotten to
      me, so I'm applying the workaround. ]
    
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6549f36278cf03bfc8ecf7daa1ae77055398c13
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Jan 28 01:07:30 2017 +0300

    net: adaptec: starfire: add checks for dma mapping errors
    
    
    [ Upstream commit d1156b489fa734d1af763d6a07b1637c01bb0aed ]
    
    init_ring(), refill_rx_ring() and start_tx() don't check
    if mapping dma memory succeed.
    The patch adds the checks and failure handling.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a15bbf44ab2fbde580b00005b3c1922c4904d6ab
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Mon Jan 23 15:15:32 2017 +0800

    pinctrl: berlin-bg4ct: fix the value for "sd1a" of pin SCRD0_CRD_PRES
    
    
    [ Upstream commit e82d02580af45663fad6d3596e4344c606e81e10 ]
    
    This should be a typo.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 326fdffd7078257706e4126c256e144bd3859eff
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jan 12 17:15:56 2017 +0100

    drm: Don't race connector registration
    
    
    [ Upstream commit e6e7b48b295afa5a5ab440de0a94d9ad8b3ce2d0 ]
    
    I was under the misconception that the sysfs dev stuff can be fully
    set up, and then registered all in one step with device_add. That's
    true for properties and property groups, but not for parents and child
    devices. Those must be fully registered before you can register a
    child.
    
    Add a bit of tracking to make sure that asynchronous mst connector
    hotplugging gets this right. For consistency we rely upon the implicit
    barriers of the connector->mutex, which is taken anyway, to ensure
    that at least either the connector or device registration call will
    work out.
    
    Mildly tested since I can't reliably reproduce this on my mst box
    here.
    
    Reported-by: Dave Hansen <dave.hansen@intel.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1484237756-2720-1-git-send-email-daniel.vetter@ffwll.ch
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82b6693bd4153dc437255dabaa4f9d0d0f8c9da2
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Dec 18 14:35:45 2016 +0100

    drm: prevent double-(un)registration for connectors
    
    
    [ Upstream commit e73ab00e9a0f1731f34d0620a9c55f5c30c4ad4e ]
    
    If we're unlucky then the registration from a hotplugged connector
    might race with the final registration step on driver load. And since
    MST topology discover is asynchronous that's even somewhat likely.
    
    v2: Also update the kerneldoc for @registered!
    
    v3: Review from Chris:
    - Improve kerneldoc for late_register/early_unregister callbacks.
    - Use mutex_destroy.
    
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Sean Paul <seanpaul@chromium.org>
    Reported-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20161218133545.2106-1-daniel.vetter@ffwll.ch
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d934fe02ba176b5e88d8b67d603cd94fc930f3ce
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Tue Jan 10 09:44:54 2017 -0200

    cec: fix wrong last_la determination
    
    
    [ Upstream commit f9f96fc10c09ca16e336854c08bc1563eed97985 ]
    
    Due to an incorrect condition the last_la used for the initial attempt at
    claiming a logical address could be wrong.
    
    The last_la wasn't converted to a mask when ANDing with type2mask, so that
    test was broken.
    
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62614714e30a963ff325d7b5547b24d650153817
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Jan 26 19:24:07 2017 +0200

    pinctrl: baytrail: Rectify debounce support (part 2)
    
    
    [ Upstream commit 827e1579e1d5cb66e340e7be1944b825b542bbdf ]
    
    The commit 04ff5a095d66 ("pinctrl: baytrail: Rectify debounce support")
    almost fixes the logic of debuonce but missed couple of things, i.e.
    typo in mask when disabling debounce and lack of enabling it back.
    
    This patch addresses above issues.
    
    Reported-by: Jean Delvare <jdelvare@suse.de>
    Fixes: 04ff5a095d66 ("pinctrl: baytrail: Rectify debounce support")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3564d41e5c84e5c71ec1172958cbafc19575a550
Author: Arseny Solokha <asolokha@kb.kras.ru>
Date:   Sun Jan 29 19:52:20 2017 +0700

    gianfar: synchronize DMA API usage by free_skb_rx_queue w/ gfar_new_page
    
    
    [ Upstream commit 4af0e5bb95ee3ba5ea4bd7dbb94e1648a5279cc9 ]
    
    In spite of switching to paged allocation of Rx buffers, the driver still
    called dma_unmap_single() in the Rx queues tear-down path.
    
    The DMA region unmapping code in free_skb_rx_queue() basically predates
    the introduction of paged allocation to the driver. While being refactored,
    it apparently hasn't reflected the change in the DMA API usage by its
    counterpart gfar_new_page().
    
    As a result, setting an interface to the DOWN state now yields the following:
    
      # ip link set eth2 down
      fsl-gianfar ffe24000.ethernet: DMA-API: device driver frees DMA memory with wrong function [device address=0x000000001ecd0000] [size=40]
      ------------[ cut here ]------------
      WARNING: CPU: 1 PID: 189 at lib/dma-debug.c:1123 check_unmap+0x8e0/0xa28
      CPU: 1 PID: 189 Comm: ip Tainted: G           O    4.9.5 #1
      task: dee73400 task.stack: dede2000
      NIP: c02101e8 LR: c02101e8 CTR: c0260d74
      REGS: dede3bb0 TRAP: 0700   Tainted: G           O     (4.9.5)
      MSR: 00021000 <CE,ME>  CR: 28002222  XER: 00000000
    
      GPR00: c02101e8 dede3c60 dee73400 000000b6 dfbd033c dfbd36c4 1f622000 dede2000
      GPR08: 00000007 c05b1634 1f622000 00000000 22002484 100a9904 00000000 00000000
      GPR16: 00000000 db4c849c 00000002 db4c8480 00000001 df142240 db4c84bc 00000000
      GPR24: c0706148 c0700000 00029000 c07552e8 c07323b4 dede3cb8 c07605e0 db535540
      NIP [c02101e8] check_unmap+0x8e0/0xa28
      LR [c02101e8] check_unmap+0x8e0/0xa28
      Call Trace:
      [dede3c60] [c02101e8] check_unmap+0x8e0/0xa28 (unreliable)
      [dede3cb0] [c02103b8] debug_dma_unmap_page+0x88/0x9c
      [dede3d30] [c02dffbc] free_skb_resources+0x2c4/0x404
      [dede3d80] [c02e39b4] gfar_close+0x24/0xc8
      [dede3da0] [c0361550] __dev_close_many+0xa0/0xf8
      [dede3dd0] [c03616f0] __dev_close+0x2c/0x4c
      [dede3df0] [c036b1b8] __dev_change_flags+0xa0/0x174
      [dede3e10] [c036b2ac] dev_change_flags+0x20/0x60
      [dede3e30] [c03e130c] devinet_ioctl+0x540/0x824
      [dede3e90] [c0347dcc] sock_ioctl+0x134/0x298
      [dede3eb0] [c0111814] do_vfs_ioctl+0xac/0x854
      [dede3f20] [c0111ffc] SyS_ioctl+0x40/0x74
      [dede3f40] [c000f290] ret_from_syscall+0x0/0x3c
      --- interrupt: c01 at 0xff45da0
          LR = 0xff45cd0
      Instruction dump:
      811d001c 7c66482e 813d0020 9061000c 807f000c 5463103a 7cc6182e 3c60c052
      386309ac 90c10008 4cc63182 4826b845 <0fe00000> 4bfffa60 3c80c052 388402c4
      ---[ end trace 695ae6d7ac1d0c47 ]---
      Mapped at:
       [<c02e22a8>] gfar_alloc_rx_buffs+0x178/0x248
       [<c02e3ef0>] startup_gfar+0x368/0x570
       [<c036aeb4>] __dev_open+0xdc/0x150
       [<c036b1b8>] __dev_change_flags+0xa0/0x174
       [<c036b2ac>] dev_change_flags+0x20/0x60
    
    Even though the issue was discovered in 4.9 kernel, the code in question
    is identical in the current net and net-next trees.
    
    Fixes: 75354148ce69 ("gianfar: Add paged allocation and Rx S/G")
    Signed-off-by: Arseny Solokha <asolokha@kb.kras.ru>
    Acked-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 581e4003bf126ef479734a25f7f57c365d7c790a
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Mon Jan 30 15:11:45 2017 +0200

    net/mlx4_core: Avoid command timeouts during VF driver device shutdown
    
    
    [ Upstream commit d585df1c5ccf995fcee910705ad7a9cdd11d4152 ]
    
    Some Hypervisors detach VFs from VMs by instantly causing an FLR event
    to be generated for a VF.
    
    In the mlx4 case, this will cause that VF's comm channel to be disabled
    before the VM has an opportunity to invoke the VF device's "shutdown"
    method.
    
    The result is that the VF driver on the VM will experience a command
    timeout during the shutdown process when the Hypervisor does not deliver
    a command-completion event to the VM.
    
    To avoid FW command timeouts on the VM when the driver's shutdown method
    is invoked, we detect the absence of the VF's comm channel at the very
    start of the shutdown process. If the comm-channel has already been
    disabled, we cause all FW commands during the device shutdown process to
    immediately return success (and thus avoid all command timeouts).
    
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c33f1bd7f28999950918912b25d2ed9514669edf
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Tue May 23 21:54:09 2017 -0400

    drm/nouveau/fence/g84-: protect against concurrent access to semaphore buffers
    
    
    [ Upstream commit 96692b097ba76d0c637ae8af47b29c73da33c9d0 ]
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf336eea809d10ea9df4e7096d7d916c3d07eeaf
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Tue May 23 21:54:08 2017 -0400

    drm/nouveau: prevent userspace from deleting client object
    
    
    [ Upstream commit c966b6279f610a24ac1d42dcbe30e10fa61220b2 ]
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16f733d8db525e0c3519888071b2e644b12717f7
Author: Dimitris Michailidis <dmichail@google.com>
Date:   Tue May 23 21:54:07 2017 -0400

    ipv6: fix flow labels when the traffic class is non-0
    
    
    [ Upstream commit 90427ef5d2a4b9a24079889bf16afdcdaebc4240 ]
    
    ip6_make_flowlabel() determines the flow label for IPv6 packets. It's
    supposed to be passed a flow label, which it returns as is if non-0 and
    in some other cases, otherwise it calculates a new value.
    
    The problem is callers often pass a flowi6.flowlabel, which may also
    contain traffic class bits. If the traffic class is non-0
    ip6_make_flowlabel() mistakes the non-0 it gets as a flow label and
    returns the whole thing. Thus it can return a 'flow label' longer than
    20b and the low 20b of that is typically 0 resulting in packets with 0
    label. Moreover, different packets of a flow may be labeled differently.
    For a TCP flow with ECN non-payload and payload packets get different
    labels as exemplified by this pair of consecutive packets:
    
    (pure ACK)
    Internet Protocol Version 6, Src: 2002:af5:11a3::, Dst: 2002:af5:11a2::
        0110 .... = Version: 6
        .... 0000 0000 .... .... .... .... .... = Traffic Class: 0x00 (DSCP: CS0, ECN: Not-ECT)
            .... 0000 00.. .... .... .... .... .... = Differentiated Services Codepoint: Default (0)
            .... .... ..00 .... .... .... .... .... = Explicit Congestion Notification: Not ECN-Capable Transport (0)
        .... .... .... 0001 1100 1110 0100 1001 = Flow Label: 0x1ce49
        Payload Length: 32
        Next Header: TCP (6)
    
    (payload)
    Internet Protocol Version 6, Src: 2002:af5:11a3::, Dst: 2002:af5:11a2::
        0110 .... = Version: 6
        .... 0000 0010 .... .... .... .... .... = Traffic Class: 0x02 (DSCP: CS0, ECN: ECT(0))
            .... 0000 00.. .... .... .... .... .... = Differentiated Services Codepoint: Default (0)
            .... .... ..10 .... .... .... .... .... = Explicit Congestion Notification: ECN-Capable Transport codepoint '10' (2)
        .... .... .... 0000 0000 0000 0000 0000 = Flow Label: 0x00000
        Payload Length: 688
        Next Header: TCP (6)
    
    This patch allows ip6_make_flowlabel() to be passed more than just a
    flow label and has it extract the part it really wants. This was simpler
    than modifying the callers. With this patch packets like the above become
    
    Internet Protocol Version 6, Src: 2002:af5:11a3::, Dst: 2002:af5:11a2::
        0110 .... = Version: 6
        .... 0000 0000 .... .... .... .... .... = Traffic Class: 0x00 (DSCP: CS0, ECN: Not-ECT)
            .... 0000 00.. .... .... .... .... .... = Differentiated Services Codepoint: Default (0)
            .... .... ..00 .... .... .... .... .... = Explicit Congestion Notification: Not ECN-Capable Transport (0)
        .... .... .... 1010 1111 1010 0101 1110 = Flow Label: 0xafa5e
        Payload Length: 32
        Next Header: TCP (6)
    
    Internet Protocol Version 6, Src: 2002:af5:11a3::, Dst: 2002:af5:11a2::
        0110 .... = Version: 6
        .... 0000 0010 .... .... .... .... .... = Traffic Class: 0x02 (DSCP: CS0, ECN: ECT(0))
            .... 0000 00.. .... .... .... .... .... = Differentiated Services Codepoint: Default (0)
            .... .... ..10 .... .... .... .... .... = Explicit Congestion Notification: ECN-Capable Transport codepoint '10' (2)
        .... .... .... 1010 1111 1010 0101 1110 = Flow Label: 0xafa5e
        Payload Length: 688
        Next Header: TCP (6)
    
    Signed-off-by: Dimitris Michailidis <dmichail@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0542f979124662c219e0c8c66f6ad1e784bf20dc
Author: David Howells <dhowells@redhat.com>
Date:   Tue May 23 21:54:06 2017 -0400

    FS-Cache: Initialise stores_lock in netfs cookie
    
    
    [ Upstream commit 62deb8187d116581c88c69a2dd9b5c16588545d4 ]
    
    Initialise the stores_lock in fscache netfs cookies.  Technically, it
    shouldn't be necessary, since the netfs cookie is an index and stores no
    data, but initialising it anyway adds insignificant overhead.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Acked-by: Steve Dickson <steved@redhat.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34f1a4626badd6d88f07f222378ba304330be717
Author: David Howells <dhowells@redhat.com>
Date:   Tue May 23 21:54:05 2017 -0400

    fscache: Clear outstanding writes when disabling a cookie
    
    
    [ Upstream commit 6bdded59c8933940ac7e5b416448276ac89d1144 ]
    
    fscache_disable_cookie() needs to clear the outstanding writes on the
    cookie it's disabling because they cannot be completed after.
    
    Without this, fscache_nfs_open_file() gets stuck because it disables the
    cookie when the file is opened for writing but can't uncache the pages till
    afterwards - otherwise there's a race between the open routine and anyone
    who already has it open R/O and is still reading from it.
    
    Looking in /proc/pid/stack of the offending process shows:
    
    [<ffffffffa0142883>] __fscache_wait_on_page_write+0x82/0x9b [fscache]
    [<ffffffffa014336e>] __fscache_uncache_all_inode_pages+0x91/0xe1 [fscache]
    [<ffffffffa01740fa>] nfs_fscache_open_file+0x59/0x9e [nfs]
    [<ffffffffa01ccf41>] nfs4_file_open+0x17f/0x1b8 [nfsv4]
    [<ffffffff8117350e>] do_dentry_open+0x16d/0x2b7
    [<ffffffff811743ac>] vfs_open+0x5c/0x65
    [<ffffffff81184185>] path_openat+0x785/0x8fb
    [<ffffffff81184343>] do_filp_open+0x48/0x9e
    [<ffffffff81174710>] do_sys_open+0x13b/0x1cb
    [<ffffffff811747b9>] SyS_open+0x19/0x1b
    [<ffffffff81001c44>] do_syscall_64+0x80/0x17a
    [<ffffffff8165c2da>] return_from_SYSCALL_64+0x0/0x7a
    [<ffffffffffffffff>] 0xffffffffffffffff
    
    Reported-by: Jianhong Yin <jiyin@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Jeff Layton <jlayton@redhat.com>
    Acked-by: Steve Dickson <steved@redhat.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11696dcea28222967af5ed8105695ec1751fe061
Author: David Howells <dhowells@redhat.com>
Date:   Tue May 23 21:54:04 2017 -0400

    fscache: Fix dead object requeue
    
    
    [ Upstream commit e26bfebdfc0d212d366de9990a096665d5c0209a ]
    
    Under some circumstances, an fscache object can become queued such that it
    fscache_object_work_func() can be called once the object is in the
    OBJECT_DEAD state.  This results in the kernel oopsing when it tries to
    invoke the handler for the state (which is hard coded to 0x2).
    
    The way this comes about is something like the following:
    
     (1) The object dispatcher is processing a work state for an object.  This
         is done in workqueue context.
    
     (2) An out-of-band event comes in that isn't masked, causing the object to
         be queued, say EV_KILL.
    
     (3) The object dispatcher finishes processing the current work state on
         that object and then sees there's another event to process, so,
         without returning to the workqueue core, it processes that event too.
         It then follows the chain of events that initiates until we reach
         OBJECT_DEAD without going through a wait state (such as
         WAIT_FOR_CLEARANCE).
    
         At this point, object->events may be 0, object->event_mask will be 0
         and oob_event_mask will be 0.
    
     (4) The object dispatcher returns to the workqueue processor, and in due
         course, this sees that the object's work item is still queued and
         invokes it again.
    
     (5) The current state is a work state (OBJECT_DEAD), so the dispatcher
         jumps to it - resulting in an OOPS.
    
    When I'm seeing this, the work state in (1) appears to have been either
    LOOK_UP_OBJECT or CREATE_OBJECT (object->oob_table is
    fscache_osm_lookup_oob).
    
    The window for (2) is very small:
    
     (A) object->event_mask is cleared whilst the event dispatch process is
         underway - though there's no memory barrier to force this to the top
         of the function.
    
         The window, therefore is from the time the object was selected by the
         workqueue processor and made requeueable to the time the mask was
         cleared.
    
     (B) fscache_raise_event() will only queue the object if it manages to set
         the event bit and the corresponding event_mask bit was set.
    
         The enqueuement is then deferred slightly whilst we get a ref on the
         object and get the per-CPU variable for workqueue congestion.  This
         slight deferral slightly increases the probability by allowing extra
         time for the workqueue to make the item requeueable.
    
    Handle this by giving the dead state a processor function and checking the
    for the dead state address rather than seeing if the processor function is
    address 0x2.  The dead state processor function can then set a flag to
    indicate that it's occurred and give a warning if it occurs more than once
    per object.
    
    If this race occurs, an oops similar to the following is seen (note the RIP
    value):
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000002
    IP: [<0000000000000002>] 0x1
    PGD 0
    Oops: 0010 [#1] SMP
    Modules linked in: ...
    CPU: 17 PID: 16077 Comm: kworker/u48:9 Not tainted 3.10.0-327.18.2.el7.x86_64 #1
    Hardware name: HP ProLiant DL380 Gen9/ProLiant DL380 Gen9, BIOS P89 12/27/2015
    Workqueue: fscache_object fscache_object_work_func [fscache]
    task: ffff880302b63980 ti: ffff880717544000 task.ti: ffff880717544000
    RIP: 0010:[<0000000000000002>]  [<0000000000000002>] 0x1
    RSP: 0018:ffff880717547df8  EFLAGS: 00010202
    RAX: ffffffffa0368640 RBX: ffff880edf7a4480 RCX: dead000000200200
    RDX: 0000000000000002 RSI: 00000000ffffffff RDI: ffff880edf7a4480
    RBP: ffff880717547e18 R08: 0000000000000000 R09: dfc40a25cb3a4510
    R10: dfc40a25cb3a4510 R11: 0000000000000400 R12: 0000000000000000
    R13: ffff880edf7a4510 R14: ffff8817f6153400 R15: 0000000000000600
    FS:  0000000000000000(0000) GS:ffff88181f420000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000002 CR3: 000000000194a000 CR4: 00000000001407e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
    Stack:
     ffffffffa0363695 ffff880edf7a4510 ffff88093f16f900 ffff8817faa4ec00
     ffff880717547e60 ffffffff8109d5db 00000000faa4ec18 0000000000000000
     ffff8817faa4ec18 ffff88093f16f930 ffff880302b63980 ffff88093f16f900
    Call Trace:
     [<ffffffffa0363695>] ? fscache_object_work_func+0xa5/0x200 [fscache]
     [<ffffffff8109d5db>] process_one_work+0x17b/0x470
     [<ffffffff8109e4ac>] worker_thread+0x21c/0x400
     [<ffffffff8109e290>] ? rescuer_thread+0x400/0x400
     [<ffffffff810a5acf>] kthread+0xcf/0xe0
     [<ffffffff810a5a00>] ? kthread_create_on_node+0x140/0x140
     [<ffffffff816460d8>] ret_from_fork+0x58/0x90
     [<ffffffff810a5a00>] ? kthread_create_on_node+0x140/0x140
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Jeremy McNicoll <jeremymc@redhat.com>
    Tested-by: Frank Sorenson <sorenson@redhat.com>
    Tested-by: Benjamin Coddington <bcodding@redhat.com>
    Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4d2d05ffb8b3c4286feeaade7f27a3b18c59d18
Author: Dimitris Michailidis <dmichail@google.com>
Date:   Tue May 23 21:54:02 2017 -0400

    net: fix ndo_features_check/ndo_fix_features comment ordering
    
    
    [ Upstream commit 1a2a14444d32b89b28116daea86f63ced1716668 ]
    
    Commit cdba756f5803a2 ("net: move ndo_features_check() close to
    ndo_start_xmit()") inadvertently moved the doc comment for
    .ndo_fix_features instead of .ndo_features_check. Fix the comment
    ordering.
    
    Fixes: cdba756f5803a2 ("net: move ndo_features_check() close to ndo_start_xmit()")
    Signed-off-by: Dimitris Michailidis <dmichail@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a6ebd3f963c9d2fda47714562606a495fee0b2c
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Feb 8 19:05:26 2017 -0800

    net: phy: Fix PHY module checks and NULL deref in phy_attach_direct()
    
    
    [ Upstream commit 6d9f66ac7fec2a6ccd649e5909806dfe36f1fc25 ]
    
    The Generic PHY drivers gets assigned after we checked that the current
    PHY driver is NULL, so we need to check a few things before we can
    safely dereference d->driver. This would be causing a NULL deference to
    occur when a system binds to the Generic PHY driver. Update
    phy_attach_direct() to do the following:
    
    - grab the driver module reference after we have assigned the Generic
      PHY drivers accordingly, and remember we came from the generic PHY
      path
    
    - update the error path to clean up the module reference in case the
      Generic PHY probe function fails
    
    - split the error path involving phy_detacht() to avoid double free/put
      since phy_detach() does all the clean up
    
    - finally, have phy_detach() drop the module reference count before we
      call device_release_driver() for the Generic PHY driver case
    
    Fixes: cafe8df8b9bc ("net: phy: Fix lack of reference count on PHY driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea14fabd43a5e52739d55fda2a95d7218fd700ee
Author: Mao Wenan <maowenan@huawei.com>
Date:   Tue May 23 21:54:00 2017 -0400

    net: phy: Fix lack of reference count on PHY driver
    
    
    [ Upstream commit cafe8df8b9bc9aa3dffa827c1a6757c6cd36f657 ]
    
    There is currently no reference count being held on the PHY driver,
    which makes it possible to remove the PHY driver module while the PHY
    state machine is running and polling the PHY. This could cause crashes
    similar to this one to show up:
    
    [   43.361162] BUG: unable to handle kernel NULL pointer dereference at 0000000000000140
    [   43.361162] IP: phy_state_machine+0x32/0x490
    [   43.361162] PGD 59dc067
    [   43.361162] PUD 0
    [   43.361162]
    [   43.361162] Oops: 0000 [#1] SMP
    [   43.361162] Modules linked in: dsa_loop [last unloaded: broadcom]
    [   43.361162] CPU: 0 PID: 1299 Comm: kworker/0:3 Not tainted 4.10.0-rc5+ #415
    [   43.361162] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
    BIOS Ubuntu-1.8.2-1ubuntu2 04/01/2014
    [   43.361162] Workqueue: events_power_efficient phy_state_machine
    [   43.361162] task: ffff880006782b80 task.stack: ffffc90000184000
    [   43.361162] RIP: 0010:phy_state_machine+0x32/0x490
    [   43.361162] RSP: 0018:ffffc90000187e18 EFLAGS: 00000246
    [   43.361162] RAX: 0000000000000000 RBX: ffff8800059e53c0 RCX:
    ffff880006a15c60
    [   43.361162] RDX: ffff880006782b80 RSI: 0000000000000000 RDI:
    ffff8800059e5428
    [   43.361162] RBP: ffffc90000187e48 R08: ffff880006a15c40 R09:
    0000000000000000
    [   43.361162] R10: 0000000000000000 R11: 0000000000000000 R12:
    ffff8800059e5428
    [   43.361162] R13: ffff8800059e5000 R14: 0000000000000000 R15:
    ffff880006a15c40
    [   43.361162] FS:  0000000000000000(0000) GS:ffff880006a00000(0000)
    knlGS:0000000000000000
    [   43.361162] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   43.361162] CR2: 0000000000000140 CR3: 0000000005979000 CR4:
    00000000000006f0
    [   43.361162] Call Trace:
    [   43.361162]  process_one_work+0x1b4/0x3e0
    [   43.361162]  worker_thread+0x43/0x4d0
    [   43.361162]  ? __schedule+0x17f/0x4e0
    [   43.361162]  kthread+0xf7/0x130
    [   43.361162]  ? process_one_work+0x3e0/0x3e0
    [   43.361162]  ? kthread_create_on_node+0x40/0x40
    [   43.361162]  ret_from_fork+0x29/0x40
    [   43.361162] Code: 56 41 55 41 54 4c 8d 67 68 53 4c 8d af 40 fc ff ff
    48 89 fb 4c 89 e7 48 83 ec 08 e8 c9 9d 27 00 48 8b 83 60 ff ff ff 44 8b
    73 98 <48> 8b 90 40 01 00 00 44 89 f0 48 85 d2 74 08 4c 89 ef ff d2 8b
    
    Keep references on the PHY driver module right before we are going to
    utilize it in phy_attach_direct(), and conversely when we don't use it
    anymore in phy_detach().
    
    Signed-off-by: Mao Wenan <maowenan@huawei.com>
    [florian: rebase, rework commit message]
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fba4f5b70f304fd05f257bc0cbf0a236e144ac5
Author: Stanislaw Gruszka <sgruszka@redhat.com>
Date:   Tue May 23 21:53:59 2017 -0400

    ethtool: do not vzalloc(0) on registers dump
    
    
    [ Upstream commit 3808d34838184fd29088d6b3a364ba2f1c018fb6 ]
    
    If ->get_regs_len() callback return 0, we allocate 0 bytes of memory,
    what print ugly warning in dmesg, which can be found further below.
    
    This happen on mac80211 devices where ieee80211_get_regs_len() just
    return 0 and driver only fills ethtool_regs structure and actually
    do not provide any dump. However I assume this can happen on other
    drivers i.e. when for some devices driver provide regs dump and for
    others do not. Hence preventing to to print warning in ethtool code
    seems to be reasonable.
    
    ethtool: vmalloc: allocation failure: 0 bytes, mode:0x24080c2(GFP_KERNEL|__GFP_HIGHMEM|__GFP_ZERO)
    <snip>
    Call Trace:
    [<ffffffff813bde47>] dump_stack+0x63/0x8c
    [<ffffffff811b0a1f>] warn_alloc+0x13f/0x170
    [<ffffffff811f0476>] __vmalloc_node_range+0x1e6/0x2c0
    [<ffffffff811f0874>] vzalloc+0x54/0x60
    [<ffffffff8169986c>] dev_ethtool+0xb4c/0x1b30
    [<ffffffff816adbb1>] dev_ioctl+0x181/0x520
    [<ffffffff816714d2>] sock_do_ioctl+0x42/0x50
    <snip>
    Mem-Info:
    active_anon:435809 inactive_anon:173951 isolated_anon:0
     active_file:835822 inactive_file:196932 isolated_file:0
     unevictable:0 dirty:8 writeback:0 unstable:0
     slab_reclaimable:157732 slab_unreclaimable:10022
     mapped:83042 shmem:306356 pagetables:9507 bounce:0
     free:130041 free_pcp:1080 free_cma:0
    Node 0 active_anon:1743236kB inactive_anon:695804kB active_file:3343288kB inactive_file:787728kB unevictable:0kB isolated(anon):0kB isolated(file):0kB mapped:332168kB dirty:32kB writeback:0kB shmem:0kB shmem_thp: 0kB shmem_pmdmapped: 0kB anon_thp: 1225424kB writeback_tmp:0kB unstable:0kB pages_scanned:0 all_unreclaimable? no
    Node 0 DMA free:15900kB min:136kB low:168kB high:200kB active_anon:0kB inactive_anon:0kB active_file:0kB inactive_file:0kB unevictable:0kB writepending:0kB present:15984kB managed:15900kB mlocked:0kB slab_reclaimable:0kB slab_unreclaimable:0kB kernel_stack:0kB pagetables:0kB bounce:0kB free_pcp:0kB local_pcp:0kB free_cma:0kB
    lowmem_reserve[]: 0 3187 7643 7643
    Node 0 DMA32 free:419732kB min:28124kB low:35152kB high:42180kB active_anon:541180kB inactive_anon:248988kB active_file:1466388kB inactive_file:389632kB unevictable:0kB writepending:0kB present:3370280kB managed:3290932kB mlocked:0kB slab_reclaimable:217184kB slab_unreclaimable:4180kB kernel_stack:160kB pagetables:984kB bounce:0kB free_pcp:2236kB local_pcp:660kB free_cma:0kB
    lowmem_reserve[]: 0 0 4456 4456
    
    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8de6ea44af5c55f61848ca3dab6f0b6642ef4c33
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Feb 2 18:05:26 2017 +0000

    log2: make order_base_2() behave correctly on const input value zero
    
    commit 29905b52fad0854351f57bab867647e4982285bf upstream.
    
    The function order_base_2() is defined (according to the comment block)
    as returning zero on input zero, but subsequently passes the input into
    roundup_pow_of_two(), which is explicitly undefined for input zero.
    
    This has gone unnoticed until now, but optimization passes in GCC 7 may
    produce constant folded function instances where a constant value of
    zero is passed into order_base_2(), resulting in link errors against the
    deliberately undefined '____ilog2_NaN'.
    
    So update order_base_2() to adhere to its own documented interface.
    
    [ See
    
         http://marc.info/?l=linux-kernel&m=147672952517795&w=2
    
      and follow-up discussion for more background. The gcc "optimization
      pass" is really just broken, but now the GCC trunk problem seems to
      have escaped out of just specially built daily images, so we need to
      work around it in mainline.    - Linus ]
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5331baaeb7e6a7448c5e2d1e48e91260cc99b710
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue May 23 21:53:57 2017 -0400

    kasan: respect /proc/sys/kernel/traceoff_on_warning
    
    
    [ Upstream commit 4f40c6e5627ea73b4e7c615c59631f38cc880885 ]
    
    After much waiting I finally reproduced a KASAN issue, only to find my
    trace-buffer empty of useful information because it got spooled out :/
    
    Make kasan_report honour the /proc/sys/kernel/traceoff_on_warning
    interface.
    
    Link: http://lkml.kernel.org/r/20170125164106.3514-1-aryabinin@virtuozzo.com
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Acked-by: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8936b74fd339be61f85c2ec74e311093d855bb07
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Tue May 23 21:53:56 2017 -0400

    shmem: fix sleeping from atomic context
    
    
    [ Upstream commit 253fd0f02040a19c6fe80e4171659fa3482a422d ]
    
    Syzkaller fuzzer managed to trigger this:
    
        BUG: sleeping function called from invalid context at mm/shmem.c:852
        in_atomic(): 1, irqs_disabled(): 0, pid: 529, name: khugepaged
        3 locks held by khugepaged/529:
         #0:  (shrinker_rwsem){++++..}, at: [<ffffffff818d7ef1>] shrink_slab.part.59+0x121/0xd30 mm/vmscan.c:451
         #1:  (&type->s_umount_key#29){++++..}, at: [<ffffffff81a63630>] trylock_super+0x20/0x100 fs/super.c:392
         #2:  (&(&sbinfo->shrinklist_lock)->rlock){+.+.-.}, at: [<ffffffff818fd83e>] spin_lock include/linux/spinlock.h:302 [inline]
         #2:  (&(&sbinfo->shrinklist_lock)->rlock){+.+.-.}, at: [<ffffffff818fd83e>] shmem_unused_huge_shrink+0x28e/0x1490 mm/shmem.c:427
        CPU: 2 PID: 529 Comm: khugepaged Not tainted 4.10.0-rc5+ #201
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
        Call Trace:
           shmem_undo_range+0xb20/0x2710 mm/shmem.c:852
           shmem_truncate_range+0x27/0xa0 mm/shmem.c:939
           shmem_evict_inode+0x35f/0xca0 mm/shmem.c:1030
           evict+0x46e/0x980 fs/inode.c:553
           iput_final fs/inode.c:1515 [inline]
           iput+0x589/0xb20 fs/inode.c:1542
           shmem_unused_huge_shrink+0xbad/0x1490 mm/shmem.c:446
           shmem_unused_huge_scan+0x10c/0x170 mm/shmem.c:512
           super_cache_scan+0x376/0x450 fs/super.c:106
           do_shrink_slab mm/vmscan.c:378 [inline]
           shrink_slab.part.59+0x543/0xd30 mm/vmscan.c:481
           shrink_slab mm/vmscan.c:2592 [inline]
           shrink_node+0x2c7/0x870 mm/vmscan.c:2592
           shrink_zones mm/vmscan.c:2734 [inline]
           do_try_to_free_pages+0x369/0xc80 mm/vmscan.c:2776
           try_to_free_pages+0x3c6/0x900 mm/vmscan.c:2982
           __perform_reclaim mm/page_alloc.c:3301 [inline]
           __alloc_pages_direct_reclaim mm/page_alloc.c:3322 [inline]
           __alloc_pages_slowpath+0xa24/0x1c30 mm/page_alloc.c:3683
           __alloc_pages_nodemask+0x544/0xae0 mm/page_alloc.c:3848
           __alloc_pages include/linux/gfp.h:426 [inline]
           __alloc_pages_node include/linux/gfp.h:439 [inline]
           khugepaged_alloc_page+0xc2/0x1b0 mm/khugepaged.c:750
           collapse_huge_page+0x182/0x1fe0 mm/khugepaged.c:955
           khugepaged_scan_pmd+0xfdf/0x12a0 mm/khugepaged.c:1208
           khugepaged_scan_mm_slot mm/khugepaged.c:1727 [inline]
           khugepaged_do_scan mm/khugepaged.c:1808 [inline]
           khugepaged+0xe9b/0x1590 mm/khugepaged.c:1853
           kthread+0x326/0x3f0 kernel/kthread.c:227
           ret_from_fork+0x31/0x40 arch/x86/entry/entry_64.S:430
    
    The iput() from atomic context was a bad idea: if after igrab() somebody
    else calls iput() and we left with the last inode reference, our iput()
    would lead to inode eviction and therefore sleeping.
    
    This patch should fix the situation.
    
    Link: http://lkml.kernel.org/r/20170131093141.GA15899@node.shutemov.name
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ec4141c68de07ec94e5781bf4a17f48e644fc3a
Author: David Lin <dtwlin@google.com>
Date:   Tue May 23 21:53:55 2017 -0400

    jump label: pass kbuild_cflags when checking for asm goto support
    
    
    [ Upstream commit 35f860f9ba6aac56cc38e8b18916d833a83f1157 ]
    
    Some versions of ARM GCC compiler such as Android toolchain throws in a
    '-fpic' flag by default.  This causes the gcc-goto check script to fail
    although some config would have '-fno-pic' flag in the KBUILD_CFLAGS.
    
    This patch passes the KBUILD_CFLAGS to the check script so that the
    script does not rely on the default config from different compilers.
    
    Link: http://lkml.kernel.org/r/20170120234329.78868-1-dtwlin@google.com
    Signed-off-by: David Lin <dtwlin@google.com>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    Cc: Michal Marek <mmarek@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d9659cde0dcb48c711d3dd460467d76c0b84eb
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue May 23 21:53:54 2017 -0400

    PM / runtime: Avoid false-positive warnings from might_sleep_if()
    
    
    [ Upstream commit a9306a63631493afc75893a4ac405d4e1cbae6aa ]
    
    The might_sleep_if() assertions in __pm_runtime_idle(),
    __pm_runtime_suspend() and __pm_runtime_resume() may generate
    false-positive warnings in some situations.  For example, that
    happens if a nested pm_runtime_get_sync()/pm_runtime_put() pair
    is executed with disabled interrupts within an outer
    pm_runtime_get_sync()/pm_runtime_put() section for the same device.
    [Generally, pm_runtime_get_sync() may sleep, so it should not be
    called with disabled interrupts, but in this particular case the
    previous pm_runtime_get_sync() guarantees that the device will not
    be suspended, so the inner pm_runtime_get_sync() will return
    immediately after incrementing the device's usage counter.]
    
    That started to happen in the i915 driver in 4.10-rc, leading to
    the following splat:
    
     BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:1032
     in_atomic(): 1, irqs_disabled(): 0, pid: 1500, name: Xorg
     1 lock held by Xorg/1500:
      #0:  (&dev->struct_mutex){+.+.+.}, at:
      [<ffffffffa0680c13>] i915_mutex_lock_interruptible+0x43/0x140 [i915]
     CPU: 0 PID: 1500 Comm: Xorg Not tainted
     Call Trace:
      dump_stack+0x85/0xc2
      ___might_sleep+0x196/0x260
      __might_sleep+0x53/0xb0
      __pm_runtime_resume+0x7a/0x90
      intel_runtime_pm_get+0x25/0x90 [i915]
      aliasing_gtt_bind_vma+0xaa/0xf0 [i915]
      i915_vma_bind+0xaf/0x1e0 [i915]
      i915_gem_execbuffer_relocate_entry+0x513/0x6f0 [i915]
      i915_gem_execbuffer_relocate_vma.isra.34+0x188/0x250 [i915]
      ? trace_hardirqs_on+0xd/0x10
      ? i915_gem_execbuffer_reserve_vma.isra.31+0x152/0x1f0 [i915]
      ? i915_gem_execbuffer_reserve.isra.32+0x372/0x3a0 [i915]
      i915_gem_do_execbuffer.isra.38+0xa70/0x1a40 [i915]
      ? __might_fault+0x4e/0xb0
      i915_gem_execbuffer2+0xc5/0x260 [i915]
      ? __might_fault+0x4e/0xb0
      drm_ioctl+0x206/0x450 [drm]
      ? i915_gem_execbuffer+0x340/0x340 [i915]
      ? __fget+0x5/0x200
      do_vfs_ioctl+0x91/0x6f0
      ? __fget+0x111/0x200
      ? __fget+0x5/0x200
      SyS_ioctl+0x79/0x90
      entry_SYSCALL_64_fastpath+0x23/0xc6
    
    even though the code triggering it is correct.
    
    Unfortunately, the might_sleep_if() assertions in question are
    too coarse-grained to cover such cases correctly, so make them
    a bit less sensitive in order to avoid the false-positives.
    
    Reported-and-tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40f6d71c0a0900c2b76cab421ee4ccfc6f425a35
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue May 23 21:53:53 2017 -0400

    ARM: defconfigs: make NF_CT_PROTO_SCTP and NF_CT_PROTO_UDPLITE built-in
    
    
    [ Upstream commit 5aff1d245e8cc1ab5c4517d916edaed9e3f7f973 ]
    
    The symbols can no longer be used as loadable modules, leading to a harmless Kconfig
    warning:
    
    arch/arm/configs/imote2_defconfig:60:warning: symbol value 'm' invalid for NF_CT_PROTO_UDPLITE
    arch/arm/configs/imote2_defconfig:59:warning: symbol value 'm' invalid for NF_CT_PROTO_SCTP
    arch/arm/configs/ezx_defconfig:68:warning: symbol value 'm' invalid for NF_CT_PROTO_UDPLITE
    arch/arm/configs/ezx_defconfig:67:warning: symbol value 'm' invalid for NF_CT_PROTO_SCTP
    
    Let's make them built-in.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cadd394bbf94976bcffeab54e94f1d083e2d390
Author: Linus L체ssing <linus.luessing@c0d3.blue>
Date:   Tue May 23 21:53:52 2017 -0400

    ipv6: Fix IPv6 packet loss in scenarios involving roaming + snooping switches
    
    
    [ Upstream commit a088d1d73a4bcfd7bc482f8d08375b9b665dc3e5 ]
    
    When for instance a mobile Linux device roams from one access point to
    another with both APs sharing the same broadcast domain and a
    multicast snooping switch in between:
    
    1)    (c) <~~~> (AP1) <--[SSW]--> (AP2)
    
    2)              (AP1) <--[SSW]--> (AP2) <~~~> (c)
    
    Then currently IPv6 multicast packets will get lost for (c) until an
    MLD Querier sends its next query message. The packet loss occurs
    because upon roaming the Linux host so far stayed silent regarding
    MLD and the snooping switch will therefore be unaware of the
    multicast topology change for a while.
    
    This patch fixes this by always resending MLD reports when an interface
    change happens, for instance from NO-CARRIER to CARRIER state.
    
    Signed-off-by: Linus L체ssing <linus.luessing@c0d3.blue>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d536202202eef1102a90ece32d91c20dffdbeede
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Tue May 23 21:53:51 2017 -0400

    vfio/spapr_tce: Set window when adding additional groups to container
    
    
    [ Upstream commit 930a42ded3fede7ca3acafc9153f4f2d0f56a92c ]
    
    If a container already has a group attached, attaching a new group
    should just program already created IOMMU tables to the hardware via
    the iommu_table_group_ops::set_window() callback.
    
    However commit 6f01cc692a16 ("vfio/spapr: Add a helper to create
    default DMA window") did not just simplify the code but also removed
    the set_window() calls in the case of attaching groups to a container
    which already has tables so it broke VFIO PCI hotplug.
    
    This reverts set_window() bits in tce_iommu_take_ownership_ddw().
    
    Fixes: 6f01cc692a16 ("vfio/spapr: Add a helper to create default DMA window")
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d385ed7ad30737aa649034ded83afdbef65217d1
Author: Marcus Huewe <suse-tux@gmx.de>
Date:   Tue May 23 21:53:49 2017 -0400

    ipv6: addrconf: fix generation of new temporary addresses
    
    
    [ Upstream commit a11a7f71cac209c7c9cca66eb506e1ebb033a3b3 ]
    
    Under some circumstances it is possible that no new temporary addresses
    will be generated.
    
    For instance, addrconf_prefix_rcv_add_addr() indirectly calls
    ipv6_create_tempaddr(), which creates a tentative temporary address and
    starts dad. Next, addrconf_prefix_rcv_add_addr() indirectly calls
    addrconf_verify_rtnl(). Now, assume that the previously created temporary
    address has the least preferred lifetime among all existing addresses and
    is still tentative (that is, dad is still running). Hence, the next run of
    addrconf_verify_rtnl() is performed when the preferred lifetime of the
    temporary address ends. If dad succeeds before the next run, the temporary
    address becomes deprecated during the next run, but no new temporary
    address is generated.
    
    In order to fix this, schedule the next addrconf_verify_rtnl() run slightly
    before the temporary address becomes deprecated, if dad succeeded.
    
    Signed-off-by: Marcus Huewe <suse-tux@gmx.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7b2b380c08d7e9b6caf1584656b98c47eb665f2
Author: Thanneeru Srinivasulu <tsrinivasulu@cavium.com>
Date:   Tue May 23 21:53:48 2017 -0400

    net: thunderx: Fix PHY autoneg for SGMII QLM mode
    
    
    [ Upstream commit 075ad765ef7541b2860de8408c165a92b78aefa3 ]
    
    This patch fixes the case where there is no phydev attached
    to a LMAC in DT due to non-existance of a PHY driver or due
    to usage of non-stanadard PHY which doesn't support autoneg.
    Changes dependeds on firmware to send correct info w.r.t
    PHY and autoneg capability.
    
    This patch also covers a case where a 10G/40G interface is used
    as a 1G with convertors with Cortina PHY in between.
    
    Signed-off-by: Thanneeru Srinivasulu <tsrinivasulu@cavium.com>
    Signed-off-by: Sunil Goutham <sgoutham@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baaa84b43608a922e6be101982388e50aa0a4422
Author: Luis R. Rodriguez <mcgrof@kernel.org>
Date:   Tue May 23 21:53:47 2017 -0400

    kernel/ucount.c: mark user_header with kmemleak_ignore()
    
    
    [ Upstream commit ed5bd7dc88edf4a4a9c67130742b1b59aa017a5f ]
    
    The user_header gets caught by kmemleak with the following splat as
    missing a free:
    
      unreferenced object 0xffff99667a733d80 (size 96):
      comm "swapper/0", pid 1, jiffies 4294892317 (age 62191.468s)
      hex dump (first 32 bytes):
        a0 b6 92 b4 ff ff ff ff 00 00 00 00 01 00 00 00  ................
        01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
         kmemleak_alloc+0x4a/0xa0
         __kmalloc+0x144/0x260
         __register_sysctl_table+0x54/0x5e0
         register_sysctl+0x1b/0x20
         user_namespace_sysctl_init+0x17/0x34
         do_one_initcall+0x52/0x1a0
         kernel_init_freeable+0x173/0x200
         kernel_init+0xe/0x100
         ret_from_fork+0x2c/0x40
    
    The BUG_ON()s are intended to crash so no need to clean up after
    ourselves on error there.  This is also a kernel/ subsys_init() we don't
    need a respective exit call here as this is never modular, so just white
    list it.
    
    Link: http://lkml.kernel.org/r/20170203211404.31458-1-mcgrof@kernel.org
    Signed-off-by: Luis R. Rodriguez <mcgrof@kernel.org>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Nikolay Borisov <n.borisov.lkml@gmail.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: Jan Kara <jack@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c419fe260b549c543119ea7e2db4916b9aac26f3
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Tue May 23 21:53:46 2017 -0400

    powerpc/powernv: Properly set "host-ipi" on IPIs
    
    
    [ Upstream commit f83e6862047e1e371bdc5d512dd6cabe8a3965b8 ]
    
    Otherwise KVM will fail to pass them through to the host
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47a5aabc34247d75c7bfa87f4e3f884f055dded6
Author: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
Date:   Tue May 23 21:53:45 2017 -0400

    i2c: piix4: Fix request_region size
    
    
    [ Upstream commit f43128c75202f29ee71aa83e6c320a911137c189 ]
    
    Since '701dc207bf55 ("i2c: piix4: Avoid race conditions with IMC")' we
    are using the SMBSLVCNT register at offset 0x8. We need to request it.
    
    Fixes: 701dc207bf55 ("i2c: piix4: Avoid race conditions with IMC")
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1a4306f24a092f55ee9bbdff0c0a8741e9c833c
Author: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
Date:   Tue May 23 21:53:44 2017 -0400

    i2c: piix4: Request the SMBUS semaphore inside the mutex
    
    
    [ Upstream commit bbb27fc33d44e7b8d96369810654df4ee1837566 ]
    
    SMBSLVCNT must be protected with the piix4_mutex_sb800 in order to avoid
    multiple buses accessing to the semaphore at the same time.
    
    Fixes: 701dc207bf55 ("i2c: piix4: Avoid race conditions with IMC")
    Reported-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Ricardo Ribalda Delgado <ricardo.ribalda@gmail.com>
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a6fcf38fabb404dd6fa589fa257c104c217c662
Author: Stefan Br체ns <stefan.bruens@rwth-aachen.de>
Date:   Tue May 23 21:53:43 2017 -0400

    sierra_net: Add support for IPv6 and Dual-Stack Link Sense Indications
    
    
    [ Upstream commit 5a70348e1187c5bf1cbd0ec51843f36befed1c2d ]
    
    If a context is configured as dualstack ("IPv4v6"), the modem indicates
    the context activation with a slightly different indication message.
    The dual-stack indication omits the link_type (IPv4/v6) and adds
    additional address fields.
    IPv6 LSIs are identical to IPv4 LSIs, but have a different link type.
    
    Signed-off-by: Stefan Br체ns <stefan.bruens@rwth-aachen.de>
    Reviewed-by: Bj첩rn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9217eeefee159b9dec3bd111022e471e66eb48ca
Author: Stefan Br체ns <stefan.bruens@rwth-aachen.de>
Date:   Tue May 23 21:53:42 2017 -0400

    sierra_net: Skip validating irrelevant fields for IDLE LSIs
    
    
    [ Upstream commit 764895d3039e903dac3a70f219949efe43d036a0 ]
    
    When the context is deactivated, the link_type is set to 0xff, which
    triggers a warning message, and results in a wrong link status, as
    the LSI is ignored.
    
    Signed-off-by: Stefan Br체ns <stefan.bruens@rwth-aachen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bed8b8627a3339f30c62534581deb8a37c7b8b8a
Author: Kejian Yan <yankejian@huawei.com>
Date:   Tue May 23 21:53:41 2017 -0400

    net: hns: Fix the device being used for dma mapping during TX
    
    
    [ Upstream commit b85ea006b6bebb692628f11882af41c3e12e1e09 ]
    
    This patch fixes the device being used to DMA map skb->data.
    Erroneous device assignment causes the crash when SMMU is enabled.
    This happens during TX since buffer gets DMA mapped with device
    correspondign to net_device and gets unmapped using the device
    related to DSAF.
    
    Signed-off-by: Kejian Yan <yankejian@huawei.com>
    Reviewed-by: Yisen Zhuang <yisen.zhuang@huawei.com>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 008798746e6e1d68a24674690e355b5619711fc4
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Tue May 23 21:53:40 2017 -0400

    NET: mkiss: Fix panic
    
    
    [ Upstream commit 7ba1b689038726d34e3244c1ac9e2e18c2ea4787 ]
    
    If a USB-to-serial adapter is unplugged, the driver re-initializes, with
    dev->hard_header_len and dev->addr_len set to zero, instead of the correct
    values.  If then a packet is sent through the half-dead interface, the
    kernel will panic due to running out of headroom in the skb when pushing
    for the AX.25 headers resulting in this panic:
    
    [<c0595468>] (skb_panic) from [<c0401f70>] (skb_push+0x4c/0x50)
    [<c0401f70>] (skb_push) from [<bf0bdad4>] (ax25_hard_header+0x34/0xf4 [ax25])
    [<bf0bdad4>] (ax25_hard_header [ax25]) from [<bf0d05d4>] (ax_header+0x38/0x40 [mkiss])
    [<bf0d05d4>] (ax_header [mkiss]) from [<c041b584>] (neigh_compat_output+0x8c/0xd8)
    [<c041b584>] (neigh_compat_output) from [<c043e7a8>] (ip_finish_output+0x2a0/0x914)
    [<c043e7a8>] (ip_finish_output) from [<c043f948>] (ip_output+0xd8/0xf0)
    [<c043f948>] (ip_output) from [<c043f04c>] (ip_local_out_sk+0x44/0x48)
    
    This patch makes mkiss behave like the 6pack driver. 6pack does not
    panic.  In 6pack.c sp_setup() (same function name here) the values for
    dev->hard_header_len and dev->addr_len are set to the same values as in
    my mkiss patch.
    
    [ralf@linux-mips.org: Massages original submission to conform to the usual
    standards for patch submissions.]
    
    Signed-off-by: Thomas Osterried <thomas@osterried.de>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae0b63eb344efec8aab9759ec3fcc94c799227e1
Author: Nathan Fontenot <nfont@linux.vnet.ibm.com>
Date:   Tue May 23 21:53:39 2017 -0400

    ibmvnic: Initialize completion variables before starting work
    
    
    [ Upstream commit db5d0b597bc27bbddf40f2f8359a73be4eb77104 ]
    
    Initialize condition variables prior to invoking any work that can
    mark them complete. This resolves a race in the ibmvnic driver where
    the driver faults trying to complete an uninitialized condition
    variable.
    
    Signed-off-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4544ba3173b7e4f15c8c921997847390e5652268
Author: Nathan Fontenot <nfont@linux.vnet.ibm.com>
Date:   Tue May 23 21:53:38 2017 -0400

    ibmvnic: Call napi_disable instead of napi_enable in failure path
    
    
    [ Upstream commit e722af6391949e8851310441bb0cec157d25611d ]
    
    The failure path in ibmvnic_open() mistakenly makes a second call
    to napi_enable instead of calling napi_disable. This can result
    in a BUG_ON for any queues that were enabled in the previous call
    to napi_enable.
    
    Signed-off-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74e24d1ea1a4fc8e1d4faa43263229aa45513cd3
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Tue May 23 21:53:37 2017 -0400

    NET: Fix /proc/net/arp for AX.25
    
    
    [ Upstream commit 4872e57c812dd312bf8193b5933fa60585cda42f ]
    
    When sending ARP requests over AX.25 links the hwaddress in the neighbour
    cache are not getting initialized.  For such an incomplete arp entry
    ax2asc2 will generate an empty string resulting in /proc/net/arp output
    like the following:
    
    $ cat /proc/net/arp
    IP address       HW type     Flags       HW address            Mask     Device
    192.168.122.1    0x1         0x2         52:54:00:00:5d:5f     *        ens3
    172.20.1.99      0x3         0x0              *        bpq0
    
    The missing field will confuse the procfs parsing of arp(8) resulting in
    incorrect output for the device such as the following:
    
    $ arp
    Address                  HWtype  HWaddress           Flags Mask            Iface
    gateway                  ether   52:54:00:00:5d:5f   C                     ens3
    172.20.1.99                      (incomplete)                              ens3
    
    This changes the content of /proc/net/arp to:
    
    $ cat /proc/net/arp
    IP address       HW type     Flags       HW address            Mask     Device
    172.20.1.99      0x3         0x0         *                     *        bpq0
    192.168.122.1    0x1         0x2         52:54:00:00:5d:5f     *        ens3
    
    To do so it change ax2asc to put the string "*" in buf for a NULL address
    argument.  Finally the HW address field is left aligned in a 17 character
    field (the length of an ethernet HW address in the usual hex notation) for
    readability.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2557969fb4f703f1364a58fabde53e6567b46120
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue May 23 21:53:36 2017 -0400

    gfs2: Use rhashtable walk interface in glock_hash_walk
    
    
    [ Upstream commit 6a25478077d987edc5e2f880590a2bc5fcab4441 ]
    
    The function glock_hash_walk walks the rhashtable by hand.  This
    is broken because if it catches the hash table in the middle of
    a rehash, then it will miss entries.
    
    This patch replaces the manual walk by using the rhashtable walk
    interface.
    
    Fixes: 88ffbf3e037e ("GFS2: Use resizable hash table for glocks")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44bc7cae603167feb86b7f8f0684df62ffaac7f4
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue May 23 21:53:35 2017 -0400

    tipc: Fix tipc_sk_reinit race conditions
    
    
    [ Upstream commit 9dbbfb0ab6680c6a85609041011484e6658e7d3c ]
    
    There are two problems with the function tipc_sk_reinit.  Firstly
    it's doing a manual walk over an rhashtable.  This is broken as
    an rhashtable can be resized and if you manually walk over it
    during a resize then you may miss entries.
    
    Secondly it's missing memory barriers as previously the code used
    spinlocks which provide the barriers implicitly.
    
    This patch fixes both problems.
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb351da6f2badf45d87cf0d21826d81a77f5e433
Author: Jonathan T. Leighton <jtleight@udel.edu>
Date:   Tue May 23 21:53:34 2017 -0400

    ipv6: Inhibit IPv4-mapped src address on the wire.
    
    
    [ Upstream commit ec5e3b0a1d41fbda0cc33a45bc9e54e91d9d12c7 ]
    
    This patch adds a check for the problematic case of an IPv4-mapped IPv6
    source address and a destination address that is neither an IPv4-mapped
    IPv6 address nor in6addr_any, and returns an appropriate error. The
    check in done before returning from looking up the route.
    
    Signed-off-by: Jonathan T. Leighton <jtleight@udel.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12ec2560d467812424ff8eb6f7fccc83f64aae3d
Author: Jonathan T. Leighton <jtleight@udel.edu>
Date:   Tue May 23 21:53:33 2017 -0400

    ipv6: Handle IPv4-mapped src to in6addr_any dst.
    
    
    [ Upstream commit 052d2369d1b479cdbbe020fdd6d057d3c342db74 ]
    
    This patch adds a check on the type of the source address for the case
    where the destination address is in6addr_any. If the source is an
    IPv4-mapped IPv6 source address, the destination is changed to
    ::ffff:127.0.0.1, and otherwise the destination is changed to ::1. This
    is done in three locations to handle UDP calls to either connect() or
    sendmsg() and TCP calls to connect(). Note that udpv6_sendmsg() delays
    handling an in6addr_any destination until very late, so the patch only
    needs to handle the case where the source is an IPv4-mapped IPv6
    address.
    
    Signed-off-by: Jonathan T. Leighton <jtleight@udel.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 116589a5a7e0f3dc91a50b9d39365306b2198680
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 23 21:53:32 2017 -0400

    tcp: tcp_probe: use spin_lock_bh()
    
    
    [ Upstream commit e70ac171658679ecf6bea4bbd9e9325cd6079d2b ]
    
    tcp_rcv_established() can now run in process context.
    
    We need to disable BH while acquiring tcp probe spinlock,
    or risk a deadlock.
    
    Fixes: 5413d1babe8f ("net: do not block BH while processing socket backlog")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Ricardo Nabinger Sanchez <rnsanchez@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2901d01a6c7aac1b1e0603bc7d8fce448760195
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Tue May 23 21:53:29 2017 -0400

    net: xilinx_emaclite: fix receive buffer overflow
    
    
    [ Upstream commit cd224553641848dd17800fe559e4ff5d208553e8 ]
    
    xilinx_emaclite looks at the received data to try to determine the
    Ethernet packet length but does not properly clamp it if
    proto_type == ETH_P_IP or 1500 < proto_type <= 1518, causing a buffer
    overflow and a panic via skb_panic() as the length exceeds the allocated
    skb size.
    
    Fix those cases.
    
    Also add an additional unconditional check with WARN_ON() at the end.
    
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Fixes: bb81b2ddfa19 ("net: add Xilinx emac lite device driver")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bff3001afae781cc24dc816bc3e0f9c6f6a02296
Author: Anssi Hannula <anssi.hannula@bitwise.fi>
Date:   Tue May 23 21:53:28 2017 -0400

    net: xilinx_emaclite: fix freezes due to unordered I/O
    
    
    [ Upstream commit acf138f1b00bdd1b7cd9894562ed0c2a1670888e ]
    
    The xilinx_emaclite uses __raw_writel and __raw_readl for register
    accesses. Those functions do not imply any kind of memory barriers and
    they may be reordered.
    
    The driver does not seem to take that into account, though, and the
    driver does not satisfy the ordering requirements of the hardware.
    For clear examples, see xemaclite_mdio_write() and xemaclite_mdio_read()
    which try to set MDIO address before initiating the transaction.
    
    I'm seeing system freezes with the driver with GCC 5.4 and current
    Linux kernels on Zynq-7000 SoC immediately when trying to use the
    interface.
    
    In commit 123c1407af87 ("net: emaclite: Do not use microblaze and ppc
    IO functions") the driver was switched from non-generic
    in_be32/out_be32 (memory barriers, big endian) to
    __raw_readl/__raw_writel (no memory barriers, native endian), so
    apparently the device follows system endianness and the driver was
    originally written with the assumption of memory barriers.
    
    Rather than try to hunt for each case of missing barrier, just switch
    the driver to use iowrite32/ioread32/iowrite32be/ioread32be depending
    on endianness instead.
    
    Tested on little-endian Zynq-7000 ARM SoC FPGA.
    
    Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
    Fixes: 123c1407af87 ("net: emaclite: Do not use microblaze and ppc IO
    functions")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65e72723add09f7e260863b1f68f24d62c3cf96a
Author: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
Date:   Tue May 23 21:53:27 2017 -0400

    ibmvnic: Fix endian error when requesting device capabilities
    
    
    [ Upstream commit 28f4d16570dcf440e54a4d72666d5be452f27d0e ]
    
    When a vNIC client driver requests a faulty device setting, the
    server returns an acceptable value for the client to request.
    This 64 bit value was incorrectly being swapped as a 32 bit value,
    resulting in loss of data. This patch corrects that by using
    the 64 bit swap function.
    
    Signed-off-by: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5a1aa812a161dce89d296e599a003de17cccefa
Author: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
Date:   Tue May 23 21:53:26 2017 -0400

    ibmvnic: Fix endian errors in error reporting output
    
    
    [ Upstream commit 75224c93fa985f4a6fb983f53208f5c5aa555fbf ]
    
    Error reports received from firmware were not being converted from
    big endian values, leading to bogus error codes reported on little
    endian systems.
    
    Signed-off-by: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d864e675c78983b287848a3df64c1d9dfed263da
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Wed Mar 1 15:33:26 2017 +0100

    netfilter: nf_conntrack_sip: fix wrong memory initialisation
    
    commit da2f27e9e615d1c799c9582b15262458da61fddc upstream.
    
    In commit 82de0be6862cd ("netfilter: Add helper array
    register/unregister functions"),
    struct nf_conntrack_helper sip[MAX_PORTS][4] was changed to
    sip[MAX_PORTS * 4], so the memory init should have been changed to
    memset(&sip[4 * i], 0, 4 * sizeof(sip[i]));
    
    But as the sip[] table is allocated in the BSS, it is already set to 0
    
    Fixes: 82de0be6862cd ("netfilter: Add helper array register/unregister functions")
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 220b67a16fde7187fae7efcc6809d658e4c49525
Author: Richard <richard@aaazen.com>
Date:   Sun May 21 12:27:00 2017 -0700

    partitions/msdos: FreeBSD UFS2 file systems are not recognized
    
    commit 223220356d5ebc05ead9a8d697abb0c0a906fc81 upstream.
    
    The code in block/partitions/msdos.c recognizes FreeBSD, OpenBSD
    and NetBSD partitions and does a reasonable job picking out OpenBSD
    and NetBSD UFS subpartitions.
    
    But for FreeBSD the subpartitions are always "bad".
    
        Kernel: <bsd:bad subpartition - ignored
    
    Though all 3 of these BSD systems use UFS as a file system, only
    FreeBSD uses relative start addresses in the subpartition
    declarations.
    
    The following patch fixes this for FreeBSD partitions and leaves
    the code for OpenBSD and NetBSD intact:
    
    Signed-off-by: Richard Narron <comet.berkeley@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a7b2d5f65a7a12c4f5d43fb10913ca908102833
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue May 2 15:04:09 2017 +0300

    drm/i915: Prevent the system suspend complete optimization
    
    commit 6ab92afc95c9bd6877cb42e7b24f65be887a5440 upstream.
    
    Since
    
    commit bac2a909a096c9110525c18cbb8ce73c660d5f71
    Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Date:   Wed Jan 21 02:17:42 2015 +0100
    
        PCI / PM: Avoid resuming PCI devices during system suspend
    
    PCI devices will default to allowing the system suspend complete
    optimization where devices are not woken up during system suspend if
    they were already runtime suspended. This however breaks the i915/HDA
    drivers for two reasons:
    
    - The i915 driver has system suspend specific steps that it needs to
      run, that bring the device to a different state than its runtime
      suspended state.
    
    - The HDA driver's suspend handler requires power that it will request
      from the i915 driver's power domain handler. This in turn requires the
      i915 driver to runtime resume itself, but this won't be possible if the
      suspend complete optimization is in effect: in this case the i915
      runtime PM is disabled and trying to get an RPM reference returns
      -EACCESS.
    
    Solve this by requiring the PCI/PM core to resume the device during
    system suspend which in effect disables the suspend complete optimization.
    
    Regardless of the above commit the optimization stayed disabled for DRM
    devices until
    
    commit d14d2a8453d650bea32a1c5271af1458cd283a0f
    Author: Lukas Wunner <lukas@wunner.de>
    Date:   Wed Jun 8 12:49:29 2016 +0200
    
        drm: Remove dev_pm_ops from drm_class
    
    so this patch is in practice a fix for this commit. Another reason for
    the bug staying hidden for so long is that the optimization for a device
    is disabled if it's disabled for any of its children devices. i915 may
    have a backlight device as its child which doesn't support runtime PM
    and so doesn't allow the optimization either.  So if this backlight
    device got registered the bug stayed hidden.
    
    Credits to Marta, Tomi and David who enabled pstore logging,
    that caught one instance of this issue across a suspend/
    resume-to-ram and Ville who rememberd that the optimization was enabled
    for some devices at one point.
    
    The first WARN triggered by the problem:
    
    [ 6250.746445] WARNING: CPU: 2 PID: 17384 at drivers/gpu/drm/i915/intel_runtime_pm.c:2846 intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746448] pm_runtime_get_sync() failed: -13
    [ 6250.746451] Modules linked in: snd_hda_intel i915 vgem snd_hda_codec_hdmi x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul
    snd_hda_codec_realtek snd_hda_codec_generic ghash_clmulni_intel e1000e snd_hda_codec snd_hwdep snd_hda_core ptp mei_me pps_core snd_pcm lpc_ich mei prime_
    numbers i2c_hid i2c_designware_platform i2c_designware_core [last unloaded: i915]
    [ 6250.746512] CPU: 2 PID: 17384 Comm: kworker/u8:0 Tainted: G     U  W       4.11.0-rc5-CI-CI_DRM_334+ #1
    [ 6250.746515] Hardware name:                  /NUC5i5RYB, BIOS RYBDWi35.86A.0362.2017.0118.0940 01/18/2017
    [ 6250.746521] Workqueue: events_unbound async_run_entry_fn
    [ 6250.746525] Call Trace:
    [ 6250.746530]  dump_stack+0x67/0x92
    [ 6250.746536]  __warn+0xc6/0xe0
    [ 6250.746542]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746546]  warn_slowpath_fmt+0x46/0x50
    [ 6250.746553]  ? __pm_runtime_resume+0x56/0x80
    [ 6250.746584]  intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746610]  intel_display_power_get+0x1b/0x40 [i915]
    [ 6250.746646]  i915_audio_component_get_power+0x15/0x20 [i915]
    [ 6250.746654]  snd_hdac_display_power+0xc8/0x110 [snd_hda_core]
    [ 6250.746661]  azx_runtime_resume+0x218/0x280 [snd_hda_intel]
    [ 6250.746667]  pci_pm_runtime_resume+0x76/0xa0
    [ 6250.746672]  __rpm_callback+0xb4/0x1f0
    [ 6250.746677]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746682]  rpm_callback+0x1f/0x80
    [ 6250.746686]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746690]  rpm_resume+0x4ba/0x740
    [ 6250.746698]  __pm_runtime_resume+0x49/0x80
    [ 6250.746703]  pci_pm_suspend+0x57/0x140
    [ 6250.746709]  dpm_run_callback+0x6f/0x330
    [ 6250.746713]  ? pci_pm_freeze+0xe0/0xe0
    [ 6250.746718]  __device_suspend+0xf9/0x370
    [ 6250.746724]  ? dpm_watchdog_set+0x60/0x60
    [ 6250.746730]  async_suspend+0x1a/0x90
    [ 6250.746735]  async_run_entry_fn+0x34/0x160
    [ 6250.746741]  process_one_work+0x1f2/0x6d0
    [ 6250.746749]  worker_thread+0x49/0x4a0
    [ 6250.746755]  kthread+0x107/0x140
    [ 6250.746759]  ? process_one_work+0x6d0/0x6d0
    [ 6250.746763]  ? kthread_create_on_node+0x40/0x40
    [ 6250.746768]  ret_from_fork+0x2e/0x40
    [ 6250.746778] ---[ end trace 102a62fd2160f5e6 ]---
    
    v2:
    - Use the new pci_dev->needs_resume flag, to avoid any overhead during
      the ->pm_prepare hook. (Rafael)
    
    v3:
    - Update commit message to reference the actual regressing commit.
      (Lukas)
    
    v4:
    - Rebase on v4 of patch 1/2.
    
    Fixes: d14d2a8453d6 ("drm: Remove dev_pm_ops from drm_class")
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100378
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100770
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Marta Lofstedt <marta.lofstedt@intel.com>
    Cc: David Weinehall <david.weinehall@linux.intel.com>
    Cc: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Cc: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: linux-pci@vger.kernel.org
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reported-and-tested-by: Marta Lofstedt <marta.lofstedt@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1493726649-32094-2-git-send-email-imre.deak@intel.com
    (cherry picked from commit adfdf85d795f4d4f487b61ee0b169d64c6e19081)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b372d35a522617967911b72e209d35a0c4161fe6
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue May 23 14:18:17 2017 -0500

    PCI/PM: Add needs_resume flag to avoid suspend complete optimization
    
    commit 4d071c3238987325b9e50e33051a40d1cce311cc upstream.
    
    Some drivers - like i915 - may not support the system suspend direct
    complete optimization due to differences in their runtime and system
    suspend sequence.  Add a flag that when set resumes the device before
    calling the driver's system suspend handlers which effectively disables
    the optimization.
    
    Needed by a future patch fixing suspend/resume on i915.
    
    Suggested by Rafael.
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org
    (rebased on v4.8, added kernel version to commit message stable tag)
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
