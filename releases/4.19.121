commit 84920cc7fbe10e838689e8e1437dfd18d6e54a2c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed May 6 08:13:35 2020 +0200

    Linux 4.19.121

commit 144857ac520e0a399a799f2b495beff6857ba6bb
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Thu Apr 16 20:35:13 2020 +0200

    mmc: meson-mx-sdio: remove the broken ->card_busy() op
    
    commit ddca1092c4324c89cf692b5efe655aa251864b51 upstream.
    
    The recent commit 0d84c3e6a5b2 ("mmc: core: Convert to
    mmc_poll_for_busy() for erase/trim/discard") makes use of the
    ->card_busy() op for SD cards. This uncovered that the ->card_busy() op
    in the Meson SDIO driver was never working right:
    while polling the busy status with ->card_busy()
    meson_mx_mmc_card_busy() reads only one of the two MESON_MX_SDIO_IRQC
    register values 0x1f001f10 or 0x1f003f10. This translates to "three out
    of four DAT lines are HIGH" and "all four DAT lines are HIGH", which
    is interpreted as "the card is busy".
    
    It turns out that no situation can be observed where all four DAT lines
    are LOW, meaning the card is not busy anymore. Upon further research the
    3.10 vendor driver for this controller does not implement the
    ->card_busy() op.
    
    Remove the ->card_busy() op from the meson-mx-sdio driver since it is
    not working. At the time of writing this patch it is not clear what's
    needed to make the ->card_busy() implementation work with this specific
    controller hardware. For all use-cases which have previously worked the
    MMC_CAP_WAIT_WHILE_BUSY flag is now taking over, even if we don't have
    a ->card_busy() op anymore.
    
    Fixes: ed80a13bb4c4c9 ("mmc: meson-mx-sdio: Add a driver for the Amlogic Meson8 and Meson8b SoCs")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200416183513.993763-3-martin.blumenstingl@googlemail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 920d9c118c264b734d9314a476ac62eb262ad066
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Thu Apr 16 20:35:12 2020 +0200

    mmc: meson-mx-sdio: Set MMC_CAP_WAIT_WHILE_BUSY
    
    commit e53b868b3cf5beeaa2f851ec6740112bf4d6a8cb upstream.
    
    The Meson SDIO controller uses the DAT0 lane for hardware busy
    detection. Set MMC_CAP_WAIT_WHILE_BUSY accordingly. This fixes
    the following error observed with Linux 5.7 (pre-rc-1):
      mmc1: Card stuck being busy! __mmc_poll_for_busy
      blk_update_request: I/O error, dev mmcblk1, sector 17111080 op
       0x3:(DISCARD) flags 0x0 phys_seg 1 prio class 0
    
    Fixes: ed80a13bb4c4c9 ("mmc: meson-mx-sdio: Add a driver for the Amlogic Meson8 and Meson8b SoCs")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200416183513.993763-2-martin.blumenstingl@googlemail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c1b05138fa1009164fbaedac089626b99e8fa17
Author: Veerabhadrarao Badiganti <vbadigan@codeaurora.org>
Date:   Mon Apr 20 11:50:23 2020 +0530

    mmc: sdhci-msm: Enable host capabilities pertains to R1b response
    
    commit 9d8cb58691f85cef687512262acb2c7109ee4868 upstream.
    
    MSM sd host controller is capable of HW busy detection of device busy
    signaling over DAT0 line. And it requires the R1B response for commands
    that have this response associated with them.
    
    So set the below two host capabilities for qcom SDHC.
     - MMC_CAP_WAIT_WHILE_BUSY
     - MMC_CAP_NEED_RSP_BUSY
    
    Recent development of the mmc core in regards to this, revealed this as
    being a potential bug, hence the stable tag.
    
    Cc: <stable@vger.kernel.org> # v4.19+
    Signed-off-by: Veerabhadrarao Badiganti <vbadigan@codeaurora.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/1587363626-20413-2-git-send-email-vbadigan@codeaurora.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1acd57f1a4fcdb7828935021d16244c76927ce2
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Apr 22 14:16:29 2020 +0300

    mmc: sdhci-pci: Fix eMMC driver strength for BYT-based controllers
    
    commit 1a8eb6b373c2af6533c13d1ea11f504e5010ed9a upstream.
    
    BIOS writers have begun the practice of setting 40 ohm eMMC driver strength
    even though the eMMC may not support it, on the assumption that the kernel
    will validate the value against the eMMC (Extended CSD DRIVER_STRENGTH
    [offset 197]) and revert to the default 50 ohm value if 40 ohm is invalid.
    
    This is done to avoid changing the value for different boards.
    
    Putting aside the merits of this approach, it is clear the eMMC's mask
    of supported driver strengths is more reliable than the value provided
    by BIOS. Add validation accordingly.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Fixes: 51ced59cc02e ("mmc: sdhci-pci: Use ACPI DSM to get driver strength for some Intel devices")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200422111629.4899-1-adrian.hunter@intel.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82e242c14466dc4137c8bd8c6cac4554aea19a70
Author: Marek Behún <marek.behun@nic.cz>
Date:   Mon Apr 20 10:04:44 2020 +0200

    mmc: sdhci-xenon: fix annoying 1.8V regulator warning
    
    commit bb32e1987bc55ce1db400faf47d85891da3c9b9f upstream.
    
    For some reason the Host Control2 register of the Xenon SDHCI controller
    sometimes reports the bit representing 1.8V signaling as 0 when read
    after it was written as 1. Subsequent read reports 1.
    
    This causes the sdhci_start_signal_voltage_switch function to report
      1.8V regulator output did not become stable
    
    When CONFIG_PM is enabled, the host is suspended and resumend many
    times, and in each resume the switch to 1.8V is called, and so the
    kernel log reports this message annoyingly often.
    
    Do an empty read of the Host Control2 register in Xenon's
    .voltage_switch method to circumvent this.
    
    This patch fixes this particular problem on Turris MOX.
    
    Signed-off-by: Marek Behún <marek.behun@nic.cz>
    Fixes: 8d876bf472db ("mmc: sdhci-xenon: wait 5ms after set 1.8V...")
    Cc: stable@vger.kernel.org # v4.16+
    Link: https://lore.kernel.org/r/20200420080444.25242-1-marek.behun@nic.cz
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbbee5a1e2d512c1b680fc0141db9329a57da4bc
Author: Douglas Anderson <dianders@chromium.org>
Date:   Mon Apr 13 16:27:27 2020 -0700

    mmc: cqhci: Avoid false "cqhci: CQE stuck on" by not open-coding timeout loop
    
    commit b1ac62a7ac386d76968af5f374a4a7a82a35fe31 upstream.
    
    Open-coding a timeout loop invariably leads to errors with handling
    the timeout properly in one corner case or another.  In the case of
    cqhci we might report "CQE stuck on" even if it wasn't stuck on.
    You'd just need this sequence of events to happen in cqhci_off():
    
    1. Call ktime_get().
    2. Something happens to interrupt the CPU for > 100 us (context switch
       or interrupt).
    3. Check time and; set "timed_out" to true since > 100 us.
    4. Read CQHCI_CTL.
    5. Both "reg & CQHCI_HALT" and "timed_out" are true, so break.
    6. Since "timed_out" is true, falsely print the error message.
    
    Rather than fixing the polling loop, use readx_poll_timeout() like
    many people do.  This has been time tested to handle the corner cases.
    
    Fixes: a4080225f51d ("mmc: cqhci: support for command queue enabled host")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200413162717.1.Idece266f5c8793193b57a1ddb1066d030c6af8e0@changeid
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57be052c28c7df4dbf60e9d346b9780885485f0d
Author: Qu Wenruo <wqu@suse.com>
Date:   Mon Apr 27 14:50:14 2020 +0800

    btrfs: transaction: Avoid deadlock due to bad initialization timing of fs_info::journal_info
    
    commit fcc99734d1d4ced30167eb02e17f656735cb9928 upstream.
    
    [BUG]
    One run of btrfs/063 triggered the following lockdep warning:
      ============================================
      WARNING: possible recursive locking detected
      5.6.0-rc7-custom+ #48 Not tainted
      --------------------------------------------
      kworker/u24:0/7 is trying to acquire lock:
      ffff88817d3a46e0 (sb_internal#2){.+.+}, at: start_transaction+0x66c/0x890 [btrfs]
    
      but task is already holding lock:
      ffff88817d3a46e0 (sb_internal#2){.+.+}, at: start_transaction+0x66c/0x890 [btrfs]
    
      other info that might help us debug this:
       Possible unsafe locking scenario:
    
             CPU0
             ----
        lock(sb_internal#2);
        lock(sb_internal#2);
    
       *** DEADLOCK ***
    
       May be due to missing lock nesting notation
    
      4 locks held by kworker/u24:0/7:
       #0: ffff88817b495948 ((wq_completion)btrfs-endio-write){+.+.}, at: process_one_work+0x557/0xb80
       #1: ffff888189ea7db8 ((work_completion)(&work->normal_work)){+.+.}, at: process_one_work+0x557/0xb80
       #2: ffff88817d3a46e0 (sb_internal#2){.+.+}, at: start_transaction+0x66c/0x890 [btrfs]
       #3: ffff888174ca4da8 (&fs_info->reloc_mutex){+.+.}, at: btrfs_record_root_in_trans+0x83/0xd0 [btrfs]
    
      stack backtrace:
      CPU: 0 PID: 7 Comm: kworker/u24:0 Not tainted 5.6.0-rc7-custom+ #48
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
      Workqueue: btrfs-endio-write btrfs_work_helper [btrfs]
      Call Trace:
       dump_stack+0xc2/0x11a
       __lock_acquire.cold+0xce/0x214
       lock_acquire+0xe6/0x210
       __sb_start_write+0x14e/0x290
       start_transaction+0x66c/0x890 [btrfs]
       btrfs_join_transaction+0x1d/0x20 [btrfs]
       find_free_extent+0x1504/0x1a50 [btrfs]
       btrfs_reserve_extent+0xd5/0x1f0 [btrfs]
       btrfs_alloc_tree_block+0x1ac/0x570 [btrfs]
       btrfs_copy_root+0x213/0x580 [btrfs]
       create_reloc_root+0x3bd/0x470 [btrfs]
       btrfs_init_reloc_root+0x2d2/0x310 [btrfs]
       record_root_in_trans+0x191/0x1d0 [btrfs]
       btrfs_record_root_in_trans+0x90/0xd0 [btrfs]
       start_transaction+0x16e/0x890 [btrfs]
       btrfs_join_transaction+0x1d/0x20 [btrfs]
       btrfs_finish_ordered_io+0x55d/0xcd0 [btrfs]
       finish_ordered_fn+0x15/0x20 [btrfs]
       btrfs_work_helper+0x116/0x9a0 [btrfs]
       process_one_work+0x632/0xb80
       worker_thread+0x80/0x690
       kthread+0x1a3/0x1f0
       ret_from_fork+0x27/0x50
    
    It's pretty hard to reproduce, only one hit so far.
    
    [CAUSE]
    This is because we're calling btrfs_join_transaction() without re-using
    the current running one:
    
    btrfs_finish_ordered_io()
    |- btrfs_join_transaction()             <<< Call #1
       |- btrfs_record_root_in_trans()
          |- btrfs_reserve_extent()
             |- btrfs_join_transaction()    <<< Call #2
    
    Normally such btrfs_join_transaction() call should re-use the existing
    one, without trying to re-start a transaction.
    
    But the problem is, in btrfs_join_transaction() call #1, we call
    btrfs_record_root_in_trans() before initializing current::journal_info.
    
    And in btrfs_join_transaction() call #2, we're relying on
    current::journal_info to avoid such deadlock.
    
    [FIX]
    Call btrfs_record_root_in_trans() after we have initialized
    current::journal_info.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00043456efcde73ff0e87bb83068c105a38166cf
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Apr 23 16:30:53 2020 +0100

    btrfs: fix partial loss of prealloc extent past i_size after fsync
    
    commit f135cea30de5f74d5bfb5116682073841fb4af8f upstream.
    
    When we have an inode with a prealloc extent that starts at an offset
    lower than the i_size and there is another prealloc extent that starts at
    an offset beyond i_size, we can end up losing part of the first prealloc
    extent (the part that starts at i_size) and have an implicit hole if we
    fsync the file and then have a power failure.
    
    Consider the following example with comments explaining how and why it
    happens.
    
      $ mkfs.btrfs -f /dev/sdb
      $ mount /dev/sdb /mnt
    
      # Create our test file with 2 consecutive prealloc extents, each with a
      # size of 128Kb, and covering the range from 0 to 256Kb, with a file
      # size of 0.
      $ xfs_io -f -c "falloc -k 0 128K" /mnt/foo
      $ xfs_io -c "falloc -k 128K 128K" /mnt/foo
    
      # Fsync the file to record both extents in the log tree.
      $ xfs_io -c "fsync" /mnt/foo
    
      # Now do a redudant extent allocation for the range from 0 to 64Kb.
      # This will merely increase the file size from 0 to 64Kb. Instead we
      # could also do a truncate to set the file size to 64Kb.
      $ xfs_io -c "falloc 0 64K" /mnt/foo
    
      # Fsync the file, so we update the inode item in the log tree with the
      # new file size (64Kb). This also ends up setting the number of bytes
      # for the first prealloc extent to 64Kb. This is done by the truncation
      # at btrfs_log_prealloc_extents().
      # This means that if a power failure happens after this, a write into
      # the file range 64Kb to 128Kb will not use the prealloc extent and
      # will result in allocation of a new extent.
      $ xfs_io -c "fsync" /mnt/foo
    
      # Now set the file size to 256K with a truncate and then fsync the file.
      # Since no changes happened to the extents, the fsync only updates the
      # i_size in the inode item at the log tree. This results in an implicit
      # hole for the file range from 64Kb to 128Kb, something which fsck will
      # complain when not using the NO_HOLES feature if we replay the log
      # after a power failure.
      $ xfs_io -c "truncate 256K" -c "fsync" /mnt/foo
    
    So instead of always truncating the log to the inode's current i_size at
    btrfs_log_prealloc_extents(), check first if there's a prealloc extent
    that starts at an offset lower than the i_size and with a length that
    crosses the i_size - if there is one, just make sure we truncate to a
    size that corresponds to the end offset of that prealloc extent, so
    that we don't lose the part of that extent that starts at i_size if a
    power failure happens.
    
    A test case for fstests follows soon.
    
    Fixes: 31d11b83b96f ("Btrfs: fix duplicate extents after fsync of file with prealloc extents")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23075857ad192731fd9edcce3b5cd5db93602c26
Author: Paul Moore <paul@paul-moore.com>
Date:   Tue Apr 28 09:59:02 2020 -0400

    selinux: properly handle multiple messages in selinux_netlink_send()
    
    commit fb73974172ffaaf57a7c42f35424d9aece1a5af6 upstream.
    
    Fix the SELinux netlink_send hook to properly handle multiple netlink
    messages in a single sk_buff; each message is parsed and subject to
    SELinux access control.  Prior to this patch, SELinux only inspected
    the first message in the sk_buff.
    
    Cc: stable@vger.kernel.org
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Stephen Smalley <stephen.smalley.work@gmail.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87cb81e69b197fdb9f42ec5c2e2ca5022cea8626
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Apr 24 19:11:42 2020 +0300

    dmaengine: dmatest: Fix iteration non-stop logic
    
    commit b9f960201249f20deea586b4ec814669b4c6b1c0 upstream.
    
    Under some circumstances, i.e. when test is still running and about to
    time out and user runs, for example,
    
            grep -H . /sys/module/dmatest/parameters/*
    
    the iterations parameter is not respected and test is going on and on until
    user gives
    
            echo 0 > /sys/module/dmatest/parameters/run
    
    This is not what expected.
    
    The history of this bug is interesting. I though that the commit
      2d88ce76eb98 ("dmatest: add a 'wait' parameter")
    is a culprit, but looking closer to the code I think it simple revealed the
    broken logic from the day one, i.e. in the commit
      0a2ff57d6fba ("dmaengine: dmatest: add a maximum number of test iterations")
    which adds iterations parameter.
    
    So, to the point, the conditional of checking the thread to be stopped being
    first part of conjunction logic prevents to check iterations. Thus, we have to
    always check both conditions to be able to stop after given iterations.
    
    Since it wasn't visible before second commit appeared, I add a respective
    Fixes tag.
    
    Fixes: 2d88ce76eb98 ("dmatest: add a 'wait' parameter")
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/20200424161147.16895-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b4e9bfa245fa6b0c149326e1c8abb14cae5e9b8
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Mon Apr 20 15:51:47 2020 +0200

    nfs: Fix potential posix_acl refcnt leak in nfs3_set_acl
    
    commit 7648f939cb919b9d15c21fff8cd9eba908d595dc upstream.
    
    nfs3_set_acl keeps track of the acl it allocated locally to determine if an acl
    needs to be released at the end.  This results in a memory leak when the
    function allocates an acl as well as a default acl.  Fix by releasing acls
    that differ from the acl originally passed into nfs3_set_acl.
    
    Fixes: b7fa0554cf1b ("[PATCH] NFS: Add support for NFSv3 ACLs")
    Reported-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eadf95a680792b24c2bc38bb3df8ec30ac268143
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 29 21:02:03 2020 +0200

    ALSA: opti9xx: shut up gcc-10 range warning
    
    commit 5ce00760a84848d008554c693ceb6286f4d9c509 upstream.
    
    gcc-10 points out a few instances of suspicious integer arithmetic
    leading to value truncation:
    
    sound/isa/opti9xx/opti92x-ad1848.c: In function 'snd_opti9xx_configure':
    sound/isa/opti9xx/opti92x-ad1848.c:322:43: error: overflow in conversion from 'int' to 'unsigned char' changes value from '(int)snd_opti9xx_read(chip, 3) & -256 | 240' to '240' [-Werror=overflow]
      322 |   (snd_opti9xx_read(chip, reg) & ~(mask)) | ((value) & (mask)))
          |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
    sound/isa/opti9xx/opti92x-ad1848.c:351:3: note: in expansion of macro 'snd_opti9xx_write_mask'
      351 |   snd_opti9xx_write_mask(chip, OPTi9XX_MC_REG(3), 0xf0, 0xff);
          |   ^~~~~~~~~~~~~~~~~~~~~~
    sound/isa/opti9xx/miro.c: In function 'snd_miro_configure':
    sound/isa/opti9xx/miro.c:873:40: error: overflow in conversion from 'int' to 'unsigned char' changes value from '(int)snd_miro_read(chip, 3) & -256 | 240' to '240' [-Werror=overflow]
      873 |   (snd_miro_read(chip, reg) & ~(mask)) | ((value) & (mask)))
          |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
    sound/isa/opti9xx/miro.c:1010:3: note: in expansion of macro 'snd_miro_write_mask'
     1010 |   snd_miro_write_mask(chip, OPTi9XX_MC_REG(3), 0xf0, 0xff);
          |   ^~~~~~~~~~~~~~~~~~~
    
    These are all harmless here as only the low 8 bit are passed down
    anyway. Change the macros to inline functions to make the code
    more readable and also avoid the warning.
    
    Strictly speaking those functions also need locking to make the
    read/write pair atomic, but it seems unlikely that anyone would
    still run into that issue.
    
    Fixes: 1841f613fd2e ("[ALSA] Add snd-miro driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20200429190216.85919-1-arnd@arndb.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fc9c61fc8289ce17acbd88adbed1b01f6a7f551
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Wed Apr 22 08:30:02 2020 -0500

    iommu/amd: Fix legacy interrupt remapping for x2APIC-enabled system
    
    commit b74aa02d7a30ee5e262072a7d6e8deff10b37924 upstream.
    
    Currently, system fails to boot because the legacy interrupt remapping
    mode does not enable 128-bit IRTE (GA), which is required for x2APIC
    support.
    
    Fix by using AMD_IOMMU_GUEST_IR_LEGACY_GA mode when booting with
    kernel option amd_iommu_intr=legacy instead. The initialization
    logic will check GASup and automatically fallback to using
    AMD_IOMMU_GUEST_IR_LEGACY if GA mode is not supported.
    
    Fixes: 3928aa3f5775 ("iommu/amd: Detect and enable guest vAPIC support")
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Link: https://lore.kernel.org/r/1587562202-14183-1-git-send-email-suravee.suthikulpanit@amd.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b454d754cb174bbb15fdfb2aab82bdc1d3248253
Author: David Disseldorp <ddiss@suse.de>
Date:   Sun Apr 19 18:31:09 2020 +0200

    scsi: target/iblock: fix WRITE SAME zeroing
    
    commit 1d2ff149b263c9325875726a7804a0c75ef7112e upstream.
    
    SBC4 specifies that WRITE SAME requests with the UNMAP bit set to zero
    "shall perform the specified write operation to each LBA specified by the
    command".  Commit 2237498f0b5c ("target/iblock: Convert WRITE_SAME to
    blkdev_issue_zeroout") modified the iblock backend to call
    blkdev_issue_zeroout() when handling WRITE SAME requests with UNMAP=0 and a
    zero data segment.
    
    The iblock blkdev_issue_zeroout() call incorrectly provides a flags
    parameter of 0 (bool false), instead of BLKDEV_ZERO_NOUNMAP.  The bool
    false parameter reflects the blkdev_issue_zeroout() API prior to commit
    ee472d835c26 ("block: add a flags argument to (__)blkdev_issue_zeroout")
    which was merged shortly before 2237498f0b5c.
    
    Link: https://lore.kernel.org/r/20200419163109.11689-1-ddiss@suse.de
    Fixes: 2237498f0b5c ("target/iblock: Convert WRITE_SAME to blkdev_issue_zeroout")
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d40ceed180446939dd9c2f6e03b093a64497fa27
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Sat Apr 18 21:47:03 2020 +0800

    iommu/qcom: Fix local_base status check
    
    commit b52649aee6243ea661905bdc5fbe28cc5f6dec76 upstream.
    
    The function qcom_iommu_device_probe() does not perform sufficient
    error checking after executing devm_ioremap_resource(), which can
    result in crashes if a critical error path is encountered.
    
    Fixes: 0ae349a0f33f ("iommu/qcom: Add qcom_iommu")
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20200418134703.1760-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf25855e9f838a9724766c973bc6bb0916a161cc
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Apr 16 15:50:57 2020 -0700

    vfio/type1: Fix VA->PA translation for PFNMAP VMAs in vaddr_get_pfn()
    
    commit 5cbf3264bc715e9eb384e2b68601f8c02bb9a61d upstream.
    
    Use follow_pfn() to get the PFN of a PFNMAP VMA instead of assuming that
    vma->vm_pgoff holds the base PFN of the VMA.  This fixes a bug where
    attempting to do VFIO_IOMMU_MAP_DMA on an arbitrary PFNMAP'd region of
    memory calculates garbage for the PFN.
    
    Hilariously, this only got detected because the first "PFN" calculated
    by vaddr_get_pfn() is PFN 0 (vma->vm_pgoff==0), and iommu_iova_to_phys()
    uses PA==0 as an error, which triggers a WARN in vfio_unmap_unpin()
    because the translation "failed".  PFN 0 is now unconditionally reserved
    on x86 in order to mitigate L1TF, which causes is_invalid_reserved_pfn()
    to return true and in turns results in vaddr_get_pfn() returning success
    for PFN 0.  Eventually the bogus calculation runs into PFNs that aren't
    reserved and leads to failure in vfio_pin_map_dma().  The subsequent
    call to vfio_remove_dma() attempts to unmap PFN 0 and WARNs.
    
      WARNING: CPU: 8 PID: 5130 at drivers/vfio/vfio_iommu_type1.c:750 vfio_unmap_unpin+0x2e1/0x310 [vfio_iommu_type1]
      Modules linked in: vfio_pci vfio_virqfd vfio_iommu_type1 vfio ...
      CPU: 8 PID: 5130 Comm: sgx Tainted: G        W         5.6.0-rc5-705d787c7fee-vfio+ #3
      Hardware name: Intel Corporation Mehlow UP Server Platform/Moss Beach Server, BIOS CNLSE2R1.D00.X119.B49.1803010910 03/01/2018
      RIP: 0010:vfio_unmap_unpin+0x2e1/0x310 [vfio_iommu_type1]
      Code: <0f> 0b 49 81 c5 00 10 00 00 e9 c5 fe ff ff bb 00 10 00 00 e9 3d fe
      RSP: 0018:ffffbeb5039ebda8 EFLAGS: 00010246
      RAX: 0000000000000000 RBX: ffff9a55cbf8d480 RCX: 0000000000000000
      RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff9a52b771c200
      RBP: 0000000000000000 R08: 0000000000000040 R09: 00000000fffffff2
      R10: 0000000000000001 R11: ffff9a51fa896000 R12: 0000000184010000
      R13: 0000000184000000 R14: 0000000000010000 R15: ffff9a55cb66ea08
      FS:  00007f15d3830b40(0000) GS:ffff9a55d5600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000561cf39429e0 CR3: 000000084f75f005 CR4: 00000000003626e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       vfio_remove_dma+0x17/0x70 [vfio_iommu_type1]
       vfio_iommu_type1_ioctl+0x9e3/0xa7b [vfio_iommu_type1]
       ksys_ioctl+0x92/0xb0
       __x64_sys_ioctl+0x16/0x20
       do_syscall_64+0x4c/0x180
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f15d04c75d7
      Code: <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 81 48 2d 00 f7 d8 64 89 01 48
    
    Fixes: 73fa0d10d077 ("vfio: Type1 IOMMU implementation")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f034b331ef320911a865aa2fb4562b290fea3271
Author: Yan Zhao <yan.y.zhao@intel.com>
Date:   Wed Apr 8 03:12:34 2020 -0400

    vfio: avoid possible overflow in vfio_iommu_type1_pin_pages
    
    commit 0ea971f8dcd6dee78a9a30ea70227cf305f11ff7 upstream.
    
    add parentheses to avoid possible vaddr overflow.
    
    Fixes: a54eb55045ae ("vfio iommu type1: Add support for mediated devices")
    Signed-off-by: Yan Zhao <yan.y.zhao@intel.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 751e8b062af0cec10ebda5c70f02f4a7a67eaade
Author: Leon Romanovsky <leon@kernel.org>
Date:   Thu Apr 23 09:01:22 2020 +0300

    RDMA/core: Fix race between destroy and release FD object
    
    commit f0abc761bbb9418876cc4d1ebc473e4ea6352e42 upstream.
    
    The call to ->lookup_put() was too early and it caused an unlock of the
    read/write protection of the uobject after the FD was put. This allows a
    race:
    
         CPU1                                 CPU2
     rdma_lookup_put_uobject()
       lookup_put_fd_uobject()
         fput()
                                       fput()
                                         uverbs_uobject_fd_release()
                                           WARN_ON(uverbs_try_lock_object(uobj,
                                                   UVERBS_LOOKUP_WRITE));
       atomic_dec(usecnt)
    
    Fix the code by changing the order, first unlock and call to
    ->lookup_put() after that.
    
    Fixes: 3832125624b7 ("IB/core: Add support for idr types")
    Link: https://lore.kernel.org/r/20200423060122.6182-1-leon@kernel.org
    Suggested-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c5640c17b4a87122922253ce483ba25fb503ace
Author: Leon Romanovsky <leon@kernel.org>
Date:   Tue Apr 21 11:29:28 2020 +0300

    RDMA/core: Prevent mixed use of FDs between shared ufiles
    
    commit 0fb00941dc63990a10951146df216fc7b0e20bc2 upstream.
    
    FDs can only be used on the ufile that created them, they cannot be mixed
    to other ufiles. We are lacking a check to prevent it.
    
      BUG: KASAN: null-ptr-deref in atomic64_sub_and_test include/asm-generic/atomic-instrumented.h:1547 [inline]
      BUG: KASAN: null-ptr-deref in atomic_long_sub_and_test include/asm-generic/atomic-long.h:460 [inline]
      BUG: KASAN: null-ptr-deref in fput_many+0x1a/0x140 fs/file_table.c:336
      Write of size 8 at addr 0000000000000038 by task syz-executor179/284
    
      CPU: 0 PID: 284 Comm: syz-executor179 Not tainted 5.5.0-rc5+ #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x94/0xce lib/dump_stack.c:118
       __kasan_report+0x18f/0x1b7 mm/kasan/report.c:510
       kasan_report+0xe/0x20 mm/kasan/common.c:639
       check_memory_region_inline mm/kasan/generic.c:185 [inline]
       check_memory_region+0x15d/0x1b0 mm/kasan/generic.c:192
       atomic64_sub_and_test include/asm-generic/atomic-instrumented.h:1547 [inline]
       atomic_long_sub_and_test include/asm-generic/atomic-long.h:460 [inline]
       fput_many+0x1a/0x140 fs/file_table.c:336
       rdma_lookup_put_uobject+0x85/0x130 drivers/infiniband/core/rdma_core.c:692
       uobj_put_read include/rdma/uverbs_std_types.h:96 [inline]
       _ib_uverbs_lookup_comp_file drivers/infiniband/core/uverbs_cmd.c:198 [inline]
       create_cq+0x375/0xba0 drivers/infiniband/core/uverbs_cmd.c:1006
       ib_uverbs_create_cq+0x114/0x140 drivers/infiniband/core/uverbs_cmd.c:1089
       ib_uverbs_write+0xaa5/0xdf0 drivers/infiniband/core/uverbs_main.c:769
       __vfs_write+0x7c/0x100 fs/read_write.c:494
       vfs_write+0x168/0x4a0 fs/read_write.c:558
       ksys_write+0xc8/0x200 fs/read_write.c:611
       do_syscall_64+0x9c/0x390 arch/x86/entry/common.c:294
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x44ef99
      Code: 00 b8 00 01 00 00 eb e1 e8 74 1c 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 c4 ff ff ff f7 d8 64 89 01 48
      RSP: 002b:00007ffc0b74c028 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
      RAX: ffffffffffffffda RBX: 00007ffc0b74c030 RCX: 000000000044ef99
      RDX: 0000000000000040 RSI: 0000000020000040 RDI: 0000000000000005
      RBP: 00007ffc0b74c038 R08: 0000000000401830 R09: 0000000000401830
      R10: 00007ffc0b74c038 R11: 0000000000000246 R12: 0000000000000000
      R13: 0000000000000000 R14: 00000000006be018 R15: 0000000000000000
    
    Fixes: cf8966b3477d ("IB/core: Add support for fd objects")
    Link: https://lore.kernel.org/r/20200421082929.311931-2-leon@kernel.org
    Suggested-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4611d2a4acbc4c50554bc03fe57e1d08ef61091a
Author: Alaa Hleihel <alaa@mellanox.com>
Date:   Mon Apr 13 16:22:35 2020 +0300

    RDMA/mlx4: Initialize ib_spec on the stack
    
    commit c08cfb2d8d78bfe81b37cc6ba84f0875bddd0d5c upstream.
    
    Initialize ib_spec on the stack before using it, otherwise we will have
    garbage values that will break creating default rules with invalid parsing
    error.
    
    Fixes: a37a1a428431 ("IB/mlx4: Add mechanism to support flow steering over IB links")
    Link: https://lore.kernel.org/r/20200413132235.930642-1-leon@kernel.org
    Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bdec3820fa3faa1bb0e786fc0f359d9c6efd233
Author: Aharon Landau <aharonl@mellanox.com>
Date:   Mon Apr 13 16:20:28 2020 +0300

    RDMA/mlx5: Set GRH fields in query QP on RoCE
    
    commit 2d7e3ff7b6f2c614eb21d0dc348957a47eaffb57 upstream.
    
    GRH fields such as sgid_index, hop limit, et. are set in the QP context
    when QP is created/modified.
    
    Currently, when query QP is performed, we fill the GRH fields only if the
    GRH bit is set in the QP context, but this bit is not set for RoCE. Adjust
    the check so we will set all relevant data for the RoCE too.
    
    Since this data is returned to userspace, the below is an ABI regression.
    
    Fixes: d8966fcd4c25 ("IB/core: Use rdma_ah_attr accessor functions")
    Link: https://lore.kernel.org/r/20200413132028.930109-1-leon@kernel.org
    Signed-off-by: Aharon Landau <aharonl@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ee924b0e6e4f598ee24006c2b80c2891c8f60aa
Author: Martin Wilck <mwilck@suse.com>
Date:   Tue Apr 21 22:46:21 2020 +0200

    scsi: qla2xxx: check UNLOADING before posting async work
    
    commit 5a263892d7d0b4fe351363f8d1a14c6a75955475 upstream.
    
    qlt_free_session_done() tries to post async PRLO / LOGO, and waits for the
    completion of these async commands. If UNLOADING is set, this is doomed to
    timeout, because the async logout command will never complete.
    
    The only way to avoid waiting pointlessly is to fail posting these commands
    in the first place if the driver is in UNLOADING state.  In general,
    posting any command should be avoided when the driver is UNLOADING.
    
    With this patch, "rmmod qla2xxx" completes without noticeable delay.
    
    Link: https://lore.kernel.org/r/20200421204621.19228-3-mwilck@suse.com
    Fixes: 45235022da99 ("scsi: qla2xxx: Fix driver unload by shutting down chip")
    Acked-by: Arun Easi <aeasi@marvell.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 996fe7ca7438dd19f925895942be0dc11a22a926
Author: Martin Wilck <mwilck@suse.com>
Date:   Tue Apr 21 22:46:20 2020 +0200

    scsi: qla2xxx: set UNLOADING before waiting for session deletion
    
    commit 856e152a3c08bf7987cbd41900741d83d9cddc8e upstream.
    
    The purpose of the UNLOADING flag is to avoid port login procedures to
    continue when a controller is in the process of shutting down.  It makes
    sense to set this flag before starting session teardown.
    
    Furthermore, use atomic test_and_set_bit() to avoid the shutdown being run
    multiple times in parallel. In qla2x00_disable_board_on_pci_error(), the
    test for UNLOADING is postponed until after the check for an already
    disabled PCI board.
    
    Link: https://lore.kernel.org/r/20200421204621.19228-2-mwilck@suse.com
    Fixes: 45235022da99 ("scsi: qla2xxx: Fix driver unload by shutting down chip")
    Reviewed-by: Arun Easi <aeasi@marvell.com>
    Reviewed-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2cf97eaaa8fb2a7c3875b17a303da878de4d774
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Mon Apr 27 20:39:11 2020 -0400

    dm multipath: use updated MPATHF_QUEUE_IO on mapping for bio-based mpath
    
    commit 5686dee34dbfe0238c0274e0454fa0174ac0a57a upstream.
    
    When adding devices that don't have a scsi_dh on a BIO based multipath,
    I was able to consistently hit the warning below and lock-up the system.
    
    The problem is that __map_bio reads the flag before it potentially being
    modified by choose_pgpath, and ends up using the older value.
    
    The WARN_ON below is not trivially linked to the issue. It goes like
    this: The activate_path delayed_work is not initialized for non-scsi_dh
    devices, but we always set MPATHF_QUEUE_IO, asking for initialization.
    That is fine, since MPATHF_QUEUE_IO would be cleared in choose_pgpath.
    Nevertheless, only for BIO-based mpath, we cache the flag before calling
    choose_pgpath, and use the older version when deciding if we should
    initialize the path.  Therefore, we end up trying to initialize the
    paths, and calling the non-initialized activate_path work.
    
    [   82.437100] ------------[ cut here ]------------
    [   82.437659] WARNING: CPU: 3 PID: 602 at kernel/workqueue.c:1624
      __queue_delayed_work+0x71/0x90
    [   82.438436] Modules linked in:
    [   82.438911] CPU: 3 PID: 602 Comm: systemd-udevd Not tainted 5.6.0-rc6+ #339
    [   82.439680] RIP: 0010:__queue_delayed_work+0x71/0x90
    [   82.440287] Code: c1 48 89 4a 50 81 ff 00 02 00 00 75 2a 4c 89 cf e9
    94 d6 07 00 e9 7f e9 ff ff 0f 0b eb c7 0f 0b 48 81 7a 58 40 74 a8 94 74
    a7 <0f> 0b 48 83 7a 48 00 74 a5 0f 0b eb a1 89 fe 4c 89 cf e9 c8 c4 07
    [   82.441719] RSP: 0018:ffffb738803977c0 EFLAGS: 00010007
    [   82.442121] RAX: ffffa086389f9740 RBX: 0000000000000002 RCX: 0000000000000000
    [   82.442718] RDX: ffffa086350dd930 RSI: ffffa0863d76f600 RDI: 0000000000000200
    [   82.443484] RBP: 0000000000000200 R08: 0000000000000000 R09: ffffa086350dd970
    [   82.444128] R10: 0000000000000000 R11: 0000000000000000 R12: ffffa086350dd930
    [   82.444773] R13: ffffa0863d76f600 R14: 0000000000000000 R15: ffffa08636738008
    [   82.445427] FS:  00007f6abfe9dd40(0000) GS:ffffa0863dd80000(0000) knlGS:00000
    [   82.446040] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   82.446478] CR2: 0000557d288db4e8 CR3: 0000000078b36000 CR4: 00000000000006e0
    [   82.447104] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   82.447561] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   82.448012] Call Trace:
    [   82.448164]  queue_delayed_work_on+0x6d/0x80
    [   82.448472]  __pg_init_all_paths+0x7b/0xf0
    [   82.448714]  pg_init_all_paths+0x26/0x40
    [   82.448980]  __multipath_map_bio.isra.0+0x84/0x210
    [   82.449267]  __map_bio+0x3c/0x1f0
    [   82.449468]  __split_and_process_non_flush+0x14a/0x1b0
    [   82.449775]  __split_and_process_bio+0xde/0x340
    [   82.450045]  ? dm_get_live_table+0x5/0xb0
    [   82.450278]  dm_process_bio+0x98/0x290
    [   82.450518]  dm_make_request+0x54/0x120
    [   82.450778]  generic_make_request+0xd2/0x3e0
    [   82.451038]  ? submit_bio+0x3c/0x150
    [   82.451278]  submit_bio+0x3c/0x150
    [   82.451492]  mpage_readpages+0x129/0x160
    [   82.451756]  ? bdev_evict_inode+0x1d0/0x1d0
    [   82.452033]  read_pages+0x72/0x170
    [   82.452260]  __do_page_cache_readahead+0x1ba/0x1d0
    [   82.452624]  force_page_cache_readahead+0x96/0x110
    [   82.452903]  generic_file_read_iter+0x84f/0xae0
    [   82.453192]  ? __seccomp_filter+0x7c/0x670
    [   82.453547]  new_sync_read+0x10e/0x190
    [   82.453883]  vfs_read+0x9d/0x150
    [   82.454172]  ksys_read+0x65/0xe0
    [   82.454466]  do_syscall_64+0x4e/0x210
    [   82.454828]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [...]
    [   82.462501] ---[ end trace bb39975e9cf45daa ]---
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7889936a925b318c787da898953e7c8857a93a30
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Apr 15 11:01:38 2020 -0400

    dm writecache: fix data corruption when reloading the target
    
    commit 31b22120194b5c0d460f59e0c98504de1d3f1f14 upstream.
    
    The dm-writecache reads metadata in the target constructor. However, when
    we reload the target, there could be another active instance running on
    the same device. This is the sequence of operations when doing a reload:
    
    1. construct new target
    2. suspend old target
    3. resume new target
    4. destroy old target
    
    Metadata that were written by the old target between steps 1 and 2 would
    not be visible by the new target.
    
    Fix the data corruption by loading the metadata in the resume handler.
    
    Also, validate block_size is at least as large as both the devices'
    logical block size and only read 1 block from the metadata during
    target constructor -- no need to read entirety of metadata now that it
    is done during resume.
    
    Fixes: 48debafe4f2f ("dm: add writecache target")
    Cc: stable@vger.kernel.org # v4.18+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4440a77802d2b3c494eb9711bf26e98331ab702
Author: Sunwook Eom <speed.eom@samsung.com>
Date:   Fri Apr 10 12:54:19 2020 +0900

    dm verity fec: fix hash block number in verity_fec_decode
    
    commit ad4e80a639fc61d5ecebb03caa5cdbfb91fcebfc upstream.
    
    The error correction data is computed as if data and hash blocks
    were concatenated. But hash block number starts from v->hash_start.
    So, we have to calculate hash block number based on that.
    
    Fixes: a739ff3f543af ("dm verity: add support for forward error correction")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sunwook Eom <speed.eom@samsung.com>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3904bdf0821c40352495f632862637080e6bd744
Author: Dexuan Cui <decui@microsoft.com>
Date:   Thu Apr 23 20:40:16 2020 -0700

    PM: hibernate: Freeze kernel threads in software_resume()
    
    commit 2351f8d295ed63393190e39c2f7c1fee1a80578f upstream.
    
    Currently the kernel threads are not frozen in software_resume(), so
    between dpm_suspend_start(PMSG_QUIESCE) and resume_target_kernel(),
    system_freezable_power_efficient_wq can still try to submit SCSI
    commands and this can cause a panic since the low level SCSI driver
    (e.g. hv_storvsc) has quiesced the SCSI adapter and can not accept
    any SCSI commands: https://lkml.org/lkml/2020/4/10/47
    
    At first I posted a fix (https://lkml.org/lkml/2020/4/21/1318) trying
    to resolve the issue from hv_storvsc, but with the help of
    Bart Van Assche, I realized it's better to fix software_resume(),
    since this looks like a generic issue, not only pertaining to SCSI.
    
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2484110b75a370969b6e9e0d9a5f810c979582ed
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Tue Apr 21 15:55:16 2020 +0800

    PM: ACPI: Output correct message on target power state
    
    commit a9b760b0266f563b4784f695bbd0e717610dc10a upstream.
    
    Transitioned power state logged at the end of setting ACPI power.
    
    However, D3cold won't be in the message because state can only be
    D3hot at most.
    
    Use target_state to corretly report when power state is D3cold.
    
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cacf120de65f336d57bdfd41466b65ed1c569c6
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Apr 24 21:33:50 2020 +0200

    ALSA: pcm: oss: Place the plugin buffer overflow checks correctly
    
    commit 4285de0725b1bf73608abbcd35ad7fd3ddc0b61e upstream.
    
    The checks of the plugin buffer overflow in the previous fix by commit
      f2ecf903ef06 ("ALSA: pcm: oss: Avoid plugin buffer overflow")
    are put in the wrong places mistakenly, which leads to the expected
    (repeated) sound when the rate plugin is involved.  Fix in the right
    places.
    
    Also, at those right places, the zero check is needed for the
    termination node, so added there as well, and let's get it done,
    finally.
    
    Fixes: f2ecf903ef06 ("ALSA: pcm: oss: Avoid plugin buffer overflow")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200424193350.19678-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55121ccf2fb6e82fceb3c15f36ace7b895345345
Author: Wu Bo <wubo40@huawei.com>
Date:   Sun Apr 26 21:17:22 2020 +0800

    ALSA: hda/hdmi: fix without unlocked before return
    
    commit a2f647240998aa49632fb09b01388fdf2b87acfc upstream.
    
    Fix the following coccicheck warning:
    sound/pci/hda/patch_hdmi.c:1852:2-8: preceding lock on line 1846
    
    After add sanity check to pass klockwork check,
    The spdif_mutex should be unlock before return true
    in check_non_pcm_per_cvt().
    
    Fixes: 960a581e22d9 ("ALSA: hda: fix some klockwork scan warnings")
    Signed-off-by: Wu Bo <wubo40@huawei.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1587907042-694161-1-git-send-email-wubo40@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6597663da5859f6d847f7ef0517a63085dc532ed
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Apr 30 14:47:55 2020 +0200

    ALSA: usb-audio: Correct a typo of NuPrime DAC-10 USB ID
    
    commit 547d2c9cf4f1f72adfecacbd5b093681fb0e8b3e upstream.
    
    The USB vendor ID of NuPrime DAC-10 is not 16b0 but 16d0.
    
    Fixes: f656891c6619 ("ALSA: usb-audio: add more quirks for DSD interfaces")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200430124755.15940-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e6fea947214fe6080908cb2393a8df8e9e20c92
Author: Hui Wang <hui.wang@canonical.com>
Date:   Mon Apr 27 11:00:39 2020 +0800

    ALSA: hda/realtek - Two front mics on a Lenovo ThinkCenter
    
    commit ef0b3203c758b6b8abdb5dca651880347eae6b8c upstream.
    
    This new Lenovo ThinkCenter has two front mics which can't be handled
    by PA so far, so apply the fixup ALC283_FIXUP_HEADSET_MIC to change
    the location for one of the mics.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20200427030039.10121-1-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 220bf45d601cead55cf2c13d98ad5d689ce431e8
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Tue Apr 21 10:54:11 2020 +0800

    btrfs: fix block group leak when removing fails
    
    commit f6033c5e333238f299c3ae03fac8cc1365b23b77 upstream.
    
    btrfs_remove_block_group() invokes btrfs_lookup_block_group(), which
    returns a local reference of the block group that contains the given
    bytenr to "block_group" with increased refcount.
    
    When btrfs_remove_block_group() returns, "block_group" becomes invalid,
    so the refcount should be decreased to keep refcount balanced.
    
    The reference counting issue happens in several exception handling paths
    of btrfs_remove_block_group(). When those error scenarios occur such as
    btrfs_alloc_path() returns NULL, the function forgets to decrease its
    refcnt increased by btrfs_lookup_block_group() and will cause a refcnt
    leak.
    
    Fix this issue by jumping to "out_put_group" label and calling
    btrfs_put_block_group() when those error scenarios occur.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d28ac49eba7426828250799d2e76a1918e4dc2e
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Wed Apr 29 12:01:24 2020 +0300

    drm/qxl: qxl_release use after free
    
    commit 933db73351d359f74b14f4af095808260aff11f9 upstream.
    
    qxl_release should not be accesses after qxl_push_*_ring_release() calls:
    userspace driver can process submitted command quickly, move qxl_release
    into release_ring, generate interrupt and trigger garbage collector.
    
    It can lead to crashes in qxl driver or trigger memory corruption
    in some kmalloc-192 slab object
    
    Gerd Hoffmann proposes to swap the qxl_release_fence_buffer_objects() +
    qxl_push_{cursor,command}_ring_release() calls to close that race window.
    
    cc: stable@vger.kernel.org
    Fixes: f64122c1f6ad ("drm: add new QXL driver. (v1.4)")
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/fa17b338-66ae-f299-68fe-8d32419d9071@virtuozzo.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    [backported to v.4.19 stable]
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8d36f64dd19eaf3f820b2a55db7a8f9a470f8f1
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Mon Apr 27 08:32:51 2020 +0300

    drm/qxl: qxl_release leak in qxl_hw_surface_alloc()
    
    commit a65aa9c3676ffccb21361d52fcfedd5b5ff387d7 upstream.
    
    Cc: stable@vger.kernel.org
    Fixes: 8002db6336dd ("qxl: convert qxl driver to proper use for reservations")
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/2e5a13ae-9ab2-5401-aa4d-03d5f5593423@virtuozzo.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6018a5810ac4837c4c51ae306e040b13e2f4d79
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Mon Apr 27 08:32:46 2020 +0300

    drm/qxl: qxl_release leak in qxl_draw_dirty_fb()
    
    commit 85e9b88af1e6164f19ec71381efd5e2bcfc17620 upstream.
    
    ret should be changed to release allocated struct qxl_release
    
    Cc: stable@vger.kernel.org
    Fixes: 8002db6336dd ("qxl: convert qxl driver to proper use for reservations")
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/22cfd55f-07c8-95d0-a2f7-191b7153c3d4@virtuozzo.com
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85b1efa12a7fa209e0e3e254d6ea466c8ec3d083
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Apr 23 18:17:43 2020 +0300

    drm/edid: Fix off-by-one in DispID DTD pixel clock
    
    commit 6292b8efe32e6be408af364132f09572aed14382 upstream.
    
    The DispID DTD pixel clock is documented as:
    "00 00 00 h → FF FF FF h | Pixel clock ÷ 10,000 0.01 → 167,772.16 Mega Pixels per Sec"
    Which seems to imply that we to add one to the raw value.
    
    Reality seems to agree as there are tiled displays in the wild
    which currently show a 10kHz difference in the pixel clock
    between the tiles (one tile gets its mode from the base EDID,
    the other from the DispID block).
    
    Cc: stable@vger.kernel.org
    References: https://gitlab.freedesktop.org/drm/intel/-/issues/27
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200423151743.18767-1-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
