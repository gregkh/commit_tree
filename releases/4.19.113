commit 54b4fa6d39551639cb10664f6ac78b01993a1d7e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 25 08:06:15 2020 +0100

    Linux 4.19.113

commit d4462fb6c247d3f36f8e5974ec8279a558fd4dac
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 12 12:01:51 2020 +0100

    staging: greybus: loopback_test: fix potential path truncations
    
    commit ae62cf5eb2792d9a818c2d93728ed92119357017 upstream.
    
    Newer GCC warns about possible truncations of two generated path names as
    we're concatenating the configurable sysfs and debugfs path prefixes
    with a filename and placing the results in buffers of the same size as
    the maximum length of the prefixes.
    
            snprintf(d->name, MAX_STR_LEN, "gb_loopback%u", dev_id);
    
            snprintf(d->sysfs_entry, MAX_SYSFS_PATH, "%s%s/",
                     t->sysfs_prefix, d->name);
    
            snprintf(d->debugfs_entry, MAX_SYSFS_PATH, "%sraw_latency_%s",
                     t->debugfs_prefix, d->name);
    
    Fix this by separating the maximum path length from the maximum prefix
    length and reducing the latter enough to fit the generated strings.
    
    Note that we also need to reduce the device-name buffer size as GCC
    isn't smart enough to figure out that we ever only used MAX_STR_LEN
    bytes of it.
    
    Fixes: 6b0658f68786 ("greybus: tools: Add tools directory to greybus repo and add loopback")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200312110151.22028-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d96de25fdb5fde246dc78bb02a63fc3771bc961
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 12 12:01:50 2020 +0100

    staging: greybus: loopback_test: fix potential path truncation
    
    commit f16023834863932f95dfad13fac3fc47f77d2f29 upstream.
    
    Newer GCC warns about a possible truncation of a generated sysfs path
    name as we're concatenating a directory path with a file name and
    placing the result in a buffer that is half the size of the maximum
    length of the directory path (which is user controlled).
    
    loopback_test.c: In function 'open_poll_files':
    loopback_test.c:651:31: warning: '%s' directive output may be truncated writing up to 511 bytes into a region of size 255 [-Wformat-truncation=]
      651 |   snprintf(buf, sizeof(buf), "%s%s", dev->sysfs_entry, "iteration_count");
          |                               ^~
    loopback_test.c:651:3: note: 'snprintf' output between 16 and 527 bytes into a destination of size 255
      651 |   snprintf(buf, sizeof(buf), "%s%s", dev->sysfs_entry, "iteration_count");
          |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Fix this by making sure the buffer is large enough the concatenated
    strings.
    
    Fixes: 6b0658f68786 ("greybus: tools: Add tools directory to greybus repo and add loopback")
    Fixes: 9250c0ee2626 ("greybus: Loopback_test: use poll instead of inotify")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200312110151.22028-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21213fb67401a6ad5ea3d36d8b404ce4c40a316a
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Thu Mar 5 00:25:09 2020 +0100

    drm/bridge: dw-hdmi: fix AVI frame colorimetry
    
    commit e8dca30f7118461d47e1c3510d0e31b277439151 upstream.
    
    CTA-861-F explicitly states that for RGB colorspace colorimetry should
    be set to "none". Fix that.
    
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Fixes: def23aa7e982 ("drm: bridge: dw-hdmi: Switch to V4L bus format and encodings")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200304232512.51616-2-jernej.skrabec@siol.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d59848cab47f7d1eae1cbbac6e15a290d9d835d7
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Mar 11 17:12:45 2020 +0000

    arm64: smp: fix crash_smp_send_stop() behaviour
    
    commit f50b7dacccbab2b9e3ef18f52a6dcc18ed2050b9 upstream.
    
    On a system configured to trigger a crash_kexec() reboot, when only one CPU
    is online and another CPU panics while starting-up, crash_smp_send_stop()
    will fail to send any STOP message to the other already online core,
    resulting in fail to freeze and registers not properly saved.
    
    Moreover even if the proper messages are sent (case CPUs > 2)
    it will similarly fail to account for the booting CPU when executing
    the final stop wait-loop, so potentially resulting in some CPU not
    been waited for shutdown before rebooting.
    
    A tangible effect of this behaviour can be observed when, after a panic
    with kexec enabled and loaded, on the following reboot triggered by kexec,
    the cpu that could not be successfully stopped fails to come back online:
    
    [  362.291022] ------------[ cut here ]------------
    [  362.291525] kernel BUG at arch/arm64/kernel/cpufeature.c:886!
    [  362.292023] Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    [  362.292400] Modules linked in:
    [  362.292970] CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Not tainted 5.6.0-rc4-00003-gc780b890948a #105
    [  362.293136] Hardware name: Foundation-v8A (DT)
    [  362.293382] pstate: 200001c5 (nzCv dAIF -PAN -UAO)
    [  362.294063] pc : has_cpuid_feature+0xf0/0x348
    [  362.294177] lr : verify_local_elf_hwcaps+0x84/0xe8
    [  362.294280] sp : ffff800011b1bf60
    [  362.294362] x29: ffff800011b1bf60 x28: 0000000000000000
    [  362.294534] x27: 0000000000000000 x26: 0000000000000000
    [  362.294631] x25: 0000000000000000 x24: ffff80001189a25c
    [  362.294718] x23: 0000000000000000 x22: 0000000000000000
    [  362.294803] x21: ffff8000114aa018 x20: ffff800011156a00
    [  362.294897] x19: ffff800010c944a0 x18: 0000000000000004
    [  362.294987] x17: 0000000000000000 x16: 0000000000000000
    [  362.295073] x15: 00004e53b831ae3c x14: 00004e53b831ae3c
    [  362.295165] x13: 0000000000000384 x12: 0000000000000000
    [  362.295251] x11: 0000000000000000 x10: 00400032b5503510
    [  362.295334] x9 : 0000000000000000 x8 : ffff800010c7e204
    [  362.295426] x7 : 00000000410fd0f0 x6 : 0000000000000001
    [  362.295508] x5 : 00000000410fd0f0 x4 : 0000000000000000
    [  362.295592] x3 : 0000000000000000 x2 : ffff8000100939d8
    [  362.295683] x1 : 0000000000180420 x0 : 0000000000180480
    [  362.296011] Call trace:
    [  362.296257]  has_cpuid_feature+0xf0/0x348
    [  362.296350]  verify_local_elf_hwcaps+0x84/0xe8
    [  362.296424]  check_local_cpu_capabilities+0x44/0x128
    [  362.296497]  secondary_start_kernel+0xf4/0x188
    [  362.296998] Code: 52805001 72a00301 6b01001f 54000ec0 (d4210000)
    [  362.298652] SMP: stopping secondary CPUs
    [  362.300615] Starting crashdump kernel...
    [  362.301168] Bye!
    [    0.000000] Booting Linux on physical CPU 0x0000000003 [0x410fd0f0]
    [    0.000000] Linux version 5.6.0-rc4-00003-gc780b890948a (crimar01@e120937-lin) (gcc version 8.3.0 (GNU Toolchain for the A-profile Architecture 8.3-2019.03 (arm-rel-8.36))) #105 SMP PREEMPT Fri Mar 6 17:00:42 GMT 2020
    [    0.000000] Machine model: Foundation-v8A
    [    0.000000] earlycon: pl11 at MMIO 0x000000001c090000 (options '')
    [    0.000000] printk: bootconsole [pl11] enabled
    .....
    [    0.138024] rcu: Hierarchical SRCU implementation.
    [    0.153472] its@2f020000: unable to locate ITS domain
    [    0.154078] its@2f020000: Unable to locate ITS domain
    [    0.157541] EFI services will not be available.
    [    0.175395] smp: Bringing up secondary CPUs ...
    [    0.209182] psci: failed to boot CPU1 (-22)
    [    0.209377] CPU1: failed to boot: -22
    [    0.274598] Detected PIPT I-cache on CPU2
    [    0.278707] GICv3: CPU2: found redistributor 1 region 0:0x000000002f120000
    [    0.285212] CPU2: Booted secondary processor 0x0000000001 [0x410fd0f0]
    [    0.369053] Detected PIPT I-cache on CPU3
    [    0.372947] GICv3: CPU3: found redistributor 2 region 0:0x000000002f140000
    [    0.378664] CPU3: Booted secondary processor 0x0000000002 [0x410fd0f0]
    [    0.401707] smp: Brought up 1 node, 3 CPUs
    [    0.404057] SMP: Total of 3 processors activated.
    
    Make crash_smp_send_stop() account also for the online status of the
    calling CPU while evaluating how many CPUs are effectively online: this way
    the right number of STOPs is sent and all other stopped-cores's registers
    are properly saved.
    
    Fixes: 78fd584cdec05 ("arm64: kdump: implement machine_crash_shutdown()")
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1dd632975d11e28ad532288b6dc865a054819cc7
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Wed Mar 11 17:12:44 2020 +0000

    arm64: smp: fix smp_send_stop() behaviour
    
    commit d0bab0c39e32d39a8c5cddca72e5b4a3059fe050 upstream.
    
    On a system with only one CPU online, when another one CPU panics while
    starting-up, smp_send_stop() will fail to send any STOP message to the
    other already online core, resulting in a system still responsive and
    alive at the end of the panic procedure.
    
    [  186.700083] CPU3: shutdown
    [  187.075462] CPU2: shutdown
    [  187.162869] CPU1: shutdown
    [  188.689998] ------------[ cut here ]------------
    [  188.691645] kernel BUG at arch/arm64/kernel/cpufeature.c:886!
    [  188.692079] Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    [  188.692444] Modules linked in:
    [  188.693031] CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.6.0-rc4-00001-g338d25c35a98 #104
    [  188.693175] Hardware name: Foundation-v8A (DT)
    [  188.693492] pstate: 200001c5 (nzCv dAIF -PAN -UAO)
    [  188.694183] pc : has_cpuid_feature+0xf0/0x348
    [  188.694311] lr : verify_local_elf_hwcaps+0x84/0xe8
    [  188.694410] sp : ffff800011b1bf60
    [  188.694536] x29: ffff800011b1bf60 x28: 0000000000000000
    [  188.694707] x27: 0000000000000000 x26: 0000000000000000
    [  188.694801] x25: 0000000000000000 x24: ffff80001189a25c
    [  188.694905] x23: 0000000000000000 x22: 0000000000000000
    [  188.694996] x21: ffff8000114aa018 x20: ffff800011156a38
    [  188.695089] x19: ffff800010c944a0 x18: 0000000000000004
    [  188.695187] x17: 0000000000000000 x16: 0000000000000000
    [  188.695280] x15: 0000249dbde5431e x14: 0262cbe497efa1fa
    [  188.695371] x13: 0000000000000002 x12: 0000000000002592
    [  188.695472] x11: 0000000000000080 x10: 00400032b5503510
    [  188.695572] x9 : 0000000000000000 x8 : ffff800010c80204
    [  188.695659] x7 : 00000000410fd0f0 x6 : 0000000000000001
    [  188.695750] x5 : 00000000410fd0f0 x4 : 0000000000000000
    [  188.695836] x3 : 0000000000000000 x2 : ffff8000100939d8
    [  188.695919] x1 : 0000000000180420 x0 : 0000000000180480
    [  188.696253] Call trace:
    [  188.696410]  has_cpuid_feature+0xf0/0x348
    [  188.696504]  verify_local_elf_hwcaps+0x84/0xe8
    [  188.696591]  check_local_cpu_capabilities+0x44/0x128
    [  188.696666]  secondary_start_kernel+0xf4/0x188
    [  188.697150] Code: 52805001 72a00301 6b01001f 54000ec0 (d4210000)
    [  188.698639] ---[ end trace 3f12ca47652f7b72 ]---
    [  188.699160] Kernel panic - not syncing: Attempted to kill the idle task!
    [  188.699546] Kernel Offset: disabled
    [  188.699828] CPU features: 0x00004,20c02008
    [  188.700012] Memory Limit: none
    [  188.700538] ---[ end Kernel panic - not syncing: Attempted to kill the idle task! ]---
    
    [root@arch ~]# echo Helo
    Helo
    [root@arch ~]# cat /proc/cpuinfo | grep proce
    processor       : 0
    
    Make smp_send_stop() account also for the online status of the calling CPU
    while evaluating how many CPUs are effectively online: this way, the right
    number of STOPs is sent, so enforcing a proper freeze of the system at the
    end of panic even under the above conditions.
    
    Fixes: 08e875c16a16c ("arm64: SMP support")
    Reported-by: Dave Martin <Dave.Martin@arm.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89fba2b721430ccd0b0037bf4e7a554144ae12ac
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Mar 11 14:13:28 2020 +0800

    ALSA: hda/realtek: Fix pop noise on ALC225
    
    commit 3b36b13d5e69d6f51ff1c55d1b404a74646c9757 upstream.
    
    Commit 317d9313925c ("ALSA: hda/realtek - Set default power save node to
    0") makes the ALC225 have pop noise on S3 resume and cold boot.
    
    So partially revert this commit for ALC225 to fix the regression.
    
    Fixes: 317d9313925c ("ALSA: hda/realtek - Set default power save node to 0")
    BugLink: https://bugs.launchpad.net/bugs/1866357
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20200311061328.17614-1-kai.heng.feng@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a22d7fc61f931e280b77dc755c807548bd1765d9
Author: Sasha Levin <sashal@kernel.org>
Date:   Mon Mar 23 16:20:43 2020 -0400

    Revert "ipv6: Fix handling of LLA with VRF and sockets bound to VRF"
    
    This reverts commit 2b3541ffdd05198b329d21920a0f606009a1058b.
    
    This patch shouldn't have been backported to 4.19.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2f7c84371a2a4c449a92c956d0e4f83565e257
Author: Sasha Levin <sashal@kernel.org>
Date:   Mon Mar 23 16:19:51 2020 -0400

    Revert "vrf: mark skb for multicast or link-local as enslaved to VRF"
    
    This reverts commit 91c5f99d131ed3b231aaef7d4ed6799085b095a3.
    
    This patch shouldn't have been backported to 4.19.
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17a8ca79a576972c5a2050ad6eba21a2024799a6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Mar 8 19:07:17 2020 +0100

    futex: Unbreak futex hashing
    
    commit 8d67743653dce5a0e7aa500fcccb237cde7ad88e upstream.
    
    The recent futex inode life time fix changed the ordering of the futex key
    union struct members, but forgot to adjust the hash function accordingly,
    
    As a result the hashing omits the leading 64bit and even hashes beyond the
    futex key causing a bad hash distribution which led to a ~100% performance
    regression.
    
    Hand in the futex key pointer instead of a random struct member and make
    the size calculation based of the struct offset.
    
    Fixes: 8019ad13ef7f ("futex: Fix inode life-time issue")
    Reported-by: Rong Chen <rong.a.chen@intel.com>
    Decoded-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Rong Chen <rong.a.chen@intel.com>
    Link: https://lkml.kernel.org/r/87h7yy90ve.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6d506cd2243aa8f6e19fdb4dc61d85275c2c918
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Mar 4 11:28:31 2020 +0100

    futex: Fix inode life-time issue
    
    commit 8019ad13ef7f64be44d4f892af9c840179009254 upstream.
    
    As reported by Jann, ihold() does not in fact guarantee inode
    persistence. And instead of making it so, replace the usage of inode
    pointers with a per boot, machine wide, unique inode identifier.
    
    This sequence number is global, but shared (file backed) futexes are
    rare enough that this should not become a performance issue.
    
    Reported-by: Jann Horn <jannh@google.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af6bdc2a85a9078b88bb3922ebd7d0caa2e0a52c
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Wed Mar 11 12:41:21 2020 -0700

    kbuild: Disable -Wpointer-to-enum-cast
    
    commit 82f2bc2fcc0160d6f82dd1ac64518ae0a4dd183f upstream.
    
    Clang's -Wpointer-to-int-cast deviates from GCC in that it warns when
    casting to enums. The kernel does this in certain places, such as device
    tree matches to set the version of the device being used, which allows
    the kernel to avoid using a gigantic union.
    
    https://elixir.bootlin.com/linux/v5.5.8/source/drivers/ata/ahci_brcm.c#L428
    https://elixir.bootlin.com/linux/v5.5.8/source/drivers/ata/ahci_brcm.c#L402
    https://elixir.bootlin.com/linux/v5.5.8/source/include/linux/mod_devicetable.h#L264
    
    To avoid a ton of false positive warnings, disable this particular part
    of the warning, which has been split off into a separate diagnostic so
    that the entire warning does not need to be turned off for clang. It
    will be visible under W=1 in case people want to go about fixing these
    easily and enabling the warning treewide.
    
    Cc: stable@vger.kernel.org
    Link: https://github.com/ClangBuiltLinux/linux/issues/887
    Link: https://github.com/llvm/llvm-project/commit/2a41b31fcdfcb67ab7038fc2ffb606fd50b83a84
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b2c4f1122961439be22f11f896fd18676ba46ba
Author: Tomas Novotny <tomas@novotny.cz>
Date:   Tue Feb 18 16:44:50 2020 +0100

    iio: light: vcnl4000: update sampling periods for vcnl4200
    
    [ Upstream commit b42aa97ed5f1169cfd37175ef388ea62ff2dcf43 ]
    
    Vishay has published a new version of "Designing the VCNL4200 Into an
    Application" application note in October 2019. The new version specifies
    that there is +-20% of part to part tolerance. This explains the drift
    seen during experiments. The proximity pulse width is also changed from
    32us to 30us. According to the support, the tolerance also applies to
    ambient light.
    
    So update the sampling periods. As the reading is blocking, current
    users may notice slightly longer response time.
    
    Fixes: be38866fbb97 ("iio: vcnl4000: add support for VCNL4200")
    Reviewed-by: Guido Günther <agx@sigxcpu.org>
    Signed-off-by: Tomas Novotny <tomas@novotny.cz>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72d3dd250a0b12d50a0615417d6cb935c8d20537
Author: Anthony Mallet <anthony.mallet@laas.fr>
Date:   Thu Mar 12 14:31:01 2020 +0100

    USB: cdc-acm: fix rounding error in TIOCSSERIAL
    
    [ Upstream commit b401f8c4f492cbf74f3f59c9141e5be3071071bb ]
    
    By default, tty_port_init() initializes those parameters to a multiple
    of HZ. For instance in line 69 of tty_port.c:
       port->close_delay = (50 * HZ) / 100;
    https://github.com/torvalds/linux/blob/master/drivers/tty/tty_port.c#L69
    
    With e.g. CONFIG_HZ = 250 (as this is the case for Ubuntu 18.04
    linux-image-4.15.0-37-generic), the default setting for close_delay is
    thus 125.
    
    When ioctl(fd, TIOCGSERIAL, &s) is executed, the setting returned in
    user space is '12' (125/10). When ioctl(fd, TIOCSSERIAL, &s) is then
    executed with the same setting '12', the value is interpreted as '120'
    which is different from the current setting and a EPERM error may be
    raised by set_serial_info() if !CAP_SYS_ADMIN.
    https://github.com/torvalds/linux/blob/master/drivers/usb/class/cdc-acm.c#L919
    
    Fixes: ba2d8ce9db0a6 ("cdc-acm: implement TIOCSSERIAL to avoid blocking close(2)")
    Signed-off-by: Anthony Mallet <anthony.mallet@laas.fr>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312133101.7096-2-anthony.mallet@laas.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c626124296795f53740ae242ac8ff303a801bc17
Author: Anthony Mallet <anthony.mallet@laas.fr>
Date:   Thu Mar 12 14:31:00 2020 +0100

    USB: cdc-acm: fix close_delay and closing_wait units in TIOCSSERIAL
    
    [ Upstream commit 633e2b2ded739a34bd0fb1d8b5b871f7e489ea29 ]
    
    close_delay and closing_wait are specified in hundredth of a second but stored
    internally in jiffies. Use the jiffies_to_msecs() and msecs_to_jiffies()
    functions to convert from each other.
    
    Signed-off-by: Anthony Mallet <anthony.mallet@laas.fr>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312133101.7096-1-anthony.mallet@laas.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c1051ffc77feffc30d3f0f24defd8032b6c42e3
Author: Joerg Roedel <jroedel@suse.de>
Date:   Sat Mar 21 18:22:41 2020 -0700

    x86/mm: split vmalloc_sync_all()
    
    commit 763802b53a427ed3cbd419dbba255c414fdd9e7c upstream.
    
    Commit 3f8fd02b1bf1 ("mm/vmalloc: Sync unmappings in
    __purge_vmap_area_lazy()") introduced a call to vmalloc_sync_all() in
    the vunmap() code-path.  While this change was necessary to maintain
    correctness on x86-32-pae kernels, it also adds additional cycles for
    architectures that don't need it.
    
    Specifically on x86-64 with CONFIG_VMAP_STACK=y some people reported
    severe performance regressions in micro-benchmarks because it now also
    calls the x86-64 implementation of vmalloc_sync_all() on vunmap().  But
    the vmalloc_sync_all() implementation on x86-64 is only needed for newly
    created mappings.
    
    To avoid the unnecessary work on x86-64 and to gain the performance
    back, split up vmalloc_sync_all() into two functions:
    
            * vmalloc_sync_mappings(), and
            * vmalloc_sync_unmappings()
    
    Most call-sites to vmalloc_sync_all() only care about new mappings being
    synchronized.  The only exception is the new call-site added in the
    above mentioned commit.
    
    Shile Zhang directed us to a report of an 80% regression in reaim
    throughput.
    
    Fixes: 3f8fd02b1bf1 ("mm/vmalloc: Sync unmappings in __purge_vmap_area_lazy()")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Reported-by: Shile Zhang <shile.zhang@linux.alibaba.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Borislav Petkov <bp@suse.de>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>        [GHES]
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20191009124418.8286-1-joro@8bytes.org
    Link: https://lists.01.org/hyperkitty/list/lkp@lists.01.org/thread/4D3JPPHBNOSPFK2KEPC6KGKS6J25AIDB/
    Link: http://lkml.kernel.org/r/20191113095530.228959-1-shile.zhang@linux.alibaba.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51a4b00e7b32e895bd8605a88d31bf0af6d21e8f
Author: Qian Cai <cai@lca.pw>
Date:   Sat Mar 21 18:22:17 2020 -0700

    page-flags: fix a crash at SetPageError(THP_SWAP)
    
    commit d72520ad004a8ce18a6ba6cde317f0081b27365a upstream.
    
    Commit bd4c82c22c36 ("mm, THP, swap: delay splitting THP after swapped
    out") supported writing THP to a swap device but forgot to upgrade an
    older commit df8c94d13c7e ("page-flags: define behavior of FS/IO-related
    flags on compound pages") which could trigger a crash during THP
    swapping out with DEBUG_VM_PGFLAGS=y,
    
      kernel BUG at include/linux/page-flags.h:317!
    
      page dumped because: VM_BUG_ON_PAGE(1 && PageCompound(page))
      page:fffff3b2ec3a8000 refcount:512 mapcount:0 mapping:000000009eb0338c index:0x7f6e58200 head:fffff3b2ec3a8000 order:9 compound_mapcount:0 compound_pincount:0
      anon flags: 0x45fffe0000d8454(uptodate|lru|workingset|owner_priv_1|writeback|head|reclaim|swapbacked)
    
      end_swap_bio_write()
        SetPageError(page)
          VM_BUG_ON_PAGE(1 && PageCompound(page))
    
      <IRQ>
      bio_endio+0x297/0x560
      dec_pending+0x218/0x430 [dm_mod]
      clone_endio+0xe4/0x2c0 [dm_mod]
      bio_endio+0x297/0x560
      blk_update_request+0x201/0x920
      scsi_end_request+0x6b/0x4b0
      scsi_io_completion+0x509/0x7e0
      scsi_finish_command+0x1ed/0x2a0
      scsi_softirq_done+0x1c9/0x1d0
      __blk_mqnterrupt+0xf/0x20
      </IRQ>
    
    Fix by checking PF_NO_TAIL in those places instead.
    
    Fixes: bd4c82c22c36 ("mm, THP, swap: delay splitting THP after swapped out")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Acked-by: "Huang, Ying" <ying.huang@intel.com>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200310235846.1319-1-cai@lca.pw
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e79ba6341083428ce4787d08e9fb757064d192c
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Sat Mar 21 18:22:37 2020 -0700

    mm, slub: prevent kmalloc_node crashes and memory leaks
    
    commit 0715e6c516f106ed553828a671d30ad9a3431536 upstream.
    
    Sachin reports [1] a crash in SLUB __slab_alloc():
    
      BUG: Kernel NULL pointer dereference on read at 0x000073b0
      Faulting instruction address: 0xc0000000003d55f4
      Oops: Kernel access of bad area, sig: 11 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Modules linked in:
      CPU: 19 PID: 1 Comm: systemd Not tainted 5.6.0-rc2-next-20200218-autotest #1
      NIP:  c0000000003d55f4 LR: c0000000003d5b94 CTR: 0000000000000000
      REGS: c0000008b37836d0 TRAP: 0300   Not tainted  (5.6.0-rc2-next-20200218-autotest)
      MSR:  8000000000009033 <SF,EE,ME,IR,DR,RI,LE>  CR: 24004844  XER: 00000000
      CFAR: c00000000000dec4 DAR: 00000000000073b0 DSISR: 40000000 IRQMASK: 1
      GPR00: c0000000003d5b94 c0000008b3783960 c00000000155d400 c0000008b301f500
      GPR04: 0000000000000dc0 0000000000000002 c0000000003443d8 c0000008bb398620
      GPR08: 00000008ba2f0000 0000000000000001 0000000000000000 0000000000000000
      GPR12: 0000000024004844 c00000001ec52a00 0000000000000000 0000000000000000
      GPR16: c0000008a1b20048 c000000001595898 c000000001750c18 0000000000000002
      GPR20: c000000001750c28 c000000001624470 0000000fffffffe0 5deadbeef0000122
      GPR24: 0000000000000001 0000000000000dc0 0000000000000002 c0000000003443d8
      GPR28: c0000008b301f500 c0000008bb398620 0000000000000000 c00c000002287180
      NIP ___slab_alloc+0x1f4/0x760
      LR __slab_alloc+0x34/0x60
      Call Trace:
        ___slab_alloc+0x334/0x760 (unreliable)
        __slab_alloc+0x34/0x60
        __kmalloc_node+0x110/0x490
        kvmalloc_node+0x58/0x110
        mem_cgroup_css_online+0x108/0x270
        online_css+0x48/0xd0
        cgroup_apply_control_enable+0x2ec/0x4d0
        cgroup_mkdir+0x228/0x5f0
        kernfs_iop_mkdir+0x90/0xf0
        vfs_mkdir+0x110/0x230
        do_mkdirat+0xb0/0x1a0
        system_call+0x5c/0x68
    
    This is a PowerPC platform with following NUMA topology:
    
      available: 2 nodes (0-1)
      node 0 cpus:
      node 0 size: 0 MB
      node 0 free: 0 MB
      node 1 cpus: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
      node 1 size: 35247 MB
      node 1 free: 30907 MB
      node distances:
      node   0   1
        0:  10  40
        1:  40  10
    
      possible numa nodes: 0-31
    
    This only happens with a mmotm patch "mm/memcontrol.c: allocate
    shrinker_map on appropriate NUMA node" [2] which effectively calls
    kmalloc_node for each possible node.  SLUB however only allocates
    kmem_cache_node on online N_NORMAL_MEMORY nodes, and relies on
    node_to_mem_node to return such valid node for other nodes since commit
    a561ce00b09e ("slub: fall back to node_to_mem_node() node if allocating
    on memoryless node").  This is however not true in this configuration
    where the _node_numa_mem_ array is not initialized for nodes 0 and 2-31,
    thus it contains zeroes and get_partial() ends up accessing
    non-allocated kmem_cache_node.
    
    A related issue was reported by Bharata (originally by Ramachandran) [3]
    where a similar PowerPC configuration, but with mainline kernel without
    patch [2] ends up allocating large amounts of pages by kmalloc-1k
    kmalloc-512.  This seems to have the same underlying issue with
    node_to_mem_node() not behaving as expected, and might probably also
    lead to an infinite loop with CONFIG_SLUB_CPU_PARTIAL [4].
    
    This patch should fix both issues by not relying on node_to_mem_node()
    anymore and instead simply falling back to NUMA_NO_NODE, when
    kmalloc_node(node) is attempted for a node that's not online, or has no
    usable memory.  The "usable memory" condition is also changed from
    node_present_pages() to N_NORMAL_MEMORY node state, as that is exactly
    the condition that SLUB uses to allocate kmem_cache_node structures.
    The check in get_partial() is removed completely, as the checks in
    ___slab_alloc() are now sufficient to prevent get_partial() being
    reached with an invalid node.
    
    [1] https://lore.kernel.org/linux-next/3381CD91-AB3D-4773-BA04-E7A072A63968@linux.vnet.ibm.com/
    [2] https://lore.kernel.org/linux-mm/fff0e636-4c36-ed10-281c-8cdb0687c839@virtuozzo.com/
    [3] https://lore.kernel.org/linux-mm/20200317092624.GB22538@in.ibm.com/
    [4] https://lore.kernel.org/linux-mm/088b5996-faae-8a56-ef9c-5b567125ae54@suse.cz/
    
    Fixes: a561ce00b09e ("slub: fall back to node_to_mem_node() node if allocating on memoryless node")
    Reported-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Reported-by: PUVICHAKRAVARTHY RAMACHANDRAN <puvichakravarthy@in.ibm.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Tested-by: Bharata B Rao <bharata@linux.ibm.com>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Christopher Lameter <cl@linux.com>
    Cc: linuxppc-dev@lists.ozlabs.org
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Nathan Lynch <nathanl@linux.ibm.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200320115533.9604-1-vbabka@suse.cz
    Debugged-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 451d4a2390ed7236b3713c315780c3c50618748c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 17 11:04:09 2020 -0700

    mm: slub: be more careful about the double cmpxchg of freelist
    
    commit 5076190daded2197f62fe92cf69674488be44175 upstream.
    
    This is just a cleanup addition to Jann's fix to properly update the
    transaction ID for the slub slowpath in commit fd4d9c7d0c71 ("mm: slub:
    add missing TID bump..").
    
    The transaction ID is what protects us against any concurrent accesses,
    but we should really also make sure to make the 'freelist' comparison
    itself always use the same freelist value that we then used as the new
    next free pointer.
    
    Jann points out that if we do all of this carefully, we could skip the
    transaction ID update for all the paths that only remove entries from
    the lists, and only update the TID when adding entries (to avoid the ABA
    issue with cmpxchg and list handling re-adding a previously seen value).
    
    But this patch just does the "make sure to cmpxchg the same value we
    used" rather than then try to be clever.
    
    Acked-by: Jann Horn <jannh@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e48392bc0fdb14f10bc624c745996400a298fbfb
Author: Chunguang Xu <brookxu@tencent.com>
Date:   Sat Mar 21 18:22:10 2020 -0700

    memcg: fix NULL pointer dereference in __mem_cgroup_usage_unregister_event
    
    commit 7d36665a5886c27ca4c4d0afd3ecc50b400f3587 upstream.
    
    An eventfd monitors multiple memory thresholds of the cgroup, closes them,
    the kernel deletes all events related to this eventfd.  Before all events
    are deleted, another eventfd monitors the memory threshold of this cgroup,
    leading to a crash:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000004
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0002) - not-present page
      PGD 800000033058e067 P4D 800000033058e067 PUD 3355ce067 PMD 0
      Oops: 0002 [#1] SMP PTI
      CPU: 2 PID: 14012 Comm: kworker/2:6 Kdump: loaded Not tainted 5.6.0-rc4 #3
      Hardware name: LENOVO 20AWS01K00/20AWS01K00, BIOS GLET70WW (2.24 ) 05/21/2014
      Workqueue: events memcg_event_remove
      RIP: 0010:__mem_cgroup_usage_unregister_event+0xb3/0x190
      RSP: 0018:ffffb47e01c4fe18 EFLAGS: 00010202
      RAX: 0000000000000001 RBX: ffff8bb223a8a000 RCX: 0000000000000001
      RDX: 0000000000000001 RSI: ffff8bb22fb83540 RDI: 0000000000000001
      RBP: ffffb47e01c4fe48 R08: 0000000000000000 R09: 0000000000000010
      R10: 000000000000000c R11: 071c71c71c71c71c R12: ffff8bb226aba880
      R13: ffff8bb223a8a480 R14: 0000000000000000 R15: 0000000000000000
      FS:  0000000000000000(0000) GS:ffff8bb242680000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000004 CR3: 000000032c29c003 CR4: 00000000001606e0
      Call Trace:
        memcg_event_remove+0x32/0x90
        process_one_work+0x172/0x380
        worker_thread+0x49/0x3f0
        kthread+0xf8/0x130
        ret_from_fork+0x35/0x40
      CR2: 0000000000000004
    
    We can reproduce this problem in the following ways:
    
    1. We create a new cgroup subdirectory and a new eventfd, and then we
       monitor multiple memory thresholds of the cgroup through this eventfd.
    
    2.  closing this eventfd, and __mem_cgroup_usage_unregister_event ()
       will be called multiple times to delete all events related to this
       eventfd.
    
    The first time __mem_cgroup_usage_unregister_event() is called, the
    kernel will clear all items related to this eventfd in thresholds->
    primary.
    
    Since there is currently only one eventfd, thresholds-> primary becomes
    empty, so the kernel will set thresholds-> primary and hresholds-> spare
    to NULL.  If at this time, the user creates a new eventfd and monitor
    the memory threshold of this cgroup, kernel will re-initialize
    thresholds-> primary.
    
    Then when __mem_cgroup_usage_unregister_event () is called for the
    second time, because thresholds-> primary is not empty, the system will
    access thresholds-> spare, but thresholds-> spare is NULL, which will
    trigger a crash.
    
    In general, the longer it takes to delete all events related to this
    eventfd, the easier it is to trigger this problem.
    
    The solution is to check whether the thresholds associated with the
    eventfd has been cleared when deleting the event.  If so, we do nothing.
    
    [akpm@linux-foundation.org: fix comment, per Kirill]
    Fixes: 907860ed381a ("cgroups: make cftype.unregister_event() void-returning")
    Signed-off-by: Chunguang Xu <brookxu@tencent.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/077a6f67-aefa-4591-efec-f2f3af2b0b02@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7693c8fedb00329938a43b1d39044e414f7d3844
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Wed Mar 18 15:53:50 2020 +0800

    drm/lease: fix WARNING in idr_destroy
    
    commit b216a8e7908cd750550c0480cf7d2b3a37f06954 upstream.
    
    drm_lease_create takes ownership of leases. And leases will be released
    by drm_master_put.
    
    drm_master_put
        ->drm_master_destroy
                ->idr_destroy
    
    So we needn't call idr_destroy again.
    
    Reported-and-tested-by: syzbot+05835159fe322770fe3d@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/1584518030-4173-1-git-send-email-hqjagain@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 053a9862f0202cdcda9c56778dd98396a7cb3513
Author: Tom St Denis <tom.stdenis@amd.com>
Date:   Tue Mar 10 08:40:41 2020 -0400

    drm/amd/amdgpu: Fix GPR read from debugfs (v2)
    
    commit 5bbc6604a62814511c32f2e39bc9ffb2c1b92cbe upstream.
    
    The offset into the array was specified in bytes but should
    be in terms of 32-bit words.  Also prevent large reads that
    would also cause a buffer overread.
    
    v2:  Read from correct offset from internal storage buffer.
    
    Signed-off-by: Tom St Denis <tom.stdenis@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 221ab6a9e6a105ab17200ae7a22c68f8451bf044
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Mar 10 12:13:53 2020 +0000

    btrfs: fix log context list corruption after rename whiteout error
    
    commit 236ebc20d9afc5e9ff52f3cf3f365a91583aac10 upstream.
    
    During a rename whiteout, if btrfs_whiteout_for_rename() returns an error
    we can end up returning from btrfs_rename() with the log context object
    still in the root's log context list - this happens if 'sync_log' was
    set to true before we called btrfs_whiteout_for_rename() and it is
    dangerous because we end up with a corrupt linked list (root->log_ctxs)
    as the log context object was allocated on the stack.
    
    After btrfs_rename() returns, any task that is running btrfs_sync_log()
    concurrently can end up crashing because that linked list is traversed by
    btrfs_sync_log() (through btrfs_remove_all_log_ctxs()). That results in
    the same issue that commit e6c617102c7e4 ("Btrfs: fix log context list
    corruption after rename exchange operation") fixed.
    
    Fixes: d4682ba03ef618 ("Btrfs: sync log after logging new name")
    CC: stable@vger.kernel.org # 4.19+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a54810b64b72bab05341aaa5d0c86e50b6d92c84
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Mar 6 17:08:57 2020 +0200

    xhci: Do not open code __print_symbolic() in xhci trace events
    
    commit 045706bff837ee89c13f1ace173db71922c1c40b upstream.
    
    libtraceevent (used by perf and trace-cmd) failed to parse the
    xhci_urb_dequeue trace event. This is because the user space trace
    event format parsing is not a full C compiler. It can handle some basic
    logic, but is not meant to be able to handle everything C can do.
    
    In cases where a trace event field needs to be converted from a number
    to a string, there's the __print_symbolic() macro that should be used:
    
     See samples/trace_events/trace-events-sample.h
    
    Some xhci trace events open coded the __print_symbolic() causing the
    user spaces tools to fail to parse it. This has to be replaced with
    __print_symbolic() instead.
    
    CC: stable@vger.kernel.org
    Reported-by: Tzvetomir Stoyanov <tstoyanov@vmware.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=206531
    Fixes: 5abdc2e6e12ff ("usb: host: xhci: add urb_enqueue/dequeue/giveback tracers")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200306150858.21904-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90db72acb35f84d2b76e9fa9505315ef9c10f5f8
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Wed Mar 18 15:26:49 2020 +0000

    rtc: max8907: add missing select REGMAP_IRQ
    
    commit 5d892919fdd0cefd361697472d4e1b174a594991 upstream.
    
    I have hit the following build error:
    
      armv7a-hardfloat-linux-gnueabi-ld: drivers/rtc/rtc-max8907.o: in function `max8907_rtc_probe':
      rtc-max8907.c:(.text+0x400): undefined reference to `regmap_irq_get_virq'
    
    max8907 should select REGMAP_IRQ
    
    Fixes: 94c01ab6d7544 ("rtc: add MAX8907 RTC driver")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22bed6a05d06352abdf592735c7128f65c5240db
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Mar 17 08:22:15 2020 +0200

    intel_th: pci: Add Elkhart Lake CPU support
    
    commit add492d2e9446a77ede9bb43699ec85ca8fc1aba upstream.
    
    This adds support for the Trace Hub in Elkhart Lake CPU.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200317062215.15598-7-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 107845eae850c1baa5bfc921bc6d356c57cadb78
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Mar 17 08:22:14 2020 +0200

    intel_th: Fix user-visible error codes
    
    commit ce666be89a8a09c5924ff08fc32e119f974bdab6 upstream.
    
    There are a few places in the driver that end up returning ENOTSUPP to
    the user, replace those with EINVAL.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Fixes: ba82664c134ef ("intel_th: Add Memory Storage Unit driver")
    Cc: stable@vger.kernel.org # v4.4+
    Link: https://lore.kernel.org/r/20200317062215.15598-6-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 270ee2e10c5d974afd35ca8f7fbeb0fc0f9ffbcd
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Fri Mar 6 01:30:47 2020 +0100

    staging/speakup: fix get_word non-space look-ahead
    
    commit 9d32c0cde4e2d1343dfb88a67b2ec6397705b32b upstream.
    
    get_char was erroneously given the address of the pointer to the text
    instead of the address of the text, thus leading to random crashes when
    the user requests speaking a word while the current position is on a space
    character and say_word_ctl is not enabled.
    
    Reported-on: https://github.com/bytefire/speakup/issues/1
    Reported-by: Kirk Reiser <kirk@reisers.ca>
    Reported-by: Janina Sajka <janina@rednote.net>
    Reported-by: Alexandr Epaneshnikov <aarnaarn2@gmail.com>
    Reported-by: Gregory Nowak <greg@gregn.net>
    Reported-by: deedra waters <deedra@the-brannons.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Tested-by: Alexandr Epaneshnikov <aarnaarn2@gmail.com>
    Tested-by: Gregory Nowak <greg@gregn.net>
    Tested-by: Michael Taboada <michael@michaels.world>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200306003047.thijtmqrnayd3dmw@function
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d72ee3fe182fdeb2f0f56df9abf77374963d1d29
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 12 12:01:49 2020 +0100

    staging: greybus: loopback_test: fix poll-mask build breakage
    
    commit 8f3675be4bda33adbdc1dd2ab3b6c76a7599a79e upstream.
    
    A scripted conversion from userland POLL* to kernel EPOLL* constants
    mistakingly replaced the poll flags in the loopback_test tool, which
    therefore no longer builds.
    
    Fixes: a9a08845e9ac ("vfs: do bulk POLL* -> EPOLL* replacement")
    Cc: stable <stable@vger.kernel.org>     # 4.16
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200312110151.22028-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0dff34d80052a6e671fbe06117411bf716e0493
Author: Michael Straube <straube.linux@gmail.com>
Date:   Thu Mar 12 10:36:52 2020 +0100

    staging: rtl8188eu: Add device id for MERCUSYS MW150US v2
    
    commit bb5786b9286c253557a0115bc8d21879e61b7b94 upstream.
    
    This device was added to the stand-alone driver on github.
    Add it to the staging driver as well.
    
    Link: https://github.com/lwfinger/rtl8188eu/commit/2141f244c3e7
    Signed-off-by: Michael Straube <straube.linux@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312093652.13918-1-straube.linux@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cdbb2f099094388fc96fc654c0e8e4b66d38a33
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Sun Mar 15 17:44:25 2020 +0100

    mmc: sdhci-of-at91: fix cd-gpios for SAMA5D2
    
    commit 53dd0a7cd65edc83b0c243d1c08377c8b876b2ee upstream.
    
    SAMA5D2x doesn't drive CMD line if GPIO is used as CD line (at least
    SAMA5D27 doesn't). Fix this by forcing card-detect in the module
    if module-controlled CD is not used.
    
    Fixed commit addresses the problem only for non-removable cards. This
    amends it to also cover gpio-cd case.
    
    Cc: stable@vger.kernel.org
    Fixes: 7a1e3f143176 ("mmc: sdhci-of-at91: force card detect value for non removable devices")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/8d10950d9940468577daef4772b82a071b204716.1584290561.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23929cbc88c5244c08a1e8d11ce4c24560574b5f
Author: Ricky Wu <ricky_wu@realtek.com>
Date:   Mon Mar 16 10:52:32 2020 +0800

    mmc: rtsx_pci: Fix support for speed-modes that relies on tuning
    
    commit 4686392c32361c97e8434adf9cc77ad7991bfa81 upstream.
    
    The TX/RX register should not be treated the same way to allow for better
    support of tuning. Fix this by using a default initial value for TX.
    
    Signed-off-by: Ricky Wu <ricky_wu@realtek.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200316025232.1167-1-ricky_wu@realtek.com
    [Ulf: Updated changelog]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78863b863aed3049f727ff775ed7a35c1b1a0b50
Author: Eugen Hristev <eugen.hristev@microchip.com>
Date:   Tue Jan 28 12:57:39 2020 +0000

    iio: adc: at91-sama5d2_adc: fix differential channels in triggered mode
    
    commit a500f3bd787f8224341e44b238f318c407b10897 upstream.
    
    The differential channels require writing the channel offset register (COR).
    Otherwise they do not work in differential mode.
    The configuration of COR is missing in triggered mode.
    
    Fixes: 5e1a1da0f8c9 ("iio: adc: at91-sama5d2_adc: add hw trigger and buffer support")
    Signed-off-by: Eugen Hristev <eugen.hristev@microchip.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91e0e0800557d9208dc93a32421054420a1ee724
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Fri Feb 14 12:03:24 2020 +0100

    iio: magnetometer: ak8974: Fix negative raw values in sysfs
    
    commit b500c086e4110829a308c23e83a7cdc65b26228a upstream.
    
    At the moment, reading from in_magn_*_raw in sysfs tends to return
    large values around 65000, even though the output of ak8974 is actually
    limited to ±32768. This happens because the value is never converted
    to the signed 16-bit integer variant.
    
    Add an explicit cast to s16 to fix this.
    
    Fixes: 7c94a8b2ee8c ("iio: magn: add a driver for AK8974")
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Linus Waleij <linus.walleij@linaro.org>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d6b649cfd666b203764b41ea6b5c9cfc1988ddc
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Fri Feb 14 17:46:35 2020 +0100

    iio: trigger: stm32-timer: disable master mode when stopping
    
    commit 29e8c8253d7d5265f58122c0a7902e26df6c6f61 upstream.
    
    Master mode should be disabled when stopping. This mainly impacts
    possible other use-case after timer has been stopped. Currently,
    master mode remains set (from start routine).
    
    Fixes: 6fb34812c2a2 ("iio: stm32 trigger: Add support for TRGO2 triggers")
    
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 222499ed874f0561b89f74232e7fa33fc549a4f2
Author: Wen-chien Jesse Sung <jesse.sung@canonical.com>
Date:   Mon Feb 24 17:54:26 2020 +0800

    iio: st_sensors: remap SMO8840 to LIS2DH12
    
    commit e43d110cdc206b6df4dd438cd10c81d1da910aad upstream.
    
    According to ST, the HID is for LIS2DH12.
    
    Fixes: 3d56e19815b3 ("iio: accel: st_accel: Add support for the SMO8840 ACPI id")
    Signed-off-by: Wen-chien Jesse Sung <jesse.sung@canonical.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f057d18c1692156f167e278789997ac354f05ccb
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Mar 12 16:57:30 2020 +0100

    ALSA: pcm: oss: Remove WARNING from snd_pcm_plug_alloc() checks
    
    commit 5461e0530c222129dfc941058be114b5cbc00837 upstream.
    
    The return value checks in snd_pcm_plug_alloc() are covered with
    snd_BUG_ON() macro that may trigger a kernel WARNING depending on the
    kconfig.  But since the error condition can be triggered by a weird
    user space parameter passed to OSS layer, we shouldn't give the kernel
    stack trace just for that.  As it's a normal error condition, let's
    remove snd_BUG_ON() macro usage there.
    
    Reported-by: syzbot+2a59ee7a9831b264f45e@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200312155730.7520-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c5bd5520334f354662ce59925a57e958ff75520
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 9 09:21:48 2020 +0100

    ALSA: pcm: oss: Avoid plugin buffer overflow
    
    commit f2ecf903ef06eb1bbbfa969db9889643d487e73a upstream.
    
    Each OSS PCM plugins allocate its internal buffer per pre-calculation
    of the max buffer size through the chain of plugins (calling
    src_frames and dst_frames callbacks).  This works for most plugins,
    but the rate plugin might behave incorrectly.  The calculation in the
    rate plugin involves with the fractional position, i.e. it may vary
    depending on the input position.  Since the buffer size
    pre-calculation is always done with the offset zero, it may return a
    shorter size than it might be; this may result in the out-of-bound
    access as spotted by fuzzer.
    
    This patch addresses those possible buffer overflow accesses by simply
    setting the upper limit per the given buffer size for each plugin
    before src_frames() and after dst_frames() calls.
    
    Reported-by: syzbot+e1fe9f44fb8ecf4fb5dd@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/000000000000b25ea005a02bcf21@google.com
    Link: https://lore.kernel.org/r/20200309082148.19855-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f1b2edc48828dcf6adf57950ab7501a9a0dbf72
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 16 10:05:06 2020 +0100

    ALSA: seq: oss: Fix running status after receiving sysex
    
    commit 6c3171ef76a0bad892050f6959a7eac02fb16df7 upstream.
    
    This is a similar bug like the previous case for virmidi: the invalid
    running status is kept after receiving a sysex message.
    
    Again the fix is to clear the running status after handling the sysex.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3b4a4e0f232b7afbaf0a843f63d0e538e3029bfd.camel@domdv.de
    Link: https://lore.kernel.org/r/20200316090506.23966-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f5ebb2a9a19c698706f6638cf03a6e442ed1940
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 16 10:05:05 2020 +0100

    ALSA: seq: virmidi: Fix running status after receiving sysex
    
    commit 4384f167ce5fa7241b61bb0984d651bc528ddebe upstream.
    
    The virmidi driver handles sysex event exceptionally in a short-cut
    snd_seq_dump_var_event() call, but this missed the reset of the
    running status.  As a result, it may lead to an incomplete command
    right after the sysex when an event with the same running status was
    queued.
    
    Fix it by clearing the running status properly via alling
    snd_midi_event_reset_decode() for that code path.
    
    Reported-by: Andreas Steinmetz <ast@domdv.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3b4a4e0f232b7afbaf0a843f63d0e538e3029bfd.camel@domdv.de
    Link: https://lore.kernel.org/r/20200316090506.23966-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf670f94a3dca4dca54fad83eed0f895e312971b
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 9 10:59:22 2020 +0100

    ALSA: line6: Fix endless MIDI read loop
    
    commit d683469b3c93d7e2afd39e6e1970f24700eb7a68 upstream.
    
    The MIDI input event parser of the LINE6 driver may enter into an
    endless loop when the unexpected data sequence is given, as it tries
    to continue the secondary bytes without termination.  Also, when the
    input data is too short, the parser returns a negative error, while
    the caller doesn't handle it properly.  This would lead to the
    unexpected behavior as well.
    
    This patch addresses those issues by checking the return value
    correctly and handling the one-byte event in the parser properly.
    
    The bug was reported by syzkaller.
    
    Reported-by: syzbot+cce32521ee0a824c21f7@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/000000000000033087059f8f8fa3@google.com
    Link: https://lore.kernel.org/r/20200309095922.30269-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 906b5420ddeb1185df57f26c6e5854ea75fd6edf
Author: Alberto Mattea <alberto@mattea.info>
Date:   Fri Mar 6 17:08:58 2020 +0200

    usb: xhci: apply XHCI_SUSPEND_DELAY to AMD XHCI controller 1022:145c
    
    commit 16263abc12d09871156a1c8650fb651f0e552f5e upstream.
    
    This controller timeouts during suspend (S3) with
    [  240.521724] xhci_hcd 0000:30:00.3: WARN: xHC save state timeout
    [  240.521729] xhci_hcd 0000:30:00.3: ERROR mismatched command completion event
    thus preventing the system from entering S3.
    Moreover it remains in an undefined state where some connected devices stop
    working until a reboot.
    Apply the XHCI_SUSPEND_DELAY quirk to make it suspend properly.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Alberto Mattea <alberto@mattea.info>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200306150858.21904-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82fd24f23b1702d7ce1f502a7634659222e03708
Author: Scott Chen <scott@labau.com.tw>
Date:   Wed Mar 11 14:14:23 2020 +0800

    USB: serial: pl2303: add device-id for HP LD381
    
    commit cecc113c1af0dd41ccf265c1fdb84dbd05e63423 upstream.
    
    Add a device id for HP LD381 Display
    LD381:   03f0:0f7f
    
    Signed-off-by: Scott Chen <scott@labau.com.tw>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ce255e1d0106916f5436f4ff82cdb4750a0afe4
Author: Ran Wang <ran.wang_1@nxp.com>
Date:   Fri Mar 6 17:23:28 2020 +0800

    usb: host: xhci-plat: add a shutdown
    
    commit b433e340e7565110b0ce9ca4b3e26f4b97a1decf upstream.
    
    When loading new kernel via kexec, we need to shutdown host controller to
    avoid any un-expected memory accessing during new kernel boot.
    
    Signed-off-by: Ran Wang <ran.wang_1@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200306092328.41253-1-ran.wang_1@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de6856e4c0155bb7ef992d8ab58610334d26b4a3
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Wed Mar 4 11:43:10 2020 +0100

    USB: serial: option: add ME910G1 ECM composition 0x110b
    
    commit 8e852a7953be2a6ee371449f7257fe15ace6a1fc upstream.
    
    Add ME910G1 ECM composition 0x110b: tty, tty, tty, ecm
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20200304104310.2938-1-dnlplm@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a02f05c28783dda991a00b6ba99d372a3070950
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Mar 13 13:07:08 2020 +0100

    usb: quirks: add NO_LPM quirk for RTL8153 based ethernet adapters
    
    commit 75d7676ead19b1fbb5e0ee934c9ccddcb666b68c upstream.
    
    We have been receiving bug reports that ethernet connections over
    RTL8153 based ethernet adapters stops working after a while with
    errors like these showing up in dmesg when the ethernet stops working:
    
    [12696.189484] r8152 6-1:1.0 enp10s0u1: Tx timeout
    [12702.333456] r8152 6-1:1.0 enp10s0u1: Tx timeout
    [12707.965422] r8152 6-1:1.0 enp10s0u1: Tx timeout
    
    This has been reported on Dell WD15 docks, Belkin USB-C Express Dock 3.1
    docks and with generic USB to ethernet dongles using the RTL8153
    chipsets. Some users have tried adding usbcore.quirks=0bda:8153:k to
    the kernel commandline and all users who have tried this report that
    this fixes this.
    
    Also note that we already have an existing NO_LPM quirk for the RTL8153
    used in the Microsoft Surface Dock (where it uses a different usb-id).
    
    This commit adds a NO_LPM quirk for the generic Realtek RTL8153
    0bda:8153 usb-id, fixing the Tx timeout errors on these devices.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=198931
    Cc: stable@vger.kernel.org
    Cc: russianneuromancer@ya.ru
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200313120708.100339-1-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eae6b4a4d7f82c5a01d6caeef96abe81888b53d3
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Feb 5 19:26:33 2020 +0800

    USB: Disable LPM on WD19's Realtek Hub
    
    commit b63e48fb50e1ca71db301ca9082befa6f16c55c4 upstream.
    
    Realtek Hub (0bda:0x0487) used in Dell Dock WD19 sometimes drops off the
    bus when bringing underlying ports from U3 to U0.
    
    Disabling LPM on the hub during setting link state is not enough, so
    let's disable LPM completely for this hub.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200205112633.25995-3-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4da2ef0588670bfaf82fa41d0b22f56fa2306a95
Author: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
Date:   Fri Mar 6 23:13:11 2020 +0100

    parse-maintainers: Mark as executable
    
    [ Upstream commit 611d61f9ac99dc9e1494473fb90117a960a89dfa ]
    
    This makes the script more convenient to run.
    
    Signed-off-by: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cbfc33d43d5667c7948e60495dafaa89f1e4c99
Author: Carlo Nonato <carlo.nonato95@gmail.com>
Date:   Fri Mar 6 13:27:31 2020 +0100

    block, bfq: fix overwrite of bfq_group pointer in bfq_find_set_group()
    
    [ Upstream commit 14afc59361976c0ba39e3a9589c3eaa43ebc7e1d ]
    
    The bfq_find_set_group() function takes as input a blkcg (which represents
    a cgroup) and retrieves the corresponding bfq_group, then it updates the
    bfq internal group hierarchy (see comments inside the function for why
    this is needed) and finally it returns the bfq_group.
    In the hierarchy update cycle, the pointer holding the correct bfq_group
    that has to be returned is mistakenly used to traverse the hierarchy
    bottom to top, meaning that in each iteration it gets overwritten with the
    parent of the current group. Since the update cycle stops at root's
    children (depth = 2), the overwrite becomes a problem only if the blkcg
    describes a cgroup at a hierarchy level deeper than that (depth > 2). In
    this case the root's child that happens to be also an ancestor of the
    correct bfq_group is returned. The main consequence is that processes
    contained in a cgroup at depth greater than 2 are wrongly placed in the
    group described above by BFQ.
    
    This commits fixes this problem by using a different bfq_group pointer in
    the update cycle in order to avoid the overwrite of the variable holding
    the original group reference.
    
    Reported-by: Kwon Je Oh <kwonje.oh2@gmail.com>
    Signed-off-by: Carlo Nonato <carlo.nonato95@gmail.com>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4e8290c6fdf768fbaff4c300bc8c474500f1015
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Tue Mar 3 14:14:23 2020 -0800

    xenbus: req->err should be updated before req->state
    
    [ Upstream commit 8130b9d5b5abf26f9927b487c15319a187775f34 ]
    
    This patch adds the barrier to guarantee that req->err is always updated
    before req->state.
    
    Otherwise, read_reply() would not return ERR_PTR(req->err) but
    req->body, when process_writes()->xb_write() is failed.
    
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Link: https://lore.kernel.org/r/20200303221423.21962-2-dongli.zhang@oracle.com
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0f7d091386229b8d65f1ef584ace0df633e512c
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Tue Mar 3 14:14:22 2020 -0800

    xenbus: req->body should be updated before req->state
    
    [ Upstream commit 1b6a51e86cce38cf4d48ce9c242120283ae2f603 ]
    
    The req->body should be updated before req->state is updated and the
    order should be guaranteed by a barrier.
    
    Otherwise, read_reply() might return req->body = NULL.
    
    Below is sample callstack when the issue is reproduced on purpose by
    reordering the updates of req->body and req->state and adding delay in
    code between updates of req->state and req->body.
    
    [   22.356105] general protection fault: 0000 [#1] SMP PTI
    [   22.361185] CPU: 2 PID: 52 Comm: xenwatch Not tainted 5.5.0xen+ #6
    [   22.366727] Hardware name: Xen HVM domU, BIOS ...
    [   22.372245] RIP: 0010:_parse_integer_fixup_radix+0x6/0x60
    ... ...
    [   22.392163] RSP: 0018:ffffb2d64023fdf0 EFLAGS: 00010246
    [   22.395933] RAX: 0000000000000000 RBX: 75746e7562755f6d RCX: 0000000000000000
    [   22.400871] RDX: 0000000000000000 RSI: ffffb2d64023fdfc RDI: 75746e7562755f6d
    [   22.405874] RBP: 0000000000000000 R08: 00000000000001e8 R09: 0000000000cdcdcd
    [   22.410945] R10: ffffb2d6402ffe00 R11: ffff9d95395eaeb0 R12: ffff9d9535935000
    [   22.417613] R13: ffff9d9526d4a000 R14: ffff9d9526f4f340 R15: ffff9d9537654000
    [   22.423726] FS:  0000000000000000(0000) GS:ffff9d953bc80000(0000) knlGS:0000000000000000
    [   22.429898] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   22.434342] CR2: 000000c4206a9000 CR3: 00000001ea3fc002 CR4: 00000000001606e0
    [   22.439645] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   22.444941] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   22.450342] Call Trace:
    [   22.452509]  simple_strtoull+0x27/0x70
    [   22.455572]  xenbus_transaction_start+0x31/0x50
    [   22.459104]  netback_changed+0x76c/0xcc1 [xen_netfront]
    [   22.463279]  ? find_watch+0x40/0x40
    [   22.466156]  xenwatch_thread+0xb4/0x150
    [   22.469309]  ? wait_woken+0x80/0x80
    [   22.472198]  kthread+0x10e/0x130
    [   22.474925]  ? kthread_park+0x80/0x80
    [   22.477946]  ret_from_fork+0x35/0x40
    [   22.480968] Modules linked in: xen_kbdfront xen_fbfront(+) xen_netfront xen_blkfront
    [   22.486783] ---[ end trace a9222030a747c3f7 ]---
    [   22.490424] RIP: 0010:_parse_integer_fixup_radix+0x6/0x60
    
    The virt_rmb() is added in the 'true' path of test_reply(). The "while"
    is changed to "do while" so that test_reply() is used as a read memory
    barrier.
    
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Link: https://lore.kernel.org/r/20200303221423.21962-1-dongli.zhang@oracle.com
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 345acf45a0cef1effd58d42ed8e767a6219ae4b6
Author: Josip Pavic <Josip.Pavic@amd.com>
Date:   Fri Feb 21 12:26:19 2020 -0500

    drm/amd/display: fix dcc swath size calculations on dcn1
    
    [ Upstream commit a0275dfc82c9034eefbeffd556cca6dd239d7925 ]
    
    [Why]
    Swath sizes are being calculated incorrectly. The horizontal swath size
    should be the product of block height, viewport width, and bytes per
    element, but the calculation uses viewport height instead of width. The
    vertical swath size is similarly incorrectly calculated. The effect of
    this is that we report the wrong DCC caps.
    
    [How]
    Use viewport width in the horizontal swath size calculation and viewport
    height in the vertical swath size calculation.
    
    Signed-off-by: Josip Pavic <Josip.Pavic@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f258014432a705707d78ccbcc24ff0df815eb983
Author: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
Date:   Thu Feb 20 11:16:14 2020 -0500

    drm/amd/display: Clear link settings on MST disable connector
    
    [ Upstream commit 5ac7fd2f597b88ee81f4748ee50cab06192a8dc3 ]
    
    [Why]
    If we have a single MST display and we disconnect it, we dont disable that
    link. This causes the old link settings to still exist
    
    Now on a replug for MST we think its a link loss and will try to reallocate
    mst payload which will fail, throwing warning below.
    
    [  129.374192] [drm] Failed to updateMST allocation table forpipe idx:0
    [  129.374206] ------------[ cut here ]------------
    [  129.374284] WARNING: CPU: 14 PID: 1710 at
    drivers/gpu/drm/amd/amdgpu/../dal-dev/dc/core/dc_link.c:3153
    dc_link_allocate_mst_payload+0x1f7/0x220 [amdgpu]
    
    [  129.374285] Modules linked in: amdgpu(OE) amd_iommu_v2 gpu_sched ttm
    drm_kms_helper drm fb_sys_fops syscopyarea sysfillrect sysimgblt
    binfmt_misc nls_iso8859_1 edac_mce_amd snd_hda_codec_realtek
    snd_hda_codec_generic ledtrig_audio kvm snd_hda_codec_hdmi snd_hda_intel
    snd_intel_nhlt snd_hda_codec irqbypass snd_hda_core snd_hwdep snd_pcm
    snd_seq_midi snd_seq_midi_event snd_rawmidi crct10dif_pclmul snd_seq
    crc32_pclmul ghash_clmulni_intel snd_seq_device snd_timer snd aesni_intel
    eeepc_wmi crypto_simd asus_wmi joydev cryptd sparse_keymap input_leds
    soundcore video glue_helper wmi_bmof mxm_wmi k10temp ccp mac_hid
    sch_fq_codel parport_pc ppdev lp parport ip_tables x_tables autofs4
    hid_generic usbhid hid igb i2c_algo_bit ahci dca i2c_piix4 libahci
    gpio_amdpt wmi gpio_generic
    
    [  129.374318] CPU: 14 PID: 1710 Comm: kworker/14:2 Tainted: G        W  OE     5.4.0-rc7bhawan+ #480
    [  129.374318] Hardware name: System manufacturer System Product Name/PRIME X370-PRO, BIOS 0515 03/30/2017
    [  129.374397] Workqueue: events dm_irq_work_func [amdgpu]
    [  129.374468] RIP: 0010:dc_link_allocate_mst_payload+0x1f7/0x220 [amdgpu]
    [  129.374470] Code: 52 20 e8 1c 63 ad f4 48 8b 5d d0 65 48 33 1c 25 28 00
    00 00 b8 01 00 00 00 75 16 48 8d 65 d8 5b 41 5c 41 5d 41 5e 41 5f 5d c3
    <0f> 0b e9 fa fe ff ff e8 ed 5b d6 f3 41 0f b6 b6 c4 02 00 00 48 c7
    [  129.374471] RSP: 0018:ffff9f9141e7fcc0 EFLAGS: 00010246
    [  129.374472] RAX: 0000000000000000 RBX: ffff91ef0762f800 RCX: 0000000000000000
    [  129.374473] RDX: 0000000000000005 RSI: ffffffffc0c4a988 RDI: 0000000000000004
    [  129.374474] RBP: ffff9f9141e7fd10 R08: 0000000000000005 R09: 0000000000000000
    [  129.374475] R10: 0000000000000002 R11: 0000000000000001 R12: ffff91eebd510c00
    [  129.374475] R13: ffff91eebd510e58 R14: ffff91ef052c01b8 R15: 0000000000000006
    [  129.374476] FS:  0000000000000000(0000) GS:ffff91ef0ef80000(0000) knlGS:0000000000000000
    [  129.374477] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  129.374478] CR2: 000055623ea01d50 CR3: 0000000408a8c000 CR4: 00000000003406e0
    [  129.374479] Call Trace:
    [  129.374550]  dc_link_reallocate_mst_payload+0x12e/0x150 [amdgpu]
    [  129.374617]  dc_link_handle_hpd_rx_irq+0x6d4/0x6e0 [amdgpu]
    [  129.374693]  handle_hpd_rx_irq+0x77/0x310 [amdgpu]
    [  129.374768]  dm_irq_work_func+0x53/0x70 [amdgpu]
    [  129.374774]  process_one_work+0x1fd/0x3f0
    [  129.374776]  worker_thread+0x255/0x410
    [  129.374778]  kthread+0x121/0x140
    [  129.374780]  ? process_one_work+0x3f0/0x3f0
    [  129.374781]  ? kthread_park+0x90/0x90
    [  129.374785]  ret_from_fork+0x22/0x40
    
    [How]
    when we disable MST we should clear the cur link settings (lane_count=0 is
    good enough). This will cause us to not reallocate payloads earlier than
    expected and not throw the warning
    
    Signed-off-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Reviewed-by: Hersen Wu <hersenxs.wu@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f70da80a8609748fe863069e359b87b1c6885142
Author: Vincent Chen <vincent.chen@sifive.com>
Date:   Fri Feb 21 10:47:54 2020 +0800

    riscv: avoid the PIC offset of static percpu data in module beyond 2G limits
    
    [ Upstream commit 0cff8bff7af886af0923d5c91776cd51603e531f ]
    
    The compiler uses the PIC-relative method to access static variables
    instead of GOT when the code model is PIC. Therefore, the limitation of
    the access range from the instruction to the symbol address is +-2GB.
    Under this circumstance, the kernel cannot load a kernel module if this
    module has static per-CPU symbols declared by DEFINE_PER_CPU(). The reason
    is that kernel relocates the .data..percpu section of the kernel module to
    the end of kernel's .data..percpu. Hence, the distance between the per-CPU
    symbols and the instruction will exceed the 2GB limits. To solve this
    problem, the kernel should place the loaded module in the memory area
    [&_end-2G, VMALLOC_END].
    
    Signed-off-by: Vincent Chen <vincent.chen@sifive.com>
    Suggested-by: Alexandre Ghiti <alex@ghiti.fr>
    Suggested-by: Anup Patel <anup@brainfault.org>
    Tested-by: Alexandre Ghiti <alex@ghiti.fr>
    Tested-by: Carlos de Paula <me@carlosedp.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ea3bdf9e9bffe29e396c25a8b7f40778b99c1ac
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Feb 28 18:11:53 2020 -0500

    dm integrity: use dm_bio_record and dm_bio_restore
    
    [ Upstream commit 248aa2645aa7fc9175d1107c2593cc90d4af5a4e ]
    
    In cases where dec_in_flight() has to requeue the integrity_bio_wait
    work to transfer the rest of the data, the bio's __bi_remaining might
    already have been decremented to 0, e.g.: if bio passed to underlying
    data device was split via blk_queue_split().
    
    Use dm_bio_{record,restore} rather than effectively open-coding them in
    dm-integrity -- these methods now manage __bi_remaining too.
    
    Depends-on: f7f0b057a9c1 ("dm bio record: save/restore bi_end_io and bi_integrity")
    Reported-by: Daniel Glöckner <dg@emlix.com>
    Suggested-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da23154ff03b76df14838440872f5a69dac9e61e
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Feb 28 18:00:53 2020 -0500

    dm bio record: save/restore bi_end_io and bi_integrity
    
    [ Upstream commit 1b17159e52bb31f982f82a6278acd7fab1d3f67b ]
    
    Also, save/restore __bi_remaining in case the bio was used in a
    BIO_CHAIN (e.g. due to blk_queue_split).
    
    Suggested-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cffdf960b0fb7a75107a8d24d39386920dc04ef
Author: Daniel Axtens <dja@axtens.net>
Date:   Tue Feb 25 10:44:27 2020 -0800

    altera-stapl: altera_get_note: prevent write beyond end of 'key'
    
    [ Upstream commit 3745488e9d599916a0b40d45d3f30e3d4720288e ]
    
    altera_get_note is called from altera_init, where key is kzalloc(33).
    
    When the allocation functions are annotated to allow the compiler to see
    the sizes of objects, and with FORTIFY_SOURCE, we see:
    
    In file included from drivers/misc/altera-stapl/altera.c:14:0:
    In function ‘strlcpy’,
        inlined from ‘altera_init’ at drivers/misc/altera-stapl/altera.c:2189:5:
    include/linux/string.h:378:4: error: call to ‘__write_overflow’ declared with attribute error: detected write beyond size of object passed as 1st parameter
        __write_overflow();
        ^~~~~~~~~~~~~~~~~~
    
    That refers to this code in altera_get_note:
    
        if (key != NULL)
                strlcpy(key, &p[note_strings +
                                get_unaligned_be32(
                                &p[note_table + (8 * i)])],
                        length);
    
    The error triggers because the length of 'key' is 33, but the copy
    uses length supplied as the 'length' parameter, which is always
    256. Split the size parameter into key_len and val_len, and use the
    appropriate length depending on what is being copied.
    
    Detected by compiler error, only compile-tested.
    
    Cc: "Igor M. Liplianin" <liplianin@netup.ru>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Link: https://lore.kernel.org/r/20200120074344.504-2-dja@axtens.net
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/202002251042.D898E67AC@keescook
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3e9f82b2a517bf327a3242d5af26165d0079114
Author: luanshi <zhangliguang@linux.alibaba.com>
Date:   Wed Feb 26 13:45:10 2020 +0800

    drivers/perf: arm_pmu_acpi: Fix incorrect checking of gicc pointer
    
    [ Upstream commit 3ba52ad55b533760a1f65836aa0ec9d35e36bb4f ]
    
    Fix bogus NULL checks on the return value of acpi_cpu_get_madt_gicc()
    by checking for a 0 'gicc->performance_interrupt' value instead.
    
    Signed-off-by: Liguang Zhang <zhangliguang@linux.alibaba.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a832f5e0e8b37575bcc81eb404787a777d076db1
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Feb 20 13:30:12 2020 +0100

    drm/exynos: dsi: fix workaround for the legacy clock name
    
    [ Upstream commit c0fd99d659ba5582e09625c7a985d63fc2ca74b5 ]
    
    Writing to the built-in strings arrays doesn't work if driver is loaded
    as kernel module. This is also considered as a bad pattern. Fix this by
    adding a call to clk_get() with legacy clock name. This fixes following
    kernel oops if driver is loaded as module:
    
    Unable to handle kernel paging request at virtual address bf047978
     pgd = (ptrval)
     [bf047978] *pgd=59344811, *pte=5903c6df, *ppte=5903c65f
     Internal error: Oops: 80f [#1] SMP ARM
     Modules linked in: mc exynosdrm(+) analogix_dp rtc_s3c exynos_ppmu i2c_gpio
     CPU: 1 PID: 212 Comm: systemd-udevd Not tainted 5.6.0-rc2-next-20200219 #326
     videodev: Linux video capture interface: v2.00
     Hardware name: Samsung Exynos (Flattened Device Tree)
     PC is at exynos_dsi_probe+0x1f0/0x384 [exynosdrm]
     LR is at exynos_dsi_probe+0x1dc/0x384 [exynosdrm]
     ...
     Process systemd-udevd (pid: 212, stack limit = 0x(ptrval))
     ...
     [<bf03cf14>] (exynos_dsi_probe [exynosdrm]) from [<c09b1ca0>] (platform_drv_probe+0x6c/0xa4)
     [<c09b1ca0>] (platform_drv_probe) from [<c09afcb8>] (really_probe+0x210/0x350)
     [<c09afcb8>] (really_probe) from [<c09aff74>] (driver_probe_device+0x60/0x1a0)
     [<c09aff74>] (driver_probe_device) from [<c09b0254>] (device_driver_attach+0x58/0x60)
     [<c09b0254>] (device_driver_attach) from [<c09b02dc>] (__driver_attach+0x80/0xbc)
     [<c09b02dc>] (__driver_attach) from [<c09ade00>] (bus_for_each_dev+0x68/0xb4)
     [<c09ade00>] (bus_for_each_dev) from [<c09aefd8>] (bus_add_driver+0x130/0x1e8)
     [<c09aefd8>] (bus_add_driver) from [<c09b0d64>] (driver_register+0x78/0x110)
     [<c09b0d64>] (driver_register) from [<bf038558>] (exynos_drm_init+0xe8/0x11c [exynosdrm])
     [<bf038558>] (exynos_drm_init [exynosdrm]) from [<c0302fa8>] (do_one_initcall+0x50/0x220)
     [<c0302fa8>] (do_one_initcall) from [<c03dd02c>] (do_init_module+0x60/0x210)
     [<c03dd02c>] (do_init_module) from [<c03dbf44>] (load_module+0x1c0c/0x2310)
     [<c03dbf44>] (load_module) from [<c03dc85c>] (sys_finit_module+0xac/0xbc)
     [<c03dc85c>] (sys_finit_module) from [<c0301000>] (ret_fast_syscall+0x0/0x54)
     Exception stack(0xd979bfa8 to 0xd979bff0)
     ...
     ---[ end trace db16efe05faab470 ]---
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Andrzej Hajda <a.hajda@samsung.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df263df8d3ad8da2534f684bdfc6f8cbc33ee5ab
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Feb 27 08:06:37 2020 +0100

    drm/exynos: dsi: propagate error value and silence meaningless warning
    
    [ Upstream commit 0a9d1e3f3f038785ebc72d53f1c409d07f6b4ff5 ]
    
    Properly propagate error value from devm_regulator_bulk_get() and don't
    confuse user with meaningless warning about failure in getting regulators
    in case of deferred probe.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8be070448601997a578cdc3c18cf9742ff6a9ac8
Author: Thommy Jakobsson <thommyj@gmail.com>
Date:   Mon Feb 24 17:26:43 2020 +0100

    spi/zynqmp: remove entry that causes a cs glitch
    
    [ Upstream commit 5dd8304981ecffa77bb72b1c57c4be5dfe6cfae9 ]
    
    In the public interface for chipselect, there is always an entry
    commented as "Dummy generic FIFO entry" pushed down to the fifo right
    after the activate/deactivate command. The dummy entry is 0x0,
    irregardless if the intention was to activate or deactive the cs. This
    causes the cs line to glitch rather than beeing activated in the case
    when there was an activate command.
    
    This has been observed on oscilloscope, and have caused problems for at
    least one specific flash device type connected to the qspi port. After
    the change the glitch is gone and cs goes active when intended.
    
    The reason why this worked before (except for the glitch) was because
    when sending the actual data, the CS bits are once again set. Since
    most flashes uses mode 0, there is always a half clk period anyway for
    cs to clk active setup time. If someone would rely on timing from a
    chip_select call to a transfer_one, it would fail though.
    
    It is unknown why the dummy entry was there in the first place, git log
    seems to be of no help in this case. The reference manual gives no
    indication of the necessity of this. In fact the lower 8 bits are a
    setup (or hold in case of deactivate) time expressed in cycles. So this
    should not be needed to fulfill any setup/hold timings.
    
    Signed-off-by: Thommy Jakobsson <thommyj@gmail.com>
    Reviewed-by: Naga Sureshkumar Relli <naga.sureshkumar.relli@xilinx.com>
    Link: https://lore.kernel.org/r/20200224162643.29102-1-thommyj@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ace14074b2161ae4c479f808eb1a8e5a114d59a
Author: Evan Green <evgreen@chromium.org>
Date:   Tue Feb 11 14:37:00 2020 -0800

    spi: pxa2xx: Add CS control clock quirk
    
    [ Upstream commit 683f65ded66a9a7ff01ed7280804d2132ebfdf7e ]
    
    In some circumstances on Intel LPSS controllers, toggling the LPSS
    CS control register doesn't actually cause the CS line to toggle.
    This seems to be failure of dynamic clock gating that occurs after
    going through a suspend/resume transition, where the controller
    is sent through a reset transition. This ruins SPI transactions
    that either rely on delay_usecs, or toggle the CS line without
    sending data.
    
    Whenever CS is toggled, momentarily set the clock gating register
    to "Force On" to poke the controller into acting on CS.
    
    Signed-off-by: Rajat Jain <rajatja@google.com>
    Signed-off-by: Evan Green <evgreen@chromium.org>
    Link: https://lore.kernel.org/r/20200211223700.110252-1-rajatja@google.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cdbdc24c55d7246a61a1c5ec74215ac23b203a8
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Tue Jan 28 12:11:47 2020 +0530

    ARM: dts: dra7: Add "dma-ranges" property to PCIe RC DT nodes
    
    [ Upstream commit 27f13774654ea6bd0b6fc9b97cce8d19e5735661 ]
    
    'dma-ranges' in a PCI bridge node does correctly set dma masks for PCI
    devices not described in the DT. Certain DRA7 platforms (e.g., DRA76)
    has RAM above 32-bit boundary (accessible with LPAE config) though the
    PCIe bridge will be able to access only 32-bits. Add 'dma-ranges'
    property in PCIe RC DT nodes to indicate the host bridge can access
    only 32 bits.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a1d6966c74d59e5b262551d2f04825946c6b28b
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Feb 20 17:01:32 2020 +0530

    powerpc: Include .BTF section
    
    [ Upstream commit cb0cc635c7a9fa8a3a0f75d4d896721819c63add ]
    
    Selecting CONFIG_DEBUG_INFO_BTF results in the below warning from ld:
      ld: warning: orphan section `.BTF' from `.btf.vmlinux.bin.o' being placed in section `.BTF'
    
    Include .BTF section in vmlinux explicitly to fix the same.
    
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200220113132.857132-1-naveen.n.rao@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b84530ba478f05aab785ce1341fc39eb45fcb32e
Author: Yuji Sasaki <sasakiy@chromium.org>
Date:   Fri Feb 14 13:13:40 2020 +0530

    spi: qup: call spi_qup_pm_resume_runtime before suspending
    
    [ Upstream commit 136b5cd2e2f97581ae560cff0db2a3b5369112da ]
    
    spi_qup_suspend() will cause synchronous external abort when
    runtime suspend is enabled and applied, as it tries to
    access SPI controller register while clock is already disabled
    in spi_qup_pm_suspend_runtime().
    
    Signed-off-by: Yuji sasaki <sasakiy@chromium.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20200214074340.2286170-1-vkoul@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21c6189d50ec22854c2d49fcb6baab24c4c9d523
Author: Evan Benn <evanbenn@chromium.org>
Date:   Fri Feb 7 15:23:51 2020 +1100

    drm/mediatek: Find the cursor plane instead of hard coding it
    
    [ Upstream commit 318caac7c81cdf5806df30c3d72385659a5f0f53 ]
    
    The cursor and primary planes were hard coded.
    Now search for them for passing to drm_crtc_init_with_planes
    
    Signed-off-by: Evan Benn <evanbenn@chromium.org>
    Reviewed-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
