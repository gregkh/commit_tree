commit a5c3f390eb7799c3d1d92121382372b1fd365fa3
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Mar 26 12:13:55 2017 +0200

    Linux 4.4.57

commit 5fa513cb07213608907d4daa123b81e5a32d13e0
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Feb 15 01:26:39 2017 -0500

    ext4: fix fencepost in s_first_meta_bg validation
    
    commit 2ba3e6e8afc9b6188b471f27cf2b5e3cf34e7af2 upstream.
    
    It is OK for s_first_meta_bg to be equal to the number of block group
    descriptor blocks.  (It rarely happens, but it shouldn't cause any
    problems.)
    
    https://bugzilla.kernel.org/show_bug.cgi?id=194567
    
    Fixes: 3a4b77cd47bb837b8557595ec7425f281f2ca1fe
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d88b83e66bbf588a5d85168d9839501cd47fe561
Author: Tahsin Erdogan <tahsin@google.com>
Date:   Sat Feb 25 13:00:19 2017 -0800

    percpu: acquire pcpu_lock when updating pcpu_nr_empty_pop_pages
    
    commit 320661b08dd6f1746d5c7ab4eb435ec64b97cd45 upstream.
    
    Update to pcpu_nr_empty_pop_pages in pcpu_alloc() is currently done
    without holding pcpu_lock. This can lead to bad updates to the variable.
    Add missing lock calls.
    
    Fixes: b539b87fed37 ("percpu: implmeent pcpu_nr_empty_pop_pages and chunk->nr_populated")
    Signed-off-by: Tahsin Erdogan <tahsin@google.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e08f608ab4288f4192a504e6c94dd7c9c931dad8
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Mon Mar 6 12:58:42 2017 -0500

    gfs2: Avoid alignment hole in struct lm_lockname
    
    commit 28ea06c46fbcab63fd9a55531387b7928a18a590 upstream.
    
    Commit 88ffbf3e03 switches to using rhashtables for glocks, hashing over
    the entire struct lm_lockname instead of its individual fields.  On some
    architectures, struct lm_lockname contains a hole of uninitialized
    memory due to alignment rules, which now leads to incorrect hash values.
    Get rid of that hole.
    
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f47ca4882564c4b76cc9c426583a49d23893dda
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Mar 13 13:39:01 2017 +0100

    isdn/gigaset: fix NULL-deref at probe
    
    commit 68c32f9c2a36d410aa242e661506e5b2c2764179 upstream.
    
    Make sure to check the number of endpoints to avoid dereferencing a
    NULL-pointer should a malicious device lack endpoints.
    
    Fixes: cf7776dc05b8 ("[PATCH] isdn4linux: Siemens Gigaset drivers - direct USB connection")
    Cc: Hansjoerg Lipp <hjlipp@web.de>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d267ecbdfdb4199c0e3a967ecc17a6b80d95209a
Author: Max Lohrmann <post@wickenrode.com>
Date:   Tue Mar 7 22:09:56 2017 -0800

    target: Fix VERIFY_16 handling in sbc_parse_cdb
    
    commit 13603685c1f12c67a7a2427f00b63f39a2b6f7c9 upstream.
    
    As reported by Max, the Windows 2008 R2 chkdsk utility expects
    VERIFY_16 to be supported, and does not handle the returned
    CHECK_CONDITION properly, resulting in an infinite loop.
    
    The kernel will log huge amounts of this error:
    
    kernel: TARGET_CORE[iSCSI]: Unsupported SCSI Opcode 0x8f, sending
    CHECK_CONDITION.
    
    Signed-off-by: Max Lohrmann <post@wickenrode.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 246760c61d9c4c0114ba5bd324df4ae17468e238
Author: Chris Leech <cleech@redhat.com>
Date:   Mon Feb 27 16:58:36 2017 -0800

    scsi: libiscsi: add lock around task lists to fix list corruption regression
    
    commit 6f8830f5bbab16e54f261de187f3df4644a5b977 upstream.
    
    There's a rather long standing regression from the commit "libiscsi:
    Reduce locking contention in fast path"
    
    Depending on iSCSI target behavior, it's possible to hit the case in
    iscsi_complete_task where the task is still on a pending list
    (!list_empty(&task->running)).  When that happens the task is removed
    from the list while holding the session back_lock, but other task list
    modification occur under the frwd_lock.  That leads to linked list
    corruption and eventually a panicked system.
    
    Rather than back out the session lock split entirely, in order to try
    and keep some of the performance gains this patch adds another lock to
    maintain the task lists integrity.
    
    Major enterprise supported kernels have been backing out the lock split
    for while now, thanks to the efforts at IBM where a lab setup has the
    most reliable reproducer I've seen on this issue.  This patch has been
    tested there successfully.
    
    Signed-off-by: Chris Leech <cleech@redhat.com>
    Fixes: 659743b02c41 ("[SCSI] libiscsi: Reduce locking contention in fast path")
    Reported-by: Prashantha Subbarao <psubbara@us.ibm.com>
    Reviewed-by: Guilherme G. Piccoli <gpiccoli@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82bd06aba880215dadd3e33dc3d583d32df9dbbb
Author: Anton Blanchard <anton@samba.org>
Date:   Mon Feb 13 08:49:20 2017 +1100

    scsi: lpfc: Add shutdown method for kexec
    
    commit 85e8a23936ab3442de0c42da97d53b29f004ece1 upstream.
    
    We see lpfc devices regularly fail during kexec. Fix this by adding a
    shutdown method which mirrors the remove method.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Reviewed-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
    Tested-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a621633cdfa780c50907506457798c907cb8110
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Thu Nov 3 23:06:53 2016 -0700

    target/pscsi: Fix TYPE_TAPE + TYPE_MEDIMUM_CHANGER export
    
    commit a04e54f2c35823ca32d56afcd5cea5b783e2f51a upstream.
    
    The following fixes a divide by zero OOPs with TYPE_TAPE
    due to pscsi_tape_read_blocksize() failing causing a zero
    sd->sector_size being propigated up via dev_attrib.hw_block_size.
    
    It also fixes another long-standing bug where TYPE_TAPE and
    TYPE_MEDIMUM_CHANGER where using pscsi_create_type_other(),
    which does not call scsi_device_get() to take the device
    reference.  Instead, rename pscsi_create_type_rom() to
    pscsi_create_type_nondisk() and use it for all cases.
    
    Finally, also drop a dump_stack() in pscsi_get_blocks() for
    non TYPE_DISK, which in modern target-core can get invoked
    via target_sense_desc_format() during CHECK_CONDITION.
    
    Reported-by: Malcolm Haak <insanemal@gmail.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 582f548924cdda2dadf842020075f6b2525421d2
Author: Shaohua Li <shli@fb.com>
Date:   Tue Feb 28 13:00:20 2017 -0800

    md/raid1/10: fix potential deadlock
    
    commit 61eb2b43b99ebdc9bc6bc83d9792257b243e7cb3 upstream.
    
    Neil Brown pointed out a potential deadlock in raid 10 code with
    bio_split/chain. The raid1 code could have the same issue, but recent
    barrier rework makes it less likely to happen. The deadlock happens in
    below sequence:
    
    1. generic_make_request(bio), this will set current->bio_list
    2. raid10_make_request will split bio to bio1 and bio2
    3. __make_request(bio1), wait_barrer, add underlayer disk bio to
    current->bio_list
    4. __make_request(bio2), wait_barrer
    
    If raise_barrier happens between 3 & 4, since wait_barrier runs at 3,
    raise_barrier waits for IO completion from 3. And since raise_barrier
    sets barrier, 4 waits for raise_barrier. But IO from 3 can't be
    dispatched because raid10_make_request() doesn't finished yet.
    
    The solution is to adjust the IO ordering. Quotes from Neil:
    "
    It is much safer to:
    
        if (need to split) {
            split = bio_split(bio, ...)
            bio_chain(...)
            make_request_fn(split);
            generic_make_request(bio);
       } else
            make_request_fn(mddev, bio);
    
    This way we first process the initial section of the bio (in 'split')
    which will queue some requests to the underlying devices.  These
    requests will be queued in generic_make_request.
    Then we queue the remainder of the bio, which will be added to the end
    of the generic_make_request queue.
    Then we return.
    generic_make_request() will pop the lower-level device requests off the
    queue and handle them first.  Then it will process the remainder
    of the original bio once the first section has been fully processed.
    "
    
    Note, this only happens in read path. In write path, the bio is flushed to
    underlaying disks either by blk flush (from schedule) or offladed to raid1/10d.
    It's queued in current->bio_list.
    
    Cc: Coly Li <colyli@suse.de>
    Suggested-by: NeilBrown <neilb@suse.com>
    Reviewed-by: Jack Wang <jinpu.wang@profitbricks.com>
    Signed-off-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b24473976b985fd1c1d57a9ea934f9792bf654cc
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Mar 7 16:14:49 2017 +1100

    powerpc/boot: Fix zImage TOC alignment
    
    commit 97ee351b50a49717543533cfb85b4bf9d88c9680 upstream.
    
    Recent toolchains force the TOC to be 256 byte aligned. We need to
    enforce this alignment in the zImage linker script, otherwise pointers
    to our TOC variables (__toc_start) could be incorrect. If the actual
    start of the TOC and __toc_start don't have the same value we crash
    early in the zImage wrapper.
    
    Suggested-by: Alan Modra <amodra@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09875d1393d4589bcdfeeba8747a12dd69810cc9
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Wed Mar 15 00:12:16 2017 +0100

    cpufreq: Fix and clean up show_cpuinfo_cur_freq()
    
    commit 9b4f603e7a9f4282aec451063ffbbb8bb410dcd9 upstream.
    
    There is a missing newline in show_cpuinfo_cur_freq(), so add it,
    but while at it clean that function up somewhat too.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f02729f2ab87c84bbc959e7631487a4b84dbdf63
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Mar 16 13:47:49 2017 +0100

    perf/core: Fix event inheritance on fork()
    
    commit e7cc4865f0f31698ef2f7aac01a50e78968985b7 upstream.
    
    While hunting for clues to a use-after-free, Oleg spotted that
    perf_event_init_context() can loose an error value with the result
    that fork() can succeed even though we did not fully inherit the perf
    event context.
    
    Spotted-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: oleg@redhat.com
    Fixes: 889ff0150661 ("perf/core: Split context's event group list into pinned and non-pinned lists")
    Link: http://lkml.kernel.org/r/20170316125823.190342547@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cb0c0b73d1c79a8ce260836b3f27650aa1c57f1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 2 12:17:22 2017 -0800

    give up on gcc ilog2() constant optimizations
    
    commit 474c90156c8dcc2fa815e6716cc9394d7930cb9c upstream.
    
    gcc-7 has an "optimization" pass that completely screws up, and
    generates the code expansion for the (impossible) case of calling
    ilog2() with a zero constant, even when the code gcc compiles does not
    actually have a zero constant.
    
    And we try to generate a compile-time error for anybody doing ilog2() on
    a constant where that doesn't make sense (be it zero or negative).  So
    now gcc7 will fail the build due to our sanity checking, because it
    created that constant-zero case that didn't actually exist in the source
    code.
    
    There's a whole long discussion on the kernel mailing about how to work
    around this gcc bug.  The gcc people themselevs have discussed their
    "feature" in
    
       https://gcc.gnu.org/bugzilla/show_bug.cgi?id=72785
    
    but it's all water under the bridge, because while it looked at one
    point like it would be solved by the time gcc7 was released, that was
    not to be.
    
    So now we have to deal with this compiler braindamage.
    
    And the only simple approach seems to be to just delete the code that
    tries to warn about bad uses of ilog2().
    
    So now "ilog2()" will just return 0 not just for the value 1, but for
    any non-positive value too.
    
    It's not like I can recall anybody having ever actually tried to use
    this function on any invalid value, but maybe the sanity check just
    meant that such code never made it out in public.
    
    Reported-by: Laura Abbott <labbott@redhat.com>
    Cc: John Stultz <john.stultz@linaro.org>,
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6052eb871217c0679ac63779fc5e43eb49c83b0c
Author: Andi Kleen <ak@linux.intel.com>
Date:   Mon May 23 16:24:05 2016 -0700

    kernek/fork.c: allocate idle task for a CPU always on its local node
    
    commit 725fc629ff2545b061407305ae51016c9f928fce upstream.
    
    Linux preallocates the task structs of the idle tasks for all possible
    CPUs.  This currently means they all end up on node 0.  This also
    implies that the cache line of MWAIT, which is around the flags field in
    the task struct, are all located in node 0.
    
    We see a noticeable performance improvement on Knights Landing CPUs when
    the cache lines used for MWAIT are located in the local nodes of the
    CPUs using them.  I would expect this to give a (likely slight)
    improvement on other systems too.
    
    The patch implements placing the idle task in the node of its CPUs, by
    passing the right target node to copy_process()
    
    [akpm@linux-foundation.org: use NUMA_NO_NODE, not a bare -1]
    Link: http://lkml.kernel.org/r/1463492694-15833-1-git-send-email-andi@firstfloor.org
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cc5b73d79697e1a529249572ac022192f1ddffd
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Mon Jan 25 16:00:41 2016 +0100

    hv_netvsc: use skb_get_hash() instead of a homegrown implementation
    
    commit 757647e10e55c01fb7a9c4356529442e316a7c72 upstream.
    
    Recent changes to 'struct flow_keys' (e.g commit d34af823ff40 ("net: Add
    VLAN ID to flow_keys")) introduced a performance regression in netvsc
    driver. Is problem is, however, not the above mentioned commit but the
    fact that netvsc_set_hash() function did some assumptions on the struct
    flow_keys data layout and this is wrong.
    
    Get rid of netvsc_set_hash() by switching to skb_get_hash(). This change
    will also imply switching to Jenkins hash from the currently used Toeplitz
    but it seems there is no good excuse for Toeplitz to stay.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cea050150323a2c09efc316f0272af053e0b87e2
Author: Jason Gunthorpe <jgg@ziepe.ca>
Date:   Wed Nov 25 14:05:30 2015 -0700

    tpm_tis: Use devm_free_irq not free_irq
    
    commit 727f28b8ca24a581c7bd868326b8cea1058c720a upstream.
    
    The interrupt is always allocated with devm_request_irq so it
    must always be freed with devm_free_irq.
    
    Fixes: 448e9c55c12d ("tpm_tis: verify interrupt during init")
    Signed-off-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Acked-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Tested-by: Martin Wilck <Martin.Wilck@ts.fujitsu.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Acked-by: Peter Huewe <peterhuewe@gmx.de>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13a26889cbc1eb8a7b9a7712c05538c55659fe40
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Jan 14 08:07:55 2016 +1000

    drm/amdgpu: add missing irq.h include
    
    commit e9c5e7402dad6f4f04c2430db6f283512bcd4392 upstream.
    
    this fixes the build on arm.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68ea3948ed3d48dd1e0897b121f37da6f14ffbcc
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Fri Apr 15 09:41:35 2016 +0200

    s390/pci: fix use after free in dma_init
    
    commit dba599091c191d209b1499511a524ad9657c0e5a upstream.
    
    After a failure during registration of the dma_table (because of the
    function being in error state) we free its memory but don't reset the
    associated pointer to zero.
    
    When we then receive a notification from firmware (about the function
    being in error state) we'll try to walk and free the dma_table again.
    
    Fix this by resetting the dma_table pointer. In addition to that make
    sure that we free the iommu_bitmap when appropriate.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50730d7f361f9915ec7063a629500119b0e8c3b6
Author: Thomas Huth <thuth@redhat.com>
Date:   Wed May 18 21:01:20 2016 +0200

    KVM: PPC: Book3S PR: Fix illegal opcode emulation
    
    commit 708e75a3ee750dce1072134e630d66c4e6eaf63c upstream.
    
    If kvmppc_handle_exit_pr() calls kvmppc_emulate_instruction() to emulate
    one instruction (in the BOOK3S_INTERRUPT_H_EMUL_ASSIST case), it calls
    kvmppc_core_queue_program() afterwards if kvmppc_emulate_instruction()
    returned EMULATE_FAIL, so the guest gets an program interrupt for the
    illegal opcode.
    However, the kvmppc_emulate_instruction() also tried to inject a
    program exception for this already, so the program interrupt gets
    injected twice and the return address in srr0 gets destroyed.
    All other callers of kvmppc_emulate_instruction() are also injecting
    a program interrupt, and since the callers have the right knowledge
    about the srr1 flags that should be used, it is the function
    kvmppc_emulate_instruction() that should _not_ inject program
    interrupts, so remove the kvmppc_core_queue_program() here.
    
    This fixes the issue discovered by Laurent Vivier with kvm-unit-tests
    where the logs are filled with these messages when the test tries
    to execute an illegal instruction:
    
         Couldn't emulate instruction 0x00000000 (op 0 xop 0)
         kvmppc_handle_exit_pr: emulation at 700 failed (00000000)
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Alexander Graf <agraf@suse.de>
    Tested-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2d9577854f5a5469bcf7a3d1b17ca5e9b9ba673
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Fri Apr 22 13:05:31 2016 +0100

    xen/qspinlock: Don't kick CPU if IRQ is not initialized
    
    commit 707e59ba494372a90d245f18b0c78982caa88e48 upstream.
    
    The following commit:
    
      1fb3a8b2cfb2 ("xen/spinlock: Fix locking path engaging too soon under PVHVM.")
    
    ... moved the initalization of the kicker interrupt until after
    native_cpu_up() is called.
    
    However, when using qspinlocks, a CPU may try to kick another CPU that is
    spinning (because it has not yet initialized its kicker interrupt), resulting
    in the following crash during boot:
    
      kernel BUG at /build/linux-Ay7j_C/linux-4.4.0/drivers/xen/events/events_base.c:1210!
      invalid opcode: 0000 [#1] SMP
      ...
      RIP: 0010:[<ffffffff814c97c9>]  [<ffffffff814c97c9>] xen_send_IPI_one+0x59/0x60
      ...
      Call Trace:
       [<ffffffff8102be9e>] xen_qlock_kick+0xe/0x10
       [<ffffffff810cabc2>] __pv_queued_spin_unlock+0xb2/0xf0
       [<ffffffff810ca6d1>] ? __raw_callee_save___pv_queued_spin_unlock+0x11/0x20
       [<ffffffff81052936>] ? check_tsc_warp+0x76/0x150
       [<ffffffff81052aa6>] check_tsc_sync_source+0x96/0x160
       [<ffffffff81051e28>] native_cpu_up+0x3d8/0x9f0
       [<ffffffff8102b315>] xen_hvm_cpu_up+0x35/0x80
       [<ffffffff8108198c>] _cpu_up+0x13c/0x180
       [<ffffffff81081a4a>] cpu_up+0x7a/0xa0
       [<ffffffff81f80dfc>] smp_init+0x7f/0x81
       [<ffffffff81f5a121>] kernel_init_freeable+0xef/0x212
       [<ffffffff81817f30>] ? rest_init+0x80/0x80
       [<ffffffff81817f3e>] kernel_init+0xe/0xe0
       [<ffffffff8182488f>] ret_from_fork+0x3f/0x70
       [<ffffffff81817f30>] ? rest_init+0x80/0x80
    
    To fix this, only send the kick if the target CPU's interrupt has been
    initialized. This check isn't racy, because the target is waiting for
    the spinlock, so it won't have initialized the interrupt in the
    meantime.
    
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Cc: xen-devel@lists.xenproject.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1a0f744f8e63fbef10dc84029e9d213e03a3a18
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Fri Jun 3 17:09:22 2016 -0700

    Drivers: hv: avoid vfree() on crash
    
    commit a9f61ca793becabdefab03b77568d6c6f8c1bc79 upstream.
    
    When we crash from NMI context (e.g. after NMI injection from host when
    'sysctl -w kernel.unknown_nmi_panic=1' is set) we hit
    
        kernel BUG at mm/vmalloc.c:1530!
    
    as vfree() is denied. While the issue could be solved with in_nmi() check
    instead I opted for skipping vfree on all sorts of crashes to reduce the
    amount of work which can cause consequent crashes. We don't really need to
    free anything on crash.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a2512768f1683514ef964e2e0767458baef14de
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Apr 30 19:21:35 2016 -0700

    Drivers: hv: balloon: don't crash when memory is added in non-sorted order
    
    commit 77c0c9735bc0ba5898e637a3a20d6bcb50e3f67d upstream.
    
    When we iterate through all HA regions in handle_pg_range() we have an
    assumption that all these regions are sorted in the list and the
    'start_pfn >= has->end_pfn' check is enough to find the proper region.
    Unfortunately it's not the case with WS2016 where host can hot-add regions
    in a different order. We end up modifying the wrong HA region and crashing
    later on pages online. Modify the check to make sure we found the region
    we were searching for while iterating. Fix the same check in pfn_covered()
    as well.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3787a071d145055a89442cf614ceec39c315bc9f
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Mon Aug 22 14:42:52 2016 +0300

    pinctrl: cherryview: Do not mask all interrupts in probe
    
    commit bcb48cca23ec9852739e4a464307fa29515bbe48 upstream.
    
    The Cherryview GPIO controller has 8 or 16 wires connected to the I/O-APIC
    which can be used directly by the platform/BIOS or drivers. One such wire
    is used as SCI (System Control Interrupt) which ACPI depends on to be able
    to trigger GPEs (General Purpose Events).
    
    The pinctrl driver itself uses another IRQ resource which is wire OR of all
    the 8 (or 16) wires and follows what BIOS has programmed to the IntSel
    register of each pin.
    
    Currently the driver masks all interrupts at probe time and this prevents
    these direct interrupts from working as expected. The reason for this is
    that some early stage prototypes had some pins misconfigured causing lots
    of spurious interrupts.
    
    We fix this by leaving the interrupt mask untouched. This allows SCI and
    other direct interrupts work properly. What comes to the possible spurious
    interrupts we switch the default handler to be handle_bad_irq() instead of
    handle_simple_irq() (which was not correct anyway).
    
    Reported-by: Yu C Chen <yu.c.chen@intel.com>
    Reported-by: Anisse Astier <anisse@astier.eu>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 962c66c74184b1c7927f5906c9848e605fe8b236
Author: Alex Hung <alex.hung@canonical.com>
Date:   Fri May 27 15:47:06 2016 +0800

    ACPI / video: skip evaluating _DOD when it does not exist
    
    commit e34fbbac669de0b7fb7803929d0477f35f6e2833 upstream.
    
    Some system supports hybrid graphics and its discrete VGA
    does not have any connectors and therefore has no _DOD method.
    
    Signed-off-by: Alex Hung <alex.hung@canonical.com>
    Reviewed-by: Aaron Lu <aaron.lu@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12e1a3cd11ea373143e957cf9698a26a4e43f4a6
Author: Manoj N. Kumar <manoj@linux.vnet.ibm.com>
Date:   Fri Mar 4 15:55:20 2016 -0600

    cxlflash: Increase cmd_per_lun for better throughput
    
    commit 83430833b4d4a9c9b23964babbeb1f36450f8136 upstream.
    
    With the current value of cmd_per_lun at 16, the throughput
    over a single adapter is limited to around 150kIOPS.
    
    Increase the value of cmd_per_lun to 256 to improve
    throughput. With this change a single adapter is able to
    attain close to the maximum throughput (380kIOPS).
    Also change the number of RRQ entries that can be queued.
    
    Signed-off-by: Manoj N. Kumar <manoj@linux.vnet.ibm.com>
    Acked-by: Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
    Reviewed-by: Uma Krishnan <ukrishn@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8c07cbc2e72a7e26bff8c5823f6e045eeeb4e16
Author: Wang, Rui Y <rui.y.wang@intel.com>
Date:   Wed Jan 27 17:08:36 2016 +0800

    crypto: mcryptd - Fix load failure
    
    commit ddef482420b1ba8ec45e6123a7e8d3f67b21e5e3 upstream.
    
    mcryptd_create_hash() fails by returning -EINVAL, causing any
    driver using mcryptd to fail to load. It is because it needs
    to set its statesize properly.
    
    Signed-off-by: Rui Wang <rui.y.wang@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10659b8f5c600e642d0f1cadbbf83c739ac0c739
Author: Wang, Rui Y <rui.y.wang@intel.com>
Date:   Sun Nov 29 22:45:34 2015 +0800

    crypto: cryptd - Assign statesize properly
    
    commit 1a07834024dfca5c4bed5de8f8714306e0a11836 upstream.
    
    cryptd_create_hash() fails by returning -EINVAL.  It is because after
    8996eafdc ("crypto: ahash - ensure statesize is non-zero") all ahash
    drivers must have a non-zero statesize.
    
    This patch fixes the problem by properly assigning the statesize.
    
    Signed-off-by: Rui Wang <rui.y.wang@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c78c3376ec6707f4e2177906928b12cb6cd8c5a9
Author: Wang, Rui Y <rui.y.wang@intel.com>
Date:   Sun Nov 29 22:45:33 2015 +0800

    crypto: ghash-clmulni - Fix load failure
    
    commit 3a020a723c65eb8ffa7c237faca26521a024e582 upstream.
    
    ghash_clmulni_intel fails to load on Linux 4.3+ with the following message:
    "modprobe: ERROR: could not insert 'ghash_clmulni_intel': Invalid argument"
    
    After 8996eafdc ("crypto: ahash - ensure statesize is non-zero") all ahash
    drivers are required to implement import()/export(), and must have a non-
    zero statesize.
    
    This patch has been tested with the algif_hash interface. The calculated
    digest values, after several rounds of import()s and export()s, match those
    calculated by tcrypt.
    
    Signed-off-by: Rui Wang <rui.y.wang@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45d9558837d4d79e6d241f1c45cabea8d20dca22
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Jun 27 10:23:10 2016 -0400

    USB: don't free bandwidth_mutex too early
    
    commit ab2a4bf83902c170d29ba130a8abb5f9d90559e1 upstream.
    
    The USB core contains a bug that can show up when a USB-3 host
    controller is removed.  If the primary (USB-2) hcd structure is
    released before the shared (USB-3) hcd, the core will try to do a
    double-free of the common bandwidth_mutex.
    
    The problem was described in graphical form by Chung-Geol Kim, who
    first reported it:
    
    =================================================
         At *remove USB(3.0) Storage
         sequence <1> --> <5> ((Problem Case))
    =================================================
                                      VOLD
    ------------------------------------|------------
                                     (uevent)
                                ________|_________
                               |<1>               |
                               |dwc3_otg_sm_work  |
                               |usb_put_hcd       |
                               |peer_hcd(kref=2)|
                               |__________________|
                                ________|_________
                               |<2>               |
                               |New USB BUS #2    |
                               |                  |
                               |peer_hcd(kref=1)  |
                               |                  |
                             --(Link)-bandXX_mutex|
                             | |__________________|
                             |
        ___________________  |
       |<3>                | |
       |dwc3_otg_sm_work   | |
       |usb_put_hcd        | |
       |primary_hcd(kref=1)| |
       |___________________| |
        _________|_________  |
       |<4>                | |
       |New USB BUS #1     | |
       |hcd_release        | |
       |primary_hcd(kref=0)| |
       |                   | |
       |bandXX_mutex(free) |<-
       |___________________|
                                   (( VOLD ))
                                ______|___________
                               |<5>               |
                               |      SCSI        |
                               |usb_put_hcd       |
                               |peer_hcd(kref=0)  |
                               |*hcd_release      |
                               |bandXX_mutex(free*)|<- double free
                               |__________________|
    
    =================================================
    
    This happens because hcd_release() frees the bandwidth_mutex whenever
    it sees a primary hcd being released (which is not a very good idea
    in any case), but in the course of releasing the primary hcd, it
    changes the pointers in the shared hcd in such a way that the shared
    hcd will appear to be primary when it gets released.
    
    This patch fixes the problem by changing hcd_release() so that it
    deallocates the bandwidth_mutex only when the _last_ hcd structure
    referencing it is released.  The patch also removes an unnecessary
    test, so that when an hcd is released, both the shared_hcd and
    primary_hcd pointers in the hcd's peer will be cleared.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Chung-Geol Kim <chunggeol.kim@samsung.com>
    Tested-by: Chung-Geol Kim <chunggeol.kim@samsung.com>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac1a97d8a562161e42edd23e5d0f1740a3d93c85
Author: Chris Bainbridge <chris.bainbridge@gmail.com>
Date:   Mon Apr 25 13:48:38 2016 +0100

    usb: core: hub: hub_port_init lock controller instead of bus
    
    commit feb26ac31a2a5cb88d86680d9a94916a6343e9e6 upstream.
    
    The XHCI controller presents two USB buses to the system - one for USB2
    and one for USB3. The hub init code (hub_port_init) is reentrant but
    only locks one bus per thread, leading to a race condition failure when
    two threads attempt to simultaneously initialise a USB2 and USB3 device:
    
    [    8.034843] xhci_hcd 0000:00:14.0: Timeout while waiting for setup device command
    [   13.183701] usb 3-3: device descriptor read/all, error -110
    
    On a test system this failure occurred on 6% of all boots.
    
    The call traces at the point of failure are:
    
    Call Trace:
     [<ffffffff81b9bab7>] schedule+0x37/0x90
     [<ffffffff817da7cd>] usb_kill_urb+0x8d/0xd0
     [<ffffffff8111e5e0>] ? wake_up_atomic_t+0x30/0x30
     [<ffffffff817dafbe>] usb_start_wait_urb+0xbe/0x150
     [<ffffffff817db10c>] usb_control_msg+0xbc/0xf0
     [<ffffffff817d07de>] hub_port_init+0x51e/0xb70
     [<ffffffff817d4697>] hub_event+0x817/0x1570
     [<ffffffff810f3e6f>] process_one_work+0x1ff/0x620
     [<ffffffff810f3dcf>] ? process_one_work+0x15f/0x620
     [<ffffffff810f4684>] worker_thread+0x64/0x4b0
     [<ffffffff810f4620>] ? rescuer_thread+0x390/0x390
     [<ffffffff810fa7f5>] kthread+0x105/0x120
     [<ffffffff810fa6f0>] ? kthread_create_on_node+0x200/0x200
     [<ffffffff81ba183f>] ret_from_fork+0x3f/0x70
     [<ffffffff810fa6f0>] ? kthread_create_on_node+0x200/0x200
    
    Call Trace:
     [<ffffffff817fd36d>] xhci_setup_device+0x53d/0xa40
     [<ffffffff817fd87e>] xhci_address_device+0xe/0x10
     [<ffffffff817d047f>] hub_port_init+0x1bf/0xb70
     [<ffffffff811247ed>] ? trace_hardirqs_on+0xd/0x10
     [<ffffffff817d4697>] hub_event+0x817/0x1570
     [<ffffffff810f3e6f>] process_one_work+0x1ff/0x620
     [<ffffffff810f3dcf>] ? process_one_work+0x15f/0x620
     [<ffffffff810f4684>] worker_thread+0x64/0x4b0
     [<ffffffff810f4620>] ? rescuer_thread+0x390/0x390
     [<ffffffff810fa7f5>] kthread+0x105/0x120
     [<ffffffff810fa6f0>] ? kthread_create_on_node+0x200/0x200
     [<ffffffff81ba183f>] ret_from_fork+0x3f/0x70
     [<ffffffff810fa6f0>] ? kthread_create_on_node+0x200/0x200
    
    Which results from the two call chains:
    
    hub_port_init
     usb_get_device_descriptor
      usb_get_descriptor
       usb_control_msg
        usb_internal_control_msg
         usb_start_wait_urb
          usb_submit_urb / wait_for_completion_timeout / usb_kill_urb
    
    hub_port_init
     hub_set_address
      xhci_address_device
       xhci_setup_device
    
    Mathias Nyman explains the current behaviour violates the XHCI spec:
    
     hub_port_reset() will end up moving the corresponding xhci device slot
     to default state.
    
     As hub_port_reset() is called several times in hub_port_init() it
     sounds reasonable that we could end up with two threads having their
     xhci device slots in default state at the same time, which according to
     xhci 4.5.3 specs still is a big no no:
    
     "Note: Software shall not transition more than one Device Slot to the
      Default State at a time"
    
     So both threads fail at their next task after this.
     One fails to read the descriptor, and the other fails addressing the
     device.
    
    Fix this in hub_port_init by locking the USB controller (instead of an
    individual bus) to prevent simultaneous initialisation of both buses.
    
    Fixes: 638139eb95d2 ("usb: hub: allow to process more usb hub events in parallel")
    Link: https://lkml.org/lkml/2016/2/8/312
    Link: https://lkml.org/lkml/2016/2/4/748
    Signed-off-by: Chris Bainbridge <chris.bainbridge@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
     [sumits: minor merge conflict resolution for linux-4.4.y]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
