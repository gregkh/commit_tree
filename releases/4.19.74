commit dbc29aff8d04f134553326a0c533a442a1774041
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Sep 19 09:09:41 2019 +0200

    Linux 4.19.74

commit 9d587fe2cd70f9fe10de6f82aab3498683b73bb6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Aug 28 10:56:48 2019 +0200

    x86/build: Add -Wnoaddress-of-packed-member to REALMODE_CFLAGS, to silence GCC9 build warning
    
    commit 42e0e95474fc6076b5cd68cab8fa0340a1797a72 upstream.
    
    One of the very few warnings I have in the current build comes from
    arch/x86/boot/edd.c, where I get the following with a gcc9 build:
    
       arch/x86/boot/edd.c: In function ‘query_edd’:
       arch/x86/boot/edd.c:148:11: warning: taking address of packed member of ‘struct boot_params’ may result in an unaligned pointer value [-Waddress-of-packed-member]
         148 |  mbrptr = boot_params.edd_mbr_sig_buffer;
             |           ^~~~~~~~~~~
    
    This warning triggers because we throw away all the CFLAGS and then make
    a new set for REALMODE_CFLAGS, so the -Wno-address-of-packed-member we
    added in the following commit is not present:
    
      6f303d60534c ("gcc-9: silence 'address-of-packed-member' warning")
    
    The simplest solution for now is to adjust the warning for this version
    of CFLAGS as well, but it would definitely make sense to examine whether
    REALMODE_CFLAGS could be derived from CFLAGS, so that it picks up changes
    in the compiler flags environment automatically.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Acked-by: Borislav Petkov <bp@alien8.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96c08711fc666d3d2b03dd9c6b9fbe6a4d6aea59
Author: Jean Delvare <jdelvare@suse.de>
Date:   Sun Jul 28 18:42:55 2019 +0200

    nvmem: Use the same permissions for eeprom as for nvmem
    
    commit e70d8b287301eb6d7c7761c6171c56af62110ea3 upstream.
    
    The compatibility "eeprom" attribute is currently root-only no
    matter what the configuration says. The "nvmem" attribute does
    respect the setting of the root_only configuration bit, so do the
    same for "eeprom".
    
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Fixes: b6c217ab9be6 ("nvmem: Add backwards compatibility support for older EEPROM drivers.")
    Reviewed-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20190728184255.563332e6@endymion
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3622d621e9beca76d53cd3007eb7b1d6e724716b
Author: Hui Peng <benquike@gmail.com>
Date:   Mon Aug 19 18:02:29 2019 -0400

    rsi: fix a double free bug in rsi_91x_deinit()
    
    commit 8b51dc7291473093c821195c4b6af85fadedbc2f upstream.
    
    `dev` (struct rsi_91x_usbdev *) field of adapter
    (struct rsi_91x_usbdev *) is allocated  and initialized in
    `rsi_init_usb_interface`. If any error is detected in information
    read from the device side,  `rsi_init_usb_interface` will be
    freed. However, in the higher level error handling code in
    `rsi_probe`, if error is detected, `rsi_91x_deinit` is called
    again, in which `dev` will be freed again, resulting double free.
    
    This patch fixes the double free by removing the free operation on
    `dev` in `rsi_init_usb_interface`, because `rsi_91x_deinit` is also
    used in `rsi_disconnect`, in that code path, the `dev` field is not
     (and thus needs to be) freed.
    
    This bug was found in v4.19, but is also present in the latest version
    of kernel. Fixes CVE-2019-15504.
    
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 780f3aadee1e84aba46f7dec0f5bcda26b409a06
Author: Steffen Dirkwinkel <s.dirkwinkel@beckhoff.com>
Date:   Tue Jun 18 15:31:02 2019 +0200

    platform/x86: pmc_atom: Add CB4063 Beckhoff Automation board to critclk_systems DMI table
    
    commit 9452fbf5c6cf5f470e0748fe7a14a683e7765f7a upstream.
    
    The CB4063 board uses pmc_plt_clk* clocks for ethernet controllers. This
    adds it to the critclk_systems DMI table so the clocks are marked as
    CLK_CRITICAL and not turned off.
    
    Fixes: 648e921888ad ("clk: x86: Stop marking clocks as CLK_IS_CRITICAL")
    Signed-off-by: Steffen Dirkwinkel <s.dirkwinkel@beckhoff.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52bfcc9c8406dccecdd937a4c920ccdd8f88257f
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Jun 25 17:40:28 2019 +0800

    modules: fix compile error if don't have strict module rwx
    
    commit 93651f80dcb616b8c9115cdafc8e57a781af22d0 upstream.
    
    If CONFIG_ARCH_HAS_STRICT_MODULE_RWX is not defined,
    we need stub for module_enable_nx() and module_enable_x().
    
    If CONFIG_ARCH_HAS_STRICT_MODULE_RWX is defined, but
    CONFIG_STRICT_MODULE_RWX is disabled, we need stub for
    module_enable_nx.
    
    Move frob_text() outside of the CONFIG_STRICT_MODULE_RWX,
    because it is needed anyway.
    
    Fixes: 2eef1399a866 ("modules: fix BUG when load module with rodata=n")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae415d7a27071d807cfdd04c27dc02cce43c10c3
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Jun 20 10:18:14 2019 +0800

    modules: fix BUG when load module with rodata=n
    
    commit 2eef1399a866c57687962e15142b141a4f8e7862 upstream.
    
    When loading a module with rodata=n, it causes an executing
    NX-protected page BUG.
    
    [   32.379191] kernel tried to execute NX-protected page - exploit attempt? (uid: 0)
    [   32.382917] BUG: unable to handle page fault for address: ffffffffc0005000
    [   32.385947] #PF: supervisor instruction fetch in kernel mode
    [   32.387662] #PF: error_code(0x0011) - permissions violation
    [   32.389352] PGD 240c067 P4D 240c067 PUD 240e067 PMD 421a52067 PTE 8000000421a53063
    [   32.391396] Oops: 0011 [#1] SMP PTI
    [   32.392478] CPU: 7 PID: 2697 Comm: insmod Tainted: G           O      5.2.0-rc5+ #202
    [   32.394588] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    [   32.398157] RIP: 0010:ko_test_init+0x0/0x1000 [ko_test]
    [   32.399662] Code: Bad RIP value.
    [   32.400621] RSP: 0018:ffffc900029f3ca8 EFLAGS: 00010246
    [   32.402171] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [   32.404332] RDX: 00000000000004c7 RSI: 0000000000000cc0 RDI: ffffffffc0005000
    [   32.406347] RBP: ffffffffc0005000 R08: ffff88842fbebc40 R09: ffffffff810ede4a
    [   32.408392] R10: ffffea00108e3480 R11: 0000000000000000 R12: ffff88842bee21a0
    [   32.410472] R13: 0000000000000001 R14: 0000000000000001 R15: ffffc900029f3e78
    [   32.412609] FS:  00007fb4f0c0a700(0000) GS:ffff88842fbc0000(0000) knlGS:0000000000000000
    [   32.414722] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   32.416290] CR2: ffffffffc0004fd6 CR3: 0000000421a90004 CR4: 0000000000020ee0
    [   32.418471] Call Trace:
    [   32.419136]  do_one_initcall+0x41/0x1df
    [   32.420199]  ? _cond_resched+0x10/0x40
    [   32.421433]  ? kmem_cache_alloc_trace+0x36/0x160
    [   32.422827]  do_init_module+0x56/0x1f7
    [   32.423946]  load_module+0x1e67/0x2580
    [   32.424947]  ? __alloc_pages_nodemask+0x150/0x2c0
    [   32.426413]  ? map_vm_area+0x2d/0x40
    [   32.427530]  ? __vmalloc_node_range+0x1ef/0x260
    [   32.428850]  ? __do_sys_init_module+0x135/0x170
    [   32.430060]  ? _cond_resched+0x10/0x40
    [   32.431249]  __do_sys_init_module+0x135/0x170
    [   32.432547]  do_syscall_64+0x43/0x120
    [   32.433853]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Because if rodata=n, set_memory_x() can't be called, fix this by
    calling set_memory_x in complete_formation();
    
    Fixes: f2c65fb3221a ("x86/modules: Avoid breaking W^X while loading modules")
    Suggested-by: Jian Cheng <cj.chengjian@huawei.com>
    Reviewed-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae0c43abcbfa957219e4d3c6e808459c0e681b7
Author: Olivier Moysan <olivier.moysan@st.com>
Date:   Wed Jun 19 15:03:48 2019 +0200

    iio: adc: stm32-dfsdm: fix data type
    
    commit c6013bf50e2a2a94ab3d012e191096432aa50c6f upstream.
    
    Fix the data type as DFSDM raw output is complements 2,
    24bits left aligned in a 32-bit register.
    This change does not affect AUDIO path
    - Set data as signed for IIO (as for AUDIO)
    - Set 8 bit right shift for IIO.
    The 8 LSBs bits of data contains channel info and are masked.
    
    Signed-off-by: Olivier Moysan <olivier.moysan@st.com>
    Fixes: e2e6771c6462 ("IIO: ADC: add STM32 DFSDM sigma delta ADC support")
    Acked-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acf77c411b4e26847deea53d60e9af38699d9d49
Author: Mario Limonciello <mario.limonciello@dell.com>
Date:   Mon Aug 19 12:04:08 2019 -0500

    Revert "Bluetooth: btusb: driver to enable the usb-wakeup feature"
    
    commit 1ffdb51f28e8ec6be0a2b812c1765b5cf5c44a8f upstream.
    
    This reverts commit a0085f2510e8976614ad8f766b209448b385492f.
    
    This commit has caused regressions in notebooks that support suspend
    to idle such as the XPS 9360, XPS 9370 and XPS 9380.
    
    These notebooks will wakeup from suspend to idle from an unsolicited
    advertising packet from an unpaired BLE device.
    
    In a bug report it was sugggested that this is caused by a generic
    lack of LE privacy support.  Revert this commit until that behavior
    can be avoided by the kernel.
    
    Fixes: a0085f2510e8 ("Bluetooth: btusb: driver to enable the usb-wakeup feature")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=200039
    Link: https://marc.info/?l=linux-bluetooth&m=156441081612627&w=2
    Link: https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/750073/
    CC: Bastien Nocera <hadess@hadess.net>
    CC: Christian Kellner <ckellner@redhat.com>
    CC: Sukumar Ghorai <sukumar.ghorai@intel.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a03ed2891cdbe0a975647d5dabd923c1beaba9f7
Author: Nishka Dasgupta <nishkadg.linux@gmail.com>
Date:   Sat Jul 6 19:00:21 2019 +0530

    drm/mediatek: mtk_drm_drv.c: Add of_node_put() before goto
    
    commit 165d42c012be69900f0e2f8545626cb9e7d4a832 upstream.
    
    Each iteration of for_each_child_of_node puts the previous
    node, but in the case of a goto from the middle of the loop, there is
    no put, thus causing a memory leak. Hence add an of_node_put before the
    goto in two places.
    Issue found with Coccinelle.
    
    Fixes: 119f5173628a (drm/mediatek: Add DRM Driver for Mediatek SoC MT8173)
    
    Signed-off-by: Nishka Dasgupta <nishkadg.linux@gmail.com>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d13a836d787d79571e51d23e0cf2e6d569047135
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Jun 24 17:40:14 2019 +0200

    drm: panel-orientation-quirks: Add extra quirk table entry for GPD MicroPC
    
    commit dae1ccee012ea7514af8e4a88429844157aca7dc upstream.
    
    Newer GPD MicroPC BIOS versions have proper DMI strings, add an extra quirk
    table entry for these new strings. This is good news, as this means that we
    no longer have to update the BIOS dates list with every BIOS update.
    
    Fixes: 652b8b086538("drm: panel-orientation-quirks: Add quirk for GPD MicroPC")
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190624154014.8557-2-hdegoede@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b30a06982088e07eea04284137566bc7925de7b
Author: Andrew F. Davis <afd@ti.com>
Date:   Tue May 28 11:55:10 2019 -0400

    firmware: ti_sci: Always request response from firmware
    
    commit 66f030eac257a572fbedab3d9646d87d647351fd upstream.
    
    TI-SCI firmware will only respond to messages when the
    TI_SCI_FLAG_REQ_ACK_ON_PROCESSED flag is set. Most messages already do
    this, set this for the ones that do not.
    
    This will be enforced in future firmware that better match the TI-SCI
    specifications, this patch will not break users of existing firmware.
    
    Fixes: aa276781a64a ("firmware: Add basic support for TI System Control Interface (TI-SCI) protocol")
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Acked-by: Nishanth Menon <nm@ti.com>
    Tested-by: Alejandro Hernandez <ajhernandez@ti.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dfc787f2f50e153f6f36beeee6e1a68dac0b585
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:15 2019 +0000

    crypto: talitos - HMAC SNOOP NO AFEU mode requires SW icv checking.
    
    commit 4bbfb839259a9c96a0be872e16f7471b7136aee5 upstream.
    
    In that mode, hardware ICV verification is not supported.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 7405c8d7ff97 ("crypto: talitos - templates for AEAD using HMAC_SNOOP_NO_AFEU")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e89d4cb6fba3c5a59acb3952b3adc2033b4a0a16
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:14 2019 +0000

    crypto: talitos - Do not modify req->cryptlen on decryption.
    
    commit 7ede4c36cf7c6516986ee9d75b197c8bf73ea96f upstream.
    
    For decrypt, req->cryptlen includes the size of the authentication
    part while all functions of the driver expect cryptlen to be
    the size of the encrypted data.
    
    As it is not expected to change req->cryptlen, this patch
    implements local calculation of cryptlen.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 9c4a79653b35 ("crypto: talitos - Freescale integrated security engine (SEC) driver")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9aff4077304ba053021872cfa00b6d5427cb42b7
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:13 2019 +0000

    crypto: talitos - fix ECB algs ivsize
    
    commit d84cc9c9524ec5973a337533e6d8ccd3e5f05f2b upstream.
    
    ECB's ivsize must be 0.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 5e75ae1b3cef ("crypto: talitos - add new crypto modes")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4d7148e2d675063439109884e6f693d771d10b9
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:12 2019 +0000

    crypto: talitos - check data blocksize in ablkcipher.
    
    commit ee483d32ee1a1a7f7d7e918fbc350c790a5af64a upstream.
    
    When data size is not a multiple of the alg's block size,
    the SEC generates an error interrupt and dumps the registers.
    And for NULL size, the SEC does just nothing and the interrupt
    is awaited forever.
    
    This patch ensures the data size is correct before submitting
    the request to the SEC engine.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 4de9d0b547b9 ("crypto: talitos - Add ablkcipher algorithms")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02ebbb4f8df823d58309256dfaaa7aa948b85a16
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:11 2019 +0000

    crypto: talitos - fix CTR alg blocksize
    
    commit b9a05b6041cb9810a291315569b2af0d63c3680a upstream.
    
    CTR has a blocksize of 1.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 5e75ae1b3cef ("crypto: talitos - add new crypto modes")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39fa02a36bb37075670c0962b1f1b8cbd296de55
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Tue May 21 13:34:10 2019 +0000

    crypto: talitos - check AES key size
    
    commit 1ba34e71e9e56ac29a52e0d42b6290f3dc5bfd90 upstream.
    
    Although the HW accepts any size and silently truncates
    it to the correct length, the extra tests expects EINVAL
    to be returned when the key size is not valid.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Fixes: 4de9d0b547b9 ("crypto: talitos - Add ablkcipher algorithms")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1666bcbae0c5edb6d7a752b31a8f28c59b54546
Author: Muchun Song <smuchun@gmail.com>
Date:   Sat Jul 27 11:21:22 2019 +0800

    driver core: Fix use-after-free and double free on glue directory
    
    commit ac43432cb1f5c2950408534987e57c2071e24d8f upstream.
    
    There is a race condition between removing glue directory and adding a new
    device under the glue dir. It can be reproduced in following test:
    
    CPU1:                                         CPU2:
    
    device_add()
      get_device_parent()
        class_dir_create_and_add()
          kobject_add_internal()
            create_dir()    // create glue_dir
    
                                                  device_add()
                                                    get_device_parent()
                                                      kobject_get() // get glue_dir
    
    device_del()
      cleanup_glue_dir()
        kobject_del(glue_dir)
    
                                                    kobject_add()
                                                      kobject_add_internal()
                                                        create_dir() // in glue_dir
                                                          sysfs_create_dir_ns()
                                                            kernfs_create_dir_ns(sd)
    
          sysfs_remove_dir() // glue_dir->sd=NULL
          sysfs_put()        // free glue_dir->sd
    
                                                              // sd is freed
                                                              kernfs_new_node(sd)
                                                                kernfs_get(glue_dir)
                                                                kernfs_add_one()
                                                                kernfs_put()
    
    Before CPU1 remove last child device under glue dir, if CPU2 add a new
    device under glue dir, the glue_dir kobject reference count will be
    increase to 2 via kobject_get() in get_device_parent(). And CPU2 has
    been called kernfs_create_dir_ns(), but not call kernfs_new_node().
    Meanwhile, CPU1 call sysfs_remove_dir() and sysfs_put(). This result in
    glue_dir->sd is freed and it's reference count will be 0. Then CPU2 call
    kernfs_get(glue_dir) will trigger a warning in kernfs_get() and increase
    it's reference count to 1. Because glue_dir->sd is freed by CPU1, the next
    call kernfs_add_one() by CPU2 will fail(This is also use-after-free)
    and call kernfs_put() to decrease reference count. Because the reference
    count is decremented to 0, it will also call kmem_cache_free() to free
    the glue_dir->sd again. This will result in double free.
    
    In order to avoid this happening, we also should make sure that kernfs_node
    for glue_dir is released in CPU1 only when refcount for glue_dir kobj is
    1 to fix this race.
    
    The following calltrace is captured in kernel 4.14 with the following patch
    applied:
    
    commit 726e41097920 ("drivers: core: Remove glue dirs from sysfs earlier")
    
    --------------------------------------------------------------------------
    [    3.633703] WARNING: CPU: 4 PID: 513 at .../fs/kernfs/dir.c:494
                    Here is WARN_ON(!atomic_read(&kn->count) in kernfs_get().
    ....
    [    3.633986] Call trace:
    [    3.633991]  kernfs_create_dir_ns+0xa8/0xb0
    [    3.633994]  sysfs_create_dir_ns+0x54/0xe8
    [    3.634001]  kobject_add_internal+0x22c/0x3f0
    [    3.634005]  kobject_add+0xe4/0x118
    [    3.634011]  device_add+0x200/0x870
    [    3.634017]  _request_firmware+0x958/0xc38
    [    3.634020]  request_firmware_into_buf+0x4c/0x70
    ....
    [    3.634064] kernel BUG at .../mm/slub.c:294!
                    Here is BUG_ON(object == fp) in set_freepointer().
    ....
    [    3.634346] Call trace:
    [    3.634351]  kmem_cache_free+0x504/0x6b8
    [    3.634355]  kernfs_put+0x14c/0x1d8
    [    3.634359]  kernfs_create_dir_ns+0x88/0xb0
    [    3.634362]  sysfs_create_dir_ns+0x54/0xe8
    [    3.634366]  kobject_add_internal+0x22c/0x3f0
    [    3.634370]  kobject_add+0xe4/0x118
    [    3.634374]  device_add+0x200/0x870
    [    3.634378]  _request_firmware+0x958/0xc38
    [    3.634381]  request_firmware_into_buf+0x4c/0x70
    --------------------------------------------------------------------------
    
    Fixes: 726e41097920 ("drivers: core: Remove glue dirs from sysfs earlier")
    Signed-off-by: Muchun Song <smuchun@gmail.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Prateek Sood <prsood@codeaurora.org>
    Link: https://lore.kernel.org/r/20190727032122.24639-1-smuchun@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72cd230b3231ec1ad4facf90a98f20c30e5f57cb
Author: Richard Weinberger <richard@nod.at>
Date:   Tue May 14 22:31:08 2019 +0200

    ubifs: Correctly use tnc_next() in search_dh_cookie()
    
    commit bacfa94b08027b9f66ede7044972e3b066766b3e upstream.
    
    Commit c877154d307f fixed an uninitialized variable and optimized
    the function to not call tnc_next() in the first iteration of the
    loop. While this seemed perfectly legit and wise, it turned out to
    be illegal.
    If the lookup function does not find an exact match it will rewind
    the cursor by 1.
    The rewinded cursor will not match the name hash we are looking for
    and this results in a spurious -ENOENT.
    So we need to move to the next entry in case of an non-exact match,
    but not if the match was exact.
    
    While we are here, update the documentation to avoid further confusion.
    
    Cc: Hyunchul Lee <hyc.lee@gmail.com>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Fixes: c877154d307f ("ubifs: Fix uninitialized variable in search_dh_cookie()")
    Fixes: 781f675e2d7e ("ubifs: Fix unlink code wrt. double hash lookups")
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a65290083b66e208eacd8b75c1aef6f4bf26536f
Author: Kent Gibson <warthog618@gmail.com>
Date:   Mon Sep 9 03:24:06 2019 +0000

    gpio: fix line flag validation in lineevent_create
    
    commit 5ca2f54b597c816df54ff1b28eb99cf7262b955d upstream.
    
    lineevent_create should not allow any of GPIOHANDLE_REQUEST_OUTPUT,
    GPIOHANDLE_REQUEST_OPEN_DRAIN or GPIOHANDLE_REQUEST_OPEN_SOURCE to be set.
    
    Fixes: d7c51b47ac11 ("gpio: userspace ABI for reading/writing GPIO lines")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Kent Gibson <warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f4095f335578f0e32f71a7b95985d82f34fe7f6
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Thu May 9 13:27:22 2019 -0600

    PCI: Always allow probing with driver_override
    
    commit 2d2f4273cbe9058d1f5a518e5e880d27d7b3b30f upstream.
    
    Commit 0e7df22401a3 ("PCI: Add sysfs sriov_drivers_autoprobe to control
    VF driver binding") introduced the sriov_drivers_autoprobe attribute
    which allows users to prevent the kernel from automatically probing a
    driver for new VFs as they are created.  This allows VFs to be spawned
    without automatically binding the new device to a host driver, such as
    in cases where the user intends to use the device only with a meta
    driver like vfio-pci.  However, the current implementation prevents any
    use of drivers_probe with the VF while sriov_drivers_autoprobe=0.  This
    blocks the now current general practice of setting driver_override
    followed by using drivers_probe to bind a device to a specified driver.
    
    The kernel never automatically sets a driver_override therefore it seems
    we can assume a driver_override reflects the intent of the user.  Also,
    probing a device using a driver_override match seems outside the scope
    of the 'auto' part of sriov_drivers_autoprobe.  Therefore, let's allow
    driver_override matches regardless of sriov_drivers_autoprobe, which we
    can do by simply testing if a driver_override is set for a device as a
    'can probe' condition.
    
    Fixes: 0e7df22401a3 ("PCI: Add sysfs sriov_drivers_autoprobe to control VF driver binding")
    Link: https://lore.kernel.org/lkml/155742996741.21878.569845487290798703.stgit@gimli.home
    Link: https://lore.kernel.org/linux-pci/155672991496.20698.4279330795743262888.stgit@gimli.home/T/#u
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70facf939ba23a2acfb154ac46e6520155e27eb1
Author: Xiaolei Li <xiaolei.li@mediatek.com>
Date:   Tue May 7 18:25:41 2019 +0800

    mtd: rawnand: mtk: Fix wrongly assigned OOB buffer pointer issue
    
    commit 336d4b138be2dad372b67a2388e42805c48aaa38 upstream.
    
    One main goal of the function mtk_nfc_update_ecc_stats is to check
    whether sectors are all empty. If they are empty, set these sectors's
    data buffer and OOB buffer as 0xff.
    
    But now, the sector OOB buffer pointer is wrongly assigned. We always
    do memset from sector 0.
    
    To fix this issue, pass start sector number to make OOB buffer pointer
    be properly assigned.
    
    Fixes: 1d6b1e464950 ("mtd: mediatek: driver for MTK Smart Device")
    Signed-off-by: Xiaolei Li <xiaolei.li@mediatek.com>
    Reviewed-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6da56f8982bbe7821f1c41bce0963fa896af7d96
Author: Douglas Anderson <dianders@chromium.org>
Date:   Fri May 3 14:22:08 2019 -0700

    clk: rockchip: Don't yell about bad mmc phases when getting
    
    commit 6943b839721ad4a31ad2bacf6e71b21f2dfe3134 upstream.
    
    At boot time, my rk3288-veyron devices yell with 8 lines that look
    like this:
      [    0.000000] rockchip_mmc_get_phase: invalid clk rate
    
    This is because the clock framework at clk_register() time tries to
    get the phase but we don't have a parent yet.
    
    While the errors appear to be harmless they are still ugly and, in
    general, we don't want yells like this in the log unless they are
    important.
    
    There's no real reason to be yelling here.  We can still return
    -EINVAL to indicate that the phase makes no sense without a parent.
    If someone really tries to do tuning and the clock is reported as 0
    then we'll see the yells in rockchip_mmc_set_phase().
    
    Fixes: 4bf59902b500 ("clk: rockchip: Prevent calculating mmc phase if clock rate is zero")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a63416f39aaff117590665e485f0905d406c3fce
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Mon Apr 29 09:52:38 2019 +0200

    drm/meson: Add support for XBGR8888 & ABGR8888 formats
    
    commit 5ffff4415f9eeae834960226770963e2947e17eb upstream.
    
    Add missing XBGR8888 & ABGR8888 formats variants from the primary plane.
    
    Fixes: bbbe775ec5b5 ("drm: Add support for Amlogic Meson Graphic Controller")
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Kevin Hilman <khilman@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190429075238.7884-1-narmstrong@baylibre.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9e8b4ba039766141014e20490d33178c96feb10
Author: Suraj Jitindar Singh <sjitindarsingh@gmail.com>
Date:   Wed Mar 6 12:10:38 2019 +1100

    powerpc: Add barrier_nospec to raw_copy_in_user()
    
    commit 6fbcdd59094ade30db63f32316e9502425d7b256 upstream.
    
    Commit ddf35cf3764b ("powerpc: Use barrier_nospec in copy_from_user()")
    Added barrier_nospec before loading from user-controlled pointers. The
    intention was to order the load from the potentially user-controlled
    pointer vs a previous branch based on an access_ok() check or similar.
    
    In order to achieve the same result, add a barrier_nospec to the
    raw_copy_in_user() function before loading from such a user-controlled
    pointer.
    
    Fixes: ddf35cf3764b ("powerpc: Use barrier_nospec in copy_from_user()")
    Signed-off-by: Suraj Jitindar Singh <sjitindarsingh@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb020b77b6461be9bfb36aef6e745f1f7084bf66
Author: Steve Wahl <steve.wahl@hpe.com>
Date:   Thu Sep 5 15:23:46 2019 -0500

    x86/purgatory: Change compiler flags from -mcmodel=kernel to -mcmodel=large to fix kexec relocation errors
    
    commit e16c2983fba0fa6763e43ad10916be35e3d8dc05 upstream.
    
    The last change to this Makefile caused relocation errors when loading
    a kdump kernel.  Restore -mcmodel=large (not -mcmodel=kernel),
    -ffreestanding, and -fno-zero-initialized-bsss, without reverting to
    the former practice of resetting KBUILD_CFLAGS.
    
    Purgatory.ro is a standalone binary that is not linked against the
    rest of the kernel.  Its image is copied into an array that is linked
    to the kernel, and from there kexec relocates it wherever it desires.
    
    With the previous change to compiler flags, the error "kexec: Overflow
    in relocation type 11 value 0x11fffd000" was encountered when trying
    to load the crash kernel.  This is from kexec code trying to relocate
    the purgatory.ro object.
    
    From the error message, relocation type 11 is R_X86_64_32S.  The
    x86_64 ABI says:
    
      "The R_X86_64_32 and R_X86_64_32S relocations truncate the
       computed value to 32-bits.  The linker must verify that the
       generated value for the R_X86_64_32 (R_X86_64_32S) relocation
       zero-extends (sign-extends) to the original 64-bit value."
    
    This type of relocation doesn't work when kexec chooses to place the
    purgatory binary in memory that is not reachable with 32 bit
    addresses.
    
    The compiler flag -mcmodel=kernel allows those type of relocations to
    be emitted, so revert to using -mcmodel=large as was done before.
    
    Also restore the -ffreestanding and -fno-zero-initialized-bss flags
    because they are appropriate for a stand alone piece of object code
    which doesn't explicitly zero the bss, and one other report has said
    undefined symbols are encountered without -ffreestanding.
    
    These identical compiler flag changes need to happen for every object
    that becomes part of the purgatory.ro object, so gather them together
    first into PURGATORY_CFLAGS_REMOVE and PURGATORY_CFLAGS, and then
    apply them to each of the objects that have C source.  Do not apply
    any of these flags to kexec-purgatory.o, which is not part of the
    standalone object but part of the kernel proper.
    
    Tested-by: Vaibhav Rustagi <vaibhavrustagi@google.com>
    Tested-by: Andreas Smas <andreas@lonelycoder.com>
    Signed-off-by: Steve Wahl <steve.wahl@hpe.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: None
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: clang-built-linux@googlegroups.com
    Cc: dimitri.sivanich@hpe.com
    Cc: mike.travis@hpe.com
    Cc: russ.anderson@hpe.com
    Fixes: b059f801a937 ("x86/purgatory: Use CFLAGS_REMOVE rather than reset KBUILD_CFLAGS")
    Link: https://lkml.kernel.org/r/20190905202346.GA26595@swahl-linux
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andreas Smas <andreas@lonelycoder.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73c31bd920393be70bb30a0b7c6e9c47990c3d3a
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sat Sep 14 00:26:27 2019 +0200

    KVM: nVMX: handle page fault in vmread
    
    commit f7eea636c3d505fe6f1d1066234f1aaf7171b681 upstream.
    
    The implementation of vmread to memory is still incomplete, as it
    lacks the ability to do vmread to I/O memory just like vmptrst.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e60900cfa3ee5a67d04c4aa92eb04c90b9c8ed8
Author: Fuqian Huang <huangfq.daxian@gmail.com>
Date:   Thu Sep 12 12:18:17 2019 +0800

    KVM: x86: work around leak of uninitialized stack contents
    
    commit 541ab2aeb28251bf7135c7961f3a6080eebcc705 upstream.
    
    Emulation of VMPTRST can incorrectly inject a page fault
    when passed an operand that points to an MMIO address.
    The page fault will use uninitialized kernel stack memory
    as the CR2 and error code.
    
    The right behavior would be to abort the VM with a KVM_EXIT_INTERNAL_ERROR
    exit to userspace; however, it is not an easy fix, so for now just ensure
    that the error code and CR2 are zero.
    
    Signed-off-by: Fuqian Huang <huangfq.daxian@gmail.com>
    Cc: stable@vger.kernel.org
    [add comment]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09a9f894c65b86430ce714743b3b9e3f6b330019
Author: Thomas Huth <thuth@redhat.com>
Date:   Thu Sep 12 13:54:38 2019 +0200

    KVM: s390: Do not leak kernel stack data in the KVM_S390_INTERRUPT ioctl
    
    commit 53936b5bf35e140ae27e4bbf0447a61063f400da upstream.
    
    When the userspace program runs the KVM_S390_INTERRUPT ioctl to inject
    an interrupt, we convert them from the legacy struct kvm_s390_interrupt
    to the new struct kvm_s390_irq via the s390int_to_s390irq() function.
    However, this function does not take care of all types of interrupts
    that we can inject into the guest later (see do_inject_vcpu()). Since we
    do not clear out the s390irq values before calling s390int_to_s390irq(),
    there is a chance that we copy random data from the kernel stack which
    could be leaked to the userspace later.
    
    Specifically, the problem exists with the KVM_S390_INT_PFAULT_INIT
    interrupt: s390int_to_s390irq() does not handle it, and the function
    __inject_pfault_init() later copies irq->u.ext which contains the
    random kernel stack data. This data can then be leaked either to
    the guest memory in __deliver_pfault_init(), or the userspace might
    retrieve it directly with the KVM_S390_GET_IRQ_STATE ioctl.
    
    Fix it by handling that interrupt type in s390int_to_s390irq(), too,
    and by making sure that the s390irq struct is properly pre-initialized.
    And while we're at it, make sure that s390int_to_s390irq() now
    directly returns -EINVAL for unknown interrupt types, so that we
    immediately get a proper error code in case we add more interrupt
    types to do_inject_vcpu() without updating s390int_to_s390irq()
    sometime in the future.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Link: https://lore.kernel.org/kvm/20190912115438.25761-1-thuth@redhat.com
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8a2825918c9dbef9f18ada1e9f99017dd54ae9
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Wed Sep 11 03:52:18 2019 -0400

    KVM: s390: kvm_s390_vm_start_migration: check dirty_bitmap before using it as target for memset()
    
    commit 13a17cc0526f08d1df9507f7484176371cd263a0 upstream.
    
    If userspace doesn't set KVM_MEM_LOG_DIRTY_PAGES on memslot before calling
    kvm_s390_vm_start_migration(), kernel will oops with:
    
      Unable to handle kernel pointer dereference in virtual kernel address space
      Failing address: 0000000000000000 TEID: 0000000000000483
      Fault in home space mode while using kernel ASCE.
      AS:0000000002a2000b R2:00000001bff8c00b R3:00000001bff88007 S:00000001bff91000 P:000000000000003d
      Oops: 0004 ilc:2 [#1] SMP
      ...
      Call Trace:
      ([<001fffff804ec552>] kvm_s390_vm_set_attr+0x347a/0x3828 [kvm])
       [<001fffff804ecfc0>] kvm_arch_vm_ioctl+0x6c0/0x1998 [kvm]
       [<001fffff804b67e4>] kvm_vm_ioctl+0x51c/0x11a8 [kvm]
       [<00000000008ba572>] do_vfs_ioctl+0x1d2/0xe58
       [<00000000008bb284>] ksys_ioctl+0x8c/0xb8
       [<00000000008bb2e2>] sys_ioctl+0x32/0x40
       [<000000000175552c>] system_call+0x2b8/0x2d8
      INFO: lockdep is turned off.
      Last Breaking-Event-Address:
       [<0000000000dbaf60>] __memset+0xc/0xa0
    
    due to ms->dirty_bitmap being NULL, which might crash the host.
    
    Make sure that ms->dirty_bitmap is set before using it or
    return -EINVAL otherwise.
    
    Cc: <stable@vger.kernel.org>
    Fixes: afdad61615cc ("KVM: s390: Fix storage attributes migration with memory slots")
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    Link: https://lore.kernel.org/kvm/20190911075218.29153-1-imammedo@redhat.com/
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Claudio Imbrenda <imbrenda@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 991b3458da5642a395149a72a058c2112ab46c28
Author: Yunfeng Ye <yeyunfeng@huawei.com>
Date:   Wed Sep 4 20:46:25 2019 +0800

    genirq: Prevent NULL pointer dereference in resend_irqs()
    
    commit eddf3e9c7c7e4d0707c68d1bb22cc6ec8aef7d4a upstream.
    
    The following crash was observed:
    
      Unable to handle kernel NULL pointer dereference at 0000000000000158
      Internal error: Oops: 96000004 [#1] SMP
      pc : resend_irqs+0x68/0xb0
      lr : resend_irqs+0x64/0xb0
      ...
      Call trace:
       resend_irqs+0x68/0xb0
       tasklet_action_common.isra.6+0x84/0x138
       tasklet_action+0x2c/0x38
       __do_softirq+0x120/0x324
       run_ksoftirqd+0x44/0x60
       smpboot_thread_fn+0x1ac/0x1e8
       kthread+0x134/0x138
       ret_from_fork+0x10/0x18
    
    The reason for this is that the interrupt resend mechanism happens in soft
    interrupt context, which is a asynchronous mechanism versus other
    operations on interrupts. free_irq() does not take resend handling into
    account. Thus, the irq descriptor might be already freed before the resend
    tasklet is executed. resend_irqs() does not check the return value of the
    interrupt descriptor lookup and derefences the return value
    unconditionally.
    
      1):
      __setup_irq
        irq_startup
          check_irq_resend  // activate softirq to handle resend irq
      2):
      irq_domain_free_irqs
        irq_free_descs
          free_desc
            call_rcu(&desc->rcu, delayed_free_desc)
      3):
      __do_softirq
        tasklet_action
          resend_irqs
            desc = irq_to_desc(irq)
            desc->handle_irq(desc)  // desc is NULL --> Ooops
    
    Fix this by adding a NULL pointer check in resend_irqs() before derefencing
    the irq descriptor.
    
    Fixes: a4633adcdbc1 ("[PATCH] genirq: add genirq sw IRQ-retrigger")
    Signed-off-by: Yunfeng Ye <yeyunfeng@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1630ae13-5c8e-901e-de09-e740b6a426a7@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b5f14601e0aca03ee487feeb352e9a72a82b79e
Author: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Date:   Wed Sep 4 08:07:11 2019 -0700

    ixgbe: Prevent u8 wrapping of ITR value to something less than 10us
    
    commit 377228accbbb8b9738f615d791aa803f41c067e0 upstream.
    
    There were a couple cases where the ITR value generated via the adaptive
    ITR scheme could exceed 126. This resulted in the value becoming either 0
    or something less than 10. Switching back and forth between a value less
    than 10 and a value greater than 10 can cause issues as certain hardware
    features such as RSC to not function well when the ITR value has dropped
    that low.
    
    CC: stable@vger.kernel.org
    Fixes: b4ded8327fea ("ixgbe: Update adaptive ITR algorithm")
    Reported-by: Gregg Leventhal <gleventhal@janestreet.com>
    Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cbd49cf0d62286642d8966cc8d4512e4c73ee75
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Sep 10 15:26:49 2019 +0100

    Btrfs: fix assertion failure during fsync and use of stale transaction
    
    commit 410f954cb1d1c79ae485dd83a175f21954fd87cd upstream.
    
    Sometimes when fsync'ing a file we need to log that other inodes exist and
    when we need to do that we acquire a reference on the inodes and then drop
    that reference using iput() after logging them.
    
    That generally is not a problem except if we end up doing the final iput()
    (dropping the last reference) on the inode and that inode has a link count
    of 0, which can happen in a very short time window if the logging path
    gets a reference on the inode while it's being unlinked.
    
    In that case we end up getting the eviction callback, btrfs_evict_inode(),
    invoked through the iput() call chain which needs to drop all of the
    inode's items from its subvolume btree, and in order to do that, it needs
    to join a transaction at the helper function evict_refill_and_join().
    However because the task previously started a transaction at the fsync
    handler, btrfs_sync_file(), it has current->journal_info already pointing
    to a transaction handle and therefore evict_refill_and_join() will get
    that transaction handle from btrfs_join_transaction(). From this point on,
    two different problems can happen:
    
    1) evict_refill_and_join() will often change the transaction handle's
       block reserve (->block_rsv) and set its ->bytes_reserved field to a
       value greater than 0. If evict_refill_and_join() never commits the
       transaction, the eviction handler ends up decreasing the reference
       count (->use_count) of the transaction handle through the call to
       btrfs_end_transaction(), and after that point we have a transaction
       handle with a NULL ->block_rsv (which is the value prior to the
       transaction join from evict_refill_and_join()) and a ->bytes_reserved
       value greater than 0. If after the eviction/iput completes the inode
       logging path hits an error or it decides that it must fallback to a
       transaction commit, the btrfs fsync handle, btrfs_sync_file(), gets a
       non-zero value from btrfs_log_dentry_safe(), and because of that
       non-zero value it tries to commit the transaction using a handle with
       a NULL ->block_rsv and a non-zero ->bytes_reserved value. This makes
       the transaction commit hit an assertion failure at
       btrfs_trans_release_metadata() because ->bytes_reserved is not zero but
       the ->block_rsv is NULL. The produced stack trace for that is like the
       following:
    
       [192922.917158] assertion failed: !trans->bytes_reserved, file: fs/btrfs/transaction.c, line: 816
       [192922.917553] ------------[ cut here ]------------
       [192922.917922] kernel BUG at fs/btrfs/ctree.h:3532!
       [192922.918310] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC PTI
       [192922.918666] CPU: 2 PID: 883 Comm: fsstress Tainted: G        W         5.1.4-btrfs-next-47 #1
       [192922.919035] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626ccb91-prebuilt.qemu-project.org 04/01/2014
       [192922.919801] RIP: 0010:assfail.constprop.25+0x18/0x1a [btrfs]
       (...)
       [192922.920925] RSP: 0018:ffffaebdc8a27da8 EFLAGS: 00010286
       [192922.921315] RAX: 0000000000000051 RBX: ffff95c9c16a41c0 RCX: 0000000000000000
       [192922.921692] RDX: 0000000000000000 RSI: ffff95cab6b16838 RDI: ffff95cab6b16838
       [192922.922066] RBP: ffff95c9c16a41c0 R08: 0000000000000000 R09: 0000000000000000
       [192922.922442] R10: ffffaebdc8a27e70 R11: 0000000000000000 R12: ffff95ca731a0980
       [192922.922820] R13: 0000000000000000 R14: ffff95ca84c73338 R15: ffff95ca731a0ea8
       [192922.923200] FS:  00007f337eda4e80(0000) GS:ffff95cab6b00000(0000) knlGS:0000000000000000
       [192922.923579] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
       [192922.923948] CR2: 00007f337edad000 CR3: 00000001e00f6002 CR4: 00000000003606e0
       [192922.924329] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
       [192922.924711] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
       [192922.925105] Call Trace:
       [192922.925505]  btrfs_trans_release_metadata+0x10c/0x170 [btrfs]
       [192922.925911]  btrfs_commit_transaction+0x3e/0xaf0 [btrfs]
       [192922.926324]  btrfs_sync_file+0x44c/0x490 [btrfs]
       [192922.926731]  do_fsync+0x38/0x60
       [192922.927138]  __x64_sys_fdatasync+0x13/0x20
       [192922.927543]  do_syscall_64+0x60/0x1c0
       [192922.927939]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
       (...)
       [192922.934077] ---[ end trace f00808b12068168f ]---
    
    2) If evict_refill_and_join() decides to commit the transaction, it will
       be able to do it, since the nested transaction join only increments the
       transaction handle's ->use_count reference counter and it does not
       prevent the transaction from getting committed. This means that after
       eviction completes, the fsync logging path will be using a transaction
       handle that refers to an already committed transaction. What happens
       when using such a stale transaction can be unpredictable, we are at
       least having a use-after-free on the transaction handle itself, since
       the transaction commit will call kmem_cache_free() against the handle
       regardless of its ->use_count value, or we can end up silently losing
       all the updates to the log tree after that iput() in the logging path,
       or using a transaction handle that in the meanwhile was allocated to
       another task for a new transaction, etc, pretty much unpredictable
       what can happen.
    
    In order to fix both of them, instead of using iput() during logging, use
    btrfs_add_delayed_iput(), so that the logging path of fsync never drops
    the last reference on an inode, that step is offloaded to a safe context
    (usually the cleaner kthread).
    
    The assertion failure issue was sporadically triggered by the test case
    generic/475 from fstests, which loads the dm error target while fsstress
    is running, which lead to fsync failing while logging inodes with -EIO
    errors and then trying later to commit the transaction, triggering the
    assertion failure.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22ed1d47281155d5ecd39e526027c93a096325c7
Author: Kent Gibson <warthog618@gmail.com>
Date:   Mon Sep 9 03:22:18 2019 +0000

    gpio: fix line flag validation in linehandle_create
    
    commit e95fbc130a162ba9ad956311b95aa0da269eea48 upstream.
    
    linehandle_create should not allow both GPIOHANDLE_REQUEST_INPUT
    and GPIOHANDLE_REQUEST_OUTPUT to be set.
    
    Fixes: d7c51b47ac11 ("gpio: userspace ABI for reading/writing GPIO lines")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Kent Gibson <warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 705df757e9370de01973f311c1d0a788efd69c92
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Aug 27 22:28:35 2019 +0200

    gpiolib: acpi: Add gpiolib_acpi_run_edge_events_on_boot option and blacklist
    
    commit 61f7f7c8f978b1c0d80e43c83b7d110ca0496eb4 upstream.
    
    Another day; another DSDT bug we need to workaround...
    
    Since commit ca876c7483b6 ("gpiolib-acpi: make sure we trigger edge events
    at least once on boot") we call _AEI edge handlers at boot.
    
    In some rare cases this causes problems. One example of this is the Minix
    Neo Z83-4 mini PC, this device has a clear DSDT bug where it has some copy
    and pasted code for dealing with Micro USB-B connector host/device role
    switching, while the mini PC does not even have a micro-USB connector.
    This code, which should not be there, messes with the DDC data pin from
    the HDMI connector (switching it to GPIO mode) breaking HDMI support.
    
    To avoid problems like this, this commit adds a new
    gpiolib_acpi.run_edge_events_on_boot kernel commandline option, which
    allows disabling the running of _AEI edge event handlers at boot.
    
    The default value is -1/auto which uses a DMI based blacklist, the initial
    version of this blacklist contains the Neo Z83-4 fixing the HDMI breakage.
    
    Cc: stable@vger.kernel.org
    Cc: Daniel Drake <drake@endlessm.com>
    Cc: Ian W MORRISON <ianwmorrison@gmail.com>
    Reported-by: Ian W MORRISON <ianwmorrison@gmail.com>
    Suggested-by: Ian W MORRISON <ianwmorrison@gmail.com>
    Fixes: ca876c7483b6 ("gpiolib-acpi: make sure we trigger edge events at least once on boot")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20190827202835.213456-1-hdegoede@redhat.com
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Tested-by: Ian W MORRISON <ianwmorrison@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f4ceb25949371f23338f81b2207dda2302c59a4
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Sep 10 18:56:57 2019 +0800

    tun: fix use-after-free when register netdev failed
    
    [ Upstream commit 77f22f92dff8e7b45c7786a430626d38071d4670 ]
    
    I got a UAF repport in tun driver when doing fuzzy test:
    
    [  466.269490] ==================================================================
    [  466.271792] BUG: KASAN: use-after-free in tun_chr_read_iter+0x2ca/0x2d0
    [  466.271806] Read of size 8 at addr ffff888372139250 by task tun-test/2699
    [  466.271810]
    [  466.271824] CPU: 1 PID: 2699 Comm: tun-test Not tainted 5.3.0-rc1-00001-g5a9433db2614-dirty #427
    [  466.271833] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    [  466.271838] Call Trace:
    [  466.271858]  dump_stack+0xca/0x13e
    [  466.271871]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271890]  print_address_description+0x79/0x440
    [  466.271906]  ? vprintk_func+0x5e/0xf0
    [  466.271920]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271935]  __kasan_report+0x15c/0x1df
    [  466.271958]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271976]  kasan_report+0xe/0x20
    [  466.271987]  tun_chr_read_iter+0x2ca/0x2d0
    [  466.272013]  do_iter_readv_writev+0x4b7/0x740
    [  466.272032]  ? default_llseek+0x2d0/0x2d0
    [  466.272072]  do_iter_read+0x1c5/0x5e0
    [  466.272110]  vfs_readv+0x108/0x180
    [  466.299007]  ? compat_rw_copy_check_uvector+0x440/0x440
    [  466.299020]  ? fsnotify+0x888/0xd50
    [  466.299040]  ? __fsnotify_parent+0xd0/0x350
    [  466.299064]  ? fsnotify_first_mark+0x1e0/0x1e0
    [  466.304548]  ? vfs_write+0x264/0x510
    [  466.304569]  ? ksys_write+0x101/0x210
    [  466.304591]  ? do_preadv+0x116/0x1a0
    [  466.304609]  do_preadv+0x116/0x1a0
    [  466.309829]  do_syscall_64+0xc8/0x600
    [  466.309849]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.309861] RIP: 0033:0x4560f9
    [  466.309875] Code: 00 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
    [  466.309889] RSP: 002b:00007ffffa5166e8 EFLAGS: 00000206 ORIG_RAX: 0000000000000127
    [  466.322992] RAX: ffffffffffffffda RBX: 0000000000400460 RCX: 00000000004560f9
    [  466.322999] RDX: 0000000000000003 RSI: 00000000200008c0 RDI: 0000000000000003
    [  466.323007] RBP: 00007ffffa516700 R08: 0000000000000004 R09: 0000000000000000
    [  466.323014] R10: 0000000000000000 R11: 0000000000000206 R12: 000000000040cb10
    [  466.323021] R13: 0000000000000000 R14: 00000000006d7018 R15: 0000000000000000
    [  466.323057]
    [  466.323064] Allocated by task 2605:
    [  466.335165]  save_stack+0x19/0x80
    [  466.336240]  __kasan_kmalloc.constprop.8+0xa0/0xd0
    [  466.337755]  kmem_cache_alloc+0xe8/0x320
    [  466.339050]  getname_flags+0xca/0x560
    [  466.340229]  user_path_at_empty+0x2c/0x50
    [  466.341508]  vfs_statx+0xe6/0x190
    [  466.342619]  __do_sys_newstat+0x81/0x100
    [  466.343908]  do_syscall_64+0xc8/0x600
    [  466.345303]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.347034]
    [  466.347517] Freed by task 2605:
    [  466.348471]  save_stack+0x19/0x80
    [  466.349476]  __kasan_slab_free+0x12e/0x180
    [  466.350726]  kmem_cache_free+0xc8/0x430
    [  466.351874]  putname+0xe2/0x120
    [  466.352921]  filename_lookup+0x257/0x3e0
    [  466.354319]  vfs_statx+0xe6/0x190
    [  466.355498]  __do_sys_newstat+0x81/0x100
    [  466.356889]  do_syscall_64+0xc8/0x600
    [  466.358037]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.359567]
    [  466.360050] The buggy address belongs to the object at ffff888372139100
    [  466.360050]  which belongs to the cache names_cache of size 4096
    [  466.363735] The buggy address is located 336 bytes inside of
    [  466.363735]  4096-byte region [ffff888372139100, ffff88837213a100)
    [  466.367179] The buggy address belongs to the page:
    [  466.368604] page:ffffea000dc84e00 refcount:1 mapcount:0 mapping:ffff8883df1b4f00 index:0x0 compound_mapcount: 0
    [  466.371582] flags: 0x2fffff80010200(slab|head)
    [  466.372910] raw: 002fffff80010200 dead000000000100 dead000000000122 ffff8883df1b4f00
    [  466.375209] raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
    [  466.377778] page dumped because: kasan: bad access detected
    [  466.379730]
    [  466.380288] Memory state around the buggy address:
    [  466.381844]  ffff888372139100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.384009]  ffff888372139180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.386131] >ffff888372139200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.388257]                                                  ^
    [  466.390234]  ffff888372139280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.392512]  ffff888372139300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.394667] ==================================================================
    
    tun_chr_read_iter() accessed the memory which freed by free_netdev()
    called by tun_set_iff():
    
            CPUA                                           CPUB
      tun_set_iff()
        alloc_netdev_mqs()
        tun_attach()
                                                      tun_chr_read_iter()
                                                        tun_get()
                                                        tun_do_read()
                                                          tun_ring_recv()
        register_netdevice() <-- inject error
        goto err_detach
        tun_detach_all() <-- set RCV_SHUTDOWN
        free_netdev() <-- called from
                         err_free_dev path
          netdev_freemem() <-- free the memory
                            without check refcount
          (In this path, the refcount cannot prevent
           freeing the memory of dev, and the memory
           will be used by dev_put() called by
           tun_chr_read_iter() on CPUB.)
                                                         (Break from tun_ring_recv(),
                                                         because RCV_SHUTDOWN is set)
                                                       tun_put()
                                                         dev_put() <-- use the memory
                                                                       freed by netdev_freemem()
    
    Put the publishing of tfile->tun after register_netdevice(),
    so tun_get() won't get the tun pointer that freed by
    err_detach path if register_netdevice() failed.
    
    Fixes: eb0fb363f920 ("tuntap: attach queue 0 before registering netdevice")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Suggested-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a4598424e99feda9c6592230a0d020869f776f1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    [ Upstream commit 42dec1dbe38239cf91cc1f4df7830c66276ced37 ]
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67fe3b94a833779caf4504ececa7097fba9b2627
Author: Neal Cardwell <ncardwell@google.com>
Date:   Mon Sep 9 16:56:02 2019 -0400

    tcp: fix tcp_ecn_withdraw_cwr() to clear TCP_ECN_QUEUE_CWR
    
    [ Upstream commit af38d07ed391b21f7405fa1f936ca9686787d6d2 ]
    
    Fix tcp_ecn_withdraw_cwr() to clear the correct bit:
    TCP_ECN_QUEUE_CWR.
    
    Rationale: basically, TCP_ECN_DEMAND_CWR is a bit that is purely about
    the behavior of data receivers, and deciding whether to reflect
    incoming IP ECN CE marks as outgoing TCP th->ece marks. The
    TCP_ECN_QUEUE_CWR bit is purely about the behavior of data senders,
    and deciding whether to send CWR. The tcp_ecn_withdraw_cwr() function
    is only called from tcp_undo_cwnd_reduction() by data senders during
    an undo, so it should zero the sender-side state,
    TCP_ECN_QUEUE_CWR. It does not make sense to stop the reflection of
    incoming CE bits on incoming data packets just because outgoing
    packets were spuriously retransmitted.
    
    The bug has been reproduced with packetdrill to manifest in a scenario
    with RFC3168 ECN, with an incoming data packet with CE bit set and
    carrying a TCP timestamp value that causes cwnd undo. Before this fix,
    the IP CE bit was ignored and not reflected in the TCP ECE header bit,
    and sender sent a TCP CWR ('W') bit on the next outgoing data packet,
    even though the cwnd reduction had been undone.  After this fix, the
    sender properly reflects the CE bit and does not set the W bit.
    
    Note: the bug actually predates 2005 git history; this Fixes footer is
    chosen to be the oldest SHA1 I have tested (from Sep 2007) for which
    the patch applies cleanly (since before this commit the code was in a
    .h file).
    
    Fixes: bdf1ee5d3bd3 ("[TCP]: Move code from tcp_ecn.h to tcp*.c and tcp.h & remove it")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c34a29261eecbfbfe7453776317f4f33df13a8c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Sep 2 23:24:21 2019 +0800

    sctp: use transport pf_retrans in sctp_do_8_2_transport_strike
    
    [ Upstream commit 10eb56c582c557c629271f1ee31e15e7a9b2558b ]
    
    Transport should use its own pf_retrans to do the error_count
    check, instead of asoc's. Otherwise, it's meaningless to make
    pf_retrans per transport.
    
    Fixes: 5aa93bcf66f4 ("sctp: Implement quick failover draft from tsvwg")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41b624ff83d2178387f4e475f35bc10115b93353
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Sep 11 18:02:39 2019 +0200

    sctp: Fix the link time qualifier of 'sctp_ctrlsock_exit()'
    
    [ Upstream commit b456d72412ca8797234449c25815e82f4e1426c0 ]
    
    The '.exit' functions from 'pernet_operations' structure should be marked
    as __net_exit, not __net_init.
    
    Fixes: 8e2d61e0aed2 ("sctp: fix race on protocol/netns initialization")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9e91767b921ee196ab693fa13a81b278f53ddac
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Sep 8 13:40:51 2019 -0700

    sch_hhf: ensure quantum and hhf_non_hh_weight are non-zero
    
    [ Upstream commit d4d6ec6dac07f263f06d847d6f732d6855522845 ]
    
    In case of TCA_HHF_NON_HH_WEIGHT or TCA_HHF_QUANTUM is zero,
    it would make no progress inside the loop in hhf_dequeue() thus
    kernel would get stuck.
    
    Fix this by checking this corner case in hhf_change().
    
    Fixes: 10239edf86f1 ("net-qdisc-hhf: Heavy-Hitter Filter (HHF) qdisc")
    Reported-by: syzbot+bc6297c11f19ee807dc2@syzkaller.appspotmail.com
    Reported-by: syzbot+041483004a7f45f1f20a@syzkaller.appspotmail.com
    Reported-by: syzbot+55be5f513bed37fc4367@syzkaller.appspotmail.com
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Terry Lam <vtlam@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7f46e18ecfe7e169e9f5f6e4afeceb26527769a
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Sep 5 05:20:22 2019 -0700

    net: sched: fix reordering issues
    
    [ Upstream commit b88dd52c62bb5c5d58f0963287f41fd084352c57 ]
    
    Whenever MQ is not used on a multiqueue device, we experience
    serious reordering problems. Bisection found the cited
    commit.
    
    The issue can be described this way :
    
    - A single qdisc hierarchy is shared by all transmit queues.
      (eg : tc qdisc replace dev eth0 root fq_codel)
    
    - When/if try_bulk_dequeue_skb_slow() dequeues a packet targetting
      a different transmit queue than the one used to build a packet train,
      we stop building the current list and save the 'bad' skb (P1) in a
      special queue. (bad_txq)
    
    - When dequeue_skb() calls qdisc_dequeue_skb_bad_txq() and finds this
      skb (P1), it checks if the associated transmit queues is still in frozen
      state. If the queue is still blocked (by BQL or NIC tx ring full),
      we leave the skb in bad_txq and return NULL.
    
    - dequeue_skb() calls q->dequeue() to get another packet (P2)
    
      The other packet can target the problematic queue (that we found
      in frozen state for the bad_txq packet), but another cpu just ran
      TX completion and made room in the txq that is now ready to accept
      new packets.
    
    - Packet P2 is sent while P1 is still held in bad_txq, P1 might be sent
      at next round. In practice P2 is the lead of a big packet train
      (P2,P3,P4 ...) filling the BQL budget and delaying P1 by many packets :/
    
    To solve this problem, we have to block the dequeue process as long
    as the first packet in bad_txq can not be sent. Reordering issues
    disappear and no side effects have been seen.
    
    Fixes: a53851e2c321 ("net: sched: explicit locking in gso_cpu fallback")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3600a311f83d02881a1f93cdaee60a045117b328
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Thu Sep 5 19:46:18 2019 +0300

    net: phylink: Fix flow control resolution
    
    [ Upstream commit 63b2ed4e10b2e6c913e1d8cdd728e7fba4115a3d ]
    
    Regarding to IEEE 802.3-2015 standard section 2
    28B.3 Priority resolution - Table 28-3 - Pause resolution
    
    In case of Local device Pause=1 AsymDir=0, Link partner
    Pause=1 AsymDir=1, Local device resolution should be enable PAUSE
    transmit, disable PAUSE receive.
    And in case of Local device Pause=1 AsymDir=1, Link partner
    Pause=1 AsymDir=0, Local device resolution should be enable PAUSE
    receive, disable PAUSE transmit.
    
    Fixes: 9525ae83959b ("phylink: add phylink infrastructure")
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Reported-by: Shaul Ben-Mayor <shaulb@marvell.com>
    Acked-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 821302dd0c51d29269ef73a595bdff294419e2cd
Author: Shmulik Ladkani <shmulik@metanetworks.com>
Date:   Fri Sep 6 12:23:50 2019 +0300

    net: gso: Fix skb_segment splat when splitting gso_size mangled skb having linear-headed frag_list
    
    [ Upstream commit 3dcbdb134f329842a38f0e6797191b885ab00a00 ]
    
    Historically, support for frag_list packets entering skb_segment() was
    limited to frag_list members terminating on exact same gso_size
    boundaries. This is verified with a BUG_ON since commit 89319d3801d1
    ("net: Add frag_list support to skb_segment"), quote:
    
        As such we require all frag_list members terminate on exact MSS
        boundaries.  This is checked using BUG_ON.
        As there should only be one producer in the kernel of such packets,
        namely GRO, this requirement should not be difficult to maintain.
    
    However, since commit 6578171a7ff0 ("bpf: add bpf_skb_change_proto helper"),
    the "exact MSS boundaries" assumption no longer holds:
    An eBPF program using bpf_skb_change_proto() DOES modify 'gso_size', but
    leaves the frag_list members as originally merged by GRO with the
    original 'gso_size'. Example of such programs are bpf-based NAT46 or
    NAT64.
    
    This lead to a kernel BUG_ON for flows involving:
     - GRO generating a frag_list skb
     - bpf program performing bpf_skb_change_proto() or bpf_skb_adjust_room()
     - skb_segment() of the skb
    
    See example BUG_ON reports in [0].
    
    In commit 13acc94eff12 ("net: permit skb_segment on head_frag frag_list skb"),
    skb_segment() was modified to support the "gso_size mangling" case of
    a frag_list GRO'ed skb, but *only* for frag_list members having
    head_frag==true (having a page-fragment head).
    
    Alas, GRO packets having frag_list members with a linear kmalloced head
    (head_frag==false) still hit the BUG_ON.
    
    This commit adds support to skb_segment() for a 'head_skb' packet having
    a frag_list whose members are *non* head_frag, with gso_size mangled, by
    disabling SG and thus falling-back to copying the data from the given
    'head_skb' into the generated segmented skbs - as suggested by Willem de
    Bruijn [1].
    
    Since this approach involves the penalty of skb_copy_and_csum_bits()
    when building the segments, care was taken in order to enable this
    solution only when required:
     - untrusted gso_size, by testing SKB_GSO_DODGY is set
       (SKB_GSO_DODGY is set by any gso_size mangling functions in
        net/core/filter.c)
     - the frag_list is non empty, its item is a non head_frag, *and* the
       headlen of the given 'head_skb' does not match the gso_size.
    
    [0]
    https://lore.kernel.org/netdev/20190826170724.25ff616f@pixies/
    https://lore.kernel.org/netdev/9265b93f-253d-6b8c-f2b8-4b54eff1835c@fb.com/
    
    [1]
    https://lore.kernel.org/netdev/CA+FuTSfVsgNDi7c=GUU8nMg2hWxF2SjCNLXetHeVPdnxAW5K-w@mail.gmail.com/
    
    Fixes: 6578171a7ff0 ("bpf: add bpf_skb_change_proto helper")
    Suggested-by: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88a46756f016552581fc07e0a5d5c23b5a26737f
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Tue Sep 10 14:02:57 2019 -0600

    net: Fix null de-reference of device refcount
    
    [ Upstream commit 10cc514f451a0f239aa34f91bc9dc954a9397840 ]
    
    In event of failure during register_netdevice, free_netdev is
    invoked immediately. free_netdev assumes that all the netdevice
    refcounts have been dropped prior to it being called and as a
    result frees and clears out the refcount pointer.
    
    However, this is not necessarily true as some of the operations
    in the NETDEV_UNREGISTER notifier handlers queue RCU callbacks for
    invocation after a grace period. The IPv4 callback in_dev_rcu_put
    tries to access the refcount after free_netdev is called which
    leads to a null de-reference-
    
    44837.761523:   <6> Unable to handle kernel paging request at
                        virtual address 0000004a88287000
    44837.761651:   <2> pc : in_dev_finish_destroy+0x4c/0xc8
    44837.761654:   <2> lr : in_dev_finish_destroy+0x2c/0xc8
    44837.762393:   <2> Call trace:
    44837.762398:   <2>  in_dev_finish_destroy+0x4c/0xc8
    44837.762404:   <2>  in_dev_rcu_put+0x24/0x30
    44837.762412:   <2>  rcu_nocb_kthread+0x43c/0x468
    44837.762418:   <2>  kthread+0x118/0x128
    44837.762424:   <2>  ret_from_fork+0x10/0x1c
    
    Fix this by waiting for the completion of the call_rcu() in
    case of register_netdevice errors.
    
    Fixes: 93ee31f14f6f ("[NET]: Fix free_netdev on register_netdev failure.")
    Cc: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b26f489245b3cf0c06d09a10a8cbdd426af94df6
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Thu Sep 12 13:01:44 2019 +0200

    ixgbe: Fix secpath usage for IPsec TX offload.
    
    [ Upstream commit f39b683d35dfa93a58f1b400a8ec0ff81296b37c ]
    
    The ixgbe driver currently does IPsec TX offloading
    based on an existing secpath. However, the secpath
    can also come from the RX side, in this case it is
    misinterpreted for TX offload and the packets are
    dropped with a "bad sa_idx" error. Fix this by using
    the xfrm_offload() function to test for TX offload.
    
    Fixes: 592594704761 ("ixgbe: process the Tx ipsec offload")
    Reported-by: Michael Marley <michael@michaelmarley.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2354e925e3616e028079353c87c0dd55f5225fc1
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Sep 5 19:36:37 2019 -0700

    isdn/capi: check message length in capi_write()
    
    [ Upstream commit fe163e534e5eecdfd7b5920b0dfd24c458ee85d6 ]
    
    syzbot reported:
    
        BUG: KMSAN: uninit-value in capi_write+0x791/0xa90 drivers/isdn/capi/capi.c:700
        CPU: 0 PID: 10025 Comm: syz-executor379 Not tainted 4.20.0-rc7+ #2
        Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
        Call Trace:
          __dump_stack lib/dump_stack.c:77 [inline]
          dump_stack+0x173/0x1d0 lib/dump_stack.c:113
          kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
          __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
          capi_write+0x791/0xa90 drivers/isdn/capi/capi.c:700
          do_loop_readv_writev fs/read_write.c:703 [inline]
          do_iter_write+0x83e/0xd80 fs/read_write.c:961
          vfs_writev fs/read_write.c:1004 [inline]
          do_writev+0x397/0x840 fs/read_write.c:1039
          __do_sys_writev fs/read_write.c:1112 [inline]
          __se_sys_writev+0x9b/0xb0 fs/read_write.c:1109
          __x64_sys_writev+0x4a/0x70 fs/read_write.c:1109
          do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
          entry_SYSCALL_64_after_hwframe+0x63/0xe7
        [...]
    
    The problem is that capi_write() is reading past the end of the message.
    Fix it by checking the message's length in the needed places.
    
    Reported-and-tested-by: syzbot+0849c524d9c634f5ae66@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea6ec671c87e295eaf3e9ea0aa9b32a674ffc8cf
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Sep 10 13:29:59 2019 +0200

    ipv6: Fix the link time qualifier of 'ping_v6_proc_exit_net()'
    
    [ Upstream commit d23dbc479a8e813db4161a695d67da0e36557846 ]
    
    The '.exit' functions from 'pernet_operations' structure should be marked
    as __net_exit, not __net_init.
    
    Fixes: d862e5461423 ("net: ipv6: Implement /proc/net/icmp6.")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a20c8e4ae48dd2fba58fce042c2b8653116419df
Author: Bjørn Mork <bjorn@mork.no>
Date:   Thu Sep 12 10:42:00 2019 +0200

    cdc_ether: fix rndis support for Mediatek based smartphones
    
    [ Upstream commit 4d7ffcf3bf1be98d876c570cab8fc31d9fa92725 ]
    
    A Mediatek based smartphone owner reports problems with USB
    tethering in Linux.  The verbose USB listing shows a rndis_host
    interface pair (e0/01/03 + 10/00/00), but the driver fails to
    bind with
    
    [  355.960428] usb 1-4: bad CDC descriptors
    
    The problem is a failsafe test intended to filter out ACM serial
    functions using the same 02/02/ff class/subclass/protocol as RNDIS.
    The serial functions are recognized by their non-zero bmCapabilities.
    
    No RNDIS function with non-zero bmCapabilities were known at the time
    this failsafe was added. But it turns out that some Wireless class
    RNDIS functions are using the bmCapabilities field. These functions
    are uniquely identified as RNDIS by their class/subclass/protocol, so
    the failing test can safely be disabled.  The same applies to the two
    types of Misc class RNDIS functions.
    
    Applying the failsafe to Communication class functions only retains
    the original functionality, and fixes the problem for the Mediatek based
    smartphone.
    
    Tow examples of CDC functional descriptors with non-zero bmCapabilities
    from Wireless class RNDIS functions are:
    
    0e8d:000a  Mediatek Crosscall Spider X5 3G Phone
    
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x0f
              connection notifications
              sends break
              line coding and serial state
              get/set/clear comm features
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          1
    
    and
    
    19d2:1023  ZTE K4201-z
    
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          1
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
    
    The Mediatek example is believed to apply to most smartphones with
    Mediatek firmware.  The ZTE example is most likely also part of a larger
    family of devices/firmwares.
    
    Suggested-by: Lars Melin <larsm17@gmail.com>
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f57fd58dda426cdebe36a1dae169b1c87b2ad295
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Fri Sep 6 11:47:02 2019 +0200

    bridge/mdb: remove wrong use of NLM_F_MULTI
    
    [ Upstream commit 94a72b3f024fc7e9ab640897a1e38583a470659d ]
    
    NLM_F_MULTI must be used only when a NLMSG_DONE message is sent at the end.
    In fact, NLMSG_DONE is sent only at the end of a dump.
    
    Libraries like libnl will wait forever for NLMSG_DONE.
    
    Fixes: 949f1e39a617 ("bridge: mdb: notify on router port add and del")
    CC: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
