commit 5c088fba39aff97ae9175948356ef3292369671c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Nov 21 13:38:51 2021 +0100

    Linux 5.4.161
    
    Link: https://lore.kernel.org/r/20211119171444.640508836@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Fox Chen <foxhlchen@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-By: Scott Bruce <smbruce@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b786cb3236e165e29ece529e05380c19a8fe4fbe
Author: Gao Xiang <hsiangkao@linux.alibaba.com>
Date:   Tue Nov 16 09:10:35 2021 +0800

    erofs: fix unsafe pagevec reuse of hooked pclusters
    
    commit 86432a6dca9bed79111990851df5756d3eb5f57c upstream.
    
    There are pclusters in runtime marked with Z_EROFS_PCLUSTER_TAIL
    before actual I/O submission. Thus, the decompression chain can be
    extended if the following pcluster chain hooks such tail pcluster.
    
    As the related comment mentioned, if some page is made of a hooked
    pcluster and another followed pcluster, it can be reused for in-place
    I/O (since I/O should be submitted anyway):
     _______________________________________________________________
    |  tail (partial) page |          head (partial) page           |
    |_____PRIMARY_HOOKED___|____________PRIMARY_FOLLOWED____________|
    
    However, it's by no means safe to reuse as pagevec since if such
    PRIMARY_HOOKED pclusters finally move into bypass chain without I/O
    submission. It's somewhat hard to reproduce with LZ4 and I just found
    it (general protection fault) by ro_fsstressing a LZMA image for long
    time.
    
    I'm going to actively clean up related code together with multi-page
    folio adaption in the next few months. Let's address it directly for
    easier backporting for now.
    
    Call trace for reference:
      z_erofs_decompress_pcluster+0x10a/0x8a0 [erofs]
      z_erofs_decompress_queue.isra.36+0x3c/0x60 [erofs]
      z_erofs_runqueue+0x5f3/0x840 [erofs]
      z_erofs_readahead+0x1e8/0x320 [erofs]
      read_pages+0x91/0x270
      page_cache_ra_unbounded+0x18b/0x240
      filemap_get_pages+0x10a/0x5f0
      filemap_read+0xa9/0x330
      new_sync_read+0x11b/0x1a0
      vfs_read+0xf1/0x190
    
    Link: https://lore.kernel.org/r/20211103182006.4040-1-xiang@kernel.org
    Fixes: 3883a79abd02 ("staging: erofs: introduce VLE decompression support")
    Cc: <stable@vger.kernel.org> # 4.19+
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Gao Xiang <hsiangkao@linux.alibaba.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83de35ae27a1d73a07431d834d54a7b81f4b3faf
Author: Yue Hu <huyue2@yulong.com>
Date:   Tue Nov 16 09:10:34 2021 +0800

    erofs: remove the occupied parameter from z_erofs_pagevec_enqueue()
    
    commit 7dea3de7d384f4c8156e8bd93112ba6db1eb276c upstream.
    
    No any behavior to variable occupied in z_erofs_attach_page() which
    is only caller to z_erofs_pagevec_enqueue().
    
    Link: https://lore.kernel.org/r/20210419102623.2015-1-zbestahu@gmail.com
    Signed-off-by: Yue Hu <huyue2@yulong.com>
    Reviewed-by: Gao Xiang <xiang@kernel.org>
    Signed-off-by: Gao Xiang <xiang@kernel.org>
    Signed-off-by: Gao Xiang <hsiangkao@linux.alibaba.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b37f6da8c3fcc997e162ddec9a55c72829229fae
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Nov 4 18:01:30 2021 +0000

    PCI: Add MSI masking quirk for Nvidia ION AHCI
    
    commit f21082fb20dbfb3e42b769b59ef21c2a7f2c7c1f upstream.
    
    The ION AHCI device pretends that MSI masking isn't a thing, while it
    actually implements it and needs MSIs to be unmasked to work. Add a quirk
    to that effect.
    
    Reported-by: Rui Salvaterra <rsalvaterra@gmail.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Rui Salvaterra <rsalvaterra@gmail.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Bjorn Helgaas <helgaas@kernel.org>
    Link: https://lore.kernel.org/r/CALjTZvbzYfBuLB+H=fj2J+9=DxjQ2Uqcy0if_PvmJ-nU-qEgkg@mail.gmail.com
    Link: https://lore.kernel.org/r/20211104180130.3825416-3-maz@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db1390b60e89ef6c5eb99b229365bb5a00a5b608
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Nov 4 18:01:29 2021 +0000

    PCI/MSI: Deal with devices lying about their MSI mask capability
    
    commit 2226667a145db2e1f314d7f57fd644fe69863ab9 upstream.
    
    It appears that some devices are lying about their mask capability,
    pretending that they don't have it, while they actually do.
    The net result is that now that we don't enable MSIs on such
    endpoint.
    
    Add a new per-device flag to deal with this. Further patches will
    make use of it, sadly.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20211104180130.3825416-2-maz@kernel.org
    Cc: Bjorn Helgaas <helgaas@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49b55a7792eceeb5c42e0ceab7cc7c785f4e2c85
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Nov 9 14:53:57 2021 +0100

    PCI/MSI: Destroy sysfs before freeing entries
    
    commit 3735459037114d31e5acd9894fad9aed104231a0 upstream.
    
    free_msi_irqs() frees the MSI entries before destroying the sysfs entries
    which are exposing them. Nothing prevents a concurrent free while a sysfs
    file is read and accesses the possibly freed entry.
    
    Move the sysfs release ahead of freeing the entries.
    
    Fixes: 1c51b50c2995 ("PCI/MSI: Export MSI mode using attributes, not kobjects")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Bjorn Helgaas <helgaas@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87sfw5305m.ffs@tglx
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7186be970c11b4810decbb3a2cce61a9b7bd6d2d
Author: Sven Schnelle <svens@stackframe.org>
Date:   Sat Nov 13 20:41:17 2021 +0100

    parisc/entry: fix trace test in syscall exit path
    
    commit 3ec18fc7831e7d79e2d536dd1f3bc0d3ba425e8a upstream.
    
    commit 8779e05ba8aa ("parisc: Fix ptrace check on syscall return")
    fixed testing of TI_FLAGS. This uncovered a bug in the test mask.
    syscall_restore_rfi is only used when the kernel needs to exit to
    usespace with single or block stepping and the recovery counter
    enabled. The test however used _TIF_SYSCALL_TRACE_MASK, which
    includes a lot of bits that shouldn't be tested here.
    
    Fix this by using TIF_SINGLESTEP and TIF_BLOCKSTEP directly.
    
    I encountered this bug by enabling syscall tracepoints. Both in qemu and
    on real hardware. As soon as i enabled the tracepoint (sys_exit_read,
    but i guess it doesn't really matter which one), i got random page
    faults in userspace almost immediately.
    
    Signed-off-by: Sven Schnelle <svens@stackframe.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258c42a8fb317d197e94765187d30188241e9254
Author: Kees Cook <keescook@chromium.org>
Date:   Wed May 12 21:51:10 2021 -0700

    fortify: Explicitly disable Clang support
    
    commit a52f8a59aef46b59753e583bf4b28fccb069ce64 upstream.
    
    Clang has never correctly compiled the FORTIFY_SOURCE defenses due to
    a couple bugs:
    
            Eliding inlines with matching __builtin_* names
            https://bugs.llvm.org/show_bug.cgi?id=50322
    
            Incorrect __builtin_constant_p() of some globals
            https://bugs.llvm.org/show_bug.cgi?id=41459
    
    In the process of making improvements to the FORTIFY_SOURCE defenses, the
    first (silent) bug (coincidentally) becomes worked around, but exposes
    the latter which breaks the build. As such, Clang must not be used with
    CONFIG_FORTIFY_SOURCE until at least latter bug is fixed (in Clang 13),
    and the fortify routines have been rearranged.
    
    Update the Kconfig to reflect the reality of the current situation.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/lkml/CAKwvOd=A+ueGV2ihdy5GtgR2fQbcXjjAtVxv3=cPjffpebZB7A@mail.gmail.com
    Cc: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f9a3cda166075274fa4a20b178795b493431db2
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Thu Jan 7 10:53:16 2021 -0800

    scsi: ufs: Fix tm request when non-fatal error happens
    
    commit eeb1b55b6e25c5f7265ff45cd050f3bc2cc423a4 upstream.
    
    When non-fatal error like line-reset happens, ufshcd_err_handler() starts
    to abort tasks by ufshcd_try_to_abort_task(). When it tries to issue a task
    management request, we hit two warnings:
    
    WARNING: CPU: 7 PID: 7 at block/blk-core.c:630 blk_get_request+0x68/0x70
    WARNING: CPU: 4 PID: 157 at block/blk-mq-tag.c:82 blk_mq_get_tag+0x438/0x46c
    
    After fixing the above warnings we hit another tm_cmd timeout which may be
    caused by unstable controller state:
    
    __ufshcd_issue_tm_cmd: task management cmd 0x80 timed-out
    
    Then, ufshcd_err_handler() enters full reset, and kernel gets stuck. It
    turned out ufshcd_print_trs() printed too many messages on console which
    requires CPU locks. Likewise hba->silence_err_logs, we need to avoid too
    verbose messages. This is actually not an error case.
    
    Link: https://lore.kernel.org/r/20210107185316.788815-3-jaegeuk@kernel.org
    Fixes: 69a6c269c097 ("scsi: ufs: Use blk_{get,put}_request() to allocate and free TMFs")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    [Zhai: remove an item of debug print not available in v5.4]
    Signed-off-by: Orson Zhai <orson.zhai@unisoc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c468f9249d84510d1298ac559467769d52ce055f
Author: Shaoying Xu <shaoyi@amazon.com>
Date:   Thu Sep 2 16:44:12 2021 +0000

    ext4: fix lazy initialization next schedule time computation in more granular unit
    
    commit 39fec6889d15a658c3a3ebb06fd69d3584ddffd3 upstream.
    
    Ext4 file system has default lazy inode table initialization setup once
    it is mounted. However, it has issue on computing the next schedule time
    that makes the timeout same amount in jiffies but different real time in
    secs if with various HZ values. Therefore, fix by measuring the current
    time in a more granular unit nanoseconds and make the next schedule time
    independent of the HZ value.
    
    Fixes: bfff68738f1c ("ext4: add support for lazy inode table initialization")
    Signed-off-by: Shaoying Xu <shaoyi@amazon.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Link: https://lore.kernel.org/r/20210902164412.9994-2-shaoyi@amazon.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 307c6f7287284366219750b6d9d89cb6aee85b9c
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Fri Oct 22 00:58:23 2021 +0200

    MIPS: Fix assembly error from MIPSr2 code used within MIPS_ISA_ARCH_LEVEL
    
    commit a923a2676e60683aee46aa4b93c30aff240ac20d upstream.
    
    Fix assembly errors like:
    
    {standard input}: Assembler messages:
    {standard input}:287: Error: opcode not supported on this processor: mips3 (mips3) `dins $10,$7,32,32'
    {standard input}:680: Error: opcode not supported on this processor: mips3 (mips3) `dins $10,$7,32,32'
    {standard input}:1274: Error: opcode not supported on this processor: mips3 (mips3) `dins $12,$9,32,32'
    {standard input}:2175: Error: opcode not supported on this processor: mips3 (mips3) `dins $10,$7,32,32'
    make[1]: *** [scripts/Makefile.build:277: mm/highmem.o] Error 1
    
    with code produced from `__cmpxchg64' for MIPS64r2 CPU configurations
    using CONFIG_32BIT and CONFIG_PHYS_ADDR_T_64BIT.
    
    This is due to MIPS_ISA_ARCH_LEVEL downgrading the assembly architecture
    to `r4000' i.e. MIPS III for MIPS64r2 configurations, while there is a
    block of code containing a DINS MIPS64r2 instruction conditionalized on
    MIPS_ISA_REV >= 2 within the scope of the downgrade.
    
    The assembly architecture override code pattern has been put there for
    LL/SC instructions, so that code compiles for configurations that select
    a processor to build for that does not support these instructions while
    still providing run-time support for processors that do, dynamically
    switched by non-constant `cpu_has_llsc'.  It went in with linux-mips.org
    commit aac8aa7717a2 ("Enable a suitable ISA for the assembler around
    ll/sc so that code builds even for processors that don't support the
    instructions. Plus minor formatting fixes.") back in 2005.
    
    Fix the problem by wrapping these instructions along with the adjacent
    SYNC instructions only, following the practice established with commit
    cfd54de3b0e4 ("MIPS: Avoid move psuedo-instruction whilst using
    MIPS_ISA_LEVEL") and commit 378ed6f0e3c5 ("MIPS: Avoid using .set mips0
    to restore ISA").  Strictly speaking the SYNC instructions do not have
    to be wrapped as they are only used as a Loongson3 erratum workaround,
    so they will be enabled in the assembler by default, but do this so as
    to keep code consistent with other places.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Fixes: c7e2d71dda7a ("MIPS: Fix set_pte() for Netlogic XLR using cmpxchg64()")
    Cc: stable@vger.kernel.org # v5.1+
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7be773a0288e75e21b313eb45423cb894e32f0b5
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Aug 11 16:39:35 2020 +0300

    scsi: ufs: Fix interrupt error message for shared interrupts
    
    commit 6337f58cec030b34ced435b3d9d7d29d63c96e36 upstream.
    
    The interrupt might be shared, in which case it is not an error for the
    interrupt handler to be called when the interrupt status is zero, so don't
    print the message unless there was enabled interrupt status.
    
    Link: https://lore.kernel.org/r/20200811133936.19171-1-adrian.hunter@intel.com
    Fixes: 9333d7757348 ("scsi: ufs: Fix irq return code")
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Orson Zhai <orson.zhai@unisoc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3c97ba4a69e6390430ed76cce239d53fc39aee0
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Mar 2 15:24:58 2021 +0300

    soc/tegra: pmc: Fix imbalanced clock disabling in error code path
    
    commit 19221e3083020bd9537624caa0ee0145ed92ba36 upstream.
    
    The tegra_powergate_power_up() has a typo in the error code path where it
    will try to disable clocks twice, fix it. In practice that error never
    happens, so this is a minor correction.
    
    Tested-by: Peter Geis <pgwipeout@gmail.com> # Ouya T30
    Tested-by: Nicolas Chauvet <kwizart@gmail.com> # PAZ00 T20 and TK1 T124
    Tested-by: Matt Merhar <mattmerhar@protonmail.com> # Ouya T30
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
