commit 8686d7d2e93b977f4cc3cb28cd0c64dcfcc8a865
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 5 14:35:29 2017 +0200

    Linux 3.18.60

commit 240b73151497d528da00d3232f1f6dd326fe9b2f
Author: Wanpeng Li <wanpeng.li@hotmail.com>
Date:   Mon Jun 5 05:19:09 2017 -0700

    KVM: nVMX: Fix exception injection
    
    commit d4912215d1031e4fb3d1038d2e1857218dba0d0a upstream.
    
     WARNING: CPU: 3 PID: 2840 at arch/x86/kvm/vmx.c:10966 nested_vmx_vmexit+0xdcd/0xde0 [kvm_intel]
     CPU: 3 PID: 2840 Comm: qemu-system-x86 Tainted: G           OE   4.12.0-rc3+ #23
     RIP: 0010:nested_vmx_vmexit+0xdcd/0xde0 [kvm_intel]
     Call Trace:
      ? kvm_check_async_pf_completion+0xef/0x120 [kvm]
      ? rcu_read_lock_sched_held+0x79/0x80
      vmx_queue_exception+0x104/0x160 [kvm_intel]
      ? vmx_queue_exception+0x104/0x160 [kvm_intel]
      kvm_arch_vcpu_ioctl_run+0x1171/0x1ce0 [kvm]
      ? kvm_arch_vcpu_load+0x47/0x240 [kvm]
      ? kvm_arch_vcpu_load+0x62/0x240 [kvm]
      kvm_vcpu_ioctl+0x384/0x7b0 [kvm]
      ? kvm_vcpu_ioctl+0x384/0x7b0 [kvm]
      ? __fget+0xf3/0x210
      do_vfs_ioctl+0xa4/0x700
      ? __fget+0x114/0x210
      SyS_ioctl+0x79/0x90
      do_syscall_64+0x81/0x220
      entry_SYSCALL64_slow_path+0x25/0x25
    
    This is triggered occasionally by running both win7 and win2016 in L2, in
    addition, EPT is disabled on both L1 and L2. It can't be reproduced easily.
    
    Commit 0b6ac343fc (KVM: nVMX: Correct handling of exception injection) mentioned
    that "KVM wants to inject page-faults which it got to the guest. This function
    assumes it is called with the exit reason in vmcs02 being a #PF exception".
    Commit e011c663 (KVM: nVMX: Check all exceptions for intercept during delivery to
    L2) allows to check all exceptions for intercept during delivery to L2. However,
    there is no guarantee the exit reason is exception currently, when there is an
    external interrupt occurred on host, maybe a time interrupt for host which should
    not be injected to guest, and somewhere queues an exception, then the function
    nested_vmx_check_exception() will be called and the vmexit emulation codes will
    try to emulate the "Acknowledge interrupt on exit" behavior, the warning is
    triggered.
    
    Reusing the exit reason from the L2->L0 vmexit is wrong in this case,
    the reason must always be EXCEPTION_NMI when injecting an exception into
    L1 as a nested vmexit.
    
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
    Fixes: e011c663b9c7 ("KVM: nVMX: Check all exceptions for intercept during delivery to L2")
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42ba428e3f103f2c6f3b99a70d7a48f04986e908
Author: Radim Krčmář <rkrcmar@redhat.com>
Date:   Thu May 18 19:37:30 2017 +0200

    KVM: x86: zero base3 of unusable segments
    
    commit f0367ee1d64d27fa08be2407df5c125442e885e3 upstream.
    
    Static checker noticed that base3 could be used uninitialized if the
    segment was not present (useable).  Random stack values probably would
    not pass VMCS entry checks.
    
    Reported-by:  Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 1aa366163b8b ("KVM: x86 emulator: consolidate segment accessors")
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c40956d9899655af7600461b6f2e7b4845fb4a04
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 7 16:19:06 2017 +0300

    cpufreq: s3c2416: double free on driver init error path
    
    commit a69261e4470d680185a15f748d9cdafb37c57a33 upstream.
    
    The "goto err_armclk;" error path already does a clk_put(s3c_freq->hclk);
    so this is a double free.
    
    Fixes: 34ee55075265 ([CPUFREQ] Add S3C2416/S3C2450 cpufreq driver)
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbb7b439df6d8b58ebeee8983add85abd28fbfcf
Author: Pan Bian <bianpan2016@163.com>
Date:   Sun Apr 23 18:23:21 2017 +0800

    iommu/amd: Fix incorrect error handling in amd_iommu_bind_pasid()
    
    commit 73dbd4a4230216b6a5540a362edceae0c9b4876b upstream.
    
    In function amd_iommu_bind_pasid(), the control flow jumps
    to label out_free when pasid_state->mm and mm is NULL. And
    mmput(mm) is called.  In function mmput(mm), mm is
    referenced without validation. This will result in a NULL
    dereference bug. This patch fixes the bug.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Fixes: f0aac63b873b ('iommu/amd: Don't hold a reference to mm_struct')
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfeac3d9137d31716848a4af51ea463831c2fc4a
Author: David Dillow <dillow@google.com>
Date:   Mon Jan 30 19:11:11 2017 -0800

    iommu/vt-d: Don't over-free page table directories
    
    commit f7116e115acdd74bc75a4daf6492b11d43505125 upstream.
    
    dma_pte_free_level() recurses down the IOMMU page tables and frees
    directory pages that are entirely contained in the given PFN range.
    Unfortunately, it incorrectly calculates the starting address covered
    by the PTE under consideration, which can lead to it clearing an entry
    that is still in use.
    
    This occurs if we have a scatterlist with an entry that has a length
    greater than 1026 MB and is aligned to 2 MB for both the IOMMU and
    physical addresses. For example, if __domain_mapping() is asked to map a
    two-entry scatterlist with 2 MB and 1028 MB segments to PFN 0xffff80000,
    it will ask if dma_pte_free_pagetable() is asked to PFNs from
    0xffff80200 to 0xffffc05ff, it will also incorrectly clear the PFNs from
    0xffff80000 to 0xffff801ff because of this issue. The current code will
    set level_pfn to 0xffff80200, and 0xffff80200-0xffffc01ff fits inside
    the range being cleared. Properly setting the level_pfn for the current
    level under consideration catches that this PTE is outside of the range
    being cleared.
    
    This patch also changes the value passed into dma_pte_free_level() when
    it recurses. This only affects the first PTE of the range being cleared,
    and is handled by the existing code that ensures we start our cursor no
    lower than start_pfn.
    
    This was found when using dma_map_sg() to map large chunks of contiguous
    memory, which immediatedly led to faults on the first access of the
    erroneously-deleted mappings.
    
    Fixes: 3269ee0bd668 ("intel-iommu: Fix leaks in pagetable freeing")
    Reviewed-by: Benjamin Serebrin <serebrin@google.com>
    Signed-off-by: David Dillow <dillow@google.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d48ed8069acbdeb03b74ea452eb81d419682610f
Author: Doug Berger <opendmb@gmail.com>
Date:   Thu Jun 29 18:41:36 2017 +0100

    ARM: 8685/1: ensure memblock-limit is pmd-aligned
    
    commit 9e25ebfe56ece7541cd10a20d715cbdd148a2e06 upstream.
    
    The pmd containing memblock_limit is cleared by prepare_page_table()
    which creates the opportunity for early_alloc() to allocate unmapped
    memory if memblock_limit is not pmd aligned causing a boot-time hang.
    
    Commit 965278dcb8ab ("ARM: 8356/1: mm: handle non-pmd-aligned end of RAM")
    attempted to resolve this problem, but there is a path through the
    adjust_lowmem_bounds() routine where if all memory regions start and
    end on pmd-aligned addresses the memblock_limit will be set to
    arm_lowmem_limit.
    
    Since arm_lowmem_limit can be affected by the vmalloc early parameter,
    the value of arm_lowmem_limit may not be pmd-aligned. This commit
    corrects this oversight such that memblock_limit is always rounded
    down to pmd-alignment.
    
    Fixes: 965278dcb8ab ("ARM: 8356/1: mm: handle non-pmd-aligned end of RAM")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Suggested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ca017cba6611c6278359eafd034cef9a4cd8f08
Author: Eric Anholt <eric@anholt.net>
Date:   Thu Apr 27 18:02:32 2017 -0700

    watchdog: bcm281xx: Fix use of uninitialized spinlock.
    
    commit fedf266f9955d9a019643cde199a2fd9a0259f6f upstream.
    
    The bcm_kona_wdt_set_resolution_reg() call takes the spinlock, so
    initialize it earlier.  Fixes a warning at boot with lock debugging
    enabled.
    
    Fixes: 6adb730dc208 ("watchdog: bcm281xx: Watchdog Driver")
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c0454ccee160d82c18783b5918cc8dcf79dca01
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 14 13:34:05 2017 +0300

    xfrm: Oops on error in pfkey_msg2xfrm_state()
    
    commit 1e3d0c2c70cd3edb5deed186c5f5c75f2b84a633 upstream.
    
    There are some missing error codes here so we accidentally return NULL
    instead of an error pointer.  It results in a NULL pointer dereference.
    
    Fixes: df71837d5024 ("[LSM-IPSec]: Security association restriction.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f790a77754db7b14c3e1235a852a83a2f1ad4041
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 14 13:35:37 2017 +0300

    xfrm: NULL dereference on allocation failure
    
    commit e747f64336fc15e1c823344942923195b800aa1e upstream.
    
    The default error code in pfkey_msg2xfrm_state() is -ENOBUFS.  We
    added a new call to security_xfrm_state_alloc() which sets "err" to zero
    so there several places where we can return ERR_PTR(0) if kmalloc()
    fails.  The caller is expecting error pointers so it leads to a NULL
    dereference.
    
    Fixes: df71837d5024 ("[LSM-IPSec]: Security association restriction.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd5d0625c56f3d85aad2a613c068a66414bbee72
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Wed May 3 16:43:19 2017 +0200

    xfrm: fix stack access out of bounds with CONFIG_XFRM_SUB_POLICY
    
    commit 9b3eb54106cf6acd03f07cf0ab01c13676a226c2 upstream.
    
    When CONFIG_XFRM_SUB_POLICY=y, xfrm_dst stores a copy of the flowi for
    that dst. Unfortunately, the code that allocates and fills this copy
    doesn't care about what type of flowi (flowi, flowi4, flowi6) gets
    passed. In multiple code paths (from raw_sendmsg, from TCP when
    replying to a FIN, in vxlan, geneve, and gre), the flowi that gets
    passed to xfrm is actually an on-stack flowi4, so we end up reading
    stuff from the stack past the end of the flowi4 struct.
    
    Since xfrm_dst->origin isn't used anywhere following commit
    ca116922afa8 ("xfrm: Eliminate "fl" and "pol" args to
    xfrm_bundle_ok()."), just get rid of it.  xfrm_dst->partner isn't used
    either, so get rid of that too.
    
    Fixes: 9d6ec938019c ("ipv4: Use flowi4 in public route lookup interfaces.")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2288ba073fc92cc70db65484cc5c706e4ff6361e
Author: Rafał Miłecki <zajec5@gmail.com>
Date:   Sat Dec 5 02:09:43 2015 +0100

    mtd: bcm47xxpart: limit scanned flash area on BCM47XX (MIPS) only
    
    commit 2a36a5c30eab9cd1c9d2d08bd27cd763325d70c5 upstream.
    
    We allowed using bcm47xxpart on BCM5301X arch with commit:
    9e3afa5f5c7 ("mtd: bcm47xxpart: allow enabling on ARCH_BCM_5301X")
    
    BCM5301X devices may contain some partitions in higher memory, e.g.
    Netgear R8000 has board_data at 0x2600000. To detect them we should
    use size limit on MIPS only.
    
    Signed-off-by: Rafał Miłecki <zajec5@gmail.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e65a4444c870a78fd2d9b5482a007535bd82ccb
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Dec 23 19:56:56 2016 -0800

    net: korina: Fix NAPI versus resources freeing
    
    commit e6afb1ad88feddf2347ea779cfaf4d03d3cd40b6 upstream.
    
    Commit beb0babfb77e ("korina: disable napi on close and restart")
    introduced calls to napi_disable() that were missing before,
    unfortunately this leaves a small window during which NAPI has a chance
    to run, yet we just freed resources since korina_free_ring() has been
    called:
    
    Fix this by disabling NAPI first then freeing resource, and make sure
    that we also cancel the restart task before doing the resource freeing.
    
    Fixes: beb0babfb77e ("korina: disable napi on close and restart")
    Reported-by: Alexandros C. Couloumbis <alex@ozo.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67a86748c3805a532234b85123be2aeba94982e9
Author: Jon Mason <jon.mason@broadcom.com>
Date:   Thu Mar 2 19:21:32 2017 -0500

    ARM: dts: BCM5301X: Correct GIC_PPI interrupt flags
    
    commit 0c2bf9f95983fe30aa2f6463cb761cd42c2d521a upstream.
    
    GIC_PPI flags were misconfigured for the timers, resulting in errors
    like:
    [    0.000000] GIC: PPI11 is secure or misconfigured
    
    Changing them to being edge triggered corrects the issue
    
    Suggested-by: Rafał Miłecki <rafal@milecki.pl>
    Signed-off-by: Jon Mason <jon.mason@broadcom.com>
    Fixes: d27509f1 ("ARM: BCM5301X: add dts files for BCM4708 SoC")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    [AmitP: Resolved minor cherry-pick conflict]
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86af955d02bbba4fbec498629afd51a48ff1db53
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Jun 16 14:02:34 2017 -0700

    mm: numa: avoid waiting on freed migrated pages
    
    commit 3c226c637b69104f6b9f1c6ec5b08d7b741b3229 upstream.
    
    In do_huge_pmd_numa_page(), we attempt to handle a migrating thp pmd by
    waiting until the pmd is unlocked before we return and retry.  However,
    we can race with migrate_misplaced_transhuge_page():
    
        // do_huge_pmd_numa_page                // migrate_misplaced_transhuge_page()
        // Holds 0 refs on page                 // Holds 2 refs on page
    
        vmf->ptl = pmd_lock(vma->vm_mm, vmf->pmd);
        /* ... */
        if (pmd_trans_migrating(*vmf->pmd)) {
                page = pmd_page(*vmf->pmd);
                spin_unlock(vmf->ptl);
                                                ptl = pmd_lock(mm, pmd);
                                                if (page_count(page) != 2)) {
                                                        /* roll back */
                                                }
                                                /* ... */
                                                mlock_migrate_page(new_page, page);
                                                /* ... */
                                                spin_unlock(ptl);
                                                put_page(page);
                                                put_page(page); // page freed here
                wait_on_page_locked(page);
                goto out;
        }
    
    This can result in the freed page having its waiters flag set
    unexpectedly, which trips the PAGE_FLAGS_CHECK_AT_PREP checks in the
    page alloc/free functions.  This has been observed on arm64 KVM guests.
    
    We can avoid this by having do_huge_pmd_numa_page() take a reference on
    the page before dropping the pmd lock, mirroring what we do in
    __migration_entry_wait().
    
    When we hit the race, migrate_misplaced_transhuge_page() will see the
    reference and abort the migration, as it may do today in other cases.
    
    Fixes: b8916634b77bffb2 ("mm: Prevent parallel splits during THP migration")
    Link: http://lkml.kernel.org/r/1497349722-6731-2-git-send-email-will.deacon@arm.com
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Steve Capper <steve.capper@arm.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Mel Gorman <mgorman@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc7a4b8bbb8468ca980d72f7cbd47d90b0465136
Author: Kees Cook <keescook@chromium.org>
Date:   Wed Jan 20 15:00:45 2016 -0800

    sysctl: enable strict writes
    
    commit 41662f5cc55335807d39404371cfcbb1909304c4 upstream.
    
    SYSCTL_WRITES_WARN was added in commit f4aacea2f5d1 ("sysctl: allow for
    strict write position handling"), and released in v3.16 in August of
    2014.  Since then I can find only 1 instance of non-zero offset
    writing[1], and it was fixed immediately in CRIU[2].  As such, it
    appears safe to flip this to the strict state now.
    
    [1] https://www.google.com/search?q="when%20file%20position%20was%20not%200"
    [2] http://lists.openvz.org/pipermail/criu/2015-April/019819.html
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b8f56f595dea7ac3655dbf2318444e4749cfc65
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Thu Dec 8 19:55:22 2016 +0800

    usb: gadget: f_fs: Fix possibe deadlock
    
    commit b3ce3ce02d146841af012d08506b4071db8ffde3 upstream.
    
    When system try to close /dev/usb-ffs/adb/ep0 on one core, at the same
    time another core try to attach new UDC, which will cause deadlock as
    below scenario. Thus we should release ffs lock before issuing
    unregister_gadget_item().
    
    [   52.642225] c1 ======================================================
    [   52.642228] c1 [ INFO: possible circular locking dependency detected ]
    [   52.642236] c1 4.4.6+ #1 Tainted: G        W  O
    [   52.642241] c1 -------------------------------------------------------
    [   52.642245] c1 usb ffs open/2808 is trying to acquire lock:
    [   52.642270] c0  (udc_lock){+.+.+.}, at: [<ffffffc00065aeec>]
                    usb_gadget_unregister_driver+0x3c/0xc8
    [   52.642272] c1  but task is already holding lock:
    [   52.642283] c0  (ffs_lock){+.+.+.}, at: [<ffffffc00066b244>]
                    ffs_data_clear+0x30/0x140
    [   52.642285] c1 which lock already depends on the new lock.
    [   52.642287] c1
                   the existing dependency chain (in reverse order) is:
    [   52.642295] c0
                   -> #1 (ffs_lock){+.+.+.}:
    [   52.642307] c0        [<ffffffc00012340c>] __lock_acquire+0x20f0/0x2238
    [   52.642314] c0        [<ffffffc000123b54>] lock_acquire+0xe4/0x298
    [   52.642322] c0        [<ffffffc000aaf6e8>] mutex_lock_nested+0x7c/0x3cc
    [   52.642328] c0        [<ffffffc00066f7bc>] ffs_func_bind+0x504/0x6e8
    [   52.642334] c0        [<ffffffc000654004>] usb_add_function+0x84/0x184
    [   52.642340] c0        [<ffffffc000658ca4>] configfs_composite_bind+0x264/0x39c
    [   52.642346] c0        [<ffffffc00065b348>] udc_bind_to_driver+0x58/0x11c
    [   52.642352] c0        [<ffffffc00065b49c>] usb_udc_attach_driver+0x90/0xc8
    [   52.642358] c0        [<ffffffc0006598e0>] gadget_dev_desc_UDC_store+0xd4/0x128
    [   52.642369] c0        [<ffffffc0002c14e8>] configfs_write_file+0xd0/0x13c
    [   52.642376] c0        [<ffffffc00023c054>] vfs_write+0xb8/0x214
    [   52.642381] c0        [<ffffffc00023cad4>] SyS_write+0x54/0xb0
    [   52.642388] c0        [<ffffffc000085ff0>] el0_svc_naked+0x24/0x28
    [   52.642395] c0
                  -> #0 (udc_lock){+.+.+.}:
    [   52.642401] c0        [<ffffffc00011e3d0>] print_circular_bug+0x84/0x2e4
    [   52.642407] c0        [<ffffffc000123454>] __lock_acquire+0x2138/0x2238
    [   52.642412] c0        [<ffffffc000123b54>] lock_acquire+0xe4/0x298
    [   52.642420] c0        [<ffffffc000aaf6e8>] mutex_lock_nested+0x7c/0x3cc
    [   52.642427] c0        [<ffffffc00065aeec>] usb_gadget_unregister_driver+0x3c/0xc8
    [   52.642432] c0        [<ffffffc00065995c>] unregister_gadget_item+0x28/0x44
    [   52.642439] c0        [<ffffffc00066b34c>] ffs_data_clear+0x138/0x140
    [   52.642444] c0        [<ffffffc00066b374>] ffs_data_reset+0x20/0x6c
    [   52.642450] c0        [<ffffffc00066efd0>] ffs_data_closed+0xac/0x12c
    [   52.642454] c0        [<ffffffc00066f070>] ffs_ep0_release+0x20/0x2c
    [   52.642460] c0        [<ffffffc00023dbe4>] __fput+0xb0/0x1f4
    [   52.642466] c0        [<ffffffc00023dd9c>] ____fput+0x20/0x2c
    [   52.642473] c0        [<ffffffc0000ee944>] task_work_run+0xb4/0xe8
    [   52.642482] c0        [<ffffffc0000cd45c>] do_exit+0x360/0xb9c
    [   52.642487] c0        [<ffffffc0000cf228>] do_group_exit+0x4c/0xb0
    [   52.642494] c0        [<ffffffc0000dd3c8>] get_signal+0x380/0x89c
    [   52.642501] c0        [<ffffffc00008a8f0>] do_signal+0x154/0x518
    [   52.642507] c0        [<ffffffc00008af00>] do_notify_resume+0x70/0x78
    [   52.642512] c0        [<ffffffc000085ee8>] work_pending+0x1c/0x20
    [   52.642514] c1
                  other info that might help us debug this:
    [   52.642517] c1  Possible unsafe locking scenario:
    [   52.642518] c1        CPU0                    CPU1
    [   52.642520] c1        ----                    ----
    [   52.642525] c0   lock(ffs_lock);
    [   52.642529] c0                                lock(udc_lock);
    [   52.642533] c0                                lock(ffs_lock);
    [   52.642537] c0   lock(udc_lock);
    [   52.642539] c1
                          *** DEADLOCK ***
    [   52.642543] c1 1 lock held by usb ffs open/2808:
    [   52.642555] c0  #0:  (ffs_lock){+.+.+.}, at: [<ffffffc00066b244>]
                    ffs_data_clear+0x30/0x140
    [   52.642557] c1 stack backtrace:
    [   52.642563] c1 CPU: 1 PID: 2808 Comm: usb ffs open Tainted: G
    [   52.642565] c1 Hardware name: Spreadtrum SP9860g Board (DT)
    [   52.642568] c1 Call trace:
    [   52.642573] c1 [<ffffffc00008b430>] dump_backtrace+0x0/0x170
    [   52.642577] c1 [<ffffffc00008b5c0>] show_stack+0x20/0x28
    [   52.642583] c1 [<ffffffc000422694>] dump_stack+0xa8/0xe0
    [   52.642587] c1 [<ffffffc00011e548>] print_circular_bug+0x1fc/0x2e4
    [   52.642591] c1 [<ffffffc000123454>] __lock_acquire+0x2138/0x2238
    [   52.642595] c1 [<ffffffc000123b54>] lock_acquire+0xe4/0x298
    [   52.642599] c1 [<ffffffc000aaf6e8>] mutex_lock_nested+0x7c/0x3cc
    [   52.642604] c1 [<ffffffc00065aeec>] usb_gadget_unregister_driver+0x3c/0xc8
    [   52.642608] c1 [<ffffffc00065995c>] unregister_gadget_item+0x28/0x44
    [   52.642613] c1 [<ffffffc00066b34c>] ffs_data_clear+0x138/0x140
    [   52.642618] c1 [<ffffffc00066b374>] ffs_data_reset+0x20/0x6c
    [   52.642621] c1 [<ffffffc00066efd0>] ffs_data_closed+0xac/0x12c
    [   52.642625] c1 [<ffffffc00066f070>] ffs_ep0_release+0x20/0x2c
    [   52.642629] c1 [<ffffffc00023dbe4>] __fput+0xb0/0x1f4
    [   52.642633] c1 [<ffffffc00023dd9c>] ____fput+0x20/0x2c
    [   52.642636] c1 [<ffffffc0000ee944>] task_work_run+0xb4/0xe8
    [   52.642640] c1 [<ffffffc0000cd45c>] do_exit+0x360/0xb9c
    [   52.642644] c1 [<ffffffc0000cf228>] do_group_exit+0x4c/0xb0
    [   52.642647] c1 [<ffffffc0000dd3c8>] get_signal+0x380/0x89c
    [   52.642651] c1 [<ffffffc00008a8f0>] do_signal+0x154/0x518
    [   52.642656] c1 [<ffffffc00008af00>] do_notify_resume+0x70/0x78
    [   52.642659] c1 [<ffffffc000085ee8>] work_pending+0x1c/0x20
    
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Cc: Jerry Zhang <zhangjerry@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c477c689c2a305a9bf073605cc0d839665443f5a
Author: Deepak Rawat <drawat@vmware.com>
Date:   Mon Jun 26 14:39:08 2017 +0200

    drm/vmwgfx: Free hash table allocated by cmdbuf managed res mgr
    
    commit 82fcee526ba8ca2c5d378bdf51b21b7eb058fe3a upstream.
    
    The hash table created during vmw_cmdbuf_res_man_create was
    never freed. This causes memory leak in context creation.
    Added the corresponding drm_ht_remove in vmw_cmdbuf_res_man_destroy.
    
    Tested for memory leak by running piglit overnight and kernel
    memory is not inflated which earlier was.
    
    Signed-off-by: Deepak Rawat <drawat@vmware.com>
    Reviewed-by: Sinclair Yeh <syeh@vmware.com>
    Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19ef1f1ddbec65a0ba062af41d06d8ddac3804b5
Author: Hui Wang <hui.wang@canonical.com>
Date:   Wed Jun 28 08:59:16 2017 +0800

    ALSA: hda - set input_path bitmap to zero after moving it to new place
    
    commit a8f20fd25bdce81a8e41767c39f456d346b63427 upstream.
    
    Recently we met a problem, the codec has valid adcs and input pins,
    and they can form valid input paths, but the driver does not build
    valid controls for them like "Mic boost", "Capture Volume" and
    "Capture Switch".
    
    Through debugging, I found the driver needs to shrink the invalid
    adcs and input paths for this machine, so it will move the whole
    column bitmap value to the previous column, after moving it, the
    driver forgets to set the original column bitmap value to zero, as a
    result, the driver will invalidate the path whose index value is the
    original colume bitmap value. After executing this function, all
    valid input paths are invalidated by a mistake, there are no any
    valid input paths, so the driver won't build controls for them.
    
    Fixes: 3a65bcdc577a ("ALSA: hda - Fix inconsistent input_paths after ADC reduction")
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2e940eb98ee64eab4c400b0cd1f0b488a7c5f12
Author: Paul Burton <paulburton@kernel.org>
Date:   Fri Mar 3 15:26:05 2017 -0800

    MIPS: Fix IRQ tracing & lockdep when rescheduling
    
    commit d8550860d910c6b7b70f830f59003b33daaa52c9 upstream.
    
    When the scheduler sets TIF_NEED_RESCHED & we call into the scheduler
    from arch/mips/kernel/entry.S we disable interrupts. This is true
    regardless of whether we reach work_resched from syscall_exit_work,
    resume_userspace or by looping after calling schedule(). Although we
    disable interrupts in these paths we don't call trace_hardirqs_off()
    before calling into C code which may acquire locks, and we therefore
    leave lockdep with an inconsistent view of whether interrupts are
    disabled or not when CONFIG_PROVE_LOCKING & CONFIG_DEBUG_LOCKDEP are
    both enabled.
    
    Without tracing this interrupt state lockdep will print warnings such
    as the following once a task returns from a syscall via
    syscall_exit_partial with TIF_NEED_RESCHED set:
    
    [   49.927678] ------------[ cut here ]------------
    [   49.934445] WARNING: CPU: 0 PID: 1 at kernel/locking/lockdep.c:3687 check_flags.part.41+0x1dc/0x1e8
    [   49.946031] DEBUG_LOCKS_WARN_ON(current->hardirqs_enabled)
    [   49.946355] CPU: 0 PID: 1 Comm: init Not tainted 4.10.0-00439-gc9fd5d362289-dirty #197
    [   49.963505] Stack : 0000000000000000 ffffffff81bb5d6a 0000000000000006 ffffffff801ce9c4
    [   49.974431]         0000000000000000 0000000000000000 0000000000000000 000000000000004a
    [   49.985300]         ffffffff80b7e487 ffffffff80a24498 a8000000ff160000 ffffffff80ede8b8
    [   49.996194]         0000000000000001 0000000000000000 0000000000000000 0000000077c8030c
    [   50.007063]         000000007fd8a510 ffffffff801cd45c 0000000000000000 a8000000ff127c88
    [   50.017945]         0000000000000000 ffffffff801cf928 0000000000000001 ffffffff80a24498
    [   50.028827]         0000000000000000 0000000000000001 0000000000000000 0000000000000000
    [   50.039688]         0000000000000000 a8000000ff127bd0 0000000000000000 ffffffff805509bc
    [   50.050575]         00000000140084e0 0000000000000000 0000000000000000 0000000000040a00
    [   50.061448]         0000000000000000 ffffffff8010e1b0 0000000000000000 ffffffff805509bc
    [   50.072327]         ...
    [   50.076087] Call Trace:
    [   50.079869] [<ffffffff8010e1b0>] show_stack+0x80/0xa8
    [   50.086577] [<ffffffff805509bc>] dump_stack+0x10c/0x190
    [   50.093498] [<ffffffff8015dde0>] __warn+0xf0/0x108
    [   50.099889] [<ffffffff8015de34>] warn_slowpath_fmt+0x3c/0x48
    [   50.107241] [<ffffffff801c15b4>] check_flags.part.41+0x1dc/0x1e8
    [   50.114961] [<ffffffff801c239c>] lock_is_held_type+0x8c/0xb0
    [   50.122291] [<ffffffff809461b8>] __schedule+0x8c0/0x10f8
    [   50.129221] [<ffffffff80946a60>] schedule+0x30/0x98
    [   50.135659] [<ffffffff80106278>] work_resched+0x8/0x34
    [   50.142397] ---[ end trace 0cb4f6ef5b99fe21 ]---
    [   50.148405] possible reason: unannotated irqs-off.
    [   50.154600] irq event stamp: 400463
    [   50.159566] hardirqs last  enabled at (400463): [<ffffffff8094edc8>] _raw_spin_unlock_irqrestore+0x40/0xa8
    [   50.171981] hardirqs last disabled at (400462): [<ffffffff8094eb98>] _raw_spin_lock_irqsave+0x30/0xb0
    [   50.183897] softirqs last  enabled at (400450): [<ffffffff8016580c>] __do_softirq+0x4ac/0x6a8
    [   50.195015] softirqs last disabled at (400425): [<ffffffff80165e78>] irq_exit+0x110/0x128
    
    Fix this by using the TRACE_IRQS_OFF macro to call trace_hardirqs_off()
    when CONFIG_TRACE_IRQFLAGS is enabled. This is done before invoking
    schedule() following the work_resched label because:
    
     1) Interrupts are disabled regardless of the path we take to reach
        work_resched() & schedule().
    
     2) Performing the tracing here avoids the need to do it in paths which
        disable interrupts but don't call out to C code before hitting a
        path which uses the RESTORE_SOME macro that will call
        trace_hardirqs_on() or trace_hardirqs_off() as appropriate.
    
    We call trace_hardirqs_on() using the TRACE_IRQS_ON macro before calling
    syscall_trace_leave() for similar reasons, ensuring that lockdep has a
    consistent view of state after we re-enable interrupts.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/15385/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1365016fc8d5d2b0e69a56815247bdc28d244f97
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu Mar 2 14:02:40 2017 -0800

    MIPS: pm-cps: Drop manual cache-line alignment of ready_count
    
    commit 161c51ccb7a6faf45ffe09aa5cf1ad85ccdad503 upstream.
    
    We allocate memory for a ready_count variable per-CPU, which is accessed
    via a cached non-coherent TLB mapping to perform synchronisation between
    threads within the core using LL/SC instructions. In order to ensure
    that the variable is contained within its own data cache line we
    allocate 2 lines worth of memory & align the resulting pointer to a line
    boundary. This is however unnecessary, since kmalloc is guaranteed to
    return memory which is at least cache-line aligned (see
    ARCH_DMA_MINALIGN). Stop the redundant manual alignment.
    
    Besides cleaning up the code & avoiding needless work, this has the side
    effect of avoiding an arithmetic error found by Bryan on 64 bit systems
    due to the 32 bit size of the former dlinesz. This led the ready_count
    variable to have its upper 32b cleared erroneously for MIPS64 kernels,
    causing problems when ready_count was later used on MIPS64 via cpuidle.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Fixes: 3179d37ee1ed ("MIPS: pm-cps: add PM state entry code for CPS systems")
    Reported-by: Bryan O'Donoghue <bryan.odonoghue@imgtec.com>
    Reviewed-by: Bryan O'Donoghue <bryan.odonoghue@imgtec.com>
    Tested-by: Bryan O'Donoghue <bryan.odonoghue@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/15383/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9c5c35be50c728da7e377fa92973cdcb3a69a86
Author: James Hogan <jhogan@kernel.org>
Date:   Thu Jun 29 15:05:04 2017 +0100

    MIPS: Avoid accidental raw backtrace
    
    commit 854236363370995a609a10b03e35fd3dc5e9e4a1 upstream.
    
    Since commit 81a76d7119f6 ("MIPS: Avoid using unwind_stack() with
    usermode") show_backtrace() invokes the raw backtracer when
    cp0_status & ST0_KSU indicates user mode to fix issues on EVA kernels
    where user and kernel address spaces overlap.
    
    However this is used by show_stack() which creates its own pt_regs on
    the stack and leaves cp0_status uninitialised in most of the code paths.
    This results in the non deterministic use of the raw back tracer
    depending on the previous stack content.
    
    show_stack() deals exclusively with kernel mode stacks anyway, so
    explicitly initialise regs.cp0_status to KSU_KERNEL (i.e. 0) to ensure
    we get a useful backtrace.
    
    Fixes: 81a76d7119f6 ("MIPS: Avoid using unwind_stack() with usermode")
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/16656/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d87bf7c951d5822233142962493fb5cee7cabbd
Author: Julien Grall <julien.grall@arm.com>
Date:   Tue May 10 15:40:31 2016 +0100

    arm64: cpuinfo: Missing NULL terminator in compat_hwcap_str
    
    commit f228b494e56d949be8d8ea09d4f973d1979201bf upstream.
    
    The loop that browses the array compat_hwcap_str will stop when a NULL
    is encountered, however NULL is missing at the end of array. This will
    lead to overrun until a NULL is found somewhere in the following memory.
    In reality, this works out because the compat_hwcap2_str array tends to
    follow immediately in memory, and that *is* terminated correctly.
    Furthermore, the unsigned int compat_elf_hwcap is checked before
    printing each capability, so we end up doing the right thing because
    the size of the two arrays is less than 32. Still, this is an obvious
    mistake and should be fixed.
    
    Note for backporting: commit 12d11817eaafa414 ("arm64: Move
    /proc/cpuinfo handling code") moved this code in v4.4. Prior to that
    commit, the same change should be made in arch/arm64/kernel/setup.c.
    
    Fixes: 44b82b7700d0 "arm64: Fix up /proc/cpuinfo"
    Signed-off-by: Julien Grall <julien.grall@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3930a4178b27ed27d28be4268e813fde2c12f950
Author: Gao Feng <gfree.wind@vip.163.com>
Date:   Fri Jun 16 15:00:02 2017 +0800

    net: 8021q: Fix one possible panic caused by BUG_ON in free_netdev
    
    
    [ Upstream commit 9745e362add89432d2c951272a99b0a5fe4348a9 ]
    
    The register_vlan_device would invoke free_netdev directly, when
    register_vlan_dev failed. It would trigger the BUG_ON in free_netdev
    if the dev was already registered. In this case, the netdev would be
    freed in netdev_run_todo later.
    
    So add one condition check now. Only when dev is not registered, then
    free it directly.
    
    The following is the part coredump when netdev_upper_dev_link failed
    in register_vlan_dev. I removed the lines which are too long.
    
    [  411.237457] ------------[ cut here ]------------
    [  411.237458] kernel BUG at net/core/dev.c:7998!
    [  411.237484] invalid opcode: 0000 [#1] SMP
    [  411.237705]  [last unloaded: 8021q]
    [  411.237718] CPU: 1 PID: 12845 Comm: vconfig Tainted: G            E   4.12.0-rc5+ #6
    [  411.237737] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/02/2015
    [  411.237764] task: ffff9cbeb6685580 task.stack: ffffa7d2807d8000
    [  411.237782] RIP: 0010:free_netdev+0x116/0x120
    [  411.237794] RSP: 0018:ffffa7d2807dbdb0 EFLAGS: 00010297
    [  411.237808] RAX: 0000000000000002 RBX: ffff9cbeb6ba8fd8 RCX: 0000000000001878
    [  411.237826] RDX: 0000000000000001 RSI: 0000000000000282 RDI: 0000000000000000
    [  411.237844] RBP: ffffa7d2807dbdc8 R08: 0002986100029841 R09: 0002982100029801
    [  411.237861] R10: 0004000100029980 R11: 0004000100029980 R12: ffff9cbeb6ba9000
    [  411.238761] R13: ffff9cbeb6ba9060 R14: ffff9cbe60f1a000 R15: ffff9cbeb6ba9000
    [  411.239518] FS:  00007fb690d81700(0000) GS:ffff9cbebb640000(0000) knlGS:0000000000000000
    [  411.239949] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  411.240454] CR2: 00007f7115624000 CR3: 0000000077cdf000 CR4: 00000000003406e0
    [  411.240936] Call Trace:
    [  411.241462]  vlan_ioctl_handler+0x3f1/0x400 [8021q]
    [  411.241910]  sock_ioctl+0x18b/0x2c0
    [  411.242394]  do_vfs_ioctl+0xa1/0x5d0
    [  411.242853]  ? sock_alloc_file+0xa6/0x130
    [  411.243465]  SyS_ioctl+0x79/0x90
    [  411.243900]  entry_SYSCALL_64_fastpath+0x1e/0xa9
    [  411.244425] RIP: 0033:0x7fb69089a357
    [  411.244863] RSP: 002b:00007ffcd04e0fc8 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
    [  411.245445] RAX: ffffffffffffffda RBX: 00007ffcd04e2884 RCX: 00007fb69089a357
    [  411.245903] RDX: 00007ffcd04e0fd0 RSI: 0000000000008983 RDI: 0000000000000003
    [  411.246527] RBP: 00007ffcd04e0fd0 R08: 0000000000000000 R09: 1999999999999999
    [  411.246976] R10: 000000000000053f R11: 0000000000000202 R12: 0000000000000004
    [  411.247414] R13: 00007ffcd04e1128 R14: 00007ffcd04e2888 R15: 0000000000000001
    [  411.249129] RIP: free_netdev+0x116/0x120 RSP: ffffa7d2807dbdb0
    
    Signed-off-by: Gao Feng <gfree.wind@vip.163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 316e55aa6a86a542716f9253a5d2e52fd8f205e2
Author: Wei Wang <weiwan@google.com>
Date:   Fri Jun 16 10:46:37 2017 -0700

    decnet: always not take dst->__refcnt when inserting dst into hash table
    
    
    [ Upstream commit 76371d2e3ad1f84426a30ebcd8c3b9b98f4c724f ]
    
    In the existing dn_route.c code, dn_route_output_slow() takes
    dst->__refcnt before calling dn_insert_route() while dn_route_input_slow()
    does not take dst->__refcnt before calling dn_insert_route().
    This makes the whole routing code very buggy.
    In dn_dst_check_expire(), dnrt_free() is called when rt expires. This
    makes the routes inserted by dn_route_output_slow() not able to be
    freed as the refcnt is not released.
    In dn_dst_gc(), dnrt_drop() is called to release rt which could
    potentially cause the dst->__refcnt to be dropped to -1.
    In dn_run_flush(), dst_free() is called to release all the dst. Again,
    it makes the dst inserted by dn_route_output_slow() not able to be
    released and also, it does not wait on the rcu and could potentially
    cause crash in the path where other users still refer to this dst.
    
    This patch makes sure both input and output path do not take
    dst->__refcnt before calling dn_insert_route() and also makes sure
    dnrt_free()/dst_free() is called when removing dst from the hash table.
    The only difference between those 2 calls is that dnrt_free() waits on
    the rcu while dst_free() does not.
    
    Signed-off-by: Wei Wang <weiwan@google.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00e3255944fab8c61edc23fab1d7a55985806c7b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 15 16:33:58 2017 +0800

    ipv6: fix calling in6_ifa_hold incorrectly for dad work
    
    
    [ Upstream commit f8a894b218138888542a5058d0e902378fd0d4ec ]
    
    Now when starting the dad work in addrconf_mod_dad_work, if the dad work
    is idle and queued, it needs to hold ifa.
    
    The problem is there's one gap in [1], during which if the pending dad work
    is removed elsewhere. It will miss to hold ifa, but the dad word is still
    idea and queue.
    
            if (!delayed_work_pending(&ifp->dad_work))
                    in6_ifa_hold(ifp);
                        <--------------[1]
            mod_delayed_work(addrconf_wq, &ifp->dad_work, delay);
    
    An use-after-free issue can be caused by this.
    
    Chen Wei found this issue when WARN_ON(!hlist_unhashed(&ifp->addr_lst)) in
    net6_ifa_finish_destroy was hit because of it.
    
    As Hannes' suggestion, this patch is to fix it by holding ifa first in
    addrconf_mod_dad_work, then calling mod_delayed_work and putting ifa if
    the dad_work is already in queue.
    
    Note that this patch did not choose to fix it with:
    
      if (!mod_delayed_work(delay))
              in6_ifa_hold(ifp);
    
    As with it, when delay == 0, dad_work would be scheduled immediately, all
    addrconf_mod_dad_work(0) callings had to be moved under ifp->lock.
    
    Reported-by: Wei Chen <weichen@redhat.com>
    Suggested-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3fa173e22f9a1dd6d2418b4fbf9df3e7f7d9d96
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Jun 20 10:46:27 2017 -0700

    igmp: add a missing spin_lock_init()
    
    
    [ Upstream commit b4846fc3c8559649277e3e4e6b5cec5348a8d208 ]
    
    Andrey reported a lockdep warning on non-initialized
    spinlock:
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
     CPU: 1 PID: 4099 Comm: a.out Not tainted 4.12.0-rc6+ #9
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
     Call Trace:
      __dump_stack lib/dump_stack.c:16
      dump_stack+0x292/0x395 lib/dump_stack.c:52
      register_lock_class+0x717/0x1aa0 kernel/locking/lockdep.c:755
      ? 0xffffffffa0000000
      __lock_acquire+0x269/0x3690 kernel/locking/lockdep.c:3255
      lock_acquire+0x22d/0x560 kernel/locking/lockdep.c:3855
      __raw_spin_lock_bh ./include/linux/spinlock_api_smp.h:135
      _raw_spin_lock_bh+0x36/0x50 kernel/locking/spinlock.c:175
      spin_lock_bh ./include/linux/spinlock.h:304
      ip_mc_clear_src+0x27/0x1e0 net/ipv4/igmp.c:2076
      igmpv3_clear_delrec+0xee/0x4f0 net/ipv4/igmp.c:1194
      ip_mc_destroy_dev+0x4e/0x190 net/ipv4/igmp.c:1736
    
    We miss a spin_lock_init() in igmpv3_add_delrec(), probably
    because previously we never use it on this code path. Since
    we already unlink it from the global mc_tomb list, it is
    probably safe not to acquire this spinlock here. It does not
    harm to have it although, to avoid conditional locking.
    
    Fixes: c38b7d327aaf ("igmp: acquire pmc lock for ip_mc_clear_src()")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f8e1d058185cb0c337d89d7e64fa952690fb2d2
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Mon Jun 12 09:52:26 2017 -0700

    igmp: acquire pmc lock for ip_mc_clear_src()
    
    
    [ Upstream commit c38b7d327aafd1e3ad7ff53eefac990673b65667 ]
    
    Andrey reported a use-after-free in add_grec():
    
            for (psf = *psf_list; psf; psf = psf_next) {
                    ...
                    psf_next = psf->sf_next;
    
    where the struct ip_sf_list's were already freed by:
    
     kfree+0xe8/0x2b0 mm/slub.c:3882
     ip_mc_clear_src+0x69/0x1c0 net/ipv4/igmp.c:2078
     ip_mc_dec_group+0x19a/0x470 net/ipv4/igmp.c:1618
     ip_mc_drop_socket+0x145/0x230 net/ipv4/igmp.c:2609
     inet_release+0x4e/0x1c0 net/ipv4/af_inet.c:411
     sock_release+0x8d/0x1e0 net/socket.c:597
     sock_close+0x16/0x20 net/socket.c:1072
    
    This happens because we don't hold pmc->lock in ip_mc_clear_src()
    and a parallel mr_ifc_timer timer could jump in and access them.
    
    The RCU lock is there but it is merely for pmc itself, this
    spinlock could actually ensure we don't access them in parallel.
    
    Thanks to Eric and Long for discussion on this bug.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1f1dea936e32f666eeb649b33ca3c6e78ccafa4
Author: Jia-Ju Bai <baijiaju1990@163.com>
Date:   Sat Jun 10 16:49:39 2017 +0800

    net: caif: Fix a sleep-in-atomic bug in cfpkt_create_pfx
    
    
    [ Upstream commit f146e872eb12ebbe92d8e583b2637e0741440db3 ]
    
    The kernel may sleep under a rcu read lock in cfpkt_create_pfx, and the
    function call path is:
    cfcnfg_linkup_rsp (acquire the lock by rcu_read_lock)
      cfctrl_linkdown_req
        cfpkt_create
          cfpkt_create_pfx
            alloc_skb(GFP_KERNEL) --> may sleep
    cfserl_receive (acquire the lock by rcu_read_lock)
      cfpkt_split
        cfpkt_create_pfx
          alloc_skb(GFP_KERNEL) --> may sleep
    
    There is "in_interrupt" in cfpkt_create_pfx to decide use "GFP_KERNEL" or
    "GFP_ATOMIC". In this situation, "GFP_KERNEL" is used because the function
    is called under a rcu read lock, instead in interrupt.
    
    To fix it, only "GFP_ATOMIC" is used in cfpkt_create_pfx.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 721ee8db1db0da9924d4d314f2629695cee835b0
Author: Krister Johansen <kjlx@templeofstupid.com>
Date:   Thu Jun 8 13:12:38 2017 -0700

    Fix an intermittent pr_emerg warning about lo becoming free.
    
    
    [ Upstream commit f186ce61bb8235d80068c390dc2aad7ca427a4c2 ]
    
    It looks like this:
    
    Message from syslogd@flamingo at Apr 26 00:45:00 ...
     kernel:unregister_netdevice: waiting for lo to become free. Usage count = 4
    
    They seem to coincide with net namespace teardown.
    
    The message is emitted by netdev_wait_allrefs().
    
    Forced a kdump in netdev_run_todo, but found that the refcount on the lo
    device was already 0 at the time we got to the panic.
    
    Used bcc to check the blocking in netdev_run_todo.  The only places
    where we're off cpu there are in the rcu_barrier() and msleep() calls.
    That behavior is expected.  The msleep time coincides with the amount of
    time we spend waiting for the refcount to reach zero; the rcu_barrier()
    wait times are not excessive.
    
    After looking through the list of callbacks that the netdevice notifiers
    invoke in this path, it appears that the dst_dev_event is the most
    interesting.  The dst_ifdown path places a hold on the loopback_dev as
    part of releasing the dev associated with the original dst cache entry.
    Most of our notifier callbacks are straight-forward, but this one a)
    looks complex, and b) places a hold on the network interface in
    question.
    
    I constructed a new bcc script that watches various events in the
    liftime of a dst cache entry.  Note that dst_ifdown will take a hold on
    the loopback device until the invalidated dst entry gets freed.
    
    [      __dst_free] on DST: ffff883ccabb7900 IF tap1008300eth0 invoked at 1282115677036183
        __dst_free
        rcu_nocb_kthread
        kthread
        ret_from_fork
    Acked-by: Eric Dumazet <edumazet@google.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80f5fba8d14d799108395d49317c5b57615b6c73
Author: Mateusz Jurczyk <mjurczyk@google.com>
Date:   Wed Jun 7 16:14:29 2017 +0200

    decnet: dn_rtmsg: Improve input length sanitization in dnrmg_receive_user_skb
    
    
    [ Upstream commit dd0da17b209ed91f39872766634ca967c170ada1 ]
    
    Verify that the length of the socket buffer is sufficient to cover the
    nlmsghdr structure before accessing the nlh->nlmsg_len field for further
    input sanitization. If the client only supplies 1-3 bytes of data in
    sk_buff, then nlh->nlmsg_len remains partially uninitialized and
    contains leftover memory from the corresponding kernel allocation.
    Operating on such data may result in indeterminate evaluation of the
    nlmsg_len < sizeof(*nlh) expression.
    
    The bug was discovered by a runtime instrumentation designed to detect
    use of uninitialized memory in the kernel. The patch prevents this and
    other similar tools (e.g. KMSAN) from flagging this behavior in the future.
    
    Signed-off-by: Mateusz Jurczyk <mjurczyk@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d487bc50728828ce0f6d817f2c4f8203568c1c8
Author: Alexander Potapenko <glider@google.com>
Date:   Tue Jun 6 15:56:54 2017 +0200

    net: don't call strlen on non-terminated string in dev_set_alias()
    
    
    [ Upstream commit c28294b941232931fbd714099798eb7aa7e865d7 ]
    
    KMSAN reported a use of uninitialized memory in dev_set_alias(),
    which was caused by calling strlcpy() (which in turn called strlen())
    on the user-supplied non-terminated string.
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc818ce51c50ecc3f2157172c5aa1f9e43d9b691
Author: Eric Leblond <eric@regit.org>
Date:   Thu May 11 18:56:38 2017 +0200

    netfilter: synproxy: fix conntrackd interaction
    
    commit 87e94dbc210a720a34be5c1174faee5c84be963e upstream.
    
    This patch fixes the creation of connection tracking entry from
    netlink when synproxy is used. It was missing the addition of
    the synproxy extension.
    
    This was causing kernel crashes when a conntrack entry created by
    conntrackd was used after the switch of traffic from active node
    to the passive node.
    
    Signed-off-by: Eric Leblond <eric@regit.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4549a698a531c0014c62e40e521ffa030cf31e0
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 3 10:55:11 2017 -0700

    netfilter: xt_TCPMSS: add more sanity tests on tcph->doff
    
    commit 2638fd0f92d4397884fd991d8f4925cb3f081901 upstream.
    
    Denys provided an awesome KASAN report pointing to an use
    after free in xt_TCPMSS
    
    I have provided three patches to fix this issue, either in xt_TCPMSS or
    in xt_tcpudp.c. It seems xt_TCPMSS patch has the smallest possible
    impact.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Denys Fedoryshchenko <nuclearcat@nuclearcat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51ef22af9f8252c087baa7688c0f2a533d53cf42
Author: Willem de Bruijn <willemb@google.com>
Date:   Sat Feb 18 19:00:45 2017 -0500

    ipv6: release dst on error in ip6_dst_lookup_tail
    
    commit 00ea1ceebe0d9f2dc1cc2b7bd575a00100c27869 upstream.
    
    If ip6_dst_lookup_tail has acquired a dst and fails the IPv4-mapped
    check, release the dst before returning an error.
    
    Fixes: ec5e3b0a1d41 ("ipv6: Inhibit IPv4-mapped src address on the wire.")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit daa5d1f0bffe48fba572209b18c05244eef264a5
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Wed Jan 11 17:10:34 2017 +0200

    xhci: fix deadlock at host remove by running watchdog correctly
    
    commit d6169d04097fd9ddf811e63eae4e5cd71e6666e2 upstream.
    
    If a URB is killed while the host is removed we can end up in a situation
    where the hub thread takes the roothub device lock, and waits for
    the URB to be given back by xhci-hcd, blocking the host remove code.
    
    xhci-hcd tries to stop the endpoint and give back the urb, but can't
    as the host is removed from PCI bus at the same time, preventing the normal
    way of giving back urb.
    
    Instead we need to rely on the stop command timeout function to give back
    the urb. This xhci_stop_endpoint_command_watchdog() timeout function
    used a XHCI_STATE_DYING flag to indicate if the timeout function is already
    running, but later this flag has been taking into use in other places to
    mark that xhci is dying.
    
    Remove checks for XHCI_STATE_DYING in xhci_urb_dequeue. We are still
    checking that reading from pci state does not return 0xffffffff or that
    host is not halted before trying to stop the endpoint.
    
    This whole area of stopping endpoints, giving back URBs, and the wathdog
    timeout need rework, this fix focuses on solving a specific deadlock
    issue that we can then send to stable before any major rework.
    
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Howard Yen <howard_yen@htc.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
