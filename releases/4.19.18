commit 34ae657246154f095288059157e722ccf69f3b63
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 26 09:32:45 2019 +0100

    Linux 4.19.18

commit b40aec33eeb512b53edd1e0555aaaf4e3127e765
Author: Corey Minyard <cminyard@mvista.com>
Date:   Thu Dec 20 16:50:23 2018 -0600

    ipmi: Don't initialize anything in the core until something uses it
    
    commit 913a89f009d98c85a902d718cd54bb32ab11d167 upstream.
    
    The IPMI driver was recently modified to use SRCU, but it turns out
    this uses a chunk of percpu memory, even if IPMI is never used.
    
    So modify thing to on initialize on the first use.  There was already
    code to sort of handle this for handling init races, so piggy back
    on top of that, and simplify it in the process.
    
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Reported-by: Tejun Heo <tj@kernel.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Reviewed-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org # 4.18
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 031a94ff8ac4278198ff1df422c3d19202618256
Author: Corey Minyard <cminyard@mvista.com>
Date:   Fri Nov 16 09:59:21 2018 -0600

    ipmi:ssif: Fix handling of multi-part return messages
    
    commit 7d6380cd40f7993f75c4bde5b36f6019237e8719 upstream.
    
    The block number was not being compared right, it was off by one
    when checking the response.
    
    Some statistics wouldn't be incremented properly in some cases.
    
    Check to see if that middle-part messages always have 31 bytes of
    data.
    
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org # 4.4
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 821a003d8e81d1467b7c7a5eea5858549aca3ccf
Author: Fred Klassen <fklassen@appneta.com>
Date:   Sat Jan 19 14:28:18 2019 -0800

    ipmi: Prevent use-after-free in deliver_response
    
    commit 479d6b39b9e0d2de648ebf146f23a1e40962068f upstream.
    
    Some IPMI modules (e.g. ibmpex_msg_handler()) will have ipmi_usr_hdlr
    handlers that call ipmi_free_recv_msg() directly. This will essentially
    kfree(msg), leading to use-after-free.
    
    This does not happen in the ipmi_devintf module, which will queue the
    message and run ipmi_free_recv_msg() later.
    
    BUG: KASAN: use-after-free in deliver_response+0x12f/0x1b0
    Read of size 8 at addr ffff888a7bf20018 by task ksoftirqd/3/27
    CPU: 3 PID: 27 Comm: ksoftirqd/3 Tainted: G           O      4.19.11-amd64-ani99-debug #12.0.1.601133+pv
    Hardware name: AppNeta r1000/X11SPW-TF, BIOS 2.1a-AP 09/17/2018
    Call Trace:
    dump_stack+0x92/0xeb
    print_address_description+0x73/0x290
    kasan_report+0x258/0x380
    deliver_response+0x12f/0x1b0
    ? ipmi_free_recv_msg+0x50/0x50
    deliver_local_response+0xe/0x50
    handle_one_recv_msg+0x37a/0x21d0
    handle_new_recv_msgs+0x1ce/0x440
    ...
    
    Allocated by task 9885:
    kasan_kmalloc+0xa0/0xd0
    kmem_cache_alloc_trace+0x116/0x290
    ipmi_alloc_recv_msg+0x28/0x70
    i_ipmi_request+0xb4a/0x1640
    ipmi_request_settime+0x1b8/0x1e0
    ...
    
    Freed by task 27:
    __kasan_slab_free+0x12e/0x180
    kfree+0xe9/0x280
    deliver_response+0x122/0x1b0
    deliver_local_response+0xe/0x50
    handle_one_recv_msg+0x37a/0x21d0
    handle_new_recv_msgs+0x1ce/0x440
    tasklet_action_common.isra.19+0xc4/0x250
    __do_softirq+0x11f/0x51f
    
    Fixes: e86ee2d44b44 ("ipmi: Rework locking and shutdown for hot remove")
    Cc: stable@vger.kernel.org # 4.18
    Signed-off-by: Fred Klassen <fklassen@appneta.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 753abe2a63398267abeed0e358181865eae5976b
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Jan 9 17:39:06 2019 -0600

    ipmi: msghandler: Fix potential Spectre v1 vulnerabilities
    
    commit a7102c7461794a5bb31af24b08e9e0f50038897a upstream.
    
    channel and addr->channel are indirectly controlled by user-space,
    hence leading to a potential exploitation of the Spectre variant 1
    vulnerability.
    
    These issues were detected with the help of Smatch:
    
    drivers/char/ipmi/ipmi_msghandler.c:1381 ipmi_set_my_address() warn: potential spectre issue 'user->intf->addrinfo' [w] (local cap)
    drivers/char/ipmi/ipmi_msghandler.c:1401 ipmi_get_my_address() warn: potential spectre issue 'user->intf->addrinfo' [r] (local cap)
    drivers/char/ipmi/ipmi_msghandler.c:1421 ipmi_set_my_LUN() warn: potential spectre issue 'user->intf->addrinfo' [w] (local cap)
    drivers/char/ipmi/ipmi_msghandler.c:1441 ipmi_get_my_LUN() warn: potential spectre issue 'user->intf->addrinfo' [r] (local cap)
    drivers/char/ipmi/ipmi_msghandler.c:2260 check_addr() warn: potential spectre issue 'intf->addrinfo' [r] (local cap)
    
    Fix this by sanitizing channel and addr->channel before using them to
    index user->intf->addrinfo and intf->addrinfo, correspondingly.
    
    Notice that given that speculation windows are large, the policy is
    to kill the speculation on the first load and not worry if it can be
    completed with a dependent load/store [1].
    
    [1] https://lore.kernel.org/lkml/20180423164740.GY17484@dhcp22.suse.cz/
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c393ca118cfaf36c95270b9bed295bba109fafa
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Jan 16 13:33:22 2019 +0800

    ipmi: fix use-after-free of user->release_barrier.rda
    
    commit 77f8269606bf95fcb232ee86f6da80886f1dfae8 upstream.
    
    When we do the following test, we got oops in ipmi_msghandler driver
    while((1))
    do
            service ipmievd restart & service ipmievd restart
    done
    
    ---------------------------------------------------------------
    [  294.230186] Unable to handle kernel paging request at virtual address 0000803fea6ea008
    [  294.230188] Mem abort info:
    [  294.230190]   ESR = 0x96000004
    [  294.230191]   Exception class = DABT (current EL), IL = 32 bits
    [  294.230193]   SET = 0, FnV = 0
    [  294.230194]   EA = 0, S1PTW = 0
    [  294.230195] Data abort info:
    [  294.230196]   ISV = 0, ISS = 0x00000004
    [  294.230197]   CM = 0, WnR = 0
    [  294.230199] user pgtable: 4k pages, 48-bit VAs, pgdp = 00000000a1c1b75a
    [  294.230201] [0000803fea6ea008] pgd=0000000000000000
    [  294.230204] Internal error: Oops: 96000004 [#1] SMP
    [  294.235211] Modules linked in: nls_utf8 isofs rpcrdma ib_iser ib_srpt target_core_mod ib_srp scsi_transport_srp ib_ipoib rdma_ucm ib_umad rdma_cm ib_cm iw_cm dm_mirror dm_region_hash dm_log dm_mod aes_ce_blk crypto_simd cryptd aes_ce_cipher ghash_ce sha2_ce ses sha256_arm64 sha1_ce hibmc_drm hisi_sas_v2_hw enclosure sg hisi_sas_main sbsa_gwdt ip_tables mlx5_ib ib_uverbs marvell ib_core mlx5_core ixgbe ipmi_si mdio hns_dsaf ipmi_devintf ipmi_msghandler hns_enet_drv hns_mdio
    [  294.277745] CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Not tainted 5.0.0-rc2+ #113
    [  294.285511] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.37 11/21/2017
    [  294.292835] pstate: 80000005 (Nzcv daif -PAN -UAO)
    [  294.297695] pc : __srcu_read_lock+0x38/0x58
    [  294.301940] lr : acquire_ipmi_user+0x2c/0x70 [ipmi_msghandler]
    [  294.307853] sp : ffff00001001bc80
    [  294.311208] x29: ffff00001001bc80 x28: ffff0000117e5000
    [  294.316594] x27: 0000000000000000 x26: dead000000000100
    [  294.321980] x25: dead000000000200 x24: ffff803f6bd06800
    [  294.327366] x23: 0000000000000000 x22: 0000000000000000
    [  294.332752] x21: ffff00001001bd04 x20: ffff80df33d19018
    [  294.338137] x19: ffff80df33d19018 x18: 0000000000000000
    [  294.343523] x17: 0000000000000000 x16: 0000000000000000
    [  294.348908] x15: 0000000000000000 x14: 0000000000000002
    [  294.354293] x13: 0000000000000000 x12: 0000000000000000
    [  294.359679] x11: 0000000000000000 x10: 0000000000100000
    [  294.365065] x9 : 0000000000000000 x8 : 0000000000000004
    [  294.370451] x7 : 0000000000000000 x6 : ffff80df34558678
    [  294.375836] x5 : 000000000000000c x4 : 0000000000000000
    [  294.381221] x3 : 0000000000000001 x2 : 0000803fea6ea000
    [  294.386607] x1 : 0000803fea6ea008 x0 : 0000000000000001
    [  294.391994] Process swapper/3 (pid: 0, stack limit = 0x0000000083087293)
    [  294.398791] Call trace:
    [  294.401266]  __srcu_read_lock+0x38/0x58
    [  294.405154]  acquire_ipmi_user+0x2c/0x70 [ipmi_msghandler]
    [  294.410716]  deliver_response+0x80/0xf8 [ipmi_msghandler]
    [  294.416189]  deliver_local_response+0x28/0x68 [ipmi_msghandler]
    [  294.422193]  handle_one_recv_msg+0x158/0xcf8 [ipmi_msghandler]
    [  294.432050]  handle_new_recv_msgs+0xc0/0x210 [ipmi_msghandler]
    [  294.441984]  smi_recv_tasklet+0x8c/0x158 [ipmi_msghandler]
    [  294.451618]  tasklet_action_common.isra.5+0x88/0x138
    [  294.460661]  tasklet_action+0x2c/0x38
    [  294.468191]  __do_softirq+0x120/0x2f8
    [  294.475561]  irq_exit+0x134/0x140
    [  294.482445]  __handle_domain_irq+0x6c/0xc0
    [  294.489954]  gic_handle_irq+0xb8/0x178
    [  294.497037]  el1_irq+0xb0/0x140
    [  294.503381]  arch_cpu_idle+0x34/0x1a8
    [  294.510096]  do_idle+0x1d4/0x290
    [  294.516322]  cpu_startup_entry+0x28/0x30
    [  294.523230]  secondary_start_kernel+0x184/0x1d0
    [  294.530657] Code: d538d082 d2800023 8b010c81 8b020021 (c85f7c25)
    [  294.539746] ---[ end trace 8a7a880dee570b29 ]---
    [  294.547341] Kernel panic - not syncing: Fatal exception in interrupt
    [  294.556837] SMP: stopping secondary CPUs
    [  294.563996] Kernel Offset: disabled
    [  294.570515] CPU features: 0x002,21006008
    [  294.577638] Memory Limit: none
    [  294.587178] Starting crashdump kernel...
    [  294.594314] Bye!
    
    Because the user->release_barrier.rda is freed in ipmi_destroy_user(), but
    the refcount is not zero, when acquire_ipmi_user() uses user->release_barrier.rda
    in __srcu_read_lock(), it causes oops.
    Fix this by calling cleanup_srcu_struct() when the refcount is zero.
    
    Fixes: e86ee2d44b44 ("ipmi: Rework locking and shutdown for hot remove")
    Cc: stable@vger.kernel.org # 4.18
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7557895b3dda70aa17636da8310f5662448867ae
Author: Johan Hedberg <johan.hedberg@intel.com>
Date:   Tue Nov 27 11:37:46 2018 +0200

    Bluetooth: Fix unnecessary error message for HCI request completion
    
    commit 1629db9c75342325868243d6bca5853017d91cf8 upstream.
    
    In case a command which completes in Command Status was sent using the
    hci_cmd_send-family of APIs there would be a misleading error in the
    hci_get_cmd_complete function, since the code would be trying to fetch
    the Command Complete parameters when there are none.
    
    Avoid the misleading error and silently bail out from the function in
    case the received event is a command status.
    
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Acked-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Tested-by Adam Ford <aford173@gmail.com> #4.19.16
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9bcbcb7d77c92cc23e357285c097c89ee1776b0
Author: Avraham Stern <avraham.stern@intel.com>
Date:   Thu May 3 15:02:16 2018 +0300

    iwlwifi: mvm: Send LQ command as async when necessary
    
    commit 3baf7528d6f832b28622d1ddadd2e47f6c2b5e08 upstream.
    
    The parameter that indicated whether the LQ command should be sent
    as sync or async was removed, causing the LQ command to be sent as
    sync from interrupt context (e.g. from the RX path). This resulted
    in a kernel warning: "scheduling while atomic" and failing to send
    the LQ command, which ultimately leads to a queue hang.
    
    Fix it by adding back the required parameter to send the command as
    sync only when it is allowed.
    
    Fixes: d94c5a820d10 ("iwlwifi: mvm: open BA session only when sta is authorized")
    Signed-off-by: Avraham Stern <avraham.stern@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d73e773edc9b2af190c8a067cd24f282b30e6a8
Author: Michal Hocko <mhocko@suse.com>
Date:   Fri Dec 28 00:38:17 2018 -0800

    mm, proc: be more verbose about unstable VMA flags in /proc/<pid>/smaps
    
    [ Upstream commit 7550c6079846a24f30d15ac75a941c8515dbedfb ]
    
    Patch series "THP eligibility reporting via proc".
    
    This series of three patches aims at making THP eligibility reporting much
    more robust and long term sustainable.  The trigger for the change is a
    regression report [2] and the long follow up discussion.  In short the
    specific application didn't have good API to query whether a particular
    mapping can be backed by THP so it has used VMA flags to workaround that.
    These flags represent a deep internal state of VMAs and as such they
    should be used by userspace with a great deal of caution.
    
    A similar has happened for [3] when users complained that VM_MIXEDMAP is
    no longer set on DAX mappings.  Again a lack of a proper API led to an
    abuse.
    
    The first patch in the series tries to emphasise that that the semantic of
    flags might change and any application consuming those should be really
    careful.
    
    The remaining two patches provide a more suitable interface to address [2]
    and provide a consistent API to query the THP status both for each VMA and
    process wide as well.  [1]
    
    http://lkml.kernel.org/r/20181120103515.25280-1-mhocko@kernel.org [2]
    http://lkml.kernel.org/r/http://lkml.kernel.org/r/alpine.DEB.2.21.1809241054050.224429@chino.kir.corp.google.com
    [3] http://lkml.kernel.org/r/20181002100531.GC4135@quack2.suse.cz
    
    This patch (of 3):
    
    Even though vma flags exported via /proc/<pid>/smaps are explicitly
    documented to be not guaranteed for future compatibility the warning
    doesn't go far enough because it doesn't mention semantic changes to those
    flags.  And they are important as well because these flags are a deep
    implementation internal to the MM code and the semantic might change at
    any time.
    
    Let's consider two recent examples:
    http://lkml.kernel.org/r/20181002100531.GC4135@quack2.suse.cz
    : commit e1fb4a086495 "dax: remove VM_MIXEDMAP for fsdax and device dax" has
    : removed VM_MIXEDMAP flag from DAX VMAs. Now our testing shows that in the
    : mean time certain customer of ours started poking into /proc/<pid>/smaps
    : and looks at VMA flags there and if VM_MIXEDMAP is missing among the VMA
    : flags, the application just fails to start complaining that DAX support is
    : missing in the kernel.
    
    http://lkml.kernel.org/r/alpine.DEB.2.21.1809241054050.224429@chino.kir.corp.google.com
    : Commit 1860033237d4 ("mm: make PR_SET_THP_DISABLE immediately active")
    : introduced a regression in that userspace cannot always determine the set
    : of vmas where thp is ineligible.
    : Userspace relies on the "nh" flag being emitted as part of /proc/pid/smaps
    : to determine if a vma is eligible to be backed by hugepages.
    : Previous to this commit, prctl(PR_SET_THP_DISABLE, 1) would cause thp to
    : be disabled and emit "nh" as a flag for the corresponding vmas as part of
    : /proc/pid/smaps.  After the commit, thp is disabled by means of an mm
    : flag and "nh" is not emitted.
    : This causes smaps parsing libraries to assume a vma is eligible for thp
    : and ends up puzzling the user on why its memory is not backed by thp.
    
    In both cases userspace was relying on a semantic of a specific VMA flag.
    The primary reason why that happened is a lack of a proper interface.
    While this has been worked on and it will be fixed properly, it seems that
    our wording could see some refinement and be more vocal about semantic
    aspect of these flags as well.
    
    Link: http://lkml.kernel.org/r/20181211143641.3503-2-mhocko@kernel.org
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Jan Kara <jack@suse.cz>
    Acked-by: Dan Williams <dan.j.williams@intel.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Acked-by: Mike Rapoport <rppt@linux.ibm.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Paul Oppenheimer <bepvte@gmail.com>
    Cc: William Kucharski <william.kucharski@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2011eb74180356d56afa47c238b8861f8e45ecf6
Author: Peter Xu <peterx@redhat.com>
Date:   Fri Dec 28 00:38:47 2018 -0800

    userfaultfd: clear flag if remap event not enabled
    
    [ Upstream commit 3cfd22be0ad663248fadfc8f6ffa3e255c394552 ]
    
    When the process being tracked does mremap() without
    UFFD_FEATURE_EVENT_REMAP on the corresponding tracking uffd file handle,
    we should not generate the remap event, and at the same time we should
    clear all the uffd flags on the new VMA.  Without this patch, we can still
    have the VM_UFFD_MISSING|VM_UFFD_WP flags on the new VMA even the fault
    handling process does not even know the existance of the VMA.
    
    Link: http://lkml.kernel.org/r/20181211053409.20317-1-peterx@redhat.com
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Acked-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Reviewed-by: William Kucharski <william.kucharski@oracle.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Kirill A. Shutemov <kirill@shutemov.name>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Pavel Emelyanov <xemul@virtuozzo.com>
    Cc: Pravin Shedge <pravin.shedge4linux@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0cd52e644efa0f681d231cc6c412594897f7f2c
Author: Aaron Lu <aaron.lu@intel.com>
Date:   Fri Dec 28 00:34:39 2018 -0800

    mm/swap: use nr_node_ids for avail_lists in swap_info_struct
    
    [ Upstream commit 66f71da9dd38af17dc17209cdde7987d4679a699 ]
    
    Since a2468cc9bfdf ("swap: choose swap device according to numa node"),
    avail_lists field of swap_info_struct is changed to an array with
    MAX_NUMNODES elements.  This made swap_info_struct size increased to 40KiB
    and needs an order-4 page to hold it.
    
    This is not optimal in that:
    1 Most systems have way less than MAX_NUMNODES(1024) nodes so it
      is a waste of memory;
    2 It could cause swapon failure if the swap device is swapped on
      after system has been running for a while, due to no order-4
      page is available as pointed out by Vasily Averin.
    
    Solve the above two issues by using nr_node_ids(which is the actual
    possible node number the running system has) for avail_lists instead of
    MAX_NUMNODES.
    
    nr_node_ids is unknown at compile time so can't be directly used when
    declaring this array.  What I did here is to declare avail_lists as zero
    element array and allocate space for it when allocating space for
    swap_info_struct.  The reason why keep using array but not pointer is
    plist_for_each_entry needs the field to be part of the struct, so pointer
    will not work.
    
    This patch is on top of Vasily Averin's fix commit.  I think the use of
    kvzalloc for swap_info_struct is still needed in case nr_node_ids is
    really big on some systems.
    
    Link: http://lkml.kernel.org/r/20181115083847.GA11129@intel.com
    Signed-off-by: Aaron Lu <aaron.lu@intel.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Vasily Averin <vvs@virtuozzo.com>
    Cc: Huang Ying <ying.huang@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc15e3fd3fbeb84ea355453200c04785abac1bac
Author: Brian Foster <bfoster@redhat.com>
Date:   Fri Dec 28 00:37:20 2018 -0800

    mm/page-writeback.c: don't break integrity writeback on ->writepage() error
    
    [ Upstream commit 3fa750dcf29e8606e3969d13d8e188cc1c0f511d ]
    
    write_cache_pages() is used in both background and integrity writeback
    scenarios by various filesystems.  Background writeback is mostly
    concerned with cleaning a certain number of dirty pages based on various
    mm heuristics.  It may not write the full set of dirty pages or wait for
    I/O to complete.  Integrity writeback is responsible for persisting a set
    of dirty pages before the writeback job completes.  For example, an
    fsync() call must perform integrity writeback to ensure data is on disk
    before the call returns.
    
    write_cache_pages() unconditionally breaks out of its processing loop in
    the event of a ->writepage() error.  This is fine for background
    writeback, which had no strict requirements and will eventually come
    around again.  This can cause problems for integrity writeback on
    filesystems that might need to clean up state associated with failed page
    writeouts.  For example, XFS performs internal delayed allocation
    accounting before returning a ->writepage() error, where applicable.  If
    the current writeback happens to be associated with an unmount and
    write_cache_pages() completes the writeback prematurely due to error, the
    filesystem is unmounted in an inconsistent state if dirty+delalloc pages
    still exist.
    
    To handle this problem, update write_cache_pages() to always process the
    full set of pages for integrity writeback regardless of ->writepage()
    errors.  Save the first encountered error and return it to the caller once
    complete.  This facilitates XFS (or any other fs that expects integrity
    writeback to process the entire set of dirty pages) to clean up its
    internal state completely in the event of persistent mapping errors.
    Background writeback continues to exit on the first error encountered.
    
    [akpm@linux-foundation.org: fix typo in comment]
    Link: http://lkml.kernel.org/r/20181116134304.32440-1-bfoster@redhat.com
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a404f39f8fad2249387dfd0d15c43942f6bb4fb
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Fri Dec 28 00:32:50 2018 -0800

    ocfs2: fix panic due to unrecovered local alloc
    
    [ Upstream commit 532e1e54c8140188e192348c790317921cb2dc1c ]
    
    mount.ocfs2 ignore the inconsistent error that journal is clean but
    local alloc is unrecovered.  After mount, local alloc not empty, then
    reserver cluster didn't alloc a new local alloc window, reserveration
    map is empty(ocfs2_reservation_map.m_bitmap_len = 0), that triggered the
    following panic.
    
    This issue was reported at
    
      https://oss.oracle.com/pipermail/ocfs2-devel/2015-May/010854.html
    
    and was advised to fixed during mount.  But this is a very unusual
    inconsistent state, usually journal dirty flag should be cleared at the
    last stage of umount until every other things go right.  We may need do
    further debug to check that.  Any way to avoid possible futher
    corruption, mount should be abort and fsck should be run.
    
      (mount.ocfs2,1765,1):ocfs2_load_local_alloc:353 ERROR: Local alloc hasn't been recovered!
      found = 6518, set = 6518, taken = 8192, off = 15912372
      ocfs2: Mounting device (202,64) on (node 0, slot 3) with ordered data mode.
      o2dlm: Joining domain 89CEAC63CC4F4D03AC185B44E0EE0F3F ( 0 1 2 3 4 5 6 8 ) 8 nodes
      ocfs2: Mounting device (202,80) on (node 0, slot 3) with ordered data mode.
      o2hb: Region 89CEAC63CC4F4D03AC185B44E0EE0F3F (xvdf) is now a quorum device
      o2net: Accepted connection from node yvwsoa17p (num 7) at 172.22.77.88:7777
      o2dlm: Node 7 joins domain 64FE421C8C984E6D96ED12C55FEE2435 ( 0 1 2 3 4 5 6 7 8 ) 9 nodes
      o2dlm: Node 7 joins domain 89CEAC63CC4F4D03AC185B44E0EE0F3F ( 0 1 2 3 4 5 6 7 8 ) 9 nodes
      ------------[ cut here ]------------
      kernel BUG at fs/ocfs2/reservations.c:507!
      invalid opcode: 0000 [#1] SMP
      Modules linked in: ocfs2 rpcsec_gss_krb5 auth_rpcgss nfsv4 nfs fscache lockd grace ocfs2_dlmfs ocfs2_stack_o2cb ocfs2_dlm ocfs2_nodemanager ocfs2_stackglue configfs sunrpc ipt_REJECT nf_reject_ipv4 nf_conntrack_ipv4 nf_defrag_ipv4 iptable_filter ip_tables ip6t_REJECT nf_reject_ipv6 nf_conntrack_ipv6 nf_defrag_ipv6 xt_state nf_conntrack ip6table_filter ip6_tables ib_ipoib rdma_ucm ib_ucm ib_uverbs ib_umad rdma_cm ib_cm iw_cm ib_sa ib_mad ib_core ib_addr ipv6 ovmapi ppdev parport_pc parport xen_netfront fb_sys_fops sysimgblt sysfillrect syscopyarea acpi_cpufreq pcspkr i2c_piix4 i2c_core sg ext4 jbd2 mbcache2 sr_mod cdrom xen_blkfront pata_acpi ata_generic ata_piix floppy dm_mirror dm_region_hash dm_log dm_mod
      CPU: 0 PID: 4349 Comm: startWebLogic.s Not tainted 4.1.12-124.19.2.el6uek.x86_64 #2
      Hardware name: Xen HVM domU, BIOS 4.4.4OVM 09/06/2018
      task: ffff8803fb04e200 ti: ffff8800ea4d8000 task.ti: ffff8800ea4d8000
      RIP: 0010:[<ffffffffa05e96a8>]  [<ffffffffa05e96a8>] __ocfs2_resv_find_window+0x498/0x760 [ocfs2]
      Call Trace:
        ocfs2_resmap_resv_bits+0x10d/0x400 [ocfs2]
        ocfs2_claim_local_alloc_bits+0xd0/0x640 [ocfs2]
        __ocfs2_claim_clusters+0x178/0x360 [ocfs2]
        ocfs2_claim_clusters+0x1f/0x30 [ocfs2]
        ocfs2_convert_inline_data_to_extents+0x634/0xa60 [ocfs2]
        ocfs2_write_begin_nolock+0x1c6/0x1da0 [ocfs2]
        ocfs2_write_begin+0x13e/0x230 [ocfs2]
        generic_perform_write+0xbf/0x1c0
        __generic_file_write_iter+0x19c/0x1d0
        ocfs2_file_write_iter+0x589/0x1360 [ocfs2]
        __vfs_write+0xb8/0x110
        vfs_write+0xa9/0x1b0
        SyS_write+0x46/0xb0
        system_call_fastpath+0x18/0xd7
      Code: ff ff 8b 75 b8 39 75 b0 8b 45 c8 89 45 98 0f 84 e5 fe ff ff 45 8b 74 24 18 41 8b 54 24 1c e9 56 fc ff ff 85 c0 0f 85 48 ff ff ff <0f> 0b 48 8b 05 cf c3 de ff 48 ba 00 00 00 00 00 00 00 10 48 85
      RIP   __ocfs2_resv_find_window+0x498/0x760 [ocfs2]
       RSP <ffff8800ea4db668>
      ---[ end trace 566f07529f2edf3c ]---
      Kernel panic - not syncing: Fatal exception
      Kernel Offset: disabled
    
    Link: http://lkml.kernel.org/r/20181121020023.3034-2-junxiao.bi@oracle.com
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Yiwen Jiang <jiangyiwen@huawei.com>
    Acked-by: Joseph Qi <jiangqi903@gmail.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Mark Fasheh <mfasheh@versity.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Changwei Ge <ge.changwei@h3c.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9dcb871b1a99301ba65685be95cbd93a5c540fe
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Fri Dec 21 08:42:50 2018 -0800

    iomap: don't search past page end in iomap_is_partially_uptodate
    
    [ Upstream commit 3cc31fa65d85610574c0f6a474e89f4c419923d5 ]
    
    iomap_is_partially_uptodate() is intended to check wither blocks within
    the selected range of a not-uptodate page are uptodate; if the range we
    care about is up to date, it's an optimization.
    
    However, the iomap implementation continues to check all blocks up to
    from+count, which is beyond the page, and can even be well beyond the
    iop->uptodate bitmap.
    
    I think the worst that will happen is that we may eventually find a zero
    bit and return "not partially uptodate" when it would have otherwise
    returned true, and skip the optimization.  Still, it's clearly an invalid
    memory access that must be fixed.
    
    So: fix this by limiting the search to within the page as is done in the
    non-iomap variant, block_is_partially_uptodate().
    
    Zorro noticed thiswhen KASAN went off for 512 byte blocks on a 64k
    page system:
    
     BUG: KASAN: slab-out-of-bounds in iomap_is_partially_uptodate+0x1a0/0x1e0
     Read of size 8 at addr ffff800120c3a318 by task fsstress/22337
    
    Reported-by: Zorro Lang <zlang@redhat.com>
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Signed-off-by: Eric Sandeen <sandeen@sandeen.net>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00886cebcce534ad228d9530fc8df56af666ccc5
Author: Qian Cai <cai@lca.pw>
Date:   Thu Dec 13 08:27:27 2018 -0500

    scsi: megaraid: fix out-of-bound array accesses
    
    [ Upstream commit c7a082e4242fd8cd21a441071e622f87c16bdacc ]
    
    UBSAN reported those with MegaRAID SAS-3 3108,
    
    [   77.467308] UBSAN: Undefined behaviour in drivers/scsi/megaraid/megaraid_sas_fp.c:117:32
    [   77.475402] index 255 is out of range for type 'MR_LD_SPAN_MAP [1]'
    [   77.481677] CPU: 16 PID: 333 Comm: kworker/16:1 Not tainted 4.20.0-rc5+ #1
    [   77.488556] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.50 06/01/2018
    [   77.495791] Workqueue: events work_for_cpu_fn
    [   77.500154] Call trace:
    [   77.502610]  dump_backtrace+0x0/0x2c8
    [   77.506279]  show_stack+0x24/0x30
    [   77.509604]  dump_stack+0x118/0x19c
    [   77.513098]  ubsan_epilogue+0x14/0x60
    [   77.516765]  __ubsan_handle_out_of_bounds+0xfc/0x13c
    [   77.521767]  mr_update_load_balance_params+0x150/0x158 [megaraid_sas]
    [   77.528230]  MR_ValidateMapInfo+0x2cc/0x10d0 [megaraid_sas]
    [   77.533825]  megasas_get_map_info+0x244/0x2f0 [megaraid_sas]
    [   77.539505]  megasas_init_adapter_fusion+0x9b0/0xf48 [megaraid_sas]
    [   77.545794]  megasas_init_fw+0x1ab4/0x3518 [megaraid_sas]
    [   77.551212]  megasas_probe_one+0x2c4/0xbe0 [megaraid_sas]
    [   77.556614]  local_pci_probe+0x7c/0xf0
    [   77.560365]  work_for_cpu_fn+0x34/0x50
    [   77.564118]  process_one_work+0x61c/0xf08
    [   77.568129]  worker_thread+0x534/0xa70
    [   77.571882]  kthread+0x1c8/0x1d0
    [   77.575114]  ret_from_fork+0x10/0x1c
    
    [   89.240332] UBSAN: Undefined behaviour in drivers/scsi/megaraid/megaraid_sas_fp.c:117:32
    [   89.248426] index 255 is out of range for type 'MR_LD_SPAN_MAP [1]'
    [   89.254700] CPU: 16 PID: 95 Comm: kworker/u130:0 Not tainted 4.20.0-rc5+ #1
    [   89.261665] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.50 06/01/2018
    [   89.268903] Workqueue: events_unbound async_run_entry_fn
    [   89.274222] Call trace:
    [   89.276680]  dump_backtrace+0x0/0x2c8
    [   89.280348]  show_stack+0x24/0x30
    [   89.283671]  dump_stack+0x118/0x19c
    [   89.287167]  ubsan_epilogue+0x14/0x60
    [   89.290835]  __ubsan_handle_out_of_bounds+0xfc/0x13c
    [   89.295828]  MR_LdRaidGet+0x50/0x58 [megaraid_sas]
    [   89.300638]  megasas_build_io_fusion+0xbb8/0xd90 [megaraid_sas]
    [   89.306576]  megasas_build_and_issue_cmd_fusion+0x138/0x460 [megaraid_sas]
    [   89.313468]  megasas_queue_command+0x398/0x3d0 [megaraid_sas]
    [   89.319222]  scsi_dispatch_cmd+0x1dc/0x8a8
    [   89.323321]  scsi_request_fn+0x8e8/0xdd0
    [   89.327249]  __blk_run_queue+0xc4/0x158
    [   89.331090]  blk_execute_rq_nowait+0xf4/0x158
    [   89.335449]  blk_execute_rq+0xdc/0x158
    [   89.339202]  __scsi_execute+0x130/0x258
    [   89.343041]  scsi_probe_and_add_lun+0x2fc/0x1488
    [   89.347661]  __scsi_scan_target+0x1cc/0x8c8
    [   89.351848]  scsi_scan_channel.part.3+0x8c/0xc0
    [   89.356382]  scsi_scan_host_selected+0x130/0x1f0
    [   89.361002]  do_scsi_scan_host+0xd8/0xf0
    [   89.364927]  do_scan_async+0x9c/0x320
    [   89.368594]  async_run_entry_fn+0x138/0x420
    [   89.372780]  process_one_work+0x61c/0xf08
    [   89.376793]  worker_thread+0x13c/0xa70
    [   89.380546]  kthread+0x1c8/0x1d0
    [   89.383778]  ret_from_fork+0x10/0x1c
    
    This is because when populating Driver Map using firmware raid map, all
    non-existing VDs set their ldTgtIdToLd to 0xff, so it can be skipped later.
    
    From drivers/scsi/megaraid/megaraid_sas_base.c ,
    memset(instance->ld_ids, 0xff, MEGASAS_MAX_LD_IDS);
    
    From drivers/scsi/megaraid/megaraid_sas_fp.c ,
    /* For non existing VDs, iterate to next VD*/
    if (ld >= (MAX_LOGICAL_DRIVES_EXT - 1))
            continue;
    
    However, there are a few places that failed to skip those non-existing VDs
    due to off-by-one errors. Then, those 0xff leaked into MR_LdRaidGet(0xff,
    map) and triggered the out-of-bound accesses.
    
    Fixes: 51087a8617fe ("megaraid_sas : Extended VD support")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Sumit Saxena <sumit.saxena@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d640fb10cab4e4cf54a57c20e57ac7595bb8f31d
Author: Yanjiang Jin <yanjiang.jin@hxt-semitech.com>
Date:   Thu Dec 20 16:32:35 2018 +0800

    scsi: smartpqi: call pqi_free_interrupts() in pqi_shutdown()
    
    [ Upstream commit e57b2945aa654e48f85a41e8917793c64ecb9de8 ]
    
    We must free all irqs during shutdown, else kexec's 2nd kernel would hang
    in pqi_wait_for_completion_io() as below:
    
    Call trace:
    
     pqi_wait_for_completion_io
     pqi_submit_raid_request_synchronous.constprop.78+0x23c/0x310 [smartpqi]
     pqi_configure_events+0xec/0x1f8 [smartpqi]
     pqi_ctrl_init+0x814/0xca0 [smartpqi]
     pqi_pci_probe+0x400/0x46c [smartpqi]
     local_pci_probe+0x48/0xb0
     pci_device_probe+0x14c/0x1b0
     really_probe+0x218/0x3fc
     driver_probe_device+0x70/0x140
     __driver_attach+0x11c/0x134
     bus_for_each_dev+0x70/0xc8
     driver_attach+0x30/0x38
     bus_add_driver+0x1f0/0x294
     driver_register+0x74/0x12c
     __pci_register_driver+0x64/0x70
     pqi_init+0xd0/0x10000 [smartpqi]
     do_one_initcall+0x60/0x1d8
     do_init_module+0x64/0x1f8
     load_module+0x10ec/0x1350
     __se_sys_finit_module+0xd4/0x100
     __arm64_sys_finit_module+0x28/0x34
     el0_svc_handler+0x104/0x160
     el0_svc+0x8/0xc
    
    This happens only in the following combinations:
    
    1. smartpqi is built as module, not built-in;
    2. We have a disk connected to smartpqi card;
    3. Both kexec's 1st and 2nd kernels use this disk as Rootfs' mount point.
    
    Signed-off-by: Yanjiang Jin <yanjiang.jin@hxt-semitech.com>
    Acked-by: Don Brace <don.brace@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd619b90dd7164aa18119e7a55f7804f88ff63e7
Author: Zhi Chen <zhichen@codeaurora.org>
Date:   Thu Dec 20 14:24:43 2018 +0200

    ath10k: fix peer stats null pointer dereference
    
    [ Upstream commit 2d3b55853b123c177037cf534c5aaa2650310094 ]
    
    There was a race condition in SMP that an ath10k_peer was created but its
    member sta was null. Following are procedures of ath10k_peer creation and
    member sta access in peer statistics path.
    
        1. Peer creation:
            ath10k_peer_create()
                =>ath10k_wmi_peer_create()
                    =>ath10k_wait_for_peer_created()
                    ...
    
            # another kernel path, RX from firmware
            ath10k_htt_t2h_msg_handler()
            =>ath10k_peer_map_event()
                    =>wake_up()
                    # ar->peer_map[id] = peer //add peer to map
    
            #wake up original path from waiting
                    ...
                    # peer->sta = sta //sta assignment
    
        2.  RX path of statistics
            ath10k_htt_t2h_msg_handler()
                =>ath10k_update_per_peer_tx_stats()
                    =>ath10k_htt_fetch_peer_stats()
                    # peer->sta //sta accessing
    
    Any access of peer->sta after peer was added to peer_map but before sta was
    assigned could cause a null pointer issue. And because these two steps are
    asynchronous, no proper lock can protect them. So both peer and sta need to
    be checked before access.
    
    Tested: QCA9984 with firmware ver 10.4-3.9.0.1-00005
    Signed-off-by: Zhi Chen <zhichen@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca8ad9bcbebd03bf626074829eaaf67ee0e01899
Author: Kevin Barnett <kevin.barnett@microsemi.com>
Date:   Fri Dec 7 16:29:51 2018 -0600

    scsi: smartpqi: correct lun reset issues
    
    [ Upstream commit 2ba55c9851d74eb015a554ef69ddf2ef061d5780 ]
    
    Problem:
    The Linux kernel takes a logical volume offline after a LUN reset.  This is
    generally accompanied by this message in the dmesg output:
    
    Device offlined - not ready after error recovery
    
    Root Cause:
    The root cause is a "quirk" in the timeout handling in the Linux SCSI
    layer. The Linux kernel places a 30-second timeout on most media access
    commands (reads and writes) that it send to device drivers.  When a media
    access command times out, the Linux kernel goes into error recovery mode
    for the LUN that was the target of the command that timed out. Every
    command that timed out is kept on a list inside of the Linux kernel to be
    retried later. The kernel attempts to recover the command(s) that timed out
    by issuing a LUN reset followed by a TEST UNIT READY. If the LUN reset and
    TEST UNIT READY commands are successful, the kernel retries the command(s)
    that timed out.
    
    Each SCSI command issued by the kernel has a result field associated with
    it. This field indicates the final result of the command (success or
    error). When a command times out, the kernel places a value in this result
    field indicating that the command timed out.
    
    The "quirk" is that after the LUN reset and TEST UNIT READY commands are
    completed, the kernel checks each command on the timed-out command list
    before retrying it. If the result field is still "timed out", the kernel
    treats that command as not having been successfully recovered for a
    retry. If the number of commands that are in this state are greater than
    two, the kernel takes the LUN offline.
    
    Fix:
    When our RAIDStack receives a LUN reset, it simply waits until all
    outstanding commands complete. Generally, all of these outstanding commands
    complete successfully. Therefore, the fix in the smartpqi driver is to
    always set the command result field to indicate success when a request
    completes successfully. This normally isn’t necessary because the result
    field is always initialized to success when the command is submitted to the
    driver. So when the command completes successfully, the result field is
    left untouched. But in this case, the kernel changes the result field
    behind the driver’s back and then expects the field to be changed by the
    driver as the commands that timed-out complete.
    
    Reviewed-by: Dave Carroll <david.carroll@microsemi.com>
    Reviewed-by: Scott Teel <scott.teel@microsemi.com>
    Signed-off-by: Kevin Barnett <kevin.barnett@microsemi.com>
    Signed-off-by: Don Brace <don.brace@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 868152e4ca97b12ae651c4e7cad4ce66cb7529a0
Author: Stephan Günther <moepi@moepi.net>
Date:   Sun Dec 16 13:08:21 2018 +0100

    scsi: mpt3sas: fix memory ordering on 64bit writes
    
    [ Upstream commit 23c3828aa2f84edec7020c7397a22931e7a879e1 ]
    
    With commit 09c2f95ad404 ("scsi: mpt3sas: Swap I/O memory read value back
    to cpu endianness"), 64bit writes in _base_writeq() were rewritten to use
    __raw_writeq() instad of writeq().
    
    This introduced a bug apparent on powerpc64 systems such as the Raptor
    Talos II that causes the HBA to drop from the PCIe bus under heavy load and
    being reinitialized after a couple of seconds.
    
    It can easily be triggered on affacted systems by using something like
    
      fio --name=random-write --iodepth=4 --rw=randwrite --bs=4k --direct=0 \
        --size=128M --numjobs=64 --end_fsync=1
      fio --name=random-write --iodepth=4 --rw=randwrite --bs=64k --direct=0 \
        --size=128M --numjobs=64 --end_fsync=1
    
    a couple of times. In my case I tested it on both a ZFS raidz2 and a btrfs
    raid6 using LSI 9300-8i and 9400-8i controllers.
    
    The fix consists in resembling the write ordering of writeq() by adding a
    mandatory write memory barrier before device access and a compiler barrier
    afterwards. The additional MMIO barrier is superfluous.
    
    Signed-off-by: Stephan Günther <moepi@moepi.net>
    Reported-by: Matt Corallo <linux@bluematt.me>
    Acked-by: Sreekanth Reddy <Sreekanth.Reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fa75685aa3ade4de264c06c26aa7b90cdec34f3
Author: Parvi Kaustubhi <pkaustub@cisco.com>
Date:   Tue Dec 11 14:15:42 2018 -0800

    IB/usnic: Fix potential deadlock
    
    [ Upstream commit 8036e90f92aae2784b855a0007ae2d8154d28b3c ]
    
    Acquiring the rtnl lock while holding usdev_lock could result in a
    deadlock.
    
    For example:
    
    usnic_ib_query_port()
    | mutex_lock(&us_ibdev->usdev_lock)
     | ib_get_eth_speed()
      | rtnl_lock()
    
    rtnl_lock()
    | usnic_ib_netdevice_event()
     | mutex_lock(&us_ibdev->usdev_lock)
    
    This commit moves the usdev_lock acquisition after the rtnl lock has been
    released.
    
    This is safe to do because usdev_lock is not protecting anything being
    accessed in ib_get_eth_speed(). Hence, the correct order of holding locks
    (rtnl -> usdev_lock) is not violated.
    
    Signed-off-by: Parvi Kaustubhi <pkaustub@cisco.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a13daf038b4969e4dbc3b7f0e6ed8de6440c6fd6
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Dec 19 13:39:09 2018 +0100

    sysfs: Disable lockdep for driver bind/unbind files
    
    [ Upstream commit 4f4b374332ec0ae9c738ff8ec9bed5cd97ff9adc ]
    
    This is the much more correct fix for my earlier attempt at:
    
    https://lkml.org/lkml/2018/12/10/118
    
    Short recap:
    
    - There's not actually a locking issue, it's just lockdep being a bit
      too eager to complain about a possible deadlock.
    
    - Contrary to what I claimed the real problem is recursion on
      kn->count. Greg pointed me at sysfs_break_active_protection(), used
      by the scsi subsystem to allow a sysfs file to unbind itself. That
      would be a real deadlock, which isn't what's happening here. Also,
      breaking the active protection means we'd need to manually handle
      all the lifetime fun.
    
    - With Rafael we discussed the task_work approach, which kinda works,
      but has two downsides: It's a functional change for a lockdep
      annotation issue, and it won't work for the bind file (which needs
      to get the errno from the driver load function back to userspace).
    
    - Greg also asked why this never showed up: To hit this you need to
      unregister a 2nd driver from the unload code of your first driver. I
      guess only gpus do that. The bug has always been there, but only
      with a recent patch series did we add more locks so that lockdep
      built a chain from unbinding the snd-hda driver to the
      acpi_video_unregister call.
    
    Full lockdep splat:
    
    [12301.898799] ============================================
    [12301.898805] WARNING: possible recursive locking detected
    [12301.898811] 4.20.0-rc7+ #84 Not tainted
    [12301.898815] --------------------------------------------
    [12301.898821] bash/5297 is trying to acquire lock:
    [12301.898826] 00000000f61c6093 (kn->count#39){++++}, at: kernfs_remove_by_name_ns+0x3b/0x80
    [12301.898841] but task is already holding lock:
    [12301.898847] 000000005f634021 (kn->count#39){++++}, at: kernfs_fop_write+0xdc/0x190
    [12301.898856] other info that might help us debug this:
    [12301.898862]  Possible unsafe locking scenario:
    [12301.898867]        CPU0
    [12301.898870]        ----
    [12301.898874]   lock(kn->count#39);
    [12301.898879]   lock(kn->count#39);
    [12301.898883] *** DEADLOCK ***
    [12301.898891]  May be due to missing lock nesting notation
    [12301.898899] 5 locks held by bash/5297:
    [12301.898903]  #0: 00000000cd800e54 (sb_writers#4){.+.+}, at: vfs_write+0x17f/0x1b0
    [12301.898915]  #1: 000000000465e7c2 (&of->mutex){+.+.}, at: kernfs_fop_write+0xd3/0x190
    [12301.898925]  #2: 000000005f634021 (kn->count#39){++++}, at: kernfs_fop_write+0xdc/0x190
    [12301.898936]  #3: 00000000414ef7ac (&dev->mutex){....}, at: device_release_driver_internal+0x34/0x240
    [12301.898950]  #4: 000000003218fbdf (register_count_mutex){+.+.}, at: acpi_video_unregister+0xe/0x40
    [12301.898960] stack backtrace:
    [12301.898968] CPU: 1 PID: 5297 Comm: bash Not tainted 4.20.0-rc7+ #84
    [12301.898974] Hardware name: Hewlett-Packard HP EliteBook 8460p/161C, BIOS 68SCF Ver. F.01 03/11/2011
    [12301.898982] Call Trace:
    [12301.898989]  dump_stack+0x67/0x9b
    [12301.898997]  __lock_acquire+0x6ad/0x1410
    [12301.899003]  ? kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899010]  ? find_held_lock+0x2d/0x90
    [12301.899017]  ? mutex_spin_on_owner+0xe4/0x150
    [12301.899023]  ? find_held_lock+0x2d/0x90
    [12301.899030]  ? lock_acquire+0x90/0x180
    [12301.899036]  lock_acquire+0x90/0x180
    [12301.899042]  ? kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899049]  __kernfs_remove+0x296/0x310
    [12301.899055]  ? kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899060]  ? kernfs_name_hash+0xd/0x80
    [12301.899066]  ? kernfs_find_ns+0x6c/0x100
    [12301.899073]  kernfs_remove_by_name_ns+0x3b/0x80
    [12301.899080]  bus_remove_driver+0x92/0xa0
    [12301.899085]  acpi_video_unregister+0x24/0x40
    [12301.899127]  i915_driver_unload+0x42/0x130 [i915]
    [12301.899160]  i915_pci_remove+0x19/0x30 [i915]
    [12301.899169]  pci_device_remove+0x36/0xb0
    [12301.899176]  device_release_driver_internal+0x185/0x240
    [12301.899183]  unbind_store+0xaf/0x180
    [12301.899189]  kernfs_fop_write+0x104/0x190
    [12301.899195]  __vfs_write+0x31/0x180
    [12301.899203]  ? rcu_read_lock_sched_held+0x6f/0x80
    [12301.899209]  ? rcu_sync_lockdep_assert+0x29/0x50
    [12301.899216]  ? __sb_start_write+0x13c/0x1a0
    [12301.899221]  ? vfs_write+0x17f/0x1b0
    [12301.899227]  vfs_write+0xb9/0x1b0
    [12301.899233]  ksys_write+0x50/0xc0
    [12301.899239]  do_syscall_64+0x4b/0x180
    [12301.899247]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [12301.899253] RIP: 0033:0x7f452ac7f7a4
    [12301.899259] Code: 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f 80 00 00 00 00 8b 05 aa f0 2c 00 48 63 ff 85 c0 75 13 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 f3 c3 66 90 55 53 48 89 d5 48 89 f3 48 83
    [12301.899273] RSP: 002b:00007ffceafa6918 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [12301.899282] RAX: ffffffffffffffda RBX: 000000000000000d RCX: 00007f452ac7f7a4
    [12301.899288] RDX: 000000000000000d RSI: 00005612a1abf7c0 RDI: 0000000000000001
    [12301.899295] RBP: 00005612a1abf7c0 R08: 000000000000000a R09: 00005612a1c46730
    [12301.899301] R10: 000000000000000a R11: 0000000000000246 R12: 000000000000000d
    [12301.899308] R13: 0000000000000001 R14: 00007f452af4a740 R15: 000000000000000d
    
    Looking around I've noticed that usb and i2c already handle similar
    recursion problems, where a sysfs file can unbind the same type of
    sysfs somewhere else in the hierarchy. Relevant commits are:
    
    commit 356c05d58af05d582e634b54b40050c73609617b
    Author: Alan Stern <stern@rowland.harvard.edu>
    Date:   Mon May 14 13:30:03 2012 -0400
    
        sysfs: get rid of some lockdep false positives
    
    commit e9b526fe704812364bca07edd15eadeba163ebfb
    Author: Alexander Sverdlin <alexander.sverdlin@nsn.com>
    Date:   Fri May 17 14:56:35 2013 +0200
    
        i2c: suppress lockdep warning on delete_device
    
    Implement the same trick for driver bind/unbind.
    
    v2: Put the macro into bus.c (Greg).
    
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Ramalingam C <ramalingam.c@intel.com>
    Cc: Arend van Spriel <aspriel@gmail.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Bartosz Golaszewski <brgl@bgdev.pl>
    Cc: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: Vivek Gautam <vivek.gautam@codeaurora.org>
    Cc: Joe Perches <joe@perches.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 959bf5c190eadbcdc8841cd85db1e3ff052a21e3
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Wed Dec 19 20:00:42 2018 +0900

    ALSA: bebob: fix model-id of unit for Apogee Ensemble
    
    [ Upstream commit 644b2e97405b0b74845e1d3c2b4fe4c34858062b ]
    
    This commit fixes hard-coded model-id for an unit of Apogee Ensemble with
    a correct value. This unit uses DM1500 ASIC produced ArchWave AG (formerly
    known as BridgeCo AG).
    
    I note that this model supports three modes in the number of data channels
    in tx/rx streams; 8 ch pairs, 10 ch pairs, 18 ch pairs. The mode is
    switched by Vendor-dependent AV/C command, like:
    
    $ cd linux-firewire-utils
    $ ./firewire-request /dev/fw1 fcp 0x00ff000003dbeb0600000000 (8ch pairs)
    $ ./firewire-request /dev/fw1 fcp 0x00ff000003dbeb0601000000 (10ch pairs)
    $ ./firewire-request /dev/fw1 fcp 0x00ff000003dbeb0602000000 (18ch pairs)
    
    When switching between different mode, the unit disappears from IEEE 1394
    bus, then appears on the bus with different combination of stream formats.
    In a mode of 18 ch pairs, available sampling rate is up to 96.0 kHz, else
    up to 192.0 kHz.
    
    $ ./hinawa-config-rom-printer /dev/fw1
    { 'bus-info': { 'adj': False,
                    'bmc': True,
                    'chip_ID': 21474898341,
                    'cmc': True,
                    'cyc_clk_acc': 100,
                    'generation': 2,
                    'imc': True,
                    'isc': True,
                    'link_spd': 2,
                    'max_ROM': 1,
                    'max_rec': 512,
                    'name': '1394',
                    'node_vendor_ID': 987,
                    'pmc': False},
      'root-directory': [ ['HARDWARE_VERSION', 19],
                          [ 'NODE_CAPABILITIES',
                            { 'addressing': {'64': True, 'fix': True, 'prv': False},
                              'misc': {'int': False, 'ms': False, 'spt': True},
                              'state': { 'atn': False,
                                         'ded': False,
                                         'drq': True,
                                         'elo': False,
                                         'init': False,
                                         'lst': True,
                                         'off': False},
                              'testing': {'bas': False, 'ext': False}}],
                          ['VENDOR', 987],
                          ['DESCRIPTOR', 'Apogee Electronics'],
                          ['MODEL', 126702],
                          ['DESCRIPTOR', 'Ensemble'],
                          ['VERSION', 5297],
                          [ 'UNIT',
                            [ ['SPECIFIER_ID', 41005],
                              ['VERSION', 65537],
                              ['MODEL', 126702],
                              ['DESCRIPTOR', 'Ensemble']]],
                          [ 'DEPENDENT_INFO',
                            [ ['SPECIFIER_ID', 2037],
                              ['VERSION', 1],
                              [(58, 'IMMEDIATE'), 16777159],
                              [(59, 'IMMEDIATE'), 1048576],
                              [(60, 'IMMEDIATE'), 16777159],
                              [(61, 'IMMEDIATE'), 6291456]]]]}
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5e68453be0c9d37ffc19e0936d5711b972dffd6
Author: Raghuram Hegde <raghuram.hegde@intel.com>
Date:   Wed Dec 19 11:42:18 2018 +0530

    Bluetooth: btusb: Add support for Intel bluetooth device 8087:0029
    
    [ Upstream commit 2da711bcebe81209a9f2f90e145600eb1bae2b71 ]
    
    Include the new USB product ID for Intel Bluetooth device 22260
    family(CcPeak)
    
    The /sys/kernel/debug/usb/devices portion for this device is:
    
    T:  Bus=01 Lev=01 Prnt=01 Port=02 Cnt=02 Dev#=  2 Spd=12   MxCh= 0
    D:  Ver= 2.00 Cls=e0(wlcon) Sub=01 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=8087 ProdID=0029 Rev= 0.01
    C:* #Ifs= 2 Cfg#= 1 Atr=e0 MxPwr=100mA
    I:* If#= 0 Alt= 0 #EPs= 3 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=81(I) Atr=03(Int.) MxPS=  64 Ivl=1ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=  64 Ivl=0ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=  64 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=03(O) Atr=01(Isoc) MxPS=   0 Ivl=1ms
    E:  Ad=83(I) Atr=01(Isoc) MxPS=   0 Ivl=1ms
    I:  If#= 1 Alt= 1 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=03(O) Atr=01(Isoc) MxPS=   9 Ivl=1ms
    E:  Ad=83(I) Atr=01(Isoc) MxPS=   9 Ivl=1ms
    I:  If#= 1 Alt= 2 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  17 Ivl=1ms
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  17 Ivl=1ms
    I:  If#= 1 Alt= 3 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  25 Ivl=1ms
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  25 Ivl=1ms
    I:  If#= 1 Alt= 4 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  33 Ivl=1ms
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  33 Ivl=1ms
    I:  If#= 1 Alt= 5 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  49 Ivl=1ms
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  49 Ivl=1ms
    I:  If#= 1 Alt= 6 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=03(O) Atr=01(Isoc) MxPS=  63 Ivl=1ms
    E:  Ad=83(I) Atr=01(Isoc) MxPS=  63 Ivl=1ms
    
    Signed-off-by: Raghuram Hegde <raghuram.hegde@intel.com>
    Signed-off-by: Chethan T N <chethan.tumkur.narayan@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 887b1c9a7d17c919bc1b8204da2631be419e9a31
Author: Milan Broz <gmazyland@gmail.com>
Date:   Wed Nov 7 22:24:55 2018 +0100

    dm: Check for device sector overflow if CONFIG_LBDAF is not set
    
    [ Upstream commit ef87bfc24f9b8da82c89aff493df20f078bc9cb1 ]
    
    Reference to a device in device-mapper table contains offset in sectors.
    
    If the sector_t is 32bit integer (CONFIG_LBDAF is not set), then
    several device-mapper targets can overflow this offset and validity
    check is then performed on a wrong offset and a wrong table is activated.
    
    See for example (on 32bit without CONFIG_LBDAF) this overflow:
    
      # dmsetup create test --table "0 2048 linear /dev/sdg 4294967297"
      # dmsetup table test
      0 2048 linear 8:96 1
    
    This patch adds explicit check for overflow if the offset is sector_t type.
    
    Signed-off-by: Milan Broz <gmazyland@gmail.com>
    Reviewed-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit decca9bc2116a80821aa1fe0213754d9c5b29cea
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sun Nov 25 00:00:49 2018 -0500

    clocksource/drivers/integrator-ap: Add missing of_node_put()
    
    [ Upstream commit 5eb73c831171115d3b4347e1e7124a5a35d8086c ]
    
    The function of_find_node_by_path() acquires a reference to the node
    returned by it and that reference needs to be dropped by its caller.
    
    integrator_ap_timer_init_of() doesn't do that.  The pri_node and the
    sec_node are used as an identifier to compare against the current
    node, so we can directly drop the refcount after getting the node from
    the path as it is not used as pointer.
    
    By dropping the refcount right after getting it, a single variable is
    needed instead of two.
    
    Fix this by use a single variable and drop the refcount right after
    of_find_node_by_path().
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 876b79b973f2ca50cd9a57cc4263f91576cf25af
Author: Javier Barrio <javier.barrio.mart@gmail.com>
Date:   Thu Dec 13 01:06:29 2018 +0100

    quota: Lock s_umount in exclusive mode for Q_XQUOTA{ON,OFF} quotactls.
    
    [ Upstream commit 41c4f85cdac280d356df1f483000ecec4a8868be ]
    
    Commit 1fa5efe3622db58cb8c7b9a50665e9eb9a6c7e97 (ext4: Use generic helpers for quotaon
    and quotaoff) made possible to call quotactl(Q_XQUOTAON/OFF) on ext4 filesystems
    with sysfile quota support. This leads to calling dquot_enable/disable without s_umount
    held in excl. mode, because quotactl_cmd_onoff checks only for Q_QUOTAON/OFF.
    
    The following WARN_ON_ONCE triggers (in this case for dquot_enable, ext4, latest Linus' tree):
    
    [  117.807056] EXT4-fs (dm-0): mounted filesystem with ordered data mode. Opts: quota,prjquota
    
    [...]
    
    [  155.036847] WARNING: CPU: 0 PID: 2343 at fs/quota/dquot.c:2469 dquot_enable+0x34/0xb9
    [  155.036851] Modules linked in: quota_v2 quota_tree ipv6 af_packet joydev mousedev psmouse serio_raw pcspkr i2c_piix4 intel_agp intel_gtt e1000 ttm drm_kms_helper drm agpgart fb_sys_fops syscopyarea sysfillrect sysimgblt i2c_core input_leds kvm_intel kvm irqbypass qemu_fw_cfg floppy evdev parport_pc parport button crc32c_generic dm_mod ata_generic pata_acpi ata_piix libata loop ext4 crc16 mbcache jbd2 usb_storage usbcore sd_mod scsi_mod
    [  155.036901] CPU: 0 PID: 2343 Comm: qctl Not tainted 4.20.0-rc6-00025-gf5d582777bcb #9
    [  155.036903] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [  155.036911] RIP: 0010:dquot_enable+0x34/0xb9
    [  155.036915] Code: 41 56 41 55 41 54 55 53 4c 8b 6f 28 74 02 0f 0b 4d 8d 7d 70 49 89 fc 89 cb 41 89 d6 89 f5 4c 89 ff e8 23 09 ea ff 85 c0 74 0a <0f> 0b 4c 89 ff e8 8b 09 ea ff 85 db 74 6a 41 8b b5 f8 00 00 00 0f
    [  155.036918] RSP: 0018:ffffb09b00493e08 EFLAGS: 00010202
    [  155.036922] RAX: 0000000000000001 RBX: 0000000000000008 RCX: 0000000000000008
    [  155.036924] RDX: 0000000000000001 RSI: 0000000000000002 RDI: ffff9781b67cd870
    [  155.036926] RBP: 0000000000000002 R08: 0000000000000000 R09: 61c8864680b583eb
    [  155.036929] R10: ffffb09b00493e48 R11: ffffffffff7ce7d4 R12: ffff9781b7ee8d78
    [  155.036932] R13: ffff9781b67cd800 R14: 0000000000000004 R15: ffff9781b67cd870
    [  155.036936] FS:  00007fd813250b88(0000) GS:ffff9781ba000000(0000) knlGS:0000000000000000
    [  155.036939] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  155.036942] CR2: 00007fd812ff61d6 CR3: 000000007c882000 CR4: 00000000000006b0
    [  155.036951] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  155.036953] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  155.036955] Call Trace:
    [  155.037004]  dquot_quota_enable+0x8b/0xd0
    [  155.037011]  kernel_quotactl+0x628/0x74e
    [  155.037027]  ? do_mprotect_pkey+0x2a6/0x2cd
    [  155.037034]  __x64_sys_quotactl+0x1a/0x1d
    [  155.037041]  do_syscall_64+0x55/0xe4
    [  155.037078]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  155.037105] RIP: 0033:0x7fd812fe1198
    [  155.037109] Code: 02 77 0d 48 89 c1 48 c1 e9 3f 75 04 48 8b 04 24 48 83 c4 50 5b c3 48 83 ec 08 49 89 ca 48 63 d2 48 63 ff b8 b3 00 00 00 0f 05 <48> 89 c7 e8 c1 eb ff ff 5a c3 48 63 ff b8 bb 00 00 00 0f 05 48 89
    [  155.037112] RSP: 002b:00007ffe8cd7b050 EFLAGS: 00000206 ORIG_RAX: 00000000000000b3
    [  155.037116] RAX: ffffffffffffffda RBX: 00007ffe8cd7b148 RCX: 00007fd812fe1198
    [  155.037119] RDX: 0000000000000000 RSI: 00007ffe8cd7cea9 RDI: 0000000000580102
    [  155.037121] RBP: 00007ffe8cd7b0f0 R08: 000055fc8eba8a9d R09: 0000000000000000
    [  155.037124] R10: 00007ffe8cd7b074 R11: 0000000000000206 R12: 00007ffe8cd7b168
    [  155.037126] R13: 000055fc8eba8897 R14: 0000000000000000 R15: 0000000000000000
    [  155.037131] ---[ end trace 210f864257175c51 ]---
    
    and then the syscall proceeds without s_umount locking.
    
    This patch locks the superblock ->s_umount sem. in exclusive mode for all Q_XQUOTAON/OFF
    quotactls too in addition to Q_QUOTAON/OFF.
    
    AFAICT, other than ext4, only xfs and ocfs2 are affected by this change.
    The VFS will now call in xfs_quota_* functions with s_umount held, which wasn't the case
    before. This looks good to me but I can not say for sure. Ext4 and ocfs2 where already
    beeing called with s_umount exclusive via quota_quotaon/off which is basically the same.
    
    Signed-off-by: Javier Barrio <javier.barrio.mart@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77f14a49553004f54e14cc40b1de6b11e248ad6b
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Dec 11 16:31:19 2018 -0300

    perf tools: Add missing open_memstream() prototype for systems lacking it
    
    [ Upstream commit d7a8c4a6a055097a67ccfa3ca7c9ff1b64603a70 ]
    
    There are systems such as the Android NDK API level 24 has the
    open_memstream() function but doesn't provide a prototype, adding noise
    to the build:
    
      builtin-timechart.c: In function 'cat_backtrace':
      builtin-timechart.c:486:2: warning: implicit declaration of function 'open_memstream' [-Wimplicit-function-declaration]
        FILE *f = open_memstream(&p, &p_len);
        ^
      builtin-timechart.c:486:2: warning: nested extern declaration of 'open_memstream' [-Wnested-externs]
      builtin-timechart.c:486:12: warning: initialization makes pointer from integer without a cast
        FILE *f = open_memstream(&p, &p_len);
                  ^
    
    Define a LACKS_OPEN_MEMSTREAM_PROTOTYPE define so that code needing that
    can get a prototype.
    
    Checked in the bionic git repo to be available since level 23:
    
    https://android.googlesource.com/platform/bionic/+/master/libc/include/stdio.h#241
    
      FILE* open_memstream(char** __ptr, size_t* __size_ptr) __INTRODUCED_IN(23);
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-343ashae97e5bq6vizusyfno@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2a1f8d695c2d128d6e54e407e881c82ba9b50aa
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Dec 11 15:48:47 2018 -0300

    perf tools: Add missing sigqueue() prototype for systems lacking it
    
    [ Upstream commit 748fe0889c1ff12d378946bd5326e8ee8eacf5cf ]
    
    There are systems such as the Android NDK API level 24 has the
    sigqueue() function but doesn't provide a prototype, adding noise to the
    build:
    
      util/evlist.c: In function 'perf_evlist__prepare_workload':
      util/evlist.c:1494:4: warning: implicit declaration of function 'sigqueue' [-Wimplicit-function-declaration]
          if (sigqueue(getppid(), SIGUSR1, val))
          ^
      util/evlist.c:1494:4: warning: nested extern declaration of 'sigqueue' [-Wnested-externs]
    
    Define a LACKS_SIGQUEUE_PROTOTYPE define so that code needing that can
    get a prototype.
    
    Checked in the bionic git repo to be available since level 23:
    
    https://android.googlesource.com/platform/bionic/+/master/libc/include/signal.h#123
    
      int sigqueue(pid_t __pid, int __signal, const union sigval __value) __INTRODUCED_IN(23);
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-lmhpev1uni9kdrv7j29glyov@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bc4b575131f886d52049d047e68f6fce5108a5a
Author: Leo Yan <leo.yan@linaro.org>
Date:   Tue Dec 11 15:38:21 2018 +0800

    perf cs-etm: Correct packets swapping in cs_etm__flush()
    
    [ Upstream commit 43fd56669c28cd354e9228bdb58e4bca1c1a8b66 ]
    
    The structure cs_etm_queue uses 'prev_packet' to point to previous
    packet, this can be used to combine with new coming packet to generate
    samples.
    
    In function cs_etm__flush() it swaps packets only when the flag
    'etm->synth_opts.last_branch' is true, this means that it will not swap
    packets if without option '--itrace=il' to generate last branch entries;
    thus for this case the 'prev_packet' doesn't point to the correct
    previous packet and the stale packet still will be used to generate
    sequential sample.  Thus if dump trace with 'perf script' command we can
    see the incorrect flow with the stale packet's address info.
    
    This patch corrects packets swapping in cs_etm__flush(); except using
    the flag 'etm->synth_opts.last_branch' it also checks the another flag
    'etm->sample_branches', if any flag is true then it swaps packets so can
    save correct content to 'prev_packet'.  Finally this can fix the wrong
    program flow dumping issue.
    
    The patch has a minor refactoring to use 'etm->synth_opts.last_branch'
    instead of 'etmq->etm->synth_opts.last_branch' for condition checking,
    this is consistent with that is done in cs_etm__sample().
    
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mike Leach <mike.leach@linaro.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Robert Walker <robert.walker@arm.com>
    Cc: coresight@lists.linaro.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1544513908-16805-2-git-send-email-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e5be33b1061954fd87d28f89c6ea1a6b4f38973
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Wed Oct 31 17:53:08 2018 -0400

    dm snapshot: Fix excessive memory usage and workqueue stalls
    
    [ Upstream commit 721b1d98fb517ae99ab3b757021cf81db41e67be ]
    
    kcopyd has no upper limit to the number of jobs one can allocate and
    issue. Under certain workloads this can lead to excessive memory usage
    and workqueue stalls. For example, when creating multiple dm-snapshot
    targets with a 4K chunk size and then writing to the origin through the
    page cache. Syncing the page cache causes a large number of BIOs to be
    issued to the dm-snapshot origin target, which itself issues an even
    larger (because of the BIO splitting taking place) number of kcopyd
    jobs.
    
    Running the following test, from the device mapper test suite [1],
    
      dmtest run --suite snapshot -n many_snapshots_of_same_volume_N
    
    , with 8 active snapshots, results in the kcopyd job slab cache growing
    to 10G. Depending on the available system RAM this can lead to the OOM
    killer killing user processes:
    
    [463.492878] kthreadd invoked oom-killer: gfp_mask=0x6040c0(GFP_KERNEL|__GFP_COMP),
                  nodemask=(null), order=1, oom_score_adj=0
    [463.492894] kthreadd cpuset=/ mems_allowed=0
    [463.492948] CPU: 7 PID: 2 Comm: kthreadd Not tainted 4.19.0-rc7 #3
    [463.492950] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014
    [463.492952] Call Trace:
    [463.492964]  dump_stack+0x7d/0xbb
    [463.492973]  dump_header+0x6b/0x2fc
    [463.492987]  ? lockdep_hardirqs_on+0xee/0x190
    [463.493012]  oom_kill_process+0x302/0x370
    [463.493021]  out_of_memory+0x113/0x560
    [463.493030]  __alloc_pages_slowpath+0xf40/0x1020
    [463.493055]  __alloc_pages_nodemask+0x348/0x3c0
    [463.493067]  cache_grow_begin+0x81/0x8b0
    [463.493072]  ? cache_grow_begin+0x874/0x8b0
    [463.493078]  fallback_alloc+0x1e4/0x280
    [463.493092]  kmem_cache_alloc_node+0xd6/0x370
    [463.493098]  ? copy_process.part.31+0x1c5/0x20d0
    [463.493105]  copy_process.part.31+0x1c5/0x20d0
    [463.493115]  ? __lock_acquire+0x3cc/0x1550
    [463.493121]  ? __switch_to_asm+0x34/0x70
    [463.493129]  ? kthread_create_worker_on_cpu+0x70/0x70
    [463.493135]  ? finish_task_switch+0x90/0x280
    [463.493165]  _do_fork+0xe0/0x6d0
    [463.493191]  ? kthreadd+0x19f/0x220
    [463.493233]  kernel_thread+0x25/0x30
    [463.493235]  kthreadd+0x1bf/0x220
    [463.493242]  ? kthread_create_on_cpu+0x90/0x90
    [463.493248]  ret_from_fork+0x3a/0x50
    [463.493279] Mem-Info:
    [463.493285] active_anon:20631 inactive_anon:4831 isolated_anon:0
    [463.493285]  active_file:80216 inactive_file:80107 isolated_file:435
    [463.493285]  unevictable:0 dirty:51266 writeback:109372 unstable:0
    [463.493285]  slab_reclaimable:31191 slab_unreclaimable:3483521
    [463.493285]  mapped:526 shmem:4903 pagetables:1759 bounce:0
    [463.493285]  free:33623 free_pcp:2392 free_cma:0
    ...
    [463.493489] Unreclaimable slab info:
    [463.493513] Name                      Used          Total
    [463.493522] bio-6                   1028KB       1028KB
    [463.493525] bio-5                   1028KB       1028KB
    [463.493528] dm_snap_pending_exception     236783KB     243789KB
    [463.493531] dm_exception              41KB         42KB
    [463.493534] bio-4                   1216KB       1216KB
    [463.493537] bio-3                 439396KB     439396KB
    [463.493539] kcopyd_job           6973427KB    6973427KB
    ...
    [463.494340] Out of memory: Kill process 1298 (ruby2.3) score 1 or sacrifice child
    [463.494673] Killed process 1298 (ruby2.3) total-vm:435740kB, anon-rss:20180kB, file-rss:4kB, shmem-rss:0kB
    [463.506437] oom_reaper: reaped process 1298 (ruby2.3), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
    
    Moreover, issuing a large number of kcopyd jobs results in kcopyd
    hogging the CPU, while processing them. As a result, processing of work
    items, queued for execution on the same CPU as the currently running
    kcopyd thread, is stalled for long periods of time, hurting performance.
    Running the aforementioned test we get, in dmesg, messages like the
    following:
    
    [67501.194592] BUG: workqueue lockup - pool cpus=4 node=0 flags=0x0 nice=0 stuck for 27s!
    [67501.195586] Showing busy workqueues and worker pools:
    [67501.195591] workqueue events: flags=0x0
    [67501.195597]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195611]     pending: cache_reap
    [67501.195641] workqueue mm_percpu_wq: flags=0x8
    [67501.195645]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195656]     pending: vmstat_update
    [67501.195682] workqueue kblockd: flags=0x18
    [67501.195687]   pwq 5: cpus=2 node=0 flags=0x0 nice=-20 active=1/256
    [67501.195698]     pending: blk_timeout_work
    [67501.195753] workqueue kcopyd: flags=0x8
    [67501.195757]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195768]     pending: do_work [dm_mod]
    [67501.195802] workqueue kcopyd: flags=0x8
    [67501.195806]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195817]     pending: do_work [dm_mod]
    [67501.195834] workqueue kcopyd: flags=0x8
    [67501.195838]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195848]     pending: do_work [dm_mod]
    [67501.195881] workqueue kcopyd: flags=0x8
    [67501.195885]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=1/256
    [67501.195896]     pending: do_work [dm_mod]
    [67501.195920] workqueue kcopyd: flags=0x8
    [67501.195924]   pwq 8: cpus=4 node=0 flags=0x0 nice=0 active=2/256
    [67501.195935]     in-flight: 67:do_work [dm_mod]
    [67501.195945]     pending: do_work [dm_mod]
    [67501.195961] pool 8: cpus=4 node=0 flags=0x0 nice=0 hung=27s workers=3 idle: 129 23765
    
    The root cause for these issues is the way dm-snapshot uses kcopyd. In
    particular, the lack of an explicit or implicit limit to the maximum
    number of in-flight COW jobs. The merging path is not affected because
    it implicitly limits the in-flight kcopyd jobs to one.
    
    Fix these issues by using a semaphore to limit the maximum number of
    in-flight kcopyd jobs. We grab the semaphore before allocating a new
    kcopyd job in start_copy() and start_full_bio() and release it after the
    job finishes in copy_callback().
    
    The initial semaphore value is configurable through a module parameter,
    to allow fine tuning the maximum number of in-flight COW jobs. Setting
    this parameter to zero initializes the semaphore to INT_MAX.
    
    A default value of 2048 maximum in-flight kcopyd jobs was chosen. This
    value was decided experimentally as a trade-off between memory
    consumption, stalling the kernel's workqueues and maintaining a high
    enough throughput.
    
    Re-running the aforementioned test:
    
      * Workqueue stalls are eliminated
      * kcopyd's job slab cache uses a maximum of 130MB
      * The time taken by the test to write to the snapshot-origin target is
        reduced from 05m20.48s to 03m26.38s
    
    [1] https://github.com/jthornber/device-mapper-test-suite
    
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Ilias Tsitsimpis <iliastsi@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9513fdbeb62a3c89e8dc1b018c8d4c23606279b
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Dec 11 15:00:52 2018 -0300

    tools lib subcmd: Don't add the kernel sources to the include path
    
    [ Upstream commit ece9804985b57e1ccd83b1fb6288520955a29d51 ]
    
    At some point we decided not to directly include kernel sources files
    when building tools/perf/, but when tools/lib/subcmd/ was forked from
    tools/perf it somehow ended up adding it via these two lines in its
    Makefile:
    
      CFLAGS += -I$(srctree)/include/uapi
      CFLAGS += -I$(srctree)/include
    
    As $(srctree) points to the kernel sources.
    
    Removing those lines and keeping just:
    
      CFLAGS += -I$(srctree)/tools/include/
    
    Is enough to build tools/perf and tools/objtool.
    
    This fixes the build when building from the sources in environments such
    as the Android NDK crossbuilding from a fedora:26 system:
    
      subcmd-util.h:11:15: error: expected ',' or ';' before 'void'
       static inline void report(const char *prefix, const char *err, va_list params)
                     ^
      In file included from /git/perf/include/uapi/linux/stddef.h:2:0,
                       from /git/perf/include/uapi/linux/posix_types.h:5,
                       from /opt/android-ndk-r12b/platforms/android-24/arch-arm/usr/include/sys/types.h:36,
                       from /opt/android-ndk-r12b/platforms/android-24/arch-arm/usr/include/unistd.h:33,
                       from run-command.c:2:
      subcmd-util.h:18:17: error: '__no_instrument_function__' attribute applies only to functions
    
    The /opt/android-ndk-r12b/platforms/android-24/arch-arm/usr/include/sys/types.h
    file that includes linux/posix_types.h ends up getting the one in the kernel
    sources causing the breakage. Fix it.
    
    Test built tools/objtool/ too.
    
    Reported-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Fixes: 4b6ab94eabe4 ("perf subcmd: Create subcmd library")
    Link: https://lkml.kernel.org/n/tip-5lhaoecrj12t0bqwvpiu14sm@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8603cac28a78a0fda3aa2121388e399334e1bd18
Author: Michael Petlan <mpetlan@redhat.com>
Date:   Mon Dec 10 11:00:04 2018 -0500

    perf stat: Avoid segfaults caused by negated options
    
    [ Upstream commit 51433ead1460fb3f46e1c34f68bb22fd2dd0f5d0 ]
    
    Some 'perf stat' options do not make sense to be negated (event,
    cgroup), some do not have negated path implemented (metrics). Due to
    that, it is better to disable the "no-" prefix for them, since
    otherwise, the later opt-parsing segfaults.
    
    Before:
    
      $ perf stat --no-metrics -- ls
      Segmentation fault (core dumped)
    
    After:
    
      $ perf stat --no-metrics -- ls
       Error: option `no-metrics' isn't available
       Usage: perf stat [<options>] [<command>]
    
    Signed-off-by: Michael Petlan <mpetlan@redhat.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    LPU-Reference: 1485912065.62416880.1544457604340.JavaMail.zimbra@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbd257f3bbc9e6222d476d3930c79d01df6ff61f
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Wed Oct 31 17:53:09 2018 -0400

    dm kcopyd: Fix bug causing workqueue stalls
    
    [ Upstream commit d7e6b8dfc7bcb3f4f3a18313581f67486a725b52 ]
    
    When using kcopyd to run callbacks through dm_kcopyd_do_callback() or
    submitting copy jobs with a source size of 0, the jobs are pushed
    directly to the complete_jobs list, which could be under processing by
    the kcopyd thread. As a result, the kcopyd thread can continue running
    completed jobs indefinitely, without releasing the CPU, as long as
    someone keeps submitting new completed jobs through the aforementioned
    paths. Processing of work items, queued for execution on the same CPU as
    the currently running kcopyd thread, is thus stalled for excessive
    amounts of time, hurting performance.
    
    Running the following test, from the device mapper test suite [1],
    
      dmtest run --suite snapshot -n parallel_io_to_many_snaps_N
    
    , with 8 active snapshots, we get, in dmesg, messages like the
    following:
    
    [68899.948523] BUG: workqueue lockup - pool cpus=0 node=0 flags=0x0 nice=0 stuck for 95s!
    [68899.949282] Showing busy workqueues and worker pools:
    [68899.949288] workqueue events: flags=0x0
    [68899.949295]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=2/256
    [68899.949306]     pending: vmstat_shepherd, cache_reap
    [68899.949331] workqueue mm_percpu_wq: flags=0x8
    [68899.949337]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949345]     pending: vmstat_update
    [68899.949387] workqueue dm_bufio_cache: flags=0x8
    [68899.949392]   pwq 4: cpus=2 node=0 flags=0x0 nice=0 active=1/256
    [68899.949400]     pending: work_fn [dm_bufio]
    [68899.949423] workqueue kcopyd: flags=0x8
    [68899.949429]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949437]     pending: do_work [dm_mod]
    [68899.949452] workqueue kcopyd: flags=0x8
    [68899.949458]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=2/256
    [68899.949466]     in-flight: 13:do_work [dm_mod]
    [68899.949474]     pending: do_work [dm_mod]
    [68899.949487] workqueue kcopyd: flags=0x8
    [68899.949493]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949501]     pending: do_work [dm_mod]
    [68899.949515] workqueue kcopyd: flags=0x8
    [68899.949521]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949529]     pending: do_work [dm_mod]
    [68899.949541] workqueue kcopyd: flags=0x8
    [68899.949547]   pwq 0: cpus=0 node=0 flags=0x0 nice=0 active=1/256
    [68899.949555]     pending: do_work [dm_mod]
    [68899.949568] pool 0: cpus=0 node=0 flags=0x0 nice=0 hung=95s workers=4 idle: 27130 27223 1084
    
    Fix this by splitting the complete_jobs list into two parts: A user
    facing part, named callback_jobs, and one used internally by kcopyd,
    retaining the name complete_jobs. dm_kcopyd_do_callback() and
    dispatch_job() now push their jobs to the callback_jobs list, which is
    spliced to the complete_jobs list once, every time the kcopyd thread
    wakes up. This prevents kcopyd from hogging the CPU indefinitely and
    causing workqueue stalls.
    
    Re-running the aforementioned test:
    
      * Workqueue stalls are eliminated
      * The maximum writing time among all targets is reduced from 09m37.10s
        to 06m04.85s and the total run time of the test is reduced from
        10m43.591s to 7m19.199s
    
    [1] https://github.com/jthornber/device-mapper-test-suite
    
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Ilias Tsitsimpis <iliastsi@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e26ee3149e4ae2283fffee1aa7578649864097b
Author: AliOS system security <alios_sys_security@linux.alibaba.com>
Date:   Mon Nov 5 15:31:42 2018 +0800

    dm crypt: use u64 instead of sector_t to store iv_offset
    
    [ Upstream commit 8d683dcd65c037efc9fb38c696ec9b65b306e573 ]
    
    The iv_offset in the mapping table of crypt target is a 64bit number when
    IV algorithm is plain64, plain64be, essiv or benbi. It will be assigned to
    iv_offset of struct crypt_config, cc_sector of struct convert_context and
    iv_sector of struct dm_crypt_request. These structures members are defined
    as a sector_t. But sector_t is 32bit when CONFIG_LBDAF is not set in 32bit
    kernel. In this situation sector_t is not big enough to store the 64bit
    iv_offset.
    
    Here is a reproducer.
    Prepare test image and device (loop is automatically allocated by cryptsetup):
    
      # dd if=/dev/zero of=tst.img bs=1M count=1
      # echo "tst"|cryptsetup open --type plain -c aes-xts-plain64 \
      --skip 500000000000000000 tst.img test
    
    On 32bit system (use IV offset value that overflows to 64bit; CONFIG_LBDAF if off)
    and device checksum is wrong:
    
      # dmsetup table test --showkeys
      0 2048 crypt aes-xts-plain64 dfa7cfe3c481f2239155739c42e539ae8f2d38f304dcc89d20b26f69daaf0933 3551657984 7:0 0
    
      # sha256sum /dev/mapper/test
      533e25c09176632b3794f35303488c4a8f3f965dffffa6ec2df347c168cb6c19 /dev/mapper/test
    
    On 64bit system (and on 32bit system with the patch), table and checksum is now correct:
    
      # dmsetup table test --showkeys
      0 2048 crypt aes-xts-plain64 dfa7cfe3c481f2239155739c42e539ae8f2d38f304dcc89d20b26f69daaf0933 500000000000000000 7:0 0
    
      # sha256sum /dev/mapper/test
      5d16160f9d5f8c33d8051e65fdb4f003cc31cd652b5abb08f03aa6fce0df75fc /dev/mapper/test
    
    Signed-off-by: AliOS system security <alios_sys_security@linux.alibaba.com>
    Tested-and-Reviewed-by: Milan Broz <gmazyland@gmail.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4772e8b3e609013830302698a7d63c1b955afa1
Author: Hui Wang <john.wanghui@huawei.com>
Date:   Wed Nov 7 10:36:43 2018 +0800

    x86/topology: Use total_cpus for max logical packages calculation
    
    [ Upstream commit aa02ef099cff042c2a9109782ec2bf1bffc955d4 ]
    
    nr_cpu_ids can be limited on the command line via nr_cpus=. This can break the
    logical package management because it results in a smaller number of packages
    while in kdump kernel.
    
    Check below case:
    There is a two sockets system, each socket has 8 cores, which has 16 logical
    cpus while HT was turn on.
    
     0  1  2  3  4  5  6  7     |    16 17 18 19 20 21 22 23
     cores on socket 0               threads on socket 0
     8  9 10 11 12 13 14 15     |    24 25 26 27 28 29 30 31
     cores on socket 1               threads on socket 1
    
    While starting the kdump kernel with command line option nr_cpus=16 panic
    was triggered on one of the cpus 24-31 eg. 26, then online cpu will be
    1-15, 26(cpu 0 was disabled in kdump), ncpus will be 16 and
    __max_logical_packages will be 1, but actually two packages were booted on.
    
    This issue can reproduced by set kdump option nr_cpus=<real physical core
    numbers>, and then trigger panic on last socket's thread, for example:
    
    taskset -c 26 echo c > /proc/sysrq-trigger
    
    Use total_cpus which will not be limited by nr_cpus command line to calculate
    the value of __max_logical_packages.
    
    Signed-off-by: Hui Wang <john.wanghui@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <guijianfeng@huawei.com>
    Cc: <wencongyang2@huawei.com>
    Cc: <douliyang1@huawei.com>
    Cc: <qiaonuohan@huawei.com>
    Link: https://lkml.kernel.org/r/20181107023643.22174-1-john.wanghui@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d51378a6893ea0ccb2ddcbabf5e336a80ebed87
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Nov 5 18:22:44 2018 +0900

    netfilter: ipt_CLUSTERIP: fix deadlock in netns exit routine
    
    [ Upstream commit 5a86d68bcf02f2d1e9a5897dd482079fd5f75e7f ]
    
    When network namespace is destroyed, cleanup_net() is called.
    cleanup_net() holds pernet_ops_rwsem then calls each ->exit callback.
    So that clusterip_tg_destroy() is called by cleanup_net().
    And clusterip_tg_destroy() calls unregister_netdevice_notifier().
    
    But both cleanup_net() and clusterip_tg_destroy() hold same
    lock(pernet_ops_rwsem). hence deadlock occurrs.
    
    After this patch, only 1 notifier is registered when module is inserted.
    And all of configs are added to per-net list.
    
    test commands:
       %ip netns add vm1
       %ip netns exec vm1 bash
       %ip link set lo up
       %iptables -A INPUT -p tcp -i lo -d 192.168.0.5 --dport 80 \
            -j CLUSTERIP --new --hashmode sourceip \
            --clustermac 01:00:5e:00:00:20 --total-nodes 2 --local-node 1
       %exit
       %ip netns del vm1
    
    splat looks like:
    [  341.809674] ============================================
    [  341.809674] WARNING: possible recursive locking detected
    [  341.809674] 4.19.0-rc5+ #16 Tainted: G        W
    [  341.809674] --------------------------------------------
    [  341.809674] kworker/u4:2/87 is trying to acquire lock:
    [  341.809674] 000000005da2d519 (pernet_ops_rwsem){++++}, at: unregister_netdevice_notifier+0x8c/0x460
    [  341.809674]
    [  341.809674] but task is already holding lock:
    [  341.809674] 000000005da2d519 (pernet_ops_rwsem){++++}, at: cleanup_net+0x119/0x900
    [  341.809674]
    [  341.809674] other info that might help us debug this:
    [  341.809674]  Possible unsafe locking scenario:
    [  341.809674]
    [  341.809674]        CPU0
    [  341.809674]        ----
    [  341.809674]   lock(pernet_ops_rwsem);
    [  341.809674]   lock(pernet_ops_rwsem);
    [  341.809674]
    [  341.809674]  *** DEADLOCK ***
    [  341.809674]
    [  341.809674]  May be due to missing lock nesting notation
    [  341.809674]
    [  341.809674] 3 locks held by kworker/u4:2/87:
    [  341.809674]  #0: 00000000d9df6c92 ((wq_completion)"%s""netns"){+.+.}, at: process_one_work+0xafe/0x1de0
    [  341.809674]  #1: 00000000c2cbcee2 (net_cleanup_work){+.+.}, at: process_one_work+0xb60/0x1de0
    [  341.809674]  #2: 000000005da2d519 (pernet_ops_rwsem){++++}, at: cleanup_net+0x119/0x900
    [  341.809674]
    [  341.809674] stack backtrace:
    [  341.809674] CPU: 1 PID: 87 Comm: kworker/u4:2 Tainted: G        W         4.19.0-rc5+ #16
    [  341.809674] Workqueue: netns cleanup_net
    [  341.809674] Call Trace:
    [ ... ]
    [  342.070196]  down_write+0x93/0x160
    [  342.070196]  ? unregister_netdevice_notifier+0x8c/0x460
    [  342.070196]  ? down_read+0x1e0/0x1e0
    [  342.070196]  ? sched_clock_cpu+0x126/0x170
    [  342.070196]  ? find_held_lock+0x39/0x1c0
    [  342.070196]  unregister_netdevice_notifier+0x8c/0x460
    [  342.070196]  ? register_netdevice_notifier+0x790/0x790
    [  342.070196]  ? __local_bh_enable_ip+0xe9/0x1b0
    [  342.070196]  ? __local_bh_enable_ip+0xe9/0x1b0
    [  342.070196]  ? clusterip_tg_destroy+0x372/0x650 [ipt_CLUSTERIP]
    [  342.070196]  ? trace_hardirqs_on+0x93/0x210
    [  342.070196]  ? __bpf_trace_preemptirq_template+0x10/0x10
    [  342.070196]  ? clusterip_tg_destroy+0x372/0x650 [ipt_CLUSTERIP]
    [  342.123094]  clusterip_tg_destroy+0x3ad/0x650 [ipt_CLUSTERIP]
    [  342.123094]  ? clusterip_net_init+0x3d0/0x3d0 [ipt_CLUSTERIP]
    [  342.123094]  ? cleanup_match+0x17d/0x200 [ip_tables]
    [  342.123094]  ? xt_unregister_table+0x215/0x300 [x_tables]
    [  342.123094]  ? kfree+0xe2/0x2a0
    [  342.123094]  cleanup_entry+0x1d5/0x2f0 [ip_tables]
    [  342.123094]  ? cleanup_match+0x200/0x200 [ip_tables]
    [  342.123094]  __ipt_unregister_table+0x9b/0x1a0 [ip_tables]
    [  342.123094]  iptable_filter_net_exit+0x43/0x80 [iptable_filter]
    [  342.123094]  ops_exit_list.isra.10+0x94/0x140
    [  342.123094]  cleanup_net+0x45b/0x900
    [ ... ]
    
    Fixes: 202f59afd441 ("netfilter: ipt_CLUSTERIP: do not hold dev")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb7b6c49cc344f5f7a27c499a0c9d1efc106b6d2
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Nov 5 18:22:55 2018 +0900

    netfilter: ipt_CLUSTERIP: remove wrong WARN_ON_ONCE in netns exit routine
    
    [ Upstream commit b12f7bad5ad3724d19754390a3e80928525c0769 ]
    
    When network namespace is destroyed, both clusterip_tg_destroy() and
    clusterip_net_exit() are called. and clusterip_net_exit() is called
    before clusterip_tg_destroy().
    Hence cleanup check code in clusterip_net_exit() doesn't make sense.
    
    test commands:
       %ip netns add vm1
       %ip netns exec vm1 bash
       %ip link set lo up
       %iptables -A INPUT -p tcp -i lo -d 192.168.0.5 --dport 80 \
            -j CLUSTERIP --new --hashmode sourceip \
            --clustermac 01:00:5e:00:00:20 --total-nodes 2 --local-node 1
       %exit
       %ip netns del vm1
    
    splat looks like:
    [  341.184508] WARNING: CPU: 1 PID: 87 at net/ipv4/netfilter/ipt_CLUSTERIP.c:840 clusterip_net_exit+0x319/0x380 [ipt_CLUSTERIP]
    [  341.184850] Modules linked in: ipt_CLUSTERIP nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 xt_tcpudp iptable_filter bpfilter ip_tables x_tables
    [  341.184850] CPU: 1 PID: 87 Comm: kworker/u4:2 Not tainted 4.19.0-rc5+ #16
    [  341.227509] Workqueue: netns cleanup_net
    [  341.227509] RIP: 0010:clusterip_net_exit+0x319/0x380 [ipt_CLUSTERIP]
    [  341.227509] Code: 0f 85 7f fe ff ff 48 c7 c2 80 64 2c c0 be a8 02 00 00 48 c7 c7 a0 63 2c c0 c6 05 18 6e 00 00 01 e8 bc 38 ff f5 e9 5b fe ff ff <0f> 0b e9 33 ff ff ff e8 4b 90 50 f6 e9 2d fe ff ff 48 89 df e8 de
    [  341.227509] RSP: 0018:ffff88011086f408 EFLAGS: 00010202
    [  341.227509] RAX: dffffc0000000000 RBX: 1ffff1002210de85 RCX: 0000000000000000
    [  341.227509] RDX: 1ffff1002210de85 RSI: ffff880110813be8 RDI: ffffed002210de58
    [  341.227509] RBP: ffff88011086f4d0 R08: 0000000000000000 R09: 0000000000000000
    [  341.227509] R10: 0000000000000000 R11: 0000000000000000 R12: 1ffff1002210de81
    [  341.227509] R13: ffff880110625a48 R14: ffff880114cec8c8 R15: 0000000000000014
    [  341.227509] FS:  0000000000000000(0000) GS:ffff880116600000(0000) knlGS:0000000000000000
    [  341.227509] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  341.227509] CR2: 00007f11fd38e000 CR3: 000000013ca16000 CR4: 00000000001006e0
    [  341.227509] Call Trace:
    [  341.227509]  ? __clusterip_config_find+0x460/0x460 [ipt_CLUSTERIP]
    [  341.227509]  ? default_device_exit+0x1ca/0x270
    [  341.227509]  ? remove_proc_entry+0x1cd/0x390
    [  341.227509]  ? dev_change_net_namespace+0xd00/0xd00
    [  341.227509]  ? __init_waitqueue_head+0x130/0x130
    [  341.227509]  ops_exit_list.isra.10+0x94/0x140
    [  341.227509]  cleanup_net+0x45b/0x900
    [ ... ]
    
    Fixes: 613d0776d3fe ("netfilter: exit_net cleanup check added")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 744383c88e2ef588e4e07e4c399e58d99ecfde18
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Nov 5 18:23:25 2018 +0900

    netfilter: ipt_CLUSTERIP: check MAC address when duplicate config is set
    
    [ Upstream commit 06aa151ad1fc74a49b45336672515774a678d78d ]
    
    If same destination IP address config is already existing, that config is
    just used. MAC address also should be same.
    However, there is no MAC address checking routine.
    So that MAC address checking routine is added.
    
    test commands:
       %iptables -A INPUT -p tcp -i lo -d 192.168.0.5 --dport 80 \
               -j CLUSTERIP --new --hashmode sourceip \
               --clustermac 01:00:5e:00:00:20 --total-nodes 2 --local-node 1
       %iptables -A INPUT -p tcp -i lo -d 192.168.0.5 --dport 80 \
               -j CLUSTERIP --new --hashmode sourceip \
               --clustermac 01:00:5e:00:00:21 --total-nodes 2 --local-node 1
    
    After this patch, above commands are disallowed.
    
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd1040e646d619689f7fecc4b9bbd1f99a4628d0
Author: Andi Kleen <ak@linux.intel.com>
Date:   Mon Nov 19 21:06:35 2018 -0800

    perf vendor events intel: Fix Load_Miss_Real_Latency on SKL/SKX
    
    [ Upstream commit 91b2b97025097ce7ca7536bc87eba2bf14760fb4 ]
    
    Fix incorrect event names for the Load_Miss_Real_Latency metric for
    Skylake and Skylake Server.
    
    Fixes https://github.com/andikleen/pmu-tools/issues/158
    
    Before:
    
      % perf stat -M Load_Miss_Real_Latency true
      event syntax error: '..ss.pending,mem_load_retired.l1_miss_ps,mem_load_retired.fb_hit_ps}:W'
                                        \___ parser error
    
       Usage: perf stat [<options>] [<command>]
    
          -M, --metrics <metric/metric group list>
                                monitor specified metrics or metric groups (separated by ,)
    
    After:
    
      % perf stat -M Load_Miss_Real_Latency true
    
       Performance counter stats for 'true':
    
                 279,204      l1d_pend_miss.pending     #     14.0 Load_Miss_Real_Latency
                   4,784      mem_load_uops_retired.l1_miss
                  15,188      mem_load_uops_retired.hit_lfb
    
             0.000899640 seconds time elapsed
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Link: http://lkml.kernel.org/r/20181120050635.4215-1-andi@firstfloor.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58c67a0b06a73070932517323e482344622f3690
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Dec 6 13:52:13 2018 -0300

    perf parse-events: Fix unchecked usage of strncpy()
    
    [ Upstream commit bd8d57fb7e25e9fcf67a9eef5fa13aabe2016e07 ]
    
    The strncpy() function may leave the destination string buffer
    unterminated, better use strlcpy() that we have a __weak fallback
    implementation for systems without it.
    
    This fixes this warning on an Alpine Linux Edge system with gcc 8.2:
    
      util/parse-events.c: In function 'print_symbol_events':
      util/parse-events.c:2465:4: error: 'strncpy' specified bound 100 equals destination size [-Werror=stringop-truncation]
          strncpy(name, syms->symbol, MAX_NAME_LEN);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      In function 'print_symbol_events.constprop',
          inlined from 'print_events' at util/parse-events.c:2508:2:
      util/parse-events.c:2465:4: error: 'strncpy' specified bound 100 equals destination size [-Werror=stringop-truncation]
          strncpy(name, syms->symbol, MAX_NAME_LEN);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      In function 'print_symbol_events.constprop',
          inlined from 'print_events' at util/parse-events.c:2511:2:
      util/parse-events.c:2465:4: error: 'strncpy' specified bound 100 equals destination size [-Werror=stringop-truncation]
          strncpy(name, syms->symbol, MAX_NAME_LEN);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      cc1: all warnings being treated as errors
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Fixes: 947b4ad1d198 ("perf list: Fix max event string size")
    Link: https://lkml.kernel.org/n/tip-b663e33bm6x8hrkie4uxh7u2@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b332b4cd25e7960b7e2693ec9162ea4b3eb2d360
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Dec 6 11:29:48 2018 -0300

    perf svghelper: Fix unchecked usage of strncpy()
    
    [ Upstream commit 2f5302533f306d5ee87bd375aef9ca35b91762cb ]
    
    The strncpy() function may leave the destination string buffer
    unterminated, better use strlcpy() that we have a __weak fallback
    implementation for systems without it.
    
    In this specific case this would only happen if fgets() was buggy, as
    its man page states that it should read one less byte than the size of
    the destination buffer, so that it can put the nul byte at the end of
    it, so it would never copy 255 non-nul chars, as fgets reads into the
    orig buffer at most 254 non-nul chars and terminates it. But lets just
    switch to strlcpy to keep the original intent and silence the gcc 8.2
    warning.
    
    This fixes this warning on an Alpine Linux Edge system with gcc 8.2:
    
      In function 'cpu_model',
          inlined from 'svg_cpu_box' at util/svghelper.c:378:2:
      util/svghelper.c:337:5: error: 'strncpy' output may be truncated copying 255 bytes from a string of length 255 [-Werror=stringop-truncation]
           strncpy(cpu_m, &buf[13], 255);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Arjan van de Ven <arjan@linux.intel.com>
    Fixes: f48d55ce7871 ("perf: Add a SVG helper library file")
    Link: https://lkml.kernel.org/n/tip-xzkoo0gyr56gej39ltivuh9g@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f54fc4c23eeae9556d6d91cc81cf04fee1d33bed
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Dec 3 11:11:36 2018 -0800

    perf tests ARM: Disable breakpoint tests 32-bit
    
    [ Upstream commit 24f967337f6d6bce931425769c0f5ff5cf2d212e ]
    
    The breakpoint tests on the ARM 32-bit kernel are broken in several
    ways.
    
    The breakpoint length requested does not necessarily match whether the
    function address has the Thumb bit (bit 0) set or not, and this does
    matter to the ARM kernel hw_breakpoint infrastructure. See [1] for
    background.
    
    [1]: https://lkml.org/lkml/2018/11/15/205
    
    As Will indicated, the overflow handling would require single-stepping
    which is not supported at the moment. Just disable those tests for the
    ARM 32-bit platforms and update the comment above to explain these
    limitations.
    
    Co-developed-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/20181203191138.2419-1-f.fainelli@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3e8c335e788f1c0274f1b4c9511425f4e5fb6b1
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Nov 26 14:12:52 2018 +0200

    perf intel-pt: Fix error with config term "pt=0"
    
    [ Upstream commit 1c6f709b9f96366cc47af23c05ecec9b8c0c392d ]
    
    Users should never use 'pt=0', but if they do it may give a meaningless
    error:
    
            $ perf record -e intel_pt/pt=0/u uname
            Error:
            The sys_perf_event_open() syscall returned with 22 (Invalid argument) for
            event (intel_pt/pt=0/u).
    
    Fix that by forcing 'pt=1'.
    
    Committer testing:
    
      # perf record -e intel_pt/pt=0/u uname
      Error:
      The sys_perf_event_open() syscall returned with 22 (Invalid argument) for event (intel_pt/pt=0/u).
      /bin/dmesg | grep -i perf may provide additional information.
    
      # perf record -e intel_pt/pt=0/u uname
      pt=0 doesn't make sense, forcing pt=1
      Linux
      [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 0.020 MB perf.data ]
      #
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Link: http://lkml.kernel.org/r/b7c5b4e5-9497-10e5-fd43-5f3e4a0fe51d@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f74fc96e32ab43bfcb91eeb8f144e4fb16b6d6d0
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Thu Dec 13 13:58:39 2018 +0900

    tty/serial: do not free trasnmit buffer page under port lock
    
    [ Upstream commit d72402145ace0697a6a9e8e75a3de5bf3375f78d ]
    
    LKP has hit yet another circular locking dependency between uart
    console drivers and debugobjects [1]:
    
         CPU0                                    CPU1
    
                                                rhltable_init()
                                                 __init_work()
                                                  debug_object_init
         uart_shutdown()                          /* db->lock */
          /* uart_port->lock */                    debug_print_object()
           free_page()                              printk()
                                                     call_console_drivers()
            debug_check_no_obj_freed()                /* uart_port->lock */
             /* db->lock */
              debug_print_object()
    
    So there are two dependency chains:
            uart_port->lock -> db->lock
    And
            db->lock -> uart_port->lock
    
    This particular circular locking dependency can be addressed in several
    ways:
    
    a) One way would be to move debug_print_object() out of db->lock scope
       and, thus, break the db->lock -> uart_port->lock chain.
    b) Another one would be to free() transmit buffer page out of db->lock
       in UART code; which is what this patch does.
    
    It makes sense to apply a) and b) independently: there are too many things
    going on behind free(), none of which depend on uart_port->lock.
    
    The patch fixes transmit buffer page free() in uart_shutdown() and,
    additionally, in uart_port_startup() (as was suggested by Dmitry Safonov).
    
    [1] https://lore.kernel.org/lkml/20181211091154.GL23332@shao2-debian/T/#u
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Slaby <jslaby@suse.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Waiman Long <longman@redhat.com>
    Cc: Dmitry Safonov <dima@arista.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 310f8296d6305249ea1f4bbb6fb9a9690e003451
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Wed Dec 12 15:14:17 2018 +0100

    btrfs: improve error handling of btrfs_add_link
    
    [ Upstream commit 1690dd41e0cb1dade80850ed8a3eb0121b96d22f ]
    
    In the error handling block, err holds the return value of either
    btrfs_del_root_ref() or btrfs_del_inode_ref() but it hasn't been checked
    since it's introduction with commit fe66a05a0679 (Btrfs: improve error
    handling for btrfs_insert_dir_item callers) in 2012.
    
    If the error handling in the error handling fails, there's not much left
    to do and the abort either happened earlier in the callees or is
    necessary here.
    
    So if one of btrfs_del_root_ref() or btrfs_del_inode_ref() failed, abort
    the transaction, but still return the original code of the failure
    stored in 'ret' as this will be reported to the user.
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38b17eee7074490c15128b596a35c837d9d94c60
Author: Anand Jain <anand.jain@oracle.com>
Date:   Wed Nov 14 13:50:26 2018 +0800

    btrfs: fix use-after-free due to race between replace start and cancel
    
    [ Upstream commit d189dd70e2556181732598956d808ea53cc8774e ]
    
    The device replace cancel thread can race with the replace start thread
    and if fs_info::scrubs_running is not yet set, btrfs_scrub_cancel() will
    fail to stop the scrub thread.
    
    The scrub thread continues with the scrub for replace which then will
    try to write to the target device and which is already freed by the
    cancel thread.
    
    scrub_setup_ctx() warns as tgtdev is NULL.
    
      struct scrub_ctx *scrub_setup_ctx(struct btrfs_device *dev, int is_dev_replace)
      {
      ...
              if (is_dev_replace) {
                      WARN_ON(!fs_info->dev_replace.tgtdev);  <===
                      sctx->pages_per_wr_bio = SCRUB_PAGES_PER_WR_BIO;
                      sctx->wr_tgtdev = fs_info->dev_replace.tgtdev;
                      sctx->flush_all_writes = false;
              }
    
      [ 6724.497655] BTRFS info (device sdb): dev_replace from /dev/sdb (devid 1) to /dev/sdc started
      [ 6753.945017] BTRFS info (device sdb): dev_replace from /dev/sdb (devid 1) to /dev/sdc canceled
      [ 6852.426700] WARNING: CPU: 0 PID: 4494 at fs/btrfs/scrub.c:622 scrub_setup_ctx.isra.19+0x220/0x230 [btrfs]
      ...
      [ 6852.428928] RIP: 0010:scrub_setup_ctx.isra.19+0x220/0x230 [btrfs]
      ...
      [ 6852.432970] Call Trace:
      [ 6852.433202]  btrfs_scrub_dev+0x19b/0x5c0 [btrfs]
      [ 6852.433471]  btrfs_dev_replace_start+0x48c/0x6a0 [btrfs]
      [ 6852.433800]  btrfs_dev_replace_by_ioctl+0x3a/0x60 [btrfs]
      [ 6852.434097]  btrfs_ioctl+0x2476/0x2d20 [btrfs]
      [ 6852.434365]  ? do_sigaction+0x7d/0x1e0
      [ 6852.434623]  do_vfs_ioctl+0xa9/0x6c0
      [ 6852.434865]  ? syscall_trace_enter+0x1c8/0x310
      [ 6852.435124]  ? syscall_trace_enter+0x1c8/0x310
      [ 6852.435387]  ksys_ioctl+0x60/0x90
      [ 6852.435663]  __x64_sys_ioctl+0x16/0x20
      [ 6852.435907]  do_syscall_64+0x50/0x180
      [ 6852.436150]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Further, as the replace thread enters scrub_write_page_to_dev_replace()
    without the target device it panics:
    
      static int scrub_add_page_to_wr_bio(struct scrub_ctx *sctx,
                                          struct scrub_page *spage)
      {
      ...
            bio_set_dev(bio, sbio->dev->bdev); <======
    
      [ 6929.715145] BUG: unable to handle kernel NULL pointer dereference at 00000000000000a0
      ..
      [ 6929.717106] Workqueue: btrfs-scrub btrfs_scrub_helper [btrfs]
      [ 6929.717420] RIP: 0010:scrub_write_page_to_dev_replace+0xb4/0x260
      [btrfs]
      ..
      [ 6929.721430] Call Trace:
      [ 6929.721663]  scrub_write_block_to_dev_replace+0x3f/0x60 [btrfs]
      [ 6929.721975]  scrub_bio_end_io_worker+0x1af/0x490 [btrfs]
      [ 6929.722277]  normal_work_helper+0xf0/0x4c0 [btrfs]
      [ 6929.722552]  process_one_work+0x1f4/0x520
      [ 6929.722805]  ? process_one_work+0x16e/0x520
      [ 6929.723063]  worker_thread+0x46/0x3d0
      [ 6929.723313]  kthread+0xf8/0x130
      [ 6929.723544]  ? process_one_work+0x520/0x520
      [ 6929.723800]  ? kthread_delayed_work_timer_fn+0x80/0x80
      [ 6929.724081]  ret_from_fork+0x3a/0x50
    
    Fix this by letting the btrfs_dev_replace_finishing() to do the job of
    cleaning after the cancel, including freeing of the target device.
    btrfs_dev_replace_finishing() is called when btrfs_scub_dev() returns
    along with the scrub return status.
    
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 720b86a53a1024996708121abfd7bc490d68768f
Author: Hans van Kranenburg <hans.van.kranenburg@mendix.com>
Date:   Thu Oct 4 23:24:40 2018 +0200

    btrfs: alloc_chunk: fix more DUP stripe size handling
    
    [ Upstream commit baf92114c7e6dd6124aa3d506e4bc4b694da3bc3 ]
    
    Commit 92e222df7b "btrfs: alloc_chunk: fix DUP stripe size handling"
    fixed calculating the stripe_size for a new DUP chunk.
    
    However, the same calculation reappears a bit later, and that one was
    not changed yet. The resulting bug that is exposed is that the newly
    allocated device extents ('stripes') can have a few MiB overlap with the
    next thing stored after them, which is another device extent or the end
    of the disk.
    
    The scenario in which this can happen is:
    * The block device for the filesystem is less than 10GiB in size.
    * The amount of contiguous free unallocated disk space chosen to use for
      chunk allocation is 20% of the total device size, or a few MiB more or
      less.
    
    An example:
    - The filesystem device is 7880MiB (max_chunk_size gets set to 788MiB)
    - There's 1578MiB unallocated raw disk space left in one contiguous
      piece.
    
    In this case stripe_size is first calculated as 789MiB, (half of
    1578MiB).
    
    Since 789MiB (stripe_size * data_stripes) > 788MiB (max_chunk_size), we
    enter the if block. Now stripe_size value is immediately overwritten
    while calculating an adjusted value based on max_chunk_size, which ends
    up as 788MiB.
    
    Next, the value is rounded up to a 16MiB boundary, 800MiB, which is
    actually more than the value we had before. However, the last comparison
    fails to detect this, because it's comparing the value with the total
    amount of free space, which is about twice the size of stripe_size.
    
    In the example above, this means that the resulting raw disk space being
    allocated is 1600MiB, while only a gap of 1578MiB has been found. The
    second device extent object for this DUP chunk will overlap for 22MiB
    with whatever comes next.
    
    The underlying problem here is that the stripe_size is reused all the
    time for different things. So, when entering the code in the if block,
    stripe_size is immediately overwritten with something else. If later we
    decide we want to have the previous value back, then the logic to
    compute it was copy pasted in again.
    
    With this change, the value in stripe_size is not unnecessarily
    destroyed, so the duplicated calculation is not needed any more.
    
    Signed-off-by: Hans van Kranenburg <hans.van.kranenburg@mendix.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb5717a4a16592d22f3d5ca244b3e0a341b4062c
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Oct 5 17:45:54 2018 +0800

    btrfs: volumes: Make sure there is no overlap of dev extents at mount time
    
    [ Upstream commit 5eb193812a42dc49331f25137a38dfef9612d3e4 ]
    
    Enhance btrfs_verify_dev_extents() to remember previous checked dev
    extents, so it can verify no dev extents can overlap.
    
    Analysis from Hans:
    
    "Imagine allocating a DATA|DUP chunk.
    
     In the chunk allocator, we first set...
       max_stripe_size = SZ_1G;
       max_chunk_size = BTRFS_MAX_DATA_CHUNK_SIZE
     ... which is 10GiB.
    
     Then...
       /* we don't want a chunk larger than 10% of writeable space */
       max_chunk_size = min(div_factor(fs_devices->total_rw_bytes, 1),
                     max_chunk_size);
    
     Imagine we only have one 7880MiB block device in this filesystem. Now
     max_chunk_size is down to 788MiB.
    
     The next step in the code is to search for max_stripe_size * dev_stripes
     amount of free space on the device, which is in our example 1GiB * 2 =
     2GiB. Imagine the device has exactly 1578MiB free in one contiguous
     piece. This amount of bytes will be put in devices_info[ndevs - 1].max_avail
    
     Next we recalculate the stripe_size (which is actually the device extent
     length), based on the actual maximum amount of available raw disk space:
       stripe_size = div_u64(devices_info[ndevs - 1].max_avail, dev_stripes);
    
     stripe_size is now 789MiB
    
     Next we do...
       data_stripes = num_stripes / ncopies
     ...where data_stripes ends up as 1, because num_stripes is 2 (the amount
     of device extents we're going to have), and DUP has ncopies 2.
    
     Next there's a check...
       if (stripe_size * data_stripes > max_chunk_size)
     ...which matches because 789MiB * 1 > 788MiB.
    
     We go into the if code, and next is...
       stripe_size = div_u64(max_chunk_size, data_stripes);
     ...which resets stripe_size to max_chunk_size: 788MiB
    
     Next is a fun one...
       /* bump the answer up to a 16MB boundary */
       stripe_size = round_up(stripe_size, SZ_16M);
     ...which changes stripe_size from 788MiB to 800MiB.
    
     We're not done changing stripe_size yet...
       /* But don't go higher than the limits we found while searching
        * for free extents
        */
       stripe_size = min(devices_info[ndevs - 1].max_avail,
                  stripe_size);
    
     This is bad. max_avail is twice the stripe_size (we need to fit 2 device
     extents on the same device for DUP).
    
     The result here is that 800MiB < 1578MiB, so it's unchanged. However,
     the resulting DUP chunk will need 1600MiB disk space, which isn't there,
     and the second dev_extent might extend into the next thing (next
     dev_extent? end of device?) for 22MiB.
    
     The last shown line of code relies on a situation where there's twice
     the value of stripe_size present as value for the variable stripe_size
     when it's DUP. This was actually the case before commit 92e222df7b
     "btrfs: alloc_chunk: fix DUP stripe size handling", from which I quote:
       "[...] in the meantime there's a check to see if the stripe_size does
     not exceed max_chunk_size. Since during this check stripe_size is twice
     the amount as intended, the check will reduce the stripe_size to
     max_chunk_size if the actual correct to be used stripe_size is more than
     half the amount of max_chunk_size."
    
     In the previous version of the code, the 16MiB alignment (why is this
     done, by the way?) would result in a 50% chance that it would actually
     do an 8MiB alignment for the individual dev_extents, since it was
     operating on double the size. Does this matter?
    
     Does it matter that stripe_size can be set to anything which is not
     16MiB aligned because of the amount of remaining available disk space
     which is just taken?
    
     What is the main purpose of this round_up?
    
     The most straightforward thing to do seems something like...
       stripe_size = min(
           div_u64(devices_info[ndevs - 1].max_avail, dev_stripes),
           stripe_size
       )
     ..just putting half of the max_avail into stripe_size."
    
    Link: https://lore.kernel.org/linux-btrfs/b3461a38-e5f8-f41d-c67c-2efac8129054@mendix.com/
    Reported-by: Hans van Kranenburg <hans.van.kranenburg@mendix.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    [ add analysis from report ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c21991ed17e9d3f478f16aaf9c3b7468bf1f5cea
Author: Jonas Danielsson <jonas@orbital-systems.com>
Date:   Fri Oct 19 16:40:05 2018 +0200

    mmc: atmel-mci: do not assume idle after atmci_request_end
    
    [ Upstream commit ae460c115b7aa50c9a36cf78fced07b27962c9d0 ]
    
    On our AT91SAM9260 board we use the same sdio bus for wifi and for the
    sd card slot. This caused the atmel-mci to give the following splat on
    the serial console:
    
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 538 at drivers/mmc/host/atmel-mci.c:859 atmci_send_command+0x24/0x44
      Modules linked in:
      CPU: 0 PID: 538 Comm: mmcqd/0 Not tainted 4.14.76 #14
      Hardware name: Atmel AT91SAM9
      [<c000fccc>] (unwind_backtrace) from [<c000d3dc>] (show_stack+0x10/0x14)
      [<c000d3dc>] (show_stack) from [<c0017644>] (__warn+0xd8/0xf4)
      [<c0017644>] (__warn) from [<c0017704>] (warn_slowpath_null+0x1c/0x24)
      [<c0017704>] (warn_slowpath_null) from [<c033bb9c>] (atmci_send_command+0x24/0x44)
      [<c033bb9c>] (atmci_send_command) from [<c033e984>] (atmci_start_request+0x1f4/0x2dc)
      [<c033e984>] (atmci_start_request) from [<c033f3b4>] (atmci_request+0xf0/0x164)
      [<c033f3b4>] (atmci_request) from [<c0327108>] (mmc_start_request+0x280/0x2d0)
      [<c0327108>] (mmc_start_request) from [<c032800c>] (mmc_start_areq+0x230/0x330)
      [<c032800c>] (mmc_start_areq) from [<c03366f8>] (mmc_blk_issue_rw_rq+0xc4/0x310)
      [<c03366f8>] (mmc_blk_issue_rw_rq) from [<c03372c4>] (mmc_blk_issue_rq+0x118/0x5ac)
      [<c03372c4>] (mmc_blk_issue_rq) from [<c033781c>] (mmc_queue_thread+0xc4/0x118)
      [<c033781c>] (mmc_queue_thread) from [<c002daf8>] (kthread+0x100/0x118)
      [<c002daf8>] (kthread) from [<c000a580>] (ret_from_fork+0x14/0x34)
      ---[ end trace 594371ddfa284bd6 ]---
    
    This is:
      WARN_ON(host->cmd);
    
    This was fixed on our board by letting atmci_request_end determine what
    state we are in. Instead of unconditionally setting it to STATE_IDLE on
    STATE_END_REQUEST.
    
    Signed-off-by: Jonas Danielsson <jonas@orbital-systems.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 461991104dcb0f3e601128e707833ea8cf1ceb46
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Dec 11 20:00:45 2018 +0900

    kconfig: fix memory leak when EOF is encountered in quotation
    
    [ Upstream commit fbac5977d81cb2b2b7e37b11c459055d9585273c ]
    
    An unterminated string literal followed by new line is passed to the
    parser (with "multi-line strings not supported" warning shown), then
    handled properly there.
    
    On the other hand, an unterminated string literal at end of file is
    never passed to the parser, then results in memory leak.
    
    [Test Code]
    
      ----------(Kconfig begin)----------
      source "Kconfig.inc"
    
      config A
              bool "a"
      -----------(Kconfig end)-----------
    
      --------(Kconfig.inc begin)--------
      config B
              bool "b\No new line at end of file
      ---------(Kconfig.inc end)---------
    
    [Summary from Valgrind]
    
      Before the fix:
    
        LEAK SUMMARY:
           definitely lost: 16 bytes in 1 blocks
           ...
    
      After the fix:
    
        LEAK SUMMARY:
           definitely lost: 0 bytes in 0 blocks
           ...
    
    Eliminate the memory leak path by handling this case. Of course, such
    a Kconfig file is wrong already, so I will add an error message later.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba8efcdc5779d549eda39e48d243522e37da9032
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Dec 11 20:00:44 2018 +0900

    kconfig: fix file name and line number of warn_ignored_character()
    
    [ Upstream commit 77c1c0fa8b1477c5799bdad65026ea5ff676da44 ]
    
    Currently, warn_ignore_character() displays invalid file name and
    line number.
    
    The lexer should use current_file->name and yylineno, while the parser
    should use zconf_curname() and zconf_lineno().
    
    This difference comes from that the lexer is always going ahead
    of the parser. The parser needs to look ahead one token to make a
    shift/reduce decision, so the lexer is requested to scan more text
    from the input file.
    
    This commit fixes the warning message from warn_ignored_character().
    
    [Test Code]
    
      ----(Kconfig begin)----
      /
      -----(Kconfig end)-----
    
    [Output]
    
      Before the fix:
    
      <none>:0:warning: ignoring unsupported character '/'
    
      After the fix:
    
      Kconfig:1:warning: ignoring unsupported character '/'
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 344b51e7ce13589058e01bbd7e0be7170fef6c90
Author: Jiong Wang <jiong.wang@netronome.com>
Date:   Fri Dec 7 12:16:18 2018 -0500

    bpf: relax verifier restriction on BPF_MOV | BPF_ALU
    
    [ Upstream commit e434b8cdf788568ba65a0a0fd9f3cb41f3ca1803 ]
    
    Currently, the destination register is marked as unknown for 32-bit
    sub-register move (BPF_MOV | BPF_ALU) whenever the source register type is
    SCALAR_VALUE.
    
    This is too conservative that some valid cases will be rejected.
    Especially, this may turn a constant scalar value into unknown value that
    could break some assumptions of verifier.
    
    For example, test_l4lb_noinline.c has the following C code:
    
        struct real_definition *dst
    
    1:  if (!get_packet_dst(&dst, &pckt, vip_info, is_ipv6))
    2:    return TC_ACT_SHOT;
    3:
    4:  if (dst->flags & F_IPV6) {
    
    get_packet_dst is responsible for initializing "dst" into valid pointer and
    return true (1), otherwise return false (0). The compiled instruction
    sequence using alu32 will be:
    
      412: (54) (u32) r7 &= (u32) 1
      413: (bc) (u32) r0 = (u32) r7
      414: (95) exit
    
    insn 413, a BPF_MOV | BPF_ALU, however will turn r0 into unknown value even
    r7 contains SCALAR_VALUE 1.
    
    This causes trouble when verifier is walking the code path that hasn't
    initialized "dst" inside get_packet_dst, for which case 0 is returned and
    we would then expect verifier concluding line 1 in the above C code pass
    the "if" check, therefore would skip fall through path starting at line 4.
    Now, because r0 returned from callee has became unknown value, so verifier
    won't skip analyzing path starting at line 4 and "dst->flags" requires
    dereferencing the pointer "dst" which actually hasn't be initialized for
    this path.
    
    This patch relaxed the code marking sub-register move destination. For a
    SCALAR_VALUE, it is safe to just copy the value from source then truncate
    it into 32-bit.
    
    A unit test also included to demonstrate this issue. This test will fail
    before this patch.
    
    This relaxation could let verifier skipping more paths for conditional
    comparison against immediate. It also let verifier recording a more
    accurate/strict value for one register at one state, if this state end up
    with going through exit without rejection and it is used for state
    comparison later, then it is possible an inaccurate/permissive value is
    better. So the real impact on verifier processed insn number is complex.
    But in all, without this fix, valid program could be rejected.
    
    >From real benchmarking on kernel selftests and Cilium bpf tests, there is
    no impact on processed instruction number when tests ares compiled with
    default compilation options. There is slightly improvements when they are
    compiled with -mattr=+alu32 after this patch.
    
    Also, test_xdp_noinline/-mattr=+alu32 now passed verification. It is
    rejected before this fix.
    
    Insn processed before/after this patch:
    
                            default     -mattr=+alu32
    
    Kernel selftest
    
    ===
    test_xdp.o              371/371      369/369
    test_l4lb.o             6345/6345    5623/5623
    test_xdp_noinline.o     2971/2971    rejected/2727
    test_tcp_estates.o      429/429      430/430
    
    Cilium bpf
    ===
    bpf_lb-DLB_L3.o:        2085/2085     1685/1687
    bpf_lb-DLB_L4.o:        2287/2287     1986/1982
    bpf_lb-DUNKNOWN.o:      690/690       622/622
    bpf_lxc.o:              95033/95033   N/A
    bpf_netdev.o:           7245/7245     N/A
    bpf_overlay.o:          2898/2898     3085/2947
    
    NOTE:
      - bpf_lxc.o and bpf_netdev.o compiled by -mattr=+alu32 are rejected by
        verifier due to another issue inside verifier on supporting alu32
        binary.
      - Each cilium bpf program could generate several processed insn number,
        above number is sum of them.
    
    v1->v2:
     - Restrict the change on SCALAR_VALUE.
     - Update benchmark numbers on Cilium bpf tests.
    
    Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfbf8c981f83bd31e2d165aee46f41ed37d457ff
Author: Will Deacon <will@kernel.org>
Date:   Mon Dec 10 13:39:48 2018 +0000

    arm64: Fix minor issues with the dcache_by_line_op macro
    
    [ Upstream commit 33309ecda0070506c49182530abe7728850ebe78 ]
    
    The dcache_by_line_op macro suffers from a couple of small problems:
    
    First, the GAS directives that are currently being used rely on
    assembler behavior that is not documented, and probably not guaranteed
    to produce the correct behavior going forward. As a result, we end up
    with some undefined symbols in cache.o:
    
    $ nm arch/arm64/mm/cache.o
             ...
             U civac
             ...
             U cvac
             U cvap
             U cvau
    
    This is due to the fact that the comparisons used to select the
    operation type in the dcache_by_line_op macro are comparing symbols
    not strings, and even though it seems that GAS is doing the right
    thing here (undefined symbols by the same name are equal to each
    other), it seems unwise to rely on this.
    
    Second, when patching in a DC CVAP instruction on CPUs that support it,
    the fallback path consists of a DC CVAU instruction which may be
    affected by CPU errata that require ARM64_WORKAROUND_CLEAN_CACHE.
    
    Solve these issues by unrolling the various maintenance routines and
    using the conditional directives that are documented as operating on
    strings. To avoid the complexity of nested alternatives, we move the
    DC CVAP patching to __clean_dcache_area_pop, falling back to a branch
    to __clean_dcache_area_poc if DCPOP is not supported by the CPU.
    
    Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Suggested-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73f0b2e36e4019c12b2784bbb1d6533878ecda19
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Thu Nov 15 15:30:26 2018 +0100

    clk: imx6q: reset exclusive gates on init
    
    [ Upstream commit f7542d817733f461258fd3a47d77da35b2d9fc81 ]
    
    The exclusive gates may be set up in the wrong way by software running
    before the clock driver comes up. In that case the exclusive setup is
    locked in its initial state, as the complementary function can't be
    activated without disabling the initial setup first.
    
    To avoid this lock situation, reset the exclusive gates to the off
    state and allow the kernel to provide the proper setup.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Dong Aisheng <Aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f183b332398b8231a76abfbb559bd01a1adcb46
Author: Qian Cai <cai@lca.pw>
Date:   Fri Dec 7 17:34:49 2018 -0500

    arm64: kasan: Increase stack size for KASAN_EXTRA
    
    [ Upstream commit 6e8830674ea77f57d57a33cca09083b117a71f41 ]
    
    If the kernel is configured with KASAN_EXTRA, the stack size is
    increased significantly due to setting the GCC -fstack-reuse option to
    "none" [1]. As a result, it can trigger a stack overrun quite often with
    32k stack size compiled using GCC 8. For example, this reproducer
    
      https://github.com/linux-test-project/ltp/blob/master/testcases/kernel/syscalls/madvise/madvise06.c
    
    can trigger a "corrupted stack end detected inside scheduler" very
    reliably with CONFIG_SCHED_STACK_END_CHECK enabled. There are other
    reports at:
    
      https://lore.kernel.org/lkml/1542144497.12945.29.camel@gmx.us/
      https://lore.kernel.org/lkml/721E7B42-2D55-4866-9C1A-3E8D64F33F9C@gmx.us/
    
    There are just too many functions that could have a large stack with
    KASAN_EXTRA due to large local variables that have been called over and
    over again without being able to reuse the stacks. Some noticiable ones
    are,
    
    size
    7536 shrink_inactive_list
    7440 shrink_page_list
    6560 fscache_stats_show
    3920 jbd2_journal_commit_transaction
    3216 try_to_unmap_one
    3072 migrate_page_move_mapping
    3584 migrate_misplaced_transhuge_page
    3920 ip_vs_lblcr_schedule
    4304 lpfc_nvme_info_show
    3888 lpfc_debugfs_nvmestat_data.constprop
    
    There are other 49 functions over 2k in size while compiling kernel with
    "-Wframe-larger-than=" on this machine. Hence, it is too much work to
    change Makefiles for each object to compile without
    -fsanitize-address-use-after-scope individually.
    
    [1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715#c23
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 656257cf1cbdadbc37539aa3bc5a1fa9a9071874
Author: Dmitry V. Levin <ldv@altlinux.org>
Date:   Mon Dec 10 02:00:47 2018 +0300

    selftests: do not macro-expand failed assertion expressions
    
    [ Upstream commit b708a3cc9600390ccaa2b68a88087dd265154b2b ]
    
    I've stumbled over the current macro-expand behaviour of the test
    harness:
    
    $ gcc -Wall -xc - <<'__EOF__'
    TEST(macro) {
            int status = 0;
            ASSERT_TRUE(WIFSIGNALED(status));
    }
    TEST_HARNESS_MAIN
    __EOF__
    $ ./a.out
    [==========] Running 1 tests from 1 test cases.
    [ RUN      ] global.macro
    <stdin>:4:global.macro:Expected 0 (0) != (((signed char) (((status) & 0x7f) + 1) >> 1) > 0) (0)
    global.macro: Test terminated by assertion
    [     FAIL ] global.macro
    [==========] 0 / 1 tests passed.
    [  FAILED  ]
    
    With this change the output of the same test looks much more
    comprehensible:
    
    [==========] Running 1 tests from 1 test cases.
    [ RUN      ] global.macro
    <stdin>:4:global.macro:Expected 0 (0) != WIFSIGNALED(status) (0)
    global.macro: Test terminated by assertion
    [     FAIL ] global.macro
    [==========] 0 / 1 tests passed.
    [  FAILED  ]
    
    The issue is very similar to the bug fixed in glibc assert(3)
    three years ago:
    https://sourceware.org/bugzilla/show_bug.cgi?id=18604
    
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Will Drewry <wad@chromium.org>
    Cc: linux-kselftest@vger.kernel.org
    Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
    Acked-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ad8148ce042a82ccfff6d629a60aa221f0e012e
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Nov 27 15:51:58 2018 -0800

    scsi: target/core: Make sure that target_wait_for_sess_cmds() waits long enough
    
    [ Upstream commit ad669505c4e9db9af9faeb5c51aa399326a80d91 ]
    
    A session must only be released after all code that accesses the session
    structure has finished. Make sure that this is the case by introducing a
    new command counter per session that is only decremented after the
    .release_cmd() callback has finished. This patch fixes the following crash:
    
    BUG: KASAN: use-after-free in do_raw_spin_lock+0x1c/0x130
    Read of size 4 at addr ffff8801534b16e4 by task rmdir/14805
    CPU: 16 PID: 14805 Comm: rmdir Not tainted 4.18.0-rc2-dbg+ #5
    Call Trace:
    dump_stack+0xa4/0xf5
    print_address_description+0x6f/0x270
    kasan_report+0x241/0x360
    __asan_load4+0x78/0x80
    do_raw_spin_lock+0x1c/0x130
    _raw_spin_lock_irqsave+0x52/0x60
    srpt_set_ch_state+0x27/0x70 [ib_srpt]
    srpt_disconnect_ch+0x1b/0xc0 [ib_srpt]
    srpt_close_session+0xa8/0x260 [ib_srpt]
    target_shutdown_sessions+0x170/0x180 [target_core_mod]
    core_tpg_del_initiator_node_acl+0xf3/0x200 [target_core_mod]
    target_fabric_nacl_base_release+0x25/0x30 [target_core_mod]
    config_item_release+0x9c/0x110 [configfs]
    config_item_put+0x26/0x30 [configfs]
    configfs_rmdir+0x3b8/0x510 [configfs]
    vfs_rmdir+0xb3/0x1e0
    do_rmdir+0x262/0x2c0
    do_syscall_64+0x77/0x230
    entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Cc: Nicholas Bellinger <nab@linux-iscsi.org>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: David Disseldorp <ddiss@suse.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25d3546acd60cf1898dd75f16d1e1b78b23be270
Author: David Disseldorp <ddiss@suse.de>
Date:   Wed Dec 5 13:18:34 2018 +0100

    scsi: target: use consistent left-aligned ASCII INQUIRY data
    
    [ Upstream commit 0de263577de5d5e052be5f4f93334e63cc8a7f0b ]
    
    spc5r17.pdf specifies:
    
      4.3.1 ASCII data field requirements
      ASCII data fields shall contain only ASCII printable characters (i.e.,
      code values 20h to 7Eh) and may be terminated with one or more ASCII null
      (00h) characters.  ASCII data fields described as being left-aligned
      shall have any unused bytes at the end of the field (i.e., highest
      offset) and the unused bytes shall be filled with ASCII space characters
      (20h).
    
    LIO currently space-pads the T10 VENDOR IDENTIFICATION and PRODUCT
    IDENTIFICATION fields in the standard INQUIRY data. However, the PRODUCT
    REVISION LEVEL field in the standard INQUIRY data as well as the T10 VENDOR
    IDENTIFICATION field in the INQUIRY Device Identification VPD Page are
    zero-terminated/zero-padded.
    
    Fix this inconsistency by using space-padding for all of the above fields.
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Bryant G. Ly <bly@catalogicsoftware.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50deccdceb59cef130e039c502d3d1419e81417e
Author: yupeng <yupeng0921@gmail.com>
Date:   Wed Dec 5 18:56:28 2018 -0800

    net: call sk_dst_reset when set SO_DONTROUTE
    
    [ Upstream commit 0fbe82e628c817e292ff588cd5847fc935e025f2 ]
    
    after set SO_DONTROUTE to 1, the IP layer should not route packets if
    the dest IP address is not in link scope. But if the socket has cached
    the dst_entry, such packets would be routed until the sk_dst_cache
    expires. So we should clean the sk_dst_cache when a user set
    SO_DONTROUTE option. Below are server/client python scripts which
    could reprodue this issue:
    
    server side code:
    
    ==========================================================================
    import socket
    import struct
    import time
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', 9000))
    s.listen(1)
    sock, addr = s.accept()
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_DONTROUTE, struct.pack('i', 1))
    while True:
        sock.send(b'foo')
        time.sleep(1)
    ==========================================================================
    
    client side code:
    ==========================================================================
    import socket
    import time
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('server_address', 9000))
    while True:
        data = s.recv(1024)
        print(data)
    ==========================================================================
    
    Signed-off-by: yupeng <yupeng0921@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd4c7fe100fcff15e262cb2221841f0f8caf6a63
Author: Gao Xiang <xiang@kernel.org>
Date:   Sat Dec 8 00:19:12 2018 +0800

    staging: erofs: fix use-after-free of on-stack `z_erofs_vle_unzip_io'
    
    [ Upstream commit 848bd9acdcd00c164b42b14aacec242949ecd471 ]
    
    The root cause is the race as follows:
     Thread #0                         Thread #1
    
     z_erofs_vle_unzip_kickoff         z_erofs_submit_and_unzip
    
                                        struct z_erofs_vle_unzip_io io[]
       atomic_add_return()
                                        wait_event()
                                        [end of function]
       wake_up()
    
    Fix it by taking the waitqueue lock between atomic_add_return and
    wake_up to close such the race.
    
    kernel message:
    
    Unable to handle kernel paging request at virtual address 97f7052caa1303dc
    ...
    Workqueue: kverityd verity_work
    task: ffffffe32bcb8000 task.stack: ffffffe3298a0000
    PC is at __wake_up_common+0x48/0xa8
    LR is at __wake_up+0x3c/0x58
    ...
    Call trace:
    ...
    [<ffffff94a08ff648>] __wake_up_common+0x48/0xa8
    [<ffffff94a08ff8b8>] __wake_up+0x3c/0x58
    [<ffffff94a0c11b60>] z_erofs_vle_unzip_kickoff+0x40/0x64
    [<ffffff94a0c118e4>] z_erofs_vle_read_endio+0x94/0x134
    [<ffffff94a0c83c9c>] bio_endio+0xe4/0xf8
    [<ffffff94a1076540>] dec_pending+0x134/0x32c
    [<ffffff94a1076f28>] clone_endio+0x90/0xf4
    [<ffffff94a0c83c9c>] bio_endio+0xe4/0xf8
    [<ffffff94a1095024>] verity_work+0x210/0x368
    [<ffffff94a08c4150>] process_one_work+0x188/0x4b4
    [<ffffff94a08c45bc>] worker_thread+0x140/0x458
    [<ffffff94a08cad48>] kthread+0xec/0x108
    [<ffffff94a0883ab4>] ret_from_fork+0x10/0x1c
    Code: d1006273 54000260 f9400804 b9400019 (b85fc081)
    ---[ end trace be9dde154f677cd1 ]---
    
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38be2cbae3009a09ff953976e920df12300f65b6
Author: Vivek Gautam <vivek.gautam@codeaurora.org>
Date:   Wed Dec 5 03:31:51 2018 -0500

    media: venus: core: Set dma maximum segment size
    
    [ Upstream commit de2563bce7a157f5296bab94f3843d7d64fb14b4 ]
    
    Turning on CONFIG_DMA_API_DEBUG_SG results in the following error:
    
    [  460.308650] ------------[ cut here ]------------
    [  460.313490] qcom-venus aa00000.video-codec: DMA-API: mapping sg segment longer than device claims to support [len=4194304] [max=65536]
    [  460.326017] WARNING: CPU: 3 PID: 3555 at src/kernel/dma/debug.c:1301 debug_dma_map_sg+0x174/0x254
    [  460.338888] Modules linked in: venus_dec venus_enc videobuf2_dma_sg videobuf2_memops hci_uart btqca bluetooth venus_core v4l2_mem2mem videobuf2_v4l2 videobuf2_common ath10k_snoc ath10k_core ath lzo lzo_compress zramjoydev
    [  460.375811] CPU: 3 PID: 3555 Comm: V4L2DecoderThre Tainted: G        W         4.19.1 #82
    [  460.384223] Hardware name: Google Cheza (rev1) (DT)
    [  460.389251] pstate: 60400009 (nZCv daif +PAN -UAO)
    [  460.394191] pc : debug_dma_map_sg+0x174/0x254
    [  460.398680] lr : debug_dma_map_sg+0x174/0x254
    [  460.403162] sp : ffffff80200c37d0
    [  460.406583] x29: ffffff80200c3830 x28: 0000000000010000
    [  460.412056] x27: 00000000ffffffff x26: ffffffc0f785ea80
    [  460.417532] x25: 0000000000000000 x24: ffffffc0f4ea1290
    [  460.423001] x23: ffffffc09e700300 x22: ffffffc0f4ea1290
    [  460.428470] x21: ffffff8009037000 x20: 0000000000000001
    [  460.433936] x19: ffffff80091b0000 x18: 0000000000000000
    [  460.439411] x17: 0000000000000000 x16: 000000000000f251
    [  460.444885] x15: 0000000000000006 x14: 0720072007200720
    [  460.450354] x13: ffffff800af536e0 x12: 0000000000000000
    [  460.455822] x11: 0000000000000000 x10: 0000000000000000
    [  460.461288] x9 : 537944d9c6c48d00 x8 : 537944d9c6c48d00
    [  460.466758] x7 : 0000000000000000 x6 : ffffffc0f8d98f80
    [  460.472230] x5 : 0000000000000000 x4 : 0000000000000000
    [  460.477703] x3 : 000000000000008a x2 : ffffffc0fdb13948
    [  460.483170] x1 : ffffffc0fdb0b0b0 x0 : 000000000000007a
    [  460.488640] Call trace:
    [  460.491165]  debug_dma_map_sg+0x174/0x254
    [  460.495307]  vb2_dma_sg_alloc+0x260/0x2dc [videobuf2_dma_sg]
    [  460.501150]  __vb2_queue_alloc+0x164/0x374 [videobuf2_common]
    [  460.507076]  vb2_core_reqbufs+0xfc/0x23c [videobuf2_common]
    [  460.512815]  vb2_reqbufs+0x44/0x5c [videobuf2_v4l2]
    [  460.517853]  v4l2_m2m_reqbufs+0x44/0x78 [v4l2_mem2mem]
    [  460.523144]  v4l2_m2m_ioctl_reqbufs+0x1c/0x28 [v4l2_mem2mem]
    [  460.528976]  v4l_reqbufs+0x30/0x40
    [  460.532480]  __video_do_ioctl+0x36c/0x454
    [  460.536610]  video_usercopy+0x25c/0x51c
    [  460.540572]  video_ioctl2+0x38/0x48
    [  460.544176]  v4l2_ioctl+0x60/0x74
    [  460.547602]  do_video_ioctl+0x948/0x3520
    [  460.551648]  v4l2_compat_ioctl32+0x60/0x98
    [  460.555872]  __arm64_compat_sys_ioctl+0x134/0x20c
    [  460.560718]  el0_svc_common+0x9c/0xe4
    [  460.564498]  el0_svc_compat_handler+0x2c/0x38
    [  460.568982]  el0_svc_compat+0x8/0x18
    [  460.572672] ---[ end trace ce209b87b2f3af88 ]---
    
    >From above warning one would deduce that the sg segment will overflow
    the device's capacity. In reality, the hardware can accommodate larger
    sg segments.
    So, initialize the max segment size properly to weed out this warning.
    
    Based on a similar patch sent by Sean Paul for mdss:
    https://patchwork.kernel.org/patch/10671457/
    
    Signed-off-by: Vivek Gautam <vivek.gautam@codeaurora.org>
    Acked-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9df6861a35d1155a153bee3b2abee65f6ff4417b
Author: Yu Zhao <yuzhao@google.com>
Date:   Tue Dec 4 15:42:53 2018 -0700

    ASoC: use dma_ops of parent device for acp_audio_dma
    
    [ Upstream commit 23aa128bb28d9da69bb1bdb2b70e50128857884a ]
    
    AMD platform device acp_audio_dma can only be created by parent PCI
    device driver (drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c). Pass struct
    device of the parent to snd_pcm_lib_preallocate_pages() so
    dma_alloc_coherent() can use correct dma_ops. Otherwise, it will
    use default dma_ops which is nommu_dma_ops on x86_64 even when
    IOMMU is enabled and set to non passthrough mode.
    
    Though platform device inherits some dma related fields during its
    creation in mfd_add_device(), we can't simply pass its struct device
    to snd_pcm_lib_preallocate_pages() because dma_ops is not among the
    inherited fields. Even it were, drivers/iommu/amd_iommu.c would
    ignore it because get_device_id() doesn't handle platform device.
    
    This change shouldn't give us any trouble even struct device of the
    parent becomes null or represents some non PCI device in the future,
    because get_dma_ops() correctly handles null struct device or uses
    the default dma_ops if struct device doesn't have it set.
    
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 597a09e0ce2cc8f3ea4bb5de73fafa37645f8398
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Oct 18 16:03:06 2018 -0400

    media: firewire: Fix app_info parameter type in avc_ca{,_app}_info
    
    [ Upstream commit b2e9a4eda11fd2cb1e6714e9ad3f455c402568ff ]
    
    Clang warns:
    
    drivers/media/firewire/firedtv-avc.c:999:45: warning: implicit
    conversion from 'int' to 'char' changes value from 159 to -97
    [-Wconstant-conversion]
            app_info[0] = (EN50221_TAG_APP_INFO >> 16) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    drivers/media/firewire/firedtv-avc.c:1000:45: warning: implicit
    conversion from 'int' to 'char' changes value from 128 to -128
    [-Wconstant-conversion]
            app_info[1] = (EN50221_TAG_APP_INFO >>  8) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    drivers/media/firewire/firedtv-avc.c:1040:44: warning: implicit
    conversion from 'int' to 'char' changes value from 159 to -97
    [-Wconstant-conversion]
            app_info[0] = (EN50221_TAG_CA_INFO >> 16) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    drivers/media/firewire/firedtv-avc.c:1041:44: warning: implicit
    conversion from 'int' to 'char' changes value from 128 to -128
    [-Wconstant-conversion]
            app_info[1] = (EN50221_TAG_CA_INFO >>  8) & 0xff;
                        ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    4 warnings generated.
    
    Change app_info's type to unsigned char to match the type of the
    member msg in struct ca_msg, which is the only thing passed into the
    app_info parameter in this function.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/105
    
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3049cdc2840911c5d82f6c065a9d05e41622749a
Author: Breno Leitao <leitao@debian.org>
Date:   Fri Nov 23 14:30:11 2018 -0200

    powerpc/pseries/cpuidle: Fix preempt warning
    
    [ Upstream commit 2b038cbc5fcf12a7ee1cc9bfd5da1e46dacdee87 ]
    
    When booting a pseries kernel with PREEMPT enabled, it dumps the
    following warning:
    
       BUG: using smp_processor_id() in preemptible [00000000] code: swapper/0/1
       caller is pseries_processor_idle_init+0x5c/0x22c
       CPU: 13 PID: 1 Comm: swapper/0 Not tainted 4.20.0-rc3-00090-g12201a0128bc-dirty #828
       Call Trace:
       [c000000429437ab0] [c0000000009c8878] dump_stack+0xec/0x164 (unreliable)
       [c000000429437b00] [c0000000005f2f24] check_preemption_disabled+0x154/0x160
       [c000000429437b90] [c000000000cab8e8] pseries_processor_idle_init+0x5c/0x22c
       [c000000429437c10] [c000000000010ed4] do_one_initcall+0x64/0x300
       [c000000429437ce0] [c000000000c54500] kernel_init_freeable+0x3f0/0x500
       [c000000429437db0] [c0000000000112dc] kernel_init+0x2c/0x160
       [c000000429437e20] [c00000000000c1d0] ret_from_kernel_thread+0x5c/0x6c
    
    This happens because the code calls get_lppaca() which calls
    get_paca() and it checks if preemption is disabled through
    check_preemption_disabled().
    
    Preemption should be disabled because the per CPU variable may make no
    sense if there is a preemption (and a CPU switch) after it reads the
    per CPU data and when it is used.
    
    In this device driver specifically, it is not a problem, because this
    code just needs to have access to one lppaca struct, and it does not
    matter if it is the current per CPU lppaca struct or not (i.e. when
    there is a preemption and a CPU migration).
    
    That said, the most appropriate fix seems to be related to avoiding
    the debug_smp_processor_id() call at get_paca(), instead of calling
    preempt_disable() before get_paca().
    
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 115a0d668793944dc4e39d9f89df57208466e9f3
Author: Breno Leitao <leitao@debian.org>
Date:   Thu Nov 8 15:12:42 2018 -0200

    powerpc/xmon: Fix invocation inside lock region
    
    [ Upstream commit 8d4a862276a9c30a269d368d324fb56529e6d5fd ]
    
    Currently xmon needs to get devtree_lock (through rtas_token()) during its
    invocation (at crash time). If there is a crash while devtree_lock is being
    held, then xmon tries to get the lock but spins forever and never get into
    the interactive debugger, as in the following case:
    
            int *ptr = NULL;
            raw_spin_lock_irqsave(&devtree_lock, flags);
            *ptr = 0xdeadbeef;
    
    This patch avoids calling rtas_token(), thus trying to get the same lock,
    at crash time. This new mechanism proposes getting the token at
    initialization time (xmon_init()) and just consuming it at crash time.
    
    This would allow xmon to be possible invoked independent of devtree_lock
    being held or not.
    
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 819e2e0760f3d6d04e07fff7e6328e42da8b3115
Author: Daniel Axtens <dja@axtens.net>
Date:   Sun Apr 23 00:53:49 2017 -0400

    media: uvcvideo: Refactor teardown of uvc on USB disconnect
    
    [ Upstream commit 10e1fdb95809ed21406f53b5b4f064673a1b9ceb ]
    
    Currently, disconnecting a USB webcam while it is in use prints out a
    number of warnings, such as:
    
    WARNING: CPU: 2 PID: 3118 at /build/linux-ezBi1T/linux-4.8.0/fs/sysfs/group.c:237 sysfs_remove_group+0x8b/0x90
    sysfs group ffffffffa7cd0780 not found for kobject 'event13'
    
    This has been noticed before. [0]
    
    This is because of the order in which things are torn down.
    
    If there are no streams active during a USB disconnect:
    
     - uvc_disconnect() is invoked via device_del() through the bus
       notifier mechanism.
    
     - this calls uvc_unregister_video().
    
     - uvc_unregister_video() unregisters the video device for each
       stream,
    
     - because there are no streams open, it calls uvc_delete()
    
     - uvc_delete() calls uvc_status_cleanup(), which cleans up the status
       input device.
    
     - uvc_delete() calls media_device_unregister(), which cleans up the
       media device
    
     - uvc_delete(), uvc_unregister_video() and uvc_disconnect() all
       return, and we end up back in device_del().
    
     - device_del() then cleans up the sysfs folder for the camera with
       dpm_sysfs_remove(). Because uvc_status_cleanup() and
       media_device_unregister() have already been called, this all works
       nicely.
    
    If, on the other hand, there *are* streams active during a USB disconnect:
    
     - uvc_disconnect() is invoked
    
     - this calls uvc_unregister_video()
    
     - uvc_unregister_video() unregisters the video device for each
       stream,
    
     - uvc_unregister_video() and uvc_disconnect() return, and we end up
       back in device_del().
    
     - device_del() then cleans up the sysfs folder for the camera with
       dpm_sysfs_remove(). Because the status input device and the media
       device are children of the USB device, this also deletes their
       sysfs folders.
    
     - Sometime later, the final stream is closed, invoking uvc_release().
    
     - uvc_release() calls uvc_delete()
    
     - uvc_delete() calls uvc_status_cleanup(), which cleans up the status
       input device. Because the sysfs directory has already been removed,
       this causes a WARNing.
    
     - uvc_delete() calls media_device_unregister(), which cleans up the
       media device. Because the sysfs directory has already been removed,
       this causes another WARNing.
    
    To fix this, we need to make sure the devices are always unregistered
    before the end of uvc_disconnect(). To this, move the unregistration
    into the disconnect path:
    
     - split uvc_status_cleanup() into two parts, one on disconnect that
       unregisters and one on delete that frees.
    
     - move v4l2_device_unregister() and media_device_unregister() into
       the disconnect path.
    
    [0]: https://lkml.org/lkml/2016/12/8/657
    
    [Renamed uvc_input_cleanup() to uvc_input_unregister()]
    
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 265242d82a3c6a8bd9120d06b4801f8d7ae9a346
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Sat Nov 3 16:38:18 2018 -0700

    pstore/ram: Do not treat empty buffers as valid
    
    [ Upstream commit 30696378f68a9e3dad6bfe55938b112e72af00c2 ]
    
    The ramoops backend currently calls persistent_ram_save_old() even
    if a buffer is empty. While this appears to work, it is does not seem
    like the right thing to do and could lead to future bugs so lets avoid
    that. It also prevents misleading prints in the logs which claim the
    buffer is valid.
    
    I got something like:
    
            found existing buffer, size 0, start 0
    
    When I was expecting:
    
            no valid data in buffer (sig = ...)
    
    This bails out early (and reports with pr_debug()), since it's an
    acceptable state.
    
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Co-developed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed99d79a158c1e9d8007ebbefc185a233b52cfd1
Author: A.s. Dong <aisheng.dong@nxp.com>
Date:   Wed Nov 14 13:02:00 2018 +0000

    clk: imx: make mux parent strings const
    
    [ Upstream commit 9e5ef7a57ca75a1b9411c46caeeb6881124284a3 ]
    
    As the commit 2893c379461a ("clk: make strings in parent name arrays
    const"), let's make the parent strings const, otherwise we may meet
    the following warning when compiling:
    
    drivers/clk/imx/clk-imx7ulp.c: In function 'imx7ulp_clocks_init':
    drivers/clk/imx/clk-imx7ulp.c:73:35: warning: passing argument 5 of
            'imx_clk_mux_flags' discards 'const' qualifier from pointer target type
    
      clks[IMX7ULP_CLK_APLL_PRE_SEL] = imx_clk_mux_flags("apll_pre_sel", base + 0x508, 0,
            1, pll_pre_sels, ARRAY_SIZE(pll_pre_sels), CLK_SET_PARENT_GATE);
                                       ^
    In file included from drivers/clk/imx/clk-imx7ulp.c:23:0:
    drivers/clk/imx/clk.h:200:27: note: expected 'const char **' but argument is
     of type 'const char * const*'
    ...
    
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c356972f27cc8194ecb1c0473d318a607300e7c2
Author: Daniel Santos <daniel.santos@pobox.com>
Date:   Fri Oct 19 03:30:20 2018 -0500

    jffs2: Fix use of uninitialized delayed_work, lockdep breakage
    
    [ Upstream commit a788c5272769ddbcdbab297cf386413eeac04463 ]
    
    jffs2_sync_fs makes the assumption that if CONFIG_JFFS2_FS_WRITEBUFFER
    is defined then a write buffer is available and has been initialized.
    However, this does is not the case when the mtd device has no
    out-of-band buffer:
    
    int jffs2_nand_flash_setup(struct jffs2_sb_info *c)
    {
            if (!c->mtd->oobsize)
                    return 0;
    ...
    
    The resulting call to cancel_delayed_work_sync passing a uninitialized
    (but zeroed) delayed_work struct forces lockdep to become disabled.
    
    [   90.050639] overlayfs: upper fs does not support tmpfile.
    [   90.652264] INFO: trying to register non-static key.
    [   90.662171] the code is fine but needs lockdep annotation.
    [   90.673090] turning off the locking correctness validator.
    [   90.684021] CPU: 0 PID: 1762 Comm: mount_root Not tainted 4.14.63 #0
    [   90.696672] Stack : 00000000 00000000 80d8f6a2 00000038 805f0000 80444600 8fe364f4 805dfbe7
    [   90.713349]         80563a30 000006e2 8068370c 00000001 00000000 00000001 8e2fdc48 ffffffff
    [   90.730020]         00000000 00000000 80d90000 00000000 00000106 00000000 6465746e 312e3420
    [   90.746690]         6b636f6c 03bf0000 f8000000 20676e69 00000000 80000000 00000000 8e2c2a90
    [   90.763362]         80d90000 00000001 00000000 8e2c2a90 00000003 80260dc0 08052098 80680000
    [   90.780033]         ...
    [   90.784902] Call Trace:
    [   90.789793] [<8000f0d8>] show_stack+0xb8/0x148
    [   90.798659] [<8005a000>] register_lock_class+0x270/0x55c
    [   90.809247] [<8005cb64>] __lock_acquire+0x13c/0xf7c
    [   90.818964] [<8005e314>] lock_acquire+0x194/0x1dc
    [   90.828345] [<8003f27c>] flush_work+0x200/0x24c
    [   90.837374] [<80041dfc>] __cancel_work_timer+0x158/0x210
    [   90.847958] [<801a8770>] jffs2_sync_fs+0x20/0x54
    [   90.857173] [<80125cf4>] iterate_supers+0xf4/0x120
    [   90.866729] [<80158fc4>] sys_sync+0x44/0x9c
    [   90.875067] [<80014424>] syscall_common+0x34/0x58
    
    Signed-off-by: Daniel Santos <daniel.santos@pobox.com>
    Reviewed-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50063ba9dd510c122314e74c0f04b4b68100713a
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Nov 29 18:12:26 2018 +0100

    efi/libstub: Disable some warnings for x86{,_64}
    
    [ Upstream commit 3db5e0ba8b8f4aee631d7ee04b7a11c56cfdc213 ]
    
    When building the kernel with Clang, some disabled warnings appear
    because this Makefile overrides KBUILD_CFLAGS for x86{,_64}. Add them to
    this list so that the build is clean again.
    
    -Wpointer-sign was disabled for the whole kernel before the beginning of Git history.
    
    -Waddress-of-packed-member was disabled for the whole kernel and for
    the early boot code in these commits:
    
      bfb38988c51e ("kbuild: clang: Disable 'address-of-packed-member' warning")
      20c6c1890455 ("x86/boot: Disable the address-of-packed-member compiler warning").
    
    -Wgnu was disabled for the whole kernel and for the early boot code in
    these commits:
    
      61163efae020 ("kbuild: LLVMLinux: Add Kbuild support for building kernel with Clang")
      6c3b56b19730 ("x86/boot: Disable Clang warnings about GNU extensions").
    
     [ mingo: Made the changelog more readable. ]
    
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Arend van Spriel <arend.vanspriel@broadcom.com>
    Cc: Bhupesh Sharma <bhsharma@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Eric Snowberg <eric.snowberg@oracle.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Jon Hunter <jonathanh@nvidia.com>
    Cc: Julien Thierry <julien.thierry@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: YiFei Zhu <zhuyifei1999@gmail.com>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20181129171230.18699-8-ard.biesheuvel@linaro.org
    Link: https://github.com/ClangBuiltLinux/linux/issues/112
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fded1b0e0c89a6e1806710942941497d82c24fda
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Sun Nov 25 17:13:08 2018 -0500

    rxe: IB_WR_REG_MR does not capture MR's iova field
    
    [ Upstream commit b024dd0eba6e6d568f69d63c5e3153aba94c23e3 ]
    
    FRWR memory registration is done with a series of calls and WRs.
    1. ULP invokes ib_dma_map_sg()
    2. ULP invokes ib_map_mr_sg()
    3. ULP posts an IB_WR_REG_MR on the Send queue
    
    Step 2 generates an iova. It is permissible for ULPs to change this
    iova (with certain restrictions) between steps 2 and 3.
    
    rxe_map_mr_sg captures the MR's iova but later when rxe processes the
    REG_MR WR, it ignores the MR's iova field. If a ULP alters the MR's iova
    after step 2 but before step 3, rxe never captures that change.
    
    When the remote sends an RDMA Read targeting that MR, rxe looks up the
    R_key, but the altered iova does not match the iova stored in the MR,
    causing the RDMA Read request to fail.
    
    Reported-by: Anna Schumaker <schumaker.anna@gmail.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e34e54f925e233526b1d3a123add54c9f8f4e060
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Nov 16 09:34:24 2018 +0000

    drm/amdgpu: Reorder uvd ring init before uvd resume
    
    [ Upstream commit 3b34c14fd50c302db091f020f26dd00ede902c80 ]
    
    As amd_uvd_resume() accesses the uvd ring, it must be initialised first
    or else we trigger errors like:
    
    [    5.595963] [drm] Found UVD firmware Version: 1.87 Family ID: 17
    [    5.595969] [drm] PSP loading UVD firmware
    [    5.596266] ------------[ cut here ]------------
    [    5.596268] ODEBUG: assert_init not available (active state 0) object type: timer_list hint:           (null)
    [    5.596285] WARNING: CPU: 0 PID: 507 at lib/debugobjects.c:329 debug_print_object+0x6a/0x80
    [    5.596286] Modules linked in: amdgpu(+) hid_logitech_hidpp(+) chash gpu_sched amd_iommu_v2 ttm drm_kms_helper crc32c_intel drm hid_sony ff_memless igb hid_logitech_dj nvme dca i2c_algo_bit nvme_core wmi pinctrl_amd uas usb_storage
    [    5.596299] CPU: 0 PID: 507 Comm: systemd-udevd Tainted: G        W         4.20.0-0.rc1.git4.1.fc30.x86_64 #1
    [    5.596301] Hardware name: System manufacturer System Product Name/ROG STRIX X470-I GAMING, BIOS 0901 07/23/2018
    [    5.596303] RIP: 0010:debug_print_object+0x6a/0x80
    [    5.596305] Code: 8b 43 10 83 c2 01 8b 4b 14 4c 89 e6 89 15 e6 82 b0 02 4c 8b 45 00 48 c7 c7 60 fd 34 a6 48 8b 14 c5 a0 da 08 a6 e8 6a 6a b8 ff <0f> 0b 5b 83 05 d0 45 3e 01 01 5d 41 5c c3 83 05 c5 45 3e 01 01 c3
    [    5.596306] RSP: 0018:ffffa02ac863f8c0 EFLAGS: 00010282
    [    5.596307] RAX: 0000000000000000 RBX: ffffa02ac863f8e0 RCX: 0000000000000006
    [    5.596308] RDX: 0000000000000007 RSI: ffff9160e9a7bfe8 RDI: ffff9160f91d6c60
    [    5.596310] RBP: ffffffffa6742740 R08: 0000000000000002 R09: 0000000000000000
    [    5.596311] R10: 0000000000000000 R11: 0000000000000000 R12: ffffffffa634ff69
    [    5.596312] R13: 00000000000b79d0 R14: ffffffffa80f76d8 R15: 0000000000266000
    [    5.596313] FS:  00007f762abf7940(0000) GS:ffff9160f9000000(0000) knlGS:0000000000000000
    [    5.596314] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    5.596315] CR2: 000055fdc593f000 CR3: 00000007e999c000 CR4: 00000000003406f0
    [    5.596317] Call Trace:
    [    5.596321]  debug_object_assert_init+0x14a/0x180
    [    5.596327]  del_timer+0x2e/0x90
    [    5.596383]  amdgpu_fence_process+0x47/0x100 [amdgpu]
    [    5.596430]  amdgpu_uvd_resume+0xf6/0x120 [amdgpu]
    [    5.596475]  uvd_v7_0_sw_init+0xe0/0x280 [amdgpu]
    [    5.596523]  amdgpu_device_init.cold.30+0xf97/0x14b6 [amdgpu]
    [    5.596563]  ? amdgpu_driver_load_kms+0x53/0x330 [amdgpu]
    [    5.596604]  amdgpu_driver_load_kms+0x86/0x330 [amdgpu]
    [    5.596614]  drm_dev_register+0x115/0x150 [drm]
    [    5.596654]  amdgpu_pci_probe+0xbd/0x120 [amdgpu]
    [    5.596658]  local_pci_probe+0x41/0x90
    [    5.596661]  pci_device_probe+0x188/0x1a0
    [    5.596666]  really_probe+0xf8/0x3b0
    [    5.596669]  driver_probe_device+0xb3/0xf0
    [    5.596672]  __driver_attach+0xe1/0x110
    [    5.596674]  ? driver_probe_device+0xf0/0xf0
    [    5.596676]  bus_for_each_dev+0x79/0xc0
    [    5.596679]  bus_add_driver+0x155/0x230
    [    5.596681]  ? 0xffffffffc07d9000
    [    5.596683]  driver_register+0x6b/0xb0
    [    5.596685]  ? 0xffffffffc07d9000
    [    5.596688]  do_one_initcall+0x5d/0x2be
    [    5.596691]  ? rcu_read_lock_sched_held+0x79/0x80
    [    5.596693]  ? kmem_cache_alloc_trace+0x264/0x290
    [    5.596695]  ? do_init_module+0x22/0x210
    [    5.596698]  do_init_module+0x5a/0x210
    [    5.596701]  load_module+0x2137/0x2430
    [    5.596703]  ? lockdep_hardirqs_on+0xed/0x180
    [    5.596714]  ? __do_sys_init_module+0x150/0x1a0
    [    5.596715]  __do_sys_init_module+0x150/0x1a0
    [    5.596722]  do_syscall_64+0x60/0x1f0
    [    5.596725]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [    5.596726] RIP: 0033:0x7f762b877dee
    [    5.596728] Code: 48 8b 0d 9d 20 0c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 49 89 ca b8 af 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 6a 20 0c 00 f7 d8 64 89 01 48
    [    5.596729] RSP: 002b:00007ffc777b8558 EFLAGS: 00000246 ORIG_RAX: 00000000000000af
    [    5.596730] RAX: ffffffffffffffda RBX: 000055fdc48da320 RCX: 00007f762b877dee
    [    5.596731] RDX: 00007f762b9f284d RSI: 00000000006c5fc6 RDI: 000055fdc527a060
    [    5.596732] RBP: 00007f762b9f284d R08: 0000000000000003 R09: 0000000000000002
    [    5.596733] R10: 000055fdc48ad010 R11: 0000000000000246 R12: 000055fdc527a060
    [    5.596734] R13: 000055fdc48dca20 R14: 0000000000020000 R15: 0000000000000000
    [    5.596740] irq event stamp: 134618
    [    5.596743] hardirqs last  enabled at (134617): [<ffffffffa513d52e>] console_unlock+0x45e/0x610
    [    5.596744] hardirqs last disabled at (134618): [<ffffffffa50037e8>] trace_hardirqs_off_thunk+0x1a/0x1c
    [    5.596746] softirqs last  enabled at (133146): [<ffffffffa5e00365>] __do_softirq+0x365/0x47c
    [    5.596748] softirqs last disabled at (133139): [<ffffffffa50c64f9>] irq_exit+0x119/0x120
    [    5.596749] ---[ end trace eaee508abfebccdc ]---
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=108709
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Alex Deucher <alexdeucher@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4614fe394c557f4b299105c26b36a55283f9b71d
Author: Manish Rangankar <manish.rangankar@cavium.com>
Date:   Wed Nov 21 01:25:19 2018 -0800

    scsi: qedi: Check for session online before getting iSCSI TLV data.
    
    [ Upstream commit d5632b11f0a17efa6356311e535ae135d178438d ]
    
    The kernel panic was observed after switch side perturbation,
    
    BUG: unable to handle kernel NULL pointer dereference at (null)
         IP: [<ffffffff8132b5a0>] strcmp+0x20/0x40
         PGD 0 Oops: 0000 [#1] SMP
    CPU: 8 PID: 647 Comm: kworker/8:1 Tainted: G        W  OE  ------------   3.10.0-693.el7.x86_64 #1
    Hardware name: HPE ProLiant DL380 Gen10/ProLiant DL380 Gen10, BIOS U30 06/20/2018
    Workqueue: slowpath-13:00. qed_slowpath_task [qed]
    task: ffff880429eb8fd0 ti: ffff880429190000 task.ti: ffff880429190000
    RIP: 0010:[<ffffffff8132b5a0>]  [<ffffffff8132b5a0>] strcmp+0x20/0x40
    RSP: 0018:ffff880429193c68  EFLAGS: 00010202
    RAX: 000000000000000a RBX: 0000000000000002 RCX: 0000000000000000
    RDX: 0000000000000001 RSI: 0000000000000001 RDI: ffff88042bda7a41
    RBP: ffff880429193c68 R08: 000000000000ffff R09: 000000000000ffff
    R10: 0000000000000007 R11: ffff88042b3af338 R12: ffff880420b007a0
    R13: ffff88081aa56af8 R14: 0000000000000001 R15: ffff88081aa50410
    FS:  0000000000000000(0000) GS:ffff88042fe00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000000 CR3: 00000000019f2000 CR4: 00000000003407e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Stack:
    ffff880429193d20 ffffffffc02a0c90 ffffc90004b32000 ffff8803fd3ec600
    ffff88042bda7800 ffff88042bda7a00 ffff88042bda7840 ffff88042bda7a40
    0000000129193d10 2e3836312e323931 ff000a342e363232 ffffffffc01ad99d
    Call Trace:
    [<ffffffffc02a0c90>] qedi_get_protocol_tlv_data+0x270/0x470 [qedi]
    [<ffffffffc01ad99d>] ? qed_mfw_process_tlv_req+0x24d/0xbf0 [qed]
    [<ffffffffc01653ae>] qed_mfw_fill_tlv_data+0x5e/0xd0 [qed]
    [<ffffffffc01ad9b9>] qed_mfw_process_tlv_req+0x269/0xbf0 [qed]
    
    Fix kernel NULL pointer deref by checking for session is online before
    getting iSCSI TLV data.
    
    Signed-off-by: Manish Rangankar <manish.rangankar@cavium.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22e568af39899325584446bdc27af682081a3915
Author: Jiada Wang <jiada_wang@mentor.com>
Date:   Wed Nov 28 21:26:12 2018 +0900

    ASoC: pcm3168a: Don't disable pcm3168a when CONFIG_PM defined
    
    [ Upstream commit 489db5d941500249583ec6b49fa70e006bd8f632 ]
    
    pcm3168 codec support runtime_[resume|suspend], whenever it
    is not active, it enters suspend mode, and it's clock and regulators
    will be disabled. so there is no need to disable them again in
    remove callback.  Otherwise we got following kernel warnings,
    when unload pcm3168a driver
    
    [  222.257514] unbalanced disables for amp-en-regulator
    [  222.262526] ------------[ cut here ]------------
    [  222.267158] WARNING: CPU: 0 PID: 2423 at drivers/regulator/core.c:2264 _regulator_disable+0x28/0x108
    [  222.276291] Modules linked in:
    [  222.279343]  snd_soc_pcm3168a_i2c(-)
    [  222.282916]  snd_aloop
    [  222.285272]  arc4
    [  222.287194]  wl18xx
    [  222.289289]  wlcore
    [  222.291385]  mac80211
    [  222.293654]  cfg80211
    [  222.295923]  aes_ce_blk
    [  222.298366]  crypto_simd
    [  222.300896]  cryptd
    [  222.302992]  aes_ce_cipher
    [  222.305696]  crc32_ce
    [  222.307965]  ghash_ce
    [  222.310234]  aes_arm64
    [  222.312590]  gf128mul
    [  222.314860]  snd_soc_rcar
    [  222.317476]  sha2_ce
    [  222.319658]  xhci_plat_hcd
    [  222.322362]  sha256_arm64
    [  222.324978]  xhci_hcd
    [  222.327247]  sha1_ce
    [  222.329430]  renesas_usbhs
    [  222.332133]  evdev
    [  222.334142]  sha1_generic
    [  222.336758]  rcar_gen3_thermal
    [  222.339810]  cpufreq_dt
    [  222.342253]  ravb_streaming(C)
    [  222.345304]  wlcore_sdio
    [  222.347834]  thermal_sys
    [  222.350363]  udc_core
    [  222.352632]  mch_core(C)
    [  222.355161]  usb_dmac
    [  222.357430]  snd_soc_pcm3168a
    [  222.360394]  snd_soc_ak4613
    [  222.363184]  gpio_keys
    [  222.365540]  virt_dma
    [  222.367809]  nfsd
    [  222.369730]  ipv6
    [  222.371652]  autofs4
    [  222.373834]  [last unloaded: snd_soc_pcm3168a_i2c]
    [  222.378629] CPU: 0 PID: 2423 Comm: rmmod Tainted: G        WC      4.14.63-04798-gd456126e4a42-dirty #457
    [  222.388196] Hardware name: Renesas H3ULCB Kingfisher board based on r8a7795 ES2.0+ (DT)
    [  222.396199] task: ffff8006fa8c6200 task.stack: ffff00000a0a0000
    [  222.402117] PC is at _regulator_disable+0x28/0x108
    [  222.406906] LR is at _regulator_disable+0x28/0x108
    [  222.411695] pc : [<ffff0000083bd89c>] lr : [<ffff0000083bd89c>] pstate: 00000145
    [  222.419089] sp : ffff00000a0a3c80
    [  222.422401] x29: ffff00000a0a3c80
    [  222.425799] x28: ffff8006fa8c6200
    [  222.429199] x27: ffff0000086f1000
    [  222.432597] x26: 000000000000006a
    [  222.435997] x25: 0000000000000124
    [  222.439395] x24: 0000000000000018
    [  222.442795] x23: 0000000000000006
    [  222.446193] x22: ffff8006f925d490
    [  222.449592] x21: ffff8006f9ac2068
    [  222.452991] x20: ffff8006f9ac2000
    [  222.456390] x19: 0000000000000005
    [  222.459787] x18: 000000000000000a
    [  222.463186] x17: 0000000000000000
    [  222.466584] x16: 0000000000000000
    [  222.469984] x15: 000000000d3f616a
    [  222.473382] x14: 0720072007200720
    [  222.476781] x13: 0720072007200720
    [  222.480179] x12: 0720072007200720
    [  222.483578] x11: 0720072007200720
    [  222.486975] x10: 0720072007200720
    [  222.490375] x9 : 0720072007200720
    [  222.493773] x8 : 07200772076f0774
    [  222.497172] x7 : 0000000000000000
    [  222.500570] x6 : 0000000000000007
    [  222.503969] x5 : 0000000000000000
    [  222.507367] x4 : 0000000000000000
    [  222.510766] x3 : 0000000000000000
    [  222.514164] x2 : c790b852091e2600
    [  222.517563] x1 : 0000000000000000
    [  222.520961] x0 : 0000000000000028
    [  222.524361] Call trace:
    [  222.526805] Exception stack(0xffff00000a0a3b40 to 0xffff00000a0a3c80)
    [  222.533245] 3b40: 0000000000000028 0000000000000000 c790b852091e2600 0000000000000000
    [  222.541075] 3b60: 0000000000000000 0000000000000000 0000000000000007 0000000000000000
    [  222.548905] 3b80: 07200772076f0774 0720072007200720 0720072007200720 0720072007200720
    [  222.556735] 3ba0: 0720072007200720 0720072007200720 0720072007200720 000000000d3f616a
    [  222.564564] 3bc0: 0000000000000000 0000000000000000 000000000000000a 0000000000000005
    [  222.572394] 3be0: ffff8006f9ac2000 ffff8006f9ac2068 ffff8006f925d490 0000000000000006
    [  222.580224] 3c00: 0000000000000018 0000000000000124 000000000000006a ffff0000086f1000
    [  222.588053] 3c20: ffff8006fa8c6200 ffff00000a0a3c80 ffff0000083bd89c ffff00000a0a3c80
    [  222.595883] 3c40: ffff0000083bd89c 0000000000000145 0000000000000000 0000000000000000
    [  222.603713] 3c60: 0000ffffffffffff ffff00000a0a3c30 ffff00000a0a3c80 ffff0000083bd89c
    [  222.611543] [<ffff0000083bd89c>] _regulator_disable+0x28/0x108
    [  222.617375] [<ffff0000083bd9c4>] regulator_disable+0x48/0x68
    [  222.623033] [<ffff0000083be8e4>] regulator_bulk_disable+0x58/0xc0
    [  222.629134] [<ffff0000007d831c>] pcm3168a_remove+0x30/0x50 [snd_soc_pcm3168a]
    [  222.636270] [<ffff0000007e5010>] pcm3168a_i2c_remove+0x10/0x1c [snd_soc_pcm3168a_i2c]
    [  222.644106] [<ffff0000084b9d9c>] i2c_device_remove+0x38/0x70
    [  222.649766] [<ffff00000843cd5c>] device_release_driver_internal+0xd0/0x1c0
    [  222.656640] [<ffff00000843ced8>] driver_detach+0x70/0x7c
    [  222.661951] [<ffff00000843bf68>] bus_remove_driver+0x74/0xa0
    [  222.667609] [<ffff00000843d7e4>] driver_unregister+0x48/0x4c
    [  222.673268] [<ffff0000084ba8dc>] i2c_del_driver+0x24/0x30
    [  222.678666] [<ffff0000007e5078>] pcm3168a_i2c_driver_exit+0x10/0xf98 [snd_soc_pcm3168a_i2c]
    [  222.687019] [<ffff00000811bd28>] SyS_delete_module+0x198/0x1d4
    [  222.692850] Exception stack(0xffff00000a0a3ec0 to 0xffff00000a0a4000)
    [  222.699289] 3ec0: 0000aaaafeb4b268 0000000000000800 14453f6470497100 0000fffffaa520d8
    [  222.707119] 3ee0: 0000fffffaa520d9 000000000000000a 1999999999999999 0000000000000000
    [  222.714948] 3f00: 000000000000006a 0000ffffa8f7d1d8 000000000000000a 0000000000000005
    [  222.722778] 3f20: 0000000000000000 0000000000000000 000000000000002d 0000000000000000
    [  222.730607] 3f40: 0000aaaae19b9f68 0000ffffa8f411f0 0000000000000000 0000aaaae19b9000
    [  222.738436] 3f60: 0000fffffaa533b8 0000fffffaa531f0 0000000000000000 0000000000000001
    [  222.746266] 3f80: 0000fffffaa53ec6 0000000000000000 0000aaaafeb4b200 0000aaaafeb4a010
    [  222.754096] 3fa0: 0000000000000000 0000fffffaa53130 0000aaaae199f36c 0000fffffaa53130
    [  222.761926] 3fc0: 0000ffffa8f411f8 0000000000000000 0000aaaafeb4b268 000000000000006a
    [  222.769755] 3fe0: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    [  222.777589] [<ffff0000080832c0>] el0_svc_naked+0x34/0x38
    [  222.782899] ---[ end trace eaf8939a3698b1a8 ]---
    [  222.787609] Failed to disable VCCDA2: -5
    [  222.791649] ------------[ cut here ]------------
    [  222.796283] WARNING: CPU: 0 PID: 2423 at drivers/clk/clk.c:595 clk_core_disable+0xc/0x1d8
    [  222.804460] Modules linked in:
    [  222.807511]  snd_soc_pcm3168a_i2c(-)
    [  222.811083]  snd_aloop
    [  222.813439]  arc4
    [  222.815360]  wl18xx
    [  222.817456]  wlcore
    [  222.819551]  mac80211
    [  222.821820]  cfg80211
    [  222.824088]  aes_ce_blk
    [  222.826531]  crypto_simd
    [  222.829060]  cryptd
    [  222.831155]  aes_ce_cipher
    [  222.833859]  crc32_ce
    [  222.836127]  ghash_ce
    [  222.838396]  aes_arm64
    [  222.840752]  gf128mul
    [  222.843020]  snd_soc_rcar
    [  222.845637]  sha2_ce
    [  222.847818]  xhci_plat_hcd
    [  222.850522]  sha256_arm64
    [  222.853138]  xhci_hcd
    [  222.855407]  sha1_ce
    [  222.857589]  renesas_usbhs
    [  222.860292]  evdev
    [  222.862300]  sha1_generic
    [  222.864917]  rcar_gen3_thermal
    [  222.867968]  cpufreq_dt
    [  222.870410]  ravb_streaming(C)
    [  222.873461]  wlcore_sdio
    [  222.875991]  thermal_sys
    [  222.878520]  udc_core
    [  222.880789]  mch_core(C)
    [  222.883318]  usb_dmac
    [  222.885587]  snd_soc_pcm3168a
    [  222.888551]  snd_soc_ak4613
    [  222.891341]  gpio_keys
    [  222.893696]  virt_dma
    [  222.895965]  nfsd
    [  222.897886]  ipv6
    [  222.899808]  autofs4
    [  222.901990]  [last unloaded: snd_soc_pcm3168a_i2c]
    [  222.906783] CPU: 0 PID: 2423 Comm: rmmod Tainted: G        WC      4.14.63-04798-gd456126e4a42-dirty #457
    [  222.916349] Hardware name: Renesas H3ULCB Kingfisher board based on r8a7795 ES2.0+ (DT)
    [  222.924351] task: ffff8006fa8c6200 task.stack: ffff00000a0a0000
    [  222.930270] PC is at clk_core_disable+0xc/0x1d8
    [  222.934799] LR is at clk_core_disable_lock+0x20/0x34
    [  222.939761] pc : [<ffff0000083ab9b8>] lr : [<ffff0000083acd28>] pstate: 800001c5
    [  222.947154] sp : ffff00000a0a3cf0
    [  222.950466] x29: ffff00000a0a3cf0
    [  222.953864] x28: ffff8006fa8c6200
    [  222.957263] x27: ffff0000086f1000
    [  222.960661] x26: 000000000000006a
    [  222.964061] x25: 0000000000000124
    [  222.967458] x24: 0000000000000015
    [  222.970858] x23: ffff8006f9ffa8d0
    [  222.974256] x22: ffff8006faf16480
    [  222.977655] x21: ffff0000007e7040
    [  222.981053] x20: ffff8006faadd100
    [  222.984452] x19: 0000000000000140
    [  222.987850] x18: 000000000000000a
    [  222.991249] x17: 0000000000000000
    [  222.994647] x16: 0000000000000000
    [  222.998046] x15: 000000000d477819
    [  223.001444] x14: 0720072007200720
    [  223.004843] x13: 0720072007200720
    [  223.008242] x12: 0720072007200720
    [  223.011641] x11: 0720072007200720
    [  223.015039] x10: 0720072007200720
    [  223.018438] x9 : 0720072007200720
    [  223.021837] x8 : 0720072007200720
    [  223.025236] x7 : 0000000000000000
    [  223.028634] x6 : 0000000000000007
    [  223.032034] x5 : 0000000000000000
    [  223.035432] x4 : 0000000000000000
    [  223.038831] x3 : 0000000000000000
    [  223.042229] x2 : 0000000004720471
    [  223.045628] x1 : 0000000000000000
    [  223.049026] x0 : ffff8006faadd100
    [  223.052426] Call trace:
    [  223.054870] Exception stack(0xffff00000a0a3bb0 to 0xffff00000a0a3cf0)
    [  223.061309] 3ba0:                                   ffff8006faadd100 0000000000000000
    [  223.069139] 3bc0: 0000000004720471 0000000000000000 0000000000000000 0000000000000000
    [  223.076969] 3be0: 0000000000000007 0000000000000000 0720072007200720 0720072007200720
    [  223.084798] 3c00: 0720072007200720 0720072007200720 0720072007200720 0720072007200720
    [  223.092628] 3c20: 0720072007200720 000000000d477819 0000000000000000 0000000000000000
    [  223.100458] 3c40: 000000000000000a 0000000000000140 ffff8006faadd100 ffff0000007e7040
    [  223.108287] 3c60: ffff8006faf16480 ffff8006f9ffa8d0 0000000000000015 0000000000000124
    [  223.116117] 3c80: 000000000000006a ffff0000086f1000 ffff8006fa8c6200 ffff00000a0a3cf0
    [  223.123947] 3ca0: ffff0000083acd28 ffff00000a0a3cf0 ffff0000083ab9b8 00000000800001c5
    [  223.131777] 3cc0: ffff00000a0a3cf0 ffff0000083acd1c 0000ffffffffffff ffff8006faadd100
    [  223.139606] 3ce0: ffff00000a0a3cf0 ffff0000083ab9b8
    [  223.144483] [<ffff0000083ab9b8>] clk_core_disable+0xc/0x1d8
    [  223.150054] [<ffff0000083acd58>] clk_disable+0x1c/0x28
    [  223.155198] [<ffff0000007d8328>] pcm3168a_remove+0x3c/0x50 [snd_soc_pcm3168a]
    [  223.162334] [<ffff0000007e5010>] pcm3168a_i2c_remove+0x10/0x1c [snd_soc_pcm3168a_i2c]
    [  223.170167] [<ffff0000084b9d9c>] i2c_device_remove+0x38/0x70
    [  223.175826] [<ffff00000843cd5c>] device_release_driver_internal+0xd0/0x1c0
    [  223.182700] [<ffff00000843ced8>] driver_detach+0x70/0x7c
    [  223.188012] [<ffff00000843bf68>] bus_remove_driver+0x74/0xa0
    [  223.193669] [<ffff00000843d7e4>] driver_unregister+0x48/0x4c
    [  223.199329] [<ffff0000084ba8dc>] i2c_del_driver+0x24/0x30
    [  223.204726] [<ffff0000007e5078>] pcm3168a_i2c_driver_exit+0x10/0xf98 [snd_soc_pcm3168a_i2c]
    [  223.213079] [<ffff00000811bd28>] SyS_delete_module+0x198/0x1d4
    [  223.218909] Exception stack(0xffff00000a0a3ec0 to 0xffff00000a0a4000)
    [  223.225349] 3ec0: 0000aaaafeb4b268 0000000000000800 14453f6470497100 0000fffffaa520d8
    [  223.233179] 3ee0: 0000fffffaa520d9 000000000000000a 1999999999999999 0000000000000000
    [  223.241008] 3f00: 000000000000006a 0000ffffa8f7d1d8 000000000000000a 0000000000000005
    [  223.248838] 3f20: 0000000000000000 0000000000000000 000000000000002d 0000000000000000
    [  223.256668] 3f40: 0000aaaae19b9f68 0000ffffa8f411f0 0000000000000000 0000aaaae19b9000
    [  223.264497] 3f60: 0000fffffaa533b8 0000fffffaa531f0 0000000000000000 0000000000000001
    [  223.272327] 3f80: 0000fffffaa53ec6 0000000000000000 0000aaaafeb4b200 0000aaaafeb4a010
    [  223.280157] 3fa0: 0000000000000000 0000fffffaa53130 0000aaaae199f36c 0000fffffaa53130
    [  223.287986] 3fc0: 0000ffffa8f411f8 0000000000000000 0000aaaafeb4b268 000000000000006a
    [  223.295816] 3fe0: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    [  223.303648] [<ffff0000080832c0>] el0_svc_naked+0x34/0x38
    [  223.308958] ---[ end trace eaf8939a3698b1a9 ]---
    [  223.313752] ------------[ cut here ]------------
    [  223.318383] WARNING: CPU: 0 PID: 2423 at drivers/clk/clk.c:477 clk_core_unprepare+0xc/0x1ac
    [  223.326733] Modules linked in:
    [  223.329784]  snd_soc_pcm3168a_i2c(-)
    [  223.333356]  snd_aloop
    [  223.335712]  arc4
    [  223.337633]  wl18xx
    [  223.339728]  wlcore
    [  223.341823]  mac80211
    [  223.344092]  cfg80211
    [  223.346360]  aes_ce_blk
    [  223.348803]  crypto_simd
    [  223.351332]  cryptd
    [  223.353428]  aes_ce_cipher
    [  223.356131]  crc32_ce
    [  223.358400]  ghash_ce
    [  223.360668]  aes_arm64
    [  223.363024]  gf128mul
    [  223.365293]  snd_soc_rcar
    [  223.367909]  sha2_ce
    [  223.370091]  xhci_plat_hcd
    [  223.372794]  sha256_arm64
    [  223.375410]  xhci_hcd
    [  223.377679]  sha1_ce
    [  223.379861]  renesas_usbhs
    [  223.382564]  evdev
    [  223.384572]  sha1_generic
    [  223.387188]  rcar_gen3_thermal
    [  223.390239]  cpufreq_dt
    [  223.392682]  ravb_streaming(C)
    [  223.395732]  wlcore_sdio
    [  223.398261]  thermal_sys
    [  223.400790]  udc_core
    [  223.403059]  mch_core(C)
    [  223.405588]  usb_dmac
    [  223.407856]  snd_soc_pcm3168a
    [  223.410820]  snd_soc_ak4613
    [  223.413609]  gpio_keys
    [  223.415965]  virt_dma
    [  223.418234]  nfsd
    [  223.420155]  ipv6
    [  223.422076]  autofs4
    [  223.424258]  [last unloaded: snd_soc_pcm3168a_i2c]
    [  223.429050] CPU: 0 PID: 2423 Comm: rmmod Tainted: G        WC      4.14.63-04798-gd456126e4a42-dirty #457
    [  223.438616] Hardware name: Renesas H3ULCB Kingfisher board based on r8a7795 ES2.0+ (DT)
    [  223.446618] task: ffff8006fa8c6200 task.stack: ffff00000a0a0000
    [  223.452536] PC is at clk_core_unprepare+0xc/0x1ac
    [  223.457239] LR is at clk_unprepare+0x28/0x3c
    [  223.461506] pc : [<ffff0000083ab5a4>] lr : [<ffff0000083ace4c>] pstate: 60000145
    [  223.468900] sp : ffff00000a0a3d00
    [  223.472211] x29: ffff00000a0a3d00
    [  223.475609] x28: ffff8006fa8c6200
    [  223.479009] x27: ffff0000086f1000
    [  223.482407] x26: 000000000000006a
    [  223.485807] x25: 0000000000000124
    [  223.489205] x24: 0000000000000015
    [  223.492604] x23: ffff8006f9ffa8d0
    [  223.496003] x22: ffff8006faf16480
    [  223.499402] x21: ffff0000007e7040
    [  223.502800] x20: ffff8006faf16420
    [  223.506199] x19: ffff8006faadd100
    [  223.509597] x18: 000000000000000a
    [  223.512997] x17: 0000000000000000
    [  223.516395] x16: 0000000000000000
    [  223.519794] x15: 0000000000000000
    [  223.523192] x14: 00000033fe89076c
    [  223.526591] x13: 0000000000000400
    [  223.529989] x12: 0000000000000400
    [  223.533388] x11: 0000000000000000
    [  223.536786] x10: 00000000000009e0
    [  223.540185] x9 : ffff00000a0a3be0
    [  223.543583] x8 : ffff8006fa8c6c40
    [  223.546982] x7 : ffff8006fa8c6400
    [  223.550380] x6 : 0000000000000001
    [  223.553780] x5 : 0000000000000000
    [  223.557178] x4 : ffff8006fa8c6200
    [  223.560577] x3 : 0000000000000000
    [  223.563975] x2 : ffff8006fa8c6200
    [  223.567374] x1 : 0000000000000000
    [  223.570772] x0 : ffff8006faadd100
    [  223.574170] Call trace:
    [  223.576615] Exception stack(0xffff00000a0a3bc0 to 0xffff00000a0a3d00)
    [  223.583054] 3bc0: ffff8006faadd100 0000000000000000 ffff8006fa8c6200 0000000000000000
    [  223.590884] 3be0: ffff8006fa8c6200 0000000000000000 0000000000000001 ffff8006fa8c6400
    [  223.598714] 3c00: ffff8006fa8c6c40 ffff00000a0a3be0 00000000000009e0 0000000000000000
    [  223.606544] 3c20: 0000000000000400 0000000000000400 00000033fe89076c 0000000000000000
    [  223.614374] 3c40: 0000000000000000 0000000000000000 000000000000000a ffff8006faadd100
    [  223.622204] 3c60: ffff8006faf16420 ffff0000007e7040 ffff8006faf16480 ffff8006f9ffa8d0
    [  223.630033] 3c80: 0000000000000015 0000000000000124 000000000000006a ffff0000086f1000
    [  223.637863] 3ca0: ffff8006fa8c6200 ffff00000a0a3d00 ffff0000083ace4c ffff00000a0a3d00
    [  223.645693] 3cc0: ffff0000083ab5a4 0000000060000145 0000000000000140 ffff8006faadd100
    [  223.653523] 3ce0: 0000ffffffffffff ffff0000083ace44 ffff00000a0a3d00 ffff0000083ab5a4
    [  223.661353] [<ffff0000083ab5a4>] clk_core_unprepare+0xc/0x1ac
    [  223.667103] [<ffff0000007d8330>] pcm3168a_remove+0x44/0x50 [snd_soc_pcm3168a]
    [  223.674239] [<ffff0000007e5010>] pcm3168a_i2c_remove+0x10/0x1c [snd_soc_pcm3168a_i2c]
    [  223.682070] [<ffff0000084b9d9c>] i2c_device_remove+0x38/0x70
    [  223.687731] [<ffff00000843cd5c>] device_release_driver_internal+0xd0/0x1c0
    [  223.694604] [<ffff00000843ced8>] driver_detach+0x70/0x7c
    [  223.699915] [<ffff00000843bf68>] bus_remove_driver+0x74/0xa0
    [  223.705572] [<ffff00000843d7e4>] driver_unregister+0x48/0x4c
    [  223.711230] [<ffff0000084ba8dc>] i2c_del_driver+0x24/0x30
    [  223.716628] [<ffff0000007e5078>] pcm3168a_i2c_driver_exit+0x10/0xf98 [snd_soc_pcm3168a_i2c]
    [  223.724980] [<ffff00000811bd28>] SyS_delete_module+0x198/0x1d4
    [  223.730811] Exception stack(0xffff00000a0a3ec0 to 0xffff00000a0a4000)
    [  223.737250] 3ec0: 0000aaaafeb4b268 0000000000000800 14453f6470497100 0000fffffaa520d8
    [  223.745079] 3ee0: 0000fffffaa520d9 000000000000000a 1999999999999999 0000000000000000
    [  223.752909] 3f00: 000000000000006a 0000ffffa8f7d1d8 000000000000000a 0000000000000005
    [  223.760739] 3f20: 0000000000000000 0000000000000000 000000000000002d 0000000000000000
    [  223.768568] 3f40: 0000aaaae19b9f68 0000ffffa8f411f0 0000000000000000 0000aaaae19b9000
    [  223.776398] 3f60: 0000fffffaa533b8 0000fffffaa531f0 0000000000000000 0000000000000001
    [  223.784227] 3f80: 0000fffffaa53ec6 0000000000000000 0000aaaafeb4b200 0000aaaafeb4a010
    [  223.792057] 3fa0: 0000000000000000 0000fffffaa53130 0000aaaae199f36c 0000fffffaa53130
    [  223.799886] 3fc0: 0000ffffa8f411f8 0000000000000000 0000aaaafeb4b268 000000000000006a
    [  223.807715] 3fe0: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    [  223.815546] [<ffff0000080832c0>] el0_svc_naked+0x34/0x38
    [  223.820855] ---[ end trace eaf8939a3698b1aa ]---
    
    Fix this issue by only disable clock and regulators in remove callback
    when CONFIG_PM isn't defined
    
    Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34ea589d97d798e6035c3d7d9ad7b512cdcb2be4
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Fri Nov 16 14:12:02 2018 +0100

    selinux: always allow mounting submounts
    
    [ Upstream commit 2cbdcb882f97a45f7475c67ac6257bbc16277dfe ]
    
    If a superblock has the MS_SUBMOUNT flag set, we should always allow
    mounting it. These mounts are done automatically by the kernel either as
    part of mounting some parent mount (e.g. debugfs always mounts tracefs
    under "tracing" for compatibility) or they are mounted automatically as
    needed on subdirectory accesses (e.g. NFS crossmnt mounts). Since such
    automounts are either an implicit consequence of the parent mount (which
    is already checked) or they can happen during regular accesses (where it
    doesn't make sense to check against the current task's context), the
    mount permission check should be skipped for them.
    
    Without this patch, attempts to access contents of an automounted
    directory can cause unexpected SELinux denials.
    
    In the current kernel tree, the MS_SUBMOUNT flag is set only via
    vfs_submount(), which is called only from the following places:
     - AFS, when automounting special "symlinks" referencing other cells
     - CIFS, when automounting "referrals"
     - NFS, when automounting subtrees
     - debugfs, when automounting tracefs
    
    In all cases the submounts are meant to be transparent to the user and
    it makes sense that if mounting the master is allowed, then so should be
    the automounts. Note that CAP_SYS_ADMIN capability checking is already
    skipped for (SB_KERNMOUNT|SB_SUBMOUNT) in:
     - sget_userns() in fs/super.c:
            if (!(flags & (SB_KERNMOUNT|SB_SUBMOUNT)) &&
                !(type->fs_flags & FS_USERNS_MOUNT) &&
                !capable(CAP_SYS_ADMIN))
                    return ERR_PTR(-EPERM);
     - sget() in fs/super.c:
            /* Ensure the requestor has permissions over the target filesystem */
            if (!(flags & (SB_KERNMOUNT|SB_SUBMOUNT)) && !ns_capable(user_ns, CAP_SYS_ADMIN))
                    return ERR_PTR(-EPERM);
    
    Verified internally on patched RHEL 7.6 with a reproducer using
    NFS+httpd and selinux-tesuite.
    
    Fixes: 93faccbbfa95 ("fs: Better permission checking for submounts")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4c04fd44157828dc819071e35b8d372e0640823
Author: Anatolij Gustschin <agust@denx.de>
Date:   Mon Nov 26 11:35:27 2018 -0600

    fpga: altera-cvp: fix probing for multiple FPGAs on the bus
    
    [ Upstream commit 30522a951f9d02f261d0697c35cb42205b1fae17 ]
    
    Currently registering CvP managers works only for first probed CvP
    device, for all other devices it is refused due to duplicated chkcfg
    sysfs entry:
    
    fpga_manager fpga3: Altera CvP FPGA Manager @0000:0c:00.0 registered
    sysfs: cannot create duplicate filename '/bus/pci/drivers/altera-cvp/chkcfg'
    CPU: 0 PID: 3808 Comm: bash Tainted: G           O      4.19.0-custom+ #5
    Call Trace:
      dump_stack+0x46/0x5b
      sysfs_warn_dup+0x53/0x60
      sysfs_add_file_mode_ns+0x16d/0x180
      sysfs_create_file_ns+0x51/0x60
      altera_cvp_probe+0x16f/0x2a0 [altera_cvp]
      local_pci_probe+0x3f/0xa0
      ? pci_match_device+0xb1/0xf0
      pci_device_probe+0x116/0x170
      really_probe+0x21b/0x2c0
      driver_probe_device+0x4b/0xe0
      bind_store+0xcb/0x130
      kernfs_fop_write+0xfd/0x180
      __vfs_write+0x21/0x150
      ? selinux_file_permission+0xdc/0x130
      vfs_write+0xa8/0x1a0
      ? find_vma+0xd/0x60
      ksys_write+0x3d/0x90
      do_syscall_64+0x44/0xf0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
      ...
     altera-cvp 0000:0c:00.0: Can't create sysfs chkcfg file
     fpga_manager fpga3: fpga_mgr_unregister Altera CvP FPGA Manager @0000:0c:00.0
    
    Move chkcfg creation to module init as suggested by Alan.
    
    Signed-off-by: Anatolij Gustschin <agust@denx.de>
    Acked-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cae65dbc7b487f601fc4a2d16391852f243ffab
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Fri Nov 9 20:44:36 2018 +0900

    usb: gadget: udc: renesas_usb3: add a safety connection way for forced_b_device
    
    [ Upstream commit ceb94bc52c437463f0903e61060a94a2226fb672 ]
    
    This patch adds a safety connection way for "forced_b_device" with
    "workaround_for_vbus" like below:
    
    < Example for R-Car E3 Ebisu >
     # modprobe <any usb gadget driver>
     # echo 1 > /sys/kernel/debug/ee020000.usb/b_device
     (connect a usb cable to host side.)
     # echo 2 > /sys/kernel/debug/ee020000.usb/b_device
    
    Previous code should have connected a usb cable before the "b_device"
    is set to 1 on the Ebisu board. However, if xHCI driver on the board
    is probed, it causes some troubles:
     - Conflicts USB VBUS/signals between the board and another host.
     - "Cannot enable. Maybe the USB cable is bad?" might happen on
       both the board and another host with a usb hub.
     - Cannot enumerate a usb gadget correctly because an interruption
       of VBUS change happens unexpectedly.
    
    Reported-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7187ac3e3c4d143ef6fbb87f2788ebad410c2a6c
Author: Daniel T. Lee <danieltimlee@gmail.com>
Date:   Fri Nov 23 07:14:32 2018 +0900

    samples: bpf: fix: error handling regarding kprobe_events
    
    [ Upstream commit 5a863813216ce79e16a8c1503b2543c528b778b6 ]
    
    Currently, kprobe_events failure won't be handled properly.
    Due to calling system() indirectly to write to kprobe_events,
    it can't be identified whether an error is derived from kprobe or system.
    
        // buf = "echo '%c:%s %s' >> /s/k/d/t/kprobe_events"
        err = system(buf);
        if (err < 0) {
            printf("failed to create kprobe ..");
            return -1;
        }
    
    For example, running ./tracex7 sample in ext4 partition,
    "echo p:open_ctree open_ctree >> /s/k/d/t/kprobe_events"
    gets 256 error code system() failure.
    => The error comes from kprobe, but it's not handled correctly.
    
    According to man of system(3), it's return value
    just passes the termination status of the child shell
    rather than treating the error as -1. (don't care success)
    
    Which means, currently it's not working as desired.
    (According to the upper code snippet)
    
        ex) running ./tracex7 with ext4 env.
        # Current Output
        sh: echo: I/O error
        failed to open event open_ctree
    
        # Desired Output
        failed to create kprobe 'open_ctree' error 'No such file or directory'
    
    The problem is, error can't be verified whether from child ps
    or system. But using write() directly can verify the command
    failure, and it will treat all error as -1. So I suggest using
    write() directly to 'kprobe_events' rather than calling system().
    
    Signed-off-by: Daniel T. Lee <danieltimlee@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e1be9c72310f7376e8d0e69c20e167f7d8a9d03
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Thu Sep 27 10:59:20 2018 +0200

    clk: meson: meson8b: fix incorrect divider mapping in cpu_scale_table
    
    [ Upstream commit ad9b2b8e53af61375322e3c7d624acf3a3ef53b0 ]
    
    The public S805 datasheet only mentions that
    HHI_SYS_CPU_CLK_CNTL1[20:29] contains a divider called "cpu_scale_div".
    Unfortunately it does not mention how to use the register contents.
    
    The Amlogic 3.10 GPL kernel sources are using the following code to
    calculate the CPU clock based on that register (taken from
    arch/arm/mach-meson8/clock.c in the 3.10 Amlogic kernel, shortened to
    make it easier to read):
    N = (aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL1) >> 20) & 0x3FF;
    if (sel == 3) /* use cpu_scale_div */
      div = 2 * N;
    else
      div = ... /* not relevant for this example */
    cpu_clk = parent_clk / div;
    
    This suggests that the formula is: parent_rate / 2 * register_value
    However, running perf (which can measure the CPU clock rate thanks to
    the ARM PMU) shows that this formula is not correct.
    This can be reproduced with the following steps:
    1. boot into u-boot
    2. let the CPU clock run off the XTAL clock:
       mw.l 0xC110419C 0x30 1
    3. set the cpu_scale_div register:
       to value 0x1: mw.l 0xC110415C 0x801016A2 1
       to value 0x2: mw.l 0xC110415C 0x802016A2 1
       to value 0x5: mw.l 0xC110415C 0x805016A2 1
    4. let the CPU clock run off cpu_scale_div:
       mw.l 0xC110419C 0xbd 1
    5. boot Linux
    6. run: perf stat -aB stress --cpu 4 --timeout 10
    7. check the "cycles" value
    
    I get the following results depending on the cpu_scale_div value:
    - (cpu_in_sel - this is the input clock for cpu_scale_div - runs at
       1.2GHz)
    - 0x1 = 300MHz
    - 0x2 = 200MHz
    - 0x5 = 100MHz
    
    This means that the actual formula to calculate the output of the
    cpu_scale_div clock is: parent_rate / 2 * (register value + 1).
    
    The register value 0x0 is reserved. When letting the CPU clock run off
    the cpu_scale_div while the value is 0x0 the whole board hangs (even in
    u-boot).
    
    I also verified this with the TWD timer: when adding this to the .dts
    without specifying it's clock it will auto-detect the PERIPH (which is
    the input clock of the TWD) clock rate (and the result is shown in the
    kernel log). On Meson8, Meson8b and Meson8m2 the PERIPH clock is CPUCLK
    divided by 4. This also matched for all three test-cases from above (in
    all cases the TWD timer clock rate was approx. one fourth of the CPU
    clock rate).
    
    A small note regarding the "fixes" tag: the original issue seems to
    exist virtually since forever. Even commit 28b9fcd016126e ("clk:
    meson8b: Add support for Meson8b clocks") seems to handle this wrong. I
    still decided to use commit 251b6fd38bcb9c ("clk: meson: rework meson8b
    cpu clock") because this is the first commit which gets the CPU hiearchy
    correct and thus it's the first commit where the cpu_scale_div register
    is used correctly (apart from the bug in the cpu_scale_table).
    
    Fixes: 251b6fd38bcb9c ("clk: meson: rework meson8b cpu clock")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lkml.kernel.org/r/20180927085921.24627-2-martin.blumenstingl@googlemail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ebffc54843bc85ef94e15df521929bb44ddd7d4
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Nov 22 16:34:11 2018 +0200

    drm/atomic-helper: Complete fake_commit->flip_done potentially earlier
    
    [ Upstream commit 2de42f79bb21a412f40ade8831eb6fc445cb78a4 ]
    
    Consider the following scenario:
    1. nonblocking enable crtc
    2. wait for the event
    3. nonblocking disable crtc
    
    On i915 this can lead to a spurious -EBUSY from step 3 on
    account of non-enabled planes getting the fake_commit in step 1
    and we don't complete the fake_commit-> flip_done until
    drm_atomic_helper_commit_hw_done() which can happen a long
    time after the flip event was sent out.
    
    This will become somewhat easy to hit on SKL+ once we start
    to add all the planes for the crtc to every modeset commit
    for the purposes of forcing a watermark register programming
    [1].
    
    To make the race a little less pronounced let's complete
    fake_commit->flip_done after drm_atomic_helper_wait_for_flip_done().
    For the single crtc case this should make the race quite
    theoretical, assuming drm_atomic_helper_wait_for_flip_done()
    actually has to wait for the real commit flip_done. In case
    the real commit flip_done gets completed singificantly before
    drm_atomic_helper_wait_for_flip_done(), or we are dealing with
    multiple crtcs whose vblanks don't line up nicely the race still
    exists.
    
    [1] https://patchwork.freedesktop.org/patch/262670/
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: 080de2e5be2d ("drm/atomic: Check for busy planes/connectors before setting the commit")
    Testcase: igt/kms_cursor_legacy/*nonblocking-modeset-vs-cursor-atomic
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181122143412.11655-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f88ff119205da5b51320c4e9c40bde2e2ac3b37
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Wed Oct 17 17:26:22 2018 +0200

    arm64: perf: set suppress_bind_attrs flag to true
    
    [ Upstream commit 81e9fa8bab381f8b6eb04df7cdf0f71994099bd4 ]
    
    The armv8_pmuv3 driver doesn't have a remove function, and when the test
    'CONFIG_DEBUG_TEST_DRIVER_REMOVE=y' is enabled, the following Call trace
    can be seen.
    
    [    1.424287] Failed to register pmu: armv8_pmuv3, reason -17
    [    1.424870] WARNING: CPU: 0 PID: 1 at ../kernel/events/core.c:11771 perf_event_sysfs_init+0x98/0xdc
    [    1.425220] Modules linked in:
    [    1.425531] CPU: 0 PID: 1 Comm: swapper/0 Tainted: G        W         4.19.0-rc7-next-20181012-00003-ge7a97b1ad77b-dirty #35
    [    1.425951] Hardware name: linux,dummy-virt (DT)
    [    1.426212] pstate: 80000005 (Nzcv daif -PAN -UAO)
    [    1.426458] pc : perf_event_sysfs_init+0x98/0xdc
    [    1.426720] lr : perf_event_sysfs_init+0x98/0xdc
    [    1.426908] sp : ffff00000804bd50
    [    1.427077] x29: ffff00000804bd50 x28: ffff00000934e078
    [    1.427429] x27: ffff000009546000 x26: 0000000000000007
    [    1.427757] x25: ffff000009280710 x24: 00000000ffffffef
    [    1.428086] x23: ffff000009408000 x22: 0000000000000000
    [    1.428415] x21: ffff000009136008 x20: ffff000009408730
    [    1.428744] x19: ffff80007b20b400 x18: 000000000000000a
    [    1.429075] x17: 0000000000000000 x16: 0000000000000000
    [    1.429418] x15: 0000000000000400 x14: 2e79726f74636572
    [    1.429748] x13: 696420656d617320 x12: 656874206e692065
    [    1.430060] x11: 6d616e20656d6173 x10: 2065687420687469
    [    1.430335] x9 : ffff00000804bd50 x8 : 206e6f7361657220
    [    1.430610] x7 : 2c3376756d705f38 x6 : ffff00000954d7ce
    [    1.430880] x5 : 0000000000000000 x4 : 0000000000000000
    [    1.431226] x3 : 0000000000000000 x2 : ffffffffffffffff
    [    1.431554] x1 : 4d151327adc50b00 x0 : 0000000000000000
    [    1.431868] Call trace:
    [    1.432102]  perf_event_sysfs_init+0x98/0xdc
    [    1.432382]  do_one_initcall+0x6c/0x1a8
    [    1.432637]  kernel_init_freeable+0x1bc/0x280
    [    1.432905]  kernel_init+0x18/0x160
    [    1.433115]  ret_from_fork+0x10/0x18
    [    1.433297] ---[ end trace 27fd415390eb9883 ]---
    
    Rework to set suppress_bind_attrs flag to avoid removing the device when
    CONFIG_DEBUG_TEST_DRIVER_REMOVE=y, since there's no real reason to
    remove the armv8_pmuv3 driver.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Co-developed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbb97f7663c078f1f5c7fa1108b65bd4a0dd79fe
Author: Vitaly Chikunov <vt@altlinux.org>
Date:   Sun Nov 11 20:40:02 2018 +0300

    crypto: ecc - regularize scalar for scalar multiplication
    
    [ Upstream commit 3da2c1dfdb802b184eea0653d1e589515b52d74b ]
    
    ecc_point_mult is supposed to be used with a regularized scalar,
    otherwise, it's possible to deduce the position of the top bit of the
    scalar with timing attack. This is important when the scalar is a
    private key.
    
    ecc_point_mult is already using a regular algorithm (i.e. having an
    operation flow independent of the input scalar) but regularization step
    is not implemented.
    
    Arrange scalar to always have fixed top bit by adding a multiple of the
    curve order (n).
    
    References:
    The constant time regularization step is based on micro-ecc by Kenneth
    MacKay and also referenced in the literature (Bernstein, D. J., & Lange,
    T. (2017). Montgomery curves and the Montgomery ladder. (Cryptology
    ePrint Archive; Vol. 2017/293). s.l.: IACR. Chapter 4.6.2.)
    
    Signed-off-by: Vitaly Chikunov <vt@altlinux.org>
    Cc: kernel-hardening@lists.openwall.com
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e5be6e3f56a257e4b790998aa3dabd4f591d53c
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Tue Nov 13 22:42:44 2018 +0000

    MIPS: SiByte: Enable swiotlb for SWARM, LittleSur and BigSur
    
    [ Upstream commit e4849aff1e169b86c561738daf8ff020e9de1011 ]
    
    The Broadcom SiByte BCM1250, BCM1125, and BCM1125H SOCs have an onchip
    DRAM controller that supports memory amounts of up to 16GiB, and due to
    how the address decoder has been wired in the SOC any memory beyond 1GiB
    is actually mapped starting from 4GiB physical up, that is beyond the
    32-bit addressable limit[1].  Consequently if the maximum amount of
    memory has been installed, then it will span up to 19GiB.
    
    Many of the evaluation boards we support that are based on one of these
    SOCs have their memory soldered and the amount present fits in the
    32-bit address range.  The BCM91250A SWARM board however has actual DIMM
    slots and accepts, depending on the peripherals revision of the SOC, up
    to 4GiB or 8GiB of memory in commercially available JEDEC modules[2].
    I believe this is also the case with the BCM91250C2 LittleSur board.
    This means that up to either 3GiB or 7GiB of memory requires 64-bit
    addressing to access.
    
    I believe the BCM91480B BigSur board, which has the BCM1480 SOC instead,
    accepts at least as much memory, although I have no documentation or
    actual hardware available to verify that.
    
    Both systems have PCI slots installed for use by any PCI option boards,
    including ones that only support 32-bit addressing (additionally the
    32-bit PCI host bridge of the BCM1250, BCM1125, and BCM1125H SOCs limits
    addressing to 32-bits), and there is no IOMMU available.  Therefore for
    PCI DMA to work in the presence of memory beyond enable swiotlb for the
    affected systems.
    
    All the other SOC onchip DMA devices use 40-bit addressing and therefore
    can address the whole memory, so only enable swiotlb if PCI support and
    support for DMA beyond 4GiB have been both enabled in the configuration
    of the kernel.
    
    This shows up as follows:
    
    Broadcom SiByte BCM1250 B2 @ 800 MHz (SB1 rev 2)
    Board type: SiByte BCM91250A (SWARM)
    Determined physical RAM map:
     memory: 000000000fe7fe00 @ 0000000000000000 (usable)
     memory: 000000001ffffe00 @ 0000000080000000 (usable)
     memory: 000000000ffffe00 @ 00000000c0000000 (usable)
     memory: 0000000087fffe00 @ 0000000100000000 (usable)
    software IO TLB: mapped [mem 0xcbffc000-0xcfffc000] (64MB)
    
    in the bootstrap log and removes failures like these:
    
    defxx 0000:02:00.0: dma_direct_map_page: overflow 0x0000000185bc6080+4608 of device mask ffffffff bus mask 0
    fddi0: Receive buffer allocation failed
    fddi0: Adapter open failed!
    IP-Config: Failed to open fddi0
    defxx 0000:09:08.0: dma_direct_map_page: overflow 0x0000000185bc6080+4608 of device mask ffffffff bus mask 0
    fddi1: Receive buffer allocation failed
    fddi1: Adapter open failed!
    IP-Config: Failed to open fddi1
    
    when memory beyond 4GiB is handed out to devices that can only do 32-bit
    addressing.
    
    This updates commit cce335ae47e2 ("[MIPS] 64-bit Sibyte kernels need
    DMA32.").
    
    References:
    
    [1] "BCM1250/BCM1125/BCM1125H User Manual", Revision 1250_1125-UM100-R,
        Broadcom Corporation, 21 Oct 2002, Section 3: "System Overview",
        "Memory Map", pp. 34-38
    
    [2] "BCM91250A User Manual", Revision 91250A-UM100-R, Broadcom
        Corporation, 18 May 2004, Section 3: "Physical Description",
        "Supported DRAM", p. 23
    
    Signed-off-by: Maciej W. Rozycki <macro@linux-mips.org>
    [paul.burton@mips.com: Remove GPL text from dma.c; SPDX tag covers it]
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Patchwork: https://patchwork.linux-mips.org/patch/21108/
    References: cce335ae47e2 ("[MIPS] 64-bit Sibyte kernels need DMA32.")
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d839c72fc13470bc2df7a777ffcb9d3a8d5022b
Author: Borislav Petkov <bp@suse.de>
Date:   Fri Nov 9 23:13:13 2018 +0100

    x86/mce: Fix -Wmissing-prototypes warnings
    
    [ Upstream commit 68b5e4326e4b8ac9080835005d8254fed0fb3c56 ]
    
    Add the proper includes and make smca_get_name() static.
    
    Fix an actual bug too which the warning triggered:
    
      arch/x86/kernel/cpu/mcheck/therm_throt.c:395:39: error: conflicting \
      types for ‘smp_thermal_interrupt’
       asmlinkage __visible void __irq_entry smp_thermal_interrupt(struct pt_regs *r)
                                             ^~~~~~~~~~~~~~~~~~~~~
      In file included from arch/x86/kernel/cpu/mcheck/therm_throt.c:29:
      ./arch/x86/include/asm/traps.h:107:17: note: previous declaration of \
              ‘smp_thermal_interrupt’ was here
       asmlinkage void smp_thermal_interrupt(void);
    
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Yi Wang <wang.yi59@zte.com.cn>
    Cc: Michael Matz <matz@suse.de>
    Cc: x86@kernel.org
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1811081633160.1549@nanos.tec.linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3945c33a608ee76c14eed35cdedaaffa5df03a18
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Tue Nov 13 12:01:30 2018 +0900

    ALSA: oxfw: add support for APOGEE duet FireWire
    
    [ Upstream commit fba43f454cdf9caa3185219d116bd2a6e6354552 ]
    
    This commit adds support for APOGEE duet FireWire, launched 2007, already
    discontinued. This model uses Oxford Semiconductor FW971 as its
    communication engine. Below is information on Configuration ROM of this
    unit. The unit supports some AV/C commands defined by Audio subunit
    specification and vendor dependent commands.
    
    $ ./hinawa-config-rom-printer /dev/fw1
    { 'bus-info': { 'adj': False,
                    'bmc': False,
                    'chip_ID': 42949742248,
                    'cmc': False,
                    'cyc_clk_acc': 255,
                    'generation': 0,
                    'imc': False,
                    'isc': True,
                    'link_spd': 3,
                    'max_ROM': 0,
                    'max_rec': 64,
                    'name': '1394',
                    'node_vendor_ID': 987,
                    'pmc': False},
      'root-directory': [ ['VENDOR', 987],
                          ['DESCRIPTOR', 'Apogee Electronics'],
                          ['MODEL', 122333],
                          ['DESCRIPTOR', 'Duet'],
                          [ 'NODE_CAPABILITIES',
                            { 'addressing': {'64': True, 'fix': True, 'prv': False},
                              'misc': {'int': False, 'ms': False, 'spt': True},
                              'state': { 'atn': False,
                                         'ded': False,
                                         'drq': True,
                                         'elo': False,
                                         'init': False,
                                         'lst': True,
                                         'off': False},
                              'testing': {'bas': False, 'ext': False}}],
                          [ 'UNIT',
                            [ ['SPECIFIER_ID', 41005],
                              ['VERSION', 65537],
                              ['MODEL', 122333],
                              ['DESCRIPTOR', 'Duet']]]]}
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 464b01e4406ec3580020755f6fc4baddc6f9663c
Author: Andrey Ignatov <rdna@fb.com>
Date:   Sat Nov 10 22:15:13 2018 -0800

    bpf: Allow narrow loads with offset > 0
    
    [ Upstream commit 46f53a65d2de3e1591636c22b626b09d8684fd71 ]
    
    Currently BPF verifier allows narrow loads for a context field only with
    offset zero. E.g. if there is a __u32 field then only the following
    loads are permitted:
      * off=0, size=1 (narrow);
      * off=0, size=2 (narrow);
      * off=0, size=4 (full).
    
    On the other hand LLVM can generate a load with offset different than
    zero that make sense from program logic point of view, but verifier
    doesn't accept it.
    
    E.g. tools/testing/selftests/bpf/sendmsg4_prog.c has code:
    
      #define DST_IP4                       0xC0A801FEU /* 192.168.1.254 */
      ...
            if ((ctx->user_ip4 >> 24) == (bpf_htonl(DST_IP4) >> 24) &&
    
    where ctx is struct bpf_sock_addr.
    
    Some versions of LLVM can produce the following byte code for it:
    
           8:       71 12 07 00 00 00 00 00         r2 = *(u8 *)(r1 + 7)
           9:       67 02 00 00 18 00 00 00         r2 <<= 24
          10:       18 03 00 00 00 00 00 fe 00 00 00 00 00 00 00 00         r3 = 4261412864 ll
          12:       5d 32 07 00 00 00 00 00         if r2 != r3 goto +7 <LBB0_6>
    
    where `*(u8 *)(r1 + 7)` means narrow load for ctx->user_ip4 with size=1
    and offset=3 (7 - sizeof(ctx->user_family) = 3). This load is currently
    rejected by verifier.
    
    Verifier code that rejects such loads is in bpf_ctx_narrow_access_ok()
    what means any is_valid_access implementation, that uses the function,
    works this way, e.g. bpf_skb_is_valid_access() for __sk_buff or
    sock_addr_is_valid_access() for bpf_sock_addr.
    
    The patch makes such loads supported. Offset can be in [0; size_default)
    but has to be multiple of load size. E.g. for __u32 field the following
    loads are supported now:
      * off=0, size=1 (narrow);
      * off=1, size=1 (narrow);
      * off=2, size=1 (narrow);
      * off=3, size=1 (narrow);
      * off=0, size=2 (narrow);
      * off=2, size=2 (narrow);
      * off=0, size=4 (full).
    
    Reported-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Andrey Ignatov <rdna@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c7c36a7f3487a6ee3a178022081165ce369c0a5
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Tue Oct 30 12:35:44 2018 +0100

    serial: set suppress_bind_attrs flag only if builtin
    
    [ Upstream commit 646097940ad35aa2c1f2012af932d55976a9f255 ]
    
    When the test 'CONFIG_DEBUG_TEST_DRIVER_REMOVE=y' is enabled,
    arch_initcall(pl011_init) came before subsys_initcall(default_bdi_init).
    devtmpfs gets killed because we try to remove a file and decrement the
    wb reference count before the noop_backing_device_info gets initialized.
    
    [    0.332075] Serial: AMBA PL011 UART driver
    [    0.485276] 9000000.pl011: ttyAMA0 at MMIO 0x9000000 (irq = 39, base_baud = 0) is a PL011 rev1
    [    0.502382] console [ttyAMA0] enabled
    [    0.515710] Unable to handle kernel paging request at virtual address 0000800074c12000
    [    0.516053] Mem abort info:
    [    0.516222]   ESR = 0x96000004
    [    0.516417]   Exception class = DABT (current EL), IL = 32 bits
    [    0.516641]   SET = 0, FnV = 0
    [    0.516826]   EA = 0, S1PTW = 0
    [    0.516984] Data abort info:
    [    0.517149]   ISV = 0, ISS = 0x00000004
    [    0.517339]   CM = 0, WnR = 0
    [    0.517553] [0000800074c12000] user address but active_mm is swapper
    [    0.517928] Internal error: Oops: 96000004 [#1] PREEMPT SMP
    [    0.518305] Modules linked in:
    [    0.518839] CPU: 0 PID: 13 Comm: kdevtmpfs Not tainted 4.19.0-rc5-next-20180928-00002-g2ba39ab0cd01-dirty #82
    [    0.519307] Hardware name: linux,dummy-virt (DT)
    [    0.519681] pstate: 80000005 (Nzcv daif -PAN -UAO)
    [    0.519959] pc : __destroy_inode+0x94/0x2a8
    [    0.520212] lr : __destroy_inode+0x78/0x2a8
    [    0.520401] sp : ffff0000098c3b20
    [    0.520590] x29: ffff0000098c3b20 x28: 00000000087a3714
    [    0.520904] x27: 0000000000002000 x26: 0000000000002000
    [    0.521179] x25: ffff000009583000 x24: 0000000000000000
    [    0.521467] x23: ffff80007bb52000 x22: ffff80007bbaa7c0
    [    0.521737] x21: ffff0000093f9338 x20: 0000000000000000
    [    0.522033] x19: ffff80007bbb05d8 x18: 0000000000000400
    [    0.522376] x17: 0000000000000000 x16: 0000000000000000
    [    0.522727] x15: 0000000000000400 x14: 0000000000000400
    [    0.523068] x13: 0000000000000001 x12: 0000000000000001
    [    0.523421] x11: 0000000000000000 x10: 0000000000000970
    [    0.523749] x9 : ffff0000098c3a60 x8 : ffff80007bbab190
    [    0.524017] x7 : ffff80007bbaa880 x6 : 0000000000000c88
    [    0.524305] x5 : ffff0000093d96c8 x4 : 61c8864680b583eb
    [    0.524567] x3 : ffff0000093d6180 x2 : ffffffffffffffff
    [    0.524872] x1 : 0000800074c12000 x0 : 0000800074c12000
    [    0.525207] Process kdevtmpfs (pid: 13, stack limit = 0x(____ptrval____))
    [    0.525529] Call trace:
    [    0.525806]  __destroy_inode+0x94/0x2a8
    [    0.526108]  destroy_inode+0x34/0x88
    [    0.526370]  evict+0x144/0x1c8
    [    0.526636]  iput+0x184/0x230
    [    0.526871]  dentry_unlink_inode+0x118/0x130
    [    0.527152]  d_delete+0xd8/0xe0
    [    0.527420]  vfs_unlink+0x240/0x270
    [    0.527665]  handle_remove+0x1d8/0x330
    [    0.527875]  devtmpfsd+0x138/0x1c8
    [    0.528085]  kthread+0x14c/0x158
    [    0.528291]  ret_from_fork+0x10/0x18
    [    0.528720] Code: 92800002 aa1403e0 d538d081 8b010000 (c85f7c04)
    [    0.529367] ---[ end trace 5a3dee47727f877c ]---
    
    Rework to set suppress_bind_attrs flag to avoid removing the device when
    CONFIG_DEBUG_TEST_DRIVER_REMOVE=y. This applies for pic32_uart and
    xilinx_uartps as well.
    
    Co-developed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7a5f0073533f9dfe727ca373e58b5b93b0f1d55
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Tue Oct 30 12:35:45 2018 +0100

    writeback: don't decrement wb->refcnt if !wb->bdi
    
    [ Upstream commit 347a28b586802d09604a149c1a1f6de5dccbe6fa ]
    
    This happened while running in qemu-system-aarch64, the AMBA PL011 UART
    driver when enabling CONFIG_DEBUG_TEST_DRIVER_REMOVE.
    arch_initcall(pl011_init) came before subsys_initcall(default_bdi_init),
    devtmpfs' handle_remove() crashes because the reference count is a NULL
    pointer only because wb->bdi hasn't been initialized yet.
    
    Rework so that wb_put have an extra check if wb->bdi before decrement
    wb->refcnt and also add a WARN_ON_ONCE to get a warning if it happens again
    in other drivers.
    
    Fixes: 52ebea749aae ("writeback: make backing_dev_info host cgroup-specific bdi_writebacks")
    Co-developed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6d75422462a5c1ec6910d9b67360b69c2ced1ac
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:25:13 2018 -0700

    of: overlay: add missing of_node_put() after add new node to changeset
    
    [ Upstream commit 7c528e457d53c75107d5aa56892316d265c778de ]
    
    The refcount of a newly added overlay node decrements to one
    (instead of zero) when the overlay changeset is destroyed.  This
    change will cause the final decrement be to zero.
    
    After applying this patch, new validation warnings will be
    reported from the devicetree unittest during boot due to
    a pre-existing devicetree bug.  The warnings will be similar to:
    
      OF: ERROR: memory leak before free overlay changeset,  /testcase-data/overlay-node/test-bus/test-unittest4
    
    This pre-existing devicetree bug will also trigger a WARN_ONCE() from
    refcount_sub_and_test_checked() when an overlay changeset is
    destroyed without having first been applied.  This scenario occurs
    when an error in the overlay is detected during the overlay changeset
    creation:
    
      WARNING: CPU: 0 PID: 1 at lib/refcount.c:187 refcount_sub_and_test_checked+0xa8/0xbc
      refcount_t: underflow; use-after-free.
    
      (unwind_backtrace) from (show_stack+0x10/0x14)
      (show_stack) from (dump_stack+0x6c/0x8c)
      (dump_stack) from (__warn+0xdc/0x104)
      (__warn) from (warn_slowpath_fmt+0x44/0x6c)
      (warn_slowpath_fmt) from (refcount_sub_and_test_checked+0xa8/0xbc)
      (refcount_sub_and_test_checked) from (kobject_put+0x24/0x208)
      (kobject_put) from (of_changeset_destroy+0x2c/0xb4)
      (of_changeset_destroy) from (free_overlay_changeset+0x1c/0x9c)
      (free_overlay_changeset) from (of_overlay_remove+0x284/0x2cc)
      (of_overlay_remove) from (of_unittest_apply_revert_overlay_check.constprop.4+0xf8/0x1e8)
      (of_unittest_apply_revert_overlay_check.constprop.4) from (of_unittest_overlay+0x960/0xed8)
      (of_unittest_overlay) from (of_unittest+0x1cc4/0x2138)
      (of_unittest) from (do_one_initcall+0x4c/0x28c)
      (do_one_initcall) from (kernel_init_freeable+0x29c/0x378)
      (kernel_init_freeable) from (kernel_init+0x8/0x110)
      (kernel_init) from (ret_from_fork+0x14/0x2c)
    
    Tested-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d216d503a0b2d3d235a9ea4d1f8e4e97e0197a92
Author: Quentin Monnet <quentin@isovalent.com>
Date:   Wed Nov 7 12:28:45 2018 +0000

    selftests/bpf: enable (uncomment) all tests in test_libbpf.sh
    
    [ Upstream commit f96afa767baffba7645f5e10998f5178948bb9aa ]
    
    libbpf is now able to load successfully test_l4lb_noinline.o and
    samples/bpf/tracex3_kern.o.
    
    For the test_l4lb_noinline, uncomment related tests from test_libbpf.c
    and remove the associated "TODO".
    
    For tracex3_kern.o, instead of loading a program from samples/bpf/ that
    might not have been compiled at this stage, try loading a program from
    BPF selftests. Since this test case is about loading a program compiled
    without the "-target bpf" flag, change the Makefile to compile one
    program accordingly (instead of passing the flag for compiling all
    programs).
    
    Regarding test_xdp_noinline.o: in its current shape the program fails to
    load because it provides no version section, but the loader needs one.
    The test was added to make sure that libbpf could load XDP programs even
    if they do not provide a version number in a dedicated section. But
    libbpf is already capable of doing that: in our case loading fails
    because the loader does not know that this is an XDP program (it does
    not need to, since it does not attach the program). So trying to load
    test_xdp_noinline.o does not bring much here: just delete this subtest.
    
    For the record, the error message obtained with tracex3_kern.o was
    fixed by commit e3d91b0ca523 ("tools/libbpf: handle issues with bpf ELF
    objects containing .eh_frames")
    
    I have not been abled to reproduce the "libbpf: incorrect bpf_call
    opcode" error for test_l4lb_noinline.o, even with the version of libbpf
    present at the time when test_libbpf.sh and test_libbpf_open.c were
    created.
    
    RFC -> v1:
    - Compile test_xdp without the "-target bpf" flag, and try to load it
      instead of ../../samples/bpf/tracex3_kern.o.
    - Delete test_xdp_noinline.o subtest.
    
    Cc: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 579f3fc1f46ff585004a1608d3eee4e714effd1e
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Mon Oct 1 12:45:00 2018 -0700

    usb: typec: tcpm: Do not disconnect link for self powered devices
    
    [ Upstream commit 23b5f73266e59a598c1e5dd435d87651b5a7626b ]
    
    During HARD_RESET the data link is disconnected.
    For self powered device, the spec is advising against doing that.
    
    >From USB_PD_R3_0
    7.1.5 Response to Hard Resets
    Device operation during and after a Hard Reset is defined as follows:
    Self-powered devices Should Not disconnect from USB during a Hard Reset
    (see Section 9.1.2).
    Bus powered devices will disconnect from USB during a Hard Reset due to the
    loss of their power source.
    
    Tackle this by letting TCPM know whether the device is self or bus powered.
    
    This overcomes unnecessary port disconnections from hard reset.
    Also, speeds up the enumeration time when connected to Type-A ports.
    
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    ---------
    Version history:
    V3:
    Rebase on top of usb-next
    
    V2:
    Based on feedback from heikki.krogerus@linux.intel.com
    - self_powered added to the struct tcpm_port which is populated from
      a. "connector" node of the device tree in tcpm_fw_get_caps()
      b. "self_powered" node of the tcpc_config in tcpm_copy_caps
    
    Based on feedbase from linux@roeck-us.net
    - Code was refactored
    - SRC_HARD_RESET_VBUS_OFF sets the link state to false based
      on self_powered flag
    
    V1 located here:
    https://lkml.org/lkml/2018/9/13/94
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88f3beae583682a992de2429992256666d70a40a
Author: Miroslav Lichvar <mlichvar@redhat.com>
Date:   Tue Oct 23 14:37:39 2018 +0200

    e1000e: allow non-monotonic SYSTIM readings
    
    [ Upstream commit e1f65b0d70e9e5c80e15105cd96fa00174d7c436 ]
    
    It seems with some NICs supported by the e1000e driver a SYSTIM reading
    may occasionally be few microseconds before the previous reading and if
    enabled also pass e1000e_sanitize_systim() without reaching the maximum
    number of rereads, even if the function is modified to check three
    consecutive readings (i.e. it doesn't look like a double read error).
    This causes an underflow in the timecounter and the PHC time jumps hours
    ahead.
    
    This was observed on 82574, I217 and I219. The fastest way to reproduce
    it is to run a program that continuously calls the PTP_SYS_OFFSET ioctl
    on the PHC.
    
    Modify e1000e_phc_gettime() to use timecounter_cyc2time() instead of
    timecounter_read() in order to allow non-monotonic SYSTIM readings and
    prevent the PHC from jumping.
    
    Cc: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: Miroslav Lichvar <mlichvar@redhat.com>
    Acked-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5090418fbb035555b54caee9af366944ccdd4d4
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Wed Oct 31 17:21:26 2018 -0700

    platform/x86: asus-wmi: Tell the EC the OS will handle the display off hotkey
    
    [ Upstream commit 78f3ac76d9e5219589718b9e4733bee21627b3f5 ]
    
    In the past, Asus firmwares would change the panel backlight directly
    through the EC when the display off hotkey (Fn+F7) was pressed, and
    only notify the OS of such change, with 0x33 when the LCD was ON and
    0x34 when the LCD was OFF. These are currently mapped to
    KEY_DISPLAYTOGGLE and KEY_DISPLAY_OFF, respectively.
    
    Most recently the EC on Asus most machines lost ability to toggle the
    LCD backlight directly, but unless the OS informs the firmware it is
    going to handle the display toggle hotkey events, the firmware still
    tries change the brightness through the EC, to no effect. The end result
    is a long list (at Endless we counted 11) of Asus laptop models where
    the display toggle hotkey does not perform any action. Our firmware
    engineers contacts at Asus were surprised that there were still machines
    out there with the old behavior.
    
    Calling WMNB(ASUS_WMI_DEVID_BACKLIGHT==0x00050011, 2) on the _WDG device
    tells the firmware that it should let the OS handle the display toggle
    event, in which case it will simply notify the OS of a key press with
    0x35, as shown by the DSDT excerpts bellow.
    
     Scope (_SB)
     {
         (...)
    
         Device (ATKD)
         {
             (...)
    
             Name (_WDG, Buffer (0x28)
             {
                 /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,
                 /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,
                 /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,
                 /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,
                 /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08
             })
             Method (WMNB, 3, Serialized)
             {
                 CreateDWordField (Arg2, Zero, IIA0)
                 CreateDWordField (Arg2, 0x04, IIA1)
                 Local0 = (Arg1 & 0xFFFFFFFF)
    
                 (...)
    
                 If ((Local0 == 0x53564544))
                 {
                     (...)
    
                     If ((IIA0 == 0x00050011))
                     {
                         If ((IIA1 == 0x02))
                         {
                             ^^PCI0.SBRG.EC0.SPIN (0x72, One)
                             ^^PCI0.SBRG.EC0.BLCT = One
                         }
    
                         Return (One)
                     }
                 }
                 (...)
             }
             (...)
         }
         (...)
     }
     (...)
    
     Scope (_SB.PCI0.SBRG.EC0)
     {
         (...)
    
         Name (BLCT, Zero)
    
         (...)
    
         Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
         {
             If ((BLCT == Zero))
             {
                 Local0 = One
                 Local0 = RPIN (0x72)
                 Local0 ^= One
                 SPIN (0x72, Local0)
                 If (ATKP)
                 {
                     Local0 = (0x34 - Local0)
                     ^^^^ATKD.IANE (Local0)
                 }
             }
             ElseIf ((BLCT == One))
             {
                 If (ATKP)
                 {
                     ^^^^ATKD.IANE (0x35)
                 }
             }
         }
         (...)
     }
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3dc1bc575e75a1b7a770eb67e98370f9210f95ae
Author: Shannon Nelson <shannon.nelson@oracle.com>
Date:   Thu Oct 4 16:28:52 2018 -0700

    ixgbe: allow IPsec Tx offload in VEPA mode
    
    [ Upstream commit 7fa57ca443cffe81ce8416b57966bfb0370678a1 ]
    
    When it's possible that the PF might end up trying to send a
    packet to one of its own VFs, we have to forbid IPsec offload
    because the device drops the packets into a black hole.
    See commit 47b6f50077e6 ("ixgbe: disallow IPsec Tx offload
    when in SR-IOV mode") for more info.
    
    This really is only necessary when the device is in the default
    VEB mode.  If instead the device is running in VEPA mode,
    the packets will go through the encryption engine and out the
    MAC/PHY as normal, and get "hairpinned" as needed by the switch.
    
    So let's not block IPsec offload when in VEPA mode.  To get
    there with the ixgbe device, use the handy 'bridge' command:
            bridge link set dev eth1 hwmode vepa
    
    Signed-off-by: Shannon Nelson <shannon.nelson@oracle.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd240b1182da8b4dae998fa18e645e827f3f39d8
Author: Christian König <christian.koenig@amd.com>
Date:   Fri Nov 2 14:46:24 2018 +0100

    drm/amdkfd: fix interrupt spin lock
    
    [ Upstream commit 2383a767c0ca06f96534456d8313909017c6c8d0 ]
    
    Vega10 has multiple interrupt rings, so this can be called from multiple
    calles at the same time resulting in:
    
    [   71.779334] ================================
    [   71.779406] WARNING: inconsistent lock state
    [   71.779478] 4.19.0-rc1+ #44 Tainted: G        W
    [   71.779565] --------------------------------
    [   71.779637] inconsistent {IN-HARDIRQ-W} -> {HARDIRQ-ON-W} usage.
    [   71.779740] kworker/6:1/120 [HC0[0]:SC0[0]:HE1:SE1] takes:
    [   71.779832] 00000000ad761971 (&(&kfd->interrupt_lock)->rlock){?...},
    at: kgd2kfd_interrupt+0x75/0x100 [amdgpu]
    [   71.780058] {IN-HARDIRQ-W} state was registered at:
    [   71.780115]   _raw_spin_lock+0x2c/0x40
    [   71.780180]   kgd2kfd_interrupt+0x75/0x100 [amdgpu]
    [   71.780248]   amdgpu_irq_callback+0x6c/0x150 [amdgpu]
    [   71.780315]   amdgpu_ih_process+0x88/0x100 [amdgpu]
    [   71.780380]   amdgpu_irq_handler+0x20/0x40 [amdgpu]
    [   71.780409]   __handle_irq_event_percpu+0x49/0x2a0
    [   71.780436]   handle_irq_event_percpu+0x30/0x70
    [   71.780461]   handle_irq_event+0x37/0x60
    [   71.780484]   handle_edge_irq+0x83/0x1b0
    [   71.780506]   handle_irq+0x1f/0x30
    [   71.780526]   do_IRQ+0x53/0x110
    [   71.780544]   ret_from_intr+0x0/0x22
    [   71.780566]   cpuidle_enter_state+0xaa/0x330
    [   71.780591]   do_idle+0x203/0x280
    [   71.780610]   cpu_startup_entry+0x6f/0x80
    [   71.780634]   start_secondary+0x1b0/0x200
    [   71.780657]   secondary_startup_64+0xa4/0xb0
    
    Fix this by always using irq save spin locks.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07f4cf9547d92cb7205f2bac9bce81164ad627f9
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Oct 18 15:49:41 2018 -0400

    drm/amd/display: Guard against null stream_state in set_crc_source
    
    [ Upstream commit f41a895026b8cb6f765190de7d2e7bc3ccbbd183 ]
    
    [Why]
    
    The igt@kms_plane@pixel-format-pipe tests can create a sequence where
    stream_state is NULL during amdgpu_dm_crtc_set_crc_source which results
    in a null pointer dereference.
    
    [How]
    
    Guard against stream_state being NULL before accessing its fields. This
    doesn't fix the root cause of the issue so a DRM_ERROR is generated
    to still fail the tests.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: David Francis <David.Francis@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 414dbd6c00b97035490e8ff659c83aeeb501c7e3
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Wed Oct 24 22:59:15 2018 +0530

    gpio: pl061: Move irq_chip definition inside struct pl061
    
    [ Upstream commit ed8dce4c6f726b7f3c6bf40859b92a9e32f189c1 ]
    
    Keeping the irq_chip definition static will make it shared with multiple
    giochips in the system. This practice is considered to be bad and now we
    will get the below warning from gpiolib core:
    
    "detected irqchip that is shared with multiple gpiochips: please fix the
    driver."
    
    Hence, move the irq_chip definition from static to `struct pl061` for
    using a unique irq_chip for each gpiochip.
    
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad7013cd6d6a95807673fe80a818156f96513d4d
Author: Stefano Brivio <sbrivio@redhat.com>
Date:   Fri Aug 17 21:09:47 2018 +0200

    netfilter: ipset: Allow matching on destination MAC address for mac and ipmac sets
    
    [ Upstream commit 8cc4ccf58379935f3ad456cc34e61c4e4c921d0e ]
    
    There doesn't seem to be any reason to restrict MAC address
    matching to source MAC addresses in set types bitmap:ipmac,
    hash:ipmac and hash:mac. With this patch, and this setup:
    
      ip netns add A
      ip link add veth1 type veth peer name veth2 netns A
      ip addr add 192.0.2.1/24 dev veth1
      ip -net A addr add 192.0.2.2/24 dev veth2
      ip link set veth1 up
      ip -net A link set veth2 up
    
      ip netns exec A ipset create test hash:mac
      dst=$(ip netns exec A cat /sys/class/net/veth2/address)
      ip netns exec A ipset add test ${dst}
      ip netns exec A iptables -P INPUT DROP
      ip netns exec A iptables -I INPUT -m set --match-set test dst -j ACCEPT
    
    ipset will match packets based on destination MAC address:
    
      # ping -c1 192.0.2.2 >/dev/null
      # echo $?
      0
    
    Reported-by: Yi Chen <yiche@redhat.com>
    Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 183144815e34369b97b8efbee7f524388c71ae1f
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Tue Jan 8 18:45:05 2019 +0100

    net: clear skb->tstamp in bridge forwarding path
    
    [ Upstream commit 41d1c8839e5f8cb781cc635f12791decee8271b7 ]
    
    Matteo reported forwarding issues inside the linux bridge,
    if the enslaved interfaces use the fq qdisc.
    
    Similar to commit 8203e2d844d3 ("net: clear skb->tstamp in
    forwarding paths"), we need to clear the tstamp field in
    the bridge forwarding path.
    
    Fixes: 80b14dee2bea ("net: Add a new socket option for a future transmit time.")
    Fixes: fb420d5d91c1 ("tcp/fq: move back to CLOCK_MONOTONIC")
    Reported-and-tested-by: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Acked-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1fa98a5748fa8dc5291ada95360ddbe24977246
Author: David Ahern <dsahern@gmail.com>
Date:   Sat Jan 5 07:35:04 2019 -0800

    ipv6: Take rcu_read_lock in __inet6_bind for mapped addresses
    
    [ Upstream commit d4a7e9bb74b5aaf07b89f6531c080b1130bdf019 ]
    
    I realized the last patch calls dev_get_by_index_rcu in a branch not
    holding the rcu lock. Add the calls to rcu_read_lock and rcu_read_unlock.
    
    Fixes: ec90ad334986 ("ipv6: Consider sk_bound_dev_if when binding a socket to a v4 mapped address")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19ad57e220a1335fd487f409efd9299157a48a70
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Jan 2 14:45:07 2019 +0800

    r8169: Add support for new Realtek Ethernet
    
    [ Upstream commit 36352991835ce99e46b4441dd0eb6980f9a83e8f ]
    
    There are two new Realtek Ethernet devices which are re-branded r8168h.
    Add the IDs to to support them.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reviewed-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8bb38336b7214b6547739c4eccdec2b3559b838f
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Fri Jan 4 13:26:10 2019 +0100

    qmi_wwan: add MTU default to qmap network interface
    
    [ Upstream commit f87118d5760f00af7228033fbe783c7f380d2866 ]
    
    This patch adds MTU default value to qmap network interface in
    order to avoid "RTNETLINK answers: No buffer space available"
    error when setting an ipv6 address.
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 598e57e029290be3e7f8f87ff908091a5a22ed2f
Author: David Rientjes <rientjes@google.com>
Date:   Wed Jan 2 13:01:43 2019 -0800

    net, skbuff: do not prefer skb allocation fails early
    
    [ Upstream commit f8c468e8537925e0c4607263f498a1b7c0c8982e ]
    
    Commit dcda9b04713c ("mm, tree wide: replace __GFP_REPEAT by
    __GFP_RETRY_MAYFAIL with more useful semantic") replaced __GFP_REPEAT in
    alloc_skb_with_frags() with __GFP_RETRY_MAYFAIL when the allocation may
    directly reclaim.
    
    The previous behavior would require reclaim up to 1 << order pages for
    skb aligned header_len of order > PAGE_ALLOC_COSTLY_ORDER before failing,
    otherwise the allocations in alloc_skb() would loop in the page allocator
    looking for memory.  __GFP_RETRY_MAYFAIL makes both allocations failable
    under memory pressure, including for the HEAD allocation.
    
    This can cause, among many other things, write() to fail with ENOTCONN
    during RPC when under memory pressure.
    
    These allocations should succeed as they did previous to dcda9b04713c
    even if it requires calling the oom killer and additional looping in the
    page allocator to find memory.  There is no way to specify the previous
    behavior of __GFP_REPEAT, but it's unlikely to be necessary since the
    previous behavior only guaranteed that 1 << order pages would be reclaimed
    before failing for order > PAGE_ALLOC_COSTLY_ORDER.  That reclaim is not
    guaranteed to be contiguous memory, so repeating for such large orders is
    usually not beneficial.
    
    Removing the setting of __GFP_RETRY_MAYFAIL to restore the previous
    behavior, specifically not allowing alloc_skb() to fail for small orders
    and oom kill if necessary rather than allowing RPCs to fail.
    
    Fixes: dcda9b04713c ("mm, tree wide: replace __GFP_REPEAT by __GFP_RETRY_MAYFAIL with more useful semantic")
    Signed-off-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e10411389248896a0016b13501a7341725bfb0ef
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Wed Jan 9 00:24:03 2019 +0100

    net: dsa: mv88x6xxx: mv88e6390 errata
    
    [ Upstream commit ea89098ef9a574bceca00d3b5df14aaf0b3f9ccf ]
    
    The 6390 copper ports have an errata which require poking magic values
    into undocumented magic registers and then performing a software
    reset.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07348a7ebb5879763765a82e9b384c5061cda8f4
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Tue Jan 8 16:48:13 2019 +0000

    mlxsw: spectrum_switchdev: Set PVID correctly during VLAN deletion
    
    [ Upstream commit 674bed5df4cab8f96d04f7b99608883a48f9226b ]
    
    When a VLAN is deleted from a bridge port we should not change the PVID
    unless the deleted VLAN is the PVID.
    
    Fixes: fe9ccc785de5 ("mlxsw: spectrum_switchdev: Don't batch VLAN operations")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cac1bffc77e9cd07cfde767bdf8128955b8a6a1a
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Jan 8 16:48:05 2019 +0000

    mlxsw: spectrum: Disable lag port TX before removing it
    
    [ Upstream commit 8adbe212a159d9c78a90fca1d854f6e63452426b ]
    
    Make sure that lag port TX is disabled before mlxsw_sp_port_lag_leave()
    is called and prevent from possible EMAD error.
    
    Fixes: 0d65fc13042f ("mlxsw: spectrum: Implement LAG port join/leave")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b25d7b69d6163551ad31c957e4f1a8f00c44daf
Author: David Ahern <dsahern@gmail.com>
Date:   Fri Jan 4 16:58:15 2019 -0800

    ipv6: Consider sk_bound_dev_if when binding a socket to a v4 mapped address
    
    [ Upstream commit ec90ad334986fa5856d11dd272f7f22fa86c55c4 ]
    
    Similar to c5ee066333eb ("ipv6: Consider sk_bound_dev_if when binding a
    socket to an address"), binding a socket to v4 mapped addresses needs to
    consider if the socket is bound to a device.
    
    This problem also exists from the beginning of git history.
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
